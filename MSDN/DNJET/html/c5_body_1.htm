<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Recordset Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h2><a name="jb2using_recordset_objects"></a>Using Recordset Objects</h2>
<p>
You use <b>Recordset</b> objects to manipulate the data in a database at the record level. There are five types of <b>Recordset</b> objects&nbsp;— table, dynaset, snapshot, forward-only, and dynamic. Table-type <b>Recordset</b> objects are available only in Microsoft Jet workspaces. Dynamic-type <b>Recordset</b> objects are available only in ODBCDirect workspaces. You specify the type of recordset you want to open by using the <i>type</i> argument of the <b>OpenRecordset</b> method.
<ul>
<li>
A table-type <b>Recordset</b> object refers to either a local table in the current database, or to a linked table in an external database created with Microsoft Access or Microsoft Jet. When you create a table-type <b>Recordset</b> object, the database engine opens the actual table, and your subsequent data manipulations operate directly on table data. A table-type <b>Recordset</b> object can be opened against only one table; it cannot be opened against a join or union query.<br><br></li>
<li>
One of the biggest advantages of the table-type <b>Recordset</b> object is that it can be indexed by using an index created for the underlying table. This allows much faster sorting and filtering than is possible with the other <b>Recordset</b> object types. To locate specific records, use the <b>Seek</b> method, which is faster than the Find methods.<br><br></li>
<li>
A dynaset-type <b>Recordset</b> object refers to either local or linked tables, or to the result of a query. It’s actually a set of references to records in one or more tables. With a dynaset, you can extract and update data from more than one table, including linked tables from other databases. Heterogeneous joins are a unique feature of dynasets&nbsp;— they enable you to use updatable join queries against tables in different types of databases.<br><br></li>
<li>
One of the main benefits of the dynaset-type <b>Recordset</b> object is that a dynaset and its underlying tables update each other. Changes made to records in the dynaset are written to the underlying table, and changes made by other users to data in the underlying tables while the dynaset is open are reflected in the dynaset. The dynaset is the most flexible and powerful type of <b>Recordset</b> object, although running queries and manipulating data may take longer than they would with a table-type <b>Recordset</b> object.<br><br></li>
<li>
A snapshot-type <b>Recordset</b> object contains a static copy of the data as it exists at the time the snapshot is created. In a Microsoft Jet workspace, a snapshot can’t be updated. In an ODBCDirect workspace, a snapshot may be updatable, depending on the Open Database Connectivity (ODBC) driver. For more information about ODBCDirect, see Chapter&nbsp;8, “<a href="c8_body.htm">Accessing External Data</a>,” and Chapter&nbsp;9, “<a href="c9_body.htm">Developing Client/Server Applications</a>.”<p>
The main advantage of using a snapshot is that it creates less processing overhead than the other types, so it may execute queries and return data faster, especially when you are working with ODBC data sources. Note that for .mdb files, Long Binary (OLE Object) and Memo fields are represented in a snapshot by pointers, rather than the actual data.</p>
</li>
<li>
A forward-only-type <b>Recordset</b> object is identical to a snapshot-type <b>Recordset</b> object but you can only scroll forward through its records. A forward-only-type <b>Recordset</b> object can’t be updated. Using this type of <b>Recordset</b> object improves performance when you need to make only a single pass through the records.<p>
Figure&nbsp;5.1 illustrates the difference between how data is stored in a snapshot-type or forward-only-type <b>Recordset</b> object and how it’s stored in a dynaset. The snapshot stores a copy of the entire record (except for Memo and Long Binary fields). The dynaset stores just the primary key for each record, copying the full record only when it’s needed for editing or display purposes.</p>
<p>
<b>Figure&nbsp;5.1   The difference between records stored in dynaset- and snapshot-type or forward-only-type Recordset objects.</b></p>
<p>
<img src="jet0503.gif" border=0></p>
</li>
<li>
A dynamic-type <b>Recordset</b> object is available only in ODBCDirect workspaces. This <b>Recordset</b> object represents a query result set in which you can add, change, or delete records. In addition, changes made to data in the underlying tables by other users are reflected in the <b>Recordset</b> object.</li>
</ul>
<p>
The type of <b>Recordset</b> object you use depends on what you want to do and whether you want to change or simply view the data. For example, if you must sort the data or work with indexes, use a table-type <b>Recordset</b> object. Because they are indexed, table-type <b>Recordset</b> objects also provide the fastest way to locate data. For example, you can use the <b>Seek</b> method to quickly locate records in an indexed table-type <b>Recordset</b> object only. To search for records in other <b>Recordset</b> object types, you must use the <b>FindFirst</b>, <b>FindLast</b>, <b>FindNext</b>, or <b>FindPrevious</b> method. If you want to be able to update a set of records selected by a query, use a dynaset. If the table-type is unavailable in a specific situation and you only need to scan through a set of records, using a snapshot-type or a forward-only-type <b>Recordset</b> object may improve performance.</p>
<p>
Using a table-type <b>Recordset</b> object, if that type is available, almost always results in the best performance.</p>
<p>
<b>Note   </b>In this chapter, the terms <i>table</i>, <i>dynaset</i>, <i>snapshot</i>, <i>forward-only</i>, and <i>dynamic</i> are often used for the sake of simplicity. Keep in mind, however, that these are all types of <b>Recordset</b> objects. For example, the term dynaset refers to a dynaset-type <b>Recordset</b> object.</p>
</BODY>
</HTML>

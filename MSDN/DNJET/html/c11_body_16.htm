<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Collections</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2collections"></a>Collections</h4>
<p>
The dbDAO classes emulate Visual Basic collections by providing member variables that point to collections. As with default values, there is no automatic lookup syntax, which means you have to use an explicit <b>Item</b> method. This method is overloaded to allow you to specify either an ordinal or string index in the collection.</p>
<p>
Automatic construction and destruction of these references means that statements of the following kind are valid:</p>
<pre><FONT FACE="Courier New" SIZE="3">d.m_Tabledefs.Item(i).Name</font></pre>
<p>
They result in the correct allocation of the referenced <b>Item</b> method (a <b>TableDef</b> object in this case), and its deallocation when the reference is complete. Of course, for repeated access, it is better to declare an explicit reference, but for one-time use, this is a convenient way to retrieve collection values.</p>
<p>
A convenient shorthand for specifying an item in a collection is to use the <b>[ ]</b> operator. The same statement would then be:</p>
<pre><FONT FACE="Courier New" SIZE="3">d.m_Tabledefs[i].Name</font></pre>
<p>
<b>Note   </b>If you reference fields by ordinal position cast the index as LONG to prevent the compiler from interpreting “0” as NULL.</p>
</BODY>
</HTML>

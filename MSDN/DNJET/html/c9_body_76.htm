<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Batch Optimistic Updating</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h3><a name="jb2using_batch_optimistic_updating"></a>Using Batch Optimistic Updating</h3>
<p>
In many client/server applications, optimistic updates occur on a record-by-record basis. This usually happens with the following series of events:
<ol>
<li>
A user edits a record.<br><br></li>
<li>
The user tries to save the record.<br><br></li>
<li>
The server attempts to place a lock on that record, and if successful, the record is updated. Otherwise, a lock violation is handled by the application.<br><br></li>
<li>
The user moves to another record and the entire process is repeated.</li>
</ol>
<p>
Although this process works well for many applications, it is often more efficient to have the user edit multiple records that are cached locally and then submit these records to the server in a single batch for updating. This process is called <i>batch optimistic updating</i>. Note that this differs from performing transactions with the <b>BeginTrans</b> and <b>CommitTrans</b> methods. When using the <b>BeginTrans</b> and <b>CommitTrans</b> methods, data is sent to the server to be cached every time you use the <b>AddNew</b> or <b>Update</b> methods within the transaction. Then, data is written to the server database from the server’s cache when you use the <b>CommitTrans</b> method to commit the transaction.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To use batch optimistic updating</b>
<ol>
<li>
Create an ODBCDirect workspace.<br><br></li>
<li>
Set the <b>DefaultCursorDriver</b> property of the workspace to <b>dbUseClientBatchCursor</b>.<br><br></li>
<li>
Open a <b>Connection</b> or <b>Database</b> object from the ODBCDirect workspace.<br><br></li>
<li>
Use the <b>OpenRecordset</b> method on the <b>Connection</b> or <b>Database</b> object to open a <b>Recordset</b> and specify the <b>dbOptimisticBatch</b> constant in the <i>lockedits</i> argument.<p>
<b>Note   </b>When you don’t use the <i>options</i> argument, which precedes the <i>lockedits</i> argument, you must specify 0 for <i>options</i>.</p>
</li>
<li>
Perform any edits to the <b>Recordset</b> object. All edits are cached locally.<br><br></li>
<li>
When you are ready to update the data source, call the <b>Update</b> method on the <b>Recordset</b> object, specifying <b>dbUpdateBatch</b> for the <i>type</i> argument.</li>
</ol>
<p>
<b>Note   </b>If you attempt a batch update while a record in that <b>Recordset</b> object is being edited by the user, the record being edited will automatically be updated before the batch update begins.</p>
<p>
The following example illustrates how to use batch optimistic updating.</p>
<pre><FONT FACE="Courier New" SIZE="3">Function RunInBatch()
&#09;Dim wrk As Workspace, cnn As Connection, rst As Recordset
&#09;Dim strConnect As String

&#09;' Create ODBCDirect workspace.
&#09;Set wrk = DBEngine.CreateWorkspace(&quot;ODBCDirect&quot;, &quot;Admin&quot;, &quot;&quot;, dbUseODBC)
&#09;' Set default cursor driver to dbUseClientBatchCursor.
&#09;wrk.DefaultCursorDriver = dbUseClientBatchCursor
&#09;' Create connection string.
&#09;strConnect = &quot;ODBC;DSN=Pubs;DATABASE=Pubs;UID=sa;PWD=;&quot;
&#09;' Open connection.
&#09;Set cnn = wrk.OpenConnection(&quot;&quot;, dbDriverNoPrompt, False, strConnect)
&#09;' Open recordset on connection.
&#09;Set rst = _
&#09;cnn.OpenRecordset(&quot;SELECT * FROM sales&quot;, dbOpenDynaset, 0, dbOptimisticBatch)

&#09;' Change all records in local recordset.
&#09;With rst
&#09;&#09;Do Until .EOF
&#09;&#09;&#09;.Edit
&#09;&#09;&#09;!qty = !qty + 1
&#09;&#09;&#09;.Update
&#09;&#09;&#09;.MoveNext
&#09;&#09;Loop
&#09;&#09;' Update all records in data source.
&#09;&#09;.Update dbUpdateBatch
&#09;End With
End Function</font></pre>
<p>
If multiple records have been edited locally, and you want to update the current record before you perform the batch update, you can call the <b>Update</b> method and specify the <b>dbUpdateCurrentRecord</b> constant for the <i>type</i> argument. This writes the current record to the data source without writing any other batch updates. This is illustrated in the following example.</p>
<pre><FONT FACE="Courier New" SIZE="3">' Edit and update first record.
&#09;' Only first record is written back to data source.
&#09;With rst
&#09;&#09;.MoveFirst
&#09;&#09;.Edit
&#09;&#09;!qty = !qty + 2
&#09;&#09;.Update dbUpdateCurrentRecord
&#09;&#09;' Update remaining records in data source.
&#09;&#09;.Update dbUpdateBatch
&#09;End With</font></pre>
</BODY>
</HTML>

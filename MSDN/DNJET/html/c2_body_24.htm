<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Object Variables</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>

	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END--><h4><a name="jb2using_object_variables"></a>Using Object Variables</h4>
<p>
The preceding sections have shown how to return a reference to an object in order to work with that object in Visual Basic. It’s possible to use an object reference throughout your code each time you need to refer to a particular object. However, your code runs more quickly if you declare an object variable to represent the object instead. An <i>object variable</i> is a variable that represents an object in Visual Basic. Object variables differ from regular variables in that they have no intrinsic value. They point to an object, not a value. In other words, an object variable points to an object’s representation in memory. All object variables that are assigned to an object point to the same object.</p>
<p>
There are several advantages to using object variables. By using object variables to refer to objects in your code, you can:
<ul>
<li>
Avoid typing and maintaining long lines of code that refer to objects. By using object variables, you can set a reference to an object once, and then continually refer to the object variable instead of making repeated explicit references to an object through the DAO object hierarchy.<br><br></li>
<li>
Write code that is easier to read and maintain.<br><br></li>
<li>
Improve the performance of your application. When you use object variables, DAO doesn’t need to repeatedly parse and resolve recurrent long object references. Because DAO has to resolve the reference to the object only once, your application should run marginally faster.</li>
</ul>
<p>
Object variables are a special type of variable supported by Visual Basic. Each object type in DAO has a corresponding object variable type. For example, the <b>Workspace</b> object has a corresponding workspace object variable, the <b>Database</b> object has a corresponding database object variable, and so on.</p>
<p>
To use an object variable, first declare the variable with the <b>Dim</b> statement and then use the <b>Set</b> statement to assign an object to it. The syntax is:</p>
<p>
<b>Dim</b> <i>ObjectVariable</i> <b>As</b> <i>ObjectType</i></p>
<p>
<b>Set</b> <i>ObjectVariable</i><b>=</b><i>SomeDataAccessObject</i></p>
<p>
For example, the following code, which prints the names of all the fields in a table, uses object variables to refer to <b>Database</b>, <b>TableDef</b>, and <b>Field</b> objects. In this example, <code>strDbPath</code> is the path to the database and <code>strTableName</code> is the name of the table:</p>
<pre><FONT FACE="Courier New" SIZE="3">Dim dbs As Database
Dim tdf As TableDef
Dim fld As Field

Set dbs = OpenDatabase(strDbPath)
Set tdf = dbs.TableDefs(strTableName)
For Each fld In tdf.Fields
&#09;Debug.Print fld.Name
Next fld</font></pre>
</BODY>
</HTML>

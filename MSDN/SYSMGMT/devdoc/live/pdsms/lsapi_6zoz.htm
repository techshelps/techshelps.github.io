<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Anti-Tampering Guidelines</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_anti_tampering_guidelines"></a>Anti-Tampering Guidelines</h2>
<p>
The security that the LSAPI provides is only as good as the security of the application code and the secret values themselves. </p>
<p>
Distribution of application code to end users means that an intruder can recover the shared secrets and use them to create a license system flow that appears to be correct for whatever challenge the application issues. An intruder can also locate and modify the code that compares and then validates the license system's challenge response. </p>
<p>
You should take defensive steps by using antivirus programming techniques and other measures to prevent code modification, and also to make it difficult to circumvent the basic challenge protocol. Following are guidelines that you can use when you develop an application that includes calls to the LSAPI functions. For additional information, see <a href="lsapi_1jji.htm#_win32_table_lookup_method">Table Lookup Method</a>. </p>
<p>
<i>When you select the license secrets </i>
<ul>
<li>
Choose unique secrets for each one of your company's applications. </li>
<li>
Choose unique secrets for each application version. </li>
</ul>
<p>
<i>When you code the application </i>
<ul>
<li>
If you include the secrets in the application, obscure them by encrypting them or scattering them throughout the code. </li>
<li>
Place most of the challenge code and data in discardable overlays, if possible. </li>
<li>
Incorporate an obscure internal checksum over the code that interfaces with the license system and with the challenge verification. </li>
<li>
Use different challenge values for calls to the <a href="lsapi_36lw.htm"><b>LSRequest</b></a><b> </b>and <a href="lsapi_1wpx.htm"><b>LSUpdate</b></a> functions. </li>
<li>
Verify the code offset when your application calls the challenge algorithm, at the entry point to the algorithm, if applicable. </li>
<li>
Avoid simple comparisons and obscure critical comparisons. </li>
<li>
Save the challenge response that the license system returns. Do not compare it for equality immediately after a call to the <a href="lsapi_36lw.htm"><b>LSRequest</b></a> or <a href="lsapi_1wpx.htm"><b>LSUpdate</b></a><b> </b>function. </li>
<li>
Perform a meaningless comparison immediately after a call to the <b>LSRequest</b> or <b>LSUpdate </b>function. </li>
<li>
Verify the challenge result more than once. </li>
<li>
Perform mathematical operations with the challenge response, and compute another result that your application verifies later in the code. </li>
<li>
Perform multiple operations with the challenge response, like meaningless read, comparison, and subtraction operations, before doing a final comparison. If the intruder uses a hardware monitor, this strategy can increase the number of hardware breakpoints that occur and thereby cause additional confusion for the intruder. </li>
<li>
To verify that the current license is still valid, call the <a href="lsapi_1wpx.htm"><b>LSUpdate</b></a> function periodically. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

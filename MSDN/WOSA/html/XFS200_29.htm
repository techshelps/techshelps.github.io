<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.13 Memory Management</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
3.13 Memory Management</h5>
<p>
WOSA/XFS specifies a protocol for dynamic allocation and release of memory.   The general strategy is that the service providers allocate memory as they need it, and the applications specify when it can be released.  This is implemented using a standard structure (WFSRESULT, defined in Section 8.1) that is always used to pass information to the applications from the services.  </p>
<p>
Most service provider function calls are asynchronous, and return their results via a completion message, which contains a pointer to a WFSRESULT structure, containing the function return status (hResult) and optional data.  The service provider allocates the memory for this structure, using the memory management framework described below.  The deallocation of the structure is done as follows:</p>
<ul>
<li>
<u>Asynchronous API functions</u><BR>The application receives the structure from the service provider via a completion message, and is responsible for deallocation.<p>
</li>
<li>
<u>Synchronous <b>WFSExecute</b>, <b>WFSGetInfo</b> and <b>WFSLock</b> API functions</u><BR>The XFS Manager passes through the WFSRESULT structure to the application as a returned parameter, and the application is then responsible for deallocation, just as for asynchronous calls.<p>
</li>
<li>
<u>All other synchronous API functions</u><BR>The XFS Manager unpacks the required information from the WFSRESULT structure into returned parameters to the application, deallocates the structure, and returns to the application.</li>
</ul>
<p>
Four functions are provided by the XFS Manager to implement this protocol:  <b>WFMAllocateBuffer</b>, <b>WFMAllocateMore</b>, <b>WFMFreeBuffer</b>, and <b>WFSFreeResult</b>.  Using these functions, two widely applicable allocation policies are supported:</p>
<ul>
<li>
a linear allocation policy<p>
</li>
<li>
a linked allocation policy</li>
</ul>
<p>
<i>Linear allocation </i>can be used for any flat or contiguously allocated data structure.  Such structures are returned in a single block of allocated memory by the <b>WFMAllocateBuffer</b> function.</p>
<p>
<i>Linked allocation</i> can be used as an efficient way of managing complex data structures, permitting the service provider some flexibility while allowing the application to release the entire structure with a single call.  In cases in which the service provider does not know a priori the size of the result data set, it makes an initial estimate, and uses <b>WFMAllocateBuffer</b>.  If the service provider later determines that more space is required by the data, new memory is requested using the function <b>WFMAllocateMore</b>, and is automatically linked to the originally allocated block.  The new memory block returned by <b>WFMAllocateMore</b> is, in general, not contiguous with the root block, and the user of this function should behave in all circumstances as if it is not.</p>
<p>
The service provider is free to choose whatever allocation granularity is most convenient.  This is completely transparent to the application or XFS Manager, which frees the entire WFSRESULT structure with a single <b>WFSFreeResult</b> call (the XFS Manager can also use this call as an indication that it can clean up any other objects associated with the request).  Applications must be sure <b><i>always</i></b> to free a returned WFSRESULT structure.  Note that a WFSRESULT structure may be returned even if the service provider has returned an error; if no WFSRESULT is returned, the pointer to the structure is NULL.  A service provider may use also this facility for its &quot;private&quot; memory management requirements; it then uses the <b>WFMFreeBuffer</b> support function to free the allocated memory.</p>
<p>
<u><b>NOTE</b>:</u> </p>
<p>
Applications and service providers <b><i>must</i></b> use the facilities provided by the XFS Manager for XFS-related memory allocation and deallocation, in order to avoid memory management conflicts among the applications, the XFS Manager and the service providers. </p>
<p>
The following example illustrates how a service provider dynamically allocates a WFSRESULT buffer structure and an additional data buffer.  Note that <b>WFMAllocateMore</b> automatically links these, allowing the application to free both structures with a single call.</p>
<pre><FONT FACE="COURIER NEW" SIZE=2>WFSRESULT * lpResultBuffer;

// service provider allocates a WFSResult buffer structure

result = <b>WFMAllocateBuffer</b>(sizeof(WFSRESULT), ulMemFlags, &amp;lpResultBuffer);
<FONT FACE="Symbol">&#183;</FONT> 
<FONT FACE="Symbol">&#183;</FONT> 
<FONT FACE="Symbol">&#183;</FONT> 
// service provider allocates additional memory 

hr = <b>WFMAllocateMore</b>(evenMoreMemory, lpResultBuffer, &amp;lpResultBuffer-&gt;lpBuffer);
<FONT FACE="Symbol">&#183;</FONT> 
<FONT FACE="Symbol">&#183;</FONT> 
<FONT FACE="Symbol">&#183;</FONT> </FONT></pre>
<p>
Once the application has retrieved all the information it needs from the WFSRESULT buffer and any associated structures, it must free the memory, which requires only a single call:</p>
<ul>
<li>
<p>
</li>
<li>
<p>
</li>
<li>
</li>
</ul>
<pre><FONT FACE="COURIER NEW" SIZE=2>// application deallocates the structure when it is finished with it

hr = <b>WFSFreeResult</b>(lpResultBuffer); // frees both the result buffer and              // any additional buffers
</FONT></pre>
<p>
<b><u>NOTE:</u></b></p>
<p>
When an application invokes an asynchronous or immediate (i.e., non-blocking) function which takes a pointer to a memory object as an argument, it is the responsibility of the service provider to ensure that it no longer needs access to the object before returning control to the application.  This allows the application to release (deallocate) the memory object immediately upon the return from the call.</p>
</BODY>
</HTML>

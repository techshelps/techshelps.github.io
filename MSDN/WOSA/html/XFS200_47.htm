<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.16 WFSLock</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.16 WFSLock</h5>
<p>
<b>HRESULT</b>  <b>WFSLock</b>( <i>hService, dwTimeOut</i> <i>, lppResult</i>)</p>
<p>
Establishes exclusive control by the calling application over the specified service.  The synchronous version of <b>WFSAsyncLock</b>.</p>
<p>
<b>Parameters</b> <b>HSERVICE   </b><i>hService</i></p>
<p>
Service provider handle as returned by <b>WFSOpen</b> or <b>WFSAsyncOpen.</b></p>
<p>
 <b>DWORD</b>   <i>dwTimeOut</i></p>
<p>
Number of milliseconds to wait for completion (WFS_INDEFINITE_WAIT to specify a request that will wait until completion).</p>
<p>
 <b>LPWFSRESULT</b>  *   <i>lppResult</i></p>
<p>
Pointer to the pointer to a WFSRESULT data structure (see Comments).  The service provider allocates the memory for this structure.</p>
<p>
<b>Mode</b> Synchronous</p>
<p>
<b>Comments</b> A service provider can support a &quot;shared&quot; session, in which multiple applications' data are mixed in the service's I/O stream.  More typically, a session is exclusive at any point in time; all I/O is for a single application.  To define an exclusive use of the service provider, a lock function (synchronous or asynchronous) must be used. See Section 3.8 for more discussion of the lock concepts and policy.</p>
<p>
 The time to complete will depend on whether there is another application that has acquired exclusive access to the service.  Note that trying to lock several services at the same time can lead to a deadlock.  The timeout capability is provided in the API to allow applications to prevent this.</p>
<p>
 <i>lppResult</i> is a pointer to a pointer to a WFSRESULT data structure containing a null-terminated array of service handles (<i>hService</i> values), specifying any <b><i>other</i></b> services that are already locked by the application (i.e., under the same <i>hApp</i>) , <b><i>only</i></b> <b><i>if </i></b> those services are part of a compound device that includes the service being locked, <b><i>and</i></b> are interdependent with it.  The returned pointer is NULL if there are no such &quot;associated&quot; services locked.  See Section 3.8.2 for more discussion of this subject.</p>
<p>
 The application <b><i>must</i></b> call <b>WFSFreeResult</b> to deallocate the WFSRESULT data structure, if there is one. Note that a WFSRESULT structure may be returned even if the function completes with an error; see Section 3.13.</p>
<p>
<b>Error Codes</b> If the function return is not WFS_SUCCESS, it is one of the following error conditions.  </p>
<dl>
<dt>
WFS_ERR_CANCELED</dt>
<dd>
The request was canceled by <b>WFSCancelBlockingCall</b>.<br>
</dd>
<dt>
WFS_ERR_CONNECTION_LOST</dt>
<dd>
The connection to the service is lost.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_HSERVICE</dt>
<dd>
The <i>hService</i> parameter is not a valid service handle.<br>
</dd>
<dt>
WFS_ERR_INVALID_POINTER</dt>
<dd>
A pointer parameter does not point to accessible memory.<br>
</dd>
<dt>
WFS_ERR_NOT_STARTED</dt>
<dd>
The application has not previously performed a successful <b>WFSStartUp</b>.<br>
</dd>
<dt>
WFS_ERR_OP_IN_PROGRESS</dt>
<dd>
A blocking operation is in progress on the thread; only <b>WFSCancelBlockingCall</b> and <b>WFSIsBlocking</b> are permitted at this time.<br>
</dd>
<dt>
WFS_ERR_TIMEOUT</dt>
<dd>
The timeout interval expired.</dd>
</dl>
<p>
<b>See also  WFSAsyncLock, WFSUnlock, WFSCancelBlockingCall</b></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6. Form Description</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h4>
6. Form Description</h4>
<p>
This section describes the forms mechanism used to define the tracks to be read or written. Forms are contained in a single file, with one section for each defined form. The name of each section is the form name parameter in the WFS_CMD_IDC_READ_TRACK and WFS_CMD_IDC_WRITE_TRACK commands.</p>
<p>
The currently active ID card unit (IDCU) form file is configured through the following  key</p>
<p>
WOSA/XFS_ROOT</p>
<p>
 FORMS</p>
<p>
  IDCU</p>
<p>
   formfile=&lt;path&gt;&lt;filename&gt;</p>
<p>
The read form defines which tracks should be read in the WFS_CMD_IDC_READ_TRACK command and what the response should be to a read failure. The read form can also be used to define logical track data, i.e. fields like “account number,” “issuer identifier,” and their position within the physical track data. For example, the output parameter of the WFS_CMD_IDC_READ_TRACK command with input parameter <i>lpstrFormName</i> = READTRACK3GERMAN could look like (see example 1 below):<BR><BR> &quot;TRACK3:MII=59\0ISSUERID=50050500\0ACCOUNT=1234567890\0LUHNT3=1\0\0\0&quot;</p>
<p>
The write form defines which track is to be written, the logical track data that is handed over in the WFS_CMD_IDC_WRITE_TRACK command, and how the write data is to be converted to the physical data to be written.</p>
<p>
<b>Reserved Keywords/Operands Meaning</b></p>
<p>
[] form name delimiters</p>
<p>
TRACK1 keyword to identify track 1</p>
<p>
TRACK2 keyword to identify track 2</p>
<p>
TRACK3 keyword to identify track 3</p>
<p>
FIELDSEPT1 value of field separator of track 1</p>
<p>
FIELDSEPT2 value of field separator of track 2</p>
<p>
FIELDSEPT3 value of field separator of track 3</p>
<p>
READ description of read action; the TRACKn keywords are processed left to right</p>
<p>
WRITE description of write action</p>
<p>
ALL read or write the complete track</p>
<p>
SECURE do the security check via the security module (CIM86 or MM)</p>
<p>
&amp; read/write all tracks specified, abort reading on read failure</p>
<p>
| read/write at least one of the tracks specified, continue reading on read failure</p>
<p>
FIELDSEPPOS<i>n</i> position of the <i>n</i>th occurrence of field separator on track</p>
<p>
, separator in a list of logical fields</p>
<p>
DEFAULT string for default substitution of track data to be written, that is not defined explicitly by the form fields. DEFAULT also allows an application to input fewer fields than those defined by the form.</p>
<p>
? Reserved value for DEFAULT keyword: substitute track data to write with its value read before.</p>
<p>
ENDTRACK is the reference to the end track position. It is used to identify fields positioned after the last field separator</p>
<p>
<b>Notes</b></p>
<p>
The &amp; and | operands may be combined in a single READ statement; for example:  </p>
<ul>
<li>
read track3 or track2, trying track3 first:<BR>  READ= TRACK3 | TRACK2<p>
</li>
<li>
read track 3 and at least one of track2 or track1:<BR>  READ= TRACK3 &amp; (TRACK2 | TRACK1)<BR> or:<BR>  READ= TRACK2 | TRACK1 &amp; TRACK3</li>
</ul>
<p>
Use of field separators in track layouts is to replace optional fields and terminate variable length fields.</p>
<p>
Write forms are designed for updating specific fields without altering the position of the field separators.</p>
<p>
The application may alter the position of the field separators by rewriting the card tracks (ALL option or DEFAULT option with default track data).</p>
<p>
<b>Example 1</b> Reading tracks:</p>
<pre><FONT FACE="COURIER NEW" SIZE=2>[READTRACK3GERMAN]
 FIELDSEPT1= =   /* field separator of track 1 */
 FIELDSEPT2= =  /* field separator of track 2 */
 FIELDSEPT3= =  /* field separator of track 3 */
 READ= TRACK3 &amp; TRACK1 &amp; TRACK2  /* all tracks must be read */
TRACK3= MII, ISSUERID, ACCOUNT, LUHNT3, SECURE /* read logical fields as defined below; also check the security */
 MII= FIELDSEPPOS1 + 1, FIELDSEPPOS1 + 2 
 ISSUERID= FIELDSEPPOS1 + 3, FIELDSEPPOS1 + 10
 ACCOUNT= FIELDSEPPOS1 + 11, FIELDSEPPOS2 - 2
 LUHNT3= FIELDSEPPOS2 - 1, FIELDSEPPOS2 - 1
 TRACK2= ALL  /* return track2 complete, <BR>       don't return logical fields */
 TRACK1= ALL  /* return track1 complete, <BR>       don't return logical fields */</FONT></pre>
<p>
 All tracks must be read (‘READ’), that is, the read fails if an error occurs on reading any one of the tracks (the ‘&amp;’ operand). The field “major industry identifier” (‘MII’) is located after the first field separator (‘FIELDSEPPOS1’) and its length is two bytes. The “issuer identifier” field (‘ISSUERID’) is located after the MII field, with a length of eight bytes. The next field, “account number” (‘ACCOUNT’) is variable length; it ends before the luhn digit field (‘LUHNT3’) that is the last digit in front of the second field separator (‘FIELDSEPPOS2’).</p>
<p>
<b>Example 2</b> Write a track:</p>
<pre><FONT FACE="COURIER NEW" SIZE=2>[WRITETRACK3]
FIELDSEPT3=  =
DEFAULT= ? /* fields not specified in the write form are to be left unchanged, i.e., read and the same data written back to them */
WRITE= TRACK3
TRACK3= RETRYCOUNT, DATE
RETRYCOUNT= FIELDSEPPOS2, + 22, FIELDSEPPOS2 + 22
DATE= FIELDSEPPOS5 + 1, FIELDSEPPOS5 + 4
</FONT></pre>
<p>
 Track 3 is to be written. In the example only the retry counter and the date of the last transaction are updated, the other fields are unchanged. (If the field ALL is defined, the data passed in the WFS_CMD_IDC_WRITE_TRACK command is written to the physical track without formatting.)</p>
</BODY>
</HTML>

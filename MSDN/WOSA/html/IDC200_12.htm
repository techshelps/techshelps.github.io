<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.2 WFS_CMD_IDC_WRITE_TRACK</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.2 WFS_CMD_IDC_WRITE_TRACK</h5>
<p>
<b>Description</b> For motor-driven card readers, the ID card unit checks whether a card has been inserted. If so, the data is written to the track as described in the form specified by the <i>lpstrFormName</i> parameter, and the other parameters.</p>
<p>
 If no card has been inserted, and for all other categories of devices, the ID card unit waits for the period of time specified in the <b>WFSExecute</b> call for a card to be either inserted or pulled through. The next step is writing the data defined by the form and the parameters to the respective track (see Section 6, Form Definition, for a more detailed description of the forms mechanism).</p>
<p>
 This procedure is followed by data verification.</p>
<p>
<b>Input Param </b><code>LPWFSIDCWRITETRACK</code> <code>lpWriteTrack;</code></p>
<pre><FONT FACE="COURIER NEW" SIZE=2>struct _wfs_idc_write_track<BR> {<BR> LPSTR   lpstrFormName;<BR> LPSTR   lpstrTrackData;<BR> } WFSIDCWRITETRACK, * LPWFSIDCWRITETRACK;</FONT></pre>
<p>
 <i>lpstrFormName</i><BR>Points to the name of the form to be used.</p>
<p>
 <i>lpstrTrackData</i><BR>Points to the data to be used in the form.</p>
<p>
<b>Output Param</b> None.</p>
<p>
<b>Error Codes </b>The following additional error codes can be generated by this command:</p>
<p>
Value Meaning</p>
<p>
WFS_ERR_IDC_MEDIAJAM The card is jammed. Operator intervention is required.</p>
<p>
WFS_ERR_IDC_SHUTTERFAIL The open of the shutter failed due to manipulation or hardware error. Operator intervention is required</p>
<p>
WFS_ERR_IDC_NOMEDIA The card was removed before completion of the write operation.</p>
<p>
WFS_ERR_IDC_INVALIDDATA An error occurred while writing the track.</p>
<p>
WFS_ERR_IDC_DATASYNTAX The syntax of the data pointed to by <i>lpstrTrackData</i> is in error, or does not conform to the form definition.</p>
<p>
WFS_ERR_IDC_INVALIDMEDIA No track found; card may have been inserted or pulled through the wrong way.</p>
<p>
WFS_ERR_IDC_FORMNOTFOUND The specified form can not be found.</p>
<p>
WFS_ERR_IDC_FORMINVALID The specified form definition is invalid (e.g., syntax error).</p>
<p>
<b>Events</b> The following additional events can be generated by this command:</p>
<p>
Value Meaning</p>
<p>
WFS_EXEE_IDC_MEDIAINSERTED This event is generated when a card is detected in the device, giving early warning of card entry to an application, allowing it to remove a user prompt and/or do other processing while the card is being written.</p>
<p>
WFS_SRVE_IDC_MEDIAREMOVED This event is generated when a card is removed before completion of a write operation.</p>
<p>
<b>Comments </b>The field data is always preceded by the corresponding keyword, separated by an ‘=’. Fields are separated by 0x00. The end of the buffer is marked with an additional 0x00.  (See the example below and Section 6, Form Definition<i>.</i>)  This is a fundamental capability of an ID card unit; thus if a write request is received by a device with no write capability, the WFS_ERR_UNSUPP_COMMAND error is returned.</p>
<p>
<b> </b>Example of <i>lpstrTrackData</i>:<BR><code>RETRYCOUNT=3\0DATE=3132\0..\0\0</code></p>
</BODY>
</HTML>

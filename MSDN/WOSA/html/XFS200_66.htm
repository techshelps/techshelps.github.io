<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.7 WFPOpen </TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
5.7 WFPOpen </h5>
<p>
<b>HRESULT WFPOpen</b>( <i>hService, lpszLogicalName, hApp, lpszAppID, dwTraceLevel,  dwTimeOut, hWnd, ReqID, hProvider, dwSPIVersionsRequired, lpSPIVersion, dwSrvcVersionsRequired, lpSrvcVersion ) </i></p>
<p>
Establishes a connection between the XFS Manager and the service provider that supports the specified service, and initiates a <u>session</u> (a series of service requests terminated with the <b>WFPClose</b> function).</p>
<p>
<b>Parameters</b> <b>HSERVICE</b>   <i>hService</i></p>
<p>
The service handle to be associated with the session being opened..</p>
<p>
<b> LPSTR   </b><i>lpszLogicalName</i></p>
<p>
Points to a null-terminated string containing the pre-defined logical name of a service.  It is a high level name such as&nbsp;&quot;SYSJOURNAL1,&quot; &quot;PASSBOOKPTR3&quot; or &quot;ATM02,&quot; that is used by the XFS Manager and the service provider as a key to obtain the specific configuration information they need.</p>
<p>
 <b>HAPP   </b><i>hApp </i></p>
<p>
The application handle to be associated with the session being opened.  <BR>See <b>WFSCreateAppHandle</b> and Sections 3.5 and 3.8.2 for details.</p>
<p>
 <b>LPSTR</b>   <i>lpszAppID</i></p>
<p>
Pointer to a null terminated string containing the application ID; the pointer may be NULL if the ID is not used.</p>
<p>
 <b>DWORD   </b><i>dwTraceLevel</i></p>
<p>
See <b>WFPSetTraceLevel</b>.</p>
<p>
 <b>DWORD   </b><i>dwTimeOut</i></p>
<p>
Number of milliseconds to wait for completion (WFS_INDEFINITE_WAIT  to specify a request that will wait until completion). </p>
<p>
<i> </i><b>HWND   </b><i>hWnd</i></p>
<p>
The window handle which is to receive the completion message for this request.</p>
<p>
 <b>REQUESTID</b>   <i>ReqID </i></p>
<p>
Request identification number.</p>
<p>
 <b>HPROVIDER</b>   <i>hProvider</i></p>
<p>
Service provider handle supplied by the XFS Manager – used by the service provider to identify itself when calling the <b>WFMReleaseDLL</b> function.</p>
<p>
 <b>DWORD   </b><i>dwSPIVersionsRequired</i></p>
<p>
Specifies the range of WOSA/XFS SPI versions that the XFS Manager can support.  (See Comments.)  The low-order word indicates the highest version the XFS Manager can support; the high-order word indicates the lowest version the XFS Manager can support.  In each word, the low-order byte specifies the major version number and the high-order byte specifies the minor version number (i.e., the numbers before and after the decimal).<BR><b>Note</b>:  in order to allow intermediate minor revisions (e.g., between 1.10 and 1.20), the minor version number should always be expressed as two decimal digits, i.e., 1.10, 1.11, 1.20, etc.</p>
<p>
 <b>LPWFSVERSION</b>   <i>lpSPIVersion</i></p>
<p>
Pointer to the data structure that is to receive SPI version support information and (optionally) other details about the SPI implementation (returned parameter).</p>
<p>
 <b>DWORD   </b><i>dwSrvcVersionsRequired</i></p>
<p>
Service-specific interface versions required; see <i>dwSPIVersionsRequired</i> above, and <b>WFSOpen</b>.</p>
<p>
 <b>LPWFSVERSION</b>   <i>lpSrvcVersion</i></p>
<p>
Pointer to the service-specific interface implementation information; see <i>lpSPIVersion</i> above, and <b>WFSOpen</b> (returned parameter).</p>
<p>
<b>Mode</b> Asynchronous</p>
<p>
<b>Comments</b> This function establishes the connection between the XFS Manager and the service provider, including version negotiation and passing of implementation information, and initiates a session between the application and the service.  This call is made by the XFS Manager each time any application issues a <b>WFSOpen</b> or <b>WFSAsyncOpen</b> call to the specified service (immediately after loading the service provider DLL, if it is not already loaded).</p>
<p>
 In order to support future WOSA/XFS implementations with maximum flexibility, two version negotiations take place in <b>WFPOpen</b>.  In the first, the XFS Manager specifies in the <i>dwSPIVersionsRequired</i> parameter the range of versions of the WOSA/XFS SPI specification which it can support.  If the range of versions specified by the XFS Manager overlaps the range of versions that the service provider can support, the call succeeds.  Otherwise the call fails.</p>
<p>
 The WFSVERSION data structure (described in Section 8.2) is used by the service provider to return the version of SPI support it expects the XFS Manager to use (the highest common version), as well as the lowest and highest versions it is capable of.  In addition, this structure is used optionally by the XFS Manager to specify other information about the service provider implementation.  If the call fails, WFSVERSION is still returned, to help with analysis of the failure.</p>
<p>
 The version numbers refer to the SPI specification, specifically functions, parameters, data structures, error codes, and messages.  If there are any changes to these, the version number should be changed.</p>
<p>
 This version negotiation allows the XFS Manager and a service provider to operate successfully if there is any overlap in their versions.  The following chart gives examples of how <b>WFPOpen</b> works in conjunction with different XFS Manager and service provider versions:</p>
<table>
<tr valign=top>
<td>
XFS Manager versions</td>
<td>
Service Provider versions</td>
<td>
Return status from <b>WFPOpen</b></td>
<td>
Result<b> </b></td>
</tr>
<tr valign=top>
<td>
1.00</td>
<td>
1.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.00 </td>
</tr>
<tr valign=top>
<td>
1.00  -  2.10</td>
<td>
1.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.00 </td>
</tr>
<tr valign=top>
<td>
1.11</td>
<td>
1.00  -  2.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.11</td>
</tr>
<tr valign=top>
<td>
2.11  -  3.00</td>
<td>
1.00  -  2.20</td>
<td>
WFS_SUCCESS</td>
<td>
use 2.20 </td>
</tr>
<tr valign=top>
<td>
1.00</td>
<td>
2.20  -  3.00</td>
<td>
WFS_ERR_SPI_VER_TOO_LOW</td>
<td>
fails</td>
</tr>
<tr valign=top>
<td>
1.11  -  3.00</td>
<td>
1.00</td>
<td>
WFS_ERR_SPI_VER_TOO_HIGH</td>
<td>
fails</td>
</tr>
</table>
<p>
 The second negotiation is is in relation to the service-specific interface, between the application program and the service provider.  See <b>WFSOpen</b>, Section 4.19, for details. </p>
<p>
 Note that a version negotiation error also generates a system event (see Section 9.7).</p>
<p>
 Also, see <b>WFSStartUp</b>, Section 4.24.</p>
<p>
<b>Messages </b>WFS_OPEN_COMPLETE  </p>
<p>
<b>Error Codes</b> If the function return is not WFS_SUCCESS, it is one of the following error conditions, indicating that the asynchronous operation was not initiated.  Any service-specific errors that can be returned are defined in the specifications for each service class.</p>
<dl>
<dt>
WFS_ERR_CONNECTION_LOST</dt>
<dd>
The connection to the service is lost.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_HSERVICE</dt>
<dd>
The <i>hService</i> parameter is not a valid service handle.<br>
</dd>
<dt>
WFS_ERR_INVALID_HWND</dt>
<dd>
The <i>hWnd</i> parameter is not a valid window handle.<br>
</dd>
<dt>
WFS_ERR_INVALID_POINTER</dt>
<dd>
A pointer parameter does not point to accessible memory.<br>
</dd>
<dt>
WFS_ERR_INVALID_TRACELEVEL</dt>
<dd>
The <i>dwTraceLevel</i> parameter does not correspond to a valid trace level or set of levels.<br>
</dd>
<dt>
WFS_ERR_SPI_VER_TOO_HIGH</dt>
<dd>
The range of versions of WOSA/XFS SPI support requested by the XFS Manager is higher than any supported by this particular service provider.<br>
</dd>
<dt>
WFS_ERR_SPI_VER_TOO_LOW</dt>
<dd>
The range of versions of WOSA/XFS SPI support requested by the XFS Manager is lower than any supported by this particular service provider.<br>
</dd>
<dt>
WFS_ERR_SRVC_VER_TOO_HIGH</dt>
<dd>
The range of versions of the service-specific interface support requested by the application is higher than any supported by the service provider for the logical service being opened.<br>
</dd>
<dt>
WFS_ERR_SRVC_VER_TOO_LOW</dt>
<dd>
The range of versions of the service-specific interface support requested by the application is lower than any supported by the service provider for the logical service being opened.<br>
</dd>
<dt>
WFS_ERR_VERSION_ERROR_IN_SRVC</dt>
<dd>
Within the service, a version mismatch of two modules occurred.</dd>
</dl>
<p>
The following error conditions are returned via the asynchronous command completion message, as the <i>hResult</i> from the WFSRESULT structure.  The service-specific errors that can be returned are defined in the specifications for each service class.</p>
<dl>
<dt>
WFS_ERR_CANCELED</dt>
<dd>
The request was canceled by <b>WFSCancelAsyncRequest</b>.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_TIMEOUT</dt>
<dd>
The timeout interval expired.<br>
</dd>
<dt>
WFS_ERR_VERSION_ERROR_IN_SRVC</dt>
<dd>
Within the service, a version mismatch of two modules occurred.</dd>
</dl>
</BODY>
</HTML>

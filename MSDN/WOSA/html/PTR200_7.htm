<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4. Forms Model</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h4>
4. Forms Model</h4>
<p>
The WOSA/XFS printing class functionality is based on a “forms” model for printing. Banking documents are represented as a series of text and/or graphic fields output from the application, and positioned on the document by the WOSA/XFS printing system. </p>
<p>
The form is an object which includes the positioning and presentation information for each of the fields in the document. The application selects a form, and supplies only the field data and the control parameters to fully define the print document.</p>
<p>
The form objects are owned and managed by the WOSA/XFS printing service. To optimize maintainability of the system, the application can query the service for the list of fields required to print a given form. Through this mechanism, it is not necessary to duplicate the field contents of forms in application authoring data. The figure below outlines the printing process from the application's view.</p>
<p>
The WOSA/XFS implementation recognizes that the form object must be supported by job-specific data to fully address printing requirements. As an example, a form defining a passbook print line will need to have its origin defined externally in order to be reused for different passbook lines. These job specific parameters are supplied on the call to the <b>WFSExecute</b>: WFS_CMD_PTR_PRINT_FORM command.</p>
<p>
In some cases, the application wants to print a block of data without considering it as a series of separate fields. One example is a line of journal data, fully formatted by the application. This can be handled by defining a one field form, or by use of the <b>WFSExecute</b>: WFS_CMD_PTR_RAW_DATA command.</p>
<p>
The document definition under WOSA/XFS printing is standardized to provide portability across vendor implementations. The standard has been defined at the source language level for the document definition, allowing vendor differences at the runtime level to manage implementation specific dependencies, providing  several areas where vendors can provide value-added extensions. As an example, a vendor providing a graphical form definition tool can produce the field definition object format directly. The WOSA/XFS requirements for portability are:</p>
<ul>
<li>
A vendor must be able to export print format in the standardized field definition source format for portability to other systems.<p>
</li>
<li>
A vendor must be able to import document formats produced on other systems in the standardized field definition source format.<p>
</li>
<li>
A vendor can extend the field definition source language, but any verbs included in the standard must be implemented strictly as defined by the standard. Import and export facilities must be tolerant of source language extensions, reporting but ignoring the exceptions.</li>
</ul>
<p>
The document definition also recognizes that unique hardware restrictions may require tuning of field positioning from one vendor's platform to another. To enhance portability, the WOSA/XFS document format has specifically been defined to allow a single reference adjustment for all fields to avoid forcing the customer to reposition each field.</p>
</BODY>
</HTML>

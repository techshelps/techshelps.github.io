<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.8.1 Lock Policy for Independent Devices</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
3.8.1 Lock Policy for Independent Devices</h5>
<p>
The following describes how the categories of requests are handled, in each of the lock states of a service.  Note that although the description refers to queues and other implied implementation characteristics, this is only for convenience; no particular implementation techniques are required.   </p>
<p>
<b><u>Service state:  UNLOCKED</u></b></p>
<ul>
<li>
Non-deferred requests are processed on arrival.<p>
</li>
<li>
Deferred requests are placed in the deferred queue and processed FIFO.<p>
</li>
<li>
When a <b>WFPLock</b> request arrives:<ul>
<li>
The lock request is placed in the lock queue.<p>
</li>
<li>
The service state changes to LOCK_PENDING.</li>
</ul>
</li>
</ul>
<ol>
</ol>
<p>
<b><u>Service state:  LOCK_PENDING</u></b></p>
<ul>
<li>
All requests in the deferred queue that arrived <b><i>before</i></b> the pending lock request are processed FIFO; after all are processed, the the lock queue is processed.  Note that depending on the nature of the service/device, lock requests may be granted FIFO or in some other order, e.g., when an operator takes an action such as pressing a station button.<p>
</li>
<li>
When a lock request has been granted:<ul>
<li>
The service state changes to LOCKED.<p>
</li>
<li>
Any other pending lock requests from the same “owner” are also granted.  (The owner is the same if it comes from the same workstation and has the same application and service handles.)</li>
</ul>
</li>
</ul>
<p>
<b><u>Service state:  LOCKED</u></b></p>
<ul>
<li>
Arriving requests (except lock requests) are handled as follows:<ul>
<li>
Non-deferred requests are processed on arrival.<p>
</li>
<li>
Deferred requests that are <b><i>not</i></b> <b>WFPExecute</b> requests are placed in the deferred queue.<p>
</li>
<li>
<b>WFPExecute</b> requests from the owner of the lock are placed in the deferred queue.<p>
</li>
<li>
<b>WFPExecute</b> requests that are not from the owner of the lock are rejected (with error code WFS_ERR_LOCKED).<p>
</li>
<li>
<b>WFPUnlock</b> and <b>WFPClose</b> requests from the owner of the lock are placed in the deferred queue.  (Note that a close request to a locked service is treated as an unlock followed by a close.)<p>
</li>
<li>
<b>WFPUnlock</b> and <b>WFPClose</b> requests that are <b><i>not</i></b> from the owner of the lock are treated as non-deferred requests, i.e., processed on arrival.</li>
</ul>
<p>
</li>
<li>
The deferred queue is processed FIFO.<p>
</li>
<li>
When a <b>WFPLock</b> request arrives:<ul>
<li>
If it is from the owner of the lock, it is granted.<p>
</li>
<li>
If it is not from the owner of the lock, it is placed in the lock queue.</li>
</ul>
<p>
</li>
<li>
When a <b>WFPUnlock</b> or <b>WFPClose</b> request is processed from the deferred queue, or the connection between the service and the owner of the lock is lost:<ul>
<li>
If the lock queue is not empty, the service state changes to <b>LOCK_PENDING</b>.<p>
</li>
<li>
If the lock queue is empty, the service state changes to <b>UNLOCKED</b>.</li>
</ul>
</li>
</ul>
<p>
Note that most requests include a timeout parameter which must be managed appropriately, i.e., when the specified time expires, the request is rejected with the error code WFS_ERR_TIMEOUT.  The timeout parameter is particularly important with the <b>WFSLock</b> request, since it allows applications to set a maximum time to wait for a lock to be granted, to allow prevention of deadlock situations when requesting locks of multiple devices.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.18 WFSOpen</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.18 WFSOpen</h5>
<p>
<b>HRESULT WFSOpen</b>( <i>lpszLogicalName, hApp, lpszAppID, dwTraceLevel, dwTimeOut, dwSrvcVersionsRequired, lpSrvcVersion, lpSPIVersion, lphService</i> )</p>
<p>
Initiates a <u>session</u> (a series of service requests terminated with the <b>WFSClose</b> function) between the application and the specified service.  The synchronous version of <b>WFSAsyncOpen.</b></p>
<p>
<b>Parameters</b> <b>LPSTR   </b><i>lpszLogicalName</i></p>
<p>
Points to a null-terminated string containing the pre-defined logical name of a service.  It is a high level name such as&nbsp;&quot;SYSJOURNAL1,&quot; &quot;PASSBOOKPTR3&quot; or &quot;CASHDISP02,&quot; that is used by the XFS Manager and the service provider solely as a key to obtain the specific configuration information they need.</p>
<p>
 <b>HAPP   </b><i>hApp </i></p>
<p>
The application handle to be associated with the session being opened.  If this parameter is equal to WFS_DEFAULT_HAPP, the session is associated with the calling process as a whole (i.e., the calling process, not some subset of its threads, is the owner of the session and its <i>hService</i>).  See <b>WFSCreateAppHandle</b> and Sections 3.5 and 3.8.2 for details.</p>
<p>
 <b>LPSTR   </b><i>lpszAppID</i></p>
<p>
Points to a null-terminated string containing the application ID; the pointer may be NULL if the ID is not used.  This ID may be used by services in a variety of ways; e.g., it is included in the SYSTEM_EVENT message for undeliverable events, to aid in finding system problems</p>
<p>
 <b>DWORD   </b><i>dwTraceLevel</i></p>
<p>
See <b>WFMSetTraceLevel</b>.  NULL turns off all tracing.</p>
<p>
 <b>DWORD   </b><i>dwTimeOut</i></p>
<p>
Number of milliseconds to wait for completion (WFS_INDEFINITE_WAIT to specify a request that will wait until completion).</p>
<p>
 <b>DWORD   </b><i>dwSrvcVersionsRequired</i></p>
<p>
Specifies the range of versions of the service-specific interface that the application can support.  (See Comments.)  The low-order word indicates the highest version of the interface the application can support; the high-order word indicates the lowest version of the interface the application can support.  In each word, the low-order byte specifies the major version number and the high-order byte specifies the minor version number (i.e., the numbers before and after the decimal).  <BR><b>Note</b>:  in order to allow intermediate minor revisions (e.g., between 1.10 and 1.20), the minor version number should always be expressed as two decimal digits, i.e., 1.10, 1.11, 1.20, etc.</p>
<p>
 <b>LPWFSVERSION</b>   <i>lpSrvcVersion</i></p>
<p>
Pointer to the data structure that is to receive version support information and other details about the service-specific interface implementation (returned parameter).</p>
<p>
 <b>LPWFSVERSION</b>   <i>lpSPIVersion</i></p>
<p>
Pointer to the data structure that is to receive version support information and (optionally) other details about the SPI implementation of the service provider being opened (returned parameter).  This pointer may be NULL if the application is not interested in receiving this information.  See <b>WFPOpen</b>.</p>
<p>
 <b>LPHSERVICE   </b><i>lphService</i></p>
<p>
Pointer to the service handle that the XFS Manager assigns to the service on a successful open; the application uses this handle for communication with the service provider for the remainder of the session (returned parameter).  If a process opens the same service twice, the XFS Manager generates and returns different <i>hService</i> values.</p>
<p>
<b>Mode</b> Synchronous</p>
<p>
<b>Comments</b> This function is used by an application to initiate a session with a service; the session is terminated by <b>WFSClose.  </b>After <b>WFSStartUp</b>, an application must use this function (or the asynchronous version) to access a service.  The request is made in terms of a logical service name (<i>lpLogicalName</i>) which is mapped by the XFS Manager to a service provider.  The XFS Manager loads the service provider, if necessary, and returns a logical service handle to the application which is used during the session to refer to the service.</p>
<p>
 In order to support future WOSA/XFS implementations with maximum flexibility, two version negotiations take place in <b>WFSOpen</b> processing.  An application specifies in the <i>dwSrvcVersionsRequired</i> parameter the range of versions of the service-specific interface (as defined in the separate XFS specifications for specific classes of devices, such as banking  printers and cash dispensers)  that it can support.  If the range of versions specified by the application overlaps the range of versions that the service provider’s implementation can support, the call succeeds.  Otherwise the call fails.  (The other negotiation that takes place during the open process is between the XFS Manager and the service provider regarding the SPI level.  See <b>WFPOpen</b> for details.)</p>
<p>
 Information describing the actual service provider implementation is returned in the WFSVERSION data structure (defined in Section 8.2).  In particular, it returns the version the service provider expects the application to use (the highest common version), as well as the lowest and highest versions it is capable of.  If the call fails, WFSVERSION is still returned, to help with analysis of the failure.</p>
<p>
 The version numbers refer to the complete interface specification:  the service-specific <b>WFSExecute</b> and <b>WFSGetInfo</b> commands, parameters, data structures, error codes, and messages.  If there are any changes to these, the version number should be changed.</p>
<p>
 This version negotiation allows a WOSA/XFS application and a service provider to operate successfully if there is any overlap in their versions.  The following chart gives examples of how <b>WFSOpen</b> works in conjunction with different application and service provider versions:</p>
<table>
<tr valign=top>
<td>
Application version(s)</td>
<td>
Service Provider version(s)</td>
<td>
Return status from <b>WFSOpen</b></td>
<td>
Result<b> </b></td>
</tr>
<tr valign=top>
<td>
1.00</td>
<td>
1.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.00</td>
</tr>
<tr valign=top>
<td>
1.00  -  2.10</td>
<td>
1.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.00</td>
</tr>
<tr valign=top>
<td>
1.11</td>
<td>
1.00  -  2.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.11</td>
</tr>
<tr valign=top>
<td>
2.11  -  3.00</td>
<td>
1.00  -  2.20</td>
<td>
WFS_SUCCESS</td>
<td>
use 2.20 </td>
</tr>
<tr valign=top>
<td>
1.00</td>
<td>
2.20  -  3.00</td>
<td>
WFS_ERR_SRVC_VERS_TOO_LOW</td>
<td>
fails </td>
</tr>
<tr valign=top>
<td>
1.11  -  3.00</td>
<td>
1.00</td>
<td>
WFS_ERR_SRVC_VERS_TOO_HIGH</td>
<td>
fails </td>
</tr>
</table>
<p>
 Note that a version negotiation error also generates a system event (see Section 9.7).</p>
<p>
<b>Error Codes</b> If the function return is not WFS_SUCCESS, it is one of the following error conditions.  </p>
<dl>
<dt>
WFS_ERR_CANCELED</dt>
<dd>
The request was canceled by <b>WFSCancelBlockingCall</b>.<br>
</dd>
<dt>
WFS_ERR_CONNECTION_LOST</dt>
<dd>
The connection to the service is lost.<br>
</dd>
<dt>
WFS_ERR_DEV_NOT_READY </dt>
<dd>
The function required device access, and the device was not ready or timed out. <br>
</dd>
<dt>
WFS_ERR_HARDWARE_ERROR </dt>
<dd>
The function required device access, and an error occured on the device. <br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_APP_HANDLE </dt>
<dd>
The specified application handle is not valid, i.e., was not created by a preceding create call. <br>
</dd>
<dt>
WFS_ERR_INVALID_POINTER</dt>
<dd>
A pointer parameter does not point to accessible memory.<br>
</dd>
<dt>
WFS_ERR_INVALID_SERVPROV</dt>
<dd>
The file containing the service provider is invalid or corrupted.<br>
</dd>
<dt>
WFS_ERR_INVALID_TRACELEVEL</dt>
<dd>
The <i>dwTraceLevel</i> parameter does not correspond to a valid trace level or set of levels.<br>
</dd>
<dt>
WFS_ERR_NO_SERVPROV</dt>
<dd>
The file containing the service provider does not exist.<br>
</dd>
<dt>
WFS_ERR_NOT_STARTED</dt>
<dd>
The application has not previously performed a successful <b>WFSStartUp</b>.<br>
</dd>
<dt>
WFS_ERR_OP_IN_PROGRESS</dt>
<dd>
A blocking operation is in progress on the thread; only <b>WFSCancelBlockingCall</b> and <b>WFSIsBlocking</b> are permitted at this time.<br>
</dd>
<dt>
WFS_ERR_SERVICE_NOT_FOUND</dt>
<dd>
The logical name is not a valid service provider name.<br>
</dd>
<dt>
WFS_ERR_SOFTWARE_ERROR </dt>
<dd>
The function required access to configuration information, and an error occured on the software.<br>
</dd>
<dt>
WFS_ERR_SPI_VER_TOO_HIGH</dt>
<dd>
The range of versions of WOSA/XFS SPI support requested by the XFS Manager is higher than any supported by the service provider for the logical service being opened.<br>
</dd>
<dt>
WFS_ERR_SPI_VER_TOO_LOW</dt>
<dd>
The range of versions of WOSA/XFS SPI support requested by the a XFS Manager is lower than any supported by the service provider for the logical service being opened.<br>
</dd>
<dt>
WFS_ERR_SRVC_VER_TOO_HIGH</dt>
<dd>
The range of versions of the service-specific interface support requested by the application (in the <i>dwSrvcVersionsRequired</i> parameter of this call) is higher than any supported by the service provider for the logical service being opened.<br>
</dd>
<dt>
WFS_ERR_SRVC_VER_TOO_LOW</dt>
<dd>
The range of versions of the service-specific interface support requested by the application (in the <i>dwSrvcVersionsRequired</i> parameter of this call) is lower than any supported by the service provider for the logical service being opened.<br>
</dd>
<dt>
WFS_ERR_TIMEOUT</dt>
<dd>
The timeout interval expired.<br>
</dd>
<dt>
WFS_ERR_VERSION_ERROR_IN_SRVC</dt>
<dd>
Within the service, a version mismatch of two modules occurred.</dd>
</dl>
<p>
<b>See also WFSAsyncOpen, WFSClose, WFSCreateAppHandle</b></p>
</BODY>
</HTML>

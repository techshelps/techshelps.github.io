<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.1 Architecture</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
2.1 Architecture</h5>
<p>
The architecture of the WOSA Extensions for Financial Services (WOSA/XFS) system is shown below.</p>
<p>
Figure 2.1  —  WOSA Extensions for Financial Services Architecture</p>
<p>
The applications communicate with service providers, via the WOSA Extensions for Financial Services Manager, using the API set.  Most of these APIs can be invoked either &quot;synchronously&quot; (the Manager causes the application to wait until the API's function is completed) or &quot;asynchronously&quot; (the application regains control immediately, while the function is performed in parallel).</p>
<p>
The common deliverable in all implementations of this WOSA Extensions for Financial Services specification is the WOSA Extensions for Financial Services Manager, which maps the specified API to the corresponding SPI, then routes this request to the appropriate service provider.  The Manager uses the configuration information to route the API call (made to a &quot;logical service&quot; or a &quot;logical device&quot;) to the proper service provider entry point (which is always local, even though the device or service that is the final target may be remote).  Note that even though the API calls may be either synchronous or asynchronous, the SPI calls are always asynchronous.</p>
<p>
The developers of financial services to be used via XFS and the manufacturers of financial peripherals will be responsible for the development and distribution of service providers for their services and devices.  A setup routine for each device or service will also be necessary to define the appropriate configuration information.  This  information will allow an application to request capability and status information about the devices and services  available at any point in time.  </p>
<p>
The primary functions of the service providers are to:</p>
<ul>
<li>
Translate generic (e.g., forms-based) service requests to service-specific commands.<p>
</li>
<li>
Route the requests to either a local service or device, or to one on a remote system, effectively defining a peer-to-peer interface among service providers.<p>
</li>
<li>
Arbitrate access by multiple applications to a single service or device, providing exclusive access when requested.<p>
</li>
<li>
Manage the hardware interfaces to services or devices.<p>
</li>
<li>
Manage the asynchronous nature of the services and devices in an appropriate manner, always presenting this capability to the XFS Manager and the applications via Windows messages.</li>
</ul>
<p>
The system design supports solution of complex problems, often not addressed by current systems, by providing for maximum flexibility in all its capabilities:</p>
<ul>
<li>
Multiple service providers, developed by multiple vendors, can coexist in a single system and in a network.<p>
</li>
<li>
The service class definition is based on the logical functionalities of the service, with no assumption being made as to the physical configuration.  A physical device that includes multiple distinct physical capabilities (referred to as a &quot;compound device&quot; in this specification) is treated as several logical services; the service provider resolves any conflicts.  Note also that a logical service may include multiple physical devices (for example, a cash dispenser consisting of a note dispenser and coin dispenser).<p>
</li>
<li>
Similarly, a physical device may be shared between two or more users (e.g., tellers), and the physical device synchronization is managed at the service provider level.<p>
</li>
<li>
The API definition and associated services provide time-out functionality to allow applications to avoid deadlock of the type that can occur if two applications try to get exclusive access to multiple services at the same time.  <p>
</li>
<li>
The architecture is designed to provide a framework for future development of network and system monitoring, measurement, and management.</li>
</ul>
<p>
Note that Figure 2.1 is a high level view of the architecture and, in particular, it makes no distinction between service providers and the services they manage.  This specification focuses on service providers rather than on services, because the way a service provider communicates with a service is a vendor-specific internal design issue that applications and the XFS Manager are unaware of.  In fact, there are many different ways that service providers can make services available to applications.  Hence, this specification refers primarily to the service providers, since these are the modules with which the XFS Manager communicates.  There are occasional references to 'service' where this is appropriate.</p>
<p>
<u>Example</u></p>
<p>
Figure 2.2 below shows a WOSA/XFS system supporting a set of financial peripherals.  Note that in this framework the XFS Manager interfaces directly with a set of service providers that interface directly with the physical devices.  Thus, the service providers are shown as implementing the service provider, service, and device driver functions, although these are more likely to be two or more separate layers.  Many other configurations are possible.</p>
<p>
Figure 2.2  —  A WOSA/XFS architecture example for a branch office banking system </p>
<p>
It should also be noted that one vendor's service providers are not necessarily compatible with another vendor's, as shown in Figure 2.2.  If one application has to access the same service class as implemented by different vendors, a service provider is installed for each vendor.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.1 WFSCancelAsyncRequest</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.1 WFSCancelAsyncRequest</h5>
<p>
<b>HRESULT WFSCancelAsyncRequest</b>( <i>hService, RequestID</i> )</p>
<p>
Cancels the specified (or every) asynchronous request being performed on the specified service, before its (their) completion.</p>
<p>
<b>Parameters</b> <b>HSERVICE   </b><i>hService</i></p>
<p>
Handle to the service as returned by <b>WFSOpen</b> or <b>WFSAsyncOpen.</b></p>
<p>
 <b>REQUESTID   </b><i>RequestID</i></p>
<p>
The request identifier for the request to be canceled, as returned by the original function call (NULL to cancel all).</p>
<p>
<b>Mode </b>Immediate</p>
<p>
<b>Comments </b>If the <i>RequestID</i> parameter is set to NULL, the command will cancel <b><i>all</i></b> asynchronous requests that are in progress using the specified <i>hService</i>.</p>
<p>
 A previously initiated asynchronous request is canceled prior to completion by issuing the <b>WFSCancelAsyncRequest</b> function, specifying the request identifier returned by the asynchronous function.  This function is immediate with respect to its calling application, but the cancellation process is inherently asynchronous.  On completion, the specified request (or all requests) will have finished, with a completion message indicating a status of WFS_ERR_CANCELED, unless the cancel request was received by the service <b><i>after</i></b> the request had completed.  Thus, <b>WFSCancelAsyncRequest</b> is not guaranteed to stop all asynchronous commands: normal completion messages may still be posted after the cancel.  A robust application that uses asynchronous commands should be designed to accept these messages even after a cancel is issued.</p>
<p>
 The cancellation applies not only to the XFS Manager level, but also to the service provider level.  The request is passed through the SPI, and the service provider normally then also cancels any physical I/O or other device operation in progress, in the appropriate manner for the device or service.<b> </b></p>
<p>
<b>Error Codes</b> If the function return is not WFS_SUCCESS, it is one of the following error conditions:</p>
<dl>
<dt>
WFS_ERR_CONNECTION_LOST</dt>
<dd>
The connection to the service is lost.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_HSERVICE</dt>
<dd>
The <i>hService</i> parameter is not a valid service handle.<br>
</dd>
<dt>
WFS_ERR_INVALID_REQ_ID</dt>
<dd>
The <i>RequestID</i> parameter does not correspond to an outstanding request on the service.<br>
</dd>
<dt>
WFS_ERR_NOT_STARTED</dt>
<dd>
The application has not previously performed a successful <b>WFSStartUp</b>.<br>
</dd>
<dt>
WFS_ERR_OP_IN_PROGRESS</dt>
<dd>
A blocking operation is in progress on the thread; only <b>WFSCancelBlockingCall</b> and <b>WFSIsBlocking</b> are permitted at this time.</dd>
</dl>
<p>
<b>See also WFSAsyncExecute</b></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.9 WFPSetTraceLevel</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
5.9 WFPSetTraceLevel</h5>
<p>
<b>HRESULT WFPSetTraceLevel</b>(<i> hService, dwTraceLevel </i>)</p>
<p>
Sets the specified trace level(s) at run time, in and/or below the service provider.  See <b>WFMSetTraceLevel</b>.</p>
<p>
<b>Parameters</b> <b>HSERVICE</b>   <i>hService</i></p>
<p>
Handle to the service provider.</p>
<p>
 <b>DWORD   </b><i>dwTraceLevel</i></p>
<p>
The level(s) of tracing being requested.  See below.</p>
<p>
<b>Mode</b> Immediate</p>
<p>
<b>Comments </b>Issuing <b>WFPSetTraceLevel</b> for a service enables tracing on that service at various levels.  The predefined trace levels that can be used in this function, with their meanings to the service provider, are as follows (see <b>WFMSetTraceLevel</b> for the API and support function trace levels):</p>
<pre><FONT FACE="COURIER NEW" SIZE=2> WFS_TRACE_SPI 0x00000004</FONT></pre>
<p>
 Trace all the SPI calls to the service provider, and notification and event messages generated by the service provider, that are associated with the specified <i>hService</i>.</p>
<pre><FONT FACE="COURIER NEW" SIZE=2> WFS_TRACE_ALL_SPI 0x00000008</FONT></pre>
<p>
 Trace <b><i>all</i></b> SPI, notification and event activity of the service provider (the <i>hService</i> parameter is not relevant to this trace level).</p>
<p>
 Other standard trace levels may be defined in the future, and a range of trace level values (the high order 16 bits of this parameter) is reserved for use by individual service providers.  Example of other functions that may be traced include network messages, interactions between the service provider and service, and device interface interaction.</p>
<p>
 Trace level values can be ORed together in a single <i>dwTraceLevel</i> parameter to request more than one kind of tracing be started.  A NULL value stops all tracing in the service provider.  </p>
<p>
 If more than one process may be using the trace facility, this function should always be preceded with the <b>WFMGetTraceLevel</b> function.  This value returned by this function is ORed together with the new trace level(s), and the resulting value is used with <b>WFMSetTraceLevel</b>, thus adding the new trace level(s) to whatever the existing trace level(s) had been,</p>
<p>
 This function has the highest priority to the service provider; it activates the trace as soon as possible.</p>
<p>
 <b>WFPOpen</b> also includes an option to set these trace levels, to allow the open process itself to be traced.</p>
<p>
<b>Error Codes</b> If the function return is not WFS_SUCCESS, it is one of the following error conditions:</p>
<dl>
<dt>
WFS_ERR_CONNECTION_LOST</dt>
<dd>
The connection to the service is lost.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_HSERVICE</dt>
<dd>
The <i>hService</i> parameter is not a valid service handle.<br>
</dd>
<dt>
WFS_ERR_INVALID_TRACELEVEL</dt>
<dd>
The <i>dwTraceLevel</i> parameter does not correspond to a valid trace level or set of levels.<br>
</dd>
<dt>
WFS_ERR_NOT_STARTED</dt>
<dd>
The application has not previously performed a successful <b>WFSStartUp</b>.<br>
</dd>
<dt>
WFS_ERR_OP_IN_PROGRESS</dt>
<dd>
A blocking operation is in progress on the thread; only <b>WFSCancelBlockingCall</b> and <b>WFSIsBlocking</b> are permitted at this time.</dd>
</dl>
<p>
<b>See Also WFMGetTraceLevel, WFSOpen, WFSAsyncOpen</b></p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.8 Exclusive Service and Device Access</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
3.8 Exclusive Service and Device Access</h5>
<p>
This section describes how application access to services and devices is handled by WOSA/XFS subsystems, using the lock facility.  It discusses the meaning of timers within the context of a lock request and issues that arise when multiple applications have issued lock requests.  It also describes how requests that were submitted to the service provider prior to a lock request are managed.  Furthermore, it describes how compound devices (physical devices that include two or more logical devices, such as a passbook printer that also includes a magnetic stripe reader) are handled.</p>
<p>
Typically, an application requires <b><i>exclusive</i></b> access to a particular service when it is about to utilize it, particularly in combination with other services.  For example, an application may need to use a PIN pad, magnetic stripe reader, receipt printer and journal printer to complete a transaction.  The application must be guaranteed that it has access to <b><i>all</i></b> the devices before starting on the transaction, and that no other application will be able to use them until the transaction is complete and it has explicitly released them.  This is accomplished by using the <b>WFSLock</b> (or <b>WFSAsyncLock</b>) function and the complementary <b>WFSUnlock </b>function. </p>
<p>
An application should act in a cooperative manner when locking a service, by keeping it locked for the minimum time period that it requires exclusive access to the service.  Typically, this means locking a set of services, performing a series of requests to the services to complete a transaction, and immediately unlocking the services.  </p>
<p>
Applications must use appropriate techniques to avoid deadlock when locking multiple services, typically by making use of the timeout parameter in the lock functions.</p>
<p>
Also, note that there are cases in which exclusive access is not a requirement, so that it is not always required that an application lock a service before issuing execute operations to it.</p>
<p>
The lock policy describes the rules that services use in managing lock requests.  In the description of this policy, XFS requests are categorized into three types:</p>
<ul>
<li>
<b><u>Non-deferred</u></b>:  Requests that can be processed completely by a service as soon as they arrive (e.g., <b>WFPOpen</b>, <b>WFPRegister</b> and most <b>WFPGetInfo</b> calls.<p>
</li>
<li>
<b><u>Deferred</u></b>:  Requests which may not be able to be processed completely as soon as they arrive, typically because they require hardware and/or operator interaction (e.g., <b>WFPExecute</b> and some <b>WFPGetInfo</b> calls).<p>
</li>
<li>
<b><u>Lock</u></b>:  <b>WFPLock</b> calls.</li>
</ul>
<p>
The lock policy is described first for independent devices, i.e., logical services that correspond to devices whose operation is not interdependent with any other (even though they may be housed in the same physical enclosure).  The following section describes the special requirements involved in managing compound interdependent devices.</p>
</BODY>
</HTML>

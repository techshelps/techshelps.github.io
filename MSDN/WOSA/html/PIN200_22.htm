<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.12 WFS_CMD_PIN_INITIALIZATION</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.12 WFS_CMD_PIN_INITIALIZATION</h5>
<p>
<b>Description</b> The encryption module must be initialized before any encryption function can be used. Every initialization destroys all keys that have been loaded or imported. Usually this command is called by an operator task and not by the application program.</p>
<p>
 Initialization also involves loading “initial” application keys and local vendor dependent keys. These can be supplied, for example, by an operator through a keyboard, a local configuration file or possibly by means of some secure hardware that can be attached to the device. The application “initial” keys would normally get updated by the application during a WFS_EXEC_PIN_IMPORT command as soon as possible. Local vendor dependent static keys (e.g. storage, firmware and offset keys) would normally be transparent to the application and by definition can not be dynamically changed.</p>
<p>
 Where initial keys are not available immediately  when this command is issued (i.e. when operator intervention is required), the Service Provider returns WFS_ERR_PIN_ACCESS_DENIED and the application must await the WFS_SRVE_PIN_INITIALIZED event.</p>
<p>
 During initialization an optional encrypted ID key can be stored in the HW module. The ID key and the corresponding encryption key can be passed as parameters; if not, they are generated automatically by the encryption module. The encrypted ID is returned to the application and serves as authorization for the key import function. The WFS_INF_PIN_CAPABILITIES command indicates whether or not the device will support this feature.</p>
<p>
<b>Input Param </b><code>LPWFSPININIT lpInit;</code></p>
<pre><FONT FACE="COURIER NEW" SIZE=2>typedef struct _wfs_pin_init<BR> {<BR> LPWFSXDATA  lpxIdent;<BR> LPWFSXDATA  lpxKey;<BR> } WFSPININIT, * LPWFSPININIT;</FONT></pre>
<p>
 <i>lpxIdent</i><BR>Pointer to the value of the ID key. Null if not required.</p>
<p>
 <i>lpxKey</i><BR>Pointer to the value of the encryption key. Null if not required.</p>
<p>
<b>Output Param</b> <code>LPWFSXDATA lpxIdentification;</code></p>
<p>
 <i>lpxIdentification</i><BR>Pointer to the value of the ID key encrypted by the encryption key. Can be used as authorization for the WFS_CMD_PIN_IMPORT_KEY command, can be NULL if no authorization required.</p>
<p>
<b>Error Codes</b> The following additional error codes can be generated by this command:</p>
<p>
Value Meaning</p>
<p>
WFS_ERR_PIN_ACCESSDENIED The encryption module is either not initialized (or not ready for some vendor specific reason).</p>
<p>
WFS_ERR_PIN_INVALIDID The ID passed was not valid.</p>
<p>
<b>Events </b>The following additional events can be generated by this command:</p>
<p>
Value Meaning</p>
<p>
WFS_SRVE_PIN_ILLEGAL_KEY_ACCESS An error occured accessing an encryption key.</p>
<p>
WFS_SRVE_PIN_INITIALIZED The encryption module is now initialized.</p>
<p>
<b>Comments</b> None.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.23 WFSStartUp</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.23 WFSStartUp</h5>
<p>
<b>HRESULT WFSStartUp</b>( <i>dwVersionsRequired, lpWFSVersion</i> )</p>
<p>
Establishes a connection between an application and the XFS Manager. </p>
<p>
<b>Parameters</b> <b>DWORD   </b><i>dwVersionsRequired</i> </p>
<p>
Specifies the range of versions of the XFS Manager that the application can support.  The low-order word indicates the highest version of the XFS Manager the application can support; the high-order word indicates the lowest version of the XFS Manager the application can support.  In each word, the low-order byte specifies the major version number and the high-order byte specifies the minor version number (i.e., the numbers before and after the decimal).  <BR><b>Note</b>:  in order to allow intermediate minor revisions (e.g., between 1.10 and 1.20), the minor version number should always be expressed as two decimal digits, i.e., 1.10, 1.11, 1.20, etc.</p>
<p>
 <b>LPWFSVERSION</b>   <i>lpWFSVersion</i></p>
<p>
Pointer to the data structure that is to receive version support information and other details about the current WOSA/XFS implementation (returned parameter).</p>
<p>
<b>Mode</b> Immediate</p>
<p>
<b>Comments</b> This function is used by an application to register itself with the XFS Manager and specify the version(s) of the WOSA/XFS API specification it can use, and returns information on the specific WOSA/XFS implementation.  It <b><i>must</i></b> be the first WOSA/XFS API function called by an application.  An application may only issue further WOSA/XFS functions after a successful <b>WFSStartUp</b> has completed.</p>
<p>
 In order to support future WOSA/XFS implementations with maximum flexibility, a version negotiation process takes place in <b>WFSStartUp</b>.  An application specifies in the <i>dwVersionsRequired</i> parameter the range of versions of the WOSA/XFS API specification which it can support.  If the range of versions specified by the application overlaps the range of versions that the current implementation of XFS Manager can support, the call succeeds.  Otherwise the call fails.</p>
<p>
 Information describing the actual WOSA/XFS implementation is returned by the XFS Manager in the WFSVERSION data structure (defined in Section 8.2).  In particular, it returns the version it expects the application to use (the highest common version), as well as the lowest and highest versions it is capable of.  If the call fails, WFSVERSION is still returned, to help with analysis of the failure.</p>
<p>
 The version numbers refer to the API specification, specifically functions, parameters, data structures, error codes, and messages.  If there are any changes to these, the version number should be changed.</p>
<p>
 This version negotiation allows a WOSA/XFS application and the XFS Manager to operate successfully if there is any overlap in their versions.  The following chart gives examples of how <b>WFSStartUp</b> works in conjunction with different application and XFS Manager versions:</p>
<table>
<tr valign=top>
<td>
Application versions</td>
<td>
XFS Manager versions</td>
<td>
Return status from <b>WFSStartUp</b></td>
<td>
Result<b> </b></td>
</tr>
<tr valign=top>
<td>
1.00</td>
<td>
1.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.00</td>
</tr>
<tr valign=top>
<td>
1.00  -  2.10</td>
<td>
1.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.00 </td>
</tr>
<tr valign=top>
<td>
1.11</td>
<td>
1.00  -  2.00</td>
<td>
WFS_SUCCESS</td>
<td>
use 1.11</td>
</tr>
<tr valign=top>
<td>
2.11  -  3.00</td>
<td>
1.00  -  2.20</td>
<td>
WFS_SUCCESS</td>
<td>
use 2.20 </td>
</tr>
<tr valign=top>
<td>
1.00</td>
<td>
2.20  -  3.00</td>
<td>
WFS_ERR_API_VERS_TOO_LOW</td>
<td>
fails </td>
</tr>
<tr valign=top>
<td>
1.11  -  3.00</td>
<td>
1.00</td>
<td>
WFS_ERR_API_VERS_TOO_HIGH</td>
<td>
fails </td>
</tr>
</table>
<p>
 Note that a version negotiation error also generates a system event (see Section 9.7).</p>
<p>
 After making its last WOSA/XFS call, an application <b><i>must</i></b> call <b>WFSCleanUp</b> to allow the XFS Manager to release any resources allocated for the application.</p>
<p>
<b>Error Codes</b> The return value indicates whether the application was registered successfully (i.e., the XFS Manager can support requests from the application).  If the function was successful,  the returned value is WFS_SUCCESS; if not, it is one of the following error conditions:</p>
<dl>
<dt>
WFS_ERR_ALREADY_STARTED</dt>
<dd>
A <b>WFSStartUp</b> has already been issued by the application, without an intervening <b>WFSCleanUp</b>.<br>
</dd>
<dt>
WFS_ERR_API_VER_TOO_HIGH</dt>
<dd>
The range of versions of WOSA/XFS API support requested by the application is higher than any supported by this particular WOSA/XFS implementation.<br>
</dd>
<dt>
WFS_ERR_API_VER_TOO_LOW</dt>
<dd>
The range of versions of WOSA/XFS API support requested by the application is lower than any supported by this particular WOSA/XFS implementation.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_POINTER</dt>
<dd>
A pointer parameter does not point to accessible memory.</dd>
</dl>
<p>
<b>See also WFSCleanUp</b></p>
</BODY>
</HTML>

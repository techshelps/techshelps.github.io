<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.7 WFSDeregister</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.7 WFSDeregister</h5>
<p>
<b>HRESULT WFSDeregister</b>(<i><b> </b>hService, dwEventClass, hWndReg</i> )</p>
<p>
Discontinues monitoring of the specified message class(es) (or <b><i>all</i></b> classes) from the specified <i>hService</i>, by the specified <i>hWndReg</i> (or <b><i>all</i></b> the calling application's <i>hWnd</i>'s).  The synchronous version of <b>WFSAsyncDeregister</b>.</p>
<p>
<b>Parameters</b> <b>HSERVICE   </b><i>hService</i></p>
<p>
Service handle returned by <b>WFSOpen</b> or <b>WFSAsyncOpen</b>.  If this value is NULL, and <i>dwEventClass</i> is SYSTEM_EVENTS, the XFS manager deregisters the application for those system events generated by the Manager itself.</p>
<p>
<i> </i><b>DWORD   </b><i>dwEventClass</i> </p>
<p>
The class(es) of messages from which the application is deregistering.  Specified as a bit mask that can be a logical OR of the values for multiple classes.  A NULL value requests that <b><i>all</i></b> message classes be deregistered from the specified window for this <i>hService</i>.</p>
<p>
<i> </i><b>HWND   </b><i>hWndReg</i></p>
<p>
The window which has been previously registered to receive notification messages, and is now to be deregistered.  A NULL value requests that <b><i>all</i></b> the application's windows be deregistered from the specified message class(es) for this <i>hService</i>.</p>
<p>
<b>Mode</b> Synchronous</p>
<p>
<b>Comments </b>The functions of a <b>WFSDeregister</b> request are performed automatically if a <b>WFSClose</b> is issued without a previous <b>WFSDeregister</b>.</p>
<p>
 See section 3.11 for a description of the classes of events that may be monitored.</p>
<p>
<b>Error Codes</b> If the function return is not WFS_SUCCESS, it is one of the following error conditions:</p>
<dl>
<dt>
WFS_ERR_CANCELED</dt>
<dd>
The request was canceled by <b>WFSCancelBlockingCall</b>.<br>
</dd>
<dt>
WFS_ERR_CONNECTION_LOST</dt>
<dd>
The connection to the service is lost.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_EVENT_CLASS</dt>
<dd>
The <i>dwEventClass</i> parameter specifies one or more event classes not supported by the service.<br>
</dd>
<dt>
WFS_ERR_INVALID_HSERVICE</dt>
<dd>
The <i>hService</i> parameter is not a valid service handle.<br>
</dd>
<dt>
WFS_ERR_INVALID_HWNDREG</dt>
<dd>
The <i>hWndReg</i> parameter is not a valid window handle.<br>
</dd>
<dt>
WFS_ERR_NOT_REGISTERED</dt>
<dd>
The specified <i>hWndReg</i> window was not registered to receive messages for any event classes.<br>
</dd>
<dt>
WFS_ERR_NOT_STARTED</dt>
<dd>
The application has not previously performed a successful <b>WFSStartUp</b>.<br>
</dd>
<dt>
WFS_ERR_OP_IN_PROGRESS</dt>
<dd>
A blocking operation is in progress on the thread; only <b>WFSCancelBlockingCall</b> and <b>WFSIsBlocking</b> are permitted at this time.</dd>
</dl>
<p>
<b>See also WFSRegister, WFSClose</b></p>
</BODY>
</HTML>

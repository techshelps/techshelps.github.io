<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.7 Configuration Information</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
3.7 Configuration Information</h5>
<p>
The XFS Manager uses its <u>configuration information</u><i> </i>to define the relationships among the applications and the service providers.  In particular, this information defines the mapping between the logical service interface  presented at the API (via logical service name) and the appropriate service provider entry points.   </p>
<p>
The configuration information also includes specific information about logical services and service providers, some of which is common to all solution providers; it may also include information about physical services, if any are present on the system, and vendor-specific information.  The location of the information is transparent to both applications and service providers; they always store and retrieve it using the configuration functions provided by the XFS Manager, as described in Section 7, for portability across Windows platforms. </p>
<p>
It is the responsibility of solution providers, and the developers of each service provider, to implement the appropriate setup and management utilities, to create and manage the configuration information about the XFS subsystem configuration and its service providers, using the configuration functions.  </p>
<p>
These functions are used by service providers and applications to write and retrieve the configuration information for a WOSA/XFS subsystem, which is stored in a hierarchical structure called the <u>XFS configuration registry</u>.  The structure and the functions are based on the Win32 Registry architecture and API functions, and are implemented in Windows NT and future versions of Windows using the Registry and the associated functions.  For Win32s-based implementations on Windows 3.1 and Windows for Workgroups, a subset of the functionality described here will be available; the SDK will define this subset.</p>
<p>
Each node in the configuration registry is called a <u>key</u>, each having a name and (optionally) <u>values</u>.  All values consist of a <u>name</u> and <u>data</u> pair, both null-terminated character strings.  The structure is as follows:</p>
<p>
(1) The top level is the root node for the WOSA/XFS subsystem.  Its key name is WOSA/XFS_ROOT (it is a subkey of HKEY_CLASSES_ROOT in the Win32 Registry).</p>
<p>
(2) The second level contains at least three keys: XFS_MANAGER, LOGICAL_SERVICES, and SERVICE_PROVIDERS.  Other keys (e.g., PHYSICAL_SERVICES) may be defined and used as required.</p>
<p>
(3) Below the XFS_MANAGER key there are values and/or keys for information that the XFS Manager creates and uses.</p>
<p>
(4) Below the LOGICAL_SERVICES key there is a key for each logical service defined for the system on which the registry resides; the key names are the logical service names (the <i>lpszLogicalName</i> parameter of the <b>WFSOpen</b>, <b>WFSAsyncOpen </b>and<b> WFPOpen</b> functions).  Since there is only one registry per workstation, this enforces the requirement that logical service names are unique within at least the workstation.</p>
<p>
(5) Below the SERVICE_PROVIDERS key there is a key for each service provider defined for the system.</p>
<p>
The configuration functions provide the capabilities to create, enumerate, open and delete keys, and to set, query and delete values within each key.  Vendor-provided configuration utility programs set up the registry structure and its contents, using these functions.  The third level contains the values and keys that define how the XFS subsystem, services and providers are configured.  These are used by the XFS Manager, applications and service providers.  Note that vendor-specific information may be added to any key in this structure, using optional values.</p>
<p>
The figure below illustrates the structure of the configuration registry:</p>
<p>
The XFS Manager key has the following optional values:</p>
<ul>
<li>
<u>TraceFile</u> the name of the file containing trace data. If this value is not set in the  configuration, trace data is written to the default file path\name  C:\XFSTRACE.LOG.<p>
</li>
<li>
<u>ShareFilename</u> the name of the memory mapped file used by the memory management functions  of the XFS Manager.<p>
</li>
<li>
<u>ShareFilesize</u> the size of the memory mapped file used by the memory management functions  of the XFS Manager.</li>
</ul>
<ol>
</ol>
<p>
Some additional values could be also defined in the WOSA/XFS SDK release notes. Please refer to the related document for more information.</p>
<p>
Every logical service key has three <u>mandatory values</u>:</p>
<ul>
<li>
<u>class</u> the service class of the logical service; (see the Service Class Definition Document for the standard values)<p>
</li>
<li>
<u>type</u> the service type of the logical service; the standard values for service type <BR> are defined in the WOSA/XFS software development kit SDK<p>
</li>
<li>
<u>provider</u> the name of the service provider that provides the logical service <BR>  (the key name of the corresponding service provider key)</li>
</ul>
<p>
A service provider key also has three mandatory values:</p>
<ul>
<li>
<u>dllname</u> the name of the file containing the service provider DLL<p>
</li>
<li>
<u>vendor_name</u> the name of the supplier of this service provider<p>
</li>
<li>
<u>version</u> the version number of this service provider</li>
</ul>
<p>
An example of the content of the configuration information for an actual system is shown below.  See Section 7 for the definitions of the configuration functions.</p>
<h5><u>WOSA/XFS Registry Root</u></h5>
<p>
<b> <u>Second Level Keys</u></b></p>
<p>
<b>  <u>Third Level Keys (or values)</u></b></p>
<p>
   <u>Values</u></p>
<p>
<b>WOSA/XFS_ROOT</b></p>
<p>
<b> XFS_MANAGER</b></p>
<p>
<b>   </b>TraceFile=&lt;path-name&gt;\&lt;trace-file-   name&gt;</p>
<p>
   ShareFilename=&lt;path-name&gt;\     &lt;share-file-name&gt;</p>
<p>
   ShareFilesize=&lt;file size in bytes&gt;</p>
<p>
<b> LOGICAL_SERVICES</b></p>
<p>
<b>  </b>Passbook1</p>
<p>
<b>  </b> class=PTR</p>
<p>
<b>  </b> type=PASSBOOK</p>
<p>
<b>  </b> provider=Passbook_Receipt</p>
<p>
   operator_station=1</p>
<p>
   input_paper_source=upper</p>
<p>
<b>  </b> &lt; other optional values &gt;</p>
<p>
<b>  </b>Receipt1</p>
<p>
<b>  </b> class=PTR</p>
<p>
<b>  </b> type=RECEIPT</p>
<p>
<b>  </b> provider=Passbook_Receipt</p>
<p>
<b>  </b> &lt; optional values &gt;</p>
<p>
<b>  </b>Journal1</p>
<p>
<b>  </b> class=PTR</p>
<p>
<b>  </b> type=JOURNAL</p>
<p>
<b>  </b> provider=Journal</p>
<p>
<b>  </b> &lt; optional values &gt;</p>
<p>
<b>  </b>ATSafe1</p>
<p>
<b>  </b> class=CDM</p>
<p>
<b>  </b> type=ATSAFE</p>
<p>
<b>  </b> provider=Cash_Dispenser</p>
<p>
<b>  </b> &lt; optional values &gt;</p>
<p>
<b>  </b>&lt; other srvcs &gt;</p>
<p>
<b> SERVICE_PROVIDERS</b></p>
<p>
<b>  </b>Cash_Dispenser</p>
<p>
<b>  </b> dllname=CASHDISP.DLL</p>
<p>
   vendor_name=Big Bank , Inc.</p>
<p>
   version=3.50</p>
<p>
<b>  </b> &lt; optional values &gt;</p>
<p>
<b>  </b>Passbook_Receipt</p>
<p>
<b>  </b> dllname=RPPRNTR.DLL</p>
<p>
   vendor_name=Code “R Us, Ltd.</p>
<p>
   version=1.30</p>
<p>
<b>  </b> &lt; optional values &gt;</p>
<p>
<b>  </b>Journal</p>
<p>
<b>  </b> dllname=JOURNAL.DLL</p>
<p>
   vendor_name=Nobugs Systems </p>
<p>
   version=2.01</p>
<p>
<b>  </b> &lt; optional values &gt;</p>
<p>
<b>  </b>&lt; other prvdrs &gt;</p>
<p>
<b> &lt; other keys &gt;</b></p>
</BODY>
</HTML>

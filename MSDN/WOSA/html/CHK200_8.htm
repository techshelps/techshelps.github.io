<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.1  WFS_CMD_CHK_READ_FORM</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h4>
4.1  WFS_CMD_CHK_READ_FORM</h4>
<p>
<b>Description</b></p>
<p>
This function returns the data from the current check.  The contents of all the fields within the form are returned to the application.  For small hand-held check readers, this command might be the only one used.</p>
<dl>
<dt>
<b>Input Param</b></dt>
<dd>
<pre><FONT FACE="COURIER NEW" SIZE=2>LPWFSCHKINREADFORM
typedef struct _wfs_chk_in_read_form
     {
     LPSTR     lpszFormName;
     LPSTR     lpszFieldNames;
     DWORD     dwOptions;
     LPSTR     lpszExtra;
     }  WFSCHKINREADFORM, * LPWFSCHKINREADFORM;</FONT></pre>
</dd>
</dl>
<p>
<b><i>lpszFormName</i></b></p>
<p>
Points to the null-terminated name of the form.</p>
<p>
<b><i>lpszFieldNames</i></b></p>
<p>
Points to a list of NULL-terminated field names from which to read input data, with the final name terminating with two NULLs.</p>
<p>
<b><i>dwOptions</i></b></p>
<p>
WFS_CHK_OPTAUTOFEED</p>
<p>
<b><i>lpszExtra</i></b></p>
<p>
Points to a list of vendor-specific, or any other extended information.  The information is returned as a series of  “<i>key=value</i>” strings so that it is easily extensible by service providers.  Each string is null-terminated, with the final string terminating with two null characters.</p>
<dl>
<dt>
<b>Output Param</b></dt>
<dd>
<pre><FONT FACE="COURIER NEW" SIZE=2>LPWFSCHKOUTREADFORM
typedef struct _wfs_chk_out_read_form
     {
     WORD      hDoc;
     LPSTR     lpszFields;
     }  WFSCHKOUTREADFORM, * LPWFSCHKOUTREADFORM;</FONT></pre>
</dd>
</dl>
<p>
<b><i>hDoc</i></b></p>
<p>
Handle to this check.</p>
<p>
<b><i>lpszFields</i></b></p>
<p>
Points to a list of field data returned.  See Comments.</p>
<p>
<b>Error Code</b></p>
<p>
The following additional error codes can be generated by this command:</p>
<table>
<tr valign=top>
<td>
<b>Value</b></td>
<td>
<b>Meaning</b></td>
</tr>
<tr valign=top>
<td>
WFS_ERR_CHK_REQDFIELDMISSING</td>
<td>
The check was blank.</td>
</tr>
<tr valign=top>
<td>
WFS_ERR_CHK_FORMNOTFOUND</td>
<td>
Invalid form name.</td>
</tr>
<tr valign=top>
<td>
WFS_ERR_CHK_FIELDSPECFAILURE</td>
<td>
The syntax of the <i>lpszFields</i> member is invalid.</td>
</tr>
<tr valign=top>
<td>
WFS_ERR_CHK_INCOMPLETEREAD</td>
<td>
Read errors occurred and an incomplete code line is available.  Question marks are returned in place of any numbers which could not be read.  A code line will always be returned when this error occurs, and the application may choose different behavior depending on the number of question marks returned, e.g., prompt the operator to enter missing numbers.</td>
</tr>
</table>
<p>
<b>Execute Events</b></p>
<table>
<tr valign=top>
<td>
WFS_EXEE_CHK_NOMEDIA</td>
<td>
No check has been inserted in the (manual mode) check reader; to be used by the application to generate a message to the operator to insert a check.</td>
</tr>
<tr valign=top>
<td>
WFS_EXEE_CHK_MEDIAINSERTED</td>
<td>
A check was inserted; this is only issued following the above event.</td>
</tr>
</table>
<p>
<b>Comments.</b></p>
<dl>
<dt>
At the end of a successful WFS_CMD_CHK_READ_FORM, the string pointed to by <i>lpsFields</i> will contain a sequence such as (given a U.S. personal check):</dt>
<dd>
<pre><FONT FACE="COURIER NEW" SIZE=2>ROUTETRANS=021203501<b>\0</b>ACCOUNT=370361<b>\0</b>TRANCODE=2199<b>\0</b>AMOUNT=0000001000<b>\0\0</b></FONT></pre>
</dd>
</dl>
<p>
Each <i>fieldname</i>=<i>value</i> pair is terminated by a NULL; the end of the buffer is marked with an additional NULL.  Any embedded space characters (0x20) are significant; trailing spaces are not.</p>
<p>
The timeout parameter (<i>dwTimeOut</i>) in the <b>WFSExecute</b> request that passes this command should always be large enough to accomodate prompting the operator to insert a check, having the operator do so, and processing the check.  If the timeout expires before these operations are completed, the <b>WFSExecute</b> will be canceled, possibly leaving an application-generated prompt on the operator's screen.</p>
</BODY>
</HTML>

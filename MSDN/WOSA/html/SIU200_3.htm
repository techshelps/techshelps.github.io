<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.1 WOSA/XFS Service-Specific Programming</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
1.1 WOSA/XFS Service-Specific Programming</h5>
<p>
The service classes are defined by their service-specific commands and the associated data structures, error codes, messages, etc.  These commands are used to request functions that are specific to one or more classes of service providers, but not all of them, and therefore are not included in the common API for basic or administration functions. </p>
<p>
When a service-specific command is common among two or more classes of service providers, the syntax of the command is as similar as possible across all services, since a major objective of the WOSA Extensions for Financial Services is to standardize command codes and structures for the broadest variety of services.  For example, using the <b>WFSExecute </b>function, the commands to read data from various services are as similar as possible to each other in their syntax and data structures.</p>
<p>
In general, the specific command set for a service class is defined as the union of the specific capabilities likely to be provided by the developers of the services of that class; thus any particular device will normally support only a subset of the defined command set.</p>
<p>
There are three cases in which a service provider may receive a service-specific command that it does not support:</p>
<ul>
<li>
The requested capability is defined for the class of service providers by the WOSA/XFS specification, the particular vendor implementation of that service does not support it, and the unsupported capability is <b><i>not </i></b>considered to be fundamental to the service.  In this case, the service provider returns a successful completion, but does no operation.  An example would be a request from an application to turn on a control indicator on a passbook printer; the service provider recognizes the command, but since the passbook printer it is managing does not include that indicator, the service provider does no operation and returns a successful completion to the application.<p>
</li>
<li>
The requested capability is defined for the class of service providers by the WOSA/XFS specification, the particular vendor implementation of that service does not support it, and the unsupported capability <b><i>is</i></b> considered to be fundamental to the service.  In this case, a WFS_UNSUPP_COMMAND error is returned to the calling application.  An example would be a request from an application to a cash dispenser to dispense coins; the service provider recognizes the command but, since the cash dispenser it is managing dispenses only notes, returns this error.<p>
</li>
<li>
The requested capability is <b><i>not</i></b> defined for the class of service providers by the WOSA/XFS specification.  In this case, a WFS_ERR_INVALID_COMMAND error is returned to the calling application.</li>
</ul>
<p>
This design allows implementation of applications that can be used with a range of services that provide differing subsets of the functionalities that are defined for their service class.  Applications may use the <b>WFSGetInfo</b> and <b>WFSAsyncGetInfo</b> commands to inquire about the capabilities of the service they are about to use, and modify their behavior accordingly, or they may use functions and then deal with WFS_ERR_UNSUPP_COMMAND error returns to make decisions as to how to use the service.</p>
</BODY>
</HTML>

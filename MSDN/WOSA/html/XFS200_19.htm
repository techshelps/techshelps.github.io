<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.5 Opening a session</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
3.5 Opening a session </h5>
<p>
Once a connection between an application and the XFS Manager has successfully been negotiated (via <b>WFSStartUp</b>), the application establishes a virtual session with a service provider by issuing a <b>WFSOpen</b> (or <b>WFSAsyncOpen) </b>request.  Opens are directed towards “logical services” as defined in the WOSA/XFS configuration.  A service handle (<i>hService</i>) is assigned to the session, and is used in all the calls to the service in the lifetime of the session.</p>
<p>
Note that applications may optionally choose to explicitly manage the concept of  “application identity” when they need to use interdependent compound devices (see Section 3.8.2).  This is achieved by using the <b>WFSCreateAppHandle</b> function to get an application handle (<i>hApp</i>), which is unique within the system.  This function can be called multiple times to obtain multiple unique handles.  An application handle parameter is then used in the <b>WFSOpen</b> function, directing the service provider to bind the specified application handle to the session being initiated.  This allows a single application process (potentially multi-threaded) to act as multiple applications to the WOSA/XFS subsystem, to allow effective use of interdependent compound devices.  An example of a case in which this could be useful is an application using the Multiple Document Interface (MDI); the application could associate an application handle with each MDI child window.  See Section 3.8.2 for additional discussion of the use of application handles with compound devices.  Note that neither service nor application handles may be shared among two or more applications.</p>
<h5>The actions performed by the XFS Manager on an open are as follows:</h5>
<ul>
<li>
Retrieves the configuration information defining the specified logical service, in order to determine the DLL name of the service provider.  The logical service name is the key to the configuration information. <p>
</li>
<li>
Loads the DLL containing the requested service provider, if it is not already loaded.<p>
</li>
<li>
Performs pre-processing and translation as necessary, depending on whether the synchronous or asynchronous open API has been issued.<p>
</li>
<li>
Generates a unique service handle (<i>hService</i>) that identifies the session with the service provider that is being established, to be passed back to the application as a parameter.<p>
</li>
<li>
Calls the service provider's <b>WFPOpen</b> function, passing the parameters needed.</li>
</ul>
<p>
The service provider does the following:</p>
<ul>
<li>
Performs version negotiation, using the parameters specifying the SPI version requested by the XFS Manager, and the service-specific interface version requested by the application.</li>
</ul>
<ul>
<li>
Retrieves the configuration information.<p>
</li>
<li>
Asynchronously establishes a session with the service specified in the configuration on the specified workstation, if necessary, relying on the transport facilities provided.<p>
</li>
<li>
Upon completion of the request, posts a completion message (WFS_OPEN_COMPLETE), which goes to the application for a <b>WFSAsyncOpen</b> call, and to the XFS Manager for a <b>WFSOpen</b> call.</li>
</ul>
<p>
 </p>
<p>
Note that even if the service is locked by another application, the open function succeeds, as defined in Section 3.8, “Exclusive Service and Device Access.”</p>
<p>
An application programmer has at least two obvious choices as to when to perform the <b>WFSOpen</b> (and the complementary <b>WFSClose</b>) of the services it utilizes:</p>
<ul>
<li>
Open the services during application initialization, keep them open, and close them during application shutdown.<p>
</li>
<li>
Perform the open each time the service is required, utilize it, and immediately close it.</li>
</ul>
<p>
Each technique has its own advantages.  For example, while the first example might provide better performance, the second might be easier to program.  In any case, upon a successful completion of an open, the WOSA/XFS subsystem returns a service handle which must be used for all subsequent communication with the service.  </p>
<p>
Note that an application must perform an open for <b><i>each</i></b> logical service that it wishes to utilize, even if the services are of the same type.  For example, if an application wishes to utilize two separate receipt printers, it must open two separate logical services.</p>
<p>
Furthermore, an application may need to open multiple logical services, even when a set of devices are housed in a single device.  For example, consider a compound printer which includes both a receipt and a journal printer.  If the application requires access to both the receipt and journal printer functions, it must open both a receipt logical service and a journal logical service.</p>
</BODY>
</HTML>

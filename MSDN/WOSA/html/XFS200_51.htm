<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.20 WFSRegister</TITLE>
<BODY bgcolor=white>

<FONT FACE="verdana"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY>
<h5>
4.20 WFSRegister</h5>
<p>
<b>HRESULT WFSRegister</b>( <i>hService, dwEventClass, hWndReg</i> )</p>
<p>
Enables event monitoring for the specified service by the specified window; all messages of the specified class(es) are sent to the window specified in the <i>hWndReg</i> parameter.  The synchronous version of <b>WFSAsyncRegister</b>.</p>
<p>
<b>Parameters</b> <b>HSERVICE</b>   <i>hService</i></p>
<p>
Handle to the service provider as returned by <b>WFSOpen</b> or <b>WFSAsyncOpen</b>.  If this value is NULL, and <i>dwEventClass</i> is SYSTEM_EVENTS, the XFS manager registers the application for those system events generated by the Manager itself.</p>
<p>
<i> </i><b>DWORD   </b><i>dwEventClass</i></p>
<p>
The class(es) of events for which the application is registering.  Specified as a set of bit masks that are logically ORed together into this parameter. </p>
<p>
 <b>HWND   </b><i>hWndReg</i></p>
<p>
The window handle which is to be registered to receive the specified messages.</p>
<p>
<b>Mode</b> Synchronous</p>
<p>
<b>Comments </b>Issuing a <b>WFSRegister</b> for a service enables event monitoring on that service. <b>WFSRegister</b> calls can be cumulative for the same window.  For example, to receive notification for both system and user events, the application can call <b>WFSRegister</b> with both SYSTEM_EVENTS and USER_EVENTS, as follows:</p>
<p>
 <code>hr = <b>WFSRegister</b>(hPassbook1, SYSTEM_EVENTS |  USER_EVENTS, hWndReg1);</code></p>
<p>
 or call them in two phases:</p>
<pre><FONT FACE="COURIER NEW" SIZE=2> hr = <b>WFSRegister</b>( hPassbook1, SYSTEM_EVENTS, hWndReg1);
 . . . . . . . . 
 . . . . . . . . </FONT></pre>
<p>
<code> hr = <b>WFSRegister</b>( hPassbook1, USER_EVENTS, hWndReg1);</code></p>
<p>
 To cancel notifications use <b>WFSDeregister</b>.</p>
<p>
 Note that the service provider always monitors the service, regardless of whether an application has registered for event monitoring.  Issuing <b>WFSRegister</b> simply causes the service provider to post messages to the application in addition to handling the messages itself.  See the discussion in Section 3.11.</p>
<p>
<b>Error Codes</b> If the function return is not WFS_SUCCESS, it is one of the following error conditions.  </p>
<dl>
<dt>
WFS_ERR_CANCELED</dt>
<dd>
The request was canceled by <b>WFSCancelBlockingCall</b>.<br>
</dd>
<dt>
WFS_ERR_CONNECTION_LOST</dt>
<dd>
The connection to the service is lost.<br>
</dd>
<dt>
WFS_ERR_INTERNAL_ERROR </dt>
<dd>
An internal inconsistency or other unexpected error occurred in the WOSA/XFS subsystem. <br>
</dd>
<dt>
WFS_ERR_INVALID_EVENT_CLASS</dt>
<dd>
The <i>dwEventClass</i> parameter specifies one or more event classes not supported by the service.<br>
</dd>
<dt>
WFS_ERR_INVALID_HSERVICE</dt>
<dd>
The <i>hService</i> parameter is not a valid service handle.<br>
</dd>
<dt>
WFS_ERR_INVALID_HWNDREG</dt>
<dd>
The <i>hWndReg</i> parameter is not a valid window handle.<br>
</dd>
<dt>
WFS_ERR_NOT_STARTED</dt>
<dd>
The application has not previously performed a successful <b>WFSStartUp</b>.<br>
</dd>
<dt>
WFS_ERR_OP_IN_PROGRESS</dt>
<dd>
A blocking operation is in progress on the thread; only <b>WFSCancelBlockingCall</b> and <b>WFSIsBlocking</b> are permitted at this time.</dd>
</dl>
<p>
<b>See also WFSAsyncRegister, WFSDeregister, WFSAsyncDeregister</b></p>
</BODY>
</HTML>

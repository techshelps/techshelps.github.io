<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling a Remote Stored Procedure Event</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_handling_a_remote_stored_procedure_event"></a>Handling a Remote Stored Procedure Event</h2>
<p>
This example shows how the <b>rpc_execute</b> callback function in GATECBS.C sends a remote stored procedure to, and receives results from, a remote database.
<ol>
<li>
Define the <b>rpc_execute</b> function and the following parameters:<pre><code>DBPROCESS *rmtproc;     // DBPROCESS pointer  
int i;                  // Index variable     
short params;
short retparam;
short *paramarray;
DBCHAR complete_rpc_name[4 * (MAXNAME  1)];//Database.owner.name;#
</code></pre>
</li>
<li>
Get the remote DBPROCESS pointer <i>*rmtproc </i>in the SRV_PROC connection structure with <b>srv_getuserdata</b>. This is a pointer that was saved using <b>srv_setuserdata</b> after the client connected to a remote database.<pre><code>rmtproc = ((REMOTE_DBMS *)srv_getuserdata(srvproc))-&gt;dbproc;
paramarray = ((REMOTE_DBMS *)srv_getuserdata(srvproc))-&gt;retparams;
</code></pre>
</li>
<li>
Get the remote stored procedure name and initialize the remote stored procedure to the remote database management system:<pre><code>dbrpcinit(rmtproc, complete_rpc_name,
    (DBUSMALLINT)srv_rpcoptions(srvproc));

// Set up any RSP parameters.  

params = srv_rpcparams(srvproc);
retparam = 1;
for (i = 1; i &lt;= params; i+)
{
    rpc_paramname = srv_paramname(srvproc, i, (int *)NULL);
    if (!strlen(rpc_paramname))
        rpc_paramname = NULL;
    rpc_paramstatus = (BYTE)srv_paramstatus(srvproc, i);
    rpc_paramtype = srv_paramtype(srvproc, i);
    rpc_parammaxlen = srv_parammaxlen(srvproc, i);
    rpc_paramlen = srv_paramlen(srvproc, i);
    rpc_paramdata = srv_paramdata(srvproc, i);
    dbrpcparam(rmtproc,rpc_paramname,rpc_paramstatus,rpc_paramtype,
        rpc_parammaxlen,rpc_paramlen, rpc_paramdata);

// Not all parameters are return parameters. Map each return     
// parameter to its original parameter to later reset the return 
// value of the correct return parameters in "handle_results()". 

if((BYTE)srv_paramstatus(srvproc, i) &amp; SRV_PARAMRETURN) {
      paramarray[retparam] = i;
      retparam+;
}
</code></pre>
</li>
<li>
Send the remote stored procedure to the remote database using the DB-Library <b>dbrpcsend</b> function:<pre><code>dbrpcsend(rmtproc);
dbsqlok(rmtproc);
</code></pre>
</li>
<li>
Get the remote database results and pass them back to the client using the <b>handle_results</b> function:<pre><code>handle_results(rmtproc, srvproc);
return (SRV_CONTINUE);
</code></pre>
</li>
</ol>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

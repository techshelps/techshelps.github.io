<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Management</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_memory_management_ods03_2"></a>Memory Management</h2>
<p>
The 32-bit linear virtual memory address space available to processes with the Win32 API simplifies memory management. This applies to Open Data Services programming as well as to all other programming for the Win32 API.</p>
<p>
When you develop applications using the Win32 API, consider using the C run-time functions <b>malloc</b> and <b>free</b> to perform dynamic memory management. These functions are both safe and elegant with the Win32 API. In addition to the standard memory management functions (<b>Global</b> and <b>Local</b>, C run-time support), the Win32 API also provides heap and virtual memory management functions for applications that require specialized memory management.</p>
<p>
The <b>srv_alloc </b>and <b>srv_free </b>Open Data Services functions are provided for backward compatibility.</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling a Language Event</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_handling_a_language_event"></a>Handling a Language Event</h2>
<p>
This example describes the <b>lang_execute</b> event handler provided in the sample gateway application. This event handler is implemented as a callback function that sends a client's language command to the SQL Server example remote database, receives the results, and returns the results to the client.
<ol>
<li>
Define the <b>lang_execute</b> function and the following parameters:<pre><code>int lang_execute(srvproc)
SRV_PROC *srvproc;
{
REMOTE_DBMS *rmt_dbms;        // Remote database pointer             
DBPROCESS *rmtproc;            // Open Data Services DBPROCESS pointer
DBCHAR *query;                // Pointer to language buffer          
int query_len;                // Length of query                     
int status;                    // Status of DB-Library calls          
</code></pre>
</li>
<li>
Get the remote DBPROCESS pointer <i>*rmtproc </i>in the SRV_PROC connection structure with <b>srv_getuserdata</b>. This is a pointer that was saved using <b>srv_setuserdata</b> after the client connected to a remote database.<pre><code>rmt_dbms = (REMOTE_DBMS *)srv_getuserdata(srvproc);
rmtproc = rmt_dbms-&gt;dbproc;
</code></pre>
</li>
<li>
Get the pointer to the client's language request command buffer using the <b>srv_langptr</b> function, and put the pointer in the DBPROCESS structure of the SQL Server database:<pre><code>// Get the pointer to the client language request command buffer. 

query = srv_langptr (srvproc);

// Place the pointer in the remote DBPROCESS pointer rmtproc.     

status = dbcmd (rmtproc, query);
</code></pre>
</li>
<li>
Send the SQL command to the remote database using the DB-Library <b>dbsqlexec</b> function if the previous DB-Library <b>dbcmd</b> function call was successful:<pre><code>if (status == SUCCEED)    // Previous DB-Library call successful   
    status = dbsqlexec (rmtproc);
else

  // If an attention event was issued or if the previous DB-Library
  // call was not successful, acknowledge and send a results       
  // completion message to the client.                             

    srv_senddone (srvproc, SRV_DONE_FINAL, (DBUSMALLINT) 0,
         (DBINT) 0);
</code></pre>
</li>
<li>
Get the remote database results and pass them back to the client using the <b>handle_results</b> function:<pre><code>handle_results (rmtproc, srvproc);
</code></pre>
<p>
(For more information about this function, see <a href="ods03_3ajp.htm">Receiving Results from a Remote Database</a>. 
</li>
<li>
Return the srv_continue constant to continue processing events:<pre><code>return (SRV_CONTINUE);
</code></pre>
</li>
</ol>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using xp_scan_xbase</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_using_xp_scan_xbase"></a>Using xp_scan_xbase</h2>
<p>
The XP.DLL extended stored procedure <b>xp_scan_xbase</b> accesses a dBASE III® -  or dBASE IV® - based file and returns the contents as a relational results set. This procedure is an example of how to access data that is not held in a relational database and how to return results in a form that can be used by a SQL Server client. The <b>xp_scan_xbase</b> extended stored procedure takes as an argument the full pathname of the database file, enclosed in quotation marks. For example:</p>
<pre>declare @retstatus int
@retstatus=execute xp_scan_xbase
    "c:\sql\opends\samples\procsrv\build\sales.dbf"
select @retstatus
</pre>
<p>
This example accesses the specified file and returns its contents as a relational results set. By declaring and using a return status variable, this example also shows how to access the return values from extended stored procedures.</p>
<p>
The <b>xp_scan_xbase</b> sample code demonstrates the use of a default parameter in an extended stored procedure. If the caller does not specify a parameter, this procedure accesses a sample dBASE-formatted file that is included with the sample for the purposes of demonstration.</p>
<p>&nbsp;</p></body>
</HTML>

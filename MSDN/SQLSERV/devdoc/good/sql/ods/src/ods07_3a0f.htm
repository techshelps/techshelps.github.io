<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using xp_echo</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_using_xp_echo"></a>Using xp_echo</h2>
<p>
The XP.DLL extended stored procedure <b>xp_echo</b> is an example of how to use input and output parameters to pass information to and from an extended stored procedure, in the same way as you would pass information to and from a standard SQL Server stored procedure. The <b>xp_echo</b> extended stored procedure accepts a user-specified input parameter and returns the value of the input parameter as an output parameter. For example:</p>
<pre>declare @out char(4)
declare @in int
select @in=999
execute xp_echo @in, @param=@out output
select @out
<b><i>  </i></b></pre>
<p>
In this example, the caller first declares the parameters to be used. The EXECUTE statement passes the value of <b>@in</b> to the <b>xp_echo</b> procedure and then saves the value that the procedure returns as <b>@out</b>, using standard SQL Server stored procedure syntax for passing the input value and for saving the return parameter.</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

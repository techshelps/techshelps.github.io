<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transaction Handling</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_transaction_handling"></a>Transaction Handling</h3>
<p>
The ODBC specification supports both autocommitting of transactions and explicit committing of transactions. For information, see the sections on transactions in both "Developing Applications" and "Developing Drivers" in the <i>Microsoft ODBC 2.0 Programmer's Reference and SDK Guide</i>. The default for the driver is autocommit mode with a default transaction isolation specified.</p>
<p>
The Open Data Services ODBC driver supports three transaction models:
<ul>
<li>
The DBMS implicitly starts a transaction and an explicit COMMIT/ABORT type statement ends it. DB2 behaves this way.</li>
<li>
The DBMS automatically commits the statement after each execution, an explicit BEGIN TRANSACTION type statement starts an explicit transaction and an explicit COMMIT/ABORT type statement ends the explicit transaction. SQL Server behaves this way.</li>
<li>
The DBMS supports both autocommit and explicit transactions. The AS/400® behaves this way.</li>
</ul>
<p>
The first transaction model requires either the Open Data Services ODBC driver or the gateway itself to issue explicit commits after each SQL statement to simulate autocommit mode. When autocommit is off, the DBMS implicitly starts the transaction and the ODBC application explicitly ends the transaction. If the IDS_AUTOCOMMIT_OFFSET strings are not empty, the Open Data Services ODBC driver sends the appropriate string to the gateway to turn autocommit on or off in the gateway. In this case, the gateway issues its own commits after each SQL statement. If these strings are empty, the Open Data Services ODBC driver assumes responsibility for issuing an explicit commit (see the IDS_TRANSACT_OFFSET string) after each SQL statement when autocommit is turned on. If the gateway is performing the autocommit and if the default for the gateway can be configured to set autocommit off, be sure to include the proper initialization string to set autocommit on in the gateway. For more information, see <a href="odse_87xq.htm">Gateway Initialization</a>. </p>
<p>
The second transaction model requires either the Open Data Services ODBC driver or the gateway itself to issue explicit transaction starts before the first SQL statement after an explicit commit/rollback when the ODBC application is not in autocommit mode. If the IDS_AUTOCOMMIT_OFFSET strings are not empty, the Open Data Services ODBC driver sends the appropriate string to the gateway to turn autocommit on or off in the gateway. In this case, the gateway issues the explicit transaction start before the first SQL statement. If these strings are empty, the Open Data Services ODBC driver issues a transaction start (see the IDS_BEGINTRAN string) before the first SQL statement. If the default for the gateway can be configured to set autocommit off, be sure to include the proper initialization string to set autocommit on in the gateway. For more information, see <a href="odse_87xq.htm">Gateway Initialization</a>. </p>
<p>
The third transaction model has the DBMS doing most of the work. The Open Data Services ODBC driver sends the appropriate string to turn autocommit on or off (see IDS_AUTOCOMMIT_OFFSET strings). If autocommit support is implemented in the DBMS as one of the transaction isolation levels, the gateway is responsible for correctly setting the previous isolation level when autocommit is turned off.</p>
<p>
When autocommit is turned off and the application ends a transaction (<b>SQLTransact</b>), the appropriate string to commit or terminate is sent to the gateway. If the <b>SQLTransact </b>option is SQL_COMMIT, the IDS_TRANSACT_OFFSET+SQL_COMMIT string is sent. If the <b>SQLTransact</b> option is SQL_ROLLBACK, the IDS_TRANSACT_OFFSET+SQL_ROLLBACK string is sent. </p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

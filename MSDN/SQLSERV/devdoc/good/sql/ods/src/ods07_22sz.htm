<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Extended Stored Procedures</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_creating_extended_stored_procedures"></a>Creating Extended Stored Procedures</h1>
<p>
Microsoft SQL Server for Windows NT supports <i>extended stored procedures</i>, allowing functions that you develop using the Open Data Services API to be integrated into SQL Server as a dynamic component of SQL Server, instead of providing them as part of a separate server application. Users call these procedures in the same way that they call standard SQL Server stored procedures.</p>
<p>
Extended stored procedures extend SQL Server by providing functions that are similar to those of an Open Data Services server application, such as accessing data or running commands that exist outside of the standard SQL Server environment. </p>
<p>
You create extended stored procedures using your own C application code with the Open Data Services API in the same way as you would create a separate Open Data Services server application. Rather than responding to a series of requests from connected clients, however, extended stored procedures use the Open Data Services API to respond to procedure calls from individual clients and servers and then return the appropriate results.</p>
<p>
Integrating your Open Data Services server application functions directly into SQL Server as extended stored procedures offers the following advantages:
<ul>
<li>
Ease of use.<p>
For the SQL Server user, executing an extended stored procedure is similar to executing a stored procedure.
</li>
<li>
Ease of administration.<p>
For the SQL Server system administrator, adding and dropping extended stored procedures is similar to adding and dropping stored procedures.
</li>
<li>
Performance advantages.<p>
Extended stored procedures are implemented as a dynamic-link library (DLL) that runs as part of SQL Server, sharing the SQL Server address space and security privileges.
</li>
</ul>
<p>
<b>Note</b>  Only a SQL Server system administrator can add extended stored procedures to SQL Server. The administrator should thoroughly test these procedures before installation due to the potential for any process that <i>shares the same address space</i> in system memory to affect normal SQL Server processing. Although SQL Server uses an exception handler to catch memory access violations, it is not always possible to detect cases in which an extended stored procedure corrupts a portion of memory that is being used by SQL Server.</p>
<p>
The alternative to running extended stored procedures in the same address space as SQL Server is to provide these functions as a separate Open Data Services server application. For more information, see <a href="ods08_9tma.htm">Sample Application-Procedure Server</a>. </p>
<p>
The XP.DLL sample application provides the following extended stored procedures, which can be called either from a client or from SQL Server.  </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=69%></th>
</tr>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=69%></th>
</tr>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=69%></th>
</tr>
<tr valign=top>
<th align=left width=31%>Extended stored <br>
procedure</th>
<th align=left width=69%><br>
Description</th>
</tr>
<tr valign=top>
<td width=31%><b>xp_diskfree</b></td>
<td width=69%>Accepts a drive letter as an argument and returns the amount of available disk space as a return parameter.</td>
</tr>
<tr valign=top>
<td width=31%><b>xp_disklist</b></td>
<td width=69%>Returns a list of available disk drives and the amount of available disk space for each one as a relational results set.</td>
</tr>
<tr valign=top>
<td width=31%><b>xp_echo</b></td>
<td width=69%>Accepts an input parameter as an argument and returns the same value as an output parameter.</td>
</tr>
<tr valign=top>
<td width=31%><b>xp_proclist</b></td>
<td width=69%>Returns a list of available extended stored procedures.</td>
</tr>
<tr valign=top>
<td width=31%><b>xp_scan_xbase</b></td>
<td width=69%>Returns the contents of a dBASE® file as if it were a SQL Server query results set, performing the equivalent of a SELECT * from <i>tablename</i> statement.</td>
</tr>
</table><br>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlRetData$</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqlretdata.24"></a>SqlRetData$</h1>
<p>
Returns a return-parameter value generated by a stored procedure or a remote stored procedure.</p>
<h4>Syntax</h4>
<p>
<b>SqlRetData$ ( </b><i>sqlconn%</i><b>,</b> <i>retnum%</i><b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i></dt>
<dd>
Is a SQL Server connection. The value of <i>sqlconn%</i> is returned by <b>SqlOpen%</b>.</dd>
<dt>
<i>retnum%</i></dt>
<dd>
Is the number of the returned value of interest. The first return value is number 1. Values are returned in the same order as the parameters were originally specified in the stored procedure's CREATE PROCEDURE statement. (Note that the order is not necessarily the same as that specified in the remote stored procedure.) When specifying <i>retnum%</i>, non-return parameters are not counted. For example, if the second parameter in a stored procedure is the only return parameter, its <i>retnum%</i> is 1, not 2.
</dd>
</dl>
<h4>Returns</h4>
<p>
A string containing the value of the specified <i>retnum%</i>. If <i>retnum%</i> is out of range, <b>SqlRetData$</b> returns an empty string. To determine whether the data really has a null value (and <i>retnum%</i> is not merely out of range), check for a return value of 0 from <b>SqlRetLen&amp;</b>.</p>
<h4>Remarks</h4>
<p>
The server returns stored procedure information (including any return status and parameter values) immediately after returning all normal results for that stored procedure. Process the normal results, and then call <b>SqlRetData$</b> after <b>SqlResults%</b> returns NOMORERPCRESULTS (for all stored procedures in a batch except the last one) or NOMORERESULTS (for a single stored procedure, or for the last stored procedure in a batch).</p>
<p>
Stored procedures can return values for specified parameters. If the value of one of these parameters is changed in a stored procedure, the new value is returned to the program that called the procedure. This action parallels the pass-by-reference facility available in some programming languages.</p>
<p>
To function as a return parameter, a parameter must be declared as such:
<ul>
<li>
When a stored procedure is created with CREATE PROCEDURE, the parameter must be declared as OUTPUT.</li>
<li>
For a stored procedure executed using the Transact-SQL EXECUTE statement, the parameter must be declared as OUTPUT.</li>
<li>
For a stored procedure executed using DB-Library functions (such as <b>SqlRpcInit%</b>), when the parameter is added using <b>SqlRpcParam%</b>, the <i>status%</i> bitmask must contain the SQLRPCRETURN option.</li>
</ul>
<p>
If a stored procedure is executed using DB-Library functions (such as <b>SqlRpcInit%</b>), the return parameter values are automatically available to the application. If a stored procedure is invoked with an EXECUTE statement, the return parameter values are available only if the command batch containing the EXECUTE statement uses Transact-SQL local variables, not constants, for the return parameters.</p>
<h4>See Also</h4>
<p>
<a href="pdvb04b_6awl.htm"><b>SqlNextRow%</b></a>, <a href="pdvb06_4ugl.htm"><b>SqlNumRets%</b></a>, <a href="pdvb04c_07jp.htm"><b>SqlResults%</b></a>, <a href="pdvb06_6hpy.htm"><b>SqlRetLen&amp;</b></a>, <a href="pdvb06_2a44.htm"><b>SqlRetName$</b></a>, <a href="pdvb06_8nqt.htm"><b>SqlRetType%</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlRpcInit%</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqlrpcinit.25"></a>SqlRpcInit%</h1>
<p>
Initializes a stored procedure or a remote stored procedure.</p>
<h4>Syntax</h4>
<p>
<b>SqlRpcInit% ( </b><i>sqlconn%</i><b>,</b> <i>rpcname$</i><b>,</b> <i>options%</i><b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i></dt>
<dd>
Is a SQL Server connection. The value of <i>sqlconn%</i> is returned by <b>SqlOpen%</b>.</dd>
<dt>
<i>rpcname$</i></dt>
<dd>
Is the name of the stored procedure to be invoked.</dd>
<dt>
<i>options%</i></dt>
<dd>
Is a 2-byte bitmask of options for stored procedures. Specify 0 to indicate no options. The following options are available:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%></th>
<th align=left width=67%></th>
</tr>
<tr valign=top>
<th align=left width=33%></th>
<th align=left width=67%></th>
</tr>
<tr valign=top>
<th align=left width=33%>option</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%></td>
<td width=67%></td>
</tr>
<tr valign=top>
<td width=33%>SQLRPCRECOMPILE</td>
<td width=67%>Recompiles a stored procedure before it is executed.</td>
</tr>
<tr valign=top>
<td width=33%>SQLRPCRESET</td>
<td width=67%>Cancels a single stored procedure or a batch of stored procedures. If <i>rpcname$</i> is specified, that new stored procedure is initialized after the cancel is complete.</td>
</tr>
</table><br>


</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<h4>Remarks</h4>
<p>
An application can execute a single stored procedure, or it can execute a batch containing multiple stored procedures. To execute a single stored procedure, you can use DB-Library functions (such as <b>SqlRpcInit%</b>) or the Transact-SQL EXECUTE statement. To retrieve the status number and parameter values returned by each stored procedure in a batch, you must use DB-Library functions.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To execute a single stored procedure or a batch of stored procedures using DB-Library functions:</h5>
<ol>
<li>
Call <b>SqlRpcInit%</b> once to initialize a new stored procedure.</li>
<li>
Call <b>SqlRpcParam%</b> for each parameter of the stored procedure that does not have a default value.</li>
<li>
Repeat steps 1 and 2 for each stored procedure in the batch.</li>
<li>
Call <b>SqlRpcSend%</b> or <b>SqlRpcExec% </b>to send the entire stored procedure batch to SQL Server.</li>
<li>
Call <b>SqlOk%</b> to wait for SQL Server to start returning results.</li>
<li>
Call <b>SqlResults%</b> to process the results from each stored procedure.<p>
If <b>SqlResults% </b>returns SUCCEED, call <b>SqlNextRow%</b> until it returns NOMOREROWS to process the normal results from the stored procedure.
<p>
If <b>SqlResults% </b>returns NOMORERPCRESULTS, and you want to retrieve status number and return parameter information returned by the stored procedure, follow the steps given below.
</li>
<li>
Repeat step 6 until <b>SqlResults% </b>returns NOMORERESULTS.</li>
<li>
If you want to retrieve status number and return parameter information returned by the last stored procedure in the batch, follow the steps given below.</li>
</ol>
<p>
After <b>SqlResults%</b> returns NOMORERPCRESULTS (for all stored procedures in a batch except the last one) or NOMORERESULTS (for a single stored procedure, or for the last stored procedure in a batch), you can retrieve status number and return parameter information for a stored procedure.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To retrieve status number and return parameter information returned by a stored procedure using DB-Library functions:</h5>
<ul>
<li>
Call <b>SqlRetStatus&amp;</b> and <b>SqlHasRetStat%</b> to retrieve the return status number.</li>
<li>
Call <b>SqlNumRets%</b> to determine the number of return parameters.</li>
<li>
Call <b>SqlRetData$</b>, <b>SqlRetType%</b>, <b>SqlRetLen&amp;</b>, and <b>SqlRetName$</b> about retrieve information for each return parameter.</li>
</ul>
<p>
Executing stored procedures with DB-Library functions has some advantages over using an EXECUTE statement:
<ul>
<li>
Using DB-Library functions to call a stored procedure causes DB-Library for Visual Basic to pass parameters in their native datatypes; using an EXECUTE statement passes them as ASCII characters. Calling stored procedures with DB-Library functions works faster and usually more efficiently than an EXECUTE statement because the server is not required to convert native datatypes into their ASCII equivalents.</li>
<li>
Using DB-Library<b> </b>functions instead of an EXECUTE statement accommodates return parameters for stored procedures more quickly. With a remote stored procedure, the return parameters are always available to the application by calling <b>SqlRetData$</b>. (Note, however, that a return parameter must be specified as such when it is first added to the stored procedure through <b>SqlRpcParam%</b>.)<p>
When a stored procedure is called with an EXECUTE statement, the return parameter values are available only if the command batch containing the EXECUTE statement uses local variables, rather than constants, as the return parameters. This involves additional parsing each time the command batch is executed.
</li>
<li>
The client application can use DB-Library functions to issue a stored procedure call directly to an Open Data Services server application. The Open Data Services server application will detect this request as a remote stored procedure event. The Open Data Services server application is not required to parse the language buffer to find out what the client is requesting.</li>
</ul>
<p>
Stored procedures executed on the local SQL Server (using the <i>sqlconn%</i> connection) participate in transactions normally and can be rolled back. Remote stored procedures executed on a remote SQL Server cannot be rolled back.</p>
<h4>See Also</h4>
<p>
<a href="pdvb04b_6awl.htm"><b>SqlNextRow%</b></a>, <a href="pdvb04c_07jp.htm"><b>SqlResults%</b></a>, <a href="pdvb06_86no.htm"><b>SqlRetData$</b></a>, <a href="pdvb06_9m0m.htm"><b>SqlRetStatus&amp;</b></a>, <a href="pdvb06_47cl.htm"><b>SqlRpcParam%</b></a>, <a href="pdvb06_4v5h.htm"><b>SqlRpcSend%</b></a>, <a href="pdvb04c_6n1x.htm"><b>SqlOk%</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

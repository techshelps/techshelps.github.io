<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlCursorOpen%</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqlcursoropen.25"></a>SqlCursorOpen%</h1>
<p>
Opens a cursor. It is an explicit server cursor if you are connected to SQL Server 6.0 and <b>SqlCursorFetchEx%</b> is used for the first fetch. It is a transparent server cursor if you are connected to SQL Server 6.0 and <b>SqlCursorFetch%</b> is used for the first fetch. It is a client cursor if you are connected to SQL Server 4.2, or if the DBCLIENTCURSORS option is set, and only <b>SqlCursorFetch%</b> can be used to fetch rows.</p>
<h4>Syntax</h4>
<p>
<b>SqlCursorOpen% ( </b><i>sqlconn%</i><b>, </b><i>stmt$</i><b>, </b><i>scrollopt%</i><b>, </b><i>concuropt%</i><b>, </b><i>nrows%</i><b>, </b><i>pstatus&amp;</i>()<b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i></dt>
<dd>
Is the SQL Server connection returned by <b>SqlOpen%</b>.</dd>
<dt>
<i>stmt$</i></dt>
<dd>
Is the SELECT statement that defines a cursor.
<p>
<b>Client cursor:</b>

<p>
This must be a single SELECT statement. All tables included in the FROM clause must have a unique index.

<p>
The SELECT statement cannot contain any of the following:

<ul>
<li>
INTO</li>
<li>
FOR BROWSE</li>
<li>
COMPUTE</li>
<li>
UNION</li>
<li>
COMPUTE BY</li>
<li>
aggregate function</li>
<li>
Table alias</li>
</ul>

<p>
If <i>scrollopt%</i> is CURKEYSET%, the SELECT statement can contain the following keywords:

<ul>
<li>
ORDER BY</li>
<li>
HAVING</li>
<li>
GROUP BY</li>
</ul>

<p>
If the SELECT statement includes a view, the FROM clause must include only a single view (no other tables or views). All base tables included in the FROM clause of the view definition must have a unique index, and the select list must include all unique index columns of the base tables.

<p>
<b>Transparent server cursor, explicit server cursor:</b>

<p>
This can be a single SELECT statement or the name of a stored procedure that contains only a single SELECT statement.

<p>
The SELECT statement (alone or in a stored procedure) cannot contain any of the following keywords:

<ul>
<li>
INTO</li>
<li>
FOR BROWSE</li>
<li>
COMPUTE</li>
</ul>

<p>
The SELECT statement can contain an ORDER BY clause. If the columns in the ORDER BY clause match the columns of the unique indexes used by the cursor, the cursor will use the <i>scrollopt%</i> requested. If they do not match, SQL Server must generate a temporary table, and a CURKEYSET% cursor will be used if a <i>scrollopt%</i> of CURFORWARD% or CURDYNAMIC% is requested. This also occurs if the SELECT contains a subquery.

<p>
The cursor is automatically opened with a <i>scrollopt%</i> of CURINSENSITIVE% and a <i>concuropt%</i> of CURREADONLY% if the SELECT statement contains any of the following:

<ul>
<li>
Table with no unique index</li>
<li>
UNION</li>
<li>
DISTINCT</li>
<li>
GROUP BY</li>
<li>
HAVING</li>
<li>
aggregate function</li>
<li>
Outer join</li>
</ul>

<p>
If a stored procedure is used, any input parameters must be constants. Declared variables cannot be used for input parameters. Any output parameters or return values from the stored procedure are ignored.
</dd>
<dt>
<i>scrollopt%</i></dt>
<dd>
Is one of the following requested scroll options:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%><i>scrollopt%</i></th>
<th align=left width=71%>Description</th>
</tr>
<tr valign=top>
<td width=29%></td>
<td width=71%></td>
</tr>
<tr valign=top>
<td width=29%>CURDYNAMIC%</td>
<td width=71%>Dynamic cursor.<p>
<b>Client cursor, transparent server cursor:</b></p>
<p>
The <b>SqlCursorFetch%</b> function will allow only a <i>fetchtype%</i> of FETCHFIRST%, FETCHNEXT%, or FETCHPREV%.</p>
<p>
<b>Explicit server cursor:</b></p>
<p>
The <b>SqlCursorFetchEx%</b> function will allow all <i>fetchtype%</i> values except FETCHRANDOM%.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>CURFORWARD%</td>
<td width=71%>Forward-only dynamic cursor.<p>
<b>Client cursor, transparent server cursor:</b></p>
<p>
The <b>SqlCursorFetch%</b> function will allow only a <i>fetchtype%</i> of FETCHFIRST% or FETCHNEXT%.</p>
<p>
<b>Explicit server cursor:</b></p>
<p>
The <b>SqlCursorFetchEx%</b> function will allow only a <i>fetchtype%</i> of FETCHFIRST%, FETCHNEXT%, or FETCHRELATIVE% with a positive <i>rownum%</i>.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>CURKEYSET%</td>
<td width=71%>Keyset cursor.<p>
The <b>SqlCursorFetch%</b> and <b>SqlCursorFetchEx%</b> functions will allow all <i>fetchtype%</i> values.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>CURINSENSITIVE%</td>
<td width=71%><b>Client cursor:</b><p>
Not supported.</p>
<p>
<b>Transparent server cursor, explicit server cursor:</b></p>
<p>
Insensitive keyset cursor. Use a <i>concuropt%</i> of READ_ONLY. SQL Server will generate a temporary table, so changes made to the rows by others will not be visible through the cursor.</p>
<p>
The SqlCursorFetch% and SqlCursorFetchEx% functions will allow all <i>fetchtype%</i> values.</p>
</td>
</tr>
<tr valign=top>
<td width=29%><i>n</i> &gt; 1</td>
<td width=71%><b>Client cursor:</b><p>
For backward compatibility with "mixed" client cursors.</p>
<p>
<b>Transparent server cursor, explicit server cursor:</b></p>
<p>
Mapped to a CURKEYSET% cursor.</p>
</td>
</tr>
</table><br>

</dd>
<dt>
<i>concuropt%</i></dt>
<dd>
Is one of the following concurrency control options:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%><i>concuropt%</i></th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%></td>
<td width=72%></td>
</tr>
<tr valign=top>
<td width=28%>CURREADONLY%</td>
<td width=72%>Read-only cursor. You cannot modify rows in the cursor results set.</td>
</tr>
<tr valign=top>
<td width=28%>CURLOCKCC%</td>
<td width=72%>Intent to update locking.<p>
<b>Client cursor:</b></p>
<p>
Places an exclusive lock on the data page that contains each row as it is fetched. The locks are maintained only if it is inside an open transaction block defined by BEGIN TRANSACTION; the locks are released when the transaction is closed by a COMMIT TRANSACTION or ROLLBACK TRANSACTION statement.</p>
<p>
<b>Transparent server cursor, explicit server cursor:</b></p>
<p>
Places an update intent lock on the data page that contains each row as it is fetched. If not inside an open transaction, the locks are released when the next fetch is performed. If inside an open transaction, the locks are released when the transaction is closed.</p>
</td>
</tr>
<tr valign=top>
<td width=28%>CUROPTCC%</td>
<td width=72%>Optimistic concurrency control using timestamp or values. Changes to a row through the cursor succeed only if the row remains unchanged since the last fetch. Changes are detected by comparing timestamps or by comparing all non-text, non-image values if timestamps are not available.</td>
</tr>
<tr valign=top>
<td width=28%>CUROPTCCVAL%</td>
<td width=72%>Optimistic concurrency control using values. Changes to a row through the cursor succeed only if the row remains unchanged since the last fetch. Changes are detected by comparing all non-text, non-image values.</td>
</tr>
</table><br>

</dd>
<dt>
<i>nrows%</i></dt>
<dd>
<b>Client cursor, transparent server cursor:</b>
<p>
Is the number of rows in the fetch buffer filled by calls to SqlCursorFetch%.

<p>
<b>Explicit server cursor:</b>

<p>
Is the maximum number of rows in the fetch buffer. The <i>nfetchrows%</i> parameter of SqlCursorFetchEx% must be less than or equal to this value. 
</dd>
<dt>
<i>pstatus&amp;</i>()</dt>
<dd>
Is an array of row status indicators. This array must contain <i>nrows%</i> long integer elements. A row status value is a bitmap of fetch status values ORed together. When passing a <i>pstatus&amp;</i>() parameter to <b>SqlCursorOpen%</b>, pass the first element of the array, for example, <b>mypstatus&amp;(0)</b>.
<p>
Each row in the fetch buffer has a corresponding row status indicator. After a fetch, the status of every row in the fetch buffer is returned in the corresponding element of this array.

<p>
<b>Client cursor, transparent server cursor:</b>

<p>
For more information about fetch status values, see <b>SqlCursorFetch%</b>.

<p>
<b>Explicit server cursor:</b>

<p>
For more information about fetch status values, see <b>SqlCursorFetchEx%</b>.

</dd>
</dl>
<h4>Returns</h4>
<p>
A handle to the cursor if the cursor open succeeds. If it fails, 0 is returned. Several errors, such as the following, can cause the cursor to fail:
<ul>
<li>
Not enough memory to complete the request. Reduce the number of rows in the keyset cursor results set by using a more limiting WHERE clause, use a dynamic cursor, or reduce the number of rows in the fetch buffer.</li>
<li>
Tables did not have the required unique indexes.</li>
<li>
A syntax error occurred or the SELECT statement failed.</li>
</ul>
<h4>Remarks</h4>
<p>
After <b>SqlCursorOpen%</b> returns a valid cursor handle, you can call <b>SqlCursorInfoEx%</b> and examine the <b>Type</b> field to determine the actual type of cursor that was opened.</p>
<p>
With a dynamic cursor, membership of rows in the cursor results set is determined at fetch time, and it can change between each fetch. A row disappears from the cursor results set if it is deleted or if it is updated such that it no longer meets the WHERE clause criteria. A row appears in the cursor results set if it inserted or updated such that it meets the WHERE clause criteria.</p>
<p>
With a keyset cursor, membership and order of rows in the cursor results set is fixed at open time. A row is marked as missing from the cursor results set if it is deleted or if it is updated such that it no longer meets the WHERE clause criteria. A row appears in the cursor results set only if it is inserted through a cursor based on a single table.</p>
<p>
Multiple cursors (as many as the system's memory allows) can be opened using the same connection. When cursor functions are called, there should be no commands waiting to be executed or results pending in the connection.</p>
<h4>See Also</h4>
<p>
<a href="pdvb05_34xh.htm"><b>SqlCursor%</b></a>, <a href="pdvb05_8ihx.htm"><b>SqlCursorClose</b></a>, <a href="pdvb05_1tbp.htm"><b>SqlCursorColInfo%</b></a>, <a href="pdvb05_7z5h.htm"><b>SqlCursorFetch%</b></a>, <a href="pdvb05_8cad.htm"><b>SqlCursorInfo%</b></a>, <a href="#_sqlcursoropen.25"><b>SqlCursorOpen%</b></a></p>
<p>&nbsp;</p></body>
</HTML>

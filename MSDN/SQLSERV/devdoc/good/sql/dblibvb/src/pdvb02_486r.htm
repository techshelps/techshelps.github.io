<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processing Results</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_processing_results"></a>Processing Results</h2>
<p>
The functions <b>SqlResults%</b>, <b>SqlNextRow%</b>, and <b>SqlData$</b> or <b>SqlAData$ </b>process the results of Transact-SQL statements and return information to the user.</p>
<p>
The <b>SqlResults%</b> function sets up the results of the current Transact-SQL statement for processing. Normally, you call <b>SqlResults%</b> once for every Transact-SQL statement placed in the command buffer (<b>SqlResults%</b> should return SUCCEED), and then one last time to return the NOMORERESULTS indicator. In the preceding program fragment, three calls to <b>SqlCmd%</b> are used to place a single Transact-SQL statement in the command buffer. In this case, you need to call <b>SqlResults%</b> only twice. The first call should return SUCCEED, and the second call should return NOMORERESULTS.</p>
<p>
When a call to <b>SqlResults%</b> returns SUCCEED (indicating that the results of the current Transact-SQL statement are available), call <b>SqlNextRow%</b> to read a row of data from SQL Server. Each successive call to <b>SqlNextRow%</b> reads another row until the last row has been read and the nomorerows indicator is returned. Row processing must take place after <b>SqlNextRow%</b> returns SUCCEED and before the next call to <b>SqlNextRow%</b>, because each call to <b>SqlNextRow%</b> overwrites the values in the previous row (unless row buffering has been turned on). You must call <b>SqlNextRow%</b> until it returns NOMOREROWS (to complete the processing of a result set) before calling <b>SqlResults%</b> again. The following program fragment uses a DO loop to call <b>SqlNextRow%</b> until nomorerows is returned.</p>
<pre>Result% = SqlResults%(Sqlconn%)

'Process the command.
IF Result% = SUCCEED THEN

   'Retrieve and print the result rows.
   PRINT
   DO UNTIL SqlNextRow%(Sqlconn%) = NOMOREROWS
      Name$ = SqlData$(Sqlconn%, 1)
      City$ = SqlData$(Sqlconn%, 2)
      PRINT Name$, City$
   LOOP

END IF
</pre>
<p>
Even when you know that a Transact-SQL query returns only one row, you must call <b>SqlNextRow%</b> twice: once to get the result row, and once to get the nomorerows flag.</p>
<p>
Transact-SQL statements return two types of result rows: regular rows and compute rows. Regular rows are generated from columns in a Transact-SQL SELECT statement. Compute rows are generated from columns in a COMPUTE clause. Because these two types of rows contain very different data, the application must process them separately.</p>
<p>
The <b>SqlData$</b> function returns a string containing data from a regular result column. The <b>SqlAData$</b> function returns a string containing data from a compute column. This data is always returned as a string, regardless of its datatype. Binary strings of the datatypes <i>binary</i>, <i>varbinary</i>, and <i>image</i> are returned as binary strings.</p>
<p>
For an example of how these functions are used, refer to the QUERY sample application. This sample application calls the routines <b>GetDatabases</b> and <b>Process_Sql_query,</b> defined separately in the VBSQLGEN.BAS common code module.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

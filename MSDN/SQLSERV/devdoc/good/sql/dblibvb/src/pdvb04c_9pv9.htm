<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlSetOpt%</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqlsetopt.25"></a>SqlSetOpt%</h1>
<p>
Sets a DB-Library for Visual Basic option.</p>
<h4>Syntax</h4>
<p>
<b>SqlSetOpt% ( </b><i>sqlconn%</i><b>,</b> <i>opt%</i><b>,</b> <i>optparam$</i><b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i> ( ) </dt>
<dd>
Is a SQL Server connection. The value of <i>sqlconn%</i> is returned by <b>SqlOpen%</b>.</dd>
<dt>
<i>opt%</i></dt>
<dd>
Is the option to be set. For a list of the options available in DB-Library for Visual Basic, see <a href="pdvba_6yup.htm">DB-Library for Visual Basic Options</a>. </dd>
<dt>
<i>optparam$</i></dt>
<dd>
Is a parameter for an option. Certain options take parameters. For example, the SQLBUFFER option takes as its parameter the number of rows to be buffered. The <i>optparam$</i> variable must always be enclosed in quotation marks, even in the case of a numeric value.
<p>
If the option takes no parameters, the value of <i>optparam$</i> is ignored. For options that take no parameters, <i>optparam$</i> can be an empty string or any other string value.

<p>
When you use the <b>Str$</b> function to convert a numeric <i>optparam$</i> value to a string, it pads the string with a space. If you don't remove the padded space from the parameter, a call to <b>SqlSetOpt%</b> fails. For example, in the following code fragment, <b>SqlSetOpt%</b> fails:

<pre>Optparam$ = Str$(Value%)
SqlSetOpt%(Sqlconn%, X, Optparam$)</pre>

<p>
To use the <b>Str$</b> function to convert a numeric <i>optparam$</i> value to a string, you must use the <b>LTrim</b> function to remove the padded space. For example:

<pre>Optparam$ = Str$(Value%)
SqlSetOpt%(Sqlconn%, X, LTrim$(Optparam$))</pre>

<p>
For a list of the option parameters available in DB-Library for Visual Basic, see <a href="pdvba_6yup.htm">DB-Library for Visual Basic Options</a>. 

</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED (1) or FAIL (0).</p>
<h4>Remarks</h4>
<p>
Although some options can be set and cleared directly through Transact-SQL, design your application to use <b>SqlSetOpt%</b> and <b>SqlClrOpt%</b> to set and clear options because <b>SqlSetOpt%</b> and <b>SqlClrOpt%</b> provide a uniform interface for setting both SQL Server and DB-Library for Visual Basic options. They also allow the application to use <b>SqlIsOpt%</b> to check the status of an option.</p>
<p>
Three options are unique to DB-Library for Visual Basic: SQLBUFFER, SQLTEXTLIMIT, and SQLNOAUTOFREE. In addition to these options, all Transact-SQL options can be set using <b>SqlSetOpt%.</b> If you set any of the Transact-SQL options using <b>SqlSetOpt%</b>, DB-Library for Visual Basic places the appropriate Transact-SQL SET statement into the command buffer. This SET statement must be executed at some later time to take effect. Each SET statement means another call to <b>SqlResults%</b>. Therefore, design your application to receive the results returned from the statement generated by <b>SqlSetOpt%</b>. If an invalid parameter is specified, its invalidity is not known until the statement is sent to SQL Server and the results for that statement are returned using <b>SqlResults%</b>.</p>
<h4>See Also</h4>
<p>
<a href="pdvb04a_68fp.htm"><b>SqlClrOpt%</b></a>, <a href="pdvb04b_0a45.htm"><b>SqlIsOpt%</b></a>, <a href="pdvb04c_07jp.htm"><b>SqlResults%</b></a>; <a href="pdvba_6yup.htm">DB-Library for Visual Basic Options</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

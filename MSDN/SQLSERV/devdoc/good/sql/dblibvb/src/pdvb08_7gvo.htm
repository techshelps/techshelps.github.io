<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlQual$</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqlqual.24"></a>SqlQual$</h1>
<p>
Returns a string containing the WHERE clause for the current row in a specified table. In a browsable table, this string can be used to update the current row.</p>
<h4>Syntax</h4>
<p>
<b>SqlQual$ ( </b><i>sqlconn%</i><b>,</b> <i>tabnum%</i><b>,</b> <i>tabname$</i><b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i></dt>
<dd>
Is a SQL Server connection. The value of <i>sqlconn%</i> is returned by <b>SqlOpen%</b>. </dd>
<dt>
<i>tabnum%</i> </dt>
<dd>
Specifies an integer to receive the number of the table. Tables are numbered in the order they are listed in the SELECT statement's FROM clause. Table numbers start at 1. If <i>tabnum%</i> is -1, <i>tabname$</i> is used to identify the table.</dd>
<dt>
<i>tabname$</i> </dt>
<dd>
Identifies a string containing the name of a table specified in the SELECT statement's FROM clause. If <i>tabname$</i> is an empty string, <i>tabnum%</i> is used to identify the table. 
</dd>
</dl>
<h4>Returns</h4>
<p>
A string containing the WHERE clause for the current row in a specified table. If the specified table cannot be browsed, <b>SqlQual$</b> returns an empty string. A browsable table has a unique index and a <i>timestamp</i> column.</p>
<h4>Remarks</h4>
<p>
<b>SqlQual$</b> is a DB-Library for Visual Basic browse-mode function. For a detailed discussion of browse mode, see <a href="pdvb02_15pu.htm">DB-Library for Visual Basic Programming</a>.<b> </b></p>
<p>
<b>SqlQual$</b> provides a WHERE clause that can be used to update a single row in a browsable table. Columns from this row must have been previously retrieved through a browse-mode SELECT query.</p>
<p>
The WHERE clause produced by <b>SqlQual$</b> begins with the keyword WHERE and contains references to the row's unique index and <i>timestamp</i> column. You can simply append the WHERE clause to an UPDATE or DELETE statement; there is no need to examine it or manipulate it in any way.</p>
<p>
The <i>timestamp</i> column indicates the time that a particular row was last updated. An update on a browsable table fails if the <i>timestamp</i> column in the WHERE clause that <b>SqlQual$</b> generates is different from the <i>timestamp</i> column in the table. Such a condition, which generates SQL Server error message 532, indicates that another user updated the row since it was selected for browsing. Design your application to include the logic for handling an update failure.</p>
<p>
<b>SqlQual$</b> can construct WHERE clauses only for browsable tables. You can use <b>SqlTabBrowse%</b> to determine whether a table can be browsed. <b>SqlQual$</b> is usually called after <b>SqlNextRow%</b>. </p>
<h4>Example</h4>
<p>
The following code fragment illustrates one approach to updating a table in a multiuser environment using browse mode. The application attempts to update a record specified by the user. If the update fails, the application assumes that someone else already updated the same row and changed its timestamp. To handle this situation, the application simply repeats the process, retrieving the changed row for the user to examine and edit and allowing the user to decide whether to overwrite the change. A complete application examines the messages from the server to determine why the update failed.</p>
<pre>DO
   'Retrieve the employee record from the database. 
   'Assuming that "empid" is a unique index, the query 
   'will return only one row.
   cmd$ = "SELECT * FROM employees WHERE empid ="
   cmd$ = cmd$  STR$(EmployeeId%)  " FOR BROWSE"
   Result% = SqlCmd%(Sqlconn%, cmd$)
   Result% = SqlExec%(Sqlconn%)
   Result% = SqlResults%(Sqlconn%)
   Result% = SqlNextRow%(Sqlconn%)

   'Assign returned data to variables.
   Name$ = SqlData$(Sqlconn%, 2)
   Salary# = VAL(SqlData$(Sqlconn%, 3))

   'Let user edit data.
   PRINT "Name: "; Name$
   PRINT "Salary: "; Salary#
   INPUT "New salary"; Salary#

'Get a WHERE clause and update the database. Sqlconn%
'is the connection used to query the database, while
'UpdSqlconn% is the connection used to update it.
Qual$ = SqlQual$(Sqlconn%, -1, "employees")
Result% = SqlNextRow%(Sqlconn%)
cmd$ = "UPDATE employees SET salary ="
cmd$ = cmd$  STR$(Salary#)  " "  Qual$
Result% = SqlCmd%(UpdSqlconn%, cmd$)
Result% = SqlExec%(UpdSqlconn%)

'If the update failed, try again.
LOOP WHILE SqlResults%(UpdSqlconn%) = FAIL 
OR Result% = FAIL 
</pre>
<p>
<b>Output</b>:</p>
<pre>Name: Charles Dickens
Salary: 76543.21
New salary? 80000.00
</pre>
<h4>See Also</h4>
<p>
<a href="pdvb08_3ghh.htm"><b>SqlColBrowse%</b></a>, <a href="pdvb08_3kfo.htm"><b>SqlColSource$</b></a>, <a href="pdvb08_4w51.htm"><b>SqlTabBrowse%</b></a>, <a href="pdvb08_9q2d.htm"><b>SqlTabCount%</b></a>, <a href="pdvb08_9fsk.htm"><b>SqlTabName$</b></a>, <a href="pdvb08_5038.htm"><b>SqlTabSource$</b></a>, <a href="pdvb08_6omt.htm"><b>SqlTsNewLen%</b></a>, <a href="pdvb08_2piw.htm"><b>SqlTsNewVal$</b></a>, <a href="pdvb08_4bed.htm"><b>SqlTsPut%</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

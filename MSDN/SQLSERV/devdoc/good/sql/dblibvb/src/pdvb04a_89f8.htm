<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlData$</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqldata.24"></a>SqlData$</h1>
<p>
Returns a string containing data in a result column.</p>
<h4>Syntax</h4>
<p>
<b>SqlData$ ( </b><i>sqlconn%</i><b>,</b> <i>column%</i><b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i></dt>
<dd>
Is a SQL Server connection. The value of <i>sqlconn%</i> is returned by <b>SqlOpen%</b>.</dd>
<dt>
<i>column%</i> </dt>
<dd>
Is the number of the result column. The first column is number 1.
</dd>
</dl>
<h4>Returns</h4>
<p>
A string containing the data in a result column. For the SQL Server datatypes<i> binary</i>, <i>varbinary</i>, and <i>image</i>, <b>SqlData$</b> returns a string of binary data, with one character in the string per byte of data in the result column. For all other datatypes, <b>SqlData$</b> returns a string of readable characters. When there is no such column or when the data is NULL, an empty string is returned. To make sure that the data really is NULL, always check for a return of 0 by using <b>SqlDatLen&amp;</b>. </p>
<h4>Remarks</h4>
<p>
Use <b>SqlDatLen&amp;</b> to get the length of the data for variable-length datatypes. For numeric datatypes, use the Visual Basic <b>LEN</b> function to determine the length of the string returned by <b>SqlData$</b>. </p>
<p>
To convert the data from a string to a different datatype, use <b>SqlColType%</b> to get the datatype of the data, then use Visual Basic functions to convert to Visual Basic datatypes. Some helpful Visual Basic conversion functions are shown in the following table. For more information, see your documentation for Visual Basic. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%>Visual Basic <br>
function</th>
<th align=left width=71%><br>
Description</th>
</tr>
<tr valign=top>
<td width=29%></td>
<td width=71%></td>
</tr>
<tr valign=top>
<td width=29%>CDBL</td>
<td width=71%>Converts a numeric expression to a double-precision value. </td>
</tr>
<tr valign=top>
<td width=29%>CLNG</td>
<td width=71%>Converts a numeric expression to a long integer. </td>
</tr>
<tr valign=top>
<td width=29%>VAL</td>
<td width=71%>Converts a string representation of a value to a numeric expression. </td>
</tr>
</table><br>
<h4>Example</h4>
<pre>'Put the statement into the command buffer.
Result% = SqlCmd%(Sqlconn%, "SELECT id FROM sysobjects")

'Send the statement to SQL Server and start execution.
Result% = SqlExec%(Sqlconn%)

'Process the statement results.
Result% = SqlResults%(Sqlconn%)

'Retrieve and print the data in each row.
RowNum% = 0
DO UNTIL SqlNextRow%(Sqlconn%) = NOMOREROWS
   RowNum% = RowNum%  1
   PRINT "Row"; RowNum%;" object id is ";
   PRINT SqlData$(Sqlconn%, 1)
LOOP
</pre>
<h4>See Also</h4>
<p>
<a href="pdvb04a_48mt.htm"><b>SqlColLen%</b></a>, <a href="pdvb04a_84l0.htm"><b>SqlColName$</b></a>, <a href="pdvb04a_4i7p.htm"><b>SqlColType%</b></a>, <a href="pdvb04a_8l9y.htm"><b>SqlDatLen&amp;</b></a>, <a href="pdvb04b_529h.htm"><b>SqlNumCols%</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

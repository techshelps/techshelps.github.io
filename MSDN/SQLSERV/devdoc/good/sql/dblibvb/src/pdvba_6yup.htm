<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Appendix A   DB-Library for Visual Basic Options</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_db_library_for_visual_basic_options_pdvba_1"></a>DB-Library for Visual Basic Options</h1>
<p>
The DB-Library for Visual Basic options described in this appendix give you additional control over SQL Server queries. Design your applications to set and clear these options using <b>SqlSetOpt%</b> and <b>SqlClrOpt%</b>. Although the Transact-SQL SET statement can set and clear some DB-Library for Visual Basic options, <b>SqlSetOpt%</b> and <b>SqlClrOpt%</b> provide a uniform interface for all the options. They also mean that your application can use <b>SqlIsOpt%</b> to check the status of an option. </p>
<p>
Some of the DB-Library for Visual Basic options take parameters, and in these cases the parameters are included in the descriptions below. However, each time you use <b>SqlSetOpt%</b>, <b>SqlClrOpt%</b>, or <b>SqlIsOpt%</b>, you must include both an option and a parameter, whether the option takes a parameter or not.</p>
<p>
For example, the sqlrowcount option requires a parameter to set the number of rows to be counted. To set row count to 100, use the following statement:</p>
<pre>SqlSetOpt%(SqlConn%, SQLROWCOUNT, "100")</pre>
<p>
The sqlarithabort option does not require a parameter. To set this option, use an empty string as a parameter, as shown in the following statement:</p>
<pre>SqlSetOpt%(SqlConn%, SQLARITHABORT, "")</pre>
<p>
For more information on <b>SqlSetOpt%, SqlClrOpt%</b>, and <b>SqlIsOpt%</b>, see <a href="pdvb06_8852.htm">Stored Procedure Functions</a>. 
<dl>
<dt>
sqlarithabort</dt>
<dd>
Terminates a query when an overflow or divide-by-zero error occurs during query execution. If sqlarithabort is not set, SQL Server substitutes null values and returns a warning message after the query has been executed. The default setting is off.</dd>
<dt>
sqlarithignore</dt>
<dd>
Substitutes null values when an overflow or divide-by-zero error occurs during a query. No warning message is returned. If sqlarithignore is not set, SQL Server substitutes null values and returns a warning message after the query has been executed. The default setting is off.</dd>
<dt>
sqlbuffer</dt>
<dd>
Buffers result rows. sqlbuffer is required when you use <b>SqlGetRow%</b>. You can only set this option using DB-Library for Visual Basic; it cannot be set with the Transact-SQL SET statement. When you set sqlbuffer, supply a parameter for the number of rows you want buffered. The default setting is 0 (no row buffering).

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%>Parameter</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%>Less than 0</td>
<td width=75%>Buffer set to 100 rows.</td>
</tr>
<tr valign=top>
<td width=25%>0</td>
<td width=75%>No result rows buffered.</td>
</tr>
<tr valign=top>
<td width=25%>1</td>
<td width=75%>Not allowed.</td>
</tr>
<tr valign=top>
<td width=25%>2 - 32,767</td>
<td width=75%>The number of rows to buffer.</td>
</tr>
</table><br>


<p>
For more information about row buffering, see <b>SqlNextRow%</b>, <b>SqlGetRow%</b>, and <b>SqlClrBuf</b> in <a href="pdvb06_8852.htm">Stored Procedure Functions</a>. 
</dd>
<dt>
SQLCLIENTCURSORS</dt>
<dd>
Forces the use of client cursors. When this option is set, every cursor opened with <b>SqlCursorOpen%</b> will be a client cursor. Even when connected to SQL Server 6.0, server cursors will not be used.
<p>
This option can be enabled for a client running Windows by placing the line <b>UseClientCursors=ON</b> in the <b>[SQLSERVER]</b> section of WIN.INI.
</dd>
<dt>
sqlnoautofree</dt>
<dd>
Causes the command buffer to clear only with a call to <b>SqlFreeBuf</b>. When sqlnoautofree is not set, the first call to <b>SqlCmd%</b> after a call to <b>SqlExec%</b> or <b>SqlSend%</b>, automatically clears the command buffer before new text is entered. The default setting is off.</dd>
<dt>
sqlnocount</dt>
<dd>
Stops returning information about the number of rows affected by each Transact-SQL statement. The default setting is off.</dd>
<dt>
sqlnoexec</dt>
<dd>
Processes a query through the compile step but does not execute it. You can use this option with sqlshowplan. Once sqlnoexec is set, no subsequent statements are executed until sqlnoexec is turned off. The default setting is off.</dd>
<dt>
sqloffset</dt>
<dd>
Indicates where SQL Server should return offsets to certain constructs in the query. This option takes a parameter that specifies the particular construct. Valid values of this parameter include:

<table cellspacing=4 cols=3>
<tr valign=top>
<td width=30%></td>
<td width=35%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=30%><i>select</i></td>
<td width=35%><i>order</i></td>
<td width=35%><i>procedure</i></td>
</tr>
<tr valign=top>
<td width=30%><i>from</i></td>
<td width=35%><i>compute</i></td>
<td width=35%><i>execute</i></td>
</tr>
<tr valign=top>
<td width=30%><i>table</i></td>
<td width=35%><i>statement</i></td>
<td width=35%><i>param</i></td>
</tr>
</table><br>



<p>
<b>Note</b>  The value <i>param</i> refers to parameters of stored procedures.


<p>
For the internal types that correspond to these offset values, see the <b>SqlGetOff%</b> function description. Offsets are returned only if the batch contains no syntax errors.
</dd>
<dt>
sqlparseonly</dt>
<dd>
Checks the syntax of a query and returns error messages to the workstation. The default setting is off.</dd>
<dt>
sqlrowcount</dt>
<dd>
Specifies a maximum number of regular rows to be returned for SELECT statements. sqlrowcount does not limit the number of compute rows returned.
<p>
When you set sqlrowcount, supply a parameter for the number of rows you want returned. The default setting is 0, which returns all rows determined by SELECT statements. 


<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%>Parameter</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%>0</td>
<td width=75%>Returns all rows generated by a SELECT statement.</td>
</tr>
<tr valign=top>
<td width=25%>1 - 2,147,483,647</td>
<td width=75%>Defines the maximum number of regular rows to be returned for SELECT statements.</td>
</tr>
</table><br>


<p>
This option is different from the other options in that you can turn it off by using <b>SqlClrOpt%</b> or by using <b>SqlSetOpt%</b> to set it to 0.
</dd>
<dt>
sqlshowplan</dt>
<dd>
Generates a description of the processing plan after compilation and continues executing the query. The default setting is off.</dd>
<dt>
sqlstat</dt>
<dd>
Returns performance statistics (CPU time, elapsed time, I/O) to the workstation after each query. DB-Library for Visual Basic receives these statistics in the form of informational messages, and applications can access them through a user-defined message handler.
<p>
When you set sqlstat, supply a parameter for the type of performance statistics you want. The default setting is off.


<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%>Parameter</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%>IO</td>
<td width=75%>Returns statistics about SQL Server's internal I/O: the number of scans, the number of logical reads (pages accessed), and the number of physical reads (disk accesses) for each table referenced in the query. Also displays the number of pages written for each statement.</td>
</tr>
<tr valign=top>
<td width=25%>TIME</td>
<td width=75%>Returns information about SQL Server parsing, compilation, and execution times. Times are given in milliseconds.</td>
</tr>
</table><br>

</dd>
<dt>
sqlstorprocid</dt>
<dd>
Sends the stored procedure ID to the workstation before sending rows generated by the stored procedure.</dd>
<dt>
sqltextlimit</dt>
<dd>
Causes DB-Library for Visual Basic to limit the size of returned text or image values. When setting this option, supply a parameter that is the length, in bytes, of the longest text or image value your application can handle. DB-Library for Visual Basic reads but ignores any part of a text or image value that goes over this limit. In the case of very large text values, it may take some time for the entire text value to be returned over the network. To keep SQL Server from sending this extra text in the first place, use the sqltextsize option. The default setting is 4096. 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%>Parameter</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%>0 - 32,768</td>
<td width=75%>Size, in bytes, of the longest text or image value that your application can handle.</td>
</tr>
</table><br>

</dd>
<dt>
sqltextsize</dt>
<dd>
Limits the size of text or image values SQL Server returns. When setting this option, supply a parameter that is the length, in bytes, of the longest text or image value that SQL Server returns. In applications that allow users to make ad hoc queries, the user can override this option with the Transact-SQL SET TEXTSIZE statement. To set a text limit that the user cannot override, use the sqltextlimit option instead. The default setting is 4096. 

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%>Parameter</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%>0 - 32,768</td>
<td width=75%>Size, in bytes, of the longest text or image value that SQL Server returns.</td>
</tr>
</table><br>



</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

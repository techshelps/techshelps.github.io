<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Browse Mode</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_browse_mode_pdvb02"></a>Browse Mode</h2>
<p>
With DB-Library for Visual Basic browse mode, your application can browse through database rows and update their values one row at a time. Each row must be transferred from the database into program variables before it can be browsed and updated. As a result, browsing involves several steps.</p>
<p>
Because a row being browsed is not the actual row residing in the database but a copy residing in program variables, changes to the values in those variables must be transferred reliably to ensure that the original database row is kept up to date. In particular in multiuser situations, updates made to the database by one user must not incorrectly overwrite updates made by another user. Regulating updating is especially important because an application typically selects a number of rows from the database at once, but users browse and update the database one row at a time. A timestamp column in browsable database tables provides the information necessary to regulate multiuser updating.</p>
<p>
Browse-mode functions also allow an application to handle ad hoc queries. Several browse-mode functions return information that an application can use to examine the structure of a complicated ad hoc query.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To implement the DB-Library for Visual Basic browse mode in an application</h5>
<ol>
<li>
Execute a SELECT statement, generating result rows containing result columns. The SELECT statement must include the for browse option.</li>
<li>
Copy the values in the result column into the program variables one row at a time.</li>
<li>
If appropriate, change the variables' values in response to user input.</li>
<li>
If appropriate, execute an UPDATE statement that updates the database row corresponding to the current result row. To handle multiuser updates, the WHERE clause of the UPDATE statement must refer to the timestamp column. You can obtain a WHERE clause with the <b>SqlQual$</b> function.</li>
<li>
Repeat steps 2 through 4 for each result row.</li>
</ol>
<p>
To use browse mode, the following conditions must be true:
<ul>
<li>
The SELECT statement must end with the keywords FOR BROWSE.</li>
<li>
The table(s) to be updated must have a unique index and timestamp column.</li>
<li>
The result columns used in the updates must derive from browsable tables and cannot be the result of SQL expressions, such as MAX(<i>colname</i>). In other words, there must be a valid correspondence between the result column and the database column to be updated.</li>
</ul>
<p>
In addition to these conditions, the browse mode always requires two connections ¾ one for selecting the data and another for performing updates based on the selected data.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlRpcParam%</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqlrpcparam.25"></a>SqlRpcParam%</h1>
<p>
Adds a parameter to a stored procedure or a remote stored procedure.</p>
<h4>Syntax</h4>
<p>
<b>SqlRpcParam% ( </b><i>sqlconn%</i><b>,</b> <i>paramname$</i><b>,</b> <i>status%</i><b>,</b> <i>type%</i><b>,</b> <i>maxlen&amp;</i><b>,</b> <br>
<i>datalen&amp;</i><b>,</b> <i>value$</i><b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i></dt>
<dd>
Is a SQL Server connection. The value of <i>sqlconn%</i> is returned by <b>SqlOpen%</b>.</dd>
<dt>
<i>paramname$</i></dt>
<dd>
Is the name of the parameter to be invoked. This name must begin with the at symbol (@), as do all parameter names within stored procedures. As in the Transact-SQL EXECUTE statement, the name is optional. If the name is not used, it should be specified as an empty string. In that case, the order of the <b>SqlRpcParam%</b> calls determines the parameter to which each call refers.</dd>
<dt>
<i>status%</i></dt>
<dd>
Is a 1-byte bitmask of parameter options for stored procedures. The only option currently available is SQLRPCRETURN, which signifies that an application designates this parameter as a return parameter. Specify 0 to indicate no options.</dd>
<dt>
<i>type%</i></dt>
<dd>
Is the datatype of the <i>value$</i> parameter (such as SQLINT1, SQLCHAR, and so on).</dd>
<dt>
<i>maxlen&amp;</i></dt>
<dd>
For variable-length return parameters (when <i>type%</i> is SQLCHAR, SQLBINARY, SQLTEXT, or SQLIMAGE), the maximum desired byte length for the <i>value$</i> parameter returned from a stored procedure.
<p>
Set <i>maxlen&amp;</i> to -1 in any of these cases:

<ul>
<li>
For fixed-length return parameters (such as when <i>type%</i> is SQLINT4).</li>
<li>
To pass a NULL fixed-length parameter value (such as when <i>type%</i> is SQLINT4) to the stored procedure.</li>
<li>
For parameters that are not designated as return parameters.</li>
</ul>

<p>
Set maxlen to 0 to pass a NULL variable-length parameter value (when <i>type%</i> is SQLCHAR, SQLBINARY, SQLTEXT, or SQLIMAGE) to the stored procedure.
</dd>
<dt>
<i>datalen&amp;</i></dt>
<dd>
For variable-length return parameters (when <i>type%</i> is SQLCHAR, SQLBINARY, SQLTEXT, or SQLIMAGE), <i>datalen&amp;</i> is the actual byte length of the <i>value$</i> parameter sent to the stored procedure. The byte length should <i>not</i> count any null terminator.
<p>
Set <i>datalen&amp;</i> to - 1 for fixed-length parameters (such as when <i>type%</i> is SQLINT4).

<p>
Set <i>datalen&amp;</i> to 0 to pass a NULL parameter value (fixed or variable length) to the stored procedure.
</dd>
<dt>
<i>value$</i></dt>
<dd>
Is a string containing the stored procedure parameter itself. DB-Library converts the string to its native datatype. You must use binary strings for binary parameters (when <i>type%</i> is SQLBINARY or SQLIMAGE.)
<p>
The following table summarizes the required <i>maxlen&amp;</i> and <i>datalen&amp;</i> values for each type of parameter.

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=35%></th>
<th align=left width=35%></th>
</tr>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=35%></th>
<th align=left width=35%></th>
</tr>
<tr valign=top>
<th align=left width=30%>Parameter</th>
<th align=left width=35%><i>maxlen&amp;</i></th>
<th align=left width=35%><i>datalen&amp;</i></th>
</tr>
<tr valign=top>
<td width=30%></td>
<td width=35%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=30%>Fixed-length</td>
<td width=35%> - 1</td>
<td width=35%>- 1</td>
</tr>
<tr valign=top>
<td width=30%>Variable-length</td>
<td width=35%>Maximum desired length of return value</td>
<td width=35%>Length of input value</td>
</tr>
<tr valign=top>
<td width=30%>Fixed-length NULL</td>
<td width=35%>- 1</td>
<td width=35%>0</td>
</tr>
<tr valign=top>
<td width=30%>Variable-length NULL</td>
<td width=35%>0</td>
<td width=35%>0</td>
</tr>
</table><br>


<p>
When specifying a NULL parameter, the actual contents of <i>value$</i> is not used, and a NULL parameter is added to the stored procedure.

</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<h4>Remarks</h4>
<p>
After initializing a stored procedure using <b>SqlRpcInit%</b>, you must call <b>SqlRpcParam%</b> once for each parameter of the stored procedure that does not have a default value. You specify default values for stored procedure parameters in the CREATE PROCEDURE statement. For more information about executing stored procedures using DB-Library functions, see "<b>SqlRpcInit%</b>."</p>
<h4>See Also</h4>
<p>
<a href="pdvb04b_6awl.htm"><b>SqlNextRow%</b></a>, <a href="pdvb04c_6n1x.htm"><b>SqlOk%</b></a>, <a href="pdvb04c_07jp.htm"><b>SqlResults%</b></a>, <a href="pdvb06_86no.htm"><b>SqlRetData$</b></a>, <a href="pdvb06_9m0m.htm"><b>SqlRetStatus&amp;</b></a>, <a href="pdvb06_44z9.htm"><b>SqlRpcInit%</b></a>, <a href="pdvb06_4v5h.htm"><b>SqlRpcSend%</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

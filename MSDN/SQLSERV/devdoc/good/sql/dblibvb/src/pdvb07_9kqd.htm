<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SqlWriteText%</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_sqlwritetext.25"></a>SqlWriteText%</h1>
<p>
Sends a text or image value to SQL Server.</p>
<h4>Syntax</h4>
<p>
<b>SqlWriteText% ( </b><i>sqlconn%</i><b>,</b> <i>objname$</i><b>,</b> <i>textptr$</i><b>,</b> <i>textptrlen%</i><b>,</b> <i>timestamp$</i><b>,</b> <br>
<i>log%</i><b>,</b> <i>size&amp;</i><b>,</b> <i>text$</i><b> )</b></p>
<p>
where
<dl>
<dt>
<i>sqlconn%</i> ( ) </dt>
<dd>
Is a SQL Server connection. The value of <i>sqlconn%</i> is returned by <b>SqlOpen%</b>.</dd>
<dt>
<i>objname$</i></dt>
<dd>
Is the database table name and column name. The table name and the column name are separated by a period.</dd>
<dt>
<i>textptr$</i> ( ) </dt>
<dd>
Is the text or image value to be modified. This identifier can be obtained by calling <b>SqlTxPtr$</b>.</dd>
<dt>
<i>textptrlen%</i></dt>
<dd>
Is a parameter. This parameter is included for future compatibility. For now, its value must be the constant SQLTXPLEN.</dd>
<dt>
<i>timestamp$</i> ( ) </dt>
<dd>
Is the text timestamp for the text or image value to be modified. This identifier can be obtained by calling <b>SqlTxTimestamp$</b>. The value changes whenever the text or image value itself is changed. This string cannot be empty.</dd>
<dt>
<i>log%</i></dt>
<dd>
Is a Boolean value that specifies whether this <b>SqlWriteText%</b> operation should be recorded in the transaction log.</dd>
<dt>
<i>size&amp;</i></dt>
<dd>
Is the total size, in bytes, of the text or image value to be written.</dd>
<dt>
<i>text$</i></dt>
<dd>
Is a string containing the text or image to be written. If this string is empty, DB-Library for Visual Basic expects the application to call <b>SqlMoreText%</b> one or more times until all <i>size&amp;</i> bytes of data have been sent to SQL Server. No single data block can be larger than 64K.
</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED (1) or FAIL (0).</p>
<h4>Remarks</h4>
<p>
<b>SqlWriteText%</b> is used to update text and image values, allowing an application to send long values to SQL Server without having to copy them into a Transact-SQL UPDATE statement. In addition, <b>SqlWriteText%</b> gives an application access to the text timestamp mechanism, which can be used to ensure that two competing users do not inadvertently wipe out each other's modifications in the database.</p>
<p>
<b>SqlWriteText%</b> succeeds only if its <i>timestamp$</i> parameter, usually obtained when the column's value is originally retrieved, matches the text column's timestamp in the database. If a match occurs, <b>SqlWriteText%</b> updates the text column and at the same time updates the column's timestamp. This has the effect of governing updates by competing applications ¾ an application's <b>SqlWriteText%</b> call fails if a second application has updated the text column between the time the first application retrieved the column and the time it made its <b>SqlWriteText%</b> call.</p>
<p>
<b>SqlWriteText%</b> is similar to a Transact-SQL WRITETEXT statement. However, calling <b>SqlWriteText%</b> is usually more efficient than sending a WRITETEXT statement through the command buffer. (For information about WRITETEXT, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.)</p>
<p>
<b>SqlWriteText%</b> can be invoked with or without logging in, according to the value of the <i>log%</i> parameter. To use <b>SqlWriteText%</b> with logging turned off, the SQL Server option <b>select into/bulkcopy</b> must be set to TRUE by executing the following system procedure:</p>
<pre>sp_dboption 'mbsql', 'select into/bulkcopy', 'true'</pre>
<p>
For more information about SQL Server options, see the <i>Microsoft SQL Server Transact-SQL Reference</i> and the <i>Microsoft SQL Server Administrator's Companion</i>.</p>
<p>
<b>SqlWriteText%</b>, used in conjunction with <b>SqlMoreText%</b>, also enables an application to send a large text or image value to SQL Server in the form of a number of smaller chunks. This is particularly useful with operating systems that are unable to allocate extremely long data buffers.</p>
<p>
When <b>SqlWriteText%</b> is used with <b>SqlMoreText%</b>, it locks the specified database text column, and the lock is not released until the final <b>SqlMoreText%</b> has sent its data. This ensures that a second application does not read or update the text column in the middle of the first application's update.</p>
<p>
If the <i>text$</i> string is not an empty string, <b>SqlWriteText%</b> executes the data transfer from start to finish, including any necessary calls to <b>SqlOk%</b> and <b>SqlResults%</b>. To send a text or image value in chunks rather than sending the whole value at once, set the <i>text$</i> parameter to an empty string. <b>SqlWriteText%</b> returns control to the application immediately after notifying SQL Server that a text transfer is about to begin. The actual text is sent to SQL Server with <b>SqlMoreText%</b>, which can be called multiple times, once for each chunk.</p>
<h4>Examples</h4>
<p>
The following code fragment uses <b>SqlWriteText%</b>:</p>
<pre><b>A.</b>    'Retrieve a record from the "abstract" text column.
    cmd$ = "SELECT abstract FROM articles"
    cmd$ = cmd$  " WHERE article_id = 1000"
    Result% = SqlCmd%(Sqlconn%, cmd$)
    Result% = SqlExec%(Sqlconn%)
    Result% = SqlResults%(Sqlconn%)
    Result% = SqlNextRow%(Sqlconn%)
    'Update the text column.
    Abstract$ = "A brand new text value."
    Result% = SqlWriteText%(UpdSqlconn%, "articles.abstract",_
       SqlTxPtr$(Sqlconn%, 1), SQLTXPLEN,_ 
       SqlTxTimestamp$(Sqlconn%, 1), 1,_ 
       LEN(Abstract$), Abstract$)
</pre>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;The following code fragment uses <b>SqlWriteText%</b> with <b>SqlMoreText%. </b>&nbsp;&nbsp;&nbsp;&nbsp;Notice the required calls to <b>SqlOk%</b> and <b>SqlResults%</b> between the call to <b>&nbsp;&nbsp;&nbsp;&nbsp;SqlWriteText%</b> and the first call to <b>SqlMoreText%</b> and after the final call to <b>&nbsp;&nbsp;&nbsp;&nbsp;SqlMoreText%.</b></p>
<pre><b>B.</b>    'Retrieve a record from the "abstract" text column.
    cmd$ = "SELECT abstract FROM articles"
    cmd$ = cmd$  " WHERE article_id = 1000"
    Result% = SqlCmd%(Sqlconn%, cmd$)
    Result% = SqlExec%(Sqlconn%)
    Result% = SqlResults%(Sqlconn%)

    Result% = SqlNextRow%(Sqlconn%)

    'Update the text column.
    Abstr1$ = "A brand new text value."
    Abstr2$ = " This text value contains two sentences."
    Result% = SqlWriteText%(UpdSqlconn%, "articles.abstract",_
       SqlTxPtr$(Sqlconn%, 1), SQLTXPLEN,_ 
       SqlTxTimestamp$(Sqlconn%, 1), 1,_ 
       LEN(Abstr1$  Abstr2$), "")
    Result% = SqlOk%(UpdSqlconn%)
    Result% = SqlResults%(UpdSqlconn%)

    'Send the update value in chunks.
    Result% = SqlMoreText%(UpdSqlconn%, LEN(Abstr1$), Abstr1$)
    Result% = SqlMoreText%(UpdSqlconn%, LEN(Abstr2$), Abstr2$)
    Result% = SqlOk%(UpdSqlconn%)
    Result% = SqlResults%(UpdSqlconn%)
</pre>
<p>
These examples specify datatypes for Windows.</p>
<h4>See Also</h4>
<p>
<a href="pdvb07_1ph1.htm"><b>SqlMoreText%</b></a>, <a href="pdvb07_7vhw.htm"><b>SqlTxPtr$</b></a>, <a href="pdvb07_65o4.htm"><b>SqlTxTimeStamp$</b></a>, <a href="pdvb07_6g1g.htm"><b>SqlTxTsNewVal$</b></a>, <a href="pdvb07_319x.htm"><b>SqlTxTsPut%</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

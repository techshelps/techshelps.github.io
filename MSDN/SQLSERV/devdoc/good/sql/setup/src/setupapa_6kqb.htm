<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performance Comparisons</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_performance_comparisons"></a>Performance Comparisons</h2>
<p>
Binary order is the fastest sort order option.</p>
<p>
The following table shows the approximate decrease in sort order performance, relative to Binary order, for each sort order. The operation evaluated involved string comparisons on character fields.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=71%></th>
<th align=left width=29%></th>
</tr>
<tr valign=top>
<th align=left width=71%>Sort order</th>
<th align=left width=29%>Percent slower</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=71%>Dictionary order, case-sensitive</td>
<td width=29%>20%</td>
</tr>
<tr valign=top>
<td width=71%>Dictionary order, case-insensitive</td>
<td width=29%>20%</td>
</tr>
<tr valign=top>
<td width=71%>Dictionary order, case-insensitive, uppercase preference</td>
<td width=29%>20%</td>
</tr>
<tr valign=top>
<td width=71%>Dictionary order, case-insensitive, accent-insensitive</td>
<td width=29%>35%</td>
</tr>
</table><br>
<p>
The percentages in the table are approximate. The overall performance difference between sort orders varies significantly depending on the types of operations and the type of data used. Sorting operations that depend on string comparisons on character fields (for example GROUP BY and LIKE statements) take more time to process than other sorting operations and have the greatest effect on sorting speed.</p>
<p>
With certain queries, if there is a nonunique clustered index on a character value, sort order options that define uppercase preference require the optimizer to perform a sort. Using a sort order with no uppercase preference, such as Dictionary order, case-insensitive (no uppercase preference), greatly improves performance because no sorting is necessary. Choosing Dictionary order, case-insensitive (no uppercase preference), causes an uppercase <i>A</i> and a lowercase <i>a</i> to be treated the same in an ORDER BY statement.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

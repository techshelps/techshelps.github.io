<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Running the CHKUPG.EXE Utility</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_running_the_chkupg_exe_utility"></a>Running the CHKUPG.EXE Utility</h2>
<p>
Before you begin an upgrade you should run the CHKUPG.EXE utility, which checks that database status is acceptable, that all necessary comments exist in the <i>syscomments </i>system table, and that there are no keyword conflicts. CHKUPG.EXE writes this information to an output file. Review this report and take any action the report indicates is necessary to prepare the existing installation for an upgrade.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To check a SQL Server 4.2<i>x</i> installation prior to upgrading</h5>
<ul>
<li>
From the directory containing the software compatible with your hardware platform's processor architecture (Intel, Alpha AXP, or MIPS), run the CHKUPG.EXE utility. The utility has this syntax:<p>
<b>chkupg </b>[<b>/Usa]</b> [<b>/P</b><i>password</i>] [<b>/S</b><i>servername</i>] <b>/o</b><i>filename</i>
<p>
where
<dl>
<dt>
<i>password</i> </dt>
<dd>
Is the system administrator's password. If no <i>password</i> is provided, NULL is assumed. </dd>
<dt>
<i>servername</i> </dt>
<dd>
Is the name of the server being upgraded. If no <i>servername</i> is provided, the local server is assumed. </dd>
<dt>
<i>filename</i> </dt>
<dd>
Is the name of the output file. It must be a fully qualified filename, and include the drive and directory on the server where the output file will be placed.
</dd>
</dl>
</li>
</ul>
<p>
For example:</p>
<pre>chkupg /Usa /P /S /oc:\sql\install\myreport.out</pre>
<p>
After running CHKUPG.EXE, read its output file using any text editor.</p>
<p>
If the CHKUPG.EXE output file indicates that the database is read only, run <b>sp_dboption</b> and set the <b>read only</b> option to <b>FALSE</b>. For information on <b>sp_dboption</b>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<p>
If the CHKUPG.EXE output file indicates that some text in the <i>syscomments </i>system table is missing or altered, drop and re-create the related objects, and then run CHKUPG.EXE again to verify that the necessary text exists in <i>syscomments</i>. (You cannot upgrade all objects from SQL Server 4.2<i>x</i> systems to SQL Server 6.0 if you have deleted data from the <i>text</i> column in the <i>syscomments</i> table. The <b>setup</b> program uses the comments in <i>syscomments</i> to upgrade database objects.)</p>
<p>
CHKUPG.EXE reports both on keywords implemented in SQL Server 6.0 and on words that are reserved for future use but are not yet implemented. Reserved words are compatible with SQL Server 6.0 but can be expected to cause future conflicts. Reserved words are indicated in the output file by this notation:</p>
<pre>[SQL-92 keyword]</pre>
<p>
For more information, see <a href="setup04_022b.htm">Keywords</a> and <a href="setup04_8sqb.htm">Reserved Words</a>, later in this chapter.</p>
<p>
If the CHKUPG.EXE output file indicates conflicts with SQL Server 6.0 keywords, change the conflicting database or database object name and alter the applications that access those objects so that they use the new names. Keyword conflicts can be resolved either before or after the server is upgraded. Keyword conflicts will not cause an upgrade to fail. </p>
<p>
CHKUPG.EXE only checks and reports on the current SQL Server 4.2<i>x</i> system. It does not correct incompatibilities, change read-only databases, add comments to <i>syscomments</i>, or take any other corrective action.</p>
<p>
When you run the <b>setup</b> program and perform an upgrade from SQL Server 4.2<i>x</i> to SQL Server 6.0, one of the first things <b>setup</b> does is automatically run CHKUPG.EXE and inform you if a problem exists. Although <b>setup</b> runs CHKUPG.EXE automatically, it is still recommended that you first run CHKUPG.EXE separately.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

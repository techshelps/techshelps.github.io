<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Upgrading SQL Server</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_upgrading_sql_server"></a>Upgrading SQL Server</h1>
<p>
You can upgrade a Microsoft SQL Server 4.2<i>x</i> server on a Windows NT-based computer to SQL Server 6.0 by running the <b>setup</b> program and choosing the upgrade option. You can upgrade a Microsoft SQL Server 4.2 for OS/2® operating system server to Microsoft SQL Server 6.0 by first upgrading the operating system to Windows NT Server 3.5 or later (version 3.51 is recommended) and then running the SQL Server <b>setup</b> program to upgrade the SQL Server files. Upgrades from SQL Server 1.<i>x</i> are no longer supported.</p>
<p>
Because of improvements to the system (such as new system tables and datatypes), an upgrade to SQL Server 6.0 is a one-way operation and cannot be reversed. Once a version 4.2<i>x</i> database has been upgraded to version 6.0, it cannot be used again with SQL Server 4.2<i>x</i>.</p>
<p>
Before upgrading a Microsoft SQL Server 4.2<i>x</i> server, you should run the CHKUPG.EXE utility, which checks that database status is acceptable, that all necessary comments exist in the <i>syscomments </i>system table, and that there are no keyword conflicts.</p>
<p>
Most applications written to work with SQL Server 4.2<i>x</i> should work unmodified with SQL Server 6.0. However, because new keywords have been added that may conflict with existing applications, this will not be true in all cases. For a list of new keywords, see <a href="setup04_022b.htm">Keywords</a>, later in this chapter.<i> </i>Corrections to the behavior of subqueries may also affect applications that depended on the old behavior.</p>
<p>
<b>Note</b>  For information about language, statement, query, and other compatibility issues between SQL Server 6.0 and SQL Server 4.2<i>x</i> databases, see the compatibility information provided in the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<p>
The <b>setup</b> program cannot upgrade from one processor version to another (for example, from Intel- to MIPS-based computers). Also, it is not possible to dump a database in one processor architecture and load it in another. Even if the operation appears to succeed, serious problems will subsequently result. For example, you cannot dump a database from an Alpha AXP-based computer and load it into an Intel-based computer. Nor should you copy MASTER.DAT from an Intel-based computer to a MIPS- or Alpha AXP-based computer and run <b>setup</b> to upgrade it. However, you can use SQL Transfer Manager to simply transfer data from one architecture to another.</p>
<p>
<b>Note</b>  SQL Server 6.0 detects and prevents attempts to load a dump from a different SQL Server 6.0 processor architecture, but it cannot prevent an attempt to load a dump from a different SQL Server 4.2<i>x</i> processor architecture, because that information is not recorded by a SQL Server 4.2<i>x</i>-level database dump.</p>
<p>
For more information, choose one of the following topics:</p>
<p>
<a href="setup04_6t0n.htm">Before Upgrading</a></p>
<p>
<a href="setup04_8fp5.htm">Running the CHKUPG.EXE Utility</a></p>
<p>
<a href="setup04_0zg8.htm">Upgrading from SQL Server 4.2<i>x</i></a></p>
<p>
<a href="setup04_1wdh.htm">Upgrading from an Earlier SQL Server 6.0 Release</a></p>
<p>
<a href="setup04_81f6.htm">Upgrading from SQL Server for OS/2</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

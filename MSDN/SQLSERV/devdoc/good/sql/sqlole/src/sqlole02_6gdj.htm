<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Handling</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="error_handling"></a>Error Handling</h1>
<p>
When a SQL-DMO operation fails, it returns an error number and description. This error can be one of the following:
<ul>
<li>
A SQL Server error from the <i>sysmessages</i> table.</li>
<li>
A DB-Library error. Error numbers range from SQLOLE_E_DBLIBFIRSTERROR through SQLOLE_E_DBLIBLASTERROR.</li>
<li>
A SQL-DMO error. Error numbers range from SQLOLE_E_FIRSTERROR through SQLOLE_E_LASTERROR.</li>
</ul>
<p>
Each SQL-DMO error number has a SQLOLE_E_<i>ERROR</i> error constant. Use these SQL-DMO error constants (instead of hard-coded error numbers) in your program.</p>
<p>
SQL-DMO errors are grouped into categories. Each category has a SQLOLE_ECAT_<i>CATEGORY</i> category constant. To get the category constant, binary And the SQL-DMO error number with SQLOLE_ECAT_MASK.
<ul>
<li>
The binary And operator in Visual Basic is <b>And</b>.</li>
<li>
The binary And operator in C++ is <b>&amp;</b>.</li>
</ul>
<p>
The following table describes each error category:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%></th>
<th align=left width=48%></th>
</tr>
<tr valign=top>
<th align=left width=52%>SQL-DMO Error Category</th>
<th align=left width=48%>Description</th>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=56%></td>
<td width=44%></td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_INVALIDCONTEXT</td>
<td width=44%>The requested operation is not valid in the current context.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_INVALIDOBJECT</td>
<td width=44%>The SQL-DMO object is no longer valid.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_<br>
&nbsp;&nbsp;&nbsp;&nbsp;INVALIDOBJECTDEFINITION</td>
<td width=44%>The attempt to add a new SQL-DMO object to a collection failed because the properties of the new object were set incorrectly or incompletely.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_INVALIDPARAMETER</td>
<td width=44%>An invalid parameter was passed to a method or property. </td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_INVALIDPLATFORM</td>
<td width=44%>The client or SQL Server platform does not support the requested operation. The version of SQL Server is not supported, the SQL-DMO stored procedures are not properly installed, or the client platform is not supported.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_ITEMNOTFOUND</td>
<td width=44%>The object name passed to a collection was not found, or the ordinal value passed to a collection was out of range.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_UNPRIVILEGEDLOGIN</td>
<td width=44%>The current login ID does not have sufficient privilege to perform the requested operation.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_EXECUTION</td>
<td width=44%>An error occurred when executing a Transact-SQL query.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_CONNECTION</td>
<td width=44%>The connection to SQL Server was broken and cannot be restored.</td>
</tr>
<tr valign=top>
<td width=56%>SQLOLE_ECAT_RESOURCE</td>
<td width=44%>The client or SQL Server does not have sufficient resources to perform the requested operation.</td>
</tr>
</table><br>
<p class=indent1>
</p>
<h5>Visual Basic</h5>
<p>
By default, any SQL-DMO run-time error that occurs is fatal. This will stop execution of your Visual Basic program and display an error message. To handle SQL-DMO run-time errors in your program, you must use an <b>On Error</b> statement.
<ul>
<li>
Use an <b>On Error Resume Next</b> statement to continue program execution at the statement immediately following the statement where the error occurred.</li>
<li>
Use an <b>On Error GoTo </b><i>HandlerLabel</i> to branch program execution to the <i>HandlerLabel</i> label, making the error handler active.</li>
</ul>
<p>
<b>Vtable-binding</b></p>
<p>
If your version of Visual Basic supports early, vtable-binding, then it supports the Visual Basic Err object, which is used to return SQL-DMO run-time error information to the program. The Err object includes properties that can be used as shown in the following table:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%></th>
<th align=left width=65%></th>
</tr>
<tr valign=top>
<th align=left width=35%>Use</th>
<th align=left width=65%>To Get</th>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=35%></td>
<td width=65%></td>
</tr>
<tr valign=top>
<td width=35%>Err.Number - vbObjectError</td>
<td width=65%>SQL-DMO error number</td>
</tr>
<tr valign=top>
<td width=35%>Err.Description</td>
<td width=65%>SQL-DMO error description</td>
</tr>
<tr valign=top>
<td width=35%>Err.Source</td>
<td width=65%>SQL-DMO component name</td>
</tr>
</table><br>
<p class=indent1>
</p>
<p>
Note that you must subtract the Visual Basic constant <b>vbObjectError</b> from the Err.Number property to get the SQL-DMO error number.</p>
<p>
For example:</p>
<pre>On Error Resume Next
oSQLServer.Connect "myserver", "mylogin", "mypassword"
If Err.Number &lt;&gt; 0 Then
    Debug.Print Err.Source &amp; " Error " &amp; _
        Err.Number - vbObjectError &amp; ": " &amp; _
        Err.Description
End If</pre>
<p>
<b>DispID-binding, late-binding</b></p>
<p>
If your version of Visual Basic supports dispID-binding or late-binding, then it supports the <b>Err</b> and <b>Error</b> functions, which are used to return SQL-DMO run-time error information to the program. The <b>Err</b> function returns the SQL-DMO error number, and the <b>Error</b> function returns the description of the SQL-DMO error.</p>
<p>
For example:</p>
<pre>On Error Resume Next
oSQLServer.Connect "myserver", "mylogin", "mypassword"
If Err &lt;&gt; 0 Then
    Debug.Print "SQL-DMO Error " &amp; Err &amp; ": " &amp; Error(Err)
End If</pre>
<h5>C++</h5>
<p>
You should use the OLE macros SUCCEEDED(<i>hr</i>) and FAILED(<i>hr</i>) with the HRESULT <i>hr</i> returned by a SQL-DMO function to determine if that SQL-DMO function was successful.
<ul>
<li>
SUCCEEDED(<i>hr</i>) will return TRUE if the HRESULT indicates that the SQL-DMO function succeeded.</li>
<li>
FAILED(<i>hr</i>) will return TRUE if the HRESULT indicates that the SQL-DMO function failed.</li>
</ul>
<p>
For example, to use the FAILED macro:</p>
<pre>if FAILED (hr = pSQLServer-&gt;Connect (TEXT("myserver"),
    TEXT("mylogin"), TEXT("mypassword")))
{
    // Connection to SQL Server failed
}
else
{
    // Established connection to SQL Server
    // Use pSQLServer object
}</pre>
<p>
To use the SUCCEEDED macro:</p>
<pre>if SUCCEEDED (hr = pSQLServer-&gt;Connect (TEXT("myserver"),
    TEXT("mylogin"), TEXT("mypassword")))
{
    // Established connection to SQL Server
    // Use pSQLServer object
}
else
{
    // Connection to SQL Server failed
}</pre>
<p>
Use the OLE macros HRESULT_CODE(<i>hr</i>) or SCODE_CODE(<i>hr</i>) to get the SQL-DMO error number from the HRESULT <i>hr</i> returned by a SQL-DMO function.</p>
<p>
Use the SQL-DMO macro SQLOLE_ECAT(<i>hr</i>) to get the SQL-DMO error category from the HRESULT <i>hr</i> returned by a SQL-DMO function that failed.</p>
<p>
SQL-DMO supports the OLE <b>IErrorInfo</b> interface for passing rich error information back to the program. Use the following steps to get rich SQL-DMO error information:
<ol>
<li>
Call the OLE <b>GetErrorInfo</b> function to get an OLE ErrorInfo object (a pointer to the <b>IErrorInfo</b> interface).</li>
<li>
Use the ErrorInfo functions, including <b>GetDescription</b> and <b>GetSource</b>, to get rich SQL-DMO error information.</li>
<li>
Release the ErrorInfo object.</li>
</ol>
<p>
For example:</p>
<pre>if FAILED(hr = pSQLServer-&gt;Connect (TEXT("myserver"),
    TEXT("mylogin"), TEXT("mypassword")))
{
    // Connection to SQL Server failed
    // Get OLE ErrorInfo object
    LPERRORINFO pErrorInfo = NULL;
    GetErrorInfo (0, &amp;pErrorInfo);
    // Get SQL-DMO error information
    BSTR strDescription, strSource;
    pErrorInfo-&gt;GetDescription (&amp;strDescription);
    pErrorInfo-&gt;GetSource (&amp;strSource);
    // Display SQL-DMO error information
    // The SQL-DMO error code is HRESULT_CODE(hr)
    pErrorInfo-&gt;Release ();
    SysFreeString (strDescription);
    SysFreeString (strSource);
}</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

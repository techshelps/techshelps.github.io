<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Including SQL-DMO</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="including_sql.2d.dmo"></a>Including SQL-DMO</h1>
<p>
The first step to programming with SQL-DMO objects is to include the appropriate type library or header files in your project.</p>
<p>
The complete SQL-DMO type library is contained in the SQLOLE32.TLB file, located in the C:\SQL60\DLL directory by default. The type library contains information about all SQL-DMO objects, properties and methods, and is usually used by OLE Automation controllers like Visual Basic.</p>
<h5>Visual Basic</h5>
<p>
To give Visual Basic access to the SQL-DMO object definitions, you should include the SQL-DMO type library in your Visual Basic project or module. Including the type library is required if you want to declare a Visual Basic object variable as a SQL-DMO object type. Including the SQL-DMO type library is not necessary if you want to declare a Visual Basic object variable as a generic <b>Object</b> type.</p>
<p>
To include the SQL-DMO type library in your project, you usually follow these steps. From the Tools menu, choose References. The References dialog appears. Choose the Browse button, and include the SQLOLE32.TLB file. This requires that the Visual Basic environment or module code editor be active and running. For example, to create a new Visual Basic module using Excel 5.0 for Windows NT, from the Insert menu, choose Macro and then Module.</p>
<h5>C++</h5>
<p>
The SQL-DMO objects include both ANSI and Unicode custom interfaces. When using ANSI interfaces, all SQL-DMO strings are ANSI strings with one byte per character. When using the Unicode interfaces, all SQL-DMO strings are Unicode strings with two bytes per character. All SQL-DMO strings use the SQLOLE_BSTR string datatype.</p>
<p>
The ANSI custom interfaces and ANSI SQLOLE_BSTR strings are used by default. If you want to use the Unicode custom interfaces and Unicode SQLOLE_BSTR strings, you must define UNICODE and _UNICODE before including all the header files. For example:</p>
<pre>#define UNICODE
#define _UNICODE</pre>
<p>
Use the <b>TEXT("</b><i>str</i><b>")</b> macro around string values. By default these are ANSI <b>"</b><i>str</i><b>"</b> strings. When UNICODE and _UNICODE are defined these are Unicode <b>L"</b><i>str</i><b>"</b> strings.</p>
<p>
In 32-bit OLE, all BSTR strings are Unicode strings.</p>
<p>
To give your C++ program access to the SQL-DMO object definitions, you must include the SQLOLEID.H and SQLOLE.H header files, in addition to the Windows and OLE header files. The SQL-DMO header files are located in the C:\SQL60\SQLOLE\INCLUDE directory by default. The Include setting of the Visual C++ project or the INCLUDE environment variable should point to the directory that contains these files.</p>
<p>
You must include the following header files in this order:
<ol>
<li>
WINDOWS.H</li>
<li>
INITGUID.H (This file must be included once and only once)</li>
<li>
SQLOLEID.H</li>
<li>
SQLOLE.H</li>
</ol>
<ul>
<li>
For example:</li>
</ul>
<pre>#include &lt;windows.h&gt;
#include &lt;initguid.h&gt;
#include &lt;sqloleid.h&gt;
#include &lt;sqlole.h&gt;</pre>
<p>
SQL-DMO does not have a link library. However, to build your SQL-DMO application, you must link to the following OLE libraries:
<ul>
<li>
OLE32.LIB</li>
<li>
OLEAUT32.LIB</li>
<li>
UUID.LIB</li>
</ul>
<p>
The Library setting of the Visual C++ project or the LIB environment variable should point to the directory that contains these files.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a SQLServer Object</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="creating_a_sqlserver_object"></a>Creating a SQLServer Object</h1>
<p>
The core of SQL-DMO is the SQLServer object. For each SQL Server you want to connect to, you create an empty SQLServer object, then you connect the SQLServer object to a running SQL Server.</p>
<p>
The methods described here are used to create all types of creatable SQL-DMO objects, including a SQLServer object. When a new SQL-DMO object is created, the object is empty, and its properties are initialized to default values.</p>
<h5>Visual Basic</h5>
<p>
There are three methods for creating SQL-DMO objects in Visual Basic. All three methods involve using the <b>Dim</b> statement to declare an object variable of a certain type.</p>
<p>
The SQL-DMO application name is SQLOLE. It is recommended that you use the application name SQLOLE when creating and declaring SQL-DMO objects. This avoids ambiguity if another OLE components includes objects with common names, such as Table or Database.</p>
<p>
<b>Specific SQL-DMO object type</b></p>
<p>
The preferred method (if your version of Visual Basic supports it) is to use a <b>Dim</b> statement to declare an object variable of a specific SQL-DMO object type. This method requires that the SQL-DMO type library be included in your Visual Basic project. To actually create a new instance of a SQL-DMO object, you can use the <b>New</b> keyword in your <b>Dim</b> statement (if your version of Visual Basic supports it), or you can use <b>CreateObject</b> function.</p>
<p>
For example, to create a new SQLServer object using the <b>New</b> keyword:</p>
<pre>Dim oSQLServer As New SQLOLE.SQLServer</pre>
<p>
For example, to declare and create a new SQLServer object using the <b>CreateObject</b> function:</p>
<pre>Dim oSQLServer As SQLOLE.SQLServer
Set oSQLServer = CreateObject ("SQLOLE.SQLServer")</pre>
<p>
Some versions of Visual Basic use virtual function table binding (vtable-binding), or early-binding. The SQL-DMO custom interfaces are used directly (not through the OLE <b>IDispatch</b> interface), resulting in the best performance.</p>
<p>
Some versions of Visual Basic use a form of late-binding called dispatch ID binding (dispID-binding) using OLE <b>IDispatch</b>. The <b>IDispatch::Invoke</b> function is used with the dispIDs included in the SQL-DMO type library. This method will give your application slower performance than using the <b>New</b> keyword, but faster performance than using the <b>Object</b> type.</p>
<p>
<b>Generic Object type</b></p>
<p>
The other method (supported by all versions of Visual Basic) is to use a <b>Dim</b> statement to declare a new variable of the generic <b>Object</b> type, then use the <b>CreateObject</b> function to create a new instance of a SQL-DMO object and assign it to the object variable. This method does not require the SQL-DMO type library.</p>
<p>
For example, to declare and create a new SQLServer object using the generic <b>Object</b> type:</p>
<pre>Dim oSQLServer As Object
Set oSQLServer = CreateObject ("SQLOLE.SQLServer")</pre>
<p>
This method is called late-binding using OLE <b>IDispatch</b>. The <b>IDispatch::GetIDsOfNames</b> function is used to get the dispIDs, which are passed to the <b>IDispatch::Invoke</b> function. This method will give your application slower performance than declaring an object variable of a specific SQL-DMO object type.</p>
<h5>C++</h5>
<p>
There is only one method to create a SQL-DMO object in C++. Declare an object variable of the appropriate SQL-DMO "pointer to an object" type. For an object named <i>Object</i>, the SQL-DMO object type is LPSQLOLE<i>OBJECT</i>. Then use the OLE <b>CoCreateInstance</b> function to create a new instance of a SQL-DMO object. You pass the following parameters to <b>CoCreateInstance</b>:
<ol>
<li>
Class ID of a SQL-DMO object</li>
<li>
NULL</li>
<li>
CLSCTX_INPROC_SERVER</li>
<li>
Interface ID of a SQL-DMO object</li>
<li>
Address of the SQL-DMO "pointer to an object" variable (use the address of <b>&amp;</b> operator)</li>
</ol>
<p>
For example, to create a new SQLServer object:</p>
<pre>LPSQLOLESERVER pSQLServer = NULL;
hr = CoCreateInstance (CLSID_SQLOLEServer,
    NULL,
    CLSCTX_INPROC_SERVER,
    IID_ISQLOLEServer,
    (LPVOID*)&amp;pSQLServer);</pre>
<p>
<b>Note</b>  A multithreaded program must serialize all access to SQL-DMO to avoid reentrancy.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Datatypes</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="datatypes_sqlole02"></a>Datatypes</h1>
<p>
The following table describes the SQL-DMO abstract datatypes and includes the Hungarian notation prefixes used in the SQL-DMO documentation:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=18%></th>
<th align=left width=16%></th>
<th align=left width=66%></th>
</tr>
<tr valign=top>
<th align=left width=18%>SQL-DMO Datatype</th>
<th align=left width=16%><br>
Prefix</th>
<th align=left width=66%><br>
Description</th>
</tr>
</table><br>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=18%></td>
<td width=16%></td>
<td width=66%></td>
</tr>
<tr valign=top>
<td width=18%>String</td>
<td width=16%>str</td>
<td width=66%>A generic string. For example, "Felis catus".</td>
</tr>
<tr valign=top>
<td width=18%>MultiString</td>
<td width=16%>mstr</td>
<td width=66%>A list of one or more strings delimited by semicolons. For example, "Korat; Maine Coon; Russian Blue".</td>
</tr>
<tr valign=top>
<td width=18%>Identifier</td>
<td width=16%>id</td>
<td width=66%>A string that must conform to the rules for Transact-SQL identifiers. For example "pubs".</td>
</tr>
<tr valign=top>
<td width=18%>MultiIdentifier</td>
<td width=16%>mid</td>
<td width=66%>A list of one or more identifiers delimited by semicolons. For example, "authors; titles; pub_info".</td>
</tr>
<tr valign=top>
<td width=18%>Long</td>
<td width=16%>l</td>
<td width=66%>A 4-byte integer.</td>
</tr>
<tr valign=top>
<td width=18%>Integer</td>
<td width=16%>i</td>
<td width=66%>A 2-byte integer.</td>
</tr>
<tr valign=top>
<td width=18%>Boolean</td>
<td width=16%>b</td>
<td width=66%>A True/False value. It can be True or False in Visual Basic. It can be TRUE or FALSE in C++.</td>
</tr>
<tr valign=top>
<td width=18%>Float</td>
<td width=16%>f</td>
<td width=66%>A 4-byte floating point number. For example, 4.24.</td>
</tr>
<tr valign=top>
<td width=18%>Double</td>
<td width=16%>d</td>
<td width=66%>An 8-byte floating point number. For example, 9.39.</td>
</tr>
<tr valign=top>
<td width=18%>Date</td>
<td width=16%>dat</td>
<td width=66%>In Visual Basic, an 8-byte Date value.<p>
In C++, a 4-byte integer that has the form YYYYMMDD, where YYYY is the year, MM is the number of the month, and DD is the number of the day. For example, March 22, 1995 is 19950322.</p>
</td>
</tr>
</table><br>
<p class=indent1>
</p>
<p>
SQL-DMO also uses enumerated datatypes. Each enumeration has a datatype of SQLOLE_<i>INFORMATION</i>_TYPE, and contains a series of SQLOLE<i>Info</i>_<i>Value</i> constants. The Hungarian notation prefix <b>t</b> is used for enumerated datatypes.</p>
<h5>Visual Basic</h5>
<p>
The following table shows the Visual Basic datatype for each SQL-DMO abstract datatype:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%>SQL-DMO Datatype</th>
<th align=left width=52%>Visual Basic Datatype</th>
</tr>
</table><br>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%>String</td>
<td width=52%>String</td>
</tr>
<tr valign=top>
<td width=48%>MultiString</td>
<td width=52%>String</td>
</tr>
<tr valign=top>
<td width=48%>Identifier</td>
<td width=52%>String</td>
</tr>
<tr valign=top>
<td width=48%>MultiIdentifier</td>
<td width=52%>String</td>
</tr>
<tr valign=top>
<td width=48%>Long</td>
<td width=52%>Long</td>
</tr>
<tr valign=top>
<td width=48%>Integer</td>
<td width=52%>Integer</td>
</tr>
<tr valign=top>
<td width=48%>Boolean</td>
<td width=52%>Boolean</td>
</tr>
<tr valign=top>
<td width=48%>Float</td>
<td width=52%>Single</td>
</tr>
<tr valign=top>
<td width=48%>Double</td>
<td width=52%>Double</td>
</tr>
<tr valign=top>
<td width=48%>Date</td>
<td width=52%>Date</td>
</tr>
</table><br>
<p class=indent1>
</p>
<h5>C++</h5>
<p>
Because all SQL-DMO functions return an HRESULT, you must pass the address of a program variable (using the address of <b>&amp;</b> operator) for any return parameter (such as a <b>Get</b><i>Property</i> function) so SQL-DMO can write to your program variable. This is the pointer datatype. For an input parameter (such as a <b>Set</b><i>Property</i> function), SQL-DMO only reads the program variable. This is the constant datatype.</p>
<p>
The following table shows the C++ pointer datatype and constant datatype for each SQL-DMO abstract datatype:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=21%></th>
<th align=left width=37%></th>
<th align=left width=42%></th>
</tr>
<tr valign=top>
<th align=left width=21%>SQL-DMO Datatype</th>
<th align=left width=37%><br>
C++ Pointer Datatype</th>
<th align=left width=42%><br>
C++ Constant Datatype</th>
</tr>
</table><br>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=21%></td>
<td width=37%></td>
<td width=42%></td>
</tr>
<tr valign=top>
<td width=21%>String</td>
<td width=37%>SQLOLE_LPBSTR</td>
<td width=42%>SQLOLE_LPCSTR</td>
</tr>
<tr valign=top>
<td width=21%>MultiString</td>
<td width=37%>SQLOLE_LPBSTR</td>
<td width=42%>SQLOLE_LPCSTR</td>
</tr>
<tr valign=top>
<td width=21%>Identifier</td>
<td width=37%>SQLOLE_LPBSTR</td>
<td width=42%>SQLOLE_LPCSTR</td>
</tr>
<tr valign=top>
<td width=21%>MultiIdentifier</td>
<td width=37%>SQLOLE_LPBSTR</td>
<td width=42%>SQLOLE_LPCSTR</td>
</tr>
<tr valign=top>
<td width=21%>Long</td>
<td width=37%>LPLONG</td>
<td width=42%>long</td>
</tr>
<tr valign=top>
<td width=21%>Integer</td>
<td width=37%>LPINT</td>
<td width=42%>int</td>
</tr>
<tr valign=top>
<td width=21%>Boolean</td>
<td width=37%>LPBOOL</td>
<td width=42%>BOOL</td>
</tr>
<tr valign=top>
<td width=21%>Float</td>
<td width=37%>LPFLOAT</td>
<td width=42%>float</td>
</tr>
<tr valign=top>
<td width=21%>Double</td>
<td width=37%>LPDOUBLE</td>
<td width=42%>double</td>
</tr>
<tr valign=top>
<td width=21%>Date</td>
<td width=37%>LPLONG</td>
<td width=42%>long</td>
</tr>
</table><br>
<p class=indent1>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

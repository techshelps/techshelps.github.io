<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transact-SQL Highlights</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_transact.2d.sql_highlights"></a>Transact-SQL Highlights</h1>
<p>
SQL Server 6.5 adds new Transact-SQL capabilities and provides some significant enhancements. SQL Server 6.5 features comply with ANSI SQL-92 standards and with the Federal Information Processing Standards (FIPS 127-2) as established by NIST. The new CUBE and ROLLUP operators are useful in writing data warehousing and decision support system applications. Transact-SQL changes for SQL Server 6.5 extend the ability to temporarily disable constraints during replication, thereby eliminating the effort required to drop and then add constraints as with earlier versions of SQL Server; provide the ability to dump and load a single table; provide the ability to use Data Definition Language (DDL) statements within transactions; and enable row-level locking during INSERT operations. Other Transact-SQL enhancements include:</p>

<h5><a name="_bound_connections_setupintro"></a>Bound Connections</h5>
<p>
Bound connections are enabled for SQL Server 6.5. With bound connections, two or more discrete connections can share the same transaction lock space and the same transaction, allowing them to work on the same data without lock conflicts. This allows extended stored procedures to call back into the database within the lock context of the parent transaction.</p>

<h5><a name="_insert......execute"></a>INSERT...EXECUTE</h5>
<p>
The INSERT INTO statement now supports the EXECute <i>stored_procedure</i> clause in place of insert variables or constants, simplifying the way that the return values from stored procedures are handled. The results set from executing the stored procedure is inserted into a table or variable as specified in the INSERT statement.</p>

<h5><a name="_cube_and_rollup_operators"></a>CUBE and ROLLUP Operators</h5>
<p>
The CUBE and ROLLUP operators of the SELECT statement deliver aggregates and super-aggregates for elements within a GROUP BY statement. </p>
<p>
The CUBE operator delivers a multi-dimensional data results set instead of the typical zero- or one-dimensional data results set and is useful for cross-referencing information without having to write additional procedures. The CUBE operator creates all combinations of groupings from the list of columns in the GROUP BY statement. You can use the CUBE operator to produce results sets that you can use to enhance charts, graphs, and summary tables. </p>
<p>
The ROLLUP operator produces cumulative aggregates, such as running sums or running averages, that can be incorporated into reports, charts, and graphs. The ROLLUP operator differs from the CUBE operator in that it creates groupings by moving in only one direction, from right to left, along the list of columns in the GROUP BY statement. It then applies the aggregate function to all but the rightmost column of these groupings. The ROLLUP operator is useful for extracting statistics and summary information from results sets.</p>

<h5><a name="_insert_row.2d.level_locking_.28.irl.29"></a>Insert Row-level Locking (IRL)</h5>
<p>
The lock manager has been enhanced to provide row-level locking (IRL) for most INSERT operations. IRL improves performance in situations where access contention and hotspots (areas of unusually high access) occur.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

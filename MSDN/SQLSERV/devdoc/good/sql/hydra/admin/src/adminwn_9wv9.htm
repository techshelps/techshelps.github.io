<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Task Scheduling Interface</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_task_scheduling_interface"></a>Task Scheduling Interface</h2>
<p>
SQL Enterprise Manager contains the following changes to the task scheduling interface:
<ul>
<li>
The Task Scheduling command on the Tools menu for SQL Server 6.0 is the Scheduled Tasks command on the Server menu for SQL Server 6.5.</li>
<li>
CmdExec tasks that are owned by users other than system administrators execute in the security context of a Windows NT user account that is called SQLExecutiveCmdExec. For more information, see <a href="adminwn_6up1.htm">SQLExecutiveCmdExec Account</a>. </li>
<li>
The Command value for Transact-SQL tasks supports multiple Transact-SQL statements and procedures. For example:<pre>sp_who 
go 
sp_help 
go
</pre>
</li>
<li>
A user can view tasks and task histories for only those tasks the user created and owns. However, the system administrator can view all tasks.</li>
<li>
Tasks now return actual error messages (if encountered). Also, the last 230 bytes (approximately) of any CmdExec task output is displayed as part of the message that is shown in the Task History dialog box.</li>
<li>
Scheduling support has been added for the following long-running operations: create database, expand database, create device, and expand device.</li>
<li>
The Task History log can be cleared from the Task Engine Options dialog box by using the Clear Task History Log button.</li>
<li>
The <b>sp_runtask</b> stored procedure has been added. With this stored procedure, a user can invoke a task from Transact-SQL. For more information about <b>sp_runtask</b>, see <a href="../../tsql/src/addnfeat_60fg.htm">What's New for Transact-SQL</a>. </li>
<li>
The number of history rows per task can now be limited by setting the Maximum Task History Rows per Task value in the Task Engine Options dialog box. Setting this value prevents a frequently occurring task from monopolizing the <i>msdb</i> database <i>syshistories</i> table.</li>
<li>
Task history can also be accessed by choosing the History button in the Edit Task dialog box.</li>
<li>
Tasks that are created to respond to alerts are supported by the following parameters, which can be set while creating a task.</li>
</ul>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%></th>
<th align=left width=68%></th>
</tr>
<tr valign=top>
<th align=left width=32%></th>
<th align=left width=68%></th>
</tr>
<tr valign=top>
<th align=left width=32%>Parameter</th>
<th align=left width=68%>Represents</th>
</tr>
<tr valign=top>
<td width=32%>[SVR]</td>
<td width=68%>Server name</td>
</tr>
<tr valign=top>
<td width=32%>[DBN]</td>
<td width=68%>Database name</td>
</tr>
<tr valign=top>
<td width=32%>[ERR]</td>
<td width=68%>Error number</td>
</tr>
<tr valign=top>
<td width=32%>[SEV]</td>
<td width=68%>Severity level</td>
</tr>
<tr valign=top>
<td width=32%>[MSG]</td>
<td width=68%>Message text</td>
</tr>
</table><br>
<p class=indent1>
For example, five servers forward their events to a master "alert management" server. Each event causes an alert to fire and the user has associated a task with each alert. In response to the five alerts, the master server will run a user-defined task for each alert. The task could be defined to log back into the forwarding server, to use the database that caused the initial alert, and to address the problem. To do this, define the task command as:</p>
<pre>isql /Usa /p /sairedale /daccounts /Q "sp_fixit"
<b><i>  </i></b></pre>
<p class=indent1>
For more information, see the <i>Microsoft SQL Server Administrator's Companion</i>.</p>
<p>
When using the task scheduling interface, note the following:
<ul>
<li>
Shell commands such as COPY and RENAME do not work as CmdExec tasks unless you carefully phrase the task. For example:<pre>cmd /C copy d:\out.txt d:\outmore.txt
<b><i>  </i></b></pre>
<p>
This is necessary because SQL Executive assumes the first space-delimited token of the command specifies an EXE or CMD module name.
</li>
<li>
Do not run programs that require user input as CmdExec tasks, because they run on a virtual desktop and cannot be seen.</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

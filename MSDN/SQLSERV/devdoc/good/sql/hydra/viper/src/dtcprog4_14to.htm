<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Development Using Transact-SQL</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_application_development_using_transact.2d.sql"></a>Application Development Using Transact-SQL</h1>
<p>
Applications that are written in Transact-SQL can use MS DTC transactions. Using MS DTC through Transact-SQL stored procedures is attractive for these reasons: 
<ul>
<li>
Application programming is easy because SQL Server's Transact SQL language provides simple interfaces for beginning, committing, and aborting distributed transactions. </li>
<li>
The cost of committing a transaction can be lower when SQL Server initiates and commits the transaction. When SQL Server initiates the transaction, the MS DTC transaction manager and SQL Server are on the same system. This reduces the cost of committing the transaction, because the transaction manager on the client application's system does not need to participate in the two-phase commit protocol. </li>
<li>
Setup and administration are easy because there is no need to install MS DTC on client machines. </li>
</ul>
<p>
Transact-SQL applications can initiate MS DTC transactions in two ways: They can explicitly initiate transactions by calling the Transact-SQL BEGIN DISTRIBUTED TRANSACTION statement, or they can rely on SQL Server to implicitly initiate MS DTC transactions when they are needed. Both of these techniques are illustrated in the examples that follow. </p>
<p>
When a Transact-SQL application uses MS DTC transactions, the application can call a remote stored procedure in another SQL Server under the protection of a single distributed transaction. SQL Server and MS DTC automatically propagate the MS DTC transaction from one SQL Server to the other. If the remote stored procedure calls other remote stored procedures in other SQL Servers, these SQL Servers will also participate in the transaction. Transaction propagation occurs regardless of whether the transaction was initiated explicitly or implicitly. </p>
<p>
If SQL Server and MS DTC encounter an error while propagating an MS DTC transaction from one system to another, the entire transaction is aborted. This might occur, for example, if the network connection between the two systems fails. </p>
<p>
SQL Server initiates and propagates MS DTC transactions for applications written in Transact-SQL. However, Transact-SQL applications cannot directly access MS DTC transaction objects. They cannot return MS DTC transaction objects to the client application that called them. They cannot propagate MS DTC transactions objects to extended stored procedures that they call. In short, MS DTC transactions initiated by SQL Server cannot be directly manipulated by the Transact-SQL application or exported outside of SQL Server by the Transact-SQL application.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

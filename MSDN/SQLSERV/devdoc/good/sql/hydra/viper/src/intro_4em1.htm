<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Concept Summary</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_concept_summary"></a>Concept Summary</h1>
<p>
Transactions are ACID (atomic, consistent, isolated, durable) modules of execution. They complement COM's program module structure. The Microsoft Distributed Transaction Coordinator (MS DTC) provides a <i>transaction manager</i> for each computer that manages transactions at that computer. Applications call the transaction manager to <i>begin</i> a transaction. <b>BeginTransaction</b> returns a <i>transaction object</i>. The application includes the transaction object with requests to <i>resource managers</i>. When a resource manager first begins working on a transaction, it <i>enlists</i> in the transaction. When the application has made a consistent transformation of the state, it asks the transaction manager to <i>commit</i> the transaction with the <b>Commit </b>transaction method. If the application cannot complete the transaction, the application program <i>aborts</i> it by using the <b>Abort </b>transaction method. If the application fails or a participating resource manager fails, then MS DTC aborts the transaction. </p>
<p>
MS DTC uses a <i>two-phase commit</i> algorithm in which (1) the transaction manager requests each enlisted resource manager to <i>prepare</i> to commit, and (2) if all successfully prepare, then the transaction manager broadcasts the commit decision. If any resource manager cannot prepare, the transaction manager broadcasts an abort decision to everyone involved in the transaction. While a resource manager is prepared, it is <i>in doubt</i> about whether the transaction committed or aborted. The transaction manager keeps a sequential <i>log</i> so that its commit or abort decisions will be durable. If a resource manager or transaction manager fails, they reconcile in-doubt transactions when they reconnect.</p>
<p>
For distributed transactions, each computer has a local transaction manager. When a transaction works at multiple computers, the transaction managers track <i>incoming</i> and <i>outgoing</i> transactions. Each transaction manager performs all the enlistment, prepare, commit, and abort calls for local resource managers (those on that computer). When committing a transaction distributed among several computers, the transaction manager sends prepare, commit, and abort messages to all its outgoing transaction managers. When a transaction manager is in doubt about a distributed transaction, the transaction manager queries the incoming transaction manager. The root transaction manager is never in doubt. If an in-doubt transaction persists for too long, the system operator can force the transaction to commit or abort. </p>
<p>&nbsp;</p></body>
</HTML>

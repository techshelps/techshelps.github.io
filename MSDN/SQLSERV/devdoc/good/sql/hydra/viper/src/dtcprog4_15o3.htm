<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Server Explicitly Initiated Transactions</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sql.a0.server_explicitly_initiated_transactions"></a>SQL Server Explicitly Initiated Transactions</h2>
<p>
A Transact-SQL application can explicitly initiate an MS DTC transaction by calling the Transact-SQL BEGIN DISTRIBUTED TRANSACTION statement. An explicitly initiated transaction works as follows: 
<ol>
<li>
When the application calls the Transact-SQL BEGIN DISTRIBUTED TRANSACTION statement, SQL Server calls the MS DTC <b>ITransactionDispenser::BeginTransaction</b> method and obtains a transaction object that represents the transaction. The call to BEGIN DISTRIBUTED TRANSACTION can include a transaction description. The transaction description is displayed by the MS DTC management interface in the MS DTC Transactions window. <p>
After obtaining the transaction object, SQL Server enlists in the transaction with its local MS DTC transaction manager. This permits SQL Server to participate in the two-phase commit protocol and to receive transaction commit or abort notifications from MS DTC. 
</li>
<li>
All database updates, inserts, and deletes that are performed by the application are performed within the MS DTC transaction. </li>
<li>
If the application calls a remote stored procedure in another SQL Server, the originating SQL Server propagates the MS DTC transaction with the call to the remote stored procedure, and the remote SQL Server also enlists in the transaction. All changes to both SQL Servers are protected by the MS DTC transaction. </li>
<li>
When the work of the transaction is complete, the application calls the Transact-SQL COMMIT TRANSACTION statement. In response to the COMMIT TRANSACTION call, SQL Server calls the MS DTC <b>ITransaction::Commit </b>method. MS DTC uses the two-phase commit protocol to coordinate commitment of the transaction. Alternatively, the application could call the Transact-SQL ROLLBACK TRANSACTION statement. In this case, SQL Server would call the MS DTC <b>ITransaction::Abort </b>method to undo the effects of the transaction from both SQL Servers. </li>
<li>
The application can then go on to perform more transactions. </li>
</ol>
<p>
A call to BEGIN DISTRIBUTED TRANSACTION affects subsequent calls to other transaction-related Transact-SQL statements. For more information, see the <a href="../../tsql/src/addnfeat_9ar2.htm">BEGIN DISTRIBUTED TRANSACTION statement</a> in <i>What's New in SQL Server 6.5</i>.  </p>
<p>
This example shows how an MS DTC transaction that is explicitly initiated can be used within a stored procedure to ensure that two SQL Server databases are updated consistently. The <b>change_addr </b>stored procedure initiates an MS DTC transaction, updates its local <i>pubs</i> database, calls the <b>update_addr </b>remote stored procedure to update the remote <i>pubs</i> database, and then commits the MS DTC transaction. </p>
<pre>/*******************************************************/
/* Using BEGIN DISTRIBUTED TRANSACTION to explicitly   */
/* initiate MS DTC transactions.                       */
/*******************************************************/
CREATE PROCEDURE change_addr(@au_id varchar(11),
                             @addr varchar(40), 
                             @toserver varchar(12) ) AS
declare @execstr varchar(200)
<b><i>  </i></b>
/* Start a Transaction */
BEGIN DISTRIBUTED TRANSACTION change_author_address
<b><i>  </i></b>
/* Change local author information */
update authors set address = @addr where au_id = @au_id 
<b><i>  </i></b>
/* Make a string with the remote server name and       */
/* stored procedure to execute                         */
select @execstr = @toserver + '.pubs..update_addr ' 
<b><i>  </i></b>
/* Update remote server. (Note that these servers must */
/* be added to each other by using sp_addserver and    */
/* sp_addremotelogin.)                                 */
exec @execstr @au_id, @addr
<b><i>  </i></b>
/* Commit the MS DTC transaction */
COMMIT TRANSACTION
<b><i>  </i></b></pre>
<p>
The following remote stored procedure is used to update the remote <i>pubs</i> database.</p>
<pre>/********************************************************/
/* Stored procedure to update an author's address on    */
/* the remote server.                                   */
/********************************************************/
CREATE PROCEDURE update_addr(@au_id varchar(11), 
                             @addr varchar(40)) AS
update authors set address = @addr where au_id = @au_id
<b><i>  </i></b></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

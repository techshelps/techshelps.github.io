<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manually Resolving Transactions</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_manually_resolving_transactions"></a>Manually Resolving Transactions</h2>
<p>
Occasionally, you may need to force a transaction to either commit or abort. This can be necessary, for example, when a communication line fails between two nodes on the network. Once a transaction has been manually committed or aborted, it is often necessary to also manually force a node to "forget" the transaction (that is, to delete the transaction from the local MS DTC log file).</p>
<p>
The following example illustrates a case in which a transaction is manually committed. In this example, the following conditions are assumed:
<ul>
<li>
The MS DTC on SQL Server node A is the commit coordinator.</li>
<li>
The lines of communication along which the two-phase commit protocol is conducted proceed sequentially from node A to node D.</li>
<li>
Phase 1 of the two-phase commit protocol has concluded, and the commit coordinator has written a COMMITTED record to its log.</li>
<li>
Communication fails between nodes B and C during Phase 2 of the two-phase commit protocol.</li>
<li>
The transaction is left in the following unresolved state:</li>
</ul>
<p>
<img src="images/box01.gif" border=0></p>
<p>
Because the line of communication between nodes A and B is still intact, B has also committed the transaction. Both nodes, however, must retain the COMMITTED records in their log files until nodes C and D confirm that they have also committed the transaction. To resolve the transaction (and thereby release the database locks on nodes C and D), the system administrator forces node C to commit the transaction.</p>
<p>
Because the line of communication between nodes C and D is still intact, the forced commit on node C allows the transaction to commit on node D. Node D can now release its database locks and forget the transaction. Once node D confirms to node C that it has committed and forgotten the transaction, node C can also release its locks and forget the transaction.</p>
<p>
<img src="images/box02.gif" border=0></p>
<p>
The transaction is now committed on all nodes; however, because node C cannot communicate its commit to node B, node B must continue to remember the transaction. Because node B has not forgotten the transaction, node A must also remember it. To complete the transaction, the system administrator forces node B to forget the transaction. Node B's forced forget allows node A to also forget the transaction. The two-phase commit protocol has been manually concluded, and the transaction is complete.</p>
<p>
<img src="images/box03.gif" border=0></p>
<p>
<b>Important</b>  Because of the outgoing-incoming communication pattern of the two-phase commit protocol, manual resolves should be done on nodes immediately adjacent to the break in communications. Therefore, in the example above, the forced commit occurs on node C (not D), and the forced forget occurs on node B (not A).</p>
<p>
You must manually resolve transactions that are either in the In Doubt or the Only Failed Remain to Notify state.</p>

<h5><a name="_in_doubt_state"></a>In Doubt State</h5>
<p>
The In Doubt state indicates that the transaction is on a child MS DTC and that the parent MS DTC is inaccessible. To resolve the in-doubt transaction, follow these steps:
<ol>
<li>
Use the MS DTC Transactions window to locate the transaction's immediate parent.</li>
<li>
Use the MS DTC Transactions window on the parent node to determine the outcome of the in-doubt transaction. <ul>
<li>
If the transaction is not shown in the MS DTC Transactions window, then it has been aborted, and you can manually abort the transaction on the child node.</li>
<li>
If the transaction is shown on the parent node as Only Failed Remain to Notify, then it has committed, and you can manually commit the transaction on the child node.</li>
<li>
If the transaction is shown as In Doubt on the parent node, use the MS DTC Transactions window on the parent node to locate the transaction's next immediate parent. Continue to follow the transaction up the commit tree until you locate the parent on which the transaction is either aborted (not shown) or committed (in the Only Failed Remain to Notify state). If the transaction is aborted on the parent node, manually force the transaction to abort on that node's immediate child. If the transaction is committed on the parent node, manually force the transaction to commit on the child node.</li>
</ul>
</li>
<li>
Once you have either manually committed or aborted the transaction on the child node, manually force the immediate parent to forget the transaction.</li>
</ol>

<h5><a name="_only_failed_remain_to_notify_state"></a>Only Failed Remain to Notify State</h5>
<p>
The Only Failed Remain to Notify state indicates that the transaction has committed, but some subordinate MS DTCs have not been notified. Resolving transactions that are in the Only Failed Remain to Notify state is difficult because the system provides no easy method of locating the subordinate MS DTCs that have not been notified of the transaction outcome. You must do this manually by examining each system and looking for in-doubt transactions with a global identifier that matches that of the Only Failed Remain to Notify transaction. Once you have located the subordinate MS DTCs, force the transaction to commit on each one. Once you have manually committed the transaction on all subordinate MS DTCs, return to the MS DTC that shows the transaction in the Only Failed Remain to Notify state, and force that MS DTC to forget the transaction.</p>
<p>
<b>Caution</b>  Do not manually forget a transaction until all subordinate MS DTCs have been notified of the transaction outcome.</p>
<h5><img src="../../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To manually resolve a transaction</h5>
<ol>
<li>
In the MS DTC Transactions window, right-click the icon of the transaction you want to resolve.<p>
This menu displays:
<p>
<img src="images/viewmenu.gif" border=0>
</li>
<li>
Choose Resolve.<p>
This menu displays:
<p>
<img src="images/resolve.gif" border=0>
</li>
<li>
Choose the command you want.</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

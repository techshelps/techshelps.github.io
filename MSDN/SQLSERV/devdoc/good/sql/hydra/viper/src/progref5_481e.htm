<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DtcGetTransactionManager</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dtcgettransactionmanager"></a>DtcGetTransactionManager</h2>
<p>
<b>DtcGetTransactionManager</b> is usually the first MS DTC procedure that you call when you use MS DTC. It establishes the initial connection and obtains an interface to MS DTC. It is not necessary to call <b>CoInitialize</b> or <b>OleInitialize </b>before calling <b>DtcGetTransactionManager</b>.</p>
<p>
Calls to <b>DtcGetTransactionManager</b> can specify a host name in the <i>pszHost </i>parameter. This allows transactions to be started and coordinated on a specific computer on the network. If the <i>pszHost</i> parameter is NULL, these rules determine where transactions are started and coordinated:
<ol>
<li>
If the application that calls <b>DtcGetTransactionManager</b> is located on a system on which the complete MS DTC service has been installed, then the local MS DTC starts and coordinates the transactions.</li>
<li>
If the application that calls <b>DtcGetTransactionManager</b> is located on a Windows 95 system or on a Windows NT system on which only the MS DTC client utilities were installed, then the default MS DTC starts and coordinates the transactions. The default MS DTC is specified by using the MS DTC Client Configuration program in Control Panel and is recorded in the system registry. For information about the MS DTC Client Configuration program, see <a href="install_7hbt.htm">Configuring the MS DTC Client Utility</a> in Chapter 2, "Setup." </li>
</ol>
<h4>Syntax</h4>
<p>
<b>HRESULT DtcGetTransactionManager (</b><br>
<b>LPTSTR</b> <i>pszHost</i><b>,</b><i><br>
</i><b>LPTSTR</b> <i>pszTmName</i><b>,</b><br>
<b>REFIID</b> <i>riid</i><b>,</b><br>
<b>DWORD</b> <i>dwReserved1</i><b>,</b><br>
<b>WORD</b> <i>wcbVarLenReserved2</i><b>,</b><br>
<b>void*</b> <i>pvVarDataReserved2</i><b>,</b><i><br>
</i><b>void**</b> <i>ppv </i><b>); </b></p>
<p>
where
<dl>
<dt>
<i>pszHost</i></dt>
<dd>
[in] Is the name of the host system that will serve as the transaction commit coordinator.</dd>
<dt>
<i>pszTmName</i></dt>
<dd>
[in] Is the string name of the transaction manager that will serve as the transaction commit coordinator. Must be NULL.</dd>
<dt>
<i>riid</i></dt>
<dd>
[in] Is the IID of the requested interface. Usually this is IID_ITransactionDispenser.</dd>
<dt>
<i>dwReserved1</i></dt>
<dd>
[in] Is reserved. Must be zero.</dd>
<dt>
<i>wcbVarLenReserved2</i></dt>
<dd>
[in] Is reserved. Must be zero.</dd>
<dt>
<i>pvVarDataReserved2</i></dt>
<dd>
[in] Is reserved. Must be NULL.</dd>
<dt>
<i>ppv</i></dt>
<dd>
[out] Is the pointer to the pointer to the requested interface.
</dd>
</dl>
<h4>Returns</h4>
<dl>
<dt>
S_OK</dt>
<dd>
Indicates succeeded.</dd>
<dt>
E_NOINTERFACE</dt>
<dd>
Indicates unable to provide the requested interface.</dd>
<dt>
E_UNEXPECTED</dt>
<dd>
Indicates an unexpected error has occurred.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
Indicates one or more arguments are invalid.</dd>
<dt>
E_FAIL</dt>
<dd>
Indicates failed.
</dd>
</dl>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

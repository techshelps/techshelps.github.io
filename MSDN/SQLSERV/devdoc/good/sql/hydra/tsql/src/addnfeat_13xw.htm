<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBCC DBREINDEX Statement</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_dbcc_dbreindex_addnfeat"></a>DBCC DBREINDEX Statement (version 6.5)</h2>
<p>
Rebuilds one or more indexes for a table. </p>
<p>
For additional syntax information for the <a href="../../../tsqlref/src/tsql06_0yus.htm">DBCC statement</a>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>
<h4>Syntax </h4>
<p>
DBCC DBREINDEX <b>(</b>[<b>'</b><i>database</i><b>.</b><i>owner</i><b>.</b><i>table_name</i><b>' </b>[<b>,</b> <i>index_name<br>
</i>[<b>,</b> <i>fillfactor </i>[<b>,</b> {SORTED_DATA | SORTED_DATA_REORG}]]]]<b>)</b><br>
[WITH NOINFOMSGS]</p>
<p>
where 
<dl>
<dt>
<i>database</i><b>.</b><i>owner</i><b>.</b><i>table_name</i></dt>
<dd>
Specifies the table for which to rebuild the index. If you specify the database name or owner the entire name must be enclosed in single quotation marks. If only the table name is specified then the quotes are optional.</dd>
<dt>
<i>index_name</i></dt>
<dd>
Specifies the name of the index to rebuild. Specifying <b>' '</b> or no <i>index_name</i> rebuilds all indexes. </dd>
<dt>
<i>fillfactor</i></dt>
<dd>
Specifies how full each index page is to be created. If 0 (zero) is entered for this parameter then the original fillfactor is used.</dd>
<dt>
SORTED_DATA | SORTED_DATA_REORG</dt>
<dd>
Specify that the sort performed when a clustered index is created can be eliminated because the data is sorted. Both options verify that the data has been sorted by checking each index value to determine whether it is a higher value than the previous one.
<p>
If any row fails this check, the DBCC DBREINDEX statement terminates. You can either fix the data or rerun the DBCC DBREINDEX statement without the SORTED_DATA or SORTED_DATA_REORG options.

<p>
When the data satisfies the checks, the SORTED_DATA option will always be faster than the SORTED_DATA_REORG option because the data is not copied and nonclustered indexes are not rebuilt.

<p>
SORTED_DATA_REORG differs from SORTED_DATA because it physically reorganizes the data. This option is useful when a FILLFACTOR is specified to compact or expand the pages on which a table is stored. The effects of these options change slightly if used with the ON <i>segment_name</i> option.

<p>
Reorganizing the data is a good idea when a table becomes fragmented. To determine whether or not a table is fragmented, use the DBCC SHOWCONTIG statement.

</dd>
</dl>
<p>
<b>Important</b>  If you specify one of the optional parameters (<i>ind_name</i>, <i>fillfactor</i>, or SORTED_DATA), you must specify all the parameters preceding it in the parameter list.</p>
<dl>
<dt>
WITH NO_INFOMSGS</dt>
<dd>
Prevents the printing of informational messages (severity 1 through 10).
</dd>
</dl>
<h4>Remarks</h4>
<p>
The DBCC DBREINDEX statement rebuilds an index for a table or all indexes defined for a table. By allowing an index to be rebuilt dynamically, indexes that enforce PRIMARY KEY or UNIQUE constraints can be rebuilt without having to drop and re-create constraints. This means that an index can be rebuilt without having to know the table's structure or constraints. This could occur after a bulk copy of data into the table. </p>
<p>
If the index is a clustered index, all nonclustered indexes will also be reindexed with the same supplied <i>fillfactor</i>. This statement is completely recoverable and atomic for all of the indexes being rebuilt. </p>
<p>
The DBCC DBREINDEX statement is not supported for system tables. </p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Rebuild an Index</h5>
<p>
This example rebuilds the <i>au_nmind </i>index with a fillfactor of 80 on the <i>authors</i> table in the <i>pubs</i> database.</p>
<pre>DBCC DBREINDEX ('pubs.dbo.authors', UPKCL_auidind, 80)
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Rebuild All Indexes</h5>
<p>
This example rebuilds all indexes on a table by using the existing <i>fillfactor</i> values and physically reorganizes the data.</p>
<pre>DBCC DBREINDEX (authors, '', 0, SORTED_DATA_REORG)
<b><i>  </i></b></pre>
<h4>Permission</h4>
<p>
Only the system administrator, database owner, and table owner can use this statement. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

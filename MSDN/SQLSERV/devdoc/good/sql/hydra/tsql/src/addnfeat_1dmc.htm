<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE SCHEMA Statement</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_create_schema_addnfeat"></a>CREATE SCHEMA Statement (version 6.5)</h2>
<p>
Creates a schema that can be thought of as a conceptual container object, which is the definition of the database without any data in it.  </p>
<h4>Syntax</h4>
<p>
CREATE SCHEMA<br>
&nbsp;&nbsp;&nbsp;&nbsp;[AUTHORIZATION <i>owner</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[<i>schema_element</i> [<i>schema_element</i>2[...<i>schema_elementn</i>]]]</p>
<p>
where 
<dl>
<dt>
AUTHORIZATION <i>owner</i></dt>
<dd>
Specifies the ID of the schema object owner. This identifier must begin with a letter and can have as many as 30 characters. Hyphens are not supported.</dd>
<dt>
<i>schema_element</i> = {<i>table_definition</i> | <i>view_definition</i> | <i>grant_statement</i>}</dt>
<dd>

<dl>
<dt>
<i>table_definition</i> = CREATE TABLE<i> </i>statement</dt>
<dd>
Creates a table within this defined schema. For more information about the <a href="../../../tsqlref/src/tsql04_5iwk.htm">CREATE TABLE statement</a>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </dd>
<dt>
<i>view_definition</i> = CREATE VIEW statement</dt>
<dd>
Creates a view for this schema. For more information about the <a href="../../../tsqlref/src/tsql05_4kfo.htm">CREATE VIEW statement</a>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </dd>
<dt>
<i>grant_statement</i> = GRANT statement</dt>
<dd>
Grants permissions to a user or group of users. For more information, see <a href="../../../tsqlref/src/tsql10_95ys.htm">GRANT statement</a> later in this document. 
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
Often database developers find it useful to keep a script or procedure, which creates the database schema for creating a copy of the database for testing or installation. Database administrators can set up a database and use the CREATE SCHEMA statement to set up all of the objects and permissions in a single batch.  </p>
<p>
CREATE SCHEMA provides a way to create database objects such as tables and views and to grant privileges on the objects, all within a single batch. The created objects do not need to appear in logical order. For example, a GRANT statement can grant permission to an object before the object itself has been created. </p>
<p>
In another example, a CREATE VIEW statement can appear before the CREATE TABLE statement is created as long as all necessary objects are in the same CREATE SCHEMA statement. Also, the CREATE TABLE statement can declare foreign keys to tables that have not yet been created. Because objects are created at the same time, it is possible to create two tables that have mutually dependent foreign keys.  </p>
<p>
This statement complies with ANSI SQL standards. There are other ways to achieve the same results (DDL in transaction or add foreign key after creating both tables), and there are no restrictions to the objects created with CREATE SCHEMA other than that they are created under the current database user. In SQL Server, using the owner qualifier on database objects or on a separate database is usually preferable to using the CREATE SCHEMA statement.  </p>
<p>
ANSI-standards require that an AUTHORIZATION<i> owner</i> be included in the CREATE SCHEMA statement. Because a user must be signed on under a particular username in order to issue statements,  the AUTHORIZATION<i> owner</i> is optional.  </p>
<p>
The tables and view can be specified in any order. For example, a view can appear before the table on which it is defined.  </p>
<p>
<b>Note</b>  Errors from other statements in the CREATE SCHEMA statement, such as REVOKE or ALTER TABLE, will be ignored and not return error messages.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Grant Access to Objects Before Object Creation</h5>
<p>
This example shows permission being granted before the objects have been created.</p>
<pre>CREATE SCHEMA AUTHORIZATION ross 
GRANT SELECT on v1 TO public
CREATE VIEW v1(c1) AS SELECT c1 from t1
CREATE TABLE t1(c1 int)
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Create Mutually Dependent Foreign Key Constraints</h5>
<p>
This example creates mutually dependent foreign key constraints. Other methods would take several steps to accomplish what is enabled by this CREATE SCHEMA example.</p>
<pre>CREATE SCHEMA AUTHORIZATION ross
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT REFERENCES t2(c1))
CREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT REFERENCES t1(c1))
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

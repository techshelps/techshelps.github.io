<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>xp_sqlinventory</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_xp_sqlinventory"></a>xp_sqlinventory (version 6.5)</h2>
<p>
Captures SQL Server configuration and inventory information asynchronously on the SQL Server computer and stores it in the specified database and table.</p>
<h4>Syntax</h4>
<p>
<b>xp_sqlinventory</b> {<b>'</b><i>DbName</i><b>',</b> <b>'</b><i>TableName</i><b>',</b> <i>Interval</i> | <b>stop</b>}</p>
<p>
where
<dl>
<dt>
<i>DbName</i></dt>
<dd>
Specifies the database in which to store inventory information. The <i>DbName</i> specified must already exist and must have enough free space to hold the retrieved inventory data. The <i>DbName</i> can be a maximum of 30 characters and must have a <i>varchar</i> datatype.</dd>
<dt>
<i>TableName</i></dt>
<dd>
Is the name of the table in which to store the inventory information. The <i>TableName</i> specified will be created if it does not already exist and will store configuration information only for servers that are in the same Windows NT domain as the SQL Server running <b>xp_sqlinventory</b>. The <i>TableName</i> parameter can be a maximum of 30 characters and must be a <i>varchar </i>datatype.</dd>
<dt>
<i>Interval</i></dt>
<dd>
Specifies the time (in seconds) to wait between checks for inventory messages. The <i>Interval</i> parameter must have an <i>int</i> datatype and can be a value between 1 (once per second) and 3600 (once per hour).</dd>
<dt>
<b>stop</b></dt>
<dd>
Specifies to stop all in-progress inventory actions.
</dd>
</dl>
<h4>Remarks</h4>
<p>
This procedure captures SQL Server configuration and inventory information for all SQL Servers on the domain and stores the information in the specified <i>DbName</i> and <i>TableName</i>. Any SQL Server running the LocalSystem account will not be included.</p>
<p>
<b>Caution</b>  By default SQL Server is installed as a service in the Windows NT LocalSystem account, and the SQL Server registration and configuration information cannot be sent over the network. For this extended stored procedure to work, you must configure SQL Server to run in a valid domain user account through the Startup dialog box in Control Panel, Services.</p>
<p>
Inventory errors are written to the Windows NT Event Log.</p>
<p>
<b>Note</b>  This procedure does not support named parameters.</p>
<p>
The following inventory information is captured for each inventoried SQL Server.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=69%></th>
</tr>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=69%></th>
</tr>
<tr valign=top>
<th align=left width=31%>Column name</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>ReceiveDate</td>
<td width=69%>Specifies the date and time the message was received on the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>ServerName</td>
<td width=69%>Specifies the SQL Server machine name.</td>
</tr>
<tr valign=top>
<td width=31%>ProductName</td>
<td width=69%>Specifies the product name of Microsoft SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>SQLRegisteredOwner</td>
<td width=69%>Specifies the registered owner name typed in during SQL Server Setup.</td>
</tr>
<tr valign=top>
<td width=31%>DomainName</td>
<td width=69%>Specifies the Windows NT domain name of the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>MajorVersion</td>
<td width=69%>Specifies the major version number for the SQL Server's version. For example, the "6" in SQL Server version 6.50 is the SQLMajorVersion.</td>
</tr>
<tr valign=top>
<td width=31%>MinorVersion</td>
<td width=69%>Specifies the minor version number for the SQL Server version. For example, the "50" in SQL Server version 6.50 is the SQLMinorVersion.</td>
</tr>
<tr valign=top>
<td width=31%>BuildNumber</td>
<td width=69%>Specifies the internal build number for the SQL Server version.</td>
</tr>
<tr valign=top>
<td width=31%>ServerLogins</td>
<td width=69%>Specifies the total number of configured user logins obtained from the <i>master</i>.<i>dbo</i>.<i>syslogins </i>system table.</td>
</tr>
<tr valign=top>
<td width=31%>MaxConnections</td>
<td width=69%>Specifies the maximum number of people that can be simultaneously connected to SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>DBCount</td>
<td width=69%>Specifies the total number of databases on the server including <i>master</i>, <i>tempdb</i>, and <i>model</i> databases.</td>
</tr>
<tr valign=top>
<td width=31%>TotalDeviceSize</td>
<td width=69%>Specifies the size in megabytes of all devices allocated for SQL Server data. This number does not include dump devices.</td>
</tr>
<tr valign=top>
<td width=31%>SortOrder</td>
<td width=69%>Specifies the sort order and code page chosen at SQL Server Setup. For more information about the selected code page, see <i>master.dbo.syscharsets</i> where <i>id</i> = SortOrder.</td>
</tr>
<tr valign=top>
<td width=31%>SecurityMode</td>
<td width=69%>Specifies the SQL Server security mode. The possible values are:<p>
0    Standard security</p>
<p>
1    Integrated security</p>
<p>
2    Mixed security</p>
</td>
</tr>
<tr valign=top>
<td width=31%>ProcedureCache</td>
<td width=69%>Specifies the percentage of memory allocated to SQL Server's procedure cache. Values may range from 1 to 99.</td>
</tr>
<tr valign=top>
<td width=31%>SMPStatus</td>
<td width=69%>Specifies how aggressively SQL Server will use multiple microprocessors. The default value is 0. For possible values, see "SMP concurrency" in the <b>sp_configure </b>system stored procedure in the <i>Microsoft SQL Server Transact-SQL Reference</i>.</td>
</tr>
<tr valign=top>
<td width=31%>ConfiguredMemory</td>
<td width=69%>Specifies the total amount of memory in megabytes allocated to SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>PriorityBoost</td>
<td width=69%>Specifies whether the SQL Server has been configured to run at a higher NT process priority level. For more information about priority boost, see <a href="../../../tsqlref/src/tsql19_3yzp.htm"><b>sp_configure</b></a> in the <i>Microsoft SQL Server Transact-SQL Reference</i>.</td>
</tr>
<tr valign=top>
<td width=31%>WorkingSet</td>
<td width=69%>Directs Windows NT to reserve physical memory space for SQL Server equal to the sum of the memory setting and the size of <i>tempdb</i> if it is in RAM. Default is 0 (no working set) and 1 (working set). For more information, see "Set working set size" in the <a href="../../../tsqlref/src/tsql19_3yzp.htm"><b>sp_configure</b></a> system stored procedure in the <i>Microsoft SQL Server Transact-SQL Reference</i>.</td>
</tr>
<tr valign=top>
<td width=31%>Publisher</td>
<td width=69%>Specifies the number of publications configured for the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>Subscriber</td>
<td width=69%>Specifies the number of publications subscribed to for the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>Distribution</td>
<td width=69%>Specifies whether the SQL Server is configured as a distribution server. The possible values are:<p>
0    Not a distribution server</p>
<p>
1    A distribution server</p>
</td>
</tr>
<tr valign=top>
<td width=31%>SupportSNMP</td>
<td width=69%>Specifies whether SNMP is available. For possible values, see <a href="addsproc_7u91.htm"><b>xp_snmp_getstate</b></a>, earlier in this document.</td>
</tr>
<tr valign=top>
<td width=31%>NamedPipe</td>
<td width=69%>Specifies whether the SQL Server can accept client connections by using the named pipe Net-Library. The possible values are:<p>
0    No</p>
<p>
1    Yes</p>
</td>
</tr>
<tr valign=top>
<td width=31%>MultiProtocol</td>
<td width=69%>Specifies whether the SQL Server can accept client connections by using the MultiProtocol Net-Library. The possible values are:<p>
0    No</p>
<p>
1    Yes</p>
</td>
</tr>
<tr valign=top>
<td width=31%>SPX</td>
<td width=69%>Specifies whether the SQL Server can accept client connections by using the Novell IPX/SPX Net-Library. The possible values are:<p>
0    No</p>
<p>
1    Yes</p>
</td>
</tr>
<tr valign=top>
<td width=31%>WinSocket</td>
<td width=69%>Specifies whether the SQL Server can accept client connections by using a WinSocket application programming interface Net-Library. The possible values are:<p>
0    No</p>
<p>
1    Yes</p>
</td>
</tr>
<tr valign=top>
<td width=31%>Appletalk®</td>
<td width=69%>Specifies whether the SQL Server can accept client connections by using an Appletalk Net-Library. The possible values are:<p>
0    No</p>
<p>
1    Yes</p>
</td>
</tr>
<tr valign=top>
<td width=31%>VINES</td>
<td width=69%>Specifies whether the SQL Server can accept client connections by using a Banyan® VINES® Net-Library. The possible values are:<p>
0    No</p>
<p>
1    Yes</p>
</td>
</tr>
<tr valign=top>
<td width=31%>DECnet™</td>
<td width=69%>Specifies whether the SQL Server can accept client connections by using a DECnet Net-Library. The possible values are:<p>
0    No</p>
<p>
1    Yes</p>
</td>
</tr>
<tr valign=top>
<td width=31%>CPUBrand</td>
<td width=69%>Specifies the brand of the microprocessor for the SQL Server. Possible values can be Intel, Alpha, MIPS, and PowerPC.</td>
</tr>
<tr valign=top>
<td width=31%>CPUModel</td>
<td width=69%>Specifies the microprocessor model, such as Pentium or Alpha for the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>CPUStepLevel</td>
<td width=69%>Specifies the processor stepping version.</td>
</tr>
<tr valign=top>
<td width=31%>CPUCount</td>
<td width=69%>Specifies the number of microprocessors for the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>ServerTotalMemory</td>
<td width=69%>Specifies the total amount of physical memory in megabytes on the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>ServerAvailableMemory</td>
<td width=69%>Specifies the available amount of physical memory in megabytes on the SQL Server.</td>
</tr>
<tr valign=top>
<td width=31%>OperatingSystem</td>
<td width=69%>Specifies the operating system for the SQL Server. An example is Microsoft Windows NT.</td>
</tr>
<tr valign=top>
<td width=31%>OperatingSystemBuild</td>
<td width=69%>Specifies the internal operating system build version number for the SQL Server. An example is 1057 for the 1057 build of Windows NT 3.51 or later.</td>
</tr>
<tr valign=top>
<td width=31%>TotalPhysicalDisk</td>
<td width=69%>Specifies the total amount of physical disk space in megabytes on non-removable storage media.</td>
</tr>
<tr valign=top>
<td width=31%>AvailablePhysicalDisk</td>
<td width=69%>Specifies the amount of free disk space available in megabytes on the SQL Server.</td>
</tr>
</table><br>
<h4>Example</h4>
<p>
This example checks every two seconds for SQL Server inventory messages. The information is loaded into the <i>db_info</i> table in the <i>sql_info</i> database. After time has passed, the capturing of configure and inventory information stops.</p>
<pre>USE pubs
go
DECLARE @db varchar(30)
DECLARE @table varchar(30)
DECLARE @interval int
SELECT @db = 'sql_info', @table = 'db_info', @interval = 2
EXECUTE master..xp_sqlinventory @db, @table, @interval
...
...
EXECUTE master..xp_sqlinventory stop
<b><i>  </i></b></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

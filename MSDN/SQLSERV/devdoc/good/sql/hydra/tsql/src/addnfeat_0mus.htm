<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FETCH Statement</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_fetch_statement_addnfeat"></a>FETCH Statement (version 6.5)</h2>
<p>
Accepts variables and procedure parameters for the row number arguments to the ABSOLUTE and RELATIVE keywords.  </p>
<p>
For additional syntax information for the <a href="../../../tsqlref/src/tsql05_67as.htm">FETCH statement</a>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>
<h4>Syntax</h4>
<p>
FETCH [[NEXT | PRIOR | FIRST | LAST<br>
&nbsp;&nbsp;&nbsp;&nbsp;| ABSOLUTE {<i>n </i>|<i> </i><b>@</b><i>nvar</i>}<i> </i>| RELATIVE {<i>n </i>|<i> </i><b>@</b><i>nvar</i>}]<br>
FROM] <i>cursor_name<br>
</i>[INTO<i> </i><b>@</b><i>variable_name1</i><b>,</b><i> </i><b>@</b><i>variable_name2</i><b>,</b> ...] </p>
<p>
where 
<dl>
<dt>
NEXT</dt>
<dd>
Specifies that the first row of the results set is returned if this is the first fetch against the cursor; otherwise, it moves the cursor one row forward within the results set. NEXT is the primary method to move through the results set; it is also the default cursor fetch action.</dd>
<dt>
PRIOR</dt>
<dd>
Specifies that the previous row within the results set is returned.</dd>
<dt>
FIRST</dt>
<dd>
Specifies that the cursor is moved to the first row within the results set and returns the first row.</dd>
<dt>
LAST</dt>
<dd>
Specifies that the cursor is moved to the last row within the results set and returns the last row.</dd>
<dt>
ABSOLUTE {<i>n </i>|<i> </i><b>@</b><i>nvar</i>}</dt>
<dd>
Specifies that the <i>n</i>th row within the results set is returned. If <i>n</i> is a negative value, the returned row will be the <i>n</i>th row counting backward from the last row of the results set. Only the <i>smallint</i>, <i>tinyint</i> and <i>int</i> datatypes are supported for <i>n</i>.</dd>
<dt>
RELATIVE {<i>n </i>|<i> </i><b>@</b><i>nvar</i>}</dt>
<dd>
Specifies that the<i> n</i>th<i> </i>row after the currently fetched row is returned. If <i>n</i> is a negative value, the returned row will be the <i>n</i>th row counting backward from the relative position of the cursor. Only the <i>smallint</i>, <i>tinyint</i> and <i>int</i> datatypes are supported for <i>n</i>.</dd>
<dt>
FROM<i> cursor_name</i></dt>
<dd>
Specifies the cursor from which the fetch should be made. Multiple cursors are allowed within any session provided that each has a unique name.</dd>
<dt>
INTO<i> <b>@</b>variable_name1</i><b>,</b><i> <b>@</b>variable_name2</i><b>,</b> ...</dt>
<dd>
Specifies a variable in which to place data that is returned by a fetch. Each of the variable datatypes must match the datatype returned by the fetch. Errors occur when the datatypes are incompatible. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
This statement retrieves a specific row from the cursor. Variables can be used for row number arguments. For example, the FETCH ABSOLUTE statement can be used with a variable to find a particular row within the cursor. For example, the row this statement retrieves depends upon the value of the <i>@row_num</i> variable: </p>
<pre>FETCH ABSOLUTE @row_num FROM customer_cursor
<b><i>  </i></b></pre>
<p>
By using variables for row number argument names, the program can provide the value at run time. This is useful because the row number value can be dependent upon run-time data that is available only at run time. This offers greater flexibility for programming the FETCH statement. </p>
<h4>Example</h4>
<p>
This example calculates the median number of personnel in the various departments of a specific company. The company name is specified in the procedure. To calculate the median number of employees in a specific department, follow these steps: 
<ol>
<li>
For the company specified, order the departments by population into a department list.</li>
<li>
Determine if the number of departments is odd or even.<ul>
<li>
If the number of departments is even, the median value is derived from the two departments' population values that appear on either side of the middle of the department list. Add the two population values together and divide by two.</li>
<li>
If the number of departments is odd, the median value is derived from the population value that appears in the middle of the company list.</li>
</ul>
</li>
</ol>
<p>
For this example, assume that a database exists that holds all departments' populations for all companies in the Algodata Infosystems conglomerate. </p>
<pre>/*Create procedure*/
CREATE PROCEDURE find_median_population @company varchar(25)
AS
DECLARE @num_departments int
DECLARE @value1 int
DECLARE @value2 int
DECLARE @middle int
<b><i>  </i></b>
/* Declare cursor on population table */
DECLARE population_cursor SCROLL CURSOR
FOR select population 
FROM population_table
WHERE company = @company
ORDER BY population
<b><i>  </i></b>
OPEN population_cursor
<b><i>  </i></b>
SELECT @num_departments=@@cursor_rows
<b><i>  </i></b>
SELECT @middle=@num_departments /2
<b><i>  </i></b>
IF (@num_departments % 2)=0
BEGIN
FETCH ABSOLUTE @middle FROM population_cursor INTO @value1 
FETCH NEXT FROM population_cursor INTO @value2
SELECT "Company population median for " + @company + " is: " + CONVERT(char(10), (@value1 + @value2) / 2)
END
ELSE
BEGIN
SELECT @middle = @middle + 1
FETCH ABSOLUTE @middle FROM population_cursor INTO @value1 
SELECT "Company population median for " + @company + " is: " +     CONVERT(char(10), @value1)
END
CLOSE population_cursor
DEALLOCATE population_cursor
<b><i>  </i></b></pre>
<p>
The <b>find_median_population</b> stored procedure can be executed in these ways: </p>
<pre>EXECUTE find_median_population 'New Moon Books'
EXECUTE find_median_population 'Five Lakes Publishing'
EXECUTE find_median_population 'Scootney Books'
<b><i>  </i></b></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

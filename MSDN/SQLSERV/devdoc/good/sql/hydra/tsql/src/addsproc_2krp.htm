<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>xp_sqltrace</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_xp_sqltrace"></a>xp_sqltrace (version 6.5)</h2>
<p>
Allows database administrators and application developers to monitor and record database activity. Multiple instances of <b>xp_sqltrace</b> can be run simultaneously.</p>
<h4>Syntax</h4>
<p>
<b>xp_sqltrace</b> [[<b>@</b>Function <b>=</b> ] <i>function</i>]<i> </i>[<b>,</b> [ <b>@</b>EventFilter <b>=</b> ] <i>eventfilter</i>] <br>
[<b>,</b> [ <b>@</b>LangFilter <b>=</b> ] <b>'</b><i>langfilter</i><b>'</b>] [<b>,</b> [ <b>@</b>RPCFilter <b>=</b> ] <b>'</b><i>rpcfilter</i><b>'</b>] [<b>,</b> [ <b>@</b>UserFilter <b>=</b> ] <i>userfilter</i>] [<b>,</b> [ <b>@</b>AppFilter <b>=</b> ] <i>appfilter</i>] [<b>,</b> [ <b>@</b>HostFilter <b>=</b> ] <i>hostfilter</i>] [<b>,</b> [<b>@</b>BufSize <b>=</b> ] <i>bufsize</i>] [<b>,</b> [ <b>@</b>TimeOut <b>=</b> ] <i>timeout</i>] [<b>,</b> [ <b>@</b>TraceId <b>=</b> ] <i>traceid</i>] [<b>,</b> [<b>@</b>FullText <b>=</b> ] <i>fulltext</i>] [<b>,</b> [ <b>@</b>FullFilePath <b>=</b> ] <b>'</b><i>outputfilename</i><b>'</b>] [<b>, </b>[ <b>@</b>IntegerEvents <b>=</b> ] <i>integerevents</i>]</p>
<p>
where
<dl>
<dt>
<b><i>@</i></b>Function</dt>
<dd>
Specifies a string that describes what action <b>xp_sqltrace</b> performs. These are the possible values for <b>@</b>Function.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%>@Function value</th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%>audit</td>
<td width=72%>Logs all database activity requested by the specified filters to a file specified by <b>@</b>FullFilePath. Returns program control immediately. If <b>@</b>TraceId, <b>@</b>BufSize, or <b>@</b>TimeOut parameters are specified, they are ignored. If audit is used without any parameters, generates a results set that displays the current audit settings for <b>xp_sqltrace</b>. Only one instance of audit can be executed at any time. A permanent connection is not necessary to execute an audit. For example, the system administrator can be connected, start the audit, and then disconnect. You can use audit in automatically started procedures.</td>
</tr>
<tr valign=top>
<td width=28%>control</td>
<td width=72%>Changes the settings for a running instance from a separate connection. You must run <b>xp_sqltrace</b> without parameters to obtain an <b>@</b>TraceId <i>before</i> starting a trace session. The <b>@</b>TraceId parameter is required.</td>
</tr>
<tr valign=top>
<td width=28%>remove</td>
<td width=72%>Unloads all event handlers. Stops all data from being sent t o trace sessions until trace handlers are loaded again. Using remove does not stop currently executing trace sessions. Starting or stopping a trace session also loads or unloads relevant handlers. You can use remove to temporarily pause all trace sessions. No other parameters are required.</td>
</tr>
<tr valign=top>
<td width=28%>stop</td>
<td width=72%>Stops either a single trace session or all trace sessions for the current server. It is recommended that you execute <b>xp_sqltrace stop,</b> <b>@traceid = &lt;traceid&gt;</b> to stop a specific trace session. Using <b>xp_sqltrace stop</b> is useful if the server is under heavy load and the system administrator must stop all trace activities.</td>
</tr>
<tr valign=top>
<td width=28%>trace</td>
<td width=72%>Captures all database activity requested by the specified filters and generates a log file or a results set. The <b>@</b>TraceId parameter has no effect.</td>
</tr>
</table><br>

</dd>
<dt>
<b><i>@</i></b>EventFilter</dt>
<dd>
Specifies an integer (<i>int</i> datatype) that describes what server activity to monitor. To specify more than one <b>@</b>EventFilter value, add together the <b>@</b>EventFilter values. For example, <b>@</b>EventFilter <b>=</b> 31 means that <b>xp_sqltrace</b> should monitor CONNECT, DISCONNECT, POST_LANGUAGE, POST_RPC, and ATTENTION events. These are the possible values for <b>@</b>EventFilter.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%></th>
<th align=left width=68%></th>
</tr>
<tr valign=top>
<th align=left width=32%></th>
<th align=left width=68%></th>
</tr>
<tr valign=top>
<th align=left width=32%>@EventFilter value</th>
<th align=left width=68%>Description</th>
</tr>
<tr valign=top>
<td width=32%>0</td>
<td width=68%>PAUSE. Temporarily pauses the trace session. Must be the only <b>@</b>EventFilter specified.</td>
</tr>
<tr valign=top>
<td width=32%>1</td>
<td width=68%>CONNECT. Trace CONNECT events to SQL Server.</td>
</tr>
<tr valign=top>
<td width=32%>2</td>
<td width=68%>DISCONNECT. Trace DISCONNECT events from SQL Server.</td>
</tr>
<tr valign=top>
<td width=32%>4</td>
<td width=68%>POST_LANGUAGE. Trace completed language events on SQL Server (for example, INSERT, SELECT).</td>
</tr>
<tr valign=top>
<td width=32%>8</td>
<td width=68%>POST_RPC. Trace completed RPC events on SQL Server.</td>
</tr>
<tr valign=top>
<td width=32%>16</td>
<td width=68%>ATTENTION. Trace ATTENTION events on SQL Server.</td>
</tr>
<tr valign=top>
<td width=32%>32</td>
<td width=68%>PRE_LANGUAGE. Trace language batches immediately prior to execution. Not currently used by SQLTRACE.EXE.</td>
</tr>
<tr valign=top>
<td width=32%>64</td>
<td width=68%>PRE_RPC. Trace RPC events immediately before execution. Not currently used by SQLTRACE.EXE.</td>
</tr>
</table><br>

</dd>
<dt>
<b>@</b>LangFilter</dt>
<dd>
Specifies a string that specifies a batch pattern of language statements to be monitored. Use the wildcard character (<b>%</b>) to indicate any sequence of characters. Delimit multiple filter strings with a semi-colon (<b>;</b>) for the OR condition (<b>%</b>INSERT<b>%;%</b>SELECT<b>%</b>).</dd>
<dt>
<b>@</b>RPCFilter</dt>
<dd>
Specifies a string pattern of remote stored procedure calls for which to monitor events. Delimit multiple filter strings with a semi-colon (<b>;</b>) for the OR condition. Use the wildcard character (<b>%</b>) to indicate any sequence of characters. Delimit multiple filter strings with a semi-colon (<b>;</b>) for the OR condition (<b>%</b>sp_cursors<b>%;</b>sp_run<b>%</b>).</dd>
<dt>
<b>@</b>UserFilter</dt>
<dd>
Specifies the login name(s) of users for whom to monitor events as a string. Delimit multiple filter strings with a semi-colon (<b>;</b>) for the OR condition. Use the wildcard character (<b>%</b>) to indicate any sequence of characters. For example, specify <i>Chan</i><b>%</b> as the login name to find login names <i>Chan</i> and <i>Channing</i>.</dd>
<dt>
<b>@</b>AppFilter</dt>
<dd>
Specifies the application name(s) for which to monitor events as a string. Delimit multiple filter strings with a semi-colon (<b>;</b>) for the OR condition. Use the wildcard character (<b>%</b>) to indicate any sequence of characters. For example, specify the application name <i>Acc</i><b>%</b> to find the <i>Access</i> application.</dd>
<dt>
<b>@</b>HostFilter</dt>
<dd>
Specifies the host(s) for which to monitor events as a string. Delimit multiple filter strings with a semi-colon (<b>;</b>) for the OR condition. Use the wildcard character (<b>%</b>) to indicate any sequence of characters. For example, specify the host name <i>air</i><b>%</b> to find the <i>airedale </i>host.</dd>
<dt>
<b>@</b>BufSize</dt>
<dd>
Specifies the number of rows of data the server will buffer when the client is busy. The <b>@</b>BufSize parameter is of <i>int</i> datatype and can be a value 1 to 20,000. The default is 1,000.</dd>
<dt>
<b>@</b>TimeOut</dt>
<dd>
Specifies the amount of time in seconds that the server will wait when the row buffer specified in <b>@</b>BufSize is full before terminating the trace session. The <b>@</b>TimeOut parameter is of <i>int</i> datatype and can be 1 to 10 seconds (the default is five seconds).</dd>
<dt>
<b>@</b>TraceId</dt>
<dd>
Specifies the trace identification number used for the trace session. Each <b>@</b>TraceId value is static for a connection as long as you retain your current connection. The <b>@</b>TraceId parameter is of <i>int</i> datatype.</dd>
<dt>
<b>@</b>FullText</dt>
<dd>
Specifies whether the language or RPC strings should be returned as <i>varchar</i>(255) (The default is 0) or as <i>text</i> (1). The <b>@</b>FullText parameter is of <i>int</i> datatype.</dd>
<dt>
<b>@</b>FullFilePath</dt>
<dd>
Specifies the file to send the output to as a string (for example, <b>'</b>C:\selects.txt<b>'</b>). This parameter uses the standard Microsoft SQL Trace log format for output.
<p>
For more information about the SQL Trace log format, see the online Help for SQL Trace.
</dd>
<dt>
<b>@</b>IntegerEvents</dt>
<dd>
Specifies whether the event column should be <i>text</i> (The default is 0) or <i>integer </i>(1). The <b>@</b>IntegerEvents parameter is of <i>int</i> datatype.
</dd>
</dl>
<h4>Remarks</h4>
<p>
When using <b>xp_sqltrace</b>,<b> </b>an <b>@</b>Function <b>=</b> trace does not return program control until explicitly stopped. No other commands should be issued before the call to <b>xp_sqltrace</b> in an <b>isql </b>or ISQL/w batch. After you choose the stop button in ISQL/w, another output row must be received for the trace to stop. This is a limitation of the ISQL/w interface.</p>
<p>
<b>Note</b>  The recommended way to stop a trace session is to specify the trace identification number. For example:</p>
<pre>xp_sqltrace stop, @traceid = &lt;traceid&gt;
<b><i>  </i></b></pre>
<p>
Data can be captured to a table by using the INSERT statement's EXECute clause. Using the INSERT statement this way places <b>xp_sqltrace</b> within a transaction. If <b>xp_sqltrace</b> is used in a transaction, the transaction will not complete until the application stops <b>xp_sqltrace</b>. If the trace is not terminated before the server is stopped or if the database fills completely during a transaction, all changes are rolled back.</p>
<p>
These are the events that are specific to trace session output.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%>Event</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>PAUSE (0)</td>
<td width=52%>Indicates that the trace session was paused temporarily.</td>
</tr>
<tr valign=top>
<td width=48%>START (254)</td>
<td width=52%>Indicates a START trace event.</td>
</tr>
<tr valign=top>
<td width=48%>ACTIVE (255)</td>
<td width=52%>Indicates an ACTIVE connection event. <p>
A row appears in the output for every user who meets the criteria specified in the <b>xp_sqltrace</b> command line. For example, if the system administrator already has three connections, three ACTIVE rows will appear in the output. The trace session will report an ACTIVE row for pre-existing connections.</p>
</td>
</tr>
</table><br>
<p>
For more information about monitoring database activity, see the online Help for SQL Trace.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Trace SELECT Statements for sa and probe</h5>
<p>
This example begins a trace session that displays the event, the username, the application, the data or language statement, and other columns. All SELECT statements executed by either <i>sa</i> or <i>probe</i> users are included in the trace. Events included in the trace are attention, connect, disconnect, post-language, and post-rpc events.</p>
<pre>xp_sqltrace trace, @eventfilter = 31, @userfilter = 'sa;probe', 
@langfilter = '%select%'
</pre>
<p>
These are the columns generated in the results set.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=23%></th>
<th align=left width=28%></th>
<th align=left width=49%></th>
</tr>
<tr valign=top>
<th align=left width=23%></th>
<th align=left width=28%></th>
<th align=left width=49%></th>
</tr>
<tr valign=top>
<th align=left width=23%>Column name</th>
<th align=left width=28%><i>Datatype</i></th>
<th align=left width=49%>Description</th>
</tr>
<tr valign=top>
<td width=23%>Event</td>
<td width=28%><i>varchar</i>(12) or<i> int</i></td>
<td width=49%>Specifies the event (for example START, PAUSE, ACTIVE, Connect, Disconnect, SQL, Attention) as <i>varchar</i>(12) unless <b>@</b>IntegerEvents = 1.</td>
</tr>
<tr valign=top>
<td width=23%>UserName</td>
<td width=28%><i>char</i>(30) NULL</td>
<td width=49%>Specifies the username of the user that generated the event.</td>
</tr>
<tr valign=top>
<td width=23%>ID</td>
<td width=28%><i>int</i></td>
<td width=49%>Specifies a unique, increasing identifier for connections.</td>
</tr>
<tr valign=top>
<td width=23%>SPID</td>
<td width=28%><i>int</i></td>
<td width=49%>Specifies the SQL Server process identification number.</td>
</tr>
<tr valign=top>
<td width=23%>StartTime</td>
<td width=28%><i>datetime </i>NULL</td>
<td width=49%>Specifies the time that the language statement or remote stored procedure call started executing. For connect and disconnect events, specifies the time the user logged in.</td>
</tr>
<tr valign=top>
<td width=23%>EndTime</td>
<td width=28%><i>datetime </i>NULL</td>
<td width=49%>Specifies the time that the language statement or remote stored procedure call stopped executing. For disconnect events, specifies the disconnect time.</td>
</tr>
<tr valign=top>
<td width=23%>Application</td>
<td width=28%><i>char</i>(30) NULL</td>
<td width=49%>Specifies the application that generated the event.</td>
</tr>
<tr valign=top>
<td width=23%>Data</td>
<td width=28%><i>varchar</i>(255) NULL or <i>text</i> NULL</td>
<td width=49%>Specifies the language statement or remote stored procedure call as <i>varchar</i>(255) unless <b>@</b>FullText = 1.</td>
</tr>
<tr valign=top>
<td width=23%>Duration</td>
<td width=28%><i>int</i> NULL</td>
<td width=49%>Specifies the amount of time in milliseconds that the language statement or remote stored procedure call took to execute. For disconnect events, specifies the elapsed time in seconds since the user logged in.</td>
</tr>
<tr valign=top>
<td width=23%>CPU</td>
<td width=28%><i>in</i> NULL<i>t</i></td>
<td width=49%>Specifies the amount of CPU time used in milliseconds.</td>
</tr>
<tr valign=top>
<td width=23%>Reads</td>
<td width=28%><i>int</i> NULL</td>
<td width=49%>Specifies the number of disk reads.</td>
</tr>
<tr valign=top>
<td width=23%>Writes</td>
<td width=28%><i>int</i> NULL</td>
<td width=49%>Specifies the number of synchronous disk writes.</td>
</tr>
<tr valign=top>
<td width=23%>NT_Domain</td>
<td width=28%><i>char</i>(30) NULL</td>
<td width=49%>Specifies the NT Domain name of the user that generated the event.</td>
</tr>
<tr valign=top>
<td width=23%>NT_User</td>
<td width=28%><i>char</i>(30) NULL</td>
<td width=49%>Specifies the NT User name of the user that generated the event.</td>
</tr>
<tr valign=top>
<td width=23%>HostName</td>
<td width=28%><i>char</i>(30) NULL</td>
<td width=49%>Specifies the name of the host that generated the event.</td>
</tr>
<tr valign=top>
<td width=23%>HostProcess</td>
<td width=28%><i>int</i></td>
<td width=49%>Specifies the host process ID number for the host that generated the event.</td>
</tr>
</table><br>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Audit SELECT Statements to a Text File</h5>
<p>
This example audits batches that contain SELECT statements executed by <i>sa</i> or <i>probe</i> users and places the output in a text file called C:\SELECTS.TXT.</p>
<pre>xp_sqltrace audit, @eventfilter = 31, @userfilter = 'sa;probe', 
@langfilter = '%select%', @FullFilePath = 'C:\SELECTS.TXT'
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Obtain and Use a Specific @TraceId</h5>
<p>
This example starts a trace session for the first connection, and it allows the second connection to control the same trace session by using the trace identification number obtained and passed by the first connection.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<th align=left width=43%></th>
<th align=left width=57%></th>
</tr>
<tr valign=top>
<th align=left width=43%></th>
<th align=left width=57%></th>
</tr>
<tr valign=top>
<th align=left width=43%>Connection One</th>
<th align=left width=57%>Connection Two</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=43%>--obtain a traceid <br>
xp_sqltrace</td>
<td width=57%></td>
</tr>
<tr valign=top>
<td width=43%>--start the trace <br>
xp_sqltrace trace, <br>
@eventfilter = 31</td>
<td width=57%></td>
</tr>
<tr valign=top>
<td width=43%></td>
<td width=57%><pre>--pause the trace session 
xp_sqltrace control, 
@TraceId = &lt;TraceId&gt;</pre>
</td>
</tr>
<tr valign=top>
<td width=43%></td>
<td width=57%><pre>--begin trace session
xp_sqltrace control 
@TraceId = &lt;TraceId&gt;, 
@EventFilter = 4, 
@LangFilter = '%select%'</pre>
</td>
</tr>
<tr valign=top>
<td width=43%></td>
<td width=57%><pre>--stop the trace session 
xp_sqltrace stop, 
@traceid = &lt;traceid&gt;</pre>
</td>
</tr>
</table><br>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;Stop All Current Trace Sessions</h5>
<p>
The following two <b>xp_sqltrace </b>command examples stop all trace sessions executing on the current server while the third example stops only the specified trace session.</p>
<pre>-- stops all trace sessions
xp_sqltrace stop, @traceid = 0
-- OR
xp_sqltrace stop
<b><i>  </i></b>
--recommended way to stop a single trace session
xp_sqltrace stop @TraceId = &lt;TraceId&gt;
<b><i>  </i></b></pre>
<h5>E.&nbsp;&nbsp;&nbsp;&nbsp;Configure SQL Server to Automatically Audit All Sessions at Disconnect</h5>
<p>
This example creates a stored procedure to automatically start an audit session that audits disconnections.</p>
<pre>print 'Creating auditing stored procedure'
-- create stored procedure to enable xp_sqltrace run at startup
go
USE master
go
IF exists(SELECT * FROM sysobjects WHERE type = 'P' AND name = 'sp_sqlaudit')
    DROP PROCEDURE sp_sqlaudit
go
CREATE PROCEDURE sp_sqlaudit AS
BEGIN
-- @FullFilePath can be any file that SQL Server has write
-- permissions
EXECUTE master.dbo.xp_sqltrace audit, 2, @FullFilePath = 'C:\MSSQL\LOG\AUDIT.LOG'
END
go
sp_makestartup 'sp_sqlaudit'
go
<b><i>  </i></b></pre>
<h5>F.&nbsp;&nbsp;&nbsp;&nbsp;Capture Server Activity to Table</h5>
<p>
This example uses the EXECUTE statement to capture all of the server activity to a table named <i>sqltrace</i> in the <i>pubs</i> database. Note that the transaction is not committed until you execute "xp_sqltrace stop" from another connection.</p>
<pre>USE pubs
GO
IF EXISTS(SELECT * FROM sysobjects WHERE name = 'SQLTrace' AND type = 'U')
BEGIN
    DROP TABLE SQLTrace
END
GO
CREATE TABLE SQLTrace
(
    Event         CHAR(12) NOT NULL,
    UserName     CHAR(30) NOT NULL,
    ID int         NOT NULL,
    SPID int     NOT NULL,
    StartTime     DATETIME NULL,
    EndTime         DATETIME NULL,
    Application     CHAR(30) NOT NULL,
    Data         VARCHAR(255) NULL,
    Duration     INT NULL,
    CPU             INT NULL,
    Reads         INT NULL,
    Writes         INT NULL,
    NT_Domain     VARCHAR(30) NULL,
    NT_User       VARCHAR(30) NULL,
    HostName      VARCHAR(30) NULL,
    HostProcess     INT NULL 
)
GO
<b><i>  </i></b>
<b><i>  </i></b>
EXEC master..xp_sqltrace
GO
<b><i>  </i></b>
INSERT INTO SQLTrace EXECUTE master..xp_sqltrace TRACE, @eventfilter = 31
<b><i>  </i></b></pre>
<p>
From another connection, execute the following statement.</p>
<p>
EXEC master..xp_sqltrace STOP, 1358560   </p>
<p>
/* where 1358560 is the trace session returned from xp_sqltrace */</p>
<h5>G.&nbsp;&nbsp;&nbsp;&nbsp;BCP SQL Trace Activity Log</h5>
<p>
You can easily load an activity log into SQL Server using BCP.  First create a log and capture the server activity to an activity log file.   Next, create a table with the following structure:</p>
<pre>IF EXISTS(SELECT * FROM sysobjects WHERE name = 'SQLTrace' AND type = 'U')
BEGIN
    DROP TABLE SQLTrace
END
GO
CREATE TABLE SQLTrace
(
    Event         CHAR(12) NOT NULL,
    UserName     CHAR(30) NOT NULL,
    ID             INT NOT NULL,
    SPID         INT NOT NULL,
    StartTime     datetime NULL,
    EndTime         datetime NULL,
    Application     CHAR(30) NOT NULL,
    Data         VARCHAR(255) NULL,
    Duration     INT NULL,
    CPU             INT NULL,
    Reads         INT NULL,
    Writes         INT NULL,
    NT_Domain     VARCHAR(30) NULL,
    NT_User       VARCHAR(30) NULL,
    HostName      VARCHAR(30) NULL,
    HostProcess     INT NULL 
)
GO
<b><i>  </i></b></pre>
<p>
Finally, load the data using BCP.</p>
<pre>bcp pubs..SQLTrace in c:\activity.log -Usa -Psecret -S -c
<b><i>  </i></b></pre>
<h4>Permission</h4>
<p>
Execute permission defaults to the system administrator. It is recommended that the system administrator be the only login permitted to execute this procedure.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ALTER TABLE Statement</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_alter_table_statement_addnfeat"></a>ALTER TABLE Statement (version 6.5)</h2>
<p>
Disables a foreign key constraint and defers constraints during replication. Constraints can be deferred without being dropped.  </p>
<p>
For additional syntax information for the <a href="../../../tsqlref/src/tsql01_7qt0.htm">ALTER TABLE statement</a>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>
<h4>Syntax</h4>
<p>
ALTER TABLE [<i>database</i><b>.</b>[<i>owner</i><b>.</b>]]<i>table_name</i><br>
[WITH {CHECK | NOCHECK}]<br>
&nbsp;&nbsp;&nbsp;&nbsp;{{CHECK | NOCHECK} CONSTRAINT {<i>constraint_name</i> | ALL}<br>
&nbsp;&nbsp;&nbsp;&nbsp;|<br>
&nbsp;&nbsp;&nbsp;&nbsp;[ADD <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<i>col_name column_properties</i> [<i>column_constraints</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| [[<b>,</b> ] <i>table_constraint</i>]}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> {<i>next_col_name</i> | <i>next_table_constraint</i>}]...]<br>
&nbsp;&nbsp;&nbsp;&nbsp;|<b>&nbsp;&nbsp;&nbsp;&nbsp;</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;[DROP CONSTRAINT]<br>
&nbsp;&nbsp;&nbsp;&nbsp;<i>constraint_name</i> [<b>,</b> <i>constraint_name2</i>]...]}</p>
<p>
where 
<dl>
<dt>
<i>table_name</i></dt>
<dd>
Specifies which table to alter. You can specify local or global temporary tables, but FOREIGN KEY constraints are not enforced on temporary tables.</dd>
<dt>
WITH {CHECK | NOCHECK}</dt>
<dd>
Allows CHECK and FOREIGN KEY constraints to be added to a table without verifying existing data for constraint violations.</dd>
<dt>
{NOCHECK | CHECK} CONSTRAINT</dt>
<dd>
Turns the constraint checking on or off for foreign key and check constraints.</dd>
<dt>
<i>constraint_name</i> | ALL</dt>
<dd>
Specifies an individual constraint or all constraints to modify.
<p>
You can defer constraints for the table, including CHECK and FOREIGN KEY constraints, by using the ALL keyword. However, you cannot defer primary and unique key constraints; these constraints must be dropped.


<p>
<b>Important</b>  Deferring constraints on a table does not defer constraints on other tables that refer to the altered tables. Updates to the table can still raise constraint violation errors.

</dd>
<dt>
ADD</dt>
<dd>
Specifies that a column- or table-level constraint be added to an existing table.</dd>
<dt>
<i>col_name</i></dt>
<dd>
Is a new column for the table. Column names must conform to the rules for identifiers and must be unique in the table.</dd>
<dt>
<i>column_properties</i> <b>=</b> </dt>
<dd>
<i>datatype</i> [NULL | IDENTITY[(<i>seed</i><b>,</b> <i>increment</i>)]]
<dl>
<dt>
<i>datatype</i></dt>
<dd>
Specifies the datatype of the column. System or user-defined datatypes are acceptable. Columns added to a table must be defined as NULL.</dd>
<dt>
IDENTITY(<i>seed</i><b>,</b> <i>increment</i>)</dt>
<dd>
Specifies values for existing rows based on the seed and increment parameters. </dd>
</dl>
</dd>
<dt>
<i>table_constraints</i><b>=</b></dt>
<dd>
Specifies up to one PRIMARY KEY constraint per table, one DEFAULT constraint per column, and any number of FOREIGN KEY, UNIQUE, or CHECK constraints on any column or columns. All can be entered within the same ALTER TABLE statement.
<p>
<b>For a table-level constraint:</b>
</dd>
</dl>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;[CONSTRAINT constraint_name]<br>
&nbsp;&nbsp;&nbsp;&nbsp;{ PRIMARY KEY [CLUSTERED | NONCLUSTERED]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>(</b><i>col_name </i>[<b>, </b><i>col_name2</i>[...<b>, </b><i>col_name16</i>]]<b>)</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;| UNIQUE [CLUSTERED | NONCLUSTERED]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>(</b><i>col_name</i> [<b>, </b><i>col_name2</i>[...<b>, </b><i>col_name16</i>]]<b>)</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[WITH FILLFACTOR <b>=</b> <i>fillfactor</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;| FOREIGN KEY <b>(</b><i>col_name</i>[<b>, </b><i>col_name2</i>[...<b>, </b><i>col_name16</i>]]<b>)</b> <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REFERENCES [<i>owner</i><b>.</b>] <i>ref_table</i> <b>(</b><i>ref_col</i>[<b>, </b><i>ref_col2</i>[...<b>, </b><i>ref_col16</i>]]<b>)</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[NOT FOR REPLICATION]<br>
&nbsp;&nbsp;&nbsp;&nbsp;| CHECK [NOT FOR REPLICATION] <b>(</b><i>expression</i><b>)</b>}
<dl>
<dt>
CONSTRAINT <i>constraint_name</i></dt>
<dd>
Specifies the constraint within the database. Constraint names must follow the rules for identifiers, except that the name cannot begin with a number sign (#). If this clause is omitted, a system-generated name is assigned to the constraint.
<dl>
<dt>
PRIMARY KEY | UNIQUE [CLUSTERED | NONCLUSTERED]</dt>
<dd>
Specifies entity integrity for a given column or columns, which can be used as primary keys. </dd>
<dt>
WITH FILLFACTOR</dt>
<dd>
Specifies how full SQL Server makes each index page when creating an index with existing data.</dd>
<dt>
SORTED_DATA | SORTED_DATA_REORG</dt>
<dd>
Specify that the sort that is performed when a clustered index is created be eliminated. Both options verify that the data has been sorted by checking each index value to determine whether it is higher than the previous one. If any row fails this check, the ALTER TABLE statement terminates. You can either fix the data or rerun the ALTER TABLE statement without the SORTED_DATA option (the data will be sorted but not reorganized). 
<p>
When the data satisfies the checks, the SORTED_DATA option will always be faster than the SORTED_DATA_REORG because the data is not copied and nonclustered indexes will not be rebuilt.

<p>
SORTED_DATA_REORG differs from SORTED_DATA because it physically reorganizes the data. This option is useful when a FILLFACTOR is specified to compact or expand the pages on which a table is stored. The effects of these options change slightly if used with the ON <i>segment_name</i> option.

<p>
Reorganizing the data is a good idea when a table becomes fragmented. To determine whether or not a table is contiguous, use the DBCC statement's SHOW_CONTIG. For details about what causes table fragmentation and recommended solutions, see the DBCC statement. 
</dd>
<dt>
ON <i>segment_name</i></dt>
<dd>
Specifies the segment on which to create the index.</dd>
</dl>
</dd>
<dt>
<i>column_constraints</i><b>=</b></dt>
<dd>
Is up to one unique or foreign key constraint, one DEFAULT constraint, and any number of check constraints for each new or existing column.
<p>
<b>For a column-level constraint:</b>
</dd>
</dl>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;[CONSTRAINT <i>constraint_name</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;{ PRIMARY KEY [CLUSTERED | NONCLUSTERED] [<b>(</b><i>col_name</i><b>)</b>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;| UNIQUE [CLUSTERED | NONCLUSTERED] [<b>(</b><i>col_name</i><b>)</b>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[WITH FILLFACTOR <b>=</b> <i>fillfactor</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;| FOREIGN KEY [<b>(</b><i>col_name</i><b>)</b>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REFERENCES [<b>(</b><i>ref_col</i><b>)</b>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[NOT FOR REPLICATION]<br>
&nbsp;&nbsp;&nbsp;&nbsp;| CHECK [NOT FOR REPLICATION] <b>(</b><i>expression</i><b>)</b>}
<dl>
<dt>
FOREIGN KEY [NOT FOR REPLICATION]</dt>
<dd>
Specifies single column or multicolumn referential integrity. When defined, the number of columns and datatypes of each column specified in the FOREIGN KEY clause must identically match the columns in the REFERENCES clause. Values entered in this column or columns must exist in the table, and column(s) defined in the REFERENCES clause and the referenced table's columns must have a PRIMARY KEY or UNIQUE constraint defined on them. For column-level constraints, using the FOREIGN KEY and <i>col_name</i> identifiers are optional.
<dl>
<dt>
NOT FOR REPLICATION</dt>
<dd>
Specifies that column-level constraints be suspended during replication.
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
The ALTER TABLE NOCHECK statement allows replication to take place without permanently removing referential integrity constraints. Replication needs deferred constraints because constraints are sometimes violated by modifying a database with INSERT and DELETE statements. Use the ALTER TABLE statement to temporarily suspend constraints checking. </p>
<p>
Two conditions cause an error to be returned: when ALL is specified and no constraints exist and when the specified constraint does not exist. </p>
<p>
Once all data modifications are made, you can use the ALTER TABLE statement to reestablish constraint checking.  </p>
<p>
For more information about foreign keys or the ALTER TABLE statement, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.  </p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Add a Constraint</h5>
<p>
This example reviews adding a constraint. The foreign key constraint <i>pub_id </i>is added to the <i>titles</i> table.</p>
<pre>ALTER TABLE titles
ADD
CONSTRAINT FK_pub_id FOREIGN KEY (pub_id) 
REFERENCES publishers(pub_id)
<b><i>  </i></b></pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Disable a Constraint</h5>
<p>
This example disables the <i>ssn_constraint</i> in the <i>authors</i> table.</p>
<pre>ALTER TABLE authors
    NOCHECK CONSTRAINT ssn_constraint
<b><i>  </i></b></pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Enable a Constraint</h5>
<p>
This example enables the <i>ssn_constraint</i> in the <i>authors</i> table.</p>
<pre>ALTER TABLE authors
    CHECK CONSTRAINT ssn_constraint
<b><i>  </i></b></pre>
<h4>Permission</h4>
<p>
Only the system administrator, the database owner, and the table owner can use the ALTER TABLE statement. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UPDATE Statement</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_update_statement_addnfeat"></a>UPDATE Statement (version 6.5)</h2>
<p>
Changes data in existing rows, either by adding new data or by modifying existing data. You must use aliases to distinguish between updates of tables and columns with the same names. </p>
<p>
For additional syntax information for the <a href="../../../tsqlref/src/tsql29_6mlw.htm">UPDATE statement</a>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>
<h4>Syntax</h4>
<p>
UPDATE {<i>table_name</i> | <i>view_name</i>}<br>
SET<br>
&nbsp;&nbsp;&nbsp;&nbsp;[<i>column_name</i> <b>=</b> {<i>column_list</i> | <i>variable_list</i> | <i>variable_and_column_list</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> <i>column_name2</i> <b>=</b> {<i>column_list2</i> | <i>variable_list2</i> | <br>
<i>variable_and_column_list2</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;...[<b>,</b> <i>column_nameN</i> <b>= </b>{<i>column_listN</i> | <i>variable_listN</i> <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_and_column_listN</i>}]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>expression</i>]<br>
[FROM {<i>table_name1</i> | <i>view_name1</i>}[<b>(</b><i>optimizer_hints</i><b>)</b>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> {<i>table_name2</i> | <i>view_name2</i>}[<b>(</b><i>optimizer_hints</i><b>)</b>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[...<b>,</b> {<i>table_name16</i> | <i>view_name16</i>}[<b>(</b><i>optimizer_hints</i><b>)</b>]]]]</p>
<p>
where 
<dl>
<dt>
<i>table_name</i> | <i>view_name</i> = <br>
[[<i>database_name</i><b>.</b>]<i>owner</i><b>.</b>]{<i>table_name</i> | <i>view_name</i>}</dt>
<dd>
Specifies the name of the table or view used in the UPDATE statement.</dd>
<dt>
SET</dt>
<dd>
Is a required keyword used to introduce the list of column or variable clauses to be updated.</dd>
<dt>
<i>column_name </i>=</dt>
<dd>
Specifies a column from the table (<i>table_name</i>) or view (<i>view_name</i>).</dd>
<dt>
<i>column_list</i> <b>=</b></dt>
<dd>
<i>column_name</i> <b>= </b>{<i>expression</i> | DEFAULT | NULL}</dd>
<dt>
<i>variable_list</i> =</dt>
<dd>
<i>variable_name</i> = {<i>expression</i> | NULL} </dd>
<dt>
<i>expression</i></dt>
<dd>
Is a <i>column_name</i>, constant, function (aggregate functions are not allowed), or any combination of <i>column_names</i>, constants, and functions connected by an operator(s) or a subquery.</dd>
<dt>
DEFAULT</dt>
<dd>
Specifies the default value for that column.</dd>
<dt>
<i>variable_and_column_list</i> =<br>
<i>variable_name</i> = <i>column_name</i> = {<i>expression</i> | NULL | DEFAULT}</dt>
<dd>
Specifies local variables as well as columns.</dd>
<dt>
WHERE clause =<br>
WHERE {<i>search_conditions</i> | CURRENT OF <i>cursor_name</i>}</dt>
<dd>
Is used to do a searched update (using <i>search_conditions</i>) or a positioned update (using CURRENT OF <i>cursor_name</i>).</dd>
<dt>
<i>search_conditions</i></dt>
<dd>
Specifies the criteria for a searched update.</dd>
<dt>
CURRENT OF <i>cursor_name</i></dt>
<dd>
Specifies the criteria for a positioned update against the current row within the specified <i>cursor_name</i>.</dd>
<dt>
FROM </dt>
<dd>
Specifies the table(s) and view(s) that are used in the SELECT statement. FROM is required except when the <i>table_name</i> or <i>view_name</i> contains only constants, variables, and arithmetic expressions (no column names). The FROM clause supports a maximum of 16 tables and views. Tables in subqueries are included in this total.</dd>
<dt>
<i>table_name1</i> | <i>view_name1</i> = <br>
[[<i>database</i><b>.</b>]<i>owner</i><b>.</b>]{<i>table_name</i><b>. </b>| <i>view_name</i><b>.</b>}</dt>
<dd>
Specifies the name(s) of the table(s) and view(s) that are used in the UPDATE statement. If the list contains more than one table or view, delimit the names with commas. If the table(s) or view(s) exist in another database(s), use a fully qualified table or view name (<i>database_name</i><b>.</b><i>owner</i><b>.</b><i>object_name</i>).
<p>
Each <i>table_name</i> or <i>view_name</i> can be given an alias, either for convenience or to distinguish a table or view in a self-join or subquery. Aliases (when defined) must be used for ambiguous column references and must match the alias reference (the full table name cannot be used if an alias has been defined). To use an alias, specify the object name, a space, and then the alias name as follows:

<pre>UPDATE titles
SET t.ytd_sales = t.ytd_sales + qty
FROM titles t, sales s
WHERE t.title_id = s.title_id
</pre>

<p>
The order of the tables and views after the FROM keyword does not affect the results set returned.
</dd>
<dt>
<i>optimizer_hints</i></dt>
<dd>
Specify that a locking method, an index, or no index (table scan) be used by the optimizer with this table and for this UPDATE. Although this is an allowable option, the optimizer will usually pick the best optimization method.
<p>
An <i>optimizer_hint</i> can be one or more of the following.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%>Option</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>TABLOCK</td>
<td width=52%>Performs an exclusive lock on the table that is held until the end of command. TABLOCKX can be substituted for TABLOCK.</td>
</tr>
<tr valign=top>
<td width=48%>PAGLOCK</td>
<td width=52%>Performs exclusive page locks where a single exclusive table lock would normally be taken.</td>
</tr>
<tr valign=top>
<td width=48%>TABLOCKX</td>
<td width=52%>Performs an exclusive lock on the table that is held until the end of command. TABLOCK may be substituted for TABLOCKX.</td>
</tr>
</table><br>



<p>
<b>Important</b>  Some of the optimizer hints can be used in combination. (For example, TABLOCK and PAGLOCK). When multiple options are specified, separate them with a space; the more restrictive option will take precedence.

</dd>
</dl>
<h4>Remarks</h4>
<p>
The update table must be unambiguous for updates to occur. If two tables in a query have the same column name, use aliases to distinguish them.  </p>
<p>
If aliases are used, the UPDATE statement will cause an error when the table that should be updated is ambiguous. Trace flag 110 will disable these changes. </p>
<p>
For more information about trace flag 110, see <a href="addnfeat_76t0.htm">Trace Flags</a>. </p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Reference the Same Table Twice in the UPDATE Statement</h5>
<p>
This example references the same table twice in the WHERE clause or different tables with the same name. In earlier versions, changes were made to the first occurrence of the table. In version 6.5 an error message is returned. </p>
<pre>Table stockref</pre>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=31%><pre>id</pre>
</td>
<td width=33%><pre>qty</pre>
</td>
<td width=36%><pre>type</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>1</pre>
</td>
<td width=33%><pre>10</pre>
</td>
<td width=36%><pre>'a'</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>2</pre>
</td>
<td width=33%><pre>10</pre>
</td>
<td width=36%><pre>'a'</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>3</pre>
</td>
<td width=33%><pre>10</pre>
</td>
<td width=36%><pre>'a'</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>4</pre>
</td>
<td width=33%><pre>10</pre>
</td>
<td width=36%><pre>'a'</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>1</pre>
</td>
<td width=33%><pre>30</pre>
</td>
<td width=36%><pre>'b'</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>2</pre>
</td>
<td width=33%><pre>40</pre>
</td>
<td width=36%><pre>'b'</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>3</pre>
</td>
<td width=33%><pre>50</pre>
</td>
<td width=36%><pre>'b'</pre>
</td>
</tr>
<tr valign=top>
<td width=31%><pre>4</pre>
</td>
<td width=33%><pre>60</pre>
</td>
<td width=36%><pre>'b'</pre>
</td>
</tr>
</table><br>
<pre>update stockref 
set s2.qty = s1.qty
from stockref s1, stockref s2
where s1.id = s2.id and 
      s1.type = 'a' and 
      s2.type = 'b'
</pre>
<p>
This SELECT statement divides the <i>stockref</i> table into two parts, the<i> </i>'a' range and the 'b' range, matches them on the <i>id</i> field and then copies the <i>qty</i> value from the 'b' range and replaces the <i>qty</i> values in the 'a' range. The UPDATE <i>stockref</i> section of the syntax is ambiguous because it does not specify whether to update the 'a' range or the 'b' range. </p>
<p>
The SET s2.qty = s1.qty section of syntax specifies which range to update. In order to avoid an error, use an alias on the ambiguous table reference to indicate which range of the <i>stockref</i> table to update.</p>
<pre>UPDATE s2
SET s2.qty = s1.qty
FROM stockref s1, stockref s2
WHERE s1.id = s2.id AND
s1.type = 'a' AND
s2.type = 'b
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Use Optimizer Hints</h5>
<p>
This example uses the PAGLOCK <i>optimizer_hint</i> to use a shared page lock when updating the author's last name from Yokohama to Yokomoto in the <i>authors</i> table.</p>
<pre>UPDATE authors
SET au_lname = 'Yokohama'
FROM authors(PAGLOCK)
WHERE au_lame = 'Yokomoto'
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

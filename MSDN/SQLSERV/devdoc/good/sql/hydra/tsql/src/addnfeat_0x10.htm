<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Distributed Transactions</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_distributed_transactions_addnfeat"></a>Distributed Transactions (version 6.5)</h1>
<p>
Distributed transactions are transactions that update data on two or more network-connected computer systems and are available as part of Microsoft Distributed Transaction Coordinator (MS DTC). Distributed transactions provide an interface to applications that update distributed data. MS DTC provides this by employing the "ACID" properties: atomicity, consistency, isolation, and durability.  </p>
<p>
<i>Atomicity</i> provides an <i>all or nothing</i> property to a transaction. At any point before the transaction is committed, either the application or the system can terminate the transaction. If the transaction is terminated, the system ensures that all effects of the transaction are undone. If the transaction is committed, the system ensures that all targets of the transaction are committed.</p>
<p>
<i>Consistency</i> is preserved if a transaction transforms the data from one correct state to another. The application programmer can write procedures that ensures that the work done within a transaction preserves consistency.</p>
<p>
<i>Isolation</i> prevents concurrent updates from interfering with one another. Generally, data read for a transaction cannot be updated by other concurrent transactions. Also, data written by a transaction cannot be read or updated by other concurrent transactions until the transaction is committed.</p>
<p>
<i>Durability</i> ensures that committed transactions remain permanent even in the event of hardware, software, or network failures.</p>
<p>
Distributed transactions are an essential tool for building robust, scalable, distributed applications. Distributed applications are vulnerable to hardware, software, and network failure. In the absence of distributed transactions, the application must detect and recover from these failures. Distributed transactions, however, permit distributed data to be updated while providing simple failure recovery semantics to the application. </p>
<p>
For example, consider an order-entry system for compact discs. When an order is placed at headquarters, it is entered into the local (<i>headquarter</i>) database. The order details are transmitted to the database at the warehouse where the compact disc distribution actually occurs. All orders committed locally must have a parallel order committed remotely at the warehouse. Distributed transactions ensure that the order transaction is committed or rolled back in both databases. To ensure consistency in the <i>headquarters</i> database and the <i>warehouse</i> database, the server-to-server procedure calls will be in a single atomic transaction. </p>
<p>
To participate in a transaction that is distributed by MS DTC in an MS DTC distributed transaction, the server must be instructed to participate in a distributed transaction and to inform MS DTC of that participation. SQL Server's participation in an MS DTC transaction can be started by any of the following: 
<ul>
<li>
By a client application calling API functions from a DB-Library or an ODBC program.</li>
<li>
By using the BEGIN DISTRIBUTED TRANSACTION statement. This statement begins a new MS DTC transaction.</li>
<li>
By enabling the remote REMOTE_PROC_TRANSACTIONS<b> </b>option in the SET statement. For more information, see <a href="../../../tsqlref/src/tsql12_8mt0.htm">Set Statement</a>. </li>
</ul>
<p>
<b>Important</b>  Connected servers need a time-out period to shut down an inactive connection. Otherwise, the servers remain connected until the originating user's session is terminated. </p>
<p>
To set a time-out period before you begin a transaction, use the <a href="addsproc_0put.htm"><b>sp_configure</b> stored procedure</a> with the <b>'remote conn timeout'</b> option. </p>
<p>
A BEGIN DISTRIBUTED TRANSACTION affects subsequent Transact-SQL statements.  </p>
<p>
These are the statements that are affected by MS DTC.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%>Statement</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>BEGIN TRANSACTION</td>
<td width=52%>The statements included between BEGIN DISTRIBUTED TRANSACTION and COMMIT TRANSACTION can include nested pairs of BEGIN TRANSACTION and COMMIT TRANSACTION statements. The transactions are not committed until the outermost transaction is committed. The nesting level of transactions is stored in the @@TRANCOUNT global variable. Each call to BEGIN TRANSACTION increases the outstanding transaction count by one.</td>
</tr>
<tr valign=top>
<td width=48%>BEGIN DISTRIBUTED TRANSACTION</td>
<td width=52%>BEGIN DISTRIBUTED TRANSACTION statements cannot be nested. SQL Server will detect such calls, reject them, and report an error. </td>
</tr>
<tr valign=top>
<td width=48%>COMMIT TRANSACTION</td>
<td width=52%>If the outstanding transaction count is one and this SQL Server session initiated the distributed transaction, then SQL Server calls MS DTC and commits the distributed transaction. Each call to COMMIT TRANSACTION decreases the outstanding transaction count by one.</td>
</tr>
<tr valign=top>
<td width=48%>PREPARE TRANSACTION</td>
<td width=52%>The PREPARE TRANSACTION statement is not permitted in a distributed transaction and will return an error.</td>
</tr>
<tr valign=top>
<td width=48%>ROLLBACK TRANSACTION</td>
<td width=52%>A distributed transaction can be rolled back when the ROLLBACK TRANSACTION statement is executed before the COMMIT TRANSACTION. MS DTC aborts the entire distributed transaction when the outstanding transaction count is one. </td>
</tr>
<tr valign=top>
<td width=48%>SAVE TRANSACTION</td>
<td width=52%>MS DTC does not support distributed savepoints. If an MS DTC transaction is aborted or rolled back, the entire transaction is rolled back to the beginning of the distributed transaction, regardless of any savepoints.</td>
</tr>
</table><br>
<p>
Any user involved in a distributed transaction can roll back the transaction. However, only the user who started the transaction can commit the transaction. </p>
<p>
For more information about distributed transactions, see the <i>Guide to Microsoft Distributed Transaction Coordinator</i>. </p>
<h4>Example</h4>
<p>
This example updates the author's last name on the local and remote databases. Both the local and remote databases will either commit or roll back the transaction. </p>
<pre>BEGIN DISTRIBUTED TRANSACTION
UPDATE authors
    SET au_lname = 'McDonald' WHERE au_id = '409-56-7008'
EXECUTE remote.pubs.dbo.changeauth_lname '409-56-7008','McDonald'
COMMIT TRAN
<b><i>  </i></b></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

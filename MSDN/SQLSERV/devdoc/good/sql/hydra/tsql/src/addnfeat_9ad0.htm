<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SET Statement</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_set_statement_addnfeat"></a>SET Statement (version 6.5)</h2>
<p>
Sets SQL Server query-processing options for the duration of the user's work session or for the duration of a running trigger or a stored procedure.  </p>
<p>
For additional syntax information for the <a href="../../../tsqlref/src/tsql12_8mt0.htm">SET statement</a>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.  </p>
<p>
The SET statement provides these options.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%></th>
<th align=left width=53%></th>
</tr>
<tr valign=top>
<th align=left width=47%></th>
<th align=left width=53%></th>
</tr>
<tr valign=top>
<th align=left width=47%>Options</th>
<th align=left width=53%>Description</th>
</tr>
<tr valign=top>
<td width=47%>ANSI_DEFAULTS</td>
<td width=53%>Sets options that control ANSI-compliant behavior.</td>
</tr>
<tr valign=top>
<td width=47%>ANSI_NULLS</td>
<td width=53%>Controls NULL handling by using equality operators.</td>
</tr>
<tr valign=top>
<td width=47%>ANSI_PADDING</td>
<td width=53%>Controls padding of variables.</td>
</tr>
<tr valign=top>
<td width=47%>ANSI_WARNINGS</td>
<td width=53%>Controls truncation and NULL in aggregate warnings.</td>
</tr>
<tr valign=top>
<td width=47%>CURSOR_CLOSE_ON_COMMIT</td>
<td width=53%>Controls behavior of cursors once a commit has been performed.</td>
</tr>
<tr valign=top>
<td width=47%>DISABLE_DEF_CNST_CHK</td>
<td width=53%>Controls interim constraint checking.</td>
</tr>
<tr valign=top>
<td width=47%>FIPS_FLAGGER <i>level</i></td>
<td width=53%>Specifies the level of ANSI compliance that triggers a warning message. The <i>level</i> parameter can be ENTRY, INTERMEDIATE, FULL, or OFF.</td>
</tr>
<tr valign=top>
<td width=47%>IMPLICIT_TRANSACTIONS</td>
<td width=53%>Controls whether a transaction is started implicitly when a statement is executed.</td>
</tr>
<tr valign=top>
<td width=47%>NUMERIC_ROUNDABORT</td>
<td width=53%>Controls transaction behavior once a loss-of-precision condition has occurred.</td>
</tr>
<tr valign=top>
<td width=47%>REMOTE_PROC_TRANSACTIONS</td>
<td width=53%>When enabled, specifies that if a user-defined transaction is active, an MS DTC transaction will start if a remote stored procedure is executed.</td>
</tr>
<tr valign=top>
<td width=47%>ROWCOUNT</td>
<td width=53%>Accepts <i>int</i>, <i>tinyint</i>, and <i>smallint</i> variables for the parameter that sets the number of rows to be returned in the results set.</td>
</tr>
<tr valign=top>
<td width=47%>XACT_ABORT</td>
<td width=53%>Controls whether a full transaction termination occurs when an error condition is raised.</td>
</tr>
</table><br>
<h4>Syntax</h4>
<p>
<b>Option syntax:</b> </p>
<p>
SET {<br>
ANSI_DEFAULTS {ON | OFF}<br>
| ANSI_NULLS {ON | OFF}<br>
| ANSI_PADDING {ON | OFF}<br>
| ANSI_WARNINGS {ON | OFF}<br>
| CURSOR_CLOSE_ON_COMMIT {ON | OFF}<br>
| DISABLE_DEF_CNST_CHK {ON | OFF}<br>
| FIPS_FLAGGER {<i>level </i>| OFF}<br>
| IMPLICIT_TRANSACTIONS {ON | OFF}<br>
| NUMERIC_ROUNDABORT {ON | OFF}<br>
| REMOTE_PROC_TRANSACTIONS {ON | OFF}<br>
| ROWCOUNT {<i>number</i> | @<i>int_variable</i>}<br>
| XACT_ABORT{ON <b>|</b> OFF}}</p>
<p>
where 
<dl>
<dt>
ANSI_DEFAULTS</dt>
<dd>
Specifies ANSI-standard behavior.
<p>
When enabled, this option enables all the ANSI options, including:

<table cellspacing=4 cols=2>
<tr valign=top>
<td width=32%>ANSI_NULLS</td>
<td width=68%>ARITHABORT</td>
</tr>
<tr valign=top>
<td width=32%>ANSI_NULL_DFLT_ON</td>
<td width=68%>CURSOR_CLOSE_ON_COMMIT</td>
</tr>
<tr valign=top>
<td width=32%>ANSI_PADDING</td>
<td width=68%>IMPLICIT_TRANSACTIONS</td>
</tr>
<tr valign=top>
<td width=32%>ANSI_WARNINGS</td>
<td width=68%>QUOTED_IDENTIFIER</td>
</tr>
</table><br>


<p>
All of these ANSI-standard SET options define the query processing environment for the duration of the user's work session, a running trigger, or a stored procedure.
</dd>
<dt>
ANSI_NULLS</dt>
<dd>
Specifies ANSI-standard behavior of the comparison operators, EQUAL (=) and NOT EQUAL (&lt;&gt;). 
<p>
When ANSI_NULLS is enabled, the equal and not equal comparison operators exhibit new behavior. ANSI standards require that a null behaves like a null value in any mathematical context. That is, NULL in any statement causes the statement to evaluate to NULL. 

<p>
Once you enable the ANSI_NULLS option, you must use the comparison operators IS NULL and IS NOT NULL to compare for a null value.

<p>
When ANSI_NULLS is enabled, the SELECT statement syntax will not accept NULL as an argument. For example, if ANSI_NULLS is enabled, this statement does not work if NULL is passed as the department parameter:

<pre>CREATE PROCEDURE get_employees (@department CHAR(30)) AS
SELECT * FROM department WHERE department.name=@department
<b><i>  </i></b></pre>

<p>
This procedure returns rows where the <i>department</i> column matches the <i>@department</i> parameter. When ANSI_NULLS is enabled, the procedure must be rewritten for the instances where the <i>@department </i>parameter is a null value, as follows:

<pre>CREATE PROCEDURE get_employees (@department CHAR(30)) AS
IF (@department IS NULL)
SELECT * FROM department WHERE department.name IS NULL
ELSE
SELECT * FROM department WHERE department.name=@department
<b><i>  </i></b></pre>
</dd>
<dt>
ANSI_PADDING</dt>
<dd>
Specifies padding of values.
<p>
When enabled, the ANSI_PADDING causes <i>varchar</i> and <i>varbinary</i> values to be padded with spaces or nulls. It also affects fixed-length datatypes such as <i>char</i> or <i>int</i>. If the user specifies that columns of fixed-length datatypes (<i>char</i>, <i>int</i>, <i>tinyint</i>, <i>smallint</i>) can be NULL, ANSI_PADDING causes these columns to be padded in the event of a null value.


<p>
<b>Note</b>  If a table is created while ANSI_PADDING is enabled, the table column will exhibit the padding behavior. Disabling ANSI_PADDING has no effect on existing columns.

</dd>
<dt>
ANSI_WARNINGS</dt>
<dd>
Specifies that warnings be generated when:
<ul>
<li>
Null values appear in aggregate functions such as SUM, AVG, MAX, MIN, or COUNT. </li>
<li>
An insert or update is attempted on a character (or binary) column and the current length of the new value exceeds the maximum allowed by that column. The insert or update is aborted as specified by the ANSI SQL-92 standard. Trailing blanks are ignored for character columns and trailing nulls are ignored for binary columns.</li>
<li>
Divide-by-zero and arithmetic overflow errors occur.</li>
</ul>

<p>
For more information about controlling ANSI_WARNINGS, see <a href="addsproc_0put.htm"><b>sp_configure</b></a>. 
</dd>
<dt>
CURSOR_CLOSE_ON_COMMIT</dt>
<dd>
Specifies that the cursor be closed once a transaction has been committed or rolled back. Closes any open cursors on commit or rollback and permits procedures to comply with ANSI NIST standards. </dd>
<dt>
DISABLE_DEF_CNST_CHK</dt>
<dd>
Specifies interim deferred violation checking. 
<p>
An interim violation occurs when constraints are being violated during data modifications. Sometimes these violations are temporary and will no longer exist by the time the data modification concludes. This option suspends reporting of these temporary violations.

<p>
This option also can enhance performance. In rare cases, users cannot modify multiple rows because the query runs out of work tables. Work tables are used by the system to resolve suspect constraint violations while processing data modifications. By turning ON the DISABLE_DEF_CNST_CHK option, you can turn off interim constraint checking, which in turn prevents the query from generating interim work tables.

<p>
Once DISABLE_DEF_CNST_CHK is set, its new setting is used for the duration of the user's work session or until its value is changed.
</dd>
<dt>
FIPS_FLAGGER</dt>
<dd>
Specifies checking for compliance with ANSI SQL-92 FIPS 127-2 standards.
<dl>
<dt>
<i>level </i>| OFF</dt>
<dd>
Is the level of compliance to ANSI SQL standards that is checked for in all database operations. If a database operation conflicts with the level of ANSI SQL standards chosen, a warning is generated. 
<p>
The <i>level</i> must be ENTRY, INTERMEDIATE, or FULL as described in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%>Level</th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%>ENTRY</td>
<td width=72%>Standards checking for ANSI SQL entry-level compliance.</td>
</tr>
<tr valign=top>
<td width=28%>INTERMEDIATE</td>
<td width=72%>Standards checking for ANSI SQL intermediate-level compliance.</td>
</tr>
<tr valign=top>
<td width=28%>FULL</td>
<td width=72%>Standards checking for full ANSI SQL compliance.</td>
</tr>
</table><br>


<p>
If checking is turned OFF, no standards checking occurs.
</dd>
</dl>
</dd>
<dt>
IMPLICIT_TRANSACTIONS</dt>
<dd>
Specifies implicit transactions.
<p>
Setting IMPLICIT_TRANSACTIONS opens an implicit transaction when the following statements are used: 

<table cellspacing=4 cols=2>
<tr valign=top>
<td width=32%>FETCH</td>
<td width=68%>ALTER TABLE </td>
</tr>
<tr valign=top>
<td width=32%>DELETE</td>
<td width=68%>INSERT</td>
</tr>
<tr valign=top>
<td width=32%>CREATE</td>
<td width=68%>OPEN</td>
</tr>
<tr valign=top>
<td width=32%>GRANT</td>
<td width=68%>REVOKE</td>
</tr>
<tr valign=top>
<td width=32%>DROP</td>
<td width=68%>TRUNCATE TABLE</td>
</tr>
<tr valign=top>
<td width=32%>SELECT</td>
<td width=68%>UPDATE</td>
</tr>
</table><br>

</dd>
</dl>
<p>
When this option is turned on and if there are no outstanding transactions already, every ANSI SQL statement will automatically start a transaction. If there is an open transaction, no new transaction will be started. This transaction has to be explicitly committed by the user by using the command COMMIT TRANSACTION for the changes to take effect and locks released.
<dl>
<dt>
NUMERIC_ROUNDABORT</dt>
<dd>
Specifies rounding characteristics when a loss of precision has occurred. 
<p>
Loss of precision occurs when dividing or multiplying. It can also occur in other operations, such as addition and subtraction when the number is too large or too small to represent.

<p>
Setting NUMERIC_ROUNDABORT ON terminates any transaction that causes a loss of precision. When it is set to OFF, numeric data is rounded and the transaction continues normally.
</dd>
<dt>
REMOTE_PROC_TRANSACTIONS</dt>
<dd>
Specifies that when a user-defined transaction is active, an MS DTC transaction will be started when a remote stored procedure is executed.</dd>
<dt>
XACT_ABORT</dt>
<dd>
Specifies termination handling for the current procedure. 
<p>
Setting XACT_ABORT ON terminates the transaction if any error is encountered. If one statement raises an error, the entire transaction is terminated and rolled back.

<p>
Setting XACT_ABORT option is set to OFF terminates only the SQL statement that raised the error. The transaction will continue.

</dd>
</dl>
<h4>Remarks</h4>
<p>
Using the SET statement inside a trigger or stored procedure causes the option to revert to its previous setting after a trigger or stored procedure is executed. </p>
<p>
Options changed with the SET statement take effect at the end of the batch. You can combine SET statements and queries in the same batch, but the SET options won't apply to queries in the batch. </p>
<p>
Many of these SET options define the query processing environment for the duration of the user's work session or for the duration of a running trigger or stored procedure.  </p>
<p>
You can also set these options by using <b>sp_configure 'user options'</b>. For information about using <b>sp_configure 'user options'</b>, see <a href="addsproc_0put.htm"><b>sp_configure</b></a>.  </p>
<p>
For information about viewing these option settings, see <a href="addnfeat_4okl.htm">@@OPTIONS Global Variable</a>. </p>
<h4>Example</h4>
<pre>SET ANSI_WARNINGS ON
<b><i>  </i></b></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

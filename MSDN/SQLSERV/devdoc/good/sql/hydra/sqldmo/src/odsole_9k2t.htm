<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>sp_OACreate</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_sp_oacreate"></a>sp_OACreate</h2>
<p>
Creates an OLE object on the SQL Server computer.</p>
<h4>Syntax</h4>
<p>
<b>sp_OACreate</b> {<i>progid</i> | <i>clsid</i>}<b>,</b> <i>objecttoken</i> OUTPUT [<b>,</b> <i>context</i>]</p>
<p>
where
<dl>
<dt>
<i>progid</i></dt>
<dd>
Is the programmatic identifier (ProgID) of the OLE object to create. This character string describes the class of the OLE object and has the following form:
<p>
<b>'</b><i>OLEComponent</i><b>.</b><i>Object</i><b>'</b>

<p>
<i>OLEComponent</i> is the component name of the OLE Automation server, and <i>Object</i> is the name of the OLE object. The specified OLE object must be creatable and must support the <b>IDispatch</b> interface.

<p>
For example, 'SQLOLE.SQLServer' is the ProgID of the SQL-DMO SQLServer object. SQL-DMO has a component name of SQLOLE, the SQLServer object is creatable, and (like all SQL-DMO objects) the SQLServer object supports <b>IDispatch</b>.
</dd>
<dt>
<i>clsid</i></dt>
<dd>
Is the class identifier (CLSID) of the OLE object to create. This character string describes the class of the OLE object and has the form:
<p>
<b>'{</b><i>nnnnnnnn</i><b>-</b><i>nnnn</i><b>-</b><i>nnnn</i><b>-</b><i>nnnn</i><b>-</b><i>nnnnnnnnnnnn</i><b>}'</b>

<p>
The specified OLE object must be creatable and must support the <b>IDispatch</b> interface.

<p>
For example, '{00026BA1-0000-0000-C000-000000000046}' is the CLSID of the SQL-DMO SQLServer object.
</dd>
<dt>
<i>objecttoken</i> OUTPUT</dt>
<dd>
Is the returned object token. It must be a local variable of datatype <i>int</i>. This object token identifies the created OLE object and is used in calls to the other OLE Automation stored procedures.</dd>
<dt>
<i>context</i></dt>
<dd>
Specifies the execution context that the newly created OLE object will run in. If specified, this value must be one of the following:
<p>
1In-process (.DLL) OLE server only<br>
4Local (.EXE) OLE server only<br>
5Both in-process and local OLE server allowed

<p>
If not specified, the default value is 5. This value is passed as the <i>dwClsContext</i> parameter of the call to <b>CoCreateInstance</b>.

<p>
If an in-process OLE server is allowed (by using a <i>context</i> value of 1 or 5 or by not specifying a <i>context</i> value), it has access to memory and other resources owned by SQL Server. An in-process OLE server that is badly behaved might damage SQL Server memory or resources and cause unpredictable results such as a SQL Server access violation.

<p>
When you specify a <i>context</i> value of 4, a local OLE server does not have access to any SQL Server resources, and it cannot damage SQL Server memory or resources.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The created OLE object is automatically destroyed at the end of the Transact-SQL statement batch.</p>
<p>
This procedure returns a 0 when successful or a non-zero HRESULT when an error occurs.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Use Prog ID</h5>
<p>
This example creates a SQL-DMO SQLServer object by using its Prog ID.</p>
<pre>DECLARE @object int
DECLARE @hr int
EXEC @hr = sp_OACreate 'SQLOLE.SQLServer', @object OUT
IF @hr &lt;&gt; 0
BEGIN
    EXEC sp_displayoaerrorinfo @object, @hr
    RETURN
END
<b><i>  </i></b></pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Use CLSID</h5>
<p>
This example creates a SQL-DMO SQLServer object by using its CLSID.</p>
<pre>DECLARE @object int
DECLARE @hr int
EXEC @hr = sp_OACreate '{00026BA1-0000-0000-C000-000000000046}',
    @object OUT
IF @hr &lt;&gt; 0
BEGIN
    EXEC sp_displayoaerrorinfo @object, @hr
    RETURN
END
<b><i>  </i></b></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

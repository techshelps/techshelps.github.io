<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_debugging"></a>Debugging</h2>
<p>
You can debug a custom OLE Automation server created by using 32-bit Visual Basic 4.0. To do this, Visual Basic must be installed on the SQL Server computer, and SQL Server must be running under the same Windows NT user account that Visual Basic is running under. So the SQL Server must be started from the command line and independent of the Windows NT Service Control Manager (by using the <b>sqlservr /c</b> command), or the SQL Server service must be started under the same Windows NT user account used to log on to the system.</p>
<h5><img src="../../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To debug a custom OLE Automation server</h5>
<ol>
<li>
Load your custom OLE Automation server project into Visual Basic.</li>
<li>
Set breakpoint(s) on the desired lines of source code.</li>
<li>
From the Run menu, choose Start With Full Compile.<p>
This registers and runs your custom OLE Automation server.
</li>
<li>
Use the OLE Automation stored procedures to call the OLE objects exposed by your custom OLE Automation server.<p>
When a breakpoint is hit, the Visual Basic debugger is activated.
</li>
</ol>
<p>
For more information, see your documentation for Visual Basic.</p>
<p>
<b>Note</b>  To use a custom OLE Automation server developed with 32-bit Visual Basic 4.0 with the OLE Automation stored procedures, Windows NT 3.51 or later Service Pack 4 must be installed on the SQL Server computer.</p>
<p>
A custom in-process OLE server created using 32-bit Visual Basic 4.0 must have an error handler (specified with the <b>On Error GoTo</b> statement) for the <b>Class_Initialize</b> and <b>Class_Terminate</b> subroutines. The error handlers will prevent unhandled errors from occurring in the subroutines. Unhandled errors in the <b>Class_Initialize</b> and <b>Class_Terminate </b>subroutines can cause unpredictable SQL Server problems, such as a SQL Server access violation. Error handlers for other subroutines are also recommended.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

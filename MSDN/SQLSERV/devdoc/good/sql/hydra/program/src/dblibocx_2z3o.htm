<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting an Old DB-Library for Visual Basic Project</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_porting_an_old_db.2d.library_for_visual_basic_project"></a>Porting an Old DB-Library for Visual Basic Project</h2>
<p>
To port a Visual Basic 3.0 project that uses the old 16-bit DB-Library for Visual Basic VBSQL.VBX to a Visual Basic 4.0 project that uses the new 32-bit DB-Library for Visual Basic OLE custom control VBSQL.OCX, follow these steps:
<ol>
<li>
Open the 16-bit project using Visual Basic 4.0.</li>
<li>
You will receive messages similar to the following:<pre>Can't load (or register) custom control: 'C:\SQL60\BIN\VBSQL.VBX' -- 
Continue loading project?
<b><i>  </i></b>
Custom control 'VBX.VBSQL' not found
<b><i>  </i></b>
Error loading 'C:\CODE\MAIN.FRM'. A control could not be loaded due 
to load error. Continue?
<b><i>  </i></b></pre>
<p>
In each case, choose the Yes or OK button.
</li>
<li>
If you added the old DB-Library for Visual Basic header file (VBSQL.BAS or VBSQL.BI) directly to your Visual Basic 3.0 project, you might receive a message similar to the following:<pre>File not found: 'C:\SQL60\DBLIB\INCLUDE\VBSQL.BAS' -- Continue 
loading project?
<b><i>  </i></b></pre>
<p>
This message indicates that Visual Basic could not find a VBSQL.BAS header file in the specified location. Add the new VBSQL.BAS header file to your project.
<p>
If you do not receive this message, Visual Basic found a VBSQL.BAS header file at the location specified in your old project. Ensure that it is the <i>new </i>VBSQL.BAS header file. If it is the old VBSQL.BAS header file, remove the old one, and then add the new VBSQL.BAS header file to your project.
</li>
<li>
If you pasted the <i>contents </i>of the old VBSQL.BAS header file into a separate .BAS file of your Visual Basic 3.0 project, remove the old header file contents from the separate .BAS file, and then add the new VBSQL.BAS header file to your project.</li>
<li>
The old VBSQL.VBX custom control will still be placed on a form in your project, probably as a red PictureBox control. Remove the old control from the form.<p>
Visual Basic will place your old error handling and message handling event procedures in the list of general procedures for the form. These event procedures will be named <i>control</i><b>_Error </b>and <i>control</i><b>_Message</b>, where <i>control</i> is the name of the old VBSQL.VBX custom control, for example "VBSQL1."
</li>
<li>
Add the new DB-Library for Visual Basic OLE custom control (VBSQL.OCX) to a form in your project.</li>
<li>
Copy the code from the old error handling and message handling procedures (now listed as general procedures) to the <b>Error</b> and <b>Message</b> event procedures of the new DB-Library for Visual Basic OLE custom control.<p>
Both the Error and Message event procedures have new parameters, but the existing parameters have the same names, so the old code should work unchanged.
</li>
<li>
Change all Integer values (<b>%</b>) used by DB-Library for Visual Basic to Long (<b>&amp;</b>) values. This includes DB-Library function names (if <b>%</b> was used), parameters passed to DB-Library functions, and values returned by DB-Library functions.<p>
In all of the following examples, bold text indicates the code changes you must make. For brevity, checking of return codes is not included.
<p>
For example, if your old Visual Basic project includes the following DB-Library code:
<pre>Dim LoginRec As Integer
Dim SqlConn As Integer
Dim Return As Integer
Dim SqlCommand As String
<b><i>  </i></b>
LoginRec = SqlLogin
' Fill in LoginRec
SqlConn = SqlOpen(LoginRec, "gizmo")
Return = SqlUse(SqlConn, "pubs")
SqlCommand = "select au_fname from authors"
Return = SqlCmd(SqlConn, SqlCommand)
Return = SqlExec(SqlConn)
<b><i>  </i></b></pre>
<p>
then the new code needs only the following changes:
<pre>Dim LoginRec As <b>Long</b>
Dim SqlConn As <b>Long</b>
Dim Return As <b>Long</b>
Dim SqlCommand As String
<b><i>  </i></b>
LoginRec = SqlLogin
' Fill in LoginRec
SqlConn = SqlOpen(LoginRec, "gizmo")
Return = SqlUse(SqlConn, "pubs")
SqlCommand = "select au_fname from authors"
Return = SqlCmd(SqlConn, SqlCommand)
Return = SqlExec(SqlConn)
<b><i>  </i></b></pre>
<p>
However, if your old Visual Basic project includes the following DB-Library code using the Integer datatype specifier (<b>%</b>):
<pre>LoginRec% = SqlLogin%
' Fill in LoginRec
SqlConn% = SqlOpen%(LoginRec%, "gizmo")
Return% = SqlUse%(SqlConn%, "pubs")
SqlCommand$ = "select au_fname from authors"
Return% = SqlCmd%(SqlConn%, SqlCommand$)
Return% = SqlExec%(SqlConn%)
<b><i>  </i></b></pre>
<p>
then the new code can be changed to the following, using the Long datatype specifier (<b>&amp;</b>) for DB-Library functions, parameters, and return values:
<pre>LoginRec<b>&amp;</b> = SqlLogin<b>&amp;</b>
' Fill in LoginRec
SqlConn<b>&amp;</b> = SqlOpen<b>&amp;</b>(LoginRec<b>&amp;</b>, "gizmo")
Return<b>&amp;</b> = SqlUse<b>&amp;</b>(SqlConn<b>&amp;</b>, "pubs")
SqlCommand$ = "select au_fname from authors"
Return<b>&amp;</b> = SqlCmd<b>&amp;</b>(SqlConn<b>&amp;</b>, SqlCommand$)
Return<b>&amp;</b> = SqlExec<b>&amp;</b>(SqlConn<b>&amp;</b>)
<b><i>  </i></b></pre>
<p>
Because the datatype specifiers are not required for DB-Library function names, you can change the new code to the following:
<pre>LoginRec<b>&amp;</b> = SqlLogin
' Fill in LoginRec
SqlConn<b>&amp;</b> = SqlOpen(LoginRec<b>&amp;</b>, "gizmo")
Return<b>&amp;</b> = SqlUse(SqlConn<b>&amp;</b>, "pubs")
SqlCommand$ = "select au_fname from authors"
Return<b>&amp;</b> = SqlCmd(SqlConn<b>&amp;</b>, SqlCommand$)
Return<b>&amp;</b> = SqlExec(SqlConn<b>&amp;</b>)
<b><i>  </i></b></pre>
<p>
You can also take this opportunity to change your code to use <b>Dim </b>to explicitly declare your variables, thus removing the Long specifier (<b>&amp;</b>) from each variable.
<p>
If you forget to make a required change from Integer to Long, Visual Basic will generate the following error when you run the program:
<pre>Type-declaration character does not match declared data type
<b><i>  </i></b></pre>
<p>
and the Visual Basic debugger will highlight the DB-Library function, parameter, or variable (for example, the <b>SqlSetLoginTime%</b> function or a <b>SqlConn%</b> variable) that is causing the error.
</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

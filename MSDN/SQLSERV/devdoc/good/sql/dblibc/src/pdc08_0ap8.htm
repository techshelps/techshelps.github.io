<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbqual</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbqual"></a>dbqual</h1>
<p>
Returns a pointer to a WHERE clause to update the current row in a browsable table.</p>
<h4>Syntax</h4>
<p>
<b>LPCSTR dbqual ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
INT </b><i>tabnum</i><b>, <br>
LPCSTR </b><i>tabname</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>tabnum</i></dt>
<dd>
Is the number of the table, as specified in the SELECT statement's FROM clause. Table numbers start at 1. If <i>tabnum</i> is -1, the <i>tabname</i> parameter is used to identify the table.</dd>
<dt>
<i>tabname</i></dt>
<dd>
Is a pointer to the null-terminated name of a table specified in the SELECT statement's FROM clause. If <i>tabname</i> is NULL, the <i>tabnum</i> parameter is used to identify the table.
</dd>
</dl>
<h4>Returns</h4>
<p>
A pointer to a null-terminated WHERE clause for the current row in the specified table. This buffer is dynamically allocated, and the application must free it by calling <b>dbfreequal</b>. If <b>dbqual</b> is asked to construct a WHERE clause for a table that cannot be browsed, it returns a NULL pointer. For details, see "<b>dbtabbrowse</b>."</p>
<h4>Remarks</h4>
<p>
The <b>dbqual</b> function is one of the DB-Library browse-mode functions. For a discussion of browse mode, see <a href="pdc01_1xo1.htm">Getting Started</a>. </p>
<p>
The <b>dbqual</b> function provides a WHERE clause that the application can use to update a single row in a browsable table. Columns from this row must have been previously retrieved through a browse-mode SELECT query.</p>
<p>
The WHERE clause produced by <b>dbqual</b> begins with the keyword WHERE and contains references to the row's unique index and timestamp column. The application appends the WHERE clause to an UPDATE or DELETE statement without needing to examine or manipulate it in any way.</p>
<p>
The timestamp column indicates the time that the particular row was last updated. An update on a browsable table fails if the timestamp column in the <b>dbqual</b>-generated WHERE clause is different from the timestamp column in the table. Such a condition, which provokes SQL Server error message 532, indicates that another user updated the row between the time this application selected it for browsing and the time it tried to update it. The application itself must provide the logic for handling the update failure. For one approach, see the example in the next section.</p>
<p>
The <b>dbqual</b> function can construct WHERE clauses only for tables that can be browsed. Use <b>dbtabbrowse</b> to determine whether a table can be browsed.</p>
<p>
The <b>dbqual</b> function is usually called after <b>dbnextrow</b>.</p>
<h4>Example</h4>
<p>
This code fragment shows what to do when a browse-mode update fails because another user has already updated the row. This example retrieves the entire row again, allows the user to examine and modify it, and tries the update again.</p>
<p>
Note that <i>q_dbproc</i> is the DBPROCESS used to query the database, and <i>u_dbproc</i> is the DBPROCESS used to update the database.</p>
<pre>// First, find out which employee record the user wants to update. 
employee_id = which_employee();
while (1)
{
    // Retrieve that employee record from the database.
    // Assume that "empid" is a unique index, so this query will
    // return only one row.
    
    dbfcmd
    (q_dbproc,
    "select * from employees where empid = %d for browse",
    employee_id);
    dbsqlexec(q_dbproc);
    dbresults(q_dbproc);
    while (dbnextrow(q_dbproc)
        != NO_MORE_ROWS);

    // Now, let the user examine or edit the employee's
    // data, first placing the data into the program variables.
    
    extract_employee_data(q_dbproc, employee_struct);
    examine_and_edit(employee_struct, &amp;edit_flag);

    if (edit_flag == FALSE)
    {
        // The user didn't edit this record,
        // so it's done.
        
        break;
    }
    else
    {
        // The user edited this record, so the application
        // uses the edited data to update the corresponding row
        // in the database.
         
        qualptr = dbqual(q_dbproc, -1, "employees");
        dbcmd(u_dbproc, "update employees");
        dbfcmd
        (u_dbproc,
        " set address = '%s', salary = %d %s",
        employee_struct-&gt;address, employee_struct-&gt;salary,
        qualptr);
        dbfreequal(qualptr);
        if ((dbsqlexec(u_dbproc) == FAIL)
        || (dbresults(u_dbproc) == FAIL))

        {
            // The update failed. In a real program, it
            // would be necessary to examine the messages
            // returned from SQL Server to determine
            // why it failed. In this example, 
            // assume that the update failed because
            // someone else has already updated this
            // row, thereby changing the timestamp.
            //
            // To cope with this situation, repeat
            // the loop, retrieving the changed row
            // for the user to examine and edit.
            // This will give the user the opportunity 
            // to decide whether to overwrite
            // the change made by the other user.
            
            continue;
        }
        else
        {
            // The update succeeded, so the
            // application is done. 
            break;
        }
    }
}
</pre>
<h4>See Also</h4>
<p>
<a href="pdc08_7gv9.htm"><b>dbcolbrowse</b></a>, <a href="pdc08_065h.htm"><b>dbcolsource</b></a>, <a href="pdc04c_0mgc.htm"><b>dbfreequal</b></a>, <a href="pdc04d_0fqv.htm"><b>dbnextrow</b></a>, <a href="pdc08_91ut.htm"><b>dbtabbrowse</b></a>, <a href="pdc08_3v1w.htm"><b>dbtabcount</b></a>, <a href="pdc08_9did.htm"><b>dbtabname</b></a>, <a href="pdc08_1r51.htm"><b>dbtabsource</b></a>, <a href="pdc08_95wu.htm"><b>dbtsnewlen</b></a>, <a href="pdc08_01bg.htm"><b>dbtsnewval</b></a>, <a href="pdc08_7wdw.htm"><b>dbtsput</b></a>; <a href="pdc09_7e7t.htm">Bulk-Copy Functions</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

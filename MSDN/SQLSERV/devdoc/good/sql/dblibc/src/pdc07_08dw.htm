<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbwritetext</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbwritetext"></a>dbwritetext</h1>
<p>
Sends a <i>text </i>or <i>image </i>value to SQL Server.</p>
<h4>Syntax</h4>
<p>
<b>RETCODE dbwritetext ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
LPCSTR </b><i>objname</i><b>, <br>
LPCDBBINARY </b><i>textptr</i><b>, <br>
DBTINYINT </b><i>textptrlen</i><b>, <br>
LPCDBBINARY </b><i>timestamp</i><b>, <br>
BOOL </b><i>log</i><b>, <br>
DBINT </b><i>size</i><b>, <br>
LPCBYTE </b><i>text</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>objname</i></dt>
<dd>
Is the database table name and column name. Separate the table name from the column name with a period.</dd>
<dt>
<i>textptr</i></dt>
<dd>
Is the text pointer of the text or image value to be modified. Call <b>dbtxptr</b> to get this pointer. The pointer cannot be NULL.</dd>
<dt>
<i>textptrlen</i></dt>
<dd>
Is a parameter included for future compatibility. For now, define its value with the constant DBTXPLEN.</dd>
<dt>
<i>timestamp</i></dt>
<dd>
Is the text timestamp of the text or image value to be modified. Call <b>dbtxtimestamp</b> to get this timestamp. This value changes whenever the text or image value itself is changed. The pointer cannot be NULL.</dd>
<dt>
<i>log</i></dt>
<dd>
Is a boolean value, specifying whether this <b>dbwritetext</b> operation should be recorded in the transaction log.</dd>
<dt>
<i>size</i></dt>
<dd>
Is the total size, in bytes, of the text or image value to be written.</dd>
<dt>
<i>text</i></dt>
<dd>
Is a pointer to the text or image to be written. If this pointer is NULL, DB-Library expects the application to call <b>dbmoretext</b> one or more times until all <i>size</i> bytes of data have been sent to SQL Server. For 16-bit DB-Library applications, no single data block can be 64K or larger. (Win32-based DB-Library applications are not limited to 64K data blocks.) DB-Library does not support huge pointers.
</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<h4>Remarks</h4>
<p>
This function updates entire text and image values, allowing the application to send long values to SQL Server without having to copy them into a Transact-SQL UPDATE statement. In addition, it gives applications access to the text timestamp mechanism, which ensures that one user doesn't inadvertently overwrite another's modifications to the same value in the database.</p>
<p>
The <b>dbwritetext</b> function succeeds only if its <i>timestamp</i> parameter, usually obtained when the column's value was originally retrieved, matches the text column's timestamp in the database. If a match occurs, <b>dbwritetext</b> updates the text column, and at the same time updates the column's timestamp. This has the effect of governing updates by competing applications ¾ an application's <b>dbwritetext</b> call fails if a second application updated the text column between the time the first application retrieved the column and the time it called <b>dbwritetext</b>.</p>
<p>
The <b>dbwritetext</b> function is similar to the Transact-SQL WRITETEXT statement. It is usually more efficient to call <b>dbwritetext</b> than to send a WRITETEXT statement through the command buffer. For information about WRITETEXT, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<p>
The <b>dbwritetext</b> function can be invoked with or without logging, according to the value of the <i>log</i> parameter. To use <b>dbwritetext</b> with logging turned off, the database option <b>select into/bulkcopy</b> must be set to true, as shown in the following example:</p>
<pre>sp_dboption 'mbdb', 'select into/bulk', 'true'</pre>
<p>
This function, in conjunction with the <b>dbmoretext</b> function, also allows the application to send a large <i>text </i>or <i>image </i>value to SQL Server in the form of a number of smaller chunks. This is particularly useful with operating systems that are unable to allocate extremely long data buffers. All blocks must be shorter than 64K for 16-bit applications. (Win32-based DB-Library applications are not limited to 64K data blocks.) DB-Library does not support huge pointers.</p>
<p>
When <b>dbwritetext</b> is used with <b>dbmoretext</b>, it locks the specified database text column, and the lock is not released until the final <b>dbmoretext</b> has sent its data. This ensures that a second application does not read or update the text column in the middle of the first application's update.</p>
<h4>Examples</h4>
<p>
If the <i>text</i> parameter is a non-null value, <b>dbwritetext</b> executes the data transfer from start to finish, including any necessary calls to <b>dbsqlok</b> and <b>dbresults</b>.</p>
<p>
The following code fragment shows this use of <b>dbwritetext</b>:</p>
<pre>LOGINREC    *login;
DBPROCESS        *q_dbproc;
DBPROCESS        *u_dbproc;
DBCHAR            abstract_var[512];

// Open separate DBPROCESSes for querying and updating.

login = dblogin();
DBSETLUSER(login, "user");
DBSETLPWD(login, "my_passwd");
DBSETLAPP(login, "example1");
q_dbproc = dbopen(login, "my_server");
u_dbproc = dbopen(login, "my_server");

// The database column "abstract" is a text column. Retrieve the
// value of one of its rows.

dbcmd(q_dbproc, "select abstract from articles where article_id = 10");
dbsqlexec(q_dbproc);
dbresults(q_dbproc);
dbbind(q_dbproc, 1, STRINGBIND, (DBINT)0, abstract_var);

while (dbnextrow(q_dbproc) != NO_MORE_ROWS)
{
    // Change the value of "abstract_var". 
    strcpy(abstract_var, "A brand new value.");

    // Update the text column. 
    dbwritetext (u_dbproc, "articles.abstract", dbtxptr(q_dbproc, 1), 
        DBTXPLEN, dbtxtimestamp(q_dbproc, 1), TRUE, 
        (DBINT)strlen(abstract_var), abstract_var);
}
// Done. 
dbexit();</pre>
<p>
To send chunks of text or image, rather than the whole value at once, set the <i>text</i> parameter to NULL. Then, <b>dbwritetext</b> returns control to the application immediately after notifying SQL Server that a text transfer is about to begin. The actual text is sent to SQL Server with <b>dbmoretext</b>, which can be called multiple times, once for each chunk.</p>
<p>
The following code fragment uses <b>dbwritetext</b> with <b>dbmoretext</b>:</p>
<pre>LOGINREC    *login;
DBPROCESS        *q_dbproc;
DBPROCESS        u_dbproc;
DBCHAR            art1[512];
static DBCHAR    part2[512] = "This adds another sentence to the text.";

login = dblogin();
DBSETLUSER(login, "user");
DBSETLPWD(login, "my_passwd");
DBSETLAPP(login, "example2");
q_dbproc = dbopen(login, "my_server");
u_dbproc = dbopen(login, "my_server");

dbcmd(q_dbproc, "select abstract from articles where article_id = 10");
dbsqlexec(q_dbproc);
dbresults(q_dbproc);
dbbind(q_dbproc, 1, STRINGBIND, (DBINT)0, part1);

while (dbnextrow(q_dbproc) != NO_MORE_ROWS)
{
    // Change the value of part of the text column. This example 
    // adds a sentence to the end of the existing text. 
    // Update the text column. 

    dbwritetext(u_dbproc, "articles.abstract", dbtxptr(q_dbproc, 1),             DBTXPLEN, dbtxtimestamp(q_dbproc, 1), TRUE, 
        (DBINT)(strlen(part1)  strlen(part2)), NULL);
    dbsqlok(u_dbproc);
    dbresults(u_dbproc);

    // Send the update value in chunks. 

    dbmoretext(u_dbproc, (DBINT)strlen(part1), part1);
    dbmoretext(u_dbproc, (DBINT)strlen(part2), part2);

    dbsqlok(u_dbproc);
    while (dbresults(u_dbproc) != NO_MORE_RESULTS);
}
dbexit();</pre>
<p>
<b>Note</b>  Notice the required calls to <b>dbsqlok</b> and <b>dbresults</b>, between the call to <b>dbwritetext</b> and the first call to <b>dbmoretext</b> and after the final call to <b>dbmoretext</b>.</p>
<p>
When <b>dbwritetext</b> is used with <b>dbmoretext</b>, it locks the specified database text column. The lock is not released until the final <b>dbmoretext</b> has sent its data. This ensures that a second application does not read or update the text column in the midst of the first application's update.</p>
<h4>See Also</h4>
<p>
<a href="pdc07_8ygk.htm"><b>dbmoretext</b></a>, <a href="pdc07_3a7o.htm"><b>dbreadtext</b></a>, <a href="pdc04e_52sz.htm"><b>dbresults</b></a>, <a href="pdc04f_6pij.htm"><b>dbsqlok</b></a>, <a href="pdc07_5zoy.htm"><b>dbtxptr</b></a>, <a href="pdc07_912o.htm"><b>dbtxtimestamp</b></a>, <a href="pdc07_2gj0.htm"><b>dbtxtsnewval</b></a>, <a href="pdc07_3sxg.htm"><b>dbtxtsput</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

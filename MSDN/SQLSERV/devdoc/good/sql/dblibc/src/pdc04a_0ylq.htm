<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbadlen</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbadlen"></a>dbadlen</h1>
<p>
Returns the actual length of the data for a compute column.</p>
<h4>Syntax</h4>
<p>
<b>DBINT dbadlen ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
INT </b><i>computeid</i><b>, <br>
INT </b><i>column</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>computeid</i></dt>
<dd>
Is the ID that identifies the COMPUTE clause. A SELECT statement can have multiple COMPUTE clauses, which can have varying numbers of aggregate operators and aggregate targets. The <i>computeid</i> is returned by <b>dbnextrow</b> or <b>dbgetrow</b>.</dd>
<dt>
<i>column</i></dt>
<dd>
Is the number of the column. The first column is number 1.
</dd>
</dl>
<h4>Returns</h4>
<p>
The length, in bytes, of the data for a compute column. When no such column or COMPUTE clause exists, -1 is returned. When the data has a null value, 0 is returned.</p>
<h4>Remarks</h4>
<p>
This <b>dbadlen</b> returns the length of the data for a compute column. You can get a pointer to the actual data by using <b>dbadata</b>. Calling <b>dbadata</b> after <b>dbnextrow</b> or <b>dbgetrow</b> returns a <i>computeid</i>.</p>
<h4>Example</h4>
<p>
The following program fragment shows how to use <b>dbadlen</b>:</p>
<pre>DBPROCESS    *dbproc;
char            biggest_name[MAXNAME+1];
DBINT        namelen;
STATUS        rowinfo;

// Put the command into the command buffer. 
dbcmd(dbproc, "select name from sysobjects");
dbcmd(dbproc, " order by name");
dbcmd(dbproc, " compute max(name)");

// Send the command to SQL Server and start execution. 
dbsqlexec(dbproc);

// Process the command. 
dbresults(dbproc);

// Examine each row returned by the command. 
while ((rowinfo = dbnextrow(dbproc)) != NO_MORE_ROWS)
{
    if (rowinfo == REG_ROW)
        printf("regular row returned.\n");
    else
    {
        // This row is the result of a COMPUTE clause,
        // and "rowinfo" is the computeid of this COMPUTE
        // clause.
         

        namelen = dbadlen(dbproc, rowinfo, 1);
        strncpy(biggest_name,(char *)dbadata(dbproc, rowinfo, 1),
            (int)namelen);

        // Data pointed to by dbadata() is not null-terminated. 
        biggest_name[namelen] = '\0';

        printf("biggest name = %s\n", biggest_name);
    }
}</pre>
<h4>See Also</h4>
<p>
<a href="pdc04a_00kh.htm"><b>dbadata</b></a>, <a href="pdc04a_3tm6.htm"><b>dbaltlen</b></a>, <a href="pdc04a_1cyt.htm"><b>dbalttype</b></a>, <a href="pdc04c_1ad3.htm"><b>dbgetrow</b></a>, <a href="pdc04d_0fqv.htm"><b>dbnextrow</b></a>, <a href="pdc04d_1uk3.htm"><b>dbnumalts</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

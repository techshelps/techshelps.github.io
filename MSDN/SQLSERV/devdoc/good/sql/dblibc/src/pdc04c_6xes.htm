<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbfcmd</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbfcmd"></a>dbfcmd</h1>
<p>
Adds text to the DBPROCESS command buffer using C run-time library <i>sprintf</i>-type formatting.</p>
<h4>Syntax</h4>
<p>
<b>RETCODE dbfcmd ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
LPCSTR </b><i>cmdstring</i><b>, <br>
... </b><i>params</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>cmdstring</i></dt>
<dd>
Is a format string of the form used by the <i>sprintf</i> function.</dd>
<dt>
<i>params</i></dt>
<dd>
Are optional parameters to <b>dbfcmd</b>. The number of parameters required depends on the number indicated in the <i>cmdstring</i> parameter. The parameters are passed directly to the <i>sprintf</i> function.
</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<h4>Remarks</h4>
<p>
This function adds text to the command buffer in the DBPROCESS structure. The <b>dbfcmd</b> function works just like the C language standard I/O library <i>sprintf</i> function. If you don't need any of the formatting capability of <i>sprintf</i>, use <b>dbcmd</b> instead.</p>
<p>
The following table lists the conversions supported by <b>dbfcmd</b>:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%>Conversion</th>
<th align=left width=75%>Program variable type</th>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%>%c</td>
<td width=75%><i>char</i></td>
</tr>
<tr valign=top>
<td width=25%>%s</td>
<td width=75%>null-terminated string</td>
</tr>
<tr valign=top>
<td width=25%>%d</td>
<td width=75%><i>int</i></td>
</tr>
<tr valign=top>
<td width=25%>%f</td>
<td width=75%>double</td>
</tr>
<tr valign=top>
<td width=25%>%g</td>
<td width=75%>double</td>
</tr>
<tr valign=top>
<td width=25%>%e</td>
<td width=75%>double</td>
</tr>
<tr valign=top>
<td width=25%>%%</td>
<td width=75%>none</td>
</tr>
<tr valign=top>
<td width=25%>%c</td>
<td width=75%><i>char</i></td>
</tr>
<tr valign=top>
<td width=25%>%x</td>
<td width=75%>unsigned hexadecimal integer string</td>
</tr>
<tr valign=top>
<td width=25%>%u</td>
<td width=75%>unsigned decimal</td>
</tr>
</table><br>
<p>
The datatype SQLDATETIME must be converted into a character string and passed, using %s. SQLMONEY can be converted to a character string and passed, using %s, or it can be converted to <i>float</i> and passed, using %f.</p>
<p>
To include a percent character (%) in the command string, encode it as two percent characters (%%) because <b>dbfcmd</b> calls <i>sprintf,</i> which treats the <i>%</i> character as a format specification. In addition, don't use variables containing strings with apostrophes or single quotation marks because they conflict with the SQL statement syntax if there is any. If you don't need any of the formatting capability of <i>sprintf</i>, you can use <b>dbcmd</b>.</p>
<p>
The <b>dbfcmd</b> function manages the space allocation for the command buffer. It adds to the existing command buffer; it doesn't delete or overwrite the current contents except after the buffer has been sent to SQL Server. You can call <b>dbfcmd</b> repeatedly. Note that sequential calls are concatenated: the application must make sure that any necessary blanks appear between the end of one line and the beginning of the next.</p>
<p>
After a call to <b>dbsqlexec</b> or <b>dbsqlsend</b>, the first call to either <b>dbcmd</b> or <b>dbfcmd</b> automatically clears the command buffer before the new text is entered. If this situation is undesirable, set the DBNOAUTOFREE option. When DBNOAUTOFREE is set, the command buffer is cleared only by a call to <b>dbfreebuf</b>.</p>
<p>
Do not pass <b>dbfcmd</b> null pointers contained in variables.</p>
<p>
An application can intermingle calls to <b>dbcmd</b> and <b>dbfcmd</b>.</p>
<p>
At any time, an application can access the contents of the command buffer through calls to <b>dbgetchar</b>, <b>dbstrlen</b>, and <b>dbstrcpy</b>.</p>
<p>
Available memory is the only constraint on the size of the DBPROCESS command buffer created by calls to <b>dbcmd</b> and <b>dbfcmd</b>.</p>
<p>
This function does not support the C datatype <i>long double</i>.</p>
<h4>Example</h4>
<p>
The following example shows how to use <b>dbfcmd</b> to build up a multiple-line SQL command. Please note the leading spaces.</p>
<pre>char            *column_name;
DBPROCESS    *dbproc;
int            low_id;
char            *object_type;
char            *tablename;

dbfcmd(dbproc, "Select %s from %s", column_name, tablename);
dbfcmd(dbproc, " where id &gt; %d", low_id);
dbfcmd(dbproc, " and type='%s'", object_type);
</pre>
<h4>Limitations</h4>
<p>
This function allocates its working buffer dynamically. The size it picks to allocate space is the maximum of a defined constant (1024) and the string length of <i>cmdstring</i> * 2. If the arguments are very big in comparison to the size of <i>cmdstring</i>, DB-Library might not be able to allocate enough space.</p>
<h4>See Also</h4>
<p>
<a href="pdc04b_065g.htm"><b>dbcmd</b></a>, <a href="pdc04c_9mp2.htm"><b>dbfreebuf</b></a>; <a href="pdc09_7e7t.htm">Bulk-Copy Functions</a>, and <a href="pdca_9kbl.htm">DB-Library Options</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

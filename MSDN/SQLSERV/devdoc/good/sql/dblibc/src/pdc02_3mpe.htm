<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 2   Programming with DB-Library for C</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_programming_with_db_library_pdc02"></a>Programming with DB-Library for C</h1>
<p>
This chapter gives an overview of programming with DB-Library for C. It groups functions into categories, and gives a quick reference to the bulk copy and two-phase commit service special libraries.</p>
<p>
Programming with DB-Library for C typically involves the following steps:
<ol>
<li>
Connect to SQL Server.</li>
<li>
Put Transact-SQL statements into a buffer and send them to SQL Server.</li>
<li>
Process the results, if any, returned from SQL Server, one statement at a time and one row at a time. You can put the results into program variables, where the application can manipulate them.</li>
<li>
Handle DB-Library errors and SQL Server messages.</li>
<li>
Disconnect from SQL Server.</li>
</ol>
<p>
The following example shows the basic framework of many DB-Library for C applications. The program connects to SQL Server, sends a Transact-SQL SELECT statement to SQL Server, and processes the set of rows resulting from the SELECT.</p>
<p>
For information about defining the target operating system prior to compiling your application, see <a href="pdc03_58ab.htm">Building Applications</a>. </p>
<pre>#define DBNTWIN32
#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#include &lt;sqlfront.h&gt;
#include &lt;sqldb.h&gt;
// Forward declarations of the error handler and message handler. 
int err_handler(PDBPROCESS, INT, INT, INT, LPCSTR, LPCSTR);
int msg_handler(PDBPROCESS, DBINT, INT, INT, LPCSTR, LPCSTR,
                LPCSTR, DBUSMALLINT);
main()
{
    PDBPROCESS  dbproc;    // The connection with SQL Server. 
    PLOGINREC   login;     // The login information. 
    DBCHAR      name[100];
    DBCHAR      city[100];

    // Install user-supplied error- and message-handling functions.
    dberrhandle (err_handler);
    dbmsghandle (msg_handler);

    // Initialize DB-Library.
    dbinit ();

    // Get a LOGINREC.
    login = dblogin ();
    DBSETLUSER (login, "my_login");
    DBSETLPWD (login, "my_password");
    DBSETLAPP (login, "example");

    // Get a DBPROCESS structure for communication with SQL Server. 
    dbproc = dbopen (login, "my_server");

    // Retrieve some columns from the "authors" table in the
    // "pubs" database.

    // First, put the command into the command buffer. 
    dbcmd (dbproc, "select au_lname, city from pubs..authors");
    dbcmd (dbproc, " where state = 'CA' ");

    // Send the command to SQL Server and start execution. 
    dbsqlexec (dbproc);

    // Process the results. 
    if (dbresults (dbproc) == SUCCEED)
    {
        // Bind column to program variables. 
        dbbind (dbproc, 1, NTBSTRINGBIND, 0, name);
        dbbind (dbproc, 2, NTBSTRINGBIND, 0, city);

        // Retrieve and print the result rows. 
        while (dbnextrow (dbproc) != NO_MORE_ROWS)
        {
            printf ("%s from %s\n", name, city);
        }
    }

    // Close the connection to SQL Server. 
    dbexit ();

    return (0);
}

int err_handler (PDBPROCESS dbproc, INT severity,
    INT dberr, INT oserr, LPCSTR dberrstr, LPCSTR oserrstr)
{
    printf ("DB-Library Error %i: %s\n", dberr, dberrstr);
    if (oserr != DBNOERR)
    {
        printf ("Operating System Error %i: %s\n", oserr, oserrstr);
    }
    return (INT_CANCEL);
}

int msg_handler (PDBPROCESS dbproc, DBINT msgno, INT msgstate,
    INT severity, LPCSTR msgtext, LPCSTR server,
    LPCSTR procedure, DBUSMALLINT line)
{
    printf ("SQL Server Message %ld: %s\n", msgno, msgtext);
    return (0);
}
</pre>
<p>
This example illustrates features common to most DB-Library for C applications, including:
<dl>
<dt>
<b>header files</b></dt>
<dd>
All source files that contain calls to DB-Library functions require two header files, SQLFRONT.H and SQLDB.H.
<p>
Before including the SQLFRONT.H and SQLDB.H files, define the target operating system with <b>#define</b>:

<ul>
<li>
DBMSDOS (for MS-DOS)</li>
<li>
DBMSWIN (for 16-bit Windows)</li>
<li>
DBNTWIN32 (for 32-bit Windows 95 and Windows NT)</li>
</ul>

<p>
Or put DBMSDOS, DBMSWIN, or DBNTWIN32 on the compilation command lines. For more information, see the examples in "Include Files," in <a href="pdc03_58ab.htm">Building Applications</a>. 

<p>
For Windows, Windows 95, and Windows NT, you must include WINDOWS.H before including the SQLFRONT.H and SQLDB.H files.

<p>
Include SQLFRONT.H before SQLDB.H. SQLFRONT.H defines symbolic constants, such as function return values and the exit values STDEXIT and ERREXIT. These exit values can be used as the parameter for the C standard library function <b>exit</b>. The exit values are defined appropriately for the operating system running the program. The SQLFRONT.H file also includes type definitions for datatypes that can be used in program variable declarations. These datatypes are described in <a href="pdcb_852a.htm">Appendix B: DB-Library Datatypes</a>. 

<p>
The SQLDB.H file contains additional type definitions and DB-Library function prototypes, most of which are meant to be used only by the DB-Library functions. They should not be accessed directly by the program. To ensure compatibility with future releases of DB-Library, use the contents of SQLDB.H only as documented in this documentation.
</dd>
<dt>
<b>dberrhandle</b> and <b>dbmsghandle</b></dt>
<dd>
The first of these DB-Library functions, <b>dberrhandle</b>, installs a user-supplied error-handling function, which is called automatically whenever the application encounters a DB-Library error. Similarly, <b>dbmsghandle</b> installs a message-handling function, which is called in response to informational or error messages returned from SQL Server. The error- and message-handling functions are user-supplied. It is strongly recommended that users supply error-processing functions. </dd>
<dt>
<b>dblogin</b></dt>
<dd>
Supplies a LOGINREC structure, which DB-Library uses to log in to SQL Server. Two functions set entries in the LOGINREC. <b>DBSETLPWD</b> sets the password that DB-Library uses when logging in. <b>DBSETLAPP</b> sets the name of the application, which appears in the SQL Server <i>sysprocess</i> table. Certain functions set other aspects of the LOGINREC, which contains defaults for each value they set.</dd>
<dt>
<b>dbopen</b></dt>
<dd>
Opens a connection between the application and SQL Server. It uses the LOGINREC supplied by <b>dblogin</b> to log in to the server. It returns a DBPROCESS structure, which serves as the conduit for information between the application and the server. After this function has been called, the application is connected with SQL Server and can send Transact-SQL statements to SQL Server and process the results. Simultaneous transactions must each have a distinct DBPROCESS. Serial transactions can use the same DBPROCESS.</dd>
<dt>
<b>dbcmd</b></dt>
<dd>
Fills the command buffer with Transact-SQL statements, which can then be sent to SQL Server. Each call, after the first, to <b>dbcmd</b> adds the supplied text to the end of any text already in the buffer. The programmer must supply necessary blanks between words, such as the space between the quotation mark and the word <i>where</i> in the second <b>dbcmd</b> call in the example:
<pre>dbcmd(dbproc, " where state = 'CA' ");</pre>

<p>
Although multiple statements can be included in the buffer, this example only shows how to send and process a single statement. DB-Library allows an application to send multiple statements (called a <i>command batch</i>) to SQL Server and process each statement's set of results separately.
</dd>
<dt>
<b>dbsqlexec</b></dt>
<dd>
Executes the command buffer; that is, it sends the contents of the buffer to SQL Server, which parses and executes the commands. This function causes DB-Library to wait until SQL Server has completed execution of the query. To avoid this delay, you can call <b>dbsettime</b> to set the DB-Library timeout, or you can use <b>dbsqlsend</b>, <b>dbdataready</b>, and <b>dbsqlok</b> (instead of <b>dbsqlexec</b>) to retain control while SQL Server is busy.</dd>
<dt>
<b>dbresults</b></dt>
<dd>
Gets the results of the current Transact-SQL statement ready for processing. After <b>dbresults</b> returns SUCCEED, column metadata for the current results set is available. Your program should call <b>dbresults</b> until it returns no_more_results. If your program fails to do this, the DB-Library error message 10038 "Results Pending" occurs the next time that DBPROCESS is used.</dd>
<dt>
<b>dbbind</b></dt>
<dd>
Binds result columns to program variables. In the example, the first call to <b>dbbind</b> binds the first result column to the <i>name</i> variable. In other words, when the program reads a result row by calling <b>dbnextrow</b>, the contents of the first column in the result row are placed in the <i>name</i> variable. The datatype of the binding is NTBSTRINGBIND, one of several binding types available for character data. The second call binds the second result column to the <i>city</i> variable.</dd>
<dt>
<b>dbnextrow</b></dt>
<dd>
Reads a row and places the results in the program variables specified by the earlier <b>dbbind</b> calls. Each successive call to <b>dbnextrow</b> reads another result row until the last row has been read and NO_MORE_ROWS is returned. Processing of the results must take place inside the <b>dbnextrow</b> loop. This is because each call to <b>dbnextrow</b> overwrites the previous values in the bound program variables.</dd>
<dt>
<b>dbexit</b></dt>
<dd>
Closes all SQL Server connections and frees all DBPROCESS structures created because of the application. It is usually the last DB-Library function in the program.
</dd>
</dl>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting to Maintain DB-Library Compatibility with Windows</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_porting_to_maintain_db_library_compatibility_with_windows"></a>Porting to Maintain DB-Library Compatibility with Windows</h3>
<p>
This section explains how to port a Win16 DB-Library application for the Windows operating system to the Win32 API for Windows NT or Windows 95 operating systems while retaining compatibility with applications for Windows.</p>

<h4><a name="_api_calls_for_windows_and_c_run_time"></a>API Calls for Windows and C Run Time</h4>
<p>
In general, you can change your source code to easily build 16-bit or 32-bit versions. For an in-depth discussion of writing applications for the Win32 API that retain compatibility with the Windows operating system, see the <i>Microsoft Win32 API Programmer's Reference</i> (available separately).</p>
<p>
Follow these guidelines when developing applications for the Win32 API:
<ul>
<li>
<b>Function definitions and prototypes</b>. Be sure that your function definitions and function prototypes use portable datatypes.</li>
<li>
<b>Windows message parameter packing</b>. The widening of handles to 32-bits means that the packing of handles and other values in <i>wParam</i> and <i>lParam</i> has changed. Verify whether or not you need to change the decoding of <i>wParam</i> and <i>lParam</i> in your application.</li>
</ul>

<h4><a name="_db_library_functions"></a>DB-Library Function<i>s</i></h4>
<p>
All DB-Library functions are completely portable between operating systems. You simply need to define the target operating system at compile time. </p>
<p>
Many DB-Library functions return values of type <i>int</i>. Note that the <i>int</i> datatype is a 16-bit value in Windows and a 32-bit value in the Win32 API. Therefore, verify that your application uses the correct type of variable to receive return values from DB-Library functions that return an <i>int </i>datatype. For example, a variable defined as the datatype <i>short</i> receives a correct <i>int</i> value from DB-Library in Windows but receives an incorrect value in the Win32 API.</p>
<p>
Apart from verifying that variables receiving return values from DB-Library are of the correct type, no changes are needed to DB-Library functions.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

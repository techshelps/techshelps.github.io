<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reentrancy and DB-Library</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_reentrancy_and_db_library"></a>Reentrancy and DB-Library</h3>
<p>
In applications where each thread uses a separate DBPROCESS connection, you don't need to serialize the DB-Library calls. However, you must use <b>dbprocerrhandle</b> (instead of <b>dberrhandle</b>) and <b>dbprocmsghandle</b> (instead of <b>dbmsghandle</b>) to establish connection-specific (instead of global) error and message handlers for your application. You should pass a LOGINREC to <b>dbprocerrhandle</b> and <b>dbprocmsghandle</b> before calling <b>dbopen</b> using that LOGINREC. If you follow these steps, DB-Library is completely reentrant and thread-safe.</p>
<p>
DB-Library functions and routines that access a shared DBPROCESS are not reentrant across multiple threads. Therefore, be sure that you serialize all DB-Library calls that access the same DBPROCESS in multithreaded applications you develop.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

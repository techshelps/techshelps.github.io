<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Additional Porting Considerations</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_additional_porting_considerations"></a>Additional Porting Considerations</h3>
<p>
If you port a Windows-based application to the Windows NT or Windows 95 operating system and do not need to maintain compatibility with Windows, you can change your DB-Library code to remove redundant or unnecessary Windows functions.</p>

<h4><a name="_redundant_windows.2d.specific_db_library_functions"></a>Redundant Windows-specific DB-Library Functions</h4>
<p>
The <b>dbwinexit</b> function is Windows-specific and unnecessary in DB-Library for the Win32 API.</p>

<h4><a name="_error.2f.message_handler_registration"></a>Error/Message Handler Registration</h4>
<p>
The following changes apply to the registration of error and message handlers for the Win32 API:
<ul>
<li>
<b>No need to export callback functions</b>. You don't need to export the DB-Library error and message handler callback functions in a .DEF file. </li>
<li>
<b>No need to call MakeProcInstance</b>. You don't need to call <b>MakeProcInstance</b> to obtain a pointer to pass to the <b>dberrhandle </b>and <b>dbmsghandle</b> functions. Simply call <b>dberrhandle </b>and <b>dbmsghandle</b>, passing the function address. The following examples show the differences in calling the <b>dberrhandle </b>and <b>dbmsghandle</b> functions in Windows and in the Win32 API:<p>
<b><i>For Windows</i></b>
<pre>// Define variables 
static FARPROC lpdbMsgHandler;
static FARPROC lpdbErrHandler;

// Get Procedure Instances
lpdbMsgHandler = MakeProcInstance((FARPROC)dbMsgHandler, hInst);
lpdbErrHandler = MakeProcInstance((FARPROC)dbErrHandler, hInst);

// Install the instances into dblib 
dbmsghandle(lpdbMessageHandler);
dberrhandle(lpdbErrorHandler);
</pre>
<p>
<b><i>For the Win32 API</i></b>
<pre>// Install the instances into dblib 
dbmsghandle(dbMsgHandler);
dberrhandle(dbErrHandler);
</pre>
</li>
</ul>

<h4><a name="_preemptive_multitasking_.28.win32.29_.vs.._cooperative_multitasking_.28.windows.29"></a>Preemptive Multitasking (Win32) vs. Cooperative Multitasking (Windows)</h4>
<p>
To support asynchronous processing in the cooperative multitasking environment in Windows, each application must behave well and yield to the CPU at regular intervals. Therefore, when you process SQL Server queries in Windows, you need to use Windows timers or the <b>PeekMessage</b> function in combination with the DB-Library function calls for asynchronous processing (<b>dbsqlsend</b>, <b>dbdataready</b>, and<b> dbsqlok</b>). </p>
<p>
Support for preemptive multitasking in the Win32 API simplifies the implementation of asynchronous query processing. The preemptive multitasking nature of the Windows NT and Windows 95 operating systems ensures that other processes always obtain CPU cycles regardless of any processing that another application is doing. Within a single process, asynchronous processing can be implemented using Win32 threads or by using the DB-Library functions that support asynchronous processing in conjunction with the <b>PostMessage</b> Windows function. For more information about asynchronous processing, see <a href="pdc03_0u43.htm">Taking Advantage of Win32 API Features in DB-Library Applications</a>. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

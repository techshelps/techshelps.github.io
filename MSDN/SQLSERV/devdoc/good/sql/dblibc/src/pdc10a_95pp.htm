<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Commit Service and the Application Program</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_the_commit_service_and_the_application_program"></a>The Commit Service and the Application Program</h2>
<p>
The commit service acts as a single place of record to help the application decide whether the transaction should be committed or canceled.</p>
<p>
If the SQL Server cannot communicate with the server functioning as the commit service, it retries the connection every minute. The current command displayed in the command column of <b>sp_who</b> for any transaction still attempting to connect to the commit service server is PREPARE TRANSACTION. The system administrator can use the KILL command to stop the server's attempts to retry the connection. If a connection cannot be established within 1 minute, the database is marked as "not recovered" and an attempt is made to recover the next database. When the commit service server is available again, shutting down the server with the unrecovered database and bringing the server back up again enables the recovery of the transaction in doubt.</p>
<p>
The role of the application is to deliver the Transact-SQL statements to the SQL Servers in the proper order, using the proper DB-Library functions. The role of the commit service is to provide a single place where the commit/rollback status is maintained. The SQL Servers communicate with the commit service only if a failure happens during the two-phase commit.</p>
<p>
To keep transaction records, the commit service needs its own DBPROCESS structure, separate from those used in the distributed transaction. Note, however, that the server handling the commit service also can be one of the servers participating in the transaction, as long as the commit service has its own DBPROCESS. In fact, all the servers in the transaction could be one and the same, although then you would not need this special library.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbadata</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbadata"></a>dbadata</h1>
<p>
Returns a pointer to the data for a compute column.</p>
<h4>Syntax</h4>
<p>
<b>LPCBYTE dbadata ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
INT </b><i>computeid</i><b>, <br>
INT </b><i>column</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>computeid</i></dt>
<dd>
Is the ID that identifies the COMPUTE clause. A SELECT statement can have multiple COMPUTE clauses, which can have varying numbers of aggregate operators and aggregate targets. The <i>computeid</i> is returned by <b>dbnextrow</b> or <b>dbgetrow</b>.</dd>
<dt>
<i>column</i></dt>
<dd>
Is the number of the column. The first column returned is number 1.
</dd>
</dl>
<h4>Returns</h4>
<p>
A BYTE pointer to the data for a particular column in a compute. A null BYTE pointer is returned if there is no such column or compute or if the data has a null value. The data space pointed to is allocated and freed by DB-Library. Be careful not to overwrite the space.</p>
<h4>Remarks</h4>
<p>
After each call to <b>dbnextrow</b> that returns a value greater than 0, use <b>dbadata</b> to obtain a pointer to the data for a particular column in a compute. The data is not null-terminated. Use <b>dbadlen</b> to get the length of the data.</p>
<p>
When a column of integer data is summed or averaged, SQL Server always returns a four-byte integer, regardless of the size of the column. Therefore, be sure that the variable that is to contain the result from such a compute is declared as DBINT.</p>
<h4>Example</h4>
<p>
The following program fragment shows how to use <b>dbadata</b>:</p>
<pre>DBPROCESS    *dbproc;
int            rowinfo;
DBINT        sum;

// First, put the commands into the command buffer. 
dbcmd(dbproc, "select db_name(dbid), dbid, size from sysusages");
dbcmd(dbproc, " order by dbid");
dbcmd(dbproc, " compute sum(size) by dbid");
// Send the commands to SQL Server and start execution. 
dbsqlexec(dbproc);
// Process the command. 
dbresults(dbproc);
// Examine the results of the COMPUTE clause. 
while((rowinfo = dbnextrow(dbproc)) != NO_MORE_ROWS)
{
    if (rowinfo == REG_ROW)
        printf("regular row returned.\n");
    else
    {
        // This row is the result of a COMPUTE clause,
        // and "rowinfo" is the computeid of this COMPUTE
        // clause.
         
        sum = *(DBINT *)(dbadata(dbproc, rowinfo, 1));
        printf("sum = %ld\n", sum);
    }
}</pre>
<p>
The <b>dbaltbind</b> function automatically binds data to your program variables. It is somewhat easier to use than <b>dbadata</b> and <b>dbadlen</b> but is less efficient because it copies the data into your variable.</p>
<h4>See Also</h4>
<p>
<a href="pdc04a_0ylq.htm"><b>dbadlen</b></a>, <a href="pdc04a_8tes.htm"><b>dbaltbind</b></a>, <a href="pdc04a_3tm6.htm"><b>dbaltlen</b></a>, <a href="pdc04a_1cyt.htm"><b>dbalttype</b></a>, <a href="pdc04c_1ad3.htm"><b>dbgetrow</b></a>, <a href="pdc04d_0fqv.htm"><b>dbnextrow</b></a>, <a href="pdc04d_1uk3.htm"><b>dbnumalts</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>bcp_moretext</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bcp_moretext"></a>bcp_moretext</h1>
<p>
Sends part of a <i>text</i> or <i>image </i>value to SQL Server.</p>
<h4>Syntax</h4>
<p>
<b>RETCODE bcp_moretext ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
DBINT </b><i>size</i><b>, <br>
LPCBYTE </b><i>text</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>size</i></dt>
<dd>
Is the size of this particular part of the <i>text</i> or <i>image </i>value being sent to SQL Server. Sending more <i>text </i>or <i>image </i>bytes to SQL Server than were specified in the call to <b>bcp_bind</b> or <b>bcp_collen</b> results in an error.</dd>
<dt>
<i>text</i></dt>
<dd>
Is a pointer to the <i>text </i>or <i>image </i>portion to be sent to SQL Server.
</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<h4>Remarks</h4>
<p>
This function is used in conjunction with <b>bcp_bind</b> and <b>bcp_sendrow</b> to send a large SQLTEXT or SQLIMAGE value to SQL Server in a number of smaller chunks. This is particularly useful with operating systems unable to allocate extremely long data buffers.</p>
<p>
If <b>bcp_bind</b> is called with a <i>type</i> parameter of SQLTEXT or SQLIMAGE and a non-null <i>varaddr</i> parameter, <b>bcp_sendrow</b> sends the entire <i>text </i>or <i>image </i>data value, just as it does for all other datatypes. If, however, <b>bcp_bind</b> has a null <i>varaddr</i> parameter, <b>bcp_sendrow</b> returns control to the application immediately after all nontext and nonimage columns are sent to SQL Server. The application can then call <b>bcp_moretext</b> repeatedly to send the <i>text </i>and <i>image </i>columns to SQL Server, a chunk at a time.</p>
<p>
If you use <b>bcp_moretext</b> to send one <i>text </i>or <i>image </i>column in the row, you must also use it to send all other <i>text </i>and <i>image </i>columns in the row.</p>
<p>
If the row contains more than one <i>text </i>or <i>image </i>column, <b>bcp_moretext</b> first sends its data to the lowest numbered (that is, leftmost) <i>text </i>or <i>image </i>column, followed by the next lowest numbered column, and so on.</p>
<p>
An application normally calls <b>bcp_sendrow</b> and <b>bcp_moretext</b> within loops to send a number of rows of data. Here's an outline of how to do this for a table containing two text columns:</p>
<pre>while (there are still rows to send)
{
bcp_sendrow(...);

for (all the data in the first text column)
bcp_moretext(...);

for (all the data in the second text column)
bcp_moretext(...);
}
</pre>
<h4>Example</h4>
<p>
This example shows how to use <b>bcp_moretext</b> with <b>bcp_bind</b> and <b>bcp_sendrow</b>:</p>
<pre>LOGINREC    *login;
DBPROCESS    *dbproc;

DBINT    id = 5;
char    *part1 = "This text value isn't very long,";
char    *part2 = " but it's broken up into three parts";
char    *part3 = " anyhow.";

// Install error handler and message handler. 
dberrhandle(err_handler);
dbmsghandle(msg_handler);

// Open a DBPROCESS 
login = dblogin();
BCP_SETL(login, TRUE);
DBSETLUSER(login, "user");
DBSETLPWD(login, "my_passwd");
DBSETLAPP(login, "example");
dbproc = dbopen(login, "my_server");
// Initialize bcp. 
if (bcp_init(dbproc, "comdb..articles", (BYTE *)NULL,
    (BYTE *)NULL, DB_IN) == FAIL)
    exit(ERREXIT);

// Bind program variables to table columns. 
if (bcp_bind(dbproc, (BYTE *)&amp;id, 0, (DBINT)-1, (BYTE *)NULL, 0,     SQLINT4, 1)
    == FAIL)
{
    fprintf(stderr, "bcp_bind, column 1, failed.\n");
    exit(ERREXIT);
}

if (bcp_bind
    (dbproc, (BYTE *)NULL, 0, (DBINT)(strlen(part1) 
    strlen(part2)  strlen(part3)), (BYTE *)NULL, 0,
    SQLTEXT, 2) == FAIL)
{
    fprintf(stderr, "bcp_bind, column 2, failed.\n");
    exit(ERREXIT);
}

// Now send this row, with the text value broken into three chunks. 
if (bcp_sendrow(dbproc) == FAIL)
    exit(ERREXIT);
if (bcp_moretext(dbproc, (DBINT)strlen(part1), part1) == FAIL)
    exit(ERREXIT);
if (bcp_moretext(dbproc, (DBINT)strlen(part2), part2) == FAIL)
    exit(ERREXIT);
if (bcp_moretext(dbproc, (DBINT)strlen(part3), part3) == FAIL)
    exit(ERREXIT);

// All done. 
bcp_done(dbproc);
dbclose(dbproc);
</pre>
<h4>See Also</h4>
<p>
<a href="pdc09_4fac.htm"><b>bcp_bind</b></a>, <a href="pdc09_4ib2.htm"><b>bcp_collen</b></a>, <a href="pdc09_3u7r.htm"><b>bcp_sendrow</b></a>; <a href="pdc07_08dw.htm"><b>dbwritetext</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

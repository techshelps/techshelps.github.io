<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbcursorfetch</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbcursorfetch"></a>dbcursorfetch</h1>
<p>
Fetches a block of rows (called the fetch buffer) from a client cursor or transparent server cursor, and stores the rows in the bound program variables established using <b>dbcursorbind</b>. If you are connected to SQL Server 6.0, you should use <b>dbcursorfetchex</b>.</p>
<h4>Syntax</h4>
<p>
<b>RETCODE dbcursorfetch ( <br>
PDBCURSOR </b><i>hc</i><b>, <br>
INT </b><i>fetchtype</i><b>, <br>
INT </b><i>rownum</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>hc</i></dt>
<dd>
Is the cursor handle created by <b>dbcursoropen</b>.</dd>
<dt>
<i>fetchtype</i></dt>
<dd>
Specifies the type of fetch to execute, changing the position of the fetch buffer within the cursor results set. The following table describes the different <i>fetchtype</i> values:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%><i>fetchtype</i></th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%></td>
<td width=72%></td>
</tr>
<tr valign=top>
<td width=28%>FETCH_FIRST</td>
<td width=72%>Fetches the first block of rows from a dynamic or keyset cursor. The first row of the new fetch buffer is the first row in the cursor results set.</td>
</tr>
<tr valign=top>
<td width=28%>FETCH_NEXT</td>
<td width=72%>Fetches the next block of rows from a dynamic or keyset cursor. The first row of the new fetch buffer is the row after the last row of the current fetch buffer.<p>
If this is the first fetch using a new cursor, it behaves the same as FETCH_FIRST.</p>
</td>
</tr>
<tr valign=top>
<td width=28%>FETCH_PREV</td>
<td width=72%>Fetches the previous block of rows from a fully dynamic or keyset cursor. The first row of the new fetch buffer is <i>nrows</i> (specified in <b>dbcursoropen</b>) before the first row of the current fetch buffer.</td>
</tr>
<tr valign=top>
<td width=28%>FETCH_RANDOM</td>
<td width=72%>Fetches a block of rows from a keyset cursor. The first row of the new fetch buffer is the specified <i>rownum</i> row in the keyset cursor results set.</td>
</tr>
<tr valign=top>
<td width=28%>FETCH_RELATIVE</td>
<td width=72%>Fetches a block of rows from a keyset cursor. The first row of the new fetch buffer is <i>rownum</i> rows before or after the first row of the current fetch buffer.</td>
</tr>
<tr valign=top>
<td width=28%>FETCH_LAST</td>
<td width=72%>Fetches the last block of rows from a keyset cursor. The last row of the new fetch buffer is the last row of the cursor results set.</td>
</tr>
</table><br>


<p>
The block of rows retrieved by a fetch is called the fetch buffer. The number of rows in the fetch buffer is determined by the <i>nrows</i> parameter of <b>dbcursoropen</b>.

<p>
For a forward-only dynamic cursor (<i>scrollopt</i> is CUR_FORWARD in <b>dbcursoropen</b>), you can use only FETCH_FIRST or FETCH_NEXT.
</dd>
<dt>
<i>rownum</i></dt>
<dd>
Is the specified random or relative row number to use as the first row of the new fetch buffer. Use this parameter only with a <i>fetchtype</i> of FETCH_RANDOM or FETCH_RELATIVE. Specify 0 for any other <i>fetchtype</i>.
<p>
When <i>fetchtype</i> is FETCH_RANDOM, the first row of the new fetch buffer is the <i>rownum</i> row (counting forward from the beginning) of the keyset cursor results set. The <i>rownum</i> parameter must be positive.

<p>
When <i>fetchtype</i> is FETCH_RELATIVE:

<ul>
<li>
A positive <i>rownum</i> means that the first row of the new fetch buffer is <i>rownum</i> rows after the first row of the current fetch buffer.</li>
<li>
A negative <i>rownum</i> means that the first row of the new fetch buffer is <i>rownum</i> rows before the first row of the current fetch buffer.</li>
<li>
A <i>rownum</i> of 0 means that all rows in the fetch buffer are refreshed with current data from SQL Server without moving the current cursor position. This is identical to calling <b>dbcursor</b> with <i>optype</i> set to CRS_REFRESH.</li>
</ul>
</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<p>
SUCCEED is returned if every row was fetched successfully. Note that for a keyset cursor, a fetch that results in a missing row will not cause <b>dbcursorfetch</b> to FAIL.</p>
<p>
FAIL is returned if at least one of the following is true:
<ul>
<li>
A <i>fetchtype</i> of FETCH_RANDOM, FETCH_RELATIVE, or FETCH_LAST was used on a dynamic cursor.</li>
<li>
A fetchtype other than FETCH_FIRST or FETCH_NEXT was used on a forward-only dynamic cursor.</li>
<li>
The SQL Server connection is broken or times out.</li>
<li>
DB-Library is out of memory.</li>
</ul>
<h4>Remarks</h4>
<p>
Specify the size of the fetch buffer in the <i>nrows</i> parameter of <b>dbcursoropen</b>.</p>
<p>
After the fetch, the elements of the array of row status indicators (<i>pstatus</i> in <b>dbcursoropen</b>) are filled with row status values, one for each row in the fetch buffer. Each row status value is a series of fetch status values ORed together. The following table shows the meaning of each row status value:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%></th>
<th align=left width=65%></th>
</tr>
<tr valign=top>
<th align=left width=35%></th>
<th align=left width=65%></th>
</tr>
<tr valign=top>
<th align=left width=35%>Fetch status</th>
<th align=left width=65%>Description</th>
</tr>
<tr valign=top>
<td width=35%></td>
<td width=65%></td>
</tr>
<tr valign=top>
<td width=35%>FTC_SUCCEED</td>
<td width=65%>The row was successfully fetched. The array of bound program variables and the array of data length values (specified in <b>dbcursorbind</b>) contain valid data for the row.</td>
</tr>
<tr valign=top>
<td width=35%>FTC_MISSING</td>
<td width=65%>The row has been deleted or a unique index column of the row has been changed. Do not use the values in the array of bound program variables and the array of data length values (specified in <b>dbcursorbind</b>) for the row.<p>
For keyset cursors, this fetch status can appear at any time. For dynamic cursors, this fetch status can appear only after the current fetch buffer is refreshed.</p>
</td>
</tr>
<tr valign=top>
<td width=35%>FTC_ENDOFKEYSET</td>
<td width=65%>Is the end of the keyset. This fetch status is set for backward compatibility with "mixed" client cursors used by existing applications.</td>
</tr>
<tr valign=top>
<td width=35%>FTC_ENDOFRESULTS</td>
<td width=65%>Is the end of the results set of a dynamic or keyset cursor. Rows in the fetch buffer after this row are invalid and will have a row status indicator of 0; do not use the values in the array of bound program variables and the array of data length values (specified in <b>dbcursorbind</b>) for those rows.<p>
If ORed with FTC_SUCCEED, this is the last row in the cursor results set; it contains valid data.</p>
<p>
If ORed with FTC_MISSING, this is the last row in the cursor results set, but the row is missing.</p>
<p>
If not ORed with FTC_SUCCEED or FTC_MISSING, this row is invalid.</p>
</td>
</tr>
</table><br>
<p>
A row status indicator of 0 means that the row is invalid, and the values in the array of bound program variables and the array of data length values (specified in <b>dbcursorbind</b>) do not contain valid data. This usually happens when the row is before the beginning (first row) or after the end (last row) of the cursor results set.</p>
<p>
After the fetch, the elements of the array of bound program variables and the array of data length values (previously specified in <b>dbcursorbind</b>):
<ul>
<li>
Are filled with valid data for all rows with a fetch status of FTC_SUCCEED.</li>
<li>
Contain invalid data for all rows <i>without</i> a fetch status of FTC_SUCCEED.</li>
</ul>
<p>
If no fetches have been performed on a cursor, the current cursor position is before the beginning (first row) of the cursor results set.</p>
<p>
After a fetch is complete, the new cursor position is one of the following:
<ul>
<li>
The first row of the new fetch buffer, as specified under <i>fetchtype</i>, if the first row of the new fetch buffer stayed within the cursor results set.</li>
<li>
Adjusted to the first row of the cursor results set if the first row of the new fetch buffer would have been before the first row of the cursor results set and the last row of the new fetch buffer would have stayed within the cursor results set due to a FETCH_PREV operation.</li>
<li>
Unchanged from the current position if all rows of the new fetch buffer would have been before the first row of the cursor results set, if the first row (and thus all rows) of the new fetch buffer would have been after the last row of the cursor results set, or, if for a keyset cursor, if the first row of the new fetch buffer would have been before the first row of the cursor results set and the last row of the new fetch buffer would have stayed within the cursor results set due to a FETCH_RELATIVE attempt with a negative <i>rownum</i>.</li>
</ul>
<p>
When the new cursor position is unchanged because the first row (and thus all rows) of the new fetch buffer would have been after the last row of the cursor results set, all rows in the fetch buffer are invalid and will not have a fetch status of FTC_SUCCEED. In the case of dynamic cursors, the first row of the fetch buffer will have a fetch status of FTC_ENDOFRESULTS, and later rows will have a row status of 0. In the case of keyset cursors, all rows in the fetch buffer will have a row status of 0.</p>
<p>
When the new position of a dynamic cursor is unchanged because all rows of the new fetch buffer would have been before the first row of the cursor results set, all rows in the fetch buffer are invalid and will not have a fetch status of FTC_SUCCEED. The first row of the fetch buffer will have a fetch status of FTC_ENDOFRESULTS, and later rows will have a row status of 0.</p>
<p>
When the new cursor position is unchanged and all rows in the fetch buffer are invalid, you can use <b>dbcursor</b> to refresh the rows in the fetch buffer with current data from SQL Server. This will result in valid rows that reflect the current cursor position.</p>
<p>
Each call to <b>dbcursorfetch</b> leaves the DBPROCESS available for use with no pending results.</p>
<p>
<b>Note</b>  This function works with client cursors and transparent server cursors. Do not use both <b>dbcursorfetch</b> and <b>dbcursorfetchex</b> with the same cursor handle. Once one of these functions is used on a specific cursor handle, any attempt to use the other function will return fail.</p>
<p>
If rows in the current fetch buffer of a dynamic cursor are deleted, a fetch using a client cursor might behave differently than a fetch using a transparent server cursor.</p>
<h5>Client cursor:</h5>
<p>
When the new position of a dynamic cursor is adjusted to be the first row of the cursor results set (which happens when the first row of the new fetch buffer would have been before the first row of the dynamic cursor results set and the last row of the new fetch buffer would have stayed within the dynamic cursor results set due to a FETCH_PREV operation), some rows at the end of the new fetch buffer might be invalid. Any invalid rows will have a row status indicator of 0.</p>
<p>
If rows in the current fetch buffer of a dynamic cursor are deleted, a fetch next or fetch previous might result in a new fetch buffer that skips rows in the cursor results set or includes rows from the current fetch buffer again.</p>
<h5>Transparent server cursor:</h5>
<p>
A <i>fetchtype</i> of FETCH_NEXT or FETCH_PREV using a dynamic cursor is actually mapped to a relative fetch on SQL Server 6.0. Because of this, if the first row in the current fetch buffer is deleted before a FETCH_NEXT (mapped to a forward relative fetch on SQL Server 6.0) is performed, the current cursor position becomes invalid. For more information about the fetch behavior in this case, see <b>dbcursorfetchex</b>.</p>
<h4>See Also</h4>
<p>
<a href="pdc05_7l4i.htm"><b>dbcursor</b></a>, <a href="pdc05_5jz8.htm"><b>dbcursorbind</b></a>, <a href="pdc05_7wbz.htm"><b>dbcursorcolinfo</b></a>, <a href="pdc05_22sl.htm"><b>dbcursorclose</b></a>, <a href="pdc05_5ban.htm"><b>dbcursorinfo</b></a>, <a href="pdc05_9772.htm"><b>dbcursoropen</b></a>; <a href="pdc09_7e7t.htm">Bulk-Copy Functions</a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

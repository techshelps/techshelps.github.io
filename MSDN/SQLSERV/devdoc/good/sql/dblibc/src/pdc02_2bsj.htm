<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Result Rows</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_accessing_result_rows"></a>Accessing Result Rows</h2>
<p>
Once <b>dbresults</b> has returned SUCCEED and any binding of columns to variables has been specified, the application is ready to process the results. The first step is to make the result rows available to the application. The <b>dbnextrow</b> function accomplishes this. Each call to <b>dbnextrow</b> reads the next row returned from SQL Server. The row is read directly from the network. As an alternative, you can do the same thing through cursors, often more simply and with more power. For details, see <a href="pdc09_7e7t.htm">Bulk-Copy Functions</a>. </p>
<p>
Once a row has been read in by <b>dbnextrow</b>, the application can perform any processing desired on the data in the row. If the result columns have been bound to program variables, the data in the row will have been automatically copied into the variables. Alternatively, the data is accessible through <b>dbdata</b> or <b>dbadata</b>.</p>
<p>
Rows read in by <b>dbnextrow</b> can be automatically saved in a row buffer, if desired. This is accomplished by setting the DBBUFFER option. Without row buffering, each row must be processed as it is read in by <b>dbnextrow</b> because the next call to <b>dbnextrow</b> will overwrite the previously read row. If row buffering has been turned on, the rows are added to a row buffer as they are read in by <b>dbnextrow</b>. Row buffering allows the application to skip around in the buffer and return to previously read rows.</p>
<p>
After all result rows have been returned, the final call to <b>dbnextrow</b> returns the NO_MORE_ROWS indication. You must continue calling <b>dbnextrow</b> until it returns NO_MORE_ROWS, even if you know that the query produces only one result row.</p>
<p>
Also available are functions that print result rows in a default format. They are often used for debugging. (These are not available with the Windows operating system.)</p>
<p>
DB-Library processes results one statement at a time, although multiple statements can be sent. When all the results for one statement have been read, <b>dbresults</b> must be called again to set up the results for the next statement in the command buffer and one final time to return no_more_results.</p>
<p>
Information covering several areas, including regular result columns, compute result columns, row buffers, and the command state, can be retrieved from the DBPROCESS structure. Regular result columns correspond to columns in the SELECT statement's select list, and compute result columns correspond to columns in the SELECT statement's optional COMPUTE clause.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

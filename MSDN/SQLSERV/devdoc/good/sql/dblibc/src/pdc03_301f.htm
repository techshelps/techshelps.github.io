<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Special Considerations</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_special_considerations"></a>Special Considerations</h2>
<p>
The Windows operating system requires error and message handling for DB-Library to be installed as exported callback functions.</p>
<p>
When the Windows operating system executes a callback function, the data segment register is not set to the application's data segment, even though the error handler is part of the application. Declare the error and message handlers using <br>
_ _<i>export</i> (or declare the functions as EXPORT in the .DEF file) to cause Windows to set up the data segment register correctly so that your handlers can access the application's data.</p>
<p>
To create an error handler or message handler, first make the function into a procedure instance. To do this, call <b>MakeProcInstance</b> in your initialization code or in the application's message loop. The following example shows the call in the application's message loop:</p>
<pre>long FAR PASCAL MySqlWndProc(hWnd, message, wParam, lParam)
HWND hWnd;          // window handle 
unsigned message;   // type of message 
WORD wParam;        // additional information 
LONG lParam;        // additional information 
{
        .
        .
        .

    static FARPROC lpMyMessageHandler;  // pointer to message handler
    static FARPROC lpMyErrorHandler;    // pointer to error handler 
    int cdecl FAR MyMessageHandler(DBPROCESS *,DBINT, DBSMALLINT,
        DBSMALLINT, LPSTR, LPSTR, LPSTR, DBUSMALLINT);
    int cdecl FAR MyErrorHandler(DBPROCESS *, int, int, int, LPSTR, 
        LPSTR);

    switch (message) {
        .
        .
        .

    case WM_CREATE:    // message: window being created 
        // Make the message and error handler instances. 
        lpMyMessageHandler =
            MakeProcInstance((FARPROC)MyMessageHandler, hInst);
        lpMyErrorHandler =
            MakeProcInstance((FARPROC)MyErrorHandler, hInst);

        // Install the instances into DBLIB. 
        dbmsghandle(lpMyMessageHandler);
        dberrhandle(lpMyErrorHandler);
        .
        .
        .</pre>
<p>
Making the FARPROC variables static allows you to free them during WM_DESTROY message processing:</p>
<pre>.
    .
    .
case WM_DESTROY:         // message: window being destroyed 
    FreeProcInstance(lpMyMessageHandler);   // release handlers 
    FreeProcInstance(lpMyErrorHandler);
    PostQuitMessage(0);
    dbwinexit(); 
    break;
    .
    .
    .</pre>
<p>
Note that callback functions in the Windows operating system are normally declared FAR PASCAL, but not with these two callback functions for DB-Library (<b>MyErrorHandler</b> and <b>MyMessageHandler</b>). DB-Library expects all function calls to be cdecl FAR. Consequently, your handlers must also be cdecl FAR, as shown in the following example:</p>
<pre>int cdecl FAR MyErrorHandler(dbproc, severity, errno,
    oserr, dberrstr, oserrstr);
</pre>
<p>
Because this function declaration type is contrary to the FARPROC declaration type in <b>MakeProcInstance</b>, you must cast the function name as FARPROC.</p>
<p>
Also, you must pass the FARPROC pointers returned from <b>MakeProcInstance</b> to <b>dberrhandle</b> and <b>dbmsghandle</b> to install the handlers properly. Passing the addresses of the handler functions instead of the procedure instances causes unpredictable results.</p>
<p>
Finally, you must export the functions so that the Windows environment will correctly fix the segment references. In your .DEF file, add the following lines to the EXPORTS section:</p>
<pre>_MyMessageHandler x      ; message handler
_MyErrorHandler y    ; error handler
</pre>
<p>
Note that the function names begin with an underscore ( _ ); this is because with <b>cdecl</b>, the compiler automatically adds the underscore to the function name. The <i>x</i> and <i>y</i> are replaced with <i>numbers</i> for the number of your exported functions. See the sample Windows-based application for examples of installing error and message handlers.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

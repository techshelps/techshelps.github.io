<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbconvert</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbconvert"></a>dbconvert</h1>
<p>
Converts data from one datatype to another.</p>
<h4>Syntax</h4>
<p>
<b>INT dbconvert ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
INT </b><i>srctype</i><b>, <br>
LPCBYTE </b><i>src</i><b>, <br>
DBINT </b><i>srclen</i><b>, <br>
INT </b><i>desttype</i><b>, <br>
LPBYTE </b><i>dest</i><b>, <br>
DBINT </b><i>destlen</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server. 
<p>
In <b>dbconvert</b>, the DBPROCESS is used only to supply any custom null values that the program specified through <b>dbsetnull</b>. If <i>dbproc</i> is null, <b>dbconvert</b> uses the default values for null value data conversions.
</dd>
<dt>
<i>srctype</i></dt>
<dd>
Is the datatype of the source data to be converted. This parameter can be any of the SQL Server datatype tokens. You can use <b>dbcoltype</b> to get the SQL Server datatype token for a particular column.</dd>
<dt>
<i>src</i></dt>
<dd>
Is a pointer to the source data to be converted. If this pointer is null, <b>dbconvert</b> puts an appropriate null value in the destination variable. You can use <b>dbdata</b> to get a pointer to data from a SQL Server column.
<p>
When <i>srctype</i> is SQLDECIMAL or SQLNUMERIC, the <i>src</i> parameter must be a pointer to a valid DBNUMERIC or DBDECIMAL C variable, respectively.
</dd>
<dt>
<i>srclen</i></dt>
<dd>
Is the length, in bytes, of the source data to be converted. This length is used for the following <i>srctype</i> datatype tokens:
<ul>
<li>
SQLCHAR, SQLVARCHAR, SQLTEXT</li>
<li>
SQLBINARY, SQLVARBINARY, SQLIMAGE</li>
<li>
SQLINTN, SQLFLTN, SQLMONEYN, SQLDATETIMN</li>
</ul>

<p>
This length is ignored for all fixed-length, non-NULL datatypes. If <i>srclen</i> is 0, the source data is assumed to be null, and <b>dbconvert</b> places an appropriate null value in the destination variable. You can use <b>dbdatlen</b> to get the length of SQL Server data.

<p>
When <i>src</i> points to a DBCHAR string, a <i>srclen</i> of -1 indicates that the string is null-terminated. 
</dd>
<dt>
<i>desttype</i></dt>
<dd>
Is the destination datatype that the source data is to be converted into. This parameter can be any of the SQL Server datatype tokens.</dd>
<dt>
<i>dest</i></dt>
<dd>
Is a pointer to the destination variable that will receive the converted data. If this pointer is null, <b>dbconvert</b> calls the user-supplied error handler (if any) and returns -1.
<p>
When <i>desttype</i> is SQLDECIMAL or SQLNUMERIC, the <i>dest</i> parameter must be a pointer to a DBNUMERIC or DBDECIMAL C variable, respectively, with the <i>precision</i> and <i>scale</i> fields of the structure already set to the desired values. You can use DEFAULTPRECISION to specify a default precision and DEFAULTSCALE to specify a default scale.
</dd>
<dt>
<i>destlen</i></dt>
<dd>
Is the length, in bytes, of the destination variable. This length is used for the following <i>desttype</i> datatype tokens:
<ul>
<li>
SQLCHAR, SQLVARCHAR, SQLTEXT</li>
<li>
SQLBINARY, SQLVARBINARY, SQLIMAGE</li>
<li>
SQLINTN, SQLFLTN, SQLMONEYN, SQLDATETIMN</li>
</ul>

<p>
The <i>destlen</i> is ignored for all fixed-length, non-NULL datatypes.

<p>
When <i>dest</i> points to a DBCHAR string or a DBBINARY array, the value of <i>destlen</i> must be the total length of the destination buffer space, or -1 to indicate that there is sufficient space available. Note that when <i>dest</i> points to a DBCHAR string, a <i>destlen</i> of -1 causes the character string to be given a terminating null. 

</dd>
</dl>
<h4>Returns</h4>
<p>
The length of the converted data, in bytes, if the datatype conversion succeeds. If the conversion fails, -1 is returned. If <b>dbconvert</b> fails, it first calls a user-supplied error handler (if any). This routine may fail for one of these reasons:
<ul>
<li>
The requested conversion was unavailable.</li>
<li>
The conversion resulted in truncation, overflow, or loss of precision in the destination variable.</li>
<li>
A syntax error occurred while converting a character string to some numeric type.</li>
</ul>
<h4>Remarks</h4>
<p>
This function allows the application to convert data from one representation to another. To determine whether a particular conversion is permitted, the program can call <b>dbwillconvert</b> before attempting a conversion.</p>
<p>
The <b>dbconvert</b> function can convert data stored in any of the SQL Server datatypes (although not all conversions are legal). The following table shows the program variable type (<i>src</i> or <i>dest</i> parameters) you must provide for each non-NULL SQL Server datatype (<i>srctype</i> or <i>desttype</i> parameters):</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%></th>
<th align=left width=63%></th>
</tr>
<tr valign=top>
<th align=left width=37%></th>
<th align=left width=63%></th>
</tr>
<tr valign=top>
<th align=left width=37%>Datatype (<i>srctype</i>, <br>
<i>desttype</i>)</th>
<th align=left width=63%><br>
Program variable type (<i>src</i>, <i>dest</i>)</th>
</tr>
<tr valign=top>
<td width=37%></td>
<td width=63%></td>
</tr>
<tr valign=top>
<td width=37%>SQLCHAR</td>
<td width=63%>DBCHAR</td>
</tr>
<tr valign=top>
<td width=37%>SQLVARCHAR</td>
<td width=63%>DBCHAR</td>
</tr>
<tr valign=top>
<td width=37%>SQLTEXT</td>
<td width=63%>DBCHAR</td>
</tr>
<tr valign=top>
<td width=37%>SQLBINARY</td>
<td width=63%>DBBINARY</td>
</tr>
<tr valign=top>
<td width=37%>SQLVARBINARY</td>
<td width=63%>DBBINARY</td>
</tr>
<tr valign=top>
<td width=37%>SQLIMAGE</td>
<td width=63%>DBBINARY</td>
</tr>
<tr valign=top>
<td width=37%>SQLINT1</td>
<td width=63%>DBTINYINT</td>
</tr>
<tr valign=top>
<td width=37%>SQLINT2</td>
<td width=63%>DBSMALLINT</td>
</tr>
<tr valign=top>
<td width=37%>SQLINT4</td>
<td width=63%>DBINT</td>
</tr>
<tr valign=top>
<td width=37%>SQLFLT4</td>
<td width=63%>DBFLT4</td>
</tr>
<tr valign=top>
<td width=37%>SQLFLT8</td>
<td width=63%>DBFLT8</td>
</tr>
<tr valign=top>
<td width=37%>SQLBIT</td>
<td width=63%>DBBIT</td>
</tr>
<tr valign=top>
<td width=37%>SQLMONEY4</td>
<td width=63%>DBMONEY4</td>
</tr>
<tr valign=top>
<td width=37%>SQLMONEY</td>
<td width=63%>DBMONEY</td>
</tr>
<tr valign=top>
<td width=37%>SQLDATETIM4</td>
<td width=63%>DBDATETIM4</td>
</tr>
<tr valign=top>
<td width=37%>SQLDATETIME</td>
<td width=63%>DBDATETIME</td>
</tr>
<tr valign=top>
<td width=37%>SQLDECIMAL</td>
<td width=63%>DBDECIMAL</td>
</tr>
<tr valign=top>
<td width=37%>SQLNUMERIC</td>
<td width=63%>DBNUMERIC</td>
</tr>
</table><br>
<p>
The following table shows the program variable type (<i>src</i> or <i>dest</i> parameters) you must provide for each fixed-length SQL Server datatype (<i>srctype</i> or <i>desttype</i> parameters) that allows NULL values and valid byte length (<i>srclen</i> or <i>destlen</i> parameters):</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=23%></th>
<th align=left width=46%></th>
</tr>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=23%></th>
<th align=left width=46%></th>
</tr>
<tr valign=top>
<th align=left width=31%><i>srctype</i>, <i>desttype</i></th>
<th align=left width=23%><i>srclen</i>, <i>destlen</i></th>
<th align=left width=46%><i>src</i>, <i>dest</i></th>
</tr>
<tr valign=top>
<td width=31%></td>
<td width=23%></td>
<td width=46%></td>
</tr>
<tr valign=top>
<td width=31%>SQLINTN</td>
<td width=23%>1</td>
<td width=46%>DBTINYINT</td>
</tr>
<tr valign=top>
<td width=31%>SQLINTN</td>
<td width=23%>2</td>
<td width=46%>DBSMALLINT</td>
</tr>
<tr valign=top>
<td width=31%>SQLINTN</td>
<td width=23%>4</td>
<td width=46%>DBINT</td>
</tr>
<tr valign=top>
<td width=31%>SQLFLTN</td>
<td width=23%>4</td>
<td width=46%>DBFLT4</td>
</tr>
<tr valign=top>
<td width=31%>SQLFLTN</td>
<td width=23%>8</td>
<td width=46%>DBFLT8</td>
</tr>
<tr valign=top>
<td width=31%>SQLMONEYN</td>
<td width=23%>4</td>
<td width=46%>DBMONEY4</td>
</tr>
<tr valign=top>
<td width=31%>SQLMONEYN</td>
<td width=23%>8</td>
<td width=46%>DBMONEY</td>
</tr>
<tr valign=top>
<td width=31%>SQLDATIMETIMN</td>
<td width=23%>4</td>
<td width=46%>DBDATETIM4</td>
</tr>
<tr valign=top>
<td width=31%>SQLDATIMETIMN</td>
<td width=23%>8</td>
<td width=46%>DBDATETIME</td>
</tr>
</table><br>
<p>
Conversion to and from all SQL Server datatypes is supported, <i>except</i> for conversion from SQLDATETIME or SQLDATETIM4 to the following datatypes, and from the following datatypes to SQLDATETIME or SQLDATETIM4:
<ul>
<li>
SQLINT1, SQLINT2, SQLINT4</li>
<li>
SQLFLT4, SQLFLT8</li>
<li>
SQLBIT</li>
<li>
SQLMONEY, SQLMONEY4</li>
<li>
SQLDECIMAL, SQLNUMERIC</li>
</ul>
<p>
A conversion to or from the datatypes SQLBINARY and SQLIMAGE is a straight bit-copy unless the conversion involves SQLCHAR or SQLTEXT. When converting SQLCHAR or SQLTEXT data to SQLBINARY or SQLIMAGE, <b>dbconvert</b> interprets the SQLCHAR or SQLTEXT string as hexadecimal digits, whether or not the string contains a leading "0x". When converting SQLBINARY or SQLIMAGE data to SQLCHAR or SQLTEXT, <b>dbconvert</b> creates a string of hexadecimal digits without a leading "0x".</p>
<p>
Converting to the approximate numeric datatypes SQLFLT4 or SQLFLT8 can result in some loss of precision. Converting from the approximate numeric datatypes SQLFLT4 or SQLFLT8 to SQLCHAR or SQLTEXT can also result in some loss of precision.</p>
<p>
Converting to SQLFLT<i>x</i>, SQLINT<i>x</i>, SQLMONEY, SQLMONEY4, SQLDECIMAL, or SQLNUMERIC can result in overflow if the number is larger than the destination's maximum value, or in underflow if the number is smaller than the destination's minimum value. If overflow occurs when converting to SQLCHAR or SQLTEXT, the first character of the resulting value contains an asterisk (*) to indicate the error.</p>
<p>
When binding data to variables rather than accessing the data directly, use <b>dbbind</b> to convert instead of <b>dbconvert</b>.</p>
<p>
For the Windows operating system, DB-Library retrieves information about date, time, numeric, and currency formatting from the SQLCOMMN.LOC file. The location of SQLCOMMN.LOC is pointed to by the <b>SQLLocalizationFile</b> key in the Windows initialization file (WIN.INI) under the [<b>SQLSERVER</b>] application heading. For example:</p>
<pre>[SQLSERVER]
SQLLocalizationFile=C:\SQL60\BIN\SQLCOMMN.LOC
</pre>
<p>
For the Windows NT operating system, you set the date, time, numeric, and currency formatting using the International application in the Control Panel. Use the SQL Client Configuration Utility's Use International Settings option to activate this for DB-Library.</p>
<h4>Example</h4>
<p>
This example converts SQL Server data obtained with <b>dbdata</b>:</p>
<pre>DBCHAR    title[81];
DBCHAR    price[9];

// Read the query into the command buffer. 
dbcmd(dbproc, "select title, price, royalty from pubs..titles");

// Send the query to SQL Server. 
dbsqlexec(dbproc);

// Get ready to process the results of the query. 
dbresults(dbproc);

// Process each row. 
while (dbnextrow(dbproc) != NO_MORE_ROWS)
{
    // The first dbconvert() adds a null terminator to the string. 
    dbconvert(dbproc, SQLCHAR, (dbdata(dbproc,1)), (dbdatlen(dbproc,1)),
    SQLCHAR, title, (DBINT)-1);
    // The second dbconvert() converts money to string. 
    dbconvert(dbproc, SQLMONEY, (dbdata(dbproc,2)), (DBINT)-1, SQLCHAR,
        price, (DBINT)-1);

    if (dbdatlen(dbproc,3) != 0)
        printf ("%s\n $%s    %ld\n", title, price,
            *((DBINT *)dbdata(dbproc,3)));
}
</pre>
<h4>See Also</h4>
<p>
<a href="pdc04a_8tes.htm"><b>dbaltbind</b></a>, <a href="pdc04b_4zc4.htm"><b>dbbind</b></a>, <a href="pdc04b_0elh.htm"><b>dbcoltype</b></a>, <a href="pdc04c_5iw1.htm"><b>dbdata</b></a>, <a href="pdc04c_0bvy.htm"><b>dbdatlen</b></a>, <a href="pdc04c_6v39.htm"><b>dberrhandle</b></a>, <a href="pdc04e_2zxo.htm"><b>dbsetnull</b></a>, <a href="pdc04f_1c38.htm"><b>dbwillconvert</b></a>; <a href="pdc05_5u0l.htm">Cursor Functions</a>, <a href="pdcb_852a.htm">DB-Library Datatypes</a>, and <a href="pdcc_3lwj.htm">Error Messages</a></p>
<p>&nbsp;</p></body>
</HTML>

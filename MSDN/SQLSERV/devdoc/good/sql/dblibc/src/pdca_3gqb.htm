<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Options</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_options"></a>Options</h1>
<p>
The functions <b>dbsetopt</b> and <b>dbclropt</b> use the following constants, defined in SQLDB.H, for setting and clearing options. All options are off by default.
<dl>
<dt>
DBANSItoOEM<b> </b>|<b> </b>DBOEMtoANSI<b> </b>(Windows and Windows NT only)</dt>
<dd>
Translates, through the Windows functions <b>AnsiToOem</b> and <b>OemToAnsi</b>, all characters or text coming from or going to the server. Since MS-DOS uses the OEM character set and the Windows operating system uses the ANSI character set, this translation becomes necessary when international characters (character code larger than 127) are in the database.
<p>
There are two ways to convert data with transfers to and from the server:

<ul>
<li>
Calling <b>dbsetopt</b> with DBANSItoOEM or DBOEMtoANSI.</li>
</ul>

<p>
Or

<ul>
<li>
For Windows, in the WIN.INI file's [<b>SQLSERVER</b>] section, setting <b>AutoANSItoOEM=ON</b>.<p>
For Windows NT, use the SQL Client Configuration Utility's Automatic ANSI TO OEM option. This modifies the Registry under the following subtree:
<p>
HKEY_LOCAL_MACHINE\<br>
SOFTWARE\<br>
Microsoft\<br>
MSSQLServer\<br>
Client\<br>
DB-Lib
<p>
and sets the <b>AutoAnsiToOem</b> entry to ON (<b>AutoAnsiToOem:REG_SZ:ON</b>). This is the default entry.
</li>
</ul>

<p>
The <b>AutoANSItoOEM</b> entry controls the default conversion behavior when you connect to a server. If <b>AutoANSItoOEM</b> is set to <b>ON</b>, conversion is turned on in the following cases:

<ul>
<li>
ANSI clients to OEM servers (Windows and Windows NT)</li>
<li>
OEM clients to ANSI servers (Windows NT)</li>
</ul>

<p>
If <b>AutoANSItoOEM</b> is set to <b>OFF</b>, conversion is turned off for all connections.

<p>
You can override the default conversion by calling <b>dbsetopt</b> after calling <b>dbopen</b>.

<p>
Use the DBANSItoOEM option to enable conversion when connecting an ANSI client to an OEM server. Use the DBOEMtoANSI option to enable conversion when connecting to an OEM client (Windows NT Console application) to an ISO server. You cannot set both options for the same DBPROCESS.
</dd>
<dt>
DBARITHABORT</dt>
<dd>
Cancels a query during execution when an arithmetic exception occurs. If neither DBARITHABORT nor DBARITHIGNORE is set, SQL Server substitutes null values and prints a warning after the query has been executed.</dd>
<dt>
DBARITHIGNORE</dt>
<dd>
Substitutes (without warning) null values for selected or updated values when an arithmetic exception occurs during query execution. If neither DBARITHABORT nor DBARITHIGNORE is set, SQL Server substitutes null values and prints a warning after the query has been executed.</dd>
<dt>
DBBUFFER</dt>
<dd>
Buffers the result rows to access them nonsequentially with <b>dbgetrow</b>. DB-Library handles this option locally. With the option set, supply a parameter that equals the number of rows you want buffered. If you choose 0, the buffer is set to a default size (currently 100).
<p>
Row buffering keeps a specified number of SQL Server result rows in the program's memory. Without row buffering, the result row generated by each new <b>dbnextrow</b> call overwrites the contents of the previous result row. So use row buffering for programs that need to look at result rows nonsequentially.

<p>
When turned on, DBBUFFER reduces memory and performance because each row in the buffer must be allocated and freed individually. Therefore, write the application to turn on the DBBUFFER option only if it calls <b>dbgetrow</b>. Note that row buffering, an independent issue, has nothing to do with network buffering. (For more information about row buffering, see <a href="pdc04c_1ad3.htm"><b>dbgetrow</b></a>, <a href="pdc04d_0fqv.htm"><b>dbnextrow</b></a>, and <a href="pdc04b_9r8m.htm"><b>dbclrbuf</b></a> in <a href="pdc03_1nhv.htm#_db_library_functions">DB-Library Functions</a>.) 
</dd>
</dl>
<p>
DBCLIENTCURSORS<b> </b></p>
<p>
Forces the use of client cursors. When this option is set, every cursor opened with <b>dbcursoropen</b> will be a client cursor. Even when connected to SQL Server 6.0, server cursors will not be used.</p>
<p>
This option can be enabled for a client running Windows by placing the line <b>UseClientCursors=ON</b> in the <b>[SQLSERVER]</b> section of WIN.INI. This option can be enabled for a client running Windows NT by setting the value <b>UseClientCursors</b> to <b>ON</b> (<b>UseClientCursors : REG_SZ : ON</b>) in the following Windows NT Registry key:</p>
<p>
HKEY_LOCAL_MACHINE\<br>
SOFTWARE\<br>
Microsoft\<br>
MSSQLServer\<br>
Client\<br>
DB-Lib
<dl>
<dt>
DBNOAUTOFREE</dt>
<dd>
Clears the command buffer only by a call to <b>dbfreebuf</b>. When DBNOAUTOFREE is not set, after a call to <b>dbsqlexec</b> or <b>dbsqlsend</b>, the first call to either <b>dbcmd</b> or <b>dbfcmd</b> automatically clears the command buffer before the new text is entered.</dd>
<dt>
DBNOCOUNT</dt>
<dd>
Stops returning information about the number of rows affected by each Transact-SQL statement. The application can otherwise get this information by calling DBCOUNT.</dd>
<dt>
DBNOEXEC</dt>
<dd>
Processes the query through the compile step, but does not execute it. You can use this option with DBSHOWPLAN.</dd>
<dt>
DBOFFSET</dt>
<dd>
Indicates where SQL Server should return offsets to certain constructs in the query. This option takes a parameter that specifies the particular construct. Valid values of this parameter include:
<ul>
<li>
<i>select</i></li>
<li>
<i>from</i></li>
<li>
<i>table</i></li>
<li>
<i>order</i></li>
<li>
<i>compute</i></li>
<li>
<i>statement</i></li>
<li>
<i>procedure</i></li>
<li>
<i>execute</i></li>
<li>
<i>param</i></li>
</ul>

<p>
<b>Note</b>  The value <i>param</i> refers to parameters of stored procedures.


<p>
Calls to functions such as <b>dbsetopt</b> can specify these parameters in either uppercase or lowercase. For the internal types that correspond to the offsets, see <a href="pdc04c_10fa.htm"><b>dbgetoff</b></a> in <a href="pdc03_1nhv.htm#_db_library_functions">DB-Library Functions</a>. Offsets are returned only if the batch contains no syntax errors. 
</dd>
<dt>
DBPARSEONLY</dt>
<dd>
Checks the syntax of the query and returns error messages to the host. Offsets are returned if the DBOFFSET option is set and there are no errors.</dd>
<dt>
DBROWCOUNT</dt>
<dd>
Specifies a maximum number of regular rows to be returned on SELECT statements. This option does not limit the number of compute rows returned. Different from most options, DBROWCOUNT is always on, never off. Setting DBROWCOUNT to 0 sets it back to the default, returning all the rows generated by a SELECT statement. Therefore, to turn DBROWCOUNT off, turn it on with a count of 0.</dd>
<dt>
DBSETTIME</dt>
<dd>
Overrides the global DB-Library timeout (set using <b>dbsettime</b>) and sets a new DB-Library timeout for a specific DBPROCESS connection. When setting this option, supply a parameter that specifies the connection specific DB-Library timeout in seconds.</dd>
<dt>
DBSHOWPLAN</dt>
<dd>
Generates a description of the processing plan after compilation and continues executing the query.</dd>
<dt>
DBSTAT</dt>
<dd>
Determines, after each query, when performance statistics (CPU time, elapsed time, I/O, and so on) will be returned to the host. DBSTAT takes one of two parameters: <i>io</i>, for statistics about SQL Server internal I/O; and <i>time</i>, for information about SQL Server's parsing, compilation, and execution times. DB-Library receives these statistics as informational messages, and applications can access them through the user-supplied message handler.</dd>
<dt>
DBSTORPROCID</dt>
<dd>
Sends the stored procedure ID to the host before sending rows generated by the stored procedure.</dd>
<dt>
DBTEXTLIMIT</dt>
<dd>
Causes DB-Library to limit the size of returned <i>text </i>or <i>image </i>values. When setting this option, supply a parameter with the same length, in bytes, as the longest <i>text </i>or <i>image </i>value that your program can handle. DB-Library will read but ignore any part of a <i>text </i>or <i>image </i>value that goes over this limit.
<p>
In the case of huge <i>text </i>values, it may take some time for the entire <i>text </i>value to be returned over the network. To keep SQL Server from sending this extra <i>text</i>, use the DBTEXTSIZE option instead of DBTEXTLIMIT.
</dd>
<dt>
DBTEXTSIZE</dt>
<dd>
Causes SQL Server to limit the size of returned <i>text </i>or <i>image </i>values. When setting this option, supply a parameter with the same length, in bytes, as the longest <i>text </i>or <i>image </i>value that SQL Server should return.
<p>
Note that, in programs that allow ad hoc queries, the application user can override this option with the Transact-SQL SET TEXTSIZE command. To set a <i>text </i>limit that the user cannot override, use the DBTEXTLIMIT option instead.

</dd>
</dl>
<p>
DBBUFFER, DBNOAUTOFREE, and DBTEXTLIMIT are DB-Library options. That is, they affect DB-Library but are not sent to SQL Server. The others are SQL Server options (options that get sent to the SQL Server). You can set them with Transact-SQL.</p>
<p>
As mentioned in the preceding descriptions, certain options take parameters. The following table lists these options and the possible values of their parameters:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=70%></th>
</tr>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=70%></th>
</tr>
<tr valign=top>
<th align=left width=30%>Option</th>
<th align=left width=70%>Possible parameter values</th>
</tr>
<tr valign=top>
<td width=30%></td>
<td width=70%></td>
</tr>
<tr valign=top>
<td width=30%>DBBUFFER</td>
<td width=70%>0 to 32767 </td>
</tr>
<tr valign=top>
<td width=30%>DBOFFSET</td>
<td width=70%><i>select</i>, <i>from</i>, <i>table</i>, <i>order</i>, <i>compute</i>, <i>statement</i>, <i>procedure</i>, <i>execute</i>, or <i>param</i></td>
</tr>
<tr valign=top>
<td width=30%>DBROWCOUNT</td>
<td width=70%>0 to 2,147,483,647</td>
</tr>
<tr valign=top>
<td width=30%>DBSTAT</td>
<td width=70%><i>io</i> or <i>time</i></td>
</tr>
<tr valign=top>
<td width=30%>DBTEXTLIMIT</td>
<td width=70%>0 to 65,534</td>
</tr>
<tr valign=top>
<td width=30%>DBTEXTSIZE</td>
<td width=70%>0 to 2,147,483,647</td>
</tr>
</table><br>
<p>
The function <b>dbsetopt</b> requires you to specify parameters when setting any of the options in the preceding table. On the other hand, the functions <b>dbclropt</b> and <b>dbisopt</b> require you to specify a parameter only for DBOFFSET and DBSTAT, because they can have simultaneous multiple settings, which require further definition before being cleared or checked.</p>
<p>
Note that parameters specified in calls to <b>dbsetopt</b>, <b>dbclropt</b>, and <b>dbisopt</b> are always passed as character strings and enclosed in quotation marks, even if they are numeric values. For more information, see <a href="pdc04e_96us.htm"><b>dbsetopt</b></a>, <a href="pdc04b_0w38.htm"><b>dbclropt</b></a>, and <a href="pdc04c_29ro.htm"><b>dbisopt</b></a> in <a href="pdc03_1nhv.htm#_db_library_functions">DB-Library Functions</a>. </p>
<p>
<b><i></i></b></p>
<p>
<b><i></i></b></p>
<p>&nbsp;</p></body>
</HTML>

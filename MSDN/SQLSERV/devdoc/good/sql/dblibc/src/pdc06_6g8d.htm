<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbrpcparam</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbrpcparam"></a>dbrpcparam</h1>
<p>
Adds a parameter to a stored procedure or a remote stored procedure.</p>
<h4>Syntax</h4>
<p>
<b>RETCODE dbrpcparam ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
LPCSTR </b><i>paramname</i><b>, <br>
BYTE </b><i>status</i><b>, <br>
INT </b><i>type</i><b>, <br>
DBINT </b><i>maxlen</i><b>, <br>
DBINT </b><i>datalen</i><b>, <br>
LPCBYTE </b><i>value</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>paramname</i></dt>
<dd>
Is a pointer to the name of the parameter to be invoked. This name must begin with "@", as do all parameter names within stored procedures. As in the Transact-SQL EXECUTE statement, the name is optional. If no name is used, this parameter should be specified as NULL. In that case, the order of the <b>dbrpcparam</b> calls determines the parameter to which each call refers.</dd>
<dt>
<i>status</i></dt>
<dd>
Is a 1-byte bitmask of parameter options for stored procedures. The only option currently available is DBRPCRETURN, which signifies that an application designates this parameter as a return parameter. Specify 0 to indicate no options.</dd>
<dt>
<i>type</i></dt>
<dd>
Is the datatype of the <i>value</i> parameter (such as SQLINT1, SQLCHAR, and so on).</dd>
<dt>
<i>maxlen</i></dt>
<dd>
For variable-length return parameters (when <i>type</i> is SQLCHAR, SQLBINARY, SQLTEXT, or SQLIMAGE), <i>maxlen</i> is the maximum desired byte length for the <i>value</i> parameter returned from a stored procedure.
<p>
Set <i>maxlen</i> to -1 in any of these cases:

<ul>
<li>
For fixed-length return parameters (such as when <i>type</i> is SQLINT4).</li>
<li>
To pass a NULL fixed-length parameter value (such as when <i>type</i> is SQLINT4) to the stored procedure.</li>
<li>
For parameters that are not designated as return parameters.</li>
</ul>

<p>
Set maxlen to 0 to pass a NULL variable-length parameter value (when <i>type</i> is SQLCHAR, SQLBINARY, SQLTEXT, or SQLIMAGE) to the stored procedure.
</dd>
<dt>
<i>datalen</i></dt>
<dd>
For variable-length return parameters (where <i>type</i> is SQLCHAR, SQLBINARY, SQLTEXT, or SQLIMAGE), <i>datalen</i> is the actual byte length of the <i>value</i> parameter sent to the stored procedure. The byte length should <i>not</i> count any null terminator.
<p>
Set <i>datalen</i> to - 1 for non-NULL fixed-length parameters (such as when <i>type</i> is SQLINT4).

<p>
Set <i>datalen</i> to 0 to pass a NULL parameter value (fixed or variable length) to the stored procedure.
</dd>
<dt>
<i>value</i></dt>
<dd>
Is a pointer to the program variable containing the stored procedure parameter value itself.
<p>
The following table summarizes the required <i>maxlen</i> and <i>datalen</i> values for each type of parameter.

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=35%></th>
<th align=left width=35%></th>
</tr>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=35%></th>
<th align=left width=35%></th>
</tr>
<tr valign=top>
<th align=left width=30%>Parameter</th>
<th align=left width=35%><i>maxlen</i></th>
<th align=left width=35%><i>datalen</i></th>
</tr>
<tr valign=top>
<td width=30%></td>
<td width=35%></td>
<td width=35%></td>
</tr>
<tr valign=top>
<td width=30%>Fixed-length</td>
<td width=35%> - 1</td>
<td width=35%>- 1</td>
</tr>
<tr valign=top>
<td width=30%>Variable-length</td>
<td width=35%>Maximum desired length of return value</td>
<td width=35%>Length of input value not counting null terminator</td>
</tr>
<tr valign=top>
<td width=30%>Fixed-length NULL</td>
<td width=35%>- 1</td>
<td width=35%>0</td>
</tr>
<tr valign=top>
<td width=30%>Variable-length NULL</td>
<td width=35%>0</td>
<td width=35%>0</td>
</tr>
</table><br>


<p>
When specifying a NULL parameter, the actual contents of <i>value</i> is not used, and a NULL parameter is added to the stored procedure. However, when <i>type</i> is SQLDECIMAL or SQLNUMERIC, <i>value</i> must still point to a valid DBDECIMAL or DBNUMERIC structure.
</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<h4>Remarks</h4>
<p>
After initializing a stored procedure using <b>dbrpcinit</b>, you must call <b>dbrpcparam</b> once for each parameter of the stored procedure that does not have a default value. You specify default values for stored procedure parameters in the CREATE PROCEDURE statement. For more information about executing stored procedures using DB-Library functions, see "<b>dbrpcinit</b>."</p>
<h4>See Also</h4>
<p>
<a href="pdc04d_0fqv.htm"><b>dbnextrow</b></a>, <a href="pdc04e_52sz.htm"><b>dbresults</b></a>, <a href="pdc06_86sh.htm"><b>dbretdata</b></a>, <a href="pdc06_87xv.htm"><b>dbretstatus</b></a>, <a href="pdc06_8gms.htm"><b>dbrpcinit</b></a>, <a href="pdc06_3v50.htm"><b>dbrpcsend</b></a>, <a href="pdc04f_6pij.htm"><b>dbsqlok</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

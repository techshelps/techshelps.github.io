<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dbbind</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dbbind"></a>dbbind</h1>
<p>
Binds a regular result column (a column of results from a SELECT statement's select list) to a program variable.</p>
<h4>Syntax</h4>
<p>
<b>RETCODE dbbind ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
INT </b><i>column</i><b>, <br>
INT </b><i>vartype</i><b>, <br>
DBINT </b><i>varlen</i><b>, <br>
LPBYTE </b><i>varaddr</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>column</i></dt>
<dd>
Is the column number of the row data to be copied to a program variable. The first column is number 1. </dd>
<dt>
<i>vartype</i></dt>
<dd>
Is a description of the binding's datatype. It corresponds to the datatype of the program variable that receives the copy of the data from the DBPROCESS. The <b>dbbind</b> function supports a wide range of type conversions, so <i>vartype</i> can be different from the type returned by the SQL query. For instance, a SQLMONEY result can be bound to a DBFLT8 program variable, using FLT8BIND, and the appropriate data conversion happens automatically. For a list of the data conversions provided by DB-Library, see <a href="pdc04f_1c38.htm"><b>dbwillconvert</b></a>. For a list of the type definitions used by DB-Library, see <a href="pdcb_852a.htm">DB-Library Datatypes</a>. 
<p>
The following table lists legal <i>vartypes</i> recognized by <b>dbbind</b> and the program variable and SQL Server type tokens that each refers to:


<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=27%></th>
<th align=left width=27%></th>
<th align=left width=46%></th>
</tr>
<tr valign=top>
<th align=left width=27%></th>
<th align=left width=27%></th>
<th align=left width=46%></th>
</tr>
<tr valign=top>
<th align=left width=27%><i>vartype</i></th>
<th align=left width=27%><i>varaddr</i></th>
<th align=left width=46%>SQL Server type of <i>column</i></th>
</tr>
<tr valign=top>
<td width=27%></td>
<td width=27%></td>
<td width=46%></td>
</tr>
<tr valign=top>
<td width=27%>CHARBIND</td>
<td width=27%>DBCHAR</td>
<td width=46%>SQLCHAR, SQLVARCHAR, or SQLTEXT</td>
</tr>
<tr valign=top>
<td width=27%>STRINGBIND</td>
<td width=27%>DBCHAR</td>
<td width=46%>SQLCHAR, SQLVARCHAR, or SQLTEXT</td>
</tr>
<tr valign=top>
<td width=27%>NTBSTRINGBIND</td>
<td width=27%>DBCHAR</td>
<td width=46%>SQLCHAR, SQLVARCHAR, or SQLTEXT</td>
</tr>
<tr valign=top>
<td width=27%>VARYCHARBIND</td>
<td width=27%>DBVARYCHAR</td>
<td width=46%>SQLCHAR, SQLVARCHAR, or SQLTEXT</td>
</tr>
<tr valign=top>
<td width=27%>BINARYBIND</td>
<td width=27%>DBBINARY</td>
<td width=46%>SQLBINARY, SQLVARBINARY, or SQLIMAGE</td>
</tr>
<tr valign=top>
<td width=27%>VARYBINBIND</td>
<td width=27%>DBVARYBIN</td>
<td width=46%>SQLBINARY, SQLVARBINARY, or SQLIMAGE</td>
</tr>
<tr valign=top>
<td width=27%>TINYBIND</td>
<td width=27%>DBTINYINT</td>
<td width=46%>SQLINT1 or SQLINTN</td>
</tr>
<tr valign=top>
<td width=27%>SMALLBIND</td>
<td width=27%>DBSMALLINT</td>
<td width=46%>SQLINT2 or SQLINTN</td>
</tr>
<tr valign=top>
<td width=27%>INTBIND</td>
<td width=27%>DBINT</td>
<td width=46%>SQLINT4 or SQLINTN</td>
</tr>
<tr valign=top>
<td width=27%>FLT4BIND</td>
<td width=27%>DBFLT4</td>
<td width=46%>SQLFLT4 or SQLFLTN</td>
</tr>
<tr valign=top>
<td width=27%>FLT8BIND</td>
<td width=27%>DBFLT8</td>
<td width=46%>SQLFLT8 or SQLFLTN</td>
</tr>
<tr valign=top>
<td width=27%>BITBIND</td>
<td width=27%>DBBIT</td>
<td width=46%>SQLBIT</td>
</tr>
<tr valign=top>
<td width=27%>SMALLMONEYBIND</td>
<td width=27%>DBMONEY4</td>
<td width=46%>SQLMONEY4 or SQLMONEYN</td>
</tr>
<tr valign=top>
<td width=27%>MONEYBIND</td>
<td width=27%>DBMONEY</td>
<td width=46%>SQLMONEY or SQLMONEYN</td>
</tr>
<tr valign=top>
<td width=27%>DECIMALBIND</td>
<td width=27%>DBDECIMAL</td>
<td width=46%>SQLDECIMAL</td>
</tr>
<tr valign=top>
<td width=27%>NUMERICBIND</td>
<td width=27%>DBNUMERIC</td>
<td width=46%>SQLNUMERIC</td>
</tr>
<tr valign=top>
<td width=27%>SRCDECIMALBIND</td>
<td width=27%>DBDECIMAL</td>
<td width=46%>SQLDECIMAL</td>
</tr>
<tr valign=top>
<td width=27%>SRCNUMERICBIND</td>
<td width=27%>DBNUMERIC</td>
<td width=46%>SQLNUMERIC</td>
</tr>
<tr valign=top>
<td width=27%>SMALLDATETIBIND</td>
<td width=27%>DBDATETIM4</td>
<td width=46%>SQLDATETIM4 or SQLDATETIMN</td>
</tr>
<tr valign=top>
<td width=27%>DATETIMEBIND</td>
<td width=27%>DBDATETIME</td>
<td width=46%>SQLDATETIME or SQLDATETIMN</td>
</tr>
</table><br>


<p>
Note that the SQL Server type in the preceding table is listed merely for your information. The <i>vartype</i> you specify does not necessarily have to correspond to a particular SQL Server type because <b>dbbind</b> converts SQL Server data into the specified <i>vartype</i>. 

<p>
The following table lists the four representations for character and text data. They differ according to whether the data is blank-padded or null-terminated:


<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=24%></th>
<th align=left width=27%></th>
<th align=left width=18%></th>
<th align=left width=31%></th>
</tr>
<tr valign=top>
<th align=left width=24%></th>
<th align=left width=27%></th>
<th align=left width=18%></th>
<th align=left width=31%></th>
</tr>
<tr valign=top>
<th align=left width=24%><i>vartype</i></th>
<th align=left width=27%><i>varaddr</i></th>
<th align=left width=18%>Padding</th>
<th align=left width=31%>Terminator</th>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=27%></td>
<td width=18%></td>
<td width=31%></td>
</tr>
<tr valign=top>
<td width=24%>CHARBIND</td>
<td width=27%>DBCHAR</td>
<td width=18%>blanks</td>
<td width=31%>none </td>
</tr>
<tr valign=top>
<td width=24%>STRINGBIND</td>
<td width=27%>DBCHAR</td>
<td width=18%>blanks</td>
<td width=31%>\0</td>
</tr>
<tr valign=top>
<td width=24%>NTBSTRINGBIND</td>
<td width=27%>DBCHAR</td>
<td width=18%>none</td>
<td width=31%>\0</td>
</tr>
<tr valign=top>
<td width=24%>VARYCHARBIND</td>
<td width=27%>DBVARYCHAR</td>
<td width=18%>none</td>
<td width=31%>none </td>
</tr>
</table><br>


<p>
Note that '\0' is the null terminator character. Similarly, binary and image data can be stored in two different ways:


<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=24%></th>
<th align=left width=27%></th>
<th align=left width=49%></th>
</tr>
<tr valign=top>
<th align=left width=24%></th>
<th align=left width=27%></th>
<th align=left width=49%></th>
</tr>
<tr valign=top>
<th align=left width=24%><i>vartype</i></th>
<th align=left width=27%><i>varaddr</i></th>
<th align=left width=49%>Padding</th>
</tr>
<tr valign=top>
<td width=24%></td>
<td width=27%></td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=24%>BINARYBIND</td>
<td width=27%>DBBINARY</td>
<td width=49%>nulls</td>
</tr>
<tr valign=top>
<td width=24%>VARYBINBIND</td>
<td width=27%>DBVARBINARY</td>
<td width=49%>none </td>
</tr>
</table><br>


<p>
When the source column specified by the <i>column</i> parameter has a type of SQLDECIMAL or SQLNUMERIC, you can keep the same precision and scale in your bound C variable by using SRCDECIMALBIND or SRCNUMERICBIND.
</dd>
<dt>
<i>varlen</i></dt>
<dd>
Is the length of the <i>varaddr</i> program variable in bytes. For fixed-length <i>vartypes</i>, such as MONEYBIND or FLT8BIND, this length is ignored. For character, text, binary, and image types, <i>varlen</i> must describe the total length of the available destination buffer space, including any space that can be required for special terminating bytes, such as a null terminator. If <i>varlen</i> is 0, the number of bytes available is copied into the program variable. (For <i>char</i> and <i>binary</i> SQL Server data, the number of bytes available is equal to the defined length of the database column, including any blank padding. For <i>varchar</i>, <i>varbinary</i>, <i>text</i>, and <i>image</i> data, the number of bytes available is equal to the actual data contained in the column.) Therefore, if you are sure that your program variable is large enough to handle the results, you can set <i>varlen</i> to 0.
<p>
In some cases, DB-Library issues a message indicating that data conversion resulted in an overflow. This is usually caused by a <i>varlen</i> specification being too small for the data being received from SQL Server. For example, if <i>varlen</i> is set to 5, <i>vartype</i> is set to VARYCHARBIND, and the SQL Server column being bound is of type VARCHAR with a length of 20. When the bind occurs (using <b>dbnextrow</b>), the overflow message is issued. Note however that five bytes of data will be bound. Other types of binds also can cause the overflow message to be issued. For information about datatype conversions, see "<b>dbconvert</b>."
</dd>
<dt>
<i>varaddr</i></dt>
<dd>
Is the address of the program variable to which the data is copied. Calling <b>dbbind</b> with a null <i>varaddr</i> parameter breaks a previously set binding.
<p>
When binding using DECIMALBIND or NUMERICBIND, the <i>varaddr</i> parameter must be a pointer to a DBNUMERIC or DBDECIMAL C variable, respectively, with the <i>precision</i> and <i>scale</i> fields of the structure already set to the desired values. You can use DEFAULTPRECISION to specify a default precision and DEFAULTSCALE to specify a default scale.

</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL. The <b>dbbind</b> function returns FAIL if the column number given isn't valid, if the <i>vartype</i> isn't compatible with the SQL Server type being returned, or if <i>varaddr</i> is null.</p>
<h4>Remarks</h4>
<p>
Data comes back from SQL Server one row at a time. This function directs DB-Library to copy the data for a regular column (designated in a SELECT statement's select list) into a program variable. When each new row containing regular (not compute) data is read using <b>dbnextrow</b> or <b>dbgetrow,</b> the data from the designated <i>column</i> in that row is copied into the program variable with the address <i>varaddr</i>. There must be a separate <b>dbbind</b> call for each regular column to be copied. It is not necessary to bind every column to a program variable. A result column can be bound to only one program variable.</p>
<p>
SQL Server can return two types of rows: regular rows and compute rows resulting from the COMPUTE clause of a SELECT statement. The <b>dbbind</b> function binds data from regular rows. Use <b>dbaltbind</b> for binding data from compute rows.</p>
<p>
Calls to <b>dbbind</b> must be made after a call to <b>dbresults</b> and before the first call to <b>dbnextrow</b>.</p>
<p>
Using <b>dbbind</b> causes some overhead because it copies the row data into the designated program variable. To avoid this copying, the returned data can be accessed more directly with <b>dbdatlen</b> and <b>dbdata</b>.</p>
<p>
Since null values can be returned from SQL Server, there is a set of default values, one for each datatype, that will be substituted when binding null values. You can explicitly set your own values to be substituted for the default null value with the <b>dbsetnull</b> function. (For a list of the default substitution values, see <a href="pdc04e_2zxo.htm"><b>dbsetnull</b></a>.) </p>
<p>
For the Windows operating system, DB-Library retrieves information about date, time, numeric, and currency formatting from the SQLCOMMN.LOC file. The location of SQLCOMMN.LOC is pointed to by the <b>SQLLocalizationFile</b> key in the Windows initialization file (WIN.INI) under the [<b>SQLSERVER</b>] application heading. For example:</p>
<pre>[SQLSERVER]
SQLLocalizationFile=C:\SQL60\BIN\SQLCOMMN.LOC</pre>
<p>
For the Windows NT operating system, you set the date, time, numeric, and currency formatting using the International application in the Control Panel. Use the SQL Client Configuration Utility's Use International Settings option to activate this for DB-Library.</p>
<h4>Example</h4>
<p>
This example shows the typical sequence of calls:</p>
<pre>DBINT    xvariable;
DBCHAR    yvariable[10];

// Read the query into the command buffer. 
dbcmd(dbproc, "select x = 100, y = 'hello'");
// Send the query to SQL Server. 
dbsqlexec(dbproc);
// Get ready to process the results of the query. 
dbresults(dbproc);
// Bind column data to program variables. 
dbbind(dbproc, 1, INTBIND, (DBINT) 0, (BYTE *) &amp;xvariable);
dbbind(dbproc, 2, STRINGBIND, (DBINT) 0, yvariable);

// Now process each row. 
while (dbnextrow(dbproc) != NO_MORE_ROWS)
{
    // C-code to print or process row data
}</pre>
<h4>See Also</h4>
<p>
<a href="pdc04a_8tes.htm"><b>dbaltbind</b></a>, <a href="pdc04b_3lk4.htm"><b>dbanullbind</b></a>, <a href="pdc04b_92t0.htm"><b>dbconvert</b></a>, <a href="pdc04c_5iw1.htm"><b>dbdata</b></a>, <a href="pdc04c_0bvy.htm"><b>dbdatlen</b></a>, <a href="pdc04c_1ad3.htm"><b>dbgetrow</b></a>, <a href="pdc04d_0fqv.htm"><b>dbnextrow</b></a>, <a href="pdc04e_52sz.htm"><b>dbresults</b></a>, <a href="pdc04e_2zxo.htm"><b>dbsetnull</b></a>, <a href="pdc04f_1c38.htm"><b>dbwillconvert</b></a>; <a href="pdcb_852a.htm">DB-Library Datatypes</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

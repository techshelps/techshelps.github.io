<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Management in the Win32 API</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_memory_management_in_the_win32_api"></a>Memory Management in the Win32 API</h3>
<p>
The 32-bit linear virtual memory address space available to processes in the Win32 API makes memory management simpler and cleaner. (This applies to DB-Library programming as well as to all other programming for the Win32 API.)</p>
<p>
Although the memory management functions (<b>GlobalAlloc</b>, <b>LocalAlloc</b>, and so on) in the Windows operating system are supported in the Win32 API, consider using the C run-time functions <b>malloc</b> and <b>free</b> to perform dynamic memory management when you develop applications to run with the Win32 API. In addition to the standard memory management functions (<b>Global</b> and <b>Local</b>, C run-time support), the Win32 API also provides heap and virtual memory management functions for applications that require specialized memory management.</p>
<p>
Two specific areas of DB-Library programming can take advantage of the ability to address greater than 64K of data:
<ul>
<li>
<b>Processing of text and image data</b>. There are many uses for SQL Server <i>text</i> and <i>image</i> datatypes. All require manipulation of text and image data, and the ability to transfer data between the application and SQL Server. The ability to address large chunks of memory can make this easier. Because it is possible to address up to 2 gigabytes (GB) of user memory in an application for the Win32 API, you can develop text/image handling functions that transfer text/image data in a single operation instead of transferring data chunks less than 64K. (Note, however, that waiting for 2 GB of data to transfer can take considerable time.)</li>
<li>
<b>Row buffering</b>. In DB-Library for MS-DOS and Windows, you are constrained because DB-Library cannot handle more that 64K of data at a time, including memory allocated for row buffering. This value is further reduced by overhead taken up by data structures, variables, and so on. In the Win32 API, it is possible to use DBSETOPT(DBBUFFER,...) to enable row buffering for data sets greater than 64K.</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Browse Mode</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_browse_mode"></a>Browse Mode</h1>
<p>
By creating temporary tables, <i>browse mode</i> lets you scan database rows and update their values one row at a time. This feature uses <i>optimistic concurrency control</i>, which holds no locks while you are accessing data. Browse mode requires several steps because it transfers each row from the database into program variables before browsing and updating it.</p>
<p>
Since a row being browsed is just a copy residing in program variables, rather than the actual row in the database, the application must ensure that changes to the variables' values reliably update the original database row. In particular, in multiuser situations, the application must ensure that updates to the database made by one user do not overwrite updates made by another. This becomes an issue whether the application selects one row or several rows at a time from the database. A timestamp column in database tables that can be browsed lets you regulate this type of multiuser updating.</p>
<p>
Browse mode functions also allow an application to update <i>ad hoc </i>queries, that is, queries made while an application is running. Several of these functions return information that an application can use to examine the structure of a complicated ad hoc query to update the underlying database tables.</p>
<p>
Conceptually, browse mode does the following:
<ol>
<li>
Issues a SELECT statement.</li>
<li>
Fetches rows.</li>
<li>
If any changes must be made, constructs an UPDATE statement and issues it.</li>
</ol>
<p>
In an application, implement these three steps as follows:
<ol>
<li>
Execute a SELECT statement, generating result rows containing result columns. The SELECT statement must include the FOR BROWSE option.</li>
<li>
Bind the result column values into program variables, one row at a time.</li>
<li>
If appropriate, change the variables' values (possibly in response to user input).</li>
<li>
If appropriate, construct and execute an UPDATE statement that updates the database row corresponding to the current result row. To handle multiuser updates, the WHERE clause of the UPDATE statement must reference the timestamp column. An appropriate WHERE clause can be constructed with the <b>dbqual</b> function.</li>
<li>
Repeat steps 2 through 4 for each result row.</li>
</ol>
<p>
To use browse mode, the following conditions must be true:
<ul>
<li>
The SELECT statement must end with the keywords FOR BROWSE.</li>
<li>
The table(s) to be updated must have a unique index (or primary key) <i>and</i> a timestamp column.</li>
<li>
The result columns to be used in the updates must be derived from tables that can be browsed and cannot be the result of compute columns, such as "MAX<b>(</b><i>colname</i><b>)</b>". In other words, there must be a valid correspondence between the result column and the database column to be updated.</li>
</ul>
<p>
In addition, browse mode requires two DBPROCESS structures: one for selecting the data and another for updating based on the selected data.</p>
<p>&nbsp;</p></body>
</HTML>

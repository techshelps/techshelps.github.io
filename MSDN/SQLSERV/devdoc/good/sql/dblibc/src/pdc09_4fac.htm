<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>bcp_bind</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_bcp_bind"></a>bcp_bind</h1>
<p>
Binds data from a program variable to a table column for bulk copy into SQL Server.</p>
<h4>Syntax</h4>
<p>
<b>RETCODE bcp_bind ( <br>
PDBPROCESS </b><i>dbproc</i><b>, <br>
LPCBYTE </b><i>varaddr</i><b>, <br>
INT </b><i>prefixlen</i><b>, <br>
DBINT </b><i>varlen</i><b>, <br>
LPCBYTE </b><i>terminator</i><b>, <br>
INT </b><i>termlen</i><b>,<br>
INT </b><i>type</i><b>, <br>
INT </b><i>table_column</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the DBPROCESS structure that is the handle for a particular workstation/ SQL Server process. It contains all the information that DB-Library uses to manage communications and data between the workstation and SQL Server.</dd>
<dt>
<i>varaddr</i></dt>
<dd>
Is the address of the program variable from which the data is copied. If <i>type</i> is SQLTEXT or SQLIMAGE, <i>varaddr</i> can be NULL. A NULL <i>varaddr</i> indicates that text and image values are sent to SQL Server in chunks by <b>bcp_moretext</b>, rather than all at once by <b>bcp_sendrow</b>.</dd>
<dt>
<i>prefixlen</i></dt>
<dd>
Is the length, in bytes, of any length prefix this column can have; valid length prefixes are 0, 1, 2, or 4 bytes. For example, strings in some non-C programming languages are made up of a 1-byte length prefix, followed by the string data itself. If the data does not have a length prefix, set <i>prefixlen</i> to 0.</dd>
<dt>
<i>varlen</i></dt>
<dd>
Is the length of the data in the program variable, not including the length of any length prefix and/or terminator. Setting <i>varlen</i> to 0 signifies that the data is NULL. Setting <i>varlen</i> to -1 indicates that the system should ignore this parameter.
<p>
For fixed-length datatypes, such as integers, the datatype itself indicates to the system the length of the data. Therefore, for fixed-length datatypes, <i>varlen</i> must always be -1 except when the data is NULL, in which case <i>varlen</i> must be 0.

<p>
For character, text, binary, and image data, <i>varlen</i> can be -1, 0, or some positive value. If <i>varlen</i> is -1, the system uses either a length prefix or a terminator sequence to determine the length. (If both are supplied, the system uses the one that results in the shortest amount of data being copied.) If <i>varlen</i> is -1 and neither a prefix length nor a terminator sequence is specified, the system returns an error message. If <i>varlen</i> is 0, the system assumes the data is NULL. If <i>varlen</i> is some positive value, the system uses <i>varlen</i> as the data length. However, if, in addition to a positive <i>varlen</i>, a prefix length and/or terminator sequence is provided, the system determines the data length by using the method that results in the shortest amount of data being copied.
</dd>
<dt>
<i>terminator</i></dt>
<dd>
Is a pointer to the byte pattern, if any, that marks the end of this program variable. For example, C strings usually have a 1-byte terminator whose value is 0. If there is no terminator for the variable, set <i>terminator</i> to NULL. If you want to designate the C null terminator as the program variable terminator, use an empty string (<b>"</b> <b>"</b>) as <i>terminator</i> and set <i>termlen</i> to 1, since the null terminator constitutes a single byte. For instance, to use a C null terminator:
<pre>bcp_bind (dbproc, co_name, 0, -1, "", 1, 0, 2)
</pre>

<p>
If there is no terminator:

<pre>bcp_bind (dbproc, co_name, 0, -1, NULL, 0, 0, 2)
</pre>
</dd>
<dt>
<i>termlen</i></dt>
<dd>
Is the length of this program variable's terminator, if any. If there is no terminator for the variable, set <i>termlen</i> to 0.</dd>
<dt>
<i>type</i></dt>
<dd>
Is the datatype of your program variable. The data in the program variable is automatically converted to the type of the database column. If this parameter is 0, no conversion is performed. For a list of supported conversions, see "<b>dbconvert</b>." For the list of valid SQL Server datatypes, see <a href="pdcb_852a.htm">Appendix B: DB-Library Datatypes</a>. </dd>
<dt>
<i>table</i>_<i>column</i></dt>
<dd>
Is the column number in the database table to which the data is copied. Column numbers start at 1.
</dd>
</dl>
<h4>Returns</h4>
<p>
SUCCEED or FAIL.</p>
<h4>Remarks</h4>
<p>
Use <b>bcp_bind</b> for a fast, efficient way to copy data from a program variable into a table in SQL Server without first putting the data into a user file or using the Transact-SQL INSERT statement.</p>
<p>
Call <b>bcp_init</b> before calling this or any other bulk copy functions.</p>
<p>
Make a separate <b>bcp_bind</b> call for every column in the SQL Server table into which you want to copy. After the necessary <b>bcp_bind</b> calls have been made, then call <b>bcp_sendrow</b> to send a row of data from your program variables to SQL Server. Call <b>bcp_init</b> to set the table to be copied into.</p>
<p>
Whenever you want SQL Server to checkpoint the rows already received, call <b>bcp_batch</b>. For example, call <b>bcp_batch</b> once for every 1000 rows inserted or at any other interval.</p>
<p>
When there are no more rows to be inserted, call <b>bcp_done</b>. Failure to do so results in an error.</p>
<p>
When using <b>bcp_bind</b>, the user filename parameter, set <i>hfile</i>, in the call to <b>bcp_init</b>, to NULL, and set <i>direction</i>, the direction parameter, to DB_IN.</p>
<p>
Control parameter settings, specified with <b>bcp_control</b>, have no effect on <b>bcp_bind</b> row transfers.</p>
<p>
Calling <b>bcp_columns</b> when using <b>bcp_bind</b> results in an error.</p>
<h4>Example</h4>
<p>
The following example shows how to use <b>bcp_bind</b>:</p>
<pre>LOGINREC    *login;
DBPROCESS    *dbproc;
char        co_name[MAXNAME];
DBINT        co_id;
DBINT        rows_sent;
DBBOOL        more_data;
char        *terminator = "\t\t";

// Install error-handler and message-handler. 
dberrhandle(err_handler);
dbmsghandle(msg_handler);

// Open a DBPROCESS. 
login = dblogin();
DBSETLUSER(login, "user");
DBSETLPWD(login, "my_passwd");
DBSETLAPP(login, "example");
BCP_SETL(login, TRUE);
dbproc = dbopen(login, "my_server");

// Initialize bcp. 
if (bcp_init(dbproc, "comdb..accounts_info", (BYTE *)NULL,
    (BYTE *)NULL, DB_IN) == FAIL)
    exit(ERREXIT);
// Bind program variables to table columns. 
if (bcp_bind(dbproc, (BYTE *)&amp;co_id, 0, (DBINT)-1, (BYTE *)NULL, 0, 0,     1)     == FAIL)
{
    fprintf(stderr, "bcp_bind, column 1, failed.\n");
    exit(ERREXIT);
}

if (bcp_bind
    (dbproc, co_name, 0, (DBINT)-1, terminator, strlen(terminator), 0,     2)     == FAIL)
{
    fprintf(stderr, "bcp_bind, column 2, failed.\n");
    exit(ERREXIT);
}

while (TRUE)
{
    // Process and retrieve program data. 
    more_data = getdata(&amp;co_id, co_name);

    if (more_data == FALSE)
        break;
        // Send the data. 
    if (bcp_sendrow(dbproc) == FAIL)
        exit(ERREXIT);
}

// Terminate the bulk copy operation. 
if ((rows_sent = bcp_done(dbproc)) == -1)
    printf("Bulk-copy unsuccessful.\n");
else
    printf("%ld rows copied.\n", rows_sent);</pre>
<h4>See Also</h4>
<p>
<a href="pdc09_8r6w.htm"><b>bcp_batch</b></a>, <a href="pdc09_3zqs.htm"><b>bcp_colfmt</b></a>, <a href="pdc09_4ib2.htm"><b>bcp_collen</b></a>, <a href="pdc09_4voy.htm"><b>bcp_colptr</b></a>, <a href="pdc09_9tgz.htm"><b>bcp_columns</b></a>, <a href="pdc09_3tt8.htm"><b>bcp_control</b></a>, <a href="pdc09_66sl.htm"><b>bcp_done</b></a>, <a href="pdc09_2l2b.htm"><b>bcp_exec</b></a>, <a href="pdc09_46r8.htm"><b>bcp_init</b></a>, <a href="pdc09_9dys.htm"><b>bcp_moretext</b></a>, <a href="pdc09_3u7r.htm"><b>bcp_sendrow</b></a>, <a href="pdc04b_92t0.htm"><b>dbconvert</b></a>; <a href="pdcb_852a.htm">DB-Library Datatypes</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

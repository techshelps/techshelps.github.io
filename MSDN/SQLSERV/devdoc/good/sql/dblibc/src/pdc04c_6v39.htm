<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dberrhandle</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_dberrhandle"></a>dberrhandle</h1>
<p>
Supplies a user function to handle DB-Library errors.</p>
<h4>Syntax</h4>
<p>
<b>DBERRHANDLE_PROC dberrhandle ( DBERRHANDLE_PROC </b><i>handler</i><b> );</b></p>
<p>
where
<dl>
<dt>
<i>handler</i></dt>
<dd>
Is a pointer to the user function that is called whenever DB-Library determines that an error has occurred. DB-Library calls this function with six parameters:
<dl>
<dt>
<i>dbproc</i></dt>
<dd>
Is the affected DBPROCESS. If there is no DBPROCESS associated with this error, this parameter is NULL.</dd>
<dt>
<i>severity</i></dt>
<dd>
Is the severity of the error (datatype <i>int</i>). Error severities are defined in SQLFRONT.H.</dd>
<dt>
<i>dberr</i></dt>
<dd>
Is the identifying number of the error (datatype <i>int</i>). Error numbers are defined in SQLFRONT.H.</dd>
<dt>
<i>oserr</i></dt>
<dd>
Is the error number that describes the cause of the error (datatype <i>int</i>) and is specific to the operating system or network. If there is no relevant operating system error, the value is DBNOERR.</dd>
<dt>
<i>dberrstr</i></dt>
<dd>
Is a printable description of <i>dberr</i> (datatype <i>char </i><b>*</b>).</dd>
<dt>
<i>oserrstr</i></dt>
<dd>
Is a printable description of <i>oserr</i> (datatype <i>char </i><b>*</b>).
</dd>
</dl>
</dd>
</dl>
<p>
The error handler must return one of the following three values, directing DB-Library to perform particular actions:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=27%></th>
<th align=left width=73%></th>
</tr>
<tr valign=top>
<th align=left width=27%></th>
<th align=left width=73%></th>
</tr>
<tr valign=top>
<th align=left width=27%>Value</th>
<th align=left width=73%>Action</th>
</tr>
<tr valign=top>
<td width=27%></td>
<td width=73%></td>
</tr>
<tr valign=top>
<td width=27%>INT_EXIT</td>
<td width=73%>Prints an error message and exits the application. DB-Library also returns an error to the operating system. With the Windows operating system, this value is considered an error and is treated as an INT_CANCEL. </td>
</tr>
<tr valign=top>
<td width=27%>INT_CANCEL</td>
<td width=73%>Returns FAIL from the DB-Library function that caused the error.<p>
For timeout errors (SQLETIME) only, DB-Library will call <b>dbcancel</b> in an attempt to cancel the current command batch and flush any pending results. If this <b>dbcancel</b> attempt also times out, the connection is broken.</p>
</td>
</tr>
<tr valign=top>
<td width=27%>INT_CONTINUE</td>
<td width=73%>Continues to wait for one additional timeout period, and then calls the error handler again. This return value is meaningful only for timeout errors (SQLETIME). In any other case, this value is considered an error and is treated as an INT_CANCEL.</td>
</tr>
</table><br>
<p>
If the error handler returns any value besides these three, the program continues.</p>
<p>
The following example shows a typical error-handling routine:</p>
<pre>#include    &lt;sqlfront.h&gt;
#include    &lt;sqldb.h&gt;

int err_handler(dbproc, severity, dberr, oserr, dberrstr, oserrstr)
DBPROCESS    *dbproc;
int            severity;
int            dberr;
int            oserr;
char            *dberrstr;
char            *oserrstr;

{
    printf("DB-Library error:\n\t%s\n", dberrstr);

    if (severity == EXCOMM &amp;&amp; (oserr != DBNOERR || oserrstr))
        printf(Net-Lib error %d:  %s\n"' oserr, oserrstr);

    if (oserr != DBNOERR)
        printf("Operating-system error:\n\t%s\n", oserrstr);

    if (dbproc == NULL) || (DBDEAD(dbproc))
        return(INT_EXIT);
    else
        return(INT_CANCEL);
}
</pre>
<p>
<b>Important</b>  Do not call any DB-Library functions from within the error handler, because infinite recursive calls to the error handler can result.</p>
<h4>Returns</h4>
<p>
A pointer to the previously installed error handler. This can be NULL.</p>
<h4>Remarks</h4>
<p>
When a DB-Library error occurs, DB-Library immediately calls this error handler. You must install an error handler to handle DB-Library errors properly.</p>
<p>
Since the error handler is a call-back function, special consideration is required when compiling these functions for the Windows operating system. For more information, see <a href="pdc03_58ab.htm">Building Applications</a>. The user-supplied error handler completely determines the response of DB-Library to any error that occurs. It must tell DB-Library which action to take: 
<ul>
<li>
Cancel the application.</li>
<li>
Return an error code.</li>
<li>
Keep trying (in the case of a timeout error).</li>
</ul>
<p>
If the user does not supply an error handler (or passes a null pointer to <b>dberrhandle</b>), DB-Library exhibits its default error-handling behavior: it returns FAIL from the DB-Library function that caused the error and program execution continues.</p>
<p>
Another function, <b>dbmsghandle</b>, installs a message handler that DB-Library calls in response to SQL Server messages. If an application causes messages to occur from DB-Library and SQL Server simultaneously, DB-Library calls the SQL Server message handler before it calls the DB-Library error handler.</p>
<p>
The error-handling function should not call any DB-Library functions. Since calls to DB-Library functions can themselves generate errors, calls from within an error handler could result in infinite recursion. If your error handler must call a DB-Library function, it should set the error-handler to a null value, and then restore it when it exits.</p>
<p>
The following code fragment shows this technique:</p>
<pre>int    err_handler (dbproc, . . .
{
// Set the error handler to NULL to prevent infinite recursion. 
dberrhandle(NULL);
// Call other DB_Library functions as necessary. 
    .
    .
    .
// Reset the error handler to this function. 
dberrhandle(err_handler);
return(. . .
}
</pre>
<h4>See Also</h4>
<p>
<a href="pdc04d_6wrp.htm"><b>dbmsghandle</b></a>; <a href="pdcc_3lwj.htm">Error Messages</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

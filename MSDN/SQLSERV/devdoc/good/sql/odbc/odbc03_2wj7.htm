<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Driver-specific Connection Options</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_driver.2d.specific_connection_options_odbc03"></a>Driver-specific Connection Options</h1>
<p>
The ODBC SQL&nbsp;Server driver supports the following driver-specific connection options for <b>SQLSetConnectOption</b> and <b>SQLGetConnectOption</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Option</th>
<th align=left width=51%>Description</th>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_ANSI_OEM</td>
<td width=51%>SQL_AO_OFF. ANSI to OEM and OEM to ANSI translation is not performed. (Default.)<p>
SQL_AO_ON. ANSI to OEM and OEM to ANSI translation is performed.</p>
<p>
(Similar to <b>dbsetopt</b> and <b>dbclropt</b> using DBANSItoOEM | DBOEMtoANSI.)</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_CONNECTION<br>
   _DEAD<br>
(<b>SQLGetConnectOption</b> only)</td>
<td width=51%>SQL_CD_TRUE. The connection has been broken and is dead.<p>
SQL_CD_FALSE. The connection is active and available.</p>
<p>
(Similar to <b>dbdead</b>.)</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_ENLIST_IN_DTC</td>
<td width=51%>The MS&nbsp;DTC OLE transaction object that specifies the transaction to export to SQL Server. The client calls the MS&nbsp;DTC OLE <b>ITransactionDispenser::BeginTransaction </b>method to begin an MS&nbsp;DTC transaction and create an MS&nbsp;DTC transaction object that represents the transaction. The application then calls the <b>SQLSetConnectOption</b> function with the SQL_COPT_SS_ENLIST_IN_DTC option to associate the transaction object with the ODBC connection. All related database activity will be performed under the protection of the MS&nbsp;DTC transaction.<p>
SQL_DTC_DONE. Ends an MS DTC association with an ODBC connection. The application can then use the same ODBC connection for a local SQL Server transaction.</p>
<p>
(For more information, see the Guide to Microsoft Distributed Transaction Coordinator.)</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_ENLIST_IN_XA</td>
<td width=51%>To begin an XA transaction with an XA-compliant Transaction Processor (TP), the client calls the X/Open <b>tx_begin</b> function. The application then calls the <b>SQLSetConnectOption</b> function with a SQL_COPT_SS_ENLIST_IN_XA parameter of TRUE to associate the XA transaction with the ODBC connection. All related database activity will be performed under the protection of the XA transaction.<p>
To end an XA association with an ODBC connection, the client must call the <b>SQLSetConnectOption</b> function with a SQL_COPT_SS_ENLIST_IN_XA parameter of FALSE. The application can then use the same ODBC connection for a local SQL Server transaction.</p>
<p>
(For more information, see the Guide to Microsoft Distributed Transaction Coordinator.)</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_DATA<br>
(<b>SQLGetConnectOption</b> only)</td>
<td width=51%>The address of a pointer to a SQLPERF structure. The SQL&nbsp;Server driver will return a pointer to a SQLPERF structure that contains current performance data. If NULL returned, logging of performance data is not enabled.</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_DATA<br>
(<b>SQLSetConnectOption</b> only)</td>
<td width=51%>SQL_PERF_START. Start logging performance data.<p>
SQL_PERF_STOP. Stop logging performance data.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_DATA_LOG</td>
<td width=51%>Full path and filename of the performance data log file.</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_DATA_LOG<br>
   _NOW<br>
(<b>SQLSetConnectOption</b> only)</td>
<td width=51%>Writes a tab-delimited record of performance data to the specified log file. The <i>vParam</i> parameter can point to a null-terminated character string that contains a comment for this log record.</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_QUERY<br>
(<b>SQLGetConnectOption</b> only)</td>
<td width=51%>If NULL is returned, logging of long-running queries is not enabled. Otherwise, logging of long-running queries is enabled.</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_QUERY<br>
(<b>SQLSetConnectOption </b>only)</td>
<td width=51%>SQL_PERF_START. Start logging long-running queries.<p>
SQL_PERF_STOP. Stop logging long-running queries.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_QUERY<br>
   _INTERVAL</td>
<td width=51%>The threshold value in milliseconds for logging of long-running queries. A query that takes longer than this number of milliseconds to run is logged.</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_PERF_QUERY_LOG</td>
<td width=51%>Full path and filename of the log file for long-running queries.</td>
</tr>
<tr valign=top>
<td width=49%>SQL_COPT_SS_USER_DATA</td>
<td width=51%>Sets or gets the user data pointer.<p>
If not set, <b>SQLGetConnectOption</b> returns SQL_UD_NOTSET.</p>
<p>
(Similar to <b>dbsetuserdata</b> and <b>dbgetuserdata</b>.)</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_FALLBACK_CONNECT</td>
<td width=51%>SQL_FALLBACK_CONNECT_OFF. Fallback server support is disabled. (Default)<p>
SQL_FALLBACK_CONNECT_ON. When successfully connected to the primary server, the ODBC SQL&nbsp;Server driver automatically determines the current fallback server and verifies that fallback information is stored in the registry. If an attempt to connect to a primary server fails (the connection timeout must be greater than 0 for this to occur), the ODBC SQL&nbsp;Server driver will attempt to connect to the fallback server. This option must be set before calling <b>SQLConnect</b>, <b>SQLDriverConnect</b>, or <b>SQLBrowseConnect</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_INTEGRATED_SECURITY</td>
<td width=51%>SQL_IS_OFF. Request a normal connection to SQL&nbsp;Server. A trusted connection using SQL&nbsp;Server integrated security is not requested. (Default)<p>
SQL_IS_ON. Request a trusted connection to SQL&nbsp;Server regardless of the security mode of the server.</p>
<p>
For information about the SQL&nbsp;Server login security mode and trusted connections, see the <i>Microsoft SQL&nbsp;Server Administrator's Companion</i>.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_PRESERVE_CURSORS</td>
<td width=51%>SQL_PC_OFF. All cursors are closed on <b>SQLTransact</b>. (Default)<p>
SQL_PC_ON. Server cursors remain open on <b>SQLTransact</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>SQL_USE_PROCEDURE<br>
   _FOR_PREPARE</td>
<td width=51%>SQL_UP_ON. Temporary stored procedures are generated for <b>SQLPrepare</b>. (Default)<p>
SQL_UP_OFF. Temporary stored procedures are not generated for <b>SQLPrepare</b>. The statement is stored, compiled, and run at execution time. All syntax error checking is delayed until execution time.</p>
<p>
SQL_UP_ON_DROP. Temporary stored procedures are explicitly dropped on a subsequent call to <b>SQLPrepare</b> or when an <i>hstmt</i> is freed.</p>
</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Replication Overview</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_replication_overview"></a>Replication Overview</h1>
<p>
Replication is the duplication of table schema and data from a source database to a destination database. There are two basic replication models, tight consistency and loose consistency.</p>
<p>
<i>Tight consistency</i> is a replication model that guarantees that all copies will be constantly identical to the original. It requires a high-speed LAN, reduces database availability, and is a less scalable model than one based on loose consistency. This is implemented today through the use of two-phase commit. (For information on implementing two-phase commit for SQL Server 6.0, see <i>Microsoft SQL Server Programming DB-Library for C</i>.)</p>
<p>
<i>Loose consistency</i> is a replication model that allows a time lag between the moment when original data is altered and when the replicated copies of that data are updated. It does not guarantee that all copies will be constantly identical to the original. An advantage of loose consistency is that it supports LANs, WANs, fast and slow communication links, and intermittently connected databases. It allows better database availability and is much more scalable than a tight consistency model. SQL Server 6.0 replication is based on a loose consistency model.</p>
<p>
SQL Server 6.0 replication has these fundamental characteristics:
<ul>
<li>
It is transaction log-based. That is, transactions marked for replication are read from the transaction log of the source database and applied to the destination databases.</li>
<li>
It uses terminology based on a publishing/subscribing metaphor.</li>
<li>
It employs servers in three different roles: publication, distribution, and subscription.</li>
<li>
It uses a dedicated SQL Server database as a reliable queue for replicated data.</li>
<li>
It offers great flexibility in selecting the particular data that will be replicated to each destination database.</li>
<li>
It provides easy, graphical tools for set up and administration.</li>
<li>
It enhances security by limiting which users can set up and administer replication and which destination servers can receive (or even see) tables available for replication.</li>
</ul>
<p>
See the topics that follow for more information about each of these features.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

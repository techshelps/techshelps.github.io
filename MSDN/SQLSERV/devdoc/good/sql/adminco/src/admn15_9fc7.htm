<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manual Vertical Partitioning</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_manual_vertical_partitioning"></a>Manual Vertical Partitioning</h2>
<p>
Vertical partitioning¾the replication of selected columns from the base table¾can easily be accomplished using SQL Enterprise Manager. However, as an option, you can create your own stored procedure to implement vertical partitioning.</p>
<p>
For example, you could add a vertically partitioned article to the publication <i>authors_publication</i> described earlier in <a href="admn15_5a49.htm">Setting Up Replication Manually</a>. The article could create a phone list from data residing within the <i>authors</i> table in the <i>pubs</i> database.</p>
<p>
To create this vertically partitioned article, add the following steps to the replication setup script created in <a href="admn15_5a49.htm">Setting Up Replication Manually</a>:  
<ol>
<li>
Create a view that will be used to bulk copy out data during synchronization. For example:<pre>use pubs
go
create view phonelist_view as select au_id, au_lname, au_fname, phone
from authors 
go</pre>
<p>
Note that this view must contain the primary key of the underlying table (in this case, <i>au_id</i>).
</li>
<li>
Create a table creation script that will create a table on the subscriber containing the data columns that you want to pass.<p>
For example, construct a script named PHONELIST.SCH:
<pre>EXEC sp_addtype id, 'varchar ( 11 ) '    
/* adds a user defined datatype */
go
create table phonelist (
au_id id NOT NULL,
  PRIMARY KEY,
au_lname varchar ( 40 ) NOT NULL,
au_fname varchar ( 20 ) NOT NULL,
phone char ( 12 ) NOT NULL
)
go</pre>
</li>
<li>
Add the article to the appropriate publication. For example:<pre>sp_addarticle authors_publication,phonelist,authors, 
@creation_script = '\\WOLFHOUND\PUBLIC\phonelist.sch',
@sync_object = phonelist_view,
@dest_tab = phonelist,
@vertical_partition = 'true',
@description = "Vertical partition of Authors containing id, last name, first name, and phone number "
@type = 5
go</pre>
<p>
Note that the parameter <i>vertical_partition</i> was passed as <b>'</b>true<b>'</b> to this stored procedure.
</li>
<li>
Define the columns that will be published. For example:<pre>sp_articlecolumn authors_publication,phonelist,au_id,add
go
exec sp_articlecolumn authors_publication,phonelist,au_lname,add
go
exec sp_articlecolumn authors_publication,phonelist,au_fname,add
go
exec sp_articlecolumn authors_publication,phonelist,phone,add
go</pre>
</li>
<li>
Optionally, the results can be checked by using <b>sp_helparticle</b> and <b>sp_helparticlecolumns</b>. For example:<pre>sp_helparticle authors_publication, phonelist
go
sp_helparticlecolumns authors_publication, phonelist
go</pre>
</li>
</ol>
<p>
The preceding example creates a vertically partitioned table on all subscribers, one that is automatically updated whenever the underlying data stored in the authors table of the publication server is modified.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When to Use Tempdb in RAM</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_when_to_use_tempdb_in_ram"></a>When to Use Tempdb in RAM</h2>
<p>
The temporary <i>tempdb</i> database is used for work space in sorting and for creating temporary tables in some join operations. Microsoft SQL Server provides a powerful option, <b>tempdb in RAM</b>, which allows the <i>tempdb</i> to be made entirely memory resident. In some specific situations, this can provide a performance advantage. However if <b>tempdb in RAM</b> is used inappropriately, it can consume memory that would otherwise be used for the SQL Server cache buffer system, and this can hurt performance.</p>
<p>
In most cases, the available RAM is best used as a data cache, rather than as the location of <i>tempdb</i>. Data in <i>tempdb</i> will itself be cached using the SQL cache buffer system's LRU algorithm. </p>
<p>
This is analogous to the decision of using a RAM disk versus using the smartdrive cache program on a Microsoft Windows workstation. In this case, the RAM consumed for the RAM disk is unavailable for smartdrive and can only be used for objects specifically placed on the RAM disk. In a few cases where your knowledge of the application environment is such that you know that most access is to a few files, and if they are small enough to fit on the RAM disk, and if your remaining disk accesses have such poor reference locality that no feasible amount of cache will provide a good hit ratio, then a RAM disk might be superior to smartdrive. However, in most cases smartdrive will be superior, since it caches all accesses (not just those placed on the RAM disk).</p>
<p>
Similarly, use of <b>tempdb in RAM</b> can accelerate <i>tempdb</i> operations but will deplete memory available for the SQL cache buffer, which can lower the cache hit ratio. Memory used for <b>tempdb in RAM</b> is allocated separately from the pool set by the <b>memory</b> option, and the server must be configured appropriately. </p>
<p>
For example, if you use 10MB for <b>tempdb in RAM</b>, the <b>memory</b> setting must be reduced by 10MB to free up memory for this. By contrast, giving all available memory to SQL Server (as opposed to setting some aside for <b>tempdb in RAM</b>) can increase the cache hit ratio. The SQL cache buffer system will cache all disk I/O operations, including <i>tempdb</i>.</p>
<p>
Because of the limited amount of RAM available on many machines, this will constrain the available size of <i>tempdb</i> when used in RAM. If unforeseen growth requirements for <i>tempdb</i> materialize, this could be a problem. If this is a concern, it is better to leave <i>tempdb</i> as part of the regular data cache, which will have the effect of keeping the most active pages in RAM.</p>
<p>
Using available RAM for the SQL cache buffer system is usually better than using a large chunk of it for <b>tempdb in RAM</b>. However, using <b>tempdb in RAM</b> might be beneficial if all of the following conditions are true:
<ul>
<li>
You have a significant amount of available system RAM. This normally would equate to more than 64 MB, with amounts of 128 MB and above more typical.</li>
<li>
Your applications have a locality of reference such that the SQL Server cache hit ratio is poor, even with a lot of available buffer cache. This hit ratio can be viewed by using SQL Performance Monitor to monitor the <b>Cache Hit Ratio</b> counter in the <b>SQLServer</b> object. For information about using SQL Performance Monitor, see Chapter 19, <a href="admn19_3vs5.htm">Monitoring Server Activity and Performance</a>. </li>
<li>
Your applications do a lot of <i>tempdb</i> operations. Rather than guess whether this is the case, this can be monitored by using <b>sp_lock</b> to observe the lock activity in <i>tempdb</i> while queries are running. <p>
Or you can monitor <i>tempdb</i> space consumption by issuing this (or a similar) query either interactively or from a looping batch file:
<pre>SELECT SUM(DPAGES) FROM TEMPDB..SYSINDEXES</pre>
</li>
<li>
The <i>tempdb</i> operations are sized so that they will fit on the <i>tempdb</i> made possible by your RAM configuration.</li>
</ul>
<p>
If the decision is made to use <b>tempdb in RAM</b>, it is best to objectively verify the performance benefit obtained from this. To do this:
<ol>
<li>
Select a query or small set of queries that typify your most frequently performed <i>tempdb</i>-intensive operations. </li>
<li>
Run these several times, noting the execution time. </li>
<li>
Reconfigure for <b>tempdb in RAM</b>, run the identical queries, and note the difference. </li>
</ol>
<p>
If the amount of improvement is not worthwhile, it is probably best to give the RAM back to the SQL cache system. Using <b>tempdb in RAM</b> is safe and will not harm database integrity or recoverability. This is because <i>tempdb</i> is only used for intermediate operations and is re-created from scratch upon each server restart.</p>
<p>
The <b>tempdb in RAM</b> option is an important performance tool that is available for cases where analysis shows it to be beneficial. In some cases it can provide a significant performance improvement, but it should not be used indiscriminately.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

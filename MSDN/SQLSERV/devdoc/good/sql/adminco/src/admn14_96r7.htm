<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Replication Tips</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_replication_tips"></a>Replication Tips</h1>
<p>
Here are some tips that you can use to more efficiently configure replication: </p>

<h5><a name="_where_possible.2c_.publish_a_table_only_once"></a>Where possible, publish a table only once</h5>
<p>
Using the same table in multiple publications will cause multiple distribution events (and thus a higher load on network traffic) every time data in that table changes.</p>

<h5><a name="_publish_only_the_amount_of_data_required"></a>Publish only the amount of data required</h5>
<p>
Since the publication of replicated data is quite easy to set up, there is a tendency to publish more data than is actually required. This has the effect of both consuming additional resources within the distribution databases and lowering the throughput for required data.</p>

<h5><a name="_establish_as_many_subscriptions_as_possible_before_initial_synchronization"></a>Establish as many subscriptions as possible before initial synchronization</h5>
<p>
Synchronization of databases or even individual tables requires a fairly high amount of system overhead. Using automatic synchronization on a scheduled basis allows an interval between the time a server subscribes to a publication and the initial synchronization of the destination database on that subscription server. This allows subscription servers a period of minimal impact during which they can subscribe to several publications. It also allows synchronization to be scheduled for a low-activity period on the publication server.</p>
<p>
When a scheduled initial synchronization time arrives, synchronization occurs only for those subscribers that have requested synchronization (not for all subscribers to that publication). This minimizes the impact on the other subscribers. </p>

<h5><a name="_to_replicate_to_numerous_subscribers.2c_.establish_a_multilevel_replication_scheme"></a>To replicate to numerous subscribers, establish a multilevel replication scheme </h5>
<p>
A publication server can publish to one or more "publishing subscribers," which in turn publish the data to their own subscribers. For more information, see the advanced replication examples in Chapter 15, <a href="admn15_738u.htm">Advanced Replication</a>. </p>
<h5>To replicate to numerous subscribers, reduce their distribution frequency</h5>
<p>
A single distribution server will be able to distribute transactions to a larger number of subscribing servers if the frequency of the distribution task associated with each subscribing server is scheduled to run less frequently. Additional performance gains can be achieved by staggering the initial times of these distribution tasks so that they do not all attempt to start simultaneously.</p>
<p>
For example, suppose transactions are being replicated to 30 subscribing servers, and distribution is scheduled to occur for all machines every 3 minutes. By creating 10 distribution tasks with a starting time of 12:00 AM, 10 tasks with a starting time of 12:01 AM, and 10 tasks with a starting time of 12:02 AM, the times when these tasks start will be staggered, reducing contention for resources and improving overall throughput.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

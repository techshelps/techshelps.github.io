<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using SQL Server Segments</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_using_sql_server_segments"></a>Using SQL Server Segments</h1>
<p>
A <i>segment </i>is a named collection of disk pieces. It is a subset of one or more database devices that is available to a particular database. Using segments can increase SQL Server performance by giving you more control over where you place specific database objects to optimize the space available on a device. Specific segments can be allocated to specific tables or indexes.</p>
<p>
<b>Important</b>  With Windows NT-based servers, there are several ways to spread a database over multiple disks. Segments are one way, but the use of segments introduces administrative complexity and the possibility for error. In most cases, hardware-based RAID or Windows NT software-based RAID are recommended instead. You can achieve essentially the same performance advantages as segments by using RAID and letting the disk subsystem distribute the I/O load among the disks.</p>
<p>
Each SQL Server database can use up to 32 segments. Selective use of segments can increase the performance of SQL Server by improving disk access time for read and write operations. For example, it is possible to split a table and its index(es) onto separate segments. This approach can be very effective in improving performance, but it requires a detailed understanding of how data and indexes are arranged and accessed. </p>
<p>
While data striping (using Windows NT or a disk array) guarantees that the data is spread over all devices, when using SQL Server segments, this can occur only when the database is full and the data accessed is distributed across the segments.</p>
<p>
The following illustration shows the relationship between segments, databases, and database devices.</p>
<p>
<img src="images/fig4_2.gif" border=0></p>
<p>
Although you can have more than one segment on a database device, it isn't advised, because any objects that you place on those segments will compete with each other for space. It is best to specify one segment per device.</p>
<p>
These are typical uses for segments:
<ul>
<li>
Placing a table on one physical device and its nonclustered indexes on a different physical device.</li>
<li>
Splitting a large, heavily-used table across database devices on two separate disk controllers. </li>
<li>
Storing data for <i>text</i> and <i>image</i> columns on separate physical devices. </li>
<li>
Placing a transaction log on a separate device so it can be dumped. </li>
</ul>
<p>
When a database is created, the following segments are automatically created for the database:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%></th>
<th align=left width=75%></th>
</tr>
<tr valign=top>
<th align=left width=25%>Segment name</th>
<th align=left width=75%>Function</th>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%></td>
<td width=75%></td>
</tr>
<tr valign=top>
<td width=25%>SYSTEM</td>
<td width=75%>Stores the system tables.</td>
</tr>
<tr valign=top>
<td width=25%>LOGSEGMENT</td>
<td width=75%>Stores the transaction log.</td>
</tr>
<tr valign=top>
<td width=25%>DEFAULT</td>
<td width=75%>Stores all other database objects ¾ unless you create additional segments. If you don't specify a segment when creating the table or by using <b>sp_placeobject</b>, the database objects are stored on this segment.</td>
</tr>
</table><br>
<p>
Additional segments can be added to a database after database devices have been allocated and assigned to the database. </p>
<p>
When you add, extend, or delete a segment, you should also dump the <i>master</i> database.</p>
<p>
<b>Caution</b>  When you restore a database with the LOAD DATABASE statement, the segments and device fragments must be set up in the same way as the database that was dumped.</p>
<p>
For more information, choose one of the following topics:</p>
<p>
<a href="admn07_1g8j.htm">Adding Segments</a></p>
<p>
<a href="admn07_7l2r.htm">Creating Database Objects on Segments</a></p>
<p>
<a href="admn07_37cj.htm">Extending Segments</a></p>
<p>
<a href="admn07_9khg.htm">Adding Objects to Another Segment</a></p>
<p>
<a href="admn07_7wfn.htm">Displaying Information About Segments</a></p>
<p>
<a href="admn07_3soj.htm">Dropping Segments</a></p>
<p>
<a href="admn07_8mb7.htm">Example of Using Segments</a></p>
<p>
<a href="admn07_65mb.htm">Example of Splitting a Table Across Segments</a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

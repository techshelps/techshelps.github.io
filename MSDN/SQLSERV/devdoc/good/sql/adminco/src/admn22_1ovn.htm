<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inserts Based on Subqueries</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_inserts_based_on_subqueries"></a>Inserts Based on Subqueries</h2>
<p>
The following example reads every row in <i>large_tab</i> and inserts the values of the columns <i>col1</i> and <i>col2</i> into <i>new_tab</i>, all within a single transaction:</p>
<pre>insert new_tab select col1, col2 from large_tab
</pre>
<p>
Each individual insert operation is logged and the records remain in the transaction log until the entire statement has completed. Any locks required for processing the inserts remain in place until the transaction is either committed or rolled back. Because the destination table is often a new table, the locking issue might not be as severe as in previous examples. Depending on the size of the table being read, however, the amount of logging could pose a problem.</p>
<p>
Like the mass updates problem, you can often solve this problem by breaking up the statement into several statements that accomplish the same task. For example, the single INSERT statement in the previous example could be broken into two or more pieces, as follows:</p>
<pre>insert new_tab 
select col1, col2 from large_tab where col1 &lt;= y
go

dump transaction database_name with truncate_only
go

insert new_tab
select col1, col2 from large_tab where col1 &gt; y
go

dump transaction database_name with truncate_only
go
</pre>
<p>
In this example, <i>y</i> represents a median value for <i>col1</i>, and null values are not allowed. This is just one example of several possible ways to break up a query. Although it is not required, the inserts run significantly faster if there is a clustered index on <i>large_tab.col1</i>.</p>
<p>
If transaction logs are saved for media failure recovery, the log should be dumped to a device, and the WITH TRUNCATE_ONLY option should not be used. After you execute a DUMP TRANSACTION WITH TRUNCATE_ONLY statement, you must dump the database before you can dump the transaction log to a device.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

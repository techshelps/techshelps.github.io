<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Views as Security Mechanisms</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_views_as_security_mechanisms"></a>Views as Security Mechanisms</h3>
<p>
Views can serve as security mechanisms. Through a view, users can query and modify only the data they can see. The rest of the database is neither visible nor accessible.</p>
<p>
Permission to access the subset of data in a view must be granted or revoked, regardless of the set of permissions in force on the view's underlying tables. Data in an underlying table that is not included in the view is hidden from users who are authorized to access the view but not the underlying table.</p>
<p>
By defining different views and selectively granting permissions on them, a user (or any combination of users) can be restricted to different subsets of data. The following examples illustrate the use of views for security purposes:
<ul>
<li>
Access can be restricted to a subset of the rows of a base table (a value-dependent subset). For example, you might define a view that contains only the rows for business and psychology books and keep information about other types of books hidden from some users.</li>
<li>
Access can be restricted to a subset of the columns of a base table (a value-<br>
independent subset). For example, you might define a view that contains all the rows of the <i>titles</i> table but omits the <i>royalty</i> and <i>advance</i> columns, since this information is sensitive.</li>
<li>
Access can be restricted to a row-and-column subset of a base table.</li>
<li>
Access can be restricted to the rows that qualify for a join of more than one base table. For example, you might define a view that joins the <i>titles</i>, <i>authors</i>, and <i>titleauthor</i> table to display the names of the authors and the books they have written. This view would hide personal data about the authors and financial information about the books.</li>
<li>
Access can be restricted to a statistical summary of data in a base table. For example, you might define a view that contains only the average price of each type of book.</li>
<li>
Access can be restricted to a subset of another view or of some combination of views and base tables.</li>
</ul>
<p>
For information about creating views, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<p>
As an example, say you want to prevent some users from accessing the columns in the <i>titles</i> table that have to do with money and sales, while allowing all users to see the other columns. You could:
<ol>
<li>
Create a view – named <i>bookview </i>– of the <i>titles</i> table that omits the <i>price</i>, <i>advance</i>, <i>royalty</i>, and <i>ytd_sales</i> columns.</li>
<li>
Grant all object permissions on <i>bookview</i> to the <i>public</i> group.</li>
<li>
Grant all object permissions on <i>titles</i> to the <i>sales</i> group.</li>
</ol>
<p>
To set up equivalent permission conditions without using a view, you could:
<ol>
<li>
Grant all object permissions on <i>titles</i> to <i>public.</i></li>
<li>
Revoke select and update permissions on <i>titles</i> from the <i>public</i> group for the <i>price</i>, <i>advance</i>, <i>royalty</i>, and <i>ytd_sales</i> columns</li>
<li>
Grant select and update permissions on <i>titles</i> to the <i>sales</i> group for the <i>price</i>, <i>advance</i>, <i>royalty</i>, and <i>ytd_sales</i> columns.</li>
</ol>
<p>
One possible problem with the second scheme is that users not in the <i>sales</i> group who enter the statement "SELECT * FROM <i>titles</i>" might be surprised to see a "permission denied" message. SQL Server expands the asterisk into a list of all the columns in the <i>titles</i> table and, since permission on some of these columns has been revoked from nonsales users, refuses access to them. The error message lists the columns for which the user does not have access.</p>
<p>
To see all the columns for which they do have permission, the nonsales users would have to name the columns specifically. For this reason, creating a view and granting the appropriate permissions on it is a better solution.</p>
<p>
In addition to protecting data based on a selection of rows and/or columns, views can be used for context-sensitive permission. For example, you can create a view that gives a data entry clerk permission to access only those rows that he or she has added or updated. You could:
<ol>
<li>
Add a <i>user_-name</i> column to a table in which the login ID of the user entering each row will be automatically recorded with a default. </li>
<li>
Define a view that includes all the rows of the table where <i>user_name</i> is the current user, which can be checked with the SUSER_NAME() function. For example:<pre><code>where user_name = SUSER_NAME() 
</code></pre>
<p>
The rows retrievable through the view now depend on the identity of the person who executes the SELECT statement against the view.
</li>
</ol>
<p>
For information on managing and using tables, view, columns, and defaults and on using the <i>user_id</i> system function, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. For information on managing permissions, see Chapter 9, <a href="admn09_8ozd.htm">Managing Security</a>. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

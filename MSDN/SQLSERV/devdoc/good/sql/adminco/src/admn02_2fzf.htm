<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 2   Introducing the SQL Distributed Management Framework</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_introducing_the_sql_distributed_management_framework"></a>Introducing the SQL Distributed Management Framework</h1>
<p>
The SQL Distributed Management Framework (SQL-DMF) is an integrated framework of objects, services, and components used to manage Microsoft SQL Server. SQL-DMF provides a flexible and scaleable management framework that is adaptable to your specific needs. SQL-DMF lessens the need for user-attended maintenance tasks¾such as database backup and alert notification¾by providing services that interact directly with SQL Server. </p>
<p>
All the key components of SQL-DMF are core elements of SQL Server. SQL-DMF allows you to proactively manage the SQL Servers in your enterprise by allowing you to define scenarios and corrective actions and trigger either alerts to notify someone of the problem or tasks to correct the problem. </p>
<p>
At its most basic level, SQL-DMF provides direct access to the SQL Server engine and services from the command line through Transact-SQL. The second tier of the framework is a set of distributed management objects (DMOs) that provides an object interface to the SQL Server engine and services. The top level of the framework is a graphical administration tool, SQL Enterprise Manager, which provides you with an easy way to manage a multiple-server environment. The framework also provides services for replication, scheduling, and alerting.</p>
<p>
<img src="images/sqldmf.gif" border=0></p>
<p>
Command-line access to the SQL Server engine and services is through Transact-SQL, an enhanced version of SQL (structured query language). Using Transact-SQL, you can perform administrative tasks such as creating devices and databases. You can also insert, update, and delete data stored in SQL Server. For an overview of using Transact-SQL, see <i>Microsoft SQL Server Database Developer's Companion</i>. The Transact-SQL language is fully documented in <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>
<p>
The distributed management objects (DMOs) are 32-bit OLE objects and expose interfaces for all SQL Server management functions. DMO provides over 60 objects and over 1000 properties and methods. SQL Server functions exposed through DMO include system stored procedures, system catalogs, Transact-SQL statements, extended stored procedures, and scheduling, alert, and replication commands. DMO is fully documented in <i>Microsoft SQL Server Programming SQL OLE Objects</i>. The DMO objects support OLE automation, which allows their use with Visual Basic 4.0 or the Visual Basic for Applications environment (available with products such as the 32-bit version of Microsoft Excel).</p>
<p>
Microsoft SQL Enterprise Manager provides an intuitive, graphical user interface that enables you to easily manage Microsoft SQL Servers across an enterprise. Using SQL Enterprise Manager you can perform SQL Server management tasks, such as creating devices and databases; backing up and restoring databases; performing queries; managing replication, alerting, and scheduling tasks; and much more.</p>
<p>
The rest of this chapter provides an overview of SQL Enterprise Manager. For detailed information about how to use SQL Enterprise Manager features, see online Help.</p>
<p>
For more information, see <a href="admn02_72uq.htm">Microsoft SQL Enterprise Manager</a>.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

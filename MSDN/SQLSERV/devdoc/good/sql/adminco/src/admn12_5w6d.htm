<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Restoring the master Database</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_restoring_the_master_database"></a>Restoring the <i>master</i> Database</h3>
<p>
A damaged <i>master</i> database makes itself known either with an inability to start SQL Server, by segmentation faults or input/output errors, and/or in a report from DBCC. Damage can be caused by a media failure in the area in which <i>master</i> is stored.</p>
<p>
The procedure used to recover a damaged <i>master</i> database is different from the procedure used to recover user databases. If the <i>master</i> database becomes unusable, it must be restored from a previous dump. All changes made to the <i>master</i> database after the last dump are lost when the dump is reloaded and therefore must be reapplied. </p>
<p>
It is strongly recommended that the <i>master</i> database be backed up each time it is changed. This is best accomplished by prohibiting the creation of user-defined objects in <i>master</i> and by being aware of the statements and system procedures¾and the equivalent actions in SQL Enterprise Manager¾that modify it. </p>
<p>
The most common statements and system procedures that modify <i>master</i> are:
<ul>
<li>
DISK INIT</li>
<li>
CREATE DATABASE</li>
<li>
ALTER DATABASE</li>
<li>
DISK MIRROR</li>
<li>
DISK UNMIRROR</li>
<li>
DISK REMIRROR</li>
<li>
<b>sp_dropremotelogin</b></li>
<li>
<b>sp_addumpdevice</b></li>
<li>
<b>sp_dropdevice</b></li>
<li>
<b>sp_addlogin</b></li>
<li>
<b>sp_droplogin</b></li>
<li>
<b>sp_addserver</b></li>
<li>
<b>sp_dropserver</b></li>
<li>
<b>sp_addremotelogin</b></li>
</ul>
<p>
If a user database is created, expanded, or shrunk after the most recent dump of the <i>master</i> database, and if it becomes necessary to reload the <i>master</i> database, then that user database and all data in will be lost. Because of this, always dump the <i>master</i> database after creating, expanding, or shrinking user databases.</p>
<p>
These are the steps required to recover a damaged <i>master</i> database:</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To recover a damaged <i>master</i> database</h5>
<ol>
<li>
Use the SQL Setup program to rebuild the <i>master</i> database. <p>
You must rebuild using the same character set and sort order as the <i>master</i> database dump that will be reloaded.
</li>
<li>
Add a dump device (unless the dump will be reloaded from diskettes).</li>
<li>
Restart SQL Server in single-user mode.</li>
<li>
Restore the <i>master</i> database from the most recent dump. </li>
<li>
Apply to the <i>master</i> database any changes that were not included in the most recent dump.</li>
<li>
Restore the <i>msdb</i> database.</li>
</ol>
<p>
These steps are explained in the sections that follow.</p>

<h4><a name="_rebuild_the_master_database"></a>Rebuild the <i>master</i> Database</h4>
<p>
Use the SQL Setup program to rebuild the <i>master </i>database.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To rebuild the <i>master</i> database</h5>
<ol>
<li>
From the Microsoft SQL Server 6.0 program group, double-click the SQL Setup icon. <p>
Or from the distribution media, from the directory containing the software compatible with your hardware platform's processor architecture, run SETUP.EXE. 
</li>
<li>
Respond to the on-screen instructions until the Options dialog box appears.</li>
<li>
Select the Rebuild Master Database option, and then choose the Continue button. <p>
A confirmation dialog box appears.
</li>
<li>
Choose Resume. <p>
The Rebuild Options dialog box appears.
<p>
<img src="images/ad03_319.gif" border=0>
</li>
<li>
To specify the character set, choose the Sets button and complete the Select Character Set dialog box that appears.<p>
If you will be using the default character set (ISO 8859-1), skip this step.
<p>
<b>Important</b>  You must use the same character set and sort order that were previously used for this <i>master</i> database.
</li>
<li>
To specify the sort order, choose the Orders button and complete the Select Sort Order dialog box that appears.<p>
If you will be using the default sort order (dictionary order, case-insensitive), skip this step.
</li>
<li>
In the Rebuild Options dialog box, choose Continue. <p>
The SQL Server Installation Path dialog box appears.
<p>
<img src="images/ad03_320.gif" border=0>
</li>
<li>
If it is not correctly displayed in the SQL Server Installation Path dialog box, enter the location of the existing SQL Server installation, and then choose Continue. <p>
The Rebuild Master Device dialog box appears.
<p>
<img src="images/ad03_321.gif" border=0>
</li>
<li>
If it is not correctly displayed in the Rebuild Master Device dialog box, enter the location and name of the existing MASTER device. Also enter a MASTER device size, and then choose Continue.<p>
The <b>setup</b> program rebuilds the <i>master</i> database.
</li>
<li>
When rebuilding is complete and the completion dialog box appears, choose the Exit button.</li>
</ol>
<p>
The files MASTER.DA@ and MASTER.AL@ are stored in the \SQL60\INSTALL directory. When rebuilding the <i>master</i> database (or when installing SQL Server), one of these two files is used by the <b>setup</b> program. When the default sort order and character set are selected, MASTER.DA@ is expanded and copied onto the server, replacing MASTER.DAT. When an alternate character set and/or sort order is selected, MASTER.AL@ is expanded, copied onto the server, and several SQL scripts are run. </p>
<p>
Although they were part of earlier releases, SQL Server 6.0 does not need (nor does it provide) a <b>bldmastr</b> utility or an INSTMSTR.SQL script.</p>

<h4><a name="_add_the_dump_device"></a>Add the Dump Device</h4>
<p>
If the backup of <i>master</i> was made to a disk dump device or a tape dump device, you must add that dump device before performing the load. (This is not necessary if you will be loading from a diskette dump device.) Use SQL Enterprise Manager or the <b>sp_addumpdevice</b> system procedure to add the dump device. The following procedure assumes that you are using SQL Enterprise Manager.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To add the dump device</h5>
<ol>
<li>
Start SQL Server normally and start SQL Enterprise Manager.</li>
<li>
From the Server Manager window select a server, from the Tools menu choose Backup/Restore, and then from the Database Backup/Restore dialog box that appears, choose the New button.<p>
The Create Dump Device window appears.
<p>
<img src="images/ad05_14.gif" border=0>
</li>
<li>
In the Device Name box, type the logical name of the dump device that contains the most recent <i>master</i> database backup. For example:<pre>Tape0</pre>
</li>
<li>
In the Device Path box, type the physical name for that dump device.<p>
This is the path and filename of the operating-system file that contains the backup. For example:
<pre>\\.\TAPE0</pre>
<p>
If you do not remember the path, you can choose the Locate button and select a dump device file from the directory tree that is displayed. For more information about physical names see <a href="admn05_6vg3.htm">About Dump Devices</a>, in Chapter 5, "Managing Devices."
</li>
<li>
Select a device type:<ul>
<li>
<i>Disk</i> specifies a dump device file on a hard disk (or other disk media).</li>
<li>
<i>Tape</i> specifies a dump device for a tape drive. </li>
</ul>
</li>
<li>
If you selected Tape in step 4, also select or clear the Skip Headers check box.<p>
This option indicates whether ANSI tape labels are read or ignored. 
</li>
<li>
Choose the Add button.<p>
The dump device is added.
</li>
</ol>
<p>
For information about adding a device using the <b>sp_addumpdevice</b> system procedure, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>

<h4><a name="_start_sql_server_in_single.2d.user_mode"></a>Restart SQL Server in Single-user Mode</h4>
<p>
Before you can reload the <i>master</i> database, you must start SQL Server in single-user mode.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To start SQL Server in single-user mode</h5>
<ol>
<li>
If it is already running, stop the server.</li>
<li>
From a command prompt, type:<p>
<b>sqlservr /c /d</b><i>master_device</i> <b>/m</b>
<p>
where
<dl>
<dt>
<b>/c</b></dt>
<dd>
Starts SQL Server independent of the Windows NT Service Control Manager.</dd>
<dt>
<b>/d</b><i>master_device_ path</i></dt>
<dd>
Specifies a physical name for the MASTER database device. For example: 
<pre>/dc:\sql60\data\master.dat
</pre>
</dd>
<dt>
<b>/m</b></dt>
<dd>
Specifies single-user mode.
</dd>
</dl>
</li>
</ol>
<p>
For example:</p>
<pre>sqlservr /c /dc:\sql60\data\master.dat /m
</pre>

<h4><a name="_restore_the_master_database_from_the_most_recent_backup"></a>Restore the <i>master</i> Database from the Most Recent Backup</h4>
<p>
Reload the most recent dump of the <i>master</i> database using SQL Enterprise Manager or the LOAD DATABASE statement. </p>
<p>
When using SQL Enterprise Manager, in the Server Manager window the server status may appear red since the server was started independent of the Windows NT Service Control Manager. However, you can ignore this status. You will be able to connect and then restore the <i>master</i> database from the Database Backup/Restore window.</p>
<p>
You can also restore the <i>master</i> database using the LOAD statement from <b>isql</b> (or another query interface).</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To restore the master database using the LOAD statement</h5>
<ul>
<li>
Type:<p>
<b>LOAD DATABASE</b> <i>dbname</i> <br>
<b>FROM</b> <i>dump_device</i> [<b>,</b> <i>dump_device2</i> [...<b>,</b> <i>dump_device32</i>]]
<p>
where
<dl>
<dt>
<i>dbname</i></dt>
<dd>
Is the database name (in this case, <i>master</i>).</dd>
<dt>
<i>dump_device</i></dt>
<dd>
Is the logical name of the dump device.
</dd>
</dl>
</li>
</ul>
<p>
For example:</p>
<pre>LOAD DATABASE master FROM tape0
</pre>
<p>
<b>Important</b>  When the load of <i>master</i> is complete, the server automatically shuts itself down. An error message appears, stating that the server connection has been broken. You can then restart the server normally.</p>
<p>
Additional options can be used with the LOAD DATABASE statement. For information, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>

<h4><a name="_apply_changes_to_the_master_database"></a>Apply Changes to the <i>master</i> Database</h4>
<p>
If there have been no changes to the <i>master</i> database since the last dump, then you are done. Restart the server normally (in multiuser mode).</p>
<p>
If login IDs or devices have been added to or dropped from the <i>master</i> database since the last dump, those changes must be reapplied. Restart the server and reapply the changes manually or from saved batch files.</p>
<p>
If databases have been created, expanded, or shrunk since the last dump of <i>master</i>, those databases must be re-created and all the data contained in them must be reentered. This can be done manually, from saved batch files, or by reloading dumps of those databases after they have been re-created.</p>
<p>
If you have made many changes and have no recent dump, it is possible that by reloading <i>master</i> in some cases you can regain data in user databases that has been lost. This technique requires the use of DISK REINIT and DISK REFIT and can involve manual modifications to the <i>master</i> database tables. </p>
<p>
Use DISK REINIT to re-create rows in <i>sysdevices</i> for all database devices that have been added after the most recent dump. DISK REINIT updates <i>sysdevices</i> just as DISK INIT does, but it does not format the physical disk file, so existing data is preserved.</p>
<p>
Use DISK REFIT to re-create rows in <i>sysusages</i> and <i>sysdatabases</i> for all CREATE and ALTER DATABASE statements that were performed after the most recent dump. DISK REFIT scans the physical file associated with each space that is allocated to databases. It also adds the corresponding <i>sysdatabases</i> entries. Some of the information is not reconstructed perfectly. For example, the original virtual device number is not assigned, because it is not known. Instead, virtual device numbers are assigned sequentially. The database owner is not extracted while scanning the physical files; ownership is set to the system administrator. It is also not possible to determine how many <i>sysusages</i> entries originally existed. DISK REFIT inserts a separate entry for each different segment type.</p>
<p>
When this is done, correct the entries made by DISK REFIT to <i>sysdatabases</i> and <i>sysusages</i> (if desired) and also add to <i>syslogins</i> any login IDs that were not retained. Then shut down and restart SQL Server.</p>
<p>
<b>Caution</b>  Capturing the latest changes made to a database by using DISK REFIT and DISK REINIT to re-create the <i>master</i> database is possible, but it is preferable to keep the <i>master</i> database current by dumping it after creating or altering databases. Using DISK REFIT and DISK REINIT is a complicated process that can result in data loss because many of the changes made to a database often must be reconstructed manually in the <i>master</i> database. If you feel this technique is necessary, contact your primary support provider before beginning the recovery process.</p>
<p>
After all the changes since the last dump of <i>master</i> have been applied, restart the server normally (in multiuser mode).</p>

<h4><a name="_restore_the_msdb_database"></a>Restore the <i>msdb</i> Database</h4>
<p>
The <i>msdb</i> database supports SQL Executive and provides a storage area for scheduling information. The schedules that you implement using SQL Enterprise Manager are maintained in the <i>msdb</i> database. This includes such things as the tasks that you schedule from the Task Scheduling window, the automatic backups you schedule from the Database Backup/Restore window, and all replication tasks (which are automatically created by the system if the server is configured as a replication distributor).</p>
<p>
During installation of a server, the <b>setup</b> program automatically creates two devices (of 2 MB and 1 MB) on the same disk drive as the <i>master</i> database, and then places the <i>msdb</i> database on the 2 MB device (MSDBDATA) and its transaction log on the 1 MB device (MSDBLOG). Scheduling information is then stored in this database.</p>
<p>
During a rebuild of the <i>master</i> database, the <b>setup</b> program drops and re-creates the <i>msdb</i> database, which results in a loss of all scheduling information. Therefore, after the <i>master</i> database has been restored, you must perform these steps to restore <i>msdb</i>:</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To restore <i>msdb</i></h5>
<ol>
<li>
If necessary, expand the MSDBDATA device, and then allocate the expanded space to the <i>msdb</i> database.<p>
The <i>msdb</i> database must have as much or more space allocated to it as was allocated to it before the <i>master</i> database was rebuilt.
</li>
<li>
Restore the <i>msdb</i> database from the most recent database backup.</li>
<li>
Apply all transaction log dumps that were performed after that database dump.</li>
<li>
Re-create any scheduled tasks that were implemented after the last transaction log dump. </li>
</ol>
<p>
In general, the <i>msdb</i> database can be treated as a user database, as described in <a href="admn12_6k6r.htm">Re-creating and Reloading Lost Databases</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Frequently Asked Questions</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_frequently_asked_questions"></a>Frequently Asked Questions</h1>
<p>
Here are answers to some frequently asked questions about replication.</p>

<h5><a name="_who_can_receive_replicated_data.3f"></a>Who can receive replicated data?</h5>
<p>
Only SQL Server 6.0 servers can participate in replication. SQL Server 6.0 servers can publish, distribute, and subscribe to replicated data. However, replication is designed to support¾in the future¾other types of ODBC-enabled subscribers.</p>

<h5><a name="_what_is_not_replicated.3f"></a>What is not replicated?</h5>
<p>
Not replicated are system tables and changes to the schema of a published table. </p>
<p>
When the identity property has been applied to a column, data from that column can be replicated, but the identity property cannot. The identity property will not be applied to that column on subscription servers. For information about the identity property, see the <i>Microsoft SQL Server Transact-SQL Reference</i>. </p>
<p>
All datatypes are replicated, with these exceptions:
<ul>
<li>
A <i>timestamp</i> column becomes a <i>binary</i>(8) column.</li>
<li>
When using transaction-based replication, data in a <i>text</i> or <i>image</i> column is passed as NULL. <p>
<b>Note</b>  <i>Text</i> and <i>image</i> columns can be replicated via the table refresh mechanism. See "How are text and image columns handled?" next in this chapter.
</li>
</ul>
<p>
Also, when setting up a publication, you can choose to pass user-defined datatypes or convert them to their base datatypes. </p>

<h5><a name="_how_are_text_and_image_columns_handled.3f"></a>How are text and image columns handled?</h5>
<p>
Transaction-based replication of <i>text</i> and <i>image</i> columns is not supported. However, scheduled table refresh of <i>text</i> and <i>image</i> columns is supported.</p>
<p>
For example, you could publish an article that contains <i>text</i> and <i>image</i> columns and do a table refresh of the subscribers at a defined interval (for example, every hour). You could then join the <i>text</i> and <i>image</i> destination table with a transaction log-based destination table. To ensure proper consistency, you would probably need to publish a <i>timestamp</i> column.</p>
<p>
For information about publishing a table by using the Scheduled Table Refresh option, see Chapter 14, <a href="admn14_4kha.htm">Setting Up Replication</a>. </p>

<h5><a name="_how_many_times_can_a_subscriber_subscribe_to_an_article.3f"></a>How many times can a subscriber subscribe to an article?</h5>
<p>
SQL Server replication permits each subscription server to subscribe only once to a particular article. Note that if a subscriber subscribes at the publication level, it is automatically subscribed to each article in that publication.</p>
<p>
However, it is possible for a subscription server to use multiple copies of replicated data, since secondary copies of data can be locally processed on the subscription server. </p>
<p>
For example, if <i>database_1</i> subscribes to <i>table_a</i>, then <i>database_2</i> on the same server cannot subscribe to the same article. However, you could, for example, create a trigger on the destination <i>table_a</i> in <i>database_1</i> that does an insert, update, or delete into a table in <i>database_2</i> every time destination <i>table_a</i> is updated. Or you could create a cross-database view using the replicated data.</p>

<h5><a name="_where_can_replicated_data_be_modified.3f"></a>Where can replicated data be modified?</h5>
<p>
In most cases, data will be modified only on the publication server. It is recommended that you maintain all replicated data residing in destination tables on subscription servers as read-only. (This means the data should be treated as read-only for the users of the subscription databases. Do not set the Read Only database option, or that subscription database will be unable to receive replicated data.)</p>
<p>
This is not as limiting as it might at first sound, since each server can act as both subscriber and publisher and since secondary copies of data can be locally processed on the subscriber. For examples of publishing subscribers and of secondary processing of data, see Chapter 15, <a href="admn15_738u.htm">Advanced Replication</a>. </p>

<h5><a name="_can_one_distribution_server_support_multiple_publication_servers.3f"></a>Can one distribution server support multiple publication servers?</h5>
<p>
Yes. It possible to have one server distributing from a number of publication servers to a number of subscription servers. However, this increases the hardware requirements for the distribution server. In such a configuration, the distribution server will require additional memory and available disk space. A multiprocessor machine would be beneficial in this environment because it would take full advantage of the multithreaded architecture of the replication processes.</p>

<h5><a name="_is_this_a_hot_backup_system.3f"></a>Is this a hot backup system?</h5>
<p>
The replication capability of SQL Server 6.0 is not specifically designed to accomplish hot backups, and it does not allow the subscriber to be automatically updated on changes that affect system tables (such as schema changes or permission changes).</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

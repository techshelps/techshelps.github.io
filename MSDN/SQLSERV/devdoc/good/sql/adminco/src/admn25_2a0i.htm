<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error 822</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_error_822"></a>Error 822</h1>
<h4>Severity Level 20</h4>
<h4>Message Text</h4>
<pre>Could not start I/O for request %S_BLKIOPTR
</pre>
<h4>Explanation</h4>
<p>
SQL Server encountered an error while attempting to initiate a read or write request. This error can occur for any of the following reasons:
<ul>
<li>
A database device is off-line.</li>
<li>
A database device has been removed or renamed. </li>
<li>
A database device is inaccessible for another reason (such as insufficient permissions).</li>
</ul>
<p>
The parameter in the error message refers to an internal structure and does not help determine which database device or file is involved. However, other error messages appearing in the error log just before error 822 usually indicate the device involved. </p>
<h4>Action</h4>
<p>
Examine the availability and condition of the device involved using your standard operating-system procedures, and be sure the device is accessible.</p>
<p>
Because error 822 marks the database as "suspect," SQL Server cannot recover the database upon restarting. If you know that the database was marked suspect because the device was unavailable, you can reset the status of the database to allow recovery to continue. </p>
<p>
<b>Caution</b>  Do not use these procedures if there are other errors in the error log, near the error 822 message, that suggest that the database might have been marked suspect for some other reason.</p>
<p>
Reset the suspect status using one of the following procedures:
<ul>
<li>
Execute the <b>sp_resetstatus</b> procedure as described in Chapter 24, "Additional Problem-solving Techniques." This is the safest method. After you execute <b>sp_resetstatus</b>, restart SQL Server.</li>
</ul>
<p>
Or
<ul>
<li>
Use the following procedure on the suspect database:<ol>
<li>
Reset the suspect status, as follows:<pre>sp_configure 'allow updates', 1
go

reconfigure with override
go

use master
go

begin tran
go

update sysdatabases
set status=0 where name='database_name'
go
</pre>
<p>
When you reset the suspect status using this procedure, all options on the database are reset to their default values. (Using <b>sp_resetstatus</b> leaves these options intact.)
</li>
<li>
Use <b>sp_dboption</b> to reestablish the options after you complete this procedure. (For additional information, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.)</li>
<li>
If only one row is affected by the UPDATE statement, continue with these instructions. If more than one row is affected by the UPDATE statement, roll back the transaction and find out why other rows are being affected.</li>
<li>
If the above statements affect only one row, use the following statements to commit the transaction, disable updates to the system tables, issue a checkpoint, and shut down SQL Server:<pre>commit tran
go

sp_configure 'allow updates', 0
go

reconfigure with override
go

checkpoint
go

shutdown
go
</pre>
</li>
<li>
Restart SQL Server.</li>
<li>
If the database is marked suspect again, examine the error log for indications of other errors. If the database is not marked suspect, use <b>sp_dboption</b> to restore database options that might have been reset when you reset the status in the first step of this procedure.</li>
</ol>
</li>
</ul>
<h4></h4>
<p>
Here are two examples of error 822 and the associated messages from the log. Examining the error messages that occurred just before error 822 usually helps determine the type of problem.</p>
<h5>Device missing</h5>
<p>
In this example, the device C:\SQL60\DATA\DEVICE.DAT (corresponding to virtual device 6) did not exist when SQL Server started, causing access to the device to fail:</p>
<pre>kernel: initializing virtual device 6, "c:\sql60\data\device.dat"
kernel: dopen: open "c:\sql60\data\device.dat", No such file or directory
kernel: dinit: failed to open primary device c:\sql60\data\device.dat for 
        vdn 6
kernel: udstartio: vdn 6 has not been set up
server: Error: 822, Severity: 20, State: 3
server: Could not start I/O for request BLKIO .... 
</pre>
<p>
To correct an error like this, be sure that the virtual device appearing in the error message exists, and correct whatever error prevented SQL Server from finding it. For example, it might have been renamed or moved while SQL Server was not running.</p>
<p>
If the virtual device no longer exists, you must restore from known clean backups. Merely creating an empty device with the correct name will not solve this problem.</p>
<h5>Permission problems</h5>
<p>
Permission problems can occur if the device is on an NTFS partition.</p>
<p>
In this example, the permissions on C:\SQL60\DATA\DEVICE.DAT (virtual device 6) were incorrect, so SQL Server could not access it:</p>
<pre>kernel: initializing virtual device 6, "c:\sql60\data\device.dat"
kernel: dopen: open "c:\sql60\data\device.dat", Permission denied
kernel: dinit: failed to open primary device c:\sql60\data\device.dat for 
        vdn 6
kernel: udstartio: vdn 6 has not been set up
server: Error: 822, Severity: 20, State: 3
server: Could not start I/O for request BLKIO .... 
</pre>
<p>
To correct an error like this, change the object ownership for the device to Administrator, and be sure that the account that SQL Server was started under has read and write permissions on the object.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

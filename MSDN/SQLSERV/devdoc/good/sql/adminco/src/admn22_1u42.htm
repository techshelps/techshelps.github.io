<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Transaction Logs</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_about_transaction_logs_admn22"></a>About Transaction Logs</h1>
<p>
Most SQL Server processing is logged in the <i>syslogs</i> transaction log table. Each database (including the <i>master</i>, <i>model</i>, and <i>tempdb</i> system databases) has its own <i>syslogs</i> transaction log table. As the database is modified, the transaction log grows until it is truncated, either by a DUMP TRANSACTION statement or automatically (if the <b>trunc. log on chkpt.</b> option is set).</p>
<p>
<b>Caution</b>  Do not try to access the <i>syslogs</i> transaction log table. It is for internal use by SQL Server only.</p>
<p>
The transaction log records data modification requests (UPDATE, INSERT, or DELETE statements) before they are executed. When a transaction begins, a begin transaction event is recorded in the log. This event is used during automatic recovery to determine the starting point of the transaction.</p>
<p>
As each data modification statement is received, it is recorded in the log. The change is always recorded in the log before that change is made in the database itself. This type of log is called a <i>write-ahead</i> log.</p>
<p>
At the end of the transaction, a commit transaction record is logged. This delineates the transaction and also allows automatic recovery to query this log record and find out if the transaction completed successfully.</p>
<p>
<b>Caution</b>  It is imperative that SQL Server know that a write has completed. A write-caching disk controller compromises the ability of SQL Server to manage transactions by making it appear as if the write-ahead logging has completed, even though it has not. This can result in errors such as error 605 and can also cause database corruption. For this reason, do not use a write-caching controller with SQL Server unless it can guarantee that a write will complete.</p>
<p>
The transaction log is shared by all users of the database. Multiple changes are frequently recorded each time a log page is written to the database device. This greatly improves I/O efficiency.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

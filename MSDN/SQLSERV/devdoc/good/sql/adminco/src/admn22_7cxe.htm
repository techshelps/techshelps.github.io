<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Truncating the Transaction Log</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_truncating_the_transaction_log_admn22"></a>Truncating the Transaction Log</h1>
<p>
To prevent the transaction log from filling up, it must be truncated periodically. You can do this either by enabling the <b>trunc. log on chkpt.</b> option or by regularly executing the DUMP TRANSACTION statement. Even if the <b>trunc. log on chkpt.</b> option is enabled, you might have to explicitly execute DUMP TRANSACTION statements during peak periods to prevent the log from filling up.</p>
<p>
Because the <b>trunc. log on chkpt.</b> option causes the equivalent of the DUMP TRANSACTION WITH TRUNCATE_ONLY statement to be executed, it truncates the log without saving it to a device. Use this option only on databases for which transaction log dumps are not being saved (typically development systems or systems where only full database dumps, and not DUMP TRANSACTION, will be used).</p>
<p>
If you are in a production environment and using DUMP TRANSACTION to truncate the log, time the statements close enough together so that no process ever receives the 1105 error (which indicates that the log is full). It is possible to automate this process. For details, see "Automating Transaction Log Dumps," later in this chapter.</p>
<p>
When you execute a DUMP TRANSACTION statement, transactions completed prior to the earliest outstanding transaction or the earliest transaction marked for replication but not yet moved to the <i>distribution</i> database are truncated from the log, unless they are on the same log page as the last outstanding transaction. All transactions since the earliest outstanding transaction are considered active and are not truncated, even if they have completed.</p>
<p>
The following diagram illustrates that all transactions after an outstanding transaction are considered active. Note that because pages are reallocated as necessary, page numbers do not necessarily increase over time. </p>
<p>
<img src="images/trans01.gif" border=0></p>
<p>
Because the DUMP TRANSACTION statement truncates only the inactive portion of the log, you should be careful not to allow <i>stranded</i> (uncommitted) transactions to remain in the log for a long time. </p>
<p>
For example, suppose a user issues a BEGIN TRANSACTION statement but never commits the transaction. Nothing logged after the BEGIN TRANSACTION can be purged out of the log until one of the following events occurs:
<ul>
<li>
The user who began the transaction completes it</li>
<li>
The user process that issued the BEGIN TRANSACTION statement is forcibly stopped and the transaction is rolled back</li>
<li>
SQL Server is shut down and restarted</li>
</ul>
<p>
Stranded transactions are usually due to application problems.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error 1204</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_error_1204"></a>Error 1204</h1>
<h4>Severity Level 19</h4>
<h4>Message Text</h4>
<pre>SQL Server has run out of LOCKS. Re-run your command when there are fewer active users, or ask your System Administrator to reconfigure SQL Server with more LOCKS.
</pre>
<h4>Explanation</h4>
<p>
This error occurs when there are not enough system locks to complete the current command.</p>
<h4>Action</h4>
<p>
Either execute the command again, when activity on the server is low, or have the system administrator increase the number of locks by calling the <b>sp_configure</b> system stored procedure from the <i>master </i>database. </p>
<p>
To view the current configuration:</p>
<pre>sp_configure locks
go
</pre>
<p>
This will report the minimum, maximum, current run, and configuration values. To increase the number of locks, run <b>sp_configure</b> again, specifying the number of locks to be configured. For example, to configure 10,000 locks:</p>
<pre>sp_configure locks, 10000
go

reconfigure with override
go
</pre>
<p>
Stop and re-start SQL Server so the changes can take effect. Locks are allocated at system startup.</p>
<p>
If the number of locks cannot be increased at the current time, and the single action requires more locks than the server is currently configured for, you may be able to reduce the number of locks required for the operation. For example, try the following:
<ul>
<li>
For large update statements, break the updates into smaller units that will affect only a subset of records at a time. For example, you could use the primary key, changing the single UPDATE statement from:<pre>UPDATE employees
SET salary= salary * 1.05
WHERE employee_id between 1000 and 9999
go</pre>
<p>
to several UPDATE statements:
<pre>UPDATE employees
SET salary= salary * 1.05
WHERE employee_id between 1000 and 4999
go
UPDATE employees
SET salary= salary * 1.05
WHERE employee_id between 5000 and 9999
go</pre>
</li>
<li>
For a maintenance type of task or for a global update, you could also put the database into single-user mode (if it is feasible to keep other users out of the database). Single-user mode does not set locks, so you will not run out of locks, and the operation will run somewhat faster (because you save the locking overhead).</li>
<li>
For a large <b>bcp</b> operation, the entire operation is treated as a single transaction. When you use the batch parameter (<b>/b</b>), <b>bcp</b> will treat the operation in small transactions with the number of rows specified. At the end of each small transaction, the system resources held by that transaction are freed, so fewer locks are needed.</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

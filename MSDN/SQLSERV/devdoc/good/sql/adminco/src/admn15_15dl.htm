<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Subscription Server Recovery</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_subscription_server_recovery"></a>Subscription Server Recovery</h3>
<p>
A subscription server is the easiest type of server to recover. At the beginning of each scheduled distribution event, the distribution server connects to the subscription server and finds the value of the highest transaction that has been applied. This value is stored in the <i>job_id</i> column of the <i>MSlast_job_info</i> table. </p>
<p>
If a subscription server is unavailable for an extended period of time, all replicated transactions are held in the distribution server's distribution database. When the subscription server is again available on the network, distribution of replicated transactions continues at the point where it last stopped. This allows a subscription server to automatically recover and receive all replicated transactions after situations such as a loss of power, loss of network connection, or minor hardware failure. In many cases, a subscription server can also recover from a major failure.</p>
<p>
If a major subscription server failure occurs and the subscribing database must be recovered from a backup tape, it is still possible for the subscription server to automatically recover and receive all replicated transactions. Not only are all nondistributed transactions retained within the distribution server's distribution database, but distributed transactions are also retained for a configurable period of time after they have been sent to the subscription server. After a previous image of the subscription server is restored from backup, if the j<i>ob_id</i> column in the <i>MSlast_job_info</i> points to a valid transaction that is still available on the distribution server, all replicated transactions with <i>job_id</i> greater than this entry will be automatically distributed to the subscription server. </p>
<p>
To ensure the best chance of this occurring automatically, immediately after the subscription server fails, disable the scheduled cleanup task associated with that subscription server until restoration is accomplished. This will keep the system from aging retained transactions off of the distribution server before they can be reapplied.</p>
<p>
There is a potential problem to be aware of when a subscription server is recovered from an earlier backup tape. Because any subscription server need not receive all replicated transactions from a publication server, it is a perfectly valid condition for the subscription server to contain a <i>job_id</i> in the <i>MSlast_job_info</i> table that is much smaller than the next <i>job_id</i> that needs to be passed to this server. For this reason, the distribution server will not declare an error condition if the subscription server contains an old <i>job_id</i>. </p>
<p>
In this situation, the distribution server will send all stored transactions to the subscription server, but a logical gap can exist of transactions that had previously been sent to the subscriber removed from the distribution database but were not preserved on the backup used to recover the subscription server. Should this condition exist, an information message will be produced by the distribution process. All replicated changes can be recovered by unsubscribing and then resubscribing to the affected publications.</p>
<p>
When the distribution task runs and encounters a missing job, it raises a warning. Optionally, you can run the distribution task so that a missing job will raise a fatal error. This is set by running the distribution task with the <b>-m </b><i>missingjobsfailure</i> option, where <i>missingjobsfailure</i> is 0 or 1. If 1, a missing job will raise an error with a severity of 20 (fatal). If 0, a missing job will raise an error with a severity of 10 (informational). The default is 0. For more information see Chapter 16, <a href="admn16_5oab.htm">Scheduling Tasks</a>. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

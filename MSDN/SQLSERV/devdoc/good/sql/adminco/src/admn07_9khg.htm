<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Objects to Another Segment</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_adding_objects_to_another_segment"></a>Adding Objects to Another Segment</h2>
<p>
The <b>sp_placeobject</b> system procedure causes all future disk allocation for the specified object to occur on a particular segment. The <b>sp_placeobject</b> system procedure does not remove objects from their allocated segments, nor does it move an object from one database device to another. Whatever pages have been allocated on the first database device remain allocated; whatever data was written to the first database device remain on that database device.</p>
<p>
Do not use the <b>sp_placeobject</b> system procedure to move indexes, because splitting indexes across database devices affects system performance. Instead, drop the index and re-create it on the new segment.</p>
<p>
A clustered index (in which the bottom level of the index contains the actual data) is on the same segment as a table. You can move a table by dropping its index and then creating a clustered index for the table on the desired segment. </p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To place an object on another segment</h5>
<p>
<b>sp_placeobject</b> <i>segname</i>, <i>objname</i></p>
<p>
where
<dl>
<dt>
<i>segname</i></dt>
<dd>
Specifies the segment to use for future space allocation for the database object.</dd>
<dt>
<i>objname</i></dt>
<dd>
Specifies the table or index whose subsequent space allocation is to be put on the <i>segname</i> segment.
</dd>
</dl>
<p>
For example, to allocate additional space for the <i>mytab</i> table on <i>bigseg</i>, type:</p>
<pre>sp_placeobject bigseg, mytab
</pre>
<p>
<b>Note</b>  Executing DBCC CHECKALLOC prints warning message 2558 for each object that is split across segments. You can ignore these messages if you intentionally want objects to span segments.</p>
<p>
When you create a table with <i>text</i> or <i>image</i> columns, the data is stored on a separate chain of text pages. A table that contains <i>text</i> or <i>image</i> columns has an additional entry in <i>sysindexes</i> for the text chain, with the <i>name</i> column set to the name of the table preceded by the letter "t" and an index ID of 255. You can use <b>sp_placeobject</b> to store the text chain on a separate device, giving both the table name and the name of the text chain from <i>sysindexes</i>. For example:</p>
<pre>sp_placeobject textseg, 'mytab.tmytab'
</pre>
<p>
By default, a chain of text pages is placed on the same segment as its table. After you run <b>sp_placeobject</b>, whatever pages were previously written to the old device remain allocated, but all new allocations take place on the new segment.</p>
<p>
For more information about <b>sp_placeobject</b>, see the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

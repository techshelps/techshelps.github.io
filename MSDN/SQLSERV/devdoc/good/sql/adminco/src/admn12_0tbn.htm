<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Transaction Log Dumps</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_about_transaction_log_dumps"></a>About Transaction Log Dumps</h3>
<p>
The SA is responsible for maintaining the transaction log, which includes these steps:
<ul>
<li>
Placing the transaction log onto a separate database device from its database. (This is recommended for all user databases.)</li>
<li>
Monitoring the transaction log with the <b>sp_spaceused</b> and <b>sp_helpdb</b> system procedures, or the DBCC SQLPERF(LOGSPACE) statement.</li>
<li>
Keeping the transaction log at a reasonable size (when the log is in a separate database device) by regularly using the DUMP TRANSACTION statement.</li>
</ul>
<p>
A transaction log can be backed up separately from the database if it is stored on a separate database device. If it is, then it is important to back up the transaction log frequently. A transaction log dump, like a database dump, can take place while the database is active. </p>
<p>
Typically, transaction logs are backed up more often than databases. A transaction log might be backed up once a day, and a database might be backed up once a week. Backing up a transaction log takes less time and uses less storage space than backing up a database. (Do not back up a transaction log unless the database has already been backed up at least once.)</p>
<p>
It takes longer to recover a database when you restore the database and all transaction logs sequentially than it does when you restore only the database. Finding the correct strategy depends on your environment. The time required to perform backups must be considered in relation to the time required to restore. (Of course, you will back up more often than you will restore.)</p>
<p>
You back up a transaction log by using either SQL Enterprise Manager or the DUMP TRANSACTION statement. The DUMP TRANSACTION statement has several options, including these:
<dl>
<dt>
<b>TRUNCATE_ONLY</b></dt>
<dd>
Removes the inactive part of the log without making a backup copy of it. This frees space used by the transaction log. Use this option only if you do not want to keep transaction logs for recovery.
<p>
The DUMP DATABASE statement backs up the log but does not remove the inactive portion of it. If you use TRUNCATE_ONLY and do not have a backup created by DUMP DATABASE, the changes that had been recorded in the log cannot be recovered. In addition, future transaction log dumps cannot be used for recovery until a DUMP DATABASE statement is issued.

<p>
Since the TRUNCATE_ONLY option does not perform a dump, you can use any or no dump device name.

<p>
You cannot use both TRUNCATE_ONLY and NO_LOG in the same statement.
</dd>
<dt>
<b>NO_LOG</b></dt>
<dd>
Used when you have run out of space in the transaction log and you cannot execute DUMP TRANSACTION WITH TRUNCATE_ONLY to retrieve some space from the log. Like TRUNCATE_ONLY, NO_LOG removes the inactive part of the log without making a backup copy of it. In addition, NO_LOG saves space by not recording this procedure in the transaction log.
<p>
After the transaction log has been dumped using NO_LOG, the changes that had been recorded in the log cannot be recovered. You should immediately execute DUMP DATABASE.

<p>
You cannot use both TRUNCATE_ONLY and NO_LOG in the same statement.
</dd>
<dt>
<b>NO_TRUNCATE</b></dt>
<dd>
Saves the complete log (everything that has happened since the last DUMP TRANSACTION) even if the database is inaccessible. Unlike the TRUNCATE_ONLY and NO_LOG options, the NO_TRUNCATE option does not purge the log of committed transactions.
<p>
If the database and the log are on separate devices, and if you lose the database device, at that point you can still dump the current contents of the log. After the failure condition is resolved (for example, after hardware is repaired) this allows you to recover up to the exact time of the failure 

</dd>
</dl>
<p>
If you always dump the database (which backs up the database and the transaction log) and never dump the transaction log, the transaction log will never be cleared out and may run out of space. You can clear the log by using DUMP TRANSACTION and the WITH TRUNCATE_ONLY clause immediately after you dump the database.</p>
<p>
Two database options, Select Into/Bulk Copy and Truncate Log on Checkpoint, affect transaction log dumps. By default, these options are set off in newly created databases (although the Truncate Log On Checkpoint option is set on for the <i>master</i> and <i>msdb</i> databases).</p>
<p>
If Truncate Log On Checkpoint is set on, you are not allowed to dump the log because changes are not recoverable. You can dump the log when Select Into/Bulk Copy is set on, provided that you have not performed any nonlogged operations (SELECT INTO or fast bulk copy). If nonlogged operations have taken place since the last database dump, or if Truncate Log On Checkpoint is set on, the DUMP TRANSACTION statement produces an error message instructing you to use DUMP DATABASE instead. You will also get an error message if you use DUMP TRANSACTION but the transaction log is not on a separate device. For information about setting database options, see Chapter 6, <a href="admn06_4nn7.htm">Managing Databases</a>. </p>
<p>
You can use a DBCC statement, DBCC SQLPERF(LOGSPACE), to check the space in your transaction log. In addition, you can use this DBCC statement in conjunction with the Windows NT Performance Monitor to set an alert for when the transaction log is full. For more information about setting an alert from the Windows NT Performance Monitor, see your Windows NT documentation.</p>

<h4><a name="_truncating_the_transaction_log"></a>Truncating the Transaction Log</h4>
<p>
Truncating a transaction log removes the inactive portion of the log. You usually truncate a transaction log after you have backed up an entire database (because using DUMP DATABASE backs up the database and the transaction log but does not remove the inactive portion of the transaction log).</p>
<p>
The following options can be used to keep transaction logs as small as possible. All three truncate the log without making a backup copy.
<ul>
<li>
The DUMP TRANSACTION statement with the WITH TRUNCATE_ONLY clause</li>
<li>
The DUMP TRANSACTION statement with the WITH NO_LOG clause</li>
<li>
Setting the database option for Truncate Log On Checkpoint<p>
This is set by using SQL Enterprise Manager or <b>sp_dboption</b>, and it means that you can recover the database only as it was at the last database backup. It is usually better to have a background task regularly back up the transaction log.
</li>
</ul>
<p>
<b>Caution</b>  After the transaction log has been dumped by using the WITH TRUNCATE_ONLY or WITH NO_LOG clause, the changes that had been recorded in the log cannot be recovered. You should use the DUMP DATABASE statement after dumping a transaction log with these options. If the log has been dumped by using WITH NO_LOG, you should immediately execute DUMP DATABASE.</p>
<p>
You can use the null device name DISKDUMP with either of the DUMP TRANSACTION statements. However, since the data is written to the null device, you cannot recover the transaction log dumps.</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

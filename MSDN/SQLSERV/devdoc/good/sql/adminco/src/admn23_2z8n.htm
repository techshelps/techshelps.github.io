<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Worktable created for REFORMATTING</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_worktable_created_for_reformatting"></a>Worktable created for REFORMATTING</h2>
<p>
When joining tables, SQL Server might, in some cases, use a <i>reformatting strategy</i> to join the tables and return the qualifying rows. This strategy is considered only as a last resort, when the tables are large and neither table in the join has a useful index. The reformatting strategy inserts the rows from the smaller of the two tables into a worktable. Then a clustered index is created on the worktable, and the clustered index is used in the join to retrieve the qualifying rows from each table.</p>
<p>
The main cost in using the reformatting strategy is the time and I/Os necessary to build the clustered index on the worktable; however, that cost is still less than joining the tables with no index. If user queries use the reformatting strategy, it is generally a good idea to examine the tables involved and to create indexes on the columns of the tables being joined.</p>
<p>
The following example illustrates the reformatting strategy. Because none of the tables in the <i>pubs</i> database are large enough for the optimizer to consider using this strategy, two new tables are used. Each table has five columns defined as <i>char(200)</i>. <i>Tab1</i> has 500 rows and <i>Tab2</i> has 250 rows.</p>
<h4>Query:</h4>
<pre>SELECT Tab1.col1
FROM Tab1, Tab2
WHERE Tab1.col1 = Tab2.col1
</pre>
<h4>SHOWPLAN:</h4>
<pre>STEP 1
The type of query is INSERT
The update mode is direct
Worktable created for REFORMATTING
FROM TABLE
Tab2
Nested iteration
Table Scan
TO TABLE
Worktable 1

STEP 2
The type of query is SELECT
FROM TABLE
Tab1
Nested iteration
Table Scan
FROM TABLE
Worktable 1
Nested iteration
Using Clustered Index
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FROM TABLE</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_from_table"></a>FROM TABLE</h2>
<p>
This SHOWPLAN step indicates the table that the query is reading from. In most queries, the FROM TABLE will be followed on the next line by the name of the table from which it is being selected. If an alias was specified for the table in the FROM clause, it is also shown in the next line. In other cases, it might indicate that it is selecting from a worktable (discussed later). The main importance of examining the table names after the FROM TABLE output is to determine the order in which the query optimizer is joining the tables. The order of the tables listed after the FROM TABLE statements in the SHOWPLAN output indicates the same order that the tables were joined; this order might be (and often is) different from the order in which they are listed in the FROM clause of the query or the order in which they appear in the WHERE clause of the query. This is because the query optimizer examines all different join orders for the tables involved and picks the join order that will require the least amount of I/Os.</p>
<h4>Query:</h4>
<pre>SELECT authors.au_id, au_fname, au_lname
FROM authors, titleauthor, titles
WHERE authors.au_id = titleauthor.au_id
AND titleauthor.title_id = titles.title_id
AND titles.type = 'psychology'
</pre>
<h4>SHOWPLAN:</h4>
<pre>STEP 1
The type of query is SELECT
FROM TABLE
titles
Nested iteration
Table Scan
FROM TABLE
titleauthor
Nested iteration
Table Scan
FROM TABLE
authors
Nested iteration
Table Scan
</pre>
<p>
This query illustrates the order in which the SQL Server query optimizer joins the tables; it is not the order in which they were listed in the FROM clause or the WHERE clause. By examining the order of the FROM TABLE statements, you can see that the qualifying rows from the <i>titles</i> table are first located (using the search clause <i>titles.type = </i><b>'psychology'</b>). Those rows are then joined with the <i>titleauthor</i> table (using the join clause <i>titleauthor.title_id </i>=<i> titles.title_id</i>), and finally the <i>titleauthor</i> table is joined with the <i>authors</i> table to retrieve the desired columns (using the join clause <i>authors.au_id </i>=<i> titleauthor.au_id</i>).</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

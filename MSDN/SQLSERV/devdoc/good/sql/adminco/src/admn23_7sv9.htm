<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scalar Aggregate</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_scalar_aggregate"></a>Scalar Aggregate</h2>
<p>
Transact-SQL includes the aggregate functions AVG(), COUNT(), COUNT(*), MAX(), MIN(), and SUM(). Whenever an aggregate function is used in a SELECT statement that does not include a GROUP BY clause, it produces a single value, regardless of whether it is operating on all the rows in a table or on a subset of the rows defined by a WHERE clause. When an aggregate function produces a single value, the function is called a <i>scalar aggregate</i>, and is listed as such by SHOWPLAN.</p>
<p>
The following example shows the use of scalar aggregate functions:</p>
<h4>Query:</h4>
<pre>SELECT AVG(advance), SUM(ytd_sales)
FROM titles
WHERE type = 'business'
</pre>
<h4>SHOWPLAN:</h4>
<pre>STEP 1
The type of query is SELECT
Scalar Aggregate
FROM TABLE
titles
Nested iteration
Table Scan

STEP 2
The type of query is SELECT
</pre>
<p>
Notice that SHOWPLAN considers this a two-step query, similar to the SHOWPLAN from the GROUP BY query shown earlier. Because the query contains a scalar aggregate, which will return a single value, SQL Server keeps internally a "variable" to store the result of the aggregate function. Think of this variable as a temporary storage space to keep a running total of the aggregate function as the qualifying rows from the table are evaluated. After all rows have been evaluated from the table (STEP 1), the final value from the "variable" is then selected (STEP 2) to return the scalar aggregate result.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

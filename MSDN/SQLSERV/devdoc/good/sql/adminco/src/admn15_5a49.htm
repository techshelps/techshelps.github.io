<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up Replication Manually</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_setting_up_replication_manually"></a>Setting Up Replication Manually</h2>
<p>
You can configure replication by using SQL Enterprise Manager, or you can set up replication manually by using the instructions that follow. You will also find the following information useful if you want to create a replication setup script.</p>
<h5><img src="../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To set up replication manually</h5>
<ol>
<li>
On the publication server, create a device for the distribution database. For example:<pre>DISK INIT
NAME = 'distdata',
PHYSNAME = 'c:\sql60\data\distrib.dat',
VDEVNO = 5,
SIZE = 15360
go
DISK INIT
NAME = 'distlog',
PHYSNAME = 'c:\sql60\data\dislog.dat',
SIZE = 7680
VDEVNO = 6
go</pre>
</li>
<li>
On the publication server, create the distribution database. For example:<pre>CREATE DATABASE distribution on distdata = 30
LOG ON distlog = 15
go</pre>
</li>
<li>
Make the distribution database the current database, and then run the INSTDIST.SQL script. <p>
This script is located in the \SQL60\INSTALL directory. It adds tables, indexes, and stored procedures to the distribution database.
</li>
<li>
Use <b>regedt32 </b>or<b> xp_regwrite</b> to set key values for the name and the working directory for the distribution database.<p>
For example, if on a server named WOLFHOUND you have created a distribution database named <i>distribution</i> and will use a working directory of D:\SQL60\REPLDATA, you could set the key values as follows:
<pre>xp_regwrite 'HKEY_LOCAL_MACHINE', 'SOFTWARE\Microsoft\MSSQLServer\Replication', 'DistributionDB', 'REG_SZ', 'distribution'
go
exec("xp_regwrite 'HKEY_LOCAL_MACHINE', 'SOFTWARE\Microsoft\MSSQLServer\Replication', 'WorkingDirectory', 'REG_SZ', '\\"@@servername+"\D$\SQL60\REPLDATA'")
go</pre>
</li>
<li>
Use <b>sp_serveroption</b> to define this server as the distribution server. For example, if the server is named WOLFHOUND:<pre>sp_serveroption 'WOLFHOUND', 'dist', 'true'
go</pre>
</li>
<li>
Use <b>sp_serveroption</b> to define this server as a publication server. For example:<pre>sp_serveroption 'WOLFHOUND', 'pub', 'true'
go</pre>
<p>
You can check results with <b>sp_helpserver</b>.
</li>
<li>
On the publication server, use <b>sp_addsubscriber</b> to add subscription servers. For example:<pre>sp_addsubscriber BLOODHOUND
go
sp_addsubscriber AIREDALE
go</pre>
<p>
You can check results with <b>sp_helpserver</b>.
</li>
<li>
On both subscribers, use <b>sp_addpublisher</b> to add the publication server. For example:<pre>sp_addpublisher WOLFHOUND</pre>
</li>
<li>
On both subscribers, use <b>sp_dboption</b> to enable a database as a subscription database. For example:<pre>use master
go
sp_dboption pubs,subscribed,true
go</pre>
</li>
<li>
On the publisher, use <b>sp_dboption</b> to enable a database as a publication database. For example:<pre>use master
go
sp_dboption pubs,published,true
go</pre>
</li>
<li>
On the publisher, use <b>sp_addtask </b>to manually create the scheduled task that will be used for synchronization of the publication. For example:<pre>use msdb
go
sp_addtask 'auth_table_sync','Sync','WOLFHOUND','sa','pubs',
1,4,1,8,1,0,0,19940926,19991231,090000,230000,00000000,160000,0,
'',2,1,'',2,2</pre>
<p>
This adds a task "auth_table_sync" that will be run in the Sync Subsystem every hour from 9 A.M. to 11 P.M. It is scheduled to run after September 26, 1994. The task will start at 4:00 P.M. the first day.
<p>
You can check the results by using <b>sp_helptask</b>. For example:
<pre>use msdb
go
sp_helptask auth_table_sync, @mode = 'full'
go</pre>
</li>
<li>
On the publisher, use <b>sp_addpublication</b> to add a publication. For example:<pre>use pubs
go
exec sp_addpublication authors_publication,n,@status = active, @description = 'full authors table'
go</pre>
<p>
where "n" is the task ID for the task created using <b>sp_addtask</b>. 
<p>
You can check the results by using <b>sp_helppublication</b>. For example:
<pre>sp_helppublication
go</pre>
</li>
<li>
Create a table creation script either by hand or by using a utility such as SQL Transfer Manager. The script should be edited to follow the following rules:<ul>
<li>
The table schema must match the table in the published article.</li>
<li>
All columns must be created with an explicit NULL or NOT NULL, entered in uppercase only.</li>
<li>
No columns can be created with the identity property.</li>
<li>
Timestamp columns must be changed to <i>binary</i>(8).</li>
</ul>
<p>
The remaining steps in this procedure assume that you have created a script named AUTHORS.SCH. A example of such a script is provided in  <a href="admn15_0nsk.htm">A Sample Schema Script</a>, next in this chapter.
</li>
<li>
On the publisher, use <b>sp_addarticle</b> to create an article. For example:<pre>exec sp_addarticle authors_publication, authors,
authors, 
@creation_script = 'c:\sql60\repldata\authors.sch',
@description = 'Authors Table Article'
go</pre>
<p>
You can check the results by using <b>sp_helparticle</b> and <b>sp_helparticlecolumns</b>. For example:
<pre>sp_helparticle
go
sp_helparticlecolumns @publication=authors_publication, @article=authors
go</pre>
</li>
<li>
On the publisher, use <b>sp_addsubscription</b> to add a subscription and automatically synchronize. For example:<pre>sp_addsubscription authors_publication, authors, AIREDALE
go</pre>
</li>
<li>
While setting up replication, the log reader and distribution tasks were created as needed by using default scheduling frequencies. You can view these by using <b>sp_helptask</b>. For example, to display all currently scheduled tasks:<pre>use msdb
go
sp_helptask @subsystem='Distribution'
go
sp_helptask @subsystem='LogReader'
go</pre>
</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

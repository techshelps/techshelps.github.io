<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Return Parameters</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_return_parameters_tfund06_tfund06"></a>Return Parameters</h3>
<p>
When a CREATE PROCEDURE statement and an EXECUTE statement both include the OUTPUT option with a parameter name, the procedure can use a variable to return the value of that parameter to the caller. By using the OUTPUT keyword, any changes to the parameter that result from the execution of the procedure are retained even after the procedure finishes executing, and the variable can subsequently be used in additional SQL statements in the batch or calling procedure. This is often referred to as a "pass-by-reference capability." If the OUTPUT keyword is not used, changes to the parameter are not retained after the procedure finishes executing. In addition, a value can be returned directly ("pass by value") using the RETURN statement.</p>
<p>
A single stored procedure can use any or all of these capabilities to return:
<ul>
<li>
One or more results sets</li>
<li>
An explicit return value (using the RETURN statement)</li>
<li>
An output parameter</li>
</ul>
<p>
The values passed in the parameters must be passed in this form:</p>
<p>
<i>@parameter</i> <b>=</b> <i>@variable</i> [OUTput]</p>
<p>
If you specify output while you're executing a procedure and the parameter is not defined using output in the stored procedure, you'll get an error message. It is not wrong to call a procedure that includes return value specifications without requesting the return values with output ¾ you just won't get the return values. The stored procedure writer controls what information users can access, and users have control over their variables.</p>
<p>
A stored procedure can also return values via "output" parameters. Each must be defined as an OUTPUT variable in the stored procedure and in the calling statements, as in the following example. These values can then subsequently be selected.</p>
<pre>myproc @a = @myvara out, @b = @myvarb out</pre>
<p>
You cannot pass constants. There must be a variable name to receive the return value. The parameters can be of any SQL Server datatype except <i>text</i> or <i>image</i>. If the stored procedure requires several parameters, pass the return value parameter last in the EXECUTE statement or pass all subsequent parameters in this form:</p>
<p>
<i>@parameter</i> <b>=</b> [<i>value | @variable</i> [OUTput]]</p>
<p>
The following procedure performs division of two integer variables. The third integer variable, <i>@quotient</i>, is defined as an output parameter:</p>
<pre>CREATE PROC divide
    @dividend smallint,
    @divisor smallint,
    @quotient int output
AS
IF @divisor = 0
BEGIN
    SELECT @quotient = NULL
    RETURN -100
END
SELECT @quotient = @dividend / @divisor
RETURN 0</pre>
<p>
If you execute this procedure by providing two integer constants and an OUTPUT parameter, the procedure first checks for an attempt to divide by 0. If the divisor is not 0, the procedure performs the division, puts the answer in the OUTPUT parameter, and sets the return value to 0. For example, if you execute this procedure using 64 and 8 as the integer constants and <i>@quot_parm</i> as the OUTPUT parameter, the result of the division, 8, is put in the <i>@quot_parm</i> parameter:</p>
<pre>DECLARE @quot_parm int
DECLARE @retstat int
EXEC @retstat = divide 64, 8, @quot_parm OUTPUT
SELECT @retstat, @quot_parm

----------- -----------
          0           8
(1 row(s) affected)</pre>
<p>
By using the OUTPUT keyword, any changes to <i>@quot_parm</i> that result from the execution of the <b>divide</b> procedure are retained even after the procedure finishes executing. If the OUTPUT keyword is not used, changes to <i>@quot_parm</i> are not retained.</p>
<p>
If you execute this procedure with 0 as the divisor, the procedure sets <i>@quotient</i> to NULL and the return value to  - 100, as shown in the following example:</p>
<pre>DECLARE @quot_parm int
DECLARE @retstat int
EXEC @retstat = divide 64, 0, @quot_parm OUTPUT
SELECT @retstat, @quot_parm

----------- -----------
-100        NULL       
(1 row(s) affected)</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Expanding Hierarchies</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_expanding_hierarchies"></a>Expanding Hierarchies</h1>
<p>
Databases often store hierarchical information. The following data, for example, is a hierarchical representation of regions of the world:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=49%><pre>Parent</pre>
</td>
<td width=51%><pre>Child</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>-------------</pre>
</td>
<td width=51%><pre>-------------</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>World</pre>
</td>
<td width=51%><pre>Europe</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>World</pre>
</td>
<td width=51%><pre>North America</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>Europe</pre>
</td>
<td width=51%><pre>France</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>France</pre>
</td>
<td width=51%><pre>Paris</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>North America</pre>
</td>
<td width=51%><pre>United States</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>North America</pre>
</td>
<td width=51%><pre>Canada</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>United States</pre>
</td>
<td width=51%><pre>New York</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>United States</pre>
</td>
<td width=51%><pre>Washington</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>New York</pre>
</td>
<td width=51%><pre>New York City</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>Washington</pre>
</td>
<td width=51%><pre>Redmond</pre>
</td>
</tr>
</table><br>
<p>
This representation does not clearly show the structure implied by the data. The following example is easier to interpret:</p>
<pre>World
    North America
        Canada
        United States
            Washington
                Redmond
            New York
                New York City
    Europe
        France
            Paris</pre>
<p>
The following Transact-SQL procedure expands an encoded hierarchy to any arbitrary depth. Although Transact-SQL supports recursion, it is more efficient to use a temporary table as a stack to keep track of all of the items for which processing has begun but is not complete. When processing is complete for a particular item, it is removed from the stack. New items are added to the stack as they are identified. (Note that this example is for illustration only and it does not come from the <i>pubs</i> database.)</p>
<pre>create proc expand (@current char(20)) as
set nocount on
declare @level int, @line char(20)
create table #stack (item char(20), level int)
insert into #stack values (@current, 1)
select @level = 1
while @level &gt; 0
begin
    if exists (select * from #stack where level = @level)
        begin
            select @current = item
            from #stack
            where level = @level
            select @line = space(@level - 1)  @current
            print @line
            delete from #stack
            where level = @level
                and item = @current
            insert #stack
                select child, @level  1
                from hierarchy
                where parent = @current
            if @@rowcount &gt; 0
                select @level = @level  1
        end
    else
        select @level = @level - 1
end</pre>
<p>
In this example, the input parameter (<i>@current</i>) is used to indicate the place in the hierarchy to start. It also keeps track of the current item in the main loop.</p>
<p>
The two local variables used are <i>@level</i>, which keeps track of the current level in the hierarchy, and <i>@line</i>, which is a work area used to construct the indented line. </p>
<p>
The SET NOCOUNT ON statement avoids cluttering up the output with ROWCOUNT messages from each SELECT.</p>
<p>
The temporary table, <i>#stack</i>, is created and primed with the item identifier of the starting point in the hierarchy, and <i>@level</i> is set to match. The <i>level</i> column in <i>#stack</i> allows the same item to appear at multiple levels in the database. Although this situation does not apply to the geographic data in the example, it can apply in other examples.</p>
<p>
In this example, when <i>@level</i> is greater than 0, the procedure follows several steps:
<ol>
<li>
If there are any items in the stack at the current level (<i>@level</i>), choose one and call it <i>@current</i>.</li>
<li>
Indent the item <i>@level</i> spaces, and then print the item.</li>
<li>
Delete the item from the stack so it won't be processed again, and then add all its child items to the stack at the next level (<i>@level</i>  1).<p>
<b>Note</b>  With a conventional programming language, you would have to find each child item and add it to the stack individually. With Transact-SQL, you can find all child items and add them with a single statement, avoiding another nested loop.
<p>
This is the only place where the hierarchy table (<i>#stack</i>) is used.
</li>
<li>
If there are child items (IF @@ROWCOUNT &gt; 0), descend one level to process them (<i>@level = @level </i> 1); otherwise, continue processing at the current level.</li>
<li>
Finally, if there are no items on the stack awaiting processing at the current level, go back up one level to see if there are any awaiting processing at the previous level (<i>@level = @level</i>  - 1). When there is no previous level, the expansion is complete.</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

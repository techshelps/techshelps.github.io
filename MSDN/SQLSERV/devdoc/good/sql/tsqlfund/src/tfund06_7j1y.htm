<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Nested Triggers</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_nested_triggers_tfund06"></a>Nested Triggers</h3>
<p>
Triggers can have as many as 16 nested levels. Nesting is set on at installation; you can turn trigger nesting on and off with the <b>sp_configure</b> system procedure. To disable nesting, use the following statement:</p>
<p>
<b>sp_configure 'nested triggers', 0</b></p>
<p>
If nested triggers are enabled, a trigger that changes a table on which there is another trigger activates the second trigger, which can, in turn, activate a third trigger, and so on. If any trigger in the chain sets off an infinite loop, the nesting level is exceeded and the trigger terminates.</p>
<p>
You can use nested triggers to perform useful housekeeping functions such as storing a backup copy of rows affected by a previous trigger. For example, you can create a trigger on <i>titleauthor</i> that saves a backup copy of the <i>titleauthor</i> rows that the <b>delcascadetrig</b> trigger deleted. With the <b>delcascadetrig</b> trigger in effect, deleting <i>title_id</i> PS2091 from <i>titles</i> deletes the corresponding row or rows from <i>titleauthor</i>. To save the data, you create a DELETE trigger on <i>titleauthor</i> that saves the deleted data into another separately created table, <i>del_save</i>.</p>
<pre>CREATE TRIGGER savedel
ON titleauthor
FOR DELETE
AS
INSERT del_save
SELECT * FROM deleted</pre>
<p>
It is not a good idea to use nested triggers in an order-dependent sequence. Use separate triggers to cascade data modifications.</p>
<p>
<b>Note</b>  Because triggers are put into a transaction, a failure at any level of a set of nested triggers cancels the entire transaction, and all data modifications are rolled back. Include PRINT statements in your triggers so that you can determine where the failure occurred.</p>
<p>
A trigger does not call itself recursively. In other words, a trigger does not call itself in response to a second update to the same table within the trigger. For example, if an update trigger on one column of a table results in an update to another column, the update trigger activates only once rather than repeatedly.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unknown Values: IS NULL and IS NOT NULL</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_unknown_values.3a_.is_null_and_is_not_null"></a>Unknown Values: IS NULL and IS NOT NULL</h3>
<p>
When you see NULL in a column, it means that the user or application has made no entry in that column. A data value for the column is unknown or not available.</p>
<p>
NULL is not synonymous with zero (a numerical value) or blank (a character value). Rather, null values allow you to distinguish between a deliberate entry of zero (for numeric columns) or blank (for character columns) and a non-entry (NULL for both numeric and character columns).</p>
<p>
NULL can be entered in a column for which null values are permitted (as specified in the CREATE TABLE statement) in three ways:
<ul>
<li>
If no data is entered and there is no default or DEFAULT constraint on the column or datatype, SQL Server automatically enters the value NULL.</li>
<li>
The user can explicitly enter the value NULL. Type NULL without quotation marks. If the word NULL is typed into a character column with quotation marks, it is treated as data, not as a null value.</li>
<li>
A datatype that is a number and allows NULLs will contain NULL if the value specified causes an arithmetic overflow, unless SET ARITHABORT ON is in effect.</li>
</ul>
<p>
When null values are retrieved, the query results show the word NULL in the appropriate position. For example, the <i>advance</i> column of the <i>titles</i> table allows null values. By inspecting the data in that column, you can tell whether a book had no advance payment (zero in the <i>advance</i> column, as in the row for MC2222) or whether the advance amount was not known when the data was entered (NULL in the <i>advance</i> column, as in the row for MC3026):</p>
<table cellspacing=4 cols=6>
<tr valign=top>
<td colspan=3 width=74%><pre>SELECT title_id, type, advance</pre>
</td>
<td width=3%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>FROM titles</pre>
</td>
<td width=26%><pre></pre>
</td>
<td colspan=3 width=26%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=6 width=100%><pre>WHERE pub_id = '0877'</pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre></pre>
</td>
<td colspan=3 width=26%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>title_id</pre>
</td>
<td width=26%><pre>type</pre>
</td>
<td colspan=3 width=26%><pre>advance</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>--------</pre>
</td>
<td width=26%><pre>----------</pre>
</td>
<td colspan=3 width=26%><pre>-----------</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>MC2222</pre>
</td>
<td width=26%><pre>mod_cook</pre>
</td>
<td colspan=3 width=26%><pre>0.00</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>MC3021</pre>
</td>
<td width=26%><pre>mod_cook</pre>
</td>
<td colspan=3 width=26%><pre>15,000.00</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>MC3026</pre>
</td>
<td width=26%><pre>UNDECIDED</pre>
</td>
<td colspan=3 width=26%><pre>(null)</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>PS1372</pre>
</td>
<td width=26%><pre>psychology</pre>
</td>
<td colspan=3 width=26%><pre>7,000.00</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>TC3218</pre>
</td>
<td width=26%><pre>trad_cook</pre>
</td>
<td colspan=3 width=26%><pre>7,000.00</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>TC4203</pre>
</td>
<td width=26%><pre>trad_cook</pre>
</td>
<td colspan=3 width=26%><pre>4,000.00</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>TC7777</pre>
</td>
<td width=26%><pre>trad_cook</pre>
</td>
<td colspan=3 width=26%><pre>8,000.00</pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre></pre>
</td>
<td colspan=3 width=26%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=6 width=100%><pre>(7 row(s) affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
When you compare a null value with another value, the result is never true; a null value does not match anything, not even another null value. So, for example, the following expression is false and will not return results:</p>
<pre>ytd_sales &gt; NULL
</pre>
<p>
Null values do not match each other because there is no reason to assume that two unknown values are the same. Null values never join, not even to other null values. (For information about joining tables with null values, see <a href="tfund04_0377.htm">Using Joins to Create Multitable Queries</a>).</p>
<p>
Null values are considered to be equal only for the purposes of the ORDER BY, GROUP BY, and DISTINCT keywords. Also, a unique index or UNIQUE constraint that allows NULL may contain only one row containing NULL. A subsequent row with NULL will be rejected. A primary key may not have NULL in any column that is part of the key.</p>
<p>
Computations involving NULL evaluate to NULL because the result must be unknown if any of the factors is unknown. For example, <i>column1</i>  1 evaluates to NULL if <i>column1</i> is NULL.</p>
<p>
When the columns being searched include ones defined as allowing null values, you can find null or non-null values in the database with this pattern:</p>
<p>
WHERE <i>column_name</i> IS [NOT] NULL</p>
<p>
If you try to find null or non-null values in columns defined as NOT NULL, SQL Server displays an error message.</p>
<p>
Some of the rows in the <i>titles</i> table contain incomplete data. For example, a book called <i>The Psychology of Computer Cooking</i> has been proposed and its title, title identification number, and probable publisher entered. However, since the author has no contract yet and details are undecided, null values appear in the <i>price</i>, <i>advance</i>, <i>royalty</i>, <i>ytd_sales</i>, and <i>notes</i> columns. Because null values don't match anything in a comparison, a query for all the title identification numbers and advances for books with moderate advances (under $5000) will not find the row for <i>The Psychology of Computer Cooking</i>, <i>title_id</i> MC3026.</p>
<pre>SELECT title_id, advance
FROM titles
WHERE advance &lt; $5000
</pre>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=34%><pre>title_id</pre>
</td>
<td width=33%><pre>advance</pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=34%><pre>--------</pre>
</td>
<td width=33%><pre>-------------</pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=34%><pre>MC2222</pre>
</td>
<td width=33%><pre>0.00</pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=34%><pre>PS2091</pre>
</td>
<td width=33%><pre>2,275.00</pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=34%><pre>PS3333</pre>
</td>
<td width=33%><pre>2,000.00</pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=34%><pre>PS7777</pre>
</td>
<td width=33%><pre>4,000.00</pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=34%><pre>TC4203</pre>
</td>
<td width=33%><pre>4,000.00</pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=34%><pre></pre>
</td>
<td width=33%><pre></pre>
</td>
<td width=33%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=3 width=100%><pre>(5 row(s) affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
To include books with an advance under $5000 or a null value in the <i>advance</i> column, use this query:</p>
<pre>SELECT title_id, advance
FROM titles
WHERE advance &lt; $5000
OR advance IS NULL
</pre>
<table cellspacing=4 cols=4>
<tr valign=top>
<td width=33%><pre>title_id</pre>
</td>
<td width=30%><pre>advance</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>--------</pre>
</td>
<td width=30%><pre>-----------</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>MC2222</pre>
</td>
<td width=30%><pre>0.00</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>MC3026</pre>
</td>
<td width=30%><pre>(null)</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>PC9999</pre>
</td>
<td width=30%><pre>(null)</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>PS2091</pre>
</td>
<td width=30%><pre>2,275.00</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>PS3333</pre>
</td>
<td width=30%><pre>2,000.00</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>PS7777</pre>
</td>
<td width=30%><pre>4,000.00</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>TC4203</pre>
</td>
<td width=30%><pre>4,000.00</pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre></pre>
</td>
<td width=30%><pre></pre>
</td>
<td colspan=2 width=37%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=3 width=97%><pre>(7 row(s) affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

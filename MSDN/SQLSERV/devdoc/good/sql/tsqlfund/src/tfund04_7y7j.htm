<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a New Table for Results: SELECT INTO</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_creating_a_new_table_for_results.3a_.select_into"></a>Creating a New Table for Results: SELECT INTO</h2>
<p>
The SELECT INTO clause creates a new table based on the columns specified in the select list and on the rows chosen in the WHERE clause. </p>
<p>
The SELECT INTO clause makes a permanent table only if the <b>select into/bulkcopy</b> database option is set. To see whether this option is set, execute the <b>sp_helpdb</b> system procedure. In this example, execute <b>sp_helpdb</b> against the <i>pubs</i> database:</p>
<pre>sp_helpdb pubs
</pre>
<p>
If the <b>select into/bulkcopy</b> option is not set, the report from <b>sp_helpdb</b> indicates this. Only the system administrator or the database owner can set database options.</p>
<p>
If the <b>select into/bulkcopy</b> database option is set, you can use the SELECT INTO clause to create a new permanent table (without using a CREATE TABLE statement). If <b>select into/bulkcopy</b> is not set, SELECT INTO can be used to create only temporary tables. (The examples in this chapter assume that <b>select into/bulkcopy</b> is set.)</p>
<p>
<b>Caution</b>  Because SELECT INTO is not logged, use DUMP DATABASE to back up your database following a SELECT INTO operation. Do not use DUMP TRANSACTION because after a non-logged operation you cannot restore the log with LOAD TRANSACTION.</p>
<p>
The new table is based on the columns you specify in the select list, the table(s) you name in the FROM clause, and the rows you choose in the WHERE clause. The name of the new table must be unique in the database and must conform to the rules for identifiers.</p>
<p>
A SELECT INTO statement allows you to define a table and put data into it (based on existing definitions and data) without going through the usual data definition process.</p>
<p>
The following example shows a SELECT INTO statement and its results. A table called <i>newtable</i> is created, using two of the columns in the four-column table <i>publishers</i>. Because this particular statement includes no WHERE clause, data from all rows (but only two columns, <i>pub_id</i> and <i>pub_name</i>) of <i>publishers</i> is copied into <i>newtable</i>:</p>
<pre>SELECT pub_id, pub_name
INTO newtable
FROM publishers
</pre>
<p>
<b>Note</b>  You cannot run SELECT INTO in the <i>pubs</i> database, so you cannot run these examples.</p>
<p>
The new table contains the results of the SELECT statement. It becomes part of the database, just like its parent table.</p>
<p>
The SELECT INTO clause is useful for creating test tables and copies of existing tables, and for making several smaller tables out of one large table. You can also use SELECT INTO to create a skeleton table with no data by putting a false condition in the WHERE clause. For example:</p>
<pre>SELECT *
INTO newtable2
FROM publishers
WHERE 1 = 2

SELECT *
FROM newtable2
</pre>
<table cellspacing=4 cols=4>
<tr valign=top>
<td width=18%><pre>pub_id</pre>
</td>
<td width=29%><pre>pub_name</pre>
</td>
<td width=23%><pre>city</pre>
</td>
<td width=30%><pre>state</pre>
</td>
</tr>
<tr valign=top>
<td width=18%><pre>------</pre>
</td>
<td width=29%><pre>--------</pre>
</td>
<td width=23%><pre>----</pre>
</td>
<td width=30%><pre>-----</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
Although <i>newtable2</i> is created, no rows are inserted into it because 1 never equals 2.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

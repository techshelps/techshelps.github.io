<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Select List in Joins</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="the_select_list_in_joins"></a>The Select List in Joins</h3>
<p>
A join statement, like other selection statements, starts with the keyword SELECT. The columns named after the SELECT keyword are the columns to be included in the query results, in their desired order. </p>
<p>
In the example, the columns <i>au_</i> <i>fname</i>, <i>au_lname</i>, and <i>pub_name</i> were not qualified by a table name since there is no ambiguity about the table to which they belong. But the <i>city</i> column used for the join comparison was qualified since there are columns of that name in both the <i>publishers</i> and <i>authors</i> tables. Even though neither of the <i>city</i> columns is printed in the results, SQL Server needs the table name to perform the comparison.</p>
<p>
As in other SELECT statements, you can use * to specify that all columns of the tables involved in the query are to be included in the results. For example, to include all columns in <i>publishers</i> and <i>authors</i> in the preceding join query, use this SQL statement:</p>
<pre>SELECT *
FROM authors, publishers
WHERE authors.city = publishers.city
</pre>
<table cellspacing=4 cols=7>
<tr valign=top>
<td width=15%><pre>au_id</pre>
</td>
<td width=12%><pre>au_lname</pre>
</td>
<td width=12%><pre>au_fname</pre>
</td>
<td width=18%><pre>phone</pre>
</td>
<td width=20%><pre>address</pre>
</td>
<td width=13%><pre>city</pre>
</td>
<td width=10%><pre>state</pre>
</td>
</tr>
<tr valign=top>
<td width=15%><pre>---------</pre>
</td>
<td width=12%><pre>--------</pre>
</td>
<td width=12%><pre>--------</pre>
</td>
<td width=18%><pre>-------</pre>
</td>
<td width=20%><pre>-------</pre>
</td>
<td width=13%><pre>--------</pre>
</td>
<td width=10%><pre>-----</pre>
</td>
</tr>
<tr valign=top>
<td width=15%><pre>238-95-7766</pre>
</td>
<td width=12%><pre>Carson</pre>
</td>
<td width=12%><pre>Cheryl</pre>
</td>
<td width=18%><pre>415 548-7723 </pre>
</td>
<td width=20%><pre>589 Darwin Ln.</pre>
</td>
<td width=13%><pre>Berkeley</pre>
</td>
<td width=10%><pre>CA</pre>
</td>
</tr>
<tr valign=top>
<td width=15%><pre></pre>
</td>
<td width=12%><pre></pre>
</td>
<td width=12%><pre></pre>
</td>
<td width=18%><pre></pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=13%><pre></pre>
</td>
<td width=10%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=15%><pre>409-56-7008</pre>
</td>
<td width=12%><pre>Bennet</pre>
</td>
<td width=12%><pre>Abraham</pre>
</td>
<td width=18%><pre>415 658-9932</pre>
</td>
<td width=20%><pre>6223 Bateman St.</pre>
</td>
<td width=13%><pre>Berkeley</pre>
</td>
<td width=10%><pre>CA</pre>
</td>
</tr>
</table><br>
<pre></pre>
<table cellspacing=4 cols=7>
<tr valign=top>
<td width=10%><pre>zip</pre>
</td>
<td width=13%><pre>contract</pre>
</td>
<td width=12%><pre>pub_id</pre>
</td>
<td width=28%><pre>pub_name</pre>
</td>
<td width=14%><pre>city</pre>
</td>
<td width=10%><pre>state</pre>
</td>
<td width=13%><pre>country</pre>
</td>
</tr>
<tr valign=top>
<td width=10%><pre>-----</pre>
</td>
<td width=13%><pre>--------</pre>
</td>
<td width=12%><pre>------</pre>
</td>
<td width=28%><pre>--------</pre>
</td>
<td width=14%><pre>--------</pre>
</td>
<td width=10%><pre>-----</pre>
</td>
<td width=13%><pre>-------</pre>
</td>
</tr>
<tr valign=top>
<td width=10%><pre>94705</pre>
</td>
<td width=13%><pre>1</pre>
</td>
<td width=12%><pre>1389</pre>
</td>
<td width=28%><pre>Algodata Infosystems</pre>
</td>
<td width=14%><pre>Berkeley</pre>
</td>
<td width=10%><pre>CA</pre>
</td>
<td width=13%><pre>USA</pre>
</td>
</tr>
<tr valign=top>
<td width=10%><pre></pre>
</td>
<td width=13%><pre></pre>
</td>
<td width=12%><pre></pre>
</td>
<td width=28%><pre></pre>
</td>
<td width=14%><pre></pre>
</td>
<td width=10%><pre></pre>
</td>
<td width=13%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=10%><pre>94705</pre>
</td>
<td width=13%><pre>1</pre>
</td>
<td width=12%><pre>1389</pre>
</td>
<td width=28%><pre>Algodata Infosystems</pre>
</td>
<td width=14%><pre>Berkeley</pre>
</td>
<td width=10%><pre>CA</pre>
</td>
<td width=13%><pre>USA</pre>
</td>
</tr>
</table><br>
<pre>(2 row(s) affected)
</pre>
<p>
The display shows two rows with 14 columns each. Because of the length of the rows, each takes up multiple horizontal lines in the output.</p>
<p>
The select list (and the results) of a join need not include columns from both of the tables being joined. For example, to find the names of the authors who live in the same city as one of the publishers, your select list need not include any columns from <i>publishers</i>:</p>
<pre>SELECT au_lname, au_fname
FROM authors, publishers
WHERE authors.city = publishers.city
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

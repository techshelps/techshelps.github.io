<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Subqueries with Aliases</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_subqueries_with_aliases"></a>Subqueries with Aliases</h2>
<p>
Many statements in which the subquery and the outer query refer to the same table can also be stated as self-joins (joining a table to itself). For example, you can find authors who live in the same city as Livia Karsen by using a subquery:</p>
<pre>SELECT au_lname, au_fname, city
FROM authors
WHERE city IN
    (SELECT city
    FROM authors
    WHERE au_fname = 'Livia'
        AND au_lname = 'Karsen')
</pre>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=22%><pre>au_lname</pre>
</td>
<td width=27%><pre>au_fname</pre>
</td>
<td width=51%><pre>city</pre>
</td>
</tr>
<tr valign=top>
<td width=22%><pre>----------</pre>
</td>
<td width=27%><pre>---------</pre>
</td>
<td width=51%><pre>-------</pre>
</td>
</tr>
<tr valign=top>
<td width=22%><pre>Green</pre>
</td>
<td width=27%><pre>Marjorie</pre>
</td>
<td width=51%><pre>Oakland</pre>
</td>
</tr>
<tr valign=top>
<td width=22%><pre>Straight</pre>
</td>
<td width=27%><pre>Dean</pre>
</td>
<td width=51%><pre>Oakland</pre>
</td>
</tr>
<tr valign=top>
<td width=22%><pre>Stringer</pre>
</td>
<td width=27%><pre>Dirk</pre>
</td>
<td width=51%><pre>Oakland</pre>
</td>
</tr>
<tr valign=top>
<td width=22%><pre>MacFeather</pre>
</td>
<td width=27%><pre>Stearns</pre>
</td>
<td width=51%><pre>Oakland</pre>
</td>
</tr>
<tr valign=top>
<td width=22%><pre>Karsen</pre>
</td>
<td width=27%><pre>Livia</pre>
</td>
<td width=51%><pre>Oakland</pre>
</td>
</tr>
<tr valign=top>
<td width=22%><pre></pre>
</td>
<td width=27%><pre></pre>
</td>
<td width=51%><pre></pre>
</td>
</tr>
</table><br>
<pre>(5 row(s) affected)
</pre>
<p>
Or you can use a self-join:</p>
<pre>SELECT au1.au_lname, au1.au_fname, au1.city
FROM authors au1, authors au2
WHERE au1.city = au2.city
    AND au2.au_lname = 'Karsen'
    AND au2.au_fname = 'Livia'
</pre>
<p>
From the earlier discussion of self-joins, you might recall that table aliases are required because the table being joined to itself appears in two different roles. Aliases can also be used in nested queries that refer to the same table in an inner and outer query:</p>
<pre>SELECT au1.au_lname, au1.au_fname, au1.city
FROM authors au1
WHERE au1.city in
    (SELECT au2.city
    FROM authors au2
    WHERE au2.au_fname = 'Livia'
        AND au2.au_lname = 'Karsen')
</pre>
<p>
Explicit aliases make it clear that the reference to <i>authors</i> in the subquery does not mean the same thing as the reference in the outer query.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Levels of Nesting</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_multiple_levels_of_nesting"></a>Multiple Levels of Nesting</h2>
<p>
A subquery can itself include one or more subqueries. Any number of subqueries can be nested in a statement.</p>
<p>
An example of a problem that can be solved using a statement with multiple levels of nested queries is, "Find the names of authors who have participated in writing at least one popular computer book."</p>
<pre>SELECT au_lname, au_fname
FROM authors
WHERE au_id IN
    (SELECT au_id
    FROM titleauthor
    WHERE title_id IN
        (SELECT title_id
        FROM titles
        WHERE type = 'popular_comp'))
</pre>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=38%><pre>au_lname</pre>
</td>
<td width=62%><pre>au_fname</pre>
</td>
</tr>
<tr valign=top>
<td width=38%><pre>--------</pre>
</td>
<td width=62%><pre>-----------</pre>
</td>
</tr>
<tr valign=top>
<td width=38%><pre>Carson</pre>
</td>
<td width=62%><pre>Cheryl</pre>
</td>
</tr>
<tr valign=top>
<td width=38%><pre>Dull</pre>
</td>
<td width=62%><pre>Ann</pre>
</td>
</tr>
<tr valign=top>
<td width=38%><pre>Locksley</pre>
</td>
<td width=62%><pre>Charlene</pre>
</td>
</tr>
<tr valign=top>
<td width=38%><pre>Hunter</pre>
</td>
<td width=62%><pre>Sheryl</pre>
</td>
</tr>
<tr valign=top>
<td width=38%><pre></pre>
</td>
<td width=62%><pre></pre>
</td>
</tr>
</table><br>
<pre>(4 row(s) affected)
</pre>
<p>
The innermost query returns the title ID numbers PC1035, PC8888, and PC9999. The query at the next higher level is evaluated with these title IDs and returns the author ID numbers. Finally, the outer query uses the author IDs to find the names of the authors.</p>
<p>
You can also express this query as a join:</p>
<pre>SELECT au_lname, au_fname
FROM authors, titles, titleauthor
WHERE authors.au_id = titleauthor.au_id
    AND titles.title_id = titleauthor.title_id
    AND type = 'popular_comp'
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

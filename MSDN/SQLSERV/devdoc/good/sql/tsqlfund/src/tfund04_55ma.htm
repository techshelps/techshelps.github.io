<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The UNION Operator</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_the_union_operator"></a>The UNION Operator</h2>
<p>
The UNION operator allows you to manipulate the results of two or more queries by combining the results of each query into a single results set. The syntax is as follows:</p>
<p>
<i>Query1</i> <br>
[UNION [ALL] <i>QueryN </i>] ... <br>
[ORDER BY clause] <br>
[COMPUTE clause]</p>
<p>
where <i>Query1</i> is:</p>
<p>
SELECT <i>select_list</i> <br>
[INTO<i> </i>clause] <br>
[FROM clause] <br>
[WHERE clause] <br>
[GROUP BY clause] <br>
[HAVING clause]</p>
<p>
and <i>QueryN</i> is:</p>
<p>
SELECT <i>select_list</i> <br>
[FROM clause] <br>
[WHERE clause] <br>
[GROUP BY clause] <br>
[HAVING clause]</p>
<p>
For example, suppose that you have the following tables:</p>
<table cellspacing=4 cols=5>
<tr valign=top>
<td width=25%><pre>table1</pre>
</td>
<td width=14%><pre></pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=26%><pre>table2</pre>
</td>
<td width=14%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>a</pre>
</td>
<td width=14%><pre>b  </pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=26%><pre>c</pre>
</td>
<td width=14%><pre>d  </pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>char(4)</pre>
</td>
<td width=14%><pre>int</pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=26%><pre>char(4)</pre>
</td>
<td width=14%><pre>int</pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>-------</pre>
</td>
<td width=14%><pre>---</pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=26%><pre>-------</pre>
</td>
<td width=14%><pre>---</pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>abc</pre>
</td>
<td width=14%><pre>1</pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=26%><pre>ghi</pre>
</td>
<td width=14%><pre>3</pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>def</pre>
</td>
<td width=14%><pre>2</pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=26%><pre>jkl</pre>
</td>
<td width=14%><pre>4</pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>ghi</pre>
</td>
<td width=14%><pre>3</pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=26%><pre>mno</pre>
</td>
<td width=14%><pre>5</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
The following query creates a UNION between the two tables:</p>
<pre>SELECT * FROM table1
UNION
SELECT * FROM table2
</pre>
<p>
This is the results set:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=27%><pre>a</pre>
</td>
<td width=15%><pre>b  </pre>
</td>
<td width=58%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>-------</pre>
</td>
<td width=15%><pre>---</pre>
</td>
<td width=58%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>abc</pre>
</td>
<td width=15%><pre>1</pre>
</td>
<td width=58%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>def</pre>
</td>
<td width=15%><pre>2</pre>
</td>
<td width=58%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>ghi</pre>
</td>
<td width=15%><pre>3</pre>
</td>
<td width=58%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>jkl</pre>
</td>
<td width=15%><pre>4</pre>
</td>
<td width=58%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>mno</pre>
</td>
<td width=15%><pre>5</pre>
</td>
<td width=58%><pre></pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
Notice that, by default, the UNION operator removes duplicate rows from the results set. If you use the ALL option, all rows are included in the results and duplicates are not removed. Notice also that the columns in the results set have the same names as the columns in <i>table1</i>.</p>
<p>
<b>Important</b>  The exact results of a UNION operation depend on the sort order chosen during installation. For information about the effects of different sort orders, see <i>Microsoft SQL</i> <i>Server Setup</i>.</p>
<p>
Any number of UNION operators can appear in a Transact-SQL statement. For example:</p>
<pre>x UNION y UNION z
</pre>
<p>
By default, SQL Server evaluates a statement containing UNION operators from left to right. You can use parentheses to specify the order of evaluation. For example, the following expressions are <i>not</i> equivalent:</p>
<pre>x UNION ALL (y UNION z)

(x UNION ALL y) UNION z
</pre>
<p>
In the first expression, duplicates are eliminated in the union between <i>y</i> and <i>z</i>. Then, in the union between that set and <i>x</i>, duplicates are not eliminated. In the second expression, duplicates are included in the union between <i>x</i> and <i>y</i> but are then eliminated in the subsequent union with <i>z</i>. ALL has no effect on the final result of this statement.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

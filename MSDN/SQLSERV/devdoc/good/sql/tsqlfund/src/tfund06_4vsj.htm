<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multirow Considerations</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="multirow_considerations"></a>Multirow Considerations</h2>
<p>
Multirow considerations are particularly important when the function of a trigger is to automatically recalculate summary values (ongoing tallies).</p>
<p>
<b>Note</b>  Triggers used to maintain summary values should contain GROUP BY clauses to create summary values when more than one row is being inserted, updated, or deleted. Because a GROUP BY clause imposes extra overhead, the following examples are written to test whether the value of @@ROWCOUNT is equal to one, meaning that only one row in the trigger table was affected. If @@ROWCOUNT is equal to one, the trigger actions take effect without a GROUP BY clause.</p>
<p>
This insert trigger updates the <i>ytd_sales</i> column in the <i>titles</i> table every time a new <i>sales</i> row is added. It goes into effect whenever you record a sale by adding a row to the <i>sales</i> table. It updates the <i>ytd_sales</i> column in the <i>titles</i> table so that <i>ytd_sales</i> is equal to its previous value plus the value added to <i>sales.qty</i>. This keeps the totals up to date for inserts into <i>sales.qty</i>.</p>
<pre>CREATE TRIGGER intrig
ON sales
FOR INSERT AS
    /* check value of @@rowcount */
IF @@rowcount = 1
    UPDATE titles
    SET ytd_sales = ytd_sales  qty
    FROM inserted
    WHERE titles.title_id = inserted.title_id
ELSE
    /* when rowcount is greater than 1,
    **use a GROUP BY clause */
    UPDATE titles
    SET ytd_sales = ytd_sales  (SELECT SUM(qty)
        FROM inserted
        GROUP BY inserted.title_id
        HAVING titles.title_id = inserted.title_id)</pre>
<p>
The following example shows a delete trigger that updates the <i>ytd_sales</i> column in the <i>titles</i> table every time one or more <i>sales</i> rows are deleted. It goes into effect whenever a row is deleted from the <i>sales</i> table. It updates the <i>ytd_sales</i> column in the <i>titles</i> table so that <i>ytd_sales</i> is equal to its previous value minus the value subtracted from <i>sales.qty</i>.</p>
<pre>CREATE TRIGGER deltrig
ON sales
FOR DELETE
as
    /* check value of @@rowcount */
IF @@rowcount = 1
    UPDATE titles
    SET ytd_sales = ytd_sales - qty
    FROM deleted
    WHERE titles.title_id = deleted.title_id
ELSE
    /* when rowcount is greater than 1,
    **use a GROUP BY clause */
    UPDATE titles
    SET ytd_sales = ytd_sales - (SELECT SUM(qty)
        FROM deleted
        GROUP BY deleted.title_id
        HAVING titles.title_id = deleted.title_id)</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Views for Security</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_using_views_for_security"></a>Using Views for Security</h3>
<p>
By using the CREATE VIEW statement with the WITH CHECK OPTION, you can ensure that users query and modify only the data they can see. This option forces all data modification statements executed against the view to adhere to the criteria set within the SELECT statement defining the view. When a row is modified through a view, the WITH CHECK OPTION guarantees that the data will remain visible through the view after the modification has been committed.</p>
<p>
Using the GRANT and REVOKE statements, you can restrict each user's database access to specific database objects¾including views. If the view and all the tables and views from which it was derived are owned by the same user, that owner can grant permission to others to use the view, and that owner can deny access to the view's underlying tables and views. This is a simple but effective security mechanism.</p>
<p>
By defining different views and selectively granting permissions on them, you can limit a user's (or any combination of users') access to specific subsets of data. To provide security, you might confine a user's access to:
<ul>
<li>
A subset of the rows of a base table (a value-dependent subset).<p>
For example, in the <i>pubs</i> sample database, you might define a view that contains only the rows for business and psychology books, keeping information about other types of books hidden from some users.
</li>
<li>
A subset of the columns of a base table (a value-independent subset).<p>
For example, you might define a view that contains all the rows of the <i>titles</i> table but omit the <i>royalty</i> and <i>advance</i> columns since that financial information is confidential.
</li>
<li>
A row-and-column subset of a base table.</li>
<li>
The rows that qualify for a join of more than one base table.<p>
For example, you might define a view that joins the <i>titles</i>, <i>authors</i>, and <i>titleauthor</i> tables to display the names of the authors and the books they have written. This view would hide personal data about authors and financial information about the books.
</li>
<li>
A statistical summary of data in a base table.<p>
For example, through a view called <i>category_price</i>, users can access only the average price of each type of book.
</li>
<li>
A subset of another view or of some combination of views and base tables.<p>
For example, through a view called <i>hiprice_computer</i>, users can access the title and price of computer books that meet the qualifications in the view definition of <i>hiprice</i>.
</li>
</ul>
<p>
To create a view, a user must be granted CREATE VIEW permission by the database owner and must have appropriate permissions on any tables or views referenced in the view definition.</p>
<p>
As the owner of an object on which other users have created views, you must be aware of who can see what data through which views. Consider this situation: the database owner has granted Harold CREATE VIEW permission, and a user named Margaret has granted Harold permission to select from a table she owns. Given these permissions, Harold can create a view that selects all columns and rows from Margaret's table. However, if Margaret subsequently revokes permission for Harold to select from her table, he can still look at her data through the view he has created.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

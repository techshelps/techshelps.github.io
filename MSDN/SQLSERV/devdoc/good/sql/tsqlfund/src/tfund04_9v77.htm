<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Summary Queries</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_using_summary_queries"></a>Using Summary Queries</h1>
<p>
You can summarize data by using the GROUP BY and HAVING clauses. GROUP BY organizes data into groups; HAVING sets conditions on which groups to include in the results. These clauses should be used together; HAVING used without GROUP BY can produce confusing results.</p>
<p>
Aggregate functions return summary values, either for the whole table or for groups within the table. For this reason they are used with GROUP BY. Aggregate functions can appear in a select list or in a HAVING clause, but not in a WHERE clause.</p>
<p>
You can use the following aggregate functions with GROUP BY (<i>expression</i> in this table is almost always a column name):</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%></th>
<th align=left width=50%></th>
</tr>
<tr valign=top>
<th align=left width=50%></th>
<th align=left width=50%></th>
</tr>
<tr valign=top>
<th align=left width=50%>Aggregate function</th>
<th align=left width=50%>Result</th>
</tr>
<tr valign=top>
<td width=50%></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%>SUM([ALL | DISTINCT] <i>expression</i>)</td>
<td width=50%>Total of the values in the numeric expression, either all or distinct</td>
</tr>
<tr valign=top>
<td width=50%>AVG([ALL | DISTINCT] <i>expression</i>)</td>
<td width=50%>Average of the values in the numeric expression, either all or distinct</td>
</tr>
<tr valign=top>
<td width=50%>COUNT([ALL | DISTINCT] <i>expression</i>)</td>
<td width=50%>Number of values in the expression, either all or distinct</td>
</tr>
<tr valign=top>
<td width=50%>COUNT(*)</td>
<td width=50%>Number of selected rows</td>
</tr>
<tr valign=top>
<td width=50%>MAX(<i>expression</i>)</td>
<td width=50%>Highest value in the expression</td>
</tr>
<tr valign=top>
<td width=50%>MIN(<i>expression</i>)</td>
<td width=50%>Lowest value in the expression</td>
</tr>
</table><br>
<p>
SUM and AVG work only with numeric values. SUM, AVG, COUNT, MAX, and MIN ignore null values, but COUNT(*) does not.</p>
<p>
<b>Note</b>  You cannot use GROUP BY or HAVING on columns that have the<i> text </i>or<i> image </i>datatype.</p>
<p>
The following query finds the total year-to-date sales of each publisher in the database:</p>
<pre>SELECT pub_id, total = SUM(ytd_sales)
FROM titles
GROUP BY pub_id
</pre>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=25%><pre>pub_id</pre>
</td>
<td width=40%><pre>total</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>------</pre>
</td>
<td width=40%><pre>-----</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>0736</pre>
</td>
<td width=40%><pre>28286</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>0877</pre>
</td>
<td width=40%><pre>44219</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>1389</pre>
</td>
<td width=40%><pre>24941</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=40%><pre></pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=3 width=100%><pre>(3 row(s) affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
Because of the GROUP BY clause, only one row is returned for each publisher, and it contains the sum of all sales for that publisher.</p>
<p>
<b>Important</b>  The exact results of a GROUP BY clause depend on the sort order chosen during installation. For information about the effects of different sort orders, see <i>Microsoft SQL</i> <i>Server Setup</i>.</p>
<p>
The HAVING clause sets conditions on the GROUP BY clause similarly to the way the WHERE clause interacts with the SELECT clause. The HAVING clause syntax is exactly like the WHERE clause syntax except that it can contain aggregate functions.</p>
<p>
If, for example, you want to see the publishers who have had year-to-date sales greater than $40,000, use this query:</p>
<pre>SELECT pud_id, total = SUM(ytd_sales)
FROM titles
GROUP BY pub_id
HAVING SUM(ytd_sales) &gt; 40000
</pre>
<p>
If, for example, you want to make sure that there are at least six books involved in the calculations for each publisher, use HAVING COUNT(*) &gt; 5 to eliminate the publishers that return totals for fewer than six books. The query looks like this:</p>
<pre>SELECT pub_id, total = SUM(ytd_sales)
FROM titles
GROUP BY pub_id
HAVING COUNT(*) &gt; 5
</pre>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=29%><pre>pub_id</pre>
</td>
<td width=71%><pre>total</pre>
</td>
</tr>
<tr valign=top>
<td width=29%><pre>------</pre>
</td>
<td width=71%><pre>-----</pre>
</td>
</tr>
<tr valign=top>
<td width=29%><pre>0877</pre>
</td>
<td width=71%><pre>44219</pre>
</td>
</tr>
<tr valign=top>
<td width=29%><pre>1389</pre>
</td>
<td width=71%><pre>24941</pre>
</td>
</tr>
<tr valign=top>
<td width=29%><pre></pre>
</td>
<td width=71%><pre></pre>
</td>
</tr>
</table><br>
<pre>(2 row(s) affected)
</pre>
<p>
With this statement, two rows are returned. New Moon Books (0736) is eliminated.</p>
<p>
For a detailed description of GROUP BY, HAVING, and aggregate functions, see <a href="tfund04_355x.htm">Displaying Totals with GROUP BY or COMPUTE</a>.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

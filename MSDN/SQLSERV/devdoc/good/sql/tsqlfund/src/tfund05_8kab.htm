<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Optimizing Queries</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_optimizing_queries"></a>Optimizing Queries</h1>
<p>
The SQL Server optimizer automatically performs query optimization by analyzing queries and determining the most efficient execution plan. The optimizer analyzes a query to determine which clauses in the query can be optimized and then selects the useful indexes for the clauses that can be optimized. Finally, the optimizer compares all possible execution plans and selects the most efficient one for execution.</p>
<p>
Use the WHERE clause to restrict the number of rows that must be processed to execute a query. Unless absolutely necessary, avoid unrestricted queries that must read and process all the rows of a table. For example, the following restricted query:</p>
<pre>SELECT qty FROM sales
WHERE stor_id = 7131</pre>
<p>
is more efficient than the following unrestricted query:</p>
<pre>SELECT qty FROM sales</pre>
<p>
Avoid returning a large results set to the client for final data selection through browsing. It is much more efficient to restrict the size of the results set, allowing SQL Server to perform the function for which it was intended. This also reduces network I/O and improves concurrency-related performance as the application scales upward to more users.</p>
<p>
Because the WHERE clause of a query is the primary focus of the optimizer, use queries that can take advantage of a useful index. Each index on the table includes columns that are possible candidates for including in the WHERE clause. For optimal performance with one of the following indexes on a given <i>column1</i>:
<ul>
<li>
A single-column index on <i>column1</i></li>
<li>
A multicolumn index where <i>column1</i> is the first column of the index</li>
</ul>
<p>
consider a query with a WHERE clause that includes <i>column1</i>. Avoid using a WHERE clause that includes only the second or later columns of a multicolumn index, and not <i>column1</i>. The multicolumn index would not be useful in this case.</p>
<p>
For example, given a multicolumn index on the <i>au_lname</i>,<i> au_fname</i> columns of the <i>authors</i> table in the <i>pubs</i> database, the following queries would be likely to use the index:</p>
<pre>SELECT au_id, au_lname, au_fname FROM authors
WHERE au_lname = 'White'
AND au_fname = 'Johnson'
SELECT au_id, au_lname, au_fname FROM authors
WHERE au_lname = 'White'</pre>
<p>
and the following query would not be able to use the index:</p>
<pre>SELECT au_id, au_lname, au_fname FROM authors
WHERE au_fname = 'Johnson'</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

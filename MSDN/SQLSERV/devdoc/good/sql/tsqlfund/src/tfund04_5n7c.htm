<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GROUP BY Syntax</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_group_by_syntax"></a>GROUP BY Syntax</h3>
<p>
The GROUP BY clause has the following syntax:</p>
<p>
GROUP BY [ALL] <i>aggregate_free_expression</i> <br>
[<b>,</b><i> aggregate_free_expression</i>]... </p>
<p>
Remember that the order of the clauses in the SELECT statement is significant. You can omit any of the optional clauses, but when you use them, they must appear in the appropriate order. For the complete syntax of the SELECT statement, see <a href="tfund04_6hf7.htm">Creating Basic Queries</a>.</p>
<p>
You can group by an expression as long as it does not include aggregate functions. For example:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<td colspan=3 width=100%><pre>SELECT AVG(ytd_sales), ytd_sales * royalty</pre>
</td>
</tr>
<tr valign=top>
<td colspan=3 width=100%><pre>FROM titles</pre>
</td>
</tr>
<tr valign=top>
<td colspan=3 width=100%><pre>GROUP BY ytd_sales * royalty</pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre></pre>
</td>
<td width=26%><pre></pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>----------</pre>
</td>
<td width=26%><pre>----------</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>(null)</pre>
</td>
<td width=26%><pre>(null)</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>111</pre>
</td>
<td width=26%><pre>1110</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>375</pre>
</td>
<td width=26%><pre>3750</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>2032</pre>
</td>
<td width=26%><pre>24384</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>2045</pre>
</td>
<td width=26%><pre>24540</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>3336</pre>
</td>
<td width=26%><pre>33360</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>3876</pre>
</td>
<td width=26%><pre>38760</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>4072</pre>
</td>
<td width=26%><pre>40720</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>4095</pre>
</td>
<td width=26%><pre>40950</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>8780</pre>
</td>
<td width=26%><pre>140480</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>15096</pre>
</td>
<td width=26%><pre>211344</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>18722</pre>
</td>
<td width=26%><pre>449328</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre>22246</pre>
</td>
<td width=26%><pre>533904</pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=27%><pre></pre>
</td>
<td width=26%><pre></pre>
</td>
<td width=47%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=3 width=100%><pre>(13 row(s) affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
However, you cannot group by an alias. </p>
<p>
You can correct this query if you group by type, <i>title_id</i>. </p>
<p>
You must also include in the GROUP BY list all non-aggregates in the select list. In the example above, if the GROUP BY contained only 'GROUP BY TYPE', an error would result, stating that <i>title_id</i> is contained in the select list but not in the grouping. Hence, <i>title_id</i> would either need to be removed from the select list or added to the group by list.</p>
<p>
This statement produces an error message:</p>
<pre>SELECT Category = type, title_id, avg(price), avg(advance)
FROM titles
GROUP BY Category, title_id
</pre>
<p>
You can list more than one column in the GROUP BY clause to nest groups ¾ that is, you can group a table by any combination of columns. For example, this statement finds the average price and the sum of year-to-date sales, grouped by type and publisher ID:</p>
<pre>SELECT type, pub_id, 'avg' = AVG(price), 'sum' = sum(ytd_sales)
FROM titles
GROUP BY type, pub_id

type         pub_id avg                        sum         
------------ ------ -------------------------- ----------- 
business     0736   11.96                      18722       
business     1389   17.31                      12066       
mod_cook     0877   11.49                      24278       
popular_comp 1389   21.48                      12875       
psychology   0736   45.93                      9564        
psychology   0877   21.59                      375         
trad_cook    0877   15.96                      19566       
UNDECIDED    0877   (null)                     (null)      

(8 row(s) affected)
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

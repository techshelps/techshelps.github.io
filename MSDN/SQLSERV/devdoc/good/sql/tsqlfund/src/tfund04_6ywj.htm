<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparison Operator Subqueries</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_comparison_operator_subqueries"></a>Comparison Operator Subqueries</h2>
<p>
Subqueries can be introduced with one of the comparison operators =, &lt; &gt;, &gt;, &gt; =, &lt;, ! &gt;, ! &lt;, or &lt; =. </p>
<p>
A subquery introduced with an unmodified comparison operator (a comparison operator not followed by ANY or ALL) must return a single value rather than a list of values, like subqueries introduced with IN. If such a subquery returns more than one value, SQL Server displays an error message.</p>
<p>
However, this can be unreliable and should aften be avoided because to use a subquery introduced with an unmodified comparison operator, you must be familiar enough with your data and with the nature of the problem to know that the subquery will return exactly one value.</p>
<p>
For example, if you suppose each publisher to be located in only one city, and you want to find the names of authors who live in the city where Algodata Infosystems is located, you can write a statement with a subquery introduced with the simple comparison operator = (equal sign):</p>
<pre>SELECT au_lname, au_fname
FROM authors
WHERE city =
    (SELECT city
    FROM publishers
    WHERE pub_name = 'Algodata Infosystems')

au_lname        au_fname
--------        --------
Carson        Cheryl
Bennet        Abraham

(2 row(s) affected)
</pre>
<p>
If, however the preceding subquery returned multiple rows, then an error message would result, stating that it was an illegal subquery. Instead of <b>=</b>, an IN formulation could be used (<b>=</b> ANY also works).</p>
<p>
Subqueries introduced with unmodified comparison operators often include aggregate functions, since these return a single value. For example, this statement finds the names of all books priced higher than the current minimum price:</p>
<pre>SELECT distinct title
FROM titles
WHERE price &gt;
    (SELECT min(price)
    FROM titles)

title
----------------------------------------------------------
But Is It User Friendly?
Computer Phobic and Non-Phobic Individuals: Behavior Variations
Cooking with Computers: Surreptitious Balance Sheets
Emotional Security: A New Algorithm
Fifty Years in Buckingham Palace Kitchens
Is Anger the Enemy?
Life Without Fear
Onions, Leeks, and Garlic: Cooking Secrets of the Mediterranean
Prolonged Data Deprivation: Four Case Studies
Secrets of Silicon Valley
Silicon Valley Gastronomic Treats
Straight Talk About Computers
Sushi, Anyone?
The Busy Executive's Database Guide

(14 row(s) affected)
</pre>
<p>
Because subqueries introduced with unmodified comparison operators must return a single value, they cannot include GROUP BY or HAVING clauses unless you know that the GROUP BY or HAVING clause itself returns a single value. For example, this query finds the books priced higher than the lowest priced book in the <i>trad_cook</i> category:</p>
<pre>SELECT DISTINCT title
FROM titles
WHERE price &gt;
    (SELECT min(price)
    FROM titles
    GROUP BY type
    HAVING type = 'trad_cook')
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

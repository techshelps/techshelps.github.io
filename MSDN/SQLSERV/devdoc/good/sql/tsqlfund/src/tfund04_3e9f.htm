<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Arithmetic Operators</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_arithmetic_operators"></a>Arithmetic Operators</h3>
<p>
The following arithmetic operators are supported:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=15%></th>
<th align=left width=85%></th>
</tr>
<tr valign=top>
<th align=left width=15%></th>
<th align=left width=85%></th>
</tr>
<tr valign=top>
<th align=left width=15%>Symbol</th>
<th align=left width=85%>Operation</th>
</tr>
<tr valign=top>
<td width=15%>+</td>
<td width=85%>Addition</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%></td>
</tr>
<tr valign=top>
<td width=15%>-</td>
<td width=85%>Subtraction</td>
</tr>
<tr valign=top>
<td width=15%>/</td>
<td width=85%>Division</td>
</tr>
<tr valign=top>
<td width=15%>*</td>
<td width=85%>Multiplication</td>
</tr>
<tr valign=top>
<td width=15%>%</td>
<td width=85%>Modulo</td>
</tr>
</table><br>
<p>
The arithmetic operators that perform addition, subtraction, division, and multiplication can be used on any numeric column ( <i>int</i>, <i>smallint</i>, <i>tinyint</i>, <i>decimal</i>, <i>numeric</i>, <i>float</i>, <i>real</i>, <i>money</i>, or <i>smallmoney</i>). The modulo operator cannot be used on <i>money</i> columns. (A modulo is the integer that remains after two integers are divided. For example, 21 % 9 = 3, because 21 divided by 9 equals 2, with a remainder, or modulo, of 3.)</p>
<p>
Certain arithmetic operations can also be performed on <i>datetime</i> and <i>smalldatetime</i> columns using the date functions. For details, see <a href="../../tsqlref/src/tsql09_9dyr.htm">Functions</a> in the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<p>
All the arithmetic operators can be used in the select list with column names and numeric constants in any combination. The following example uses the multiplication operator to show a projected sales increase of 100 percent for all the books in the <i>titles</i> table:</p>
<pre>SELECT title_id, ytd_sales, ytd_sales * 2
FROM titles

title_id ytd_sales   ytd_sales * 2 
-------- ----------- ----------- 
BU1032   4095        8190        
BU1111   3876        7752        
BU2075   18722       37444       
BU7832   4095        8190        
MC2222   2032        4064        
MC3021   22246       44492       
MC3026   (null)      (null)      
PC1035   8780        17560       
PC8888   4095        8190        
PC9999   (null)      (null)      
PS1372   375         750         
PS2091   2045        4090        
PS2106   111         222         
PS3333   4072        8144        
PS7777   3336        6672        
TC3218   375         750         
TC4203   15096       30192       
TC7777   4095        8190        

(18 row(s) affected)
</pre>
<p>
Notice the NULL entries in the <i>ytd_sales</i> and computed columns. Null values have no explicitly assigned values. When you perform any arithmetic operation on a null value, the result is NULL. (You can use the system function ISNULL() to substitute a real value for NULL. For details, see the Functions topic in the <i>Microsoft SQL Server Transact-SQL Reference</i>.)</p>
<p>
To give the computed column a heading (say <i>proj_sales</i>):</p>
<pre>SELECT title_id, ytd_sales, proj_sales = ytd_sales * 2
FROM titles
</pre>
<p>
The column from which the computed column is generated does not have to appear in the select list. The <i>ytd_sales</i> column, for example, is shown in the preceding queries only for comparison with the <i>ytd_sales * 2</i> column. To see just the computed values:</p>
<pre>SELECT title_id, ytd_sales * 2
FROM titles
</pre>
<p>
You can use arithmetic operators to perform computations involving one or more columns. The use of constants in arithmetic expressions is optional, as shown in this example:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<td colspan=3 width=100%><pre>SELECT title_id, ytd_sales * price</pre>
</td>
</tr>
<tr valign=top>
<td width=33%><pre>FROM titles</pre>
</td>
<td width=33%><pre></pre>
</td>
<td width=34%><pre></pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
Computed columns can come from more than one table. The following query computes the product of the number of copies of a psychology book sold (the <i>qty</i> column from the <i>sales</i> table) and the price of the book (the <i>price</i> column from the <i>titles</i> table):</p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><pre>SELECT titles.title_id, stor_id, qty * price</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>FROM titles, sales</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>WHERE titles.title_id = sales.title_id</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>AND titles.title_id = 'PS2091'</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
The WHERE clause in this example is a join condition that specifies the connection between the tables listed in the FROM clause. For details about working with multitable queries, see <a href="tfund04_0377.htm">Using Joins to Create Multitable Queries</a> and <a href="tfund04_98dv.htm">Using Subqueries</a>.</p>

<h4><a name="_datatype_precedence_in_mixed.2d.mode_arithmetic"></a>Datatype Precedence in Mixed-mode Arithmetic</h4>
<p>
Mixed-mode arithmetic means performing arithmetic operations on values of different datatypes (for example, <i>int  smallint</i>). The hierarchy of datatypes, which comes from the rank ordering of the values of the datatype codes, determines the datatype of the result. In a mixed-mode expression, the lower datatype is converted internally to the higher type. The only exception to this rule is when converting <i>money</i> and other number datatypes such as <i>float</i>, <i>real</i>, <i>decimal</i>, and <i>numeric</i>; <i>money</i> always takes precedence, even though its type is lower. The hierarchy of datatypes is shown in the <i>systypes</i> system table.  </p>
<p>
If, for example, <i>sales.qty</i> (a <i>smallint</i>) is multiplied by <i>roysched.royalty</i> (an <i>int</i>), the resultant datatype is <i>int</i>. This is because the <i>smallint</i> datatype code has a value of 52 and the <i>int</i> datatype code has a value of 56. </p>
<p>
To obtain a list of datatypes with their type value codes from the <i>systypes</i> table, use the following query. Select the name of the datatype and its type code, and then use the ORDER BY statement to display the hierarchy:</p>
<pre>SELECT name, type
FROM systypes
ORDER BY type
</pre>
<p>
The results of this query differ if you have user-defined datatypes. </p>

<h4><a name="_arithmetic_operator_precedence"></a>Arithmetic Operator Precedence</h4>
<p>
When there is more than one arithmetic operator in an expression, multiplication, division, and modulo are calculated first, followed by subtraction and addition. When all arithmetic operators in an expression have the same level of precedence, the order of execution is left to right. Expressions within parentheses take precedence over all other operations.</p>
<p>
For example, the following SELECT statement subtracts the part of the year-to-date sales that the author receives (sales * author's royalty percentage / 100) from the total sales. The final result is the amount of money the publisher receives.</p>
<p>
The product of <i>ytd_sales</i> and <i>royalty</i> is calculated first because the operator is multiplication. Next, the total is divided by 100. Then this result is subtracted from <i>ytd_sales</i>:</p>
<pre>SELECT title_id, ytd_sales - ytd_sales * royalty / 100
FROM titles
</pre>
<p>
For clarity, you can use parentheses. The following query has the same meaning and gives the same results as the preceding one:</p>
<pre>SELECT title_id, ytd_sales - ((ytd_sales * royalty) / 100)
FROM titles
</pre>
<p>
You can also use parentheses to change the order of execution. Calculations inside parentheses are evaluated first. If parentheses are nested, the most deeply nested calculation has precedence. For example, the result and meaning of the preceding query can be changed if you use parentheses to force the evaluation of subtraction before multiplication:</p>
<pre>SELECT title_id, (ytd_sales - ytd_sales) * royalty / 100
FROM titles
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

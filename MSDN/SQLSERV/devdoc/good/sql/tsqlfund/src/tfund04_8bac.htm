<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Joins Are Processed</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_how_joins_are_processed"></a>How Joins Are Processed</h2>
<p>
Knowing how joins are processed will help you to understand them and to figure out why incorrectly stated joins can give unexpected results. This section explains conceptually how joins are processed; the actual SQL Server procedure is more sophisticated.</p>
<p>
The first step in processing a join is to form the <i>Cartesian product </i>of the tables, all the possible combinations of the rows from each of the tables. The number of rows in a Cartesian product of two tables is equal to the number of rows in the first table times the number of rows in the second table.</p>
<p>
The Cartesian product of the <i>authors</i> table and the <i>publishers</i> table is 184 (23*8) (23 authors multiplied by 8 publishers). You can see the Cartesian product with any query that includes columns from more than one table in the select list, more than one table in the FROM clause, and no WHERE clause. For example, if you omit the WHERE clause from the join of the <i>authors</i> and <i>publishers</i> tables, SQL Server combines each of the 23 authors with each of the 8 publishers and returns all 184 rows. But this Cartesian product usually does not contain any particularly useful information (unless you are explicitly looking to see every possible combination). In fact, it is misleading, since it seems to imply that every author in the database has a relationship with every publisher in the database ¾ which is not true.</p>
<p>
That's why a join must include a WHERE clause, which specifies the columns to be matched and the basis on which to match them. (It can also include other restrictions.) Once the Cartesian product has been formed, the rows that do not satisfy the join are eliminated, using the conditions in the WHERE clause. For example, the WHERE clause, WHERE <i>authors.city</i> = <i>publishers.city</i>, eliminates from the results all rows in which the author's city is not the same as the publisher's city.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

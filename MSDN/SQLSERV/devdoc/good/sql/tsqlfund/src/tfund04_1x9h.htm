<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The HAVING Clause</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_the_having_clause"></a>The HAVING Clause</h3>
<p>
HAVING sets conditions for the GROUP BY clause similarly to the way that WHERE sets conditions for the SELECT clause. Because the HAVING clause is used to restrict groups, HAVING without GROUP BY is not meaningful. In queries without GROUP BY, SQL Server returns the same results as it would if a WHERE clause were used.</p>
<p>
The HAVING search conditions are identical to WHERE search conditions with one exception: WHERE search conditions cannot include aggregate functions, and HAVING search conditions often do. HAVING clauses can reference any of the items that appear in the select list. Up to 128 conditions can be included in a HAVING clause.</p>
<p>
The following statement shows a HAVING clause with an aggregate function. It groups the rows in the <i>titles</i> table by type and eliminates the groups that include only one book:</p>
<pre>SELECT type
FROM titles
GROUP BY type
HAVING COUNT(*) &gt; 1

type
------------
business
mod_cook
popular_comp
psychology
trad_cook

(5 row(s) affected)
</pre>
<p>
Here's an example of a HAVING clause without aggregate functions. It groups the rows in the <i>titles</i> table by type and eliminates those types that do not start with the letter "p":</p>
<pre>SELECT type
FROM titles
GROUP BY type
HAVING type LIKE 'p%'

type
------------
popular_comp
psychology

(2 row(s) affected)
</pre>
<p>
When multiple conditions are included in the HAVING clause, they are combined with AND, OR, or NOT. The following example shows how to group the <i>titles</i> table by publisher, including only those publishers with identification numbers greater than 0800, who have paid more than $15,000 in total advances, and who sell books for less than an average of $20:</p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><pre>SELECT pub_id, SUM(advance), AVG(price)</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>FROM titles</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>GROUP BY pub_id</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>HAVING SUM(advance) &gt; $15000</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>    AND AVG(price) &lt; $20</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>    AND pub_id &gt; '0800'</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
The following statement illustrates the use of GROUP BY, HAVING, WHERE and ORDER BY clauses in one SELECT statement. It produces the same groups and summary values as the previous example but does so after eliminating the titles with prices under $5. It also organizes the results by <i>pub_id</i>:</p>
<table cellspacing=4 cols=1>
<tr valign=top>
<td width=100%><pre>SELECT pub_id, SUM(advance), AVG(price)</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>FROM titles</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>WHERE price &gt;= $5</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>GROUP BY pub_id</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>HAVING SUM(advance) &gt; $15000</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>    AND AVG(price) &lt; $20</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>    AND pub_id &gt; '0800'</pre>
</td>
</tr>
<tr valign=top>
<td width=100%><pre>ORDER BY pub_id</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

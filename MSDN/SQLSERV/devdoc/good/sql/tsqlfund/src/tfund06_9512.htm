<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Triggers to Define Business Processes</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_using_triggers_to_define_business_processes_tfund06"></a>Using Triggers to Define Business Processes</h1>
<p>
A <i>trigger</i> is a special kind of stored procedure that goes into effect when you modify data in a specified table. Triggers are often created to enforce business rule consistency among logically related data in different tables. </p>
<p>
An advantage of triggers is that they are automatic ¾ they work no matter what caused the data modification ¾ a clerk's entry or an application action. Each trigger is specific to one or more of the data modification operations UPDATE, INSERT, or DELETE. The trigger is executed once per SQL statement; it "fires" immediately after the data modification statements are completed. The trigger and the statement that fires it are treated as a single transaction that can be rolled back from within the trigger. If a severe error is detected, the entire transaction automatically rolls back.</p>
<p>
Triggers are useful in these ways:
<ul>
<li>
Triggers can cascade changes through related tables in the database. <p>
For example, a delete trigger on the <i>title_id</i> column of the <i>titles</i> table causes a corresponding deletion of matching rows in other tables, using the <i>title_id</i> column as a unique key to locating rows in <i>titleauthor</i>, <i>sales</i>, and <i>roysched</i>.
</li>
<li>
Triggers can disallow or roll back changes that violate referential integrity, canceling the attempted data modification transaction. <p>
Such a trigger might go into effect when you try to change a foreign key and the new value does not match its primary key. For example, you can create an insert trigger on <i>titleauthor.title_id</i> that rolls back an insert if the new value does not match some value in <i>titles.title_id</i>. (However, declarative referential integrity (DRI) is usually used for this purpose.)
</li>
<li>
Triggers can enforce restrictions that are more complex than those defined with CHECK constraints. <p>
Unlike CHECK constraints, triggers can reference columns in other tables. For example, a trigger can roll back updates that attempt to increase a book's price by more than 1 percent of its advance, might be checked with a SELECT to another table.
</li>
<li>
Triggers can also find the difference between the state of a table before and after a data modification and take action(s) based on that difference.</li>
</ul>
<p>
<b>Note</b>  Except for the <b>deltitle</b> trigger, the triggers discussed in this chapter are not part of the <i>pubs</i> database included with SQL Server. To work with the examples shown, you must create each trigger by using the CREATE TRIGGER statement. Note that each new trigger for the same operation (INSERT, UPDATE, or DELETE) on a table or column overwrites the previous one without warning. For details about CREATE TRIGGER, see the <a href="../../tsqlref/src/tsql04_8rg4.htm">CREATE TRIGGER statement</a> in the <i>Microsoft SQL Server Transact-SQL Reference</i>.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

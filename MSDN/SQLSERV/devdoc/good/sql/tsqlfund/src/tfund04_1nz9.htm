<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Aggregate Functions and the GROUP BY Clause</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_aggregate_functions_and_the_group_by_clause"></a>Aggregate Functions and the GROUP BY Clause</h2>
<p>
Aggregate functions can be applied to all rows in a table, to a subset of the table specified by a WHERE clause, or to one or more groups of rows in the table. A single value is generated from each set of rows to which an aggregate function is applied.</p>
<p>
This example calculates the sum of year-to-date sales for all books in the <i>titles</i> table:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=60%><pre>SELECT SUM(ytd_sales)</pre>
</td>
</tr>
<tr valign=top>
<td width=60%><pre>FROM titles</pre>
</td>
<td width=40%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=60%><pre></pre>
</td>
<td width=40%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=60%><pre>-------------</pre>
</td>
<td width=40%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=60%><pre>97446</pre>
</td>
<td width=40%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=60%><pre></pre>
</td>
<td width=40%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=60%><pre>(1 row(s) affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
The optional keyword DISTINCT can be used with SUM, AVG, and COUNT to eliminate duplicate values before an aggregate function is applied. For SUM, AVG, and COUNT, ALL is the default.</p>
<p>
<b>Important</b>  The output for statements involving MIN or MAX on <i>char</i> or <i>varchar</i> columns depends on the sort order chosen during installation. For information about the effects of different sort orders, see <i>Microsoft SQL</i> <i>Server Setup</i>.</p>
<p>
For example, with this query you can find the average price of all books if the prices were doubled:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=45%><pre>SELECT avg(price * 2)</pre>
</td>
</tr>
<tr valign=top>
<td width=45%><pre>FROM titles</pre>
</td>
<td width=55%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=45%><pre></pre>
</td>
<td width=55%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=45%><pre>------------</pre>
</td>
<td width=55%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=45%><pre>47.88</pre>
</td>
<td width=55%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=45%><pre></pre>
</td>
<td width=55%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=45%><pre>(1 row(s) affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
The syntax of the aggregate functions and their results are as follows:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%></th>
<th align=left width=50%></th>
</tr>
<tr valign=top>
<th align=left width=50%></th>
<th align=left width=50%></th>
</tr>
<tr valign=top>
<th align=left width=50%>Aggregate function</th>
<th align=left width=50%>Result</th>
</tr>
<tr valign=top>
<td width=50%></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%>SUM<b>(</b>[ALL | DISTINCT] <i>expression</i><b>)</b></td>
<td width=50%>Total of the values in the numeric expression, either all or distinct</td>
</tr>
<tr valign=top>
<td width=50%>AVG<b>(</b>[ALL | DISTINCT] <i>expression</i><b>)</b></td>
<td width=50%>Average of the values in the numeric expression, either all or distinct</td>
</tr>
<tr valign=top>
<td width=50%>COUNT<b>(</b>[ALL | DISTINCT] <i>expression</i><b>)</b></td>
<td width=50%>Number of values in the expression, either all or distinct</td>
</tr>
<tr valign=top>
<td width=50%>COUNT<b>(*)</b></td>
<td width=50%>Number of selected rows</td>
</tr>
<tr valign=top>
<td width=50%>MAX<b>(</b><i>expression</i><b>)</b></td>
<td width=50%>Highest value in the expression</td>
</tr>
<tr valign=top>
<td width=50%>MIN<b>(</b><i>expression</i><b>)</b></td>
<td width=50%>Lowest value in the expression</td>
</tr>
</table><br>
<p>
SUM, AVG, COUNT, MAX, and MIN ignore null values; COUNT(*) does not.</p>
<p>
Aggregate functions can be used in a select list, as in the preceding examples, or in the HAVING clause of a SELECT statement that includes a GROUP BY clause. For more information, see <a href="tfund04_1x9h.htm">The HAVING Clause</a>.</p>
<p>
Aggregate functions cannot be used in a WHERE clause. However, a SELECT statement with aggregate functions in its select list often includes a WHERE clause that restricts the rows to which the aggregate function is applied. In the examples given earlier, each aggregate function produces a single summary value for the whole table. If a SELECT statement includes a WHERE clause (but not a GROUP BY clause), an aggregate function produces a single value for the subset of rows that the WHERE clause specifies.</p>
<p>
This query returns the average advance and the sum of year-to-date sales for business books only:</p>
<pre>SELECT AVG(advance), SUM(ytd_sales)
FROM titles
WHERE type = 'business'

---------     -------
6,281.25      30788

(1 row(s) affected)
</pre>
<p>
Whenever an aggregate function is used in a SELECT statement that does not include a GROUP BY clause, it produces a single value. This is true whether it is operating on all rows in a table or on a subset of rows defined by a WHERE clause. Such a function is called a <i>scalar aggregate</i>.</p>
<p>
Note that you can use more than one aggregate function in the same select list and produce more than one scalar aggregate in a single SELECT statement.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

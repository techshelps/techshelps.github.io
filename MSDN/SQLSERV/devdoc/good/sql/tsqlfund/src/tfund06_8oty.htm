<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Return Status Values</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_return_status_values_tfund06"></a>Return Status Values</h3>
<p>
Stored procedures can return an integer value called a return status. This status can indicate that the procedure completed successfully, or it can indicate the reason for failure. SQL Server has a defined set of return values; users can also define their own values. Here's an example of a batch that returns a status:</p>
<pre>DECLARE @status int
EXECUTE @status = au_info @lastname = Ringer, @firstname = Anne
SELECT status = @status</pre>
<p>
The execution status of the <b>au_info</b> procedure is stored in the variable <i>@status</i>. </p>
<p>
Later examples use the return value in conditional clauses.</p>

<h4><a name="_reserved_return_status_values_tfund06"></a>Reserved Return Status Values</h4>
<p>
SQL Server reserves 0 to indicate a successful completion and negative values in the range from -1 through -99 to indicate various reasons for failure. The failure values -1 through -14 are currently in use:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=15%></th>
<th align=left width=85%></th>
</tr>
<tr valign=top>
<th align=left width=15%></th>
<th align=left width=85%></th>
</tr>
<tr valign=top>
<th align=left width=15%>Value</th>
<th align=left width=85%>Meaning</th>
</tr>
<tr valign=top>
<td class=indent1 width=15%></td>
<td width=85%></td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>    0</td>
<td width=85%>Procedure was executed successfully</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>  -1</td>
<td width=85%>Object missing</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>  -2</td>
<td width=85%>Datatype error occurred</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>  -3</td>
<td width=85%>Process was chosen as deadlock victim</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%> -   4</td>
<td width=85%>Permission error occurred</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>  -5</td>
<td width=85%>Syntax error occurred</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%> - 6</td>
<td width=85%>Miscellaneous user error occurred</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>  -7</td>
<td width=85%>Resource error, such as out of space, occurred</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%> - 8</td>
<td width=85%>Non-fatal internal problem encountered</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>  -9</td>
<td width=85%>System limit was reached</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>-10</td>
<td width=85%>Fatal internal inconsistency occurred</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>-11</td>
<td width=85%>Fatal internal inconsistency occurred</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>-12</td>
<td width=85%>Table or index is corrupt</td>
</tr>
<tr valign=top>
<td class=indent1 width=15%>-13</td>
<td width=85%>Database is corrupt</td>
</tr>
<tr valign=top>
<td width=15%></td>
<td width=85%></td>
</tr>
<tr valign=top>
<td width=15%>-14</td>
<td width=85%>Hardware error occurred</td>
</tr>
</table><br>
<p>
The values -1 through -14 correspond to error severity levels 10 through 24. The values -15 through -99 are reserved for future use by SQL Server. For more information about severity levels, see the <i>Microsoft SQL</i> <i>Server Administrator's Companion</i>.</p>
<p>
If more than one error occurs during execution, the status with the highest absolute value is returned.</p>

<h4><a name="_user.2d.generated_return_values_tfund06"></a>User-generated Return Values</h4>
<p>
Users can generate their own return values in stored procedures by adding a parameter to the RETURN statement. All integers other than the reserved values from 0 through -99 can be used. </p>
<p>
The following example returns 1 when an author has a valid contract and returns 2 in all other cases:</p>
<pre>CREATE PROC checkcontract @param varchar(11)
AS
IF (SELECT contract FROM authors WHERE au_id = @param) = 1
    RETURN 1
ELSE
    RETURN 2</pre>
<p>
The following stored procedure calls <b>checkcontract</b> and uses conditional clauses (IF...ELSE) to check the return status:</p>
<pre>CREATE PROC get_au_stat @param varchar(11)
AS
DECLARE @retvalue int
EXECUTE @retvalue = checkcontract @param
IF (@retvalue = 1)
    PRINT 'Contract is valid'
ELSE
    PRINT 'There is not a valid contract'</pre>
<p>
Here are the results when you execute <b>get_au_stat</b> with the <i>au_id</i> of an author with a valid contract:</p>
<pre>get_au_stat '807-91-6654'
Contract is valid</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

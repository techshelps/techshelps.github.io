<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparison Operators Modified by ANY, SOME, or ALL</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_comparison_operators_modified_by_any_some_or_all"></a>Comparison Operators Modified by ANY, SOME, or ALL</h3>
<p>
Comparison operators that introduce a subquery can be modified by the keywords ALL or ANY. SOME is an ANSI-standard keyword for ANY.</p>
<p>
<b>Note</b>  The =ALL construct is not supported since it would result in an error whenever the subquery resulted in multiple rows.</p>
<p>
Subqueries introduced with a modified comparison operator return a list of zero or more values and can include a GROUP BY or HAVING clause. These subqueries can be restated with EXISTS, as discussed later in this chapter.</p>
<p>
Using the &gt; comparison operator as an example, &gt;ALL means greater than every value ¾ in other words, greater than the maximum value. For example, &gt;ALL (1, 2, 3) means greater than 3. &gt;ANY means greater than at least one value ¾ in other words, greater than the minimum. So &gt;ANY (1, 2, 3) means greater than 1.</p>
<p>
In the context of a subquery, &gt;ALL means that for a row to satisfy the condition specified in the outer query, the value in the column that introduces the subquery must be greater than each value in the list of values returned by the subquery.</p>
<p>
Similarly, &gt;ANY means that for a row to satisfy the condition specified in the outer query, the value in the column that introduces the subquery must be greater than at least one of the values in the list of values returned by the subquery.</p>
<p>
The use of ALL and ANY can be confusing because computers cannot tolerate the ambiguity that these words sometimes have in English. For example, you might ask the question, "Which books commanded an advance greater than any book published by Algodata Infosystems?"</p>
<p>
This question can be paraphrased to make its SQL translation clearer: "Which books commanded an advance greater than the largest advance paid by Algodata Infosystems?" The ALL keyword (not the ANY keyword) is required here:</p>
<pre>SELECT title
FROM titles
WHERE advance &gt; ALL
    (SELECT advance
    FROM publishers, titles
    WHERE titles.pub_id = publishers.pub_id
        AND pub_name = 'Algodata Infosystems')
</pre>
<p>
For each title, the inner query finds a list of advance amounts paid by Algodata. The outer query looks at the largest value in the list and determines whether the title currently being considered has commanded an even bigger advance.</p>
<p>
If a subquery introduced with ALL and a comparison operator does not return any values, all rows in outer query satisfy the condition.</p>
<p>
The following query provides an example of a subquery introduced with a comparison operator modified by ANY. It finds the titles that got an advance larger than the minimum advance amount paid by Algodata Infosystems.</p>
<pre>SELECT title
FROM titles
WHERE advance &gt; ANY
    (SELECT advance
    FROM publishers, titles
    WHERE titles.pub_id = publishers.pub_id
        AND pub_name = 'Algodata Infosystems')

title
---------------------------------------------------------------
You Can Combat Computer Stress!
The Gourmet Microwave
But Is It User Friendly?
Secrets of Silicon Valley
Computer Phobic and Non-Phobic Individuals: Behavior Variations
Life Without Fear
Onions, Leeks, and Garlic: Cooking Secrets of the Mediterranean
Sushi, Anyone?

(8 row(s) affected)
</pre>
<p>
For each title, the inner query finds a list of advance amounts paid by Algodata. The outer query looks at all values in the list and determines whether the title currently being considered has commanded an advance larger than any of those amounts. In other words, it finds titles with advances as large or larger than the lowest value paid by Algodata.</p>
<p>
If the subquery does not return any values, the entire query fails to return any values.</p>
<p>
The =ANY operator is equivalent to IN. For example, to find authors who live in the same city as a publisher, you can use either IN or =ANY:</p>
<pre>SELECT au_lname, au_fname
FROM authors
WHERE city IN
    (SELECT city
    FROM publishers)

SELECT au_lname, au_fname
FROM authors
WHERE city = ANY
    (SELECT city
    FROM publishers)

au_lname            au_fname
--------            ---------
Carson            Cheryl
Bennet            Abraham

(2 row(s) affected)
</pre>
<p>
The &lt; &gt;ANY operator, however, differs from NOT IN: &lt; &gt;ANY means not = a, <i>or</i> not = b, <i>or</i> not = c. NOT IN means not = a, <i>and</i> not = b, <i>and</i> not = c. &lt;&gt;ALL means the same as NOT IN.</p>
<p>
For example, say you want to find the authors who live in a city where no publisher is located. You might mistakenly try this query:</p>
<pre>SELECT au_lname, au_fname
FROM authors
WHERE city &lt;&gt; any
    (SELECT city
    FROM publishers)
</pre>
<p>
The results include all 23 authors because every author lives in a city where one or more of the publishers is <i>not</i> located. What's happened is that the inner query finds all the cities in which publishers are located, and then, for each city, the outer query finds the authors who don't live there.</p>
<p>
However, when you substitute NOT IN in this query, the results include all the authors <i>except</i> Cheryl Carson and Abraham Bennet, who live in Berkeley, where Algodata Infosystems is located.</p>
<pre>SELECT au_lname, au_fname
FROM authors
WHERE city NOT IN
    (SELECT city
    FROM publishers)
</pre>
<p>
You can get the same results with the &lt; &gt;ALL operator, which is equivalent to NOT IN:</p>
<pre>SELECT au_lname, au_fname
FROM authors
WHERE city &lt;&gt; ALL
    (SELECT city
    FROM publishers)
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

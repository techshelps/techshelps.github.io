<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE VIEW Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_create_view_statement"></a>CREATE VIEW Statement </h1>
<p>
Creates a virtual table that represents an alternative way of looking at the data in one or more tables. You can use views as security mechanisms by granting permission on a view but not on underlying tables.</p>
<h4>Syntax</h4>
<p>
CREATE VIEW [<i>owner</i><b>.</b>]<i>view_name</i><br>
[<b>(</b><i>column_name</i> [<b>,</b> <i>column_name</i>]...<b>)</b>]<br>
[WITH ENCRYPTION]<br>
AS <i>select_statement</i> [WITH CHECK OPTION]</p>
<p>
where
<dl>
<dt>
<i>view_name</i></dt>
<dd>
Is the name of the view. View names must follow the rules for <a href="tsql10_3u5w.htm">identifiers</a>. </dd>
<dt>
<i>column_name</i></dt>
<dd>
Is the name to be used for a column in a view. Naming a column in CREATE VIEW is always legal but only necessary when a column is derived from an arithmetic expression, a function, or a constant, when two or more columns could otherwise have the same name (usually because of a join), or when you want to give a column in a view a name different from the column from which it is derived. Column names can also be assigned in the <a href="tsql12_654k.htm">SELECT statement</a>. 
<p>
If <i>column_name</i> is not specified, the view columns acquire the same names as the columns in the <a href="tsql12_654k.htm">SELECT statement</a>. 
</dd>
<dt>
ENCRYPTION</dt>
<dd>
Encrypts the <i>syscomments</i> entries that contain the text of the CREATE VIEW statement. 

<p>
<b>Important</b>  When a database is upgraded, <i>syscomments</i> entries are required in order to re-create views. Use encryption only when absolutely necessary; never delete entries from <i>syscomments</i>.

</dd>
<dt>
AS <i>select_statement</i></dt>
<dd>
Is the SELECT statement that defines the view. It can use more than one table and other views. You must have permission to select from the objects referenced in the SELECT clause of a view you are creating.
<p>
A view need not be a simple subset of the rows and columns of one particular table. You can create a view using more than one table and/or other views with a SELECT clause of any complexity.

<p>
There are, however, a few restrictions on the SELECT clauses in a view definition:

<ul>
<li>
You cannot include ORDER BY, COMPUTE, or COMPUTE BY clauses.</li>
<li>
You cannot include the INTO keyword.</li>
<li>
You cannot reference a temporary table.</li>
</ul>
</dd>
<dt>
WITH CHECK OPTION</dt>
<dd>
Forces all data modification statements executed against the view to adhere to the criteria set within the <i>select_statement</i> defining the view. When a row is modified through a view, the WITH CHECK OPTION guarantees that the data will remain visible through the view after the modification has been committed.
</dd>
</dl>
<h4>Remarks</h4>
<p>
You can create a view only in the current database. A view can reference a maximum of 250 columns.</p>
<p>
In a view defined with a SELECT * clause, if you alter the structure of its underlying table(s) by adding columns, the new columns do not appear in the view unless the view is first deleted and redefined. The asterisk shorthand is interpreted and expanded when the view is first created.</p>
<p>
When you query through a view, SQL Server checks to make sure that all the database objects referenced anywhere in the statement exist, that they are valid in the context of the statement, and that data modification statements do not violate any data integrity rules. A check that fails returns an error message. A successful check translates the action into an action against the underlying table(s).</p>
<p>
If a view depends on a table (or view) that has been dropped, SQL Server produces an error message if anyone tries to use the view. If a new table (or view) is created to replace the one dropped, the view again becomes usable.</p>
<p>
When you create a view, the name of the view is stored in the <a href="tsql25_619v.htm"><i>sysobjects</i></a> table and the view's normalized query tree is stored in the <a href="tsql25_8nqr.htm"><i>sysprocedures</i></a> table. Information about the columns defined in a view is added to the <a href="tsql25_5mur.htm"><i>syscolumns</i></a> table, and information about the view dependencies is added to the <a href="tsql25_72nn.htm"><i>sysdepends</i></a> table. In addition, the text of the view creation statement is added to the <a href="tsql25_2y2b.htm"><i>syscomments</i></a> table. This is similar to a stored procedure; but when a view is executed for the first time, only its query tree is stored in procedure cache. Each time a view is accessed, its execution plan is recompiled. </p>
<p>&nbsp;</p></body>
</HTML>

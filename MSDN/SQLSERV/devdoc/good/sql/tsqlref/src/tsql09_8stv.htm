<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Aggregate Functions</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_aggregate_functions"></a>Aggregate Functions </h2>
<p>
Return summary values. Aggregate functions calculate summary values, such as averages and sums, from the values in a particular column, and they return a single value for each set of rows to which the function applies.</p>
<p>
Aggregate functions often appear with GROUP BY, which partitions a table into groups. These functions calculate a single value for each group. Without GROUP BY, an aggregate function in the select list produces a single value as a result, whether it is operating on all the rows in a table or on a subset of rows defined by a WHERE clause.</p>
<h4>Syntax</h4>
<p>
<i>aggregate_</i> <i>function</i> <b>(</b>[ALL | DISTINCT] <i>expression</i><b>)</b></p>
<p>
where
<dl>
<dt>
<i>aggregate_</i> <i>function</i></dt>
<dd>
Specifies an aggregate function. 
<p>
The aggregate functions are:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%></th>
<th align=left width=68%></th>
</tr>
<tr valign=top>
<th align=left width=32%></th>
<th align=left width=68%></th>
</tr>
<tr valign=top>
<th align=left width=32%>Aggregate function</th>
<th align=left width=68%>Description</th>
</tr>
<tr valign=top>
<td width=32%><b>AVG</b></td>
<td width=68%>Returns the average of all the values, or only the DISTINCT values, in the <i>expression</i>. AVG can be used with numeric columns only. Null values are ignored.</td>
</tr>
<tr valign=top>
<td width=32%><b>COUNT</b></td>
<td width=68%>Returns the number of non-null values in the <i>expression</i>. When DISTINCT is specified, COUNT finds the number of unique non-null values. COUNT can be used with both numeric and character columns. Null values are ignored.</td>
</tr>
<tr valign=top>
<td width=32%><b>COUNT(*)</b></td>
<td width=68%>Returns the number of rows. COUNT<b>(*)</b> takes no parameters and cannot be used with DISTINCT. All rows are counted, even those with null values.</td>
</tr>
<tr valign=top>
<td width=32%><b>MAX</b></td>
<td width=68%>Returns the maximum value in the <i>expression</i>. MAX can be used with numeric, character, and <i>datetime</i> columns, but not with <i>bit</i> columns. With character columns, MAX finds the highest value in the collating sequence. MAX ignores any null values. DISTINCT is available for ANSI compatibility; but, it is not meaningful with MAX.</td>
</tr>
<tr valign=top>
<td width=32%><b>MIN</b></td>
<td width=68%>Returns the minimum value in the <i>expression</i>. MIN can be used with numeric, character, and <i>datetime</i> columns, but not with <i>bit</i> columns. With character columns, MIN finds the value that is lowest in the sort sequence. MIN ignores any null values. DISTINCT is available for ANSI compatibility; but, it is not meaningful with MIN.</td>
</tr>
<tr valign=top>
<td width=32%><b>SUM</b></td>
<td width=68%>Returns the sum of all the values, or only the DISTINCT values, in the <i>expression</i>. SUM can be used with numeric columns only. Null values are ignored.</td>
</tr>
<tr valign=top>
<td colspan=2 width=100%>Numeric columns refer to <i>decimal</i>, <i>float</i>, <i>int</i>, <i>money</i>, <i>numeric</i>, <i>real</i>, <i>smallint</i>, <i>smallmoney</i>, and <i>tinyint </i>datatypes.</td>
</tr>
</table><br>

</dd>
<dt>
ALL</dt>
<dd>
Applies the aggregate function to all values. ALL is the default.</dd>
<dt>
DISTINCT</dt>
<dd>
Eliminates duplicate values before an aggregate function is applied. DISTINCT is optional with SUM, AVG, COUNT, MIN, MAX and cannot be used with COUNT(*). Although available for ANSI compatibility, DISTINCT is meaningless with MIN and MAX.</dd>
<dt>
<i>expression</i></dt>
<dd>
Is a column name, constant, function, any combination of column names, constants, and functions connected by arithmetic or bitwise operators. For more information, see the Expressions topic.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Aggregate functions, which calculate summary values from the non-null values in a particular column, can be applied to all rows in a table. In this case, they produce a single value called a <i>scalar aggregate function</i>. Or they can be applied to all rows that have the same value in a column or columns or expression (with the GROUP BY and, optionally, the HAVING clause). In this case, they produce a value for each group, called a <i>vector aggregate function</i>. The results of the aggregate functions are shown as new columns. </p>
<p>
When you sum or average numeric data, Transact-SQL promotes the resulting datatype to the minimum precision and scale necessary to hold the result. To avoid overflow errors, declare all variables that will hold the result of a sum or average with the most precise datatype of the values supplied. For example, when summing <i>tinyint</i> and <i>int</i> values, use a resulting variable of type <i>int</i>. When working with datatypes of varying precision and scale, use the maximum precision and the maximum scale.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;SUM and AVG Functions</h5>
<p>
This example calculates the average advance and the sum of year-to-date sales for all business books. Each of these aggregate functions produces a single summary value for all of the retrieved rows.</p>
<pre>SELECT AVG(advance), SUM(ytd_sales)
    FROM titles
        WHERE type = 'business'</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;SUM and AVG Function with a GROUP BY Clause</h5>
<p>
When used with a GROUP BY clause, aggregate functions produce single values for each group, rather than for the whole table. This example produces summary values for each type of book.</p>
<pre>SELECT type, AVG(advance), SUM(ytd_sales)
    FROM titles
        GROUP BY type</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;COUNT of DISTINCT</h5>
<p>
This example finds the number of different cities in which authors live.</p>
<pre>SELECT COUNT(DISTINCT city)
    FROM authors
</pre>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;GROUP BY HAVING COUNT(*) </h5>
<p>
This example lists the types in the <i>titles</i> table but eliminates the types that include more than one book.</p>
<pre>SELECT type
    FROM titles
        GROUP BY type
            HAVING COUNT(*) &gt; 1
</pre>
<h5>E.&nbsp;&nbsp;&nbsp;&nbsp;HAVING SUM and AVG</h5>
<p>
This example groups the <i>titles</i> table by publisher and includes only those groups of publishers who have paid more than $25,000 in total advances and whose books average more than $15 in price.</p>
<pre>SELECT pub_id, SUM(advance), AVG(price)
    FROM titles
        GROUP BY pub_id
            HAVING SUM(advance) &gt; $25000 
                AND AVG(price) &gt; $15
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

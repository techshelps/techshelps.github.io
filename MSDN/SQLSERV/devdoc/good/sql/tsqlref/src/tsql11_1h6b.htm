<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Null Values</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_null_values"></a>Null Values </h1>
<p>
A null value, or NULL, is not the same as 0 or blank. NULL means no entry has been made and usually implies that the value is either unknown or undefined. NULL allows you to distinguish between a deliberate entry of 0 (for numerical columns) or a blank (for character columns) and an unknown or inapplicable entry (NULL for both numerical and character columns). NULL indicates that the user did not explicitly make an entry or has explicitly entered NULL. For example, a null value in the <i>price</i> column of the <i>titles</i> table of the <i>pubs</i> sample database does not mean that the book is being given away free, it means that the price is not known or has not been set.</p>
<h4>Syntax</h4>
<p>
<b>In CREATE TABLE statements:<br>
</b><i>column_name</i> <i>datatype </i>[NULL | NOT NULL]</p>
<p>
<b>In SELECT statements:<br>
</b>WHERE <i>column_name</i> IS [NOT] NULL</p>
<p>
<b>In INSERT statements:<br>
</b>VALUES<b>(</b>{<i>constant</i> | DEFAULT | NULL} <br>
[<b>,</b> {<i>constant</i> | DEFAULT | NULL}]...<b>)</b></p>
<p>
<b>In UPDATE statements:<br>
</b>SET <i>column_name</i> <b>=</b> {<i>expression </i>| NULL} <br>
[<b>,</b> <i>column_name</i> <b>=</b> {<i>expression </i>| NULL}...]</p>
<p>
<b>The ISNULL built-in function:<br>
</b>ISNULL<b>(</b><i>expression</i><b>,</b> <i>value</i><b>)</b></p>
<p>
where
<dl>
<dt>
NULL</dt>
<dd>
Indicates no entry has been made. The value is unknown (not blank or 0). In CREATE TABLE statements, specifying NULL after a column name means that if there is no default for this column, SQL Server assigns a null value whenever the user does not enter data for this column.
<p>
A user can enter NULL explicitly in an INSERT or UPDATE statement.

<p>
In SELECT statements, use IS [NOT] NULL to retrieve null values.
</dd>
<dt>
NOT NULL</dt>
<dd>
Can also be used in a WHERE clause in any statement to retrieve all values except those that are NULL.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If the user fails to make an entry in a column that allows null values, SQL Server supplies the value NULL (unless a default exists). A column defined with the keyword NULL also accepts an explicit entry of NULL from the user, no matter what datatype it is or if it has a default associated with it. Be careful when you enter NULL in character columns. If you put the value NULL inside single quotation marks (<b>'</b>NULL<b>'</b>), SQL Server interprets the entry as a character string rather than as the null value.</p>
<p>
If an attempt to insert NULL is made against a column defined as NOT NULL, only the statement (INSERT or UPDATE) will be terminated. Any other statements within the batch will continue. In earlier releases of SQL Server, the entire batch was rejected at compile time. Although not recommended, the previous behavior of SQL Server (stopping the processing of the entire batch and rolling back any transactions) can be turned on with trace flag 243. For details, see the Trace Flags topic.</p>
<p>
Defining columns as NULL provides a place holder for data you might not yet know. For example, in the <i>titles</i> table, <i>price</i>, <i>advance</i>, <i>royalty</i>, and <i>ytd_sales</i> are set up to allow null values. However, <i>title_id</i> and <i>title</i> do not allow null values because the lack of an entry in these columns would make the row meaningless and confusing. A price without a title makes no sense, but a title without a price simply means that the price is not available. When you create a table, define columns as NOT NULL when the information in the column is critical to the meaning of the other columns. When inserting data, the DEFAULT keyword can be used (for columns defined as allowing null values without a default) to insert NULL into a column. For details and examples, see the INSERT statement.</p>
<p>
DEFAULT constraints defined on the table or user-defined defaults can be connected with either NULL or NOT NULL columns. For more information, see the <a href="tsql04_5iwk.htm">CREATE TABLE statement</a>, the <a href="tsql01_7qt0.htm">ALTER TABLE statement</a>, and the <a href="tsql02_7ddg.htm">CREATE DEFAULT statement</a>. </p>
<p>
When you create NULL columns with certain datatypes, SQL Server automatically converts them to a different internal datatype to allow the storage of null values. SQL Server does not inform the user of the datatype change, and the user should be concerned about it only if querying the system tables. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%></th>
<th align=left width=67%></th>
</tr>
<tr valign=top>
<th align=left width=33%></th>
<th align=left width=67%></th>
</tr>
<tr valign=top>
<th align=left width=33%>Datatype</th>
<th align=left width=67%>Converted to datatype</th>
</tr>
<tr valign=top>
<td width=33%><i>binary</i> </td>
<td width=67%><i>varbinary</i></td>
</tr>
<tr valign=top>
<td width=33%><i>char</i> </td>
<td width=67%><i>varchar</i></td>
</tr>
<tr valign=top>
<td width=33%><i>datetime</i> </td>
<td width=67%><i>datetimn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>decimal</i></td>
<td width=67%><i>decimaln</i></td>
</tr>
<tr valign=top>
<td width=33%><i>float</i> </td>
<td width=67%><i>floatn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>int</i></td>
<td width=67%><i>intn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>money</i> </td>
<td width=67%><i>moneyn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>numeric</i></td>
<td width=67%><i>numericn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>real</i> </td>
<td width=67%><i>floatn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>smalldatetime</i> </td>
<td width=67%><i>datetimn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>smallint</i></td>
<td width=67%><i>intn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>smallmoney</i> </td>
<td width=67%><i>moneyn</i></td>
</tr>
<tr valign=top>
<td width=33%><i>tinyint</i> </td>
<td width=67%><i>intn</i></td>
</tr>
</table><br>
<p>
A column definition that allows null values inserts NULL even when the rule does not explicitly specify NULL. For example, a rule defined on a column that allows null values and that states the values should be greater than 2 (@variable &gt; 2) will insert NULL when no value is entered for the column.</p>
<p>
An expression with an arithmetic or bitwise operator evaluates to NULL if any of the operands is null. For example, 1 <i>+ column1</i> evaluates to NULL if <i>column1</i> is NULL.</p>
<p>
An expression with a comparison operator evaluates to false if any of the operands is NULL. This means that null values never match another value (not even another NULL) when used with a comparison operator. For example, WHERE <i>column1</i> = <i>column2</i> will evaluate to false when <i>column1</i> is NULL, when <i>column2</i> is NULL, and when <i>column1</i> and <i>column2</i> are both NULL. Use IS [NOT] NULL to find null values in queries (when the columns being searched are defined as allowing null values); do not use = NULL. Use the ISNULL system function to replace null values in an expression with another value (if desired). If you try to find null values in columns defined as NOT NULL, SQL Server generates an error message.</p>
<p>
The result of an expression with a nested subquery that returns no rows is NULL. For more information on null values in a subquery, see the <a href="tsql24_0p83.htm">Subqueries</a> topic. The default result of a divide-by-zero action is to return NULL, return a message, and continue processing the batch. To change how the session handles divide-by-zero, see the <a href="tsql12_8mt0.htm">SET statement</a>. </p>
<p>
Aggregate functions ignore null values, except COUNT(*), which includes them. For example, in the calculation AVG<b>(</b><i>advance</i><b>)</b>, null values in the <i>advance</i> column are not counted, either in calculating the total amount or the number of values.</p>
<p>
The aggregate functions MIN, MAX, SUM, and AVG return NULL if the parameter specified for them is an empty set (that is, no rows satisfy the WHERE clause). </p>
<p>
NULLs are considered to be duplicates only in the case of a GROUP BY clause, ORDER BY clause, or when using the DISTINCT keyword and come first in the ORDER BY clause.</p>
<p>
Null values are never joined or referenced (in the case of a FOREIGN KEY constraint), not even to other null values.</p>
<p>
The empty string (<b>'</b> <b>'</b>) or (<b>"</b> <b>"</b>) is always stored as a single space in variables and column data. <b>'</b>abc<b>'</b> <b>'</b> <b>'</b> <b>'</b>def<b>'</b> is equivalent to <b>'</b>abc def<b>'</b>, but not to <b>'</b>abcdef<b>'</b>. The empty string is never evaluated as NULL.</p>
<p>
If you have two tables identical in structure except that one has NULL fields and some null values, and the other has NOT NULL fields, this difference makes it impossible to use SELECT to insert the data from the table with columns that allow null values into the table with columns that do not allow null values. If any of the data is NULL, you cannot update a field that does not allow NULLs by selecting from a field that allows NULLs.</p>
<p>
If you specify NOT NULL when you create a column and do not create a default for it, an error message occurs whenever a user fails to make an entry in that column. In addition, the user cannot insert or update such a column with NULL as a value. The following table illustrates the relationship between the existence of a default (created as a default constraint or as a default) and the definition of a column as NULL or NOT NULL:</p>
<table cellspacing=4 cols=5>
<tr valign=top>
<th align=left width=15%></th>
<th align=left width=19%></th>
<th align=left width=17%></th>
<th align=left width=19%></th>
<th align=left width=30%></th>
</tr>
<tr valign=top>
<th align=left width=15%></th>
<th align=left width=19%></th>
<th align=left width=17%></th>
<th align=left width=19%></th>
<th align=left width=30%></th>
</tr>
<tr valign=top>
<th align=left width=15%>Column <br>
definition</th>
<th align=left width=19%>No entry, <br>
no DEFAULT</th>
<th align=left width=17%>No entry, <br>
DEFAULT</th>
<th align=left width=19%>Enter NULL, <br>
no DEFAULT</th>
<th align=left width=30%>Enter NULL, <br>
DEFAULT</th>
</tr>
<tr valign=top>
<td width=15%><b>NULL</b></td>
<td width=19%>NULL</td>
<td width=17%>default</td>
<td width=19%>NULL</td>
<td width=30%>NULL</td>
</tr>
<tr valign=top>
<td width=15%><b>NOT NULL</b></td>
<td width=19%>error</td>
<td width=17%>default</td>
<td width=19%>error</td>
<td width=30%>error</td>
</tr>
</table><br>
<p>
The <b>sp_help</b> system stored procedure reports on a column's nullability (whether or not the column accepts null values).</p>
<p>
A column of the <i>text</i> or <i>image</i> datatype, when inserted with a null value, does not initialize a text pointer or contain a value. When a null value is written in a <i>text </i>or <i>image </i>column with the UPDATE statement, the column is initialized, a valid text pointer to the column is inserted into the table, and a 2K data page is allocated to the column. Once the column is initialized, it can be accessed by the <a href="tsql27_26wk.htm">READTEXT statement</a> and the <a href="tsql27_35ys.htm">WRITETEXT statement</a>. For more information, see the <a href="tsql06_2oxi.htm">Datatypes</a> topic and the <a href="tsql27_61bi.htm"><i>text</i> and <i>image</i> Manipulation</a> topic. </p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;NULL Values with INSERT</h5>
<p>
The table created in this example shows two columns. The first will allow null values and the second will not. Because column <i>t1</i> of table <i>test</i> is defined as accepting NULL in the CREATE TABLE statement, the three INSERT statements that follow are equivalent. The user can explicitly insert NULL, use the DEFAULT keyword, or allow the system to insert NULL. NULL is inserted in the <i>t1</i> column whenever the user inserts rows but does not specify a value for the column.</p>
<pre>CREATE TABLE test
(
    t1 char(10) NULL,
    t2 char(10) NOT NULL
)
INSERT test VALUES(NULL, 'Stuff')
INSERT test VALUES(DEFAULT, 'Stuff')
INSERT test(t2) VALUES ('Stuff')
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;NULL Values with SELECT</h5>
<p>
The SELECT statement retrieves all rows from <i>test</i> and displays null values in column <i>t1</i> with the value <i>unknown.</i></p>
<pre>SELECT Col1 = ISNULL(t1, 'unknown'), Col2 = t2
    FROM test
go

Col1       Col2       
---------- ---------- 
unknown    Stuff      
unknown    Stuff      

(2 row(s) affected)
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;NULL Values with UPDATE</h5>
<p>
This update uses NULL to define the value for the advance column in the <i>titles</i> table. Notice that quotation marks are not used when specifying NULL.</p>
<pre>UPDATE titles
    SET advance = NULL
    WHERE title_id = 'TC3218'
</pre>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;NULL Values in a WHERE Clause</h5>
<pre>SELECT title_id, advance
    FROM titles
    WHERE advance &lt; $5000 OR advance IS NULL
go

title_id advance                    
-------- -------------------------- 
MC2222   0.00                       
MC3026   NULL                     
PC9999   NULL                     
PS2091   2,275.00                   
PS3333   2,000.00                   
PS7777   4,000.00                   
TC3218   NULL                     
TC4203   4,000.00                   

(8 row(s) affected)
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="tsql09_8stv.htm">Aggregate Functions</a></td>
<td width=52%><a href="tsql12_654k.htm">SELECT statement</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql03_412s.htm">CREATE PROCEDURE statement</a></td>
<td width=52%><a href="tsql22_73l1.htm"><b>sp_help</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql04_5iwk.htm">CREATE TABLE</a></td>
<td width=52%><a href="tsql24_0p83.htm">Subqueries</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql08_4aur.htm">Expressions</a></td>
<td width=52%><a href="tsql09_3t4p.htm">Text and Image Functions</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql10_9alw.htm">INSERT</a></td>
<td width=52%><a href="tsql29_6mlw.htm">UPDATE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql11_33w3.htm">Search Conditions</a></td>
<td width=52%></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

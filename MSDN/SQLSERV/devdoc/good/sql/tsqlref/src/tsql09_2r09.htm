<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Date Functions</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_date_functions_tsql09"></a>Date Functions </h2>
<p>
Date functions manipulate <i>datetime</i> values. Date functions can be summarized as follows:</p>
<h4>Syntax</h4>
<p>
<i>date_</i> <i>function</i> <b>(</b><i>parameters</i><b>)</b></p>
<p>
where
<dl>
<dt>
<i>date_</i> <i>function</i></dt>
<dd>
Specifies a date function. 
<p>
The date functions are:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%>Date function</th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%><b>DATEADD<br>
(</b><i>datepart</i>, <i>number</i>, <i>date</i><b>)</b></td>
<td width=72%>Produces a date by adding an interval to a specified date. The result is a <i>datetime</i> value equal to the date plus the number of date parts. <p>
If the date parameter is a <i>smalldatetime</i> value, the result is also a <i>smalldatetime</i>. You can use DATEADD to add seconds or milliseconds to a <i>smalldatetime</i> value, but the addition is meaningful only where the resulting date changes by at least 1 minute.</p>
</td>
</tr>
<tr valign=top>
<td width=28%><b>DATEDIFF<br>
(</b><i>datepart</i>, <i>date1</i>, <i>date2</i><b>)</b></td>
<td width=72%>Returns the number of <i>datepart</i> "boundaries" crossed between two specified dates. The method of counting crossed boundaries makes the result given by <b>DATEDIFF</b> consistent across all datatypes such as minutes, seconds, and milliseconds. <p>
DATEDIFF takes three parameters. The first is a <i>datepart</i>; the second and third are dates, either <i>datetime</i> or <i>smalldatetime</i> values. The result is a signed integer value equal to the number of <i>datepart </i>boundaries crossed between <i>date2</i> minus <i>date1</i>. For example, the number of weeks between Sunday, January 4 and Sunday, January 11, is 1. </p>
<p>
DATEDIFF produces an error if the result is out range for integer values. For milliseconds, the maximum number that can be represented is 24 days, 20 hours, 31 minutes and 23.647 seconds. For seconds, the maximum number that can be represented is approximately 68 years.</p>
<p>
If <i>smalldatetime</i> values are used, they are converted to <i>datetime</i> values internally for the calculation. Seconds and milliseconds in <i>smalldatetime</i> values are set to 0 for calculating the difference.</p>
</td>
</tr>
<tr valign=top>
<td width=28%><b>DATENAME<br>
(</b><i>datepart</i>, <i>date</i><b>)</b></td>
<td width=72%>Returns a character string representing the specified date part (<i>datepart</i>) of the specified date (<i>date</i>).</td>
</tr>
<tr valign=top>
<td width=28%><b>DATEPART<br>
(</b><i>datepart</i>, <i>date</i><b>)</b></td>
<td width=72%>Returns an integer representing the specified date part (<i>datepart</i>) of the specified date (<i>date</i>).</td>
</tr>
<tr valign=top>
<td width=28%><b>GETDATE()</b></td>
<td width=72%>Returns the current system date and time in the SQL Server standard internal format for <i>datetime</i> values. GETDATE does not take any parameters.</td>
</tr>
</table><br>

</dd>
<dt>
<i>date</i></dt>
<dd>
Can be either the GETDATE function, a character string in date format, or the name of a <i>datetime</i> column.</dd>
<dt>
<i>datepart</i></dt>
<dd>
Is a parameter used with DATEADD, DATEDIFF, DATENAME, and DATEPART. The following table lists the date parts, the abbreviations recognized by SQL Server, and the acceptable values:

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=35%></th>
<th align=left width=35%></th>
</tr>
<tr valign=top>
<th align=left width=30%></th>
<th align=left width=35%></th>
<th align=left width=35%></th>
</tr>
<tr valign=top>
<th align=left width=30%>Date part</th>
<th align=left width=35%>Abbreviation</th>
<th align=left width=35%>Values </th>
</tr>
<tr valign=top>
<td width=30%>year</td>
<td width=35%>yy</td>
<td width=35%>1753-9999</td>
</tr>
<tr valign=top>
<td width=30%>quarter</td>
<td width=35%>qq</td>
<td width=35%>1-4</td>
</tr>
<tr valign=top>
<td width=30%>month</td>
<td width=35%>mm</td>
<td width=35%>1-12</td>
</tr>
<tr valign=top>
<td width=30%>day of year</td>
<td width=35%>dy</td>
<td width=35%>1-366</td>
</tr>
<tr valign=top>
<td width=30%>day</td>
<td width=35%>dd</td>
<td width=35%>1-31</td>
</tr>
<tr valign=top>
<td width=30%>week</td>
<td width=35%>wk</td>
<td width=35%>1-53</td>
</tr>
<tr valign=top>
<td width=30%>weekday</td>
<td width=35%>dw</td>
<td width=35%>1-7 (Sun.-Sat.)</td>
</tr>
<tr valign=top>
<td width=30%>hour</td>
<td width=35%>hh</td>
<td width=35%>0-23</td>
</tr>
<tr valign=top>
<td width=30%>minute</td>
<td width=35%>mi</td>
<td width=35%>0-59</td>
</tr>
<tr valign=top>
<td width=30%>second</td>
<td width=35%>ss</td>
<td width=35%>0-59</td>
</tr>
<tr valign=top>
<td width=30%>millisecond</td>
<td width=35%>ms</td>
<td width=35%>0-999</td>
</tr>
</table><br>


<p>
If the year is given with two digits, &lt;50 is the next century and &gt;=50 is this century. So "25" is "2025," and "50" is "1950."

<p>
Milliseconds can be preceded by either a colon or a period. If preceded by a colon, the number means thousandths of a second. If preceded by a period, a single digit means tenths of a second, two digits mean hundredths of a second, and three digits mean thousandths of a second. For example, "12:30:20:1" means 20 and one-thousandth seconds past 12:30; "12:30:20.1" means 20 and one-tenth seconds past 12:30.

<p>
Use the <i>datetime</i> datatype for dates after January 1, 1753. When entering <i>datetime</i> values, always enclose them in quotation marks. Use <i>char</i> or <i>varchar</i> for earlier dates. 

<p>
SQL Server automatically converts between character and <i>datetime</i> values when necessary ¾ for example, when you compare a character value with a <i>datetime</i> value.

<p>
The date part <i>weekday</i> or <i>dw</i> returns the day of the week (Sunday, Monday, and so on) when used with <i>datename</i>. It returns a corresponding number (Sunday = 1, Saturday = 7) when used with <i>datepart</i>. Using <i>weekday</i> or <i>dw</i> with DATEADD and DATEDIFF is not logical and produces spurious results. Use <i>day</i> or <i>dd</i> instead.

<p>
Because <i>smalldatetime</i> is accurate only to the minute, when a <i>smalldatetime</i> value is used with either <i>datename</i> or <i>datepart</i> seconds and milliseconds are always 0.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Date functions can be used in the select list or in the WHERE clause of a query.</p>
<p>
Use the <i>datetime</i> datatype only for dates after January 1, 1753. When entering <i>datetime</i> values, always enclose them in quotation marks. Store as character data for earlier dates. SQL Server recognizes a wide variety of date styles. For more information about date and time data, see the Datatypes topic and CONVERT Function.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;DATEADD Function</h5>
<p>
This example prints a listing of a "timeframe." This timeframe represents the existing publication date plus 21 days.</p>
<pre>SELECT timeframe = DATEADD(day, 21, pubdate)
    FROM titles
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;DATEDIFF Function</h5>
<p>
This example determines the difference in days between the current date and the publication date.</p>
<pre>SELECT newdate = DATEDIFF(day, pubdate, getdate())
    FROM titles
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;DATEDIFF Function Changes in SQL Server 6.0</h5>
<p>
This example shows the difference in results of the new DATEDIFF function in SQL Server 6.0.</p>
<p>
<b>In earlier releases:</b></p>
<pre>SELECT "Number of Minutes" = DATEDIFF(minute, 'jan 1 1995 22:30:16', 'jan 1 1995 23:30:15')
go
Number of Minutes
------------------------
59
</pre>
<p>
<b>In SQL Server 6.0</b></p>
<pre>SELECT "Number of Minutes" = DATEDIFF(minute, 'jan 1 1995 22:30:16', 'jan 1 1995 23:30:15')
go
Number of Minutes
------------------------
60
</pre>
<p>
The difference is minor; however, it accurately reflects that 60 "minute boundaries" were crossed.</p>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;DATENAME and DATEPART Functions</h5>
<p>
The GETDATE function returns the current date; however, the complete date is not always the information needed for comparison (often only a portion of the date is compared). This example shows the output of GETDATE( ) as well as some other date functions.</p>
<pre>SELECT "Current Date" = getdate()
go
Current Date                
--------------------------- 
Feb 18 1995 11:46PM         

SELECT "Month Name" = DATENAME(month, getdate())
go
Month Name                     
------------------------------ 
February                       

SELECT "Month Number" = DATEPART(month, getdate())
go
Month Number 
------------ 
2            
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

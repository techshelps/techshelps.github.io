<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Row Aggregate Functions</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_row_aggregate_functions_tsql09"></a>Row Aggregate Functions </h2>
<p>
Row aggregate functions generate summary values that appear as additional rows in the query results (unlike the aggregate function results, which appear as new columns). They allow you to see detail and summary rows in one set of results. Row aggregate functions (SUM, AVG, MIN, MAX, and COUNT) are used in a SELECT statement with the COMPUTE clause. You can calculate summary values for subgroups, and you can calculate more than one aggregate function for the same group. COMPUTE and the row aggregate functions are Transact-SQL enhancements to standard SQL.</p>
<h4>Syntax</h4>
<p>
COMPUTE <i>row_aggregate</i> [<b>,</b> <i>row_aggregate</i>...] <br>
[BY <i>expression</i> [<b>,</b> <i>expression</i>]...]</p>
<p>
where
<dl>
<dt>
<i>row_aggregate</i></dt>
<dd>
Specifies the row aggregate function. 
<p>
These are the row aggregate functions:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%>Aggregate <br>
function</th>
<th align=left width=71%><br>
Result</th>
</tr>
<tr valign=top>
<td width=29%>SUM<b>(</b><i>expression</i><b>)</b></td>
<td width=71%>Returns the total of the values in the numeric column.</td>
</tr>
<tr valign=top>
<td width=29%>AVG<b>(</b><i>expression</i><b>)</b></td>
<td width=71%>Returns the average of the values in the numeric column.</td>
</tr>
<tr valign=top>
<td width=29%>COUNT<b>(</b><i>expression</i><b>)</b></td>
<td width=71%>Returns the number of non-null values in the column.</td>
</tr>
<tr valign=top>
<td width=29%>MAX<b>(</b><i>expression</i><b>)</b></td>
<td width=71%>Returns the highest value in the column.</td>
</tr>
<tr valign=top>
<td width=29%>MIN<b>(</b><i>expression</i><b>)</b></td>
<td width=71%>Returns the lowest value in the column.</td>
</tr>
</table><br>

</dd>
<dt>
BY</dt>
<dd>
Indicates that row aggregate function values are to be calculated for subgroups. Whenever the value of the BY item changes, row aggregate function values are generated. If you use BY, you must use ORDER BY. Listing more than one item after BY breaks a group into subgroups and applies a function at each group level.</dd>
<dt>
<i>expression</i></dt>
<dd>
Follows the rules for expressions as defined in the Expressions topic; however, when used as a row aggregate function, an <i>expression</i> is usually the name of a column. The <i>expression</i> must be enclosed in parentheses. Only numeric <i>expressions </i>(<i>expressions</i> that result in a <i>decimal</i>, <i>float</i>, <i>int</i>, <i>money</i>, <i>numeric</i>, <i>real</i>, <i>smallint</i>, <i>smallmoney</i>, or <i>tinyint </i>datatype)<i> </i>can be used with SUM and AVG. One COMPUTE clause can apply the same function to several columns or several functions to one column. When using more than one function, use more than one COMPUTE clause.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The row aggregate functions make it possible to retrieve detail rows and summary rows with one statement. The aggregate functions, in contrast, ordinarily produce a single value for all selected rows in the table or for each group, and these summary values are shown as new columns. </p>
<p>
The columns in the COMPUTE clause must appear in the select list.</p>
<p>
You can't use SELECT INTO in the same statement as a COMPUTE clause because statements that include COMPUTE generate tables that include the summary results, which are not stored in the database.</p>
<p>
If you use COMPUTE BY, you must also use an ORDER BY clause. The columns listed after COMPUTE BY must be identical to or a subset of those listed after ORDER BY, and they must be in the same left-to-right order, start with the same <i>expression</i>, and not skip any <i>expressions</i>. For example, if the ORDER BY clause is:</p>
<pre>ORDER BY a, b, c
</pre>
<p>
The COMPUTE BY clause can be any or all of these:</p>
<pre>COMPUTE BY a, b, c
COMPUTE BY a, b
COMPUTE BY a
</pre>
<p>
You must use a column name or an expression in the ORDER BY clause.</p>
<p>
The COMPUTE keyword can be used without BY to generate grand totals, grand counts, and so on. ORDER BY is optional if you use the COMPUTE keyword without BY.</p>
<p>
When you sum or average integer data, SQL Server treats the result as an <i>int</i> value, even if the datatype of the column is <i>smallint</i> or <i>tinyint</i>.</p>
<p>
<b>Note</b>  To reduce the possibility of overflow errors in DB-Library programs, make all variable declarations for the results of averages or sums type <i>int</i>. </p>
<p>
In a SELECT statement with a COMPUTE clause, the order of columns in the select list overrides the order of the aggregate functions in the COMPUTE clause. DB-Library programmers must be aware of this order requirement to put the aggregate function results in the correct place. For example:</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<td colspan=4 width=100%><pre>SELECT a, b, c</pre>
</td>
</tr>
<tr valign=top>
<td colspan=4 width=100%><pre>FROM test</pre>
</td>
</tr>
<tr valign=top>
<td colspan=4 width=100%><pre>COMPUTE SUM(c), MAX(b), MIN(a)</pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre>a</pre>
</td>
<td width=23%><pre>b</pre>
</td>
<td width=20%><pre>c</pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre>---------</pre>
</td>
<td width=23%><pre>----------</pre>
</td>
<td width=20%><pre>----------</pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre>1</pre>
</td>
<td width=23%><pre>2</pre>
</td>
<td width=20%><pre>3</pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre>3</pre>
</td>
<td width=23%><pre>2</pre>
</td>
<td width=20%><pre>1</pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre>sum</pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre>=======</pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre>4</pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre>max</pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre>=======</pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre>2</pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre>min</pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre>=========</pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre>1</pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=16%><pre></pre>
</td>
<td width=23%><pre></pre>
</td>
<td width=20%><pre></pre>
</td>
<td width=41%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=4 width=100%><pre>(3 rows affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Aggregates and Row Aggregates</h5>
<p>
The following two examples illustrate the differences between aggregate functions and row aggregate functions. The first shows aggregate functions giving summary data only, and the second shows row aggregate functions giving detail and summary data.</p>
<h5>Aggregate Functions</h5>
<pre>SELECT type, SUM(price), SUM(advance)
    FROM titles
        WHERE type LIKE '%cook'
            GROUP BY type</pre>
<table cellspacing=4 cols=4>
<tr valign=top>
<td width=25%><pre>type</pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=22%><pre></pre>
</td>
<td width=32%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>----------</pre>
</td>
<td width=21%><pre>----------</pre>
</td>
<td width=22%><pre>------------</pre>
</td>
<td width=32%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>mod_cook</pre>
</td>
<td width=21%><pre>22.98</pre>
</td>
<td width=22%><pre>15,000.00</pre>
</td>
<td width=32%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>trad_cook</pre>
</td>
<td width=21%><pre>47.89</pre>
</td>
<td width=22%><pre>19,000.00</pre>
</td>
<td width=32%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=21%><pre></pre>
</td>
<td width=22%><pre></pre>
</td>
<td width=32%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=4 width=100%><pre>(2 rows affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<h5>Row Aggregates</h5>
<pre>SELECT type, price, advance
    FROM titles
        WHERE type LIKE '%cook'
            ORDER BY type
            COMPUTE SUM(price), SUM(advance) BY type</pre>
<table cellspacing=4 cols=4>
<tr valign=top>
<td width=25%><pre>type</pre>
</td>
<td width=26%><pre>price</pre>
</td>
<td width=28%><pre>advance</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>----------</pre>
</td>
<td width=26%><pre>------------</pre>
</td>
<td width=28%><pre>------------</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>mod_cook</pre>
</td>
<td width=26%><pre>2.99</pre>
</td>
<td width=28%><pre>15,000.00</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>mod_cook</pre>
</td>
<td width=26%><pre>19.99</pre>
</td>
<td width=28%><pre>0.00</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre>sum</pre>
</td>
<td width=28%><pre>sum</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre>------------</pre>
</td>
<td width=28%><pre>------------</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre>22.98</pre>
</td>
<td width=28%><pre>15,000.00</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre></pre>
</td>
<td width=28%><pre></pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>type</pre>
</td>
<td width=26%><pre>price</pre>
</td>
<td width=28%><pre>advance</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>----------</pre>
</td>
<td width=26%><pre>------------</pre>
</td>
<td width=28%><pre>------------</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>trad_cook</pre>
</td>
<td width=26%><pre>20.95</pre>
</td>
<td width=28%><pre>7,000.00</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>trad_cook</pre>
</td>
<td width=26%><pre>14.99</pre>
</td>
<td width=28%><pre>8,000.00</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre>trad_cook</pre>
</td>
<td width=26%><pre>11.95</pre>
</td>
<td width=28%><pre>4,000.00</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre>sum</pre>
</td>
<td width=28%><pre>sum</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre>------------</pre>
</td>
<td width=28%><pre>------------</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre>47.89</pre>
</td>
<td width=28%><pre>19,000.00</pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=25%><pre></pre>
</td>
<td width=26%><pre></pre>
</td>
<td width=28%><pre></pre>
</td>
<td width=21%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=4 width=100%><pre>(7 rows affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Group Totals with COMPUTE BY</h5>
<p>
This example calculates the sum of the all prices (for prices over $10) for each type of cookbook, in order first by type of book and then by price of book.</p>
<pre>SELECT type, price
    FROM titles
        WHERE price &gt; $10
        AND type LIKE '%cook'
            ORDER BY type, price
            COMPUTE SUM(price) BY type</pre>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=35%><pre>type</pre>
</td>
<td width=30%><pre>price</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre>-----------</pre>
</td>
<td width=30%><pre>----------</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre>mod_cook</pre>
</td>
<td width=30%><pre>19.99</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre>sum</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre>----------</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre>19.99</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre></pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre>type</pre>
</td>
<td width=30%><pre>price</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre>------------</pre>
</td>
<td width=30%><pre>----------</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre>trad_cook</pre>
</td>
<td width=30%><pre>11.95</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre>trad_cook</pre>
</td>
<td width=30%><pre>14.99</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre>trad_cook</pre>
</td>
<td width=30%><pre>20.95</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre>sum</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre>----------</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre>47.89</pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre></pre>
</td>
<td width=30%><pre></pre>
</td>
<td width=35%><pre></pre>
</td>
</tr>
<tr valign=top>
<td colspan=3 width=100%><pre>(6 rows affected)</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

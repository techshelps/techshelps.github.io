<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>String Functions</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_string_functions_tsql09"></a>String Functions </h2>
<p>
String functions perform various operations on binary data, character data, and expressions. String functions can be used anywhere an expression<i> </i>is allowed to return values commonly needed for operations on character data and string concatenation. Various system functions, such as COL_LENGTH and DATALENGTH, can also prove useful. For details, see "System Functions," later in this topic.</p>
<p>
With the exception of the PATINDEX function, string functions can be used only on <i>char</i>, <i>varchar</i>, <i>binary</i>, and <i>varbinary</i> datatypes, plus those datatypes that convert implicitly to <i>char</i> or <i>varchar</i>. The PATINDEX function can be used on <i>char</i>, <i>varchar</i>, and <i>text</i> datatypes. For functions specifically designed to manipulate <i>text </i>and <i>image </i>data, see the <i>text </i>and <i>image </i>Manipulation topic. </p>
<h4>Syntax</h4>
<p>
<i>function_name</i><b>(</b><i>parameters</i><b>)</b></p>
<p>
where
<dl>
<dt>
<i>function_name</i></dt>
<dd>
Specifies a string function. 
<p>
These are the string functions:

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=21%></th>
<th align=left width=28%></th>
<th align=left width=51%></th>
</tr>
<tr valign=top>
<th align=left width=21%></th>
<th align=left width=28%></th>
<th align=left width=51%></th>
</tr>
<tr valign=top>
<th align=left width=21%>Function</th>
<th align=left width=28%>Parameters</th>
<th align=left width=51%>Result</th>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=28%><b>(</b><i>expression</i>  <i>expression</i><b>)</b></td>
<td width=51%>Concatenates two character strings, binary strings, column names, or a combination of them. Enclose character strings in quotation marks. When concatenating non-character, non-binary expressions, always use the CONVERT function.</td>
</tr>
<tr valign=top>
<td width=21%>ASCII</td>
<td width=28%><b>(</b><i>char_expr</i><b>)</b></td>
<td width=51%>Indicates the ASCII code value of the leftmost character of a character expression.</td>
</tr>
<tr valign=top>
<td width=21%>CHAR</td>
<td width=28%><b>(</b><i>integer_expr</i><b>)</b></td>
<td width=51%>Converts a character from an ASCII code. The ASCII code should be a value from 0 through 255; otherwise, NULL is returned.</td>
</tr>
<tr valign=top>
<td width=21%>CHARINDEX</td>
<td width=28%><b>('</b><i>pattern</i><b>',</b> <i>expression</i><b>)</b></td>
<td width=51%>Returns the starting position of the specified <i>pattern</i>. A <i>pattern</i> is a <i>char_expr</i>. The second parameter is an <i>expression</i>, usually a column name, in which SQL Server searches for the <i>pattern</i>. </td>
</tr>
<tr valign=top>
<td width=21%>DIFFERENCE</td>
<td width=28%><b>(</b><i>char_expr1</i><b>,</b> <i>char_expr2</i><b>)</b></td>
<td width=51%>Shows the difference between the values of two character expressions as returned by the SOUNDEX function.<p>
The DIFFERENCE function compares two strings and evaluates the similarity between them, returning a value from 0 through 4. The value 4 is the best match, meaning that the SOUNDEX values of <i>char_expr1</i> and <i>char_expr2</i> are identical.</p>
<p>
If the first character of SOUNDEX(<i>char_expr1</i>) is identical to the first character of SOUNDEX(<i>char_expr2</i>), then the starting DIFFERENCE value is 1; otherwise, it is 0. Then each numeric character of <i>char_expr2</i> is compared to the numeric characters of <i>char_expr1</i>, adding 1 to the DIFFERENCE value if a match is found.</p>
</td>
</tr>
<tr valign=top>
<td width=21%>LOWER</td>
<td width=28%><b>(</b><i>char_expr</i><b>)</b></td>
<td width=51%>Converts uppercase character data to lowercase.</td>
</tr>
<tr valign=top>
<td width=21%>LTRIM</td>
<td width=28%><b>(</b><i>char_expr</i><b>)</b></td>
<td width=51%>Removes leading blanks.</td>
</tr>
<tr valign=top>
<td width=21%>PATINDEX</td>
<td width=28%><b>('</b><i>%pattern%</i><b>',</b> <i>expression</i><b>)</b></td>
<td width=51%>Returns the starting position of the first occurrence of <i>pattern</i> in the specified expression, or zeros if the pattern is not found. You can use wildcard characters in <i>pattern</i>, as long as the wildcard character % precedes and follows <i>pattern</i> (except when searching for first or last characters). The <i>expression</i> is usually a column name. You can use this function on <i>text</i>, <i>char</i>, and <i>varchar</i> data.</td>
</tr>
<tr valign=top>
<td width=21%>REPLICATE</td>
<td width=28%><b>(</b><i>char_expr</i><b>,</b> <i>integer_expr</i><b>)</b></td>
<td width=51%>Repeats a character expression a specified number of times. If <i>integer_expr</i> is negative, a null string is returned.</td>
</tr>
<tr valign=top>
<td width=21%>REVERSE</td>
<td width=28%><b>(</b><i>char_expr</i><b>)</b></td>
<td width=51%>Returns the reverse of <i>char_expr</i>. This function takes a constant, variable, or column as its parameter.</td>
</tr>
<tr valign=top>
<td width=21%>RIGHT</td>
<td width=28%><b>(</b><i>char_expr</i><b>,</b> <i>integer_expr</i><b>)</b></td>
<td width=51%>Part of a character string starting <i>integer_expr</i> characters from the right. If <i>integer_expr</i> is negative, a null string is returned. </td>
</tr>
<tr valign=top>
<td width=21%>RTRIM</td>
<td width=28%><b>(</b><i>char_expr</i><b>)</b></td>
<td width=51%>Removes trailing blanks.</td>
</tr>
<tr valign=top>
<td width=21%>SOUNDEX</td>
<td width=28%><b>(</b><i>char_expr</i><b>)</b></td>
<td width=51%>Returns a four-digit (SOUNDEX) code to evaluate the similarity of two strings.<p>
The SOUNDEX function converts an alpha string to a four-digit code to find similar-sounding words or names. The first character of the code is the first character of <i>char_expr</i> and the second through fourth characters of the code are numbers. Vowels in <i>char_expr</i> are ignored unless they are the first letter of the string. </p>
</td>
</tr>
<tr valign=top>
<td width=21%>SPACE</td>
<td width=28%><b>(</b><i>integer_expr</i><b>)</b></td>
<td width=51%>Returns a string of repeated spaces. The number of spaces is equal to <i>integer_expr</i>. If <i>integer_expr</i> is negative, a null string is returned.</td>
</tr>
<tr valign=top>
<td width=21%>STR</td>
<td width=28%><b>(</b><i>float_expr</i> [<b>,</b> <i>length</i> <br>
[<b>,</b> <i>decimal</i>]]<b>)</b> </td>
<td width=51%>Returns character data converted from numeric data. The <i>length</i> is the total length, including decimal point, sign, digits, and spaces. The <i>decimal</i> value is the number of spaces to the right of the decimal point. Both <i>length</i> and <i>decimal</i> are optional. The default for <i>length</i> is 10.<p>
Do not use a function or subquery as the <i>float_expr</i> in the STR function. A short <i>float_expr</i> is right-justified in the specified length, and a long <i>float_expr</i> is truncated to the specified number of decimal places.</p>
</td>
</tr>
<tr valign=top>
<td width=21%>STUFF</td>
<td width=28%><b>(</b><i>char_expr1</i><b>,</b> <i>start</i><b>,</b> <i>length</i><b>,</b> <i>char_expr2</i><b>)</b></td>
<td width=51%>Deletes <i>length</i> characters from <i>char_expr1</i> at <i>start</i> and then inserts <i>char_expr2</i> into <i>char_expr1</i> at <i>start</i>. <p>
If the <i>start</i> position or the <i>length</i> is negative, a null string is returned. If the <i>start</i> position is longer than <i>char_expr1</i>, a null string is returned. If the <i>length</i> to delete is longer than <i>char_expr1</i>, it is deleted to the first character in <i>char_expr1</i>. </p>
</td>
</tr>
<tr valign=top>
<td width=21%>SUBSTRING</td>
<td width=28%><b>(</b><i>expression</i><b>,</b> <i>start</i><b>,</b> <i>length</i><b>)</b></td>
<td width=51%>Returns part of a character or binary string. The first parameter can be a character or binary string, a column name, or an expression that includes a column name. (Do not use expressions that include functions.) The second parameter specifies where the substring begins. The third parameter specifies the number of characters in the substring. </td>
</tr>
<tr valign=top>
<td width=21%>UPPER</td>
<td width=28%><b>(</b><i>char_expr</i><b>)</b></td>
<td width=51%>Converts lowercase character data to uppercase.</td>
</tr>
</table><br>


<p>
where

<dl>
<dt>
<i>char_expr</i></dt>
<dd>
Is an alphanumeric expression of character data.</dd>
<dt>
<i>integer_expr</i></dt>
<dd>
Is a positive whole number. </dd>
<dt>
<i>float_expr</i></dt>
<dd>
Is an approximate numeric (<i>float</i>) datatype with a decimal point.
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
String functions can be nested.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;String Concatenation</h5>
<p>
Creating one result from multiple character columns can be achieved through string concatenation. This example creates a single column (under the column heading <i>Name</i>) in order of last name followed by first name with a comma after the last name in the <i>authors</i> table:</p>
<pre>SELECT Name = (au_lname + ', ' + au_fname)
    FROM authors
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;SUBSTRING Function</h5>
<p>
This example shows how to return only a portion of a character string. From the <i>authors</i> table, this query will return the last name in one column with only the first initial in the second column.</p>
<pre>SELECT au_lname, SUBSTRING(au_fname, 1, 1)
    FROM authors
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Combining Functions and String Concatenation</h5>
<p>
This example creates a single column (under the column heading <i>Name</i>) in order of last name, first initial with a comma after the last name in the <i>authors</i> table.</p>
<pre>SELECT Name = (au_lname + ', ' + SUBSTRING(au_fname, 1, 1) + '.')
    FROM authors
</pre>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;Combining Functions and Concatenation in Any Order</h5>
<p>
This example displays the first six characters of the concatenation of each <i>pub_id</i> and <i>title_id</i>. It displays all four characters of the <i>pub_id</i> and the first two characters of the <i>title_id.</i></p>
<pre>SELECT SUBSTRING ((pub_id + title_id), 1, 6)
    FROM titles
</pre>
<h5>E.&nbsp;&nbsp;&nbsp;&nbsp;CHARINDEX Function</h5>
<p>
This example returns the position at which the pattern <b>'</b>wonderful<b>'</b> begins in the <i>notes</i> column of <i>titles</i>:</p>
<pre>SELECT CHARINDEX('wonderful', notes)
    FROM titles
        WHERE title_id = 'TC3218'
</pre>
<h5>F.&nbsp;&nbsp;&nbsp;&nbsp;STUFF Function</h5>
<p>
This example returns a character string created by deleting three characters from the first string (<b>'</b>abcdef<b>'</b>) starting at position 2 (at <b>'</b>b<b>'</b>) and inserts the second string at the deletion point. The resulting string is <b>'</b>aijklmnef<b>'</b>:</p>
<pre>SELECT STUFF('abcdef', 2, 3, 'ijklmn')</pre>
<h5>G.&nbsp;&nbsp;&nbsp;&nbsp;SOUNDEX and DIFFERENCE Functions</h5>
<p>
This example shows the SOUNDEX function and the related DIFFERENCE function. In the first example, the standard SOUNDEX values are returned for all consonants. Returning the SOUNDEX for <b>'</b>Smith<b>'</b> and <b>'</b>Smythe<b>'</b> will return the same SOUNDEX result because all vowels (and y) are not included.</p>
<pre>SELECT SOUNDEX ('Smith'), SOUNDEX ('Smythe')
</pre>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=49%><pre>-----</pre>
</td>
<td width=51%><pre>-----</pre>
</td>
</tr>
<tr valign=top>
<td width=49%><pre>S530</pre>
</td>
<td width=51%><pre>S530</pre>
</td>
</tr>
</table><br>
<pre></pre>
<p>
The DIFFERENCE function compares the difference of the SOUNDEX pattern results. The first example shows two strings that differ only in vowels. The difference returned will be 4 (lowest possible difference).</p>
<pre>SELECT DIFFERENCE('Smithers', 'Smothers')
</pre>
<p>
In this example, the strings differ in consonants, so the difference returned will be 2 (higher difference).</p>
<pre>SELECT DIFFERENCE('Smothers', 'Brothers')
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE PROCEDURE Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_create_procedure_statement"></a>CREATE PROCEDURE Statement </h1>
<p>
Creates a stored procedure (a precompiled collection of SQL statements) that can take and/or return user-supplied parameters. Stored procedures help to increase performance and consistency when performing repetitive tasks because stored procedures are compiled the first time they are executed. When executed again, subsequent run time is much shorter than for the equivalent set of stand-alone statements. Procedures can be created for permanent use or for temporary use within a user's session (local temporary procedure) or for temporary use within all user's sessions (global temporary procedure).</p>
<h4>Syntax</h4>
<p>
CREATE PROCedure [<i>owner</i><b>.</b>]<i>procedure_name</i>[<b>;</b><i>number</i>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>(</b><i>parameter1 </i>[<b>,</b> <i>parameter2</i>]...[<i>parameter255</i>]<b>)</b>]<br>
[{FOR REPLICATION} | {WITH RECOMPILE}<br>
&nbsp;&nbsp;&nbsp;&nbsp;[{[WITH] | [<b>,</b>]} ENCRYPTION]]<br>
AS <i>sql_statements</i></p>
<p>
where
<dl>
<dt>
<i>procedure_name</i></dt>
<dd>
Is the name of the new stored procedure. Procedure names must conform to the rules for identifiers and must be unique within the database and its owner.
<p>
You can create local or global temporary procedures by preceding the <i>procedure_name</i> with a single pound sign (#<i>table_name</i>) for local temporary procedures and a double pound sign (##<i>table_name</i>) for global temporary procedures. The complete name, including # or ##, cannot exceed 20 characters. For more information, see "Temporary Stored Procedures," later in this topic. 

<p>
Stored procedures can also be created for auto execution. Auto execution stored procedures are run automatically when SQL Server starts. For more information, see "Auto Execution Stored Procedures," later in this topic. 
</dd>
<dt>
<b>;</b><i>number</i></dt>
<dd>
Is an optional integer used to group procedures of the same name so that they can be dropped together with a single <a href="tsql07_1gj8.htm">DROP PROCEDURE statement</a>. When grouping is used with a procedure whose name was created using quoted identifiers, the number should not be included as part of the identifier; use double quotation marks only around the <i>procedure_name</i>. Procedures used in the same application are often grouped this way. For example, the procedures used with the application <i>orders</i> might be named <b>orderproc</b>;1, <b>orderproc</b>;2, and so on. The statement DROP PROCEDURE <b>orderproc</b> drops the entire group. Once procedures have been grouped, individual procedures within the group cannot be dropped. </dd>
<dt>
<i>parameter </i><b>=</b></dt>
<dd>
<i>@parameter_name</i> <i>datatype</i> [<b>=</b> <i>default</i>] [OUTPUT]
<dl>
<dt>
<i>parameter_name</i></dt>
<dd>
Specifies a parameter in the procedure. One or more parameters can optionally be declared in a CREATE PROCEDURE statement. The value of each declared parameter must be supplied by the user when the procedure is executed (unless a <i>default</i> for the parameter has been defined). A stored procedure can have a maximum of 255 parameters.
<p>
The first character of a parameter name must be the "at" symbol (@) and conform to the rules for identifiers. Parameters are local to the procedure; the same parameter names can be used in other procedures. By default, parameters can take the place only of constants; they cannot be used in place of table names, column names, or the names of other database objects. For more information, see the EXECUTE statement.
</dd>
<dt>
<i>datatype</i></dt>
<dd>
Specifies the datatype of the parameter. All datatypes except <i>image</i> are supported. For a list of SQL Server - supplied datatypes and their syntax, see the Datatypes topic.</dd>
<dt>
<i>default</i></dt>
<dd>
Specifies a default value for the parameter. If a default is defined, a user can execute the procedure without specifying a value for that parameter. The default must be a constant. It can include wildcard characters (%, _, [], and [^]) if the procedure uses the parameter with the LIKE keyword. The default can be NULL. The procedure definition can specify that some action be taken if the parameter value is NULL.</dd>
<dt>
OUTPUT</dt>
<dd>
Indicates that the parameter is a return parameter. The value of this option can be returned to the <a href="tsql08_8dx0.htm">EXECUTE statement</a> that called the procedure. Use return parameters to return information to the calling procedure. <i>Text</i> parameters cannot be used as OUTPUT parameters.</dd>
</dl>
</dd>
<dt>
FOR REPLICATION</dt>
<dd>
Is mutually exclusive of the WITH RECOMPILE option. Stored procedures created for replication cannot be executed on the subscribing server. FOR REPLICATION is  used when creating a filter stored procedure that will be executed only by replication.</dd>
<dt>
RECOMPILE</dt>
<dd>
Indicates that SQL Server does not cache a plan for this procedure and the procedure is recompiled each time it is executed. Use this optional clause when you expect that the parameters you supply to the procedure won't be typical (that is, they won't result in the same optimal plan each time the procedure is executed). This can be beneficial when using wildcards in passing parameters because the distribution may be drastically different depending on the number of matches with the wildcard pattern.

<p>
<b>Note</b>  If any constraints are added or altered, any stored procedures that reference the table will be automatically recompiled. 

</dd>
<dt>
ENCRYPTION</dt>
<dd>
Encrypts the <i>syscomments</i> table entry that contains the text of the CREATE PROCEDURE statement. 

<p>
<b>Important</b>  When a database is upgraded, <i>syscomments</i> entries are required in order to re-create procedures. Use encryption only when absolutely necessary; never delete entries from <i>syscomments</i>.

</dd>
<dt>
AS <i>sql_statements</i></dt>
<dd>
Specifies the actions the procedure is to take. Any number and type of SQL statements can be included in the procedure; however, there are some general limitations. For more information, see "<i>sql_statement</i> Limitations," later in this topic.
</dd>
</dl>
<h4>Remarks</h4>
<p>
When defining a stored procedure, you can create a stored procedure only in the current database (except for temporary procedures, which are always created in <i>tempdb</i>), and the CREATE PROCEDURE statement cannot be combined with other SQL statements in a single batch. </p>
<p>
Stored procedures can use nesting, when one stored procedure calls another. The nesting level is incremented when the called procedure starts execution, and it is decremented when the called procedure finishes execution. Exceeding the maximum of 16 levels of nesting causes the whole calling procedure chain to fail. The current nesting level is stored in the @@NESTLEVEL global variable.</p>
<p>
The maximum amount of text in a stored procedure is 65,025 characters. This limit is imposed because the text is stored in the <a href="tsql25_2y2b.htm"><i>syscomments</i></a> system tables, where each procedure can occupy 255 rows of 255 bytes each (255 * 255 <b>=</b> 65,025).</p>
<p>
To estimate the size of a compiled stored procedure, use DBCC MEMUSAGE. For details, see the DBCC statement. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mathematical Functions</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mathematical_functions_tsql09"></a>Mathematical Functions</h2>
<p>
Mathematical functions return values commonly needed for operations on mathematical data. Mathematical function names are not keywords.</p>
<h4>Syntax</h4>
<p>
<i>function_name</i><b>(</b><i>parameters</i><b>)</b></p>
<p>
where
<dl>
<dt>
<i>function_name</i></dt>
<dd>
Specifies a mathematical function. 
<p>
These are the mathematical functions:

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=17%></th>
<th align=left width=29%></th>
<th align=left width=54%></th>
</tr>
<tr valign=top>
<th align=left width=17%></th>
<th align=left width=29%></th>
<th align=left width=54%></th>
</tr>
<tr valign=top>
<th align=left width=17%>Function</th>
<th align=left width=29%>Parameters</th>
<th align=left width=54%>Result</th>
</tr>
<tr valign=top>
<td width=17%>ABS</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>)</b></td>
<td width=54%>Absolute value of the numeric expression. Results returned are of the same type as <i>numeric_expr</i>.</td>
</tr>
<tr valign=top>
<td width=17%>ACOS</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Angle (in radians) whose cosine is the specified approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>ASIN</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Angle (in radians) whose sine is the specified approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>ATAN</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Angle (in radians) whose tangent is the specified approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>ATN2</td>
<td width=29%><b>(</b><i>float_expr1</i><b>,</b> <i>float_expr2</i><b>)</b></td>
<td width=54%>Angle (in radians) whose tangent is (<i>float_expr1/float_expr2</i>) between two approximate numeric (<i>float</i>) expressions.</td>
</tr>
<tr valign=top>
<td width=17%>CEILING</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>)</b></td>
<td width=54%>Smallest integer greater than or equal to the numeric expression. Result returned is the integer portion of the same type as <i>numeric_expr</i>.</td>
</tr>
<tr valign=top>
<td width=17%>COS</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Trigonometric cosine of the specified angle (in radians) in an approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>COT</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Trigonometric cotangent of the specified angle (in radians) in an approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>DEGREES</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>)</b></td>
<td width=54%>Degrees converted from radians of the numeric expression. Results are of the same type as <i>numeric_expr</i>.</td>
</tr>
<tr valign=top>
<td width=17%>EXP</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Exponential value of the specified approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>FLOOR</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>)</b></td>
<td width=54%>Largest integer less than or equal to the specified numeric expression. Result returned is the integer portion of the same type as <i>numeric_expr</i>.</td>
</tr>
<tr valign=top>
<td width=17%>LOG</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Natural logarithm of the specified approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>LOG10</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Base-10 logarithm of the specified approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>PI</td>
<td width=29%><b>(</b> <b>)</b></td>
<td width=54%>Constant value of 3.141592653589793.</td>
</tr>
<tr valign=top>
<td width=17%>POWER</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>,</b> <i>y</i><b>)</b></td>
<td width=54%>Value of numeric expression to the power of <i>y</i>,<i> </i>where <i>y </i>is a numeric datatype (<i>decimal</i>, <i>float</i>, <i>int</i>, <i>money</i>, <i>numeric</i>, <i>real</i>, <i>smallint</i>, <i>smallmoney</i>, or <i>tinyint</i>). Result is of the same type as <i>numeric_expr</i>.</td>
</tr>
<tr valign=top>
<td width=17%>RADIANS</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>)</b></td>
<td width=54%>Radians converted from degrees of the numeric expression. Result is of the same type as <i>numeric_expr</i>.</td>
</tr>
<tr valign=top>
<td width=17%>RAND</td>
<td width=29%><b>(</b>[<i>seed</i>]<b>)</b></td>
<td width=54%>Random approximate numeric (<i>float</i>) value between 0 and 1, optionally specifying an integer expression (<i>tinyint</i>, <i>smallint</i>, or <i>int</i>) as the <i>seed</i>.</td>
</tr>
<tr valign=top>
<td width=17%>ROUND</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>,</b> <i>length</i><b>)</b></td>
<td width=54%>Numeric expression rounded off to the <i>length </i>(or precision) specified as an integer expression (<i>tinyint</i>, <i>smallint</i>, or <i>int</i>). Result is of the same type as <i>numeric_expr</i>.<p>
The ROUND function always returns a value even if the <i>length </i>is illegal. If the specified <i>length </i>is positive and longer than the digits after the decimal point, 0 is added after the fraction digits.</p>
<p>
If the <i>length </i>is negative and larger than or equal to the digits before the decimal point, ROUND returns 0.00.</p>
</td>
</tr>
<tr valign=top>
<td width=17%>SIGN</td>
<td width=29%><b>(</b><i>numeric_expr</i><b>)</b></td>
<td width=54%>Returns the positive (+1), zero (0), or negative (-1) sign of the numeric expression. Result is of the same type as <i>numeric_expr</i>.</td>
</tr>
<tr valign=top>
<td width=17%>SIN</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Trigonometric sine of the specified angle (measured in radians) in an approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>SQRT</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Square root of the specified approximate numeric (<i>float</i>) expression.</td>
</tr>
<tr valign=top>
<td width=17%>TAN</td>
<td width=29%><b>(</b><i>float_expr</i><b>)</b></td>
<td width=54%>Trigonometric tangent of the specified angle (measured in radians) in an approximate numeric (<i>float</i>) expression.</td>
</tr>
</table><br>


<p>
where

<dl>
<dt>
<i>numeric_expr</i></dt>
<dd>
Is an <i>expression </i>of the <i>decimal</i>, <i>float</i>, <i>int</i>, <i>money</i>, <i>numeric</i>, <i>real</i>, <i>smallint</i>, <i>smallmoney</i>, or <i>tinyint</i> datatype. </dd>
<dt>
<i>float_expr</i></dt>
<dd>
Is an <i>expression </i>of the <i>float</i> datatype. </dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
Internal conversion to <i>float</i> can cause loss of precision if the <i>money</i> datatype is used.</p>
<p>
Error traps are provided to handle domain or range errors of these functions. A user can set the options ARITHABORT, which terminates the query, or ARITHIGNORE, which returns NULL, when a domain error occurs. No warning message is displayed. If neither of these options is set, SQL Server returns NULL and returns a warning message after the query is executed.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;FLOOR Function</h5>
<p>
This example shows positive numeric, negative numeric, and money values with the FLOOR function. The result returned is the integer portion of the same datatype as the expression. Note that the <i>money </i>datatype always returns a two-place decimal value but no dollar sign ($).</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=47%><pre>Statement</pre>
</td>
<td width=53%><pre>Result</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre></pre>
</td>
<td width=53%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT FLOOR(123.45)</pre>
</td>
<td width=53%><pre>123</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT FLOOR(-123.45)</pre>
</td>
<td width=53%><pre>-124</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT FLOOR($123.45)</pre>
</td>
<td width=53%><pre>123.00</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre></pre>
</td>
<td width=53%><pre></pre>
</td>
</tr>
</table><br>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;CEILING Function</h5>
<p>
This example shows positive numeric, negative numeric, and money values with the CEILING function. The result returned is the integer portion of the same datatype as the expression. Note that the <i>money </i>datatype always returns a two-place decimal value but no dollar sign ($).</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=47%><pre>Statement</pre>
</td>
<td width=53%><pre>Result</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre></pre>
</td>
<td width=53%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT CEILING(123.45)</pre>
</td>
<td width=53%><pre>124</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT CEILING(-123.45)</pre>
</td>
<td width=53%><pre>-123</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT CEILING($123.45)</pre>
</td>
<td width=53%><pre>124.00</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre></pre>
</td>
<td width=53%><pre></pre>
</td>
</tr>
</table><br>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;The ROUND Function</h5>
<p>
This example shows rounding and approximations. The result returned is always the same datatype as the expression. Note that the <i>money </i>datatype always returns a two-place decimal value but no dollar sign ($).</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=47%><pre>Statement</pre>
</td>
<td width=53%><pre>Result</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre></pre>
</td>
<td width=53%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT ROUND(123.4545, 2)</pre>
</td>
<td width=53%><pre>123.4500</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre>SELECT ROUND(123.45, -2)</pre>
</td>
<td width=53%><pre>100.00</pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre></pre>
</td>
<td width=53%><pre></pre>
</td>
</tr>
</table><br>
<p>
With the ROUND function, the last digit is always an estimate:</p>
<pre>ROUND(123.9994, 3) = 123.9990
</pre>
<p>
and</p>
<pre>ROUND(123.9995, 3) = 124.0000
</pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

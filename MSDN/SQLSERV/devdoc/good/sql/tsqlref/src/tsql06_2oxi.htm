<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Datatypes</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_datatypes_tsql06"></a>Datatypes </h1>
<p>
Datatypes specify the data characteristics of columns, stored-procedure parameters, and local variables. </p>
<p>
SQL Server supplies various system datatypes, which can be categorized by the type of data stored within the datatype. In addition to system-supplied datatypes, SQL Server allows user-defined datatypes, which are based on the system datatypes. For details about user-defined datatypes, see the <a href="tsql18_2jxh.htm"><b>sp_addtype </b>system stored procedure</a>.</p>
<p>
In SQL Server 6.0, all system datatype names are <i>case-insensitive</i>. This change allows table definitions, variable declarations, and procedure parameters to include uppercase or lowercase datatype definitions. Because datatypes are case-insensitive, identical user-defined datatype names with only differing capitalization are not allowed for user-defined datatypes.</p>
<p>
<b>Important</b>  An existing user-defined datatype whose name conflicts with that of another user-defined datatype or system-supplied datatype will no longer be referenced. If an existing user-defined datatype is found within a table, view, or procedure definition and has a conflict, the user-defined datatype will be mapped to the system datatype and no longer reference the user-defined datatype.</p>
<p>
These are the system datatypes: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%></th>
<th align=left width=71%></th>
</tr>
<tr valign=top>
<th align=left width=29%>Type of data</th>
<th align=left width=71%>System-supplied datatype</th>
</tr>
<tr valign=top>
<td width=29%>Binary </td>
<td width=71%><i>binary</i>[<b>(</b><i>n</i><b>)</b>]<br>
<i>varbinary</i>[<b>(</b><i>n</i><b>)</b>]</td>
</tr>
<tr valign=top>
<td width=29%>Character </td>
<td width=71%><i>char</i>[<b>(</b><i>n</i><b>)</b>]<b><br>
</b><i>varchar</i>[<b>(</b><i>n</i><b>)</b>]</td>
</tr>
<tr valign=top>
<td width=29%>Date and time </td>
<td width=71%><i>datetime<br>
smalldatetime</i></td>
</tr>
<tr valign=top>
<td width=29%>Exact numeric </td>
<td width=71%><i>decimal</i>[<b>(</b><i>p</i>[<b>, </b><i>s</i>]<b>)</b>]<i><br>
numeric</i>[<b>(</b><i>p</i>[<b>, </b><i>s</i>]<b>)</b>]</td>
</tr>
<tr valign=top>
<td width=29%>Approximate numeric </td>
<td width=71%><i>float</i>[(<i>n</i>)]<i><br>
real</i></td>
</tr>
<tr valign=top>
<td width=29%>Integer </td>
<td width=71%><i>int<br>
smallint<br>
tinyint</i></td>
</tr>
<tr valign=top>
<td width=29%>Monetary </td>
<td width=71%><i>money<br>
smallmoney</i></td>
</tr>
<tr valign=top>
<td width=29%>Special</td>
<td width=71%><i>bit<br>
timestamp<br>
</i>user-defined datatypes</td>
</tr>
<tr valign=top>
<td width=29%>Text and image </td>
<td width=71%><i>text</i><br>
<i>image</i></td>
</tr>
<tr valign=top>
<td width=29%>Synonyms</td>
<td width=71%><i>binary varying </i>for <i>varbinary<br>
character</i> for <i>char<br>
character</i> for <i>char</i> (1)<br>
<i>character</i> (n) for <i>char</i> (n)<i><br>
character varying</i> (n) for <i>varchar</i> (n) <i><br>
dec </i>for <i>decimal<br>
integer</i> for <i>int<br>
double precision</i> for <i>float<br>
float </i>[(n)] for n = 1–7 for <i>real</i><br>
<i>float</i> [(n)] for n = 8–15 for <i>float</i></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

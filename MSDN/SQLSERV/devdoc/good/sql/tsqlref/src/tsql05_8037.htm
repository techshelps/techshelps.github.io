<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cursors</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cursors"></a>Cursors</h1>
<p>
For more information about how SQL Server 6.5 affects existing database systems, see <a href="../../hydra/tsql/src/addnfeat_6nas.htm">Cursors</a> in the <i>What's New for SQL Server 6.5</i>.</p>
<p>
Server cursors allow individual row operations to be performed on a given results set or on the entire set. In SQL Server 6.0, ANSI SQL cursors are server based. In earlier releases, cursors were provided only through the DB-Library and Open Database Connectivity (ODBC) cursor APIs. </p>
<p>
The addition of cursors to the server provides an efficient way for single-row operations to occur within a given results set. ANSI SQL cursors support only single-row cursors. Each fetch will return only one row from the results set. Server cursors enhance the general use of relational databases by allowing row-level operations when set-oriented operations are impractical. In relational systems, set operations are preferred; cursors provide a powerful complement to set operations. Using cursors, multiple operations can be performed row by row against a results set with or without returning to the original table. In other words, cursors conceptually return a results set based on tables within the database(s). For example, a cursor can be generated to include a list of all user-defined table names within a database. After the cursor has been opened, movement (fetching) through the results set can include multiple operations against each table by passing each table name as a variable. Cursors are extremely powerful when combined with stored procedures and the <a href="tsql08_8dx0.htm">EXECUTE statement</a> (to dynamically build strings). </p>
<p>
SQL Server provides two interfaces for cursor functions. When using cursors in Transact-SQL batches or stored procedures, ANSI-standard SQL syntax has been added for declaring, opening, and fetching from cursors as well as positioned updates and deletes. When using cursors from a DB-Library or ODBC program, the SQL Server 6.0 client libraries transparently call built-in server functions to handle cursors more efficiently.</p>
<p>
This overview shows the statements, in order, used to implement a cursor. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%>Statement</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>DECLARE CURSOR Statement</td>
<td width=52%>Defines a cursor.</td>
</tr>
<tr valign=top>
<td width=48%>OPEN Statement</td>
<td width=52%>Opens a declared cursor.</td>
</tr>
<tr valign=top>
<td width=48%>FETCH Statement</td>
<td width=52%>Retrieves a specific row from the cursor.</td>
</tr>
<tr valign=top>
<td width=48%>CLOSE Statement</td>
<td width=52%>Closes an open cursor.</td>
</tr>
<tr valign=top>
<td width=48%>DEALLOCATE Statement</td>
<td width=52%>Removes the cursor data structures.</td>
</tr>
</table><br>
<p>
In addition to browsing through the cursor results with FETCH, the current row of an open cursor can be modified. The UPDATE statement and the DELETE statement, when used against a cursor, affect only the row on which the cursor is currently positioned. </p>
<h4>Syntax</h4>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;To update the current row:</h5>
<p>
UPDATE <i>table_name</i> <br>
&nbsp;&nbsp;&nbsp;&nbsp;SET <i>column_name1</i> <b>= <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>{<i>expression1</i> | NULL | (<i>select_statement</i>)} <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> <i>column_name2</i> <b>=</b> <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<i>expression2</i> | NULL | (<i>select_statement</i>)}...] <br>
WHERE CURRENT OF <i>cursor_name</i></p>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;To delete the current row:</h5>
<p>
DELETE FROM <i>table_name</i> <br>
WHERE CURRENT OF <i>cursor_name</i></p>
<p>
Modifications made with WHERE CURRENT OF <i>cursor_name</i> affect only the single row on which the cursor is positioned. In the case of a cursor based on a join, only the <i>table_name</i> specified in the DELETE or UPDATE statement is modified. Other tables participating in the cursor are not affected. For complete syntax and more information, see the DELETE and UPDATE statements.</p>
<p>
The following sections discuss each of the statements used to define, access, and close a cursor.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UPDATE Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_update_statement"></a>UPDATE Statement </h1>
<p>
For SQL Server 6.5 information, see <a href="../../hydra/tsql/src/addnfeat_265w.htm">UPDATE Statement</a> in <i>What's New for SQL Server 6.5</i>.</p>
<p>
Changes data in existing rows, either by adding new data or by modifying existing data.</p>
<h4>Syntax</h4>
<p>
UPDATE {<i>table_name</i> |<i> view_name</i>} <br>
SET [{<i>table_name</i> | <i>view_name</i>}] <br>
&nbsp;&nbsp;&nbsp;&nbsp;{<i>column_list </i><br>
&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_list</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_and_column_list</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b>, </b>{<i>column_list2 </i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_list2</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_and_column_list2</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> {<i>column_listN </i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_listN</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_and_column_listN</i>}]]<br>
[WHERE clause]</p>
<p>
where
<dl>
<dt>
<i>table_name | view_name</i> <b>=</b> </dt>
<dd>
[[<i>database_name</i><b>.</b>]<i>owner</i><b>.</b>]{<i>table_name</i> | <i>view_name</i>}
<p>
Specifies the name of the table or view used in the UPDATE statement. If the table or view is not in the current database, use a fully qualified <i>table_name </i>or <i>view_name</i> (<i>database_name</i><b>.</b><i>owner</i><b>.</b><i>object_name</i>). 
</dd>
<dt>
SET</dt>
<dd>
Is a required keyword used to introduce the list of column or variable clauses to be updated. When more than one column name and value pair are listed, separate the names with commas.</dd>
<dt>
<i>column_list</i> <b>=</b> </dt>
<dd>
<i>column_name</i> = {<i>expression</i> | DEFAULT | NULL}</dd>
<dt>
<i>variable_list</i> <b>=</b> </dt>
<dd>
<i>variable_name</i> <b>=</b> {<i>expression</i> | NULL}</dd>
<dt>
<i>column_name</i></dt>
<dd>
Specifies a column from the table (<i>table_name</i>) or view (<i>view_name</i>).</dd>
<dt>
<i>expression</i></dt>
<dd>
Is a <i>column_name</i>, constant, function (aggregate functions are not allowed), or any combination of <i>column_names</i>, constants, and functions connected by an operator(s), or a subquery. For details, see the Expressions topic. </dd>
<dt>
DEFAULT</dt>
<dd>
Inserts the default value for that column. For a column defined with the <i>timestamp </i>datatype, the next value will be inserted. If a default does not exist for the column and the column allows NULLs, NULL will be inserted.
<p>
DEFAULT is not valid for an identity column; columns with the IDENTITY property should not be explicitly updated. For more information, see the CREATE TABLE statement.
</dd>
<dt>
<i>variable_and_column_list</i> <b>=</b> </dt>
<dd>
<i>variable_name</i> <b>=</b> <i>column_name</i> <b>=</b> {<i>expression</i> | NULL}
<p>
Sets local variables as well as columns. This syntax provides the same functionality as an UPDATE statement followed by a SELECT statement in an explicitly defined transaction. Because the combination of selecting and updating is performed during a single UPDATE statement, the transaction is implicit and locks are held for a shorter period of time. For sample syntax, see "Setting Variables and Columns," later in this topic.
</dd>
<dt>
WHERE clause <b>=</b> </dt>
<dd>

<dl>
<dt>
WHERE {<i>search_conditions</i> | CURRENT OF <i>cursor_name</i>}</dt>
</dl>

<p>
Is used to perform a searched update (using <i>search_conditions</i>) or a positioned update (using CURRENT OF <i>cursor_name</i>). When no WHERE clause is given in the UPDATE statement, all rows in the table are modified. 

<dl>
<dt>
<i>search_conditions</i></dt>
<dd>
Specifies the criteria for a searched update. A <i>search_condition</i> can include an expression, a subquery, a constant, and so on. For details on valid <i>search_conditions</i>, see the Search Conditions topic. 
<p>
The IDENTITYCOL keyword can be used in the place of a <i>column_name </i>that has the IDENTITY property. For more information, see the CREATE TABLE statement.
</dd>
<dt>
CURRENT OF <i>cursor_name</i></dt>
<dd>
Specifies the criteria for a positioned update against the current row within the specified <i>cursor_name</i>. Cursor operations affect only the single row on which the cursor is positioned. For details about cursors, see the Cursors topic.
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
Use the UPDATE statement to change single rows, groups of rows, or all rows in a table. UPDATE specifies which row(s) to change and provides the new data. When updating rows, these rules apply:
<ul>
<li>
Updating a column with an empty string (<b>' '</b>) into a <i>varchar</i> or <i>text</i> column inserts a single space. All <i>char</i> columns are right-padded to the defined length.<p>
All trailing spaces are removed from data inserted into <i>varchar</i> columns, except in strings that contain only spaces. These strings are truncated to a single space.
</li>
<li>
If a column being updated violates a constraint or rule, or if it is the wrong datatype, the update does not take place and an error message is returned. <p>
Constraints are defined with the CREATE TABLE or ALTER TABLE statement. Rules are created with the CREATE RULE statement and bound with the <b>sp_bindrule</b> system stored procedure. 
</li>
<li>
Modifying a <i>text</i> column with UPDATE initializes it, assigns a valid text pointer to it, and allocates at least one 2K data page (even if updating the column with NULL). For details about updating <i>text</i> or <i>image</i> fields, see the <a href="tsql27_61bi.htm">Text and Image Manipulation</a> topic.<p>
<b>Note</b>  The UPDATE statement is logged; if you are replacing or modifying large blocks of <i>text</i> or <i>image</i> data, use the WRITETEXT or UPDATETEXT statement instead of the UPDATE statement. The WRITETEXT and UPDATETEXT statements (by default) are not logged. For details, see the Text and Image<i> </i>Manipulation topic. 
</li>
<li>
An UPDATE statement must follow the rules for a batch. For details, see the Batches topic.</li>
</ul>
<h5>Rules for an Update-In-Place</h5>
<p>
In SQL Server 6.0, various techniques are used to determine whether or not an UPDATE can be performed "in-place." When an "update-in-place" occurs, the overall performance of the UPDATE statement is improved because the update is direct (only the row modifications to the page are logged). The decision as to whether or not an update-in-place can occur is based on the following requirements. If these requirements are not true, a deferred update will take place. A deferred update is a delete followed by an insert.
<ul>
<li>
The UPDATE cannot affect the column(s) that participates in a clustered index.</li>
<li>
The table cannot have an UPDATE trigger.</li>
<li>
The table cannot be marked for replication.</li>
<li>
For single-row updates:<ul>
<li>
The updated column(s) can be variable length, but the new total row size must fit on the same page as the old row.</li>
<li>
The updated column(s) can participate in a nonunique nonclustered index only if the index key is a fixed-width column.</li>
<li>
The updated column(s) can participate in a unique nonclustered index only if the index key is fixed-width and the WHERE clause criteria must have an exact match (based on an unique index match¾the index could be the same as the updated column).</li>
<li>
The new row cannot include differing bytes by more than 50 percent of the original row size, and the total number of discontiguous differing bytes is not more than 24.</li>
</ul>
</li>
<li>
For multirow updates:<ul>
<li>
The updated column must be fixed length.</li>
<li>
The updated column cannot participate in a unique nonclustered index.</li>
<li>
The updated column can participate in a nonunique nonclustered index only if the column is a fixed-width column (the index used to find rows cannot be the same as the updated column).</li>
<li>
The table cannot include a column with the <i>timestamp </i>datatype.</li>
</ul>
</li>
</ul>
<p>
To see the update strategy used (DIRECT or DEFERRED), set the SHOWPLAN session setting. For details, see the SET statement.</p>
<h5>Transact-SQL Extension for the UPDATE Statement</h5>
<p>
In addition to the syntax shown earlier, Transact-SQL includes a feature that allows you to select data from a table or tables and update corresponding data in the first named table. The functionality provided is similar to that of using a correlated subquery as a <i>search_condition</i> in the WHERE clause of a standard UPDATE.</p>
<p>
Transact-SQL extension syntax:</p>
<p>
UPDATE {<i>table_name</i> | <i>view_name</i>}<br>
SET [{<i>table_name</i> | <i>view_name</i>}] <br>
&nbsp;&nbsp;&nbsp;&nbsp;{<i>column_list </i><br>
&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_list</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_and_column_list</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b>, </b>{<i>column_list2 </i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_list2</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_and_column_list2</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> {<i>column_listN </i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_listN</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <i>variable_and_column_listN</i>}]]<br>
[FROM {<i>table_name</i> | <i>view_name</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> {<i>table_name</i> | <i>view_name</i>}]...]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[...<b>, </b>{<i>table_name16 </i>|<i> view_name16</i>}]] <br>
[WHERE clause]</p>
<p>
where
<dl>
<dt>
FROM </dt>
<dd>
Lets you name more than one table or view to use with a WHERE clause to specify which rows to update. The additional FROM clause allows you to update rows from one table based on data stored in other tables, giving you similar functionality to a correlated subquery (SELECT statement in the WHERE clause).</dd>
</dl>
<p>
For an example of the differences between correlated subqueries and this Transact-SQL extension, see the examples later in this section.</p>
<h5>Setting Variables and Columns</h5>
<p>
In earlier releases of SQL Server, it was impossible to verify both the new and old values of a modified column. Values returned from the SELECT statement could not be guaranteed at the time of the UPDATE unless an explicitly defined transaction using HOLDLOCK was defined. </p>
<p>
<b>In earlier releases</b>:</p>
<p>
BEGIN TRANSACTION<br>
SELECT <i>variable_name</i> = <i>column_name1</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;FROM <i>table_name</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE <i>column_name2</i> = <i>expression</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HOLDLOCK<br>
UPDATE <i>table_name</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;SET <i>column_name1</i> = <i>expression<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE <i>column_name2</i> = <i>expression</i><br>
COMMIT TRANSACTION</p>
<p>
<b>In SQL Server 6.0</b>:</p>
<p>
UPDATE <i>table_name</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;SET <i>column_name1</i> = <i>expression</i>, <i>variable_name</i> = <i>column_name1</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE <i>column_name2</i> = <i>expression</i></p>
<p>
In this single update (an implicit transaction), the locks are held only until the update completes (no need to hold them for both an UPDATE and a SELECT). </p>
<h4>Permission</h4>
<p>
UPDATE permission defaults to the table owner, who can transfer it to other users.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;UPDATE Statement with Only the SET Clause</h5>
<p>
These examples show how all rows can be affected if a WHERE clause is eliminated from an UPDATE statement.</p>
<p>
In this example, if all the publishing houses in the <i>publishers</i> table move their head offices to Atlanta, Georgia, this is how the <i>publishers </i>table could be updated:</p>
<pre>UPDATE publishers
SET city = 'Atlanta', state = 'GA'
</pre>
<p>
This example changes the names of all the publishers to NULL:</p>
<pre>UPDATE publishers
SET pub_name = NULL
</pre>
<p>
You can also use computed column values in an update. This example doubles all prices in the <i>titles</i> table:</p>
<pre>UPDATE titles
SET price = price * 2
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;UPDATE Statement with a WHERE Clause</h5>
<p>
The WHERE clause specifies which rows are to be updated. For example, in the unlikely event that northern California is renamed Pacifica (abbreviated PC) and the people of Oakland vote to change the name of their city to Bay City, here is how to update the <i>authors</i> table for all former Oakland residents whose addresses are now out of date:</p>
<pre>UPDATE authors
    SET state = 'PC', city = 'Bay City'
        WHERE state = 'CA' AND city = 'Oakland'
</pre>
<p>
You must write another statement to change the name of the state for residents of other northern California cities.</p>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;UPDATE Statement with a Nested SELECT Statement</h5>
<p>
To modify the <i>ytd_sales</i> column to reflect the most recent sales recorded in the <i>sales</i> table, this example assumes that only one set of sales is recorded for a given title on a given date and that updates are current.</p>
<pre>UPDATE titles
    SET ytd_sales = ytd_sales  qty
        FROM titles, sales
            WHERE titles.title_id = sales.title_id
            AND sales.date = (SELECT MAX(sales.date) FROM sales)
</pre>
<p>
This example assumes that only one set of sales is recorded for a given title on a given date and that updates are current. If this is not the case (if more than one sale for a given title can be recorded on the same day), then the example shown here does not work correctly. It executes without error, but each title is updated with only one sale, regardless of how many sales actually occurred on that day. This is because a single UPDATE statement never updates the same row twice. </p>
<p>
In the situation where more than one sale for a given title can occur on the same day, all the sales for each title must be aggregated together within the UPDATE statement, as shown in this example:</p>
<pre>UPDATE titles
    SET ytd_sales = 
        (select sum(qty)
            FROM sales
                WHERE sales.title_id = titles.title_id
                    AND sales.date IN (SELECT MAX(date) FROM sales))
    FROM titles, sales
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql03_46t0.htm">CREATE INDEX</a></td>
<td width=52%><a href="tsql07_4c1g.htm">DELETE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql04_5iwk.htm">CREATE TABLE</a></td>
<td width=52%><a href="tsql10_9alw.htm">INSERT</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql04_8rg4.htm">CREATE TRIGGER</a></td>
<td width=52%><a href="tsql27_61bi.htm">Text<i> </i>and Image Manipulation</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql05_8037.htm">Cursors</a></td>
<td width=52%><a href="#_update_statement">UPDATE</a></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

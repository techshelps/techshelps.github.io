<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>xp_sendmail Extended Stored Procedure</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_xp_sendmail_extended_stored_procedure"></a>xp_sendmail Extended Stored Procedure </h2>
<p>
Sends a message, and/or a query results set, and/or an attachment to the specified recipients.</p>
<h4>Syntax</h4>
<p>
<b>xp_sendmail</b> @recipient <b>=</b> <i>recipient</i><b> </b>[<b>;</b> <i>recipient2</i>; [<i>...</i><b>; </b><i>recipientn</i>]]<i><br>
&nbsp;&nbsp;&nbsp;&nbsp;</i>[<b>,</b> @message <b>=</b> <i>message</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @query <b>=</b> <i>query</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @attachments <b>=</b> <i>attachments</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>, </b>@copy_recipients <b>=</b> <i>recipient</i><b> </b>[<b>;</b> <i>recipient2</i>; [<i>...</i><b>; </b><i>recipientn</i>]]] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>, </b>@blind_copy_recipients <b>=</b> <i>recipient</i><b> </b>[<b>;</b> <i>recipient2</i>; [<i>...</i><b>; </b><i>recipientn</i>]]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @subject <b>=</b> <i>subject</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @type <b>=</b> <i>type</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @attach_results <b>=</b> {<b>'true' | 'false'</b>}] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @no_output <b>=</b> {<b>'true' | 'false'</b>}] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @no_header <b>=</b> {<b>'true' | 'false'</b>}] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @width <b>=</b> <i>width</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @separator <b>=</b> <i>separator</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @echo_error <b>=</b> {<b>'true' | 'false'</b>}] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @set_user <b>=</b> <i>user</i>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> @dbuse <b>= </b><i>dbname</i>]</p>
<p>
where 
<dl>
<dt>
@recipient <b>=</b> <i>recipient</i></dt>
<dd>
Is a required parameter specifying the people to whom you are sending the mail. If you specify more than one name, separate the names with semicolons.</dd>
<dt>
@message <b>=</b> <i>message</i></dt>
<dd>
Is an optional parameter that specifies the message to be sent. </dd>
<dt>
@query <b>=</b> <i>query</i></dt>
<dd>
Is an optional parameter that specifies a valid SQL Server query, the result of which will be sent in mail. </dd>
<dt>
@attachments <b>=</b> <i>attachments</i></dt>
<dd>
Is an optional parameter that specifies a file to attach to the mail. </dd>
<dt>
@copy_recipients</dt>
<dd>
Is an optional parameter that identifies recipients to whom you are sending a copy of the mail (cc:'ing).</dd>
<dt>
@blind_copy_recipients</dt>
<dd>
Is an optional parameter that identifies recipients to whom you are sending a blind copy of the mail (bcc:'ing).</dd>
<dt>
@subject <b>=</b> <i>subject</i></dt>
<dd>
Is an optional parameter that specifies the subject of the mail. If you do not specify a subject, "SQL Server Message" is used as the subject.</dd>
<dt>
@type <b>=</b> <i>type</i></dt>
<dd>
Is the input message type based on the MAPI mail definition:
<pre>IP[M | C].Vendorname.subclass</pre>

<p>
Message types beginning with IPM will appear in the inbox of the mail client, and will be found or read by <b>xp_findnextmsg</b> if the @type is NULL. Message types beginning with IPC do not appear in the inbox of the mail client and must be found or read by setting the @type parameter. The default is NULL.

<p>
For details about using custom message types, see the <i>Microsoft</i> <i>Windows NT Resource Kit</i> or the <i>Microsoft Mail Technical Reference</i>, available separately.
</dd>
<dt>
@attach_results <b>=</b> {<b>'true' | 'false'</b>}</dt>
<dd>
Is an optional parameter that specifies that the results set of a query should be sent in mail as an attached file instead of being appended to the mail. If @attachments is not NULL and @attach_results is <b>true</b>, the first filename in @attachments will be used as the filename for the results. If @attachments is NULL, a filename will be generated with a .TXT extension. The default for this parameter is <b>false</b>, which means that the results set is appended to the message.</dd>
<dt>
@no_output <b>=</b> {<b>'true' | 'false'</b>}</dt>
<dd>
Is an optional parameter that sends the mail but does not return any output to the client session that sent the mail. The default is <b>false</b>, which means that the client session of SQL Server receives output.</dd>
<dt>
<i>@no_header</i> <b>=</b> {<b>'true' | 'false'</b>}</dt>
<dd>
Is an optional parameter that sends the query results in mail but does not send column header information with the query results. The default is <b>false</b>, which means that column header information is sent with the query results.</dd>
<dt>
@width <b>=</b> <i>width</i></dt>
<dd>
Is an optional parameter that sets the line width of the output text for an @query message. This parameter is identical to the <b>/w</b> parameter in <b>isql</b>. For queries that produce long output rows, use @width together with @attach_results to send the output without line breaks in the middle of output lines. The default width is 80 characters.</dd>
<dt>
@separator <b>=</b> <i>separator</i></dt>
<dd>
Specifies the column separator (field terminator) for each column of the results set. This allows the files to be accessible by spreadsheet applications for formatting, and so on. This parameter is identical to the <b>/t</b> parameter in <b>isql</b>. For example, use @separator with @attach_results to send files with comma-separated values.</dd>
<dt>
@echo_error <b>=</b> {<b>'true' | 'false'</b>}</dt>
<dd>
When <b>true</b>, causes SQLMail to capture any server messages or DB-Library errors encountered while running the @query and append them to the mail message rather than writing them to the error log. Also, a count of rows returned/rows affected will be appended to the mail message. 

<p>
<b>Note</b>  If @echo_error is <b>true</b>, <b>xp_sendmail</b> returns a status of 0 (success) if the mail is successfully sent, even if DB-Library errors or messages are encountered or the query returns no results. 

</dd>
<dt>
@set_user <b>=</b> <i>user</i></dt>
<dd>
Specifies the security context in which the query should be run. The default is <b>'</b>guest<b>'</b> (the <i>guest </i>user).</dd>
<dt>
@dbuse <b>=</b> <i>dbname</i></dt>
<dd>
Specifies the database context in which the query should be run. The default is NULL (which means the user is placed in his or her default database). 
</dd>
</dl>
<h4>Remarks</h4>
<p>
The SQLMail session must be started prior to executing <b>xp_sendmail</b>. Sessions can be started either automatically (using the Auto Start Mail Client option in the Set Server Options dialog box of <b>setup</b>) or with <b>xp_startmail</b>. One SQLMail session supports all users on the SQL Server, but only one user at a time can send a message. Other users sending mail messages will automatically wait their turns until the first user's message is sent.</p>
<p>
If @query is specified, <b>xp_sendmail</b> logs in to SQL Server as a client and executes the specified query. SQLMail makes a separate connection to SQL Server; it does not share the same connection as the original client connection that issued <b>xp_sendmail</b>. Note that @query can be blocked by a lock held by the client connection that issued <b>xp_sendmail</b>. For example, if you are updating a table within a transaction and you create a trigger for that update that attempts to select the updated row information as the @query parameter, the SQLMail connection will be blocked by the exclusive lock held on that row by the initial client connection.</p>
<p>
For details, see the <i>Microsoft SQL Server Administrator's Companion</i>.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;With No Variables</h5>
<p>
This example sends a message to user1 that the <i>master</i> database is full.</p>
<pre>xp_sendmail 'user1', 'The master database is full.'
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;With Variables </h5>
<p>
This example sends the message to user1 and user2, with copies sent to user3 and user4. It also specifies a subject line for the message.</p>
<pre>xp_sendmail @recipients = 'user1;user2', 
@message = 'The master database is full.',
@copy_recipients = 'user3;user4',
@subject = 'Master Database Status'
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Send Results</h5>
<p>
This example sends the results of the <b>sp_configure</b> system stored procedure to user1.</p>
<pre>xp_sendmail 'user1', @query = 'sp_configure'
</pre>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;Send Results as an Attached File</h5>
<p>
This example sends the results of the query SELECT * from <i>sysobjects</i> as a text file attachment to user1. It includes a subject line for the mail and a message that will appear before the attachment. The @width option is used to prevent line breaks in the output lines.</p>
<pre>xp_sendmail @recipients = 'user1', 
@query = 'select * from sysobjects',
@subject = 'SQL Server Report',
@message = 'The contents of sysobjects:',
@attach_results = 'TRUE', @width = 250
</pre>
<h5>E.&nbsp;&nbsp;&nbsp;&nbsp;Send Messages Longer than 255 Characters</h5>
<p>
This example shows how to send a message longer than 255 characters. Because the @message parameter is limited to the length of a <i>varchar</i> (as are all stored procedure parameters), this example writes the long message into a global temporary table consisting of a single text column. The contents of this temporary table are then sent in mail using the @query parameter. </p>
<pre>CREATE TABLE ##texttab (c1 text)
INSERT ##texttab values ('Put your long message here.')
DECLARE @cmd varchar(56)
SELECT @cmd = 'SELECT c1 FROM ##texttab
EXEC master.dbo.xp_sendmail 'user1', 
    @query = @cmd, @no_header= 'TRUE'
DROP TABLE ##texttab
</pre>
<h4>Permission</h4>
<p>
Execute permission defaults to the system administrator, who can grant permission to other users.</p>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql23_095x.htm"><b>sp_processmail</b></a></td>
<td width=52%><a href="tsql14_4dph.htm"><b>xp_readmail</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql14_7vfp.htm"><b>xp_deletemail</b></a></td>
<td width=52%><a href="tsql14_0411.htm"><b>xp_startmail</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql14_7ylh.htm"><b>xp_findnextmsg</b></a></td>
<td width=52%><a href="tsql14_77c5.htm"><b>xp_stopmail</b></a></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

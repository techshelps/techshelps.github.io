<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXECUTE Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_execute_statement"></a>EXECUTE Statement </h1>
<p>
For SQL Server 6.5 information, see <a href="../../hydra/tsql/src/addnfeat_91h0.htm">EXECUTE Statement</a> in <i>What's New for SQL Server 6.5</i>.</p>
<p>
Executes a system procedure, a user-defined stored procedure, or an extended stored procedure. Also supports the execution of a character string within a Transact-SQL batch. In earlier releases, Transact-SQL statements needed to include the actual name of an object at parse and compile time. With the EXECUTE statement, a string can be created with variables that are resolved at execution time.</p>
<h4>Syntax</h4>
<h5>To execute a stored procedure:</h5>
<p>
EXEC[ute] <br>
{[<i>@return_status</i> <b>=</b>]<br>
&nbsp;&nbsp;&nbsp;&nbsp;{[[[<i>server</i><b>.</b>]<i>database</i><b>.</b>]<i>owner</i><b>.</b>]<i>procedure_name</i>[<b>;</b><i>number</i>] | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>@procedure_name_var</i>} <br>
&nbsp;&nbsp;&nbsp;&nbsp;[[<i>@parameter_name</i> <b>=</b>] {<i>value</i> | <i>@variable</i> [OUTPUT]] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> [<i>@parameter_name</i> =] {<i>value</i> | <i>@variable</i> [OUTPUT]}]...] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[WITH RECOMPILE]] </p>
<h5>To execute a character string:</h5>
<p>
EXEC[ute] <b>(</b>{<i>@str_var</i> | <b>'</b><i>tsql_string</i><b>'</b>} [{<i>@str_var</i> | <b>'</b><i>tsql_string</i><b>'</b>}...<b>)</b>}</p>
<p>
where
<dl>
<dt>
<i>@return_status</i></dt>
<dd>
Is an optional integer variable that stores the return status of a stored procedure. This variable must be declared in the batch or stored procedure before it is used in an EXECUTE statement.</dd>
<dt>
<i>procedure_name</i></dt>
<dd>
Specifies a stored procedure. You can execute a procedure that has been created in another database if you are its owner or have permission to execute it in that database. You can execute a procedure on another SQL Server if you have permission to use that server (remote access) and to execute the procedure in that database. If you specify a server name but do not specify a database name, SQL Server looks for the procedure in your default database.</dd>
<dt>
<i>@procedure_name_var</i></dt>
<dd>
Is the name of a locally defined variable that represents a stored procedure name.</dd>
<dt>
<b>;</b><i>number</i></dt>
<dd>
Is an optional integer used to group procedures of the same name so that they can be dropped together with a single DROP PROCEDURE statement. Procedures used in the same application are often grouped this way. For example, the procedures used with the application <i>orders</i> might be named orderproc;1, orderproc;2, and so on. The statement DROP PROCEDURE orderproc drops the entire group. Once procedures have been grouped, individual procedures within the group cannot be dropped. For example, the statement DROP PROCEDURE orderproc;2 is not allowed. This parameter is not used for extended stored procedures.</dd>
<dt>
<i>@parameter_name</i></dt>
<dd>
Specifies the parameter for a procedure, as defined in the CREATE PROCEDURE statement. Parameter names must be preceded by the "at" symbol (@). When used with the <i>@parameter_name</i> = <i>value</i> form, parameter names and constants need not be supplied in the order defined in the CREATE PROCEDURE statement. However, if the <i>@parameter_name</i> <b>=</b> <i>value</i> form is used for any parameter, it must be used for all subsequent parameters.</dd>
<dt>
<i>value</i></dt>
<dd>
Is the value of the parameter to the procedure. If you do not use parameter names, parameter values must be supplied in the order defined in the CREATE PROCEDURE statement.
<p>
If the value of a parameter is an object name, character string, or qualified by a database name or owner name, the entire name must be enclosed in single quotation marks. If the value of a parameter is a keyword, the keyword must be enclosed in double quotation marks.

<p>
If a default is defined in the CREATE PROCEDURE statement, a user can execute the procedure without specifying a parameter. The default must be a constant and can include the wildcard characters %, _, [ ], and [^] if the procedure uses the parameter name with the LIKE keyword. For details, see the CREATE PROCEDURE statement.

<p>
The default can also be NULL. Usually, the procedure definition specifies what action should be taken if a parameter value is NULL.
</dd>
<dt>
<i>@variable</i></dt>
<dd>
Specifies the variable that stores a return parameter.</dd>
<dt>
OUTPUT</dt>
<dd>
Indicates that the stored procedure returns a parameter. The matching parameter in the stored procedure must also have been created with the keyword OUTPUT.</dd>
<dt>
WITH RECOMPILE</dt>
<dd>
Forces a new plan to be compiled. Use this option if the parameter you're supplying is atypical or if the data has significantly changed. The changed plan is used in subsequent executions. This parameter is not used for extended stored procedures.

<p>
<b>Note</b>  If you use SELECT * in your CREATE PROCEDURE statement, the procedure (even with the WITH RECOMPILE option to EXECUTE) does not select any new columns added to the table. So that the procedure can select new columns, you must drop the procedure and re-create it.

</dd>
<dt>
<i>@str_var</i></dt>
<dd>
Is the name of a local string variable. In most cases, this variable will be composed of multiple strings that in total will represent a Transact-SQL statement. The <i>@str_var</i> variable can be a <i>char</i>, <i>character</i>, <i>varchar</i>, or <i>text</i> parameter.</dd>
<dt>
<i>tsql_string</i></dt>
<dd>
Represents a portion or complete string of Transact-SQL statement(s). The total concatenated string passed to the EXECUTE statement must include the complete Transact-SQL command with appropriate spaces and syntax. The string must be enclosed with single quotation marks (<b>'</b>).
</dd>
</dl>
<h4>Remarks</h4>
<p>
You don't need to use the EXECUTE keyword while executing stored procedures if the statement is the first one in a batch. </p>
<p>
You can supply parameters by using <i>value </i>or by using <i>@parameter_name </i><b>=</b><i> value</i>. A parameter is not part of a transaction, so if a parameter is changed in a transaction that is later rolled back, the parameter's value does not revert to its previous value. The value returned to the caller is always the value at the time the procedure returns.</p>
<p>
If you are using OUTPUT parameters and intend to use the return values in other statements within the calling batch or procedure, the value of the parameter must be passed as a variable ¾ that is, <i>@parameter_name </i><b>=</b><i> @variable</i>. It is an error to execute a procedure specifying OUTPUT for a parameter not defined as an OUTPUT parameter in the CREATE PROCEDURE statement. You cannot pass constants to stored procedures using OUTPUT; the return parameter requires a variable name. You must declare the variable's datatype and assign it a value before executing the procedure. Return parameters can be of any datatype except <i>text</i> or <i>image</i>.</p>
<p>
Nesting occurs when one stored procedure calls another. The nesting level is incremented when the called procedure begins execution, and it is decremented when the called procedure has finished. Exceeding the maximum of 16 nesting levels causes the whole calling procedure chain to fail. The current nesting level is stored in the @@NESTLEVEL global variable.</p>
<p>
SQL Server currently uses return values 0 through -14 to indicate the execution status of stored procedures. Values from -15 through -99 are reserved for future use. For a list of values, see the RETURN statement in the Control-of-flow Language topic.</p>
<p>
Remote stored procedures and extended stored procedures are not within the scope of a transaction, so commands executed through calls to them cannot be rolled back. For more information, see the Stored Procedures¾Extended Stored Procedures topic.</p>
<h4>Permission</h4>
<p>
EXECUTE permission for a stored procedure defaults to the owner of the stored procedure, who can transfer it to other users. Permission to use the statement(s) within the EXECUTE string is checked at the time EXECUTE is encountered, even if the EXECUTE statement is included within a stored procedure. When a stored procedure is run that executes a string, the user running the procedure is checked for permissions. In other words, the procedure is checked in the context of the user executing the procedure, not in the context of the user who created the procedure.</p>
<p>&nbsp;</p></body>
</HTML>

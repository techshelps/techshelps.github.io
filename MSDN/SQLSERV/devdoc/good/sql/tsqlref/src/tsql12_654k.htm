<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SELECT Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_select_statement"></a>SELECT Statement </h1>
<p>
For SQL Server 6.5 information, see <a href="../../hydra/tsql/src/addnfeat_0cok.htm">SELECT Statement</a>, <a href="../../hydra/tsql/src/addnfeat_6she.htm">CUBE Operator</a>, and <a href="../../hydra/tsql/src/addnfeat_9cmq.htm">ROLLUP Operator</a> in <i>What's New for SQL Server 6.5</i>.</p>
<p>
Retrieves rows from the database.</p>
<h4>Syntax</h4>
<p>
SELECT [ALL | DISTINCT] <i>select_list</i> <br>
&nbsp;&nbsp;&nbsp;&nbsp;[INTO [<i>new_table_name</i>]] <br>
[FROM {<i>table_name</i> | <i>view_name</i>}[<b>(</b><i>optimizer_hints</i><b>)</b>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[[<b>, </b>{<i>table_name2</i> |<i> view_name2</i>}[<b>(</b><i>optimizer_hints</i><b>)</b>] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[...<b>, </b>{<i>table_name16 </i>|<i> view_name16</i>}[<b>(</b><i>optimizer_hints</i><b>)</b>]]] <br>
[WHERE clause] <br>
[GROUP BY clause]<br>
[HAVING clause]<br>
[ORDER BY clause]<br>
[COMPUTE clause] <br>
[FOR BROWSE]</p>
<p>
where
<dl>
<dt>
ALL</dt>
<dd>
Retrieves all rows in the results. ALL is the default.</dd>
<dt>
DISTINCT</dt>
<dd>
Includes only unique rows in the results. Null values are considered equal for the purposes of the DISTINCT keyword; only one NULL is selected no matter how many are encountered.</dd>
<dt>
<i>select_list</i></dt>
<dd>
Specifies the columns to select. Can be one or more of the following:
<ul>
<li>
Asterisk (*), representing all columns listed in the order in which they were specified in the <a href="tsql04_5iwk.htm">CREATE TABLE statement</a> for all tables in the FROM clause, in the order they appear.</li>
<li>
A list of column names, specified in the order in which you want to see them. If the <i>select_list</i> contains multiple column names, separate the names with commas.</li>
<li>
A column name and column heading that will replace the default column heading (the column name), in the following form:<p>
<i>column_heading </i><b>=</b><i> column_name</i>
<p>
or 
<p>
<i>column_name column_heading</i>
<p>
The <i>column_heading </i>must be in quotation marks if spaces are used. For example:
<pre>SELECT 'Author Last Name' = au_lname 
FROM authors
</pre>
</li>
<li>
An expression<i> </i>(a column name, constant, function, or any combination of column names, constants, and functions connected by an operator(s), a CASE expression, or a subquery). For details, see the Expressions topic.</li>
<li>
The IDENTITYCOL keyword instead of the name of a column that has the IDENTITY property. For details, see the CREATE TABLE statement.</li>
<li>
A local or global variable. For details, see the Variables topic.</li>
<li>
A local variable assignment, in the form:<p>
<i>@variable</i> <b>=</b> <i>expression</i>
</li>
</ul>

<p>
<b>Note</b>  When the <i>select_list</i> includes a variable assignment(s), it cannot be combined with data-retrieval operations.


</dd>
<dt>
INTO <i>new_table_name</i></dt>
<dd>
Creates a new table based on the columns specified in the <i>select_list </i>and the rows chosen in the WHERE<i> </i>clause. To select into a permanent table, the <b>select into/bulkcopy</b> option must be on (by executing the <a href="tsql20_1tnp.htm"><b>sp_dboption </b>system stored procedure</a>). By default, the <b>select into/bulkcopy</b> option is off in newly created databases. The new table name (<i>new</i>_<i>table_name</i>) must follow the same rules as <i>table_name </i>(described later in this section) with these exceptions: 
<ul>
<li>
If <b>select into/bulkcopy </b>is on in the database where the table is to be created, a permanent table is created. The table name must be unique in the database and conform to the rules for <a href="tsql10_3u5w.htm">Identifiers</a>. </li>
<li>
If <b>select into/bulkcopy </b>is not on in the database where the table is to be created, permanent tables cannot be created using SELECT INTO; only local or global temporary tables can be created. To create a temporary table, the table name must begin with a pound sign (#). For details on temporary tables, see the CREATE TABLE statement.</li>
</ul>

<p>
SELECT INTO is a two-step operation. The first step creates the table. The user executing the statement must have CREATE TABLE permission in the destination database. The second step inserts the specified rows into the new table. If the second step fails for any reason (hardware failure, exceeding a system resource, and so on), the new table will exist but have no rows.

<p>
You can use SELECT INTO to create an identical table definition (different table name) with no data by having a false condition in the WHERE<i> </i>clause.

<p>
You cannot use SELECT INTO with the COMPUTE<i> </i>clause or inside a user-defined transaction. For details about user-defined transactions, see the Transactions topic.

<p>
When selecting an existing identity column into a new table, the new column inherits the IDENTITY property unless one of the following conditions is true:

<ul>
<li>
The SELECT statement contains a join, GROUP BY<i> </i>clause, or aggregate function.</li>
<li>
Multiple SELECT statements are joined with UNION. </li>
<li>
The identity column is listed more than once in the <i>select_list</i>.</li>
<li>
The identity column is part of an expression.</li>
</ul>

<p>
If any of these conditions is true, the column is created NOT NULL instead of inheriting the IDENTITY property. If none of the conditions is true, the new table will inherit the identity column. All rules, restrictions, and so on, for the identity columns apply to the new table. 
</dd>
<dt>
FROM</dt>
<dd>
Indicates the specific table(s) and view(s) that are used in the SELECT statement. FROM is required except when the <i>select_list </i>contains only constants, variables, and arithmetic expressions (no column names). The FROM clause allows a maximum of 16 tables and views. Tables in subqueries are counted as part of this total.</dd>
<dt>
<i>table_name | view_name</i> = </dt>
<dd>
[[<i>database</i><b>.</b>]<i>owner</i><b>.</b>]{<i>table_name</i><b>.</b> | <i>view_name</i><b>.</b>}
<p>
Specifies the name(s) of the table(s) and view(s) used in the SELECT statement. If the list contains more than one table or view, separate the names with commas. If the table(s) or view(s) exist in another database(s), use a fully qualified table or view name (<i>database_name</i><b>.</b><i>owner</i><b>.</b><i>object_name</i>). 

<p>
Each <i>table_name </i>or <i>view_name</i> can be given an alias, either for convenience or to distinguish the different roles that a table or view plays in a self-join or subquery. Aliases (when defined) must be used for any ambiguous column references and must always match the alias reference (the full table name cannot be used if an alias has been defined). To use an alias, specify the object name, and then a space, and then the alias name, like this:

<pre>SELECT au_lname, au_fname, title
FROM titles t, authors a, titleauthor ta
WHERE ta.title_id = t.title_id 
AND ta.au_id = a.au_id
ORDER BY title, au_lname, au_fname
</pre>

<p>
The order of the tables and views after the FROM keyword does not affect the results set returned.
</dd>
<dt>
<b>(</b><i>optimizer_hints</i><b>)</b> </dt>
<dd>
Indicate that a specific locking method, a specific index, or no index (table scan) should be used (by the optimizer) with this table for this SELECT. Although this is an allowable option, in most cases you should allow the optimizer to pick the best optimization method.

<p>
<b>Important</b>  You can use the <i>optimizer_hints </i>in any combination, but some of them do not make sense to use together¾for example, TABLOCK and PAGLOCK. When multiple options are specified, separate them with a space; the more restrictive option will take precedence. 


<p>
An <i>optimizer_hint</i> can be one (or more) of the following:

<dl>
<dt>
INDEX <b>= </b>{<i>index_name</i> | <i>index_id</i>}</dt>
<dd>
Specifies the index name or ID to use for that table. An <i>index_id</i> of 0 forces a table scan, 1 forces the use of a clustered index (if one exists).</dd>
<dt>
NOLOCK</dt>
<dd>
Allows "dirty reads," which means that no shared locks are issued and no exclusive locks are honored. This can result in higher concurrency, but at the cost of lower consistency. If this option is specified, it is possible to read an uncommitted transaction or to read a set of pages that are rolled back in the middle of the read, so error messages might result. If you receive error messages 605, 606, 624, or 625 when NOLOCK is specified, resolve them as you would a deadlock error (1205) and retry your statement.</dd>
<dt>
HOLDLOCK</dt>
<dd>
Makes a shared lock more restrictive by holding it until the completion of a transaction (instead of releasing the shared lock as soon as the required table or data page is no longer needed, whether or not the transaction has been completed). The HOLDLOCK option applies only to the table or view for which it is specified and only for the duration of the transaction defined by the statement in which it is used. You cannot use HOLDLOCK in a SELECT statement that includes the FOR BROWSE option.</dd>
<dt>
UPDLOCK</dt>
<dd>
Takes update locks instead of shared locks while reading the table and holds them until the end-of-command or end-of-transaction.</dd>
<dt>
TABLOCK</dt>
<dd>
Takes a shared lock on the table that is held until the end-of-command. If HOLDLOCK is also specified, the shared lock is held until the end of the transaction.</dd>
<dt>
PAGLOCK</dt>
<dd>
Takes shared page locks where a single shared table lock would normally be taken.</dd>
<dt>
TABLOCKX</dt>
<dd>
Takes an exclusive lock on the table that is held until the end-of-command or end-of-transaction.</dd>
<dt>
FASTFIRSTROW</dt>
<dd>
Causes the optimizer to use the nonclustered index if one matches the ORDER BY<i> </i>clause. With sorting enhanced by the new asynchronous read ahead capability, the optimizer picks table scan and sort over using a nonclustered index in many cases because the total throughput for the sort is faster. If there is a sort, the first row cannot be sent until totally sorted. With this method, if the sort is large, there may be a considerable delay before the first row appears. FASTFIRSTROW causes the optimizer to use the nonclustered index; the first row will appear quickly, but the total return time for this option may be slower.</dd>
</dl>
</dd>
<dt>
WHERE<i> </i>clause <b>=</b> </dt>
<dd>
WHERE <i>search_conditions</i>
<p>
Specifies the restricting conditions for the rows returned in the results set. There is no limit to the number of <i>search_conditions </i>that can be included in an SQL statement. For more information, see the <a href="tsql11_33w3.htm">Search Conditions</a> topic.
</dd>
<dt>
GROUP BY<i> </i>clause<i> </i><b>=</b> </dt>
<dd>
GROUP BY [ALL] <i>aggregate_free_expression</i> <br>
[<b>,</b> <i>aggregate_free_expression</i>]...
<dl>
<dt>
GROUP BY</dt>
<dd>
Specifies the groups into which the table will be partitioned and, if aggregate functions are included in the <i>select_list</i>, finds a summary value for each group. You can refer to these new summary columns in the HAVING<i> </i>clause. The <i>text </i>and <i>image </i>datatypes cannot be used in a GROUP BY<i> </i>clause. 
<p>
When a GROUP BY<i> </i>clause<i> </i>is used, each item in the <i>select_list </i>must produce a single value for each group. A table can be grouped by any combination of columns; however, you cannot group by a column heading¾you must use a column name or an expression. In Transact-SQL, any expression is valid (although not with column headings). With standard SQL, you can group only by a column. 

<p>
You can use GROUP BY for a column or expression<i> </i>that does not appear in the <i>select_list</i>. Null values in the GROUP BY column are put into a single group.

<p>
The aggregate functions, which calculate summary values from the non-null values in a column, can be divided into two groups:

<table cellspacing=4 cols=2>
<tr valign=top>
<td width=19%>Scalar</td>
<td width=81%>Aggregate functions are applied to all the rows in a table (producing a single value per function). An aggregate function in the <i>select_list</i> with no GROUP BY<i> </i>clause applies to the whole table and is one example of a scalar.</td>
</tr>
<tr valign=top>
<td width=19%>Vector</td>
<td width=81%>Aggregate functions are applied to all rows that have the same value in a specified column or expression with the GROUP BY<i> </i>clause<i> </i>and, optionally, the HAVING<i> </i>clause<i> </i>(producing a value for each group per function).</td>
</tr>
</table><br>


<p>
For the details about aggregate functions, see the Functions topic.
</dd>
<dt>
ALL </dt>
<dd>
Includes all groups in the results, even those that don't have any rows that meet the <i>search_conditions</i>. </dd>
<dt>
<i>aggregate_free_expression</i></dt>
<dd>
Is an <i>expression</i> that includes no aggregate functions. Aggregate functions can be used in the <i>select_list </i>preceding the GROUP BY<i> </i>clause. 
<p>
For the details about aggregate functions, see the Functions topic.
</dd>
</dl>
</dd>
<dt>
HAVING<i> </i>clause = </dt>
<dd>
HAVING <i>search_conditions</i>
<p>
Specifies a different type of restriction for aggregate functions in the <i>select_list</i>; the <i>search_conditions </i>restrict the rows returned by the query but do not affect the calculation(s) of the aggregate function(s). When a WHERE clause is used, the <i>search_conditions</i> restrict the rows that are included in the calculation of the aggregate function but do not restrict the rows returned by the query. The <i>text </i>and <i>image </i>datatypes cannot be used in a HAVING<i> </i>clause. 

<p>
There is no limit on the number of conditions that can be included in <i>search_conditions</i>. You can use a HAVING<i> </i>clause without a GROUP BY<i> </i>clause. When the HAVING<i> </i>clause is used with GROUP BY ALL, the HAVING<i> </i>clause negates the meaning of ALL.
</dd>
<dt>
ORDER BY<i> </i>clause <b>=</b> </dt>
<dd>
ORDER BY {{<i>table_name</i><b>.</b> | <i>view_name</i><b>.</b>}<i>column_name</i> <br>
| <i>select_list_number</i> | <i>expression</i>} [ASC | DESC] <br>
 [...{{<i>table_name16</i><b>.</b> | <i>view_name16</i><b>.</b>}<i>column_name</i> <br>
| <i>select_list_number</i> | <i>expression</i>} [ASC | DESC]]
<p>
Sorts the results by columns. You can sort as many as 16 columns. In Transact-SQL, the ORDER BY<i> </i>clause can include items that do not appear in the <i>select_list</i>. You can sort by a column name, a column heading (or alias), an <i>expression</i>, or a number representing the position of the item in the <i>select_list </i>(the <i>select_list_number</i>). If you sort by <i>select_list_number</i>, the columns to which the ORDER BY<i> </i>clause refers must be included in the <i>select_list</i>. The select_list can be a single asterisk (*). If you use COMPUTE BY, you must also specify an ORDER BY<i> </i>clause. 

<p>
Null values are sorted before all others, and <i>text </i>or <i>image </i>columns cannot be used in an ORDER BY<i> </i>clause. Subqueries and view definitions cannot include an ORDER BY<i> </i>clause, a COMPUTE<i> </i>clause, or the INTO keyword. However, through Transact-SQL extensions, you can sort by expressions and aggregates if you use their <i>select_list_number</i> in the ORDER BY<i> </i>clause.
</dd>
<dt>
COMPUTE<i> </i>clause <b>=</b> </dt>
<dd>
COMPUTE <i>row_aggregate</i><b>(</b><i>column_name</i><b>)</b> <br>
[<b>,</b><i> row_aggregate</i><b>(</b><i>column_name</i><b>)</b>...]<br>
[BY <i>column_name</i> [<b>,</b> <i>column_name</i>]...] 
<dl>
<dt>
COMPUTE</dt>
<dd>
Used with row aggregate functions (SUM, AVG, MIN, MAX, and COUNT) to generate control-break summary values. The summary values appear as additional rows in the query results, allowing you to see detail rows and summary rows within one results set. You can calculate summary values for subgroups, and you can calculate more than one aggregate function for the same group.
<p>
The COMPUTE<i> </i>clause cannot be used with INTO and cannot contain aliases for column names, although aliases can be used in the <i>select_list</i>.

<p>
The COMPUTE keyword can be used without BY to generate grand totals, grand counts, and so on. The ORDER BY<i> </i>clause is optional only if you use the COMPUTE keyword without BY. 
</dd>
<dt>
BY</dt>
<dd>
Indicates that values for row aggregate functions are to be calculated for subgroups. Whenever the value of BY changes, row aggregate function values are generated. If you use BY, you must also use an ORDER BY<i> </i>clause. Listing more than one item after BY breaks a group into subgroups and applies a function at each level of grouping. The columns listed after COMPUTE<i> </i>clause must be identical to or a subset of those listed after ORDER BY<i> </i>clause, and must be in the same left-to-right order, start with the same <i>expression</i>, and not skip any <i>expression</i>.
<p>
For example, if the ORDER BY<i> </i>clause is:

<pre>ORDER BY a, b, c
</pre>

<p>
The COMPUTE<i> </i>clause can be any (or all) of these:

<pre>COMPUTE BY a, b, c
COMPUTE BY a, b
COMPUTE BY a
</pre>
</dd>
</dl>
</dd>
<dt>
FOR BROWSE</dt>
<dd>
Allows you to perform updates while viewing data in client application programs using DB-Library. 
<p>
A table can be browsed in an application under the following conditions:

<ul>
<li>
The table includes a time-stamped column (defined with the <i>timestamp </i>datatype).</li>
<li>
The table has a unique index.</li>
<li>
The FOR BROWSE option is at the end of the SELECT statement(s) sent to SQL Server.</li>
<li>
For details, see <i>Microsoft SQL Server Programming DB-Library for C</i>.</li>
</ul>

<p>
Do not use the <i>optimizer_hint</i> HOLDLOCK in a SELECT statement that includes the FOR BROWSE option.

<p>
The FOR BROWSE option cannot appear in SELECT statements joined by the <a href="tsql29_3hyq.htm">UNION operator</a>. 

</dd>
</dl>
<h4>Remarks</h4>
<p>
The length returned for <i>text </i>columns included in the <i>select_list</i> defaults to whichever is the smallest ¾ the actual size of the <i>text</i>, the default TEXTSIZE session setting, or the hardcoded application limit. To change the length of returned <i>text</i> for the session, use the <a href="tsql12_8mt0.htm">SET statement</a>. By default, the limit on the length of <i>text</i> data returned with a SELECT statement is 4K.</p>
<p>
To retrieve data from remote SQL Servers, you can call remote stored procedures. For more information, see the <a href="tsql03_412s.htm">CREATE PROCEDURE</a> and <a href="tsql08_8dx0.htm">EXECUTE statements</a>.</p>
<h5>Using the GROUP BY clause and the HAVING<i> </i>clause</h5>
<p>
The following list shows the requirements for processing a SELECT with the GROUP BY<i> </i>clause and the HAVING<i> </i>clause, and it shows how the rows returned in the results set are derived:
<ol>
<li>
The WHERE<i> </i>clause excludes rows that do not meet its <i>search_conditions</i>.</li>
<li>
The GROUP BY<i> </i>clause collects the surviving rows into one group for each unique value in the GROUP BY<i> </i>clause. Omitting the GROUP BY<i> </i>clause<i> </i>creates a single group for the whole table.</li>
<li>
The HAVING<i> </i>clause<i> </i>excludes rows that do not meet its <i>search_conditions</i>. The HAVING<i> </i>clause<i> </i>tests only rows, but the presence or absence of a GROUP BY<i> </i>clause<i> </i>can make the behavior of a HAVING<i> </i>clause appear contradictory. For example:<ul>
<li>
When the query includes a GROUP BY<i> </i>clause, the HAVING<i> </i>clause<i> </i>excludes groups from the results.</li>
<li>
By default, the HAVING<i> </i>clause can refer to aggregates only when the query contains no GROUP BY<i> </i>clause. </li>
<li>
To allow queries that contain aggregates or a GROUP BY<i> </i>clause<i> </i>with items in the <i>select_list </i>that are not in the GROUP BY<i> </i>clause<i> </i>and are not aggregate functions, set trace flag 204. For details, see the Trace Flags topic.</li>
</ul>
</li>
<li>
Aggregate functions specified in the <i>select_list </i>calculate summary values for each surviving group.</li>
</ol>
<p>
For the GROUP BY<i> </i>clause, the HAVING<i> </i>clause, and aggregate functions to accomplish the goal of one row and one summary value per group, ANSI-standard SQL requires:
<ul>
<li>
Columns in a <i>select_list </i>must also be in the GROUP BY<i> </i>clause<i> </i>or be parameters of aggregate functions.</li>
<li>
Columns in a HAVING<i> </i>clause<i> </i>must have only one value.</li>
<li>
A query with a HAVING<i> </i>clause<i> </i>should have a GROUP BY<i> </i>clause. But if it doesn't, all the rows not excluded by the WHERE<i> </i>clause are considered to be a single group.</li>
</ul>
<p>
Transact-SQL extensions to standard SQL make displaying data more flexible by allowing references to columns and expressions that are not used for creating groups or summary calculations. For example:
<ul>
<li>
The GROUP BY<i> </i>clause can include expressions.</li>
<li>
GROUP BY ALL displays all groups, even those excluded from calculations by a WHERE<i> </i>clause.</li>
</ul>
<h4>Permission</h4>
<p>
SELECT permission defaults to the owner of the table or view, who can grant it to other users using the <a href="tsql10_95ys.htm">GRANT statement</a>. If the INTO clause is used to create a permanent table, then the user must have CREATE TABLE permission in the destination database.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Simple SELECT: All Rows, All Columns</h5>
<p>
This example returns all rows (no WHERE<i> </i>clause) and all columns (*) from the <i>publishers</i> table in the <i>pubs </i>database.</p>
<pre>SELECT * FROM publishers</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Simple SELECT: Subset of Columns, All Rows</h5>
<p>
This example returns all rows (no WHERE<i> </i>clause) and only a subset of the columns (<i>pub_id</i>, <i>pub_name</i>, <i>city</i>, <i>state</i>) from the <i>publishers</i> table in the <i>pubs </i>database.</p>
<pre>SELECT pub_id, pub_name, city, state
        FROM publishers</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Simple SELECT: Subset of Rows, Subset of Columns</h5>
<p>
This examples returns only the rows where the advance given is less than $10,000 and there are current year-to-date sales. </p>
<pre>SELECT pub_id, total = sum (ytd_sales)
        FROM titles
            WHERE advance &lt; $10000
            AND ytd_sales IS NOT NULL
</pre>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;SELECT with GROUP BY, COMPUTE, and ORDER BY Clauses</h5>
<p>
This example returns only those rows with current year-to-date sales and then computes the average book cost and total advances in descending order by <i>type</i>. Four columns of data are returned including a truncated title. Notice that all computed columns appear within the <i>select_list</i>.</p>
<pre>SELECT title = CONVERT(char(20), title), type, price, advance
        FROM titles
            WHERE ytd_sales IS NOT NULL
            ORDER BY type DESC
                COMPUTE AVG(price), SUM(advance) BY type
                COMPUTE SUM(price), SUM(advance)
go
title    type    price    advance    
---------------------- ----------------- ------- ----------
Fifty Years in Bucki    trad_cook    11.95    4,000.00    
Onions, Leeks, and G    trad_cook    20.95    7,000    
Sushi, Anyone?    trad_cook    14.99    8,000.00    

            avg
            =========
            15.96    
                sum
                =========
                19,000.00

title    type    price    advance    
---------------------- ----------------- ------- ----------
Computer Phobic AND    psychology    21.59    7,000.00    
Emotional Security:    psychology    7.99    4,000.00    
Is Anger the Enemy?    psychology    10.95    2,275.00    
Life Without Fear    psychology    7.00    6,000.00    
Prolonged Data Depri    psychology    19.99    2,000.00    

            avg
            =========
            13.50    
                sum
                =========
                21,275.00


title    type    price    advance    
---------------------- ----------------- ------- ----------
But Is It User Frien    popular_comp    22.95    7,000.00    
Secrets of Silicon V    popular_comp    20.00    8,000.00    

            avg
            =========
            21.48    
                sum
                =========
                15,000.00

title    type    price    advance    
---------------------- ----------------- ------- ----------
Silicon Valley Gastr    mod_cook    19.99    0.00    
The Gourmet Microwav    mod_cook    2.99    15,000.00

            avg
            =========
            11.49    
                sum
                =========
                15,000.00

title    type    price    advance    
---------------------- ----------------- ------- ----------
Cooking with Compute    business    11.95    5,000.00    
Straight Talk About    business    19.99    5,000.00    
The Busy Executive's    business    19.99    5,000.00    
You Can Combat Compu    business    2.99    10,125.00
    
            avg
            =========
            13.73    
                sum
                =========
                25,125.00

            sum
            =========
            236.26    
                sum
                =========
                88,400.00    
(22 row(s) affected)
</pre>
<h5>E.&nbsp;&nbsp;&nbsp;&nbsp;All Rows with Computed Sums</h5>
<p>
This example shows only three columns in the <i>select_list</i> and gives totals based on all prices and all advances at the end of the results.</p>
<pre>SELECT type, price, advance
        FROM titles
            COMPUTE SUM(price), SUM(advance)
go
type         price                      advance
------------ -------------------------- -------------------------- 
business     19.99                      5,000.00
business     11.95                      5,000.00
business     2.99                       10,125.00
business     19.99                      5,000.00
mod_cook     19.99                      0.00 
mod_cook     2.99                       15,000.00
UNDECIDED    (null)                     (null)
popular_comp 22.95                      7,000.00
popular_comp 20.00                      8,000.00
popular_comp (null)                     (null)
psychology   21.59                      7,000.00
psychology   10.95                      2,275.00
psychology   7.00                       6,000.00
psychology   19.99                      2,000.00
psychology   7.99                       4,000.00
trad_cook    20.95                      7,000.00
trad_cook    11.95                      4,000.00
trad_cook    14.99                      8,000.00

             sum
             ==========================
             236.26                     
                                        sum
                                        ==========================
                                        95,400.00

(19 row(s) affected)
</pre>
<h5>F.&nbsp;&nbsp;&nbsp;&nbsp;Create a Temporary Table with SELECT INTO</h5>
<p>
This example causes a temporary table to be created in <i>tempdb</i>. To use this table, always refer to it with the exact name shown, including the pound sign (#). </p>
<pre>SELECT *
    INTO #coffeetabletitles
        FROM titles
            WHERE price &lt; $20
go
SELECT name FROM sysobjects WHERE name LIKE '#c%'
go
name  
------------------------------ 

(0 row(s) affected)
SELECT name FROM tempdb..sysobjects WHERE name LIKE '#c%'
go
name     
------------------------------ 
#coffeetabletitles__0000EC153E 

(1 row(s) affected)
</pre>
<h5>G.&nbsp;&nbsp;&nbsp;&nbsp;Create a Permanent Table with SELECT INTO</h5>
<p>
This example shows the steps needed to create a permanent table.</p>
<pre>USE master
go
sp_dboption 'pubs', 'select into', TRUE
go
CHECKPOINTing database that was changed.
USE pubs
go
SELECT *
    INTO newtitles
        FROM titles
            WHERE price &gt; $25
            OR price &lt; $20
go
(12 row(s) affected)
SELECT name FROM sysobjects WHERE name LIKE 'new%'
go
name 
------------------------------ 
newtitles 

(1 row(s) affected)
</pre>
<h5>H.&nbsp;&nbsp;&nbsp;&nbsp;Optimizer Hints: TABLOCK and HOLDLOCK</h5>
<p>
The following partial transaction shows how to place an explicit shared table lock on <i>t1</i> without the overhead of reading any records from it.</p>
<pre>BEGIN TRAN
SELECT count(*) FROM t1 (TABLOCK HOLDLOCK)
</pre>
<h5>I.&nbsp;&nbsp;&nbsp;&nbsp;Optimizer Hints: Using the Name of an Index</h5>
<p>
This example shows how to force the optimizer to use a nonclustered index to retrieve rows from a table.</p>
<pre>SELECT au_lname, au_fname, phone
    FROM authors (INDEX = aunmind)
        WHERE au_1name = 'Smith'
</pre>
<h5>J.&nbsp;&nbsp;&nbsp;&nbsp;Optimizer Hints: Forcing a Table Scan</h5>
<p>
This example shows that using an index of 0 will force a table scan.</p>
<pre>SELECT emp_id, fname, lname, hire_date
    FROM employee (index = 0)
        WHERE hire_date &gt; '10/1/1994'
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="tsql04_5iwk.htm">CREATE TABLE statement</a></td>
<td width=52%><a href="tsql11_33w3.htm">Search Conditions</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql04_8rg4.htm">CREATE TRIGGER statement</a></td>
<td width=52%><a href="tsql20_1tnp.htm"><b>sp_dboption</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql05_4kfo.htm">CREATE VIEW statement</a></td>
<td width=52%><a href="tsql24_0p83.htm">Subqueries</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql07_4c1g.htm">DELETE statement</a></td>
<td width=52%><a href="tsql29_3hyq.htm">UNION operator</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql08_4aur.htm">Expressions</a></td>
<td width=52%><a href="tsql29_6mlw.htm">UPDATE statement</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql09_9dyr.htm">Functions</a></td>
<td width=52%><a href="tsql30_6e5v.htm">Variables</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql10_9alw.htm">INSERT statement</a></td>
<td width=52%><a href="tsql30_6far.htm">Wildcard Characters</a></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

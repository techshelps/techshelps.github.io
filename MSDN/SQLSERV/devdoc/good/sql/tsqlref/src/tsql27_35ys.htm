<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WRITETEXT Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_writetext_statement"></a>WRITETEXT Statement </h2>
<p>
Permits nonlogged, interactive updating of an existing <i>text</i> or <i>image</i> field. This statement completely overwrites any existing data in the column it affects. By default, WRITETEXT statements are not logged so that the transaction log won't fill up with the large amounts of data that often make up these datatypes.</p>
<h4>Syntax</h4>
<p>
WRITETEXT [[<i>database</i><b>.</b>]<i>owner</i><b>.</b>]<i>table_name</i><b>.</b><i>column_name</i> <i>text_ptr</i> <br>
[WITH LOG] <i>data</i></p>
<p>
where
<dl>
<dt>
<i>table_name</i><b>.</b><i>column_name</i></dt>
<dd>
Specifies the <i>text</i> column and table to be updated. The database name and owner name are optional.</dd>
<dt>
<i>text_ptr</i></dt>
<dd>
Is a value that stores the pointer to the <i>text</i> or <i>image</i> data.</dd>
<dt>
WITH LOG</dt>
<dd>
Logs the inserted <i>text</i> or <i>image</i> data, which aids media recovery. Because <i>text</i> data quickly increases the size of the transaction log, be sure that the transaction log resides on a separate database device.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The WRITETEXT statement completely overwrites any existing data in the column it affects. Use WRITETEXT to replace <i>text</i> data and UPDATETEXT to modify <i>text </i>data. UPDATETEXT is more flexible because it changes only a portion of a <i>text </i>of <i>image </i>value rather than the entire value. </p>
<p>
By default, WRITETEXT is a nonlogged operation. This means that <i>text </i>or <i>image </i>data is not logged when it is written into the database. To use WRITETEXT in its default, nonlogged state, the system administrator must use the <a href="tsql20_1tnp.htm"><b>sp_dboption</b> system stored procedure</a> to set <b>select into/bulkcopy</b>, which allows nonlogged data to be inserted.</p>
<p>
For WRITETEXT to work, the column must already contain a valid text pointer. There are two ways to create a text pointer:
<ul>
<li>
Insert actual data into the <i>text</i> or <i>image</i> column</li>
<li>
Update the column with data or a NULL</li>
</ul>
<p>
Because an initialized <i>text</i> column uses 2K of storage, even to store a couple of words, SQL Server saves space by not initializing <i>text</i> columns when explicit or implicit null values are placed in <i>text</i> columns with INSERT. </p>
<p>
The maximum length of text that can be inserted interactively with WRITETEXT is approximately 120K for text and image data.</p>
<p>
You cannot use WRITETEXT on <i>text</i> and <i>image</i> columns in views.</p>
<p>
The DB-Library functions <b>dbwritetext</b> and <b>dbmoretext</b> and the ODBC function SQLPutData are faster and use less dynamic memory than WRITETEXT. These functions can insert up to 2 gigabytes of <i>text</i> data.</p>
<p>
<b>Caution</b>  After using the WRITETEXT statement, you must execute DUMP DATABASE. After nonlogged operations occur within a database, the DUMP TRANSACTION statement cannot be performed. For details, see the DUMP statement.</p>
<h4>Text and Image<br>
Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;READTEXT Statement</h5>
<p>
This example selects the second through twenty-sixth characters of the <i>pr_info </i>column in the <i>pub_info</i> table.</p>
<pre>DECLARE @ptrval varbinary(16)
SELECT @ptrval = TEXTPTR(pr_info) 
    FROM pub_info pr, publishers p
        WHERE p.pub_id = pr.pub_id 
        AND p.pub_name = 'New Moon Books'
READTEXT pub_info.pr_info @ptrval 1 25</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Use WRITETEXT to Change Text Data</h5>
<p>
This example puts the text pointer into the local variable <i>@ptrval</i>, and then WRITETEXT places the new text string into the row pointed to by <i>@ptrval</i>.</p>
<pre>DECLARE @ptrval varbinary(16)
SELECT @ptrval = TEXTPTR(pr_info) 
    FROM pub_info pr, publishers p
        WHERE p.pub_id = pr.pub_id 
        AND p.pub_name = 'New Moon Books'
WRITETEXT pub_info.pr_info @ptrval 'New Moon Books (NMB) has just released another top ten publication. With the latest puglication this makes NMB the hottest new publisher of the year!'</pre>
<p>
Note that publication is spelled incorrectly (puglication) in this example. In example C, this value is corrected with UPDATETEXT.</p>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Use UPDATETEXT to Modify Text Data</h5>
<p>
This example puts the text pointer into the local variable <i>@ptrval</i>, and then uses UPDATETEXT to update the spelling error in example B. </p>
<pre>DECLARE @ptrval varbinary(16)
SELECT @ptrval = TEXTPTR(pr_info) 
    FROM pub_info pr, publishers p
        WHERE p.pub_id = pr.pub_id 
        AND p.pub_name = 'New Moon Books'
UPDATETEXT pub_info.pr_info @ptrval 88 1 'b' 
go
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="tsql06_2oxi.htm">Datatypes</a></td>
<td width=52%><a href="tsql12_654k.htm">SELECT</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql05_92es.htm">DECLARE</a></td>
<td width=52%><a href="tsql12_8mt0.htm">SET</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql07_4c1g.htm">DELETE</a></td>
<td width=52%><a href="tsql29_6mlw.htm">UPDATE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql10_9alw.htm">INSERT</a></td>
<td width=52%></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variables</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_variables"></a>Variables </h1>
<p>
Variables are user-defined entities that are assigned values. A local variable is defined with a DECLARE statement, assigned an initial value with a SELECT statement, and used within the statement batch or procedure in which it was declared. Global variables are predefined and maintained by the system.</p>
<p>
The following sections describe the declaration of local variables as well as the use of local and global variables.</p>
<h3>Local Variables</h3>
<p>
Local variables are declared in the body of a batch or procedure with the DECLARE statement and given values with a SELECT statement. Local variables are often used in a batch or procedure as counters for WHILE loops or for IF...ELSE blocks.</p>
<h4>Syntax</h4>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;Variable declaration:</h5>
<p>
DECLARE <i>@variable_name datatype</i> <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> <i>@variable_name datatype</i>...]</p>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;Variable assignment:</h5>
<p>
SELECT <i>@variable </i><b>=</b> {<i>expression</i> | <i>select_statement</i>} <br>
&nbsp;&nbsp;&nbsp;&nbsp;[<b>,</b> <i>@variable</i> <b>=</b> {<i>expression</i> | <i>select_statement</i>}...] <br>
[FROM <i>table_list</i>] <br>
[WHERE<i> search_conditions</i>]<br>
[GROUP BY clause]<br>
[HAVING clause]<br>
[ORDER BY clause] </p>
<p>
where
<dl>
<dt>
<i>@variable_name</i></dt>
<dd>
Is the name of a variable. Variable names must be preceded by the "at" symbol (@). The single @ preceding the alphanumeric name signifies a local variable name. The variable name must conform to the rules for identifiers except that it can contain only 29 characters. Variables can be used only in place of constants. In standard SQL statements, variables cannot be used in place of the names of tables, columns, other database objects, or keywords. In SQL Server 6.0, strings can be resolved at execution time (rather than at compile time) by using the EXECUTE statement. For more information, see the EXECUTE statement.</dd>
<dt>
<i>datatype</i></dt>
<dd>
Is a system or user-defined datatype. A variable cannot be of the <i>image</i> datatype. For more information on system datatypes, see the Datatypes topic. For more information about user-defined datatypes, see the <b>sp_addtype</b> system stored procedure.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Local variables are often used in batches, stored procedures, and control-of-flow statement blocks. Local variables can be used only within the batch or procedure in which they are declared. When used in stored procedures, local variables are declared for automatic, non-interactive use by the procedure when it executes.</p>
<p>
The SELECT statement that assigns a value to the local variable usually returns a single value. If the SELECT variable assignment statement returns more than one value, the variable is assigned the last value returned. If the SELECT variable assignment statement returns no rows, the variable retains its present value unless the variable assignment is made with a subquery. Only if the subquery returns no rows is the variable set to NULL. The SELECT statement that assigns values to variables cannot retrieve data in the same statement.</p>
<h3>Global Variables</h3>
<p>
Predefined global variables can be used without being declared. Global variables are distinguished from local variables by having two "at" symbols (@@) preceding their names. Many of the global variables report on system activity since the last time SQL Server was started; others report information about a connection. In the listing that follows, connection-specific variables are noted with an asterisk (*). For information on the contents of a connection-specific variable, execute SELECT @@variablename. For the contents of many of these global variables, execute the <b>sp_monitor</b> system stored procedure.
<dl>
<dt>
@@CONNECTIONS</dt>
<dd>
Specifies the number of logins or attempted logins since SQL Server was last started. </dd>
<dt>
@@CPU_BUSY</dt>
<dd>
Specifies the amount of time, in ticks (one three-hundredth second, or 3.33 milliseconds), that the CPU has spent doing SQL Server work since the last time SQL Server was started.</dd>
<dt>
@@CURSOR_ROWS*</dt>
<dd>
Specifies the number of qualifying rows in the last-opened cursor. @@CURSOR_ROWS returns:
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=11%>-<i>m</i></td>
<td width=89%>If the cursor is being populated asynchronously. The value returned (-<i>m</i>) refers to the number of rows currently in the keyset.</td>
</tr>
<tr valign=top>
<td width=11%><i>n</i></td>
<td width=89%>If the cursor is fully populated. The value returned (<i>n</i>) refers to the number of rows.</td>
</tr>
<tr valign=top>
<td width=11%>0</td>
<td width=89%>If no cursors have been opened or the last opened cursor has been closed or deallocated.</td>
</tr>
</table><br>

</dd>
<dt>
@@DATEFIRST</dt>
<dd>
Returns the current value of the SET DATEFIRST parameter. Indicates the first day of each week: 1 for Monday, 2 for Tuesday, and so on through for Sunday.</dd>
<dt>
@@DBTS</dt>
<dd>
Specifies the value of the current <i>timestamp</i> datatype for the database. This <i>timestamp</i> is guaranteed to be unique for the database. </dd>
<dt>
@@ERROR*</dt>
<dd>
Specifies the last error number generated by the system for the user connection. The @@ERROR global variable is commonly used to check the error status (succeed or fail) of the most recently executed statement. It contains 0 if the last statement succeeded. Using @@ERROR with control-of-flow statements is advantageous for handling errors. The statement IF @@ERROR &lt; &gt; 0 RETURN exits if an error is returned.</dd>
<dt>
@@FETCH_STATUS*</dt>
<dd>
Contains the status of a cursor FETCH command. It is set to 0 if the fetch is successful, to - 1 if the fetch failed or the row was beyond results set, - 2 if the row fetched is missing.</dd>
<dt>
@@IDENTITY*</dt>
<dd>
Saves the last-inserted IDENTITY value. The @@IDENTITY variable is updated specifically for each user when an INSERT or SELECT INTO statement or bulk copy inserting into a table occurs. If a statement changes the table without an identity column, @@IDENTITY is set to NULL. The<b> </b>@@IDENTITY<i> </i>value does not revert to a previous setting if the<b><i> </i></b>INSERT or SELECT INTO statement<i> </i>or bulk copy fails or if the transaction is rolled back. For more information, see the <a href="tsql04_0rsk.htm">IDENTITY property</a>.</dd>
<dt>
@@IDLE</dt>
<dd>
Specifies the amount of time, in ticks (one three-hundredth second, or 3.33 milliseconds), that SQL Server has been idle since it was last started.</dd>
<dt>
@@IO_BUSY</dt>
<dd>
Specifies the amount of time, in ticks (one three-hundredth second, or 3.33 milliseconds), that SQL Server has spent doing input and output operations since it was last started. </dd>
<dt>
@@LANGID*</dt>
<dd>
Specifies the local language ID of the language currently in use (specified in <i>syslanguages.langid</i>).</dd>
<dt>
@@LANGUAGE*</dt>
<dd>
Specifies the language currently in use (specified in <i>syslanguages.name</i>).</dd>
<dt>
@@MAX_CONNECTIONS</dt>
<dd>
Specifies the maximum number of simultaneous connections that can be made with SQL Server in the current computer environment. The user can configure SQL Server for fewer connections by using the <b>sp_configure</b> system stored procedure. @@MAX_CONNECTIONS is not necessarily the number configured currently.</dd>
<dt>
@@MAX_PRECISION</dt>
<dd>
Returns the level of precision used by <i>decimal </i>and <i>numeric </i>datatypes as currently set in the server. By default, the maximum precision is 28; however, a larger precision can be set when SQL Server starts by using the <b>/p </b>parameter with <b>sqlservr</b>. For more information, see the Utilities and Executables topic.</dd>
<dt>
@@MICROSOFTVERSION</dt>
<dd>
Is a version used internally to track the current version of the server. If version checking is necessary, use @@VERSION.</dd>
<dt>
@@NESTLEVEL*</dt>
<dd>
Specifies the nesting level of the current execution (initially 0). Each time a stored procedure calls another stored procedure, the nesting level is incremented. If the maximum of 16 is exceeded, the transaction is terminated.</dd>
<dt>
@@PACK_RECEIVED</dt>
<dd>
Specifies the number of input packets read by SQL Server since it was last started.</dd>
<dt>
@@PACK_SENT</dt>
<dd>
Specifies the number of output packets written by SQL Server since it was last started.</dd>
<dt>
@@PACKET_ERRORS</dt>
<dd>
Specifies the number of errors that have occurred while SQL Server was sending and receiving packets since the last time SQL Server was started.</dd>
<dt>
@@PROCID*</dt>
<dd>
Specifies the stored procedure ID of the currently executing procedure.</dd>
<dt>
@@REMSERVER*</dt>
<dd>
Returns the server name contained within a remote server's login record.</dd>
<dt>
@@ROWCOUNT*</dt>
<dd>
Specifies the number of rows affected by the last statement. This variable is set to 0 by any statement that does not return rows, such as an IF statement.</dd>
<dt>
@@SERVERNAME</dt>
<dd>
Specifies the name of the local SQL Server. You must define this name with the <a href="tsql18_3so5.htm"><b>sp_addserver </b>system stored procedure</a>, and then restart SQL Server. The <b>setup</b> program sets this variable to the computer name during installation. Although you can change @@SERVERNAME by using the <b>sp_addserver </b>system stored procedure and restarting SQL Server, this method is not usually required.</dd>
<dt>
@@SERVICENAME</dt>
<dd>
Specifies the name of a running service. Currently, @@SERVICENAME defaults to @@SERVERNAME.</dd>
<dt>
@@SPID*</dt>
<dd>
Specifies the server process ID number of the current process (the <i>spid</i> column of the <i>sysprocesses</i> system table).</dd>
<dt>
@@TEXTSIZE*</dt>
<dd>
Specifies the current value of the TEXTSIZE option of the SET statement, which specifies the maximum length, in bytes, of <i>text</i> or <i>image</i> data that a SELECT statement returns. The default limit is 4K.</dd>
<dt>
@@TIMETICKS</dt>
<dd>
Specifies the number of microseconds per tick. The amount of time per tick is computer-dependent. Each tick on the operating system is 31.25 milliseconds (1/32 second).</dd>
<dt>
@@TOTAL_ERRORS</dt>
<dd>
Specifies the number of errors that have occurred while SQL Server was reading or writing since the last time SQL Server was started.</dd>
<dt>
@@TOTAL_READ</dt>
<dd>
Specifies the number of disk reads by SQL Server since it was last started (disk reads only, not cache reads).</dd>
<dt>
@@TOTAL_WRITE</dt>
<dd>
Specifies the number of disk writes by SQL Server since it was last started.</dd>
<dt>
@@TRANCOUNT*</dt>
<dd>
Specifies the number of currently active transactions for the current user.</dd>
<dt>
@@VERSION</dt>
<dd>
Specifies the date, version number, and processor type for the current version of SQL Server.
</dd>
</dl>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="tsql06_2oxi.htm">Datatypes</a></td>
<td width=52%><a href="tsql11_6stw.htm">RAISERROR</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql11_6gl0.htm">PRINT</a></td>
<td width=52%><a href="tsql23_4r51.htm"><b>sp_monitor</b></a></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDENTITY Property</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_identity_property_tsql04"></a>IDENTITY Property</h3>
<p>
Columns that have the IDENTITY property contain system-generated values that uniquely identify each row within a table. You can use this feature to generate sequential numbers (for example, employee identification numbers). When inserting values into a table with an identity column, SQL Server automatically generates the next identifier based on the last used identity value (incremented by adding rows) and the increment value specified during column creation. </p>
<p>
There is no need to remember which column has the IDENTITY property ¾ simply use<b> </b>the<b><i> </i></b>IDENTITYCOL keyword instead. When referencing data in a table, use the keyword IDENTITYCOL in place of the identity column name. It can be qualified with a table name if necessary. The<b><i> </i></b>IDENTITYCOL keyword can be used in SELECT<i>, </i>INSERT<i>, </i>UPDATE, and DELETE statements to reference an identity column.</p>
<p>
Two system functions return identity information for an object containing an identity column. IDENT_SEED returns the seed value specified during creation of an identity column. IDENT_INCR returns the increment value specified during creation of an identity column.</p>
<h4>Manipulating Data in Identity Columns</h4>
<p>
Data inserted into the table should not include a value for an identity column in the INSERT statement; instead, use the DEFAULT VALUES option (available with the INSERT statement).</p>
<p>
By default, data cannot be inserted directly into an identity column; however, if a row was accidentally deleted, an identity value can be re-created and reconstructed. To get the last identity value, use the @@IDENTITY global variable. This variable is accurate after an insert into a table with an identity column; however, this value is reset after an insert into a table without an identity column occurs. To allow an insert with a specific identity value, see the <a href="tsql12_8mt0.htm">SET statement</a> for the IDENTITY_INSERT option.</p>
<p>
<b>Important</b>  When explicitly inserting values into the identity column, SQL Server does not validate uniqueness or the possibility of a gap based on the explicitly entered value. To ensure that this value is unique, use a UNIQUE or PRIMARY KEY constraint, or create a unique index on the identity column.</p>
<p>
If an IDENTITY column exists for a table with frequent deletions, gaps can occur between IDENTITY values. If this is a concern, do not use the IDENTITY property. However, to ensure that no gaps have been created or to fill an existing gap, evaluate the existing identity values before explicitly entering one with the IDENTITY_INSERT option ON. If reusing a removed identity value, use the following sample code to check for the next available identity value. Replace <i>tablename</i>, <i>column_type</i>, and <i>max</i><b>(</b><i>column_type</i><b>) </b>- 1 with your table name, identity column datatype, and numeric value of the maximum allowable value (for that datatype) -1.</p>
<pre>SET IDENTITY_INSERT tablename ON
go
DECLARE @nextidentval column_type
SELECT @nextidentval = MIN(IDENTITYCOL) IDENT_INCR(tablename)
FROM tablename t1
WHERE IDENTITYCOL BETWEEN IDENT_SEED(tablename) AND max(column_type) - 1
AND NOT EXISTS (SELECT * FROM tablename t2
        WHERE t2.IDENTITYCOL = t1.IDENTITYCOL  IDENT_INCR(tablename))
go
SET IDENTITY_INSERT tablename OFF
</pre>
<p>
To check that no gaps exist, this example uses a <i>smallint</i> identity column on a table named <i>images</i>, where the identity column was defined with a seed of 6 and an increment value of 8:</p>
<pre>SET IDENTITY_INSERT images ON
go
DECLARE @@nextidentval smallint<i>
</i>SELECT @@nextidentval <b>= </b>MIN(IDENTITYCOL) IDENT_INCR(images)
FROM images t1
WHERE IDENTITYCOL BETWEEN IDENT_SEED(images) AND 32766<i>
</i>AND NOT EXISTS (SELECT * FROM images t2
        WHERE t2.IDENTITYCOL <b>=</b> t1.IDENTITYCOL  IDENT_INCR(images))
go
</pre>
<h4>Using the IDENTITY Property with SELECT [INTO] or a View</h4>
<p>
Ordinarily, selecting an existing identity column into a new table or view, the new column inherits the identity property. If one of the following conditions is true, the new column does not inherit the identity property:
<ul>
<li>
The SELECT statement contains a union, join, group by, or aggregate function</li>
<li>
The identity column is selected more than once</li>
<li>
The identity column is part of an expression</li>
</ul>
<p>
If one of these conditions is true, the column is created NOT NULL instead of inheriting the identity property. Because this column does not have the identity property, a column value must be explicitly specified when inserting a row into the new table. </p>
<p>
If none of these conditions is true, the new table will inherit the identity column. All rules and restrictions, for the identity columns apply to the new table. </p>
<h4>Permission</h4>
<p>
CREATE TABLE permission defaults to the database owner, who can transfer it to other users. Any user can create temporary tables.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

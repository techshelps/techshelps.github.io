<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CASE Expression</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_case_expression"></a>CASE Expression</h1>
<p>
The CASE expression allows SQL expressions to be simplified for conditional values. The CASE expression in SQL Server 6.0 is ANSI SQL-92-compliant and allowed anywhere an expression is used.</p>
<h4>Syntax</h4>
<p>
<b>Simple CASE expression:</b></p>
<p>
CASE <i>expression</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;WHEN <i>expression1 </i>THEN <i>expression1<br>
&nbsp;&nbsp;&nbsp;&nbsp;</i>[[WHEN <i>expression2</i> THEN <i>expression2</i>] [...]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[ELSE <i>expressionN</i>]<br>
END</p>
<p>
<b>Searched CASE expression:</b></p>
<p>
CASE<br>
&nbsp;&nbsp;&nbsp;&nbsp;WHEN <i>Boolean_expression1</i> THEN <i>expression1<br>
&nbsp;&nbsp;&nbsp;&nbsp;</i>[[WHEN <i>Boolean_expression2</i> THEN <i>expression2</i>] [...]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[ELSE <i>expressionN</i>]<br>
END</p>
<p>
<b>CASE-related functions:</b></p>
<p>
COALESCE <b>(</b><i>expression1</i><b>,</b> <i>expression2</i><b>)</b><br>
COALESCE <b>(</b><i>expression1</i><b>,</b> <i>expression2</i><b>,</b><i> ...expressionN</i><b>)</b><br>
NULLIF <b>(</b><i>expression1</i><b>, </b><i>expression2</i><b>)</b></p>
<p>
where
<dl>
<dt>
<i>expression</i></dt>
<dd>
Is a constant, column name, function, subquery, and any combination of arithmetic, bitwise, and string operators.
<p>
In a simple CASE expression, the first expression is compared to the <i>expression</i> in each WHEN clause for equivalency. If these expressions are equivalent, the expression in the THEN clause will be returned.
</dd>
<dt>
<i>Boolean_expression</i></dt>
<dd>
Determines whether to use the THEN clause. The searched CASE expression allows comparison operators, and the use of AND and/or OR between each <i>Boolean_expression</i>. A simple CASE expression does not. The simple CASE <i>expression</i> checks only for equivalent values.</dd>
<dt>
ELSE <i>expressionN</i></dt>
<dd>
Specifies the result to be returned when all other WHEN clauses fail. ELSE <i>expressionN </i>is optional. When not included, if all other WHEN clauses fail, CASE returns NULL.</dd>
<dt>
COALESCE (<i>expression1</i><b>,</b> <i>expression2</i>)</dt>
<dd>
Is equivalent to a searched CASE expression where a NOT NULL <i>expression1</i> returns <i>expression1</i> and a NULL <i>expression1</i> returns <i>expression2</i>. In searched CASE expression form, it would look like this:</dd>
</dl>
<pre>CASE
    WHEN expression1 IS NOT NULL THEN expression1
    ELSE expression2
END</pre>
<dl>
<dt>
COALESCE (<i>expression1</i><b>,</b><i> expression2</i><b>,</b><i> ... expressionN</i>)</dt>
<dd>
Is equivalent to the COALESCE function where each of the expressions return that expression<i> </i>when the value is NOT NULL. A NULL <i>expressionN</i> will return the first non-null <i>expressionN </i>in the list. If no non-null values are found, CASE returns NULL. In searched CASE statement form, it would look like this:</dd>
</dl>
<pre>CASE
    WHEN value_expression1 IS NOT NULL THEN value_expression1
    ELSE COALESCE(value_expression2, ... value_expressionN)
END</pre>
<dl>
<dt>
NULLIF (<i>expression1</i>, <i>expression2</i>)</dt>
<dd>
Is equivalent to a searched CASE expression where <i>expression1</i> <b>=</b> <i>expression2</i> and the resulting expression is NULL. In searched CASE expression form, it would look like this:</dd>
</dl>
<pre>CASE
    WHEN expression1=expression2 THEN NULL 
    ELSE expression1
END
</pre>
<h4>Remarks</h4>
<p>
All datatypes used for the replacement expression in the THEN clause must include compatible datatypes. This table shows compatible and resulting datatypes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%></th>
<th align=left width=60%></th>
</tr>
<tr valign=top>
<th align=left width=40%></th>
<th align=left width=60%></th>
</tr>
<tr valign=top>
<th align=left width=40%>Datatypes in THEN <br>
expressions</th>
<th align=left width=60%><br>
Resulting datatype</th>
</tr>
<tr valign=top>
<td width=40%>Mixed.</td>
<td width=60%>If the datatype used is not compatible (implicit conversion not supported by SQL Server), an error will occur.</td>
</tr>
<tr valign=top>
<td width=40%>Combination of fixed-length <i>char</i> with lengths cl1, cl2, and cl3.</td>
<td width=60%>Fixed-length <i>char</i> with length equal to the greater of cl1, cl2, and cl3.</td>
</tr>
<tr valign=top>
<td width=40%>Combination of fixed-length <i>binary</i> with lengths bl1, bl2, and bl3.</td>
<td width=60%>Fixed-length <i>binary</i> with length equal to the greater of bl1, bl2, and bl3.</td>
</tr>
<tr valign=top>
<td width=40%>Combination of fixed and variable-length <i>char</i>.</td>
<td width=60%>Variable-length <i>char</i> with length equal to the maximum-length expression.</td>
</tr>
<tr valign=top>
<td width=40%>Combination of fixed and variable-length <i>binary</i>.</td>
<td width=60%>Variable-length <i>binary</i> with length equal to the maximum-length expression.</td>
</tr>
<tr valign=top>
<td width=40%>Combination of numeric datatypes (for example, <i>smallint</i>, <i>int</i>, <i>float</i>, <i>money</i>,<i> numeric</i>,<i> </i>and <i>decimal</i>).</td>
<td width=60%>Datatype equal to the maximum precision expression. For example, if one expression resulted in an <i>int</i> and another in a <i>float</i>, the resulting datatype would be <i>float</i>, because <i>float</i> is more precise than <i>int</i>.</td>
</tr>
</table><br>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;SELECT Statement with a Simple CASE Expression</h5>
<p>
Within a SELECT statement, a simple CASE expression allows only an equality check; no other comparisons are made. In this example, the CASE expression is used to alter the display of book categories to make them more understandable.</p>
<pre>SELECT     Category = 
        CASE type
            WHEN 'popular_comp' THEN 'Popular Computing'
            WHEN 'mod_cook' THEN 'Modern Cooking'
            WHEN 'business' THEN 'Business'
            WHEN 'psychology' THEN 'Psychology'
            WHEN 'trad_cook' THEN 'Traditional Cooking'
            ELSE 'Not yet categorized'
        END, 
    "Shortened Title" = CONVERT(varchar(30), title), 
    Price = price
FROM titles
WHERE price IS NOT NULL
ORDER BY type
COMPUTE AVG(price) BY type
go

Category            Shortened Title                Price
------------------- ------------------------------ -----------
Business            Cooking with Computers: Surrep 11.95
Business            Straight Talk About Computers  19.99
Business            The Busy Executive's Database  19.99
Business            You Can Combat Computer Stress 2.99

                                                   avg
                                                   ===========
                                                   13.73

Category            Shortened Title                Price
------------------- ------------------------------ -----------
Modern Cooking      Silicon Valley Gastronomic Tre 19.99
Modern Cooking      The Gourmet Microwave          2.99

                                                   avg
                                                   ===========
                                                   11.49

Category            Shortened Title                Price
------------------- ------------------------------ -----------
Popular Computing   But Is It User Friendly?       22.95
Popular Computing   Secrets of Silicon Valley      20.00

                                                   avg
                                                   ===========
                                                   21.48

Category            Shortened Title                Price
------------------- ------------------------------ -----------
Psychology          Computer Phobic And Non-Phobic 21.59
Psychology          Emotional Security: A New Algo 7.99
Psychology          Is Anger the Enemy?            10.95
Psychology          Life Without Fear              7.00
Psychology          Prolonged Data Deprivation: Fo 19.99

                                                   avg
                                                   ===========
                                                   13.50

Category            Shortened Title                Price
------------------- ------------------------------ -----------
Traditional Cooking Fifty Years in Buckingham Pala 11.95
Traditional Cooking Onions, Leeks, and Garlic: Coo 20.95
Traditional Cooking Sushi, Anyone?                 14.99

                                                   avg
                                                   ===========
                                                   15.96

(21 row(s) affected)
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;SELECT Statement with Simple and Searched CASE Expressions</h5>
<p>
Within a SELECT statement, the searched CASE expression allows values to be replaced in the results set based on comparison values. In this example, the price (a money column) is displayed as a text comment based on ranges of cost for the books. It is important that all possibilities are checked.</p>
<pre>SELECT     "Price Category" = 
        CASE 
            WHEN price IS NULL THEN 'Not yet priced'
            WHEN price &lt; 10 THEN 'Very Reasonable Title'
            WHEN price &gt;= 10 and price &lt; 20 THEN 'Coffee Table Title'
            ELSE 'Expensive book!'
        END,
    "Shortened Title" = CONVERT(varchar(20), title),
    Category = 
        CASE type
            WHEN 'popular_comp' THEN 'Popular Computing'
            WHEN 'mod_cook' THEN 'Modern Cooking'
            WHEN 'business' THEN 'Business'
            WHEN 'psychology' THEN 'Psychology'
            WHEN 'trad_cook' THEN 'Traditional Cooking'
            ELSE 'Not yet categorized'
        END
FROM titles
ORDER BY price
go

Price Category        Shortened Title      Category
--------------------- -------------------- -------------------
Not yet priced        Net Etiquette        Popular Computing
Not yet priced        The Psychology of Co Not yet categorized
Very Reasonable Title The Gourmet Microwav Modern Cooking
Very Reasonable Title You Can Combat Compu Business
Very Reasonable Title Life Without Fear    Psychology
Very Reasonable Title Emotional Security:  Psychology
Coffee Table Title    Is Anger the Enemy?  Psychology
Coffee Table Title    Cooking with Compute Business
Coffee Table Title    Fifty Years in Bucki Traditional Cooking
Coffee Table Title    Sushi, Anyone?       Traditional Cooking
Coffee Table Title    Prolonged Data Depri Psychology
Coffee Table Title    Silicon Valley Gastr Modern Cooking
Coffee Table Title    Straight Talk About  Business
Coffee Table Title    The Busy Executive's Business
Expensive book!       Secrets of Silicon V Popular Computing
Expensive book!       Onions, Leeks, and G Traditional Cooking
Expensive book!       Computer Phobic And  Psychology
Expensive book!       But Is It User Frien Popular Computing

(18 row(s) affected)
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;SELECT Statement with Searched CASE Expressions and Nested Subquery</h5>
<p>
Within a SELECT statement, the searched CASE expression allows values to be replaced in the results set based on comparison values. In this example, the royalty percentage is checked in a separate table to determine a royalty category for each author.</p>
<pre>SELECT "Author's Full Name" = CONVERT(varchar(25), (RTRIM(au_fname) 
                             ' '  RTRIM(au_lname))),
    "Shortened Title" = CONVERT(varchar(25), title),
    "Royalty Category" =
        CASE
            WHEN (SELECT AVG(royaltyper) FROM titleauthor ta
                    WHERE t.title_id = ta.title_id) &gt; 60
                THEN 'High Royalty'
            WHEN (SELECT AVG(royaltyper) FROM titleauthor ta
                    WHERE t.title_id = ta.title_id)
                        BETWEEN 41 and 59
                THEN 'Medium Royalty'
            ELSE 'Low Royalty'
        END
FROM authors a, titles t, titleauthor ta
WHERE a.au_id = ta.au_id AND ta.title_id = t.title_id
ORDER BY "Royalty Category", "Author's Full Name"
go
Author's Full Name        Shortened Title           Royalty Category
------------------------- ------------------------- ----------------
Akiko Yokomoto            Sushi, Anyone?            Low Royalty
Burt Gringlesby           Sushi, Anyone?            Low Royalty
Michael O'Leary           Sushi, Anyone?            Low Royalty
Albert Ringer             Life Without Fear         High Royalty
Charlene Locksley         Emotional Security: A New High Royalty
Charlene Locksley         Net Etiquette             High Royalty
Cheryl Carson             But Is It User Friendly?  High Royalty
Innes del Castillo        Silicon Valley Gastronomi High Royalty
Johnson White             Prolonged Data Deprivatio High Royalty
Marjorie Green            You Can Combat Computer S High Royalty
Reginald Blotchet-Halls   Fifty Years in Buckingham High Royalty
Sylvia Panteley           Onions, Leeks, and Garlic High Royalty
Abraham Bennet            The Busy Executive's Data Medium Royalty
Albert Ringer             Is Anger the Enemy?       Medium Royalty
Ann Dull                  Secrets of Silicon Valley Medium Royalty
Anne Ringer               Is Anger the Enemy?       Medium Royalty
Anne Ringer               The Gourmet Microwave     Medium Royalty
Livia Karsen              Computer Phobic And Non-P Medium Royalty
Marjorie Green            The Busy Executive's Data Medium Royalty
Michael O'Leary           Cooking with Computers: S Medium Royalty
Michel DeFrance           The Gourmet Microwave     Medium Royalty
Sheryl Hunter             Secrets of Silicon Valley Medium Royalty
Stearns MacFeather        Computer Phobic And Non-P Medium Royalty
Stearns MacFeather        Cooking with Computers: S Medium Royalty

(25 row(s) affected)
</pre>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;UPDATE Statement with CASE Expressions</h5>
<p>
With an UPDATE statement and CASE expressions, it's easy to modify a significant number of rows based on multiple columns of conditional information. In this example, reviews have been turned in and salary increases are due. A review rating of 4 will double the worker's salary, 3 will increase it by 60 percent, 2 will increase it by 20 percent, and a rating lower than 2 results in no raise. Also, a raise will not be given if the employee has been at the company for less than 18 months.</p>
<pre>UPDATE employee_salaries
    SET salary =
        CASE 
            WHEN (review = 4 AND 
                (DATEDIFF(month, hire_date, GETDATE()) &gt; 18)) 
                THEN salary * 2
            WHEN (review = 3 AND 
                (DATEDIFF(month, hire_date, GETDATE()) &gt; 18)) 
                THEN salary * 1.6
            WHEN (review = 2 AND 
                (DATEDIFF(month, hire_date, GETDATE()) &gt; 18)) 
                THEN salary * 1.2
            ELSE salary
        END
</pre>
<h5>E.&nbsp;&nbsp;&nbsp;&nbsp;CASE-related Function (COALESCE)</h5>
<p>
In this example, a <i>wages </i>table is shown to include three columns with information about an employee's yearly wage: <i>hourly_wage</i>, <i>salary</i>, and <i>commission</i>. However, an employee receives only one type of pay. To determine the total amount paid to all employees, use the COALESCE function to receive only the non-null value found in <i>hourly_wage</i>, <i>salary</i>, and <i>commission</i>.</p>
<pre>CREATE TABLE wages
(
    emp_id        tinyint     identity,
    hourly_wage    decimal    NULL,
    salary        decimal     NULL,
    commission    decimal    NULL,
    num_sales    tinyint    NULL
)
INSERT wages VALUES(10.00, NULL, NULL, NULL)
INSERT wages VALUES(20.00, NULL, NULL, NULL)
INSERT wages VALUES(30.00, NULL, NULL, NULL)
INSERT wages VALUES(40.00, NULL, NULL, NULL)
INSERT wages VALUES(NULL, 10000.00, NULL, NULL)
INSERT wages VALUES(NULL, 20000.00, NULL, NULL)
INSERT wages VALUES(NULL, 30000.00, NULL, NULL)
INSERT wages VALUES(NULL, 40000.00, NULL, NULL)
INSERT wages VALUES(NULL, NULL, 15000, 3)
INSERT wages VALUES(NULL, NULL, 25000, 2)
INSERT wages VALUES(NULL, NULL, 20000, 6)
INSERT wages VALUES(NULL, NULL, 14000, 4)
go

SELECT "Total Salary" = CONVERT(money, 
        (COALESCE(hourly_wage * 40 * 52, 
            salary, 
            commission * num_sales)))
    FROM wages
go

Total Salary               
-------------------------- 
20,800.00                  
41,600.00                  
62,400.00                  
83,200.00                  
10,000.00                  
20,000.00                  
30,000.00                  
40,000.00                  
45,000.00                  
50,000.00                  
120,000.00                 
56,000.00                  

(12 row(s) affected)
</pre>
<h5>F.&nbsp;&nbsp;&nbsp;&nbsp;CASE-related Functions (NULLIF and COALESCE)</h5>
<p>
In this example, the <i>budgets </i>table is created to show a department (<i>dept</i>), its current budget (<i>current_year</i>) and its previous budget (<i>previous_year</i>). For the current year, NULL is used for departments whose budget will not change from the prior year, and 0 is used for budgets that have not yet been determined. To find out the average of only those departments that have received a budget as well as include the budget value from the prior year (use the <i>previous_year</i> value, where the <i>current_year</i> is 0), combine the NULLIF and COALESCE functions. </p>
<pre>CREATE TABLE budgets
(
    dept                tinyint    IDENTITY,
    current_year        decimal    NULL,
    previous_year    decimal    NULL
)
INSERT budgets VALUES(100000, 150000)
INSERT budgets VALUES(NULL, 300000)
INSERT budgets VALUES(0, 100000)
INSERT budgets VALUES(NULL, 150000)
INSERT budgets VALUES(300000, 250000)

SELECT "Average Budget" = AVG(NULLIF(COALESCE(current_year,
                             previous_year), 0.00)) 
    FROM budgets
go

Average Budget                           
---------------------------------------- 
212500.000000                            

(1 row(s) affected)
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="tsql08_4aur.htm">Expressions</a></td>
<td width=52%><a href="tsql12_654k.htm">SELECT</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql11_33w3.htm">Search Conditions</a></td>
<td width=52%><a href="tsql29_6mlw.htm">UPDATE</a></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

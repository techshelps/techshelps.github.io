<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Search Conditions</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_search_conditions"></a>Search Conditions </h1>
<p>
Set the conditions for data retrieval or modification. Search conditions immediately follow the keyword WHERE in a SELECT, INSERT, UPDATE, or DELETE statement or follow the keyword HAVING in a SELECT statement. If you use more than one of the search conditions in a single statement, connect the conditions with AND or OR. Joins and subqueries can be specified in the search conditions. </p>
<h4>Syntax</h4>
<p>
{WHERE | HAVING} [NOT] <i>Boolean_expression</i> <br>
{WHERE | HAVING} [NOT] <i>Boolean_expression</i> {AND | OR} <i>&nbsp;&nbsp;&nbsp;&nbsp;Boolean_expression</i> <br>
{WHERE | HAVING} [NOT] <i>column_name</i> IS [NOT] NULL<br>
{WHERE | HAVING} [NOT] <i>column_name join_operator column_name</i> <br>
{WHERE | HAVING} [NOT] <i>column_name</i> [NOT] LIKE <b>'</b><i>match_string</i><b>'</b> <br>
{WHERE | HAVING} [NOT] EXISTS <b>(</b><i>subquery</i><b>)</b> <br>
{WHERE | HAVING} [NOT] <i>expression comparison_operator expression</i> <br>
{WHERE | HAVING} [NOT] <i>expression</i> [NOT] BETWEEN <i>expression</i> AND <i>&nbsp;&nbsp;&nbsp;&nbsp;expression</i> <br>
{WHERE | HAVING} [NOT] <i>expression</i> [NOT] IN <b>(</b><i>value_list</i> | <i>subquery</i><b>)</b> <br>
{WHERE | HAVING} [NOT] <i>expression</i> <i>comparison_operator</i> {ANY | ALL} &nbsp;&nbsp;&nbsp;&nbsp;(<i>subquery</i>) <br>
{WHERE CURRENT OF <i>cursor_name</i>}</p>
<p>
where
<dl>
<dt>
<i>Boolean_expression</i></dt>
<dd>
Is an expression that returns TRUE or FALSE. <i>Boolean_expressions</i> have the following format:
<p>
<i>expression comparison_operator</i> [ANY | ALL] (<i>subquery</i>)<br>
<i>expression</i> [NOT] IN <i>expression</i><br>
[NOT] EXISTS <i>expression</i><br>
<i>expression</i> [NOT] BETWEEN <i>expression</i> AND <i>expression</i><br>
<i>expression</i> [NOT] LIKE <i>expression</i><br>
NOT <i>expression</i> LIKE <i>expression</i><br>
<i>expression</i> IS [NOT] NULL<br>
<i>Boolean_expression</i> {AND | OR} <i>Boolean_expression</i><br>
[NOT] <i>Boolean_function</i>

<p>
where
</dd>
<dt>
<i>Boolean_function</i></dt>
<dd>
Is a function that returns TRUE or FALSE.</dd>
<dt>
<i>expression</i></dt>
<dd>
Is a column name, a constant, a function, a variable, a subquery, any combination of column names, constants, and functions connected by an operator(s) or a subquery. The <i>expression</i> may also contain the CASE expression. For details, see the <a href="tsql01_5jce.htm">CASE Expression</a>, <a href="tsql11_3qpf.htm">Operators</a>, and the <a href="tsql24_0p83.htm">Subqueries</a> topics. </dd>
<dt>
<i>column_name</i></dt>
<dd>
Is the name of a column used in the comparison. If there is any ambiguity, qualify the column name with its table or view name.</dd>
<dt>
<i>match_string</i></dt>
<dd>
Is a string of characters and wildcard characters enclosed in quotation marks. For details, see the <a href="tsql30_6far.htm">Wildcard Characters</a> topic.</dd>
<dt>
<i>comparison_operator</i></dt>
<dd>
Is a symbol used to contrast two expressions. For details, see the <a href="tsql11_3qpf.htm">Operators</a> topics. </dd>
<dt>
<i>value_list</i></dt>
<dd>
Is a list of values. Place quotation marks around <i>char</i>, <i>varchar</i>, and <i>datetime</i> values, and separate values with commas.</dd>
<dt>
<i>subquery</i></dt>
<dd>
Is a restricted <a href="tsql12_654k.htm">SELECT statement</a> (the ORDER BY clause, the COMPUTE clause, and the INTO keyword are not allowed). For more information, see the <a href="tsql24_0p83.htm">Subqueries</a> topic.</dd>
<dt>
<i>cursor_name</i></dt>
<dd>
Specifies the name of the cursor that points to the row where the statement should be applied. The WHERE CURRENT OF clause is available with the DELETE and UPDATE statements. For details, see the <a href="tsql05_8037.htm">Cursors</a> topic. </dd>
<dt>
AND</dt>
<dd>
Joins two conditions and returns results when both of the conditions are true. When more than one logical operator is used in a statement, AND operators are evaluated first. You can change the order of evaluation by using parentheses.</dd>
<dt>
ALL</dt>
<dd>
Is used with &lt;, &gt;, &lt;&gt;, &gt;=, or &lt;= and a subquery. It evaluates to TRUE or FALSE when all values retrieved in the subquery match the value in the WHERE or HAVING clause<i> </i>or when the subquery returns no rows of the outer statement. For details, see the <a href="tsql24_0p83.htm">Subqueries</a> topic.</dd>
<dt>
ANY</dt>
<dd>
Is used with &lt;, &gt;, &lt;&gt;, &gt;=, &lt;=, or = and a subquery. It evaluates to TRUE when any value retrieved in the subquery satisfies the comparison predicate in the WHERE or HAVING clause<i> </i>of the outer statement. For details, see the <a href="tsql24_0p83.htm">Subqueries</a> topic.</dd>
<dt>
BETWEEN</dt>
<dd>
Is the range-start keyword. Use AND for the range-end value. A range of <i>expression</i> BETWEEN <i>x </i>AND <i>y</i>, unlike a range of <i>expression</i> <i>&gt;</i> x<i> </i>and <i>expression</i> <i>&lt; </i>y, is inclusive.</dd>
<dt>
EXISTS</dt>
<dd>
Is used with a subquery to test for the existence of rows returned by the subquery. For details, see the <a href="tsql24_0p83.htm">Subqueries</a> topic.</dd>
<dt>
IN</dt>
<dd>
Allows you to select values that match any one of a list of values. The <i>expression </i>can be a constant or a column name, and the list can be a set of constants or, more commonly, a subquery. Enclose the list of values in parentheses. 
<p>
If there are 16 or more values in an IN predicate, the values are sorted and binary search is used to evaluate the predicate. This can result in limiting the overall number of comparisons performed. For information about using IN with a subquery, see the <a href="tsql24_0p83.htm">Subqueries</a> topic.
</dd>
<dt>
IS [NOT] NULL</dt>
<dd>
Are keywords that search for null values (or all values except null values). An expression with a bitwise or arithmetic operator evaluates to NULL if any of the operands is NULL.</dd>
<dt>
LIKE</dt>
<dd>
Indicates that the following character string (enclosed by quotation marks) is to be used with pattern matching. You can use the LIKE keyword and wildcard characters with <i>datetime</i> data as well as with <i>char</i> and <i>varchar</i>. When you use LIKE with <i>datetime</i> values, SQL Server converts the dates to the standard <i>datetime</i> format and then to <i>varchar</i>. Since the standard storage format doesn't include seconds or milliseconds, you cannot search for seconds or milliseconds with LIKE and a pattern.
<p>
It is a good idea to use LIKE when you search for <i>datetime</i> values, since <i>datetime</i> entries can contain a variety of date parts. For example, if you insert the value 9:20 into a column named <i>arrival_time</i>, the clause WHERE <i>arrival_time = </i><b>'</b>9:20<b>'</b> can't find it because SQL Server converts the entry into <b>'</b>Jan 1, 1900 9:20AM<b>'</b>. However, the clause WHERE <i>arrival_time</i> LIKE <b>'</b>%9:20%<b>'</b> does find it.


<p>
<b>Note</b>  When performing string comparisons with LIKE, all characters in the pattern string are significant, including every leading and/or trailing blank (space). If a comparison to return all rows with a string LIKE 'abc ' (abc followed by a single space) is requested, a row where the value of that column is 'abc' (abc without a space) will not be returned. The reverse, however, is not true. Trailing blanks in the expression to which the pattern is matched are ignored. If a comparison to return all rows with a string LIKE 'abc' (abc without a space) is requested, all rows that start with 'abc' and have zero or more trailing blanks would be returned.

</dd>
<dt>
NOT</dt>
<dd>
Negates any Boolean expression (which can include keywords, such as LIKE, NULL, BETWEEN, IN, and EXISTS).</dd>
<dt>
OR</dt>
<dd>
Joins two conditions and evaluates to TRUE when either of the conditions is true. When more than one logical operator is used in a statement, OR operators are normally evaluated after AND operators. However, you can change the order of evaluation by using parentheses.
</dd>
</dl>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Arithmetic Operators</h5>
<p>
In this example, the WHERE clause affects only those titles that have year-to-date sales more than twice the advance given:</p>
<pre>WHERE advance * 2 &gt; ytd_sales
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Wildcard with the NOT LIKE Condition</h5>
<p>
In this example, only phone numbers that do not begin with the 415 prefix are affected in the results set:</p>
<pre>WHERE phone NOT LIKE '415%'
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Specific Character Wildcards with the LIKE Condition</h5>
<p>
This example finds the rows for authors named Carson, Carsen, Karsen, and Karson:</p>
<pre>WHERE au_lname LIKE '[CK]ars[eo]n'
</pre>
<h5>D.&nbsp;&nbsp;&nbsp;&nbsp;Boolean (OR) and Comparison Operators (&lt; and IS NULL)</h5>
<p>
This example finds titles that have an advance less than $5000 and includes those titles that have no specific advance entered (NULL values):</p>
<pre>WHERE advance &lt; $5000 OR advance IS NULL
</pre>
<h5>E.&nbsp;&nbsp;&nbsp;&nbsp;Grouping Boolean Expressions</h5>
<p>
Using parentheses always takes precedence over other operators. Without the parentheses, the following WHERE clause would have totally different meaning because AND takes a higher precedence than OR.</p>
<p>
This example affects only books with an advance greater than $5500 and are either business or psychology books. If the parentheses were not included, the WHERE clause would affect all business books OR psychology books that have an advance greater than $5500.</p>
<pre>WHERE (type = 'business' OR type = 'psychology') AND
    advance &gt; $5500
</pre>
<h5>F.&nbsp;&nbsp;&nbsp;&nbsp;Between Condition</h5>
<p>
This example returns all titles with year-to-date sales between and including 4095 through 12000.</p>
<pre>WHERE ytd_sales BETWEEN 4095 AND 12000
</pre>
<h5>G.&nbsp;&nbsp;&nbsp;&nbsp;IN Condition</h5>
<p>
This example finds the rows in which the state is California (CA), Indiana (IN), or Maryland (MD).</p>
<pre>WHERE state IN ('CA', 'IN', 'MD')
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="tsql07_4c1g.htm">DELETE</a></td>
<td width=52%><a href="tsql11_3qpf.htm">Operators</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql08_8dx0.htm">EXECUTE</a></td>
<td width=52%><a href="tsql12_654k.htm">SELECT</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql08_4aur.htm">Expressions</a></td>
<td width=52%><a href="tsql29_6mlw.htm">UPDATE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql09_9dyr.htm">Functions</a></td>
<td width=52%><a href="tsql30_6far.htm">Wildcard Characters</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql10_9alw.htm">INSERT</a></td>
<td width=52%></td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

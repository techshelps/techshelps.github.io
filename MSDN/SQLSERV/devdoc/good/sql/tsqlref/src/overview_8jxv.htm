<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Definition Language Enhancements</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_data_definition_language_enhancements"></a>Data Definition Language Enhancements</h2>
<p>
The Data Definition Language (DDL) refers to Transact-SQL statements used to define databases and database objects and to manage their properties. In SQL Server 6.0, DDL includes a significant number of statements. The feature areas with significant enhancements can be categorized as shown in the following table. The DDL enhancements are then described in detail.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%></th>
<th align=left width=52%></th>
</tr>
<tr valign=top>
<th align=left width=48%><br>
Feature area</th>
<th align=left width=52%>Related DDL statements and <br>
<i>Transact-SQL Reference</i> topics</th>
</tr>
<tr valign=top>
<td width=48%>Table definition</td>
<td width=52%>ALTER TABLE<br>
CREATE TABLE<br>
Constraints<br>
IDENTITY Property<br>
Data Integrity</td>
</tr>
<tr valign=top>
<td width=48%>View definition</td>
<td width=52%>CREATE VIEW</td>
</tr>
<tr valign=top>
<td width=48%>Dropping objects</td>
<td width=52%>All drop statements<br>
DROP DEFAULT<br>
DROP PROCEDURE<br>
DROP TABLE</td>
</tr>
<tr valign=top>
<td width=48%>Encrypted definition: procedures, triggers, and views </td>
<td width=52%>CREATE PROCEDURE<br>
CREATE TRIGGER<br>
CREATE VIEW<br>
<i>syscomments</i></td>
</tr>
<tr valign=top>
<td width=48%>Parameters</td>
<td width=52%>CREATE PROCEDURE</td>
</tr>
<tr valign=top>
<td width=48%>Local and global temporary objects: procedures and tables</td>
<td width=52%>CREATE PROCEDURE<br>
CREATE TABLE </td>
</tr>
</table><br>
<h3>Table Definition</h3>
<p>
The syntax for the CREATE TABLE and ALTER TABLE statements has been updated to include ANSI-standard constraints and the IDENTITY property. Constraints can enforce primary and foreign key references through declarative referential integrity (DRI) as well as other various aspects of data integrity: entity, domain, and user-defined. The IDENTITY property refers to a column attribute which defines a series of values to be used for inserts.</p>
<p>
Earlier releases of SQL Server supported only user-defined datatypes, defaults, rules, triggers, and stored procedures. SQL Server now supports all of these objects, and the table-definition syntax now includes a variety of extensions that achieve similar results without requiring separate object-creation and "binding" steps to enforce them. Constraint information is maintained in new system tables (<i>sysconstraints </i>and <i>sysreferences</i>). All of these options can be used together to provide efficient and effective data integrity.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=21%></th>
<th align=left width=26%></th>
<th align=left width=53%></th>
</tr>
<tr valign=top>
<th align=left width=21%></th>
<th align=left width=26%></th>
<th align=left width=53%></th>
</tr>
<tr valign=top>
<th align=left width=21%>Integrity <br>
type</th>
<th align=left width=26%>Earlier <br>
options</th>
<th align=left width=53%>Comparable, <br>
new options</th>
</tr>
<tr valign=top>
<td width=21%>Entity </td>
<td width=26%>Unique indexes</td>
<td width=53%>PRIMARY KEY and UNIQUE constraints, IDENTITY Property</td>
</tr>
<tr valign=top>
<td width=21%>Domain </td>
<td width=26%>Datatypes, defaults, rules</td>
<td width=53%>CHECK, DEFAULT and FOREIGN KEY constraints</td>
</tr>
<tr valign=top>
<td width=21%>Referential </td>
<td width=26%>Triggers</td>
<td width=53%>FOREIGN KEY constraints</td>
</tr>
<tr valign=top>
<td width=21%>User-defined<b> </b></td>
<td width=26%>Rules, triggers, stored procedures</td>
<td width=53%>All column- and table-level constraints in CREATE TABLE</td>
</tr>
</table><br>
<dl>
<dt>
<b>Entity Integrity</b></dt>
<dd>
Defines a row as a unique entity for a particular table. Entity integrity usually enforces the primary key of a table (through UNIQUE or PRIMARY KEY constraints or indexes).</dd>
<dt>
<b>Domain Integrity</b></dt>
<dd>
Refers to the valid entries for a given column. Domain integrity is enforced by restricting the datatype (through system or user-defined datatypes), format (through CHECK constraints and rules), or range of possible values (through FOREIGN KEY and CHECK constraints, and rules and NULL/NOT NULL declarations).</dd>
<dt>
<b>Referential Integrity</b></dt>
<dd>
Enforces the validity of data entered to ensure that it exists within a range of values within another table. With SQL Server 6.0, referential integrity is declarative with FOREIGN KEY constraints. (In earlier releases, the requirement to check the existence of a foreign key was programmatically defined through triggers.)</dd>
<dt>
<b>User-defined Integrity</b></dt>
<dd>
Allows specific business rules that don't fall into one of the above categories to also be defined. All options listed above support user-defined integrity.
</dd>
</dl>
<p>
The syntax for constraints includes support for specifying clustered or nonclustered indexes to support PRIMARY KEY and UNIQUE constraints. For more information about defining and manipulating constraints, and for information about the IDENTITY property, see the ALTER TABLE and CREATE TABLE statements.</p>
<h3>View Definition</h3>
<p>
Views provide an alternate method for looking at the data within a table or group of related tables. The CREATE VIEW statement in SQL Server 6.0 checks the validity of data updated through a view, and permits the use of the DISTINCT keyword in the definition of the view. For details, see the CREATE VIEW statement.</p>
<h3>Encrypted Definition and Passwords</h3>
<p>
Procedures, triggers, and views can be created with an optional (one way) encryption parameter that encrypts the definition text stored in <i>syscomments</i>. For details, see the CREATE PROCEDURE, CREATE TRIGGER, and CREATE VIEW statements. In addition, if passwords are stored (that is, not using integrated security), they are now always encrypted.</p>
<h3>Dropping Objects</h3>
<p>
The DROP <i>object_name</i> statements (DROP DEFAULT, DROP PROCEDURE, DROP TABLE, DROP TRIGGER, etc.) can now be executed by the database owner (DBO) or the system administrator (SA). The DBO and SA no longer need to use the SETUSER statement to drop objects. All other object owner functionality is maintained by the database object owner. The DBO and SA must continue to use SETUSER to perform tasks such as granting permissions.</p>
<h3>Parameters</h3>
<p>
When executing a stored procedure, the server will reject any parameters that were not included with the parameter list during procedure creation. Any parameter that is passed by reference (explicitly passing the parameter name) will not be accepted if the parameter name does not match. For details on creating procedures and passing parameters, see the CREATE PROCEDURE and EXECUTE statements.</p>
<h3>Local and Global Temporary Objects</h3>
<p>
Tables and stored procedures can be created for permanent access by any user who has appropriate permissions, or they can be created as temporary objects. You can create local and global temporary procedures or tables for use only in the current session or for use in all sessions. Local temporary objects are visible in the current session only; global temporary objects are visible to all sessions. Local temporary objects are automatically dropped at the end of the current session; global temporary objects are dropped at the end of the last session using the table (normally, this is when the session that created the object ends). For details, see the sections about the CREATE PROCEDURE and CREATE TABLE statements.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

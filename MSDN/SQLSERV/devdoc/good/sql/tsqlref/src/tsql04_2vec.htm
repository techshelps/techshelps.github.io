<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE RULE Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_create_rule_statement"></a>CREATE RULE Statement</h1>
<p>
Creates an object called a rule, which, when bound to a column or a user-defined datatype, specifies the acceptable values that can be inserted into that column. An alternative method to creating rules is to create table- and column-level CHECK constraints as described with the <a href="tsql04_5iwk.htm">CREATE TABLE</a>. Using constraints is the preferred method of restricting column data because multiple constraints can be defined on a column or multiple columns. A column or user-defined datatype can have only one rule bound to it. However, a column can have a rule and one or more CHECK constraints associated with it. When this is true, all restrictions are evaluated. </p>
<h4>Syntax</h4>
<p>
CREATE RULE [<i>owner</i><b>.</b>]<i>rule_name</i><br>
AS <i>condition_expression</i></p>
<p>
where
<dl>
<dt>
<i>rule_name</i></dt>
<dd>
Is the name of the new rule. Rule names must conform to the rules for identifiers. </dd>
<dt>
AS <i>condition_expression</i></dt>
<dd>
Specifies the conditions that define the rule. A rule can be any expression that is valid in a WHERE clause, and it can include such elements as arithmetic operators, relational operators, IN, LIKE, BETWEEN, and so on. It cannot reference columns or other database objects. Built-in functions that do not reference database objects can be included.
<p>
A <i>condition_expression</i> includes one variable. The at symbol (@) precedes each local variable. The expression refers to the value that is entered with the UPDATE or INSERT statement. You can use any name or symbol to represent the value when you write the rule, but the first character must be @.

</dd>
</dl>
<h4>Remarks</h4>
<p>
CREATE RULE statements cannot be combined with other SQL statements in a single batch. Rules do not apply to data already existing in the database at the time the rules are created, and rules cannot be bound to system datatypes. You can create a rule only in the current database. After creating a rule, execute the <a href="tsql18_2mhx.htm"><b>sp_bindrule</b> System Stored Procedure</a> to bind the rule to a column or to a user-defined datatype. </p>
<p>
The rule must be compatible with the datatype of the column. You cannot bind a rule to a <i>text</i>, <i>image</i>, or <i>timestamp</i> column. Be sure to enclose character and date constants with single quotation marks (<b>'</b>) and to precede binary constants with 0x. For example, you cannot use "@value like A%" as a rule for a numeric column. If the rule is not compatible with the column to which you've bound it, SQL Server returns an error message when you try to insert a value (not when you bind the rule).</p>
<p>
A rule bound to a user-defined datatype is activated only when you attempt to insert a value into or to update a database column of the user-defined datatype. Because rules do not test variables, do not assign a value to a user-defined datatype variable that would be rejected by a rule bound to a column of the same datatype.</p>
<p>
To get a report on a rule, use the <a href="tsql22_73l1.htm"><b>sp_help </b>System Stored Procedure</a>. To display the text of a rule, execute the <a href="tsql23_0fad.htm"><b>sp_helptext</b> System Stored Procedure</a> with the rule name as the parameter. To rename a rule, use the <a href="tsql24_0sx1.htm"><b>sp_rename</b> System Stored Procedure</a>. </p>
<p>
You must drop a rule (using the <a href="tsql07_8pys.htm">DROP RULE</a>) before you can create a new one with the same name, and you must unbind a rule (using the <a href="tsql24_8x9h.htm"><b>sp_unbindrule</b> System Stored Procedure</a>) before you drop it. Use the <a href="tsql24_8x9h.htm"><b>sp_unbindrule</b> System Stored Procedure</a> to unbind a rule from a column. </p>
<p>
You can bind a new rule to a column or datatype without unbinding the previous one; the new rule overrides the previous one. Rules bound to columns always take precedence over rules bound to user-defined datatypes. Binding a rule to a column replaces a rule already bound to the user-defined datatype of that column. But binding a rule to a datatype does not replace a rule bound to a column of that user-defined datatype. The following table shows the precedence in effect when binding rules to columns and to user-defined datatypes where rules already exist:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%></th>
<th align=left colspan=2 width=69%></th>
</tr>
<tr valign=top>
<th align=left width=31%></th>
<th align=left colspan=2 width=69%>Old rule bound to</th>
</tr>
<tr valign=top>
<th align=left width=31%></th>
<th align=left width=34%></th>
<th align=left width=35%></th>
</tr>
<tr valign=top>
<th align=left width=31%>New rule bound to</th>
<th align=left width=34%>User-defined datatype</th>
<th align=left width=35%>Column</th>
</tr>
<tr valign=top>
<td width=31%>User-defined datatype</td>
<td width=34%>Old rule replaced</td>
<td width=35%>No change</td>
</tr>
<tr valign=top>
<td width=31%>Column</td>
<td width=34%>Old rule replaced</td>
<td width=35%>Old rule replaced</td>
</tr>
</table><br>
<p>
If a column has both a default and a rule associated with it, the default must fall within the domain defined by the rule. A default that conflicts with a rule is never inserted. SQL Server generates an error message each time it attempts to insert such a default.</p>
<h4>Permission</h4>
<p>
CREATE RULE permission defaults to the database owner, who can transfer it to other users.</p>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Rule with a Range</h5>
<p>
This example creates a rule that restricts the range of integers inserted into the column(s) to which this rule is bound. </p>
<pre>CREATE RULE range_rule
AS 
@range &gt;= $1000 AND @range &lt; $20000</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Rule with a List</h5>
<p>
This example creates a rule that restricts the actual values entered into the column(s) to which this rule is bound to only those listed in the rule.</p>
<pre>CREATE RULE list_rule
AS 
@list IN ('1389', '0736', '0877')</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;Rule with a Pattern</h5>
<p>
This example creates a rule to follow a pattern of any two characters followed by a hyphen, any number of characters (or no characters), and ending with an integer between 0 and 9.</p>
<pre>CREATE RULE pattern_rule 
@value LIKE '_ _-%[0-9]'
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql01_9i9f.htm">Batch Queries</a></td>
<td width=52%><a href="tsql22_73l1.htm"><b>sp_help </b>System Stored Procedure</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql02_7ddg.htm">CREATE DEFAULT</a></td>
<td width=52%><a href="tsql23_0fad.htm"><b>sp_helptext </b>System Stored Procedure</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql07_619w.htm">DROP DEFAULT</a></td>
<td width=52%><a href="tsql24_0sx1.htm"><b>sp_rename </b>System Stored Procedure</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql07_8pys.htm">DROP RULE</a></td>
<td width=52%><a href="tsql24_8x9h.htm"><b>sp_unbindrule </b>System Stored Procedure</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql18_2mhx.htm"><b>sp_bindrule </b>System Stored Procedure</a></td>
<td width=52%><a href="tsql30_6far.htm">Wildcard characters</a></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UNION Operator</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_union_operator"></a>UNION Operator </h1>
<p>
In SQL Server 6.5, new behavior is introduced for the UNION Operator due to ANSI-NULL handling.For SQL Server 6.5 information, see <a href="../../hydra/tsql/src/addnfeat_1ysn.htm">ANSI-standard Null Handling</a> in <i>What's New for SQL Server 6.5</i>.</p>
<p>
Combines the results of two or more queries into a single results set consisting of all the rows belonging to all queries in the union.</p>
<h4>Syntax</h4>
<p>
SELECT <i>select_list</i> [INTO clause] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[FROM clause] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[WHERE clause] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[GROUP BY<i> </i>clause] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[HAVING clause] <br>
[UNION [ALL] <br>
SELECT <i>select_list <br>
&nbsp;&nbsp;&nbsp;&nbsp;</i>[FROM clause] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[WHERE clause] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[GROUP BY clause] <br>
&nbsp;&nbsp;&nbsp;&nbsp;[HAVING clause]...] <br>
[ORDER BY clause] <br>
[COMPUTE clause]</p>
<p>
where
<dl>
<dt>
INTO</dt>
<dd>
Creates a new table based on the columns specified in the select list and the rows chosen in the WHERE clause. The first query in the Transact-SQL statement is the only one that can contain an INTO clause.</dd>
<dt>
UNION</dt>
<dd>
Is a set operation that requires two operands.</dd>
<dt>
ALL</dt>
<dd>
Incorporates all rows into the results, including duplicates.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Because UNION is a binary operation, you must add parentheses to an expression involving more than two queries to specify evaluation order. The default evaluation order of a Transact-SQL statement containing UNION operators is left to right. By default duplicate rows are eliminated; however, using UNION with the ALL keyword returns all rows, including duplicates.</p>
<p>
The first query in the UNION statement can contain an INTO clause that creates a table to hold the final results set. The INTO statement must be in the first query or an error message will be returned. </p>
<p>
GROUP BY and HAVING clause<i>s</i> can be used only within individual queries and cannot be used to affect the final results set. ORDER BY and COMPUTE clause<i>s</i> are allowed only at the end of the UNION statement to define the order of the final results or to compute summary values.</p>
<p>
The UNION operator cannot appear within a CREATE VIEW statement or within a subquery. You cannot specify the FOR BROWSE option in queries with the UNION operator.</p>
<p>
The UNION operator can appear within an INSERT-SELECT statement. For example:</p>
<pre>INSERT INTO salesall
    SELECT * FROM sales
    UNION
    SELECT * FROM saleseast</pre>
<p>
All select lists in a Transact-SQL statement must have the same number of expressions (such as column names, arithmetic expressions, and aggregate functions). For example, the following statement is invalid because the first select list is longer than the second:</p>
<pre>SELECT au_id, title_id, au_ord FROM titleauthor
UNION
SELECT stor_id, date FROM sales
</pre>
<p>
Corresponding columns in the individual queries of a UNION statement must occur in the same order, because UNION compares the columns one to one in the order given in the individual queries.</p>
<p>
The descriptions of the columns that are part of a UNION operation do not have to be identical. The following table shows the rules for comparing the datatypes and options of corresponding (<i>ith</i>) columns.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%></th>
<th align=left width=50%></th>
</tr>
<tr valign=top>
<th align=left width=50%></th>
<th align=left width=50%></th>
</tr>
<tr valign=top>
<th align=left width=50%><br>
Datatype of <i>ith</i> column</th>
<th align=left width=50%>Datatype of <i>ith</i> column of <br>
results table</th>
</tr>
<tr valign=top>
<td width=50%></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%>Not datatype-compatible (data conversion not handled implicitly by SQL Server).</td>
<td width=50%>Error returned by SQL Server.</td>
</tr>
<tr valign=top>
<td width=50%>Both fixed-length <i>char</i> with lengths L1 and L2.</td>
<td width=50%>Fixed-length <i>char</i> with length equal to the greater of L1 and L2.</td>
</tr>
<tr valign=top>
<td width=50%>Both fixed-length <i>binary</i> with lengths L1 and L2.</td>
<td width=50%>Fixed-length <i>binary</i> with length equal to the greater of L1 and L2.</td>
</tr>
<tr valign=top>
<td width=50%>Either or both variable-length <i>char</i>.</td>
<td width=50%>Variable-length <i>char</i> with length equal to the maximum of the lengths specified for the <i>ith</i> columns.</td>
</tr>
<tr valign=top>
<td width=50%>Either or both variable-length <i>binary</i>.</td>
<td width=50%>Variable-length <i>binary</i> with length equal to the maximum of the lengths specified for the <i>ith</i> columns.</td>
</tr>
<tr valign=top>
<td width=50%>Both numeric datatypes (for example, <i>smallint</i>, <i>int</i>, <i>float</i>, <i>money</i>).</td>
<td width=50%>Datatype equal to the maximum precision of the two columns. For example, if the <i>ith</i> column of table A is of type <i>int</i> and the <i>ith</i> column of table B is of type <i>float</i>, then the datatype of the <i>ith</i> column of the results table is <i>float</i>, because <i>float</i> is more precise than <i>int</i>.</td>
</tr>
<tr valign=top>
<td width=50%>Both columns' descriptions specify NOT NULL.</td>
<td width=50%>Specifies NOT NULL.</td>
</tr>
</table><br>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Simple UNION</h5>
<p>
The results set in this example includes the contents of the <i>stor_id</i> and <i>stor_name</i> columns of both the <i>stores</i> and <i>storeseast</i> tables.</p>
<pre>SELECT stor_id, stor_name FROM stores
UNION
SELECT stor_id, stor_name FROM storeseast
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Selecting INTO with UNION</h5>
<p>
In this example, the INTO clause in the first query specifies that the table called <i>results</i> hold the final results set of the union of the designated columns of the <i>publishers</i>, <i>stores</i>, and <i>storeseast</i> tables.</p>
<pre>SELECT pub_id, pub_name, city INTO results FROM publishers
UNION
SELECT stor_id, stor_name, city FROM stores
UNION
SELECT stor_id, stor_name, city FROM storeseast
</pre>
<h5>C.&nbsp;&nbsp;&nbsp;&nbsp;UNION of Two SELECT Statements with ORDER BY</h5>
<p>
The order of certain parameters used with the UNION clause is important. This example illustrates the incorrect and correct usage of UNION in two SELECT statements in which a column is to be renamed in the output.</p>
<pre>/* INCORRECT */
SELECT city FROM storeseast
    ORDER BY cities
UNION
SELECT cities = city FROM stores

/* CORRECT */
SELECT cities = city FROM storeseast
UNION
SELECT city FROM stores
ORDER BY cities
</pre>
<h4>See Also</h4>
<p>
<a href="tsql12_654k.htm">Select</a>  </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

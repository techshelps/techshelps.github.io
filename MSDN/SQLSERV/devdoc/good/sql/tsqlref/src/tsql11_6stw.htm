<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RAISERROR Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_raiserror_statement"></a>RAISERROR Statement </h1>
<p>
For SQL Server 6.5 information, see <a href="../../hydra/tsql/src/addnfeat_4cdw.htm">RAISERROR Statement</a> in the <i>What's New for SQL Server 6.5</i>.</p>
<p>
Returns a user-defined error message and sets a system flag to record that an error has occurred. RAISERROR lets the client retrieve an entry from the <i>sysmessages</i> table or build a message dynamically with user-specified severity and state information. Once defined, this message is sent back to the client as a server error message.</p>
<p>
The RAISERROR statement has been updated in SQL Server 6.0. The earlier syntax structure is supported for compatibility.</p>
<h4>Syntax</h4>
<p>
RAISERROR ({<i>msg_id</i> | <i>msg_str</i>}<b>,</b> <i>severity</i><b>,</b> <i>state</i><br>
[<b>,</b> <i>argument1</i> [<b>, </b><i>argument2</i>]] )<br>
[WITH LOG]</p>
<p>
where
<dl>
<dt>
<i>msg_id</i></dt>
<dd>
Is a user-defined error message stored in the <i>sysmessages</i> table. To add user-defined error messages, use <b>sp_addmessage</b> system stored procedure. To delete user-defined error messages, use <b>sp_dropmessage</b> system stored procedure. If a <i>sysmessages </i>error is used and the message was created using the format shown for <i>msg_str</i>, then supplied arguments (<i>argument1</i>, <i>argument2</i>, and so on) will be passed to the message of the supplied <i>msg_id</i>. Error numbers for user-defined error messages should be greater than 50,000. Ad hoc messages will raise an error of 50,000. The maximum value is 2,147,483,647 (2 (31)  - 1).
<p>
When an error is raised, the error number is placed in the global variable @@ERROR, which stores the error number most recently generated by the system. 
</dd>
<dt>
<i>msg_str</i></dt>
<dd>
Is an ad hoc message with formatting similar to the C PRINTF format style. The error message can have as many as 255 characters. All ad hoc messages will have one standard message ID of 14000. 
<p>
The following format is supported for <i>msg_str</i>:

<p>
% [[<i>flag</i>] [<i>width</i>] [<i>precision</i>] [{h | l}]] <i>type</i>

<p>
where

<dl>
<dt>
<i>flag</i></dt>
<dd>
Determines the spacing and justification.

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=17%></th>
<th align=left width=37%></th>
<th align=left width=46%></th>
</tr>
<tr valign=top>
<th align=left width=17%>Code</th>
<th align=left width=37%>Prefix or Justification</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=17%>- (minus)</td>
<td width=37%>Left-justified</td>
<td width=46%>Left-justify the result within the given field width.</td>
</tr>
<tr valign=top>
<td width=17%>(plus)</td>
<td width=37%>(plus) or - (minus) prefix</td>
<td width=46%>Preface the output value with a sign (+ or -) if the output value is of signed type.</td>
</tr>
<tr valign=top>
<td width=17%>0 (zero)</td>
<td width=37%>Zero padding</td>
<td width=46%>If width is prefaced with 0, zeros are added until the minimum width is reached. If 0 and - appear, 0 is ignored. If 0 is specified with an integer format (i, u, x, X, o, d), 0 is ignored.</td>
</tr>
<tr valign=top>
<td width=17%># (number)</td>
<td width=37%>0x prefix for hexadecimal type of x or X</td>
<td width=46%>When used with the o, x, or X format, the # flag prefaces any nonzero value with 0, 0x, or 0X, respectively. When d, i, or u are prefaced by the # flag, the flag is ignored.</td>
</tr>
<tr valign=top>
<td width=17%><b>' '</b> (blank)</td>
<td width=37%>Space padding</td>
<td width=46%>Preface the output value with blank spaces if the value is signed and positive. This will be ignored if included with the + flag.</td>
</tr>
</table><br>

</dd>
<dt>
<i>width</i></dt>
<dd>
Defines the minimum width. An asterisk (*) allows the following argument to determine the width.</dd>
<dt>
<i>precision</i></dt>
<dd>
Specifies the maximum number of characters printed for the output field or the minimum number of digits printed for integer values. An asterisk (*) allows the argument to determine the precision.</dd>
<dt>
{h | 1} <i>type</i></dt>
<dd>
Used with types d, i, o, x, X, or u, creates <i>short int</i> (h) or <i>long int</i> values (l).
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%></th>
<th align=left width=72%></th>
</tr>
<tr valign=top>
<th align=left width=28%>Type</th>
<th align=left width=72%>Represents</th>
</tr>
<tr valign=top>
<td width=28%>d or i</td>
<td width=72%>Signed integer</td>
</tr>
<tr valign=top>
<td width=28%>o</td>
<td width=72%>Unsigned octal</td>
</tr>
<tr valign=top>
<td width=28%>p</td>
<td width=72%>Pointer</td>
</tr>
<tr valign=top>
<td width=28%>s</td>
<td width=72%>String</td>
</tr>
<tr valign=top>
<td width=28%>u</td>
<td width=72%>Unsigned integer</td>
</tr>
<tr valign=top>
<td width=28%>x or X</td>
<td width=72%>Unsigned hexadecimal</td>
</tr>
</table><br>

</dd>
</dl>
</dd>
</dl>
<p>
Note that float, double-, and single-character types are not supported.
<dl>
<dt>
<i>severity</i></dt>
<dd>
Represents the user-defined severity level associated with this message. Severity levels from 0 through 18 can be used by any user. For severity levels 19 through 25, the WITH LOG option is required. Only the system administrator can issue RAISERROR with a severity level of 19 through 25. For a list of SQL Server error severity levels, see the <i>Microsoft SQL Server Administrator's Companion</i>

<p>
<b>Caution</b>  For a severity of 19 through 25, which are considered "fatal," the client connection will be terminated after receiving the message and the error will be logged in the error log and the event log.

</dd>
<dt>
<i>state</i></dt>
<dd>
Is an integer value from 1 through 127 that represents information about the invocation state of the error. A negative value for <i>state </i>will default to 1.</dd>
<dt>
<i>argument</i></dt>
<dd>
Defines the parameters used in the substitution for variables defined in the <i>msg_str</i> or the message corresponding to the <i>msg_id</i>. There can be zero or more substitution parameters; however, the total number of substitution parameters cannot exceed 20. Each substitution parameter can be a local variable or any of these datatypes: <i>int1</i>, <i>int2</i>, <i>int4</i>, <i>char</i>, <i>varchar</i>, <i>binary</i>, or <i>varbinary</i>. No other datatypes are supported.</dd>
<dt>
WITH LOG</dt>
<dd>
Logs the error in the server error log and the event log. This option is required for messages with a severity of 19 through 25, and it can be issued only by the system administrator. The <b>xp_eventlog</b> extended stored procedure provides similar functionality. </dd>
</dl>
<h4>Examples</h4>
<h5>A.&nbsp;&nbsp;&nbsp;&nbsp;Ad Hoc Messages</h5>
<p>
This example shows two errors that can be raised. The first is a simple error with a static message. The second error is dynamically built based on the attempted modification.</p>
<pre>CREATE TRIGGER employee_insupd
ON employee
FOR INSERT, UPDATE
AS
/* Get the range of level for this job type from the jobs table. */
DECLARE @min_lvl tinyint,
    @max_lvl tinyint,
    @emp_lvl tinyint,
    @job_id smallint
SELECT @min_lvl = min_lvl, 
    @max_lvl = max_lvl, 
    @emp_lvl = i.job_lvl,
    @job_id = i.job_id
FROM employee e, jobs j, inserted i 
WHERE e.emp_id = i.emp_id AND i.job_id = j.job_id
IF (@job_id = 1) and (@emp_lvl &lt;&gt; 10) 
BEGIN
    RAISERROR ('Job id 1 expects the default level of 10.',16,-1)
    ROLLBACK TRANSACTION
END
ELSE
IF NOT (@emp_lvl BETWEEN @min_lvl AND @max_lvl)
BEGIN
    RAISERROR ('The level for job_id:%d should be between %d and %d.',
        16, -1, @job_id, @min_lvl, @max_lvl)
    ROLLBACK TRANSACTION
END
</pre>
<h5>B.&nbsp;&nbsp;&nbsp;&nbsp;Messages Raised from <i>sysmessages</i></h5>
<p>
This example shows how the <i>employee_insupd</i> trigger could achieve the same results using parameters passed to a message stored in the <i>sysmessages</i> table. The message was added to the <i>sysmessages</i> table with the <b>sp_addmessage </b>system stored procedure as message number 50005.</p>
<pre>RAISERROR (50005, 16, -1, @@job_id, @@min_lvl, @@max_lvl)
</pre>
<h4>See Also</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%><a href="tsql05_92es.htm">DECLARE</a></td>
<td width=52%><a href="tsql21_3ffp.htm"><b>sp_dropmessage</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql11_6gl0.htm">PRINT</a></td>
<td width=52%><a href="tsql30_6e5v.htm">Variables</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="tsql18_076t.htm"><b>sp_addmessage</b></a></td>
<td width=52%><a href="tsql14_7nj9.htm"><b>xp_logevent</b></a></td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

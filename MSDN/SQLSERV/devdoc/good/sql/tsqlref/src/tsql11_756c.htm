<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LOAD Statement</title>
<link disabled rel=stylesheet href=../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_load_statement"></a>LOAD Statement </h1>
<p>
For SQL Server 6.5 information, see <a href="../../hydra/tsql/src/addnfeat_94qc.htm">LOAD Statement</a> in <i>What's New for SQL Server 6.5</i>.</p>
<p>
Restores a backup copy of a user database and its transaction log (LOAD DATABASE) or only the transaction log (LOAD TRANSACTION) from a dump that was created using the DUMP statement. The LOAD statement can also be used to retrieve header information from a database dump (LOAD HEADERONLY).</p>
<h4>Syntax</h4>
<p>
<b>Loading a database:</b></p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;LOAD DATABASE {<i>dbname</i> | <i>@dbname_var</i>}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM <i>dump_device </i>[<b>,</b> <i>dump_device2 </i>[...<b>,</b> <i>dump_device32</i>]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[WITH <i>options </i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[[<b>,</b>] STATS [ <b>=</b> <i>percentage</i>]]]</p>
<p>
<b>Loading a transaction log:</b></p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;LOAD TRANSACTION {<i>dbname</i> | <i>@dbname_var</i>} <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM <i>dump_device </i>[<b>,</b> <i>dump_device2 </i>[...<b>,</b> <i>dump_device32</i>]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;[WITH <i>options</i>]</p>
<p>
<b>Loading header information:</b></p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;LOAD HEADERONLY<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM <i>dump_device</i></p>
<p>
where
<dl>
<dt>
<i>dump_device </i>=</dt>
<dd>
{ <i>dump_device_name </i>| <i>@dump_device_namevar</i>} <br>
| {DISK | TAPE | FLOPPY | PIPE}<b> = <br>
</b>{<b>'</b><i>temp_dump_device</i><b>'</b> | <i>@temp_dump_device_var</i>}} <br>
[VOLUME <b>=</b> {<i>volid</i> | <i>@volid_var</i>}]</dd>
<dt>
<i>options </i>=</dt>
<dd>
[[<b>,</b>] {UNLOAD | NOUNLOAD}]<br>
[[<b>,</b>] {SKIP | NOSKIP}]<br>
[[<b>,</b>] {FILE = <i>fileno</i>}]</dd>
<dt>
DATABASE</dt>
<dd>
Specifies that the complete database and transaction log are to be restored. </dd>
<dt>
TRANSACTION</dt>
<dd>
Specifies that only the transaction log is to be applied to this database. Transaction logs must be applied in sequential order. SQL Server checks the timestamps on the dumped transaction log to make sure that the transactions are being loaded into the correct database and in the correct sequence.</dd>
<dt>
HEADERONLY</dt>
<dd>
Retrieves all the volume and dump header information for all dumps on a particular dump device. For details about the header information returned, see "Volume and Header Information," later in this topic.</dd>
<dt>
<i>dbname</i> | <i>@dbname_var</i></dt>
<dd>
Specifies the database from which the transaction log or complete database is being dumped. This name can be specified as a string or as a <i>char</i> or <i>varchar</i> variable.</dd>
<dt>
<i>dump_device_name</i> | <i>@dump_device_namevar</i></dt>
<dd>
Is the logical name of the dump device as created by <b>sp_addumpdevice</b>. The dump device name can be specified as a string or as a <i>char</i> or <i>varchar</i> variable.</dd>
<dt>
<i>fileno</i></dt>
<dd>
Is the specific file number to be loaded from the tape or disk device that contains multiple database dumps. The default is 1; load the first dump on the device. </dd>
<dt>
{DISK | TAPE | FLOPPY | PIPE}<b> = </b></dt>
<dd>

<dl>
<dt>
<b>'</b><i>temp_dump_device</i><b>'</b> | <i>@temp_dump_device_var</i></dt>
</dl>

<p>
Allows backups to be loaded directly from temporary dump devices. These devices must already exist when the load occurs; they do not have entries in <i>sysdevices</i>.<b> </b>The device types of DISK, TAPE, and FLOPPY should be specified with the actual address (for example, complete path and filename) of the device. A device type of PIPE should specify the name of the named pipe that will be used by the client application. If specified as a variable (<i>@temp_dump_dev_var</i>), the device name can be specified as a string or as a <i>char</i> or <i>varchar</i> variable. If you are using either a network server with a UNC name or a redirected drive letter, specify a device type of DISK.


<p>
<b>Important</b>  When specifying a striped dump, you can use both logical device names (or variables) and temporary device names (or variables). PIPE devices have been added to allow third-party vendors a flexible and powerful way to connect their own software. For typical Transact-SQL use, the PIPE device will not be used. 

</dd>
<dt>
VOLUME = <i>volid</i> | <i>@volid_var</i></dt>
<dd>
Specifies the volume ID, <i>volid</i>, a 6-byte character string. If dumping to a new tape, this value is the name of the ANSI VOL1 label. For SQL Server, the default is SQ0001. For subsequent dumps, this value is used to validate the volume name of the dump device. If specified as a variable (<i>@volid_var</i>), the volume name can be specified as a string or as a <i>char</i> or <i>varchar</i> variable. It is not necessary, or recommended, to explicitly specify the volume ID.</dd>
<dt>
UNLOAD</dt>
<dd>
Specifies that the tape is automatically rewound and unloaded when the dump is finished. UNLOAD is set by default when a new user session is started. It remains set until that user specifies NOUNLOAD. This option is used only for tape devices.</dd>
<dt>
NOUNLOAD</dt>
<dd>
Specifies that the tape will not be unloaded automatically from the tape drive after a dump. NOUNLOAD remains set until UNLOAD is specified. This option is used only for tape devices.</dd>
<dt>
SKIP</dt>
<dd>
Instructs the server not to read the ANSI TAPE device headers.</dd>
<dt>
NOSKIP</dt>
<dd>
Specifies that the server will read ANSI TAPE device headers. This is the default.</dd>
<dt>
STATS <b>=</b> <i>percentage</i></dt>
<dd>
Returns the percentage of pages loaded in increments optionally set at the time of the load. If the <i>percentage</i> is not specified the statistics will be shown for each 10 percent of the load. This option is available only for database loads.
</dd>
</dl>
<h4>Remarks</h4>
<p>
During the load, the specified database must not be in use. Any data in the specified database is replaced by the loaded data.</p>
<p>
You can use LOAD DATABASE to move a database to another device or another server as long as the same code page and sort order are running on both servers. If the code page or sort order differs, use the SQL Transfer Manager to move the data. If the sort order and code page are the same, the recipient database must be as large as, or larger than, the database to be loaded. If the recipient database is too small, SQL Server displays an error message that gives the required size. The device fragments that the new database uses for data and for the log must appear in the same order and have the same amount of space as the fragments in the original database. For example, if the original database had 10 MB of data (on any number of fragments), followed by 3 MB of log, followed by 6 more MB of space for data, the new database must have the same order by space and usage: that is, 10 MB for data, 3 for log, and 6 (or more) for data. The total size of the destination database must be at least as large and have at least as many fragments (assigned in the same order and have the same uses) as the load. </p>
<p>
If the dumped database uses segments to store particular tables or indexes, the new database must include devices of the same size and page order for these segments and their related data in order for LOAD statement to work correctly. Execute the <b>sp_helpdb</b> system stored procedure with the database name to see the size and fragments. Select from the <i>sysusages</i> system table to determine the order of the device fragments. Then re-execute the CREATE DATABASE statement and the ALTER DATABASE statement to re-establish the fragments. For details on using the LOAD statement to restore or move databases, see the <i>Microsoft SQL Server Administrator's Companion</i>.</p>
<p>
If a database will be loaded into a newly created database, use CREATE DATABASE FOR LOAD when creating the new database. The FOR LOAD option specifies that the data pages will not be zero-initialized because the only operations allowed against that database are ALTER DATABASE FOR LOAD or LOAD DATABASE. Any unused data pages will be initialized by the database load. For more information, see the CREATE DATABASE statement.</p>
<p>
For compatibility, user database dumps from SQL Server 4.2<i>x</i> can be loaded into SQL Server 6.0, as long as the same sort order is running on both SQL Servers. The user database dump (the <i>master</i> database is not allowed to be loaded or upgraded from SQL Server 4.2<i>x</i> dumps) must be a full database dump, not a transaction log dump, and the dump must occur when there is no update activity taking place in the database. For this reason, it is recommended that the dump occur when SQL Server is started in single-user mode. After the database is successfully loaded, the database will be upgraded. For more information about database upgrades and potential compatibility issues, see <i>Microsoft SQL Server Setup</i>.</p>
<p>
<b>Important</b>  Cross-platform dumping and loading is not supported. For example, a database dumped on a MIPS-based computer cannot be loaded into an Intel-based computer. If you need to move data from one platform to another, use the Microsoft SQL Transfer Manager. </p>
<h4>Permission</h4>
<p>
LOAD DATABASE and LOAD TRANSACTION permission default to the database owner and are not transferable. </p>
<p>&nbsp;</p></body>
</HTML>

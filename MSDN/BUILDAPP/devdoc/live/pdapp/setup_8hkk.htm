<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Entries to the Registry</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_adding_entries_to_the_registry_pt"></a>Adding Entries to the Registry</h2>
<p>
Your installation program should add information about your application to the registry. <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_msi_roadmap_to_installer_technology_documentation">
</object><a href=JavaScript:alink_1.Click()>Microsoft Installer Technology</a>, provides an easy way to make the necessary registry entries. In particular, you should always add the following entries.
<dl>
<dt>
<b>HKEY_LOCAL_MACHINE</b>\<b>SOFTWARE</b>\<i>CompanyName</i>\<i>ProductName</i>\<i>Version</i></dt>
<dd>
Stores information pertaining to this particular copy of the application. </dd>
<dt>
<b>HKEY_CURRENT_USER</b>\<b>SOFTWARE</b></dt>
<dd>
Stores user-specific preferences. This is information that application vendors used to store in the WIN.INI file. For example Microsoft Word might store the fact that a user wants the automatic save feature turned off here.
</dd>
</dl>
<p>
Your installation program should always add application-specific paths to the registry for your application. If your installation program registers a path, Windows sets the PATH environment to be the registered path when it starts your application. Your program sets the path in the <b>HKEY_LOCAL_MACHINE</b> root under the \<b>SOFTWARE</b>\<b>Microsoft</b>\<b>Windows</b>\<b>CurrentVersion</b>\<b>AppPaths</b> key (using the <b>REGSTR_PATH_APPPATHS</b> macro). Your installation program must create a new key having the same name as your application's executable file. Under this new key, it creates the Path value name and assigns it a path using the same format as expected by the PATH environment variable. </p>
<p>
The following example shows application-specific paths for both Windows® Excel, Excel.Exe, and My Wizzy Application.Exe.</p>
<pre><code>HKEY_LOCAL_MACHINE
  SOFTWARE\Microsoft\Windows\CurrentVersion\AppPaths
    Excel.Exe 
      Default=D:\Program Files\MS Office\Excel\Excel.Exe
      Path= D:\Program Files\MS Office\Excel\Excel.Exe;D:\Program 
          Files\Common Files\MS Office;

    My Wizzy App.Exe
         Default=d:\Program Files\My Wizzy Application\My Wizzy
             Application.Exe
         Path= D:\Program Files\My Wizzy Application;D:\Program Files\My
             Wizzy Application\Application Extensions;
 </code></pre>
<p>
In the preceding example, the Default value specifies the full path to the corresponding executable file. This value is typically used by Windows in the Start Run command. If the user types the name of your application but Windows fails to find it in the current path, Windows uses this value to locate and start your application. </p>
<p>
If you use <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_msi_roadmap_to_installer_technology_documentation">
</object><a href=JavaScript:alink_2.Click()>Microsoft Installer Technology</a>, you should not try to keep track of shared DLLs. Microsoft installer technology keeps track of them for you. However, if you don't use Microsoft installer technology, your application must keep track of its use of shared DLLs itself. When installing an application that uses shared DLLs, it should increment the usage counter for the DLL in the registry. When removing an application, it should decrement the usage counter. If the result is zero, the user should be given the option of deleting the DLL. The user should be warned that other applications may actually need the DLL and will not work if it is missing. The following example shows the general format for usage counters in the registry.</p>
<pre><code>\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\SharedDLLs
    C:\Program Files\Common Files\System\vbrun300.DLL=3
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

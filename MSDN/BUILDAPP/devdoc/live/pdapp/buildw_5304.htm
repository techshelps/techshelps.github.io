<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Linking</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_linking_pt"></a>Linking</h1>
<p>
WIN32.MAK contains the following macros to simplify linking applications:
<ul>
<li>
<b>$(LINK)</b><p>
This macro is used to invoke the linker. It expands to the following flags:
<pre><code>link
 </code></pre>
</li>
<li>
<b>$(LDEBUG)</b><p>
This macro is used for for specifying debugging, profiling, and tuning linker flags. When specifying debug, but no profiling or tuning, it expands to the following flags:
<pre><code>-debug:full -debugtype:cv
 </code></pre>
</li>
</ul>
<p>
Use one of the following flags, depending on whether you are building a console application or a GUI application:
<ul>
<li>
<b>$(CONLFLAGS)</b><p>
This macro is used for console applications. It is platform dependent. On x86 machines, it expands to the following flags:
<pre><code>-/NODEFAULTLIB /INCREMENTAL:NO /PDB:NONE /RELEASE /NOLOGO 
-align:0x1000 -subsystem:console,4.0 -entry:mainCRTStartup
 </code></pre>
</li>
<li>
<b>$(GUIFLAGS)</b><p>
This macro is used for GUI applications. it is platform dependent. On x86 machines, it expands to the following flags:
<pre><code>-/NODEFAULTLIB /INCREMENTAL:NO /PDB:NONE /RELEASE /NOLOGO 
-align:0x1000 -subsystem:windows,4.0 -entry:WinMainCRTStartup
 </code></pre>
</li>
</ul>
<p>
Notice that these macros provide entry points in the CRT libraries. These CRT entry points will call your entry-point function (main or WinMain).</p>
<p>
Use one of the following flags if you are using the single-threaded CRT:
<ul>
<li>
<b>$(CONLIBS)</b><p>
This macro is for console applications using LIBC.LIB. It expands to the following list of libraries:
<pre><code>LIBC.LIB OLDNAMES.LIB KERNEL32.LIB ADVAPI32.LIB
 </code></pre>
</li>
<li>
<b>$(GUILIBS)</b><p>
This macro is used for GUI application using LIBC.LIB. It expands to the following list of libraries:
<pre><code>LIBC.LIB OLENAMES.LIB KERNEL32.LIB ADVAPI32.LIB USER32.LIB GDI32.LIB COMDLG32.LIB WINSPOOL.LIB
 </code></pre>
</li>
</ul>
<p>
Use one of the following flags if you are using the multithreaded CRT:
<ul>
<li>
<b>$(CONLIBSMT)</b><p>
This macro is for console applications using LIBCMT.LIB. It expands to the following list of libraries:
<pre><code>LIBCMT.LIB OLDNAMES.LIB KERNEL32.LIB ADVAPI32.LIB
 </code></pre>
</li>
<li>
<b>$(GUILIBSMT)</b><p>
This macro is used for GUI application using LIBCMT.LIB. It expands to the following list of libraries:
<pre><code>LIBCMT.LIB OLDNAMES.LIB KERNEL32.LIB ADVAPI32.LIB USER32.LIB GDI32.LIB COMDLG32.LIB WINSPOOL.LIB
 </code></pre>
</li>
</ul>
<p>
Use one of the following flags if you are using the CRT in a DLL:
<ul>
<li>
<b>$(CONLIBSDLL)</b><p>
This macro is for console applications using MSVCRT.LIB. It expands to the following list of libraries:
<pre><code>MSVCRT.LIB OLDNAMES.LIB KERNEL32.LIB ADVAPI32.LIB
 </code></pre>
</li>
<li>
<b>$(GUILIBSDLL)</b><p>
This macro is used for GUI application using MSVCRT.LIB. It expands to the following list of libraries:
<pre><code>MSVCRT.LIB OLDNAMES.LIB KERNEL32.LIB ADVAPI32.LIB USER32.LIB GDI32.LIB COMDLG32.LIB WINSPOOL.LIB
 </code></pre>
</li>
</ul>
<p>
The following example links the object files and libraries to produce the application executable file. Note that the resource file (generic.res) is linked along with the object file (generic.obj).</p>
<pre><code>generic.exe : generic.obj generic.res
    $(link) $(ldebug) $(guilflags) generic.obj generic.res \
        $(guilibsdll) -out:generic.exe</code></pre>
<p>&nbsp;</p></body>
</HTML>

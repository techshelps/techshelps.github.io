<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building DLLs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win32_building_dlls_pt"></a>Building DLLs</h1>
<p>
To build a DLL, use the macros defined for <a href="buildw_5304.htm">Linking</a>. WIN32.MAK also includes the following macros to simplify linking DLLS:
<ul>
<li>
<b>$(IMPLIB)</b><p>
This macro is used to invoke the library manager. It expands to the following flags:
<pre><code>lib
 </code></pre>
</li>
<li>
<b>$(DLLENTRY)</b><p>
This macro is used as a suffix for the entry-point function. It is platform dependent. It defines to nothing on MIPS, Alpha, and PPC machines. It expands to the following flags on x86 machines:
<pre><code>@12
 </code></pre>
</li>
<li>
<b>$(DLLLFLAGS)</b><p>
This macro is used for DLLs. It expands to the following flags:
<pre><code>-/NODEFAULTLIB /INCREMENTAL:NO /PDB:NONE /RELEASE /NOLOGO 
-align:0x1000 -entry:_DllMainCRTStartup$(DLLENTRY) -dll
 </code></pre>
</li>
</ul>
<p>
The following example illustrates how to create the import library for a DLL. The import library is linked with the application that uses this DLL. </p>
<pre><code>mydll.lib: mydll.def mydll.obj
    $(implib) -machine:$(CPU) -def:mydll.def mydll.obj -out:mydll.lib
</code></pre>
<p>
The following example links the DLL: </p>
<pre><code>mydll.dll : mydll.obj 
    $(link) $(ldebug) $(dlllflags) -base:0x1C000000 mydll.obj \ 
        $(conlibsdll) -out:mydll.dll</code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Removing an Application</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_win32_removing_an_application_pt"></a>Removing an Application</h2>
<p>
Your installation program can direct the Add/Remove Programs application in Control Panel to list your application as an application that can be "automatically removed." </p>
<p>
If you use <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_msi_roadmap_to_installer_technology_documentation">
</object><a href=JavaScript:alink_1.Click()>Microsoft Installer Technology</a>, there is no need to ensure that your application can be easily uninstalled. Microsoft installer technology has enough information about your application that it can uninstall it without an uninstall application.</p>
<p>
If you don't use Microsoft installer technology, you can present an uninstall program by adding entries to the following registry key:</p>
<p>
<b>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall\</b><i>application-name</i> </p>
<p>
Note that <i>application-name</i> may not exceed 63 characters. You can use a GUID (38 characters long) to ensure that your key name will be unique. </p>
<p>
The entries are as follows: </p>
<p>
<b>DisplayName</b>=<i>product-name<br>
</i><b>UninstallString</b>=<i>full-path-to-program</i>  <i>command-line-parameters</i></p>
<p>
Add/Remove Programs displays the product name specified by the <b>DisplayName</b> value in its list of applications that can be removed. Windows uses the value specified by the <b>UninstallString</b> value to start the uninstall program to carry out the removal of the application. This string needs to completely specify the command-line parameters needed to execute the uninstall program and remove the application. A full path is required. Both the <b>DisplayName</b> and <b>UninstallString</b> values must be complete, or Add/Remove Programs will not list the application.</p>
<p>
Windows needs to know when the removal of the application is done, so it requires the <b>UninstallString</b> value to specify the uninstall program that actually carries out the removal. A batch file or other program that starts the removal program should not be specified. </p>
<p>
The registry locations are defined as constants for C programmers in the REGSTR.H header file. Descriptions of the macros follow.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=64%>REGSTR_PATH_UNINSTALL</td>
<td width=36%>Path to uninstall branch</td>
</tr>
<tr valign=top>
<td width=64%>REGSTR_VAL_UNINSTALLER_DISPLAYNAME</td>
<td width=36%><b>DisplayName</b></td>
</tr>
<tr valign=top>
<td width=64%>REGSTR_VAL_UNINSTALLER_COMMANDLINE</td>
<td width=36%><b>UninstallString</b></td>
</tr>
</table><br>
<p>
The uninstall program must display a user interface that informs the user that the removal process is taking place. Your uninstall program should provide a silent option that allows the user to run it remotely. The uninstall program should also display clear and helpful messages for any errors it encounters during the removal of the application. Windows will only detect and report a failure to start the uninstall program. </p>
<p>
An uninstall program should complete the following steps:
<ul>
<li>
Remove all information used by the application from the registry. If decrementing a DLL's usage count results in a usage count of zero, the uninstall program should display a message offering to delete the DLL or save it in case it may be needed later.</li>
<li>
Remove any shortcuts to the application from the desktop.</li>
<li>
Remove all program files related to the application. The uninstall program should not remove files that the user created with the application unless the user agrees to delete them. If the user's files are stored in the application's directory tree, the uninstall program should ask the user if the files should be moved to a new directory.</li>
<li>
Remove empty directories left by the application.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

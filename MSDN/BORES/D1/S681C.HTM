<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>findstr--Strings Not to Find</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">findstr—Strings Not to Find</H2><P CLASS="t">The other approach involves using the reverse match capability of <B>findstr</B> to exclude a list of search strings. This approach is more easily applied to DBCC output than to error log output, since there are fewer distinct strings that require exclusion. In some ways this approach, if applicable, is safer, since you are only explicitly stating what not to match and any new or unanticipated errors are shown by default. </P>
<P CLASS="t">For example, say you want to exclude all strings in a series of DBCC output files that contain the strings "The total number," "Table has," and "checking." Experience indicates this will exclude many nonessential DBCC status messages and will not result in the loss of any errors. Place these strings into a file, called Search.txt, like this:</P>

<PRE>The total number
Table has
checking
</PRE>
<P CLASS="t">Run Findstr.exe on the DBCC output files using the following syntax where Dbcc.* matches a group of DBCC output files to search, and Findstr.out is where the search results are placed: </P>

<PRE>findstr /v /i /g:search.txt dbcc.* &gt; findstr.out
</PRE>
<P CLASS="t">The <B>/v</B> parameter indicates reverse match, which effectively matches all strings except those in the list.</P>
<P CLASS="t">Here is a sample exclusion list for error logs that will filter out nonessential messages and allow most significant errors:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="135pt" VALIGN="TOP"><COL WIDTH="223pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><PRE>(id =</PRE></TD><TD VALIGN="TOP"><PRE>OS error : 109</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>1608</PRE></TD><TD VALIGN="TOP"><PRE>OS error : 232</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>17824</PRE></TD><TD VALIGN="TOP"><PRE>pipe name is</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>17825</PRE></TD><TD VALIGN="TOP"><PRE>Recovering Database</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>17832</PRE></TD><TD VALIGN="TOP"><PRE>recovery complete</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>Activating disk</PRE></TD><TD VALIGN="TOP"><PRE>Recovery dbid</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>All rights reserved</PRE></TD><TD VALIGN="TOP"><PRE>restrictions</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>clause</PRE></TD><TD VALIGN="TOP"><PRE>rolled forward</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>Clearing</PRE></TD><TD VALIGN="TOP"><PRE>server is unnamed</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>contracts</PRE></TD><TD VALIGN="TOP"><PRE>server name is</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>Copyright</PRE></TD><TD VALIGN="TOP"><PRE>shutdown by request</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>default character</PRE></TD><TD VALIGN="TOP"><PRE>SQL Server is start</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>default sort</PRE></TD><TD VALIGN="TOP"><PRE>subdivision</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>duplication</PRE></TD><TD VALIGN="TOP"><PRE>Sybase</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>file descriptors</PRE></TD><TD VALIGN="TOP"><PRE>terminating due</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>initconfig: number</PRE></TD><TD VALIGN="TOP"><PRE>transactions before ckpt</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>initializing virtual</PRE></TD><TD VALIGN="TOP"><PRE>transactions roll</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>initializing virtual</PRE></TD><TD VALIGN="TOP"><PRE>unable to read login</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>killed by hostname</PRE></TD><TD VALIGN="TOP"><PRE>unable to write to</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>Loading SQL Server</PRE></TD><TD VALIGN="TOP"><PRE>united states</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>Logging SQL Server</PRE></TD><TD VALIGN="TOP"><PRE>using asynchronous disk</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>network error</PRE></TD><TD VALIGN="TOP"><PRE>Using 'NTWDBLIB.DLL</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>network information</PRE></TD><TD VALIGN="TOP"><PRE>Using 'OPENDSNT.DLL</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>no_log</PRE></TD><TD VALIGN="TOP"><PRE>Using 'SQLEVENT.DLL</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>nocase</PRE></TD><TD VALIGN="TOP"><PRE>Using 'SSNMPNTW.DLL</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>number of buffers</PRE></TD><TD VALIGN="TOP"><PRE>windows nt</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>number of proc buffers</PRE></TD><TD VALIGN="TOP"><PRE>working thread</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>Opening Master Data</PRE></TD><TD VALIGN="TOP"><PRE></PRE></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">In some cases, combining these two approaches blends the best characteristics of both. At least, it allows you to work around difficult problems that arise from using just one. </P>
<P CLASS="t">For example, say you are searching your error logs for "Severity:<I> </I>16," through "Severity: 21<I>,"</I> which should match most serious errors. You notice in your search output several communication-related errors, such as 1608 and 17832, that are normally not indicative of a serious problem. You can keep your original search conditions and exclude only these specific unwanted errors from the search output by piping one <B>findstr</B> command into another using the following syntax where Search.txt is the file containing the search strings, Errorlog*.* matches a groups of SQL Server error log files to search, Exclude.txt is the file containing the search strings to exclude, and F.out is where the search results are placed:</P>

<PRE>findstr /i /g:search.txt errorlog*.* | findstr
/v /i /g:exclude.txt &gt; f.out
</PRE>
<P CLASS="t">This approach can be cascaded several levels deep, excluding successively more at each level.</P></BODY></HTML>

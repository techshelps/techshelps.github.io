<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory Tuning</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Memory Tuning</H3><P CLASS="t">Memory tuning involves the detection of memory-constrained operations. The following memory bottleneck-monitoring guidelines will aid in determining such problems.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Symptoms and Actions</H4><SPAN CLASS="list"><UL><LI CLASS="ULI1"><B>Symptom:</B> If the SQLServer: Cache Hit Ratio is less than 80 percent, memory may be a bottleneck.
<P CLASS="lt1"><B>Note</B>   Be advised that the SQLServer: Cache Hit Ratio in Performance Monitor is an average calculated since boot time, not the value over the last <I>n</I> seconds. Therefore, if many data points accumulate, the graph will only sluggishly change to varying conditions.</P>

<P CLASS="lt1"><B>Action:</B> Either allocate more memory to SQL Server or increase the amount of system memory.</P></LI><LI CLASS="ULI1"><B>Symptom:</B> If the SQLServer: I/O - Lazy Writes/sec counter indicates a great deal of activity over a long interval of time, then a memory bottleneck may be indicated. Typically, this counter should be zero until the LRUthreshold (default 3 percent) is reached with respect to free buffer pages. However, frequent activity may indicate not enough memory is available for data-page caching.
<P CLASS="lt1"><B>Action:</B> Compare the SQLServer: Cache - Number of Free Buffers value against the LRUthreshold value. This value is derived by obtaining the total number of buffers allocated by the DBCC MEMUSAGE statement and multiplying this number by the LRUthreshold percentage. If the number of free buffers is close to the derived value then either allocate more memory to SQL Server or increase the amount of system memory.</P></LI><LI CLASS="ULI1"><B>Symptom:</B> If Memory: Page Faults/sec is consistently high (other than during SQL Server initialization), then not enough memory is dedicated to Windows NT or possibly the system as a whole.
<P CLASS="lt1"><B>Action:</B> Increase the system memory or increase the memory dedicated to Windows NT by decreasing the memory allocated to SQL Server or other processes. You can also eliminate noncritical processes because these also use memory resources.</P></LI><LI CLASS="ULI1"><B>Symptom:</B> If SQLServer: I/O<B> </B>-<B> </B>Page Reads/sec is consistently high, it may indicate a memory bottleneck. Typically, if enough memory is available for database activities during normal operations, this counter will generally reach an equilibrium point. However, if this counter remains high over a long time interval, lack of sufficient memory may be causing excessive SQL Server page faults. This may be due to a less than adequate data cache, poor index design, or poor database design.
<P CLASS="lt1"><B>Action:</B> Increase the memory allocated to SQL Server or decrease the procedure cache percentage, thereby increasing the data cache. If indexes are not being used, design intelligent indexes. If database tables are too wide (resulting in fewer data rows per data page), redesign the tables to be narrower.</P></LI><LI CLASS="ULI1"><B>Symptom:</B> If SQLServer:<B> </B>Cache - Avg. Free Page Scan or SQLServer: Cache - Max. Free Page Scan are over 10, a memory bottleneck may be indicated due to excessive buffer scanning while searching for a free page.
<P CLASS="lt1"><B>Action:</B> Increase the data cache size or the frequency of checkpoints. Checkpoints can be increased by decreasing the recovery interval value or by manual execution.</P></LI></UL></SPAN><H4 CLASS="h3"><A NAME="sec1"></A>General Actions for Memory Tuning</H4><SPAN CLASS="list"><UL><LI CLASS="ULI1">Check the amount of memory dedicated to SQL Server by using the SQL Server configuration options. Follow the memory allocation guidelines previously discussed, increasing memory appropriately. Allocate at least 16 MB to Windows NT.
<P CLASS="lt1"><B>Note</B>   Although the memory allocation for keeping <B>tempdb</B> in RAM is not part of the memory configuration value, it may reduce the system memory available for the data and procedure cache.</P></LI><LI CLASS="ULI1">Make sure the Pagefile.sys file is of adequate size. However, it should not be growing in size; this would indicate that virtual memory requirements are exceeding capacity. On a dedicated SQL Server system, there should be virtually no paging as long as Windows NT has been allotted sufficient memory (at least 16 MB).</LI><LI CLASS="ULI1">If you make extensive use of extended stored procedures, you should unload the DLL after execution by using the DBCC <I>dllname</I>(FREE) statement. This releases the memory used by the DLL.</LI></UL></SPAN></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Run CHECKTABLE While in Production</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">How to Run CHECKTABLE While in Production</H2><P CLASS="t">Sometimes you may need to check a specific table or its indexes. On computers with a lot of memory, there is a technique that can sometimes allow this with very little concurrency impact, even while the computer is at modest production activity levels. It basically consists of preloading the page cache with the table and index contents using a nonblocking SELECT statement with the NOLOCK optimizer hint then checking a single index at a time to minimize the time the table is share locked. In some cases, it's possible to check a 200 MB table in less than 60 seconds using this technique. Here's how:</P>
<P CLASS="ls">Verify that the activity level on the computer is modest.</P>
<P CLASS="lt1">This will help ensure that preloaded cache pages are not stolen by concurrent requests while DBCC runs. Here is a good query to help check this. Execute it several times and observe what queries are active.</P>
<P>SELECT SPID, STATUS, HOSTNAME, PROGRAM_NAME, CMD, BLOCKED</P>
<P>FROM MASTER..SYSPROCESSES</P>
<P>WHERE STATUS &lt;&gt; 'SLEEPING'</P>
<P></P>
<P CLASS="ls">Verify that the table and indexes you want to check will fit into available page cache by comparing the table and index size to the page cache size.</P>
<P CLASS="lt1">Table and index size in 2K pages can be seen by issuing this query, where <B>tab1 </B>represents your table name:</P>
<P>SELECT NAME, INDID, DPAGES</P>
<P>FROM SYSINDEXES</P>
<P>WHERE ID=OBJECT_ID("TAB1")</P>
<P></P>
<P CLASS="ls">Execute DBCC MEMUSAGE and inspect the size of the returned page cache value.</P>
<P CLASS="lt1">Only if the sum of your table and index size is less than the page cache size is it possible to use this technique. Ideally, page cache should be significantly larger to allow servicing of other requests during execution of DBCC without depleting the cache holding the table being checked.</P>
<P CLASS="ls">Preload the page cache by issuing SELECTs that return no results; use NOLOCK and INDEX optimizer hints to ensure a nonblocking SELECT and that each index is covered.</P>
<P CLASS="lt1">This could take several minutes, depending on table size and computer I/O bandwidth.</P>
<P>select * from tab1 (nolock index=0) where key_id &lt; 0</P>
<P>select * from tab1 (nolock index=1) where key_id &lt; 0</P>
<P>select * from tab1 (nolock index=2) where key_id &lt; 0</P>
<P></P>
<P CLASS="ls">While the above query runs, use Performance Monitor to watch I/O versus CPU activity.</P>
<P CLASS="lt1">Watch all instances of the % Disk Time counter of the LogicalDisk object. Also watch the % Total Processor Time counter of the System object. To see valid disk performance information, you must have previously turned on the Windows NT <B>diskperf</B> setting by issuing <B>diskperf -Y</B> from a command prompt. For more details, see the Windows NT documentation. After all the data is preloaded, you can usually rescan the entire table with one of the above statements within a few seconds, during which CPU should be high and I/O almost 0. Do this to verify the data is still in cache. </P>
<P CLASS="ls">Run DBCC CHECKTABLE on a single index of the table at a time.</P>
<P CLASS="lt1">During this interval, a share lock will block attempts to update the table, but (depending on the computer speed and table size) CHECKTABLE<B> </B>will finish checking a single index within 30 seconds to 2 minutes. For example:</P>
<P>DBCC CHECKTABLE(TAB1, 2)</P>
<P></P>
<P CLASS="ls">Check the other indexes on the table.</P>
<P CLASS="ls">While CHECKTABLE<B> </B>is running, watch closely for any blocking you may be causing. If you miscalculate and CHECKTABLE<B> </B>causes more blocking than you anticipate, you can usually abort CHECKTABLE<B> </B>by<B> </B>using the Transact-SQL KILL statement. Here is a good query to watch the amount of blocking:</P>
<P>SELECT SPID, STATUS, HOSTNAME, PROGRAM_NAME, CMD, BLOCKED</P>
<P>FROM MASTER..SYSPROCESSES</P>
<P>WHERE BLOCKED &gt; 0</P>
<P></P>
<P CLASS="t">Integrity checking programs for file systems or databases tend to have long running times when applied to large data sets. Performance of SQL Server 6.5 DBCC has been significantly improved by using read ahead and parallel index checking. When SQL Server 6.5 is run on an adequately equipped platform, and the techniques mentioned in this chapter are used, it is usually possible to minimize the impact of DBCC. Specific techniques include running only the necessary DBCC utilities, understanding the concurrency impact of each utility (when, during the day, that each utility can be run), running DBCC on a hot backup server, and preloading the page cache prior to checking a specific table.</P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Before Service Pack 2</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Before Service Pack 2</H3><P CLASS="t">When a version 2.65.0201 or 2.65.0213 ODBC driver connects to a version 6.5 server, it sets the following options with SQL Server:</P>

<PRE>SET QUOTED_IDENTIFIER ON
SET TEXTSIZE 2147483647
SET ANSI_DEFAULTS ON
SET CURSOR_CLOSE_ON_COMMIT OFF
SET IMPLICIT_TRANSACTIONS OFF
</PRE>
<P CLASS="t">The net effect of setting these options is that when the 2.65.0201 or 2.65.0213 drivers are connected with a version 6.5 server, they will operate with three ANSI options turned on that were not turned on in earlier environments. The settings that will cause changes in behavior from those observed in the SQL Server 6.0 drivers are:</P>

<PRE>SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
</PRE>
<P CLASS="t">These behaviors will not show up in DB-Library-based applications such as ISQL/w, Enterprise Manager, <B>isql</B>, and so forth, unless the user has also issued the settings listed above.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>SET ANSI_NULLS ON</H4><P CLASS="t">With the SET ANSI_NULLS ON setting active, SQL statements cannot use the =NULL or &lt;&gt;NULL operators to compare for nulls; they must use IS NULL or IS NOT NULL. For example, in the following ISQL/w script:</P>

<PRE>create table TestNull (cola int NOT NULL, colb char(3) NULL)
go
insert into TestNull values (1,'aaa')
insert into TestNull(cola) values (2)
go
SET ANSI_NULLS OFF
go
select * from TestNull where colb = NULL
go
SET ANSI_NULLS ON
go
select * from TestNull where colb = NULL
go
</PRE>
<P CLASS="t">The first select returns one row with colb = NULL, the second select returns no rows. This can also affect commands in stored procedures if their WHERE clauses attempt = or &lt;&gt; comparisons using parameters passed in with null values.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>SET ANSI_PADDING ON</H4><P CLASS="t">When enabled, ANSI_PADDING prevents any trailing spaces or nulls from being truncated from <B>varchar</B> and <B>varbinary</B> values. It also affects fixed-length data types such as <B>char</B> or <B>int</B>. If the user specifies that columns of fixed-length data types (<B>char</B>, <B>int</B>, <B>tinyint</B>, <B>smallint</B>) can be NULL, ANSI_PADDING causes these columns to be padded in the event of a null value.</P>
<P CLASS="t">The following script can be used to illustrate the effect ANSI_PADDING has on values, regardless of whether they are <B>binary</B> or <B>varbinary</B> values:</P>

<PRE>create table padtest (vc5 varchar(5) not null, c5 char(5) not null, cn5     char(5) null)
insert padtest values('abc','abc','abc')
insert padtest values('abc' +space(1),'abc' +space(1),'abc' +space(1))
select vc5,c5,cn5 from padtest
go
select datalength(vc5), datalength(c5), datalength(cn5)
from padtest
go
</PRE>
<P CLASS="t">The following table illustrates the results you will receive when executing this script when ANSI_PADDING is ON and when ANSI_PADDING is OFF.</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="94pt" VALIGN="TOP"><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="86pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="thf"></P></TD><TD VALIGN="TOP"><P CLASS="thf">Varchar (vc5)</P></TD><TD VALIGN="TOP"><P CLASS="thf">Char (c5)</P></TD><TD VALIGN="TOP"><P CLASS="thf">Char nullable (cn5)</P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><P CLASS="tr"></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">ANSI_PADDING ON</P></TD><TD VALIGN="TOP"><P CLASS="tt">No change</P>
<P CLASS="tt">  'abc'          (3)</P>
<P CLASS="tt">  'abc&lt;sp&gt;'  (4)</P></TD><TD VALIGN="TOP"><P CLASS="tt">Padded</P>
<P CLASS="tt">  'abc&lt;sp&gt;&lt;sp&gt;'  (5)</P>
<P CLASS="tt">  'abc&lt;sp&gt;&lt;sp&gt;'  (5)</P></TD><TD VALIGN="TOP"><P CLASS="tt">Padded</P>
<P CLASS="tt">  'abc&lt;sp&gt;&lt;sp&gt;'  (5)</P>
<P CLASS="tt">  'abc&lt;sp&gt;&lt;sp&gt;'  (5)</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">ANSI_PADDING OFF</P></TD><TD VALIGN="TOP"><P CLASS="tt">Truncated</P>
<P CLASS="tt">  'abc'          (3)</P>
<P CLASS="tt">  'abc'          (3)</P></TD><TD VALIGN="TOP"><P CLASS="tt">Padded</P>
<P CLASS="tt">  'abc&lt;sp&gt;&lt;sp&gt;'  (5)</P>
<P CLASS="tt">  'abc&lt;sp&gt;&lt;sp&gt;'  (5)</P></TD><TD VALIGN="TOP"><P CLASS="tt">Truncated</P>
<P CLASS="tt">  'abc'                   (3)</P>
<P CLASS="tt">  'abc'                   (3)</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">If columns in a table are created while ANSI_PADDING is enabled, those columns will always exhibit the padding behavior, whether or not ANSI PADDING is on or off in the future. However, if you create new columns in that table while ANSI_PADDING is disabled, the new columns will never exhibit padding behavior.</P>
<H4 CLASS="h3"><A NAME="sec2"></A>SET ANSI_WARNINGS ON</H4><P CLASS="t">The SET ANSI_WARNINGS ON setting will cause the Microsoft ODBC driver to generate messages under new conditions. One condition is that if an aggregate function encounters nulls it will generate a warning. For example, the following command referencing the <B>TestNull</B> table created above:</P>

<PRE>SQLExecDirect(hstmt,
"select max(colb) from TestNull)",
SQL_NTS);
</PRE>
<P CLASS="t">will return SQL_SUCCESS_WITH_INFO, and a call to <B>SQLError</B> will return:</P>

<PRE>szSqlState = "01003", *pfNativeError = 8153,
szErrorMsg="[Microsoft][ODBC SQL Server Driver][SQL Server]
            Warning, null value eliminated from aggregate."
</PRE>
<P CLASS="t">Another example is that an insert or update that attempts to put in a value whose length is larger than that allowed by the column will fail, whereas with ANSI_WARNINGS set off, the operation would continue and the value would be entered after the data was truncated. For example, with the <B>TestNull</B> table defined above and the 6.5 driver, the following: </P>

<PRE>SQLExecDirect(hstmt,
            "insert into TestNull values (3, 'abcd')",
            SQL_NTS);
</PRE>
<P CLASS="t">will return SQL_ERROR, and a call to SQLError returns:</P>

<PRE>SQL_NO_DATA_FOUND
szSqlState = "22001", *pfNativeError = 8152,
szErrorMsg="[Microsoft][ODBC SQL Server Driver][SQL Server]
Column 'colb' of table 'pubs.dbo.TestNull' cannot
accept 4 bytes (3 max)."
szSqlState = "01000", *pfNativeError = 3621,
szErrorMsg="[Microsoft][ODBC SQL Server Driver][SQL Server]
Command has been aborted."
</PRE></BODY></HTML>

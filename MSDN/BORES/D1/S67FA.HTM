<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory: RAM</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">Memory: RAM</H2><P CLASS="t">Determining the optimal memory configuration for a SQL Server solution is crucial to achieving stellar performance. SQL Server uses memory for its procedure cache, data and index page caching, static server overhead, and configurable overhead. SQL Server can use up to 2 GB of virtual memory (the maximum configurable value). In addition, Windows NT and all of its associated services also require memory.</P>
<P CLASS="t">Windows NT provides each 32-bit application with a virtual address space of 4 GB. This address space is mapped by the Windows NT virtual memory manager (VMM) to physical memory and can be 4 GB in size depending upon the hardware platform. The SQL Server application only knows about virtual addresses; it cannot access physical memory directly. Physical memory is controlled by the VMM. In addition, Windows NT allows for the creation of virtual address space that exceeds the available physical memory. Therefore, it is possible to adversely affect the performance of SQL Server by allocating more virtual memory than there is available physical memory.</P>
<P CLASS="t">To make a suitable estimate for an optimal memory configuration, refer to the following table for SQL Server configurable and static overhead memory requirements.</P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="66pt" VALIGN="TOP"><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="61pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="thf"><BR>Resource</P></TD><TD VALIGN="TOP"><P CLASS="th"><BR>Configurable</P></TD><TD VALIGN="TOP"><P CLASS="th"><BR>Default value</P></TD><TD VALIGN="TOP"><P CLASS="th">Bytes per resource</P></TD><TD VALIGN="TOP"><P CLASS="th"><BR>Space (MB)</P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><P CLASS="tr"></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">User connections</P></TD><TD VALIGN="TOP"><P CLASS="tt">Yes</P></TD><TD VALIGN="TOP"><P CLASS="tt">25</P></TD><TD VALIGN="TOP"><P CLASS="tt">40,960</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.43</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Open databases</P></TD><TD VALIGN="TOP"><P CLASS="tt">Yes</P></TD><TD VALIGN="TOP"><P CLASS="tt">10</P></TD><TD VALIGN="TOP"><P CLASS="tt">650</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.01</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Open objects</P></TD><TD VALIGN="TOP"><P CLASS="tt">Yes</P></TD><TD VALIGN="TOP"><P CLASS="tt">5,000</P></TD><TD VALIGN="TOP"><P CLASS="tt">72</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.04</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Locks</P></TD><TD VALIGN="TOP"><P CLASS="tt">Yes</P></TD><TD VALIGN="TOP"><P CLASS="tt">5,000</P></TD><TD VALIGN="TOP"><P CLASS="tt">28</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.13</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Devices</P></TD><TD VALIGN="TOP"><P CLASS="tt">No</P></TD><TD VALIGN="TOP"><P CLASS="tt">256</P></TD><TD VALIGN="TOP"><P CLASS="tt">300</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.07</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Static server overhead</P></TD><TD VALIGN="TOP"><P CLASS="tt">No</P></TD><TD VALIGN="TOP"><P CLASS="tt">N/A</P></TD><TD VALIGN="TOP"><P CLASS="tt">2,000,000</P></TD><TD VALIGN="TOP"><P CLASS="tt">2.00</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Total overhead</P></TD><TD VALIGN="TOP"><P CLASS="tt"></P></TD><TD VALIGN="TOP"><P CLASS="tt"></P></TD><TD VALIGN="TOP"><P CLASS="tt"></P></TD><TD VALIGN="TOP"><P CLASS="tt">2.68</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">You can use this information to calculate a more exact memory-configuration estimate with respect to actual memory usage. This is done by taking the calculated total overhead above and applying it to the following formula:</P>
<P CLASS="t">SQL Server physical memory – total overhead = SQL Server memory cache</P>
<P CLASS="t">The SQL Server memory cache is the amount of memory that is dedicated to the procedure cache and the data cache.</P>
<P CLASS="t">The procedure cache is the amount of the SQL Server memory cache that is dedicated to the caching of stored procedures, triggers, views, rules, and defaults. Consequently, if your system takes advantage of these data objects and the stored procedures are used by many users, then this value should be proportional to such requirements. These objects are stored in the procedure cache based on the frequency of their use; you want the most-used data objects to be accessed in cache versus retrieved from disk. The system default for procedure cache is 30 percent of the available memory cache.</P>
<P CLASS="t">The data or buffer cache is the amount of the SQL Server memory cache that is dedicated to the caching of data and index pages. These pages are held in the data cache based on the frequency of their use; you want the most-used data and index pages to be accessed in cache versus retrieved from disk. The system default for data cache is 70 percent of the available memory cache.</P>
<P CLASS="t">The following example for a dedicated SQL Server illustrates a more accurate estimate of SQL Server memory requirements.</P>
<P CLASS="t"><B>Note</B>   Although the following table is a good place to start, remember that each system's needs are different. You may need more than 16 MB of physical memory on your Windows NT machine.</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="92pt" VALIGN="TOP"><COL WIDTH="97pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="thf">Resource</P></TD><TD VALIGN="TOP"><P CLASS="th">Estimated value</P></TD><TD VALIGN="TOP"><P CLASS="th">Bytes per resource</P></TD><TD VALIGN="TOP"><P CLASS="th">Space (MB)</P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><P CLASS="tr"></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">User connections</P></TD><TD VALIGN="TOP"><P CLASS="tt">50</P></TD><TD VALIGN="TOP"><P CLASS="tt">40,960</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.9</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Open databases</P></TD><TD VALIGN="TOP"><P CLASS="tt">10 (default)</P></TD><TD VALIGN="TOP"><P CLASS="tt">650</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.01</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Open objects</P></TD><TD VALIGN="TOP"><P CLASS="tt">5,000 (default)</P></TD><TD VALIGN="TOP"><P CLASS="tt">240</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.04</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Locks</P></TD><TD VALIGN="TOP"><P CLASS="tt">15,000</P></TD><TD VALIGN="TOP"><P CLASS="tt">60</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.42</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Devices</P></TD><TD VALIGN="TOP"><P CLASS="tt">256 (default)</P></TD><TD VALIGN="TOP"><P CLASS="tt">34</P></TD><TD VALIGN="TOP"><P CLASS="tt">0.07</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Static server overhead</P></TD><TD VALIGN="TOP"><P CLASS="tt">N/A</P></TD><TD VALIGN="TOP"><P CLASS="tt">2,000,000</P></TD><TD VALIGN="TOP"><P CLASS="tt">2.0</P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="tt">Total overhead</P></TD><TD VALIGN="TOP"><P CLASS="tt"></P></TD><TD VALIGN="TOP"><P CLASS="tt"></P></TD><TD VALIGN="TOP"><P CLASS="tt">3.44</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P CLASS="t">If total physical system memory equals 48 MB (Windows NT physical memory equals 16 MB and SQL Server physical memory equals 32 MB), and you subtract the previous overhead figure (3.44) from the SQL Server physical memory, you will have approximately 28 MB total memory cache to work with on the SQL Server (procedure cache: 28.56 * 0.3 = 8.568 MB and data cache: 28.56 * 0.7 = 19.992 MB).</P>
<P CLASS="t">As overhead requirements, such as user connections and locks, increase, this value decreases, which may lead to performance problems that require tuning.</P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deadlocking with Distributed Transactions</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">Deadlocking with Distributed Transactions</H2><P CLASS="t"><B><I>Implementing distributed transactions is easy with MS DTC and SQL Server.</I></B></P>
<P CLASS="t">In distributed transactions, deadlocks can occur. This section explains options that are available for application developers planning to implement distributed transactions with SQL Server 6.5.</P>
<P CLASS="t">SQL Server 6.5 includes the Microsoft Distributed Transaction Coordinator (MS DTC), which provides robust, high-performance, scalable, easy-to-use distributed transaction capability for the Microsoft Windows NT and Windows 95 operating systems. MS DTC addresses the challenges of processing transactions over a distributed set of software components that exist on a single computer or on a system of networked computers. MS DTC is fully integrated with Microsoft SQL Server. Through MS DTC, remote stored procedure calls can participate in distributed transactions, so that changes on multiple servers can be committed as a single unit of work.</P>
<P CLASS="t">MS DTC includes no facilities for deadlock avoidance or detection. Application developers who plan on implementing distributed transactions with MS DTC and SQL Server have two options:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Implement deadlock avoidance in the application by serializing the transactions' access to common tables among different servers.</LI><LI CLASS="ULI1">Implement time-outs either within the application or by using a SQL Server server-wide trace flag.</LI></UL></SPAN><P CLASS="t">If the application has tight control over what distributed transactions are performed, it can serialize access to common resources in such a way that any deadlocks that may occur would be contained within a single SQL Server where they could be detected and dealt with like normal deadlocks are detected and dealt with. For instance, if the intention is to maintain transactional integrity among three tables on three different SQL Servers (<B>T1</B> on Server1, <B>T2</B> on Server2, and <B>T3</B> on Server3), you should always issue the table modification queries in the same table order for any distributed transaction that affects these tables. This may, for example, always be <B>T1</B> first, <B>T2</B> second, and <B>T3</B> third.</P>
<P CLASS="t">Another option that you can use when there is little control over the types of distributed transactions that might be issued is time-outs. For DB-Library and ODBC applications, this can be implemented in the calling program. For ad hoc Transact-SQL usage, SQL Server 6.5 has implemented trace flag 8503, which allows a system administrator to define a server-wide MS DTC transaction time-out value for server-to-server MS DTC transactions started with either BEGIN DISTRIBUTED TRAN or through the implicit transaction mechanisms, REMOTE PROC TRANS or SET REMOTE_PROC_TRANSACTIONS ON. When the trace flag is set, the <B>sp_configure</B> remote query time-out value is used as the transaction time-out value, in seconds. If the transaction is still active after the time has elapsed, the MS DTC initiates transaction abort by using the <B>Abort</B> transaction method. A value of 0 represents an infinite time-out.</P></BODY></HTML>

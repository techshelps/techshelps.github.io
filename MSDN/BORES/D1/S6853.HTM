<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tracing SQL Generated by the Microsoft SQL Server ODBC Driver</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">Tracing SQL Generated by the Microsoft SQL Server ODBC Driver</H2><P CLASS="t"><B><I>The ODBCSpy utility provides complete trace information about all the ODBC calls made to a specific ODBC data source.</I></B></P>
<P CLASS="t">Tracing the SQL statements generated by a two-tier ODBC driver can sometimes help you determine if a problem lies in the ODBC SQL statements generated by the ODBC application or in the native SQL generated by the driver to implement the application's ODBC SQL statements.</P>
<P CLASS="t">The ODBC software developer's kit (SDK) provides two tools for monitoring the ODBC commands coming from applications. The first tool is the trace utility of the ODBC Driver Manager, which is started from the ODBC Administrator. You can click <B>Options</B> in the ODBC Administrator window, then select the trace options to start tracing all calls made to any ODBC data source on the client. This traces ODBC calls right after they come into the driver manager and is helpful in debugging problems that the driver manager may have when connecting to a driver. This is a fairly minimal trace, however, and the second tool, ODBCSpy, is the one most commonly used to troubleshoot ODBC calls.</P>
<P CLASS="t">The ODBCSpy utility ships with the ODBC SDK and can be used to get a thoroughly informative trace of all the ODBC calls made to a specific ODBC data source. ODBCSpy traces calls as they are passed from the driver manager to the ODBC driver. It shows all of the parameters passed for each call to the driver and the information returned from the driver. If an error is encountered, ODBCSpy calls SQLError for all error messages returned and logs the full information about the errors in trace.</P>
<P CLASS="t">There are also third-party ODBC packages that provide ODBC tracing tools.</P>
<P CLASS="t">ODBCSpy can tell you what commands are going into an ODBC driver, but they must rely on the native tracing functions of the data source to determine what SQL statements are generated by two-tier ODBC drivers such as the Microsoft SQL Server ODBC driver. All versions of Microsoft SQL Server provide trace flags to trace all the SQL statements coming into the server.</P>
<P CLASS="t">The 4032 trace flag traces the SQL statements coming in from the client. This trace can be returned to the client by also using the 3604 trace flag or the SQL statements can be logged in SQL Server's error log by using the 3605 trace flag. The "-1" trace flag will make the trace cover all clients connecting to the server; otherwise, the trace is specific to the connection issuing the trace command. The statement to turn on the trace flags is:</P>

<PRE>DBCC TRACEON(flag1,flag2,…,flagn)
</PRE>
<P CLASS="t">For example:</P>
<P CLASS="t">Log all SQL statements from all clients to the error log:</P>

<PRE>DBCC TRACEON(4032,3605,-1)
</PRE>
<P CLASS="t">Echo all SQL statements from this connection back to the client:</P>

<PRE>DBCC TRACEON(4032,3604)
</PRE>
<P CLASS="t">The traces remain on until turned off with DBCC TRACEOFF or until the SQL Server is stopped and restarted. The trace flags can also be turned on if SQL Server is started from the command prompt.</P>
<P CLASS="t">The SQL Server 6.5 error log is in C:\Mssql\Log. For ODBC clients, it is usually best to log the SQL statements to the error log using the 3605 trace. If troubleshooting is being done through ODBCTest, then it is fairly easy to issue:</P>

<PRE>SQLExecDirect(hstmt,"dbcc traceon(3605,4032)",SQL_NTS);
</PRE>
<P CLASS="t">This can also be added to an application that calls the ODBC API directly and that is being interactively debugged. If the ODBC application opens multiple connections or does not offer the ability to call the ODBC API directly, it is best to isolate the application so that it is the only application running against a SQL Server. </P>
<P CLASS="t">Then, from either ODBCTest, the SQL Server ISQL/w utility, or any other utility that will allow the entry of ad hoc commands, issue:</P>

<PRE>dbcc traceon (4032,3605, -1)
</PRE>
<P CLASS="t">To read the SQL Server error log, it is recommended that you use Write.</P>
<P CLASS="t">The SQL statements generated by Microsoft SQL Server ODBC driver are sent to the server in one of two ways, either as standard SQL statements or as SQL Server remote procedure calls (RPCs).</P>
<P CLASS="t">SQL Server 6.5 introduced the SQL Trace utility. Users can use SQL Trace filters instead of the DBCC trace flags to view the SQL statements sent to SQL Server. For information about how to turn on filters to capture SQL statements, see <I>What's New in SQL Server 6.5</I>. Once a filter has been applied to an ODBC client, the SQL commands being sent to the server by the driver will be visible. For example, when executing this standard SQL statement:</P>

<PRE>SQLExecDirect(hstmt,
              "exec parmproc @cntr=1, @string='abcde'",
              SQL_NTS);
</PRE>
<P CLASS="t">This SQL Trace format returns:</P>

<PRE>-- 4/16/96 20:24:17.783 SQL (ID=7, SPID=13, User=sa(REDMOND\alanbr),
   App='Microsoft ODBC SDK v2.0', Host='ALANBR3'(bf) )
exec parmproc @cntr = 1, @string = 'abcde'
go
</PRE>
<P CLASS="t">When executing the same procedure with a remote procedure call:</P>

<PRE>SQLExecDirect(hstmt,
              "{ call parmproc (1,'abcde') }",
              SQL_NTS);
</PRE>
<P CLASS="t">This SQL Trace format returns:</P>

<PRE>-- 4/16/96 20:24:41.116 RPC (ID=7, SPID=13, User=sa(REDMOND\alanbr)&lt;
   App='Microsoft ODBC SDK v2.0', Host='ALANBR3'(bf) )
parmproc 1, "abcde", 1, "abcde",
go</PRE></BODY></HTML>

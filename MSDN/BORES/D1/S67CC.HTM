<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Server Denormalization Tactics and Benefits</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">SQL Server Denormalization Tactics and Benefits</H3><P CLASS="t">In some cases, you may want to denormalize the database model. Targeted denormalization of specific tables can improve performance. Denormalization may take place at the entity or attribute level, and therefore requires a knowledge, as previously discussed, of how the data will be accessed and used. Denormalization may be accomplished in many different ways based upon myriad performance considerations. However, the following tactics have proven useful for improving performance.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Introduce Redundancy</H4><P CLASS="t">If the normalized design results in many 4-way or greater join relationships, consider introducing redundancy at the attribute (column) or entity (table) level as follows:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Add duplicate attributes (columns) to the database entities (tables).</LI><LI CLASS="ULI1">Add derived attributes (columns) to the database entities (tables)—for example, aggregates, maximum values, and so on.</LI></UL></SPAN><H4 CLASS="h3"><A NAME="sec1"></A>Redefine Attributes</H4><P CLASS="t">Redefine attributes to reduce the data width of an entity as follows:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Add contrived attributes (columns) to the database entities (tables).
<P CLASS="lt1">Appropriate attribute candidates are large keys and text fields. Therefore, a multiattribute key on which many joins will take place can be replaced with a smaller contrived key. A text field can be redefined or augmented by an abstract field of 255 characters or less.</P></LI></UL></SPAN><H4 CLASS="h3"><A NAME="sec2"></A>Redefine Entities</H4><P CLASS="t">Redefine entities (tables) to reduce the overhead of extraneous attribute (column) data or row data. Appropriate types of associated denormalization are:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Segment an entity (table) by attributes (columns) into two entities (tables), separating high-access data from low-access data. 
<P CLASS="lt1">This scenario requires that the primary key be duplicated in each new table. Such a design may help with concurrency and results in narrower tables.</P></LI><LI CLASS="ULI1">Segment an entity (table) by rows into two entities (tables). 
<P CLASS="lt1">This scenario works well on entities (tables) with the potential for large data volumes. This is also a good tactic if data rows are accessed as subsets by logical workgroups (department, market segment, geography, and so on). Additionally, if a subset of the larger data set is the most active, the subset is a candidate for segmentation.</P></LI></UL></SPAN></BODY></HTML>

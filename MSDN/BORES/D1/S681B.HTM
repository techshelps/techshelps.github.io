<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>findstr--Strings to Find</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">findstr—Strings to Find</H2><P CLASS="t">In the first approach, you build a list of strings that define errors you want <B>findstr</B> to match. This list of strings can be supplied as an input file to the Findstr.exe file. </P>
<P CLASS="t">For example, say you want to find any occurrences of the strings "table corrupt," which accompanies many serious data errors, and "msg 605," which is a specific type of error. Place these strings into a file, called Search.txt, like this: </P>

<PRE>table corrupt
msg 605
</PRE>
<P CLASS="t">Run Findstr.exe on the DBCC output files using the following syntax where Dbcc.* matches a group of DBCC output files to search, and Findstr.out is where the search results are placed:</P>

<PRE>findstr /i /g:search.txt dbcc.* &gt; findstr.out
</PRE>
<P CLASS="t">The challenge with this approach is knowing ahead of time what error strings to search for. Unfortunately, there is no comprehensive list of SQL error strings that encompasses all possible DBCC, server, and kernel errors. However, searching for the following strings provides fairly good coverage as a starting point:<I> </I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="100pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><PRE>level 16</PRE></TD><TD VALIGN="TOP"><PRE>Severity: 17</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>level 17</PRE></TD><TD VALIGN="TOP"><PRE>Severity: 18</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>level 18</PRE></TD><TD VALIGN="TOP"><PRE>Severity: 19</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>level 19</PRE></TD><TD VALIGN="TOP"><PRE>Severity: 20</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>level 20</PRE></TD><TD VALIGN="TOP"><PRE>Severity: 21</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>level 21</PRE></TD><TD VALIGN="TOP"><PRE>table corrupt</PRE></TD></TR><TR><TD VALIGN="TOP"><PRE>Severity: 16</PRE></TD><TD VALIGN="TOP"><PRE></PRE></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><PRE NM="Ex"></PRE><P CLASS="t">Using a little experimentation, it is usually possible to further refine this and get fairly reliable checking.</P></BODY></HTML>

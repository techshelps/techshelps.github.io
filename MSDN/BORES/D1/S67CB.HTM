<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Logical Database Design</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Logical Database Design</H3><P CLASS="t">Designing an optimal relational database is typically accomplished by using entity-relationship modeling and normalization. These two processes or methodologies aid in defining the logical data model.</P>
<P CLASS="t">Entity-relationship modeling is the identification of data entities or objects and the relationships between these entities. The entity-relationship modeling process usually progresses in the following manner:</P>
<P CLASS="ls">Entities or objects are identified.</P>
<P CLASS="ls">Identifiers or primary keys that uniquely identify each entity are identified.</P>
<P CLASS="ls">Data elements or attributes associated with each entity are identified.</P>
<P CLASS="ls">Relationships between entities are identified, thereby resulting in the identification of primary key/foreign key relationships.</P>
<P CLASS="t">Having completed this process, the resulting entity-relationship model now represents a logical view of the data entities and associated relationships upon which the physical database design will be based. Furthermore, it is during this modeling process that normalization commonly occurs.</P>
<P CLASS="t">Generally, a logical database design will satisfy the first three levels of normalization as follows:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">First Normal Form: You cannot have repeating groups or multivalue columns.</LI><LI CLASS="ULI1">Second Normal Form: Every nonkey field must depend on the entire primary key and not on the constituent parts of a composite primary key.</LI><LI CLASS="ULI1">Third Normal Form: A nonkey field must not depend on another nonkey field.</LI></UL></SPAN><P CLASS="t">In essence, a design based on these rules yields a greater number of narrow tables, thereby reducing data redundancy and decreasing the number of pages required to store the data. Consequently, table relationships may need to be resolved by using complex joins. However, the SQL Server optimizer is designed to take advantage of normalized logical database designs, as long as efficient indexes have been derived from the identified primary key/foreign key relationships. Nonetheless, there are trade-offs between a highly normalized database design and an intelligently denormalized design. It is this strategy of selective and intelligent denormalization that will most often result in the greatest performance gains as related to logical database design.</P></BODY></HTML>

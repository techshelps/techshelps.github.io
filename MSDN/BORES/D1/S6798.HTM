<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fragments</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Fragments</H3><P CLASS="t">Fragments are the fundamental unit in which databases are allocated. Each database can have a maximum of 32 fragments. The CREATE DATABASE statement will generate 1 or 2 fragments (depending on the syntax used), and each use of the ALTER DATABASE statement after that will generate an additional fragment. Each fragment is contained in only one device; fragments do not span devices. Each database can have multiple fragments on one device and can have fragments on multiple devices. </P>
<P CLASS="t">For example, assume that a system has two user devices, <B>dev1</B> with 20 MB and <B>dev2</B> with 10 MB. The following statement creates a sample database with 2 fragments, one of 10 MB on <B>dev1</B> holding data and one of 10 MB on <B>dev2</B> holding the log. There is still 10 MB free on <B>dev1</B>.</P>

<PRE>CREATE DATABASE sample ON dev1 = 10 LOG ON dev2 = 10
</PRE>
<P CLASS="t">If the sample database then starts running out of data space, use ALTER DATABASE to generate an additional fragment:</P>

<PRE>ALTER DATABASE sample ON dev1 = 10
</PRE>
<P CLASS="t">After ALTER DATABASE has completed, <B>sample</B> has 3 fragments; <B>dev1</B> contains the original data fragment of 10 MB plus the last data fragment of 10 MB and <B>dev2</B> contains the log fragment generated by CREATE DATABASE. Each database fragment has a line in the <B>master.dbo.sysusages</B> table.</P>
<P CLASS="a"><img src="dbin5.gif"></P>
<P CLASS="t">When you create a database fragment on a device that does not have enough space to hold the entire fragment, SQL Server maps as many allocation units onto the device as will fit in the space available. For example, to allocate a device <B>dev1</B> with 4 MB, you specify SIZE = 2148 in the DISK INIT statement. If the DISK INIT statement is specified as SIZE = 2140, then there are only 3.98 MB on <B>dev1</B>. </P>
<P CLASS="t">When you execute the following statement, SQL Server allocates as many allocation units to the device as it can, so the short database ends up with only 3.5 MB:</P>

<PRE>CREATE DATABASE short ON dev1 = 4
</PRE>
<P CLASS="a"><img src="dbin6.gif"></P></BODY></HTML>

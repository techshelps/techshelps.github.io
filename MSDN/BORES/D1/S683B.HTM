<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Disk Subsystem Tuning</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Disk Subsystem Tuning</H3><P CLASS="t">Disk subsystem tuning involves the detection of disk I/O–constrained operations. Such bottleneck constraints can be caused by the disk controller, the physical disk drives, or lack of some other resource, which results in excessive disk I/O–generating activity. Furthermore, poor disk subsystem performance can also be caused by poor index or database design. The goal is to operate the SQL Server with as few physical I/Os and associated interrupts as possible. The following disk I/O bottleneck-monitoring guidelines will aid in achieving this goal.</P>
<P CLASS="t"><B>Note</B>   To monitor low-level disk activity with respect to the PhysicalDisk Performance Monitor counters, it is necessary to enable the <B>diskperf</B> option. To enable the <B>diskperf</B> option, issue the following command from the command prompt: <B>diskperf -y</B>. </P>
<P CLASS="t">When performance tuning the SQL Server disk subsystem, you should first attempt to isolate the disk I/O bottleneck with the SQLServer counters, and then use the PhysicalDisk and LogicalDisk counters for more detailed monitoring and refinement of an action plan.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Symptoms and Actions</H4><SPAN CLASS="list"><UL><LI CLASS="ULI1"><B>Symptom:</B> If SQLServer: I/O<B> </B>-<B> </B>Lazy Writes/sec is active for extended intervals, this may indicate that the disk subsystem is not adequate with respect to the current I/O demands. (Also see "Memory Tuning," earlier in this article.)
<P CLASS="lt1"><B>Action:</B> Observing either LogicalDisk: Current Disk Queue Length or PhysicalDisk: Current Disk Queue Length can reveal significant disk congestion. Typically, a value over 2 indicates disk congestion. Increasing the number of disk drives or obtaining faster drives will help performance.</P></LI><LI CLASS="ULI1"><B>Symptom:</B> If SQLServer: I/O - Outstanding Reads and/or I/O - Outstanding Writes are high for extended intervals of time, the disk subsystem may be a bottleneck.
<P CLASS="lt1"><B>Action:</B> Observing either LogicalDisk: Current Disk Queue Length or PhysicalDisk: Current Disk Queue Length can reveal significant disk congestion. Typically, a value over 2 indicates disk congestion. Increasing the number of disk drives or obtaining faster drives will help performance.</P></LI><LI CLASS="ULI1"><B>Symptom:</B> If SQLServer: I/O - Log Writes/sec seems to reach a maximum level, you may have encountered the maximum sequential write capability of the disk drives in the system. You will see this occur most frequently on systems that have a dedicated disk drive for logging. On systems without a dedicated log disk drive, you will observe a greater number of outstanding I/O requests as discussed previously.
<P CLASS="lt1"><B>Action:</B> Obtaining faster disk drives or disk controllers will help to improve this value.</P></LI></UL></SPAN><H4 CLASS="h3"><A NAME="sec1"></A>General Actions for Disk Subsystem Tuning</H4><SPAN CLASS="list"><UL><LI CLASS="ULI1">If you have a disk subsystem that supports asynchronous I/O (one that supports disk arrays and/or includes a smart SCSI controller), you may consider increasing the <B>max async IO</B> option (default 8) to obtain higher throughput. To determine if higher throughput is gained, monitor SQLServer: I/O - Batch Writes/sec before the change to <B>max async IO</B> and after the change. You should also notice an increase in the value of SQLServer: I/O Transactions/sec. This assumes the current physical disks are not experiencing I/O congestion. In addition, increasing the <B>max async IO</B> value (maximum value is 255) may result in excessive overhead.</LI><LI CLASS="ULI1">Install a faster disk and/or controller. Determine if the controller card does 8-bit, 16-bit, or 32-bit transfers. The more bits in the transfer operation, the faster the controller moves data. You may also want to choose a different drive technology, such as integrated drive electronic (IDE) which has a 2.5 MB/sec throughput; ESDI, which has a 3 MB/sec throughput; SCSI-2, which has a 5 MB/sec throughput; or a Fast SCSI-2, which has a 10 MB/sec throughput.</LI><LI CLASS="ULI1">Create mirrored data sets. The I/O system can issue concurrent reads to 2 partitions. The first portion of the read will be to partition A, while the next portion of the read will be to partition B. (Assuming the disk driver and controller can handle asynchronous I/O.)</LI><LI CLASS="ULI1">Create striped data sets. Multiple disks can process I/O requests concurrently (assuming the disk driver and controller can handle asynchronous I/O).</LI><LI CLASS="ULI1">Add memory to increase the data cache size, thereby decreasing physical page reads.</LI><LI CLASS="ULI1">Use a fast I/O bus architecture like PCI. PCI is a faster bus architecture than ISA bus architecture. </LI><LI CLASS="ULI1">When choosing an I/O controller, consider its performance characteristics.</LI><LI CLASS="ULI1">On a 2 SCSI disk daisy-chained system, the SCSI controller has more of an impact on your total performance than your disk drive. You would be better off buying a slower, cheaper disk and investing in a better SCSI controller. </LI><LI CLASS="ULI1">Choose a disk with a low seek time (the time required to move the disk drive heads from one track of data to another). The ratio of time spent seeking to time spent transferring data is usually 10 to 1, and often much higher. </LI><LI CLASS="ULI1">Distribute the workload as evenly as possible among different I/O systems and disk drives. This will allow you to take full advantage of system I/O bandwidth.</LI></UL></SPAN></BODY></HTML>

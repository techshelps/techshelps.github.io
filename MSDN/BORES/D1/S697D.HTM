<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>High-Speed Locking and Concurrency Control</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">High-Speed Locking and Concurrency Control</H3><P CLASS="t">A multiuser environment must have the means to prevent concurrent transactions from interfering with each other. SQL Server employs a fast, sophisticated, automatic, and transparent locking scheme that arbitrates user requests. The process of obtaining a lock is exceptionally fast—a matter of microseconds—because lock information is stored in a memory-resident table. SQL Server employs multiple levels of locking (depending on the degree of exclusion required) and uses the least restrictive lock needed to protect data during a given operation.</P>
<P CLASS="t">SQL Server automatically acquires the necessary locks whenever a SQL statement is executed. SQL Server uses:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1"><I>Shared locks</I> for read-only operations. If a shared lock has been applied to a data page or pages, a second transaction can also acquire a shared lock even though the first transaction has not completed. By default, SQL Server releases shared locks as soon as the data page(s) is no longer needed.</LI><LI CLASS="ULI1"><I>Exclusive locks </I>for write operations—UPDATE, INSERT, DELETE. When an exclusive lock is set, no other transaction can acquire a lock of any kind on the same object until SQL Server releases the original lock at the end of the transaction.</LI><LI CLASS="ULI1"><I>Update locks </I>whenever a transaction intends to modify a page prior to a write operation. Update locks reduce contention among multiple writers.</LI></UL></SPAN><P CLASS="t">Within SQL Server, the efficient use of automatic locking prevents destructive interference from concurrent transactions. By default, the changes made by the SQL statements only become visible to other transactions after those changes are committed. </P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Segments</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Segments</H3><P CLASS="t">Segments are named collections of fragments within a database used to control the allocation of pages in a database. Before the widespread availability of RAID systems, segments offered a mechanism to allocate specific database objects to different disk drives to spread physical I/O across the drives.</P>
<P CLASS="t">When using segments, users creating objects can specify the segment in which they want SQL Server to allocate their objects. This allows I/O to be split between drives, rather than being concentrated on a single device.</P>
<P CLASS="t">The statements that create and extend segments work at the device level. When a segment name is applied to a device, it is applied to all fragments of the affected database on that device.</P>
<P CLASS="t">With the advent of inexpensive RAID arrays and the RAID capabilities of Windows NT, user-defined segments are no longer recommended. Setting up a RAID stripe set to spread I/O across an array of drives yields similar performance gains to setting up database segments, and RAID is easier to administer.</P>
<P CLASS="t">SQL Server continues to use its system segments to control the allocation of space in databases, so an understanding of how these system segments work within databases is still important. SQL Server always uses three system segments:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The system segment contains all pages allocated for SQL Server system tables.</LI><LI CLASS="ULI1">The logsegment segment contains all pages allocated to the log, which is contained in the <B>syslogs</B> table. </LI><LI CLASS="ULI1">The default segment contains all pages allocated to user-defined objects that did not have a user-defined segment specified when they were created. </LI></UL></SPAN><P CLASS="t">When you create a database with separate data and log portions, what actually happens is that the system and default segments are mapped to the database fragment on <B>dev1</B>, and the logsegment segment is mapped to the database fragment on <B>dev2</B>. </P>

<PRE>CREATE DATABASE sample ON dev1 = 10 LOG ON dev2 = 5
</PRE>
<P CLASS="t">This means that all pages allocated to system tables (except <B>syslogs</B>) and user tables or indexes are allocated from the system and default segments on <B>dev1</B>, while all pages for <B>syslogs</B> are allocated from the logsegment segment mapped on <B>dev2</B>.</P>
<P CLASS="a"><img src="dbin7.gif"></P>
<P CLASS="t">You then use ALTER DATABASE to generate an additional fragment:</P>

<PRE>ALTER DATABASE sample ON dev3 = 10
</PRE>
<P CLASS="t">SQL Server allocates 10 MB for the <B>sample</B> database on <B>dev3</B> and then maps the system and default segments to the fragment to make it a data device.</P>
<P CLASS="a"><img src="dbin8.gif"></P>
<P CLASS="t">If you really want this new allocation to be used for the log, then following the preceding ALTER DATABASE statement, you must execute the following stored procedure: </P>

<PRE>sp_logdevice sample, dev3
</PRE>
<P CLASS="t"><B>sp_logdevice</B> removes the mapping of the system and default segments on <B>dev2</B>, and maps the logsegment segment to <B>dev3</B>.</P>
<P CLASS="a"><img src="dbin9.gif"></P></BODY></HTML>

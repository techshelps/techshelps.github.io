<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Processor Tuning</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Processor Tuning</H3><P CLASS="t">Processor tuning involves the detection of CPU-bound operations. The following processor bottleneck monitoring guidelines will aid in determining such problems.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Symptoms and Actions</H4><SPAN CLASS="list"><UL><LI CLASS="ULI1"><B>Symptom:</B> If Processor: % Processor Time consistently registers in the range of 80 percent to 100 percent, the processor(s) may be the bottleneck. (System: % Total Processor Time can be viewed for multiprocessor systems.) 
<P CLASS="lt1"><B>Action:</B> Determine which SQL Server User process is consuming the CPU. To determine which process is using up most of the CPU's time, monitor SQLServer-Users: CPU time for all of the process instances (spid). One or more will appear as using the greatest cumulative time. Having determined the offending process instance, examine the query for inefficient design. In addition, examine indexes and database design for inefficiencies with respect to excessive I/O that consumes CPU cycles. (Wide tables and indexes as well as table scans cause more I/Os to occur.)</P></LI><LI CLASS="ULI1"><B>Symptom:</B> If Processor: % Privileged<B> </B>Time is consistently over 20 percent and Processor: % User Time is consistently below 80 percent, then SQL Server is likely generating excessive I/O requests to the system. 
<P CLASS="lt1"><B>Action:</B> Examine the disk controller card and the network interface card (see "General Actions for Processor Tuning" later in this article). In addition, if this is not a dedicated SQL Server system, look for other processes that meet the above criteria by using Process: % Privileged Time and Process: % User Time. If you find such processes, eliminate them, or schedule them to run at more convenient times.</P></LI></UL></SPAN><H4 CLASS="h3"><A NAME="sec1"></A>General Actions for Processor Tuning</H4><SPAN CLASS="list"><UL><LI CLASS="ULI1">Excessive processing may indicate a need to further denormalize the database.</LI><LI CLASS="ULI1">Schedule CPU-intensive queries during off-peak hours.</LI><LI CLASS="ULI1">Investigate tuning the query to be less CPU intensive (see "Query and Index Tuning" in Part 3).</LI><LI CLASS="ULI1">Boost the SQL Server priority as previously discussed.</LI><LI CLASS="ULI1">Determine that no unnecessary processes are running on the SQL Server platform. If so, turn them off to see if this improves performance.</LI><LI CLASS="ULI1">Set Windows NT Tasking to <B>Foreground and Background Applications Equally Responsive</B>.</LI><LI CLASS="ULI1">Assuming you have at least a 486-based server, part of the problem may be the network or disk adapter cards. 8-bit cards use more processor time than 16-bit or 32-bit cards. (The number of bits refers to the amount of data moved to memory from the adapter on each transfer.) The most efficient cards use 32-bit transfers to adapter memory or direct memory access (DMA) to move their data. Adapters that don't use memory-mapped buffers or DMA must use processor instructions to move data, and that makes the processor busy. DMA uses memory, which can slow the processor down, but it is still more efficient than individual instructions.</LI><LI CLASS="ULI1">Placing <B>tempdb</B> in RAM may help by reducing I/O requests.</LI><LI CLASS="ULI1">Assuming that SQL Server has sufficient memory to run (see "Memory Tuning," later in this article), increasing CPU power is the most effective hardware-related way to improve performance. You can add CPU power in two ways: using a faster CPU, or adding additional CPUs.

<UL><LI CLASS="ULI2">Faster CPU: When performance is important, you should consider using as fast a CPU as possible. In general, a faster CPU will probably realize a bigger performance gain over adding an additional CPU. This is because, while adding CPUs provides additional power, the operating system and SQL Server (or any application) incur an overhead in managing the work performed by multiple CPUs. Of course, once you are running the fastest CPU available in your chosen architecture, you can add additional CPUs to increase performance.</LI><LI CLASS="ULI2">Additional CPUs: Windows NT supports symmetric multiprocessing (SMP). Since SQL Server is implemented using native Windows NT threads, it can automatically take advantage of multiple CPUs. SQL Server takes good advantage of SMP platforms. To boost performance significantly, move your application to an SMP platform or add additional CPUs to an existing SMP platform.</LI></UL></LI></UL></SPAN></BODY></HTML>

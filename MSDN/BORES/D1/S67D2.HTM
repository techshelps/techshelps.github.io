<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Normalize Logical Database Design</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Normalize Logical Database Design </H3><P CLASS="t">Reasonable normalization of the logical database design yields the best performance. A greater number of narrow tables is a characteristic of a normalized database. A lesser number of wide tables is a characteristic of a denormalized database. A highly normalized database is routinely associated with complex relational joins, which can hurt performance. However, the SQL Server optimizer is efficient at selecting rapid, efficient joins, as long as effective indexes are available.</P>
<P CLASS="t">The benefits of normalization include:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Accelerated sorting and index creation, since tables are narrower.</LI><LI CLASS="ULI1">More clustered indexes, since there are more tables.</LI><LI CLASS="ULI1">Compact and narrow indexes.</LI><LI CLASS="ULI1">Fewer indexes per table, improving UPDATE performance.</LI><LI CLASS="ULI1">Fewer NULLs and less redundant data, increasing database compactness.</LI><LI CLASS="ULI1">Reduced concurrency impact of DBCC diagnostics, since the necessary table locks will affect less data.</LI></UL></SPAN><P CLASS="t">With SQL Server, reasonable normalization often helps rather than hinders performance. As normalization increases, so does the number and complexity of joins required to retrieve data. As a rough rule-of-thumb, extensive normalization is recommended unless it causes many queries to join in excess of four ways. </P>
<P CLASS="t">If the logical database design is already fixed and total redesign is not feasible, it may be possible to selectively normalize a large table if analysis shows a bottleneck on this table. If access to the database is conducted through stored procedures, this schema change could take place without impacting applications. If not, it may be possible to hide the change by creating a view that presents the illusion of a single table.</P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Subqueries</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Subqueries</H3><H4 CLASS="h5"><A NAME="sec0"></A>SQL Server 6.0</H4><P CLASS="t">ANSI-compliant. Test all subqueries to ensure desired results in your applications.</P>
<P CLASS="t">Examples: Subqueries that define the scope of a NOT IN WHERE clause should evaluate to UNKNOWN or FALSE for each row that returns a NULL.</P>
<P CLASS="t">Returns only those rows with valid data that is not in the subquery search condition.</P>
<P CLASS="t">Each condition is evaluated separately to provide accurate results when one or more conditions returns no results. Subqueries are evaluated first.</P>
<P CLASS="t">DISTINCT values are returned to the outer query for evaluation. Correlated subqueries that reference the same table as the outer query need to alias and properly identify each occurrence of that table.</P>
<H4 CLASS="h5"><A NAME="sec1"></A>SQL Server 4.2<I>x</I></H4><P CLASS="t">Examples: Rows with NULL entries in the evaluated column are returned as part of the NOT<B> </B>IN result set.</P>
<P CLASS="t">Subqueries in the WHERE clause are evaluated such that an EXISTS, IN, or ANY, when zero rows meet the request, causes the entire query to return zero rows even if the outer query used an OR for the conditions.</P>
<P CLASS="t">In correlated subqueries where duplicates exist, a query that includes aggregates and EXISTS subqueries sometimes evaluates the query incorrectly.</P>
<P CLASS="t">Evaluating a SELECT<B> </B>DISTINCT correlated subquery within an IN condition of the outer query causes the outer query to return no rows. </P></BODY></HTML>

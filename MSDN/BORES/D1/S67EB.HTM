<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Analyze Query Usage</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Analyze Query Usage</H3><P CLASS="t">Analyzing a query is a process of elimination. Before you begin to dissect the structure of the SQL query, you should eliminate other contributing factors that may influence SQL query performance. Having eliminated these other factors, it is then appropriate to analyze the structure of the query.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Views</H4><P CLASS="t">Although SQL queries that access views can be relatively simple in structure, the actual view can be complex in structure. Consequently, you should analyze a view for poor performance before any queries that access it are analyzed. Analyze the SQL statement that creates the view using the recommendations for analysis and design presented earlier in this chapter.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>Triggers</H4><P CLASS="t">Slow query performance can be attributed to a trigger that is defined for a table associated with the query. It may be that the trigger, and not the query, is performing slowly. However, trigger overhead is usually very low. Because the time involved in running a trigger is spent mostly in referencing other tables, it is the location of the other tables that may be the cause of the slow performance. Check for physical page reads from disk.</P>
<H4 CLASS="h3"><A NAME="sec2"></A>Stored Procedures</H4><P CLASS="t">Optimization of the search clause is based on the set of values provided when the stored procedure is first executed. The stored procedure then remains in cache (the query is not reoptimized each time it is executed). This process assumes that the first set of values used with the stored procedure is representative. If this is not the case, it is necessary to force a recompile of the stored procedure by executing WITH RECOMPILE, restarting SQL Server, or by executing the <B>sp_recompile</B> stored procedure.</P>
<P CLASS="t">Since stored procedures are not re-entrant, if two processes execute a stored procedure concurrently, two copies of the stored procedure are compiled, optimized, and stored in cache. The copies stored in cache remain there until they are aged out of cache or until they are forced to recompile either explicitly, by executing <B>sp_recompile</B> or restarting SQL Server, or implicitly, by dropping an index or table that is referenced by the stored procedure.</P>
<P></P>
<P CLASS="nh">Note</P>
<P CLASS="nt">Stored procedures are automatically recompiled when objects or indexes on any of the tables used by the access plan are dropped. They are not recompiled when you add indexes or run UPDATE STATISTICS.</P>
<P></P>
<H4 CLASS="h3"><A NAME="sec3"></A>Concurrency</H4><P CLASS="t">A query may be performing slowly due to concurrency conflicts with other queries. To determine if concurrency problems do exist, observe if the query runs efficiently during some periods of the normal work cycle and slowly during others. If this behavior is exhibited, then you should check the locking levels of other active SQL Server processes.</P>
<P CLASS="t">To determine if the query being analyzed is being blocked by another process, run <B>sp_who</B>. You can then execute <B>sp_lock</B> to obtain more detail about the state of process locks with respect to the identified queries. There are also SQLServer-Locks performance monitor counters, which are useful for determining the types of locks held system wide. The most useful counters for determining if server concurrency problems exist are Total Blocking Locks, Total Demand Locks, and any locks that are exclusive. If any of these values is high with respect to the number of executing query processes, then a concurrency problem probably exists.</P></BODY></HTML>

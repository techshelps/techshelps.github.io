<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ANSI Options in Procedures and Triggers</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">ANSI Options in Procedures and Triggers</H2><P CLASS="t">SQL Server 6.0 and 6.5 both added new SET options to enable ANSI behavior in Transact-SQL. Since these SET options can be issued by any client connection calling a stored procedure or firing a trigger, writers of stored procedures and triggers should not assume a standard environment will be in effect when the procedure or trigger is executed. Developers of procedures and triggers can do two things to address this issue:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">When testing procedures or triggers, you should always ensure that they work in both ANSI-compliant and non-ANSI environments. To do this, test with the ANSI options both on and off—for example, in SQL Server 6.5 do the following:</LI></UL></SPAN><P>USE mydb</P>
<P>go</P>
<P>SET ANSI_DEFAULTS OFF</P>
<P>go</P>
<P>EXEC TestProc</P>
<P>go</P>
<P>SET ANSI_DEFAULTS ON</P>
<P>go</P>
<P>EXEC TestProc</P>
<P>go</P>
<P></P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">When writing procedures and triggers, developers should consider whether running in either an ANSI or non-ANSI environment may affect the operation of the Transact-SQL statements they are using. If the commands used may be affected by the setting of some ANSI option, they should include a SET statement at the start of the procedure or trigger that ensures the statements will operate correctly. When a SET statement is issued in a procedure or trigger, the option is reset to whatever setting was in effect before the procedure or trigger was executed when the procedure or trigger quits. For example:</LI></UL></SPAN><P>CREATE PROCEDURE TestANSI @var1 char(8) AS</P>
<P>/* Allow for @var1 to be NULL and still compare correctly */</P>
<P>SET ANSI_NULLS OFF</P>
<P></P>
<P>SELECT MyCol</P>
<P>FROM MyTable</P>
<P>WHERE MyKey = @var1</P>
<P>go</P>
<P></P>
<P CLASS="lt1">When the procedure TestANSI is executed, it sets up the ANSI_NULLS option needed to let the comparison WHERE MyKey = @var1 to succeed when @var1 contains a null value. When TestANSI completes, the ANSI_NULLS option setting for the connection returns to whatever value it had before TestANSI was executed.</P></BODY></HTML>

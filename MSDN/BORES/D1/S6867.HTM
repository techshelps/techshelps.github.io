<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using SQL-DMO</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">Using SQL-DMO</H2><P CLASS="t"><B><I>SQL-DMO enables robust administration of complex distributed server environments.</I></B></P>
<P CLASS="t">SQL-DMO enables developers to quickly and easily develop a range of useful, customized SQL Server administration tools and interfaces for a multiserver environment. The unique power and flexibility of SQL-DMO can be applied to the full range of database management and database definition tasks such as production, performance tuning, and graphical representation of databases. </P>
<P CLASS="t">The following discussion of SQL-DMO code assumes an understanding of Visual Basic.</P>
<P CLASS="t">SQL-DMO is available for 32-bit Visual C++ and the 32-bit version of Visual Basic or Visual Basic for Applications. SQL-DMO is also available for third-party products that are OLE 2.0 automation controllers—applications that can control other applications through OLE automation. The OLE object information is held in the Sqlole65.tlb type library file and is available to OLE automation controllers. On the Visual Basic <B>Tools</B> menu, the <B>References</B> command loads SQL-DMO information from the Sqlole65.tlb type library. Visual Basic applications can then use SQL-DMO objects to manage SQL Server.</P>
<P CLASS="t">All SQL-DMO applications must first create a SQLServer object and then connect to a server. The following Visual Basic code is the minimum template required for a SQL-DMO application.</P>

<PRE>Dim ServerObject As New SQLOLE.SQLServer <B><BR></B>ServerObject.Connect "ServerName", "sa", "password"
</PRE>
<P CLASS="t">Once connected, the SQLServer object can be used to refer to other objects and make changes to the server. The following example changes the "allow updates" configuration value by referring to and updating the Configuration object. The SQLServer object, shown as <I>ServerObject</I>, has a Configuration property that owns a collection called ConfigValues. This line of code uses the ConfigValues collection to specify the "allow updates" member and to change its CurrentValue property.</P>

<PRE>ServerObject.Configuration.ConfigValues("allow updates").CurrentValue = 1
</PRE>
<P CLASS="t">If you want your application to modify database options, first refer to the specific SQL Server, then to the specific database before modifying the DBOption object's properties. The following Visual Basic code modifies the <B>SelectIntoBulkCopy</B> database option for the <B>pubs</B> database. This statement uses the Databases collection to refer to the <B>pubs</B> database.</P>

<PRE>ServerObject.Databases("pubs").DBOption.SelectIntoBulkCopy = TRUE
</PRE>
<P CLASS="t">Certain SQL-DMO methods, particularly those that enumerate a range of values, return a result set in a QueryResults object. A QueryResults object must be declared first and then set to the return value of the enumeration method. Note that it is not possible to use the <B>New</B> operator with the QueryResults object in the <B>Declare</B> statement, because QueryResults objects are returned only as the result of a method that returns a result set. The QueryResults object has methods that allow you to step through each row and column in the result set.</P>

<PRE>Dim ServerObject As New SQLOLE.SQLServer<BR>Dim Resultsobject As SQLOLE.QueryResults<BR>ServerObject.Connect "servername","sa","password"<BR>Set Resultsobject = ServerObject.EnumPublicationDatabases<BR>Debug.Print Resultsobject.GetColumnString(1,1)
</PRE>
<P CLASS="t">You can create a database and add tables, columns, and other database components by declaring new objects, setting essential properties, and then adding the new object to the appropriate collection. For example, a Column object has three essential properties (Name, Datatype, and Length) that must be specified before the Column object can be added to the Columns collection, as shown in the following code sample. Other optional properties, such as Identity, also must be set before the Column object can be added to the Columns collection. These properties cannot be changed once the object has been added to the collection. Other properties, such as the ID property, are controlled by the system.</P>

<PRE>Dim NewColobject as New SQLOLE.Column<BR>NewColobject.Name = "OrderCategory"<BR>NewColobject.Datatype = "char"<BR>NewColobject.Length = 2<BR>ServerObject.Databases("SalesDB").Tables("Orders").Columns.Add NewColObject</PRE>
<P CLASS="t">SQL-DMO error handling is consistent with Visual Basic error handling. You can trap SQL-DMO errors using the Visual Basic On Error Goto statement, as shown in the following procedure:</P>

<PRE>Sub ConnectToServer<BR>On Error Goto MyErrorHandler<BR>Dim ServerObject As New SQLOLE.SQLServer <B><BR></B>ServerObject.Connect "ServerName", "sa", "password"<BR>Exit Sub<BR>MyErrorHandler:<BR>MsgBox "The connection failed with error number " + str(Err.Number)<BR>End Sub
</PRE>
<P CLASS="t">Errors are handled differently in Visual C++. Each function returns a status value that you can use with a macro to obtain the error number and message.</P>
<P CLASS="t">The ServerGroup and RegisteredServer objects are new in Microsoft SQL Server 6.5. You can use these objects to write multiserver applications, where instructions are applied to all the servers on your network. The server groups and registered servers information is stored in the Registry of the system running SQL Server. You can use the following code sample to update the statistics for all tables on all the registered servers on your network.</P>

<PRE>Dim ServerGroupObject As New SQLOLE.ServerGroup<BR>Dim RegisteredServerObject As New SQLOLE.RegisteredServer<BR>Dim SQLServerObject As New SQLOLE.SQLServer<BR>Dim DatabaseObject As New SQLOLE.Database<BR>Dim TableObject As New SQLOLE.Table<BR>For Each ServerGroupObject In ServerGroups<BR>  For Each RegisteredServerObject In ServerGroupObject.RegisteredServers<BR>   SQLServerObject.Connect RegisteredServerObject.Name, "sa", ""<BR>   For Each DatabaseObject In SQLServerObject.Databases<BR>    For Each TableObject In DatabaseObject.Tables<BR>      TableObject.UpdateStatistics<BR>    Next<BR>   Next<BR>   SQLServerObject.Close<BR>  Next<BR>Next<BR></PRE></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Distributed Transaction Coordinator</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">Microsoft Distributed Transaction Coordinator</H2><P CLASS="t"><B><I>Microsoft Distributed Transaction Coordinator makes distributed applications easy to create.</I></B></P>
<P CLASS="t">Microsoft Distributed Transaction Coordinator (MS DTC) manages transactions on one or more SQL Server systems, guaranteeing transaction integrity and recoverability. Its transparent two-phase commit supports server-to-server procedures and simplifies application development. </P>
<P CLASS="t">MS DTC coordinates transactions across a network of Microsoft Windows NT–and Microsoft Windows 95–based systems. Modularity, or structuring an application as independent modules, allows you to build complex systems from simpler parts and to reuse software. Object-oriented concepts and the Microsoft Component Object Model (COM) provide a technique that allows you to write modular applications.</P>
<P CLASS="t">When an application is structured as a group of components, the individual parts can reside together in a single computer, or they can interact by using remote-procedure calls across a network. So, components offer both modularity and natural distribution.</P>
<P CLASS="t">Structuring an application into independent components can create a component management problem. Monolithic programs fail and are restarted as a unit. However, with a modular system, the failure of one component must not corrupt the others. There must be a way to isolate faults and limit fault propagation. Transactions provide modular execution and simplify and automate fault handling. They provide a simple conceptual execution framework for both implementers and users.</P>
<P CLASS="t">The user thinks of a transaction as a single change event that either happens or doesn't happen. Implementers think of a transaction as a programming style that allows them to write modules that can participate in distributed computations. Suppose you want to transfer money from one bank account to another. The implementers and the users want to make sure that either both accounts change or neither changes. It is hard to make this work in a distributed system—computers can fail and messages can be lost. Transactions provide a way to bundle a set of operations into an atomic execution unit.</P>
<P CLASS="t">The atomic all-or-nothing property appears throughout life. For example, if you enter a contract, an escrow officer coordinates the transaction by collecting the signatures of each party to the contract. The contract is final when the escrow officer announces that everyone has signed. A minister conducting a marriage ceremony first asks the bride and groom, "Do you take this person to be your spouse?" If they both respond "I do," the minister pronounces them married. A director on a movie set first asks, "Ready on the set?" If all respond "Yes," the director then calls, "Action!"</P>
<P CLASS="t">These scenarios illustrate the basic principle of a transaction: several independent entities must agree. If any party disagrees, the deal is off. If they agree, the transaction can occur. MS DTC performs this transaction coordination role for the other components of the COM architecture.</P>
<P CLASS="t">In MS DTC terminology, the director is called the transaction manager. The participants in the transaction that implement transaction-protected resources, such as relational databases, are called resource managers.</P>
<P CLASS="t">An application begins a transaction by calling the transaction manager's <B>BeginTransaction</B> method. This creates a transaction object that represents the transaction. The application then calls the resource managers to do the work of the transaction. </P>
<P CLASS="t">The application's first call to each resource manager identifies the application's current transaction. For example, if the application is using a relational database, it calls the ODBC interface, which associates the transaction object with the ODBC connection. Thereafter, all database calls made over that connection are performed on behalf of the transaction until the transaction is ended.</P>
<P CLASS="t">When a resource manager first does work on behalf of a transaction, it <I>enlists</I> in the transaction by calling the transaction manager. As the transaction progresses, the transaction manager keeps track of each of the resource managers enlisted in the transaction.</P>
<P CLASS="t">Typically, the application completes the transaction with a call to the <B>Commit</B> transaction method. If the application is unable to complete, the application calls the <B>Abort</B> transaction method, which undoes the transaction's actions. If the application fails, MS DTC aborts the transaction.</P>
<P CLASS="t">When the application successfully completes the transaction's work, it calls the MS DTC to <I>commit</I> the transaction. MS DTC then goes through a <I>two-phase</I><B> </B><I>commit protocol</I> to get all of the enlisted resource managers to commit. The two-phase commit protocol ensures that all the resource managers commit the transaction or all abort it. </P>
<P CLASS="t">In the first phase, the MS DTC asks each resource manager if it is <I>prepared</I> to commit. If all participants say yes, then in the second phase MS DTC broadcasts the commit message to all of them. If any part of the transaction fails, if a resource manager fails to respond to the prepare request, or if a resource manager responds no, then MS DTC notifies all of the resource managers that the transaction aborted.</P>
<P CLASS="t">Transaction managers are a key part of most database systems. Transaction managers are also an optional part of some operating systems. It is thought that transactions are essential for distributed applications—transactions provide modular execution, which complements COM modular programming. Therefore, Microsoft implemented transaction management software for both Microsoft Windows 95 and Microsoft Windows NT operating systems.</P>
<P CLASS="t">In its first release, MS DTC works with one resource manager: Microsoft SQL Server. It also operates with several transaction processing monitors, including Encina, Top End, and Tuxedo. MS DTC implements the OLE transaction interfaces. All OLE transaction interfaces are public so that any resource manager can become an OLE transaction resource manager. In the future, Microsoft and other software companies will add other transactional resource managers, such as distributed object systems, transactional file systems, transaction queuing systems, and workflow management systems.</P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Synchronizing Threads</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Synchronizing Threads</H3><P CLASS="t">How do you prevent thread collisions? Win32 provides powerful synchronization objects to coordinate the work of multiple threads. Each synchronization object is in either a signaled or nonsignaled state. Signaled means that the object is available. Nonsignaled means that it is unavailable or in use by another process or thread. </P>
<P CLASS="t">The most common use for synchronization objects is to protect resources, like global variables, that are shared among multiple threads. Synchronization objects let you serialize access and ensure that one thread does not start reading the value of a character array, for example, until the other thread has finished writing to it. </P>
<P CLASS="t">The simplest form of mutual exclusion is a Critical Section. Critical Sections provide mutual exclusion between multiple threads within a single process. Only one thread can get exclusive access to the Critical Section by using <B>EnterCriticalSection</B>.<B> </B>All of the other threads are held in an efficient wait state, not scheduled by the operating system, until they are able to get access to the Critical Section. When they are finished, they call <B>LeaveCriticalSection</B> and let another thread get in. Critical Sections are global variables whose value is set by the operating system (Kernel) rather than by the user. Mutexes are similar to Critical Sections, but provide mutual exclusion across processes on the same machine. Semaphores<B> </B>allow you to throttle the number of users accessing a particular resource. When the semaphore<B> </B>is created, the maximum number of simultaneous users is specified. When the user calls <B>WaitForSingleObject</B> and the usage count is less than the maximum, the system decrements the usage count and wakes up the thread. Critical Sections, Mutexes, and Semaphores are generally used to control access to data.<B> </B>Events<B> </B>are used to signal that some task has been completed or a task is ready to be started. The following illustration shows these concepts.</P>
<P CLASS="a"><img src="bok527.gif"></P></BODY></HTML>

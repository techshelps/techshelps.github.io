<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Single-column (Domain) Integrity</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Single-column (Domain) Integrity</H3><P CLASS="t">Protecting the consistency of all data in a single column prevents data-entry errors. SQL Server supports several features for enforcing single-column integrity.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Data Types</H4><P CLASS="t">Data types determine the kind of information that can be stored in the columns of database tables. A rich set of system-supplied data types is provided—including binary large object (BLOB) data types to support storage of multimedia objects in the database. SQL Server also supports international languages with alternate sort orders and alternate date, money, and number formats.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>User-defined Data Types</H4><P CLASS="t">Developers can also define their own data types to supplement the system-supplied data types. For example, <B>us_state_type</B> can be defined as a two-character data type to store the legal abbreviations for each of the fifty states in the United States of America. The advantage of user-defined data types is that definitions of NULL values, defaults, and rules can be shared across many applications or tailored to specific applications. They also ensure consistency of data so tables can be joined together during transactions and queries.</P>
<H4 CLASS="h3"><A NAME="sec2"></A>Column-level and Table-level Constraints</H4><P CLASS="t">Constraints conform to the ANSI standard for creating and altering tables. Constraints limit the possible values that users can enter into a column or columns. Multiple constraints can be associated with a single column (column-level constraint), and a constraint can be associated with multiple columns (table-level constraint). Constraints are defined when creating tables in SQL Enterprise Manager or with the CREATE TABLE statement. SQL Server provides CHECK, DEFAULT, FOREIGN<B> </B>KEY, PRIMARY<B> </B>KEY, and UNIQUE constraints.</P>
<H4 CLASS="h3"><A NAME="sec3"></A>NULL Values</H4><P CLASS="t">SQL Server correctly distinguishes NULLs (non-entries) from any specific entry, including "0" for a number field or spaces for a character field.</P>
<H4 CLASS="h3"><A NAME="sec4"></A>Defaults</H4><P CLASS="t">Defaults allow developers to specify a value when no value is explicitly entered for a specific column. For example, if a user does not enter a value in the <B>order_date </B>column, SQL Server can automatically insert the current date.</P>
<H4 CLASS="h3"><A NAME="sec5"></A>Rules</H4><P CLASS="t">Rules specify the domain of valid values for a specific column. They can specify a set of values, a range of values, or a format. For example, the <B>us_state_code</B> column can be restricted to the legal abbreviation of each of the fifty states in the United States of America.</P>
<P CLASS="t">The definition of a rule can contain any expression that is valid in an SQL WHERE clause, except that it cannot refer to column or table names. It can include arithmetic operators, relational operators, LIKE, BETWEEN, and so on. The same rule can be bound to more than one column or user-defined data type, and applications automatically use any rules that have been defined. Rules can be changed or dropped at any time. </P>
<P CLASS="t"><B>Note</B>   CHECK constraints, which specify data values that are acceptable in a column, can often be more powerful than rules. You can apply CHECK constraints to multiple columns, and you can apply multiple CHECK constraints to a single column. </P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The ACID Properties</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">The ACID Properties</H2><P CLASS="t">The ACID properties are four characteristics of transactions: atomicity, consistency, isolation, and durability. Transactions provide the ACID properties. </P>
<P CLASS="term1"><B>Atomicity</B></P>
<P CLASS="dt1">A transaction either commits or aborts. If a transaction commits, all of its effects remain. If it aborts, all of its effects are undone. For example, in renaming an object, the new name is created and the old name is deleted (commit), or nothing changes (abort).</P>
<P CLASS="term1"><B>Consistency</B></P>
<P CLASS="dt1">A transaction is a correct transformation of the system state. It preserves the state invariants. For example, by adding an element to a doubly linked list, all four forward and backward pointers are updated.</P>
<P CLASS="term1"><B>Isolation</B></P>
<P CLASS="dt1">Concurrent transactions are isolated from the updates of other incomplete transactions. These updates do not constitute a consistent state. This property is often called <I>serializability</I>. For example, a second transaction traversing the doubly linked list mentioned in the consistency example will see the list before or after the insert, but it will see only complete changes.</P>
<P CLASS="term1"><B>Durability</B></P>
<P CLASS="dt1">After a transaction commits, its effects persist even if there are system failures. For example, after the rename in the atomicity example, the object will have the new name even if the system fails and reboots right after the commit completes.</P>
<P CLASS="t">It is up to the application to decide what consistency is and to bracket its computation with <B>BeginTransaction</B> and <B>Commit </B>transaction methods to delimit these consistent transformations. Transactional resource managers provide consistent, isolated, and durable transformations of the objects they manage. MS DTC manages transactions that involve multiple resource managers, perhaps distributed among multiple computers. MS DTC creates transaction objects, tracks migration of transactions among resource managers, and implements the two-phase commit protocol to make these transactions atomic and durable.</P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Filltabl</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Implementing Filltabl</H3><P CLASS="t">Filltabl can be used to generate rows with random data values in a table prior to testing.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Usage</H4><P CLASS="t">From the command prompt:</P>
<P CLASS="t"><B>filltabl</B> <B>/T</B><I>dbtable</I> <B>/N</B><I>count</I> [<B>/U</B><I>loginid</I>] [<B>/P</B><I>password</I>] [<B>/S</B><I>servername</I>] [<B>/R</B><I>randomseed</I>]</P>
<P CLASS="t">where:</P>
<P CLASS="term1"><B>/T</B><I>dbtable</I></P>
<P CLASS="dt1">Is the fully qualified name of the table to fill with data. The name should be in the format of <I>dbname</I>.<I>ownername</I>.<I>tablename</I>.</P>
<P CLASS="term1"><B>/N</B>count</P>
<P CLASS="dt1">Is the number of rows to be inserted.</P>
<P CLASS="term1"><B>/U</B><I>loginid</I></P>
<P CLASS="dt1">Is the user login ID. Login IDs are case-sensitive.</P>
<P CLASS="term1"><B>/P</B><I>password</I></P>
<P CLASS="dt1">Is a user-specified password for the <I>loginid</I> specified in the <B>/U</B> parameter.</P>
<P CLASS="term1"><B>/S</B><I>servername</I></P>
<P CLASS="dt1">Specifies which SQL Server to connect to. The <I>servername</I> is the name of the server computer on the network. This option is required if Filltabl is executed from a remote computer on the network.</P>
<P CLASS="term1"><B>/R</B><I>randomseed</I></P>
<P CLASS="dt1">A numeric value that Filltabl will pass to the C run-time function <B>srand</B> to adjust the generation of the pseudo-random data values.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>Remarks</H4><P CLASS="t">There should not be a blank between the command line-prompt switches and their associated parameters. For example, <B>/N1000</B> is correct, while <B>/N 1000</B> is not.</P>
<P CLASS="t">Filltabl will fill all columns having numeric data types with random numbers. It will fill all <B>character</B>, <B>binary</B>, <B>text</B>, or <B>image</B> columns with randomly generated characters or bit patterns. Therefore, Filltabl is a good utility for generating large amounts of data to test actions, such as timing data transfers or backup and recovery. Since the data values are so random, Filltabl is not a good tool for generating specific values for testing the logic encoded in applications, SQL commands, triggers, or stored procedures.</P>
<P CLASS="t">Filltabl uses the C run-time function <B>rand</B> to generate the random values it places in the rows. The <B>rand</B> function is called a psuedo-random generator because it does not generate completely random numbers. If you want to ensure that your applications generate unique numbers, you can call the <B>srand</B> function with a starting seed value before calling <B>rand</B>. If Filltabl is called multiple times without specifying a <B>/R</B> parameter, the data values generated will be reasonably random. If you want to have more random behavior from multiple runs of Filltabl, specify a different <B>/R</B><I>randomseed</I> value on each run of the utility. If you want Filltabl to generate the same data values for multiple runs, specify the same <B>/R</B><I>randomseed</I> parameter on each run.</P>
<H4 CLASS="h3"><A NAME="sec2"></A>Samples</H4><P CLASS="ls">To generate 1,000 rows in a user table:</P>
<P>filltabl /Tsadb.dbo.smalltab /N1000 /Usa /Psapwd /SMyServer</P>
<P></P>
<P CLASS="ls">To generate 10,000 rows in a user table with a random seed:</P>
<P>filltabl /TMyDB.Me.MyTable /N10000 /UMyLogin /PMyPassword /SMyServer /R35960</P></BODY></HTML>

<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the MAPI Subsystem</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Understanding the MAPI Subsystem</H3><P CLASS="t">The following diagram shows the MAPI subsystem infrastructure on which Microsoft Exchange Server is built.</P>
<P CLASS="a"><img src="xerk_e01.gif"></P>
<P CLASS="t">Messaging client applications either communicate with service providers through the MAPI subsystem, or the MAPI subsystem initiates contact and the services communicate directly. Through broad publication of messaging APIs, and their robust messaging and workgroup functionality, MAPI has become a widely used standard throughout the industry for messaging and groupware clients and providers.</P>
<P CLASS="t">As the previous diagram shows, MAPI-compliant clients span a variety of messaging- and workgroup-based applications and support either 16-bit applications running on Windows 3.<I>x</I>, or 16-bit or 32-bit MAPI applications running on Windows NT Server or Windows 95. Each of these types of applications can access the service provider functionality needed without requiring a specific interface for each provider. This is analogous to applications that use the Microsoft Windows printing subsystem not requiring drivers for every available printer. </P>
<P CLASS="t">Messaging applications that require messaging services can access them through any of five MAPI subsystem interfaces: </P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Simple MAPI (sMAPI)</LI><LI CLASS="ULI1">Common Messaging Calls (CMC)</LI><LI CLASS="ULI1">OLE Messaging/Active Messaging</LI><LI CLASS="ULI1">OLE Scheduling</LI><LI CLASS="ULI1">MAPI itself</LI></UL></SPAN><P CLASS="t">Client requests for messaging services are processed by the MAPI subsystem—either as function interface calls (for sMAPI or CMC) or as manipulations of MAPI objects (for OLE Messaging or MAPI itself)—and are passed on to the appropriate MAPI-compliant service provider. The MAPI service providers then perform the requested actions for the client and pass the action back through the MAPI subsystem to the MAPI client. </P>
<P CLASS="t">Each MAPI subsystem interface provides specific functionality as follows:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1"><B>sMAPI </B>— Contains 12 Windows-based function calls that enable messaging-aware applications to perform basic messaging tasks such as sending e-mail and resolving conflicts in e-mail names. It provides the programming interface primarily used by Microsoft Mail Server.</LI><LI CLASS="ULI1"><B>CMC </B>— Provides functionality similar to that available in sMAPI but also supports cross-platform configurations. </LI><LI CLASS="ULI1"><B>OLE Messaging </B>— An OLE Automation server that presents a large subset of MAPI functionality to the developer. OLE messaging empowers developers using Visual Basic or Visual Basic for Applications to tap into the messaging and workgroup functionality inherent in MAPI. It also permits users to maximize their software investment, by integrating applications created with Visual Basic for Applications and desktop software into custom Microsoft Exchange Server solutions. </LI><LI CLASS="ULI1"><B>OLE Scheduling</B> — An OLE Automation server that provides developers who use Visual Basic or Visual Basic for Applications with an interface to access the information stored in Microsoft Schedule+ 7.0.</LI><LI CLASS="ULI1"><B>MAPI </B>— A Component Object Model (COM) interface that enables MAPI objects such as messages, forms, and folders to be manipulated. It was designed to be used by complex messaging and groupware applications. For this reason, MAPI is used by developers who want the full range of MAPI functionality in their applications and the higher performance of writing directly to an API.</LI></UL></SPAN><P CLASS="t">Not shown in the preceding diagram, but frequently employed, are third-party programming interfaces that can be built upon MAPI. Because MAPI is an open and well-defined interface, a proprietary third-party API can be implemented on top of MAPI without having to revise the MAPI subsystem itself. You can also implement your own MAPI solutions to meet your particular needs without incurring the development costs that would otherwise accrue on other messaging infrastructures.</P></BODY></HTML>

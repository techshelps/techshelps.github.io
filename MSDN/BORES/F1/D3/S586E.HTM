<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SNA Server Management Architecture Components</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">SNA&nbsp;Server Management Architecture Components</H3><P CLASS="t">The following picture diagrams the layers of SNA&nbsp;Server:</P>
<P CLASS="a"><img src="snrk_a06.gif"></P>
<P>Figure 1.6    This figure depicts the various components of <BR>SNA&nbsp;Server management architecture.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Manage Agent Layer (MngAgent)</H4><P CLASS="t">Manage Agent runs as a service on the server computer and exchanges data with the corresponding management proxy on the client (Manage Client). Changes in the state of some management data are selectively sent to the Manage Client. Commands and requests from a Manage Client are accepted by Manage Agent and reflected down to the Manage objects. Having a central module allows for the addition of extra features that may eventually include flow control, compression, and more. MngAgent must be running on SNA&nbsp;Server computers, or the service will show an Offline status in SNA&nbsp;Server Manager.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>Shared Management Object Layer</H4><P CLASS="t">The shared management object layer is a temporary holding area, storing data about SNA&nbsp;Server services and resources. When a change occurs in a service, the information is written into shared management.</P>
<H5 CLASS="h4"><A NAME="sec2"></A>Shared Management Objects</H5><P CLASS="t">Access to shared memory is via a set of objects. Objects contain data about the various components of SNA&nbsp;Server. Each process has its own copy of the object interfacing to shared memory. The object provides a wrapper for changes to shared memory, and will propagate change notifications to all the processes that </P>
<P CLASS="t">have requested notification for that object. Each process may have only a subset of the complete object set. The actual object data is common for all the processes. The objects also enforce access control on the data to prevent conflicts (mutual exclusion).</P>
<P CLASS="t">Each shared management object keeps track of which processes have a reference to the shared data, and what type of notifications each process has requested per object.</P>
<H5 CLASS="h4"><A NAME="sec3"></A>Agent Notify Queue</H5><P CLASS="t">The Agent Notify Queue is used to queue update notifications from the underlying management objects, and to dispatch the queued notifications to the proper place for handling. Each process creates a "notify queue" for receiving events. The events are dispatched to the "notifysink" that is registered to accept messages for the manage object that generated the event. If a new manage object is created, notification is sent to the sink of the parent object.</P>
<P CLASS="t">The Agent Notify Queue resides in shared memory, allowing the service process to place notifications in the queue, and the MngAgent to remove and process the notifications.</P>
<H5 CLASS="h4"><A NAME="sec4"></A>Service Notify Queue</H5><P CLASS="t">The Service Notify Queue is used to queue requests, commands, and notification of changes to the underlying management objects, and to dispatch the queued notifications to the service process for handling. It is identical to the Agent Notify Queue, except that the source and destination are switched.</P>
<P CLASS="t">The Service Notify Queue resides in shared memory, allowing the Agent process to place notifications in the queue, and the service process to remove and process the notification.</P>
<H5 CLASS="h4"><A NAME="sec5"></A>Notify Sinks</H5><P CLASS="t">Each process that requires notification of events to manage objects will create a Notify Sink. The Notify Sink is the destination object of an event notification. The sinks do not exist in the shared management objects layer; however, they are used when needed. The Notify Sink receives notification after information is taken out of the queue by a process.</P>
<H4 CLASS="h3"><A NAME="sec6"></A>Service Format Layer</H4><P CLASS="t">This layer is used to isolate a service from the management object layer. Each service may provide an agent DLL that gathers the data from the service and passes it to the shared objects. Similarly, commands and requests coming from the shared management objects are passed via this layer. </P>
<P CLASS="t">A special case of this is used to support the SNA&nbsp;Server service itself. Management data and commands are exchanged with the SNA&nbsp;Server service via shared memory links in the DMOD. These links existed in previous versions of the SNA&nbsp;Server product. To minimize risk, these interfaces were left unchanged in the 3.0 version. An extension to MngAgent was written to convert the old interface to the new shared management objects. This extension runs as part of the MngAgent service process, and is contained in SNAMANAG.DLL and MNGSNA.DLL.</P></BODY></HTML>

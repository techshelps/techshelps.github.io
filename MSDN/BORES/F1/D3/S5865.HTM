<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SNA Server Architecture Overview</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">SNA&nbsp;Server Architecture Overview</H2><P CLASS="t">The architecture of SNA&nbsp;Server and its clients was designed to support two kinds of communication: those between client and server, and between server and management workstations. The components allow client computers to communicate with SNA&nbsp;Server computers and vice versa over local-area and wide-area networks. The architecture of SNA&nbsp;Server is best described in two pieces—the client-server architecture and the management architecture—with an explanation of how each manages data. </P>
<P CLASS="t">The client-server architecture allows applications to communicate data between server and client computers. It uses the SnaBase, SnaServer, and SnaDMOD services and network protocols such as TCP/IP, and IPX/SPX to achieve communication. Figure 1.1 provides an overview of the server architecture.</P>
<P CLASS="a"><img src="snrk_a01.gif"></P>
<P>Figure 1.1    An overview of SNA&nbsp;Server architecture.</P>
<P CLASS="t">These services work with SnaBase and WINRUI, WINSLI, WINAPPC, and WINCPIC DLLs to provide the fundamental service of SNA&nbsp;Server: support for applications written to SNA APIs. These APIs run on application clients without the complexity and redundant overhead of a full SNA protocol stack on each client. Figure 1.2 provides an overview of the client architecture.</P>
<P CLASS="a"><img src="snrk_a02.gif"></P>
<P>Figure 1.2    An overview of SNA&nbsp;Server client architecture.</P>
<P CLASS="t">The management architecture in SNA&nbsp;Server uses Manage Agent (MngAgent) and Manage Client (MngCli) to manage services, maintain connections, and transfer information. It can be directed to make decisions on filtering information transmitted over the LAN to management clients to avoid large bursts of traffic that swamp the transports. When a change occurs on an SNA&nbsp;Server computer, MngAgent decides whether to send it to the client via MngCli. Changes in LU status, adding new users and starting or stopping of an APPC session are some of the changes that MngAgent monitors and directs. Queues on both server and client computers act as temporary holding areas for data transfer. Figure 1.3 provides an overview of how the management architecture allows communication between server and client.</P>
<P CLASS="a"><img src="snrk_a03.gif"></P>
<P>Figure 1.3    An overview of how SNA&nbsp;Server computers and client computers communicate with each other.</P>
<P CLASS="t">The client-server architecture and management architecture use the DMOD transportation protocol. How DMOD interacts with each component is discussed in the following sections. The important characteristics of DMOD are:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">It is protocol-independent and supports TCP/IP, IPX/SPX, Microsoft Networking/NetBIOS, Banyan VINES, and AppleTalk.</LI><LI CLASS="ULI1">It supports multiple links simultaneously.</LI><LI CLASS="ULI1">Is able to send and receive variably sized messages.</LI></UL></SPAN><P CLASS="t">It provides a nonblocking operation.</P>
<P CLASS="t">DMOD is a specialized form of the Remote Procedure Call (RPC) facility and is proprietary to SNA&nbsp;Server. For more information about DMOD, see the topic "How Do I Secure SNA&nbsp;Server?" in the <I>Microsoft SNA&nbsp;Server Administration Guide</I>.</P></BODY></HTML>

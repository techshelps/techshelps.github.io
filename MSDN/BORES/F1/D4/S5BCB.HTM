<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRAPMON.EXE: SNMP Trap Monitor</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">TRAPMON.EXE: SNMP Trap Monitor</H3><P CLASS="t">SNMP Trap Monitor allows you to check the reliability and throughput of your SNMP trap delivery system. SNMP Trap Monitor tests the delivery of SNMP traps from a trap generator to a trap receiver by comparing the number of traps sent and received.</P>
<P CLASS="t">The SNMP protocol does not support acknowledgment of sent traps, but SNMP Trap Monitor stores received traps in a database, providing a way to keep track of sent traps. Therefore, SNMP Trap Monitor must be run on at least two computers, so that the traps sent by an SNMP agent can be received, stored, and compared at all computers running SNMP Trap Monitor. All sites running SNMP Trap Monitor can see all the received traps at any other site.</P>
<P CLASS="t">To reduce network traffic, place one of the SNMP Trap Monitors at the site where the SNMP agent is sending traps; this will reduce network traffic, because traps are internally looped back. The second SNMP Trap Monitor can be placed at another site to test network reliability.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Runs On</H4><P CLASS="t">Alpha, x86</P>
<H4 CLASS="h3"><A NAME="sec1"></A>Files Required for TRAPMON</H4><P CLASS="t">TRAPMON.EXE<BR>TRAPMON.INI<BR>MGMTAPI.DLL</P>
<P CLASS="t">The following software is also required:</P>
<P CLASS="t">Microsoft ODBC (Open Database Connectivity) Driver 2.0 or higher<BR>Microsoft SQL Server 6.0 or higher<BR>TCP/IP and SNMP protocols<BR>Windows&nbsp;NT SNMP service </P>
<H4 CLASS="h3"><A NAME="sec2"></A>Setting Up SNMP Trap Monitor</H4><P CLASS="t">The following procedures include two instances of SNMP Trap Monitor and one of SNMP agent. Before starting either procedure, complete the following steps:</P>
<P CLASS="ls">Install TCP/IP and SNMP protocols on all computers that will run SNMP Trap Monitor. Because SNMP Trap Monitor uses the PUBLIC community, be sure the SNMP protocol's security is set up to receive traps from the PUBLIC community, which is the default.</P>
<P CLASS="ls">Install TCP/IP and SNMP protocols on the monitored computer that will be transmitting traps. Set up the SNMP protocol on this computer to send traps to all computers running SNMP Trap Monitor using the PUBLIC community.</P>
<P CLASS="ls">Install ODBC on all computers that will run SNMP Trap Monitor. ODBC must point to the computer running SQL Server, in which SNMP Trap Monitor will create its trap database. The name of the database that will be created is specified in the initialization file.</P>
<P CLASS="ls">Create or modify an initialization file.</P>
<P CLASS="proch">To Set Up SNMP Trap Monitor on a Local and a Remote Site</P>
<P CLASS="t">In this procedure, one SNMP Trap Monitor runs on the monitored node, which is the local computer running the SNMP agent, while the second SNMP Trap Monitor runs on a remote computer.</P>
<P CLASS="ls">Setup the SNMP agent in Control Panel on the local site to send traps to itself and the remote SNMP management console.</P>
<P CLASS="ls">Run the following command on both the local and remote computers:</P>
<P CLASS="lt1"><B>trapmon.exe TRAPMON.INI</B></P>
<P CLASS="ls">Transmit traps to the local and remote computers.</P>
<P CLASS="proch">To Set Up SNMP Trap Monitor on Two Remote Sites</P>
<P CLASS="t">In this procedure, neither instance of SNMP Trap Monitor runs on the monitored node, which is the local computer running the SNMP agent.</P>
<P CLASS="ls">Setup the SNMP agent in Control Panel at the monitored node to send traps to both remote SNMP management consoles.</P>
<P CLASS="ls">Run the following command on both remote computers:</P>
<P CLASS="lt1"><B>trapmon.exe TRAPMON.INI</B></P>
<P CLASS="ls">Transmit traps to both remote computers.</P>
<H4 CLASS="h3"><A NAME="sec3"></A>The SNMP Trap Monitor GUI</H4><P CLASS="t">Shortly after running the TRAPMON.EXE command, the SNMP Trap Monitor GUI appears. This window includes the following items:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The white area at the top is the list of traps in the database, if any. Each record in this list is composed of the following fields, left to right:

<UL><LI CLASS="ULI2"><B>IDENTICAL</B> or <B>MISMATCH</B>. When two or more SNMP Trap Monitors are running, this field shows whether the traps received by all computers are identical—which they should be—or whether there is a mismatch.</LI><LI CLASS="ULI2"><B>EventInfo</B>. The event source and event ID.</LI><LI CLASS="ULI2"><B>Agent</B>. The IP address of the computer that sent the trap.</LI><LI CLASS="ULI2">Names of all computers running SNMP Trap Monitor, followed by the number of traps they have received. When an additional computer runs SNMP Trap Monitor and receives a trap, another column with that computer's name and number of traps received is appended to that trap's record.</LI></UL></LI></UL></SPAN><P CLASS="t">No new data is shown until you click <B>Refresh</B>.</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1"><B>Monitored Node</B>. This box shows the computer being monitored, which was specified in the initialization file.</LI><LI CLASS="ULI1"><B>Traps Updated</B>. Shows how many traps have been received at the computer running SNMP Trap Monitor, regardless of the trap type. </LI><LI CLASS="ULI1"><B>Trap Types</B>. Shows how many different types of traps have been received at the computer running the SNMP Trap Monitor. </LI><LI CLASS="ULI1"><B>Action on new traps</B>. If <B>Write</B> is selected, traps sent from the monitored node are written to the database and the <B>Traps Updated</B> counter is incremented. If the trap received is a new type of trap that does not exist in the database, the <B>Trap Types</B> counter is incremented. If <B>Discard</B> is selected, traps sent from the monitored node are not written to the database. Neither the <B>Traps Updated</B> nor the <B>Trap Types</B> counters change. </LI><LI CLASS="ULI1"><B>New Traps Queued</B>. This counter is incremented each time a new trap arrives at the computer running SNMP Trap Monitor. </LI><LI CLASS="ULI1"><B>Reset</B>. Clears the database of all traps and sets the <B>New Traps Queued</B>, <B>Traps Updated</B> and <B>Trap Types</B> counters to 0.</LI><LI CLASS="ULI1"><B>Refresh</B>. Updates the list to include any new data since the last refresh.</LI><LI CLASS="ULI1"><B>Quit</B>. Quits SNMP Trap Monitor.</LI></UL></SPAN><H4 CLASS="h3"><A NAME="sec4"></A>Usage Strategies</H4><P CLASS="t">This section outlines some ways to use SNMP Trap Monitor.</P>
<H5 CLASS="h4"><A NAME="sec5"></A>Connectivity Testing</H5><P CLASS="t">Connectivity can be tested by low quantity, timed, controlled event logging. You can confirm the receipt of traps sent from an SNMP agent to an SNMP management console. Problems can be caused by network topology or network configuration.</P>
<H5 CLASS="h4"><A NAME="sec6"></A>Data Saturation Testing</H5><P CLASS="t">A network storm can be simulated by large quantity, untimed, uncontrolled event logging. You can determine if there are any network or SNMP bottlenecks.</P>
<H5 CLASS="h4"><A NAME="sec7"></A>Frequency, Threshold, and Throughput Testing</H5><P CLASS="t">You can generate a certain number of events per second to determine at what frequency traps fail to be received at an SNMP management console. This determines the maximum number of traps that can be reliably sent for a given agent-manager connection.</P>
<H5 CLASS="h4"><A NAME="sec8"></A>Connection Saturation Testing for Frequency and Delay</H5><P CLASS="t">You can generate a number of events per second used in the previous test, then wait. This determines if the receiver at the SNMP management console is able to handle traps received at a constant rate.</P>
<H5 CLASS="h4"><A NAME="sec9"></A>Testing Whether a Trap is Lost or Stalled</H5><P CLASS="t">When sending many traps at once, sometimes not all of them are received; they are either lost or stalled. Wait a few seconds, then send one more trap. If the missing traps were stalled, they will show up with the latest trap.</P>
<P CLASS="t">For example, you send 100 traps at once, but only 98 are received. You then send one more trap and three are received; the missing two traps were merely stalled, not lost.</P>
<H4 CLASS="h3"><A NAME="sec10"></A>Troubleshooting</H4><P CLASS="t">This section offers various suggestions for solving problems.</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Try restarting the Windows&nbsp;NT SNMP services on all management and agent consoles.</LI><LI CLASS="ULI1">Make sure that communities and hosts are set up correctly in the control panels.</LI><LI CLASS="ULI1">Make sure that the security feature in Control Panel is set up correctly.</LI><LI CLASS="ULI1">Make sure that the SNMP agent is set up correctly. End-to-end and applications check boxes must be checked in Control Panel on the computer running the SNMP agent.</LI><LI CLASS="ULI1">Make sure the contents of the initialization file are correct.</LI><LI CLASS="ULI1">Make sure the appropriate radio button (<B>Write</B> or <B>Discard</B>) is selected in SNMP Trap Monitor.</LI><LI CLASS="ULI1">If you send one trap but received two, make sure you do not have two SNMP communities with the same host name; check Control Panel.</LI><LI CLASS="ULI1">If you do not receive traps, try making an IPC$ connection to the data source.</LI><LI CLASS="ULI1">Any changes made to the Windows&nbsp;NT SNMP service in Control Panel will not take effect until after the SNMP service is restarted.</LI><LI CLASS="ULI1">When using the Event to Trap Translator, if Windows&nbsp;NT events are logged but no traps are sent, make sure the event log is not full. If it is full, clear the event log or set it to overwrite old events.</LI><LI CLASS="ULI1">Make sure the database named in the initialization files at all computers running SNMP Trap Monitor is the same.</LI></UL></SPAN><H4 CLASS="h3"><A NAME="sec11"></A>Other Tools to use with SNMP Trap Monitor</H4><H5 CLASS="h4"><A NAME="sec12"></A>Network Monitor</H5><P CLASS="t">Network Monitor can determine where traps are being dropped in a network, as well as trace problems with network configuration and network devices.</P>
<H5 CLASS="h4"><A NAME="sec13"></A>Windebug</H5><P CLASS="t">Windebug can debug the SNMP extension agents and SNMP management console applications.</P>
<H5 CLASS="h4"><A NAME="sec14"></A>SMGENIE</H5><P CLASS="t">SMGENIE generates events, which the SNMP Event to Trap Translator can convert to traps, which will be forwarded to the SNMP Trap Monitor.</P>
<H5 CLASS="h4"><A NAME="sec15"></A>SNMP Event to Trap Translator</H5><P CLASS="t">The SNMP Event to Trap Translator (see the <I>SMS Administrator's Guide</I>) converts Windows&nbsp;NT system and application events (events written to the Windows&nbsp;NT event log) into SNMP traps.</P>
<H4 CLASS="h3"><A NAME="sec16"></A>TRAPMON Syntax      </H4><P CLASS="t"><B>trapmon</B>  [<I>init_file</I>]</P>
<P CLASS="term1"><I>init_file</I></P>
<P CLASS="dt1">A TRAPMON initialization file. The default is TRAPMON.INI in the current directory.</P>
<H4 CLASS="h3"><A NAME="sec17"></A>TRAPMON Initialization File</H4><P CLASS="t"><I>Node_ID  RES  RES  RES  ODBC_data_source  ODBC_table  ODBC_user_ID  </I>[<I>ODBC_password</I>]</P>
<P CLASS="t">The TRAPMON initialization file (default name TRAPMON.INI) has one record of the preceding form. The fields in this record have the following meanings:</P>
<P CLASS="term1"><I>Node_ID</I></P>
<P CLASS="dt1">A computer name without backslashes (for example, <B>node5</B>), or a dotted IP address (for example, <B>172.918.3.14</B>)</P>
<P CLASS="term1"><I>RES</I></P>
<P CLASS="dt1">These are reserved for future use. Specify the value <B>1</B>.</P>
<P CLASS="term1"><I>ODBC_data_source</I></P>
<P CLASS="dt1">The name of an ODBC (Open Database Connectivity) data source to which you can direct logged data.</P>
<P CLASS="term1"><I>ODBC_table</I></P>
<P CLASS="dt1">The name of a table within <I>ODBC_data_source</I> to which you can direct logged data. If this table does not exist, TRAPMON creates it.</P>
<P CLASS="term1"><I>ODBC_user_ID</I></P>
<P CLASS="dt1">The user ID used for connecting to<I> ODBC_data_source</I>.</P>
<P CLASS="term1"><I>ODBC_password</I></P>
<P CLASS="dt1">The password used for connecting to<I> ODBC_data_source</I>.</P>
<H4 CLASS="h3"><A NAME="sec18"></A>Notes on SNMP Trap Monitor's Behavior</H4><P CLASS="t">Because SNMP traps are transmitted using the User Datagram Protocol (UDP), there are limitations on them that affect the operation of SNMP Trap Monitor:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">SNMP traps are not guaranteed to be delivered, and there is no notification if they are not.</LI><LI CLASS="ULI1">Most network stack implementations and routers limit the size of UDP packets. If the packet is too large, the router drops it and records it as a discarded packet. Because many of the SNMP traps generated from Windows&nbsp;NT events are larger that the usual limits on UDP packets, many of these traps will not be delivered to SNMP consoles over a routed network.</LI></UL></SPAN><P CLASS="t">SNMP Trap Monitor provides what the SNMP protocol lacks: an artificial means of acknowledging traps sent using the UDP.</P>
<P CLASS="t">SNMP Trap Monitor also provides a means of determining the reliability of SNMP trap transmission, taking into account the following:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Transmission frequency</LI><LI CLASS="ULI1">Quantity of traps transmitted and received</LI><LI CLASS="ULI1">Reliability during network storms</LI><LI CLASS="ULI1">Transmission thresholds</LI><LI CLASS="ULI1">Network topology</LI><LI CLASS="ULI1">Network configuration</LI><LI CLASS="ULI1">Uses of other tools in conjunction with SNMP Trap Monitor</LI></UL></SPAN></BODY></HTML>

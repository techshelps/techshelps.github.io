<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using RPC Counter</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Using RPC Counter</H3><P CLASS="t">On the Windows 3.1 and Windows for Workgroups platforms, the RPC counter does not require any special setup. </P>
<H4 CLASS="h4"><A NAME="sec0"></A>To use RPC Counter on Windows NT Workstation and Windows 95 platforms</H4><p>&nbsp;&nbsp;&nbsp;&nbsp;1.    Set the following registry value to DWORD=1: </P>
<P>HKEY_LOCAL_MACHINE\Software\Microsoft\Exchange\Exchange Provider\RpcCounter</P>
<p>&nbsp;&nbsp;&nbsp;&nbsp;2.    Restart all MAPI applications for the change to take effect. </P>
<P CLASS="t">Running Rpccnt.exe automatically sets the registry value to enable the RPC count. </P>
<H4 CLASS="h3"><A NAME="sec1"></A>Understanding the Fields of the RPC Counter</H4><P CLASS="t">The RPC counter consists of the following nine fields, which indicate the number of RPCs generated for particular processes occurring on a Microsoft Exchange Server.</P>
<P CLASS="t"><B>Total RPCs   </B> (IS+DS) The number of RPCs going from all Microsoft Exchange clients on a given computer to all Microsoft Exchange Server computers they are connected to. This number includes RPCs to both the information store and the directory.</P>
<H5 CLASS="h4"><A NAME="sec2"></A>DS RPCs</H5><P CLASS="t">The number of RPCs going to the directory. They are generated by MAPI calls related to address name resolution. All RPCs in this category need to be monitored carefully when optimizing MAPI clients. Note that DS RPCs are not counted on Windows 3.1 and Windows for Workgroups platforms.</P>
<H5 CLASS="h4"><A NAME="sec3"></A>IS RPCs</H5><P CLASS="t">The total number of RPCs going to the information store. This number is the result of either MAPI calls accessing the message data or is generated automatically by the store provider code.</P>
<H5 CLASS="h4"><A NAME="sec4"></A>IS Bytes Out</H5><P CLASS="t">The total number of bytes sent. It does not include the overhead of the RPC protocol. For example, the number reported by the network tools will be approximately 300 bytes higher per RPC.</P>
<H5 CLASS="h4"><A NAME="sec5"></A>IS Bytes In</H5><P CLASS="t">The total number of bytes received. It does not include the overhead of the RPC protocol. For example, the number reported by the network tools will be approximately 300 bytes higher per RPC.</P>
<H5 CLASS="h4"><A NAME="sec6"></A>Progress RPCs (IS)</H5><P CLASS="t">Indicates the RPCs generated automatically by the information store provider to monitor the progress of long operations.</P>
<H5 CLASS="h4"><A NAME="sec7"></A>Resent RPCs (IS)</H5><P CLASS="t">Indicates the RPCs generated automatically by the information store provider if the RPC buffer is too small and the data needs to be resent. </P>
<H5 CLASS="h4"><A NAME="sec8"></A>Poll RPCs (IS)</H5><P CLASS="t">Indicate the RPCs generated automatically by the information store provider to check for pending notification or to get the data after receiving a push notification.</P>
<P CLASS="t">Indicates the RPCs generated directly by a MAPI call. This is the most important number to monitor when optimizing MAPI clients.</P>
<P CLASS="t">In addition, the <B>RPC Counter</B> dialog box displays an <B>Auto Reset</B> check box and a Reset Now button. The <B>Auto Reset</B> check box causes the counter data to be reset after four seconds of idle time. The <B>Reset Now</B> button resets the counter immediately.</P>
<H4 CLASS="h3"><A NAME="sec9"></A>Understanding RPC Counter Entry Points</H4><P CLASS="t">When using the Rpccnt(16).exe sample application, the file calls the appropriate Emsmdb(32).dll entry points to obtain the counter data. The information in this section is provided if you need to call the entry points directly (for example, to integrate the RPC counter with other performance tools). The macro in Rpccnt.xls is an example of how to access the counter data from Visual Basic code.</P>
<P CLASS="t">The Emsmdb(32).dll file contains three entry points necessary for accessing RPC data. These entry points are the same for Windows 3.1, Windows for Workgroups, Windows NT Workstation, and Windows 95 platforms. </P>
<P CLASS="t">The three entry points are:</P>
<UL><LI>ScStatOpen, which initializes the count.</LI><LI>ScStatCollect, which collects the data.</LI><LI>ScStatClose, which closes the counter.</LI></UL><H4 CLASS="h3"><A NAME="sec10"></A>Examples</H4><P CLASS="t">The following examples show the entry point declarations in both C and Visual Basic syntax:</P>
<H5 CLASS="h4"><A NAME="sec11"></A>C Syntax</H5><P CLASS="spacing"><BR></P>
<PRE>SCODE FAR PASCAL ScStatOpen(void);
SCODE FAR PASCAL ScStatClose(void);
SCODE FAR PASCAL ScStatCollect(struct RPCStat *rgStat, ULONG *pcbStat);</PRE>
<H5 CLASS="h4"><A NAME="sec12"></A>Visual Basic Syntax</H5><P CLASS="t">Declare Function ScStatOpen Lib "EMSMDB.DLL" () As Long</P>
<P CLASS="t">Declare Function ScStatClose Lib "EMSMDB.DLL" () As Long</P>
<P CLASS="t">Declare Function ScStatCollect Lib "EMSMDB.DLL" (ByRef rgStat As RPCStat, ByRef cbStat As Long) As Long</P>
<P CLASS="t">Because the data counting begins when <B>ScStatOpen</B> is called, a call to <B>ScStatClose</B> followed by <B>ScStatOpen</B> resets the counter. Because Windows NT Workstation and Windows 95 platforms have a per-instance data segment, you might have several counters counting independently. Windows 3.1 and Windows for Workgroups, however, have a shared data segment; therefore, resetting the counter is global to all instances.</P>
<H4 CLASS="h3"><A NAME="sec13"></A>Understanding the RPCStat Structure</H4><P CLASS="t">The <B>RPCStat</B> structure contains the RPC counter values. These values are generated in the fields described previously in "Understanding the Fields of the RPC Counter." The <B>RPCStat</B> structure used by the entry points are:</P>
<H5 CLASS="h4"><A NAME="sec14"></A>C Syntax</H5><P CLASS="spacing"><BR></P>
<PRE>struct RPCStat
{
  ULONG    cRPC;
  ULONG    cProgressRPC;
  ULONG    cResentRPC;
  ULONG    cPollRPC;
  ULONG    cbRPCOut;
  ULONG    cbRPCIn;
  ULONG    cDSARPC;
};</PRE>
<H5 CLASS="h4"><A NAME="sec15"></A>Visual Basic Syntax</H5><P CLASS="spacing"><BR></P>
<PRE>Type RPCStat
  cRPC As Long
  cProgressRPC As Long
  cResentRPC As Long
  cPollRPC As Long
  cbRPCOut As Long
  cbRPCIn As Long
  cDSARPC As Long
End Type</PRE>
<P CLASS="t">The <B>ScStatCollect</B> entry point has a pointer as an argument to the <B>RPCStat</B> structure (allocated by the caller) and a pointer to a long variable containing the size of the <B>RPCStat</B> structure in bytes. On return, if there is no error (return value = 0), the <B>RPCStat</B> structure is updated with the counter values and the size variable is updated with the returned data size. If an error occurs (for example, out of memory), the returned value is non-zero.</P></BODY></HTML>

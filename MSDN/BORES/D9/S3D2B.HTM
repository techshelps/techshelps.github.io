<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Collecting Inventory at Sites</TITLE><BODY BGCOLOR="#FFFFFF">


<H3 CLASS="h2">Collecting Inventory at Sites</H3><P CLASS="t">The following sections describe how inventory is collected and reported at primary and secondary sites.</P>
<H4 CLASS="h3"><A NAME="sec0"></A>Collecting Inventory at a Primary Site</H4><P CLASS="t">This section describes how SMS collects and uses inventory information at a primary site. The inventory collection process varies depending on your network operating system (Windows&nbsp;NT, LAN&nbsp;Manager, NetWare, or Macintosh). This process is summarized in the Figure 3.5, Collecting Inventory at a Primary Site.</P>
<P CLASS="t">At each SMS computer, the Inventory Agent scans and reports inventory.</P>
<P CLASS="t">At clients (such as computers running MS-DOS, Windows 3.1, Windows for Workgroups 3.11, OS/2, Macintosh, Windows&nbsp;95, and Windows&nbsp;NT Workstation), the Inventory Agent runs in the following ways:</P>
<UL><LI>If the Automatically Configure Workstation Logon Scripts feature has been set up for the SMS domain containing the client, the Inventory Agent program is started from the logon script when the user at the client logs on to the network. </LI></UL><UL><LI>If the user connects to the SMS_SHR on an SMS logon server and runs the RUNSMS batch file, the Inventory Agent is started.</LI></UL><P CLASS="t">When the Inventory Agent runs on a client, the Inventory Agent scans the client for software (specified by the PACKAGE.RUL file) and hardware. Note that there are five versions of the Inventory Agent program for clients: INVDOS, INV32CLI, INVWIN32, INVOS2, and INVMac. The Inventory Agent checks its inventory scan interval (the inventory scan interval for hardware and software is set in the Inventory dialog box from the Site Properties dialog box). If the interval has elapsed, the Inventory Agent scans for inventory.</P>
<P CLASS="t">The Inventory Agent is installed as a service on all computers running Windows&nbsp;NT and on servers running LAN&nbsp;Manager. The Inventory Agent service wakes up every 24 hours to check the inventory scan interval, and takes inventory if the interval has elapsed.</P>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<img src="srk_c06.gif"></P>
<P>Figure 3.5    Collecting Inventory at a Primary Site</P>
<P CLASS="t">On SMS servers (site servers, SMS logon servers, or helper servers) running Windows&nbsp;NT Server and LAN&nbsp;Manager, the Inventory Agent (INVWIN32.EXE) is installed and run as a service. This service is run using the SMS Service Account, not the user's account. This service may run even when no user is logged on to the network. When this service takes inventory, it places the inventory file on an appropriate SMS logon server for processing.</P>
<P CLASS="t">On Windows&nbsp;NT-based computers that are not SMS servers, SMS installs a different version of the Inventory Agent service (INV32CLI.EXE). This service ensures that inventory is reported periodically, even if a user does not explicitly run SMS Client Setup. This service runs using the local system account, which means that it can take inventory even when no user is logged on to the computer, and that it can gather information that cannot be obtained when running in the user's context. The service stores the inventory file locally. </P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="348pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>How SMS Modifies Logon Scripts</B></P>
<P>When you set up the Automatically Configure Workstation Logon Scripts feature, SMS modifies the logon scripts for each SMS domain in the site.</P>
<P>How SMS modifies logon scripts depends on the network operating system of the domain.</P>
<P><B>Windows&nbsp;NT and LAN&nbsp;Manager Domains</B></P>
<P>SMS uses the Directory Replicator service to place the SMSLS batch file and the SETLS utilities on the SMS logon server shares (NETLOGON) of the SMS logon servers in the site's domains. SMS modifies the logon scripts for users at the site's domains (for users who have existing logon scripts) or sets the users' logon scripts to the SMSLS batch file (for users who do not have existing logon scripts). When the SMSLS batch file is run in a logon script, the SMSLS batch file first runs the slow network detection program (NETSPEED.COM). The SMSLS batch file then runs the SMS Client Setup program to install SMS components on the client and the Inventory Agent to collect inventory for a client from an SMS domain's logon server.</P>
<P><B>NetWare Domains</B></P>
<P>SMS modifies the system login scripts for each SMS logon server in the site's NetWare domains. SMS adds lines to the script that run the SMSLS.SCR script, which runs the slow network detection program (NETSPEED.COM), SMS Client Setup, and Inventory Agent programs.</P>
<P></P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">A companion program, the Client Monitor (CLIMONNT.EXE), copies the inventory files to an SMS logon server. This program runs in the user's context, and therefore can only copy inventory files to the SMS logon server when the user is logged on to the network.</P>
<P CLASS="t">For more information about how SMS collects inventory from computers running Windows&nbsp;NT, see "Collecting Inventory from Computers Running Windows&nbsp;NT" later in this chapter.</P>
<P CLASS="t">On servers running NetWare, the Maintenance Manager on the site server scans the NetWare server and reports the inventory as a text MIF file to the site server's SITE.SRV\DATALOAD.BOX\DELTAMIF.COL where the MIF file is processed by the Inventory Data Loader.</P>
<P CLASS="t">The Inventory Agent program reports the inventory for the client by creating a RAW Inventory Agent file (*.RAW) and placing this file in the INVENTRY.BOX directory of the SMS_SHR share on the client's SMS logon server.</P>
<P CLASS="t">For NetWare servers, the file is placed in the LOGON.SRV\INVENTRY.BOX directory under the SMS root directory on the volume where the SMS logon server components are installed. Note that OS/2 and Macintosh clients write *.MIF files instead of *.RAW files. *.MIF files are written to the LOGON.SRV\ISVMIF.BOX directory of an SMS logon server.</P>
<P CLASS="t">At the site server, the Maintenance Manager monitors the LOGON.SRV \INVENTRY.BOX directories of the SMS_SHR share on all SMS logon servers in the site. The Maintenance Manager collects the client inventory files (*.RAW files) from these directories on the SMS logon servers, and places them in the SITE.SRV\INVENTRY.BOX directory on the site server. Inventory history files are maintained in the SITE.SRV\INVENTRY.BOX\HISTORY directory. If NetWare servers are present, the Maintenance Manager polls the INVENTRY.BOX directory on these servers for inventory information.</P>
<P CLASS="t">The Inventory Processor processes the client inventory files (*.RAW and *.MIF) and places the processed binary MIF files (*.MIF) in the SITE.SRV \DATALOAD.BOX\DELTAMIF.COL directory on the site server. If the Inventory Processor cannot process a .RAW file, it places the file in the SITE.SRV\INVENTRY.BOX\BADRAWS directory. If the Inventory Processor cannot process a .MIF file, it places the file in the SITE.SRV\INVENTRY.BOX \BADMIFS directory. For more information about how the Inventory Processor processes the .RAW and .MIF files, see "How Inventory History Is Maintained" later in this chapter.</P>
<P CLASS="t">The Inventory Data Loader is a multi-threaded process (new for SMS 1.2). The main thread of the Inventory Data Loader takes the Binary MIF files in the SITE.SRV\DATALOAD.BOX\DELTAMIF.COL directory and places them into the PROCESS subdirectory. If the Inventory Data Loader does not have an active thread for processing .MIF inventory MIF files, it will spawn a .MIF processing thread. Note that the Inventory Data Loader can have a separate thread to process the five types of MIF files, which are distinguished by their file extensions. Also note that main thread limits the number of MIF files of each type to 1000 files of each type—when the count falls below 1000 for a type of MIF file, the main thread moves more MIF files of that type into the PROCESS subdirectory (if they exist). The thread terminates when there are no more .MIF files to process.</P>
<P CLASS="t">The .MIF processing thread renames the .MIF file before it attempts to process it; it adds an X to the beginning of the filename (for example, it would rename 12345678.MIF to X12345678.MIF). If the thread successfully processes the .MIF file, then it updates the database with the information in the file. If the MIF file is not valid, or if the thread cannot process the file for any reason, then the thread places the .MIF file in the SITE.SRV\DATALOAD.BOX\DELTAMIF.COL \BADMIFS directory. If the Inventory Data Loader terminates while processing the .MIF file, the X remains at the beginning of the filename. The thread will try to process the MIF file three times, each time adding another X to the beginning of the filename. If the thread cannot process the .MIF file successfully after three attempts, then it moves the file to the BADMIFs directory.</P>
<P CLASS="t">The .MIF processing thread updates the site database with inventory reported by the clients. After the thread has updated the site database, it moves the .MIF file to SITE.SRV\SITEREP.BOX directory to be forwarded to its parent site—if the current site has a parent site. </P>
<P CLASS="t">After the site database update, you can view the updates to the computer inventory using the SMS&nbsp;Administrator. </P>
<P CLASS="t">The SMS&nbsp;Administrator does not automatically refresh the Sites window with changes to the database (such as the addition of clients or changes to the inventories of existing clients). You may need to refresh the display for the Sites window to see new clients or changes to existing clients.</P>
<H4 CLASS="h3"><A NAME="sec1"></A>Collecting Inventory at a Secondary Site</H4><P CLASS="t">At secondary sites, SMS collects inventory at SMS computers and collects all MIF files on the site server exactly as described in "Collecting Inventory at a Primary Site" earlier in this chapter. However, a secondary site stores all of its inventory in its parent site's database. There is no Inventory Data Loader at a secondary site to directly add the inventory information to a site database. Instead, a secondary site forwards its inventory MIF files to its parent so that the inventory information can be processed and added to the parent site's database by the Inventory Data Loader at the parent site. This process is summarized in Figure 3.6, Collecting Inventory at a Secondary Site.</P>
<P CLASS="t">Instead of writing Binary MIF files to the SITE.SRV\DATALOAD.BOX \DELTAMIF.COL directory, the Inventory Processor at a secondary site writes Binary MIF files to the SITE.SRV\SITEREP.BOX directory. The Site Reporter monitors the SITE.SRV\SITEREP.BOX directory for Binary MIF files. After it detects a queue of Binary MIF files, it creates a system job (*.JOB files in the SITE.SRV\SCHEDULE.BOX directory) to send the inventory information to the parent site. The system job file contains instructions for sending the Binary MIF files up to the parent site. The Site Reporter moves all inventory files to a subdirectory (SITECODE*) of the SITE.SRV\SITEREP.BOX directory.</P>
<P></P>
<P CLASS="t">The Scheduler starts the system job by compressing the Binary MIF files into a single file, <I>jobid</I>.P* (where <I>jobid</I> is the eight character job ID for the job). The <I>jobid</I>.P* file is placed in the SITE.SRV\SENDER.BOX\TOSEND directory in the SMS root directory. </P>
<P CLASS="t">The Scheduler also creates a despooler instruction file (<I>jobid</I>.I* where <I>jobid</I> is the eight character job ID for the job). The despooler instruction file contains instructions that the parent site uses to decompress the <I>jobid</I>.P* file and to process the Binary MIF files. The <I>jobid</I>.I* file is also placed in the SITE.SRV \SENDER.BOX\TOSEND directory.</P>
<P CLASS="t">The Scheduler then creates a send request file. A send request file (*.SRQ) contains instructions for sending the compressed package and the despooler instruction file to the parent site. Initially, the *.SRQ file is placed in the appropriate outbox directory (SITE.SRV\SENDER.BOX\REQUESTS\<I>sender.000</I>,<I> </I>where <I>sender</I> is the specific sender's outbox directory name, such as LAN_DEFA.000, SNA_BATC.000, or RAS_ISDN.000) for the type of sender being used to send the Binary MIF files to the parent site. For example, if a package is sent to the parent site using the LAN Sender, the SRQ file would be placed in the LAN_DEFA.000 outbox directory. You can check these directories to verify that the Scheduler has processed the job properly.</P>
<P><img src="srk_c07.gif"></P>
<P>Figure 3.6    Collecting Inventory at a Secondary Site</P>
<P CLASS="t">The sender monitors its outbox for a valid send request. When it detects a send request, the sender renames it to *.SRS to indicate the send is in progress.</P>
<P CLASS="t">The sender connects to the target site and transfers the compressed package file and the despooler instruction file from the site server's TOSEND directory to the parent site's SITE.SRV\DESPOOLR.BOX\RECEIVE directory. The Despooler renames the compressed package to *.PCK. You can monitor this directory at the site server for the parent site to check the progress of the sender.</P>
<P CLASS="t">After the *.PCK file reaches its full size at the parent site, the sender transfers the instruction file as a .TMP file. When the instruction file transfer is complete, it is renamed as a valid instruction file (*.INS). This indicates that the sender has successfully processed the send request and sent the compressed file and its despooler instruction file. </P>
<P CLASS="t">At the target site server for the target site, the Despooler monitors the SITE.SRV\DESPOOLR.BOX\RECEIVE directory for despooler instruction files and processes them. The Despooler decompresses the inventory files and places them in the SITE.SRV\DATALOAD.BOX\DELTAMIF.COL directory. The Inventory Data Loader processes the Binary MIF files and updates the site database. For more detailed information about how the Inventory Data Loader processes Binary MIF files at a primary site, see "Collecting Inventory at a Primary Site" earlier in this chapter.</P>
<H4 CLASS="h3"><A NAME="sec2"></A>How Inventory Is Reported to a Parent Site</H4><P CLASS="t">Any site that has a parent site above it in the site hierarchy reports its inventory to its parent site. If a primary site has a site above it in the site hierarchy, it updates its own database with the client inventory (reported as Binary MIF files) of its site and child sites. Then the site forwards the client inventory up to its parent site. The client inventory is processed and forwarded until it reaches the central site.</P>
<P CLASS="t">When a child site first attaches to a parent site, the Hierarchy Manager instructs the Inventory Data Loader to create a *.INV directory (usually, this is 00000000.INV but the eight character name is a unique name assigned by the Inventory Data Loader) in the SITE.SRV\SCHEDULE.BOX directory on the site server for the child site. The Inventory Data Loader stops processing inventory MIF files at the site (files with a *.MIF) and creates a snapshot image of the computer inventory in the site database. The inventory information is extracted as a series of files, which are placed in the *.INV directory. When all the computer inventory data is extracted, the Inventory Data Loader creates a system job to send the files in the *.INV directory to the parent site and resumes processing *.MIF files at the current site.</P>
<P CLASS="t">The Scheduler processes the system job and the files in the *.INV directory are sent up to the parent site by the sender. At the parent site, the Despooler creates a *.UPD directory (usually, this is 00000000.UPD but the eight character name is a unique name assigned by the Despooler) in the parent site's SITE.SRV \DATALOAD.BOX\DELTAMIF.COL directory. The parent site's Inventory Data Loader monitors the DELTAMIF.COL directory for a directory with the *.UPD name. When it detects a *.UPD directory, it stops processing *.MIF files at the site and begins processing the files in the *.UPD directory and adds the computers from the child site to the site database. When all the computer inventory data from the child site is added, the Inventory Data Loader renames the *.UPD directory to INV*.JOB and creates a system job to send the files in the INV*.JOB directory to the parent site and resumes processing *.MIF files at the current site. This process is repeated at this site's parent site, and so on up the site hierarchy—all the way up to the central site.</P></BODY></HTML>

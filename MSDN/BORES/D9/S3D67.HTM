<HTML><head><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Package and Audit Rule Files</TITLE><BODY BGCOLOR="#FFFFFF">


<H2 CLASS="h1">Package and Audit Rule Files</H2><P CLASS="t">Package rule files and audit rule files are both used by SMS to determine information about the software installed on clients. Package rule files are used when SMS performs software inventory on clients. Audit rule files are used when SMS runs a special Run Command On Workstations job on clients (the job runs the Audit program and uses the audit rules in the audit rule file). For more information about software inventory and audit, see the SMS version 1.2 <I>Concepts and Planning</I>.</P>
<P CLASS="t">Although the software inventory process differs from the auditing process, the package rule file and the audit rule file have the same format. To simplify terminology in this chapter, the term <I>package rule file</I> will generally be used to refer to both software inventory rule files and to audit package rule files.</P>
<P CLASS="t">A package rule file is a text file that contains rules for identifying software installed on SMS clients. A package rule file must be converted into a binary (*.CFG) file before SMS can use the package rule file. When packages are enabled for software inventory, the Maintenance Manager automatically converts the package rule file into CFG format. When you want to perform an audit, you must manually convert the package rule file to CFG format using the RUL2CFG program.</P>
<P CLASS="t">The package rule file is a list of software items called packages. For each package, there is a set of rules that are used to identify it. Each rule is the name of a file and, optionally, a set of attributes for that file.</P>
<P CLASS="t">The definition of a package begins with the package keyword, a package ID, and a package name:</P>
<P CLASS="t"><B>package</B> <I>packageID </I><B>"</B><I>packagename</I><B>"</B></P>
<P CLASS="term1"><B><B><I>packageID</I></B></B></P>
<P CLASS="dt1">An integer that uniquely identifies the package within the package rule file. The <I>packageID</I> must be unique within the package rule file.</P>
<P CLASS="term1"><B><B><I>packagename</I></B></B></P>
<P CLASS="dt1">A string (enclosed in quotation marks) that serves as a text label for the package. This string is used for the Package Name attribute when the package is reported to the SMS inventory.</P>
<P CLASS="t">This package identification is followed by a list of files that identifies the package. Each file must have a file name. Optionally, you can specify additional attributes (such as file size, file date, checksum, and so on) for each file.</P>
<P CLASS="t">The file keyword is followed by the file name and the optional file attributes:</P>
<P CLASS="t"><B>file</B> <B>"</B><I>filename</I><B>"</B> <B>[</B><I>fileattributes</I><B>]</B> </P>
<P CLASS="term1"><B><B><I>filename</I></B></B></P>
<P CLASS="dt1">A string (enclosed in quotes) that specifies the name of the file. This can be an 8.3 file name or a long file name. </P>
<P CLASS="term1"><B><B><I>fileattributes</I></B></B></P>
<P CLASS="dt1">Can be one or more attributes of the file. Each type of attribute begins with a keyword followed by the specific value (or values) for the attribute. Numerical values and offset values (such as BYTE, CHECKSUM, and so on) must be specified in decimal rather than hexadecimal. These values can be determined in the SMS&nbsp;Administrator when you set up the package for inventory.</P>
<P CLASS="dt1">The following file attributes are possible:</P>
<P CLASS="term2"><B><B>BYTE</B></B></P>
<P CLASS="dt2">An 8-bit value stored at a specific location in the file.</P>
<P CLASS="dt2"><B>BYTE</B> o<I>ffset</I> v<I>alue</I></P>
<P CLASS="dt2">where <I>offset</I> is the data offset from the start of file (in bytes); and <I>value</I> is the value (in decimal notation) stored at the location specified by <I>offset</I>.</P>
<P CLASS="term2"><B><B>CHECKSUM</B></B></P>
<P CLASS="dt2">The sum of all values stored at a specific set of bytes.</P>
<P CLASS="dt2"><B>CHECKSUM</B> <I>offset length value</I></P>
<P CLASS="dt2">where <I>offset</I> is the data offset at the beginning of the summed values (in bytes); <I>length</I> is the total number of bytes that are summed; and <I>value</I> is the summed value (in decimal notation) of all values stored in the specific range of bytes.</P>
<P CLASS="term2"><B><B>COLLECT </B>(for use with Inventory Agent only)</B></P>
<P CLASS="dt2">A keyword that tells the Inventory Agent to collect the file and send it with the computer's inventory. This keyword has no affect on the Software Audit program.</P>
<P CLASS="term2"><B><B>CRC</B></B></P>
<P CLASS="dt2">The sum (and sequence) of all values stored at a specific set of bytes. Unlike CHECKSUM, CRC takes into account the sequence of the summed bytes. This makes it a more reliable identification of a file.</P>
<P CLASS="dt2"><B>CRC</B> <I>offset</I> <I>length value</I></P>
<P CLASS="dt2">where <I>offset</I> is the data offset at the beginning of the summed values (in bytes); <I>length</I> is the total number of bytes that are summed; and <I>value</I> is the summed value (calculated with the CCITT-CRC algorithm and specified in decimal notation) of all the values stored in the specified range of bytes. SMS uses the CCITT-CRC standard to evaluate the CRC value. You must specify a CRC value computed with the CCITT-CRC algorithm.</P>
<P CLASS="term2"><B><B>DATE</B></B></P>
<P CLASS="dt2">The date of the file.</P>
<P CLASS="dt2"><B>DATE</B> <I>mm</I><B>/</B><I>dd</I><B>/</B><I>yy</I></P>
<P CLASS="dt2">where <I>mm</I> is the decimal value for the month; <I>dd</I> is the decimal value for the day; and <I>yy</I> is the decimal value for the year. Single digit months and days must have a leading zero (for example, 01/03/95).</P>
<P CLASS="term2"><B><B>LONG</B></B></P>
<P CLASS="dt2">A 4-byte (32-bit) value stored at a specific location in the file.</P>
<P CLASS="dt2"><B>LONG</B> <I>offset</I> v<I>alue</I></P>
<P CLASS="dt2">where <I>offset</I> is the data offset (in bytes); and <I>value</I> is the 32-bit value (in decimal notation) stored at the offset.</P>
<P CLASS="term2"><B><B>SIZE</B></B></P>
<P CLASS="dt2">The size of the file (in bytes).</P>
<P CLASS="dt2"><B>SIZE</B> <I>filesize</I></P>
<P CLASS="dt2">where <I>filesize</I> is the size of the file in bytes.</P>
<P CLASS="term2"><B><B>STRING (TOKEN)</B></B></P>
<P CLASS="dt2">A string value stored at a specific location in the file. It appears as STRING in the user interface and as TOKEN in PACKAGE.RUL.</P>
<P CLASS="dt2"><B>STRING</B> <I>offset</I> <B>"</B><I>string</I><B>"</B></P>
<P CLASS="dt2">where <I>offset</I> is the data offset in bytes; and <I>string</I> is the string value stored at the location starting at <I>offset</I>. The string value must be enclosed in quotation marks.</P>
<P CLASS="term2"><B><B>TIME</B></B></P>
<P CLASS="dt2">The time associated with the file.</P>
<P CLASS="dt2"><B>TIME</B> <I>hh</I><B>:</B><I>mm</I></P>
<P CLASS="dt2">where <I>hh</I> is the decimal value (using the 24-hour clock) for hours; and <I>mm</I> is the decimal value for minutes. Single digit hours and minutes must have a leading zero (for example, 01:05). Midnight is written as 00:00.</P>
<P CLASS="term2"><B><B>WORD</B></B></P>
<P CLASS="dt2">A 2 byte (16-bit) value stored at a specific location in the file.</P>
<P CLASS="dt2"><B>WORD</B> <I>offset value</I></P>
<P CLASS="dt2">where <I>offset </I>is the data offset from the start of file (in bytes); and <I>value</I> is the 16-bit value (in decimal notation) stored at the location specified by <I>offset.</I></P>
<P CLASS="t"></P>
<P CLASS="t">You can specify up to four STRING/TOKEN values per file. You can only specify one value for all other attributes.</P></BODY></HTML>

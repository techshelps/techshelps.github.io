<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Infrared Sockets</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_socket_2">
</OBJECT>
</TD></TR></TABLE>



<H3>

<A NAME="_infrared_sockets"></A>Infrared Sockets</H3>

<P>Winsock is typically used with the TCP/IP protocols. Infrared Sockets (IrSock), is an extension to Winsock that allows it to be used also for IR communication using the IrDA protocol. Each endpoint must support an IrDA-compliant device and an IrDA-compliant protocol stack.</P>

<P>Some Winsock functions work differently with IrDA than they do with TCP/IP. The principal differences are: 

<UL>
	<LI>Name service
<P>Conventional Winsock name service is best suited to fixed networks in which the group of devices that can accept a socket connection is relatively static. Conversely, IrDA is designed to handle browsing for whatever resources are within range. It works in an ad hoc manner, and devices come and go frequently as they move in and out of range.

<P>Because of these differences, IrSock does not use the conventional Winsock name service functions. Instead, name service is incorporated into the communication stream. 
</LI>

	<LI>Method of addressing
<P>Addressing is based on logical Service Access Point Selectors (LSAP-SELs), numbered from 1 through 127. Because of the small range of values available, it is usually better not to bind sockets directly to an LSAP-SEL. Instead, the Information Access Service (IAS) provides a means for dynamic binding of sockets to LSAP-SELs.

<P>To use IAS, a server application binds a socket to an IAS service name. The client application uses the service name when connecting. Neither application knows, or needs to know, the LSAP-SEL that is assigned by the IAS. This procedure is outlined in the following sections.
</LI>

	<LI>Enhanced socket options
<P>Windows CE includes two socket options to access the unique features of the IrDA protocol:

<UL>
	<LI>IRLMP_IAS_SET allows an application to set a single class in the local IAS. The application specifies the class to set, the attribute, and the attribute type. The application must allocate a buffer of the necessary size for the passed parameters.</LI>

	<LI>IRLMP_RAW_MODE allows an application to switch between the reliable TinyTP mode, which is the default setting, and the less reliable IrLMP mode. This option is only available after calling <A HREF="JavaScript:hhobj_1.Click()"><B>socket</B></A> to obtain a socket handle and before calling <B>bind</B> and <B>connect</B>.</LI>
</UL>
</LI>
</UL>

</BODY>
</HTML>

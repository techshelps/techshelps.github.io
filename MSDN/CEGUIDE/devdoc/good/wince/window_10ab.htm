<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Receiving and Dispatching Messages</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H2>

<A NAME="_receiving_and_dispatching_messages"></A>Receiving and Dispatching Messages</H2>

<P>A message loop that receives and dispatches messages is the heart of every Windows CE-based application. Every thread that creates a window is continuously receiving messages and dispatching messages to window procedures.</P>

<P>You can use the <B>GetMessage</B> function to receive messages. When a thread calls <B>GetMessage</B>, Windows CE examines the thread's message queue for incoming messages. Windows CE processes messages in the following order:

<OL>
	<LI>Windows CE checks for messages that were placed on the queue by the <B>SendMessage</B> function. After the system removes the message from the queue, it dispatches the message to the appropriate window procedure from within the <B>GetMessage</B> function. This is done to guarantee that the sender and receiver message queue remain synchronized. The receiver must call <B>GetMessage</B> for the sent messages to be processed.</LI>

	<LI>If no sent message is found, Windows CE checks the queue for messages that were placed on the queue by a call to <B>PostMessage</B>. </LI>

	<LI>If no posted message is found, Windows CE checks the queue for messages that were posted by the user input system. 
<P>By processing user input messages at a lower priority, the system guarantees that each input message and any posted messages that result from it are processed completely before moving on to the next input message.
</LI>

	<LI>If no posted input messages are found, Windows CE checks the queue for WM_QUIT messages that were placed on the queue by a call to <B>PostQuitMessage</B>.</LI>

	<LI>If no posted quit messages are found, Windows CE checks the queue for WM_PAINT messages that were placed on the queue by the windowing system.</LI>

	<LI>If no paint messages are found, Windows CE checks the queue for WM_TIMER messages that were placed on the queue by the timer system.</LI>
</OL>

<P>When <B>GetMessage</B> receives any of the previous messages, it returns the message content. It is then the responsibility of the thread to call <B>DispatchMessage</B> to dispatch the message to the correct window procedure. If the message is a WM_QUIT message, the return value of <B>GetMessage</B> is zero, which causes the thread to end its message loop. </P>

<P>The system dispatches messages in the <B>GetMessage</B> call of the message loop, and the application dispatches messages by using the <B>DispatchMessage</B> function in the message loop. Windows CE handles the details of finding the window procedure of the receiver window.</P>

</BODY>
</HTML>

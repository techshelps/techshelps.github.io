<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CeRapiInvoke</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H1>

<A NAME="_cerapiinvoke"></A>CeRapiInvoke</H1>

<P>The <B>CeRapiInvoke </B>function can be used as a general-purpose mechanism to remotely execute a routine on the Windows CE device.</P>

<H4>Syntax</H4>

<P><B>HRESULT  CeRapiInvoke( LPCWSTR</B> <I>pDllPath, </I><B>LPCWSTR</B> <I>pFunctionName,</I> <B>DWORD</B> <I>cbInput,</I> <B>BYTE</B> <I>*pInput,</I> <B>DWORD</B> <I>*pcbOutput, </I><B>BYTE </B><I>**ppOutput</I>, <B>IRAPIStream</B> <I>**ppIRAPIStream</I>, <B>DWORD </B><I>dwReserved </I><B>);</B></P>

<H4>At a Glance</H4>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%>Header file:</TD>
<TD width=67%>Rapi.h</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Platforms:</TD>
<TD width=67%>H/PC</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Windows CE versions:</TD>
<TD width=67%>2.0 and later</TD>
</TR>
</TABLE><BR>

<H4>Parameters</H4>

<DL>
<DT><I>pDllPath</I></DT>

<DD>Pointer to a buffer containing the name of a DLL on the Windows CE device containing <I>pFunctionName.</I></DD>

<DT><I>pFunctionName</I></DT>

<DD>Pointer to a buffer containing the name of the function that RAPI should call on the Windows CE device.</DD>

<DT><I>cbInput</I></DT>

<DD>Number of bytes in the input buffer *<I>pInput</I>.</DD>

<DT><I>pInput</I></DT>

<DD>Pointer to a buffer containing the input data.</DD>

<DT><I>cbOutput</I></DT>

<DD>Pointer to a variable that is set to the number of bytes in the output buffer <I>ppOutput </I>when the function returns.</DD>

<DT><I>ppOutput</I></DT>

<DD>Pointer to a variable that is set to the location of the output buffer upon return.</DD>

<DT><I>ppIRAPIStream</I></DT>

<DD>Pointer to a variable that is set to the address of the <B>IRAPIStream</B> interface. </DD>

<DT><I>dwReserved</I></DT>

<DD>Reserved.
</DD>
</DL>

<H4>Return Values</H4>

<P>If RAPI services on the Windows CE device successfully locate and call the client function, then in Block Mode the return value is that which is returned on the Windows CE device by the called function. In Stream Mode the return value is S_OK. If the function was not called successfully, or an exception occurred during its execution, an error code will be returned. </P>

<P>The <A HREF="ce_func_7lpu.htm"><B>CeGetLastError</B></A> function can be used to get the error code, which takes the value set by <I>pFunctionName, </I>including the following values: 

<DL>
<DT>ERROR_FILE_NOT_FOUND</DT>

<DD>The <B>LoadLibrary</B> <I>pDllPath </I>call failed on the device. </DD>

<DT>ERROR_CALL_NOT_IMPLEMENTED</DT>

<DD>The <B>GetProcAddress</B> of <I>pFunctionNam<B>e</B> </I>call on the device failed.</DD>

<DT>ERROR_EXCEPTION_IN_SERVICE</DT>

<DD>An exception occurred during execution of<I> pFunctionName.</I>
</DD>
</DL>

<H4>Remarks</H4>

<P>An application should allocate memory for the <I>pInput</I> parameter with the <B>LocalAlloc</B> function. The memory is freed by the system. The system allocates memory for the <I>ppOutput</I> parameter. When the application is completed with the buffer, it should free the memory with the <B>LocalFree</B> function.</P>

<P>The <B>CeRapiInvoke</B> function operates in either block mode or stream mode.</P>

<P>In block mode, the caller passes the data in a single buffer as an input parameter and receives the response in a single buffer as an output parameter. This is a synchronous call, thus all input or output data must be present in memory at the time of the call. </P>

<P>In stream mode, the <B>CeRapiInvoke </B>function returns a pointer to an <I>IStream</I> type interface that can be used to exchange arbitrary sized data in any order and direction. In this mode, the caller can still pass data in a single buffer as an input parameter, but from that point on all data should be exchanged via the stream. Thus the data can be read, written, and stored in chunks.</P>

<P>Streaming is significantly faster than block mode.</P>

<P>The <I>ppIRAPIStream</I> parameter specifies block mode or stream mode. Select block mode by supplying the value NULL. Select stream mode by supplying a valid pointer to a variable of type <B>IRAPIStream</B>; this <B>IRAPIStream</B> interface can be used for a direct transfer of data. If <I>ppIRAPIStream </I>is not NULL, the <I>pFunctionName</I> parameter on the Windows CE device will be passed a pointer to the <B>IRAPIStream</B> interface.</P>

<P>The <B>IRAPIStream</B><I> </I>definition is based on <B>Istream</B> and has been expanded by two new methods to allow the setting of timeouts. These methods, <B>IRAPIStream::SetRapiStat </B>and <B>IRAPIStream::GetRapiStat</B>,are modeled<I> </I>after the <B>IStream::Stat </B>method.</P>

<H4>See Also</H4>

<P><A HREF="ce_func_5wkt.htm"><B>IRapiStream</B></A></P>

</BODY>
</HTML>

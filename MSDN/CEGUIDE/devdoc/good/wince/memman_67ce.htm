<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Types of Memory Allocation</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_VirtualAlloc">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_VirtualFree">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_LocalAlloc">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_LocalFree">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_HeapCreate">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_HeapAlloc">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_HeapFree">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_HeapDestroy">
</OBJECT>
<OBJECT ID="hhobj_9" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_VirtualAlloc">
</OBJECT>
</TD></TR></TABLE>



<H1>

<A NAME="_types_of_memory_allocation"></A>Types of Memory Allocation</H1>

<P>Applications often need to allocate blocks of memory to use while they are executing. There are various memory pools from which the required memory can be allocated.</P>

<P>A primary reason for allocating memory is to store data. When a Windows CE program begins, the system initially allocates 1 KB of memory to the stack. It then adds memory to the stack, as needed, one page at a time up to the fixed limit of 58 KB. To store data, you typically declare it on the stack. </P>

<P>Although the system can shrink a stack<B> </B>when memory is low, it does so only if all other sources of memory pages are exhausted. The stack is a good source of memory for data that changes frequently but is not appropriate for constant data. Neither is the stack the best source of large amounts of memory because<B> </B>the<B> </B>stack does not shrink until all pages are used. </P>

<P><B>Note</B>  Do not allow the stack for a thread to grow larger than 58 KB. Exceeding this threshold results in a system-access violation that causes the program to stop functioning.</P>

<P>Declaring static or global data causes the system to put the data in the read/write (R/W) data section of the application module.<B> </B>This section does not grow or shrink. Its size is set by the operating system when your application initializes. Determining the size of your application's data section allows you to estimate how much memory is available after your program is loaded. To do this, use the standard Win32 DumpBin utility, Dumpbin.exe, or the Remote Memory Viewer.</P>

<P>Use the information you obtain from the Memory Viewer to arrange your declared data to use as little memory as possible. Following are some suggestions for arranging your data:

<UL>
	<LI>Look carefully at everything in the R/W section. </LI>

	<LI>Declare all constant data items. 
<P>The compiler will move declared constant data into the read-only data section. 
</LI>

	<LI>Move other types of data into the R/W section once the system has removed the constant data.
<P>Removing constant data from the R/W section and moving other data into the section uses space that would otherwise be wasted. This allows you to use less heap space.
</LI>

	<LI>Place a note in your code to remind you to look at your memory use each time you add more data. 
<P>It would be counterproductive to fill the section with additional data, and then have it grow by an entire page just to accommodate an additional variable. 
</LI>

	<LI>The loader needs 50 to 75 bytes free in the R/W section. 
<P>Leave space for the loader.
</LI>
</UL>

<P>When you declare static or global data objects, the operating system takes care of the memory storage, but you need to explicitly allocate memory. Although Windows CE has various functions for allocating memory, the most-used functions are <B>VirtualAlloc</B>, <B>LocalAlloc</B>, and <B>HeapAlloc</B>.<B> </B>To free the allocated memory, use the companion functions <B>VirtualFree</B>, <B>LocalFree </B>and <B>HeapFree</B>. To create and remove heaps, use <B>HeapCreate</B> and <B>HeapDestroy</B>. You can use a combination of these functions to minimize wasted RAM.</P>

<P>The <A HREF="JavaScript:hhobj_1.Click()"><B>VirtualAlloc</B></A> function is the primary tool for allocating virtual memory<B> </B>in the Windows CE operating system. You use <B>VirtualAlloc</B> to directly allocate a number of memory pages. Although it is the most efficient tool for allocating a large memory object, you should not use <B>VirtualAlloc</B> to allocate small memory objects. Because <B>VirtualAlloc</B> can only allocate whole pages, if you need only a partial page, memory is wasted. </P>

<P>One advantage to using <B>VirtualAlloc</B> is that the allocated memory is easily returned if the system runs low on memory. When you are finished using the allocated memory, free it by using <A HREF="JavaScript:hhobj_2.Click()"><B>VirtualFree</B></A>. The system returns the memory to the global virtual memory pool immediately. </P>

<P>Each process has its own default heap from which you can allocate memory. If a process needs memory, call <A HREF="JavaScript:hhobj_3.Click()"><B>LocalAlloc</B></A><B> </B>to allocate memory<B> </B>and <A HREF="JavaScript:hhobj_4.Click()"><B>LocalFree</B></A> to free memory. Whenever you use the function <B>LocalAlloc</B>, if there is not enough available memory in the default heap to supply the requested amount of memory, the system adds to the amount of memory in the heap. When the system needs memory and tries to compact a heap, sometimes it cannot because there are partially-filled pages. Even when unused memory exists, if it is fragmented, the system cannot use it. This results in the number of available pages not corresponding to the total amount of free space in the heap. Though the operating system automatically shrinks the heap if it has one or more free memory pages, partially filled pages do not<B> </B>cause the system to shrink the heap.</P>

<P>The <A HREF="JavaScript:hhobj_5.Click()"><B>HeapCreate</B></A><B> </B>function creates a new heap for a process that is separate from the default heap for that process. Memory for the new heap is reserved, but it is not committed until needed. To allocate and free memory, use the <A HREF="JavaScript:hhobj_6.Click()"><B>HeapAlloc</B></A><B> </B>and <A HREF="JavaScript:hhobj_7.Click()"><B>HeapFree</B></A> functions. You can free the new heap by using <A HREF="JavaScript:hhobj_8.Click()"><B>HeapDestroy</B></A>, which returns the memory back to the virtual memory pool. </P>

<P>Creating a separate heap is a good allocation strategy when you need to make a lot of small, temporary memory allocations. For example, you could create a separate heap for an application that works with documents. This heap would allocate all memory for a document. When the user closed the document, the application would free the heap and return the memory to the global virtual memory pool. Using a separate heap keeps the size of the default heap small and avoids generating the numerous partially-filled pages you get when you use <A HREF="JavaScript:hhobj_9.Click()"><B>VirtualAlloc</B></A>. Because each heap requires approximately 500 bytes of overhead, you should create separate heaps only if you expect to allocate at least 5 KB of memory.</P>

</BODY>
</HTML>

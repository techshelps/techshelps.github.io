<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Clipping Regions</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H2>

<A NAME="_clipping_regions"></A>Clipping Regions</H2>

<P>You can use clipping regions to restrict your output to a specified subregion of the client area. To use a clipping region, you must select it into the device context associated with the display device.</P>

<P>Clipping is used in Windows CE in a variety of ways. Word processing and spreadsheet applications clip keyboard input to keep it from appearing in the margins of a page or spreadsheet. Computer-aided design (CAD) and drawing applications clip graphics output to keep it from overwriting the edges of a drawing or picture.</P>

<P>Some device contexts provide a predefined or default clipping region. For example, the device context created by the <B>BeginPaint</B> contains a predefined rectangular clipping region that corresponds to the invalid rectangle that needs to be repainted. However, the device contexts created by the <B>CreateDC</B> and <B>GetDC</B> functions contain empty clipping regions; clipping is only done to keep graphics output in the window's client area. </P>

<P>You can perform a variety of operations on clipping regions. Some of these operations require a handle identifying the region and some do not. For example, you can perform the following operations directly on a device context's clipping region. 

<UL>
	<LI>Determine whether part of the client area intersects a region by calling the <B>RectVisible</B> function. </LI>

	<LI>Exclude a rectangular part of the client area from the current clipping region by calling the <B>ExcludeClipRect</B> function. </LI>

	<LI>Combine a rectangular part of the client area with the current clipping region by calling the <B>IntersectClipRect</B> function. </LI>
</UL>

<P>After obtaining a handle identifying the clipping region, you can perform any operation that is common with regions, such as: 

<UL>
	<LI>Combine a copy of the current clipping region with a second region by calling the <B>CombineRgn</B> function. </LI>

	<LI>Compare a copy of the current clipping region to a second region by calling the <B>EqualRgn</B> function. </LI>

	<LI>Determine whether a point lies within the interior of a copy of the current clipping region by calling the <B>PtInRegion</B> function. </LI>
</UL>

</BODY>
</HTML>

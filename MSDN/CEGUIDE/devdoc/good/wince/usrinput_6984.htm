<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inking Input</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H1>

<A NAME="_inking_input"></A>Inking Input</H1>

<P>The Rich Ink control allows you to capture stylus motions with little effort. It provides a convenient means for applications to accept input from a user without using a keyboard. For a user, taking notes or drawing sketches with the Rich Ink control is very much like writing or drawing on paper. </P>

<P>In addition to capturing images, Rich Ink has powerful editing and formatting capabilities. For example, when the user deletes a word from handwritten notes on the screen, the control automatically closes the resultant word gap. Some examples of how Rich Ink can be used include:

<UL>
	<LI>An electronic form application that accepts a user's handwritten signature.</LI>

	<LI>A calendar application with an embedded Rich Ink control that allows a user to jot down a "To Do" list for a selected date.</LI>
</UL>

<H5><IMG SRC="../../images/wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp; To embed the Rich Ink control in your application</H5>

<OL>
	<LI>Call <B>InitCommonControls</B> to load the common control dynamics-link library (DLL).</LI>

	<LI>Call <B>InitInkX</B> to load and initialize Rich Ink control.</LI>

	<LI>Call <B>CreateDialog</B> to instantiate a dialog box with a custom ink control.
<P>– Or –
</LI>

	<LI value=1>Call <B>InitCommonControls</B> to load the common control DLL.</LI>

	<LI>Call <B>InitInkX</B> to load and initialize Rich Ink control.</LI>

	<LI>Call <B>CreateWindow</B> and specify the class name as WC_INKX. </LI>
</OL>

<P>The EReceipt and InkControl sample codes provide two examples of the implementation.</P>

<P>After initialization, the Rich Ink control communicates with the calling application using the standard Windows CE messaging system. It sends the IM_SHOWCMDBAR message to the ink control to show or hide the command bar. It sends the IM_GETDATALEN, IM_GETDATA, and IM_SETDATA messages between the ink control and the application to transmit inking data, such as a notes or sketch. It sends the IM_REINIT message to the ink control to erase all the content from the control. It sends the standard EM_GETMODIFY and EM_SETMODIFY messages to the ink control to determine if its content has been modified and to set the modification flag in the control, respectively.  </P>

<P>As an example of using the ink control, consider a calendar application with a Rich Ink control, named as <I>InkX</I>, embedded in a dialog box. The control's command bar can be toggled by using <B>SendDlgItemMessage</B> to send an IM_SHOWCMDBAR message. The state of the command bar is specified in the accompanying <I>wParam</I>:</P>

<PRE><CODE>SendDlgItemMessage(hInk, IM_SHOWCMDBAR, (WPARAM)m_bCmdBar, 0L);
</CODE></PRE>

<P>Here <I>hInk</I> is a handle to the <I>InkX</I> control and <I>m_bCmdBar</I> is set to either TRUE or FALSE to specify whether or not the command bar is visible.</P>

<P>To save an edited or a newly created note, you must get the data length by sending:</P>

<PRE><CODE>InkDataLen=SendDlgItemMessage(hInkX, IM_GETDATALEN, 0, 0L);
</CODE></PRE>

<P>For each date entry, the application keeps an ink note, <I>pInkData</I>, of the <B>BYTE </B>pointer type. The application should first allocate sufficient memory to store the ink note, and then pass the <I>pInkData</I> pointer to the control through the messages <I>lParam</I> parameter:</P>

<PRE><CODE>InkDatalen=SendDlgItemMessage(hInkX, IM_GETDATA, InkDataLen, (LPARAM)pInkData);
</CODE></PRE>

<P>When the user taps a calendar date, the application should retrieve any previously saved ink data and bring up the ink control. It then sends the following message to refresh the document view with the retrieved ink data:</P>

<PRE><CODE>SendDlgItemMessage(hInkX, IM_SETDATA, dwInkDataLen, (LPARAM)pInkData);
</CODE></PRE>

<P>The <I>dwInkDataLen</I> parameter gives the length of the ink data; <I>pInkData</I> is a pointer to the data itself. You should release the ink data, <I>pInkData</I>, once it has been passed to the ink control. </P>

<P></P>

</BODY>
</HTML>

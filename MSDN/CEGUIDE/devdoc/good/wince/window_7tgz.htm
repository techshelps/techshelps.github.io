<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Timers</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H1>

<A NAME="_timers"></A>Timers</H1>

<P>A timer is a system resource that can notify an application at regular intervals. An application associates a timer with a window and sets the timer for a specific time-out period. Each time the specified interval, or <I>time-out value</I>, for a specified timer elapses, the system uses a WM_TIMER message to notify the window associated with the timer. Because the accuracy of a timer depends on the system clock rate and how often the application retrieves messages from the message queue, the time-out value is only approximate. The smallest possible interval a timer can measure is the system tick interval.</P>

<P>You use the <B>SetTimer</B> function to create a timer. The timer may be associated with a particular window or with just the thread. If you associate the timer with a window, then normal message loop processing will cause the WM_TIMER message to be dispatched to the window's window procedure. If you do not associate the timer with a window, then you must design the message loop to recognize and handle the WM_TIMER message.</P>

<P>If the call to <B>SetTimer</B> includes a <B>TimerProc</B> callback function, the procedure is called when the timer expires. This call is done inside the <B>GetMessage</B> or <B>PeekMessage</B> function. This means that a thread must be executing a message loop to service a timer, even if you are using a timer callback procedure.</P>

<P>A new timer starts timing its interval as soon as it is created. An application can change a timer's time-out value by using the <B>SetTimer</B> function, and it can destroy a timer by using the <B>KillTimer</B> function. To use system resources efficiently, applications should destroy timers that are no longer necessary.</P>

<P>You can use the timer and window identifiers to identify timers associated with a window. You can identify timers that are not associated with a particular window by using the identifier returned by the <B>SetTimer</B> call.</P>

<P>Timer messages have a low priority in the message queue. Although you know that the window associated with a timer is notified sometime after the timer interval expires, you cannot know the exact time it will receive the notification.</P>

<P>Timers expire at regular intervals, but a timer that expires multiple times before being serviced does not generate multiple WM_TIMER messages.</P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tree View Image Lists</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_WM_SETREDRAW">
</OBJECT>
</TD></TR></TABLE>



<H2>

<A NAME="_tree_view_image_lists"></A>Tree View Image Lists</H2>

<P>Each item in a tree view control can have four bit images associated with it: 

<UL>
	<LI>An image, such as an open folder, displayed when the item is selected.</LI>

	<LI>An image, such as a closed folder, displayed when the item is not selected.</LI>

	<LI>An overlay image that is drawn transparently over the selected or nonselected image.</LI>

	<LI>A state image, which is an additional image displayed to the left of the selected or nonselected image. You can use state images, such as checked and cleared check boxes, to indicate application-defined item states.</LI>
</UL>

<P>By default, a tree view control does not display item images. To display item images, you must create image lists and associate them with the control. </P>

<P>A tree view control can have two image lists: a normal image list and a state image list. A normal image list stores the selected, nonselected, and overlay images. A state image list stores state images. Use the <B>ImageList_Create</B> function to create an image list, and use other image list functions to add bitmaps to the image list. Then, to associate the image list with the tree view control, use the TVM_SETIMAGELIST message. The TVM_GETIMAGELIST message retrieves a handle to one of a tree view control's image lists. </P>

<P>In addition to the selected and nonselected images, a tree view control's normal image list can contain up to four overlay images. Overlay images are designed to be drawn transparently over the selected and nonselected images. To assign an overlay mask index to an image in the normal image list, call the <B>ImageList_SetOverlayImage</B> function. </P>

<P>By default, all items display the first image in the normal image list for both the selected and nonselected states. Also, by default, items do not display overlay images or state images. You can change these default behaviors for an item by sending the TVM_INSERTITEM or TVM_SETITEM messages. These messages use the <B>TVITEM</B> structure to specify image list indexes for an item. </P>

<P>To associate an overlay image with an item, use the <B>INDEXTOOVERLAYMASK</B> macro to specify an overlay mask index in the <B>state </B>member of the item's <B>TVITEM</B> structure. You must also set the TVIS_OVERLAYMASK bits in the <B>stateMask</B> member. Overlay mask indexes are one-based; an index of zero indicates that the application not specify an overlay image. </P>

<P>To associate a state image with an item, use the <B>INDEXTOSTATEIMAGEMASK</B> macro to specify a state image index in the state member of the item's <B>TVITEM</B> structure. The index identifies an image in the control's state image list. </P>

<P><B>Note</B>  You can speed up the creation of large tree views by disabling the painting of the tree view before adding the items. You do this by sending a <A HREF="JavaScript:hhobj_1.Click()">WM_SETREDRAW</A> message with the redraw flag set to FALSE. When you're finished adding items, re-enable painting by sending a WM_SETREDRAW message with the redraw flag set to TRUE.</P>

</BODY>
</HTML>

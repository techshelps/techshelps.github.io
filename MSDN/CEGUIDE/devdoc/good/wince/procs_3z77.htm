<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Wait Functions</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_WaitForSingleObject">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_WaitForMultipleObjects">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_MsgWaitForMultipleObjectsEx">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_CreateEvent">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_WaitForMultipleObjects">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_MsgWaitForMultipleObjectsEx">
</OBJECT>
<OBJECT ID="hhobj_7" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_GetMessage">
</OBJECT>
<OBJECT ID="hhobj_8" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_PeekMessage">
</OBJECT>
<OBJECT ID="hhobj_9" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_MsgWaitForMultipleObjects">
</OBJECT>
<OBJECT ID="hhobj_10" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_MsgWaitForMultipleObjects">
</OBJECT>
</TD></TR></TABLE>



<H2>

<A NAME="_using_wait_functions"></A>Using Wait Functions</H2>

<P>Windows CE supports two types of wait functions, single-object and multiple-objects. The single object function is <B>WaitForSingleObject</B>. The multiple object functions are <B>WaitForMultipleObjects</B> and <B>MsgWaitForMultipleObjects</B>.</P>

<P>The <A HREF="JavaScript:hhobj_1.Click()"><B>WaitForSingleObject</B></A> function requires a handle of one synchronization object. This function returns when one of the following occurs:

<UL>
	<LI>The specified object is in the signaled state.</LI>

	<LI>The time-out interval elapses. You can set the time-out interval to INFINITE to specify that the wait will not time out.</LI>
</UL>

<P>The <A HREF="JavaScript:hhobj_2.Click()"><B>WaitForMultipleObjects</B></A> and <A HREF="JavaScript:hhobj_3.Click()"><B>MsgWaitForMultipleObjects</B></A> functions enable the calling thread to specify an array containing one or more synchronization object handles. These functions return when one of the following occurs:

<UL>
	<LI>The state of any one of the specified objects is set to signaled or the states of all objects have been set to signaled. You control whether one or all of the states will be used in the function call.</LI>

	<LI>The time-out interval elapses. You can set the time-out interval to INFINITE to specify that the wait will not time out.</LI>
</UL>

<P>The following code example shows how to use the <A HREF="JavaScript:hhobj_4.Click()"><B>CreateEvent</B></A> function to create two event objects. It then uses the two created objects as parameters in the function call to <A HREF="JavaScript:hhobj_5.Click()"><B>WaitForMultipleObjects</B></A>. The <B>WaitForMultipleObjects</B> function does not return until one of the objects is set to signaled. </P>

<PRE><CODE>HANDLE hEvents[2]; 
DWORD i, dwEvent; 

for (i = 0; i &lt; 2; i++) 
{ 
   hEvents[i] = CreateEvent( 
      NULL,            // no security attributes
      FALSE,           // auto-reset event object
      FALSE,           // initial state is nonsignaled
      NULL);           // unnamed object
   if (hEvents[i] == NULL) 
   { 
      printf("CreateEvent error: %d\n", GetLastError() ); 
      ExitProcess(0); 
   } 
} 

dwEvent = WaitForMultipleObjects( 
   2,                  // number of objects in array
   hEvents,            // array of objects
   FALSE,              // wait for any
   INFINITE);          // indefinite wait

switch (dwEvent) 
{ 
   case WAIT_OBJECT_0 + 0: 
      break; 

   case WAIT_OBJECT_0 + 1: 
      break; 

   default: 
      printf("Wait error: %d\n", GetLastError()); 
      ExitProcess(0); 
}
</CODE></PRE>

<P>The <A HREF="JavaScript:hhobj_6.Click()"><B>MsgWaitForMultipleObjects</B></A> function is similar to <B>WaitForMultipleObjects</B>, except that it allows you to specify input event objects in the object handle array. You select the type of input event to wait for in the <I>dwWakeMask</I> parameter. <B>MsgWaitForMultipleObjects</B> does not return if there is unread input of the specified type in the queue. It returns only when new input arrives.</P>

<P>For example, a thread can use <B>MsgWaitForMultipleObjects</B> with its <I>dwWakeMask</I> parameter set to QS_KEY. This blocks its execution until the state of a specified object has been set to signaled and there is keyboard input available in the thread's input queue. The thread can use the <A HREF="JavaScript:hhobj_7.Click()"><B>GetMessage</B></A> or <A HREF="JavaScript:hhobj_8.Click()"><B>PeekMessage</B></A> function to retrieve the input. </P>

<P>When waiting for the states of all objects to be set to signaled, the multiple-object functions do not modify the states of the specified objects until the states of all objects have been set to signaled. For example, the state of a mutex object can be signaled, but the calling thread does not get ownership until the states of the other objects specified in the array have also been set to signaled. In the meantime, some other thread may get ownership of the mutex object, thereby setting its state to nonsignaled.</P>

<P>The following code example shows the use of the <A HREF="JavaScript:hhobj_9.Click()"><B>MsgWaitForMultipleObjects</B></A> function in a message loop. The loop continues until a WM_QUIT message appears in the queue. The <I>dwWakeMask</I> parameter is set to QS_ALLINPUT so all messages are checked. </P>

<PRE><CODE>int MessageLoop
   ( 
      HANDLE* lphObjects,         // handles that need to be waited on 
      int     cObjects            // number of handles to wait on 
   )
{ 
      while (TRUE)
      {
         // block-local variable 
         DWORD result ; 
         MSG msg ; 

         while (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) 
         { 
            if (msg.message == WM_QUIT)  
               return 1; 
            DispatchMessage(&amp;msg); 
         }

         result = MsgWaitForMultipleObjects(cObjects, lphObjects, 
                  FALSE, INFINITE, QS_ALLINPUT); 

         if (result == (WAIT_OBJECT_0 + cObjects))
         {
             continue;
         } 
         else 
         {
             Other Code (result - WAIT_OBJECT_0) ; 
         }
   }
}
</CODE></PRE>

<P>Be careful when using the wait functions and code that directly or indirectly create windows. If a thread creates any windows, it must process messages. Message broadcasts are sent to all windows in the system. If you have a thread that uses a wait function with no time-out interval, the system will deadlock. Two examples of code that indirectly create windows are DDE and COM <B>CoInitialize</B>. If you have a thread that creates windows, use <A HREF="JavaScript:hhobj_10.Click()"><B>MsgWaitForMultipleObjects</B></A> rather than the other wait functions.</P>

</BODY>
</HTML>

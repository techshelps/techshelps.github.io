<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Contacts Database</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H1>

<A NAME="_contacts_database"></A>Contacts Database </H1>

<P>Contacts, a Windows CE personal information manager (PIM) application, is organized as a series of records, called address cards. Each address card contains a number of fields, called properties. Among the many predefined properties are name, address, telephone number, birthday, and anniversary. The Contacts database application is bundled with Windows CE and includes a graphical user interface.</P>

<P>Contacts can be used as is if the default application settings meet the needs of the user. However, you can take advantage of the open application programming interface and design new Contacts database applications. For example, you can design a Contacts database application to track a doctor's patient-contact information, including dates of previous and future office visits. You can retrieve, store, and query the records and properties in the Contacts database.</P>

<P>Since the Contacts database application is built on the Windows CE object store, you need to be familiar with the object store to completely understand the database.  For more information about the object store, see <A HREF="objstore_9zqd.htm">Accessing Persistent Storage</A>. </P>

<P>A Contacts database includes the following basic elements. 

<UL>
	<LI>Address card
<P>An address card stores information about one individual. The information is parsed into a set of predetermined properties. Each address card is represented by an <B>AddressCard</B> structure. The number of address cards in a Contacts database depends on the amount of available memory<B> </B>on the hardware device. To determine the number of records in the database, call the <B>GetNumberOfAddressCards</B> function.
</LI>

	<LI>Object identifier and position index
<P>A typical operation performed against an address card requires identification of the record and specification of its location in the database. To accomplish this, Windows CE assigns each address card a unique object identifier and a position index value. If you know the object identifier for an address card, you can get its position index by calling the <B>GetAddressCardIndex</B> function. Conversely, by calling <B>GetAddressCardOid</B> and passing in the position index as a variable, you can get the object identifier.
</LI>

	<LI>Property and property tag
<P>A property has an associated identifier called a property tag that is unique within the context of a single address card. To manipulate a property, you set the property tag with a call to the <B>SetMask</B> function. For example, you set the HHPR_HOME_TELEPHONE_NUMBER property tag to enable the home telephone number property of an address card. When accessing a property, you use the <B>GetPropertyDataStruct</B> function to specify whether the information should be retrieved by the position index, property name, or property tag. The information is then passed into a <B>PropertyDataStruct</B> structure.
</LI>

	<LI>Sort order
<P>Sort order specifies how the records are indexed. For example, records can be sorted according to the names or telephone numbers of the individuals. You can use up to four properties as the position indexes for sorting. However, you can sort only one property at a time. You specify an array of sort order options when you create a new database using <B>CreateAddressBook</B> and you specify a sort order out of the options list when you open an existing database using <B>OpenAddressBook</B>. You can change and retrieve the sort-order properties using the <B>SetColumnProperties</B> or <B>GetColumnProperties</B> function. In addition, you can change or retrieve the current sort order in an opened database using the <B>SetSortOrder</B> or <B>GetSortOrder</B> function. 
</LI>
</UL>

</BODY>
</HTML>

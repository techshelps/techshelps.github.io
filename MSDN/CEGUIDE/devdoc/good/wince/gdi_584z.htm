<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Regions</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H1>

<A NAME="_regions"></A>Regions</H1>

<P>In Windows CE, a <I>region</I> is a rectangle that can be filled, painted, inverted, framed, and tested to see if it contains a particular point. </P>

<P>You create a region by calling <B>CreateRectRgn</B> or <B>CreateRectRgnIndirect</B>. These functions return a handle identifying the new region. Once you have a handle to a region, you can select the region into a device context with the <B>SelectObject</B> function. You can perform a variety of operations on a region: You can combine or compare it with another region, paint or invert its interior, draw a frame around it, retrieve its dimensions, and test whether or not a particular point lies within it.</P>

<P><B>Note</B>  When using the <B>CreateRectRgn</B> and <B>CreateRectRgnIndirect </B>functions, use values for regions that can be represented by 16-bit integers because that is how region data is stored in Windows CE.</P>

<P>The following table describes in which ways you can use the <B>CombineRgn</B> function to combine two regions together. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TH align=left width=19%>Value</TH>
<TH align=left width=81%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=19%>RGN_AND</TD>
<TD width=81%>The intersecting parts of two original regions define a new region.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>RGN_COPY</TD>
<TD width=81%>A copy of the first of the two original regions defines a new region.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>RGN_DIFF</TD>
<TD width=81%>The part of the first region that does not intersect the second defines a new region.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>RGN_OR</TD>
<TD width=81%>The two original regions define a new region.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>RGN_XOR</TD>
<TD width=81%>Those parts of the two original regions that do not overlap define a new region.</TD>
</TR>
</TABLE><BR>

<P>You can use the <B>EqualRgn</B> function to determine whether or not two regions are equal in size and shape. You can use the <B>FillRgn</B> function to paint the interior of a region with a specified brush. </P>

<P>Windows CE does not support the <B>InvertRgn</B> or <B>InvertRect</B> functions. You can achieve the effect of <B>InvertRect</B> by using the <B>PatBlt</B> function with an ROP code of DSTINVERT.</P>

<P>You can retrieve the dimensions of a region's bounding rectangle by calling the <B>GetRgnBox</B> function. The bounding rectangle is the smallest rectangle that be drawn around a region. Use the <B>OffsetRgn</B> function to move a region a specified number of logical units. Use <B>GetRegionData</B> to retrieve data describing a region. </P>

<P><B>Note</B>  Because Windows CE represents regions differently than Windows-based desktop platforms, <B>GetRegionData</B> function can return a different number of rectangles for a specified region than the equivalent Windows-based desktop function.</P>

<P>The <B>PtInRegion</B> function determines if a point is inside a specified rectangle. To determine if the point is in a region, you must pass the location of the point along with a region's handle to <B>PtInRegion</B>. </P>

</BODY>
</HTML>

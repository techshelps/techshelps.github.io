<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mail Messages</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_MailMsg">
</OBJECT>
</TD></TR></TABLE>



<H1>

<A NAME="_mail_messages"></A>Mail Messages</H1>

<P>Windows CE uses the <A HREF="JavaScript:hhobj_1.Click()"><B>MailMsg</B></A> structure to encapsulate information about a mail message. The data structure contains the following elements:

<UL>
	<LI>The message's object identifier</LI>

	<LI>The message's header and body</LI>

	<LI>The time the message is received</LI>

	<LI>Additional status information about the message and the operation to be performed against it</LI>
</UL>

<P>You must create and initialize a <B>MailMsg</B> structure in order to use it to read and write messages to and from the message store. If you declare a <B>MailMsg</B> structure on the stack, to be sure that the structure is cleanly initialized, you should call:</P>

<PRE><CODE>memset(&amp;MailMsg, 0, sizeof(MailMsg));
</CODE></PRE>

<P>The unique object identifier is registered as the <B>oid</B> member of the <B>MailMsg</B> structure. You use this identifier for direct access to messages in the message store. There are a number of flags you can use to perform specific operations on the message. These flags are assigned to the <B>dwFlags </B>member of the <B>MailMsg</B> structure. The mail and transport functions assign flags to denote the status of the message. You can assign flags to specify how to handle a message. For example, you can selectively retrieve messages of certain types, and you can flag a new message to be sent after the user issues the <B>Send</B> command. </P>

<P>Mail flags are divided into four categories:

<UL>
	<LI>Folder flags
<P>Determine which folder to locate or store the message in, or which folder the message will be moved or copied into. The flags have the MAIL_FOLDER_ prefix.
</LI>

	<LI>Status flags
<P>Determine the type of message being searched for before a call is made to retrieve a message. After the function call they contain the status of the message. The flags have the MAIL_STATUS_ prefix.
</LI>

	<LI>Message store flags
<P>Determine how much of the message is read into memory when the message is retrieved. The flags have the MAIL_ prefix.
</LI>

	<LI>Message attachment flags
<P>Determine the status of message attachments and the mode of operation to be performed on them. The flags have the ATT_ prefix.
</LI>
</UL>

<P>When you assign MAIL_FOLDER_SENT to <B>dwFlag</B>, the system will move the message to the <B>Sent Items</B> folder. Messages that are flagged with MAIL_STATUS_DELETE are displayed in the <B>Deleted Items</B> folder and are invisible from the original folder. MAIL_STATUS_ATTACHMENTS indicates that the message has attachments. If you want to fetch the full body of a message from the message store, set <B>dwFlags</B> to MAIL_FULL. All the mail flags are defined in the<I> </I>Msgstore.h header file.</P>

</BODY>
</HTML>

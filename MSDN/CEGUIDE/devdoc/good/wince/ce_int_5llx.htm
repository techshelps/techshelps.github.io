<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPegasusFileFilter::FormatMessage</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_localfree">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_localalloc">
</OBJECT>
</TD></TR></TABLE>



<H1>

<A NAME="_ipegasusfilefilter_formatmessage"></A>IPegasusFileFilter::FormatMessage</H1>

<P>The <B>IPegasusFileFilter::FormatMessage</B> method formats a message string. </P>

<H4>Syntax</H4>

<P><B>STDMETHOD(FormatMessage) (THIS_<BR>
DWORD</B>   <I>dwFlags</I><B>,</B><BR>
<B>DWORD</B>   <I>dwMessageId</I><B>,</B><BR>
<B>DWORD</B>   <I>dwLanguageId</I><B>,</B><BR>
<B>LPTSTR</B>  <I>lpBuffer</I><B>,</B><BR>
<B>DWORD</B>   <I>nSize</I><B>,</B><BR>
<B>va_list</B> *<I>Arguments</I><B>,</B><BR>
<B>DWORD</B>   *<I>pcb<BR>
</I><B>) PURE;</B></P>

<H4>At a Glance</H4>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%>Header file:</TD>
<TD width=67%>Replfilt.h</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Platforms:</TD>
<TD width=67%>H/PC</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Windows CE versions:</TD>
<TD width=67%>1.0 and later</TD>
</TR>
</TABLE><BR>

<H4>Parameters</H4>

<DL>
<DT><I>dwFlags</I> </DT>

<DD>Contains a set of bit flags that specify aspects of the formatting process and how to interpret the <I>lpSource</I> parameter. The low-order byte of <I>dwFlags</I> specifies how <B>FormatMessage</B> handles line breaks in the output buffer. The low-order byte can also specify the maximum width of a formatted output line.

<P>You can specify a combination of the following bit flags: 


<DL>
<DT>FORMAT_MESSAGE_ALLOCATE_BUFFER</DT>

<DD>Specifies that the <I>lpBuffer</I> parameter is a pointer to a PVOID pointer, and that the <I>nSize</I> parameter specifies the minimum number of bytes (ANSI version) or characters (Unicode version) to allocate for an output message buffer. <B>FormatMessage</B> allocates a buffer large enough to hold the formatted message, and places a pointer to the allocated buffer at the address specified by <I>lpBuffer</I>. The caller should use the <A HREF="JavaScript:hhobj_1.Click()"><B>LocalFree</B></A> function to free the buffer when it is no longer needed.</DD>

<DT>FORMAT_MESSAGE_IGNORE_INSERTS</DT>

<DD>Specifies that insert sequences in the message definition are to be ignored and passed through to the output buffer unchanged. This flag is useful for retrieving a message for later formatting. If this flag is set, the <I>Arguments</I> parameter is ignored.</DD>

<DT>FORMAT_MESSAGE_FROM_STRING</DT>

<DD>Specifies that <I>lpSource</I> is a pointer to a null-terminated message definition. The message definition can contain insert sequences, just as the message text in a message table resource can. This flag cannot be used with FORMAT_MESSAGE_FROM_HMODULE or FORMAT_MESSAGE_FROM_SYSTEM.</DD>

<DT>FORMAT_MESSAGE_FROM_HMODULE</DT>

<DD>Specifies that <I>lpSource</I> is a module handle containing the message-table resources to search. If this <I>lpSource</I> handle is NULL, the current process's application image file will be searched. This flag cannot be used with FORMAT_MESSAGE_FROM_STRING.</DD>

<DT>FORMAT_MESSAGE_FROM_SYSTEM</DT>

<DD>Specifies that <B>FormatMessage</B> should search the system message-table resources for the requested message. If this flag is specified with FORMAT_MESSAGE_FROM_HMODULE, <B>FormatMessage</B> searches the system message table if the message is not found in the module specified by <I>lpSource</I>. This flag cannot be used with FORMAT_MESSAGE_FROM_STRING.

<P>If this flag is specified, an application can pass the result of the <B>GetLastError</B> function to retrieve the message text for a system-defined error.
</DD>

<DT>FORMAT_MESSAGE_ARGUMENT_ARRAY</DT>

<DD>Specifies that the <I>Arguments</I> parameter is not a <B>va_list</B> structure, but instead is pointer to an array of 32-bit values that represent the arguments.</DD>
</DL>


<P>The low-order byte of <I>dwFlags</I> can specify the maximum width of a formatted output line. Use the FORMAT_MESSAGE_MAX_WIDTH_MASK constant and bitwise Boolean operations to set and retrieve this maximum width value.


<P><B>FormatMessage</B> interprets the value of the low-order byte as follows:


<DL>
<DT>0</DT>

<DD>There are no output line width restrictions. <B>FormatMessage</B> stores line breaks that are in the message definition text in the output buffer.</DD>

<DT>A nonzero value other than FORMAT_MESSAGE_MAX_WIDTH_MASK.</DT>

<DD>The nonzero value is the maximum number of characters in an output line. <B>FormatMessage</B> ignores regular line breaks in the message definition text. <B>FormatMessage</B> never splits a string delimited by white space across a line break. <B>FormatMessage</B> stores hard-coded line breaks in the message definition text in the output buffer. Hard-coded line breaks are coded with the %n escape sequence.</DD>

<DT>FORMAT_MESSAGE_MAX_WIDTH_MASK</DT>

<DD><B>FormatMessage</B> ignores regular line breaks in the message definition text. <B>FormatMessage</B> stores hard-coded line breaks in the message definition text in the output buffer. <B>FormatMessage</B> generates no new line breaks.</DD>
</DL>
</DD>

<DT><I>dwMessageId</I> </DT>

<DD>Specifies the 32-bit message identifier for the requested message. This parameter is ignored if <I>dwFlags</I> includes FORMAT_MESSAGE_FROM_STRING.</DD>

<DT><I>dwLanguageId</I> </DT>

<DD>Specifies the 32-bit language identifier for the requested message. This parameter is ignored if <I>dwFlags</I> includes FORMAT_MESSAGE_FROM_STRING. </DD>

<DT><I>lpBuffer</I> </DT>

<DD>Pointer to a buffer for the formatted (and null-terminated) message. If <I>dwFlags</I> includes FORMAT_MESSAGE_ALLOCATE_BUFFER, <B>FormatMessage</B> allocates a buffer using the <A HREF="JavaScript:hhobj_2.Click()"><B>LocalAlloc</B></A> function, and places the address of the buffer at the address specified in <I>lpBuffer</I>.</DD>

<DT><I>nSize</I> </DT>

<DD>If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag is not set, this parameter specifies the maximum number of bytes (ANSI version) or characters (Unicode version) that can be stored in the output buffer. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of bytes or characters to allocate for an output buffer.</DD>

<DT><I>Arguments</I> </DT>

<DD>Pointer to an array of 32-bit values that are used as insert values in the formatted message: %1 in the format string indicates the first value in the <I>Arguments</I> array; %2 indicates the second argument; and so on. 

<P>The interpretation of each 32-bit value depends on the formatting information associated with the insert in the message definition. The default is to treat each value as a pointer to a null-terminated string. 


<P>By default, the <I>Arguments</I> parameter is of type <B>va_list</B> *, which is a language- and implementation-specific data type for describing a variable number of arguments. If you do not have a pointer of type <B>va_list</B> *, then specify the FORMAT_MESSAGE_ARGUMENT_ARRAY flag and pass a pointer to an array of 32-bit values; those values are used as input for the message and are formatted as the insert values. Each insert must have a corresponding element in the array.
</DD>

<DT><I>pcb</I> </DT>

<DD>Pointer to a <B>DWORD</B> that receives the length of the string returned by <B>FormatMessage</B>. If <B>FormatMessage</B> succeeds, <I>pcb</I> holds the number of bytes (ANSI version) or characters (Unicode version) stored in the output buffer, excluding the terminating null character. 
</DD>
</DL>

<H4>Return Values</H4>

<DL>
<DT>NOERROR</DT>

<DD><B>FormatMessage</B> was successful. The variable pointed to by the <I>pcb</I> parameter should be non-zero.</DD>

<DT>E_FAIL</DT>

<DD><B>FormatMessage</B> failed.
</DD>
</DL>

<H4>Remarks</H4>

<P>The <B>FormatMessage</B> method requires a message definition as input. The message definition can come from a buffer passed into <B>FormatMessage</B>, from a message table resource in an already-loaded module, or the caller can prompt <B>FormatMessage</B> to search the system's message table resources. <B>FormatMessage</B> finds the message definition in a message table resource based on a message identifier and a language identifier. <B>FormatMessage</B> copies the formatted message text to an output buffer, processing any embedded insert sequences if requested. <B>FormatMessage</B> also allows the filter to define message codes specific to the filter. For more information, see <A HREF="filter_6w1f.htm">Transferring Files</A> and <A HREF="filter_0x83.htm">Filter Defined Error Values</A>. </P>

</BODY>
</HTML>

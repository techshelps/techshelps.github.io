<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>.inf File</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H2>

<A NAME="_.inf_file_ch"></A>.inf File</H2>

<P>CAB Wizard can create multiple .cab files with a single setup .inf file and multiple application binaries. This is useful for creating multiple .cab files, each one for a specific processor type. To indicate information for a specific processor, append an extension describing the processor, known as a processor tag, to these section names: CEDevice, DefaultInstall, SourceDisksNames, and SourceDisksFiles. For example:</P>

<PRE><CODE>[DefaultInstall]        ;shared by all platforms, processed first
[DefaultInstall.sh3]    ;specific to the SH3 chip
[DefaultInstall.mips]   ;specific to the MIPS chip
</CODE></PRE>

<P>Information in sections without an extension is valid, unless it is specifically overridden by information in a section with an extension. The exception to this is the <I>UnsupportedPlatforms </I>key in the CEDevice section, described later.</P>

<P><B>Version</B></P>

<PRE><CODE>[Version]
Signature = "<I>signature-name</I>"
Provider = "<I>INF-creator</I>"
CESignature = "$Windows CE$"
</CODE></PRE>

<DL>
<DT><I>signature-name</I> </DT>

<DD>Must be "$Windows NT$" or "$Windows 95$."</DD>

<DT><I>INF-creator</I> </DT>

<DD>The company name of the application. For example:

<PRE><CODE>Provider = "Microsoft"
</CODE></PRE>
</DD>
</DL>

<P><B>CEStrings</B></P>

<P>This is a section specific to Windows CE that specifies string substitutions for the application name and the default install directory.</P>

<PRE><CODE>[CEStrings]
AppName = <I>app-name</I>
InstallDir = <I>default-install-dir    </I>
</CODE></PRE>

<DL>
<DT><I>app-name</I></DT>

<DD>Name of the application. Other instances of %AppName% in the .inf file will be replaced with this string value.</DD>

<DT><I>default-install-dir</I></DT>

<DD>Default installation directory on the device. Other instances of %InstallDir% in the .inf file will be replaced with this string value.
</DD>
</DL>

<P>For example, to have AppName mean "Game Pack," and to have InstallDir mean %CE1%\%AppName%, use this code:</P>

<PRE><CODE>[CEStrings]
AppName="Game Pack"
InstallDir=%CE1%\%AppName%
</CODE></PRE>

<P><B>Strings</B></P>

<PRE><CODE>[Strings]
<I>string-key </I>= <I>value</I>
[<I>string-key</I> = <I>value</I>]
</CODE></PRE>

<P><B>CEDevice</B></P>

<PRE><CODE>[CEDevice]
[ProcessorType   =[<I>processor-type</I>]]
[UnsupportedPlatforms = <I>platform-family-name</I>[,<I>platform-family-name</I>]]
[VersionMin      = [<I>major-version.minor-version</I>]]
[VersionMax      = [<I>major-version.minor-version</I>]]
[BuildMin        = [<I>build-number</I>]]
[BuildMax        = [<I>build-number</I>]]
</CODE></PRE>

<P>All keys are optional. If a key is non-existent, no checking is performed. If a key exists but there is no data, then no checking is performed. The exception is <B>UnsupportedPlatforms</B>; if this key exists but there is no data, the previous value is not overridden.

<DL>
<DT><I>processor-type</I></DT>

<DD>Value returned by SYSTEMINFO.dwProcessorType. For example, the value for the SH3 CPU is 10003 and the MIPS CPU is 4000.</DD>

<DT><I>platform-family-name</I></DT>

<DD>List of platform family names known to be unsupported. If the name specified in [CEDevice.xxx] is different from that in [CEDevice], both platform family name values are unsupported for processor "xxx." That is, the list of specific unsupported platform family names is appended to the previous list of unsupported platform family names. Application Manager will not display the application for an unsupported platform. Also, the user will be warned during setup if the .cab file is copied to an unsupported device. For example:

<PRE><CODE>[CEDevice]
UnsupportedPlatforms = <I>pltfrm1</I>      ; <I>pltfrm1</I> is unsupported
[CEDevice.SH3]
UnsupportedPlatforms =              ; <I>pltfrm1</I> is still unsupported
</CODE></PRE>
</DD>

<DT><I>minor-version</I> or <I>major-version</I></DT>

<DD>Numeric value returned by OSVERSIONINFO.dwVersionMinor and OSVERSIONINFO.dwVersionMajor. The .cab file is valid for the currently connected device, if the version of the currently connected device is less than or equal to VersionMax and also greater than or equal to VersionMin.</DD>

<DT><I>build-number</I></DT>

<DD>Numeric value returned by OSVERSIONINFO.dwBuildNumber. The .cab file is valid for the currently connected device, if the version of the currently connected device is less than or equal to BuildMax and also greater than or equal to BuildMin.
</DD>
</DL>

<P>The following code example shows three CEDevice sections, one that gives basic information for any \cpu and two that are specific to the SH3 and the MIPS processor chips.</P>

<PRE><CODE>[CEDevice]                           ; a "template" for all platforms
UnsupportedPlatforms = <I>pltfrm1</I>       ; does not support <I>pltfrm1</I>
; the following specifies version 1.0 devices only
VersionMin = 1.0
VersionMax = 1.0

[CEDevice.SH3]                  ; inherits all [CEDevice] settings
; this will create a CAB file specific for "SH3" devices
ProcessorType = 10003           ; the SH3 CAB file is only valid for the SH3 processors
UnsupportedPlatforms =          ;<I> pltfrm1</I> is still unsupported
; the following overrides the version settings so that no version checking is performed
VersionMin =
VersionMax =

[CEDevice.MIPS]                  ; inherits all [CEDevice] settings
; this will create a CAB file specific for "MIPS" devices
ProcessorType = 4000             ; the "MIPS" CAB file is only valid for the MIPS processor
UnsupportedPlatforms =<I>pltfrm2</I>    ;<I> pltfrm1 and pltfrm2</I> are unsupported for the "MIPS" CAB file
</CODE></PRE>

<P><B>Note</B>  To create the two CPU-specific .cab files for the setup .inf file in the previous example, CAB Wizard must be run with the parameter <I>/cpu&nbsp; sh3&nbsp; mips</I>.</P>

<P><B>DefaultInstall</B></P>

<PRE><CODE>[DefaultInstall]
Copyfiles=<I>copyfile-list-section</I>[,<I>copyfile-list-section</I>]
AddReg=<I>add-registry-section</I>[<I>,add-registry-section</I>]
[CEShortcuts<I>=shortcut-list-section</I>[<I>,shortcut-list-section</I>]]   ; new key
[CESetupDLL=<I>setup-DLL</I>]                                        ; new key
[CESelfRegister=<I>self-reg-DLL-filename</I>[<I>,self-reg-DLL-filename</I>] ; new key
</CODE></PRE>

<DL>
<DT><I>shortcut-list-section</I></DT>

<DD>String that identifies one more section that defines shortcuts to a file; see the CEShortcuts description later in this section.</DD>

<DT><I>setup-DLL</I></DT>

<DD>Optimal string that specifies a Setup.dll. It is written by the ISV and contains customized functions for operations during installation and removal of the application.The file must be specified in the [SourceDisksFiles] section. For more information, see the associated description later in this section.</DD>

<DT><I>self-reg-DLL-filename</I></DT>

<DD>String that identifies files that self-register, exporting the COM functions <B>DllRegisterServer</B> and <B>DllUnregisterServer</B>. You must specify the files in the SourceDiskFiles section.

<P>During installation, if installation on the device fails to call the file's exported <B>DllRegisterServer </B>function, then the file's exported <B>DllUnregisterServer</B> function will not be called during uninstallation.

</DD>
</DL>

<P><B>SourceDisksNames</B></P>

<PRE><CODE>[SourceDisksNames]
<I>disk-ordinal</I>= ,<I>disk-label</I>,,<I>path</I>
[<I>disk-ordinal</I>= ,<I>disk-label</I>,,<I>path</I>]
</CODE></PRE>

<P><B>SourceDisksFiles</B></P>

<PRE><CODE>[SourceDisksFiles]
<I>filename</I>=<I>disk_number</I>[,<I>subdir</I>]
[<I>filename</I>=<I>disk_number</I>[,<I>subdir</I>]]
</CODE></PRE>

<P><B>DestinationDirs</B></P>

<PRE><CODE>[DestinationDirs]
file-list-section = 0,<I>subdir</I>
<I>[file-list-section</I> = 0,<I>subdir]</I>
[DefaultDestDir=0,<I>subdir</I>]
</CODE></PRE>

<P><B>Note</B>  Windows CE does not support directory identifiers (DirID).</P>

<DL>
<DT><I>Subdir</I></DT>

<DD>String that identifies the destination directory. String substitutions supported by Windows CE are described in the following table. These can only be used for the beginning of the path.


<TABLE cols=2>

<TR VALIGN="top">
<TH align=left width=16%>String</TH>
<TH align=left width=84%>Replacement value</TH>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE1%</TD>
<TD width=84%>\Program Files</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE2%</TD>
<TD width=84%>\Windows</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE3%</TD>
<TD width=84%>\Windows\Desktop</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE4%</TD>
<TD width=84%>\Windows\Startup</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE5%</TD>
<TD width=84%>\My Documents</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE6%</TD>
<TD width=84%>\Program Files\Accessories</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE7%</TD>
<TD width=84%>\Program Files\Communication</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE8%</TD>
<TD width=84%>\Program Files\Games</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE9%</TD>
<TD width=84%>\Program Files\Pocket Outlook</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE10%</TD>
<TD width=84%>\Program Files\Office</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE11%</TD>
<TD width=84%>\Windows\Programs</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE12%</TD>
<TD width=84%>\Windows\Programs\Accessories</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE13%</TD>
<TD width=84%>\Windows\Programs\Communications</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE14%</TD>
<TD width=84%>\Windows\Programs\Games</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE15%</TD>
<TD width=84%>\Windows\Fonts</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE16%</TD>
<TD width=84%>\Windows\Recent</TD>
</TR>

<TR VALIGN="top">
<TD width=16%>%CE17%</TD>
<TD width=84%>\Windows\Favorites</TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<P>For example:</P>

<PRE><CODE>[DestinationDirs]
Files.Common   = 0,%CE1%\My Subdir   ;\Program Files\My Subdir
Files.Shared   = 0,%CE2%                 ;\Windows
</CODE></PRE>

<P><B>CopyFiles</B></P>

<PRE><CODE>[<I>copyfile-list-section</I>]
<I>destination-file-name</I>,[<I>source-file-name</I>],[,<I>flags</I>]
[<I>destination-file-name</I>,[<I>source-file-name</I>],[,<I>flags</I>]]
</CODE></PRE>

<P><I>Source-file-name</I> is optional if it is the same as <I>destination-file-name</I>.

<DL>
<DT><I>Flags</I></DT>

<DD>Numeric value that specifies an action to be done while copying files. Values supported by Windows CE are described in the following table.


<TABLE cols=3>

<TR VALIGN="top">
<TH align=left width=43%>Flag</TH>
<TH align=left width=20%>Value</TH>
<TH align=left width=37%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=43%>COPYFLG_WARN_IF_SKIP</TD>
<TD width=20%>0x00000001</TD>
<TD width=37%>Warn user if attempt is made to skip a file after an error has occurred.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>COPYFLG_NOSKIP</TD>
<TD width=20%>0x00000002</TD>
<TD width=37%>Do not allow user to skip copying a file.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>COPYFLG_NO_OVERWRITE</TD>
<TD width=20%>0x00000010</TD>
<TD width=37%>Do not overwrite an existing file in the destination directory.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>COPYFLG_REPLACEONLY</TD>
<TD width=20%>0x00000400</TD>
<TD width=37%>Copy source file to the destination directory only if the file is already in the destination directory.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CE_COPYFLG_NO_DATE_DIALOG</TD>
<TD width=20%>0x20000000</TD>
<TD width=37%>Do not copy if target is newer.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CE_COPYFLG_NODATECHECK</TD>
<TD width=20%>0x40000000</TD>
<TD width=37%>Ignore date while overwriting the target file. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>CE_COPYFLG_SHARED</TD>
<TD width=20%>0x80000000</TD>
<TD width=37%>Reference when a shared DLL is counted.</TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<P><B>AddReg</B></P>

<PRE><CODE>[<I>add-registry-section</I>]
<I>registry-root-string</I> , <I>subkey,</I>[<I>value-name</I>], <I>flags, value</I>[,<I>value</I>]
[<I>registry-root-string</I>, <I>subkey,</I>[<I>value-name</I>], <I>flags</I>, <I>value</I>[,<I>value</I>]]
</CODE></PRE>

<DL>
<DT><I>registry-root-strings</I></DT>

<DD>String that specifies the registry root location. Values supported by Windows CE are described in the following table.

<TABLE cols=2>

<TR VALIGN="top">
<TH align=left width=48%>Root string</TH>
<TH align=left width=52%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=48%>HKCR</TD>
<TD width=52%>Same as HKEY_CLASSES_ROOT</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>HKCU</TD>
<TD width=52%>Same as HKEY_CURRENT_USER</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>HKLM</TD>
<TD width=52%>Same as HKEY_LOCAL_MACHINE</TD>
</TR>
</TABLE><BR>

</DD>

<DT><I>value-name</I></DT>

<DD>Registry value name. If empty, the registry value name "(default)" is used.</DD>

<DT><I>flags</I></DT>

<DD>Numeric value that specifies information about the registry key. Values supported by Window CE are described in the following table.


<TABLE cols=3>

<TR VALIGN="top">
<TH align=left width=41%>Flag</TH>
<TH align=left width=19%>Value</TH>
<TH align=left width=40%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=41%>FLG_ADDREG_NOCLOBBER</TD>
<TD width=19%>0x00000002</TD>
<TD width=40%>If the registry key exists, do not overwrite it. This flag can be used in combination with any of the flags later in this table.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>FLG_ADDREG_TYPE_SZ</TD>
<TD width=19%>0x00000000</TD>
<TD width=40%>Registry data type REG_SZ.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>FLG_ADDREG_TYPE_MULTI_SZ</TD>
<TD width=19%>0x00010000</TD>
<TD width=40%>Registry data type REG_MULTI_SZ. The value field that follows can be a list of strings separated by commas.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>FLG_ADDREG_TYPE_BINARY</TD>
<TD width=19%>0x00000001</TD>
<TD width=40%>Registry data type REG_BINARY. The value field that follows must be a list of numeric values separated by commas, one byte per field, and must not use the 0x hex prefix.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>  FLG_ADDREG_TYPE_DWORD</TD>
<TD width=19%>0x00010001</TD>
<TD width=40%>Data type REG_DWORD. Only the noncompatible format in the Win32 Setup .inf documentation is supported.</TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<P>The following code example shows how the AddReg section is used. </P>

<PRE><CODE>[RegSection]
; the following uses (FLG_ADDREG_TYPE_MULTI_SZ | FLG_ADDREG_NOCLOBBER) to create a multi-string with the "noclobber" flag
   HKLM,Software\Microsoft\Games,Title,0x00010002, "Game","Pack"
; the following uses FLG_ADDREG_TPE_BINARY to create an 8-byte binary registry value
   HKLM,Software\Microsoft\Games,Data,0x00000001,2,F,B,3,0,A,6,D
; the following uses (FLG_ADDREG_TYPE_DWORD | FLG_ADDREG_NOCLOBBER) to create a dword with the "no clobber" flag
   HKLM,Software\Microsoft\Games,HighScore,0x00010003,456
</CODE></PRE>

<P><B>CEShortcuts</B></P>

<P>This is a Windows CE-specific section.</P>

<P>[<I>shortcut-list-section</I>]</P>

<PRE><CODE><I>shortcut-file-name</I>,<I>shortcut-type-flag</I>,<I>target-file/path</I>[,<I>standard-destination-path</I>]
[<I>shortcut-file-name</I>,<I>shortcut-type-flag</I>,<I>target-file/path</I>[,<I>standard-destination-path</I>]]
</CODE></PRE>

<DL>
<DT><I>shortcut-file-name</I></DT>

<DD>String that identifies the shortcut name. It does not require the .lnk extension.</DD>

<DT><I>shortcut-type-flag</I></DT>

<DD>Numeric value. Zero or empty represents a shortcut to a file; any non-zero numeric value represents a shortcut to a folder.</DD>

<DT><I>target-file/path</I></DT>

<DD>String value that specifies the destination location. For a file, use the target file name, for example, MyApp.exe, that must be defined in a file copy list. For a path, use a <I>file-list-section</I> name defined in [<I>DestinationDirs</I>], for example, <I>DefaultDestDir</I>, or the %InstallDir% string.</DD>

<DT><I>standard-destination-path</I></DT>

<DD>Optional string value. A standard %CEx% path or %InstallDir%. If no value is specified, the <I>shortcut-list-section</I> name of the current section or the "<I>DefaultDestDir</I>"<I> </I>from the [<I>DestinationDirs</I>] section is used.
</DD>
</DL>

<P>The following code example shows how the CEShortcuts section is used. </P>

<PRE><CODE>[DestinationDirs]
file_list  = 0%CE2%
Links = 0%CE3%
DefaultDestDir = 0%InstallDir%
[file_list]
"my final app.exe",app.exe,,0
[Links]
; shortcut name is "file 1"
; this is a shortcut to a file; the target is "my final app.exe"
; shortcut is created in the folder used in "[DestinationDirs] Links" section, which is currently %CE3%
"file 1",0,"my final app.exe"

;shortcut name is "file2"
;this is a shortcut to a file; the target is "my final app.exe"
;shortcut is created in the %InstallDir% folder
"file 2",0,"my final app.exe",%InstallDir%

;shortcut name is "path 1"
;this is a shortcut to a folder
;the shortcut target is the folder used in "[DestinationDirs] DefaultDestDir" section, which is currently %InstallDir%
;shortcut is created in the folder used in "[DestinationDirs] Links" section which is currently %CE3%
"path 1",1,DefaultDestDir

;shortcut name is "path 2"
;this is a shortcut to a folder
;the target is the folder used in "[DestinationDirs] Links" section which is currently %CE3%
;shortcut is created in the %InstallDir% folder
"path 2",1,Links,%InstallDir%
</CODE></PRE>

</BODY>
</HTML>

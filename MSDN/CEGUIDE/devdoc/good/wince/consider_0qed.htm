<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structured Storage</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H3>

<A NAME="_structured_storage"></A>Structured Storage</H3>

<P>Structured storage is a file system within<I> </I>a file. COM uses it to efficiently store multiple types of objects in one document. COM defines structured storage as a collection of two types of COM objects, <I>storage</I> and <I>stream</I>. The former behaves as a directory and the latter as a file. A storage object must implement the <B>IStorage</B> interface and a stream object must implement the <B>IStream</B> interface. Just as a directory in a file system can contain subdirectories and files, a storage object can contain other storage objects and stream objects. A storage object keeps track of the locations and sizes of the contained storage and stream objects. A stream object stores data as a consecutive sequence of bytes. </P>

<P>Structured storage helps to reduce the performance penalties and overhead for storing separate objects in a flat file. Other benefits include incremental access and multiple uses of data in a transacted process, as well as providing facilities for saving files in low-memory situations. Windows CE provides a default implementation, currently for the H/PC platform, of the interfaces, functions, and enumeration required for structured storage services. This default implementation includes the following:

<UL>
	<LI><B>IStorage</B>, <B>IStream</B>, and <B>IRootStorage</B>
<P>These interfaces provide methods for opening storage, committing and reverting changes, copying and moving elements, and reading and writing streams. 
</LI>

	<LI><B>IPersist</B> and <B>IPersistStorage</B>
<P>These interfaces provide methods for reading data formats of individual objects and are capable of executing persistent storage.
</LI>

	<LI><B>ILockBytes</B>
<P>This interface provides methods for writing files to specific types of physical storage media, such as hard disks or tape drives. Objects implementing this interface are known as <I>LockBytes</I> objects. Windows CE does not provide any <I>LockBytes</I> objects when implementing default structured storage.
</LI>

	<LI><B>StgCreateDocfile</B>, <B>StgCreateDocfileOnILockBytes</B>, <B>StgOpenStorage</B>, <B>StgOpenStorageOnILockBytes</B>
<P>These functions allow clients to create a new compound file or to open an existing one on a default or custom <I>LockBytes</I> object.
</LI>

	<LI><B>STGM</B> enumeration
<P>The flags listed in <B>STGM</B> permit clients to specify the access modes for regulating access to compound files.
</LI>
</UL>

</BODY>
</HTML>

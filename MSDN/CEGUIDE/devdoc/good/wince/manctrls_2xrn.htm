<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Command Bars</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Windows_CE_Sample_Applications">
</OBJECT>
</TD></TR></TABLE>



<H2>

<A NAME="_using_command_bars"></A>Using Command Bars</H2>

<P>You can create a command bar to organize your application's menus and buttons. </P>

<H5><IMG SRC="../../images/wedge.gif" ALT="" BORDER=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a command bar</H5>

<OL>
	<LI>Initialize an <B>INITCOMMONCONTROLSEX</B> structure with ICC_BAR_CLASSES in the <B>dwICC</B> member.</LI>

	<LI>Register the command bar class by calling the <B>InitCommonControlsEx</B> function, and then passing in the <B>INITCOMMONCONTROLSEX </B>structure.</LI>

	<LI>Create the commands bands control by calling the <B>CommandBar_Create</B> function.</LI>

	<LI>Add controls to the command bar by calling the <B>CommandBar_InsertMenubar</B>, <B>CommandBar_AddBitmap</B>, <B>CommandBar_AddButtons</B>, and <B>CommandBar_InsertComboBox</B> functions.</LI>

	<LI>Add the <B>Close</B> and <B>Help</B> buttons by calling the <B>CommandBanr_AddAdornments</B> function, passing CMDBAR_HELP in the <I>dwFlags</I> parameter. Windows CE automatically adds the <B>Close</B> button.</LI>
</OL>

<P>In addition to creating and registering command bars, you can use command bar functions to perform the following procedures:

<UL>
	<LI>Destroy a command bar.</LI>

	<LI>Determine a command bar's height.</LI>

	<LI>Add bitmaps, buttons, and ToolTips to a command bar.</LI>

	<LI>Insert combo boxes and menu bars into a command bar.</LI>

	<LI>Determine whether or not a command bar is visible.</LI>

	<LI>Obtain a handle to a command bar menu or submenu.</LI>

	<LI>Show or hide a command bar.</LI>

	<LI>Redraw a command bar.</LI>
</UL>

<P>The window procedure for a command bar automatically sets the size of the command bar and positions it along the top of the parent window's client area. It also destroys the command bar when its parent window is destroyed. Use the <B>CommandBar_Destroy</B> function to destroy the command bar without destroying the parent window.</P>

<P>Unlike a scroll bar and a status bar, the command bar is part of the client area of your application. To determine the useable portion of the application window, use the <B>CommandBar_Height</B> function to retrieve the command bar's height in pixels, and then subtract the height of the command bar from the size of the client rectangle, which you obtain by calling <B>GetClientRect</B>.</P>

<P>Use the <B>CommandBar_AddAdornments</B> function to add the <B>Close</B> button (<B>X</B>), the <B>Help</B> button (<B>?</B>), and the <B>OK</B> button to a command bar. Though every command bar must have a <B>Close</B> button, the <B>OK</B> button and the <B>Help</B> button are optional. Do not call the <B>CommandBar_AddAdornments</B> function until after you have added all the other elements to the command bar.</P>

<P>A command bar stores the information needed to draw the button images in an internal list, which is empty when the command bar is created. Each image has a zero-based index that you use to associate the image with a button. Use the <B>CommandBar_AddBitmap</B> function to add an array of images to the end of the list. This function returns the index of the first new image that was added. The system includes a set of predefined command bar button with header files that define constant values for their indexes.</P>

<P>You can add both buttons and ToolTips to your command bar. Use the <B>CommandBar_InsertButton</B> function to add a single button or separator to a command bar. Use the <B>CommandBar_AddButtons</B> function to add several command bar buttons or separators at once to a command bar. To create a separator, specify TBSTYLE_SEP as the <B>fsStyle</B> member of the <B>TBBUTTON</B> structure you pass in the <I>lpButton</I> parameter. Use the <B>CommandBar_AddTooltips</B> function to add ToolTips describing the command bar buttons. </P>

<P>To create a combo box and insert it into a command bar, use the <B>CommandBar_InsertComboBox</B> function. This function always creates a combo box with the WS_CHILD and WS_VISIBLE styles. You can specify other supported combo box styles, as well. </P>

<P>To insert a menu bar into a command bar, you can use either the <B>CommandBar_InsertMenubar</B> or <B>CommandBar_InsertMenubarEx</B> function. <B>CommandBar_InsertMenubar</B> inserts a menu bar identified by a resource identifier. <B>CommandBar_InsertMenubarEx</B> inserts a menu bar identified by either a resource name or menu handle.</P>

<P><B>Note</B>  Each element in a command bar has a zero-based index by which command bar functions can identify it. The leftmost element has an index of zero, the element immediately to its right has an index of one, and so on. When you use any of the <B>CommandBar_Insert</B> functions, the menu bar, button, or combo box is inserted to the left of the button whose index you specify in the <I>iButton</I> parameter.</P>

<P>Although Microsoft style guidelines recommend that you always have either a command bar or a command bands control in Windows CE-based applications, you can provide users with the option to hide the command bar, as long they can retrieve it. Use the <B>CommandBar_Show</B> function to show or hide the command bar. Use the <B>CommandBar_IsVisible</B> function to determine whether a command bar is visible. </P>

<P>To obtain the handle of a menu bar in a command bar, use the <B>CommandBar_GetMenu</B> function. To obtain the handle of a submenu on the menu bar, use the <B>GetSubMenu</B> function.</P>

<P>After modifying a menu bar on the command bar, call <B>CommandBar_DrawMenuBar</B> to redraw the command bar. Do not use the <B>DrawMenuBar</B> function for menu bars on the command bar. </P>

<P><B>Note</B>  Do not use 0xFFFFFFFF as the command identifier of a command bar control. This identifier is reserved for use by the command bar.</P>

<P>The following code example shows how to create a command bar.</P>

<PRE><CODE>INITCOMMONCONTROLSEX icex;
icex.dwSize = sizeof(icex);
icex.dwICC  = ICC_BAR_CLASSES;
InitCommonControlsEx(&amp;icex);

HWND hwndCB, hwnd;

hwndCB = CommandBar_Create(g_hInst, hwndParent, ID_COMMANDBAR);

CommandBar_InsertMenubar(hwndCB, g_hInst, IDM_MAINMENU, 0);

CommandBar_AddBitmap(hwndCB, HINST_COMMCTRL, IDB_STD_SMALL_COLOR, 15, 16, 16);

CommandBar_AddButtons(hwndCB, sizeof(tbButtons)/sizeof(TBBUTTON), tbButtons);

hwndCombo = CommandBar_InsertComboBox(hwndCB, g_hInst, COMBO_WIDTH, 
   CBS_DROPDOWNLIST | WS_VSCROLL, ID_COMBOBOX, 16);

CommandBar_AddAdornments(hwndCB, CMDBAR_HELP, 0);
</CODE></PRE>

<P>For an example of how to use a command bar in an application, see the Cmdbar sample application described in <A HREF="JavaScript:hhobj_1.Click()">Windows CE Sample Applications</A>. </P>

</BODY>
</HTML>

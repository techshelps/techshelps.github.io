<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Windows</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H1>

<A NAME="_creating_windows"></A>Creating Windows</H1>

<P>You create windows with the <B>CreateWindow</B> or <B>CreateWindowEx </B>function. The only difference between these functions is that <B>CreateWindowEx</B> supports the extended style parameter, <I>dwExStyle</I>, while <B>CreateWindow</B> does not. These functions take a number of parameters that specify the attributes of the window being created. </P>

<P><B>Note</B>  In Windows CE, <B>CreateWindow</B> is implemented as a macro which calls <B>CreateWindowEx</B>.</P>

<P>Windows CE includes additional functions, including <B>DialogBox</B>, <B>CreateDialog</B>, and <B>MessageBox</B>,<B> </B>for creating special-purpose windows such as dialog boxes and message boxes.</P>

<P>The <B>CreateWindowEx </B>function has the following prototype. </P>

<PRE><CODE>HWND
CreateWindowEx(
   DWORD       dwExStyle,       //Extended style parameter
   LPCWSTR     lpClassName,     //Class name parameter
   LPCWSTR     lpWindowName,    //Window name parameter
   DWORD       dwStyle,         //Style parameter
   int         X,               //Horizontal parameter
   int         Y,               //Vertical parameter
   int         nWidth,          //Width parameter
   int         nHeight,         //Height parameter
   HWND        hwndParent,      //Parent parameter
   HMENU       hMenu,           //Menu parameter
   HINSTANCE   hInstance,       //Instance handle parameter
   LPVOID      lpParam);        //Creation data parameter
</CODE></PRE>

<P>The window attributes in <B>CreateWindowEx</B> are described in the following table.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TH align=left width=33%>Window attributes</TH>
<TH align=left width=67%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=33%>Extended style</TD>
<TD width=67%>The dw<I>ExStyle</I> parameter specifies one or more window extended styles. These have their own set of WS_EX_* flags and should not be confused these with the WS_* flags.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Class name</TD>
<TD width=67%>Every window belongs to a window class. Except for built-in classes, like controls, an application must register a window class before creating any windows of that class. The <I>lpClassName</I>  parameter specifies the name of the class that is used as a template for creating the window.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Window name</TD>
<TD width=67%>The window name, which is also called window text, is a text string that is associated with a window. The <I>lpWindowName</I> parameter specifies the window text for the newly created window. Windows use this text in different ways. A main window, dialog box, or message box typically displays its window text in its title bar. A button control, edit control, or static control displays its window text within the rectangle occupied by the control. A list box, combo box, or scroll bar control does not display its window name. All windows have the text attribute, even if they do not display the text. </TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Style</TD>
<TD width=67%>The dw<I>Style</I> parameter specifies one or more window styles. A window style is a named constant that defines an aspect of the window's appearance and behavior. For example, a window with the WS_BORDER style has a border around it. Some window styles apply to all windows; others apply only to windows of specific window classes. For more information about windows styles, see the "Window Styles" section later in this chapter.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Horizontal and vertical coordinates</TD>
<TD width=67%>The <I>X</I> and <I>Y</I> parameters specify the horizontal and vertical screen coordinates, respectively, of the window's upper-left corner.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Width and height coordinates</TD>
<TD width=67%>The <I>nWidth</I> and <I>nHeight</I> parameters determine the width and height of the window in device units.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Parent</TD>
<TD width=67%>The <I>hwndParent</I> parameter specifies the parent or the owner of a window, depending on the style flags passed in.
<P>If neither WS_POPUP nor WS_CHILD is specified, the <I>hwndParent</I> parameter may be a valid window handle or NULL. If the parameter is NULL, the new window is a top-level window without a parent or owner. If it is non-NULL, the new window is created as child of the specified parent window. </P>

<P>If WS_CHILD is specified, the <I>hwndParent</I> parameter must be a valid window handle. The new window is created as a child of the parent window.</P>

<P>If the WS_POPUP style is specified, the new window is created as a top-level window and the <I>hwndParent</I> parameter specifies the owner window. If WS_POPUP is specified, and the parameter is NULL, the new window is partially owned by Windows CE. The WS_POPUP style overrides the WS_CHILD style.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Menu</TD>
<TD width=67%>Windows CE does not support menu bars. In Windows CE, you can use the <I>hMenu</I> parameter to identify only a child window. Otherwise, it must be NULL.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Instance handle</TD>
<TD width=67%>The <I>hInstance</I> parameter identifies the handle of the specific instance of the application that creates the window.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>Creation data</TD>
<TD width=67%>Every window receives a WM_CREATE message when it is created. The <I>lpParm</I> parameter is passed as one of the message parameters. Although it can be any value, it is most commonly a pointer to a structure that contains data that may be needed to create a particular window.</TD>
</TR>
</TABLE><BR>

<P>The class name for a new window class has to be a Unicode string. You can use the TEXT macro to cast a string as Unicode, for example, TEXT("classname").</P>

<P>An application uses the <B>SetWindowText</B> function to change the window text after it creates the window. It uses the <B>GetWindowTextLength</B> and <B>GetWindowText</B> functions to retrieve the window text from a window. </P>

</BODY>
</HTML>

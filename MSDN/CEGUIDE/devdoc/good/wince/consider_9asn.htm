<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Non-Standard Debugging and Testing</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Lists_of_Functions_and_Interfaces">
</OBJECT>
</TD></TR></TABLE>



<H2>

<A NAME="_non_standard_debugging_and_testing"></A>Non-Standard Debugging and Testing</H2>

<P>If you are developing software for a Windows CE-based platform, such as an H/PC, you can use the Windows CE emulation environment and remote tools to debug and test your application. However, if you are developing applications for other Windows CE-based platforms, such as embedded systems, you will have to devise your own debugging and testing tools.</P>

<P>The Windows CE API includes the interfaces necessary to create a full-featured debugger application, such as the one provided with Visual C++ or WinDbg. Although the creation tools exist, the limited size of the Windows CE environment makes such a debugger unrealistic. If you decide to write a debugger application, the best approach is to create a debug client using Windows CE debug functions and to communicate the relevant events to a desktop computer-based debugger. When writing a debugging application, choose one of the following ways to start the debugging session:

<UL>
	<LI>Launch a process with <B>CreateProcess</B> and specify DEBUG_PROCESS or DEBUG_ONLY_THIS_PROCESS in the <B>dwCreateFlags</B> member. In addition to the DEBUG_PROCESS flag, use CREATE_SUSPENDED to prevent the application from running after it is initialized. Once suspended, a debugger can initialize and add any appropriate break points.
<P>– Or –
</LI>

	<LI>Attach to an already running application. To attach to a process, you must obtain permission to access the process by calling <B>OpenProcess</B> and passing in the identifier of the process you want to debug. If a valid handle is returned, call <B>DebugActiveProcess</B> to start debugging. After attaching to the process, the CREATE_PROCESS_DEBUG_EVENT returns the primary thread handle and the multiple CREATE_THREAD_DEBUG_EVENTs return the secondary thread handles. After attaching to the process and receiving the initial events, the process's thread is resumed. Unlike Windows NT, Windows CE has no EXCEPTION_DEBUG_EVENT. All thread handles must be closed with <B>CloseHandle </B>when you stop debugging.</LI>
</UL>

<P>Windows CE has built-in support for just-in-time (JIT) debugging. JIT debugging enables you to run an application outside of the development environment. When an error occurs, the application calls the installed debugger. You register your JIT debugger by placing the name of your debugger in the registry located at HKEY_LOCAL_MACHINE\Debug. To enable JIT, you must warm-boot the device after the JITDebugger value is added to the registry.</P>

<P>If you choose not to write a debugging application, you must create some debugging tools inside your Windows CE-based application. Windows CE provides both functions and structures to do this.  For a list of supported debugging functions, see <A HREF="JavaScript:hhobj_1.Click()">Lists of Functions and Interfaces</A>. </P>

<P>No matter what tools you use, you must thoroughly test your application on every kind of device that will run your application.</P>

<P></P>

</BODY>
</HTML>

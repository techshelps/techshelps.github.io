<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Colors</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">



<H2>

<A NAME="_using_colors"></A>Using Colors</H2>

<P>You can use the <B>GetDeviceCaps</B> function, which specifies the NUMCOLORS value, to discover the number of colors a device supports. Usually, this count corresponds to a physical property of the output device, such as the number of inks in the printer or the number of distinct color signals the display adapter can transmit to the monitor.</P>

<P>Windows and applications use parameters and variables having the <B>COLORREF</B> type to pass and store color values. You can extract the individual values of the red, green, and blue components of a color value by using the <B>GetRValue</B>, <B>GetGValue</B>, and <B>GetBValue</B> macros, respectively. Use the <B>RGB</B> macro to create a color value from individual red, green, and blue component values. </P>

<P>If you request a color that the display device cannot generate, Windows CE will approximate it with a color that the device can generate. For example, if you attempt to create a red pen for a black and white printer, you will receive a black pen instead — Windows CE uses black as the approximation for red.</P>

<P>You can discover how Windows CE will approximate a specified color by using the <B>GetNearestColor</B> function. The function takes a color value and returns the color value of the closest matching color the device can generate. </P>

<P><B>Note</B>  Windows CE does not support dithering.</P>

<P>Windows handles colors in bitmaps differently than colors in pens, brushes, and text. Compatible bitmaps, created by using the <B>CreateBitmap</B> or <B>CreateCompatibleBitmap</B> function, retain color information in a device-dependent format. No color values are used, and the colors are not approximated. </P>

<P>Device-independent bitmaps (DIBs) retain color information either as color values or color palette indexes. If color values are used, the colors may be approximated as necessary. Color palette indexes can only be used with devices that support color palettes. Although Windows does not approximate colors identified by indexes, the colors in the bitmap could change if the palette changes. </P>

<P><B>Note</B>  An offscreen DIB section should have the same color table as the screen, otherwise GDI will have to perform a time-consuming color translating bit block transfer (BLT) when the DIB section is transferred to the screen. For gray scale devices, the color table should be 0x000000, 0x808080, 0xc0c0c0, and 0xffffff. For color devices, the application should first query the stock palette to determine its color display capabilities, and then build a matching color table.</P>

</BODY>
</HTML>

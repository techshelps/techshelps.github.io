<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tips for Efficient Memory Use</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_GetStoreInformation">
</OBJECT>
</TD></TR></TABLE>



<H1>

<A NAME="_tips_for_efficient_memory_use"></A>Tips for Efficient Memory Use</H1>

<P>Writing memory-efficient applications requires practice. Here are some suggestions to guide you while you design and program applications for an H/PC.

<UL>
	<LI>Decide how much memory to allocate to your application.
<P>Whenever the system attempts to allocate more than 16 KB of memory, it has the potential to fail without displaying the <B>System Out of Memory </B>dialog box<B> </B>and<B> </B>without sending a low memory warning to the user.

<P>Once the system is in a low-memory regime, any memory allocation greater than 8 KB has the potential to fail. Because of this, your application should not allocate large amounts of memory in its shutdown code. The user already knows that a low-memory situation exists.

<P>Small memory allocations almost never fail. Before this type of allocation fails, the user has been sent both low-memory and critical-memory warnings, in the form of <B>System Out of Memory </B>dialog boxes, and has had an opportunity to respond. 
</LI>

	<LI>Load only the data that the application needs for the immediate operation, and write the data back to the file when it is no longer needed.
<P>If you are using large data sets, consider loading only the data that an operation needs immediately, especially if the data will not be modified in the process. When the data is no longer needed, write it back to the file immediately. By loading data on demand, you gain memory, although you lose speed.
</LI>

	<LI>Remove read-only pages when resources are limited.
<P>If you are not modifying data, declare the data as constant so the kernel can remove it if necessary. The kernel will restore the data the next time it accesses the page.
</LI>

	<LI>Design applications that can modify their use of temporary files or eliminate temporary files completely.
<P>Many programs use temporary files that are deleted when the program terminates. Though this may be convenient, such files are a burden on memory resources while the temporary files exist. 

<P>Consider not using temporary files. Though eliminating the use of temporary files may decrease speed, simplicity, or perhaps the robustness of the application, the increase in memory efficiency is sufficient to offset the liabilities of this approach. If possible, design applications that can modify their own use of temporary files depending on the state of memory resources. 
</LI>

	<LI>Compress text and bitmaps.
<P>Data stored in text format and as uncompressed bitmaps uses memory inefficiently. Although some compression takes place when files are loaded from a desktop computer to an H/PC, you need to use the memory-saving techniques of compression and decompression fully for maximum benefit. 
</LI>

	<LI>Limit your use of bitmaps.
<P>While one of the most appealing features of Windows-based platforms is the rich graphical environment you can create, graphics use a lot of memory. To conserve memory, you must limit your use of bitmaps and other graphic displays. One approach to conserving memory while retaining bitmaps is to use an algorithm to generate the image on demand, rather than loading the bitmap or other graphics file into memory. Though you gain memory with this approach, you lose speed. Generating images on demand works best for line drawings, though it is practical for other types of graphics as well. 
</LI>

	<LI>Include memory management capabilities in your application to supplement those in the system.
<P>An application that downloads large amounts of data over a modem, such as e-mail or stock quotations, may require more memory than the system has available. Use <A HREF="JavaScript:hhobj_1.Click()"><B>GetStoreInformation</B></A> to determine the amount of free memory in the object store prior to the download, and then warn the user of potential problems.
</LI>

	<LI>Offer users the option of turning off automatic backups.
<P>Though an application that automatically creates backup files protects the user from unintentional data loss, the backup files use valuable memory. If your application supports backup files, prompt the user to turn off automatic backups if memory is low. 

<P>If the application has a desktop component, be sure it is sensitive to the memory limitations of the Windows CE-based platform. When downloading an application or data, inform the user if the system has too little memory remaining for the device to operate effectively.
</LI>
</UL>

<P></P>

</BODY>
</HTML>

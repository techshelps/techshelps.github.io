<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Critical Section Objects</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_InitializeCriticalSection">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_EnterCriticalSection">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_LeaveCriticalSection">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_DeleteCriticalSection">
</OBJECT>
<OBJECT ID="hhobj_5" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_EnterCriticalSection">
</OBJECT>
<OBJECT ID="hhobj_6" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_Win32_LeaveCriticalSection">
</OBJECT>
</TD></TR></TABLE>



<H3>

<A NAME="_critical_section_objects"></A>Critical Section Objects</H3>

<P>A <I>critical section object</I> is a synchronization object that provides synchronization similar to that provided by mutex objects, except that critical section objects can be used only by the threads of a single process. Like a mutex object, a critical section object can be owned by only one thread at a time, which makes it useful for protecting a shared resource from simultaneous access. There is no guarantee about the order in which threads obtain ownership of the critical section; however, Windows CE processes all threads equally.</P>

<P>A process is responsible for allocating the memory used by a critical section. Typically, this is done by declaring a variable of the type CRITICAL_SECTION. Before the threads of the process can use it, you must initialize the critical section by using the <A HREF="JavaScript:hhobj_1.Click()"><B>InitializeCriticalSection</B></A> function. </P>

<P>A thread uses <A HREF="JavaScript:hhobj_2.Click()"><B>EnterCriticalSection</B></A> to request ownership of a critical section and it uses the <A HREF="JavaScript:hhobj_3.Click()"><B>LeaveCriticalSection</B></A> function to release ownership. If the critical section object is currently owned by another thread, <B>EnterCriticalSection</B> waits indefinitely for ownership. In contrast, when a mutex object is used for mutual exclusion, the <A HREF="procs_3z77.htm">wait functions</A> accept a specified time-out interval. </P>

<P>Once a thread owns a critical section, it can make additional calls to <B>EnterCriticalSection</B> without blocking its execution. This prevents a thread from deadlocking itself while waiting for a critical section that it already owns. To release its ownership, the thread must call <B>LeaveCriticalSection</B> once for each time that it entered the critical section.</P>

<P>Any thread of the process can use the <A HREF="JavaScript:hhobj_4.Click()"><B>DeleteCriticalSection</B></A> function to release the system resources that were allocated when the critical section object was initialized. After this function has been called, the critical section object can no longer be used for synchronization. </P>

<P>When a critical section object is owned, the only other threads affected are those waiting for ownership in a call to <A HREF="JavaScript:hhobj_5.Click()"><B>EnterCriticalSection</B></A>. Threads that are not waiting are free to continue running. </P>

<P>The following code example shows how a thread initializes, enters, and leaves a critical section. As with the mutex example described earlier, this example uses the <B>try</B>-<B>finally</B> structured exception-handling syntax to ensure that the thread calls the <A HREF="JavaScript:hhobj_6.Click()"><B>LeaveCriticalSection</B></A> function to release its ownership of the critical section object. </P>

<PRE><CODE>CRITICAL_SECTION GlobalCriticalSection; 

InitializeCriticalSection(&amp;GlobalCriticalSection); 

 
{
      EnterCriticalSection(&amp;GlobalCriticalSection); 
                       // Access the shared resource.
}
finally 
{
                           // Release ownership of the critical section.
      LeaveCriticalSection(&amp;GlobalCriticalSection);
}
</CODE></PRE>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Thread Local Storage</TITLE>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<TABLE ALIGN=right WIDTH=0 BORDER=0><TR><TD>
<OBJECT ID="hhobj_1" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_TlsAlloc">
</OBJECT>
<OBJECT ID="hhobj_2" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_TlsFree">
</OBJECT>
<OBJECT ID="hhobj_3" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_TlsGetValue">
</OBJECT>
<OBJECT ID="hhobj_4" TYPE="application/x-oleobject" CLASSID="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
	<PARAM NAME="Command" VALUE="ALink,MENU">
	<PARAM NAME="DefaultTopic" VALUE="../../notopic_0pk4.htm">
	<PARAM NAME="Item1" VALUE="">
	<PARAM NAME="Item2" VALUE="_win32_TlsSetValue">
</OBJECT>
</TD></TR></TABLE>



<H1>

<A NAME="_thread_local_storage"></A>Thread Local Storage </H1>

<P>It is often necessary for every thread of a process to have its own copy of read/write data. To provide this data, Windows CE supports thread local storage (TLS). TLS enables each thread to allocate the objects it owns in memory and to manipulate thread-specific data. You can use the <B>TlsAlloc</B>, <B>TlsSetValue</B>, <B>TlsGetValue</B>, and <B>TlsFree</B> functions to allocate and free memory for thread storage.</P>

<P>When a dynamic-link library (DLL) attaches to a process, the DLL uses <B>TlsAlloc</B> to allocate a TLS index. The DLL then allocates dynamic storage and uses the TLS index in a call to <B>TlsSetValue</B> to store the address in the TLS slot. The TLS index is stored in a global or static variable of the DLL. Each time the DLL attaches to a new thread of the process, the DLL allocates dynamic storage for the new thread and uses the TLS index in a call to <B>TlsSetValue</B> to store the address in the TLS slot. </P>

<P>Each time an initialized thread makes a DLL call that requires the data in its dynamic storage, the DLL uses the TLS index in a call to <B>TlsGetValue</B> to retrieve the address of the dynamic storage for that thread. </P>

<P>TLS functions supported by Windows CE are described in the following table.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TH align=left width=25%>Function</TH>
<TH align=left width=75%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=25%><A HREF="JavaScript:hhobj_1.Click()"><B>TlsAlloc</B></A> </TD>
<TD width=75%>Allocates a TLS index. The index is available to any thread in the process for storing and retrieving thread-specific values.</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><A HREF="JavaScript:hhobj_2.Click()"><B>TlsFree</B></A> </TD>
<TD width=75%>Releases the TLS index, making it available for reuse.</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><A HREF="JavaScript:hhobj_3.Click()"><B>TlsGetValue</B></A> </TD>
<TD width=75%>Retrieves the value pointed to by the TLS index.</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><A HREF="JavaScript:hhobj_4.Click()"><B>TlsSetValue</B></A> </TD>
<TD width=75%>Stores a value in the slot pointed to by the TLS index.</TD>
</TR>
</TABLE><BR>

<P>Use the following criteria to help you decide which memory allocation method is best in particular situations: 

<UL>
	<LI>For a single, large data item with multiple pages, use <B>VirtualAlloc</B>.</LI>

	<LI>For a set of small data items that have the same lifetime, allocate memory from a separate heap created by <B>HeapCreate</B>.</LI>

	<LI>For data items that exist for the lifetime of the application, put the items in the R/W static data section, if there is sufficient space.</LI>

	<LI>For small items that exist for the scope of a function, allocate memory from the stack. </LI>

	<LI>For small items with random, overlapping lifetimes, allocate memory from the default heap. Try to keep the total size of the heap consistent and predictable. </LI>
</UL>

</BODY>
</HTML>

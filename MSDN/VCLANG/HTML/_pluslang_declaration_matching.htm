<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaration Matching</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_declaration_matching"></a><sup></sup>Declaration Matching</h1>
<p>
Any two function declarations of the same name in the same scope can refer to the same function, or to two discrete functions that are overloaded. If the argument lists of the declarations contain arguments of equivalent types (as described in the previous section), the function declarations refer to the same function. Otherwise, they refer to two different functions that are selected using overloading.</p>
<p>
Class scope is strictly observed; therefore, a function declared in a base class is not in the same scope as a function declared in a derived class. If a function in a derived class is declared with the same name as a function in the base class, the derived-class function hides the base-class function instead of causing overloading.</p>
<p>
Block scope is strictly observed; therefore, a function declared in file scope is not in the same scope as a function declared locally. If a locally declared function has the same name as a function declared in file scope, the locally declared function hides the file-scoped function instead of causing overloading. For example:</p>
<pre><code>#include &lt;iostream.h&gt;

void func( int i )
{
 &nbsp;&nbsp; cout &lt;&lt; "Called file-scoped func : " &lt;&lt; i &lt;&lt; endl;
}

void func( char *sz )
{
 &nbsp;&nbsp; cout &lt;&lt; "Called locally declared func : " &lt;&lt; sz &lt;&lt; endl;
}

void main()
{
 &nbsp;&nbsp; // Declare func local to main.
 &nbsp;&nbsp; extern void func( char *sz );

 &nbsp;&nbsp; func( 3 );&nbsp;&nbsp;&nbsp; // Error. func( int ) is hidden.
 &nbsp;&nbsp; func( "s" );
}
</code></pre>
<p>
The preceding code shows two definitions from the function <code>func</code>. The definition that takes an argument of type <code>char *</code> is local to <code>main</code> because of the <code>extern</code> statement. Therefore, the definition that takes an argument of type <code>int</code> is hidden, and the first call to <code>func</code> is in error.</p>
<p>
For overloaded member functions, different versions of the function can be given different access privileges. They are still considered to be in the scope of the enclosing class and thus are overloaded functions. Consider the following code, in which the member function <code>Deposit</code> is overloaded; one version is public, the other, private:</p>
<pre><code>class Account
{
public:
 &nbsp;&nbsp; Account();
 &nbsp;&nbsp; double Deposit( double dAmount, char *szPassword );
private:
 &nbsp;&nbsp; double Deposit( double dAmount );
 &nbsp;&nbsp; int&nbsp;&nbsp;&nbsp; Validate( char *szPassword );
};
</code></pre>
<p>
The intent of the preceding code is to provide an <code>Account</code> class in which a correct password is required to perform deposits. This is accomplished using overloading. The following code shows how this class can be used and also shows an erroneous call to the private member, <code>Deposit</code>:</p>
<pre><code>void main()
{
 &nbsp;&nbsp; // Allocate a new object of type Account.
 &nbsp;&nbsp; Account *pAcct = new Account;

 &nbsp;&nbsp; // Deposit $57.22. Error: calls a private function.
 &nbsp;&nbsp; pAcct-&gt;Deposit( 57.22 );

 &nbsp;&nbsp; // Deposit $57.22 and supply a password. OK: calls a
 &nbsp;&nbsp; //&nbsp; public function.
 &nbsp;&nbsp; pAcct-&gt;Deposit( 52.77, "pswd" );
}

double Account::Deposit( double dAmount, char *szPassword )
{
 &nbsp;&nbsp; if( Validate( szPassword ) )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Deposit( dAmount );
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0.0;
}
</code></pre>
<p>
Note that the call to <code>Deposit</code> in <code>Account::Deposit</code> calls the private member function. This call is correct because <code>Account::Deposit</code> is a member function and therefore has access to the private members of the class.</p>
</font></BODY>
</HTML>

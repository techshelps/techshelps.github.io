<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>accumulate, copy, vector::push_back(STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_accum_copy_vectorCCpush_back">accumulate, copy, vector::push_back(STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>accumulate, copy,</code> and <code>vector::push_back</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;numeric&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator, class _TYPE&gt; inline
      _TYPE accumulate(InputIterator first, InputIterator last, _TYPE init)

template&lt;class InputIterator, class _TYPE, class BinaryOperator&gt; inline
     _TYPE accumulate(InputIterator first, InputIterator last, _TYPE init, BinaryOperator binary_op)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The accumulate function initializes an accumulator acc with an initial value init and then modifies it with acc = acc + *i or acc = binary_op(acc,*i) for every iterator i in the range [first, last) in order.  Normally, the accumulate function is used to sum the numeric elements of a vector. However, it can also be used to do other useful work such as concatenating a vector of strings.  </p>
<p><b>Sample Code: </b></p>
<pre><code>///////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// accumulate.cpp : Demonstrates the use of accumulate()
//
// Description of accumulate(first,last,init)
//                accumulate(first,last,init,binary_op):
//
//    Initializes the accumulator acc with the initial value init
//        acc = init
//    and then modifies it with
//        acc  =  acc + *i
//    or
//        acc = binary_op(acc, *i)
//    for every iterator i in the range [first, last) in order.
///////////////////////////////////////////////////////////////////////

// turn off warning about symbols too long for debugger
#pragma warning (disable : 4786)

#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

using namespace std;


typedef vector &lt; float &gt; FloatArray;
typedef vector &lt; string &gt; StringArray;
typedef ostream_iterator &lt;float, char, char_traits &lt;char&gt; &gt; FloatOstreamIt;

void main ()
{
    // a vector of floats
    FloatArray rgFA;

    // an ostream iterator that outputs a float to cout terminated
    // by a space
    FloatOstreamIt OstreamIt(cout," ");

    // Initialize the array to 1,1/2,1/3,...
    for (int i=0; i&lt;10; i++) rgFA.push_back(1.0f/(i+1));

    // Print the array
    copy(rgFA.begin(),rgFA.end(),OstreamIt);
    cout &lt;&lt; endl;

    // Sum the array
    cout &lt;&lt; "The sum of 1 + 1/2 + 1/3 + ... + 1/10 is "
         &lt;&lt; accumulate(rgFA.begin(),rgFA.end(),0.0f)
         &lt;&lt; endl;

    // Compute the product of the array
    cout &lt;&lt; "The product of 1 * 1/2 * 1/3 * ... * 1/10 is "
         &lt;&lt; accumulate(rgFA.begin(),rgFA.end(),1.0f,multiplies&lt;float&gt;())
         &lt;&lt; endl;

    // Initialize array of strings
    StringArray rgs;
    rgs.push_back("This ");
    rgs.push_back("is ");
    rgs.push_back("one ");
    rgs.push_back("sentence. ");

    // Concatenate the strings in the array and print the sentence
    cout &lt;&lt; "The concatenated vector of strings: "
         &lt;&lt; accumulate(rgs.begin(),rgs.end(),string(""))
         &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>1 0.5 0.333333 0.25 0.2 0.166667 0.142857 0.125 0.111111 0.1
The sum of 1 + 1/2 + 1/3 + ... + 1/10 is 2.92897
The product of 1 * 1/2 * 1/3 * ... * 1/10 is 2.75573e-007
The concatenated vector of strings: This is one sentence.
</code></pre>

</body>
</html>

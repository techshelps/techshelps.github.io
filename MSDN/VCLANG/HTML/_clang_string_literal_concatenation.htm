<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>String Literal Concatenation</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_string_literal_concatenation"></a><sup></sup>String Literal Concatenation</h1>
<p>
To form string literals that take up more than one line, you can concatenate the two strings. To do this, type a backslash, then press the RETURN key. The backslash causes the compiler to ignore the following newline character. For example, the string literal</p>
<pre><code>"Long strings can be bro\
ken into two or more pieces."
</code></pre>
<p>
is identical to the string</p>
<pre><code>"Long strings can be broken into two or more pieces."
</code></pre>
<p>
String concatenation can be used anywhere you might previously have used a backslash followed by a newline character to enter strings longer than one line. </p>
<p>
To force a new line within a string literal, enter the newline escape sequence (<b>\n</b>) at the point in the string where you want the line broken, as follows:</p>
<pre><code>"Enter a number between 1 and 100\nOr press Return"
</code></pre>
<p>
Because strings can start in any column of the source code and long strings can be continued in any column of a succeeding line, you can position strings to enhance source-code readability. In either case, their on-screen representation when output is unaffected. For example:</p>
<pre><code>printf ( "This is the first half of the string, "
       "this is the second half ") ;
</code></pre>
<p>
As long as each part of the string is enclosed in double quotation marks, the parts are concatenated and output as a single string. This concatenation occurs according to the sequence of events during compilation specified by <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_Phases_of_Translation">
</object><a href=JavaScript:alink_1.Click()>translation phases</a>. </p>
<pre><code>"This is the first half of the string, this is the second half"
</code></pre>
<p>
A string pointer, initialized as two distinct string literals separated only by white space, is stored as a single string (pointers are discussed in <a href="_clang_pointer_declarations.htm">Pointer Declarations</a> in Chapter 3). When properly referenced, as in the following example, the result is identical to the previous example:</p>
<pre><code>char *string = "This is the first half of the string, "
       &nbsp; "this is the second half";

printf( "%s" , string ) ;
</code></pre>
<p>
In translation phase 6, the multibyte-character sequences specified by any sequence of adjacent string literals or adjacent wide-string literals are concatenated into a single multibyte-character sequence. Therefore, do not design programs to allow modification of string literals during execution. The ANSI C standard specifies that the result of modifying a string is undefined. </p>
</font></BODY>
</HTML>

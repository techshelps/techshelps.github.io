<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initialization of Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_initialization_of_objects"></a><sup></sup>Initialization of Objects</h1>
<p>
A local automatic object or variable is initialized every time the flow of control reaches its definition. A local static object or variable is initialized the first time the flow of control reaches its definition. Consider the following example, which defines a class that logs initialization and destruction of objects and then defines three objects, <code>I1</code>, <code>I2</code>, and <code>I3</code>:</p>
<pre><code>#include &lt;iostream.h&gt;
#include &lt;string.h&gt;

// Define a class that logs initializations and destructions.
class InitDemo
{
public:
 &nbsp;&nbsp; InitDemo( const char *szWhat );
 &nbsp;&nbsp; ~InitDemo();
private:
 &nbsp;&nbsp; char *szObjName;
};

// Constructor for class InitDemo
InitDemo::InitDemo( const char *szWhat )
{
 &nbsp;&nbsp; if( szWhat != 0 &amp;&amp; strlen( szWhat ) &gt; 0 )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Allocate storage for szObjName, then copy
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; initializer szWhat into szObjName.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szObjName = new char[ strlen( szWhat ) + 1 ];
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy( szObjName, szWhat );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "Initializing: " &lt;&lt; szObjName &lt;&lt; "\n";
 &nbsp;&nbsp; }
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szObjName = 0;
}

// Destructor for InitDemo
InitDemo::~InitDemo()
{
 &nbsp;&nbsp; if( szObjName != 0 )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "Destroying: " &lt;&lt; szObjName &lt;&lt; "\n";
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete szObjName;
 &nbsp;&nbsp; }
}

// Enter main function
void main()
{
 &nbsp;&nbsp; InitDemo I1( "Auto I1" );
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "In block.\n";
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitDemo I2( "Auto I2" );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static InitDemo I3( "Static I3" );
 &nbsp;&nbsp; }
 &nbsp;&nbsp; cout &lt;&lt; "Exited block.\n";
}
</code></pre>
<p>
The preceding code demonstrates how and when the objects <code>I1</code>, <code>I2</code>, and <code>I3</code> are initialized and when they are destroyed. The output from the program is:</p>
<pre><code>Initializing: Auto I1
In block.
Initializing: Auto I2
Initializing: Static I3
Destroying: Auto I2
Exited block.
Destroying: Auto I1
Destroying: Static I3
</code></pre>
<p>
There are several points to note about the program.</p>
<p>
First, <code>I1</code> and <code>I2</code> are automatically destroyed when the flow of control exits the block in which they are defined.</p>
<p>
Second, in C++, it is not necessary to declare objects or variables at the beginning of a block. Furthermore, these objects are initialized only when the flow of control reaches their definitions. (<code>I2</code> and <code>I3</code> are examples of such definitions.) The output shows exactly when they are initialized.</p>
<p>
Finally, static local variables such as <code>I3</code> retain their values for the duration of the program but are destroyed as the program terminates.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ios::flags</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_ios.3a3a.flags"></a><sup></sup>ios::flags</h1>
<p>
<b>long flags( long </b><i>lFlags </i><b>);</b></p>
<p>
<b>long flags() const;</b></p>
<p class=label>
<b>Return Value</b></p>
<p>
The first overloaded <b>flags</b> function sets the stream’s internal flags variable to <i>lFlags</i> and returns the previous value.</p>
<p>
The second function returns the stream’s current flags.</p>
<p class=label>
<b>Parameter</b></p>
<p class=dt>
<i>lFlags</i></p>
<p class=indent>
The new format flag values for the stream. The values are specified by the following bit masks (<b>ios</b> enumerators) that can be combined using the bitwise OR ( <b>|</b> ) operator. The <i>lFlags</i> parameter must have one of the following values:
<ul type=disc>
<li>
<b>ios::skipws</b>&nbsp;&nbsp;&nbsp;Skip white space on input.<br><br></li>
<li>
<b>ios::left</b>&nbsp;&nbsp;&nbsp;Left-align values; pad on the right with the fill character.<br><br></li>
<li>
<b>ios::right</b>&nbsp;&nbsp;&nbsp;Right-align values; pad on the left with the fill character (default alignment).<br><br></li>
<li>
<b>ios::internal</b>&nbsp;&nbsp;&nbsp;Add fill characters after any leading sign or base indication, but before the value.<br><br></li>
<li>
<b>ios::dec</b>&nbsp;&nbsp;&nbsp;Format numeric values as base 10 (decimal) (default radix).<br><br></li>
<li>
<b>ios::oct</b>&nbsp;&nbsp;&nbsp;Format numeric values as base 8 (octal).<br><br></li>
<li>
<b>ios::hex</b>&nbsp;&nbsp;&nbsp;Format numeric values as base 16 (hexadecimal).<br><br></li>
<li>
<b>ios::showbase</b>&nbsp;&nbsp;&nbsp;Display numeric constants in a format that can be read by the C++ compiler.<br><br></li>
<li>
<b>ios::showpoint</b>&nbsp;&nbsp;&nbsp;Show decimal point and trailing zeros for floating-point values.<br><br></li>
<li>
<b>ios::uppercase</b>&nbsp;&nbsp;&nbsp;Display uppercase A through F for hexadecimal values and E for scientific values.<br><br></li>
<li>
<b>ios::showpos</b>&nbsp;&nbsp;&nbsp;Show plus signs (+) for positive values.<br><br></li>
<li>
<a name="_iostream_ios.3a3a.scientific"></a><b>ios::scientific</b>&nbsp;&nbsp;&nbsp;Display floating-point numbers in scientific format.<br><br></li>
<li>
<b>ios::fixed</b>&nbsp;&nbsp;&nbsp;Display floating-point numbers in fixed format.<br><br></li>
<li>
<b>ios::unitbuf</b>&nbsp;&nbsp;&nbsp;Cause <b>ostream::osfx</b> to flush the stream after each insertion. By default, <b>cerr</b> is unit buffered.<br><br></li>
<li>
<b>ios::stdio</b>&nbsp;&nbsp;&nbsp;Cause <b>ostream::osfx</b> to flush stdout and stderr after each insertion.</li>
</ul>

<p>
<a href="_iostream_ios.htm">ios Overview</a>  |&nbsp; <a href="_iostream_iostream_class_list.htm#_iostream_abstract_stream_base_class">Abstract Stream Base Class</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_iostream_ios.3a3a.setf.htm">ios::setf</a>, <a href="_iostream_ios.3a3a.unsetf.htm">ios::unsetf</a>, <a href="_iostream_setiosflags.htm">ios setiosflags manipulator</a>, <a href="_iostream_resetiosflags.htm">ios resetiosflags manipulator</a>, <a href="_iostream_ios.3a3a.adjustfield.htm">ios::adjustfield</a>, <a href="_iostream_ios.3a3a.basefield.htm">ios::basefield</a>, <a href="_iostream_ios.3a3a.floatfield.htm">ios::floatfield</a></p>
</font></BODY>
</HTML>

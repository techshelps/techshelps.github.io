<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Restrictions on Functions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_restrictions_on_functions"></a><sup></sup>Restrictions on Functions</h1>
<p>
Functions cannot return arrays or functions. They can, however, return references or pointers to arrays or functions. Another way to return an array is to declare a structure with only that array as a member:</p>
<pre><code>struct Address
{ char szAddress[31]; };

Address GetAddress();
</code></pre>
<p>
It is illegal to define a type in either the return-type portion of a function declaration or in the declaration of any argument to a function. The following legal C code is illegal in C++:</p>
<pre><code>enum Weather { Cloudy, Rainy, Sunny } GetWeather( Date Today )
</code></pre>
<p>
The preceding code is disallowed because the type <code>Weather</code> has function scope local to <code>GetWeather</code> and the return value cannot be properly used. Because arguments to functions have function scope, declarations made within the argument list would have the same problem if not allowed.</p>
<p>
C++ does not support arrays of functions. However, arrays of pointers to functions can be useful. In parsing a Pascal-like language, the code is often separated into a lexical analyzer that parses tokens and a parser that attaches semantics to the tokens. If the analyzer returns a particular ordinal value for each token, code can be written to perform appropriate processing as shown in this example:</p>
<pre><code>int ProcessFORToken( char *szText );
int ProcessWHILEToken( char *szText );
int ProcessBEGINToken( char *szText );
int ProcessENDToken( char *szText );
int ProcessIFToken( char *szText );
int ProcessTHENToken( char *szText );
int ProcessELSEToken( char *szText );
int (*ProcessToken[])( char * ) = {
 &nbsp;&nbsp; ProcessFORToken, ProcessWHILEToken, ProcessBEGINToken,
 &nbsp;&nbsp; ProcessENDToken, ProcessIFToken, ProcessTHENToken,
 &nbsp;&nbsp; ProcessELSEToken };
const int MaxTokenID = sizeof ProcessToken / sizeof( int (*)() );

...
int DoProcessToken( int TokenID, char *szText )
{
 &nbsp;&nbsp; if( TokenID &lt; MaxTokenID )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (*ProcessToken[TokenID])( szText );
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Error( szText );
}
</code></pre>
</font></BODY>
</HTML>

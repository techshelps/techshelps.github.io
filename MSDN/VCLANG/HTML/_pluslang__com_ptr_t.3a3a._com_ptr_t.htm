<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_com_ptr_t::_com_ptr_t</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang__com_ptr_t.3a3a._com_ptr_t"></a>_com_ptr_t::_com_ptr_t</h1>
<p>
<b>Microsoft Specific </b></p>
<p>
<b>_com_ptr_t( ) throw( );</b></p>
<p>
<b>_com_ptr_t( Interface* </b><i>pInterface</i><b> ) throw( );</b></p>
<p>
<b>_com_ptr_t( Interface* </b><i>pInterface</i><b>, bool </b><i>fAddRef</i><b> ) throw( );</b></p>
<p>
<b>_com_ptr_t( int NULL ) throw( _com_error );</b></p>
<p>
<b>template&lt; &gt; _com_ptr_t( const _com_ptr_t&amp; </b><i>cp</i><b> ) throw( );</b></p>
<p>
<b>template&lt;typename _InterfacePtr&gt; _com_ptr_t( const _InterfacePtr&amp; </b><i>p</i><b> ) throw( _com_error );</b></p>
<p>
<b>template&lt; &gt; _com_ptr_t( const _variant_t&amp; </b><i>varSrc</i><b> ) throw( _com_error );</b></p>
<p>
<b>explicit _com_ptr_t( const CLSID&amp; </b><i>clsid</i><b>, DWORD </b><i>dwClsContext</i><b> = CLSCTX_ALL) throw( _com_error );</b></p>
<p>
<b>explicit _com_ptr_t( LPOLESTR </b><i>lpOleStr</i><b>, DWORD </b><i>dwClsContext</i><b> = CLSCTX_ALL) throw( _com_error );</b></p>
<p>
<b>explicit _com_ptr_t( LPCSTR </b><i>lpcStr</i><b>, DWORD </b><i>dwClsContext</i><b> = CLSCTX_ALL ) throw( _com_error );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pInterface</i></p>
<p class=indent>
a raw interface pointer</p>
<p class=dt>
<i>fAddRef</i></p>
<p class=indent>
if <b>true</b>, <b>AddRef</b> is called to increment the reference count of the encapsulated interface pointer</p>
<p class=dt>
<i>cp</i></p>
<p class=indent>
a <b>_com_ptr_t</b> object</p>
<p class=dt>
<i>p</i></p>
<p class=indent>
a raw interface pointer, its type being different from the smart pointer type of this <b>_com_ptr_t</b> object</p>
<p class=dt>
<i>varSrc</i></p>
<p class=indent>
a <b>_variant_t</b> object</p>
<p class=dt>
<i>clsid</i></p>
<p class=indent>
the <b>CLSID</b> of a coclass</p>
<p class=dt>
<i>dwClsContext</i></p>
<p class=indent>
context for running executable code</p>
<p class=dt>
<i>lpOleStr</i></p>
<p class=indent>
a Unicode string that holds either a <b>CLSID</b> (starting with “<b>{</b>“) or a <b>ProgID</b></p>
<p class=dt>
<i>lpcStr</i></p>
<p class=indent>
a multibyte string that holds either a <b>CLSID</b> (starting with “<b>{</b>“) or a <b>ProgID</b>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Constructs a <b>_com_ptr_t</b> object.
<ul type=disc>
<li>
<b>_com_ptr_t( )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>NULL</b> smart pointer.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>pInterface</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer from a raw interface pointer of this smart pointer’s type. <b>AddRef</b> is called to increment the reference count for the encapsulated interface pointer.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>pInterface</i><b>, </b><i>fAddRef</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer from a raw interface pointer of this smart pointer’s type. If <i>fAddRef</i> is <b>true</b>, <b>AddRef</b> is called to increment the reference count for the encapsulated interface pointer. If <i>fAddRef</i> is <b>false</b>, this constructor takes ownership of the raw interface pointer without calling <b>AddRef</b>.<br><br></li>
<li>
<b>_com_ptr_t( NULL )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>NULL</b> smart pointer. The <b>NULL</b> argument must be a zero.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>cp</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer as a copy of another instance of the same smart pointer. <b>AddRef</b> is called to increment the reference count for the encapsulated interface pointer.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>p</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer from a different smart pointer type or from a different raw interface pointer. <b>QueryInterface</b> is called to find an interface pointer of this smart pointer’s type. If <b>QueryInterface</b> fails with an <b>E_NOINTERFACE</b> error, a <b>NULL</b> smart pointer is constructed. Any other error causes a <b>_com_error</b> to be raised.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>varSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer from a <b>_variant_t</b> object. The encapsulated <b>VARIANT</b> must be of type <b>VT_DISPATCH</b> or <b>VT_UNKNOWN</b>, or it can be converted into one of these two types. If <b>QueryInterface</b> fails with an <b>E_NOINTERFACE</b> error, a <b>NULL</b> smart pointer is constructed. Any other error causes a <b>_com_error</b> to be raised.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>clsid</i><b>, </b><i>dwClsContext</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer given the <b>CLSID</b> of a coclass. This function calls <b>CoCreateInstance</b>, by the member function <b>CreateInstance</b>, to create a new COM object and then queries for this smart pointer’s interface type. If <b>QueryInterface</b> fails with an <b>E_NOINTERFACE</b> error, a <b>NULL</b> smart pointer is constructed. Any other error causes a <b>_com_error</b> to be raised.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>lpOleStr</i><b>, </b><i>dwClsContext</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer given a Unicode string which holds either a <b>CLSID</b> (starting with “<b>{</b>“) or a <b>ProgID</b>. This function calls <b>CoCreateInstance</b>, by the member function <b>CreateInstance</b>, to create a new COM object and then queries for this smart pointer’s interface type. If <b>QueryInterface</b> fails with an <b>E_NOINTERFACE</b> error, a <b>NULL</b> smart pointer is constructed. Any other error causes a <b>_com_error</b> to be raised.<br><br></li>
<li>
<b>_com_ptr_t( </b><i>lpcStr</i><b>, </b><i>dwClsContext</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a smart pointer given a multibyte character string which holds either a <b>CLSID</b> (starting with “<b>{</b>“) or a <b>ProgID</b>. This function calls <b>CoCreateInstance</b>, by the member function <b>CreateInstance</b>, to create a new COM object and then queries for this smart pointer’s interface type. If <b>QueryInterface</b> fails with an <b>E_NOINTERFACE</b> error, a <b>NULL</b> smart pointer is constructed. Any other error causes a <b>_com_error</b> to be raised.</li>
</ul>
<p>
<a href="_pluslang__com_ptr_t.htm">_com_ptr_t Overview</a></p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

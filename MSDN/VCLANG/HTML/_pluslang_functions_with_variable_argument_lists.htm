<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Functions with Variable Argument Lists</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_functions_with_variable_argument_lists"></a><sup></sup>Functions with Variable Argument Lists</h1>
<p>
Functions that require variable lists are declared using the ellipsis (...) in the argument list, as described in <a href="_pluslang_variable_argument_lists.htm">Variable Argument Lists</a>. To access arguments passed to functions using this method, use the types and macros described in the STDARG.H standard include file.</p>
<p>
The following example shows how the <b>va_start</b>, <b>va_arg</b>, and <b>va_end</b> macros, along with the <b>va_list</b> type (declared in STDARG.H), work together:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;

//&nbsp; Declaration, but not definition, of ShowVar.
int ShowVar( char *szTypes, ... );

void main()
{
 &nbsp;&nbsp; ShowVar( "fcsi", 32.4f, 'a', "Test string", 4 );
}
//&nbsp; ShowVar takes a format string of the form
//&nbsp;&nbsp; "ifcs", where each character specifies the
//&nbsp;&nbsp; type of the argument in that position.
//
//&nbsp; i = int
//&nbsp; f = float
//&nbsp; c = char
//&nbsp; s = string (char *)
//
//&nbsp; Following the format specification is a list
//&nbsp;&nbsp; of n arguments, where n == strlen( szTypes ).
void ShowVar( char *szTypes, ... )
{
 &nbsp;&nbsp; va_list vl;
 &nbsp;&nbsp; int i;

 &nbsp;&nbsp; //&nbsp; szTypes is the last argument specified; all
 &nbsp;&nbsp; //&nbsp;&nbsp; others must be accessed using the variable-
 &nbsp;&nbsp; //&nbsp;&nbsp; argument macros.
 &nbsp;&nbsp; va_start( vl, szTypes );

 &nbsp;&nbsp; // Step through the list.
 &nbsp;&nbsp; for( i = 0; szTypes[i] != '\0'; ++i )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; union Printable_t
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp; i;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float&nbsp;&nbsp; f;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; c;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp; *s;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } Printable;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch( szTypes[i] )&nbsp;&nbsp;&nbsp; // Type to expect.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'i':
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Printable.i = va_arg( vl, int );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%i\n", Printable.i );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'f':
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Printable.f = va_arg( vl, float );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%f\n", Printable.f );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'c':
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Printable.c = va_arg( vl, char );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%c\n", Printable.c );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 's':
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Printable.s = va_arg( vl, char * );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%s\n", Printable.s );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; va_end( vl );
}
</code></pre>
<p>
The preceding example illustrates these important concepts:
<ul type=disc>
<li>
A list marker must be established as a variable of type <b>va_list</b> before any variable arguments are accessed. In the preceding example, the marker is called <code>vl</code>.<br><br></li>
<li>
The individual arguments are accessed using the <b>va_arg</b> macro. The <b>va_arg</b> macro needs to be told the type of argument to retrieve so it can transfer the correct number of bytes from the stack. If an incorrect type of a size different than that supplied by the calling program is specified to <b>va_arg</b>, the results are unpredictable.<br><br></li>
<li>
The result obtained using the <b>va_arg</b> macro should be explicitly cast to the desired type.<br><br></li>
<li>
The <b>va_end</b> macro must be called to terminate variable-argument processing.</li>
</ul>
</font></BODY>
</HTML>

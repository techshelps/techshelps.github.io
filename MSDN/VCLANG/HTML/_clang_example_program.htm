<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example Program</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_clang_example_program"></a><sup></sup>Example Program</h1>
<p>
The following C source program consists of two source files. It gives an overview of some of the various declarations and definitions possible in a C program. Later sections in this book describe how to write these declarations, definitions, and initializations, and how to use C keywords such as <b>static</b> and <b>extern</b>. The <b>printf</b> function is declared in the C header file STDIO.H. </p>
<p>
The <code>main</code> and <code>max</code> functions are assumed to be in separate files, and execution of the program begins with the <code>main</code> function. No explicit user functions are executed before <code>main</code>.</p>
<pre><code>/*****************************************************************
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE1.C - main function
*****************************************************************/

#define ONE&nbsp;&nbsp;&nbsp;&nbsp; 1
#define TWO&nbsp;&nbsp;&nbsp;&nbsp; 2
#define THREE&nbsp;&nbsp; 3
#include &lt;stdio.h&gt;

int a = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Defining declarations&nbsp;&nbsp;&nbsp;&nbsp; */
int b = 2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; of external variables&nbsp;&nbsp;&nbsp; */

extern int max( int a, int b );&nbsp; /* Function prototype&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */

int main()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Function definition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; for main function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; int c;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Definitions for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; int d;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; two uninitialized&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; local variables&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */

 &nbsp;&nbsp; extern int u;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Referencing declaration&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; of external variable&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; defined elsewhere&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; static int v;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Definition of variable&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; with continuous lifetime */

 &nbsp;&nbsp; int w = ONE, x = TWO, y = THREE;
 &nbsp;&nbsp; int z = 0;
 &nbsp;&nbsp; z = max( x, y );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Executable statements&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; w = max( z, w );
 &nbsp;&nbsp; printf( "%d %d\n", z, w );
 &nbsp;&nbsp; return 0;
}

/****************************************************************
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FILE2.C - definition of max function
****************************************************************/

int max( int a, int b )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Note formal parameters are&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; included in function header */
{
 &nbsp;&nbsp; if( a &gt; b )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return( a );
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return( b );
}
</code></pre>
<p>
FILE1.C contains the prototype for the <code>max</code> function. This kind of declaration is sometimes called a “forward declaration” because the function is declared before it is used. The definition for the <code>main</code> function includes calls to <code>max</code>. </p>
<p>
The lines beginning with <code>#define</code> are preprocessor directives. These directives tell the preprocessor to replace the identifiers <code>ONE</code>, <code>TWO</code>, and <code>THREE</code> with the numbers <code>1</code>, <code>2</code>, and <code>3</code>, respectively, throughout FILE1.C. However, the directives do not apply to FILE2.C, which is compiled separately and then linked with FILE1.C. The line beginning with <code>#include</code> tells the compiler to include the file STDIO.H, which contains the prototype for the <b>printf</b> function. <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_PREDIR_Preprocessor_Directives">
</object><a href=JavaScript:alink_1.Click()>Preprocessor directives</a> are explained in the <i>Preprocessor Reference</i>. </p>
<p>
FILE1.C uses defining declarations to initialize the global variables <code>a</code> and <code>b</code>. The local variables <code>c</code> and <code>d</code> are declared but not initialized. Storage is allocated for all these variables. The static and external variables, <code>u</code> and <code>v</code>, are automatically initialized to 0. Therefore only <code>a</code>, <code>b</code>, <code>u</code>, and <code>v</code> contain meaningful values when declared because they are initialized, either explicitly or implicitly. FILE2.C contains the function definition for <code>max</code>. This definition satisfies the calls to <code>max</code> in FILE1.C. </p>
<p>
The lifetime and visibility of identifiers are discussed in <a href="_clang_lifetime.2c_.scope.2c_.visibility.2c_.and_linkage.htm">Lifetime, Scope, Visibility, and Linkage</a>. For more information on functions, see Chapter 6, <a href="_clang_functions.htm">Functions</a>. </p>
</font></BODY>
</HTML>

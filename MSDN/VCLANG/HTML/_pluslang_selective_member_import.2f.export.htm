<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Selective Member Import/Export</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_selective_member_import.2f.export"></a><sup></sup>Selective Member Import/Export</h1>
<p>
Because member functions and static data within a class implicitly have external linkage, you can declare them with the <b>dllimport</b> or <b>dllexport</b> attribute, unless the entire class is exported. If the entire class is imported or exported, the explicit declaration of member functions and data as <b>dllimport</b> or <b>dllexport</b> is prohibited. If you declare a static data member within a class definition as <b>dllexport</b>, a definition must occur somewhere within the same program (as with nonclass external linkage).</p>
<p>
Similarly, you can declare member functions with the <b>dllimport</b> or <b>dllexport</b> attributes. In this case, you must provide a <b>dllexport</b> definition somewhere within the same program.</p>
<p>
It is worthwhile to note several important points regarding selective member import and export:
<ul type=disc>
<li>
Selective member import/export is best used for providing a version of the exported class interface that is more restrictive; that is, one for which you can design a DLL that exposes fewer public and private features than the language would otherwise allow. It is also useful for fine-tuning the exportable interface: when you know that the client, by definition, is unable to access some private data, you need not export the entire class.<br><br></li>
<li>
If you export one virtual function in a class, you must export all of them, or at least provide versions that the client can use directly.<br><br></li>
<li>
If you have a class in which you are using selective member import/export with virtual functions, the functions must be in the exportable interface or defined inline (visible to the client).<br><br></li>
<li>
If you define a member as <b>dllexport</b> but do not include it in the class definition, a compiler error is generated. You must define the member in the class header.<br><br></li>
<li>
Although the definition of class members as <b>dllimport</b> or <b>dllexport</b> is permitted, you cannot override the interface specified in the class definition.<br><br></li>
<li>
If you define a member function in a place other than the body of the class definition in which you declared it, a warning is generated if the function is defined as <b>dllexport</b> or <b>dllimport</b> (if this definition differs from that specified in the class declaration). </li>
</ul>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>advance (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_advance">advance (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code> advance</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;iterator&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InIt, class Dist&gt;
     void advance(InIt&amp; it, Dist n);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
The advance function accepts two parameters:<br>
- InIt: The iterator to advance.   <br>
- Dist: The number of elements to increment the iterator by.  <br>
The advance function advances the iterator n times. If the iterator is a random-access iterator type, the function evaluates the expression as iterator += n.  Otherwise, it performs each increment by evaluating: ++iterator.  If the iterator is an input or forward iterator type, n must not be negative.  NOTE: The class/parameter names in the prototype may not match the version in the header file. Some have been modified to improve readability.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  Advance.cpp
//
// Functions:
//
//    advance()
//////////////////////////////////////////////////////////////////////

/* Compile options needed: /GX
*/
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;list&gt;
#pragma warning (disable:4786)

using namespace std ;

typedef list&lt;string&gt; STRLIST;

void main() {
    STRLIST List;
    STRLIST::iterator iList;
    STRLIST::difference_type dTheDiff;

    List.push_back("A1");
    List.push_back("B2");
    List.push_back("C3");
    List.push_back("D4");
    List.push_back("E5");
    List.push_back("F6");
    List.push_back("G7");

    // Print out the list
    iList=List.begin();
    cout &lt;&lt; "The list is: ";
    for (int i = 0; i &lt; 7 ; i++, iList++)
        cout &lt;&lt; *iList  &lt;&lt; "  ";

    // Initialize to the first element"
    iList=List.begin();
    cout &lt;&lt; "\n\nAdvance to the 3rd element." &lt;&lt; endl;
    advance(iList,2);
    cout &lt;&lt; "The element is " &lt;&lt; *iList &lt;&lt; endl;
    dTheDiff = distance( List.begin(), iList);
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>The list is: A1  B2  C3  D4  E5  F6  G7

Advance to the 3rd element.

The element is C3
</code></pre>

</body>
</html>

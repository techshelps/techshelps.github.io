<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Union Declarations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_union_declarations"></a><sup></sup>Union Declarations</h1>
<p>
A “union declaration” specifies a set of variable values and, optionally, a tag naming the union. The variable values are called “members” of the union and can have different types. Unions are similar to “variant records” in other languages.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>struct-or-union-specifier</i> :</p>
<p class=indent>
<i>struct-or-union identifier</i> <sub>opt</sub>  <b>{</b> <i>struct-declaration-list</i> <b>}</b><br>
<i>struct-or-union identifier</i></p>
<p class=dt>
<i>struct-or-union</i> :</p>
<p class=indent>
<b>struct</b><br>
<b>union</b></p>
<p class=dt>
<i>struct-declaration-list</i> :</p>
<p class=indent>
<i>struct-declaration</i><br>
<i>struct-declaration-list struct-declaration</i></p>
<p>
The union content is defined to be </p>
<p class=dt>
<i>struct-declaration</i> :</p>
<p class=indent>
<i>specifier-qualifier-list struct-declarator-list</i> <b>;</b></p>
<p class=dt>
<i>specifier-qualifier-list</i> :</p>
<p class=indent>
<i>type-specifier specifier-qualifier-list</i> <sub>opt</sub><br>
<i>type-qualifier specifier-qualifier-list</i> <sub>opt</sub> </p>
<p class=dt>
<i>struct-declarator-list</i> :</p>
<p class=indent>
<i>struct-declarator</i><br>
<i>struct-declarator-list</i> <b>,</b> <i>struct-declarator</i></p>
<p>
A variable with <b>union</b> type stores one of the values defined by that type. The same rules govern structure and union declarations. Unions can also have bit fields. </p>
<p>
Members of unions cannot have an incomplete type, type <b>void</b>, or function type. Therefore members cannot be an instance of the union but can be pointers to the union type being declared. </p>
<p>
A union type declaration is a template only. Memory is not reserved until the variable is declared. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If a union of two types is declared and one value is stored, but the union is accessed with the other type, the results are unreliable. For example, a union of <b>float</b> and <b>int</b> is declared. A <b>float</b> value is stored, but the program later accesses the value as an <b>int</b>. In such a situation, the value would depend on the internal storage of <b>float</b> values. The integer value would not be reliable. </p>
<p class=label>
<b>Examples</b></p>
<p>
The following are examples of unions:</p>
<pre><code>union sign&nbsp;&nbsp; /* A definition and a declaration */
{
 &nbsp;&nbsp; int svar;
 &nbsp;&nbsp; unsigned uvar;
} number;
</code></pre>
<p>
This example defines a union variable with <code>sign</code> type and declares a variable named <code>number</code> that has two members: <code>svar</code>, a signed integer, and <code>uvar</code>, an unsigned integer. This declaration allows the current value of <code>number</code> to be stored as either a signed or an unsigned value. The tag associated with this union type is <code>sign</code>.</p>
<pre><code>union&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Defines a two-dimensional */
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; array named screen */
 &nbsp;&nbsp; struct&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp; { 
    &nbsp; unsigned int icon : 8;&nbsp; 
    &nbsp; unsigned color : 4;
 &nbsp;&nbsp; } window1;
 &nbsp;&nbsp; int screenval;
} screen[25][80];
</code></pre>
<p>
The <code>screen</code> array contains 2,000 elements. Each element of the array is an individual union with two members: <code>window1</code> and <code>screenval</code>. The <code>window1</code> member is a structure with two bit-field members, <code>icon</code> and <code>color</code>. The <code>screenval</code> member is an <b>int</b>. At any given time, each union element holds either the <b>int</b> represented by <code>screenval</code> or the structure represented by <code>window1</code>. </p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
Nested unions can be declared anonymously when they are members of another structure or union. This is an example of a nameless union: </p>
<pre><code>struct str
{
 &nbsp;&nbsp; int a, b;
 &nbsp;&nbsp; union&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; / * Unnamed union */
 &nbsp;&nbsp; {
    &nbsp; char c[4];
    &nbsp; long l;
    &nbsp; float f;
   };
   char c_array[10];
} my_str;
.
.
.
my_str.l == 0L;&nbsp; /* A reference to a field in the my_str union */
</code></pre>
<p>
Unions are often nested within a structure that includes a field giving the type of data contained in the union at any particular time. This is an example of a declaration for such a union:</p>
<pre><code>struct x
{
 &nbsp;&nbsp; int type_tag;
 &nbsp;&nbsp; union
 &nbsp;&nbsp; {
    &nbsp; int x;
    &nbsp; float y;
 &nbsp;&nbsp; }
}
</code></pre>
<p>
See <a href="_clang_structure_and_union_members.htm">Structure and Union Members</a> for information about referencing unions.</p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

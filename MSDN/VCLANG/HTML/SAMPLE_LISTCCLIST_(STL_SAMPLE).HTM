<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>list::list (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_listCClist">list::list (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>list::list</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;list&gt;</p>
<b>Prototype:</b><br>
<pre><code>
     explicit list(const A&amp; al = A());
     explicit list(size_type n, const T&amp; v = T(), const A&amp; al = A());
     list(const list&amp; x);
     list(const_iterator first, const_iterator last, const A&amp; al = A());
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The first constructor specifies an empty initial controlled sequence. The second constructor specifies a repetition of n elements of value x. The third constructor specifies a copy of the sequence controlled by x. The last constructor specifies the sequence [first, last). All constructors store the allocator object 'al', or for the copy constructor, the return value of 'x.get_allocator()', in the data member 'allocator' and initialize the controlled sequence.</p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// list.cpp : demonstrates the different constructors for list&lt;T&gt;
//
// Functions:
//
//    list::list
//////////////////////////////////////////////////////////////////////

#include &lt;list&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef list&lt;string&gt; LISTSTR;

// Try each of the four constructors
void main()
{
    LISTSTR::iterator i;
    LISTSTR test;                   // default constructor

    test.insert(test.end(), "one");
    test.insert(test.end(), "two");

    LISTSTR test2(test);            // construct from another list
    LISTSTR test3(3, "three");      // add several &lt;T&gt;'s
    LISTSTR test4(++test3.begin(),  // add part of another list
             test3.end());

    // Print them all out

    // one two
    for (i =  test.begin(); i != test.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    // one two
    for (i =  test2.begin(); i != test2.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    // three three three
    for (i =  test3.begin(); i != test3.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    // three three
    for (i =  test4.begin(); i != test4.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>one two
one two
three three three
three three
</code></pre>

</body>
</html>

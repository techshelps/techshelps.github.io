<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>stack::top and stack::empty (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stackCCtop_empty">stack::top and stack::empty (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>stack::top</code> and <code>stack::empty</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;stack&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _C, class _A&gt;    // Function 1
     value_type&amp; stack::top();

template&lt;class _TYPE, class _C, class _A&gt;    // Function 2
     const value_type&amp; stack::top() const;

template&lt;class _TYPE, class _C, class _A&gt;    // Function 3
     bool stack::empty() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The top function returns the topmost element of the stack. You should ensure that there are one or more elements on the stack before calling the top function. The first version of the top function returns a reference to the element of the top of the stack, allowing you to modify the value. The second function returns a constant reference, ensuring that you don't accidentally modify the stack.  The empty function returns true if there are no elements in the stack. If there are one or more elements, the function will return false. You should use the empty function to verify that there are elements left on the stack before calling the top function.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StackTop&amp;Empty.cpp : Illustrates how to use the top function to
//                      retrieve the last element of the controlled
//                      sequence. It also illustrates how to use the
//                      empty function to loop though the stack.
// Functions:
//
//    top   :  returns the top element of the stack.
//    empty :  returns true if the stack has 0 elements.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;stack&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef stack&lt;int&gt; STACK_INT;

void main()
{
   STACK_INT stack1;

   cout &lt;&lt; "stack1.empty() returned " &lt;&lt;
      (stack1.empty()? "true": "false") &lt;&lt; endl;  // Function 3

   cout &lt;&lt; "stack1.push(2)" &lt;&lt; endl;
   stack1.push(2);

   if (!stack1.empty())                           // Function 3
      cout &lt;&lt; "stack1.top() returned " &lt;&lt;
      stack1.top() &lt;&lt; endl;                       // Function 1

   cout &lt;&lt; "stack1.push(5)" &lt;&lt; endl;
   stack1.push(5);

   if (!stack1.empty())                           // Function 3
      cout &lt;&lt; "stack1.top() returned " &lt;&lt;
      stack1.top() &lt;&lt; endl;                       // Function 1

   cout &lt;&lt; "stack1.push(11)" &lt;&lt; endl;
   stack1.push(11);

   if (!stack1.empty())                           // Function 3
      cout &lt;&lt; "stack1.top() returned " &lt;&lt;
      stack1.top() &lt;&lt; endl;                       // Function 1

   // Modify the top item. Set it to 6.
   if (!stack1.empty()) {                         // Function 3
      cout &lt;&lt; "stack1.top()=6;" &lt;&lt; endl;
      stack1.top()=6;                             // Function 1
   }

   // Repeat until stack is empty
   while (!stack1.empty()) {                      // Function 3
      const int&amp; t=stack1.top();                  // Function 2
      cout &lt;&lt; "stack1.top() returned " &lt;&lt; t &lt;&lt; endl;
      cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
      stack1.pop();
   }
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>stack1.empty() returned true
stack1.push(2)
stack1.top() returned 2
stack1.push(5)
stack1.top() returned 5
stack1.push(11)
stack1.top() returned 11
stack1.top()=6;
stack1.top() returned 6
stack1.pop()
stack1.top() returned 5
stack1.pop()
stack1.top() returned 2
stack1.pop()
</code></pre>

</body>
</html>

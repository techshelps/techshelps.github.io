<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>reverse_iterator</title></head>
<body bgcolor=white>

<h2><a name="reverse_iterator">reverse_iterator</a></h2>
<META NAME="MS-HKWD" CONTENT="reverse_iterator">
<pre><code>template&lt;class RanIt,
    class T = iterator_traits&lt;RanIt&gt;::value_type,
    class Ref = T&amp;,
    class Ptr = T *, class Dist = ptrdiff_t&gt;
    class <b>reverse_iterator</b>
        : public iterator&lt;random_access_iterator_tag, T, Dist&gt; {
public:
    typedef RanIt <a href="ITERATOR_reverse_iteratorCCiter_type.htm#reverse_iterator::iter_type"><b>iter_type</b></a>;
    typedef Ref <a href="ITERATOR_reverse_iteratorCCreference_type.htm#reverse_iterator::reference_type"><b>reference_type</b></a>;
    typedef Ptr <a href="ITERATOR_reverse_iteratorCCpointer_type.htm#reverse_iterator::pointer_type"><b>pointer_type</b></a>;
    <a href="ITERATOR_reverse_iteratorCCreverse_iterator.htm#reverse_iterator::reverse_iterator"><b>reverse_iterator</b></a>();
    explicit <a href="ITERATOR_reverse_iteratorCCreverse_iterator.htm#reverse_iterator::reverse_iterator"><b>reverse_iterator</b></a>(RanIt x);
    RanIt <a href="ITERATOR_reverse_iteratorCCbase.htm#reverse_iterator::base"><b>base</b></a>() const;
    Ref <a href="ITERATOR_reverse_iteratorCCoperatorX.htm#reverse_iterator::operator*"><b>operator*</b></a>() const;
    Ptr <a href="ITERATOR_reverse_iteratorCCoperatorMG.htm#reverse_iterator::operator-&gt;"><b>operator-&gt;</b></a>() const;
    reverse_iterator&amp; <a href="ITERATOR_reverse_iteratorCCoperatorPP.htm#reverse_iterator::operator++"><b>operator++</b></a>();
    reverse_iterator <a href="ITERATOR_reverse_iteratorCCoperatorPP.htm#reverse_iterator::operator++"><b>operator++</b></a>(int);
    reverse_iterator&amp; <a href="ITERATOR_reverse_iteratorCCoperatorMM.htm#reverse_iterator::operator--"><b>operator--</b></a>();
    reverse_iterator <a href="ITERATOR_reverse_iteratorCCoperatorMM.htm#reverse_iterator::operator--"><b>operator--</b></a>();
    reverse_iterator&amp; <a href="ITERATOR_reverse_iteratorCCoperatorPE.htm#reverse_iterator::operator+="><b>operator+=</b></a>(Dist n);
    reverse_iterator <a href="ITERATOR_reverse_iteratorCCoperatorP.htm#reverse_iterator::operator+"><b>operator+</b></a>(Dist n) const;
    reverse_iterator&amp; <a href="ITERATOR_reverse_iteratorCCoperatorME.htm#reverse_iterator::operator-="><b>operator-=</b></a>(Dist n);
    reverse_iterator <a href="ITERATOR_reverse_iteratorCCoperatorM.htm#reverse_iterator::operator-"><b>operator-</b></a>(Dist n) const;
    Ref <a href="ITERATOR_reverse_iteratorCCoperatorCD.htm#reverse_iterator::operator[]"><b>operator[]</b></a>(Dist n) const;
protected:
    RanIt <b>current</b>;
    };</code></pre>
<p>The template class describes an object that behaves like a random-access iterator of class 
<a href="ITERATOR_iterator.htm#iterator"><code>iterator</code></a><code>&lt;random_access_iterator_tag, </code><code><b>T</b></code><code>, </code><code><b>Dist</b></code><code>&gt;</code>. It stores a random-access iterator of type <code><b>RanIt</b></code> in the 
protected object <a name="reverse_iterator::current"><code><b>current</b></code></a>. Incrementing the object <code>x</code> of type <code>reverse_iterator</code> decrements <code>x.current</code>, and 
decrementing <code>x</code> increments <code>x.current</code>. Moreover, the expression <code>*x</code> evaluates to <code>*(current - 1)</code>, of type <code><b>Ref</b></code>. 
Typically, <code>Ref</code> is type <code>T&amp;</code>.</p>
<p>Thus, you can use an object of class <code>reverse_iterator</code> to access in reverse order a sequence that is traversed in 
order by a random-access iterator.</p>
</body>
</html>

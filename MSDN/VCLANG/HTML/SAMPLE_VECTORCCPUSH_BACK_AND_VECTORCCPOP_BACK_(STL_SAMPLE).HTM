<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>vector::push_back and vector::pop_back (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_vectorCCpush_back_pop_back">vector::push_back and vector::pop_back (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>vector::push_back</code> and <code>vector::pop_back</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;vector&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _A&gt;
     void vector::push_back(const _TYPE&amp; X);

template&lt;class _TYPE, class _A&gt;
    void vector::pop_back();
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The sample declares an empty vector of integers. It adds three integers to the vector, and then deletes one. Finally, it generates the remaining elements in the vector.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// Pushpop.cpp: Illustrates how to use the push and pop member
//              functions of the vector container.
//
// Functions:
//
//    vector::push_back - Appends (inserts) an element to the end of a
//                        vector, allocating memory for it if necessary.
//
//    vector::pop_back -  Erases the last element of the vector.
//
//    vector::begin - Returns an iterator to start traversal of the vector.
//
//    vector::end - Returns an iterator for the last element of the vector.
//
//    vector::iterator - Traverses the vector.
//
//////////////////////////////////////////////////////////////////////

// The debugger can't handle symbols more than 255 characters long.
// STL often creates symbols longer than that.
// When symbols are longer than 255 characters, the warning is disabled.
#pragma warning(disable:4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std ;

typedef vector&lt;int&gt; INTVECTOR;

void main()
{
    // Dynamically allocated vector begins with 0 elements.
    INTVECTOR theVector;

    // Iterator is used to loop through the vector.
    INTVECTOR::iterator theIterator;

    // Add one element to the end of the vector, an int with the value 42.
    // Allocate memory if necessary.
    theVector.push_back(42) ;

    // Add two more elements to the end of the vector.
    // theVector will contain [ 42, 1, 109 ].
    theVector.push_back(1) ;
    theVector.push_back(109) ;

    // Erase last element in vector.
    theVector.pop_back();

    // Print contents of theVector. Shows [ 42, 1 ]
    cout &lt;&lt; "theVector [ " ;
    for (theIterator = theVector.begin(); theIterator != theVector.end();
         theIterator++)
    {
        cout &lt;&lt; *theIterator;
        if (theIterator != theVector.end()-1) cout &lt;&lt; ", ";
                                             
    }
    cout &lt;&lt; " ]" &lt;&lt; endl ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>theVector [ 42, 1 ]
</code></pre>

</body>
</html>

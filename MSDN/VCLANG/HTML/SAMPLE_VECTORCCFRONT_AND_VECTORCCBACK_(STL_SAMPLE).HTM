<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>vector::front and vector::back (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_vectorCCfront_back">vector::front and vector::back (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>vector::front</code> and <code>vector::back</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;vector&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _A&gt;
    reference vector::front();

template&lt;class _TYPE, class _A&gt;
    reference vector::back();
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The sample declares an empty vector of integers with the members [100, 200, 300, 400]. It displays the first element of the vector using vector::front to obtain it. It displays the last element of the vector using vector::back to obtain it. It displays the number of elements of the vector using vector::size.  The sample erases the last element of the vector using vector::end()-1, and then displays the new last element using vector::back. It erases the first element of the vector using vector::begin, and then displays the new first element using vector::front.  Finally, the sample displays the number of elements remaining in the vector using vector::size.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
//    front.cpp: Illustrates the vector::front and vector::back methods.
//
// Functions:
//
//    vector::front - Returns reference to first element of vector.
//
//    vector::back - Returns reference to last element of vector.
//
//    vector::push_back - Appends (inserts) an element to the end of a
//                        vector, allocating memory for it if necessary.
//
//    vector::size - Returns number of elements in the vector.
//
//    vector::begin - Returns an iterator to start traversal of the vector.
//
//    vector::end - Returns an iterator for the last element of the vector.
//
//    vector::erase - Deletes elements from a vector (single &amp; range).
//
//////////////////////////////////////////////////////////////////////

// The debugger can't handle symbols more than 255 characters long.
// STL often creates symbols longer than that.
// When symbols are longer than 255 characters, the warning is issued.
#pragma warning(disable:4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std ;

typedef vector&lt;int&gt; INTVECTOR;

const ARRAY_SIZE = 4;

void main()
{
    // Dynamically allocated vector begins with 0 elements.
    INTVECTOR theVector;

    // Intialize the array to contain the members [100, 200, 300, 400]
    for (int cEachItem = 0; cEachItem &lt; ARRAY_SIZE; cEachItem++)
        theVector.push_back((cEachItem + 1) * 100);

    cout &lt;&lt; "First element: " &lt;&lt; theVector.front() &lt;&lt; endl;
    cout &lt;&lt; "Last element: " &lt;&lt; theVector.back() &lt;&lt; endl;
    cout &lt;&lt; "Elements in vector: " &lt;&lt; theVector.size() &lt;&lt; endl;

    // Delete the last element of the vector. Remember that the vector
    // is 0-based, so theVector.end() actually points 1 element beyond
    // the end.
    theVector.erase(theVector.end() - 1);

    cout &lt;&lt; endl &lt;&lt; "After erasing last element, new last element is: "
         &lt;&lt; theVector.back() &lt;&lt; endl;

    // Delete the first element of the vector.
    theVector.erase(theVector.begin());

    cout &lt;&lt; "After erasing first element, new first element is: "
         &lt;&lt; theVector.front() &lt;&lt; endl;

    cout &lt;&lt; "Elements in vector: " &lt;&lt; theVector.size() &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
First element: 100
Last element: 400
Elements in vector: 4

After erasing last element, new last element is: 300
After erasing first element, new first element is: 200
Elements in vector: 2
</code></pre>

</body>
</html>

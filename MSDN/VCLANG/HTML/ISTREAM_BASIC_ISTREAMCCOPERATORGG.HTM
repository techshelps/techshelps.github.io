<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_istream::operator&gt;&gt;</title></head>
<body bgcolor=white>

<h3><a name="basic_istream::operator&gt;&gt;">basic_istream::operator&gt;&gt;</a></h3>
<META NAME="MS-HKWD" CONTENT="operator>>">
<pre><code>basic_istream&amp; <b>operator&gt;&gt;</b>(
    basic_istream&amp; (*pf)(basic_istream&amp;));
basic_istream&amp; <b>operator&gt;&gt;</b>(
    basic_ios&lt;E, T&gt;&amp; (*pf)(basic_ios&lt;E, T&gt;&amp;));
basic_istream&amp; <b>operator&gt;&gt;</b>(
    ios_base&lt;E, T&gt;&amp; (*pf)(ios_base&lt;E, T&gt;&amp;));
basic_istream&amp; <b>operator&gt;&gt;</b>(
    basic_streambuf&lt;E, T&gt; *sb);
basic_istream&amp; <b>operator&gt;&gt;</b>(bool&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(short&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(unsigned short&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(int&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(unsigned int&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(long&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(unsigned long&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(void *&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(float&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(double&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(long double&amp; n);</code></pre>
<p>The first member function ensures that an expression of the form <code>istr &gt;&gt;: ws</code> calls <a href="ISTREAM_ws.htm#ws"><code>ws</code></a><code>(istr)</code>, then returns <code>*this</code>. 
The second and third functions ensure that other <a href="IOS.htm#manipulators">manipulators</a>, such as <a href="IOS_hex.htm#hex"><code>hex</code></a>, behave similarly. The remaining functions 
constitute the <a href="ISTREAM_basic_istream.htm#formatted input functions">formatted input functions</a>.</p>
<p>The function:</p>
<pre><code>basic_istream&amp; <b>operator&gt;&gt;</b>(
    basic_streambuf&lt;E, T&gt; *sb);</code></pre>
<p>extracts elements, if <code>sb</code> is not a null pointer, and inserts them into <code>sb</code>. Extraction stops on end-of-file. It also stops, 
without extracting the element in question, if an insertion fails or throws an exception (which is caught but not rethrown). 
If the function extracts no elements, it calls <a href="IOS_basic_iosCCsetstate.htm#basic_ios::setstate"><code>setstate</code></a><code>(failbit)</code>. In any case, the function returns <code>*this</code>.</p>
<p>The function:</p>
<pre><code>basic_istream&amp; <b>operator&gt;&gt;</b>(bool&amp; n);</code></pre>
<p>extracts a field and converts it to a Boolean value by calling <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt;num_get&lt;E, InIt&gt;(</code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). 
</code><a href="LOCALE2_num_getCCget.htm#num_get::get"><code>get</code></a><code>(InIt( </code><a href="IOS_basic_iosCCrdbuf.htm#basic_ios::rdbuf"><code>rdbuf</code></a><code>()), Init(0), *this, getloc(), n)</code>. Here, <code>InIt</code> is defined as 
<a href="ITERATOR_istreambuf_iterator.htm#istreambuf_iterator"><code>istreambuf_iterator</code></a><code>&lt;E, T&gt;</code>. The function returns <code>*this</code>.</p>
<p>The functions:</p>
<pre><code>basic_istream&amp; <b>operator&gt;&gt;</b>(short&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(unsigned short&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(int&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(unsigned int&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(long&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(unsigned long&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(void *&amp; n);</code></pre>
<p>each extract a field and convert it to a numeric value by calling <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt;num_get&lt;E, InIt&gt;(</code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). 
</code><a href="LOCALE2_num_getCCget.htm#num_get::get"><code>get</code></a><code>(InIt( </code><a href="IOS_basic_iosCCrdbuf.htm#basic_ios::rdbuf"><code>rdbuf</code></a><code>()), Init(0), *this, getloc(), x)</code>. Here, <code>InIt</code> is defined as 
<a href="ITERATOR_istreambuf_iterator.htm#istreambuf_iterator"><code>istreambuf_iterator</code></a><code>&lt;E, T&gt;</code>, and <code>x</code> has type <i>long,</i> <i>unsigned long,</i> or <i>void *</i> as needed. If the converted value 
cannot be represented as the type of <code>n</code>, the function calls <a href="IOS_basic_iosCCsetstate.htm#basic_ios::setstate"><code>setstate</code></a><code>(failbit)</code>. In any case, it returns <code>*this</code>.</p>
<p>The functions:</p>
<pre><code>basic_istream&amp; <b>operator&gt;&gt;</b>(float&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(double&amp; n);
basic_istream&amp; <b>operator&gt;&gt;</b>(long double&amp; n);</code></pre>
<p>each extract a field and convert it to a numeric value by calling <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt;num_get&lt;E, InIt&gt;(</code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). 
</code><a href="LOCALE2_num_getCCget.htm#num_get::get"><code>get</code></a><code>(InIt( </code><a href="IOS_basic_iosCCrdbuf.htm#basic_ios::rdbuf"><code>rdbuf</code></a><code>()), Init(0), *this, getloc(), x)</code>. Here, <code>InIt</code> is defined as 
<a href="ITERATOR_istreambuf_iterator.htm#istreambuf_iterator"><code>istreambuf_iterator</code></a><code>&lt;E, T&gt;</code>, and <code>x</code> has type <i>double</i> or <i>long double</i> as needed. If the converted value cannot be 
represented as the type of <code>n</code>, the function calls <a href="IOS_basic_iosCCsetstate.htm#basic_ios::setstate"><code>setstate</code></a><code>(failbit)</code>. In any case, it returns <code>*this</code>.</p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Nested Type Names</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_nested_type_names"></a><sup></sup>Nested Type Names</h1>
<p>
Microsoft C++ supports declaration of nested types — both named and anonymous.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>qualified-type-name</i> :</p>
<p class=indent>
<i>typedef-name</i><br>
<i>class-name</i>  <b>::</b>  <i>qualified-type-name</i></p>
<p class=dt>
<i>complete-class-name</i> :</p>
<p class=indent>
<i>qualified-class-name</i><br>
<b>::</b>  <i>qualified-class-name</i></p>
<p class=dt>
<i>qualified-class-name</i> :</p>
<p class=indent>
<i>class-name</i><br>
<i>class-name</i>  <b>::</b>  <i>qualified-class-name</i></p>
<p>
In some programming situations, it makes sense to define nested types. These types are visible only to member functions of the class type in which they are defined. They can also be made visible by constructing a qualified type name using the scope-resolution operator (<b>::</b>).</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;One commonly used class hierarchy that employs nested types is iostream. In the iostream header files, the definition of class <b>ios</b> includes a series of enumerated types, which are packaged for use only with the iostream library.</p>
<p>
The following example defines nested classes:</p>
<pre><code>class WinSystem
{
public:
 &nbsp;&nbsp; class Window
 &nbsp;&nbsp; {
 &nbsp;&nbsp; public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Window();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Default constructor.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ~Window();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Destructor.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int NumberOf();&nbsp;&nbsp; // Number of objects of class.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int Count();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Count number of objects of class.
 &nbsp;&nbsp; private:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static int CCount;
 &nbsp;&nbsp; };
 &nbsp;&nbsp; class CommPort
 &nbsp;&nbsp; {
 &nbsp;&nbsp; public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CommPort();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Default constructor.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ~CommPort();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Destructor.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int NumberOf();&nbsp;&nbsp; // Number of objects of class.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int Count();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Count number of objects of class.
 &nbsp;&nbsp; private:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static int CCount;
 &nbsp;&nbsp; };
};

// Initialize WinSystem static members.
int WinSystem::Window::CCount = 0;
int WinSystem::CommPort::CCount = 0;
</code></pre>
<p>
To access a name defined in a nested class, use the scope-resolution operator (<b>::</b>) to construct a complete class name. Use of this operator is shown in the initializations of the <b>static</b> members in the preceding example. To use a nested class in your program, use code such as:</p>
<pre><code>WinSystem::Window Desktop;
WinSystem::Window AppWindow;

cout &lt;&lt; "Number of active windows: " &lt;&lt; Desktop.Count() &lt;&lt; "\n";
</code></pre>
<p>
Nested anonymous classes or structures can be defined as:</p>
<pre><code>class Ledger
{
 &nbsp;&nbsp; class
 &nbsp;&nbsp; {
 &nbsp;&nbsp; public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double&nbsp;&nbsp; PayableAmt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned PayableDays;
 &nbsp;&nbsp; } Payables;

 &nbsp;&nbsp; class
 &nbsp;&nbsp; {
 &nbsp;&nbsp; public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double&nbsp;&nbsp; RecvableAmt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned RecvableDays;
 &nbsp;&nbsp; } Receivables;
};
</code></pre>
<p>
An anonymous class must be an aggregate that has no member functions and no static members.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Although an enumerated type can be defined inside a class declaration, the reverse is not true; class types cannot be defined inside enumeration declarations. </p>
</font></BODY>
</HTML>

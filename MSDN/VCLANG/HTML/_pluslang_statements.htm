<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Statements</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_statements"></a>Statements</h1>
<p>
C++ statements are the program elements that control how and in what order objects are manipulated. This chapter includes:
<ul type=disc>
<li>
<a href="_pluslang_overview_of_c.2b2b_.statements.htm">Overview</a><br><br></li>
<li>
<a href="_pluslang_labeled_statements.htm">Labeled Statements</a><br><br></li>
<li>
Categories of Statements<ul type=disc>
<li>
<a href="_pluslang_expression_statement.htm">Expression statements</a>. These statements evaluate an expression for its side effects or for its return value.<br><br></li>
<li>
<a href="_pluslang_the_c.2b2b_.null_statement.htm">Null statements</a>. These statements can be provided where a statement is required by the C++ syntax but where no action is to be taken.<br><br></li>
<li>
<a href="_pluslang_compound_statements.htm">Compound statements</a>. These statements are groups of statements enclosed in curly braces ({ }). They can be used wherever the grammar calls for a single statement.<br><br></li>
<li>
<a href="_pluslang_selection_statements.htm">Selection statements</a>. These statements perform a test; they then execute one section of code if the test evaluates to true (nonzero). They may execute another section of code if the test evaluates to false. <br><br></li>
<li>
<a href="_pluslang_iteration_statements.htm">Iteration statements</a>. These statements provide for repeated execution of a block of code until a specified termination criterion is met.<br><br></li>
<li>
<a href="_pluslang_jump_statements.htm">Jump statements</a>. These statements either transfer control immediately to another location in the function or return control from the function.<br><br></li>
<li>
<a href="_pluslang_declaration_statements.htm">Declaration statements</a>. Declarations introduce a name into a program. (Chapter 6, <a href="_pluslang_declarations.htm">Declarations</a>, provides more detailed information about declarations.)<br><br></li>
<li>
<a href="_pluslang_structured_exception_handling.htm">Exception handling statements</a>, which include C++ exception handling (<b>try</b>, <b>throw</b>, <b>catch</b>) and structured exception handling (<b>__try</b>/<b>__except</b>, <b>__try/__finally</b>). The <b>try-except</b> statement provides a method to gain control of a program when events that normally terminate execution occur. The <b>try-finally</b> and <b>leave</b> statements provide a method to guarantee execution of cleanup code when execution of a block of code is interrupted. </li>
</ul>
</li>
</ul>
</font></BODY>
</HTML>

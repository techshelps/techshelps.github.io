<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Special Member Functions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_special_member_functions"></a>Special Member Functions</h1>
<p>
C++ defines several kinds of functions that can be declared only as class members — these are called “special member functions.” These functions affect the way objects of a given class are created, destroyed, copied, and converted into objects of other types. Another important property of many of these functions is that they can be called implicitly (by the compiler).</p>
<p>
The special member functions are described briefly in the following list:
<ul type=disc>
<li>
<a href="_pluslang_constructors.htm">Constructors</a>. These functions enable automatic initialization of objects.&nbsp; <br><br></li>
<li>
<a href="_pluslang_destructors.htm">Destructors</a>. These functions perform cleanup after objects are explicitly or implicitly destroyed.&nbsp; <br><br></li>
<li>
<a href="_pluslang_conversion_functions.htm">Conversion Functions</a>. These are used to convert between class types and other types.&nbsp; <br><br></li>
<li>
<a href="_pluslang_the_operator_new_function.htm">The new operator</a>. This is used to dynamically allocate storage.&nbsp; <br><br></li>
<li>
<a href="_pluslang_the_operator_delete_function.htm">The delete operator</a>. This is used to release storage allocated using the <b>new</b> operator.&nbsp; <br><br></li>
<li>
<a href="_pluslang_copying_class_objects.htm">The assignment operator (operator=)</a>. This operator is used when an assignment takes place.&nbsp; </li>
</ul>
<p>
All of the items in the preceding list can be user-defined for each class.</p>
<p>
Special member functions obey the same access rules as other member functions. The access rules are described in Chapter 10, <a href="_pluslang_member.2d.access_control.htm">Member-Access Control</a>. Table 11.1 summarizes how member and friend functions behave.</p>
<p class=label>
<b><a name="_pluslang_table_11..1"></a>Table 11.1&nbsp;&nbsp;&nbsp;Summary of Function Behavior</b></p>
<table border=1 cellpadding=5 cols=6 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b><br>
<br>
<br>
<br>
Function Type</b></td>
<td class=label width=16%><b>Is Function Inherited from Base Class?</b></td>
<td class=label width=15%><b><br>
<br>
Can Function Be Virtual?</b></td>
<td class=label width=16%><b><br>
<br>
Can Function Return a Value?</b></td>
<td class=label width=17%><b><br>
Is Function a Member or Friend?</b></td>
<td class=label width=18%><b>Will Compiler Generate Function if User Does Not?</b></td>
</tr>
<tr valign=top>
<td width=18%>Constructor</td>
<td width=16%>No</td>
<td width=15%>No</td>
<td width=16%>No</td>
<td width=17%>Member</td>
<td width=18%>Yes</td>
</tr>
<tr valign=top>
<td width=18%>Copy Constructor</td>
<td width=16%>No</td>
<td width=15%>No</td>
<td width=16%>No</td>
<td width=17%>Member</td>
<td width=18%>Yes</td>
</tr>
<tr valign=top>
<td width=18%>Destructor</td>
<td width=16%>No</td>
<td width=15%>Yes</td>
<td width=16%>No</td>
<td width=17%>Member</td>
<td width=18%>Yes</td>
</tr>
<tr valign=top>
<td width=18%>Conversion</td>
<td width=16%>Yes</td>
<td width=15%>Yes</td>
<td width=16%>No</td>
<td width=17%>Member</td>
<td width=18%>No</td>
</tr>
<tr valign=top>
<td width=18%>Assignment (<b>operator=</b>)</td>
<td width=16%>No</td>
<td width=15%>Yes</td>
<td width=16%>Yes</td>
<td width=17%>Member</td>
<td width=18%>Yes</td>
</tr>
<tr valign=top>
<td width=18%><b>new</b></td>
<td width=16%>Yes</td>
<td width=15%>No</td>
<td width=16%><b>void*</b></td>
<td width=17%>Static member</td>
<td width=18%>No</td>
</tr>
<tr valign=top>
<td width=18%><b>delete</b></td>
<td width=16%>Yes</td>
<td width=15%>No</td>
<td width=16%><b>void</b></td>
<td width=17%>Static member</td>
<td width=18%>No</td>
</tr>
<tr valign=top>
<td width=18%>Other member<br>
functions</td>
<td width=16%>Yes</td>
<td width=15%>Yes</td>
<td width=16%>Yes</td>
<td width=17%>Member</td>
<td width=18%>No</td>
</tr>
<tr valign=top>
<td width=18%>Friend functions</td>
<td width=16%>No</td>
<td width=15%>No</td>
<td width=16%>Yes</td>
<td width=17%>Friend</td>
<td width=18%>No</td>
</tr>
</table><br>
</font></BODY>
</HTML>

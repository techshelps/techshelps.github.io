<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scope</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_scope"></a><sup></sup>Scope</h1>
<p>
C++ names can be used only in certain regions of a program. This area is called the “scope” of the name. Scope determines the “lifetime” of a name that does not denote an object of static extent. Scope also determines the visibility of a name, when class constructors and destructors are called, and when variables local to the scope are initialized. (For more information, see <a href="_pluslang_constructors.htm">Constructors</a> and <a href="_pluslang_destructors.htm">Destructors</a> in Chapter 11.) There are five kinds of scope:
<ul type=disc>
<li>
Local scope. A name declared within a block is accessible only within that block and blocks enclosed by it, and only after the point of declaration. The names of formal arguments to a function in the scope of the outermost block of the function have local scope, as if they had been declared inside the block enclosing the function body. Consider the following code fragment:<pre><code>{
 &nbsp;&nbsp; int i;
}
</code></pre>
<p class=tl>
Because the declaration of <code>i</code> is in a block enclosed by curly braces, <code>i</code> has local scope and is never accessible because no code accesses it before the closing curly brace. </P></li>
<li>
Function scope. Labels are the only names that have function scope. They can be used anywhere within a function but are not accessible outside that function.<br><br></li>
<li>
File scope. Any name declared outside all blocks or classes has file scope. It is accessible anywhere in the translation unit after its declaration. Names with file scope that do not declare static objects are often called “global” names.<br><br></li>
<li>
Class scope. Names of class members have class scope. Class member functions can be accessed only by using the member-selection operators (<b>.</b> or <b>–&gt;</b>) or pointer-to-member operators (<b>.*</b> or <b>–&gt;*</b>) on an object or pointer to an object of that class; nonstatic class member data is considered local to the object of that class. Consider the following class declaration:<pre><code>class Point
{
 &nbsp;&nbsp; int x;
 &nbsp;&nbsp; int y;
};
</code></pre>
<p class=tl>
The class members <code>x</code> and <code>y</code> are considered to be in the scope of class <code>Point</code>.</P></li>
<li>
Prototype scope. Names declared in a function prototype are visible only until the end of the prototype. The following prototype declares two names (<code>szDest</code>, <code>szSource</code>); these names go out of scope at the end of the prototype:<pre><code>char *strcpy( char *szDest, const char *szSource );
</code></pre>
</li>
</ul>
</font></BODY>
</HTML>

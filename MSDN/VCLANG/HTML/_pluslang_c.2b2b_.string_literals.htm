<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ String Literals</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.string_literals"></a><sup></sup>C++ String Literals</h1>
<p>
A string literal consists of zero or more characters from the source character set surrounded by double quotation marks (<b>"</b>). A string literal represents a sequence of characters that, taken together, form a null-terminated string.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>string-literal</i> :</p>
<p class=indent>
<b>"</b><i>s-char-sequence</i><sub>opt</sub><b>"</b><br>
<b>L"</b><i>s-char-sequence</i><sub>opt</sub><b>"</b></p>
<p class=dt>
<i>s-char-sequence</i> :</p>
<p class=indent>
<i>s-char</i><br>
<i>s-char-sequence</i> <i>s-char</i></p>
<p class=dt>
<i>s-char</i> :</p>
<p class=indent>
any member of the source character set except the double quotation mark (<sub>"</sub>), backslash (<b>\</b>), or newline character<br>
<i>escape-sequence</i></p>
<p>
C++ strings have these types:
<ul type=disc>
<li>
Array of <b>char</b>[<i>n</i>], where <i>n</i> is the length of the string (in characters) plus 1 for the terminating <b>'</b>\0<b>'</b> that marks the end of the string<br><br></li>
<li>
Array of <b>wchar_t</b>, for wide-character strings</li>
</ul>
<p>
The result of modifying a string constant is undefined. For example:</p>
<pre><code>char *szStr = "1234";
szStr[2] = 'A';      // Results undefined
</code></pre>
<p>
<b>Microsoft Specific </b></p>
<p>
In some cases, identical string literals can be “pooled” to save space in the executable file. In string-literal pooling, the compiler causes all references to a particular string literal to point to the same location in memory, instead of having each reference point to a separate instance of the string literal. The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_.2f.Gf">
</object><a href=JavaScript:alink_1.Click()>/Gf</a> compiler option enables string pooling.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
When specifying string literals, adjacent strings are concatenated. Therefore, this declaration:</p>
<pre><code>char szStr[] = "12" "34";
</code></pre>
<p>
is identical to this declaration:</p>
<pre><code>char szStr[] = "1234";
</code></pre>
<p>
This concatenation of adjacent strings makes it easy to specify long strings across multiple lines:</p>
<pre><code>cout &lt;&lt; "Four score and seven years "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "ago, our forefathers brought forth "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "upon this continent a new nation.";
</code></pre>
<p>
In the preceding example, the entire string <code>Four score and seven years ago, our forefathers brought forth upon this continent a new nation.</code> is spliced together. This string can also be specified using line splicing as follows:</p>
<pre><code>cout &lt;&lt; "Four score and seven years \
ago, our forefathers brought forth \
upon this continent a new nation.";
</code></pre>
<p>
After all adjacent strings in the constant have been concatenated, the <b>NULL</b> character, <code>'\0'</code>, is appended to provide an end-of-string marker for C string-handling functions.</p>
<p>
When the first string contains an escape character, string concatenation can yield surprising results. Consider the following two declarations:</p>
<pre><code>char szStr1[] = "\01" "23";
char szStr2[] = "\0123";
</code></pre>
<p>
Although it is natural to assume that <code>szStr1</code> and <code>szStr2</code> contain the same values, the values they actually contain are shown in <u>Figure 1.1.</u></p>
<p class=label>
<b>Figure 1.1&nbsp;&nbsp;&nbsp;Escapes and String Concatenation</b></p>
<p>
<img src="l01escs.gif" border=0></p>
<p>
<b>Microsoft Specific </b></p>
<p>
The maximum length of a string literal is approximately 2,048 bytes. This limit applies to strings of type <b>char[]</b> and <b>wchar_t[]</b>. If a string literal consists of parts enclosed in double quotation marks, the preprocessor concatenates the parts into a single string, and for each line concatenated, it adds an extra byte to the total number of bytes. </p>
<p>
For example, suppose a string consists of 40 lines with 50 characters per line (2,000 characters), and one line with 7 characters, and each line is surrounded by double quotation marks. This adds up to 2,007 bytes plus one byte for the terminating null character, for a total of 2,008 bytes. On concatenation, an extra character is added to the total number of bytes for each of the first 40 lines. This makes a total of 2,048 bytes. (The extra characters are not actually written to the string.) Note, however, that if line continuations (\) are used instead of double quotation marks, the preprocessor does not add an extra character for each line.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
Determine the size of string objects by counting the number of characters and adding 1 for the terminating <code>'\0'</code> or 2 for type <b>wchar_t</b>.</p>
<p>
Because the double quotation mark (<code>"</code>) encloses strings, use the escape sequence (<code>\"</code>) to represent enclosed double quotation marks. The single quotation mark (<code>'</code>) can be represented without an escape sequence. The backslash character (<code>\</code>) is a line-continuation character when placed at the end of a line. If you want a backslash character to appear within a string, you must type two backslashes (<code>\\</code>). (See <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_PREDIR_Phases_of_Translation">
</object><a href=JavaScript:alink_2.Click()>Phases of Translation</a> in the <i>Preprocessor Reference</i> for more information about line continuation.)</p>
<p>
To specify a string of type wide-character (<b>wchar_t[]</b>), precede the opening double quotation mark with the character <b>L</b>. For example:</p>
<pre><code>wchar_t wszStr[] = L"1a1g";
</code></pre>
<p>
All normal escape codes listed in <a href="_pluslang_c.2b2b_.character_constants.htm">Character Constants</a> are valid in string constants. For example:</p>
<pre><code>cout &lt;&lt; "First line\nSecond line";
cout &lt;&lt; "Error! Take corrective action\a";
</code></pre>
<p>
Because the escape code terminates at the first character that is not a hexadecimal digit, specification of string constants with embedded hexadecimal escape codes can cause unexpected results. The following example is intended to create a string literal containing ASCII 5, followed by the characters <code>five</code>:</p>
<pre><code>\x05five"
</code></pre>
<p>
The actual result is a hexadecimal 5F, which is the ASCII code for an underscore, followed by the characters <code>ive</code>. The following example produces the desired results: </p>
<pre><code>"\005five"&nbsp;&nbsp;&nbsp;&nbsp; // Use octal constant.
"\x05" "five"&nbsp; // Use string splicing.
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Names and Qualified Names</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_names_and_qualified_names"></a><sup></sup>Names and Qualified Names</h1>
<p>
Names used with the binary scope-resolution operator (<b>::</b>) are called “qualified names.” The name specified after the binary scope-resolution operator must be a member of the class specified on the left of the operator or a member of its base class(es).</p>
<p>
Names specified after the member-selection operator (<b>.</b> or <b>–&gt;</b>) must be members of the class type of the object specified on the left of the operator or members of its base class(es). Names specified on the right of the member-selection operator (<b>–&gt;</b>) can also be objects of another class type, provided that the left-hand side of <b>–&gt;</b> is a class object and that the class defines an overloaded member-selection operator (<b>–&gt;</b>) that evaluates to a pointer to some other class type. (This provision is discussed in more detail in <a href="_pluslang_class.2d.member_access.htm">Class Member Access</a> in Chapter 12.)</p>
<p>
The compiler searches for names in the following order, stopping when the name is found:
<ol>
<li>
Current block scope if name is used inside a function; otherwise, global scope.<br><br></li>
<li>
Outward through each enclosing block scope, including the outermost function scope (which includes function arguments).<br><br></li>
<li>
If the name is used inside a member function, the class’s scope is searched for the name.<br><br></li>
<li>
The class’s base classes are searched for the name.<br><br></li>
<li>
The enclosing nested class scope (if any) and its bases are searched. The search continues until the outermost enclosing class scope is searched.<br><br></li>
<li>
Global scope is searched.</li>
</ol>
<p>
However, you can make modifications to this search order as follows:
<ol start=7>
<li>
Names preceded by <b>::</b> force the search to begin at global scope.<br><br></li>
<li>
Names preceded by the <b>class</b>, <b>struct</b>, and <b>union</b> keywords force the compiler to search only for <b>class</b>, <b>struct</b>, or <b>union</b> names.<br><br></li>
<li>
Names on the left side of the scope-resolution operator (<b>::</b>) can be only <b>class</b>, <b>struct</b>, or <b>union</b> names.</li>
</ol>
<p>
If the name refers to a nonstatic member but is used in a static member function, an error message is generated. Similarly, if the name refers to any nonstatic member in an enclosing class, an error message is generated because enclosed classes do not have enclosing-class <b>this</b> pointers.</p>
</font></BODY>
</HTML>

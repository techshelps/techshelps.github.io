<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>next_permutation (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_next_permutation">next_permutation (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>next_permutation</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class BidirectionalIterator&gt; inline
     bool next_permutation(BidirectionalIterator first,
     BidirectionalIterator last)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The next_permutation algorithm changes the order of the elements in the range [first, last) to the next lexicographic permutation and returns true. If there is no next_permutation, it arranges the sequence to be the first permutation and returns false.  IMPORTANT: The next_permutation algorithm assumes the sequence is sorted in ascending order using operator&lt;.  The non-predicate version uses the operator&lt; to order the permutations.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// next_permutation.cpp : Illustrates how to use the
//                        next_permutation function.
//
// Functions:
//
//    next_permutation : Change the order of the sequence to the
//                       next lexicograhic permutation.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;

using namespace std ;

void main()
{
    const int VECTOR_SIZE = 3 ;

    // Define a template class vector of strings
    typedef vector&lt;string&gt; StrVector ;

    //Define an iterator for template class vector of strings
    typedef StrVector::iterator StrVectorIt ;

    //Define an ostream iterator for strings
    typedef ostream_iterator&lt;string&gt; StrOstreamIt;

    StrVector Pattern(VECTOR_SIZE) ;

    StrVectorIt start, end, it ;

    StrOstreamIt outIt(cout, " ") ;

    start = Pattern.begin() ;   // location of first
                                      // element of Pattern

    end = Pattern.end() ;       // one past the location last
                                       // element of Pattern

    //Initialize vector Pattern
    Pattern[0] = "A" ;
    Pattern[1] = "B" ;
    Pattern[2] = "C" ;

    // print content of Pattern
    cout &lt;&lt; "Before calling next_permutation...\n" &lt;&lt; "Pattern: " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; "\n\n" ;

    // Generate all possible permutations

    cout &lt;&lt; "After calling next_permutation...." &lt;&lt; endl ;
    while ( next_permutation(start, end) )
    {
        copy(start, end, outIt) ;
        cout &lt;&lt; endl ;
    }
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Before calling next_permutation:
Pattern: A B C

After calling next_permutation:
A C B
B A C
B C A
C A B
C B A
</code></pre>

</body>
</html>

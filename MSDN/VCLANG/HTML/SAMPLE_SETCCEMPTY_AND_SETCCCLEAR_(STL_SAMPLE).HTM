<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set::empty and set::clear (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_setCCempty_clear">set::empty and set::clear (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>set::empty</code> and <code>set::clear</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;set&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _K, class _Pr, class _A&gt;
     class set
     {
        public:
        // Function 1:
        bool empty() const;
        // Function 2:
        void clear();
     }
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The empty function returns true when there are no elements in the controlled sequence. By calling erase(begin,end), the clear function removes all elements in the controlled sequence. For more information on the erase function, see set::erase.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// SetEmpty&amp;Clear.cpp:
//      Illustrates how to use the empty function to determine if
//      there are elements in the controlled sequence. It also
//      illustrates how to use the clear function to remove all
//      elements from the controlled sequence.
//
// Functions:
//
//    empty        Returns true if there are no elements in the
//                 controlled sequence.
//    clear        Removes all elements from the controlled sequence.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;set&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef set&lt;int&gt; SET_INT;

void truefalse(int x)
{
  cout &lt;&lt; (x?"True":"False") &lt;&lt; endl;
}

void main() {
  SET_INT s1;

  cout &lt;&lt; "s1.empty() returned ";
  truefalse(s1.empty());  // True

  cout &lt;&lt; "s1.insert(5)" &lt;&lt; endl;
  s1.insert(5);
  cout &lt;&lt; "s1.insert(8)" &lt;&lt; endl;
  s1.insert(8);

  cout &lt;&lt; "s1.empty() returned ";
  truefalse(s1.empty());  // False

  cout &lt;&lt; "s1.clear()" &lt;&lt; endl;
  s1.clear();

  cout &lt;&lt; "s1.empty() returned ";
  truefalse(s1.empty());  // True
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
s1.empty() returned True
s1.insert(5)
s1.insert(8)
s1.empty() returned False
s1.clear()
s1.empty() returned True
</code></pre>

</body>
</html>

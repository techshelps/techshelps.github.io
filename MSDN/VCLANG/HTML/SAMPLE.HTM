</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>STL Sample Programs</title>
	<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
	<META NAME="MS-HAID" CONTENT="_vc_stlsample">
	<META NAME="MS-HKWD" CONTENT="STL sample programs">
	<META NAME="MS-HKWD" CONTENT="sample programs, STL">
	<META NAME="MS-HKWD" CONTENT="samples, STL">
	<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

	<FORM NAME="x">
	<OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv">
	</OBJECT>
	</FORM>

<h1><a name="STL Sample Programs">STL Sample Programs</a></h1>
<p>Following is an alphabetic list of 118 STL sample programs.  <br>
<ul>
<li><a href="sample_abs_(STL_Sample).htm#_sample_stl_abs">abs</a></li>
<li><a href="sample_accumulate__copy__vectorCCpush_back(STL_Sample).htm#_sample_stl_accum_copy_vectorCCpush_back">accumulate, copy, vector::push_back</a></li>
<li><a href="sample_adjacent_difference__vectorCCpush_back_(STL_Sample).htm#_sample_stl_adj_diff_vectorCCpush_back">adjacent_difference, vector::push_back</a></li>
<li><a href="sample_advance_(STL_Sample).htm#_sample_stl_advance">advance</a></li>
<li><a href="sample_Basic_Math_(STL_Sample).htm#_sample_stl_Basic_Math">Basic Math Functions</a></li>
<li><a href="sample_basic_stringCCappend_(STL_Sample).htm#_sample_stl_basic_stringCCappend">basic_string::append</a></li>
<li><a href="sample_basic_string_size_and_resize_(STL_Sample).htm#_sample_stl_basic_stringCCsize_resize">basic_string size and resize</a></li>
<li><a href="sample_binary_function_Structure_(STL_Sample).htm#_sample_stl_binary_function_structure">binary_function Structure</a></li>
<li><a href="sample_count_(STL_Sample).htm#_sample_stl_count">count</a></li>
<li><a href="sample_count_if_(STL_Sample).htm#_sample_stl_count_if">count_if</a></li>
<li><a href="sample_dequeCCassign_and_dequeCCswap_(STL_Sample).htm#_sample_stl_dequeCCassign_swap">deque::assign and deque::swap</a></li>
<li><a href="sample_dequeCCbegin_and_dequeCCend_(STL_Sample).htm#_sample_stl_dequeCCbegin_end">deque::begin and deque::end</a></li>
<li><a href="sample_dequeCCerase_and_dequeCCclear_(STL_sample).htm#_sample_stl_dequeCCerase_clear">deque::erase and deque::clear</a></li>
<li><a href="sample_dequeCCfront_and_dequeCCback_(STL_Sample).htm#_sample_stl_dequeCCfront_back">deque::front and deque::back</a></li>
<li><a href="sample_dequeCCinsert_(STL_Sample).htm#_sample_stl_dequeCCinsert">deque::insert</a></li>
<li><a href="sample_dequeCCoperatorCD_and_dequeCCat_(STL_Sample).htm#_sample_stl_dequeCCoperatorLBRB_at">deque::operator[] and deque::at</a></li>
<li><a href="sample_dequeCCpush_back_and_dequeCCpop_back_(STL_Sample).htm#_sample_stl_dequeCCpush_back_pop_back">deque::push_back and deque::pop_back</a></li>
<li><a href="sample_dequeCCpush_front__dequeCCpop_front_(STL_Sample).htm#_sample_stl_dequeCCpush_front_pop_front">deque::push_front, deque::pop_front</a></li>
<li><a href="sample_dequeCCrbegin_and_dequeCCrend_(STL_Sample).htm#_sample_stl_dequeCCrbegin_rend">deque::rbegin and deque::rend</a></li>
<li><a href="sample_dequeCCsize_and_dequeCCresize_(STL_Sample).htm#_sample_stl_dequeCCsize_resize">deque::size and deque::resize</a></li>
<li><a href="sample_distance_(STL_Sample).htm#_sample_stl_distance">distance</a></li>
<li><a href="sample_exp__log__and_log10_(Sample).htm#_sample_stl_exp_log_log10">exp, log, and log10</a></li>
<li><a href="sample_find_(STL_Sample).htm#_sample_stl_find">find</a></li>
<li><a href="sample_find_if_(STL_Sample).htm#_sample_stl_find_if">find_if</a></li>
<li><a href="sample_for_each_(STL_Sample).htm#_sample_stl_for_each">for_each</a></li>
<li><a href="sample_Generate_(STL_Sample).htm#_sample_stl_Generate">generate</a></li>
<li><a href="sample_generate_n_(STL_Sample).htm#_sample_stl_generate_n">generate_n</a></li>
<li><a href="sample_heap_(STL_Sample).htm#_sample_stl_heap">heap</a></li>
<li><a href="sample_The_Predicate_Versions_of_heap_(STL_Sample).htm#_sample_stl_heapP">heap (predicate version)</a></li>
<li><a href="sample_includes_(STL_Sample).htm#_sample_stl_includes">includes</a></li>
<li><a href="sample_Predicate_Version_of_includes_(STL_Sample).htm#_sample_stl_includesP">includes (predicate version)</a></li>
<li><a href="sample_inner_product_(STL_Sample).htm#_sample_stl_inner_product">inner_product</a></li>
<li><a href="sample_inplace_merge_(STL_Sample).htm#_sample_stl_inplace_merge">inplace_merge</a></li>
<li><a href="sample_Predicate_Version_of_inplace_merge_(STL_Sample).htm#_sample_stl_inplace_mergeP">inplace_merge (predicate version)</a></li>
<li><a href="sample_iter_swap_(STL_Sample).htm#_sample_stl_iter_swap">iter_swap</a></li>
<li><a href="sample_listCCassign_(STL_Sample).htm#_sample_stl_listCCassign">list::assign</a></li>
<li><a href="sample_listCCback__listCCfront_(STL_Sample).htm#_sample_stl_listCCback_front">list::back, list::front</a></li>
<li><a href="sample_dequeCCinsert_(STL_Sample).htm#_sample_stl_dequeCCinsert">deque::insert</a></li>
<li><a href="sample_listCClist_(STL_Sample).htm#_sample_stl_listCClist">list::list</a></li>
<li><a href="sample_lower_bound_(STL_Sample).htm#_sample_stl_lower_bound">lower_bound</a></li>
<li><a href="sample_Predicate_Version_of_lower_bound_(STL_Sample).htm#_sample_stl_lower_boundP">lower_bound (predicate version)</a></li>
<li><a href="sample_make_pair_(STL_Sample).htm#_sample_stl_make_pair">make_pair</a></li>
<li><a href="sample_mapCCinsert__mapCCfind__and_mapCCend_(STL_Sample).htm#_sample_stl_mapCCinsert_find_end">map::insert, map::find, and map::end</a></li>
<li><a href="sample_NonMPredicate_Version_of_max_element_(STL_Sample).htm#_sample_stl_max_element">max_element</a></li>
<li><a href="sample_Predicate_Version_of_max_element_(STL_Sample).htm#_sample_stl_max_elementP">max_element (predicate version)</a></li>
<li><a href="sample_mapCCmax_size__clear__erase__size_(STL_Sample).htm#_sample_stl_max_sizeCCclear_erase_size">map::max_size, clear, erase, size</a></li>
<li><a href="sample_merge_(STL_Sample).htm#_sample_stl_merge">merge</a></li>
<li><a href="sample_Predicate_Version_of_merge_(STL_Sample).htm#_sample_stl_mergeP">merge (predicate version)</a></li>
<li><a href="sample_min_element_(STL_Sample).htm#_sample_stl_min_element">min_element</a></li>
<li><a href="sample_Predicate_Version_of_min_element_(STL_Sample).htm#_sample_stl_min_elementP">min_element (predicate version)</a></li>
<li><a href="sample_new_operator_(STL_Sample).htm#_sample_stl_new_operator">new operator</a></li>
<li><a href="sample_next_permutation_(STL_Sample).htm#_sample_stl_next_permutation">next_permutation</a></li>
<li><a href="sample_Predicate_Version_of_next_permutation_(STL_Sample).htm#_sample_stl_next_permutationP">next_permutation (predicate version)</a></li>
<li><a href="sample_nth_element_(STL_Sample).htm#_sample_stl_nth_element">nth_element</a></li>
<li><a href="sample_Predicate_Version_of_nth_element_(STL_Sample).htm#_sample_stl_nth_elementP">nth_element (predicate version)</a></li>
<li><a href="sample_Members_of_the_numeric_limits_Class_(STL_Sample).htm#_sample_stl_numeric_limits_class">Members of the numeric_limits Class</a></li>
<li><a href="sample_operator_EE_and_operator_L_deque_(STL_Sample).htm#_sample_stl_operatorEE_operatorL_deque">operator == and operator &lt; deque</a></li>
<li><a href="sample_Pair_Logical_Operator_(STL_Sample).htm#_sample_stl_Pair_Logical_Operator">Pair Logical Operator</a></li>
<li><a href="sample_partial_sort_(STL_Sample).htm#_sample_stl_partial_sort">partial_sort</a></li>
<li><a href="sample_partial_sort_copy_(STL_Sample).htm#_sample_stl_partial_sort_copy">partial_sort_copy</a></li>
<li><a href="sample_Predicate_Version_of_partial_sort_copy_(STL_Sample).htm#_sample_stl_partial_sort_copyP">partial_sort_copy (predicate version)</a></li>
<li><a href="sample_Predicate_Version_of_partial_sort_(STL_Sample).htm#_sample_stl_partial_sortP">partial_sort (predicate version)</a></li>
<li><a href="sample_partial_sum_(STL_Sample).htm#_sample_stl_partial_sum">partial_sum</a></li>
<li><a href="sample_partition_(STL_Sample).htm#_sample_stl_partition">partition</a></li>
<li><a href="sample_prev_permutation_(STL_Sample).htm#_sample_stl_prev_permutation">prev_permutation</a></li>
<li><a href="sample_priority_queue_functions_(STL_Sample).htm#_sample_stl_priority_queue_functions">priority_queue functions</a></li>
<li><a href="sample_queue_functions_(STL_Sample).htm#_sample_stl_queue_functions">queue functions</a></li>
<li><a href="sample_random_shuffle_(STL_Sample).htm#_sample_stl_random_shuffle">random_shuffle</a></li>
<li><a href="sample_Predicate_Version_of_random_shuffle_(STL_Sample).htm#_sample_stl_random_shuffleP">random_shuffle</a></li>
<li><a href="sample_remove_(STL_Sample).htm#_sample_stl_remove">remove</a></li>
<li><a href="sample_remove_copy_(STL_Sample).htm#_sample_stl_remove_copy">remove_copy</a></li>
<li><a href="sample_remove_copy_if_(STL_Sample).htm#_sample_stl_remove_copy_if">remove_copy_if</a></li>
<li><a href="sample_remove_if_(STL_Sample).htm#_sample_stl_remove_if">remove_if</a></li>
<li><a href="sample_replace_(STL_Sample).htm#_sample_stl_replace">replace</a></li>
<li><a href="sample_replace_copy_(STL_Sample).htm#_sample_stl_replace_copy">replace_copy</a></li>
<li><a href="sample_replace_copy_if_(STL_Sample).htm#_sample_stl_replace_copy_if">replace_copy_if</a></li>
<li><a href="sample_replace_if_(STL_Sample).htm#_sample_stl_replace_if">replace_if</a></li>
<li><a href="sample_reverse_(STL_Sample).htm#_sample_stl_reverse">reverse</a></li>
<li><a href="sample_reverse_copy_(STL_Sample).htm#_sample_stl_reverse_copy">reverse_copy</a></li>
<li><a href="sample_rotate_(STL_Sample).htm#_sample_stl_rotate">rotate</a></li>
<li><a href="sample_rotate_copy_(STL_Sample).htm#_sample_stl_rotate_copy">rotate_copy</a></li>
<li><a href="sample_setCC(lower___upper_)bound__equal_range_(STL_Sample).htm#_sample_stl_setCCbounds_equal_range">set::(lower_, upper_)bound, equal_range</a></li>
<li><a href="sample_setCC(key___value_)comp_(STL_Sample).htm#_sample_stl_setCCcomp_functions">set::(key_, value_)comp</a></li>
<li><a href="sample_setCCcount_(STL_Sample).htm#_sample_stl_setCCcount">set::count</a></li>
<li><a href="sample_setCCempty_and_setCCclear_(STL_Sample).htm#_sample_stl_setCCempty_clear">set::empty and set::clear</a></li>
<li><a href="sample_setCCfind_(STL_Sample).htm#_sample_stl_setCCfind">set::find</a></li>
<li><a href="sample_setCCmax_size_(STL_Sample).htm#_sample_stl_setCCmax_size">set::max_size</a></li>
<li><a href="sample_setCCrbegin_and_setCCrend_(STL_Sample).htm#_sample_stl_setCCrbegin_rend">set::rbegin and set::rend</a></li>
<li><a href="sample_setCCsize_(STL_Sample).htm#_sample_stl_setCCsize">set::size</a></li>
<li><a href="sample_setCCswap__begin__end_(STL_Sample).htm#_sample_stl_setCCswap_begin_end">set::swap, begin, end</a></li>
<li><a href="sample_sqrt_and_pow_(STL_Sample).htm#_sample_stl_sqrt_pow">sqrt and pow</a></li>
<li><a href="sample_stackCCoperatorEE_(STL_Sample).htm#_sample_stl_stackCCoperatorEE">stack::operator==</a></li>
<li><a href="sample_stackCCoperatorL_(STL_Sample).htm#_sample_stl_stackCCoperatorLT">stack::operator&lt;</a></li>
<li><a href="sample_stackCCsize_(STL_Sample).htm#_sample_stl_stackCCsize">stack::size</a></li>
<li><a href="sample_stackCCtop_and_stackCCempty_(STL_Sample).htm#_sample_stl_stackCCtop_empty">stack::top and stack::empty</a></li>
<li><a href="sample_stringCCgetline_(STL_Sample).htm#_sample_stl_stringCCgetline">string::getline</a></li>
<li><a href="sample_stringCCoperatorEE_(STL_Sample).htm#_sample_stl_stringCCoperatorEE">string::operator==</a></li>
<li><a href="sample_stringCCoperatorG_(STL_Sample).htm#_sample_stl_stringCCoperatorGT">string::operator&gt;</a></li>
<li><a href="sample_stringCCoperatorGE_(STL_Sample).htm#_sample_stl_stringCCoperatorGTE">string::operator&gt;=</a></li>
<li><a href="sample_stringCCoperatorGG_(STL_Sample).htm#_sample_stl_stringCCoperatorGTGT">string::operator&gt;&gt;</a></li>
<li><a href="sample_stringCCoperatorL_(STL_Sample).htm#_sample_stl_stringCCoperatorLT">string::operator&lt;</a></li>
<li><a href="sample_stringCCoperatorLE_(STL_Sample).htm#_sample_stl_stringCCoperatorLTE">string::operator&lt;=</a></li>
<li><a href="sample_stringCCoperatorLL_(STL_Sample).htm#_sample_stl_stringCCoperatorLTLT">string::operator&lt;&lt;</a></li>
<li><a href="sample_stringCCoperatorP_(STL_Sample).htm#_sample_stl_stringCCoperatorPL">string::operator+</a></li>
<li><a href="sample_stringCCoperatorNE_(STL_Sample).htm#_sample_stl_stringCCoperatorXE">string::operator!=</a></li>
<li><a href="sample_Trigonometry_Functions_(Sample).htm#_sample_stl_Trigonometry_Functions">Trigonometry Functions</a></li>
<li><a href="sample_unary_functionLG_Structure_(STL_Sample).htm#_sample_stl_unary_functionLTGT_structure">unary_function&lt;&gt; Structure</a></li>
<li><a href="sample_upper_bound_(STL_Sample).htm#_sample_stl_upper_bound">upper_bound</a></li>
<li><a href="sample_Predicate_Version_of_upper_bound_(STL_Sample).htm#_sample_stl_upper_boundP">upper_bound (predicate version)</a></li>
<li><a href="sample_Vector_Class__operatorEE_(STL_Sample).htm#_sample_stl_vector_class_operatorEE">Vector Class, operator==</a></li>
<li><a href="sample_vectorCCempty__erase__and_push_back_(STL_Sample).htm#_sample_stl_vectorCCempty_erase_push_back">vector::empty, erase, and push_back</a></li>
<li><a href="sample_vectorCCfront_and_vectorCCback_(STL_Sample).htm#_sample_stl_vectorCCfront_back">vector::front and vector::back</a></li>
<li><a href="sample_Vector_Class__operatorL_(STL_Sample).htm#_sample_stl_vectorCCoperatorLT">Vector Class, operator&lt;</a></li>
<li><a href="sample_vectorCCpush_back_and_vectorCCpop_back_(STL_Sample).htm#_sample_stl_vectorCCpush_back_pop_back">vector::push_back and vector::pop_back</a></li>
<li><a href="sample_vectorCCsize__vectorCCcapacity__and_more_(STL_Sample).htm#_sample_stl_vectorCCsize_capacity">vector::size and vector::capacity</a></li>
</ul>

</body>
</html>

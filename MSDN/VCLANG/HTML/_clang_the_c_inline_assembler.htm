<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The C Inline Assembler</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_the_c_inline_assembler"></a><sup></sup>The C Inline Assembler</h1>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The inline assembler lets you embed assembly-language instructions directly in your C source programs without extra assembly and link steps. The inline assembler is built into the compiler — you don’t need a separate assembler such as the Microsoft Macro Assembler (MASM).</p>
<p>
Because the inline assembler doesn’t require separate assembly and link steps, it is more convenient than a separate assembler. Inline assembly code can use any C variable or function name that is in scope, so it is easy to integrate it with your program’s C code. And because the assembly code can be mixed with C statements, it can do tasks that are cumbersome or impossible in C alone.</p>
<p>
The <b>__asm</b> keyword invokes the inline assembler and can appear wherever a C statement is legal. It cannot appear by itself. It must be followed by an assembly instruction, a group of instructions enclosed in braces, or, at the very least, an empty pair of braces. The term “<b>__asm</b> block” here refers to any instruction or group of instructions, whether or not in braces. </p>
<p>
The code below is a simple <b>__asm</b> block enclosed in braces. (The code is a custom function prolog sequence.) </p>
<pre><code>__asm
{
 &nbsp; push ebp
 &nbsp; mov&nbsp; ebp, esp
 &nbsp; sub&nbsp; esp, __LOCAL_SIZE
}
</code></pre>
<p>
Alternatively, you can put <b>__asm</b> in front of each assembly instruction:</p>
<pre><code>__asm push ebp
__asm mov&nbsp; ebp, esp
__asm sub&nbsp; esp, __LOCAL_SIZE
</code></pre>
<p>
Since the <b>__asm</b> keyword is a statement separator, you can also put assembly instructions on the same line:</p>
<pre><code>__asm push ebp&nbsp;&nbsp; __asm mov&nbsp; ebp, esp&nbsp;&nbsp; __asm sub&nbsp; esp, __LOCAL_SIZE 
</code></pre>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

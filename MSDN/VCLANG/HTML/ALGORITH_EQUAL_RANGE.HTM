<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>equal_range</title></head>
<body bgcolor=white>

<h2><a name="equal_range">equal_range</a></h2>
<META NAME="MS-HKWD" CONTENT="equal_range">
<pre><code>template&lt;class FwdIt, class T&gt;
    pair&lt;FwdIt, FwdIt&gt; <b>equal_range</b>(FwdIt first, FwdIt last,
        const T&amp; val);
template&lt;class FwdIt, class T, class Pred&gt;
    pair&lt;FwdIt, FwdIt&gt; <b>equal_range</b>(FwdIt first, FwdIt last,
        const T&amp; val, Pred pr);</code></pre>
<p>The first template function effectively returns <a href="UTILITY_pair.htm#pair"><code>pair</code></a><code>( </code><a href="ALGORITH_lower_bound.htm#lower_bound"><code>lower_bound</code></a><code>(first, last, val), </code><a href="ALGORITH_upper_bound.htm#upper_bound"><code>upper_bound</code></a><code>(first, 
last, val))</code>, where the elements designated by iterators in the range <code>[first, last)</code> form a sequence <a href="lib_stl_Algorithm_Conventions.htm#sequence ordering">ordered by</a> 
<code>operator&lt;</code>. Thus, the function determines the largest range of positions over which <code>val</code> can be inserted in the 
sequence and still preserve its ordering.</p>
<p>If <code>FwdIt</code> is a random-access iterator type, the function evaluates the ordering predicate <code>X &lt; Y</code> at most <code>ceil(2 * 
log(last - first)) + 1</code> times. Otherwise, the function evaluates the predicate a number of times proportional to <code>last 
- first</code>.</p>
<p>The second template function behaves the same, except that it replaces <code>operator&lt;(X, Y)</code> with <code>pr(X, Y)</code>.</p>
</body>
</html>

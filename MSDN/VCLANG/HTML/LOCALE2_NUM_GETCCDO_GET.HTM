<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>num_get::do_get</title></head>
<body bgcolor=white>

<h3><a name="num_get::do_get">num_get::do_get</a></h3>
<META NAME="MS-HKWD" CONTENT="do_get">
<pre><code>virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, long&amp; val) const;
virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, unsigned long&amp; val) const;
virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, double&amp; val) const;
virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, long double&amp; val) const;
virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, void *&amp; val) const;
virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, bool&amp; val) const;</code></pre>
<p>The first virtual protected member function endeavors to match sequential elements beginning at <code>first</code> in the sequence 
<code>[first, last)</code> until it has recognized a complete, nonempty <a name="integer input field"><b>integer input field</b></a>. If successful, it converts this field to 
its equivalent value as type <i>long,</i> and stores the result in <code>val</code>. It returns an iterator designating the first element beyond 
the numeric input field. Otherwise, the function stores nothing in <code>val</code> and sets <code>ios_base::failbit</code> in <code>st</code>. It returns an 
iterator designating the first element beyond any prefix of a valid integer input field. In either case, if the return value 
equals <code>last</code>, the function sets <code>ios_base::eofbit</code> in <code>st</code>. </p>
<p>The integer input field is converted by the same rules used by the scan functions for matching and converting a series of 
<i>char</i> elements from a file. (Each such <i>char</i> element is assumed to map to an equivalent element of type <code>E</code> by a simple, 
one-to-one, mapping.) The equivalent scan conversion specification is determined as follows:</p>
<ul>
<li>If <code>x.</code><a href="IOS_ios_baseCCflags.htm#ios_base::flags"><code>flags</code></a><code>() &amp; ios_base::</code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::basefield"><code>basefield</code></a><code> == ios_base::</code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::oct"><code>oct</code></a>, the conversion specification is <code>lo</code>.</li>
<li>If <code>x.flags() &amp; ios_base::basefield == ios_base::</code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::hex"><code>hex</code></a>, the conversion specification is <code>lx</code>.</li>
<li>If <code>x.flags() &amp; ios_base::basefield == 0, the conversion specification is li</code>.</li>
<li>Otherwise, the conversion specification is <code>ld</code>.</li>
</ul>
<p>The format of an integer input field is further determined by the <a href="LOCALE2_locale.htm#locale facet">locale facet</a> <code>fac</code> returned by the call <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code> 
&lt;</code><a href="LOCALE2_numpunct.htm#numpunct"><code>numpunct</code></a><code>&lt;E&gt;(x. </code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>())</code>. Specifically: </p>
<ul>
<li><code>fac.</code><a href="LOCALE2_numpunctCCgrouping.htm#numpunct::grouping"><code>grouping</code></a><code>()</code> determines how digits are grouped to the left of any decimal point.</li>
<li><code>fac.</code><a href="LOCALE2_numpunctCCthousands_sep.htm#numpunct::thousands_sep"><code>thousands_sep</code></a><code>()</code> determines the sequence that separates groups of digits to the left of any decimal point.</li>
</ul>
<p>If no instances of <code>fac.thousands_sep()</code> occur in the numeric input field, no grouping constraint is imposed. 
Otherwise, any grouping constraints imposed by <code>fac.grouping()</code> is enforced and separators are removed before the 
scan conversion occurs.</p>
<p>The second virtual protected member function:</p>
<pre><code>virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, unsigned long&amp; val) const;</code></pre>
<p>behaves the same as the first, except that it replaces a conversion specification of <code>ld</code> with <code>lu</code>. If successful it converts 
the numeric input field to a value of type <i>unsigned long</i> and stores that value in <code>val</code>.</p>
<p>The third virtual protected member function:</p>
<pre><code>virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, double&amp; val) const;</code></pre>
<p>behaves the same as the first, except that it endeavors to match a complete, nonempty <a name="floating-point input field"><b>floating-point input field</b></a>. 
<code>fac.</code><a href="LOCALE2_numpunctCCdecimal_point.htm#numpunct::decimal_point"><code>decimal_point</code></a><code>()</code> determines the sequence that separates the integer digits from the fraction digits. The 
equivalent scan conversion specifier is <code>lf</code>.</p>
<p>The fourth virtual protected member function:</p>
<pre><code>virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, long double&amp; val) const;</code></pre>
<p>behaves the same as the third, except that the equivalent scan conversion specifier is <code>Lf</code>.</p>
<p>The fifth virtual protected member function:</p>
<pre><code>virtual iter_type <b>do_get</b>(iter_type first, iter_type last,
    ios_base&amp; x, ios_base::iostate&amp; st, void *&amp; val) const;</code></pre>
<p>behaves the same as the first, except that the equivalent scan conversion specifier is <code>p</code>.</p>
<p>The sixth virtual protected member function:</p>
<pre><code>virtual iter_type <b>do_get</b>(iter_type first, iter_type last, ios_base&amp; x,
    ios_base::iostate&amp; st, bool&amp; val) const;</code></pre>
<p>behaves the same as the first, except that it endeavors to match a complete, nonempty <a name="boolean input field"><b>Boolean input field</b></a>. If 
successful, it converts the Boolean input field to a value of type <code>bool</code> and stores that value in <code>val</code>.</p>
<p>A Boolean input field takes one of two forms. If <code>x.flags() &amp; ios_base::</code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::boolalpha"><code>boolalpha</code></a> is false, it is the same as an 
integer input field, except that the converted value must be either 0 (for false) or 1 (for true). Otherwise, the sequence 
must match either <code>fac.</code><a href="LOCALE2_numpunctCCfalsename.htm#numpunct::falsename"><code>falsename</code></a><code>()</code> (for false), or <code>fac.</code><a href="LOCALE2_numpunctCCtruename.htm#numpunct::truename"><code>truename</code></a><code>()</code> (for true).</p>
</body>
</html>

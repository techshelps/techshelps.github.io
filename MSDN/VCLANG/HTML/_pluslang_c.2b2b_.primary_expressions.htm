<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Primary Expressions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.primary_expressions"></a><sup></sup>C++ Primary Expressions</h1>
<p>
Primary expressions are the building blocks of more complex expressions. They are literals, names, and names qualified by the scope-resolution operator (<b>::</b>).</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>primary-expression</i> :</p>
<p class=indent>
<i>literal</i><br>
<b>this</b><br>
<b>::</b>  <i>identifier</i><br>
<b>::</b>  <i>operator-function-name</i><br>
<b>::</b>  <i>qualified-name</i><br>
<b>(</b>  <i>expression</i>  <b>)</b><br>
<i>name</i></p>
<p>
A <i>literal</i> is a constant primary expression. Its type depends on the form of its specification. See <a href="_pluslang_literals.htm">Literals</a>  for complete information about specifying literals.</p>
<p>
The <b>this</b> keyword is a pointer to a class object. It is available within nonstatic member functions and points to the instance of the class for which the function was invoked. The <b>this</b> keyword cannot be used outside the body of a class-member function.</p>
<p>
The type of the <b>this</b> pointer is <i>type</i> <b>*const</b> (where <i>type</i> is the class name) within functions not specifically modifying the <b>this</b> pointer. The following example shows member function declarations and the types of <b>this</b>:</p>
<pre><code>class Example
{
public:
 &nbsp;&nbsp; void Func();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; * const this
 &nbsp;&nbsp; void Func() const;&nbsp;&nbsp;&nbsp; //&nbsp; const * const this
 &nbsp;&nbsp; void Func() volatile; //&nbsp; volatile * const this
};
</code></pre>
<p>
See <a href="_pluslang_type_of_this_pointer.htm">Type of this Pointer</a>  for more information about modifying the type of the <b>this</b> pointer.</p>
<p>
The scope-resolution operator (<b>::</b>) followed by an <i>identifier</i>, <i>operator-function-name</i>, or <i>qualified-name</i> constitutes a primary expression. The type of this expression is determined by the declaration of the <i>identifier</i>, <i>operator-function-name</i>, or <i>name</i>. It is an l-value if the declaring name is an l-value. The scope-resolution operator allows a global name to be referred to, even if that name is hidden in the current scope. See <a href="_pluslang_scope.htm">Scope</a>  for an example of how to use the scope-resolution operator.</p>
<p>
An expression enclosed in parentheses is a primary expression whose type and value are identical to those of the unparenthesized expression. It is an l-value if the unparenthesized expression is an l-value.</p>
</font></BODY>
</HTML>

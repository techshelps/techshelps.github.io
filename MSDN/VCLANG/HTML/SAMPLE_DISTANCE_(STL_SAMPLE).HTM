<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>distance (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_distance">distance (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>distance</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;iterator&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class Init, class Dist&gt;
     Dist distance(InIt first, InIt last, Dist&amp; n);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 This function returns the distance between two iterators by determining how many times the first iterator would need to be incremented until it was equal to the last iterator.</p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  distance.cpp
//
// Functions:
//
//    distance()
//////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;
#include &lt;string&gt;

using namespace std;


#pragma warning (disable:4786)
typedef vector&lt;string &gt; VTRLIST;

void main() {
    VTRLIST Vector;
    VTRLIST::iterator iVector;
    VTRLIST::difference_type dTheDiff;

    Vector.push_back("A1");
    Vector.push_back("B2");
    Vector.push_back("C3");
    Vector.push_back("D4");
    Vector.push_back("E5");
    Vector.push_back("F6");
    Vector.push_back("G7");

    // Print out the list
    iVector=Vector.begin();
    cout &lt;&lt; "The list is: ";
    for (int i = 0; i &lt; 7 ; i++, iVector++)
        cout &lt;&lt; *iVector  &lt;&lt; "  ";

    // Initialize the iterator the first element"
    iVector=Vector.begin();
    cout &lt;&lt; "\n\nAdvance to the 3rd element." &lt;&lt; endl;
    advance( iVector, 2);
    cout &lt;&lt; "The element is " &lt;&lt; *iVector &lt;&lt; endl;
    dTheDiff = distance( Vector.begin(), iVector);
    cout &lt;&lt; "The distance from the beginning is " &lt;&lt; dTheDiff &lt;&lt; endl;

    cout &lt;&lt; "Calculate it in reverse order " &lt;&lt; endl;
    dTheDiff = distance( iVector, Vector.begin());
    cout &lt;&lt; "The distance is " &lt;&lt; dTheDiff &lt;&lt; endl;

    cout &lt;&lt; "\nUse distance() to count from the 3rd element to the end."
         &lt;&lt; endl;
    dTheDiff = distance( iVector, Vector.end());

    // Note that end() returns one past the end of the sequence
    cout &lt;&lt; "The distance is " &lt;&lt; dTheDiff &lt;&lt; endl;

    cout &lt;&lt;"\nUse distance() to count the total length." &lt;&lt; endl;
    dTheDiff = distance( Vector.begin(), Vector.end() );
    cout &lt;&lt; "The total distance is " &lt;&lt; dTheDiff &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>The list is: A1  B2  C3  D4  E5  F6  G7

Advance to the 3rd element.
The element is C3
The distance from the beginning is 2
Calculate it in reverse order
The distance is -2

Use distance() to count from the 3rd element to the end.
The distance is 5

Use distance() to count the total length.
The total distance is 7
</code></pre>

</body>
</html>

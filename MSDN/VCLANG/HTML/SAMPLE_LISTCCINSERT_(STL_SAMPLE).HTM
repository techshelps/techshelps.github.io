<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>list::insert (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_listCCinsert">list::insert (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>list::insert</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;list&gt;</p>
<b>Prototype:</b><br>
<pre><code>
     iterator insert(iterator it, const T&amp; x = T());
     void insert(iterator it, size_type n, const T&amp; x);
     void insert(iterator it, const_iterator first, const_iterator last);
     void insert(iterator it, const T *first, const T *last);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
Each of the member functions inserts, after the element pointed to by it in the controlled sequence, a sequence specified by the remaining operands. The first member function inserts a single element with value x and returns an iterator that points to the newly inserted element. The second member function inserts a repetition of n elements of value x. The last two member functions insert the sequence [first, last).  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// insert.cpp :  Shows the various ways to insert elements into a
//               list&lt;T&gt;.
//
// Functions:
//
//    list::insert
//////////////////////////////////////////////////////////////////////

#include &lt;list&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef list&lt;int&gt; LISTINT;

void main()
{
    int rgTest1[] = {5,6,7};
    int rgTest2[] = {10,11,12};

    LISTINT listInt;
    LISTINT listAnother;
    LISTINT::iterator i;

    // Insert one at a time
    listInt.insert (listInt.begin(), 2);
    listInt.insert (listInt.begin(), 1);
    listInt.insert (listInt.end(), 3);

    // 1 2 3
    for (i = listInt.begin(); i != listInt.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    // Insert 3 fours
    listInt.insert (listInt.end(), 3, 4);

    // 1 2 3 4 4 4
    for (i = listInt.begin(); i != listInt.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    // Insert an array in there
    listInt.insert (listInt.end(), rgTest1, rgTest1 + 3);

    // 1 2 3 4 4 4 5 6 7
    for (i = listInt.begin(); i != listInt.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    // Insert another LISTINT
    listAnother.insert (listAnother.begin(), rgTest2, rgTest2+3);
    listInt.insert (listInt.end(), listAnother.begin(), listAnother.end());

    // 1 2 3 4 4 4 5 6 7 10 11 12
    for (i = listInt.begin(); i != listInt.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>1 2 3
1 2 3 4 4 4
1 2 3 4 4 4 5 6 7
1 2 3 4 4 4 5 6 7 10 11 12
</code></pre>

</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Ellipses and Default Arguments</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_ellipses_and_default_arguments"></a><sup></sup>Ellipses and Default Arguments</h1>
<p>
Functions can be declared to accept fewer arguments than specified in the function definition, using one of two methods: ellipsis (<code>...</code>) or default arguments.</p>
<p>
Ellipses denote that arguments may be required but that the number and types are not specified in the declaration. This is normally poor C++ programming practice because it defeats one of the benefits of C++: type safety. Different conversions are applied to functions declared with ellipses than to those functions for which the formal and actual argument types are known:
<ul type=disc>
<li>
If the actual argument is of type <b>float</b>, it is promoted to type <b>double</b> prior to the function call.<br><br></li>
<li>
Any signed or unsigned <b>char</b>, <b>short</b>, enumerated type, or bit field is converted to either a signed or an unsigned <b>int</b> using integral promotion.<br><br></li>
<li>
Any argument of class type is passed by value as a data structure; the copy is created by binary copying instead of by invoking the class’s copy constructor (if one exists).</li>
</ul>
<p>
Ellipses, if used, must be declared last in the argument list. For more information about passing a variable number of arguments, see the discussion of <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_va_arg.2c_.va_end.2c_.va_start">
</object><a href=JavaScript:alink_1.Click()>va_arg, va_start, and va_list</a> in the <i>Run-Time Library Reference</i>. </p>
<p>
Default arguments enable you to specify the value an argument should assume if none is supplied in the function call. The following code fragment shows how default arguments work. For more information about restrictions on specifying default arguments, see <a href="_pluslang_default_arguments.htm">Default Arguments</a>. </p>
<pre><code>#include &lt;iostream.h&gt;

// Declare the function print that prints a string,
// then a terminator.
void print( const char *string,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *terminator = "\n" );

void main()
{
 &nbsp;&nbsp; print( "hello," );
 &nbsp;&nbsp; print( "world!" );

 &nbsp;&nbsp; print( "good morning", ", " );
 &nbsp;&nbsp; print( "sunshine." );
}

// Define print.
void print( char *string, char *terminator )
{
 &nbsp;&nbsp; if( string != NULL )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; string;

 &nbsp;&nbsp; if( terminator != NULL )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; terminator;
}
</code></pre>
<p>
The preceding program declares a function, <code>print</code>, that takes two arguments. However, the second argument, <code>terminator</code>, has a default value, <code>"\n"</code>. In <b>main</b>, the first two calls to <code>print</code> allow the default second argument to supply a new line to terminate the printed string. The third call specifies an explicit value for the second argument. The output from the program is</p>
<pre><code>hello,
world!
good morning, sunshine.
</code></pre>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>merge (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_merge">merge (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>merge</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator1,
     class InputIterator2,
     class OutputIterator&gt; inline
     OutputIterator merge( InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2
     OutputIterator result )
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The merge algorithm merges two sorted sequences: [first1..last1) and [first2..last2) into a single sorted sequence starting at result.  This version assumes that the ranges [first1..last1) and [first2..last2) are sorted using operator&lt;. If both ranges contain equal values, the value from the first range will be stored first.  The result of merging overlapping ranges is undefined.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// merge.cpp : Illustrates how to use the merge
//                     function.
//
// Functions:
//
//    merge : Merge two sorted sequences
//            into a single sorted list.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;list&gt;
#include &lt;deque&gt;

using namespace std ;

void main()
{
    const int MAX_ELEMENTS = 8 ;

    // Define a template class vector of int
    typedef vector&lt;int&gt; IntVector ;

    //Define an iterator for template class vector of ints
    typedef IntVector::iterator IntVectorIt ;

    IntVector NumbersVector(MAX_ELEMENTS) ;

    IntVectorIt startv, endv, itv ;

    // Define a template class list of int
    typedef list&lt;int&gt; IntList ;

    //Define an iterator for template class list of ints
    typedef IntList::iterator IntListIt ;

    IntList NumbersList ;

    IntListIt first, last, itl ;

    // Define a template class deque of int
    typedef deque&lt;int&gt; IntDeque ;

    //Define an iterator for template class deque of ints
    typedef IntDeque::iterator IntDequeIt ;

    IntDeque NumbersDeque(2 * MAX_ELEMENTS) ;

    IntDequeIt itd ;

    // Initialize vector NumbersVector
    NumbersVector[0] = 4 ;
    NumbersVector[1] = 10;
    NumbersVector[2] = 70 ;
    NumbersVector[3] = 10 ;
    NumbersVector[4] = 30 ;
    NumbersVector[5] = 69 ;
    NumbersVector[6] = 96 ;
    NumbersVector[7] = 100;

    startv = NumbersVector.begin() ;   // location of first
                                       // element of NumbersVector

    endv = NumbersVector.end() ;  // one past the location
                                  // last element of NumbersVector

    // sort NumbersVector, merge requires the sequences
    // to be sorted
    sort(startv, endv) ;

    // print content of NumbersVector
    cout &lt;&lt; "NumbersVector { " ;
    for(itv = startv; itv != endv; itv++)
        cout &lt;&lt; *itv &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // Initialize vector NumbersList
    for(int i = 0; i &lt; MAX_ELEMENTS; i++)
        NumbersList.push_back(i) ;

    first = NumbersList.begin() ;   // location of first
                                     // element of NumbersList

    last = NumbersList.end() ;  // one past the location
                                // last element of NumbersList

    // print content of NumbersList
    cout &lt;&lt; "NumbersList { " ;
    for(itl = first; itl != last; itl++)
        cout &lt;&lt; *itl &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // merge the elements of NumbersVector
    // and NumbersList and place the
    // results in NumbersDeque
    merge(startv, endv, first, last, NumbersDeque.begin()) ;

    cout &lt;&lt; "After calling merge\n" &lt;&lt; endl ;

    // print content of NumbersDeque
    cout &lt;&lt; "NumbersDeque { " ;
    for(itd = NumbersDeque.begin();
        itd != NumbersDeque.end(); itd++)
        cout &lt;&lt; *itd &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>NumbersVector { 4 10 10 30 69 70 96 100  }

NumbersList { 0 1 2 3 4 5 6 7  }

After calling merge

NumbersDeque { 0 1 2 3 4 4 5 6 7 10 10 30 69 70 96 100  }
</code></pre>

</body>
</html>

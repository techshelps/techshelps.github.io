<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C Function Definitions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_c_function_definitions"></a><sup></sup>C Function Definitions</h1>
<p>
A function definition specifies the name of the function, the types and number of parameters it expects to receive, and its return type. A function definition also includes a function body with the declarations of its local variables, and the statements that determine what the function does. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>translation-unit</i> :</p>
<p class=indent>
<i>external-declaration</i><br>
<i>translation-unit</i> <i>external-declaration</i></p>
<p class=dt>
<i>external-declaration</i> : /* Allowed only at external (file) scope */</p>
<p class=indent>
<i>function-definition</i><br>
<i>declaration</i></p>
<p class=dt>
<i>function-definition</i> : /* Declarator here is the function declarator */</p>
<p class=indent>
<i>declaration-specifiers</i><sub>opt</sub> <i>attribute-seq</i><sub>opt</sub> <i>declarator</i> <i>declaration-list</i><sub>opt</sub> <i>compound-statement</i> <br>
/* <i>attribute-seq</i> is Microsoft Specific */</p>
<p>
Prototype parameters are:</p>
<p class=dt>
<i>declaration-specifiers</i> :</p>
<p class=indent>
<i>storage-class-specifier</i> <i>declaration-specifiers</i> <sub>opt</sub>  <br>
<i>type-specifier</i> <i>declaration-specifiers</i> <sub>opt</sub><br>
<i>type-qualifier</i> <i>declaration-specifiers</i> <sub>opt</sub></p>
<p class=dt>
<i>declaration-list</i> :</p>
<p class=indent>
<i>declaration</i><br>
<i>declaration-list</i> <i>declaration</i></p>
<p class=dt>
<i>declarator</i> :</p>
<p class=indent>
<i>pointer</i><sub>opt</sub> <i>direct-declarator</i></p>
<p class=dt>
<i>direct-declarator</i> : /* A function declarator */ </p>
<p class=indent>
<i>direct-declarator</i> <b>(</b> <i>parameter-type-list</i> <b>)</b>  /* New-style declarator */<br>
<i>direct-declarator</i> <b>(</b> <i>identifier-list</i> <sub>opt</sub> <b>)</b>  /* Obsolete-style declarator */</p>
<p>
The parameter list in a definition uses this syntax: </p>
<p class=dt>
<i>parameter-type-list</i> : /* The parameter list */</p>
<p class=indent>
<i>parameter-list</i><br>
<i>parameter-list</i> <b>, ...</b></p>
<p class=dt>
<i>parameter-list</i> :</p>
<p class=indent>
<i>parameter-declaration</i><br>
<i>parameter-list</i> <b>,</b> <i>parameter-declaration</i></p>
<p class=dt>
<i>parameter-declaration</i> :</p>
<p class=indent>
<i>declaration-specifiers</i> <i>declarator</i><br>
<i>declaration-specifiers</i> <i>abstract-declarator</i> <sub>opt</sub></p>
<p>
The parameter list in an old-style function definition uses this syntax:</p>
<p class=dt>
<i>identifier-list</i> : /* Used in obsolete-style function definitions and declarations */</p>
<p class=indent>
<i>identifier</i><br>
<i>identifier-list</i> <b>,</b> <i>identifier</i></p>
<p>
The syntax for the function body is:</p>
<p class=dt>
<i>compound-statement</i> : /* The function body */ </p>
<p class=indent>
<b>{</b> <i>declaration</i>-<i>list</i> <sub>opt</sub> <i>statement-list</i> <sub>opt</sub> <b>}</b></p>
<p>
The only storage-class specifiers that can modify a function declaration are <b>extern</b> and <b>static</b>. The <b>extern</b> specifier signifies that the function can be referenced from other files; that is, the function name is exported to the linker. The <b>static</b> specifier signifies that the function cannot be referenced from other files; that is, the name is not exported by the linker. If no storage class appears in a function definition, <b>extern</b> is assumed. In any case, the function is always visible from the definition point to the end of the file. </p>
<p>
The optional <i>declaration-specifiers</i> and mandatory <i>declarator</i> together specify the function’s return type and name. The <i>declarator</i> is a combination of the identifier that names the function and the parentheses following the function name. The optional <i>attribute-seq</i> nonterminal is a Microsoft-specific feature defined in <a href="_clang_function_attributes.htm">Function Attributes</a>. </p>
<p>
The <i>direct-declarator</i> (in the <i>declarator</i> syntax) specifies the name of the function being defined and the identifiers of its parameters. If the <i>direct-declarator</i> includes a <i>parameter-type-list</i>, the list specifies the types of all the parameters. Such a declarator also serves as a function prototype for later calls to the function. </p>
<p>
A <i>declaration</i> in the <i>declaration-list</i> in function definitions cannot contain a <i>storage-class-specifier</i> other than <b>register</b>. The <i>type-specifier</i> in the <i>declaration-specifiers</i> syntax can be omitted only if the <b>register</b> storage class is specified for a value of <b>int</b> type. </p>
<p>
The <i>compound-statement</i> is the function body containing local variable declarations, references to externally declared items, and statements. </p>
<p>
The sections <a href="_clang_function_attributes.htm">Function Attributes</a>, <a href="_clang_storage_class.htm">Storage Class</a>, <a href="_clang_return_type.htm">Return Type</a>, <a href="_clang_parameters.htm">Parameters</a>, and <a href="_clang_function_body.htm">Function Body</a> describe the components of the function definition in detail. </p>
</font></BODY>
</HTML>

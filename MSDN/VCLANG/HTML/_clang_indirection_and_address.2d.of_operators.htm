<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Indirection and Address-of Operators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_indirection_and_address.2d.of_operators"></a><sup></sup>Indirection and Address-of Operators</h1>
<p>
The indirection operator (<b>*</b>) accesses a value indirectly, through a pointer. The operand must be a pointer value. The result of the operation is the value addressed by the operand; that is, the value at the address to which its operand points. The type of the result is the type that the operand addresses.</p>
<p>
If the operand points to a function, the result is a function designator. If it points to a storage location, the result is an l-value designating the storage location.</p>
<p>
If the pointer value is invalid, the result is undefined. The following list includes some of the most common conditions that invalidate a pointer value.
<ul type=disc>
<li>
The pointer is a null pointer. <br><br></li>
<li>
The pointer specifies the address of a local item that is not visible at the time of the reference. <br><br></li>
<li>
The pointer specifies an address that is inappropriately aligned for the type of the object pointed to.<br><br></li>
<li>
The pointer specifies an address not used by the executing program.</li>
</ul>
<p>
The address-of operator (<b>&amp;</b>) gives the address of its operand. The operand of the address-of operator can be either a function designator or an l-value that designates an object that is not a bit field and is not declared with the <b>register</b> storage-class specifier.</p>
<p>
The result of the address operation is a pointer to the operand. The type addressed by the pointer is the type of the operand.</p>
<p>
The address-of operator can only be applied to variables with fundamental, structure, or union types that are declared at the file-scope level, or to subscripted array references. In these expressions, a constant expression that does not include the address-of operator can be added to or subtracted from the address expression.</p>
<p class=label>
<b>Examples</b></p>
<p>
The following examples use these declarations:</p>
<pre><code>int *pa, x;
int a[20];
double d;
</code></pre>
<p>
This statement uses the address-of operator:</p>
<pre><code>pa = &amp;a[5];
</code></pre>
<p>
The address-of operator (<b>&amp;</b>) takes the address of the sixth element of the array <code>a</code>. The result is stored in the pointer variable <code>pa</code>.</p>
<pre><code>x = *pa;
</code></pre>
<p>
The indirection operator (<b>*</b>) is used in this example to access the <b>int</b> value at the address stored in <code>pa</code>. The value is assigned to the integer variable <code>x</code>.</p>
<pre><code>if( x == *&amp;x )
 &nbsp;&nbsp; printf( "True\n" );
</code></pre>
<p>
This example prints the word <code>True</code>, demonstrating that the result of applying the indirection operator to the address of <code>x</code> is the same as <code>x</code>.</p>
<pre><code>int roundup( void );&nbsp;&nbsp;&nbsp;&nbsp; /* Function declaration */

int&nbsp; *proundup&nbsp; = roundup;
int&nbsp; *pround&nbsp; = &amp;roundup;
</code></pre>
<p>
Once the function <code>roundup</code> is declared, two pointers to <code>roundup</code> are declared and initialized. The first pointer, <code>proundup</code>, is initialized using only the name of the function, while the second, <code>pround</code>, uses the address-of operator in the initialization. The initializations are equivalent.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Inheritance</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_multiple_inheritance"></a><sup></sup>Multiple Inheritance</h1>
<p>
Later versions of C++ introduced a “multiple inheritance” model for inheritance. In a multiple-inheritance graph, the derived classes may have a number of direct base classes. Consider the graph in Figure 9.3.</p>
<p class=label>
<b>Figure 9.3&nbsp;&nbsp;&nbsp;Simple Multiple-Inheritance Graph</b></p>
<p>
<img src="l09gra3.gif" border=0></p>
<p>
The diagram in Figure 9.3 shows a class, <code>CollectibleString</code>. It is like a <code>Collectible</code> (something that can be contained in a collection), and it is like a <code>String</code>. Multiple inheritance is a good solution to this kind of problem (where a derived class has attributes of more than one base class) because it is easy to form a <code>CollectibleCustomer</code>, <code>CollectibleWindow</code>, and so on.</p>
<p>
If the properties of either class are not required for a particular application, either class can be used alone or in combination with other classes. Therefore, given the hierarchy depicted in Figure 9.3 as a basis, you can form noncollectible strings and collectibles that are not strings. This flexibility is not possible using single inheritance.</p>
</font></BODY>
</HTML>

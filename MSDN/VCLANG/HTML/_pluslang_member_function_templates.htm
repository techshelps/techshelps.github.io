<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Member Function Templates</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_member_function_templates"></a><sup></sup>Member Function Templates</h1>
<p>
After declaring a templated class, define member functions as function templates. For example:</p>
<pre><code>template&lt;class T, int i&gt; class MyStack
{
 &nbsp;&nbsp; T*&nbsp; pStack;
 &nbsp;&nbsp; T StackBuffer[i];
 &nbsp;&nbsp; int cItems = i * sizeof(T);
public: 
 &nbsp;&nbsp; MyStack( void );
 &nbsp;&nbsp; void push( const T item );
 &nbsp;&nbsp; T&amp; pop( void );
};

template&lt; class T, int i &gt; MyStack&lt; T, i &gt;::MyStack( void )
{ ... } ;
template&lt; class T, int i &gt; void MyStack&lt; T, i &gt;::push( const T item )
{ ... } ;
template&lt; class T, int i &gt; T&amp; MyStack&lt; T, i &gt;::pop( void )
{ ... } ;
</code></pre>
<p>
Note that the definition of the constructor function does not include the template argument list twice.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Representing Pointers to Members of Classes Using Inheritance</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_representing_pointers_to_members_of_classes_using_inheritance"></a><sup></sup>Representing Pointers to Members of Classes Using Inheritance</h1>
<p>
Declaring a pointer to a member of a class prior to the class definition impacts the size and speed of the resulting executable file. The number of bytes required to represent a pointer to a member of a class and the code required to interpret the representation may depend on whether the class is defined with no, single, multiple, or virtual inheritance. </p>
<p>
In general, the more complex the inheritance used by a class, the greater the number of bytes required to represent a pointer to a member of the class and the larger the code required to interpret the pointer. </p>
<p>
If you need to declare a pointer to a member of a class prior to defining the class, you must use either the /vmg command-line option or the related <b>pointers_to_members</b> pragma. Or you can specify the inheritance used in the class declaration using the <b>__single_inheritance</b>, <b>__multiple_inheritance</b>, or <b>__virtual_inheritance</b> keywords, thus allowing control of the code generated on a per-class basis. These options are explained in the following.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you always declare a pointer to a member of a class after defining the class, you don’t need to use any of these options. </p>
<p>
Microsoft attempts to optimize the representation and code generated for pointers to members by selecting the most compact representation possible. This requires defining the class the pointer to member is based upon at the point where the pointer to member is declared. The <b>pointers_to_members</b> pragma allows you to relax this restriction and to control the pointer size and the code required to interpret the pointer. </p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>#pragma pointers_to_members(</b> <i>pointer-declaration</i><b>, [</b><i>most-general-representation</i><b>] )</b></p>
<p>
The <i>pointer-declaration</i> argument specifies whether you have declared a pointer to a member before or after the associated function definition. The <i>pointer-declaration</i> argument can be either <b>full_generality</b> or <b>best_case</b>.</p>
<p>
The <i>most-general-representation</i> argument specifies the smallest pointer representation that the compiler can safely use to reference any pointer to a member of a class in a translation unit. This argument can be <b>single_inheritance</b>, <b>multiple_inheritance</b>, or <b>virtual_inheritance</b>.</p>
<p>
The <b>pointers_to_members</b> pragma with the <b>best_case</b> argument is the compiler default. You can use this default if you always define a class before declaring a pointer to a member of the class. When the compiler encounters the declaration of a pointer to a member of a class, it already has knowledge of the kind of inheritance used by the class. Thus, the compiler can use the smallest possible representation of a pointer and generate the smallest amount of code required to operate on the pointer for each kind of inheritance. This is equivalent to using /vmb on the command-line to specify best-case representation for all classes in the compilation unit. </p>
<p>
Use the <b>pointers_to_members</b> pragma with the <b>full_generality</b> argument if you need to declare a pointer to a member of a class before defining the class. (This need can arise if you define members in two different classes that reference each other using pointers to members. For such mutually referencing classes, one class must be referenced before it is defined.) The compiler uses the most general representation for the pointer to the member. This is equivalent to the /vmg compiler option. If you specify <b>full-generality</b>, you must also specify <b>single-inheritance</b>, <b>multiple-inheritance</b>, or <b>virtual-inheritance</b>. This is equivalent to using the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_.2f.vmb.2c_2f.vmg">
</object><a href=JavaScript:alink_1.Click()>/vmg</a> compiler option with the /vms, /vmm, or /vmv option. </p>
<p>
The <b>pointers_to_members</b> pragma with the <b>full_generality, single_inheritance</b> arguments (/vms option with the /vmg option) specifies that the most general representation of a pointer to a member of a class is one that uses no inheritance or single inheritance. This is the smallest possible representation of a pointer to a member of a class. The compiler generates an error if the inheritance model of a class definition for which a pointer to a member is declared is multiple or virtual. For example, placing this statement</p>
<pre><code>#pragma pointers_to_members(full_generality, single_inheritance)
</code></pre>
<p>
before a class definition declares that all class definitions that follow use only single inheritance. Once specified, the option specified with the <b>pointers_to_members</b> pragma cannot be changed.</p>
<p>
The <b>pointers_to_members</b> pragma with the <b>full_generality, multiple_inheritance</b> arguments (/vmm option with the /vmg option) specifies that the most general representation of a pointer to a member of a class is one that uses multiple inheritance. This representation is larger than that required for single inheritance. The compiler generates an error if the inheritance model of a class definition for which a pointer to a member is declared is virtual. </p>
<p>
The <b>pointers_to_members</b> pragma with the <b>full_generality, virtual_inheritance</b> arguments (/vmv option with the /vmg option) specifies that the most general representation of a pointer to a member of a class is one that uses virtual inheritance. In terms of pointer size and the code required to interpret the pointer, this is the most expensive option. However, this option never causes an error and is the default when the <b>full_generality</b> argument to the <b>pointers_to_members</b> pragma is specified or when the /vmg command-line option is used. </p>
<p class=label>
<b>Syntax</b></p>
<p>
The equivalent language construction uses this syntax:</p>
<p class=dt>
<i>class-declaration</i> :</p>
<p class=indent>
<i>class inheritance-type</i><sub>opt</sub> <i>class-name</i><b>;</b></p>
<p class=dt>
<i>inheritance-type</i> :</p>
<p class=indent>
<b>__single_inheritance</b><br>
<b>__multiple_inheritance</b><br>
<b>__virtual_inheritance</b></p>
<p>
As shown in this example,</p>
<pre><code>class __single_inheritance S;
int S::p;
</code></pre>
<p>
regardless of compiler options or pragmas, pointers to members of class <code>S</code> will use the smallest possible representation.</p>
<p>
You can also explicitly give a forward declaration to the pointer-to-member representation of a class that has a forward declaration.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The same forward declaration of a class pointer-to-member representation should occur in every translation unit that declares pointers to members of that class, and the declaration should occur before the pointers to members are declared.</p>
</font></BODY>
</HTML>

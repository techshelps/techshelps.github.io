<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The naked Attribute</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_the_naked_attribute"></a><sup></sup>The naked Attribute</h1>
<p>
For functions declared with the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_langref_naked">
</object><a href=JavaScript:alink_1.Click()>naked</a> attribute, the compiler generates code without prolog and epilog code. You can use this feature to write your own prolog/epilog code sequences using inline assembler code. Naked functions are particularly useful in writing virtual device drivers.</p>
<p>
Because the <b>naked</b> attribute is only relevant to the definition of a function and is not a type modifier, naked functions use the extended attribute syntax, described previously. For example, this code defines a function with the <b>naked</b> attribute:</p>
<pre><code>__declspec( naked ) int func( formal_parameters )
{
   // Function body
}
</code></pre>
<p>
Or, alternatively:</p>
<pre><code>#define Naked   __declspec( naked )
Naked int func( formal_parameters )
{
   // Function body
}
</code></pre>
<p>
The <b>naked</b> attribute affects only the nature of the compiler’s code generation for the function’s prolog and epilog sequences. It does not affect the code that is generated for calling such functions. Thus, the <b>naked</b> attribute is not considered part of the function’s type, and function pointers cannot have the <b>naked</b> attribute. Furthermore, the <b>naked</b> attribute cannot be applied to a data definition. For example, this code sample generates an error:</p>
<pre><code>__declspec( naked ) int i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error--naked attribute not
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // permitted on data declarations.
</code></pre>
<p>
The <b>naked</b> attribute is relevant only to the definition of the function and cannot be specified in the function’s prototype. For example, this declaration generates a compiler error:</p>
<pre><code>__declspec( naked ) int func();&nbsp; // Error--naked attribute not 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // permitted on function declarations
</code></pre>
</font></BODY>
</HTML>

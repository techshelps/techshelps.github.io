<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ctype</title></head>
<body bgcolor=white>

<h2><a name="ctype">ctype</a></h2>
<META NAME="MS-HKWD" CONTENT="ctype">
<p><a href="LOCALE2_ctypeCCchar_type.htm#ctype::char_type"><code><b>char_type</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCctype.htm#ctype::ctype"><code><b>ctype</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCdo_is.htm#ctype::do_is"><code><b>do_is</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCdo_narrow.htm#ctype::do_narrow"><code><b>do_narrow</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCdo_scan_is.htm#ctype::do_scan_is"><code><b>do_scan_is</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCdo_scan_not.htm#ctype::do_scan_not"><code><b>do_scan_not</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCdo_tolower.htm#ctype::do_tolower"><code><b>do_tolower</b></code></a><code><b> &#183; 
</b></code><a href="LOCALE2_ctypeCCdo_toupper.htm#ctype::do_toupper"><code><b>do_toupper</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCdo_widen.htm#ctype::do_widen"><code><b>do_widen</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCis.htm#ctype::is"><code><b>is</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCnarrow.htm#ctype::narrow"><code><b>narrow</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCscan_is.htm#ctype::scan_is"><code><b>scan_is</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCscan_not.htm#ctype::scan_not"><code><b>scan_not</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCtolower.htm#ctype::tolower"><code><b>tolower</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCtoupper.htm#ctype::toupper"><code><b>toupper</b></code></a><code><b> &#183; </b></code><a href="LOCALE2_ctypeCCwiden.htm#ctype::widen"><code><b>widen</b></code></a><code><b> </b></code></p>
<pre><code>template&lt;class E&gt;
    class <b>ctype</b> : public locale::facet, public ctype_base {
public:
    typedef E <a href="LOCALE2_ctypeCCchar_type.htm#ctype::char_type"><b>char_type</b></a>;
    explicit <a href="LOCALE2_ctypeCCctype.htm#ctype::ctype"><b>ctype</b></a>(size_t refs = 0);
    bool <a href="LOCALE2_ctypeCCis.htm#ctype::is"><b>is</b></a>(mask msk, E ch) const;
    const E *<a href="LOCALE2_ctypeCCis.htm#ctype::is"><b>is</b></a>(const E *first, const E *last, mask *dst) const;
    const E *<a href="LOCALE2_ctypeCCscan_is.htm#ctype::scan_is"><b>scan_is</b></a>(mask msk, const E *first, const E *last) const;
    const E *<a href="LOCALE2_ctypeCCscan_not.htm#ctype::scan_not"><b>scan_not</b></a>(mask msk, const E *first, const E *last) const;
    E <a href="LOCALE2_ctypeCCtoupper.htm#ctype::toupper"><b>toupper</b></a>(E ch) const;
    const E *<a href="LOCALE2_ctypeCCtoupper.htm#ctype::toupper"><b>toupper</b></a>(E *first, E *last) const;
    E <a href="LOCALE2_ctypeCCtolower.htm#ctype::tolower"><b>tolower</b></a>(E ch) const;
    const E *<a href="LOCALE2_ctypeCCtolower.htm#ctype::tolower"><b>tolower</b></a>(E *first, E *last) const;
    E <a href="LOCALE2_ctypeCCwiden.htm#ctype::widen"><b>widen</b></a>(char ch) const;
    const char *<a href="LOCALE2_ctypeCCwiden.htm#ctype::widen"><b>widen</b></a>(char *first, char *last, E *dst) const;
    char <a href="LOCALE2_ctypeCCnarrow.htm#ctype::narrow"><b>narrow</b></a>(E ch, char dflt) const;
    const E *<a href="LOCALE2_ctypeCCnarrow.htm#ctype::narrow"><b>narrow</b></a>(const E *first, const E *last,
        char dflt, char *dst) const;
    static locale::id <a href="LOCALE2_ctype.htm#ctype::id"><b>id</b></a>;
protected:
    <b>~ctype()</b>;
    virtual bool <a href="LOCALE2_ctypeCCdo_is.htm#ctype::do_is"><b>do_is</b></a>(mask msk, E ch) const;
    virtual const E *<a href="LOCALE2_ctypeCCdo_is.htm#ctype::do_is"><b>do_is</b></a>(const E *first, const E *last,
        mask *dst) const;
    virtual const E *<a href="LOCALE2_ctypeCCdo_scan_is.htm#ctype::do_scan_is"><b>do_scan_is</b></a>(mask msk, const E *first,
        const E *last) const;
    virtual const E *<a href="LOCALE2_ctypeCCdo_scan_not.htm#ctype::do_scan_not"><b>do_scan_not</b></a>(mask msk, const E *first,
        const E *last) const;
    virtual E <a href="LOCALE2_ctypeCCdo_toupper.htm#ctype::do_toupper"><b>do_toupper</b></a>(E ch) const;
    virtual const E *<a href="LOCALE2_ctypeCCdo_toupper.htm#ctype::do_toupper"><b>do_toupper</b></a>(E *first, E *last) const;
    virtual E <a href="LOCALE2_ctypeCCdo_tolower.htm#ctype::do_tolower"><b>do_tolower</b></a>(E ch) const;
    virtual const E *<a href="LOCALE2_ctypeCCdo_tolower.htm#ctype::do_tolower"><b>do_tolower</b></a>(E *first, E *last) const;
    virtual E <a href="LOCALE2_ctypeCCdo_widen.htm#ctype::do_widen"><b>do_widen</b></a>(char ch) const;
    virtual const char *<a href="LOCALE2_ctypeCCdo_widen.htm#ctype::do_widen"><b>do_widen</b></a>(char *first, char *last, E *dst) const;
    virtual char <a href="LOCALE2_ctypeCCdo_narrow.htm#ctype::do_narrow"><b>do_narrow</b></a>(E ch, char dflt) const;
    virtual const E *<a href="LOCALE2_ctypeCCdo_narrow.htm#ctype::do_narrow"><b>do_narrow</b></a>(const E *first, const E *last,
        char dflt, char *dst) const;
    };</code></pre>
<p>The template class describes an object that can serve as a <a href="LOCALE2_locale.htm#locale facet">locale facet</a>, to characterize various properties of a 
"character" (element) of type <code>E</code>. Such a facet also converts between sequences of <code>E</code> elements and sequences of <i>char.</i></p>
<p>An object of class <code>ctype&lt;E&gt;</code> stores a pointer to the first element of a <a name="ctype mask table"><b>ctype mask table</b></a>, an array of <code>UCHAR_MAX</code><code> + 1</code> 
elements of type <code>ctype_base::</code><a href="LOCALE2_ctype_base.htm#ctype_base::mask"><code>mask</code></a>. It also stores a Boolean object that indicates whether the array should be deleted 
when the <code>ctype&lt;E&gt;</code> object is destroyed.</p>
<p>As with any locale facet, the static object <a name="ctype::id"><code><b>id</b></code></a> has an initial stored value of zero. The first attempt to access its stored 
value stores a unique positive value in <code>id</code>.</p>
<p>The Standard C++ library defines two explicit specializations of this template class:</p>
<ul>
<li><a href="LOCALE2_ctypeLcharG.htm#ctype&lt;char&gt;"><code>ctype&lt;char&gt;</code></a>, whose differences are described separately</li>
<li><code>ctype&lt;wchar_t&lt;</code>, which treats elements as wide characters</li>
</ul>
<p>In this <a href="INDEX_Table_of_Contents.htm#implementation">implementation</a>, other specializations of template class <code>ctype&lt;E&gt;</code>:</p>
<ul>
<li>Convert a value <code>ch</code> of type <code>E</code> to a value of type <i>char</i> with the expression <code>(char)ch</code>. </li>
<li>Convert a value <code>c</code> of type <i>char</i> to a value of type <code>E</code> with the expression <code>E(c)</code>.</li>
</ul>
<p>All other operations are performed on <i>char</i> values the same as for the specialization <code>ctype&lt;char&gt;</code>.</p>
</body>
</html>

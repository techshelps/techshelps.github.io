<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conversions and Enumerated Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_conversions_and_enumerated_types"></a><sup></sup>Conversions and Enumerated Types</h1>
<p>
Because enumerated types are integral types, any enumerator can be converted to another integral type by integral promotion. Consider this example:</p>
<pre><code>enum Days
{
 &nbsp;&nbsp; Sunday,
 &nbsp;&nbsp; Monday,
 &nbsp;&nbsp; Tuesday,
 &nbsp;&nbsp; Wednesday,
 &nbsp;&nbsp; Thursday,
 &nbsp;&nbsp; Friday,
 &nbsp;&nbsp; Saturday
};

int&nbsp; i;
Days d = Thursday;

i = d;&nbsp;&nbsp;&nbsp; // Converted by integral promotion.
cout &lt;&lt; "i = " &lt;&lt; i &lt;&lt; "\n";
</code></pre>
<p>
However, there is no implicit conversion from any integral type to an enumerated type. Therefore (continuing with the preceding example), the following statement is in error:</p>
<pre><code>d = 6;&nbsp;&nbsp;&nbsp; // Erroneous attempt to set d to Saturday.
</code></pre>
<p>
Assignments such as this, where no implicit conversion exists, must use a cast to perform the conversion:</p>
<pre><code>d = (Days)6;&nbsp;&nbsp;&nbsp; // Explicit cast-style conversion to type Days.
d = Days( 4 );&nbsp; // Explicit function-style conversion to type Days.
</code></pre>
<p>
The preceding example shows conversions of values that coincide with the enumerators. There is no mechanism that protects you from converting a value that does not coincide with one of the enumerators. For example:</p>
<pre><code>d = Days( 967 );
</code></pre>
<p>
Some such conversions may work. However, there is no guarantee that the resultant value will be one of the enumerators. Additionally, if the size of the enumerator is too small to hold the value being converted, the value stored may not be what you expect.</p>
</font></BODY>
</HTML>

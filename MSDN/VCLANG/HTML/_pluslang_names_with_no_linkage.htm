<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Names with No Linkage</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_names_with_no_linkage"></a><sup></sup>Names with No Linkage</h1>
<p>
The only names that have no linkage are:
<ul type=disc>
<li>
Function parameters.<br><br></li>
<li>
Block-scoped names not declared as <b>extern</b> or <b>static</b>.<br><br></li>
<li>
Enumerators.<br><br></li>
<li>
Names declared in a <b>typedef</b> statement. An exception is when the <b>typedef</b> statement is used to provide a name for an unnamed class type. The name may then have external linkage if the class has external linkage. The following example shows a situation in which a <b>typedef</b> name has external linkage:<pre><code>typedef struct
{
 &nbsp;&nbsp; short x;
 &nbsp;&nbsp; short y;
} POINT;
extern int MoveTo( POINT pt );
</code></pre>
<p class=tl>
The <b>typedef</b> name, <code>POINT</code>, becomes the class name for the unnamed structure. It is then used to declare a function with external linkage.</P></li>
</ul>
<p>
Because <b>typedef</b> names have no linkage, their definitions can differ between translation units. Because the compilations take place discretely, there is no way for the compiler to detect these differences. As a result, errors of this kind are not detected until link time. Consider the following case:</p>
<pre><code>// Translation unit 1
typedef int INT

INT myInt;
...

// Translation unit 2
typedef short INT

extern INT myInt;
...
</code></pre>
<p>
The preceding code generates an “unresolved external” error at link time.</p>
<p>
C++ functions can be defined only in file or class scope. The following example illustrates how to define functions and shows an erroneous function definition:</p>
<pre><code>#include &lt;iostream.h&gt;

void ShowChar( char ch );&nbsp;&nbsp;&nbsp; // Declare function ShowChar.

void ShowChar( char ch )&nbsp;&nbsp;&nbsp;&nbsp; // Define function ShowChar.
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Function has file scope.
   cout &lt;&lt; ch;
}

struct Char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define class Char.
{
 &nbsp;&nbsp; char Show();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declare Show function.
 &nbsp;&nbsp; char Get();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declare Get function.
 &nbsp;&nbsp; char ch;
};

char Char::Show()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define Show function
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; with class scope.
 &nbsp;&nbsp; cout &lt;&lt; ch;
 &nbsp;&nbsp; return ch;
}

void GoodFuncDef( char ch )&nbsp; // Define GoodFuncDef
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; with file scope.
 &nbsp;&nbsp; int BadFuncDef( int i )&nbsp; // Erroneous attempt to
 &nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; nest functions.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return i * 7;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; for( int i = 0; i &lt; BadFuncDef( 2 ); ++i )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; ch;
 &nbsp;&nbsp; cout &lt;&lt; "\n";
}
</code></pre>
</font></BODY>
</HTML>

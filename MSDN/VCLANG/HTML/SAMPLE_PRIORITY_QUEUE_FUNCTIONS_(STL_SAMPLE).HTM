<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>priority_queue functions (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_priority_queue_functions">priority_queue functions (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>priority_queue::push, pop, empty,</code> and <code>top</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;queue&gt;</p>
<b>Prototype:</b><br>
<pre><code>
     priority_queue::push();
     priority_queue::pop();
     priority_queue::empty();
     priority_queue::top();
     priority_queue::size();
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The sample shows priority_queue implementation using deque and vector containers.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  priority_queue.cpp
//
// Functions:
//
//    priority_queue::push(), priority_queue::pop(),
//    priority_queue::empty(), priority_queue::top(), queue::size()
//
//////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
#include &lt;vector&gt;
#include &lt;functional&gt;

using namespace std ;

// Using priority_queue with deque
// Use of function greater sorts the items in ascending order
typedef deque&lt;int&gt; INTDQU;
typedef priority_queue&lt;int&gt; INTPRQUE;

// Using priority_queue with vector
// Use of function less sorts the items in descending order
typedef vector&lt;char&gt; CHVECTOR;
typedef priority_queue&lt;char&gt; CHPRQUE;

void main(void)
{
    int size_q;
    INTPRQUE   q;
    CHPRQUE    p;

    // Insert items in the priority_queue(uses deque)
    q.push(42);
    q.push(100);
    q.push(49);
    q.push(201);

 </code></pre>

<p>Program Output is:</p>

<pre><code>
    // Output the size of priority_queue
    size_q = q.size();
    cout &lt;&lt; "size of q is:" &lt;&lt; size_q &lt;&lt; endl;

   // Output items in priority_queue using top()
    // and use pop() to get to next item until
    // priority_queue is empty
    while (!q.empty())
    {
        cout &lt;&lt; q.top() &lt;&lt; endl;
        q.pop();

    }

// Insert items in the priority_queue(uses vector)
    p.push('c');
    p.push('a');
    p.push('d');
    p.push('m');
    p.push('h');

    // Output the item at the top using top()
    cout &lt;&lt; p.top() &lt;&lt; endl;

    // Output the size of priority_queue
    size_q = p.size();
    cout &lt;&lt; "size of p is:" &lt;&lt; size_q &lt;&lt; endl;

    // Output items in priority_queue using top()
    // and use pop() to get to next item until
    // priority_queue is empty
    while (!p.empty())
    {
        cout &lt;&lt; p.top() &lt;&lt; endl;
        p.pop();

    }
}

Program Output:

42
size of q is:4
42
49
100
201
m
size of p is:5
m
h
d
c
a
</code></pre>

</body>
</html>

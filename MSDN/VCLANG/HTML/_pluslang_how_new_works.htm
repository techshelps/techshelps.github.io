<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How new Works</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_how_new_works"></a><sup></sup>How new Works</h1>
<p>
The <i>allocation-expression</i> — the expression containing the <b>new</b> operator — does three things:
<ul type=disc>
<li>
Locates and reserves storage for the object or objects to be allocated. When this stage is complete, the correct amount of storage is allocated, but it is not yet an object.<br><br></li>
<li>
Initializes the object(s). Once initialization is complete, enough information is present for the allocated storage to be an object.<br><br></li>
<li>
Returns a pointer to the object(s) of a pointer type derived from <i>new-type-name</i> or <i>type-name</i>. The program uses this pointer to access the newly allocated object.</li>
</ul>
<p>
The <b>new</b> operator invokes the function <b>operator new</b>. For arrays of any type, and for objects that are not of <b>class</b>, <b>struct</b>, or <b>union</b> types, a global function, <b>::operator new</b>, is called to allocate storage. Class-type objects can define their own <b>operator new</b> static member function on a per-class basis.</p>
<p>
When the compiler encounters the <b>new</b> operator to allocate an object of type <i>type</i>, it issues a call to <i>type</i><b>::operator new( sizeof(</b> <i>type</i> <b>) )</b> or, if no user-defined <b>operator new</b> is defined, <b>::operator new( sizeof(</b> <i>type</i> <b>) )</b>. Therefore, the <b>new</b> operator can allocate the correct amount of memory for the object.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The argument to <b>operator new</b> is of type <b>size_t</b>. This type is defined in DIRECT.H, MALLOC.H, MEMORY.H, SEARCH.H, STDDEF.H, STDIO.H, STDLIB.H, STRING.H, and TIME.H.</p>
<p>
An option in the syntax allows specification of <i>placement</i> (see Syntax for <a href="_pluslang_new_operator.htm">new Operator</a>). The <i>placement</i> parameters can be used only for user-defined implementations of <b>operator new</b>; it allows extra information to be passed to <b>operator new</b>. An expression with a <i>placement</i> field such as</p>
<pre><code>T *TObject = new ( 0x0040 ) T;
</code></pre>
<p>
is translated to</p>
<pre><code>T *TObject = T::operator new( sizeof( T ), 0x0040 );
</code></pre>
<p>
The original intention of the <i>placement</i> field was to allow hardware-dependent objects to be allocated at user-specified addresses.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Although the preceding example shows only one argument in the <i>placement</i> field, there is no restriction on how many extra arguments can be passed to <b>operator new</b> this way. </p>
<p>
Even when <b>operator new</b> has been defined for a class type, the global operator can be used by using the form of this example:</p>
<pre><code>T *TObject =::new TObject;
</code></pre>
<p>
The scope-resolution operator (<b>::</b>) forces use of the global <b>new</b> operator.</p>
</font></BODY>
</HTML>

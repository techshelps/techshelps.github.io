<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>partition (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_partition">partition (STL Sample)</a></h2>

<p>The sample code below illustrates how to use the <code>partition</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class BidirectionalIterator, class Predicate&gt; inline
     BidirectionalIterator partition(BidirectionalIterator first, BidirectionalIterator last, Predicate predicate)

</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The partition algorithm arranges elements in the range [first, last) such that the elements for which predicate returns true are before the elements for which predicate returns false. The algorithm returns an iterator positioned at the first element for which predicate returns false.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// partition.cpp : Illustrates how to use the partition function.
//
// Functions:
//
//   partition  - Partition a range using a predicate.
//
//   begin      - Returns an iterator that points to the first element
//                in a sequence.
//
//   end        - Returns an iterator that points one past the end of
//                a sequence.
//
//   bind2nd    - Returns true for elements for which the condition
//                is true.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;

using namespace std;


void main()
{
    const int VECTOR_SIZE = 8 ;

    // Define a template class vector of integers
    typedef vector&lt;int &gt; IntVector ;

    //Define an iterator for template class vector of integer
    typedef IntVector::iterator IntVectorIt ;

    IntVector Numbers(VECTOR_SIZE) ;   //vector containing numbers

    IntVectorIt start, end, it ;

    start = Numbers.begin() ;   // location of first
                                // element of Numbers

    end = Numbers.end() ;       // one past the location
                                // last element of Numbers

    //Initialize vector Numbers
    Numbers[0] = 6 ;
    Numbers[1] = 20 ;
    Numbers[2] = 10 ;
    Numbers[3] = 15 ;
    Numbers[4] = 12 ;
    Numbers[5] = 7 ;
    Numbers[6] = 9 ;
    Numbers[7] = 10 ;

    cout &lt;&lt; "Before calling partition" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // partition the sequence such that all the elements
    // less than 11 appear before all the elements greater than 11
    it =  partition(start, end, bind2nd(less&lt;int&gt;(), 11)) ;

    cout &lt;&lt; "After calling partition" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Before calling partition
Numbers { 6 20 10 15 12 7 9 10  }

After calling partition
Numbers { 6 10 10 9 7 12 15 20  }
</code></pre>

</body>
</html>

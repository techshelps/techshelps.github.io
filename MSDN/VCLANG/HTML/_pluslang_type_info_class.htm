<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>type_info Class</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_type_info_class"></a><sup></sup>type_info Class</h1>
<p>
The type_info class describes type information generated within the program by the compiler. Objects of this class effectively store a pointer to a name for the type. The type_info class also stores an encoded value suitable for comparing two types for equality or collating order. The encoding rules and collating sequence for types are unspecified and may differ between programs.</p>
<p>
The <code>typeinfo.h</code> header file must be included in order to use the type_info class.</p>
<pre><code>class type_info {
public:
   virtual ~type_info();
   int operator==(const type_info&amp; rhs) const;
   int operator!=(const type_info&amp; rhs) const;
   int before(const type_info&amp; rhs) const;
   const char* name() const;
   const char* raw_name() const;
private:
   ...
};
</code></pre>
<p>
The operators <code>==</code> and <code>!=</code> can be used to compare for equality and inequality with other type_info objects, respectively.</p>
<p>
There is no link between the collating order of types and inheritance relationships. Use the type_info::before member function to determine the collating sequence of types. There is no guarantee that type_info::before will yield the same result in different programs or even different runs of the same program. In this manner, type_info::before is similar to the address-of (&amp;) operator.</p>
<p>
The type_info::name member function returns a const char* to a null-terminated string representing the human-readable name of the type. The memory pointed to is cached and should never be directly deallocated.</p>
<p>
The type_info::raw_name member function returns a const char* to a null-terminated string representing the decorated name of the object type. The name is actually stored in its decorated form to save space. Consequently, this function is faster than type_info::name because it doesn’t need to undecorate the name. The string returned by the type_info::raw_name function is useful in comparison operations but is not readable. If you need a human-readable string, use the type_info::name function instead.</p>
<p>
Type information is generated for polymorphic classes only if the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_.2f.GR_option">
</object><a href=JavaScript:alink_1.Click()>/GR (Enable Run-Time Type Information)</a> compiler option is specified. </p>
</font></BODY>
</HTML>

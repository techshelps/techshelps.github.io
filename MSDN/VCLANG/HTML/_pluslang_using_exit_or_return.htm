<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using exit or return</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_using_exit_or_return"></a><sup></sup>Using exit or return</h1>
<p>
When you call <b>exit</b> or execute a <b>return</b> statement from <b>main</b>, static objects are destroyed in the reverse order of their initialization. This example shows how such initialization and cleanup works:</p>
<pre><code>#include &lt;stdio.h&gt;

class ShowData
{
public:
 &nbsp;&nbsp; // Constructor opens a file.
 &nbsp;&nbsp; ShowData( const char *szDev )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OutputDev = fopen( szDev, "w" );
 &nbsp;&nbsp; }

 &nbsp;&nbsp; // Destructor closes the file.
 &nbsp;&nbsp; ~ShowData() { fclose( OutputDev ); }

 &nbsp;&nbsp; // Disp function shows a string on the output device.
 &nbsp;&nbsp; void Disp( char *szData )
 &nbsp;&nbsp; { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fputs( szData, OutputDev );
 &nbsp;&nbsp; }
private:
 &nbsp;&nbsp; FILE *OutputDev;
};

//&nbsp; Define a static object of type ShowData. The output device
//&nbsp;&nbsp; selected is "CON" -- the standard output device.
ShowData sd1 = "CON";
//&nbsp; Define another static object of type ShowData. The output
//&nbsp;&nbsp; is directed to a file called "HELLO.DAT"
ShowData sd2 = "hello.dat";

int main()
{
 &nbsp;&nbsp; sd1.Disp( "hello to default device\n" );
 &nbsp;&nbsp; sd2.Disp( "hello to file hello.dat\n" );

 &nbsp;&nbsp; return 0;
}
</code></pre>
<p>
In the preceding example, the static objects <code>sd1</code> and <code>sd2</code> are created and initialized before entry to <code>main</code>. After this program terminates using the <code>return</code> statement, first <code>sd2</code> is destroyed and then <code>sd1</code>. The destructor for the <code>ShowData</code> class closes the files associated with these static objects. (For more information about initialization, constructors, and destructors, see Chapter 11, <a href="_pluslang_special_member_functions.htm">Special Member Functions</a>.)</p>
<p>
Another way to write this code is to declare the <code>ShowData</code> objects with block scope, allowing them to be destroyed when they go out of scope:</p>
<pre><code>int main()
{
 &nbsp;&nbsp; ShowData sd1, sd2( "hello.dat" );

 &nbsp;&nbsp; sd1.Disp( "hello to default device\n" );
 &nbsp;&nbsp; sd2.Disp( "hello to file hello.dat\n" );

 &nbsp;&nbsp; return 0;
}
</code></pre>
</font></BODY>
</HTML>

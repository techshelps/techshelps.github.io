<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Sized Integer Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.sized_integer_types"></a><sup></sup>C++ Sized Integer Types</h1>
<p>
Microsoft C++ also supports sized integer types. You can declare 8-, 16-, 32-, or 64-bit integer variables by using the <b>__int</b><i>n</i> type specifier, where <i>n</i> is the size, in bits, of the integer variable. The value of <i>n</i> can be 8, 16, 32, or 64. The following example declares one variable for each of these types of sized integers:</p>
<pre><code>__int8 nSmall;      // Declares 8-bit integer
__int16 nMedium;   // Declares 16-bit integer
__int32 nLarge;      // Declares 32-bit integer
__int64 nHuge;      // Declares 64-bit integer
</code></pre>
<p>
The types <b>__int8</b>, <b>__int16</b>, and <b>__int32</b>, are synonyms for the ANSI types that have the same size, and are useful for writing portable code that behaves identically across multiple platforms. Note that the <b>__int8</b> data type is synonymous with type <b>char</b>, <b>__int16</b> is synonymous with type <b>short</b>, and <b>__int32</b> is synonymous with type <b>int</b>. The <b>__int64</b> data type has no ANSI equivalent.</p>
<p>
Since <b>__int8</b>, <b>__int16</b>, and <b>__int32</b> are considered synonyms by the compiler, care should be taken when using these types as arguments to overloaded function calls. For example, the following C++ code will generate a compiler error:</p>
<pre><code>void MyFunc( __int8 ) {}
void MyFunc( char ) {}

void main()
{
 &nbsp;&nbsp; __int8 newVal;
 &nbsp;&nbsp; char MyChar;
 &nbsp;&nbsp; MyFunc( MyChar );      // Ambiguous function calls;
 &nbsp;&nbsp; MyFunc( newVal );      // char is synonymous with __int8.
}
</code></pre>
</font></BODY>
</HTML>

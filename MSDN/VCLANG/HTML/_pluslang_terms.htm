<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Terms</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_terms"></a><sup></sup>Terms</h1>
<p>
C++ terms used in this book are defined in Table 2.1:</p>
<p class=label>
<b><a name="_pluslang_table_2..1"></a>Table 2.1&nbsp;&nbsp;&nbsp;C++ Terminology</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Term</b></td>
<td class=label width=81%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=19%><a href="_pluslang_c.2b2b_.declarations.htm">Declaration</a></td>
<td width=81%>A declaration introduces names and their types into a program without necessarily defining an associated object or function. However, many declarations serve as definitions.</td>
</tr>
<tr valign=top>
<td width=19%><a href="_pluslang_c.2b2b_.definitions.htm">Definition</a></td>
<td width=81%>A definition provides information that allows the compiler to allocate memory for objects or generate code for functions.</td>
</tr>
<tr valign=top>
<td width=19%>Lifetime</td>
<td width=81%>The lifetime of an object is the period during which an object exists, including its creation and destruction.</td>
</tr>
<tr valign=top>
<td width=19%><a href="_pluslang_program_and_linkage.htm">Linkage</a></td>
<td width=81%>Names can have external linkage, internal linkage, or no linkage. Within a program (a set of translation units), only names with external linkage denote the same object or function. Within a translation unit, names with either internal or external linkage denote the same object or function (except when functions are overloaded). (For more information on translation units, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_PREDIR_Phases_of_Translation">
</object><a href=JavaScript:alink_1.Click()>Phases of Translation</a>), in the <i>Preprocessor Reference</i>.) Names with no linkage denote unique objects or functions.</td>
</tr>
<tr valign=top>
<td width=19%>Name</td>
<td width=81%>A name denotes an object, function, set of overloaded functions, enumerator, type, class member, template, value, or label. C++ programs use names to refer to their associated language element. Names can be type names or identifiers.</td>
</tr>
<tr valign=top>
<td width=19%>Object</td>
<td width=81%>An object is an instance (a data item) of a user-defined type (a class type). The difference between an object and a variable is that variables retain state information, whereas objects can also have behavior.<p>
This manual draws a distinction between objects and variables: “object” means instance of a user-defined type, whereas “variable” means instance of a fundamental type.</p>
<p>
In cases where either object or variable is applicable, the term “object” is used as the inclusive term, meaning “object or variable.”</p>
</td>
</tr>
<tr valign=top>
<td width=19%><a href="_pluslang_scope.htm">Scope</a></td>
<td width=81%>Names can be used only within specific regions of program text. These regions are called the scope of the name.</td>
</tr>
<tr valign=top>
<td width=19%><a href="_pluslang_c.2b2b_.storage_classes.htm">Storage class</a></td>
<td width=81%>The storage class of a named object determines its lifetime, initialization, and, in certain cases, its linkage.</td>
</tr>
<tr valign=top>
<td width=19%><a href="_pluslang_types.htm">Type</a></td>
<td width=81%>Names have associated types that determine the meaning of the value or values stored in an object or returned by a function.</td>
</tr>
<tr valign=top>
<td width=19%>Variable</td>
<td width=81%>A variable is a data item of a <a href="_pluslang_fundamental_types.htm">fundamental type</a> (for example, <b>int</b>, <b>float</b>, or <b>double</b>). Variables store state information but define no behavior for how that information is handled. See the preceding list item “Object” for information about how the terms “variable” and “object” are used in this documentation.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

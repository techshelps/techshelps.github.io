<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>codecvt</title></head>
<body bgcolor=white>

<h2><a name="codecvt">codecvt</a></h2>
<META NAME="MS-HKWD" CONTENT="codecvt">
<pre><code>template&lt;class From, class To, class State&gt;
    class <b>codecvt</b> : public locale::facet, public codecvt_base {
public:
    typedef From <a href="LOCALE2_codecvtCCfrom_type.htm#codecvt::from_type"><b>from_type</b></a>;
    typedef To <a href="LOCALE2_codecvtCCto_type.htm#codecvt::to_type"><b>to_type</b></a>;
    typedef State <a href="LOCALE2_codecvtCCstate_type.htm#codecvt::state_type"><b>state_type</b></a>;
    explicit <a href="LOCALE2_codecvtCCcodecvt.htm#codecvt::codecvt"><b>codecvt</b></a>(size_t refs = 0);
    result <a href="LOCALE2_codecvtCCin.htm#codecvt::in"><b>in</b></a>(State&amp; state,
        const To *first1, const To *last1, const To *next1,
        From *first2, From *last2, From *next2);
    result <a href="LOCALE2_codecvtCCout.htm#codecvt::out"><b>out</b></a>(State&amp; state,
        const From *first1, const From *last1, const From *next1,
        To *first2, To *last2, To *next2);
    bool <a href="LOCALE2_codecvtCCalways_noconv.htm#codecvt::always_noconv"><b>always_noconv</b></a>() const throw();
    int <a href="LOCALE2_codecvtCCmax_length.htm#codecvt::max_length"><b>max_length</b></a>() const throw();
    int <a href="LOCALE2_codecvtCClength.htm#codecvt::length"><b>length</b></a>(State&amp; state,
        From *first1, const From *last1, size_t _N2) const throw();
    int <a href="LOCALE2_codecvtCCencoding.htm#codecvt::encoding"><b>encoding</b></a>() const throw();
    static locale::id <a href="LOCALE2_codecvt.htm#codecvt::id"><b>id</b></a>;
protected:
    <b>~codecvt</b>();
    virtual result <a href="LOCALE2_codecvtCCdo_in.htm#codecvt::do_in"><b>do_in</b></a>(State&amp; state,
        const To *first1, const To *last1, const To *next1,
        From *first2, From *last2, From *next2);
    virtual result <a href="LOCALE2_codecvtCCdo_out.htm#codecvt::do_out"><b>do_out</b></a>(State&amp; state,
        const From *first1, const From *last1, const From *next1,
        To *first2, To *last2, To *next2);
    virtual bool <a href="LOCALE2_codecvtCCdo_always_noconv.htm#codecvt::do_always_noconv"><b>do_always_noconv</b></a>() const throw();
    virtual int <a href="LOCALE2_codecvtCCdo_max_length.htm#codecvt::do_max_length"><b>do_max_length</b></a>() const throw();
    virtual int <a href="LOCALE2_codecvtCCdo_encoding.htm#codecvt::do_encoding"><b>do_encoding</b></a>() const throw();
    virtual int <a href="LOCALE2_codecvtCCdo_length.htm#codecvt::do_length"><b>do_length</b></a>(State&amp; state,
        From *first1, const From *last1, size_t len2) const throw();
    };</code></pre>
<p>The template class describes an object that can serve as a <a href="LOCALE2_locale.htm#locale facet">locale facet</a>, to control conversions between a sequence of 
values of type <code>From</code> and a sequence of values of type <code>To</code>. The class <code>State</code> characterizes the transformation -- and an 
object of class <code>State</code> stores any necessary state information during a conversion.</p>
<p>As with any locale facet, the static object <a name="codecvt::id"><code><b>id</b></code></a> has an initial stored value of zero. The first attempt to access its stored 
value stores a unique positive value in <code>id</code>.</p>
<p>The template versions of <a href="LOCALE2_codecvtCCdo_in.htm#codecvt::do_in"><code>do_in</code></a> <a href="LOCALE2_codecvtCCdo_out.htm#codecvt::do_out"><code>do_out</code></a> always return <code>codecvt_base::</code><a href="LOCALE2_codecvt_base.htm#codecvt_base::noconv"><code>noconv</code></a>. The Standard C++ library defines 
an explicit specialization, however, that is more useful:</p>
<pre><code>codecvt&lt;wchar_t, char, mbstate_t</code></pre>
<p>which converts between <code>wchar_t</code> and <i>char</i> sequences.</p>
</body>
</html>

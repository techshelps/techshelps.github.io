<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Address-Of Operator (&amp;)</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_address.2d.of_operator"></a><sup></sup>Address-Of Operator (&amp;)</h1>
<p>
The unary address-of operator (<b>&amp;</b>) takes the address of its operand. The address-of operator can be applied only to the following:
<ul type=disc>
<li>
Functions (although its use for taking the address of a function is unnecessary)<br><br></li>
<li>
L-values<br><br></li>
<li>
Qualified names</li>
</ul>
<p>
In the first two cases listed above, the result of the expression is a pointer type (an r-value) derived from the type of the operand. For example, if the operand is of type <b>char</b>, the result of the expression is of type pointer to <b>char</b>. The address-of operator, applied to <b>const</b> or <b>volatile</b> objects, evaluates to <b>const</b> <i>type</i> <b>*</b> or <b>volatile</b> <i>type</i> <b>*</b>, where <i>type</i> is the type of the original object.</p>
<p>
The result produced by the third case, applying the address-of operator to a <i>qualified-name</i>, depends on whether the <i>qualified-name</i> specifies a static member. If so, the result is a pointer to the type specified in the declaration of the member. If the member is not static, the result is a pointer to the member <i>name</i> of the class indicated by <i>qualified-class-name</i>. (See <a href="_pluslang_c.2b2b_.primary_expressions.htm">Primary Expressions</a> for more about <i>qualified-class-name</i>.) The following code fragment shows how the result differs, depending on whether the member is static:</p>
<pre><code>class PTM
{
public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp; iValue;
 &nbsp;&nbsp; static float fValue;
};

int&nbsp;&nbsp; PTM::*piValue = &amp;PTM::iValue;&nbsp; // OK: non-static
float PTM::*pfValue = &amp;PTM::fValue;&nbsp; // Error: static
float *spfValue&nbsp;&nbsp;&nbsp;&nbsp; = &amp;PTM::fValue;&nbsp; // OK
</code></pre>
<p>
In this example, the expression <code>&amp;PTM::fValue</code> yields type <code>float *</code> instead of type <code>float PTM::*</code> because <code>fValue</code> is a static member.</p>
<p>
The address of an overloaded function can be taken only when it is clear which version of the function is being referenced. See <a href="_pluslang_address_of_overloaded_functions.htm">Address of Overloaded Functions</a>  for information about how to obtain the address of a particular overloaded function.</p>
<p>
Applying the address-of operator to a reference type gives the same result as applying the operator to the object to which the reference is bound. The following program demonstrates this concept:</p>
<pre><code>#include &lt;iostream.h&gt;

void main()
{
 &nbsp;&nbsp; double d;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define an object of type double.
 &nbsp;&nbsp; double&amp; rd = d;&nbsp; // Define a reference to the object.

 &nbsp;&nbsp; // Compare the address of the object to the address
 &nbsp;&nbsp; //&nbsp; of the reference to the object.
 &nbsp;&nbsp; if( &amp;d == &amp;rd )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "&amp;d equals &amp;rd" &lt;&lt; "\n";
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "&amp;d is not equal to &amp;rd" &lt;&lt; "\n";
}
</code></pre>
<p>
The output from the program is always <code>&amp;d equals &amp;rd</code>.</p>
</font></BODY>
</HTML>

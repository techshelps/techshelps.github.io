<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unhandled C++ Exceptions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_unhandled_c.2b2b_.exceptions"></a><sup></sup>Unhandled C++ Exceptions</h1>
<p>
If a matching handler (or ellipsis <b>catch</b> handler) cannot be found for the current exception, the predefined <code>terminate</code> function is called. (You can also explicitly call <code>terminate</code> in any of your handlers.) The default action of <code>terminate</code> is to call <code>abort</code>. If you want <code>terminate</code> to call some other function in your program before exiting the application, call the <code>set_terminate</code> function with the name of the function to be called as its single argument. You can call <code>set_terminate</code> at any point in your program. The <code>terminate</code> routine always calls the last function given as an argument to <code>set_terminate</code>. For example:</p>
<pre><code>#include &lt;eh.h&gt; &nbsp;&nbsp; // For function prototypes
//...
void term_func() { // ... }
int main()
{
 &nbsp;&nbsp; try
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set_terminate( term_func );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw "Out of memory!"; // No catch handler for this exception
 &nbsp;&nbsp; }
 &nbsp;&nbsp; catch( int )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "Integer exception raised.";
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return 0;
}
</code></pre>
<p>
The <code>term_func</code> function should terminate the program or current thread, ideally by calling <code>exit</code>. If it doesn’t, and instead returns to its caller, <code>abort</code> is called.</p>
<p>
For more information about C++ exception handling, see the <i>C++ Annotated Reference Manual</i> by Margaret Ellis and Bjarne Stroustrup.</p>
</font></BODY>
</HTML>

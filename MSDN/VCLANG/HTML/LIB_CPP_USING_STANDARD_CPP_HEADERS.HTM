<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Standard C++ Headers</title></head>
<body bgcolor=white>

<h2><a name="Using Standard C++ Headers">Using Standard C++ Headers</a></h2>
<META NAME="MS-HKWD" CONTENT="Standard C++ headers, using">
<p>You include the contents of a standard header by naming it in an <b>include</b> directive, as in:</p>
<pre><code>#include &lt;iostream&gt;  /* include I/O facilities */</code></pre>
<p>You can include the standard headers in any order, a standard header more than once, or two or more standard 
headers that define the same macro or the same type. Do not include a standard header within a declaration. Do not 
define macros that have the same names as keywords before you include a standard header.</p>
<p>A Standard C++ header includes any other Standard C++ headers it needs to define needed types. (Always include 
explicitly any Standard C++ headers needed in a translation unit, however, lest you guess wrong about its actual 
dependencies.) A Standard C header never includes another standard header. A standard header declares or defines 
only the entities described for it in this document.</p>
<p>Every function in the library is declared in a standard header. Unlike in Standard C, the standard header never provides 
a masking macro, with the same name as the function, that masks the function declaration and achieves the same effect.</p>
<p>If an <a href="INDEX_Table_of_Contents.htm#implementation">implementation</a> supports <a name="namespaces"><b>namespaces</b></a>, all names in the Standard C++ headers are defined in the <a name="std"><code><b>std</b></code></a> namespace. 
You refer to the name <a href="IOSTREAM_cin.htm#cin"><code>cin</code></a>, for example, as <code>std::cin</code>. Alternatively, you can write the declaration:</p>
<p><code>using namespace std;</code></p>
<p>which promotes all library names into the current namespace. If you include one of the C standard headers, such as 
<code>&lt;stdio.h&gt;</code>, the individual names declared or defined in that header are promoted for you. Note that macro names are 
not subject to the rules for nesting namespaces.</p>
</body>
</html>

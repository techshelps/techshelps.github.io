<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_string size and resize (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_basic_stringCCsize_resize">basic_string size and resize (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>basic_string size</code> and <code>resize</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;string&gt;</p>
<b>Prototype:</b><br>
<pre><code>
   size_type size() const;

   void resize(size_type n, E c = E());

   resize is defined in header xstring which is included indirectly.
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The size function returns the length of the sequence.  The resize function changes the size to the length specified by the first parameter. If the sequence is made longer, the function appends elements with the value of the second parameter. This value defaults to a null. The output of the sample code shows spaces for the null characters. operator&lt;&lt; reads the size of string and outputs each character in the string one at a time.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  size.cpp
//
// Functions:
//
//    size()
//    resize() ; Defined in header xstring which is included indirectly.
//////////////////////////////////////////////////////////////////////

/* Compile options needed: /GX
*/
#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;


void main()
{
    string TestString = "1111122222333334444455555";
    cout &lt;&lt; TestString &lt;&lt; "\n  size: " &lt;&lt; TestString.size() &lt;&lt; endl;
    TestString.resize(5);
    cout &lt;&lt; TestString &lt;&lt; "\n  size: " &lt;&lt; TestString.size() &lt;&lt; endl;
    TestString.resize(10);
    cout &lt;&lt; TestString &lt;&lt; "\n  size: " &lt;&lt; TestString.size() &lt;&lt; endl;
    TestString.resize(15,'6');
    cout &lt;&lt; TestString &lt;&lt; "\n  size: " &lt;&lt; TestString.size() &lt;&lt; endl;
}

</code></pre>

<p>Program Output is:</p>

<pre><code>1111122222333334444455555
  size: 25
11111
  size: 5
11111
  size: 10
11111     66666
  size: 15
</code></pre>

</body>
</html>

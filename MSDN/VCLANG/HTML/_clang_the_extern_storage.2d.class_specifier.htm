<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The extern Storage-Class Specifier</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_the_extern_storage.2d.class_specifier"></a><sup></sup>The extern Storage-Class Specifier </h1>
<p>
A variable declared with the <b>extern</b> storage-class specifier is a reference to a variable with the same name defined at the external level in any of the source files of the program. The internal <b>extern</b> declaration is used to make the external-level variable definition visible within the block. Unless otherwise declared at the external level, a variable declared with the <b>extern</b> keyword is visible only in the block in which it is declared.</p>
<p class=label>
<b>Example</b></p>
<p>
This example illustrates internal- and external-level declarations:</p>
<pre><code>#include &lt;stdio.h&gt;
int i = 1;
void other( void );

void main()
{
 &nbsp;&nbsp; /* Reference to i, defined above: */
 &nbsp;&nbsp; extern int i;

 &nbsp;&nbsp; /* Initial value is zero; a is visible only within main: */
 &nbsp;&nbsp; static int a;

 &nbsp;&nbsp; /* b is stored in a register, if possible: */
 &nbsp;&nbsp; register int b = 0;

 &nbsp;&nbsp; /* Default storage class is auto: */
 &nbsp;&nbsp; int c = 0;

 &nbsp;&nbsp; /* Values printed are 1, 0, 0, 0: */
 &nbsp;&nbsp; printf( "%d\n%d\n%d\n%d\n", i, a, b, c );
 &nbsp;&nbsp; other();
 &nbsp;&nbsp; return;
}

void other( void )
{
 &nbsp;&nbsp; /* Address of global i assigned to pointer variable: */
 &nbsp;&nbsp; static int *external_i = &amp;i;

 &nbsp;&nbsp; /* i is redefined; global i no longer visible: */
 &nbsp;&nbsp; int i = 16;

 &nbsp;&nbsp; /* This a is visible only within the other function: */
 &nbsp;&nbsp; static int a = 2;

 &nbsp;&nbsp; a += 2;
 &nbsp;&nbsp; /* Values printed are 16, 4, and 1: */
 &nbsp;&nbsp; printf( "%d\n%d\n%d\n", i, a, *external_i );
}&nbsp;&nbsp;&nbsp;&nbsp; 
</code></pre>
<p>
In this example, the variable <code>i</code> is defined at the external level with initial value 1. An <b>extern</b> declaration in the <code>main</code> function is used to declare a reference to the external-level <code>i</code>. The <b>static</b> variable <code>a</code> is initialized to 0 by default, since the initializer is omitted. The call to <code>printf</code> prints the values 1, 0, 0, and 0.</p>
<p>
In the <code>other</code> function, the address of the global variable <code>i</code> is used to initialize the <b>static</b> pointer variable <code>external_i</code>. This works because the global variable has <b>static</b> lifetime, meaning its address does not change during program execution. Next, the variable <code>i</code> is redefined as a local variable with initial value 16. This redefinition does not affect the value of the external-level <code>i</code>, which is hidden by the use of its name for the local variable. The value of the global <code>i</code> is now accessible only indirectly within this block, through the pointer <code>external_i</code>. Attempting to assign the address of the <b>auto</b> variable <code>i</code> to a pointer does not work, since it may be different each time the block is entered. The variable <code>a</code> is declared as a <b>static</b> variable and initialized to 2. This <code>a</code> does not conflict with the <code>a</code> in <code>main</code>, since <b>static</b> variables at the internal level are visible only within the block in which they are declared.</p>
<p>
The variable <code>a</code> is increased by 2, giving 4 as the result. If the <code>other</code> function were called again in the same program, the initial value of <code>a</code> would be 4. Internal <b>static</b> variables keep their values when the program exits and then reenters the block in which they are declared.</p>
</font></BODY>
</HTML>

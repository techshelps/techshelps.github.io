<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Names</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_class_names"></a><sup></sup>Class Names</h1>
<p>
Class declarations introduce new types, called class names, into programs. These class declarations also act as definitions of the class for a given translation unit. There may be only one definition for a given class type per translation unit. Using these new class types, you can declare objects, and the compiler can perform type checking to verify that no operations incompatible with the types are performed on the objects.</p>
<p>
An example of such type checking is:</p>
<pre><code>class Point
{
public:
 &nbsp;&nbsp; unsigned x, y;
};

class Rect
{
public:
 &nbsp;&nbsp; unsigned x1, y1, x2, y2;
};

// Prototype a function that takes two arguments, one of type
//&nbsp; Point and the other of type pointer to Rect.
int PtInRect( Point, Rect &amp; );

...

Point pt;
Rect&nbsp; rect;

rect = pt;&nbsp;&nbsp; // Error. Types are incompatible.
pt = rect;&nbsp;&nbsp; // Error. Types are incompatible.

// Error. Arguments to PtInRect are reversed.
cout &lt;&lt; "Point is " &lt;&lt; PtInRect( rect, pt ) ? "" : "not"
 &nbsp;&nbsp;&nbsp; &lt;&lt; " in rectangle" &lt;&lt; endl;
</code></pre>
<p>
As the preceding code illustrates, operations (such as assignment and argument passing) on class-type objects are subject to the same type checking as objects of built-in types.</p>
<p>
Because the compiler distinguishes between class types, functions can be overloaded on the basis of class-type arguments as well as built-in type arguments. For more information about overloaded functions, see <a href="_pluslang_function_overloading.htm">Function Overloading</a> in Chapter 7 and Chapter 12, <a href="_pluslang_overloading.htm">Overloading</a>. </p>
</font></BODY>
</HTML>

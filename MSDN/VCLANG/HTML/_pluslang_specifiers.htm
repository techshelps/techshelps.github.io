<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Specifiers</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_specifiers"></a><sup></sup>Specifiers</h1>
<p>
This section explains the <i>decl-specifiers</i> portion of declarations. (The syntax for declarations is given at the beginning of this chapter.)</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>decl-specifiers</i> :</p>
<p class=indent>
<i>decl-specifiers</i><sub>opt</sub> <i>decl-specifier</i></p>
<p class=dt>
<i>decl-specifier</i> :</p>
<p class=indent>
<i>storage-class-specifier</i><br>
<i>type-specifier</i><br>
<i>fct-specifier</i><br>
<b>friend</b><br>
<b>typedef</b><br>
<b>__declspec</b> ( <i>extended-decl-modifier-seq</i> )</p>
<p>
The Microsoft-specific keyword, <b>__declspec</b>, is discussed in <a href="_pluslang_extended_attribute_syntax.htm">Extended Attribute Syntax</a> in Appendix B.</p>
<p>
The <i>decl-specifiers</i> portion of a declaration is the longest sequence of <i>decl-specifiers</i> that can be construed to be a type name. The remainder of the declaration is the name or names introduced. The examples in the following list illustrates this concept:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=47%><b>Declaration</b></td>
<td class=label width=28%><b><i>decl-specifiers</i></b></td>
<td class=label width=25%><b><i>name</i></b></td>
</tr>
<tr valign=top>
<td width=47%><pre><code>char *lpszAppName;</code></pre>
</td>
<td width=28%><pre><code>char *</code></pre>
</td>
<td width=25%><pre><code>lpszAppName</code></pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre><code>typedef char * LPSTR;</code></pre>
</td>
<td width=28%><pre><code>char *</code></pre>
</td>
<td width=25%><pre><code>LPSTR</code></pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre><code>LPSTR strcpy( LPSTR, LPSTR );</code></pre>
</td>
<td width=28%><pre><code>LPSTR</code></pre>
</td>
<td width=25%><pre><code>strcpy</code></pre>
</td>
</tr>
<tr valign=top>
<td width=47%><pre><code>volatile void *pvvObj;</code></pre>
</td>
<td width=28%><pre><code>volatile void *</code></pre>
</td>
<td width=25%><pre><code>pvvObj</code></pre>
</td>
</tr>
</table><br>
<p>
Because <b>signed</b>, <b>unsigned</b>, <b>long</b>, and <b>short</b> all imply <b>int</b>, a <b>typedef</b> name following one of these keywords is taken to be a member of <i>declarator-list,</i> not of <i>decl-specifiers</i>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because a name can be redeclared, its interpretation is subject to the most recent declaration in the current scope. Redeclaration can affect how names are interpreted by the compiler, particularly <b>typedef</b> names.</p>
</font></BODY>
</HTML>

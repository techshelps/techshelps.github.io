<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>bitset</title></head>
<body bgcolor=white>

<h2><a name="bitset">bitset</a></h2>
<META NAME="MS-HKWD" CONTENT="bitset">
<p><a href="BITSET_bitsetCCany.htm#bitset::any"><code><b>any</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCat.htm#bitset::at"><code><b>at</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCbitset.htm#bitset::bitset"><code><b>bitset</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCbitset_size.htm#bitset::bitset_size"><code><b>bitset_size</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCcount.htm#bitset::count"><code><b>count</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCelement_type.htm#bitset::element_type"><code><b>element_type</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCflip.htm#bitset::flip"><code><b>flip</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCnone.htm#bitset::none"><code><b>none</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorNE.htm#bitset::operator!="><code><b>operator!=</b></code></a><code><b> &#183; 
</b></code><a href="BITSET_bitsetCCoperatorASE.htm#bitset::operator&amp;="><code><b>operator&amp;=</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorLL.htm#bitset::operator&lt;&lt;"><code><b>operator&lt;&lt;</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorLLE.htm#bitset::operator&lt;&lt;="><code><b>operator&lt;&lt;=</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorEE.htm#bitset::operator=="><code><b>operator==</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorGG.htm#bitset::operator&gt;&gt;"><code><b>operator&gt;&gt;</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorGGE.htm#bitset::operator&gt;&gt;="><code><b>operator&gt;&gt;=</b></code></a><code><b> &#183; 
</b></code><a href="BITSET_bitsetCCoperatorCD.htm#bitset::operator[]"><code><b>operator[]</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorUE.htm#bitset::operator^="><code><b>operator^=</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorOE.htm#bitset::operator|="><code><b>operator|=</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCoperatorT.htm#bitset::operator~"><code><b>operator~</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCreference.htm#bitset::reference"><code><b>reference</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCreset.htm#bitset::reset"><code><b>reset</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCset.htm#bitset::set"><code><b>set</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCsize.htm#bitset::size"><code><b>size</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCtest.htm#bitset::test"><code><b>test</b></code></a><code><b> 
&#183; </b></code><a href="BITSET_bitsetCCto_string.htm#bitset::to_string"><code><b>to_string</b></code></a><code><b> &#183; </b></code><a href="BITSET_bitsetCCto_ulong.htm#bitset::to_ulong"><code><b>to_ulong</b></code></a><code><b> </b></code></p>
<pre><code>template&lt;size_t N&gt;
    class <b>bitset</b> {
public:
    typedef bool <a href="BITSET_bitsetCCelement_type.htm#bitset::element_type"><b>element_type</b></a>;
    class <a href="BITSET_bitsetCCreference.htm#bitset::reference"><b>reference</b></a>;
    <a href="BITSET_bitsetCCbitset.htm#bitset::bitset"><b>bitset</b></a>();
    <a href="BITSET_bitsetCCbitset.htm#bitset::bitset"><b>bitset</b></a>(unsigned long val);
    template&lt;class E, class T, class A&gt;
        explicit <a href="BITSET_bitsetCCbitset.htm#bitset::bitset"><b>bitset</b></a>(const string&lt;E, T, A&gt;&amp; str,
            string&lt;E, T, A&gt;size_type pos = 0,
            string&lt;E, T, A&gt;size_type n = string&lt;E, T, A&gt;::npos);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCoperatorASE.htm#bitset::operator&amp;="><b>operator&amp;=</b></a>(const bitset&lt;N&gt;&amp; rhs);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCoperatorOE.htm#bitset::operator|="><b>operator|=</b></a>(const bitset&lt;N&gt;&amp; rhs);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCoperatorUE.htm#bitset::operator^="><b>operator^=</b></a>(const bitset&lt;N&gt;&amp; rhs);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCoperatorLLE.htm#bitset::operator&lt;&lt;="><b>operator&lt;&lt;=</b></a>(const bitset&lt;N&gt;&amp; pos);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCoperatorGGE.htm#bitset::operator&gt;&gt;="><b>operator&gt;&gt;=</b></a>(const bitset&lt;N&gt;&amp; pos);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCset.htm#bitset::set"><b>set</b></a>();
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCset.htm#bitset::set"><b>set</b></a>(size_t pos, bool val = true);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCreset.htm#bitset::reset"><b>reset</b></a>();
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCreset.htm#bitset::reset"><b>reset</b></a>(size_t pos);
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCflip.htm#bitset::flip"><b>flip</b></a>();
    bitset&lt;N&gt;&amp; <a href="BITSET_bitsetCCflip.htm#bitset::flip"><b>flip</b></a>(size_t pos);
    reference <a href="BITSET_bitsetCCoperatorCD.htm#bitset::operator[]"><b>operator[]</b></a>(size_t pos);
    bool <a href="BITSET_bitsetCCoperatorCD.htm#bitset::operator[]"><b>operator[]</b></a>(size_t pos) const;
    reference <a href="BITSET_bitsetCCat.htm#bitset::at"><b>at</b></a>(size_t pos);
    bool <a href="BITSET_bitsetCCat.htm#bitset::at"><b>at</b></a>(size_t pos) const;
    unsigned long <a href="BITSET_bitsetCCto_ulong.htm#bitset::to_ulong"><b>to_ulong</b></a>() const;
    template&lt;class E, class T, class A&gt;
        string <a href="BITSET_bitsetCCto_string.htm#bitset::to_string"><b>to_string</b></a>() const;
    size_t <a href="BITSET_bitsetCCcount.htm#bitset::count"><b>count</b></a>() const;
    size_t <a href="BITSET_bitsetCCsize.htm#bitset::size"><b>size</b></a>() const;
    bool <a href="BITSET_bitsetCCoperatorEE.htm#bitset::operator=="><b>operator==</b></a>(const bitset&lt;N&gt;&amp; rhs) const;
    bool <a href="BITSET_bitsetCCoperatorNE.htm#bitset::operator!="><b>operator!=</b></a>(const bitset&lt;N&gt;&amp; rhs) const;
    bool <a href="BITSET_bitsetCCtest.htm#bitset::test"><b>test</b></a>(size_t pos) const;
    bool <a href="BITSET_bitsetCCany.htm#bitset::any"><b>any</b></a>() const;
    bool <a href="BITSET_bitsetCCnone.htm#bitset::none"><b>none</b></a>() const;
    bitset&lt;N&gt; <a href="BITSET_bitsetCCoperatorLL.htm#bitset::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(size_t pos) const;
    bitset&lt;N&gt; <a href="BITSET_bitsetCCoperatorGG.htm#bitset::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(size_t pos) const;
    bitset&lt;N&gt; <a href="BITSET_bitsetCCoperatorT.htm#bitset::operator~"><b>operator~</b></a>();
    static const size_t <a href="BITSET_bitsetCCbitset_size.htm#bitset::bitset_size"><b>bitset_size</b></a> = N;
    };</code></pre>
<p>The template class describes an object that stores a sequence of <code>N</code> bits. A bit is <a name="bit set"><b>set</b></a> if its value is 1, <a name="bit reset"><b>reset</b></a> if its value is 
0. To <a name="bit flip"><b>flip</b></a> a bit is to change its value from 1 to 0 or from 0 to 1. When converting between an object of class 
<code>bitset&lt;N&gt;</code> and an object of some integral type, bit position <code>j</code> corresponds to the bit value <code>1 &lt;&lt; j</code>. The integral value 
corresponding to two or more bits is the sum of their bit values.</p>
</body>
</html>

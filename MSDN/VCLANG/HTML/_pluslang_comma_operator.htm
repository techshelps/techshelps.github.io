<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comma Operator</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_comma_operator"></a><sup></sup>Comma Operator</h1>
<p>
The comma operator allows grouping two statements where one is expected.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>expression</i> :</p>
<p class=indent>
<i>assignment-expression</i><br>
<i>expression</i> , <i>assignment-expression</i></p>
<p>
The comma operator has left-to-right associativity. Two expressions separated by a comma are evaluated left to right. The left operand is always evaluated, and all side effects are completed before the right operand is evaluated.</p>
<p>
Consider the expression</p>
<p>
<i>e1</i> , <i>e2</i> </p>
<p>
The type and value of the expression are the type and value of <i>e2</i>; the result of evaluating <i>e1</i> is discarded. The result is an l-value if the right operand is an l-value.</p>
<p>
Where the comma has special meaning (for example in actual arguments to functions or aggregate initializers), the comma operator and its operands must be enclosed in parentheses. Therefore, the following function calls are not equivalent:</p>
<pre><code>// Declare functions:
void Func( int, int );
void Func( int );

Func( arg1, arg2 );&nbsp;&nbsp;&nbsp; // Call Func( int, int )
Func( (arg1, arg2) );&nbsp; // Call Func( int )
</code></pre>
<p>
This example illustrates the comma operator:</p>
<pre><code>for ( i = j = 1; i + j &lt; 20; i += i, j-- );
</code></pre>
<p>
In this example, each operand of the for statement’s third expression is evaluated independently. The left operand <code>i += i</code> is evaluated first; then the right operand, <code>j––</code>, is evaluated.</p>
<pre><code>func_one( x, y + 2, z );
func_two( (x--, y + 2), z );
</code></pre>
<p>
In the function call to <code>func_one</code>, three arguments, separated by commas, are passed: <code>x</code>, <code>y + 2</code>, and <code>z</code>. In the function call to <code>func_two</code>, parentheses force the compiler to interpret the first comma as the sequential-evaluation operator. This function call passes two arguments to <code>func_two</code>. The first argument is the result of the sequential-evaluation operation <code>(x--, y + 2)</code>, which has the value and type of the expression <code>y + 2</code>; the second argument is <code>z</code>. </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Virtual Base Classes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_virtual_base_classes"></a><sup></sup>Virtual Base Classes</h1>
<p>
Because a class can be an indirect base class to a derived class more than once, C++ provides a way to optimize the way such base classes work. Consider the class hierarchy in Figure 9.5, which illustrates a simulated lunch line.</p>
<p class=label>
<b>Figure 9.5&nbsp;&nbsp;&nbsp;Simulated Lunch-Line Graph</b></p>
<p>
<img src="l09sim5.gif" border=0></p>
<p>
In Figure 9.5, <code>Queue</code> is the base class for both <code>CashierQueue</code> and <code>LunchQueue</code>. However, when both classes are combined to form <code>LunchCashierQueue</code>, the following problem arises: the new class contains two subobjects of type <code>Queue</code>, one from <code>CashierQueue</code> and the other from <code>LunchQueue</code>. Figure 9.6 shows the conceptual memory layout (the actual memory layout might be optimized).</p>
<p class=label>
<b>Figure 9.6&nbsp;&nbsp;&nbsp;Simulated Lunch-Line Object</b></p>
<p>
<img src="l09sim6.gif" border=0></p>
<p>
Note that there are two <code>Queue</code> subobjects in the <code>LunchCashierQueue</code> object. The following code declares <code>Queue</code> to be a virtual base class:</p>
<pre><code>class Queue
{
 &nbsp;&nbsp; // Member list
};

class CashierQueue : virtual public Queue
{
 &nbsp;&nbsp; // Member list
};

class LunchQueue : virtual public Queue
{
 &nbsp;&nbsp; // Member list
};

class LunchCashierQueue : public LunchQueue, public CashierQueue
{
 &nbsp;&nbsp; // Member list
};
</code></pre>
<p>
The <code>virtual</code> keyword ensures that only one copy of the subobject <code>Queue</code> is included (see Figure 9.7).</p>
<p class=label>
<b>Figure 9.7&nbsp;&nbsp;&nbsp;Simulated Lunch-Line Object with Virtual Base Classes</b></p>
<p>
<img src="l09sim7.gif" border=0></p>
<p>
A class can have both a virtual component and a nonvirtual component of a given type. This happens in the conditions illustrated in Figure 9.8.</p>
<p class=label>
<b>Figure 9.8&nbsp;&nbsp;&nbsp;Virtual and Nonvirtual Components of the Same Class</b></p>
<p>
<img src="l09vir8.gif" border=0></p>
<p>
In Figure 9.8., <code>CashierQueue</code> and <code>LunchQueue</code> use <code>Queue</code> as a virtual base class. However, <code>TakeoutQueue</code> specifies <code>Queue</code> as a base class, not a virtual base class. Therefore, <code>LunchTakeoutCashierQueue</code> has two subobjects of type <code>Queue</code>: one from the inheritance path that includes <code>LunchCashierQueue</code> and one from the path that includes <code>TakeoutQueue</code>. This is illustrated in Figure 9.9.</p>
<p class=label>
<b>Figure 9.9&nbsp;&nbsp;&nbsp;Object Layout with Virtual and Nonvirtual Inheritance</b></p>
<p>
<img src="l09vir9.gif" border=0></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Virtual inheritance provides significant size benefits when compared with nonvirtual inheritance. However, it can introduce extra processing overhead.</p>
<p>
If a derived class overrides a virtual function that it inherits from a virtual base class, and if a constructor or a destructor for the derived base class calls that function using a pointer to the virtual base class, the compiler may introduce additional hidden “vtordisp” fields into the classes with virtual bases. The /vd0 compiler option suppresses the addition of the hidden vtordisp constructor/destructor displacement member. The /vd1 compiler option, the default, enables them where they are necessary. Turn off vtordisps only if you are sure that all class constructors and destructors call virtual functions virtually. </p>
<p>
The /vd compiler option affects an entire compilation module. Use the <b>vtordisp</b> pragma to suppress and then reenable vtordisp fields on a class-by-class basis:</p>
<pre><code>#pragma vtordisp( off )
class GetReal : virtual public { ... };
#pragma vtordisp( on )
</code></pre>
</font></BODY>
</HTML>

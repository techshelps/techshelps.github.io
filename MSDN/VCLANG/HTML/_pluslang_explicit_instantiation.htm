<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Explicit Instantiation</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_explicit_instantiation"></a>Explicit Instantiation</h1>
<p>
Explicit instantiation lets you create an instantiation of a templated class or function without actually using it in your code. Since this is useful when you are creating library (.LIB) files that use templates for distribution, uninstantiated template definitions are not put into object (.OBJ) files.</p>
<p>
The following explicitly instantiates <code>MyStack</code> for int variables and six items:</p>
<pre><code>template class MyStack&lt;int, 6&gt;;
</code></pre>
<p>
This statement creates an instantiation of <code>MyStack</code> without reserving any storage for an object; code is generated for all members.</p>
<p>
The following explicitly instantiates only the constructor member function:</p>
<pre><code>template MyStack&lt;int, 6&gt;::MyStack( void );
</code></pre>
<p>
Visual C++ 6.0 supports explicit instantiation of function templates. Versions prior to 5.0 supported the explicit instantiation of class templates only. For example, the following code is now legal:</p>
<pre><code>template&lt;class T&gt; void f(T) {...}

//Instantiate f with the explicitly specified template
//argument ‘int’
//
template void f&lt;int&gt; (int);

//Instantiate f with the deduced template argument ‘char’
//
template void f(char);
</code></pre>
<p>
<b>Microsoft Specific </b></p>
<p>
You can use the <b>extern</b> keyword to prevent the automatic instantiation of members. For example:</p>
<pre><code>extern template class MyStack&lt;int, 6&gt;;
</code></pre>
<p>
Similarly, you can mark specific members as being external and not instantiated as follows:</p>
<pre><code>extern template MyStack&lt;int, 6&gt;::MyStack( void );
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <b>extern</b> keyword in the specialization only applies to member functions defined outside of the body of the class. Functions defined inside the class declaration are considered inline functions and are always instantiated.</p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

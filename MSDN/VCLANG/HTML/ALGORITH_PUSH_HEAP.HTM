<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>push_heap</title></head>
<body bgcolor=white>

<h2><a name="push_heap">push_heap</a></h2>
<META NAME="MS-HKWD" CONTENT="push_heap">
<pre><code>template&lt;class RanIt&gt;
    void <b>push_heap</b>(RanIt first, RanIt last);
template&lt;class RanIt, class Pred&gt;
    void <b>push_heap</b>(RanIt first, RanIt last, Pred pr);</code></pre>
<p>The first template function reorders the sequence designated by iterators in the range <code>[first, last)</code> to form a new 
heap <a href="lib_stl_Algorithm_Conventions.htm#heap ordering">ordered by</a> <code>operator&lt;</code>. Iterators in the range <code>[first, last - 1)</code> must designate an existing heap, also 
ordered by <code>operator&lt;</code>. Thus, <code>first != last</code> must be true and <code>*(last - 1)</code> is the element to add to (push on) the 
heap.</p>
<p>The function evaluates the ordering predicate <code>X &lt; Y</code> <code>ceil(log(last - first))</code> times, at most.</p>
<p>The second template function behaves the same, except that it replaces <code>operator&lt;(X, Y)</code> with <code>pr(X, Y)</code>.</p>
<p>Sample programs: <a href="sample_heap_(STL_Sample).htm#_sample_stl_heap">heap</a> and <a href="sample_The_Predicate_Versions_of_heap_(STL_Sample).htm#_sample_stl_heapP">heap (predicate version)</a>.</p>

</body>
</html>

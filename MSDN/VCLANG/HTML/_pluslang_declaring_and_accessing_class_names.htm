<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring and Accessing Class Names</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_declaring_and_accessing_class_names"></a><sup></sup>Declaring and Accessing Class Names</h1>
<p>
Class names can be declared in global or class scope. If they are declared in class scope, they are referred to as “nested” classes.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
Function definitions are not permitted in local class declarations in Microsoft C++. </p>
<p>
<b>END Microsoft Specific</b></p>
<p>
Any class name introduced in class scope hides other elements of the same name in an enclosing scope. Names hidden by such a declaration can then be referred to only by using an <i>elaborated-type-specifier</i>. The following example shows an example of using an <i>elaborated-type-specifier</i> to refer to a hidden name:</p>
<pre><code>struct A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Global scope definition of A.
{
 &nbsp;&nbsp; int a;
};

void main()
{
 &nbsp;&nbsp; char A = 'a'; // Redefine the name A as an object.

 &nbsp;&nbsp; struct A AObject;
 &nbsp;&nbsp; ...
}
</code></pre>
<p>
Because the name <code>A</code> that refers to the structure is hidden by the <code>A</code> that refers to the <code>char</code> object, <b>struct</b> (a <i>class-key</i>) must be used to declare <code>AObject</code> as type <code>A</code>.</p>
<p>
You can use the <i>class-key</i> to declare a class without providing a definition. This nondefining declaration of a class introduces a class name for forward reference. This technique is useful when designing classes that refer to one another in <b>friend</b> declarations. It is also useful when class names must be present in header files but the definition is not required. For example:</p>
<pre><code>// RECT.H
class Point;&nbsp;&nbsp; // Nondefining declaration of class Point.
class Line
{
public:
 &nbsp;&nbsp; int Draw( Point &amp;ptFrom, Point &amp;ptTo );
 &nbsp;&nbsp; ...
};
</code></pre>
<p>
In the preceding sample, the name <code>Point</code> must be present, but it need not be a defining declaration that introduces the name.</p>
</font></BODY>
</HTML>

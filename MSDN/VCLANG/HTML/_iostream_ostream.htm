<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ostream</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_ostream"></a><sup></sup>ostream</h1>
<p>
<b>#include &lt;iostream.h&gt;</b></p>
<p>
The <b>ostream</b> class provides the basic capability for sequential and random-access output. An <b>ostream</b> object has a <b>streambuf</b>-derived object attached, and the two classes work together; the <b>ostream</b> class does the formatting, and the <b>streambuf</b> class does the low-level buffered output.</p>
<p>
You can use <b>ostream</b> objects for sequential disk output if you first construct an appropriate <b>filebuf</b> object. (The <b>filebuf</b> class is derived from <b>streambuf</b>.) More often, you will use the predefined stream objects <b>cout</b>, <b>cerr</b>, and <b>clog</b> (actually objects of class <b>ostream_withassign</b>), or you will use objects of classes <b>ofstream</b> (disk file streams) and <b>ostrstream</b> (string streams).</p>
<p>
All of the <b>ostream</b> member functions write unformatted data; formatted output is handled by the insertion operators.</p>
<p class=label>
<b>Derivation</b></p>
<p>
It is not always necessary to derive from <b>ostream</b> to add functionality to a stream; consider deriving from <b>streambuf</b> instead, as illustrated in <a href="_iostream_deriving_your_own_stream_classes.htm">Deriving Your Own Stream Classes</a>. The <b>ofstream</b> and <b>ostrstream</b> classes are examples of <b>ostream</b>-derived classes that construct member objects of predetermined derived <b>streambuf</b> classes. You can add manipulators without deriving a new class.</p>
<p>
If you add new insertion operators for a derived <b>ostream</b> class, then the rules of C++ dictate that you must reimplement all the base class insertion operators. If, however, you reimplement the operators through inline equivalence, no extra code will be generated.</p>
<p class=label>
<b>Construction/Destruction — Public Members</b></p>
<p class=dt>
<a href="_iostream_ostream.3a3a.ostream.htm">ostream</a></p>
<p class=indent>
Constructs an <b>ostream</b> object that is attached to an existing <b>streambuf</b> object.</p>
<p class=dt>
<a href="_iostream_ostream.3a3a7e.ostream.htm">~ostream</a></p>
<p class=indent>
Destroys an <b>ostream</b> object.</p>
<p class=label>
<b>Prefix/Suffix Functions — Public Members</b></p>
<p class=dt>
<a href="_iostream_ostream.3a3a.opfx.htm">opfx</a></p>
<p class=indent>
Output prefix function, called prior to insertion operations to check for error conditions, and so forth.</p>
<p class=dt>
<a href="_iostream_ostream.3a3a.osfx.htm">osfx</a></p>
<p class=indent>
Output suffix function, called after insertion operations; flushes the stream’s buffer if it is unit buffered.</p>
<p class=label>
<b>Unformatted Output — Public Members</b></p>
<p class=dt>
<a href="_iostream_ostream.3a3a.put.htm">put</a></p>
<p class=indent>
Inserts a single byte into the stream.</p>
<p class=dt>
<a href="_iostream_ostream.3a3a.write.htm">write</a></p>
<p class=indent>
Inserts a series of bytes into the stream.</p>
<p class=label>
<b>Other Functions — Public Members</b></p>
<p class=dt>
<a href="_iostream_ostream.3a3a.flush.htm">flush</a></p>
<p class=indent>
Flushes the buffer associated with this stream. </p>
<p class=dt>
<a href="_iostream_ostream.3a3a.seekp.htm">seekp</a></p>
<p class=indent>
Changes the stream’s put pointer.</p>
<p class=dt>
<a href="_iostream_ostream.3a3a.tellp.htm">tellp</a></p>
<p class=indent>
Gets the value of the stream’s put pointer.</p>
<p class=label>
<b>Operators — Public Members</b></p>
<p class=dt>
<a href="_iostream_ostream.3a3a.operator_.3c3c.htm">operator &lt;&lt;</a></p>
<p class=indent>
Insertion operator for various types.</p>
<p class=label>
<b>Manipulators</b></p>
<p class=dt>
<a href="_iostream_ostream.26_.endl.htm">endl</a></p>
<p class=indent>
Inserts a newline sequence and flushes the buffer.</p>
<p class=dt>
<a href="_iostream_ostream.26_.ends.htm">ends</a></p>
<p class=indent>
Inserts a null character to terminate a string.</p>
<p class=dt>
<a href="_iostream_ostream.3a3a.flush.htm">flush</a></p>
<p class=indent>
Flushes the stream’s buffer.</p>
<p>
<a href="_iostream_iostream_class_list.htm#_iostream_output_stream_classes">Output Stream Classes</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_iostream_streambuf.htm">streambuf</a>, <a href="_iostream_ofstream.htm">ofstream</a>, <a href="_iostream_ostrstream.htm">ostrstream</a>, <a href="_iostream_ostream_withassign.htm">cout</a>, <a href="_iostream_ostream_withassign.htm">cerr</a>, <a href="_iostream_ostream_withassign.htm">clog</a></p>
<p class=label>
<b>Example</b></p>
<pre><code>class xstream : public ostream
{
public:
 &nbsp;&nbsp; // Constructors, etc.
 &nbsp;&nbsp; // ........
 &nbsp;&nbsp; inline xstream&amp; operator &lt;&lt; ( char ch ) // insertion for char
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (xstream&amp;)ostream::operator &lt;&lt; ( ch );
 &nbsp;&nbsp; }
 &nbsp;&nbsp; // ........
 &nbsp;&nbsp; // Insertions for other types
};
</code></pre>
</font></BODY>
</HTML>

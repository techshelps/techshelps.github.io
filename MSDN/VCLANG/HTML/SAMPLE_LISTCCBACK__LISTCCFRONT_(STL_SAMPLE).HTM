<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>list::back, list::front (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_listCCback_front">list::back, list::front (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>list::back</code> and <code>list::front</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;list&gt;</p>
<b>Prototype:</b><br>
<pre><code>
     reference back();
     const_reference back() const;
     reference front();
     const_reference front() const;
     void pop_back();
     void pop_front();
     void push_back(const T&amp; x);
     void push_front(const T&amp; x);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The member function back returns a reference to the last element of the controlled sequence. The member function front returns a reference to the first element of the controlled sequence. The member function pop_back removes the last element of the controlled sequence. The member function pop_front removes the first element of the controlled sequence. All the above functions require that the controlled sequence be non-empty.  The member function push_back inserts an element with value x at the end of the controlled sequence. The member function push_front inserts an element with value x at the beginning of the controlled sequence.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// liststck.cpp :  This example shows how to use the various stack
//                 like functions of list.
//
// Functions:
//
//    list::back
//    list::front
//    list::pop_back
//    list::pop_front
//    list::push_back
//    list::push_front
//////////////////////////////////////////////////////////////////////

#include &lt;list&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef list&lt;string&gt; LISTSTR;

void main()
{
    LISTSTR test;

    test.push_back("back");
    test.push_front("middle");
    test.push_front("front");

    // front
    cout &lt;&lt; test.front() &lt;&lt; endl;

    // back
    cout &lt;&lt; test.back() &lt;&lt; endl;

    test.pop_front();
    test.pop_back();

    // middle
    cout &lt;&lt; test.front() &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>front
back
middle
</code></pre>

</body>
</html>

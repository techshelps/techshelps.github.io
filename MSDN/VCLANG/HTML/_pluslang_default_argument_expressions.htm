<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Default Argument Expressions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_pluslang_default_argument_expressions"></a><sup></sup>Default Argument Expressions</h1>
<p>
The expressions used for default arguments are often constant expressions, but this is not a requirement. The expression can combine functions that are visible in the current scope, constant expressions, and global variables. The expression cannot contain local variables or nonstatic class-member variables. The following code illustrates this:</p>
<pre><code>BOOL CreateVScrollBar( HWND hWnd, short nWidth =
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetSystemMetrics( SM_CXVSCROLL ) );
</code></pre>
<p>
The preceding declaration specifies a function that creates a vertical scroll bar of a given width for a window. If no width argument is supplied, the Windows API function, <b>GetSystemMetrics</b>, is called to find the default width for a scroll bar.</p>
<p>
The default expression is evaluated after the function call, but the evaluation is completed before the function call actually takes place.</p>
<p>
Because formal arguments to a function are in function scope, and because the evaluation of default arguments takes place prior to entry to this scope, you cannot use formal arguments, or local variables in default argument expressions.</p>
<p>
Note that any formal argument declared before a default argument expression can hide a global name in the function scope, which can cause errors. The following code is illegal:</p>
<pre><code>const int Categories = 9;

void EnumCategories( char *Categories[], int n = Categories );
</code></pre>
<p>
In the preceding code, the global name <code>Categories</code> is hidden at function scope, making the default argument expression invalid.</p>
</font></BODY>
</HTML>

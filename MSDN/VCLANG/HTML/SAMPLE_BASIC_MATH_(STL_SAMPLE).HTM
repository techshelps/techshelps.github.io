<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Basic Math (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_Basic_Math">Basic Math (STL Sample)</a></h2>
<p>The sample code below illustrates how to use some basic math functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; functional &gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE&gt;
     struct plus : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
     {
        _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X + _Y); }
     };
template&lt;class _TYPE&gt;
     struct minus : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
     {
        _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X - _Y); }
     };
template&lt;class _TYPE&gt;
     struct times : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
     {
       _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X * _Y); }
     };
template&lt;class _TYPE&gt;
     struct divides : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
     {
       _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X / _Y); }
     };
template&lt;class _TYPE&gt;
     struct modulus : binary_function&lt;_TYPE, _TYPE, _TYPE&gt;
     {
       _TYPE operator()(const _TYPE&amp; _X, const _TYPE&amp; _Y) const
                                         {return (_X % _Y); }
     };
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 This sample uses a class derived from all five basic math structures: plus, minus, times, divides, and modulus, using an integer as the templated operand.  </p>
<p><b>Sample Code: </b></p>
<pre><code>////////////////////////////////////////////////////////////////
//
// Compile options needed: none
//
// mathfunc.cpp - Illustrating the basic STL math
//                functions.
//
// Structures: plus&lt;A&gt;    - Adds data type A object to
//                          a class object derived from plus.
//             minus&lt;A&gt;   - Subtracts data type A.
//             multiplies&lt;A&gt;   - Multiplies object by data type A.
//             divides&lt;A&gt; - Divides object by data type A.
//             modulus&lt;A&gt; - Returns object modulo A.
/////////////////////////////////////////////////////////////////

#include &lt;functional&gt;
#include &lt;iostream&gt;

using namespace std ;

class MathOps : public plus&lt;int&gt;, public minus&lt;int&gt;,
                 public multiplies&lt;int&gt;, public divides&lt;int&gt;,
                 public modulus&lt;int&gt;
{
public:
  int value;
  MathOps(){value=0;}
  MathOps(int x){value=x;}
  result_type operator+(second_argument_type add2)
                            {return value + add2;}
  result_type operator-(second_argument_type sub2)
                            {return value - sub2;}
  result_type operator*(second_argument_type mult2)
                            {return value * mult2;}
  result_type operator/(second_argument_type div2)
                            {return value / div2;}
  result_type operator%(second_argument_type mod2)
                            {return value % mod2;}
  friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const MathOps&amp; obj ) ;
};

ostream&amp; operator&lt;&lt;(ostream&amp; os, const MathOps&amp; obj )
{
       os &lt;&lt; obj.value ;
       return os ;
}

void main(void)
{
  MathOps one,two,three,four,five,six;

  cout &lt;&lt; "Using MathOps class..." &lt;&lt; endl ;

  one = 18;
  cout &lt;&lt; "one = " &lt;&lt; one &lt;&lt; endl ;

  two = one + 1;
  cout &lt;&lt; "two = one + 1 = " &lt;&lt; two &lt;&lt; endl ;

  three = two - 2;
  cout &lt;&lt; "three = two - 2 = " &lt;&lt; three &lt;&lt; endl ;

  four = three * 3;
  cout &lt;&lt; "four = three * 3 = " &lt;&lt; four &lt;&lt; endl ;

  five = four / 4;
  cout &lt;&lt; "five = four / 4 = " &lt;&lt; five &lt;&lt; endl ;

  six = five % 5;
  cout &lt;&lt; "six = five % 5 = " &lt;&lt; six &lt;&lt; endl ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Using MathOps class...
one = 18
two = one + 1 = 19
three = two - 2 = 17
four = three * 3 = 51
five = four / 4 = 12
six = five % 5 = 2
</code></pre>

</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>General Rules and Limitations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_general_rules_and_limitations"></a><sup></sup>General Rules and Limitations</h1>
<ul type=disc>
<li>
If you declare a function or object without the <b>dllimport</b> or <b>dllexport</b> attribute, the function or object is not considered part of the DLL interface. Therefore, the definition of the function or object must be present in that module or in another module of the same program. To make the function or object part of the DLL interface, you must declare the definition of the function or object in the other module as <b>dllexport</b>. Otherwise, a linker error is generated.<p class=tl>
If you declare a function or object with the <b>dllexport</b> attribute, its definition must appear in some module of the same program. Otherwise, a linker error is generated.</P></li>
<li>
If a single module in your program contains both <b>dllimport</b> and <b>dllexport</b> declarations for the same function or object, the <b>dllexport</b> attribute takes precedence over the <b>dllimport</b> attribute. However, a compiler warning is generated. For example:<pre><code>__declspec( dllimport ) int i;
__declspec( dllexport ) int i;&nbsp;&nbsp; // Warning; inconsistent;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // dllexport takes precedence.
</code></pre>
</li>
<li>
In C++, you can initialize a globally declared or static local data pointer or with the address of a data object declared with the <b>dllimport</b> attribute, which generates an error in C. In addition, you can initialize a static local function pointer with the address of a function declared with the <b>dllimport</b> attribute. In C, such an assignment sets the pointer to the address of the DLL import thunk (a code stub that transfers control to the function) rather than the address of the function. In C++, it sets the pointer to the address of the function. For example:<pre><code>__declspec( dllimport ) void func1( void );
__declspec( dllimport ) int i;

int *pi = &amp;i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error in C
static void ( *pf )( void ) = &amp;func1;&nbsp;&nbsp;&nbsp;&nbsp; // Address of thunk in C,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // function in C++

void func2()
{
static int *pi = &amp;i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error in C
static void ( *pf )( void ) = &amp;func1; // Address of thunk in C,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // function in C++
}
</code></pre>
<p class=tl>
However, because a program that includes the <b>dllexport</b> attribute in the declaration of an object must provide the definition for that object somewhere in the program, you can initialize a global or local static function pointer with the address of a <b>dllexport</b> function. Similarly, you can initialize a global or local static data pointer with the address of a <b>dllexport</b> data object. For example, the following code does not generate errors in C or C++:</P><pre><code>__declspec( dllexport ) void func1( void );
__declspec( dllexport ) int i;

int *pi = &amp;i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Okay
static void ( *pf )( void ) = &amp;func1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Okay

void func2()
{
 &nbsp;&nbsp; static int *pi = &amp;i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Okay
 &nbsp;&nbsp; static void ( *pf )( void ) = &amp;func1;&nbsp; // Okay
}
</code></pre>
</li>
</ul>
</font></BODY>
</HTML>

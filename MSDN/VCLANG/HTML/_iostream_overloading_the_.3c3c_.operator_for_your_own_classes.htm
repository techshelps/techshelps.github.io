<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overloading the &lt;&lt; Operator for Your Own Classes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_overloading_the_.3c3c_.operator_for_your_own_classes"></a><sup></sup>Overloading the &lt;&lt; Operator for Your Own Classes</h1>
<p>
Output streams use the insertion (<b>&lt;&lt;</b>) operator for standard types. You can also overload the <b>&lt;&lt;</b> operator for your own classes.</p>
<p>
The <b>write</b> function example showed the use of a <code>Date</code> structure. A date is an ideal candidate for a C++ class in which the data members (month, day, and year) are hidden from view. An output stream is the logical destination for displaying such a structure. This code displays a date using the <b>cout</b> object:</p>
<pre><code>Date dt( 1, 2, 92 );
cout &lt;&lt; dt;
</code></pre>
<p>
To get <b>cout</b> to accept a <code>Date</code> object after the insertion operator, overload the insertion operator to recognize an <b>ostream</b> object on the left and a <code>Date</code> on the right. The overloaded <b>&lt;&lt;</b> operator function must then be declared as a friend of class <code>Date</code> so it can access the private data within a <code>Date</code> object.</p>
<pre><code>#include &lt;iostream.h&gt;

class Date
{
 &nbsp; int mo, da, yr;
public:
 &nbsp; Date( int m, int d, int y )
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; mo = m; da = d; yr = y;
 &nbsp; }
 &nbsp; friend ostream&amp; operator&lt;&lt; ( ostream&amp; os, Date&amp; dt );
};

ostream&amp; operator&lt;&lt; ( ostream&amp; os, Date&amp; dt )
{
 &nbsp; os &lt;&lt; dt.mo &lt;&lt; '/' &lt;&lt; dt.da &lt;&lt; '/' &lt;&lt; dt.yr;
 &nbsp; return os;
}

void main()
{
 &nbsp; Date dt( 5, 6, 92 );
 &nbsp; cout &lt;&lt; dt;
}
</code></pre>
<p>
When you run this program, it prints the date:</p>
<pre><code>5/6/92
</code></pre>
<p>
The overloaded operator returns a reference to the original <b>ostream</b> object, which means you can combine insertions:</p>
<pre><code>cout &lt;&lt; "The date is" &lt;&lt; dt &lt;&lt; flush;
</code></pre>
</font></BODY>
</HTML>

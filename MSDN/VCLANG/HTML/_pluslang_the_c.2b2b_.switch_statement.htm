<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The C++ switch Statement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_the_c.2b2b_.switch_statement"></a><sup></sup>The C++ switch Statement</h1>
<p>
The C++ <b>switch</b> statement allows selection among multiple sections of code, depending on the value of an expression. The expression enclosed in parentheses, the “controlling expression,” must be of an integral type or of a class type for which there is an unambiguous conversion to integral type. Integral promotion is performed as described in <a href="_pluslang_integral_promotions.htm">Integral Promotions</a> in Chapter 3.</p>
<p>
The <b>switch</b> statement causes an unconditional jump to, into, or past the statement that is the “switch body,” depending on the value of the controlling expression, the values of the <b>case</b> labels, and the presence or absence of a <b>default</b> label. The switch body is normally a compound statement (although this is not a syntactic requirement). Usually, some of the statements in the switch body are labeled with <b>case</b> labels or with the <b>default</b> label. Labeled statements are not syntactic requirements, but the <b>switch</b> statement is meaningless without them. The <b>default</b> label can appear only once.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>case</b> <i>constant-expression</i> <b>:</b> <i>statement</i></p>
<p>
<b>default</b>  <b>:</b> <i>statement</i></p>
<p>
The <i>constant-expression</i> in the <b>case</b> label is converted to the type of the controlling expression and is then compared for equality. In a given <b>switch</b> statement, no two constant expressions in <b>case</b> statements can evaluate to the same value. The behavior is shown in Table 5.1.</p>
<p class=label>
<b><a name="_pluslang_table_5..1"></a>Table 5.1&nbsp;&nbsp;&nbsp;Switch Statement Behavior</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>Condition</b></td>
<td class=label width=54%><b>Action</b></td>
</tr>
<tr valign=top>
<td width=46%>Converted value matches that of the promoted controlling expression.</td>
<td width=54%>Control is transferred to the statement following that label.</td>
</tr>
<tr valign=top>
<td width=46%>None of the constants match the constants in the <b>case</b> labels; <b>default</b> label is present.</td>
<td width=54%>Control is transferred to the <b>default</b> label.</td>
</tr>
<tr valign=top>
<td width=46%>None of the constants match the constants in the <b>case</b> labels; <b>default</b> label is not present.</td>
<td width=54%>Control is transferred to the statement after the <b>switch</b> statement.</td>
</tr>
</table><br>
<p>
An inner block of a <b>switch</b> statement can contain definitions with initializations as long as they are reachable — that is, not bypassed by all possible execution paths. Names introduced using these declarations have local scope. The following code fragment shows how the <b>switch</b> statement works:</p>
<pre><code>switch( tolower( *argv[1] ) )
{
 &nbsp;&nbsp; // Error. Unreachable declaration.
 &nbsp;&nbsp; char szChEntered[] = "Character entered was: ";

case 'a' :
 &nbsp;&nbsp; {
 &nbsp;&nbsp; // Declaration of szChEntered OK. Local scope.
 &nbsp;&nbsp; char szChEntered[] = "Character entered was: ";
 &nbsp;&nbsp; cout &lt;&lt; szChEntered &lt;&lt; "a\n";
 &nbsp;&nbsp; }
 &nbsp;&nbsp; break;

case 'b' :
 &nbsp;&nbsp; // Value of szChEntered undefined.
 &nbsp;&nbsp; cout &lt;&lt; szChEntered &lt;&lt; "b\n";
 &nbsp;&nbsp; break;

default:
 &nbsp;&nbsp; // Value of szChEntered undefined.
 &nbsp;&nbsp; cout &lt;&lt; szChEntered &lt;&lt; "neither a nor b\n";
 &nbsp;&nbsp; break;
}
</code></pre>
<p>
A <b>switch</b> statement can be nested. In such cases, <b>case</b> or <b>default</b> labels associate with the most deeply nested <b>switch</b> statements that enclose them. For example:</p>
<pre><code>switch( msg )
{
case WM_COMMAND:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Windows command. Find out more.
 &nbsp;&nbsp; switch( wParam )
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case IDM_F_NEW:&nbsp;&nbsp; // File New menu command.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete wfile;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfile = new WinAppFile;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case IDM_F_OPEN:&nbsp; // File Open menu command.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wfile-&gt;FileOpenDlg();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; ...
 &nbsp;&nbsp; }
case WM_CREATE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create window.
 &nbsp;&nbsp; ...
 &nbsp;&nbsp; break;
case WM_PAINT:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Window needs repainting.
 &nbsp;&nbsp; ...
 &nbsp;&nbsp; break;
default:
 &nbsp;&nbsp; return DefWindowProc( hWnd, Message, wParam, lParam );
}
</code></pre>
<p>
The preceding code fragment from a Microsoft Windows<sup>®</sup> message loop shows how <b>switch</b> statements can be nested. The <b>switch</b> statement that selects on the value of <code>wParam</code> is executed only if <code>msg</code> is <b>WM_COMMAND</b>. The <b>case</b> labels for menu selections, <code>IDM_F_NEW</code> and <code>IDM_F_OPEN</code>, associate with the inner <b>switch</b> statement.</p>
<p>
Control is not impeded by <b>case</b> or <b>default</b> labels. To stop execution at the end of a part of the compound statement, insert a <b>break</b> statement. This transfers control to the statement after the <b>switch</b> statement. This example demonstrates how control “drops through” unless a <b>break</b> statement is used:</p>
<pre><code>BOOL fClosing = FALSE;

...

switch( wParam )
{
case IDM_F_CLOSE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // File close command.
 &nbsp;&nbsp; fClosing = TRUE;
 &nbsp;&nbsp; // fall through

case IDM_F_SAVE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // File save command.
 &nbsp;&nbsp; if( document-&gt;IsDirty() )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( document-&gt;Name() == "UNTITLED" )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileSaveAs( document );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileSave( document );

 &nbsp;&nbsp; if( fClosing )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document-&gt;Close();

 &nbsp;&nbsp; break;
}
</code></pre>
<p>
The preceding code shows how to take advantage of the fact that <b>case</b> labels do not impede the flow of control. If the <code>switch</code> statement transfers control to <code>IDM_F_SAVE</code>, <code>fClosing</code> is <code>FALSE</code>. Therefore, after the file is saved, the document is not closed. However, if the <b>switch</b> statement transfers control to <code>IDM_F_CLOSE</code>, <code>fClosing</code> is set to <code>TRUE</code>, and the code to save a file is executed.</p>
</font></BODY>
</HTML>

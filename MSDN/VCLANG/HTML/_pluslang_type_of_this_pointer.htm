<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type of this Pointer</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_type_of_this_pointer"></a><sup></sup>Type of this Pointer</h1>
<p>
The <b>this</b> pointer’s type can be modified in the function declaration by the <b>const</b> and <b>volatile</b> keywords. To declare a function as having the attributes of one or more of these keywords, use the <i>cv-mod-list</i> grammar.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>cv-mod-list</i> :</p>
<p class=indent>
<i>cv-qualifier</i> <i>cv-mod-list</i><sub>opt</sub></p>
<p class=dt>
<i>cv-qualifier</i> :</p>
<p class=indent>
<b>const</b><br>
<b>volatile</b></p>
<p>
Consider this example:</p>
<pre><code>class Point
{
 &nbsp;&nbsp; unsigned X() const;
};
</code></pre>
<p>
The preceding code declares a member function, <code>X</code>, in which the <b>this</b> pointer is treated as a <b>const</b> pointer to a <b>const</b> object. Combinations of <i>cv-mod-list</i> options can be used, but they always modify the object pointed to by <b>this</b>, not the <b>this</b> pointer itself. Therefore, the following declaration declares function <code>X</code>; the <b>this</b> pointer is a <b>const</b> pointer to a <b>const</b> object:</p>
<pre><code>class Point
{
 &nbsp;&nbsp; unsigned X() __far const;
};
</code></pre>
<p>
The type of <b>this</b> is described by the following syntax, where <i>cv-qualifier-list</i> can be <b>const</b> or <b>volatile</b>, <i>class-type</i> is the name of the class:</p>
<p>
<i>cv-qualifier-list</i><sub>opt</sub><sup> </sup><i>class-type</i> <sup> </sup><b>*</b> <b>const</b> <b>this</b></p>
<p>
Table 8.2 explains more about how these modifiers work.</p>
<p class=label>
<b><a name="_pluslang_table_8..2"></a>Table 8.2&nbsp;&nbsp;&nbsp;Semantics of this Modifiers</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Modifier</b></td>
<td class=label width=84%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=16%><b>const</b></td>
<td width=84%>Cannot change member data; cannot invoke member functions that are not <b>const</b>.</td>
</tr>
<tr valign=top>
<td width=16%><b>volatile</b></td>
<td width=84%>Member data is loaded from memory each time it is accessed; disables certain optimizations.</td>
</tr>
</table><br>
<p>
It is an error to pass a <b>const</b> object to a member function that is not <b>const</b>. Similarly, it is an error to pass a <b>volatile</b> object to a member function that is not <b>volatile</b>. </p>
<p>
Member functions declared as <b>const</b> cannot change member data — in such functions, the <b>this</b> pointer is a pointer to a <b>const</b> object.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Constructors and destructors cannot be declared as <b>const</b> or <b>volatile</b>. They can, however, be invoked on <b>const</b> or <b>volatile</b> objects.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>reinterpret_cast Operator</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_reinterpret_cast_operator"></a><sup></sup>reinterpret_cast Operator</h1>
<p>
The reinterpret_cast operator allows any pointer to be converted into any other pointer type. It also allows any integral type to be converted into any pointer type and vice versa. Misuse of the reinterpret_cast operator can easily be unsafe. Unless the desired conversion is inherently low-level, you should use one of the other cast operators.</p>
<p class=label>
<b>Syntax</b></p>
<p>
reinterpret_cast &lt; <i>type-id</i> &gt; ( <i>expression</i> )</p>
<p>
The reinterpret_cast operator can be used for conversions such as <code>char*</code> to <code>int*</code>, or <code>One_class*</code> to <code>Unrelated_class*</code>, which are inherently unsafe.</p>
<p>
The result of a reinterpret_cast cannot safely be used for anything other than being cast back to its original type. Other uses are, at best, nonportable.</p>
<p>
The reinterpret_cast operator cannot cast away the const, volatile, or __unaligned attributes. See <a href="_pluslang_const_cast_operator.htm">const_cast Operator</a> for information on removing these attributes.</p>
<p>
The reinterpret_cast operator converts a null pointer value to the null pointer value of the destination type.</p>
</font></BODY>
</HTML>

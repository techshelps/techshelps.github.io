<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>map::insert, map::find, and map::end (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_mapCCinsert_find_end">map::insert, map::find, and map::end (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>map::insert, map::find,</code> and <code>map::end</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;map&gt;</p>
<b>Prototype:</b><br>
<pre><code>
iterator map::end();

// Key is the data type of template argument #1 for map
iterator map::find(const Key&amp; key);

pair&lt;iterator, bool&gt; map::insert(const value_type&amp; x);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The end() function returns an iterator that points one past the end of a sequence.  Find returns an iterator that designates the first element whose sort key equals key. If no such element exists, the iterator equals end().  If the key does not already exist, insert will add it to the sequence and return pair&lt;iterator, true&gt;. If the key already exists, insert does not add it to the sequence and returns pair &lt;iterator, false&gt;.  The following sample creates a map of ints to strings. In this case, the mapping is from digits to their string equivalents (1 -&gt; "One", 2 -&gt; "Two", etc.).  The program reads a number from the user, finds the word equivalent for each digit (using the map), and prints the number back as a series of words. For example, if the user enters 25463, the program responds with: Two Five Four Six Three.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: None
//
// &lt;filename&gt; :  main.cpp
//
// Functions:
//
//      end
//      find
//      insert
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;map&gt;

using namespace std;


typedef map&lt;int, string, less&lt;int&gt; &gt; INT2STRING;

void main()
{
// 1. Create a map of ints to strings
    INT2STRING theMap;
    INT2STRING::iterator theIterator;
    string theString = "";
    int index;

// Fill it with the digits 0 - 9, each mapped to its string counterpart
// Note: value_type is a pair for maps...
    theMap.insert(INT2STRING::value_type(0,"Zero"));
    theMap.insert(INT2STRING::value_type(1,"One"));
    theMap.insert(INT2STRING::value_type(2,"Two"));
    theMap.insert(INT2STRING::value_type(3,"Three"));
    theMap.insert(INT2STRING::value_type(4,"Four"));
    theMap.insert(INT2STRING::value_type(5,"Five"));
    theMap.insert(INT2STRING::value_type(6,"Six"));
    theMap.insert(INT2STRING::value_type(7,"Seven"));
    theMap.insert(INT2STRING::value_type(8,"Eight"));
    theMap.insert(INT2STRING::value_type(9,"Nine"));

// Read a Number from the user and print it back as words
    for( ; ; )
    {
        cout &lt;&lt; "Enter \"q\" to quit, or enter a Number: ";
        cin &gt;&gt; theString;
        if(theString == "q")
            break;
        // extract each digit from the string, find its corresponding
        // entry in the map (the word equivalent) and print it
        for(index = 0; index &lt; theString.length(); index++){
            theIterator = theMap.find(theString[index] - '0');
            if(theIterator != theMap.end() )    // is 0 - 9
                cout &lt;&lt; (*theIterator).second &lt;&lt; " ";
            else    // some character other than 0 - 9
                cout &lt;&lt; "[err] ";
        }
        cout &lt;&lt; endl;
    }
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Enter "q" to quit, or enter a Number: 22
Two Two
Enter "q" to quit, or enter a Number: 33
Three Three
Enter "q" to quit, or enter a Number: 456
Four Five Six
Enter "q" to quit, or enter a Number: q
</code></pre>

</body>
</html>

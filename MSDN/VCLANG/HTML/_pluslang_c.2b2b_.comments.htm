<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Comments</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.comments"></a><sup></sup>C++ Comments</h1>
<p>
A comment is text that the compiler ignores but that is useful for programmers. Comments are normally used to annotate code for future reference. The compiler treats them as white space. You can use comments in testing to make certain lines of code inactive; however, <b>#if</b>/<b>#endif</b> preprocessor directives work better for this because you can surround code that contains comments but you cannot nest comments.</p>
<p>
A C++ comment is written in one of the following ways:
<ul type=disc>
<li>
The <code>/*</code> (slash, asterisk) characters, followed by any sequence of characters (including new lines), followed by the <code>*/</code> characters. This syntax is the same as ANSI C.<br><br></li>
<li>
The <code>//</code> (two slashes) characters, followed by any sequence of characters. A new line not immediately preceded by a backslash terminates this form of comment. Therefore, it is commonly called a “single-line comment.”</li>
</ul>
<p>
The comment characters (<code>/*</code>, <code>*/</code>, and <code>//</code>) have no special meaning within a character constant, string literal, or comment. Comments using the first syntax, therefore, cannot be nested. Consider this example:</p>
<pre><code>/* Intent:&nbsp; Comment out this block of code.
 &nbsp; Problem: Nested comments on each line of code are illegal.
FileName = String( "hello.dat" ); /* Initialize file string */
cout &lt;&lt; "File: " &lt;&lt; FileName &lt;&lt; "\n"; /* Print status message */
*/
</code></pre>
<p>
The preceding code will not compile because the compiler scans the input stream from the first <code>/*</code> to the first <code>*/</code> and considers it a comment. In this case, the first <code>*/</code> occurs at the end of the <code>Initialize file string</code> comment. The last <code>*/</code>, then, is no longer paired with an opening <code>/*</code>.</p>
<p>
Note that the single-line form (<code>//</code>) of a comment followed by the line-continuation token (<code>\</code>) can have surprising effects. Consider this code:</p>
<pre><code>#include &lt;stdio.h&gt;

void main()
{
 &nbsp;&nbsp; printf( "This is a number %d", // \
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5 );
}
</code></pre>
<p>
After preprocessing, the preceding code contains errors and appears as follows:</p>
<pre><code>#include &lt;stdio.h&gt;

void main()
{
 &nbsp;&nbsp; printf( "This is a number %d", 
}
</code></pre>
</font></BODY>
</HTML>

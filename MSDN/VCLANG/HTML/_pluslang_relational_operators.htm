<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Relational Operators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_relational_operators"></a><sup></sup>Relational Operators</h1>
<p>
The binary relational operators determine the following relationships:
<ul type=disc>
<li>
Less than<br><br></li>
<li>
Greater than<br><br></li>
<li>
Less than or equal to<br><br></li>
<li>
Greater than or equal to</li>
</ul>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>relational-expression</i> :</p>
<p class=indent>
<i>shift-expression</i><br>
<i>relational-expression</i> &lt; <i>shift-expression</i><br>
<i>relational-expression</i> &gt; <i>shift-expression</i><br>
<i>relational-expression</i> &lt;= <i>shift-expression</i><br>
<i>relational-expression</i> &gt;= <i>shift-expression</i></p>
<p>
The relational operators have left-to-right associativity. Both operands of relational operators must be of arithmetic or pointer type. They yield values of type int. The value returned is 0 if the relationship in the expression is false; otherwise, it is 1. Consider the following code, which demonstrates several relational expressions:</p>
<pre><code>#include &lt;iostream.h&gt;

void main()
{
 &nbsp;&nbsp; cout &lt;&lt; "The true expression 3 &gt; 2 yields: "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; (3 &gt; 2) &lt;&lt; "\n";
 &nbsp;&nbsp; cout &lt;&lt; "The false expression 20 &lt; 10 yields: "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; (20 &lt; 10) &lt;&lt; "\n";
 &nbsp;&nbsp; cout &lt;&lt; "The expression 10 &lt; 20 &lt; 5 yields: "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; (10 &lt; 20 &lt; 5) &lt;&lt; "\n";
}
</code></pre>
<p>
The output from this program is:</p>
<pre><code>The true expression 3 &gt; 2 yields 1
The false expression 20 &lt; 10 yields 0
The expression 10 &lt; 20 &lt; 5 yields 1
</code></pre>
<p>
The expressions in the preceding example must be enclosed in parentheses because the insertion operator (&lt;&lt;) has higher precedence than the relational operators. Therefore, the first expression without the parentheses would be evaluated as:</p>
<pre><code>(cout &lt;&lt; "The true expression 3 &gt; 2 yields: " &lt;&lt; 3) &lt; (2 &lt;&lt; "\n");
</code></pre>
<p>
Note that the third expression evaluates to 1 — because of the left-to-right associativity of relational operators, the explicit grouping of the expression <code>10 &lt; 20 &lt; 5</code> is:</p>
<pre><code>(10 &lt; 20) &lt; 5
</code></pre>
<p>
Therefore, the test performed is:</p>
<pre><code>1 &lt; 5
</code></pre>
<p>
and the result is 1 (or true).</p>
<p>
The usual arithmetic conversions covered in <a href="_pluslang_arithmetic_conversions.htm">Arithmetic Conversions</a> in Chapter 3 are applied to operands of arithmetic types.</p>
</font></BODY>
</HTML>

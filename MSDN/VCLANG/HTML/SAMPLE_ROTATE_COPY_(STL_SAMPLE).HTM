<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>rotate_copy (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_rotate_copy">rotate_copy (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>rotate_copy</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class ForwardIterator, class OutputIterator&gt; inline
     OutputIterator rotate_copy(BidirectionalIterator first,
     BidirectionalIterator middle,
     BidirectionalIterator last,
     OutputIterator result)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The rotate_copy algorithm rotates the elements in the range [first, last) to the right by N positions (where N = middle - first), and copies the result into a sequence of the same size, starting at result. It returns an iterator positioned immediately after the last new element in the resulting sequence.  Note that the OutputIterator should be different from the sequence to be rotated. If they are the same, the result will depend on the implementation.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// rotate_copy.cpp : Illustrates how to use the rotate_copy function.
//
// Functions:
//
//    rotate_copy - Rotate a sequence by n positions, copy the
//                  results to another same sized sequence.
//
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;

using namespace std ;

void main()
{
    const int VECTOR_SIZE = 8 ;

    // Define a template class vector of strings
    typedef vector&lt;string&gt; StrVector ;

    //Define an iterator for template class vector of strings
    typedef StrVector::iterator StrVectorIt ;

    StrVector Tongue_Twister(VECTOR_SIZE) ;
    StrVector Rotated_Twister(VECTOR_SIZE) ;

    StrVectorIt start, middle, end, it, RTstart, RTend ;

    start = Tongue_Twister.begin() ;    // location of first
                                        // element of Tongue_Twister

    end = Tongue_Twister.end() ;        // one past the location last
                                        // element of Tongue_Twister

    middle = start + 3 ;                // start position for
                                        // rotating elements

    RTstart = Rotated_Twister.begin() ; // location of first
                                        // element of Rotated_Twister

    RTend = Rotated_Twister.end() ;     // one past the location last
                                        // element of Rotated_Twister

    //Initialize vector Tongue_Twister
    Tongue_Twister[0] = "she" ;
    Tongue_Twister[1] = "sells" ;
    Tongue_Twister[2] = "sea" ;
    Tongue_Twister[3] = "shells" ;
    Tongue_Twister[4] = "by";
    Tongue_Twister[5] = "the";
    Tongue_Twister[6] = "sea" ;
    Tongue_Twister[7] = "shore" ;

    cout &lt;&lt; "Before calling rotate_copy:\n" &lt;&lt; endl ;

    // print content of Tongue_Twister
    cout &lt;&lt; "Try this Tongue Twister: " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; "\n\n" ;

    // rotate the items in the vector Tongue_Twist to the right by
    // 3 positions and copy the results to Rotated_Twister
    rotate_copy(start, middle, end, RTstart) ;

    cout &lt;&lt; "After calling rotate_copy:\n" &lt;&lt; endl ;

    // print content of Tongue_Twister
    cout &lt;&lt; "Tongue_Twister: " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; "\n\n" ;

    // print content of Rotated_Twister
    cout &lt;&lt; "Now try the rotated Tongue Twister: " ;
    for(it = RTstart; it != RTend; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; "\n\n" ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Before calling rotate_copy:

Try this Tongue Twister: she sells sea shells by the sea shore

After calling rotate_copy:

Tongue_Twister: she sells sea shells by the sea shore

Now try the rotated Tongue Twister: shells by the sea shore she sells sea
</code></pre>

</body>
</html>

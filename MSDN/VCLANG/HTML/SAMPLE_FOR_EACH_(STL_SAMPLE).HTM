<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>for_each (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_for_each">for_each (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>for_each</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator, class Function&gt; inline
     Function for_each(InputIterator first, InputIterator last, Function F)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The for_each algorithm calls Function F for each element in the range [first, last) and returns the input parameter F. This function does not modify any elements in the sequence.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// count.cpp : Illustrates how to use the for_each function.
//
// Functions:
//
//   for_each  - Calls function F for every element in a range.
//
//   begin     - Returns an iterator that points to the first element
//               in a sequence.
//
//   end       - Returns an iterator that points one past the end of
//               a sequence.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;


// prints the cube of integer n
void PrintCube(int n)
{
    cout &lt;&lt; n * n * n &lt;&lt; " " ;
}

void main()
{
    const int VECTOR_SIZE = 8 ;

    // Define a template class vector of integers
    typedef vector&lt;int &gt; IntVector ;

    //Define an iterator for template class vector of integer
    typedef IntVector::iterator IntVectorIt ;

    IntVector Numbers(VECTOR_SIZE) ;   //vector containing numbers

    IntVectorIt start, end, it ;

    int i ;

    // Initialize vector Numbers
    for (i = 0; i &lt; VECTOR_SIZE; i++)
        Numbers[i] = i + 1 ;

    start = Numbers.begin() ;   // location of first
                                // element of Numbers

    end = Numbers.end() ;       // one past the location
                                // last element of Numbers

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // for each element in the range [first, last)
    // print the cube of the element
    for_each(start, end, PrintCube) ;
    cout &lt;&lt; "\n\n" ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Numbers { 1 2 3 4 5 6 7 8  }

1 8 27 64 125 216 343 512
</code></pre>

</body>
</html>

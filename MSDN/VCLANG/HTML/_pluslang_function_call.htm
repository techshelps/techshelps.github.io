<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Call</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_function_call"></a><sup></sup>Function Call</h1>
<p>
The function-call operator, invoked using parentheses, is a binary operator. The syntax for a function call is:</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>primary-expression</i>  <b>(</b>  <i>expression-list</i><sub>opt</sub>  <b>)</b></p>
<p>
In this context, <i>primary-expression</i> is the first operand, and <i>expression-list</i>, a possibly empty list of arguments, is the second operand. The function-call operator is used for operations that require a number of parameters. This works because <i>expression-list</i> is a list instead of a single operand. The function-call operator must be a nonstatic member function.</p>
<p>
The function-call operator, when overloaded, does not modify how functions are called; rather, it modifies how the operator is to be interpreted when applied to objects of a given class type. For example, the following code would usually be meaningless:</p>
<pre><code>Point pt;
pt( 3, 2 );
</code></pre>
<p>
Given an appropriate overloaded function-call operator, however, this syntax can be used to offset the <i>x</i> coordinate 3 units and the <i>y</i> coordinate 2 units. The following code shows such a definition:</p>
<pre><code>class Point
{
public:
 &nbsp;&nbsp; Point() { _x = _y = 0; }
 &nbsp;&nbsp; Point &amp;operator()( int dx, int dy )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { _x += dx; _y += dy; return *this; }
private:
 &nbsp;&nbsp; int _x, _y;
};

...

Point pt;
pt( 3, 2 );
</code></pre>
<p>
Note that the function-call operator is applied to the name of an object, not the name of a function.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>auto_ptr</title></head>
<body bgcolor=white>

<h2><a name="auto_ptr">auto_ptr</a></h2>
<META NAME="MS-HKWD" CONTENT="auto_ptr">
<pre><code>template&lt;class T&gt;
    class <b>auto_ptr</b> {
public:
    typedef T <a href="MEMORY_auto_ptrCCelement_type.htm#auto_ptr::element_type"><b>element_type</b></a>;
    explicit <a href="MEMORY_auto_ptrCCauto_ptr.htm#auto_ptr::auto_ptr"><b>auto_ptr</b></a>(T *p = 0) throw();
    <a href="MEMORY_auto_ptrCCauto_ptr.htm#auto_ptr::auto_ptr"><b>auto_ptr</b></a>(const auto_ptr&lt;T&gt;&amp; rhs) throw();
    auto_ptr&lt;T&gt;&amp; <a href="MEMORY_auto_ptrCCoperatorE.htm#auto_ptr::operator="><b>operator=</b></a>(auto_ptr&lt;T&gt;&amp; rhs) throw();
    <a href="MEMORY_auto_ptrCCTauto_ptr.htm#auto_ptr::~auto_ptr"><b>~auto_ptr</b></a>();
    T&amp; <a href="MEMORY_auto_ptrCCoperatorX.htm#auto_ptr::operator*"><b>operator*</b></a>() const throw();
    T *<a href="MEMORY_auto_ptrCCoperatorMG.htm#auto_ptr::operator-&gt;"><b>operator-&gt;</b></a>() const throw();
    T *<a href="MEMORY_auto_ptrCCget.htm#auto_ptr::get"><b>get</b></a>() const throw();
    T *<a href="MEMORY_auto_ptrCCrelease.htm#auto_ptr::release"><b>release</b></a>() const throw();
    };</code></pre>
<p>The class describes an object that stores a pointer to an allocated object of type <code>T</code>. The stored pointer must either be 
null or designate an object allocated by a <code>new</code> expression. The object also stores an <a name="ownership indicator"><b>ownership indicator</b></a>. An object 
constructed with a non-null pointer owns the pointer. It transfers ownership if its stored value is assigned to another 
object. The destructor for <code>auto_ptr&lt;T&gt;</code> deletes the allocated object if it owns it. Hence, an object of class 
<code>auto_ptr&lt;T&gt;</code> ensures that an allocated object is automatically deleted when control leaves a block, even via a thrown 
exception.</p>
</body>
</html>

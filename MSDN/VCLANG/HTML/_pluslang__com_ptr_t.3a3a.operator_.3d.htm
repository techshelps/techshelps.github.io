<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_com_ptr_t::operator =</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang__com_ptr_t.3a3a.operator_.3d"></a>_com_ptr_t::operator =</h1>
<p>
<b>Microsoft Specific </b></p>
<p>
<b>_com_ptr_t&amp; operator=( Interface* </b><i>pInterface</i><b> ) throw( );</b></p>
<p>
<b>_com_ptr_t&amp; operator=( int NULL ) throw( _com_error );</b></p>
<p>
<b>template&lt; &gt; _com_ptr_t&amp; operator=( const _com_ptr_t&amp; </b><i>cp</i><b> ) throw( );</b></p>
<p>
<b>template&lt; &gt; _com_ptr_t&amp; operator=( const _variant_t&amp; </b><i>varSrc</i><b> ) throw( _com_error );</b></p>
<p>
<b>template&lt;typename _InterfacePtr&gt; _com_ptr_t&amp; operator=( const _InterfacePtr&amp; </b><i>p</i><b> ) throw( _com_error );</b></p>
<p class=label>
<b>Remarks</b></p>
<p>
Assigns an interface pointer to this <b>_com_ptr_t</b> object:
<ul type=disc>
<li>
<b>operator=( </b><i>pInterface</i><b> )</b>&nbsp;&nbsp;&nbsp;Encapsulates a raw interface pointer of this smart pointer’s type. <b>AddRef</b> is called to increment the reference count for the encapsulated interface pointer, and <b>Release</b> is called to decrement the reference count for the previously encapsulated pointer.<br><br></li>
<li>
<b>operator=( NULL )</b>&nbsp;&nbsp;&nbsp;Sets a smart pointer to <b>NULL</b>. The <b>NULL</b> argument must be a zero.<br><br></li>
<li>
<b>operator=( </b><i>cp</i><b> )</b>&nbsp;&nbsp;&nbsp;Sets a smart pointer to be a copy of another instance of the same smart pointer of the same type. <b>AddRef</b> is called to increment the reference count for the encapsulated interface pointer, and <b>Release</b> is called to decrement the reference count for the previously encapsulated pointer.<br><br></li>
<li>
<b>operator=( </b><i>varSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Sets a smart pointer to be a <b>_variant_t</b> object. The encapsulated <b>VARIANT</b> must be of type <b>VT_DISPATCH</b> or <b>VT_UNKNOWN</b>, or it can be converted to one of these two types. If <b>QueryInterface</b> fails with an <b>E_NOINTERFACE</b> error, a <b>NULL</b> smart pointer results. Any other error causes a <b>_com_error</b> to be raised.<br><br></li>
<li>
<b>operator=( </b><i>p</i><b> )</b>&nbsp;&nbsp;&nbsp;Sets a smart pointer to be a different smart pointer of a different type or a different raw interface pointer. <b>QueryInterface</b> is called to find an interface pointer of this smart pointer’s type, and <b>Release</b> is called to decrement the reference count for the previously encapsulated pointer. If <b>QueryInterface</b> fails with an <b>E_NOINTERFACE</b>, a <b>NULL</b> smart pointer results. Any other error causes a <b>_com_error</b> to be raised.</li>
</ul>
<p>
<a href="_pluslang__com_ptr_t.htm">_com_ptr_t Overview</a></p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Argument Type Differences</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_argument_type_differences"></a><sup></sup>Argument Type Differences</h1>
<p>
Overloaded functions differentiate between argument types that take different initializers. Therefore, an argument of a given type and a reference to that type are considered the same for the purposes of overloading. They are considered the same because they take the same initializers. For example, <code>max( double, double )</code> is considered the same as <code>max( double &amp;, double &amp; )</code>. Declaring two such functions causes an error.</p>
<p>
For the same reason, function arguments of a type modified by <b>const</b> or <b>volatile</b> are not treated differently than the base type for the purposes of overloading.</p>
<p>
However, the function overloading mechanism can distinguish between references that are qualified by <b>const</b> and <b>volatile</b> and references to the base type. This makes code such as the following possible:</p>
<pre><code>#include &lt;iostream.h&gt;

class Over
{
public:
 &nbsp;&nbsp; Over() { cout &lt;&lt; "Over default constructor\n"; }
 &nbsp;&nbsp; Over( Over &amp;o ) { cout &lt;&lt; "Over&amp;\n"; }
 &nbsp;&nbsp; Over( const Over &amp;co ) { cout &lt;&lt; "const Over&amp;\n"; }
 &nbsp;&nbsp; Over( volatile Over &amp;vo ) { cout &lt;&lt; "volatile Over&amp;\n"; }
};

void main()
{
 &nbsp;&nbsp; Over o1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls default constructor.
 &nbsp;&nbsp; Over o2( o1 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls Over( Over&amp; ).
 &nbsp;&nbsp; const Over o3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls default constructor.
 &nbsp;&nbsp; Over o4( o3 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls Over( const Over&amp; ).
 &nbsp;&nbsp; volatile Over o5;&nbsp;&nbsp; // Calls default constructor.
 &nbsp;&nbsp; Over o6( o5 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls Over( volatile Over&amp; ).
}
</code></pre>
<p>
Pointers to <b>const</b> and <b>volatile</b> objects are also considered different from pointers to the base type for the purposes of overloading.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type int</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_type_int"></a><sup></sup>Type int</h1>
<p>
The size of a signed or unsigned <b>int</b> item is the standard size of an integer on a particular machine. For example, in 16-bit operating systems, the <b>int</b> type is usually 16 bits, or 2 bytes. In 32-bit operating systems, the <b>int</b> type is usually 32 bits, or 4 bytes. Thus, the <b>int</b> type is equivalent to either the <b>short int</b> or the <b>long int</b> type, and the <b>unsigned int</b> type is equivalent to either the <b>unsigned short</b> or the <b>unsigned long</b> type, depending on the target environment. The <b>int</b> types all represent signed values unless specified otherwise. </p>
<p>
The type specifiers <b>int</b> and <b>unsigned int</b> (or simply <b>unsigned</b>) define certain features of the C language (for instance, the <b>enum</b> type). In these cases, the definitions of <b>int</b> and unsigned int for a particular implementation determine the actual storage. </p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
Signed integers are represented in two’s-complement form. The most-significant bit holds the sign: 1 for negative, 0 for positive and zero. The range of values is given in <a href="_clang_c_integer_limits.htm#_clang_table_1..3">Table 1.3</a>, which is taken from the LIMITS.H header file. </p>
<p>
<b>END Microsoft Specific</b></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The int and unsigned int type specifiers are widely used in C programs because they allow a particular machine to handle integer values in the most efficient way for that machine. However, since the sizes of the int and unsigned int types vary, programs that depend on a specific int size may not be portable to other machines. To make programs more portable, you can use expressions with the sizeof operator (as discussed in <a href="_clang_the_sizeof_operator.htm">The sizeof Operator</a> in Chapter 4) instead of hard-coded data sizes. </p>
</font></BODY>
</HTML>

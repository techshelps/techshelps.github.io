<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fundamental Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_fundamental_types"></a><sup></sup>Fundamental Types</h1>
<p>
Fundamental types in C++ are divided into three categories: “integral,” “floating,” and “void.” Integral types are capable of handling whole numbers. Floating types are capable of specifying values that may have fractional parts.</p>
<p>
The <b>void</b> type describes an empty set of values. No variable of type <b>void</b> can be specified — it is used primarily to declare functions that return no values or to declare “generic” pointers to untyped or arbitrarily typed data. Any expression can be explicitly converted or cast to type <b>void</b>. However, such expressions are restricted to the following uses:
<ul type=disc>
<li>
An expression statement. (See Chapter 4, <a href="_pluslang_expressions.htm">Expressions</a>, for more information.)<br><br></li>
<li>
The left operand of the comma operator. (See <a href="_pluslang_comma_operator.htm">Comma Operator</a> in Chapter 4 for more information.)<br><br></li>
<li>
The second or third operand of the conditional operator (<b>? :</b>). (See <a href="_pluslang_expressions_with_the_conditional_operator.htm">Expressions with the Conditional Operator</a> in Chapter 4 for more information.)</li>
</ul>
<p>
Table 2.3 explains the restrictions on type sizes. These restrictions are independent of the Microsoft implementation.</p>
<p class=label>
<b><a name="_pluslang_table_2..3"></a>Table 2.3&nbsp;&nbsp;&nbsp;Fundamental Types of the C++ Language</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Category</b></td>
<td class=label width=16%><b>Type</b></td>
<td class=label width=66%><b>Contents</b></td>
</tr>
<tr valign=top>
<td width=18%>Integral</td>
<td width=16%><b>char</b></td>
<td width=66%>Type <b>char</b> is an integral type that usually contains members of the execution character set — in Microsoft C++, this is ASCII.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%></td>
<td width=66%>The C++ compiler treats variables of type <b>char</b>, <b>signed</b> <b>char</b>, and <b>unsigned</b> <b>char</b> as having different types. Variables of type <b>char</b> are promoted to <b>int</b> as if they are type <b>signed</b> <b>char</b> by default, unless the /J compilation option is used. In this case they are treated as type <b>unsigned</b> <b>char</b> and are promoted to <b>int</b> without sign extension.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%><b>short</b></td>
<td width=66%>Type <b>short</b> <b>int</b> (or simply <b>short</b>) is an integral type that is larger than or equal to the size of type <b>char</b>, and shorter than or equal to the size of type <b>int</b>.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%></td>
<td width=66%>Objects of type <b>short</b> can be declared as <b>signed</b> <b>short</b> or <b>unsigned short</b>. <b>Signed short</b> is a synonym for <b>short</b>.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%><b>int</b></td>
<td width=66%>Type <b>int</b> is an integral type that is larger than or equal to the size of type <b>short</b> <b>int</b>, and shorter than or equal to the size of type <b>long</b>.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%></td>
<td width=66%>Objects of type <b>int</b> can be declared as <b>signed</b> <b>int</b> or <b>unsigned</b> <b>int</b>. <b>Signed</b> <b>int</b> is a synonym for <b>int</b>.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%>__<b>int</b><i>n</i></td>
<td width=66%>Sized integer, where <i>n</i> is the size, in bits, of the integer variable. The value of <i>n</i> can be 8, 16, 32, or 64.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%><b>long</b></td>
<td width=66%>Type <b>long</b> (or <b>long</b> <b>int</b>) is an integral type that is larger than or equal to the size of type <b>int</b>.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%></td>
<td width=66%>Objects of type <b>long</b> can be declared as <b>signed</b> <b>long</b> or <b>unsigned</b> <b>long</b>. <b>Signed</b> <b>long</b> is a synonym for <b>long</b>.</td>
</tr>
<tr valign=top>
<td width=18%>Floating</td>
<td width=16%><b>float</b></td>
<td width=66%>Type <b>float</b> is the smallest floating type.</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%><b>double</b></td>
<td width=66%>Type <b>double</b> is a floating type that is larger than or equal to type <b>float</b>, but shorter than or equal to the size of type <b>long</b> <b>double</b>.<sup>1</sup></td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=16%><b>long double</b><sup>1</sup></td>
<td width=66%>Type <b>long</b> <b>double</b> is a floating type that is equal to type <b>double</b>.</td>
</tr>
</table><br>
<p class=mini>
<sup>1&nbsp;&nbsp;&nbsp;</sup>The representation of <b>long double</b> and <b>double</b> is identical. However, <b>long double</b> and <b>double</b> are separate types.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
Table 2.4 lists the amount of storage required for fundamental types in Microsoft C++. </p>
<p class=label>
<b><a name="_pluslang_table_2..4"></a>Table 2.4&nbsp;&nbsp;&nbsp;Sizes of Fundamental Types</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Type</b></td>
<td class=label width=52%><b>Size</b></td>
</tr>
<tr valign=top>
<td width=48%><b>char</b>, <b>unsigned char</b>, <b>signed char</b></td>
<td width=52%>1 byte</td>
</tr>
<tr valign=top>
<td width=48%><b>short</b>, <b>unsigned short</b></td>
<td width=52%>2 bytes</td>
</tr>
<tr valign=top>
<td width=48%><b>int</b>, <b>unsigned int</b></td>
<td width=52%>4 bytes</td>
</tr>
<tr valign=top>
<td width=48%><b>long</b>, <b>unsigned long</b></td>
<td width=52%>4 bytes</td>
</tr>
<tr valign=top>
<td width=48%><b>float</b></td>
<td width=52%>4 bytes</td>
</tr>
<tr valign=top>
<td width=48%><b>double</b></td>
<td width=52%>8 bytes</td>
</tr>
<tr valign=top>
<td width=48%><b>long double</b><sup>1</sup></td>
<td width=52%>8 bytes</td>
</tr>
</table><br>
<p class=mini>
<sup>1</sup>&nbsp;&nbsp;&nbsp;The representation of <b>long double</b> and <b>double</b> is identical. However, <b>long double</b> and <b>double</b> are separate types.</p>
<p>
For more information about type conversion, see Chapter 3, <a href="_pluslang_standard_conversions.htm">Standard Conversions</a>.</p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>stack::operator&lt; (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stackCCoperatorLT">stack::operator&lt; (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>stack::operator&lt;&lt;</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;stack&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _C, class _A&gt;
     bool stack::operator&lt;(const stack&lt;_TYPE, _C, _A&gt;&amp; _X) const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The stack::operator&lt; function returns true if the stack on the left side of the operator is less than the stack on the right side. The following steps are used to determine if one stack is less than another stack:  1. Compare the bottom-most (very first element pushed onto the stack).  2. If the elements are different, the stack with the smaller element is less than the stack with the greater element. Go to Step 5.  3. If the elements are the same and there are more elements, move to the next element in the stack and go back to step 2.  4. If all the elements in the stacks are processed at this point, the stacks are equal.  5. Done.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StackLessThan.cpp : Illustrates how to use the stack::operator&lt;
//                     function to determine if one stack is less than
//                     another stack.
//
// Functions:
//
//    operator&lt; :  Returns true if the stack is smaller than the stack
//                 passed as the operand.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;stack&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef stack&lt;double&gt; STACK_DOUBLE;

void main()
{
   STACK_DOUBLE stack1,stack2;

   // Add item 4.0 to Stack1. Stack1 contains 4.0.
   cout &lt;&lt; "stack1.push(4.0)  s1=[4.0]" &lt;&lt; endl;
   stack1.push(4.0);

   // Add item 3.0 to Stack1. Stack1 contains 3.0(top) and 4.0(bottom).
   cout &lt;&lt; "stack1.push(3.0)  s1=[3.0 4.0]" &lt;&lt; endl;
   stack1.push(3.0);

   // Add item 4.0 to Stack2. Stack2 contains 4.0 (top=bottom).
   cout &lt;&lt; "stack2.push(4.0)  s2=[4.0]" &lt;&lt; endl;
   stack2.push(4.0);

   // Compare if Stack1 is smaller than Stack2. Should return False.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Add item 6.0 to Stack2. Stack2 contains 6.0(top) and 4.0(bottom).
   cout &lt;&lt; "stack2.push(6.0)  s2=[6.0 4.0]" &lt;&lt; endl;
   stack2.push(6.0);

   // Compare if Stack1 is smaller than Stack2. Should return True.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Add item 8.0 to Stack2. Stack2 contains 8.0(top), 6.0 and
   // 4.0(bottom).
   cout &lt;&lt; "stack2.push(8.0)  s2=[8.0 6.0 4.0]" &lt;&lt; endl;
   stack2.push(8.0);

   // Compare if Stack1 is smaller than Stack2. Should return True.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Delete item 8.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[6.0 4.0]" &lt;&lt; endl;
   stack2.pop();

   // Delete item 6.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[4.0]" &lt;&lt; endl;
   stack2.pop();

   // Add item 3.0 to Stack2. Stack2 contains 3.0(top) and 4.0(bottom).
   cout &lt;&lt; "stack2.push(3.0)  s2=[3.0 4.0]" &lt;&lt; endl;
   stack2.push(3.0);

   // Compare if Stack1 is smaller than Stack2. Should return False.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Delete item 3.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[4.0]" &lt;&lt; endl;
   stack2.pop();

   // Delete item 4.0 from Stack2.
   cout &lt;&lt; "stack2.pop()      s2=[]" &lt;&lt; endl;
   stack2.pop();

   // Add item 8.0 to Stack2. Stack2 contains 8.0(top=bottom).
   cout &lt;&lt; "stack2.push(8.0)  s2=[8.0]" &lt;&lt; endl;
   stack2.push(8.0);

   // Compare if Stack1 is smaller than Stack2. Should return True.
   cout &lt;&lt; "stack1&lt;stack2 is " &lt;&lt;
      ((stack1&lt;stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>stack1.push(4.0)  s1=[4.0]
stack1.push(3.0)  s1=[3.0 4.0]
stack2.push(4.0)  s2=[4.0]
stack1&lt;stack2 is False

stack2.push(6.0)  s2=[6.0 4.0]
stack1&lt;stack2 is True

stack2.push(8.0)  s2=[8.0 6.0 4.0]
stack1&lt;stack2 is True

stack2.pop()      s2=[6.0 4.0]
stack2.pop()      s2=[4.0]
stack2.push(3.0)  s2=[3.0 4.0]
stack1&lt;stack2 is False

stack2.pop()      s2=[4.0]
stack2.pop()      s2=[]
stack2.push(8.0)  s2=[8.0]
stack1&lt;stack2 is True
</code></pre>

</body>
</html>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>vector::empty, erase, and push_back (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_vectorCCempty_erase_push_back">vector::empty, erase, and push_back (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>vector::(empty, erase, push_back)</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;vector&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _A&gt;
     void vector::push_back(const _TYPE&amp; X);

template&lt;class _TYPE, class _A&gt;
     iterator vector::erase(iterator Iterator);

template&lt;class _TYPE, class _A&gt;
    iterator vector::erase(iterator First, iterator Last);

template&lt;class _TYPE, class _A&gt;
    bool vector::empty() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The sample declares an empty vector of integers. It adds 10 integers to the vector, then displays the contents of the vector. It deletes the sixth element by using erase, and then displays the contents of the vector again. It deletes the rest of the elements using a different form of erase, then displays the vector (now empty) again. The ShowVector routine uses the empty function to determine whether to generate the contents of the vector.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
//    Empty.cpp -- Illustrates the vector::empty and vector::erase
//                 functions.
//                 Also demonstrates the vector::push_back function.
//
// Functions:
//
//    vector::empty - Returns true if vector has no elements.
//
//    vector::erase - Deletes elements from a vector (single &amp; range).
//
//    vector::begin - Returns an iterator to start traversal of the
//                    vector.
//
//    vector::end - Returns an iterator for the last element of the
//                  vector.
//
//    vector::push_back - Appends (inserts) an element to the end of a
//                        vector, allocating memory for it if necessary.
//
//    vector::iterator - Traverses the vector.
//
//////////////////////////////////////////////////////////////////////

// The debugger can't handle symbols more than 255 characters long.
// STL often creates symbols longer than that.
// When symbols are longer than 255 characters, the warning is disabled.
#pragma warning(disable:4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std ;

typedef vector&lt;int&gt; INTVECTOR;

const ARRAY_SIZE = 10;

void ShowVector(INTVECTOR &amp;theVector);

void main()
{
    // Dynamically allocated vector begins with 0 elements.
    INTVECTOR theVector;

    // Intialize the vector to contain the numbers 0-9.
    for (int cEachItem = 0; cEachItem &lt; ARRAY_SIZE; cEachItem++)
        theVector.push_back(cEachItem);

 </code></pre>

<p>Program Output is:</p>

<pre><code>
    // Using void iterator erase(iterator Iterator) to
    // delete the 6th element (Index starts with 0).
    theVector.erase(theVector.begin() + 5);

    // Output the contents of the dynamic vector of integers.
    ShowVector(theVector);

    // Using iterator erase(iterator First, iterator Last) to
    // delete a range of elements all at once.
    theVector.erase(theVector.begin(), theVector.end());

    // Show what's left (actually, nothing).
    ShowVector(theVector);
}

// Output the contents of the dynamic vector or display a
// message if the vector is empty.
void ShowVector(INTVECTOR &amp;theVector)
{
    // First see if there's anything in the vector. Quit if so.
    if (theVector.empty())
    {
        cout &lt;&lt; endl &lt;&lt; "theVector is empty." &lt;&lt; endl;
        return;
    }

    // Iterator is used to loop through the vector.
    INTVECTOR::iterator theIterator;

    // Output contents of theVector.
    cout &lt;&lt; endl &lt;&lt; "theVector [ " ;
    for (theIterator = theVector.begin(); theIterator != theVector.end();
         theIterator++)
    {
        cout &lt;&lt; *theIterator;
        if (theIterator != theVector.end()-1) cout &lt;&lt; ", ";
                                              // cosmetics for the output
    }
    cout &lt;&lt; " ]" &lt;&lt; endl ;
}

Program Output is:

theVector [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]

theVector [ 0, 1, 2, 3, 4, 6, 7, 8, 9 ]

theVector is empty.
</code></pre>

</body>
</html>

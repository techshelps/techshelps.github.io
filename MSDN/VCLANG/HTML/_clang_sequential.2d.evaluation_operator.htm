<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sequential-Evaluation Operator</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_sequential.2d.evaluation_operator"></a><sup></sup>Sequential-Evaluation Operator</h1>
<p>
The sequential-evaluation operator, also called the “comma operator,” evaluates its two operands sequentially from left to right. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>expression</i> :</p>
<p class=indent>
<i>assignment-expression</i><br>
<i>expression</i> <b>,</b> <i>assignment-expression</i></p>
<p>
The left operand of the sequential-evaluation operator is evaluated as a <b>void</b> expression. The result of the operation has the same value and type as the right operand. Each operand can be of any type. The sequential-evaluation operator does not perform type conversions between its operands, and it does not yield an l-value. There is a sequence point after the first operand, which means all side effects from the evaluation of the left operand are completed before beginning evaluation of the right operand. See <a href="_clang_c_sequence_points.htm">Sequence Points</a> for more information. </p>
<p>
The sequential-evaluation operator is typically used to evaluate two or more expressions in contexts where only one expression is allowed.</p>
<p>
Commas can be used as separators in some contexts. However, you must be careful not to confuse the use of the comma as a separator with its use as an operator; the two uses are completely different. </p>
<p class=label>
<b>Example</b></p>
<p>
This example illustrates the sequential-evaluation operator:</p>
<pre><code>for ( i = j = 1; i + j &lt; 20; i += i, j-- );
</code></pre>
<p>
In this example, each operand of the <b>for</b> statement’s third expression is evaluated independently. The left operand <code>i += i</code> is evaluated first; then the right operand, <code>j––</code>, is evaluated.</p>
<pre><code>func_one( x, y + 2, z );
func_two( (x--, y + 2), z );
</code></pre>
<p>
In the function call to <code>func_one</code>, three arguments, separated by commas, are passed: <code>x</code>, <code>y + 2</code>, and <code>z</code>. In the function call to <code>func_two</code>, parentheses force the compiler to interpret the first comma as the sequential-evaluation operator. This function call passes two arguments to <code>func_two</code>. The first argument is the result of the sequential-evaluation operation <code>(x--, y + 2)</code>, which has the value and type of the expression <code>y + 2</code>; the second argument is <code>z</code>.</p>
</font></BODY>
</HTML>

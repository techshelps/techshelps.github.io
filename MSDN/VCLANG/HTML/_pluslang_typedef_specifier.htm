<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>typedef Specifier</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_typedef_specifier"></a><sup></sup>typedef Specifier</h1>
<p>
The <b>typedef</b> specifier defines a name that can be used as a synonym for a type or derived type. You cannot use the <b>typedef</b> specifier inside a function definition.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>typedef-name</i>:</p>
<p class=indent>
<i>identifier</i></p>
<p>
A <b>typedef</b> declaration introduces a name that, within its scope, becomes a synonym for the type given by the <i>decl-specifiers</i> portion of the declaration. In contrast to the <b>class</b>, <b>struct</b>, <b>union</b>, and <b>enum</b> declarations, <b>typedef</b> declarations do not introduce new types — they introduce new names for existing types.</p>
<p>
One use of <b>typedef</b> declarations is to make declarations more uniform and compact. For example:</p>
<pre><code>typedef char CHAR;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Character type.
typedef CHAR * PSTR;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Pointer to a string (char *).
...
PSTR strchr( PSTR source, CHAR target );
</code></pre>
<p>
The names introduced by the preceding declarations are synonyms for:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=14%><b>Name</b></td>
<td class=label width=86%><b>Synonymous Type</b></td>
</tr>
<tr valign=top>
<td width=14%><pre><code>CHAR</code></pre>
</td>
<td width=86%><b>char</b></td>
</tr>
<tr valign=top>
<td width=14%><pre><code>PSTR</code></pre>
</td>
<td width=86%><b>char *</b></td>
</tr>
</table><br>
<p>
The preceding example code declares a type name, <code>CHAR</code>, which is then used to define the derived type name <code>PSTR</code> (a pointer to a string). Finally, the names are used in declaring the function <b>strchr</b>. To see how the <b>typedef</b> keyword can be used to clarify declarations, contrast the preceding declaration of <b>strchr</b> with the following declaration:</p>
<pre><code>char * strchr( char * source, char target );
</code></pre>
<p>
To use <b>typedef</b> to specify fundamental and derived types in the same declaration, you can separate declarators with commas. For example:</p>
<pre><code>typedef char CHAR, *PSTR;
</code></pre>
<p>
A particularly complicated use of <b>typedef</b> is to define a synonym for a “pointer to a function that returns type <i>T</i>.” For example, a <b>typedef</b> declaration that means “pointer to a function that takes no arguments and returns type <b>void</b>” uses this code:</p>
<pre><code>typedef void (*PVFN)();
</code></pre>
<p>
The synonym can be handy in declaring arrays of functions that are to be invoked through a pointer:</p>
<pre><code>#include &lt;iostream.h&gt;
#include &lt;stdlib.h&gt;

extern void func1();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declare 4 functions.
extern void func2();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // These functions are assumed to be
extern void func3();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; defined elsewhere.
extern void func4();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declare synonym for pointer to
typedef void (*PVFN)();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; function that takes no arguments
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; and returns type void.

void main( int argc, char * argv[] )
{
 &nbsp;&nbsp; // Declare an array of pointers to functions.
 &nbsp;&nbsp; PVFN pvfn1[] = { func1, func2, func3, func4 };

 &nbsp;&nbsp; // Invoke the function specified on the command line.
 &nbsp;&nbsp; if( argc &gt; 0 &amp;&amp; *argv[1] &gt; '0' &amp;&amp; *argv[1] &lt;= '4' )
   (*pvfn1[atoi( argv[1] ) - 1])();
}
</code></pre>
</font></BODY>
</HTML>

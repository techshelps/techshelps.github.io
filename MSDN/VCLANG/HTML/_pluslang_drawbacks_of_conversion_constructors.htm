<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Drawbacks of Conversion Constructors</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_drawbacks_of_conversion_constructors"></a><sup></sup>Drawbacks of Conversion Constructors</h1>
<p>
Because the compiler can select a conversion constructor implicitly, you relinquish control over what functions are called when. If it is essential to retain full control, do not declare any constructors that take a single argument; instead, define “helper” functions to perform conversions, as in the following example:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

// Declare Money class.
class Money
{
public:
 &nbsp;&nbsp; Money();
// Define conversion functions that can only be called explicitly.
 &nbsp;&nbsp; static Money Convert( char * ch ) { return Money( ch ); }
 &nbsp;&nbsp; static Money Convert( double d )&nbsp;&nbsp;&nbsp; { return Money( d ); };
 &nbsp;&nbsp; void&nbsp; Print() { printf( "\n%f", _amount ); }
private:
 &nbsp;&nbsp; Money( char *ch ) { _amount = atof( ch ); }
 &nbsp;&nbsp; Money( double d ) { _amount = d; }
 &nbsp;&nbsp; double _amount;
};

void main()
{
 &nbsp;&nbsp; // Perform a conversion from type char * to type Money.
 &nbsp;&nbsp; Money Acct = Money::Convert( "57.29" );
 &nbsp;&nbsp; Acct.Print();
 &nbsp;&nbsp; // Perform a conversion from type double to type Money.
 &nbsp;&nbsp; Acct = Money::Convert( 33.29 );
 &nbsp;&nbsp; Acct.Print();
}
</code></pre>
<p>
In the preceding code, the conversion constructors are private and cannot be used in type conversions. However, they can be invoked explicitly by calling the <code>Convert</code> functions. Because the <code>Convert</code> functions are static, they are accessible without referencing a particular object.</p>
</font></BODY>
</HTML>

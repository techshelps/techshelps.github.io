</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>&lt;string&gt;</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

<h1><a name="&lt;string&gt;">&lt;string&gt;</a></h1>
<META NAME="MS-HKWD" CONTENT="string header file">
<p><a href="STRING2_basic_string.htm#basic_string"><code><b>basic_string</b></code></a><code><b> &#183; </b></code><a href="STRING2_char_traits.htm#char_traits"><code><b>char_traits</b></code></a><code><b> &#183; </b></code><a href="STRING2_char_traitsLcharG.htm#char_traits&lt;char&gt;"><code><b>char_traits&lt;char&gt;</b></code></a><code><b> &#183; </b></code><a href="STRING2_char_traitsLwchar_tG.htm#char_traits&lt;wchar_t&gt;"><code><b>char_traits&lt;wchar_t&gt;</b></code></a><code><b> &#183; </b></code><a href="STRING2_getline.htm#getline"><code><b>getline</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_operatorP.htm#operator+"><code><b>operator+</b></code></a><code><b> &#183; </b></code><a href="STRING2_operatorNE.htm#operator!="><code><b>operator!=</b></code></a><code><b> &#183; </b></code><a href="STRING2_operatorEE.htm#operator=="><code><b>operator==</b></code></a><code><b> &#183; </b></code><a href="STRING2_operatorL.htm#operator&lt;"><code><b>operator&lt;</b></code></a><code><b> &#183; </b></code><a href="STRING2_operatorLL.htm#operator&lt;&lt;"><code><b>operator&lt;&lt;</b></code></a><code><b> &#183; </b></code><a href="STRING2_operatorLE.htm#operator&lt;="><code><b>operator&lt;=</b></code></a><code><b> &#183; </b></code><a href="STRING2_operatorG.htm#operator&gt;"><code><b>operator&gt;</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_operatorGE.htm#operator&gt;="><code><b>operator&gt;=</b></code></a><code><b> &#183; </b></code><a href="STRING2_operatorGG.htm#operator&gt;&gt;"><code><b>operator&gt;&gt;</b></code></a><code><b> &#183; </b></code><a href="STRING2_string.htm#string"><code><b>string</b></code></a><code><b> &#183; </b></code><a href="STRING2_swap.htm#swap"><code><b>swap</b></code></a><code><b> &#183; </b></code><a href="STRING2_wstring.htm#wstring"><code><b>wstring</b></code></a><code><b> </b></code></p>
<pre><code>namespace std {
//    <b>TEMPLATE CLASSES</b>
template&lt;class E&gt;
    struct <a href="STRING2_char_traits.htm#char_traits"><b>char_traits</b></a>;
struct <a href="STRING2_char_traitsLcharG.htm#char_traits&lt;char&gt;"><b>char_traits&lt;char&gt;</b></a>;
struct <a href="STRING2_char_traitsLwchar_tG.htm#char_traits&lt;wchar_t&gt;"><b>char_traits&lt;wchar_t&gt;</b></a>;
template&lt;class E,
    class T = char_traits&lt;E&gt;,
    class A = allocator&lt;E&gt; &gt;
    class <a href="STRING2_basic_string.htm#basic_string"><b>basic_string</b></a>;
typedef basic_string&lt;char&gt; <a href="STRING2_string.htm#string"><b>string</b></a>;
typedef basic_string&gt;wchar_t&gt; <a href="STRING2_wstring.htm#wstring"><b>wstring</b></a>;
//    <b>TEMPLATE FUNCTIONS</b>
template&lt;class E, class T, class A&gt;
    basic_string&lt;E, T, A&gt; <a href="STRING2_operatorP.htm#operator+"><b>operator+</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    basic_string&lt;E, T, A&gt; <a href="STRING2_operatorP.htm#operator+"><b>operator+</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const E *rhs);
template&lt;class E, class T, class A&gt;
    basic_string&lt;E, T, A&gt; <a href="STRING2_operatorP.htm#operator+"><b>operator+</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        E rhs);
template&lt;class E, class T, class A&gt;
    basic_string&lt;E, T, A&gt; <a href="STRING2_operatorP.htm#operator+"><b>operator+</b></a>(
        const E *lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    basic_string&lt;E, T, A&gt; <a href="STRING2_operatorP.htm#operator+"><b>operator+</b></a>(
        E lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorEE.htm#operator=="><b>operator==</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorEE.htm#operator=="><b>operator==</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const E *rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorEE.htm#operator=="><b>operator==</b></a>(
        const E *lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const E *rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const E *lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorL.htm#operator&lt;"><b>operator&lt;</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorL.htm#operator&lt;"><b>operator&lt;</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const E *rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorL.htm#operator&lt;"><b>operator&lt;</b></a>(
        const E *lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorG.htm#operator&gt;"><b>operator&gt;</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorG.htm#operator&gt;"><b>operator&gt;</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const E *rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorG.htm#operator&gt;"><b>operator&gt;</b></a>(
        const E *lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorLE.htm#operator&lt;="><b>operator&lt;=</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorLE.htm#operator&lt;="><b>operator&lt;=</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const E *rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorLE.htm#operator&lt;="><b>operator&lt;=</b></a>(
        const E *lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorGE.htm#operator&gt;="><b>operator&gt;=</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorGE.htm#operator&gt;="><b>operator&gt;=</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const E *rhs);
template&lt;class E, class T, class A&gt;
    bool <a href="STRING2_operatorGE.htm#operator&gt;="><b>operator&gt;=</b></a>(
        const E *lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    void <a href="STRING2_swap.htm#swap"><b>swap</b></a>(
        const basic_string&lt;E, T, A&gt;&amp; lhs,
        const basic_string&lt;E, T, A&gt;&amp; rhs);
template&lt;class E, class T, class A&gt;
    basic_ostream&lt;E&gt;&amp; <a href="STRING2_operatorLL.htm#operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(
        basic_ostream &lt;E&gt;&amp; os,
        const basic_string&lt;E, T, A&gt;&amp; str);
template&lt;class E, class T, class A&gt;
    basic_istream&lt;E&gt;&amp; <a href="STRING2_operatorGG.htm#operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(
        basic_istream &lt;E&gt;&amp; is,
        basic_string&lt;E, T, A&gt;&amp; str);
template&lt;class E, class T, class A&gt;
    basic_istream&lt;E, T&gt;&amp; <a href="STRING2_getline.htm#getline"><b>getline</b></a>(
        basic_istream &lt;E, T&gt;&amp; is,
        basic_string&lt;E, T, A&gt;&amp; str);
 template&lt;class E, class T, class A&gt;
    basic_istream&lt;E, T&gt;&amp; <a href="STRING2_getline.htm#getline"><b>getline</b></a>(
        basic_istream &lt;E, T&gt;&amp; is,
        basic_string&lt;E, T, A&gt;&amp; str,
        E delim);
    };</code></pre>
<p>Include the standard header <code><b>&lt;string&gt;</b></code> to define the <a href="lib_cont.htm#Containers">container</a> template class <a href="STRING2_basic_string.htm#basic_string"><code>basic_string</code></a> and various supporting 
templates.</p>
</body>
</html>

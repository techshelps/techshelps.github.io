<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The C break Statement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_the_c_break_statement"></a><sup></sup>The C break Statement</h1>
<p>
The <b>break</b> statement terminates the execution of the nearest enclosing <b>do</b>, <b>for</b>, <b>switch</b>, or <b>while</b> statement in which it appears. Control passes to the statement that follows the terminated statement. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>jump-statement</i> :</p>
<p class=indent>
<b>break;</b></p>
<p>
The <b>break</b> statement is frequently used to terminate the processing of a particular case within a <b>switch</b> statement. Lack of an enclosing iterative or <b>switch</b> statement generates an error. </p>
<p>
Within nested statements, the <b>break</b> statement terminates only the <b>do</b>, <b>for</b>, <b>switch</b>, or <b>while</b> statement that immediately encloses it. You can use a <b>return</b> or <b>goto</b> statement to transfer control elsewhere out of the nested structure.&nbsp;&nbsp;&nbsp;</p>
<p>
This example illustrates the <b>break</b> statement: </p>
<pre><code>for ( i = 0; i &lt; LENGTH; i++ )&nbsp; /* Execution returns here when */
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* break statement is executed */
 &nbsp;&nbsp; for ( j = 0; j &lt; WIDTH; j++)&nbsp; 
 &nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( lines[i][j] == '\0' ) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lengths[i] = j;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
}
</code></pre>
<p>
The example processes an array of variable-length strings stored in <code>lines</code>. The <b>break</b> statement causes an exit from the interior <b>for</b> loop after the terminating null character (<code>'\0'</code>) of each string is found and its position is stored in <code>lengths[i]</code>.</p>
<p>
The variable <code>j</code> is not incremented when <b>break</b> causes the exit from the interior loop. Control then returns to the outer <b>for</b> loop. The variable <code>i</code> is incremented and the process is repeated until <code>i</code> is greater than or equal to <code>LENGTH</code>. </p>
</font></BODY>
</HTML>

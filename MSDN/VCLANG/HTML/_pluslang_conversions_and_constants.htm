<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conversions and Constants</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_conversions_and_constants"></a><sup></sup>Conversions and Constants</h1>
<p>
Although constants for built-in types such as <b>int</b>, <b>long</b>, and <b>double</b> can appear in expressions, no constants of class types are allowed (this is partly because classes usually describe an object complicated enough to make notation inconvenient). However, if conversion constructors from built-in types are supplied, constants of these built-in types can be used in expressions, and the conversions cause correct behavior. For example, a <code>Money</code> class can have conversions from types <b>long</b> and <b>double</b>:</p>
<pre><code>class Money
{
public:
 &nbsp;&nbsp; Money( long );
 &nbsp;&nbsp; Money( double );
 &nbsp; ...
 &nbsp;&nbsp; Money operator+( const Money&amp; );&nbsp; // Overloaded addition operator.
};
</code></pre>
<p>
Therefore, expressions such as the following can specify constant values:</p>
<pre><code>Money AccountBalance = 37.89;
Money NewBalance = AccountBalance + 14L;
</code></pre>
<p>
The second example involves the use of an overloaded addition operator, which is covered in the next chapter. Both examples cause the compiler to convert the constants to type <code>Money</code> before using them in the expressions.</p>
</font></BODY>
</HTML>

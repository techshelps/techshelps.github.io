<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The auto Storage-Class Specifier</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_the_auto_storage.2d.class_specifier"></a><sup></sup>The auto Storage-Class Specifier</h1>
<p>
The <b>auto</b> storage-class specifier declares an automatic variable, a variable with a local lifetime. An <b>auto</b> variable is visible only in the block in which it is declared. Declarations of <b>auto</b> variables can include initializers, as discussed in <a href="_clang_initialization.htm">Initialization</a>. Since variables with <b>auto</b> storage class are not initialized automatically, you should either explicitly initialize them when you declare them, or assign them initial values in statements within the block. The values of uninitialized <b>auto</b> variables are undefined. (A local variable of <b>auto</b> or <b>register</b> storage class is initialized each time it comes in scope if an initializer is given.)</p>
<p>
An internal <b>static</b> variable (a static variable with local or block scope) can be initialized with the address of any external or <b>static</b> item, but not with the address of another <b>auto</b> item, because the address of an <b>auto</b> item is not a constant.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>delete Operator</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_delete_operator"></a><sup></sup>delete Operator</h1>
<p>
The <b>delete</b> operator deallocates an object created with the <b>new</b> operator. The <b>delete</b> operator has a result of type <b>void</b> and therefore does not return a value. The operand to delete must be a pointer returned by the new operator.</p>
<p>
Using delete on a pointer to an object not allocated with new gives unpredictable results. You can, however, use delete on a pointer with the value 0. This provision means that, because new always returns 0 on failure, deleting the result of a failed new operation is harmless.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>deallocation-expression</i> :</p>
<p class=indent>
::<sub>opt</sub> delete <i>cast-expression</i><br>
::<sub>opt</sub> delete [ ] <i>cast-expression</i></p>
<p>
Using the delete operator on an object deallocates its memory. A program that dereferences a pointer after the object is deleted can have unpredictable results or crash.</p>
<p>
If the operand to the delete operator is a modifiable l-value, its value is undefined after the object is deleted.</p>
<p>
Pointers to const objects cannot be deallocated with the delete operator.</p>
</font></BODY>
</HTML>

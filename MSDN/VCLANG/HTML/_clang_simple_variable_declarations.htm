<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Simple Variable Declarations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_simple_variable_declarations"></a><sup></sup>Simple Variable Declarations</h1>
<p>
The declaration of a simple variable, the simplest form of a direct declarator, specifies the variable’s name and type. It also specifies the variable’s storage class and data type.</p>
<p>
Storage classes or types (or both) are required on variable declarations. Untyped variables (such as <code>var;</code>) generate warnings. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>declarator</i> :</p>
<p class=indent>
<i>pointer</i> <sub>opt</sub> <i>direct-declarator</i></p>
<p class=dt>
<i>direct-declarator</i> :</p>
<p class=indent>
<i>identifier</i></p>
<p class=dt>
<i>identifier</i> :</p>
<p class=indent>
<i>nondigit</i><br>
<i>identifier nondigit</i><br>
<i>identifier digit</i></p>
<p>
For arithmetic, structure, union, enumerations, and void types, and for types represented by <b>typedef</b> names, simple declarators can be used in a declaration since the type specifier supplies all the typing information. Pointer, array, and function types require more complicated declarators. </p>
<p>
You can use a list of identifiers separated by commas (<b>,</b>) to specify several variables in the same declaration. All variables defined in the declaration have the same base type. For example: </p>
<pre><code>int x, y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Declares two simple variables of type int */
int const z = 1; /* Declares a constant value of type int */
</code></pre>
<p>
The variables <code>x</code> and <code>y</code> can hold any value in the set defined by the <b>int</b> type for a particular implementation. The simple object <code>z</code> is initialized to the value 1 and is not modifiable. </p>
<p>
If the declaration of <code>z</code> was for an uninitialized static variable or was at file scope, it would receive an initial value of 0, and that value would be unmodifiable.</p>
<pre><code>unsigned long reply, flag; /* Declares two variables
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; named reply and flag&nbsp;&nbsp;&nbsp;&nbsp; */
</code></pre>
<p>
In this example, both the variables, <code>reply</code> and <code>flag</code>, have <b>unsigned long</b> type and hold unsigned integral values. </p>
</font></BODY>
</HTML>

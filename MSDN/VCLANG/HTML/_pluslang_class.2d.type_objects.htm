<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class-Type Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_class.2d.type_objects"></a><sup></sup>Class-Type Objects</h1>
<p>
An object is a typed region of storage in the execution environment; in addition to retaining state information, it also defines behavior. Class-type objects are defined using <i>class-name</i>. Consider the following code fragment:</p>
<pre><code>class Account&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Class name is Account.
{
public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Account();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Default constructor.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Account( double );&nbsp;&nbsp;&nbsp;&nbsp; // Construct from double.
 &nbsp;&nbsp; double&amp; Deposit( double );
 &nbsp;&nbsp; double&amp; Withdraw( double, int );
 &nbsp;&nbsp; ...
}:

Account CheckingAccount;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define object of class type.
</code></pre>
<p>
The preceding code declares a class (a new type) called <code>Account</code>. It then uses this new type to define an object called <code>CheckingAccount</code>.</p>
<p>
The following operations are defined by C++ for objects of class type:
<ul type=disc>
<li>
Assignment. One object can be assigned to another. The default behavior for this operation is a memberwise copy. This behavior can be modified by supplying a user-defined assignment operator.<br><br></li>
<li>
Initialization using copy constructors. </li>
</ul>
<p>
The following are examples of initialization using user-defined copy constructors:
<ul type=disc>
<li>
Explicit initialization of an object. For example:<pre><code>Point myPoint = thatPoint;
</code></pre>
<p class=tl>
declares <code>myPoint</code> as an object of type <code>Point</code> and initializes it to the value of <code>thatPoint</code>.</P></li>
<li>
Initialization caused by passing as an argument. Objects can be passed to functions by value or by reference. If they are passed by value, a copy of each object is passed to the function. The default method for creating the copy is memberwise copy; this can be modified by supplying a user-defined copy constructor (a constructor that takes a single argument of the type “reference to class”).<br><br></li>
<li>
Initialization caused by the initialization of return values from functions. Objects can be returned from functions by value or by reference. The default method for returning an object by value is a memberwise copy; this can be modified by supplying a user-defined copy constructor. An object returned by reference (using pointer or reference types) should not be both automatic and local to the called function. If it is, the object referred to by the return value will have gone out of scope before it can be used.</li>
</ul>
<p>
<a href="_pluslang_overloaded_operators.htm">Overloaded Operators</a> in Chapter 12 explains how to redefine other operators on a class-by-class basis.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class-Member Declaration Syntax</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_class.2d.member_declaration_syntax"></a><sup></sup>Class-Member Declaration Syntax</h1>
<p>
Member data cannot be declared as <b>auto</b>, <b>extern</b>, or <b>register</b> storage class. They can, however, be declared as having <b>static</b> storage class.</p>
<p>
The <i>decl-specifiers</i> specifiers can be omitted in member-function declarations. (For information on <i>decl-specifiers</i>, see <a href="_pluslang_specifiers.htm">Specifiers</a> in Chapter 6 and <a href="_pluslang_member_functions.htm">Member Functions</a>; see also <a href="_pluslang_function_declarations.htm">Functions</a> in Chapter 7.) The following code is therefore legal and declares a function that returns type <b>int</b>:</p>
<pre><code>class NoDeclSpec
{
public:
   NoSpecifiers();
};
</code></pre>
<p>
When you declare a <b>friend</b> class in a member list, you can omit the <i>member-declarator-list</i>. For more information on friends, see <a href="_pluslang_friend_specifier.htm">friend Specifier</a> in Chapter 6, and <a href="_pluslang_friends.htm">Friends</a> in Chapter 10. Even if a class name has not been introduced, it can be used in a <b>friend</b> declaration. This <b>friend</b> declaration introduces the name. However, in member declarations for such classes, the <i>elaborated-type-specifier</i> syntax must be used, as shown in the following example:</p>
<pre><code>class HasFriends
{
public:
 &nbsp;&nbsp; friend class NotDeclaredYet;
};
</code></pre>
<p>
In the preceding example, there is no <i>member-declarator-list</i> after the class declaration. Because the declaration for <code>NotDeclaredYet</code> has not yet been processed, the <i>elaborated-type-specifier</i> form is used: <code>class NotDeclaredYet</code>. A type that has been declared can be specified in a <b>friend</b> member declaration using a normal type specifier:</p>
<pre><code>class AlreadyDeclared
{
 &nbsp;&nbsp; ...
};

class HasFriends
{
public:
 &nbsp;&nbsp; friend AlreadyDeclared;
};
</code></pre>
<p>
The <i>pure-specifier</i> (shown in the following example) indicates that no implementation is supplied for the virtual function being declared. Therefore, the <i>pure-specifier</i> can be specified only on virtual functions. Consider this example:</p>
<pre><code>class StrBase&nbsp; // Base class for strings.
{
public:
 &nbsp;&nbsp; virtual int IsLessThan( StrBase&amp; ) = 0;
 &nbsp;&nbsp; virtual int IsEqualTo( StrBase&amp; ) = 0;
 &nbsp;&nbsp; virtual StrBase&amp; CopyOf( StrBase&amp; ) = 0;
 &nbsp;&nbsp; ...
};
</code></pre>
<p>
The preceding code declares an abstract base class — that is, a class designed to be used only as the base class for more specific classes. Such base classes can enforce a particular protocol, or set of functionality, by declaring one or more virtual functions as “pure” virtual functions, using the <i>pure-specifier</i>.</p>
<p>
Classes that inherit from the <code>StrBase</code> class must provide implementations for the pure virtual functions; otherwise, they, too, are considered abstract base classes.</p>
<p>
Abstract base classes cannot be used to declare objects. For example, before an object of a type inherited from <code>StrBase</code> can be declared, the functions <code>IsLessThan</code>, <code>IsEqualTo</code>, and <code>CopyOf</code> must be implemented. (For more information about abstract base classes, see <a href="_pluslang_abstract_classes.htm">Abstract Classes</a> in Chapter 9.)</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C Compound Assignment</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_c_compound_assignment"></a><sup></sup>C Compound Assignment</h1>
<p>
The compound-assignment operators combine the simple-assignment operator with another binary operator. Compound-assignment operators perform the operation specified by the additional operator, then assign the result to the left operand. For example, a compound-assignment expression such as</p>
<p>
<i>expression1</i> <i>+=</i> <i>expression2</i></p>
<p>
can be understood as</p>
<p>
<i>expression1</i> <i>=</i> <i>expression1</i> <i>+</i> <i>expression2</i></p>
<p>
However, the compound-assignment expression is not equivalent to the expanded version because the compound-assignment expression evaluates <i>expression1</i> only once, while the expanded version evaluates <i>expression1</i> twice: in the addition operation and in the assignment operation.</p>
<p>
The operands of a compound-assignment operator must be of integral or floating type. Each compound-assignment operator performs the conversions that the corresponding binary operator performs and restricts the types of its operands accordingly. The addition-assignment (<b>+=</b>) and subtraction-assignment (<b>–=</b>) operators can also have a left operand of pointer type, in which case the right-hand operand must be of integral type. The result of a compound-assignment operation has the value and type of the left operand.</p>
<pre><code>#define MASK 0xff00

n &amp;= MASK;
</code></pre>
<p>
In this example, a bitwise-inclusive-AND operation is performed on <code>n</code> and <code>MASK</code>, and the result is assigned to <code>n</code>. The manifest constant <code>MASK</code> is defined with a <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_The_.23.define_Directive">
</object><a href=JavaScript:alink_1.Click()>#define</a> preprocessor directive. </p>
</font></BODY>
</HTML>

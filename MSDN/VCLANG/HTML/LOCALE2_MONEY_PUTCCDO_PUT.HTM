<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>money_put::do_put</title></head>
<body bgcolor=white>

<h3><a name="money_put::do_put">money_put::do_put</a></h3>
<META NAME="MS-HKWD" CONTENT="do_put">
<pre><code>virtual iter_type <b>do_put</b>(iter_type next, bool intl,
    ios_base&amp; x, E fill, string_type&amp; val) const;
virtual iter_type <b>do_put</b>(iter_type next, bool intl,
    ios_base&amp; x, E fill, long double&amp; val) const;</code></pre>
<p>The first virtual protected member function generates sequential elements beginning at <code>next</code> to produce a <a name="monetary output field"><b>monetary 
output field</b></a> from the <a href="LOCALE2_money_putCCstring_type.htm#money_put::string_type"><code>string_type</code></a> object <code>val</code>. The sequence controlled by <code>val</code> must begin with one or more 
decimal digits, optionally preceded by a minus sign (<code>-</code>), which represents the amount. The function returns an iterator 
designating the first element beyond the generated monetary output field.</p>
<p>The second virtual protected member function behaves the same as the first, except that it effectively first converts <code>val</code> 
to a sequence of decimal digits, optionally preceded by a minus sign, then converts that sequence as above.</p>
<p>The format of a monetary output field is determined by the <a href="LOCALE2_locale.htm#locale facet">locale facet</a> <code>fac</code> returned by the (effective) call <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code> 
&lt;</code><a href="LOCALE2_moneypunct.htm#moneypunct"><code>moneypunct</code></a><code>&lt;E, intl&gt;(x. </code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>())</code>. Specifically: </p>
<ul>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCpos_format.htm#moneypunct::pos_format"><code>pos_format</code></a><code>()</code> determines the order in which components of the field are generated for a non-negative 
value.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCneg_format.htm#moneypunct::neg_format"><code>neg_format</code></a><code>()</code> determines the order in which components of the field are generated for a negative value.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCcurr_symbol.htm#moneypunct::curr_symbol"><code>curr_symbol</code></a><code>()</code> determines the sequence of elements to generate for a currency symbol.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCpositive_sign.htm#moneypunct::positive_sign"><code>positive_sign</code></a><code>()</code> determines the sequence of elements to generate for a positive sign.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCnegative_sign.htm#moneypunct::negative_sign"><code>negative_sign</code></a><code>()</code> determines the sequence of elements to generate for a negative sign.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCgrouping.htm#moneypunct::grouping"><code>grouping</code></a><code>()</code> determines how digits are grouped to the left of any decimal point.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCthousands_sep.htm#moneypunct::thousands_sep"><code>thousands_sep</code></a><code>()</code> determines the element that separates groups of digits to the left of any decimal point.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCdecimal_point.htm#moneypunct::decimal_point"><code>decimal_point</code></a><code>()</code> determines the element that separates the integer digits from any fraction digits.</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCfrac_digits.htm#moneypunct::frac_digits"><code>frac_digits</code></a><code>()</code> determines the number of significant fraction digits to the right of any decimal point.</li>
</ul>
<p>If the sign string (<code>fac.negative_sign</code> or <code>fac.positive_sign</code>) has more than one element, only the first element is 
generated where the element equal to <code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::sign"><code><b>sign</b></code></a> appears in the format pattern (<code>fac.neg_format</code> or 
<code>fac.pos_format</code>). Any remaining elements are generated at the end of the monetary output field.</p>
<p>If <code>x.</code><a href="IOS_ios_baseCCflags.htm#ios_base::flags"><code>flags</code></a><code>() &amp; </code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::showbase"><code>showbase</code></a> is nonzero, the string <code>fac.curr_symbol</code> is generated where the element equal to 
<code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::symbol"><code><b>symbol</b></code></a> appears in the format pattern. Otherwise, no currency symbol is generated.</p>
<p>If no grouping constraints are imposed by <code>fac.grouping()</code> (its first element has the value <code>CHAR_MAX</code>), then no 
instances of <code>fac.thousands_sep()</code> are generated in the value portion of the monetary output field (where the 
element equal to <code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::value"><code><b>value</b></code></a> appears in the format pattern). If <code>fac.frac_digits()</code> is zero, then no 
instance of <code>fac.decimal_point()</code> is generated after the decimal digits. Otherwise, the resulting monetary output field 
places the low-order <code>fac.frac_digits()</code> decimal digits to the right of the decimal point.</p>

<p><a href="LOCALE2_num_putCCdo_put.htm#padding">Padding</a> occurs as for any numeric output field, except that if <code>x.flags() &amp; x.</code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::internal"><code>internal</code></a> is nonzero, any internal 
padding is generated where the element equal to <code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::space"><code><b>space</b></code></a> appears in the format pattern, if the element does appear. 
Otherwise, internal padding occurs before the generated sequence. The padding character is <code>fill</code>.</p>
<p>The function calls <code>x.width(0)</code> to reset the field width to zero.</p>
</body>
</html>

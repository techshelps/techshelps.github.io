<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>numeric_limits</title></head>
<body bgcolor=white>

<h2><a name="numeric_limits">numeric_limits</a></h2>
<META NAME="MS-HKWD" CONTENT="numeric_limits">
<pre><code>template&lt;class T&gt;
    class numeric_limits {
public:
    static const bool <a href="LIMITS2_numeric_limitsCChas_denorm.htm#numeric_limits::has_denorm"><b>has_denorm</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCChas_denorm_loss.htm#numeric_limits::has_denorm_loss"><b>has_denorm_loss</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCChas_infinity.htm#numeric_limits::has_infinity"><b>has_infinity</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCChas_quiet_NaN.htm#numeric_limits::has_quiet_NaN"><b>has_quiet_NaN</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCChas_signaling_NaN.htm#numeric_limits::has_signaling_NaN"><b>has_signaling_NaN</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCis_bounded.htm#numeric_limits::is_bounded"><b>is_bounded</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCis_exact.htm#numeric_limits::is_exact"><b>is_exact</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCis_iec559.htm#numeric_limits::is_iec559"><b>is_iec559</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCis_integer.htm#numeric_limits::is_integer"><b>is_integer</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCis_modulo.htm#numeric_limits::is_modulo"><b>is_modulo</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCis_signed.htm#numeric_limits::is_signed"><b>is_signed</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCis_specialized.htm#numeric_limits::is_specialized"><b>is_specialized</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCtinyness_before.htm#numeric_limits::tinyness_before"><b>tinyness_before</b></a> = false;
    static const bool <a href="LIMITS2_numeric_limitsCCtraps.htm#numeric_limits::traps"><b>traps</b></a> = false;
    static const float_round_style <a href="LIMITS2_numeric_limitsCCround_style.htm#numeric_limits::round_style"><b>round_style</b></a> = round_toward_zero;
    static const int <a href="LIMITS2_numeric_limitsCCdigits.htm#numeric_limits::digits"><b>digits</b></a> = 0;
    static const int <a href="LIMITS2_numeric_limitsCCdigits10.htm#numeric_limits::digits10"><b>digits10</b></a> = 0;
    static const int <a href="LIMITS2_numeric_limitsCCmax_exponent.htm#numeric_limits::max_exponent"><b>max_exponent</b></a> = 0;
    static const int <a href="LIMITS2_numeric_limitsCCmax_exponent10.htm#numeric_limits::max_exponent10"><b>max_exponent10</b></a> = 0;
    static const int <a href="LIMITS2_numeric_limitsCCmin_exponent.htm#numeric_limits::min_exponent"><b>min_exponent</b></a> = 0;
    static const int <a href="LIMITS2_numeric_limitsCCmin_exponent10.htm#numeric_limits::min_exponent10"><b>min_exponent10</b></a> = 0;
    static const int <a href="LIMITS2_numeric_limitsCCradix.htm#numeric_limits::radix"><b>radix</b></a> = 0;
    static T <a href="LIMITS2_numeric_limitsCCdenorm_min.htm#numeric_limits::denorm_min"><b>denorm_min</b></a>() throw();
    static T <a href="LIMITS2_numeric_limitsCCepsilon.htm#numeric_limits::epsilon"><b>epsilon</b></a>() throw();
    static T <a href="LIMITS2_numeric_limitsCCinfinity.htm#numeric_limits::infinity"><b>infinity</b></a>() throw();
    static T <a href="LIMITS2_numeric_limitsCCmax.htm#numeric_limits::max"><b>max</b></a>() throw();
    static T <a href="LIMITS2_numeric_limitsCCmin.htm#numeric_limits::min"><b>min</b></a>() throw();
    static T <a href="LIMITS2_numeric_limitsCCquiet_NaN.htm#numeric_limits::quiet_NaN"><b>quiet_NaN</b></a>() throw();
    static T <a href="LIMITS2_numeric_limitsCCround_error.htm#numeric_limits::round_error"><b>round_error</b></a>() throw();
    static T <a href="LIMITS2_numeric_limitsCCsignaling_NaN.htm#numeric_limits::signaling_NaN"><b>signaling_NaN</b></a>() throw();
    };</code></pre>
<p>The template class describes many arithmetic properties of its parameter type <code>T</code>. The header defines explicit 
specializations for the types <code>wchar_t</code>, <i>bool, char, signed char, unsigned char, short, unsigned short, int, unsigned 
int, long, unsigned long, float, double,</i> and <i>long double.</i> For all these explicit specializations, the member 
<code>is_specialized</code> is true, and all relevant members have meaningful values. The program can supply additional explicit 
specializations.</p>
<p>For an arbitrary specialization, no members have meaningful values. A member object that does not have a meaningful 
value stores zero (or false) and a member function that does not return a meaningful value returns <code>T(0)</code>.</p>
<p>See the related <a href="sample_Members_of_the_numeric_limits_Class_(STL_Sample).htm#_sample_stl_numeric_limits_class">numeric_limits</a> sample program.</p>

</body>
</html>

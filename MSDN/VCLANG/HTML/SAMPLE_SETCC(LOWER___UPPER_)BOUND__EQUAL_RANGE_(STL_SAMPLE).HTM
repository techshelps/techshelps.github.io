<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set::(lower_, upper_)bound, equal_range (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_setCCbounds_equal_range">set::(lower_, upper_)bound, equal_range (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>set::lower_bound, set::upper_bound,</code> and <code>set::equal_range</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;set&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _K, class _Pr, class _A&gt;
     class set 
     {
        public:
        // Function 1:
        const_iterator lower_bound(const _K&amp; _Kv) const;
        // Function 2:
        const_iterator upper_bound(const _K&amp; _Kv) const;
        // Function 3:
        _Paircc equal_range(const _K&amp; _Kv) const;
     }
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The lower_bound function returns an iterator to the earliest element in the controlled sequence that has a key that does not match the value passed to the lower_bound function. The upper_bound function returns an iterator to the earliest element in the controlled sequence that has a key matching the value passed to the upper_bound function. If no such element exists, the function returns end(). In both cases, the function set::key_comp()(key, x) is used to determine if the keys match. The equal_range function returns a pair value, where .first is the result of the lower_bound function, and .second is the result of the upper_bound function.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// SetBoundRange.cpp:
//      Illustrates how to use the lower_bound function to get an
//      iterator to the earliest element in the controlled sequence
//      that has a key that does not match the value passed to the
//      function. It also illustrates how to use the upper_bound
//      function to get an iterator to the earliest element in the
//      controlled sequence that has a key that matches the value
//      passed to the function. The last thing it illustrates is
//      how to use the equal_range function to get a pair value that
//      contains the lower_bound and upper_bound results of the key.
//
// Functions:
//
//    lower_bound  Returns an iterator whose value does not match the
//                 key passed to the function, or end() if no such
//                 element exists.
//    upper_bound  Returns an iterator whose value matches the key
//                 passed to the function, or end() if no such element
//                 exists.
//    equal_range  Returns a pair of (lower_bound,upper_bound).
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;set&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef set&lt;int&gt; SET_INT;

void main() {
  SET_INT s1;
  SET_INT::iterator i;
  cout &lt;&lt; "s1.insert(5)" &lt;&lt; endl;
  s1.insert(5);
  cout &lt;&lt; "s1.insert(10)" &lt;&lt; endl;
  s1.insert(10);
  cout &lt;&lt; "s1.insert(15)" &lt;&lt; endl;
  s1.insert(15);
  cout &lt;&lt; "s1.insert(20)" &lt;&lt; endl;
  s1.insert(20);
  cout &lt;&lt; "s1.insert(25)" &lt;&lt; endl;
  s1.insert(25);

  cout &lt;&lt; "s1 -- starting at s1.lower_bound(12)" &lt;&lt; endl;
// prints: 15,20,25
  for (i=s1.lower_bound(12);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- starting at s1.lower_bound(15)" &lt;&lt; endl;
// prints: 15,20,25
  for (i=s1.lower_bound(15);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- starting at s1.upper_bound(12)" &lt;&lt; endl;
// prints: 15,20,25
  for (i=s1.upper_bound(12);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- starting at s1.upper_bound(15)" &lt;&lt; endl;
// prints: 20,25
  for (i=s1.upper_bound(15);i!=s1.end();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- s1.equal_range(12)" &lt;&lt; endl;
// does not print anything
  for (i=s1.equal_range(12).first;i!=s1.equal_range(12).second;i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;

  cout &lt;&lt; "s1 -- s1.equal_range(15)" &lt;&lt; endl;
// prints: 15
  for (i=s1.equal_range(15).first;i!=s1.equal_range(15).second;i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
s1.insert(5)
s1.insert(10)
s1.insert(15)
s1.insert(20)
s1.insert(25)
s1 -- starting at s1.low
s1 has 15 in its set.
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- starting at s1.low
s1 has 15 in its set.
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- starting at s1.upp
s1 has 15 in its set.
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- starting at s1.upp
s1 has 20 in its set.
s1 has 25 in its set.
s1 -- s1.equal_range(12)
s1 -- s1.equal_range(15)
s1 has 15 in its set.
</code></pre>

</body>
</html>

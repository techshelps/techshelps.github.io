<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ofstream::ofstream</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_ofstream.3a3a.ofstream"></a><sup></sup>ofstream::ofstream</h1>
<p>
<b>ofstream();</b></p>
<p>
<b>ofstream(</b> <b>const</b> <b>char*</b> <i>szName</i><b>,</b> <b>int</b> <i>nMode</i> <b>=</b> <b>ios::out,</b> <b>int</b> <i>nProt</i> <b>=</b> <b>filebuf::openprot</b> <b>);</b></p>
<p>
<b>ofstream(</b> <b>filedesc</b> <i>fd</i> <b>);</b></p>
<p>
<b>ofstream(</b> <b>filedesc</b> <i>fd</i><b>,</b> <b>char*</b> <i>pch</i><b>,</b> <b>int</b> <i>nLength</i> <b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>szName</i></p>
<p class=indent>
The name of the file to be opened during construction.</p>
<p class=dt>
<i>nMode</i></p>
<p class=indent>
An integer that contains mode bits defined as <b>ios</b> enumerators that can be combined with the bitwise OR ( <b>|</b> ) operator. The <i>nMode</i> parameter must have one of the following values:
<ul type=disc>
<li>
<b>ios::app</b>&nbsp;&nbsp;&nbsp;The function performs a seek to the end of file. When new bytes are written to the file, they are always appended to the end, even if the position is moved with the <b>ostream::seekp</b> function.<br><br></li>
<li>
<b>ios::ate</b>&nbsp;&nbsp;&nbsp;The function performs a seek to the end of file. When the first new byte is written to the file, it is appended to the end, but when subsequent bytes are written, they are written to the current position.<br><br></li>
<li>
<b>ios::in</b>&nbsp;&nbsp;&nbsp;If this mode is specified, then the original file (if it exists) will not be truncated.<br><br></li>
<li>
<b>ios::out</b>&nbsp;&nbsp;&nbsp;The file is opened for output (implied for all <b>ofstream</b> objects).<br><br></li>
<li>
<b>ios::trunc</b>&nbsp;&nbsp;&nbsp;If the file already exists, its contents are discarded. This mode is implied if <b>ios::out</b> is specified and <b>ios::ate</b>, <b>ios::app</b>, and <b>ios:in</b> are not specified.<br><br></li>
<li>
<b>ios::nocreate</b>&nbsp;&nbsp;&nbsp;If the file does not already exist, the function fails.<br><br></li>
<li>
<b>ios::noreplace</b>&nbsp;&nbsp;&nbsp;If the file already exists, the function fails.<br><br></li>
<li>
<b>ios::binary</b>&nbsp;&nbsp;&nbsp;Opens the file in binary mode (the default is text mode).</li>
</ul>
<p class=dt>
<i>nProt</i></p>
<p class=indent>
The file protection specification; defaults to the static integer <b>filebuf::openprot</b> that is equivalent to <b>filebuf::sh_compat</b>. The possible <i>nProt</i> values are:
<ul type=disc>
<li>
<b>filebuf::sh_compat</b>&nbsp;&nbsp;&nbsp;Compatibility share mode.<br><br></li>
<li>
<b>filebuf::sh_none</b>&nbsp;&nbsp;&nbsp;Exclusive mode; no sharing.<br><br></li>
<li>
<b>filebuf::sh_read</b>&nbsp;&nbsp;&nbsp;Read sharing allowed.<br><br></li>
<li>
<b>filebuf::sh_write</b>&nbsp;&nbsp;&nbsp;Write sharing allowed.<p class=tl>
To combine the <b>filebuf::sh_read</b> and <b>filebuf::sh_write</b> modes, use the logical OR ( <b>||</b> ) operator.</P></li>
</ul>
<p class=dt>
<i>fd</i></p>
<p class=indent>
A file descriptor as returned by a call to the run-time function <b>_open</b> or <b>_sopen</b>; <b>filedesc</b> is a <b>typedef</b> equivalent to <b>int</b>.</p>
<p class=dt>
<i>pch</i></p>
<p class=indent>
Pointer to a previously allocated reserve area of length <i>nLength</i>. A <b>NULL</b> value (or <i>nLength</i> = 0) indicates that the stream will be unbuffered.</p>
<p class=dt>
<i>nLength</i></p>
<p class=indent>
The length (in bytes) of the reserve area (0 = unbuffered).</p>
<p class=label>
<b>Remarks</b></p>
<p>
The four <b>ofstream</b> constructors are:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=45%><b>Constructor</b></td>
<td class=label width=55%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=45%><b>ofstream()</b></td>
<td width=55%>Constructs an <b>ofstream</b> object without opening a file.</td>
</tr>
<tr valign=top>
<td width=45%><b>ofstream( const char*</b>, <b>int, int )</b></td>
<td width=55%>Contructs an <b>ofstream</b> object, opening the specified file.</td>
</tr>
<tr valign=top>
<td width=45%><b>ofstream( filedesc )</b></td>
<td width=55%>Constructs an <b>ofstream</b> object that is attached to an open file.</td>
</tr>
<tr valign=top>
<td width=45%><b>ofstream( filedesc, char*, int )</b></td>
<td width=55%>Constructs an <b>ofstream</b> object that is associated with a <b>filebuf</b> object. The <b>filebuf</b> object is attached to an open file and to a specified reserve area.</td>
</tr>
</table><br>
<p>
All <b>ofstream</b> constructors construct a <b>filebuf</b> object. The first three use an internally allocated reserve area, but the fourth uses a user-allocated area. The user-allocated area is not automatically released during destruction.</p>
<p>
<a href="_iostream_ofstream.htm">ofstream Overview</a>  |&nbsp; <a href="_iostream_iostream_class_list.htm#_iostream_output_stream_classes">Output Stream Classes</a></p>
</font></BODY>
</HTML>

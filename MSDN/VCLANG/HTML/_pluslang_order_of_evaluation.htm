<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Order of Evaluation</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_order_of_evaluation"></a><sup></sup>Order of Evaluation</h1>
<p>
This section discusses the order in which expressions are evaluated but does not explain the syntax or the semantics of the operators in these expressions. The earlier sections in this chapter provide a complete reference for each of these operators.</p>
<p>
Expressions are evaluated according to the precedence and grouping of their operators. (<a href="_pluslang_c.2b2b_.operators.htm#_pluslang_table_1..1">Table 1.1</a> in Chapter 1, Lexical Conventions, shows the relationships the C++ operators impose on expressions.) Consider this example:</p>
<pre><code>#include &lt;iostream.h&gt;

void main()
{
 &nbsp;&nbsp; int a = 2, b = 4, c = 9;

 &nbsp;&nbsp; cout &lt;&lt; a + b * c &lt;&lt; "\n";
 &nbsp;&nbsp; cout &lt;&lt; a + (b * c) &lt;&lt; "\n";
 &nbsp;&nbsp; cout &lt;&lt; (a + b) * c &lt;&lt; "\n";
}
</code></pre>
<p>
The output from the preceding code is:</p>
<pre><code>38
38
54
</code></pre>
<p class=label>
<b>Figure 4.1&nbsp;&nbsp;&nbsp;Expression-Evaluation Order </b></p>
<p>
<img src="l04exp1.gif" border=0></p>
<p>
The order in which the expression shown in Figure 4.1 is evaluated is determined by the precedence and associativity of the operators:
<ol>
<li>
Multiplication (*) has the highest precedence in this expression; hence the subexpression <code>b * c</code> is evaluated first.<br><br></li>
<li>
Addition (+) has the next highest precedence, so <code>a</code> is added to the product of <code>b</code> and <code>c</code>.<br><br></li>
<li>
Left shift (&lt;&lt;) has the lowest precedence in the expression, but there are two occurrences. Because the left-shift operator groups left-to-right, the left subexpression is evaluated first and then the right one.</li>
</ol>
<p>
When parentheses are used to group the subexpressions, they alter the precedence and also the order in which the expression is evaluated, as shown in Figure 4.2.</p>
<p class=label>
<b>Figure 4.2&nbsp;&nbsp;&nbsp;Expression-Evaluation Order with Parentheses</b></p>
<p>
<img src="l04exev.gif" border=0></p>
<p>
Expressions such as those in Figure 4.2 are evaluated purely for their side effects — in this case, to transfer information to the standard output device.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The left-shift operator is used to insert an object in an object of class <a href="_iostream_ostream.htm">ostream</a>. It is sometimes called the “insertion” operator when used with iostream.&nbsp;&nbsp; </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Anonymous Unions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_anonymous_unions"></a><sup></sup>Anonymous Unions</h1>
<p>
Anonymous unions are unions that are declared without a <i>class-name</i> or <i>declarator-list</i>.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<b>union</b>  <b>{</b>  <i>member-list</i>  <b>}</b>  <b>;</b></p>
<p>
Such union declarations do not declare types — they declare objects. The names declared in an anonymous union cannot conflict with other names declared in the same scope.</p>
<p>
Names declared in an anonymous union are used directly, like nonmember variables. The following example illustrates this:</p>
<pre><code>#include &lt;iostream.h&gt;

struct DataForm
{
 &nbsp;&nbsp; enum DataType { CharData = 1, IntData, StringData };
 &nbsp;&nbsp; DataType type;

 &nbsp;&nbsp; // Declare an anonymous union.
 &nbsp;&nbsp; union
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char&nbsp; chCharMem;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *szStrMem;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp; iIntMem;
 &nbsp;&nbsp; };
 &nbsp;&nbsp; void print();
};

void DataForm::print()
{
 &nbsp;&nbsp; // Based on the type of the data, print the
 &nbsp;&nbsp; // appropriate data type.
 &nbsp;&nbsp; switch( type )
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case CharData:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; chCharMem;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case IntData:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; szStrMem;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case StringData:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; iIntMem;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; }
}
</code></pre>
<p>
In the function <code>DataForm::print</code>, the three members (<code>chCharMem</code>, <code>szStrMem</code>, and <code>iIntMem</code>) are accessed as though they were declared as members (without the <b>union</b> declaration). However, the three union members share the same memory.</p>
<p>
In addition to the restrictions listed in <a href="_pluslang_union_member_data.htm">Union Member Data</a>, anonymous unions are subject to additional restrictions:
<ul type=disc>
<li>
They must also be declared as <b>static</b> if declared in file scope.<br><br></li>
<li>
They can have only public members; private and protected members in anonymous unions generate errors.<br><br></li>
<li>
They cannot have function members.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Simply omitting the <i>class-name</i> portion of the syntax does not make a union an anonymous union. For a union to qualify as an anonymous union, the declaration must not declare an object.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Members</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_class_members"></a><sup></sup>Class Members</h1>
<p>
Classes can have these kinds of members:
<ul type=disc>
<li>
<a href="_pluslang_member_functions.htm">Member functions</a>.&nbsp; <br><br></li>
<li>
<a href="_pluslang_static_data_members.htm">Data members</a>.&nbsp; <br><br></li>
<li>
Classes, which include classes, structures, and unions. (See <a href="_pluslang_nested_class_declarations.htm">Nested Class Declarations</a> and <a href="_pluslang_unions.htm">Unions</a>.)<br><br></li>
<li>
<a href="_pluslang_c.2b2b_.enumeration_declarations.htm">Enumerations</a>.&nbsp; <br><br></li>
<li>
<a href="_pluslang_c.2b2b_.bit_fields.htm">Bit fields</a>.&nbsp; <br><br></li>
<li>
<a href="_pluslang_friends.htm">Friends</a>.&nbsp; <br><br></li>
<li>
<a href="_pluslang_type_names_in_class_scope.htm">Type names</a>.&nbsp; </li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Friends are included in the preceding list because they are contained in the class declaration. However, they are not true class members, because they are not in the scope of the class.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>member-list</i> :</p>
<p class=indent>
<i>member-declaration</i> <i>member-list</i><sub>opt</sub><br>
<i>access-specifier</i> <b>:</b> <i>member-list</i><sub>opt</sub></p>
<p class=dt>
<i>member-declaration</i> :</p>
<p class=indent>
<i>decl-specifiers</i><sub>opt</sub> <i>member-declarator-list</i><sub>opt</sub> <b>;</b><br>
<i>function-definition</i><sub>opt</sub> <b>;</b><br>
<i>qualified-name</i> <b>;</b></p>
<p class=dt>
<i>member-declarator-list</i> :</p>
<p class=indent>
<i>member-declarator</i><br>
<i>member-declarator-list</i> <b>,</b> <i>member-declarator</i></p>
<p class=dt>
<i>member-declarator</i> :</p>
<p class=indent>
<i>declarator</i> <i>pure-specifier</i><sub>opt</sub><br>
<i>identifier</i><sub>opt</sub>  <b>:</b> <i>constant-expression</i></p>
<p class=dt>
<i>pure-specifier</i> :</p>
<p class=indent>
<b>=</b> <b>0</b></p>
<p>
The purpose of the <i>member-list</i> is to:
<ul type=disc>
<li>
Declare the complete set of members for a given class.<br><br></li>
<li>
Specify the access (public, private, or protected) associated with various class members.</li>
</ul>
<p>
In the declaration of a member list, you can declare members only once; redeclaration of members produces an error message. Because a member list is a complete set of the members, you cannot add members to a given class with subsequent class declarations.</p>
<p>
Member declarators cannot contain initializers. Supplying an initializer produces an error message as illustrated in the following code:</p>
<pre><code>class CantInit
{
public:
 &nbsp;&nbsp; long l = 7;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error: attempt to initialize
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; class member.
 &nbsp;&nbsp; static int i = 9; // Error: must be defined and initialized
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outside of class declaration.
};
</code></pre>
<p>
Because a separate instance of nonstatic member data is created for each object of a given class type, the correct way to initialize member data is to use the class’s constructor. (Constructors are covered in <a href="_pluslang_constructors.htm">Constructors,</a> in Chapter 11.) There is only one shared copy of static data members for all objects of a given class type. Static data members must be defined and can be initialized at file scope. (For more information about static data members, see <a href="_pluslang_static_data_members.htm">Static Data Members</a>.) The following example shows how to perform these initializations:</p>
<pre><code>class CanInit
{
public:
 &nbsp;&nbsp; CanInit() { l = 7; } // Initializes l when new objects of type 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; CanInit are created.
 &nbsp;&nbsp; long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l;
 &nbsp;&nbsp; static int i;
 &nbsp;&nbsp; static int j;
};

int CanInit::i = 15;&nbsp;&nbsp; // i is defined at file scope and
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; initialized to 15. The initializer
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; is evaluated in the scope of CanInit.
int CanInit::j = i;&nbsp;&nbsp;&nbsp; // The right side of the initializer
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; is in the scope of the object being
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; initialized.
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The class name, <code>CanInit</code>, must precede <code>i</code> to specify that the <code>i</code> being defined is a member of class <code>CanInit</code>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Considerations when Writing Prolog/Epilog Code</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_clang_considerations_when_writing_prolog.2f.epilog_code"></a><sup></sup>Considerations when Writing Prolog/Epilog Code</h1>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
Before writing your own prolog and epilog code sequences, it is important to understand how the stack frame is laid out. It is also useful to know how to use the <b>__LOCAL_SIZE</b> predefined constant.</p>

<h2><a name="_clang_c_stack_frame_layout"></a><sup></sup>C Stack Frame Layout</h2>
<p>
This example shows the standard prolog code that might appear in a 32-bit function:</p>
<pre><code>push&nbsp;&nbsp;&nbsp;&nbsp; ebp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Save ebp
mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ebp, esp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Set stack frame pointer
sub&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; esp, localbytes&nbsp;&nbsp;&nbsp;&nbsp; ; Allocate space for locals
push&nbsp;&nbsp;&nbsp;&nbsp; &lt;registers&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Save registers
</code></pre>
<p>
The <code>localbytes</code> variable represents the number of bytes needed on the stack for local variables, and the <code>registers</code> variable is a placeholder that represents the list of registers to be saved on the stack. After pushing the registers, you can place any other appropriate data on the stack. The following is the corresponding epilog code:</p>
<pre><code>pop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;registers&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Restore registers
mov&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; esp, ebp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Restore stack pointer
pop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ebp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Restore ebp
ret&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Return from function
</code></pre>
<p>
The stack always grows down (from high to low memory addresses). The base pointer (<code>ebp</code>) points to the pushed value of <code>ebp</code>. The local variables area begins at <code>ebp-2</code>. To access local variables, calculate an offset from <code>ebp</code> by subtracting the appropriate value from <code>ebp</code>.</p>

<h2><a name="_clang_the___local_size_constant"></a>The __LOCAL_SIZE Constant</h2>
<p>
The compiler provides a constant, <b>__LOCAL_SIZE</b>, for use in the inline assembler block of function prolog code. This constant is used to allocate space for local variables on the stack frame in custom prolog code.</p>
<p>
The compiler determines the value of <b>__LOCAL_SIZE</b>. The value is the total number of bytes of all user-defined local variables and compiler-generated temporary variables. <b>__LOCAL_SIZE</b> can be used only as an immediate operand; it cannot be used in an expression. You must not change or redefine the value of this constant. For example:</p>
<pre><code>mov      eax, __LOCAL_SIZE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;Immediate operand--Okay
mov      eax, [ebp - __LOCAL_SIZE]&nbsp;&nbsp; ;Error
</code></pre>
<p>
The following example of a naked function containing custom prolog and epilog sequences uses <b>__LOCAL_SIZE</b> in the prolog sequence:</p>
<pre><code>__declspec ( naked ) func()
{
   int i;
   int j;

   __asm      /* prolog */
      {
      push   ebp
      mov      ebp, esp
      sub      esp, __LOCAL_SIZE
      }
      
   /* Function body */
      
   __asm      /* epilog */
      {
      mov      esp, ebp
      pop      ebp
      ret
      }
}&nbsp;&nbsp; 
</code></pre>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

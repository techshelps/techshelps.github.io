<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Objects Allocated with new</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_initializing_objects_allocated_with_new"></a><sup></sup>Initializing Objects Allocated with new</h1>
<p>
An optional <i>new-initializer</i> field is included in the syntax for the <b>new</b> operator. This allows new objects to be initialized with user-defined constructors. For more information about how initialization is done, see <a href="_pluslang_initializers.htm">Initializers</a> in Chapter 7.</p>
<p>
The following example illustrates how to use an initialization expression with the <b>new</b> operator:</p>
<pre><code>#include &lt;iostream.h&gt;

class Acct
{
public:
 &nbsp;&nbsp; // Define default constructor and a constructor that accepts
 &nbsp;&nbsp; //&nbsp; an initial balance.
 &nbsp;&nbsp; Acct() { balance = 0.0; }
 &nbsp;&nbsp; Acct( double init_balance ) { balance = init_balance; }
private:
 &nbsp;&nbsp; double balance;
};

void main()
{
 &nbsp;&nbsp; Acct *CheckingAcct = new Acct;
 &nbsp;&nbsp; Acct *SavingsAcct = new Acct ( 34.98 );
 &nbsp;&nbsp; double *HowMuch = new double ( 43.0 );
 &nbsp;&nbsp; ...
}
</code></pre>
<p>
In this example, the object <code>CheckingAcct</code> is allocated using the <b>new</b> operator, but no default initialization is specified. Therefore, the default constructor for the class, <code>Acct()</code>, is called. Then the object <code>SavingsAcct</code> is allocated the same way, except that it is explicitly initialized to 34.98. Because 34.98 is of type <b>double</b>, the constructor that takes an argument of that type is called to handle the initialization. Finally, the nonclass type <code>HowMuch</code> is initialized to 43.0.</p>
<p>
If an object is of a class type and that class has constructors (as in the preceding example), the object can be initialized by the <b>new</b> operator only if one of these conditions is met:
<ul type=disc>
<li>
The arguments provided in the initializer agree with those of a constructor.<br><br></li>
<li>
The class has a default constructor (a constructor that can be called with no arguments).</li>
</ul>
<p>
Access control and ambiguity control are performed on <b>operator new</b> and on the constructors according to the rules set forth in <a href="_pluslang_ambiguity.htm">Ambiguity</a> in Chapter 9 and <a href="_pluslang_initialization_using_special_member_functions.htm">Initialization Using Special Member Functions</a> in Chapter 11.</p>
<p>
No explicit per-element initialization can be done when allocating arrays using the <b>new</b> operator; only the default constructor, if present, is called. See <a href="_pluslang_default_arguments.htm">Default Arguments</a> in Chapter 7 for more information.</p>
<p>
If the memory allocation fails (<b>operator new</b> returns a value of 0), no initialization is performed. This protects against attempts to initialize data that does not exist.</p>
<p>
As with function calls, the order in which initialized expressions are evaluated is not defined. Furthermore, you should not rely on these expressions being completely evaluated before the memory allocation is performed. If the memory allocation fails and the <b>new</b> operator returns zero, some expressions in the initializer may not be completely evaluated.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>stack::size (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stackCCsize">stack::size (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>stack::size</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;stack&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _C, class _A&gt;
     size_type stack::size() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The stack::size function returns the number of elements in the stack. It is okay to call this function with an empty stack; it will return a value of 0.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StackSize.cpp : Illustrates how to use the size function to determine
//                 the number of elements on the stack.
//
// Functions:
//
//    size :  returns the number of elements in the stack.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;stack&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef stack&lt;string&gt; STACK_STRING;

void main()
{
   STACK_STRING stack1;

   // Check the size of an empty stack. Should return 0.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl;

   // Add item "Hello" to Stack1.
   cout &lt;&lt; "stack1.push('Hello')" &lt;&lt; endl;
   stack1.push("Hello");

   // Add item "This is the second element" to Stack1.
   cout &lt;&lt; "stack1.push('This is the second element')" &lt;&lt; endl;
   stack1.push("This is the second element");

   // Check the size of Stack1. Should return 2.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl &lt;&lt; endl;

   // Add item "Third element" to Stack1.
   cout &lt;&lt; "stack1.push('Third element')" &lt;&lt; endl;
   stack1.push("Third element");

   // Check the size of Stack1. Should return 3.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl &lt;&lt; endl;

   // Pop "Third element".
   cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
   stack1.pop();

   // Pop "This is the second element".
   cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
   stack1.pop();

   // Check the size of Stack1 again. Should return 1.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size()  &lt;&lt; endl &lt;&lt; endl;

   // Pop "Hello".
   cout &lt;&lt; "stack1.pop()" &lt;&lt; endl;
   stack1.pop();

   // Check the size of Stack1. Should return 0.
   cout &lt;&lt; "stack1.size() equals " &lt;&lt; stack1.size() &lt;&lt; endl &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>stack1.size() equals 0

stack1.push('Hello')
stack1.push('This is the second element')
stack1.size() equals 2

stack1.push('Third element')
stack1.size() equals 3

stack1.pop()
stack1.pop()
stack1.size() equals 1

stack1.pop()
stack1.size() equals 0
</code></pre>

</body>
</html>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>complex</title></head>
<body bgcolor=white>

<h2><a name="complex">complex</a></h2>
<META NAME="MS-HKWD" CONTENT="complex">
<pre><code>template&lt;class T&gt;
    class <b>complex</b> {
public:
    typedef T <a href="COMPLEX_complexCCvalue_type.htm#complex::value_type"><b>value_type</b></a>;
    T <a href="COMPLEX_complexCCreal.htm#complex::real"><b>real</b></a>() const;
    T <a href="COMPLEX_complexCCimag.htm#complex::imag"><b>imag</b></a>() const;
    <a href="COMPLEX_complexCCcomplex.htm#complex::complex"><b>complex</b></a>(const T&amp; re = 0, const T&amp; im = 0);
    <a href="COMPLEX_complexCCcomplex.htm#complex::complex"><b>complex</b></a>(const complex&amp; x);
    complex&amp; <a href="COMPLEX_complexCCoperatorE.htm#complex::operator="><b>operator=</b></a>(const complex&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorPE.htm#complex::operator+="><b>operator+=</b></a>(const complex&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorME.htm#complex::operator-="><b>operator-=</b></a>(const complex&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorXE.htm#complex::operator*="><b>operator*=</b></a>(const complex&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorDE.htm#complex::operator/="><b>operator/=</b></a>(const complex&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorE.htm#complex::operator="><b>operator=</b></a>(const T&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorE.htm#complex::operator="><b>operator=</b></a>(const T&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorPE.htm#complex::operator+="><b>operator+=</b></a>(const T&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorME.htm#complex::operator-="><b>operator-=</b></a>(const T&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorXE.htm#complex::operator*="><b>operator*=</b></a>(const T&amp; rhs);
    complex&amp; <a href="COMPLEX_complexCCoperatorDE.htm#complex::operator/="><b>operator/=</b></a>(const T&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorP.htm#operator+"><b>operator+</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorP.htm#operator+"><b>operator+</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorM.htm#operator-"><b>operator-</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorM.htm#operator-"><b>operator-</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorX.htm#operator*"><b>operator*</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorX.htm#operator*"><b>operator*</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorD.htm#operator/"><b>operator/</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
    friend complex&lt;T&gt;
        <a href="COMPLEX_operatorD.htm#operator/"><b>operator/</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
    friend bool <a href="COMPLEX_operatorEE.htm#operator=="><b>operator==</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
    friend bool <a href="COMPLEX_operatorEE.htm#operator=="><b>operator==</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
    friend bool <a href="COMPLEX_operatorNE.htm#operator!="><b>operator!=</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
    friend bool <a href="COMPLEX_operatorNE.htm#operator!="><b>operator!=</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
    };</code></pre>
<p>The template class describes an object that stores two objects of type <code><b>T</b></code>, one that represents the real part of a complex 
number and one that represents the imaginary part. An object of class <code>T</code>:</p>
<ul>
<li>Has a public default constructor, destructor, copy constructor, and assignment operator -- with conventional 
behavior.</li>
<li>Can be assigned integer or floating-point values, or type cast to such values -- with conventional behavior.</li>
<li>Defines the arithmetic operators defined for the floating-point types -- with conventional behavior.</li>
</ul>
<p>Explicit specializations of template class <code>complex</code> exist for the three floating-point types. In this <a href="INDEX_Table_of_Contents.htm#implementation">implementation</a>, a value 
of any other type <code><b>T</b></code> is type cast to <i>double</i> for actual calculations, with the <i>double</i> result assigned back to the stored 
object of type <code>T</code>.</p>
</body>
</html>

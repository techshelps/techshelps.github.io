<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>string::operator+ (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stringCCoperatorPL">string::operator+ (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>string::operator+</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;string&gt;</p>
<b>Prototype:</b><br>
<pre><code>
Function 1:
template&lt;class _E, class _TYPE, class _A&gt; inline
     basic_string&lt;_E, _TYPE, _A&gt;
     operator+(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const _E *RCharArray);

Function 2:
template&lt;class _E, class _TYPE, class _A&gt; inline
     basic_string&lt;_E, _TYPE, _A&gt;
     operator+(const _E *LCharArray,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

Function 3:
template&lt;class _E, class _TYPE, class _A&gt; inline
     basic_string&lt;_E, _TYPE, _A&gt;
     operator+(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const _E RChar);

Function 4:
template&lt;class _E, class _TYPE, class _A&gt; inline
     basic_string&lt;_E, _TYPE, _A&gt;
     operator+(const _E LChar,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

Function 5:
template&lt;class _E, class _TYPE, class _A&gt; inline
     basic_string&lt;_E, _TYPE, _A&gt;
     operator+(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 There are five versions of the string::operator+ function. Two functions are used to concatenate a null-terminated character array and a basic_string. Two functions are used to concatenate a character and a basic_string. The last function is used to concatenate two basic_string variables.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StringPlus.cpp : Illustrates how to use the operator+ to concatenate
//                  a null-terminated character array and a basic_string,
//                  how to concatenate a character and a basic_string,
//                  and how to concatenate two basic_string variables.
//
// Functions:
//
//    operator+ : Concatenates a null-terminated character array and
//                a basic_string.
//    operator+ : Concatenates a character array and a basic_string.
//    operator+ : Concatenates two basic_string variables.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

void main()
{
   string result;
   string S1="ABC";
   string S2="DEF";
   char CP1[]="GHI";
   char C='J';

   cout &lt;&lt; "S1 is " &lt;&lt; S1 &lt;&lt; endl;
   cout &lt;&lt; "S2 is " &lt;&lt; S2 &lt;&lt; endl;
   cout &lt;&lt; "CP1 is " &lt;&lt; CP1 &lt;&lt; endl;
   cout &lt;&lt; "C is " &lt;&lt; C &lt;&lt; endl;

   result=S1+CP1;                           // Function 1  (ABCGHI)
   cout &lt;&lt; "S1+CP1 is " &lt;&lt; result &lt;&lt; endl;

   result=CP1+S1;                           // Function 2  (GHIABC)
   cout &lt;&lt; "CP1+S1 is " &lt;&lt; result &lt;&lt; endl;

   result=S1+S2;                            // Function 3  (ABCDEF)
   cout &lt;&lt; "S1+S2 is " &lt;&lt; result &lt;&lt; endl;

   result=S1+C;                             // Function 4  (ABCJ)
   cout &lt;&lt; "S1+C is " &lt;&lt; result &lt;&lt; endl;

   result=C+S1;                             // Function 5  (JABC)
   cout &lt;&lt; "C+S1 is " &lt;&lt; result &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>S1 is ABC
S2 is DEF
CP1 is GHI
C is J
S1+CP1 is ABCGHI
CP1+S1 is GHIABC
S1+S2 is ABCDEF
S1+C is ABCJ
C+S1 is JABC
</code></pre>

</body>
</html>

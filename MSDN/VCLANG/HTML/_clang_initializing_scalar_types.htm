<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Scalar Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_initializing_scalar_types"></a><sup></sup>Initializing Scalar Types</h1>
<p>
When initializing scalar types, the value of the <i>assignment-expression</i> is assigned to the variable. The conversion rules for assignment apply. (See <a href="_clang_type_conversions.htm">Type Conversions</a> in Chapter 4 for information on conversion rules.) </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>declaration</i> :</p>
<p class=indent>
<i>declaration-specifiers init-declarator-list</i> <sub>opt</sub> <b>;</b></p>
<p class=dt>
<i>declaration-specifiers</i> :</p>
<p class=indent>
<i>storage-class-specifier declaration-specifiers</i> <sub>opt</sub><br>
<i>type-specifier declaration-specifiers</i> <sub>opt</sub><br>
<i>type-qualifier declaration-specifiers</i> <sub>opt</sub></p>
<p class=dt>
<i>init-declarator-list</i> :</p>
<p class=indent>
<i>init-declarator</i><br>
<i>init-declarator-list</i> <b>,</b> <i>init-declarator</i></p>
<p class=dt>
<i>init-declarator</i> :</p>
<p class=indent>
<i>declarator</i><br>
<i>declarator</i> <b>=</b> <i>initializer</i>  /* For scalar initialization */</p>
<p class=dt>
<i>initializer</i> :</p>
<p class=indent>
<i>assignment-expression</i></p>
<p>
You can initialize variables of any type, provided that you obey the following rules:
<ul type=disc>
<li>
Variables declared at the file-scope level can be initialized. If you do not explicitly initialize a variable at the external level, it is initialized to 0 by default.<br><br></li>
<li>
A constant expression can be used to initialize any global variable declared with the <b>static</b> <i>storage-class-specifier</i>. Variables declared to be <b>static</b> are initialized when program execution begins. If you do not explicitly initialize a global <b>static</b> variable, it is initialized to 0 by default, and every member that has pointer type is assigned a null pointer. <br><br></li>
<li>
Variables declared with the <b>auto</b> or <b>register</b> storage-class specifier are initialized each time execution control passes to the block in which they are declared. If you omit an initializer from the declaration of an <b>auto</b> or <b>register</b> variable, the initial value of the variable is undefined. For automatic and register values, the initializer is not restricted to being a constant; it can be any expression involving previously defined values, even function calls. <br><br></li>
<li>
The initial values for external variable declarations and for all <b>static</b> variables, whether external or internal, must be constant expressions. (For more information, see <a href="_clang_c_constant_expressions.htm">Constant Expressions</a> in Chapter 4.) Since the address of any externally declared or static variable is constant, it can be used to initialize an internally declared <b>static</b> pointer variable. However, the address of an <b>auto</b> variable cannot be used as a static initializer because it may be different for each execution of the block. You can use either constant or variable values to initialize <b>auto</b> and <b>register</b> variables.<br><br></li>
<li>
If the declaration of an identifier has block scope, and the identifier has external linkage, the declaration cannot have an initialization.</li>
</ul>
<p class=label>
<b>Examples</b></p>
<p>
The following examples illustrate initializations: </p>
<pre><code>int x = 10; 
</code></pre>
<p>
The integer variable <code>x</code> is initialized to the constant expression <code>10</code>. </p>
<pre><code>register int *px = 0;
</code></pre>
<p>
The pointer <code>px</code> is initialized to 0, producing a “null” pointer.</p>
<pre><code>const int c = (3 * 1024);
</code></pre>
<p>
This example uses a constant expression <code>(3 * 1024)</code> to initialize <code>c</code> to a constant value that cannot be modified because of the <b>const</b> keyword.</p>
<pre><code>int *b = &amp;x;
</code></pre>
<p>
This statement initializes the pointer <code>b</code> with the address of another variable, <code>x</code>.</p>
<pre><code>int *const a = &amp;z;
</code></pre>
<p>
The pointer <code>a</code> is initialized with the address of a variable named <code>z</code>. However, since it is specified to be a <b>const</b>, the variable <code>a</code> can only be initialized, never modified. It always points to the same location.</p>
<pre><code>int GLOBAL ;

int function( void )
{
 &nbsp;&nbsp; int LOCAL ;
 &nbsp;&nbsp; static int *lp = &amp;LOCAL;&nbsp;&nbsp; /* Illegal initialization */
 &nbsp;&nbsp; static int *gp = &amp;GLOBAL;&nbsp; /* Legal initialization&nbsp;&nbsp; */
 &nbsp;&nbsp; register int *rp = &amp;LOCAL; /* Legal initialization&nbsp;&nbsp; */
}
</code></pre>
<p>
The global variable <code>GLOBAL</code> is declared at the external level, so it has global lifetime. The local variable <code>LOCAL</code> has <b>auto</b> storage class and only has an address during the execution of the function in which it is declared. Therefore, attempting to initialize the <b>static</b> pointer variable <code>lp</code> with the address of <code>LOCAL</code> is not permitted. The <b>static</b> pointer variable <code>gp</code> can be initialized to the address of <code>GLOBAL</code> because that address is always the same. Similarly, <code>*rp</code> can be initialized because <code>rp</code> is a local variable and can have a nonconstant initializer. Each time the block is entered, <code>LOCAL</code> has a new address, which is then assigned to <code>rp</code>. </p>
</font></BODY>
</HTML>

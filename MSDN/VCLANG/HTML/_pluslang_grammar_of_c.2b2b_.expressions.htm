<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Grammar of C++ Expressions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_grammar_of_c.2b2b_.expressions"></a><sup></sup>Grammar of C++ Expressions</h1>
<p class=dt>
<i>expression</i>:</p>
<p class=indent>
<i>assignment-expression</i> <br>
<i>expression</i>  ,&nbsp; <i>assignment-expression</i></p>
<p class=dt>
<i>assignment-expression</i>: </p>
<p class=indent>
<i>conditional-expression</i> <br>
<i>unary-expression&nbsp; assignment-operator&nbsp; assignment-expression</i></p>
<p class=dt>
<i>assignment-operator</i>:&nbsp; one of</p>
<p class=indent>
<b>=&nbsp; *=&nbsp; /=&nbsp; %=&nbsp; +=&nbsp; –=&nbsp; &gt;=&nbsp; &lt;=&nbsp; &amp;=&nbsp; ^=&nbsp; |=</b></p>
<p class=dt>
<i>conditional-expression</i>: </p>
<p class=indent>
<i>logical-or-expression</i> <br>
<i>logical-or-expression</i>  <b>?</b>  <i>expression</i>  <b>:</b>  <i>conditional-expression</i></p>
<p class=dt>
<i>logical-or-expression</i>:</p>
<p class=indent>
<i>logical-and-expression</i> <br>
<i>logical-or-expression</i>&nbsp;&nbsp;&nbsp;<b>||</b>&nbsp;&nbsp;&nbsp;<i>logical-and-expression</i></p>
<p class=dt>
<i>logical-and-expression</i>:</p>
<p class=indent>
<i>inclusive-or-expression</i> <br>
<i>logical-and-expression</i>&nbsp;&nbsp;&nbsp;<b>&amp;&amp;</b>&nbsp;&nbsp;&nbsp;<i>inclusive-or-expression</i></p>
<p class=dt>
<i>inclusive-or-expression</i>: </p>
<p class=indent>
<i>exclusive-or-expression</i> <br>
<i>inclusive-or-expression</i>  <b>|</b> <b> </b><i>exclusive-or-expression</i></p>
<p class=dt>
<i>exclusive-or-expression</i>: </p>
<p class=indent>
<i>and-expression</i> <br>
<i>exclusive-or-expression</i>  <b>^</b> <i> and-expression</i></p>
<p class=dt>
<i>and-expression</i>: </p>
<p class=indent>
<i>equality-expression</i> <br>
<i>and-expression</i>  <b>&amp;</b>  <i>equality-expression</i></p>
<p class=dt>
<i>equality-expression</i>: </p>
<p class=indent>
<i>relational-expression</i> <br>
<i>equality-expression</i> <b> ==</b>  <i>relational-expression</i><br>
<i>equality-expression</i>  <b>!=</b>  <i>relational-expression</i></p>
<p class=dt>
<i>relational-expression</i>: </p>
<p class=indent>
<i>shift-expression</i> <br>
<i>relational-expression</i> <b> &lt;</b>  <i>shift-expression</i> <br>
<i>relational-expression</i> <b> &gt;</b>  <i>shift-expression</i> <br>
<i>relational-expression</i>  <b>&lt;=</b>  <i>shift-expression</i> <br>
<i>relational-expression</i>  <b>=&gt;</b>  <i>shift-expression</i></p>
<p class=dt>
<i>shift-expression</i>: </p>
<p class=indent>
<i>additive-expression</i> <br>
<i>shift-expression</i>  <b>&lt;&lt;</b>  <i>additive-expression</i> <br>
<i>shift-expression</i>  <b>&gt;&gt;</b>  <i>additive-expression</i></p>
<p class=dt>
<i>additive-expression</i>: </p>
<p class=indent>
<i>multiplicative-expression</i> <br>
<i>additive-expression</i>  <b>+</b>  <i>multiplicative-expression</i><br>
<i>additive-expression&nbsp; </i><b>–</b>  <i>multiplicative-expression</i></p>
<p class=dt>
<i>multiplicative-expression</i>: </p>
<p class=indent>
<i>segment-expression</i><br>
<i>multiplicative-expression</i>  <b>*</b>  <i>segment-expression</i> <br>
<i>multiplicative-expression</i>  <b>/</b>  <i>segment-expression</i> <br>
<i>multiplicative-expression</i>  <b>%</b>  <i>segment-expression</i></p>
<p class=dt>
<i>segment-expression</i>:</p>
<p class=indent>
<i>pm-expression</i><br>
<i>segment-expression</i>  <b>:&gt;</b>  <i>pm-expression</i></p>
<p class=dt>
<i>pm-expression</i>: </p>
<p class=indent>
<i>cast-expression</i> <br>
<i>pm-expression</i>  <b>.*</b>  <i>cast-expression</i> <br>
<i>pm-expression</i>  <b>–&gt;*</b>  <i>cast-expression</i></p>
<p class=dt>
<i>cast-expression</i>: </p>
<p class=indent>
<i>unary-expression</i> <br>
<b>(</b> <i> type-name</i>  <b>)</b>  <i>cast-expression</i>  </p>
<p class=dt>
<i>unary-expression</i>: </p>
<p class=indent>
<i>postfix-expression</i> <br>
<i>++&nbsp; unary-expression</i> <br>
<b>––</b>  <i>unary-expression</i> <br>
<i>unary-operator&nbsp; cast-expression</i> <br>
<b>sizeof</b>  <i>unary-expression</i> <br>
<b>sizeof&nbsp; (</b>  <i>type-name</i>  <b>)</b> <br>
<i>allocation-expression</i> <br>
<i>deallocation-expression</i></p>
<p class=dt>
<i>unary-operator</i>:&nbsp; one of </p>
<p class=indent>
<b>*&nbsp; &amp;  +&nbsp; –  !&nbsp; ~</b></p>
<p class=dt>
<i>allocation-expression</i>: </p>
<p class=indent>
<b>::</b><sub>opt</sub>  <b>new</b> <i>placement</i><sub>opt</sub>  <i>new-type-name&nbsp; new-initializer</i><sub>opt</sub> <br>
<b>::</b><sub>opt</sub>  <b>new</b> <i>placement</i><sub>opt</sub><i> </i><b>(</b>  <i>type-name</i>  <b>)</b>&nbsp;&nbsp;&nbsp;<i>new-initializer</i><sub>opt</sub></p>
<p class=dt>
<i>placement</i>: </p>
<p class=indent>
<b>(</b>  <i>expression-list</i>  <b>)</b></p>
<p class=dt>
<i>new-type-name</i>: </p>
<p class=indent>
<i>type-specifier-list&nbsp; new-declarator</i><sub>opt</sub></p>
<p class=dt>
<i>new-declarator</i>: </p>
<p class=indent>
<i>ms-modifier-list</i> <sub>opt</sub>&nbsp;&nbsp;&nbsp;<b>*</b>  <i>cv-qualifier-list</i> <sub>opt</sub> <i>new-declarator</i><sub>opt</sub>  <br>
<i>ms-modifier-list</i> <sub>opt</sub><i>&nbsp;&nbsp;&nbsp;complete-class-name</i> <b> ::&nbsp; *</b><i>cv-qualifier-list</i><sub>opt</sub> <br>
<i>new-declarator</i><sub>opt</sub> <br>
<i>new-declarator</i><sub>opt</sub> <b> [</b>  <i>expression</i>  <b>]</b></p>
<p class=dt>
<i>new-initializer</i>: </p>
<p class=indent>
<b>(</b>  <i>initializer-list</i>  <b>)</b></p>
<p class=dt>
<i>deallocation-expression</i>: </p>
<p class=indent>
<b>::</b><sub>opt</sub>  <b>delete</b> <i>cast-expression</i> <br>
<b>::</b><sub>opt</sub>  <b>delete</b>  <b>[&nbsp; ]</b> <i>cast-expression</i></p>
<p class=dt>
<i>postfix-expression</i>:</p>
<p class=indent>
<i>primary-expression</i> <br>
<i>postfix-expression</i>  <b>[</b>  <i>expression</i>  <b>]</b> <br>
<i>postfix-expression</i>&nbsp;&nbsp;&nbsp;<b>(</b>  <i>expression-list</i>  <b>)</b> <br>
<i>simple-type-name</i>  <b>(</b>  <i>expression-list</i>  <b>)</b> <br>
<i>postfix-expression</i>  <b>.</b> <i>name</i> <br>
<i>postfix-expression</i>  <b>–&gt;</b>&nbsp;&nbsp;&nbsp;<i>name</i> <br>
<i>postfix-expression</i>  <b>++</b> <br>
<i>postfix-expression</i>  <b>––<br>
dynamic_cast &lt;</b> <i>type-id</i> <b>&gt; (</b> <i>expression</i> <b>)<br>
static_cast &lt;</b> <i>type-id</i> <b>&gt; (</b> <i>expression</i> <b>)<br>
const_cast &lt;</b> <i>type-id</i> <b>&gt; (</b> <i>expression</i> <b>)<br>
reinterpret_cast &lt;</b> <i>type-id</i> <b>&gt; (</b> <i>expression</i> <b>)<br>
typeid</b>( <i>expression</i> )<br>
<b>typeid</b>( <i>type-id</i> )</p>
<p class=dt>
<i>expression-list</i>: </p>
<p class=indent>
<i>assignment-expression</i> <br>
<i>expression-list</i>  <b>,</b>  <i>assignment-expression</i></p>
<p class=dt>
<i>primary-expression</i>:</p>
<p class=indent>
<b>literal</b> <br>
<b>this</b> <br>
<b>::</b>  <i>identifier</i> <br>
<b>::</b>  <i>operator-function-name</i> <br>
<b>::</b>  <i>qualified-name</i> <b>(</b> <i> expression</i>  <b>)</b> <br>
<i>name</i></p>
<p class=dt>
<i>name</i>: </p>
<p class=indent>
<i>identifier</i> <br>
<i>operator-function-name</i> <br>
<i>conversion-function-name</i> <br>
&nbsp;&nbsp;&nbsp;<i>~&nbsp; class-name</i> <br>
<i>qualified-name</i></p>
<p class=dt>
<i>qualified-name</i>: </p>
<p class=indent>
<i>ms-modifier-list</i><sub>opt</sub> <i>qualified-class-name</i>  <b>::</b>  <i>name</i></p>
<p class=dt>
<i>literal</i>: </p>
<p class=indent>
<i>integer-constant</i> <br>
<i>character-constant</i> <br>
<i>floating-constant</i> <br>
<i>string-literal</i></p>
<p class=dt>
<i>integer-constant</i>:</p>
<p class=indent>
<i>decimal-constant</i> <i>integer-suffix</i><sub>opt</sub><br>
<i>octal-constant</i> <i>integer-suffix</i><sub>opt</sub><br>
<i>hexadecimal-constant</i> <i>integer-suffix</i><sub>opt</sub><br>
<b>'</b><i>c-char-sequence</i><b>'</b></p>
<p class=dt>
<i>decimal-constant</i>:</p>
<p class=indent>
<i>nonzero-digit</i><br>
<i>decimal-constant</i> <i>digit</i></p>
<p class=dt>
<i>octal-constan</i>t:</p>
<p class=indent>
<b>0</b><br>
<i>octal-constant</i> <i>octal-digit</i></p>
<p class=dt>
<i>hexadecimal-constant</i>:</p>
<p class=indent>
<b>0x</b> <i>hexadecimal-digit</i><br>
<b>0X</b> <i>hexadecimal-digit</i><br>
<i>hexadecimal-constant</i> <i>hexadecimal-digit</i></p>
<p class=dt>
<i>nonzero-digit</i>:&nbsp; one of</p>
<p class=indent>
<b>1</b> <b>2</b> <b>3</b> <b>4</b> <b>5</b> <b>6</b> <b>7</b> <b>8</b> <b>9</b></p>
<p class=dt>
<i>octal-digit</i>:&nbsp; one of</p>
<p class=indent>
<b>0</b> <b>1</b> <b>2</b> <b>3</b> <b>4</b> <b>5</b> <b>6</b> <b>7</b></p>
<p class=dt>
<i>hexadecimal-digit</i>:&nbsp; one of</p>
<p class=indent>
<b>0</b> <b>1</b> <b>2</b> <b>3</b> <b>4</b> <b>5</b> <b>6</b> <b>7</b> <b>8</b> <b>9</b><br>
<b>a</b> <b>b</b> <b>c</b> <b>d</b> <b>e</b> <b>f</b><br>
<b>A</b> <b>B</b> <b>C</b> <b>D</b> <b>E</b> <b>F</b></p>
<p class=dt>
<i>integer-suffix</i>:</p>
<p class=indent>
<i>unsigned-suffix</i> <i>long-suffix</i><sub>opt</sub><br>
<i>long-suffix</i> <i>unsigned-suffix</i><sub>opt</sub></p>
<p class=dt>
<i>unsigned-suffix</i>:&nbsp; one of</p>
<p class=indent>
<b>u</b> <b>U</b></p>
<p class=dt>
<i>long-suffix</i>:&nbsp; one of</p>
<p class=indent>
<b>l</b> <b>L</b></p>
<p class=dt>
<i>character-constant</i>:</p>
<p class=indent>
<b>'</b><i>c-char-sequence</i><b>'</b><br>
<b>L'</b><i>c-char-sequence</i><b>'</b></p>
<p class=dt>
<i>c-char-sequence</i>:</p>
<p class=indent>
<i>c-char</i><br>
<i>c-char-sequence</i> <i>c-char</i></p>
<p class=dt>
<i>c-char</i>:</p>
<p class=indent>
any member of the source character set except the single quote (<code>'</code>), <br>
&nbsp;&nbsp;&nbsp;backslash (<code>\</code>), or newline character<br>
<i>escape-sequence</i></p>
<p class=dt>
<i>escape-sequence</i>:</p>
<p class=indent>
<i>simple-escape-sequence</i><br>
<i>octal-escape-sequence</i><br>
<i>hexadecimal-escape-sequence</i></p>
<p class=dt>
<i>simple-escape-sequence</i>:&nbsp; one of</p>
<p class=indent>
<b>\'</b>  <b>\"</b>  <b>\?</b>  <b>\\</b><br>
<b>\a</b>  <b>\b</b>  <b>\f</b>  <b>\n</b>  <b>\r</b>  <b>\t</b>  <b>\v</b></p>
<p class=dt>
<i>octal-escape-sequence</i>:</p>
<p class=indent>
<i>\</i> <i>octal-digit</i><br>
<i>\</i> <i>octal-digit</i> <i>octal-digit</i><br>
<i>\</i> <i>octal-digit</i> <i>octal-digit</i> <i>octal-digit</i></p>
<p class=dt>
<i>hexadecimal-escape-sequence</i>:</p>
<p class=indent>
<b>\x</b><i>hexadecimal-digit</i><br>
<i>hexadecimal-escape-sequence</i> <i>hexadecimal-digit</i></p>
<p class=dt>
<i>floating-constant</i>:</p>
<p class=indent>
<i>fractional-constant</i> <i>exponent-part</i><sub>opt</sub> <i>floating-suffix</i><sub>opt</sub><br>
<i>digit-sequence</i> <i>exponent-part</i> <i>floating-suffix</i><sub>opt</sub></p>
<p class=dt>
<i>fractional-constant</i>:</p>
<p class=indent>
<i>digit-sequence</i><sub>opt</sub> <b>.</b> <i>digit-sequence</i><br>
<i>digit-sequence</i>  <b>.</b></p>
<p class=dt>
<i>exponent-part</i>:</p>
<p class=indent>
<b>e</b> <i>sign</i><sub>opt</sub> <i>digit-sequence</i><br>
<b>E</b> <i>sign</i><sub>opt</sub> <i>digit-sequence</i></p>
<p class=dt>
<i>sign</i>:&nbsp; one of</p>
<p class=indent>
<b>+</b> <b>–</b></p>
<p class=dt>
<i>digit-sequence</i>: </p>
<p class=indent>
<i>digit</i><br>
<i>digit-sequence</i> <i>digit</i></p>
<p class=dt>
<i>floating-suffix</i>:&nbsp; one of</p>
<p class=indent>
<b>f</b> <b>l</b> <b>F</b> <b>L</b></p>
<p class=dt>
<i>string</i> <i>literal</i>:</p>
<p class=indent>
<b>''</b><i>s-char-sequence</i> <sub>opt</sub><b>''</b><br>
<b>L</b> <b>''</b><i>s-char-sequence</i> <sub>opt</sub><b>''</b></p>
<p class=dt>
<i>s-char-sequence</i>:</p>
<p class=indent>
<i>s-char</i><br>
<i>s-char-sequence</i> <i>s-char</i></p>
<p class=dt>
<i>s-char</i>:</p>
<p class=indent>
any member of the source character set except double quotation marks (<sub>"</sub>), backslash (<b>\</b>), or newline character<br>
<i>escape-sequence</i></p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>operator == and operator &lt; deque (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_operatorEE_operatorL_deque">operator == and operator &lt; deque (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>operator ==</code> and <code>operator &lt; deque</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; deque&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class T, class A&gt;
     bool operator==(const deque &lt;T, A&gt;&amp; lhs, const deque &lt;T, A&gt;&amp; rhs);

template&lt;class T, class A&gt;
     bool operator&lt;(const deque &lt;T, A&gt;&amp; lhs, const deque &lt;T, A&gt;&amp; rhs);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The first template function overloads operator== to compare two objects of template class deque. The function returns: lhs.size() == rhs.size() &amp;&amp; equal(lhs. begin(), lhs. end(), rhs.begin()).  For equality, the number of elements must be equal in both deque objects.  The second template function overloads operator&lt; to compare two objects of template class deque. The function returns: lexicographical_compare(lhs. begin(), lhs. end(), rhs.begin(), rhs.end()).  Because lexicographic (as in a dictionary) compare is used, the number of elements does not matter while using operator&lt;. In the sample code, adding a line of code while creating the b object, such as b.push_front('D');, will make b greater than a.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// deque.cpp :
//
// Functions:
//
//    ==
//    &lt;
//
//////////////////////////////////////////////////////////////////////

/* Compile options needed:-GX
*/
#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;


typedef deque&lt;char &gt;  CHARDEQUE;
void print_contents (CHARDEQUE  deque, char*);

void main()
{
    //create a  with  3 A's
    CHARDEQUE  a(3,'A');
    a.push_front('C');

    //create b with 4 B's.
    CHARDEQUE  b(6,'B');

    //print out the contents
    print_contents (a,"a");
    print_contents (b,"b");

    //compare a and b
    if (a==b)
        cout &lt;&lt;"a is equal to b"&lt;&lt;endl;
    else if(a&lt;b)
            cout &lt;&lt;"a is less than b"&lt;&lt;endl;
    else
        cout &lt;&lt;"a is greater than b" &lt;&lt;endl;

    //assign the contents of b to a
    a.assign(b.begin(),b.end());
    print_contents (a,"a");
    print_contents (b,"b");

    //compare a and b again
    if (a==b)
        cout &lt;&lt;"a is equal to b"&lt;&lt;endl;
    else if(a&lt;b)
            cout &lt;&lt;"a is less than b"&lt;&lt;endl;
    else
        cout &lt;&lt;"a is greater than b" &lt;&lt;endl;

}

//function to print the contents of deque
void print_contents (CHARDEQUE  deque, char *name)
{
    CHARDEQUE::iterator pdeque;

    cout &lt;&lt;"The contents of "&lt;&lt; name &lt;&lt;" : ";

        for(pdeque = deque.begin();
        pdeque != deque.end();
        pdeque++)
    {
        cout &lt;&lt; *pdeque &lt;&lt;" " ;
    }
        cout&lt;&lt;endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>The contents of a : C A A A
The contents of b : B B B B B B
a is greater than b
The contents of a : B B B B B B
The contents of b : B B B B B B
a is equal to b
</code></pre>

</body>
</html>

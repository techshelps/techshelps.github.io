<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>string::operator!= (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stringCCoperatorXE">string::operator!= (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>string::operator!=</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;string&gt;</p>
<b>Prototype:</b><br>
<pre><code>
Function 1:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator!=(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const _E *RCharArray);

Function 2:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator!=(const _E *LCharArray,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 There are two versions of the string::operator!= function. Both versions are used to compare a null-terminated character array against a basic_string. They perform this operation by negating the result of (LString==RCharArray) or (LCharArray==RString). For more information on this comparison, please see the string::operator== function.  Notice that this operator does not work with NULL pointer for the character array. You will need to make sure that the character array is not NULL before you pass it to the operator.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StringNotEqual.cpp : Illustrates how to use the operator!= to test for
//                      non-equality of a basic_string variable and a
//                      null-terminated string.
//
// Functions:
//
//    operator!=   Returns true if the basic_string and the null-
//                 terminated string are not equal.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

void trueFalse(int x)
{
  cout &lt;&lt; (x? "True": "False") &lt;&lt; endl;
}

void main()
{
   string S1="ABC";
   char CP1[]="ABC";
   char CP2[]="DEF";
   char CP3[]="abc";

   cout &lt;&lt; "S1 is " &lt;&lt; S1 &lt;&lt; endl;
   cout &lt;&lt; "CP1 is " &lt;&lt; CP1 &lt;&lt; endl;
   cout &lt;&lt; "CP2 is " &lt;&lt; CP2 &lt;&lt; endl;
   cout &lt;&lt; "CP3 is " &lt;&lt; CP3 &lt;&lt; endl;

   cout &lt;&lt; "S1!=CP1 returned ";
   trueFalse(S1!=CP1);  // False  (calls function 1)

   cout &lt;&lt; "S1!=CP2 returned ";
   trueFalse(S1!=CP2);  // True   (calls function 1)

   cout &lt;&lt; "S1!=CP3 returned ";
   trueFalse(S1!=CP3);  // True   (calls function 1)

   cout &lt;&lt; "CP1!=S1 returned ";
   trueFalse(CP1!=S1);  // False  (calls function 2)

   cout &lt;&lt; "CP2!=S1 returned ";
   trueFalse(CP2!=S1);  // True   (calls function 2)

   cout &lt;&lt; "CP3!=S1 returned ";
   trueFalse(CP3!=S1);  // True   (calls function 2)
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>S1 is ABC
CP1 is ABC
CP2 is DEF
CP3 is abc
S1!=CP1 returned False
S1!=CP2 returned True
S1!=CP3 returned True
CP1!=S1 returned False
CP2!=S1 returned True
CP3!=S1 returned True
</code></pre>

</body>
</html>

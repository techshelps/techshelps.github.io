<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Copying Class Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_copying_class_objects"></a><sup></sup>Copying Class Objects</h1>
<p>
Two operations cause objects to be copied:
<ul type=disc>
<li>
Assignment. When one object’s value is assigned to another object, the first object is copied to the second object. Therefore:<pre><code>Point a, b;
...
a = b;
</code></pre>
<p class=tl>
causes the value of <code>b</code> to be copied to <code>a</code>.</P></li>
<li>
Initialization. Initialization occurs at the point of declaration of a new object, when arguments are passed to functions by value, and when values are returned from functions by value.</li>
</ul>
<p>
The programmer can define the semantics of “copy” for objects of class type. For example, consider the following code:</p>
<pre><code>TextFile a, b;
a.Open( "FILE1.DAT" );
b.Open( "FILE2.DAT" );
b = a;
</code></pre>
<p>
The preceding code could mean “copy the contents of FILE1.DAT to FILE2.DAT,” or it could mean “ignore FILE2.DAT and make <code>b</code> a second handle to FILE1.DAT.” The programmer is responsible for attaching appropriate copying semantics to each class.</p>
<p>
Copying is done in one of two ways:
<ul type=disc>
<li>
Assignment (using the assignment operator, <b>operator=</b>).<br><br></li>
<li>
Initialization (using the copy constructor). (For more information about the copy constructor, see <a href="_pluslang_rules_for_declaring_constructors.htm">Rules for Declaring Constructors</a>.)</li>
</ul>
<p>
Any given class can implement one or both copy methods. If neither method is implemented, assignment is handled as a member-by-member (“memberwise”) assignment, and initialization is handled as a member-by-member initialization. Memberwise assignment is covered in more detail in <a href="_pluslang_memberwise_assignment_and_initialization.htm">Memberwise Assignment and Initialization</a>.</p>
<p>
The copy constructor takes a single argument of type <i>class-name</i><b>&amp;</b>, where <i>class-name</i> is the name of the class for which the constructor is defined. For example:</p>
<pre><code>class Window
{
public:
 &nbsp;&nbsp; Window( const Window&amp; ); // Declare copy constructor.
 &nbsp;&nbsp; ...
};
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The type of the copy constructor’s argument should be <i>const class-name</i><b>&amp;</b> whenever possible. This prevents the copy constructor from accidentally changing the object from which it is copying. It also allows copying from <b>const</b> objects.</p>
</font></BODY>
</HTML>

</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>&lt;iterator&gt;</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

<h1><a name="&lt;iterator&gt;">&lt;iterator&gt;</a></h1>
<META NAME="MS-HKWD" CONTENT="iterator header file">
<p><a href="ITERATOR_advance.htm#advance"><code><b>advance</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_back_insert_iterator.htm#back_insert_iterator"><code><b>back_insert_iterator</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_back_inserter.htm#back_inserter"><code><b>back_inserter</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_bidirectional_iterator_tag.htm#bidirectional_iterator_tag"><code><b>bidirectional_iterator_tag</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_distance.htm#distance"><code><b>distance</b></code></a><code><b> &#183; 
</b></code><a href="ITERATOR_forward_iterator_tag.htm#forward_iterator_tag"><code><b>forward_iterator_tag</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_front_insert_iterator.htm#front_insert_iterator"><code><b>front_insert_iterator</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_front_inserter.htm#front_inserter"><code><b>front_inserter</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_input_iterator_tag.htm#input_iterator_tag"><code><b>input_iterator_tag</b></code></a><code><b> &#183; 
</b></code><a href="ITERATOR_insert_iterator.htm#insert_iterator"><code><b>insert_iterator</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_inserter.htm#inserter"><code><b>inserter</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_istream_iterator.htm#istream_iterator"><code><b>istream_iterator</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_istreambuf_iterator.htm#istreambuf_iterator"><code><b>istreambuf_iterator</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_iterator.htm#iterator"><code><b>iterator</b></code></a><code><b> &#183; 
</b></code><a href="ITERATOR_iterator_traits.htm#iterator_traits"><code><b>iterator_traits</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_operatorNE.htm#operator!="><code><b>operator!=</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_operatorEE.htm#operator=="><code><b>operator==</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_operatorL.htm#operator&lt;"><code><b>operator&lt;</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_operatorLE.htm#operator&lt;="><code><b>operator&lt;=</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_operatorG.htm#operator&gt;"><code><b>operator&gt;</b></code></a><code><b> &#183; 
</b></code><a href="ITERATOR_operatorGE.htm#operator&gt;="><code><b>operator&gt;=</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_operatorP.htm#operator+"><code><b>operator+</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_operatorM.htm#operator-"><code><b>operator-</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_ostream_iterator.htm#ostream_iterator"><code><b>ostream_iterator</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_ostreambuf_iterator.htm#ostreambuf_iterator"><code><b>ostreambuf_iterator</b></code></a><code><b> &#183; 
</b></code><a href="ITERATOR_output_iterator_tag.htm#output_iterator_tag"><code><b>output_iterator_tag</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_random_access_iterator_tag.htm#random_access_iterator_tag"><code><b>random_access_iterator_tag</b></code></a><code><b> &#183; </b></code><a href="ITERATOR_reverse_bidirectional_iterator.htm#reverse_bidirectional_iterator"><code><b>reverse_bidirectional_iterator</b></code></a><code><b> &#183; 
</b></code><a href="ITERATOR_reverse_iterator.htm#reverse_iterator"><code><b>reverse_iterator</b></code></a><code><b> </b></code></p>
<pre><code>namespace std {
struct <a href="ITERATOR_input_iterator_tag.htm#input_iterator_tag"><b>input_iterator_tag</b></a>;
struct <a href="ITERATOR_output_iterator_tag.htm#output_iterator_tag"><b>output_iterator_tag</b></a>;
struct <a href="ITERATOR_forward_iterator_tag.htm#forward_iterator_tag"><b>forward_iterator_tag</b></a>;
struct <a href="ITERATOR_bidirectional_iterator_tag.htm#bidirectional_iterator_tag"><b>bidirectional_iterator_tag</b></a>;
struct <a href="ITERATOR_random_access_iterator_tag.htm#random_access_iterator_tag"><b>random_access_iterator_tag</b></a>;
//    <b>TEMPLATE CLASSES</b>
template&lt;class C, class T, class Dist&gt;
    struct <a href="ITERATOR_iterator.htm#iterator"><b>iterator</b></a>;
template&lt;class It&gt;
    struct <a href="ITERATOR_iterator_traits.htm#iterator_traits"><b>iterator_traits</b></a>;
template&lt;class T&gt;
    struct <a href="ITERATOR_iterator_traits.htm#iterator_traits"><b>iterator_traits</b></a>&lt;T *&gt;
template&lt;class BidIt, class T, class Ref,
    class Ptr, class Dist&gt;
    class <a href="ITERATOR_reverse_bidirectional_iterator.htm#reverse_bidirectional_iterator"><b>reverse_bidirectional_iterator</b></a>;
template&lt;class RanIt, class T, class Ref,
    class Ptr, class Dist&gt;
    class <a href="ITERATOR_reverse_iterator.htm#reverse_iterator"><b>reverse_iterator</b></a>;
template&lt;class Cont&gt;
    class <a href="ITERATOR_back_insert_iterator.htm#back_insert_iterator"><b>back_insert_iterator</b></a>;
template&lt;class Cont&gt;
    class <a href="ITERATOR_front_insert_iterator.htm#front_insert_iterator"><b>front_insert_iterator</b></a>;
template&lt;class Cont&gt;
    class <a href="ITERATOR_insert_iterator.htm#insert_iterator"><b>insert_iterator</b></a>;
template&lt;class T, class Dist&gt;
    class <a href="ITERATOR_istream_iterator.htm#istream_iterator"><b>istream_iterator</b></a>;
template&lt;class T&gt;
    class <a href="ITERATOR_ostream_iterator.htm#ostream_iterator"><b>ostream_iterator</b></a>;
template&lt;class E, class T&gt;
    class <a href="ITERATOR_istreambuf_iterator.htm#istreambuf_iterator"><b>istreambuf_iterator</b></a>;
template&lt;class E, class T&gt;
    class <a href="ITERATOR_ostreambuf_iterator.htm#ostreambuf_iterator"><b>ostreambuf_iterator</b></a>;
//    <b>TEMPLATE FUNCTIONS</b>
template&lt;class BidIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorEE.htm#operator=="><b>operator==</b></a>(
        const reverse_bidirectional_iterator&lt;BidIt, T, Ref,
            Ptr, Dist&gt;&amp; lhs,
        const reverse_bidirectional_iterator&lt;BidIt, T, Ref,
            Ptr, Dist&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorEE.htm#operator=="><b>operator==</b></a>(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; lhs,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class T, class Dist&gt;
    bool <a href="ITERATOR_operatorEE.htm#operator=="><b>operator==</b></a>(
        const istream_iterator&lt;T, Dist&gt;&amp; lhs,
        const istream_iterator&lt;T, Dist&gt;&amp; rhs);
template&lt;class E, class T&gt;
    bool <a href="ITERATOR_operatorEE.htm#operator=="><b>operator==</b></a>(
        const istreambuf_iterator&lt;E, T&gt;&amp; lhs,
        const istreambuf_iterator&lt;E, T&gt;&amp; rhs);
template&lt;class BidIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const reverse_bidirectional_iterator&lt;BidIt, T, Ref,
            Ptr, Dist&gt;&amp; lhs,
        const reverse_bidirectional_iterator&lt;BidIt, T, Ref,
            Ptr, Dist&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; lhs,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class T, class Dist&gt;
    bool <a href="ITERATOR_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const istream_iterator&lt;T, Dist&gt;&amp; lhs,
        const istream_iterator&lt;T, Dist&gt;&amp; rhs);
template&lt;class E, class T&gt;
    bool <a href="ITERATOR_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const istreambuf_iterator&lt;E, T&gt;&amp; lhs,
        const istreambuf_iterator&lt;E, T&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorL.htm#operator&lt;"><b>operator&lt;</b></a>(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp;mmp lhs,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorG.htm#operator&gt;"><b>operator&gt;</b></a>(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp;mmp lhs,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorLE.htm#operator&lt;="><b>operator&lt;=</b></a>(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp;mmp lhs,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    bool <a href="ITERATOR_operatorGE.htm#operator&gt;="><b>operator&gt;=</b></a>(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp;mmp lhs,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    Dist <a href="ITERATOR_operatorM.htm#operator-"><b>operator-</b></a>(
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; lhs,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class RanIt, class T, class Ref, class Ptr, class Dist&gt;
    reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt; <a href="ITERATOR_operatorP.htm#operator+"><b>operator+</b></a>(
        Dist n,
        const reverse_iterator&lt;RanIt, T, Ref, Ptr, Dist&gt;&amp; rhs);
template&lt;class Cont&gt;
    back_insert_iterator&lt;Cont&gt; <a href="ITERATOR_back_inserter.htm#back_inserter"><b>back_inserter</b></a>(Cont&amp; x);
template&lt;class Cont&gt;
    front_insert_iterator&lt;Cont&gt; <a href="ITERATOR_front_inserter.htm#front_inserter"><b>front_inserter</b></a>(Cont&amp; x);
template&lt;class Cont, class Iter&gt;
    insert_iterator&lt;Cont&gt; <a href="ITERATOR_inserter.htm#inserter"><b>inserter</b></a>(Cont&amp; x, Iter it);
template&lt;class InIt, class Dist&gt;
    void <a href="ITERATOR_advance.htm#advance"><b>advance</b></a>(InIt&amp; it, Dist n);
template&lt;class Init, class Dist&gt;
    ptrdiff_t <a href="ITERATOR_distance.htm#distance"><b>distance</b></a>(InIt first, InIt last);
    };</code></pre>
<p>Include the <a href="INDEX_Table_of_Contents.htm#STL">STL</a> standard header <code><b>&lt;iterator&gt;</b></code> to define a number of classes, template classes, and template functions 
that aid in the declaration and manipulation of iterators.</p>

</body>
</html>

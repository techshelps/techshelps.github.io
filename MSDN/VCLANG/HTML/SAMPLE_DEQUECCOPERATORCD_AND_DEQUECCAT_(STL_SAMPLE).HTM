<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>deque::operator[] and deque::at (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_dequeCCoperatorLBRB_at">deque::operator[] and deque::at (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>deque::operator[]</code> and <code>deque::at</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; deque&gt;</p>
<b>Prototype:</b><br>
<pre><code>
   const_reference operator[](size_type pos) const;
   reference operator[](size_type pos);
   const_reference operator[](difference_type _N) const;
   reference operator[](difference_type _N) const;

   const_reference at(size_type pos) const;
   reference at(size_type pos);

   bool empty() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The member function operator[] returns a reference to the element of the controlled sequence at position pos. If that position is invalid, the behavior is undefined.  The member function at returns a reference to the element of the controlled sequence at position pos. If that position is invalid, the function throws an object of class out_of_range.  The member function empty returns true for an empty controlled sequence.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// deque.cpp :
//
// Functions:
//
//    operator[]
//    at
//    empty
//    push_back
//    begin
//    end
//////////////////////////////////////////////////////////////////////

/* Compile options needed:-GX
*/
#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;


typedef deque&lt;char &gt;  CHARDEQUE;
void print_contents (CHARDEQUE  deque, char*);

void main()
{
    //create an empty deque a
    CHARDEQUE  a;

    //check whether it is empty
    if(a.empty())
        cout&lt;&lt;"a is empty"&lt;&lt;endl;
    else
        cout&lt;&lt;"a is not empty"&lt;&lt;endl;

    //inset A, B, C and D  to a
    a.push_back('A');
    a.push_back('B');
    a.push_back('C');
    a.push_back('D');

    //check again whether a is empty
    if(a.empty())
        cout&lt;&lt;"a is empty"&lt;&lt;endl;
    else
        cout&lt;&lt;"a is not empty"&lt;&lt;endl;

    //print out the contents

    print_contents (a,"a");

    cout &lt;&lt;"The first element of a is  " &lt;&lt;a[0] &lt;&lt;endl;
    cout &lt;&lt;"The first element of a is  " &lt;&lt;a.at(0) &lt;&lt;endl;

    cout &lt;&lt;"The last element of a is  " &lt;&lt;a[a.size()-1] &lt;&lt;endl;
    cout &lt;&lt;"The last element of a is  " &lt;&lt;a.at(a.size()-1) &lt;&lt;endl;
}

//function to print the contents of deque
void print_contents (CHARDEQUE  deque, char *name)
{
    CHARDEQUE::iterator pdeque;

    cout &lt;&lt;"The contents of "&lt;&lt; name &lt;&lt;" : ";

    for(pdeque = deque.begin();
        pdeque != deque.end();
        pdeque++)
        {
            cout &lt;&lt; *pdeque &lt;&lt;" " ;
        }
    cout&lt;&lt;endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>a is empty
a is not empty
The contents of a : A B C D
The first element of a is  A
The first element of a is  A
The last element of a is  D
The last element of a is  D
</code></pre>

</body>
</html>

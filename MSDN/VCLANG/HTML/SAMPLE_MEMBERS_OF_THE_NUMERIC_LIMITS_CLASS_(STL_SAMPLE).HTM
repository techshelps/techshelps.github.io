<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Members of the numeric_limits Class (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_numeric_limits_class">Members of the numeric_limits Class (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the members of the <code>numeric_limits</code> class in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;limits&gt;</p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 To reference one of the members of this class, you need to specify the type that you want to obtain information about and the member name. The return will either be a value of 1 for true or 0 for false. For example, numeric_limits&lt;int&gt;::min() will return the minimum value for an int.  NOTE: Some of the members are valid only for certain types. Please refer to the Online Help to determine if a member is valid only for a certain type.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  Numeric.cpp
//
// Variables and Functions:
//
//    has_denorm
//    has_denorm_loss
//    has_infinity
//    has_quiet_NaN
//    has_signaling_NaN
//    is_bounded
//    is_exact
//    is_iec559
//    is_integer
//    is_modulo
//    is_signed
//    is_specialized
//    tinyness_before
//    traps
//    round_style
//    digits
//    digits10
//    max_exponent
//    max_exponent10
//    min_exponent
//    min_exponent10
//    radix;
//    denorm_min()
//    epsilon()
//    infinity()
//    max()
//    min()
//    quiet_ NaN()
//    round_error()
//    signaling_NaN()
//////////////////////////////////////////////////////////////////////

/* Compile options needed: /GX
*/

#include &lt;iostream&gt;
#include &lt;limits&gt;

using namespace std;


void main() {
    cout &lt;&lt; " 1 The minimum value for char is " &lt;&lt;
        (int)numeric_limits&lt;char&gt;::min() &lt;&lt; endl;
    cout &lt;&lt; " 2 The minimum value for int is " &lt;&lt;
        numeric_limits&lt;int&gt;::min() &lt;&lt; endl;
    cout &lt;&lt; " 3 The maximum value for char is " &lt;&lt;
        (int)numeric_limits&lt;char&gt;::max() &lt;&lt; endl;
    cout &lt;&lt; " 4 The maximum value for int is " &lt;&lt;
        numeric_limits&lt;int&gt;::max() &lt;&lt; endl;
    cout &lt;&lt; " 5 The number of bits to represent a char is " &lt;&lt;
        numeric_limits&lt;char&gt;::digits &lt;&lt; endl;
    cout &lt;&lt; " 6 The number of bits to represent an int is " &lt;&lt;
        numeric_limits&lt;int&gt;::digits &lt;&lt; endl;
    cout &lt;&lt;" 7 The number of digits representable in base 10 for float is"
         &lt;&lt; numeric_limits&lt;float&gt;::digits10 &lt;&lt; endl;
    cout &lt;&lt; " 8 Is a char signed?              " &lt;&lt;
        numeric_limits&lt;char&gt;::is_signed &lt;&lt; endl;
    cout &lt;&lt; " 9 Is an unsigned integer signed? " &lt;&lt;
        numeric_limits&lt;unsigned int&gt;::is_signed &lt;&lt; endl;
    cout &lt;&lt; "10 Is a integer an integer? " &lt;&lt;
        numeric_limits&lt;int&gt;::is_integer &lt;&lt; endl;
    cout &lt;&lt; "11 Is a float an integer?   " &lt;&lt;
        numeric_limits&lt;float&gt;::is_integer &lt;&lt; endl;
    cout &lt;&lt; "12 Is a integer exact? " &lt;&lt;
        numeric_limits&lt;int&gt;::is_exact &lt;&lt; endl;
    cout &lt;&lt; "13 Is a float  exact?  " &lt;&lt;
        numeric_limits&lt;float&gt;::is_exact &lt;&lt; endl;
    cout &lt;&lt; "14 The radix for float is            "  &lt;&lt;
        numeric_limits&lt;float&gt;::radix &lt;&lt; endl;
    cout &lt;&lt; "15 The epsilon for float is          " &lt;&lt;
        numeric_limits&lt;float&gt;::epsilon() &lt;&lt; endl;
    cout &lt;&lt; "16 The round error for float is      " &lt;&lt;
        numeric_limits&lt;float&gt;::round_error() &lt;&lt; endl;
    cout &lt;&lt; "17 The minimum exponent for float is " &lt;&lt;
        numeric_limits&lt;float&gt;::min_exponent &lt;&lt; endl;
    cout &lt;&lt; "18 The minimum exponent in base 10   " &lt;&lt;
        numeric_limits&lt;float&gt;::min_exponent10 &lt;&lt; endl;
    cout &lt;&lt; "19 The maximum exponent is           " &lt;&lt;
        numeric_limits&lt;float&gt;::max_exponent &lt;&lt; endl;
    cout &lt;&lt; "20 The maximum exponent in base 10   " &lt;&lt;
        numeric_limits&lt;float&gt;::max_exponent10 &lt;&lt; endl;
    cout &lt;&lt; "21 Can float represent positive infinity?  " &lt;&lt;
        numeric_limits&lt;float&gt;::has_infinity &lt;&lt; endl;
    cout &lt;&lt; "22 Can double represent positive infinity? " &lt;&lt;
        numeric_limits&lt;double&gt;::has_infinity &lt;&lt; endl;
    cout &lt;&lt; "23 Can int represent positive infinity? " &lt;&lt;
        numeric_limits&lt;int&gt;::has_infinity &lt;&lt; endl;
    cout &lt;&lt; "24 Can float represent a NaN?           " &lt;&lt;
        numeric_limits&lt;float&gt;::has_quiet_NaN &lt;&lt; endl;
    cout &lt;&lt; "25 Can float represent a signaling NaN? " &lt;&lt;
        numeric_limits&lt;float&gt;::has_signaling_NaN &lt;&lt; endl;
    cout &lt;&lt; "26 Does float allow denormalized values?   " &lt;&lt;
        numeric_limits&lt;float&gt;::has_denorm &lt;&lt; endl;
    cout &lt;&lt; "27 Does float detect denormalization loss? " &lt;&lt;
        numeric_limits&lt;float&gt;::has_denorm_loss &lt;&lt; endl;
    cout &lt;&lt; "28 Representation of positive infinity for float " &lt;&lt;
        numeric_limits&lt;float&gt;::infinity() &lt;&lt; endl;
    cout &lt;&lt; "29 Representation of quiet NaN for float         " &lt;&lt;
        numeric_limits&lt;float&gt;::quiet_NaN() &lt;&lt; endl;
    cout &lt;&lt; "30 Minimum denormalized number for float         " &lt;&lt;
        numeric_limits&lt;float&gt;::denorm_min() &lt;&lt; endl;
    cout &lt;&lt; "31 Minimum positive denormalized value for float " &lt;&lt;
        numeric_limits&lt;float&gt;::denorm_min() &lt;&lt; endl;
    cout &lt;&lt; "32 Does float adhere to IEC 559 standard?  " &lt;&lt;
        numeric_limits&lt;float&gt;::is_iec559 &lt;&lt; endl;
    cout &lt;&lt; "33 Is float bounded? " &lt;&lt;
        numeric_limits&lt;float&gt;::is_bounded &lt;&lt; endl;
    cout &lt;&lt; "34 Is float modulo?  " &lt;&lt;
        numeric_limits&lt;float&gt;::is_modulo &lt;&lt; endl;
    cout &lt;&lt; "35 Is int modulo?    " &lt;&lt;
        numeric_limits&lt;float&gt;::is_modulo &lt;&lt; endl;
    cout &lt;&lt; "36 Is trapping implemented for float?    " &lt;&lt;
        numeric_limits&lt;float&gt;::traps &lt;&lt; endl;
    cout &lt;&lt; "37 Is tinyness detected before rounding? " &lt;&lt;
        numeric_limits&lt;float&gt;::tinyness_before &lt;&lt; endl;
    cout &lt;&lt; "38 What is the rounding style for float? " &lt;&lt;
        (int)numeric_limits&lt;float&gt;::round_style &lt;&lt; endl;
    cout &lt;&lt; "39 What is the rounding style for int? " &lt;&lt;
        (int)numeric_limits&lt;int&gt;::round_style &lt;&lt; endl;
    cout &lt;&lt; "40 How does a float represent a signaling NaN? " &lt;&lt;
        numeric_limits&lt;float&gt;::signaling_NaN() &lt;&lt; endl;
    cout &lt;&lt; "41 Is int specialized? " &lt;&lt;
        numeric_limits&lt;float&gt;::is_specialized &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code> 1 The minimum value for char is -128
 2 The minimum value for int is  -2147483648
 3 The maximum value for char is 127
 4 The maximum value for int is  2147483647
 5 The number of bits to represent a char is 7
 6 The number of bits to represent an int is 31
 7 The number of digits representable in base 10 for float is 6
 8 Is a char signed?              1
 9 Is an unsigned integer signed? 0
10 Is an integer an integer? 1
11 Is a float an integer?   0
12 Is an integer exact? 1
13 Is a float exact?  0
14 The radix for float is            2
15 The epsilon for float is          1.19209e-007
16 The round error for float is      0.5
17 The minimum exponent for float is -125
18 The minimum exponent in base 10   -37
19 The maximum exponent is           128
20 The maximum exponent in base 10   38
21 Can float represent positive infinity?  1
22 Can double represent positive infinity? 1
23 Can int represent positive infinity? 0
24 Can float represent a NaN?           1
25 Can float represent a signaling NaN? 1
26 Does float allow denormalized values?   1
27 Does float detect denormalization loss? 1
28 Representation of positive infinity for float 1.#INF
29 Representation of quiet NaN for float         -1.#IND
30 Minimum denormalized number for float         1.4013e-045
31 Minimum positive denormalized value for float 1.4013e-045
32 Does float adhere to IEC 559 standard?  1
33 Is float bounded? 1
34 Is float modulo?  0
35 Is int modulo?    0
36 Is trapping implemented for float?    1
37 Is tinyness detected before rounding? 1
38 What is the rounding style for float? 1
39 What is the rounding style for int? 0
40 How does a float represent a signaling NaN? -1.#INF
41 Is int specialized? 1
</code></pre>

</body>
</html>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>deque::front and deque::back (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_dequeCCfront_back">deque::front and deque::back (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>deque::front</code> and <code>deque::back</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; deque&gt;</p>
<b>Prototype:</b><br>
<pre><code>
   reference front();
   const_reference front() const;

   reference back();
   const_reference back() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The member function front returns a reference to the first element of the controlled sequence, which must be non-empty.  The member function back returns a reference to the last element of the controlled sequence, which must be non-empty.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// deque.cpp :
//
// Functions:
//
//    front()
//
//    back()
//////////////////////////////////////////////////////////////////////

/* Compile options needed:-GX
*/
#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;


typedef deque&lt;char &gt;  CHARDEQUE;
void print_contents (CHARDEQUE  deque, char*);

void main()
{
    //create a  with  A, B, C and D
    CHARDEQUE  a;
    a.push_back('A');
    a.push_back('B');
    a.push_back('C');
    a.push_back('D');

    //print out the contents
    print_contents (a,"a");

    cout &lt;&lt;"The first element of a is " &lt;&lt;a.front() &lt;&lt;endl;

    cout &lt;&lt;"The last element of a is " &lt;&lt;a.back() &lt;&lt;endl;

    //now let us modify the first and last elements
    //using reference ,front() and back()

    CHARDEQUE::reference reffront=a.front();
    CHARDEQUE::reference refback=a.back();

    reffront='X';
    refback='Y';

     //print out the contents
     print_contents (a,"a");

    }

//function to print the contents of deque
void print_contents (CHARDEQUE  deque, char *name)
{
    CHARDEQUE::iterator pdeque;

    cout &lt;&lt;"The contents of "&lt;&lt; name &lt;&lt;" : ";

        for(pdeque = deque.begin();
        pdeque != deque.end();
        pdeque++)
    {
        cout &lt;&lt; *pdeque &lt;&lt;" " ;
    }
        cout&lt;&lt;endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>The contents of a : A B C D

The first element of a is A

The last element of a is D

The contents of a : X B C Y
</code></pre>

</body>
</html>

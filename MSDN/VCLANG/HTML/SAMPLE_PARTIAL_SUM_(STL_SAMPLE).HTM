<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>partial_sum (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_partial_sum">partial_sum (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>partial_sum</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;numeric&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator, class OutputIterator&gt; inline
     OutputIterator partial_sum(InputIterator first, InputIterator last, OutputIterator first2)

template&lt;class InputIterator, class OutputIterator, class BinaryOperator&gt; inline
     OutputIterator partial_sum(InputIterator first, InputIterator last, OutputIterator first2,
     BinaryOperator binary_op)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 Assigns to every iterator i in the range [result,result + (last - first)) a value correspondingly equal to ((...(*first + *(first + 1)) + ...) + *(first + (i - result)))   - or -  binary_op(binary_op(..., binary_op(*first, *(first  +  1)),...), *(first + (i - result))).  In other words, *(result+i) = init + *(first+0) + *(first+1) + ... + *(first+i).  </p>
<p><b>Sample Code: </b></p>
<pre><code>///////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// partial_sum.cpp : Demonstrates the use of partial_sum().
//
// Description of partial_sum(first,last,first2,init)
//                partial_sum(first,last,first2,init,binary_op):
//
//    Assigns to every iterator i in the range
//    [result,result + (last - first)) a value correspondingly equal to
//    ((...(*first + *(first + 1)) + ...) + *(first + (i - result)))
//
//     - or -
//
//    binary_op(binary_op(..., binary_op(*first, *(first  +  1)),...),
//    *(first + (i - result)))
//
//    In other words,
//    *(result+i) = init + *(first+0) + *(first+1) + ... + *(first+i)
///////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;

using namespace std;


typedef vector &lt; int &gt; IntArray;
typedef ostream_iterator &lt; int, char, char_traits&lt;char&gt; &gt; IntOstreamIt;

void main ()
{
    IntOstreamIt itOstream(cout," ");

    // Initialize the array
    IntArray rgI;
    for (int i=1; i&lt;=10; i++) rgI.push_back(i);

    // Print the arrays
    cout &lt;&lt; "Array: ";
    copy(rgI.begin(),rgI.end(),itOstream);
    cout &lt;&lt; endl;

    // The result array must be at least the same size as the data array
    IntArray rgIresult(rgI.size());

    // Compute the partial sum of the array
    partial_sum(rgI.begin(),rgI.end(),rgIresult.begin());

    // Print the array of partial sums
    cout &lt;&lt; "Array of partial sums: ";
    copy(rgIresult.begin(),rgIresult.end(),itOstream);
    cout &lt;&lt; endl;

    // Compute the partial product of the array
    partial_sum(rgI.begin(),rgI.end(),rgIresult.begin(),multiplies&lt;int&gt;());

    // Print the array of partial products
    cout &lt;&lt; "Array of partial products: ";
    partial_sum(rgIresult.begin(),rgIresult.end(),itOstream);
    cout &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Array: 1 2 3 4 5 6 7 8 9 10
Array of partial sums: 1 3 6 10 15 21 28 36 45 55
Array of partial products: 1 3 9 33 153 873 5913 46233 409113 4037913
</code></pre>

</body>
</html>

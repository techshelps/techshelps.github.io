<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>count_if (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_count_if">count_if (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>count_if</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator, class Predicate&gt;  inline
     size_t count_if(InputIterator first, InputIterator last, Predicate P)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The count_if algorithm counts the number of elements in the range [first, last) that cause the predicate to return true, and returns the number of elements for which the predicate was true.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// count.cpp : Illustrates how to use the count_if function.
//
// Functions:
//
//   count_if  - Count items in a range that satisfy a predicate.
//
//   begin     - Returns an iterator that points to the first element in
//               a sequence.
//
//   end       - Returns an iterator that points one past the end of a
//               sequence.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

using namespace std;


// Return true if string str starts with letter 'S'
int MatchFirstChar( const string&amp; str)
{
    string s("S") ;
    return s == str.substr(0,1) ;
}

void main()
{
    const int VECTOR_SIZE = 8 ;

    // Define a template class vector of strings
    typedef vector&lt;string &gt; StringVector ;

    //Define an iterator for template class vector of strings
    typedef StringVector::iterator StringVectorIt ;

    StringVector NamesVect(VECTOR_SIZE) ;   //vector containing names

    StringVectorIt start, end, it ;

    int result = 0 ;   // stores count of elements
                       // that match value.

    // Initialize vector NamesVect
    NamesVect[0] = "She" ;
    NamesVect[1] = "Sells" ;
    NamesVect[2] = "Sea" ;
    NamesVect[3] = "Shells" ;
    NamesVect[4] = "by" ;
    NamesVect[5] = "the" ;
    NamesVect[6] = "Sea" ;
    NamesVect[7] = "Shore" ;

    start = NamesVect.begin() ;   // location of first
                                  // element of NamesVect

    end = NamesVect.end() ;       // one past the location
                                  // last element of NamesVect

    // print content of NamesVect
    cout &lt;&lt; "NamesVect { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // Count the number of elements in the range [first, last +1)
    // that start with letter 'S'
    result = count_if(start, end, MatchFirstChar) ;

    // print the count of elements that start with letter 'S'
    cout &lt;&lt; "Number of elements that start with letter \"S\" = "
        &lt;&lt; result &lt;&lt; endl  ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>NamesVect { She Sells Sea Shells by the Sea Shore  }

Number of elements that start with letter "S" = 6
</code></pre>

</body>
</html>

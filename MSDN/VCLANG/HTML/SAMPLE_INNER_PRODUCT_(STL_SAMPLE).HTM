<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>inner_product (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_inner_product">inner_product (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>inner_product</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;numeric&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator1, class InputIterator2, class T&gt;
     inline T inner_product(InputIterator first, InputIterator last, InputIterator first2, T init)

template&lt;class InputIterator1, class InputIterator2, class T, class BinOp1, class BinOp2&gt; 
     inline T inner_product(InputIterator1 first, InputIterator1 last, InputIterator2 first2,
     T init, BinOp1 binary_op1, BinOp2 binary_op2)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 inner_product computes its result by initializing the accumulator acc with init and then modifying it with: acc = acc  +  (*i1) * (*i2)      - or -      acc = binary_op1(acc, binary_op2(*i1, *i2))  for every iterator i1 in the range [first, last) and iterator i2 in the range [first2, first2 + (last - first)) in order.  </p>
<p><b>Sample Code: </b></p>
<pre><code>///////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// inner_product.cpp : Demonstrates the use of inner_product().
//
// Description of
//         inner_product(first,last,first2,init)
//         inner_product(first,last,first2,init,binary_op1,binary_op2):
//
//    Computes its result by initializing the accumulator acc with init
//        acc = init
//    and then modifying it with
//        acc = acc  +  (*i1) * (*i2)
//    or
//        acc = binary_op1(acc, binary_op2(*i1, *i2))
//    for every iterator i1 in the range [first, last) and
//    iterator  i2  in  the  range [first2, first2 + (last - first))
//    in order.
///////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;

using namespace std;


typedef vector &lt; float &gt; FloatArray;
typedef ostream_iterator &lt; float, char, char_traits&lt;char&gt; &gt;
FloatOstreamIt;

void main ()
{
    FloatOstreamIt itOstream(cout," ");

    // Initialize the arrays
    FloatArray rgF1, rgF2;
    for (int i=1; i&lt;=5; i++) {
        rgF1.push_back(i);
        rgF2.push_back(i*i);
    };

    // Print the arrays
    cout &lt;&lt; "Array 1: ";
    copy(rgF1.begin(),rgF1.end(),itOstream);
    cout &lt;&lt; endl;
    cout &lt;&lt; "Array 2: ";
    copy(rgF2.begin(),rgF2.end(),itOstream);
    cout &lt;&lt; endl;

    // Compute the inner_product of the arrays.  This is the
    // sum of the products (S.O.P) of the corresponding elements
    float ip1 = inner_product(rgF1.begin(),rgF1.end(),rgF2.begin(),0);
    cout &lt;&lt; "The inner product (S.O.P) of Array1 and Array2 is "
       &lt;&lt; ip1
       &lt;&lt; endl;

    // Compute the inner_product of the arrays.  This is the
    // product of the sums (P.O.S.) of the corresponding elements
    float ip2 = inner_product(rgF1.begin(),rgF1.end(),rgF2.begin(),1,
                            multiplies&lt;float&gt;(),plus&lt;float&gt;());
    cout &lt;&lt; "The inner product (P.O.S.) of Array1 and Array2 is "
       &lt;&lt; ip2
       &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Array 1: 1 2 3 4 5
Array 2: 1 4 9 16 25
The inner product (S.O.P) of Array1 and Array2 is 225
The inner product (P.O.S.) of Array1 and Array2 is 86400
</code></pre>

</body>
</html>

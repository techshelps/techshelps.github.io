<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Array</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_array"></a><sup></sup>Array</h1>
<p>
An array is a collection of like objects. The simplest case of an array is a vector. C++ provides a convenient syntax for declaration of fixed-size arrays:</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>decl-specifiers</i>  <i>dname</i>  <b>[</b>  <i>constant-expression</i><sub>opt</sub>  <b>]</b>  <b>;</b></p>
<p>
The number of elements in the array is given by the <i>constant-expression</i>. The first element in the array is the 0th element, and the last element is the (<i>n</i>-1th) element, where <i>n</i> is the size of the array. The <i>constant-expression</i> must be of an integral type and must be greater than 0. A zero-sized array is legal only when the array is the last field in a <b>struct</b> or <b>union</b> and when the Microsoft extensions (/Ze) are enabled.</p>
<p>
Arrays are derived types and can therefore be constructed from any other derived or fundamental type except functions, references, and <b>void</b>. </p>
<p>
Arrays constructed from other arrays are multidimensional arrays. These multidimensional arrays are specified by placing multiple <b>[</b> <i>constant-expression</i> <b>]</b> specifications in sequence. For example, consider this declaration:</p>
<pre><code>int i2[5][7];
</code></pre>
<p>
It specifies an array of type <b>int</b>, conceptually arranged in a two-dimensional matrix of five rows and seven columns, as shown in Figure 7.2.</p>
<p class=label>
<b>Figure 7.2&nbsp;&nbsp;&nbsp;Conceptual Layout of Multidimensional Array</b></p>
<p>
<img src="l07mda2.gif" border=0></p>
<p>
In declarations of multidimensioned arrays that have an <i>initializer-list</i> (as described in <a href="_pluslang_initializers.htm">Initializers</a>), the <i>constant-expression</i> that specifies the bounds for the first dimension can be omitted. For example:</p>
<pre><code>const int cMarkets = 4;

// Declare a float that represents the transportation costs.
double TransportCosts[][cMarkets] =
{ { 32.19, 47.29, 31.99, 19.11 },
  { 11.29, 22.49, 33.47, 17.29 },
  { 41.97, 22.09,&nbsp; 9.76, 22.55 }&nbsp; };
</code></pre>
<p>
The preceding declaration defines an array that is three rows by four columns. The rows represent factories and the columns represent markets to which the factories ship. The values are the transportation costs from the factories to the markets. The first dimension of the array is left out, but the compiler fills it in by examining the initializer.</p>
<p>
The technique of omitting the bounds specification for the first dimension of a multidimensioned array can also be used in function declarations as follows:</p>
<pre><code>#include &lt;float.h&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Includes DBL_MAX.
#include &lt;iostream.h&gt;

const int&nbsp;&nbsp;&nbsp; cMkts = 4;

// Declare a float that represents the transportation costs.
double TransportCosts[][cMkts] =
{ { 32.19, 47.29, 31.99, 19.11 },
  { 11.29, 22.49, 33.47, 17.29 },
  { 41.97, 22.09,&nbsp; 9.76, 22.55 }&nbsp; };
// Calculate size of unspecified dimension.
const int cFactories = sizeof TransportCosts /
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof( double[cMkts] );

double FindMinToMkt( int Mkt, double TransportCosts[][cMkts],
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int cFacts );

void main( int argc, char *argv[] )
{
 &nbsp;&nbsp; double MinCost;
 &nbsp;&nbsp; MinCost = FindMinToMkt( *argv[1] - '0', TransportCosts,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cFacts );
 &nbsp;&nbsp; cout &lt;&lt; "The minimum cost to Market " &lt;&lt; argv[1] &lt;&lt; " is: "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; MinCost &lt;&lt; "\n";
}

double FindMinToMkt( int Mkt, double TransportCosts[][cMkts],
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int cFacts )
{
 &nbsp;&nbsp; double MinCost = DBL_MAX;
 &nbsp;&nbsp; for( int i = 0; i &lt; cFacts; ++i )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinCost = (MinCost &lt; TransportCosts[i][Mkt]) ?
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MinCost : TransportCosts[i][Mkt];
 &nbsp;&nbsp; return MinCost;
}
</code></pre>
<p>
The function <code>FindMinToMkt</code> is written such that adding new factories does not require any code changes, just a recompilation.</p>
</font></BODY>
</HTML>

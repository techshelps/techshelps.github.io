<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>vector::size, vector::capacity, and more (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_vectorCCsize_capacity">vector::size, vector::capacity, and more (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>vector::size</code> and <code>vector::capacity</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;vector&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _A&gt;
     void vector::reserve(size_type _N);

template&lt;class _TYPE, class _A&gt;
     size_type vector::max_size() const;

template&lt;class _TYPE, class _A&gt;
     void vector::resize(size_type _N, _TYPE _X = _TYPE());

template&lt;class _TYPE, class _A&gt;
     size_type vector::capacity() const;

template&lt;class _TYPE, class _A&gt;
     size_type vector::size() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The sample declares an empty vector of integers. It adds a single integer element to the vector, and then shows information about the vector's size, maximum size, and capacity. It reserves storage for 1000 elements and displays the same information about the vector. Finally, it resizes the vector to 2000 elements, and then displays the information.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
//    Remax.cpp: Illustrates vector::reserve, vector::max_size,
//               vector::resize, vector::resize, and vector::capacity.
//
// Functions:
//
//    vector::max_size - Returns maximum number of elements vector could
//                       hold.
//
//    vector::capacity - Returns number of elements for which memory has
//                       been allocated.
//
//    vector::size - Returns number of elements in the vector.
//
//    vector::resize - Reallocates memory for vector, preserves its
//                     contents if new size is larger than existing size.
//
//    vector::reserve - Allocates elements for vector to ensure a minimum
//                      size, preserving its contents if the new size is
//                      larger than existing size.
//
//    vector::push_back - Appends (inserts) an element to the end of a
//                        vector, allocating memory for it if necessary.
//
//////////////////////////////////////////////////////////////////////

// The debugger can't handle symbols more than 255 characters long.
// STL often creates symbols longer than that.
// When symbols are longer than 255 characters, the warning is disabled.
#pragma warning(disable:4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std ;

typedef vector&lt;int&gt; INTVECTOR;

void main()
{
    // Dynamically allocated vector begins with 0 elements.
    INTVECTOR theVector;

    // Add one element to the end of the vector, an int with the value 42.
    theVector.push_back(42) ;

    // Show statistics about vector.
    cout &lt;&lt; "theVector's size is: " &lt;&lt; theVector.size() &lt;&lt; endl;
    cout &lt;&lt; "theVector's maximum size is: " &lt;&lt; theVector.max_size()
         &lt;&lt; endl;
    cout &lt;&lt; "theVector's capacity is: " &lt;&lt; theVector.capacity() &lt;&lt; endl;

    // Ensure there's room for at least 1000 elements.
    theVector.reserve(1000);
    cout &lt;&lt; endl &lt;&lt; "After reserving storage for 1000 elements:" &lt;&lt; endl;
    cout &lt;&lt; "theVector's size is: " &lt;&lt; theVector.size() &lt;&lt; endl;
    cout &lt;&lt; "theVector's maximum size is: " &lt;&lt; theVector.max_size()
         &lt;&lt; endl;
    cout &lt;&lt; "theVector's capacity is: " &lt;&lt; theVector.capacity() &lt;&lt; endl;

    // Ensure there's room for at least 2000 elements.
    theVector.resize(2000);
    cout &lt;&lt; endl &lt;&lt; "After resizing storage to 2000 elements:" &lt;&lt; endl;
    cout &lt;&lt; "theVector's size is: " &lt;&lt; theVector.size() &lt;&lt; endl;
    cout &lt;&lt; "theVector's maximum size is: " &lt;&lt; theVector.max_size()
         &lt;&lt; endl;
    cout &lt;&lt; "theVector's capacity is: " &lt;&lt; theVector.capacity() &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
theVector's size is: 1
theVector's maximum size is: 1073741823
theVector's capacity is: 1

After reserving storage for 1000 elements:
theVector's size is: 1
theVector's maximum size is: 1073741823
theVector's capacity is: 1000

After resizing storage to 2000 elements:
theVector's size is: 2000
theVector's maximum size is: 1073741823
theVector's capacity is: 2000
</code></pre>


</body>
</html>

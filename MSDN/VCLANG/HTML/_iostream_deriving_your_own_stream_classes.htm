<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deriving Your Own Stream Classes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_deriving_your_own_stream_classes"></a><sup></sup>Deriving Your Own Stream Classes</h1>
<p>
Like any C++ class, a stream class can be derived to add new member functions, data members, or manipulators. If you need an input file stream that tokenizes its input data, for example, you can derive from the <a href="_iostream_ifstream.htm">ifstream</a> class. This derived class can include a member function that returns the next token by calling its base class’s public member functions or extractors. You may need new data members to hold the stream object’s state between operations, but you probably won’t need to use the base class’s protected member functions or data members.</p>
<p>
For the straightforward stream class derivation, you need only write the necessary constructors and the new member functions.</p>
</font></BODY>
</HTML>

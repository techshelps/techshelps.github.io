<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>typeid Operator</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_typeid_operator"></a><sup></sup>typeid Operator</h1>
<p>
The typeid operator allows the type of an object to be determined at run time.</p>
<p class=label>
<b>Syntax</b></p>
<p>
typeid( <i>type-id</i> )</p>
<p>
typeid( <i>expression</i> )</p>
<p>
The result of a typeid expression is a const type_info&amp;. The value is a reference to a type_info object that represents either the <i>type-id</i> or the type of the <i>expression</i>, depending on which form of typeid is used. See <a href="_pluslang_type_info_class.htm">type_info Class</a> for more information.</p>
<p>
The typeid operator does a run-time check when applied to an l-value of a polymorphic class type, where the true type of the object cannot be determined by the static information provided. Such cases are:
<ul type=disc>
<li>
A reference to a class<br><br></li>
<li>
A pointer, dereferenced with *<br><br></li>
<li>
A subscripted pointer (i.e. [ ]). (Note that it is generally not safe to use a subscript with a pointer to a polymorphic type.)</li>
</ul>
<p>
If the <i>expression</i> points to a base class type, yet the object is actually of a type derived from that base class, a type_info reference for the derived class is the result. The <i>expression</i> must point to a polymorphic type, that is, a class with virtual functions. Otherwise, the result is the type_info for the static class referred to in the <i>expression</i>. Further, the pointer must be dereferenced so that the object it points to is used. Without dereferencing the pointer, the result will be the type_info for the pointer, not what it points to. For example:</p>
<pre><code>class Base { ... };

class Derived : public Base { ... };

void f()
{
   Derived* pd = new Derived;
   Base* pb = pd;
   ...
   const type_info&amp; t = typeid(pb);      // t holds pointer type_info
   const type_info&amp; t1 = typeid(*pb);      // t1 holds Derived info
   ...
}
</code></pre>
<p>
If the <i>expression</i> is dereferencing a pointer, and that pointer’s value is zero, typeid throws a bad_typeid exception. If the pointer does not point to a valid object, a __non_rtti_object exception is thrown.</p>
<p>
If the <i>expression</i> is neither a pointer nor a reference to a base class of the object, the result is a type_info reference representing the static type of the <i>expression</i>.</p>
</font></BODY>
</HTML>

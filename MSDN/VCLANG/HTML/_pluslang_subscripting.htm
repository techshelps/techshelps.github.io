<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Subscripting</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_subscripting"></a><sup></sup>Subscripting</h1>
<p>
The subscript operator (<b>[ ]</b>), like the function-call operator, is considered a binary operator. The subscript operator must be a nonstatic member function that takes a single argument. This argument can be of any type and designates the desired array subscript.</p>
<p>
The following example demonstrates how to create a vector of type <b>int</b> that implements bounds checking:</p>
<pre><code>#include &lt;iostream.h&gt;

class IntVector
{
public:
   IntVector( int cElements );
   ~IntVector() { delete _iElements; }
   int&amp; operator[]( int nSubscript );
private:
   int *_iElements;
   int _iUpperBound;
};

// Construct an IntVector.
IntVector::IntVector( int cElements )
{
   _iElements = new int[cElements];
   _iUpperBound = cElements;
}

// Subscript operator for IntVector.
int&amp; IntVector::operator[]( int nSubscript )
{
   static int iErr = -1;

   if( nSubscript &gt;= 0 &amp;&amp; nSubscript &lt; _iUpperBound )
      return _iElements[nSubscript];
   else
   {
      clog &lt;&lt; "Array bounds violation." &lt;&lt; endl;
      return iErr;
   }
}

// Test the IntVector class.
int main()
{
   IntVector v( 10 );

   for( int i = 0; i &lt;= 10; ++i )
      v[i] = i;

   v[3] = v[9];

   for( i = 0; i &lt;= 10; ++i )
      cout &lt;&lt; "Element: [" &lt;&lt; i &lt;&lt; "] = " &lt;&lt; v[i]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; endl;

   return v[0];
}
</code></pre>
<p>
When <code>i</code> reaches 10 in the preceding program, <code>operator[]</code> detects that an out-of-bounds subscript is being used and issues an error message.</p>
<p>
Note that the function <code>operator[]</code> returns a reference type. This causes it to be an l-value, allowing you to use subscripted expressions on either side of assignment operators.</p>
</font></BODY>
</HTML>

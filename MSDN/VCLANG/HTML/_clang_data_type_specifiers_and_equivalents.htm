<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Type Specifiers and Equivalents</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_data_type_specifiers_and_equivalents"></a><sup></sup>Data Type Specifiers and Equivalents</h1>
<p>
This book generally uses the forms of the type specifiers listed in Table 3.1 rather than the long forms, and it assumes that the <b>char</b> type is signed by default. Therefore, throughout this book, <b>char</b> is equivalent to <b>signed char</b>.</p>
<p class=label>
<b><a name="_clang_table_3..1"></a>Table 3.1&nbsp;&nbsp;&nbsp;Type Specifiers and Equivalents</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=30%><b>Type Specifier</b></td>
<td class=label width=70%><b>Equivalent(s)</b></td>
</tr>
<tr valign=top>
<td width=30%><b>signed char</b><sup>1</sup></td>
<td width=70%><b>char</b></td>
</tr>
<tr valign=top>
<td width=30%><b>signed int</b></td>
<td width=70%><b>signed</b>, <b>int</b></td>
</tr>
<tr valign=top>
<td width=30%><b>signed short int</b></td>
<td width=70%><b>short</b>, <b>signed short</b></td>
</tr>
<tr valign=top>
<td width=30%><b>signed long int</b></td>
<td width=70%><b>long</b>, <b>signed long</b></td>
</tr>
<tr valign=top>
<td width=30%><b>unsigned char</b></td>
<td width=70%>—</td>
</tr>
<tr valign=top>
<td width=30%><b>unsigned int</b></td>
<td width=70%><b>unsigned</b></td>
</tr>
<tr valign=top>
<td width=30%><b>unsigned short int</b></td>
<td width=70%><b>unsigned short</b></td>
</tr>
<tr valign=top>
<td width=30%><b>unsigned long int</b></td>
<td width=70%><b>unsigned long</b></td>
</tr>
<tr valign=top>
<td width=30%><b>float</b></td>
<td width=70%>—</td>
</tr>
<tr valign=top>
<td width=30%><b>long double</b><sup>2</sup></td>
<td width=70%>—</td>
</tr>
</table><br>
<p class=mini>
<sup>1</sup>&nbsp;&nbsp;&nbsp;When you make the <b>char</b> type unsigned by default (by specifying the /J compiler option), you cannot abbreviate <b>signed char</b> as <b>char</b>.</p>
<p class=mini>
<sup>2</sup>&nbsp;&nbsp;&nbsp;In 32-bit operating systems, the Microsoft C compiler maps <b>long double </b>to type <b>double</b>.</p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
You can specify the /J compiler option to change the default <b>char</b> type from signed to unsigned. When this option is in effect, <b>char</b> means the same as <b>unsigned char</b>, and you must use the <b>signed</b> keyword to declare a signed character value. If a <b>char</b> value is explicitly declared signed, the /J option does not affect it, and the value is sign-extended when widened to an <b>int</b> type. The <b>char</b> type is zero-extended when widened to <b>int</b> type. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Return Type</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_return_type"></a><sup></sup>Return Type</h1>
<p>
The return type of a function establishes the size and type of the value returned by the function and corresponds to the type-specifier in the syntax below: </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>function-definition</i> :</p>
<p class=indent>
<i>declaration-specifiers</i> <sub>opt</sub> <i>attribute-seq</i> <sub>opt</sub> <i>declarator</i> <i>declaration-list</i> <sub>opt</sub> <i>compound-statement <br>
</i>/* <i>attribute-seq</i> is Microsoft Specific */</p>
<p class=dt>
<i>declaration-specifiers</i> :</p>
<p class=indent>
<i>storage-class-specifier</i> <i>declaration-specifiers</i> <sub>opt</sub><br>
<i>type-specifier</i> <i>declaration-specifiers</i> <sub>opt</sub><br>
<i>type-qualifier</i> <i>declaration-specifiers</i> <sub>opt</sub></p>
<p class=dt>
<i>type-specifier</i> :</p>
<p class=indent>
<b>void</b><br>
<b>char</b><br>
<b>short</b><br>
<b>int</b><br>
<b>long</b><br>
<b>float</b><br>
<b>double</b><br>
<b>signed</b><br>
<b>unsigned</b><br>
<i>struct-or-union-specifier</i><br>
<i>enum-specifier</i><br>
<i>typedef-name</i></p>
<p>
The <i>type-specifier</i> can specify any fundamental, structure, or union type. If you do not include <i>type-specifier</i>, the return type <b>int</b> is assumed. </p>
<p>
The return type given in the function definition must match the return type in declarations of the function elsewhere in the program. A function returns a value when a <b>return</b> statement containing an expression is executed. The expression is evaluated, converted to the return value type if necessary, and returned to the point at which the function was called. If a function is declared with return type <b>void</b>, a return statement containing an expression generates a warning and the expression is not evaluated.</p>
<p>
The following examples illustrate function return values. </p>
<pre><code>typedef struct&nbsp; 
{
 &nbsp;&nbsp; char name[20];
 &nbsp;&nbsp; int id;
 &nbsp;&nbsp; long class;
} STUDENT;

/* Return type is STUDENT: */

STUDENT sortstu( STUDENT a, STUDENT b )
{
 &nbsp;&nbsp; return ( (a.id &lt; b.id) ? a : b );
}
</code></pre>
<p>
This example defines the <code>STUDENT</code> type with a <b>typedef</b> declaration and defines the function <code>sortstu</code> to have <code>STUDENT</code> return type. The function selects and returns one of its two structure arguments. In subsequent calls to the function, the compiler checks to make sure the argument types are <code>STUDENT</code>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Efficiency would be enhanced by passing pointers to the structure, rather than the entire structure.</p>
<pre><code>char *smallstr( char s1[], char s2[] )
{
 &nbsp;&nbsp; int i;

 &nbsp;&nbsp; i = 0;
 &nbsp;&nbsp; while ( s1[i] != '\0' &amp;&amp; s2[i] != '\0' )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++;
 &nbsp;&nbsp; if ( s1[i] == '\0' )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ( s1 );
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ( s2 );
}
</code></pre>
<p>
This example defines a function returning a pointer to an array of characters. The function takes two character arrays (strings) as arguments and returns a pointer to the shorter of the two strings. A pointer to an array points to the first of the array elements and has its type; thus, the return type of the function is a pointer to type <b>char</b>.</p>
<p>
You need not declare functions with <b>int</b> return type before you call them, although prototypes are recommended so that correct type checking for arguments and return values is enabled. </p>
</font></BODY>
</HTML>

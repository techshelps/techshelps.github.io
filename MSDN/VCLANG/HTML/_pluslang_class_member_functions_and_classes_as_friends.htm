<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Member Functions and Classes as Friends</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_class_member_functions_and_classes_as_friends"></a><sup></sup>Class Member Functions and Classes as Friends</h1>
<p>
Class member functions can be declared as friends in other classes. Consider the following example:</p>
<pre><code>class B;
class A
{
 &nbsp;&nbsp; int Func1( B&amp; b ) ;
 &nbsp;&nbsp; int Func2( B&amp; b ) ;
};

class B
{
private:
 &nbsp;&nbsp; int _b;
 &nbsp;&nbsp; friend int A::Func1( B&amp; );&nbsp;&nbsp; //&nbsp; Grant friend access to one
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; function in class B.
};
 int A::Func1( B&amp; b ) { return b._b; } //&nbsp; OK: this is a friend.
 int A::Func2( B&amp; b ) { return b._b; } //&nbsp; Error: _b is a private member.
</code></pre>
<p>
In the preceding example, only the function <code>A::Func1( B&amp; )</code> is granted friend access to class <code>B</code>. Therefore, access to the private member <code>_b</code> is correct in <code>Func1 </code>of class <code>A </code>but not in <code>Func2</code>.</p>
<p>
Suppose the <b>friend</b> declaration in class <code>B</code> had been:</p>
<pre><code>friend class A;
</code></pre>
<p>
In that case, all member functions in class <code>A</code> would have been granted friend access to class <code>B</code>. Note that “friendship” cannot be inherited, nor is there any “friend of a friend” access. Figure 10.2 shows four class declarations: <code>Base</code>, <code>Derived</code>, <code>aFriend</code>, and <code>anotherFriend</code>. Only class <code>aFriend</code> has direct access to the private members of <code>Base</code> (and to any members <code>Base</code> might have inherited).</p>
<p class=label>
<b>Figure 10.2&nbsp;&nbsp;&nbsp;Implications of friend Relationship</b></p>
<p>
<img src="l10frn2.gif" border=0></p>
</font></BODY>
</HTML>

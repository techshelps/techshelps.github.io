<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Member Functions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_member_functions"></a><sup></sup>Member Functions</h1>
<p>
Classes can contain data and functions. These functions are referred to as “member functions.” Any nonstatic function declared inside a class declaration is considered a member function and is called using the member-selection operators (<b>.</b> and <b>–&gt;</b>). When calling member functions from other member functions of the same class, the object and member-selection operator can be omitted. For example:</p>
<pre><code>class Point
{
public:
 &nbsp;&nbsp; short x() { return _x; }
 &nbsp;&nbsp; short y() { return _y; }
 &nbsp;&nbsp; void&nbsp; Show() { cout &lt;&lt; x() &lt;&lt; ", " &lt;&lt; y() &lt;&lt; "\n"; }
private:
 &nbsp;&nbsp; short _x, _y;
};

void main()
{
 &nbsp;&nbsp; Point pt;

 &nbsp;&nbsp; pt.Show();
}
</code></pre>
<p>
Note that in the member function, <code>Show</code>, calls to the other member functions, <code>x</code> and <code>y</code>, are made without member-selection operators. These calls implicitly mean <code>this-&gt;x()</code> and <code>this-&gt;y()</code>. However, in <b>main</b>, the member function, <code>Show</code>, must be selected using the object <code>pt</code> and the member-selection operator (<b>.</b>).</p>
<p>
Static functions declared inside a class can be called using the member-selection operators or by specifying the fully qualified function name (including the class name).</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A function declared using the <b>friend</b> keyword is not considered a member of the class in which it is declared a <b>friend</b> (although it can be a member of another class). A <b>friend</b> declaration controls the access a nonmember function has to class data.</p>
<p>
The following class declaration shows how member functions are declared:</p>
<pre><code>class Point
{
public:
 &nbsp;&nbsp; unsigned GetX();
 &nbsp;&nbsp; unsigned GetY();
 &nbsp;&nbsp; unsigned SetX( unsigned x );
 &nbsp;&nbsp; unsigned SetY( unsigned y );
private:
 &nbsp;&nbsp; unsigned ptX, ptY;
};
</code></pre>
<p>
In the preceding class declaration, four functions are declared: <code>GetX</code>, <code>GetY</code>, <code>SetX</code>, and <code>SetY</code>. The next example shows how such functions are called in a program:</p>
<pre><code>void main()
{
 &nbsp;&nbsp; // Declare a new object of type Point.
 &nbsp;&nbsp; Point ptOrigin;

 &nbsp;&nbsp; // Member function calls use the . member-selection operator.
 &nbsp;&nbsp; ptOrigin.SetX( 0 );
 &nbsp;&nbsp; ptOrigin.SetY( 0 );

 &nbsp;&nbsp; // Declare a pointer to an object of type Point.
 &nbsp;&nbsp; Point *pptCurrent = new Point;
// Member function calls use the -&gt; member-selection operator.
 &nbsp;&nbsp; pptCurrent-&gt;SetX( ptOrigin.GetX() + 10 );
 &nbsp;&nbsp; pptCurrent-&gt;SetY( ptOrigin.GetY() + 10 );
}
</code></pre>
<p>
In the preceding code, the member functions of the object <code>ptOrigin</code> are called using the member-selection operator (<b>.</b>). However, the member functions of the object pointed to by <code>pptCurrent</code> are called using the <b>–&gt;</b> member-selection operator. </p>
</font></BODY>
</HTML>

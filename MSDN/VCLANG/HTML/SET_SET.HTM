<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set</title></head>
<body bgcolor=white>

<h2><a name="set">set</a></h2>
<META NAME="MS-HKWD" CONTENT="set">
<p><a href="SET_setCCallocator_type.htm#set::allocator_type"><code><b>allocator_type</b></code></a><code><b> &#183; </b></code><a href="SET_setCCbegin.htm#set::begin"><code><b>begin</b></code></a><code><b> &#183; </b></code><a href="SET_setCCclear.htm#set::clear"><code><b>clear</b></code></a><code><b> &#183; </b></code><a href="SET_setCCconst_iterator.htm#set::const_iterator"><code><b>const_iterator</b></code></a><code><b> &#183; </b></code><a href="SET_setCCconst_reference.htm#set::const_reference"><code><
b>const_reference</b></code></a><code><b> &#183;
</b></code><a href="SET_setCCconst_reverse_iterator.htm#set::const_reverse_iterator"><code><b>const_reverse_iterator</b></code></a><code><b> &#183; </b></code><a href="SET_setCCcount.htm#set::count"><code><b>count</b></code></a><code><b> &#183; </b></code><a href="SET_setCCdifference_type.htm#set::difference_type"><code><b>difference_type</b></code></a><code><b> &#183; </b></code><a href="SET_setCCempty.htm#set::empty"><code><b>empty</b></code></a><code><b> &#183; </b></code><a href="SET_setCCend.htm#set::e
nd"><code><b>end</b></code></a><code><b> &#183; </b></code><a href="SET_setCCequal_range.htm#set::equal_range"><code><b>equal_range</b></code></a><code><b> &#183; </b></code><a href="SET_setCCerase.htm#set::erase"><code><b>erase</b></code></a><code><b> &#183;
</b></code><a href="SET_setCCfind.htm#set::find"><code><b>find</b></code></a><code><b> &#183; </b></code><a href="SET_setCCget_allocator.htm#set::get_allocator"><code><b>get_allocator</b></code></a><code><b> &#183; </b></code><a href="SET_setCCinsert.htm#set::insert"><code><b>insert</b></code></a><code><b> &#183; </b></code><a href="SET_setCCiterator.htm#set::iterator"><code><b>iterator</b></code></a><code><b> &#183; </b></code><a href="SET_setCCkey_comp.htm#set::key_comp"><code><b>key_comp</b></code></a><c
ode><b> &#183; </b></code><a href="SET_setCCkey_compare.htm#set::key_compare"><code><b>key_compare</b></code></a><code><b> &#183; </b></code><a href="SET_setCCkey_type.htm#set::key_type"><code><b>key_type</b></code></a><code><b> &#183;
</b></code><a href="SET_setCClower_bound.htm#set::lower_bound"><code><b>lower_bound</b></code></a><code><b> &#183; </b></code><a href="SET_setCCset.htm#set::set"><code><b>set</b></code></a><code><b> &#183; </b></code><a href="SET_setCCmax_size.htm#set::max_size"><code><b>max_size</b></code></a><code><b> &#183; </b></code><a href="SET_setCCrbegin.htm#set::rbegin"><code><b>rbegin</b></code></a><code><b> &#183; </b></code><a href="SET_setCCreference.htm#set::reference"><code><b>reference</b></code></a><code><b
> &#183; </b></code><a href="SET_setCCrend.htm#set::rend"><code><b>rend</b></code></a><code><b> &#183; </b></code><a href="SET_setCCreverse_iterator.htm#set::reverse_iterator"><code><b>reverse_iterator</b></code></a><code><b> &#183; </b></code><a href="SET_setCCsize.htm#set::size"><code><b>size</b></code></a><code><b> &#183;
</b></code><a href="SET_setCCsize_type.htm#set::size_type"><code><b>size_type</b></code></a><code><b> &#183; </b></code><a href="SET_setCCswap.htm#set::swap"><code><b>swap</b></code></a><code><b> &#183; </b></code><a href="SET_setCCupper_bound.htm#set::upper_bound"><code><b>upper_bound</b></code></a><code><b> &#183; </b></code><a href="SET_setCCvalue_comp.htm#set::value_comp"><code><b>value_comp</b></code></a><code><b> &#183; </b></code><a href="SET_setCCvalue_compare.htm#set::value_compare"><code><b>value_
compare</b></code></a><code><b> &#183; </b></code><a href="SET_setCCvalue_type.htm#set::value_type"><code><b>value_type</b></code></a><code><b> </b></code></p>
<pre><code>template&lt;class Key, class Pred = less&lt;Key&gt;, class A = allocator&lt;Key&gt; &gt;
    class <b>set</b> {
public:
    typedef Key <a href="SET_setCCkey_type.htm#set::key_type"><b>key_type</b></a>;
    typedef Pred <a href="SET_setCCkey_compare.htm#set::key_compare"><b>key_compare</b></a>;
    typedef Key <a href="SET_setCCvalue_type.htm#set::value_type"><b>value_type</b></a>;
    typedef Pred <a href="SET_setCCvalue_compare.htm#set::value_compare"><b>value_compare</b></a>;
    typedef A <a href="SET_setCCallocator_type.htm#set::allocator_type"><b>allocator_type</b></a>;
    typedef A::size_type <a href="SET_setCCsize_type.htm#set::size_type"><b>size_type</b></a>;
    typedef A::difference_type <a href="SET_setCCdifference_type.htm#set::difference_type"><b>difference_type</b></a>;
    typedef A::rebind&lt;value_type&gt;::other::const_reference <a href="SET_setCCreference.htm#set::reference"><b>reference</b></a>;
    typedef A::rebind&lt;value_type&gt;::other::const_reference <a href="SET_setCCconst_reference.htm#set::const_reference"><b>const_reference</b></a>;
    typedef T0 <a href="SET_setCCiterator.htm#set::iterator"><b>iterator</b></a>;
    typedef T1 <a href="SET_setCCconst_iterator.htm#set::const_iterator"><b>const_iterator</b></a>;
    typedef reverse_bidirectional_iterator&lt;iterator,
        value_type, reference, A::pointer,
            difference_type&gt; <a href="SET_setCCreverse_iterator.htm#set::reverse_iterator"><b>reverse_iterator</b></a>;
    typedef reverse_bidirectional_iterator&lt;const_iterator,
        value_type, const_reference, A::const_pointer,
            difference_type&gt; <a href="SET_setCCconst_reverse_iterator.htm#set::const_reverse_iterator"><b>const_reverse_iterator</b></a>;
    explicit <a href="SET_setCCset.htm#set::set"><b>set</b></a>(const Pred&amp; comp = Pred(), const A&amp; al = A());
    <a href="SET_setCCset.htm#set::set"><b>set</b></a>(const set&amp; x);
    <a href="SET_setCCset.htm#set::set"><b>set</b></a>(const value_type *first, const value_type *last,
        const Pred&amp; comp = Pred(), const A&amp; al = A());
    const_iterator <a href="SET_setCCbegin.htm#set::begin"><b>begin</b></a>() const;
    iterator <a href="SET_setCCend.htm#set::end"><b>end</b></a>() const;
    const_reverse_iterator <a href="SET_setCCrbegin.htm#set::rbegin"><b>rbegin</b></a>() const;
    const_reverse_iterator <a href="SET_setCCrend.htm#set::rend"><b>rend</b></a>() const;
    size_type <a href="SET_setCCsize.htm#set::size"><b>size</b></a>() const;
    size_type <a href="SET_setCCmax_size.htm#set::max_size"><b>max_size</b></a>() const;
    bool <a href="SET_setCCempty.htm#set::empty"><b>empty</b></a>() const;
    A <a href="SET_setCCget_allocator.htm#set::get_allocator"><b>get_allocator</b></a>() const;
    pair&lt;iterator, bool&gt; <a href="SET_setCCinsert.htm#set::insert"><b>insert</b></a>(const value_type&amp; x);
    iterator <a href="SET_setCCinsert.htm#set::insert"><b>insert</b></a>(iterator it, const value_type&amp; x);
    void <a href="SET_setCCinsert.htm#set::insert"><b>insert</b></a>(InIt first, InIt last);
    iterator <a href="SET_setCCerase.htm#set::erase"><b>erase</b></a>(iterator it);
    iterator <a href="SET_setCCerase.htm#set::erase"><b>erase</b></a>(iterator first, iterator last);
    size_type <a href="SET_setCCerase.htm#set::erase"><b>erase</b></a>(const Key&amp; key);
    void <a href="SET_setCCclear.htm#set::clear"><b>clear</b></a>();
    void <a href="SET_setCCswap.htm#set::swap"><b>swap</b></a>(set x);
    key_compare <a href="SET_setCCkey_comp.htm#set::key_comp"><b>key_comp</b></a>() const;
    value_compare <a href="SET_setCCvalue_comp.htm#set::value_comp"><b>value_comp</b></a>() const;
    const_iterator <a href="SET_setCCfind.htm#set::find"><b>find</b></a>(const Key&amp; key) const;
    size_type <a href="SET_setCCcount.htm#set::count"><b>count</b></a>(const Key&amp; key) const;
    const_iterator <a href="SET_setCClower_bound.htm#set::lower_bound"><b>lower_bound</b></a>(const Key&amp; key) const;
    const_iterator <a href="SET_setCCupper_bound.htm#set::upper_bound"><b>upper_bound</b></a>(const Key&amp; key) const;
    pair&lt;const_iterator, const_iterator&gt;
        <a href="SET_setCCequal_range.htm#set::equal_range"><b>equal_range</b></a>(const Key&amp; key) const;
protected:
    A allocator;
    };</code></pre>
<p>The template class describes an object that controls a varying-length sequence of elements of <b>type </b><code><b>const Key</b></code>. Each
element serves as both a sort key and a value. The sequence is represented in a way that permits lookup, insertion,
and removal of an arbitrary element with a number of operations proportional to the logarithm of the number of
elements in the sequence (logarithmic time). Moreover, inserting an element invalidates no iterators, and removing an
element invalidates only those iterators that point at the removed element.</p>
<p>The object orders the sequence it controls by calling a stored function object of type <code>Pred</code>. You access this stored
object by calling the member function <a href="SET_setCCkey_comp.htm#set::key_comp"><code>key_comp</code></a><code>()</code>. Such a function object must impose a total order on sort keys. For
any element <code>x</code> that precedes <code>y</code> in the sequence, <code>key_comp()(y, x)</code> is false. (For the default function object
<a href="FUNCTIO2_less.htm#less"><code>less</code></a><code>&lt;Key&gt;</code>, sort keys never decrease in value.) Unlike template class <a href="SET_multiset.htm#multiset"><code>multiset</code></a>, an object of template class <code>set</code>
ensures that <code>key_comp()(x, y)</code> is true. (Each key is unique.)</p>
<p>The object allocates and frees storage for the sequence it controls through a protected object named <a name="set::allocator"><code><b>allocator</b></code></a>, of
<b>class </b><code><b>A</b></code>. Such an <a href="MEMORY_allocator.htm#allocator object">allocator object</a> must have the same external interface as an object of template class <a href="MEMORY_allocator.htm#allocator"><code>allocator</code></a>.
Note that <code>allocator</code> is not copied when the object is assigned.</p>
</body>
</html>

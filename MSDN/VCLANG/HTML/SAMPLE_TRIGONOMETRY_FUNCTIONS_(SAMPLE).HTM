<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Trigonometry Functions (Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_Trigonometry_Functions">Trigonometry Functions (Sample)</a></h2>
<p>The sample code below illustrates how to use trigonometry (<code>sin, cos, tan</code>, and so on) functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;valarray&gt;</p>
<b>Prototype:</b><br>
<pre><code>
// acos
template&lt;class T&gt;
     inline valarray&lt;T&gt; acos(const valarray&lt;T&gt;&amp; x);

// asin
template&lt;class T&gt;
     inline valarray&lt;T&gt; asin(const valarray&lt;T&gt;&amp; x);

// atan
template&lt;class T&gt;
     inline valarray&lt;T&gt; atan(const valarray&lt;T&gt;&amp; x);

// atan2
template&lt;class T&gt;
     inline valarray&lt;T&gt; atan2(const valarray&lt;T&gt;&amp; x, const valarray&lt;T&gt;&amp; y);

template&lt;class T&gt;
     inline valarray&lt;T&gt; atan2(const valarray&lt;T&gt; x, const T&amp; y);

template&lt;class T&gt;
     inline valarray&lt;T&gt; atan2(const T&amp; x, const valarray&lt;T&gt;&amp; y);

// cos
template&lt;class T&gt;
     inline valarray&lt;T&gt; cos(const valarray&lt;T&gt;&amp; x);

// cosh
template&lt;class T&gt;
     inline valarray&lt;T&gt; cosh(const valarray&lt;T&gt;&amp; x);

// sin
template&lt;class T&gt;
     inline valarray&lt;T&gt; sin(const valarray&lt;T&gt;&amp; x);

// sinh
template&lt;class T&gt;
     inline valarray&lt;T&gt; sinh(const valarray&lt;T&gt;&amp; x);

// tan
template&lt;class T&gt;
     inline valarray&lt;T&gt; tan(const valarray&lt;T&gt;&amp; x);

// tanh
template&lt;class T&gt;
     inline valarray&lt;T&gt; tanh(const valarray&lt;T&gt;&amp; x);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 This article illustrates the use of STL trigonometry functions through sample code.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// main.cpp : Illustrates the use of STL trigonometry functions.
//
// Functions:
//
//  acos, asin, atan, atan2, cos, cosh, sin, sinh, tan, tanh
//////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;                 // for i/o functions
#include &lt;valarray&gt;                 // for valarray
#include &lt;cmath&gt;                    // for trigonometry functions

using namespace std ;

#define ARRAY_SIZE  3               // array size

void main()
{
    // Initialize val_array to values -1, 0 and 1.
    valarray&lt;double&gt; val_array(ARRAY_SIZE);
    for (int i = 0; i &lt; ARRAY_SIZE; i++)
        val_array[i] = i - 1;

    // Display the size of val_array.
    cout &lt;&lt; "Size of val_array = " &lt;&lt; val_array.size() &lt;&lt; endl;

    // Display the values of val_array before calling any trigonometry
    // functions.
    cout &lt;&lt; "The values in val_array:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; val_array[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // Initialize rev_valarray that is the reverse of val_array.
    valarray&lt;double&gt; rev_valarray(ARRAY_SIZE);
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        rev_valarray[i] = val_array[ARRAY_SIZE - i - 1];

    // Display the size of rev_valarray.
    cout &lt;&lt; "Size of rev_valarray = " &lt;&lt; rev_valarray.size() &lt;&lt; endl;

    // Display the values of rev_valarray.
    cout &lt;&lt; "The values in rev_valarray:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rev_valarray[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // rvalue_array to hold the return value from calling the trigonometry
    // functions.
    valarray&lt;double&gt; rvalue_array;

    // ----------------------------------------------------------------
    // acos() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = acos(val_array);
    cout &lt;&lt; "The result after calling acos():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // asin() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = asin(val_array);
    cout &lt;&lt; "The result after calling asin():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // atan() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = atan(val_array);
    cout &lt;&lt; "The result after calling atan():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // atan2() - display the result of rvalue_array
    // ----------------------------------------------------------------

    // This template function returns an object of class valarray&lt;T&gt;,
    // each of whose elements at I is the arctangent of x[I] / y[I].
    rvalue_array = atan2(val_array, rev_valarray);
    cout &lt;&lt; "The result after calling atan2(val_array, rev_valarray):"
         &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I the arctangent of
    // x[I] / y.
    rvalue_array = atan2(val_array, 3.1416);
    cout &lt;&lt; "The result after calling atan2(val_array, 3.1416):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I the arctangent of
    // x / y[I].
    rvalue_array = atan2(3.1416, val_array);
    cout &lt;&lt; "The result after calling atan2(3.1416, val_array):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // cos() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = cos(val_array);
    cout &lt;&lt; "The result after calling cos():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // cosh() - display the result of rvalue_array
    // ----------------------------------------------------------------
    rvalue_array = cosh(val_array);
    cout &lt;&lt; "The result after calling cosh():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // sin() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = sin(val_array);
    cout &lt;&lt; "The result after calling sin():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // sinh() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = sinh(val_array);
    cout &lt;&lt; "The result after calling sinh():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // tan() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = tan(val_array);
    cout &lt;&lt; "The result after calling tan():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // tanh() - display the result of val_array
    // ----------------------------------------------------------------
    rvalue_array = tanh(val_array);
    cout &lt;&lt; "The result after calling tanh():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
Size of val_array = 3
The values in val_array:
-1    0    1

Size of rev_valarray = 3
The values in rev_valarray:
1    0    -1

The result after calling acos():
3.14159     1.5708     0

The result after calling asin():
-1.5708     0     1.5708

The result after calling atan():
-0.785398     0     0.785398

The result after calling atan2(val_array, rev_valarray):
-0.785398     0     2.35619

The result after calling atan2(val_array, 3.1416):
-0.308168     0     0.308168

The result after calling atan2(3.1416, val_array):
1.87896     1.5708     1.26263

The result after calling cos():
0.540302     1     0.540302

The result after calling cosh():
1.54308     1     1.54308

The result after calling sin():
-0.841471     0     0.841471

The result after calling sinh():
-1.1752     0     1.1752

The result after calling tan():
-1.55741     0     1.55741

The result after calling tanh():
-0.761594     0     0.761594
</code></pre>

</body>
</html>

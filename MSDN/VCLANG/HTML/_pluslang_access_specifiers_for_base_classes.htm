<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Access Specifiers for Base Classes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_access_specifiers_for_base_classes"></a><sup></sup>Access Specifiers for Base Classes</h1>
<p>
Two factors control which members of a base class are accessible in a derived class; these same factors control access to the inherited members in the derived class:
<ul type=disc>
<li>
Whether the derived class declares the base class using the <b>public</b> access specifier in the <i>class-head</i> (<i>class-head</i> is described in Syntax in <a href="_pluslang_defining_class_types.htm">Defining Class Types</a> in Chapter 8).<br><br></li>
<li>
What the access to the member is in the base class.</li>
</ul>
<p>
Table 10.2 shows the interaction between these factors and how to determine base-class member access.</p>
<p class=label>
<b><a name="_pluslang_table_10..2"></a>Table 10.2&nbsp;&nbsp;&nbsp;Member Access in Base Class</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>private</b></td>
<td class=label width=32%><b>protected</b></td>
<td class=label width=34%><b>public</b></td>
</tr>
<tr valign=top>
<td width=34%>Always inaccessible<br>
regardless of derivation<br>
access</td>
<td width=32%>Private in derived class if you use private derivation</td>
<td width=34%>Private in derived class if you use private derivation</td>
</tr>
<tr valign=top>
<td width=34%></td>
<td width=32%>Protected in derived class if you use protected derivation</td>
<td width=34%>Protected in derived class if you use protected derivation</td>
</tr>
<tr valign=top>
<td width=34%></td>
<td width=32%>Protected in derived class if you use public derivation</td>
<td width=34%>Public in derived class if you use public derivation</td>
</tr>
</table><br>
<p>
The following example illustrates this:</p>
<pre><code>class BaseClass
{
public:
 &nbsp;&nbsp; int PublicFunc();&nbsp;&nbsp;&nbsp; // Declare a public member.
protected:
 &nbsp;&nbsp; int ProtectedFunc(); // Declare a protected member.
private:
 &nbsp;&nbsp; int PrivateFunc();&nbsp;&nbsp; // Declare a private member.
};

// Declare two classes derived from BaseClass.
class DerivedClass1 : public BaseClass
{ };

class DerivedClass2 : private BaseClass
{ };
</code></pre>
<p>
In <code>DerivedClass1</code>, the member function <code>PublicFunc</code> is a public member and <code>ProtectedFunc</code> is a protected member because <code>BaseClass</code> is a public base class. <code>PrivateFunc</code> is private to <code>BaseClass</code>, and it is inaccessible to any derived classes.</p>
<p>
In <code>DerivedClass2</code>, the functions <code>PublicFunc</code> and <code>ProtectedFunc</code> are considered private members because <code>BaseClass</code> is a private base class. Again, <code>PrivateFunc</code> is private to <code>BaseClass</code>, and it is inaccessible to any derived classes.</p>
<p>
You can declare a derived class without a base-class access specifier. In such a case, the derivation is considered private if the derived class declaration uses the <b>class</b> keyword. The derivation is considered public if the derived class declaration uses the <b>struct</b> keyword. For example, the following code:</p>
<pre><code>class Derived : Base
...
</code></pre>
<p>
is equivalent to:</p>
<pre><code>class Derived : private Base
...
</code></pre>
<p>
Similarly, the following code:</p>
<pre><code>struct Derived : Base
...
</code></pre>
<p>
is equivalent to:</p>
<pre><code>struct Derived : public Base
...
</code></pre>
<p>
Note that members declared as having private access are not accessible to functions or derived classes unless those functions or classes are declared using the <b>friend</b> declaration in the base class.</p>
<p>
A <b>union</b> type cannot have a base class.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When specifying a private base class, it is advisable to explicitly use the <b>private</b> keyword so users of the derived class understand the member access.</p>
</font></BODY>
</HTML>

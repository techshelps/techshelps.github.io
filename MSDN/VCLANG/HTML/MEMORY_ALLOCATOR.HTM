<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>allocator</title></head>
<body bgcolor=white>

<h2><a name="allocator">allocator</a></h2>
<META NAME="MS-HKWD" CONTENT="allocator">
<pre><code>template&lt;class T&gt;
    class <b>allocator</b> {
    typedef size_t <a href="MEMORY_allocatorCCsize_type.htm#allocator::size_type"><b>size_type</b></a>;
    typedef ptrdiff_t <a href="MEMORY_allocatorCCdifference_type.htm#allocator::difference_type"><b>difference_type</b></a>;
    typedef T *<a href="MEMORY_allocatorCCpointer.htm#allocator::pointer"><b>pointer</b></a>;
    typedef const T *<a href="MEMORY_allocatorCCconst_pointer.htm#allocator::const_pointer"><b>const_pointer</b></a>;
    typedef T&amp; <a href="MEMORY_allocatorCCreference.htm#allocator::reference"><b>reference</b></a>;
    typedef const T&amp; <a href="MEMORY_allocatorCCconst_reference.htm#allocator::const_reference"><b>const_reference</b></a>;
    typedef T <a href="MEMORY_allocatorCCvalue_type.htm#allocator::value_type"><b>value_type</b></a>;
    pointer <a href="MEMORY_allocatorCCaddress.htm#allocator::address"><b>address</b></a>(reference x) const;
    const_pointer <a href="MEMORY_allocatorCCaddress.htm#allocator::address"><b>address</b></a>(const_reference x) const;
    <a href="MEMORY_allocatorCCallocator.htm#allocator::allocator"><b>allocator</b></a>();
    allocator&lt;T&gt;&amp; <a href="MEMORY_allocatorCCoperatorE.htm#allocator::operator="><b>operator=</b></a>(const allocator&lt;T&gt;);
    pointer <a href="MEMORY_allocatorCCallocate.htm#allocator::allocate"><b>allocate</b></a>(size_type n, const void *hint);
    void <a href="MEMORY_allocatorCCdeallocate.htm#allocator::deallocate"><b>deallocate</b></a>(pointer p, size_type n);
    void <a href="MEMORY_allocatorCCconstruct.htm#allocator::construct"><b>construct</b></a>(pointer p, const T&amp; val);
    void <a href="MEMORY_allocatorCCdestroy.htm#allocator::destroy"><b>destroy</b></a>(pointer p);
    size_type <a href="MEMORY_allocatorCCmax_size.htm#allocator::max_size"><b>max_size</b></a>() const;
    };</code></pre>
<p>The template class describes an object that manages storage allocation and freeing for arrays of objects of type <code>T</code>. An 
object of class <code>allocator</code> is the default <a name="allocator object"><b>allocator object</b></a> specified in the constructors for several container template 
classes in the Standard C++ library.</p>
<p>Template class <code>allocator</code> supplies several type definitions that are rather pedestrian. They hardly seem worth 
defining. But another class with the same members might choose more interesting alternatives. Constructing a container 
with an allocator object of such a class gives individual control over allocation and freeing of elements controlled by that 
container.</p>
<p>For example, an allocator object might allocate storage on a <a name="private heap"><b>private heap</b></a>. Or it might allocate storage on a <a name="far heap"><b>far heap</b></a>, 
requiring nonstandard pointers to access the allocated objects. Or it might specify, through the type definitions it 
supplies, that elements be accessed through special <a name="accessor objects"><b>accessor objects</b></a> that manage <a name="shared memory"><b>shared memory</b></a>, or perform 
automatic <a name="garbage collection"><b>garbage collection</b></a>. Hence, a class that allocates storage using an allocator object should always use these types 
for declaring pointer and reference objects (as do the containers in the Standard C++ library).</p>
<p>Thus, an allocator defines the types (among others):</p>
<ul>
<li><a href="MEMORY_allocatorCCpointer.htm#allocator::pointer"><code>pointer</code></a> -- behaves like a pointer to <code>T</code> </li>
<li><a href="MEMORY_allocatorCCconst_pointer.htm#allocator::const_pointer"><code>const_pointer</code></a> -- behaves like a const pointer to <code>T</code> </li>
<li><a href="MEMORY_allocatorCCreference.htm#allocator::reference"><code>reference</code></a> -- behaves like a reference to <code>T</code> </li>
<li><a href="MEMORY_allocatorCCconst_reference.htm#allocator::const_reference"><code>const_reference</code></a> -- behaves like a const reference to <code>T</code> </li>
</ul>
<p>These types specify the form that pointers and references must take for allocated elements. 
(<code>allocator::types&lt;T&gt;::pointer</code> is not necessarily the same as <code>T *</code> for all allocator objects, even though it has 
this obvious definition for class <code>allocator</code>.)</p>
<p>In this <a href="INDEX_Table_of_Contents.htm#implementation">implementation</a>, if a translator does not support member template functions, it omits the type-mapping member 
template class:</p>
<pre><code>template&lt;class U&gt;
    struct <b>rebind</b> {
    typedef allocator&lt;U&gt; <b>other</b>;
    };</code></pre>
<p>Thus, how you write an allocator is constrained. A container may need to allocate and free objects other than type <code>T</code>, 
but cannot use the <code>rebind</code> mechanism to derive a suitable allocator object. This means you cannot write an allocator that 
uses any pointer or reference types that differ from those used by <code>allocator</code>, and you must supply the member 
function:</p>
<pre><code>char *_Charalloc(size_type n);</code></pre>
<p>which allocates an object of size <code>n</code> bytes and returns a pointer to its first byte.</p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declarators and Variable Declarations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_declarators_and_variable_declarations"></a><sup></sup>Declarators and Variable Declarations</h1>
<p>
The rest of this chapter describes the form and meaning of declarations for variable types summarized in this list. In particular, the remaining sections explain how to declare the following: </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Type of Variable</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="_clang_simple_variable_declarations.htm">Simple variables</a> </td>
<td width=72%>Single-value variables with integral or floating-point type</td>
</tr>
<tr valign=top>
<td width=28%><a href="_clang_array_declarations.htm">Arrays</a> </td>
<td width=72%>Variables composed of a collection of elements with the same type</td>
</tr>
<tr valign=top>
<td width=28%><a href="_clang_pointer_declarations.htm">Pointers</a> </td>
<td width=72%>Variables that point to other variables and contain variable locations (in the form of addresses) instead of values</td>
</tr>
<tr valign=top>
<td width=28%><a href="_clang_c_enumeration_declarations.htm">Enumeration variables</a> </td>
<td width=72%>Simple variables with integral type that hold one value from a set of named integer constants</td>
</tr>
<tr valign=top>
<td width=28%><a href="_clang_structure_declarations.htm">Structures</a> </td>
<td width=72%>Variables composed of a collection of values that can have different types</td>
</tr>
<tr valign=top>
<td width=28%><a href="_clang_union_declarations.htm">Unions</a> </td>
<td width=72%>Variables composed of several values of different types that occupy the same storage space</td>
</tr>
</table><br>
<p>
A declarator is the part of a declaration that specifies the name that is to be introduced into the program. It can include modifiers such as <b>*</b> (pointer-to) and any of the Microsoft calling-convention keywords.</p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
In the declarator</p>
<pre><code>__declspec(thread) char *var;
</code></pre>
<p>
<code>char</code> is the type specifier, <code>__declspec(thread)</code> and <code>*</code> are the modifiers, and <code>var</code> is the identifier’s name. </p>
<p>
<b>END Microsoft Specific</b></p>
<p>
You use declarators to declare arrays of values, pointers to values, and functions returning values of a specified type. Declarators appear in the array and pointer declarations described later in this chapter. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>declarator</i> :</p>
<p class=indent>
<i>pointer</i> <sub>opt</sub> <i>direct-declarator</i></p>
<p class=dt>
<i>direct-declarator</i> :</p>
<p class=indent>
<i>identifier</i><br>
<b>(</b> <i>declarator</i> <b>)</b><br>
<i>direct-declarator</i> <b>[</b> <i>constant-expression</i> <sub>opt</sub> <b>]</b><br>
<i>direct-declarator</i> <b>(</b> <i>parameter-type-list</i> <b>)</b><br>
<i>direct-declarator</i> <b>(</b> <i>identifier-list</i> <sub>opt</sub> <b>)</b></p>
<p class=dt>
<i>pointer</i> :</p>
<p class=indent>
<b>*</b> <i>type-qualifier-list</i> <sub>opt</sub><br>
<b>*</b> <i>type-qualifier-list</i> <sub>opt</sub> <i>pointer</i></p>
<p class=dt>
<i>type-qualifier-list</i> :</p>
<p class=indent>
<i>type-qualifier<br>
type-qualifier-list type-qualifier</i></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;See the syntax for <i>declaration</i> in <a href="_clang_overview_of_declarations.htm">Overview of Declarations</a>, or see Appendix A, <a href="_clang_c_language_syntax_summary.htm">C Language Syntax Summary</a>, for the syntax that references a <i>declarator</i>. </p>
<p>
When a declarator consists of an unmodified identifier, the item being declared has a base type. If an asterisk (<b>*</b>) appears to the left of an identifier, the type is modified to a pointer type. If the identifier is followed by brackets (<b>[ ]</b>), the type is modified to an array type. If the identifier is followed by parentheses, the type is modified to a function type. For more information about interpreting precedence within declarations, see <a href="_clang_interpreting_more_complex_declarators.htm">Interpreting More Complex Declarators</a>. </p>
<p>
Each declarator declares at least one identifier. A declarator must include a type specifier to be a complete declaration. The type specifier gives the type of the elements of an array type, the type of object addressed by a pointer type, or the return type of a function. </p>
<p>
<a href="_clang_array_declarations.htm">Array</a> and <a href="_clang_pointer_declarations.htm">pointer</a> declarations are discussed in more detail later in this chapter. The following examples illustrate a few simple forms of declarators:</p>
<pre><code>int list[20]; /* Declares an array of 20 int values named list */
char *cp;&nbsp;&nbsp;&nbsp;&nbsp; /* Declares a pointer to a char value */
double func( void ); /* Declares a function named func, with no 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arguments, that returns a double value */
int *aptr[10]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Declares an array of 10 pointers */
</code></pre>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The Microsoft C compiler does not limit the number of declarators that can modify an arithmetic, structure, or union type. The number is limited only by available memory. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

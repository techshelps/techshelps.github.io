<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The thread Attribute</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_the_thread_attribute"></a><sup></sup>The thread Attribute</h1>
<p>
Thread Local Storage (TLS) is the mechanism by which each thread in a multithreaded process allocates storage for thread-specific data. In standard multithreaded programs, data is shared among all threads of a given process, whereas thread local storage is the mechanism for allocating per-thread data. For a complete discussion of threads, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Multithreading_Topics">
</object><a href=JavaScript:alink_1.Click()>Multithreading Topics</a>, and see the <i>API Programmer’s Reference</i> in the Microsoft Win32® Software Development Kit.</p>
<p>
The C and C++ languages include the extended storage-class attribute, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_langref_thread">
</object><a href=JavaScript:alink_2.Click()>thread</a>. The <b>thread</b> attribute must be used with the <b>__declspec</b> keyword to declare a thread variable. For example, the following code declares an integer thread local variable and initializes it with a value:</p>
<pre><code>__declspec( thread ) int tls_i = 1;
</code></pre>
<p>
You must observe these guidelines when declaring thread local objects and variables:
<ul type=disc>
<li>
You can apply the <b>thread</b> attribute only to data declarations and definitions, and classes that do not have member functions. It cannot be used on function declarations or definitions. For example, the following code generates a compiler error:<pre><code>#define Thread    __declspec( thread )
Thread void func();     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error
</code></pre>
</li>
<li>
You can specify the <b>thread</b> attribute only on data items with static storage duration. This includes global data objects (both <b>static</b> and <b>extern</b>), local static objects, and static data members of classes. You cannot declare automatic data objects with the <b>thread</b> attribute. For example, the following code generates compiler errors:<pre><code>#define Thread    __declspec( thread )
void func1()
{
 &nbsp;&nbsp; Thread int tls_i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error
}

int func2( Thread int tls_i )&nbsp;&nbsp;&nbsp; // Error
{
 &nbsp;&nbsp; return tls_i;
}
</code></pre>
</li>
<li>
You must use the <b>thread</b> attribute for the declaration and the definition of a thread local object, whether the declaration and definition occur in the same file or separate files. For example, the following code generates an error:<pre><code>#define Thread    __declspec( thread )
extern int tls_i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This generates an error, because the
int Thread tls_i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // declaration and the definition differ.
</code></pre>
</li>
<li>
You cannot use the <b>thread</b> attribute as a type modifier. For example, the following code generates a compiler error:<pre><code>char __declspec( thread ) *ch;     &nbsp;&nbsp; // Error
</code></pre>
</li>
<li>
Classes can be instantiated using <b>thread</b> only if they contain no member functions. The <b>thread</b> attribute is ignored if no object is declared as part of the class declaration. For example:<pre><code>__declspec(thread) class X {
public:
int I; } x;    // x is a thread object

X y;                // y is not a thread object
</code></pre>
<p class=tl>
Because the declaration of objects that use the <b>thread</b> attribute is permitted, these two examples are semantically equivalent:</P><pre><code>#define Thread    __declspec( thread )
Thread class B
{
// Code
} BObject;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Okay--BObject declared thread local.

class B
{
// Code
} 
Thread B BObject;&nbsp;&nbsp;&nbsp;&nbsp; // Okay--BObject declared thread local.
</code></pre>
</li>
<li>
Standard C permits initialization of an object or variable with an expression involving a reference to itself, but only for objects of nonstatic extent. Although C++ normally permits such dynamic initialization of an object with an expression involving a reference to itself, this type of initialization is not permitted with thread local objects. For example:<pre><code>#define Thread    __declspec( thread )
Thread int tls_i = tls_i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // C and C++ error 
int j = j;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Okay in C++; C error
Thread int tls_i = sizeof( tls_i )&nbsp;&nbsp; // Okay in C and C++
</code></pre>
<p class=tl>
Note that a <b>sizeof</b> expression that includes the object being initialized does not constitute a reference to itself and is allowed in C and C++.</P></li>
</ul>
</font></BODY>
</HTML>

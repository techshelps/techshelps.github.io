<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Extraction Operators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_using_extraction_operators"></a><sup></sup>Using Extraction Operators</h1>
<p>
The extraction operator (<b>&gt;&gt;</b>), which is preprogrammed for all standard C++ data types, is the easiest way to get bytes from an input stream object.</p>
<p>
Formatted text input extraction operators depend on white space to separate incoming data values. This is inconvenient when a text field contains multiple words or when commas separate numbers. In such a case, one alternative is to use the unformatted input member function <b>getline</b> to read a block of text with white space included, then parse the block with special functions. Another method is to derive an input stream class with a member function such as <code>GetNextToken</code>, which can call <b>istream</b> members to extract and format character data.</p>
</font></BODY>
</HTML>

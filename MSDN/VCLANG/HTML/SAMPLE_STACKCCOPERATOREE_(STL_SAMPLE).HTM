<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>stack::operator== (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stackCCoperatorEE">stack::operator== (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>stack::operator==</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;stack&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _C, class _A&gt;
     bool stack::bool operator==(const stack&lt;_TYPE, _C, _A&gt;&amp; _X) const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The stack::operator== function returns true if both stacks have equal elements arranged in the same sequence. The stack::operator== function always returns false if the two stacks are of different size.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StackEqual.cpp :  Illustrates how to use the stack::operator==
//                   function to determine if two stacks are equal.
//
// Functions:
//
//    operator== :  Returns true if both stacks are the same.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;stack&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef stack&lt;double&gt; STACK_DOUBLE;

void main()
{
   STACK_DOUBLE stack1,stack2;

   // Add item 4.0 to Stack1.
   cout &lt;&lt; "stack1.push(4.0)  s1=[4.0]" &lt;&lt; endl;
   stack1.push(4.0);

   // Add item 3.0 to Stack1. Current Stack1 contains items 3.0 (top)
   // 4.0 (bottom).
   cout &lt;&lt; "stack1.push(3.0)  s1=[3.0 4.0]" &lt;&lt; endl;
   stack1.push(3.0);

   // Add item 4.0 to Stack2.
   cout &lt;&lt; "stack2.push(4.0)  s2=[4.0]" &lt;&lt; endl;
   stack2.push(4.0);

   // Compare Stack1 and Stack2. Should return False.
   cout &lt;&lt; "stack1==stack2 is " &lt;&lt;
      ((stack1==stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Add item 6.0 to Stack2. Current Stack2 contains items 6.0 (top)
   // 4.0 (bottom)
   cout &lt;&lt; "stack2.push(6.0)  s2=[6.0 4.0]" &lt;&lt; endl;
   stack2.push(6.0);

   // Compare Stack1 and Stack2. Should return False.
   cout &lt;&lt; "stack1==stack2 is " &lt;&lt;
      ((stack1==stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Keep adding item 8.0 to Stack2. Current Stack2 contains items
   // 8.0 (top), 6.0 and 4.0 (bottom).
   cout &lt;&lt; "stack2.push(8.0)  s2=[8.0 6.0 4.0]" &lt;&lt; endl;
   stack2.push(8.0);

   // Compare Stack1 and Stack2. Should return False.
   cout &lt;&lt; "stack1==stack2 is " &lt;&lt;
      ((stack1==stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Delete the top item from Stack2. Current Stack2 contains items
   // 6.0 (top) and 4.0 (bottom).
   cout &lt;&lt; "stack2.pop()      s2=[6.0 4.0]" &lt;&lt; endl;
   stack2.pop();

   // Delete another item from Stack2. Current Stack2 contains item 4.0.
   cout &lt;&lt; "stack2.pop()      s2=[4.0]" &lt;&lt; endl;
   stack2.pop();

   // Add item 3.0 to Stack2. Current Stack2 contains item 3.0 (top) and
   // 4.0 (bottom).
   cout &lt;&lt; "stack2.push(3.0)  s2=[3.0 4.0]" &lt;&lt; endl;
   stack2.push(3.0);

   // Compare Stack2 and Stack2. Should return True.
   cout &lt;&lt; "stack1==stack2 is " &lt;&lt;
      ((stack1==stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;

   // Delete the top item from Stack2. Current Stack2 contains 4.0.
   cout &lt;&lt; "stack2.pop()      s2=[4.0]" &lt;&lt; endl;
   stack2.pop();

   // Delete another item from Stack2. Stack2 should be empty.
   cout &lt;&lt; "stack2.pop()      s2=[]" &lt;&lt; endl;
   stack2.pop();

   // Push item 8.0 to Stack2.
   cout &lt;&lt; "stack2.push(8.0)  s2=[8.0]" &lt;&lt; endl;
   stack2.push(8.0);

   // Compare Stack1 and Stack2. Should return False.
   cout &lt;&lt; "stack1==stack2 is " &lt;&lt;
      ((stack1==stack2)? "True": "False") &lt;&lt; endl &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
stack1.push(4.0)  s1=[4.0]
stack1.push(3.0)  s1=[3.0 4.0]
stack2.push(4.0)  s2=[4.0]
stack1==stack2 is False

stack2.push(6.0)  s2=[6.0 4.0]
stack1==stack2 is False

stack2.push(8.0)  s2=[8.0 6.0 4.0]
stack1==stack2 is False

stack2.pop()      s2=[6.0 4.0]
stack2.pop()      s2=[4.0]
stack2.push(3.0)  s2=[3.0 4.0]
stack1==stack2 is True

stack2.pop()      s2=[4.0]
stack2.pop()      s2=[]
stack2.push(8.0)  s2=[8.0]
stack1==stack2 is False
</code></pre>

</body>
</html>

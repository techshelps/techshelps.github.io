<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C Keywords</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_c_keywords"></a><sup></sup>C Keywords</h1>
<p>
“Keywords” are words that have special meaning to the C compiler. In translation phases 7 and 8, an identifier cannot have the same spelling and case as a C keyword. (See a description of <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_Phases_of_Translation">
</object><a href=JavaScript:alink_1.Click()>translation phases</a> in the <i>Preprocessor Reference</i>; for information on identifiers, see <a href="_clang_c_identifiers.htm">Identifiers</a>.) The C language uses the following keywords: </p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td width=22%><b>auto</b></td>
<td width=26%><b>double</b></td>
<td width=26%><b>int</b></td>
<td width=26%><b>struct</b></td>
</tr>
<tr valign=top>
<td width=22%><b>break</b></td>
<td width=26%><b>else</b></td>
<td width=26%><b>long</b></td>
<td width=26%><b>switch</b></td>
</tr>
<tr valign=top>
<td width=22%><b>case</b></td>
<td width=26%><b>enum</b></td>
<td width=26%><b>register</b></td>
<td width=26%><b>typedef</b></td>
</tr>
<tr valign=top>
<td width=22%><b>char</b></td>
<td width=26%><b>extern</b></td>
<td width=26%><b>return</b></td>
<td width=26%><b>union</b></td>
</tr>
<tr valign=top>
<td width=22%><b>const</b></td>
<td width=26%><b>float</b></td>
<td width=26%><b>short</b></td>
<td width=26%><b>unsigned</b></td>
</tr>
<tr valign=top>
<td width=22%><b>continue</b></td>
<td width=26%><b>for</b></td>
<td width=26%><b>signed</b></td>
<td width=26%><b>void</b></td>
</tr>
<tr valign=top>
<td width=22%><b>default</b></td>
<td width=26%><b>goto</b></td>
<td width=26%><b>sizeof</b></td>
<td width=26%><b>volatile</b></td>
</tr>
<tr valign=top>
<td width=22%><b>do</b></td>
<td width=26%><b>if</b></td>
<td width=26%><b>static</b></td>
<td width=26%><b>while</b></td>
</tr>
</table><br>
<p>
You cannot redefine keywords. However, you can specify text to be substituted for keywords before compilation by using C <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_preprocessor_directives">
</object><a href=JavaScript:alink_2.Click()>preprocessor directives</a>. </p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The ANSI C standard allows identifiers with two leading underscores to be reserved for compiler implementations. Therefore, the Microsoft convention is to precede Microsoft-specific keyword names with double underscores. These words cannot be used as identifier names. For a description of the ANSI rules for naming identifiers, including the use of double underscores, see <a href="_clang_c_identifiers.htm">Identifiers</a>. </p>
<p>
The following keywords and special identifiers are recognized by the Microsoft C compiler:</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td width=25%><b>__asm</b></td>
<td width=25%><b>dllimport</b><sup>2</sup></td>
<td width=25%><b>__int8</b></td>
<td width=25%><b>naked</b><sup>2</sup></td>
</tr>
<tr valign=top>
<td width=25%><b>__based</b><sup>1</sup></td>
<td width=25%><b>__except</b></td>
<td width=25%><b>__int16</b></td>
<td width=25%><b>__stdcall</b></td>
</tr>
<tr valign=top>
<td width=25%><b>__cdecl</b></td>
<td width=25%><b>__fastcall</b></td>
<td width=25%><b>__int32</b></td>
<td width=25%><b>thread</b><sup>2</sup></td>
</tr>
<tr valign=top>
<td width=25%><b>__declspec</b></td>
<td width=25%><b>__finally</b></td>
<td width=25%><b>__int64</b></td>
<td width=25%><b>__try</b></td>
</tr>
<tr valign=top>
<td width=25%><b>dllexport</b><sup>2</sup></td>
<td width=25%><b>__inline</b></td>
<td width=25%><b>__leave</b></td>
<td width=25%></td>
</tr>
</table><br>
<p class=mini>
1. The <b>__based</b> keyword has limited uses for 32-bit target compilations.</p>
<p class=mini>
2. These are special identifiers when used with <b>__declspec</b>; their use in other contexts is not restricted.</p>
<p>
Microsoft extensions are enabled by default. To ensure that your programs are fully portable, you can disable Microsoft extensions by specifying the /Za option (compile for ANSI compatibility) during compilation. When you do this, Microsoft-specific keywords are disabled.</p>
<p>
When Microsoft extensions are enabled, you can use the keywords listed above in your programs. For ANSI compliance, most of these keywords are prefaced by a double underscore. The four exceptions, <b>dllexport</b>, <b>dllimport</b>, <b>naked</b>, and <b>thread</b>, are used only with <b>__declspec</b> and therefore do not require a leading double underscore. For backward compatibility, single-underscore versions of the rest of the keywords are supported.</p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

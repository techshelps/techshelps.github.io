<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Access Control and Static Members</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_access_control_and_static_members"></a><sup></sup>Access Control and Static Members</h1>
<p>
When you specify a base class as <b>private</b>, it affects only nonstatic members. Public static members are still accessible in the derived classes. However, accessing members of the base class using pointers, references, or objects can require a conversion, at which time access control is again applied. Consider the following example:</p>
<pre><code>class Base
{
public:
 &nbsp;&nbsp; int Print();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Nonstatic member.
 &nbsp;&nbsp; static int CountOf();&nbsp;&nbsp;&nbsp; // Static member.
};

// Derived1 declares Base as a private base class.
class Derived1 : private Base
{
};
// Derived2 declares Derived1 as a public base class.
class Derived2 : public Derived1
{
 &nbsp;&nbsp; int ShowCount();&nbsp;&nbsp;&nbsp; // Nonstatic member.
};
// Define ShowCount function for Derived2.
int Derived2::ShowCount()
{
 &nbsp; // Call static member function CountOf explicitly.
 &nbsp;&nbsp; int cCount = Base::CountOf();&nbsp;&nbsp;&nbsp;&nbsp; // OK.

 &nbsp; // Call static member function CountOf using pointer.
 &nbsp;&nbsp; cCount = this-&gt;CountOf();&nbsp; // Error. Conversion of
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; Derived2 * to Base * not
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; permitted.
 &nbsp;&nbsp; return cCount;
}
</code></pre>
<p>
In the preceding code, access control prohibits conversion from a pointer to <code>Derived2</code> to a pointer to <code>Base</code>. The <b>this</b> pointer is implicitly of type <code>Derived2 *</code>. To select the <code>CountOf</code> function, <b>this</b> must be converted to type <code>Base *</code>. Such a conversion is not permitted because <code>Base</code> is a private indirect base class to <code>Derived2</code>. Conversion to a private base class type is acceptable only for pointers to immediate derived classes. Therefore, pointers of type <code>Derived1 *</code> can be converted to type <code>Base *</code>.</p>
<p>
Note that calling the <code>CountOf</code> function explicitly, without using a pointer, reference, or object to select it, implies no conversion. Therefore, the call is allowed.</p>
<p>
Members and friends of a derived class, <i>T</i>, can convert a pointer to <i>T</i> to a pointer to a private direct base class of <i>T</i>.</p>
</font></BODY>
</HTML>

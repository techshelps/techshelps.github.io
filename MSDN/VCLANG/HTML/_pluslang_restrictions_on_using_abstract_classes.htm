<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Restrictions on Using Abstract Classes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_restrictions_on_using_abstract_classes"></a><sup></sup>Restrictions on Using Abstract Classes</h1>
<p>
Abstract classes cannot be used for:
<ul type=disc>
<li>
Variables or member data<br><br></li>
<li>
Argument types<br><br></li>
<li>
Function return types<br><br></li>
<li>
Types of explicit conversions</li>
</ul>
<p>
Another restriction is that if the constructor for an abstract class calls a pure virtual function, either directly or indirectly, the result is undefined. However, constructors and destructors for abstract classes can call other member functions. </p>
<p>
Pure virtual functions can be defined for abstract classes, but they can be called directly only by using the syntax:</p>
<p>
<i>abstract-class-name</i> <b>::</b> <i>function-name</i><b>( )</b></p>
<p>
This helps when designing class hierarchies whose base class(es) include pure virtual destructors, because base class destructors are always called in the process of destroying an object. Consider the following example:</p>
<pre><code>#include &lt;iostream.h&gt;

// Declare an abstract base class with a pure virtual destructor.
class base
{
public:
 &nbsp;&nbsp; base() {}
 &nbsp;&nbsp; virtual ~base()=0;
};

// Provide a definition for destructor.
base::~base()
{
}

class derived:public base
{
public:
 &nbsp;&nbsp; derived() {}
 &nbsp;&nbsp; ~derived(){}
};

void main()
{
 &nbsp;&nbsp; derived *pDerived = new derived;

 &nbsp;&nbsp; delete pDerived;
}
</code></pre>
<p>
When the object pointed to by <code>pDerived</code> is deleted, the destructor for class <code>derived</code> is called and then the destructor for class <code>base</code> is called. The empty implementation for the pure virtual function ensures that at least some implementation exists for the function.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the preceding example, the pure virtual function <code>base::~base</code> is called implicitly from <code>derived::~derived</code>. It is also possible to call pure virtual functions explicitly using a fully qualified member-function name.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Member Functions in Nested Classes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_member_functions_in_nested_classes"></a><sup></sup>Member Functions in Nested Classes</h1>
<p>
Member functions declared in nested classes can be defined in file scope. The preceding example could have been written:</p>
<pre><code>class BufferedIO
{
public:
 &nbsp;&nbsp; enum IOError { None, Access, General };
 &nbsp;&nbsp; class BufferedInput
 &nbsp;&nbsp; {
 &nbsp;&nbsp; public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int read(); // Declare but do not define member
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int good(); //&nbsp; functions read and good.
 &nbsp;&nbsp; private:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IOError _inputerror;
 &nbsp;&nbsp; };

 &nbsp;&nbsp; class BufferedOutput
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Member list.
 &nbsp;&nbsp; };
};
// Define member functions read and good in
//&nbsp; file scope.
int BufferedIO::BufferedInput::read()
{
 &nbsp;&nbsp; ...
}

int BufferedIO::BufferedInput::good()
{
 &nbsp;&nbsp; return _inputerror == None;
}
</code></pre>
<p>
In the preceding example, the <i>qualified-type-name</i> syntax is used to declare the function name. The declaration:</p>
<pre><code>BufferedIO::BufferedInput::read()
</code></pre>
<p>
means “the <code>read</code> function that is a member of the <code>BufferedInput</code> class that is in the scope of the <code>BufferedIO</code> class.” Because this declaration uses the <i>qualified-type-name</i> syntax, constructs of the following form are possible:</p>
<pre><code>typedef BufferedIO::BufferedInput BIO_INPUT;

int BIO_INPUT::read()
</code></pre>
<p>
The preceding declaration is equivalent to the previous one, but it uses a <b>typedef</b> name in place of the class names.</p>
</font></BODY>
</HTML>

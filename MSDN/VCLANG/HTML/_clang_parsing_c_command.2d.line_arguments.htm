<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parsing C Command-Line Arguments</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_parsing_c_command.2d.line_arguments"></a><sup></sup>Parsing C Command-Line Arguments</h1>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
Microsoft C startup code uses the following rules when interpreting arguments given on the operating system command line:
<ul type=disc>
<li>
Arguments are delimited by white space, which is either a space or a tab.<br><br></li>
<li>
A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument. Note that the caret (<b>^</b>) is not recognized as an escape character or delimiter. <br><br></li>
<li>
A double quotation mark preceded by a backslash, <b>\"</b>, is interpreted as a literal double quotation mark (<b>"</b>).<br><br></li>
<li>
Backslashes are interpreted literally, unless they immediately precede a double quotation mark.<br><br></li>
<li>
If an even number of backslashes is followed by a double quotation mark, then one backslash (<b>\</b>) is placed in the <i>argv</i> array for every pair of backslashes (<b>\\</b>), and the double quotation mark (<b>"</b>) is interpreted as a string delimiter.<br><br></li>
<li>
If an odd number of backslashes is followed by a double quotation mark, then one backslash (<b>\</b>) is placed in the <i>argv</i> array for every pair of backslashes (<b>\\</b>) and the double quotation mark is interpreted as an escape sequence by the remaining backslash, causing a literal double quotation mark (<b>"</b>) to be placed in <i>argv</i>.</li>
</ul>
<p>
This list illustrates the rules above by showing the interpreted result passed to <code>argv</code> for several examples of command-line arguments. The output listed in the second, third, and fourth columns is from the ARGS.C program that follows the list.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Command-Line Input</b></td>
<td class=label width=20%><b>argv[1]</b></td>
<td class=label width=21%><b>argv[2]</b></td>
<td class=label width=25%><b>argv[3]</b></td>
</tr>
<tr valign=top>
<td width=34%><code>"a b c" d e</code></td>
<td width=20%><code>a b c</code></td>
<td width=21%><code>d</code></td>
<td width=25%><code>e</code></td>
</tr>
<tr valign=top>
<td width=34%><code>"ab\"c" "\\" d</code> </td>
<td width=20%><code>ab"c</code></td>
<td width=21%><code>\</code></td>
<td width=25%><code>d</code></td>
</tr>
<tr valign=top>
<td width=34%><code>a\\\b d"e f"g h</code></td>
<td width=20%><code>a\\\b</code></td>
<td width=21%><code>de fg</code></td>
<td width=25%><code>h</code></td>
</tr>
<tr valign=top>
<td width=34%><code>a\\\"b c d</code></td>
<td width=20%><code>a\"b</code></td>
<td width=21%><code>c</code></td>
<td width=25%><code>d</code></td>
</tr>
<tr valign=top>
<td width=34%><code>a\\\\"b c" d e</code></td>
<td width=20%><code>a\\b c</code></td>
<td width=21%><code>d</code></td>
<td width=25%><code>e</code></td>
</tr>
</table><br>
<pre><code>/* ARGS.C illustrates the following variables used for accessing
 * command-line arguments and environment variables:
 * argc&nbsp; argv&nbsp; envp
 */

#include &lt;stdio.h&gt;

void main( int argc, /* Number of strings in array argv */
 char *argv[],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Array of command-line argument strings */
 char **envp )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Array of environment variable strings */
{
 &nbsp;&nbsp; int count;

 &nbsp;&nbsp; /* Display each command-line argument. */
 &nbsp;&nbsp; printf( "\nCommand-line arguments:\n" );
 &nbsp;&nbsp; for( count = 0; count &lt; argc; count++ )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "&nbsp; argv[%d]&nbsp;&nbsp; %s\n", count, argv[count] );

 &nbsp;&nbsp; /* Display each environment variable. */
 &nbsp;&nbsp; printf( "\nEnvironment variables:\n" );
 &nbsp;&nbsp; while( *envp != NULL )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "&nbsp; %s\n", *(envp++) );

 &nbsp;&nbsp; return;
}
</code></pre>
<p>
One example of output from this program is:</p>
<pre><code>Command-line arguments:
  argv[0]&nbsp;&nbsp; C:\MSC\TEST.EXE

Environment variables:
  COMSPEC=C:\NT\SYSTEM32\CMD.EXE
 
  PATH=c:\nt;c:\binb;c:\binr;c:\nt\system32;c:\word;c:\help;c:\msc;c:\;
  PROMPT=[$p] 
  TEMP=c:\tmp
  TMP=c:\tmp
  EDITORS=c:\binr
  WINDIR=c:\nt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</code></pre>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C Type Specifiers</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_c_type_specifiers"></a><sup></sup>C Type Specifiers </h1>
<p>
Type specifiers in declarations define the type of a variable or function declaration.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>type-specifier</i> :</p>
<p class=indent>
<b>void</b><br>
<b>char</b><br>
<b>short</b><br>
<b>int</b><br>
<b>long</b><br>
<b>float</b><br>
<b>double</b><br>
<b>signed</b><br>
<b>unsigned</b><br>
<i>struct-or-union-specifier</i><br>
<i>enum-specifier</i><br>
<i>typedef-name</i>  </p>
<p>
The <b>signed char</b>, <b>signed int</b>, <b>signed short int</b>, and <b>signed long int</b> types, together with their <b>unsigned</b> counterparts and <b>enum</b>, are called “integral” types. The <b>float</b>, <b>double</b>, and <b>long double</b> type specifiers are referred to as “floating” or “floating-point” types. You can use any integral or floating-point type specifier in a variable or function declaration. If a <i>type-specifier</i> is not provided in a declaration, it is taken to be <b>int</b>.</p>
<p>
The optional keywords <b>signed</b> and <b>unsigned</b> can precede or follow any of the integral types, except <b>enum</b>, and can also be used alone as type specifiers, in which case they are understood as <b>signed int</b> and <b>unsigned int</b>, respectively. When used alone, the keyword <b>int</b> is assumed to be <b>signed</b>. When used alone, the keywords <b>long</b> and <b>short</b> are understood as <b>long int</b> and <b>short int</b>.</p>
<p>
Enumeration types are considered basic types. Type specifiers for enumeration types are discussed in <a href="_clang_c_enumeration_declarations.htm">Enumeration Declarations</a>.</p>
<p>
The keyword <b>void</b> has three uses: to specify a function return type, to specify an argument-type list for a function that takes no arguments, and to specify a pointer to an unspecified type. You can use the <b>void</b> type to declare functions that return no value or to declare a pointer to an unspecified type. See <a href="_clang_arguments.htm">Arguments</a> in Chapter 6 for information on <b>void</b> when it appears alone within the parentheses following a function name.</p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
Type checking is now ANSI-compliant, which means that type <b>short</b> and type <b>int</b> are distinct types. For example, this is a redefinition in the Microsoft C compiler that was accepted by previous versions of the compiler.</p>
<pre><code>int&nbsp;&nbsp; myfunc();
short myfunc();
</code></pre>
<p>
This next example also generates a warning about indirection to different types:</p>
<pre><code>int *pi;
short *ps;

ps = pi;&nbsp; /* Now generates warning */
</code></pre>
<p>
The Microsoft C compiler also generates warnings for differences in sign. For example:</p>
<pre><code>signed int *pi;
unsigned int *pu

pi = pu;&nbsp; /* Now generates warning */
</code></pre>
<p>
Type <b>void</b> expressions are evaluated for side effects. You cannot use the (nonexistent) value of an expression that has type <b>void</b> in any way, nor can you convert a <b>void</b> expression (by implicit or explicit conversion) to any type except <b>void</b>. If you do use an expression of any other type in a context where a <b>void</b> expression is required, its value is discarded.</p>
<p>
To conform to the ANSI specification, <b>void** </b>cannot be used as <b>int**</b>. Only <b>void*</b> can be used as a pointer to an unspecified type.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
You can create additional type specifiers with <b>typedef</b> declarations, as described in <a href="_clang_typedef_declarations.htm">Typedef Declarations</a>. See <a href="_clang_storage_of_basic_types.htm">Storage of Basic Types</a> for information on the size of each type.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Casting</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_casting"></a><sup></sup>Casting</h1>
<p>
The C++ language provides that if a class is derived from a base class containing virtual functions, a pointer to that base class type can be used to call the implementations of the virtual functions residing in the derived class object. A class containing virtual functions is sometimes called a “polymorphic class.”</p>
<p>
Since a derived class completely contains the definitions of all the base classes from which it is derived, it is safe to cast a pointer up the class hierarchy to any of these base classes. Given a pointer to a base class, it might be safe to cast the pointer down the hierarchy. It is safe if the object being pointed to is actually of a type derived from the base class. In this case, the actual object is said to be the “complete object.” The pointer to the base class is said to point to a “subobject” of the complete object. For example, consider the class hierarchy shown in Figure 4.3:</p>
<p class=label>
<b>Figure 4.3&nbsp;&nbsp;&nbsp;Class Hierarchy</b></p>
<p>
<img src="rtti_01.gif" border=0></p>
<p>
An object of type <code>C</code> could be visualized as shown in Figure 4.4:</p>
<p class=label>
<b>Figure 4.4&nbsp;&nbsp;&nbsp;Class C with B Subobject and A Subobject</b></p>
<p>
<img src="rtti_02.gif" border=0></p>
<p>
Given an instance of class <code>C</code>, there is a <code>B</code> subobject and an <code>A</code> subobject. The instance of <code>C</code>, including the <code>A</code> and <code>B</code> subobjects, is the “complete object.”</p>
<p>
Using run-time type information, it is possible to check whether a pointer actually points to a complete object and can be safely cast to point to another object in its hierarchy. The <a href="_pluslang_dynamic_cast_operator.htm">dynamic_cast</a> operator can be used to make these types of casts. It also performs the run-time check necessary to make the operation safe.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_istream</title></head>
<body bgcolor=white>

<h2><a name="basic_istream">basic_istream</a></h2>
<META NAME="MS-HKWD" CONTENT="basic_istream">
<p><a href="ISTREAM_basic_istreamCCbasic_istream.htm#basic_istream::basic_istream"><code><b>basic_istream</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCgcount.htm#basic_istream::gcount"><code><b>gcount</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCget.htm#basic_istream::get"><code><b>get</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCgetline.htm#basic_istream::getline"><code><b>getline</b></code></a><code><b> &#183; </b></cod
e><a href="ISTREAM_basic_istreamCCignore.htm#basic_istream::ignore"><code><b>ignore</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCipfx.htm#basic_istream::ipfx"><code><b>ipfx</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCisfx.htm#basic_istream::isfx"><code><b>isfx</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><code><b>operator&gt;&gt;</b></code></a><code><b> &#183; </b></code><a
 href="ISTREAM_basic_istreamCCpeek.htm#basic_istream::peek"><code><b>peek</b></code></a><code><b> &#183;
</b></code><a href="ISTREAM_basic_istreamCCputback.htm#basic_istream::putback"><code><b>putback</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCread.htm#basic_istream::read"><code><b>read</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCreadsome.htm#basic_istream::readsome"><code><b>readsome</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCseekg.htm#basic_istream::seekg"><code><b>seekg</b></code></a><code><b> &#183; </b></code><a hr
ef="ISTREAM_basic_istreamCCsentry.htm#basic_istream::sentry"><code><b>sentry</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCsync.htm#basic_istream::sync"><code><b>sync</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCtellg.htm#basic_istream::tellg"><code><b>tellg</b></code></a><code><b> &#183; </b></code><a href="ISTREAM_basic_istreamCCunget.htm#basic_istream::unget"><code><b>unget</b></code></a><code><b> </b></code></p>
<pre><code>template &lt;class E, class T = char_traits&lt;E&gt; &gt;
    class <b>basic_istream</b> : virtual public basic_ios&lt;E, T&gt; {
public:
    class <a href="ISTREAM_basic_istreamCCsentry.htm#basic_istream::sentry"><b>sentry</b></a>;
    explicit <a href="ISTREAM_basic_istreamCCbasic_istream.htm#basic_istream::basic_istream"><b>basic_istream</b></a>(basic_streambuf&lt;E, T&gt; *sb);
    virtual <b>~istream</b>();
    bool <a href="ISTREAM_basic_istreamCCipfx.htm#basic_istream::ipfx"><b>ipfx</b></a>(bool noskip = false);
    void <a href="ISTREAM_basic_istreamCCisfx.htm#basic_istream::isfx"><b>isfx</b></a>();
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(basic_istream&amp; (*pf)(basic_istream&amp;));
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(basic_ios&lt;E, T&gt;&amp; (*pf)(basic_ios&lt;E, T&gt;&amp;));
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(ios_base&lt;E, T&gt;&amp; (*pf)(ios_base&lt;E, T&gt;&amp;));
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(basic_streambuf&lt;E, T&gt; *sb);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(bool&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(short&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(unsigned short&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(int&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(unsigned int&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(long&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(unsigned long&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(void *&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(float&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(double&amp; n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(long double&amp; n);
    streamsize <a href="ISTREAM_basic_istreamCCgcount.htm#basic_istream::gcount"><b>gcount</b></a>() const;
    int_type <a href="ISTREAM_basic_istreamCCget.htm#basic_istream::get"><b>get</b></a>();
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCget.htm#basic_istream::get"><b>get</b></a>(E&amp; c);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCget.htm#basic_istream::get"><b>get</b></a>(E *s, streamsize n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCget.htm#basic_istream::get"><b>get</b></a>(E *s, streamsize n, E delim);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCget.htm#basic_istream::get"><b>get</b></a>(basic_streambuf&lt;E, T&gt; *sb);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCget.htm#basic_istream::get"><b>get</b></a>(baiic_streambuf&lt;E, T&gt; *sb, E delim);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCgetline.htm#basic_istream::getline"><b>getline</b></a>(E *s, streamsize n)E
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCgetline.htm#basic_istream::getline"><b>getline</b></a>(E *s, streamsize n, E delim);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCignore.htm#basic_istream::ignore"><b>ignore</b></a>(streamsize n = 1,
        int_type delim = T::eof());
    int_type <a href="ISTREAM_basic_istreamCCpeek.htm#basic_istream::peek"><b>peek</b></a>();
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCread.htm#basic_istream::read"><b>read</b></a>(E *s, streamsize n);
    streamsize <a href="ISTREAM_basic_istreamCCreadsome.htm#basic_istream::readsome"><b>readsome</b></a>(E *s, streamsize n);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCputback.htm#basic_istream::putback"><b>putback</b></a>(E c);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCunget.htm#basic_istream::unget"><b>unget</b></a>();
    pos_type <a href="ISTREAM_basic_istreamCCtellg.htm#basic_istream::tellg"><b>tellg</b></a>();
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCseekg.htm#basic_istream::seekg"><b>seekg</b></a>(pos_type pos);
    basic_istream&amp; <a href="ISTREAM_basic_istreamCCseekg.htm#basic_istream::seekg"><b>seekg</b></a>(off_type off, ios_base::seek_dir way);
    int <a href="ISTREAM_basic_istreamCCsync.htm#basic_istream::sync"><b>sync</b></a>();
    };</code></pre>
<p>The template class describes an object that controls extraction of elements and encoded objects from a <a href="STREAMBU_basic_streambuf.htm#stream buffer">stream buffer</a>
with elements of type <code>E</code>, whose <a href="STRING2_char_traits.htm#character traits">character traits</a> are determined by the class <code>T</code>.</p>
<p>Most of the member functions that overload <a href="ISTREAM_basic_istreamCCoperatorGG.htm#basic_istream::operator&gt;&gt;"><code>operator&gt;&gt;</code></a> are <a name="formatted input functions"><b>formatted input functions</b></a>. They follow the pattern:</p>
<pre><code>    iostate state = goodbit;
    const sentry ok(*this);
    if (ok)
        {try
            {<b>extract elements and convert
            accumulate flags in state
            store a successful conversion</b>}
        catch (...)
            {if (exceptions() &amp; badbit)
                throw;
            setstate(badbit); }}
    setstate(state);
    return (*this);</code></pre>
<p>Many other member functions are <a name="unformatted input functions"><b>unformatted input functions</b></a>. They follow the pattern:</p>
<pre><code>    iostate state = goodbit;
    count = 0;    // the value returned by gcount
    const sentry ok(*this, true);
    if (ok)
        {try
            {<b>extract elements and deliver
            count extracted elements in count
            accumulate flags in state</b>}
        catch (...)
            {if (rdstate() &amp; badbit)
                throw;
            setstate(badbit); }}
    setstate(state);</code></pre>
<p>Both groups of functions call <a href="IOS_basic_iosCCsetstate.htm#basic_ios::setstate"><code>setstate</code></a><code>(eofbit)</code> if they encounter end-of-file while extracting elements.</p>
<p>An object of class <code>basic_istream&lt;E, T&gt;</code> stores:</p>
<ul>
<li>A virtual public base object of class <a href="IOS_basic_ios.htm#basic_ios"><code><b>basic_ios</b></code></a><code><b>&lt;E, T&gt;</b></code>.</li>
<li>An <a name="extraction count"><b>extraction count</b></a> for the last unformatted input operation (called <code>count</code> in the code above).</li>
</ul>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initialization of Static Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_initialization_of_static_objects"></a><sup></sup>Initialization of Static Objects</h1>
<p>
Global objects are initialized at program startup. (For more information about construction and destruction of global objects, see <a href="_pluslang_additional_startup_considerations.htm">Additional Startup Considerations</a> and <a href="_pluslang_additional_termination_considerations.htm">Additional Termination Considerations</a> in Chapter 2.)</p>
<p>
Local objects declared as <b>static</b> are initialized the first time their declarations are encountered in the program flow. The following class, introduced in Chapter 2, <a href="_pluslang_basic_concepts.htm">Basic Concepts</a>, shows how this works:</p>
<pre><code>#include &lt;iostream.h&gt;
#include &lt;string.h&gt;

// Define a class that logs initializations and destructions.
class InitDemo
{
public:
   InitDemo( char *szWhat );
   ~InitDemo();
private:
   char *szObjName;
};

// Constructor for class InitDemo.
InitDemo::InitDemo( char *szWhat )
{
   if( szWhat != 0 &amp;&amp; strlen( szWhat ) &gt; 0 )
   {
      szObjName = new char[ strlen( szWhat ) + 1 ];
      strcpy( szObjName, szWhat );
   }
   else
      szObjName = 0;

   clog &lt;&lt; "Initializing: " &lt;&lt; szObjName &lt;&lt; "\n";
}

// Destructor for InitDemo.
InitDemo::~InitDemo()
{
   if( szObjName != 0 )
   {
      clog &lt;&lt; "Destroying: " &lt;&lt; szObjName &lt;&lt; "\n";
      delete szObjName;
   }
}

// Main function.
void main( int argc, char *argv[] )
{
 &nbsp;&nbsp; if( argc &lt; 2 )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cerr &lt;&lt; "Supply a one-letter argument.\n";
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;
 &nbsp;&nbsp; }

 &nbsp;&nbsp; if( *argv[1] == 'a' )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "*argv[1] was an 'a'\n";

 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declare static local object.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static InitDemo I1( "static I1" );
 &nbsp;&nbsp; }
 &nbsp;&nbsp; else
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "*argv[1] was not an 'a'\n";
}
</code></pre>
<p>
If the command-line argument supplied to this program starts with the lowercase letter “a,” the declaration of <code>I1</code> is executed, the initialization takes place, and the result is:&nbsp;&nbsp;&nbsp;</p>
<pre><code>*argv[1] was an 'a'
Initializing: static I1
Destroying: static I1
</code></pre>
<p>
Otherwise, the flow of control bypasses the declaration of <code>I1</code> and the result is:</p>
<pre><code>*argv[1] was not an 'a'
</code></pre>
<p>
When a static local object is declared with an initializer that does not evaluate to a constant expression, the object is given the value 0 (converted to the appropriate type) at the point before execution enters the block for the first time. However, the object is not visible and no constructors are called until the actual point of declaration.</p>
<p>
At the point of declaration, the object’s constructor (if the object is of a class type) is called as expected. (Static local objects are only initialized the first time they are seen.)</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Nested Class Declarations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_nested_class_declarations"></a><sup></sup>Nested Class Declarations</h1>
<p>
A class can be declared within the scope of another class. Such a class is called a “nested class.” Nested classes are considered to be within the scope of the enclosing class and are available for use within that scope. To refer to a nested class from a scope other than its immediate enclosing scope, you must use a fully qualified name.</p>
<p>
The following example shows how to declare nested classes:</p>
<pre><code>class BufferedIO
{
public:
 &nbsp;&nbsp; enum IOError { None, Access, General };

 &nbsp;&nbsp; // Declare nested class BufferedInput.
 &nbsp;&nbsp; class BufferedInput
 &nbsp;&nbsp; {
 &nbsp;&nbsp; public:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int read();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int good() { return _inputerror == None; }
 &nbsp;&nbsp; private:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IOError _inputerror;
 &nbsp;&nbsp; };

 &nbsp;&nbsp; // Declare nested class BufferedOutput.
 &nbsp;&nbsp; class BufferedOutput
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Member list
 &nbsp;&nbsp; };
};
</code></pre>
<p>
<code>BufferedIO::BufferedInput</code> and <code>BufferedIO::BufferedOutput</code> are declared within <code>BufferedIO</code>. These class names are not visible outside the scope of class <code>BufferedIO</code>. However, an object of type <code>BufferedIO</code> does not contain any objects of types <code>BufferedInput</code> or <code>BufferedOutput</code>.</p>
<p>
Nested classes can directly use names, type names, names of static members, and enumerators only from the enclosing class. To use names of other class members, you must use pointers, references, or object names.</p>
<p>
In the preceding <code>BufferedIO</code> example, the enumeration <code>IOError</code> can be accessed directly by member functions in the nested classes, <code>BufferedIO::BufferedInput</code> or <code>BufferedIO::BufferedOutput</code>, as shown in function <code>good</code>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Nested classes declare only types within class scope. They do not cause contained objects of the nested class to be created. The preceding example declares two nested classes but does not declare any objects of these class types.</p>
</font></BODY>
</HTML>

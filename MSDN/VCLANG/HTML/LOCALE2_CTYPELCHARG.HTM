<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ctype&lt;char&gt;</title></head>
<body bgcolor=white>

<h2><a name="ctype&lt;char&gt;">ctype&lt;char&gt;</a></h2>
<META NAME="MS-HKWD" CONTENT="ctype<char>">
<pre><code>class <b>ctype&lt;char&gt;</b> : public locale::facet, public ctype_base {
public:
    typedef char <b>char_type</b>;
    explicit <b>ctype</b>(const mask *tab = 0, bool del = false,
        size_t refs = 0);
    bool <b>is</b>(mask msk, char ch) const;
    const char *<b>is</b>(const char *first, const char *last,
        mask *dst) const;
    const char *<b>scan_is</b>(mask msk,
        const char *first, const char *last) const;
    const char *<b>scan_not</b>(mask msk,
        const char *first, const char *last) const;
    char <b>toupper</b>(char ch) const;
    const char *<b>toupper</b>(char *first, char *last) const;
    char <b>tolower</b>(char ch) const;
    const char *<b>tolower</b>(char *first, char *last) const;
    char <b>widen</b>(char ch) const;
    const char *<b>widen</b>(char *first, char *last, char *dst) const;
    char <b>narrow</b>(char ch, char dflt) const;
    const char *<b>narrow</b>(const char *first, const char *last,
        char dflt, char *dst) const;
    static locale::id <b>id</b>;
protected:
    <b>~ctype()</b>;
    virtual char <b>do_toupper</b>(char ch) const;
    virtual const char *<b>do_toupper</b>(char *first, char *last) const;
    virtual char <b>do_tolower</b>(char ch) const;
    virtual const char *<b>do_tolower</b>(char *first, char *last) const;
    const mask *<a href="LOCALE2_ctypeLcharG.htm#ctype&lt;char&gt;::table"><b>table</b></a>() const throw();
    static const mask *<a href="LOCALE2_ctypeLcharG.htm#ctype&lt;char&gt;::classic_table"><b>classic_table</b></a>() const throw();
    static const size_t <a href="LOCALE2_ctypeLcharG.htm#ctype&lt;char&gt;::table_size"><b>table_size</b></a>;
    };</code></pre>
<p>The class is an explicit specialization of template class <a href="LOCALE2_ctype.htm#ctype"><code>ctype</code></a> for type <i>char.</i> Hence, it describes an object that can 
serve as a <a href="LOCALE2_locale.htm#locale facet">locale facet</a>, to characterize various properties of a "character" (element) of type <i>char.</i> The explicit 
specialization differs from the template class in several ways:</p>
<ul>
<li>Its sole public constructor lets you specify <code>tab</code>, the <a href="LOCALE2_ctype.htm#ctype mask table">ctype mask table</a>, and <code>del</code>, the Boolean object that is true if 
the array should be deleted when the <code>ctype&lt;char&gt;</code> object is destroyed -- as well as the usual reference-count 
parameter <code>refs</code>.</li>
<li>The protected member function <a name="ctype&lt;char&gt;::table"><code><b>table</b></code></a><code>()</code> returns the stored <a href="LOCALE2_ctype.htm#ctype mask table">ctype mask table</a>.</li>
<li>The static member object <a name="ctype&lt;char&gt;::table_size"><code><b>table_size</b></code></a> specifies the minimum number of elements in a <a href="LOCALE2_ctype.htm#ctype mask table">ctype mask table</a>.</li>
<li>The protected static member function <a name="ctype&lt;char&gt;::classic_table"><code><b>classic_table</b></code></a><code>()</code> returns the <a href="LOCALE2_ctype.htm#ctype mask table">ctype mask table</a> appropriate to the <code>&quot;C&quot;</code> 
locale.</li>
<li>There are no protected virtual member functions <a href="LOCALE2_ctypeCCdo_is.htm#ctype::do_is"><code>do_is</code></a>, <a href="LOCALE2_ctypeCCdo_narrow.htm#ctype::do_narrow"><code>do_narrow</code></a>, <a href="LOCALE2_ctypeCCdo_scan_is.htm#ctype::do_scan_is"><code>do_scan_is</code></a>, <a href="LOCALE2_ctypeCCdo_scan_not.htm#ctype::do_scan_not"><code>do_scan_not</code></a>, or 
<a href="LOCALE2_ctypeCCdo_widen.htm#ctype::do_widen"><code>do_widen</code></a>. The corresponding public member functions perform the equivalent operations themselves.</li>
<li>The member functions <a href="LOCALE2_ctypeCCnarrow.htm#ctype::narrow"><code>narrow</code></a> and <a href="LOCALE2_ctypeCCwiden.htm#ctype::widen"><code>widen</code></a> simply copy elements unaltered.</li>
</ul>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Name Space of typedef Names</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_name_space_of_typedef_names"></a><sup></sup>Name Space of typedef Names</h1>
<p>
Names declared using <b>typedef</b> occupy the same name space as other identifiers (except statement labels). Therefore, they cannot use the same identifier as a previously declared name, except in a class-type declaration. Consider the following example:</p>
<pre><code>typedef unsigned long UL;&nbsp;&nbsp; // Declare a typedef name, UL.
int UL;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error: redefined.
</code></pre>
<p>
The name-hiding rules that pertain to other identifiers also govern the visibility of names declared using <b>typedef</b>. Therefore, the following example is legal in C++:</p>
<pre><code>typedef unsigned long UL;&nbsp;&nbsp; // Declare a typedef name, UL.
...
long Beep
{
 &nbsp;&nbsp; unsigned int UL;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Redeclaration hides typedef name.
 &nbsp;&nbsp; ...
}
// typedef name "unhidden" here.
</code></pre>
</font></BODY>
</HTML>

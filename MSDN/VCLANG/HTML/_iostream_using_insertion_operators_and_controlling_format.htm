<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Insertion Operators and Controlling Format</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_using_insertion_operators_and_controlling_format"></a><sup></sup>Using Insertion Operators and Controlling Format</h1>
<p>
This section shows how to control format and how to create insertion operators for your own classes. The insertion (<b>&lt;&lt;</b>) operator, which is preprogrammed for all standard C++ data types, sends bytes to an output stream object. Insertion operators work with predefined “manipulators,” which are elements that change the default format of integer arguments.</p>

<h2><a name="_iostream_output_width"></a><sup></sup>Output Width</h2>
<p>
To align output, you specify the output width for each item by placing the <b>setw</b> manipulator in the stream or by calling the <b>width</b> member function. This example right aligns the values in a column at least 10 characters wide:</p>
<pre><code>#include &lt;iostream.h&gt;

void main()
{
 &nbsp; double values[] = { 1.23, 35.36, 653.7, 4358.24 };
 &nbsp; for( int i = 0; i &lt; 4; i++ )
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; cout.width(10);
 &nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; values[i] &lt;&lt; '\n';
 &nbsp; }
}
</code></pre>
<p>
The output looks like this:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.23
 &nbsp;&nbsp;&nbsp; 35.36
 &nbsp;&nbsp;&nbsp; 653.7
 &nbsp; 4358.24
</code></pre>
<p>
Leading blanks are added to any value fewer than 10 characters wide. </p>
<p>
To pad a field, use the <b>fill</b> member function, which sets the value of the padding character for fields that have a specified width. The default is a blank. To pad the column of numbers with asterisks, modify the previous <b>for</b> loop as follows:</p>
<pre><code>for( int i = 0; i &lt; 4; i++ )
{
 &nbsp; cout.width( 10 );
 &nbsp; cout.fill( '*' );
 &nbsp; cout &lt;&lt; values[i] &lt;&lt; endl
}
</code></pre>
<p>
The <b>endl</b> manipulator replaces the newline character (<code>'\n'</code>). The output looks like this:</p>
<pre><code>******1.23
*****35.36
*****653.7
***4358.24
</code></pre>
<p>
To specify widths for data elements in the same line, use the <b>setw</b> manipulator: </p>
<pre><code>#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;

void main()
{
 &nbsp; double values[] = { 1.23, 35.36, 653.7, 4358.24 };
 &nbsp; char *names[] = { "Zoot", "Jimmy", "Al", "Stan" };
 &nbsp; for( int i = 0; i &lt; 4; i++ )
 &nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; setw( 6 )&nbsp; &lt;&lt; names[i]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; setw( 10 ) &lt;&lt; values[i] &lt;&lt; endl;
}
</code></pre>
<p>
The <b>width</b> member function is declared in IOSTREAM.H. If you use <b>setw</b> or any other manipulator <i>with arguments</i>, you must include IOMANIP.H. In the output, strings are printed in a field of width 6 and integers in a field of width 10:</p>
<pre><code>&nbsp;Zoot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.23
Jimmy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 35.36
 &nbsp; Al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 653.7
 Stan&nbsp;&nbsp;&nbsp; 4358.24
</code></pre>
<p>
Neither <b>setw</b> nor <b>width</b> truncates values. If formatted output exceeds the width, the entire value prints, subject to the stream’s precision setting. Both <b>setw</b> and <b>width</b> affect the following field only. Field width reverts to its default behavior (the necessary width) after one field has been printed. However, the other stream format options remain in effect until changed.</p>

<h2><a name="_iostream_alignment"></a><sup></sup>Alignment</h2>
<p>
Output streams default to right-aligned text. To left align the names in the previous example and right align the numbers, replace the <b>for</b> loop as follows:</p>
<pre><code>for ( int i = 0; i &lt; 4; i++ )
 &nbsp; cout &lt;&lt; setiosflags( ios::left )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; setw( 6 )&nbsp; &lt;&lt; names[i]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; resetiosflags( ios::left )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; setw( 10 ) &lt;&lt; values[i] &lt;&lt; endl;
</code></pre>
<p>
The output looks like this:</p>
<pre><code>Zoot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.23
Jimmy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 35.36
Al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 653.7
Stan&nbsp;&nbsp;&nbsp;&nbsp; 4358.24
</code></pre>
<p>
The left-align flag is set by using the <a href="_iostream_setiosflags.htm">setiosflags</a> manipulator with the <a href="_iostream_ios.3a3a.flags.htm">ios::left</a> enumerator. This enumerator is defined in the <a href="_iostream_ios.htm">ios</a> class, so its reference must include the <b>ios::</b> prefix. The <a href="_iostream_resetiosflags.htm">resetiosflags</a> manipulator turns off the left-align flag. Unlike <b>width</b> and <b>setw</b>, the effect of <b>setiosflags</b> and <b>resetiosflags</b> is permanent.</p>

<h2><a name="_iostream_precision"></a><sup></sup>Precision</h2>
<p>
The default value for floating-point precision is six. For example, the number 3466.9768 prints as 3466.98. To change the way this value prints, use the <a href="_iostream_setprecision.htm">setprecision</a> manipulator. The manipulator has two flags, <a href="_iostream_ios.3a3a.flags.htm">ios::fixed</a> and <a href="_iostream_ios.3a3a.flags.htm#_iostream_ios.3a3a.scientific">ios::scientific</a>. If <a href="_iostream_ios.3a3a.flags.htm">ios::fixed</a> is set, the number prints as 3466.976800. If <a href="_iostream_ios.3a3a.flags.htm#_iostream_ios.3a3a.scientific">ios::scientific</a> is set, it prints as 3.4669773+003.</p>
<p>
To display the floating-point numbers shown in <a href="#_iostream_alignment">Alignment</a> with one significant digit, replace the <b>for</b> loop as follows:</p>
<pre><code>for ( int i = 0; i &lt; 4; i++ )
 &nbsp; cout &lt;&lt; setiosflags( ios::left )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; setw( 6 )&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; names[i]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; resetiosflags( ios::left )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; setw( 10 ) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; setprecision( 1 )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; values[i] 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; endl;
</code></pre>
<p>
The program prints this list:</p>
<pre><code>Zoot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
Jimmy&nbsp;&nbsp;&nbsp;&nbsp; 4e+001
Al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7e+002
Stan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4e+003
</code></pre>
<p>
To eliminate scientific notation, insert this statement before the <b>for</b> loop:</p>
<pre><code>cout &lt;&lt; setiosflags( ios::fixed );
</code></pre>
<p>
With fixed notation, the program prints with one digit after the decimal point.</p>
<pre><code>Zoot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.2
Jimmy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 35.4
Al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 653.7
Stan&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4358.2
</code></pre>
<p>
If you change the <b>ios::fixed</b> flag to <b>ios::scientific</b>, the program prints this:</p>
<pre><code>Zoot&nbsp;&nbsp;&nbsp; 1.2e+000
Jimmy&nbsp;&nbsp; 3.5e+001
Al&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.5e+002
Stan&nbsp;&nbsp;&nbsp; 4.4e+003
</code></pre>
<p>
Again, the program prints one digit after the decimal point. If <i>either</i> <b>ios::fixed</b> or <b>ios::scientific</b> is set, the precision value determines the number of digits after the decimal point. If neither flag is set, the precision value determines the total number of significant digits. The <b>resetiosflags</b> manipulator clears these flags.</p>

<h2><a name="_iostream_radix"></a><sup></sup>Radix</h2>
<p>
The <b>dec</b>, <b>oct</b>, and <b>hex</b> manipulators set the default radix for input and output. For example, if you insert the <b>hex</b> manipulator into the output stream, the object correctly translates the internal data representation of integers into a hexadecimal output format. The numbers are displayed with digits a through f in lowercase if the <a href="_iostream_ios.3a3a.flags.htm">ios::uppercase</a> flag is clear (the default); otherwise, they are displayed in uppercase. The default radix is <b>dec</b> (decimal).</p>
</font></BODY>
</HTML>

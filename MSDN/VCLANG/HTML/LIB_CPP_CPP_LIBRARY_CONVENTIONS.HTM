<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Library Conventions</title></head>
<body bgcolor=white>

<h2><a name="C++ Library Conventions">C++ Library Conventions</a></h2>
<META NAME="MS-HKWD" CONTENT="C++ library conventions">
<p>The Standard C++ library obeys much the same conventions as the Standard C library, plus a few more outlined here. </p>
<p>Except for macro names, which obey no scoping rules, all names in the Standard C++ library are declared in the <a name="std namespace"><b>std 
namespace</b></a>. Including a <a href="LIB_CPP.htm#Standard C++ headers">Standard C++ header</a> does not introduce any library names into the current namespace. You 
must, for example, refer to the standard input stream <a href="IOSTREAM_cin.htm#cin"><code>cin</code></a> as <code>std::cin</code>, even after including the header <a href="IOSTREAM.HTM"><code>&lt;iostream&gt;</code></a> 
that declares it. Alternatively, you can incorporate all members of the <code>std</code> namespace into the current namespace by 
writing:</p>
<p><code>using namespace std;</code></p>
<p>immediately after all <b>include</b> directives that name the standard headers. Note that the Standard C headers behave 
mostly as if they include no namespace declarations. If you include, for example, <a href="CSTDLIB.HTM"><code>&lt;cstdlib&gt;</code></a>, you call <code>std::abort()</code> 
to cause abnormal termination, but if you include <code>&lt;stdlib.h&gt;</code>, you call <code>abort()</code>.</p>
<p>An implementation has certain latitude in how it declares types and functions in the Standard C++ library:</p>
<ul>
<li>Names of functions in the Standard C library may have either <a name="extern &quot;C++&quot;"><code><b>extern &quot;C++&quot;</b></code></a> or <a name="extern &quot;C&quot;"><code><b>extern &quot;C&quot;</b></code></a> linkage. Include 
the appropriate Standard C header rather than declare a library entity inline.</li>
<li>A member function name in a library class may have additional function signatures beyond those listed in this 
document. You can be sure that a function call described here behaves as expected, but you cannot reliably take 
the address of a library member function. (The type may not be what you expect.)</li>
<li>A library class may have undocumented (nonvirtual) base classes. A class documented as derived from another 
class may, in fact, be derived from that class through other undocumented classes.</li>
<li>A type defined as a synonym for some integer type may be the same as one of several different integer types.</li>
<li>A library function that has no exception specification can throw an arbitrary exception, unless its definition clearly 
restricts such a possibility.</li>
</ul>
<p>On the other hand, there are some restrictions you can count on:</p>
<ul>
<li>The Standard C library uses no <a name="masking macro">masking macros</a>. Only specific function signatures are reserved, not the names of 
the functions themselves.</li>
<li>A library function name outside a class will not have additional, undocumented function signatures. You can 
reliably take its address.</li>
<li>Base classes and member functions described as virtual are assuredly virtual, while those described as 
nonvirtual are assuredly nonvirtual.</li>
<li>Two types defined by the Standard C++ library are always different unless this document explicitly suggests 
otherwise.</li>
<li>Functions supplied by the library, including the default versions of replaceable functions, can throw at most those 
exceptions listed in any exception specification. (Functions in the <a href="INDEX_Table_of_Contents.htm#Standard C Library">Standard C library</a> may propagate an 
exception, as when <code>qsort</code> calls a comparison function that throws an exception, but they do not otherwise throw 
exceptions.)</li>
</ul>
</body>
</html>

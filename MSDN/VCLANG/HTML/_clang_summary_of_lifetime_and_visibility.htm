<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Summary of Lifetime and Visibility</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_summary_of_lifetime_and_visibility"></a><sup></sup>Summary of Lifetime and Visibility </h1>
<p>
Table 2.1 is a summary of lifetime and visibility characteristics for most identifiers. The first three columns give the attributes that define lifetime and visibility. An identifier with the attributes given by the first three columns has the lifetime and visibility shown in the fourth and fifth columns. However, the table does not cover all possible cases. Refer to <a href="_clang_c_storage_classes.htm">Storage Classes</a> in Chapter 3 for more information.</p>
<p class=label>
<b><a name="_clang_table_2..1"></a>Table 2.1&nbsp;&nbsp;&nbsp;Summary of Lifetime and Visibility</b></p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Attributes:<br>
<br>
Level</b></td>
<td class=label width=19%><b><br>
<br>
Item</b></td>
<td class=label width=23%><b><br>
Storage-Class<br>
Specifier</b></td>
<td class=label width=15%><b>Result:<br>
<br>
Lifetime</b></td>
<td class=label width=25%><b><br>
<br>
Visibility</b></td>
</tr>
<tr valign=top>
<td width=18%>File scope</td>
<td width=19%>Variable definition</td>
<td width=23%><b>static</b></td>
<td width=15%>Global</td>
<td width=25%>Remainder of source file in which it occurs</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%>Variable declaration</td>
<td width=23%><b>extern</b> </td>
<td width=15%>Global </td>
<td width=25%>Remainder of source file in which it occurs</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%>Function prototype or definition</td>
<td width=23%><b>static</b> </td>
<td width=15%>Global </td>
<td width=25%>Single source file</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%>Function prototype</td>
<td width=23%><b>extern</b> </td>
<td width=15%>Global </td>
<td width=25%>Remainder of source file</td>
</tr>
<tr valign=top>
<td width=18%>Block scope </td>
<td width=19%>Variable declaration</td>
<td width=23%><b>extern</b></td>
<td width=15%>Global </td>
<td width=25%>Block</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%>Variable definition</td>
<td width=23%><b>static</b></td>
<td width=15%>Global </td>
<td width=25%>Block</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%>Variable definition</td>
<td width=23%><b>auto</b> or <b>register</b></td>
<td width=15%>Local </td>
<td width=25%>Block</td>
</tr>
</table><br>
<p>
The following example illustrates blocks, nesting, and visibility of variables: </p>
<pre><code>#include &lt;stdio.h&gt;

int i = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* i defined at external level&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */

int main()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* main function defined at external level&nbsp;&nbsp; */
{
 &nbsp;&nbsp; printf( "%d\n", i ); /* Prints 1 (value of external level i)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Begin first nested block&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 2, j = 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* i and j defined at internal level */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%d %d\n", i, j );&nbsp;&nbsp;&nbsp;&nbsp; /* Prints 2, 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Begin second nested block&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* i is redefined&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%d %d\n", i, j ); /* Prints 0, 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* End of second nested block&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%d\n", i );&nbsp;&nbsp;&nbsp;&nbsp; /* Prints 2 (outer definition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp; restored)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* End of first nested block&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; printf( "%d\n", i );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Prints 1 (external level&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* definition restored)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
 &nbsp;&nbsp; return 0;
} 
</code></pre>
<p>
In this example, there are four levels of visibility: the external level and three block levels. The values are printed to the screen as noted in the comments following each statement.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>includes (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_includes">includes (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>includes</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator1, class InputIterator2&gt;
     inline bool includes(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The includes algorithm searches for one sequence of values in another sequence of values. includes returns true if every element in the range [first2..last2) is in the sequence [first1..last1). This version of includes assumes that both sequences are sorted using operator&lt;.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// includesP.cpp : Illustrates how to use the includes function.
//
// Functions:
//
//    includes - Search for one sequence in another.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;deque&gt;

using namespace std;


void main()
{
    const int VECTOR_SIZE = 5 ;

    // Define a template class vector of strings
    typedef vector&lt;string &gt; StringVector ;

    //Define an iterator for template class vector of strings
    typedef StringVector::iterator StringVectorIt ;

    // Define a template class deque of strings
    typedef deque&lt;string &gt; StringDeque ;

    //Define an iterator for template class deque of strings
    typedef StringDeque::iterator StringDequeIt ;

    StringVector CartoonVector(VECTOR_SIZE) ;
    StringDeque CartoonDeque ;

    StringVectorIt start1, end1, it1 ;
    StringDequeIt start2, end2, it2 ;

    // Initialize vector Vector1
    CartoonVector[0] = "Aladdin" ;
    CartoonVector[1] = "Jasmine" ;
    CartoonVector[2] = "Mickey" ;
    CartoonVector[3] = "Minnie" ;
    CartoonVector[4] = "Goofy" ;

    start1 = CartoonVector.begin() ;  // location of first
                                      // element of CartoonVector

    end1 = CartoonVector.end() ;  // one past the location last
                                  // element of CartoonVector

    //Initialize list CartoonDeque
    CartoonDeque.push_back("Jasmine") ;
    CartoonDeque.push_back("Aladdin") ;
    CartoonDeque.push_back("Goofy") ;

    start2 = CartoonDeque.begin() ; // location of first
                                    // element of CartoonDeque

    end2 = CartoonDeque.end() ; // one past the location last
                                // element of CartoonDeque

    //sort CartoonVector and CartoonDeque alphabetically
    //includes requires the sequences
    //to be sorted.
    sort(start1, end1) ;
    sort(start2, end2) ;

    // print contents of CartoonVector and CartoonDeque
    cout &lt;&lt; "CartoonVector { " ;
    for(it1 = start1; it1 != end1; it1++)
        cout &lt;&lt; *it1 &lt;&lt; ", " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;
    cout &lt;&lt; "CartoonDeque { " ;
    for(it2 = start2; it2 != end2; it2++)
        cout &lt;&lt; *it2 &lt;&lt; ", " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    //Is CartoonDeque a subset of CartoonVector?
    if(includes(start1, end1, start2, end2) )
        cout &lt;&lt; "CartoonVector includes CartoonDeque"
        &lt;&lt; endl ;
    else
        cout &lt;&lt; "CartoonVector does not include CartoonDeque"
        &lt;&lt; endl ;

}

 </code></pre>

<p>Program Output is:</p>

<pre><code>CartoonVector { Aladdin, Goofy, Jasmine, Mickey, Minnie,  }

CartoonDeque { Aladdin, Goofy, Jasmine,  }

CartoonVector includes CartoonDeque
</code></pre>

</body>
</html>

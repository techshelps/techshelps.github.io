<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview of Declarators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_overview_of_declarators"></a><sup></sup>Overview of Declarators</h1>
<p>
Declarators are the components of a declaration that specify names. Declarators can also modify basic type information to cause names to be functions or pointers to objects or functions. (Specifiers, discussed in Chapter 6, <a href="_pluslang_declarations.htm">Declarations</a>, convey properties such as type and storage class. Modifiers, discussed in this chapter and in Appendix B, <a href="_pluslang_microsoft.2d.specific_modifiers.htm">Microsoft-Specific Modifiers</a>, modify declarators.) Figure 7.1 shows a complete declaration of two names, <code>szBuf</code> and <code>strcpy</code>, and calls out the components of the declaration.</p>
<p class=label>
<b>Figure 7.1&nbsp;&nbsp;&nbsp;Specifiers, Modifiers, and Declarators</b></p>
<p>
<img src="l07dec1.gif" border=0></p>
<p>
<b>Microsoft Specific </b></p>
<p>
Most Microsoft extended keywords can be used as modifiers to form derived types; they are not specifiers or declarators. (See <a href="_pluslang_microsoft.2d.specific_modifiers.htm">Appendix B, Microsoft-Specific Modifiers</a>.)</p>
<p>
<b>END Microsoft Specific</b></p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>declarator</i> :</p>
<p class=indent>
<i>dname</i><br>
<i>ptr-operator</i>  <i>declarator</i><br>
<i>declarator</i>  <b>(</b>  <i>argument-declaration-list</i>  <b>)</b> <i>cv-mod-list</i><br>
<i>declarator</i>  <b>[</b>  <i>constant-expression</i><sub>opt</sub>  <b>]</b><br>
<b>(</b>  <i>declarator</i>  <b>)</b></p>
<p class=dt>
<i>ptr-operator</i> :</p>
<p class=indent>
<b>*</b>  <i>cv-qualifier-list</i><sub>opt</sub><br>
<b>&amp;</b>  <i>cv-qualifier-list</i><sub>opt</sub><br>
<i>complete-class-name</i>  <b>::</b>  <b>*</b>  <i>cv-qualifier-list</i><sub>opt</sub></p>
<p class=dt>
<i>cv-qualifier-list</i> :</p>
<p class=indent>
<i>cv-qualifier</i>  <i>cv-qualifier-list</i><sub>opt</sub></p>
<p class=dt>
<i>cv-qualifier</i> :</p>
<p class=indent>
<b>const</b><br>
<b>volatile</b></p>
<p class=dt>
<i>cv-mod-list</i> :</p>
<p class=indent>
<i>cv-qualifier</i> <i>cv-mod-list</i><sub>opt</sub><br>
<i>pmodel</i> <i>cv-mod-list</i><sub>opt</sub></p>
<p class=dt>
<i>dname</i> :</p>
<p class=indent>
<i>name</i><br>
<i>class-name</i><br>
<i>~</i> <i>class-name</i><br>
<i>typedef-name</i><br>
<i>qualified-type-name</i></p>
<p>
Declarators appear in the declaration syntax after an optional list of specifiers (<i>decl-specifiers</i>). These specifiers are discussed in Chapter 6, <a href="_pluslang_declarations.htm">Declarations.</a> A declaration can contain more than one declarator, but each declarator declares only one name. The following sample declaration shows how specifiers and declarators are combined to form a complete declaration:</p>
<pre><code>const char *pch, ch;
</code></pre>
<p>
In this preceding declaration, the keywords <b>const</b> and <b>char</b> make up the list of specifiers. Two declarators are listed: <code>*pch</code> and <code>ch</code>. The simplified syntax of a declaration, then, is the following, where <code>const char</code> is the type and <code>*pch</code> and <code>ch</code> are the declarators:</p>
<p>
<i>type&nbsp; declarator</i><sub>1</sub>[<b>,</b> <i>declarator</i><sub>2</sub>[<b>...,</b><i>declarator</i><sub>n</sub>] ] <b>;</b></p>
<p>
When the binding of elements in a declarator list does not yield the desired result, you can use parentheses for clarification. A better technique, however, is to use a <b>typedef</b> or a combination of parentheses and the <b>typedef</b> keyword. Consider declaring an array of pointers to functions. Each function must obey the same protocol so that the arguments and return values are known:</p>
<pre><code>//&nbsp; Function returning type int that takes one 
//&nbsp;&nbsp; argument of type char *.
typedef int (*PIFN)( char * );

//&nbsp; Declare an array of 7 pointers to functions 
//&nbsp;&nbsp; returning int and taking one argument of type 
//&nbsp;&nbsp; char *.
PIFN pifnDispatchArray[7];
</code></pre>
<p>
The equivalent declaration can be written without the <b>typedef</b> declaration, but it is so complicated that the potential for error exceeds any benefits:</p>
<pre><code>int ( *pifnDispatchArray[7] )( char * );
</code></pre>
</font></BODY>
</HTML>

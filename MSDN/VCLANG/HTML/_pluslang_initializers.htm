<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializers</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_initializers"></a><sup></sup>Initializers</h1>
<p>
Declarators can specify the initial value for objects. The only way to specify a value for objects of <b>const</b> type is in the declarator. The part of the declarator that specifies this initial value is called the “initializer.”</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>initializer</i> :</p>
<p class=indent>
<b>=</b>  <i>assignment-expression</i><br>
<b>=</b> <b>{</b> <i>initializer-list</i>  <b>,</b><sub>opt</sub> <b>}</b><br>
<b>(</b>  <i>expression-list</i>  <b>)</b></p>
<p class=dt>
<i>initializer-list</i> :</p>
<p class=indent>
<i>expression</i><br>
<i>initializer-list</i>  <b>,</b>  <i>expression</i><br>
<b>{</b>  <i>initializer-list</i>  <b>,</b><sub>opt</sub>  <b>}</b></p>
<p>
There are two fundamental types of initializers:
<ul type=disc>
<li>
The initializer invoked using the equal-sign syntax<br><br></li>
<li>
The initializer invoked using function-style syntax</li>
</ul>
<p>
Only objects of classes with constructors can be initialized with the function-style syntax. The two syntax forms also differ in access control and in the potential use of temporary objects. Consider the following code, which illustrates some declarators with initializers:</p>
<pre><code>int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 7;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Uses equal-sign syntax.
Customer Cust( "Taxpayer, Joe",&nbsp; // Uses function-style
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "14 Cherry Lane", //&nbsp; syntax. Requires presence
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Manteca",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; of a constructor.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "CA" );
</code></pre>
<p>
Declarations of automatic, register, static, and external variables can contain initializers. However, declarations of external variables can contain initializers only if the variables are not declared as <b>extern</b>.</p>
<p>
These initializers can contain expressions involving constants and variables in the current scope. The initializer expression is evaluated at the point the declaration is encountered in program flow, or, for global static objects and variables, at program startup. (For more information about initialization of global static objects, see <a href="_pluslang_additional_startup_considerations.htm">Additional Startup Considerations</a> in Chapter 2.)</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_ostream</title></head>
<body bgcolor=white>

<h2><a name="basic_ostream">basic_ostream</a></h2>
<META NAME="MS-HKWD" CONTENT="basic_ostream">
<p><a href="OSTREAM_basic_ostreamCCbasic_ostream.htm#basic_ostream::basic_ostream"><code><b>basic_ostream</b></code></a><code><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCflush.htm#basic_ostream::flush"><code><b>flush</b></code></a><code><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><code><b>operator&lt;&lt;</b></code></a><code><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCopfx.htm#basic_ostream::opfx"><code><b>opfx</b></code></a><code
><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCosfx.htm#basic_ostream::osfx"><code><b>osfx</b></code></a><code><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCput.htm#basic_ostream::put"><code><b>put</b></code></a><code><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCseekp.htm#basic_ostream::seekp"><code><b>seekp</b></code></a><code><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCsentry.htm#basic_ostream::sentry"><code><b>sentry</b></code></a><code><b> &#183; </b></code><a href="OS
TREAM_basic_ostreamCCtellp.htm#basic_ostream::tellp"><code><b>tellp</b></code></a><code><b> &#183; </b></code><a href="OSTREAM_basic_ostreamCCwrite.htm#basic_ostream::write"><code><b>write</b></code></a><code><b> </b></code></p>
<pre><code>template &lt;class E, class T = char_traits&lt;E&gt; &gt;
    class <b>basic_ostream</b> {
public:
    class <a href="OSTREAM_basic_ostreamCCsentry.htm#basic_ostream::sentry"><b>sentry</b></a>;
    explicit <a href="OSTREAM_basic_ostreamCCbasic_ostream.htm#basic_ostream::basic_ostream"><b>basic_ostream</b></a>(basic_streambuf&lt;E, T&gt; *sb);
    virtual <b>~ostream</b>();
    bool <a href="OSTREAM_basic_ostreamCCopfx.htm#basic_ostream::opfx"><b>opfx</b></a>();
    void <a href="OSTREAM_basic_ostreamCCosfx.htm#basic_ostream::osfx"><b>osfx</b></a>();
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(basic_ostream&amp; (*pf)(basic_ostream&amp;));
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(basic_ios&lt;E, T&gt;&amp; (*pf)(basic_ios&lt;E, T&gt;&amp;));
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(ios_base&lt;E, T&gt;&amp; (*pf)(ios_base&lt;E, T&gt;&amp;));
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(basic_streambuf&lt;E, T&gt; *sb);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(const char *s);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(char c);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(bool n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(short n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(unsigned short n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(int n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(unsigned int n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(long n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(unsigned long n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(float n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(double n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(long double n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(void * n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCput.htm#basic_ostream::put"><b>put</b></a>(E c);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCwrite.htm#basic_ostream::write"><b>write</b></a>(E *s, streamsize n);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCflush.htm#basic_ostream::flush"><b>flush</b></a>();
    pos_type <a href="OSTREAM_basic_ostreamCCtellp.htm#basic_ostream::tellp"><b>tellp</b></a>();
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCseekp.htm#basic_ostream::seekp"><b>seekp</b></a>(pos_type pos);
    basic_ostream&amp; <a href="OSTREAM_basic_ostreamCCseekp.htm#basic_ostream::seekp"><b>seekp</b></a>(off_type off, ios_base::seek_dir way);
    };</code></pre>
<p>The template class describes an object that controls insertion of elements and encoded objects into a <a href="STREAMBU_basic_streambuf.htm#stream buffer">stream buffer</a> with
elements of type <code>E</code>, whose <a href="STRING2_char_traits.htm#character traits">character traits</a> are determined by the class <code>T</code>.</p>
<p>Most of the member functions that overload <a href="OSTREAM_basic_ostreamCCoperatorLL.htm#basic_ostream::operator&lt;&lt;"><code>operator&lt;&lt;</code></a> are <a name="formatted output functions"><b>formatted output functions</b></a>. They follow the pattern:</p>
<pre><code>    iostate state = goodbit;
    const sentry ok(*this);
    if (ok)
        {try
            {<b>convert and insert elements
            accumulate flags in state</b>}
        catch (...)
            {if (exceptions() &amp; badbit)
                throw;
            setstate(badbit); }}
    width(0);    // except for operator&lt;&lt;(E)
    setstate(state);
    return (*this);</code></pre>
<p>Two other member functions are <a name="unformatted output functions"><b>unformatted output functions</b></a>. They follow the pattern:</p>
<pre><code>    iostate state = goodbit;
    const sentry ok(*this);
    if (!ok)
        state |= badbit;
    else
        {try
            {<b>obtain and insert elements
            accumulate flags in state</b>}
        catch (...)
            {if (rdstate() &amp; badbit)
                throw;
            setstate(badbit); }}
    setstate(state);
    return (*this);</code></pre>
<p>Both groups of functions call <a href="IOS_basic_iosCCsetstate.htm#basic_ios::setstate"><code>setstate</code></a><code>(badbit)</code> if they encounter a failure while inserting elements.</p>
<p>An object of class <code>basic_ostream&lt;E, T&gt;</code> stores only a virtual public base object of class <a href="IOS_basic_ios.htm#basic_ios"><code><b>basic_ios</b></code></a><code><b>&lt;E, T&gt;</b></code>.</p>
</body>
</html>

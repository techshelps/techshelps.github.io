<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Vector Class, operator== (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_vector_class_operatorEE">Vector Class, operator== (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the vector class <code>operator==</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;vector&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _A&gt; inline
     bool operator==(const vector&lt;_TYPE, _A&gt;&amp; _X,
     const vector&lt;_TYPE, _A&gt;&amp; _Y);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The sample declares three empty vectors, of a user-defined class called ID, each of which contains a Name string member and a Score integer member. It creates three vectors of IDs, then compares vectors using the operator== as defined for ID.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
//    Opequal.cpp : Illustrates how to define the operator== to compare
//                  vectors.
//
// Functions:
//
//    vector::operator== - Vector equality comparison.
//    vector::push_back - Appends (inserts) an element to the end of a
//                        vector, allocating memory for it if necessary.
//
//////////////////////////////////////////////////////////////////////

// The debugger can't handle symbols more than 255 characters long.
// STL often creates symbols longer than that.
// When symbols are longer than 255 characters, the warning is disabled.
#pragma warning(disable:4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;

using namespace std ;
using namespace std::rel_ops ;

// The ID class is used for team scoring. It holds each player's name
// and score.
class ID
{
public:
    string Name;
    int Score;

    ID() : Name(""), Score(0) {}
    ID(string NewName, int NewScore) : Name(NewName), Score(NewScore) {}
};

// In this example, an ID is equivalent only if both name and score match.
bool operator==(const ID&amp; x, const ID&amp; y)
{
    return (x.Name == y.Name) &amp;&amp; (x.Score == y.Score);
}

// IDs will be sorted by Score, not by Name.
bool operator&lt;(const ID&amp; x, const ID&amp; y)
{
    return x.Score &lt; y.Score;
}

// Define a template class for a vector of IDs.
typedef vector&lt;ID&gt; NAMEVECTOR;

void main()
{
    // Declare 3 dynamically allocated vectors of names.
    NAMEVECTOR Vector1, Vector2, Vector3;

    // Create 3 short vectors of names.
    Vector1.push_back(ID("Karen Palmer", 2));
    Vector1.push_back(ID("Ada Campbell", 1));

    Vector2.push_back(ID("John Woloschuk", 3));
    Vector2.push_back(ID("Grady Leno", 2));

    Vector3.push_back(ID("Karen Palmer", 2));
    Vector3.push_back(ID("Ada Campbell", 1));

    // Compare Vector1 to Vector2 and show whether they're equivalent.
    Vector1 == Vector2 ? cout &lt;&lt; "Vector1 == Vector2"
                       : cout &lt;&lt; "Vector1 != Vector2";
    cout &lt;&lt; endl;

    // Compare Vector1 to Vector3 and show whether they're equivalent.
    Vector1 == Vector3 ? cout &lt;&lt; "Vector1 == Vector3"
                       : cout &lt;&lt; "Vector1 != Vector3";
    cout &lt;&lt; endl;


 </code></pre>

<p>Program Output is:</p>

<pre><code>Vector1 != Vector2
Vector1 == Vector3
</code></pre>

</body>
</html>

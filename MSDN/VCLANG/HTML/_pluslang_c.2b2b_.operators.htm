<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Operators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.operators"></a><sup></sup>C++ Operators</h1>
<p>
Operators specify an evaluation to be performed on one of the following:
<ul type=disc>
<li>
One operand (unary operator)<br><br></li>
<li>
Two operands (binary operator)<br><br></li>
<li>
Three operands (ternary operator)</li>
</ul>
<p>
The C++ language includes all C operators and adds several new operators. Table 1.1 lists the operators available in Microsoft C++.</p>
<p>
Operators follow a strict precedence which defines the evaluation order of expressions containing these operators. Operators associate with either the expression on their left or the expression on their right; this is called “associativity.” Operators in the same group have equal precedence and are evaluated left to right in an expression unless explicitly forced by a pair of parentheses, ( ). Table 1.1 shows the precedence and associativity of C++ operators (from highest to lowest precedence). </p>
<p class=label>
<b><a name="_pluslang_table_1..1"></a>Table 1.1&nbsp;&nbsp;&nbsp;C++ Operator Precedence and Associativity</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Operator</b></td>
<td class=label width=54%><b>Name or Meaning</b></td>
<td class=label width=22%><b>Associativity</b></td>
</tr>
<tr valign=top>
<td width=24%><b>::</b></td>
<td width=54%>Scope resolution</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>::</b></td>
<td width=54%>Global</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>[ ]</b></td>
<td width=54%>Array subscript</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>( )</b></td>
<td width=54%>Function call</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>( )</b></td>
<td width=54%>Conversion</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>.</b></td>
<td width=54%>Member selection (object)</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>–&gt;</b></td>
<td width=54%>Member selection (pointer)</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>++</b></td>
<td width=54%>Postfix increment</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><code>––</code></td>
<td width=54%>Postfix decrement</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>new</b></td>
<td width=54%>Allocate object</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>delete</b></td>
<td width=54%>Deallocate object</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>delete[ ]</b></td>
<td width=54%>Deallocate object</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>++</b></td>
<td width=54%>Prefix increment</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><code>––</code></td>
<td width=54%>Prefix decrement</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>*</b></td>
<td width=54%>Dereference</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>&amp;</b></td>
<td width=54%>Address-of</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>+</b></td>
<td width=54%>Unary plus</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>–</b></td>
<td width=54%>Arithmetic negation (unary)</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>!</b></td>
<td width=54%>Logical NOT</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>~</b></td>
<td width=54%>Bitwise complement</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>sizeof</b></td>
<td width=54%>Size of object</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>sizeof ( )</b></td>
<td width=54%>Size of type</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>typeid( )</b></td>
<td width=54%>type name</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%>(<i>type</i><b>)</b></td>
<td width=54%>Type cast (conversion)</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>const_cast</b></td>
<td width=54%>Type cast (conversion)</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>dynamic_cast</b></td>
<td width=54%>Type cast (conversion)</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>reinterpret_cast</b></td>
<td width=54%>Type cast (conversion)</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>static_cast</b></td>
<td width=54%>Type cast (conversion)</td>
<td width=22%>None</td>
</tr>
<tr valign=top>
<td width=24%><b>.*</b></td>
<td width=54%>Apply pointer to class member (objects)</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>–&gt;*</b></td>
<td width=54%>Dereference pointer to class member</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>*</b></td>
<td width=54%>Multiplication</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>/</b></td>
<td width=54%>Division</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>%</b></td>
<td width=54%>Remainder (modulus)</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>+</b></td>
<td width=54%>Addition</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>–</b></td>
<td width=54%>Subtraction</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&lt;&lt;</b></td>
<td width=54%>Left shift</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&gt;&gt;</b></td>
<td width=54%>Right shift</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&lt;</b></td>
<td width=54%>Less than</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&gt;</b></td>
<td width=54%>Greater than</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&lt;=</b></td>
<td width=54%>Less than or equal&nbsp;to</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&gt;=</b></td>
<td width=54%>Greater than or equal to</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>==</b></td>
<td width=54%>Equality</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>!=</b></td>
<td width=54%>Inequality</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&amp;</b></td>
<td width=54%>Bitwise AND</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>^</b></td>
<td width=54%>Bitwise exclusive OR</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>|</b></td>
<td width=54%>Bitwise OR</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>&amp;&amp;</b></td>
<td width=54%>Logical AND</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><b>||</b></td>
<td width=54%>Logical OR</td>
<td width=22%>Left to right</td>
</tr>
<tr valign=top>
<td width=24%><i>e1</i><b>?</b><i>e2</i><b>:</b><i>e3</i></td>
<td width=54%>Conditional</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>=</b></td>
<td width=54%>Assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>*=</b></td>
<td width=54%>Multiplication assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>/=</b></td>
<td width=54%>Division assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>%=</b></td>
<td width=54%>Modulus assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>+=</b></td>
<td width=54%>Addition assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><code>–</code><b>=</b></td>
<td width=54%>Subtraction assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>&lt;&lt;=</b></td>
<td width=54%>Left-shift assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>&gt;&gt;=</b></td>
<td width=54%>Right-shift assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>&amp;=</b></td>
<td width=54%>Bitwise AND assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>|=</b></td>
<td width=54%>Bitwise inclusive OR assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>^=</b></td>
<td width=54%>Bitwise exclusive OR assignment</td>
<td width=22%>Right to left</td>
</tr>
<tr valign=top>
<td width=24%><b>,</b> </td>
<td width=54%>Comma</td>
<td width=22%>Left to right</td>
</tr>
</table><br>
</font></BODY>
</HTML>

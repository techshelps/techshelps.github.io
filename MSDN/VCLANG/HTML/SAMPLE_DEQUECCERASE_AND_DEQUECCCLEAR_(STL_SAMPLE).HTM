<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>deque::erase and deque::clear (STL sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_dequeCCerase_clear">deque::erase and deque::clear (STL sample)</a></h2>
<p>The sample code below illustrates how to use the <code>deque::erase</code> and <code>deque::clear</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; deque&gt;</p>
<b>Prototype:</b><br>
<pre><code>
iterator erase(iterator iter);
iterator erase(iterator first, iterator last);
void clear() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The first erase member function removes the element of the container pointed to by iter. The second erase member function removes the elements of the container in the range [first, last). Both return an iterator that designates the first element remaining beyond any elements removed, or end() if no such element exists.  Removing N elements causes N destructor calls and an assignment for each of the elements between the insertion point and the nearer end of the sequence.  Removing an element at either end invalidates only iterators and references that designate the erased elements. Otherwise, erasing an element invalidates all iterators and references.  The clear member function calls erase( begin(), end()).  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// deque.cpp :
//
// Functions:
//
//    erase
//    clear
//    begin
//    end
//////////////////////////////////////////////////////////////////////

/* Compile options needed:-GX
*/
#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;


typedef deque&lt;int &gt;  INTDEQUE;
void print_contents (INTDEQUE  deque);

void main()
{
    // create a and with elements 1,2,3,4 and 5
    INTDEQUE  a;
    a.push_back(1);
    a.push_back(2);
    a.push_back(3);
    a.push_back(4);
    a.push_back(5);

    //print the contents
    print_contents (a);

    //  erase the second element
    a.erase(a.begin()+1);
    print_contents (a);

    //erase the last two elements
    a.erase(a.end()-2,a.end());
    print_contents (a);

    //clear a
    a.clear();
    print_contents (a);
}

void print_contents (INTDEQUE  deque) {
    INTDEQUE::iterator pdeque;

    cout &lt;&lt;"The output is: ";

        for(pdeque = deque.begin();
        pdeque != deque.end();
        pdeque++)
    {
        cout &lt;&lt; *pdeque &lt;&lt;" " ;
    }
        cout&lt;&lt;endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>The output is: 1 2 3 4 5
The output is: 1 3 4 5
The output is: 1 3
The output is:
</code></pre>

</body>
</html>

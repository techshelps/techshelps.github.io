<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Elaborated Type Specifiers</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_elaborated_type_specifiers"></a><sup></sup>Elaborated Type Specifiers</h1>
<p>
Elaborated type specifiers are used to declare user-defined types. These can be either class- or enumerated-types.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>elaborated-type-specifier</i> :</p>
<p class=indent>
<i>class-key</i>  <i>class-name</i><br>
<i>class-key</i>  <i>identifier</i><br>
<b>enum</b>  <i>enum-name</i></p>
<p class=dt>
<i>class-key</i> :</p>
<p class=indent>
<b>class</b><br>
<b>struct</b><br>
<b>union</b></p>
<p>
If <i>identifier</i> is specified, it is taken to be a class name. For example:</p>
<pre><code>class Window;
</code></pre>
<p>
This statement declares the <code>Window</code> identifier as a class name. This syntax is used for forward declaration of classes. For more information about class names, see <a href="_pluslang_class_names.htm">Class Names</a> in Chapter 8.</p>
<p>
If a name is declared using the <b>union</b> keyword, it must also be defined using the <b>union</b> keyword. Names that are defined using the <b>class</b> keyword can be declared using the <b>struct</b> keyword (and vice versa). Therefore, the following code samples are legal:</p>
<pre><code>// Legal example 1
struct A;&nbsp;&nbsp;&nbsp; // Forward declaration of A.

class A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define A.
{
public:
 &nbsp;&nbsp; int i;
};

// Legal example 2
class A;&nbsp;&nbsp;&nbsp;&nbsp; // Forward declaration of A.

struct A&nbsp;&nbsp;&nbsp;&nbsp; // Define A.
{
private:
 &nbsp;&nbsp; int i;
};

// Legal example 3
union A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Forward declaration of A.

union A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define A.
{
 &nbsp;&nbsp; int&nbsp; i;
 &nbsp;&nbsp; char ch[2];
};
</code></pre>
<p>
These examples, however, are illegal:</p>
<pre><code>// Illegal example 1
union A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Forward declaration of A.

struct A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define A.
{
 &nbsp;&nbsp; int i;
};
// Illegal example 2
union A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Forward declaration of A.

class A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define A.
{
public:
 &nbsp;&nbsp; int i;
};
// Illegal example 3
struct A;&nbsp;&nbsp;&nbsp;&nbsp; // Forward declaration of A.

union A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define A.
{
 &nbsp;&nbsp; int&nbsp; i;
 &nbsp;&nbsp; char ch[2];
};
</code></pre>
</font></BODY>
</HTML>

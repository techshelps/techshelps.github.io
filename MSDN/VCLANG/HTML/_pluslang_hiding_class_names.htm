<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hiding Class Names</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_hiding_class_names"></a><sup></sup>Hiding Class Names</h1>
<p>
You can hide class names by declaring a function, object or variable, or enumerator in the same scope. However, the class name can still be accessed when prefixed by the keyword <b>class</b>.</p>
<pre><code>// Declare class Account at file scope.
class Account
{
public:
 &nbsp;&nbsp; Account( double InitialBalance )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { balance = InitialBalance; }
 &nbsp;&nbsp; double GetBalance()
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return balance; }
private:
 &nbsp;&nbsp; double balance;
};

double Account = 15.37;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Hides class name Account

void main()
{
 &nbsp;&nbsp; class Account Checking( Account ); // Qualifies Account as 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; class name

 &nbsp;&nbsp; cout &lt;&lt; "Opening account with balance of: "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; Checking.GetBalance() &lt;&lt; "\n";
}
</code></pre>
<p>
Note that any place the class name (<code>Account</code>) is called for, the keyword <b>class</b> must be used to differentiate it from the file-scoped variable <code>Account</code>. This rule does not apply when the class name occurs on the left side of the scope-resolution operator (<b>::</b>). Names on the left side of the scope-resolution operator are always considered class names. The following example demonstrates how to declare a pointer to an object of type <code>Account</code> using the <b>class</b> keyword:</p>
<pre><code>class Account *Checking = new class Account( Account );
</code></pre>
<p>
The <code>Account</code> in the initializer (in parentheses) in the preceding statement has file scope; it is of type <b>double</b>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The reuse of identifier names as shown in this example is considered poor programming style. </p>
<p>
For more information about pointers, see <a href="_pluslang_derived_types.htm">Derived Types</a>. For information about declaration and initialization of class objects, see Chapter 8, <a href="_pluslang_classes.htm">Classes</a>. For information about using the <b>new</b> and <b>delete</b> free-store operators, see Chapter 11, <a href="_pluslang_special_member_functions.htm">Special Member Functions</a>. </p>
</font></BODY>
</HTML>

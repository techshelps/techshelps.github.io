</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>&lt;iostream&gt;</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

<h1><a name="&lt;iostream&gt;">&lt;iostream&gt;</a></h1>
<META NAME="MS-HKWD" CONTENT="iostream header file">
<pre><code>namespace std {
    extern istream <a href="IOSTREAM_cin.htm#cin"><b>cin</b></a>;
    extern ostream <a href="IOSTREAM_cout.htm#cout"><b>cout</b></a>;
    extern ostream <a href="IOSTREAM_cerr.htm#cerr"><b>cerr</b></a>;
    extern ostream <a href="IOSTREAM_clog.htm#clog"><b>clog</b></a>;
    extern wistream <a href="IOSTREAM_wcin.htm#wcin"><b>wcin</b></a>;
    extern wostream <a href="IOSTREAM_wcout.htm#wcout"><b>wcout</b></a>;
    extern wostream <a href="IOSTREAM_wcerr.htm#wcerr"><b>wcerr</b></a>;
    extern wostream <a href="IOSTREAM_wclog.htm#wclog"><b>wclog</b></a>;
    };</code></pre>
<p>Include the <a href="LIB_CPP_Iostreams_Conventions.htm#iostreams">iostreams</a> standard header <code><b>&lt;iostream&gt;</b></code> to declare objects that control reading from and writing to the 
standard streams. This is often the only header you need include to perform input and output from a C++ program.</p>
<p>The objects fall into two groups:</p>
<ul>
<li><a href="IOSTREAM_cin.htm#cin"><code>cin</code></a>, <a href="IOSTREAM_cout.htm#cout"><code>cout</code></a>, <a href="IOSTREAM_cerr.htm#cerr"><code>cerr</code></a>, and <a href="IOSTREAM_clog.htm#clog"><code>clog</code></a> are <a href="LIB_FILE.htm#byte oriented">byte oriented</a>, performing conventional byte-at-a-time transfers.</li>
<li><a href="IOSTREAM_wcin.htm#wcin"><code>wcin</code></a>, <a href="IOSTREAM_wcout.htm#wcout"><code>wcout</code></a>, <a href="IOSTREAM_wcerr.htm#wcerr"><code>wcerr</code></a>, and <a href="IOSTREAM_wclog.htm#wclog"><code>wclog</code></a> are <a href="LIB_FILE.htm#wide oriented">wide oriented</a>, translating to and from the wide characters that the 
program manipulates internally.</li>
</ul>
<p>Once you perform <a href="LIB_FILE_Stream_States.htm#Stream States">certain operations</a> on a stream, such as the standard input, you cannot perform operations of a 
different orientation on the same stream. A program cannot operate interchangeably on both <a href="IOSTREAM_cin.htm#cin"><code>cin</code></a> and <a href="IOSTREAM_wcin.htm#wcin"><code>wcin</code></a>, for 
example.</p>
<p>All the objects declared in this header share a peculiar property: You can assume they are <a name="constructing iostreams"><b>constructed</b></a> before any 
static objects you define, in a translation unit that includes <code>&lt;iostreams&gt;</code>. Equally, you can assume that these objects 
are not destroyed before the destructors for any such static objects you define. (The output streams are, however, 
flushed during program termination.) You can safely read from or write to the standard streams prior to program 
startup and after program termination.</p>
<p>This guarantee is not universal, however. A static constructor may call a function in another translation unit. The called 
function cannot assume that the objects declared in this header have been constructed, given the uncertain order in 
which translation units participate in static construction. To use these objects in such a context, you must first construct 
an object of class <a href="IOS_ios_baseCCInit.htm#ios_base::Init"><code><b>ios_base::Init</b></code></a>, as in:</p>
<pre><code>#include &lt;iostream&gt;

using namespace std;

void marker()
    {    // called by some constructor
    ios_base::Init unused_name;
    cout &lt;&lt; &quot;called fun&quot; &lt;&lt; endl;
    }</code></pre>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Pointers to const Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_initializing_pointers_to_const_objects"></a><sup></sup>Initializing Pointers to const Objects</h1>
<p>
A pointer to a <b>const</b> object can be initialized with a pointer to an object that is not <b>const</b>, but not vice versa. For example, the following initialization is legal:</p>
<pre><code>Window StandardWindow;
const Window* pStandardWindow( &amp;StandardWindow );
</code></pre>
<p>
In the preceding code, the pointer <code>pStandardWindow</code> is declared as a pointer to a <b>const</b> object. Although <code>StandardWindow</code> is not declared as <b>const</b>, the declaration is acceptable because it does not allow an object not declared as <b>const</b> access to a <b>const</b> object. The reverse of this is as follows:</p>
<pre><code>const Window StandardWindow;
Window* pStandardWindow( &amp;StandardWindow );
</code></pre>
<p>
The preceding code explicitly declares <code>StandardWindow</code> as a <b>const</b> object. Initializing the nonconstant pointer <code>pStandardWindow</code> with the address of <code>StandardWindow</code> generates an error because it allows access to the <b>const</b> object through the pointer. That is, it allows removal of the <b>const</b> attribute from the object.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>pair</title></head>
<body bgcolor=white>

<h2><a name="pair">pair</a></h2>
<META NAME="MS-HKWD" CONTENT="pair">
<pre><code>template&lt;class T, class U&gt;
    struct <b>pair</b> {
    typedef T <b>first_type</b>;
    typedef U <b>second_type</b>
    T <b>first</b>;
    U <b>second</b>;
    <b>pair</b>();
    <b>pair</b>(const T&amp; x, const U&amp; y);
    template&lt;class V, class W&gt;
        pair(const pair&lt;V, W&gt;&amp; pr);
    };</code></pre>
<p>The template class stores a pair of objects, <a name="pair::first"><code><b>first</b></code></a>, of type <code>T</code>, and <a name="pair::second"><code><b>second</b></code></a>, of type <code>U</code>. The type definition <a name="pair::first_type"><code><b>first_type</b></code></a> 
is the same as the template parameter <code>T</code>, while <a name="pair::second_type"><code><b>second_type</b></code></a> is the same as the template parameter <code>U</code>.</p>
<p>The first (default) constructor initializes <code>first</code> to <code>T()</code> and <code>second</code> to <code>U()</code>. The second constructor initializes <code>first</code> to 
<code>x</code> and <code>second</code> to <code>y</code>. The third (template) constructor initializes <code>first</code> to <code>pr.first</code> and <code>second</code> to <code>pr.second</code>. <code>T</code> and 
<code>U</code> each need supply only a single-argument constructor and a destructor.</p>

</body>

</html>

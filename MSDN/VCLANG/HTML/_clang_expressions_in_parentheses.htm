<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Expressions in Parentheses</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_expressions_in_parentheses"></a><sup></sup>Expressions in Parentheses</h1>
<p>
You can enclose any operand in parentheses without changing the type or value of the enclosed expression. For example, in the expression:</p>
<pre><code>( 10 + 5 ) / 5
</code></pre>
<p>
the parentheses around <code>10 + 5</code> mean that the value of <code>10 + 5</code> is evaluated first and it becomes the left operand of the division (<b>/</b>) operator. The result of <code>( 10 + 5 ) / 5</code> is 3. Without the parentheses, <code>10 + 5 / 5</code> would evaluate to 11. </p>
<p>
Although parentheses affect the way operands are grouped in an expression, they cannot guarantee a particular order of evaluation in all cases. For example, neither the parentheses nor the left-to-right grouping of the following expression guarantees what the value of <code>i</code> will be in either of the subexpressions: </p>
<pre><code>( i++ +1 ) * ( 2 + i )
</code></pre>
<p>
The compiler is free to evaluate the two sides of the multiplication in any order. If the initial value of <code>i</code> is zero, the whole expression could be evaluated as either of these two statements: </p>
<pre><code>( 0 + 1 + 1 ) * ( 2 + 1 ) 
( 0 + 1 + 1 ) * ( 2 + 0 )
</code></pre>
<p>
Exceptions resulting from side effects are discussed in <a href="_clang_side_effects.htm">Side Effects</a>.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Non-Predicate Version of adjacent_find (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_adjacent_find">Non-Predicate Version of adjacent_find (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the non-predicate version of the <code>adjacent_find</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class ForwardIterator&gt; inline
     ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last) ;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The adjacent_find algorithm finds consecutive pairs of matching elements in a sequence. The adjacent_find algorithm returns an iterator referencing the first consecutive matching element in the range (first, last), or last if there are no such elements.  Comparison is done using operator== in this non-predicate version of the algorithm.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// adfind.cpp : Illustrates how to use the  non-predicate version of
//              adjacent_find function.
//
// Functions:
//
//   adjacent_find - Locate a matching consecutive sequence in a range.
//////////////////////////////////////////////////////////////////////

#include &lt;algorithm&gt;
#include &lt;iostream&gt;

using namespace std;


void main()
{
    const int ARRAY_SIZE = 8 ;
    int IntArray[ARRAY_SIZE] = { 1, 2, 3, 4, 4, 5, 6, 7 } ;

    int *location ;   // stores the position for the first pair
                      // of matching consecutive elements.

    int i ;

    // print content of IntArray
    cout &lt;&lt; "IntArray { " ;
    for(i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; IntArray[i] &lt;&lt; ", " ;
    cout &lt;&lt; " }" &lt;&lt; endl ;

    // Find the first pair of matching consecutive elements
    // in the range [first, last + 1)
    // This version performs matching using operator==
    location = adjacent_find(IntArray, IntArray + ARRAY_SIZE) ;

    //print the matching consecutive elements if any were found
    if (location != IntArray + ARRAY_SIZE)  // matching consecutive
                                            // elements found
        cout &lt;&lt; "Found adjacent pair of matching elements: ("
        &lt;&lt; *location &lt;&lt; ", " &lt;&lt; *(location + 1) &lt;&lt; "), " &lt;&lt;
        "at location " &lt;&lt; location - IntArray &lt;&lt; endl;
    else         // no matching consecutive elements were found
        cout &lt;&lt; "No adjacent pair of matching elements were found"
        &lt;&lt; endl ;

}

 </code></pre>

<p>Program Output is:</p>

<pre><code>IntArray { 1, 2, 3, 4, 4, 5, 6, 7,  }
Found adjacent pair of matching elements: (4, 4), at location 3
</code></pre>

</body>
</html>

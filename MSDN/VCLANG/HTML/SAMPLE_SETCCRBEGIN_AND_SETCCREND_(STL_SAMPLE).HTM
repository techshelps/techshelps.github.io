<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set::rbegin and set::rend (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_setCCrbegin_rend">set::rbegin and set::rend (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>set::rbegin</code> and <code>set::rend</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;set&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _K, class _Pr, class _A&gt;
     class set 
     {
         public:
         // Function 1:
         const_reverse_iterator rbegin() const;
         // Function 2:
         const_reverse_iterator rend() const;
     }
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The rbegin function returns a reverse bidirectional iterator that points just beyond the end of the controlled sequence. The rend function returns a reverse bidirectional iterator that points at the first element of the sequence.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// SetRbeginRend.cpp:
//      Illustrates how to use the rbegin function to get a reverse
//      bidirectional iterator that points just beyond the end of
//      the controlled sequence. It also illustrates how to use
//      the rend function to get a reverse bidirectional iterator
//      that points at the first element of the sequence.
//
// Functions:
//
//    rbegin      Returns a reverse bidirectional iterator that points
//                just beyond the end of the controlled sequence.
//    rend        Returns a reverse bidirectional iterator that points
//                at the first element of the sequence.
//
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;set&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef set&lt;int&gt; SET_INT;

void main() {
  SET_INT s1;
  SET_INT::reverse_iterator i;
  cout &lt;&lt; "s1.insert(5)" &lt;&lt; endl;
  s1.insert(5);
  cout &lt;&lt; "s1.insert(10)" &lt;&lt; endl;
  s1.insert(10);
  cout &lt;&lt; "s1.insert(15)" &lt;&lt; endl;
  s1.insert(15);
  cout &lt;&lt; "s1.insert(20)" &lt;&lt; endl;
  s1.insert(20);

  // displays: 20,15,10,5
  for (i=s1.rbegin();i!=s1.rend();i++)
     cout &lt;&lt; "s1 has " &lt;&lt; *i &lt;&lt; " in its set." &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
s1.insert(5)
s1.insert(10)
s1.insert(15)
s1.insert(20)
s1 has 20 in its set.
s1 has 15 in its set.
s1 has 10 in its set.
s1 has 5 in its set.
</code></pre>

</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Array Declarations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_array_declarations"></a><sup></sup>Array Declarations</h1>
<p>
An “array declaration” names the array and specifies the type of its elements. It can also define the number of elements in the array. A variable with array type is considered a pointer to the type of the array elements.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>declaration</i> :</p>
<p class=indent>
<i>declaration-specifiers init-declarator-list</i> <sub>opt</sub> <b>;</b></p>
<p class=dt>
<i>init-declarator-list</i> :</p>
<p class=indent>
<i>init-declarator</i><br>
<i>init-declarator-list</i> <b>,</b> <i>init-declarator</i></p>
<p class=dt>
<i>init-declarator</i> :</p>
<p class=indent>
<i>declarator</i><br>
<i>declarator</i> <b>=</b> <i>initializer</i></p>
<p class=dt>
<i>declarator</i> :</p>
<p class=indent>
<i>pointer</i> <sub>opt</sub> <i>direct-declarator</i></p>
<p class=dt>
<i>direct-declarator</i> :</p>
<p class=indent>
<i>direct-declarator</i> <b>[</b> <i>constant-expression</i> <sub>opt</sub> <b>]</b></p>
<p>
Because <i>constant-expression</i> is optional, the syntax has two forms:
<ul type=disc>
<li>
The first form defines an array variable. The <i>constant-expression</i> argument within the brackets specifies the number of elements in the array. The <i>constant-expression</i>, if present, must have integral type, and a value larger than zero. Each element has the type given by <i>type-specifier</i>, which can be any type except <b>void</b>. An array element cannot be a function type.<br><br></li>
<li>
The second form declares a variable that has been defined elsewhere. It omits the <i>constant-expression</i> argument in brackets, but not the brackets. You can use this form only if you previously have initialized the array, declared it as a parameter, or declared it as a reference to an array explicitly defined elsewhere in the program. </li>
</ul>
<p>
In both forms, <i>direct-declarator</i> names the variable and can modify the variable’s type. The brackets (<b>[ ]</b>) following <i>direct-declarator</i> modify the declarator to an array type. </p>
<p>
Type qualifiers can appear in the declaration of an object of array type, but the qualifiers apply to the elements rather than the array itself.</p>
<p>
You can declare an array of arrays (a “multidimensional” array) by following the array declarator with a list of bracketed constant expressions in this form: </p>
<p>
<i>type-specifier</i> <i>declarator</i> <b>[</b><i>constant-expression</i><b>]</b> <b>[</b><i>constant-expression</i><b>]</b> ...</p>
<p>
Each <i>constant-expression</i> in brackets defines the number of elements in a given dimension: two-dimensional arrays have two bracketed expressions, three-dimensional arrays have three, and so on. You can omit the first constant expression if you have initialized the array, declared it as a parameter, or declared it as a reference to an array explicitly defined elsewhere in the program.</p>
<p>
You can define arrays of pointers to various types of objects by using complex declarators, as described in <a href="_clang_interpreting_more_complex_declarators.htm">Interpreting More Complex Declarators</a>.</p>
<p>
Arrays are stored by row. For example, the following array consists of two rows with three columns each:</p>
<pre><code>char A[2][3];
</code></pre>
<p>
The three columns of the first row are stored first, followed by the three columns of the second row. This means that the last subscript varies most quickly.</p>
<p>
To refer to an individual element of an array, use a subscript expression, as described in <a href="_clang_postfix_operators.htm">Postfix Operators</a> in Chapter 4. </p>
<p class=label>
<b>Examples</b></p>
<p>
These examples illustrate array declarations: </p>
<pre><code>float matrix[10][15];
</code></pre>
<p>
The two-dimensional array named <code>matrix</code> has 150 elements, each having <b>float</b> type.</p>
<pre><code>struct {
 &nbsp;&nbsp; float x, y;
} complex[100];
</code></pre>
<p>
This is a declaration of an array of structures. This array has 100 elements; each element is a structure containing two members.</p>
<pre><code>extern char *name[];
</code></pre>
<p>
This statement declares the type and name of an array of pointers to <b>char</b>. The actual definition of <code>name</code> occurs elsewhere.</p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The type of integer required to hold the maximum size of an array is the size of <b>size_t</b>. Defined in the header file STDDEF.H, <b>size_t</b> is an <b>unsigned int</b> with the range 0x00000000 to 0x7CFFFFFF. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

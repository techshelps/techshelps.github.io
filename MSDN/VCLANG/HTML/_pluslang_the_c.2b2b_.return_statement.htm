<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The C++ return Statement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_the_c.2b2b_.return_statement"></a><sup></sup>The C++ return Statement</h1>
<p>
The <b>return</b> statement allows a function to immediately transfer control back to the calling function (or, in the case of the main function, transfer control back to the operating system). The <b>return</b> statement accepts an expression, which is the value passed back to the calling function. Functions of type <b>void</b>, constructors, and destructors cannot specify expressions in the <b>return</b> statement; functions of all other types must specify an expression in the <b>return</b> statement.</p>
<p>
The expression, if specified, is converted to the type specified in the function declaration, as if an initialization were being performed. Conversion from the type of the expression to the <b>return</b> type of the function can cause temporary objects to be created. See <a href="_pluslang_temporary_objects.htm">Temporary Objects</a> in Chapter 11 for more information about how and when temporaries are created.</p>
<p>
When the flow of control exits the block enclosing the function definition, the result is the same as it would be if a <b>return</b> statement with no expression had been executed. This is illegal for functions that are declared as returning a value.</p>
<p>
A function can have any number of <b>return</b> statements.</p>
</font></BODY>
</HTML>

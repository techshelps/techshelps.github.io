<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use of typedef with Class Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_use_of_typedef_with_class_types"></a><sup></sup>Use of typedef with Class Types</h1>
<p>
Use of the <b>typedef</b> specifier with class types is supported largely because of the ANSI C practice of declaring unnamed structures in <b>typedef</b> declarations. For example, many C programmers use the following:</p>
<pre><code>typedef struct&nbsp;&nbsp;&nbsp; // Declare an unnamed structure and give it the
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; typedef name POINT.
 &nbsp;&nbsp; unsigned x;
 &nbsp;&nbsp; unsigned y;
} POINT;
</code></pre>
<p>
The advantage of such a declaration is that it enables declarations like:</p>
<pre><code>POINT ptOrigin;
</code></pre>
<p>
instead of:</p>
<pre><code>struct point_t ptOrigin;
</code></pre>
<p>
In C++, the difference between <b>typedef</b> names and real types (declared with the <b>class</b>, <b>struct</b>, <b>union</b>, and <b>enum</b> keywords) is more distinct. Although the C practice of declaring a nameless structure in a <b>typedef</b> statement still works, it provides no notational benefits as it does in C.</p>
<p>
In the following code, the <code>POINT</code> function is not a type constructor. It is interpreted as a function declarator with an <b>int</b> return type.</p>
<pre><code>typedef struct
{
 &nbsp;&nbsp; POINT();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Not a constructor.
 &nbsp;&nbsp; unsigned x;
 &nbsp;&nbsp; unsigned y;
} POINT;
</code></pre>
<p>
The preceding example declares a class named <code>POINT</code> using the unnamed class <b>typedef</b> syntax. <code>POINT</code> is treated as a class name; however, the following restrictions apply to names introduced this way:
<ul type=disc>
<li>
The name (the synonym) cannot appear after a <b>class</b>, <b>struct</b>, or <b>union</b> prefix.<br><br></li>
<li>
The name cannot be used as constructor or destructor names within a class declaration.</li>
</ul>
<p>
In summary, this syntax does not provide any mechanism for inheritance, construction, or destruction.</p>
</font></BODY>
</HTML>

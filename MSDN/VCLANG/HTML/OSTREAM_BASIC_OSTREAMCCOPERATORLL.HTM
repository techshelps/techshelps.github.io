<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_ostream::operator&lt;&lt;</title></head>
<body bgcolor=white>

<h3><a name="basic_ostream::operator&lt;&lt;">basic_ostream::operator&lt;&lt;</a></h3>
<META NAME="MS-HKWD" CONTENT="operator<<">
<pre><code>basic_ostream&amp; <b>operator&lt;&lt;</b>(
    basic_ostream&amp; (*pf)(basic_ostream&amp;));
basic_ostream&amp; <b>operator&lt;&lt;</b>(
    basic_ios&lt;E, T&gt;&amp; (*pf)(basic_ios&lt;E, T&gt;&amp;));
basic_ostream&amp; <b>operator&lt;&lt;</b>(
    ios_base&lt;E, T&gt;&amp; (*pf)(ios_base&lt;E, T&gt;&amp;));
basic_ostream&amp; <b>operator&lt;&lt;</b>(
    basic_streambuf&lt;E, T&gt; *sb);
basic_ostream&amp; <b>operator&lt;&lt;</b>(const char *s);
basic_ostream&amp; <b>operator&lt;&lt;</b>(char c);
basic_ostream&amp; <b>operator&lt;&lt;</b>(bool n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(short n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(unsigned short n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(int n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(unsigned int n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(long n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(unsigned long n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(float n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(double n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(long double n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(void *n);</code></pre>
<p>The first member function ensures that an expression of the form <code>ostr &lt;&lt;: endl</code> calls <a href="OSTREAM_endl.htm#endl"><code>endl</code></a><code>(ostr)</code>, then returns 
<code>*this</code>. The second and third functions ensure that other <a href="IOS.htm#manipulators">manipulators</a>, such as <a href="IOS_hex.htm#hex"><code>hex</code></a> behave similarly. The remaining 
functions are all <a href="OSTREAM_basic_ostream.htm#formatted output functions">formatted output functions</a>.</p>
<p>The function:</p>
<pre><code>basic_ostream&amp; <b>operator&lt;&lt;</b>(
    basic_streambuf&lt;E, T&gt; *sb);</code></pre>
<p>extracts elements from <code>sb</code>, if <code>sb</code> is not a null pointer, and inserts them. Extraction stops on end-of-file, or if an extraction 
throws an exception (which is rethrown). It also stops, without extracting the element in question, if an insertion fails. If 
the function inserts no elements, or if an extraction throws an exception, the function calls <a href="IOS_basic_iosCCsetstate.htm#basic_ios::setstate"><code>setstate</code></a><code>(failbit)</code>. In any 
case, the function returns <code>*this</code>.</p>
<p>The function:</p>
<pre><code>basic_ostream&amp; <b>operator&lt;&lt;</b>(const char *s);</code></pre>
<p>determines the length <code>n = </code><code>strlen</code><code>(s)</code> of the sequence beginning at <code>s</code>, and inserts the widened sequence. Each element 
<code>c</code> of the sequence is widened by calling <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt; </code><a href="LOCALE2_ctype.htm#ctype"><code>ctype</code></a><code>&lt;E&gt; &gt;( </code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). </code><a href="LOCALE2_ctypeCCwiden.htm#ctype::widen"><code>widen</code></a><code>(c)</code>. If <code>n &lt; </code><a href="IOS_ios_baseCCwidth.htm#ios_base::width"><code>width</code></a><code>()</code>, then 
the function also inserts a repetition of <code>width() - n</code> <a href="IOS_basic_ios.htm#fill character">fill characters</a>. The repetition precedes the sequence if <code>(</code><a href="IOS_ios_baseCCflags.htm#ios_base::flags"><code>flags</code></a><code>() 
&amp; </code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::adjustfield"><code>adjustfield</code></a><code> != </code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::left"><code>left</code></a>. Otherwise, the repetition follows the sequence.</p>
<p>The function:</p>
<pre><code>basic_ostream&amp; <b>operator&lt;&lt;</b>(char c);</code></pre>
<p>inserts the widened element <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt; </code><a href="LOCALE2_ctype.htm#ctype"><code>ctype</code></a><code>&lt;E&gt; &gt;( </code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). </code><a href="LOCALE2_ctypeCCwiden.htm#ctype::widen"><code>widen</code></a><code>(c)</code>. It returns <code>*this</code>.</p>
<p>The function:</p>
<pre><code>basic_ostream&amp; <b>operator&lt;&lt;</b>(bool n);</code></pre>
<p>converts <code>n</code> to a Boolean field and inserts it by calling <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt;num_put&lt;E, OutIt&gt;(</code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). </code><a href="LOCALE2_num_putCCput.htm#num_put::put"><code>put</code></a><code>(OutIt( 
</code><a href="IOS_basic_iosCCrdbuf.htm#basic_ios::rdbuf"><code>rdbuf</code></a><code>()), *this, getloc(), n)</code>. Here, <code>OutIt</code> is defined as <a href="ITERATOR_ostreambuf_iterator.htm#ostreambuf_iterator"><code>ostreambuf_iterator</code></a><code>&lt;E, T&gt;</code>. The function 
returns <code>*this</code>.</p>
<p>The functions:</p>
<pre><code>basic_ostream&amp; <b>operator&lt;&lt;</b>(short n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(unsigned short n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(int n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(unsigned int n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(long n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(unsigned long n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(void *n);</code></pre>
<p>each convert <code>n</code> to a numeric field and insert it by calling <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt;num_put&lt;E, OutIt&gt;(</code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). 
</code><a href="LOCALE2_num_putCCput.htm#num_put::put"><code>put</code></a><code>(OutIt( </code><a href="IOS_basic_iosCCrdbuf.htm#basic_ios::rdbuf"><code>rdbuf</code></a><code>()), *this, getloc(), n)</code>. Here, <code>OutIt</code> is defined as <a href="ITERATOR_ostreambuf_iterator.htm#ostreambuf_iterator"><code>ostreambuf_iterator</code></a><code>&lt;E, T&gt;</code>. 
The function returns <code>*this</code>.</p>
<p>The functions:</p>
<pre><code>basic_ostream&amp; <b>operator&lt;&lt;</b>(float n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(double n);
basic_ostream&amp; <b>operator&lt;&lt;</b>(long double n);</code></pre>
<p>each convert <code>n</code> to a numeric field and insert it by calling <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code>&lt;num_put&lt;E, OutIt&gt;(</code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). 
</code><a href="LOCALE2_num_putCCput.htm#num_put::put"><code>put</code></a><code>(OutIt( </code><a href="IOS_basic_iosCCrdbuf.htm#basic_ios::rdbuf"><code>rdbuf</code></a><code>()), *this, getloc(), n)</code>. Here, <code>OutIt</code> is defined as <a href="ITERATOR_ostreambuf_iterator.htm#ostreambuf_iterator"><code>ostreambuf_iterator</code></a><code>&lt;E, T&gt;</code>. 
The function returns <code>*this</code>.</p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variable Argument Lists</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_variable_argument_lists"></a><sup></sup>Variable Argument Lists</h1>
<p>
Function declarations in which the last member of <i>argument-declaration-list</i> is the ellipsis (...) can take a variable number of arguments. In these cases, C++ provides type checking only for the explicitly declared arguments. You can use variable argument lists when you need to make a function so general that even the number and types of arguments can vary. The <b>printf</b> family of functions is an example of functions that use variable argument lists.</p>
<p>
To access arguments after those declared, use the macros contained in the standard include file STDARG.H as described in <a href="_pluslang_functions_with_variable_argument_lists.htm">Functions with Variable Argument Lists</a>.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
Microsoft C++ allows the ellipsis to be specified as an argument if the ellipsis is the first argument and the ellipsis is preceded by a comma. Therefore, the declaration <code>int Func( int i, ... );</code> is legal, but <code>int Func( int i ... );</code> is not.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
Declaration of a function that takes a variable number of arguments requires at least one “placeholder” argument, even if it is not used. If this place-holder argument is not supplied, there is no way to access the remaining arguments.</p>
<p>
When arguments of type <b>char</b> are passed as variable arguments, they are converted to type <b>int</b>. Similarly, when arguments of type <b>float</b> are passed as variable arguments, they are converted to type <b>double</b>. Arguments of other types are subject to the usual integral and floating-point promotions. See <a href="_pluslang_integral_promotions.htm">Integral Promotions</a> in Chapter 3 for more information.</p>
</font></BODY>
</HTML>

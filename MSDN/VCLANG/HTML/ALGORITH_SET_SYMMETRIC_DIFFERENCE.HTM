<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set_symmetric_difference</title></head>
<body bgcolor=white>

<h2><a name="set_symmetric_difference">set_symmetric_difference</a></h2>
<META NAME="MS-HKWD" CONTENT="set_symmetric_difference">
<pre><code>template&lt;class InIt1, class InIt2, class OutIt&gt;
    OutIt <b>set_symmetric_difference</b>(InIt1 first1, InIt1 last1,
        InIt2 first2, InIt2 last2, OutIt x);
template&lt;class InIt1, class InIt2, class OutIt, class Pred&gt;
    OutIt <b>set_symmetric_difference</b>(InIt1 first1, InIt1 last1,
        InIt2 first2, InIt2 last2, OutIt x, Pred pr);</code></pre>
<p>The first template function alternately copies values from two sequences designated by iterators in the ranges <code>[first1, 
last1)</code> and <code>[first2, last2)</code>, both <a href="lib_stl_Algorithm_Conventions.htm#sequence ordering">ordered by</a> <code>operator&lt;</code>, to form a merged sequence of length <code>K</code> beginning at <code>x</code>, 
also ordered by <code>operator&lt;</code>. The function then returns <code>x + K</code>.</p>
<p>The merge occurs without altering the relative order of elements within either sequence. Moreover, for two elements 
from different sequences that have <a href="lib_stl_Algorithm_Conventions.htm#equivalent ordering">equivalent ordering</a> that would otherwise be copied to adjacent elements, the 
function copies neither element. An element from one sequence that has equivalent ordering with no element from the 
other sequence is copied. Thus, the function merges two ordered sequences to form another ordered sequence that is 
effectively the symmetric difference of two sets.</p>
<p>If <code>x</code> and <code>first1</code> designate regions of storage, the range <code>[x, x + K)</code> must not overlap the range <code>[first1, last1)</code>. 
If <code>x</code> and <code>first2</code> designate regions of storage, the range <code>[x, x + K)</code> must not overlap the range <code>[first2, last2)</code>. 
The function evaluates the ordering predicate <code>X &lt; Y</code> at most <code>2 * ((last1 - first1) + (last2 - first2)) - 
1</code> times.</p>
<p>The second template function behaves the same, except that it replaces <code>operator&lt;(X, Y)</code> with <code>pr(X, Y)</code>.</p>

</body>
</html>

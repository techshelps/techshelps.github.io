<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binary Operators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_binary_operators"></a><sup></sup>Binary Operators</h1>
<p>
Table 12.5 shows a list of operators that can be overloaded.</p>
<p class=label>
<b><a name="_pluslang_table_12..5"></a>Table 12.5&nbsp;&nbsp;&nbsp;Redefinable Binary Operators</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><b>Operator</b></td>
<td class=label width=80%><b>Name</b></td>
</tr>
<tr valign=top>
<td width=20%><b>,</b></td>
<td width=80%>Comma</td>
</tr>
<tr valign=top>
<td width=20%><b>!=</b></td>
<td width=80%>Inequality</td>
</tr>
<tr valign=top>
<td width=20%><b>%</b></td>
<td width=80%>Modulus</td>
</tr>
<tr valign=top>
<td width=20%><b>%=</b></td>
<td width=80%>Modulus/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>&amp;</b></td>
<td width=80%>Bitwise AND</td>
</tr>
<tr valign=top>
<td width=20%><b>&amp;&amp;</b></td>
<td width=80%>Logical AND</td>
</tr>
<tr valign=top>
<td width=20%><b>&amp;=</b></td>
<td width=80%>Bitwise AND/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>*</b></td>
<td width=80%>Multiplication</td>
</tr>
<tr valign=top>
<td width=20%><b>*=</b></td>
<td width=80%>Multiplication/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>+</b></td>
<td width=80%>Addition</td>
</tr>
<tr valign=top>
<td width=20%><b>+=</b></td>
<td width=80%>Addition/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>–</b></td>
<td width=80%>Subtraction</td>
</tr>
<tr valign=top>
<td width=20%><b>–=</b></td>
<td width=80%>Subtraction/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>–&gt;</b></td>
<td width=80%>Member selection</td>
</tr>
<tr valign=top>
<td width=20%><b>–&gt;*</b></td>
<td width=80%>Pointer-to-member selection</td>
</tr>
<tr valign=top>
<td width=20%><b>/</b></td>
<td width=80%>Division</td>
</tr>
<tr valign=top>
<td width=20%><b>/=</b></td>
<td width=80%>Division/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>&lt;</b></td>
<td width=80%>Less than</td>
</tr>
<tr valign=top>
<td width=20%><b>&lt;&lt;</b></td>
<td width=80%>Left shift</td>
</tr>
<tr valign=top>
<td width=20%><b>&lt;&lt;=</b></td>
<td width=80%>Left shift/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>&lt;=</b></td>
<td width=80%>Less than or equal to</td>
</tr>
<tr valign=top>
<td width=20%><b>=</b></td>
<td width=80%>Assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>==</b></td>
<td width=80%>Equality</td>
</tr>
<tr valign=top>
<td width=20%><b>&gt;</b></td>
<td width=80%>Greater than</td>
</tr>
<tr valign=top>
<td width=20%><b>&gt;=</b></td>
<td width=80%>Greater than or equal to</td>
</tr>
<tr valign=top>
<td width=20%><b>&gt;&gt;</b></td>
<td width=80%>Right shift</td>
</tr>
<tr valign=top>
<td width=20%><b>&gt;&gt;=</b></td>
<td width=80%>Right shift/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>^</b></td>
<td width=80%>Exclusive OR</td>
</tr>
<tr valign=top>
<td width=20%><b>^=</b></td>
<td width=80%>Exclusive OR/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>|</b></td>
<td width=80%>Bitwise inclusive OR</td>
</tr>
<tr valign=top>
<td width=20%><b>|=</b></td>
<td width=80%>Bitwise inclusive OR/assignment</td>
</tr>
<tr valign=top>
<td width=20%><b>||</b></td>
<td width=80%>Logical OR</td>
</tr>
</table><br>
<p>
To declare a binary operator function as a nonstatic member, you must declare it in the form:</p>
<p>
<i>ret-type</i> <b>operator</b><i>op</i><b>(</b> <i>arg</i> <b>)</b></p>
<p>
where <i>ret-type</i> is the return type, <i>op</i> is one of the operators listed in Table 12.5, and <i>arg</i> is an argument of any type. </p>
<p>
To declare a binary operator function as a global function, you must declare it in the form:</p>
<p>
<i>ret-type</i> <b>operator</b><i>op</i><b>(</b> <i>arg1</i><b>,</b> <i>arg2</i> <b>)</b></p>
<p>
where <i>ret-type</i> and <i>op</i> are as described for member operator functions and <i>arg1</i> and <i>arg2</i> are arguments. At least one of the arguments must be of class type.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;There is no restriction on the return types of the binary operators; however, most user-defined binary operators return either a class type or a reference to a class type.</p>
</font></BODY>
</HTML>

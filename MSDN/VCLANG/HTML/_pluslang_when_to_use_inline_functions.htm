<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When to Use Inline Functions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_when_to_use_inline_functions"></a><sup></sup>When to Use Inline Functions</h1>
<p>
Inline functions are best used for small functions such as accessing private data members. The main purpose of these one- or two-line “accessor” functions is to return state information about objects; short functions are sensitive to the overhead of function calls. Longer functions spend proportionately less time in the calling/returning sequence and benefit less from inlining.</p>
<p>
The <code>Point</code> class, introduced in <a href="_pluslang_function.2d.call_results.htm">Function-Call Results</a> in Chapter 4 can be optimized as follows:</p>
<pre><code>class Point
{
public:
 &nbsp;&nbsp; // Define "accessor" functions as
 &nbsp;&nbsp; //&nbsp; reference types.
 &nbsp;&nbsp; unsigned&amp; x();
 &nbsp;&nbsp; unsigned&amp; y();
private:
 &nbsp;&nbsp; unsigned _x;
 &nbsp;&nbsp; unsigned _y;
};

inline unsigned&amp; Point::x()
{
 &nbsp;&nbsp; return _x;
}
inline unsigned&amp; Point::y()
{
 &nbsp;&nbsp; return _y;
}
</code></pre>
<p>
Assuming coordinate manipulation is a relatively common operation in a client of such a class, specifying the two accessor functions (<code>x</code> and <code>y</code> in the preceding example) as <b>inline</b> typically saves the overhead on:
<ul type=disc>
<li>
Function calls (including parameter passing and placing the object’s address on the stack)<br><br></li>
<li>
Preservation of caller’s stack frame<br><br></li>
<li>
New stack-frame setup<br><br></li>
<li>
Return-value communication<br><br></li>
<li>
Old stack-frame restore<br><br></li>
<li>
Return</li>
</ul>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Templates</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_function_templates"></a><sup></sup>Function Templates</h1>
<p>
Class templates define a family of related classes that are based on the parameters passed to the class upon instantiation. Function templates are similar to class templates, but define a family of functions. Here is a function template that swaps two items:</p>
<pre><code>template&lt; class T &gt; void MySwap( T&amp; a, T&amp; b )
{
   T c;
   c = a; a = b; b = c;
}
</code></pre>
<p>
Although this function could be performed by a nontemplated function, using void pointers, the template version is type-safe. Consider the following calls:</p>
<pre><code>int j = 10;
int k = 18;
CString Hello = "Hello, Windows!";
MySwap( j, k );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //OK
MySwap( j, Hello );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //error
</code></pre>
<p>
The second <code>MySwap</code> call triggers a compile-time error, since the compile cannot generate a <code>MySwap</code> function with parameters of different types. If void pointers were used, both function calls would compile correctly, but the function would not work properly at run time.</p>
<p>
Explicit specification of the template arguments for a function template is allowed. For example:</p>
<pre><code>template&lt;class T&gt; void f(T) {...}
void g(char j) {
   f&lt;int&gt;(j);   //generate the specialization f(int)
}
</code></pre>
<p>
When the template argument is explicitly specified, normal implicit conversions are done to convert the function argument to the type of the corresponding function template parameters. In the above example, the compiler will convert (<code>char j</code>) to type <code>int</code>.</p>
</font></BODY>
</HTML>

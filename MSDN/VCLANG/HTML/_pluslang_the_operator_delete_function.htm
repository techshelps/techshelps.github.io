<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The operator delete Function</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_the_operator_delete_function"></a>The operator delete Function</h1>
<p>
Memory that is dynamically allocated using the <b>new</b> operator can be freed using the <b>delete</b> operator. The delete operator calls the <b>operator delete </b>function, which frees memory back to the available pool. Using the <b>delete</b> operator also causes the class destructor (if there is one) to be called.</p>
<p>
There are global and class-scoped <b>operator delete </b>functions. Only one <b>operator delete </b>function can be defined for a given class; if defined, it hides the global <b>operator delete </b>function. The global <b>operator delete </b>function is always called for arrays of any type.</p>
<p>
The global <b>operator delete </b>function, if declared, takes a single argument of type <b>void *</b>, which contains a pointer to the object to deallocate. The return type is <b>void</b> (<b>operator delete </b>cannot return a value). Two forms exist for class-member <b>operator delete </b>functions:</p>
<pre><code>void operator delete( void * );
void operator delete( void *, size_t );
</code></pre>
<p>
Only one of the preceding two variants can be present for a given class. The first form works as described for global <b>operator delete</b>. The second form takes two arguments, the first of which is a pointer to the memory block to deallocate and the second of which is the number of bytes to deallocate. The second form is particularly useful when an <b>operator delete </b>function from a base class is used to delete an object of a derived class.</p>
<p>
The <b>operator delete </b>function is static; therefore, it cannot be virtual. The <b>operator delete</b> function obeys access control, as described in Chapter 10, <a href="_pluslang_member.2d.access_control.htm">Member-Access Control</a>.</p>
<p>
The following example shows user-defined <b>operator new </b>and <b>operator delete </b>functions designed to log allocations and deallocations of memory:</p>
<pre><code>#include &lt;iostream.h&gt;
#include &lt;stdlib.h&gt;

int fLogMemory = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Perform logging (0=no; nonzero=yes)?
int cBlocksAllocated = 0;&nbsp; // Count of blocks allocated.
// User-defined operator new.
void *operator new( size_t stAllocateBlock )
{
 &nbsp;&nbsp; static fInOpNew = 0;&nbsp;&nbsp;&nbsp; // Guard flag.

 &nbsp;&nbsp; if( fLogMemory &amp;&amp; !fInOpNew )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fInOpNew = 1;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clog &lt;&lt; "Memory block "&nbsp;&nbsp; &lt;&lt; ++cBlocksAllocated
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; " allocated for " &lt;&lt; stAllocateBlock
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; " bytes\n";
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fInOpNew = 0;
 &nbsp;&nbsp; }

 &nbsp;&nbsp; return malloc( stAllocateBlock );
}
// User-defined operator delete.
void operator delete( void *pvMem )
{
 &nbsp;&nbsp; static fInOpDelete = 0;&nbsp;&nbsp;&nbsp; // Guard flag.
 &nbsp;&nbsp; if( fLogMemory &amp;&amp; !fInOpDelete )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fInOpDelete = 1;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clog &lt;&lt; "Memory block " &lt;&lt; --cBlocksAllocated
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; " deallocated\n";
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fInOpDelete = 0;
 &nbsp;&nbsp; }

 &nbsp;&nbsp; free( pvMem );
}

int main( int argc, char *argv[] )
{
 &nbsp;&nbsp; fLogMemory = 1;&nbsp; // Turn logging on.
 &nbsp;&nbsp; if( argc &gt; 1 )
 &nbsp;&nbsp; for( int i = 0; i &lt; atoi( argv[1] ); ++i )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *pMem = new char[10];
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delete[] pMem;
 &nbsp;&nbsp; }

 &nbsp;&nbsp; return cBlocksAllocated;
}
</code></pre>
<p>
The preceding code can be used to detect “memory leakage” — that is, memory that is allocated on the free store but never freed. To perform this detection, the global <b>new</b> and <b>delete</b> operators are redefined to count allocation and deallocation of memory.</p>
<p>
Beginning with Visual C++ 5.0, the compiler supports member array <b>new</b> and <b>delete</b> operators in a class declaration. For example:</p>
<pre><code>class X {
public:
   void*   operator new[] (size_t);
   void      operator delete[] (void*);
};

void f() {
   X *pX = new X[5];
   delete [] pX;
}
</code></pre>
</font></BODY>
</HTML>

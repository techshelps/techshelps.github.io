<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conversions from Signed Integral Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_conversions_from_signed_integral_types"></a><sup></sup>Conversions from Signed Integral Types </h1>
<p>
When a signed integer is converted to an unsigned integer with equal or greater size and the value of the signed integer is not negative, the value is unchanged. The conversion is made by sign-extending the signed integer. A signed integer is converted to a shorter signed integer by truncating the high-order bits. The result is interpreted as an unsigned value, as shown in this example.&nbsp;&nbsp;&nbsp;</p>
<pre><code>int i = -3;
unsigned short u;

u = i; 
printf( "%hu\n", u );&nbsp; /* Prints 65533 */
</code></pre>
<p>
No information is lost when a signed integer is converted to a floating value, except that some precision may be lost when a <b>long int</b> or <b>unsigned long int</b> value is converted to a <b>float</b> value.</p>
<p>
Table 4.2 summarizes conversions from signed integral types. This table assumes that the <b>char</b> type is signed by default. If you use a compile-time option to change the default for the <b>char</b> type to unsigned, the conversions given in <a href="_clang_conversions_from_unsigned_integral_types.htm#_clang_table_4..3">Table 4.3</a> for the <b>unsigned char</b> type apply instead of the conversions in Table 4.2.</p>
<p class=label>
<b><a name="_clang_table_4..2"></a>Table 4.2&nbsp;&nbsp;&nbsp;Conversions from Signed Integral Types</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=11%><b>From</b></td>
<td class=label width=27%><b>To</b></td>
<td class=label width=62%><b>Method</b></td>
</tr>
<tr valign=top>
<td width=11%><b>char</b><sup>1</sup></td>
<td width=27%><b>short</b></td>
<td width=62%>Sign-extend </td>
</tr>
<tr valign=top>
<td width=11%><b>char</b></td>
<td width=27%><b>long</b></td>
<td width=62%>Sign-extend</td>
</tr>
<tr valign=top>
<td width=11%><b>char</b></td>
<td width=27%><b>unsigned char</b></td>
<td width=62%>Preserve pattern; high-order bit loses function as sign bit</td>
</tr>
<tr valign=top>
<td width=11%><b>char</b></td>
<td width=27%><b>unsigned short</b></td>
<td width=62%>Sign-extend to <b>short</b>; convert <b>short</b> to <b>unsigned short</b></td>
</tr>
<tr valign=top>
<td width=11%><b>char</b></td>
<td width=27%><b>unsigned long</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>unsigned long</b></td>
</tr>
<tr valign=top>
<td width=11%><b>char</b></td>
<td width=27%><b>float</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>float</b></td>
</tr>
<tr valign=top>
<td width=11%><b>char</b></td>
<td width=27%><b>double</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>double</b></td>
</tr>
<tr valign=top>
<td width=11%><b>char</b></td>
<td width=27%><b>long double</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>double</b></td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>char</b></td>
<td width=62%>Preserve low-order byte </td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>long</b></td>
<td width=62%>Sign-extend</td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>unsigned char</b></td>
<td width=62%>Preserve low-order byte</td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>unsigned short</b></td>
<td width=62%>Preserve bit pattern; high-order bit loses function as sign bit</td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>unsigned long</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>unsigned long</b></td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>float</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>float</b></td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>double</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>double</b></td>
</tr>
<tr valign=top>
<td width=11%><b>short</b></td>
<td width=27%><b>long double</b></td>
<td width=62%>Sign-extend to <b>long</b>; convert <b>long</b> to <b>double</b></td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>char</b></td>
<td width=62%>Preserve low-order byte </td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>short</b></td>
<td width=62%>Preserve low-order word</td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>unsigned char</b></td>
<td width=62%>Preserve low-order byte</td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>unsigned short</b></td>
<td width=62%>Preserve low-order word</td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>unsigned long</b></td>
<td width=62%>Preserve bit pattern; high-order bit loses function as sign bit</td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>float</b></td>
<td width=62%>Represent as <b>float</b>. If <b>long</b> cannot be represented exactly, some precision is lost.</td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>double</b></td>
<td width=62%>Represent as <b>double</b>. If <b>long</b> cannot be represented exactly as a <b>double</b>, some precision is lost.</td>
</tr>
<tr valign=top>
<td width=11%><b>long</b></td>
<td width=27%><b>long double</b></td>
<td width=62%>Represent as <b>double</b>. If <b>long</b> cannot be represented exactly as a <b>double</b>, some precision is lost.</td>
</tr>
</table><br>
<p class=mini>
1. All <b>char</b> entries assume that the <b>char</b> type is signed by default.</p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
For the Microsoft 32-bit C compiler, an integer is equivalent to a <b>long</b>. Conversion of an <b>int</b> value proceeds the same as for a <b>long</b>. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

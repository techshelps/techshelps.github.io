<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Tokens</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.tokens"></a>C++ Tokens</h1>
<p>
A token is the smallest element of a C++ program that is meaningful to the compiler. The C++ parser recognizes these kinds of tokens: identifiers, keywords, literals, operators, punctuators, and other separators. A stream of these tokens makes up a translation unit.</p>
<p>
Tokens are usually separated by “white space.” White space can be one or more:
<ul type=disc>
<li>
Blanks<br><br></li>
<li>
Horizontal or vertical tabs<br><br></li>
<li>
New lines<br><br></li>
<li>
Formfeeds<br><br></li>
<li>
Comments</li>
</ul>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>token</i> :</p>
<p class=indent>
<i>keyword</i><br>
<i>identifier</i><br>
<i>constant</i><br>
<i>operator</i><br>
<i>punctuator</i></p>
<p class=dt>
<i>preprocessing-token</i> :</p>
<p class=indent>
<i>header-name</i><br>
<i>identifier</i><br>
<i>pp-number</i><br>
<i>character-constant</i><br>
<i>string-literal</i><br>
<i>operator</i><br>
<i>punctuator</i><br>
each nonwhite-space character that cannot be one of the above</p>
<p>
The parser separates tokens from the input stream by creating the longest token possible using the input characters in a left-to-right scan. Consider this code fragment:</p>
<pre><code>a = i+++j;
</code></pre>
<p>
The programmer who wrote the code might have intended either of these two statements:</p>
<pre><code>a = i + (++j)

a = (i++) + j
</code></pre>
<p>
Because the parser creates the longest token possible from the input stream, it chooses the second interpretation, making the tokens <code>i++</code>, <code>+</code>, and <code>j</code>.</p>
</font></BODY>
</HTML>

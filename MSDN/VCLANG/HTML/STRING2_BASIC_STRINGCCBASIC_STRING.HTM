<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_string::basic_string</title></head>
<body bgcolor=white>

<h3><a name="basic_string::basic_string">basic_string::basic_string</a></h3>
<META NAME="MS-HKWD" CONTENT="basic_string">
<pre><code><b>basic_string</b>(const E *s, const A&amp; al = A());
<b>basic_string</b>(const E *s, size_type n, const A&amp; al = A());
<b>basic_string</b>(const basic_string&amp; rhs);
<b>basic_string</b>(const basic_string&amp; rhs, size_type pos, size_type n,
    const A&amp; al = A());
<b>basic_string</b>(size_type n, E c, const A&amp; al = A());
explicit <b>basic_string</b>(const A&amp; al = A());
<b>basic_string</b>(const_iterator first, const_iterator last,
    const A&amp; al = A());</code></pre>
<p>Each constructor stores the <a href="MEMORY_allocator.htm#allocator object">allocator object</a> <code>al</code> (or, for the copy constructor, <code>x.</code><a href="STRING2_basic_stringCCget_allocator.htm#basic_string::get_allocator"><code>get_allocator</code></a><code>()</code>) in 
<a href="STRING2_basic_string.htm#basic_string::allocator"><code>allocator</code></a> and initializes the controlled sequence to a copy of the <a href="STRING2_basic_string.htm#operand sequence">operand sequence</a> specified by the remaining 
operands. The <code>explicit</code> constructor specifies an empty initial controlled sequence.</p>
<p>In this <a href="INDEX_Table_of_Contents.htm#implementation">implementation</a>, if a translator does not support member template functions, the template:</p>
<pre><code>template &lt;class InIt&gt;
    <b>basic_string</b>(InIt first, InIt last, const A&amp; al = A());</code></pre>
<p>is replaced by:</p>
<pre><code><b>basic_string</b>(const_iterator first, const_iterator last,
    const A&amp; al = A());</code></pre>
</body>
</html>

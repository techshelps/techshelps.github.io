<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_variant_t::_variant_t</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang__variant_t.3a3a._variant_t"></a>_variant_t::_variant_t</h1>
<p>
<b>Microsoft Specific </b></p>
<p>
<b>_variant_t( ) throw( );</b></p>
<p>
<b>_variant_t( const VARIANT&amp; </b><i>varSrc</i><b> ) throw( _com_error );</b></p>
<p>
<b>_variant_t( const VARIANT* </b><i>pVarSrc</i><b> ) throw( _com_error );</b></p>
<p>
<b>_variant_t( const _variant_t&amp; </b><i>var_t_Src</i><b> ) throw( _com_error );</b></p>
<p>
<b>_variant_t( VARIANT&amp; </b><i>varSrc</i><b>, bool </b><i>fCopy</i><b> ) throw( _com_error );</b></p>
<p>
<b>_variant_t( short </b><i>sSrc</i><b>, VARTYPE </b><i>vtSrc</i><b> = VT_I2 ) throw( _com_error );</b></p>
<p>
<b>_variant_t( long </b><i>lSrc</i><b>, VARTYPE </b><i>vtSrc</i><b> = VT_I4 ) throw( _com_error );</b></p>
<p>
<b>_variant_t( float </b><i>fltSrc</i><b> ) throw( );</b></p>
<p>
<b>_variant_t( double </b><i>dblSrc</i><b>, VARTYPE </b><i>vtSrc</i><b> = VT_R8 ) throw( _com_error );</b></p>
<p>
<b>_variant_t( const CY&amp; </b><i>cySrc</i><b> ) throw( );</b></p>
<p>
<b>_variant_t( const _bstr_t&amp; </b><i>bstrSrc</i><b> ) throw( _com_error );</b></p>
<p>
<b>_variant_t( const wchar_t *</b><i>wstrSrc</i><b> ) throw( _com_error );</b></p>
<p>
<b>_variant_t( const char* </b><i>strSrc</i><b> ) throw( _com_error );</b></p>
<p>
<b>_variant_t( bool </b><i>bSrc</i><b> ) throw( );</b></p>
<p>
<b>_variant_t( IUnknown* </b><i>pIUknownSrc</i><b>, bool </b><i>fAddRef</i><b> = true ) throw( );</b></p>
<p>
<b>_variant_t( IDispatch* </b><i>pDispSrc</i><b>, bool </b><i>fAddRef</i><b> = true ) throw( );</b></p>
<p>
<b>_variant_t( const DECIMAL&amp; </b><i>decSrc</i><b> ) throw( );</b></p>
<p>
<b>_variant_t( BYTE </b><i>bSrc</i><b> ) throw( );</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>varSrc</i></p>
<p class=indent>
a <b>VARIANT</b> object to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>pVarSrc</i></p>
<p class=indent>
pointer to a <b>VARIANT</b> object to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>var_t_Src</i></p>
<p class=indent>
a <b>_variant_t</b> object to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>fCopy</i></p>
<p class=indent>
if false, the supplied <b>VARIANT</b> object is attached to the new <b>_variant_t</b> object without making a new copy by <b>VariantCopy</b></p>
<p class=dt>
<i>ISrc, sSrc</i></p>
<p class=indent>
an integer value to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>vtSrc</i></p>
<p class=indent>
the <b>VARTYPE</b> for the new <b>_variant_t</b> object</p>
<p class=dt>
<i>fltSrc, dblSrc</i></p>
<p class=indent>
a numerical value to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>cySrc</i></p>
<p class=indent>
a <b>CY</b> object to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>bstrSrc</i></p>
<p class=indent>
a <b>_bstr_t</b> object to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>strSrc, wstrSrc</i></p>
<p class=indent>
a string to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>bSrc</i></p>
<p class=indent>
a <b>bool</b> value to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>pIUknownSrc</i></p>
<p class=indent>
COM interface pointer to a <b>VT_UNKNOWN</b> object to be encapsulated into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>pDispSrc</i></p>
<p class=indent>
COM interface pointer to a <b>VT_DISPATCH</b> object to be encapsulated into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>decSrc</i></p>
<p class=indent>
a <b>DECIMAL</b> value to be copied into the new <b>_variant_t</b> object</p>
<p class=dt>
<i>bSrc</i></p>
<p class=indent>
a <b>BYTE</b> value to be copied into the new <b>_variant_t</b> object</p>
<p class=label>
<b>Remarks</b></p>
<p>
Constructs a <b>_variant_t</b> object.
<ul type=disc>
<li>
<b>_variant_t( )</b>&nbsp;&nbsp;&nbsp;Constructs an empty <b>_variant_t</b> object, <b>VT_EMPTY</b>.<br><br></li>
<li>
<b>_variant_t( VARIANT&amp; </b><i>varSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object from a copy of the <b>VARIANT</b> object. The variant type is retained.<br><br></li>
<li>
<b>_variant_t( VARIANT* </b><i>pVarSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object from a copy of the <b>VARIANT</b> object. The variant type is retained.<br><br></li>
<li>
<b>_variant_t( _variant_t&amp; </b><i>var_t_Src</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object from another <b>_variant_t</b> object. The variant type is retained.<br><br></li>
<li>
<b>_variant_t( VARIANT&amp; </b><i>varSrc</i><b>, bool </b><i>fCopy</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object from an existing <b>VARIANT</b> object. If <i>fCopy</i> is <b>false</b>, the <b>VARIANT</b> object is attached to the new object without making a copy.<br><br></li>
<li>
<b>_variant_t( short </b><i>sSrc</i><b>, VARTYPE </b><i>vtSrc</i><b> = VT_I2 )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_I2</b> or <b>VT_BOOL</b> from a <b>short</b> integer value. Any other <b>VARTYPE</b> results in an <b>E_INVALIDARG</b> error.<br><br></li>
<li>
<b>_variant_t( long </b><i>lSrc</i><b>, VARTYPE </b><i>vtSrc</i><b> = VT_I4 )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_I4</b>, <b>VT_BOOL</b>, or <b>VT_ERROR</b> from a <b>long</b> integer value. Any other <b>VARTYPE</b> results in an <b>E_INVALIDARG</b> error.<br><br></li>
<li>
<b>_variant_t( float </b><i>fltSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_R4</b> from a <b>float</b> numerical value.<br><br></li>
<li>
<b>_variant_t( double </b><i>dblSrc</i><b>, VARTYPE </b><i>vtSrc</i><b> = VT_R8 )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_R8</b> or <b>VT_DATE</b> from a <b>double</b> numerical value. Any other <b>VARTYPE</b> results in an <b>E_INVALIDARG</b> error.<br><br></li>
<li>
<b>_variant_t( CY&amp; </b><i>cySrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_CY</b> from a <b>CY</b> object.<br><br></li>
<li>
<b>_variant_t( _bstr_t&amp; </b><i>bstrSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_BSTR</b> from a <b>_bstr_t</b> object. A new <b>BSTR</b> is allocated.<br><br></li>
<li>
<b>_variant_t( wchar_t *</b><i>wstrSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_BSTR</b> from a Unicode string. A new <b>BSTR</b> is allocated.<br><br></li>
<li>
<b>_variant_t( char* </b><i>strSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_BSTR</b> from a string. A new <b>BSTR</b> is allocated.<br><br></li>
<li>
<b>_variant_t( bool </b><i>bSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_BOOL</b> from a <b>bool</b> value.<br><br></li>
<li>
<b>_variant_t( IUnknown* </b><i>pIUknownSrc</i><b>, bool </b><i>fAddRef</i><b> = true )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_UNKNOWN</b> from a COM interface pointer. If <i>fAddRef</i> is <b>true</b>, then <b>AddRef</b> is called on the supplied interface pointer to match the call to <b>Release</b> that will occur when the <b>_variant_t</b> object is destroyed. It is up to you to call <b>Release</b> on the supplied interface pointer. If <i>fAddRef</i> is <b>false</b>, this constructor takes ownership of the supplied interface pointer; do not call <b>Release</b> on the supplied interface pointer.<br><br></li>
<li>
<b>_variant_t( IDispatch* </b><i>pDispSrc</i><b>, bool </b><i>fAddRef</i><b> = true )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_DISPATCH</b> from a COM interface pointer. If <i>fAddRef</i> is <b>true</b>, then <b>AddRef</b> is called on the supplied interface pointer to match the call to <b>Release</b> that will occur when the <b>_variant_t</b> object is destroyed. It is up to you to call <b>Release</b> on the supplied interface pointer. If <b>fAddRef</b> is false, this constructor takes ownership of the supplied interface pointer; do not call <b>Release</b> on the supplied interface pointer.<br><br></li>
<li>
<b>_variant_t( DECIMAL&amp; </b><i>decSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_DECIMAL</b> from a <b>DECIMAL</b> value.<br><br></li>
<li>
<b>_variant_t( BYTE </b><i>bSrc</i><b> )</b>&nbsp;&nbsp;&nbsp;Constructs a <b>_variant_t</b> object of type <b>VT_UI1</b> from a <b>BYTE</b> value.</li>
</ul>
<p>
<a href="_pluslang__variant_t.htm">_variant_t Overview</a></p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

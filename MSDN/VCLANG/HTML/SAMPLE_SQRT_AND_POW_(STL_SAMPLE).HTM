<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>sqrt and pow (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_sqrt_pow">sqrt and pow (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>sqrt</code> and <code>pow</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;valarray&gt;</p>
<b>Prototype:</b><br>
<pre><code>
// sqrt
template&lt;class T&gt;
     inline valarray&lt;T&gt; sqrt(const valarray&lt;T&gt;&amp; x);

// pow
template&lt;class T&gt;
     inline valarray&lt;T&gt; pow(const valarray&lt;T&gt;&amp; x, const valarray&lt;T&gt;&amp; y);

template&lt;class T&gt;
     inline valarray&lt;T&gt; pow(const valarray&lt;T&gt; x, const T&amp; y);

template&lt;class T&gt;
     inline valarray&lt;T&gt; pow(const T&amp; x, const valarray&lt;T&gt;&amp; y);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 This article illustrates the use of STL sqrt() and pow() functions through sample code. sqrt() returns an object of class valarray&lt;T&gt;, each of whose elements at index I is the square root of x[I]. pow() has three template functions. The first template function returns an object of class valarray&lt;T&gt;, each of whose elements at index I is x[I] raised to the power of y[I]. The second template function stores in element I x[I] raised to the power of y. The third template function stores in element I x raised to the power of y[I].  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// main.cpp : Illustrates the use of STL sqrt() and pow() functions.
//
// Functions:
//
//    sqrt, pow
//////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;                 // for i/o functions
#include &lt;valarray&gt;                 // for valarray
#include &lt;cmath&gt;                    // for sqrt() and pow()

using namespace std ;

#define ARRAY_SIZE  3               // array size

void main()
{
    // Set val_array to contain values 1, 4, 9 for the following test
    valarray&lt;double&gt; val_array(ARRAY_SIZE);

    for (int i = 0; i &lt; ARRAY_SIZE; i++)
        val_array[i] = (i+1) * (i+1);

    // Display the size of val_array
    cout &lt;&lt; "Size of val_array = " &lt;&lt; val_array.size() &lt;&lt; endl;

    // Display the values of val_array before calling sqrt() and pow().
    cout &lt;&lt; "The values in val_array:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; val_array[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // Initialize rev_valarray that is the reverse of val_array.
    valarray&lt;double&gt; rev_valarray(ARRAY_SIZE);
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        rev_valarray[i] = val_array[ARRAY_SIZE - i - 1];

    // Display the size of rev_valarray.
    cout &lt;&lt; "Size of rev_valarray = " &lt;&lt; rev_valarray.size() &lt;&lt; endl;

    // Display the values of rev_valarray.
    cout &lt;&lt; "The values in rev_valarray:" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rev_valarray[i] &lt;&lt; "    ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // rvalue_array to hold the return value from calling the sqrt() and
    // pow() functions.
    valarray&lt;double&gt; rvalue_array;

    // ----------------------------------------------------------------
    // sqrt() - display the content of rvalue_array
    // ----------------------------------------------------------------

    // Display the result of val_array after calling sqrt().
    rvalue_array = sqrt(val_array);
    cout &lt;&lt; "The result of val_array after calling sqrt():" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // ----------------------------------------------------------------
    // pow() - display the content of rvalue_array
    // ----------------------------------------------------------------

    // This template function returns an object of class valarray&lt;T&gt;,
    // each of whose elements at I is x[I] raised to the power of y[I].
    rvalue_array = pow(val_array, rev_valarray);
    cout &lt;&lt; "The result after calling pow(val_array, rev_valarray):"
         &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I x[I] raised to the
    // power of y, where y=2.0.
    rvalue_array = pow(val_array, 2.0);
    cout &lt;&lt; "The result after calling pow(val_array, 2.0):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;

    // This template function stores in element I x raised to the
    // y[I] power, where x=2.0.
    rvalue_array = pow(2.0, val_array);
    cout &lt;&lt; "The result after calling pow(2.0, val_array):" &lt;&lt; endl;
    for (i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; rvalue_array[i] &lt;&lt; "     ";
    cout &lt;&lt; endl &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
Size of val_array = 3
The values in val_array:
1    4    9

Size of rev_valarray = 3
The values in rev_valarray:
9    4    1

The result of val_array after calling sqrt():
1     2     3

The result after calling pow(val_array, rev_valarray):
1     256     9

The result after calling pow(val_array, 2.0):
1     16     81

The result after calling pow(2.0, val_array):
2     16     512
</code></pre>

</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Linkage Specifications</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_linkage_specifications"></a>Linkage Specifications</h1>
<p>
The term “linkage specification” refers to the protocol for linking functions (or procedures) written in different languages. The following calling conventions are affected: 
<ul type=disc>
<li>
Case sensitivity of names.<br><br></li>
<li>
Decoration of names. In C, the compiler prefixes names with an underscore. This is often called “decoration.” In C++, name decoration is used to retain type information through the linkage phase. (See <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_Decorated_Names">
</object><a href=JavaScript:alink_1.Click()>Decorated Names</a>, in <i>Visual C++ Programmer’s Guide</i>.)<br><br></li>
<li>
Order in which arguments are expected on the stack.<br><br></li>
<li>
Responsibility for adjusting the stack on function return. Either the called function or the calling function is responsible.<br><br></li>
<li>
Passing of hidden arguments (whether any hidden arguments are passed).</li>
</ul>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>linkage-specification</i> :</p>
<p class=indent>
<b>extern</b> <i>string-literal</i> <b>{</b>  <i>declaration-list</i><sub>opt</sub>  <b>}</b><br>
<b>extern</b>  <i>string-literal</i> <i>declaration</i></p>
<p class=dt>
<i>declaration-list</i> :</p>
<p class=indent>
<i>declaration</i><br>
<i>declaration-list</i></p>
<p>
Linkage specification facilitates gradually porting C code to C++ by allowing the use of existing code. </p>
<p>
<b>Microsoft Specific </b></p>
<p>
The only linkage specifications currently supported by Microsoft C++ are <b>"C"</b> and <b>"C++"</b>.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
The following example declares the functions <code>atoi</code> and <code>atol</code> with C linkage:</p>
<pre><code>extern "C"
{
 &nbsp;&nbsp; int&nbsp; atoi( char *string );
 &nbsp;&nbsp; long atol( char *string );
}
</code></pre>
<p>
Calls to these functions are made using C linkage. The same result could be achieved with these two declarations:</p>
<pre><code>extern "C" int&nbsp; atoi( char *string );
extern "C" long atol( char *string );
</code></pre>
<p>
<b>Microsoft Specific </b></p>
<p>
All Microsoft C standard include files use conditional compilation directives to detect C++ compilation. When a C++ compilation is detected, the prototypes are enclosed in an <b>extern "C"</b> directive as follows:</p>
<pre><code>// Sample.h
#if defined(__cplusplus)
extern "C"
{
#endif

// Function declarations

#if defined(__cplusplus)
}
#endif 
</code></pre>
<p>
<b>END Microsoft Specific</b></p>
<p>
You do not need to declare the functions in the standard include files as <b>extern "C"</b>.</p>
<p>
If a function is overloaded, no more than one of the functions of the same name can have a linkage specifier. (For more information, see <a href="_pluslang_function_overloading.htm">Function Overloading</a> in Chapter 7.) </p>
<p>
Table 6.3 shows how various linkage specifications work.</p>
<p class=label>
<b><a name="_pluslang_table_6..3"></a>Table 6.3&nbsp;&nbsp;&nbsp;Effects of Linkage Specifications</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Specification</b></td>
<td class=label width=75%><b>Effect</b></td>
</tr>
<tr valign=top>
<td width=25%>On an object</td>
<td width=75%>Affects linkage of that object only</td>
</tr>
<tr valign=top>
<td width=25%>On a function</td>
<td width=75%>Affects linkage of that function and all functions or objects declared within it</td>
</tr>
<tr valign=top>
<td width=25%>On a class</td>
<td width=75%>Affects linkage of all nonmember functions and objects declared within the class</td>
</tr>
</table><br>
<p>
If a function has more than one linkage specification, they must agree; it is an error to declare functions as having both C and C++ linkage. Furthermore, if two declarations for a function occur in a program — one with a linkage specification and one without — the declaration with the linkage specification must be first. Any redundant declarations of functions that already have linkage specification are given the linkage specified in the first declaration. For example:</p>
<pre><code>extern "C" int CFunc1();
...
int CFunc1();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Redeclaration is benign; C linkage is
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; retained.

int CFunc2();
...
extern "C" int CFunc2(); // Error: not the first declaration of
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; CFunc2;&nbsp; cannot contain linkage
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; specifier.
</code></pre>
<p>
Functions and objects explicitly declared as <b>static</b> within the body of a compound linkage specifier (<b>{ }</b>) are treated as static functions or objects; the linkage specifier is ignored. Other functions and objects behave as if declared using the <b>extern</b> keyword. (See <a href="_pluslang_storage.2d.class_specifiers.htm">Storage-Class Specifiers</a> for details about the <b>extern</b> keyword.)</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>find_if (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_find_if">find_if (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>find_if</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator, class T, class Predicate&gt; inline
     InputIterator find_if(InputIterator first, InputIterator last, Predicate predicate)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The find_if algorithm locates the first element in the range [first, last) that causes the predicate to return true and returns the iterator positioned at that element, or last if no such element was found.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// findif.cpp : Illustrates how to use the find_if function.
//
// Functions:
//
//   find_if  - locate the first element in a range that satisfies
//              a predicate.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;algorithm&gt;
#include &lt;iostream&gt;

using namespace std;


// returns true if n is an odd number
int IsOdd( int n)
{
    return n % 2 ;
}

void main()
{
    const int ARRAY_SIZE = 8 ;
    int IntArray[ARRAY_SIZE] = { 1, 2, 3, 4, 4, 5, 6, 7 } ;
    int *location ;   // stores the position of the first
                      // element that is an odd number
    int i ;

        // print content of IntArray
    cout &lt;&lt; "IntArray { " ;
    for(i = 0; i &lt; ARRAY_SIZE; i++)
        cout &lt;&lt; IntArray[i] &lt;&lt; ", " ;
    cout &lt;&lt; " }" &lt;&lt; endl ;

    // Find the first element in the range [first, last -1 ]
    // that is an odd number
    location = find_if(IntArray, IntArray + ARRAY_SIZE, IsOdd) ;

    //print the location of the first element
    // that is an odd number
    if (location != IntArray + ARRAY_SIZE)  // first odd element found
        cout &lt;&lt; "First odd element " &lt;&lt; *location
             &lt;&lt; " is at location " &lt;&lt; location - IntArray &lt;&lt; endl;
    else         // no odd numbers in the range
        cout &lt;&lt; "The sequence does not contain any odd numbers"
             &lt;&lt; endl ;
    }

 </code></pre>

<p>Program Output is:</p>

<pre><code>IntArray { 1, 2, 3, 4, 4, 5, 6, 7,  }

First odd element 1 is at location 0
</code></pre>

</body>
</html>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_string</title></head>
<body bgcolor=white>

<h2><a name="basic_string">basic_string</a></h2>
<META NAME="MS-HKWD" CONTENT="basic_string">
<p><a href="STRING2_basic_stringCCallocator_type.htm#basic_string::allocator_type"><code><b>allocator_type</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCappend.htm#basic_string::append"><code><b>append</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCassign.htm#basic_string::assign"><code><b>assign</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCat.htm#basic_string::at"><code><b>at</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><code><b>basic_string</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCbegin.htm#basic_string::begin"><code><b>begin</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCc_str.htm#basic_string::c_str"><code><b>c_str</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCcapacity.htm#basic_string::capacity"><code><b>capacity</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_basic_stringCCchar_type.htm#basic_string::char_type"><code><b>char_type</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCcompare.htm#basic_string::compare"><code><b>compare</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCconst_iterator.htm#basic_string::const_iterator"><code><b>const_iterator</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCconst_pointer.htm#basic_string::const_pointer"><code><b>const_pointer</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCconst_reference.htm#basic_string::const_reference"><code><b>const_reference</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_basic_stringCCconst_reverse_iterator.htm#basic_string::const_reverse_iterator"><code><b>const_reverse_iterator</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCcopy.htm#basic_string::copy"><code><b>copy</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCdata.htm#basic_string::data"><code><b>data</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCdifference_type.htm#basic_string::difference_type"><code><b>difference_type</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCempty.htm#basic_string::empty"><code><b>empty</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCend.htm#basic_string::end"><code><b>end</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCerase.htm#basic_string::erase"><code><b>erase</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCfind.htm#basic_string::find"><code><b>find</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_basic_stringCCfind_first_not_of.htm#basic_string::find_first_not_of"><code><b>find_first_not_of</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCfind_first_of.htm#basic_string::find_first_of"><code><b>find_first_of</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCfind_last_not_of.htm#basic_string::find_last_not_of"><code><b>find_last_not_of</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCfind_last_of.htm#basic_string::find_last_of"><code><b>find_last_of</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCget_allocator.htm#basic_string::get_allocator"><code><b>get_allocator</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><code><b>insert</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCiterator.htm#basic_string::iterator"><code><b>iterator</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCClength.htm#basic_string::length"><code><b>length</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCmax_size.htm#basic_string::max_size"><code><b>max_size</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCnpos.htm#basic_string::npos"><code><b>npos</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCoperatorPE.htm#basic_string::operator+="><code><b>operator+=</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCoperatorE.htm#basic_string::operator="><code><b>operator=</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCoperatorCD.htm#basic_string::operator[]"><code><b>operator[]</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_basic_stringCCpointer.htm#basic_string::pointer"><code><b>pointer</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCrbegin.htm#basic_string::rbegin"><code><b>rbegin</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCreference.htm#basic_string::reference"><code><b>reference</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCrend.htm#basic_string::rend"><code><b>rend</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><code><b>replace</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCreserve.htm#basic_string::reserve"><code><b>reserve</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCresize.htm#basic_string::resize"><code><b>resize</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCreverse_iterator.htm#basic_string::reverse_iterator"><code><b>reverse_iterator</b></code></a><code><b> &#183; 
</b></code><a href="STRING2_basic_stringCCrfind.htm#basic_string::rfind"><code><b>rfind</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCsize.htm#basic_string::size"><code><b>size</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCsize_type.htm#basic_string::size_type"><code><b>size_type</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCsubstr.htm#basic_string::substr"><code><b>substr</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCswap.htm#basic_string::swap"><code><b>swap</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCtraits_type.htm#basic_string::traits_type"><code><b>traits_type</b></code></a><code><b> &#183; </b></code><a href="STRING2_basic_stringCCvalue_type.htm#basic_string::value_type"><code><b>value_type</b></code></a><code><b> </b></code></p>
<pre><code>template&lt;class E,
    class T = <a href="STRING2_char_traits.htm#char_traits">char_traits</a>&lt;E&gt;,
    class A = allocator&lt;T&gt; &gt;
    class <b>basic_string</b> {
public:
    typedef T <a href="STRING2_basic_stringCCtraits_type.htm#basic_string::traits_type"><b>traits_type</b></a>;
    typedef A <a href="STRING2_basic_stringCCallocator_type.htm#basic_string::allocator_type"><b>allocator_type</b></a>;
    typedef T::char_type <a href="STRING2_basic_stringCCchar_type.htm#basic_string::char_type"><b>char_type</b></a>;
    typedef A::size_type <a href="STRING2_basic_stringCCsize_type.htm#basic_string::size_type"><b>size_type</b></a>;
    typedef A::difference_type <a href="STRING2_basic_stringCCdifference_type.htm#basic_string::difference_type"><b>difference_type</b></a>;
    typedef A::pointer <a href="STRING2_basic_stringCCpointer.htm#basic_string::pointer"><b>pointer</b></a>;
    typedef A::const_pointer <a href="STRING2_basic_stringCCconst_pointer.htm#basic_string::const_pointer"><b>const_pointer</b></a>;
    typedef A::reference <a href="STRING2_basic_stringCCreference.htm#basic_string::reference"><b>reference</b></a>;
    typedef A::const_reference <a href="STRING2_basic_stringCCconst_reference.htm#basic_string::const_reference"><b>const_reference</b></a>;
    typedef A::value_type <a href="STRING2_basic_stringCCvalue_type.htm#basic_string::value_type"><b>value_type</b></a>;
    typedef T0 <a href="STRING2_basic_stringCCiterator.htm#basic_string::iterator"><b>iterator</b></a>;
    typedef T1 <a href="STRING2_basic_stringCCconst_iterator.htm#basic_string::const_iterator"><b>const_iterator</b></a>;
    typedef reverse_iterator&lt;iterator, value_type,
        reference, pointer, difference_type&gt;
            <a href="STRING2_basic_stringCCreverse_iterator.htm#basic_string::reverse_iterator"><b>reverse_iterator</b></a>;
    typedef reverse_iterator&lt;const_iterator, value_type,
        const_reference, const_pointer, difference_type&gt;
            <a href="STRING2_basic_stringCCconst_reverse_iterator.htm#basic_string::const_reverse_iterator"><b>const_reverse_iterator</b></a>;
    static const size_type <a href="STRING2_basic_stringCCnpos.htm#basic_string::npos"><b>npos</b></a> = -1;
    explicit <a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><b>basic_string</b></a>(const A&amp; al = A());
    <a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><b>basic_string</b></a>(const basic_string&amp; rhs);
    <a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><b>basic_string</b></a>(const basic_string&amp; rhs, size_type pos, size_type n,
        const A&amp; al = A());
    <a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><b>basic_string</b></a>(const E *s, size_type n, const A&amp; al = A());
    <a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><b>basic_string</b></a>(const E *s, const A&amp; al = A());
    <a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><b>basic_string</b></a>(size_type n, E c, const A&amp; al = A());
    <a href="STRING2_basic_stringCCbasic_string.htm#basic_string::basic_string"><b>basic_string</b></a>(const_iterator first, const_iterator last,
        const A&amp; al = A());
    basic_string&amp; <a href="STRING2_basic_stringCCoperatorE.htm#basic_string::operator="><b>operator=</b></a>(const basic_string&amp; rhs);
    basic_string&amp; <a href="STRING2_basic_stringCCoperatorE.htm#basic_string::operator="><b>operator=</b></a>(const E *s);
    basic_string&amp; <a href="STRING2_basic_stringCCoperatorE.htm#basic_string::operator="><b>operator=</b></a>(E c);
    iterator <a href="STRING2_basic_stringCCbegin.htm#basic_string::begin"><b>begin</b></a>();
    const_iterator <a href="STRING2_basic_stringCCbegin.htm#basic_string::begin"><b>begin</b></a>() const;
    iterator <a href="STRING2_basic_stringCCend.htm#basic_string::end"><b>end</b></a>();
    const_iterator <a href="STRING2_basic_stringCCend.htm#basic_string::end"><b>end</b></a>() const;
    reverse_iterator <a href="STRING2_basic_stringCCrbegin.htm#basic_string::rbegin"><b>rbegin</b></a>();
    const_reverse_iterator <a href="STRING2_basic_stringCCrbegin.htm#basic_string::rbegin"><b>rbegin</b></a>() const;
    reverse_iterator <a href="STRING2_basic_stringCCrend.htm#basic_string::rend"><b>rend</b></a>();
    const_reverse_iterator <a href="STRING2_basic_stringCCrend.htm#basic_string::rend"><b>rend</b></a>() const;
    const_reference <a href="STRING2_basic_stringCCat.htm#basic_string::at"><b>at</b></a>(size_type pos) const;
    reference <a href="STRING2_basic_stringCCat.htm#basic_string::at"><b>at</b></a>(size_type pos);
    const_reference <a href="STRING2_basic_stringCCoperatorCD.htm#basic_string::operator[]"><b>operator[]</b></a>(size_type pos) const;
    reference <a href="STRING2_basic_stringCCoperatorCD.htm#basic_string::operator[]"><b>operator[]</b></a>(size_type pos);
    const E *<a href="STRING2_basic_stringCCc_str.htm#basic_string::c_str"><b>c_str</b></a>() const;
    const E *<a href="STRING2_basic_stringCCdata.htm#basic_string::data"><b>data</b></a>() const;
    size_type <a href="STRING2_basic_stringCClength.htm#basic_string::length"><b>length</b></a>() const;
    size_type <a href="STRING2_basic_stringCCsize.htm#basic_string::size"><b>size</b></a>() const;
    size_type <a href="STRING2_basic_stringCCmax_size.htm#basic_string::max_size"><b>max_size</b></a>() const;
    void <a href="STRING2_basic_stringCCresize.htm#basic_string::resize"><b>resize</b></a>(size_type n, E c = E());
    size_type <a href="STRING2_basic_stringCCcapacity.htm#basic_string::capacity"><b>capacity</b></a>() const;
    void <a href="STRING2_basic_stringCCreserve.htm#basic_string::reserve"><b>reserve</b></a>(size_type n = 0);
    bool <a href="STRING2_basic_stringCCempty.htm#basic_string::empty"><b>empty</b></a>() const;
    basic_string&amp; <a href="STRING2_basic_stringCCoperatorPE.htm#basic_string::operator+="><b>operator+=</b></a>(const basic_string&amp; rhs);
    basic_string&amp; <a href="STRING2_basic_stringCCoperatorPE.htm#basic_string::operator+="><b>operator+=</b></a>(const E *s);
    basic_string&amp; <a href="STRING2_basic_stringCCoperatorPE.htm#basic_string::operator+="><b>operator+=</b></a>(E c);
    basic_string&amp; <a href="STRING2_basic_stringCCappend.htm#basic_string::append"><b>append</b></a>(const basic_string&amp; str);
    basic_string&amp; <a href="STRING2_basic_stringCCappend.htm#basic_string::append"><b>append</b></a>(const basic_string&amp; str,
        size_type pos, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCappend.htm#basic_string::append"><b>append</b></a>(const E *s, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCappend.htm#basic_string::append"><b>append</b></a>(const E *s);
    basic_string&amp; <a href="STRING2_basic_stringCCappend.htm#basic_string::append"><b>append</b></a>(size_type n, E c);
    basic_string&amp; <a href="STRING2_basic_stringCCappend.htm#basic_string::append"><b>append</b></a>(const_iterator first, const_iterator last);
    basic_string&amp; <a href="STRING2_basic_stringCCassign.htm#basic_string::assign"><b>assign</b></a>(const basic_string&amp; str);
    basic_string&amp; <a href="STRING2_basic_stringCCassign.htm#basic_string::assign"><b>assign</b></a>(const basic_string&amp; str,
        size_type pos, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCassign.htm#basic_string::assign"><b>assign</b></a>(const E *s, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCassign.htm#basic_string::assign"><b>assign</b></a>(const E *s);
    basic_string&amp; <a href="STRING2_basic_stringCCassign.htm#basic_string::assign"><b>assign</b></a>(size_type n, E c);
    basic_string&amp; <a href="STRING2_basic_stringCCassign.htm#basic_string::assign"><b>assign</b></a>(const_iterator first, const_iterator last);
    basic_string&amp; <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(size_type p0,
        const basic_string&amp; str);
    basic_string&amp; <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(size_type p0,
        const basic_string&amp; str, size_type pos, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(size_type p0,
        const E *s, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(size_type p0, const E *s);
    basic_string&amp; <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(size_type p0, size_type n, E c);
    iterator <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(iterator it, E c);
    void <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(iterator it, size_type n, E c);
    void <a href="STRING2_basic_stringCCinsert.htm#basic_string::insert"><b>insert</b></a>(iterator it,
        const_iterator first, const_iterator last);
    basic_string&amp; <a href="STRING2_basic_stringCCerase.htm#basic_string::erase"><b>erase</b></a>(size_type p0 = 0, size_type n = npos);
    iterator <a href="STRING2_basic_stringCCerase.htm#basic_string::erase"><b>erase</b></a>(iterator it);
    iterator <a href="STRING2_basic_stringCCerase.htm#basic_string::erase"><b>erase</b></a>(iterator first, iterator last);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(size_type p0, size_type n0,
        const basic_string&amp; str);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(size_type p0, size_type n0,
        const basic_string&amp; str, size_type pos, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(size_type p0, size_type n0,
        const E *s, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(size_type p0, size_type n0,
        const E *s);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(size_type p0, size_type n0,
        size_type n, E c);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(iterator first0, iterator last0,
        const basic_string&amp; str);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(iterator first0, iterator last0,
        const E *s, size_type n);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(iterator first0, iterator last0,
        const E *s);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(iterator first0, iterator last0,
        size_type n, E c);
    basic_string&amp; <a href="STRING2_basic_stringCCreplace.htm#basic_string::replace"><b>replace</b></a>(iterator first0, iterator last0,
        const_iterator first, const_iterator last);
    size_type <a href="STRING2_basic_stringCCcopy.htm#basic_string::copy"><b>copy</b></a>(E *s, size_type n, size_type pos = 0) const;
    void <a href="STRING2_basic_stringCCswap.htm#basic_string::swap"><b>swap</b></a>(basic_string&amp; str);
    size_type <a href="STRING2_basic_stringCCfind.htm#basic_string::find"><b>find</b></a>(const basic_string&amp; str,
        size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind.htm#basic_string::find"><b>find</b></a>(const E *s, size_type pos, size_type n) const;
    size_type <a href="STRING2_basic_stringCCfind.htm#basic_string::find"><b>find</b></a>(const E *s, size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind.htm#basic_string::find"><b>find</b></a>(E c, size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind.htm#basic_string::find"><b>rfind</b></a>(const basic_string&amp; str,
        size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCrfind.htm#basic_string::rfind"><b>rfind</b></a>(const E *s, size_type pos,
        size_type n = npos) const;
    size_type <a href="STRING2_basic_stringCCrfind.htm#basic_string::rfind"><b>rfind</b></a>(const E *s, size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCrfind.htm#basic_string::rfind"><b>rfind</b></a>(E c, size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCrfind.htm#basic_string::rfind"><b>find_first_of</b></a>(const basic_string&amp; str,
        size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCrfind.htm#basic_string::rfind"><b>find_first_of</b></a>(const E *s, size_type pos,
        size_type n) const;
    size_type <a href="STRING2_basic_stringCCfind_first_of.htm#basic_string::find_first_of"><b>find_first_of</b></a>(const E *s, size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind_first_of.htm#basic_string::find_first_of"><b>find_first_of</b></a>(E c, size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind_last_of.htm#basic_string::find_last_of"><b>find_last_of</b></a>(const basic_string&amp; str,
        size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCfind_last_of.htm#basic_string::find_last_of"><b>find_last_of</b></a>(const E *s, size_type pos,
        size_type n = npos) con/t;
    size_type <a href="STRING2_basic_stringCCfind_last_of.htm#basic_string::find_last_of"><b>find_last_of</b></a>(const E *s, size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCfind_last_of.htm#basic_string::find_last_of"><b>find_last_of</b></a>(E c, size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCfind_first_not_of.htm#basic_string::find_first_not_of"><b>find_first_not_of</b></a>(const basic_string&amp; str,
        size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind_first_not_of.htm#basic_string::find_first_not_of"><b>find_first_not_of</b></a>(const E *s, size_type pos,
        size_type n) const;
    size_type <a href="STRING2_basic_stringCCfind_first_not_of.htm#basic_string::find_first_not_of"><b>find_first_not_of</b></a>(const E *s, size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind_first_not_of.htm#basic_string::find_first_not_of"><b>find_first_not_of</b></a>(E c, size_type pos = 0) const;
    size_type <a href="STRING2_basic_stringCCfind_last_not_of.htm#basic_string::find_last_not_of"><b>find_last_not_of</b></a>(const basic_string&amp; str,
        size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCfind_last_not_of.htm#basic_string::find_last_not_of"><b>find_last_not_of</b></a>(const E *s, size_type pos,
         size_type n) const;
    size_type <a href="STRING2_basic_stringCCfind_last_not_of.htm#basic_string::find_last_not_of"><b>find_last_not_of</b></a>(const E *s,
        size_type pos = npos) const;
    size_type <a href="STRING2_basic_stringCCfind_last_not_of.htm#basic_string::find_last_not_of"><b>find_last_not_of</b></a>(E c, size_type pos = npos) const;
    basic_string <a href="STRING2_basic_stringCCsubstr.htm#basic_string::substr"><b>substr</b></a>(size_type pos = 0, size_type n = npos) const;
    int <a href="STRING2_basic_stringCCcompare.htm#basic_string::compare"><b>compare</b></a>(const basic_string&amp; str) const;
    int <a href="STRING2_basic_stringCCcompare.htm#basic_string::compare"><b>compare</b></a>(size_type p0, size_type n0,
        const basic_string&amp; str);
    int <a href="STRING2_basic_stringCCcompare.htm#basic_string::compare"><b>compare</b></a>(size_type p0, size_type n0,
        const basic_string&amp; str, size_type pos, size_type n);
    int <a href="STRING2_basic_stringCCcompare.htm#basic_string::compare"><b>compare</b></a>(const E *s) const;
    int <a href="STRING2_basic_stringCCcompare.htm#basic_string::compare"><b>compare</b></a>(size_type p0, size_type n0,
        const E *s) const;
    int <a href="STRING2_basic_stringCCcompare.htm#basic_string::compare"><b>compare</b></a>(size_type p0, size_type n0,
        const E *s, size_type pos) const;
    A <a href="STRING2_basic_stringCCget_allocator.htm#basic_string::get_allocator"><b>get_allocator</b></a>() const;
protected:
    A <a href="STRING2_basic_string.htm#basic_string::allocator"><b>allocator</b></a>;
    };</code></pre>
<p>The template class describes an object that controls a varying-length sequence of elements of <b>type </b><code><b>E</b></code>. Such an element 
type must not require explicit construction or destruction, and it must be suitable for use as the <code>E</code> parameter to 
<a href="ISTREAM_basic_istream.htm#basic_istream"><code>basic_istream</code></a> or <a href="OSTREAM_basic_ostream.htm#basic_ostream"><code>basic_ostream</code></a>. (A "plain old data structure," or <a name="POD"><b>POD</b></a>, from C generally meets this criterion.) 
The Standard C++ library provides two specializations of this template class, with the type definitions <a href="STRING2_string.htm#string"><code>string</code></a>, for 
elements of type <i>char,</i> and <a href="STRING2_wstring.htm#wstring"><code>wstring</code></a>, for elements of type <code>wchar_t</code>.</p>
<p>Various important properties of the elements in a <code>basic_string</code> specialization are described by the <b>class </b><code><b>T</b></code>. A class 
that specifies these <a href="STRING2_char_traits.htm#character traits">character traits</a> must have the same external interface as an object of template class <a href="STRING2_char_traits.htm#char_traits"><code>char_traits</code></a>.</p>
<p>The object allocates and frees storage for the sequence it controls through a protected object named <a name="basic_string::allocator"><code><b>allocator</b></code></a>, of 
<b>class </b><code><b>A</b></code>. Such an <a href="MEMORY_allocator.htm#allocator object">allocator object</a> must have the same external interface as an object of template class <a href="MEMORY_allocator.htm#allocator"><code>allocator</code></a>. 
(Class <a href="STRING2_char_traits.htm#char_traits"><code>char_traits</code></a> has no provision for alternative addressing schemes, such as might be required to implement a <a href="MEMORY_allocator.htm#far heap">far 
heap</a>.) Note that <code>allocator</code> is not copied when the object is assigned.</p>
<p>The sequences controlled by an object of template class <code>basic_string</code> are usually called <a name="strings"><b>strings</b></a>. These objects 
should not be confused, however, with the null-terminated C strings used throughout the Standard C++ library.</p>
<p>Many member functions require an <a name="operand sequence"><b>operand sequence</b></a> of elements of type <code>E</code>. You can specify such an operand 
sequence several ways:</p>
<ul>
<li><code>c</code> -- a sequence of one element with value <code>c</code></li>
<li><code>n, c</code> -- a repetition of <code>n</code> elements each with value <code>c</code></li>
<li><code>s</code> -- a null-terminated sequence (such as a C string, for <code>E</code> of type <i>char</i>) beginning at <code>s</code> (which must not be a null 
pointer), where the terminating element is the value <code>E(0)</code> and is not part of the operand sequence</li>
<li><code>s, n</code> -- a sequence of <code>n</code> elements beginning at <code>s</code> (which must not be a null pointer)</li>
<li><code>str</code> -- the sequence specified by the <code>basic_string</code> object <code>str</code></li>
<li><code>str, pos, n</code> -- the substring of the <code>basic_string</code> object <code>str</code> with up to <code>n</code> elements (or through the end of 
the string, whichever comes first) beginning at position <code>pos</code></li>
<li><code>first, last</code> -- a sequence of elements delimited by the iterators <code>first</code> and <code>last</code>, in the range <code>[first, 
last)</code></li>
</ul>
<p>If a <a name="position argument"><b>position argument</b></a> (such as <code>pos</code> above) is beyond the end of the string on a call to a <code>basic_string</code> member 
function, the function reports an <a name="out-of-range error"><b>out-of-range error</b></a> by throwing an object of class <a href="STDEXCEP_out_of_range.htm#out_of_range"><code>out_of_range</code></a>.</p>
<p>If a function is asked to generate a sequence longer than <a href="STRING2_basic_stringCCmax_size.htm#basic_string::max_size"><code>max_size</code></a><code>()</code> elements, the function reports a <a name="length error"><b>length error</b></a> by 
throwing an object of class <a href="STDEXCEP_length_error.htm#length_error"><code>length_error</code></a>.</p>
</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_com_ptr_t</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang__com_ptr_t"></a>_com_ptr_t</h1>
<p>
<b>Microsoft Specific </b></p>
<p>
A <b>_com_ptr_t</b> object encapsulates a COM interface pointer and is called a “smart” pointer. This template class manages resource allocation and deallocation, via function calls to the <b>IUnknown</b> member functions: <b>QueryInterface</b>, <b>AddRef</b>, and <b>Release</b>.</p>
<p>
A smart pointer is usually referenced by the typedef definition provided by the <b>_COM_SMARTPTR_TYPEDEF</b> macro. This macro takes an interface name and the IID, and declares a specialization of <b>_com_ptr_t</b> with the name of the interface plus a suffix of <b>Ptr</b>. For example,</p>
<pre><code>_COM_SMARTPTR_TYPEDEF(IMyInterface, __uuidof(IMyInterface));</code></pre>
<p>
declares the <b>_com_ptr_t</b> specialization <b>IMyInterfacePtr</b>.</p>
<p>
A set of <a href="_pluslang_relational_function_templates.htm">function templates</a>, not members of this template class, support comparisons with a smart pointer on the right-hand side of the comparison operator.</p>
<p>
<b>#include &lt;comdef.h&gt;</b></p>
<p>
<a href="_pluslang_compiler_com_support_classes.htm">Compiler COM Support Class Overview</a></p>
<p class=label>
<b>Construction</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a._com_ptr_t.htm">_com_ptr_t</a></td>
<td width=65%>Constructs a <b>_com_ptr_t</b> object.</td>
</tr>
</table><br>
<p class=label>
<b>Low-level Operations</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.addref.htm">AddRef</a></td>
<td width=65%>Calls the <b>AddRef</b> member function of <b>IUnknown</b> on the encapsulated interface pointer.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.attach.htm">Attach</a></td>
<td width=65%>Encapsulates a raw interface pointer of this smart pointer’s type.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.createinstance.htm">CreateInstance</a></td>
<td width=65%>Creates a new instance of an object given a <b>CLSID</b> or <b>ProgID</b>.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.detach.htm">Detach</a></td>
<td width=65%>Extracts and returns the encapsulated interface pointer.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.getactiveobject.htm">GetActiveObject</a></td>
<td width=65%>Attaches to an existing instance of an object given a <b>CLSID</b> or <b>ProgID</b>.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.getinterfaceptr.htm">GetInterfacePtr</a></td>
<td width=65%>Returns the encapsulated interface pointer.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.queryinterface.htm">QueryInterface</a></td>
<td width=65%>Calls the <b>QueryInterface</b> member function of <b>IUnknown</b> on the encapsulated interface pointer.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.release.htm">Release</a></td>
<td width=65%>Calls the <b>Release</b> member function of <b>IUnknown</b> on the encapsulated interface pointer.</td>
</tr>
</table><br>
<p class=label>
<b>Operators</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t.3a3a.operator_.3d.htm">operator =</a></td>
<td width=65%>Assigns a new value to an existing <b>_com_ptr_t</b> object.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t_relational_operators.htm">operators ==, !=, &lt;, &gt;, &lt;=, &gt;=</a></td>
<td width=65%>Compare the smart pointer object to another smart pointer, raw interface pointer, or <b>NULL</b>.</td>
</tr>
<tr valign=top>
<td width=35%><a href="_pluslang__com_ptr_t_extractors.htm">Extractors</a></td>
<td width=65%>Extract the encapsulated COM interface pointer.</td>
</tr>
</table><br>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pointers Based on Pointers</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_pointers_based_on_pointers"></a><sup></sup>Pointers Based on Pointers</h1>
<p>
The “based on pointer” variant of based addressing enables specification of a pointer as a <i>base-expression</i>. The based pointer, then, is an offset into the segment starting at the beginning of the pointer on which it is based.</p>
<p>
One use for pointers based on pointers is for persistent objects that contain pointers. A linked list of pointers based on pointers can be saved to disk and reloaded to another place in memory, and the pointers will still be valid. The following example declares such a linked list:</p>
<pre><code>void *vpBuffer;

struct llist_t
{
  void __based( vpBuffer ) *vpData;
  llist_t __based( vpBuffer ) *llNext;
};
</code></pre>
<p>
The pointer, <code>vpBuffer</code>, is assigned the address of memory allocated at some later point in the program; the linked list is then relocated relative to the value of <code>vpBuffer</code>.</p>
<p>
Pointers based on pointer addresses are the only forms of <b>__based</b> valid in 32-bit compilations. In such compilations, they are 32-bit displacements from a 32-bit base.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview of C Statements</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_overview_of_c_statements"></a><sup></sup>Overview of C Statements</h1>
<p>
C statements consist of tokens, expressions, and other statements. A statement that forms a component of another statement is called the “body” of the enclosing statement. Each statement type given by the following syntax is discussed in this chapter. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>statement</i> :</p>
<p class=indent>
<a href="_clang_the_goto_and_labeled_statements.htm">labeled-statement</a><br>
<a href="_clang_the_compound_statement.htm">compound-statement</a><br>
<a href="_clang_the_expression_statement.htm">expression-statement</a><br>
<a href="_clang_the_c_if_statement.htm">selection-statement</a><br>
<a href="_clang_the_do.2d.while_statement.htm">iteration-statement</a><br>
<a href="_clang_the_c_break_statement.htm">jump-statement</a><br>
<a href="_clang_the_try.2d.except_statement.htm">try-except-statement</a>&nbsp;&nbsp;&nbsp;/* Microsoft Specific */<br>
<a href="_clang_the_try.2d.finally_statement.htm">try-finally-statement</a>&nbsp;&nbsp;&nbsp;/* Microsoft Specific */</p>
<p>
Frequently the statement body is a “compound statement.” A compound statement consists of other statements that can include keywords. The compound statement is delimited by braces (<b>{ }</b>). All other C statements end with a semicolon (<b>;</b>). The semicolon is a statement terminator.&nbsp;&nbsp;&nbsp;</p>
<p>
The expression statement contains a C expression that can contain the arithmetic or logical operators introduced in Chapter 4, <a href="_clang_expressions_and_assignments.htm">Expressions and Assignments</a>. The null statement is an empty statement.</p>
<p>
Any C statement can begin with an identifying label consisting of a name and a colon. Since only the <b>goto</b> statement recognizes statement labels, statement labels are discussed with <b>goto</b>. See <a href="_clang_the_goto_and_labeled_statements.htm">The goto and Labeled Statements</a> for more information. </p>
</font></BODY>
</HTML>

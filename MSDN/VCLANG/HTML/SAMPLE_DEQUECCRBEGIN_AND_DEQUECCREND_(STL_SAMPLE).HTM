<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>deque::rbegin and deque::rend (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_dequeCCrbegin_rend">deque::rbegin and deque::rend (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>deque::rbegin</code> and <code>deque::rend</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; deque&gt;</p>
<b>Prototype:</b><br>
<pre><code>
   const_reverse_iterator rbegin() const;
   reverse_iterator rbegin();

   const_reverse_iterator rend() const;
   reverse_iterator rend();
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The rbegin member function returns a reverse iterator that points just beyond the end of the controlled sequence. Therefore, it designates the beginning of the reverse sequence.  The rend member function returns a reverse iterator that points at the first element of the sequence, or just beyond the end of an empty sequence. Therefore, it designates the end of the reverse sequence.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// deque.cpp :
//
// Functions:
//
//    rbegin
//    rend
//    push_back
//////////////////////////////////////////////////////////////////////

/* Compile options needed:-GX
*/
#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;


typedef deque&lt;int &gt;  INTDEQUE;

void main()
{

    // Create A and fill it with elements 1,2,3,4 and 5
    // using push_back function

    INTDEQUE  A;
    A.push_back(1);
    A.push_back(2);
    A.push_back(3);
    A.push_back(4);
    A.push_back(5);

    // Now print the contents in reverse order using reverse_iterator
    // and functions rbegin() and rend()

    INTDEQUE::reverse_iterator rpi;

    for(rpi= A.rbegin();  rpi !=A.rend(); rpi++)
    {
        cout &lt;&lt; *rpi &lt;&lt;" " ;
    }
        cout&lt;&lt;endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>5 4 3 2 1
</code></pre>

</body>
</html>

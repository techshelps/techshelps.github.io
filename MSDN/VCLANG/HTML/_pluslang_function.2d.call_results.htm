<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function-Call Results</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_function.2d.call_results"></a><sup></sup>Function-Call Results</h1>
<p>
A function call evaluates to an r-value unless the function is declared as a reference type. Functions with reference return type evaluate to l-values, and can be used on the left side of an assignment statement as follows:</p>
<pre><code>#include &lt;iostream.h&gt;

class Point
{
public:
 &nbsp;&nbsp; // Define "accessor" functions as
 &nbsp;&nbsp; // reference types.
 &nbsp;&nbsp; unsigned&amp; x() { return _x; }
 &nbsp;&nbsp; unsigned&amp; y() { return _y; }
private:
 &nbsp;&nbsp; unsigned _x;
 &nbsp;&nbsp; unsigned _y;
};

void main()
{
 &nbsp;&nbsp; Point ThePoint;

 &nbsp;&nbsp; ThePoint.x() = 7;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Use x() as an l-value.
 &nbsp;&nbsp; unsigned y = ThePoint.y();&nbsp; // Use y() as an r-value.

 &nbsp;&nbsp; // Use x() and y() as r-values.
 &nbsp;&nbsp; cout &lt;&lt; "x = " &lt;&lt; ThePoint.x() &lt;&lt; "\n"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; "y = " &lt;&lt; ThePoint.y() &lt;&lt; "\n";
}
000000
</code></pre>
<p>
The preceding code defines a class called <code>Point</code>, which contains private data objects that represent <i>x</i> and <i>y</i> coordinates. These data objects must be modified and their values retrieved. This program is only one of several designs for such a class; use of the <code>GetX</code> and <code>SetX</code> or <code>GetY</code> and <code>SetY</code> functions is another possible design.</p>
<p>
Functions that return class types, pointers to class types, or references to class types can be used as the left operand to member-selection operators. Therefore, the following code is legal:</p>
<pre><code>class A
{
public:
 &nbsp;&nbsp; int SetA( int i ) { return (I = i); }
 &nbsp;&nbsp; int GetA()&nbsp;&nbsp;&nbsp; { return I; }

private:
 &nbsp;&nbsp; int I;
};

// Declare three functions:
//&nbsp; func1, which returns type A
//&nbsp; func2, which returns a pointer to type A
//&nbsp; func3, which returns a reference to type A
A func1();
A* func2();
A&amp; func3();

int iResult = func1().GetA();
func2()-&gt;SetA( 3 );
func3().SetA( 7 );
</code></pre>
<p>
Functions can be called recursively. For more information about function declarations, see <a href="_pluslang_function_specifiers.htm">Function Specifiers</a>  and <a href="_pluslang_member_functions.htm">Member Functions</a>. Related material is in <a href="_pluslang_program_and_linkage.htm">Program and Linkage</a>.</p>
</font></BODY>
</HTML>

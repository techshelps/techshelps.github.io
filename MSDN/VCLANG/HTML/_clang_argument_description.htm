<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Argument Description</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_argument_description"></a><sup></sup>Argument Description </h1>
<p>
The <i>argc</i> parameter in the <b>main</b> and <b>wmain</b> functions is an integer specifying how many arguments are passed to the program from the command line. Since the program name is considered an argument, the value of <i>argc</i> is at least one. </p>
<p>
The <i>argv</i> parameter is an array of pointers to null-terminated strings representing the program arguments. Each element of the array points to a string representation of an argument passed to <b>main</b> (or <b>wmain</b>). (For information about arrays, see <a href="_clang_array_declarations.htm">Array Declarations</a> in Chapter 3.) The <i>argv</i> parameter can be declared either as an array of pointers to type <b>char</b> (<code>char *argv[]</code>) or as a pointer to pointers to type <b>char</b> (<code>char **argv</code>). For <b>wmain</b>, the <i>argv</i> parameter can be declared either as an array of pointers to type <b>wchar_t</b> (<code>wchar_t *argv[]</code>) or as a pointer to pointers to type <b>wchar_t</b> (<code>wchar_t **argv</code>). The first string (<code>argv[0]</code>) is the program name. The last pointer (<code>argv[argc]</code>) is <b>NULL</b>. (See <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_crt_getenv.2c_._wgetenv">
</object><a href=JavaScript:alink_1.Click()>getenv</a> in the <i>Run-Time Library Reference</i> for an alternative method for getting environment variable information.) </p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The <i>envp</i> parameter is a pointer to an array of null-terminated strings that represent the values set in the user’s environment variables. The <i>envp</i> parameter can be declared as an array of pointers to <b>char</b> (<code>char *envp[]</code>) or as a pointer to pointers to <b>char</b> (<code>char **envp</code>). In a <b>wmain</b> function, the <i>envp</i> parameter can be declared as an array of pointers to <b>wchar_t</b> (<code>wchar_t *envp[]</code>) or as a pointer to pointers to <b>wchar_t</b> (<code>wchar_t **envp</code>). The end of the array is indicated by a <b>NULL</b> *pointer. Note that the environment block passed to <b>main</b> or <b>wmain</b> is a “frozen” copy of the current environment. If you subsequently change the environment via a call to _<b>putenv</b> or <b>_wputenv</b>, the current environment (as returned by <b>getenv</b>/<b>_wgetenv</b> and the <b>_environ</b> or <b>_wenviron</b> variables) will change, but the block pointed to by <i>envp</i> will not change. The <i>envp</i> parameter is ANSI compatible in C, but not in C++.</p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

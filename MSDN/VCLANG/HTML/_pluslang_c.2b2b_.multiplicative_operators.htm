<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Multiplicative Operators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.multiplicative_operators"></a><sup></sup>C++ Multiplicative Operators</h1>
<p>
The multiplicative operators are:
<ul type=disc>
<li>
Multiplication (*)<br><br></li>
<li>
Division (/)<br><br></li>
<li>
Modulus or “remainder from division” (%)</li>
</ul>
<p>
These binary operators have left-to-right associativity.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>multiplicative-expression</i> :</p>
<p class=indent>
<i>pm-expression</i><br>
<i>multiplicative-expression</i> * <i>pm-expression</i><br>
<i>multiplicative-expression</i> / <i>pm-expression</i><br>
<i>multiplicative-expression</i> % <i>pm-expression</i></p>
<p>
The multiplicative operators take operands of arithmetic types. The modulus operator (%) has a stricter requirement in that its operands must be of integral type. (To get the remainder of a floating-point division, use the run-time function, fmod.) The conversions covered in <a href="_pluslang_arithmetic_conversions.htm">Arithmetic Conversions</a> in Chapter 3 are applied to the operands, and the result is of the converted type.</p>
<p>
The multiplication operator yields the result of multiplying the first operand by the second.</p>
<p>
The division operator yields the result of dividing the first operand by the second.</p>
<p>
The modulus operator yields the remainder given by the following expression, where <i>e1</i> is the first operand and <i>e2</i> is the second: <i>e1</i> – (<i>e1</i> / <i>e2</i>) * <i>e2</i>, where both operands are of integral types.</p>
<p>
Division by 0 in either a division or a modulus expression is undefined and causes a run-time error. Therefore, the following expressions generate undefined, erroneous results:</p>
<pre><code>i % 0
f / 0.0
</code></pre>
<p>
If both operands to a multiplication, division, or modulus expression have the same sign, the result is positive. Otherwise, the result is negative. The result of a modulus operation’s sign is implementation-defined.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
In Microsoft C++, the result of a modulus expression is always the same as the sign of the first operand.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
If the computed division of two integers is inexact and only one operand is negative, the result is the largest integer (in magnitude, disregarding the sign) that is less than the exact value the division operation would yield. For example, the computed value of –11 / 3 is –3.666666666. The result of that integral division is –3.</p>
<p>
The relationship between the multiplicative operators is given by the identity<br>
(<i>e1</i> / <i>e2</i>) * <i>e2</i> + <i>e1</i> % <i>e2</i> == <i>e1</i>.</p>
</font></BODY>
</HTML>

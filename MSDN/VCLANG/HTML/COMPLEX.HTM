</BODY></HTML>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>&lt;complex&gt;</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

<h1><a name="&lt;complex&gt;">&lt;complex&gt;</a></h1>
<META NAME="MS-HKWD" CONTENT="complex header file">
<p><a href="COMPLEX_abs.htm#abs"><code><b>abs</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_arg.htm#arg"><code><b>arg</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_complex.htm#complex"><code><b>complex</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_complexLdoubleG.htm#complex&lt;double&gt;"><code><b>complex&lt;double&gt;</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_complexLfloatG.htm#complex&lt;float&gt;"><code><b>complex&lt;float&gt;</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_complexLlong_doubleG.htm#complex&lt;long double&gt;"><code><b>complex&lt;long double&gt;</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_conjg.htm#conjg"><code><b>conjg</b></code></a><code><b> &#183; 
</b></code><a href="COMPLEX_cos.htm#cos"><code><b>cos</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_cosh.htm#cosh"><code><b>cosh</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_exp.htm#exp"><code><b>exp</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_imag.htm#imag"><code><b>imag</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_log.htm#log"><code><b>log</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_log10.htm#log10"><code><b>log10</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_norm.htm#norm"><code><b>norm</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_operatorNE.htm#operator!="><code><b>operator!=</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_operatorX.htm#operator*"><code><b>operator*</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_operatorP.htm#operator+"><code><b>operator+</b></code></a><code><b> &#183; 
</b></code><a href="COMPLEX_operatorM.htm#operator-"><code><b>operator-</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_operatorD.htm#operator/"><code><b>operator/</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_operatorLL.htm#operator&lt;&lt;"><code><b>operator&lt;&lt;</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_operatorEE.htm#operator=="><code><b>operator==</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_operatorGG.htm#operator&gt;&gt;"><code><b>operator&gt;&gt;</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_polar.htm#polar"><code><b>polar</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_pow.htm#pow"><code><b>pow</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_real.htm#real"><code><b>real</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_sin.htm#sin"><code><b>sin</b></code></a><code><b> &#183; 
</b></code><a href="COMPLEX_sinh.htm#sinh"><code><b>sinh</b></code></a><code><b> &#183; </b></code><a href="COMPLEX_sqrt.htm#sqrt"><code><b>sqrt</b></code></a><code><b> &#183; </b></code><a href="COMPLEX___STD_COMPLEX.htm#__STD_COMPLEX"><code><b>__STD_COMPLEX</b></code></a><code><b> </b></code></p>
<pre><code>namespace std {
#define <a href="COMPLEX___STD_COMPLEX.htm#__STD_COMPLEX"><b>__STD_COMPLEX</b></a>
//    <b>TEMPLATE CLASSES</b>
template&lt;class T&gt;
    class <a href="COMPLEX_complex.htm#complex"><b>complex</b></a>;
class <a href="COMPLEX_complexLfloatG.htm#complex&lt;float&gt;"><b>complex&lt;float&gt;</b></a>;
class <a href="COMPLEX_complexLdoubleG.htm#complex&lt;double&gt;"><b>complex&lt;double&gt;</b></a>;
class <a href="COMPLEX_complexLlong_doubleG.htm#complex&lt;long double&gt;"><b>complex&lt;long double&gt;</b></a>;
//    <b>TEMPLATE FUNCTIONS</b>
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorP.htm#operator+"><b>operator+</b></a>(const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorP.htm#operator+"><b>operator+</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorP.htm#operator+"><b>operator+</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorM.htm#operator-"><b>operator-</b></a>(const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorM.htm#operator-"><b>operator-</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorM.htm#operator-"><b>operator-</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorX.htm#operator*"><b>operator*</b></a>(const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorX.htm#operator*"><b>operator*</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorX.htm#operator*"><b>operator*</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorD.htm#operator/"><b>operator/</b></a>(const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorD.htm#operator/"><b>operator/</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorD.htm#operator/"><b>operator/</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorP.htm#operator+"><b>operator+</b></a>(const complex&lt;T&gt;&amp; lhs);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_operatorM.htm#operator-"><b>operator-</b></a>(const complex&lt;T&gt;&amp; lhs);
template&lt;class T&gt;
    bool <a href="COMPLEX_operatorEE.htm#operator=="><b>operator==</b></a>(const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    bool <a href="COMPLEX_operatorEE.htm#operator=="><b>operator==</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
template&lt;class T&gt;
    bool <a href="COMPLEX_operatorEE.htm#operator=="><b>operator==</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    bool <a href="COMPLEX_operatorNE.htm#operator!="><b>operator!=</b></a>(const complex&lt;T&gt;&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    bool <a href="COMPLEX_operatorNE.htm#operator!="><b>operator!=</b></a>(const complex&lt;T&gt;&amp; lhs, const T&amp; rhs);
template&lt;class T&gt;
    bool <a href="COMPLEX_operatorNE.htm#operator!="><b>operator!=</b></a>(const T&amp; lhs, const complex&lt;T&gt;&amp; rhs);
template&lt;class E, class Ti, class T&gt;
    basic_istream&lt;E, Ti&gt;&amp; <a href="COMPLEX_operatorGG.htm#operator&gt;&gt;"><b>operator&gt;&gt;</b></a>(basic_istream&lt;E, Ti&gt;&amp; is,
        complex&lt;T&gt;&amp; x);
template&lt;class E, class T, class U&gt;
    basic_ostream&lt;E, T&gt;&amp; <a href="COMPLEX_operatorLL.htm#operator&lt;&lt;"><b>operator&lt;&lt;</b></a>(basic_ostream&lt;E, T&gt;&amp; os,
        const complex&lt;U&gt;&amp; x);
template&lt;class T&gt;
    T <a href="COMPLEX_real.htm#real"><b>real</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T <a href="COMPLEX_imag.htm#imag"><b>imag</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T <a href="COMPLEX_abs.htm#abs"><b>abs</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T <a href="COMPLEX_arg.htm#arg"><b>arg</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    T <a href="COMPLEX_norm.htm#norm"><b>norm</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_conjg.htm#conjg"><b>conjg</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_polar.htm#polar"><b>polar</b></a>(const T&amp; rho, const T&amp; theta = 0);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_cos.htm#cos"><b>cos</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_cosh.htm#cosh"><b>cosh</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_exp.htm#exp"><b>exp</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_log.htm#log"><b>log</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_log10.htm#log10"><b>log10</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_pow.htm#pow"><b>pow</b></a>(const complex&lt;T&gt;&amp; x, int y);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_pow.htm#pow"><b>pow</b></a>(const complex&lt;T&gt;&amp; x, const T&amp; y);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_pow.htm#pow"><b>pow</b></a>(const complex&lt;T&gt;&amp; x, const complex&lt;T&gt;&amp; y);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_pow.htm#pow"><b>pow</b></a>(const T&amp; x, const complex&lt;T&gt;&amp; y);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_sin.htm#sin"><b>sin</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_sinh.htm#sinh"><b>sinh</b></a>(const complex&lt;T&gt;&amp; x);
template&lt;class T&gt;
    complex&lt;T&gt; <a href="COMPLEX_sqrt.htm#sqrt"><b>sqrt</b></a>(const complex&lt;T&gt;&amp; x);
    };</code></pre>
<p>Include the standard header <code><b>&lt;complex&gt;</b></code> to define template class <code>complex</code> and a host of supporting template functions. 
Unless otherwise specified, functions that can return multiple values return an imaginary part in the half-open interval 
<code>(-pi, pi]</code>.</p>
</body>
</html>

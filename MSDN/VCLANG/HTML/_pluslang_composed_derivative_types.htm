<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Composed Derivative Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_composed_derivative_types"></a><sup></sup>Composed Derivative Types</h1>
<p>
This section describes the following composed derivative types:
<ul type=disc>
<li>
<a href="#_pluslang_c.2b2b_.classes">Classes</a><br><br></li>
<li>
<a href="#_pluslang_c.2b2b_.structures">Structures</a><br><br></li>
<li>
<a href="#_pluslang_c.2b2b_.unions">Unions</a></li>
</ul>
<p>
Information about aggregate types and initialization of aggregate types can be found in <a href="_pluslang_initializing_aggregates.htm">Initializing Aggregates</a> in Chapter 7.</p>
<h2><a name="_pluslang_c.2b2b_.classes"></a>C++ Classes</h2>
<p>
Classes are a composite group of member objects, functions to manipulate these members, and (optionally) access-control specifications to member objects and functions.</p>
<p>
By grouping composite groups of objects and functions in classes, C++ enables programmers to create derivative types that define not only data but also the behavior of objects.</p>
<p>
Class members default to private access and private inheritance. Classes are covered in Chapter 8, <a href="_pluslang_classes.htm">Classes</a>, access control is covered in Chapter 10, <a href="_pluslang_member.2d.access_control.htm">Member-Access Control</a>. </p>
<h2><a name="_pluslang_c.2b2b_.structures"></a>C++ Structures</h2>
<p>
C++ structures are the same as classes, except that all member data and functions default to public access, and inheritance defaults to public inheritance.</p>
<p>
For more information about access control, see Chapter 10, <a href="_pluslang_member.2d.access_control.htm">Member-Access Control</a>. </p>
<h2><a name="_pluslang_c.2b2b_.unions"></a>C++ Unions</h2>
<p>
Unions enable programmers to define types capable of containing different kinds of variables in the same memory space. The following code shows how you can use a union to store several different types of variables:</p>
<pre><code>//&nbsp; Declare a union that can hold data of types char, int,
//&nbsp;&nbsp;&nbsp; or char *.
union ToPrint
{
 &nbsp;&nbsp; char&nbsp;&nbsp; chVar;
 &nbsp;&nbsp; int&nbsp;&nbsp;&nbsp; iVar;
 &nbsp;&nbsp; char&nbsp; *szVar;
};

// Declare an enumerated type that describes what type to print.
enum PrintType { CHAR_T, INT_T, STRING_T };

void Print( ToPrint Var, PrintType Type )
{
 &nbsp;&nbsp; switch( Type )
 &nbsp;&nbsp; {
 &nbsp;&nbsp; case CHAR_T:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%c", Var.chVar );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case INT_T:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%d", Var.iVar );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; case STRING_T:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "%s", Var.szVar );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
 &nbsp;&nbsp; }
}
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Constructing Output Stream Objects</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_constructing_output_stream_objects"></a><sup></sup>Constructing Output Stream Objects</h1>
<p>
If you use only the predefined <b>cout</b>, <b>cerr</b>, or <b>clog</b> objects, you don’t need to construct an output stream. You must use constructors for: 
<ul type=disc>
<li>
<a href="#_iostream_output_file_stream_constructors">File streams</a><br><br></li>
<li>
<a href="#_iostream_output_string_stream_constructors">String streams</a></li>
</ul>

<h2><a name="_iostream_output_file_stream_constructors"></a><sup></sup>Output File Stream Constructors</h2>
<p>
You can construct an output file stream in one of three ways:
<ul type=disc>
<li>
Use the default constructor, then call the <b>open</b> member function.<pre><code>ofstream myFile; // Static or on the stack
myFile.open( "filename", iosmode );

ofstream* pmyFile = new ofstream; // On the heap
pmyFile-&gt;open( "filename", iosmode );
</code></pre>
</li>
<li>
Specify a filename and mode flags in the constructor call.<pre><code>ofstream myFile( "filename", iosmode );
</code></pre>
</li>
<li>
Specify an integer file descriptor for a file already open for output. You can specify unbuffered output or a pointer to your own buffer.<pre><code>int fd = _open( "filename", dosmode );
ofstream myFile1( fd );&nbsp; // Buffered mode (default)
ofstream myFile2( fd, NULL, 0 );&nbsp; // Unbuffered mode ofstream
myFile3( fd, pch, buflen);&nbsp; // User-supplied buffer
</code></pre>
</li>
</ul>

<h2><a name="_iostream_output_string_stream_constructors"></a><sup></sup>Output String Stream Constructors</h2>
<p>
To construct an output string stream, you can use one of two <a href="_iostream_ostrstream.htm">ostrstream</a> constructors. One dynamically allocates its own storage, and the other requires the address and size of a preallocated buffer.
<ul type=disc>
<li>
The dynamic constructor is used like this:<pre><code>char* sp;
ostrstream myString;
mystring &lt;&lt; "this is a test" &lt;&lt; ends;
sp = myString.str();&nbsp; // Get a pointer to the string
</code></pre>
<p class=tl>
The <b>ends</b> “manipulator” adds the necessary terminating null character to the string.</P></li>
<li>
The constructor that requires the preallocated buffer is used like this:<pre><code>char s[32];
ostrstream myString( s, sizeof( s ) );
myString &lt;&lt; "this is a test" &lt;&lt; ends; // Text stored in s
</code></pre>
</li>
</ul>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pair Logical Operator (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_Pair_Logical_Operator">Pair Logical Operator (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>pair logical operator</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; utility &gt;</p>
<b>Prototype:</b><br>
<pre><code>
It is interesting to note that only the &lt; and == operators are
necessary in order to define all of the logical operators.

template&lt;class _T1, class _T2&gt; inline
     bool operator==(const pair&lt;_T1, _T2&gt;&amp; _X,
     const pair&lt;_T1, _T2&gt;&amp; _Y)
     {return (_X.first == _Y.first &amp;&amp; _X.second == _Y.second); }

template&lt;class _T1, class _T2&gt; inline
     bool operator&lt;(const pair&lt;_T1, _T2&gt;&amp; _X,
     const pair&lt;_T1, _T2&gt;&amp; _Y)
     {return (_X.first &lt; _Y.first ||
     !(_Y.first &lt; _X.first) &amp;&amp; _X.second &lt; _Y.second); }
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The functions are described in the comments section of the sample.  </p>
<p><b>Sample Code: </b></p>
<pre><code>/////////////////////////////
// Compile options needed: none
//
// paircomp.cpp : Illustrates several comparison
//                operators used to compare two
//                pair objects.
//
// Functions:
//
//    operator== - returns true if two pair objects are identical.
//
//    operator!= - returns true if two pair objects are not identical.
//
//    operator&lt;  - returns true for (A &lt; B) if pair object A is less
//                 than pair object B.
//
//    operator&lt;= - returns true for (A &lt;= B) if pair object A is less
//                 than or equal to pair object B.
//
//    operator&gt;  - returns true for (A &gt; B) if pair object A is greater
//                 than pair object B.
//
//    operator&gt;= - returns true for (A &gt;= B) if pair object A is greater
//                 than or equal to pair object B.
/////////////////////////////

#include &lt;iostream&gt;
#include &lt;utility&gt;

using namespace std ;

/* STL pair data type containing int and float */

typedef struct pair&lt;int, float&gt; PAIR_IF;

void main(void)
{
  PAIR_IF A(10,3.14);
  PAIR_IF B(18,3.14);
  PAIR_IF C(10,6.28);
  PAIR_IF D(10,3.14);

/* show pair values */

  cout &lt;&lt; "A = ( " &lt;&lt; A.first &lt;&lt; " , " &lt;&lt; A.second &lt;&lt; " )" &lt;&lt; endl;
  cout &lt;&lt; "B = ( " &lt;&lt; B.first &lt;&lt; " , " &lt;&lt; B.second &lt;&lt; " )" &lt;&lt; endl;
  cout &lt;&lt; "C = ( " &lt;&lt; C.first &lt;&lt; " , " &lt;&lt; C.second &lt;&lt; " )" &lt;&lt; endl;
  cout &lt;&lt; "D = ( " &lt;&lt; D.first &lt;&lt; " , " &lt;&lt; D.second &lt;&lt; " )" &lt;&lt; endl;

/* operator== */

  if (A==D)
    cout &lt;&lt; "A and D are equal" &lt;&lt; endl;
  else
    cout &lt;&lt; "A and D are not equal" &lt;&lt; endl;

/* operator!= */

  if (B!=C)
    cout &lt;&lt; "B and C are not equivalent" &lt;&lt; endl;
  else
    cout &lt;&lt; "B and C are equivalent" &lt;&lt; endl;

/* operator&gt; */

  if (A&gt;C)
    cout &lt;&lt; "A is greater than C" &lt;&lt; endl;
  else
    cout &lt;&lt; "A is not greater than C" &lt;&lt; endl;

/* operator&gt;= */

  if (A&gt;=C)
    cout &lt;&lt; "A is greater than or equal to C" &lt;&lt; endl;
  else
    cout &lt;&lt; "A is not greater than or equal to C" &lt;&lt; endl;

/* operator&lt; */

  if (C&lt;D)
    cout &lt;&lt; "C is less than D" &lt;&lt; endl;
  else
    cout &lt;&lt; "C is not less than D" &lt;&lt; endl;

/* operator&lt;= */

  if (C&lt;D)
    cout &lt;&lt; "C is less than or equal to D" &lt;&lt; endl;
  else
    cout &lt;&lt; "C is not less than or equal to D" &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>A = ( 10 , 3.14 )
B = ( 18 , 3.14 )
C = ( 10 , 6.28 )
D = ( 10 , 3.14 )
A and D are equal
B and C are not equivalent
A is not greater than C
A is not greater than or equal to C
C is not less than D
C is not less than or equal to D
</code></pre>

</body>
</html>

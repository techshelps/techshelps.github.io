<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The goto and Labeled Statements</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_the_goto_and_labeled_statements"></a><sup></sup>The goto and Labeled Statements&nbsp; </h1>
<p>
The <b>goto</b> statement transfers control to a label. The given label must reside in the same function and can appear before only one statement in the same function. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>statement</i> :</p>
<p class=indent>
<i>labeled-statement</i> <br>
<i>jump-statement</i> </p>
<p class=dt>
<i>jump-statement</i> :</p>
<p class=indent>
<b>goto</b> <i>identifier</i> <b>;</b></p>
<p class=dt>
<i>labeled-statement</i> :</p>
<p class=indent>
<i>identifier</i> <b>:</b> <i>statement</i></p>
<p>
A statement label is meaningful only to a <b>goto</b> statement; in any other context, a labeled statement is executed without regard to the label. </p>
<p>
A <i>jump-statement</i> must reside in the same function and can appear before only one statement in the same function. The set of <i>identifier</i> names following a <b>goto</b> has its own name space so the names do not interfere with other identifiers. Labels cannot be redeclared. See <a href="_clang_name_spaces.htm">Name Spaces</a> for more information. </p>
<p>
It is good programming style to use the <b>break</b>, <b>continue</b>, and <b>return</b> statement in preference to <b>goto</b> whenever possible. Since the <b>break</b> statement only exits from one level of the loop, a <b>goto</b> may be necessary for exiting a loop from within a deeply nested loop.</p>
<p>
This example demonstrates the <b>goto</b> statement: </p>
<pre><code>void main()
{
 &nbsp;&nbsp; int i, j;

 &nbsp;&nbsp; for ( i = 0; i &lt; 10; i++ )
 &nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( "Outer loop executing. i = %d\n", i );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for ( j = 0; j &lt; 3; j++ )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( " Inner loop executing. j = %d\n", j );
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( i == 5 )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto stop;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
 &nbsp;&nbsp; /* This message does not print: */
 &nbsp;&nbsp; printf( "Loop exited. i = %d\n", i );
 &nbsp;&nbsp; stop: printf( "Jumped to stop. i = %d\n", i );
}
</code></pre>
<p>
In this example, a <b>goto</b> statement transfers control to the point labeled <code>stop</code> when <code>i</code> equals 5. </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The C return Statement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_the_c_return_statement"></a><sup></sup>The C return Statement</h1>
<p>
The <b>return</b> statement terminates the execution of a function and returns control to the calling function. Execution resumes in the calling function at the point immediately following the call. A <b>return</b> statement can also return a value to the calling function. See <a href="_clang_return_type.htm">Return Type</a> for more information.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>jump-statement</i> :</p>
<p class=indent>
<b>return</b> <i>expression</i> <sub>opt</sub> <b>;</b></p>
<p>
The value of <i>expression</i>, if present, is returned to the calling function. If <i>expression</i> is omitted, the return value of the function is undefined. The expression, if present, is converted to the type returned by the function. If the function was declared with return type <b>void</b>, a <b>return</b> statement containing an expression generates a warning and the expression is not evaluated.</p>
<p>
If no <b>return</b> statement appears in a function definition, control automatically returns to the calling function after the last statement of the called function is executed. In this case, the return value of the called function is undefined. If a return value is not required, declare the function to have <b>void</b> return type; otherwise, the default return type is <b>int</b>.</p>
<p>
Many programmers use parentheses to enclose the <i>expression</i> argument of the <b>return</b> statement. However, C does not require the parentheses. </p>
<p>
This example demonstrates the <b>return</b> statement: </p>
<pre><code>void draw( int I, long L );
long sq( int s );
int main()
{
 &nbsp;&nbsp; long y;
 &nbsp;&nbsp; int x;

 &nbsp;&nbsp; y = sq( x );
 &nbsp;&nbsp; draw( x, y );
 &nbsp;&nbsp; return();
}

long sq( int s )
{
 &nbsp;&nbsp; return( s * s );
}

void draw( int I, long L )
{
 &nbsp;&nbsp; /* Statements defining the draw function here */
 &nbsp;&nbsp; return;
}
</code></pre>
<p>
In this example, the <code>main</code> function calls two functions: <code>sq</code> and <code>draw</code>. The <code>sq</code> function returns the value of <code>x * x</code> to <code>main</code>, where the return value is assigned to <code>y</code>. The <code>draw</code> function is declared as a <b>void</b> function and does not return a value. An attempt to assign the return value of <code>draw</code> would cause a diagnostic message to be issued.</p>
</font></BODY>
</HTML>

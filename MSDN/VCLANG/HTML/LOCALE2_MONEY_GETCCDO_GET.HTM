<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>money_get::do_get</title></head>
<body bgcolor=white>

<h3><a name="money_get::do_get">money_get::do_get</a></h3>
<META NAME="MS-HKWD" CONTENT="do_get">
<pre><code>virtual iter_type <b>do_get</b>(iter_type first, iter_type last, bool intl,
    ios_base&amp; x, ios_base::iostate&amp; st, string_type&amp; val) const;
virtual iter_type <b>do_get</b>(iter_type first, iter_type last, bool intl,
    ios_base&amp; x, ios_base::iostate&amp; st, long double&amp; val) const;</code></pre>
<p>The first virtual protected member function endeavors to match sequential elements beginning at <code>first</code> in the sequence 
<code>[first, last)</code> until it has recognized a complete, nonempty <a name="monetary input field"><b>monetary input field</b></a>. If successful, it converts this field 
to a sequence of one or more decimal digits, optionally preceded by a minus sign (<code>-</code>), to represent the amount and 
stores the result in the <a href="LOCALE2_money_getCCstring_type.htm#money_get::string_type"><code>string_type</code></a> object <code>val</code>. It returns an iterator designating the first element beyond the 
monetary input field. Otherwise, the function stores an empty sequence in <code>val</code> and sets <code>ios_base::failbit</code> in <code>st</code>. It 
returns an iterator designating the first element beyond any prefix of a valid monetary input field. In either case, if the 
return value equals <code>last</code>, the function sets <code>ios_base::eofbit</code> in <code>st</code>.</p>
<p>The second virtual protected member function behaves the same as the first, except that, if successful, it converts the 
optionally-signed digit sequence to a value of type <i>long double</i> and stores that value in <code>val</code>.</p>
<p>The format of a monetary input field is determined by the <a href="LOCALE2_locale.htm#locale facet">locale facet</a> <code>fac</code> returned by the (effective) call <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code> 
&lt;</code><a href="LOCALE2_moneypunct.htm#moneypunct"><code>moneypunct</code></a><code>&lt;E, intl&gt;(x. </code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>())</code>. Specifically: </p>
<ul>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCneg_format.htm#moneypunct::neg_format"><code>neg_format</code></a><code>()</code> determines the order in which components of the field occur</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCcurr_symbol.htm#moneypunct::curr_symbol"><code>curr_symbol</code></a><code>()</code> determines the sequence of elements that constitutes a currency symbol</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCpositive_sign.htm#moneypunct::positive_sign"><code>positive_sign</code></a><code>()</code> determines the sequence of elements that constitutes a positive sign</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCnegative_sign.htm#moneypunct::negative_sign"><code>negative_sign</code></a><code>()</code> determines the sequence of elements that constitutes a negative sign</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCgrouping.htm#moneypunct::grouping"><code>grouping</code></a><code>()</code> determines how digits are grouped to the left of any decimal point</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCthousands_sep.htm#moneypunct::thousands_sep"><code>thousands_sep</code></a><code>()</code> determines the element that separates groups of digits to the left of any decimal point</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCdecimal_point.htm#moneypunct::decimal_point"><code>decimal_point</code></a><code>()</code> determines the element that separates the integer digits from the fraction digits</li>
<li><code>fac.</code><a href="LOCALE2_moneypunctCCfrac_digits.htm#moneypunct::frac_digits"><code>frac_digits</code></a><code>()</code> determines the number of significant fraction digits to the right of any decimal point</li>
</ul>
<p>If the sign string (<code>fac.negative_sign</code> or <code>fac.positive_sign</code>) has more than one element, only the first element is 
matched where the element equal to <code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::sign"><code><b>sign</b></code></a> appears in the format pattern (<code>fac.neg_format</code>). Any 
remaining elements are matched at the end of the monetary input field. If neither string has a first element that matches 
the next element in the monetary input field, the sign string is taken as empty and the sign is positive.</p>
<p>If <code>x.</code><a href="IOS_ios_baseCCflags.htm#ios_base::flags"><code>flags</code></a><code>() &amp; </code><a href="IOS_ios_baseCCfmtflags.htm#ios_base::showbase"><code>showbase</code></a> is nonzero, the string <code>fac.curr_symbol</code> must match where the element equal to 
<code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::symbol"><code><b>symbol</b></code></a> appears in the format pattern. Otherwise, if <code>money_base::symbol</code> occurs at the end of the 
format pattern, and if no elements of the sign string remain to be matched, the currency symbol is not matched. 
Otherwise, the currency symbol is optionally matched.</p>
<p>If no instances of <code>fac.thousands_sep()</code> occur in the value portion of the monetary input field (where the element 
equal to <code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::value"><code><b>value</b></code></a> appears in the format pattern), no grouping constraint is imposed. Otherwise, any 
grouping constraints imposed by <code>fac.grouping()</code> are enforced. Note that the resulting digit sequence represents an 
integer whose low-order <code>fac.frac_digits()</code> decimal digits are considered to the right of the decimal point.</p>
<p>Arbitrary white space is matched where the element equal to <code><b>money_base::</b></code><a href="LOCALE2_money_base.htm#money_base::space"><code><b>space</b></code></a> appears in the format pattern, if it 
appears other than at the end of the format pattern. Otherwise, no internal white space is matched. An element <code>c</code> is 
considered white space if <a href="LOCALE2_use_facet.htm#use_facet"><code>use_facet</code></a><code> &lt;</code><a href="LOCALE2_ctype.htm#ctype"><code>ctype</code></a><code>&lt;E&gt;(x. </code><a href="IOS_ios_baseCCgetloc.htm#ios_base::getloc"><code>getloc</code></a><code>()). </code><a href="LOCALE2_ctypeCCis.htm#ctype::is"><code>is</code></a><code>(ctype_base:: </code><a href="LOCALE2_ctype_base.htm#ctype_base::space"><code>space</code></a><code>, c)</code> is true.</p>
</body>
</html>

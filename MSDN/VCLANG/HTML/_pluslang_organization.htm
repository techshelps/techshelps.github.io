<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Organization of the C++ Language Reference</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_organization"></a><sup></sup>Organization of the C++ Language Reference</h1>
<p>
Chapter 1, <a href="_pluslang_lexical_conventions.htm">Lexical Conventions</a>, introduces the fundamental elements of a C++ program as they are meaningful to the compiler. These elements, called “lexical elements,” are used to construct statements, definitions, declarations, and so on, which are used to construct complete programs.</p>
<p>
Chapter 2, <a href="_pluslang_basic_concepts.htm">Basic Concepts</a>, explains concepts such as scope, linkage, program startup and termination, storage classes, and types. These concepts are key to understanding C++. Terminology used in this book is also introduced.</p>
<p>
Chapter 3, <a href="_pluslang_standard_conversions.htm">Standard Conversions</a>, describes the type conversions the compiler performs between built-in, or “fundamental,” types. It also explains how the compiler performs conversions among pointer, reference, and pointer-to-member types.</p>
<p>
Chapter 4, <a href="_pluslang_expressions.htm">Expressions</a>, describes C++ expressions — sequences of operators and operands that are used for computing values, designating objects or functions, or generating other side effects.</p>
<p>
Chapter 5, <a href="_pluslang_statements.htm">Statements</a>, explains the C++ program elements that control how and in what order programs are executed. Among the statements covered are expression statements, null statements, compound statements, selection statements, iteration statements, jump statements, and declaration statements.</p>
<p>
Chapter 6, <a href="_pluslang_declarations.htm">Declarations</a>, is one of three chapters devoted to how complete declarations are used to form declaration statements. This chapter describes such topics as storage-class specifiers, function definitions, initializations, enumerations, class, struct, and union declarations, and typedef declarations. Related information can be found in Chapter 7, <a href="_pluslang_declarators.htm">Declarators</a>, and Appendix B, <a href="_pluslang_microsoft.2d.specific_modifiers.htm">Microsoft-Specific Modifiers</a>. </p>
<p>
Chapter 7, <a href="_pluslang_declarators.htm">Declarators</a>, explains the portion of a declaration statement that names an object, type, or function.</p>
<p>
Chapter 8, <a href="_pluslang_classes.htm">Classes</a>, introduces C++ classes. C++ treats an object declared with the <b>class</b>, <b>struct</b>, or <b>union</b> keyword as a class type. This chapter explains how to use these class types.</p>
<p>
Chapter 9, <a href="_pluslang_derived_classes.htm">Derived Classes</a>, covers the details of inheritance — a process by which you can define a new type as having all the attributes of an existing type, plus any new attributes you add.</p>
<p>
Chapter 10, <a href="_pluslang_member.2d.access_control.htm">Member-Access Control</a>, explains how you can control access to class members. Use of access-control specifiers can help produce more robust code because you can limit the number of ways an object’s state can be changed.</p>
<p>
Chapter 11, <a href="_pluslang_special_member_functions.htm">Special Member Functions</a>, describes special functions unique to class types. These special functions perform initialization (constructor functions), cleanup (destructor functions), and conversions. This chapter also describes the <b>new</b> and <b>delete</b> operators, which are used for dynamic memory allocation.</p>
<p>
Chapter 12, <a href="_pluslang_overloading.htm">Overloading</a>, explains a C++ feature that enables you to define a group of functions with the same name but different arguments. Which function in the group is called depends on the argument list in the actual function call. In addition, this chapter covers overloaded operators, a mechanism for defining your own behavior for C++ operators.</p>
<p>
Appendix A, <a href="_pluslang_grammar_summary.htm">Grammar Summary</a>, is a summary of the C++ grammar with the Microsoft extensions. Portions of this grammar are shown throughout this manual in “Syntax” sections.</p>
<p>
Appendix B, <a href="_pluslang_microsoft.2d.specific_modifiers.htm">Microsoft-Specific Modifiers</a>, describes the modifiers specific to Microsoft C++. These modifiers control memory addressing, calling conventions, and so on.</p>
<p>
Appendix C, <a href="_pluslang_compiler_com_support_classes.htm">Compiler COM Support Classes</a>, is a reference to four Microsoft-specific classes used to support some Component Object Model types.</p>
<p>
Appendix D, <a href="_pluslang_charts.htm">Charts</a>, contains the following charts: ASCII Character Codes, ASCII Multilingual Codes, ANSI Character Codes, and Key Codes.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>priority_queue</title></head>
<body bgcolor=white>

<h2><a name="priority_queue">priority_queue</a></h2>
<META NAME="MS-HKWD" CONTENT="priority_queue">
<pre><code>template&lt;class T,
    class Cont = vector&lt;T&gt;,
    class Pred = less&lt;Cont::value_type&gt; &gt;
    class priority_queue {
public:
    typedef Cont::allocator_type <a href="QUEUE_priority_queueCCallocator_type.htm#priority_queue::allocator_type"><b>allocator_type</b></a>;
    typedef Cont::value_type <a href="QUEUE_priority_queueCCvalue_type.htm#priority_queue::value_type"><b>value_type</b></a>;
    typedef Cont::size_type <a href="QUEUE_priority_queueCCsize_type.htm#priority_queue::size_type"><b>size_type</b></a>;
    explicit <a href="QUEUE_priority_queueCCpriority_queue.htm#priority_queue::priority_queue"><b>priority_queue</b></a>(const Pred&amp; pr = Pred(),
        const allocator_type&amp; al = allocator_type());
    <a href="QUEUE_priority_queueCCpriority_queue.htm#priority_queue::priority_queue"><b>priority_queue</b></a>(const value_type *first, const value_type *last,
        const Pred&amp; pr = Pred(), const allocator_type&amp; al = allocator_type());
    bool <a href="QUEUE_priority_queueCCempty.htm#priority_queue::empty"><b>empty</b></a>() const;
    size_type <a href="QUEUE_priority_queueCCsize.htm#priority_queue::size"><b>size</b></a>() const;
    allocator_type <a href="QUEUE_priority_queueCCget_allocator.htm#priority_queue::get_allocator"><b>get_allocator</b></a>() const;
    value_type&amp; <a href="QUEUE_priority_queueCCtop.htm#priority_queue::top"><b>top</b></a>();
    const value_type&amp; <a href="QUEUE_priority_queueCCtop.htm#priority_queue::top"><b>top</b></a>() const;
    void <a href="QUEUE_priority_queueCCpush.htm#priority_queue::push"><b>push</b></a>(const value_type&amp; x);
    void <a href="QUEUE_priority_queueCCpop.htm#priority_queue::pop"><b>pop</b></a>();
protected:
    Cont <a href="QUEUE_priority_queue.htm#priority_queue::c"><b>c</b></a>;
    Pred <a href="QUEUE_priority_queue.htm#priority_queue::comp"><b>comp</b></a>;
    };</code></pre>
<p>The template class describes an object that controls a varying-length sequence of elements. The object allocates and 
frees storage for the sequence it controls through a protected object named <a name="priority_queue::c"><code><b>c</b></code></a>, of <b>class </b><code><b>Cont</b></code>. The type <code>T</code> of elements in 
the controlled sequence must match <a href="QUEUE_priority_queueCCvalue_type.htm#priority_queue::value_type"><code>value_type</code></a>.</p>
<p>The sequence is ordered using a protected object named <a name="priority_queue::comp"><code><b>comp</b></code></a>. After each insertion or removal of the top element (at 
position zero), for the iterators <code>P0</code> and <code>Pi</code> designating elements at positions <code>0</code> and <code>i</code>, <code>comp(*P0, *Pi)</code> is false. (For 
the default template parameter <a href="FUNCTIO2_less.htm#less"><code>less</code></a><code>&lt;Cont::value_type&gt;</code>, the top element of the sequence compares largest, or 
highest priority.)</p>
<p>An object of class <code>Cont</code> must supply random-access iterators and several public members defined the same as for 
<a href="DEQUE_deque.htm#deque"><code>deque</code></a> and <a href="VECTOR_vector.htm#vector"><code>vector</code></a> (both of which are suitable candidates for class <code>Cont</code>). The required members are:</p>
<pre><code>    typedef T <b>value_type</b>;
    typedef T0 <b>size_type</b>;
    <b>Cont</b>(const A&amp; al);
    <b>Cont</b>(InIt first, InIt last, const allocator_type&amp; al);
    bool <b>empty</b>() const;
    size_type <b>size</b>() const;
    allocator_type <b>get_allocator</b>() const;
    const value_type&amp; <b>front</b>() const;
    value_type&amp; <b>front</b>();
    void <b>push_back</b>(const value_type&amp; x);
    void <b>pop_back</b>();</code></pre>
<p>Here, <code>T0</code> is an unspecified type that meets the stated requirements.</p>
</body>
</html>

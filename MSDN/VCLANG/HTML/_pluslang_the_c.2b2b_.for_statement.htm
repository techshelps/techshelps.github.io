<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The C++ for Statement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_the_c.2b2b_.for_statement"></a><sup></sup>The C++ for Statement</h1>
<p>
The <b>for</b> statement can be divided into three separate parts, as shown in Table 5.3.</p>
<p class=label>
<b><a name="_pluslang_table_5..3"></a>Table 5.3&nbsp;&nbsp;&nbsp;for Loop Elements</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Syntax Name</b></td>
<td class=label width=41%><b>When Executed</b></td>
<td class=label width=38%><b>Contents</b></td>
</tr>
<tr valign=top>
<td width=21%><i>for-init-statement</i></td>
<td width=41%>Before any other element of the <b>for</b> statement or the substatement.</td>
<td width=38%>Often used to initialize loop indices. It can contain expressions or declarations.</td>
</tr>
<tr valign=top>
<td width=21%><i>expression1</i></td>
<td width=41%>Before execution of a given iteration of the loop, including the first iteration.</td>
<td width=38%>An expression that evaluates to an integral type or a class type that has an unambiguous conversion to an integral type.</td>
</tr>
<tr valign=top>
<td width=21%><i>expression2</i></td>
<td width=41%>At the end of each iteration of the loop; <i>expression1</i> is tested after <i>expression2</i> is evaluated.</td>
<td width=38%>Normally used to increment loop indices.</td>
</tr>
</table><br>
<p>
The <i>for-init-statement</i> is commonly used to declare and initialize loop-index variables. The <i>expression1</i> is often used to test for loop-termination criteria. The <i>expression2</i> is commonly used to increment loop indices.</p>
<p>
The <b>for</b> statement executes the <i>statement</i> repeatedly until <i>expression1</i> evaluates to zero. The <i>for-init-statement</i>, <i>expression1</i>, and <i>expression2</i> fields are all optional.</p>
<p>
The following <b>for</b> loop:</p>
<pre><code>for( for-init-statement; expression1; expression2 )
{
 &nbsp;&nbsp; // Statements
}
</code></pre>
<p>
is equivalent to the following <b>while</b> loop:</p>
<pre><code>for-init-statement;
while( expression1 )
{
 &nbsp;&nbsp; // Statements
 &nbsp;&nbsp; expression2;
}
</code></pre>
<p>
A convenient way to specify an infinite loop using the <b>for</b> statement is:</p>
<pre><code>for( ; ; )
{
 &nbsp;&nbsp; // Statements to be executed.
}
</code></pre>
<p>
This is equivalent to:</p>
<pre><code>while( 1 )
{
 &nbsp;&nbsp; // Statements to be executed.
}
</code></pre>
<p>
The initialization part of the <b>for</b> loop can be a declaration statement or an expression statement, including the null statement. The initializations can include any sequence of expressions and declarations, separated by commas. Any object declared inside a <i>for-init-statement</i> has local scope, as if it had been declared immediately prior to the <b>for</b> statement. Although the name of the object can be used in more than one <b>for</b> loop in the same scope, the declaration can appear only once. For example:</p>
<pre><code>#include &lt;iostream.h&gt;

void main()
{
 &nbsp;&nbsp; for( int i = 0; i &lt; 100; ++i )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; i &lt;&lt; "\n";

 &nbsp;&nbsp; // The loop index, i, cannot be declared in the
 &nbsp;&nbsp; //&nbsp; for-init-statement here because it is still in scope.
 &nbsp;&nbsp; for( i = 100; i &gt;= 0; --i )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; i &lt;&lt; "\n";
}
</code></pre>
<p>
Although the three fields of the <b>for</b> statement are normally used for initialization, testing for termination, and incrementing, they are not restricted to these uses. For example, the following code prints the numbers 1 to 100. The substatement is the null statement:</p>
<pre><code>#include &lt;iostream.h&gt;

void main()
{
 &nbsp;&nbsp; for( int i = 0; i &lt; 100; cout &lt;&lt; ++i &lt;&lt; endl )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;
}
</code></pre>
</font></BODY>
</HTML>

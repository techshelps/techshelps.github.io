<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Keywords</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.keywords"></a><sup></sup>C++ Keywords</h1>
<p>
Keywords are predefined reserved identifiers that have special meanings. They cannot be used as identifiers in your program. The following keywords are reserved for C++:</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>keyword</i>: one of</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td width=25%><b>asm</b><sup>1</sup></td>
<td width=29%><b>auto</b></td>
<td width=22%><b>bad</b>_<b>cast</b></td>
<td width=24%><b>bad</b>_<b>typeid</b></td>
</tr>
<tr valign=top>
<td width=25%><b>bool</b></td>
<td width=29%><b>break</b></td>
<td width=22%><b>case</b></td>
<td width=24%><b>catch</b></td>
</tr>
<tr valign=top>
<td width=25%><b>char</b></td>
<td width=29%><b>class</b></td>
<td width=22%><b>const</b></td>
<td width=24%><b>const</b>_<b>cast</b></td>
</tr>
<tr valign=top>
<td width=25%><b>continue</b></td>
<td width=29%><b>default</b></td>
<td width=22%><b>delete</b></td>
<td width=24%><b>do</b></td>
</tr>
<tr valign=top>
<td width=25%><b>double</b></td>
<td width=29%><b>dynamic</b>_<b>cast</b></td>
<td width=22%><b>else</b></td>
<td width=24%><b>enum</b></td>
</tr>
<tr valign=top>
<td width=25%><b>except</b></td>
<td width=29%><b>explicit</b></td>
<td width=22%><b>extern</b></td>
<td width=24%><b>false</b></td>
</tr>
<tr valign=top>
<td width=25%><b>finally</b></td>
<td width=29%><b>float</b></td>
<td width=22%><b>for</b></td>
<td width=24%><b>friend</b></td>
</tr>
<tr valign=top>
<td width=25%><b>goto</b></td>
<td width=29%><b>if</b></td>
<td width=22%><b>inline</b></td>
<td width=24%><b>int</b></td>
</tr>
<tr valign=top>
<td width=25%><b>long</b></td>
<td width=29%><b>mutable</b></td>
<td width=22%><b>namespace</b></td>
<td width=24%><b>new</b></td>
</tr>
<tr valign=top>
<td width=25%><b>operator</b></td>
<td width=29%><b>private</b></td>
<td width=22%><b>protected</b></td>
<td width=24%><b>public</b></td>
</tr>
<tr valign=top>
<td width=25%><b>register</b></td>
<td width=29%><b>reinterpret</b>_<b>cast</b></td>
<td width=22%><b>return</b></td>
<td width=24%><b>short</b></td>
</tr>
<tr valign=top>
<td width=25%><b>signed</b></td>
<td width=29%><b>sizeof</b></td>
<td width=22%><b>static</b></td>
<td width=24%><b>static</b>_<b>cast</b></td>
</tr>
<tr valign=top>
<td width=25%><b>struct</b></td>
<td width=29%><b>switch</b></td>
<td width=22%><b>template</b></td>
<td width=24%><b>this</b></td>
</tr>
<tr valign=top>
<td width=25%><b>throw</b></td>
<td width=29%><b>true</b></td>
<td width=22%><b>try</b></td>
<td width=24%><b>type</b>_<b>info</b></td>
</tr>
<tr valign=top>
<td width=25%><b>typedef</b></td>
<td width=29%><b>typeid</b></td>
<td width=22%><b>typename</b></td>
<td width=24%><b>union</b></td>
</tr>
<tr valign=top>
<td width=25%><b>unsigned</b></td>
<td width=29%><b>using</b></td>
<td width=22%><b>virtual</b></td>
<td width=24%><b>void</b></td>
</tr>
<tr valign=top>
<td width=25%><b>volatile</b></td>
<td width=29%><b>while</b></td>
<td width=22%></td>
<td width=24%></td>
</tr>
</table><br>
<p class=mini>
1&nbsp;&nbsp;&nbsp;Reserved for compatibility with other C++ implementations, but not implemented. Use<sup> </sup><b>__asm</b><sup>.</sup></p>
<p>
<b>Microsoft Specific </b></p>
<p>
In Microsoft C++, identifiers with two leading underscores are reserved for compiler implementations. Therefore, the Microsoft convention is to precede Microsoft-specific keywords with double underscores. These words cannot be used as identifier names.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=23%><b>allocate</b><sup>3</sup></td>
<td width=38%><b>__inline</b></td>
<td width=39%><b>property</b><sup>3</sup></td>
</tr>
<tr valign=top>
<td width=23%><b>__asm</b><sup>1</sup></td>
<td width=38%><b>__int8</b></td>
<td width=39%><b>selectany</b><sup>3</sup></td>
</tr>
<tr valign=top>
<td width=23%><b>__based</b><sup>2</sup></td>
<td width=38%><b>__int16</b></td>
<td width=39%><b>__single_inheritance</b></td>
</tr>
<tr valign=top>
<td width=23%><b>__cdecl</b></td>
<td width=38%><b>__int32</b></td>
<td width=39%><b>__stdcall</b></td>
</tr>
<tr valign=top>
<td width=23%><b>__declspec</b></td>
<td width=38%><b>__int64</b></td>
<td width=39%><b>thread</b><sup>3</sup></td>
</tr>
<tr valign=top>
<td width=23%><b>dllexport</b><sup>3</sup></td>
<td width=38%><b>__leave</b></td>
<td width=39%><b>__try</b></td>
</tr>
<tr valign=top>
<td width=23%><b>dllimport</b><sup>3</sup></td>
<td width=38%><b>__multiple_inheritance</b></td>
<td width=39%><b>uuid</b><sup>3</sup></td>
</tr>
<tr valign=top>
<td width=23%><b>__except</b></td>
<td width=38%><b>naked</b><sup>3</sup></td>
<td width=39%>__<b>uuidof</b></td>
</tr>
<tr valign=top>
<td width=23%><b>__fastcall</b></td>
<td width=38%><b>nothrow</b><sup>3</sup></td>
<td width=39%><b>__virtual_inheritance</b></td>
</tr>
<tr valign=top>
<td width=23%><b>__finally</b></td>
<td width=38%></td>
<td width=39%></td>
</tr>
</table><br>
<p class=mini>
<sup>1</sup>&nbsp;&nbsp;&nbsp;Replaces C++ <b>asm</b> syntax.<sup> </sup></p>
<p class=mini>
<sup>2</sup>&nbsp;&nbsp;&nbsp;The <b>__based</b> keyword has limited uses for 32-bit target compilations.</p>
<p class=mini>
<sup>3&nbsp;&nbsp;&nbsp;</sup>These are special identifiers when used with <b>__declspec</b>; their use in other contexts is not restricted.</p>
<p>
Microsoft extensions are enabled by default. To ensure that your programs are fully portable, you can disable Microsoft extensions by specifying the ANSI-compatible /Za command-line option (compile for ANSI compatibility) during compilation. When you do this, Microsoft-specific keywords are disabled.</p>
<p>
When Microsoft extensions are enabled, you can use the previously-listed keywords in your programs. For ANSI compliance, these keywords are prefaced by a double underscore. For backward compatibility, single-underscore versions of all the keywords except <b>__except</b>, <b>__finally</b>, <b>__leave</b>, and <b>__try</b> are supported. In addition, <b>__cdecl</b> is available with no leading underscore.</p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

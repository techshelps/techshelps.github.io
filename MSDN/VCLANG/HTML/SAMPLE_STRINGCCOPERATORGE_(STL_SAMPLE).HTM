<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>string::operator&gt;= (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stringCCoperatorGTE">string::operator&gt;= (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>string::operator&gt;=</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;string&gt;</p>
<b>Prototype:</b><br>
<pre><code>
Function 1:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator&gt;=(const basic_string&lt;_E, _TYPE, _A&gt;&amp; _L,
     const _E *_R);

Function 2:
template&lt;class _E, class _TYPE, class _A&gt; inline
    bool operator&gt;=(const _E * _L,
    const basic_string&lt;_E, _TYPE, _A&gt;&amp; _R);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 There are two versions of the string::operator&gt;= function. Both versions are used to compare a null-terminated character array against a basic_string. They perform this operation by negating the result of (_L &lt; _R). For more information on this comparison, please see the string::operator&lt; function.   </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: none
//
// StringGreaterEqual.cpp:
//     Illustrates how to use the operator&gt;= to compare a
//     basic_string variable and a null-terminated string.
//
// Functions:
//
//     operator&gt;=   Returns true if the first parameter is not less than
//                  the second.
//
// Written by Derek Jamison
// of Microsoft AnswerPoint Support,
// Copyright (c) 1996 Microsoft Corporation. All rights reserved.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

void truefalse(int x)
{
  cout &lt;&lt; (x?"True":"False") &lt;&lt; endl;
}


void main()
{
   string S1="ABC";
   char CP1[4]="ABC";
   char CP2[4]="DEF";

   cout &lt;&lt; "S1 is " &lt;&lt; S1 &lt;&lt; endl;
   cout &lt;&lt; "CP1 is " &lt;&lt; CP1 &lt;&lt; endl;
   cout &lt;&lt; "CP2 is " &lt;&lt; CP2 &lt;&lt; endl;

   cout &lt;&lt; "S1&gt;=CP1 returned ";
   truefalse(S1&gt;=CP1);  // True   (calls function 1)

   cout &lt;&lt; "S1&gt;=CP2 returned ";
   truefalse(S1&gt;=CP2);  // False  (calls function 1)

   cout &lt;&lt; "CP1&gt;=S1 returned ";
   truefalse(CP1&gt;=S1);  // True   (calls function 2)

   cout &lt;&lt; "CP2&gt;=S1 returned ";
   truefalse(CP2&gt;=S1);  // True   (calls function 2)
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
S1 is ABC
CP1 is ABC
CP2 is DEF
S1>=CP1 returned True
S1>=CP2 returned False
CP1>=S1 returned True
CP2>=S1 returned True
</code></pre>

</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Character Constants</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.character_constants"></a><sup></sup>C++ Character Constants</h1>
<p>
Character constants are one or more members of the “source character set,” the character set in which a program is written, surrounded by single quotation marks (<code>'</code>). They are used to represent characters in the “execution character set,” the character set on the machine where the program executes.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
For Microsoft C++, the source and execution character sets are both ASCII.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
There are three kinds of character constants:
<ul type=disc>
<li>
Normal character constants<br><br></li>
<li>
Multicharacter constants<br><br></li>
<li>
Wide-character constants</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Use wide-character constants in place of multicharacter constants to ensure portability.</p>
<p>
Character constants are specified as one or more characters enclosed in single quotation marks. For example:</p>
<pre><code>char ch = 'x';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Specify normal character constant.
int mbch = 'ab';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Specify system-dependent
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; multicharacter constant.
wchar_t wcch = L'ab';&nbsp;&nbsp; // Specify wide-character constant.
</code></pre>
<p>
Note that <code>mbch</code> is of type <b>int</b>. If it were declared as type <b>char</b>, the second byte would not be retained. A multicharacter constant has four meaningful characters; specifying more than four generates an error message.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>character-constant</i> :</p>
<p class=indent>
<b>'</b><i>c-char-sequence</i><b>'</b><br>
<b>L'</b><i>c-char-sequence</i><b>'</b></p>
<p class=dt>
<i>c-char-sequence</i> :</p>
<p class=indent>
<i>c-char</i><br>
<i>c-char-sequence</i> <i>c-char</i></p>
<p class=dt>
<i>c-char</i> :</p>
<p class=indent>
any member of the source character set except the single quotation mark (<b>'</b>), backslash (\), or newline character<br>
<i>escape-sequence</i></p>
<p class=dt>
<i>escape-sequence</i> :</p>
<p class=indent>
<i>simple-escape-sequence</i><br>
<i>octal-escape-sequence</i><br>
<i>hexadecimal-escape-sequence</i></p>
<p class=dt>
<i>simple-escape-sequence</i> : one of</p>
<p class=indent>
<b>\'</b>  <b>\"</b>  <b>\?</b>  <b>\\</b><br>
<b>\a</b>  <b>\b</b>  <b>\f</b>  <b>\n</b>  <b>\r</b>  <b>\t</b>  <b>\v</b></p>
<p class=dt>
<i>octal-escape-sequence</i> :</p>
<p class=indent>
<i>\octal-digit</i><br>
<i>\octal-digit</i> <i>octal-digit</i><br>
<i>\octal-digit</i> <i>octal-digit</i> <i>octal-digit</i></p>
<p class=dt>
<i>hexadecimal-escape-sequence</i> :</p>
<p class=indent>
<i>\</i><b>x</b><i>hexadecimal-digit</i><br>
<i>hexadecimal-escape-sequence</i> <i>hexadecimal-digit</i></p>
<p>
Microsoft C++ supports normal, multicharacter, and wide-character constants. Use wide-character constants to specify members of the extended execution character set (for example, to support an international application). Normal character constants have type <b>char</b>, multicharacter constants have type <b>int</b>, and wide-character constants have type <b>wchar_t</b>. (The type <b>wchar_t</b> is defined in the standard include files STDDEF.H, STDLIB.H, and STRING.H. The wide-character functions, however, are prototyped only in STDLIB.H.)</p>
<p>
The only difference in specification between normal and wide-character constants is that wide-character constants are preceded by the letter <code>L</code>. For example:</p>
<pre><code>char schar = 'x';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Normal character constant
wchar_t wchar = L'\x81\x19';&nbsp;&nbsp;&nbsp; // Wide-character constant
</code></pre>
<p>
Table 1.2 shows reserved or nongraphic characters that are system dependent or not allowed within character constants. These characters should be represented with escape sequences.</p>
<p class=label>
<b><a name="_pluslang_table_1..2"></a>Table 1.2&nbsp;&nbsp;&nbsp;C++ Reserved or Nongraphic Characters</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Character</b></td>
<td class=label width=24%><b>ASCII <br>
Representation</b></td>
<td class=label width=24%><b>ASCII <br>
Value</b></td>
<td class=label width=18%><b>Escape Sequence</b></td>
</tr>
<tr valign=top>
<td width=34%>Newline</td>
<td width=24%>NL (LF)</td>
<td width=24%>10 or 0x0a</td>
<td width=18%>\n</td>
</tr>
<tr valign=top>
<td width=34%>Horizontal tab</td>
<td width=24%>HT</td>
<td width=24%>9</td>
<td width=18%>\t</td>
</tr>
<tr valign=top>
<td width=34%>Vertical tab</td>
<td width=24%>VT</td>
<td width=24%>11 or 0x0b</td>
<td width=18%>\v</td>
</tr>
<tr valign=top>
<td width=34%>Backspace</td>
<td width=24%>BS</td>
<td width=24%>8</td>
<td width=18%>\b</td>
</tr>
<tr valign=top>
<td width=34%>Carriage return</td>
<td width=24%>CR</td>
<td width=24%>13 or 0x0d</td>
<td width=18%>\r</td>
</tr>
<tr valign=top>
<td width=34%>Formfeed</td>
<td width=24%>FF</td>
<td width=24%>12 or 0x0c</td>
<td width=18%>\f</td>
</tr>
<tr valign=top>
<td width=34%>Alert</td>
<td width=24%>BEL</td>
<td width=24%>7</td>
<td width=18%>\a</td>
</tr>
<tr valign=top>
<td width=34%>Backslash</td>
<td width=24%>\</td>
<td width=24%>92 or 0x5c</td>
<td width=18%>\\</td>
</tr>
<tr valign=top>
<td width=34%>Question mark</td>
<td width=24%>?</td>
<td width=24%>63 or 0x3f</td>
<td width=18%>\?</td>
</tr>
<tr valign=top>
<td width=34%>Single quotation mark</td>
<td width=24%>'</td>
<td width=24%>39 or 0x27</td>
<td width=18%>\'</td>
</tr>
<tr valign=top>
<td width=34%>Double quotation mark</td>
<td width=24%>"</td>
<td width=24%>34 or 0x22</td>
<td width=18%>\"</td>
</tr>
<tr valign=top>
<td width=34%>Octal number</td>
<td width=24%><i>ooo</i></td>
<td width=24%>—</td>
<td width=18%>\<i>ooo</i></td>
</tr>
<tr valign=top>
<td width=34%>Hexadecimal number</td>
<td width=24%><i>hhh</i></td>
<td width=24%>—</td>
<td width=18%>\x<i>hhh</i></td>
</tr>
<tr valign=top>
<td width=34%>Null character</td>
<td width=24%>NUL</td>
<td width=24%>0</td>
<td width=18%>\0</td>
</tr>
</table><br>
<p>
If the character following the backslash does not specify a legal escape sequence, the result is implementation defined. In Microsoft C++, the character following the backslash is taken literally, as though the escape were not present, and a level 1 warning (“unrecognized character escape sequence”) is issued.</p>
<p>
Octal escape sequences, specified in the form \<i>ooo</i>, consist of a backslash and one, two, or three octal characters. Hexadecimal escape sequences, specified in the form \x<i>hhh</i>, consist of the characters <code>\x</code> followed by a sequence of hexadecimal digits. Unlike octal escape constants, there is no limit on the number of hexadecimal digits in an escape sequence.</p>
<p>
Octal escape sequences are terminated by the first character that is not an octal digit, or when three characters are seen. For example:</p>
<pre><code>wchar_t och = L'\076a';&nbsp; // Sequence terminates at a
char&nbsp;&nbsp;&nbsp; ch = '\233';&nbsp;&nbsp;&nbsp;&nbsp; // Sequence terminates after 3 characters
</code></pre>
<p>
Similarly, hexadecimal escape sequences terminate at the first character that is not a hexadecimal digit. Because hexadecimal digits include the letters <code>a</code> through <code>f</code> (and <code>A</code> through <code>F</code>), make sure the escape sequence terminates at the intended digit.</p>
<p>
Because the single quotation mark (<code>'</code>) encloses character constants, use the escape sequence <code>\'</code> to represent enclosed single quotation marks. The double quotation mark (<code>"</code>) can be represented without an escape sequence. The backslash character (\) is a line-continuation character when placed at the end of a line. If you want a backslash character to appear within a character constant, you must type two backslashes in a row (<code>\\</code>). (See <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_PREDIR_Phases_of_Translation">
</object><a href=JavaScript:alink_1.Click()>Phases of Translation</a> in the <i>Preprocessor Reference</i> for more information about line continuation.)</p>
</font></BODY>
</HTML>

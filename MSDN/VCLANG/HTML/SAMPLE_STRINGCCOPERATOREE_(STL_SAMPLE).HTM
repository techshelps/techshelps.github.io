<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>string::operator== (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stringCCoperatorEE">string::operator== (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>string::operator==</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;string&gt;</p>
<b>Prototype:</b><br>
<pre><code>
Function 1:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator==(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const _E *RCharArray);

Function 2:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator==(const _E * LCharArray,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

Function 3:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator==(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 There are three versions of the string::operator== function. The first two functions compare a null-terminated character array against a basic_string. They perform this operation by using the basic_string's string::compare function and returning true if the compare function returns a 0 value. The third function compares two basic_string variables, using the string::compare function of the first basic_string variable. For more information on the compare function, see the string::compare function.  Note that this operator does not work with NULL pointer for the character array. You will need to make sure that the character array is not NULL before you pass it to the operator.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StringEqual.cpp: Illustrates how to use the operator== to test for
//                  equality of a basic_string variable and a
//                  null-terminated string. It also illustrates how to
//                  use the operator== to test for equality of two
//                  basic_string variables.
//
// Functions:
//
//    operator==   returns true if the basic_string and the null-
//                 terminated string are equal.
//    operator==   returns true if both basic_strings are equal.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

void trueFalse(int x)
{
  cout &lt;&lt; (x? "True": "False") &lt;&lt; endl;
}

void main()
{
   string S1="ABC";
   string S2="ABC";
   string S3="DEF";
   string S4; //This specifies an empty initial-controlled sequence.
   char CP1[]="abc";
   char CP2[]="DEF";
   char *CP3 = NULL;

   cout &lt;&lt; "S1 is " &lt;&lt; S1 &lt;&lt; endl;
   cout &lt;&lt; "S2 is " &lt;&lt; S2 &lt;&lt; endl;
   cout &lt;&lt; "S3 is " &lt;&lt; S3 &lt;&lt; endl;
   cout &lt;&lt; "S4 is " &lt;&lt; S4 &lt;&lt; endl;
   cout &lt;&lt; "CP1 is " &lt;&lt; CP1 &lt;&lt; endl;
   cout &lt;&lt; "CP2 is " &lt;&lt; CP2 &lt;&lt; endl;

   cout &lt;&lt; "S1==CP1 returned ";
   trueFalse(S1==CP1);  // False    (calls function 1)

   cout &lt;&lt; "S1==CP2 returned ";
   trueFalse(S1==CP2);  // False   (calls function 1)

   cout &lt;&lt; "CP1==S1 returned ";
   trueFalse(CP1==S1);  // False    (calls function 2)

   cout &lt;&lt; "CP2==S1 returned ";
   trueFalse(CP2==S1);  // False   (calls function 2)

   cout &lt;&lt; "S1==S2 returned ";
   trueFalse(S1==S2);   // True    (calls function 3)

   cout &lt;&lt; "S1==S3 returned ";
   trueFalse(S1==S3);   // False   (calls function 3)

   cout &lt;&lt; "S1==S4 returned ";
   trueFalse(S1==S4);   // False   (calls function 3)

   // Following use of the operator will cause the program to
   // crash since CP3 is NULL.
   // cout &lt;&lt; "S1==CP3 returned ";
   // trueFalse(S1==CP3);
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
S1 is ABC
S2 is ABC
S3 is DEF
S4 is
CP1 is abc
CP2 is DEF
S1==CP1 returned False
S1==CP2 returned False
CP1==S1 returned False
CP2==S1 returned False
S1==S2 returned True
S1==S3 returned False
S1==S4 returned False
</code></pre>

</body>
</html>

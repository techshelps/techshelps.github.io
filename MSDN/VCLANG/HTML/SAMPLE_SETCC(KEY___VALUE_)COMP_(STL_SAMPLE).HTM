<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set::(key_, value_)comp (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_setCCcomp_functions">set::(key_, value_)comp (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>set::key_comp</code> and <code>set::value_comp</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;set&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _K, class _Pr, class _A&gt;
     class set 
     {
         public:
        // Function 1:
        key_compare key_comp() const;
        // Function 2:
        value_compare value_comp() const;
     }
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The key_comp function returns the stored function object that determines the order of elements in the controlled sequence. The value_comp function returns the same function that key_comp returns.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// SetComp.cpp:
//      Illustrates how to use the key_comp function to obtain a
//      function pointer that is the stored function object that
//      determines the order of elements in the controlled sequence.
//      It also illustrates how to use the value_comp function to
//      obtain a function pointer that is the stored function object
//      that determines the order of the elements in the controlled
//      sequence (same as key_comp result).
//
// Functions:
//
//    key_comp     Returns a function pointer to the function that
//                 determines the order of elements in the controlled
//                 sequence.
//    value_comp   Returns a function pointer to the function that
//                 determines the order of elements in the controlled
//                 sequence (same as key_comp).
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;set&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef set&lt;int&gt; SET_INT;

void truefalse(int x)
{
  cout &lt;&lt; (x?"True":"False") &lt;&lt; endl;
}

void main() {
  SET_INT s1;

  cout &lt;&lt; "s1.key_comp()(8,10) returned ";
  truefalse(s1.key_comp()(8,10));  // True

  cout &lt;&lt; "s1.value_comp()(8,10) returned ";
  truefalse(s1.value_comp()(8,10));  // True

  cout &lt;&lt; "s1.key_comp()(10,8) returned ";
  truefalse(s1.key_comp()(10,8));  // False

  cout &lt;&lt; "s1.value_comp()(10,8) returned ";
  truefalse(s1.value_comp()(10,8));  // False

  cout &lt;&lt; "s1.key_comp()(8,8) returned ";
  truefalse(s1.key_comp()(8,8));  // False

  cout &lt;&lt; "s1.value_comp()(8,8) returned ";
  truefalse(s1.value_comp()(8,8));   // False
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>
s1.key_comp()(8,10) returned True
s1.value_comp()(8,10) returned True
s1.key_comp()(10,8) returned False
s1.value_comp()(10,8) returned False
s1.key_comp()(8,8) returned False
s1.value_comp()(8,8) returned False
</code></pre>

</body>
</html>

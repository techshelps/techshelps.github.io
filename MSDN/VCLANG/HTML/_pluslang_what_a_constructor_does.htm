<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What a Constructor Does</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_what_a_constructor_does"></a><sup></sup>What a Constructor Does</h1>
<p>
A constructor performs various tasks that are not visible to you as the programmer, even if you write no code for the constructor. These tasks are all associated with building a complete and correct instance of class type.</p>
<p>
In Microsoft C++ (and some other implementations of C++), a constructor:
<ul type=disc>
<li>
Initializes the object’s virtual base pointer(s) (vbptr). This step is performed if the class is derived from virtual base classes.<br><br></li>
<li>
Calls base class and member constructors in the order of declaration.<br><br></li>
<li>
Initializes the object’s virtual function pointers (vfptr). This step is performed if the class has or inherits virtual functions. Virtual function pointers point to the class’s virtual function table (v-table) and allow correct binding of virtual function calls to code.<br><br></li>
<li>
Executes optional code in the body of the constructor function.</li>
</ul>
<p>
When the constructor is finished, the allocated memory is an object of a given class type. Because of the steps the constructor performs, “late binding” in the form of virtual functions can be resolved at the point of a virtual function call. The constructor has also constructed base classes and has constructed composed objects (objects included as data members). Late binding is the mechanism by which C++ implements polymorphic behavior for objects.</p>
</font></BODY>
</HTML>

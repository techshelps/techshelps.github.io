<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Formal and Actual Arguments</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_formal_and_actual_arguments"></a><sup></sup>Formal and Actual Arguments</h1>
<p>
Calling programs pass information to called functions in “actual arguments.” The called functions access the information using corresponding “formal arguments.”</p>
<p>
When a function is called, the following tasks are performed:
<ul type=disc>
<li>
All actual arguments (those supplied by the caller) are evaluated. There is no implied order in which these arguments are evaluated, but all arguments are evaluated and all side effects completed prior to entry to the function.<br><br></li>
<li>
Each formal argument is initialized with its corresponding actual argument in the expression list. (A formal argument is an argument that is declared in the function header and used in the body of a function.) Conversions are done as if by initialization — both standard and user-defined conversions are performed in converting an actual argument to the correct type. The initialization performed is illustrated conceptually by the following code:<pre><code>void Func( int i ); // Function prototype
...
Func( 7 );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Execute function call
</code></pre>
<p class=tl>
The conceptual initializations prior to the call are: </P><pre><code>int Temp_i = 7;
Func( Temp_i );
</code></pre>
<p class=tl>
Note that the initialization is performed as if using the equal-sign syntax instead of the parentheses syntax. A copy of <code>i</code> is made prior to passing the value to the function. (For more information, see <a href="_pluslang_initializers.htm">Initializers</a>  and <a href="_pluslang_conversions.htm">Conversions,</a> <a href="_pluslang_initialization_using_special_member_functions.htm">Initialization Using Special Member Functions,</a> and&nbsp;<a href="_pluslang_explicit_initialization.htm">Explicit Initialization</a> .</P><p class=tl>
Therefore, if the function prototype (declaration) calls for an argument of type <b>long</b>, and if the calling program supplies an actual argument of type <b>int</b>, the actual argument is promoted using a standard type conversion to type <b>long</b> (see Chapter 3, <a href="_pluslang_standard_conversions.htm">Standard Conversions</a>).</P><p class=tl>
It is an error to supply an actual argument for which there is no standard or user-defined conversion to the type of the formal argument.</P><p class=tl>
For actual arguments of class type, the formal argument is initialized by calling the class’s constructor. (See <a href="_pluslang_constructors.htm">Constructors</a>  for more about these special class member functions.)</P></li>
<li>
The function call is executed.</li>
</ul>
<p>
The following program fragment demonstrates a function call:</p>
<pre><code>void func( long param1, double param2 );

void main()
{
 &nbsp;&nbsp; int i, j;

 &nbsp;&nbsp; // Call func with actual arguments i and j.
 &nbsp;&nbsp; func( i, j );
 &nbsp;&nbsp; ...
}

// Define func with formal parameters param1 and param2.
void func( long param1, double param2 )
{
 &nbsp;&nbsp; ...
}
</code></pre>
<p>
When <code>func</code> is called from main, the formal parameter <code>param1</code> is initialized with the value of <code>i</code> (<code>i</code> is converted to type <b>long</b> to correspond to the correct type using a standard conversion), and the formal parameter <code>param2</code> is initialized with the value of <code>j</code> (<code>j</code> is converted to type <b>double</b> using a standard conversion).</p>
</font></BODY>
</HTML>

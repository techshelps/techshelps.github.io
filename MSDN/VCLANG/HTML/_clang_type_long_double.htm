<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type long double</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_type_long_double"></a><sup></sup>Type long double</h1>
<p>
The range of values for a variable is bounded by the minimum and maximum values that can be represented <i>internally</i> in a given number of bits. However, because of C’s conversion rules (discussed in detail in <a href="_clang_type_conversions.htm">Type Conversions</a> in Chapter 4) you cannot always use the maximum or minimum value for a constant of a particular type in an expression.</p>
<p>
For example, the constant expression <code>-32768</code> consists of the arithmetic negation operator (–) applied to the constant value 32,768. Since 32,768 is too large to represent as a short int, it is given the long type. Consequently, the constant expression <code>-32768</code> has long type. You can only represent –32,768 as a short int by type-casting it to the short type. No information is lost in the type cast, since –32,768 can be represented internally in 2 bytes. </p>
<p>
The value 65,000 in decimal notation is considered a signed constant. It is given the long type because 65,000 does not fit into a short. A value such as 65,000 can only be represented as an unsigned short by type-casting the value to unsigned short type, by giving the value in octal or hexadecimal notation, or by specifying it as 65000U. You can cast this long value to the unsigned short type without loss of information, since 65,000 can fit in 2 bytes when it is stored as an unsigned number. </p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The long double contains 80 bits: 1 for sign, 15 for exponent, and 64 for mantissa. Its range is +/–1.2E4932 with at least 19 digits of precision. Although long double and double are separate types, the representation of long double and double is identical.</p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

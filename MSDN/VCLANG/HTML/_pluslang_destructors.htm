<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Destructors</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_destructors"></a><sup></sup>Destructors</h1>
<p>
“Destructor” functions are the inverse of constructor functions. They are called when objects are destroyed (deallocated). Designate a function as a class’s destructor by preceding the class name with a tilde (<b>~</b>). For example, the destructor for class <code>String</code> is declared: <code>~String()</code>.</p>
<p>
The destructor is commonly used to “clean up” when an object is no longer necessary. Consider the following declaration of a <code>String</code> class:</p>
<pre><code>#include &lt;string.h&gt;

class String
{
public:
 &nbsp;&nbsp; String( char *ch );&nbsp; // Declare constructor
 &nbsp;&nbsp; ~String();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; and destructor.
private:
 &nbsp;&nbsp; char *_text;
};

// Define the constructor.
String::String( char *ch )
{
 &nbsp;&nbsp; // Dynamically allocate the correct amount of memory.
 &nbsp;&nbsp; _text = new char[strlen( ch ) + 1];

 &nbsp;&nbsp; // If the allocation succeeds, copy the initialization string.
 &nbsp;&nbsp; if( _text )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy( _text, ch );
}

// Define the destructor.
String::~String()
{
 &nbsp;&nbsp; // Deallocate the memory that was previously reserved
 &nbsp;&nbsp; //&nbsp; for this string.
 &nbsp;&nbsp; delete[] _text;
}
</code></pre>
<p>
In the preceding example, the destructor <code>String::~String</code> uses the <b>delete</b> operator to deallocate the space dynamically allocated for text storage.</p>
</font></BODY>
</HTML>

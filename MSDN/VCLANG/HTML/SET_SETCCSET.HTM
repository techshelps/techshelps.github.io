<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>set::set</title></head>
<body bgcolor=white>

<h3><a name="set::set">set::set</a></h3>
<META NAME="MS-HKWD" CONTENT="set">
<pre><code>explicit <b>set</b>(const Pred&amp; comp = Pred(), const A&amp; al = A());
<b>set</b>(const set&amp; x);
<b>set</b>(const value_type *first, const value_type *last,
    const Pred&amp; comp = Pred(), const A&amp; al = A());</code></pre>
<p>The constructors with an argument named <code>comp</code> store the function object so that it can be later returned by calling 
<a href="SET_setCCkey_comp.htm#set::key_comp"><code>key_comp</code></a><code>()</code>. All constructors also store the <a href="MEMORY_allocator.htm#allocator object">allocator object</a> <code>al</code> (or, for the copy constructor, <code>x.</code><a href="SET_setCCget_allocator.htm#set::get_allocator"><code>get_allocator</code></a><code>()</code>) 
in <a href="SET_set.htm#set::allocator"><code>allocator</code></a> and initialize the controlled sequence. The first constructor specifies an empty initial controlled sequence. 
The second constructor specifies a copy of the sequence controlled by <code>x</code>. The last constructor specifies the sequence of 
element values <code>[first, last)</code>.</p>
<p>In this <a href="INDEX_Table_of_Contents.htm#implementation">implementation</a>, if a translator does not support member template functions, the template:</p>
<pre><code>template&lt;class InIt&gt;
    <b>set</b>(InIt first, InIt last,
        const Pred&amp; comp = Pred(), const A&amp; al = A());</code></pre>
<p>is replaced by:</p>
<pre><code><b>set</b>(const value_type *first, const value_type *last,
    const Pred&amp; comp = Pred(), const A&amp; al = A());</code></pre>

</body>
</html>

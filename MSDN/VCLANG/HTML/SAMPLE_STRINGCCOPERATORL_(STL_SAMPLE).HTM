<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>string::operator&lt; (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_stringCCoperatorLT">string::operator&lt; (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>string::operator&lt;</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;string&gt;</p>
<b>Prototype:</b><br>
<pre><code>
Function 1:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator&lt;(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const _E *RCharArray);

Function 2:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator&lt;(const _E *LCharArray,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);

Function 3:
template&lt;class _E, class _TYPE, class _A&gt; inline
     bool operator&lt;(const basic_string&lt;_E, _TYPE, _A&gt;&amp; LString,
     const basic_string&lt;_E, _TYPE, _A&gt;&amp; RString);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 There are three versions of the string::operator&lt; function. Two of the functions compare a null-terminated character array against a basic_string. They perform this operation by using the basic_string's string::compare function and returning a value based on the results of the compare function. The third function compares two basic_string variables, using the string::compare function of the first basic_string variable. For more information on the compare function, please see the string::compare function.  Note that this operator does not work with NULL pointer for the character array. You will need to make sure that the character array is not NULL before you pass it to the operator.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// StringLessThan.cpp : Illustrates how to use the operator&lt; to compare
//                      a basic_string variable and a null-terminated
//                      string. It also illustrates how to use the
//                      operator&lt; to compare two basic_string variables.
//
// Functions:
//
//    operator&lt;    Returns true if the first parameter is less than the
//                 second.
//////////////////////////////////////////////////////////////////////

#pragma warning(disable:4786)
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

void trueFalse(int x)
{
  cout &lt;&lt; (x? "True": "False") &lt;&lt; endl;
}

void main()
{
   string S1="ABC";
   string S2="ABC";
   string S3="DEF";
   string S4="abc";
   char CP1[]="ABC";
   char CP2[]="DEF";
   char CP3[]="ABCD";

   cout &lt;&lt; "S1 is " &lt;&lt; S1 &lt;&lt; endl;
   cout &lt;&lt; "S2 is " &lt;&lt; S2 &lt;&lt; endl;
   cout &lt;&lt; "S3 is " &lt;&lt; S3 &lt;&lt; endl;
   cout &lt;&lt; "S4 is " &lt;&lt; S4 &lt;&lt; endl;
   cout &lt;&lt; "CP1 is " &lt;&lt; CP1 &lt;&lt; endl;
   cout &lt;&lt; "CP2 is " &lt;&lt; CP2 &lt;&lt; endl;
   cout &lt;&lt; "CP3 is " &lt;&lt; CP3 &lt;&lt; endl;

   cout &lt;&lt; "S1&lt;CP1 returned ";
   trueFalse(S1&lt;CP1);  // False    (calls function 1)

   cout &lt;&lt; "S1&lt;CP2 returned ";
   trueFalse(S1&lt;CP2);  // True   (calls function 1)

   cout &lt;&lt; "CP1&lt;S1 returned ";
   trueFalse(CP1&lt;S1);  // False    (calls function 2)

   cout &lt;&lt; "CP2&lt;S1 returned ";
   trueFalse(CP2&lt;S1);  // False    (calls function 2)

   cout &lt;&lt; "S1&lt;S2 returned ";
   trueFalse(S1&lt;S2);   // False    (calls function 3)

   cout &lt;&lt; "S1&lt;S3 returned ";
   trueFalse(S1&lt;S3);   // True   (calls function 3)

   cout &lt;&lt; "S1&lt;S4 returned ";
   trueFalse(S1&lt;S4);   // True   (calls function 3)

   cout &lt;&lt; "S1&lt;CP3 returned ";
   trueFalse(S1&lt;CP3);  // True   (calls function 1)
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>S1 is ABC
S2 is ABC
S3 is DEF
S4 is abc
CP1 is ABC
CP2 is DEF
CP3 is ABCD
S1&lt;CP1 returned False
S1&lt;CP2 returned True
CP1&lt;S1 returned False
CP2&lt;S1 returned False
S1&lt;S2 returned False
S1&lt;S3 returned True
S1&lt;S4 returned True
S1&lt;CP3 returned True
</code></pre>

</body>
</html>

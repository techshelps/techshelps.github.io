<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Bit Fields</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.bit_fields"></a><sup></sup>C++ Bit Fields</h1>
<p>
Classes and structures can contain members that occupy less storage than an integral type. These members are specified as bit fields. The syntax for bit-field <i>member-declarator</i> specification follows:</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>declarator</i><sub>opt</sub>  <b>:</b> <i>constant-expression</i></p>
<p>
The <i>declarator</i> is the name by which the member is accessed in the program. It must be an integral type (including enumerated types). The <i>constant-expression</i> specifies the number of bits the member occupies in the structure. Anonymous bit fields — that is, bit-field members with no identifier — can be used for padding.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;An unnamed bit field of width 0 forces alignment of the next bit field to the next <i>type</i> boundary, where <i>type</i> is the type of the member.</p>
<p>
The following example declares a structure that contains bit fields:</p>
<pre><code>struct Date
{
 &nbsp;&nbsp; unsigned nWeekDay&nbsp; : 3;&nbsp;&nbsp;&nbsp; // 0..7&nbsp;&nbsp; (3 bits)
 &nbsp;&nbsp; unsigned nMonthDay : 6;&nbsp;&nbsp;&nbsp; // 0..31&nbsp; (6 bits)
 &nbsp;&nbsp; unsigned nMonth&nbsp;&nbsp;&nbsp; : 5;&nbsp;&nbsp;&nbsp; // 0..12&nbsp; (5 bits)
 &nbsp;&nbsp; unsigned nYear&nbsp;&nbsp;&nbsp;&nbsp; : 8;&nbsp;&nbsp;&nbsp; // 0..100 (8 bits)
};
</code></pre>
<p>
The conceptual memory layout of an object of type <code>Date</code> is shown in Figure 8.2.</p>
<p class=label>
<b>Figure 8.2&nbsp;&nbsp;&nbsp;Memory Layout of Date Object</b></p>
<p>
<img src="l080802.gif" border=0></p>
<p>
Note that <code>nYear</code> is 8 bits long and would overflow the word boundary of the declared type, <b>unsigned int</b>. Therefore, it is begun at the beginning of a new <b>unsigned int</b>. It is not necessary that all bit fields fit in one object of the underlying type; new units of storage are allocated, according to the number of bits requested in the declaration.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
The ordering of data declared as bit fields is from low to high bit, as shown in Figure 8.2.</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
If the declaration of a structure includes an unnamed field of length 0, as shown in the following example, </p>
<pre><code>struct Date
{
 &nbsp;&nbsp; unsigned nWeekDay&nbsp; : 3;&nbsp;&nbsp;&nbsp; // 0..7&nbsp;&nbsp; (3 bits)
 &nbsp;&nbsp; unsigned nMonthDay : 6;&nbsp;&nbsp;&nbsp; // 0..31&nbsp; (6 bits)
 &nbsp;&nbsp; unsigned&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 0;&nbsp;&nbsp;&nbsp; // Force alignment to next boundary.
 &nbsp;&nbsp; unsigned nMonth&nbsp;&nbsp;&nbsp; : 5;&nbsp;&nbsp;&nbsp; // 0..12&nbsp; (5 bits)
 &nbsp;&nbsp; unsigned nYear&nbsp;&nbsp;&nbsp;&nbsp; : 8;&nbsp;&nbsp;&nbsp; // 0..100 (8 bits)
};
</code></pre>
<p>
the memory layout is as shown in Figure 8.3.</p>
<p class=label>
<b>Figure 8.3&nbsp;&nbsp;&nbsp;Layout of Date Object with Zero-Length Bit Field</b></p>
<p>
<img src="l080803.gif" border=0></p>
<p>
The underlying type of a bit field must be an integral type, as described in <a href="_pluslang_fundamental_types.htm">Fundamental Types</a> in Chapter 2.</p>
</font></BODY>
</HTML>

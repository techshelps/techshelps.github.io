<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DLL Import and Export Functions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_dll_import_and_export_functions"></a><sup></sup>DLL Import and Export Functions</h1>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The <b>dllimport</b> and <b>dllexport</b> storage-class modifiers are Microsoft-specific extensions to the C language. These modifiers explicitly define the DLL’s interface to its client (the executable file or another DLL). Declaring functions as <b>dllexport</b> eliminates the need for a module-definition (.DEF) file. You can also use the <b>dllimport</b> and <b>dllexport</b> modifiers with data and objects.</p>
<p>
The <b>dllimport</b> and <b>dllexport</b> storage-class modifiers must be used with the extended attribute syntax keyword, <b>__declspec</b>, as shown in this example:</p>
<pre><code>#define DllImport   __declspec( dllimport )
#define DllExport   __declspec( dllexport )

DllExport void func();
DllExport int i = 10;
DllExport int j;
DllExport int n;
</code></pre>
<p>
For specific information about the syntax for extended storage-class modifiers, see <a href="_clang_c_extended_storage.2d.class_attributes.htm">Extended Storage-Class Attributes</a> in Chapter 3. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

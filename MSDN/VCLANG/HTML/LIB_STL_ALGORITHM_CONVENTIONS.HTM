<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Algorithm Conventions</title></head>
<body bgcolor=white>

<h2><a name="Algorithm Conventions">Algorithm Conventions</a></h2>
<META NAME="MS-HKWD" CONTENT="Algorithm Conventions"><p>The descriptions of the algorithm template functions employ several shorthand phrases:</p>
<ul>
<li>The phrase "<b>in the range </b><code><b>[A, B)</b></code>" means the sequence of zero or more discrete values beginning with <code>A</code> up to 
but not including <code>B</code>. A range is valid only if <code>B</code> is <b>reachable</b> from <code>A</code>: You can store <code>A</code> in an object <code>N</code> (<code>N = A</code>), 
increment the object zero or more times (<code>++N</code>), and have the object compare equal to <code>B</code> after a finite number of 
increments (<code>N == B</code>).</li>
<li>The phrase "<b>each </b><code><b>N</b></code><b> in the range </b><code><b>[A, B)</b></code>" means that <code>N</code> begins with the value <code>A</code> and is incremented zero or 
more times until it equals the value <code>B</code>. The case <code>N == B</code> is not in the range.</li>
<li>The phrase "<b>the lowest value of </b><code><b>N</b></code><b> in the range </b><code><b>[A, B)</b></code><b> such that X</b>" means that the condition X is 
determined for each <code>N</code> in the range <code>[A, B)</code> until the condition X is met.</li>
<li>The phrase "<b>the highest value of </b><code><b>N</b></code><b> in the range </b><code><b>[A, B)</b></code><b> such that X</b>" usually means that X is determined for 
each <code>N</code> in the range <code>[A, B)</code>. The function stores in <code>K</code> a copy of <code>N</code> each time the condition X is met. If any such 
store occurs, the function replaces the final value of <code>N</code> (which equals <code>B</code>) with the value of <code>K</code>. For a bidirectional or 
random-access iterator, however, it can also mean that <code>N</code> begins with the highest value in the range and is 
decremented over the range until the condition X is met.</li>
<li>Expressions such as <code><b>X - Y</b></code>, where <code>X</code> and <code>Y</code> can be iterators other than random-access iterators, are intended in 
the mathematical sense. The function does not necessarily evaluate <code>operator-</code> if it must determine such a value. 
The same is true for expressions such as <code><b>X + N</b></code> and <code><b>X - N</b></code>, where <code>N</code> is an integer type.</li>
</ul>
<p>Several algorithms use a predicate that must impose a <a name="strict weak ordering"><b>strict weak ordering</b></a> on pairs of elements from a 
sequence. For the predicate <code>pr(X, Y)</code>:</p>
<ul>
<li>"strict" means that <code>pr(X, X)</code> is false</li>
<li>"weak" means that <code>X</code> and <code>Y</code> have an <a name="equivalent ordering"><b>equivalent ordering</b></a> if <code>!pr(X, Y) &amp;&amp; !pr(Y, X)</code> (<code>X == Y</code> need not be 
defined)</li>
<li>"ordering" means that <code>pr(X, Y) &amp;&amp; pr(Y, Z)</code> implies <code>pr(X, Z)</code></li>
</ul>
<p>Some of these algorithms implicitly use the predicate <code>X &lt; Y</code>. Other predicates that typically satisfy the "strict weak 
ordering" requirement are <code>X &gt; Y</code>, <a href="FUNCTIO2_less.htm#less"><code>less</code></a><code>(X, Y)</code>, and <a href="FUNCTIO2_greater.htm#greater"><code>greater</code></a><code>(X, Y)</code>. Note, however, that predicates such as <code>X &lt;= 
Y</code> and <code>X &gt;= Y</code> do not satisfy this requirement.</p>
<p>A sequence of elements designated by iterators in the range <code>[first, last)</code> is "<b>a </b><a name="sequence ordering"><b>sequence ordered</b></a><b> by 
</b><code><b>operator&lt;</b></code>" if, for each <code>N</code> in the range <code>[0, last - first)</code> and for each <code>M</code> in the range <code>(N, last - first)</code> the 
predicate <code>!(*(first + M) &lt; *(first + N))</code> is true. (Note that the elements are sorted in <i>ascending</i> order.) The 
predicate function <code>operator&lt;</code>, or any replacement for it, must not alter either of its operands. Moreover, it must 
impose a <a href="lib_stl_Algorithm_Conventions.htm#strict weak ordering">strict weak ordering</a> on the operands it compares.</p>
<p>A sequence of elements designated by iterators in the range <code>[first, last)</code> is "<b>a </b><a name="heap ordering"><b>heap ordered</b></a><b> by </b><code><b>operator&lt;</b></code>" if, 
for each <code>N</code> in the range <code>[1, last - first)</code> the predicate <code>!(*first &lt; *(first + N))</code> is true. (The first element 
is the largest.) Its internal structure is otherwise known only to the template functions <a href="ALGORITH_make_heap.htm#make_heap"><code>make_heap</code></a>, <a href="ALGORITH_pop_heap.htm#pop_heap"><code>pop_heap</code></a>, and 
<a href="ALGORITH_push_heap.htm#push_heap"><code>push_heap</code></a>. As with an <a href="lib_stl_Algorithm_Conventions.htm#sequence ordering">ordered sequence</a>, the predicate function <code>operator&lt;</code>, or any replacement for it, must not alter 
either of its operands, and it must impose a <a href="lib_stl_Algorithm_Conventions.htm#strict weak ordering">strict weak ordering</a> on the operands it compares.</p>
</body>

</html>

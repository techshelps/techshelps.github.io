<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Vector Class, operator&lt; (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_vectorCCoperatorLT">Vector Class, operator&lt; (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the the vector class <code>operator&lt;</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;vector&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _TYPE, class _A&gt; inline
     bool operator&lt;(const vector&lt;_TYPE, _A&gt;&amp; _X,
     const vector&lt;_TYPE, _A&gt;&amp; _Y);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The sample declares an empty vector of IDs, a user-defined type. It initializes and adds four IDs to the vector in random order. It sorts them using the operator&lt; defined for ID and generates the newly sorted vector. (Note that it sorts in order of Score, not Name.)  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
//    Opless.cpp -- Illustrates the defining the &lt; operator to sort vectors
//
// Functions:
//
//    operator&lt; - Vector comparison operator.
//
//    vector::begin - Returns an iterator to start traversal of the vector.
//
//    vector::end - Returns an iterator for the last element of the vector.
//
//    vector::iterator - Traverses the vector.
//
//    vector::push_back - Appends (inserts) an element to the end of a
//                        vector, allocating memory for it if necessary.
//
//    sort algorithm - Sorts the vector.
//
//////////////////////////////////////////////////////////////////////

// The debugger can't handle symbols more than 255 characters long.
// STL often creates symbols longer than that.
// When symbols are longer than 255 characters, the warning is disabled.
#pragma warning(disable:4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;

using namespace std ;

// The ID class is used for team scoring. It holds each player's name
// and score.
class ID
{
public:
    string Name;
    int Score;
    ID() : Name(""), Score(0) {}
    ID(string NewName, int NewScore) : Name(NewName), Score(NewScore) {}
};

// In this example, an ID is equivalent only if both name and score match.
bool operator==(const ID&amp; x, const ID&amp; y)
{
    return (x.Name == y.Name) &amp;&amp; (x.Score == y.Score);
}

// IDs will be sorted by Score, not by Name.
bool operator&lt;(const ID&amp; x, const ID&amp; y)
{
    return x.Score &lt; y.Score;
}

// Define a template class for a vector of IDs.
typedef vector&lt;ID&gt; NAMEVECTOR;

void main()
{
    // Declare a dynamically allocated vector of IDs.
    NAMEVECTOR theVector;

    // Iterator is used to loop through the vector.
    NAMEVECTOR::iterator theIterator;

    // Create a pseudo-random vector of players and scores.
    theVector.push_back(ID("Karen Palmer", 2));
    theVector.push_back(ID("Ada Campbell", 1));
    theVector.push_back(ID("John Woloschuk", 3));
    theVector.push_back(ID("Grady Leno", 2));

    for (theIterator = theVector.begin(); theIterator != theVector.end();
         theIterator++)
        cout &lt;&lt; theIterator->Score  &lt;&lt; "\t"
             &lt;&lt; theIterator->Name &lt;&lt; endl;
    cout &lt;&lt; endl;

    // Sort the vector of players by score.
    sort(theVector.begin(), &amp;theVector[theVector.size()]);

    // Output the contents of the vector in its new, sorted order.
    cout &lt;&lt; "Players ranked by score:" &lt;&lt; endl;
    for (theIterator = theVector.begin(); theIterator != theVector.end();
         theIterator++)
        cout &lt;&lt; theIterator->Score  &lt;&lt; "\t"
             &lt;&lt; theIterator->Name &lt;&lt; endl;
    cout &lt;&lt; endl &lt;&lt; endl;
}

</code></pre>

<p>Program Output is:</p>
<pre><code>
Players and scores:
2       Karen Palmer
1       Ada Campbell
3       John Woloschuk
2       Grady Leno

Players ranked by score:
1       Ada Campbell
2       Karen Palmer
2       Grady Leno
3       John Woloschuk
</code></pre>

</body>
</html>

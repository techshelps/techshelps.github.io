<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview of File Translation</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_overview_of_file_translation"></a><sup></sup>Overview of File Translation</h1>
<p>
C++ programs, like C programs, consist of one or more files. Each of these files is translated in the following conceptual order (the actual order follows the “as if” rule: translation must occur as if these steps had been followed):
<ol>
<li>
Lexical tokenizing. Character mapping and trigraph processing, line splicing, and tokenizing are performed in this translation phase.<br><br></li>
<li>
Preprocessing. This translation phase brings in ancillary source files referenced by <b>#include</b> directives, handles “stringizing” and “charizing” directives, and performs token pasting and macro expansion (see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_PREDIR_Preprocessor_Directives">
</object><a href=JavaScript:alink_1.Click()>Preprocessor Directives</a> in the <i>Preprocessor Reference</i> for more information). The result of the preprocessing phase is a sequence of tokens that, taken together, define a “translation unit.”<p class=tl>
Preprocessor directives always begin with the number-sign (<b>#</b>) character (that is, the first nonwhite-space character on the line must be a number sign). Only one preprocessor directive can appear on a given line. For example:</P><pre><code>#include &lt;iostream.h&gt;  // Include text of iostream.h in 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; translation unit.
#define NDEBUG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Define NDEBUG (NDEBUG contains empty 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; text string).
</code></pre>
</li>
<li>
Code generation. This translation phase uses the tokens generated in the preprocessing phase to generate object code.<p class=tl>
During this phase, syntactic and semantic checking of the source code is performed.</P></li>
</ol>
<p>
See <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_PREDIR_Phases_of_Translation">
</object><a href=JavaScript:alink_2.Click()>Phases of Translation</a> in the <i>Preprocessor Reference</i> for more information.</p>
<p>
The C++ preprocessor is a strict superset of the ANSI C preprocessor, but the C++ preprocessor differs in a few instances. The following list describes several differences between the ANSI C and the C++ preprocessors:
<ul type=disc>
<li>
Single-line comments are supported. See <a href="_pluslang_c.2b2b_.comments.htm">Comments</a> for more information.<br><br></li>
<li>
One predefined macro, <b>__cplusplus</b>, is defined only for C++. See <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_Predefined_Macros">
</object><a href=JavaScript:alink_3.Click()>Predefined Macros</a> in the <i>Preprocessor Reference</i> for more information.<br><br></li>
<li>
The C preprocessor does not recognize the C++ operators: <b>.*</b>, <b>–&gt;*</b>, and <b>::</b>. See <a href="_pluslang_c.2b2b_.operators.htm">Operators</a> and Chapter 4, <a href="_pluslang_expressions.htm">Expressions.</a> for more information about operators.</li>
</ul>
</font></BODY>
</HTML>

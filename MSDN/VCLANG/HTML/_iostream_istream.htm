<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>istream</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_istream"></a><sup></sup>istream</h1>
<p>
<b>#include &lt;iostream.h&gt;</b></p>
<p>
The <b>istream</b> class provides the basic capability for sequential and random-access input. An <b>istream</b> object has a <b>streambuf</b>-derived object attached, and the two classes work together; the <b>istream</b> class does the formatting, and the <b>streambuf</b> class does the low-level buffered input.</p>
<p>
You can use <b>istream</b> objects for sequential disk input if you first construct an appropriate <b>filebuf</b> object. More often, you will use the predefined stream object <b>cin</b> (which is actually an object of class <b>istream_withassign</b>), or you will use objects of classes <b>ifstream</b> (disk file streams) and <b>istrstream</b> (string streams).</p>
<p class=label>
<b>Derivation</b></p>
<p>
It is not always necessary to derive from <b>istream</b> to add functionality to a stream; consider deriving from <b>streambuf</b> instead, as illustrated in <a href="_iostream_deriving_your_own_stream_classes.htm">Deriving Your Own Stream Classes</a>. The <b>ifstream</b> and <b>istrstream</b> classes are examples of <b>istream</b>-derived classes that construct member objects of predetermined derived <b>streambuf</b> classes. You can add manipulators without deriving a new class.</p>
<p>
If you add new extraction operators for a derived <b>istream</b> class, then the rules of C++ dictate that you must reimplement all the base class extraction operators. See the “Derivation” section of class <b>ostream</b> for an efficient reimplementation technique.</p>
<p class=label>
<b>Construction/Destruction — Public Members</b></p>
<p class=dt>
<a href="_iostream_istream.3a3a.istream.htm">istream</a></p>
<p class=indent>
Constructs an <b>istream</b> object attached to an existing object of a <b>streambuf</b>-derived class.</p>
<p class=dt>
<a href="_iostream_istream.3a3a7e.istream.htm">~istream</a></p>
<p class=indent>
Destroys an <b>istream</b> object.</p>
<p class=label>
<b>Prefix/Suffix Functions — Public Members</b></p>
<p class=dt>
<a href="_iostream_istream.3a3a.ipfx.htm">ipfx</a></p>
<p class=indent>
Check for error conditions prior to extraction operations (input prefix function).</p>
<p class=dt>
<a href="_iostream_istream.3a3a.isfx.htm">isfx</a></p>
<p class=indent>
Called after extraction operations (input suffix function).</p>
<p class=label>
<b>Input Functions — Public Members</b></p>
<p class=dt>
<a href="_iostream_istream.3a3a.get.htm">get</a></p>
<p class=indent>
Extracts characters from the stream up to, but not including, delimiters.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.getline.htm">getline</a></p>
<p class=indent>
Extracts characters from the stream (extracts and discards delimiters).</p>
<p class=dt>
<a href="_iostream_istream.3a3a.read.htm">read</a></p>
<p class=indent>
Extracts data from the stream.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.ignore.htm">ignore</a></p>
<p class=indent>
Extracts and discards characters.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.peek.htm">peek</a></p>
<p class=indent>
Returns a character without extracting it from the stream.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.gcount.htm">gcount</a></p>
<p class=indent>
Counts the characters extracted in the last unformatted operation.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.eatwhite.htm">eatwhite</a></p>
<p class=indent>
Extracts leading white space.</p>
<p class=label>
<b>Other Functions — Public Members</b></p>
<p class=dt>
<a href="_iostream_istream.3a3a.putback.htm">putback</a></p>
<p class=indent>
Puts characters back to the stream.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.sync.htm">sync</a></p>
<p class=indent>
Synchronizes the stream buffer with the external source of characters.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.seekg.htm">seekg</a></p>
<p class=indent>
Changes the stream’s get pointer.</p>
<p class=dt>
<a href="_iostream_istream.3a3a.tellg.htm">tellg</a></p>
<p class=indent>
Gets the value of the stream’s get pointer.</p>
<p class=label>
<b>Operators — Public Members</b></p>
<p class=dt>
<a href="_iostream_istream.3a3a.operator_.3e3e.htm">operator &gt;&gt;</a></p>
<p class=indent>
Extraction operator for various types.</p>
<p class=label>
<b>Protected Members</b></p>
<p class=dt>
<a href="_iostream_istream.3a3a.istream.htm">istream</a></p>
<p class=indent>
Constructs an <b>istream</b> object.</p>
<p class=label>
<b>Manipulators</b></p>
<p class=dt>
<a href="_iostream_istream.26_.ws.htm">ws</a></p>
<p class=indent>
Extracts leading white space.</p>
<p>
<a href="_iostream_iostream_class_list.htm#_iostream_input_stream_classes">Input Stream Classes</a></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;<a href="_iostream_streambuf.htm">streambuf</a>, <a href="_iostream_ifstream.htm">ifstream</a>, <a href="_iostream_istrstream.htm">istrstream</a>, <a href="_iostream_istream_withassign.htm">istream_withassign</a></p>
</font></BODY>
</HTML>

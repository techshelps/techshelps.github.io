<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Predicate Version of adjacent_find (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_adjacent_findP">Predicate Version of adjacent_find (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the predicate version of the <code>adjacent_find</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class ForwardIterator, class BinaryPredicate&gt; inline
      ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last, BinaryPredicate binary_pred) ;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The adjacent_find algorithm finds consecutive pairs of matching elements in a sequence. adjacent_find returns an iterator referencing the first consecutive matching element in the range [first, last), or last if there are no such elements.  Comparison is done using the binary_pred function in this version of the algorithm. The binary_pred function can be any user-defined function. You could also use one of the binary function objects provided by STL.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// adfind.cpp : Illustrates how to use the predicate version of
//              adjacent_find function.
//
// Functions:
//
//   adjacent_find  - Locate a consecutive sequence in a range.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

using namespace std;


void main()
{
    const int VECTOR_SIZE = 5 ;

    // Define a template class vector of strings
    typedef vector&lt;string &gt; StringVector ;

    //Define an iterator for template class vector of strings
    typedef StringVector::iterator StringVectorIt ;

    StringVector NamesVect(VECTOR_SIZE) ;   //vector containing names

    StringVectorIt location ;   // stores the position for the
                                 // first pair of matching
                                 // consecutive elements.

    StringVectorIt start, end, it ;

    // Initialize vector NamesVect
    NamesVect[0] = "Aladdin" ;
    NamesVect[1] = "Jasmine" ;
    NamesVect[2] = "Mickey" ;
    NamesVect[3] = "Minnie" ;
    NamesVect[4] = "Goofy" ;

    start = NamesVect.begin() ;   // location of first
                                  // element of NamesVect

    end = NamesVect.end() ;       // one past the location
                                  // last element of NamesVect

    // print content of NamesVect
    cout &lt;&lt; "NamesVect { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; ", " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // Find the first name that is lexicographically greater
    // than the following name in the range [first, last + 1).
    // This version performs matching using binary predicate
    // function greater&lt;string&gt;
    location = adjacent_find(start, end, greater&lt;string&gt;()) ;

    // print the first pair of strings such that the first name is
    // lexicographically greater than the second.
    if (location != end)
        cout &lt;&lt; "(" &lt;&lt; *location &lt;&lt; ", " &lt;&lt; *(location + 1) &lt;&lt; ")"
        &lt;&lt; " the first pair of strings in NamesVect such that\n"
        &lt;&lt; "the first name is lexicographically greater than"
        &lt;&lt; "the second\n" &lt;&lt; endl ;
    else
        cout &lt;&lt; "No consecutive pair of strings found such that\n"
        &lt;&lt; "the first name is lexicographically greater than "
        &lt;&lt; "the second\n" &lt;&lt; endl ;

}

 </code></pre>

<p>Program Output is:</p>

<pre><code>NamesVect { Aladdin, Jasmine, Mickey, Minnie, Goofy,  }

(Minnie, Goofy) the first pair of strings in NamesVect such that
the first name is lexicographically greater than the second
</code></pre>

</body>
</html>

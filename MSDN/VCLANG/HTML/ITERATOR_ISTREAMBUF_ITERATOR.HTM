<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>istreambuf_iterator</title></head>
<body bgcolor=white>

<h2><a name="istreambuf_iterator">istreambuf_iterator</a></h2>
<META NAME="MS-HKWD" CONTENT="istreambuf_iterator">
<pre><code>template&lt;class E, class T = char_traits&lt;E&gt; &gt;
    class <b>istreambuf_iterator</b>
        : public iterator&lt;input_iterator_tag, T, Dist&gt; {
public:
    typedef E <a href="ITERATOR_istreambuf_iteratorCCchar_type.htm#istreambuf_iterator::char_type"><b>char_type</b></a>;
    typedef T <a href="ITERATOR_istreambuf_iteratorCCtraits_type.htm#istreambuf_iterator::traits_type"><b>traits_type</b></a>;
    typedef T::int_type <a href="ITERATOR_istreambuf_iteratorCCint_type.htm#istreambuf_iterator::int_type"><b>int_type</b></a>;
    typedef basic_streambuf&lt;E, T&gt; <a href="ITERATOR_istreambuf_iteratorCCstreambuf_type.htm#istreambuf_iterator::streambuf_type"><b>streambuf_type</b></a>;

    typedef basic_istream&lt;E, T&gt; <a href="ITERATOR_istreambuf_iteratorCCistream_type.htm#istreambuf_iterator::istream_type"><b>istream_type</b></a>;
    <a href="ITERATOR_istreambuf_iteratorCCistreambuf_iterator.htm#istreambuf_iterator::istreambuf_iterator"><b>istreambuf_iterator</b></a>(streambuf_type *sb = 0) throw();
    <a href="ITERATOR_istreambuf_iteratorCCistreambuf_iterator.htm#istreambuf_iterator::istreambuf_iterator"><b>istreambuf_iterator</b></a>(istream_type&amp; is) throw();
    const E&amp; <a href="ITERATOR_istreambuf_iteratorCCoperatorX.htm#istreambuf_iterator::operator*"><b>operator*</b></a>() const;
    const E *<a href="ITERATOR_istreambuf_iteratorCCoperatorMG.htm#istreambuf_iterator::operator-&gt;"><b>operator-&gt;</b></a>();
    istreambuf_iterator&amp; <a href="ITERATOR_istreambuf_iteratorCCoperatorPP.htm#istreambuf_iterator::operator++"><b>operator++</b></a>();
    istreambuf_iterator <a href="ITERATOR_istreambuf_iteratorCCoperatorPP.htm#istreambuf_iterator::operator++"><b>operator++</b></a>(int);
    bool <a href="ITERATOR_istreambuf_iteratorCCequal.htm#istreambuf_iterator::equal"><b>equal</b></a>(const istreambuf_iterator&amp; rhs);
    };</code></pre>
<p>The template class describes an input iterator object. It extracts elements of class <code><b>E</b></code> from an input stream buffer, 
which it accesses via an object it stores, of type pointer to <code>basic_streambuf&lt;E, </code><code>T</code><code>&gt;</code>. After constructing or 
incrementing an object of class <code>istreambuf_iterator</code> with a non-null stored pointer, the object effectively attempts 
to extract and store an object of type <code>E</code> from the associated itput stream. (The extraction may be delayed, however, 
until the object is actually dereferenced or copied.) If the extraction fails, the object effectively replaces the stored 
pointer with a null pointer (thus making an end-of-sequence indicator).</p>
</body>
</html>

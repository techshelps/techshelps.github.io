<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>list::assign (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_listCCassign">list::assign (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>list::assign</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;list&gt;</p>
<b>Prototype:</b><br>
<pre><code>
     void assign(const_iterator first, const_iterator last);
     void assign(size_type n, const T&amp; x = T());
     iterator erase(iterator it);
     iterator erase(iterator first, iterator last);
     bool empty() const;
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The first member function replaces the sequence controlled by *this with the sequence [first, last). The second member function replaces the sequence controlled by *this with a repetition of n elements of value x.  The third member function removes the element of the controlled sequence pointed to by it. The fourth member function removes the elements of the controlled sequence in the range [first, last). Both return an iterator that designates the first element remaining beyond any elements removed, or end() if no such element exists.  The last member function returns true for an empty controlled sequence.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// assign.cpp :  Shows the various ways to assign and erase elements
//               from a list&lt;T&gt;.
//
// Functions:
//
//    list::assign
//    list::empty
//    list::erase
//////////////////////////////////////////////////////////////////////

#include &lt;list&gt;
#include &lt;iostream&gt;

using namespace std ;

typedef list&lt;int&gt; LISTINT;

void main()
{
    LISTINT listOne;
    LISTINT listAnother;
    LISTINT::iterator i;

    // Add some data
    listOne.push_front (2);
    listOne.push_front (1);
    listOne.push_back (3);

    listAnother.push_front(4);

    listAnother.assign(listOne.begin(), listOne.end());

    // 1 2 3
    for (i = listAnother.begin(); i != listAnother.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    listAnother.assign(4, 1);

    // 1 1 1 1
    for (i = listAnother.begin(); i != listAnother.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    listAnother.erase(listAnother.begin());

    // 1 1 1
    for (i = listAnother.begin(); i != listAnother.end(); ++i)
        cout &lt;&lt; *i &lt;&lt; " ";
    cout &lt;&lt; endl;

    listAnother.erase(listAnother.begin(), listAnother.end());
    if (listAnother.empty())
        cout &lt;&lt; "All gone\n";
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>1 2 3
1 1 1 1
1 1 1
All gone
</code></pre>

</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Default Arguments</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_default_arguments"></a><sup></sup>Default Arguments</h1>
<p>
In many cases, functions have arguments that are used so infrequently that a default value would suffice. To address this, the default-argument facility allows for specifying only those arguments to a function that are meaningful in a given call. To illustrate this concept, consider the example presented in <a href="_pluslang_function_overloading.htm">Function Overloading</a>.</p>
<pre><code>// Prototype three print functions.
int print( char *s );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Print a string.
int print( double dvalue );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Print a double.
int print( double dvalue, int prec );&nbsp; // Print a double with a
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; given precision.
</code></pre>
<p>
In many applications, a reasonable default can be supplied for <code>prec</code>, eliminating the need for two functions:</p>
<pre><code>// Prototype two print functions.
int print( char *s );&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Print a string.
int print( double dvalue, int prec=2 );&nbsp; // Print a double with a
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; given precision.
</code></pre>
<p>
The implementation of the <code>print</code> function is changed slightly to reflect the fact that only one such function exists for type <b>double</b>:</p>
<pre><code>// Print a double in specified precision.
//&nbsp; Positive numbers for precision indicate how many digits'
//&nbsp; precision after the decimal point to show. Negative
//&nbsp; numbers for precision indicate where to round the number
//&nbsp; to the left of the decimal point.
int print( double dvalue, int prec )
{
 &nbsp;&nbsp; // Use table-lookup for rounding/truncation.
 &nbsp;&nbsp; static const double rgPow10[] = { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10E-7, 10E-6, 10E-5, 10E-4, 10E-3, 10E-2, 10E-1, 10E0,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10E1,&nbsp; 10E2,&nbsp; 10E3,&nbsp; 10E4, 10E5,&nbsp; 10E6
 &nbsp;&nbsp; };
 &nbsp;&nbsp; const int iPowZero = 6;
// If precision out of range, just print the number.
 &nbsp;&nbsp; if( prec &gt;= -6 || prec &lt;= 7 )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Scale, truncate, then rescale.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dvalue = floor( dvalue / rgPow10[iPowZero - prec] ) *
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rgPow10[iPowZero - prec];

 &nbsp;&nbsp; cout &lt;&lt; dvalue &lt;&lt; endl;

 &nbsp;&nbsp; return cout.good();
}
</code></pre>
<p>
To invoke the new <code>print</code> function, use code such as the following:</p>
<pre><code>print( d );&nbsp;&nbsp;&nbsp; // Precision of 2 supplied by default argument.
print( d, 0 ); // Override default argument to achieve other
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; results.
</code></pre>
<p>
Note these points when using default arguments:
<ul type=disc>
<li>
Default arguments are used only in function calls where trailing arguments are omitted — they must be the last argument(s). Therefore, the following code is illegal:<pre><code>int print( double dvalue = 0.0, int prec );
</code></pre>
</li>
<li>
A default argument cannot be redefined in later declarations even if the redefinition is identical to the original. Therefore, the following code produces an error:<pre><code>// Prototype for print function.
int print( double dvalue, int prec = 2 );

...

// Definition for print function.
int print( double dvalue, int prec = 2 )
{
...
}
</code></pre>
<p class=tl>
The problem with this code is that the function declaration in the definition redefines the default argument for <code>prec</code>.</P></li>
<li>
Additional default arguments can be added by later declarations.<br><br></li>
<li>
Default arguments can be provided for pointers to functions. For example:<pre><code>int (*pShowIntVal)( int i = 0 );
</code></pre>
</li>
</ul>
</font></BODY>
</HTML>

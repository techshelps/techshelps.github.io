<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>binary_function Structure (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_binary_function_structure">binary_function Structure (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>binary_function</code> structure in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; functional &gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _A1, class _A2, class _R&gt;
     struct binary_function
     {
         typedef _A1 first_argument_type;
         typedef _A2 second_argument_type;
         typedef _R result_type;
     };
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The binary_function&lt;A,B,C&gt; class is used as a base class to allow the user to easily define binary operator functions that take data types A and B as arguments and return data type C objects.  </p>
<p><b>Sample Code: </b></p>
<pre><code>////////////////////////////////////////////
//
// Compile options needed: /GX
//
// binfunc.cpp : Illustrating the binary_function
//               structure.
//
// Structure used: binary_function&lt;A,B,C&gt; - base
//                 class used to create operator
//                 functions taking data types A
//                 and B and returning data type C.
////////////////////////////////////////////

#include &lt;functional&gt;
#include &lt;iostream&gt;

using namespace std ;

class binary_test : public binary_function&lt;binary_test &amp;,int,float&gt;
{
public:
  float value;
  binary_test(){value=10.0;}
  binary_test(float x){value=x;}
  result_type operator&lt;&lt;(second_argument_type arg2);
};

binary_test::result_type
binary_test::operator&lt;&lt;(binary_test::second_argument_type arg2)
{
  value = ((int)value) &lt;&lt; arg2;
  cout &lt;&lt; "New value after shift is" &lt;&lt; value &lt;&lt; endl;
  return value;
}

void main(void)
{
  binary_test item;

  cout &lt;&lt; "Begin" &lt;&lt; endl;
  item = item &lt;&lt; 2;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Begin
New value after shift is 40.0
</code></pre>

</body>
</html>

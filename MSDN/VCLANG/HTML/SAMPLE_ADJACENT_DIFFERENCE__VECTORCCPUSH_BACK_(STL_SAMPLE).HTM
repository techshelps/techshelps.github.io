<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>adjacent_difference, vector::push_back (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_adj_diff_vectorCCpush_back">adjacent_difference, vector::push_back (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>adjacent_difference</code> and <code>vector::push_back</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;numeric&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class InputIterator, class OutputIterator&gt; inline
     OutputIterator adjacent_difference(InputIterator first, InputIterator last, OutputIterator result)

template&lt;class InputIterator, class OutputIterator, class BinaryOperator&gt; inline
     OutputIterator adjacent_difference(InputIterator first, InputIterator last, OutputIterator result,
     BinaryOperator binary_op)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 Assigns to every element referred to by iterator i in the range [result + 1, result + (last - first)) a value correspondingly equal to *(first + (i - result)) - *(first + (i - result) - 1) or binary_op (*(first + (i - result)), *(first + (i - result) - 1)). Result gets the value of *first.  </p>
<p><b>Sample Code: </b></p>
<pre><code>///////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// adj_diff.cpp : Demonstrates the use of adjacent_difference()
//
// Description of adjacent_difference(first,last,result)
//                adjacent_difference(first,last,result,binary_op):
//
//    Assigns to every element referred to by iterator i in the range
//    [result + 1, result + (last - first))
//    a value correspondingly equal to
//    *(first + (i - result)) - *(first + (i - result) - 1)
//    or
//    binary_op(*(first + (i - result)), *(first + (i - result) - 1)).
//    Result gets the value of *first.
///////////////////////////////////////////////////////////////////////

#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;
#include &lt;iterator&gt;

using namespace std;


typedef vector &lt; int &gt; IntegerArray;
typedef ostream_iterator &lt; int, char, char_traits&lt;char&gt; &gt; IntOstreamIt;

void main ()
{
    // an ostream iterator that outputs an int to cout terminated
    // by a space
    IntOstreamIt itOstream(cout," ");

    // Initialize the array
    // Suppose that you are taking a trip and can measure
    // the miles traveled from your city of origin
    // to the city you are traveling through
    IntegerArray rgIA;
    rgIA.push_back(5661); // San Francisco to Berlin
    rgIA.push_back(7456); // to Cairo
    rgIA.push_back(10995); // to Calcutta
    rgIA.push_back(17019); // to Cape Town
    rgIA.push_back(24394); // to Hong Kong
    rgIA.push_back(30376); // to London
    rgIA.push_back(35758); // to Los Angeles

    // Print the array
    copy(rgIA.begin(),rgIA.end(),itOstream);
    cout &lt;&lt; endl;

    // Suppose that you now want the distance between each
    // of the cities that you traveled to. You can easily
    // find it with adjacent_difference()
    IntegerArray rgDifferences(7);
    IntegerArray::iterator itDifferences = rgDifferences.begin();
    adjacent_difference(rgIA.begin(),rgIA.end(),itDifferences);

    // Print the differences
    // Remember that the first item in the differences array is
    // not a difference, but is unused space
    cout &lt;&lt; "The adjacent differences are: ";
    copy(rgDifferences.begin()+1,rgDifferences.end(),itOstream);
    cout &lt;&lt; endl;

    // Suppose that you now want to know which adjacent differences
    // are greater. If you have [a,b,c], you would like [1,0] if a&gt;b
    // and b&lt;=c.
    // You are using less() rather than greater() because
    // adjacent_difference() reverses the parameters. For example,
    // if a and b are adjacent, adjacent_difference() calls
    // less(b,a). See the explanation at the top of this file
    // for a more exact description.
    IntegerArray rgGT(6);
    IntegerArray::iterator itGT = rgGT.begin();
    adjacent_difference(rgDifferences.begin()+1,
                        rgDifferences.end(),
                        itGT,
                        less&lt;int&gt;());

    // Print the greater thans
    // Remember that the first item in the differences array is
    // not a difference, but is unused space
    cout &lt;&lt; "Which adjacent distances are greater:" &lt;&lt; endl
         &lt;&lt; "(If you have [a,b,c], then you have [1,0] if a&gt;b and b&lt;=c)"
         &lt;&lt; endl;
    copy(rgGT.begin()+1,rgGT.end(),itOstream);
    cout &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>5661 7456 10995 17019 24394 30376 35758
The adjacent differences are: 1795 3539 6024 7375 5982 5382
Which adjacent distances are greater:
(If you have [a,b,c], then you have [1,0] if a&gt;b and b&lt;=c)
0 0 0 1 1
</code></pre>

</body>
</html>

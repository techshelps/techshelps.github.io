<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declarations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_declarations"></a>Declarations</h1>
<p>
Declarations introduce new names into a program. Topics covered in this chapter include the following uses for declarations:
<ul type=disc>
<li>
Specify storage class, type, and linkage for an object.<br><br></li>
<li>
Specify storage class, type, and linkage for a function.<br><br></li>
<li>
Define a function.<br><br></li>
<li>
Provide an initial value for an object.<br><br></li>
<li>
Associate a name with a constant (enumerated type declaration).<br><br></li>
<li>
Declare a new type (<b>class</b>, <b>struct</b>, or <b>union</b> declaration).<br><br></li>
<li>
Specify a synonym for a type (<b>typedef</b> declaration).<br><br></li>
<li>
Specify a family of classes or functions (<b>template</b> declaration).<br><br></li>
<li>
Specify a <b>namespace</b>.</li>
</ul>
<p>
In addition to introducing a new name, a declaration specifies how an identifier is to be interpreted by the compiler. Declarations do not automatically reserve storage associated with the identifier — reserving storage is done by definitions.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Most declarations are also definitions.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>declaration</i>:</p>
<p class=indent>
<i>decl-specifiers</i><sub>opt </sub> <i>declarator-list</i><sub>opt</sub>  <b>;</b><br>
<i>function-definition</i><br>
<i>linkage-specification</i><br>
<i>template-specification</i></p>
<p>
The declarators in <i>declarator-list</i> contain the names being declared. Although the <i>declarator-list</i> is shown as optional, it can be omitted only in declarations or definitions of a function.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The declaration of a function is often called a “prototype.” This declaration provides type information about arguments and the function’s return type that allows the compiler to perform correct conversions and to ensure type safety.</p>
<p>
The <i>decl-specifiers</i> part of a declaration is also shown as optional; however, it can be omitted only in declarations of class types or enumerations.</p>
<p>
Declarations occur in a scope. This controls the visibility of the name declared and the duration of the object defined (if any). For more information about how scope rules interact with declarations, see <a href="_pluslang_scope.htm">Scope</a> in Chapter 2.</p>
<p>
An object declaration is also a definition unless it contains the <b>extern</b> storage-class specifier described in <a href="_pluslang_storage.2d.class_specifiers.htm">Storage-Class Specifiers</a>. A function declaration is also a definition unless it is a prototype — a function header with no defining function body. An object’s definition causes allocation of storage and appropriate initializations for that object.</p>
</font></BODY>
</HTML>

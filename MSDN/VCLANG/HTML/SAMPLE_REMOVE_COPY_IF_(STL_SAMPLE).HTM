<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>remove_copy_if (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_remove_copy_if">remove_copy_if (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>remove_copy_if</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class ForwardIterator, class OutputIterator, class Predicate&gt;
     inline OutputIterator remove_copy_if(ForwardIterator first, ForwardIterator last,
    OutputIterator result, Predicate pred)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The remove_copy_if algorithm copies all elements from the range (first, last) to the range starting at result, skipping any element that causes the predicate to return true. It returns an iterator positioned immediately after the last new element.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// remove_copy_if.cpp : Illustrates how to use the remove_copy_if function.
//
// Functions:
//
//   remove_copy_if - copy the elements of a sequence to another sequence
//                    eliminating any elements that satisfy a predicate.
//   bind2nd - Returns true for elements for which the condition is true
//   begin - Returns an iterator that points to the first element in a
//           sequence
//   end - Returns an iterator that points one past the end of a sequence
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 characters,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;

using namespace std;


void main()
{
    const int MAX_ELEMENTS = 8 ;

    // Define a template class vector of integers
    typedef vector&lt;int &gt; IntVector ;

    //Define an iterator for template class vector of integer
    typedef IntVector::iterator IntVectorIt ;

    //vector containing numbers
    IntVector Numbers(MAX_ELEMENTS), Result(MAX_ELEMENTS) ;

    IntVectorIt start, end, it, last, resultIt ;

    //Initialize vector Numbers
    Numbers[0] = 10 ;
    Numbers[1] = 20 ;
    Numbers[2] = 10 ;
    Numbers[3] = 15 ;
    Numbers[4] = 12 ;
    Numbers[5] = 25 ;
    Numbers[6] = 30 ;
    Numbers[7] = 10 ;

    start = Numbers.begin() ;   // location of first
                                // element of Numbers

    end = Numbers.end() ;       // one past the location
                                // last element of Numbers

    resultIt = Result.begin() ; // location of first
                                // element of Result

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // copy all elements from Numbers to Result
    // skipping any item that &gt;= 25
    last = remove_copy_if(start, end, resultIt,
                          bind2nd(greater_equal&lt;int&gt;(), 25)) ;

    //print number of elements copied to Result
    cout &lt;&lt; "Total number of elements copied to Result = "
        &lt;&lt; last - resultIt &lt;&lt; endl ;

    start = Result.begin() ;   // location of first
                                // element of Result

    end = Result.end() ;       // one past the location
                               // last element of Result

    // print content of Result
    cout &lt;&lt; "Result { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Numbers { 10 20 10 15 12 25 30 10  }

Total number of elements copied to Result = 6
Result { 10 20 10 15 12 10 0 0  }
</code></pre>

</body>
</html>

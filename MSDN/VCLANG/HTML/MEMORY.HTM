</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>&lt;memory&gt;</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

<h1><a name="&lt;memory&gt;">&lt;memory&gt;</a></h1>
<META NAME="MS-HKWD" CONTENT="memory header file">
<pre><code>namespace std {
//  <b>TEMPLATE CLASSES</b>
template&lt;class T&gt;
    class <a href="MEMORY_allocator.htm#allocator"><b>allocator</b></a>;
class <a href="MEMORY_allocatorLvoidG.htm#allocator&lt;void&gt;"><b>allocator&lt;void&gt;</b></a>;
template&lt;class FwdIt, class T&gt;
    class <a href="MEMORY_raw_storage_iterator.htm#raw_storage_iterator"><b>raw_storage_iterator</b></a>;
template&lt;class T&gt;
    class <a href="MEMORY_auto_ptr.htm#auto_ptr"><b>auto_ptr</b></a>;
//  <b>TEMPLATE OPERATORS</b>
template&lt;class T&gt;
    bool <a href="MEMORY_operatorEE.htm#operator=="><b>operator==</b></a>(allocator&lt;T&gt;&amp; lhs,
        allocator&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    bool <a href="MEMORY_operatorNE.htm#operator!="><b>operator!=</b></a>(allocator&lt;T&gt;&amp; lhs,
        allocator&lt;T&gt;&amp; rhs);
template&lt;class T&gt;
    void <a href="MEMORY_operator_delete.htm#operator delete"><b>operator delete</b></a>(void *p, size_t n, allocator&amp; al);
template&lt;class T&gt;
    void *<a href="MEMORY_operator_new.htm#operator new"><b>operator new</b></a>(size_t n, allocator&amp; al);
//  <b>TEMPLATE FUNCTIONS</b>
template&lt;class T&gt;
    pair&lt;T *, ptrdiff_t&gt; <a href="MEMORY_get_temporary_buffer.htm#get_temporary_buffer"><b>get_temporary_buffer</b></a>(ptrdiff_t n, T *);
template&lt;class T&gt;
    void <a href="MEMORY_return_temporary_buffer.htm#return_temporary_buffer"><b>return_temporary_buffer</b></a>(T *p);
template&lt;class InIt, class FwdIt&gt;
    FwdIt <a href="MEMORY_uninitialized_copy.htm#uninitialized_copy"><b>uninitialized_copy</b></a>(InIt first, InIt last, FwdIt result);
template&lt;class FwdIt, class T&gt;
    void <a href="MEMORY_uninitialized_fill.htm#uninitialized_fill"><b>uninitialized_fill</b></a>(FwdIt first, FwdIt last, const T&amp; x);
template&lt;class FwdIt, class Size, class T&gt;
    void <a href="MEMORY_uninitialized_fill_n.htm#uninitialized_fill_n"><b>uninitialized_fill_n</b></a>(FwdIt first, Size n, const T&amp; x);
    };</code></pre>
<p>Include the <a href="INDEX_Table_of_Contents.htm#STL">STL</a> standard header <code><b>&lt;memory&gt;</b></code> to define a class, an operator, and several templates that help allocate and 
free objects.</p>
</body>
</html>

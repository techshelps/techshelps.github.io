<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Output Stream Manipulators with More Than One Argument</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_iostream_output_stream_manipulators_with_more_than_one_argument"></a><sup></sup>Output Stream Manipulators with More Than One Argument</h1>
<p>
The following example shows how to write a manipulator, <code>fill</code>, to insert a specific number of a particular character. The manipulator, which takes two arguments, is similar to <code>setpic</code> in the previous example. The difference is that the character pointer type declaration is replaced by a structure declaration.</p>
<pre><code>#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;

struct fillpair {
       char ch;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp; cch;
};

IOMANIPdeclare( fillpair );

ostream&amp; fp( ostream&amp; os, fillpair pair )
{
 &nbsp;&nbsp; for ( int c = 0; c &lt; pair.cch; c++ ) {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; os &lt;&lt; pair.ch;
 &nbsp;&nbsp; }
 &nbsp;&nbsp; return os;
}

OMANIP(fillpair) fill( char ch, int cch )
{
 &nbsp;&nbsp; fillpair pair;

 &nbsp;&nbsp; pair.cch = cch;
 &nbsp;&nbsp; pair.ch&nbsp; = ch;
 &nbsp;&nbsp; return OMANIP (fillpair)( fp, pair );
}

void main()
{
 &nbsp;&nbsp; cout &lt;&lt; "10 dots coming" &lt;&lt; fill( '.', 10 ) &lt;&lt; "done" &lt;&lt; endl;
}
</code></pre>
<p>
This example can be rewritten so that the manipulator definition is in a separate program file. In this case, the header file must contain these declarations:</p>
<pre><code>struct fillpair {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char ch;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp; cch;
};
IOMANIPdeclare( fillpair );
ostream&amp; fp( ostream&amp; o, fillpair pair );
OMANIP(fillpair) fill( char ch, int cch );
</code></pre>
</font></BODY>
</HTML>

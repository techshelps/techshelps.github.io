<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>new operator (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_new_operator">new operator (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>new operator</code>.</p>
<p><b>Required Header: </b><br>
&lt;new&gt;</p>
<b>Prototype:</b><br>
<pre><code>
   void *operator new(size_t n)
   void *operator new(size_t n, const nothrow&amp;)
   void *operator new[](size_t n);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The first operator new will attempt to allocate memory and if it fails, will throw an exception.  The second operator new accepts a second parameter of type nothrow. This parameter indicates that if the allocation fails, it should return NULL and not throw an exception.  The third operator new will allocate memory for an array of that type and if it fails, will throw an exception.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// &lt;filename&gt; :  newop.cpp
//
// Functions:
//
//    void *operator new(size_t n)
//
//    void *operator new(size_t n, const nothrow&amp;)
//
//    void *operator new[](size_t n);
//////////////////////////////////////////////////////////////////////

/* Compile options needed: /GX
*/

#include &lt;new&gt;
#include &lt;iostream&gt;

using namespace std;


class BigClass {
public:
    BigClass() {};
    ~BigClass(){}
        double BigArray[99999999];
};

void main()
{
    try {
    BigClass * p = new BigClass;
    }
    catch( bad_alloc a) {
        const char * temp = a.what();
        cout &lt;&lt; temp &lt;&lt; endl;
        cout &lt;&lt; "Threw a bad_alloc exception" &lt;&lt; endl;
    }
    BigClass * q = new(nothrow) BigClass;
    if ( q == NULL )
        cout &lt;&lt; "Returned a NULL pointer" &lt;&lt; endl;

    try {
    BigClass * r = new BigClass[3];
    }
    catch( bad_alloc a) {
        const char * temp = a.what();
        cout &lt;&lt; temp &lt;&lt; endl;
        cout &lt;&lt; "Threw a bad_alloc exception" &lt;&lt; endl;
    }
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>bad allocation
Threw a bad_alloc exception
Returned a NULL pointer
bad allocation
Threw a bad_alloc exception
</code></pre>

</body>
</html>

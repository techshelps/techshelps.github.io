<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type-Cast Conversions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_type.2d.cast_conversions"></a><sup></sup>Type-Cast Conversions</h1>
<p>
You can use type casts to explicitly convert types. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>cast-expression</i> :</p>
<p class=indent>
<i>unary</i> <i>expression</i><br>
<b>(</b> <i>type-name</i> <b>)</b> <i>cast-expression</i></p>
<p class=dt>
<i>type-name</i> :</p>
<p class=indent>
<i>specifier-qualifier-list</i> <i>abstract-declarator</i> <sub>opt</sub></p>
<p>
The <i>type-name</i> is a type and <i>cast-expression</i> is a value to be converted to that type. An expression with a type cast is not an l-value. The <i>cast-expression</i> is converted as though it had been assigned to a variable of type <i>type-name</i>. The conversion rules for assignments (outlined in <a href="_clang_assignment_conversions.htm">Assignment Conversions</a>) apply to type casts as well. Table 4.5 shows the types that can be cast to any given type.</p>
<p class=label>
<b><a name="_clang_table_4..5"></a>Table 4.5&nbsp;&nbsp;&nbsp;Legal Type Casts</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=45%><b>Destination Types</b></td>
<td class=label width=55%><b>Potential Sources</b></td>
</tr>
<tr valign=top>
<td width=45%>Integral types</td>
<td width=55%>Any integer type or floating-point type, or pointer to an object</td>
</tr>
<tr valign=top>
<td width=45%>Floating-point</td>
<td width=55%>Any arithmetic type</td>
</tr>
<tr valign=top>
<td width=45%>A pointer to an object, or (<b>void *</b>)</td>
<td width=55%>Any integer type, (<b>void *</b>), a pointer to an object, or a function pointer</td>
</tr>
<tr valign=top>
<td width=45%>Function pointer</td>
<td width=55%>Any integral type, a pointer to an object, or a function pointer</td>
</tr>
<tr valign=top>
<td width=45%>A structure, union, or array </td>
<td width=55%>None</td>
</tr>
<tr valign=top>
<td width=45%>Void type</td>
<td width=55%>Any type</td>
</tr>
</table><br>
<p>
Any identifier can be cast to <b>void</b> type. However, if the type specified in a type-cast expression is not <b>void</b>, then the identifier being cast to that type cannot be a <b>void</b> expression. Any expression can be cast to <b>void</b>, but an expression of type <b>void</b> cannot be cast to any other type. For example, a function with <b>void</b> return type cannot have its return cast to another type. </p>
<p>
Note that a <b>void *</b> expression has a type pointer to <b>void</b>, not type <b>void</b>. If an object is cast to <b>void</b> type, the resulting expression cannot be assigned to any item. Similarly, a type-cast object is not an acceptable l-value, so no assignment can be made to a type-cast object. </p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
A type cast can be an l-value expression as long as the size of the identifier does not change. For information on l-value expressions, see <a href="_clang_l.2d.value_and_r.2d.value_expressions.htm">L-Value and R-Value Expressions</a>. </p>
<p>
<b>END Microsoft Specific</b></p>
<p>
You can convert an expression to type <b>void</b> with a cast, but the resulting expression can be used only where a value is not required. An object pointer converted to <b>void *</b> and back to the original type will return to its original value.</p>
</font></BODY>
</HTML>

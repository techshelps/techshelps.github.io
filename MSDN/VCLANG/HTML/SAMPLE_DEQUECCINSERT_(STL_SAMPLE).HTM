<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>deque::insert (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_dequeCCinsert">deque::insert (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>deque::insert</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;deque&gt;</p>
<b>Prototype:</b><br>
<pre><code>
iterator insert(iterator iter, const T&amp; x = T());
void insert(iterator iter, size_type n, const T&amp; x);
void insert(iterator iter, const_iterator first,const_iterator last);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 Each of these functions inserts a sequence specified by the remaining operands after the element pointed to by iter in the container. The first member function inserts a single element with value x and returns an iterator that points to the newly inserted element. The second member function inserts a repetition of n elements of value x. The third member function inserts the sequence [first, last).  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// deque.cpp :
//
// Functions:
//
//    insert
//    begin
//    end
//////////////////////////////////////////////////////////////////////

/* Compile options needed:-GX
*/
#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;


typedef deque&lt;char &gt;  CHARDEQUE;
void print_contents (CHARDEQUE  deque);

void main()
{
    //create a with 3 A's
    CHARDEQUE  a(3,'A');

    //create b with 2 B's.
    CHARDEQUE  b(2,'B');

    //print out the contents
    print_contents (a);
    print_contents (b);

    //insert 'X' to the beginning of a
    a.insert(a.begin(),'X');
    print_contents (a);

    //insert 'Y' to the end of a
    a.insert(a.end(),'Y');
    print_contents (a);

    //inset 3 'Z's to one item before the end of a
    a.insert(a.end()-1,3,'Z');
    print_contents (a);

    //insert to the end of a from b
    a.insert(a.end(),b.begin(),b.end());
    print_contents (a);

}

//function to print the contents of deque
void print_contents (CHARDEQUE  deque)
{
    CHARDEQUE::iterator pdeque;

    cout &lt;&lt;"The output is: ";

    for(pdeque = deque.begin();
        pdeque != deque.end();
        pdeque++)
    {
        cout &lt;&lt; *pdeque &lt;&lt;" " ;
    }
        cout&lt;&lt;endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>The output is: A A A
The output is: B B
The output is: X A A A
The output is: X A A A Y
The output is: X A A A Z Z Z Y
The output is: X A A A Z Z Z Y B B
</code></pre>

</body>
</html>

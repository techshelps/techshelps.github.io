<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>L-Value and R-Value Expressions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_l.2d.value_and_r.2d.value_expressions"></a><sup></sup>L-Value and R-Value Expressions</h1>
<p>
Expressions that refer to memory locations are called “l-value” expressions. An l-value represents a storage region’s “locator” value, or a “left” value, implying that it can appear on the left of the equal sign (<b>=</b>). L-values are often identifiers. </p>
<p>
Expressions referring to modifiable locations are called “modifiable l-values.” A modifiable l-value cannot have an array type, an incomplete type, or a type with the <b>const</b> attribute. For structures and unions to be modifiable l-values, they must not have any members with the <b>const</b> attribute. The name of the identifier denotes a storage location, while the value of the variable is the value stored at that location.</p>
<p>
An identifier is a modifiable l-value if it refers to a memory location and if its type is arithmetic, structure, union, or pointer. For example, if <code>ptr</code> is a pointer to a storage region, then <code>*ptr</code> is a modifiable l-value that designates the storage region to which <code>ptr</code> points.</p>
<p>
Any of the following C expressions can be l-value expressions:
<ul type=disc>
<li>
An identifier of integral, floating, pointer, structure, or union type<br><br></li>
<li>
A subscript (<b>[ ]</b>) expression that does not evaluate to an array <br><br></li>
<li>
A member-selection expression (<b>–&gt;</b> or <b>.</b>)<br><br></li>
<li>
A unary-indirection (<b>*</b>) expression that does not refer to an array<br><br></li>
<li>
An l-value expression in parentheses<br><br></li>
<li>
A <b>const</b> object (a nonmodifiable l-value)</li>
</ul>
<p>
The term “r-value” is sometimes used to describe the value of an expression and to distinguish it from an l-value. All l-values are r-values but not all r-values are l-values.</p>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
Microsoft C includes an extension to the ANSI C standard that allows casts of l-values to be used as l-values, as long as the size of the object is not lengthened through the cast. (See <a href="_clang_type.2d.cast_conversions.htm">Type-Cast Conversions</a> for more information.) The following example illustrates this feature:</p>
<pre><code>char *p ;
short&nbsp; i;
long l;

(long *) p = &amp;l ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Legal cast&nbsp;&nbsp; */
(long) i = l ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Illegal cast */
</code></pre>
<p>
The default for Microsoft C is that the Microsoft extensions are enabled. Use the /Za compiler option to disable these extensions. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

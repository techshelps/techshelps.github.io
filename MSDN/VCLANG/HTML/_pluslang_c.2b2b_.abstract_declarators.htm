<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Abstract Declarators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.abstract_declarators"></a><sup></sup>C++ Abstract Declarators</h1>
<p>
An abstract declarator is a declarator in which the identifier is omitted. (For related information, see <a href="_pluslang_type_names.htm">Type Names</a>.)</p>
<p>
The following abstract declarators are discussed in this section:
<ul type=disc>
<li>
<a href="_pluslang_pointers.htm">Pointers</a><br><br></li>
<li>
<a href="_pluslang_references.htm">References</a><br><br></li>
<li>
<a href="_pluslang_pointers_to_members.htm">Pointers to members</a><br><br></li>
<li>
<a href="_pluslang_array.htm">Arrays</a><br><br></li>
<li>
<a href="_pluslang_function_declarations.htm">Functions</a><br><br></li>
<li>
<a href="_pluslang_default_arguments.htm">Default arguments</a></li>
</ul>
<p>
An abstract declarator is a declarator that does not declare a name — the identifier is left out. For example,</p>
<pre><code>char *
</code></pre>
<p>
declares the type “pointer to type <b>char</b>.” This abstract declarator can be used in a function prototype as follows:</p>
<pre><code>char *strcmp( char *, char * );
</code></pre>
<p>
In this prototype (declaration), the function’s arguments are specified as abstract declarators. The following is a more complicated abstract declarator that declares the type “pointer to a function that takes two arguments, both of type <b>char *</b>,” and returns type <b>char *</b>:</p>
<pre><code>char * (*)( char *, char * )
</code></pre>
<p>
Since abstract declarators completely declare a type, it is legal to form expressions of the form:</p>
<pre><code>// Get the size of array of 10 pointers to type char.
size_t nSize = sizeof( char *[10] );

// Allocate a pointer to a function that has no
//&nbsp; return value and takes no arguments.
typedef void (PVFN *)();
PVFN *pvfn = new PVFN;

// Allocate an array of pointers to functions that
//&nbsp; return type WinStatus, and take one argument of
//&nbsp; type WinHandle.
typedef WinStatus (PWSWHFN *)( WinHandle );
PWSWHFN pwswhfnArray[] = new PWSWHFN[10];
</code></pre>
</font></BODY>
</HTML>

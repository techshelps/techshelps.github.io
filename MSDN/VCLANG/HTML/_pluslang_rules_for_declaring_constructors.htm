<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rules for Declaring Constructors</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_rules_for_declaring_constructors"></a><sup></sup>Rules for Declaring Constructors</h1>
<p>
A constructor has the same name as its class. Any number of constructors can be declared, subject to the rules of overloaded functions. (For more information, see Chapter 12, <a href="_pluslang_overloading.htm">Overloading</a>.)</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>class-name</i>  <b>(</b>  <i>argument-declaration-list</i><sub>opt</sub>  <b>)</b> <i>cv-mod-list</i><sub>opt</sub></p>
<p>
C++ defines two special kinds of constructors, default and copy constructors, described in Table 11.2.</p>
<p class=label>
<b><a name="_pluslang_table_11..2"></a>Table 11.2&nbsp;&nbsp;&nbsp;Default and Copy Constructors</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Kind of Construction</b></td>
<td class=label width=41%><b>Arguments</b></td>
<td class=label width=30%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=29%>Default constructor</td>
<td width=41%>Can be called with no arguments</td>
<td width=30%>Construct a default object of the class type</td>
</tr>
<tr valign=top>
<td width=29%>Copy constructor</td>
<td width=41%>Can accept a single argument of reference to same class type</td>
<td width=30%>Copy objects of the class type</td>
</tr>
</table><br>
<p>
Default constructors can be called with no arguments. However, you can declare a default constructor with an argument list, provided all arguments have defaults. Similarly, copy constructors must accept a single argument of reference to the same class type. More arguments can be supplied, provided all subsequent arguments have defaults.</p>
<p>
If you do not supply any constructors, the compiler attempts to generate a default constructor. If you do not supply a copy constructor, the compiler attempts to generate one. These compiler-generated constructors are considered public member functions. An error is generated if you specify a copy constructor with a first argument that is an object and not a reference.</p>
<p>
A compiler-generated default constructor sets up the object (initializes vftables and vbtables, as described previously), and it calls the default constructors for base classes and members, but it takes no other action. Base class and member constructors are called only if they exist, are accessible, and are unambiguous.</p>
<p>
A compiler-generated copy constructor sets up a new object and performs a memberwise copy of the contents of the object to be copied. If base class or member constructors exist, they are called; otherwise, bitwise copying is performed.</p>
<p>
If all base and member classes of a class <i>type</i> have copy constructors that accept a <b>const</b> argument, the compiler-generated copy constructor accepts a single argument of type <b>const</b> <i>type</i><b>&amp;</b>. Otherwise, the compiler-generated copy constructor accepts a single argument of type <i>type</i><b>&amp;</b>.</p>
<p>
You can use a constructor to initialize a <b>const</b> or <b>volatile</b> object, but the constructor itself cannot be declared as <b>const</b> or <b>volatile</b>. The only legal storage class for a constructor is <b>inline</b>; use of any other storage-class modifier, including the <b>__declspec</b> keyword, with a constructor causes a compiler error. Constructors and destructors cannot specify a calling convention other than <b>__stdcall</b>.</p>
<p>
Constructors of base classes are not inherited by derived classes. When an object of derived class type is created, it is constructed starting with the base class components; then it moves to the derived class components. The compiler uses each base class’s constructor as that part of the complete object is initialized (except in cases of virtual derivation, as described in <a href="_pluslang_initializing_base_classes.htm">Initializing Base Classes</a>).</p>
</font></BODY>
</HTML>

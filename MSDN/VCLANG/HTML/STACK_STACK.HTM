<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>stack</title></head>
<body bgcolor=white>

<h2><a name="stack">stack</a></h2>
<META NAME="MS-HKWD" CONTENT="stack">
<pre><code>template&lt;class T,
    class Cont = deque&lt;T&gt; &gt;
    class stack {
public:
    typedef Cont::allocator_type <a href="STACK_stackCCallocator_type.htm#stack::allocator_type"><b>allocator_type</b></a>;
    typedef Cont::value_type <a href="STACK_stackCCvalue_type.htm#stack::value_type"><b>value_type</b></a>;
    typedef Cont::size_type <a href="STACK_stackCCsize_type.htm#stack::size_type"><b>size_type</b></a>;
    explicit <a href="STACK_stackCCstack.htm#stack::stack"><b>stack</b></a>(const allocator_type&amp; al = allocator_type()) const;
    bool <a href="STACK_stackCCempty.htm#stack::empty"><b>empty</b></a>() const;
    size_type <a href="STACK_stackCCsize.htm#stack::size"><b>size</b></a>() const;
    allocator_type <a href="STACK_stackCCget_allocator.htm#stack::get_allocator"><b>get_allocator</b></a>() const;
    value_type&amp; <a href="STACK_stackCCtop.htm#stack::top"><b>top</b></a>();
    const value_type&amp; <a href="STACK_stackCCtop.htm#stack::top"><b>top</b></a>() const;
    void <a href="STACK_stackCCpush.htm#stack::push"><b>push</b></a>(const value_type&amp; x);
    void <a href="STACK_stackCCpop.htm#stack::pop"><b>pop</b></a>();
protected:
    Cont <a href="STACK_stack.htm#stack::c"><b>c</b></a>;
    };</code></pre>
<p>The template class describes an object that controls a varying-length sequence of elements. The object allocates and 
frees storage for the sequence it controls through a protected object named <a name="stack::c"><code><b>c</b></code></a>, of <b>class </b><code><b>Cont</b></code>. The type <code>T</code> of elements in 
the controlled sequence must match <a href="STACK_stackCCvalue_type.htm#stack::value_type"><code>value_type</code></a>.</p>
<p>An object of class <code>Cont</code> must supply several public members defined the same as for <a href="DEQUE_deque.htm#deque"><code>deque</code></a>, <a href="LIST_list.htm#list"><code>list</code></a>, and <a href="VECTOR_vector.htm#vector"><code>vector</code></a> (all of 
which are suitable candidates for class <code>Cont</code>). The required members are:</p>
<pre><code>    typedef T <b>value_type</b>;
    typedef T0 <b>size_type</b>;
    <b>Cont</b>(const allocator_type&amp; al);
    bool <b>empty</b>() const;
    size_type <b>size</b>() const;
    allocator_type <b>get_allocator</b>() const;
    value_type&amp; <b>back</b>();
    const value_type&amp; <b>back</b>() const;
    void <b>push_back</b>(const value_type&amp; x);
    void <b>pop_back</b>();</code></pre>
<p>Here, <code>T0</code> is an unspecified type that meets the stated requirements.</p>
</body>
</html>

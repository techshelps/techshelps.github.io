<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Protocol Implementation</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_class_protocol_implementation"></a><sup></sup>Class Protocol Implementation</h1>
<p>
Classes can be implemented to enforce a protocol. These classes are called “abstract classes” because no object of the class type can be created. They exist solely for derivation.</p>
<p>
Classes are abstract classes if they contain pure virtual functions or if they inherit pure virtual functions and do not provide an implementation for them. Pure virtual functions are virtual functions declared with the <i>pure-specifier</i> (<code>= 0</code>), as follows:</p>
<pre><code>virtual char *Identify() = 0;
</code></pre>
<p>
The base class, <code>Document</code>, might impose the following protocol on all derived classes:
<ul type=disc>
<li>
An appropriate <code>Identify</code> function must be implemented.<br><br></li>
<li>
An appropriate <code>WhereIs</code> function must be implemented.</li>
</ul>
<p>
By specifying such a protocol when designing the <code>Document</code> class, the class designer can be assured that no nonabstract class can be implemented without<br>
<code>Identify</code> and <code>WhereIs</code> functions. The <code>Document</code> class, therefore, contains these declarations:</p>
<pre><code>class Document
{
public:
 &nbsp;&nbsp; ...
 &nbsp;&nbsp; //&nbsp; Requirements for derived classes: They must implement
 &nbsp;&nbsp; //&nbsp;&nbsp; these functions.
 &nbsp;&nbsp; virtual char *Identify() = 0;
 &nbsp;&nbsp; virtual char *WhereIs() = 0;
 &nbsp;&nbsp; ...
};
</code></pre>
</font></BODY>
</HTML>

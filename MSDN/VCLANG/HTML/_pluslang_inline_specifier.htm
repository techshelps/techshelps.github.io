<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>inline Specifier</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_inline_specifier"></a><sup></sup>inline Specifier</h1>
<p>
The <b>inline</b> specifier instructs the compiler to replace function calls with the code of the function body. This substitution is “inline expansion” (sometimes called “inlining”). Inline expansion alleviates the function-call overhead at the potential cost of larger code size.</p>
<p>
The <b>inline</b> keyword tells the compiler that inline expansion is preferred. However, the compiler can create a separate instance of the function (instantiate) and create standard calling linkages instead of inserting the code inline. Two cases where this can happen are:
<ul type=disc>
<li>
Recursive functions.<br><br></li>
<li>
Functions that are referred to through a pointer elsewhere in the translation unit.</li>
</ul>
<p>
Note that for a function to be considered as a candidate for inlining, it must use the new-style function definition. Functions that are declared as <b>inline</b> and that are not class member functions have internal linkage unless otherwise specified.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
The <b>__inline</b> keyword is equivalent to <b>inline</b>.</p>
<p>
The <b>__forceinline</b> keyword instructs the compiler to inline the function without performing any cost/benefit analysis. The programmer must exercise good judgement in using this keyword. Indiscriminate use of <b>__forceinline</b> can result in larger, and sometimes even slower, code. </p>
<p>
Even with <b>__forceinline</b>, the compiler cannot inline code in all circumstances. The compiler cannot inline a function if: 
<ul type=disc>
<li>
The function or its caller is compiled with /Ob0 (the default option for debug builds). <br><br></li>
<li>
The function and the caller use different types of exception handling (C++ exception handling in one, structured exception handling in the other). <br><br></li>
<li>
The function has a variable argument list. <br><br></li>
<li>
The function uses inline assembly, unless compiled with /Og, /Ox, /O1, or /O2.&nbsp; <br><br></li>
<li>
The function returns an unwindable object by value, when compiled with /GX, /EHs, or /EHa. <br><br></li>
<li>
The function receives a copy-constructed object passed by value, when compiled with /-GX, /EHs, or /EHa. <br><br></li>
<li>
The function is recursive and not accompanied by <b>#pragma(inline_recursion, on)</b>. With the <b>inline_recursion</b> pragma, recursive functions can be inlined to a depth of eight calls, or as determined by the <b>inline_depth</b> pragma (see below)<b>.</b> <br><br></li>
<li>
The function is virtual.<br><br></li>
<li>
The program takes the address of the function.</li>
</ul>
<p>
If the compiler cannot inline a function declared with <b>__forceinline</b>, it generates a level 1 warning (4714).</p>
<p>
<b>END Microsoft Specific</b></p>
<p>
As with normal functions, there is no defined order of evaluation of the arguments to an inline function. In fact, it could be different from the order in which the arguments are evaluated when passed using normal function call protocol.</p>
<p>
<b>Microsoft Specific </b></p>
<p>
Recursive functions can be substituted inline to a depth specified by the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_inline_depth">
</object><a href=JavaScript:alink_1.Click()>inline_depth</a> pragma. After that depth, recursive function calls are treated as calls to an instance of the function. The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_inline_recursion">
</object><a href=JavaScript:alink_2.Click()>inline_recursion</a> pragma controls the inline expansion of a function currently under expansion. See the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_core_.2f.Ob">
</object><a href=JavaScript:alink_3.Click()>Inline-Function Expansion</a> (/Ob) compiler option for related information. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

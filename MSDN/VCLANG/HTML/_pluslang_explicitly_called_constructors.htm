<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Explicitly Called Constructors</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_explicitly_called_constructors"></a><sup></sup>Explicitly Called Constructors</h1>
<p>
Constructors can be explicitly called in a program to create objects of a given type. For example, to create two <code>Point</code> objects that describe the ends of a line, the following code can be written:</p>
<pre><code>DrawLine( Point( 13, 22 ), Point( 87, 91 ) );
</code></pre>
<p>
Two objects of type <code>Point</code> are created, passed to the function <code>DrawLine</code>, and destroyed at the end of the expression (the function call).</p>
<p>
Another context in which a constructor is explicitly called is in an initialization:</p>
<pre><code>Point pt = Point( 7, 11 );
</code></pre>
<p>
An object of type <code>Point</code> is created and initialized using the constructor that accepts two arguments of type <b>int</b>. </p>
<p>
Objects that are created by calling constructors explicitly, as in the preceding two examples, are unnamed and have a lifetime of the expression in which they are created. This is discussed in greater detail in <a href="_pluslang_temporary_objects.htm">Temporary Objects</a>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing References</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_initializing_references"></a><sup></sup>Initializing References</h1>
<p>
Variables of reference type must be initialized with an object of the type from which the reference type is derived, or with an object of a type that can be converted to the type from which the reference type is derived. For example:</p>
<pre><code>int&nbsp; iVar;
long lVar;

long&amp; LongRef1 = lVar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No conversion required.
long&amp; LongRef2 = iVar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error.
const long&amp; LongRef3 = iVar // OK

LongRef1 = 23L;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Change lVar through a reference.
LongRef2 = 11L;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Change iVar through a reference.
LongRef3 = 11L;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error.
</code></pre>
<p>
The only way to initialize a reference with a temporary object is to initialize a constant temporary object. Once initialized, a reference-type variable always points to the same object; it cannot be modified to point to another object.</p>
<p>
Although the syntax can be the same, initialization of reference-type variables and assignment to reference-type variables are semantically different. In the preceding example, the assignments that change <code>iVar</code> and <code>lVar</code> look similar to the initializations but have different effects. The initialization specifies the object to which the reference-type variable points; the assignment assigns to the referred-to object through the reference.</p>
<p>
Because both passing an argument of reference type to a function and returning a value of reference type from a function are initializations, the formal arguments to a function are initialized correctly, as are the references returned.</p>
<p>
Reference-type variables can be declared without initializers only in the following:
<ul type=disc>
<li>
Function declarations (prototypes). For example:<pre><code>int func( int&amp; );
</code></pre>
</li>
<li>
Function-return type declarations. For example:<pre><code>int&amp; func( int&amp; );
</code></pre>
</li>
<li>
Declaration of a reference-type class member. For example:<pre><code>class c
{
public:
 &nbsp;&nbsp; int&amp; i;
};
</code></pre>
</li>
<li>
Declaration of a variable explicitly specified as <b>extern</b>. For example:<pre><code>extern int&amp; iVal;
</code></pre>
</li>
</ul>
<p>
When initializing a reference-type variable, the compiler uses the decision graph shown in Figure 7.4 to select between creating a reference to an object or creating a temporary object to which the reference points.</p>
<p>
References to <b>volatile</b> types (declared as <b>volatile</b> <i>typename</i><b>&amp;</b> <i>identifier</i>) can be initialized with <b>volatile</b> objects of the same type or with objects that have not been declared as <b>volatile</b>. They cannot, however, be initialized with <b>const</b> objects of that type. Similarly, references to <b>const</b> types (declared as <b>const</b> <i>typename</i><b>&amp;</b> <i>identifier</i>) can be initialized with <b>const</b> objects of the same type (or anything that has a conversion to that type or with objects that have not been declared as <b>const</b>). They cannot, however, be initialized with <b>volatile</b> objects of that type.</p>
<p>
References that are not qualified with either the <b>const</b> or <b>volatile</b> keyword can be initialized only with objects declared as neither <b>const</b> nor <b>volatile</b>.</p>
<p class=label>
<b>Figure 7.4&nbsp;&nbsp;&nbsp;Decision Graph for Initialization of Reference Types</b></p>
<p>
<img src="l07gra4.gif" border=0></p>
</font></BODY>
</HTML>

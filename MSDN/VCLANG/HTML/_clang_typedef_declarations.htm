<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Typedef Declarations</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_typedef_declarations"></a><sup></sup>Typedef Declarations</h1>
<p>
A typedef declaration is a declaration with typedef as the storage class. The declarator becomes a new type. You can use typedef declarations to construct shorter or more meaningful names for types already defined by C or for types that you have declared. Typedef names allow you to encapsulate implementation details that may change. </p>
<p>
A typedef declaration is interpreted in the same way as a variable or function declaration, but the identifier, instead of assuming the type specified by the declaration, becomes a synonym for the type. </p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>declaration</i> :</p>
<p class=indent>
<i>declaration-specifiers init-declarator-list</i> <sub>opt</sub> <b>;</b></p>
<p class=dt>
<i>declaration-specifiers</i> :</p>
<p class=indent>
<i>storage-class-specifier declaration-specifiers</i> <sub>opt</sub><br>
<i>type-specifier declaration-specifiers</i> <sub>opt</sub><br>
<i>type-qualifier declaration-specifiers</i> <sub>opt</sub> </p>
<p class=dt>
<i>storage-class-specifier</i> :</p>
<p class=indent>
<b>typedef</b></p>
<p class=dt>
<i>type-specifier</i> :</p>
<p class=indent>
<b>void</b><br>
<b>char</b><br>
<b>short</b><br>
<b>int</b><br>
<b>long</b><br>
<b>float</b><br>
<b>double</b><br>
<b>signed</b><br>
<b>unsigned</b><br>
<i>struct-or-union-specifier</i><br>
<i>enum-specifier</i><br>
<i>typedef-name</i></p>
<p class=dt>
<i>typedef-name</i> :</p>
<p class=indent>
<i>identifier</i></p>
<p>
Note that a typedef declaration does not create types. It creates synonyms for existing types, or names for types that could be specified in other ways. When a typedef name is used as a type specifier, it can be combined with certain type specifiers, but not others. Acceptable modifiers include <b>const</b> and <b>volatile</b>. </p>
<p>
Typedef names share the name space with ordinary identifiers (see <a href="_clang_name_spaces.htm">Name Spaces</a> in Chapter 2 for more information). Therefore, a program can have a typedef name and a local-scope identifier by the same name. For example: </p>
<pre><code>typedef char FlagType;

int main()
{
}

int myproc( int )
{
 &nbsp;&nbsp; int FlagType;
}
</code></pre>
<p>
When declaring a local-scope identifier by the same name as a typedef, or when declaring a member of a structure or union in the same scope or in an inner scope, the type specifier must be specified. This example illustrates this constraint:</p>
<pre><code>typedef char FlagType;
const FlagType x;
</code></pre>
<p>
To reuse the <code>FlagType</code> name for an identifier, a structure member, or a union member, the type must be provided:</p>
<pre><code>const int FlagType;&nbsp; /* Type specifier required */
</code></pre>
<p>
It is not sufficient to say</p>
<pre><code>const FlagType;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Incomplete specification */
</code></pre>
<p>
because the <code>FlagType</code> is taken to be part of the type, not an identifier that is being redeclared. This declaration is taken to be an illegal declaration like</p>
<pre><code>int;&nbsp; /* Illegal declaration */
</code></pre>
<p>
You can declare any type with typedef, including pointer, function, and array types. You can declare a typedef name for a pointer to a structure or union type before you define the structure or union type, as long as the definition has the same visibility as the declaration. </p>
<p>
Typedef names can be used to improve code readability. All three of the following declarations of <code>signal</code> specify exactly the same type, the first without making use of any typedef names. </p>
<pre><code>typedef void fv( int ), (*pfv)( int );&nbsp; /* typedef declarations */

void ( *signal( int, void (*) (int)) ) ( int );
fv *signal( int, fv * );&nbsp;&nbsp; /* Uses typedef type */
pfv signal( int, pfv );&nbsp;&nbsp;&nbsp; /* Uses typedef type */
</code></pre>
<p class=label>
<b>Examples</b></p>
<p>
The following examples illustrate typedef declarations:</p>
<pre><code>typedef int WHOLE; /* Declares WHOLE to be a synonym for int */
</code></pre>
<p>
Note that <code>WHOLE</code> could now be used in a variable declaration such as <code>WHOLE i;</code> or <code>const WHOLE i;</code>. However, the declaration <code>long WHOLE i;</code> would be illegal.</p>
<pre><code>typedef struct club 
{
 &nbsp;&nbsp; char name[30];
 &nbsp;&nbsp; int size, year;
} GROUP;
</code></pre>
<p>
This statement declares <code>GROUP</code> as a structure type with three members. Since a structure tag, <code>club</code>, is also specified, either the typedef name (<code>GROUP</code>) or the structure tag can be used in declarations. You must use the struct keyword with the tag, and you cannot use the struct keyword with the typedef name. </p>
<pre><code>typedef GROUP *PG; /* Uses the previous typedef name 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to declare a pointer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */
</code></pre>
<p>
The type <code>PG</code> is declared as a pointer to the <code>GROUP</code> type, which in turn is defined as a structure type.</p>
<pre><code>typedef void DRAWF( int, int );
</code></pre>
<p>
This example provides the type <code>DRAWF</code> for a function returning no value and taking two int arguments. This means, for example, that the declaration</p>
<pre><code>DRAWF box; 
</code></pre>
<p>
is equivalent to the declaration </p>
<pre><code>void box( int, int );
</code></pre>
</font></BODY>
</HTML>

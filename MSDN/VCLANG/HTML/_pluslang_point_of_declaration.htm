<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Point of Declaration</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_point_of_declaration"></a><sup></sup>Point of Declaration</h1>
<p>
A name is considered to be declared immediately after its declarator but before its (optional) initializer. (For more information on declarators, see Chapter 7, <a href="_pluslang_declarators.htm">Declarators</a>.) An enumerator is considered to be declared immediately after the identifier that names it but before its (optional) initializer.</p>
<p>
Consider this example:</p>
<pre><code>double dVar = 7.0;

void main()
{
 &nbsp;&nbsp; double dVar = dVar;
}
</code></pre>
<p>
If the point of declaration were <i>after</i> the initialization, then the local <code>dVar</code> would be initialized to 7.0, the value of the global variable <code>dVar</code>. However, since that is not the case, <code>dVar</code> is initialized to an undefined value.</p>
<p>
Enumerators follow the same rule. However, enumerators are exported to the enclosing scope of the enumeration. In the following example, the enumerators <code>Spades</code>, <code>Clubs</code>, <code>Hearts</code>, and <code>Diamonds</code> are declared. Because the enumerators are exported to the enclosing scope, they are considered to have global scope. The identifiers in the example are already defined in global scope.</p>
<p>
Consider the following code:</p>
<pre><code>const int Spades = 1, Clubs = 2, Hearts = 3, Diamonds = 4;

enum Suits
{
 &nbsp;&nbsp; Spades = Spades,&nbsp;&nbsp;&nbsp;&nbsp; // error
 &nbsp;&nbsp; Clubs,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // error
 &nbsp;&nbsp; Hearts,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // error
 &nbsp;&nbsp; Diamonds&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // error
};
</code></pre>
<p>
Because the identifiers in the preceding code are already defined in global scope, an error message is generated. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Using the same name to refer to more than one program element — for example, an enumerator and an object — is considered poor programming practice and should be avoided. In the preceding example, this practice causes an error.</p>
</font></BODY>
</HTML>

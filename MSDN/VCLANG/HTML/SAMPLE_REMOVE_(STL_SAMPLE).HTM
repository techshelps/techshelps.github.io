<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>remove (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_remove">remove (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>remove</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class ForwardIterator, class Type&gt; inline
     ForwardIterator remove(ForwardIterator first, ForwardIterator last, const T&amp; value)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The remove algorithm removes all elements that match value from the range (first, last). It returns an iterator equal to last - N, where N = number of elements removed. The last N elements of the range have undefined values. The size of the container remains the same.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// remove.cpp : Illustrates how to use the remove function.
//
// Functions:
//
//   remove - remove all elements from the sequence that match value.
//   begin - Returns an iterator that points to the first element in a
//           sequence.
//   end - Returns an iterator that points one past the end of a sequence.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;

using namespace std;


void main()
{
    const int VECTOR_SIZE = 8 ;

    // Define a template class vector of integers
    typedef vector&lt;int &gt; IntVector ;

    //Define an iterator for template class vector of integer
    typedef IntVector::iterator IntVectorIt ;

    IntVector Numbers(VECTOR_SIZE) ;   //vector containing numbers

    IntVectorIt start, end, it, last;

    start = Numbers.begin() ;   // location of first
                                // element of Numbers

    end = Numbers.end() ;       // one past the location
                                // last element of Numbers

    //Initialize vector Numbers
    Numbers[0] = 10 ;
    Numbers[1] = 20 ;
    Numbers[2] = 10 ;
    Numbers[3] = 15 ;
    Numbers[4] = 12 ;
    Numbers[5] = 7 ;
    Numbers[6] = 9 ;
    Numbers[7] = 10 ;


    cout &lt;&lt; "Before calling remove" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // remove all elements from Numbers that match 10
     last = remove(start, end, 10) ;

    cout &lt;&lt; "After calling remove" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    //print number of elements removed from Numbers
    cout &lt;&lt; "Total number of elements removed from Numbers = "
        &lt;&lt; end - last &lt;&lt; endl ;

    //print only the valid elements of Number
    cout &lt;&lt; "Valid elements of Numbers { " ;
    for(it = start; it != last; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Before calling remove
Numbers { 10 20 10 15 12 7 9 10  }

After calling remove
Numbers { 20 15 12 7 9 7 9 10  }

Total number of elements removed from Numbers = 3
Valid elements of Numbers { 20 15 12 7 9  }
</code></pre>

</body>
</html>

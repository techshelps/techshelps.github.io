<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Aggregates That Contain Aggregates</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_initializing_aggregates_that_contain_aggregates"></a><sup></sup>Initializing Aggregates That Contain Aggregates</h1>
<p>
Some aggregates contain other aggregates — for example, arrays of arrays, arrays of structures, or structures that are composed of other structures. Initializers can be supplied for such constructs by initializing each one in the order it occurs with a brace-enclosed list. For example:</p>
<pre><code>// Declare an array of type RCPrompt.
RCPrompt rgRCPrompt[4] =
{ { 4,&nbsp; 7, "Options Are:"&nbsp; },
  { 6,&nbsp; 7, "1. Main Menu"&nbsp; },
  { 8,&nbsp; 7, "2. Print Menu" },
  { 10, 7, "3. File Menu"&nbsp; } };
</code></pre>
<p>
Note that <code>rgRCPrompt</code> is initialized with a brace-enclosed list of brace-enclosed lists. The enclosed braces are not syntactically required, but they lend clarity to the declaration. The following example program shows how a two-dimensional array is filled by such an initializer:</p>
<pre><code>#include &lt;iostream.h&gt;

void main()
{
 &nbsp;&nbsp; int rgI[2][4] = { 1, 2, 3, 4, 5, 6, 7, 8 };

 &nbsp;&nbsp; for( int i = 0; i &lt; 2; ++i )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for( int j = 0; j &lt; 4; ++j )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "rgI[" &lt;&lt; i &lt;&lt; "][" &lt;&lt; j &lt;&lt; "] = "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; rgI[i][j] &lt;&lt; endl;
}
</code></pre>
<p>
The output from this program is:</p>
<pre><code>rgI[0][0] = 1
rgI[0][1] = 2
rgI[0][2] = 3
rgI[0][3] = 4
rgI[1][0] = 5
rgI[1][1] = 6
rgI[1][2] = 7
rgI[1][3] = 8
</code></pre>
<p>
Short initialization lists can be used only with explicit subaggregate initializers and enclosed in braces. If <code>rgI</code> had been declared as:</p>
<pre><code>int rgI[2][4] = { { 1, 2 }, { 3, 4 } };
</code></pre>
<p>
the program output would have been:</p>
<pre><code>rgI[0][0] = 1
rgI[0][1] = 2
rgI[0][2] = 0
rgI[0][3] = 0
rgI[1][0] = 3
rgI[1][1] = 4
rgI[1][2] = 0
rgI[1][3] = 0
</code></pre>
</font></BODY>
</HTML>

</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Containers</title>
	<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
	<META NAME="MS-HAID" CONTENT="_vc_stl_container">
	<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

<h1><a name="Containers">Containers</a></h1>
<META NAME="MS-HKWD" CONTENT="Containers">
<pre><code>namespace std {
template&lt;class T, class A&gt;
    class <a href="lib_cont_Cont.htm#Cont"><b>Cont</b></a>;
//    <b>TEMPLATE FUNCTIONS</b>
template&lt;class T, class A&gt;
    bool <a href="lib_cont_operatorEE.htm#operator=="><b>operator==</b></a>(
        const Cont&lt;T, A&gt;&amp; lhs,
        const Cont&lt;T, A&gt;&amp; rhs);
template&lt;class T, class A&gt;
    bool <a href="lib_cont_operatorNE.htm#operator!="><b>operator!=</b></a>(
        const Cont&lt;T, A&gt;&amp; lhs,
        const Cont&lt;T, A&gt;&amp; rhs);
template&lt;class T, class A&gt;
    bool <a href="lib_cont_operatorL.htm#operator&lt;"><b>operator&lt;</b></a>(
        const Cont&lt;T, A&gt;&amp; lhs,
        const Cont&lt;T, A&gt;&amp; rhs);
template&lt;class T, class A&gt;
    bool <a href="lib_cont_operatorG.htm#operator&gt;"><b>operator&gt;</b></a>(
        const Cont&lt;T, A&gt;&amp; lhs,
        const Cont&lt;T, A&gt;&amp; rhs);
template&lt;class T, class A&gt;
    bool <a href="lib_cont_operatorLE.htm#operator&lt;="><b>operator&lt;=</b></a>(
        const Cont&lt;T, A&gt;&amp; lhs,
        const Cont&lt;T, A&gt;&amp; rhs);
template&lt;class T, class A&gt;
    bool <a href="lib_cont_operatorGE.htm#operator&gt;="><b>operator&gt;=</b></a>(
        const Cont&lt;T, A&gt;&amp; lhs,
        const Cont&lt;T, A&gt;&amp; rhs);
template&lt;class T, class A&gt;
    void <a href="lib_cont_swap.htm#swap"><b>swap</b></a>(
        const Cont&lt;T, A&gt;&amp; lhs,
        const Cont&lt;T, A&gt;&amp; rhs);
    };</code></pre>
<p>A <a href="lib_cont.htm#Containers"><b>container</b></a> is an <a href="INDEX_Table_of_Contents.htm#STL">STL</a> template class that manages a sequence of elements. Such elements can be of any object type 
that supplies a default constructor, a destructor, and an assignment operator. This document describes the properties 
required of all such containers, in terms of a generic template class <code>Cont</code>. An actual container template class may have 
additional template parameters. It will certainly have additional member functions.</p>
<p>The STL template container classes are:</p>
<pre><code>    <a href="DEQUE_deque.htm#deque">deque</a>
    <a href="LIST_list.htm#list">list</a>
    <a href="MAP_map.htm#map">map</a>
    <a href="MAP_multimap.htm#multimap">multimap</a>
    <a href="SET_multiset.htm#multiset">multiset</a>
    <a href="SET_set.htm#set">set</a>
    <a href="VECTOR_vector.htm#vector">vector</a></code></pre>
<p>(The Standard C++ library template class <code>basic_string</code> also meets the requirements for a template container class.)</p>
</body>
</html>

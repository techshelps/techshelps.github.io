<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Arithmetic Conversions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_arithmetic_conversions"></a><sup></sup>Arithmetic Conversions</h1>
<p>
Many binary operators (discussed in <a href="_pluslang_expressions_with_binary_operators.htm">Expressions with Binary Operators</a> in Chapter 4) cause conversions of operands and yield results the same way. The way these operators cause conversions is called “usual arithmetic conversions.” Arithmetic conversions of operands of different types are performed as shown in Table 3.1.</p>
<p class=label>
<b><a name="_pluslang_table_3..1"></a>Table 3.1&nbsp;&nbsp;&nbsp;Conditions for Type Conversion</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Conditions Met</b></td>
<td class=label width=65%><b>Conversion</b></td>
</tr>
<tr valign=top>
<td width=35%>Either operand is of type <b>long</b> <b>double</b>.</td>
<td width=65%>Other operand is converted to type <b>long</b> <b>double</b>.</td>
</tr>
<tr valign=top>
<td width=35%>Preceding condition not met and either operand is of type <b>double</b>.</td>
<td width=65%>Other operand is converted to type <b>double</b>.</td>
</tr>
<tr valign=top>
<td width=35%>Preceding conditions not met and either operand is of type <b>float</b>.</td>
<td width=65%>Other operand is converted to type <b>float</b>.</td>
</tr>
<tr valign=top>
<td width=35%>Preceding conditions not met (none of the operands are of floating types).</td>
<td width=65%>Integral promotions are performed on the operands as follows:<ul type=disc>
<li>
If either operand is of type <b>unsigned</b> <b>long</b>, the other operand is converted to type <b>unsigned long</b>.<br><br></li>
<li>
If preceding condition not met, and if either operand is of type <b>long</b> and the other of type <b>unsigned</b> <b>int</b>, both operands are converted to type <b>unsigned long</b>.<br><br></li>
<li>
If the preceding two conditions are not met, and if either operand is of type <b>long</b>, the other operand is converted to type <b>long</b>.<br><br></li>
<li>
If the preceding three conditions are not met, and if either operand is of type <b>unsigned int</b>, the other operand is converted to type <b>unsigned int</b>.<br><br></li>
<li>
If none of the preceding conditions are met, both operands are converted to type <b>int</b>.</li>
</ul>
</td>
</tr>
</table><br>
<p>
The following code illustrates the conversion rules described in Table 3.1:</p>
<pre><code>float&nbsp;&nbsp; fVal;
double&nbsp; dVal;
int&nbsp;&nbsp; iVal;
unsigned long ulVal;

dVal = iVal * ulVal; // iVal converted to unsigned long;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // result of multiplication converted to double.

dVal = ulVal + fVal; // ulVal converted to float;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // result of addition converted to double.
</code></pre>
<p>
The first statement in the preceding example shows multiplication of two integral types, <code>iVal</code> and <code>ulVal</code>. The condition met is that neither operand is of floating type and one operand is of type <b>unsigned int</b>. Therefore, the other operand, <code>iVal</code>, is converted to type <b>unsigned int</b>. The result is assigned to <code>dVal</code>. The condition met is that one operand is of type <b>double</b>; therefore, the <b>unsigned int</b> result of the multiplication is converted to type <b>double</b>.</p>
<p>
The second statement in the preceding example shows addition of a <b>float</b> and an integral type, <code>fVal</code> and <code>ulVal</code>. The <code>ulVal</code> variable is converted to type <b>float</b> (third condition in Table 3.1). The result of the addition is converted to type <b>double</b> (second condition in Table 3.1) and assigned to <code>dVal</code>.</p>
</font></BODY>
</HTML>

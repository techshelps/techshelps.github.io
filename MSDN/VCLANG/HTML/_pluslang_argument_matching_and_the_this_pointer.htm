<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Argument Matching and the this Pointer</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_argument_matching_and_the_this_pointer"></a><sup></sup>Argument Matching and the this Pointer</h1>
<p>
Class member functions are treated differently, depending on whether they are declared as <b>static</b>. Because nonstatic functions have an implicit argument that supplies the <b>this</b> pointer, nonstatic functions are considered to have one more argument than static functions; otherwise, they are declared identically.</p>
<p>
These nonstatic member functions require that the implied <b>this</b> pointer match the object type through which the function is being called, or, for overloaded operators, they require that the first argument match the object on which the operator is being applied. (For more information about overloaded operators, see <a href="_pluslang_overloaded_operators.htm">Overloaded Operators</a>.)</p>
<p>
Unlike other arguments in overloaded functions, no temporary objects are introduced and no conversions are attempted when trying to match the <b>this</b> pointer argument.</p>
<p>
When the&nbsp; <b>–</b> <b>&gt;</b> member-selection operator is used to access a member function, the <b>this</b> pointer argument has a type of <i>class-name</i> <b>* const</b>. If the members are declared as <b>const</b> or <b>volatile</b>, the types are <b>const</b> <i>class-name *</i> <b>const</b> and <b>volatile</b> <i>class-name</i> <b>* const</b>, respectively.</p>
<p>
The <b>.</b> member-selection operator works exactly the same way, except that an implicit <b>&amp;</b> (address-of) operator is prefixed to the object name. The following example shows how this works:</p>
<pre><code>// Expression encountered in code
obj.name

// How the compiler treats it
(&amp;obj)-&gt;name
</code></pre>
<p>
The left operand of the&nbsp; <b>–&gt;*</b> and <b>.*</b> (pointer to member) operators are treated the same way as the <b>.</b> and&nbsp; <b>–&gt;</b> (member-selection) operators with respect to argument matching.</p>
</font></BODY>
</HTML>

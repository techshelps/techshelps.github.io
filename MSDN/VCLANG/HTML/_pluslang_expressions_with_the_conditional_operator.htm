<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Expressions with the Conditional Operator</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_expressions_with_the_conditional_operator"></a><sup></sup>Expressions with the Conditional Operator</h1>
<p>
The conditional operator (? :) is a ternary operator (it takes three operands). The conditional operator works as follows:
<ul type=disc>
<li>
The first operand is evaluated and all side effects are completed before continuing.<br><br></li>
<li>
If the first operand evaluates to true (a nonzero value), the second operand is evaluated.<br><br></li>
<li>
If the first operand evaluates to false (0), the third operand is evaluated.</li>
</ul>
<p>
The result of the conditional operator is the result of whichever operand is evaluated — the second or the third. Only one of the last two operands is evaluated in a conditional expression.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>conditional-expression</i> :</p>
<p class=indent>
<i>logical-or-expression</i><br>
<i>logical-or-expression</i> ? <i>expression</i> : <i>conditional-expression</i></p>
<p>
Conditional expressions have no associativity. The first operand must be of integral or pointer type. The following rules apply to the second and third expressions:
<ul type=disc>
<li>
If both expressions are of the same type, the result is of that type.<br><br></li>
<li>
If both expressions are of arithmetic types, usual arithmetic conversions (covered in <a href="_pluslang_arithmetic_conversions.htm">Arithmetic Conversions</a> in Chapter 3) are performed to convert them to a common type.<br><br></li>
<li>
If both expressions are of pointer types or if one is a pointer type and the other is a constant expression that evaluates to 0, pointer conversions are performed to convert them to a common type.<br><br></li>
<li>
If both expressions are of reference types, reference conversions are performed to convert them to a common type.<br><br></li>
<li>
If both expressions are of type void, the common type is type void.<br><br></li>
<li>
If both expressions are of a given class type, the common type is that class type.</li>
</ul>
<p>
Any combinations of second and third operands not in the preceding list are illegal. The type of the result is the common type, and it is an l-value if both the second and third operands are of the same type and both are l-values.</p>
<p>
For example:</p>
<pre><code>(val &gt;= 0) ? val : -val
</code></pre>
<p>
If the condition is true, the expression evaluates to <code>val</code>. If not, the expression equals <code>–val</code>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Sequence Points</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.sequence_points"></a><sup></sup>C++ Sequence Points</h1>
<p>
An expression can modify an object’s value only once between consecutive “sequence points.”</p>
<p>
<b>Microsoft Specific </b></p>
<p>
The C++ language definition does not currently specify sequence points. Microsoft C++ uses the same sequence points as ANSI C for any expression involving C operators and not involving overloaded operators. When operators are overloaded, the semantics change from operator sequencing to function-call sequencing. Microsoft C++ uses the following sequence points:
<ul type=disc>
<li>
Left operand of the logical AND operator (&amp;&amp;). The left operand of the logical AND operator is completely evaluated and all side effects completed before continuing. There is no guarantee that the right operand of the logical AND operator will be evaluated.<br><br></li>
<li>
Left operand of the logical OR operator (||). The left operand of the logical OR operator is completely evaluated and all side effects completed before continuing. There is no guarantee that the right operand of the logical OR operator will be evaluated.<br><br></li>
<li>
Left operand of the comma operator. The left operand of the comma operator is completely evaluated and all side effects completed before continuing. Both operands of the comma operator are always evaluated.<br><br></li>
<li>
Function-call operator. The function-call expression and all arguments to a function, including default arguments, are evaluated and all side effects completed prior to entry to the function. There is no specified order of evaluation among the arguments or the function-call expression.<br><br></li>
<li>
First operand of the conditional operator. The first operand of the conditional operator is completely evaluated and all side effects completed before continuing.<br><br></li>
<li>
The end of a full initialization expression, such as the end of an initialization in a declaration statement.<br><br></li>
<li>
The expression in an expression statement. Expression statements consist of an optional expression followed by a semicolon (;). The expression is completely evaluated for its side effects.<br><br></li>
<li>
The controlling expression in a selection (if or switch) statement. The expression is completely evaluated and all side effects completed before the code dependent on the selection is executed.<br><br></li>
<li>
The controlling expression of a while or do statement. The expression is completely evaluated and all side effects completed before any statements in the next iteration of the while or do loop are executed.<br><br></li>
<li>
Each of the three expressions of a for statement. Each expression is completely evaluated and all side effects completed before moving to the next expression. <br><br></li>
<li>
The expression in a return statement. The expression is completely evaluated and all side effects completed before control returns to the calling function.</li>
</ul>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

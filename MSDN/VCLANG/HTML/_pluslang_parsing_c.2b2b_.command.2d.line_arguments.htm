<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parsing C++ Command-Line Arguments</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_parsing_c.2b2b_.command.2d.line_arguments"></a><sup></sup>Parsing C++ Command-Line Arguments</h1>
<p>
<b>Microsoft Specific </b></p>
<p>
Microsoft C/C++ startup code uses the following rules when interpreting arguments given on the operating system command line:
<ul type=disc>
<li>
Arguments are delimited by white space, which is either a space or a tab.<br><br></li>
<li>
The caret character (^) is not recognized as an escape character or delimiter. The character is handled completely by the command-line parser in the operating system before being passed to the <code>argv</code> array in the program.<br><br></li>
<li>
A string surrounded by double quotation marks ("<i>string</i>") is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument.<br><br></li>
<li>
A double quotation mark preceded by a backslash ( \") is interpreted as a literal double quotation mark character (").<br><br></li>
<li>
Backslashes are interpreted literally, unless they immediately precede a double quotation mark.<br><br></li>
<li>
If an even number of backslashes is followed by a double quotation mark, one backslash is placed in the <code>argv</code> array for every pair of backslashes, and the double quotation mark is interpreted as a string delimiter.<br><br></li>
<li>
If an odd number of backslashes is followed by a double quotation mark, one backslash is placed in the <code>argv</code> array for every pair of backslashes, and the double quotation mark is “escaped” by the remaining backslash, causing a literal double quotation mark (") to be placed in <code>argv</code>.</li>
</ul>
<p>
The following program demonstrates how command-line arguments are passed:</p>
<pre><code>include &lt;iostream.h&gt;

void main( int argc,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Number of strings in array argv
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *argv[],&nbsp;&nbsp; // Array of command-line argument strings
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *envp[] )&nbsp; // Array of environment variable strings
{
 &nbsp;&nbsp; int count;

 &nbsp;&nbsp; // Display each command-line argument.
 &nbsp;&nbsp; cout &lt;&lt; "\nCommand-line arguments:\n";
 &nbsp;&nbsp; for( count = 0; count &lt; argc; count++ )
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cout &lt;&lt; "&nbsp; argv[" &lt;&lt; count &lt;&lt; "]&nbsp;&nbsp; "
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; argv[count] &lt;&lt; "\n";
}
</code></pre>
<p>
Table 2.2 shows example input and expected output, demonstrating the rules in the preceding list. </p>
<p class=label>
<b><a name="_pluslang_table_2..2"></a>Table 2.2</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Command-Line Input</b></td>
<td class=label width=17%><b>argv[1]</b></td>
<td class=label width=18%><b>argv[2]</b></td>
<td class=label width=30%><b>argv[3]</b></td>
</tr>
<tr valign=top>
<td width=35%><pre><code>"abc" d e</code></pre>
</td>
<td width=17%><pre><code>abc</code></pre>
</td>
<td width=18%><pre><code>d</code></pre>
</td>
<td width=30%><pre><code>e</code></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre><code>a\\\b d"e f"g h</code></pre>
</td>
<td width=17%><pre><code>a\\\b</code></pre>
</td>
<td width=18%><pre><code>de fg</code></pre>
</td>
<td width=30%><pre><code>h</code></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre><code>a\\\"b c d</code></pre>
</td>
<td width=17%><pre><code>a\"b</code></pre>
</td>
<td width=18%><pre><code>c</code></pre>
</td>
<td width=30%><pre><code>d</code></pre>
</td>
</tr>
<tr valign=top>
<td width=35%><pre><code>a\\\\"b c" d e</code></pre>
</td>
<td width=17%><pre><code>a\\b c</code></pre>
</td>
<td width=18%><pre><code>d</code></pre>
</td>
<td width=30%><pre><code>e</code></pre>
</td>
</tr>
</table><br>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

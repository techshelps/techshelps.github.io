<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pointers to Classes</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_pointers_to_classes"></a><sup></sup>Pointers to Classes</h1>
<p>
There are two cases in which a pointer to a class can be converted to a pointer to a base class.</p>
<p>
The first case is when the specified base class is accessible and the conversion is unambiguous. (See <a href="_pluslang_multiple_base_classes.htm">Multiple Base Classes</a> in Chapter 9 for more information about ambiguous base-class references.)</p>
<p>
Whether a base class is accessible depends on the kind of inheritance used in derivation. Consider the inheritance illustrated in Figure 3.1.</p>
<p class=label>
<b>Figure 3.1&nbsp;&nbsp;&nbsp;Inheritance Graph for Illustration of Base-Class Accessibility</b></p>
<p>
<img src="l03inh1.gif" border=0></p>
<p>
Table 3.2 shows the base-class accessibility for the situation illustrated in Figure 3.1.</p>
<p class=label>
<b><a name="_pluslang_table_3..2"></a>Table 3.2&nbsp;&nbsp;&nbsp;Base-Class Accessibility</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=45%><b><br>
Type of Function</b></td>
<td class=label width=27%><b><br>
Derivation</b></td>
<td class=label width=28%><b>Conversion from <br>
B* to A* Legal?</b></td>
</tr>
<tr valign=top>
<td width=45%>External (not class-scoped) function</td>
<td width=27%>Private</td>
<td width=28%>No</td>
</tr>
<tr valign=top>
<td width=45%></td>
<td width=27%>Protected</td>
<td width=28%>No</td>
</tr>
<tr valign=top>
<td width=45%></td>
<td width=27%>Public</td>
<td width=28%>Yes</td>
</tr>
<tr valign=top>
<td width=45%>B member function (in B scope)</td>
<td width=27%>Private</td>
<td width=28%>Yes</td>
</tr>
<tr valign=top>
<td width=45%></td>
<td width=27%>Protected</td>
<td width=28%>Yes</td>
</tr>
<tr valign=top>
<td width=45%></td>
<td width=27%>Public</td>
<td width=28%>Yes</td>
</tr>
<tr valign=top>
<td width=45%>C member function (in C scope)</td>
<td width=27%>Private</td>
<td width=28%>No</td>
</tr>
<tr valign=top>
<td width=45%></td>
<td width=27%>Protected</td>
<td width=28%>Yes</td>
</tr>
<tr valign=top>
<td width=45%></td>
<td width=27%>Public</td>
<td width=28%>Yes</td>
</tr>
</table><br>
<p>
The second case in which a pointer to a class can be converted to a pointer to a base class is when you use an explicit type conversion. (See <a href="_pluslang_expressions_with_explicit_type_conversions.htm">Expressions with Explicit Type Conversions</a> in Chapter 4 for more information about explicit type conversions.)</p>
<p>
The result of such a conversion is a pointer to the “subobject,” the portion of the object that is completely described by the base class.</p>
<p>
The following code defines two classes, <code>A</code> and <code>B</code>, where <code>B</code> is derived from <code>A</code>. (For more information on inheritance, see Chapter 9, <a href="_pluslang_derived_classes.htm">Derived Classes</a>.) It then defines <code>bObject</code>, an object of type <code>B</code>, and two pointers (<code>pA</code> and <code>pB</code>) that point to the object.</p>
<pre><code>class A
{
public:
 &nbsp;&nbsp; int AComponent;
 &nbsp;&nbsp; int AMemberFunc();
};

class B : public A
{
public:
 &nbsp;&nbsp; int BComponent;
 &nbsp;&nbsp; int BMemberFunc();
};
B bObject;
A *pA = &amp;bObject;
B *pB = &amp;bObject;

pA-&gt;AMemberFunc();&nbsp;&nbsp; // OK in class A
pB-&gt;AMemberFunc();&nbsp;&nbsp; // OK: inherited from class A
pA-&gt;BMemberFunc();&nbsp;&nbsp; // Error: not in class A
</code></pre>
<p>
The pointer <code>pA</code> is of type <code>A *</code>, which can be interpreted as meaning “pointer to an object of type <code>A</code>.” Members of <code>bObject</code> <code>(</code>such as <code>BComponent</code> and <code>BMemberFunc</code>) are unique to type <code>B</code> and are therefore inaccessible through <code>pA</code>. The <code>pA</code> pointer allows access only to those characteristics (member functions and data)&nbsp; of the object that are defined in class <code>A</code>.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Standard Conversions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_standard_conversions"></a>Standard Conversions</h1>
<p>
The C++ language defines conversions between its fundamental types. It also defines conversions for pointer, reference, and pointer-to-member derived types. These conversions are called “standard conversions.” (For more information about types, standard types, and derived types, see <a href="_pluslang_types.htm">Types</a> in Chapter 2.) </p>
<p>
This chapter discusses the following standard conversions:
<ul type=disc>
<li>
<a href="_pluslang_integral_promotions.htm">Integral promotions</a><br><br></li>
<li>
<a href="_pluslang_integral_conversions.htm">Integral conversions</a><br><br></li>
<li>
<a href="_pluslang_floating_conversions.htm">Floating conversions</a><br><br></li>
<li>
<a href="_pluslang_floating_and_integral_conversions.htm">Floating and integral conversions</a><br><br></li>
<li>
<a href="_pluslang_arithmetic_conversions.htm">Arithmetic conversions</a><br><br></li>
<li>
<a href="_pluslang_pointer_conversions.htm">Pointer conversions</a><br><br></li>
<li>
<a href="_pluslang_reference_conversions.htm">Reference conversions</a><br><br></li>
<li>
<a href="_pluslang_pointer.2d.to.2d.member_conversions.htm">Pointer-to-member conversions</a></li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;User-defined types can specify their own conversions. Conversion of user-defined types is covered in <a href="_pluslang_constructors.htm">Constructors</a> and <a href="_pluslang_conversions.htm">Conversions</a> in Chapter 11. </p>
<p>
The following code causes conversions (in this example, integral promotions):</p>
<pre><code>long&nbsp; lnum1, lnum2;
int&nbsp;&nbsp; inum;

// inum promoted to type long prior to assignment.
lnum1 = inum;

// inum promoted to type long prior to multiplication.
lnum2 = inum * lnum2;
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The result of a conversion is an l-value only if it produces a reference type. For example, a user-defined conversion declared as</p>
<pre><code>operator int&amp;()
</code></pre>
<p class=indent>
returns a reference and is an l-value. However, a conversion declared as</p>
<pre><code>operator int()
</code></pre>
<p class=indent>
returns an object and is not an l-value.</p>
</font></BODY>
</HTML>

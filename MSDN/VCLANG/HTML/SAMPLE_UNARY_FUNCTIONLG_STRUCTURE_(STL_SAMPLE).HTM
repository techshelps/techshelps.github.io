<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>unary_function&lt;&gt; Structure (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_unary_functionLTGT_structure">unary_function&lt;&gt; Structure (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>unary_function&lt;&gt;</code> structure in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt; functional &gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class _A, class _R&gt;
     struct unary_function
     {
         typedef _A argument_type;
         typedef _R result_type;
     };
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 unary_function is used as a base class to better define operator functions in the following format:  result_type classname::operatorX(argument_type).  </p>
<p><b>Sample Code: </b></p>
<pre><code>////////////////////////////////////////////
//
// Compile options needed: none
//
// Structure used:
//       unary_function&lt;int, float&gt; - allows us
//       to write operator functions accepting an
//       integer and returning floats.
////////////////////////////////////////////

#include &lt;functional&gt;
#include &lt;iostream&gt;

using namespace std ;

/* derive class from unary_function in order to use it */

class unary_test : public unary_function&lt;int,float&gt;
{
public:
  float value;
  unary_test(){value=10.0;}
  unary_test(float x){value=x;}
  result_type operator*(argument_type x);
  result_type operator-(argument_type x);
};

/* You can now easily create operators that accept */
/* an int and return a float.                     */

unary_test::result_type unary_test::operator*(unary_test::argument_type x)
{
  value*=x;
  cout &lt;&lt; "New value after * is " &lt;&lt; value &lt;&lt; endl ;
  return value;
}

unary_test::result_type unary_test::operator-(unary_test::argument_type x)
{
  value-+(float)x;
  cout &lt;&lt; "New value after minus is " &lt;&lt; value &lt;&lt; endl ;

  return value;
}

void main(void)
{
  unary_test item;
  unary_test item2(18.0);

  cout &lt;&lt; "Begin" &lt;&lt; endl ;
  cout.setf(ios::fixed) ;
  item = item * 2;
  item2 = item2 - 5;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Begin
New value after * is 20.000000
New value after minus is 18.000000
</code></pre>


</body>
</html>

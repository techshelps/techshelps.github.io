<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>new Operator</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_new_operator"></a><sup></sup>new Operator</h1>
<p>
The <b>new</b> operator attempts to dynamically allocate (at run time) one or more objects of <i>type-name</i>. The <b>new</b> operator cannot be used to allocate a function; however, it can be used to allocate a pointer to a function.</p>
<p class=label>
<b>Syntax</b></p>
<p class=dt>
<i>allocation-expression</i> :</p>
<p class=indent>
<b>::</b><sub>opt</sub> <b>new</b> <i>placement</i><sub>opt</sub> <i>new-type-name</i>  <i>new-initializer</i><sub>opt</sub><br>
<b>::</b><sub>opt</sub> <b>new</b> <i>placement</i><sub>opt</sub> <b>(</b> <i>type-name</i> <b>)</b>  <i>new-initializer</i><sub>opt</sub></p>
<p class=dt>
<i>placement</i> :</p>
<p class=indent>
<b>(</b> <i>expression-list</i> <b>)</b></p>
<p class=dt>
<i>new-type-name</i> :</p>
<p class=indent>
<i>type-specifier-list</i> <i>new-declarator</i><sub>opt</sub></p>
<p>
The <b>new</b> operator is used to allocate objects and arrays of objects. The <b>new</b> operator allocates from a program memory area called the “free store.” In C, the free store is often referred to as the “heap.”</p>
<p>
When <b>new</b> is used to allocate a single object, it yields a pointer to that object; the resultant type is <i>new-type-name</i> <b>*</b> or <i>type-name</i> <b>*</b>. When <b>new</b> is used to allocate a singly dimensioned array of objects, it yields a pointer to the first element of the array, and the resultant type is <i>new-type-name</i> <b>*</b> or <i>type-name</i> <b>*</b>. When <b>new</b> is used to allocate a multidimensional array of objects, it yields a pointer to the first element of the array, and the resultant type preserves the size of all but the leftmost array dimension. For example:</p>
<pre><code>new float[10][25][10]
</code></pre>
<p>
yields type <code>float (*)[25][10]</code>. Therefore, the following code will not work because it attempts to assign a pointer to an array of <code>float</code> with the dimensions <code>[25][10]</code> to a pointer to type <code>float</code>:</p>
<pre><code>float *fp;
fp = new float[10][25][10];
</code></pre>
<p>
The correct expression is:</p>
<pre><code>float (*cp)[25][10];
cp = new float[10][25][10];
</code></pre>
<p>
The definition of <code>cp</code> allocates a pointer to an array of type <code>float</code> with dimensions <code>[25][10]</code> — it does not allocate an array of pointers.</p>
<p>
All but the leftmost array dimensions must be constant expressions that evaluate to positive values; the leftmost array dimension can be any expression that evaluates to a positive value. When allocating an array using the <b>new</b> operator, the first dimension can be zero — the <b>new</b> operator returns a unique pointer.</p>
<p>
The <i>type-specifier-list</i> cannot contain <b>const</b>, <b>volatile</b>, class declarations, or enumeration declarations. Therefore, the following expression is illegal:</p>
<pre><code>volatile char *vch = new volatile char[20];
</code></pre>
<p>
The <b>new</b> operator does not allocate reference types because they are not objects.</p>
<p>
If there is insufficient memory for the allocation request, by default <b>operator new</b> returns <b>NULL</b>. You can change this default behavior by writing a custom exception-handling routine and calling the <b>_set_new_handler</b> run-time library function with your function name as its argument. For more details on this recovery scheme, see <a href="_pluslang_the_operator_new_function.htm">The operator new Function</a>.</p>
</font></BODY>
</HTML>

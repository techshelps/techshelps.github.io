<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The try-finally Statement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2"><h1><a name="_clang_the_try.2d.finally_statement"></a><sup></sup>The try-finally Statement</h1>
<p>
<b>Microsoft Specific —&gt;</b></p>
<p>
The <b>try-finally</b> statement is a Microsoft extension to the C language that enables applications to guarantee execution of cleanup code when execution of a block of code is interrupted. Cleanup consists of such tasks as deallocating memory, closing files, and releasing file handles. The <b>try-finally</b> statement is especially useful for routines that have several places where a check is made for an error that could cause premature return from the routine. </p>
<h4>Syntax</h4>
<p class=dt>
<i>try-finally-statement</i> :</p>
<p class=indent>
<b>__try</b> <i>compound-statement</i><br>
<b>__finally</b> <i>compound-statement</i></p>
<p>
The compound statement after the <b>__try</b> clause is the guarded section. The compound statement after the <b>__finally</b> clause is the termination handler. The handler specifies a set of actions that execute when the guarded section is exited, whether the guarded section is exited by an exception (abnormal termination) or by standard fall through (normal termination).</p>
<p>
Control reaches a <b>__try</b> statement by simple sequential execution (fall through). When control enters the <b>__try</b> statement, its associated handler becomes active. Execution proceeds as follows:
<ol>
<li>
The guarded section is executed.<br><br></li>
<li>
The termination handler is invoked.<br><br></li>
<li>
When the termination handler completes, execution continues after the <b>__finally</b> statement. Regardless of how the guarded section ends (for example, via a <b>goto</b> statement out of the guarded body or via a <b>return</b> statement), the termination handler is executed before the flow of control moves out of the guarded section.</li>
</ol>
<p>
The <b>__leave</b> keyword is valid within a <b>try-finally</b> statement block. The effect of <b>__leave</b> is to jump to the end of the <b>try-finally</b> block. The termination handler is immediately executed. Although a <b>goto</b> statement can be used to accomplish the same result, a <b>goto</b> statement causes stack unwinding. The <b>__leave</b> statement is more efficient because it does not involve stack unwinding.</p>
<p>
Exiting a <b>try-finally</b> statement using a <b>return</b> statement or the <b>longjmp</b> run-time function is considered abnormal termination. It is illegal to jump into a <b>__try</b> statement, but legal to jump out of one. All <b>__finally</b> statements that are active between the point of departure and the destination must be run. This is called a “local unwind.”</p>
<p>
The termination handler is not called if a process is killed while executing a <b>try-finally</b> statement.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Structured exception handling works with C and C++ source files. However, it is not specifically designed for C++. You can ensure that your code is more portable by using C++ exception handling. Also, the C++ exception handling mechanism is much more flexible, in that it can handle exceptions of any type.</p>
<p class=indent>
For C++ programs, C++ exception handling should be used instead of structured exception handling. For more information, see <a href="_pluslang_exception_handling.htm">Exception Handling</a> in the <i>C++ Language Reference</i>.</p>
<p>
See the example for the <a href="_clang_the_try.2d.except_statement.htm">try-except statement</a> to see how the <b>try-finally</b> statement works. </p>
<p>
<b>END Microsoft Specific</b></p>
</font></BODY>
</HTML>

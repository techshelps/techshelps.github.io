<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using _set_new_handler</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_using__set_new_handler"></a><sup></sup>Using _set_new_handler</h1>
<p>
In some circumstances, corrective action can be taken during memory allocation and the request can be fulfilled. To gain control when the global <b>operator new </b>function fails, use the <b>_set_new_handler</b> function (defined in NEW.H) as follows:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;new.h&gt;

// Define a function to be called if new fails to allocate memory.
int MyNewHandler( size_t size )
{
 &nbsp;&nbsp; clog &lt;&lt; "Allocation failed. Coalescing heap." &lt;&lt; endl;

 &nbsp;&nbsp; // Call a fictitious function to recover some heap space.
 &nbsp;&nbsp; return CoalesceHeap();
}

void main()
{
 &nbsp;&nbsp; // Set the failure handler for new to be MyNewHandler.
 &nbsp;&nbsp; _set_new_handler( MyNewHandler );

 &nbsp;&nbsp; int *pi = new int[BIG_NUMBER];
}
</code></pre>
<p>
In the preceding example, the first statement in <b>main</b> sets the new handler to <code>MyNewHandler</code>. The second statement tries to allocate a large block of memory using the <b>new</b> operator. When the allocation fails, control is transferred to <code>MyNewHandler</code>. The argument passed to <code>MyNewHandler</code> is the number of bytes requested. The value returned from <code>MyNewHandler</code> is a flag indicating whether allocation should be retried: a nonzero value indicates that allocation should be retried, and a zero value indicates that allocation has failed.</p>
<p>
<code>MyNewHandler</code> prints a warning message and takes corrective action. If <code>MyNewHandler</code> returns a nonzero value, the <b>new</b> operator retries the allocation. When <code>MyNewHandler</code> returns a 0 the <b>new</b> operator stops trying and returns a zero value to the program.</p>
<p>
The <b>_set_new_handler</b> function returns the address of the previous new handler. Therefore, if a new handler needs to be installed for a short time, the previous new handler can be reinstalled using code such as the following:</p>
<pre><code>#include &lt;new.h&gt;

...

_PNH old_handler = _set_new_handler( MyNewHandler );

// Code that requires MyNewHandler.
...

// Reinstall previous new handler.
_set_new_handler( old_handler );
</code></pre>
<p>
A call to <b>_set_new_handler</b> with an argument of 0 causes the new handler to be removed. There is no default new handler.</p>
<p>
The new handler you specify can have any name, but it must be a function returning type <b>int</b> (nonzero indicates the new handler succeeded, and zero indicates that it failed).</p>
<p>
If a user-defined <b>operator new </b>is provided, the new handler functions are not automatically called on failure.</p>
<p>
The prototype for <b>_set_new_handler</b> and the type <b>_PNH</b> is defined in NEW.H:</p>
<pre><code>_PNH _set_new_handler( _PNH );
</code></pre>
<p>
The type <b>_PNH</b> is a pointer to a function that returns type <b>int</b> and takes a single argument of type <b>size_t</b>.</p>
</font></BODY>
</HTML>

</html>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Files and Streams</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
</head>

<body bgcolor=white>

<h1><a name="Files and Streams">Files and Streams</a></h1>
<p><a href="LIB_FILE_Text_and_Binary_Streams.htm#Text and Binary Streams"><b>Text and Binary Streams</b></a><b> | </b><a href="LIB_FILE_Byte_and_Wide_Streams.htm#Byte and Wide Streams"><b>Byte and Wide Streams</b></a><b> | </b><a href="LIB_FILE_Controlling_Streams.htm#Controlling Streams"><b>Controlling Streams</b></a><b> | </b><a href="LIB_FILE_Stream_States.htm#Stream States"><b>Stream States</b></a><b> </b></p>
<p>A program communicates with the target environment by reading and writing <a name="files"><b>files</b></a> (ordered sequences of bytes). A file 
can be, for example, a data set that you can read and write repeatedly (such as a disk file), a stream of bytes generated 
by a program (such as a pipeline), or a stream of bytes received from or sent to a peripheral device (such as the 
keyboard or display). The latter two are <a name="interactive files"><b>interactive files</b></a>. Files are typically the principal means by which to interact 
with a program.</p>
<p>You manipulate all these kinds of files in much the same way -- by calling library functions. You include the standard 
header <code>&lt;stdio.h&gt;</code> to declare most of these functions.</p>
<p>Before you can perform many of the operations on a file, the file must be <a name="file open">opened</a>. Opening a file associates it with a 
<a name="stream"><b>stream</b></a>, a data structure within the Standard C library that glosses over many differences among files of various kinds. 
The library maintains the state of each stream in an object of type <code><b>FILE</b></code>.</p>
<p>The target environment opens three files prior to program startup. You can open a file by calling the library function 
<code>fopen</code> with two arguments. The first argument is a filename, a multibyte string that the target environment uses to 
identify which file you want to read or write. The second argument is a C string that specifies:</p>
<ul>
<li>Whether you intend to read data from the file or write data to it, or both. </li>
<li>Whether you intend to generate new contents for the file (or create a file if it did not previously exist) or leave the 
existing contents in place. </li>
<li>Whether writes to a file can alter existing contents or should only append bytes at the end of the file. </li>
<li>Whether you want to manipulate a <a href="LIB_FILE_Text_and_Binary_Streams.htm#text stream">text stream</a> or a <a href="LIB_FILE_Text_and_Binary_Streams.htm#binary stream">binary stream</a>. </li>
</ul>
<p>Once the file is successfully opened, you can determine whether the stream is <a name="byte oriented"><b>byte-oriented</b></a> (a <a href="LIB_FILE_Byte_and_Wide_Streams.htm#byte stream"><b>byte stream</b></a>) or 
<a name="wide oriented"><b>wide-oriented</b></a> (a <a href="LIB_FILE_Byte_and_Wide_Streams.htm#wide stream"><b>wide stream</b></a>). Wide-oriented streams are supported only with Amendment 1. A stream is initially 
<a name="unbound stream"><b>unbound</b></a>. Calling certain functions to operate on the stream makes it byte oriented, while certain other functions make 
it wide oriented. Once established, a stream maintains its orientation until it is closed by a call to <code>fclose</code> or <code>freopen</code>.</p>
</body>
</html>

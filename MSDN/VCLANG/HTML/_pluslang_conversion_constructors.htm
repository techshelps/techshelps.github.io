<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conversion Constructors</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_conversion_constructors"></a><sup></sup>Conversion Constructors</h1>
<p>
A constructor that can be called with a single argument is used for conversions from the type of the argument to the class type. Such a constructor is called a conversion constructor. Consider the following example:</p>
<pre><code>class Point
{
public:
 &nbsp;&nbsp; Point();
 &nbsp;&nbsp; Point( int );
 &nbsp;&nbsp; ...
};
</code></pre>
<p>
Sometimes a conversion is required but no conversion constructor exists in the class. These conversions cannot be performed by constructors. The compiler does not look for intermediate types through which to perform the conversion. For example, suppose a conversion exists from type <code>Point</code> to type <code>Rect</code> and a conversion exists from type <b>int</b> to type <code>Point</code>. The compiler does not supply a conversion from type <b>int</b> to type <code>Rect</code> by constructing an intermediate object of type <code>Point</code>.</p>
</font></BODY>
</HTML>

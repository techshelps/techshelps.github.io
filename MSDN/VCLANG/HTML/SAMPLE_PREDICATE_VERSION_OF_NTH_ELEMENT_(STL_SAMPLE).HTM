<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Predicate Version of nth_element (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_nth_elementP">Predicate Version of nth_element (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the predicate version of the <code>nth_element</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class RandomAccessIterator, class Compare&gt; 
     inline void nth_element(RandomAccessIterator first, RandomAccessIterator nth, 
     RandomAccessIterator last, Compare compare)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The nth_element algorithm partitions the sequence [first..last) on the value referenced by nth. All the elements less than or equal to the value are placed before value and all elements greater than value are placed after value in the sequence.  The predicate version of nth_element uses the compare function for comparisons.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// nth_element.cpp : Illustrates how to use the predicate version
//                   of the nth_element function.
//
// Functions:
//
//    nth_element : Partition the elements in a sequence by its nth
//                  element.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;

using namespace std;


void main()
{
    const int VECTOR_SIZE = 8 ;

    // Define a template class vector of int
    typedef vector&lt;int &gt; IntVector ;

    //Define an iterator for template class vector of strings
    typedef IntVector::iterator IntVectorIt ;

    IntVector Numbers(VECTOR_SIZE) ;

    IntVectorIt start, end, it ;

    // Initialize vector Numbers
    Numbers[0] = 4 ;
    Numbers[1] = 10;
    Numbers[2] = 70 ;
    Numbers[3] = 30 ;
    Numbers[4] = 10;
    Numbers[5] = 69 ;
    Numbers[6] = 96 ;
    Numbers[7] = 100;

    start = Numbers.begin() ;   // location of first
                                // element of Numbers

    end = Numbers.end() ;       // one past the location
                                // last element of Numbers

    cout &lt;&lt; "Before calling nth_element:\n" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    // partition the elements by the 4th element
    nth_element(start, start+4, end, less&lt;int&gt;()) ;

    cout &lt;&lt; "After calling nth_element:\n" &lt;&lt; endl ;

    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;
}


 </code></pre>

<p>Program Output is:</p>

<pre><code>Before calling nth_element:

Numbers { 4 10 70 30 10 69 96 100  }

After calling nth_element:

Numbers { 4 10 10 30 69 70 96 100  }
</code></pre>

</body>
</html>

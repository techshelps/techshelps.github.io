<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Postfix Increment and Decrement Operators</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.postfix_increment_and_decrement_operators"></a><sup></sup>C++ Postfix Increment and Decrement Operators</h1>
<p>
C++ provides prefix and postfix increment and decrement operators; this section describes only the postfix increment and decrement operators. (For more information, see <a href="_pluslang_increment_and_decrement_operators.htm">Increment and Decrement Operators</a>.) The difference between the two is that in the postfix notation, the operator appears after <i>postfix-expression</i>, whereas in the prefix notation, the operator appears before <i>expression.</i> The following example shows a postfix-increment operator:</p>
<pre><code>i++
</code></pre>
<p>
The effect of applying the postfix increment, or “postincrement,” operator (<b>++</b>) is that the operand’s value is increased by one unit of the appropriate type. Similarly, the effect of applying the postfix decrement, or “postdecrement,” operator (<b>––</b>) is that the operand’s value is decreased by one unit of the appropriate type.</p>
<p>
For example, applying the postincrement operator to a pointer to an array of objects of type <b>long</b> actually adds four to the internal representation of the pointer. This behavior causes the pointer, which previously referred to the <i>n</i>th element of the array, to refer to the (<i>n</i>+1)th element.</p>
<p>
The operands to postincrement and postdecrement operators must be modifiable (not <b>const</b>) l-values of arithmetic or pointer type. The result of the postincrement or postdecrement expression is the value of the <i>postfix-expression</i> prior to application of the increment operator. The type of the result is the same as that of the <i>postfix-expression</i>, but it is no longer an l-value.</p>
<p>
The following code illustrates the postfix increment operator.</p>
<pre><code>if( var++ &gt; 0 )
 &nbsp;&nbsp; *p++ = *q++;
</code></pre>
<p>
In this example, the variable <code>var</code> is compared to 0, then incremented. If <code>var</code> was positive before being incremented, the next statement is executed. First, the value of the object pointed to by <code>q</code> is assigned to the object pointed to by <code>p</code>. Then, <code>q</code> and <code>p</code> are incremented. </p>
<p>
Postincrement and postdecrement, when used on enumerated types, yield integral values. Therefore, the following code is illegal:</p>
<pre><code>enum Days {
 &nbsp;&nbsp; Sunday = 1,
 &nbsp;&nbsp; Monday, 
 &nbsp;&nbsp; Tuesday,
 &nbsp;&nbsp; Wednesday,
 &nbsp;&nbsp; Thursday,
 &nbsp;&nbsp; Friday,
 &nbsp;&nbsp; Saturday
};

void main()
{
  Days Today = Tuesday;
  Days SaveToday;

  SaveToday = Today++;&nbsp; // error
}
</code></pre>
<p>
The intent of this code is to save today’s day and then move to tomorrow. However, the result is that the expression <code>Today++</code> yields an <b>int</b> — an error when assigned to an object of the enumerated type <code>Days</code>.</p>
</font></BODY>
</HTML>

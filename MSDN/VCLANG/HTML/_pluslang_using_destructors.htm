<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Destructors</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_using_destructors"></a><sup></sup>Using Destructors</h1>
<p>
Destructors are called when one of the following events occurs:
<ul type=disc>
<li>
An object allocated using the <b>new</b> operator is explicitly deallocated using the <b>delete</b> operator. When objects are deallocated using the <b>delete</b> operator, memory is freed for the “most derived object,” or the object that is a complete object and not a subobject representing a base class. This “most-derived object” deallocation is guaranteed to work only with virtual destructors. Deallocation may fail in multiple-inheritance situations where the type information does not correspond to the underlying type of the actual object.<br><br></li>
<li>
A local (automatic) object with block scope goes out of scope.<br><br></li>
<li>
The lifetime of a temporary object ends.<br><br></li>
<li>
A program ends and global or static objects exist.<br><br></li>
<li>
The destructor is explicitly called using the destructor function’s fully qualified name. (For more information, see <a href="_pluslang_explicit_destructor_calls.htm">Explicit Destructor Calls</a>.)</li>
</ul>
<p>
The cases described in the preceding list ensure that all objects can be destroyed with user-defined methods. </p>
<p>
If a base class or data member has an accessible destructor, and if a derived class does not declare a destructor, the compiler generates one. This compiler-generated destructor calls the base class destructor and the destructors for members of the derived type. Default destructors are public. (For more information about accessibility, see <a href="_pluslang_access_specifiers_for_base_classes.htm">Access Specifiers for Base Classes</a> in Chapter 10.)</p>
<p>
Destructors can freely call class member functions and access class member data. When a virtual function is called from a destructor, the function called is the function for the class currently being destroyed. (For more information, see <a href="_pluslang_order_of_destruction.htm">Order of Destruction</a>.)</p>
<p>
There are two restrictions on the use of destructors. The first restriction is that you cannot take the address of a destructor. The second is that derived classes do not inherit their base class’s destructors. Instead, as previously explained, they always override the base class’s destructors.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>deque::push_front, deque::pop_front (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_dequeCCpush_front_pop_front">deque::push_front, deque::pop_front (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>deque::push_front</code> and <code>deque::pop_front</code> STL functions in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;deque&gt;</p>
<b>Prototype:</b><br>
<pre><code>
   void push_front(const T&amp; x);
   void pop_front();
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The push_front function inserts an element with value x at the beginning of the deque container. The pop_front function removes the first element of the deque container, which must be non-empty.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: -GX
//
// deque.cpp :
//
// Functions:
//
//    deque::push_front
//    deque::pop_front
//////////////////////////////////////////////////////////////////////

/* Compile options needed:-GX
*/

#include &lt;iostream&gt;
#include &lt;deque&gt;

using namespace std;


typedef deque&lt;int &gt;  INTDEQUE;
void printcontents (INTDEQUE  deque);

void main()
{

    INTDEQUE  dequetest;

    dequetest.push_front(1);
    dequetest.push_front(2);
    dequetest.push_front(3);
    printcontents (dequetest);
    dequetest.pop_front();
    printcontents (dequetest);
    dequetest.pop_front();
    printcontents (dequetest);
}

//function to print the contents of deque
void printcontents (INTDEQUE  deque)
{
    INTDEQUE::iterator pdeque;

    cout &lt;&lt;"The output is:"&lt;&lt;endl;

        for(pdeque = deque.begin();
        pdeque != deque.end();
        pdeque++)
    {
        cout &lt;&lt; *pdeque &lt;&lt;endl ;
    }
}


 </code></pre>

<p>Program Output is:</p>

<pre><code>The output is:
3
2
1
The output is:
2
1
The output is:
1
</code></pre>

</body>
</html>

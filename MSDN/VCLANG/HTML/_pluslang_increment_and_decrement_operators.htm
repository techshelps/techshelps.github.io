<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Increment and Decrement Operators (++, --)</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_increment_and_decrement_operators"></a><sup></sup>Increment and Decrement Operators (++, --)</h1>
<p>
The prefix increment operator (<b>++</b>), also called the “preincrement” operator, adds one to its operand; this incremented value is the result of the expression. The operand must be an l-value not of type <b>const</b>. The result is an l-value of the same type as the operand.</p>
<p>
The prefix decrement operator (<code>––</code>), also called the “predecrement” operator, is analogous to the preincrement operator, except that the operand is decremented by one and the result is this decremented value.</p>
<p>
Both the prefix and postfix increment and decrement operators affect their operands. The key difference between them is when the increment or decrement takes place in the evaluation of an expression. (For more information, see <a href="_pluslang_c.2b2b_.postfix_increment_and_decrement_operators.htm">Postfix Increment and Decrement Operators</a>.) In the prefix form, the increment or decrement takes place before the value is used in expression evaluation, so the value of the expression is different from the value of the operand. In the postfix form, the increment or decrement takes place after the value is used in expression evaluation, so the value of the expression is the same as the value of the operand.</p>
<p>
An operand of integral or floating type is incremented or decremented by the integer value 1. The type of the result is the same as the operand type. An operand of pointer type is incremented or decremented by the size of the object it addresses. An incremented pointer points to the next object; a decremented pointer points to the previous object. </p>
<p>
This example illustrates the unary decrement operator:</p>
<pre><code>if( line[--i] != '\n' )
 &nbsp;&nbsp; return;
</code></pre>
<p>
In this example, the variable <code>i</code> is decremented before it is used as a subscript to <code>line</code>.</p>
<p>
Because increment and decrement operators have side effects, using expressions with increment or decrement operators in a macro can have undesirable results (see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_predir_Macros">
</object><a href=JavaScript:alink_1.Click()>Macros</a> in the <i>Preprocessor Reference</i> for more information about macros). Consider this example:</p>
<pre><code>#define max(a,b) ((a)&lt;(b))?(b):(a)

...

int i, j, k;

k = max( ++i, j );
</code></pre>
<p>
The macro expands to:</p>
<pre><code>k = ((++i)&lt;(j))?(j):(++i);
</code></pre>
<p>
If <code>i</code> is greater than or equal to <code>j</code>, it will be incremented twice.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;C++ inline functions are preferable to macros in many cases because they eliminate side effects such as those described here, and allow the language to perform more complete type checking.</p>
</font></BODY>
</HTML>

<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Predicate Version of inplace_merge (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_inplace_mergeP">Predicate Version of inplace_merge (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the predicate version of the <code>inplace_merge</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;algorithm&gt;</p>
<b>Prototype:</b><br>
<pre><code>
template&lt;class BidirectionalIterator, class Compare&gt; inline
     void inplace_merge(BidirectionalIterator first, BidirectionalIterator middle,
     BidirectionalIterator last, Compare compare)
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The inplace_merge algorithm merges two sorted sub-sequences: [first..middle) and [middle..last) in place into a single sorted sequence [first..last). This version assumes that the ranges [first..middle) and [middle..last) are sorted using the compare function. If both ranges contain equal values, the value from the first range will be stored first.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// inplace_mergeP.cpp : Illustrates how to use the predicate version of
//                      the inplace_merge function.
//
// Functions:
//
//    inplace_merge - Merge two sorted sub-sequences in place into a
//                    single sorted list using the compare function.
//
//    begin - Returns an iterator that points to the first element in a
//            sequence.

//    end - Returns an iterator that points one past the end of a sequence.
//////////////////////////////////////////////////////////////////////

// disable warning C4786: symbol greater than 255 character,
// okay to ignore
#pragma warning(disable: 4786)

#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;vector&gt;

using namespace std;


void main()
{
    const int VECTOR_SIZE = 8 ;

    // Define a template class vector of int
    typedef vector&lt;int &gt; IntVector ;

    //Define an iterator for template class vector of strings
    typedef IntVector::iterator IntVectorIt ;

    IntVector Numbers(VECTOR_SIZE) ;

    IntVectorIt start, end, it ;

    // Initialize vector Numbers
    Numbers[0] = 4 ;
    Numbers[1] = 10;
    Numbers[2] = 70 ;
    Numbers[3] = 10 ;
    Numbers[4] = 30 ;
    Numbers[5] = 69 ;
    Numbers[6] = 96 ;
    Numbers[7] = 100;

    start = Numbers.begin() ;   // location of first
                                // element of Numbers

    end = Numbers.end() ;       // one past the location
                                // last element of Numbers

    cout &lt;&lt; "Before calling inplace_merge\n" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;

    //merge the elements of Numbers in place
    inplace_merge(start, start + 3, end, less&lt;int&gt;()) ;

    cout &lt;&lt; "After calling inplace_merge\n" &lt;&lt; endl ;

    // print content of Numbers
    cout &lt;&lt; "Numbers { " ;
    for(it = start; it != end; it++)
        cout &lt;&lt; *it &lt;&lt; " " ;
    cout &lt;&lt; " }\n" &lt;&lt; endl ;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>Before calling inplace_merge

Numbers { 4 10 70 10 30 69 96 100  }

After calling inplace_merge

Numbers { 4 10 10 30 69 70 96 100  }
</code></pre>

</body>
</html>

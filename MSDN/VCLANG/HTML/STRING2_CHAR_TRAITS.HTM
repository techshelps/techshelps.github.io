<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>char_traits</title></head>
<body bgcolor=white>

<h2><a name="char_traits">char_traits</a></h2>
<META NAME="MS-HKWD" CONTENT="char_traits">
<pre><code>struct <b>char_traits</b>&lt;E&gt; {
    typedef E <a href="STRING2_char_traitsCCchar_type.htm#char_traits::char_type"><b>char_type</b></a>;
    typedef T1 <a href="STRING2_char_traitsCCint_type.htm#char_traits::int_type"><b>int_type</b></a>;
    typedef T2 <a href="STRING2_char_traitsCCpos_type.htm#char_traits::pos_type"><b>pos_type</b></a>;
    typedef T3 <a href="STRING2_char_traitsCCoff_type.htm#char_traits::off_type"><b>off_type</b></a>;
    typedef T4 <a href="STRING2_char_traitsCCstate_type.htm#char_traits::state_type"><b>state_type</b></a>;
    static void <a href="STRING2_char_traitsCCassign.htm#char_traits::assign"><b>assign</b></a>(E&amp; x, const E&amp; y);
    static E *<a href="STRING2_char_traitsCCassign.htm#char_traits::assign"><b>assign</b></a>(E *x, size_t n, const E&amp; y);
    static bool <a href="STRING2_char_traitsCCeq.htm#char_traits::eq"><b>eq</b></a>(const E&amp; x, const E&amp; y);
    static bool <a href="STRING2_char_traitsCClt.htm#char_traits::lt"><b>lt</b></a>(const E&amp; x, const E&amp; y);
    static int <a href="STRING2_char_traitsCCcompare.htm#char_traits::compare"><b>compare</b></a>(const E *x, const E *y, size_t n);
    static size_t <a href="STRING2_char_traitsCClength.htm#char_traits::length"><b>length</b></a>(const E *x);
    static E *<a href="STRING2_char_traitsCCcopy.htm#char_traits::copy"><b>copy</b></a>(E *x, const E *y, size_t n);
    static E *<a href="STRING2_char_traitsCCmove.htm#char_traits::move"><b>move</b></a>(E *x, const E *y, size_t n);
    static const E *<a href="STRING2_char_traitsCCfind.htm#char_traits::find"><b>find</b></a>(const E *x, size_t n, const E&amp; y);
    static E <a href="STRING2_char_traitsCCto_char_type.htm#char_traits::to_char_type"><b>to_char_type</b></a>(const int_type&amp; ch);
    static int_type <a href="STRING2_char_traitsCCto_int_type.htm#char_traits::to_int_type"><b>to_int_type</b></a>(const E&amp; c);
    static bool <a href="STRING2_char_traitsCCeq_int_type.htm#char_traits::eq_int_type"><b>eq_int_type</b></a>(const int_type&amp; ch1, const int_type&amp; ch2);
    static int_type <a href="STRING2_char_traitsCCeof.htm#char_traits::eof"><b>eof</b></a>();
    static int_type <a href="STRING2_char_traitsCCnot_eof.htm#char_traits::not_eof"><b>not_eof</b></a>(const int_type&amp; ch);
    };</code></pre>
<p>The template class describes various <a name="character traits"><b>character traits</b></a> for type <code>E</code>. The template class <a href="STRING2_basic_string.htm#basic_string"><code>basic_string</code></a> as well as several 
iostreams template classes, including <a href="IOS_basic_ios.htm#basic_ios"><code>basic_ios</code></a>, use this information to manipulate elements of type <code>E</code>. Such an 
element type must not require explicit construction or destruction. A bitwise copy has the same effect as an assignment.</p>
</body>
</html>

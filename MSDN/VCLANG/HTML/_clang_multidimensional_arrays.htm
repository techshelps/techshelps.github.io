<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multidimensional Arrays</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_clang_multidimensional_arrays"></a><sup></sup>Multidimensional Arrays</h1>
<p>
A subscript expression can also have multiple subscripts, as follows: </p>
<p>
<i>expression1</i> <b>[</b><i>expression2</i><b>]</b> <b>[</b><i>expression3</i><b>]</b>...</p>
<p>
Subscript expressions associate from left to right. The leftmost subscript expression, <i>expression1</i><b>[</b><i>expression2</i><b>]</b>, is evaluated first. The address that results from adding <i>expression1</i> and <i>expression2</i> forms a pointer expression; then <i>expression3</i> is added to this pointer expression to form a new pointer expression, and so on until the last subscript expression has been added. The indirection operator (<b>*</b>) is applied after the last subscripted expression is evaluated, unless the final pointer value addresses an array type (see examples below). </p>
<p>
Expressions with multiple subscripts refer to elements of “multidimensional arrays.” A multidimensional array is an array whose elements are arrays. For example, the first element of a three-dimensional array is an array with two dimensions. </p>
<p class=label>
<b>Examples</b></p>
<p>
For the following examples, an array named <code>prop</code> is declared with three elements, each of which is a 4-by-6 array of <b>int</b> values.</p>
<pre><code>int prop[3][4][6];
int i, *ip, (*ipp)[6];
</code></pre>
<p>
A reference to the <code>prop</code> array looks like this:</p>
<pre><code>i = prop[0][0][1];
</code></pre>
<p>
The example above shows how to refer to the second individual <b>int</b> element of <code>prop</code>. Arrays are stored by row, so the last subscript varies most quickly; the expression <code>prop[0][0][2]</code> refers to the next (third) element of the array, and so on. </p>
<pre><code>i = prop[2][1][3];
</code></pre>
<p>
This statement is a more complex reference to an individual element of <code>prop</code>. The expression is evaluated as follows:
<ol>
<li>
The first subscript, <code>2</code>, is multiplied by the size of a 4-by-6 <b>int</b> array and added to the pointer value <code>prop</code>. The result points to the third 4-by-6 array of <code>prop</code>.<br><br></li>
<li>
The second subscript, <code>1</code>, is multiplied by the size of the 6-element <b>int</b> array and added to the address represented by <code>prop[2]</code>.<br><br></li>
<li>
Each element of the 6-element array is an <b>int</b> value, so the final subscript, <code>3</code>, is multiplied by the size of an <b>int</b> before it is added to <code>prop[2][1]</code>. The resulting pointer addresses the fourth element of the 6-element array.<br><br></li>
<li>
The indirection operator is applied to the pointer value. The result is the <b>int</b> element at that address.</li>
</ol>
<p>
These next two examples show cases where the indirection operator is not applied.</p>
<pre><code>ip = prop[2][1];

ipp = prop[2];
</code></pre>
<p>
In the first of these statements, the expression <code>prop[2][1]</code> is a valid reference to the three-dimensional array <code>prop</code>; it refers to a 6-element array (declared above). Since the pointer value addresses an array, the indirection operator is not applied.</p>
<p>
Similarly, the result of the expression <code>prop[2]</code> in the second statement <code>ipp = prop[2];</code> is a pointer value addressing a two-dimensional array.</p>
</font></BODY>
</HTML>

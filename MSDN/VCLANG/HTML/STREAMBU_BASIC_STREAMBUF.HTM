<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_streambuf</title></head>
<body bgcolor=white>

<h2><a name="basic_streambuf">basic_streambuf</a></h2>
<META NAME="MS-HKWD" CONTENT="basic_streambuf">
<p><a href="STREAMBU_basic_streambufCCchar_type.htm#basic_streambuf::char_type"><code><b>char_type</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCeback.htm#basic_streambuf::eback"><code><b>eback</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCegptr.htm#basic_streambuf::egptr"><code><b>egptr</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCepptr.htm#basic_streambuf::epptr"><code><b>epptr</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCgbump.htm#basic_streambuf::gbump"><code><b>gbump</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCgetloc.htm#basic_streambuf::getloc"><code><b>getloc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCgptr.htm#basic_streambuf::gptr"><code><b>gptr</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCimbue.htm#basic_streambuf::imbue"><code><b>imbue</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCin_avail.htm#basic_streambuf::in_avail"><code><b>in_avail</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCint_type.htm#basic_streambuf::int_type"><code><b>int_type</b></code></a><code><b> &#183; 
</b></code><a href="STREAMBU_basic_streambufCCoff_type.htm#basic_streambuf::off_type"><code><b>off_type</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCoverflow.htm#basic_streambuf::overflow"><code><b>overflow</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpbackfail.htm#basic_streambuf::pbackfail"><code><b>pbackfail</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpbase.htm#basic_streambuf::pbase"><code><b>pbase</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpbump.htm#basic_streambuf::pbump"><code><b>pbump</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpos_type.htm#basic_streambuf::pos_type"><code><b>pos_type</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpptr.htm#basic_streambuf::pptr"><code><b>pptr</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpubimbue.htm#basic_streambuf::pubimbue"><code><b>pubimbue</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpubseekoff.htm#basic_streambuf::pubseekoff"><code><b>pubseekoff</b></code></a><code><b> 
&#183; </b></code><a href="STREAMBU_basic_streambufCCpubseekpos.htm#basic_streambuf::pubseekpos"><code><b>pubseekpos</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpubsetbuf.htm#basic_streambuf::pubsetbuf"><code><b>pubsetbuf</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCpubsync.htm#basic_streambuf::pubsync"><code><b>pubsync</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsbumpc.htm#basic_streambuf::sbumpc"><code><b>sbumpc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCseekoff.htm#basic_streambuf::seekoff"><code><b>seekoff</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCseekpos.htm#basic_streambuf::seekpos"><code><b>seekpos</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsetbuf.htm#basic_streambuf::setbuf"><code><b>setbuf</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsetg.htm#basic_streambuf::setg"><code><b>setg</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsetp.htm#basic_streambuf::setp"><code><b>setp</b></code></a><code><b> &#183; 
</b></code><a href="STREAMBU_basic_streambufCCsgetc.htm#basic_streambuf::sgetc"><code><b>sgetc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsgetn.htm#basic_streambuf::sgetn"><code><b>sgetn</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCshowmanyc.htm#basic_streambuf::showmanyc"><code><b>showmanyc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsnextc.htm#basic_streambuf::snextc"><code><b>snextc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsputbackc.htm#basic_streambuf::sputbackc"><code><b>sputbackc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsputc.htm#basic_streambuf::sputc"><code><b>sputc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsputn.htm#basic_streambuf::sputn"><code><b>sputn</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsungetc.htm#basic_streambuf::sungetc"><code><b>sungetc</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCsync.htm#basic_streambuf::sync"><code><b>sync</b></code></a><code><b> &#183; 
</b></code><a href="STREAMBU_basic_streambufCCtraits_type.htm#basic_streambuf::traits_type"><code><b>traits_type</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCuflow.htm#basic_streambuf::uflow"><code><b>uflow</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCunderflow.htm#basic_streambuf::underflow"><code><b>underflow</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCxsgetn.htm#basic_streambuf::xsgetn"><code><b>xsgetn</b></code></a><code><b> &#183; </b></code><a href="STREAMBU_basic_streambufCCxsputn.htm#basic_streambuf::xsputn"><code><b>xsputn</b></code></a><code><b> </b></code></p>
<pre><code>template &lt;class E, class T = char_traits&lt;E&gt; &gt;
    class <b>basic_streambuf</b> {
public:
    typedef E <a href="STREAMBU_basic_streambufCCchar_type.htm#basic_streambuf::char_type"><b>char_type</b></a>;
    typedef T <a href="STREAMBU_basic_streambufCCtraits_type.htm#basic_streambuf::traits_type"><b>traits_type</b></a>;
    typedef T::int_type <a href="STREAMBU_basic_streambufCCint_type.htm#basic_streambuf::int_type"><b>int_type</b></a>;
    typedef T::pos_type <a href="STREAMBU_basic_streambufCCpos_type.htm#basic_streambuf::pos_type"><b>pos_type</b></a>;
    typedef T::off_type <a href="STREAMBU_basic_streambufCCoff_type.htm#basic_streambuf::off_type"><b>off_type</b></a>;
    virtual <b>~streambuf</b>();
    locale <a href="STREAMBU_basic_streambufCCpubimbue.htm#basic_streambuf::pubimbue"><b>pubimbue</b></a>(const locale&amp; loc);
    locale <a href="STREAMBU_basic_streambufCCgetloc.htm#basic_streambuf::getloc"><b>getloc</b></a>() const;
    basic_streambuf *<a href="STREAMBU_basic_streambufCCpubsetbuf.htm#basic_streambuf::pubsetbuf"><b>pubsetbuf</b></a>(E *s, streamsize n);
    pos_type <a href="STREAMBU_basic_streambufCCpubseekoff.htm#basic_streambuf::pubseekoff"><b>pubseekoff</b></a>(off_type off, ios_base::seekdir way,
        ios_base::openmode which = ios_base::in | ios_base::out);
    pos_type <a href="STREAMBU_basic_streambufCCpubseekpos.htm#basic_streambuf::pubseekpos"><b>pubseekpos</b></a>(pos_type sp,
        ios_base::openmode which = ios_base::in | ios_base::out);
    int <a href="STREAMBU_basic_streambufCCpubsync.htm#basic_streambuf::pubsync"><b>pubsync</b></a>();
    streamsize <a href="STREAMBU_basic_streambufCCin_avail.htm#basic_streambuf::in_avail"><b>in_avail</b></a>();
    int_type <a href="STREAMBU_basic_streambufCCsnextc.htm#basic_streambuf::snextc"><b>snextc</b></a>();
    int_type <a href="STREAMBU_basic_streambufCCsbumpc.htm#basic_streambuf::sbumpc"><b>sbumpc</b></a>();
    int_type <a href="STREAMBU_basic_streambufCCsgetc.htm#basic_streambuf::sgetc"><b>sgetc</b></a>();
    streamsize <a href="STREAMBU_basic_streambufCCsgetn.htm#basic_streambuf::sgetn"><b>sgetn</b></a>(E *s, streamsize n);
    int_type <a href="STREAMBU_basic_streambufCCsputbackc.htm#basic_streambuf::sputbackc"><b>sputbackc</b></a>(E c);
    int_type <a href="STREAMBU_basic_streambufCCsungetc.htm#basic_streambuf::sungetc"><b>sungetc</b></a>();
    int_type <a href="STREAMBU_basic_streambufCCsputc.htm#basic_streambuf::sputc"><b>sputc</b></a>(E c);
    streamsize <a href="STREAMBU_basic_streambufCCsputn.htm#basic_streambuf::sputn"><b>sputn</b></a>(const E *s, streamsize n);
protected:
    <a href="STREAMBU_basic_streambuf.htm#basic_streambuf"><b>basic_streambuf</b></a>();
    E *<a href="STREAMBU_basic_streambufCCeback.htm#basic_streambuf::eback"><b>eback</b></a>() const;
    E *<a href="STREAMBU_basic_streambufCCgptr.htm#basic_streambuf::gptr"><b>gptr</b></a>() const;
    E *<a href="STREAMBU_basic_streambufCCegptr.htm#basic_streambuf::egptr"><b>egptr</b></a>() const;
    void <a href="STREAMBU_basic_streambufCCgbump.htm#basic_streambuf::gbump"><b>gbump</b></a>(int n);
    void <a href="STREAMBU_basic_streambufCCsetg.htm#basic_streambuf::setg"><b>setg</b></a>(E *gbeg, E *gnext, E *gend);
    E *<a href="STREAMBU_basic_streambufCCpbase.htm#basic_streambuf::pbase"><b>pbase</b></a>() const;
    E *<a href="STREAMBU_basic_streambufCCpptr.htm#basic_streambuf::pptr"><b>pptr</b></a>() const;
    E *<a href="STREAMBU_basic_streambufCCepptr.htm#basic_streambuf::epptr"><b>epptr</b></a>() const;
    void <a href="STREAMBU_basic_streambufCCpbump.htm#basic_streambuf::pbump"><b>pbump</b></a>(int n);
    void <a href="STREAMBU_basic_streambufCCsetp.htm#basic_streambuf::setp"><b>setp</b></a>(E *pbeg, E *pend);
    virtual void <a href="STREAMBU_basic_streambufCCimbue.htm#basic_streambuf::imbue"><b>imbue</b></a>(const locale &amp;loc);
    virtual basic_streambuf *<a href="STREAMBU_basic_streambufCCsetbuf.htm#basic_streambuf::setbuf"><b>setbuf</b></a>(E *s, streamsize n);
    virtual pos_type <a href="STREAMBU_basic_streambufCCseekoff.htm#basic_streambuf::seekoff"><b>seekoff</b></a>(off_type off, ios_base::seekdir way,
        ios_base::openmode which = ios_base::in | ios_base::out);
    virtual pos_type <a href="STREAMBU_basic_streambufCCseekpos.htm#basic_streambuf::seekpos"><b>seekpos</b></a>(pos_type sp,
        ios_base::openmode which = ios_base::in | ios_base::out);
    virtual int <a href="STREAMBU_basic_streambufCCsync.htm#basic_streambuf::sync"><b>sync</b></a>();
    virtual int <a href="STREAMBU_basic_streambufCCshowmanyc.htm#basic_streambuf::showmanyc"><b>showmanyc</b></a>();
    virtual streamsize <a href="STREAMBU_basic_streambufCCxsgetn.htm#basic_streambuf::xsgetn"><b>xsgetn</b></a>(E *s, streamsize n);
    virtual int_type <a href="STREAMBU_basic_streambufCCunderflow.htm#basic_streambuf::underflow"><b>underflow</b></a>();
    virtual int_type <a href="STREAMBU_basic_streambufCCuflow.htm#basic_streambuf::uflow"><b>uflow</b></a>();
    virtual int_type <a href="STREAMBU_basic_streambufCCpbackfail.htm#basic_streambuf::pbackfail"><b>pbackfail</b></a>(int_type c = T::eof());
    virtual streamsize <a href="STREAMBU_basic_streambufCCxsputn.htm#basic_streambuf::xsputn"><b>xsputn</b></a>(const E *s, streamsize n);
    virtual int_type <a href="STREAMBU_basic_streambufCCoverflow.htm#basic_streambuf::overflow"><b>overflow</b></a>(int_type c = T::eof());
    };</code></pre>
<p>The template class describes an abstract base class for deriving a <a name="stream buffer"><b>stream buffer</b></a>, which controls the transmission of 
elements to and from a specific representation of a stream. An object of class <code>basic_streambuf&lt;E, T&gt;</code> helps control 
a stream with elements of type <code>E</code>, whose <a href="STRING2_char_traits.htm#character traits">character traits</a> are determined by the class <code>T</code>.</p>
<p>Every stream buffer conceptually controls two independent streams, in fact, one for extractions (input) and one for 
insertions (output). A specific representation may, however, make either or both of these streams inaccessible. It 
typically maintains some relationship between the two streams. What you insert into the output stream of a 
<a href="SSTREAM_basic_stringbuf.htm#basic_stringbuf"><code>basic_stringbuf</code></a><code>&lt;E, T&gt;</code> object, for example, is what you later extract from its input stream. When you position 
one stream of a <a href="FSTREAM_basic_filebuf.htm#basic_filebuf"><code>basic_filebuf</code></a><code>&lt;E, T&gt;</code> object, you position the other stream in tandem.</p>
<p>The public interface to template class <a href="STREAMBU_basic_streambuf.htm#basic_streambuf"><code>basic_streambuf</code></a> supplies the operations common to all stream buffers, 
however specialized. The protected interface supplies the operations needed for a specific representation of a stream to 
do its work. The protected virtual member functions let you tailor the behavior of a derived stream buffer for a specific 
representation of a stream. Each of the derived stream buffers in the Standard C++ library describes how it specializes 
the behavior of its protected virtual member functions. Documented here is the <b>default behavior</b> for the base class, 
which is often to do nothing.</p>
<p>The remaining protected member functions control copying to and from any storage supplied to buffer transmissions to 
and from streams. An <a name="input buffer"><b>input buffer</b></a>, for example, is characterized by:</p>
<ul>
<li><a href="STREAMBU_basic_streambufCCeback.htm#basic_streambuf::eback"><code>eback</code></a><code>()</code>, a pointer to the beginning of the buffer </li>
<li><a href="STREAMBU_basic_streambufCCgptr.htm#basic_streambuf::gptr"><code>gptr</code></a><code>()</code>, a pointer to the next element to read </li>
<li><a href="STREAMBU_basic_streambufCCegptr.htm#basic_streambuf::egptr"><code>egptr</code></a><code>()</code>, a pointer just past the end of the buffer </li>
</ul>
<p>Similarly, an <a name="output buffer"><b>output buffer</b></a> is characterized by:</p>
<ul>
<li><a href="STREAMBU_basic_streambufCCpbase.htm#basic_streambuf::pbase"><code>pbase</code></a><code>()</code>, a pointer to the beginning of the buffer </li>
<li><a href="STREAMBU_basic_streambufCCpptr.htm#basic_streambuf::pptr"><code>pptr</code></a><code>()</code>, a pointer to the next element to write </li>
<li><a href="STREAMBU_basic_streambufCCepptr.htm#basic_streambuf::epptr"><code>epptr</code></a><code>()</code>, a pointer just past the end of the buffer </li>
</ul>
<p>For any buffer, the protocol is:</p>
<ul>
<li>If the next pointer is null, no buffer exists. Otherwise, all three pointers point into the same sequence. (They can 
be safely compared for order.) </li>
<li>For an output buffer, if the next pointer compares less than the end pointer, you can store an element at the <a name="write position"><b>write 
position</b></a> designated by the next pointer. </li>
<li>For an input buffer, if the next pointer compares less than the end pointer, you can read an element at the <a name="read position"><b>read 
position</b></a> designated by the next pointer. </li>
<li>For an input buffer, if the beginning pointer compares less than the next pointer, you can put back an element at 
the <a name="putback position"><b>putback position</b></a> designated by the decremented next pointer. </li>
</ul>
<p>Any protected virtual member functions you write for a class derived from <code>basic_streambuf&lt;E, T&gt;</code> must cooperate 
in maintaining this protocol.</p>
<p>An object of class <code>basic_streambuf&lt;E, T&gt;</code> stores the six pointers described above. It also stores a <a href="LOCALE2_locale.htm#locale object"><b>locale object</b></a> in 
an object of type <a href="LOCALE2_locale.htm#locale"><code>locale</code></a> for potential use by a derived stream buffer.</p>
</body>
</html>

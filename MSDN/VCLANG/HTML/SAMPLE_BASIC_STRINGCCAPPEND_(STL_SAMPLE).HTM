<html>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css">
<head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>basic_string::append (STL Sample)</title></head>
<body bgcolor=white>

<h2><a name="_sample_stl_basic_stringCCappend">basic_string::append (STL Sample)</a></h2>
<p>The sample code below illustrates how to use the <code>basic_string::append</code> STL function in Visual C++.</p>
<p><b>Required Header: </b><br>
&lt;string&gt;</p>
<b>Prototype:</b><br>
<pre><code>
     string&amp; append(const basic_string&amp; _X);

     string&amp; append(const basic_string&amp; _X, size_type pos, size_type count);

     string&amp; append(const element_type *_S, size_type count);

     string&amp; append(const element_type *_S);

     string&amp; append(size_type count, element_type _C);

     string&amp; append(Iterator first, Iterator last);
</code></pre></p>
<p>Note: The class/parameter names in the prototype do not match the version in the header file. Some have been
modified to improve readability.</p>
<p><b>Description:</b><br>
 The append member functions of the basic_string append elements to the end of the string. The different forms of the function provide alternate ways to specify the source of the elements that will be appended.  The append functions return a reference to the string to which the elements were appended.  </p>
<p><b>Sample Code: </b></p>
<pre><code>//////////////////////////////////////////////////////////////////////
//
// Compile options needed: /GX
//
// bsappend.cpp : Illustrates how to use the string append member
//                            function.
//
// Functions:
//
//    string::append - appends a sequence of elements to the
//                           current string.
//////////////////////////////////////////////////////////////////////

#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std ;

void main()
{
    string str1("012");
    string str2("345");

    cout &lt;&lt; "str1 = " &lt;&lt; str1.c_str() &lt;&lt; endl;

    // append str2 to str1
    str1.append(str2);

    cout &lt;&lt; "str1 = " &lt;&lt; str1.c_str() &lt;&lt; endl;

    // append the last 2 items in str2 to str1
    str2 = "567";
    str1.append(str2, 1, 2);    // begin at pos 1, append 2 elements

    cout &lt;&lt; "str1 = " &lt;&lt; str1.c_str() &lt;&lt; endl;

    // append the first 2 items from an array of the element type
    char achTest[] = {'8', '9', 'A'};
    str1.append(achTest, 2);

    cout &lt;&lt; "str1 = " &lt;&lt; str1.c_str() &lt;&lt; endl;

    // append all of a string literal to str1
    char szTest[] = "ABC";
    str1.append(szTest);

    cout &lt;&lt; "str1 = " &lt;&lt; str1.c_str() &lt;&lt; endl;

    // append one item of the element type
    str1.append(1, 'D');

    cout &lt;&lt; "str1 = " &lt;&lt; str1.c_str() &lt;&lt; endl;

    // append str2 to str1 using iterators
    str2 = "EF";
    str1.append (str2.begin(), str2.end());

    cout &lt;&lt; "str1 = " &lt;&lt; str1.c_str() &lt;&lt; endl;
}

 </code></pre>

<p>Program Output is:</p>

<pre><code>str1 = 012
str1 = 012345
str1 = 01234567
str1 = 0123456789
str1 = 0123456789ABC
str1 = 0123456789ABCD
str1 = 0123456789ABCDEF
</code></pre>

</body>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ Type Names</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>
<font face="verdana,arial,helvetica" size="2">
<h1><a name="_pluslang_c.2b2b_.type_names"></a><sup></sup>C++ Type Names</h1>
<p>
Synonyms for both fundamental and derived types can be defined using the <b>typedef</b> keyword. The following code illustrates the use of <b>typedef</b>:</p>
<pre><code>typedef unsigned char BYTE;&nbsp;&nbsp; // 8-bit unsigned entity.
typedef BYTE *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PBYTE;&nbsp; // Pointer to BYTE.

BYTE Ch;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declare a variable of type BYTE.
PBYTE pbCh;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declare a pointer to a BYTE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; variable.
</code></pre>
<p>
The preceding example shows uniform declaration syntax for the fundamental type <b>unsigned char</b> and its derivative type <b>unsigned char *</b>. The <b>typedef</b> construct is also helpful in simplifying declarations. A <b>typedef</b> declaration defines a synonym, not a new independent type. The following example declares a type name (<code>PVFN</code>) representing a pointer to a function that returns type <b>void</b>. The advantage of this declaration is that, later in the program, an array of these pointers is declared very simply.</p>
<pre><code>// Prototype two functions.
void func1();
void func2();

//&nbsp; Define PVFN to represent a pointer to a function that
//&nbsp;&nbsp; returns type void.
typedef void (*PVFN)();

...

// Declare an array of pointers to functions.
PVFN pvfn[] = { func1, func2 };

// Invoke one of the functions.
(*pvfn[1])();
</code></pre>
</font></BODY>
</HTML>

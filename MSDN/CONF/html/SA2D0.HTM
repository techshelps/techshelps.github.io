<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performance and Windows Sockets</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Performance and Windows Sockets</H2><p>Because Windows Sockets is just a transport protocol <I>interface</I> and not a protocol itself, it is able to achieve a very high level of performance. Well-written and optimized Windows Sockets applications and services typically perform much better than applications written to Named Pipes, NetBIOS, or other communication mechanisms. However, because Windows Sockets is so "close to the metal" of the transport protocol, it is also possible to write Windows Sockets applications and services which perform very poorly.</P>
<p>Excellent performance does not come free. Developers must spend some time understanding the performance characteristics of their applications, then making modifications to enhance performance. A good network analyzer is usually essential for network performance work, as the analyzer will indicate where the bottlenecks are and how efficiently the application is using the physical network. Also important are good benchmarks which both evaluate the important performance cases and provide consistent, reproducible results.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Classes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Understanding Classes</H2><p>Earlier in this article, I discussed a candle as an object. The candle had certain properties such as its color, length, width, etc. However, how is a candle created?</P>
<p>A candle is created by pouring molten wax into a mold (with a wick inside, of course). When the wax cools, you open the mold and out pops the candle. Using a mold, you can create many candles all with the same characteristics.</P>
<p>A <I>class</I> is, in effect, a mold. All objects are created from classes. When a class is defined, you specify what the properties are (color, height, width, position, etc.) and what the methods are. Objects are then created by <I>instantiating</I> them (a fancy word for pouring the wax into the mold and waiting for it to cool) from the class.</P>
<p>Let's take a quick look at how we can define a class. For the purposes of this example, I will return to the light switch example:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">DEFINE CLASS light AS custom
  status = "OFF"
  
  PROCEDURE LightSwitch
   IF this.status = "OFF"
     this.status = "ON"
   ELSE
     this.status = "OFF"
   ENDIF
  ENDPROC
ENDDEFINE</font></pre>
<p>This piece of code creates a class called LIGHT. Light has one property, called Status, which is initialized to OFF. The PROCEDURE code is a method which is attached to the class.</P>
<p>In effect, what we have just done, is defined what a "light" object will have and do.</P>
<p>We instantiate, or create, the object from the class using a command or function which says, basically, "create an object with the characteristics of the class and give it a name."</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">x = CREATEOBJECT("light")</font></pre>
<p>This code, for example, will create an object based on the class called "light" and give the object a name called X. Once we have run this code, we can access all the properties of the object as described before. For example...</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">? x.Status         &amp;&amp;Returns "OFF"
x.LightSwitch    &amp;&amp;Run method "lightswitch" 
                    &amp;&amp;defined in the class
? x.Status         &amp;&amp;After running lightswitch, 
                    &amp;&amp;this would return "ON"</font></pre></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Batching Updates and Insertions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Batching Updates and Insertions</H3><H4> </A>Batching Updates</H4><p>The following example demonstrates how to use a transaction in DAO to perform multiple updates in a batch. It uses three pass-through queries in a transaction to transfer money from a savings account to a checking account. The application (the client) sends queries and updates to the server and retrieves the data it needs.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub TransferFunds ()
Dim MyWS As Workspace, MyDB As Database, MyQuery As QueryDef

On Error GoTo TransferFailed
    
Set MyWS = DBEngine.Workspaces(0)
Set MyDB = MyWS.OpenDatabase("somedb.mdb")
MyWS.BeginTrans                ' Begin transaction.
' Create temporary pass-through query.
Set MyQuery = MyDB.CreateQueryDef("")
MyQuery.Connect = "ODBC;DSN=Bank;UID=teller;DATABASE=access"
MyQuery.ReturnsRecords = False
MyQuery.SQL = "UPDATE Accounts SET Balance = Balance - 100<BR> _WHERE AccountID = 'SMITH_SAV'"
MyQuery.Execute                ' Subtract from savings account.
MyQuery.SQL = "UPDATE Accounts SET Balance = Balance + 100<BR> _WHERE AccountID = 'SMITH_CHK'"
MyQuery.Execute                ' Add to checking account.
MyQuery.SQL = "INSERT INTO LogBook (Type, Source, Destination,<BR> _Amount) VALUES ('Transfer', 'SMITH_SAV', 'SMITH_CHK', 100)"
MyQuery.Execute                ' Log transaction.
MyWS.CommitTrans                  ' Commit transaction.
MyDB.Close
Exit Sub

TransferFailed:
    MsgBox Error$
    MyWS.Rollback        ' If one operation fails, roll them all back.
    Exit Sub
End Sub</font></pre>
<p>Note the use of the <B>CreateQueryDef</B> method to create a temporary pass-through query. This technique introduces the minimum possible overhead for the Jet database engine, while still making use of transactions transparently through Microsoft Basic. However, it limits functionality to what the server provides, and it can't be as easily parameterized.</P>
<H4> </A>Batching Insertions</H4><p>If your application provides data-entry forms for multiple records of data, such as an order entry system, you can improve performance and robustness by saving new records in a local holding table and then transferring batches of records from the holding table to the server all at once within a transaction. </P>
<p>To insert a batch of records on a server using a transaction:</P>
<ol><li>Create empty local tables containing the same fields as your remote tables.</li>
<li>Create a data-entry form based on these local tables.</li>
<li>On the form, create a command button labeled "Post Records" for sending records to the server.</li>
<li>Create an event procedure for the button's Click event that copies the local records to the server tables and deletes the records from the local tables. The event procedure should perform all insertions and deletions within a transaction.</li>
<p>For example, suppose you have an Orders form containing an Order Details subform based on two local tables &mdash; LclOrders and LclOrderDetails. The user enters a new order and a group of detail records in the subform. When the user clicks the Post Records command button on the Orders form, the following procedure is executed:</P>
<P></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub PostRecords_Click ()
    Dim MyWS As Workspace, MyDB As Database
    On Error GoTo TransferFailed
    
    Set MyWS = DBEngine.Workspaces(0)
    Set MyDB = MyWS.OpenDatabase("somedb.mdb")

    MyWS.BeginTrans                ' Begin transaction.
    MyDB.Execute "INSERT INTO RmtOrdersEmpty SELECT * <BR>     _FROM LclOrders", dbFailOnError
    MyDB.Execute "INSERT INTO RmtOrderDetailsEmpty SELECT *<BR>     _FROM LclOrderDetails", dbFailOnError
    MyDB.Execute "DELETE FROM LclOrders"
    MyDB.Execute "DELETE FROM LclOrderDetails"
    MyWS.CommitTrans            ' Commit transaction.
    MyDB.Close
    ...                        ' Clear form for next order entry.
    Exit Sub

TransferFailed:
    MsgBox Error$
    MyWS.Rollback   ' If one operation fails, roll them all back.
    Exit Sub
End Sub</font></pre></OL>
<p>This example clears the data entry form after deleting the records from the local tables to present the user with a blank form for the next entry. In addition, the dbFailOnError option is used with the two append queries so that an error occurs if any part of either query fails. The error handler then rolls back any changes made.</P>
<p>This procedure doesn't insert the records directly into the tables on the server. RmtOrdersEmpty and RmtOrderDetailsEmpty aren't the remote tables; instead, they are the following queries, which are based on the attached remote tables but return no records:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">SELECT * FROM RmtOrders WHERE False
SELECT * FROM RmtOrderDetails WHERE False</font></pre>
<p>Inserting records into empty queries on attached remote tables provides the fastest possible speed, similar to opening a recordset using the <B>OpenRecordset</B> method with the dbAppendOnly option.</P></BODY></HTML>

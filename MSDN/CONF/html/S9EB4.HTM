<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Function Table</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Security Function Table</H2><p>The Security Function Table is an array of function pointers which are defined in the include file, SSPI.H. The function names correspond to the interface specification for SSPI.</P>
<p>The definition of the Security Function Table is shown below:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">typedef struct _SECURITY_FUNCTION_TABLE_W {
 unsigned long      dwVersion;
 ENUMERATE_SECURITY_PACKAGES_FN_W EnumerateSecurityPackagesW;
 void SEC_FAR *      Reserved1;
// QUERY_CREDENTIALS_ATTRIBUTES_FN_W QueryCredentialsAttributesW;
 ACQUIRE_CREDENTIALS_HANDLE_FN_W  AcquireCredentialsHandleW;
 FREE_CREDENTIALS_HANDLE_FN   FreeCredentialHandle;
 void SEC_FAR *      Reserved2;
 INITIALIZE_SECURITY_CONTEXT_FN_W InitializeSecurityContextW;
 ACCEPT_SECURITY_CONTEXT_FN   AcceptSecurityContext;
 COMPLETE_AUTH_TOKEN_FN    CompleteAuthToken;
 DELETE_SECURITY_CONTEXT_FN   DeleteSecurityContext;
 APPLY_CONTROL_TOKEN_FN    ApplyControlToken;
 QUERY_CONTEXT_ATTRIBUTES_FN_W  QueryContextAttributesW;
 IMPERSONATE_SECURITY_CONTEXT_FN  ImpersonateSecurityContext;
 REVERT_SECURITY_CONTEXT_FN   RevertSecurityContext;
 MAKE_SIGNATURE_FN     MakeSignature;
 VERIFY_SIGNATURE_FN     VerifySignature;
 FREE_CONTEXT_BUFFER_FN    FreeContextBuffer;
 QUERY_SECURITY_PACKAGE_INFO_FN_W QuerySecurityPackageInfoW;
 void SEC_FAR *      Reserved3;
 void SEC_FAR *      Reserved4;
 QUERY_SECURITY_CONTEXT_TOKEN_FN  QuerySecurityContextToken;
} SecurityFunctionTableW, SEC_FAR * PSecurityFunctionTableW;
</font></pre>
<p>Note that Windows&nbsp;NT 4.0 does not support the QueryCredentialsAttributes function and therefore is commented out of the function table. This function will be supported in a future release of Windows&nbsp;NT.</P>
<p>Also note that SSPI in Windows&nbsp;NT 4.0 does not provide encryption/decryption interfaces because of legal restrictions on such interfaces. Microsoft is planning to extend the interface to provide encryption interfaces in a future release of Windows&nbsp;NT.</P>
<H3> </A>Memory Use, Security Buffers, and Descriptor</H3><p>Most of the SSPI functions have variable length arguments for the caller (application) to provide message data to the security package and for the security package to return security data to the caller. SSPI APIs use a parameter type, BufferDescriptor, to define the size and location of the variable length data. Security buffers are used by the caller, for example, to pass message data to the security package, or to receive an output security token.</P>
<p>Security buffers can be passed in as an array of buffers. The security buffer descriptor identifies the number of buffers and starting address of the buffer array. Each security buffer also has a buffer type field to identify the contents of the buffer.</P>
<p>The definition of security buffers, buffer descriptors, and buffer data types from SSPI.H are shown below:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">//
// SecBuffer
//
// Generic memory descriptors for buffers passed in to the security
// API
//

typedef struct _SecBuffer {
 unsigned long cbBuffer;    // Size of the buffer, in bytes
 unsigned long BufferType;   // Type of the buffer (below)
 void SEC_FAR * pvBuffer;   // Pointer to the buffer
} SecBuffer, SEC_FAR * PSecBuffer;

typedef struct _SecBufferDesc {
 unsigned long ulVersion;   // Version number
 unsigned long cBuffers;    // Number of buffers
#ifdef MIDL_PASS
 [size_is(cBuffers)]
#endif
 PSecBuffer pBuffers;    // Pointer to array of buffers
} SecBufferDesc, SEC_FAR * PSecBufferDesc;

#define SECBUFFER_VERSION   0

#define SECBUFFER_EMPTY    0 // Undefined, replaced by provider
#define SECBUFFER_DATA    1 // Packet data
#define SECBUFFER_TOKEN    2 // Security token
#define SECBUFFER_PKG_PARAMS  3 // Package specific parameters
#define SECBUFFER_MISSING   4 // Missing Data indicator
#define SECBUFFER_EXTRA    5 // Extra data
#define SECBUFFER_STREAM_TRAILER 6 // Security Trailer
#define SECBUFFER_STREAM_HEADER  7 // Security Header

#define SECBUFFER_ATTRMASK   0xF0000000
#define SECBUFFER_READONLY   0x80000000 // Buffer is read-only
</font></pre>
<p>Each time a security API is called that takes a SecBufferDesc parameter, it should be setup with one or more SecBuffers. For example, there can be two security buffers, one that contains input message data and the other for the output opaque security token returned by the security package. The order of security buffers in the security buffer descriptor is not important but they should be tagged with appropriate type. Also, an input buffer that can not be modified by the security package should additionally be tagged as read only. </P>
<p>The size of the output buffer that is expected to contain the security token is important. An application can find the maximum token size for a security package during initial setup. The call to EnumerateSecurityPackages returns an array of pointers to security package information. The security package information structure contains maximum token size value. In the example code, the information is in SecPkgInfo.cbMaxToken. It can also be obtained later on using QuerySecurityPackageInfo.</P>
<p>The application initializes the buffer pointers and sizes in the buffer description to indicate where message data and other information may be found. </P>
<p>The example below shows how to initialize an array of security buffers. This particular case shows how input security buffers are initialized by the server-side of a connection in a call to AcceptSecurityContext. Note that the last buffer contains the opaque security token received by the client and the SECBUFFER_READONLY flag is also set.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">SecBuffer  Buffers[3];<BR>SecBufferDesc BufferDesc;<BR>...<BR>BufferDesc.ulVersion = SECBUFFER_VERSION;<BR>BufferDesc.cBuffers = 3;<BR>BufferDesc.pBuffers = &amp;Buffers;

Buffers[0].cbBuffer = sizeof(Protocol_Header);<BR>Buffers[0].BufferType = SECBUFFER_READONLY | SECBUFFER_DATA;<BR>Buffers[0].pvBuffer = pHeader;<BR><BR>Buffers[1].cbBuffer = pHeader-&gt;MessageSize;<BR>Buffers[1].BufferType = SECBUFFER_DATA;<BR>Buffers[1].pvBuffer = pMessage;<BR><BR>Buffers[2].cbBuffer = pHeader-&gt;TrailerSize;<BR>Buffers[2].BufferType = SECBUFFER_READONLY | SECBUFFER_TOKEN;<BR>Buffers[2].pvBuffer = pSecurityTrailer;
</font></pre></BODY></HTML>

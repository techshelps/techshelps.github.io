<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Quick Review</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Quick Review</H3><p>There are only two FoxPro functions you need to think about to retrieve another application's objects. Once you have obtained the object, you can immediately begin to access properties and methods of the object. </P>
<H4> </A>CREATEOBJECT( )</H4><p>This command creates an object from a class definition or an OLE object. It is also used to create objects of built in FoxPro or user-defined classes. Because this session is about creating OLE objects, I will intentionally leave out the syntax and descriptions of creating other types of classes to avoid confusion. For consistency with Microsoft documentation, much of this information in this section is derived directly from FoxPro's help file. </P>
<p>Syntax: </P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">    &lt;memvar&gt; = CREATEOBJECT(cClassName)</font></pre>
<p><B>cClassName:</B> Specifies the OLE object from which the new object is created.</P>
<p>FoxPro will search for the class name you specify in the following order:</P>
<P>1.    Microsoft Visual FoxPro&trade; base classes.</P>
<P>2.    User-defined class definitions in memory in the order they were loaded.</P>
<P>3.    Classes in the current program. </P>
<P>4.    Classes in .VCX class libraries opened with SET CLASSLIB.</P>
<P>5.    Classes in procedure files opened with SET PROCEDURE.</P>
<P>6.    Classes in the Visual FoxPro program execution chain.</P>
<P>7.    The Windows Registry (for OLE objects).</P>
<p>OLE objects are created using the following syntax for cClassName:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">    ApplicationName.Class</font></pre>
<p>For example, to create a Microsoft Excel object using OLE Automation, you can use the following syntax:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">    xl = CREATEOBJECT("Excel.Application")</font></pre>
<p>When this code is run, Microsoft Excel is started but it is not visible. You will not see Microsoft Excel if you ALT+TAB through all your running applications, nor will you see it if you bring up the Task Manager with CTRL+ESC. Note that if Microsoft Excel is already running, another separate instance will be created when you execute this command. Also note that Microsoft Word functions a little differently, as will be explained in the "FoxPro 3.0 OLE Automation" section. </P>
<H4> </A>GETOBJECT()</H4><p>This command activates an OLE automation object and creates a reference to the object.</P>
<p>Syntax: </P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">    GETOBJECT([cFileName [, cClassName]])</font></pre>
<p><B>cFileName: </B>Specifies the full path and name of the file to activate. The application does not need to be specified, because the OLE dynamic link libraries determine the application to start based on the file name you provide.</P>
<p>For example, the following code launches Microsoft Excel, opens a file named BUDGET.XLS, and creates a reference through an object memory variable named xlBudget:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">xlBudget = GETOBJECT("C:\EXCEL\WORK\BUDGET.XLS")</font></pre>
<p><B>cClassName:</B> Specifies the class name of the object to retrieve. Some applications can store more than one object type in the same file, allowing you to use the class name to specify the object to activate. For example, if a word processing application stores its documents, macro definitions, and ToolBar objects in the same file, you can create a reference to the document file with the following command:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">mDocFile = GETOBJECT("C:\WRDPROC\MYDOC.DOC", "WrdProc.Document")</font></pre>
<p>If you specify the empty string ("") for cFileName, GETOBJECT( ) creates a reference to the currently active object of the class you include. For example, if Microsoft Excel is running, you can create a reference to it with the following command:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">xl = GETOBJECT("", "Excel.Application")</font></pre>
<p>If Microsoft Excel is not running, a trappable error will be generated. Trapping the error and resorting to the CREATEOBJECT() function is a common technique to test if an application is already running. An alternative technique is to use dynamic data exchange (DDE) to establish a link with the server application on the System topic, which all DDE applications support. If the link is successfully established, the application is running. This concept is covered in more detail in the "FoxPro 3.0 OLE Automation" section. </P></BODY></HTML>

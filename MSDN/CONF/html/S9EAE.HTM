<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Windows NT Security Support Provider Interface</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Microsoft Windows&nbsp;NT Security Support Provider Interface</H1><p><B>White Paper</B></P>
<P>&copy; 1996 Microsoft Corporation. All rights reserved.<BR><BR>The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</P>
<P>This White Paper is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</P>
<P>Microsoft, MS-DOS, Win32, Windows, and Windows NT are registered trademarks and the BackOffice logo is a trademark of Microsoft Corporation in the United States and/or other countries.</P>
<P>Macintosh is a registered trademark of Apple Computer, Inc.</P>
<P>Other product or company names mentioned herein may be the trademarks of their respctive owners.</P>
<P>1196</P>
<P>Abstract</P>
<p>Microsoft Security Support Provider Interface (SSPI) is the well-defined common API for obtaining integrated security services for authentication, message integrity, message privacy, and security quality of service for any distributed application protocol. Application protocol designers can take advantage of this interface to obtain different security services without modification to the protocol itself.</P>
<p>This white paper describes how SSPI APIs can be used directly, as well as through other application interfaces, such as DCOM, secure RPC, WinSock 2.0, and WinInet.</P>
<P>Introduction</P>
<p>Microsoft's Security Support Provider Interface (SSPI) is the Win32 interface between transport level applications and network security service providers. The interface is not specific to the Microsoft Windows&nbsp;NT network operating system; it is also supported by the Microsoft RPC run time for the <BR>Windows 95 operating system, as well as the RPC run time for MS-DOS&reg;, Windows 3.11, and Macintosh operating system.</P>
<p>This paper describes Microsoft SSPI and discusses the following issues:</P>
<UL><LI>How to use SSPI to enhance security capabilities of a distributed application.</LI><LI>How to develop distributed applications using existing communication mechanisms like the distributed version of the Component Object Model (DCOM), Secure RPC, WinSock, and WinInet, and have integrated security capabilities from Windows&nbsp;NT.</LI></UL><p>To unfold the SSPI story, the paper will start with a review of the SSPI APIs and how to integrate Windows&nbsp;NT authentication, message integrity, and privacy into distributed applications. Then the paper will look at how application developers use the DCOM application framework and authenticated RPC to take advantage of SSPI services from higher-level interfaces. Finally, the paper will look at other examples of how SSPI security services are available using application level interfaces such as WinSock 2.0 and WinInet.</P>
<p>The diagram below shows where the SSPI security services fit into the overall distributed application architecture.</P>
<P><img src="39513.gif"></P>
<P>Figure 1: Where does SSPI fit in the Windows&nbsp;NT Security Model?</P>
<p>The architecture diagram shows that application developers have many options today for building distributed applications. The SSPI provides an abstraction layer between application-level protocols and security protocols. But there are many ways to take advantage of integrated security protocols and one approach might be better than another to fit the application design. Here are some of the ways to use SSPI services:</P>
<UL><LI>Traditional socket-based applications may choose to call SSPI routines directly and implement the application protocol that carries SSPI security-related data using request/response messages.</LI><LI>DCOM applications provide the best level of integrated security features. Applications can use DCOM to call security options which are implemented using authenticated RPC and SSPI at lower levels. Applications do not call SSPI APIs directly.</LI><LI>WinSock 2.0 extends the Windows Sockets interface to allow transport providers to expose security features. This approach integrates the SSPI security provider into the network stack and provides both security and transport services through a common interface.</LI><LI>WinInet is an application protocol interface that is designed to support Internet security protocols, such as Secure Sockets Layer (SSL), over Internet protocols. The implementation of WinInet security support uses the SSPI interface to the Secure Channel (Windows NT implementation of SSL) security provider.</LI></UL><p>The organization of the rest of the document is designed to help both application developers and security support provider writers understand how to use SSPI. First the paper will review the SSPI APIs and the security provider concepts. Then the paper will describe how SSPI APIs are used to establish secure connections, with descriptions of the SSPI-related samples in the Windows&nbsp;NT SDK. </P>
<P>SSPI API</P>
<p>The Security Support Provider Interface (SSPI) provides a common interface between transport-level applications, such as Microsoft RPC or a file system redirector, and security providers, such as Windows&nbsp;NT Distributed Security. SSPI provides a mechanism by which a distributed application can call one of several security providers to obtain an authenticated connection without knowledge of the details of the security protocol. </P>
<p>SSPI consists of following APIs:</P>
<P CLASS="num">Credential Management APIs&mdash;Credential Management APIs provide access to credentials (password data, tickets, and so on) of a principal or free such access. The APIs are:</P>
<P>AcquireCredentialsHandle&mdash;This method acquires a handle to the reference credentials.</P>
<P>FreeCredentialsHandle&mdash;This method releases a credential handle and associated resources.</P>
<P>QueryCredentialAttributes&mdash;This method allows queries on various credential attributes like associated name, domain name, and so forth.</P>
<P CLASS="num">Context Management APIs&mdash;Context management APIs provide methods for creating and using security contexts. The contexts are created on both the client and the server side of a communication link. These contexts can then be used later with the message support APIs. The APIs are:</P>
<P>InitializeSecurityContext&mdash;Initiates a security context by generating an opaque message (security token) that can be passed to the server.</P>
<P>AcceptSecurityContext&mdash;Creates a security context using the opaque message received from the client.</P>
<P>DeleteSecurityContext&mdash;Frees a security context and associated <BR>resources.</P>
<P>QueryContextAttributes&mdash;Allows queries on various context attributes.</P>
<P>ApplyControlToken&mdash;Applies a supplemental security message to an existing security context.</P>
<P>CompleteAuthToken&mdash;Completes an authentication token, since some protocols, like DCE RPC, need to revise the security information once the transport has updated some message fields.</P>
<P>ImpersonateSecurityContext&mdash;Attaches the client's security context as an impersonation token to the calling thread.</P>
<P>RevertSecurityContext&mdash;Ceases impersonation and defaults the calling thread to its primary token.</P>
<P CLASS="num">Message Support APIs&mdash;Message support APIs provide communication integrity and privacy services based on a security context. The APIs are:</P>
<P>MakeSignature&mdash;Generates a secure signature based on a message and a security context.</P>
<P>VerifySignature&mdash;Verifies that the signature matches a received message.</P>
<P CLASS="num">Package Management APIs&mdash;Package Managment APIs provide services for different security packages that the security provider supports. The APIs are:</P>
<P>EnumerateSecurityPackages&mdash;Lists available security packages and their capabilities.</P>
<P>QuerySecurityPackageInfo&mdash;Queries an individual security package for its capabilities.</P>
<p>SSPI does not currently provide any public interfaces for encryption/decryption functionality. Future versions of the SSPI will make message support routines for encryption available.</P>
<p>A <I>security provider</I> is a dynamic-link library that implements the Security Support Provider Interface and makes one or more <I>security packages</I> available to applications. A security package maps the SSPI functions to an implementation of the security protocol specific to that package, such as NTLM, Kerberos, or SSL. Security packages are sometimes referred to as "SSPs," such as the "NTLM SSP." The name of the security package is used in the initialization step to identify a specific package.</P>
<p>The Security Support Provider Interface allows an application to use any of the available security packages on a system without changing the interface to use security services. SSPI does not establish logon credentials because that is generally a privileged operation handled by the operating system.</P>
<p>An application can use the package management functions to list the security packages available and select one to support its needs. The application then uses the credential management functions to obtain a handle to the credentials of the user on whose behalf they are executing. With this handle, the application can use the context management functions to create a security context to a service. A <I>security context</I> is an opaque data structure that contains the security data relevant to a connection, such as a session key, the duration of the session, and so on. Finally, the application uses the security context with the message support functions to ensure message integrity and privacy during the connection.</P></BODY></HTML>

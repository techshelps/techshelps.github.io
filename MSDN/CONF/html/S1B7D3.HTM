<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add-Ins for Microsoft Visual Basic 4.0</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Add될ns for Microsoft Visual Basic 4.0</H1><P CLASS="byl">Valor Whisler<BR>President, Semiotix Systems</P>
<p>June 27, 1995</P>
<P CLASS="bio">Valor Whisler is president of Semiotix Systems, a Colorado corporation in the business of developing engineering tools for Visual Basic. Semiotix is the publisher of VB AppFramework, an add됼n that acts as a repository for Visual Basic code and object templates and styles. Whisler subscribes to the theory that OLE will provide the platform for the creation of extremely sophisticated and complex applications by supporting the assembly of commercial and custom component objects.</P>
<P CLASS="bio">As Whisler relates the story, after seeing Visual Basic for the first time a couple of years ago, a colleague lamented that the days of the programmer were over and the days of the "application designer" were just beginning. His point was well taken: Tools such as Visual Basic add됼ns will take the software industry a step closer to this prediction.</P>
<H2>Abstract</H2><p>Microsoft&reg; Visual Basic&reg; version 4.0 exposes its development environment through a set of objects collectively known as the Visual Basic Integrated Development Environment, or Visual Basic IDE. Using these objects, programmers can obtain information about projects and manipulate those projects at design time. To facilitate such interaction, programmers also can create add됼ns, which can provide any level of sophistication and interface. In their simplest form add됼ns can augment tedious or repetitive tasks. In more sophisticated incarnations, add됼ns can provide complete modeling front ends that generate forms or entire application frameworks. In much the same way that diverse vendors have come forward to supply custom controls for Visual Basic, vendors also can be expected to create a multitude of add됼ns. The result will be an environment that takes software developers further from the role of a programmer and closer to that of an "application designer."</P>
<H2>The Synergy of Add될ns</H2><p>Everyone has read phenomenal predictions regarding what computing will look like in the years to come. Every business in the software industry is pressured to bring increasingly sophisticated programs to completion faster.</P>
<p>In response, Microsoft has equipped the Visual Basic programming system with a variety of high-level services for rapid application development. As the product has evolved, its performance and capabilities have increased dramatically. Microsoft designed Visual Basic as an open design environment for which third-party vendors could produce extensions. Up to now such extensions have appeared in the form of custom controls, including Visual Basic extensions (VBXs), and OLE Controls, both of which are available from many generalized, or application-specific suppliers. Visual Basic enables developers to exploit this technology by providing a platform incorporating diverse components into a homogeneous solution.</P>
<p><img src="60060.gif"></P>
<P CLASS="cap">Figure 1. Visual Basic interaction with Add될ns and Custom Controls</P>
<p>Visual Basic add됼ns and other next-generation tools will provide a new direction for extending the product's capabilities and will enable software developers to create an infrastructure that will profoundly change the way they work. Such tools will "drive" Visual Basic to perform increasingly complex and sophisticated tasks, transforming application development just as macros changed the way spreadsheets are used&mdash;but with far greater potential.</P>
<H3>What Is an Add될n?</H3><p>In Visual Basic 4.0, the development environment is exposed as an OLE object that can be easily manipulated by specialized OLE servers called add됼ns. They are considered specialized because an OLE server designed as a Visual Basic add됼n must have two predefined methods: <I>ConnectAddIn</I>, which informs an add됼n that Visual Basic is using it, and <I>DisconnectAddIn</I> which informs an add됼n that Visual Basic is no longer using it. Once it is connected to Visual Basic, an add됼n can obtain information about the development environment and manipulate much of that environment.</P>
<p>Any language capable of creating an OLE server can create Visual Basic add됼ns. Even better, the add됼ns can be created by Visual Basic itself.</P>
<h3>Strategic Uses of Add될ns</H3><p>Looking back at Visual Basic 1.0, few developers would have predicted the robust and diverse set of add됼ns available to complement Visual Basic 4.0. Similarly, developers might find it hard to predict what such capabilities will ultimately mean&mdash;but they might enjoy trying. In their simplest use, add됼ns can automate development tasks in the same way macros automate spreadsheet tasks. Such automation may materialize in the form of wizards or through an interface designed to suit a specific audience. In more sophisticated implementations, add됼ns can provide complete front ends, enabling developers to model systems in any number of ways. Such models can then be used to generate a Visual Basic project and supporting code. The following are a few of the possibilities:</P>
<ul><li><B>Wizards.</B> Wizards will provide easy-to-use wrappers for automating tasks, from the simple and tedious to the sophisticated and complex.</LI><li><B>Template Libraries.</B> Add됼ns will create and deliver libraries of Visual Basic-based object templates that in turn can be added to any Visual Basic project to accelerate development. Libraries also will be used to provide complete application frameworks<I>. </I>The <I>VB AppFramework</I> (AFW) add됼n provides such capabilities. Through it, developers can capture templates from existing objects and use wizards to deliver them to other projects.</LI><li><B>Style Libraries.</B> Add됼ns will help developers create style libraries in much the same way they help them create object templates. Styles are collections of object properties, which can be captured from existing objects and applied repeatedly to other objects. AFW provides these capabilities as well<I>.</I></LI><li><B>Paperless Standards.</B> Libraries of objects and styles will help to create paperless standards. Up to now, printed guidelines have been used to defined the appearance of a form or the way code is commented. With add됼ns, developers will retrieve such information from libraries and add it to their projects, helping to ensure the consistent and rapid use of the standards.</LI><li><B>Forms Generators.</B> These add됼ns will create forms from scratch or accelerate the process of laying out controls on forms. They also will automatically add custom controls and form templates to projects.</LI><li><B>CASE Tools.</B> These tools will enable the graphical modeling of business processes and then will automatically generate code and interfaces. Such tools may present a building-block approach, an outline approach, or any other approach that can be tailored to a specific audience.</LI><li><B>Data Modeling Tools. </B>Similar to the CASE tools, this group of add됼ns will address a database-specific set of problems. Project frameworks will be generated automatically after modeling them in high-level interfaces provided by the add됼n.</LI><li><B>Source Code Control.</B> An add됼n can be constructed to be informed of changes to a Visual Basic project, such as an addition, a save, or a removal of files. Using such capabilities, source code control systems can provide a much tighter level of integration than was possible before<I>. </I>Microsoft Visual SourceSafe&trade; will be provided as an add됼n to Visual Basic.</LI><li><B>Expert Systems.</B> This group of add됼ns will provide expert interfaces to Visual Basic projects. They might help developers audit projects by seeking ways to optimize resource usage, enforce code and interface standards, or examine code for preferred algorithms.</LI></UL></SPAN><H2> </A>The Visual Basic Integrated Development Environment </H2><p>As noted earlier, the set of objects and events collectively exposed by Visual Basic is known as the <I>Visual Basic Integrated Development Environment</I>, or Visual Basic IDE. This set of objects and events is made available to add됼ns through an object library. To use this library, developers should add the reference <I>Microsoft Visual Basic Development Library</I> (VBExt16.olb or VBExt32.olb) to Visual Basic using the References dialog under the Tools menu. </P>
<p>The Visual Basic IDE provides four categories of objects and events: AddInMenu objects, ActiveProject objects, ConnectAddIn and DisconnectAddIn events, and FileControl events.</P>
<h3> </A>AddInMenu Objects</H3><p>The AddInMenu objects enable the add됼n to create and remove menus and submenus. In Visual Basic, these custom menu items reside directly under the Add될ns menu.</P>
<h3> </A>ActiveProject Objects</H3><p>The ActiveProject objects provide capabilities for complete interaction with forms and controls. They also provide the capability to add blocks of code to any code window.</P>
<h3> </A>ConnectAddIn and DisconnectAddIn Events</H3><p>The ConnectAddIn and Disconnect AddIn events are required by an OLE server to be recognized by Visual Basic as an add됼n. Visual Basic calls these events, respectively, when an add됼n is connected or disconnected from a project. These events are used to initialize and terminate the environment provided by the add됼n.</P>
<h3> </A>FileControl Events</H3><p>The FileControl events are a set of events that an add됼n may optionally expose to Visual Basic. If they are found within a class module, Visual Basic will call them in response to various file activities.</P>
<H2> </A>Understanding the Object Model</H2><p>The Visual Basic IDE exposes itself as a set of objects in a specific hierarchy, structured to be consistent with the organization of other OLE objects, such as the DAO object library. Visual Basic IDE objects come in two primary types: <I>collection</I> and <I>member</I>. A collection is an object containing a set of related objects.  The objects found within a collection are referred to as members. Objects are manipulated by setting their <I>properties</I> and invoking their <I>methods</I>.</P>
<p>Every collection object contains the properties <I>Application</I>, <I>Parent</I>, and <I>Count</I> as well as the method <I>Item</I>. Some collections may have additional methods. In contrast to the organization of an array, member order within a collection is not guaranteed. For this reason, the preferred method of iteration through a collection is to use the For-Each construct. The properties and methods of member objects vary from object to object.</P>
<p>The following figure shows some of the collection and member objects exposed by the Visual Basic IDE. The hierarchy depicted in the figure would read as follows:</P>
<ul><li>The Application (Visual Basic) contains an ActiveProject.</LI><li>The ActiveProject contains a collection of Components<I>. There is one Component object for every form, code module, class module, or resource file in the project.</I></LI><li>The ActiveProject contains an ActiveForm.</LI><li>The ActiveForm contains a collection of ControlTemplates<I>. There is one ControlTemplate object for every control and menu on the form</I>. </LI><li>The ActiveForm contains a collection of Properties<I>. There is one Property object for every property exposed by the form</I>. </LI><li>Each ControlTemplate contains a collection of Properties<I>. There is one Property object for every property exposed by a control.</I></LI></UL></SPAN><p><img src="60061.gif"></P>
<P CLASS="cap">Figure 2. Some Collection and Member Objects exposed by Visual Basic</P>
<h3> </A>The Object Browser</H3><p>The object browser lists the properties and methods for each object contained within the library,  enabling developers to examine the contents of an object library. Appearing in the form of a dialog, the object browser is a particularly useful tool. It is easy to access, and the information it reveals comes directly from the object rather than from a text or help file. For this reason, developers can be confident that the information listed corresponds directly to the objects, properties, and methods that are exposed.</P>
<h3> </A>Object References</H3><p>Objects contained within the Visual Basic IDE can be manipulated from within an add됼n using object variables. These are variables of the data type "object"&mdash;a collective term describing OLE objects in general. Using this "implicit object reference" approach, developers would create variables of general object types, also referred to as "late binding".  This is illustrated in the following example:</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim ThisProject As Object
Dim ThisForm As Object
Set ThisProject = VBInstance.ActiveProject
Set ThisForm = ThisProject.ActiveForm</font></pre>
<p>Developers also can create a variable of the specific type of object they intend to use. This "explicit object reference" approach, also called "late binding", provides a much more efficient method of referencing objects, because under this method the compiler does not need to resolve the object type before using it. Variables of specific object types would be created as shown: </P>

<pre><FONT FACE="Courier New" SIZE="3">Dim ThisProject As ProjectTemplate
Dim ThisForm As FormTemplate 
Set ThisProject = VBInstance.ActiveProject
Set ThisForm = ThisProject.ActiveForm</font></pre>
<p>To handle the case in which identically named collections or members reside in different object libraries, developers can preface the object reference with the name of the library in which the object reference resides. For example, an object named Properties is used in the Visual Basic IDE and in the DAO libraries. The following code segment illustrates how to resolve this conflict:</P>

<pre><FONT FACE="Courier New" SIZE="3">Public TheseIDEProperties As VBIDE.Properties
Public TheseDAOProperties As DAO.Properties</font></pre>
<H2> </A>Developing an Add될n</H2><p>An add됼n is a special kind of OLE server that contains predefined events called by Visual Basic. As part of add됼n creation, developers must inform Visual Basic of the add됼n by adding entries to the VB.INI file. Developers also must provide an interface, typically a set of menus, for the add됼n.  </P>
<p>An add됼n has the following attributes:</P>
<ul><li>It is an OLE server with ConnectAddIn and DisconnectAddIn events.</LI><li>It provides an entry in the [add됼ns16] or [add됼ns32] section of VB.INI.</LI><li>It provides menus or some other interface when connected.</LI><li>If menus are provided, the add됼n responds to them through the public, predefined AfterClick event.</LI></UL></SPAN><h3> </A>Creating a Menu System</H3><p>The Application object (Visual Basic) provides the capabilities to create and remove menus for add됼ns. Each such menu item must be connected to a class object (an instance of a class module) contained within the add됼n. A class object referenced in this way must contain the AfterClick event, which will be called when the add됼n menu item is clicked. </P>
<p>The add됼n must manage its menus, including their creation, or Setup, and removal, or Cleanup, as illustrated by the following:</P>
<H4> </A>Setup</H4><OL>Declare object variables for menus.</LI><LI CLASS="OLI1">Declare object variables for event tokens that connect a menu to a class object.</LI><LI CLASS="OLI1">Create menus and submenus.</LI><LI CLASS="OLI1">Associate, or connect, menu items to class objects.</LI></OL></SPAN><H4> </A>Cleanup</H4><OL>Disassociate, or disconnect, class objects from menu items.</LI><LI CLASS="OLI1">Remove menus and submenus.</LI><LI CLASS="OLI1">Destroy object variables.</LI></OL></SPAN><h3> </A>Connecting to Visual Basic</H3><p>The Application object (Visual Basic) contains an object named AddInMenu, which is an instance of the Visual Basic Add될ns menu. AddInMenu contains a MenuItems collection representing all of the entries in the Add될ns menu. An add됼n can create and remove menu items using methods provided by the AddInMenu object. Each menu item that is to perform a task when clicked is connected to a class object contained within the add됼n.</P>
<p>The following code segment illustrates how an add됼n creates a top-level menu and two submenus:</P>

<pre><FONT FACE="Courier New" SIZE="3">'instances of class modules------------------------------
Public clsDataWizard        As New DataWizard
Public clsOptions           As New Options

'reference to the Visual Basic application---------------
Private ThisVBInstance      As VBIDE.Application

'primary menu -------------------------------------------
Private ToolMenu            As VBIDE.Menu

'sub-menu items------------------------------------------
Private DataMenuLine        As MenuLine
Private OptionsMenuLine     As MenuLine

'event tokens--------------------------------------------
Private DataEventToken      As Long
Private OptionsEventToken   As Long

Public Sub ConnectAddIn(VBInstance As Object)
    'store the application object, needed to disconnect--
    Set ThisVBInstance = VBInstance

    'set up main menu------------------------------------
    Set ToolMenu = VBInstance.AddInMenu.MenuItems.AddMenu("&amp;Tools")

    'set up sub-menus------------------------------------
    Set DataMenuLine = ToolMenu.MenuItems.AddMenu("&amp;Data Wizard")
    Set OptionsMenuLine = ToolMenu.MenuItems.AddMenu("&amp;Options")

    'hook menu items to class objects--------------------
    DataEventToken = DataMenuLine.ConnectEvents(clsDataWizard)  
    OptionsEventToken = OptionsMenuLine.ConnectEvents(clsOptions)  
End Sub</font></pre>
<p>Each class object must contain the AfterClick event. This event will be called when the menu item in the Visual Basic project is clicked, as illustrated in the following code segment:</P>

<pre><FONT FACE="Courier New" SIZE="3">'this public sub is called when the Options menu item is clicked
Public Sub AfterClick()
    frmOption.Show vbModal
End Sub</font></pre>
<h3> </A>Disconnecting from Visual Basic</H3><p>When the instance of Visual Basic supplying the Application object is exited, or when the add됼n is removed from the add됼ns dialog, the add됼n will receive a disconnect event. It is within this event that the add됼n should disassociate the class objects from the menu items and remove the menus themselves. These activities are illustrated by following code segment:</P>

<pre><FONT FACE="Courier New" SIZE="3">Public Sub DisconnectAddIn(Mode As Integer)
    'unhook menu items from class objects----------------
     DataMenuLine.DisconnectEvents DataEventToken
     OptionsMenuLine.DisconnectEvents OptionsEventToken

    'remove sub-menus------------------------------------
    ToolMenu.MenuItems.Remove DataMenuLine
    ToolMenu.MenuItems.Remove OptionsMenuLine

    'remove main menu------------------------------------
    ThisVBInstance.AddInMenu.MenuItems.Remove ToolMenu
End Sub</font></pre>
<H2> </A>Querying the Visual Basic IDE</H2><p>An add됼n can obtain information on Visual Basic by traversing the hierarchy of collection and member objects provided by the Visual Basic IDE. (For more detail on this hierarchy, refer to the Visual Basic documentation.) The Visual Basic IDE provides complete information on forms, controls, and menus, and some information on the components contained within the project. The Visual Basic IDE does not currently provide information about code contained within forms, code modules, or class modules.</P>
<p>As developers traverse the object hierarchy, additional objects&mdash;and, ultimately, properties&mdash;become available. The hierarchy begins with the Application object that was passed into the add됼n during the ConnectAddIn event. The add됼n should set a variable of type Object or VBIDE.Application to this incoming object. (For purposes of this discussion, the variable ThisVBInstance is assumed to be that object variable.) The add됼n can then create a fully qualified reference to any particular object and for convenience can set intermediate objects along the way.</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim ThisActiveForm As FormTemplate
Dim TheseControls  As ControlTemplates</font></pre>
<p>The following are fully qualified object references to the controls on a form:</P>

<pre><FONT FACE="Courier New" SIZE="3">Set TheseControls = ThisVBInstance.ActiveProject.ActiveForm.ControlTemplates</font></pre>
<p>The following is the same reference using an intermediate object:</P>

<pre><FONT FACE="Courier New" SIZE="3">Set ThisActiveForm = ThisVBInstance.ActiveProject.ActiveForm
Set TheseControls = ThisActiveForm.ControlTemplates</font></pre>
<p>The following table summarizes how Visual Basic IDE objects are used to perform various tasks and obtain information about the project. (Please note that object references have been shortened from the full reference that is actually required.)</P>
<p></P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="198pt" VALIGN="TOP"><COL WIDTH="117pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Task</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Uses Object</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Gets Object or Value</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get the active form</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ActiveProject.ActiveForm</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>FormTemplate</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get the active component</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ActiveProject.SelectedComponents.Item(0)</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Component</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get the selected controls</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ActiveForm.SelectedControlTemplates</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ControlTemplates <I>collection</I></P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get all controls</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ActiveForm.ControlTemplates</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ControlTemplates <I>collection</I></P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get all menus</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ActiveForm.ControlTemplates</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ControlTemplate of ClassName: Menu</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get all properties of a control</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ControlTemplate.Properties</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Properties <I>collection</I></P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get the name of a control</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ControlTemplate.Properties.Item("Name")</P>
<P></P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>The value of the property: Name</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Get the background color of a form</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ActiveForm.Properties.Item("BackColor")</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>The value of the property: BackColor </P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>For many tasks an add됼n will be required to iterate through a collection. For example, for information on all the menus on a form, the add됼n will need to examine the ControlTemplates collection. (Note that a menu cannot be a member of the SelectedControlTemplates collection because it cannot be selected at design time.) The preferred method for these iterations is the For-Each construct. The following code segment, which receives as its argument the active form in the project, illustrates how the menus would be located: </P>

<pre><FONT FACE="Courier New" SIZE="3">Public Function CountMenus(ThisForm As FormTemplate) As Integer
    Dim InstanceControl As ControlTemplate
    Dim TheseControls   As ControlTemplates
    Dim MenuCount       As Integer

    Set TheseControls = ThisForm.ControlTemplates
    For Each InstanceControl In TheseControls
        If (InstanceControl.ClassName = "Menu") Then
            MenuCount = MenuCount + 1
        End If
    Next
    CountMenus = MenuCount
End Function</font></pre>
<H2> </A>Manipulating the Visual Basic IDE</H2><p>Methods and properties can manipulate a Visual Basic project and objects within the project. As with the query process, an add됼n must traverse the object hierarchy and obtain an object with which to work. In this regard, working with Visual Basic IDE objects is like working with a Visual Basic project, as illustrated in the following:</P>
<ul><li>Within Visual Basic, files are added to a project using the File+Add File menu item. Within the Visual Basic IDE, files are added to the ActiveProject object using the AddFile method. </LI><li>Within Visual Basic, controls are added to a form by dragging them off the toolbar. Within the Visual Basic IDE, controls are added to a ControlTemplates collection using the Add method. </LI><li>Within Visual Basic, a property is set by changing its value in the Properties window. With the Visual Basic IDE, a property is set by changing the value of a Property object. </LI></UL></SPAN><p>The following table outlines the ways that developers can manipulate a Visual Basic project using the Visual Basic IDE. (Please note that object references have been shortened from the full reference that is actually required.)</P>
<p></P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="113pt" VALIGN="TOP"><COL WIDTH="157pt" VALIGN="TOP"><COL WIDTH="171pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Task</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Uses Object</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Method or Property</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Add a file to the project</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ProjectTemplate </P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>AddFile</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Create a new form</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ProjectTemplate</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>AddFormTemplate</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Add a control to a form</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>FormTemplate.ControlTemplates</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Add</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Add a menu to a form</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>FormTemplate</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>AddMenuTemplate</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Change the property of a control</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ControlTemplate.Properties</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Item("<I>PropertyName</I>") = value (<I>PropertyName </I>is the name of the property to change)</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Place a control in a new container</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ControlTemplate</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Container = <I>NewContainer (NewContainer is a valid container object of type ControlTemplate, or FormTemplate)</I></P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H2> </A>OLE Architectures and Standardization</H2><p>An add됼n is a specialized OLE server that exposes some predefined events. Visual Basic compiles a project as an OLE server by changing the StartMode option found in the Project property sheet of the Options dialog. Although Visual Basic does not require that any particular methods or properties be contained within the class objects provided by the add됼n, OLE guidelines recommend that all OLE servers conform to certain standards. These standards suggest common properties and classes that servers should expose. Discussions of these standards can be found in such references as <I>OLE 2 Programmers Reference</I> and <I>Inside OLE 2</I>. </P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Viper and MSMQ</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Viper and MSMQ</H3><p>These two messaging services provide new models for creating distributed applications. </P>
<p>Viper provides an execution environment for building and deploying distributed business applications&mdash;sometimes called "three tier" applications&mdash;built from ActiveX components. Its main features include transactions, TP monitor-like scalability, and component configuration and security services. With Viper you can use popular tools like Microsoft&reg; Visual Basic&reg;, Borland Delphi, PowerSoft PowerBuilder, Visual C++&reg;, or Microsoft&reg; Visual J++&trade; to easily build robust and scalable multi-user applications on the server without complex programming.</P>
<p>There are several Viper sessions at the conference. The first two sessions (Developing Distributed Applications Part 1 and Part 2) are for those of you who are new to this service. The remaining sessions are for those interested in a particular feature of Viper.</P>
<p>The second messaging service is MSMQ: Microsoft Message Queue. It allows you to build applications that send data asynchronously in a reliable manner over heterogeneous, potentially unreliable networks. The targets for MSMQ messages are queues, not a specific application, hence no dedicated session has to be established between the sending application and receiving application. Furthermore, both applications do not need to be running, or even connected, at the same time. On the receiving end, any number of applications may read messages from a given queue, whenever it is convenient.</P>
<p>There are two MSMQ sessions, both for those who are new to Microsoft Message Queue. The first session covers the general architecture of MSMQ and the second shows how simple it is to create an MSMQ application.</P></BODY></HTML>

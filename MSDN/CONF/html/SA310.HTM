<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Host and Remote Agents</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Sample Host and Remote Agents</H3><p><img src="40831.gif"></P>
<H4> </A>Visual Basic Host Agent</H4><p>The actual implementation of a simple host agent in Visual Basic is shown next. The host agent application looks like the simple form below.</P>
<p><img src="40832.gif"></P>
<p>Each of the five steps requires only a few lines of code.</P>
<OL><LI>The host periodically checks for new request.<br><p>
We can set the responsiveness of the system by changing the timer interval. We permit only one query to be active at a time by using a static variable.</LI>
<UL><LI>Sub Timer1_Timer ()</LI><LI>Static Active%</LI><LI>If Active% Then Exit Sub</LI><LI>Active% = True</LI><LI>ProcessQueue</LI><LI>Active% = False</LI><LI>End Sub</LI></UL>
<LI>The host searches for any pending files.  <br><p>We check for any files in the incoming directory. </P></LI>
<UL><LI>Sub ProcessQueue ()</LI><LI>'Only the RAS check is done</LI><LI>'MAPI could drop the files in the same location</LI><LI>'to serve as a signal</LI><LI>If cbRASAgent.Value &lt;&gt; 0 Then 'Check RAS</LI><LI>    A$ = Dir$(Incoming$ + "\*.QRY")</LI><LI>    While Len(A$) &gt; 0</LI><LI>        ProcessQuery Incoming$ + "\" + A$</LI><LI>        A$ = Dir$</LI><LI>    Wend</LI><LI>End If</LI><LI>End Sub</LI></UL><LI>The host uses the data in the request to execute query.<br><p>If a file is found, we start to process it. The file must be in the appropriate format; in this case, the first character on a line must be correct and the keywords in the SQL query must be in capitals.</LI>
<UL><LI>Sub ProcessQuery (ByVal Fname$)</LI><LI>Const DB_LANG_GENERAL = ";LANGID=0x0809;CP=1252;COUNTRY=0"</LI><LI>'On Error Resume Next</LI><LI>FilePath$ = Incoming$ + "\" + Fname$</LI><LI>If Dir$(FilePath$) = "" Or Fname = "" Then Exit Sub</LI><LI>fno = FreeFile</LI><LI>Open FilePath$ For Input As #fno</LI><LI>While Not EOF(fno)</LI><LI>    Line Input #fno, A$</LI><LI>    If Left$(A$, 1) = "&lt;" Then Outfile$ = Mid$(A$, 2)</LI><LI>    If Left$(A$, 7) = "&gt;SELECT" Then Query = Mid$(A$, 2)</LI><LI>    If Left$(A$, 1) = "=" Then TableName$ = Mid$(A$, 2)</LI><LI>    If Left$(A$, 1) = "@" Then ZipName$ = Mid$(A$, 2)</LI><LI>    If Left$(A$, 1) = "!" Then GoSub ExecuteQuery</LI><LI>Wend</LI><LI>Close fno
<P CLASS="lp1">We need three parameters: the file to put it in, the table name, and the query. We can add other parameters. In this example, we allow the files to be compressed. We add a new command or option to execute the existing values whenever a '!' is found. The use of an MDB allows us to store many result sets in one MDB.</P></LI></UL><LI>The host saves result sets.<br><p>If result sets are returned, they must be placed into the specified table.  This means modifying the query somewhere. It may be done at any agent or in the application, but it must be at one place only.</LI>
<UL><LI>ExecuteQuery:</LI><LI>'Validate parameters</LI><LI>FromAt% = InStr(Query, " FROM ")</LI><LI>OutPath$ = Outgoing$ + "\" + Outfile$</LI><LI>If FromAt% = 0 Then</LI><LI>    Query = "" 'Invalid Format</LI><LI>Else</LI><LI>    Query = Left$(Query, FromAt%) + " Into [" + TableName$ + "] In '" + OutPath$ + "' " + Mid$(Query, FromAt%)</LI><LI>End If</LI><LI></LI><LI>If Len(Outfile$) And Len(Query) And Len(TableName$) Then</LI><LI>    If Dir$(OutPath$) = "" Then</LI><LI>        Set OutDB = CreateDatabase(OutPath$, DB_LANG_GENERAL)</LI><LI>        OutDB.Close</LI><LI>    End If</LI><LI>    On Error Resume Next</LI><LI>    DB.Execute Query</LI><LI>    On Error GoTo 0</LI><LI>End If</LI><LI>Return
<P CLASS="lp1">This example executes queries against the HOST.MDB only. Any ODBC source could be accessed by adding more commands or options in the query request.</P></LI></UL><LI>The host compresses the file if requested.<br><p>The following section shows how we can compress an MDB with a common utility.  A 65,536-byte database may be reduced to only 5,888 bytes, resulting in significantly shorter transmission times.</P></LI>
<UL><LI>If Len(ZipName$) &gt; 0 Then</LI><LI>        fbatch = FreeFile</LI><LI>        Batchfile$ = Outgoing$ + "\ZIPMDB.BAT"</LI><LI>        ZipName$ = Outgoing$ + "\" + ZipName$</LI><LI>        Open Batchfile$ For Output As #fbatch</LI><LI>            Print #fbatch, "PKZIP -m " + ZipName$ + " " + OutPath$</LI><LI>            Print #fbatch, "DEL " + Batchfile$</LI><LI>        Close fbatch</LI><LI>        If Shell(Batchfile$, 3) Then</LI><LI>            While Dir$(Batchfile$) &lt;&gt; ""</LI><LI>                DoEvents</LI><LI>            Wend</LI><LI>        End If</LI><LI>    End If</LI></UL><LI>The host deletes request file.<br><p>The signal that the result set is ready to be picked up is the removal of the query file.</P></LI><UL><LI>Kill FName$  'Remove file to signal completion</LI></UL></OL><H4> </A>Visual Basic Remote Agent</H4><p>The actual implementation of a simple remote agent in Visual Basic is shown next.</P>
<p><img src="40833.gif"> </P>
<p>Each step requires only a few lines of code.</p>
<OL><LI>The remote agent sends the request.</LI><br><p>The application must use a scheme to prevent collision. A counter is an effective one.</P>
<UL><LI>QryNo% = QryNo% + 1</LI><LI>fno = FreeFile</LI><LI>RQST$ = RASQuery$ + "\KEN" + Format(QryNo%, "0") + ".QRY"</LI><LI>Open RQST$ For Output As #fno</LI><LI>MDBName$ = "KEN" + Format(QryNo%, "0") + ".MDB"</LI><LI>TableName$ = "Table " + Format(QryNo%, "0") + ".QRY"</LI><LI>fno = FreeFile</LI><LI>RQST$ = RASQuery$ + "\KEN" + Format(QryNo%, "0") + ".QRY"</LI><LI>Open RQST$ For Output As #fno</LI><LI>Print #fno, "&lt;" + MDBName.Text</LI><LI>Print #fno, "=" + TableName.Text</LI><LI>Print #fno, "&gt;" + Query.Text</LI><LI>If ZipBMD &lt;&gt; 0 Then</LI><LI>Print #fno, "@" + "ZIP" + Format$(QryNo%, "0")</LI><LI>End If</LI><LI>Close #fno
<P CLASS="lp1">After the query is sent, we must start a receiver. In our sample, we create a form for each set of data returned.</P></LI></UL><P CLASS="lp1"></P>
<UL><LI>ReDim Returns(QryNo%) As New frmReturns</LI><LI>SetInformation Returns(QryNo%), RQST$, MDBName.Text, TableName</LI><LI>Returns(QryNo%).Visible = True</LI></UL><LI>The remote agent waits until the request file is deleted.</LI><p>
The timer permits periodic checks.</P></LI><UL><LI>Sub Timer1_Timer ()</LI><LI>If Dir(Tag) = "" Then</LI><LI>    CopyFile ResultsFile$, MDBFILE$</LI><LI>    SetResults MDBFILE$</LI><LI>    Timer1.Enabled = False</LI><LI>    caption = "Results Back"</LI><LI>End If</LI><LI>End Sub</LI></UL><LI>The remote agents copies the database (or zipped file) and deletes it from the host.</LI><br><P>
<UL><LI>Sub CopyFile ()</LI><LI>BatchFile$ = App.Path + "\" + Left$(MDBName, InStr(MDBName, ".")) + "Bat"</LI><LI>fno = FreeFile</LI><LI>Open BatchFile$ For Output As #fno</LI><LI>If Len(ZipName) &gt; 0 Then</LI><LI>    Print #fno, "COPY " + RASResults$ + ZipName + " " + App.Path + "\" + ZipName</LI><LI>Else</LI><LI>    Print #fno, "COPY " + RASResults$ + MDBName + " " + App.Path + "\" + MDBName</LI><LI>End If</LI><LI>If Len(ZipName) &gt; 0 Then</LI><LI>    Print #fno, "CHDIR " + App.Path</LI><LI>    Print #fno, "PKUNZIP " + App.Path + "\" + ZipName</LI><LI>    Print #fno, "DEL " + RASResults$ + ZipName</LI><LI>Else</LI><LI>    Print #fno, "DEL " + RASResults$ + MDBName</LI><LI>End If</LI><LI>Print #fno, "DEL " + BatchFile$</LI><LI>Close #fno</LI><LI>If Shell(BatchFile$, 6) Then</LI><LI>    While Dir(BatchFile$) &lt;&gt; ""</LI><LI>        DoEvents</LI><LI>    Wend</LI><LI>End If</LI><LI>End Sub</LI></UL><LI>The remote agent assigns results.</LI><p>The assignment of results is always application-specific. A good schema is to have one MDB match each form. In our sample application, we implemented a generic form.</P>

<P CLASS="lp1"><img src="40834.gif"></P></LI></OL></BODY></HTML>

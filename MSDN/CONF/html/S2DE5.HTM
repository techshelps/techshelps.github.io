<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Page Extensions</TITLE> <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Property Page Extensions</H1><p>Most applications rely on some sort of secondary windows. In most cases, those windows are either modal dialogs or non-modal property pages. Either of these are possible within MMC, but where possible it is suggested that non-modal property pages be used. Modal dialogs should be used only where it is necessary for a decision to be made before proceeding on to anything else. Property pages in MMC work like they do in the shell, with one major exception: property pages in MMC should always use the standard shell large size (252x218 dialog units), for four reasons:</P>
<P>Uniformity - all property pages will be a standard size.</P>
<P>Aesthetics - enforcing this will prevent some property pages from being short and wide and other tall and narrow.</P>
<P>Simplicity - it is simplest for Snap-In providers to work with extensions of dialogs of a uniform size.</P>
<P>Performance - we don't have to first ask each extension what size it wants and then create a property frame.</P>
<P>One other difference is that your property pages have the possibility of being extended by other Snap-Ins, if you allow it. This allows extension Snap-Ins to use your objects as the mechanism by which they configure themselves.</P></BODY></HTML>

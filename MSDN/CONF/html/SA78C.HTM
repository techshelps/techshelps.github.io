<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Why Use CBF?</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Why Use CBF?</H3><p>Why use CBF in your applications? For several reasons:</P>
<P><ul><li>    You can better organize your code. The code for a form or report is tied directly to it. You don't need to search through many global modules to find the code that responds to a button click.</P>
<P><li>    You can use shorter syntax in the form or report module. The context of the owning form or report is passed in, so instead of saying: Forms!MyForm!MyControl, you can simply say MyControl.</P>
<P><li>    You can avoid global name space conflicts. Procedures in form or report modules are private to that module. There's no worry of conflicting with global procedures or procedures in other form or report modules.</P>
<P><li>    You can use the parameters passed by the events. Many of the events Microsoft Access fires contain parameters giving more information and options. You can only use these parameters with event procedures and CBF. They aren't available to macros or global functions.</P></ul>
<p>This last point leads us into the next topic, the event model for Microsoft Access 2.0.</P></BODY></HTML>

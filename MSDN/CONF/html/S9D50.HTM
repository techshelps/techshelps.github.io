<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Components and DesktopDevelopment</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Components and Desktop Development</H2>
<h3>Component-based development is established today as a mainstream business technology on the desktop.</H3><p>DCOM has its roots in Microsoft's object technology, which has evolved over the last decade from DDE (Dynamic Data Exchange, a form of messaging between Windows programs), OLE (Object Linking and Embedding, embedding visual links between programs within an application), COM (the Component Object Model, used as the basis for all object binding), and ActiveX (COM enabled for the Internet). </P>
<p>The evolution of this technology shares a common theme: each iteration reduces the complexity of building large applications while enabling the delivery of successively richer functionality to the end user. This can lower application development costs, because developers can leverage pre-built components and their interfaces without having to spend as much time testing and integrating the work of multiple people. </P>
<p>Applications built from components are simply easier to debug and evolve than large, monolithic applications.</P>
<p><I>For example, the “Year 2,000 Problem“&mdash;where many large organizations are scrambling to fix their production systems to avoid failure when the date changes to the new millennium&mdash;is </I><I>an application design problem</I><I>, not a date problem. If legacy applications were written with a common date component, the fix would be easy to isolate and inexpensive to repair. </I></P>
<p>Most developers for the Microsoft Windows&reg; operating system understand these benefits and use the ActiveX component architecture. There are over three million professional programmers trained on ActiveX and its technologies&mdash;OLE, COM, and DCOM&mdash;and hundreds of independent software companies ship thousands of prebuilt software components. These commercial software components can be used by developers working with Microsoft Visual Basic&reg;, PowerBuilder, Micro Focus Visual Object COBOL and other popular tools. </P>
<p>The key business benefits of ActiveX on the desktop automatically extend to DCOM across the network:</P>
<UL><LI><B>Language neutral&mdash;</B>Developers can build ActiveX components from any language<I>; </I>for example,<I> </I>ActiveX<I> c</I>omponents built in COBOL can work with components built in Java</LI><LI><B>Broad tools support&mdash;</B>Most major software development tools vendors support ActiveX</LI><LI><B>Broad industry support&mdash;</B>Thousands of pre-built components are available on the market</LI><LI><B>Accessible technology&mdash;</B>A large pool of professional developers currently work with ActiveX</LI></UL></BODY></HTML>

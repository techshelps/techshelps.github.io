<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Model</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Object Model</H3><p>The Active Directory object model consists of Active Directory<B> objects</B> and <B>dependent objects</B>. Clients manipulate objects with<B> interfaces</B>. Active Directory<B> providers </B>implement the Active Directory objects and their interfaces.</P>
<H4> </A>Active Directory Objects.</H4><p>Active Directory objects are COM objects that represent persistent objects in an underlying directory service. An Active Directory object is manipulated using one or more COM interfaces. </P>
<p>Active Directory objects are divided into two groups: <B>directory service leaf objects</B>, and<B> directory service container objects</B>. A container object can contain other Active Directory objects. A leaf object cannot contain Active Directory objects.</P>
<H4> </A>Dependent Objects.</H4><p>An Active Directory object is typically the host for one or more dependent objects. Dependent objects are COM objects that logically divide the functionality of an Active Directory directory service object. Clients obtain interface pointers on dependent objects by calling methods on the interfaces of the host Active Directory object. Dependent objects can be retrieved only from host objects.</P>
<p>The division of a given object type into a host and one or more dependent objects implements a logical grouping of properties and methods. This division does not necessarily<SUP>2</SUP> reflect the structure of the underlying directory. The host and dependent object relationship should not be confused with the container and contents relationship: the former is a characteristic of Active Directory, the latter a characteristic of the underlying directory.</P>
<p></P>
<P CLASS="foot"><SUP>2</SUP> The division may coincidentally reflect the actual structure of the underlying directory; the point here is that the host/dependent object relationship is an artifact of Active Directory, not of any particular directory.</P></BODY></HTML>

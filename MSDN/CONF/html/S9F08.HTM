<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Relationship Between Directory and Security Services</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Relationship Between Directory and Security Services</H3><p>A fundamental relationship exists between the Directory and Security Services integrated into the Windows&nbsp;NT operating system. The Directory Service stores domain security policy information, such as domain-wide password restrictions and system access privileges that have direct bearing on the use of the system. The security-related objects in the Directory must be securely managed to avoid unauthorized changes that affect overall system security. The Windows&nbsp;NT operating system implements the object-based security model and access control for all objects in the Directory. Every object in the Directory Service has a unique security descriptor that defines access permissions required to read or update the object properties.</P>
<p>The diagram below shows the fundamental relationship between Directory and operating system Security services. </P>
<P><img src="39615.gif"></P>
<P CLASS="cap"><B>Figure 2: Relationship between Directory and Security Services</B></P>
<p>The Directory Service uses impersonation and Windows&nbsp;NT access verification to determine if a Directory Service client request can read or update the desired object. This means LDAP client requests to the directory require the operating system to enforce access control, rather than having the Directory Service itself make the access control decisions. </P>
<p>The Windows&nbsp;NT security model provides a unified and consistent implementation of access control to all domain resources based on group membership. Windows&nbsp;NT security components can trust the security related information stored in the directory. For example, the Windows&nbsp;NT authentication service stores encrypted password information in the secure portion of the directory user objects. The operating system trusts that security policy information is stored securely and that account restrictions or group membership is not changed by anyone without authorized access. In addition, security policy information for overall domain management is kept in the directory. </P>
<p>This fundamental relationship of Security and Directory Services is only achieved by complete integration of the Directory Service with the Windows&nbsp;NT operating system, and is not otherwise available.</P>
<H4> </A>Domain Trust Relationships</H4><p>The next version of Windows&nbsp;NT domains will be organized into a hierarchical domain tree. The trust relationships between domains allow users with accounts defined in one domain to be authenticated by resource servers in another domain. In Windows&nbsp;NT 4.0, and earlier versions, interdomain trust relationships are defined by one-way Trusted Domain accounts between Domain Controllers. Management of the trust relationships between account domains and resource domains on a large network is a complex task.</P>
<p>The next generation Windows&nbsp;NT Directory Service supports two forms of trust relationships:</P>
<UL><LI>Explicit one-way trust relationships to Windows&nbsp;NT 4.0 domains.</LI><LI>Two-way transitive trust between domains that are part of the Windows&nbsp;NT domain tree.</LI></UL><p>The diagram below shows the two styles of trust relationship.</P>
<P><img src="39616.gif"></P>
<P CLASS="cap"><B>Figure 3: Domain Trust Relationships</B></P>
<p>Transitive trust between domains simplifies the management of interdomain trust accounts. Domains that are members of the domain tree define a two-way trust relationship with the parent domain in the tree. All domains implicitly trust other domains in the tree. If there are specific domains that do not want two-way trust, explicit one-way trust accounts can be defined. For organizations with multiple domains, the overall number of explicit one-way trust relationships is significantly reduced.</P>
<H4> </A>Delegation of Administration</H4><p>Delegation of administration is a valuable tool for organizations to confine the security administration to apply only to defined subsets of the entire organization's domain. The important requirement is to grant rights to manage a small set of users or groups, within their area of responsibility, and at the same time, not give permissions to manage accounts in other parts of the organization.</P>
<p>Delegation of responsibility to create new users or groups is defined at the level of an Organizational Unit (OU), or container, where the accounts are created. Group administrators for one Organizational Unit will not necessarily have the ability to create and manage accounts for another Organizational Unit within a Domain. However, domain-wide policy settings and access rights defined at higher levels in the Directory tree can apply throughout the tree using inheritance of access rights.</P>
<p>There are three ways to define the delegation of administration responsibilities:</P>
<OL><LI>Delegate permissions to change properties on a particular container, such as the LocalDomainPolicies of the Domain object itself.</LI><LI>Delegate permissions to create and delete child objects of a specific type underneath an OU, such as users, groups, or printers.</LI><LI>Delegate permissions to update specific properties on child objects of a specific type underneath an OU, for example, the right to set passwords on user objects.</LI></OL><p>The Directory Service Administration user interface makes it easy to view the delegation information defined for containers. Adding new delegation of permissions is also easy to do by selecting who you want to delegate permission to and choosing what permissions they need.</P>
<p>Integrating the security account repository with the Windows&nbsp;NT Directory Service provides real benefits to manage the Enterprise. Performance, ease of administration, and scalability for large organizations are the direct result. Internet-based Enterprises can use Domain trees and hierarchical OUs to organize accounts for business partners, frequent customers, or suppliers with specific access rights to their system.</P>
<H4> </A>Fine-Grain Access Rights</H4><p>Large organizations typically depend on many individuals or groups to secure and manage the network account infrastructure. They need the ability to grant access rights for specific operations, such as resetting user passwords, or disabling accounts, to specific groups without also granting the permission to create new accounts or change other properties of user accounts.</P>
<p>The security architecture for Directory Service objects uses Windows&nbsp;NT security descriptors to control object access. Every object in the Directory has a unique security descriptor. The Access Control List (ACL) in the security descriptor is a list of entries that grant or deny specific access rights to individuals or groups. Access rights can be granted or denied with different levels of scope on the object. Access rights can be defined on any of the following levels:</P>
<UL><LI>Apply to the object as a whole, which applies to all properties of the object</LI><LI>Apply to a grouping of properties defined by property sets within the object</LI><LI>Apply to an individual property of the object</LI></UL><p>The user that creates an object is granted the default access permissions for read/write access to all properties. Granting or denying object access permissions to a property set is a convenient way to define permissions for a group of related properties. The grouping of properties is defined by the property set attribute of a property in the schema. The property set relationship can be customized by changing the schema. Finally, the definition of access rights on a <I>per-property</I> level provides the highest level of granularity of permissions. Definition of per-property access is available on all objects in the Windows&nbsp;NT Directory Service. </P>
<p>Container objects in the directory also support fine-grain access with respect to who has permissions to create child objects, and what type of child objects they may create. For example, the access control defined on an Organizational Unit (OU) can define who is allowed to create user objects (accounts) in this container. Another entry in the access control for the OU might define who is allowed to create printer objects. Fine grain access control on directory containers is an effective way to maintain organization of the directory name space.</P>
<p>A new implementation of the "ACL Editor," the common dialog control for viewing or changing object security permissions, provides an easy-to-use interface for defining access rights to Directory Service objects by property set or individual properties. The ACL Editor also supports defining "inherited" access rights on container objects that flow down to all subobjects in that portion of the directory tree.</P>
<H4> </A>Inheritance of Access Rights</H4><p>Inheritance of access rights refers to how access control information defined at higher level containers of the Directory flows down to sub-containers and leaf objects. There are generally two models for implementing inherited access rights: dynamic and static inheritance. Dynamic inheritance determines the effective access rights to an object by evaluating the permissions defined explicitly on the object, and those defined for all parent objects in the directory. This allows flexibility to change access control on portions of the directory tree by making changes to a specific container that automatically affects all subcontainers and leaf objects. The trade-off to this flexibility is the performance cost to evaluate effective access rights at the time a client requests a read/write to a specific directory object.</P>
<p>Windows&nbsp;NT implements a static form of inheritance of access rights, referred to as "Create Time" inheritance, as is discussed in the OLE DS documentation. Access control information can be defined on containers that will flow down to the child objects of the container. When the child object is created, the inherited rights from the container are merged with default access rights on the new object. Any future changes to inherited access rights at higher levels in the tree must be propagated down to all affected child objects. New inherited access rights are propagated by the Directory Service to the object for which they apply, based on options for how the new rights are defined. </P>
<p>Performance for access control verification is very fast, using the static model of inheritance of access rights. Access checks are a frequent and necessary operation which the operating system is designed to optimize, not just for directory object access, but for the file system, and all other Windows&nbsp;NT system objects.</P></BODY></HTML>

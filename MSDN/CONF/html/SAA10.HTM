<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OOP and its Effect on Development</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>OOP and its Effect on Development</H2><p>So, now that we have seen what objects are and what all the ten dollar words mean, the next question is, "<I>Big deal. What does this do for me?"</I></P>
<p>OOP will shift the focus of development from coding procedures to the designing and defining classes. Since Objects are, in effect, complete and independent "modules" it is possible to have developers just working on classes of objects. The application developers can then use these classes, either directly or by subclassing them, and put them together to form a system.</P>
<p>Does this mean that once you have a library of classes that you will never need to write code again? Not quite, but it will make your life a lot easier once you have the class library developed, debugged and ready to go.</P></BODY></HTML>

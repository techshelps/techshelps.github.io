<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Doing Tooltips with Mouse events</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Doing Tooltips with Mouse events</H3><p>The next example shows how to add Tooltips to your forms using the new Mouse events. First, an overview of the new mouse events in Microsoft Access 2.0.</P>
<p>The following mouse-related events were added to Microsoft Access 2.0. They are based on the same events in Microsoft Visual Basic. </P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="238pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Click</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Fires when user clicks the left mouse button.</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DblClick</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Fires when the user double-clicks the left mouse button</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MouseDown</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Fires when the user first clicks any mouse button</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MouseUp</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Fires when the user releases any mouse button</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MouseMove</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Fires when the mouse cursor is moved on the screen</P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>One of the keys to working with the mouse events is understanding the coordinate system they use. The following describes some key points about this system:</P>
<P><ul><li>    All coordinates are in twips. </P>
<P><li>    By default, forms are positioned relative to the main Microsoft Access window. A form with its PopUp property set to Yes is positioned relative to the screen. Form positioning is always in twips.</P>
<P><li>    For a form&mdash;all mouse coordinates for form mouse events are relative to the upper-left corner of the form client area (everything that's inside the form window's Record and Field selectors).</P>
<P><li>    All controls on a form are positioned relative to the containing section.</P>
<P><li>    For a control&mdash;All mouse coordinates are relative to the upper-left corner of the control.</P>
<P><li>    For sections&mdash;All mouse coordinates are relative to the upper-left corner of the section.</P>
<P><li>    Mouse events are sent to the form for all events that don't occur over a control or section.</P>
<P><li>    Mouse events that occur over a control are sent to that control.</P>
<P><li>    Mouse events that occur over a section (but not over a control) are sent to the section.</P></ul>
<p>So when you move the mouse inside a control, the mouse coordinates are relative to the control. To convert these to section coordinates, you need to add the control's Top and Left properties.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">    SectionX = ControlX + Forms!MyForm!MyCntl.Left
    SectionY = ControlY + Forms!MyForm!MyCntl.Top</font></pre>
<p>To convert the section coordinates to form coordinates, you need to correct for any possible scroll of the section within the form. You do this with the CurrentSectionLeft and CurrentSectionTop properties.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">    FormX = SectionX + Forms!MyForm.CurrentSectionLeft
    FormY = SectionY + Forms!MyForm.CurrentSectionTop</font></pre>
<p>Finally, to convert form coordinates to screen coordinates, you need to compensate for the form caption and borders. This information is available from Microsoft Windows&reg; APIs. (Note: You also need to convert from twips to pixels at this step.)</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">GetWindowRect Forms!MyForm.hWnd, rcWnd
TwipsPerPixelX = 1440 / GetDeviceCaps(hdc, LOGPIXELSX)
TwipsPerPixelY = 1440 / GetDeviceCaps(hdc, LOGPIXELSY)
ScreenX = FormX / TwipsPerPixelX +  GetSystemMetrics(CM_SXFRAME) + rcWnd.Left
ScreenY = FormY / TwipsPerPixelY + (GetSystemMetrics(SM_CYCAPTION) + GetSystemMetrics(SM_CYFRAME)) + rcWnd.Top</font></pre>
<p>Now we're ready to look at the Tooltips sample in the AC301 database. This sample uses the Customer form and the Tooltips global module. Open the Customer form and point at a label for one of the text box controls with the mouse. After a few moments, a Tooltip book will appear, similar to the one you see on the toolbars in all Microsoft Office family programs.</P>
<p>The code to implement this is mostly in the Tooltips global module. It's invoked from event procedures in the Customer form module. The events used at the form level are: </P>
<P><ul><li>    Load&mdash;to initialize the tooltip code</P>
<P><li>    Unload&mdash;to allow the tooltip code to clean up</P>
<P><li>    MouseMove&mdash;to allow a form mouse move to force the tip to be removed</P>
<P><li>    Timer&mdash;to help implement the time delay, the cursor must point at a label before its tip is shown</P>
<p>Other events used are: </P>
<P><li>    Detail Section MouseMove&mdash;To allow a section mouse move to force the tip to be removed</P>
<P><li>    Control MouseMove&mdash;On every text box control you process, the mouse moves to implement the main tooltip functionality</P></ul>
<p>The two key events in this sample are the control level mouse move and the timer events. The following functions in the Tooltips global module implement this functionality:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub TTProcessControlMove (x As Single, y As Single, Cntl As Control)
Dim i As Integer
Dim Label As Control
Dim ptMouse As POINTAPI

'First map to Tips array using the Tag property in Cntl
'as the index. Get a pointer to the label for the control
i = Cntl.Tag
Set Label = Forms(th.TipForm)(TipList(i).Label)

'Set up mouse point in section coords
ptMouse.x = x + Cntl.Left
ptMouse.y = y + Cntl.Top

'See if the mouse is over the label
If (Not TTInLabel(Label, ptMouse)) Then
    'Not over the label. We only show tips when pointing to
    'a label. Dismiss the tip if showing and kill timer
    TTDismissTip
Else
    'See if showing the tip already
    If (th.TipShowing) Then
        'if we are but have changed labels since this tip
        'went up then dismiss it
        If (i &lt;&gt; th.CurrTip) Then TTDismissTip
    Else
        'Not showing the tip. Start timer if we need to
        If (Forms(th.TipForm).TimerInterval = 0) Then
            Forms(th.TipForm).TimerInterval = th.DelayTime
        End If

        'Record current mouse position and index of label
        th.CurrPos = ptMouse
        th.CurrTip = i
    End If
End If
End Sub

Sub TTProcessTimer ()
Dim CursorPos As POINTAPI
Dim pt As POINTAPI
Dim TipCtl As Control
Dim x As Integer

'Get the current cursor position and map our saved position from the last mouse move message to screen coords
GetCursorPos CursorPos
TTSectionToScreen th.CurrPos, pt

'If the 2 points are the same, then user has waited long enough.
'Time to show the tip
If (CursorPos.x = pt.x) Then
    If (CursorPos.y = pt.y) Then
        'Point to the ToolTip control
        Set TipCtl = Forms(th.TipForm)(th.Tip)

        'First set the text and width of the tip control
        TipCtl.Value = TipList(th.CurrTip).TipText
        TipCtl.Width = TipList(th.CurrTip).TipWidth

        'Now set it in position
        x = th.CurrPos.x - TipCtl.Width / 2
        If (x &lt; 0) Then x = 0
        TipCtl.Left = x
        TipCtl.Top = th.CurrPos.y + GetSystemMetrics(SM_CYCURSOR) * th.TwipsPerPixelY * 2 / 3

        'Finally set the flag and show the control
        th.TipShowing = True
        TipCtl.Visible = True
  End If
End If
End Sub</font></pre>
<p>Please see the sample database for more information on this example.</P></BODY></HTML>

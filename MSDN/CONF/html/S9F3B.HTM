<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Management</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Management</H3><H4> </A>Delegation of Administration</H4><p>Delegation of administration is a valuable tool for organizations to confine the security administration so that it applies only to defined subsets of the entire organization domain. The important requirement is to grant rights to a small set of users or groups to manage their area of responsibility, but not give them permissions to manage accounts in other parts of the organization.</P>
<p>Delegation of responsibility to create new users or groups is defined at the level of an Organizational Unit (OU), or container, where the accounts are created. Group administrators for one organizational unit will not necessarily have the ability to create and manage accounts for another organizational unit within a Domain. However, domain-wide policy settings and access rights defined at higher levels in the Directory tree can apply throughout the tree by using inheritance of access rights. There are three ways to define the delegation of administration responsibilities:</P>
<P CLASS="num">Delegate permissions to change properties on a particular container, such as the LocalDomainPolicies of the Domain object itself.</P>
<P CLASS="num">Delegate permissions to create and delete child objects of a specific type underneath an OU, such as Users, Groups, or Printers</P>
<P CLASS="num">Delegate permissions to update specific properties on child objects of a specific type underneath an OU, for example, the right to Set Password on User objects.</P>
<p>The Directory Service Administration user interface makes it easy to view the delegation information defined for containers. Adding new delegation of permissions is also easy to do by selecting who you want to delegate permission to and choosing what permissions they need.</P>
<p>Integrating the security account repository with the Windows&nbsp;NT Directory Service provides real benefits to manage the Enterprise. Performance, ease of administration, and scalability for large organizations are the direct result. Internet-based Enterprises can use Domain trees and hierarchical OUs to organize accounts for business partners, frequent customers, or suppliers with specific access rights to their system.</P>
<H4> </A>Fine-grained Access Rights</H4><p>   Large organizations typically depend on many individuals or groups to secure and manage the network account infrastructure. They need the ability to grant access rights for specific operations&mdash;such as resetting user passwords, or disabling accounts&mdash;to specific groups without also granting the permission to create new accounts or change other properties of user accounts.</P>
<p>The security architecture for Directory Service objects uses Windows&nbsp;NT security descriptors to control object access. Every object in the Directory has a unique security descriptor. The Access Control List (ACL) in the security descriptor is a list of entries that grant or deny specific access rights to individuals or groups. Access rights can be granted or denied with different levels of scope on the object and can be defined on any of the following levels:</P>
<UL><LI>Apply to the object as a whole, which applies to all properties of the object</LI><LI>Apply to a grouping of properties defined by property sets within the object</LI><LI>Apply to an individual property of the object</LI></UL><p>Granting uniform read/write access to all properties of an object is the default access permissions for the creator of the object. Granting or denying object access permissions to a property set is a convenient way to define permissions for a group of related properties. The grouping of properties is defined by the property set attribute of a property in the schema. The property set relationship can be customized by changing the schema. Finally, the definition of access rights on a <I>per-property</I> level provides the highest level of granularity of permissions. Definition of per-property access is available on all objects in the Windows&nbsp;NT Directory Service. </P>
<p>Container objects in the directory also support fine grain access with respect to who has permissions to create child objects and what type of child objects they may create. For example, the access control defined on an Organizational Unit (OU) can define who is allowed to create User objects (accounts) in this container. Another entry in the access control for the OU might define who is allowed to create Printer objects.  Fine grain access control on directory containers is an effective way to maintain organization of the directory name space.</P>
<p>A new implementation of the "ACL Editor," the common dialog control for viewing or changing object security permissions, provides an easy-to-use interface for defining access rights to Directory Service objects by property set or individual properties. The ACL Editor also supports defining "inherited" access rights on container objects that flow down to all sub-objects in that portion of the directory tree.</P>
<H4> </A>Drag-and-Drop Administration   </H4><p>The Windows&nbsp;NT next generation Directory Service provides intuitive and powerful administration tools. Objects can be hierarchically organized so that they can model large organizations. And the graphical user interface delivers one of the most requested administrative tools&mdash;a drag-and-drop control console. This console has a graphical user interface that provides an object-view of administration. For example, to do pruning and grafting, the administrator would grab the top of the merge-from tree and then drag and drop it onto the target domain. A dialog box asks the administrator to confirm the action. Of course, the administrator must have rights in the merge-from tree to merge it with another tree, and in the merge-to domain to bring new trees into it.</P>
<H4> </A>Scripting and OLE Automation   </H4><p>Anything that can be done through a UI should be able to be done programmatically or from a script. To allow an administrator to write command procedures, the Windows&nbsp;NT next generation Directory Service provides full support for OLE automation and scripting. This makes it possible to add, change, move, copy, and perform other administrative functions by scripted manipulation using Active Directory, and a scripting language such as, Java, Microsoft&reg; Visual Basic&reg; Script, or others.</P></BODY></HTML>

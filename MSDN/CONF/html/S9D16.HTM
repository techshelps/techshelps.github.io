<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Taking a Closer Look at the Call Manager</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Taking a Closer Look at the Call Manager</H3><p>The call manager, or signaling module, is what enables one ATM station to establish a virtual circuit&mdash;complete with QoS guarantees&mdash;with another ATM station, all prior to the packets actually being transmitted. The call manager resides on each switch, so that each switch can respond to VC and QoS requests, which is what gives ATM its ability to guarantee bandwidth allocation.</P>
<p>It is the call manager that essentially says, "Establish a virtual circuit to this ATM address, and to this service access point application, with this QoS guarantee." Once the virtual circuit has been established, the signaling module is out of the picture, and the application or driver can simply tell the hardware interface to send a certain packet on a specified VC number. The hardware interface, the NIC, and the switches all know the significance of that VC number, as well as its QoS and its mapping from input port to output port. </P>
<p>Protocols that now run on Windows&nbsp;NT or Windows&nbsp;95, such as TCP/IP, IPX, and NetBEUI, are unable to create virtual circuits and would require significant rewriting to understand VC technology. This is why Microsoft is working on incorporating the Call Manager into the operating system, something that will greatly simplify development for ATM card vendors. Rather than having to develop, purchase, or license a custom call manager, something which is difficult to author, they will be able to provide a simple miniport that will plug into the call manager supplied in the Windows&nbsp;95 or Windows&nbsp;NT operating system.</P>
<H4> </A>Allowing Multiple Call Managers</H4><p>As noted above, Microsoft plans to use the UNI 3.1 call manager. But to create a more open system, the NDIS 4.1 interface will provide the capability to have multiple call managers. This means a vendor can create a pluggable custom call manager to support a switch that uses a proprietary signaling protocol other than UNI 3.1.<B> </B></P></BODY></HTML>

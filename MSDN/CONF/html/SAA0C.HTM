<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Encapsulation Revisited</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Encapsulation Revisited</H2><p>Taking the concepts that we have seen here, <I>encapsulation</I> becomes clearer. Basically, encapsulation means that an object is a self contained unit. It contains data, in the form of properties (also called <I>instance variables</I>), and methods associated with it to perform whatever actions the object needs to do what it needs to do.</P>
<p>We saw this with the <I>Light</I> class of objects.</P>
<p>We can also create a Customer class if we wanted to and associate data and methods with it that encapsulate customer information and actions within.</P>
<p>A customer object's data would be such items as Name, Address, Phone Number, Credit Limit, etc. Methods associated with the object could be actions related to displaying customer data, allowing the user to edit/add customers, printing a customer, etc. If you develop naming conventions for your object methods, using the objects become a breeze. The following example will use two mythical classes, customer and invoice. Note how the code, at this level, can be exceedingly similar. In fact, using OOP, the developer who takes objects and puts them together in the form of a system, will have a much easier job.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">oCust = CREATEOBJECT("Customer")
oCust.Display    &amp;&amp; Show the customer
oCust.Edit        &amp;&amp; Edit the Customer
oCust.Save        &amp;&amp; Save Customer
oCust.Print        &amp;&amp; Print the customer

oInv = CREATEOBJECT("Invoice")
oInv.Display        &amp;&amp; Show the Invoice
oInv.Edit        &amp;&amp; Edit the Invoice
oInv.Save        &amp;&amp; Save Invoice
oInv.Print        &amp;&amp; Print the Invoice</font></pre></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building OLE Servers with Visual Basic 4.0</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Building OLE Servers with Visual Basic 4.0</H1><p>Craig Lokken<BR>Mary Anne Kobylka<BR>Microsoft Corporation</P>
<p>August 18, 1995</P>
<H2>Abstract</H2><p>Microsoft&reg; Visual Basic&reg; 4.0 includes a powerful new feature: the ability to create OLE servers. An OLE server is an application that exposes functionality that can be used and reused by other applications through OLE Automation. For example, you can create an OLE server that displays reuseable forms, implements business rules, or packages a complex routine into a simple component that other programmers can use.</P>
<p>The Enterprise Edition of Visual Basic includes an additional new feature, Remote Automation. Remote Automation enables you to run an OLE server on one machine and the client application on a separate machine on the network. This is extremely useful for: 3-tier client/server, asynchronous processing, offloading work to underutilized machines, and reducing client maintenance.</P>
<p>Together these new features provide the foundation for building sophisticated reusable application components and distributing those components throughout the enterprise.</P>
<p>This document provides an overview of OLE servers and explains how to use Visual Basic 4.0 to create an OLE server. </P>
<H2>Overview of OLE Servers</H2><p>An OLE server is an application that exposes objects that can be used by other applications. An OLE server provides code that you do not have to write. Any application that supports OLE Automation can control an OLE server.</P>
<p>For example, Microsoft Excel is an OLE server. Microsoft Excel exposes objects such as a Worksheet, a Chart, and so forth. From a Visual Basic application, you can send data to Microsoft Excel and create a chart. You don't need to know the details of creating a chart, you simply create an instance of the objects you need, set properties and execute a method to create the chart.</P>
<p>The figure below shows how an OLE server created with Visual Basic could be used by any number of other applications.</P>
<p><img src="60012.gif"></P>
<H2> </A>Creating Components Within a Visual Basic Project</H2><p>When creating OLE servers in Visual Basic, the first step is to define objects within your Visual Basic project. These objects can then be used within your Visual Basic Project or exposed to other applications.</P>
<h3>Class Module=Object Definition</H3><p>Visual Basic 4.0 includes a new type of code module called a Class Module. Each class module defines a blueprint for an object. After you have added a class module to your project, you can define custom methods and properties for that class. To define methods for a class, you simply create Public <B>Sub</B> and <B>Function</B> procedures within the class module. To define a property for the class, you either create property procedures or define <B>Public</B> variables. Property procedures enable you to execute code when a property is set or retrieved. Public variables simply hold the property value.</P>
<p>For example, if you wanted to create an Employee object with the following characteristics:</P>
<p><img src="60013.gif"></P>
<p>you would create a class module as follows:</P>
<p><img src="60014.gif"></P>
<p>Once you have created your class, you programmatically create instances of that class. The instance of the class is the object. You can create multiple objects of the same class. You use the <B>Dim </B>statement to create an instance of the class. For example:</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim Employee1 As New Class1
Dim Employee2 As New Class1

Employee1.EmployeeName = "Joe"
Employee2.EmployeeName = "Mary"

Employee1.Hours = 45
Employee2.Hours = 50

Employee1.HourlyWage = 10
Employee2.HourlyWage = 12

MsgBox Employee1.ComputeSalary
MsgBox Employee2.ComputeSalary
</font></pre>
<P></P>
<h3> </A>Creating an OLE Server</H3><p>Once you have objects defined in your Visual Basic application, you can easily turn your application into an OLE server and make those objects available to other applications.</P>
<p>To create an OLE server, you will need to set some project options and set some properties of the class modules that you want to expose.</P>
<H4> </A>Setting Project options</H4><p>The first step when creating an OLE server is to set the Project options. This can be done from the Project tab in the Options dialog.</P>
<p><img src="60015.gif"></P>
<p>For most OLE servers, you will set the startup form to Sub Main. The code in the Sub Main procedure executes when the OLE server starts. Define the Sub Main procedure in a Standard module.</P>
<p>The project name is the name that the client application programmatically uses to refer to your server. The following example shows the code from a client application to create an instance of a class named EmployeeClass in a server named MyServer.</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim x as Object
Set x = CreateObject ("MyServer.EmployeeClass")</font></pre>
<p>You can run multiple instances of Visual Basic. This is very useful for debugging OLE servers. You can run a client in one instance and a server in another.</P>
<p>To test your OLE Server, set StartMode to OLE server. This causes Visual Basic to keep the project running even though no code is executing. This enables you to start a client application to test your OLE server application in the Visual Basic development environment.</P>
<H4> </A>Setting Class Module properties</H4><p>To make your objects available to other applications, set the class module <B>Public</B> property and the <B>Instancing </B>property.</P>
<p><img src="60016.gif"></P>
<H5 CLASS="h4"> </A>Public</H5><p>The <B>Public </B>property determines whether the class is visible to other applications. If <B>Public</B> is <B>False</B>, the class is not available to other applications and the <B>Instancing</B> property is ignored.</P>
<p>If <B>Public</B> is <B>True</B> and <B>Instancing</B> is 1 or 2, the class can be created and controlled by other applications. If Public is <B>True</B> and <B>Instancing</B> is 0 (Not Creatable), other applications can control an existing instance of the class, but cannot create new instances.</P>
<H5 CLASS="h4"> </A>Instancing</H5><p>The <B>Instancing</B> property determines if applications outside your project can declare new instances of your class.</P>
<p>If you set <B>Instancing</B> to 1-Creatable SingleUse, a separate OLE server executable is started for each instance of this class. For example, if a client application creates two instances of Class1, Visual Basic starts two separate server executables.</P>
<p>If you set <B>Instancing</B> to 2-Creatable MultiUse, one OLE server executable can service multiple clients. For example, if a client application creates two instances of Class1, Visual Basic starts one server executable. That executable creates two instances of Class1.</P>
<p>Setting <B>Instancing</B> to MultiUse minimizes resource use because you will only run one copy of the OLE server. However, all requests from client applications are processed serially; that is, the server won't execute a second request until it has completed the first request. If you set <B>Instancing</B> to SingleUse each OLE server executable can process requests independently. This is especially important with Remote Automation where may clients might make requests at the same time.</P>
<H5 CLASS="h4"> </A>Name</H5><p>The <B>Name </B>property is the name the client application uses to create an instance of the class.</P>
<h3> </A>Using Your OLE Server</H3><p>Once you have created your OLE server, you can use the objects your server exposes from any application that supports OLE Automation. For example, from Microsoft Excel you could make a reference to the server application and then use any of the objects exposed by that server. </P>
<P CLASS="nt"><B>Note</B>&nbsp;&nbsp;&nbsp;To make a reference in Microsoft Excel you must have a module sheet active. From the Tools menu, choose References to display the References dialog.</P>
<p>For example:</P>
<p><img src="60017.gif"></P>
<p>Making a reference to the OLE server enables you to use the Object Browser to browse the objects that the server provides. To display the Object Browser in Microsoft Excel, choose the Object Browser command from the View menu. For example, the server created previously would appear as follows in the object browser.</P>
<p><img src="60018.gif"></P>
<p>After you have made a reference to the OLE server, you can begin to work with the server's objects. The example below shows using the server's objects from Microsoft Excel. Note that this same code could be run in Microsoft Access, Microsoft Project, or another instance of Microsoft Visual Basic.</P>
<p><img src="60019.gif"></P>
<h3> </A>Compiling Your OLE Server</H3><p>Once you have tested your OLE server, you are ready to compile the server. You can compile your OLE Server to an executable file or to an OLE DLL.</P>
<h3> </A>Creating an OLE Executable</H3><p>If you choose Make EXE from the File menu, the OLE Server is created as an <I>out-of-process</I> server. When a client application uses an out-of-process server, the server runs in its own process space (a separate application). Calls between a client and the server pass through the OLE interface.</P>
<h3> </A>Creating an OLE DLL</H3><p>If you choose Make OLE DLL, the OLE server is created as an <I>in-process</I> OLE server (a DLL). When a client application uses an in-process server, the server runs in the same address spaces as the client application and is significantly faster than calling an out-of process server.</P>
<h3> </A>Choosing Between an OLE Executable and an OLE DLL</H3><p>When choosing between an OLE Executable and an OLE DLL, the main consideration is speed versus flexibility. An OLE DLL will usually be considerably faster than an OLE executable because the OLE DLL runs in the same process space as the client application. </P>
<p>However, there are times when you need an OLE executable in order to achieve a desired result. Some examples of when you would need to use an OLE executable include: running an OLE server asynchronously (asynchronous operations must execute in a separate process), running an OLE server on a different machine, and displaying modeless forms from an OLE server.</P>
<h3> </A>Creating Collection Objects</H3><p>You can store sets of related objects in a <B>Collection</B> object. A <B>Collection </B>object is a predefined object in Visual Basic and be created in the same way as other objects. For example:</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim Employees As New Collection</font></pre>
<p>Once you have created a <B>Collection</B> object, you can add items to the <B>Collection</B> using the <B>Add</B> method. For example:</P>

<pre><FONT FACE="Courier New" SIZE="3">Private Function AddEmployee(x, y, z)
    Dim Employee As New EmployeeClass
    Employee.EmployeeName = x
    Employee.Hours = y
    Employee.HourlyWage = z
    Employees.Add Employee
End Function</font></pre>
<p>Storing groups of related objects in a collection enables you to easily work with those objects as a group. For example, you could use the Employees <B>Collection</B> created above to print a list of all Employees:</P>

<pre><FONT FACE="Courier New" SIZE="3">Private Sub cmdPrintEmployees_Click()
    For Each x In Employees
        Print x.EmployeeName, x.ComputeSalary
    Next
End Sub</font></pre>
<h3> </A>Remote OLE Automation</H3><p>Remote Automation enables you to run your OLE server on one machine and your client application on a separate machine. You can now easily create applications that divide their processing across the network, providing increased scalability, improved client maintenance, and improved performance.</P>
<p>As shown in the following diagram, Remote Automation takes OLE Automation requests from the client, sends them across the network using Remote Procedure Calls (RPC), and receives them on the server. The components necessary for Remote Automation are available in the Enterprise Edition of Visual Basic.</P>
<p><img src="60020.gif"></P>
<p>Neither the client nor the server knows that the connection is remote. No special coding is required in the server. Even though a client application is accessing an OLE server on another machine, Remote Automation makes the transaction "look like" local OLE Automation to both the client application and the OLE server.</P>
<p>Remote Automation is a key enabling technology for easily building distributed three-tier client-server applications. as well as offloading processing and decreasing client maintenance costs.</P>
<h3> </A>Calling an OLE Server Asynchronously</H3><p>You may want to enable your users to start a long procedure on an OLE server and continue working without waiting for the procedure to finish. This can be done by running your OLE server application asynchronously with your OLE client application. The server would send a message to the client application when the process had finished.</P>
<p>For example, if you have a lengthy report generation task to do, you can have this execute in the background, freeing up the client application to perform other tasks.</P>
<p><B>To enable an asynchronous method </B></P>
<OL>Create a method on your OLE server that enables a timer on a form.</LI><LI CLASS="OLI1">Code the timer event to perform the actual processing.</LI><LI CLASS="OLI1">Include a method on the client application that the server can call to notify the client that the process has completed.
<P CLASS="lp1">The client application invokes a server method to start a background process. The client passes an object to the server that the server can use to notify the client when the process has finished.</P>

<P CLASS="lp1">When the process is finished, the server application invokes a method on the object received from the client application.</P></LI></OL></SPAN><p>Below is an example of calling an OLE server asynchronously. The first procedure is from the client application. It creates an instance of the object it will pass to the OLE server (to receive notification back from the server when it is finished processing) as well as an instance of the server itself. It then calls a method in the server.. The second procedure is the method being called in the OLE server application. Note that the last line in this procedure enables a <B>Timer </B>control. The code in the <B>Timer</B> control does the actual processing in the server application. Using a <B>Timer </B>control allows the method in the server to complete processing and return control to the client application.</P>

<pre><FONT FACE="Courier New" SIZE="3">Private Sub cmdGetDirectoryInfo_Click()
    Dim AsyncObject As New Async
    Set MyDrive = CreateObject("Server2.Drive")
    MyDrive.GetDirectoryInfo StartingPath:="C:\", _
        CallerObject:=AsyncObject
End Sub

Public Sub GetDirectoryInfo(StartPath As String, CallerObject As Object)
    Dim MyForm As New Form1 'create an instance of form1
    gStartingPath = StartPath
    Set gCallerObject = CallerObject
    gCallerObject.Status "Starting..."
    'kick off timer w/code to get the directory info
    Set MyForm.CallBack = Me 'so the timer knows what object to callback
    MyForm.Timer1.Enabled = True
End Sub</font></pre>
<H2> </A>Summary</H2><p>The ability to create OLE Automation servers is one of the most exciting new features of Visual Basic 4.0. Sharing code with other programmers no longer involves copying actual source code into several projects. Now, programmers can simply invoke methods and set properties of your OLE server objects to achieve the desired result. You can update the OLE server without changing the client application. Using Remote OLE Automation enables you to distribute your applications throughout the network.</P>
<H2> </A>For More Information</H2><p>For more information on building OLE servers, see the <I>Microsoft Visual Basic Professional Features Volume 1:</I> <I>Creating OLE Servers</I> and Chapter 7, "Implementing OLE Servers" in the <I>Microsoft Visual Basic Building Client/Server Applications </I>guide (Enterprise Edition).</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transport Independence</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Transport Independence</H2><p>We've focused on TCP/IP for most of this article, but we promised to describe how an application can use Windows Sockets other transport protocols in Windows&nbsp;NT and Chicago. We'll focus on the highlights and the key features that differentiate different transport protocols, and on the mechanisms for opening sockets for use with different transport protocols.</P>
<p>Although these are not explicitly addressed in the Windows Sockets specification, the fact that the fundamental job of a transport protocol is data transfer, along with the fact that Windows Sockets provides a rich interface for low-level data transfer in applications, make the interface to Windows Sockets over different transport protocols quite feasible. In fact, having a common, well-known API interface allows applications to be ported quickly between different transport protocols, and there are several successful examples of this.</P>
<p>Because of the architecture of the Windows Sockets components of Windows&nbsp;NT and Chicago, all supported transports are accessed through the same DLL, WSOCK32.DLL. In fact, a single application may simultaneously use sockets of different transport protocols. </P>
<p>An application uses the parameters to the <B>socket()</B> API to specify the protocol it desires. For example, a TCP socket is opened with</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">s_tcp = socket( AF_INET, SOCK_STREAM, IPPROTO_TCP );</font></pre>
<p>while an SPX socket is opened with</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">s_spx = socket( AF_IPX, SOCK_SEQPACKET, NSPROTO_SPX );</font></pre>
<p>After opening a socket for a specific protocol, all actions performed on the socket go through the specified protocol. In the above example, if the application did a <B>listen()</B> on the s_tcp socket but not on the s_spx socket, it would receive incoming connects through TCP but not receive incoming connects through SPX.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Implementing</H2><p>Building an application to use these agents does require some significant shifts in programming methods. The application should be coded to support:</P>
<UL><LI>     Synchronous connections: The application waits for results to arrive.</LI><LI>     Asynchronous connections: The application continues until the results eventually arrive.</LI></UL><p>The agent should always supply results to the application in the same format, MDB tables.</P>
<p>Our simple sample applications (HOST.MAK and REMOTE.MAK) demonstrate that it can be done. Some suggestions for building applications are: </P>
<UL><LI>     Record each request in a local MDB table, giving it a unique ID.</LI><LI>     Put all the controls affected by a query on a form, on a frame control, on a panel control, or on a picture box control, and disable this parent window while the query is pending.

<UL><LI>     Place an informational label on the parent window.</LI><LI>     Place the ID into the tag so that the controls affected may be found when the query returns.</LI></UL></LI><LI>     Use one timer only: Whenever it fires, check for all pending requests.</LI></UL></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parameterize queries instead of using dynamic SQL text (especially for ODBC)</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Parameterize queries instead of using dynamic SQL text (especially for ODBC)</H3><P CLASS="nt"><B>Note</B>   This tip is especially important for users with limited memory. Avoiding query compilation means that quite a large part of the Jet code will not be used, leaving the memory available for your application to use. See also #7.</P>
<p>A common requirement applications have is to build a SQL string based on values that the user provides. This often leads to code that looks like the following, which finds all authors whose name start with a given letter <B>firstletter</B>:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Dim d As Database, rs As recordset
Set d = OpenDatabase("biblio.mdb")
firstletter = "G"
sqlstr = "Select * from Authors where Author like """ &amp; firstletter &amp; "*"""
Set rs = d.OpenRecordset(sqlstr)
Debug.Print rs!Author</font></pre>
<p>This code uses Basic to build a SQL string and then asks Jet to execute that SQL statement. This technique is often referred to as using <I>dynamic SQL</I>. Some of the reasons given for using this are:</P>
<P><ul><li>    It is easy and intuitive.</P>
<P><li>    You don't clutter up the .MDB with queries.</P>
<P><li>    There's no other way - <I>not true!</I></P></ul>
<p>Unfortunately the penalties with doing this can be quite high - especially when using ODBC data. The main steps that happen are:</P>
<P>1.    Jet parses the SQL string.</P>
<P>2.    Jet compiles the SQL string, determining which parts go to the ODBC server.</P>
<P>3.    Jet builds a server specific query and sends it to the ODBC server.</P>
<P>4.    The ODBC server parses and compiles the SQL string.</P>
<P>5.    The ODBC server retrieves the results and returns them to Jet.</P>
<P>6.    DAO looks at the results and builds the appropriate recordset and field objects.</P>
<p>Another alternative to creating SQL strings dynamically is to use parameterized queries that you create ahead of time. These are queries that have variables in place of actual values in the SQL statement. Your code gathers the values for these variables from the user and then tells the engine what they are. Once the parameterized query has been saved and compiled, Jet can do the following, omitting several steps above:</P>
<P>1.    Jet sends a parameterized query to the ODBC server.</P>
<P>2.    The ODBC server parses and compiles the SQL string.</P>
<P>3.    Jet passes the values for the parameters.</P>
<P>4.    The ODBC server retrieves the results and returns them to Jet.</P>
<p>Already this is less steps than above. However, if you wish to get more values from the user and run the same query with different values, you only need to repeat steps 3 and 4. This is a substantial saving, especially for client-server applications. (Note: if you're not interested in updating the results and the query uses only server data, pass-through queries might be even better.)</P>
<p>To do this in DAO, you use the Parameters collection on a Querydef. For example, the following code creates the query (which you would normally do once through the Microsoft&nbsp;Access query designer):</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">' This code only executed once - or done in query designer
Dim qd As querydef
Set qd = d.CreateQueryDef("AuthorLike", "PARAMETERS FirstLetter Text; SELECT DISTINCTROW Authors.Au_ID, Authors.Author FROM Authors WHERE ((Authors.Author Like [FirstLetter]))")
qd.Close</font></pre>
<p>Once the query is created, you can set the parameters from code as follows:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">firstletter = InputBox("Enter first letter of author's name")
Set qd = d.OpenQueryDef("AuthorLike")
qd!firstletter = "A*"
Set ds = qd.CreateDynaset()
...
qd!firstletter = "S*"
Set ds = qd.CreateDynaset()</font></pre>
<p>As you can see, the code is shorter, easier to understand, easier to maintain - and actually runs faster as well.</P></BODY></HTML>

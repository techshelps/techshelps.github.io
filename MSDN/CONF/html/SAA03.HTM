<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Session Introduction</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Session Introduction</H2><p>Microsoft&reg; Visual FoxPro&trade; presents us with a radically new way of looking at building applications. With the addition of object orientation to the product, Microsoft FoxPro&reg; has matured into a development language that allows us to build arsenals of classes to speed us along the road to building bullet-proof applications quicker than we ever thought possible.</P>
<p>The watchword in FoxPro 2.x development was reusability. Still, FoxPro 2.x's modular style of development did not enforce this practice. Frequently, modules built in FoxPro 2.x were first built "specific" and only later made generic.</P>
<p>The core of software development in an object oriented environment is creating base classes and then building additional classes and objects from those classes. This, by definition, forces us to think in terms of reusability.</P>
<p>Visual FoxPro is a "hybrid" language. Like C++, FoxPro does not require that you use object-oriented programming (OOP) in your systems. Software may still be developed modularly as it was done in the past. OOP, however, adds a powerful new dimension to our software development efforts.</P>
<p>This session will introduce Object Orientation and show examples using Visual FoxPro&nbsp;3.0.</P></BODY></HTML>

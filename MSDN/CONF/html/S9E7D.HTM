<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TAPI 2.0 is Comprehensive</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>TAPI 2.0 is Comprehensive</H3><p>TAPI 2.0 and the Windows&nbsp;NT and Windows&nbsp;95 operating systems provide a comprehensive foundation for telephony applications, which allows developers to create a wide range of products. The exhaustive list of telephony features supported by TAPI means that a developer can telephone-enable virtually any general purpose application. And TAPI provides unrivaled supplementary and extended support for . telephony-centric applications.</P>
<p>TAPI 2.0's support of Unicode makes it easier to create applications that work globally. And, of course, adding to the comprehensiveness of the Windows telephony platform are the APIs and other complementing support from WOSA elements. Additionally, ActiveX Controls for telephony, provided by a variety of vendors, allow corporate developers to put together powerful telephony applications even faster and more easily using tools they already understand. </P>
<H4> </A>Providing Four Levels of Telephony Service</H4><p>To provide developers with maximum flexibility, telephony support can be implemented at four levels with TAPI:</P>
<UL><LI>Assisted Telephony</LI><LI>Basic Telephony Services</LI><LI>Supplemental Telephony Services</LI><LI>Extended Telephony Services</LI></UL><H5 CLASS="h4"> </A>Assisted Telephony</H5><p>Assisted Telephony is a small set of functions that provide very basic telephony functions to primarily non-telephonic applications. This valuable feature is designed to make the establishment of voice calls and of media calls available to any Win32-based application, not just those dedicated to telephonic functionality. In other words, Assisted Telephony lets applications make telephone calls without needing to be aware of the details of the services of the full Telephony API.</P>
<p>Assisted Telephony extends telephony to word processors, spreadsheets, databases, personal information managers, and other non-Telephony applications. For example, adding an Assisted Telephony function (tapiRequestMakeCall) to a spreadsheet lets users automatically dial telephone numbers stored in the spreadsheet (or in a connected database). Assisted Telephony is the easiest and most efficient way to give telephonic functionality to non-telephonic applications.</P>
<H5 CLASS="h4"> </A>Basic Telephony Services</H5><p>Basic Telephony Services, rather than Assisted Telephony, is used for applications whose telephony functionality goes beyond just the making or receiving of a call. The complete TAPI defines three levels of service, of which Basic Telephony is the first.</P>
<p>Basic Telephony Services are a minimal subset of the Win32 Telephony specification. Since all service providers must support the functions of Basic Services, applications that use only these functions will work with any TAPI service provider. The functionality contained in Basic Telephony roughly corresponds to the features of "Plain Old Telephone Service" (POTS) such as make call, hang up, and answer call. </P>
<p>Basic Services include:</P>
<UL><LI>Address translation</LI><LI>Making calls</LI><LI>Call states and events</LI><LI>Answering calls</LI><LI>Dropping calls</LI><LI>Call handle manipulation</LI><LI>Assisted telephony server</LI></UL><p>Today, many programmers will use only the services provided by Basic Telephony. And, at a minimum, service providers are be designed to support all of the Basic Telephony functions. Other application developers, such as those writing code for PBX phone systems, will need the functions of Supplementary Telephony.</P>
<H5 CLASS="h4"> </A>Supplementary Telephony Services</H5><p>Supplementary Telephony Services include the bulk of what TAPI offers&mdash;a very complete set of functions to enable a wide range of powerful, easy-to-use telephony applications. In Win32 Telephony, supplementary functions are those whose form and functionality have been defined by the API description, but which are not required in Basic Telephony. They are functions that developers of telephony applications and service providers may choose to implement to suit the design of their custom products. So, in contrast to Basic Telephony functions, Supplementary Telephony functions are optional. </P>
<p>Supplementary Services include:</P>
<UL><LI>Hold</LI><LI>Transfer</LI><LI>Conference</LI><LI>Forward</LI><LI>Park</LI><LI>Pickup</LI><LI>Completion</LI><LI>Accept, redirect, reject</LI><LI>Secure from interruptions</LI><LI>Generating digits and tones</LI><LI>Digit and tone monitoring</LI><LI>Media mode monitoring</LI><LI>Media stream routing and control</LI><LI>User-user info</LI><LI>Change call parameters</LI><LI>Phone terminal control</LI></UL><H5 CLASS="h4"> </A>Extended Telephony Services</H5><p>TAPI contains a well-defined API extension mechanism that allows service-provider vendors to extend the Telephony API using device-specific extensions. Extended Services (or Device-Specific Services) include all extensions to the API defined by a particular service provider. Since the API defines the extension mechanism only, the definition of the Extended-Service behavior are completely specified by the service provider. </P>
<p>TAPI's extension mechanism allows service-provider vendors to create functions not directly defined by the Telephony API. This flexibility provides the power developers need to create their own custom, value-added marketplace solutions.</P>
<H4> </A>A Comprehensive Level of Control</H4><p>TAPI 2.0's comprehensiveness is carefully thought out. For example, it provides developers with an excellent level of control&mdash;while guarding against allowing excessive controls that might limit applications to specific hardware settings.</P>
<p>Some of the more difficult decisions to be made by the architects of a telephony API relate to the level of control over specific hardware that is to be permitted to applications. </P>
<p>For example, developers of applications that use telephony boards designed to the MVIP specification are accustomed to controlling which "timeslot" on a high-bandwidth channel is carrying the signal for a particular call to and from the board in question. Such applications would not be easily portable to, say, a modem or PBX phone. An API that required (or even encouraged, by making available) such detailed control would not facilitate the development of highly portable shrink-wrapped commercial telephony applications. The precise control of such low-level details is more appropriately assigned to an interface between a low-level device driver and the hardware, rather than the relatively high-level interface between the operating system and application programs.</P>
<p>On the other hand, if the API gives applications insufficient control of call details, some beneficial functionality may be lost. Users complain of being unable to perform certain functions through their software that are easily performed through the telephone itself. An example of this is in the area of establishing and controlling multiparty audio conference calls. It is possible to create a very simple conference call API, but this may not be flexible across a variety of platforms (PBX and Centrex conferencing models differ in significant ways), to allow the addition and removal of arbitrary calls from the conference, and so forth. The ability to control certain low-level elements such as the timing and duration of Touch-Tone (DTMF) signals is also important to compatibility with other equipment.</P>
<H4> </A>Using Media-awareness</H4><p>A successful CTI API must implement basic call control features&mdash;but all this brings to users is, fundamentally, the ability to move the telephone user interface from the keypad to the PC screen. There are certainly benefits in this alone, such as allowing the interface to be context-specific (showing only the functions actually available at the moment) and eliminating the need to remember arcane multidigit feature activation codes and key-press sequences. Most CTI APIs to date have been limited to call control. Realization of the most significant benefits of computer telephony integration requires, however, the inclusion in the API of access to the "media stream"&mdash;the information content of the call.</P>
<p>Media-awareness comes in several flavors. First are those features that are unique to the telephony environment, such as the monitoring and generation of dual-tone multifrequency ("Touch Tone") digits and call progress signals. Since these features are not included in any other general-purpose operating system API, it is appropriate for the telephony API to include them directly.</P>
<p>Second are features that have been part of PC operating systems for many years and for which there are well-established APIs. These include the playing and recording of sound and the sending and receiving of data of various kinds. Replicating these features in the telephony API would be redundant and confusing to programmers, and would inhibit the use of the infrastructure and tools that already exist for use with those other APIs. For example, developers of modem communications software are much more likely to migrate their code from directly controlling the modem to using a telephony API for call control if their investment in finely-tuned terminal emulation and file transfer code, which uses existing operating system APIs for data transfer, is preserved. Developers of telephony applications appreciate being able to use higher-level audio-related features such as speech recognition, text-to-speech, and mixer control, which have already been developed for use with local audio equipment (microphones and speakers), to manage telephone calls as well. A well-architected CTI API must allow telephony device drivers to be associated with linked device drivers that are accessed via these media stream APIs, and provide means for applications to become aware of the device identifiers associated with the device to be used via these other APIs to give access to the media stream of the call.</P>
<H4> </A>Managing Media Streams</H4><p>Windows TAPI supports telephony as a service at the operating system level, giving it the ability to handle media streams and support multiple applications.</P>
<p>There are two types of information transmitted over the phone network. There is information that is carried from one endpoint to another, such as a voice conversation, a data modem session or a fax. This is known as <I>a media stream</I>. The other type of information is <I>signaling</I>. Unlike a media stream, signaling only moves between an endpoint on the network and the network itself. Signaling comprises the housekeeping instructions to and from the network, such as dialing or transferring a call or delivering Caller ID.</P>
<p>TAPI provides access to the signaling for setting up calls and managing them, as well as preserving existing media stream functionality to manipulate the information carried over the connection TAPI establishes. This allows applications to not only dial and transfer calls, but also to support fax, desktop conferencing or applications that use the telephone set dial pad to access voice-prompted menus.</P>
<p>TAPI's tight integration with other Windows APIs allows it to seamlessly invoke other APIs and Win32 functions, such as the Network Driver Interface Specification (NDIS), COMM, Wave Audio, MIDI, and MCI to handle media, sound, and video.</P>
<H4> </A>Evolving the Telephony API </H4><p>Microsoft has steadily evolved its Telephony API, as it has evolved its Windows operating systems. TAPI's evolution has consistently been guided by the active involvement of leaders from throughout the telecommunications industry, including close consultation with independent hardware and software vendors, and service providers. The result has been an ever more powerful and flexible telephony platform for developers and end users. </P>
<H5 CLASS="h4"> </A>TAPI 1.3</H5><p>TAPI 1.3 was released as a standalone SDK in November 1993. It focused on call-control applications such as PBX support, but handled only 16-bit applications and didn't provide "dialing properties."</P>
<H5 CLASS="h4"> </A>TAPI 1.4</H5><p>TAPI 1.4, released as part of Windows&nbsp;95, provided substantial enhancements, including:</P>
<UL><LI>Support for 32-bit applications</LI><LI>Plug-and-Play convenience</LI><LI>Common dialog for dialing properties</LI><LI>Access to country list</LI><LI>Get/Set application priorities</LI><LI>Provider-initiated conferences</LI><LI>Other capability/status extensions</LI><LI>Universal modem driver</LI></UL><p>Both TAPI 1.3 and 1.4 provided excellent first-party call control. Some companies created client/server applications, but had to provide additional "plumbing" on their own&mdash;something that is being solved with TAPI 2.0.</P>
<H5 CLASS="h4"> </A>TAPI 2.0</H5><p>TAPI 2.0 is built into Windows&nbsp;NT Server 4.0 and Windows&nbsp;NT Workstation 4.0 (and will soon be made available for Windows&nbsp;95). For developers, the TAPI SDK is integrated with the Win32 SDK developer's platform. That platform is part of Microsoft Developer Network (MSDN), for Windows&nbsp;95, Windows&nbsp;NT Workstation, and Windows&nbsp;NT Server. The SDK includes headers, libraries, sample code, and documentation. TAPI 2.0 includes these enhancements:</P>
<UL><LI><B>Full 32-bit architecture</B><B>.</B> All core TAPI components are now based on Win32, with full support for non-Intel processors running Windows&nbsp;NT Server 4.0 or Windows&nbsp;NT Workstation 4.0. There is also full support for symmetrical multiprocessing, multithreaded applications, and preemptive multitasking.</LI><LI><B>32-bit application portability</B><B>.</B> Existing applications that are based on Win32 full TAPI or TAPI assisted telephony support and currently run on Windows&nbsp;95 using TAPI 1.4, will run on Windows&nbsp;NT Workstation 4.0 or Windows&nbsp;NT Server 4.0 on the Intel x86 family of microprocessors without manipulation or recompilation.</LI><LI><B>16-bit application portability</B><B>.</B> Existing applications that are based on Win16 full TAPI or TAPI assisted telephony support and currently run on Windows&nbsp;95 and Windows 3.1 using TAPI 1.3, will run on Windows&nbsp;NT Workstation 4.0 or <BR>Windows&nbsp;NT Server 4.0 on the Intel x86 family of microprocessors without manipulation or recompilation.</LI><LI><B>Unicode support</B><B>.</B> Win32 applications can now choose to call the existing ANSI TAPI functions or to call the new Unicode versions of functions. Unicode support makes it easier and faster for developers to create products and localize them to different languages. Unicode is a 16-bit, fixed-width character encoding standard that encompasses virtually all of the characters commonly used on computers today&mdash;this includes most written languages, plus publishing characters, mathematical and technical symbols, and punctuation marks.</LI><LI><B>Expanded feature support for call center applications</B><B>.</B> TAPI now supports an expanded set of features to enable more complete call center operation with Windows. Here is brief list of some of the new call center features supported with TAPI 2.0:

<UL><LI>ACD queues</LI><LI>Agent log-on, state and activity monitoring and control</LI><LI>Predictive dialing</LI><LI>Call routing</LI><LI>Call data</LI><LI>Call treatment</LI><LI>Message waiting and display control without using telephone set functions</LI></UL></LI><LI><B>Registry support</B><B>. </B>All telephony parameters are now stored in the Windows registry. Telephony service providers and all stored parameters can be updated across the LAN, making it easier to set up, use, and manage computer telephony solutions with Windows.</LI><LI><B>Quality of Service (QoS) support</B>. Applications can request, negotiate, and re-negotiate quality of service (QoS) performance parameters with the network and receive an indication of QoS on inbound calls and when QoS is changed by the network. The QoS structures are binary-compatible with those used in the Windows Sockets 2.0 (WINSOCK) specification. Improved QoS support reduces or eliminates latency and other negative characteristics for applications, especially voice and data applications, over various networks. Going forward, QoS support  enables the easier migration of services and applications previously acceptable only over the public switched telephone network to be supported over a LAN or WAN based on TCP/IP, ATM, or other technology.</LI><LI><B>Enhanced device sharing</B>. Applications can restrict the handling of inbound calls on a device to a single address, to support features, such as distinctive ringing, when used to indicate the expected media mode of the inbound calls. Applications making outbound calls can set the device configuration when making a call. This makes computer telephony support in the home or small office even more useful.</LI><LI><B>NDIS TAPI capability</B>. The support previously provided in Windows&nbsp;NT 3.51 for ISDN Wide Area Network (WAN) miniports under Remote Access Service (RAS) is preserved. NDIS WAN miniport drivers are supported under a kernel mode service provider without modification. TAPI is used to support essentially all dialing functions within the Windows&nbsp;NT operating system, which includes control of WAN cards for remote access. Support for NDISTAPI drivers means it will be easier to find WAN cards that work with your Windows-based PC.</LI><LI><B>Several changes and additions to TAPI functions</B>. Many new TAPI functions and messages are now available with TAPI 2.0. In addition, several functions and messages already supported by TAPI 1.4 were changed in some measure to make them easier to use and more consistent in their operation. These enhancements make TAPI, already an excellent platform for telephony applications, even more comprehensive. For a complete list of these new functions and instructions regarding their programming use, consult the Microsoft Developer Network resources.</LI></UL><H4> </A>Building in Extensibility</H4><p>Part of evolving an API is to build into it a solid path for extensibility. Not even the most rich and robust of CTI APIs will ever encompass every feature that might be created by the telephony industry. So a CTI API must grow over time to include new features that emerge and gain acceptance. TAPI was designed from the start to grow&mdash;to allow new fields to be added to data structures in a straightforward and backwardly-compatible manner, for new messages and events to be created, and so on. TAPI also allows a mixture of old and new drivers and applications to coexist through a version negotiation mechanism.</P>
<p>TAPI also allows developers of telephony drivers to include unique or advanced features in such a way that the presence of these features can be detected by applications that have been designed to use them, without blocking older applications that aren't able to take advantage of them. </P>
<H4> </A>Looking Ahead</H4><p>In the months following TAPI 2.0's release, Microsoft plans to release additional enhancements, which will include:</P>
<UL><LI>Windows Telephony Service (TAPISRV) extensions for client access.</LI><LI>TAPI 2.0 for Windows&nbsp;95 clients, with backwards compatibility for 16-bit TAPI Service Providers (TSP). This will allow Windows&nbsp;95 clients to take advantage of the built-in call center application hooks. </LI><LI>Client service provider for Windows&nbsp;95 and Windows&nbsp;NT 4.0 to make client/server telephony applications even easier to build.</LI><LI>Remote service provider, to enable even faster development of client/server telephony applications.</LI><LI>Remote administration tools, to make it easier for companies to set up and maintain client/server applications. Tools will include user access control, workstation/device associations, service provider configuration, status, events, and other reports.</LI></UL><p>Continuing to evolve the Telephony API is part of Microsoft's commitment to always providing the best platform for whatever services and applications the market creates a need for. Microsoft works constantly with customers and developers, seeking insights into how the platform should evolve.</P></BODY></HTML>

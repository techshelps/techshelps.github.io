<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making Direct ODBC Calls</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Making Direct ODBC Calls</H3><p>Another alternative to using Data Access Objects (DAO) and Microsoft Jet is to make direct calls to the ODBC API. This provides the advantages of tight control of the resources and access to extra functionality provided by ODBC, at the disadvantage of the extra coding complexity required. There is also no way to share connections between Jet and discrete ODBC calls, so you will pay the cost of more connection overhead and the inconvenience of multiple logins. The following code examples will give you an idea of what's involved:</P>
<p>The following code creates a connection to an ODBC data source:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">iRC = SQLAllocConnect(henv, hdbc)
If iRC &lt;&gt; SQL_SUCCESS Then
    MsgBox "Can't allocate ODBC connection handle.", 16
    Stop
Else
    sConnect = "DSN=" &amp; DSN &amp; ";UID=" &amp; USERNAME &amp; ";PWD=" &amp; PASSWORD &amp; ";DATABASE=" &amp; DBNAME
    sConnect = sConnect &amp; ";WSID=" &amp; HOSTNAME &amp; ";APP=" &amp; APPNAME
    sConnectBuffer = Space$(256)
    iRC = SQLDriverConnect(hdbc, Me.hWnd, sConnect, Len(sConnect), sConnectBuffer, Len(sConnectBuffer), ilenConnect, SQL_DRIVER_NOPROMPT)
    If iRC &lt;&gt; SQL_SUCCESS And iRC &lt;&gt; SQL_SUCCESS_WITH_INFO Then
        DescribeError hdbc, 0    ' sub to display the error
        Stop
    Else
        If iRC = SQL_SUCCESS_WITH_INFO Then DescribeError hdbc, 0
        iRC = SQLAllocStmt(hdbc, hstmt)
        If iRC &lt;&gt; SQL_SUCCESS Then
            MsgBox "Cannot allocate statment handle", 16
            Stop
        End If
    End If
End If
' Add the following line back to use asynchronous calls
' Attempt SQLSetStmtOption(hstmt, SQL_ASYNC_ENABLE, 1&amp;), "Can't set Async on"</font></pre>
<p>To actually execute a query, you could use code similar to:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">iRC = SQLExecDirect(hstmt, sQuery, Len(sQuery))
' Add the following lines back for asynchronous execution
'    Do While iRC = SQL_STILL_EXECUTING
'        DoEvents
'        iRC = SQLExecDirect(hstmt, sQuery, Len(sQuery))
'    Loop

If iRC &lt;&gt; SQL_SUCCESS Then
    DescribeError hdbc, hstmt
    Exit Sub
End If</font></pre>
<p>Following successful execution of the query, you could retrieve data using:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">iRC = SQLNumResultCols(hstmt, iNumCols)
If iRC &lt;&gt; SQL_SUCCESS Then
    DescribeError hdbc, hstmt
    Exit Sub
End If
    
Do While SQLFetch(hstmt) = SQL_SUCCESS
    sStuff = ""
    For iCount = 1 To iNumCols
        Attempt SQLGetData(hstmt, iCount, 1, sBuffer, iBufferLen, lOutLen), "Call to SQLGetData Failed"
        If lOutLen = -1 Then
            sStuff = sStuff &amp; "NULL" &amp; Chr$(9)
        Else
            sStuff = sStuff &amp; Left$(sBuffer, lOutLen) &amp; Chr$(9)
        End If
    Next iCount
    Debug.Print sStuff        ' output the data retrieved
    Loop

Attempt SQLFreeStmt(hstmt, SQL_CLOSE), "FreeStmt Failed"</font></pre>
<p>Final clean up of resources for the above code might look like:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">If hstmt &lt;&gt; 0 Then Attempt SQLFreeStmt(hstmt, 0), "Unable to free statment handle"
    If hdbc &lt;&gt; 0 Then Attempt SQLDisconnect(hdbc), "Unable to disconnect"
    If hdbc &lt;&gt; 0 Then Attempt SQLFreeConnect(hdbc), "Unable to free connection handle"</font></pre>
<p>Code for the Attempt subroutine is:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub Attempt (ResultCode As Integer, ErrorMessage As String)
If ResultCode &lt;&gt; SQL_SUCCESS Then
    lstMsgs.AddItem Format$(ResultCode) &amp; " - " &amp; ErrorMessage
    Stop
End If
End Sub</font></pre>
<H4> </A>More Information</H4><p>For more information on using direct ODBC calls from Microsoft&nbsp;Access, Microsoft Basic (or any Microsoft application that contains Basic), see the ODBC 2.0 SDK. This is available as part of the Microsoft Developers Network (MSDN) Level 2 subscription.</P></BODY></HTML>

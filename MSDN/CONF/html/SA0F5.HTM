<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Access Basic: OLE Automation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Access Basic: OLE Automation</H3><p>OLE is a standard way that applications use to expose (supply) their objects to external development tools, macro languages, and other applications that support OLE. OLE Automation is a development integration feature that enables you to access and manipulate another application's objects from outside that application. These exposed objects are called OLE components. Different applications can expose different kinds of OLE components. For example, a spreadsheet application may expose a spreadsheet, chart, cell, or range of cells as different types of objects. A word processor may expose objects such as documents, paragraphs, or sentences.</P>
<p>OLE Automation components differ from other OLE objects in that they can only be accessed using a programming or macro language such as Access Basic. OLE Automation objects aren't visible to the user, and are mostly used to automate repetitive tasks or tasks that don't involve user interaction. Since they are created using code, they are temporary and do not remain after the code is executed. For this reason, OLE Automation objects can't be linked or embedded. In comparison, OLE objects created using the Insert Object or Paste Special commands in Microsoft&nbsp;Access are visible to the user as linked or embedded objects in bound or unbound object frames. To update these objects, the user can double-click them to activate the object's application and make changes to the data.</P>
<p>When an object application supports OLE Automation, you can use Access Basic to access the OLE objects it exposes in one of two ways. First, you can invoke methods supported by the OLE objects. Second, you can retrieve and set OLE Automation object properties just as you can retrieve and set Microsoft&nbsp;Access object properties. This enables your Microsoft&nbsp;Access application to automate repetitive tasks, such as application-wide edits or updates. When talking about OLE Automation, <I>controller </I>applications takes the place of containers.</P>
<p>Here are some examples of OLE components that can be automated with the Microsoft&nbsp;Access database management system.</P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="136pt" VALIGN="TOP"><COL WIDTH="136pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Application</B></P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Examples of objects exposed</B></P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Microsoft Word (version 6.0)</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>WordBasic</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Microsoft Excel (version 5.0)</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Application Chart Worksheet</P></TD>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Microsoft Graph (version 5.0)</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Chart</P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H4> </A>Using the CreateObject Function </H4><p>You can add an object that isn't embedded in or linked to an unbound object frame by using the <B>CreateObject</B> function. This enables you to create objects that aren't visible to Microsoft&nbsp;Access users (for example, to perform automated tasks without displaying output to the user). Similarly, you can also retrieve and activate an object from a file by using the <B>GetObject</B> function.</P>
<p>You can manipulate other applications' OLE objects without creating a linked or embedded OLE object by using the <B>CreateObject</B> function. Since this type of OLE object isn't embedded or linked, it can be used for performing actions that don't require user interaction.</P>
<p>For example, to print a Word document without having to activate Word, you can place a Print button on your form and use Access Basic to create a Word OLE Automation object, activate it, and then print the document. </P>
<p>Before creating an OLE object with the <B>CreateObject</B> function, you define a variable that you can use to reference the object. You do this by declaring a variable of type <B>Object</B>. For example:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Dim MyObj As Object</font></pre>
<p>You then use the <B>CreateObject</B> function to create the OLE object. This function requires a single-string argument that indicates the object application name and the type of object you want to create. The combination of these two elements is the object's class. Use the following syntax to specify an object's class:</P>
<p>"appname.objecttype"</P>
<p>For example, when Microsoft Word exposes a WordBasic object and Microsoft Excel exposes a Worksheet object, these objects are specified as:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Word.Basic
Excel.Sheet.5</font></pre>
<p>There are two ways to specify OLE object names. You can either append the version number of the object application after the OLE object name, or leave the version number off. An object name with a version number appended, as in Excel.Sheet.5, specifies an object created with the specified version of the application. When you leave off the version number, as in Excel.Sheet, you specify an object created by the most recent version of the application. </P>
<p>Once you know the type of object you want to create, you use a <B>Set </B>statement to assign the object returned by the <B>CreateObject</B> function to the object variable. For example:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Dim Sheet as Object<BR>Set Sheet = CreateObject ("Excel.Sheet")</font></pre>
<p>To delete an OLE Automation object and close the object's application, use the <B>Nothing</B> reserved word with the <B>Set</B> statement. </P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Set Sheet = Nothing</font></pre>
<p>When this code is executed, Microsoft&nbsp;Access starts the object application automatically, if it isn't already running, and creates an OLE object. Unlike the image that is displayed when you create a linked or embedded object with an unbound object frame, the object's image isn't displayed anywhere in Microsoft&nbsp;Access, nor is the object's data updated by Microsoft&nbsp;Access. The object is part of the Microsoft application that creates it. This object can be referred to in Microsoft&nbsp;Access code using the object variable you defined. For example, you can write code such as the following to perform some simple actions in a Word document and then save the document:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Dim WordObj As Object<BR>Dim Count As Integer
    Set WordObj = CreateObject ("Word.Basic")
    WordObj.Fileopen "C:\WINWORD\TEST.DOC"

    ' Select and do text formatting.<BR>    WordObj.ParaUp 1<BR>    WordObj.ParaDown 1, 1<BR>    WordObj.Bold 1
    WordObj.EditSelectAll
    WordObj.FontSize 10
    ' Get the value from a control and insert it into the document.<BR>    GetCategory = Forms![MyForm]![Category Name]<BR>    WordObj.EndOfDocument            'Move the insertion point<BR>    WordObj.Insert GetCategory<BR>    WordObj.InsertPara                ' Insert a carriage return.<BR>
    ' Save the changes and close the document.
    WordObj.FileClose (1)</font></pre>
<p>You can create a Microsoft Excel OLE Automation object, such as a Worksheet object, and access its methods and properties in Access Basic. For example, the following code creates a worksheet called Budget, inserts a text file and a value from a Microsoft&nbsp;Access database, saves the worksheet, and closes the application.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub Check (FromMicrosoft&nbsp;Access As Integer)
    Dim Sheet As Object

    ' Create the object.
    Set Sheet = CreateObject("Excel.Sheet")

    ' Insert value from a Microsoft&nbsp;Access database into a cell.<BR>    Sheet.Cells (1,1).Value = FromMicrosoft&nbsp;Access

    ' Save the worksheet and close Microsoft Excel.
    Sheet.SaveAs("MySheet.XLS")<BR>    Set Sheet = Nothing        ' Setting the variable to Nothing also
                            ' closes the application.
End Sub</font></pre>
<H4> </A>Manipulating Objects</H4><p>Once you've created a variable that references an OLE object, you can manipulate the object in Microsoft&nbsp;Access in the same way you manipulate any Microsoft&nbsp;Access object, such as a control. You use the <I>object</I>.<I>property</I> syntax to set and retrieve the object's properties and to perform methods on the object.</P>
<p>To assign a value to an object's property, put the object variable and property name on the left side of an equation and the property setting on the right side. For example:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Dim Sheet As Object<BR><BR>    Set Sheet = CreateObject ("Excel.Sheet")
    Sheet.Name = "Sheet1"</font></pre>
<p>You can also retrieve property setting values from an object by assigning the object variable and property name to a variable:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Dim X As Variant
X = Sheet.Name</font></pre>
<p>In addition to setting and retrieving properties, you can manipulate an object using the methods it supports. Some methods may return a value. In WordBasic, however, you manipulate objects using WordBasic functions and statements. For example, in the following WordBasic macro, the <B>Bold</B> function returns True or False depending on whether the selected text in the WordBasic object is bold.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">' Bold function returns True or False.
Dim IsBold As Variant
Dim WordObj as Object

    Set WordObj = CreateObject ("Word.Basic")<BR>    WordObj.FileOpen "C:\WINWORD\LETTER.DOC"
    IsBold = WordObj.Bold ()
    If IsBold Then
        MsgBox "The text is bold."
    Else
        MsgBox "The text is not bold."
    End If</font></pre>
<H4> </A>Access Basic: OLE Controls</H4><p>In addition to OLE Automation, Microsoft&nbsp;Access supports the use of OLE Controls to extend its development environment. OLE Controls can be thought of as "plug-in" components that perform specific tasks within a Microsoft&nbsp;Access application. Examples include things like calendars, communication controls, multimedia controls, etc. An OLE Control is an component, which can be embedded, with in-place activation capabilities. Every OLE Control has three sets of attributes:</P>
<P>     <B>Properties.</B> Named characteristics or values of the control such as color, text, number, font, etc.</P>
<P>     <B>Events.</B> Actions triggered by the control in response to some other external actions on the control, such as clicking a mouse button or pressing a key.</P>
<P>     <B>Methods.</B> A function implemented in the control that allows external code to manipulate its appearance, behavior or properties. For example, an edit or other text-oriented control would support methods to allow the control container to retrieve or modify the current text, perhaps performing operations such as copy and paste. </P>
<p>The syntax for manipulating an OLE Control within Access Basic is identical to that of OLE Automation with the exception of CreateObject() and GetObject(). The properties and methods of a control are referred to as follows:</P>
<p><I>ControlName</I>.Object.<I>Property</I></P>
<p><I>ControlName</I>.Object<I>.Method</I></P></BODY></HTML>

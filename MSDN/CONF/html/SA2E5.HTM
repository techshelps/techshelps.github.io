<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using OLE Automation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Using OLE Automation</H2><p>No matter which Microsoft BASIC you use to start OLE automation (Access Basic, VBA for Microsoft Excel, or Visual Basic), you start it with one of two functions: </P>
<P><ul><li>    CreateObject() </P>
<P><li>    GetObject()</P></ul>
<p>Once you start OLE automation, you can think of it as a superset of all programming languages that support OLE automation as servers, such as Microsoft Excel and Word. For example, when you build an integrated business application in Access that uses Microsoft Excel as an OLE automation server, you use Microsoft Excel's objects, properties, and methods in your Access Basic code.</P>
<p>Since the Microsoft BASICs are so similar, you can often write code for the OLE automation server in the client just as you would if you were writing it in the server. If you're not comfortable with the server's macro language, start with code from the macro recorder, and then copy into the client. The following section describes how to port code between server and client.</P></BODY></HTML>

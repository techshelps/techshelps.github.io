<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Post Processing Tasks</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Post Processing Tasks</H3><p>Once all of the content has been moved into the database, the compiler can be used to perform post processing tasks on the data in the database. These tasks include verifying that all hypertext screen id are present in the database, verifying that all bitmaps called by the application are present on the hard drive, and building pre-defined lists of particular types of database screens.</P>
<p>One of the more interesting post processing tasks is building a full text search index for the text in the database. Our front-end application uses Index Applications Incorporated's Fast Text Search (FTS). This library allows efficient searching of large amounts of text. It is many times faster than using the database's own searching facilities.</P>
<p>The routine below illustrates how a full-text index is built. The text that we want to build an index for is in the Text field of the Screen table. Because the Text field of the Screen table can contain embedded bitmap and other data as well as text, the routine extracts only the text content of the field and stores it in the SearchText field of the Screen table record.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub Build_Fts ()
  Dim ds1 As dynaset

  'Create a new index file
  nftshnd = FtsCreate(sftsfile, 20, 3, 1, 1)

  'Open the new index file
  nftshnd = FtsOpen(sftsfile, 20, FTS_EXCL)
  If nftshnd &lt; 1 Then
    &lt;error trap&gt;
  End If

  'Set up first and last caluses of SQL queryt
  sSearch1 = "SELECT * FROM Screen WHERE Viewer = '"
  sSearch2 = "' ORDER BY ScreenId;"

  'Create a dynaset of all screens to index
  Set ds1 = gdbRunt.CreateDynaset(sSearch1 &amp; VN_RTF &amp; sSearch2)

  'first screen
  ds1.MoveFirst
  
  'Process all screens in dynaset
  Do Until ds1.EOF

    If ds1("Text").FieldSize() &lt;&gt; 0 Then
      'get screen record for atx control
      s = ds1("ScreenID")
      Read_ScreenID s
      'Put text in atx to strip it 
      Put_Text gatxRtf, CHUNK_TEXT
      'add title
      s = ds1("ScreenTitle") &amp; BLANK &amp; gatxRtf.Text

      'Get FTS integer key
      lftskey = FtsAdd(nftshnd, s)
      If lftskey &gt; 0 Then
        ds1.Edit
        ds1("SearchText") = s
        ds1("Fts") = lftskey
        ds1.Update
      End If
    End If
    ds1.MoveNext
  Loop

  'free up memory
  i = FtsClose(nftshnd)
  ds1.Close
End Sub</font></pre>
<p>The routine cycles through each record in the screen table and passes the contents of its SearchText field to the FTS DLL. FTS adds an entry to an index file it creates for the text passed and returns an integer. This integer is a key that FTS will use to identify the chunk of text later if the chunk contains a search phrase. The routine saves the integer key in the Screen table record.</P>
<p>The core of the routine is FtsAdd call. All of the other code Prepares the parameters for this call. (nftshand is a handle to the FTS index file. s is the unformatted text version of a Screen record Text field) and stores the return value (lftskey is a long integer that identifies this screen record from the perspective of FTS).</P>
<p></P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Color Management</TITLE> <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Color Management</H1>
<P>Technology Brief:</P>
<P>Server Operating System</P>
<p>If you or your users have a computer peripheral capable of capturing, displaying, printing, or in some other way dealing with color at a user-visible level, you are already aware of some of the problems inherent with dealing with color in the digital world. If you are tired of explaining to your users why they see different colors when they look at the same image on different monitors, if you have carefully put together a newsletter and wondered if the unexpected colors in the proof you received from your neighborhood printer was a cruel joke, if you have ever tried to buy a "Forest Green" shirt on the Internet and then wondered about the actual color of the shirt you received in the mail, you have experienced the problems with digital color first-hand. </P>
<p>Color management does not magically solve all of these problems; it simply gives you and the user more control over them. Basically, each color peripheral can differ on one or more of the following color characteristics: </P>
<UL><LI>Color space: RGB (monitors and scanners), CMYK(many printers),</LI><LI>Gamut range: 

<UL><LI>For printers, this varies for each supported medium and ink. </LI><LI>For monitors, this varies according to the phosphors used in the monitor and the type of video card. </LI><LI>For scanners, this varies according to the technology used (flatbed or drum), the CCD and light source, and the medium (reflective or transparent). </LI></UL></LI><LI>Gamma curve: 

<UL><LI>For printers, these curves vary for each supported medium. </LI><LI>For scanners, these curves vary between transparencies and reflective media. </LI><LI>For monitors, these curves vary by manufacturer but can be controlled with the appropriate video card. </LI></UL></LI><LI>White point</LI><LI>Viewing conditions  </LI></UL><p>In most cases, these differences are unavoidable because of the device or medium limitations. However, these differences can be tested for and recorded in an International Color Consortium (ICC) profile using one of many software and hardware products currently available on the market. These ICC profiles are then used to communicate the color information of each device through the Image Color Matching (ICM) API. Applications that call ICM API functions will be able to accurately display, print, and pass colors on to other users and applications. This approach helps ensure that colors are represented accurately to users, regardless of the device they use. </P>
<p>As you might imagine, this works only if all of the pieces are in place. Microsoft's first implementation of color management support was released in the Microsoft&reg; Windows&reg; 95 operating system as ICM 1.0. This version of ICM is designed to address the needs of applications that do not work in colors outside of RGB and that want color management to be fairly transparent for the end user. ICM 1.0 requires that ICC profiles be installed for all of the color devices on the user's system, and it requires the application that is to accurately portray colors to the user to support the ICM 1.0 API. </P>
</P></BODY></HTML>

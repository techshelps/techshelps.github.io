<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Marginal: replace variants with specific data types</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Marginal: replace variants with specific data types</H3><p>A common piece of wisdom is that it is quicker to use native data types than the Variant data type that was introduced in Microsoft&nbsp;Access 1.0 and Visual Basic 3. As this code example shows, when it comes to making DAO code faster this is a classic example of optimizing the wrong thing. Internally, all DAO code uses Variants because it is the only data type that can also contain Null values. Converting from Variants back to native data types takes time, so you're unlikely to see much benefit in most real-world applications.</P>
<p>Spend more time on tips such as #12 and #14 before worrying about matching data types too closely. As stated in the introduction to this paper, database operations tend to dwarf language issues by an order of magnitude, so concentrate on them first.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Active Directory Schema Management</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Active Directory Schema Management</H3><p>Active Directory provides predefined objects so that directory service manipulation can be uniform across namespaces. However, an Active Directory object in any given directory might have more functionality than that specified by Active Directory. A directory might also contain objects that are not defined at all by Active Directory. In addition, there are extensible directory services that allow their base schema to be modified and their objects to be arbitrarily extended by administrators and independent software vendors.</P>
<p>Object extensions are handled by the Schema Management Active Directory objects. These objects are used to:</P>
<UL><LI><B>Browse</B> the definitions of objects.</LI><LI><B>Extend</B> the definitions of objects.</LI></UL><p>In Active Directory, there are three ways to extend an Active Directory object:</P>
<UL><LI><B>Directory extensions</B> for providers that expose more than just the standard objects.</LI><LI><B>Provider schema extensions</B> when clients extend the schema by using a provider's extensible schema.</LI><LI><B>Third-party schema extensions</B> when software developers attach new properties and methods to an object definition as part of their application.</LI></UL><H4> </A>Schema Management Active Directory objects</H4><p>The schema management objects can be used to browse and modify the schema of a namespace. These objects are:</P>
<UL><LI><B>SCHEMA</B> container object, which contains a given schema.</LI><LI><B>Class</B> container object, which defines an object class.</LI><LI><B>Property</B> object, which describes a property.</LI><LI><B>Syntax </B>object, which describes a syntax that can be used in a property definition.</LI></UL><p>These objects are different from directory service objects like the User component, in that their properties are not subdivided into functional sets.</P>
<H5 CLASS="h4"> </A>SCHEMA Container Object.</H5><p>The SCHEMA container object is used to attach a set of object definitions to a part of a directory tree. Typically, each instance of a directory will have its own schema. Active Directory represents this by placing a SCHEMA container as a child of the directory root.</P>
<P><img src="38977.gif"></P>
<P CLASS="cap"><B>Figure 4 - The SCHEMA Container</B></P>
<p>Figure 4 shows the typical layout. However, Active Directory does not limit SCHEMA containers to this level of the tree. A complex directory might allow multiple schemas to exist in a directory instance. In that case, SCHEMA containers might be found in other parts of a tree. There can only be one SCHEMA container in any given Active Directory container.</P>
<P><img src="38978.gif"></P>
<P CLASS="cap"><B>Figure 5 - Schema Hierarchy</B></P>
<p>The SCHEMA container itself is a tree that contains class, functional set, property, and syntax definitions. New classes and functional sets can be created in the container to expand the schema.</P>
<p>Functional sets are defined separately from classes so that they can be used in multiple class definitions.</P>
<H5 CLASS="h4"> </A>Class Container Object.</H5><p>The Class container object is used to define a class of objects that can be created in the directory. New classes can be derived from existing classes using the Active Directory model. </P>
<P><img src="38979.gif"></P>
<P CLASS="cap"><B>Figure 6 - Creating a Class</B></P>
<p>Figure 6 illustrates how a Class container object relates to other Class objects, Property objects, and Syntax objects to create a definition of a class. A Class object points to Property objects, which point to the Syntax the Property supports.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>General Issues</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>General Issues</H3><UL><LI>    Layer your applications to take advantage of generic, re-usable procedures. In our experience, this is one of the most important optimization techniques: it makes possible the substitution of C or object code for Visual Basic, and allows you to leverage your most productive coders by having them concentrate on building components.</LI><LI>    Avoid custom controls by using built-in Visual Basic controls whenever possible. Built-in controls are included in VBRUN300.DLL, so use less system memory and disk space than other custom controls.</LI><LI>    In general, excessive control use can slow down an application; here are a few ways to economize on control resources:

<UL><LI>     Print directly to forms rather than use control labels.</LI><LI>     Whenever possible, use the graphical controls (Line, Shape, Label), and substitute the Image control for the Picture if possible.</LI><LI>     Rely on Windows API calls as much as possible to accomplish what you might otherwise do with controls. For example, rather than use the Common Dialog control, Windows common dialogs can be called with completely generic Visual Basic code &mdash; you can even download routines from CompuServe to do this. </LI></UL></LI><LI>    Use control arrays instead of multiple controls. Not only are control arrays more flexible, but forms with many controls will consume much less memory if control arrays are used.</LI><LI>    If possible, avoid OLE automation. Although elegant and promising, this is one of the most resource and memory intensive operations available in Windows, especially if you're automating mega-applications like Word or Excel. Try using SendKeys as an alternative.</LI></UL></BODY></HTML>

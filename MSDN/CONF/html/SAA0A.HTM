<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Basing a Class on Another Class--Subclassing</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Basing a Class on Another Class&mdash;Subclassing</H2><p>So far we have discussed just about all there is to know about objects. We have discussed what objects, properties, methods and events are. We have also discussed how we create an object's blueprint with a class which we then use to instantiate the object. One more important piece remains&mdash;the real exciting part as it turns out. Creating classes based on prior classes.</P>
<p>In our LIGHT class, we created an object that basically had one property and one method. This works real well for all the light switches in the world that just turn the light on and off. Suppose I want to create a light switch that dims as well? What do I do? Do I have to write a whole new class? The toggle is still applicable; you can still turn the light on and off. All I need is a modified version of the LIGHT class that has all the capabilities of the LIGHT class and one <I>additional</I> capability: dimming the light.</P>
<p>For the purposes of this illustration, I'll set the following rules. When you attempt to use the dimmer, it will go from full light to half light and then back again. In order to turn the light off or on, you still need to use the original lightswitch method.</P>
<p>Here's how we could accomplish this using an OOP model.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">DEFINE CLASS dimmer AS light
  intensity = "FULL"

  PROCEDURE DimmIt
   IF this.status = "OFF"
     RETURN
   ENDIF
   
   this.intensity = IIF(this.intensity = "FULL", ;
              "HALF", "FULL")
   WAIT WINDOW "Lights are now "+this.intensity+" power."
  ENDPROC
ENDDEFINE</font></pre>
<p>Note the original DEFINE of the class. In the original define (class LIGHT), we used CUSTOM as the base class. CUSTOM basically means that there is no base class, we are creating one from scratch. In the DEFINE we use here, the base class is LIGHT. This means that DIMMER automatically gets everything that LIGHT has. Thus, although no code exists in the DIMMER class to handle the LIGHTSWITCH method and the status property, DIMMER gets it automatically by virtue of it being a <I>subclass</I> of LIGHT.</P>
<p>In effect, a subclass (e.g., DIMMER) is a more specialized version of the "super class" (e.g., LIGHT).</P>
<p>This is known as <I>Inheritance</I>.</P></BODY></HTML>

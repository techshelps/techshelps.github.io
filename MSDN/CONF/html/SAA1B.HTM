<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Properties and Methods to Classes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Adding Properties and Methods to Classes</H3><p>Visual FoxPro's object model does not allow you to add properties or methods to objects within a container class. Now how does this relate to the form designer and the fact that methods and properties can be added to the form, but not any of the controls? The answer is in the above description when you realize that when you create a form (SCX) using the form designer, you're actually creating a single Form (or Formset) container class.</P>
<p> Since Visual FoxPro does not allow object members of a container class to add methods and properties visually, the Add Property... and Add Method... dialogs in the Form Designer and Class Designer only apply to the form (or Formset) and not any of the added object member controls and custom objects. The Form Designer is actually creates a single container class (either Form or Formset), just like a container class built using the Class Designer, the same rules apply. Only the highest level parent can have added custom properties and methods. When in the Form Designer, you are not defining classes, you are actually manipulating live object instances in a design mode.</P></BODY></HTML>

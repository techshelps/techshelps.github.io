<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPC Mechanisms for Distributed Processing</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>IPC Mechanisms for Distributed Processing</H3><p>In distributed computing, the computing task is divided into two sections, a client piece and a server piece. The goal is to move the actual application processing from the client workstation to a server system with the power to run large applications. </P>
<p>The client piece of a client-server application is typically the user interface for the application. It runs on the client's workstation and uses a small amount of computing power, but typically requires a lot of network bandwidth to communicate with the server piece.</P>
<p>The server piece of a client-server application typically requires large data storage, computing power, or specialized hardware. It includes operations such as database lookups and updates, or mainframe data access. </P>
<p>There must be a network connection between the client and the server portions of distributed applications that allows data to flow in both directions. There are a number of different ways to establish this connection. Windows&nbsp;NT provides several different Interprocess Communication (IPC) mechanisms.</P>
<H4> </A>Named Pipes and Mailslots</H4><p>Named pipes and mailslots are actually implemented as file systems. Thus, in the Registry there are entries for NPFS (Named Pipe File System) and MSFS (Mailslot File System). As file systems, they share common functionality, such as security, with the other file systems. In addition, local processes can use named pipes and mailslots with other processes on the local computer without going through the networking components. Remote access to named pipes and mailslots, as with all of the file systems, is accomplished through the redirector.</P>
<p>Named pipes provide connection-oriented messaging that allows applications to share memory over the network. Windows&nbsp;NT provides a special application programming interface (API) that increases security when using named pipes. One feature added to named pipes is <I>impersonation</I>. When using impersonation, the server can change its security identifier to that of the client at the other end of the connection. For example, suppose a database server system uses named pipes to receive, read, and write requests from clients. When a request comes in, the database server program can impersonate the client before attempting to perform the request. Thus, if the client does not have the authority to perform the function the request would be denied.</P>
<p>The mailslot implementation in Windows&nbsp;NT is a subset of the Microsoft OS/2 LAN Manager implementation. Windows&nbsp;NT implements only second class mailslots. Second class mailslots provide <I>connectionless</I> messaging for broadcast messages. Delivery of the message is not guaranteed, though the delivery rate on most networks is high. It is most useful for identifying other computers or services on a network. The Computer Browser service under Windows&nbsp;NT uses mailslots. </P>
<H4> </A>NetBIOS</H4><p>NetBIOS is a standard programming interface in the PC environment for developing client-server applications. NetBIOS has been used as an IPC mechanism since the introduction of the interface in the early 1980s. From a programming aspect, higher level interfaces such as named pipes and RPC are superior in their flexibility and portability.</P>
<p>A NetBIOS client-server application can communicate over various protocols: NetBEUI protocol (NBF), NWLink NetBIOS (NWNBLink), and NetBIOS over TCP/IP (NetBT).</P>
<H4> </A>Windows Sockets</H4><p>The Windows Sockets API provides a standard Windows interface to many transports with different addressing schemes, such as TCP/IP and IPX. The Windows Sockets API was developed to accomplish two things. One was to migrate the sockets interface, developed at the University of California, Berkeley in the early 1980s, into the Windows and Windows&nbsp;NT environments. The other was to help standardize an API for all platforms. </P>
<H4> </A>Remote Procedure Calls (RPC)</H4><p>The RPC mechanism can use other IPC mechanisms to establish communications between the computers on which the client and the server portions of the application exist. If the client and server are on the same computer, the Local Procedure Call (LPC) mechanism can be used to transfer information between processes and subsystems. This makes RPC the most flexible and portable IPC choice.</P>
<H4>Network Dynamic Data Exchange (Net DDE)</H4><p>NetDDE provides information-sharing capabilities by opening two one-way pipes between applications. NetDDE is an extension of Dynamic Data Exchange (DDE) that can be used between two computers across the network.</P>
<p>By default, the NetDDE services are not automatically started. They can be started using Control Panel Services, Command Prompt, or the Server Manager utility of Windows&nbsp;NT Server.</P></BODY></HTML>

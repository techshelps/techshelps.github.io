<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Consistent Naming Conventions for Solution Development with Microsoft Office</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Using Consistent Naming Conventions for Solution Development with Microsoft Office</H1><p><I>Featuring the Leszynski Naming Conventions</I></P>
<P CLASS="byl">by Stan Leszynski<BR>Kwery Corporation<BR>Copyright &copy; 1995 Kwery Corporation, Bellevue, WA, All Rights Reserved</P>
<P CLASS="date">Created: November 20, 1995</P>
<P CLASS="bio">Stan Leszynski founded Leszynski Company Inc. in 1982 to create custom PC database applications. Since that time, the firm has created solutions for hundreds of clients, including Microsoft. The company has also written retail products sold by Microsoft, Microrim, Qualitas, and Kwery with a user base of several million people, including the OLE calendar controls shipped with Access 2 and Access 95. The company currently specializes in Microsoft Access, Visual Basic, SQL Server, and Visual C++ development. Stan's second company, Kwery Corporation, shipped the very first Access add-in &mdash; Access To Word &mdash; and the first OLE controls for Access 2.0 &mdash; Kwery Control Pak 1.</P>
<p><I>Stan is the author of the book </I>Access Expert Solutions<I> from Que. He is also a monthly columnist on developer issues for </I>Access/Visual Basic Advisor<I> magazine, and has written for </I>PC Magazine<I> and </I>Smart Access<I> </I>Journal<I>. He speaks regularly at Access and Visual Basic conferences in North America and Europe, and is consistently one of the top-rated Access speakers.</I></P>
<H2>Introduction</H2><p>As your Microsoft&reg; Office Visual Basic&reg; for Applications (VBA) development becomes more sophisticated, you invariably create reusable systems based on objects and techniques that have proven successful for yourself or fellow developers. As a consequence, you will probably eventually create or adopt a set a standardized object naming conventions.</P>
<p>Creating your own naming conventions takes a large amount of research, development, and testing effort. The challenge of creating your own conventions is compounded by the rapidly increasing complexity of the Microsoft Office object model. To complicate matters even further, there are several different stylistic approaches you can take when naming objects (identifier styles and location, length and structure of object names, and so forth).</P>
<h3> </A>How This Document Can Help</H3><p>This document provides you with two tools to use as you create a consistent development style for object names:</P>
<ul><li>An overview of the primary issues involved when creating a naming convention. I will describe some of the challenges of such an effort, and common-sense approaches to these challenges.</LI><li>An introduction to the <I>Leszynski Naming Conventions for Microsoft Solution Developers (LNC)</I>. This development style is the most widely published Microsoft Office naming convention, approaching a million copies in print. It is used by many Information Technology departments, by the major Access magazines (<I>Access/Visual Basic Advisor</I> and <I>Smart Access Journal</I>), by the major computer book publishers (Que, Sams, and Microsoft Press), and by some of Microsoft's documentation team.</LI></UL></SPAN><p>This document includes some elements of <I>LNC</I> that you can use for Access, Excel, and Word development.</P>
<H3>What's Not Included Here</H3><p>This document is an abstract condensed from the full <I>Leszynski Naming Conventions</I> documentation. The information provided is to introduce you to the concept of naming conventions and the structure of <I>LNC</I> &mdash; the full <I>LNC</I> documentation is too lengthy to reproduce here. See the end of this document for information on how to obtain full <I>LNC</I> documents and tools.</P>
<H2> </A>Creating Microsoft Office Naming Conventions</H2><h3> </A>Why Naming Conventions?</H3><p>Naming conventions are one of the foundation elements of your overall development style. You usually decide to adopt a naming convention to achieve one or more of these objectives:</P>
<ul><li>To be able to quickly understand an application's structure and code by making object names more informative.</LI><li>To simplify team development of applications by creating a standardized vocabulary for all team members.</LI><li>To improve your ability to work with objects, including enforcing object name sort orders, creating self-documenting program code, and enhancing find and replace capabilities.</LI><li>To increase your ability to create tools for your development work, and to create code libraries across the various VBA platforms.</LI></UL></SPAN><p>For me, an application filled with object names that do not follow a consistent style is as difficult to navigate through as a messy garage! In contrast, an organized application is easier to understand, even if you didn't develop it. For example, try to determine in Figure 1 which forms are standard forms, which one is the switchboard menu, which ones are for lookup tables, and which forms are actually subforms.</P>
<p><img src="59766.gif"></P>
<P CLASS="cap">Figure 1. These form names follow specific naming conventions</P>
<p>Notice that two types of naming conventions are evident in the figure. The first convention is the standardization of the object base names. All customer and dealer objects contain <I>Cust </I>and <I>Dealer</I>, respectively, in their base names, and these root elements of the names are placed at the beginning of the base name so that customer and dealer objects each sort with their peers. The second, and equally important, convention is the addition of leading characters denoting the type of the forms. Many naming conventions have in common the standardization of the base object name and the addition of descriptive information on one or both ends of the base name.</P>
<p>The example provided by the form names in the figure is equally applicable to the other named elements of an application. Any object in your application that you will view or refer to frequently &mdash; database objects, form and report controls, procedure names, and Basic variables &mdash; is a candidate for naming conventions. The fact that you may see and use a particular object's name dozens or hundreds of times throughout a development project further accentuates the need for developing good rules for naming objects. Any name you see and use over and over should be both informative and logical.</P>
<h3> </A>Justifying Naming Conventions</H3><p>The motivation to create naming conventions for working with your development tools usually derives from specific problems or situations you encounter. Here are a few compelling reasons for developing and using naming conventions in your applications:</P>
<ul><li><B>Reverse Engineering an Application.</B> When you look at an application written by someone else, or revisit your own after some period of time, the overall structure should make sense to you almost immediately.</LI><li><B>Team Development.</B> When multiple developers are working on the same project, having a common methodology helps to pull them together as a team. A stated set of standards and objectives allows individuals to work together more effectively:

<UL><LI CLASS="ULI2">Predefined standards remove the variability introduced by individual styles, and prevent the "turf wars" that can occur when champions of conflicting styles get together.</LI><LI CLASS="ULI2">Predefined standards ensure that objects are interchangeable among team members.</LI><LI CLASS="ULI2">New team members feel less intimidated when the expectations for them are clearly defined (as in "Please code to this written standard").</LI><LI CLASS="ULI2">Departing team members can be replaced with reduced expense because their replacements can quickly understand the inherited application's architecture and code.</LI></UL></LI><li><B>Making Office Tools Easier to Use.</B> Good standards will always save time in the long run. For example, when you create a new form in Access and view it in the Object Browser dialog, you'll see 187 built-in methods and properties listed for the form before you've written one line of code. Naming conventions can help you separate your own objects from built-in objects in such a crowded list.</LI><li><B>Leveraging Your Techniques.</B> You can extend your development environment and techniques by leveraging your naming conventions. Good object naming habits should enhance your ability to document an application, create tools and utilities, create reusable code libraries, and otherwise increase your productivity.</LI></UL></SPAN><h3> </A>Naming Convention Considerations</H3><p>Here are three considerations to keep in mind if you develop your own naming style:</P>
<ul><li><B>Be Consistent.</B> If you take the trouble to create a naming style, apply it uniformly over a long period of time. Don't change elements of the style every time someone lobs a criticism or suggestion at it.</LI><li><B>Plan Ahead.</B> If you know where the feature sets of your development products are going, or have a long-term development strategy, let such information influence your naming conventions.</LI><li><B>There Is No Single Correct Answer.</B> There are many ways to approach development styles, and no specific naming convention is the correct one. Take the time to find or build one that fits your needs.</LI></UL></SPAN><p>These three points are general in nature. In addition, there are several very <I>specific</I> considerations that you must weigh when creating a naming convention for your Microsoft Office-centric solutions. These issues are covered in the next four topics.</P>
<H4> </A>Creating object base names</H4><p>A <I>base name</I> is the name you would give an object before applying naming convention elements. A strategy for selecting, abbreviating, capitalizing, and organizing object base names is, in and of itself, a naming convention. Thus if you do nothing more than create a consistent approach to base names, you have authored a development style for yourself. What topics would you include in a convention for base names? Consider, at least:</P>
<ul><li>The length of base names.</LI><li>How compound names are formed.</LI><li>Capitalization and punctuation.</LI><li>How to abbreviate name components.</LI></UL></SPAN><p>For example, <I>WidgetProductionStatisticsFirstQuarter1994</I> is a perfectly legitimate and descriptive Access table name. However, after applying base name rules from <I>LNC</I>, I end up with the name <I>WidgetStats94Q1</I>, which is shorter, equally descriptive, and sorts better with respect to related objects.</P>
<H4> </A>Capitalization and punctuation</H4><p>When creating your own naming conventions, you will have to determine what characters are allowed, what punctuation is legal, and what the capitalization standards are. For example, while most developers use mixed-case capitalization in object names, a few do not. Access developers that also work in SQL Server traditionally preferred lowercase names for tables and fields, so that any of their applications could be "upsized" to the server, which did not support mixed-case prior to version 6.0. Also, I have met many developers who are religious about economizing keystrokes. Such people often work with lower-case object names, to save their "pinkie" fingers thousands of visits to the Shift key on the keyboard each day. Finally, some people simply can't read object names clearly even with mixed-case; they prefer punctuation such as underscores in names instead.</P>
<p>For myself, I prefer a mix of upper and lower case, and I am basically sour on any kind of punctuation in object names except for underscores (no space, no dashes, etc.). This ensures that I can move data from an Access or Jet back-end to other platforms without any renaming (for example, SQL Server allows only letters, digits, $, #, and underscores in names, and Visual FoxPro&trade; is even more restrictive).</P>
<H4> </A>Abbreviating object names</H4><p>Using standardized abbreviations can be useful when trying to shorten object names without a loss of meaning. Typically, when the design phase of an application is completed, and object names such as table and field names are being finalized, you should look for opportunities to create and/or apply standard abbreviations. You will need to devise rules for creating abbreviations, and create a list of common abbreviations for reuse.</P>
<p>Abbreviations that we use ourselves tend to fall in the three to five character range, although some variances occur for clarity. Few words require more than five characters to convey the original word with no loss of readability or meaning.</P>
<H4> </A>Sorting object names</H4><p>Recall the previous example where I shortened the table name from <I>WidgetProductionStatisticsFirstQuarter1994</I> to <I>WidgetStats94Q1</I>. Why did I select this particular order for segments of the name? I did it with sorting in mind.</P>
<p>By design default, when Microsoft Office lists object names, they are usually sorted alphabetically. If you name related objects (those with similarities in the base name) so they sort close together, they appear consecutively in ordered lists. In the example at hand, I changed the trailing <I>FirstQuarter1994</I> portion of the example table name to <I>94Q1</I>, a convention that ensures that similar object names will sort by year, then quarter, producing a list like this:</P>
<P CLASS="i">WidgetStats94Q3<BR>WidgetStats94Q4<BR>WidgetStats95Q1<BR>WidgetStats95Q2</P>
<p>In my example, I had to decide that the "WidgetStats" portion of the name was the most important with respect to sorting, then the year and quarter. As you create conventions, you must determine if sort order is important, and how object name components will be assembled to achieve the desired ordering.</P>
<h3> </A>Developing Naming Convention Elements</H3><p>When you have debated the various general considerations for naming conventions and devised your strategy for object names, you can proceed to creating the wrappers around the names that provide extra information and capabilities. The most important of these are called <I>tags</I>, which are characters placed against an object name to categorize it. Figure 2 shows tags in use on Access forms and controls.</P>
<p><img src="59767.gif"></P>
<P CLASS="cap">Figure 2. The form controls in this list are easily identified by their three-character tags</P>
<p>The challenges for you as you define your naming style are to define:</P>
<ul><li>Whether or not to use tags.</LI><li>Where tags should be placed.</LI><li>The size for the tags in number of characters.</LI><li>The specific tags themselves.</LI></UL></SPAN><p>Why use tags at all? In an environment like Microsoft Office, where terms like <I>object</I>, <I>class</I>, and <I>property</I> are becoming more and more important, a base name by itself does not convey enough information for many developers. It can be very convenient to encapsulate within an object's name information about the type of the object (in other words, its class and/or other primary properties).</P>
<p>Tags can be placed before (as in <I>qryCust</I> or <I>qdelCustClosed</I>) or after (as in <I>CustQry</I> or <I>CustClosed_QDel</I>) an object's base name. The placement of tags can become a hotly debated issue as you standardize: "Are tags that precede a name better for us than those that follow the name?" As you can determine from the two figures earlier in this document, tags placed before objects in sorted lists cause them to sort by type before name. Some programmers, however, prefer to scan an object list and see the base name as the primary sort order. With such individuals around, you might opt for trailing tags instead.</P>
<p>If you have decided to use tags, you next need to determine which objects should be tagged. Some developers prefer to use tags only for program variables and structures, while others place tags on every application object, such as controls and tables.</P>
<H4> </A>Choosing tag length and placement</H4><p>Some developers use tags that are as short as a single character. While this certainly economizes on keystrokes, such tags are not very intuitive except in limited cases. I feel that one-character tags are too obscure and limiting (the limit is the 26 letters of the alphabet, which doesn't allow enough room for growth).</P>
<p>Most developers find that three and four character tags prove more useful than single-character and double-character strings. This tag length is the most prevalent across the majority of published Microsoft Office styles, although users of this length admit that it introduces some extra keystrokes into development efforts.</P>
<p>Table 1 below shows several different tags for selected Access objects, culled from various naming convention documents that have been sent to me by Access developers over the previous two years. Note that none of the tags exceed four characters in length, and that different developers often come up with very similar tags.</P>
<P CLASS="ttl">Table 1. Selected Tags from Various Access Naming Conventions</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="50pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object Type</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>QueryDef Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>q</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>QueryDef Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>q_</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>QueryDef Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>qd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>QueryDef Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>qdf</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>QueryDef Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>qdf_</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>QueryDef Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>qry</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>String Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>s</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>String Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>s_</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>String Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>str</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>String Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>str_</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>String Variable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sz</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>The best approach to use when deciding on a placement strategy for tags such as these is to create two small, similar applications. Use the leading tag convention in one, and the trailing tag convention in the other, and perhaps differing tag lengths as well. Comparing the pluses and minuses of the two approaches after actually using them in a hands-on experiment is the best input for making your decision.</P>
<H4> </A>Creating object tags</H4><p>Once you have decided on a tagging strategy that includes length and placement, the tags themselves need to be created. Below are four rules of thumb that I suggest you apply to the process.</P>
<ul><li><B>Abbreviations Must Be Intuitive.</B> Here's the rule we use for tags: "To create tags, begin with the full word that the tag will abbreviate, or a generally accepted shorthand of the word. Remove non-essential characters until the target length is reached and the remaining tag is the clearest representation of the original word." You will have to create your own similar rule to reach your own target tag length. For example, some developers use the first two characters of a word plus its last character, while others remove all vowels and take the first three characters from the remaining string.</LI><li><B>Follow the Crowd When It Suits You.</B> Unless you have a legitimate need to be unique, your conventions should probably lean toward one or more of the existing popular conventions. That way, the other convention(s) can be your guide through the gray areas if you so desire. Search the Microsoft product forums such as those found on CompuServe for the keyword "naming".</LI><li><B>Remember What Problem You Are Solving.</B> For example, if object sort order is a primary objective for your tags, you would favor tag characters that fed this objective over all others. As a second example, if your objective for database object tags was solely to differentiate tables from queries in merged lists, and you used trailing tags, using <I>_t</I> after table names and <I>_q</I> after query names would achieve that stated objective with a minimum number of characters, and no further conventions would be required.</LI><li><B>Define the Big Picture.</B> Your naming conventions may need to dovetail into other conventions in your organization, such as those for other products or development teams. Development and acceptance of conventions should be done at a corporate or divisional level, and not by each individual department.</LI></UL></SPAN><p>If you've gotten the impression that there is no single, simple rule for creating tags, you're right. The process is unique to your needs and experience as an individual developer or development team.</P>
<H4> </A>Using prefixes to clarify tags</H4><p>By definition, a tag describes the type of the object. However, some objects can have attributes (essentially properties) other than their type that give them additional capabilities. For example, a VBA variable can have a scope of Public or Private, in addition to its data type. It may be helpful to you to denote scope with a character in front of the tag, like this:</P>

<pre><FONT FACE="Courier New" SIZE="3">Public pintTotal As Integer</font></pre>
<p>In your naming conventions, you should consider whether or not it is important to add such identifiers to your tags to describe scope and similar attributes. I call an identifier that precedes a tag a <I>prefix</I>, which we essentially define as "a one or two-character clarification tag placed on an object tag".</P>
<H4> </A>Using qualifiers and suffixes</H4><p>A qualifier is a naming extension that provides context to the specific use of an object. For example, assume you need three Basic variables to track movement through an array: the first item, the current item, and the last item. You could consider using the qualifiers First, Curr, and Last at the end of the object names to make the names unique and their purpose obvious, while retaining the same base name:</P>
<P CLASS="i">iaintPartCurr<BR>iaintPartFirst<BR>iaintPartLast</P>
<p>Placing the qualifier after the base name like this allows the object base names (<I>Part</I>) to sort together. An alternate construction would place the qualifiers after the tags rather than the base name, to drive the sort order differently. This would yield names like <I>iaintCurrPart</I>.</P>
<p>Some naming conventions also allow for a <I>suffix</I> added to the end of the name, such as in the example <I>qsumSalesmanPerfBest_AK</I>, where <I>Best</I> is a qualifier and <I>AK</I> (Alaska) is a suffix. A suffix provides a finer level of detail than a qualifier. You will have to determine if your style needs either or both of these extra devices.</P>
<h3> </A>Putting Your Conventions to Work</H3><p>If you adopt or create a set of naming conventions, should you apply it retroactively to any existing applications? The answer depends on these two questions:</P>
<ul><li>What is the longevity of the system? If an application has a potential lifespan of only one or two years, retrofitting a naming convention into it is not a very good use of resources.</LI><li>Can you afford it? A naming convention retrofit can take a hundred hours of work or more in a substantial application, so there must be development time and money available to cover the effort.</LI></UL></SPAN><p>The next section of this document describes an actual naming convention used by myself and my development staff as we build Microsoft Office applications. It was designed following the principles and approaches illustrated in this section.</P>
<H2> </A>The Leszynski Naming Conventions (<I>LNC</I>)</H2><p><I>LNC</I> was born of necessity, since most members of my staff spend all day developing Microsoft Office-centric applications, year after year. When we went "shopping" for an Office naming convention years ago, we discovered a void in the marketplace &mdash; there was no consensus about development styles among leading Microsoft Solution Providers. So we created our own style.</P>
<p><I>LNC</I> provides a set of consistent naming conventions to add to these Microsoft Office/BackOffice application objects:</P>
<ul><li>Class modules</LI><li>Constants</LI><li>Form controls</LI><li>Forms</LI><li>Modules</LI><li>Procedures</LI><li>Queries and views</LI><li>Report controls</LI><li>Reports</LI><li>Security objects</LI><li>Stored procedures</LI><li>Table fields</LI><li>Tables</LI><li>Triggers</LI><li>User-defined types</LI><li>Variables</LI></UL></SPAN><h3> </A>The Structure of <I>LNC</I></H3><p><I>LNC</I> is based on the use of leading tags &mdash; several characters placed before an object's name (for example, <I>frmCust</I>). This approach is sometimes referred to as "Hungarian notation", named for the nationality of a C programmer at Microsoft who published a treatise on tags for C about ten years ago.</P>
<p>Leading tags provide the following benefits over trailing tags (and over no tags):</P>
<ul><li>The first thing you see about an object when you see its name is the leading type tag, which is often more important than the name itself.</LI><li>Leading tags drive the ordering of object names in object lists, such as those found in the VBA editor and the Object Browser, sorting by type and then by base name.</LI><li>Leading tags are consistently located in the same place in an object's name, making them easier to find by parsers and other tools.</LI></UL></SPAN><p><I>LNC</I> provides an integrated approach to working with multiple products. We have addressed many of the challenges that arise when working with the various Microsoft tools, such as how to name objects that are functionally similar but have different class names, and vice-versa.</P>
<p>In <I>LNC</I>, object names are constructed using this syntax:</P>
<P CLASS="i">[prefix(es)] tag [BaseName] [Qualifier] [Suffix]</P>
<p>The brackets indicate optional syntax elements &mdash; do not include them in your actual object names. Notice that the <I>tag</I> element is required even though the <I>BaseName</I> is not (in some cases). These options will be explained later in this document. In the syntax diagram, the case of each element reflects its case in actual use &mdash; the element <I>tag</I> is in lower case since the tags themselves are always lower case.</P>
<p>Table 2 shows sample object names using these <I>LNC</I> constructions.</P>
<P CLASS="ttl">Table 2. Object Names Constructed in <I>LNC</I> Format</P>

<TABLE COLS="6" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="131pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="57pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object Name</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Prefixes</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>BaseName</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Qualifier</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Suffix</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>frmCust</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P></P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>frm</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Cust</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P></P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P></P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>qsumSalesPerfBest_WA</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P></P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>qsum</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>SalesPerf</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Best</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>_WA</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>plngRecNumMax</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>p</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lng</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>RecNum</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Max</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P></P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>iaintPartNum</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ia</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>int</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PartNum</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P></P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P></P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>See the section "Developing Naming Convention Elements" earlier in this document for an explanation of prefixes, tags, base names, qualifiers, and suffixes. The usage of these elements in <I>LNC</I> is as follows:</P>
<ul><li><I>LNC</I> prefixes are one or two characters long and in lower case, as in <I>plngRecNumMax</I>. Multiple prefixes can be used together on one object, as in <I>iaintPartNum</I>, where <I>i</I> and <I>a</I> are both prefixes.</LI><li><I>LNC</I> tags are three or four characters long for readability and to allow for the hundreds of combinations necessary as the Microsoft Office object model grows over time. They are always to the left of the base name and in lower case, so that your eye reads past them to the beginning of the base name, which starts with a capital letter.</LI><li>The base name is the starting point when you name a particular object &mdash; the name you would use anyway if you had no naming conventions. The <I>LNC</I> guidelines for creating base names are driven by a set of rules stated later in this document.</LI><li><I>LNC</I> qualifiers are short and written with mixed upper and lower case, as in <I>plngRecNumMax</I>. The full <I>LNC</I> documentation has a list of suggested qualifiers.</LI><li><I>LNC </I>suffixes are the only element in the syntax diagram where <I>LNC</I> does not suggest standardized values. You will create suffix items as needed by your company, development team, or application. Since the suffix is the last piece of information on a name, it can be easier for the eye to find if delimited from the rest of the object name with an underscore, as shown, but this convention is optional.</LI></UL></SPAN><h3> </A>Naming Conventions for VBA Objects</H3><p>The engine of your Microsoft Office applications is Visual Basic for Applications code. In <I>LNC</I>, both the base name and the tag are considered important components. Thus, the syntax <B>Dim I As Integer</B> for a loop variable becomes <B>Dim iintLoop As Integer</B> &mdash; a variable name that clearly represents an integer variable indexing a loop.</P>
<H4> </A>Rules for VBA object base names</H4><p>Crafting VBA object base names involves creating and following simple rules such as these:</P>
<OL>Object names use mixed upper and lower case to add readability to the name.</LI><LI CLASS="OLI1">Object names begin with a letter and should only include letters, digits and underscores.</LI><LI CLASS="OLI1">Where the readability provided by spacing is desired, use an underscore.</LI></OL></SPAN><p>Wherever possible, variable names should contain a reference to objects of any type that they relate to. For example, a Recordset variable created on <I>tblCust</I> should be named <I>rstCust</I>.</P>
<H4> </A>VBA object base name lengths</H4><p>There is no <I>LNC</I> guideline limiting variable name length, but common sense dictates that variable names longer than 15 or 20 characters waste a lot of keystrokes at each use. For procedure names, the VBA module editor by default show the first 30 characters of a procedure name, so this number is suggested as the target maximum procedure name length.</P>
<p>Abbreviate VBA object base name elements wherever possible by creating and reusing a set of standardized abbreviations.</P>
<H4> </A>Compound VBA object base names</H4><p>Procedure base names in <I>LNC</I> follow the construction <I>ObjectVerb</I>, where the <I>Object</I> portion describes the primary object type affected (often the same as the primary argument), and <I>Verb</I> describes the action. This style sorts functions and subs by their target object when shown in ordered lists:</P>
<P CLASS="i">FormCtlHide<BR>FormCtlShow<BR>FormPropAdd<BR>FormPropGet<BR>FormPropSet</P>
<p>A common alternative construction uses a <I>VerbObject</I> metaphor, in which the previous object names would list like this:</P>
<P CLASS="i">AddFormProp<BR>GetFormProp<BR>HideFormCtl<BR>SetFormProp<BR>ShowFormCtl</P>
<p><I>LNC</I> recognizes and accepts that many developers prefer the <I>VerbObject</I> metaphor, especially for OLE Automation server applications. You should experiment with both constructions and choose the one that works best for you.</P>
<H4> </A>Using tags with VBA objects</H4><p>In <I>LNC</I>, tags are required for the following VBA objects:</P>
<ul><li>Variables</LI><li>Type structures</LI><li>Constants</LI></UL></SPAN><p>Optional tags also are available for some types of procedures.</P>
<p>In the syntax diagram earlier we noted that base names are optional in some constructions. When you are programming in VBA, the tag element is always required, but the base name is optional for variables local to a procedure. For example, a procedure that declares only one form object variable can legitimately use the variable name <I>frm</I>, which is a tag without a base name. Normally, however, I prefer more detail. Type structures, constants, and variables that have module-level or public scope must have both a tag and base name.</P>
<H4> </A>Tags for VBA variables</H4><p>VBA variable tags are noted in the following table.</P>
<P CLASS="ttl">Table 3. Tags for VBA Data Variables</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="162pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Variable Type</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Boolean</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bln</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Byte</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>byt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Conditional Compilation Constant</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ccc</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Currency</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cur</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Date </P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dtm</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Double</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dbl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Error</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>err</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Integer</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>int</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Long</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lng</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>obj</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Single</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sng</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>String</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>str</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>User-Defined Type</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>typ</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Variant</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>var</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>Instead of using <I>I</I> and <I>J</I> as work variable names, use names that are still short but meaningful, such as <I>iintLoop</I> and <I>strSQL</I>.</P>
<H4> </A>Prefixes for VBA variables</H4><p>The prefixes for VBA variables can be categorized into two groups: prefixes for scope, and all other prefixes. The following prefixes are ordered by increasing (broader) scope.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="27pt" VALIGN="TOP"><COL WIDTH="324pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><OL></LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Use no prefix for variables that are local to a procedure.</LI></OL></SPAN></td>

</TR><TR><TD VALIGN="TOP"><OL><B>s</B></LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Place this prefix before variables that are declared locally to a procedure with a Static statement.</LI></OL></SPAN></td>

</TR><TR><TD VALIGN="TOP"><OL><B>m</B></LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Use this prefix for module-level variables that are declared with Dim or Private statements in the Declarations section of a module.</LI></OL></SPAN></td>

</TR><TR><TD VALIGN="TOP"><OL><B>p</B></LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Use this prefix to denote variables declared as Public in the Declarations section of a form or report module. This prefix supplements the <I>g</I> prefix.</LI></OL></SPAN></td>

</TR><TR><TD VALIGN="TOP"><OL><B>g</B></LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Use this prefix to denote variables declared as Public or Global in the Declarations section of a standard module. Such variables are truly global and may be referenced from procedures in the current project or other projects.</LI></OL></SPAN></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>When used, scope prefixes always begin a variable name and precede any other prefixes.</P>
<p>In addition to scope, other characteristics of variables can be identified by prefixes, such as procedure argument types, object references, and so forth.</P>
<H4> </A>Naming VBA constants</H4><p>VBA 95 introduced some changes in the area of constants. The changes most relevant to naming conventions include these:</P>
<ul><li>A constant can now be assigned a data type when it is defined.</LI><li>All constants have been renamed and carry a tag like <I>ac</I>, <I>db</I>, or <I>vb</I>, in order to identify their primary functional area.</LI><li>Constants can now be created with the Variant data type.</LI></UL></SPAN><p>When creating constants, use one of the scope prefixes (if appropriate), the prefix <I>c</I>, and the suitable tag for the constant's data type, as in <I>gcstrUserName</I>. To properly synchronize the tag, the data type, and the value, I do not let VB assign the type &mdash; <I>LNC</I> says to always use the full Const<I> name </I>As<I> datatype</I> syntax.</P>
<H4> </A>Tags and prefixes for VBA procedures</H4><p>Whether and how to prefix and tag procedure names is a debatable subject. In general, <I>LNC</I> neither requires nor encourages placing characters before a procedure name, except in the following situation.</P>
<p>Procedures can have scope similar to that of variables &mdash; <I>s</I> (Static), <I>m</I> (Private), <I>p</I> (Public), or <I>g</I> (global Public). <I>LNC</I> allows, but does not encourage, the use of these scope prefixes on function names if they solve a particular need, and are used consistently throughout an application.</P>
<p>If you are creating code libraries for retail sale, for inclusion in the public domain, or for broad distribution in some other manner, consider whether or not your object names might share a name space and conflict with objects of the same name already in the user's project. If this is a possibility, LNC recommends that you prefix Public variables, constants, and procedures with a unique author prefix identifying you, your company, or the application. The prefix consists of two to four unique characters (optionally followed by an underscore), and prevents your object names from conflicting with object names in the host application, or in other referenced or referencing applications on a user's machine.</P>
<p>Bear in mind that an author prefix will affect the sorting of objects and should only be used to solve specific compilation problems.</P>
<p>To create an author prefix, use your personal or company initials. For example, author prefixes for my companies are <I>lci_</I> for Leszynski Company, Inc. and <I>kwc_</I> for Kwery Corporation. Before using your selected prefix, make an effort to determine if the prefix is already widely in use.</P>
<p>With the large number of methods and properties listed in the Object Browser for most type libraries, differentiating built-in attributes of objects from those added during development can be a challenge. Procedure tags in class, form, and report modules add a high degree of order to working with user-defined elements in the Object Browser (and other sorted lists), by clearly grouping custom procedures, methods, and properties apart from built-in object attributes.</P>
<p>On the other side of the coin, some developers feel strongly that procedure names should not have tags, especially in OLE Automation server applications. Before you blindly accept or condemn the use of tags in this context, try it awhile and then decide for yourself.</P>
<p>The LNC style prescribes the following naming convention tags for procedures:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="27pt" VALIGN="TOP"><COL WIDTH="261pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><OL>cbf</LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Use this tag on procedure names for general code inside a class module, form, or report.</LI></OL></SPAN></td>

</TR><TR><TD VALIGN="TOP"><OL>mtd</LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Use this tag on custom method procedures defined for class modules.</LI></OL></SPAN></td>

</TR><TR><TD VALIGN="TOP"><OL>prp</LI></OL></SPAN></td>

<TD VALIGN="TOP"><OL>Use this tag on Property procedure names defined in class modules with Property Get, Property Let, and Property Set statements.</LI></OL></SPAN></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>LNC does not require or suggest assigning a data type tag to functions to reflect their return value. However, if you have a specific need to tag procedures to reflect their return value type, use the appropriate tags from the prior "Tags for VBA variables" section, and apply them consistently to all procedures in an application.</P>
<H4> </A>VBA object name examples</H4><p>The following table shows examples of VBA variables applying the various conventions for VBA objects.</P>
<P CLASS="ttl">Table 4. VBA Variable Name Examples</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="302pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Declaration</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Description</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Function lci_ArraySum (ParamArray ravarNum() As Variant) As Double</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Company identifier</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Public giaintPartNum As Integer</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Global index into array</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Const clngCustNumMax As Long = 10000</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Const for max CustID</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Function FileLock(ByVal vstrFile As String) As Boolean</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ByVal argument</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><h3> </A>Naming Conventions for OLE Automation objects</H3><p>Your Microsoft Office applications can use OLE Automation from VBA code to access objects that are not in the current code's parent application. OLE Automation introduces special considerations when naming objects. As a general rule, the expansion of OLE Automation in the '95 toolset has not changed or diminished the value of naming conventions. The following sections discuss naming conventions for your OLE automation code.</P>
<P CLASS="nt"><B>Note</B>&nbsp;&nbsp;&nbsp;Visual Basic 4 can now be used to create objects whose only purpose is as an OLE server. Objects in such a server will only be browsed from the Object Browser, and have no interactive use. Thus, you may choose to work extra hard to maximize readability of object names in a such a server.</P>
<H4> </A>Creating OLE Automation variables</H4><p>Table 5 lists entry points for common OLE server applications. Tags to use with objects exposed by these servers are listed in the appropriate sections for each product later in this document.</P>
<P CLASS="ttl">Table 5. Tags for OLE Object Variables</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="76pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Access.Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>accapp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DAO.DBEngine</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>daodbe</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Excel.Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>xlsapp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Excel.Chart</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>xlscht</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Excel.Sheet</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>xlssht</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Graph.Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>gphapp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MAPI.Session</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mpsmps</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MSProject.Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>prjapp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MSProject.Project</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>prjprj</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OfficeBinder.Binder </P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bndbnd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PowerPoint.Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pptapp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>SchedulePlus.Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>scdapp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>SQLOLE.SQLServer</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sqlsvr</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Word.Basic</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wrdbas</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>Note that variables for objects in the object hierarchy of a referenced type library can be dimensioned directly by class, as in this line:</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim xlsapp As Excel.Application</font></pre>
<p>Alternately, if the variable is created with late binding (i.e. as a generic object) rather than early binding, the prefix <I>o</I> is added to denote an object variable:</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim oxlsapp As Object
Set oxlsapp = CreateObject("Excel.Application")</font></pre>
<p>The naming convention for entry points into OLE server applications follows this syntax:</P>

<pre><FONT FACE="Courier New" SIZE="3">applicationtag [entrypointtag] primaryobjecttag BaseName</font></pre>
<p>The item <I>applicationtag </I>is a three-character notation for the server application, and <I>entrypointtag</I> is three characters denoting the entry point used. The <I>entrypointtag</I> item is optional and should be used when clarification is necessary (when variables for several entry points are declared in the same procedure), or when the entry point is not the standard Application object. The <I>primaryobjecttag</I> describes the ultimate class of the object (the one you intend to address with the variable). The <I>BaseName</I> is optional and clarifies the use of the variable, as with other VBA variables.</P>
<p>For example, the following code creates an Excel Range object and manipulates it.</P>

<pre><FONT FACE="Courier New" SIZE="3">Sub SalesCheck()
  Dim xlswksSales As Excel.Worksheet
  Dim xlsrngYTD As Excel.Range
  Set xlswksSales = GetObject("C:\Data\Sales.Xls", "Excel.Sheet")
  Set xlsrngYTD = xlswksSales.Range("YTDSales")
  If xlsrngYTD.Value &lt; 100000 Then
    MsgBox "Sales are lame.", vbOKOnly, "Get to Work!"
  End If
  Set xlswksSales = Nothing
End Sub</font></pre>
<p>In this example, the Range object is technically several layers deep in the application hierarchy, and a purely accurate combination of tags and code structure would yield this line of code, which actually runs:</P>

<pre><FONT FACE="Courier New" SIZE="3">Set xlsappwkbwksrngYTD = _
    xlsapp.ActiveWorkbook.Worksheets("Sales").Range("YTDSales")</font></pre>
<p>In practice, of course, such nomenclature is unwieldy, and the shorter style is accurate yet more friendly.</P>
<p>I prefer to show the server name in the variable declaration for clarity of code. While both lines below will run, the second is much less ambiguous:</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim xlsrng As Range
Dim xlsrng As Excel.Range </font></pre>
<h3> </A>Naming Conventions for Access Objects</H3><p>In <I>LNC</I>, tags are required for the following Access database objects:</P>
<ul><li>Tables</LI><li>Queries</LI><li>Forms</LI><li>Form controls</LI><li>Reports</LI><li>Report controls</LI><li>Macros</LI><li>Modules</LI></UL></SPAN><H4> </A>Tags for Database window objects</H4><p>Table 6 lists the tags for Database window objects. </P>
<P CLASS="ttl">Table 6. Database Window Object Tags</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="135pt" VALIGN="TOP"><COL WIDTH="58pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Form</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>frm</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Macro</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mcr</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Module</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bas</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Query</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>qry</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Report</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>rpt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Table</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>tbl</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H4> </A>Tags for Access form and report control objects</H4><p>Do not be lulled into thinking that control tags are superfluous. Some expressions on forms and reports cannot be evaluated when the name of the control is the same as the name of a table field in the object's recordset. For example, if the expression below is used as the ControlSource for a report control this is named <I>Qty</I> in a report whose RecordSource also contains a <I>Qty</I> field, the report will display #Error instead of the proper calculation, due to a "circular reference":</P>

<pre><FONT FACE="Courier New" SIZE="3">=IIf([Qty]&lt;100,"Low",[Qty])</font></pre>
<p>Table 7 list the tags for control objects on forms and reports. A different tag is provided for each built-in control type, and all control tags are three characters long. VBA code written behind forms and reports using this convention will reflect a control's type in its event procedure names (for example <I>cboState_AfterUpdate</I>). The automatic sorting provided by this notation in the Access module design window can be very helpful during development. </P>
<P CLASS="ttl">Table 7. Form and Report Control Object Tags</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="135pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Control</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Bound object frame</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>frb</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Chart (graph)</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cht</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Check Box</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chk</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Combo box</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cbo</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Command button</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cmd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Custom control</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ocx</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Image</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>img</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Label</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lbl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Line</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lin</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>List box</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lst</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Option button</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>opt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Option group</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>grp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Page break</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>brk</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Rectangle </P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>shp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Subform/Subreport</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sub</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Text box</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>txt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Toggle button</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>tgl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Unbound object frame</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>fru</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H4> </A>Tags for Access variables</H4><p>VBA variable tags for Access are listed below. Note that the <I>n/a</I> value indicates that the object cannot be assigned to a VBA object variable.</P>
<P CLASS="ttl">Table 8. Tags for Access VBA Object Variables</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="140pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>app</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Collection</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>col</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Control</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ctl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Controls</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ctls</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>CustomControl</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ocx</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>CustomControlInReport</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ocx</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Debug</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>n/a</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DoCmd</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>doo</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Err</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>n/a</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Form</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>frm</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Forms</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>frms</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GroupLevel</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lvl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Report</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>rpt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Reports</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>rpts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Screen</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>scn</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Section</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sec</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><h3> </A>Naming Conventions for Excel Objects</H3><p>The Excel object model is quite richly featured &mdash; as is Excel VBA &mdash; providing developers with the ability to program a variety of objects.</P>
<H4> </A>Excel control tags</H4><p>The following table shows <I>LNC</I> tags for Excel controls.</P>
<P CLASS="ttl">Table 9. Excel Control Object Tags</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="45pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Button</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cmd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>CheckBox/3D</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chk</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>EditBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>edt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GroupBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>gbx</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Label</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lbl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ListBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lst</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OptionButton/3D</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>opt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ScrollBar</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sbr</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Spinner</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>spn</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>TextBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>txt</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H4> </A>Excel object tags</H4><p>Table 10 lists object tags for variables referring to Excel objects. Collection tags are usually created by adding <I>s</I> to the tag for the corresponding single object, as in <I>arc</I> and <I>arcs</I>. Some objects that are infrequently used do not have tags &mdash; you can create object variables for such objects by using the object class as the base name, as in:</P>

<pre><FONT FACE="Courier New" SIZE="3">Dim xlsAutoCorrect As Excel.AutoCorrect</font></pre>
<p><I>LNC</I> does not attempt to create tags for infrequently used objects; the table shows <I>none</I> in these instances.</P>
<P CLASS="ttl">Table 10. Excel Object Tags</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="117pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>AddIn</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>add</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>AddIns</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>adds</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>app</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Arc</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>arc</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Arcs</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>arcs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Areas</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ares</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>AutoCorrect</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Axis</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>axs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Axes</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>axss</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>AxisTitle</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Border</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bdr</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Borders</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bdrs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Button</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cmd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Buttons</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cmds</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Characters</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Chart</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cht</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Charts</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ChartArea</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ChartGroup</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chg</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ChartGroups</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chgs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ChartObject</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cho</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ChartObjects</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chos</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ChartTitle</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>CheckBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chk</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>CheckBoxes</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chks</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Corners</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DataLabel</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dlb</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DataLabels</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dlbs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Debug</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Dialog</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dlg</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Dialogs</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dlgs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DialogFrame</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DialogSheet</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dls</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DialogSheets</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dlss</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DocumentProperty</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dcp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DocumentPropertyies</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dcps</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DownBars</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Drawing</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>drw</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Drawings</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>drws</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DrawingObjects</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dros</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DropDown</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cbo</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DropDowns</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cbos</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>DropLines</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>EditBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>edt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>EditBoxs</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>edts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ErrorBars</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Excel.Application</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>xlsapp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Excel.Chart</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>xlscht</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Excel.Sheet</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>xlssht</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Floor</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Font</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>fnt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GridLines</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GroupBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>grp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GroupBoxes</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>grps</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GroupObject</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>gro</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GroupObjects</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>gros</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>HiLoLines</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Interior</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Label</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lbl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Labels</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lbls</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Legend</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lgd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>LegendEntry</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lges</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>LegendEntries</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lges</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>LegendKey</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lgk</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Line</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lin</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Lines</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lins</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ListBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lst</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ListBoxes</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lsts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Menu</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mnu</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Menus</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mnus</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MenuBar</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mnb</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MenuBars</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mnbs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MenuItem</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mni</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>MenuItems</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mnis</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Module</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bas</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Modules</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bass</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Name</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>nam</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Names</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>nams</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>obj</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OLEObject</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ole</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OLEObjects</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>oles</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OptionButton</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>opt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OptionButtons</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>opts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Outline</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>out</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Oval</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ovl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Ovals</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ovls</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PageSetup</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Pane</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pan</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Panes</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pans</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Picture</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pic</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Pictures</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pics</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PivotField</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pvf</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PivotFields</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pvfs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PivotItem</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pvi</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PivotItems</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pvis</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PivotTable</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pvt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PivotTables</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pvts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PlotArea</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Point</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pnt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Points</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pnts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Range</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>rng</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Rectangle</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>shp</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Rectangles</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>shps</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>RoutingSlip</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Scenario</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sce</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Scenarios</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sces</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ScrollBar</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sbr</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ScrollBars</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sbrs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Series</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ser</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>SeriesCollection</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sers</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>SeriesLines</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>SoundNote</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Spinner</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>spn</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Spinners</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>spns</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Style</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>sty</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Styles</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>stys</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>TextBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>txt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>TextBoxes</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>txts</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>TickLabels</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Toolbar</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>tbr</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Toolbars</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>tbrs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ToolbarButton</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>btn</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ToolbarButtons</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>btns</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Trendline</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>tnd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Trendlines</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>tnds</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>UpBars</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Walls</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>none</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Window</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wnd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Windows</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wnds</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Workbook</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wkb</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Workbooks</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wkbs</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Worksheet</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wks</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Worksheets</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wkss</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><h3> </A>Naming Conventions for Word Objects</H3><p>Word has the least-exposed object model among the Microsoft Office suite. However, Word is still programmable without the object model.</P>
<H4> </A>Word control tags</H4><p>The following table shows <I>LNC</I> tags for Word controls.</P>
<P CLASS="ttl">Table 11. Word Control Object Tags</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="49pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>CancelButton</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cmd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>CheckBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>chk</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ComboBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cbo</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Dialog</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>dlg</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>FilePreview</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>fpvw</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>GroupBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>gbx</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ListBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lst</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OKButton</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cmd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OptionButton</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>opt</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Picture</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>pic</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>PushButton</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>cmd</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Text</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>lbl</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>TextBox</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>txt</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H4> </A>Word object tags</H4><p>Table 12 lists object tags for variables referring to Word objects.</P>
<P CLASS="ttl">Table 12. Word Object Tags</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="77pt" VALIGN="TOP"><COL WIDTH="54pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Object</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Tag</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Basic</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>bas</P></td>

</TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Word.Basic</P></td>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>wrdbas</P></td>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><h3> </A>VBA Coding Conventions</H3><p>In addition to object naming conventions, <I>LNC</I> suggests several standardized coding conventions for VBA procedures.</P>
<H4> </A>Common VBA practices</H4><p>Common coding practices in VBA coding that are supported by <I>LNC</I> include:</P>
<ul><li>Use <B>indents of two characters</B> to show nesting program structures (I find the default of four spaces produces too much white space and too many truncated code lines).</LI><li>Use <B>Option Explicit</B> in each module to force declaration of variables before use.</LI><li><B>Declare all necessary variables</B> at the top of each procedure.</LI><li>Place <B>comments</B> and <B>error handling</B> in each procedure.</LI></UL></SPAN><H4> </A>VBA code comments</H4><p>There are as many in-line Basic code commenting styles as there are Basic coders. Whatever convention you use, the goals are to be terse yet descriptive, and to be consistent.</P>
<p><I>LNC</I> suggests placing the following minimum set of comments at the beginning of each procedure:</P>
<ul><li><B>Purpose.</B> Briefly describe the purpose of the procedure.</LI><li><B>Arguments.</B> List the arguments to a function and how they are to be used.</LI><li><B>Returns.</B> Describe what the return value of a function signifies. </LI><li><B>Authors.</B> Name the creator, the date created, the last editor, and the date last edited.</LI></UL></SPAN><p>In addition, we sometimes use these sections in the heading of a procedure:</P>
<ul><li><B>Example.</B> A sample call to the function that can be cut-and-pasted elsewhere as a template.</LI><li><B>Calls.</B> A list of other procedures that are called within this procedure (a dependency list).</LI><li><B>Revisions.</B> Notes about major revisions.</LI></UL></SPAN><p>Some developers like to keep a change log as comments noting all revisions in a procedure. I suggest keeping such comments at the bottom rather than the top, since they are less frequently accessed than the code they displace.</P>
<p>Comments placed on the same line as code should be separated from the code by at least two spaces. Comments placed on their own line should be no longer than 60 characters so they are displayed in full in the default module design view size. </P>
<H4> </A>Trapping VBA errors</H4><p>Every procedure that can fail &mdash; which is virtually every procedure with more than a few simple lines &mdash; should have an error trap. Error traps are created by placing this line at the beginning of the procedure, after the header comments and before any other statements:</P>

<pre><FONT FACE="Courier New" SIZE="3">On Error GoTo <I>procname</I>_Err</font></pre>
<p>The marker <I>procname</I> should be replaced with the full procedure name. The error handler is placed at the bottom of the procedure, denoted with the label <I>procname</I>_Err:. At the end of the error handler, control is returned somewhere in the procedure, usually to a line label name <I>procname</I>_Exit that precedes a block of code immediately above the error handler.</P>
<p>To allow you to turn off error trapping during program debugging, <I>LNC</I> suggests that you place the On Error statement inside a conditional compilation directive (where supported), like this:</P>

<pre><FONT FACE="Courier New" SIZE="3">#If pcccDebug Then
  On Error Goto 0
#Else
  On Error Goto <I>procname</I>_Err
#Endif</font></pre>
<p>Before running an application, you can enable or disable error trapping by setting the value of <I>pcccDebug</I> to -1 (True) or 0 (False) in the "Conditional Compilation Arguments" text box on the Module tab of the Access Options dialog. </P>
<P CLASS="nt"><B>Note</B>&nbsp;&nbsp;&nbsp;You can use the Break on All Errors option setting in Access and Excel to achieve a similar result, but the code method shown here is more flexible, since it allows you to add additional functionality to your selective error logic code, such as event logging, and to exempt specific procedures from debugging.</P>
<p>We use the <I>procname_label</I> structure rather than the <I>label_procname</I> structure preferred by many coders to maintain our <I>ObjectVerb</I> construction metaphor as described earlier. Some developers prefer to place the qualifier of the label first, as in <I>Err_procname</I>, but philosophically the phrases <I>Err_</I>, <I>Exit_</I>, and so forth are not class tags, they are qualifiers for the line label object, thus they belong at the end like any other qualifier. This argument becomes more compelling when you remember that you can also create line labels for GoSub and GoTo statements in VBA, and thus creating many different combinations of leading characters, as if they were tags, becomes problematic.</P>
<P CLASS="nt"><B>Note</B>&nbsp;&nbsp;&nbsp;In VBA 95, your line labels do not need to be unique, meaning that you can now use <I>Err</I> and <I>Exit</I> as labels in every procedure. <I>LNC</I>, however, continues to prescribe unique labels, which facilitates the use of coding and documentation tools.</P>
<h3> </A>Additional Information</H3><H4> </A>How to get <I>LNC</I></H4><p>You can get the following LNC information and products from Kwery Corporation:</P>
<ul><li>The full<B> Leszynski Naming Conventions for Microsoft Solution Developers</B> document provides naming conventions for the following products: Microsoft Custom OLE Automation Servers, Microsoft Access, Microsoft Excel, Microsoft Graph, Microsoft Jet database engine, Microsoft Office Binder, Microsoft OLE Messaging, Microsoft PowerPoint, Microsoft SchedulePlus, Microsoft SQL Server, Microsoft Visual Basic, Microsoft Visual FoxPro, Microsoft Word.</LI><li>The <B>Leszynski Naming Conventions for Microsoft Access</B> document.</LI><li>The <B>Leszynski Naming Conventions for Microsoft Visual Basic</B> document. </LI><li><B>Windows Help file</B> versions of each LNC document.</LI><li><B>LNC wizards and tools</B> for solution developers.</LI></UL></SPAN><p>For more information, contact Kwery via the order line at 1-800-ATKWERY, or on the product information line at 425-644-7830. Kwery can also be reached by e-mail and fax at the numbers in the next section.</P>
<H4> </A>Sending in your feedback</H4><p>We welcome your feedback on this document and our conventions, including your likes, dislikes, stories, and suggestions. Please communicate with Kwery Corporation via e-mail at 71573.3261@CompuServe.Com or by fax to 425-644-8409.</P>
<H4> </A>The fine print</H4><p>This document is provided as is, without warranty of any kind, either express or implied, including but not limited to implied warranties of quality, performance, merchantability, or fitness for any particular purpose.</P>
<p>Some naming convention elements in this document are from the white paper <I>Naming Conventions for Microsoft Access &mdash;The Leszynski/Reddick Guidelines for Access 1.x, 2.x</I>, Copyright &copy; 1994 Stan Leszynski and Greg Reddick.</P>
<p>Microrim, Microsoft, Microsoft Access, Microsoft Excel, Microsoft Office, Microsoft PowerPoint, Microsoft Project, Microsoft Schedule Plus, Microsoft SQL Server, Microsoft Visual Basic, Microsoft Visual C++, Microsoft Visual FoxPro, Microsoft Windows, Microsoft Word, Qualitas, and Visual Basic for Applications are trademarks or registered trademarks of their respective owners.</P>
<p>Document Version Number: 95.1.2</P></BODY></HTML>

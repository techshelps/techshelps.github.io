<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Opening Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Opening Objects</H3><p>Use the GetObject function to open an existing object. For example, you can use this function to open Microsoft Excel workbooks but not Word documents. The syntax for the GetObject function is as follows:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Dim objXL As Object
Set objXL = GetObject("<I>PathOfFile</I>", "<I>ApplicationName.ObjectType</I>")</font></pre>
<p>When you use GetObject to open a file, the second argument, <I>ApplicationName. ObjectType</I>, is optional. But if you use it, use either Excel.Sheet or Excel.Chart; you can't open a file with the Excel.Application class. You can, however, use this class to determine whether Microsoft Excel is already open. (See the section titled <I>The CreatePIVOTTable Function</I> presented later for more information.) For example, the following Access Basic code opens the workbook created by the MakeXLObject function.</P>
<p><B>Note  </B> If you run GetXLObject with the Immediate Window open, it displays the first five rows of data from this sheet.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Function GetXLObject ()
    Dim objXLOpen As Object
    Dim intRow As Integer
    Dim intColumn As Integer

'Open CSTMRPT.XLS in its normal, hidden state.
    Set objXLOpen = GetObject("C:\CSTMRPT.XLS", <BR>        "Excel.Sheet")
    For intRow = 1 To 5
        For intColumn = 1 To 3
            Debug.Print objXL.Cells(intRow, intColumn).Value
        Next intColumn
    Next intRow
    objXLOpen.Parent.Saved = True
    objXLOpen.Application.[Quit]
    Set objXLOpen = Nothing
End Function</font></pre>
<p>To open a workbook and make it visible, you have to put the workbook's name in square brackets, and declare the object variable globally. For example, the following code opens CSTMRPT.XLS and leaves users there. However, when you close Access, the Excel.Sheet object closes too.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Function OpenXLObject ()
    Dim intRow As Integer
    Dim intColumn As Integer

'Open CSTMRPT.XLS in its normal, hidden state.
    Set objXL = GetObject("C:\[CSTMRPT.XLS]", "Excel.Sheet")
    objXL.Application.Visible = True
End Function</font></pre>
<p>The code shown above is quite similar to the code shown below. However, when you close Access, the following code leaves you in CSTMRPT.XLS.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Function OpenXLSheet ()
    Set objXL = CreateObject("Excel.Application")
    objXL.Workbooks.Open "C:\CSTMRPT.XLS"
    objXL.Application.Visible = True
End Function</font></pre></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Procedures</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Procedures</H3><p>In procedure naming, the key things to indicate are the procedure's type (function or sub), and its scope (global or modular). These help the programmer determine, at a glance, whether to expect the procedure to return a value, and where to look for the procedure code. The scope portion comes first, then the procedure type prefix, as the following table shows:</P>
<P>Table 8: Naming Procedures</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="41pt" VALIGN="TOP"><COL WIDTH="83pt" VALIGN="TOP"><COL WIDTH="137pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
Prefix</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Procedure Type</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Example</P></TD>

</TR><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
gf</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Global function</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>gfNavigate, gfUpdateControls</P></TD>

</TR><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
gs</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Global sub</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>gsPopulateGrid</P></TD>

</TR><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
mf</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Form function</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>mfOrdersCalculate</P></TD>

</TR><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
ms</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Form sub</P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>msCurrentCustomer</P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><p>With all of these naming conventions in mind, examine the following code listing. Notice how it illustrates many of the points made in the previous tables: procedure and argument naming, control and object naming, local data variables and so forth.</P>
<p><I>Listing 2: Applying Naming Conventions in Code</I></P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub gsPopulateGrid (rgrdCurrent As Grid, rrssCurrent As Snapshot)
    
    On Error GoTo PopulateGrid_Error
    Dim liRowCount As Integer
    Dim liColCount As Integer
    Dim liNumCols As Integer
    Dim liCounter As Integer
    
    liRowCount = 0
    liNumCols = rrssCurrent.Fields.Count
    rgrdCurrent.Cols = liNumCols
    'Loop to put field names on column heads
    rgrdCurrent.Row = 0
    For liColCount = 0 To liNumCols - 1
        rgrdCurrent.Col = liColCount
        rgrdCurrent.Text = rrssCurrent.Fields(liColCount).Name
    Next liColCount
    'Loop through rows of snapshot
    Do Until rrssCurrent.EOF
        liRowCount = liRowCount + 1
        rgrdCurrent.Row = liRowCount
        
        'Loop through fields within a row
        For liColCount = 0 To liNumCols - 1
            rgrdCurrent.Col = liColCount
            rgrdCurrent.Text = IIf(IsNull(rrssCurrent.Fields(liColCount)), " ", rrssCurrent.Fields(liColCount))
            'rgrdCurrent.ColWidth(liColCount) = rrssCurrent.Fields(liColCount).Size * 150
            rgrdCurrent.ColWidth(liColCount) = 1000
        Next liColCount
        rgrdCurrent.Rows = rgrdCurrent.Rows + 1
        rrssCurrent.MoveNext
    Loop
    Exit Sub
PopulateGrid_Error:
    MsgBox "A problem occurred when trying to populate grid. " &amp; Chr(10) &amp; Chr(13) &amp; "Error number: " &amp; CStr(Err) &amp; " -- Error message: " &amp; Error(Err)
    rgrdCurrent.Visible = False
    On Error GoTo 0
    Exit Sub
End Sub</font></pre>
<p></P></BODY></HTML>

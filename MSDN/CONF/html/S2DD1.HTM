<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The MMC USER Interface</TITLE> <META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>The MMC USER Interface</H1><p>At first glance, a MMC UI looks and feels much like an MDI version of Explorer. A complete MMC console might look like this:</P>
<p></P>
<P><img src="14602.gif"></P>
<P></P>
<p>The MMC parent frame has a master menu and toolbar. The master menu offers what is typical of an MDI parent: file and window management, along with Help.</P>
<p>The MDI children windows offer many differing views. Each of these child views includes a command bar, a scope pane, and a result pane. The command bar contains both pop-down menus and buttons. (Note that the screen shots in this paper do not show command bars&mdash;these will be supported in a post-PDC release.) The scope pane (the left pane), is a tree control displaying the tool's <I>namespace</I>, the tree-formatted listing of all visible nodes, each of which represent a manageable object, task, or view. The scope pane need not be visible in all views&mdash;in this example, it is visible in only the top left child window.</P>
<p>Each child window's result pane (the right pane), displays the result of selecting a node in the scope pane. In many cases it's a list of the contents of a folder, but in other cases it's a management related view (such as the performance graph in this example), which can be web- or ActiveX&trade; control- based. </P>
<p>MMC, as pictured above, can be configured to represent powerful management tools. MMC is also designed to offer a scaled-down view that is much less daunting to less-experienced administrators. In the simplest of cases, it can appear as just a task-oriented taskpad:</P>
<P><img src="14603.gif"></P>
<p></P>
<p>Another simple view is created by condensing the view to a single tool, like this service management window:</P>
<P><img src="14604.gif"></P>
<p>Because MMC permits customization, multiple tools can be created and saved; each of the views in the preceding examples can be saved to separate files as different tools. When one of  these files is sent to another person, that person can open the file, and the corresponding tool (with only the UI shown in the picture) is loaded. For example, a senior administrator could create the view in the preceding picture (a list of services on a computer), and send that view to an operator who will manage only the services on that computer. The operator receives&mdash;and can access&mdash;only the UI pictured.</P>
<p>Such customization is quite simple. An administrator can use the GUI Snap-In Manager to load and unload Snap-Ins on the fly. The following screen shows the administrator adding the File Service management Snap-In to the current console.</P>
<P><img src="14605.gif"></P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What's All This About Objects?</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>What's All This About Objects?</H2><p>The term "object," which was once a fairly well-defined technical term, has recently turned into a catch-all phrase for computer "things." When object-oriented programming came up in conversation recently, a personnel manager with little computer experience asked, "What's an object?" I answered, almost without thinking, "A thing." Any thing. The key to understanding computer objects is to understand how they compare with tangible objects in the real world. </P>
<p>One aspect of real-world objects is that the tasks they perform are inherent in the objects themselves. For example, you can use a teacup only for tasks physically suited to a small, open container with a flat bottom and a handle; you can drink liquid from a cup or use it to scoop sugar. Likewise, the tasks that users perform with a computer object must be inherent in the object itself. Computer objects should also represent real-world things that contain information--such as charts, worksheets, customer lists, or sales reports. </P>
<p>Technically, a computer object combines data with functions for using the data. It used to be that data was stored in one place (for example, in a database), and the means for accessing and using that data was stored elsewhere (for example, in a particular business application). Object-oriented programming languages such as Small Talk&reg; and C++ let you bundle the data and the mechanism for accessing it into a single object. You can then build applications with these objects. For example, you can use Microsoft Excel's objects to build spreadsheet-based business applications. </P>
<p>Microsoft has expanded the notion of objects to include "programmable objects," which you can control through OLE automation. This increases usablity <I>and</I> reusability by making it possible to build applications that control another application's objects. For example, any application that supports OLE automation can use Microsoft Excel's objects. In fact, when you write VBA code to control Microsoft Excel, you're actually manipulating Microsoft Excel's objects through OLE automation.</P></BODY></HTML>

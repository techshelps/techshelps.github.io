<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Who Is the King's Bodyguard?</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Who Is the King's Bodyguard?</H3><p>A firm's most important asset is its data. For many firms, this data lives on a mainframe and is religiously protected. This protection of data must be maintained, so we will start by looking at how this protection is done.</P>
<p>With the traditional mainframe, the application validates the data and forwards the data to the mainframe for storage. The mainframe handles the storage and retrieval of records without using business rules. This approach results in each application duplicating validation requirements. The typical Customer Information Control System (CICS) application using the VSAM file system does not have a server database as the back end&mdash;it's only a file system. The movement of applications from VSAM to more advanced products such as DB2&reg; or ORACLE&reg; rarely results in a redesign of the system to use database server features. Validation logic still lives in the application and not in the database for most mainframe applications.</P>
<p><img src="40884.gif"></P>
<p>The server validates all data in client-server architecture. The server never trusts the data passed from the application. The server protects the data by implementing business rules. The application may do some validation to improve the user interface, but not in place of server validation. The application only does some ID checks.</P>
<p>Today, I would classify mainframe databases into the following classes:</P>
<UL><LI>     Type I mainframe databases: Databases with proper and complete validation.</LI><LI>     Type II mainframe databases: Databases with validation capabilities, but validation is not completely implemented.</LI><LI>     Type III mainframe databases: Databases without validation capabilities.</LI></UL><p>These are functional classes, not software brands. If you are using a product that supports procedures and triggers, the mainframe database may be either Type I or Type II. If triggers are used to enforce the business rules, the database is a Type I. </P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparing OLE and DDE</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Comparing OLE and DDE</H2><p>OLE and DDE allow you to perform similar actions. Both enable you to send commands to another application, perform actions in that application, and return data to your Microsoft&nbsp;Access application. There are, however, some fundamental differences between OLE and DDE.</P>
<p>To illustrate some of the differences, consider a Microsoft&nbsp;Access application you've designed in which the user has access to a particular Microsoft Excel worksheet. Your Microsoft&nbsp;Access application contains the worksheet. In OLE operations, program control is actually <I>temporarily</I> transferred to Microsoft Excel for the purpose of manipulating the worksheet data. With DDE, operations occur when Microsoft&nbsp;Access sends a command to Microsoft Excel to start communication between the two applications. Microsoft&nbsp;Access, however, always has program control. </P>
<p>Another difference, which is an advantage of OLE, is that OLE automatically starts the object application when program control is transferred to the object application. When you use DDE, you must check to see if the source application (the DDE object) is started, and start it if necessary. </P>
<p>In addition, with OLE the data always is displayed in a bound or unbound object frame as it appears in the application that created the object. For example, if the object application is Microsoft Excel, a bound or unbound object frame displays worksheet data in your Microsoft&nbsp;Access application (the client application) as it appears in Microsoft Excel itself. By itself, DDE doesn't know anything about how to display the worksheet.</P>
<p>Lastly, with OLE you can also allow the user to edit data in another application (activate that application) when the user double-clicks on the bound or unbound object frame containing the OLE object. DDE doesn't provide this feature because DDE can only activate other applications through Access Basic.</P>
<p>Via OLE Automation, it's easy to access and manipulate data in an OLE object, as long as the application that supplies the object also supports OLE Automation. If you want programmatic access to data in an application that doesn't support OLE Automation, you may still have to use DDE.</P>
<p>In short, OLE defines services well beyond those of DDE and should be used whenever possible.</P>
<p></P></BODY></HTML>

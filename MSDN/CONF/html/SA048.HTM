<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Jet Uses ODBC Transactions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>How Jet Uses ODBC Transactions</H3><p>When your DAO code does not use transaction methods explicitly, Microsoft Jet will use ODBC in its "auto-commit" mode. In this mode, each SQL statement sent to the server has an implicit transaction around it – that is, the SQL statement has an immediate effect on the ODBC data and cannot be rolled back. Jet will stop using auto-commit mode off and use explicit ODBC transactions in two scenarios:</P>
<P><ul><li>    SQL statements that modify data (for example, UPDATE, INSERT, AP)<li>    Explicit DAO transaction methods.</P></ul>
<p>When using so-called "bulk operation" SQL statements such as UPDATE, INSERT and APPEND, Jet will place a transaction around the operation so that it can succeed or fail as a single entity. This is necessary because one such Jet SQL statement may actually correspond to many individual server statements.</P>
<H4> </A>DAO Transactions</H4><p>Multiple concurrent transactions against recordsets against a single server are actually a single transaction because a single connection is being used to service updates for both dynasets. You should structure your transactions so that they do not overlap; transactions are intended to be atomic units.</P>
<p>If the server supports transactions at all, Jet assumes only single-level support; that is, no nesting of transactions. Therefore, if your Basic code nests transactions, only the outermost BeginTrans, Commit, and Rollback are actually sent to the server, and nested transaction methods are silently ignored.</P></BODY></HTML>

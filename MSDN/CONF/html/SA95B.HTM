<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Database Issues</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Database Issues</H3><UL><LI>    In programming a large operation with lots of file I/O, consider using transactions. BeginTrans and CommitTrans will take better advantage of available RAM than direct disk reads and writes, and will almost always be faster.</LI><LI>    Avoid using the data control.</LI><LI>    Where possible, use pre-compiled queries. In SQL Server, use stored procedures rather than dynamic SQL; in Access or Jet, use QueryDefs with parameters.</LI><LI>    Try to write applications that access one row of data at a time. This is more code-intensive, but has performance advantages: it avoids the memory overhead of arrays or data access objects, and minimizes the aging data problem common to multi-user applications.</LI></UL></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Your Code Goes Here</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Your Code Goes Here</H2><p>Since creating an application like TAP involves a lot of work, it's unreasonable for you to expect to recreate the entire thing just for your own project. It is, however, very reasonable to expect to be able to add your own modules to an application like TAP, providing that the application is documented well (this means architectural descriptions as well as good source code comments). There are two ways I commonly use to make such an application expandable.</P>
<p>The first method involves building a skeleton module that has all the rudimentary parts, but is missing the actual variables and algorithm code. Let's look at an example:</P>
<p>The problem with this approach is that the skeleton is rather thin and doesn't really provide much guidance.</P>
<p>The second method is to take an existing module that does something like what you need and modify a copy of it for your requirements. The only drawback to this is that you must be able to follow the design of the original module. Again, good documentation helps a lot.</P></BODY></HTML>

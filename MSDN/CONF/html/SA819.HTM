<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Integrating Services</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Integrating Services</H3><p>OLE offers object-enabling system software. OLE is based on the Component Object Model (COM), an underlying system software object model that allows complete interoperability between components that are written by different companies even when programmed in different languages. These components can be purchased, replaced, enhanced and reused at any time during the business-system life cycle. </P>
<p>The primary responsibility of the Component Object Model is to ensure that software components behave in a well-known and consistent manner without constricting how programmers implement different components. The Component Object Model accomplishes this by defining a binary interface for objects that is independent of any programming language. Objects conforming to the Component Object Model can communicate with each other without being programmed with specific information about each other's implementations.</P>
<p>Objects that are written to support the Component Object Model are collectively called <I>component objects</I>. Every feature of OLE depends on the Component Object Model to provide basic inter-object communication. OLE is a set of object services built on top of the Component Object Model. OLE provides a robust platform for building custom business applications that can be easily integrated with other business applications as well as with packaged software, whether the applications execute on a single machine or are distributed across a network.</P>
<p>Besides the OLE Component Object Model itself, there are many additional OLE features that directly benefit both users and corporate developers. Some of the major features of OLE are listed below.</P>
<P><ul><li>    <B>OLE Component Object Model</B>. COM provides all of the interface standards and handles all inter-component communication that allows software components to be integrated. Because it is a binary standard, OLE software components can be written in any language, and supplied by and software vendor, yet still be seamlessly integrated into a single application. </P>
<P><li>    <B>OLE Automation.</B> Automation allows applications to expose command sets that operate within and across applications. For example, a user can invoke a command from a word processing program that sorts a range of cells in a spreadsheet created by a different application.</P>
<P><li>    <B>OLE Controls.</B> OLE Controls are OLE-enabled software components that can be purchased to extend and enhance an application's functionality. OLE Controls can be used in custom or off-the-shelf OLE-enabled applications. Most popular development environments, including the next version of Microsoft Visual Basic&reg;, will support OLE Controls as an efficient means to build business applications using high-quality, prefabricated software components.</P>
<P><li>    <B>OLE Drag and Drop.</B> Users can drag objects from one application window to another, and drop objects inside other objects.</P>
<P><li>    <B>OLE Component Management.</B> OLE allows software components in a distributed system to be autonomously upgraded without affecting the operation of the component-based solution.</P>
<P><li>    <B>OLE Documents.</B> OLE Documents are a form of compound documents which can incorporate data created in any OLE-enabled application.</P></BODY></HTML>

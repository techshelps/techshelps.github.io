<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When to Use Transactions and Why</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>When to Use Transactions and Why</H3><p>Often, to enforce data integrity, a set of operations must be considered as a single unit. For example, the transfer of funds from one bank account to another consists of two operations: entering a debit in one account and a matching credit in the other account. In practice, either both operations must succeed or neither operation should be processed.</P>
<p>In this situation, the debit and credit operations are a single unit, or a transaction. A transaction is a set of operations that are committed (saved) if, and only if, all of the operations succeed. If any of the operations fails, all of the operations that succeeded are rolled back (canceled), and the data is returned to the state it was before the transaction began.</P>
<p>DAO supports three transaction methods: one for starting, one for committing, and one for rolling back a transaction:</P>
<P><ul><li>    The BeginTrans method begins a new transaction.</P>
<P><li>    The CommitTrans method commits all changes made to data since the most recent BeginTrans method.</P>
<P><li>    The Rollback method rolls back, or cancels, all changes made to data since the most recent BeginTrans method.</P></ul>
<p>BeginTrans, CommitTrans, and Rollback are all methods of the Workspace object.</P>
<p>Transactions are also a powerful way to improve the performance of updates as well as multiuser concurrency. They enable the Jet database engine to accumulate multiple updates and write them as a single batch. To improve the performance of your application, use a transaction with:</P>
<P><ul><li>    A sequence of recordset updates, insertions, and/or deletions.<li>    A sequence of action queries.</P>
<P><li>    A sequence of pass-through queries that change data.</P>
<P><li>    Any combination of these operations in a sequence.</P></ul>
<p>On most servers, transactions generate locks that prevent other users from updating or even reading data affected by the transaction until it's committed or rolled back. You should therefore keep your transactions as short as possible and avoid beginning a transaction and then waiting for the user's response before completing it.</P></BODY></HTML>

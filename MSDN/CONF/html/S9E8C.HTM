<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TAPI 2.0 is Open and Written to Industry Standards</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>TAPI 2.0 is Open and Written to Industry Standards</H3><p>TAPI was defined with substantial, ongoing input from the telephony and computing industries from all over the world. These efforts, including extensive input from independent software and hardware vendors, have made TAPI a truly open industry standard. </P>
<p>TAPI works with a variety of PC processors, runs on industry standard hardware platforms, and as has been noted earlier, the hardware abstraction of TAPI is a huge contribution to openness. Its switch-fabric independence means TAPI-compatible applications can be run on a wide variety of PC and telephony hardware and support a variety of network services. </P>
<p>TAPI developers and their applications also benefit from the openness and industry standards that are such a foundation of the Windows&nbsp;NT and Windows&nbsp;95 operating systems and complementing WOSA elements.</P>
<H4> </A>Programmability </H4><p>Because TAPI is based on the Windows operating system, telephony applications can be developed and tested using standard tools that are widely available. TAPI developers can program in C, C++, Visual Basic&reg;, or any of a number of other popular programming languages. This frees developers from having to learn the Hayes "AT" command set, which historically has been the dominant telephony programming model. </P>
<p>The AT command set is useful, but suffers from limitations including bandwidth, a strict command-response model, in-band notifications and commands (call control commands and messages cannot be easily invoked during a call), a limitation to the 7-bit ASCII character set, and a lack of standardization across the industry beyond the most basic functions. </P>
<p>Microsoft's Windows&nbsp;95 includes the "Universal Modem Driver," a Windows Telephony service provider intended to be able to control virtually any AT command set-based modem. Its modem configuration information consists of 50 files totaling over 1.3 megabytes of data and defining interoperability with over 800 modem models in the USA alone&mdash;and this just covers the most important features of the most popular modems. The variations between products claiming compliance to such a long-standing industry standard is striking.</P>
<p>Probably the greatest limitation with the AT command set is that it uses a completely different syntax and structure from the programming models used by the majority of application developers today for most of their work, such as C and C++. The need to learn an entirely new programming environment limits the utility of the AT command set. Likewise, any telephony API that departs in significant ways from the most familiar programming environment will have a longer and higher learning curve, be more prone to errors and confusion, require additional training and support, and have lesser acceptance among application developers. </P>
<p>With TAPI, developers can easily take advantage of other elements of the operating system such as related data transfer APIs for access to the media stream of the call. Such integration with the operating system allows for the creation of higher-level constructs such as Visual Basic custom controls, OLE controls, and C++ object libraries that are closely tied to other elements in the system.</P>
<H4> </A>Usability</H4><p>In addition to the solid usability and intuitive interfaces that are part of the Windows environment, TAPI allows developers to create usability features specific to telephony such as dialing location independence. TAPI-enabled applications can include features to help users create and manipulate sets of dialing properties for the locations from which they use their computers.</P>
<p>In Windows Telephony, users can store telephone numbers in their applications and address books in a "location independent" form, such as the notation specified in ITU-T Recommendation E.123 (which calls for a string in the form "+<I>cc (ac) ln</I>" where "cc" is a country code, "ac" is an area (or city) code, and "ln" is the local subscriber number within that city). The user configures the telephony service for the dialing requirements of their location, including the country code and area code of the location, area codes and exchanges that are local or toll calls, outside line access codes, call waiting prefix codes, tone or pulse dialing, telephone credit card access numbers, and so forth. Applications can then request TAPI to "translate," or convert, the number in international (location-independent) form into the series of dialable digits and other dialing instructions needed to complete the call at the current location. </P>
<p>TAPI can store many such sets of location dialing properties for users who frequently move their computers between office, home, and other remote locations. </P>
<p>The location independence enabled by this CTI API service facilitates other important enterprise services, such as "global address books." For example, a corporation may make available (through a Messaging API address book service provider) a single enterprise-wide directory of phone numbers. In a multinational corporation, if the telephony API provided no number conversion, the numbers in this global directory would have to be manually dialed by each caller, extracting the portion of the number relevant to the location and adding such prefix and suffix digits as are needed to complete each call. With location-specific dialing properties, however, telephony applications software can easily apply local dialing procedures and thereby automatically dial calls from the global address book. </P>
<p>Another example is that of a multinational service, such as CompuServe or MSN&trade;, The Microsoft Network that publishes a list of its access numbers in hundreds of cities worldwide. Without the location independence offered by phone number translation based in the CTI API, users would have to manually add prefixes and other dialing instructions to the access numbers published by the network; location independence allows for the distribution of a single global access number directory from which the correct access number can be properly and automatically dialed, so long as the user has correctly specified their local dialing instructions. Applications can also take advantage of knowledge of the selected location to automatically use the correct access number.</P>
<p>TAPI will also use operating system services such as Plug and Play to automatically detect the attachment of new devices and make them available to applications. Inserting a PCMCIA modem, or powering up the system with a new telephony device attached, should result in the system automatically detecting the new hardware, loading the correct driver into the telephony environment (or requesting the user to insert a diskette containing the driver). Telephony drivers that consist of software only, such as the client portion of a client/server LAN-based system, should be able to be installed, configured, and upgraded remotely over the LAN using software such as Microsoft Systems Management Server, and be made immediately available for use.</P>
<H4> </A>Using ActiveX Controls</H4><p>ActiveX is a set of technologies that enables software components to interoperate in a networked environment, providing end users with a richer, more interactive experience. The ActiveX technologies are enhancements to OLE, Microsoft's component software technology, which has become a well-established, industry standard since the introduction of OLE in 1994. ActiveX Controls are small, efficient modules that implement specific, specialized functions.</P>
<p>Software companies around the world create ActiveX Controls, including companies such as Borland, ORACLE and Sybase/Powersoft. The result has been the creation of more than 1,000 ActiveX controls, which are available for developers to use as building blocks in creating applications.</P>
<p>For telephony developers, ActiveX Controls from companies such as Stylus Innovation, Technically Speaking, and Pronexus provide plug-in components that can make the job of creating applications much easier. This allows a broader population of developers to concentrate on the unique features of their programs, rather than the plumbing. ActiveX also allows developers to work with a rich variety of programming languages, including Visual Basic, Visual C++&reg;, Borland Delphi, Borland C++, Java, and Java-enabled tools. These graphical user-based programming tools speed up the development process substantially and provide programming and customization of telephony that have long been desired but which were not possible before now.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Events</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Events</H2><p>Events are just that&mdash;things that happen automatically. For example, clicking the mouse is an event. When using objects on a Microsoft Windows&reg; form (like a push button), you can attach code (i.e., methods) to these events. When the event happens (i.e., the user clicks the mouse on the object), the associated method is automatically called.</P>
<p>Events are nothing new. We have been using them the since the advent of FoxPro 2.0. Valid clauses, for example, are simply procedures which are attached to an event (attempting to exit a modified field or clicking on a push button). The power of using objects comes in attaching procedures to an object which automatically fire when something specific happens. In Visual FoxPro, for example, you can attach methods to all kinds of events: when the mouse is clicked down, when the mouse is released, etc.</P>
<p>There is one major difference between events in an object oriented development environment and the old valid and when clauses. In FoxPro 2.6 there was no direct method of manually firing the code snippet attached to an event (there <I>is</I> a way, but it is a kludge). In other words, there is no single command that says <I>Run the procedure attached to a screen object's Valid event</I>. In an object oriented development environment, you can do this easily by calling the event as you would a method. For example, if you had a push button called cmdOK, you could fire the Click event (which happens automatically when the user clicks the mouse on the push button) at any time by issuing:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">cmdOk.Click</font></pre>
<p>By attaching code to the Windows events we greatly increase the control we have over the behavior of a form.</P>
<p>So far, we have seen that we can create objects, assign properties to them and create methods for them. If we have to write code to fine tune an object every time we create it, we would be in for a lot of coding. Fortunately, OOP has the answer for this as well&mdash;CLASSES.</P></BODY></HTML>

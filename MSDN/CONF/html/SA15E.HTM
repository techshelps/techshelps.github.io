<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnapShot Reusable Code: VBEXCEL</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>SnapShot Reusable Code: VBEXCEL</H3><p>VBEXCEL is a Visual Basic library that provides an easy method of setting up and retrieving a handle to a Microsoft Excel 5.0 pivot table created from the results of a SQL statement. It also includes all Microsoft Excel Visual Basic for Applications constant declarations.</P>
<p>It requires the use of a VBODBC data source. To use VBEXCEL with a different data source, see the in-line comments on what changes need to be made.</P>
<H4> </A>Files</H4><P>1.    VBEXCEL.BAS    A Visual Basic module</P>
<P>2.    VBEXCEL.XLS    A Microsoft Excel template file that is used for pivot tables.</P>
<H4> </A>Function APIs</H4><P>1.    VBEXCEL_OpenAppObj() - Initializes Microsoft Excel for OLE Automation.</P>
<P>2.    VBEXCEL_OpenPivotWorkbook() - Executes a SQL statement, places the results in a Microsoft Excel pivot table, and returns an OLE handle to the pivot table in the form of a global variable (since Visual Basic can't SET a passed object variable). Multiple workbooks can be opened within the application.</P>
<P>3.    VBEXCEL_WorkBookShow() - Should be used before any OLE automation calls to a workbook. Makes it visible and active, which some properties and methods require. Also performs check to make sure Microsoft Excel is ready to be automated.</P>
<P>4.    VBEXCEL_GetRangeStr() - Creates a valid range string (e.g. "A5:F12") from row and column integer values. Helpful because of a bug in Visual Basic when the Excel Cells() method is used as a parameter to another Microsoft Excel method.</P>
<P>5.    VBEXCEL_WorkBookHide() - Should be used after OLE Automation calls. Hides the workbook from the GUI so the user can not interact with it from within Microsoft Excel.</P>
<P>6.    VBEXCEL_ClosePivotWorkbook() - Closes the given workbook and deletes the temporary file. You still need to set all your workbook object variables to Nothing.</P>
<P>7.    VBEXCEL_CloseAppObj() - Shuts down Microsoft Excel if no workbooks are open. You still need to set all your application object variables to nothing.</P>
<P><img src="40295.gif"></P>
<P>VBEXCEL Function Flowchart</P>
<H4> </A>Instructions</H4><P>1.    Add VBEXCEL.BAS to your project.</P>
<P>2.    Copy VBEXCEL.XLS into the application directory.</P>
<P>3.    Follow the instructions later in this presentation and add the VBODBC files to your project.</P>
<P>4.    Have the Visual Basic application connect to a data source.</P>
<P>5.    Call VBEXCEL_OpenAppObj to initialize Microsoft Excel and OLE.</P>
<P>6.    Call VBEXCEL_OpenPivotWorkbook to create a new pivot table from a SQL statement. </P>
<P>7.    Assign the global variables (VBEXCEL_NextPivotTable et. al.) to your own, since Visual Basic can not pass object handles as parameters to functions.</P>
<P>8.    Manipulate the workbook with VBEXCEL_WorkBookShow, VBEXCEL_GetRangeStr, VBEXCEL_WorkBookHide, and your one OLE Automation calls.</P>
<P>9.    Close the workbook with VBEXCEL_ClosePivotWorkbook. You still need to set all your own workbook object variables to "Nothing".</P>
<P>10.    Close the application with VBEXCEL_CloseAppObj. You still need to set all your own application object variables to "Nothing".</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Wizards, Builders, and Add-ins</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Wizards, Builders, and Add-ins</H2><p>There are three different terms we use to describe tools that developers can hook into the native Microsoft&nbsp;Access environment: Wizards, Builders, and Add-ins. It's important to understand that there's no conceptual difference between the three. They are all constructed the same way: with Microsoft&nbsp;Access Basic code loaded as a library. The differences in terminology are purely for UI convention. </P>
<p>Wizards are typically implemented as multiple-page forms that the user navigates through using "VCR" buttons to move from page to page. Examples are the Form Wizards and Report Wizards. </P>
<p>Builders are typically implemented using standard Microsoft Windows&reg; dialog box UI conventions - with OK/Cancel buttons, and so on. They usually <I>build</I> a single property, such as the Picture property of a Command Button. </P>
<p>Add-ins are tools that don't fit into either of the other two categories. They are typically invoked from the File/Add-ins submenu and can include any general-purpose utility. Examples in Microsoft&nbsp;Access 2.0 are the Database Documentor and the Attachment Manager. </P>
<p>To the developer, all three tools are implemented the same way: Microsoft&nbsp;Access Forms and Microsoft&nbsp;Access Basic Code are loaded as a library database. It's only the UI conventions that dictate the different names. We'll use the terms somewhat interchangeably in this paper. </P>
<p>The Add-in, in this example will help the user set the LinkMasterField and LinkChildField properties of a subform control. We have implemented it as a Builder; it appears to the user as simple dialog box and builds a property. </P></BODY></HTML>

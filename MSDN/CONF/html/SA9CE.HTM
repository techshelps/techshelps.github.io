<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Methods and Member Variable Within a Class</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Accessing Methods and Member Variable Within a Class</H3><p>There is a problem when it comes to calling methods and accessing member variables within a class. Specifically, what is the name of the object? It is all well and good to require the name of the object when you are dealing with an instantiated object&mdash;the program that instantiated the object knows what the name is. Within a class, we have no knowledge of what the object's name is.</P>
<p>The solution is a "generic" name that is assigned to the object when working within the class. The generic name is "This". Thus, if I wanted to call the SHOW method within the class on which oForm was instantiated, I would do it as follows:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">this.show()</font></pre>
<p>Similarly, I could access a member variable by using THIS. Note that this only works when you are working within a class.</P></BODY></HTML>

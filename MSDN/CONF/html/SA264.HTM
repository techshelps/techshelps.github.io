<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SnmpExtensionInitEx</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>SnmpExtensionInitEx</H3><p>This API allows an extension DLL to indicate to the extendible agent that it wants to support multiple MIBs or multiple MIB views. This API returns a Boolean indicating to the extendible agent whether or not it has more views to support. The extendible agent will continue to call this API until False is returned.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">BOOL SnmpExtensionInitEx(OUT AsnObjectIdentifier *supportedView)</font></pre>
<H4 CLASS="h4"> </A>Parameter</H4><p>supportedView </P>
<H4 CLASS="h4"> </A>Description</H4><p>Points to an AsnObjectIdentifier specifying the MIB subtree supported by the extension agent. </P>
<H4 CLASS="h4"> </A>Returns</H4><p>TRUE if the extension agent has more MIB views that it wants to notify the extendible agent about.</P>
<p>FALSE if it has notified the extension agent of all supported views.</P>
<H4 CLASS="h4"> </A>Comments</H4><p>When the extendible agent detects that the extension agent supports this API, it will loop, calling this API as long as TRUE is returned. In this way an extension agent can indicate multiple subtree views supported by a single extension agent.</P>
<p>The toaster MIB DLL only supports a single view into its MIB, so included below is an example taken from the MIB-II MIB of the Windows&nbsp;NT extension agent. Note the use of the global variable whichView that keeps track of what views have been added. A case statement determines what view gets added on each call until all have been added, and then FALSE is returned.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">int  whichView;
UINT MyView1[] = {1, 3, 6, 1, 2, 1, 1};
UINT MyView2[] = {1, 3, 6, 1, 2, 1, 2};
UINT MyView3[] = {1, 3, 6, 1, 2, 1, 3};
UINT MyView4[] = {1, 3, 6, 1, 2, 1, 4};
UINT MyView5[] = {1, 3, 6, 1, 2, 1, 5};
UINT MyView6[] = {1, 3, 6, 1, 2, 1, 6};
UINT MyView7[] = {1, 3, 6, 1, 2, 1, 7};

BOOL SnmpExtensionInitEx(
    View *supportedView)
{
    BOOL retVal;

    retVal = TRUE;
    switch (whichView) {
        case 0:
            supportedView-&gt;idLength = 7;
            supportedView-&gt;ids = MyView2;
            break;
        case 1:
            supportedView-&gt;idLength = 7;
            supportedView-&gt;ids = MyView3;
            break;
        case 2:
            supportedView-&gt;idLength = 7;
            supportedView-&gt;ids = MyView4;
            break;
        case 3:
            supportedView-&gt;idLength = 7;
            supportedView-&gt;ids = MyView5;
            break;
        case 4:
            supportedView-&gt;idLength = 7;
            supportedView-&gt;ids = MyView6;
            break;
        case 5:
            supportedView-&gt;idLength = 7;
            supportedView-&gt;ids = MyView7;
            break;
        default:
            retVal = FALSE;
            break;
    }
    whichView++;
    return(retVal);
}</font></pre></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Containers vs. Non-containers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Containers vs. Non-containers</H2><p>For ease of use, Visual FoxPro allows you to define child object properties (using the WITH clause of ADD OBJECT) and object code (ex. FUNCTION Command1.Click) within a container class. However, you shouldn't do it if you plan to reuse the added object. The following example demonstrates the reusability problem:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">DEFINE CLASS MyForm AS Form<BR>
    Caption="My Form"<BR>    ADD OBJECT cmdButton AS CommandButton WITH ;
        Caption="Not reusable"<BR>
    FUNCTION cmdButton.Click<BR>    WAIT WINDOW ;
        "Not reusable in other classes or subclasses"<BR>    RETURN<BR>    ENDFUNC<BR>
ENDDEFINE</font></pre>
<p>Now if you want to build another form, you can't reuse the implicit CommandButton subclass embedded within my MyForm class. If you were to generate code from a Visual FoxPro SCX which was built using the Form Designer, the code would also look like this. Essentially, the Form Designer is a tool to implement a single form or formset container class. The key is to avoid this technique if you plan to reuse the child objects. For example, you can't reuse a CommandButton which sits on a form (SCX) in the Form Designer. You must first save it as a class or define it as an independent class. The proper object-oriented way to do the above example is as follows:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">DEFINE CLASS MyForm AS Form<BR>
    Caption="My Form"<BR>    ADD OBJECT cmdButton AS MyCommandButton<BR>
ENDDEFINE<BR>
DEFINE CLASS MyCommandButton AS CommandButton<BR>
    Caption="Reusable"<BR>
    FUNCTION Click<BR>    WAIT WINDOW ;
        "Reusable in other classes or subclasses"<BR>    RETURN<BR>    ENDFUNC<BR>
ENDDEFINE</font></pre>
<p>Now you can use the MyCommandButton class in other classes or subclass it.</P></BODY></HTML>

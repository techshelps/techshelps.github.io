<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Sample Visual Class-Stopwatch</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>A Sample Visual Class&mdash;Stopwatch</H2><p>Objects model the real world. Before we can create a stop watch object, we need to determine what the object is and what it does.</P>
<p>Consider a stop watch. If you happen to have one, take it out and look at it. Note that it has a display (usually showing the time elapsed in HH:MM:SS.SS format. The stop watch has buttons that allow you to start it, stop it, pause it (lap time) and reset the display.</P>
<p>Naturally, a stop watch has the ability to track time from when it is started until it is stopped.</P>
<p>This gives us a good list of the functionality a stop watch class would have.</P>
<p>Once you have the required behavior of the object, you can then work on designing the implementation of the class.</P>
<p>Many factors can affect how a class is implemented ranging from how the class is intended to be used to personal preference of the developer.</P>
<p>In this case, when designing the implementation of the Stop Watch class, the functionality is divided into two parts. The first is the engine (the portion of the stop watch that has the functionality for calculating the time, starting, stopping and pausing the stopwatch. The second class combines the engine with the display to create a full stop watch.</P></BODY></HTML>

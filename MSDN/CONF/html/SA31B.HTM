<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Application Reviewed</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Sample Application Reviewed</H2><p>Our sample remote host application used multiple forms to show publisher information. A better design would be to use multiple document interface (MDI) children. The traditional approach of opening <I>one</I> database or connection must be changed. The posting of each query's result sets may be done by routines such as:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub Query_PublisherUpdate (frm as form, byval MDB$, byval ResultSet$())</font></pre>
<p>or</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">Sub Query_PublisherUpdate (ctl as frame, byval MDB$, byval ResultSet$)</font></pre>
<p>Each query request produces a separate database that may contain multiple result sets; the process of matching tables and databases to forms and controls is relatively simple if it is designed into the application at the start.</P></BODY></HTML>

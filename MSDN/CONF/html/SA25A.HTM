<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SNMP Command Set</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>SNMP Command Set</H3><H4> </A>Set, Get and GetNext PDU</H4><p>SNMP uses a simple set of commands to set and retrieve values of objects in MIBs. There are three basic request types in SNMP: <B>Set</B>, <B>Get</B> and <B>GetNext</B>. The Basic SNMP protocol entity is referred to as a PDU, Protocol Data Unit. For the <B>Set</B>, <B>Get</B> and <B>GetNext</B> commands, a PDU consists of a VarBindList, requestType, requestId , errorStatus and errorIndex fields.</P>
<p>A VarBindList is an array of VarBinds. A portion of the snmp.h header file below shows the definition of a VarBindList as well as the definition for a PDU.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">typedef struct {
    RFC1157VarBind *list;
    UINT           len;
} RFC1157VarBindList;</font></pre>
<p></P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">typedef struct {
    RFC1157VarBindList varBinds;
    AsnInteger         requestType;
    AsnInteger         requestId;
    AsnInteger         errorStatus;
    AsnInteger         errorIndex;
} RFC1157Pdu;</font></pre>
<p>The requestId helps managers correlate requests with responses. The IP address indicates the IP address of the device that is being managed . The request type is one of the three: <B>Set</B>, <B>Get</B> or <B>GetNext</B>.</P>
<H5 CLASS="h4"> </A>Get and Set</H5><p><B>Get</B> and <B>Set</B> operations are only allowed on object instances. Obviously, multiple objects may be retrieved or modified in a single PDU. SNMP specifies that, when modifying objects, if one <B>Set</B> fails in a PDU, none of the <B>Set</B> operation should be applied.</P>
<H5 CLASS="h4"> </A>GetNext</H5><p>The third SNMP request type is a <B>GetNext</B>. A <B>GetNext</B> request is slightly different from <B>Get</B> and <B>Set</B> operations. A VarBindList is still passed as the argument for the <B>GetNext</B> operation, but unlike <B>Get</B> and <B>Set</B> commands, the OIDs present in the <B>GetNext</B> VarBinds do not have to identify object instances. Instead, <B>GetNext</B> request s can specify any OID. The SNMP protocol specifies that when a <B>GetNext</B> request is issued to a particular agent, it will return the first value instrument by the receiving agent following the specified OID. In Figure 1.1, if the agent for the MIB pictured receives a request for 1.3.6.1 (iso.org.dod.internet), the agent must respond with the first OID supported in its MIB(s) that follows ( is lexicographically greater than) the supplied OID--in this case iso.org.dod.internet.private.enterprises.epilogue.toaster.manufacturer.0.</P>
<H4> </A>SNMP Traps and the Trap PDU</H4><p><I>Traps</I> are SNMP messages that originate from the agent to a preconfigured management station. They are used to notify management consoles of significant events. The PDU for a trap is slightly different from that of the other SNMP request types. Trap PDUs consist of a VarBindList, enterprise OID, the IP address of the sending agent, a genericTrap identifier, a specificTrap Identifier and a timeStamp. Typical usage of traps is notification of a service starting or stopping , notification of serious error conditions, and so on. Below is the data structure defined in snmp.h for a trap PDU. The VarBindList is the same as used in <B>Get</B> , <B>GetNext </B>and <B>Set </B>operations. The enterprise is the OID for the enterprise that this trap belongs to. In the case of the Toaster MIB this would be the OID for Epilogue (1.3.6.4.1.12). The agent address is the IP (or IPX) address of the agent. The Generic Trap identifies what kind of trap this is. It can be one of any of the following:</P>
<P><ul><li>    SNMP_GENERICTRAP_COLDSTART indicates Cold Start </P>
<P><li>    SNMP_GENERICTRAP_WARMSTART indicates Warm Start </P>
<P><li>    SNMP_GENERICTRAP_LINKDOWN indicates Link Down </P>
<P><li>    SNMP_GENERICTRAP_LINKUP indicates Link Up </P>
<P><li>    SNMP_GENERICTRAP_AUTHFAILURE indicates Authentication Failure </P>
<P><li>    SNMP_GENERICTRAP_EGPNEIGHLOSS indicates EGP Neighbor Loss </P>
<P><li>    SNMP_GENERICTRAP_ENTERSPECIFIC indicates Enterprise Specific </P></ul>
<p>In the case of the Toaster DLL we would indicate SNMP_GENERICTRAP_ ENTERSPECIFIC. The specificTrap pertains to which of Enterprise traps this specific trap is. In other words, the trap ID is the combination of the enterprise OID, genericTrap and specificTrap values. For the Toaster MIB the specificTrap value would be 0.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">typedef struct {
    RFC1157VarBindList  varBinds;
    AsnObjectIdentifier enterprise;
    AsnNetworkAddress   agentAddr;
    AsnInteger          genericTrap;
    AsnInteger          specificTrap;
    AsnTimeticks        timeStamp;
} RFC1157TrapPdu;</font></pre>
<p>The timeStamp value is the time from the instant this agent was last initialized until the time this event occurred, in increments of 100ths of a second.</P></BODY></HTML>

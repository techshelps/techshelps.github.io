<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Polymorphism</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Understanding Polymorphism</H2><p>The final point to be made here is <I>Polymorphism.</I> All this means is the ability to call methods with the same name and have it mean different things based on the object you are working on.</P>
<p>For example, let's take our <I>Light</I> objects. All have a method called <I>Toggle</I> which turns the light on and off. Support, now, that I were to create an entirely different object: a telephone. The telephone object may or may not have <I>anything</I> to do with a light object but there is a method attached to it which is also called <I>Toggle </I>which does something.</P>
<p>Now, let's take a look at this bit of code:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">oLight = CREATEOBJECT("Light")
oPhone = CREATEOBJECT("Telephone")
oLight.Toggle    &amp;&amp;Runs the Toggle method from 
                &amp;&amp;the Light object
oPhone.Toggle    &amp;&amp;Runs the Toggle method from 
                &amp;&amp;the Phone object</font></pre></BODY></HTML>

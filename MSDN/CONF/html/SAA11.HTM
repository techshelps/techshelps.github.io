<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>System Maintenance with OOP</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>System Maintenance with OOP</H2><p>Users like to change things, right? Suppose, using our light example, the user changed the base definition of a light switch. In our example, a light switch only has one property (called status) and one method (called Lightswitch). Suppose the company redefined the base light switch (class LIGHT) to have an additional feature. Now, when the user turns the light off or on, the system will tell them what they have done.</P>
<p>In order to accomplish this, all we need to do is modify the <I>Class</I> definition of the light as follows:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">DEFINE CLASS light AS custom
  status = "OFF"
  
  PROCEDURE LightSwitch
   IF this.status = "OFF"
     this.status = "ON"
   ELSE
     this.status = "OFF"
   ENDIF
  WAIT WINDOW "Light is now " + this.status
  RETURN
ENDDEFINE</font></pre>
<p>From this point on, all object instantiated from the class LIGHT will get the changed method. In effect, we have changed the behavior of every object based on this class by adding one line of code to the class definition.</P>
<p>But wait, there's more. Not only have we modified all the objects based on class LIGHT, we have also modified every object based on subclasses of light (e.g. Dimmer). This makes for a powerful way of developing reusable code. The flip side to this is if you break a class, you may also break all the subclasses (regardless of which application you have used it in) based on it. If you have used the class in a production application, you'll need to be very careful with this.</P></BODY></HTML>

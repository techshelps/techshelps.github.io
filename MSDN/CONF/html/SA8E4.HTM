<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Manipulation Routines</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Data Manipulation Routines</H3><p>There are several routines that convert values between network byte order and host (or local system) byte order. Windows Sockets offers byte-ordering routines for 16- and 32-bit values from both host byte order and network byte order. The <I>htons()</I> function takes a 16-bit value (a short), and converts it from host byte order to network byte order&mdash;hence the name htons (host to network short). The other byte-ordering functions available are <I>htonl()</I>, <I>ntohs()</I>, and <I>ntohl()</I>.</P>
<p>There are two other useful routines offered by Windows Sockets which convert IP addresses between strings and network byte-ordered 32-bit values. These functions are <I>inet_ntoa()</I> and <I>inet_addr()</I>. These routines are useful to convert the IP address of an endpoint user input. In the following example, a TCP-based server application uses the <I>inet_ntoa() </I>function to log incoming connection attempts:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">SOCKET             cli_sock,    srv_sock;
LPSOCKADDR_IN        cli_addr;
char             *cli_ip,     buf[MAX_BUF];
int             len;
.
/* Accept incoming connection, create new local socket cli_sock */

cli_sock=accept(srv_sock,(LPSOCKADDR)&amp;cli_addr,&amp;len);

if (cli_sock==INVALID_SOCKET){
    return(ERROR);
}

/* Convert endpoint IP address from network byte order to ASCII */

cli_ip=inet_ntoa(cli_addr.sin_addr);
sprintf(buf,"Incoming connection request from: %s.\n",cli_ip);
log_event(buf);</font></pre></BODY></HTML>

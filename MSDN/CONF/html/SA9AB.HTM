<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making the Connection</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Making the Connection</H3><p>Since FoxPro is being used as the front end and the back end is not the native FoxPro engine, but rather the Microsoft SQL Server for Windows&nbsp;NT, the developer must connect to this foreign engine. The method of connecting used in FoxPro is through the Open Database Connectivity (ODBC) standard. These ODBC drivers must be present for the connection to take place. A "gotcha" to take into account here is that FoxPro is a true 32 bit application and, therefore, requires 32 bit ODBC drivers. For those of you who were familiar with ODBC through installations of Microsoft Word, Microsoft&nbsp;Access, Microsoft Excel, Microsoft Visual Basic&reg; 3.0 or FoxPro 2.6, Visual FoxPro requires an updated version of 32 bit drivers.</P>
<p>A connection takes place by specifying three or four parameters, depending on the type of connection. In a standard connection three parameters, the Data Source Name, User ID and Password are supplied. In a connection through a connection string, an additional parameter for the database to use is included. The ability to specify the database at the time of connection makes the connection string method the preferable connection method and in some back ends, other than the Microsoft SQL Server for Windows&nbsp;NT, it is the only connection method available.</P>
<p>Visual FoxPro has a unique capability in that the developer can store named connections in a database. These named connections are handy because you specify connection parameters that are saved in the database container and can then be referred to repeatedly by name. These connections can be created visually or programmatically. An added extra capability of these connections is that they can be shared, so that multiple processes can use just one connection, thereby decreasing the server system requirements.</P>
<p>The figures below show the two options available when you create or modify a database connection.</P>
<P><img src="41098.gif"></P>
<P><img src="41099.gif"></P>
<p>The Connection Designer can be invoked visually using the New File dialog, Project Manager or programmatically through the following code:</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3"><B>*** Open the Database first to hold the connection</B>
OPEN DATABASE cstest
<B>CREATE CONNECTION jfh</B></font></pre>
<p>This existing connection can be modified in the future visually through the Project Manager or with the Modify Connection command. The following shows how to create the above named connections using code.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3"><B>*** Standard connection</B>
CREATE CONNECTION jfh ;
  DATASOURCE 'Mars32' USERID 'sa' PASSWORD 'homnick'

*** Connection string
CREATE CONNECTION jfh ;
<B>  CONNSTRING 'DSN=Mars32; UID=sa; PWD=homnick; DATABASE=pubs;'</B></font></pre>
<p>The Connection Designer also allows you to define when and if a standard CS Login dialog is displayed. By not including one of the parameters, such as the password, a dialog (depicted below) will prompt the user for the missing information. Once again, it is preferable to use connect strings in most cases because of its capability to define which database to use.</P>
<P><img src="41100.gif"></P>
<p>The developer can also connect through SPT. A SPT connection is executed through the use of the SQLCONNECT() and SQLSTRINGCONNECT() functions. There are three ways to use SQLCONNECT(). The SQLSTRINGCONNECT() function is the preferred method of passing a connection string without an existing database connection. The code examples listed below show each possible usage.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3"><B>*** 1. Invoke a SQL Server Login dialog</B>
nCSHandle = SQLCONNECT()

*** 2. Standard connection
nCSHandle = SQLCONNECT('Mars32', 'sa', 'homnick')

*** 3. Connection using named database connection jfh
*** This database connection can be created as a standard connection 
*** or with a connection string
nCSHandle = SQLCONNECT('jfh')

*** Connection string
<B>nCSHandle = SQLSTRINGCONNECT('DSN=Mars32; UID=sa; PWD= homnick; DATABASE=pubs;')</B></font></pre>
<p>The variable nCSHandle returned by the function can then be used in other SPT functions to point to this connection.</P></BODY></HTML>

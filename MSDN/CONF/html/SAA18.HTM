<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Classes vs. Code Generation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Classes vs. Code Generation</H3><p>With Visual FoxPro 3.0, when you find yourself saying, "I could do it in 2.6 by modifying GENSCRN or using GENSCRNX," this should be an indication for you to start thinking about a class hierarchy to solve the problem using object-orientation. There is no reason for code generation with Visual FoxPro since it is now an object-oriented language. You can build classes and class relationships that allow you the same flexibility as FoxPro 2.x code generation (SPR) but with the power of encapsulation, polymorphism, and inheritance.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>E-mail Agent Using Visual Basic</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>E-mail Agent Using Visual Basic</H3><p>The simplest way to produce an e-mail agent is to modify the sample MAPI application written in Visual Basic. When a message is received, it should be examined for keywords or attachments. The query may be dropped into our RAS agent directory for it to be processed. Results are checked for periodically and, when found, e-mailed back to the user. </P>
<p>This approach has some significant benefits.</P>
<UL><LI>     Concurrent requests can be eliminated.</LI><LI>     Reduces blocking on server</LI><LI>     MAPI complications avoided:

<UL><LI>     No executables spawned</LI><LI>     No dependency on PARAMBLK</LI></UL></LI></UL><p>E-mail could be received from almost anywhere and processed. This permits ad hoc queries to be sent from any e-mail provider.</P></BODY></HTML>

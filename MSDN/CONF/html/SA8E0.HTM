<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Basic Structures</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>The Basic Structures</H3><p>Although the Windows Sockets specification contains about a dozen different structures, application developers will quickly become familiar with a few that are required by nearly all Windows Sockets applications. </P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">struct sockaddr {
        u_short sa_family;              
        char    sa_data[14];
};
struct sockaddr_in {
        short   sin_family;
        u_short sin_port;
        struct  in_addr sin_addr;
        char    sin_zero[8];
};</font></pre>
<p>The <I>sockaddr </I>structure is used by Windows Sockets to specify a local or remote endpoint address to which to connect a socket. An endpoint address simply contains the appropriate information to send data between two sockets on different systems. As the contents of endpoint addresses differ between network protocol families, the <I>sockaddr </I>structure was designed to accommodate endpoint addresses of variable size, satisfying requirements of many common network protocol families. The first field of a <I>sockaddr </I>contains the family number identifying the format of the remaining part of the address.</P>
<p>In the Internet address family, the <I>sockaddr_in</I> structure is used to store the endpoint address information and is cast to type <I>sockaddr</I> for the functions which require it. Other address families must define their own <I>sockaddr_</I> structures as appropriate for their needs. For TCP/IP, the <I>sockaddr_in </I>structure breaks the endpoint address into its two components: port ID (sin_port) and IP address (sin_addr), and pads the remaining eight bytes of the endpoint address with a character string (sin_zero). The port and IP address values are always specified in network byte order. The value for <I>sin_family</I> under TCP/IP is always <I>AF_INET</I> (address family Internet).</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">struct  hostent {
        char FAR *            h_name;           
        char FAR * FAR *        h_aliases;  
        short                   h_addrtype;             
        short                   h_length;               
        char FAR * FAR *        h_addr_list;
};</font></pre>
<p>The <I>hostent</I> structure is generally used by the Windows Sockets database routines to return <I>host</I>, or system, information about a specified system on the network. The host structure contains the primary name for a system including optional aliases for the primary name. Additionally, it contains a list of address(es) for the specified system. This information is generally sought for the remote system to which an application is connecting using the Windows Sockets database routines described later.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">struct  protoent {
        char FAR *            p_name;           
        char FAR * FAR *        p_aliases;  
        short               p_proto;                
};

struct  servent {
        char FAR *            s_name;           
        char FAR * FAR *        s_aliases;  
        short             s_port;                 
        char FAR *            s_proto;          
};</font></pre>
<p>The <I>protoent</I> and <I>servent</I> structures are also filled by the Windows Sockets database routines. These structures contain information about a particular protocol (TCP or UDP) or service (finger or telnet, for example) respectively. Along with the primary name and an array of aliases for the protocol or service, these structures also contain their corresponding 16-bit IDs, necessary to build a valid TCP/IP endpoint address.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">typedef struct WSAData {
        WORD                    wVersion;
        WORD                    wHighVersion;
        char                    szDescription[WSADESCRIPTION_LEN+1];
        char                    szSystemStatus[WSASYS_STATUS_LEN+1];
        unsigned short          iMaxSockets;
        unsigned short          iMaxUdpDg;
        char FAR     *          lpVendorInfo;
} WSADATA;</font></pre>
<p>Finally, the <I>WSAData </I>structure is filled in by a Windows Sockets DLL when an application calls the <I>WSAStartup() </I>API. Along with Windows Sockets version information, the structure also contains vendor-specific information, such as the maximum number of sockets available and the maximum datagram size. The <I>szDescription</I> and <I>szSystemStatus</I> members can be used by an implementation to identify itself and the current status of the DLL. For example, an implementation may return the text "Joe's ShareWare Windows Sockets implementation v1.2. 10/22/92" in <I>szDescription. </I>The specification of the <I>lpVendorInfo</I> member is completely up to an implementor and is not defined in the Windows Sockets specification.</P></BODY></HTML>

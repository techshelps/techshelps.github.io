<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Classes for Reuse</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Creating Classes for Reuse</H3><p>We frequently will create a class for something that we will use many times. For example, we could create a generic "OK" button that simply closes a form. If we create a class once, we can reuse that button as many times as we want without having to write a single line of code.</P>
<p>Classes can be more complex than a simple OK button. For example, we can create a drop down list object (comparable to the popup list in Microsoft&reg; FoxPro&reg; 2.6) that would get a list of all drives on the system and allow the user to select one. This type of object (we'll see an example of one later on), is more complex than a simple OK button and benefits more from the object oriented approach.</P>
<p>Coding classes for reuse is one of the primary reasons we create classes. In fact, the majority of the classes we create in our applications will probably fall into this category. In addition to creating <I>Visual Classes</I> (classes that we use for our application's graphical user interface (GUI), we can also create classes that model the business entities in our applications such as customers, invoices, and so on. Again, the idea is that we would model the behaviors of these objects only once and then could reuse them, either by instantiating objects directly from the classes or using the classes as bases for other subclasses.</P></BODY></HTML>

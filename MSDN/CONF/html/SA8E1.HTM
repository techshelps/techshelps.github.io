<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up, and Cleaning Up Your Windows Sockets Application</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Setting Up, and Cleaning Up Your Windows Sockets Application</H3><p>As mentioned earlier, Windows Sockets offers some extensions to the Berkeley sockets paradigm to allow your application to be more "friendly" in the Windows Environment. All such functions are preceded by the characters "WSA", which is short for "Windows Sockets API." Although the use of WSA functions is strongly advised, there are two WSA functions that your application can't avoid: <I>WSAStartup()</I> and <I>WSACleanup()</I>.</P>
<p><I>WSAStartup()</I> "attaches" your application to Windows Sockets and causes the Windows Sockets DLL to initialize any structures that it might need for operation. Additionally, <I>WSAStartup() </I>performs version negotiation and forces an internal Windows Sockets reference count to be incremented. This reference count allows Windows Sockets to maintain the number of applications on the local system requiring Windows Sockets services and structures. The version negotiation allows an application to determine whether or not the underlying Windows Sockets implementation is able to support the same version of the Windows Sockets specification that the application is written to. A Windows Sockets implementation may or may not support multiple versions of the specification. Other Windows Sockets-specific information may also be filled in such as the vendor of the implementation, the maximum datagram size supported, maximum number of sockets which an application can open, and more.</P>
<p>The following startup code is authored to run only under version 1.1 (the most current version of the Windows Sockets specification) or later, and requires that at least six sockets be available to the calling application.</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">#define    WS_VERSION_REQD    0x0101
#define     WS_VERSION_MAJOR    HIBYTE(WS_VERSION_REQD)
#define     WS_VERSION_MINOR    LOBYTE(WS_VERSION_REQD)
#define    MIN_SOCKETS_REQD    6

WSADATA    wsaData;
char     buf[MAX_BUF_LEN];
int        error;

.
.
.
error=WSAStartup(WS_VERSION_REQUIRED,&amp;wsaData);
if (error !=0 ) {
    /* Report that Windows Sockets did not respond to the WSAStartup() call */

    sprintf(buf,"WINSOCK.DLL not responding.");
    MessageBox (hWnd, buf. "Windows Sockets Error",MB_OK);
    shutdown_app();
}

if (( LOBYTE (wsaData.wVersion) &lt; WS_VERSION_MAJOR) || 
    ( LOBYTE (wsaData.wVersion) == WS_VERSION_MAJOR &amp;&amp;
      HIBYTE (wsaData.wVersion) &lt; WS_VERSION_MINOR)) {

    /* Report that the application requires Windows Sockets version WS_VERSION_REQD */
    /* compliance and that the WINSOCK.DLL on the system does not support it.       */

    sprintf(buf,"Windows Sockets version %d.%d not supported by WINSOCK.DLL",
         LOBYTE (wsaData.wVersion), HIBYTE (wsaData.wVersion));
    MessageBox (hWnd, buf. "Windows Sockets Error",MB_OK);
    shutdown_app();
}

if (wsaData.iMaxSockets &lt; MIN_SOCKETS_REQUIRED ) {
    
    /* Report that WINSOCK.DLL was unable to support the minimum number of  */
     /* sockets (MIN_SOCKETS_REQD) for the application                     */

    sprintf(buf,"This application requires a minimum of %d supported sockets.",
         MIN_SOCKETS_REQUIRED);
    MessageBox (hWnd, buf. "Windows Sockets Error",MB_OK);
    shutdown_app();
}
.</font></pre>
<p>A Windows Sockets application generally calls<I>WSACleanup() </I>during its own cleanup, decrementing the internal reference count and letting Windows Sockets know that it's no longer needed by the calling application. Whatever cleanup this function forces is implementation-specific and shielded from the application. The application author should, however, check for any possible error conditions from <I>WSACleanup() </I>and report them before exiting, as this information might indicate a network layer problem in the system.</P></BODY></HTML>

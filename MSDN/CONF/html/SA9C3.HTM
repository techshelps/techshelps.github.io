<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Easier Use of Existing Functionality</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Easier Use of Existing Functionality</H3><p>Sometimes, we will create a class that represents functionality that we have traditionally been able to do with functions. This class will wrap around the functions to encapsulate the functionality and make it easier to use. These classes are known as "Wrapper Classes", or classes that are wrapped around something that we can do without a class. The only benefit of wrapping a class around it is to make the implementation of the functionality easier in our systems.</P>
<p>A good example of this kind of class is a class that encapsulates the functionality of FoxTools or even SYS() functions. By creating a class with methods to handle the individual functions, we can not only forget the cryptic and often unrecognizable names for functions, but we can also encapsulate the error handling associated with the objects.</P>
<p>We'll look at a wrapper class for FoxTools later.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Utilizing ODBC to Integrate Microsoft Project with Microsoft Access</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Utilizing ODBC to Integrate Microsoft Project with Microsoft Access</H1><P CLASS="byl">Presented by:    Johnny Johnson</P>
<P>Mr. Johnson is an integration  consultant for Micro-Frame Technologies, Inc, and President of Silverdale Software Systems, Inc. He has taught computer science at the US Naval Academy and business management courses at community colleges. He has developed large scale project management and database systems for the FAA, Air Force, Martin Marietta, as well as other government and commercial customers. He is a Microsoft Project Solutions Partner and Trainer.</P>
<P>Phone: (206) 598-5842<BR>Fax: (206) 598-5843<BR>CompuServe: 74415,1237<BR>Internet: silvrsof@interserv.com</P>
<H2>Microsoft Project 4.0 and ODBC Databases</H2>
<H3>Why Integrate Project Management Data with a Relational Database Management System?</H3>
<p>Since the CPM schedule and resource data is only part of the management problem, I almost always find that data from traditional project management systems needs to be integrated with accounting, text documents, pictures, charts, and other organizational data.  This is where I find that a relational database environment is needed.  Microsoft has provided this in Microsoft Access, Microsoft FoxPro, Visual Basic, SQL Server, and Visual Basic for Applications.  Using these tools, we can create an integrated, distributed project management environment.</P>
<p>In Project Management integration, I see the relational database system as the central point of access to the data and to other software because: </P>
<ul><li>Schedule Data is only a part of the total Management problem.</LI>
<li>Many people have access to the Project Management data without having to understand the complexities of project management software.</LI>
<li>One can use the database to import, export, process, or report on data. </LI>
<li>One can query external databases directly or "lookup" data.</LI>
<li>One can "launch" other products using an "application execute" or "OLE" approach.</LI>
<li>One can use "OLE" or "ODBC" to maintain a "real-time" update between products.</LI>
<li>One can build a consistent user interface in the database product.</LI>
<li>One has better control of data validation in the DBMS.</LI></UL>
<p>I would like to concentrate this discussion on using Microsoft Access as the example database, knowing that there are other products that could also do the job.  I particularly like to use Microsoft Access because of its ability to "access" other databases without importing data but by attaching to the database files via "ODBC"  and using their data. We can still be maintain any current system by using the original database language then using Microsoft Access to create reports or even update data across several dissimilar databases.  Additionally, we can liberally use Microsoft Visual Basic 4.0 and Visual Basic for Applications to create functions, forms, and add functionality.  </P>
<H3>Organizational Implications of a database of Project Management data</H3>
<p>I would like to discuss the organizational and philosophical implications of integrating Project Management data with database systems.</P>
<p>The first questions we should answer are:</P>
<OL><LI><B>Who needs to see which data elements?</B></LI>
<P>Engineers at the detail level need more information than the supervisor or the supervisor's manager.  This is always a hard question to answer because it involves organizational attitude about "Micro" management or to what level do we roll up data at each management level.  Generally speaking, the less data depicted the better.  You can always get detail data when needed.  If all management needs, is to answer the question - "When will it be ready?", then just let them see completion dates (scheduled finish, early finish, or late finish data elements).</P>
<LI><B>How often is data updated?  By whom?  Do we need "real-time" or periodic update?</B></LI>
<P>Many times I have seen organizations that say they must have "real-time" updates, yet they only update data weekly and report on it monthly.  The costs in hardware, development, and security may be an unnecessary expense.  The entire system development approach depends on how this question is answered.</P>
<LI><B>When is it needed or how often are reports due?</B></LI>
<P>What is the reporting cycle or when do reports have to be presented?  Are they due daily, weekly, bi-monthly, monthly?</P>
<LI><B>What form do the data elements need to be viewed?</B></LI>
<P>What is the best way to display the data? (graphical, bar chart, tabular, Gantt, Pert, etc.)  Project schedules may make more sense displayed as Gantt Charts but at times a tabular list of finish dates may be more appropriate.  </P>
<LI><B>To what level of detail do I need to manage (Managing to Your Threshold of Pain)</B></LI>
<P>If  I collect schedule data by the minute, that means my schedule could change every minute, and would require status to be updated every minute or my schedule would be wrong.  This is appropriate if you are launching a space shuttle, but for most companies, trying to plan to that level is "cruel and unusual punishment" and generally not necessary.  It has been my experience, that very little takes less than four hours, considering telephone calls, coffee, impromptu meetings, and other interruptions.  I try to factor these considerations in when I estimate duration's of work.  In some instances, if work duration's are very  critical, some form of risk analysis could be used to define worst, best, and most likely duration's for a piece of work.  Remember, data systems are supposed to save time but they don't guarantee that you will.  If you find engineers spending more time entering or manipulating data, they are most likely spending less time on engineering, which is their primary function.</P>
<LI><B>What data elements need to viewed together and where do those elements currently exist.  (in other systems, on paper, in someone's head)</B></LI>
<P>Is there significant data existing some where else?  Can I attach or import that data?  If I can, which data elements do I need?  The trick here is to reduce data redundancy, keep data integrity, and keep down development costs.  This is where Access's ability to attach to data is especially useful.</P></OL>
<H2>Specific Approaches to Integrating Microsoft Project Data with Microsoft Access Data</H2>
<H3>Microsoft Project</H3>
<UL><LI>Use Microsoft Project to create schedules and produce graphical reports at the detailed planner or working level.</LI>
<LI>Export "rolled-up" summary data to Microsoft Access for management reporting.  Most managers don't care how schedule data was obtained, they just want to know when we will finish and how much will it cost.  In other words, can we complete "on time" and "on budget" or are there legitimate delays or cost overruns?  "Rolling-up" data from Microsoft Project to Microsoft Access isolates the detail from the managers and allows them to concentrate on only the data needed for management decision making and reporting, thus avoiding information overload. By using Microsoft Access, many people may have access to the data without having to understand the complexities of Microsoft Project.  How current this data needs to be is a function of the reporting and updating cycles.</LI>
<LI>Use Microsoft Project to export detailed data to Microsoft Access for integrated relational reports.</LI>
<P>The hardest reports to do in Microsoft Project are those that require a "one-to-many" relationship, such as resources related to tasks and grouped by task.  Microsoft Project 4.0 allows a direct export of all of its data to a Microsoft Access database  including Task, Resource Pool, Resource Assignment, and Project Header Information.  Four tables are created in Microsoft Access, allowing for easy linking of one-to-many data elements.</P>

<P>You may copy as many projects as you want into the Access database, as each project maintains a unique "key".  Project may also load projects from this Access project database.  This capability gives rise to several interesting implementations which I will discuss later.</P></LI><li>Use Microsoft Project to produce graphical reports from  Microsoft Access data.  
<P>In some cases we could send manually entered schedule dates from Microsoft Access to Microsoft Project to produce simple Gantt bar charts.  This is especially useful for schedule data that requires no "logic" (dependencies) and we could simply send the task name and the start and end dates to produce bar charts.</P></LI></UL><H3>Microsoft Access / ODBC Database</H3><ul><li><B>Use Microsoft Access to produce detailed management reports about schedule or resource usage.</B>
<P>Use Microsoft Access for integrated tabular and graphical reports.  Examples of this could be:  integrating resource schedule data with accounting data, time sheets, or for forecasting.  We could also use this method for trend analysis or saving historical schedule data for later analysis or regression.  Another report might be forecast versus actual spending curves.</P></LI><li><B>Use Microsoft Access to collect changes in schedule and status. </B>
<P>Many users can update status or changes, such as actual start and complete dates, and percent complete, in the multi-user database.  That data can then update schedule data in Microsoft Project.</P></LI><li><B>"Look-Up" the Schedule from the Microsoft Access Database.</B>
<P>In this approach, you could leave the schedule data in Microsoft Project, then through VBA start Microsoft Project with the corresponding schedule for the project you are currently viewing in the Access database.</P></LI></UL><H2> </A>Microsoft Project to/from Microsoft Access Using the "Save to Database" Feature.</H2><p>With Microsoft Project 4.1, you may save a project to a Microsoft Access or ODBC database directly. You may have it automatically create a "new" database with the correct "project" structure or append or update a previously created "project" database. The Microsoft Project data transferred is captured in four Microsoft Access tables including: Tasks, Assignments, Resources (Pool), and the Project Header data such as Project Name, Manager, Company, and so on.  Basically, all data needed for a project is transferred. </P>
<H3>Details about the "Save to ODBC Database" Utility</H3><p>Before you save a project using the "Save to Database" utility, you need to set up a DSN (Data Source Name).  This is done in the using the Control Panel's 32 Bit ODBC dialog.  You can set up a Microsoft Project database container as follows:</P>
<p><img src="TechEd1.gif"></P>
<p>Click on the appropriate Data Source Driver, then Setup</P>
<p><img src="TechEd2.gif"></P>
<p>If you are creating a new database, click "create" and give the database a name, else use the "select" option.</P>
<p>Now you are ready to save to that data source. When saving a project to an ODBC database for the first time, you are prompted to select the appropriate data source name (DSN) to which to save the project.  The project data will be appended to that database.  If that project already exists in the database, it will delete the previous project data and replace it with the new data.  Once you have saved a project to a database the first time, the project remembers where it was saved.  The next time you save the project, using the "Save to Database" utility, it will automatically be saved to the database where it was last saved.  Each project file holds this intelligence in the Text 1-4 fields of Task 0 (the Project Summary task).</P>
<P><img src="TechEd3.gif"></P>
<ul><li><B>Task 0 - Project Summary Text Fields</B></LI>
<LI>Text1: holds the Microsoft Access ProjectKey field which is a unique date-time stamp.</LI>
<LI>Text2:  holds the name of the database where the project was last saved.</LI>
<LI>Text3:  holds the last saved date</LI>
<LI>Text4:  holds the project name</LI></UL>
<H3>Limitations to the Save to ODBC Database Utility</H3>
<UL><LI>Can Open or Save only entire projects, not filtered or parts of projects.</LI>
<LI>Cannot save sub-projects with the project itself.  Save separately.</LI>
<LI>Because the Utility uses the MPX interface format, very large projects take a while to read and write.</LI></UL>
<H2>The ODBC "Project Database"</H2>
<p>The specifics of the Microsoft Access "project" database structure allow for the user to relate all data.</P>
<P>All table records are "keyed" to a unique Project Key. A sample of the "project" table data structure definition follows:</P>
<P><img src="TechEd4.gif"></P>
<P><B>This is a partial listing of the "Project" table definition in Microsoft Access&mdash;fields unique to each project saved in the database.</B><P>
<OL><LI>Relational Queries are the basis of Microsoft Project data in the Microsoft Access Database</LI>
<LI>Relational reports can be produced by linking the Microsoft Project "key" fields such as "ID" or "UniqueID," along with the Project Key field. The following Microsoft Access Query typifies what one would need for a "one-to-many-to-many" type of relationship. Each project has many tasks, which in turn have many resources. It is important to note that the project key is very important when grouping tasks and resources by project. In the example query that follows, you will see that without the "ProjectKey," one could not tell which tasks or resources belong to which project. </P>
<P><img src="TechEd5.gif"></P>
<LI>Query linking all of the "Project" database tables together.</LI>
<p><img src="TechEd6.gif"></P>
<LI>Results of Previous Query</LI>
<LI>Cross project (multiple) project analysis and reporting is possible in the relational environment. The picture below shows a very simple report using the previous query. The report relates Resources to Tasks To Projects.</LI>
<P><img src="TechEd7.gif"></P>
<P>Simple Relational Report Using Microsoft Project Data - Report Filtered on Carpenter</P>
<LI>Reports can be created using other database data in Microsoft Access or by attaching to other ODBC databases for "joined" reporting.</LI>
<LI>You can update data in Microsoft Access, then send data back to Microsoft Project 4.1 for re-calculation.  (This must be done carefully when changing the "actual" values.  For example, Scheduled data must be set to Actual data when it is equal or exceeds Scheduled values.)</LI>
<LI>While the project data is in the database, you have complete multi-user access to the project schedules and can create a system in Microsoft Access including security, forms, reports, and so on.</LI></OL>
<H3>Processing "Projects" Stored in Microsoft Access <BR>Database</H3>
<p>In Microsoft Project 4.1, you may "Open" projects directly from the Microsoft Access or ODBC "project" database.  Since all project data is "saved" to the database, you can re-open a project at any time; you don't need to save the ".MPP" file unless you need to for local reasons. After Microsoft Project 4.1 re-calculates the data, changes the logic, and so on, the project can be "saved" back to the original database, thus updating the "master" project database.</P>
<H3>Possible Integration Scenarios</H3>
<p>There are two scenarios that come immediately to mind.</P>
<OL><LI>first is to store all project data ONLY in Microsoft Access or ODBC database.  After Microsoft Project 4.1 creates schedules, save all projects into the "project" database and do not save or maintain the "*.MPP" files.</LI>
<LI>The second way is to store Microsoft Project 4.1 data in the Microsoft Access or ODBC "project" database ONLY for reporting purposes. All changes are maintained in the Microsoft Project 4.0 files (*.MPP") locally. This data is then saved periodically to the "project" database.</LI></OL>
<p>Both of these scenarios assume that everyone involved in updating a specific schedule are using the same calendar; otherwise the calculations of schedule dates will vary.</P>
<p>As in all distributed multi-user implementations, contention is an issue. Who has a "copy" of the project from the database on a local machine? If more than one person has a copy, there is a possibility of one person over-writing anther person's data in the database.  These issues can be taken care of through policy, security, or an automated "check-out" procedure built into the ODBC database system.</P>
<H2>The Tech ED 96 Demo Database</H2><p>The demo database, MFTITE96.MDB contains all of the demos shown and many sample forms, queries, and reports.  Once you start Microsoft Access 7.0 and open the MFTITE96.MDB, go to the forms tab on the database menu and open "frmDemoMainMenu" which brings up a form that allows you to easily explore the demo forms, queries and reports.  The demo database is intended to show you ways to properly link tables, make complex queries, design simple forms and produce complex reports across all of the projects in the database.  The power of this approach is that it requires virtually no programming to create.  Obviously, very sophisticated applications can be produced by using Access Basic and Macros.</P>
<p><img src="TechEd8.gif"></P>
<P><B>Microsoft Access 7.0 Database Window</B></P>
<p><img src="TechEd9.gif"></P>
<P><B>Demo Database "MFTITE96"  Main Menu</B></P>
<H3>Finding Schedule Data Across All Projects</H3><p>The purpose of the Project Summary form is to demonstrate creating a main and subform linking them together with the ProjectKey, which is created when a Microsoft Project 4.1 project is saved to the database, using the "Save to Database" utility.  The main form browses the "Project" table, which has one summary record for each project in the database.  The subform, which is linked by ProjectKey, lists all tasks associated with the current Project selected in the main form.  Using a Main/Subform metaphor is natural because of the one-to-many relationships that occur in project management models.  Users may quickly browse the schedule data across all projects and need not go back to Microsoft Project 4.1 to view this data.  Remember, the advantage of using Microsoft Access and Microsoft Project together is that every one can view project management data without having to be a project manager or have training in project management.</P>
<p><img src="TechEd10.gif"></P>
<P><B>The Project Summary Form</B></P>
<H3>Selecting Like Tasks Across All Projects</H3><p>There are times when you want to compare the same task across all projects.  The "Select Specific Task" form demonstrates selecting a unique task name from a list box, then displaying all matching tasks across all projects.  In this case the main form is based on a list of unique tasks.  When you select a task, the subform, which is linked by the Task Name to the list box control name (the selected task), the subform updates the data to match the selected task.</P>
<p><img src="TechEd11.gif"></P>
<P><B>Microsoft Access Form Design Mode Properties Dialog</B></P>
<p><img src="TechEd12.gif"></P>
<P><B>The Select Tasks Form</B></P>
<H3>Finding What Resources Are Assigned to a Specific Task</H3><p>To answer the question, "Who is working on a specific task on a specific project?" use the "Show Resources Assigned to Task" form.  Again this form uses a main/subform construct linking this time on both ProjectKey and Task Name to select the subform data.  Although it might be faster to link on TaskID, there is no guarantee that the same task name will have the same TaskID accross several projects.  In Microsoft Project 4.0, it is very difficult to ensure the same TaskID across like work.  If this is necessary, it might be better to create a standardized coding scheme and use one of the user text fields (Text1-Text10) and assign it there.</P>
<p><img src="TechEd13.gif"></P>
<P><B>Find Resources Assigned to a Specific Task and Project</B></P>
<p>In this case the values returned by the list box controls are used to link to the subform.  SelectedTask and SelectedProject are the names of the list box controls and assume the value returned for the bound column of the combo box. </P>
<p><img src="TechEd14.gif"></P>
<P><B>Control Names Used to Link Main to Subform</B></P>
<H3>What Tasks Are Assigned to a Specific Resource</H3><p>Probably the most complex query you can make, using the four basic tables in the project database, is to find out which resources are assigned to which tasks on which projects.  It is the one-to-many-to-many that makes this query interesting.  The demo form allows you to select a unique resource name then links to the subform query by resource name.  You cannot use resource ID's because you cannot guarantee that the resource pool across all projects is consistent.  Each project, when is saved to the database, gets its own copy of the resource table (pool).  There are ways of maintaining a common pool but it requires that you set up the system and procedures up front.  In other words, set up and ensure that everyone uses the common resource pool from the outset.</P>
<p><img src="TechEd15.gif"></P>
<P><B>All Tasks Assigned to Carpenter Across All Projects</B></P>
<H3>Sending Data to Microsoft Project to Produce Gantt Charts</H3><p>Clicking on the "Send Resource Schedule to Project" will take the filtered data and send it via DAO to Microsoft Project and produce a new project from that data.</P>
<p><img src="TechEd16.gif"></P>
<p>Code behind the button:</P>

<pre><FONT FACE="Courier New" SIZE="3">Sub btnSendSchedToProject_Click()
On Error GoTo Err_btnSendSchedToProject_Click
SendFilteredTasksToMSP41
Exit_btnSendSchedToProject_Click:
    Exit Sub
Err_btnSendSchedToProject_Click:
    MsgBox Err.Description
    Resume Exit_btnSendSchedToProject_Click
End Sub</font></pre>
<p>The Module Sub routine:</P>

<pre><FONT FACE="Courier New" SIZE="3">Public Sub SendFilteredTasksToMSP41()
Dim dbs As Database, MyQuery As QueryDef, MyRS As Recordset
Dim oProj As Object, ResourceToSend As String
Dim dbLocal As Database
Dim tmpID As Long
' Return Database variable that points to current database.
Set dbLocal = CurrentDb
ResourceToSend = Forms![frmTasksAssignedToResource]![SelectedResource]
MsgBox ResourceToSend
' Construct SQL statement including parameters.
Set MyQuery = dbLocal.OpenQueryDef("qryFilteredTasks")
MyQuery.SQL = "SELECT * FROM qryResourcesToProject WHERE [Resources].[Name] = """ &amp; _
                 ResourceToSend &amp; """ ;"
Set MyRS = dbLocal.OpenRecordset("qryFilteredTasks", dbOpenDynaset)
'create an instance of Project
Set oProj = CreateObject(Class:="MSProject.Application.4_1")
With oProj
    .DisplayAlerts = False
    .FileNew
End With
'increment the counter for the Task ID
tmpID = 1
Do Until MyRS.EOF
    'use the settaskfield method to write data from Access     'record to Project
    With oProj
    .SetTaskField Field:="Name", Value:=MyRS![Tasks.Name],                 TaskID:=tmpID
    .SetTaskField Field:="Start", Value:=MyRS![Start],                     TaskID:=tmpID
    .SetTaskField Field:="Duration", Value:=MyRS![Duration],                 TaskID:=tmpID
    .SetTaskField Field:="Resource Names",                                 Value:=MyRS![Resources.Name], TaskID:=tmpID
    End With
    MyRS.MoveNext
    tmpID = tmpID + 1
Loop
'Make project visible
With oProj
    .Visible = True
    .DisplayAlerts = True
End With
End Sub</font></pre>
<p><B>The Resulting Gantt Chart:</B></P>
<p><img src="TechEd17.gif"></P>
<P><B>Gantt Chart of all of the Carpenter's work.</B></P>
<H3>Demo Reports</H3><p>The demo reports included in the database demonstrate how to create the underlying queries and group correctly to get resource and task data.  The Resources by Task report groups on Project.Name and Task.Name and is sorted by early task start date as follows:</P>
<p><img src="TechEd18.gif"></P>
<P><B>Sorting and Grouping of Resources by Task</B></P>
<p><img src="TechEd19.gif"></P>
<P><B>Report Design Mode of Resources by Task Report</B></P>
<p>Totaling in a report can be done in the footer of the group you are totaling.  In this case, I totaled the resource cost for each task by creating a text box with its control source equal to =Sum([Cost]) in the tasks footer.  To get the total for the project, just duplicate the text box in the project footer and the total of all task costs gets added there.</P>
<p><img src="TechEd20.gif"></P>
<P><B>Total a Field Using a Text Box</B></P>
<p><img src="TechEd21.gif"></P>
<P><B>Resulting Resource by Task Report</B></P>
<H3>The Tasks Assigned to a Specific Resource Report</H3><p>This report is less complex than the last report because it only groups on resource name.</P>
<p><img src="TechEd22.gif"></P>
<P><B>Tasks Assigned to a Specific Resource</B></P>
<H3>The Classic "Look Ahead" Report</H3><p>The "Soon to Come Due 30/60 report uses a calculated field in the query to make the report group on tasks due from today + 30 days and tasks due 30-60 days from now.  This technique makes "look ahead" reports very easy.  First of all, the Due3060 query limits all tasks to those scheduled to finish from "Now" until 60 days from now.  To do this, simply enter the Finish field's criteria as:</P>
<p><B>&gt;Now() And &lt;Now()+60</B></P>
<p><img src="TechEd23.gif"></P>
<P><B>The DUE3060 Query - Design View</B></P>
<p>The trick in this query is to create a calculated field called "Due" then make it equal to a Boolean expression as follows, by Selecting Shift-F2 to zoom in so that it is easier to type in the expression.  Basically, if a finish date falls between now and 30 days from now, Due is equal to "30" and if the finish falls between 30 to 60 days from now, Due is equal to "30 to 60".  Now in the report group on "Due" and sort by ascending finish date.</P>
<p><img src="TechEd24.gif"></P>
<P><B>Boolean Expression that Creates Virtual Field "Due"</B></P>
<p><img src="TechEd25.gif"></P>
<p><img src="TechEd26.gif"></P>
<P><B>Results of Due3060 Report   *  Note the Grouping Headers print out correctly with the value set in the calculated Due field in the query.</B></P>
<H2>Conclusion</H2>
<p>The purpose of this presentation was to show that by using both Microsoft Project 4.1 and an ODBC database together, one can not only create integrated applications but also make project management data available to a broad base of users without the overhead of project management training those who need only view the data.  Additionally, I hope you can see the advantages from both a system and organizational perspective of using Microsoft Project 4.0 in large scale implementations.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tagging Content</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Tagging Content</H2><p>For each item and screen in a title, information for all fields in the Item and Screen table must be supplied. To accommodate the needs of the widest range of content providers we devised two different methods of supplying screen and item information:</P>
<P><ul><li>    Complete Tagging of Content for Inclusion. All of the information needed to fill the Item and Screen tables is provided in a set of Rich Text Format (RTF) and plain text files. The files have text tags in them that correspond to fields in the Item and Screen tables.</P>
<P><li>    Minimal Tagging of Content for Inclusion. Item information is supplied by the author in an outline. Our compiler reads the outline and creates Item and some Screen table records accordingly. Content files have only a single tag in them that marks where one screen ends and another begins within a particular file.</P></ul>
<H3> </A>The Tags</H3><p>To mark and describe the content we devised this set of text markers:</P>
<P><ul><li>    <B>..ITEM:</B> Marks the beginning of an item. Following the tag is the title of the item as it will appear in the table of contents of the front-end. The text following this tag is stored in the ItemTitle field in the Item table.</P>
<P><li>    <B>..SCREEN:</B> Marks the beginning of a screen. In a minimally tagged file, this is the only tag present. Following the tag is the title of the screen as it will appear in the front-end. The text following this tag is stored in the ScreenTitle field in the Screen table. The tag optionally includes a sequence number that maps to the SortOrder field in the Screen table.</P>
<P><li>    <B>..ID:</B> A unique id for the item or screen. The text following this tag is stored in the ItemId and ScreenId field in the Item and Screen tables respectively.</P>
<P><li>    <B>..PARENT:</B> The item one level up from this one in the table of contents. The text following this tag is stored in the Parent field in the Item table.</P>
<P><li>    <B>..TOCPOSITION: </B>The position of the item under its parent in the table of contents. The text following this tag is stored in the SortOrder field in the Item table.</P>
<P><li>    <B>..SKIMTEXT:</B> A thumbnail description of the content of the item. The text following this tag is stored in the SkimText field in the Item table.</P>
<P><li>    <B>..SCREENTYPE:</B> An identifier that determines how to display the chunk. The text following this tag is stored in the Viewer field in the Screen table and the ItemType field in the Item table.</P>
<P><li>    <B>..FILTERS:</B> The types under which the chunk should be listed. The text following this tag is stored in the Filters field in the Screen table.</P>
<P><li>    <B>..PICTURE:</B> The name, if any, of the graphic associated with this screen. The text following this tag is stored in the MediaId field in the Screen table.</P>
<P><li>    <B>..TEXT: </B>The formatted text of the screen begins of the paragraph following this tag. The text following this tag is stored in the Text field in the Screen table.</P></ul>
<H3> </A>A Fully Tagged Item</H3><p>Below is an example of a fully tagged item within a content file. This particular block of text will create an entry in the table of contents titled "Creating the Title Slide" and a screen of the same title that is displayed in our RTF viewer when the user clicks the table of contents item.</P>
<P>..ITEM:Creating the Title Slide</P>
<P>..ID:p2_c3_4</P>
<P>..PARENT:p2_c3_1</P>
<P>..TOCPOSITION:03</P>
<P>..ITEMTYPE:screen</P>
<P>..SCREENTYPE:rtf</P>
<P>..FILTERS:procedure,new</P>
<P>..PICTURE:</P>
<P>..HOTSPOTS:</P>
<P>..SKIMTEXT:</P>
<p>Start things off with the title slide. Create it using the Title Slide autolayout. </P>
<p>..TEXT:</P>
<p><B><I>New Feature! </I></B>As shown in the ^.^Figure,@CH05_03.bmp&amp; the Title Slide layout displays two text <I>placeholders</I>--dashed boxes that show the location for an object on a slide. All placeholders contain a prompt that tells you to click (or double-click) to add text, a graph, or</P>
<p>For every item there is at least one screen. Thus, the compiler creates a record in both the Item and Screen tables from this block of text. Some tags pertain to both records. For example. both records will have the same id and title (thus linking the screen to this item). Other tags pertain to only one record. For example, the FILTER tag sets data only in the Screen table. Notice that below the SKIMTEXT and TEXT tags there is formatted text. This text is parsed by the compiler and moved intact into memo fields in the Screen and Item tables.</P>
<p>The tags that have no text following them store a null in the corresponding database field. For example, when this block of text is processed, there will be no data in the field in the Screen table corresponding to the PICTURE and HOTSPOTS tags.</P>
<H3>A Fully Tagged Screen</H3><p>Below is an example of a fully tagged screen in an input file. This particular block of text creates a record for a bitmap that is stored in the file CH04_01.bmp. In the front-end, this bitmap will be displayed in our image viewer.</P>
<P>..SCREEN:Outline view</P>
<P>..ID:CH04_01.bmp</P>
<P>..SCREENTYPE:image</P>
<P>..FILTERS:</P>
<P>..PICTURE:CH04_01.bmp</P>
<P>..HOTSPOTS:</P>
<P>..TEXT:</P>
<p>This figure shows a presentation outline in Outline view.</P>
<p>Because this block of text starts with a SCREEN tag, not an ITEM tag, the compiler knows to create only a Screen record. This block has all of the same tags as the fully tagged item in the previous section. It lacks those tags that apply only to an item (PARENT, TOCPOSITION, and SKIMTEXT).</P>
<H3> </A>A Minimally Tagged Screen</H3><p>Below is an example of a minimally tagged screen in the input file 70_12.DOC. This particular block of text creates a Screen record titled "How to Prepare."</P>
<p>..SCREEN:2;How to Prepare</P>
<p>Carefully review the Exam Topics section of this preparation guide. It provides a comprehensive list of the skills measured by the exam. The Training and Reference Options section contains information about educational resources that are available. You may want to customize your own preparation plan to complement your current skill level.</P>
<p>Recall that in a minimally tagged input file, much of the information needed to create a Screen table record is specified in a separate outline. The only information that is specified in the block of text is the title of the screen and its order under its parent (specified by the 2 that follows the SCREEN tag). The id is derived from the filename and the screen order. The id for this screen will be 70_12.DOC_2. The compiler assumes that the parent of this screen is a screen with the id 70_12.DOC (the filename without the final underscore). The rest of the information needed to create a Screen table record is supplied by the outline and is copied from the Screen table record that the outline creates.</P>
<H3>Automated Text Tagging</H3><p>Most tagging is done automatically using WordBasic. The appropriate set of tags is pasted in before each paragraph with a predetermined style (usually at each level 1, 2 or 3 heading style and at a number of other special styles).</P>
<p>In the following WordBasic code fragment, a default set of tags is pasted in at a heading 3 style paragraph. Then, the default tag values are replaced with values appropriate to the current item</P>
<P CLASS="spacing"><BR></P>
<pre><FONT FACE="Courier New" SIZE="3">currsty$ = LCase$(StyleName$(0))
Select Case currsty$
Case "heading 3"

    'Insert default tags
    EditAutoText .Name = "Header Item", .Context = 0, .InsertAs = 0, .Insert

    'Determine and fill in the correct title
    title$ = Get_Title$("")
    If title$ &lt;&gt; "" Then
        Fill_Tag "ITEM", title$, "heading 3"
    End If

    'Determine and fill in the correct id
    id$ = Get_Screen_Id$("")
    Fill_Tag "ID", id$, ""

    'Determine and fill in the correct parent and sortorder
    toc$ = Get_Sort$()
    Fill_Tag "TOCPOSITION", toc$, ""
    parent$ = Get_Parent()
    Fill_Tag "PARENT", Parent$, ""
    
    'Fill other tags with values appropriate for this heading level
    Fill_Tag "ITEMTYPE", "folder", ""
    Fill_Tag "SCREENTYPE", "touch", ""
    Fill_Tag "PICTURE", "bkgtouch.bmp", ""
Case ...</font></pre>
<p>Almost all of the information necessary to fill in the tags can derived from the style names and the position of the tag relative to other tags in the file being processed. The content of the ITEM tag is set to the text in the first paragraph of the item. The ID is generated using a unique id procedure. The PARENT and TOCPOSITION tags are derived from the heading level of the item and its position in the file. The content of the SCREENTYPE, FILTERS, and PICTURE tags is derived from the content of the chunk itself. Only the SKIMTEXT tag is left unprocessed by the tagging routines.</P>
<p>At the end of the automatic tagging process the content is fully marked and can be compiled into the title database. However, the content may still need to be edited and exceptional items may need to be tagged manually.</P></BODY></HTML>

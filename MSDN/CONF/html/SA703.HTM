<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Run-time Settable Properties</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Run-time Settable Properties</H3><p>In version 1.x, the only form and control properties you could set from macros or Microsoft&nbsp;Access Basic code were the value of a control and whether it was visible. To change properties in an application, the developer had to resort to strange workarounds. In Microsoft&nbsp;Access 2.0, virtually all properties can be set at run time. This allows you to change colors, sizes, or behavior of your forms and controls in response to the user's actions.</P>
<p>For example, you can change the RowSource property of a combo box in response to some event so that the contents of the list will change. Examples of this and other techniques are shown in the application design techniques covered at the end of this session.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Server Steps</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Server Steps</H3><p>On your SQL Server–based server, you should:</P>
<P><ul><li>    Make sure that tables you want to edit from Microsoft&nbsp;Access are updatable.</P>
<P><li>    Set permissions on the database so that users are able to access the objects they need.</P>
<P><li>    Optionally, prevent unauthorized users from gaining access to server data by preventing the storing of passwords with attached tables.</P>
<P><li>    Protect your work by making your new database recoverable in case it is damaged or lost.</P></ul>
<H4> </A>Adding Unique Indexes for Updatability</H4><p>An attached table must have a unique index to be updatable in Microsoft&nbsp;Access. The Upsizing Wizard can export an existing unique index, but will not create one where none exists. Make sure that tables you want to edit from Microsoft&nbsp;Access are updatable.</P>
<p>You can use the SQL Server Browser to add unique indexes to tables.</P>
<H4> </A>Setting Permissions</H4><p>The Upsizing Wizard does not export users, groups, or permissions that you have set in your Microsoft&nbsp;Access database. The new SQL Server database and its objects receive a set of default permissions from the SQL Server. Set permissions on the database so that your users are able to access the objects they need.</P>
<H4> </A>Database Logon Permissions</H4><p>The default permissions of a new database make it accessible only to system administrators and the database owner.</P>
<p>You can add new users and groups using the SQL Server Security Manager or the system procedures <B>sp_adduser</B> and <B>sp_addgroup</B>. (For more information on adding users and groups, see the SQL Server Security Manager Help file and the documentation of the system procedures <B>sp_adduser</B> and <B>sp_addgroup</B> in the SQL Server Transact-SQL Reference.)</P>
<H4> </A>Object Permissions</H4><p>All objects created by the Upsizing Wizard, including tables, triggers, and defaults, are accessible initially only to the database owner and system administrators. This is true whether you upsized to a new or existing database. If you overwrite existing objects, you also overwrite all object permissions.</P>
<p>To grant permissions on tables, use the SQL Object Manager or the GRANT and REVOKE commands. (For more information on setting object permissions, see the section "Managing Object Permissions" in Part 3 of the SQL Object Manager User's Guide, or the GRANT and REVOKE commands in the SQL Server Transact-SQL Reference.)</P>
<H4>Synchronizing Local and Remote Permissions</H4><p>Although Microsoft&nbsp;Access isn't aware of SQL Server security, it can't violate it. For example, if you're editing a remote table for which you don't have INSERT permission, Microsoft&nbsp;Access lets you type a new record; however, when you try to save it, the server returns an error message, and prevents you from inserting the record. </P>
<p>You can minimize these discrepancies by synchronizing local and remote user permissions and passwords. Then you need log on only once, as Microsoft&nbsp;Access automatically attempts to log in to the server using your local user permission and password and prompts you only if this login fails.</P>
<H4> </A>Saving Passwords Locally</H4><p>When a remote table is attached in Microsoft&nbsp;Access, the user can save his or her server password locally with the table, and will no longer need to log on when opening the table. This also makes it possible for unauthorized users to gain access to server data. You can prevent this by creating a table named MSysConf.</P>
<p>When a user logs on to a SQL Server database, Microsoft&nbsp;Access looks for the MSysConf table. If it exists, its values control whether users can save their passwords with attached tables, and also control the rate of background population of records. If no MSysConf table exists, default values are used, and users are allowed to store passwords locally.</P>
<P>To prevent users from storing passwords locally</P>
<P>1.    Create the MSysConf table.</P>
<P>2.    Add a new record.</P>
<P>3.    Set the Config column value to 101.</P>
<P>4.    Set the value to zero.</P>
<p>These settings disable the "Save login ID and password locally" check box when you attach a server table. To enable the check box, set the value to 1.</P>
<p>Changes made to the MSysConf table will not take effect until the connection is re-established.</P>
<p>The options set in an MSysConf table apply to all Microsoft&nbsp;Access 2.0 applications attached to the table's database.</P>
<H4> </A>Ensuring Recoverability</H4><p>Protect your work by making your new database recoverable in case it is damaged or lost.</P>
<H4> </A>Dumping the Master Database</H4><p>When a database is created on a SQL Server–based server, new records are added to the system tables in the Master database. Dumping the Master database provides you with a backup copy including all the latest changes.</P>
<H4> </A>Scheduling Backups</H4><p>Schedule regular backups of your database so that you can restore your database from this backup copy in the event of a serious problem.</P>
<H4> </A>Device Mirroring</H4><p>Mirroring a device continuously duplicates the information from one SQL Server device to another. In the event that one device fails, the other contains an up-to-date copy of all transactions.</P>
<p>If you anticipate that many changes will be made to a database between backups and you can't afford to lose those changes, consider device mirroring. Device mirroring is most effective when the devices are located on separate disks, as both devices may be lost if they are on the same disk and the disk fails.</P></BODY></HTML>

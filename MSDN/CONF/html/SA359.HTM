<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>An Applications Development Framework</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>An Applications Development Framework</H2><p>With a solid infrastructure in place, you have at least a fighting chance of delivering a successful project. Upon that foundation you'll need a framework to guide your actual project work: what members make up your project team and what are their respective roles, how the different "stages" of the project are defined and how can you complete them, and how your application is both logically and physically described/architected. In this section we'll describe such a framework, using as a base the application development components of the Microsoft Solutions Framework. But before you get bleary-eyed at the prospect of yet another dry theoretical discussion, remember our focus is to show how to do large-scale<I> Visual Basic</I> project work &mdash; so we'll be adapting this approach to describe how it's worked for our firm in the very specific world of developing large Visual Basic client-server applications.</P>
<p>To begin, let's define some terms.</P>
<p>Microsoft defines the Microsoft Solutions Framework<B> </B>(MSF)<B> </B>as "a suite of concepts and reference models that help organizations build and deploy enterprise systems<B>." </B>The application development components of MSF are well-suited for today's rapidly evolving, GUI-based client server world. Specifically, they consist of:</P>
<UL><LI>    A peer-based <I>team model</I> of six well-defined project roles.</LI><LI>    A solutions development life cycle <I>process model</I> that is iterative enough to take advantage of available prototyping tools, while still being delivery-focused and including well-defined, visible milestones.</LI><LI>    A services-based <I>application model</I> in which an application is viewed as a network of services and the features these services provide are made available for re-use across functional boundaries.</LI></UL><p>We will describe these in turn.</P></BODY></HTML>

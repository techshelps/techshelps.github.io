<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Components and the Enterprise</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H2>Components and the Enterprise</H2>
<h3>As distributed applications built from simple components and Internet protocols emerge, a new set of "Enterprise" platform services for component applications will be required.</H3><p>A key goal of any component software architecture is to separate business logic, for example, how a tax component calculates tax rates, from execution logic, for example, whether the tax component runs in a browser or on a multiprocessor server. DCOM extends this separation even further, because the same components can communicate with each other across processes in a single machine or across the Internet via HTTP. </P>
<p>However, components by themselves do not solve all of the issues of enterprise application complexity.  </P>
<p><I>For example, a business wants to rapidly build and deploy a customer order entry application that involves five different areas of functionality&mdash;tax calc</I><I>u</I><I>lation, customer credit verification, inventory management, warranty update, and order entry. The application is built from five separate components and operates on a Web server with access via a browser. How does the deve</I><I>l</I><I>oper handle exceptions? System failures? Network outages? Peaks in performance load?</I></P>
<p>It defeats the two main goals of component-based development, fast time-to-market and lower development costs, if companies are forced to "hand-code" into their component applications the mission critical services that are required for online production systems.</P>
<p>To address the enterprise requirements for a distributed component architecture, without sacrificing rapid development and cost effectiveness, Microsoft is integrating DCOM into the<I> ActiveX Server</I>, a series of technology services that speed deployment of component-based applications across the Internet and corporate intranets. Some of the ActiveX Server Framework services include:</P>
<UL><LI><B>Transactions&mdash;</B>Traditional rollback and recovery for component-based applications in the event of system failure </LI><LI><B>Queuing&mdash;</B>The integration of component communication with reliable store-and-forward queues, which enables component applications to operate on networks that are occasionally unavailable</LI><LI><B>Server scripting&mdash;</B>The easy integration of component applications on the server with HTML-based Internet applications</LI><LI><B>Legacy access&mdash;</B>The integration of component applications with legacy production systems, including mainframe systems running CICS and IMS</LI></UL><p>The <I>ActiveX Server </I>technologies will be built using publicly available Internet protocols and will begin to appear in 1996.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing an Integrated Office Solution</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H1>Developing an Integrated Office Solution</H1><P><OBJECT id=sample1 type="application/x-oleobject"
classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Conferences Samples">
<PARAM name="Item2" value="4200">
</OBJECT><a href="javascript:sample1.Click()">
Click to open or copy the project files.</A></P><P CLASS="byl">Presented by:    Christine Solomon</P>
<p><I>Christine Solomon, who has been developing applications using Microsoft Office products since 1989 when she developed her first Microsoft Excel application, is a Director of Micro Modeling Associates, Inc., a Windows consulting firm that serves Fortune 500 and financial institutions. She is also author of the book from which this information is excerpted, Developing Applications with Microsoft Office (published by Microsoft&nbsp;Press). </I></P>
<p>&copy; 1995 Christine Solomon</P>
<p>Phone: (212) 233-9890<BR>Fax: (212) 233-9897</P>
<p>Internet: csolomon@panix.com<BR>CompuServe: 74720,3446</P>
<H2>Introduction</H2><p>OLE lets users create compound documents and developers create "compound<I> </I>applications." Just as compound documents include materials created in a variety of applications&mdash;charts from Microsoft&reg; Excel, illustrations from CorelDRAW!, and sound from Sound Recorder&mdash;compound applications include both custom objects and objects from shrink-wrapped products. For example, an Access-based application might use Microsoft Excel's worksheet object as a financial calculation engine, or a Microsoft Excel-based application might use Word's WordBasic object to create a text processor. The ability to create compound applications&mdash;sometimes called inter-application programmability&mdash;provides developers with a new set of tools that leverages a company's investment in shrink-wrapped products. </P>
<p>That's the good news. The bad news is that the observation attributed to Gandhi regarding Western civilization&mdash;that it would be a good idea&mdash;also applies to OLE. Although you can certainly deliver OLE automation applications that incorporate two shrink-wrapped products, such applications often generate "out of memory" messages if users have other products open while running the custom application. Also, OLE automation applications that use shrink-wrapped products tend to perform slowly even on 486 PCs. On the other hand, OLE automation enables you to build applications that use custom business objects (built in C/C++ or Microsoft Visual Basic&reg; version 4) in which the speed is such that performance is a nonissue.</P>
<p>There's also more good news. The latest release of the Microsoft Windows&nbsp;NT&trade; operating system and the next release of Microsoft Windows&reg; (called Microsoft Windows&nbsp;95) should, by and large, alleviate the problems that occur when using OLE automation with shrink-wrapped products. </P>
<p>Dynamic Data Exchange (DDE) is still the most widely-supported method of exchanging information among applications, because all applications that support OLE automation (and many that don't yet support it) support DDE. Chapter 12 of my book <I>Developing Applications with Microsoft Office</I> (published by Microsoft&nbsp;Press&reg;) explains how to build integrated applications using DDE. (The text included here is excerpted from Chapter 11 of my book, <I>Integrating Office Applications with OLE</I>.) </P>
<p>I start by explaining what objects are, what OLE is, and how to program compound applications using OLE automation. I then present two applications that use OLE automation. I use these applications to address some of the programming techniques and practices that can help you develop professional business applications that integrate functionality from more than one shrink-wrapped product. These applications, which are included as sample files, are:</P>
<P><ul><li>    PIVOT&mdash;an Access application that creates a pivot table in Microsoft Excel </P>
<P><li>    BulkMail&mdash;a Microsoft Excel application that simplifies the process of managing a Microsoft Excel mailing list, and lets you do a mail merge with Word</P></ul>
<p><B>Note  </B> I discuss OLE automation as it relates to four products: Access, Microsoft Excel, Word, and Visual Basic. Other products support OLE automation, but I don't address them here.</P></BODY></HTML>

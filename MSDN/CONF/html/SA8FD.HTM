<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>I/O Buffer Size</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>I/O Buffer Size</H3><p>Every time an application asks to send or receive data, the system must undergo a certain amount of overhead to check the parameters and buffers specified to the call. These checks cost cycles, so it is best to do as few I/O calls as possible to send the necessary amount of data.</P>
<p>The easiest way to minimize the number of I/O calls is to give each call a big chunk of data. For example, if you need to send 128KB of data, don't do 128 calls to <B>send()</B> with 1K in each call. Instead, do just a couple of calls with 32K or 64K of data. This way you get the data transferred with fewer I/O calls.</P>
<p>However, it is best not to specify too much data to any one I/O call because the data must be locked down in physical memory in order to be used. High performance applications and services use buffer sizes in the range of 8K to 64K to balance between the physical memory cost of the locked-down buffer and the CPU overhead of each I/O call. The best way to determine a specific number for your application is experimentation.</P>
<p>Another problem with small I/O is the effect of Nagling. Nagling, which occurs only with TCP/IP, is an attempt by the transport protocol to coalesce small buffers into larger buffers so that there are not a lot of tiny packets on the physical network. While Nagling helps to reduce small packets on the network, it does it by delaying sends until there is more data available to send. With small buffers passed to <B>send()</B> these delays can <I>significantly</I> impact performance, slowing down the application by as much as 10,000%.</P></BODY></HTML>

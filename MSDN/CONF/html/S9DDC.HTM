<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example Configurations</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h3>Example Configurations</H3><P>Most corporate domains designs fall into one of the following models, the Single domain model, the Master domain model, the Multiple Master domain model or the Complete Trust domain model. For more information on each of these models refer to the Windows&nbsp;NT Adminstration guide.</P>
<P>In this section we are going to discuss two of these models, the Complete Trust model and the Multiple Master model. We will look at the models before DNS and the models after DNS. Hopefully, this will give you an understanding of how to implement DNS within your own environment.</P>
<H4> </A>Complete Trust Examples</H4><H5 CLASS="h4"> </A>Before DNS</H5><P>Let's start with the following domain design (without DNS) and determine the best approach to a DNS design architecture. The following is an example of a Complete Trust domain model. There are 2 domains "Reno" and "Dallas." Let's assume the following:</P>
<UL><LI>There is a data-center in Dallas and Reno with a high speed link between both data-centers</LI><LI>Each data-center has a large number of remote sites (500 each with 20 users each) that it supports via 38K links direct connected to the appropriate data-center (in our diagram we only show two).</LI><LI>Each data-center has the primary domain controller (PDC) and WINS server that supports the remote locations.</LI><LI>Each remote site has one or more Windows&nbsp;NT backup domain controllers (BDCs) that get their security account management (SAM) database from their respective PDC in the data-center. This means that user account replication is going to occur over the slow (38K) link, hence there are few user accounts in the database and the password expiration is turned off. A Complete Trust model was used in this design because there is only one server per remote location and there were 20 users per location. If a master or multiple master domain design was in place there would be a requirement for two servers. If one domain was used then the user account database would have been too large. A domain in each location was not considered because the entire corporate network for this company consists of 1000 remote sites. </LI><LI>The remote BDCs contain a #PRE (preloads permanent entries into the NetBIOS cache&mdash;to view the cache type "nbtstat -c") entry for all Primary Domain Controllers in their LMHOSTS file (ex. 128.247.145.200 DALLAS_PDC #PRE #DOM:DALLAS). This is important because each remote BDC needs a secure session setup between its respective PDC and a PDC or BDC in all trusted domains. Because of the slow link to each of the remote locations and the fast link between data-centers it makes more sense to have the secure session setup between the local BDCs and the PDC of the other trusted domains.</LI><LI>Each remote site has a number of Mnode (broadcast first and then check the WINS server) TCP/IP client workstations (in our diagram we only show two) on the same LAN as the local Hnode (check the WINS server for name resolution before broadcasting) Windows&nbsp;NT-based server(s).</LI></UL><P><img src="39102.gif"></P>
<P>When designing a solution it is important to consider the traffic flow of "session setup" and "logon validation." You never want to design a solution that would keep a client from contacting its local server if the link between the remote location and its data-center was lost.</P>
<P></P>
<P><img src="39103.gif"></P>
<P>In our example logon validation will occur locally between the clients and the local servers. Session setup and name resolution to the "local" servers will also occur locally because the clients are set up as Mnode TCPIP clients. Session setup and name resolution between a client in one location and a server in another remote location will take a much different path and include both the WINS server in the data-center and the clients domain PDC. In our example (note that in our example some of the devices were removed to make the diagram easier to view), the Windows&nbsp;NT Workstation-based machine in the Dallas domain location 200 is connecting to the server \\BDC100 in the Reno domain location 100. The client first contacts the WINS server in its data-center to get the IP address of the \\BDC100 server (1 and 2). It then tries to establish a session to the \\BDC100 server (3). The \\BDC100 server in turn uses its secure session to the clients PDC for "pass through authentication" purposes (4 and 5). If the security is verified, the client is allowed to establish the session and proceed (6). In this example, there are three physical points of failure, the link between Location 200 and the Dallas data-center, the link between the Dallas data-center and the Reno data-center, and the link between Location 100 and the Reno data-center.</P>
<H4> </A>After DNS</H4><P>Now that you understand the current architecture, how would you design a Windows&nbsp;NT 4.0 DNS implementation? </P>
<P>Here is a possible solution. There are four zones, four domains (<B>com, acme.com, reno.acme.com and dallas.acme.com</B>) and a DNS server in <B>each</B> remote location in the following design.</P>
<P><img src="39104.gif"></P>
<P>The following are facts about the design:</P>
<UL><LI>The DNS servers that contain the <B>reno.acme.com</B> and <B>da</B><B>l</B><B>las.acme.com</B> zone files are located in their respective data-centers and the DNS server that contains the <B>acme.com</B> zone file is located in one or the other data-center depending on which data-center has the most client-side remote location session setup traffic. Each DNS zone should also have a WINS record that points to its respective WINS server. There is also a DNS cache only server in each of the remote locations for the same zone.</LI><LI>Since there was a server located in the remote location, a DNS server was put there as well. Since the link is so slow it makes more sense to make this a cache only server. If there were no servers in the remote location then a DNS probably would not really be necessary, however each case is different and fast name to IP address resolution is a business decision that has to deal with the cost of adding another server versus the cost of slow name resolution.</LI><LI>In our case <B>reno.acme.com </B>and <B>dallas.acme.com</B> are going to be domains on the root server in the data-centers. One of the root servers, probably the one in Dallas, will also house domains <B>com </B>and <B>acme</B>. Each of the caching servers in the remote locations will have these servers listed in their cache file.</LI><LI>DNS WINS lookup should be configured on the DNS servers in each data-center.</LI><LI>We may want to consider a secondary to each primary located in the data-center for fault tolerance purposes.</LI><LI>Since there are no secondary servers in the remote sites there will be no reason to add these to the notify list. However, the secondary servers in the data-centers should be in the notify list.</LI></UL><P>With this design in place a client from a remote location can now establish a session via HOST name rather than NetBIOS name. For example, instead of typing </P>
<P><B>Net use * \\BDC100\public</B></P>
<P>they can type</P>
<P><B>Net use * \\BDC100.reno.acme.com\public</B></P>
<P>Let's follow the path of traffic if the client chooses to connect via the HOST name mechanism, </P>
<P><img src="39105.gif"></P>
<P>The client contacts its local DNS server with a <I>recursive</I> query (1). The <B>dallas.acme.com </B>cache-only DNS server checks its local memory cache, if the IP address for <B>BDC100.reno.acme.com</B> is not cached, the <B>dallas.acme.com</B> DNS server sends an <I>iterative</I> query to the ROOT server, then to "COM," then to "DOMAIN.COM" (that is <B>Acme.com</B>) (2). The <B>acme.com</B> server will respond back (3) and tell <B>dallas.acme.com</B> to contact <B>reno.acme.com </B>(4). When <B>dallas.acme.com</B> contacts<B> reno.acme.com</B>, the DNS server <B>reno.acme.com</B> will check the WINS server (5) defined in its WINS record (6) and the <B>reno.acme.com </B>responds with the IP address (7) and the directed name query and session setup can continue (8,9,10,11 and 12). If the IP addresses were not cached, it would take eight frames for IP address to name resolution (compared to two frames in the WINS design).</P>
<P></P>

<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="32pt" VALIGN="TOP"><COL WIDTH="309pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
<img src="39106.gif"></P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><I>If the </I><B><I>dallas.acme.com</I></B><I> DNS server was configured with a "Forwarder" the request to </I><B><I>acme.com</I></B><I> would have still been i</I><I>t</I><I>erative. However, if the </I><B><I>dallas.acme.com</I></B><I> DNS server was configured as a "Slave" server the request to </I><B><I>acme.com</I></B><I> would have been recursive.</I></P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>Once Dynamic DNS and Enhanced Directory Services become a reality, the WINS servers in this enterprise can be removed and NetBIOS can be turned off. From this point on DNS will be used as the index into the directory to find machine objects such as computers and domain controllers.</P>
<H4> </A>Multiple Master Example</H4><P>In the following section we are going to go through a very simple "well architected" Windows&nbsp;NT 4.0 Multiple Master domain model and show how to implement DNS within that environment for a safe migration to future versions of Windows&nbsp;NT.</P>
<H5 CLASS="h4"> </A>Before DNS</H5><P>Here is the typical Multiple Master layout with two master domains and six resource domains:</P>
<P><img src="39107.gif"></P>
<P>Let's use the "Reno" and "Dallas" domain structure and assume the following:</P>
<UL><LI>There is a data-center in Dallas and Reno with a high-speed link between both data-centers (something like a T1).</LI><LI>Each data-center has a number of remote sites that it supports via 512KB links (in our diagram we only show two, one for location 100 and another for location 200)</LI><LI>Each data-center has the primary domain controller (PDC) for the data-centers Master domain, a WINS server and a backup domain controller (BDC) for the other Master domain.</LI><LI>Each remote site has 1 Windows&nbsp;NT backup domain controller (BDC) for each Master domain (account domain) and a PDC (and an undetermined number of BDCs) for the resource domain (no user accounts defined). </LI><LI>There is a WINS server, that is a push-pull partner to the WINS server in the respective data-center, in each remote location. The WINS servers in the data-centers are push-pull partners with each other as well.</LI><LI>All clients and servers are Hnode because of the local WINS server.</LI><LI>All Windows&nbsp;NT-based workstations in the Resource domains have their machine accounts in their respective resource domains, however the users log on to the Master domains.</LI><LI>A router separates all clients from the servers in the remote locations.</LI></UL><P>The following figure shows the current layout:</P>
<P><img src="39108.gif"></P>
<P>Let's look at the traffic flow for logon validation and session setup name resolution. In most Multiple Master domain scenarios, the client Windows&nbsp;NT-based machine accounts exist in the resource domain and the user logs onto the Master domain. All logon validation will be done locally within the site. A Windows&nbsp;NT Workstation-based client upon bootup queries the local WINS server for a list of BDCs (via name query for DOMAIN &lt;1C&gt;). The WINS server will respond with a list of up to 25 BDCs (the list contains the PDC and all of the BDCs for the master domain that registered with it, as well as others that were replicated to it). The client then sends a request to each server on the list and uses the first server to respond (which normally will be the local master domain BDC) as its server that it sets up a secure channel with and uses to do logon validation.</P>
<P>Remote session setup from a client running Windows&nbsp;NT client in a resource domain to a server in another resource domain occurs as follows as is shown in the next diagram.</P>
<P><img src="39109.gif"></P>
<P>The client running Windows&nbsp;NT Workstation will query the WINS server for the address for the server in the domain it wants to contact (1). The WINS server will reply with the address (2) because it was replicated to it previously. The Windows&nbsp;NT-based workstation will then contact the server directly (3). That server will see that the session setup request is from a user in a trusted master domain and use its secure channel to a trusted domain BDC or PDC to verify the credentials (5) and then the server will either allow the client to connect or reject the request (6).</P>
<H5 CLASS="h4"> </A>After DNS</H5><P>Now that you understand the current architecture, how would you design a Windows&nbsp;NT 4.0 DNS implementation? The first thing we have to determine is how to structure the DNS domains. We know that for future migration purposes DNS domains should equal Windows&nbsp;NT 4.0 domains. The first and most important question is now answered&mdash;that is, how many domains do I need? The answer is, one for each Windows&nbsp;NT domain&mdash;ten.</P>
<P>The second question is, how should the domain names map? For example, should we have <B>L100.reno.acme.com</B> or <B>L100.acme.com</B>? In any design it's important to keep it simple! That means in our case, keep the name as short as possible. There is another part to this second question and that is, what DNS domain should the clients and servers be part of? In the Multiple Master scenario, the logical solution is to put all workstations within a DNS domain called <B>L100.Acme.Com</B> and <B>L200.Acme.Com</B> and so on, then put all servers within a domain called <B>Reno.Acme.Com</B> and <B>Dallas.Acme.Com </B>(this may require changes to each clients TCPIP configuration)<B>. </B>This will allow for easy migration to both Dynamic DNS and Enhanced Directory Services. </P>
<P>The third question is, how many servers will we need to support this? There will be 10 DNS domains (the eight expected + <B>acme.com</B> and <B>com</B>) and eight DNS servers, just like there are eight Windows&nbsp;NT domains and domain controllers (PDCs and BDCs). This will require that the DNS server service be running in each of the locations. The service can run on the existing PDC or BDC within the remote location assuming there is adequate capacity. The DNS servers in the locations that house the resource domains will be primaries for their Windows&nbsp;NT resource domain names such as <B>L100. Acme.Com</B> and secondaries to their respective Windows&nbsp;NT Master domains such as <B>Reno.Acme.Com</B>.</P>
<P>With all of this said, the DNS domain hierarchy might look something like the following:</P>
<P><img src="39110.gif"></P>
<P>With this design in place, a client from a remote location can now establish a session via HOST name rather than NetBIOS name. For example, instead of typing </P>
<P><B>Net use * \\WKS100\public</B></P>
<P>they can type</P>
<P><B>Net use * \\WKS100.L100.acme.com\public</B></P>
<P>If the client chooses to connect via the HOST name mechanism, let's follow the path of traffic and compare it to the path via WINS (note that in our example some of the devices were removed to make the diagram easier to view).</P>
<P><img src="39111.gif"></P>
<P>The client contacts its local DNS server with a <I>recursive</I> query (1) for the "<B>NT workstation.domain.</B>" The local DNS server checks its local memory cache, and if the IP address for <B>WKS100.L100.acme.com</B> is not cached, the local DNS server sends an <B><I>iterative</I></B> query to the ROOT server, then to "COM," then to "DOMAIN.COM" (that is <B>acme.com</B>) (2). The <B>acme.com</B> server will respond (3) back and tell the local DNS server to contact <B>L100.acme.com </B>(4). <B>L100.acme.com </B>will check the WINS server (5 and 6) (the DNS server asks itself, "I should have the IP address for host <B>WKS100.L100.acme.com</B> because I am authoritative for domain <B>L100.acme.com</B>, but I don't, so check WINS") defined in its WINS record and responds with the IP address (8) and the directed name query and session setup can continue (9,10,11,12). If the IP addresses were not cached, it would take eight frames for IP address to name resolution (compared to two frames in the WINS design).</P>
<UL><LI></LI></UL>
<TABLE COLS="2" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="32pt" VALIGN="TOP"><COL WIDTH="311pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
<img src="39112.gif"></P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><I>Both zones on the DNS server within the remote location should point to the same local WINS server.</I></P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="32pt" VALIGN="TOP"><COL WIDTH="311pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
<img src="39113.gif"></P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><I>The local DNS server authoritative for</I><B><I> reno.acme.com</I></B><I> did not contact its local WINS server because the DNS name being asked for was not a direct child of its DNS domain </I><B><I>reno.acme.com. </I></B><I>It was only a direct child of a DNS server that was authoritative for </I><B><I>L100.acme.com</I></B><I>.</I></P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P>A client from a remote location can also establish a session with a remote server via the HOST name rather than NetBIOS name. For example, instead of typing </P>
<P><B>Net use * \\PDC100\public</B></P>
<P>they can type</P>
<P><B>Net use * \\PDC100.reno.acme.com\public</B></P>
<P>If the client chooses to connect via the HOST name mechanism, let's follow the path of traffic and compare it to the path via WINS (note that in our example some of the devices were removed to make the diagram easier to view).</P>
<P><img src="39114.gif"></P>
<P>The client contacts its local DNS server with a <I>recursive</I> query (1) for the "<B>NT</B> <B>workstation.domain."</B> The local DNS server checks its local memory cache, and if the IP address for <B>PDC100.reno.acme.com</B> is not cached, the local DNS server sends an <I>iterative</I> query to the ROOT server, then to "COM," then to "DOMAIN.COM" (that is <B>acme.com</B>) (2). The <B>acme.com</B> server will respond (3) back and tell the local DNS server to contact <B>reno.acme.com </B>(4). When the local DNS server contacts <B>reno.acme.com</B>, the DNS <B>reno.acme.com</B> will check the WINS server (5 and 6) (the DNS server asks itself, "I should have the IP address for host <B>PDC100.reno.acme.com</B> because I am authoritative for domain <B>Reno.acme.com</B>, but I don't, so check WINS") defined in its WINS record and respond with the IP address (7). The local DNS then returns that address to the client (8) and the directed name query and session setup can continue (9,10,11,12). If the IP addresses were not cached it would take eight frames for IP address to name resolution (compared to two frames in the WINS design).</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="32pt" VALIGN="TOP"><COL WIDTH="311pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
<FONT FACE="Verdana, Arial" SIZE=2><P>
<img src="39115.gif"></P></TD>

<TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><I>The local DNS server did not contact its local WINS server b</I><I>e</I><I>cause the DNS name being asked for was not a direct child of a DNS domain </I><B><I>L200.acme.com</I></B><I> or </I><B><I>dallas.acme.com</I></B><I> it was only a direct child of a DNS server that was authoritative for </I><B><I>reno.acme.com</I></B><I>.</I></P></TD>

</TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P>Once Dynamic DNS and Enhanced Directory Services become a reality the WINS servers in this enterprise can be removed and NetBIOS can be turned off. From this point on, DNS will be used as the index into the directory to find machine objects such as computers and domain controllers.</P>
<P>It may seem like there are more points of failure for name resolution (eight frames via DNS versus. two frames via WINS), however with this architecture there will be less Dynamic DNS replication than there is WINS replication today and the flat 16 character NetBIOS name space will be history!</P></BODY></HTML>

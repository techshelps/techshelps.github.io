<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Security Configuration Editor</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="microsoftsecurityconfigurationeditor"></a>Microsoft Security Configuration Editor</h1>
<p>
Windows NT® Server</p>
<p>
Server Operating System</p>
<p>
White Paper</p>
<h2><a name="abstract"></a>Abstract</h2>
<p>
This White Paper describes Microsoft® Security Configuration Editor, a Microsoft Management Console (MMC) snap-in tool designed to reduce costs associated with security configuration and analysis of Windows NT®-based operating system networks. The Security Configuration Editor allows you to configure security for a Windows NT system, and then perform periodic analysis of the system to ensure that the configuration remains intact or to make necessary changes over time.</p>
<p>
© 1997 Microsoft Corporation. All rights reserved.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
<p>
This White Paper is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</p>
<p>
The BackOffice logo, Microsoft, Win32, Windows, and Windows NT are registered trademarks of Microsoft Corporation.</p>
<p>
Other product or company names mentioned herein may be the trademarks of their respective owners.</p>
<p>
Microsoft Corporation · One Microsoft Way · Redmond, WA 98052-6399 · USA</p>
<p>
0997</p>
<h2><a name="introduction"></a>Introduction</h2>
<p>
This White Paper describes Microsoft® Security Configuration Editor, a Microsoft Management Console (MMC) tool designed to reduce costs associated with security configuration and analysis of the Windows NT® operating systems. </p>
<p>
The Microsoft Management Console is a Windows®-based, multiple-document interface (MDI) application that makes extensive use of Internet technologies. MMC is a core part of Microsoft's management strategy and is designed to provide a single host for all management tools, facilitate task delegation, and lower total cost of ownership for enterprise users of Windows and Windows NT. MMC itself does not supply any management behavior, but instead provides a common environment for <i>snap-ins</i>, which define the actual management behavior. Snap-ins are administrative components integrated into a common host&mdash;the MMC interface. </p>
<p>
Security Configuration Editor is a snap-in component for MMC that is designed to provide a central repository for security-related administrative tasks. With Security Configuration Editor, you will be able to use a common tool to configure and analyze security on one or more Windows NT-based machines in your network.</p>
<h3><a name="whysecurityconfigurationeditorisnecessary"></a>Why Security Configuration Editor is Necessary</h3>
<p>
The current version of the Windows NT network operating system has excellent security features built in. A single sign-on to the Windows NT domain allows user access to resources anywhere in the corporate network. The system provides tools for security policy and account management, and the Windows NT Domain model is flexible and can support a wide range of network configurations. Window NT 5.0 extends these features to provide support for Internet-aware enterprise networks and the new distributed services included in the operating system.</p>
<p>
From the administrator&rsquo;s point of view, Windows NT provides a number of graphical tools that can be used individually to configure various aspects of system security. However, these tools are not centralized&mdash;an administrator may need to open three or four applications to configure security for one computer. Using these applications is therefore considered costly and cumbersome by many security-conscious customers. In addition, security configuration can be complex&mdash;and with the distributed security features added in Windows NT 5.0, this complexity has increased.</p>
<p>
While Windows NT 4.0 does provide adequate (if somewhat inconvenient) configuration tools, it lacks powerful tools for security analysis. The only tool provided that can be used to monitor security is Event Viewer, and it was not designed for performing corporate-level audit analysis. There are third-party tools for such analysis; however, those tools either lack enterprise-level features or are not comprehensive. </p>
<p>
Security Configuration Editor, which is intended to answer the need for a central security configuration tool, will provide the framework for enterprise-level analysis functionality. Most importantly, it will reduce security-related administration costs by defining a single point where the entire system&rsquo;s security can be viewed, analyzed, and adjusted as necessary. The goal is to provide a <i>comprehensive, flexible, extensible, and simple</i> tool for configuring and analyzing system security.</p>
<h3><a name="securityconfigurationeditordesigngoals"></a>Security Configuration Editor Design Goals</h3>
<p>
The primary goal of Security Configuration Editor is to provide a single point of administration for Windows NT system security. To meet that goal, the tool must allow the administrator to:
<ul>
<li>
Configure security on one or more Windows NT-based machines.<br><br></li>
<li>
Perform security analysis on one or more Windows NT-based machines.<br><br></li>
<li>
Complete these tasks from a single administrative window.<p>
The process of configuring security in a Windows NT-based network can be complex and detailed in terms of the system components involved and the level of change that may be required. Therefore, Security Configuration Editor is designed to allow you to perform<i> configuration at a macro level</i>. In other words, the editor allows you to define a number of configuration settings and have them enacted in the background. With this tool, configuration tasks can be grouped and automated; they no longer require numerous, iterative key presses and repeat visits to a number of different applications to configure a group of machines.
<p>
Note that Security Configuration Editor is not designed to replace system tools that address different aspects of system security&mdash;such as User Manager, Server Manager, Access Control List (ACL) Editor, and so forth. Rather, its goal is to complement them by defining an engine that can interpret a standard configuration template and perform the required operations automatically in the background. Administrators can continue to use existing tools to change individual security settings whenever necessary.
<p>
To address the security analysis gap in Windows NT security administration, Security Configuration Editor will provide analysis at a micro level. The Editor is designed to provide information about all system aspects related to security. Security administrators can view the information and perform security risk management for their entire information technology (IT) infrastructure. In future versions, they will be able to create reports and perform specialized queries.
</li>
</ul>
<h3><a name="securityconfigurationeditorfeatures"></a>Security Configuration Editor Features</h3>
<p>
Security Configuration Editor is designed to be comprehensive, flexible, extendible, and simple. </p>
<h4><a name="comprehensiveness"></a>Comprehensiveness</h4>
<p>
Unlike other operating system features, security is a characteristic of the system as a whole. Almost every component of the system is responsible for some aspect of system security. Therefore, questions such as &ldquo;Is my computer secure?&rdquo; or &ldquo;Is my network secure?&rdquo; are extremely difficult to answer. Typically, a system administrator must examine many different system components and use many tools in an attempt to answer these questions. Microsoft&rsquo;s goal is to have Security Configuration Editor be the resource for answering security-related questions, whether they are general (such as those listed above) or very specific. To provide comprehensive security administration and information, Security Configuration Editor allows you to configure and analyze all of the following:
<ul>
<li>
<b>System Security Policy</b> &ndash; You can use the tool to set access policy, including how and when users can log on to the system, password policy, overall system object security, audit settings, domain policy, and so forth.<br><br></li>
<li>
<b>User Accounts</b> &ndash; You can assign group memberships, privileges, user rights, and so forth.<br><br></li>
<li>
<b>System Services</b> &ndash; You can configure the different services installed on a system, including network transport services such as TCP/IP, NetBIOS, CIFS File Sharing, Printing, and so forth.<br><br></li>
<li>
<b>System Registry</b> &ndash; You can use the Editor to set the security values in the system registry.<br><br></li>
<li>
<b>System Store</b> &ndash; You can use the Editor to set the security for local system file volumes and directory trees.<b> </b><br><br></li>
<li>
<b>Directory Security</b> &ndash; You can use the Editor to manage the security on objects residing in the Windows NT 5.0 Active Directory.</li>
</ul>
<h4><a name="flexibility"></a>Flexibility</h4>
<p>
<i>S</i>ecurity Configuration Editor allows you to define <i>Security Configuration Templates</i> that include settings for security attributes in each of the areas outlined above. Using these templates, you can configure the system. Additionally, you can perform a security analysis on the system by using these templates as recommended configurations<i>.</i></p>
<p>
The templates are text-based .inf files. Configuration information is specified in different sections, and the information is parsed by the Editor&rsquo;s configuration engine. The architecture is sufficiently flexible to support new sections if you need to specify new areas of security configuration and analysis as the system evolves.</p>
<p>
Security Configuration Editor will include a set of predefined templates. You can choose to use these templates as shipped, or you can use them as starting points for building your own customized templates. The Editor&rsquo;s template-editing functionality provides this flexibility.</p>
<h4><a name="extendibility"></a>Extendibility</h4>
<p>
The Security Configuration Editor is architected to be extendible. You can add extensions as new areas of security configuration, or as new attributes within an existing area. Since the configuration information is stored in a standard .inf file format, it can be easily extended without affecting backward compatibility.</p>
<p>
Additionally, <i>system services</i> is a currently defined area that has been architected to be extendible within itself. It permits any service writer to implement a Security Editor Attachment that can configure security settings for a particular system service, as well as perform any analysis that may be required. Different Windows NT systems can be configured to run different sets of services. Also, Microsoft expects that independent software vendors (ISVs) who develop services will want to add their service&rsquo;s security configuration and analysis to this overall security framework. </p>
<p>
The tool initially supports security configuration and analysis for several native Windows NT services, including CIFS Server and Spooler.</p>
<h4><a name="simplicity"></a>Simplicity </h4>
<p>
Because Security Configuration Editor is designed to reduce costs associated with administering a network, it is vital that the tool be easy to learn and use. The Editor contains no complicated options&mdash;only a simple uniform graphical user interface (GUI) for defining configuration templates and viewing security analysis data. The interface uses the standardized context menus and views supported by Microsoft Management Console. There are no superfluous graphics or statistics, only a simple tabular view of the information with visual cues to flag security problems. In addition, the Editor contains a command-line utility to allow administrators to run configuration and analysis as part of a script. Administrators can use the graphical interface or the command line to apply a configuration template and perform analysis, enabling them to easily fit the tool into an existing administration model. And they can use the graphical interface to define templates and browse through analysis data.</p>
<p>
The next section of this document provides a more in-depth evaluation of the Security Configuration Editor, its architecture, and how it fits into Windows NT.</p>
<h2><a name="securityconfigurationeditoroverview"></a>Security Configuration Editor Overview</h2>
<p>
Windows NT Distributed Security Services has many new features to simplify domain administration, improve performance, and integrate Internet security technology based on public-key cryptography. Highlights of the Windows NT Distributed Security Services include:
<ul>
<li>
Integration with the Windows NT Server Directory Services (the Active Directory) to provide scalable, flexible account management for large domains, with fine-grain access control and delegation of administration.<br><br></li>
<li>
Kerberos Version 5 authentication protocol, a mature Internet security standard, is implemented as the default protocol for network authentication; it provides a foundation for authentication interoperability.<br><br></li>
<li>
Strong authentication using public-key certificates, secure channels based on Secure Sockets Layer version 3.0, and CryptoAPI version 2.0 deliver industry-standard protocols for data integrity and privacy across public networks. <p>
The security enhancements were specifically designed to meet the needs of distributed enterprise networks. While security services in Windows NT 5.0 are impressive, the need for a tool to easily configure and administer such capabilities is obvious. The Security Configuration Editor, a Microsoft Management Console snap-in, fills this need. (For a detailed description of the Microsoft Management Console, see the technical White Paper <i>Microsoft Management Console: Overview</i>, available from microsoft.com.)
</li>
</ul>
<h3><a name="securityconfigurationtemplates"></a>Security Configuration Templates </h3>
<p>
Security Configuration Editor allows you to define Security Configuration Templates with prescribed security settings for attributes in each security <i>area</i> (areas include system policy, user accounts, registry, and so forth). Then, using these templates, you can configure the system or perform security analysis using the templates as your recommended configurations. Security Configuration Templates are standard text-based .inf files. After you create and install your template, Security Configuration Editor&rsquo;s configuration engine parses the template and makes the corresponding changes to the system.</p>
<p>
The Security Configuration Editor snap-in tool provides a graphical user interface that allows you to edit security configuration templates to define customized configurations. It also allows you to generate a template from settings in an existing system. (See Figure 1.)</p>
<p>
<b>Figure 1. Security Configuration Templates Prototype UI</b></p>
<p>
As shipped,<i> </i>Security Configuration Editor will include standard and recommended configuration templates that will be effective in typical Windows NT configurations, including those installations that have Internet and intranet components. In addition, the snap-in&rsquo;s editing capabilities will allow you to use the standard templates or create new ones by customizing them for your particular environment.</p>
<h4><a name="securityconfigurationareas"></a>Security Configuration Areas</h4>
<p>
Security configuration for a system is subdivided into <i>security areas</i>, as stated previously. Microsoft has identified several security areas; however, new areas can be added in the future to support enhanced system functionality without breaking backward compatibility with existing templates. The security areas currently supported are:
<ul>
<li>
<b><i>Security Policies</i></b>&mdash;These are settings for various local and domain security policy attributes. Additionally, this area includes certain machine-level settings.<br><br></li>
<li>
<b><i>Restricted Groups Management</i></b>&mdash;These settings manage group memberships for selected groups that your system administrator identifies as sensitive.<br><br></li>
<li>
<b><i>Rights and Privilege Management</i></b>&mdash;These manage a list of users and groups who are granted a particular privilege or user right.<br><br></li>
<li>
<b><i>Object Trees</i></b>&mdash;There are three security areas in this category:<br><br></li>
<li>
Directory Objects&mdash;only in Windows NT 5.0 and future versions.<br><br></li>
<li>
Registry Keys<br><br></li>
<li>
Local File System<p>
For each object tree, Security Configuration Template allows you to configure and analyze settings for security descriptors, including object ownership, the Access Control List (ACL), and auditing information.
</li>
<li>
<b><i>System Services</i></b>&mdash;This area includes all local or network system services. This security area is architected so that independent software vendors (ISVs) can build Security Configuration Editor Attachments for configuration and analysis of specific system services. In addition, Microsoft will build Attachments for some services that are shipped with the system (for example, the spooler, CIFS file sharing, TCP/IP transport, and so forth). See Appendix A, &ldquo;Implementing Service Security Attachments,&rdquo; for implementation and installation instructions. </li>
</ul>
<h3><a name="securityconfigurationeditoruserinterface"></a>Security Configuration Editor User Interface</h3>
<p>
The Security Configuration Editor GUI is provided as a Microsoft Management Console (MMC) snap-in. The graphical interface supports the following administrative functions:
<ul>
<li>
<b><i>Defining Security Configuration Templates</i></b>&mdash;The tool includes a GUI-based editor that allows you to define and save a configuration template. Since templates are saved as text-based .inf files, you can use any text editor to read the sample templates provided with the tool and learn their format; however, Microsoft does not recommend using your text editor to alter a template. In doing so, you could inadvertently alter the format of the file so that it cannot be parsed by the Security Configuration Editor engine. Instead, use the Security Configuration Editor interface to create or change a template.<br><br></li>
<li>
<i><b>Configuring a system&rsquo;s security</b>&mdash;</i>To configure a Windows NT system&rsquo;s security, you can use either the context menu option within the snap-in tool to select a template and apply it to the system, or you can use the command-line utility to incorporate the template into an administrative script that can be run immediately or be scheduled to run when most convenient for you and your users.<br><br></li>
<li>
<i><b>Analyzing system&rsquo;s security</b>&mdash;</i>To analyze a system&rsquo;s security, you can use either the context menu option within the snap-in or you can use the command-line utility to incorporate the analysis data (in the form of a template) into an administrative script that can be run immediately or scheduled to run when most convenient for you and your users.<br><br></li>
<li>
<b><i>Viewing Security Analysis data</i></b>&mdash;The Security Configuration Editor includes a GUI-based viewer that allows you to see the security information in each defined security area. Template recommendations are presented alongside current settings, and color, fonts, and icons are used to highlight any problem areas. You can correct the problems directly from the viewer by changing recommended settings to reconfigure the system.<p>
<b>Note</b>: While the graphical user interface provides all of the functionality listed above, the command-line utility supports configuring the system and collecting analysis data only. It does not support the creation or editing of templates or the viewing of analysis data. 
</li>
</ul>
<h4><a name="graphicaluserinterface"></a>Graphical User Interface</h4>
<p>
Figure 2 is an example of the graphical user interface showing both the editor and analysis functionality (on the left side of the screen). Note that the System Services Settings analysis data is being viewed (see the right side of the screen).</p>
<p>
<b>Figure 2. Security Configuration Editor Snap-in Graphical User Interface</b></p>
<h4><a name="seceditcommand"></a>Secedit Command</h4>
<p>
Figure 3 shows the usage parameters available with the Security Configuration command-line utility, <b>secedit</b>. </p>
<p>
<b>Figure 3. Secedit Command-Line Utility</b></p>
<p>
The command syntax is:</p>
<p>
<b>secedit {/configure [/areas </b><i>areas<b> </b></i><b>] | /analyze} [/scppath </b><i>scppath<b> </b></i><b>] [/sadpath </b><i>sadpath<b> </b></i><b>] [/log </b><i>logpath</i><b>]</b></p>
<p>
where:</p>
<p>
/<b>configure</b>&mdash;configures the system.</p>
<p>
/<b>analyze</b>&mdash;analyzes the system.</p>
<p>
/<b>scppath</b> <i>scppath&mdash;</i>specifies the full path to the security configuration profile. </p>
<p>
/<b>sadpath</b> <i>sadpath&mdash;</i>specifies the path to where the analysis database will be created for future security analysis. This information is ignored if the system has been configured or analyzed previously.</p>
<p>
/<b>areas</b> <i>areas</i>&mdash;defines the security areas to be configured or analyzed. </p>
<p>
/<b>log</b> <i>logpath&mdash;</i>specifies the path to the file where process errors will be logged.</p>
<h2><a name="configuringsecurity"></a>Configuring Security</h2>
<p>
This section describes how to use the Security Configuration Editor to configure various security aspects of a Windows NT 5.0 system. Note that this tool relies entirely on the security features of Windows NT&mdash;it does not alter the security capabilities of the system. Its sole purpose is to allow you to more easily configure and manage the advanced security features included in the latest version of the operating system.</p>
<h3><a name="securitypolicies"></a>Security Policies</h3>
<p>
In Windows NT 5.0, security policy can be set at the domain and computer level. This allows very fine-grained security control but can be difficult to configure. Figure 4 shows the template view for the Security Policies area.</p>
<p>
<b>Figure 4. Configuring Security Policy Settings</b></p>
<p>
In Windows NT 5.0, a domain is a physical security boundary, and full administrative control is contained within a domain. A domain&rsquo;s security policy defines how strong the passwords have to be, the password history, the lifetime of Kerberos tickets, account lockouts, and more. And you can define all of these attributes from the template. 
<ul>
<li>
Local policy allows you to configure who has access to the computer locally as well as over the network. It allows you to set up audit policy and other machine-level attributes. </li>
</ul>
<h3><a name="restrictedgroupmanagement"></a>Restricted Group Management</h3>
<p>
Restricted Group Management allows you to manage the membership of built-in groups that have certain predefined capabilities. These groups include local groups such as Administrators, Power Users, Print Operators, Server Operators, and so forth, as well as global groups such as Domain Administrators. </p>
<p>
You can also add groups that you consider sensitive or privileged to the Restricted Group Management list, along with their membership information. This allows you to track and manage these groups as well.</p>
<p>
In addition to group membership, the area tracks and controls reverse membership of each restricted group in the<b> MemberOf</b> column. This column shows other groups to which the restricted group members can belong. You can use this field to control exactly which groups your restricted group members can join&mdash;You can also use this feature to limit a group of users to one group and prevent them from joining any others. (See Figure 5.) </p>
<p>
<b>Figure 5. Configuring Restricted Groups</b></p>
<p>
The configuration engine ensures that group memberships are set as specified in the template. Groups and users not specified in the template are removed from the restricted group. In addition, the reverse membership configuration option ensures that each restricted group is a member of only those groups specified in the <b>MemberOf</b> column.</p>
<h3><a name="rightsprivilegesmanagement"></a>Rights and Privileges Management</h3>
<p>
Rights and Privileges Management allows you to control who is granted rights and privileges on a given system. You can use this area to set rights and privileges for users and groups from the local machine as well as domain users and groups from any of the trusted domains (including the domain the machine is a member of). </p>
<p>
When you submit the template for processing, the Security Configuration engine grants the rights and privileges as specified. Any additional users and groups who formerly had privileges on the system are removed, and these users are logged in to the configuration log</p>
<p>
Figure 6 shows the Rights and Privileges Management area of the snap-in tool:</p>
<p>
<b>Figure 6. Configuring User Rights and Privileges </b></p>
<h3><a name="directorysecurity"></a>Directory Security</h3>
<p>
There are three object trees in which the Security Configuration Editor allows you to manage the object by placing a security descriptor on the object. Directory security is one of these areas. The configuration template allows you to specify a list of fully qualified directory object LDAP names and the security descriptor you would like applied to each of them. In this case, the configuration template contains the fully qualified distinguished name and security descriptor in a text format called the <i>Security Descriptor Definition Language</i> (SDDL).<i> </i>The configuration engine runs through the list and applies the names and security descriptor to the corresponding objects. </p>
<p>
In theory, you could specify each node in the tree and the security on that node, causing the template to be huge and unmanageable. This is not the best approach, however, as there is full support for inheritance (for example, if you specify security at the top-most node, down-level nodes will have the same security). Microsoft recommends that you use the inheritance capabilities to specify security only at top-level nodes, and then redefine security only for those downlevel nodes that require it. This approach will greatly simplify your security structure and will reduce the administrative overhead that would result from an overly complex access control structure.</p>
<p>
<b>Note</b>: The Directory Security area supports security descriptor configuration for Directory Services objects only; tools such as DS Admin provide general directory administration. DS Admin also allows you to manage security on a per-object basis. Microsoft recommends that you use Security Configuration Editor to configure security for a large number of objects or to analyze security when diagnosing problems.</p>
<h3><a name="registrysecurity"></a>Registry Security</h3>
<p>
The registry is another object tree in which the Security Configuration Editor allows you to manage the object by placing a security descriptor on the object. In the case of the registry, however, the objects are registry keys. Again, the configuration template contains the fully qualified registry key path and security descriptor in SDDL format.</p>
<p>
Because Windows NT 5.0 is going to support a dynamic inheritance model for all object providers, when applying security on registry keys, the Security Configuration Editor will<i> </i>follow the same inheritance algorithm, as did the directory tree. The snap-in&rsquo;s template layout for registry security configuration is shown in Figure 7.</p>
<p>
<b>Figure 7. Configuring Registry Security Settings</b></p>
<h3><a name="filesystemsecurity"></a>File System Security</h3>
<p>
Local file system security is the third object tree supported within the Security Configuration Editor. The editor treats all volumes on a given system as part of a single tree, with first-level nodes as the root directory of each volume. This is similar to the Directory and Registry security configuration, because the configuration template contains a list of fully qualified file or directory paths and security descriptors for each. The dynamic inheritance model is supported on NTFS files also. The snap-in&rsquo;s template layout for file system security is illustrated in Figure 8:</p>
<p>
<b>Figure 8. Configuring File System Security Settings</b></p>
<h3><a name="systemservicessecurity"></a>System Services Security</h3>
<p>
System Services include critical functionality such as network services, file and print services, telephony and fax services, and Internet/intranet services. Because of the breadth and diversity of this area, Security Configuration Editor&rsquo;s System Services area is architected to be extendable. Security Configuration Editor directly supports general settings for each system service. These general settings include the service startup settings and security on the service. Note that the name of the service must be the same as the one used by Service Control Manager. (See Figure 9.)</p>
<p>
<b>Figure 9. Configuring System Services Security</b></p>
<p>
To extend this area of the Security Configuration Editor so it can be used to configure specific settings for a new service, you need to create and attach a Security Configuration Editor Attachment (a DLL). A Security Configuration Editor Attachment consists of the following:
<ul>
<li>
<i><b>An engine DLL</b>, </i>which exports three well-defined interfaces. Implementing all of these interfaces is optional. One interface is used to configure settings, another is used to query settings for analysis (discussed later in this document), and the third is used to update settings. Note that you can choose to implement only configuration, only analysis, or both. Also, you may or may not support user editing. You need to register the name of this DLL in a well-known place in the registry, along with the name of the service to which it applies. Security Configuration Editor looks up the registry key to get the list of services, and loads each Attachment DLL. Security Configuration Editor then calls the appropriate interface, depending on whether it is configuring a system or collecting analysis information. The interface communicates with the Attachment, which is then responsible for saving the configuration or analysis information in the specified section within the template, and for using that information to configure the system or alert the administrator. <br><br></li>
<li>
<b><i>An extension snap-in</i></b>,<b><i> </i></b>which extends the Security Configuration snap-in within the Microsoft Management Console. The extension snap-in consists of a scope pane node&mdash;with its own namespace&mdash;that extends the services node to support service-specific settings. The extension snap-in also needs to export well-defined interfaces to communicate with the Security Configuration Editor<i> </i>snap-in. Note that the extension snap-in does not directly communicate with the configuration engine. An extension snap-in provides functionality only when invoked by a parent snap-in (in this case the Security Configuration Editor).<br><br></li>
<li>
<b>An installation kit</b>, which registers the engine for the Security Configuration Editor and the extension snap-in.<br><br></li>
<li>
Figure 10 shows the pieces of the attachment and how they fit into the Security Configuration Editor snap-in and MMC.</li>
</ul>
<p>
<b>Figure 10. Security Configuration Editor and Service Attachment Architecture</b></p>
<p>
Microsoft will provide attachments for some services that are shipped with the system. In its initial release, Microsoft plans to ship security configuration attachments for the CIFS File Sharing Service.</p>
<p>
In addition, the interface used to extend the editor is described in Appendix A, &ldquo;Implementing Service Security Attachments.&rdquo;</p>
<h2><a name="analyzingsecurity"></a>Analyzing <br>
Security</h2>
<p>
This section describes how to use the Security Configuration Editor to analyze various security aspects of a Windows NT 5.0 system. Security analysis is the other half of Security Configuration Editor&rsquo;s capabilities. Security Configuration Editor provides a graphical interface that allows you to view the analysis information collected from the system. Additionally, you can use the graphical user interface or the command-line utility, <b>secedit</b>, to collect analysis data from the system. This enables you to collect the data interactively or to schedule data collection as part of an off-hour batch processing script.</p>
<p>
To promote ease of use (and to eliminate the steep learning curve normally associated with new administration tools), the GUI design of the analysis display has been kept simple and informational. Instead of complicated graphics or error alerts, it provides simple visual cues (font and color) to identify security problems&mdash;and the information required to fix those problems. The interface uses a simple table that lists the attributes, their corresponding values, and the recommended values. Potential problems are identified by changes in color and font. Figure 11 shows the analysis user interface.</p>
<p>
<b>Figure 11. Security Analysis User Interface</b></p>
<p>
The Security Configuration Editor uses a base configuration template when performing its security analysis. The base template, which lists the preferred or recommended settings, is necessary to do comparisons and to provide recommended configuration information so that potential problems can be avoided. Security Configuration Editor&rsquo;s analysis engine queries settings for various security attributes in each of the security areas and compares the values to the recommendations in the base template. If the settings match the template, they are assumed to be correct. If not, they are identified as potential problems that need investigation. These potential problems are noted and displayed in the snap-in&rsquo;s Analysis Viewer interface. </p>
<p>
By default, the base template is the one used during system configuration. However, you can explicitly specify another template during analysis. The analysis information is collected by the analysis engine and stored in an ISAM database. The use of standard Microsoft database technology is intentional.  It allows us to build integrated reporting mechanisms and high-end capabilities such as querying, transactions, and so forth. In the future, ODBC support will also be provided.</p>
<p>
The Security Configuration Editor supports two modes of security analysis for Windows NT systems: <i>configured system analysis</i> and <i>unconfigured system analysis</i>.
<ul>
<li>
<b><i>Configured system analysis</i></b> refers to situations in which the system has been configured with a configuration template before the first analysis is performed. In this case, Security Configuration Editor created a Security Analysis database that includes all of the configuration information during the configuration phase itself. This database includes a copy of the configuration template, which serves as the default base template for analysis. Security Configuration Editor is able to use the database to do the analysis, and, after completion, it adds the analysis data to the database.<br><br></li>
<li>
<b><i>Unconfigured system analysis</i></b> refers to situations in which you use a base template to perform security analysis before configuring the system. In this case, you must provide the base template to use for comparisons and so forth. The database is created during the analysis process, and the actual analysis data is added to the database. A copy of the base template is stored in the database as the default for future analyses.<p>
In addition to analyzing the system&rsquo;s current configuration, the Security Configuration analysis interface allows you to make interactive changes of two kinds: you can change the system configuration, or you can change the configuration template.
</li>
<li>
<b>C<i>hanging the System Configuration</i></b> involves updating the system settings so that they match the ones recommended by the base template stored in the database. Note that these changes are made in the copy of the template stored in the database and are not applied to the system until you select the reconfiguration option provided by the snap-in. Choosing the reconfiguration option reapplies all of the settings specified in the copy of the template stored in the database.<br><br></li>
<li>
<b><i>Changing the Security Configuration Template</i> </b>involves updating the copy of the template stored in the database to reflect a new system setting. You can use this option to tell the Editor not to inform you of specific non-standard settings that you have investigated and consider reasonable. Note that these changes are also only made to the copy of the template stored in the database and not to the actual template that was used. Changes to the original template must be done by editing the template directly.<p>
The Analysis Viewer provided with the Security Configuration Editor displays the system security configuration information organized into security areas, as defined previously in this document. The next sections describe the analysis capabilities associated with each area.
</li>
</ul>
<h3><a name="securitypolicies"></a>Security Policies</h3>
<p>
When analyzing system security, the Security Configuration Editor queries all of the defined security attributes that fall into this area and saves them in the current analysis section of the analysis database. You can then use the Analysis Viewer to see the information. </p>
<p>
The Analysis Viewer provides a tabular view of the information. For each attribute, it displays the current and recommended settings (recommended settings are obtained from the stored copy of the configuration template). Attributes that are not using the recommended settings are clearly identified (by color, font, and icons) so that you can easily recognize and correct the problems. To correct a problem, you can either accept the current setting, in which case the stored template is modified, or you can change the system setting to match the recommendation, in which case the corresponding attribute is reset when the system is reconfigured.</p>
<p>
Figure 12 shows the Analysis Viewer displaying the Security Policy information.</p>
<p>
<b>Figure 12. Analyzing Security Policy Settings</b></p>
<h3><a name="restrictedgroupmanagement"></a>Restricted Group Management</h3>
<p>
Analysis of restricted groups involves tracking group memberships, including recursive membership. Problems are identified by color, font, and icon. To correct a problem, you can either accept the current settings, in which case the stored template is modified, or you can change the system setting to match the recommendation, in which case the problematic group memberships are changed when the system is reconfigured.</p>
<p>
Figure 13 shows the Analysis Viewer displaying the Restricted Group Management information.</p>
<p>
<b>Figure 13. Analyzing Restricted Group Membership</b></p>
<h3><a name="rightsprivilegesmanagement"></a>Rights and Privileges Management</h3>
<p>
Analysis of rights and privileges involves tracking security principals who are directly or indirectly granted each right or privilege (by group memberships). Problems are identified by color, font, and icon. To correct a problem, you can either accept the current settings, in which case the stored template is modified, or you can change the system setting to match the recommendation, in which case the rights and privileges are changed when the system is reconfigured.</p>
<p>
Figure 14 shows the Analysis Viewer displaying the Rights and Privileges Management information.</p>
<p>
<b>Figure 14. Analyzing Rights and Privileges</b></p>
<h3><a name="directorysecurity"></a>Directory Security</h3>
<p>
Directory Security analysis falls into the general category of analyzing security descriptors on object trees. The Security Configuration Editor analysis engine uses the list of directory object names present in the stored base configuration template to build a partial image of the tree. (The image is partial because some paths may not be included in the template.) The engine analyzes all tree branches that are reflected in the template and provides information about the similarity of security descriptors to the ones defined. It also detects the highest subtree node, which is not specified in the template, and provides information about that node. The analysis engine uses the notions of <i>match</i>, <i>mismatch</i>, and <i>unknown</i> to categorize the security descriptor information on the actual tree as compared to that in the template.
<ul>
<li>
<b><i>Match</i></b> indicates that the security descriptor is the same as that specified in the template. <br><br></li>
<li>
<b><i>Mismatch</i></b> indicates that the descriptor does not match the template because the security is stronger or weaker than that prescribed. Mismatches need to be investigated. <br><br></li>
<li>
<b><i>Unknown</i></b> indicates that a node (or subtree) is detected for which there is no information in the template.<p>
You can accept or change unknown security descriptors, which are then included in the template. You can also accept or change mismatched descriptors. Changes are also allowed to descriptors that match. These are considered updates and are recorded in the stored configuration template in the database. If you select any of these settings and choose the Change action, the ACL Editor is invoked. The editor displays the current security settings and allows you to modify them directly. The changes made are stored in the copy of the template in the database and applied to corresponding objects when the system is reconfigured.
</li>
</ul>
<h3><a name="registrysecurity"></a>Registry Security</h3>
<p>
Registry Security analysis falls into the same general category of analyzing security descriptors on object trees as did Directory Security analysis. The Security Configuration Editor analysis engine uses the paths to the registry keys and their security descriptors (the paths and descriptors are stored in SDDL in the base configuration template) as the basis for its analysis. The engine analyzes the registry information and provides information about the similarity of security descriptors to the ones defined. The analysis engine again uses the notions of <i>match</i>, <i>mismatch</i>, and <i>unknown</i> to categorize the security descriptor information on the actual tree as compared to that in the template.</p>
<p>
Figure 15 shows the Analysis Viewer displaying the Registry Security information.</p>
<p>
<b>Figure 15. Analyzing Registry Security Settings</b></p>
<h3><a name="filesystemsecurity"></a>File System Security</h3>
<p>
Local file system security is the third object tree supported within the Security Configuration Editor. The Security Configuration Editor analysis engine uses the list of fully qualified file or directory paths and their security descriptors stored in the base configuration template as the basis for its analysis. The engine analyzes the information and determines the similarity of the actual security descriptors to the ones defined. The analysis engine again uses the notions of <i>match</i>, <i>mismatch</i>, and <i>unknown</i> to categorize the security descriptor information on the actual tree as compared to that in the template.</p>
<p>
Figure 16 shows the Analysis Viewer displaying the Registry Security information.</p>
<p>
<b>Figure 16. Analyzing File System Security Settings</b></p>
<h3><a name="systemservicessecurity"></a>System Services Security</h3>
<p>
Security Configuration Editor collects general security information on all services configured to run on the system. General information includes startup settings and security descriptors. The editor detects problems, such as mismatches or services not specified in the template, and reports them. </p>
<p>
Analysis of service-specific security settings for each service is also provided by the service security attachment architecture for Security Configuration Editor as discussed in the configuration section above. In this case, the Security Configuration Editor<i> </i>calls the defined interfaces to allow the attachment to collect the necessary data and store it in a specific place in the analysis database. The Analysis Viewer then calls the extension snap-in&rsquo;s analysis interface to display the information, as well as to accept user actions to correct problems. (See Figure 17.)</p>
<p>
<b>Figure 17. Analyzing System Services Settings</b></p>
<p>
As stated previously, Microsoft plans to ship a security configuration attachment for CIFS File Sharing Service in the initial release of the Security Configuration Editor. The interface used to extend the editor is documented in Appendix A, &ldquo;Implementing Service Security Attachments.&rdquo; This interface will allow ISVs to build security attachments for other services.</p>
<h2><a name="formoreinformation"></a>For More Information</h2>
<p>
For the latest information on Windows NT Server, check out our World Wide Web site at http://www.microsoft.com/ntserver or the Windows NT Server Forum on the Microsoft Network (GO WORD: MSNTS).</p>
<h2><a name="appendixa.implementingservicesecurityattachments"></a>Appendix A. Implementing Service security Attachments</h2>
<p>
This appendix describes the procedures for building and implementing Service Security Attachments for the Security Configuration Editor.</p>
<h3><a name="introduction"></a>Introduction</h3>
<p>
Security Configuration Editor handles general security settings for individual services directly. These general settings include the service invocation policy (disabled, automatic, or manual) as well as the security descriptors for each service. Therefore, no Security Configuration Editor Attachment should attempt to configure these settings. The Service Security Attachment architecture within the Security Configuration Editor provides an infrastructure to configure and analyze specific security settings for individual services. For example, Spooler is a Windows NT service that defines <i>private objects</i> (in this case, printers) that need to be secured. In addition, it has configuration parameters that are security-sensitive. For Spooler, a Service Security Attachment must allow configuration and analysis of security settings on printer objects and security-sensitive parameters for the service.</p>
<p>
Service Security Attachment architecture requires implementation of the following two pieces:
<ul>
<li>
An attachment engine DLL that implements three interfaces (described later in this appendix). <br><br></li>
<li>
A Microsoft Management Console (MMC) extension snap-in that provides the template editor and analysis viewer functionality used to configure and analyze specific security settings for the service. This extension is exposed as a node under the <b>Services</b> security area in the Security Configuration Editor snap-in.<p>
Security Configuration Editor provides a set of support APIs that the attachment engine or extension snap-in can use to query or set service-specific information contained in the Security Configuration Editor database.
</li>
</ul>
<h3><a name="architecture"></a>Architecture</h3>
<p>
Figure 1A shows the three pieces of the snap-in architecture where the attachment infrastructure fits in (the extension snap-ins for attachments, the service attachment engines, and the inspection database).</p>
<p>
<b>Figure 1A. Security Configuration Editor Snap-in, Engine, and Extension Architecture</b></p>
<p>
Security Configuration Editor, which consists of the main engine and the MMC snap-in, provides the overall framework for configuring and analyzing system security for Windows NT installations. </p>
<p>
In the attachment framework, attachment engine DLLs register with Security Configuration Editor. Security Configuration Editor then loads the attachment during execution. It calls the attachment&rsquo;s configuration interface when the system is configured, the analysis interface when the system is analyzed, and the update interface when parameters in the database are modified by the extension snap-in.</p>
<p>
Similarly, the extension snap-in for the service attachment must register as a Security Configuration Editor snap-in extension. The Security Configuration Editor snap-in loads the extension snap-in as a node under the Services security area in  each template node, as well as in  the configuration/inspection node. If you are writing an extension snap-in, you must follow the MMC extension writer&rsquo;s documentation to implement the overall extension snap-in. In addition, you must implement the component object model (COM) interface described below, to communicate with the Security Configuration Editor snap-in.</p>
<h3><a name="buildingattachmentenginedll"></a>Building the Attachment Engine DLL</h3>
<p>
Building the service attachment involves implementing three interfaces and installing/registering the attachment with <i>S</i>ecurity Configuration Editor. Security Configuration Editor will load the attachment and call these interfaces based on user-invoked operations.</p>
<p>
Before describing which interfaces need to be implemented and how to implement them, it is important to define various data structures and support APIs provided by Security Configuration Editor.</p>
<h4><a name="thedatastructures"></a>The Data Structures</h4>
<p>
Note that the data structures described here are defined in scesvc.h, included in the Microsoft Win32® SDK.
<ul>
<li>
SCE Status Codes&mdash;various Security Configuration Editor status codes returned by helper functions and expected from the attachment interfaces.<pre><code>typedef DWORD                   SCESTATUS;

#define SCESTATUS_SUCCESS              0L
#define SCESTATUS_INVALID_PARAMETER    1L
#define SCESTATUS_RECORD_NOT_FOUND     2L
#define SCESTATUS_INVALID_DATA         3L
#define SCESTATUS_OBJECT_EXIST         4L
#define SCESTATUS_BUFFER_TOO_SMALL     5L
#define SCESTATUS_PROFILE_NOT_FOUND    6L
#define SCESTATUS_BAD_FORMAT           7L
#define SCESTATUS_NOT_ENOUGH_RESOURCE  8L
#define SCESTATUS_ACCESS_DENIED        9L
#define SCESTATUS_CANT_DELETE          10L
#define SCESTATUS_PREFIX_OVERFLOW      11L
#define SCESTATUS_OTHER_ERROR          12L
#define SCESTATUS_ALREADY_RUNNING      13L
#define SCESTATUS_SERVICE_NOT_SUPPORT  14L
</code></pre>
</li>
<li>
SCE Handles&mdash;the opaque handles provided by Security Configuration Editor to attachment interfaces for support of callback APIs.<pre><code>typedef PVOID SCE_HANDLE;
typedef ULONG SCE_ENUMERATION_CONTEXT, *PSCE_ENUMERATION_CONTEXT;
</code></pre>
</li>
<li>
SCE Service Configuration Information&mdash;the information structure to be used by attachment APIs when querying or setting configuration information to the database or template via the support callback APIs.<pre><code>typedef enum _SCESVC_INFO_TYPE {

<b>    SceSvcConfigurationInfo,</b>
    SceSvcAnalysisInfo,
    SceSvcInternalUse// DO NOT USE.

} SCESVC_INFO_TYPE;

typedef struct _SCESVC_CONFIGURATION_LINE_ {

    LPTSTR  Key;
    LPTSTR  Value;
    DWORD   ValueLen; // number of bytes

} SCESVC_CONFIGURATION_LINE, *PSCESVC_CONFIGURATION_LINE;

typedef struct _SCESVC_CONFIGURATION_INFO_ {

    DWORD   Count;
    PSCESVC_CONFIGURATION_LINE Lines;

} SCESVC_CONFIGURATION_INFO, *PSCESVC_CONFIGURATION_INFO;
</code></pre>
</li>
<li>
SCE Service Analysis Information&mdash;the information structure to be used by attachment APIs when querying or setting analysis information to the database through the support callback APIs.<pre><code>typedef enum _SCESVC_INFO_TYPE {

    SceSvcConfigurationInfo,
<b>    SceSvcAnalysisInfo,</b>
    SceSvcInternalUse// DO NOT USE

} SCESVC_INFO_TYPE;


typedef struct _SCESVC_ANALYSIS_LINE_ {

    LPTSTR  Key;
    PBYTE   Value;
    DWORD   ValueLen; // number of bytes

} SCESVC_ANALYSIS_LINE, *PSCESVC_ANALYSIS_LINE;

typedef struct _SCESVC_ANALYSIS_INFO_ {

    DWORD   Count;
    PSCESVC_ANALYSIS_LINE Lines;

} SCESVC_ANALYSIS_INFO, *PSCESVC_ANALYSIS_INFO;

</code></pre>
</li>
</ul>
<h4><a name="securityconfigurationeditorhelperapis"></a>Security Configuration Editor Helper APIs</h4>
<p>
Security Configuration Editor provides a set of support application programming interfaces (APIs) that the attachment should use to read or write information to the template and the database. </p>
<p>
These APIs are:
<ul>
<li>
<b>SceSvcQueryInfo</b>&mdash;this API lets the attachment query configuration or analysis information from the database for a given service.<br><br></li>
<li>
<b>SceSvcSetInfo</b>&mdash;this API lets the attachment set configuration or analysis information in the database for a given service.<br><br></li>
<li>
<b>SceSvcFree</b>&mdash;this API should be used to free buffers allocated by the Security Configuration Editor for the attachment.<br><br></li>
<li>
<b>SceSvcConvertSDToText</b>&mdash;this API takes a binary self-relative Windows NT security descriptor and returns a text representation for it. This is useful for storing security descriptors in templates.<br><br></li>
<li>
<b>SceSvcConvertTextToSD</b>&mdash;this API takes a text form security descriptor that was originally generated via <b>SceSvcConvertSDToText</b>, and returns a self-relative binary Windows NT security descriptor that represents it. This is useful in reading a textual security descriptor from template and applying it to an object on the system.<p>
These APIs are defined in scesvc.h in the Win32 SDK. The static library to link to is scedll.lib, available for x86 and Alpha platforms. These APIs are described in greater detail next.
<p>
<b>SceSvcQueryInfo</b>
<pre><code>SCESTATUS
WINAPI
SceSvcQueryInfo(
    IN SCE_HANDLE           sceHandle,
    IN SCESVC_INFO_TYPE     sceType,
    IN LPTSTR               lpPrefix OPTIONAL,
    IN BOOL                 bExact,
    OUT PVOID               *ppvInfo,
    OUT PSCE_ENUMERATION_CONTEXT psceEnumHandle
    );
</code></pre>
<p>
The <b>SceSvcQueryInfo</b> support API allows the attachment to query configuration or analysis information from the database. 
<p>
The parameters are:
</li>
<li>
<b>sceHandle</b>&mdash;the opaque SCE handle passed to the attachment by Security Configuration Editor. This is used to determine where the information will be stored.<br><br></li>
<li>
<b>sceType</b>&mdash;this must be <code>SCE_SERVICE_CONFIGURATION_INFO </code>if configuration information is being queried, or be <code>SCE_SERVICE_ANALYSIS_INFO </code>if analysis information is being queried.<br><br></li>
<li>
<b>lpPrefix</b>&mdash;this parameter may be NULL. If it is NULL, all keys are returned.  If a string is supplied, then information returned contains all keys (and corresponding values) with the same prefix as the specified string.<br><br></li>
<li>
<b>bExact</b>&mdash;this parameter is not used if <b>lpPrefix</b> is NULL. If this parameter is TRUE, the key that matches exactly with the specifed string in <b>lpPrefix</b> is returned. If this parameter is FALSE, all keys (and their values) that have the same prefix as the specified string in <b>lpPrefix</b> are returned.<br><br></li>
<li>
<b>ppvInfo</b>&mdash;this must be a pointer to a pointer of type <code>SCESVC_CONFIGURATION_INFO </code>if the <b>sceType</b> is <code>SceSvcConfigurationInfo</code>. Otherwise, it must be <code>SCESVC_ANALYSIS_INFO</code> if the <b>sceType</b> is <code>SceSvcAnalysisInfo</code>. Security Configuration Editor&mdash;and not the attachment&mdash;will allocate the buffer; therefore the pointer must point to NULL.<br><br></li>
<li>
<b>psceEnumHandle</b>&mdash;this contains the handle that must be used in successive calls to this API. The API may not return all the keys in a single call as there could be large number of keys. (The maximum number of keys returned in a single call is 256.)<p>
This API returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code><br><br></li>
<li>
SCESTATUS_INVALID_PARAMETER <br><br></li>
<li>
SCESTATUS_RECORD_NOT_FOUND<br><br></li>
<li>
SCESTATUS_BAD_FORMAT<br><br></li>
<li>
SCESTATUS_OTHER_ERROR<br><br></li>
<li>
SCESTATUS_NOT_ENOUGH_RESOURCE<p>
<b>SceSvcSetInfo</b>
<pre><code>SCESTATUS
WINAPI
SceSvcSetInfo(
    IN SCE_HANDLE            sceHandle,
    IN SCESVC_INFO_TYPE sceType,
    IN LPTSTR               lpPrefix OPTIONAL,
    IN BOOL                 bExact,
    IN PVOID                pvInfo
    );

</code></pre>
<p>
The <b>SceSvcSetInfo</b> support API allows the attachment to set/overwrite configuration/analysis information stored in the database about a particular service. 
<p>
The parameters are:
</li>
<li>
<b>SceHandle</b>&mdash;the opaque handle that Security Configuration Editor passes to the attachment. This is used to determine where the information will be stored.<br><br></li>
<li>
<b>SceType</b>&mdash;this must be <code>SCE_SERVICE_CONFIGURATION_INFO </code>if configuration information is being set, or <code>SCE_SERVICE_ANALYSIS_INFO </code>if analysis information is being set.<br><br></li>
<li>
<b>lpPrefix</b>&mdash;this parameter may be NULL. If it is NULL, all service information is overwritten with the supplied information. If a string is supplied, then the information overwritten contains all keys (and corresponding values) with the same prefix as the specified string.<br><br></li>
<li>
<b>bExact</b>&mdash;this parameter is not used if <b>lpPrefix</b> is NULL. If this parameter is TRUE, the key that matches exactly with the specified string in <b>lpPrefix</b> is overwritten. If this parameter is FALSE, all keys (and their values) that have the same prefix as the specified string in <b>lpPrefix</b> are overwritten.<br><br></li>
<li>
<b>pvInfo</b>&mdash;this must be a pointer of type <code>SCESVC_CONFIGURATION_INFO</code> if the <b>sceType</b> is <code>SceSvcConfigurationInfo</code>. Otherwise, it must be <code>SCESVC_ANALYSIS_INFO</code> if the <b>sceType</b> is <code>SceSvcAnalysisInfo</code>. <p>
This API returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code><br><br></li>
<li>
SCESTATUS_INVALID_PARAMETER<br><br></li>
<li>
SCESTATUS_RECORD_NOT_FOUND<br><br></li>
<li>
SCESTATUS_BAD_FORMAT<br><br></li>
<li>
SCESTATUS_NOT_ENOUGH_RESOURCE<br><br></li>
<li>
SCESTATUS_ACCESS_DENIED<br><br></li>
<li>
SCESTATUS_DATA_OVERFLOW<br><br></li>
<li>
SCESTATUS_OTHER_ERROR<p>
<b>SceSvcFree</b>
<pre><code>SCESTATUS
WINAPI
SceSvcFree(
    IN PVOID pvServiceInfo
    );
</code></pre>
<p>
The attachment must call this API to free buffers allocated by Security Configuration Editor in calls to <b>SceSvcQueryInfo</b>. 
<p>
The pointer <b>ServiceInfo</b> points to the allocated buffer.
<p>
This API returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code><br><br></li>
<li>
SCESTATUS_INVALID_PARAMETER<p>
<b>SceSvcConvertSDToText</b>
<pre><code>SCESTATUS
WINAPI
SceSvcConvertSDToText (
    IN PSECURITY_DESCRIPTOR   pSD,
    IN SECURITY_INFORMATION   siSecurityInfo,
    OUT PWSTR                  *ppwszTextSD,
    OUT PULONG                 pulTextSize
    );
</code></pre>
<p>
<b>SceSceConvertSDToText</b> is a helper API that allows the attachment to convert a self-relative security descriptor into a textual form that can be stored in the configuration template and the database. This API is useful when attachment is configuring security on a service that supports private objects that have security descriptors on them. 
<p>
The parameters are:
</li>
<li>
<b>pSD</b>&mdash;pointer to the security descriptor. (Refer to the Win32 SDK for APIs that manipulate security descriptors.)<br><br></li>
<li>
<b>siSecurityInfo</b>&mdash;the security information part of the security descriptor that must be converted to textual form. (Refer to the Win32 SDK for value values of SECURITY_INFORMATION.)<br><br></li>
<li>
<b>ppwszTextSD</b>&mdash;the string form of the security descriptor returned by the API. The buffer is allocated by the API and must be freed using <b>SceSvcFree</b> when it is no longer needed.<br><br></li>
<li>
<b>pulTextSize</b>&mdash;pointer to a ULONG which is filled with the length of the string.<p>
The string to return the textual form is allocated by this helper API. It must be freed using <b>LocalFree</b>.
<p>
This API returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code><br><br></li>
<li>
SCESTATUS_INVALID_PARAMETER<br><br></li>
<li>
SCESTATUS_NOT_ENOUGH_RESOURCE<p>
<b>SceSvcConvertTextToSD</b>
<pre><code>SCESTATUS
WINAPI
SceSvcConvertTextToSD (
    IN  PWSTR                   pwszTextSD,
    OUT PSECURITY_DESCRIPTOR   *ppSD,
    OUT PULONG                  pulSDSize,
    OUT PSECURITY_INFORMATION   psiSeInfo
    );
</code></pre>
<p>
<b>SceSvcConvertTextToSD</b> is a helper API that allows the attachment to convert a textual form of a security descriptor (created earlier using <b>SceSvcConvertSDToText</b>) back to its self-relative binary form. 
<p>
The parameters are:
</li>
<li>
<b>pwszTextSD</b>&mdash;the text form of the security descriptor.<br><br></li>
<li>
<b>ppSD</b>&mdash;pointer to a security descriptor pointer. This API will allocate necessary memory to create the self-relative security descriptor. It must be freed using <b>SceSvcFree</b> when it is no longer needed.<br><br></li>
<li>
<b>pulSDSize</b>&mdash;the size of allocated security descriptor.<br><br></li>
<li>
<b>psiSeInfo</b>&mdash;the pieces of valid security information in the descriptor. (Refer to the Win32 SDK for values of SECURITY_INFORMATION.)<p>
The buffer to return security descriptor is allocated by this helper API. It must be freed using <b>LocalFree</b>.
<p>
This API returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code><br><br></li>
<li>
SCESTATUS_INVALID_PARAMETER<br><br></li>
<li>
SCESTATUS_RECORD_NOT_FOUND<br><br></li>
<li>
SCESTATUS_NOT_ENOUGH_RESOURCE</li>
</ul>
<h4><a name="requiredattachmentinterfaces"></a>Required Attachment Interfaces</h4>
<p>
The three interfaces that the attachment must implement are:
<ul>
<li>
<b>SceSvcAttachmentConfig</b>&mdash;Security Manager calls this interface when the system is configured.<br><br></li>
<li>
<b>SceSvcAttachmentAnalyze</b>&mdash;Security Manager calls this interface when the system is analyzed.<br><br></li>
<li>
<b>SceSvcAttachmentUpdate</b>&mdash;Security Manager calls this interface when it receives a template update request from the MMC snap-in.<p>
<b>SceSvcAttachmentConfig</b>
<pre><code>SCESTATUS
WINAPI
SceSvcAttachmentConfig(
IN SCE_HANDLE sceHandle,
    OUT PWSTR *ppszErrMessage OPTIONAL,
    OUT PDWORD pdErrLength
);
</code></pre>
<p>
The parameters are:
</li>
<li>
<b>sceHandle</b>&mdash;the opaque handle that Security Configuration Editor passes to the attachment for use during callbacks on various support interfaces defined above. Security Configuration Editor uses this handle to read or write information passed by the attachment to the database. <br><br></li>
<li>
<b>ppszErrMessage</b>&mdash;the attachment can allocate a string buffer using <b>LocalAlloc</b> to return an error message in this optional parameter. <br><br></li>
<li>
<b>pdErrLength</b>&mdash;the length of the allocated error message buffer (in bytes). Security Configuration Editor<i> </i>will always free this buffer using <b>LocalFree</b>; therefore, the buffer must be allocated with <b>LocalAlloc</b>.<p>
This interface must do the following:
</li>
<li>
Use the Security Configuration Editor support interface <b>SceSvcQueryInfo</b> to query configuration information from the template.<br><br></li>
<li>
Configure the service using the configuration information.<p>
This interface returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code> if the call completes successfully.<br><br></li>
<li>
Any other status code defined above. </li>
</ul>
<h2><a name="samplecode"></a>Sample Code</h2>
<pre><code>SCESTATUS
WINAPI
SceSvcAttachmentConfig(
    IN SCE_HANDLE sceHandle,
    OUT PWSTR *ppszErrMessage,
    OUT PDWORD *pdErrLength
    )
{
//
//variable definitions
//
PSCESVC_CONFIGURATION_INFOpConfigInfo = NULL;
SCESTATUSretCode;
SCE_ENUMERATION_CONTEXTEnumContext = 0;

if ( sceHandle == NULL ) {
return(SCESTATUS_INVALID_PARAMETER);
}

//
// now read the information and configure system using it.
//
// NOTE: you may decide to read all the information first
// and then do the configure, it is implementor&rsquo;s choice.
//

do {
retCode = SceSvcQueryInfo(
sceHandle,
SceSvcConfigurationInfo,
NULL,
FALSE,
(PVOID *)&amp;pConfigInfo,
&amp;EnumContext
);

if(retCode == SCESTATUS_SUCCESS &amp;&amp;
pConfigInfo != NULL)
{
ULONGi;
//
// We have some information, let&rsquo;s configure.
//
for(i = 0;i &lt; pConfigInfo-&gt;Count; i++)
{
if(pConfigInfo-&gt;Line[i].Key == NULL)
continue;

//
// We have a key that we should process.
// This will the core of doing configuration.
//
ProcessConfigurationLine(pConfigInfo-&gt;Line[i]);
}

//
// free the data we got back.
//
SceSvcFree((PVOID)pConfigInfo);
PConfigInfo = NULL;
}
//
// handle other return codes, as needed.
//
} while ( retCode == SCESTATUS_SUCCESS &amp;&amp; CountReturned &gt; 0);

//
// if return code is not success, we should set up
// error message appropriately.
//

//
// return the retCode.
//
return retCode;

}
</code></pre>
<p>
<b>SceSvcAttachmentAnalyze</b></p>
<pre><code>SCESTATUS
WINAPI
SceSvcAttachmentAnalyze(
IN SCE_HANDLE sceHandle,
    OUT PWSTR *ppszErrMessage,
    OUT PDWORD pdErrLength
);
</code></pre>
<p>
The parameters are:
<ul>
<li>
<b>sceHandle</b>&mdash;the opaque handle that Security Configuration Editor passes to the attachment to be used during callbacks on various support interfaces. Security Configuration Editor uses this handle to read information from the database and to write the analysis information to the database. <br><br></li>
<li>
<b>ppszErrMessage</b>&mdash;the attachment can allocate a string buffer using <b>LocalAlloc</b> to return an error message in this optional parameter. <br><br></li>
<li>
<b>pdErrLength</b>&mdash;the length of the allocated error message buffer (in bytes). Security Configuration Editor<i> </i>will always free this buffer using <b>LocalFree</b>; therefore, the buffer must be allocated with <b>LocalAlloc</b>.<p>
This interface must do the following:
</li>
<li>
Query configuration information from the service directly.<br><br></li>
<li>
Use the Security Configuration Editor support interface <b>SceSvcQueryInfo</b> to query configuration information from the template.<br><br></li>
<li>
Compute the differences of the parameters based on type and syntax.<br><br></li>
<li>
Use the Security Configuration Editor support interface <b>SceSvcSetInfo</b> to write the differential information to the database.<p>
This interface returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code> if the call completes successfully.<br><br></li>
<li>
Any defined <code>SCESTATUS</code> error codes are accepted.</li>
</ul>
<h2><a name="samplecode"></a>Sample Code</h2>
<pre><code>SCESTATUS
WINAPI
SceSvcAttachmentAnalyze(
IN SCE_HANDLE sceHandle,
    OUT PWSTR *ppszErrMessage,
    OUT PDWORD pdErrLength
);
{
//
// define various local variables.
//

if(sceHandle == NULL)
return (SCESTATUS_INVALID_PARAMETER);

//
// now read the base config information, query system
// setting corresponding to it, compare them
// and write to the database.
//
//

do {
retCode = SceSvcQueryInfo(
sceHandle,
SceSvcConfigurationInfo,
NULL,
FALSE,
&amp;pConfigInfo,
&amp;EnumContext
);

if(retCode == SCESTATUS_SUCCESS &amp;&amp;
pConfigInfo != NULL)
{
ULONGi;
//
// We have some information, let&rsquo;s configure.
//
for(i = 0;i &lt; pConfigInfo-&gt;Count; i++)
{
if(pConfigInfo-&gt;Line[i].Key == NULL)
continue;

//
// We have a key that we should query.
// This function is expected to query
// the system configuration corresponding
// to the key value.
//
QueryConfigurationLine(pConfigInfo-&gt;Line[i].Key,
&amp;SystemValue);

//
// now compare the values.
//
CompareValue(pConfigInfo-&gt;Line[i].Key,
SystemValue,
pConfigInfo-&gt;Line[i].Value,
&amp;Result
);

//
// Check if there is something that should
// be written to analysis part of the // database.
if(Result != NULL)
{
//
// we will overwrite exactly one// value.
// more efficient way to do this
// would be to accumulate a
// set of values and commit.
//
retCode = SceSvcSetInfo(
sceHandle,
SceSvcAnalysisInfo,
PconfigInfo-&gt;Line[I].Key,
TRUE,
Result
);
if(retCode != SCESTATUS_SUCCESS)
{
// if it doesn&rsquo;t get set, we 
// need to do some cleanup 
// here.
}
}
}

//
// free the data we got back.
//
SceSvcFree((PVOID)pConfigInfo);
PConfigInfo = NULL;

//
// should also free possible buffers SystemValue and 
// Result, up to each attachment
//

}
//
// handle other return codes, as needed.
//
} while ( retCode == SCESTATUS_SUCCESS &amp;&amp; pConfigInfo != NULL);

//
// if return code is not success, we should set up
// error message appropriately, if error buffer is not NULL
//

//
// return the retCode.
//
return retCode;

}
</code></pre>
<p>
<b>SceSvcAttachmentUpdate</b></p>
<pre><code>SCESTATUS
WINAPI
SceSvcAttachmentUpdate(
IN SCE_HANDLE sceHandle,
IN SCESVC_CONFIGURATION_INFO *ServiceInfo
);
</code></pre>
<p>
Security Configuration Editor calls this interface when the Security Configuration Editor snap-in passes service-specific changes to the configuration settings stored in the database.  </p>
<p>
The parameters are:
<ul>
<li>
<b>sceHandle</b>&mdash;the opaque handle that Security Configuration Editor passes to the attachment to be used during callbacks on various support interfaces. Security Configuration Editor uses this handle to read and information from the database and to write the analysis information to the database. <br><br></li>
<li>
<b>ServiceInfo</b>&mdash;the updated configuration information based on user edits and supplied by the attachment&rsquo;s extension snap-in. (See the explanation of the SCESVC_CONFIGURATION_INFO data structure in the data structures section.)<p>
This attachment interface must do the following:
</li>
<li>
Use the Security Configuration Editor support interface <b>SceSvcQueryInfo</b> to query the base information (configuration information) stored in the database. <br><br></li>
<li>
Use the Security Configuration Editor support interface <b>SceSceQueryInfo</b> to query the last set of differences (analysis information) stored in the database <br><br></li>
<li>
Use the <b>ServiceInfo</b> supplied to compute the new base configuration information.<br><br></li>
<li>
Use the <b>ServiceInfo</b> supplied and the last stored differences to compute the new differential information.<br><br></li>
<li>
Use the Security Configuration Editor support interface <b>SceSvcSetInfo</b> to write the new base configuration information to the database. <br><br></li>
<li>
Use the Security Configuration Editor support interface <b>SceSvcSetInfo</b> to write the new differential information to the database.<p>
This interface returns the following codes:
</li>
<li>
<code>SCESTATUS_SUCCESS</code> if the call completes successfully.<br><br></li>
<li>
Any valid <code>SCESTATUS</code> error codes are accepted.</li>
</ul>
<h2><a name="samplecode"></a>Sample Code</h2>
<pre><code>SCESTATUS
WINAPI
SceSvcAttachmentUpdate(
IN SCE_HANDLE sceHandle,
IN SCESVC_CONFIGURATION_INFO *ServiceInfo
);
{

if(sceHandle == NULL || ServiceInfo == NULL)
return(SCESTATUS_INVALID_PARAMETER);

//
// process each line of the passed information.
//
for(i=0; i &lt; ServiceInfo-&gt;Count; i++)
{
EnumContext = 0;
retCode = SceSvcQueryInfo(
sceHandle,
SceSvcConfigurationInfo,
ServiceInfo-&gt;Line[i].Key,
TRUE,
(PVOID *)&amp;pConfigInfo,
&amp;EnumContext
);

if(retCode != SCESTATUS_SUCCESS &amp;&amp; 
retCode != SCESTATUS_RECORD_NOT_FOUND)
{
//
// handle the error here.
//
break;
}

//
// if the value specified is NULL, deletion
// of the key is requested.
//
if(ServiceInfo-&gt;Line[i].Value == NULL)
{
if(retCode == SCESTATUS_SUCCESS)
{
//
// Lets ensure that analysis is ok.
//
EnumContext = 0;
retCode = SceSvcQueryInfo(
sceHandle,
SceSvcAnalysisInfo,
ServiceInfo-&gt;Line[i].Key,
TRUE,
(PVOID *)&amp;pAnalInfo,
&amp;EnumContext
);
if(retCode == SCESTATUS_RECORD_NOT_FOUND)
{
//
// Analysis Info was not found,
// this means it was matched during
// actual analysis.  Now, we are
// deleting the configuration info,
// hence current configuration is 
// what analysis should save.
//
UpdateInfo-&gt;Count = 1
UpdateInfo-&gt;Line = &amp;UpdateLine;
UpdateLine.Key = pConfigInfo-&gt;Line[0].Key;
UpdateLine.Value = 
(PBYTE)pConfigInfo-&gt;Line[0].Value;

RetCode = SceSvcSetInfo(
SceHandle,
SceSvcAnalysisInfo,
NULL,
TRUE,
&amp;UpdateInfo
);
if(retCode != SCESTATUS_SUCCESS)
{
//
// cleanup, something
// failed.
//
}
}
elseif (retCode == SCESTATUS_SUCCESS)
{
//
// simply delete the configuration.
// we already have analysis info in 
// place.
}
else
{
//
// handle other error codes.
//
}

//
// delete the key
//
RetCode = SceSvcSetInfo(
SceHandle,
SceSvcConfigurationInfo,
ServiceInfo-&gt;Line[i].Key,
TRUE,
NULL
);
if(retCode != SCESTATUS_SUCCESS)
{
//
// error cleanup.
//
}

}
//
// SCESTATUS_RECORD_NOT_FOUND means nothing more.
// as the key does not even exist.
//
}
else 
{
//
// Value to set is non-NULL,
// hence we must compare with current analysis
// if it is same, then delete the current analysis
// if it is different, do nothing to the analysis.
// Simply update the configuration info.
//
// left as exercise to the implementor.
//
}

SceSvcFree(pConfigInfo);
pConfigInfo = NULL;

SceSvcFree(pAnalInfo);
PAnalInfo = NULL;

}
//
// error cleanup
// set detail error message appropriately if the buffer
// is not NULL
//
return retCode;

}
</code></pre>
<h4><a name="installationregistration"></a>Installation and Registration</h4>
<p>
The service DLL must be installed on the Windows NT system where it is expected to be used. In addition, Security Configuration Editor needs to be made aware of the presence of the attachment. This process of installation and registration should include the following steps:</p>
<p>
Copy the service attachment DLL to a particular directory. The preferred directory is %windir%\secedit\attachments. You can create this directory if it does not already exist.</p>
<p>
Create a registry key under </p>
<p>
HKEY_LOCAL_MACHINE\</p>
<p>
Software\</p>
<p>
Microsoft\</p>
<p>
Windows NT\</p>
<p>
CurrentVersion\</p>
<p>
SecEdit\Services\</p>
<p>
<i>[Service Name]</i></p>
<p>
The <i>Service Name</i> used here will be the registered name for the attachment.  It should be unique so as to not collide with other attachments. The service name <b>must</b> be the same name used in Service Control Manager. The name used in Service Control Manager is the name to link each service with Security Configuration Editor.</p>
<p>
Create the following values in this key:
<ul>
<li>
Value Name = ServiceAttachmentPath<br><br></li>
<li>
Value Type = REG_SZ<br><br></li>
<li>
Value = the full path to the service attachment DLL (for example, %windir%\SecEdit\attachments\foobar.dll). </li>
</ul>
<h3><a name="buildingextensionsnapin"></a>Building the Extension Snap-in</h3>
<p>
The Security Configuration Editor snap-in is designed to be extensible to support the service attachment extension snap-ins. The communication between the Security Configuration Editor snap-in and the extension snap-ins is handled by the standard MMC mechanisms and two well-defined Component Object Model (COM) interfaces, as described in this section. While the service attachment engine is responsible for configuring and analyzing service security and updating the service template in the database, the service attachment extension allows user to view, create, and modify templates and analysis information. To function correctly, it is imperative that the service snap-in follow the MMC extension snap-in guidelines and the attachment guidelines provided in this document. </p>
<p>
Each service attachment snap-in must be an extension snap-in, and these extension snap-ins provide functionality only when invoked by the Security Configuration Editor snap-in. Each service attachment snap-in can extend a Services node type only. It declares itself as being a subordinate to nodes of Services, and then for each occurrence of the Services node type, the MMC console automatically adds the related snap-in extensions. Each service attachment owns one scope pane node and the related result pane in MMC. Service attachment extensions must allow the user to create or modify service security settings in a template managed by the Security Configuration Editor snap-in. It must also be able to display configuration and/or analysis security settings with analysis status. It must support editing of service configuration settings for a system, and the analysis results must be updated based on the updated configuration settings. </p>
<p>
It is up to the service attachment extension to determine the format and implementation logic of its own result pane. COM interfaces provide a way to extend Security Configuration Editor&rsquo;s functionality for services without dictating how each service extension performs its particular tasks. See the COM interface layout shown in Figure A2.</p>
<p>
<b>Figure A2. COM Interface Layout for Service Attachment</b></p>
<p>
In this illustration, the Security Configuration Editor Snap-in implements a COM interface called <b>ISceSvcAttachmentData</b>. The interface provides the attachment snap-in to query configuration and analysis information from templates or the database respectively. The attachment snap-in implements the COM interface <b>ISceSvcAttachmentPersistInfo</b>, which is used by the Security Configuration Editor snap-in to get any modified information that may need to be written to the template or the database. The snap-in will then save this information appropriately.</p>
<p>
There are three operations that the attachment snap-in must support:
<ul>
<li>
<b><i>Display template and/or inspection information</i></b>&mdash;to display information, the attachment snap-in node extends the Security Configuration Editor snap-in via the Services node. The Security Configuration Editor node types that can be extended are:<br><br></li>
<li>
Template Services NodeType ={24a7f717-1f0c-11d1-affb-00c04fb984f9}<br><br></li>
<li>
Inspection Services NodeType = {678050c7-1ff8-11d1-affb-00c04fb984f9}<p>
When creating or editing a template, if the services node is expanded, all registered extension snap-ins will be notified by the MMC directly. Each attachment should then insert itself under the Services node, and then complete the following steps:
</li>
<li>
Use the <b>QueryInterface</b> method to query the Security Configuration Editor interface <b>ISceSvcAttachmentData</b>.<br><br></li>
<li>
Call the <b>Initialize</b> method to inform Security Configuration Editor that it is loaded and to establish a context to communicate for appropriate information.<br><br></li>
<li>
Either use the <b>GetData</b> method to pull information right away or wait until its node is selected by the user.<br><br></li>
<li>
<b><i>Modify configuration information in the templates</i></b>&mdash;The attachment snap-in must allow the user to modify configuration information about the service. The modified information must be held by the attachment snap-in until the Security Configuration Editor uses the <b>ISceSvcAttachmentPersistInfo</b> interface to pull the information. To avoid memory leaks, memory allocated is freed by the owner. For this reason, both interfaces have a <b>FreeBuffer</b> method. <br><br></li>
<li>
<b><i>Modify configuration information in the database</i></b>&mdash;The attachment snap-in must support modifications to configuration information also through the inspection node also. This allows the user to make changes and reapply the configuration over time. The logic to do this should be identical to modifying configuration information in the templates. The changes made will take effect on the saved template in the inspection database.</li>
</ul>
<h4><a name="theclipboardformat"></a>The Clipboard Format</h4>
<pre><code>#define CCF_SCESVC_ATTACHMENT ( L&rdquo;CCF_SCESVC_ATTACHMENT&rdquo; )
</code></pre>
<p>
This clipboard is used for each attachment snap-in to extract the template name from Security Configuration Editor. The template name is a PWSTR. This template name is used in further communications between the service attachment and Security Configuration Editor<i> </i>in the <b>Initialize</b> method.</p>
<h4><a name="theextensionsnapininterfaces"></a>The Extension Snap-in Interfaces</h4>
<p>
The extension snap-in queries the following Security Configuration Editor snap-in interfaces.</p>
<p>
<b>ISceSvcAttachmentData </b></p>
<pre><code>class ISceSvcAttachmentData  : public IUnknown
{
public:
    virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetData(
        /* [in] */ SCE_HANDLE sceHandle,
        /* [in] */ SCESVC_INFO_TYPE sceType,
        /* [out] */ PVOID *ppvData,
        /* [in out] */ PSCE_ENUMERATION_CONTEXT psceEnumHandle ) = 0;

    virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Initialize(
        /* [in] */ LPCTSTR ServiceName,
        /* [in] */ LPCTSTR TemplateName,
        /* [in] */ LPUNKNOWN lpUnknown,
        /* [out] */ SCE_HANDLE *sceHandle) = 0;

    virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE FreeBuffer(
        /* [in] */ PVOID pvData) = 0;

    virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CloseHandle(
        /* [in] */ SCE_HANDLE sceHandle) = 0;

};
</code></pre>
<p>
<b>ISceSvcAttachmentData</b> is the COM interface implemented by the Security Configuration Editor snap-in to support extension snap-ins. The attachment extension snap-in should use it to retrieve service-specific information for display user modification.</p>
<p>
<b>ISceSvcAttachmentPersistInfo</b> </p>
<pre><code>class ISceSvcAttachmentPersistInfo : public IUnknown
{
public:
    virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Save(
        /* [out] */ SCE_HANDLE *sceHandle, 
        /* [out] */ PVOID *ppvData,
        /* [out] */ PBOOL pbOverwriteAll ) = 0;

    virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE IsDirty() = 0;

    virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE FreeBuffer(
        /* [in] */ PVOID pvData) = 0;

};
</code></pre>
<p>
The<b> IsceSvcAttachmentPersistInfo</b> interface is an abstract class that must be implemented by each attachment extension snap-in. The Security Configuration Editor snap-in calls this interface to check if there is modified information that must be written back to the template or the database (using <b>IsDirty</b>). If that is the case, it calls the <b>Save</b> method to make the extension snap-in communicate the information that must be saved.</p>
<h4><a name="installationregistration"></a>Installation and Registration</h4>
<p>
The Security Configuration Editor snap-in provides extensions only through the Security Configuration Editor namespace. Context menus, toolbars, toolbar buttons, and property pages are not extensible at this point. The attachment snap-in must extend the Security Configuration Editor namespace by populating its own node at well-defined places in the namespace.</p>
<p>
Attachment snap-ins should be registered under the registry key:</p>
<p>
HKEY_LOCAL_MACHINE\</p>
<p>
Software\</p>
<p>
Microsoft\</p>
<p>
MMC\</p>
<p>
Snapins</p>
<p>
The StandAlone key should NOT be created under the snap-in because each attachment snap-in must be an extension only.</p>
<p>
Attachment snap-ins must also register themselves under the Security Configuration Editor Services NodeType subkeys as follows:
<ul>
<li>
To extend the Security Configuration Editor template name space, use the registry key:<p>
HKLM\
<p>
Software\
<p>
Microsoft\
<p>
MMC\
<p>
NodeTypes\
<p>
24a7f717-1f0c-11d1-affb-00c04fb984f9\
<p>
Extensions\
<p>
NameSpace
</li>
<li>
To extend the Security Configuration Editor inspection (analysis) name space, use the registry key:</li>
</ul>
<p>
HKLM\</p>
<p>
Software\</p>
<p>
Microsoft\</p>
<p>
MMC\</p>
<p>
NodeTypes\</p>
<p>
678050c7-1ff8-11d1-affb-00c04fb984f9\</p>
<p>
Extensions\</p>
<p>
NameSpace</p>
<p>
For more information, refer to the public header scesvc.h in the Platforms SDK.</p>
<p>
To register the attachment snap-ins as extensions to the Security Configuration Editor snap-in, create these keys in your DllRegisterServer and DllUnregisterServer function implementations.</p>
<h4><a name="initializationaddingattachmentnode"></a>Initialization &ndash; Adding the Attachment Node</h4>
<p>
When a Services node under either a template or under Last Configuration/Inspection is expanded, MMC uses <b>IComponentData::Notify</b> and the <b>MMCN_EXPAND</b> event to notify Security Configuration Editor and all of its extensions. Security Configuration Editor then extracts its internal format from the <b>lpDataObject</b> and stop further processing when it sees the Services node type. The attachment snap-ins (registered as extensions) also extract the node type from the <b>lpDataObject</b>. If the node type is one of the Services node types defined earlier, the attachment snap-ins insert their root nodes under the specified parent node.</p>
<pre><code>//
// detect which extension node to extend
//
 
GUID* nodeType = ExtractNodeType(lpDataObject);

if ( nodeType == NULL ) {
   return S_OK;
}

if ( ::IsEqualGUID(*nodeType, cNodetypeSceTemplateServices) == TRUE )
   folderType =ATTACHEMNT_STATIC;// defined by attachment writer.
else if (::IsEqualGUID(*nodeType, cNodetypeSceAnalysisServices) 
== TRUE)
   folderType =ATTACHMENT_STATIC_ANALYSIS;
// defined by attachment writer

// Free resources
::GlobalFree(reinterpret_cast&lt;HANDLE&gt;(nodeType));

//
// As an extension snapin, the service attachment 
// root node should be added
// Insert that node, and remember it 
// as the root of the SMB Extension namespace.
//
CheckAndInsertRootNodeToMMCScopePane
</code></pre>
<p>
The next major step in the initialization is to establish communication with the Security Configuration Editor snap-in. This is necessary because the attachment gets its data, as well any changes made by the user, from the Security Configuration Editor. To do this, follow these steps:</p>
<p>
Obtain the template name. If the Services node type that the attachment is inserted under was that of a template, then the attachment needs to know which template it is. It communicates this information to the Security Configuration Editor during interface initialization. The template name can be obtained via the clipboard format, as follows:</p>
<pre><code>PWSTR * TemplateName = ExtractTemplateNameFromDataObject(lpDataObject);
</code></pre>
<p>
Set up the context with the Security Configuration Editor. Once the template name is known (or if the Service node is of type Inspection), the attachment snap-in must query the <b>ISceSvcAttachmentData</b> interface and call <b>Initialize</b> to set up the context.</p>
<pre><code>//
// QueryInterface for the main snap-in&rsquo;s IUnkown.
//
LPUNKNOWN pUnk;

hr = lpDataObject-&gt;QueryInterface(IID_IUnknown,
 reinterpret_cast&lt;void**&gt;(&amp;pUnk));

//
// QueryInterface ISceSvcAttachmentData
//
if ( SUCCEEDED(hr) ) {
    hr = pUnk-&gt;QueryInterface(IID_ISceSvcAttachmentData,
 reinterpret_cast&lt;void**&gt;(&amp;pSceData));
}



//
// QueryInterface the attachment&rsquo;s IUnknown as 
// that is needed by the main snap-in.
//
((LPUNKNOWN)m_pSnapin)-&gt;QueryInterface(IID_IUnknown, reinterpret_cast&lt;void**&gt;(&amp;pUnk));

//
// Call Initialize to setup context with main snap-in.
//
m_pSceData-&gt;Initialize(ServiceName, TemplateName, pUnk, &amp;sceHandle);


</code></pre>
<p>
NOTE: You must call <b>CloseHandle</b> to close the <b>sceHandle</b> once you are done.</p>
<p>
Get the appropriate data. (The previous step really completes the initialization.) The attachment snap-in can use the established context to query appropriate data from Security Configuration Editor as needed by using the <b>GetData</b> interface. The attachment may decide to do this proactively as soon as it initializes with Security Configuration Editor, or it may wait until the user actually attempts to expand the attachment node by clicking it. The attachment can display the information received using any UI controls available.</p>
<pre><code>//
// GetData &ndash; we get the configuration information here.
//
m_pSceData-&gt;GetData (sceHandle, SceSvcConfigurationInfo, &amp;pData,
 &amp;enumHandle );
</code></pre>
<p>
NOTE: You must use the <b>FreeBuffer</b> method to free the buffer allocated here by Security Configuration Editor.</p>
<h4><a name="implementingiscesvcattachmentpersistinfo"></a>Implementing ISceSvcAttachmentPersistInfo</h4>
<p>
After initialization, it is important that the attachment implement the <b>ISceSvcAttachmentPersistInfo</b> interface. The Security Configuration Editor queries this interface at various times&mdash;for example, when saving the template and when closing the snap-in&mdash;to allow the attachment to save any modifications that the user may have made to the inspection database or to the associated template.</p>
<pre><code>class CSceSvcAttachmentPersistInfo:
    public ISceSvcAttachmentPersistInfo,
    public CComObjectRoot
{
BEGIN_COM_MAP(CSceSvcAttachmentPersistInfo)
    COM_INTERFACE_ENTRY(ISceSvcAttachmentPersistInfo)
END_COM_MAP()

    friend class CSceSmb;
    friend class CDataObject;
    friend class CComponentDataImpl;

    CSceSvcAttachmentPersistInfo();
    ~CSceSvcAttachmentPersistInfo();

public:

    // ISceSvcAttachmentPersistInfo interface members
    STDMETHOD(IsDirty)();
    STDMETHOD(Save)(SCE_HANDLE *sceHandle, PVOID *ppvData, 
PBOOL pbOverwriteAll );
    STDMETHOD(FreeBuffer)(PVOID pvData);

    ...

private:
    CString m_TemplateName;
    LPSCESVCATTACHMENTDATA m_pSceData;
    SCE_HANDLE m_sceHandle;

    ...

};

//
// Implementing IsDirty()
//
STDMETHODIMP CSceSvcAttachmentPersistInfo::IsDirty()
{
    if ( m_pSnapin == NULL ) {
return S_FALSE;
    }
    //
    // just calling the snapin&rsquo;s main IsDirty.
    //
    return m_pSnapin-&gt;IsDirty();
}

//
// Implementing Save()
//
STDMETHODIMP CSceSvcAttachmentPersistInfo::Save(
              SCE_HANDLE *psceHandle, 
  PVOID *ppvData, 
  PBOOL pbOverwriteAll )
{
    if ( psceHandle == NULL || ppvData == NULL || 
pbOverwriteAll == NULL ) {
        return E_INVALIDARG;
    }

    if ( m_pSnapin != NULL ) {

        m_pSnapin-&gt;SaveDataInBuffer(ppvData, pbOverwriteAll);

        *psceHandle = m_sceHandle;

    }

    return S_OK;
}

//
// Implementing FreeBuffer
//
STDMETHODIMP CSceSvcAttachmentPersistInfo::FreeBuffer(PVOID pvData)
{
    if ( pvData == NULL ) {
        return S_OK;
    }

    PSCESVC_ANALYSIS_INFO pTempInfo=(PSCESVC_ANALYSIS_INFO)pvData;

    if ( pTempInfo-&gt;Lines != NULL ) {

        for ( DWORD i=0; i &lt; pTempInfo-&gt;Count; i++ ) {

            if ( pTempInfo-&gt;Lines[i].Key != NULL )
                LocalFree(pTempInfo-&gt;Lines[i].Key);

            if ( pTempInfo-&gt;Lines[i].Value != NULL )
                LocalFree(pTempInfo-&gt;Lines[i].Value);
        }

        LocalFree( pTempInfo-&gt;Lines);
    }

    LocalFree(pTempInfo);

    return S_OK;
}</code></pre>
</BODY>
</HTML>

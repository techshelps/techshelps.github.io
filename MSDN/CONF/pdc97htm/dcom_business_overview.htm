<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DCOM The Distributed Component Object Model</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="dcomthedistributedcomponentobjectmodel"></a>DCOM The Distributed Component Object Model </h1>
<p>
Windows NT® Server</p>
<p>
<i>Server Operating System</i></p>
<p>
<b><i>A Business Overview</i></b></p>
<p>
White Paper</p>
<h2><a name="abstract"></a>Abstract</h2>
<p>
This paper provides a business overview of DCOM, a technology that enables software components to communicate directly with each other across networks, including the Internet and intranets.</p>
<p>
© 1997 Microsoft Corporation. All rights reserved.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
<p>
This White Paper is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</p>
<p>
ActiveX, BackOffice logo, Microsoft, Visual Basic, Windows, and Windows NT are either registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.</p>
<p>
Other product or company names mentioned herein may be the trademarks of their respective owners.</p>
<p>
Microsoft Corporation · One Microsoft Way · Redmond, WA 98052-6399 · USA</p>
<p>
0497Part no. 098-XXXXX</p>
<h2><a name="introduction"></a>Introduction</h2>
<p>
With the advent of the Java programming language and the growth of the Internet, information technology (IT) managers are again excited at the prospect of using component software technology&mdash;the idea of breaking large, complex software applications into a series of pre-built and easily developed, understood, and changed software modules called components&mdash;to deliver software solutions much more quickly and at a lower cost<b><i>.</i></b></p>
<p>
A component architecture for building software applications will enable the software provider to achieve economies of scale for software deployment by:
<ul>
<li>
<b>Speeding development</b>&mdash;enabling programmers to build solutions faster by assembling software from pre-built parts.<br><br></li>
<li>
<b>Lowering integration costs</b>&mdash;providing a common set of interfaces for software programs from different vendors means less custom work is required to integrate components into complete solutions.<br><br></li>
<li>
<b>Improving deployment flexibility</b>&mdash;making it easier to customize a software solution for different areas of a company by simply changing some of the components in the application.<br><br></li>
<li>
<b>Lowering maintenance costs</b>&mdash;isolating software function into discrete components provides a low-cost, efficient mechanism to upgrade a component without having to retrofit the entire application.<p>
A distributed component architecture applies these benefits across a broader scale of multi-user applications. The distributed Component Object Model (DCOM) has three unique strengths that make it a key technology for achieving these benefits:
</li>
<li>
<b>DCOM is based on the most widely-used component technology today.</b><p>
DCOM is simply "COM with a longer wire"&mdash;a low-level extension of the Component Object Model, the core object technology within Microsoft® ActiveX™. Major development tools vendors&mdash;including Microsoft, Borland, Powersoft/Sybase, Symantec, ORACLE, IBM, and Micro Focus&mdash;already sell software development tools that produce ActiveX components. These tools and the applications they produce automatically support DCOM, providing the broadest possible industry support. Additionally, over 1,000 existing commercial software components that will work with DCOM are already available for use by developers. (The ActiveX Web site can be found at http://www.activex.org.)
</li>
<li>
<b>DCOM is the best networking technology to extend component applications across the Internet.</b><p>
Because it is an ActiveX technology, DCOM works natively with Internet technologies like TCP/IP, Java, and HTTP, enabling business applications to work across the Web. DCOM enables distributed Java today without requiring any communications-specific code or add-ons.
</li>
<li>
<b>DCOM is an open technology that runs on multiple platforms.</b><p>
Microsoft is openly licensing DCOM technology to other software companies to run on all of the major operating systems, including multiple implementations of UNIX-based systems. Software AG has DCOM running on the Solaris-based operating system today. Additionally, Microsoft is handing over DCOM technology with other core ActiveX technologies to The Open Group. The Internet Draft technical publication that contains a publicly available description of the DCOM network protocol can be found at http://www.microsoft.com/oledev/olecom/draft-brown-dcom-v1-spec-00.txt.
<p>
The combination of these three factors&mdash;the largest installed base, native support for Internet protocols, and open support for multiple platforms&mdash;means that businesses can gain the benefits of a modern component application architecture without having to replace investments in existing systems, staff, or infrastructure.
</li>
</ul>
<h2><a name="componentsanddesktopdevelopment"></a>COMPONENTS AND DESKTOP DEVELOPMENT</h2>
<p>
<b>Component-based development is established today as a mainstream business technology on the desktop.</b></p>
<p>
DCOM has its roots in Microsoft's object technology, which has evolved over the last decade from DDE (Dynamic Data Exchange, a form of messaging between Windows programs), OLE (Object Linking and Embedding, putting visual links between programs within an application), COM (the Component Object Model, used as the basis for all object binding), and ActiveX (COM enabled for the Internet). The evolution of this technology has a consistent theme: each iteration reduces the complexity of building large applications while enabling the delivery of successively richer functionality to the user. This can lower application development costs because developers can use pre-built components and programming interfaces&mdash;greatly reducing the integration and test overhead required when integrating the work of multiple developers. </p>
<p>
Applications built from components are easier to debug and add to than large, monolithic applications. As an example, consider the "Year 2,000 Problem" which has many large organizations scrambling to fix their production systems to avoid failure when the date changes to the new millennium. In reality, this is an application design problem, not a date problem. If applications were written with a common date component, the fix would be easy to isolate and inexpensive to repair. </p>
<p>
Most Windows developers understand these benefits and use the ActiveX component architecture. There are over three million professional programmers trained on ActiveX and its technologies&mdash;OLE, COM, and DCOM&mdash;and hundreds of independent software companies shipping pre-built software components. These components can be used by developers working with Microsoft Visual Basic®, PowerBuilder, Micro Focus Visual Object COBOL, and other popular tools. </p>
<p>
The key business benefits of ActiveX on the desktop automatically extend to DCOM:
<ul>
<li>
<b>Language neutral</b>&mdash;developers can build ActiveX components from any language&mdash;ActiveX components built in COBOL can work with components built in Java.<br><br></li>
<li>
<b>Broad tools support</b>&mdash;most major software development tools vendors support ActiveX.<br><br></li>
<li>
<b>Broad industry support</b>&mdash;thousands of pre-built components are available on the market.<br><br></li>
<li>
<b>Accessible technology</b>&mdash;a large pool of professional developers work with ActiveX now.</li>
</ul>
<h2><a name="componentsandthenetwork"></a>COMPONENTS AND THE NETWORK</h2>
<p>
<b>The logical boundary for component applications is no longer on a single computer.</b></p>
<p>
Companies want to apply the benefits of component software, rapid reuse, broad industry support, and availability of thousands of components, across shared applications that operate on multiple computers. These types of applications are referred to as <i>three-tier</i> or <i>n-tier</i> applications, where tiers of application logic, presentation services, business services, and information retrieval and management services, are broken into different components that can communicate directly with each other across a network. To the user, these applications appear as a seamless extension of their existing desktop environment. For the IT manager, they are an opportunity to apply the economics and flexibility of desktop development across a broader set of application problems.</p>
<p>
For example, a business may deploy a new sales management system based on a multitier application design that uses components. The application includes different order entry components, each one designed for a separate sales channel. These components all use a common tax calculation component that runs on a server. As tax laws change, the company has to change only the tax component located on the server, without having to retrofit the order entry components for each of the different sales channels. </p>
<p>
DCOM is an ideal technology for multitier applications because it enables ActiveX components to work across networks, enabling developers to easily build systems that span computer boundaries. Developers add components together without having to worry about network programming, system compatibility, or integration of components built from different languages. This can lower the cost and complexity of building distributed applications from components. DCOM leverages the investments companies have already made in ActiveX by providing the following benefits:
<ul>
<li>
<b>Growth path for desktop developers</b>&mdash;DCOM enables the millions of existing ActiveX programmers to build server components that natively interoperate with the desktop counterparts, thereby broadening their target audience.<br><br></li>
<li>
<b>Common component model for clients and servers</b>&mdash;Companies can deploy the same set of developers for clients and servers, thus lowering training, tools, and support costs.<br><br></li>
<li>
<b>Multiplatform support</b>&mdash;DCOM is designed to run on Windows 95, Windows NT, Macintosh, UNIX, and legacy operating systems, providing companies with the basis for a common application infrastructure across their entire IT environment which can lower integration costs and reduce integration complexity.<br><br></li>
<li>
<b>Based on public, open standards</b>&mdash;DCOM is layered on the Open Group Distributed Computing Environment (DCE) RPC mechanism, a network communications protocol developed and endorsed by IBM, Sun Microsystems, Hewlett-Packard, and Digital Equipment Corporation, a source code implementation of which is available for free from the Open Group. The additional object-related extensions to the DCE RPC required by DCOM are publicly available at http://www.microsoft.com/olecom/title.htm and http://www.microsoft.com/oledev/olecom/draft-brown-dcom-v1-spec-00.txt.</li>
</ul>
<h2><a name="componentsandtheinternet"></a>COMPONENTS AND THE INTERNET</h2>
<p>
<b>Businesses can use component-based applications to project a business presence onto the Web.</b></p>
<p>
The simplicity, ubiquity, and industry momentum of standard Internet protocols such as the HyperText Transfer Protocol (HTTP) make the Internet an ideal technology for linking application components that span computer boundaries. HTTP is easy to program, is inherently cross-platform, and supports an accessible, universal naming service. And much of the excitement around the Java language derives from its potential as a tool to build distributed component applications for the Internet. </p>
<p>
DCOM enables these component applications to operate across the Internet. DCOM is ideally positioned to become a mainstream, Internet technology for business applications:
<ul>
<li>
<b>Transport neutral</b>&mdash;DCOM enables components to communicate with each other over any network transport, both connection-oriented and connectionless, including TCP/IP, UDP/IP, IPX/SPX, AppleTalk, and HTTP.<br><br></li>
<li>
<b>Provides distributed Java today</b>&mdash;Since DCOM is language neutral, Java applets can communicate directly with each other over the Internet (and with any ActiveX component, regardless of authoring language).<br><br></li>
<li>
<b>Evolutionary technology</b>&mdash;In addition to Java support, DCOM enables components written in other languages, including C, COBOL, Basic, and Pascal, to communicate over the Internet, providing a growth path for existing applications to support Web technology.<br><br></li>
<li>
<b>Common components for the browser and Web server</b>&mdash;Since ActiveX components can be embedded into browser-based applications, DCOM enables a rich application infrastructure for distributed Internet applications using the latest browser technology.<br><br></li>
<li>
<b>Security</b>&mdash;DCOM integrates Internet certificate-based security with rich Windows NT-based security, combining the best of both worlds.<br><br></li>
<li>
<b>Standards-based</b>&mdash;Microsoft is working with Internet standards bodies, including the IETF and the W3C, to offer DCOM to the Internet community as an open technology. DCOM is based on the Open Group DCE RPC, an open and widely-deployed communications technology. The DCOM wire protocol extensions have been submitted as an Internet draft and can be downloaded at http://www.microsoft.com/oledev/olecom/draft-brown-dcom-v1-spec-00.txt.</li>
</ul>
<h2><a name="componentsandtheenterprise"></a>COMPONENTS AND THE ENTERPRISE</h2>
<p>
<b>As distributed applications built from simple components and Internet protocols emerge, a new set of enterprise platform services for component applications will be required.</b></p>
<p>
A key goal of any component software architecture is to separate business logic&mdash;how a tax component calculates tax rates&mdash;from execution logic&mdash;whether the tax component runs in a browser or on a multiprocessor server. DCOM extends this separation even further because the same components can communicate with each other across processes in a single computer or between computers over the Internet. </p>
<p>
However, components by themselves do not solve all of the issues of enterprise application complexity. For example, a business wants to rapidly build and deploy a customer order entry application that involves five different areas of functionality: tax calculation, customer credit verification, inventory management, warranty update, and order entry. The application will be built from five separate components and will operate on a Web server. How does the developer handle exceptions? System failures? Network outages? Peaks in performance load? Must these be hand-coded into the application?</p>
<p>
It defeats the two main goals of component-based development&mdash;fast time to market and lower development costs&mdash;if companies are forced to hand-code the mission critical services that are required for online production systems.</p>
<p>
To address enterprise requirements for a distributed component architecture without sacrificing rapid development and cost effectiveness, Microsoft is integrating DCOM into the Active Server. The Active Server is a series of technology services that speed deployment of component-based applications for the Internet and corporate intranets. These services include:
<ul>
<li>
<b>Transactions</b>&mdash;traditional rollback and recovery for component-based applications in the event of system failure.<br><br></li>
<li>
<b>Queuing</b>&mdash;integration of component communication with reliable store-and-forward queues, which enables component applications to operate on networks that are occasionally unavailable.<br><br></li>
<li>
<b>Server scripting</b>&mdash;easy integration of component applications on the server with HTML-based Internet applications.<br><br></li>
<li>
<b>Legacy access</b>&mdash;integration of component applications with legacy production systems, including mainframe systems running CICS and IMS.<p>
The Active Server technologies use publicly obtainable Internet protocols and are currently available.
</li>
</ul>
<h2><a name="dcomavailability"></a>DCOM AVAILABILITY</h2>
<p>
For the latest information on Windows NT Server, check out our World Wide Web site at http://www.microsoft.com/backoffice or the Windows NT Server Forum at the Microsoft Network (GO WORD: MSNTS).
<ul>
<li>
DCOM first shipped with Windows NT Server 4.0 and Windows NT Workstation 4.0. <br><br></li>
<li>
DCOM for Windows 95 is available for download from http://www.microsoft.com/oledev/olemkt/oledcom/dcom95.htm.<br><br></li>
<li>
DCOM for Solaris is available for download from http://www.sheus.com.<br><br></li>
<li>
DCOM for the Macintosh will be available in mid-1997.</li>
</ul>
<p>
Additional implementations of DCOM on other Internet and enterprise platforms will be available in 1997.</p>
</BODY>
</HTML>

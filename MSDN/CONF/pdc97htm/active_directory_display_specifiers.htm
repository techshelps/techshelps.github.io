<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows NT Active Directory Display Specifiers</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1>Windows NT Active Directory Display Specifiers</h1>

<i>Windows NT® Server Server Operating System</i></p>
<p>
White Paper</p>
<p>
<b>Abstract</b></p>
<p>
This White Paper introduces the Microsoft® Windows NT® operating system&rsquo;s Active Directory Display Specifiers. Display Specifiers are objects that hold user-specific interface information and provide a flexible UI mechanism to meet the needs of the various user groups in the distributed network.</p>
<p>
© 1997 Microsoft Corporation. All rights reserved.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
<p>
This White Paper is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</p>
<p>
Microsoft, he BackOffice logo, Windows, and Windows NT are either registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.</p>
<p>
Other product or company names mentioned herein may be the trademarks of their respective owners.</p>
<p>
Microsoft Corporation · One Microsoft Way · Redmond, WA 98052-6399 · USA</p>
<p>
0997 </p>
<h2><a name="introduction"></a>Introduction</h2>
<p>
Administrators and end users need different user interfaces. Many properties and actions have no meaning to end users and yet administrators need access to them. Moreover, in the Microsoft® Windows NT® 5.0 operating system, security and administrative policies prohibit end users from viewing or changing many attributes. Thus, the Windows NT 5.0 Directory will present a different UI to administrators and end users. The administrative UI will be presented through different Microsoft Management Console (MMC) snap-ins&mdash;specifically, the Microsoft Directory Service Manager, Microsoft Site and Replication Manager, and Microsoft Active Directory Schema Manager. </p>
<p>
The end user, however, will see the directory through the Windows® operating system shell. For the user, the Network Neighborhood folder on the Desktop will lead to a folder titled &ldquo;Directory.&rdquo;</p>
<p>
Although their User Interfaces and their experience with the Windows NT 5.0 directory service&mdash;or Active Directory&mdash;will differ, both administrators and users will require that directory service objects be displayed in the user interface. Therefore, a flexible UI mechanism is needed to meet the needs of the various user groups while still meeting the more general UI goals of localization, extensibility, and ease of customer modification. </p>
<h2><a name="uielementspecificationstoredindirectory"></a>UI Element Specification Stored in the Directory</h2>
<p>
User interface information is stored in the directory service (DS). This UI specification is done at the granularity of a DS object class, and DS object classes are defined in that portion of the directory known as the <i>schema</i>. These objects are called s<i>chema class objects</i>. Each schema class object can have UI display specification information associated uniquely with it.</p>
<p>
The Windows NT 5.0 Active Directory will be able to specify various UI elements on a per-class basis. These elements are property pages, context menus, class icons, class object creation wizards, and localized class names. </p>
<p>
The display specification system stores information for property sheets, context menus, class icons, class object creation wizards, and localized class names. The display specification system uses this information to form different user interfaces for administrators and end users&mdash;one set of elements, such as property pages, context menus, and so forth, can be associated with the administrator class, while a different set of elements can be associated with end users. This UI information is stored in an Active Directory object called a <i>Display Specifier </i>. Each <i>Display Specifier </i>object contains attributes describing the various UI elements for the specific user interface to which it pertains.</p>
<h3><a name="propertypages"></a>Property Pages</h3>
<p>
Each property page for a DS object can be either a Component Object Model (COM) object or a HyperText Markup Language (HTML) file. The description of a COM object (its universally unique identifier, or UUID) or an HTML page (its URL) is stored in an attribute on a <i>Display Specifier </i> object. These property page attributes are multiple valued, with each element holding the description for a single URL or COM object. The administrative property pages for a class are stored in the <b>Admin-Property-Pages</b> attribute. The corresponding end user attribute is <b>Shell-Property-Pages</b>.</p>
<h4><a name="compropertypages"></a>COM Property Pages</h4>
<p>
A class UUID registered with the system and activated through the standard COM instance creation methods names a COM property page. The object must implement two shell interfaces: <b>IShellExtInit</b> and <b>IShellPropSheetExt</b>.</p>
<p>
The description of a property page COM object is stored in the <b>Display Specifier </b> attribute as a string with the following format:</p>
<p>
&lt;order-number&gt;,&lt;CLSID&gt;,[optional data]</p>
<p>
in which
<ul>
<li>
The order-number determines the page&rsquo;s position on the sheet. Order-numbers are sorted using a signed comparison so that there is no prescribed starting position and there can be gaps in the sequence.<br><br></li>
<li>
The CLSID, or class identifier, must be a string representation of a UUID enclosed in curly braces.<br><br></li>
<li>
The optional data will be passed to the COM object via the <b>IShellExtInit::Initialize</b> data object.<p>
Each COM object can implement more than one property page. One possible use of the optional data is to name the pages to display. This gives implementers a great deal of flexibility in determining the number of COM objects needed to create their required pages.
</li>
</ul>
<h4><a name="htmlpropertypages"></a>HTML Property Pages</h4>
<p>
Each property page is described by a URL and activated using an HTML browser supplied by the DS UI framework. There will be specific conventions to be followed to allow the page to obtain the name of the object it is representing and to facilitate the page receiving an apply notification so that it can save the user-enter changes. These conventions will be described at a later date.</p>
<p>
The description of a property page HTML object is stored in the  <b>Display Specifier </b> attribute as a string with the following format:</p>
<p>
&lt;order-number&gt;,&lt;URL&gt;,&lt;page-title&gt;</p>
<p>
in which
<ul>
<li>
The order-number determines the page&rsquo;s position on the sheet. Order-numbers are sorted using a signed comparison so that there is no prescribed starting position and there can be gaps in the sequence.<br><br></li>
<li>
The URL can be either file-based or refer to a Web server. A file URL must refer to the well-known, enterprise-wide system volume.<br><br></li>
<li>
The page title will be displayed on the page&rsquo;s property sheet tab.</li>
</ul>
<h3><a name="contextmenus"></a>Context Menus</h3>
<p>
There will be different context menus for administrators and end users. These attributes will be called <b>Admin-Context-Menu </b>and <b>Shell-Context-Menu</b>. In addition, there will be an attribute, <b>Context-Menu</b>, for menu items that are common to both. The menu item design is to be determined.</p>
<h3><a name="classicons"></a>Class Icons</h3>
<p>
The iconic images used to represent a class object can be read from the Display Specifier. Moreover, each class can store multiple icon states. For example, a folder class can have bitmaps for the open, closed, and disabled states. The current implementation allows up to 15 different icon states per class.</p>
<p>
The attribute is named <b>Class-Icon</b> and can be specified in one of two ways. </p>
<p>
&lt;ICO-file-name&gt;</p>
<p>
or</p>
<p>
&lt;DLL-name&gt;,&lt;resource-ID&gt;</p>
<h3><a name="objectcreationwizard"></a>Object Creation Wizard</h3>
<p>
A wizard is a property sheet that uses <b>Previous</b> and <b>Next</b> buttons rather than tabs to navigate between the pages. Thus, a mechanism similar to that used for property sheets can be used to specify the pages of an object creation wizard. The only difference is the need for an additional convention to describe how the new object data is passed from page to page. This convention will be described at a later time.</p>
<h3><a name="localizedclassname"></a>Localized Class Name</h3>
<p>
When a class name is displayed in the UI, the application can fetch the localized version of the name from the Display Specifier. The name of the attribute for this is <b>Localized-Class-Name</b>.</p>
<h2><a name="thethreestorageoptions"></a>The Three Storage Options</h2>
<p>
There are three different options for storing user interface display information in the Active Directory: 
<ul>
<li>
Store all display information on the schema class object.<br><br></li>
<li>
Store only a pointer to auxiliary objects on the schema class object.<br><br></li>
<li>
Shadow the schema by creating auxiliary <b>Display Specifier </b> objects with the same name as the corresponding class object.</li>
</ul>
<p>
Each of these options is discussed more fully in the following paragraphs, while the next section, &ldquo;The Windows NT 5.0 Implementation,&rdquo; describes the phased implementation chosen.</p>
<h3><a name="modifyingschemawithalldata"></a>Modifying the Schema with All Data</h3>
<p>
Sufficient new attributes could be added to the class object class to contain the UI display information. While this is a simple approach, it would require a great deal of schema modification. Moreover, not only would the original schema need extensive modification, but customers would need to modify the schema for all new and changed UI behavior. The schema is the data dictionary of the directory service, and an error in the schema could render the directory unusable.</p>
<h3><a name="modifyingschemawithpointertodisplayspecificationobject"></a>Modifying the Schema with a Pointer to a Display Specification Object</h3>
<p>
The container that holds the schema objects is named <b>Schema</b>. The <b>Schema</b> container is in the <b>Configuration</b> container. With this approach, a new container called <b>Display Specifiers</b> could be added inside of the <b>Configuration</b> container, and inside of this new <b>Display Specifiers</b> container, a container could be added for each locale in the Enterprise. These locale containers could be named using the hex representation of that locale&rsquo;s LCID. Thus the U.S.-English locale&rsquo;s container would be named <b>409</b>. Inside of each locale container would be a collection of objects of the class Display Specifier.</p>
<p>
Each Display Specifier object has attributes containing the UI element specifications. Because some property pages are common to several classes, a Display Specifier object could be created for each common page or set of pages.</p>
<p>
Each class object has an attribute called <b>Display Specification</b>. This is a multi-valued attribute that names zero or more Display Specifier objects.</p>
<h3><a name="shadowingschema"></a>Shadowing the Schema</h3>
<p>
With this approach, a container structure is set up that is identical to that discussed in the earlier section &ldquo;Modifying the Schema with a Pointer to a Display Specification Object.&rdquo; In each locale container, a Display Specifier object with the same name as the corresponding class object would be created. Thus, when you bind to an object of a particular class, you look up the Display Specifier object with the same name as the class in the container for the current locale.</p>
<h2><a name="windowsnt5.0implementation"></a>Windows NT 5.0 Implementation</h2>
<h3><a name="beta1implementation"></a>Beta 1 Implementation</h3>
<p>
Microsoft is using the approach described in the section &ldquo;Modifying the Schema with a Pointer to a Display Specification Object,&rdquo; through Beta 1.</p>
<h3><a name="postbeta1implementation"></a>Post-Beta 1 Implementation</h3>
<p>
Microsoft will be converting to the &ldquo;Shadowing the Schema,&rdquo; option after Beta 1. This approach was chosen for several reasons&mdash;simplicity, performance, and a desire to leave the schema untouched. Simplicity is obvious, as is the fact that there are no schema modification requirements. This approach will provide performance gains because fewer binds are required. With the Beta 1 implementation, for each object you must first bind to its schema class object to read the Display Specification. You then need to bind to and read each Display Specifier listed in the <b>Display Specification</b> attribute. The Post-Beta 1 option only requires one bind to the <b>Display Specifier</b> object for the class.</p>
<p>
Note that while the Beta 1 option had a small efficiency advantage in that common pages would only need to be listed once, the space saved is not enough to outweigh the advantages of the &ldquo;Shadowing the Schema&rdquo; option.</p>
<h3><a name="cachingdisplayinformation"></a>Caching Display Information</h3>
<p>
The display information will be fetched when a new class is encountered and the results saved for displaying other objects of the same class. The cache is per-process and nonpersistent.</p>
<h2><a name="localization"></a>Localization</h2>
<p>
The Active Directory UI applications will first look in a locale container named after the locale identifier for the current user&rsquo;s session. If a folder of that name is not found, the U.S.-English locale will be used.</p>
<p>
COM objects can be localized either by having a separate binary for each language or by having multiple language resources in a single binary. HTML pages must be translated into separate pages for each language. Similarly, the class name will be translated. Different icons can be specified for each locale. Each locale container will hold Display Specifier objects that correspond to that locale.</p>
<h2><a name="customermodifications"></a>Customer Modifications</h2>
<p>
Users of the Active Directory can customize it to suit their unique requirements. The user interface can also be changed to suit their needs.</p>
<h3><a name="creatingnewclassobjects"></a>Creating New Class Objects</h3>
<p>
Specifying a parent class and new attributes creates a new class. A Display Specifier object is created for the class (one for each supported locale). If the parent class already has an acceptable UI, that UI is specified and additional pages and menu items can be added for the new attributes. Otherwise, a completely new UI is created and specified. In either case, a new icon can be used.</p>
<h3><a name="modifyingexistingclasses"></a>Modifying Existing Classes</h3>
<p>
New attributes can be added to an existing class. New UI components (pages, menu items) can be added or the existing UI replaced. It is also possible to design new property pages that expose fewer class attributes; it is also possible to create context menus with fewer actions.</p>
<h2><a name="formoreinformation"></a>For More Information</h2>
<p>
For the latest information on Windows NT Server, check out our World Wide Web site at http://www.microsoft.com/ntserver or the Windows NT Server Forum on the Microsoft Network (GO WORD: MSNTS).</p>
</BODY>
</HTML>

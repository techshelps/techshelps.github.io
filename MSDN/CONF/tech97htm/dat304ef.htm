<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced Web Database Development with Visual Interdev</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>



	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h1>Advanced Web Database Development with Visual Interdev</h1>
<p>
Presented by:&#09;Ken Spencer</p>
<p>
Email: Ken Spencer@32X.com</p>
<h2>Introduction</h2>
<p>
With Microsoft&reg; Visual InterDev™ Web development system database tools and ADO, you can quickly build compelling active Web applications. This session will show you how to use advanced Web-to-database programming techniques, including design-time controls, parameterized SQL queries and stored procedures, and more. You will also learn how to use the Database Designer feature to create and administer SQL Server<font face="Symbol"><span style="font-family:symbol">&#212;</span></font> databases, such as creating new tables, modifying tables and relationships, creating database diagrams, and creating stored procedures.</p>
<p>
Visual InterDev provides a tremendous set of tools and features for building and maintaining Web applications. Users can use these applications to enter, update, and delete data from any ODBC 3.0 database.</p>
<p>
You can quickly create database Web pages with multiple tables, lookups based upon HTML Forms and Select fields, images, and much more. With the features of ADO and the Design-time controls, you can quickly generate the server-side script necessary and build a fully functional application.</p>
<p>
This session will focus on the details for hooking your page to the database and for working with the back-end database. The samples in this session use SQL Server since Visual InterDev supports it with the most features. We will differentiate where SQL Server features are available and standard ODBC 3.0 features apply to other databases.</p>
<h2>Creating Queries with Query Designer</h2>
<p>
The first step in building our database is to understand how to build the database interface. This section will focus on Query Designer and the other features of Visual InterDev that rely on it. For instance, we will see how a Design-time control uses Query Designer to build a parameterized query with hooks into your ASP code.</p>
<p>
You can use the Query Designer in conjunction with Visual InterDev design-time controls, like the Data Range Header Control. However, in a database project you can also use the Query Designer to create standalone queries.</p>
<p>
<b>Adding input sources to the Query Designer</b>
<ol>
<li>
Display the Data View page of the Project Workspace.<br><br></li>
<li>
Open Query Designer with your query.<br><br></li>
<li>
Drag the table or view and drop it on the Query Designer.</li>
</ol>
<p>
As an alternative, drag a diagram from the Database Designer from the Data View page and drop it on the Query Designer. This will insert the tables in the diagram into the Query Designer. Dragging is a fast way to get several tables in the Query Designer when a database diagram containing the tables already exists. (Creating database diagrams, or schemas, is a topic covered later.)</p>
<p>
<b>Creating a simple query</b>
<ol>
<li>
Select the columns to use in the query by dragging them to the Grid pane or clicking the check box next to the column name.<br><br></li>
<li>
Enter any criteria for the query such as filters or expressions.<br><br></li>
<li>
Run the query.</li>
</ol>
<p>
The query results will appear in the Results pane. This data is live and can be modified by simply editing it in the Results pane.</p>
<h3>What is an Expression?</h3>
<ul>
<li>
Expressions are used to build dynamic values.<br><br></li>
<li>
Expressions can be string: <BR>fname + lname<br><br></li>
<li>
Expressions can be numeric:<BR>royalty * 1.01</li>
</ul>
<p>
Expressions can be used to perform various tasks. They are useful for concatenating strings such as two names, a city and state, or performing calculations. Query Designer can be used to enter expressions and build SQL expressions for a database query.</p>
<p>
<b>Using expressions in a query</b>
<ol>
<li>
Open Query Designer and display your query.<br><br></li>
<li>
Enter the expression in the Column location in the Grid pane.<br><br></li>
<li>
Enter the name for the expression in the Alias location in the Grid pane.<br><br></li>
<li>
Preview the query by executing it, if it is a query that returns data.</li>
</ol>
<p>
Expressions can be used in a query to change the way the information retrieved from the database is displayed or used. For instance, a user might retrieve a price field and a tax field from the database and wish to display them as total price. This can be accomplished by adding the two fields together in the query:</p>
<pre><FONT FACE="Courier New" SIZE="2">Price + Tax
</font></pre>
<p>
An alias is set for the alias of the expression to TotalPrice. The alias will be shown as the header for that field in the Results pane.</p>
<p>
A sample expression has been created using the pubs database from SQL Server. Figure 1 shows Query Designer with a query and the Results pane visible.</p>
<p>
<img src="dat304ef_1.gif" border=0></p>
<p>
<b>Figure 1. Query Designer shows a typical query and the Results pane generated from its execution.</b></p>
<p>
Figure 1 shows the query in the Grid pane at the top of the window. The expression was created to calculate an amount called FullRoyaltyAmount according to the formula below:</p>
<pre><FONT FACE="Courier New" SIZE="2">FullRoyaltyAmount = Price * (Royalty *.01)
</font></pre>
<p>
The Alias column was set to FullRoyaltyAmount to create the header shown in the Results pane.</p>
<p>
Text fields can also be combined. This is useful when a query needs to return a concatenated value like a full name that consists of first and last name fields.</p>
<p>
<b>Hiding fields</b>
<ul>
<li>
Uncheck Output for a column in the Grid pane to hide a column.<br><br></li>
<li>
The column can still be used in Where or Order By clauses.</li>
</ul>
<p>
Query Designer can hide a field using the Output field. Remove the check mark from this column and the field will not be displayed in the output. When the output column for a field or expression is unchecked, the field or expression is removed from the Select statement in the SQL pane.</p>
<h3>Using SQL and Query Designer</h3>
<p>
Query Designer allows complex and simple query building. Queries that perform updates to a database, delete rows from a database table, or execute stored procedures in a database can be created. Stored procedures in particular are an extremely powerful tool for many applications. </p>
<p>
<b>Using the SQL pane to build queries</b>
<ul>
<li>
Dynamically generates other panes to work with queries.<br><br></li>
<li>
Dynamically updates the other panes when SQL is entered directly.<br><br></li>
<li>
Useful for creating different types of queries. <br><br></li>
<li>
The only way to enter those queries that are not supported by the other panes.</li>
</ul>
<p>
The SQL pane is useful for creating original queries by the other panes as well as editing the SQL generated for a particular query. </p>
<p>
The SQL pane is also great for entering SQL statements that cannot be created using the Diagram or Grid panes. For example, an Insert Into query can be created and executed in the SQL pane, even though the other panes do not support that type of query. The SQL pane will automatically format the SQL statement as it is entered. </p>
<p>
<b>Executing a stored procedure </b>
<ol>
<li>
Enter the query to execute remote stored procedures in the SQL pane.<BR>For Microsoft SQL Server, the syntax is: <BR>EXECUTE procedure_name<br><br></li>
<li>
Click the Run button on the toolbar.</li>
</ol>
<p>
The Results pane will contain any output from Select statements in the stored procedure. Figure 2 shows the Query Designer after the stored procedure was executed.</p>
<p>
<img src="dat304ef_2.gif" border=0></p>
<p>
<b>Figure 2. Query Designer can be used to execute stored procedures. </b></p>
<h3>Parameter Queries</h3>
<ul>
<li>
Replaceable parameters support user queries.<br><br></li>
<li>
Parameter is prompted at run time.<br><br></li>
<li>
Works in Query Designer for application code.<br><br></li>
<li>
Can equate to server-side variables (like HTML form submissions).</li>
</ul>
<p>
Figure 3 shows an HTML page that we created from a sample in the Active Server Page Roadmap. This form was hooked to an .ASP file named DBTest.asp. </p>
<p>
<img src="dat304ef_3.gif" border=0></p>
<p>
<b>Figure 3. With this sample page, the user can enter the last name of an author to search for in the database.</b></p>
<p>
In Figure 3, the name “Green” is typed into the Last Name text box. When the Submit command button is clicked, the form will post the submit action and call DBTest.asp. DBTest.asp will run, resulting in the page shown in Figure 4.</p>
<p>
<img src="dat304ef_4.gif" border=0></p>
<p>
<b>Figure 4. The text on this page was generated with a simple .ASP file.</b></p>
<p>
Only one line of code was necessary to implement. The following instructions demonstrate how to build the query used in this sample.</p>
<p>
<b>Creating parameter queries</b>
<ol>
<li>
Open the query to add the parameter.<br><br></li>
<li>
Enter the name of the parameter in the Criteria column surrounded by the parameter marker characters: [].<br><br></li>
<li>
Click the mouse in another location on the query to update the query.<br><br></li>
<li>
Save the query.<br><br></li>
<li>
Run the query.</li>
</ol>
<p>
Figure 5 shows the Define Query Parameters dialog. This dialog appears when you run a query with parameters in Query Designer.</p>
<p>
<img src="dat304ef_5.gif" border=0></p>
<p>
<b>Figure 5. The Define Query Parameters dialog provides run-time support within Query Designer for replaceable parameters.</b></p>
<p>
Figure 6 shows the Query Designer after the query has executed. The result of the query shows only the record for the author named “Green,” which matches our query parameter in Figure 5.</p>
<p>
<img src="dat304ef_6.gif" border=0></p>
<p>
<b>Figure 6. The SQL pane shows the format of the query constructed in the Grid pane.</b></p>
<p>
When a query is constructed using Query Designer and a Data Range control (or Data Command Control), the .ASP page will include the following code:</p>
<pre><FONT FACE="Courier New" SIZE="2">If fNeedRecordset Then
 Set pubs = Server.CreateObject(&quot;ADODB.Connection&quot;)
 pubs.ConnectionTimeout = Session(&quot;pubs_ConnectionTimeout&quot;)
 pubs.CommandTimeout = Session(&quot;pubs_CommandTimeout&quot;)
 pubs.Open Session(&quot;pubs_ConnectionString&quot;), __ <BR>&#09;&#09;Session(&quot;pubs_RuntimeUserName&quot;), _ <BR>&#09;&#09;Session(&quot;pubs_RuntimePassword&quot;)
 Set cmdTemp = Server.CreateObject(&quot;ADODB.Command&quot;)
 Set DataRangeHdr1 = Server.CreateObject(&quot;ADODB.Recordset&quot;)
 cmdTemp.CommandText = _ <BR>&#09;&#09;&quot;SELECT au_id, au_lname, au_fname, phone, address,” _
&#09;&#09;&amp; “ city, state, zip, contract FROM authors “ _<BR>&#09;&#09;&amp; “WHERE (au_lname = '&quot; &amp; LastName &amp; &quot;')&quot;
 cmdTemp.CommandType = 1
 Set cmdTemp.ActiveConnection = pubs
 DataRangeHdr1.Open cmdTemp, , 0, 1
End If
</font></pre>
<p>
Notice the line that starts with “cmdTemp.CommandText” midway through the code. This line determines the recordset that will be generated by the SELECT statement. The Design-Time Data Range control has generated the correct syntax for the SELECT statement, including the parameter. </p>
<p>
The parameter “lastname” is concatenated with the WHERE clause to form our complete SELECT statement. The “lastname” parameter is now an ASP script variable named “lastname.” We set the variable equal to our form variable by inserting the following code at the start of the .ASP file called by the form’s POST event:</p>
<pre><FONT FACE="Courier New" SIZE="2">LastName = Request.Form(&quot;LName&quot;)
</font></pre>
<p>
This code sets the script variable “LastName” to the value of the form variable “lname” it retrieves with Request.Form(“Lname”). The Parameter Query is complete.</p>
<p>
For complete working examples of parameterized queries, see the sample applications: StateQuery.asp and OrderList.asp. Both of these examples use Design-time controls and parameterized queries to pull information dynamically from a database.</p>
<h3>Creating Action Queries</h3>
<p>
You can use Query Designer to quickly create action type queries that can update fields in a database, insert values into fields, and delete entire rows.</p>
<p>
<b>Creating an Update query</b>
<ol>
<li>
Add the table to be updated to the Diagram pane.<br><br></li>
<li>
Click the Update Query button on the Query Designer toolbar.<br><br></li>
<li>
Add the columns to be updated to the Grid display.<br><br></li>
<li>
Add the update values.<br><br></li>
<li>
Set the criteria for selecting the rows to update in the Criteria column.<br><br></li>
<li>
Test the query.</li>
</ol>
<p>
Figure 7 shows the Query Designer Grid and SQL panes with a simple Update query.</p>
<p>
<img src="dat304ef_7.gif" border=0></p>
<p>
<b>Figure 7. The SQL pane shows the Update statement that Query Designer generated from the information in the Grid pane.</b></p>
<p>
The sample Update statement in Figure 7 will change the min_lvl field to 78 for each row that it is currently set to 75. We executed this query, and Query Designer displayed the message shown in Figure 8.</p>
<p>
<img src="dat304ef_8.gif" border=0></p>
<p>
<b>Figure 8. The message provides the number of rows updated.</b></p>
<p>
Query Designer can be used to build and to test complex update queries and can be pasted into various applications.</p>
<p>
You can use Query Designer to create a complete Update or Insert query that can be used with your ASP code. Just like a normal parameter query, Query Designer will let you add your parameters for an Update query. Figure 9 shows Query Designer with two parameters: Lname and Fname. These parameters will actually be variables in our ASP code.</p>
<p>
<img src="dat304ef_9.gif" border=0></p>
<p>
<b>Figure 9. The two parameters are used in our ASP code to set the values.</b></p>
<p>
You can see the parameters in the New Value column in Query Designer. The script that is generated by the Design-time control contains the following code for our SQL:</p>
<pre><FONT FACE="Courier New" SIZE="2">cmdTemp.CommandText = &quot;UPDATE authors SET au_lname = '&quot; _<BR>&#09;&amp; lname &amp; &quot;', au_fname = '&quot; &amp; fname &amp; &quot;'&quot;
</font></pre>
<p>
The lname and fname parameters are concatenated into the SQL just like a standard parameter query. All you need to add is the code to set these variables:</p>
<pre><FONT FACE="Courier New" SIZE="2">Lname = “Jones”
Fname = “Smith”
</font></pre>
<p>
Enter these two lines before the Design-time control code is executed, and that’s it. Your query will take care of updating the database.</p>
<p>
<b>Creating an Insert query</b>
<ol>
<li>
Add the table to update to the Diagram pane.<br><br></li>
<li>
Click the Insert Query button on the Query Designer toolbar.<br><br></li>
<li>
Add the columns to insert to the Grid display.<br><br></li>
<li>
Add your new values.<br><br></li>
<li>
Test the query.</li>
</ol>
<p>
Insert queries take the results of the query and insert them into another table. </p>
<p>
Query Designer can be used to quickly create Delete queries in SQL similar to the Update queries previously discussed. A Delete query for a SQL Server or Oracle or similar database will execute much faster than stepping through each row using ADO or some other type of database interface. The same rules that applied to the performance of an Update query apply to Delete queries.</p>
<p>
The last sample (OrderList.asp) in this section uses ASP code, ADO, and HTML to provide the customer with a simple interface. The challenge with this page was to build an interface with a drop-down list of customers. The user could select a customer from the list, and the page would look up the customers’ orders.</p>
<p>
We used a simple Visual Basic<font face="Symbol"><span style="font-family:symbol">&#210;</span></font> Scripting Edition subroutine named GetCustomerList to retrieve the customer names. The names are extracted using ADO and stored in the LookList variable. We have pulled a few short snippets of code from OrderList.asp to demonstrate. The first one shows the subroutine definition:</p>
<pre><FONT FACE="Courier New" SIZE="2">&lt;script language=&quot;VBScript&quot; runat=&quot;Server&quot;&gt;
Dim LookList

Sub GetCustomerList ()

Set DataConn = Server.CreateObject(&quot;ADODB.Connection&quot;)
DataConn.ConnectionTimeout = _<BR>&#09;Session(&quot;DataConn_ConnectionTimeout&quot;)
DataConn.CommandTimeout = Session(&quot;DataConn_CommandTimeout&quot;)
DataConn.Open Session(&quot;DataConn_ConnectionString&quot;), _<BR>&#09;Session(&quot;DataConn_RuntimeUserName&quot;), _<BR>&#09;Session(&quot;DataConn_RuntimePassword&quot;)
Set cmdTemp = Server.CreateObject(&quot;ADODB.Command&quot;)
Set dtaCustomerList = Server.CreateObject(&quot;ADODB.Recordset&quot;)
cmdTemp.CommandText = &quot;SELECT * FROM Customers &quot;
cmdTemp.CommandType = 1
Set cmdTemp.ActiveConnection = DataConn
dtaCustomerList.Open cmdTemp, , 0, 1

Do While Not dtaCustomerList.EOF 
&#09;LookList  = LookList &amp; &quot;&lt;Option&gt;&quot; &amp; _<BR>&#09;   dtaCustomerList(&quot;ContactLastName&quot;)
&#09;dtaCustomerList.MoveNext
Loop
End Sub
</font></pre>
<p>
The Do While loop processes the records in the recordset and places them in the LookList variable. The appropriate HTML &lt;Option&gt; tag is concatenated with the value in the database field to form the complete string. The LookList variable will contain a string of “&lt;Option&gt; name” entries when the subroutine completes.</p>
<p>
The next snippet of code is part of the main logic of the page. This code executes the Select Case statement to determine which part of the page to display. The GetCustomer case displays when the page first displays.</p>
<pre><FONT FACE="Courier New" SIZE="2">Select Case Pagemode
%&gt;
&lt;%Case &quot;GetCustomer&quot;:%&gt;
&lt;form action=&quot;OrderList.asp&quot; method=&quot;POST&quot;&gt;
  &lt;p&gt;Customer Last Name:&lt;select name=&quot;CustomerList&quot; size=&quot;1&quot;&gt;
  &lt;%GetCustomerList%&gt;
  &lt;%=LookList%&gt;
  &lt;/select&gt; &lt;/p&gt;
  &lt;p&gt;&lt;input type=&quot;submit&quot; name=&quot;LookCustomerNow&quot; <BR>   &#09;value=&quot;Lookup&quot;&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;%Case &quot;DisplayCustomer&quot;:%&gt;
&lt;h1&gt;Order Information for:&lt;/h1&gt;
&lt;%
response.write HeaderInfo
%&gt;
</font></pre>
<p>
Notice the two script entries after the start of the &lt;Select&gt; tag. The first entry executes the subroutine: &lt;%GetCustomerList%&gt;. This retrieves the list of customers from the database.</p>
<p>
The next line writes the values in LookList to the HTML stream: &lt;%=LookList%&gt;</p>
<p>
That’s all there is to it! All of the database code to retrieve the customers is located in the subroutine.</p>
<p>
There is more code in the page that is not shown. This code contains a function named LookUpCustomer that retrieves customer information for a specific customer from the database after the user selects a customer from the list. This function returns a valid customer ID field.</p>
<p>
The other code uses a Design-time control (DataRange Header control) to retrieve a specific customer from the database. The query uses the CustomerID we retrieved with LookUpCustomer to pull the appropriate records from the database.</p>
<h2>Introduction to Database Management with Visual InterDev</h2>
<p>
Visual InterDev has a number of database management features. The Data View tab provides a single management point for editing the data in a table, creating stored procedures, and more. Most of the database features (Query Designer, stored procedure editor, editing tables directly, etc.) in Visual InterDev will work with any ODBC 3.0 database.</p>
<p>
When you connect your Web application to a SQL Server 6.5 database, you get some extra features that you can use to not only view, retrieve, and manipulate database records, but also to actually create and manage the database structures themselves. These database management features bring the ease of use of Microsoft Access-like features to the process of setting up and administering the SQL Server 6.5 database right inside the Visual InterDev IDE.</p>
<p>
The Database Designer features are activated from Data View. Visual InterDev can be used to administer SQL Server databases outside the context of a &quot;Web project.&quot; Use the New Project Wizard to set up a separate &quot;database project.&quot; The database project may be added to an existing workspace or managed in its own workspace.</p>
<p>
When working inside a Database project, you can also create stand-alone SQL Queries, stored in .dtq files associated with the project. Thus, even for Web projects, it can be advantageous to create database projects – you can even put a Web project and a database project in a single global workspace for convenience.</p>
<h3>Creating and Modifying Tables</h3>
<p>
If the database is SQL Server 6.5, then you can create and manipulate tables using Data View.</p>
<p>
<b>Creating a new table</b>
<ol>
<li>
Right-click the Tables folder or an existing table.<br><br></li>
<li>
Select New Table from the Shortcut menu.<br><br></li>
<li>
Enter the name for the new table.<br><br></li>
<li>
Click the OK command button to display the Table Designer window (shown in Figure 10).<br><br></li>
<li>
Enter the information for each table column.<br><br></li>
<li>
Save the table definition by clicking the Save button on the toolbar.<p>
<img src="dat304ef_10.gif" border=0></p>
</li>
</ol>
<p>
<b>Figure 10. The Table Designer allows table definitions to be created and edited.</b></p>
<p>
To add columns to the table shown in Figure 10, enter the column name and press the TAB or ENTER key. This will move the cursor to the datatype column where the datatype can be chosen from a drop-down list box. </p>
<p>
Right-clicking an open space in a Database Designer view and choosing the Table command can also create a new table.</p>
<p>
You can also open an existing table in &quot;Design-mode&quot; by right-clicking on the table name and choosing &quot;Design.&quot; This will open the table so that you can change column properties, add columns, keys and indexes, or even rename the table.</p>
<h3>Creating, Modifying, and Executing Stored Procedures </h3>
<p>
The Visual InterDev stored procedure editor will work with any ODBC database supported by Visual InterDev that also supports stored procedures. For instance, Microsoft Access does not support stored procedures and cannot use this feature. Oracle client/server databases support stored procedures and Visual InterDev provides the tools for manipulating them. </p>
<p>
<b>Creating a new stored procedure in Data View </b>
<ol>
<li>
Right-click the Stored Procedure folder.<br><br></li>
<li>
Select New Stored Procedure from the Shortcut menu to display the Visual InterDev Source Editor.<br><br></li>
<li>
Enter the SQL to create the stored procedure.<BR>SQL statements can also be copied into the source editor from the Query Designer.<br><br></li>
<li>
Save the stored procedure by clicking the Save button on the toolbar.</li>
</ol>
<p>
Executing a stored procedure is accomplished by using the Shortcut menu for a stored procedure.</p>
<p>
<b>Executing a stored procedure </b>
<ol>
<li>
Right-click an existing stored procedure.<br><br></li>
<li>
Select the Run command to display the Run Stored Procedure dialog.<br><br></li>
<li>
Enter any parameter values in the Run Stored Procedure dialog.<br><br></li>
<li>
Click the OK command button to execute the stored procedure.</li>
</ol>
<p>
The output of a stored procedure will be displayed in the Output window. A stored procedure can also be executed in Query Designer. </p>
<p>
You can also edit an existing stored procedure from Data View.</p>
<p>
<b>Editing a stored procedure </b>
<ol>
<li>
Right-click an existing stored procedure.<br><br></li>
<li>
Select the Open command to display the Stored Procedure Editor.<br><br></li>
<li>
Modify the stored procedure and save it.</li>
</ol>
<p>
You can open a table and modify its contents directly in Data View.</p>
<p>
<b>Opening a table</b>
<ol>
<li>
Right-click an existing table or the Tables folder.<br><br></li>
<li>
Select Open from the Shortcut menu.<br><br></li>
<li>
Review the data or make changes to the data in the query window.</li>
</ol>
<p>
You can also double-click a table name to open it. </p>
<p>
Changes made to the data in the Results pane are saved when the cursor is moved to another row in the database. These dynamic updates make it essential to use care when changing data in a database.</p>
<p>
A table can also be opened by double-clicking its name in the Data View. When you open a table, Visual InterDev actually starts Query Designer with only the Results pane open. You can use the toolbar to display the other panes and even change the query and save it.</p>
<h3>Introduction to Database Diagrams</h3>
<ul>
<li>
Create a new database table.<br><br></li>
<li>
Modify the structure of a database table.<br><br></li>
<li>
Update the database in a database table in design mode.<br><br></li>
<li>
Create and modify stored procedures.<br><br></li>
<li>
Create new keys.<br><br></li>
<li>
Create named design views of a database.<br><br></li>
<li>
Graphically display and work with various tables from a database.</li>
</ul>
<p>
Figure 11 shows the interface of Visual InterDev with a Database Design open in the Database Designer. Database Diagrams are only available for SQL Server 6.5.</p>
<p>
<img src="dat304ef_11.gif" border=0></p>
<p>
<b>Figure 11. The Database Designer interface for building relational databases.</b></p>
<p>
The Database Designer has an easy-to-use drag and drop interface, plus extensive Shortcut menus for working with database items. Tables can be dragged to new locations in a diagram. The links to other tables will follow a table when it moves. Tables from the Data View can also be dragged to a diagram.</p>
<p>
<b>Adding new diagrams to a project</b>
<ol>
<li>
Display the Data View of the Project Workspace.<br><br></li>
<li>
Right-click the Database Diagrams folder.<br><br></li>
<li>
Choose New Diagram from the Shortcut menu.<br><br></li>
<li>
Expand the Tables folder.<br><br></li>
<li>
Drag and drop the desired tables on the diagram.<br><br></li>
<li>
Click the Save icon on the toolbar to save the layout.</li>
</ol>
<p>
Tables in a diagram are represented by the tables widget. The tables widget can display just the table’s name, the table’s name and column names, the table’s name and column names and column properties, or the table’s name and the names of the keys for the table. The amount of information displayed for each table in a diagram is set by right-clicking a table and selecting the setting from the Shortcut menu or clicking the appropriate button on the Database Designer toolbar. Figure 12 shows the Database Designer view of a simple database.</p>
<p>
<img src="dat304ef_12.gif" border=0></p>
<p>
<b>Figure 12. The Database Designer displays the links between tables.</b></p>
<p>
Figure 12 shows the display variation allowed with the table widget. The Titles table has the columns displayed while the other table widgets just display the table name.</p>
<p>
The Database Diagrams folder in the Data View contains all of the diagrams in a project. A diagram can be opened by double-clicking the diagram name in this folder. </p>
<p>
<b>Adding a table to the database and diagram</b>
<ol>
<li>
Right-click a blank spot in the diagram.<br><br></li>
<li>
Choose New Table from the Shortcut menu.<br><br></li>
<li>
Right-click the Column Properties dialog and choose the Properties command.<br><br></li>
<li>
Enter the table name when prompted.<BR>This will display the table designer form shown in Figure 13.<p>
<img src="dat304ef_13.gif" border=0></p>
</li>
</ol>
<p>
<b>Figure 13. The Table Designer is shown in the Right pane.</b>
<ol>
<li>
Define the columns for the new table under Column Name.<br><br></li>
<li>
Tab to the Data Type field and choose the Data Type for the column.<br><br></li>
<li>
Check or uncheck the Allow Nulls option, depending upon the requirements.<br><br></li>
<li>
Optionally create a primary key by clicking on the Key icon on the Table toolbar while the rows constituting the primary key are selected.<BR>A key symbol will appear in the first column of the Table Designer for each row in the Primary Key.<p>
<img src="dat304ef_14.gif" border=0></p>
</li>
</ol>
<p>
<b>Figure 14. The Table Designer now has two columns defined.</b>
<ol>
<li>
Choose Close from the File menu to save the new table and update the database.<BR>Choose Yes when prompted to save the changes.</li>
</ol>
<p>
Using the Database Designer, any existing table can be easily modified. </p>
<p>
<b>Modifying existing tables</b>
<ol>
<li>
Right-click on the table name in the Data View.<br><br></li>
<li>
Choose Design from the Shortcut menu.<br><br></li>
<li>
Click on the Properties toolbar icon to view the table properties shown in Figure 15.<p>
<img src="dat304ef_15.gif" border=0></p>
</li>
</ol>
<p>
<b>Figure 15. The Properties dialog allows changes to be made to existing tables.</b></p>
<p>
<b>Saving and / or viewing the DDL script</b>
<ol>
<li>
Click on the Save Change Script toolbar icon to review the DDL change script generated.<br><br></li>
<li>
The script can now be viewed and saved as shown in Figure 16.</li>
</ol>
<p>
Ordinarily on a client/server DBMS system such as SQL Server, such changes would require many manual commands written in Data Definition Language (DDL). The Database Designer generates the DDL automatically as the user works, and no changes are committed until the user is set. The user can edit and view the SQL change script to see or change the DDL generated. </p>
<p>
<img src="dat304ef_16.gif" border=0></p>
<p>
<b>Figure 16. The Save Change Script dialog allows the script to be saved to a file.</b></p>
<p>
If the script is saved, it is saved in the current working directory. The name of the file will be DbDgmN.sql, where N begins at 1 and is incremented each time you save the script.</p>
<p>
The Database Designer will maintain relationships between tables even as tables are dropped and recreated based on column data type or other changes. Also, when changing an index or key, the database designer will optionally ripple changes through any related tables that use that field as a foreign key. The Database Designer will not read through existing triggers and change these, however. </p>
<h2>Summary</h2>
<p>
I hope you have enjoyed this presentation. Visual InterDev is a great tool and should be a valuable asset to your organization.</p>
<p>
Ken Spencer<BR>www.32X.com/</p>
<p>
E-mail: Ken Spencer@32X.com</p>
<p>
&copy; 1997 Microsoft Corporation. All rights reserved.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
<p>
This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS SUMMARY.</p>
<p>
Microsoft and Visual Basic are registered trademarks and Visual InterDev is a trademark of Microsoft Corporation.</p>
<p>
Other product or company names mentioned herein may be the trademarks of their respective owners.</p>
</font></BODY>
</HTML>

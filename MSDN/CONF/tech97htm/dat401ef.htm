<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing External Data with Microsoft Access</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>



	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h1>Accessing External Data with Microsoft Access</h1>
<h2>Introduction</h2>
<p>
Microsoft&reg; Access is extremely flexible in its ability to transparently handle data from a variety of sources. External data falls into two categories: indexed sequential access method (ISAM) and Open Database Connectivity (ODBC). The ISAM data sources are the traditionally PC-based databases. These include FoxPro&reg; database management system, Paradox, Microsoft Access, and others. There are two methods of handling the connection to the external data. You can link the tables either by using the user interface or from Microsoft Access Basic. It is also possible to open external databases directly from Microsoft Access Basic.</p>
<p>
When a table from another database is linked, it behaves just like a native, local table. You can create queries, forms, and reports that use the external data, combine the external data with the data in Microsoft Access tables, and even view and edit the external data while others are using it in the original application. It makes sense to use this approach as an alternative to importing if the external data you want to access is also being updated by software other than Microsoft Access. </p>
<p>
Even if all data resides in Microsoft Access format, you might find it advantageous to link to the external data. By splitting the application (forms, reports, queries, temporary tables) from the rest of the data, you can ease the support burden of distributing your application.</p>
<p>
This paper provides general information about accessing external data, and then provides specific instructions for each of the supported external data sources.</p>
<h3>Data Access Choices</h3>
<p>
Microsoft Access Basic provides two choices for accessing external data sources. You can either:
<ul>
<li>
<i>Link </i>the tables to a Microsoft Access database.<p>
-or-</p>
</li>
<li>
Open the tables directly.</li>
</ul>
<p>
When you link a table, the table looks and performs in most respects like a Microsoft Access table. It even has its own icon in the Database window, along with the other tables in the database. Because the connection information is stored with the table definition, you can open the table whenever you want, either by using the <b>OpenRecordset </b>method or by double-clicking the table icon in the Database window.</p>
<p>
When you open a table directly, you specify the connection information by using the <i>connect</i> argument of the <b>OpenDatabase</b> method each time you open the database. Because the connection information in this case is not stored with a table definition, there is no link between the external table and a Microsoft Access database, and an icon for the table will not appear in the Database window. </p>
<p>
In many cases, linking is the faster method for accessing external data, especially when the data is located in an ODBC database. Although your particular situation might require you to open the data directly, it is best to consider linking if possible. If you’re using external data in an ODBC database and you are unable to link the data, keep in mind that performance when using the data will be significantly slower.</p>
<h3>External Data Sources</h3>
<p>
Microsoft Access can use data from any of the following external data sources:
<ul>
<li>
Microsoft FoxPro, versions 2.0, 2.x, and 3.0<br><br></li>
<li>
dBASE III, dBASE IV, and dBASE 5.0<br><br></li>
<li>
Paradox, versions 3.x, 4.x, and 5.x<br><br></li>
<li>
Databases using the Jet database engine (Microsoft Access and Microsoft Visual Basic&reg; programming system)<br><br></li>
<li>
Microsoft Exchange/Outlook_ desktop information manager Folders and Address Books<br><br></li>
<li>
HTML Tables and Lists<br><br></li>
<li>
ODBC databases, including but not limited to Microsoft SQL Server™ client/server database management system, SYBASE SQL Server, and ORACLE Server<p>
<b>Note</b>   Subsequent references in this paper to SQL Server refer to both Microsoft SQL Server (for the Microsoft Windows NT&reg; operating system and for the OS/2&reg; operating system) and SYBASE SQL Server.</p>
</li>
</ul>
<h3>Network Access Requirements</h3>
<p>
To access an external table on a network, you must be able to connect to the network and have access to:
<ul>
<li>
The server and share (if applicable) on which the external database is located. Server and share access is established through network permissions. For information about setting up network permissions, see your network manuals.<br><br></li>
<li>
The external table. Table access permissions are established using security features of the external database. For information about setting up access permissions, see your external database manuals.</li>
</ul>
<p>
More information</p>
<p>
For network access requirements associated with a specific external data source, see the section describing that data source later in this paper.</p>
<h3>Performance Guidelines</h3>
<p>
Although you can use external tables just as you use regular Microsoft Access tables, it’s important to keep in mind that they’re not actually <i>in</i> your Microsoft Access database. As a result, each time you view data in an external table, Microsoft Access has to retrieve records from another file. This can take time, especially if the external table is in an ODBC database. Performance will be optimal if you link tables instead of directly opening them and retrieve and view only the data you need (for example, use restrictive queries to limit results and don’t page up and down unnecessarily).</p>
<p>
More information</p>
<p>
For specific recommendations on the data source that you intend to access, see the section for that data source later in this paper.</p>
<h3>Case Sensitivity</h3>
<p>
Unlike searches on databases that use the Jet database engine, searches on external databases are usually case sensitive. Exceptions are as follows:
<ul>
<li>
For Paradox data, if the CollatingSequence entry under the [Paradox ISAM] heading in the registry entry HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES is set to International, Norwegian-Danish, or Swedish-Finnish.<br><br></li>
<li>
For FoxPro or dBASE data, if the CollatingSequence entry under the Xbase heading in the registry entry HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES is set to International.<br><br></li>
<li>
For ODBC data, if the server is configured to be case insensitive.</li>
</ul>
<p>
In addition, if a search is made across more than one data source type, the case sensitivity depends on the collating sequences of the databases involved.</p>
<p>
More Information</p>
<p>
For information about setting the CollatingSequence entries in the registry, see “Initialization Settings” later in this paper.</p>
<h3>Unsupported Objects and Methods</h3>
<p>
Data access objects and methods intended for use only on databases that use the Jet database engine are not supported on external databases.</p>
<p>
Unsupported objects include:</p>
<p>
Container<BR>Document<BR>QueryDef<BR>Relation</p>
<p>
Unsupported methods include:</p>
<p>
CompactDatabase<BR>CreateDatabase<BR>CreateField (if the table has existing rows)<BR>CreateQueryDef<BR>DeleteQueryDef<BR>ListParameters<BR>ListTables<BR>OpenQueryDef<BR>RepairDatabase<BR>SetDefaultWorkspace</p>
<p>
In addition, the following transaction-processing methods are supported only if the external database supports transactions:</p>
<p>
BeginTrans<BR>CommitTrans<BR>Rollback</p>
<h3>Programming Considerations</h3>
<h4>Seek</h4>
<p>
You cannot use Seek on linked tables, even if the linked tables are Microsoft Access tables. You can, however, get around this by first opening up the other database and then opening a table type recordset. Although this does allow you to use Seek on an external table, this will only work with ISAM databases. If you think your code will ever be connecting to an ODBC data source, do not use Seek in your code.</p>
<p>
A main reason people use Seek is to improve performance. They use it in place of one of the Find methods. An alternative method that is almost as fast as Seek is to create a recordset that returns the set of data that you are interested in, even if it is just a single row. Both of these methods work against linked tables. A parameter query is shown below:</p>
<pre><FONT FACE="Courier New" SIZE="2">Set MyDB = DBEngine.Workspaces(0).Databases(0)
' Open existing QueryDef
Set MyQuery = MyDB.QueryDefs(&quot;ParamQuery&quot;)&#09;

' Set parameters.MyQuery.Parameters(&quot;Order Date&quot;) = 10/11/93&quot; MyQuery.Parameters(&quot;Ship Date&quot;) = &quot;11/4/93&quot;

' Open Recordset.
Set MyRecordset = MyQuery.OpenRecordset()&#09;
</font></pre>
<p>
The other alternative is to create a SQL string on the fly. This is a very flexible and powerful technique. This differs from creating a Pass-through SQL string. With a Pass-through query, you create a SQL string in the syntax of the server it is being sent to. You gain speed, but you lose portability. If you create a Microsoft Access SQL string, the portability remains. It is translated to work against whatever data source you are connecting to. The following code shows how you might create the string. Note the need for the single quotes around the string value. If it was a date, you would need to delimit the date with a # sign.</p>
<pre><FONT FACE="Courier New" SIZE="2">dim strT as string
dim strName as string

'Get the name from the control on the form
strName = Me![LastName]

'Concatenate the parts of the string
strT = &quot;SELECT DISTINCTROW Shipto.* FROM Shipto WHERE &quot;
strT = strT &amp; &quot;((Shipto.LastName='&quot; &amp; strName &amp; &quot;')); &quot;

'Open up the recordset based on the SQL string
Set MyRecordset = MyDB.OpenRecordset(strT)
</font></pre>
<h4>Transactions</h4>
<p>
You have to be careful about your use of transactions when dealing with external sources of data. The first consideration is whether the data source supports transactions at all. Even if it does, you still might not have the same level of support for transactions that Microsoft Access provides. With ODBC, only a single-level support of transactions is provided, that is, no nesting of transactions. If you nest transactions in code, it is really just the outermost Begin, Commit, and Rollback that are sent to the server.</p>
<h3>Planning for Portability</h3>
<p>
With the flexibility and ease of use that Microsoft Access provides for using external data sources, you could easily find your data being migrated from one data source to another. A common scenario is for your database to be upsized. Microsoft Access would still be used to provide the forms, queries, and reports, but the data would be stored in a SQL database. If you plan ahead, you can ease the effort of migrating your data. 
<ul>
<li>
If you have an idea what database is likely to be used as a data source, check the maximum length of table and field names. Microsoft Access allows more characters than most SQL databases.<br><br></li>
<li>
Check on the legality of the characters used in your table and field names. Most SQL databases do not allow spaces in object names. Your forms, reports, and control names can use whatever you like for names. It is just the table and field names that you need to be concerned with. <br><br></li>
<li>
Keep in mind that case sensitivity can be different.<br><br></li>
<li>
Do not use Seek.<br><br></li>
<li>
Be careful when using the counter data type. Most servers do not have a counter data type. For instance, to get the equivalent functionality from SQL Server, you have to use a trigger and provide the code to generate the value.<br><br></li>
<li>
Plan on any tables you use to be in the same database. In Microsoft Access, you might split up your data into different databases. With ODBC, even if the different databases are on the same server, they are considered different sources and will be treated as such. This means you will get heterogeneous joins, which can severely impact the performance of your application.</li>
</ul>
<h3>External Data Access Fundamentals</h3>
<p>
Now that you’re familiar with external data access requirements, you’re ready to learn the fundamental methods. The following sections illustrate these methods using external FoxPro, Paradox, and SQL Server tables as examples. Specific examples for each of the external data sources are provided later in this paper.</p>
<h4>Linking an External Table</h4>
<p>
The procedure for linking an external table using Microsoft Access Basic involves four simple steps.</p>
<p>
To link an external table
<ol>
<li>
Open the Microsoft Access database in which the external table will be linked. You open the database by using the <b>OpenDatabase</b> method of the <b>Workspace</b> object. For example, to open C:\ACCESS\DATA\TEST.MDB, use the following:<pre><FONT FACE="Courier New" SIZE="2">Set CurrentDatabase = DBEngine.Workspaces(0).
OpenDatabase(&quot;C:\ACCESS\DATA\TEST.MDB&quot;)
</font></pre>
</li>
<li>
Create a new <b>TableDef</b> for the linked table. You create a new <b>TableDef</b> by using the <b>CreateTableDef</b> method of the <b>Database </b>object, as shown here.<pre><FONT FACE="Courier New" SIZE="2">Set MyTableDef = CurrentDatabase.CreateTableDef 
(&quot;AttachedFoxPro Table&quot;)
</font></pre>
<p>
<b>Note: </b>Because a <b>TableDef</b> name can be any legal Microsoft Access table name, you can give the table a more descriptive name than is often allowed in the external database application. For example, if you link an external dBASE table named SLSDATA, you can rename the linked table “Sales Data 1993 (from dBASE).”</p>
</li>
<li>
Set connection information for the external database and table. One way to set connection information is to use the Connect and SourceTableName properties of the <b>TableDef</b> object. For example, to connect to the external FoxPro Accounts table on the network share \\FOXPRO\DATA in the directory \AP, use the following:<pre><FONT FACE="Courier New" SIZE="2">MyTableDef.Connect = &quot;FoxPro 2.5;DATABASE=
\\FOXPRO\DATA\AP&quot;
MyTableDef.SourceTableName = &quot;Accounts&quot;
</font></pre>
<p>
It is also possible to set connection information by using the <i>source</i> and <i>connect</i> arguments to the <b>CreateTableDef</b> method. This is illustrated in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">Set MyTableDef = CurrentDatabase.CreateTableDef 
(&quot;AttachedFoxProTable&quot;, 0, &quot;Accounts&quot;, &quot;FoxPro 2.5; 
DATABASE=\\FOXPRO\DATA\AP&quot;)
</font></pre>
<p>
The connection information in both of these examples includes a source database type (FoxPro 2.5) and a database name (\\FOXPRO\DATA\AP). For details about setting connection information, see “Specifying Connection Information” later in this paper.</p>
</li>
<li>
Link the table by appending the new <b>TableDef</b> to the <b>TableDefs</b> collection. You append a new <b>TableDef</b> by using the <b>Append</b> method of the <b>TableDefs</b> collection. For example, to append the <b>TableDef</b> created in step 2, use the following:<pre><FONT FACE="Courier New" SIZE="2">CurrentDatabase.TableDefs.Append MyTableDef
</font></pre>
</li>
</ol>
<p>
After you’ve linked the table using the <b>Append</b> method, you can begin using the linked table as you would any other Microsoft Access table. The link remains active unless you delete the <b>TableDef</b> or move the source table. If you move the source table, you can refresh the link using the <b>RefreshLink</b> method, as described in “Refreshing and Removing Links,” later in this paper.</p>
<p>
The following example shows how steps 1 through 4 above are integrated into a module that attaches an external FoxPro table:</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef

'Open the Microsoft Access database named TEST.MDB
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;C:\ACCESS\DATA\TEST.MDB&quot;)

'Create the TableDef
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached FoxPro Table&quot;)

'Set the connection information
MyTableDef.Connect = &quot;FoxPro 2.5;DATABASE=\\FOXPRO\DATA\AP&quot;
MyTableDef.SourceTableName = &quot;Accounts&quot;

'Append the TableDef to create the link
CurrentDatabase.TableDefs.Append MyTableDef
</font></pre>
<p>
<b>Opening an external table</b></p>
<p>
The procedure for directly opening an unattached external table is similar to the procedure for linking an external table. When linking, you open the Microsoft Access database to which the external table is linked and then create a TableDef for the external table. When opening an external table, you open the external database and then open a recordset for the external table.</p>
<p>
When deciding between linking and opening, remember that linking is typically the faster method for accessing external data, especially when the data is located in an ODBC database.</p>
<p>
To open an external table
<ol>
<li>
Open the external database. You open the external database by using the <b>OpenDatabase</b> method of the <b>Workspace</b> object. For example, to open the external FoxPro database on the network share \\FOXPRO\DATA in the directory \AP, use the following:<pre><FONT FACE="Courier New" SIZE="2">Set CurrentDatabase = DBEngine.Workspaces(0).
OpenDatabase(&quot;\\FOXPRO\DATA\AP&quot;, False, False, <BR>&quot;FoxPro &#09;2.5&quot;)
</font></pre>
<p>
The connection information in this example includes a database name (\\FOXPRO\DATA\AP) and a source database type (FoxPro 2.5). For details about setting connection information, see “Specifying Connection Information,” later in this paper.</p>
</li>
<li>
Open a <b>Recordset</b> for the external table. You open a <b>Recordset</b> for an external table by using the <b>OpenRecordset</b> method of the <b>Database</b> object, and using the external table name as the <i>source</i> argument. For example, to open a <b>Recordset</b> for the external FoxPro Accounts table, use the following:</li>
</ol>
<pre><FONT FACE="Courier New" SIZE="2">Set MySet = Db.OpenRecordset(&quot;Accounts&quot;)
</font></pre>
<p>
The external table name used as the <i>source</i> argument of the <b>OpenRecordset</b> method (in this example, Accounts) is given as a table name, <i>not</i> a filename, so the filename extension is not used. This requirement holds true for all of the external data sources in which tables are stored as individual disk files. Exceptions for FoxPro and dBASE table names are noted in “Accessing FoxPro and dBASE Data” later in this paper.</p>
<p>
Because this example calls the <b>OpenRecordset</b> method without a <i>type</i> argument, a dynaset is created (the default for a <b>Database </b>object). You can also open tables and snapshots on external data by using the DB_OPEN_TABLE and DB_OPEN_SNAPSHOT constants as the <b>OpenRecordset</b> <i>type</i> argument.</p>
<p>
<b>Important</b>   Note, however, that you <i>cannot</i> use DB_OPEN_TABLE with ODBC databases.</p>
<p>
After you’ve opened the<b> Recordset</b>, you can work with the data as you would work with any other <b>Recordset</b>.</p>
<p>
The following example combines steps 1 and 2 into a single module that opens an external FoxPro table, and then opens a <b>Recordset</b> on that table.</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MySet As Recordset

'Open the external FoxPro database named AP
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;\\FOXPRO\DATA\AP&quot;, False, False, &quot;FoxPro 2.5&quot;)

'Open a Recordset on the Accounts table
Set MySet = CurrentDatabase.OpenRecordset(&quot;Accounts&quot;)
</font></pre>
<p>
<b>Specifying connection information</b></p>
<p>
The manner in which you specify connection information depends on whether you’re linking or opening the external data source:
<ul>
<li>
When linking an external data source, you set either the <b>TableDef</b> SourceTableName and Connect properties or the <i>source</i> and <i>connect</i> arguments to the <b>CreateTableDef</b> method.<br><br></li>
<li>
When opening an external data source, you set the <i>dbname</i> and <i>source</i> arguments to the <b>OpenDatabase</b> method.</li>
</ul>
<p>
The SourceTableName property and the <i>source</i> argument to the <b>CreateTableDef</b> method are string expressions for the name of the external table to open. For example, the SourceTableName for an external FoxPro table might be something like:</p>
<pre><FONT FACE="Courier New" SIZE="2">&quot;ACCOUNTS&quot;
</font></pre>
<p>
The <i>dbname</i> argument to the <b>OpenDatabase</b> method is a string expression for the name of the database to open. The format for expressing the <i>dbname</i> argument is described in “Database Names” below.</p>
<p>
The <i>connect</i> argument to the <b>CreateTableDef</b> method, the <i>source</i> argument to the <b>OpenDatabase</b> method, and the Connect property are string expressions for the connection information to use when opening the external data source. Also known as the <i>connect string</i>, the format for expressing this argument is described in “Connect Strings” below.</p>
<p>
More information</p>
<p>
For complete syntax, search Help for “CreateTableDef,” “OpenDatabase,” or “Connect.”</p>
<p>
<b>Database names</b></p>
<p>
For the external ISAM databases such as FoxPro and dBASE, the database name is simply the fully specified path to the directory in which the database files are located. When specifying the database name for a database on a local drive, the format is <i>drive</i><b>:\</b><i>path</i>, as shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">C:\FOXPRO\DATA\AP
</font></pre>
<p>
When specifying the database name for a database on a network drive, you can either:
<ul>
<li>
Indicate a fully qualified network path (if your network redirector supports it) in the format <b>\\</b><i>server</i><b>\</b><i>share</i><b>\</b><i>path.</i> For example:<pre><FONT FACE="Courier New" SIZE="2">\\FOXPRO\DATA\AP
</font></pre>
<p>
-or-</p>
</li>
<li>
Establish a connection to the network drive first, and then specify the path using the network drive letter instead of the server and share name. For example, if you use drive F: to connect to \\FOXPRO\DATA, you would specify the database path for the AP database on that share as follows:</li>
</ul>
<pre><FONT FACE="Courier New" SIZE="2">F:\AP
</font></pre>
<p>
For ODBC databases such as SQL Server, the database name is a zero-length string:</p>
<pre><FONT FACE="Courier New" SIZE="2">       &quot;&quot;
</font></pre>
<p>
<b>Connect strings</b></p>
<p>
The connect string is a string expression that provides information used to open an external data source. With the <b>OpenDatabase</b> method, for example, the connect string sets the type, path, or data source name for an external database.</p>
<dl>
<dt>
The first component of a connect string is a source database type (<i>source</i>), as described in “Source Database Types,” below. The source database type can be followed by other parameters (such as database names and passwords). With the <b>CreateTableDef</b> method, for example, the source database type can be followed by a database name or a password. With ODBC data sources, the source database type can be followed by a database name, a data source name (described in “Data Source Names,” below), or user account information such as user name and password.</dt>
<dd>
<b>Important</b>   When specifying a connect string, use a semicolon to separate components. Do not include any spaces on either side of the semicolon.</dd>
</dl>
<p>
More information</p>
<p>
For additional information about connect strings, search Help for “CreateTableDef,” “OpenDatabase,” or “Connect.”</p>
<p>
<b>Source database types</b></p>
<p>
For the external ISAM databases such as FoxPro and dBASE, the source database type is keyed to an entry in the HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES registry setting, in the folder ISAM Formats. For ODBC databases such as SQL Server, the source database type is always ODBC.</p>
<p>
<b>Valid source database types are:</b></p>
<table>
<tr valign=top>
<td>
dBASE III</td>
<td>
FoxPro 2.0</td>
<td>
Paradox 3.x</td>
</tr>
<tr valign=top>
<td>
dBASE IV</td>
<td>
FoxPro 2.5</td>
<td>
Paradox 4.x</td>
</tr>
<tr valign=top>
<td>
dBASE 5.0</td>
<td>
FoxPro 3.x</td>
<td>
Paradox 5.x</td>
</tr>
<tr valign=top>
<td>
ODBC</td>
<td>
</td>
<td>
 </td>
</tr>
</table><br>
<p>
<b>Data source names</b></p>
<p>
When accessing an ODBC database, you must specify a data source name as part of the connect string using the DSN identifier. Each data source name corresponds to an entry under the HKEY_USERS\DEFAULT\SOFTWARE\ODBC\ODBC.INI. Data source name entries in the ODBC.INI folder define important information about the location and type of the external data source, as well as specific network connection information. You can add data source names to your ODBC.INI folder by using the ODBC option in the Control Panel for the Microsoft Windows&reg; operating system, the ODBC Administrator application (if you’re using Windows 3.0), or the <b>RegisterDatabase</b> method of the <b>DBEngine</b> object. A data source name is not required for external ISAM databases.</p>
<p>
More information</p>
<p>
For details about setting up and using data source names, see “Accessing ODBC Data,” later in this paper.</p>
<p>
<b>Connect string examples</b></p>
<p>
The following examples illustrate how to set connect strings using the <b>CreateTableDef</b> method, the <b>OpenDatabase</b> method, and the Connect property:</p>
<pre><FONT FACE="Courier New" SIZE="2">'Setting the connect string using the OpenDatabase method
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
 (&quot;\\PDOX\DATA\AP&quot;, False, False, &quot;Paradox 3.X&quot;)

'Setting the connect string using the CreateTableDef method
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached SQL Server Table&quot;, 0, &quot;Accounts&quot;, &quot;ODBC; DATABASE=AP;UID=Tim;PWD=whoknows;DSN=SQLSERV&quot;)

'Setting the connect string using the Connect Property
MyTableDef.Connect = &quot;Paradox 3.X;DATABASE=\\PDOX\DATA\AP&quot;
</font></pre>
<p>
<b>Specifying a password</b></p>
<p>
If an external table has been protected with a password, you can access the table by providing a password in the connect string using the PWD identifier, as shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">'Example using CreateTableDef method to connect to Paradox data
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached Paradox Table&quot;, 0, &quot;Accounts&quot;, &quot;Paradox 3.X; DATABASE=\\PDOX\DATA\AP;PWD=ExtPdoxPass&quot;)
</font></pre>
<p>
Important</p>
<p>
With ODBC databases, if you don’t specify a complete connect string as defined by your ODBC driver, you will be prompted for the missing information when you link the external data.</p>
<p>
You can save a password as part of a linked table definition by setting the DB_ATTACHSAVEPWD <b>TableDef</b> attribute, as shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">MyTableDef.Attributes = DB_ATTACHSAVEPWD
</font></pre>
<p>
If you use DB_ATTACHSAVEPWD, Microsoft Access saves whatever login information is entered the first time the linked table is opened. When you subsequently open the linked table, Microsoft Access uses the saved password instead of prompting you for one.</p>
<p>
Important</p>
<p>
If you save the password as part of the table definition, keep in mind that this enables <i>any user of your program</i> to open the external table. If you want to secure the data, you might want to use Jet database engine security. You can disable password storage by using the MSysConf table in your SQL database. For additional information, search Help for “MSysConf.”</p>
<p>
When specifying connection information, there is no mechanism to specify network share passwords. In cases where a password is required, you must establish a connection to the network drive first so that you can specify the password before attempting to access the external data.</p>
<p>
<b>Refreshing and removing links</b></p>
<p>
If you move a table that you previously linked, you’ll need to refresh the link before you can access the table again.</p>
<p>
To refresh a link
<ol>
<li>
Change the path by resetting the database name in the <b>TableDef</b> Connect property. For example, to change the path for a linked FoxPro table so that it points to the directory \\FOXSERV\PUBLIC\AP, use the following:<pre><FONT FACE="Courier New" SIZE="2">CurrentDatabase.Tabledefs![Attached FoxPro Table]. 
Connect = &quot;FoxPro 2.5;DATABASE=\\FOXSERV\PUBLIC\AP&quot;
</font></pre>
</li>
<li>
Use the <b>RefreshLink</b> method of the <b>TableDef</b> object. For example, to refresh the link to the linked table in step 1, use the following:<pre><FONT FACE="Courier New" SIZE="2">CurrentDatabase.Tabledefs![Attached FoxPro Table].
RefreshLink
</font></pre>
</li>
</ol>
<p>
To remove a link</p>
<p>
Use the <b>Delete</b> method of the <b>TableDefs</b> collection. For example, to remove the link to the linked table named “Attached FoxPro Table,” use the following:</p>
<pre><FONT FACE="Courier New" SIZE="2">CurrentDatabase.Tabledefs.Delete &quot;Attached <BR>FoxPro Table&quot;
</font></pre>
<p>
<b>Important</b>   When you delete a linked table, only the link is deleted. The external table itself is unaffected.</p>
<p>
<b>Creating an external table</b></p>
<p>
To create a table in an external database format, use the <b>OpenDatabase</b> and <b>CreateTableDef</b> methods, as described in the following procedure.</p>
<p>
To create an external table
<ol>
<li>
Open the external database by using the <b>OpenDatabase</b> method of the <b>Workspace</b> object. For example, to open the external FoxPro database in the directory C:\DATA, use the following:<pre><FONT FACE="Courier New" SIZE="2">Set CurrentDatabase = 
DBEngine.Workspaces(0).OpenDatabase
(&quot;C:\DATA&quot;, False, False, &quot;FoxPro 2.5&quot;)
</font></pre>
</li>
<li>
Create a <b>TableDef</b> for the new table by using the <b>CreateTableDef</b> method of the <b>Database</b> object. For example, to create a table named FOXTBL, use the following:<pre><FONT FACE="Courier New" SIZE="2">Set MyTableDef = <BR>&#09;&#09;CurrentDatabase.CreateTableDef(&quot;FOXTBL&quot;)
</font></pre>
</li>
<li>
Add fields to the new table by using the <b>CreateField </b>method of the <b>TableDef </b>object and the <b>Append </b>method of the <b>Fields</b> collection. For example, to add a text field named Field1, use the following:<pre><FONT FACE="Courier New" SIZE="2">MyTableDef.Fields.Append <BR>&#09;&#09;MyTableDef.CreateField(&quot;Field1&quot;, DB_TEXT, 15)
</font></pre>
</li>
<li>
Create the external data file by using the <b>Append</b> method of the <b>TableDefs</b> collection. For example, to create the FOXTBL.DB file for the <b>TableDef</b> created in step 2, use the following:</li>
</ol>
<pre><FONT FACE="Courier New" SIZE="2">CurrentDatabase.Tabledefs.Append MyTableDef
</font></pre>
<p>
The following example combines steps 1 through 4 into a single module that creates the FOXTBL.DB file in the C:\DATA directory:</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef

Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase(&quot;C:\DATA&quot;, False, False, &quot;FoxPro 2.5&quot;)
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;FOXTBL&quot;)

MyTableDef.Fields.Append MyTableDef.CreateField(&quot;Field1&quot;, DB_TEXT, 15)
CurrentDatabase.Tabledefs.Append MyTableDef
</font></pre>
<p>
<b>Improving performance</b></p>
<p>
In addition to following standard recommendations for database operations, there are a couple of things you can do when connecting to external data sources that will improve performance. Most important, if you’re connecting to an ODBC data source, be sure to follow the recommendations outlined in “Accessing ODBC Data,” later in this paper.</p>
<p>
In addition, if you’re making only one pass through a snapshot, you’ll notice a significant performance improvement if you use the DB_FORWARDONLY option. Keep in mind, however, that the following methods and the BookMark property will not work when using this option, so you’ll need to use alternatives (for example, the <b>Update</b> method):</p>
<table>
<tr valign=top>
<td>
Clone</td>
<td>
Move (with a negative number only)</td>
</tr>
<tr valign=top>
<td>
FindFirst</td>
<td>
MoveFirst</td>
</tr>
<tr valign=top>
<td>
FindLast</td>
<td>
MovePrevious</td>
</tr>
<tr valign=top>
<td>
FindNext</td>
<td>
OpenRecordset</td>
</tr>
</table><br>
<p>
More information</p>
<p>
For information about using the DB_FORWARDONLY option, search Help for “OpenRecordset.”</p>
<h4>Accessing FoxPro and dBASE Data</h4>
<p>
Using the methods and properties described earlier in this paper, you can either link or directly open .DBF files in FoxPro 2.0, FoxPro 2.<i>x</i>, FoxPro 3.<i>x</i>, dBASE III, dBASE IV, or dBASE 5.0 format. The procedures for accessing the data in .DBF files are similar to the procedures for the other external data sources. Special considerations and examples for using FoxPro and dBASE data are provided in the following sections.</p>
<p>
<b>Connection information</b></p>
<p>
When specifying connection information for FoxPro and dBASE data, use the following:</p>
<table>
<tr valign=top>
<td>
<b>For this</b></td>
<td>
<b>Use this</b></td>
</tr>
<tr valign=top>
<td>
Source database type</td>
<td>
One of the following: FoxPro 2.0, FoxPro 2.<i>x</i>, FoxPro 3.<i>x</i>, dBASE III, dBASE IV, dBASE 5.0</td>
</tr>
<tr valign=top>
<td>
Database name</td>
<td>
The fully specified path to the directory containing the FoxPro or dBASE files you intend to access</td>
</tr>
<tr valign=top>
<td>
Source table name</td>
<td>
The name of the table&#45;the .DBF filename <i>without</i> the extension, or the complete filename <i>with</i> the extension but substituting a pound sign (#) for the dot (.) that precedes the filename extension</td>
</tr>
</table><br>
<p>
<b>Data type conversions</b></p>
<p>
When you import data from a FoxPro or dBASE file, Microsoft Access translates the FoxPro or dBASE data types into the corresponding Microsoft Access data type, as shown in the following table:</p>
<table>
<tr valign=top>
<td>
<b>FoxPro/dBASE data type</b></td>
<td>
<b>Microsoft Access data type</b></td>
</tr>
<tr valign=top>
<td>
Character</td>
<td>
Text</td>
</tr>
<tr valign=top>
<td>
Numeric, Float</td>
<td>
Number (FieldSize property set to Double)</td>
</tr>
<tr valign=top>
<td>
Logical</td>
<td>
Yes/No</td>
</tr>
<tr valign=top>
<td>
Date</td>
<td>
Date/Time</td>
</tr>
<tr valign=top>
<td>
Memo</td>
<td>
Memo</td>
</tr>
<tr valign=top>
<td>
General (FoxPro only)</td>
<td>
OLE Object</td>
</tr>
</table><br>
<p>
<b>Deleted records</b></p>
<p>
In most cases, when working with external data, if you delete a record, the record is deleted from the source table. When working with FoxPro and dBASE tables, however, deleted records are not actually deleted until the table is <i>packed</i> using FoxPro or dBASE commands or utilities. For this reason, the <b>CompactDatabase</b> method of the <b>DBEngine</b> object will not affect linked FoxPro or dBASE databases, and deleted records can appear when a table is closed and reopened again.</p>
<p>
You can tell Microsoft Access not to include deleted records by setting the Deleted parameter in the XBASE folder in the HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES registry key to 01 (the default). If you set the Deleted parameter to Off, all records are included in any <b>Recordset</b> objects you create, even deleted records. For additional information about setting the Deleted parameter, see “Initialization Settings,” later in this paper.</p>
<p>
<b>Indexes</b></p>
<p>
When you link or open a FoxPro or dBASE file, you can also tell Microsoft Access to use one or more FoxPro index (.IDX or .CDX) files or dBASE index (.NDX or .MDX) files to improve performance. Microsoft Access keeps track of the indexes in a special information (.INF) file. When you use Microsoft Access Basic to link or open a FoxPro or dBASE file, you must create the .INF file yourself using a text editor. The name of the .INF file must correspond to the name of the external table. For ease of locating associated indexes, it’s best to put the .INF file in the same directory as the associated table. If, however, the table is on a read-only share, you can specify a different path using the INFPath entry in the XBASE folder in the HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES registry setting.  For additional information, see “Initialization Settings” later in this paper.</p>
<p>
Each entry in the .INF file contains an index number (using the identifiers NDX<i>n</i> for dBASE III and dBASE IV, MDX<i>n</i> for dBASE IV, and CDX<i>n</i> or IDX<i>n</i> for FoxPro), and an index filename (for example, LASTNAME.NDX). A source database type precedes the entries. As an example, the .INF file for a dBASE III table named Authors would be named AUTHORS.INF and might contain the following entries:</p>
<pre><FONT FACE="Courier New" SIZE="2">[dBASE III]
NDX1=AUTHORID.NDX
NDX2=LASTNAME.NDX
NDX3=ZIP.NDX
</font></pre>
<p>
To specify a unique index, add the tag or filename for the unique index to the .INF file using the identifier UIDX<i>n</i>. If the table will be opened only from version 2.0 of the Jet database engine, add the entry under the database type heading, as shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">[dBASE III]
NDX1=AUTHORID.NDX
NDX2=LASTNAME.NDX
NDX3=ZIP.NDX
UIDX1=AUTHORID.NDX
</font></pre>
<p>
If the table will also be opened only from version 1.<i>x</i> of the Jet database engine, add the tag or filename as a new heading, followed by an entry for <i>any</i> of the other indexes defined for the table. This is shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">[dBASE III]
NDX1=AUTHORID.NDX
NDX2=LASTNAME.NDX
NDX3=ZIP.NDX

[UIDX1=AUTHORID.NDX]
NDX3=ZIP.NDX
</font></pre>
<p>
Important</p>
<p>
If you’re opening the data from version 1.<i>x</i> of the Jet database engine, the unique index must be specified using the UIDX<i>n</i> heading, <i>not</i> as a UIDX<i>n</i> entry as shown in the example for version 2.0, or the MSXBSE35.DLL will not let you read the data.</p>
<p>
When you use Microsoft Access to update the data in your .DBF file, Microsoft Access also updates the index files to reflect your changes. If you link or open a .DBF file and associate an index (.IDX, .CDX, .NDX, or .MDX) file, Microsoft Access needs the index file to open the linked table. If you delete or move index files or the .INF file, Microsoft Access will not be able to use the index and will not keep the index up to date. If index files are not current, keep in mind that your query results will be unpredictable. For information about how the Jet database engine locates .INF files, see “Initialization Settings” later in this paper.</p>
<p>
<b>Memo fields</b></p>
<p>
FoxPro and dBASE Memo fields are located in files separate from their associated tables. When linking or opening FoxPro or dBASE tables with associated Memo fields, the Memo files must be located in the same directory as the table files.</p>
<p>
<b>Linking a FoxPro table</b></p>
<p>
The following example shows how to link an external FoxPro version 2.5 table and then display a message box as confirmation. Note that this example uses a pound sign (#) in the SourceTableName property to specify a nonstandard extension (.XYZ).</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef

'Open the Microsoft Access database named TEST.MDB
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;C:\ACCESS\DATA\TEST.MDB&quot;)

'Create the TableDef
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached <BR>FoxPro Table&quot;)

'Set the connection information
MyTableDef.Connect = &quot;FoxPro 2.5;DATABASE=\\FOXPRO\DATA\AP&quot;
MyTableDef.SourceTableName = &quot;Accounts#XYZ&quot;

'Append the TableDef to create the link
CurrentDatabase.TableDefs.Append MyTableDef

'Display a confirmation message
MsgBox &quot;Finished attaching &quot; &amp; MyTableDef.SourceTableName &amp; &quot;.&quot;, 0
</font></pre>
<p>
<b>Opening a FoxPro table</b></p>
<p>
The following example shows how to open an external FoxPro version 2.0 table and then open a <b>Recordset</b> on that table.</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MySet As Recordset

'Open the external FoxPro database named AP
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;\\FOXPRO\DATA\AP&quot;, False, False, &quot;FoxPro 2.0&quot;)

'Open a Recordset on the Accounts table
Set MySet = CurrentDatabase.OpenRecordset(&quot;Accounts&quot;)
</font></pre>
<p>
<b>Linking a dBASE table</b></p>
<p>
The following example shows how to link an external dBASE IV table and then display a message box as confirmation:</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef

'Open the Microsoft Access database named TEST.MDB
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;C:\ACCESS\DATA\TEST.MDB&quot;)

'Create the TableDef
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached dBASE Table&quot;)

'Set the connection information
MyTableDef.Connect = &quot;dBASE IV;DATABASE=\\DBASE\DATA\AP&quot;
MyTableDef.SourceTableName = &quot;Accounts&quot;

'Append the TableDef to create the link
CurrentDatabase.TableDefs.Append MyTableDef

'Display a confirmation message
MsgBox &quot;Finished attaching &quot; &amp; MyTableDef.SourceTableName &amp; &quot;.&quot;, 0
</font></pre>
<p>
<b>Opening a dBASE table</b></p>
<p>
The following example shows how to open an external dBASE III table and then open a <b>Recordset</b> on that table.</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MySet As Recordset

'Open the external FoxPro database named AP
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;\\DBASE\DATA\AP&quot;, False, False, &quot;dBASE III&quot;)

'Open a Recordset on the Accounts table
Set MySet = CurrentDatabase.OpenRecordset(&quot;Accounts&quot;)
</font></pre>
<h4>Accessing Paradox Data</h4>
<p>
Using the methods and properties described earlier in this paper, you can either link or directly open tables from Paradox versions 3.<i>x</i> and 4.<i>x</i>. The procedures to access the data in Paradox files are similar to the procedures for the other external data sources. Special considerations and examples for using Paradox data are provided in the following sections.</p>
<p>
<b>Connection information</b></p>
<p>
When specifying connection information for Paradox data, use the following:</p>
<table>
<tr valign=top>
<td>
<b>For this</b></td>
<td>
<b>Use this</b></td>
</tr>
<tr valign=top>
<td>
Source database type</td>
<td>
One of the following: Paradox 3.<i>x</i>, Paradox 4.<i>x</i>, Paradox 5.0</td>
</tr>
<tr valign=top>
<td>
Database name</td>
<td>
The fully specified path to the directory containing the Paradox files you intend to access</td>
</tr>
<tr valign=top>
<td>
Source table name</td>
<td>
The name of the table (the .DB filename <i>without</i> the extension)</td>
</tr>
</table><br>
<p>
<b>Data type conversions</b></p>
<p>
When you import data from a Paradox file, Microsoft Access translates the Paradox data types into the corresponding Microsoft Access data type, as shown in the following table:</p>
<table>
<tr valign=top>
<td>
<b>Paradox data type</b></td>
<td>
<b>Microsoft Access data type</b></td>
</tr>
<tr valign=top>
<td>
Alphanumeric</td>
<td>
Text</td>
</tr>
<tr valign=top>
<td>
Number</td>
<td>
Number (FieldSize property set to Double)</td>
</tr>
<tr valign=top>
<td>
Short number</td>
<td>
Number (FieldSize property set to Integer)</td>
</tr>
<tr valign=top>
<td>
Currency</td>
<td>
Number (FieldSize property set to Double)</td>
</tr>
<tr valign=top>
<td>
Date</td>
<td>
Date/Time</td>
</tr>
<tr valign=top>
<td>
Memo</td>
<td>
Memo</td>
</tr>
<tr valign=top>
<td>
OLE</td>
<td>
OLE Object (note that the Jet database engine recognizes the object, but will not let you open it)</td>
</tr>
</table><br>
<p>
<b>Note</b>   Graphic, Binary, and Formatted memo types are not supported.</p>
<p>
<b>Indexes and keys</b></p>
<p>
Paradox stores important information about a table’s primary key in an index (.PX) file. If you link or open a Paradox table that has a primary key, Microsoft Access needs the .PX file to open the linked table. If you delete or move this file, you won’t be able to open the external table.</p>
<p>
If you link or open a Paradox table that doesn’t have a primary key, you won’t be able to update data in the table using Microsoft Access, and you won’t be able to open the table in shared mode. If you want to update the table or open the table in shared mode, define a primary key for the table using Paradox commands.</p>
<p>
<b>Network paths</b></p>
<p>
When you link or open a Paradox table that resides on a server and is shared by multiple users, you must set the ParadoxNetPath option in Paradox folder in the HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES registry setting to the path for either the PARADOX.NET file (for Paradox 3.<i>x</i>) or the PDOXUSRS.NET file (for Paradox 4.<i>x</i>). For example, if the PARADOX.NET file is on drive Q: in the WRKGRP directory, set ParadoxNetPath as follows:</p>
<pre><FONT FACE="Courier New" SIZE="2">ParadoxNetPath=Q:\WRKGRP
</font></pre>
<p>
Important</p>
<p>
The ParadoxNetPath, including the drive letter, must be consistent for all users sharing a particular database (directory). For example, if the PARADOX.NET file is in the \WRKGRP directory on drive Q: for one user of the database, it must be in the \WRKGRP directory on drive Q: for all other users of the database.</p>
<p>
For additional information about setting ParadoxNetPath, see “Initialization Settings” later in this paper.</p>
<p>
<b>Passwords</b></p>
<p>
The Jet database engine will not be able to open a password-protected table if it is already opened by a Paradox user. This is because Paradox does not allow the Jet database engine to decrypt the table after a valid password is provided.</p>
<p>
<b>Linking a paradox table</b></p>
<p>
The following example shows how to link an external Paradox version 3.<i>x</i> table and then display a message box as confirmation:</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef

'Open the Microsoft Access database named TEST.MDB
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;C:\ACCESS\DATA\TEST.MDB&quot;)

'Create the TableDef
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached Paradox Table&quot;)

'Set the connection information
MyTableDef.Connect = &quot;Paradox 3.X;DATABASE=\\PDOX\DATA\AP&quot;
MyTableDef.SourceTableName = &quot;Accounts&quot;

'Append the TableDef to create the link
CurrentDatabase.TableDefs.Append MyTableDef

'Display a confirmation message
MsgBox &quot;Finished attaching &quot; &amp; MyTableDef.SourceTableName &amp; &quot;.&quot;, 0
</font></pre>
<p>
<b>Opening a paradox table</b></p>
<p>
The following example shows how to open an external Paradox version 4.<i>x</i> table and then open a <b>Recordset</b> on that table.</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MySet As Recordset

'Open the external Paradox database named AP
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;\\PDOX\DATA\AP&quot;, False, False, &quot;Paradox 4.X&quot;)

'Open a Recordset on the Accounts table
Set MySet = CurrentDatabase.OpenRecordset(&quot;Accounts&quot;)
</font></pre>
<h4>Accessing Microsoft Exchange/Outlook Data</h4>
<p>
Using the methods and properties described earlier in this paper, you can either link or import .pst or .pab files from Microsoft Exchange/Outlook.  The procedures for accessing the data in Microsoft Exchange/Outlook are similar to the procedures for the other external data sources.  Special considerations and examples for using Microsoft Exchange/Outlook data are provided in the following sections.</p>
<p>
<b>Connection information</b></p>
<p>
When specifying connection information for Microsoft Exchange/Outlook data, use the following:</p>
<table>
<tr valign=top>
<td>
For this</td>
<td>
Use this</td>
</tr>
<tr valign=top>
<td>
Source database type</td>
<td>
Microsoft Exchange 4.0</td>
</tr>
<tr valign=top>
<td>
Table name</td>
<td>
The fully specified path to the MAPI folder or address book (MAPILEVEL)</td>
</tr>
<tr valign=top>
<td>
Source table name</td>
<td>
TABLETYPE=0 for Folders and TABLETYPE=1 for Address books</td>
</tr>
<tr valign=top>
<td>
Database name</td>
<td>
DATABASE - where the database specified is the database containing the IISAM created system tables ( usually the current mdb)</td>
</tr>
</table><br>
<p>
<b>Microsoft Exchange/Outlook connection strings</b></p>
<p>
To access messages in a Microsoft Exchange mailbox or public folder, you must use the connection string keyword MAPILEVEL=.  This keyword specifies the path to the Microsoft Exchange mailbox that is the parent of the folder you want to access.  For example, to access the folder named Barbara in the Important folder in the People folder in the mailbox “Mailbox - Dave Jones,” use the following connection string:</p>
<pre><FONT FACE="Courier New" SIZE="2">“Exchange 4.0;MAPILEVEL=Mailbox - Dave Jones|People\Important;”
</font></pre>
<p>
You can then use the OpenRecordset method and specify the folder named “Barbara.”  You can specify any valid mailbox name to the left of the pipe symbol, but the mailbox name must be exactly as it appears in the left pane of the Microsoft Exchange application window.  Any spaces and capitalization in the name must be preserved.</p>
<p>
In most cases, Microsoft Exchange users must supply a profile name and password before gaining access to mailboxes. When you use the Microsoft Exchange ISIAM, you supply the profile name and password with the PROFILE= and PWD= keywords in the connection string.  For example:</p>
<pre><FONT FACE="Courier New" SIZE="2">“Exchange 4.0;MAPILEVEL=Mailbox - Dave Jones|People\Important;PROFILE=DaveJ;PWD=Cisco”
</font></pre>
<p>
<b>Linking Microsoft Exchange/Outlook folders</b></p>
<p>
You can access a folder within a Microsoft Exchange mailbox by creating a link to the folder within a Microsoft Jet database or by opening the folder file directly by using the OpenDatabase method and opening a Recordset on the folder within the mailbox.  When you link a folder, the folder is treated as a table.  The following code links a Microsoft Exchange folder to a Microsoft Jet database so that you can access it as if it were a table.</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef
Dim str As String

Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase (“c:\ACCESS\DATA\TEST.MDB”)

‘Build the connect string’
str = “Exhange 4.0;MAPILEVEL=Mailbox - Dave Jones” _
&#09;&amp; “|People\Important;TABLETYPE=1;” _
&#09;&amp; “DATABASE=c:\ACCESS\DATA\TEST.MDB;” _&#09;
&#09;&amp; “PROFILE=DaveJ;PWD=Cisco;”

‘Create a TableDef Object.
Set MyTableDef = CurrentDatabase.CreateTableDef _
&#09;(“Linked Exchange Folder”)

‘Set Connection Information.
MyTableDef.Connect = str
MyTableDef.SrouceTableName = “Barbara”

‘Append a TableDef Object to create a link.
CurrentDatabase.TableDefs.Append MyTableDef
</font></pre>
<p>
<b>Important</b>   When building the connect string to open a folder in a Microsoft Exchange mailbox, you must supply the path and name of an existing Microsoft Jet database as the first argument.  The Microsoft Exchange IISAM creates system tables in this database to store information about the structure of the Microsoft Exchange folders being accessed.  This includes all the new fields you’ve appended to these folders. It is easiest to use the current database each time you want to access data information about fields you added to the folders will be lost, and you must recreate them.</p>
<p>
<b>Constraints</b></p>
<p>
In Microsoft Exchange, some folders contain only other folders and no messages.  You can’t access this type of folder by using the Microsoft Exchange IISAM.  It is only possible to access folders containing messages.</p>
<p>
You can only access existing messages in a Microsoft Exchange mailbox in read-only mode.  You can’t update information in a Microsoft Exchange mailbox, but you can append new records (messages) to an existing folder.  Additionally, you can’t use the Seek method, because the Microsoft Exchange IISAM doesn’t support indexing.</p>
<p>
You can add new fields to existing folders or to newly created folders in a Microsoft Exchange mailbox, but you can’t delete fields.  You can rename folders, but you can’t rename fields.</p>
<h4>Accessing HTML Table and List Data</h4>
<p>
Using the methods and properties described earlier in this paper, you can either link or import .html files from the intranet/Internet.  The procedures for accessing the data on the intranet/Internet are similar to the procedures for the other external data sources.  Special considerations and examples for using HTML data are provided in the following sections.</p>
<p>
<b>Connection information</b></p>
<p>
When specifying connection information for HTML data, use the following:</p>
<table>
<tr valign=top>
<td>
<b>For this</b></td>
<td>
<b>Use this</b></td>
</tr>
<tr valign=top>
<td>
Source database type</td>
<td>
HTML Import</td>
</tr>
<tr valign=top>
<td>
Database name</td>
<td>
The fully specified path to the .html table to be used</td>
</tr>
<tr valign=top>
<td>
Source table name</td>
<td>
Table named by &lt;Caption&gt;tags if they exist</td>
</tr>
</table><br>
<p>
<b>Working with HTML files</b></p>
<p>
The Hypertext Markup Language (HTML) is a standard for presenting information over the Internet.  HTML files are text files that include the information that users will see, along with tags that specify formatting information about how the information will be presented.  For example, you can specify tags for bold, italic, underline, indentation, and many other types of formatting.  Internet browsers are able to interpret information within HTML files and display them as pages to users.  This is how you can create and view pages on the World Wide Web.</p>
<p>
In addition to supporting text and graphics, HTML also supports tabular information.  Using HTML table data tags (&lt;TD&gt; and &lt;/TD&gt;), you can embed one or more tables within an HTML file. You can use the Microsoft Jet HTML IISAM to open HTML files and access the tabular data in them.</p>
<p>
<b>Linking HTML files</b></p>
<p>
You can access a table within an HTML file by creating a link to the table within a Microsoft Jet database or by opening the HTML file directly by using the OpenDatabase method and opening a Recordset on the table within the file.  To specify the location of the file, you must know the Uniform Resource Locator (URL) address of the HTML file on the Internet.  The following code links an HTML table to a Microsoft Jet database:</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim dbsJet As Database
Dim tdfHTML As TableDef

Set dbsJet = OpenDatabase(“C:\Jet_Samp.mdb”)

‘ Create a TableDef object.
Set tdfHTML = dbsJet.CreateTabledef _ 
&#09;(“Linked HTML Table”)

‘ Set connection information.
TdfHTML.Connect =  _
&#09;“HTML Import;DATABASE=http:”_
&#09;&amp; “//www.usa.myserver.com/files/mypage.html”
tdfHTML.SourceTableName = “Q1SalesData”

‘ Append a TableDef Object to create a link.
DbsJet.TableDefs.Append tdfHTML
</font></pre>
<p>
<b>Table naming conventions</b></p>
<p>
As the previous example shows, you must reference a table inside an HTML file by a name, for example, Q1SalesData.  If a table in an HTML files has a caption, the caption is the table name.  If a table doesn’t have a caption, and it’s the only table in the file, use the title of the HTML document to reference the table.  If more than one table exists in the HTML file, and none of these tables has captions, you can reference them sequentially in code as “Table1,” “Table2,” and so on.  The IISAM interprets these as “the first unnamed table in the file,” “the second unnamed table in the file,” and so on.</p>
<p>
<b>Column names and data types</b></p>
<p>
As the HTML IISAM reads the data in the HTML file, it chooses the data type for a column by interpreting the contents of the cells.  For example, if most of the values in a column are numeric, the HTML IISAM interprets the data as Long or Double, depending on whether most of the numbers are integer or floating point values.  Similarly, if any of the values in a column is text, the HTML IISAM interprets the data as Text (with a field size of 255).</p>
<p>
In columns that contain a combination of data types, the HTML IISAM will convert all of the data to text if any one of the rows contain text data.</p>
<p>
If you don’t want the HTML IISAM to choose data types, you can force columns of data to have specific data types by creating a schema.ini file, which is kept in the same directory as the local HTML file from which data is being imported.  The schema.ini file contains information about each column of data that is imported using the HTML IISAM.</p>
<p>
The format of the schema.ini file is similar to the schema.ini file that is used to import data in text files.  The only difference is that in the schema.ini file for HTML files, the section heading indicate the table name, not the filename.  For example, in the following HTML schema.ini file, the table name is Sales.</p>
<pre><FONT FACE="Courier New" SIZE="2">[Sales]
ColNameHeader=False
Format=FixedLength
MaxScanRows=25
CharacterSet=OEM
Col1=columnname Char Width 24
Col2=columnname2 Date Width 9
Col3=columnname7 Float Width 10
Col4=columnname8 Integer Width 10
</font></pre>
<p>
By default, the HTML IISAM assumes that the first row of the table doesn’t contain field names.  You can override this by using the HDR= keyword in the connection string.  For example, to indicate that the first row of the table contains field names, include “HDR=Yes” in the connection string.</p>
<p>
Although the HTML specification supports a table header tag (&lt;TH&gt;), the HTML IISAM doesn’t assume that this tag indicates a field name.  The HTML IISAM will treat all data within the &lt;TH&gt; and &lt;\TH&gt; tags as normal table data.  The reason for this is that you can embed &lt;TH&gt; tags within the table, not just place them in the first row.</p>
<h4>Accessing External Databases that Use the Jet Database Engine</h4>
<p>
In addition to the other data sources described earlier in this paper, you can also use Microsoft Access Basic to view and edit data in other databases that use the Jet database engine. For example, you might want to use a table from another Microsoft Access database stored on a network. With Microsoft Access, you can link tables from other databases that use the Jet database engine and use them as if they were in the open database. This is particularly useful if you want to store your data in one database, while keeping forms, reports, and other objects in a separate database.</p>
<p>
<b>Connection information</b></p>
<p>
You access data in external databases that use the Jet database engine in the same manner as you would access any other external data. When specifying connection information for external databases that use the Jet database engine, use the following:</p>
<table>
<tr valign=top>
<td>
<b>For this</b></td>
<td>
<b>Use this</b></td>
</tr>
<tr valign=top>
<td>
Source database type</td>
<td>
<i>Not applicable</i></td>
</tr>
<tr valign=top>
<td>
Database name</td>
<td>
The fully specified path to the .MDB file</td>
</tr>
<tr valign=top>
<td>
Source table name</td>
<td>
The name of the table</td>
</tr>
</table><br>
<p>
<b>Linking an external Microsoft Access table</b></p>
<p>
The following example shows how to link an external Microsoft Access table and then display a message box as confirmation. Notice that the connection string begins with just a semicolon, rather than a source database type (which is not applicable when connecting to external databases that use the Jet database engine).</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef

'Open the Microsoft Access database named TEST.MDB
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;C:\ACCESS\DATA\TEST.MDB&quot;)

'Create the TableDef
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached Jet Table&quot;)

'Set the connection information
MyTableDef.Connect = &quot;;DATABASE=\\ACCESS\DATA\AP.MDB&quot;
MyTableDef.SourceTableName = &quot;Accounts&quot;

'Append the TableDef to create the link
CurrentDatabase.TableDefs.Append MyTableDef

'Display a confirmation message
MsgBox &quot;Finished attaching &quot; &amp; MyTableDef.SourceTableName &amp; &quot;.&quot;, 0
</font></pre>
<p>
<b>Opening an external Microsoft Access table</b></p>
<p>
The following example shows how to open an external Microsoft Access table and then open a <b>Recordset</b> on that table.</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MySet As Recordset

'Open the external Microsoft Access database named AP
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;\\ACCESS\DATA\AP.MDB&quot;, False, False, &quot;&quot;)

'Open a Recordset on the Accounts table
Set MySet = CurrentDatabase.OpenRecordset(&quot;Accounts&quot;)
</font></pre>
<h4>Accessing ODBC Data</h4>
<p>
Using the methods and properties described earlier in this paper, you can access data in ODBC databases such as SQL Server. The procedures for accessing the data in ODBC databases are similar to the procedures for the other external data sources. Special considerations and examples for using ODBC data are provided in the following sections.</p>
<p>
<b>Configuration</b></p>
<p>
Before you can access external ODBC data sources using Microsoft Access, you might need to configure the following items on your workstation:
<ul>
<li>
Data source names<br><br></li>
<li>
Drivers and other associated software<br><br></li>
<li>
Time-out values</li>
</ul>
<p>
<b>Data source names</b></p>
<p>
As described earlier in this paper, each ODBC data source is identified by a folder in the HKEY_USERS\DEFAULT\SOFTWARE\ODBC\ODBC.INI registry entry. Each data source name entry in the ODBC.INI folder specifies connection information for the external data source, including network location, drivers, and attributes.</p>
<p>
To add a data source name to your ODBC.INI folder, you can use the ODBC option in the Windows Control Panel, the ODBC Administrator application (if you’re using Windows 3.0), or the <b>RegisterDatabase </b>method of the <b>DBEngine</b> object.</p>
<p>
To add a data source name using the ODBC option
<ol>
<li>
From the File Manager group containing the Control Panel, double-click the Control Panel icon.<br><br></li>
<li>
From the Control Panel window, double-click the ODBC icon.<br><br></li>
<li>
Choose the Add button.<br><br></li>
<li>
Follow the on-screen instructions. If you need help in completing any of the dialog boxes, choose the Help button.</li>
</ol>
<p>
To add a data source name using the RegisterDatabase method</p>
<p>
Use the following syntax:</p>
<p>
<b>DBEngine.RegisterDatabase</b> <i>dsn</i>,<i> driver</i>,<i> silent</i>,<i> attributes</i></p>
<p>
The <b>RegisterDatabase</b> arguments are as follows:</p>
<table>
<tr valign=top>
<td>
<b>Argument</b></td>
<td>
<b>Description</b></td>
</tr>
<tr valign=top>
<td>
<i>dsn</i></td>
<td>
A string indicating the data source name to add (for example, “SQLTEST”). Often, <i>dsn</i> is the name of the server.</td>
</tr>
<tr valign=top>
<td>
<i>Driver</i></td>
<td>
A string indicating the ODBC driver to use (for example, “SQL Server”). Note that the <i>driver</i> argument is the name of the driver, not the name of the DLL file (so you’d use “SQL Server” not “SQLSRVR.DLL”). To use RegisterDatabase to add a data source name using a particular driver, you must have already installed ODBC and the indicated driver.</td>
</tr>
<tr valign=top>
<td>
<i>silent</i></td>
<td>
A Boolean value that is True if you do not want to display the ODBC driver dialog boxes that prompt for driver-specific information, or False if you want to display the ODBC driver dialog boxes. If silent is True, then attributes must contain all the necessary driver-specific information.</td>
</tr>
<tr valign=top>
<td>
<i>attributes</i></td>
<td>
A string indicating the list of keywords to be added to the ODBC.INI file. Each keyword in the list is delimited by a carriage return. If the database is already registered in the ODBC.INI file, the entry is updated. If RegisterDatabase fails, no changes are made to the ODBC.INI file and an error occurs.</td>
</tr>
</table><br>
<p>
Here is an example of how to use the <b>RegisterDatabase</b> method to add a data source name for an SQL Server on the server \\PTLUDLOW:</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim Attribs As String

'Build keywords string.
Attribs = &quot;Description=SQL Server on server PtLudlow&quot; &amp; Chr$(13)
Attribs = Attribs &amp; &quot;OemToAnsi=No&quot; &amp; Chr$(13)
Attribs = Attribs &amp; &quot;Server=PtLudlow&quot; &amp; Chr$(13)
Attribs = Attribs &amp; &quot;Database=NWIND&quot;

'Update ODBC.INI.
DBEngine.RegisterDatabase &quot;PtLudlow&quot;, &quot;SQL Server&quot;, True, Attribs
</font></pre>
<p>
<b>Note</b>   When adding a data source name for a SYBASE SQL Server or a Microsoft SQL Server listening on an alternate pipe, in addition to the Server argument, you must also include the Network and Address arguments in the keyword string. For example:</p>
<pre><FONT FACE="Courier New" SIZE="2">Atrribs= Attribs &amp; Network=DBNMP3 &amp; Chr$(13)
Atrribs= Attribs &amp; Address=\PTLUDLOW\PIPE\ALT\QUERY &amp; Chr$(13)
</font></pre>
<p>
You can confirm that the entry was added by using either the ODBC option in the Windows Control Panel or the ODBC Administrator application (if you’re using Windows 3.0).</p>
<p>
<b>Drivers and other associated software</b></p>
<p>
Microsoft Access uses ODBC drivers when accessing tables in ODBC databases. Before you can connect to an ODBC database, the appropriate drivers and DLLs must be installed.</p>
<dl>
<dt>
You install the appropriate ODBC driver for a database by running the ODBC Setup program. You can also install drivers for SQL Server using the Setup program on the ODBC disk included with Microsoft Access.</dt>
<dd>
<b>Important</b>   The ODBC driver must be Level 1 compliant.<p>
After you install ODBC, you can change ODBC driver information at any time using either the ODBC option in the Windows Control Panel or the ODBC Administrator application (if you’re using Windows 3.0). For additional information, search Help for “ODBC drivers.”</p>
</dd>
</dl>
<p>
More information</p>
<p>
For additional information about driver requirements for SQL Server, see the online Help file DRVSSRVR.HLP, which you can find in the \WINDOWS\SYSTEM directory.</p>
<p>
<b>Time-out values</b></p>
<p>
Microsoft Access provides two time-out properties that you can set to control time-out values for connecting to external ODBC databases and for performing queries that access external ODBC databases:
<ul>
<li>
LoginTimeout<p>
Indicates the number of seconds that Microsoft Access should wait for an external ODBC server to respond to a connection request. This feature is especially useful when the default time-out of 20 seconds is too short. Setting a higher time-out value is essential when using local area networks that rely on modems or long-distance bridges, or in situations where network or server load prevent the server from responding in the allotted time. Setting the time-out to 0 indicates that no time-out is to occur.</p>
<p>
To set a login time-out value, use the <b>DBEngine</b> LoginTimeout property. For example:</p>
<pre><FONT FACE="Courier New" SIZE="2">&#09;&#09;DBEngine.LoginTimeout = 60
</font></pre>
<p>
If you need to use different login time-out values for different databases, you can change the LoginTimeout property between calls to the <b>OpenDatabase</b> method.</p>
</li>
<li>
QueryTimeout or ODBCTimeout<p>
Indicates the number of seconds that Microsoft Access should wait for an external ODBC server to complete a query. After a query times out, the external server is told to stop processing it, and your application will receive an error. At this point, you can resubmit the query or inform the user that the transaction cannot be completed.</p>
<p>
If your ODBC server supports this functionality, you can use this property to find out when queries have been blocked by heavy use or by locking problems on the external server. The default is 60. Setting a value of 0 indicates that no time-out is to occur.</p>
<p>
To set a query time-out value, you use the QueryTimeout property of the <b>Database</b> object or the ODBCTimeout property of the <b>QueryDef</b> object. For example:</p>
<pre><FONT FACE="Courier New" SIZE="2">&#09;&#09;CurrentDatabase.QueryTimeout = 120
</font></pre>
</li>
</ul>
<p>
<b>Connection information</b></p>
<p>
When specifying connection information for ODBC data, use the following:</p>
<table>
<tr valign=top>
<td>
<b>For this</b></td>
<td>
<b>Use this</b></td>
</tr>
<tr valign=top>
<td>
Data source name</td>
<td>
A data source name from the ODBC.INI file</td>
</tr>
<tr valign=top>
<td>
Source database type</td>
<td>
ODBC</td>
</tr>
<tr valign=top>
<td>
Database name</td>
<td>
Zero-length string (&quot;&quot;)</td>
</tr>
<tr valign=top>
<td>
Source table name</td>
<td>
The object identifier for the table</td>
</tr>
</table><br>
<p>
<b>Note</b>   With ODBC, if the connect string is missing any information, when you first attempt to connect to the external data, you’ll receive a prompt for the missing information.</p>
<p>
<b>Data type conversions</b></p>
<p>
For external ODBC data sources, each native data type corresponds to an ODBC data type. Because there isn’t a one-to-one relationship between ODBC data types and Microsoft Access data types (a given data source doesn’t necessarily support all of the data types defined for ODBC), understanding how one data type is converted to another requires an understanding of exactly what each ODBC data type represents. The following table, which defines each ODBC data type and provides a corresponding Microsoft Access data type for each, will help:</p>
<table>
<tr valign=top>
<td>
<b>ODBC data type /<BR>Description data type</b></td>
<td>
<b>Microsoft Access</b></td>
</tr>
<tr valign=top>
<td>
SQL_BIT<BR>Single-bit binary data.</td>
<td>
Yes/No</td>
</tr>
<tr valign=top>
<td>
SQL_TINYINT<BR>Whole number between 0 and 255, inclusive.</td>
<td>
Number (FieldSize set to Integer)</td>
</tr>
<tr valign=top>
<td>
SQL_SMALLINT<BR>Whole number between 215 – 1 (that is, 32,767) and – 215 (that is, – 32768), inclusive</td>
<td>
Number (FieldSize set to Integer)</td>
</tr>
<tr valign=top>
<td>
SQL_INTEGER<BR>Whole number between 231 – 1 (that is, 2,147,483,647) and – 231 (that is, – 2,147,483,648), inclusive.</td>
<td>
Number (FieldSize set to Long Int)</td>
</tr>
<tr valign=top>
<td>
SQL_REAL<BR>Floating point number with 7-digit precision. Range is approximately 3.4E – 38 to 3.4E + 38.</td>
<td>
Number (FieldSize set to Single)</td>
</tr>
<tr valign=top>
<td>
SQL_FLOAT, SQL_DOUBLE<BR>Floating point number with 15-digit precision. Range is approximately 1.7E – 308 to 1.7E + 308.</td>
<td>
Number (FieldSize set to Double)</td>
</tr>
<tr valign=top>
<td>
SQL_TIMESTAMP, SQL_DATE<BR>Date and time data.</td>
<td>
DateTime</td>
</tr>
<tr valign=top>
<td>
SQL_TIME<BR>Time data.</td>
<td>
Text</td>
</tr>
<tr valign=top>
<td>
SQL_CHAR<BR>Character string. <BR>For string length <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> 255, <BR><BR>For length <font face="Symbol"><span style="font-family:symbol">&#62;</span></font> 255,</td>
<td>
<BR>Depends on string length:<BR>Text (Field Size property set to string length)<BR>Memo</td>
</tr>
<tr valign=top>
<td>
SQL_VARCHAR<BR>Variable-length character string with a maximum length of 255.</td>
<td>
<i>Same as SQL_CHAR</i></td>
</tr>
<tr valign=top>
<td>
SQL_BINARY<BR>Fixed-length binary data.<BR>For length <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> 255,<BR>For length <font face="Symbol"><span style="font-family:symbol">&#62;</span></font> 255,</td>
<td>
Depends on length:<BR><BR>Binary<BR>(Field Size property set to length)<BR>OLE Object</td>
</tr>
<tr valign=top>
<td>
SQL_VARBINARY<BR>Variable-length binary data with a maximum length of 255</td>
<td>
<i>Same as SQL_BINARY</i></td>
</tr>
<tr valign=top>
<td>
SQL_LONGVARBINARY<BR>Variable-length binary data with a maximum length that is source-dependent.</td>
<td>
OLE Object</td>
</tr>
<tr valign=top>
<td>
SQL_LONGVARCHAR<BR>Variable-length character data with a maximum length that is source-dependent.</td>
<td>
Memo</td>
</tr>
<tr valign=top>
<td>
SQL_DECIMAL</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
Signed, exact, numeric value with a precision (<i>p</i>) and a scale (<i>s</i>). If <i>s</i> = 0</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
For <i>p</i> <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> 4,</td>
<td>
Number (Field Size set to Integer)</td>
</tr>
<tr valign=top>
<td>
For 5 <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> <i>p</i> <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> 9,</td>
<td>
Number (Field Size set to Long Int)</td>
</tr>
<tr valign=top>
<td>
For 10 <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> <i>p</i> <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> 15,</td>
<td>
Number (Field Size set to Double)</td>
</tr>
<tr valign=top>
<td>
If 0 <font face="Symbol"><span style="font-family:symbol">&#60;</span></font> <i>s</i> <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> 4:</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
For <i>p</i> <font face="Symbol"><span style="font-family:symbol">&#163;</span></font> 15,</td>
<td>
Number (Field Size set to Double)</td>
</tr>
<tr valign=top>
<td>
If <i>s </i><font face="Symbol"><span style="font-family:symbol">&#62;</span></font> 4 or <i>p </i><font face="Symbol"><span style="font-family:symbol">&#62;</span></font> 15</td>
<td>
Text</td>
</tr>
<tr valign=top>
<td>
For SQL Server only:</td>
<td>
</td>
</tr>
<tr valign=top>
<td>
For <i>p</i> = 10 and <i>s</i> = 4,</td>
<td>
Currency</td>
</tr>
<tr valign=top>
<td>
For <i>p</i> = 19 and <i>s</i> = 4,</td>
<td>
Currency</td>
</tr>
<tr valign=top>
<td>
SQL_NUMERIC</td>
<td>
<i>Same as SQL_DECIMAL</i></td>
</tr>
<tr valign=top>
<td>
Signed, exact, numeric value with a precision (<i>p</i>) and a scale (<i>s</i>).</td>
<td>
</td>
</tr>
</table><br>
<p>
<b>Indexes</b></p>
<p>
To edit an external SQL table, the table must have a unique index. If the table does not have a unique index, you must define a unique index for the table from within the SQL database before you link it. You can also connect to external SQL database <i>views</i>. For information about how to make SQL views updatable, search Help for “tables: updating.”</p>
<p>
<b>Limitations</b></p>
<p>
You <i>cannot</i> use the DB_OPEN_TABLE option of the <b>OpenRecordset </b>method to directly open a table in an ODBC database. You can, however, open dynasets and snapshots using the DB_OPEN_DYNASET and DB_OPEN_SNAPSHOT options.</p>
<p>
<b>Pass-through queries</b></p>
<p>
To access server-specific features such as stored procedures, you can use pass-through queries. Pass-through queries are sent directly to the server for processing and are not processed by the Jet database engine. For information about creating pass-through queries, search Help for “pass-through queries.”</p>
<p>
<b>Performance</b></p>
<p>
If you’re connecting to an external table in an ODBC database, you’ll achieve the best results by following these guidelines:
<ul>
<li>
Use linked tables instead of directly opened tables whenever possible.<p>
Linked tables are considerably faster, more powerful, and more efficient than directly opened tables. <i>This recommendation is the most important recommendation in this list.</i></p>
</li>
<li>
Retrieve and view only the data you need.<p>
Use restricted queries to limit the number of records that you fetch and select only the columns you need, so Microsoft Access can transfer less data over the network. Don’t use dynasets if you’re not updating. Use ForwardOnly snapshots if you’re only scrolling forward. Also, don’t page up and down unnecessarily in the data, and avoid jumping to the last record in a large table. The fastest way to add new records to a table is to choose Data Entry from the Records menu.</p>
</li>
<li>
Use a cache.<p>
Assuming that the data most recently retrieved from the server will probably be requested again while the application is running, and that it is faster to fetch a single large chunk of data (many rows) than to fetch many individual rows, caching improves the performance of an application that retrieves data from a remote server. Microsoft Access forms and data sheets automatically use a cache. For additional information about using a cache, search Help for “cache.”</p>
</li>
<li>
Avoid locking records longer than necessary.<p>
Remember that other users may be trying to use an external table at the same time you are.</p>
</li>
<li>
Avoid using queries that cause processing to be done locally.</li>
</ul>
<p>
Don’t use user-defined functions with remote column arguments. Use heterogeneous joins only on indexed columns, and realize if you do that some processing has to be done locally. When accessing external data, the Jet database engine processes data locally only when the operation cannot be performed by the external database. Query operations performed locally include:
<ul>
<li>
WHERE clause restrictions on top of a query with a DISTINCT.<br><br></li>
<li>
WHERE clauses containing operations that can’t be processed remotely, such as user-defined functions that involve remote columns. (Note that, in this case, only the parts of the WHERE clause that cannot be processed remotely will be processed locally.)<br><br></li>
<li>
Joins between tables from different data sources. (It’s important to note, however, that simply having joins between tables from different data sources doesn’t mean that all of the processing occurs locally &#45; if restrictions are sent to the server, only relevant rows will be processed locally.)<br><br></li>
<li>
Joins over aggregation or the DISTINCT clause.<br><br></li>
<li>
Outer joins containing syntax not supported by the ODBC driver.<br><br></li>
<li>
DISTINCT clauses containing operations that can’t be processed remotely.<br><br></li>
<li>
ORDER BY expressions (if the remote data source doesn’t support them).<br><br></li>
<li>
ORDER BY clauses containing operations that can’t be processed remotely.<br><br></li>
<li>
Multiple-level GROUP BY clauses, such as those used in reports with multiple grouping levels.<br><br></li>
<li>
GROUP BY clauses on top of a query with a DISTINCT option.<br><br></li>
<li>
GROUP BY clauses containing operations that can’t be processed remotely.<br><br></li>
<li>
Crosstab queries that have more than one aggregate or that have an ORDER BY clause that matches the GROUP BY clause.<br><br></li>
<li>
TOP N or TOP N PERCENT.</li>
</ul>
<p>
<b>Preconditions for Microsoft SQL Server</b></p>
<p>
Before you can connect to a SQL Server database, the following conditions must be met:
<ul>
<li>
You must have installed catalog-stored procedures using INSTCAT.SQL.<br><br></li>
<li>
You must have the correct ODBC files installed on your system. (The ODBC Setup program should install these correctly.)<br><br></li>
<li>
You must have a valid data source name for the external data source.<br><br></li>
<li>
You must be logged on to the network. For example, if you are using Microsoft LAN Manager, run the command net start workstation, and then log on to the network using a valid password. If you have problems logging on to the network, consult your network administrator.<br><br></li>
<li>
You must have permission to access the server on which SQL Server is running. If you have problems accessing the server, contact your network administrator.<br><br></li>
<li>
You must have enough connections on the SQL Server. The SQL Server can be configured for a limited number of simultaneous connections. Once that limit is reached, no further connections are permitted until a user releases a connection.<br><br></li>
<li>
Your SQL Server administrator can add more connections if needed. Your program strategy should include logic that closes unneeded connections while not being used &#45; in other words, closes Dynasets and Databases when your user is no longer actively using the workstation. (For additional information, see “Initialization Settings” later in this paper.)<br><br></li>
<li>
You must have SELECT permission on SQL Server for the object you’re trying to access. If you have problems accessing a specific object, contact your SQL Server administrator.</li>
</ul>
<p>
<b>More Information</b></p>
<p>
For additional information about accessing SQL Server databases using Microsoft Access, see the online Help file DRVSSRVR.HLP, which you can find in the \WINDOWS\SYSTEM directory. For information about setting up and connecting to an external database, contact your primary support provider for the external database.</p>
<p>
<b>Linking a table on an ODBC data source</b></p>
<p>
The following example shows how to link a Microsoft SQL Server table and then display a message box as confirmation:</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MyTableDef As TableDef

'Open the Microsoft Access database named TEST.MDB
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase
(&quot;C:\ACCESS\DATA\TEST.MDB&quot;)

'Create the TableDef
Set MyTableDef = CurrentDatabase.CreateTableDef(&quot;Attached SQL Server Table&quot;)

'Set the connection information
MyTableDef.Connect = &quot;ODBC;DATABASE=AR;UID=sa;
PWD=nimda;DSN=SQLTEST&quot;
MyTableDef.SourceTableName = &quot;Accounts&quot;

'Append the TableDef to create the link
CurrentDatabase.TableDefs.Append MyTableDef

'Display a confirmation message
MsgBox &quot;Finished attaching &quot; &amp; MyTableDef.SourceTableName &amp; &quot;.&quot;, 0
</font></pre>
<p>
<b>Opening a table on an ODBC data source</b></p>
<p>
The following example, which should be used only if linking the external data is not possible, shows how to directly open a Microsoft SQL Server table and then open a <b>Recordset </b>on that table.</p>
<p>
!!!Warning!!!</p>
<p>
Directly opening ODBC data (as opposed to linking it) is extremely inefficient and seriously degrades performance. Use linked tables if at all possible.</p>
<pre><FONT FACE="Courier New" SIZE="2">Dim CurrentDatabase As Database
Dim MySet As Recordset

'Open the external SQL Server database named AP
'***NOTE THAT PERFORMANCE USING THE DATABASE WILL BE SLOW***
Set CurrentDatabase = DBEngine.Workspaces(0).OpenDatabase(&quot;&quot;, False,False, ODBC;DATABASE=AP;UID=Michaela; PWD=whocares;DSN=SQLSERV&quot;)

'Open a Recordset on the Accounts table
Set MySet = CurrentDatabase.OpenRecordset(&quot;Accounts&quot;)
</font></pre>
<h4>Initialization Settings</h4>
<p>
When you install external database drivers, the Setup program writes associated entries to the registry in several folders off the HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES root.  The [ENGINES] folder is added regardless of which external data source you intend to access. The other headings are added only if you are using the associated drivers.</p>
<p>
Although the Setup program writes intelligent defaults for the registry file entries, your particular environment or preferences might require you to change them. If you find you need to customize your settings, the following examples and tables will be helpful. </p>
<p>
<b>Note</b>   When you change your initialization settings, you must exit and then restart Microsoft Access before the new settings take effect.</p>
<p>
<b>[ENGINES]</b></p>
<p>
The [ENGINES] registry folder includes initialization settings for the Jet database engine. Typical settings for the entries in this folder are shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">PageTimeout&#09;&#09;&#09;5
LockedPageTimeout&#09;5
LockRetry&#09;&#09;&#09;20
CommitLockRetry&#09;&#09;20
MaxBufferSize&#09;&#09;512
ReadAheadPages&#09;&#09;16
</font></pre>
<p>
Microsoft Access uses the entries as follows:</p>
<table>
<tr valign=top>
<td>
<b>Entry</b></td>
<td>
<b>Description</b></td>
</tr>
<tr valign=top>
<td>
PageTimeout</td>
<td>
The length of time between when data that is <i>not</i> read-locked is placed in an internal cache and when it is invalidated, expressed in 100-millisecond units. The default is 5 (500 milliseconds or .5 seconds).</td>
</tr>
<tr valign=top>
<td>
LockedPageTimeout</td>
<td>
The length of time between when data that is read-locked is placed in an internal cache and when it is invalidated, expressed in 100-millisecond units. The default is 5 (500 milliseconds or .5 seconds).</td>
</tr>
<tr valign=top>
<td>
LockRetry</td>
<td>
The number of times to repeat attempts to access a locked page. The default is 20. (Note that LockRetry is related to CommitLockRetry, described below.)</td>
</tr>
<tr valign=top>
<td>
CommitLockRetry</td>
<td>
The number of times the Jet database engine attempts to get a lock on data to commit changes to that data. If it fails to get a commit lock, then updates to the data will be unsuccessful. <p>
The number of attempts the Jet database engine makes to get a commit lock is directly related to the LockRetry entry. For each attempt made at getting a commit lock, it will try LockRetry that many times to get a lock. For example, if CommitLockRetry is 20 and LockRetry is 20, the Jet database engine will attempt to get a commit lock as many as 20 times.  For each of those times, it can try to get a lock as many as 20 times, for a total of 400 attempts at locking. The CommitLockRetry default is 20.</p>
</td>
</tr>
<tr valign=top>
<td>
MaxBufferSize</td>
<td>
The size of the Jet database engine internal cache, measured in kilobytes (K). MaxBufferSize must be between 18 and 4096, inclusive. The default is 512.</td>
</tr>
<tr valign=top>
<td>
ReadAheadPages</td>
<td>
The number of pages to read ahead when doing sequential scans. The default is 16.</td>
</tr>
</table><br>
<p>
<b>ENGINES</b></p>
<p>
Under the ENGINES heading are folders for each IISAM.  Each entry includes driver paths for all of the external ISAM databases. Typical settings for these entries are shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">Paradox  C:\WINDOWS\SYSTEM\MSPDOX35.DLL
Xbase    C:\&#09;WINDOWS\SYSTEM\MSXBSE35.DLL
  (With Xbase including Dbase and FoxPro)
</font></pre>
<p>
Each entry under the ENGINES heading indicates the path to an external ISAM database driver. If the entry is incorrect, or if the path for a specific driver is incorrect, you’ll receive the message “Cannot find installable ISAM.”</p>
<p>
<b>Xbase</b></p>
<p>
The Xbase folder includes initialization settings for the MSXBSE35.DLL driver, used for external access to FoxPro and dBASE. Typical settings for the entries under this heading are shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">NetworkAccess     01
PageTimeout       0x00000258 (600)
INFPath&#09;&#09;  &#09;  C:\DBASE\SYSTEM
CollatingSequence Ascii
Deleted           01
Century           00
Date              MDY
Mark              0x00000000 (0)
Exact             00
SupportsLongNames 00
</font></pre>
<p>
Microsoft Access uses the Xbase entries as follows:</p>
<table>
<tr valign=top>
<td>
<b>Entry</b></td>
<td>
<b>Description</b></td>
</tr>
<tr valign=top>
<td>
NetworkAccess</td>
<td>
An On or Off indicator for file-locking preference. If NetworkAcccess is Off, tables are opened for exclusive access, regardless of the settings of the OpenDatabase and OpenRecordset <i>exclusive</i> options. The default is On.</td>
</tr>
<tr valign=top>
<td>
PageTimeout</td>
<td>
The length of time between when data is placed in an internal cache and when it is invalidated. The value is specified in 100-millisecond units. The default is 600 (60 seconds).</td>
</tr>
<tr valign=top>
<td>
INFPath</td>
<td>
The full path to the .INF file directory. The Jet database engine first looks for an .INF file in the directory containing the table. If the .INF file is not in the database directory, it looks in the INFPath. If there is no INFPath, it uses whatever index files (.CDX or .MDX) it finds in the database directory. This entry is not written by default.</td>
</tr>
<tr valign=top>
<td>
CollatingSequence</td>
<td>
The collating sequence for all dBASE tables created or opened using Microsoft Access. Possible values are ASCII and International. The default is ASCII.</td>
</tr>
<tr valign=top>
<td>
Deleted</td>
<td>
An On or Off indicator that determines how records marked for deletion are handled by the Jet database engine. On is equivalent to the dBASE command SET DELETED ON and indicates never to retrieve or position on a deleted record. Off is equivalent to the dBASE command SET DELETED OFF and indicates to treat a deleted record like any other record. The default is Off.</td>
</tr>
<tr valign=top>
<td>
Century</td>
<td>
An On or Off indicator for formatting the century component of dates in cases where date-to-string functions are used in index expressions. On is equivalent to the dBASE command SET CENTURY ON, and Off is equivalent to the dBASE command SET CENTURY OFF. The default is Off.</td>
</tr>
<tr valign=top>
<td>
Date</td>
<td>
The date formatting style to use in cases where date-to-string functions are used in index expressions. The possible settings for this entry, which corresponds to the dBASE SET DATE command, are American, ANSI, British, French, DMY, German, Italian, Japan, MDY, USA, and YMD. The default is American.</td>
</tr>
<tr valign=top>
<td>
Mark</td>
<td>
The decimal value of the ASCII character to use as a mark character for delimiting date parts. The default depends on the Date setting as follows:<BR>“/” (American, MDY)<BR> “.” (ANSI)<BR> “/” (British, French, DMY)<BR> “.” (German) <BR> “-” (Italian)<BR> “/” (Japan, YMD)<BR> “-” (USA)</td>
</tr>
<tr valign=top>
<td>
Exact</td>
<td>
An On or Off indicator for date comparisons. On is equivalent to the dBASE command SET EXACT ON. Off is equivalent to the dBASE command SET EXACT OFF. The default is Off.</td>
</tr>
<tr valign=top>
<td>
SupportsLongNames</td>
<td>
An On or Off indicator for support of long filenames.  The default is off for this IISAM.</td>
</tr>
</table><br>
<p>
<b> Paradox</b></p>
<p>
The Paradox folder includes initialization settings for the MSPDOX35.DLL driver, used for external access to Paradox. Typical settings for the entries under this heading are shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">PageTimeout&#09;&#09;&#09;600
ParadoxUserName&#09; &#09;
ParadoxNetPath
ParadoxNetStyle&#09;&#09;4.X
CollatingSequence&#09;Ascii
SupportsLongNames&#09;00
</font></pre>
<p>
Microsoft Access uses the Paradox entries as follows:</p>
<table>
<tr valign=top>
<td>
<b>Entry</b></td>
<td>
<b>Description</b></td>
</tr>
<tr valign=top>
<td>
PageTimeout</td>
<td>
The length of time between when data is placed in an internal cache and when it is invalidated. The value is specified in 100-millisecond units. The default is 600 (60 seconds).</td>
</tr>
<tr valign=top>
<td>
ParadoxUserName</td>
<td>
The name to be displayed by Paradox if a table is locked by the Paradox ISAM and an interactive user attempts to place an incompatible lock. This entry is not added if the computer is not on a network. The Setup program sets this to the Microsoft Access user name. <i>If you indicate a ParadoxUserName, you must also specify a ParadoxNetPath and a ParadoxNetStyle or you’ll receive an error when trying to access external Paradox data. Not a default registry entry.</i></td>
</tr>
<tr valign=top>
<td>
ParadoxNetPath</td>
<td>
The full path to the directory containing the PARADOX.NET file (for Paradox 3.<i>x</i>) or the PDOXUSRS.NET file (for Paradox 4.<i>x</i>). This entry is not added if the computer is not on a network. Usually, you need to change the initial setting (added by the Setup program), which is a best guess at where the file might be. The full ParadoxNetPath (including the drive letter) must be consistent for all users sharing a particular database (directory). <i>If you indicate a ParadoxNetPath, you must also specify a ParadoxUserName and a ParadoxNetStyle or you’ll receive an error when trying to access external Paradox data. Not a default registry entry.</i></td>
</tr>
<tr valign=top>
<td>
ParadoxNetStyle</td>
<td>
The network access style to use when accessing Paradox data. Possible values are 3.<i>x</i> and 4.<i>x.</i><BR>(Note that Paradox 3.<i>x</i> users cannot set this to 4.<i>x</i> or the driver will use the wrong locking method.)<BR>This entry is not added if the computer is not on a network. This entry should correspond to whatever version of Paradox the users in the group are using. It must be consistent for all users sharing a particular database (directory). The default is 3.<i>x</i>. <i>If you indicate a ParadoxNetStyle, you must also specify a ParadoxUserName and a ParadoxNetPath or you’ll receive an error when trying to access external Paradox data.</i></td>
</tr>
<tr valign=top>
<td>
CollatingSequence</td>
<td>
The collating sequence for all Paradox tables created or opened using Microsoft Access. Possible values are ASCII, International, Norwegian-Danish, and Swedish-Finnish. The default is ASCII. <i>Note that the CollatingSequence entry must match the collating sequence used when the Paradox data was built.</i></td>
</tr>
<tr valign=top>
<td>
SupportsLongNames</td>
<td>
On or Off switch indicating support of long filenames.  Default setting is Off for this IISAM.</td>
</tr>
</table><br>
<p>
<b>Microsoft Exchange</b></p>
<p>
The Microsoft Exchange folder includes initialization settings for the MSEXCH35.DLL driver, used for external access to Microsoft Exchange Folders and Address Books. Typical settings for the entries under this heading are shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">SupportsLongNames&#09;00
</font></pre>
<p>
Microsoft Access uses the Microsoft Exchange entries as follows:</p>
<table>
<tr valign=top>
<td>
<b>Entry</b></td>
<td>
<b>Description</b></td>
</tr>
<tr valign=top>
<td>
SupportsLongNames</td>
<td>
On or Off switch indicating support of long filenames.  Default setting is Off for this IISAM.</td>
</tr>
</table><br>
<p>
<b>HTML</b></p>
<p>
The TEXT folder includes initialization setting for the MSTEXT35.dll driver used for external access to HTML tables and lists.  Typical settings for the entries under this heading are shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">MaxScanRows&#09;&#09;&#09;25
SupportsLongNames&#09;00
FirstRowHasNames&#09;&#09;01
</font></pre>
<p>
<b>Microsoft Access uses the Text entries as follows:</b></p>
<table>
<tr valign=top>
<td>
<b>Entry</b></td>
<td>
<b>Description</b></td>
</tr>
<tr valign=top>
<td>
MaxScanRows</td>
<td>
The number or rows that are scanned to determine the data type of each column.</td>
</tr>
<tr valign=top>
<td>
SupportsLongNames</td>
<td>
On or Off switch indicating support of long filenames.  Default setting is Off for this IISAM.</td>
</tr>
<tr valign=top>
<td>
FirstRowHasNames</td>
<td>
On or Off indicator for column header information.  On (01) indicates that the first row has column names.  Default is On.</td>
</tr>
</table><br>
<p>
<b>ODBC</b></p>
<p>
The ODBC registry is not created by the Setup program, but can be added by the user under the HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\JET\3.0\ENGINES entry.  This entry will include initialization settings for the ODBC.DLL driver, used for external access to ODBC data sources. Typical settings for the entries under this heading are shown in the following example:</p>
<pre><FONT FACE="Courier New" SIZE="2">ODBC
TraceSQLMode&#09;&#09;&#09;0
TraceODBCAPI&#09;&#09;&#09;0
DisableAsync&#09;&#09;&#09;0
LoginTimeout&#09;&#09;&#09;20
QueryTimeout&#09;&#09;&#09;60
ConnectionTimeout&#09;600
AsyncRetryInterval&#09;500
AttachCaseSensitive&#09;0
SnapshotOnly&#09;&#09;&#09;0
AttachableObjects 'TABLE','VIEW','SYSTEM TABLE','ALIAS','SYNONYM'
TryJetAuth&#09;&#09;&#09;1
PreparedInsert&#09;&#09;0
PreparedUpdate&#09;&#09;0
</font></pre>
<p>
Microsoft Access uses the ODBC entries as follows:</p>
<table>
<tr valign=top>
<td>
<b>Entry</b></td>
<td>
<b>Description</b></td>
</tr>
<tr valign=top>
<td>
TraceSQLMode</td>
<td>
An indicator of whether the Jet database engine will trace SQL statements sent to an ODBC data source in SQLOUT.TXT. Values are 0 (no) and 1 (yes). The default is 0. This entry is interchangeable with SQLTraceMode.</td>
</tr>
<tr valign=top>
<td>
TraceODBCAPI</td>
<td>
An indicator of whether to trace ODBC API calls in ODBCAPI.TXT. Values are 0 (no) and 1 (yes). The default is 0.</td>
</tr>
<tr valign=top>
<td>
DisableAsync</td>
<td>
An indicator of whether to force synchronous query execution. Values are 0 (use asynchronous query execution if possible) and 1 (force synchronous query execution). The default is 0.</td>
</tr>
<tr valign=top>
<td>
LoginTimeout</td>
<td>
The number of seconds a login attempt can continue before timing out. The default is 20.</td>
</tr>
<tr valign=top>
<td>
QueryTimeout</td>
<td>
The number of seconds a query can run (total processing time) before timing out. The default is 60.</td>
</tr>
<tr valign=top>
<td>
ConnectionTimeout</td>
<td>
The number of seconds a cached connection can remain idle before timing out. The default is 600.</td>
</tr>
<tr valign=top>
<td>
AsyncRetryInterval</td>
<td>
The number of milliseconds between polls to determine if the server is done processing a query. This entry is used for asynchronous processing only. The default is 500.</td>
</tr>
<tr valign=top>
<td>
AttachCaseSensitive</td>
<td>
An indicator of whether to match table names exactly when linking. Values are 0 (link the first table matching the specified name, regardless of case) and 1 (link a table only if the name matches exactly). The default is 0.</td>
</tr>
<tr valign=top>
<td>
SnapshotOnly</td>
<td>
An indicator of whether Recordsets are forced to be snapshots. Values are 0 (allow dynasets) and 1 (force snapshots only). The default is 0.</td>
</tr>
<tr valign=top>
<td>
AttachableObjects</td>
<td>
A list of server object types to which linking will be allowed. The default is ‘TABLE,’ ‘VIEW,’ ‘SYSTEM TABLE,’ ‘ALIAS,’ ‘SYNONYM’.</td>
</tr>
<tr valign=top>
<td>
TryJetAuth</td>
<td>
An indicator of whether to try using the Microsoft Access user name and password to log on to the server before prompting. Values are 0 (no) and 1 (yes). The default is 1.</td>
</tr>
<tr valign=top>
<td>
PreparedInsert</td>
<td>
An indicator of whether to use a prepared INSERT that inserts data in all columns. Values are 0 (use a custom INSERT that inserts only non-NULL values) and 1 (use a prepared INSERT). The default is 0. <i>Using a prepared INSERT can cause NULLs to overwrite server defaults and can cause triggers to execute on columns that were not inserted explicitly.</i></td>
</tr>
<tr valign=top>
<td>
PreparedUpdate</td>
<td>
An indicator of whether to use a prepared UPDATE that updates data in all columns. Values are 0 (use a custom UPDATE that sets only columns that have changed) and 1 (use a prepared UPDATE). The default is 0. <i>Using a prepared UPDATE can cause triggers to execute on unchanged columns.</i></td>
</tr>
</table><br>
<h4>Troubleshooting</h4>
<p>
The following information will help you locate and correct problems with external data access.</p>
<p>
<b>Connection problems</b></p>
<p>
If you’re having trouble connecting to an external data source, first make sure that you can connect to the network and that you have access to:
<ul>
<li>
The server and share (if applicable) on which the external database is located<br><br></li>
<li>
The external table</li>
</ul>
<p>
If you already have access to these, check that the connection information you’re using conforms to the specifications outlined earlier in this paper in “Specifying Connection Information.” If you’re getting the message “Unable to find installable ISAM,” check that:
<ul>
<li>
The database type specified in the connection information matches the entry tag for the associated driver under the Engines section of the registry.<br><br></li>
<li>
The path indicated for the associated driver under the ENGINES section of the Registry is correct.</li>
</ul>
<p>
Other things you might check include the following:
<ul>
<li>
Can you connect using another product or a different user account and password?<br><br></li>
<li>
Have you exceeded the connection limits on the server?<br><br></li>
<li>
Does the server have enough space?<br><br></li>
<li>
Does the connection information match the case sensitivity of the server?</li>
</ul>
<p>
If you’ve checked the items in the preceding lists, but you still can’t connect, contact your external database vendor.</p>
<p>
<b>Temporary space</b></p>
<p>
When you query a database, Microsoft Access creates temporary indexes on your local hard disk, even if the database is on an external network device. Temporary space requirements can vary from a few thousand bytes to several megabytes, depending on the size of the external tables being queried.</p>
<p>
Temporary space is allocated from the directory indicated by the TEMP environment variable, typically the \WINDOWS\TEMP directory. If your system has not defined a TEMP environment variable, the Microsoft Windows root directory is used. If the TEMP environment variable points to an invalid path or if your local hard disk does not have sufficient space for these temporary indexes, your application might behave unpredictably as Windows and Microsoft Access run out of resource space.</p>
<p>
&copy; 1997 Microsoft Corporation. All rights reserved.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
<p>
This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS DOCUMENT.</p>
<p>
Microsoft, FoxPro, OS/2, Visual Basic, Windows, and Windows NT are registered trademarks and Outlook is a trademark of Microsoft Corporation.</p>
<p>
Other product and company names listed herein may be the trademarks of their respective owners.</p>
</font></BODY>
</HTML>

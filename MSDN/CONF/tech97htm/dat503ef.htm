<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Advanced Design Patterns</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>



	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h1>Advanced Design Patterns</h1>
<p>
Presented by:&#09;Yair Alan Griver<BR>Chief Information Officer<BR>Flash Creative Management, Inc.<BR>Phone: (201)-489-2500<BR>Email: http://www.flashusa.com/<BR>Special thanks to Steven Black of SBC/UP for the use of materials</p>
<h2>Introduction</h2>
<p>
A <i>pattern</i> is a recurring solution to a particular problem in a given context.  A <i>design pattern</i> is a general abstraction of the solution across the range of problems and contexts where the pattern is appropriate. </p>
<p>
Design patterns have names, and knowing (and agreeing) on their names and meanings leads to a <i>pattern language</i> which is useful in conveying the abstractions among ourselves. The shared vocabulary makes patterns an excellent vehicle for conveying design experience. </p>
<p>
Most catalogued software design patterns, when applied under appropriate conditions to solve the correct sort of problem, have known tendencies to be stable, scaleable, and coherent.  These patterns are just now being identified, analyzed, and cataloged. </p>
<p>
When properly catalogued, design patterns define the parts, collaborations, and responsibilities of classes and instances. The nice thing is they abstract the subsystem above the level of classes, instances, and code. Patterns are all about architectures, their component structures, and all their nuances. </p>
<p>
So patterns serve as a guide to the sensible design of software building blocks, and they help us better communicate and cope. Anyone who has used a napkin to sketch the workings of a software system knows that a picture is worth a thousand words. Over the next two days, it should be come clear that a correct word can be worth many pictures.</p>
<p>
A note on pattern form: There are many ways to communicate patterns, and there are several conventions about how patterns should be conveyed on paper. In this document I am not concerned about following one or the other particular convention. I am much more interested in conveying how design patterns can be recognized and implemented.</p>
<p>
A note on this document: This paper is assembled from my personal research notes as I work on a book on object-oriented design patterns for Addison Wesley. As such, it is to be considered a working document, and I apologize in advance for its lack of rigor and for any inaccuracies and errors.</p>
<h3>Notation</h3>
<p>
In this document we’ll use Rumbaugh OMT notation. Here are a few important elements of this notation.</p>
<p>
<img src="dat503ef_1.gif" border=0></p>
<p>
<b>Figure 1. Abstract classes or abstract elements within classes have italic labels. Concrete classes use regular text.</b></p>
<p>
<img src="dat503ef_2.gif" border=0></p>
<p>
<b>Figure 2. Inheritance is symbolized with a triangle. In this case, the concrete classes inherit from the abstract class.</b></p>
<p>
<img src="dat503ef_3.gif" border=0></p>
<p>
<b>Figure 3. The relationship type is determined by the arrow base, and cardinality is determined by the arrow head. Dashed lines usually imply creation.</b></p>
<p>
<img src="dat503ef_4.gif" border=0></p>
<p>
<b>Figure 4. Implementation details are presented in a Windows-like window.</b></p>
<p>
<b>Exercise:</b></p>
<dl>
<dt>
  <img src="dat503ef_5.gif" border=0></dt>
<dd>
<b>Figure 5. As an exercise, interpret this diagram.</b></dd>
</dl>
<h2>Pattern 1. Proxy (Extends Decorator)</h2>
<p>
Provide a surrogate or placeholder for another object to control access to it.</p>
<table>
<tr valign=top>
<td>
<b>Problem</b></td>
<td>
How to provide correct and/or efficient access to an object that may be resource intensive or otherwise require protection?</td>
</tr>
<tr valign=top>
<td>
<b>Context</b></td>
<td>
A client needs the services of an object, but direct access is technically possible but questionable.</td>
</tr>
<tr valign=top>
<td>
<b>Forces</b></td>
<td>
–Some objects are expensive and cannot be instanced at the outset or, once instanced, perpetually held in memory.<p>
–Some objects require security access, while others may be subject to hostile attack.</p>
<p>
–Some objects may have complex protocols and efficient programming requires a more simplified interface. </p>
</td>
</tr>
<tr valign=top>
<td>
<b>Solution</b></td>
<td>
Make a component’s clients communicate with a representative rather than with the component itself.</td>
</tr>
<tr valign=top>
<td>
<b>Resulting Context</b></td>
<td>
Three actors: The client (as usual), the original object (as usual), and an intervening object (the Proxy) which serves as a placeholder for the original object and forwards requests as appropriate. <p>
<img src="dat503ef_6.gif" border=0></p>
</td>
</tr>
</table><br>
<h3>Uses for the Proxy Pattern</h3>
<p>
There are many uses for the Proxy pattern. A <b>Remote Proxy</b> encapsulates and maintains the physical location of the original object. A <b>Protection Proxy</b> protects the original from unauthorized access. A <b>Cache Proxy</b> uses a data area to temporarily hold results, and has strategies to maintain and refresh the cache. A <b>Synchronization Proxy</b> controls multiple simultaneous client accesses. A <b>Counting Proxy</b> is useful to add reference counting mechanism to classes so that unused objects can be destroyed in a timely fashion. A <b>Virtual Proxy</b> loads missing parts of the original on demand, thus delaying the consumption of resources until they are needed. A <b>Firewall Proxy</b> protects the original from potentially hostile access.</p>
<p>
Of course, you could combine two or more of the above roles. We’ll construct a Proxy or two during the session.</p>
<h2>Pattern 2. Chain of Responsibility</h2>
<p>
Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</p>
<p>
Chain Of Responsibility patterns decouple a message sender from its receiver by giving many objects a chance to handle the message.  The identity of the eventual service-providing object(s) may not be known to the sender, so the Chain Of Responsibility<small> </small>routes the request until it is adequately handled.</p>
<p>
A good place to find Chain Of Responsibility patterns is within easily traversed hierarchies, like containership. With containership the logic is usually simple: “If an object can’t handle a request, then delegate it to its Parent.” Help systems, among others, frequently use this pattern to invoke context-sensitive help. Chain of responsibility can be implemented without containership by using object pointer registration schemes. </p>
<h3>Implementing a Chain of Responsibility Pattern in Microsoft FoxPro</h3>
<p>
Here’s a way to structure a Chain Of Responsibility: When in doubt, delegate to THIS.PARENT. In the example below, nested boxes delegate their Click() event upwards until it is handled.  Don’t be fooled by all this code, for most of it just sets up the example.  The only code you really need is in the Click() methods of the container classes. The code follows, starting on the next page.</p>
<pre><FONT FACE="Courier New" SIZE="2">xx=CREATE(“Form1”)
xx.Show()
READ EVENTS
DEFINE CLASS form1 AS form
    Height   = 300
    Width    = 448
    Caption  = “Form1”
FUNCTION INIT()
*-- Add six nested containers
THIS.AddObject( “FirstContainer”, “ctnr”)
*-- Style note: nested WITH...ENDWITH statements.
WITH THIS.FirstContainer
.AddObject( “SecondContainer”, “ActiveCtnr”)  &amp;&amp; TAKE NOTE!
  WITH .SecondContainer
  .AddObject( “ThirdContainer”, “ctnr”)
    WITH .ThirdContainer
      .AddObject( “FourthContainer”, “ctnr”)
      WITH .FourthContainer
        .AddObject( “FifthContainer”, “ctnr”)
        WITH .FifthContainer
          .AddObject( “SixthContainer”, “ctnr”)
        ENDWITH
      ENDWITH
    ENDWITH
  ENDWITH
ENDWITH
ENDDEFINE
</font></pre>
<p>
<b>Sample 1. The code above generates nested containers of class Cntr as in the illustration below.</b></p>
<p>
<img src="dat503ef_7.gif" border=0></p>
<p>
<b>Figure 6. Nested containers.  Here the gray container handles the Click() event of all its inner members.</b></p>
<pre><FONT FACE="Courier New" SIZE="2">DEFINE CLASS ctnr AS container
Name = “ctnr”
FUNCTION INIT
&#09;*-- Container placement
&#09;THIS.Top    = 20
  THIS.Left   = 20
&#09;THIS.Width  = THIS.PARENT.Width-40
&#09;THIS.Height = THIS.PARENT.Height-40
&#09;THIS.Visible= .T.
ENDFUNC
FUNCTION Click
&#09;*-- the purpose of this method is 
&#09;*-- by default to pass the click 
&#09;*-- event to THIS.PARENT.
&#09;IF TYPE( “THIS.Parent”)= “O” 
&#09;&#09;*? Error trap this.
&#09;&#09;THIS.Parent.Click()
&#09;ENDIF
ENDFUNC
ENDDEFINE

DEFINE CLASS ActiveCtnr AS Ctnr
&#09;BackColor = RGB(192,192,192)   &amp;&amp; For your viewing pleasure
  FUNCTION Click
  WAIT WIND THIS.Name + “ is handing the message” NOWAIT
  *-- If the search must stop here, omit the following 
  Ctnr::Click()
  ENDFUNC
ENDDEFINE
</font></pre>
<p>
<b>Sample 2. Class definition for Ctnr and ActiveCtnr. Note that THIS.PARENT.DoHelp() is invoked upon no joy in THIS.DoHelp().</b></p>
<h3>Other Ways of Implementing Chain of Responsibility Patterns</h3>
<p>
In our example we use PARENT referencing to algorithmically reckon the next successor in the chain. There are other ways to do it, including <b><i>direct referencing</i></b>, where each object keeps pointers to one or more successors. Assigning objects to these pointers must be managed, of course, and care must be taken to avoid both circularities and unhandled requests.</p>
<p>
Chain Of Responsibility can also be built with a <b><i>handler class</i></b> that broadcasts the message to a sequence of objects until the message is satisfactorily handled. A variant of this uses <b><i>object registration</i></b> mechanisms to maintain the list and sequence of objects to be called.</p>
<p>
You may need to pass parameters along the chain. This can be problematic if a variety of classes participate in the successor chain, especially if a handler is involved and the identity of the receiver classes isn’t known for certain. In this case, it’s most helpful to standardize message passing using objects instead of parameters. Like always, a mature and predictable programming interface helps.</p>
<p>
Finally, it’s useful to note that a Chain Of Responsibility doesn’t need to end when a message is handled by a receiver in the chain. It may well be desirable for the message to be broadcast to many objects regardless.</p>
<h2>Pattern 3. Strategy&#45;INTL Example</h2>
<p>
According to the <small>GOF</small>, the intent of the Strategy pattern is: Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</p>
<table>
<tr valign=top>
<td>
<b>Problem</b></td>
<td>
Not all localizations are alike.  For example, a port from the US to the UK or Canada probably needs only minor interface adjustments, along with perhaps local currency support. A port from the US to Germany, on the other hand, requires extensive interface along with, potentially, localizing images and data sources. A port further afield may require changing fonts and most of the other localizable things. How to do this?</td>
</tr>
<tr valign=top>
<td>
<b>Context</b></td>
<td>
The application localization must be configurable, in the field, on the fly.</td>
</tr>
<tr valign=top>
<td>
<b>Forces</b></td>
<td>
–The user must be able to configure localizations to suit needs.<p>
–The user should be able to create new localization strategies without much difficulty.</p>
</td>
</tr>
<tr valign=top>
<td>
<b>Solution</b></td>
<td>
Separate individual localization tasks into atomic processes, then give each process the same interface so as to make them interchangeable. Give the controlling process a clean inteface for loading strategies, and design the process to call each loaded “strategy” in turn.</td>
</tr>
<tr valign=top>
<td>
<b>Resulting Context</b></td>
<td>
A modular set of strategies that can be applied as appropriate. In the case of INTL, certain parts of the localization strategies are so common&#45;lookups in STRINGS.DBF for example&#45;that this capability was migrated up the hierarchy to avoid loading redundant capabilities in each strategy.</td>
</tr>
<tr valign=top>
<td>
<b>Rationale</b></td>
<td>
Separating the localization tasks into separate strategies, and creating a mechanism to iterate through the loaded strategies, allows for much configuration flexibility. The downside is a performance penalty arising from the some inevitable common elements and from an increase in messaging traffic.</td>
</tr>
</table><br>
<p>
<img src="dat503ef_8.gif" border=0></p>
<p>
<b>Figure 7. The INTL class Strategy branch.</b></p>
<h2>Pattern 4. Iterator&#45;INTL Example</h2>
<p>
An Iterator provides a way to sequentially access all the elements of a structure independently of the structure type. The need for iterators comes up all the time. </p>
<p>
There are many sorts of structures to iterate in Microsoft&reg; Visual FoxPro&reg;. Tables and arrays are things we frequently need iterate. Other structures include FoxPro’s native structures (which are also tables) as well as objects nested, often several layers deep, within containers.</p>
<p>
INTL uses an iterator as part of its INTLTOOL.PRG utility.</p>
<table>
<tr valign=top>
<td>
<b>Problem</b></td>
<td>
Visual FoxPro has an open architecture – Its metadata is stored in standard FoxPro tables. How to process a Visual FoxPro project file (.PJX) in order to programmatically access all the files of a given type in an application. In the context of INTL, we may need to process a whole project for a variety of reasons, like auditing it for strings, message calls, international infelicities, or other issues.</td>
</tr>
<tr valign=top>
<td>
<b>Context</b></td>
<td>
The user wishes to run a batch-process on one or all of an application’s metadata. It would be nice to have a clean interface to do this.</td>
</tr>
<tr valign=top>
<td>
<b>Forces</b></td>
<td>
–The Visual FoxPro .PJX structure points (albeit somewhat cryptically) to each element in the project.<p>
–The project elements are readable either as FoxPro data structures or ASCII text files.</p>
</td>
</tr>
<tr valign=top>
<td>
<b>Solution</b></td>
<td>
Create an iterator class whose specialty is to traverse FoxPro structures. Subclass this iterator for specific specialties (creating classes like ScreenIterator or MenuIterator or ReportIterator).</td>
</tr>
<tr valign=top>
<td>
<b>Resulting Context</b></td>
<td>
A hierarchy of classes that can be used to reliably traverse metadata. Note that in INTL, the action to accomplish upon traversal is separate from the traversal process. See the Visitor pattern on page 9.</td>
</tr>
<tr valign=top>
<td>
<b>Rationale</b></td>
<td>
Once the iteration process is abstracted, then generic interfaces can be used to traverse a wide variety of structures. For example, the difference between traversing an array, a table, or a containership hierarchy can be safely hidden. This is very useful because it hides the nuance of traversal mechanics, allowing us to focus instead on the process that requires the traversal.</td>
</tr>
</table><br>
<p>
<img src="dat503ef_9.gif" border=0></p>
<p>
<b>Figure 8. The INTL Iterator class hierarchy. Each class specializes in iterating a particular structure. This class is concerned only with Visual FoxPro metadata tables.</b></p>
<h2>Pattern 5. Visitor&#45;INTL Example</h2>
<p>
The role of a Visitor is to represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.</p>
<table>
<tr valign=top>
<td>
<b>Problem</b></td>
<td>
In the context of localizing applications, we occasionally encounter the need to mix two separate actions, like 1) traversing a structure and 2) what to do at each step in the traversal. We’ve already discussed the Iterator pattern (page 8)&#45;why not just subclass iterators as needed?  The reason this is undesirable is mostly because this would add a new “dimension” to the iterator class hierarchy, which leads quickly to class explosion. So the problem can be restated as: How to endow classes with custom behavior without risking an explosion in the class hierarchy.</td>
</tr>
<tr valign=top>
<td>
<b>Context</b></td>
<td>
We need to iterate Visual FoxPro structures in order to audit the source or to perform specific actions like enabling report files for multilingual support. Other tasks are sure to arise in the future. How to rig this?</td>
</tr>
<tr valign=top>
<td>
<b>Forces</b></td>
<td>
–The iterator class is stable and specialized for iteration. <p>
–The desire to alter process behavior tempts us to alter the iterator class by subclassing.</p>
<p>
–A class explosion isn’t desirable.</p>
</td>
</tr>
<tr valign=top>
<td>
<b>Solution</b></td>
<td>
Create a class whose function is to encapsulate process mechanisms. This class is the <i>visitor</i> class. Then create an interface protocol such that the visitor class can <i>visit</i> targets, and so the targets can <i>accept</i> these visitors. Thereafter allow these classes to be combined using this interface.</td>
</tr>
<tr valign=top>
<td>
<b>Resulting Context</b></td>
<td>
The result is a desirable separation of chores between 1) traversal and 2) what to do upon traversal.</td>
</tr>
<tr valign=top>
<td>
<b>Rationale</b></td>
<td>
Whenever possible, it’s desirable to avoid a geometric explosion in the class hierarchy because of non-class related variants. For example, if we exclude multiple-inheritance options, the combination of five iterator mechanisms with three behavior variants can lead to 15 different classes with potential for much duplication between them. Separating both the traversal and behavior mechanisms is a tidy way to accommodate the situation.</td>
</tr>
</table><br>
<p>
<img src="dat503ef_10.gif" border=0></p>
<p>
<b>Figure 9. The INTL Visitor class hierarchy. These visitors control the Iterator classes.</b></p>
<h2> Pattern 6. Hook Operations</h2>
<table>
<tr valign=top>
<td>
<b>Problem</b></td>
<td>
Provide a consistent and flexible mechanism for implementers to extend software.</td>
</tr>
<tr valign=top>
<td>
<b>Context</b></td>
<td>
Toolkits and frameworks are composed of general-purpose classes that are intended by their creators to be adapted by others in the future. Toolkits provide for code reuse, while frameworks provide for architectural reuse. In both cases, flexibility and extensibility are virtues. How to best provide this flexibility?<p>
Subclassing is the usual way toolkits and frameworks are meant to be adapted. Typically the original classes are kept pristine, and implementation-specific changes are made to subclasses. Adaptation by subclassing, however, presents special problems&#45;source code, and specialized user knowledge, are required.  </p>
<p>
Adaptation by subclassing can sometimes create difficult upgrade, support, and maintenance situations. Moreover, the class creators, aware of these difficulties, are constrained in future releases to altering their product so to not pose problems for legacy subclasses that they know little about.</p>
<p>
Hook operations are an alternative to subclassing. <i>Hooks</i> are places within procedures or methods where user-defined adaptation is specifically designed to take place. A <i>hook operation</i> is the code that invokes the hook. The <i>Hook Operation design pattern</i> describes generic interfaces and methodologies for adapting software using hooks. </p>
<p>
For example, consider a user interface component with the click method in Listing 1.  The built-in click method is preceded by a hook called by <b>THIS.ClickHook()</b>. The ClickHook() method is a good place for users to place custom processing in subclasses without polluting the built-in Click behavior.</p>
<p>
FUNCTION Click<BR><b>  THIS.ClickHook()<BR></b>  WAIT WINDOW “Built-in Click Method” <BR>  &lt;100 lines of code&gt;<BR>ENDFUNC</p>
<p>
Hooks usually do nothing by default; they are used by exception.  A hook is a separate and distinct method from the one that provides built-in class behavior. The hook is invoked in such a way that the built-in behavior can be enhanced or replaced without polluting the original source and without altering the built-in behavior provided by the class.</p>
</td>
</tr>
<tr valign=top>
<td>
<b>Forces</b></td>
<td>
The class must be enhanced in a consistent manner without prior knowledge of implementation.</td>
</tr>
<tr valign=top>
<td>
<b>Solution</b></td>
<td>
Provide hooks for known areas that must be enhanced.</td>
</tr>
<tr valign=top>
<td>
<b>Resulting Context</b></td>
<td>
The result is a standardized approach for enhancing functionality.</td>
</tr>
<tr valign=top>
<td>
<b>Rationale</b></td>
<td>
Subclassing may not provide the functionality that we know we will require. This approach allows us to add code without affecting existing code.</td>
</tr>
</table><br>
<p>
<b>Applicability</b></p>
<p>
Hooks are appropriate in situations where you want software to be adaptable. Two occasionally conflicting forces determine where and how hook operations should be used.  On one hand, hook operations are most valuable at <i>critical junctures</i> in a process. On the other hand, usability suggests that hooks should be placed at <i>predictable junctures</i>.</p>
<p>
Critical junctures are adjacent to where significant transformations occur. For example, in an accounting application, the spot where transactions are committed could be considered a critical juncture. Critical junctures are usually difficult to reliably identify, and difficult to document. Moreover, a trivial juncture in one framework implementation may be a critical juncture in a different implementation.</p>
<p>
Predictable junctures are architecturally predictable spots. For example, a predictable juncture could be defined to be where methods begin or end. Predictable junctures are sometimes (but not always) located close to where adaptation is likely to be desired. This location compatibility is a function of program granularity: The briefer the method, the more likely a predictable juncture is proximate enough to a critical juncture to be useful. In general, predictable junctures are easy to identify and document.</p>
<p>
The tradeoff between critical and predictable junctures is a user education issue. If implementers are not able to identify hook operations are placed, then they won’t be able to engineer the hooks they require.</p>
<p>
A good question now arises:  how to optimize messaging for flexibility? To answer this, let’s first list what sort of flexibility might be desirable when we execute a method or a procedure: 
<ul>
<li>
<b><i>Pre-process hooks</i></b>: invoking some action before the standard method. <br><br></li>
<li>
<b><i>Post-process hooks</i></b>: invoking some action after the standard method. </li>
</ul>
<p>
It is worth noting that hooks usually do nothing by default. They are placed by the software’s creators to be used by exception as individual implementation needs arise.</p>
<h3>Structure</h3>
<p>
A number of structures are possible, depending on how the hook is engineered.</p>
<p>
Internally fulfilled hooks</p>
<p>
When hooked objects handle their own hooks, the structure illustrated in Figure 1 is typical. Here the hook methods are implemented by subclassing and then coding the subclass’s hook method. This structure is similar to that of the Template Method design pattern, except that algorithmic steps defined in the template method specifically provides for hook operations.</p>
<p>
Externally fulfilled hooks</p>
<p>
When hook operations can delegate to hook objects, this can leads to a many possible structures. Figure 2 shows a case where the hook objects are kept in separate hook classes, and Figure 3 shows a case where the hook class is a superclass of the hooked class.</p>
<p>
<img src="dat503ef_11.gif" border=0></p>
<p>
<b>Figure 1: Self-sufficient hooks have a structure similar to that of the Template Method design pattern.</b></p>
<p>
<img src="dat503ef_12.gif" border=0></p>
<p>
<b>Figure 2: Supporting hooks are separate hook objects, here shown as separate classes from those they adorn. </b></p>
<p>
<img src="dat503ef_13.gif" border=0></p>
<p>
Figure 3: Hooks and Hooked objects can share the same interface, which implies that they can share the same class hierarchy. This is very handy from a maintenance perspective since the interfaces remain automatically in synch.</p>
<h3>Participants</h3>
<p>
There are essentially two participants in the hook operation pattern.  
<ul>
<li>
<b>Hooked Object<BR></b>– Contains a template method which sequences execution and contains one or more hook operations.<br><br></li>
<li>
<b>Hook Object</b><BR>– Not necessarily distinct from the Hooked Object<BR>– Implements the hook </li>
</ul>
<h3>Collaborations</h3>
<ul>
<li>
The hooked object has template methods which call hooks with hook operations.<br><br></li>
<li>
Hook objects may themselves be hooks.</li>
</ul>
<h3>Consequences</h3>
<p>
The advantages of Hook Operations include:
<ul>
<li>
Downstream developers can modify application behavior by adapting hook methods.<br><br></li>
<li>
Depending on the architecture, hook objects may be chained together.</li>
</ul>
<p>
Some of the disadvantages are
<ul>
<li>
Hook operations are unconventional and add somewhat to overall application complexity.<br><br></li>
<li>
The messaging overhead of hooks has performance expenses.</li>
</ul>
<h3>Implementation</h3>
<p>
Future toolkit and framework implementers may wish to run a pre or post-processes in addition to a given standard method.  For example, an implementer may wish to pre-process the click event of a “Save” button to ensure the connection is still active, or to log the action, or check security, or perform some application-specific validation, and so on. Also, the ability to override the standard method (something like <b>NODEFAULT</b>) is very handy.</p>
<p>
Listing 2 shows a simple call to a pre-process hook. This example uses the common convention of naming the pre-process with the prefix “pre”.</p>
<pre><FONT FACE="Courier New" SIZE="2">FUNCTION Click

<b>  *-- Pre-process hook 

  THIS.PreClick() 

  WAIT WINDOW “Click” 
  &lt;100 lines of code&gt;
ENDFUNC
</b></font></pre>
<p>
<b>Listing 2. A pre-hook followed by standard method code.</b></p>
<p>
Listing 3 shows a more flexible configuration, where the pre-processing return value controls the standard method execution. This is a crude <b>NODEFAULT</b>-like implementation, controlled by the pre-hook’s return value.</p>
<pre><FONT FACE="Courier New" SIZE="2">FUNCTION Click

<b>  IF THIS.PreClick() 

    WAIT WINDOW “Click” 
    &lt;100 lines of code&gt;

  ENDIF

ENDFUNC
</b></font></pre>
<p>
<b>Listing 3. A pre and post-hook controls the execution of the standard method hook.</b></p>
<p>
Listing 4 shows a variant of Listing 2, except here a post-processing hook, using the conventional  “post” nomenclature, is used.</p>
<pre><FONT FACE="Courier New" SIZE="2">FUNCTION Click
  WAIT WINDOW “Click” 
  &lt;100 lines of code&gt;

<b>  *-- Post-process hook 

  THIS.PostClick() 

ENDFUNC
</b></font></pre>
<p>
<b>Listing 4. A post-hooked Click hook.</b></p>
<p>
Using pre- or post-hooks has the following huge advantage: By subclassing a standard class and modifying the pre or post-hook methods, you are not changing the original default behavior of the class methods. You are changing methods that are specifically designed for user-defined use. Thus, you avoid some of the tricky upgrade compatibility problems that may arise when the class creator or vendor makes new versions available.</p>
<p>
As you may have guessed, pre and post-hooks can be combined, as shown in listing 5, to achieve flexibility on both sides of the standard method.</p>
<pre><FONT FACE="Courier New" SIZE="2">FUNCTION Click

<b>  THIS.PreClick()  &amp;&amp; Pre-hook

  WAIT WINDOW “Click” 
  &lt;100 lines of code&gt;

  THIS.PostClick() &amp;&amp; Post-hook

ENDFUNC
</b></font></pre>
<p>
<b>Listing 5. Pre and post-hooks surround a standard method. If you intend this method to be subclassed, then avoid this!</b></p>
<p>
Combining pre and post-hooks, as in listing 5, is not recommended. The reason for this arises upon subclassing. If you subclass the click method of listing 5, then use <b>DODEFAULT()</b> or the scope resolution operator (<b>::</b>) to invoke this parent method, then you’ll fire both the pre and post-hook at that point. Depending on the hooks, this can cause unexpected results.</p>
<p>
How, then, to provide hooks both at the beginning and at the end of a particular process? It’s easy if you use a multi-part process.  For example, consider a hookless component whose Click() calls a particular method, as in listing 6.</p>
<pre><FONT FACE="Courier New" SIZE="2">DEFINE CLASS HooklessProcess AS CommandButton
  FUNCTION CLICK

<b>    DO THISFORM.SomeMethod()

  ENDFUNC
ENDDEFINE

DEFINE CLASS MyForm AS FORM
  ADD OBJECT oCmd AS HooklessProcess

  FUNCTION SomeMethod

    * &lt;&lt; Your code here &gt;&gt;

  ENDFUNC

ENDDEFINE
</b></font></pre>
<p>
<b>Listing 6, a button without hooks.</b></p>
<p>
Listing 7 shows how the code in Listing 6 can be modified so the &quot;pre&quot; hook is launched by the commandbutton, and the &quot;post&quot; hook is launched at the end of the method invoked by the command button. The process is thus neatly segmented into two distinct phases: The “event” phase, which is hooked, and controls the invocation of the “method” phase, which is also hooked.</p>
<pre><FONT FACE="Courier New" SIZE="2">DEFINE CLASS FullyHookedProcess AS CommandButton
  FUNCTION CLICK

<b>    THIS.PreClick()  &amp;&amp; The &quot;Pre&quot; hook

    THISFORM.SomeMethod()
ENDDEFINE

DEFINE CLASS MyForm AS FORM
  ADD OBJECT oCmd AS FullyHookLessProcess

  FUNCTION Somemethod
    &lt;&lt; Your code here &gt;&gt;

    THIS.PostSomeMethod()  &amp;&amp; The &quot;Post&quot; hook

  ENDFUNC
ENDDEFINE
</b></font></pre>
<p>
<b>Listing 7, a component with a hook before calling a Click implementation method. The Click implementation method  contains its own hook at its conclusion.</b></p>
<p>
You can abstract this hooking process, and recreate it easily, with the following rule of thumb: 
<ul>
<li>
Events (like click and dblclick) always fire &quot;pre&quot; hooks at the beginning of their execution.<br><br></li>
<li>
Methods (things invoked by events) always fire &quot;post&quot; hooks at the end of their execution.</li>
</ul>
<p>
Thus you have, in effect, a hook on the way in, and another one on the way out. </p>
<h3>Visual FoxPro Example</h3>
<p>
Here is an illustrative example of the benefits of hooks. Here we’ll hook the RightClick() method of a textbox to provide a context sensitive popup menu. In practice you could hook all the common methods of all your base classes to do a variety of things. </p>
<p>
The class definition, complete with its seeded RightClick() method, looks like this:</p>
<pre><FONT FACE="Courier New" SIZE="2">***************************************************
*-- Class:        appTextbox
*-- BaseClass:    Textbox
DEFINE CLASS appTextbox AS Textbox

  *-- Reference to a hook object
  ohook = .NULL.

  PROCEDURE RightClick
    *-- Delegate to any hook
    IF ! ISNULL( THIS.oHook)        AND ;
      TYPE( &quot;THIS.oHook&quot;) = &quot;O&quot;     AND ;
      PEMSTATUS( THIS.oHook, &quot;RightClick&quot;, 5)

       _BOX= .T.
       THIS.oHook.Rightclick()

       IF ! _BOX
         RETURN
       ENDIF

    ENDIF
  ENDPROC
  
  FUNCTION Release
    *-- It’s always wise to clean up your pointers
    THIS.oHook= .NULL.  
    RELEASE THIS
  
ENDDEFINE
</font></pre>
<p>
<b>Listing 8, a textbox with a RightClick hook.</b></p>
<p>
Here’s a RightClick()-seeded hook object that works extremely well with textboxes and edit boxes to bring up a handy edit menu:</p>
<pre><FONT FACE="Courier New" SIZE="2">DEFINE CLASS lblmousehook AS label
  Caption= &quot;MouseHook&quot;
  Name   = &quot;mousehook&quot;

  PROCEDURE RightClick
    *-- Bring up a handy edit tools menu
    DEFINE POPUP shortcut SHORTCUT RELATIVE FROM MROW(),MCOL()
    *-- Cut
    DEFINE BAR _med_cut OF shortcut PROMPT &quot;Cu\&lt;t&quot; ;
      KEY CTRL+X, &quot;Ctrl+X&quot; ;
      MESSAGE &quot;Removes selection and places it onto the Clipboard&quot;
    *-- Copy
    DEFINE BAR _med_copy OF shortcut PROMPT &quot;\&lt;Copy&quot; ;
      KEY CTRL+C, &quot;Ctrl+C&quot; ;
      MESSAGE &quot;Copies the selection onto the Clipboard&quot;
    *-- Paste
    DEFINE BAR _med_paste OF shortcut PROMPT &quot;\&lt;Paste&quot; ;
      KEY CTRL+V, &quot;Ctrl+V&quot; ;
      MESSAGE &quot;Pastes the contents of the Clipboard&quot;
    *-- Select All
    DEFINE BAR _med_slcta OF shortcut PROMPT &quot;Se\&lt;lect All&quot; ;
      KEY CTRL+A, &quot;Ctrl+A&quot; ;
      MESSAGE &quot;Selects all text or items in the current window&quot;
    *-- Clear
    DEFINE BAR _med_clear OF shortcut PROMPT &quot;Cle\&lt;ar&quot; ;
      MESSAGE &quot;Removes the selection and does not place it onto the Clipboard&quot;
    ACTIVATE POPUP Shortcut
ENDDEFINE
</font></pre>
<p>
<b>Listing 9, a usable RightClick() hook usable with code in Listing 6.</b></p>
<p>
To set up this basic hook do the following:</p>
<pre><FONT FACE="Courier New" SIZE="2">oForm= CREATE(&quot;MyForm&quot;)

oForm.AddObject( &quot;oTxtbox&quot;, &quot;appTextBox&quot;)
oForm.AddObject( &quot;oMouseHook&quot;,&quot;lblMouseHook&quot;)
oForm.otxtbox.Visible= .T.
oForm.otxtbox.oHook= oForm.oMouseHook
oForm.Caption= &quot;RightClick this textbox&quot;
oForm.Show()
READ EVENTS
</font></pre>
<p>
<b>Listing 10, Code to set up the RightClick() extended hook example.</b></p>
<p>
<img src="dat503ef_14.gif" border=0></p>
<p>
When you RightClick over the textbox, control is passed to the hook, which invokes a context sensitive shortcut menu. Two things to draw from this example:
<ul>
<li>
The hooked and the hook don’t need to be from the same base class.  Hooks can be lightweight objects, like labels or lines.<br><br></li>
<li>
Hooks can be shared by more than one object. There is nothing stopping us from having all the text and edit boxes on our form pointing to the same hook.</li>
</ul>
<h2>Appendix 1. Selected Reading, Sites, and Conferences</h2>
<p>
<b>Reading</b></p>
<p>
Alexander, C., et al. A Pattern Language. New York: Oxford University Press, 1977. ISBN 0-19-501919-9.</p>
<p>
Alexander, C., et al. A Timeless Way of Building. New York: Oxford University Press, 1978.</p>
<p>
Brooks, F., (1975 and 1995) The Mythical Man Month. Reading, MA. Addison Wesley. ISBN 0-201-83595-9.</p>
<p>
Buschman, F., and Meunier, R. (1995) A System of Patterns.  Chapter 17 (p. 325) in a compilation work by Coplien, J, and Schmidt, D (1995) Pattern Languages of Program Design. Reading, MA. Addison Wesley. ISBN 0-201-60734-4.</p>
<p>
Buschman, F., Meunier, R., Rohnert, H., Sommerlad, P., and Stal, M. (1996) A System of Patterns. West Sussex, England. John Wiley &amp; Sons. ISBN 0-471-95869-7. </p>
<p>
Coad P., North, D., and Mayfield, M., (1995) Object Models: Strategies, Patterns, and Applications. Prentice Hall. ISBN 0-13-108614-6.  Also a helpfile: STPTHLP.ZIP in CIS.CaseForum, Lib 3.</p>
<p>
Coplien, J., Advanced C++ Programming Styles and Idioms. Reading, MA: Addison Wesley, 1992.</p>
<p>
Coplien, J., and Schmidt, D. (1995) Pattern Languages of Program Design. Reading, MA. Addison Wesley. ISBN 0-201-60734-4.</p>
<p>
Gamma, E., Helm, Observations on Observer, Dr. Dobb’s Sourcebook, September/October 1995.</p>
<p>
Gamma, E., Helm, R., Johnson, R., and Vlissides, J. (1994) Design Patterns, Elements of Object Oriented Software.  Reading, MA. Addison Wesley. ISBN 0-201-63361-2</p>
<p>
Hay, D. (1995) Data Model Patterns: Conventions of Thought. Dorset House.</p>
<p>
Helm, R., and Gamma, E. The Courrier Pattern. Dr .Dobb's Sourcebook Jan/Feb 1996. Miller Friedman Inc, San Francisco.</p>
<p>
Juancarlo, Anez. (1995) A Perfect Fit. Windows Tech Journal, September 1995, Oakley Publishing Company, Springfield, OR.</p>
<p>
Pree, W. (1995) Design Patterns for Object Oriented Development. Reading, MA. Addison Wesley and ACM press. ISBN 0-201-42294-8.</p>
<p>
Rohnert, Hans, PLOP 96 Conference Proceedings, Addison Wesley (1996).</p>
<p>
Vlissides, John, Seven Habits of Successful Pattern Writers, C++ Report, Vol 7 no 9, November-December 1995, SIGS publications, New York NY.</p>
<p>
<b>Web sites</b></p>
<p>
The Cunningham and Cunningham, Inc., homepage, <u>http://c2.com</u> has a description of pattern history, a description of the Portland pattern form, guidelines for writing patterns in Alexander's style, and several patterns and pattern languages and links to other sites. Of particular interest here is <u>http://c2.com/cgi/wiki</u> which is a growing repository of pattern contributions from hundreds of interested developers.</p>
<p>
The patterns homepage: <u>http://st-www.cs.uiuc.edu/users/patterns/patterns.html</u>  Maintained by Richard Helm is a great place to start, with many links to choose from.  </p>
<p>
<u>http://st-www.cs.uiuc.edu/users/johnson/</u> is maintained by Ralph Johnson.</p>
<p>
There’s a good pattern discussion and FAQ at <u>http://gee.cs.oswego.edu/dl/pd-FAQ/pd-FAQ.html</u></p>
<p>
<b>Upcoming conferences</b></p>
<p>
<b>UP&#45;An International Workshop On Using Patterns</b>, <u>http://www.panix.com/~k2/up.html</u>,  Friday, March 7th to Sunday, March 9th, 1997.  Location: Mohonk Mountain House. About 2 hours from New York City or Albany.</p>
<p>
<b>EuroPLOP ‘97</b>, Second European Conference on Pattern Languages of Programming, July 10 - 12, 1997, Kloster Irsee, 87660 Irsee, Germany. <u>http://www.cs.wustl.edu/~schmidt/EuroPLoP-97.html</u></p>
<p>
<b>PLOP ’97</b>, &quot;Pattern Languages of Programs&quot;, September 2-5, 1997, in Allerton House, Monticello, Illinois, USA . <u>http://st-www.cs.uiuc.edu/~hanmer/PLoP-97.html</u></p>
<h2>Appendix 2. Selected FAQs About Patterns</h2>
<p>
<b><u>What else can patterns be applied to? </u></b></p>
<p>
Existing software-related examples include:
<ul>
<li>
Programming idioms: For example, particular uses of nested classes in C++, interfaces in Java, cascaded calls in Smalltalk. <br><br></li>
<li>
Coding idioms: For example the C idiom: while(*dest++ = *src++).<br><br></li>
<li>
Data structures: For example, trees and buffers. <br><br></li>
<li>
Algorithms: For example, those for parallel processing. <br><br></li>
<li>
Protocols: For example, those used in concurrent object systems. <br><br></li>
<li>
Development of new frameworks (sets of extensible classes): For example, those for UI toolkits.<br><br></li>
<li>
Use of existing frameworks: For example OpenDoc, JavaBeans.<br><br></li>
<li>
Analysis models: For example, those dealing with accounting rules.<br><br></li>
<li>
System Architecture: For example, Blackboard and Broker architectures.<br><br></li>
<li>
Development organization: For example, development team structure and dynamics.<br><br></li>
<li>
Development process: For example, steps and strategies in OO analysis and design. </li>
</ul>
<p>
<b><u>What's the difference between a pattern and a coding idiom? A design? One or more OMT or UML diagrams? A use case? A protocol? An algorithm? A heuristic? An architecture? A coding standard? A coding style? A development method? </u></b></p>
<p>
A pattern may be mainly about one of these things, but the thing alone does not comprise a pattern. A pattern describes how and why any of these may apply in a given development context, along with guidance for applying them. </p>
<p>
<b><u>What's the difference between a pattern and a class? A reusable component? A parameterized (template) class? A class library or package? A framework? A tool? A code generator? </u></b></p>
<p>
A pattern is not an implementation. It describes when, why, and how to go about creating an implementation or other engineering product.  Some (not many) solutions are amenable for description via implementations (as classes, frameworks, tools, or whatever) that provide developers with just about everything they would need to know or do. Even so, the code itself is not the pattern. </p>
<p>
<b><u>What's the difference between a pattern and How-To guide? </u></b></p>
<p>
The solution described in a pattern may be phrased as a series of steps similar to those seen in How-To guides and cooking recipes. But again these steps form only one aspect of a pattern. Also, patterns aspire to greater scope and generality of context, and greater authoritativeness in identifying and resolving forces than seen in typical How-To guides. </p>
<p>
<b><u>Why should I use patterns? </u></b></p>
<p>
For the same kinds of reasons that you should reuse good code: Benefiting from the knowledge and experience of other people who have put more effort into understanding contexts, forces, and solutions than you have done or want to do. Further, patterns can be more reusable than code, since they can be adapted so that you can build software to address particular special circumstances that cause you to be unable to reuse an existing component. </p>
<p>
Patterns also give developers common sets of names and concepts for dealing with common development problems, thus enhancing communication. </p>
<p>
<b><u>Wouldn't it be nice to have some patterns-based CASE tools? </u></b></p>
<p>
Maybe, but patterns are about communicating from one person to another. If the medium enhances communication with other people it is good. If it merely makes the machinations of the patterns executable by a computer it isn't. </p>
<p>
<b><u>Why aren't there more patterns about [WHATEVER]? </u></b></p>
<p>
Because you haven't written them. If you're interested, you more than likely know something, and if you know something you can write patterns. </p>
<p>
<b><u>How do I go about writing a pattern? </u></b></p>
<p>
Here are some common recommendations: 
<ul>
<li>
Avoid writing about patterns; just write patterns. <br><br></li>
<li>
Pick something you know about and then find multiple occurrences and/or descriptions. Or conversely, mine existing software for new possible patterns. <br><br></li>
<li>
Aim for quality, not quantity of patterns. <br><br></li>
<li>
Figure out why the pattern exists or applies. <br><br></li>
<li>
Pick a format for writing about it. <br><br></li>
<li>
Circulate it to others (for example, via web pages, patterns discussion groups, or submissions to a mailing list) and receive comments. <br><br></li>
<li>
Submit it to a vehicle such as PLOP where it can be reviewed in a writer's workshop. <br><br></li>
<li>
Continually iterate and refine. </li>
</ul>
<p>
<b><u>How can we institutionalize the use of patterns where I work? </u></b></p>
<p>
Common recommendations include: 
<ul>
<li>
Mine the best code you have for patterns. <br><br></li>
<li>
Extend design documentation and review practices to also deal with design patterns. <br><br></li>
<li>
Run courses on the use of existing design patterns. <br><br></li>
<li>
Review existing patterns in a writer's workshop. <br><br></li>
<li>
Use a pattern-based style template for documenting designs, so they can evolve into patterns. <br><br></li>
<li>
Form a study group, and meet once a week to talk about patterns. Once there is a body of enthusiasts, they can press for institutionalization. </li>
</ul>
<p>
<b><u>Are patterns over-hyped? </u></b></p>
<p>
Of course. It is impossible to avoid.</p>
<p>
&copy; 1997 Microsoft Corporation. All rights reserved.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
<p>
This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS SUMMARY.</p>
<p>
Microsoft, FoxPro, and Visual FoxPro are registered trademarks of Microsoft Corporation.</p>
<p>
Other product or company names mentioned herein may be the trademarks of their respective owners.</p>
</font></BODY>
</HTML>

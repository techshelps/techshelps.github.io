<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Analysis Solutions with Pivot Tables in Microsoft Excel</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>



	<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>



	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<h1>Data Analysis Solutions with Pivot Tables in Microsoft Excel </h1>
<p>
Presented by:&#09;Steve Harshbarger</p>
<p>
Steve Harshbarger is a director at Micro Modeling Associates (MMA), Inc., a Solution Provider Partner developing  custom business applications for the Fortune 1000 using Microsoft technology. He currently manages MMA's Washington, DC practice, and will be heading up the new MMA San Francisco office in mid-1997. Steve is co-author of Microsoft Excel 97 Developer's Handbook (Microsoft Press, 1997), Official Microsoft Intranet Solutions with Office 97 and FrontPage 97 (Microsoft Press, 1997), and Excel Professional Techniques (Que, 1994). He is a frequent speaker at Microsoft-sponsored events including Tech-Ed, VBITS, Developer Days and various product launches. Steve is also a Certified Public Accountant which gives him a unique perspective on business solutions. Prior to joining Micro Modeling, Steve was a senior consultant at KPMG Peat Marwick in Washington, DC.</p>
<p>
Phone: (301)657-1385</p>
<p>
Fax: (301)657-0025</p>
<p>
Email: harshbargers@micromodeling.com</p>
<h2>Introduction</h2>
<p>
Microsoft&reg; Excel 97 pivot tables are a powerful data analysis and reporting tool. Through Microsoft&reg; Visual Basic&reg; code, the full power of pivot tables can be realized. This paper assumes you are familiar with pivot tables from and end user point of view, and understand Visual Basic development and the Microsoft Excel object model in general. The following specific topics will be covered:
<ul>
<li>
The PivotTable Object Model<br><br></li>
<li>
Creating a PivotTable in Code<br><br></li>
<li>
The PivotTable Object<br><br></li>
<li>
The PivotCache Object<br><br></li>
<li>
The PivotField Object<br><br></li>
<li>
The PivotItem Object<br><br></li>
<li>
Calculations in PivotTables<br><br></li>
<li>
Managing Large Datasets</li>
</ul>
<h2>The Pivot Table Object Model</h2>
<p>
Pivot tables are manipulated by using several objects in Microsoft Excel’s object model. The first major concept to grasp is the difference between the PivotTable and PivotCache. To understand this, we need to understand how Microsoft Excel manages pivot tables under the hood. It works like this:
<ul>
<li>
When a pivot table is initially created (or refreshed), <i>all</i> the underlying data is read into an invisible cache which Microsoft Excel maintains in the computer’s random-access memory (RAM). This data structure is represented by the <b>PivotCache</b> object.<br><br></li>
<li>
When the visible pivot table is manipulated to show various fields in various positions, data from the cache is summarized and displayed in the worksheet as requested. These operations are very fast since all the underlying data is already in RAM in the cache. In this way, the structure of the visible pivot table can be changed radically over and over without going to the original source of the data. The visible pivot table is represented by the <b>PivotTable</b> object.</li>
</ul>
<p>
The following diagram shows the relationship between the PivotCache and PivotTable objects. A particular PivotCache can be accessed through the PivotCaches collection of the workbook object, or as a property of the PivotTable which is derived from it. Note that is possible for many pivot tables to share the same cache. Hence, we have the ability to access PivotCaches through a collection independent from the PivotTable object.</p>
<p>
<img src="off502ef_1.gif" border=0></p>
<p>
The PivotTable object itself contains a hierarchy of related objects which represent the structure of the table. The <b>PivotField</b> object represents “columns” of data from the original data source, which may be displayed in a number of orientation in the pivot table. The <b>PivotItem</b> object represents discreet values in a given PivotField.</p>
<h2>Creating a PivotTable in Code</h2>
<p>
To create a pivot table in code, call the PivotTableWizard method of the worksheet object. This method will build the PivotCache and display the PivotTable in worksheet. This method has the following major arguments (see the Microsoft Excel help file for a complete listing of additional arguments):</p>
<p>
<b>SourceType</b></p>
<p>
SourceType determines what type of data will feed the pivot table. Choose one of the following constants:</p>
<p>
xlConsolidation&#09;Multiple consolidation ranges</p>
<p>
xlDatabase&#09;Microsoft Excel list or database</p>
<p>
xlExternal&#09;Data from another application</p>
<p>
xlPivotTable&#09;Same source as another PivotTable</p>
<p>
<b>SourceData</b></p>
<p>
SourceData can be one of the following:
<ul>
<li>
If the data is from Microsoft Excel, a range object or an array of ranges<br><br></li>
<li>
If the data is from an existing pivot table, a text constant representing the name of another PivotTable<br><br></li>
<li>
If the data is from an external databases, a two-element array. The first element is the connection string specifying the ODBC source for the data. The second element is the Structured Query Language (SQL) query string used to get the data.</li>
</ul>
<p>
<b>TableDestination</b></p>
<p>
TableDestination is the range object indicating where to place the pivot table.</p>
<p>
<b>TableName</b></p>
<p>
TableName is a string specifying a name for the new pivot table.</p>
<p>
<b>BackgroundQuery</b></p>
<p>
BackgroundQuery determines if the query used to build the pivot table will be performed asynchronously. In general, you should set this to false. If you do not, your Visual Basic code will continue running before the pivot table is built and may lead to unexpected results.</p>
<p>
<b>RowGrand and ColumnGrand</b></p>
<p>
Set RowGrand and ColumnGrand to True to create row and column grand totals.</p>
<p>
<b>HasAutoFormat</b></p>
<p>
Set HasAutoFormat to True to have Microsoft Excel automatically format the PivotTable when it is refreshed or when fields are moved.</p>
<h2>The PivotTable Object</h2>
<p>
The PivotTable object represents the visible pivot table as a whole, and can be used to manipulate the pivot table. It is accessed through the PivotTables collection of the worksheet object like this:</p>
<pre><FONT FACE="Courier New" SIZE="2">Worksheets(1).PivotTables(“MyPivotTable”)
</font></pre>
<h3>Controlling the Display</h3>
<p>
The following properties control overall display characteristics of the pivot table:</p>
<p>
<b>RowGrand and ColumnGrand</b></p>
<p>
Set RowGrand and ColumnGrand to True to display row and column grand totals.</p>
<p>
<b>NullString &amp; DisplayNullString </b></p>
<p>
NullString is a value to display in the pivot table in place of null values in the underlying data. If DisplayNullString is set to True, the NullString value will be used; if False, it will not.</p>
<p>
<b>ErrorString &amp; DisplayErrorString</b> </p>
<p>
ErrorString is a value to display in the pivot table in place of error values in the underlying data. If DisplayErrorString is set to True, the ErrorString value will be used; if False, it will not.</p>
<p>
<b>HasAutoFormat</b></p>
<p>
Set to True to have Microsoft Excel automatically format the pivot table when it is refreshed or when fields are moved.</p>
<p>
<b>SelectionMode</b></p>
<p>
SelectionMode returns or sets the pivot table structured selection mode. Can be one of the following XlPTSelectionMode constants: xlLabelOnly, xlDataAndLabel, or xlDataOnly</p>
<p>
<b>PageFieldOrder, PageWrapCount</b></p>
<p>
PageFieldOrder sets the order in which page fields are displayed in the pivot table (xlDownThenOver or xlOverThenDown). PageWrapCount determines how many page fields to display before a new column (or row) of page fields is started.</p>
<h3>Referencing Ranges</h3>
<p>
The following properties return Range objects representing subsets of the visible pivot table:</p>
<p>
<b>ColumnRange</b></p>
<p>
ColumnRange represents the column area of the pivot table.</p>
<p>
<b>RowRange</b></p>
<p>
RowRange represents the row area of the pivot table.</p>
<p>
<b>PageRange</b></p>
<p>
PageRange represents the page area of the pivot table.</p>
<p>
<b>DataBodyRange</b></p>
<p>
DataBodyRange represents the data area of the pivot table.</p>
<p>
<b>DataLabelRange</b></p>
<p>
DataLabelRange represents the area containing labels for the data area of the pivot table.</p>
<p>
<b>TableRange1</b></p>
<p>
TableRange1 represents the entire pivot table, but does not include page fields. By using the SetSourceData method of a chart to connect the chart to this range, the chart will always display the current data shown in the pivot table.</p>
<p>
<b>TableRange2</b></p>
<p>
TableRange2 represents the entire pivot table, including the page fields.</p>
<h3>Protecting the PivotTable</h3>
<p>
There are a number of properties which you can use to control what the user can do to the pivot table at run time.</p>
<p>
<b>EnableDrillDown</b></p>
<p>
Set EnableDrillDown to False to prevent the user from using the drilldown feature.</p>
<p>
<b>EnableFieldDialog</b></p>
<p>
Set EnableFieldDialog to False to prevent the user from displaying the pivot table field dialog which can be used to reformat, reposition, and otherwise change fields.</p>
<p>
<b>EnableWizard</b></p>
<p>
Set EnableWizard to False to prevent the user from displaying the pivot table Wizard and changing its structure.</p>
<h2>The PivotCache Object</h2>
<p>
As discussed above, the PivotCache object represents the cached underlying data stored in RAM. This data is independent of the visible pivot table. It can be accessed as a property of the PivotTable which is derived from it:</p>
<pre><FONT FACE="Courier New" SIZE="2">PivotTables(“My PivotTable”).PivotCache
</font></pre>
<p>
Or from the PivotTables collection of the workbook object:</p>
<pre><FONT FACE="Courier New" SIZE="2">ActiveWorkbook.PivotCaches(1)
</font></pre>
<h3>Refreshing the PivotCache</h3>
<p>
You can refresh the PivotCache (i.e., requery the underlying data and rebuilt the cache) in two ways. Do it indirectly by calling the <b>RefreshTable</b> method of the PivotTable object, which refreshes the underlying cache. Or do it directly by calling the <b>Refresh</b> method of the PivotCache object.</p>
<h3>PivotCache Informational Properties</h3>
<p>
The following are properties of the PivotCache which return interesting information about the size and state of the cache:
<ul>
<li>
MemoryUsed<br><br></li>
<li>
RecordCount<br><br></li>
<li>
RefreshDate</li>
</ul>
<h3>Protecting the PivotCache</h3>
<p>
You can set the EnableRefresh property of the PivotCache to False to prevent the user from refreshing the cache. </p>
<h2>The PivotField Object</h2>
<p>
The PivotField object represents fields in the pivot table which correspond to columns in the underlying data set. To reference PivotFields in code, you access them through the PivotFields property of the PivotTable object:</p>
<pre><FONT FACE="Courier New" SIZE="2">PivotTables(“My PivotTable”).PivotFields(“Region”)
</font></pre>
<h3>PivotField Orientation</h3>
<p>
PivotFields can be oriented in a number of positions on the pivot table (hence the name “pivot” table&#45;you are literally pivoting columns of data into other positions). The possible orientations are:
<ul>
<li>
<b>xlPageField</b>&#45;the PivotField appears in the page field position as a combo box<br><br></li>
<li>
<b>xlColumnField</b>&#45;the PivotField appears in the column position as a column header<br><br></li>
<li>
<b>xlRowField</b>&#45;the PivotField appears in the row position as a row label<br><br></li>
<li>
<b>xlDataField</b>&#45;the PivotField appears in the body of the pivot table as summarized data<br><br></li>
<li>
<b>xlHidden</b>&#45;the PivotField does not currently appear in the pivot table (but remember, its still stored in the PivotCache)</li>
</ul>
<p>
<b>Orientation property</b></p>
<p>
You can change the orientation of any field by setting its <b>Orientation</b> property to any of the constants described above. For example:</p>
<pre><FONT FACE="Courier New" SIZE="2">With PivotTables(1)
.PivotFields(“Region”).Orientation = xlPageField
.PivotFields(“Quarter”).Orientation = xlRowField
.PivotFields(“Product”).Orientation = xlHidden
End With
</font></pre>
<p>
<b>AddFields method</b></p>
<p>
You can also use the <b>AddFields</b> method of the PivotTable object to place multiple PivotFields in the page, row, and column positions in one step.</p>
<p>
<b>Other collections of PivotFields</b></p>
<p>
The PivotTable object also provides properties representing subsets of the entire PivotFields collection. These are:
<ul>
<li>
<b>PageFields</b>&#45;a collection of PivotFields in the page orientation<br><br></li>
<li>
<b>ColumnFields</b>&#45;a collection of PivotFields in the column orientation<br><br></li>
<li>
<b>RowFields</b>&#45;a collection of PivotFields in the row orientation<br><br></li>
<li>
<b>DataFields</b>&#45;a collection of PivotFields in the data orientation<br><br></li>
<li>
<b>VisibleFields</b>&#45;a collection of all currently displayed PivotFields (page, column, row, and data)<br><br></li>
<li>
<b>HiddenFields</b>&#45;a collection of PivotFields not currently displayed in the pivot table</li>
</ul>
<h3>Useful PivotField Properties</h3>
<p>
<b>DataRange</b></p>
<p>
DataRange returns a Range object representing the values in a PivotField.</p>
<p>
<b>CurrentPage</b></p>
<p>
For PivotFields in the <b>page</b> position, CurrentPage returns or sets the value currently displayed in the combo box.</p>
<p>
<b>Subtotals</b></p>
<p>
For PivotFields in the <b>row</b> or <b>column</b> position, Subtotals determines if subtotals should be show (set to True or False).</p>
<p>
<b>NumberFormat</b></p>
<p>
For PivotFields in the <b>data</b> position, NumberFormat determines the formatting to be applied to numbers.</p>
<p>
<b>Function</b></p>
<p>
For PivotFields in the <b>data</b> position, determines the type of function used to summarize the data. Function can be one of the following: 
<ul>
<li>
xlAverage<br><br></li>
<li>
xlCount<br><br></li>
<li>
xlCountNums<br><br></li>
<li>
xlMax<br><br></li>
<li>
xlMin<br><br></li>
<li>
xlProduct<br><br></li>
<li>
xlStDev<br><br></li>
<li>
xlStDevP<br><br></li>
<li>
xlSum <br><br></li>
<li>
xlVar<br><br></li>
<li>
xlVarP</li>
</ul>
<p>
<b>Calculation</b></p>
<p>
For PivotFields in the data position, determines the type of calculation done by the specified pivot field. Calculation can be one of the following: 
<ul>
<li>
xlDifferenceFrom<br><br></li>
<li>
xlIndex<br><br></li>
<li>
xlNormal<br><br></li>
<li>
xlPercentDifferenceFrom<br><br></li>
<li>
xlPercentOf<br><br></li>
<li>
xlPercentOfColumn<br><br></li>
<li>
xlPercentOfRow<br><br></li>
<li>
xlPercentOfTotal<br><br></li>
<li>
xlRunningTotal</li>
</ul>
<h3>Grouping Data</h3>
<p>
You can further summarize data in a pivot table by grouping values of PivotFields in the page, column, or row position. For date/time data, Microsoft Excel offers automatic grouping into useful time periods like months and quarters. You can also manually group any set of items into your own groups. </p>
<p>
Grouping in accomplished by calling the Group method of a Range object. In the case of pivot tables, the range object to use is the DataRange property of the PivotField.</p>
<h3>Protecting PivotFields</h3>
<p>
There are a number of properties which you can use to control what the user can do to a PivotField at run time.</p>
<p>
<b>DragToColumn</b></p>
<p>
If set to False, the PivotField cannot be placed into the column orientation.</p>
<p>
<b>DragToRow</b></p>
<p>
If set to False, the PivotField cannot be placed into the row orientation.</p>
<p>
<b>DragToPage</b></p>
<p>
If set to False, the PivotField cannot be placed into the page orientation.</p>
<p>
<b>DragToHide</b></p>
<p>
If set to False, the PivotField cannot be removed from the pivot table</p>
<p>
<b>EnableDrillDown</b></p>
<p>
Set EnableDrillDown to False to prevent the user from using the drilldown feature on the PivotField. This overrides the “global” EnableDrillDown property at the PivotTable object level.</p>
<p>
<b>EnableFieldDialog</b></p>
<p>
Set EnableFieldDialog to False to prevent the user from displaying the pivot table field dialog which can be used to reformat, reposition, and otherwise change fields on the PivotField. This overrides the “global” EnableFieldDialog property at the PivotTable object level.</p>
<h2>PivotItems</h2>
<p>
If PivotFields represent fields in the pivot table, PivotItems represented individual values in a PivotField. To reference PivotItemss in code, you access them through the PivotItems property of the PivotField object:</p>
<pre><FONT FACE="Courier New" SIZE="2">PivotTables(1).PivotFields(“Region”).PivotItems(1)
</font></pre>
<h3>Useful PivotItem Properties</h3>
<p>
<b>Visible</b></p>
<p>
Visible determines of the PivotItem is visible. Set to False to hide.</p>
<p>
<b>Value &amp; Name</b></p>
<p>
These properties are synonymous, and return or set the displayed value of the item. Note that is possible to change the value/name and Microsoft Excel will remember it until the PivotCache is refreshed and the pivot table rebuilt.</p>
<p>
<b>SourceName</b></p>
<p>
This is the original value of the item prior to any changes to the Value/Name property in code.</p>
<p>
<b>Position</b></p>
<p>
The ordinal position of the item. Can be changed to reorder items.</p>
<h3>Other Collections of PivotFields</h3>
<p>
The PivotField object also provides properties representing subsets of the entire PivotItems collection. These are:
<ul>
<li>
<b>VisibleItems</b>&#45;a collection of PivotItems which are visible<br><br></li>
<li>
<b>HiddenItems</b>&#45;a collection of PivotItems which are hidden</li>
</ul>
<h2>Calculations in Pivot Tables</h2>
<p>
You can derive entirely new PivotFields in a pivot table by defining a calculated PivotField. The calculated PivotField is defined by a formula which can reference among other things, existing PivotFields. To do this, you use the <b>Add</b> method of the CalculatedItems collection, which is accessed through the PivotTable object. The Add method takes two arguments:
<ul>
<li>
Name&#45;the name of the new PivotField<br><br></li>
<li>
Formula&#45;a formula defining the new PivotField</li>
</ul>
<p>
For example, to derive a PivotField which calculated net income from revenue and expense, you would use the following syntax:</p>
<pre><FONT FACE="Courier New" SIZE="2">PivotTables(1).CalculatedItems.Add “NetIncome”, _
“=Revenue – Expense”
</font></pre>
<p>
Once this has been done, the new PivotField can be placed in any orientation just as if it was a normal PivotField.</p>
<p>
(Note: You can also create calculated PivotItems in a similar way. Refer to the online help for examples of this.)</p>
<h2>Managing Large Datasets</h2>
<p>
Since pivot tables store all the underlying data in RAM in the PivotCache, performance can degrade with very large data sets. There are two techniques available to manage large data sets.</p>
<h3>Server-Based Page Fields</h3>
<p>
Pivot tables have a new feature called Server-Based Page fields which can be used to manage memory when dealing with large data sets. For PivotFields in the page position, setting the ServedBased property to True will cause the pivot table to only query data into its cache that matched the currently displayed value in the page field. Thus, each time the selection is changed in the page field, the query is re-executed and the cache rebuilt. For large data sets, this can help manage the size of the cache. Of course, for small data sets, this will probably slow performance since it incurs a database hit every time the selection is changed. Having this property gives you the option of tuning the pivot table cache according to the situation. Note that when a field is server based, the “(all)” selection is not available since the whole data set is never in memory at once.</p>
<h3>Limiting Data Read into the PivotCache </h3>
<p>
Through thoughtful construction of the SQL statement that is used to build the PivotCache itself, you can limit the number of records read into RAM. For example, if you only need to analyze data for a particular region or for sales over a certain amount, restrict the data being read by using a WHERE clause on your original query.</p>
<h2>Suggested Reading</h2>
<p>
For more information on Microsoft Excel 97 development, the <b>Microsoft Excel 97 Developer’s Handbook</b> by Eric Wells and Steve Harshbarger available from Microsoft Press.</p>
<p>
For more information on developing with Microsoft Excel 97, Office 97, and other Microsoft tools for Intranet applications, try <b>Official Microsoft Intranet Solutions</b> by Micro Modeling Associates, Inc., also available from Microsoft Press.</p>
<p>
&copy; 1997 Microsoft Corporation. All rights reserved.</p>
<p>
The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.</p>
<p>
This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS SUMMARY.</p>
<p>
Microsoft and Visual Basic are registered trademarks of Microsoft Corporation.</p>
<p>
Other product or company names mentioned herein may be the trademarks of their respective owners.</p>
</font></BODY>
</HTML>

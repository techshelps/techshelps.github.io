<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Avoiding Remote Procedure Call Exceptions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Avoiding Remote Procedure Call Exceptions</H2><P>An application can cause an RPC_E_CANTCALLOUT_ININPUTSYNCCALL exception if it calls OLE functions from within a message handler. This exception occurs when the message handler calls a local server while processing a message that was generated by another process. The message can be the result of the process calling the <B>SendMessage</B> function directly, or calling a function that caused the system to send the message. For example, the RPC_E_CANTCALLOUT_ININPUTSYNCCALL exception would occur if an application calls the <B>IVCmdMenu::Activate</B> member function while handling the WM_ACTIVATE message. </P>
<P>To avoid this problem, an application should use its message handler to post itself a private message (WM_USER + <I>n</I>), and then call OLE functions from the code that handles the private message. The following example illustrates this technique. </P>
<P>LRESULT CALLBACK MyWindowProc (HWND, hwnd, UINT uMsg, WPARAM wParam, <BR>    LPARAM lParam)</P>
<P>{</P>
<P>    switch (uMsg) {</P>
<P>        case WM_ACTIVATE:</P>
<P>            .</P>
<P>            . // perform typical WM_ACTIVATE tasks</P>
<P>            .</P>
<P>            // Post a private message instead of calling OLE functions. </P>
<P>            PostMessage (hwnd, WM_MYACTIVATE, wParam, lParam);</P>
<P>            return 0;</P>
<P></P>
<P>        case WM_MYACTIVATE:</P>
<P>            pVoiceInterface-&gt;Activate(hwnd, NULL);</P>
<P>            return 0;</P>
<P></P>
<P>        .</P>
<P>        . //..process other messages</P>
<P>        .</P>
<P>    }</P>
<P>}</P>
<P></P>
<P>A slight variation of this technique is implemented in the voice object (VOICEOBJ.CPP and VOICEOBJ.H) that is part of the VOICEMDI sample in the Microsoft Speech SDK. See especially the CVoiceMenuObject::Activate, CVoiceMenuObject::ActivateMsg, CVoiceMenuObject::Deactivate, and CVoiceMenuObject::DeactivateMsg functions. </P></FONT></BODY></HTML>

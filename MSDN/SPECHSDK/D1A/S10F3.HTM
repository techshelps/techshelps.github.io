<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Distributing Processing Over a Network</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Distributing Processing Over a Network</H3><P>An engine might want to do some of its processing on a different machine than the one the application is running on. While the Microsoft Speech API provides no official way of implementing the distributed processing, it's fairly easy for an engine to distribute processing.</P>
<P>To distribute processing, split the engine into two parts.</P>
<P>The first part is basically a stub that takes all of the calls to the speech API and marshals the data over the network, to the second part. The engine stub supports all of the interfaces that the full engine supports, although it does almost none of the processing. In order to reduce network usage, the stub might do feature extraction on the host.</P>
<P>The second part of the engine lies on a server. It accepts the marshaled data from the stub and then processes it, sending back notifications to the stub as recognitions occur.</P>
<P>The engine might also support a custom interface, IMyDistributed. The IMyDistributed interface allows an application that knows about remote processing to control which machine the processing is on, and to finely control what kind of data is transmitted over the LAN (or other communication method) so that unneeded data (perhaps results objects) aren't transmitted.</P></FONT></BODY></HTML>

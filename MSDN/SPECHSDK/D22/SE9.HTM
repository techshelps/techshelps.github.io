<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Voice Menus</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Voice Menus</H3><P>A voice menu contains a set of one or more voice commands that can be recognized when the voice menu is active. This section describes the attributes of a voice menu.</P>
<H4><A NAME="sec0"></A>Name and Language</H4><P>Every voice menu has a name and a language. The name consists of two strings: the name of the application that uses the menu and a string that identifies the application state in which the menu is valid. The application name must be unique among all applications registered to use voice commands in the system. Typically, the state string is the title-bar text of the window or dialog box with which the voice menu is associated (for example, "Main Window"). An application uses the <B>VCMDNAME</B> structure to specify a voice menu's name. </P>
<P>A voice menu's language identifies the language and dialect that the speech-recognition engine should use for the menu. A language consists of a Win32 language identifier and a dialect string. An application uses the <B>LANGUAGE</B> structure to specify a voice menu's language.</P>
<H4><A NAME="sec1"></A>Activation</H4><P>Once a voice menu is created and has commands, it must be activated before its commands can be recognized. When a menu is active, the engine checks the menu for a matching command whenever the engine processes an utterance from the voice-command site. The engine does not check the menu when it is inactive. An application uses the <B>IVCmdMenu</B> interface with the <B>Activate</B> and <B>Deactivate</B> member functions to explicitly activate and deactivate a voice menu. The menu remains open after a <B>Deactivate</B> command, so the application only needs to call <B>Activate</B> to reactive the menu; the application does not need to reopen the menu. </P>
<P>When calling <B>Activate</B>, an application specifies whether the voice menu is to be associated with a particular window or is a global menu. When a voice menu is associated with a window, the menu is automatically activated whenever the window becomes the foreground window and is automatically deactivated when the user switches to another window. The application does not need to explicitly activate or deactivate the menu. Instead of being associated with a particular window, a voice menu can also be global. A <I>global voice menu</I> remains active at all times regardless of which window is in the foreground, until the application explicitly deactivates it. </P>
<P>A global voice menu is useful for an application such as a clock program. The user can, for example, ask what time it is and get a response no matter what other applications are active. Global menu commands have a lower priority in case of a recognition conflict, which happens when multiple commands with the same name appear in different menus. </P>
<P>When an application calls <B>Activate</B>, it specifies whether the voice menu should remain active when speech recognition is asleep for the voice-command site. By specifying the VWGFLAG_ASLEEP value, the application indicates that the menu should be active only when speech recognition is asleep and should be automatically deactivated when speech recognition is awake. A menu activated with the VWGFLAG_ASLEEP value is called a <I>sleep menu</I>. If the application does not specify this value, the menu is only active when speech recognition is awake. </P>
<H4><A NAME="sec2"></A>Phrase Lists</H4><P>An application can use the <B>IVCmdMenu::ListSet</B> member function to associate any number of phrase lists with a voice menu. A <I>phrase list</I> is a named set of words or phrases. By embedding the name of a list in the command string, the user can speak any word or phrase in the list at the given point in a command string. For example, a list named "myfriends" might contain the names "Linda," "Tom," and "Mary." If the list name were embedded in a command string, such as "Send mail to myfriends," the user could speak "Send mail to Linda," Send mail to Tom," or "Send mail to Mary."</P>
<P>Typically, a list contains information that changes dynamically at run time, such as the ten people to whom the user most recently sent electronic mail. For best results, a list should have fewer than 20 entries. Having more than 20 entries in a list can reduce the accuracy of recognition.</P>
<P>A list is associated with a menu rather than an individual command. The list must appear in at least one command string, but can be used by more than one command on the menu. The list persists until the voice-menu object is released. List entries are not automatically saved to disk. To preserve the list, call the <B>IVCmdMenu::ListGet</B> member function and take steps to store the result. <B>ListGet</B> retrieves the phrases stored in the current list for the selected voice menu. </P>
<P>The <B>IVCmdMenu::ListSet</B> member function is much faster than the <B>IVCmdMenu</B> interface's <B>Add</B>, <B>Remove</B>, or <B>Set</B> member functions because list entries are substituted when a command is recognized and the menu is not recompiled. This means that <B>ListSet</B> can be called on an active menu without affecting performance.</P>
<H4><A NAME="sec3"></A>Training</H4><P>The <B>IVCmdMenu::TrainMenuDlg</B> member function displays a modal dialog box to train the engine for the selected menu. Because the Train Menu dialog box is provided by the speech-recognition engine, the controls in the dialog box and the training it requests depend on the speech-recognition engine being used. Some engines may not offer this dialog box.</P>
<P>An application can call <B>TrainMenuDlg</B> to obtain training for the commands on a particular menu. In contrast, the training obtained by calling the <B>IVCmdDialogs::TrainGeneralDlg</B> member function applies to all commands, regardless of the menu they are on.</P></FONT></BODY></HTML>

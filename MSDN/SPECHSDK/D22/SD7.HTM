<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Site Attributes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Site Attributes</H3><P>Every voice-command site has a set of attributes that affect the interaction between the speech-recognition engine and the audio input device. An application can query and set a site's attributes by using the <B>IVCmdAttributes</B> interface provided by the voice-command object. To get a pointer to <B>IVCmdAttributes</B>, call the <B>IVoiceCmd::QueryInterface</B> member function with the IID_IVCmdAttributes interface identifier. All speech interfaces include the <B>IUnknown</B> functions <B>QueryInterface</B>, <B>AddRef</B>, and <B>Release</B>, so if you have a pointer to any interface for an object, it is not necessary to call <B>IUnknown</B> to get a pointer to another of the object's interfaces.</P>
<P>Because multiple applications can share the same voice-command site, changing a site attribute affects all applications registered to use the site, not just the application making the change. To receive notification of attribute changes, an application must specify the VCMDRF_ALLMESSAGES value when calling the <B>IVoiceCmd::Register</B> member function. Note that attribute settings are saved between uses of the site, even if the computer is shut off in the meantime.</P>
<H4><A NAME="sec0"></A>Audio Input Device</H4><P>An application can use the <B>IVCmdAttributes::DeviceSet</B> member function to change the audio input device for a voice-command site. To change the device, the application must specify the device identifier of the new device. An application can use the <B>waveInGetNumDevs</B> and <B>waveInGetDevCaps</B> multimedia functions to obtain the identifiers of the available audio devices in the system. The <B>IVCmdAttributes::DeviceGet</B> member function retrieves the device identifier of the wave-in audio device for the site. </P>
<H4><A NAME="sec1"></A>Speech-Recognition Mode</H4><P>A speech-recognition engine typically provides an assortment of modes that it can use to recognize speech in different languages and dialects. Each voice-command site uses a single speech-recognition mode. An application can change the mode for a voice-command site by specifying the GUID of the new mode in a call to the <B>IVCmdAttributes::SRModeSet</B> member function. To retrieve the GUID of the mode that the site is currently using, an application can call the <B>IVCmdAttributes::SRModeGet</B> member function.</P>
<H4><A NAME="sec2"></A>Speaker Name</H4><P>One way an application can improve the recognition accuracy of an engine is to train the engine to take into account the unique qualities of a user's voice. By using the <B>IVCmdDialogs</B> interface of the voice-command object, an application can direct the engine to display its training dialog box. </P>
<P>Typically, an engine's training dialog box displays a sequence of words and phrases that the user must speak into the audio input device. The engine processes the user's spoken input and saves information that helps the engine improve its recognition accuracy for the user. The engine saves the user's name (that is, the speaker name) along with the user's training information and uses the name to load the information whenever the user becomes the speaker for a site.</P>
<P>An application changes the speaker name for a voice-command site by using the <B>IVCmdAttributes::SpeakerSet</B> member function. Changing the speaker name unloads all training for the previous speaker and loads the training for the new speaker. If no training exists for the new speaker, the application starts with the engine's default training. The <B>IVCmdAttributes::SpeakerGet</B> member function retrieves the name of the current speaker for a site. </P>
<H4><A NAME="sec3"></A>Microphone Name</H4><P>Some speech-recognition engines can improve recognition accuracy by optimizing themselves for use with particular types of microphones. Setting a microphone name for a site allows the engine to identify the type of the microphone, so it can optimize itself accordingly. An application uses the <B>IVCmdAttributes::MicrophoneSet</B> and <B>IVCmdAttributes::MicrophoneGet</B> member functions to set and retrieve the microphone name. </P>
<H4><A NAME="sec4"></A>Awake State</H4><P>A voice-command site can be either awake or asleep. When a site is awake, the speech-recognition engine "listens" for commands for all active voice menus associated with the site. When a site is asleep, the engine listens for commands only from sleep menus. Commands from sleep menus become active only when the site is asleep, and they become inactive when the site is awake. An application uses the <B>IVCmdAttributes::AwakeStateSet</B> and <B>IVCmdAttributes::AwakeStateGet</B> member functions to set and retrieve the awake state. </P>
<P>An application can use <B>AwakeStateSet</B> to enable the user to briefly suspend voice commands for a site. For example, the user might want to suspend recognition from the computer microphone during a telephone conversation and resume recognition when the conversation is finished. A sleep menu typically contains a "Wake up!" command that resumes speech recognition, but it may contain other commands as well.</P>
<H4><A NAME="sec5"></A>Enabled State</H4><P>The <B>IVCmdAttributes::EnabledSet</B> member function enables or disables speech recognition for a voice-command site. Disabling a site completely turns off speech recognition for the site so that the engine recognizes no audio input, not even commands on sleep menus. For example, a user might want to disable speech recognition from the computer microphone during a meeting so that speech recognition will stay off, even if somebody inadvertently speaks a command on a sleep menu. The <B>IVCmdAttributes::EnabledGet</B> member function finds out whether a site is enabled or disabled. </P>
<P>The user can use the Speech control panel application to turn the system's speech capabilities on and off. When the system's speech capabilities are turned on or off, the WM_SPEECHSTARTED or WM_SPEECHENDED message is sent to all top-level windows in the system. An application can use these messages to determine when to enable or disable its voice-command capabilities.</P>
<H4><A NAME="sec6"></A>Automatic Gain</H4><P>Many speech-recognition engines can automatically adjust the gain of the incoming audio signal for a voice-command site (if the audio device supports it). <I>Gain</I> refers to the increase in signaling power, measured in decibels (dB), that occurs as a signal is boosted by an electronic device. </P>
<P>An application can use the <B>IVCmdAttributes::AutoGainEnableSet</B> member function to set the speed with which the engine adjusts the signaling power. When calling <B>AutoGainEnableSet</B>, the application specifies a value from 0 to 100. A value of 0 disables automatic gain, and a value of 100 causes the voice-command object to set the gain to the value for the previous utterance so that if the next utterance is spoken at the same level, the gain is set perfectly. A value between 0 and 100 moderates the automatic gain adjustments on a linear scale. For example, a value of 50 adjusts the gain to 50% of the level for the previous utterance. </P>
<P>An application retrieves the current automatic gain value for a voice-command site by using the <B>IVCmdAttributes::AutoGainEnableGet</B> member function.</P>
<H4><A NAME="sec7"></A>Threshold Level</H4><P>An application sets and retrieves the threshold level of a speech-recognition engine used by a voice-command site by using the <B>IVCmdAttributes</B> interface with the <B>ThresholdSet</B> and <B>ThresholdGet</B> member functions. The <I>threshold level</I> is a value from 0 to 100 that indicates the point below which the engine rejects an utterance as unrecognized. A value of 0 indicates that the engine should match any utterance to the closest phrase match. A value of 100 indicates that the engine should be absolutely certain that an utterance is the recognized phrase. For example, suppose the engine is expecting "What is the time?" If the threshold is 100 and the user mumbles "What'z tha time" or has a cold, the command may not be recognized. However, if the threshold is too low and the user says a similar-sounding phrase that is not being listened for, such as "What is mine?" the engine may recognize it as "What is the time?"</P>
<P>If the command spoken by the user is not close enough to what the speech-recognition engine expects, the voice-command object notifies the application that the command was not recognized by calling the application's <B>IVCmdNotifySink::CommandOther</B> notification interface with a NULL string. For more information about the voice-command notification interface, see "Notification Interface" later in this section.</P></FONT></BODY></HTML>

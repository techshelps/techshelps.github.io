<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VCMDCOMMAND</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>VCMDCOMMAND</H2><P></P>
<P>typedef struct {  // vccmd<BR>    DWORD dwSize;<BR>    DWORD dwFlags;<BR>    DWORD dwID;<BR>    DWORD dwCommand;<BR>    DWORD dwDescription;<BR>    DWORD dwCategory;<BR>    DWORD dwCommandText;<BR>    DWORD dwAction;<BR>    DWORD dwActionSize;<BR>    BYTE  abData[];<BR>} VCMDCOMMAND, *PVCMDCOMMAND;</P>
<P></P>
<P>Provides information about a command in a voice menu.</P>
<P></P>
<P>dwSize</P>
<P>Size, in bytes, of the VCMDCOMMAND structure, including the amount allocated for abData. The contents of abData must be doubleword-aligned, so round dwSize up to the nearest whole doubleword.</P>
<P></P>
<P>dwFlags</P>
<P>Flags that indicate information about the command. This member can be a combination of these values:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="161pt" VALIGN="TOP"><COL WIDTH="173pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Value</P></TD><TD VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>VCMDCMD_DISABLED_PERM</P></TD><TD VALIGN="TOP"><P>The command was disabled by using the <B>IVCmdMenu::EnableItem</B> member function so that voice commands will not recognize it. The command is not compiled into the voice menu.</P></TD></TR><TR><TD VALIGN="TOP"><P>VCMDCMD_DISABLED_TEMP</P></TD><TD VALIGN="TOP"><P>The command was disabled by using the <B>IVCmdMenu::SetItem</B> member function. The command is still compiled into the voice menu, however, so it can be reenabled without recompilation of the menu. </P></TD></TR><TR><TD VALIGN="TOP"><P>VCMDCMD_VERIFY</P></TD><TD VALIGN="TOP"><P>The application should prompt the user to verify the command before carrying it out. For example, this value should be set for a "Delete File" command. This value may be combined with either of the other values.</P></TD></TR><TR><TD VALIGN="TOP"><P>VCMDCMD_CANTRENAME</P></TD><TD VALIGN="TOP"><P>(New for 3.0) This indicates that the command is automatically generated and that navigator applications (such as Microsoft Voice) shouldn't allow users to rename the command. For example: A set of commands that are generated by extracting all of the menu items in the currently running application would have this flag set since there would be little point in users renaming them.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>dwID</P>
<P>Command identifier. This member can be used to identify a command to modify, or it can be used for notifications.</P>
<P></P>
<P>dwCommand</P>
<P>Offset from the beginning of this structure to first character of the voice command string (ANSI or Unicode, depending on which character set was used in the application). For example, the voice command string might be "Open the file" and the character at the offset specified by <B>dwCommand</B> would be 'O'. In languages such as Japanese that have both a phonemic and symbolic character set, the <B>dwCommand</B> member is the offset to a phonemic string.</P>
<P>Within the command string, the following characters have special meaning:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="273pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Character</P></TD><TD VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P> </P></TD><TD VALIGN="TOP"><P>Indicates the name of a list of words or phrases that can be spoken at this point in the command. For example, the command string "Send mail to name" contains a list called "name." To add phrases to the list, use the <B>IVCmdMenu::ListSet</B> member function.</P></TD></TR><TR><TD VALIGN="TOP"><P>{ }</P></TD><TD VALIGN="TOP"><P>Reserved for future use.</P></TD></TR><TR><TD VALIGN="TOP"><P>[ ]</P></TD><TD VALIGN="TOP"><P>Reserved for future use.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>dwDescription</P>
<P>Offset from the beginning of the structure to first character of a string that describes the action performed by the command.</P>
<P></P>
<P>dwCategory</P>
<P>Offset from the beginning of the structure to the first character of a string that indicates the category to which the command belongs. </P>
<P>Commands in a voice menu should be organized in different categories to help the user browse through lists of commands more easily. This is similar in concept to Windows menus, which organize commands under menu names such as "File," "Edit," "View," and so on. For best results, you should use 20 or fewer categories.</P>
<P></P>
<P>dwCommandText</P>
<P>Offset from the beginning of the structure to the first character of the command text, which is the string that is displayed to the user when he or she requests a list of available voice commands. If this member is NULL, an application uses the text pointed to by <B>dwCommand</B>, which is the voice-command string used in the application's user interface.</P>
<P>Most applications written for European languages will set this member<B> </B>to NULL because the language uses only one character set. Applications written for languages that have both a phonemic and symbolic character set, such as Japanese, will store the phonemic representation of the command in <B>dwCommand</B> and the symbolic representation (which is preferred by the user) in this member.</P>
<P></P>
<P>dwAction</P>
<P>Offset from the beginning of the structure to the first byte of a block of data that is sent to the application when the command is spoken.</P>
<P>Data passed with a command is not interpreted by voice commands; it is up to the application to determine whether the data is valid and to act upon it. Always check the validity of the data, because it is susceptible to being changed — accidentally or intentionally — by other applications, just as other applications can change an .INI file or registry file. </P>
<P></P>
<P>dwActionSize</P>
<P>Number of bytes required to store the block of data indicated by <B>dwAction</B>.</P>
<P></P>
<P>abData</P>
<P>Array of type <B>BYTE</B> that contains the command string, its description, its category, and additional data (if any) to pass to the application along with the command. Because all of the items in <B>abData</B> are doubleword-aligned, the size of <B>abData</B> should be a multiple of 4. All strings should be null-terminated (\0).</P>
<P></P>
<P>Because the items indicated by offsets into <B>abData</B> are doubleword-aligned, the offsets specified by <B>dwCommand</B>, <B>dwDescription</B>, <B>dwCategory</B>, <B>dwAction</B>, and <B>dwActionSize </B>should be multiples of 4.</P>
<P></P></FONT></BODY></HTML>

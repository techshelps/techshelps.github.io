<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Voice-Menu Commands</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Voice-Menu Commands</H3><P>A voice menu contains a list of voice commands to which an application can respond. An application uses the functions provided by a voice-menu object's <B>IVCmdMenu</B> interface to add commands to a voice menu, remove commands from the menu, modify commands, obtain information about commands, and so on. </P>
<P>A voice command is defined by a <B>VCMDCOMMAND</B> structure, which specifies the attributes of the command. This section describes the attributes common to all commands and describes the <B>IVCmdMenu</B> functions that an application uses to manage a voice menu's commands.</P>
<H4><A NAME="sec0"></A>Command Position and Identifier</H4><P>Each command in a voice menu has a position. The first command added to a menu is in position 1, the second is in position 2, and so on. New commands are always added to the end of the menu. </P>
<P>An application can assign a command identifier to each voice command in a menu. A command identifier is an application-defined doubleword value that uniquely identifies a command within its menu. When an application receives a notification from the voice-command object, the application can examine the command identifier to determine the command that is the subject of the notification. </P>
<P>The <B>IVCmdMenu</B> interface's <B>Remove</B>, <B>Get</B>, and <B>Set</B> member functions process commands either by their positions in the menu or by their identifiers, depending on whether the application specifies the VCMD_BY_POSITION or VCMD_BY_IDENTIFIER value. If VCMD_BY_POSITION is specified, the functions process one or more commands sequentially in the command set. If VCMD_BY_IDENTIFIER is specified, the functions process all of the commands with the identifier. </P>
<H4><A NAME="sec1"></A>Command String</H4><P>Every voice command must have a command string, such as "Open a file." During the speech-recognition process, an engine translates audio input into a string and compares it to the command strings in the active voice menus. A match constitutes a voice command. In languages, such as Japanese, that have both a phonemic and symbolic character set, the command string is a phonemic string.</P>
<P>Within the command string, the '' and '' characters indicate the name of a list of words or phrases that can be spoken at the given point in the command. For example, the command string "Send mail to name" contains a list called "name." To add phrases to the list, use the <B>IVCmdMenu::ListSet</B> member function. To retrieve the phrases stored in the current list for a voice menu, use the <B>IVCmdMenu::ListGet</B> member function.</P>
<P>Many speech-recognition engines support wildcards in command strings. Using wildcards allows the user to speak any words between certain key words in a phrase. For example, if an application defines a voice command of "{wild-card} mail {wild-card} name", the user could say, "Send mail to Fred," "I want to mail Fred," or even "Mail, yes, I want it to go to Fred." </P>
<H4><A NAME="sec2"></A>Command Text</H4><P>The <I>command text</I> is a string that an application displays to the user when he or she requests a list of the available voice commands for the application. If a command has no command text, the application displays the command string. </P>
<P>Most applications written for European languages do not use command text because these languages use only one character set. Applications written for languages that have both a phonemic character set and a symbolic character set, such as Japanese, store the phonemic representation of the command in the command string and the symbolic representation (which most users prefer to see) in the command text.</P>
<H4><A NAME="sec3"></A>Category String</H4><P>A voice command's <I>category string</I> indicates the category to which the command belongs. Commands in a voice menu should be organized into categories to help the user easily browse through lists of commands. This is similar to Windows menus, which organize commands under menu names such as "File," "Edit," "View," and so on. For best results, you should use 20 or fewer categories.</P>
<H4><A NAME="sec4"></A>Command Description</H4><P>A command's description is a string describing the action that the application performs in response to the command. The command description tells the user the purpose of the command. An application typically displays a command's description string along with its command text when the user requests a list of available voice commands for the application. </P>
<H4><A NAME="sec5"></A>Enabled State</H4><P>At any given instant, a voice command is either enabled or disabled. If a command is enabled, the engine includes it when attempting to match the user's utterance to a command in the voice menu. The engine excludes a command if it is disabled. </P>
<P>A command can be disabled either temporarily or permanently. When a command is temporarily disabled, the voice-command object sends a <B>IVCmdNotifySink::CommandOther</B> notification rather than a <B>IVCmdNotifySink::CommandRecognize</B> notification when the engine recognizes the disabled command. An application uses the <B>IVCmdMenu::SetItem</B> member function to temporarily disable and later reenable a voice command. </P>
<P>A voice command that is permanently disabled is not compiled into the voice menu. The engine cannot recognize a permanently disabled command, and no notifications are sent to the application when the user speaks the command. An application uses the <B>IVCmdMenu::EnableItem</B> member function to permanently disable and later reenable a voice command.</P>
<P>The <B>IVCmdMenu::SetItem</B> member function is much faster than the <B>IVCmdMenu::EnableItem</B> member function because the menu is not recompiled. This means that <B>SetItem</B> can be called on an active menu without affecting performance.</P>
<P>For best results, you should use the <B>IVCmdMenu::Deactivate</B> member function to deactivate the voice menu before calling <B>EnableItem</B>.<B> </B>Calling <B>EnableItem</B> on an active menu can be fairly slow because the menu must be deactivated, recompiled, and reactivated before the member function returns. If the menu is already deactivated when <B>EnableItem </B>is called, the menu is not recompiled until the application activates it again.</P>
<H4><A NAME="sec6"></A>Action Data</H4><P><I>Action data</I> is application-defined data associated with a command in a voice menu. The engine passes the data to the application's notification interface when the command is recognized. An application can associate action data with each command in a voice menu. </P>
<P>Action data should be some unique identifier, so the application knows what (if anything) to do with the command when it is spoken. For example, action data might be an index into a table. </P>
<P>Action data is not interpreted by the voice-command object; it is up to the application to determine whether the data is valid and to act upon it. An application should always check the validity of the action data because it is susceptible to being changed, accidentally or intentionally, by other applications. </P>
<H4><A NAME="sec7"></A>Command Operations</H4><P>After creating a voice-menu object, the <B>IVoiceCmd::MenuCreate</B> member function retrieves the address of an <B>IVCmdMenu</B> interface. An application uses the member functions of <B>IVCmdMenu</B> to add, remove, and retrieve information about the voice commands in a voice menu. </P>
<P>If the voice menu is new, the application must add commands to the voice menu before it can use the menu. An application adds voice commands to a voice menu by filling an array of <B>VCMDCOMMAND</B> structures, copying the address and size of the array into an <B>SDATA</B> structure, and passing the address of the <B>SDATA</B> structure to the <B>IVCmdMenu::Add</B> member function. New commands are appended to the end of the menu after any existing commands.</P>
<P>To remove commands from a voice menu, an application uses the <B>IVCmdMenu::Remove</B> member function. It uses the <B>IVCmdMenu::Set</B> member function to modify a range of the commands in a menu. </P>
<P>An application should deactivate a voice menu by calling the <B>IVCmdMenu::Deactivate</B> member function before calling the <B>IVCmdMenu</B> interface's <B>Add</B> or <B>Remove</B> member function. Calling these member functions on an active menu can be slow because the engine must must deactivate, recompile, and reactivate the menu before the function returns. If the menu is already deactivated when the member function is called, the menu is not recompiled until the application activates it again.</P>
<P>The <B>IVCmdMenu::Get</B> member function retrieves information about a range of commands in a voice menu. The application passes the address of an <B>SDATA</B> structure to <B>Get</B>. <B>Get</B> fills an array of <B>VCMDCOMMAND</B> structures containing information about each command and then copies the address and size of the array into the <B>SDATA</B> structure. An application can use the command information retrieved by <B>Get</B> to modify commands in the menu, create a new menu based on an existing one, or "borrow" commands from one menu and add them to another.</P>
<P><B>Get</B> uses the OLE task allocator to allocate memory for the command information and copies the address of the memory into the <B>pData</B> member of the <B>SDATA</B> structure. The application must free the memory by using the <B>CoTaskMemFree</B> function. If <B>Get</B> fails to allocate memory, the function sets the <B>pData</B> member to NULL and the <B>dwSize</B> member to zero.</P>
<P>A voice menu can contain any number of voice commands. An application uses the <B>IVCmdMenu::Num</B> member function to retrieve the number of commands in a voice menu.</P></FONT></BODY></HTML>

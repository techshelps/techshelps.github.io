<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing an Application for Voice Commands</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Initializing an Application for Voice Commands</H2><P>To use voice commands, you need to create a voice-command object, register your application with the object, and then create a voice-menu object to manage your application's voice menus. You create a voice-command object by calling the <B>CoCreateInstance</B> function with the CLSID_VCmd class identifier and the IID_IVoiceCmd interface identifier. You must create a separate voice-command object for each site that your application needs to use. </P>
<P><B>CoCreateInstance</B> returns a pointer to the <B>IVoiceCmd</B> interface for the voice-command object. Before it can perform other voice-command tasks, an application must register itself by calling the <B>IVoiceCmd::Register</B> member function. <B>Register</B> specifies the site that the object represents, and passes the address of the application's voice-command notification interface to the voice-command object.</P>
<P>After creating a voice-command object and registering the application, you can use the <B>IVoiceCmd::MenuCreate</B> member function to open a voice menu and create a voice-menu object to represent the menu. <B>MenuCreate</B> retrieves the address of the <B>IVCmdMenu</B> interface for the voice-menu object. You can use the interface's member functions to manage the menu and its commands.</P>
<P>The following example shows how to create a voice-command object, register an application, and create a voice-menu object. The example creates a temporary voice-menu object; that is, the object is not added to the voice-menu database maintained by the voice-command object.</P>
<P>// BeginOLE - initializes OLE, creates an instance of the voice-command </P>
<P>//   object, registers the application with the object, and creates a </P>
<P>//   temporary voice-menu object.</P>
<P>// Returns TRUE if successful or FALSE otherwise.</P>
<P>//</P>
<P>// Global variables and constants:</P>
<P>//   gpIVoiceCommmand - address of the IVoiceCmd interface for the </P>
<P>//     voice-command object</P>
<P>//   gpIVCmdDialogs - address of the IVCmdDialog interface for the </P>
<P>//     voice-command object</P>
<P>//   gpIVCmdMenu - address of the IVCmdMenu interface for the </P>
<P>//     voice-menu object</P>
<P>BOOL BeginOLE (void)</P>
<P>{</P>
<P>    HRESULT  hRes;</P>
<P>    VCMDNAME VcmdName;</P>
<P>    LANGUAGE Language;</P>
<P>    PIVCMDATTRIBUTES  pIVCmdAttributes;</P>
<P></P>
<P>    // Initialize interface pointers to NULL.</P>
<P>    gpIVoiceCommand = NULL;</P>
<P>    gpIVCmdDialogs = NULL;</P>
<P>    gpIVCmdMenu = NULL;</P>
<P></P>
<P>// Initialize OLE.</P>
<P>if (FAILED(CoInitialize(NULL))) </P>
<P>    return FALSE;</P>
<P></P>
<P>// Create the voice-command object.</P>
<P>if (CoCreateInstance(CLSID_VCmd, NULL, CLSCTX_LOCAL_SERVER, </P>
<P>        IID_IVoiceCmd, (LPVOID *) &amp;gpIVoiceCommand) != S_OK)</P>
<P>    goto fail;</P>
<P></P>
<P>// Retrieve the address of the voice-command object's IVCmdDialogs</P>
<P>// interface. The application uses this interface to direct the </P>
<P>// speech-recognition engine to display its configuration dialog boxes.</P>
<P>hRes = gpIVoiceCommand-QueryInterface(IID_IVCmdDialogs, </P>
<P>    (LPVOID FAR *) &amp;gpIVCmdDialogs);</P>
<P>if (hRes)</P>
<P>    goto fail;</P>
<P></P>
<P>// Register the application with the voice-command object.</P>
<P>hRes = gpIVoiceCommand-&gt;Register(</P>
<P>    "",               // use the default site (computer microphone)</P>
<P>    &amp;gVCmdNotifySink, // address of application's notification interface</P>
<P>    IID_IVCmdNotifySink, // GUID of the notification interface</P>
<P>    VCMDRF_ALLMESSAGES,  // send all notifications to the interface</P>
<P>    NULL);               // do not change the site settings</P>
<P>if (hRes)</P>
<P>    goto fail;</P>
<P></P>
<P>// Use the voice command's IVCmdAttributes interface to ensure that </P>
<P>// speech recognition is awake and enabled for the whole system. </P>
<P>hRes = gpIVoiceCommand-QueryInterface(IID_IVCmdAttributes, </P>
<P>    (LPVOID FAR *) &amp;pIVCmdAttributes);</P>
<P>if (pIVCmdAttributes) {</P>
<P>    pIVCmdAttributes-EnabledSet(TRUE);</P>
<P>    pIVCmdAttributes-AwakeStateSet(TRUE);</P>
<P>    pIVCmdAttributes-Release();</P>
<P>    };</P>
<P></P>
<P>// Create a voice-menu object.</P>
<P>lstrcpy (VcmdName.szApplication, "My Demo Application");</P>
<P>lstrcpy (VcmdName.szState, "Main");</P>
<P>Language.LanguageID = LANG_ENGLISH;</P>
<P>lstrcpy (Language.szDialect, "US English");</P>
<P>hRes = gpIVoiceCommand-&gt;MenuCreate( </P>
<P>    &amp;VcmdName,          // application name and state</P>
<P>    &amp;Language,          // language and dialect</P>
<P>    VCMDMC_CREATE_TEMP, // temporary menu (not stored in database)</P>
<P>    &amp;gpIVCmdMenu        // receives address of voice-menu object</P>
<P>    );</P>
<P>if (hRes)</P>
<P>    goto fail;</P>
<P></P>
<P>return TRUE;</P>
<P></P>
<P>// If the BeginOLE function fails, release the IVoiceCmd, IVCmdDialogs, </P>
<P>// and IVCmdMenu interfaces and set the interface pointers to NULL.</P>
<P>fail:</P>
<P>    if (gpIVoiceCommand)</P>
<P>        gpIVoiceCommand-&gt;Release();</P>
<P>    if (gpIVCmdDialogs)</P>
<P>        gpIVCmdDialogs-&gt;Release();</P>
<P>    if (gpIVCmdMenu)</P>
<P>        gpIVCmdMenu-&gt;Release();</P>
<P>    gpIVoiceCommand = NULL;</P>
<P>    gpIVCmdDialogs = NULL;</P>
<P>    gpIVCmdMenu = NULL;</P>
<P></P>
<P>    return FALSE;</P>
<P>}</P>
<P></P></FONT></BODY></HTML>

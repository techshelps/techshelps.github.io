<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing an Application for Speech Recognition</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Initializing an Application for Speech Recognition</H2><P>To implement speech-recognition features, you must initialize the OLE libraries and then create instances of at least three speech-recognition objects: the audio-source object, the speech-recognition engine object, and the grammar object. The audio-source object provides speech input to the engine object that processes the speech. The grammar object provides the engine with the words and rules that determine what the engine can recognize. In addition, you can use the speech-recognition sharing object and the speech-recognition enumerator to find an engine that meets your application's requirements. </P>
<P>The following example demonstrates how to initialize an application for speech recognition. It shows how to create the necessary objects for implementing speech recognition. The example accomplishes the following tasks:</P>
<P> <FONT FACE="Symbol">·</FONT>    Uses the <B>CoInitialize</B> function to initialize the OLE libraries. </P>
<P> <FONT FACE="Symbol">·</FONT>    Creates an instance of the multimedia audio-source object, which allows the engine to receive input from the multimedia wave-in driver. </P>
<P> <FONT FACE="Symbol">·</FONT>    Creates a speech-recognition sharing object and a speech-recognition enumerator. The application-defined FindSuitableEngine function (described in the following section) uses the sharing object and enumerator to find an engine and audio-source that meets the application's requirements.</P>
<P> <FONT FACE="Symbol">·</FONT>    Creates an instance of an application-defined class that implements the <B>ISRGramNotifySink</B> interface (described in "Processing Recognition Notifications" later in this section). The engine calls this interface to notify the application of recognition events. </P>
<P> <FONT FACE="Symbol">·</FONT>    Calls the application-defined InitializeGrammar function (described in "Loading a Grammar" later in this section) that loads a context-free grammar from a file and creates a grammar object. </P>
<P> <FONT FACE="Symbol">·</FONT>    Calls the <B>ISRGramCommon::Activate</B> member function to activate the newly created grammar. </P>
<P></P>
<P>// BeginOLE - Initializes OLE, creates the speech-recognition objects, </P>
<P>//     and activates a grammar.</P>
<P>// Returns TRUE if successful, or FALSE otherwise.</P>
<P>// </P>
<P>// Global variables:</P>
<P>//     g_pIAMMD - address of the IAudioMultimediaDevice interface</P>
<P>//     g_pIEnumSRShare - address of the IEnumSRShare interface</P>
<P>//     g_pGramNotifySink - address of the ISRGramNotifySink interface</P>
<P>//     g_szGramFile - name of the grammar file </P>
<P>//     g_hwndMain - handle of the application's main window</P>
<P>BOOL BeginOLE()</P>
<P>{</P>
<P>    HRESULT hRes;</P>
<P>    PISRFIND pISRFind = NULL;</P>
<P></P>
<P>    // Initialize OLE.</P>
<P>    if (FAILED(CoInitialize(NULL)))</P>
<P>        return FALSE;</P>
<P></P>
<P>    // Create the audio-source object and retrieve the address of the</P>
<P>    // object's IAudioMultimediaDevice interface. By default, the object </P>
<P>    // uses the WAVE_MAPPER device. </P>
<P>    if (CoCreateInstance(CLSID_MMAudioSource, NULL, CLSCTX_ALL, </P>
<P>            IID_IAudioMultiMediaDevice, (LPVOID *) &amp;g_pIAMMD) != S_OK)</P>
<P>        return FALSE;</P>
<P></P>
<P>    // Create a speech-recognition sharing object and retrieve the </P>
<P>    // address of the object's IEnumSRShare interface. </P>
<P>    CoCreateInstance(CLSID_SRShare, NULL, CLSCTX_ALL,IID_IEnumSRShare, </P>
<P>        (LPVOID *) &amp;g_pIEnumSRShare);</P>
<P></P>
<P>    // Create a speech-recognition enumerator and retrieve the address </P>
<P>    // of the enumerator's ISRFind interface.</P>
<P>    if (CoCreateInstance(CLSID_SREnumerator, NULL, CLSCTX_ALL,</P>
<P>            IID_ISRFind, (LPVOID *) &amp;g_pSRFind) != S_OK)</P>
<P>        return FALSE;</P>
<P></P>
<P>    // Call an application-defined function that uses the speech-</P>
<P>    // recognition sharing object and enumerator to find and select a </P>
<P>    // suitable speech-recognition engine.</P>
<P>    hRes = FindSuitableEngine(pISRFind);</P>
<P>    pISRFind-&gt;Release();</P>
<P>    if (hRes != NOERROR) return FALSE;</P>
<P></P>
<P>    // Create the grammar notification interface based on an </P>
<P>    // application-defined CISRGramNotifySink class. </P>
<P>    if ((g_pGramNotifySink = new CISRGramNotifySink) == NULL)</P>
<P>        return FALSE;</P>
<P></P>
<P>    // Call an application-defined function that reads grammar data from </P>
<P>    // a file and then loads the grammar. </P>
<P>    if (!InitializeGrammar(g_pISRCentral, g_szGramFile))</P>
<P>        return FALSE;</P>
<P></P>
<P>    // Activate the grammar.</P>
<P>    if ((hRes = g_pISRGramCommon-&gt;Activate(g_hwndMain, FALSE, NULL)) </P>
<P>            != NOERROR)</P>
<P>        return FALSE; </P>
<P> </P>
<P>    return TRUE;</P>
<P>}</P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Notification Interface</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Notification Interface</H3><P>Many engines provide notifications that are independent of the grammars that happen to be active, although the notifications are sent only when at least one grammar is active. These notifications include such things as when an utterance begins or ends, the Volume Units (VU) Meter level, and the background noise conditions.</P>
<P>To receive these messages, the application must create a COM object that supports the <B>ISRNotifySink</B> interface. The application's response to notifications is up to you.</P>
<P>Before the engine object can use the notification sink, the application must register the sink with the engine by calling the <B>ISRCentral::Register</B> member function, specifying the address of the <B>ISRNotifySink</B> interface, the IID_ISRNotifySink interface identifier, and the address of a double-word variable. If the engine does not support the interface, <B>Register</B> returns an error. If <B>Register</B> succeeds, the engine fills the double-word variable with a notification identifier that the application can use to unregister the notification sink.</P>
<P>During the time that the application has a notification sink registered with the engine, it receives the following notifications:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="260pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Member function</P></TD><TD VALIGN="TOP"><P>Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>AttribChanged</B></P></TD><TD VALIGN="TOP"><P>Called when an application changes an attribute of the speech-recognition engine. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Interference</B></P></TD><TD VALIGN="TOP"><P>Called when the engine cannot properly recognize an utterance for a known reason. The notification includes a flag indicating the reason.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>Sound</B></P></TD><TD VALIGN="TOP"><P>Called when the engine recognized a sound or a garbled word.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>UtteranceBegin</B></P></TD><TD VALIGN="TOP"><P>Called as soon as the speech-recognition engine has received any audio input that might be speech. However, the engine may not begin processing the speech for a few more seconds if it is already processing a previous utterance. The notification is tagged with a <B>QWORD</B> that identifies the time the speech started. An application can pass this into the <B>ISRCentral::ToFileTime</B> member function to determine the time (hours, minutes, and seconds) that the event occurred.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>UtteranceEnd</B></P></TD><TD VALIGN="TOP"><P>Called as soon as the speech-recognition engine senses that the user has stopped speaking. The notification has both a beginning time and ending time associated with it. Although many engines associate an utterance with a recognition result, this may not always be the case. Several utterances can occur before recognition results are returned, or several results can be returned for one utterance.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>VUMeter</B></P></TD><TD VALIGN="TOP"><P>A linear VU level from 0 to 0xFFFF, sent between 8 and 16 times a second, which indicates the loudness of the digital-audio stream. This information can be used to provide feedback to the user that the engine object is listening. Not all engines call this member function.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>An application can unregister a notification sink by calling the <B>ISRCentral::UnRegister</B> member function, specifying the identifier received in the call to the <B>Register </B>member function. Calling <B>UnRegister</B> is optional because if an application releases the engine object, it releases all of the notification sinks it is using. However, the release of the notification sink may not occur immediately after the engine is released.</P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SRRESWORDNODE</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>SRRESWORDNODE</H2><P></P>
<P>typedef struct {  // srrwn<BR>    DWORD             dwNextWordNode;<BR>    DWORD             dwUpAlternateWordNode;<BR>    DWORD             dwDownAlternateWordNode;<BR>    DWORD             dwPreviousWordNode;<BR>    DWORD             dwPhonemeNode;<BR>    QWORD             qwStartTime;<BR>    QWORD             qwEndTime;<BR>    DWORD             dwWordScore;<BR>    WORD              wVolume;<BR>    WORD              wPitch;<BR>    VOICEPARTOFSPEECH pos;<BR>    DWORD             dwCFGParse;<BR>    DWORD             dwCue;<BR>} SRRESWORDNODE, *PSRRESWORDNODE;</P>
<P></P>
<P>Provides information about a word node in a recognition/alternative graph generated by a speech-recognition engine.</P>
<P></P>
<P><B>dwNextWordNode</B></P>
<P>Node number of the node that follows next in time. For example, if the current node contains "Mail," the next node would contain "To." If the next node has several alternatives, this pointer should continue along the path that produces the highest path score at the final node. If there is nothing left in the path, this can be NULL.</P>
<P></P>
<P><B>dwUpAlternateWordNode</B></P>
<P>Number of an alternative node with a higher score than that of the word in this node. For example, if this node contains "Nail," the alternative node might contain "Mail." The alternative nodes should be ordered according to the highest word score. If there are no more alternatives, this can be NULL.</P>
<P></P>
<P><B>dwDownAlternateWordNode</B></P>
<P>Number of an alternative node with a lower score than that of the word in this node. For example, if this node contains "Mail," the alternative node might contain "Nail." The alternative nodes should be ordered according to the highest word score. If there are no more alternatives, this can be NULL.</P>
<P></P>
<P><B>dwPreviousWordNode</B></P>
<P>Node number of the previous node. If there are several previous nodes, this maps back along the highest path score at the final node. If there is nothing before this in the path, this can be NULL.</P>
<P></P>
<P><B>dwPhonemeNode</B></P>
<P>Node number of the first phoneme in the word. If an engine doesn't support phonemes or if such a mapping is inappropriate, this should be NULL.</P>
<P></P>
<P><B>qwStartTime</B></P>
<P>Time stamp, in bytes, when the audio for this node started. If the value is indeterminate, this is zero.</P>
<P></P>
<P><B>qwEndTime</B></P>
<P>Time stamp, in bytes, when the audio for this node ended. If the value is indeterminate, this is zero.</P>
<P></P>
<P><B>dwWordScore</B></P>
<P>Score for this individual word. It is valid to compare this score only against the scores of this word's alternatives. Engines should make this value a linear probability if possible. If an engine doesn't know the value, this is zero.</P>
<P></P>
<P><B>wVolume</B></P>
<P>Linear volume level of the word, from 1 to 0xFFFF. If the engine doesn't know the volume, this should be zero. Applications can use this information to determine emphasis or sentence type (for example, question or command) or to do transplanted prosody.</P>
<P></P>
<P><B>wPitch</B></P>
<P>Average pitch of the word in hertz. Engines that do not have information about this value set it to zero. Applications can use this information to determine emphasis or sentence type (for example, question or command) or to do transplanted prosody.</P>
<P></P>
<P><B>pos</B></P>
<P>Part of speech of the word, if known.</P>
<P></P>
<P><B>dwCFGParse</B></P>
<P>Unique identifier of the rule used to parse the word. This is the rule identifier from the <B>SRCFGRULE</B> structure that defines the rule in the grammar. (This member is valid only for context-free grammars.)</P>
<P>If an imported rule was used to parse the word, <B>dwCFGParse</B> contains the unique rule identifier from the <B>SRCFGIMPRULE</B> structure that defines the imported rule in the grammar. An application can use this information to determine the semantics of a word and save itself the work of parsing the tree. For example, suppose the context-free grammar contains the follow rules:</P>
<P>1 = SEQ(Send mail to 2)</P>
<P>2 = ALT(Mike, Bob, Fred)</P>
<P>If the engine recognizes "Send mail to Bob," the value of <B>dwCFGParse</B> would be 1 (for "Send mail to") and 2 (for "Bob").</P>
<P></P>
<P><B>dwCue</B></P>
<P>Cue that the engine has recognized but cannot translate into a word string. A node with a cue may not have a word associated with it. An engine is not required to return cues so an application should not expect them, although it should take advantage of cues that are returned. This member can be one of these values.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="173pt" VALIGN="TOP"><COL WIDTH="160pt" VALIGN="TOP"><COL WIDTH="13pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Value</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_COMMA</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>A comma should go here.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_DECLARATIVEBEGIN</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>A declarative sentence has begun. This cue must be followed by a closing SRRESCUE_DECLARATIVEEND.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_DECLARATIVEEND</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>A declarative sentence has ended.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_IMPERATIVEBEGIN</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>An imperative sentence has begun. This cue must be followed by a closing SRRESCUE_IMPERATIVEEND.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_IMPERATIVEEND</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>An imperative sentence has ended.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_INTERROGATIVEBEGIN</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>An interrogative sentence has begun. This cue must be followed by a closing SRRESCUE_INTERROGATIVEEND.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_INTERROGATIVEEND</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>An interrogative sentence has ended.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_NOISE</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>A noise has occurred.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_PAUSE</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The speaker has paused.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_SENTENCEBEGIN</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>A sentence has begun. This cue must be followed by a closing SRRESCUE_SENTENCEEND. If the engine has identified the sentence as interrogative, declarative, or imperative, it should use the more specific SRRESCUE_INTERROGATIVEBEGIN, SRRESCUE_DECLARATIVEBEGIN, or SRRESCUE_IMPERATIVEBEGIN cues.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_SENTENCEEND</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>A sentence has ended. If the engine has identified the sentence as interrogative, declarative, or imperative, it should use the more specific SRRESCUE_INTERROGATIVEEND, SRRESCUE_DECLARATIVEEND, or SRRESCUE_IMPERATIVEEND cues.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_UM</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The speaker has said a nonsense sound, such as "Um."</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_WILDCARD</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>This is a placeholder for a wildcard word in a context-free grammar.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRRESCUE_WORD</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The node contains a word.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Text Representation of Context-Free Grammars</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Text Representation of Context-Free Grammars</H3><P>Speech-recognition tools and engine vendors will supply tools for compiling context-free grammars into the standard context-free grammar binary format. These compilers will support both engine-specific formats and the following engine-independent text format.</P>
<P>The file containing a grammar in text format is an ANSI text file that consists of a series of comments, word definitions, and rule definitions.</P>
<H4><A NAME="sec0"></A>Comments</H4><P>A comment takes one of two forms, which follow the same rules as standard comments in C:</P>
<P>// Comment on a single line</P>
<P>/* Comment that can span multiple lines */</P>
<P></P>
<H4><A NAME="sec1"></A>Word Definitions</H4><P>A word definition uses the following syntax:</P>
<P>WordName <B>=</B> Number<B>;</B></P>
<P></P>
<P>The number specifies a numeric ID that identifies the word in an <B>SRWORD</B> structure. If a word's number is not defined in the file before it is referenced by a rule, a unique DWORD ID above 0x8000000 will be chosen automatically.</P>
<P>The DWORD is unique within the context of the grammar and for a specific object type. If the words loaded in a list use the same ID, the application will not have sufficient information to identify which word was spoken, unless it processes the text being returned with the word. Of course, an application should do this if, for example, "zero" and "oh" both mapped to the same semantic information.</P>
<P>When a rule is imported by a grammar, the word IDs referenced by the imported rules are not necessarily unique compared to the grammar's word IDs.</P>
<H4><A NAME="sec2"></A>Rule Definitions</H4><P>A rule definition uses the following syntax:</P>
<P>&lt;RuleName&gt; <B>=</B> Expression<B>;</B></P>
<P></P>
<P>This specifies a rule to be put in the grammar's list of <B>SRCFGRULE</B> structures.</P>
<P>The rule name must be enclosed in angled brackets (for example,  &lt;Start&gt; or &lt;_Number&gt; ). Unless the rule name has an underscore as its second character, it will be exported and put in the grammar's list of <B>SRCFGXRULE</B> structures.</P>
<H4><A NAME="sec3"></A>Expressions</H4><P>An expression can be one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="253pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Expression</P></TD><TD VALIGN="TOP"><P>Result</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>{RuleName}</P></TD><TD VALIGN="TOP"><P>The expression refers to another rule. If the rule is not defined in the text file, then it will be used as an imported rule in the <B>SRCFGIMPRULE</B> structure.</P></TD></TR><TR><TD VALIGN="TOP"><P>&lt;ListName&gt;</P></TD><TD VALIGN="TOP"><P>The expression refers to a list. If the list has not already been used, then a unique identifier for it will be generated by the compiler and stored in a <B>SRCFGLIST</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>Word</P></TD><TD VALIGN="TOP"><P>The expression consists of a word. A word can start with any alphabetic character, underscore (_), or hyphen (-). The rest of the word can consist of one or more alphanumeric characters. A word cannot contain white space. The word identifier is obtained from a previous word definition. If the word has not been already defined, then a definition will be implicitly generated.</P></TD></TR><TR><TD VALIGN="TOP"><P>(Expression)</P></TD><TD VALIGN="TOP"><P>The parentheses control the order of operation.</P></TD></TR><TR><TD VALIGN="TOP"><P>[Expression]</P></TD><TD VALIGN="TOP"><P>The expression is optional, using the SRCFGO_OPTIONAL value.</P></TD></TR><TR><TD VALIGN="TOP"><P>Expression+</P></TD><TD VALIGN="TOP"><P>(Repeat0) The expression can be repeated one or more times. It compiles to a SRCFGO_REPEAT value.</P></TD></TR><TR><TD VALIGN="TOP"><P>Expression*</P></TD><TD VALIGN="TOP"><P>(Repeat1) The expression can be repeated zero or more times. This is equivalent to [(Expression)+].</P></TD></TR><TR><TD VALIGN="TOP"><P>Expression Expression</P></TD><TD VALIGN="TOP"><P>(Sequence) Two or more expressions separated by a space compile into a set of words that are spoken sequentially, using the SRCFGO_SEQUENCE value.</P></TD></TR><TR><TD VALIGN="TOP"><P>Expression | Expression</P></TD><TD VALIGN="TOP"><P>(Alternative) Two or more expressions separated by a vertical bar compile into an alternate set of words, using the SRCFGO_ALTERNATIVE value.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The order of operations is:</P>
<P>    1.    Expressions in parentheses, optional expressions</P>
<P>    2.    Repeat0, Repeat1</P>
<P>    3.    Sequence</P>
<P>    4.    Alternative</P>
<P></P>
<H4><A NAME="sec4"></A>Example of a Text Representation of a Grammar</H4><P>For example, suppose a grammar is supposed to handle the following commands:</P>
<P> <FONT FACE="Symbol">·</FONT>    What time is it?</P>
<P> <FONT FACE="Symbol">·</FONT>    What day is it?</P>
<P> <FONT FACE="Symbol">·</FONT>    Send mail to {E-mail}</P>
<P></P>
<P>The text representation of the grammar would look like the following:</P>
<P>time = 103;</P>
<P>day = 104;</P>
<P>send = 105;</P>
<P>{Start} = What {_TimeDay} is it | Send mail to &lt;Email&gt;;</P>
<P>{_TimeDay} = time | day;</P>
<P></P></FONT></BODY></HTML>

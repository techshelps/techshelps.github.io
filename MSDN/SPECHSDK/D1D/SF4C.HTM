<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Finding a Suitable Engine and Audio Source</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Finding a Suitable Engine and Audio Source</H2><P>You use the speech-recognition sharing object and the speech-recognition enumerator to find and select an engine and audio-source pair that meets the needs of your application. Because sharing an engine and audio source  is more efficient in terms of system resources than using a private pair, you should try to find and use a shared pair before creating a private pair. You should follow these steps to find and select an engine and audio source:</P>
<P>    1.    Use the enumeration functions of the sharing object's <B>IEnumSRShare</B> interface to search for a suitable shared engine and audio-source pair. If the sharing object finds a suitable pair, use the <B>IEnumSRShare::Share</B> member function to use the shared pair for speech recognition. </P>
<P>    2.    If the sharing object doesn't find a suitable pair, use the speech-recognition enumerator's <B>ISRFind</B> or <B>ISREnum</B> interfaces to find a suitable engine, and then try to create a shared engine and audio-source pair by calling the <B>IEnumSRShare::New </B>member function.</P>
<P>    3.    If the <B>IEnumSRShare::New</B> member function fails, create a private engine and audio-source pair by calling the <B>ISRFind::Select</B> or <B>ISREnum::Select </B>member function. </P>
<P></P>
<P>The following example demonstrates how to find and select a suitable engine and audio-source pair. In the example, a "suitable engine" is one that supports WAVE_MAPPER as the audio-input device, recognizes English speech, and supports context-free grammars. </P>
<P>// FindSuitableEngine - Uses a speech-recognition enumerator to find a </P>
<P>//     speech-recognition engine that supports context-free grammars and </P>
<P>//     recognizes English speech.</P>
<P>// Returns a result code.</P>
<P>// pISRFind - address of the ISRFind interface</P>
<P>// </P>
<P>// Global variables:</P>
<P>//     g_srModeInfo - SRMODEINFO structure that contains information </P>
<P>//         about the current speech-recognition mode</P>
<P>//     g_qwInstID - instance identifier of the shared engine/audio-</P>
<P>//         source pair</P>
<P>//     g_pIEnumSRShare - address of the IEnumSRShare interface</P>
<P>//     g_pISRCentral - address of the ISRCentral interface</P>
<P>//     g_pIAMMD - address of the IAudioMultimediaDevice interface</P>
<P></P>
<P>HRESULT FindSuitableEngine(PISRFIND pISRFind)</P>
<P>{</P>
<P>    SRMODEINFO srmiFound;</P>
<P>    SRSHARE srShare;</P>
<P>    HRESULT hRes;</P>
<P>    ULONG uNum;</P>
<P>    GUID guid;</P>
<P>    DWORD dwNumFound;</P>
<P>    PISRENUM pISREnum;</P>
<P></P>
<P>    // Erase the contents of the global SRMODEINFO structure. </P>
<P>    ZeroMemory(&amp;g_srModeInfo, sizeof(g_srModeInfo));</P>
<P></P>
<P>    // Define the mode to look for by filling the relevant members of </P>
<P>    // the global SRMODEINFO structure. </P>
<P>    g_srModeInfo.language.LanguageID = </P>
<P>        MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US);</P>
<P>    g_srModeInfo.dwGrammars = SRGRAM_CFG;</P>
<P></P>
<P>    // Use the speech-recognition sharing object to find a suitable </P>
<P>    // shared engine/audio-source pair.</P>
<P>    if (g_pIEnumSRShare != NULL) {</P>
<P>        while (TRUE) {</P>
<P>            ZeroMemory(&amp;srShare, sizeof(srShare));</P>
<P>            hRes = g_pIEnumSRShare-&gt;Next(1, &amp;srShare, &amp;uNum);</P>
<P>            if ((hRes == S_FALSE) || (FAILED(hRes)))</P>
<P>                break;</P>
<P>            if ((srShare.dwDeviceID == WAVE_MAPPER) &amp;&amp;</P>
<P>                    (srShare.srModeInfo.language.LanguageID == </P>
<P>                        g_srModeInfo.language.LanguageID) &amp;&amp;</P>
<P>                    (srShare.srModeInfo.dwGrammars == </P>
<P>                        g_srModeInfo.dwGrammars))</P>
<P>                break;</P>
<P>        }</P>
<P>    </P>
<P>        // See if a shared mode was found by using memcmp (a C run-time </P>
<P>        // function) to check if the GUID is zero. If the GUID is valid, </P>
<P>        // share the engine/audio-source pair.</P>
<P>        ZeroMemory(&amp;guid, sizeof(guid));</P>
<P>        if (memcmp(&amp;srShare.srModeInfo.gModeID, &amp;guid, </P>
<P>                 sizeof(GUID)) != 0) {</P>
<P>            hRes = g_pIEnumSRShare-&gt;Share(srShare.qwInstanceID, </P>
<P>                   (PISRCENTRAL *) &amp;g_pISRCentral);</P>
<P>                if (hRes == NOERROR) </P>
<P>                    return NOERROR; </P>
<P>        }</P>
<P>    }</P>
<P></P>
<P>    // No shared mode found. Use an engine enumerator to find a suitable</P>
<P>    // engine. </P>
<P>    ZeroMemory(&amp;srmiFound, sizeof(srmiFound));</P>
<P>    if (hRes = pISRFind-&gt;QueryInterface(IID_ISREnum, </P>
<P>            (LPVOID *) &amp;pISREnum) != NOERROR)</P>
<P>        return hRes;</P>
<P></P>
<P>    while (hRes = pISREnum-&gt;Next(1, &amp;srmiFound, &amp;dwNumFound) == NOERROR)</P>
<P>        if ((srmiFound.language.LanguageID == </P>
<P>            g_srModeInfo.language.LanguageID) </P>
<P>            &amp;&amp; (srmiFound.dwGrammars == g_srModeInfo.dwGrammars))  </P>
<P>            break;</P>
<P>                 </P>
<P>    pISREnum-&gt;Release();    // release enumerator</P>
<P></P>
<P>    // See if the enumerator found a suitable engine.</P>
<P>    ZeroMemory(&amp;guid, sizeof(guid));</P>
<P>    if (memcmp(&amp;srmiFound.gModeID, &amp;guid, sizeof(GUID)) == 0) </P>
<P>        return -1;          // no suitable engine found</P>
<P></P>
<P>    // The engine is suitable. Try to create an engine/audio-source pair </P>
<P>    // that can be shared. </P>
<P>    if (g_pIEnumSRShare != NULL) {</P>
<P>        hRes = g_pIEnumSRShare-&gt;New(WAVE_MAPPER, srmiFound.gModeID, </P>
<P>           (PISRCENTRAL *) &amp;g_pISRCentral, &amp;g_qwInstID);</P>
<P>        if (hRes == NOERROR)</P>
<P>            return NOERROR; // engine successfully shared</P>
<P>    }</P>
<P></P>
<P>    // Couldn't create a shared pair. Try to create a private </P>
<P>    // engine/audio-source pair.</P>
<P>    hRes = pISRFind-&gt;Select(srmiFound.gModeID, &amp;g_pISRCentral, </P>
<P>        (LPUNKNOWN) g_pIAMMD); </P>
<P>    if (hRes == NOERROR)</P>
<P>        return NOERROR;     // private mode successfully created</P>
<P></P>
<P>    return -1; // no suitable engine</P>
<P>}</P>
<P></P></FONT></BODY></HTML>

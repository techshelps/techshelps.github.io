<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISRCentral::GrammarLoad</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>ISRCentral::GrammarLoad</H2><P></P>
<P>HRESULT GrammarLoad(SRGRMFMT eFormat, SDATA dData, </P>
<P>    PVOID pNotifyInterface, IID IIDNotifyInterface, </P>
<P>    PIUNKNOWN *ppiUnknown);</P>
<P></P>
<P>Loads a grammar that was archived in a data buffer, or that was just created, and returns a grammar object. The application uses the grammar object to activate the grammar and begin recognizing speech.</P>
<P> <FONT FACE="Symbol">·</FONT>    Returns NOERROR if successful, or one of these error values:</P>
<P>E_INVALIDARG<BR>E_OUTOFMEMORY<BR>SRERR_GRAMMARERROR<BR>SRERR_GRAMMARTOOCOMPLEX<BR>SRERR_GRAMMARWRONGTYPE<BR>SRERR_GRAMTOOLARGE<BR>SRERR_INVALIDCHAR<BR>SRERR_INVALIDINTERFACE<BR>SRERR_NOTSUPPORTED<BR>SRERR_TOOMANYGRAMMARS</P>
<P></P>
<P><I>eFormat</I></P>
<P>[in] Format of the data in <I>dData</I>. This parameter can be one of these values:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="183pt" VALIGN="TOP"><COL WIDTH="150pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Value</P></TD><TD VALIGN="TOP"><P>Meaning</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>SRGRMFMT_CFG</P></TD><TD VALIGN="TOP"><P>The data conforms to the standard context-free grammar format.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRGRMFMT_DICTATION</P></TD><TD VALIGN="TOP"><P>The data conforms to the standard dictation grammar format.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRGRMFMT_LIMITEDDOMAIN</P></TD><TD VALIGN="TOP"><P>The data conforms to the standard limited-domain grammar format.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRGRMFMT_CFGNATIVE</P></TD><TD VALIGN="TOP"><P>The data is in the engine's native format for context-free grammars.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRGRMFMT_DICTATIONNATIVE</P></TD><TD VALIGN="TOP"><P>The data is in the engine's native format for dictation grammars.</P></TD></TR><TR><TD VALIGN="TOP"><P>SRGRMFMT_LIMITEDDOMAINNATIVE</P></TD><TD VALIGN="TOP"><P>The data is in the engine's native format for limited-domain grammars.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>dData</I></P>
<P>[in] Address of an <B>SDATA</B> structure that contains the data to be passed to the speech-recognition engine. If the grammar is new and has not been previously archived, this should contain the grammar's tree. If the grammar has been previously archived, the engine may have written the grammar in its own native format to a data buffer. </P>
<P>As an alternative, the <B>pData</B> member of the <B>SDATA</B> structure can point to a memory-mapped file so that the application doesn't need to load all of the data into memory at once. However, it is up to the application to call the <B>CreateFileMapping</B>, <B>UnmapViewOfFile</B>, and <B>CloseHandle</B> functions.</P>
<P></P>
<P><I>pNotifyInterface</I></P>
<P>[in] Address of the notification interface through which the grammar notifies the application about recognition information. The interface identifier is specified by <I>IIDNotifyInterface</I>. This parameter can be NULL if the application doesn't require notification. </P>
<P>Because passing the address does not transfer ownership of the notification interface, the grammar must call the <B>AddRef</B> member function of the notification interface before returning from the call to the <B>GrammarLoad </B>member function. When the grammar closes, it must also call the <B>Release</B> member function of the notification interface. The application must release any reference counts it holds on the notification interface after calling <B>GrammarLoad</B>, unless it needs the notification object to be valid when the grammar releases it. </P>
<P></P>
<P><I>IIDNotifyInterface</I></P>
<P>[in] Identifier of the interface that receives notifications. Currently, the identifier must be IID_ISRGramNotifySinkA (for ANSI) or IID_ISRGramNotifySinkW (for Unicode). An application can use IID_ISRGramNotifySink to get ANSI or Unicode, depending on the default for the application. An engine can define additional values to support custom interfaces.</P>
<P></P>
<P><I>ppiUnknown</I></P>
<P>[out] Address of a variable that receives a pointer to the <B>IUnknown</B> interface for the newly created grammar object. If an error occurs, the function sets this parameter to NULL.</P>
<P></P>
<P>If the grammar is new and has not been archived, the application should pass a data buffer that contains the grammar's tree. If the grammar was archived and the <B>ISRGramCommon::Archive</B> member function returned data in native format for an engine that is still running, the application should pass that data.</P>
<P>If the grammar was archived with speech-recognition results objects (that is, with the <I>fArchiveResults</I> parameter of the <B>Archive</B> member function set to TRUE), the grammar object calls the <B>ISRGramNotifySink::UnArchive</B> member function for each results object previously archived with the grammar.</P>
<P>Loading a standard-format grammar (SRGRMFMT_CFG, SRGRMFMT_LIMITEDDOMAIN, or SRGRMFMT_DICTATION) may take some time — up to several seconds — because the speech-recognition engine may need to compile the grammar into its own native format. After loading such a grammar, the application should call the <B>ISRGramCommon::Archive</B> member function to store the grammar in native format so it can be used again later. For more information about standard-format grammars, see Appendix B, "Standard Grammar Formats."</P>
<P>Loading a grammar in native format (SRGRMFMT_CFGNATIVE, SRGRMFMT_DICTATIONNATIVE, or SRGRMFMT_LIMITEDDOMAINNATIVE) is faster than doing so in standard formats because the engine has already processed the information. Some speech-recognition modes may use the same grammar format so an application can use that format for multiple modes without having to recompile the grammar. If the grammar is not in the engine's native format, the engine returns an error.</P>
<P>If the grammar cannot be loaded because it is too complex or too large, or if it requires features not provided by the engine, the <B>GrammarLoad</B> member function returns an error.</P>
<P>When a grammar object is released, the grammar is automatically deactivated.</P>
<P>Some engines accept the grammar data as is and create a separate thread to process the data. If the data contains an error, calls to functions in the grammar interfaces (<B>ISRGramCFG</B>, <B>ISRGramCommon</B>, or <B>ISRGramDictation</B>) may fail. If a call to a function requires that the data be completely processed, the function doesn't execute until after the data is processed.</P></FONT></BODY></HTML>

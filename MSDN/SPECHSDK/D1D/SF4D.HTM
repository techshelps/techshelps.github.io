<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Loading a Grammar</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Loading a Grammar</H2><P>A grammar provides a speech-recognition engine with the words and rules that determine what the engine can recognize. Before an engine can use a grammar, you must create and load a grammar object by calling the <B>ISRCentral::GrammarLoad</B> member function. The function's arguments include an <B>SDATA</B> structure that specifies the address and size of the grammar's data, and the address of the <B>ISRGramNotifySink</B> interface that the engine uses to notify the application of recognition events. The <B>GrammarLoad</B> member function returns the address of the grammar object's <B>IUnknown</B> interface. The application can use <B>IUnknown</B> to retrieve the addresses of other interfaces provided by the grammar object, including <B>ISRGramCommon</B> and <B>ISRGramCFG</B>. </P>
<P>The following example shows how to load a grammar, create a grammar object, and obtain the addresses of the grammar object's <B>ISRGramCommon</B> and <B>ISRGramCFG</B> interfaces. The example includes a function called GrammarReadFile that creates a memory object, reads grammar data from a file into the object, and fills an <B>SDATA</B> structure with the address and size of the object. </P>
<P>// InitializeGrammar - Loads a context-free grammar and obtains the</P>
<P>//     addresses of interfaces supported by the grammar object. </P>
<P>// Returns TRUE if successful, or FALSE otherwise</P>
<P>// pISRCentral - address of the ISRCentral interface</P>
<P>// pszFileName - name of the grammar file </P>
<P>//</P>
<P>// Global variables:</P>
<P>//     g_pGramNotifySink - address of the application's </P>
<P>//         ISRGramNotifySink interface</P>
<P>//     g_pISRGramCommon - address of the ISRGramCommon interface</P>
<P>//     g_pISRGramCFG - address of the ISRGramCFG interface</P>
<P>//     g_pISRGramDictation - address of the ISRGramDictation </P>
<P>//         interface</P>
<P>BOOL InitializeGrammar(PISRCENTRAL pISRCentral, LPSTR pszFileName)</P>
<P>{</P>
<P>    SDATA dGramData;</P>
<P>    HGLOBAL hgbl;</P>
<P>    HRESULT hRes;</P>
<P>    LPUNKNOWN lpUnk;</P>
<P>    </P>
<P>    // Call an application-defined function that reads the contents of </P>
<P>    // the specified grammar file into a global memory object. </P>
<P>    if (!GrammarReadFile(pszFileName, &amp;dGramData, &amp;hgbl))</P>
<P>        return FALSE;</P>
<P></P>
<P>    // Load the grammar and create a grammar object.</P>
<P>    hRes = pISRCentral-&gt;GrammarLoad(SRGRMFMT_CFG, dGramData, </P>
<P>        (PVOID)g_pGramNotifySink, IID_ISRGramNotifySink, &amp;lpUnk);</P>
<P></P>
<P>    // Unlock and free the global memory object.</P>
<P>    GlobalUnlock(hgbl);</P>
<P>    GlobalFree(hgbl);</P>
<P>        if (hRes != NOERROR) {</P>
<P>        HandleError(hRes);</P>
<P>        return FALSE;</P>
<P>    }</P>
<P></P>
<P>    // Get the address of the ISRGramCommon interface.</P>
<P>    hRes = lpUnk-&gt;QueryInterface(IID_ISRGramCommon, </P>
<P>        (void**) &amp;g_pISRGramCommon);</P>
<P>    if (hRes != NOERROR) {</P>
<P>        HandleError(hRes);</P>
<P>        lpUnk-&gt;Release();</P>
<P>        return FALSE;</P>
<P>    }</P>
<P>    </P>
<P>    // Get the address of the ISRGramCFG interface.</P>
<P>    hRes = lpUnk-&gt;QueryInterface(IID_ISRGramCFG, </P>
<P>        (void**) &amp;g_pISRGramCFG);</P>
<P>    if (hRes != NOERROR) {</P>
<P>        HandleError(hRes);</P>
<P>        lpUnk-&gt;Release();</P>
<P>        return FALSE;</P>
<P>    }</P>
<P></P>
<P>    // Get the address of the ISRGramDictation interface.</P>
<P>    hRes = lpUnk-&gt;QueryInterface(IID_ISRGramDictation, </P>
<P>        (void**) &amp;g_pISRGramDict);</P>
<P></P>
<P>    lpUnk-Release();</P>
<P>    return TRUE;</P>
<P>}</P>
<P></P>
<P>// GrammarReadFile - Reads the contents of a grammar file into a global </P>
<P>//     memory object.</P>
<P>// Returns TRUE if successful, or FALSE otherwise.</P>
<P>// pszFileName - name of the grammar file</P>
<P>// pData - address of a structure that receives the size and address </P>
<P>//     of the grammar data</P>
<P>// phgbl - address of a variable that receives the handle of the memory </P>
<P>/      object</P>
<P>BOOL GrammarReadFile(LPSTR pszFileName, PSDATA pData, HGLOBAL *phgbl)</P>
<P>{</P>
<P>    HANDLE hf;</P>
<P>    DWORD dwBytesRead;</P>
<P></P>
<P>    // Open the grammar file.</P>
<P>    hf = CreateFile(pszFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING, </P>
<P>            FILE_ATTRIBUTE_NORMAL, NULL);</P>
<P>    if (hf == NULL) </P>
<P>        return FALSE;</P>
<P></P>
<P>    // Retrieve the file size and allocate a global memory object</P>
<P>    // to contain the file's contents.</P>
<P>    pData-dwSize = GetFileSize(hf, NULL);</P>
<P>    *phgbl = GlobalAlloc(GMEM_ZEROINIT, pData-dwSize);</P>
<P>    pData-pData = GlobalLock(*phgbl);</P>
<P></P>
<P>    if (!pData-pData) {</P>
<P>        CloseHandle(hf);</P>
<P>        return FALSE;</P>
<P>    }</P>
<P></P>
<P>    // Read the contents of the file into memory, filling the SDATA</P>
<P>    // structure in the process.</P>
<P>    ReadFile(hf, pData-&gt;pData, pData-&gt;dwSize, &amp;dwBytesRead, NULL);</P>
<P></P>
<P>    CloseHandle(hf);</P>
<P>    return TRUE;</P>
<P>}</P>
<P></P></FONT></BODY></HTML>

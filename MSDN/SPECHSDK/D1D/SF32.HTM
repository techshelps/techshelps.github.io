<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Speaker Profiles</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Speaker Profiles</H3><P>A speech-recognition engine can collect information from a speaker to improve its recognition accuracy for that speaker, and the engine can store the information in an object called a <I>speaker profile</I>. Storing speaker information in a profile allows an application to transfer speaker information from one system to another, saving the speaker from having to perform training again when switching to another system. Using speaker profiles is extremely useful for dictation systems, which often require a lot of training, and speech servers, which need to share training. For command and control applications, the effort of transferring a speaker profile may outweigh the benefits.</P>
<P>A speaker profile includes all of the information that the engine has collected about a particular speaker, including:</P>
<P> <FONT FACE="Symbol">·</FONT>    A data header to ensure that the application isn't passing information to the wrong engine</P>
<P> <FONT FACE="Symbol">·</FONT>    The languages for which training has been done</P>
<P> <FONT FACE="Symbol">·</FONT>    The known patterns of speech and the language model</P>
<P> <FONT FACE="Symbol">·</FONT>    The pronunciation of specific words</P>
<P> <FONT FACE="Symbol">·</FONT>    The phonetic training for the speaker</P>
<P> <FONT FACE="Symbol">·</FONT>    The identifier of the speaker</P>
<P> <FONT FACE="Symbol">·</FONT>    The speaker's preferences</P>
<P> <FONT FACE="Symbol">·</FONT>    The number of hours of training that the speaker accomplished to create the profile (useful for merging speakers)</P>
<P></P>
<P>Speaker profiles are optional — an engine may or may not support them. An application determines if the engine supports profiles by calling the <B>QueryInterface</B> member function with the IID_ISRSpeaker interface identifier. If the engine supports speaker profiles, <B>QueryInterface</B> returns the address of the engine object's <B>ISRSpeaker</B> interface. </P>
<P>An application uses the <B>ISRSpeaker</B> interface to manipulate speaker profiles. The <B>ISRSpeaker::Read</B> member function retrieves the profile for a given speaker and copies it into a buffer. The <B>Write</B> member function writes a speaker profile from another system into the current system, and the <B>Merge</B> member function merges a speaker profile from another system into the given profile on the current system.</P>
<P>An application can retrieve the name of the current speaker by using the <B>ISRSpeaker::Query</B> member function. To enumerate the names of all speakers known to the speech-recognition engine, and application can use the <B>Enum</B> member function. An application can select a speaker to be the current speaker in the system by using the <B>Select</B> member function. </P>
<P>An application uses the <B>ISRSpeaker::New</B> member function to create a new profile for a speaker. The new profile initially contains only the default training information supplied by the engine. The engine adds additional information as it completes training for the speaker. An application can use the <B>Revert</B> member function to restore the profile to its original state. For example, an application can use <B>Revert</B> to cancel undesirable changes such as those caused by extraneous noise or unrelated conversations during a training session. An application can delete a speaker profile by using the <B>Delete</B> member function.</P></FONT></BODY></HTML>

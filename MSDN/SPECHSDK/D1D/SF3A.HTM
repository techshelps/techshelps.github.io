<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generating a Context-Free Grammar</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Generating a Context-Free Grammar</H3><P>The easiest way to generate a context-free grammar is to use a context-free grammar (CFG) compiler that accepts a text file containing the rules and words used and compiles it into the standard binary format that is sent to the engine. Such compilers can be obtained from engine vendors or third-party suppliers.</P>
<P>If an application does not have access to a CFG compiler, or if the grammar must be constructed programmatically because you cannot predict its contents, the application must deal with the binary format directly.</P>
<P>To use the binary format, the application must determine the following information:</P>
<P> <FONT FACE="Symbol">·</FONT>    The words in the grammar and the unique identifiers for each word</P>
<P> <FONT FACE="Symbol">·</FONT>    The rules that define the syntax of the grammar</P>
<P> <FONT FACE="Symbol">·</FONT>    The rules that are exported so they can be individually activated or linked with other grammars</P>
<P> <FONT FACE="Symbol">·</FONT>    If rules refer to lists, the list names and identifiers</P>
<P> <FONT FACE="Symbol">·</FONT>    The rules that are imported from other grammars</P>
<P> <FONT FACE="Symbol">·</FONT>    The human language for which the grammar is designed</P>
<P></P>
<P>The application constructs this information by filling a block of memory with appropriate structures, such as <B>SRWORD</B>, <B>SRCFGRULE</B>, <B>SRCFGXRULE</B>, <B>SRCFGIMPRULE</B>, <B>SRCFGLIST</B>, and <B>LANGUAGE</B>. An application must combine these structures into a series of "chunks" that identify the data in the grammar, and then write the chunks into a sequential block of memory or to a memory-mapped file.</P>
<P>For more information about grammar formats and structures, see Appendix B, "Standard Grammar Formats."</P></FONT></BODY></HTML>

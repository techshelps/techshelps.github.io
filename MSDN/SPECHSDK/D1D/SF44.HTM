<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Speech-Recognition Results Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Speech-Recognition Results Objects</H2><P>If an engine provides speech-recognition results objects, an application can use them to get more detailed information about a recognition. The following member functions of the <B>ISRGramNotifySink</B> notification return the address of an <B>IUnknown</B> interface on a results object:</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>PhraseHypothesis</B></P>
<P> <FONT FACE="Symbol">·</FONT>    <B>PhraseFinish</B></P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ReEvaluate</B></P>
<P> <FONT FACE="Symbol">·</FONT>    <B>UnArchive</B></P>
<P></P>
<P>After the application gets the address of <B>IUnknown</B>, it can call the <B>QueryInterface</B> member function to obtain other interfaces, such as the following (not all results objects support all of these interfaces):</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResAudio</B>.  An engine may store the digital-audio information in the results object. This allows an application to access the audio so it can be played back to the user.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResBasic</B>.  This interface provides member functions that allow the application to get the same information supplied by the <B>PhraseHypothesis</B> and <B>PhraseFinish </B>member functions. It also allows an application to see the alternative recognition results.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResCorrection</B>.  Applications can and should correct the engine through this interface. If a user explicitly (or implicitly) informs the application that the engine recognized a phrase correctly or incorrectly, the application should pass this information to the engine through the <B>ISRResCorrection </B>interface. The engine can use the information to improve its future performance.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResEval</B>.  Allows the application to request that the engine reevaluate a recognition result to see if new training changes the result.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResGraph</B>.  An application can use these member functions to view the recognition results graph for both words and phonemes. It provides detailed information about what words or phonemes were spoken when, how loud they were, what their alternatives were, and so on.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResMemory</B>.  Results occupy a lot of memory. This interface allows an application to control how much information is stored in the results object.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResMerge</B>.  An application can use this interface to combine two temporally adjacent results objects into one.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResModifyGUI</B>.  An application can use this interface to display a small status window next to selected text for specific recognition results.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResScore</B>.  This interface provides member functions that allow the application to get scores for recognition results.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>ISRResSpeaker</B>.  Some engines support speaker identification. An application can access this to identify who spoke a particular command.</P>
<P></P>
<P>Because results objects consume so much memory, engines automatically "degrade" the results objects over time in an attempt to save memory, causing information to be lost in the process. The application can query and set the speed of this degradation by calling the <B>ISRGramCommon::DeteriorationGet</B> and <B>DeteriorationSet</B> member functions. An application can also take charge of memory management and lock a results object. Additionally, an application can take charge of memory management and lock a results object by calling the <B>ISRResMemory::LockSet </B>member function.</P></FONT></BODY></HTML>

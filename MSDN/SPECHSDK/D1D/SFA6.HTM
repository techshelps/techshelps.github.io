<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISREnum::Select</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>ISREnum::Select</H2><P></P>
<P>HRESULT Select(GUID gModeID, PISRCENTRAL *ppiSRCentral, </P>
<P>    PIUNKNOWN pIUnknownForAudio);</P>
<P></P>
<P>Selects a speech-recognition mode and creates an engine object to represent the selected mode.</P>
<P> <FONT FACE="Symbol">·</FONT>    Returns NOERROR if successful, or one of these error values:</P>
<P>E_INVALIDARG<BR>E_OUTOFMEMORY<BR>SRERR_INVALIDMODE<BR>SRERR_OUTOFDISK<BR>SRERR_WAVEFORMATNOTSUPPORTED</P>
<P></P>
<P><I>gModeID</I></P>
<P>[in] GUID from the <B>SRMODEINFO</B> structure for the speech-recognition mode that is selected. The function creates an engine object to represent this mode.</P>
<P></P>
<P><I>ppiSRCentral</I></P>
<P>[out] Address of a variable that receives a pointer to the <B>ISRCentral</B> interface for the newly created engine object.</P>
<P></P>
<P><I>pIUnknownForAudio</I></P>
<P>[in] Address of the <B>IUnknown</B> interface for the audio-source object that provides digital-audio data for the engine object.  The engine will AddRef the interface, and release the interface when the engine is destroyed. Because of this the application will need to call Release on the audio object after the select call or audio objects will be leaked.</P>
<P></P>
<P>After the application enumerates the speech-recognition modes and determines which one to use, it calls the <B>Select</B> member function to create the engine object.</P>
<P>As the engine object initializes, it calls the <B>IAudio</B> interface on the audio-source object specified by <I>pIUnknownForAudio</I> to determine whether or not it can use that audio source. If so, the member function returns an <B>ISRCentral</B> interface for the newly created engine object. If not, the engine object releases itself and the <B>Select</B> member function returns an error. </P>
<P>After the engine object is created, it calls the <B>IAudio::PassNotify</B> member function to pass its own notification sink to the audio-source object so that object notifies the engine when audio data is available. When all references to the engine object are released, the object calls the <B>IAudio::Release</B> member function. </P>
<P>The multimedia audio-source object can be used to obtain audio from a wave-in device. The <B>Select</B> member function call passes the <B>IUnknown </B>interface rather than the <B>IAudioSource</B> interface because, although all engines should support <B>IAudioSource</B>, some engines may talk to custom interfaces for dealing with special hardware or drivers and <B>IUnknown</B> can be used to obtain such interfaces. For more information about the multimedia audio-source object, see the section, "Multimedia Audio Objects ."</P>
<P>The <I>pIUnknownForAudio</I> parameter is obtained by using the <B>CoCreateInstance</B> function. As such, the reference count for the <B>IUnknown</B> interface begins at 1, and the interface should be released after the <B>Select</B> member function has returned. </P>
<P>The negotiation with the audio-source object occurs within the <B>Select</B> call, so if <B>Select</B> returns without an error, then the negotiation succeeded.</P></FONT></BODY></HTML>

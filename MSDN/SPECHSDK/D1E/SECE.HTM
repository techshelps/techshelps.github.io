<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Text Buffer to the Speaking Queue</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Adding a Text Buffer to the Speaking Queue</H2><P>An application causes a text-to-speech engine to speak text by placing text buffers in the engine's speaking queue. To place a buffer in the queue, an application fills an <B>SDATA</B> structure with the address of the text buffer and the amount of text in the buffer. The application passes the buffer to the engine by calling the <B>ITTSCentral::TextData</B> member function. When calling <B>TextData</B>, the application also specifies the character set that the engine should use to translate the text in the buffer, a flag that indicates whether the buffer contains control tags and, optionally, the address of the application's <B>ITTSBufNotifySink</B> interface. The engine uses this interface to notify the application of buffer-related events. </P>
<P>The following example shows how to add a text buffer to the speaking queue.</P>
<P>// SpeakTheText - puts a text buffer into the text-to-speech</P>
<P>//   engine's speaking queue.</P>
<P>// Returns TRUE if successful or FALSE if an error occurs.</P>
<P>// pszTextBuffer - address of the text buffer</P>
<P>//</P>
<P>// Global variables:</P>
<P>//   g_pIBufNotifySink - address of the ITTSBufNotifySink interfaceBOOL SpeakTheText(LPSTR pszTextBuffer)</P>
<P>{</P>
<P>    HRESULT hRes;</P>
<P>    SDATA data;</P>
<P> </P>
<P>     data.dwSize = lstrlen(pszTextBuffer);</P>
<P>     data.pData = pszTextBuffer;</P>
<P></P>
<P>    // Put the text buffer into the engine's speaking queue, and give</P>
<P>    // the engine the address of the ITTSBufNotifySink interface for</P>
<P>    // buffer-related notifications.</P>
<P>    hRes = g_pITTSCentral-&gt;TextData(CHARSET_TEXT, 0, data, </P>
<P>        g_pIBufNotifySink, IID_ITTSBufNotifySink);</P>
<P></P>
<P>    if (FAILED(hRes))</P>
<P>        return FALSE;</P>
<P></P>
<P>    return TRUE;</P>
<P>}</P>
<P></P></FONT></BODY></HTML>

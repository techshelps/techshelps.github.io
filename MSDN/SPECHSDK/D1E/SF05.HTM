<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ITTSEnum::Select</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>ITTSEnum::Select</H2><P></P>
<P>HRESULT Select(GUID gModeID, PITTSCENTRAL *ppiTTSCentral, <BR>    PIUNKNOWN pIUnknownForAudio);</P>
<P></P>
<P>Selects a text-to-speech mode and creates an engine object to represent the selected mode.</P>
<P> <FONT FACE="Symbol">·</FONT>    Returns NOERROR if successful, or one of these error values:</P>
<P>&lt;E_INVALIDARG&gt;<BR>&lt;E_OUTOFMEMORY&gt;<BR>&lt;TTSERR_INVALIDMODE&gt;<BR>&lt;TTSERR_OUTOFDISK&gt;<BR>&lt;TTSERR_WAVEFORMATNOTSUPPORTED&gt;</P>
<P></P>
<P><I>gModeID</I></P>
<P>[in] Globally unique identifier (GUID) from the <B>TTSMODEINFO</B> structure for the currently selected text-to-speech mode. The function creates an engine object to represent this mode.</P>
<P></P>
<P><I>ppiTTSCentral</I></P>
<P>[out] Address of a variable that receives a pointer to the <B>ITTSCentral</B> interface for the newly created engine object.</P>
<P></P>
<P><I>pIUnknownForAudio</I></P>
<P>[out] Address of the <B>IUnknown</B> interface for the audio-destination object that provides digital-audio data for the engine object. The engine will AddRef the interface, and release the interface when the engine is destroyed. Because of this the application will need to call Release on the audio object after the select call or audio objects will be leaked.</P>
<P></P>
<P>After the application enumerates the text-to-speech modes and determines which one to use, it calls <B>Select</B> to create the engine object.</P>
<P>As the engine object initializes, it calls the <B>IAudio</B> interface of the audio-destination object specified by <I>pIUnknownForAudio</I> to determine whether it can use that audio destination. If it can, the function returns an <B>ITTSCentral</B> interface for the newly created engine object. If it cannot, the engine object releases itself and the <B>Select</B> function returns an error.</P>
<P>After the object is created, it calls the <B>IAudio::PassNotify</B> member function to pass its own notification sink to the audio-destination object. Passing the notification sink to the audio-destination object allows the object to notify the engine when audio data is played. When all references to the engine object are released, the engine object calls the <B>IAudio::Release</B> member function.</P>
<P>The multimedia audio-destination object can be used to send audio to a wave-out device. The <B>Select</B> function passes the <B>IUnknown</B> interface rather than the <B>IAudioDest</B> interface because, although all engines should support <B>IAudioDest</B>, some engines may use custom interfaces for dealing with special hardware or drivers and <B>IUnknown</B> can be used to obtain such interfaces. For more information about the multimedia audio-destination object, see the section, "Multimedia Audio Objects ."</P>
<P>The <I>pIUnknownForAudio</I> parameter is obtained by using the <B>CoCreateInstance</B> function. As such, the reference count for the <B>IUnknown</B> interface begins at 1, and the interface should be released after <B>Select</B> has returned.</P>
<P>The negotiation with the audio-destination object occurs within the call to <B>Select</B>, so if <B>Select</B> returns without an error, the negotiation succeeded.</P></FONT></BODY></HTML>

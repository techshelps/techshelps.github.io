<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Engine Notifications</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Engine Notifications</H3><P>Many engines provide notifications that are independent of the text buffer that is being spoken, although the notifications are sent only when at least one buffer is in the queue. These notifications include such things as the time when the audio starts or finishes playing, and visual cues that correspond to the phonemes that are spoken. </P>
<P>To receive engine notifications, the application must create a COM object that supports the <B>ITTSNotifySink</B> interface. Before the engine object can use the interface, the application must register it with the engine by calling the <B>ITTSCentral::Register</B> member function. When calling <B>Register</B>, the application specifies the address of its <B>ITTSNotifySink</B> interface and the IID_ITTSNotifySink interface identifier. If <B>Register </B>succeeds, the engine returns a notification identifier. </P>
<P>When the application no longer needs to receive engine notifications, it can call the <B>ITTSCentral::UnRegister</B> member function, specifying the notification identifier returned by <B>Register</B>. Calling <B>UnRegister</B> is optional, because the system automatically releases all of an application's notification interfaces when the application releases the engine object. However, the system may not release the notification interfaces immediately after the engine is released.</P>
<P>While the application has an <B>ITTSNotifySink</B> interface registered with the engine, it can receive several types of notifications. The engine calls the <B>ITTSNotifySink::AudioStart</B> member function as soon as it starts playing the audio data, and the <B>ITTSNotifySink::AudioStop</B> member function as soon as it stops.</P>
<P>The engine calls the <B>ITTSNotifySink::Visual</B> member function to indicate the phoneme that is currently being spoken and (if the engine supports it) mouth-position cues. An application can use this information to display animated faces. The engine calls <B>Visual</B> at the exact time that the mouth position is reached. If the application cannot render the animation frame quickly enough (within 1/30th of a second), it should implement a custom audio destination that forwards the notification to the application ahead of time. Not all engines call <B>Visual</B>.</P></FONT></BODY></HTML>

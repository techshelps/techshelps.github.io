<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Custom Audio-Destination Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Custom Audio-Destination Object</H3><P>A custom audio destination can allow an application to perform the following tasks:</P>
<P> <FONT FACE="Symbol">·</FONT>    Send speech output to an audio file for processing at a later time. </P>
<P> <FONT FACE="Symbol">·</FONT>    Mix the outgoing audio with another signal, such as sound effects or audio from another text-to-speech engine. (Currently, multimedia does not support the sharing of a wave device.)</P>
<P> <FONT FACE="Symbol">·</FONT>    Play audio on hardware that does not support a multimedia driver.</P>
<P> <FONT FACE="Symbol">·</FONT>    Apply special effects to the text-to-speech voice, such as reverberation, echo, or distortion.</P>
<P> <FONT FACE="Symbol">·</FONT>    "Fool" the text-to-speech engine into thinking that the audio is playing several milliseconds before it is actually being played to give animated graphics time to draw.</P>
<P></P>
<P>To write an audio-destination object, you must create an OLE COM object that supports these three interfaces: <B>IUnknown</B>, <B>IAudio</B>, and <B>IAudioDest</B>. You might also define a custom interface that allows the application to control the audio destination, such as an <B>IAudioFile</B> interface to specify which file to send audio output to. </P>
<P>When an engine first receives the address of the <B>IUnknown</B> interface for the audio destination (for more information, see "Engine Selection" later in this section), it calls the <B>QueryInterface</B> member function for a variety of interfaces, such as those that control specific hardware. If the engine cannot find any of these custom interfaces, it eventually tries the <B>IAudio</B> and <B>IAudioDest</B> interfaces. The engine then calls the <B>IAudio::WaveFormatSet</B> member function with several different wave formats, starting with custom formats and working its way down to pulse code modulation (PCM) if none of the earlier formats are supported. (The application must determine which formats are acceptable.) If the engine cannot find any interfaces or formats that it can use, it fails to create an engine object.</P>
<P>After the engine selects a wave format, it generates the engine object and returns from the call to the <B>ITTSFind::Select</B> or <B>ITTSEnum::Select</B> member function. As the application calls member functions on the engine object, that object calls member functions, such as the <B>IAudio::Start</B>, <B>IAudioSource::DataGet</B>, and so on, on the audio-destination object to get the needed digital audio.</P>
<P>Some suggestions for implementing a custom audio-destination object follow:</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>Getting notifications before the audio is actually played</B>.  Pass all calls to the custom audio-destination object on to the multimedia audio-destination object, unchanged with this exception: decrement the <B>QWORD</B> time passed with the <B>IAudioDest::BookMark</B> member function by enough time — for example, a few milliseconds — so that the engine sets the bookmark that much earlier than the audio is actually played.</P>
<P> <FONT FACE="Symbol">·</FONT>    <B>Mixing audio</B>.  Design the audio-destination object to accept only those wave formats that have the same sampling rate as that of the other audio channels. The audio-destination object merely caches the data in a circular buffer that is read by the wave-mix code whenever it needs more data to output to the hardware device.</P>
<P></P></FONT></BODY></HTML>

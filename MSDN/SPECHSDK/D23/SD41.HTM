<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing an Application for Voice Text</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,atial,helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<h2>Initializing an Application for Voice Text</H2><P>To use voice text, you need to create a voice-text object and register your application with the object. You create a voice-text object by calling the <B>CoCreateInstance</B> function with the CLSID_VTxt class identifier and the IID_IVoiceText interface identifier. You must create a separate voice-text object for each site that your application needs to use. </P>
<P><B>CoCreateInstance</B> returns a pointer to the <B>IVoiceText</B> interface for the voice-text object. Before an application can perform other voice-text tasks, it must register itself by calling the <B>IVoiceText::Register</B> member function. <B>Register</B> specifies the site that the object uses for audio output, and passes the address of the application's voice-text notification interface to the voice-text object. </P>
<P>The following example shows how to create a voice-text object and register the application with the object.</P>
<P>// BeginOLE - initializes OLE, creates a voice-text object, and </P>
<P>//   registers the application with the object.</P>
<P>// Returns TRUE if successful or FALSE otherwise.</P>
<P>// </P>
<P>// Global variables:</P>
<P>//   gpIVTxt - address of IVoiceText interface</P>
<P>//   gpIVTxtAttr - address of IVTxtAttributes interface</P>
<P>//   gpVTxtNotifySink - address of IVTxtNotifySink interface</P>
<P>BOOL BeginOLE()</P>
<P>{</P>
<P>    HRESULT  hRes;</P>
<P></P>
<P>    // Initialize OLE.</P>
<P>    if (FAILED(CoInitialize(NULL)))</P>
<P>        return ReleaseInterfaces("CoInitialize() failed.");</P>
<P></P>
<P>    // Create a voice-text object.</P>
<P>    if (CoCreateInstance(CLSID_VTxt, NULL, CLSCTX_LOCAL_SERVER, </P>
<P>            IID_IVoiceText, (LPVOID *) &amp;gpIVTxt) != S_OK)</P>
<P>        return ReleaseInterfaces(</P>
<P>            "Error in CoCreateInstance for voice-text interface." );</P>
<P></P>
<P>    // Get the address of the voice-text attributes interface.</P>
<P>    hRes = gpIVTxt-&gt;QueryInterface(IID_IVTxtAttributes, </P>
<P>        (LPVOID FAR *) &amp;gpIVTxtAttr);</P>
<P>    if (FAILED(hRes)) </P>
<P>        return ReleaseInterfaces(</P>
<P>            "Failed to get voice-text attributes interface.");</P>
<P></P>
<P>    // Create and register the voice-text notification sink.</P>
<P>    gpVTxtNotifySink = new CIVTxtNotifySink;</P>
<P>    if (gpVTxtNotifySink == NULL)</P>
<P>        return ReleaseInterfaces(</P>
<P>            "Out of memory for voice-text notification object.");</P>
<P></P>
<P>    hRes = gpIVTxt-&gt;Register(NULL, "SRClock", gpVTxtNotifySink, </P>
<P>         IID_IVTxtNotifySink, VTXTF_ALLMESSAGES, NULL);</P>
<P>    if (FAILED(hRes))</P>
<P>        return ReleaseInterfaces(</P>
<P>            "Failed to register voice-text notification sink.");</P>
<P></P>
<P>    return TRUE;</P>
<P>}</P>
<P></P>
<P>// ReleaseInterface - displays an error message and releases the </P>
<P>//   voice-text object.</P>
<P>// Returns FALSE.</P>
<P>// szMsg - text of error message</P>
<P>//</P>
<P>// Global variable:</P>
<P>//   gpIVTxt - address of voice-text interface</P>
<P></P>
<P>BOOL ReleaseInterfaces(const char *szMsg)</P>
<P>{</P>
<P>    // If a message is specified, display it.</P>
<P>    if (*szMsg)</P>
<P>        MessageBox(NULL, szMsg, NULL, MB_OK);</P>
<P></P>
<P>    if(gpIVTxt)</P>
<P>        gpIVTxt-&gt;Release();</P>
<P>    gpIVTxt = NULL;</P>
<P></P>
<P>    return FALSE;</P>
<P>}</P>
<P></P></FONT></BODY></HTML>

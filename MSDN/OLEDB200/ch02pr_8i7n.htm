<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enumerator States</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbenumerator_states"></a>Enumerator States</h1>
<p>
If an enumerator does not require initialization, it is created in an <i>initialized</i> state and remains in that state. For example, an enumerator that searches the registry does not require initialization.</p>
<p>
If an enumerator requires initialization, it is created in an <i>uninitialized</i> state. For example, if the enumerator enumerates directories, the enumerator does not yet know the starting directory. If the enumerator enumerates databases in an SQL DBMS, the enumerator has not yet connected to the DBMS.</p>
<p>
To determine whether an enumerator requires initialization, the consumer calls <b>QueryInterface</b> in <b>IDBInitialize</b>. If this interface is exposed, the enumerator requires initialization and must also expose <b>IDBProperties</b>. If it is not exposed, the enumerator does not require initialization. The remainder of this section discusses enumerators that require initialization.</p>
<p>
In the uninitialized state, the consumer can do only the following with the enumerator:
<ul type=disc>
<li>
Call <b>QueryInterface</b> in <b>IUnknown</b>, <b>IDBInitialize</b>, <b>IDBProperties</b>, or <b>ISupportErrorInfo</b>.<br><br></li>
<li>
Call <b>AddRef</b> or <b>Release</b> in any interface obtained from <b>QueryInterface</b>.<br><br></li>
<li>
Call methods in <b>IDBProperties</b> for properties in the Initialization property group.<br><br></li>
<li>
Call methods in <b>IDBInitialize</b> or <b>ISupportErrorInfo</b>.</li>
</ul>
<p>
If the consumer calls any other OLE DB method, the provider returns E_UNEXPECTED.&nbsp; The provider may also return E_UNEXPECTED or E_NOINTERFACE if the consumer calls <b>QueryInterface</b> for an interface other than those listed.</p>
<p>
To initialize the enumerator, the consumer first calls <b>IDBProperties::SetProperties</b> to set the value of properties in the Initialization property group. For example, if the enumerator enumerates directories, the consumer might specify the server and directory to start with. If the enumerator enumerates databases in an SQL DBMS, the consumer might specify the name of the server on which the DBMS resides, along with the user ID and password to use.</p>
<p>
Certain properties in the Initialization property group are required by the enumerator for initialization. To determine which properties these are, the consumer calls <b>IDBProperties::GetPropertyInfo</b> for properties in the Initialization property group. For required properties, the DBPROPFLAGS_REQUIRED bit is set in the <i>dwFlags</i> element of the returned DBPROPINFO structure.</p>
<p>
After the consumer has finished setting properties, it calls <b>IDBInitialize::Initialize</b>. <b>Initialize</b> can prompt for additional information, especially if the consumer has not set values for all required properties. The consumer can control how much <b>Initialize</b> prompts, including suppressing prompting altogether. After <b>Initialize</b> returns successfully, the enumerator is in an initialized state.</p>
<p>
If the consumer needs to reinitialize the enumerator after it has been initialized, it must first uninitialize it. For example, if the enumerator enumerates directories and the consumer needs to enumerate directories on a different server, the consumer must disconnect from the first server before connecting to the second. If the enumerator enumerates databases in an SQL DBMS and the consumer needs to enumerate databases in a different installation of that DBMS, the consumer must disconnect from the first DBMS before connecting to the second. To uninitialize the enumerator, the consumer calls <b>IDBInitialize::Uninitialize</b>.</p>
<p>
The following figure shows the enumerator states and the methods that change them.</p>
<p class=label>
<b>Enumerator states</b></p>
<p>
<img src="ch0201.gif" border=0></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDBAsynchStatus::Abort</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbidbasynchstatus__abort"></a>IDBAsynchStatus::Abort</h1>
<p>
Cancels an asynchronously executing operation.</p>
<pre><code>HRESULT Abort(
   HCHAPTER      hChapter,
   ULONG         ulOperation);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hChapter [in]</i></p>
<p class=indent>
The handle of the chapter for which to abort the operation. If the object being called is not a rowset object, or the operation does not apply to a chapter, this should be set to DB_NULL_HCHAPTER, which is ignored by the provider.</p>
<p class=dt>
<i>ulOperation [in]</i></p>
<p class=indent>
The operation to abort. This should be the following value:</p>
<p class=dt>
</p>
<p class=indent>
DBASYNCHOP_OPEN<br>
The request to cancel applies to the asynchronous opening or population of a rowset, or the asynchronous initialization of a data source.</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The request to cancel the asynchronous operation was processed. This does not guarantee that the operation itself was canceled. To determine whether the operation was canceled, the consumer should call <b>IDBAsynchStatus::GetStatus</b> and check for DB_E_CANCELED; however, it may not be returned in the very next call.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_CANTCANCEL<br>
The asynchronous operation cannot be canceled.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_CANCELED<br>
The request to abort the asynchronous operation was canceled during notifications. The operation is still being executed asynchronously.</p>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
<b>IDBAsynchStatus::Abort</b> was called on a data source on which <b>Initialize</b> has not been called.</p>
<p class=tl>
<b>IDBAsynchStatus::Abort</b> was called on a data source on which <b>Initialize</b> was called but subsequently canceled prior to initialization. The data source is still uninitialized.</P><p class=tl>
<b>IDBAsynchStatus::Abort</b> was called on a rowset on which <b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was previously called, and the rowset did not survive the commit or abort and is in a zombie state.</P><p class=tl>
<b>IDBAsynchStatus::Abort</b> was called on a rowset that was asynchronously canceled in its initialization phase. The rowset is in a zombie state.</P><p class=label>
<b>Comments</b></p>
<p>
After receiving a request to cancel, if the provider supports cancellation of the operation it calls <b>IDBAsynchNotify::OnProgress</b> with a <i>ulAsynchPhase </i>of DBASYNCHPHASE_CANCELED for all listeners. If no listeners attempt to deny the cancellation by returning S_FALSE, the operation is canceled and the provider calls <b>IDBAsynchNotify::OnStop </b>for all listeners with an <i>hrStatus</i> of DB_E_CANCELED.&nbsp; If any listeners deny the cancellation of the operation by returning S_FALSE from the OnProgress notification, the provider returns DB_E_CANCELED from the <b>IDBAsynchStatus::Abort</b> function and continues processing the operation.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="asntfy_6980.htm">IDBAsynchNotify::OnStop</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Source Object States</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbdata_source_object_states"></a>Data Source Object States</h1>
<p>
When a data source object is created, it is in an uninitialized state. For example, if the data source is a file, the data source object has not yet opened the file; if the data source is an SQL database, the data source object has not yet connected to the database.</p>
<p>
In the uninitialized state, the consumer can do only the following with the data source:
<ul type=disc>
<li>
Call <b>QueryInterface</b> in <b>IUnknown</b>, <b>IConnectionPointContainer</b>, <b>IDBAsynchStatus</b>, <b>IDBDataSourceAdmin</b>, <b>IDBInitialize</b>, <b>IDBProperties</b>, <b>IPersist</b>, <b>IPersistFile</b>, or <b>ISupportErrorInfo</b>.<br><br></li>
<li>
Call <b>AddRef</b> or <b>Release</b> in any interface obtained from <b>QueryInterface</b>.<br><br></li>
<li>
Call methods in <b>IConnectionPointContainer</b>, <b>IDBDataSourceAdmin</b>, <b>IDBInitialize</b>, <b>IPersist</b>, <b>IPersistFile</b>, or <b>ISupportErrorInfo</b>.<br><br></li>
<li>
Call methods in <b>IDBProperties</b> for properties in the Initialization property group.</li>
</ul>
<p>
If the consumer calls any other OLE DB method, the provider returns E_UNEXPECTED.&nbsp; The provider may also return E_UNEXPECTED or E_NOINTERFACE if the consumer calls <b>QueryInterface</b> for an interface other than those listed.</p>
<p>
To initialize the data source, the consumer first calls <b>IDBProperties::SetProperties</b> to set the value of properties in the Initialization property group. For example, if the data source is a text file, the consumer might specify the name and location of the file. If the data source is a database in an SQL database management system, the consumer might specify the name of the server on which the database resides along with the user ID and password to use.</p>
<p>
Certain properties in the Initialization property group are required by the data source object for initialization. To determine which properties these are, the consumer calls <b>IDBProperties::GetPropertyInfo</b> for properties in the Initialization property group. For required properties, the DBPROPFLAGS_REQUIRED bit is set in the <i>dwFlags</i> element of the returned DBPROPINFO structure.</p>
<p>
After the consumer has finished setting properties, it calls <b>IDBInitialize::Initialize</b>. <b>Initialize</b> can prompt for additional information, especially if the consumer has not set values for all required properties. The consumer can control how much <b>Initialize</b> prompts, including suppressing prompting altogether. After <b>Initialize</b> returns successfully, the data source object is in an initialized state. The consumer can also initialize a data source by calling <b>IDBDataSourceAdmin::CreateDataSource</b> to create and initialize a new data source.</p>
<p>
If the consumer needs to reinitialize the data source object after it is initialized, it must first uninitialize the data source. For example, if the data source is a file and the consumer needs to use a different file, the consumer must close the first file before opening the second. If the data source is an SQL database and the consumer needs to use a different database, the consumer must disconnect from the first database before connecting to the second. To uninitialize the data source object, the consumer calls <b>IDBInitialize::Uninitialize</b>.</p>
<p>
The following figure shows the data source object states and the methods that change them.<br>
</p>
<p class=label>
<b>Data source object states</b></p>
<p>
<img src="ch0202.gif" border=0></p>
</font></BODY>
</HTML>

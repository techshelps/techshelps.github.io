<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Source Objects and Session Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbdata_source_objects_and_session_objects"></a>Data Source Objects and Session Objects</h1>
<p>
The OLE DB connection model defines how data and service components&nbsp; (also referred to as service components) are located and activated. Two objects are the basis for the OLE DB connection model: the <i>data source object</i> and the <i>session</i>. To access an OLE DB provider, a consumer must first create an instance of a data source object. Each data provider is identified by a unique class identifier (CLSID) in the registry. You call <b>CoCreateInstance</b>, which creates an instance of the object through the object's class factory. The data source object exposes <b>IDBProperties</b>, which the consumer uses to provide basic authentication information such as user ID and password (for cases when the data source does not exist in an authenticated environment) as well as the name of the data source (file or database) containing the data to be accessed. It also exposes <b>IDBInitialize</b>, which the consumer uses to connect to the data source.</p>
<p>
After a data source object has been successfully initialized, the consumer can call methods in <b>IDBProperties</b> to query the capabilities of a provider. These capabilities include the interfaces, rowset properties such as scrollability, transaction properties such as supported isolation levels, and the SQL dialects a provider supports. The consumer can also call methods in <b>IDBCreateSession</b> to create a session.</p>
<p>
The session acts as a rowset, command, and transaction factory. A data provider that does not support commands exposes the <b>IOpenRowset</b> interface, which enables providers to expose their data directly as rowsets without the use of commands.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Rowset Traversal Example</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledba_rowset_traversal_example"></a>A Rowset Traversal Example</h1>
<p>
This example illustrates a simple OLE DB program that reads a table through a rowset, printing each row along the way. After an instance of a <a href="ch02pr_0qgj.htm">data source object</a> for an e-mail data provider is created, initialized and its <a href="ch11pr_4tv7.htm">properties</a> are set, the <a href="dbcses_0kry.htm">IDBCreateSession</a> interface is requested. This returns a pointer to its <a href="opnrst_6bhw.htm">IOpenRowset</a> interface. The rowset is opened corresponding to the e-mail file. (First a <a href="ch11pr_47jn.htm">property set</a> "TablePropSet" is initialized for the properties that specify the e-mail file, then the rowset is opened.) Column type information is retrieved and <a href="ch06pr_03zn.htm">bindings</a> established. The <a href="accssr_09wy.htm">IAccessor</a> interface is requested from the rowset. An accessor handle is returned after creating the <a href="ch06pr_74kz.htm">accessor</a>. In the while loop, 100 rows at a time are read into the rowset. <a href="ch06pr_92ap.htm">GetData</a> copies the rows into the local buffers, performing the <a href="appapr_5nhv.htm">type conversions</a> specified in the binding structures associated with the accessor. After rows are printed from the rowset they are released, ending the loop. The accessor handle, rowset, session and data source object are released.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp; </b></B>Code to check status and errors after each call is omitted for clarity.</p>
<pre><code>#include&lt;oledb.h&gt; 
extern GUID&nbsp;&nbsp; CLSID_MailProvider
IDBInitialize&nbsp; *pIDBInit;
IDBProperties&nbsp; *pIDBProps;
OLECHAR&nbsp;&nbsp;&nbsp; *szColNames;
HRESULT&nbsp;&nbsp;&nbsp;&nbsp; hr;
HACCESSOR&nbsp;&nbsp; hAccessor;
IDBCreateSession *pIDBCS;
IOpenRowset&nbsp; *pIOpenRowset; 
IRowset&nbsp;&nbsp;&nbsp; *pIRowset;
IColumnsInfo&nbsp;&nbsp; *pIColsInfo;
IAccessor&nbsp;&nbsp;&nbsp; *pIAccessor; 
DBCOLUMNINFO&nbsp;&nbsp; *rgColInfo;
int&nbsp;&nbsp;&nbsp;&nbsp; irow;
DBID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableID;
DBBINDSTATUS&nbsp; rgStatus[10];
HROW&nbsp;&nbsp;&nbsp;&nbsp; *rghRows;
ULONG&nbsp;&nbsp;&nbsp;&nbsp; cCol, cBindings, cRowsObtained;
DBBINDING&nbsp;&nbsp; rgBindings[10];
DBPROPSET&nbsp;&nbsp; TablePropSet;
void&nbsp;&nbsp;&nbsp;&nbsp; *rgData;

void PrintData(void*);
void CreateBindingsFromInfo(struct tagDBCOLUMNINFO*, ULONG*,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct tagDBBINDING(*)[10], void**);

int main() {
 // Initialize OLE
 CoInitialize(NULL);

 // Create an instance of a data source object for an e-mail data provider.
 CoCreateInstance(CLSID_MailProvider, 0, CLSCTX_LOCAL_SERVER, IID_IDBInitialize,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (void**) &amp;pIDBInit);
 // Initialize the data source object for e-mail data provider.
 DBPROP rgProps[4];

 // Initialize the VARIANTs and the options in rgProps.
 for (ULONG i = 0; i &lt;= 3; i++) {
  VariantInit(&amp;rgProps[i].vValue);
  rgProps[i].dwOptions = DBPROPOPTIONS_REQUIRED;
  rgProps[i].vValue.vt = VT_BSTR;
 };

 rgProps[0].dwPropertyID = DBPROP_INIT_LOCATION;
 rgProps[0].vValue.bstrVal =
  SysAllocStringLen(OLESTR("email_server "), wcslen(OLESTR("email_server ")));
 rgProps[1].dwPropertyID = DBPROP_INIT_DATASOURCE;
 rgProps[1].vValue.bstrVal =
  SysAllocStringLen(OLESTR("c:\\mail\\smith.mmf"),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wcslen(OLESTR("c:\\mail\\smith.mmf")));
 rgProps[2].dwPropertyID = DBPROP_AUTH_PASSWORD;
 rgProps[2].vValue.bstrVal =
  SysAllocStringLen(OLESTR("password"), wcslen(OLESTR("password")));
 rgProps[3].dwPropertyID = DBPROP_AUTH_USERID;
 rgProps[3].vValue.bstrVal =
  SysAllocStringLen(OLESTR("Smith"), wcslen(OLESTR("Smith")));

 // Create the initialization structure.
 DBPROPSET PropSet;
 PropSet.rgProperties&nbsp; = rgProps;
 PropSet.cProperties&nbsp;&nbsp; = 4;
 PropSet.guidPropertySet = DBPROPSET_DBINIT;

 // Set the initialization properties.
 pIDBInit-&gt;QueryInterface(IID_IDBProperties, (void**) &amp;pIDBProps);
 pIDBProps-&gt;SetProperties(1, &amp;PropSet);
 pIDBProps-&gt;Release();

 // Initialize the data source object.
 hr = pIDBInit-&gt;Initialize();

 // Request the IDBCreateSession interface
 pIDBInit-&gt;QueryInterface(IID_IDBCreateSession, (void**) &amp;pIDBCS);

 // Create a session returning a pointer to its
 // IOpenRowset interface
 pIDBCS-&gt;CreateSession(NULL, IID_IOpenRowset, (IUnknown**) &amp;pIOpenRowset);

 // Open a rowset corresponding to the e-mail file. First initialize a property set
 // "TablePropSet" for the properties that specify the e-mail file, then open the
 // rowset.
 pIOpenRowset-&gt;OpenRowset(NULL,&amp;TableID,NULL, IID_IRowset, 1, &amp;TablePropSet,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (IUnknown**) &amp;pIRowset );

 // Get information about column types.
 pIRowset-&gt;QueryInterface(IID_IColumnsInfo, (void**) &amp;pIColsInfo);
 pIColsInfo-&gt;GetColumnInfo(&amp;cCol, &amp;rgColInfo, &amp;szColNames);
 pIColsInfo-&gt;Release();

 // Establish bindings using a convenience function.
 CreateBindingsFromInfo(rgColInfo,&amp;cBindings, &amp;rgBindings, &amp;rgData);

 // Request the IAccessor interface from rowset.
 pIRowset-&gt;QueryInterface(IID_IAccessor, (void**) &amp;pIAccessor);

 // Create an accessor, return an accessor handle.
 pIAccessor-&gt;CreateAccessor(DBACCESSOR_ROWDATA, cBindings, rgBindings, 0, &amp;hAccessor,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rgStatus);

 // Read the rows; 100 rows at a time into the rowset.
 while(SUCCEEDED(hr = pIRowset-&gt;GetNextRows(NULL, 0, 100, &amp;cRowsObtained, &amp;rghRows))
 &nbsp; &amp;&amp; cRowsObtained) {
  for(irow = 0; irow &lt; cRowsObtained; irow++) {
 &nbsp; // GetData copies the rows into the local buffers, performing the type
 &nbsp; // conversions specified in the binding structures associated with the
 &nbsp; // accessor.
 &nbsp; pIRowset-&gt;GetData(rghRows[irow], hAccessor, (void*) rgData);

 &nbsp; // Convenience function to print the data.
 &nbsp; PrintData(rgData);
  }
  // Release the rows just printed from the rowset.
  pIRowset-&gt;ReleaseRows(cRowsObtained, rghRows, NULL, NULL, NULL);
 }

 // Release the accessor handle and the rowset.
 pIAccessor-&gt;ReleaseAccessor(hAccessor);
 pIAccessor-&gt;Release();
 pIRowset-&gt;Release();

 // Release the session and data source object.
 pIOpenRowset-&gt;Release();
 pIDBCS-&gt;Release();
 pIDBInit-&gt;Release();

 // Uninitialize OLE.
 CoUninitialize();
 return;
}</code></pre>
</font></BODY>
</HTML>

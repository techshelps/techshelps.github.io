<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRowsetLocate::Hash</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbirowsetlocate__hash"></a>IRowsetLocate::Hash</h1>
<p>
Returns hash values for the specified bookmarks.</p>
<pre><code>HRESULT Hash (
   HCHAPTER         hChapter,
   ULONG            cBookmarks,
   const ULONG      rgcbBookmarks[],
   const BYTE *         rgpBookmarks[],
   DWORD            rgHashedValues[],
   DBROWSTATUS   rgBookmarkStatus[]);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hChapter</i></p>
<p class=indent>
[in]<br>
The chapter handle. For nonchaptered rowsets, <i>hChapter</i> is ignored.</p>
<p class=dt>
<i>cBookmarks</i><br>
</p>
<p class=indent>
The number of bookmarks to hash. If <i>cBookmarks</i> is zero, <b>Hash</b> does not do anything.</p>
<p class=dt>
<i>rgcbBookmarks</i></p>
<p class=indent>
[in]<br>
An array containing the length in bytes for each bookmark.</p>
<p class=dt>
<i>rgpBookmarks</i></p>
<p class=indent>
[in]<br>
An array of pointers to bookmarks. The bookmarks cannot be standard bookmarks (DBBMK_FIRST, DBBMK_LAST, DBBMK_INVALID). If <i>rgpBookmarks</i> contains a duplicate bookmark, a hash value is returned once for each occurrence of the bookmark.</p>
<p class=atl>
<B><b>Caution&nbsp; </b></B> The consumer must ensure that all bookmarks in <i>rgpBookmarks</i> are valid. The provider is not required to validate bookmarks before hashing them. Thus, hash values might be returned for invalid bookmarks.</p><p class=dt>
<i>rgHashedValues</i></p>
<p class=indent>
[out]<br>
An array of <i>cBookmarks</i> hash values corresponding to the elements of <i>rgpBookmarks</i>. The consumer allocates, but is not required to initialize, memory for this array and passes the address of this memory to the provider. The provider returns the hash values in the array.</p>
<p class=dt>
<i>rgBookmarkStatus</i></p>
<p class=indent>
[out]<br>
An array with <i>cBookmarks</i> elements in which to return values indicating the status of each bookmark specified in <i>rgpBookmarks</i>. If no errors occur while hashing a bookmark, the corresponding element of <i>rgBookmarkStatus</i> is set to DBROWSTATUS_S_OK. If an error occurs while hashing a bookmark, the corresponding element is set as specified in DB_S_ERRORSOCCURRED. The consumer allocates memory for this array but is not required to initialize it. If <i>rgBookmarkStatus</i> is a null pointer, no bookmark statuses are returned. For information about the DBROWSTATUS enumerated type, see "<a href="ch13pr_5ib7.htm">Arrays of Errors</a>" in Chapter 13.</p>
<p class=dt>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded. All bookmarks were successfully hashed. The following value can be returned in <i>rgRowStatus</i>:
<ul type=disc>
<li>
The bookmark was successfully hashed. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_S_OK.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
An error occurred while hashing a bookmark, but at least one bookmark was successfully hashed. Successes can occur for the reason listed under S_OK. The following errors can occur:
<ul type=disc>
<li>
An element of <i>rgpBookmarks</i> pointed to an invalid or incorrectly formed bookmark. The corresponding element of <i>rgBookmarkStatus</i> contains DBROWSTATUS_E_INVALID. Providers are not required to check for this condition, because doing so might slow the method significantly.<br><br></li>
<li>
An element of <i>rgcbBookmarks</i> was zero. The corresponding element of <i>rgBookmarkStatus</i> contains DBROWSTATUS_E_INVALID.<br><br></li>
<li>
An element of <i>rgpBookmarks</i> was a null pointer. The corresponding element of <i>rgBookmarkStatus</i> contains DBROWSTATUS_E_INVALID.<br><br></li>
<li>
An element of <i>rgpBookmarks</i> pointed to a standard bookmark (DBBMK_FIRST, DBBMK_LAST, DBBMK_INVALID). The corresponding element of <i>rgBookmarkStatus</i> contains DBROWSTATUS_E_INVALID.<br><br></li>
<li>
The consumer encountered a recoverable, provider-specific error, such as an RPC failure when transmitting the change to a remote server. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_FAIL.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>cBookmarks</i> was not zero and <i>rgcbBookmarks</i> or <i>rgpBookmarks</i> was a null pointer.</p>
<p class=tl>
<i>rgHashedValues</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
<b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was called and the object is in a zombie state.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADCHAPTER<br>
The rowset was chaptered and <i>hChapter</i> was invalid.</p>
<p class=tl>
The rowset was single-chaptered and the specified chapter was not the currently open chapter. The consumer must use the currently open chapter or release the currently open chapter before specifying a new chapter.</P><p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
Errors occurred while hashing all of the bookmarks. Errors can occur for the reasons listed under DB_S_ERRORSOCCURRED.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTREENTRANT<br>
The provider called a method from <b>IRowsetNotify</b> in the consumer that had not yet returned, and the provider does not support reentrancy in this method.<br>
</p>
<p class=label>
<b>Comments</b></p>
<p>
This method makes no logical change to the state of the object.</p>
<p>
If two bookmarks point to the same underlying row, the same hash value is returned for both bookmarks. That is, if <b>Compare</b> returns DBCOMPARE_EQ for two bookmarks, <b>Hash</b> must return the same value for these two bookmarks.</p>
<p>
If <b>Hash</b> encounters an error while attempting to hash a bookmark, such as a bad bookmark, it notes the error in the error array, continues processing, and returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED. Although the rows are hashed in undefined order, the ordering of the error array must match the order of the bookmark array, so the consumer can perform a side-by-side scan of each array to determine which rows were not hashed.</p>
<p>
<b>Hash</b> can hash any valid bookmarks. The consumer is not required to have permission to read the corresponding row, nor is the row even required to exist — for example, it might have been deleted.</p>
<p>
Standard bookmarks cannot be hashed.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="rowloc_936t.htm">IRowsetLocate::Compare</a></p>
</font></BODY>
</HTML>

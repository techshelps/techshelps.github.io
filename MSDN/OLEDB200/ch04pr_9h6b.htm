<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bookmarks</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbbookmarks"></a>Bookmarks</h1>
<p>
<i>Bookmarks</i> are placeholders designed to allow the consumer to return quickly to a row. Consumers that use bookmarks to identify rows to a provider should treat bookmarks as opaque binary values. Consumers should not try to interpret these values. Bookmarks are valid only during the lifetime of the rowset to which they refer. For indexes that use bookmarks to reference rows in a base table, the bookmark returned as the pointer column in the index rowset is a valid bookmark in the rowset built over the base table; therefore, the bookmark is valid for the table rowset. Bookmarks are returned in columns in the rowset. An application retrieves them in the same manner as it retrieves data from any other column in the rowset. That is, it creates an accessor that binds to the bookmark column and calls <b>IRowset::GetData</b> using this accessor.</p>
<p>
Bookmark columns have DBCOLUMNFLAGS_ISBOOKMARK set in their column information. A bookmark may be of a fixed scalar type such as DBTYPE_I4 or it may be a character sequence that appears, for example, as a DBTYPE_STR column. There is no specialized bookmark data type; providers can return any valid type indicator in <b>IColumnsInfo::GetColumnInfo</b> for a bookmark column.</p>
<p>
Bookmarks can always be read and passed as binary values. When using a bookmark to identify a row to a provider, consumers can always bind bookmark values as DBTYPE_BYTES. Alternatively, if the consumer knows the actual DBTYPE of the bookmark, it can bind to that specific type. For more information about data types, see Appendix A, "<a href="appapr_5nhv.htm">Data Types</a>."</p>
<p>
Bookmarks are not the same thing as primary keys or row IDs (see "<a href="ch04pr_9sj7.htm">Bookmark Types</a>," later in this chapter). They can be related, and it is possible to use a primary key or row ID to implement a bookmark, but often there are bookmark schemes that are more compact or swifter that work only for the current contents of the rowset. It is important to take advantage of those optimizations in places such as command optimization or result set navigation. Furthermore, bookmarks are not necessarily the same as row handles because they may have ordering semantics or might be used to track nonresident members of very large rowsets.</p>
<p>
A rowset implements only one kind of bookmark. The provider may have incompatible solutions for implementing primary key or row ID semantics on bookmarks, so it cannot support both simultaneously.</p>
<p>
Bookmarks operate as logical pointers. The encapsulation allows transient, rowset-level bookmarks to be implemented as pointers, although this would likely be used only for rowsets small enough to be efficiently instantiated.</p>
<p>
If <b>IRowsetLocate</b> or one of its direct descendants is present on a rowset, then column 0 is the bookmark for the rows. Column 0 is present in a rowset if, and only if, the rowset has the property DBPROP_BOOKMARKS set to VARIANT_TRUE. Reading this column will obtain a bookmark value that can be used to position itself again to the same row. This is called the <i>self bookmark</i>. Other bookmark columns referring to the same rowset, such as a Spouse column in a query about people, are not self bookmarks.</p>
<p>
Bookmark columns can be returned on any rowset, regardless of its source (for example, <b>ICommand::Execute</b>, <b>IOpenRowset::OpenRowset</b>, <b>IColumnsRowset::GetColumnsRowset</b>, or <b>IDBSchemaRowset::GetRowset</b>) or whether bookmarks were requested.</p>
<p>
The DBIDs of the bookmark columns in a rowset are based on a property set identified by the GUID DBCOL_SPECIALCOL. These DBIDs are constructed as follows:
<ul type=disc>
<li>
The <i>eKind</i> element is DBKIND_GUID_PROPID or DBKIND_PGUID_PROPID.<br><br></li>
<li>
The <i>guid</i> (or <i>pguid</i>) element is, or points to, DBCOL_SPECIALCOL.<br><br></li>
<li>
The <i>ulPropid</i> element is 2 for the self bookmark. It is greater than 2 for bookmarks other than the self bookmark. The <i>ulPropid</i> element must not be the same as the <i>ulPropid</i> element in the DBID of another bookmark in the same rowset.<br><br></li>
<li>
If bookmark column A appears before bookmark column B in the specification of the rowset, the <i>ulPropid</i> element in the DBID of bookmark column A is less than the <i>ulPropid</i> element in the DBID of bookmark column B.</li>
</ul>
<p>
The DBIDs of bookmark columns can be passed to <b>IColumnsInfo::MapColumnIDs</b> to determine the ordinals of those columns. There is no need to pass the DBID of the self bookmark column to <b>MapColumnIDs</b> because the ordinal of this column is always zero.</p>
</font></BODY>
</HTML>

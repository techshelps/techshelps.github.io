<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rowset Properties and Behaviors</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="rowset_properties_and_behaviors"></a>Rowset Properties and Behaviors</h1>
<p>
SQLOLEDB implements rowset properties as follows.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=43%><b>Property ID</b></td>
<td class=label width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_ABORTPRESERVE</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: By default, SQLOLEDB invalidates rowsets after an abort. SQLOLEDB maintains a valid rowset if the property is VARIANT_TRUE.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_APPENDONLY</td>
<td width=57%>The DBPROP_APPENDONLY rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
BLOCKINGSTORAGEOBJECTS</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_TRUE<br>
Description: SQLOLEDB storage objects block the use of other rowset methods.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_BOOKMARKS<br>
DBPROP_<br>
LITERALBOOKMARKS</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB supports bookmarks for rowset row identification when DBPROP_BOOKMARKS or DBPROP_<br>
LITERALBOOKMARKS is VARIANT_<br>
TRUE.<br>
<br>
Setting either property to VARIANT_TRUE does not enable rowset positioning by bookmark. Set <b>DBPROP_IRowsetLocate</b> or <b>DBPROP_IRowsetScroll</b> to VARIANT_TRUE to create a rowset supporting rowset positioning by bookmark.<br>
<br>
SQLOLEDB uses a SQL Server cursor to support a rowset containing bookmarks. For more information, see Rowsets and SQL Server Cursors.<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Setting these properties in conflict with other SQLOLEDB cursor-defining properties results in an error. For example, setting the DBPROP_BOOKMARKS to VARIANT_TRUE when DBPROP_OTHERINSERT is also VARIANT_TRUE generates an error when the consumer attempts to open a rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_BOOKMARKSKIPPED</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB returns DB_E_<br>
BADBOOKMARK if the consumer indicates an invalid bookmark when positioning or searching a bookmarked rowset.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_BOOKMARKTYPE</td>
<td width=57%>R/W: Read-only<br>
Default: DBPROPVAL_BMK_NUMERIC<br>
Description: SQLOLEDB implements numeric bookmarks only. A SQLOLEDB bookmark is a 32-bit unsigned integer, type DBTYPE_UI4.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_CACHEDEFERRED</td>
<td width=57%>The DBPROP_CACHEDEFERRED rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
CANFETCHBACKWARDS<br>
DBPROP_<br>
CANSCROLLBACKWARDS</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB supports backward fetching and scrolling in nonsequential rowsets. SQLOLEDB creates a cursor-supported rowset when either DBPROP_<br>
CANFETCHBACKWARDS or DBPROP_<br>
CANSCROLLBACKWARDS is VARIANT_<br>
TRUE. For more information, see Rowsets and SQL Server Cursors.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_CANHOLDROWS</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: By default, SQLOLEDB returns DB_E_ROWSNOTRELEASED if the consumer attempts to obtain more rows for a rowset while pending changes exist on those currently in the rowset. This behavior can be altered.<br>
<br>
Setting both DBPROP_CANHOLDROWS and DBPROP_IRowsetChange to VARIANT_<br>
TRUE implies a bookmarked rowset. If both properties are VARIANT_TRUE, the <b>IRowsetLocate</b> interface is available on the rowset and DBPROP_BOOKMARKS and DBPROP_LITERALBOOKMARKS are both VARIANT_TRUE.<br>
<br>
SQLOLEDB rowsets containing bookmarks are supported by SQL Server cursors.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
CHANGEINSERTEDROWS</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_TRUE<br>
Description: SQLOLEDB allows the consumer to delete or change the data in newly inserted rows.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_COLUMNRESTRICT</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB sets the property to VARIANT_TRUE when a column in a rowset cannot be changed by the consumer. Other columns in the rowset may be updatable and the rows themselves may be deleted.<p>
When the property is VARIANT_TRUE, the consumer examines the <i>dwFlags</i> member of the DBCOLUMNINFO structure to determine whether the value of an individual column can be written or not. For modifiable columns, <i>dwFlags</i> exhibits DBCOLUMNFLAGS_<br>
WRITE.</p>
</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_COMMANDTIMEOUT</td>
<td width=57%>R/W: Read/write<br>
Default: 0<br>
Description: By default, SQLOLEDB does not time out on <b>ICommand::Execute</b>.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_COMMITPRESERVE</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: By default, SQLOLEDB invalidates rowsets after a commit. SQLOLEDB maintains a valid rowset if the property is VARIANT_TRUE.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_DEFERRED</td>
<td width=57%>The DBPROP_DEFERRED rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
DELAYSTORAGEOBJECTS</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB supports immediate update mode on storage objects.<br>
<br>
Changes made to data in a sequential stream object are immediately submitted to SQL Server. Modifications are committed based on the rowset transaction mode.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IAccessor<br>
DBPROP_IColumnsInfo<br>
DBPROP_IConvertType<br>
DBPROP_IRowset<br>
DBPROP_IRowsetInfo</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_TRUE<br>
Description: SQLOLEDB supports these interfaces on all rowsets.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IColumnsRowset</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_TRUE<br>
Description: SQLOLEDB supports the <b>IColumnsRowset</b> interface.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
IConnectionPointContainer</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IRowsetChange<br>
DBPROP_IRowsetUpdate</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB supports the <b>IRowsetChange</b> and <b>IRowsetUpdate</b> interfaces.<br>
<br>
A rowset created with DBPROP_<br>
IRowsetChange equal to VARIANT_TRUE exhibits immediate update mode behaviors.<br>
<br>
When DBPROP_IRowsetUpdate is VARIANT_TRUE, DBPROP_IRowsetChange is also VARIANT_TRUE. The rowset exhibits delayed update mode behavior.<br>
<br>
SQLOLEDB uses a SQL Server cursor to support rowsets exposing either <b>IRowsetChange</b> or <b>IRowsetUpdate</b>. For more information, see Rowsets and SQL Server.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IRowsetIdentity</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: See the <i>OLE DB Programmer's Reference.</i></td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IRowsetLocate<br>
DBPROP_IRowsetScroll</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB can expose the <b>IRowsetLocate</b> and <b>IRowsetScroll</b> interfaces.<br>
<br>
When DBPROP_IRowsetLocate is VARIANT_TRUE, DBPROP_<br>
CANFETCHBACKWARDS and DBPROP_<br>
CANSCROLLBACKWARDS are also VARIANT_TRUE.<br>
<br>
When DBPROP_IRowsetScroll is VARIANT_<br>
TRUE, DBPROP_IRowsetLocate is also VARIANT_TRUE, and both interfaces are available on the rowset.<br>
<br>
Bookmarks are required for either interface. SQLOLEDB sets DBPROP_BOOKMARKS and DBPROP_LITERALBOOKMARKS to VARIANT_TRUE when the consumer requests either interface.<br>
<br>
SQLOLEDB uses SQL Server cursors to support <b>IRowsetLocate</b> and <b>IRowsetScroll</b>. For more information, see Rowsets and SQL Server cursors.<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Setting these properties in conflict with other SQLOLEDB cursor-defining properties results in an error. For example, setting the DBPROP_IRowsetScroll to VARIANT_TRUE when DBPROP_OTHERINSERT is also VARIANT_TRUE generates an error when the consumer attempts to open a rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IRowsetResynch</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB exposes the <b>IRowsetResynch</b> interface on demand. SQLOLEDB can expose the interface on any rowset.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_ISupportErrorInfo</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_TRUE<br>
Description: SQLOLEDB exposes the <b>ISupportErrorInfo</b> interface on rowsets.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_ILockBytes</td>
<td width=57%>The <b>ILockBytes</b> interface is not implemented by SQLOLEDB. Attempting to read or write the property generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_ISequentialStream</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB exposes the <b>ISequentialStream</b> interface to support long, variable-length data stored in SQL Server.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IStorage</td>
<td width=57%>The <b>IStorage</b> interface is not implemented by SQLOLEDB. Attempting to read or write the property generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IStream</td>
<td width=57%>The <b>IStream</b> interface is not implemented by SQLOLEDB. Attempting to read or write the property generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_IMMOBILEROWS</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_TRUE<br>
Description: SQLOLEDB alters the value of the property based on the visibility of changes to the SQL Server data exposed by the rowset. The consumer cannot ever insert rows at a specified location in a SQLOLEDB rowset. Regardless of the property value, SQLOLEDB never reorders a rowset when a row is added to it.<br>
<br>
VARIANT_TRUE<br>
Rows inserted by the consumer appear at the end of the current block of rows held in the rowset. Rows inserted by other SQL Server users are not visible to the rowset. DBPROP_<br>
OTHERINSERT is VARIANT_FALSE.<br>
<br>
VARIANT_FALSE<br>
Rows inserted by the consumer appear at the end of the current block of rows held in the rowset. However, scrolling the rowset could cause the row to appear in its SQL Server-determined position. This is especially true if the SQL Server table maintaining the rowset data is constrained by a clustered primary key. DBPROP_OTHERINSERT is VARIANT_TRUE.<br>
<br>
This property only has value for rowsets supported by SQL Server cursors. For more information, see Rowsets and SQL Server Cursors.<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Setting this property in conflict with other SQLOLEDB cursor-defining properties results in an error. For example, setting the property to VARIANT_TRUE when DBPROP_OTHERINSERT is also VARIANT_TRUE generates an error when the consumer attempts to open a rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
LITERALIDENTITY</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_TRUE<br>
Description: See the <i>OLE DB Programmer's Reference</i>.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_MAXOPENROWS</td>
<td width=57%>R/W: Read-only<br>
Default: 0<br>
Description: SQLOLEDB does not limit the number of rows that can be active in rowsets.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
MAXPENDINGROWS</td>
<td width=57%>R/W: Read-only<br>
Default: 0<br>
Description: SQLOLEDB does not limit the number of rowset rows with changes pending.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_MAXROWS</td>
<td width=57%>R/W: Read/Write<br>
Default: 0<br>
Description: By default, SQLOLEDB does not limit the number of rows in a rowset. When the consumer sets DBPROP_MAXROWS, SQLOLEDB uses the SET ROWCOUNT statement to limit the number of rows in the rowset.<br>
<br>
SET ROWCOUNT can cause unintended consequences in SQL Server statement execution. </td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
MAYWRITECOLUMN</td>
<td width=57%>The DBPROP_MAYWRITECOLUMN rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_MEMORYUSAGE</td>
<td width=57%>The DBPROP_MEMORYUSAGE rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
NOTIFICATIONGRANULARITY</td>
<td width=57%>The DBPROP_<br>
NOTIFICATIONGRANULARITY rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
NOTIFICATIONPHASES</td>
<td width=57%>R/W: Read-only<br>
Default: DBPROPVAL_NP_OKTODO |<br>
DBPROPVAL_NP_ABOUTTODO | <br>
DBPROPVAL_NP_SYNCHAFTER |<br>
DBPROPVAL_NP_FAILEDTODO | <br>
DBPROPVAL_NP_DIDEVENT<br>
Description: SQLOLEDB supports all notification phases.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_NOTIFYCOLUMNSET<br>
DBPROP_NOTIFYROWDELETE<br>
DBPROP_<br>
NOTIFYROWFIRSTCHANGE<br>
DBPROP_<br>
NOTIFYROWINSERT<br>
DBPROP_<br>
NOTIFYROWRESYNCH<br>
DBPROP_<br>
NOTIFYROWSETRELEASE<br>
DBPROP_<br>
NOTIFYROWSETFETCH-<br>
POSITIONCHANGE<br>
DBPROP_<br>
NOTIFYROWUNDOCHANGE<br>
DBPROP_<br>
NOTIFYROWUNDODELETE<br>
DBPROP_<br>
NOTIFYROWUNDOINSERT<br>
DBPROP_<br>
NOTIFYROWUPDATE</td>
<td width=57%>R/W: Read-only<br>
Default: DBPROPVAL_NP_OKTODO | <br>
DBPROPVAL_NP_ABOUTTODO<br>
Description: SQLOLEDB notification phases are cancelable prior to an attempt to perform the rowset modification indicated. SQLOLEDB does not support phase cancellation after the attempt has completed.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
ORDEREDBOOKMARKS</td>
<td width=57%>The DBPROP_ORDEREDBOOKMARKS rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_OTHERINSERT<br>
DBPROP_<br>
OTHERUPDATEDELETE<br>
DBPROP_OWNINSERT<br>
DBPROP_<br>
OWNUPDATEDELETE</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: Setting change visibility properties causes SQLOLEDB to use SQL Server cursors to support the rowset. For more information, see Rowsets and SQL Server.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_QUICKRESTART</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: See the <i>OLE DB Programmer's Reference</i>.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
REENTRANTEVENTS</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_TRUE<br>
Description: SQLOLEDB rowsets are reentrant and can return DB_E_NOTREENTRANT if a consumer attempts to access a non-reentrant rowset method from a notification callback.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_REMOVEDELETED</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB alters the value of the property based on the visibility of changes to the SQL Server data exposed by the rowset.<br>
<br>
VARIANT_TRUE<br>
Rows deleted by the consumer or other SQL Server users are removed from the rowset when the rowset is refreshed. DBPROP_OTHERINSERT is VARIANT_TRUE.<br>
<br>
VARIANT_FALSE<br>
Rows deleted by the consumer or other SQL Server users are not removed from the rowset when the rowset is refreshed. The row status value for deleted SQL Server rows in the rowset is DBROWSTATUS_E_DELETED. DBPROP_<br>
OTHERINSERT is VARIANT_FALSE.<br>
<br>
This property only has value for rowsets supported by SQL Server cursors. For more information, see Rowsets and SQL Server.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
REPORTMULTIPLECHANGES</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: See the <i>OLE DB Programmer's Reference</i>.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
RETURNPENDINGINSERTS</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: When a method that fetches rows is called, SQLOLEDB does not return pending insert rows.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_ROWRESTRICT</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB rowsets do not support access rights based on the row. If <b>IRowsetChange</b> is exposed on a rowset, then <b>SetData</b> can be called by the consumer.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_ROWSET_ASYNCH</td>
<td width=57%>The DBPROP_ROWSET_ASYNCH rowset property is not implemented by SQLOLEDB. Attempting to read or write the property value generates an error.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
ROWTHREADMODEL</td>
<td width=57%>R/W: Read-only<br>
Default: DBPROPVAL_RT_FREETHREAD<br>
Description: SQLOLEDB supports access to its objects from multiple execution threads of a single consumer.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_SERVERCURSOR</td>
<td width=57%>R/W: Read/write<br>
Default: VARIANT_FALSE<br>
Description: When set, a SQL Server cursor is used to support the rowset. For more information, see Rowsets and SQL Server.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_STRONGIDENTITY</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: See the <i>OLE DB Programmer's Reference</i>.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_<br>
TRANSACTEDOBJECT</td>
<td width=57%>R/W: Read-only<br>
Default: VARIANT_FALSE<br>
Description: SQLOLEDB supports only transacted objects. For more information, see Transactions.</td>
</tr>
<tr valign=top>
<td width=43%>DBPROP_UPDATABILITY</td>
<td width=57%>R/W: Read/write<br>
Default: 0<br>
Description: SQLOLEDB supports all DBPROP_UPDATABILITY values. Setting DBPROP_UPDATABILITY does not create a modifiable rowset. To make a rowset modifiable, set <b>DBPROP_IRowsetChange</b> or <b>DBPROP_IRowsetUpdate</b>. </td>
</tr>
</table><br>
<p>
SQLOLEDB defines the provider-specific property set DBPROPSET_<br>
SQLSERVERROWSET as follows.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=43%><b>Property ID</b></td>
<td class=label width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=43%>SSPROP_CONCURRENCY</td>
<td width=57%>Column: No<br>
R/W: Read/write<br>
Type: VT_I4<br>
Default: SSPROPVAL_CONCUR_READ_ONLY<br>
Description: Concurrency control method.<br>
<br>
The SSPROP_CONCURRENCY property has meaning only when a SQLOLEDB rowset is supported by a SQL Server cursor.<br>
<br>
SSPROPVAL_CONCUR_ROWVER<br>
SQLOLEDB uses row versioning to determine a concurrent access violation. The SQL Server table or tables represented in the rowset must contain a SQL Server row-versioning <b>timestamp</b> column.<br>
<br>
SSPROPVAL_CONCUR_VALUES<br>
SQLOLEDB uses the values of columns in the rowset row to determine a concurrent access violation.<br>
<br>
SSPROPVAL_CONCUR_LOCK<br>
SQL Server locks rows present in the SQLOLEDB rowset. SQL Server prevents row access by SQLOLEDB rowsets generated on any other session or by users connecting another way.<br>
<br>
SSPROPVAL_CONCUR_READ_ONLY<br>
The rowset is read-only. Any other connected user can concurrently access the SQL Server rows in the rowset.</td>
</tr>
<tr valign=top>
<td width=43%>SSPROP_HIDDENCOLUMNS</td>
<td width=57%>Column: No<br>
R/W: Read/write<br>
Type: VT_BOOL<br>
Default: VARIANT_FALSE<br>
Description: FOR BROWSE versioning columns.<br>
<br>
SSPROP_HIDDENCOLUMNS has meaning only if the rowset was created from command text specifying the Transact-SQL FOR BROWSE clause in a SELECT statement.<br>
<br>
VARIANT_TRUE<br>
The rowset includes the table primary key and/or <b>timestamp</b> columns that allow row identification.<br>
<br>
VARIANT_FALSE<br>
The rowset does not include row-identifying columns.</td>
</tr>
<tr valign=top>
<td width=43%>SSPROP_MAXBLOBLENGTH</td>
<td width=57%>Column: No<br>
R/W: Read/write<br>
Type: VT_I4<br>
Default: 0<br>
Description: SQLOLEDB executes a SET TEXTLENGTH statement to restrict the length of BLOB data returned in a SELECT statement. </td>
</tr>
<tr valign=top>
<td width=43%>SSPROP_NOBROWSETABLE</td>
<td width=57%>Column: No<br>
R/W: Read/write<br>
Type: VT_BOOL<br>
Default: VARIANT_FALSE<br>
Description: No temporary table created on FOR BROWSE.<br>
<br>
SSPROP_NOBROWSETABLE has meaning only if the rowset has been created from command text specifying the Transact-SQL FOR BROWSE clause in a SELECT statement.<br>
<br>
VARIANT_TRUE<br>
A temporary table is not created to support a Transact-SQL SELECT statement containing the FOR BROWSE clause.<br>
<br>
VARIANT_FALSE<br>
A temporary table is created to support a Transact-SQL SELECT statement containing the FOR BROWSE clause.</td>
</tr>
<tr valign=top>
<td width=43%>SSPROP_POSITIONONNEWROW</td>
<td width=57%>Column: No<br>
R/W: Read/write<br>
Type: VT_BOOL<br>
Default: VARIANT_FALSE</td>
</tr>
<tr valign=top>
<td width=43%>SSPROP_TEXTPTRLOGGING</td>
<td width=57%>Column: No<br>
R/W: Read/write<br>
Type: VT_BOOL<br>
Default: VARIANT_TRUE<br>
Description: Log <b>text</b> and <b>image</b> writes.<br>
<br>
SQL Server can perform nonlogged writes of long, variable, data type columns.<br>
<br>
VARIANT_TRUE<br>
Log SQL Server <b>text</b> and <b>image</b> column writes originating from the rowset.<br>
<br>
VARIANT_FALSE<br>
Do not log SQL Server <b>text</b> and <b>image</b> column writes originating from the rowset.<br>
<br>
Caution: After performing nonlogged operations against a SQL Server database, the database must be backed up to ensure proper recovery. The database cannot be recovered from transaction log backups and attempting to backup the transaction log results in an error.</td>
</tr>
</table><br>
<p class=label>
<b>See Also</b></p>
<p>
<a href="9_ole_15_8mer.htm">Transactions</a></p>
</font></BODY>
</HTML>

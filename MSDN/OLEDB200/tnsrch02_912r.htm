<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Specifying the Contents of an Axis</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="specifyingcontentsofaxis"></a>Specifying the Contents of an Axis</h1>
<p>
The number of axes and the contents of each axis are specified after the <b>SELECT</b> keyword and immediately before the FROM clause in the expression template shown in “Parts of an MDX Statement.”</p>
<p>
Each &lt;axis_specification&gt; value specifies one axis. The number of axes in the dataset is equal to the number of &lt;axis_specification&gt; values in the MDX statement.</p>
<p>
To understand what constitutes an &lt;axis_specification&gt; value, we must take a look at the nature of an axis.</p>
<h2>Contents of the x-Axis</h2>
<p>
In the dataset of the section “Cube and Dataset Example,” the x-axis of the dataset has two nested dimensions: Geography and SalesPerson. From the Geography dimension, four members are selected: Seattle, Boston, USA_South, Japan. Two members are selected from the SalesPerson dimension: Venkatrao and Netz. This yields a total of eight coordinates on this axis (8 = 4*2).</p>
<p>
You can represent each coordinate as a tuple with two members — one from the SalesPerson dimension and another from the Geography dimension — as follows:</p>
<pre><code>(Venkatrao, Seattle), (Venkatrao, Boston), (Venkatrao, USA_South), 
(Venkatrao, Japan), (Netz, Seattle), (Netz, Boston), (Netz, USA_South), 
(Netz, Japan)
</code></pre>
<p>
You can consider an axis as being composed of a set of tuples. If there is only one dimension on an axis, then each tuple is just a member. If there are two dimensions, then two components compose each tuple with each component being a member of one of the dimensions. In general, if there are <i>n</i> dimensions nested on an axis, then <i>n</i> components compose each tuple where each component is a member of one of the nested dimensions.</p>
<h2>Contents of the y-Axis</h2>
<p>
The y-axis of the dataset has the following set of tuples. (In this case, each tuple has just one component, making it the same as a member because there is only one dimension on this axis.)</p>
<pre><code>Jan, Feb, Mar, Qtr2, Qtr3, Oct, Nov, Dec
</code></pre>
<h2>Set, Tuple, and Member Specification</h2>
<p>
An axis contains a set of tuples. A tuple is a vector of members. To specify the coordinates of an axis:
<ol>
<li>
Create an expression that generates members. Some expressions result in a single member while others result in a set of members.<br><br></li>
<li>
Obtain the desired set of members for each dimension on the axis.<br><br></li>
<li>
Take a cross product of these member sets to yield a set of tuples that represents an axis.</li>
</ol>
<p>
An application can use the simple expression syntax of OLE DB for OLAP to perform these operations. For the complete syntax of these expressions, see Appendix B, “MDX Grammar.” The following is a brief look at some of the important concepts.</p>
<p>
There are many ways of choosing a set of members:
<ul type=disc>
<li>
Enumeration of members. The easiest way to specify a set of members is simply to list the desired members:<pre><code>{Venkatrao, Netz}
</code></pre>
</li>
<li>
Set expressions. A set function generates a new set of members. For example, the function<pre><code>USA.CHILDREN
</code></pre>
<p class=tl>
generates the set</P><pre><code>{USA_North, USA_South}
</code></pre>
<p class=tl>
A comma-separated list of set expressions also results in a set. For example, the expression</P><pre><code>{USA_North.CHILDREN, USA_South, Japan}
</code></pre>
<p class=tl>
results in the set</P><pre><code>{Seattle, Boston, USA_South, Japan}
</code></pre>
</li>
</ul>
<p>
Other ways of set specification make use of the natural order of members in a dimension. For example, the expression</p>
<pre><code>Netz:Pizzo
</code></pre>
<p>
on the SalesPerson dimension, whose members are naturally ordered by last name, yields the set</p>
<pre><code>{Netz, Nakonieczny, Oks, Pace, Patel, Patterson, Pederson, Perin, Pizzo}
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The expression is an inclusive range. That is, the members on both sides of the colon (<b> : </b>) specifier are included.</p>
<p>
After an application generates sets that contain the members that it wants from each dimension on a given axis, it can use the <b>CROSSJOIN</b> function to get a cross product of these sets.</p>
<p>
Putting all these concepts together, a &lt;set_expression&gt; value for the x-axis in the example dataset is</p>
<pre><code>CROSSJOIN({Venkatrao, Netz},
{USA_North.CHILDREN, USA_South, Japan})
</code></pre>
<p>
The expression for the y-axis in the example dataset is</p>
<pre><code>{Qtr1.CHILDREN, Qtr2, Qtr3, Qtr4.CHILDREN}
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The MDX syntax is much more extensive than what is shown in these few examples. Some functionality not covered here includes:
<ul type=disc>
<li>
Set operations, such as <b>UNION</b> or <b>INTERSECT</b>.<br><br></li>
<li>
Functions to order sets, such as <b>ORDER</b> or <b>HIERARCHIZE</b>.<br><br></li>
<li>
Filter functions, such as <b>TOPCOUNT</b>, <b>TOPPERCENT</b>, <b>BOTTOMCOUNT</b>, <b>BOTTOMPERCENT</b>, or <b>FILTER</b>.<br><br></li>
<li>
Tree navigation functions, such as <b>DESCENDANTS</b>.<p class=tl>
Chapter 3, “Advanced MDX,” covers MDX in more detail. Appendix B, “MDX Grammar,” has the full syntax of MDX.</P></li>
</ul>
<h2>Projecting Tuple Sets On Axes</h2>
<p>
After an application has defined the set of tuples for each axis, it needs to specify which set is projected on which axis. Going back to the query template in the section “Parts of an MDX Statement,” there is an &lt;axis_specification&gt; value for each axis in the dataset.</p>
<p>
The &lt;axis_specification&gt; syntax looks like the following:</p>
<pre><code>&lt;axis_specification&gt; ::= &lt;set&gt; ON &lt;axis_name&gt;
&lt;axis_name&gt;<b> ::= COLUMNS | ROWS | PAGES | SECTIONS | CHAPTERS</b>
<b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | AXIS(</b><i>index</i><b>)</b>
</code></pre>
<p>
Each axis is associated with a number: 0 for the x-axis, 1 for the y-axis, 2 for the z-axis, and so on. To project a set on an axis, an application uses the syntax <b>AXIS(&lt;</b>index<i>&gt;</i><b>)</b>. The <b>&lt;</b>index<i>&gt;</i> value is the axis number. The first five axes — <b>COLUMNS</b>, <b>ROWS</b>, <b>PAGES</b>, <b>SECTIONS</b>, and <b>CHAPTERS </b>— can be used in place of <b>AXIS(0)</b>, <b>AXIS(1)</b>, <b>AXIS(2)</b>, <b>AXIS(3)</b>, and <b>AXIS(4)</b>, respectively.</p>
<p>
It is an error for an MDX statement to skip axes, or to not start from axis 0. That is, every statement must start from the COLUMNS axis, and must not miss any intermediate axes, such as having COLUMNS and PAGES axes but no ROWS axis.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;OLE DB for OLAP does not impose any restrictions on the number of axes supported in a dataset other than the minimum requirement of three for OLE DB for OLAP compliance. To find out the number of axes supported by the provider, the application can check the value of the MDPROP_AXES property in the DBPROPSET_DATASOURCEINFO property set.</p>
<h2>The SELECT List</h2>
<p>
The SELECT list for the example dataset follows:</p>
<pre><code>SELECT CROSSJOIN({Venkatrao, Netz},
{USA_North.CHILDREN, USA_South, Japan}) ON COLUMNS,
{Qtr1.CHILDREN, Qtr2, Qtr3, Qtr4.CHILDREN} ON ROWS
</code></pre>
<p>
<b>Discontiguous Axes in SELECT List</b></p>
<p>
You should not specify a SELECT list where the axes are not contiguous. For instance, it is an error to have ROWS and PAGES, but not COLUMNS; or to have COLUMNS and PAGES, but not ROWS.</p>
<p>
However, you may specify a SELECT list with no axes. It is not an error to have an empty SELECT list. In this case, all dimensions are slicer dimensions, and the MDX statement selects at most one cell.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rowsets and SQL Server Cursors</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="rowsets_and_sql_server_cursors"></a>Rowsets and SQL Server Cursors</h1>
<p>
SQLOLEDB exposes SQL Server cursors through rowsets, allowing developers to use SQL Server concurrency control mechanisms. SQLOLEDB creates SQL Server cursors that support rowsets when the rowset properties indicate that the consumer:
<ul type=disc>
<li>
Requires a server cursor.<br><br></li>
<li>
Must be able to scroll or fetch backward in the rowset.<br><br></li>
<li>
Will dynamically read additions, deletions and changes made by the consumer or by other consumers of the same SQL Server data.<br><br></li>
<li>
Requests bookmarks for row identification.</li>
</ul>
<p>
Specific rowset properties required by the consumer direct SQLOLEDB use of SQL Server cursors. If the consumer sets no rowset properties, or sets all rowset properties to their default values, SQLOLEDB does not create a SQL Server cursor to support the rowset.</p>
<p>
The following rowset properties direct SQLOLEDB use of SQL Server cursors. Some properties can be safely combined with others. For example, a rowset that exhibits the DBPROP_IRowsetScroll and DBPROP_IRowsetChange properties will be a bookmark rowset exhibiting immediate update behavior. Other properties are mutually exclusive. For example, a rowset exhibiting DBPROP_OTHERINSERT cannot contain bookmarks.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=45%><b>Property ID</b></td>
<td class=label width=55%><b>Rowset behavior</b></td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_SERVERCURSOR</td>
<td width=55%>VARIANT_TRUE<br>
Cannot update SQL Server data through the rowset. The rowset is sequential, supporting forward scrolling and fetching only. Relative row positioning is supported. Command text can contain an ORDER BY clause.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_<br>
CANSCROLLBACKWARDS or DBPROP_<br>
CANFETCHBACKWARDS </td>
<td width=55%>VARIANT_TRUE<br>
Cannot update SQL Server data through the rowset. The rowset supports scrolling and fetching in either direction. Relative row positioning is supported. Command text can contain an ORDER BY clause.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_BOOKMARKS or DBPROP_LITERALBOOKMARKS</td>
<td width=55%>VARIANT_TRUE<br>
Cannot update SQL Server data through the rowset. The rowset is sequential, supporting forward scrolling and fetching only. Relative row positioning is supported. Command text can contain an ORDER BY clause.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_OWNUPDATEDELETE or DBPROP_OWNINSERT or DBPROP_OTHERUPDATEDELETE</td>
<td width=55%>VARIANT_TRUE<br>
Cannot update SQL Server data through the rowset. The rowset supports scrolling and fetching in either direction. Relative row positioning is supported. Command text can contain an ORDER BY clause.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_OTHERINSERT</td>
<td width=55%>VARIANT_TRUE<br>
Cannot update SQL Server data through the rowset. The rowset supports scrolling and fetching in either direction. Relative row positioning is supported. Command text cannot contain an ORDER BY clause.<br>
<br>
DBPROP_OTHERINSERT cannot be VARIANT_TRUE if the rowset contains bookmarks. Attempting to create a rowset with this visibility property and bookmarks results in an error.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_IRowsetLocate or DBPROP_IRowsetScroll</td>
<td width=55%>VARIANT_TRUE<br>
Cannot update SQL Server data through the rowset. The rowset supports scrolling and fetching in either direction. Bookmarks and absolute positioning through <b>IRowsetLocate </b>are supported in the rowset. Command text can contain an ORDER BY clause.<br>
<br>
DBPROP_IRowsetLocate and DBPROP_<br>
IRowsetScroll require bookmarks in the rowset. Attempting to create a rowset with bookmarks and DBPROP_OTHERINSERT set to VARIANT_TRUE results in an error.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_IRowsetChange or DBPROP_IRowsetUpdate</td>
<td width=55%>VARIANT_TRUE<br>
Can update SQL Server data through the rowset. The rowset is sequential, supporting forward scrolling and fetching only. Relative row positioning is supported. Command text cannot contain an ORDER BY clause.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_IRowsetLocate or DBPROP_IRowsetScroll and DBPROP_IRowsetChange or DBPROP_IRowsetUpdate</td>
<td width=55%>VARIANT_TRUE<br>
Can update SQL Server data through the rowset. The rowset supports scrolling and fetching in either direction. Bookmarks and absolute positioning through <b>IRowsetLocate </b>are supported in the rowset. Command text can contain an ORDER BY clause.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_IMMOBILEROWS</td>
<td width=55%>VARIANT_FALSE<br>
Cannot update SQL Server data through the rowset. The rowset supports forward scrolling only. Relative row positioning is supported. Command text cannot contain an ORDER BY clause.<br>
<br>
DBPROP_IMMOBILEROWS is only available in rowsets that can show SQL Server rows inserted by commands on other sessions or by other users. Attempting to open a rowset with the property set to VARIANT_FALSE on any rowset for which DBPROP_OTHERINSERT cannot be VARIANT_TRUE results in an error.</td>
</tr>
<tr valign=top>
<td width=45%>DBPROP_REMOVEDELETED</td>
<td width=55%>VARIANT_TRUE<br>
Cannot update SQL Server data through the rowset. The rowset supports forward scrolling only. Relative row positioning is supported. Command text can contain an ORDER BY clause unless constrained by another property.</td>
</tr>
</table><br>
<p>
A SQLOLEDB rowset supported by a SQL Server cursor can be easily created on a SQL Server base table or view by using <b>IOpenRowset::OpenRowset</b>. Specify the table or view by name, passing the required rowset property sets in the <i>rgPropertySets</i> parameter.</p>
<p>
Command text that creates a rowset is restricted when the consumer requires that the rowset be supported by a SQL Server cursor. Specifically, the command text is restricted to either a single SELECT statement that returns a single rowset result, or a stored procedure that implements a single SELECT statement returning a single rowset result.</p>
<h3>SQL Server Cursor Block Size</h3>
<p>
When a SQL Server cursor supports a SQLOLEDB rowset, the number of elements in the row handle array parameter of <b>IRowset::GetNextRows</b> or <b>IRowsetLocate::GetRowsAt </b>defines the cursor block size. The rows indicated by the handles in the array are the members of the cursor block.</p>
<p>
For rowsets supporting bookmarks, the row handles retrieved by using <b>IRowsetLocate::GetRowsByBookmark</b> define the members of the cursor block.</p>
<p>
Regardless of the method used to populate the rowset and form the SQL Server cursor block, the cursor block is active as long as a reference is held by the consumer on the row handles retrieved.</p>
</font></BODY>
</HTML>

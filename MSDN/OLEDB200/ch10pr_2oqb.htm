<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Type Indicators When Creating Tables</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbusing_type_indicators_when_creating_tables"></a>Using Type Indicators When Creating Tables</h1>
<p>
A consumer can create a table through <b>ICommandText</b> or <b>ITableDefinition</b>. If a provider supports <b>ICommandText</b>, then a consumer builds a text command to create a table, such as an SQL <b>CREATE TABLE</b> statement, using the value of the TYPE_NAME column in the PROVIDER_TYPES schema rowset. OLE DB does not define standard type names, which saves providers from having to parse such text commands and replace standardized names with provider-specific names. No type indicators are involved in this process.</p>
<p>
If the provider supports <b>ITableDefinition</b>, then columns are described using the DBCOLUMNDESC structure. The <i>wType</i> and <i>pwszTypeName</i> elements of this structure correspond to the DATA_TYPE and TYPE_NAME column values from the PROVIDER_TYPES schema rowset. In most cases, there is no reason for a consumer to specify values for <i>wType</i> and <i>pwszTypeName</i> that are different than the values listed in the PROVIDER_TYPES schema rowset. A consumer is guaranteed to always get a safe conversion when getting or setting values of the column using the type indicator specified in <i>wType</i>.</p>
<p>
For example, a provider built on top of an ANSI SQL92–compliant DBMS might contain the following rows in the PROVIDER_TYPES schema rowset.</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=21%><b><br>
TYPE_NAME</b></td>
<td class=label width=23%><b><br>
DATA_TYPE</b></td>
<td class=label width=18%><b>COLUMN_<br>
SIZE</b></td>
<td class=label width=18%><b>MINIMUM_<br>
SCALE</b></td>
<td class=label width=20%><b>MAXIMUM_<br>
SCALE</b></td>
</tr>
<tr valign=top>
<td width=21%>"CHAR"</td>
<td width=23%>DBTYPE_STR</td>
<td width=18%>32000</td>
<td width=18%>NULL</td>
<td width=20%>NULL</td>
</tr>
<tr valign=top>
<td width=21%>"VARCHAR"</td>
<td width=23%>DBTYPE_STR</td>
<td width=18%>32000</td>
<td width=18%>NULL</td>
<td width=20%>NULL</td>
</tr>
</table><br>
<p>
For the CHAR type, COLUMN_SIZE indicates the maximum length in characters of a value of that type supported by this provider. When defining a column of this type, the consumer is free to assign any value between 1 and 32000 to the <i>ulColumnSize</i> element of the DBCOLUMNDESC structure associated with the column. Internally, the provider may choose any representation for values of the type, provided that it always returns data to the consumer as a null-terminated string.</p>
</font></BODY>
</HTML>

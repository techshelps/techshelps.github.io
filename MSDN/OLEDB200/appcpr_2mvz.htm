<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Properties Table (Alphabetical)</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbproperties_table__alphabetical_"></a>Properties Table (Alphabetical)</h1>
<p>
The properties in this table are contained in the designated property sets and property groups. (For a listing of properties organized by property group, see the Property Groups table.) The “Column ?” designation for Rowset properties states whether the property can be set on individual columns or only on the rowset as a whole.</p>
<p class=indent>
<B><b>Important&nbsp;&nbsp; </b></B>The “Typical R/W” value for each property specifies whether that property can typically be read or written. Whether a particular property can actually be read or written is provider-specific and is returned in the <b>dwPropFlags</b> element of the DBPROPINFO structure.</p>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=42%><b>Property ID</b></td>
<td class=label width=58%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_abortpreserve"></a>DBPROP_ABORTPRESERVE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Preserve on Abort<p>
VARIANT_TRUE—After aborting a transaction, the rowset remains active. That is, it is possible to fetch new rows, update, delete, and insert rows, and so on.</p>
<p>
VARIANT_FALSE—After aborting a transaction, the only operations allowed on a rowset are to release row and accessor handles and to release the rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_accessorder"></a>DBPROP_ACCESSORDER</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Access Order<p>
The order in which columns must be accessed on the rowset.&nbsp; One of the following values:</p>
<p>
DBPROPVAL_AO_RANDOM—Columns can be accessed in any order.</p>
<p>
DBPROPVAL_AO_SEQUENTIALSTORAGEOBJECTS—Columns bound as storage objects can only be accessed in sequential order as determined by the column ordinal. Further, storage objects from one row must be retrieved before calling <b>GetData</b> on any columns in any subsequent row. Calling <b>GetData</b> on a column bound as a storage object returns DBSTATUS_E_UNAVAILABLE for any columns bound as storage objects if any of the following are true:
<ul type=disc>
<li>
Columns beyond the column bound as a storage object are specified in the accessor.<br><br></li>
<li>
Columns beyond the column bound as a storage object have been accessed in a previous call to <b>GetData</b> for that row.<br><br></li>
<li>
<b>GetData</b> has been called for any columns on a row returned after the specified row.</li>
</ul>
<p>
Providers that never impose restrictions on column access ordering return DBPROPSTATUS_S_OK when this value is set. However, they upgrade the property to DBPROPVAL_AO_RANDOM such that calling <b>GetProperty</b> continues to return DBPROPVAL_AO_RANDOM for this property.</p>
<p>
DBPROPVAL_AO_SEQUENTIAL—All columns must be accessed in sequential order determined by the column ordinal.&nbsp; Further, all columns from one row must be retrieved before calling <b>GetData</b> on any columns in any subsequent row. Calling <b>GetData</b> returns DBSTATUS_E_UNAVAILABLE for any columns for which any of the following are true:
<ul type=disc>
<li>
The column is bound as a storage object and columns beyond it are specified in the accessor.<br><br></li>
<li>
Columns beyond the bound column have been accessed in a previous call to <b>GetData</b> for that row.<br><br></li>
<li>
<b>GetData</b> has been called for any columns on a row returned after the specified row.</li>
</ul>
<p>
Providers that never impose restrictions on column access ordering return DBPROPSTATUS_S_OK when this value is set. However, they upgrade the property to DBPROPVAL_AO_RANDOM such that calling <b>GetProperty</b> continues to return DBPROPVAL_AO_RANDOM for this property.</p>
<p>
Providers may be able to optimize how data is retrieved if they know it will be read in column order. For instance, the provider may be able to read directly from a stream over the data if it knows the columns will be read in strictly sequential order, but may not be able to do so efficiently if the columns contain BLOBs that may be read in a random order.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_activesessions"></a>DBPROP_ACTIVESESSIONS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Active Sessions<p>
The maximum number of sessions that can exist at the same time. If this property is set to zero, there is no limit on the number of sessions that can exist at one time.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_altercolumn"></a>DBPROP_ALTERCOLUMN</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Alter Column Support<p>
A bitmask describing which portions of the DBCOLUMNDESC structure can be used in a call to <b>IAlterTable::AlterColumn</b>.</p>
<p>
A combination of one or more of the following:</p>
<p>
DBCOLUMNDESCFLAG_TYPENAME<br>
DBCOLUMNDESCFLAG_ITYPEINFO<br>
DBCOLUMNDESCFLAG_PROPERTIES<br>
DBCOLUMNDESCFLAG_CLSID<br>
DBCOLUMNDESCFLAG_COLSIZE<br>
DBCOLUMNDESCFLAG_DBCID<br>
DBCOLUMNDESCFLAG_WTYPE<br>
DBCOLUMNDESCFLAG_PRECISION<br>
DBCOLUMNDESCFLAG_SCALE</p>
<p>
For more information about the mapping of these values to fields in the DBCOLUMNDESC structure, refer to the specification for <a href="alttbl_3q5q.htm">IAlterTable::AlterColumn</a>.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_appendonly"></a>DBPROP_APPENDONLY</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Append-Only Rowset<p>
A rowset opened with this property set to VARIANT_TRUE will be initially empty. If the rowset was obtained by <b>IOpenRowset::OpenRowset</b>, this is equivalent to positioning the start of the rowset at the end of the table; if it was obtained by executing a command, it is equivalent to placing the start of the rowset at the end of the command's results. A rowset opened with DBPROP_APPENDONLY set to VARIANT_TRUE will be populated only by those rows inserted in it.</p>
<p>
DBPROP_APPENDONLY set to VARIANT_TRUE implies:
<ul type=disc>
<li>
DBPROP_IRowsetChange is VARIANT_TRUE.<br><br></li>
<li>
DBPROP_OWNINSERT is VARIANT_TRUE.<br><br></li>
<li>
DBPROP_UPDATABILITY has the flag DBPROPVAL_UP_INSERT set.<br><br></li>
<li>
DBPROP_OTHERINSERT is VARIANT_FALSE.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_asynctxnabort"></a>DBPROP_ASYNCTXNABORT</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Asynchable Abort<p>
Whether transactions can be aborted asynchronously.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_asynctxncommit"></a>DBPROP_ASYNCTXNCOMMIT</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Asynchable Commit<p>
Whether transactions can be committed asynchronously.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_cache_authinfo"></a>DBPROP_AUTH_CACHE_AUTHINFO</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Cache Authentication<p>
VARIANT_TRUE—The data source object or enumerator is allowed to cache sensitive authentication information such as a password in an internal cache.</p>
<p>
VARIANT_FALSE—The data source object or enumerator is not allowed to cache sensitive authentication information.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_encrypt_password"></a>DBPROP_AUTH_ENCRYPT_PASSWORD</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Encrypt Password<p>
VARIANT_TRUE—The consumer requires that the password be sent to the data source or enumerator in an encrypted form. This property specifies a stronger form of masking than DBPROP_AUTH_MASKPASSWORD; it uses cryptographic techniques.</p>
<p>
VARIANT_FALSE—The password can be sent in an unencrypted form.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_integrated"></a>DBPROP_AUTH_INTEGRATED</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: Integrated Security<p>
A string containing the name of the authentication service used by the server to identify the user using the identity provided by an authentication domain.&nbsp; For example, for Microsoft<sup>®</sup> NT<sup>®</sup> Integrated Security, this is "SSPI" (for Security Support Provider Interface).&nbsp; If the BSTR is a null pointer, the default authentication service should be used. When this property is used, no other DBPROP_AUTH* properties are needed and, if provided, their values are ignored.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_mask_password"></a>DBPROP_AUTH_MASK_PASSWORD</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Mask Password<p>
VARIANT_TRUE—The consumer requires that the password be sent to the data source or enumerator in a masked form.</p>
<p>
VARIANT_FALSE—The password can be sent in an unmasked form.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_password"></a>DBPROP_AUTH_PASSWORD</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: Password<p>
The password to be used when connecting to the data source or enumerator. When the value of this property is retrieved with <b>IDBProperties::GetProperties</b>, the provider might return a mask such as "******" or an empty string instead of the actual password. Note that the password is still set internally and is used when <b>IDBInitialize::Initialize</b> is called.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_persist_encrypted"></a>DBPROP_AUTH_PERSIST_ENCRYPTED</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Persist Encrypted<p>
VARIANT_TRUE—The consumer requires that the data source object persist sensitive authentication information such as a password in encrypted form.</p>
<p>
VARIANT_FALSE—The data source object can persist sensitive authentication information in unencrypted form.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_persist_sensitive_authinfo"></a>DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Persist Security Info<p>
VARIANT_TRUE—The data source object is allowed to persist sensitive authentication information such as a password along with other authentication information.</p>
<p>
VARIANT_FALSE—The data source object cannot persist sensitive authentication information.</p>
<p>
If DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO is set to VARIANT_FALSE at the time the data source is initialized, the data source object cannot persist sensitive authentication information. Furthermore, requesting properties that contain sensitive authentication information, such as password, returns some default value instead of the actual password. Once the data source has been uninitialized, sensitive information that was set when the data source was initialized with the DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO property set to VARIANT_FALSE still cannot be obtained through <b>IDBProperties::GetProperties</b> or by persisting the uninitialized data source, but new properties set after the data source has been uninitialized can be persisted or obtained as long as DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO is VARIANT_TRUE.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_auth_userid"></a>DBPROP_AUTH_USERID</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: User ID<p>
The user ID to be used when connecting to the data source or enumerator.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_blockingstorageobjects"></a>DBPROP_BLOCKINGSTORAGE-OBJECTS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Blocking Storage Objects<p>
Whether storage objects might prevent use of other methods on the rowset.</p>
<p>
VARIANT_TRUE—Instantiated storage objects might prevent the use of other methods on the rowset. That is, after a storage object is created and before it is released, methods other than those on the storage object might return E_UNEXPECTED.</p>
<p>
VARIANT_FALSE—Instantiated storage objects do not prevent the use of other methods.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_bookmarks"></a>DBPROP_BOOKMARKINFO</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Bookmark Information<p>
A bitmask specifying additional information about bookmarks over the rowset. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_BI_CROSSROWSET—If set, bookmark values returned by this rowset are valid across rowsets with the same metadata.&nbsp; If not set, bookmark values are specific to this rowset and are not guaranteed to return the same values in other rowsets, even those resulting from the same specification.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_bookmarks_table"></a>DBPROP_BOOKMARKS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Use Bookmarks<p>
Whether the rowset supports bookmarks. One of the following:</p>
<p>
VARIANT_TRUE—The rowset supports bookmarks. Column 0 is the bookmark for the rows. Getting this column obtains a bookmark value, which can be used to reposition to the row.</p>
<p>
VARIANT_FALSE—The rowset does not support bookmarks. The rowset is sequential and the values of the DBPROP_LITERALBOOKMARKS and DBPROP_ORDEREDBOOKMARKS properties are ignored.</p>
<p>
The value of this property is automatically set to VARIANT_TRUE if the value of DBPROP_IRowsetLocate, DBPROP_LITERALBOOKMARKS, or DBPROP_ORDEREDBOOKMARKS is set to VARIANT_TRUE.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_bookmarkskipped"></a>DBPROP_BOOKMARKSKIPPED</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Skip Deleted Bookmarks<p>
Whether the rowset allows <b>IRowsetLocate::GetRowsAt</b>,<b> IRowsetScroll::GetApproximatePosition</b>, or <b>IRowsetFind::FindNextRow</b> to continue if a bookmark row was deleted, is a row to which the consumer does not have access rights, or is no longer a member of the rowset. One of the following:</p>
<p>
VARIANT_TRUE—<b>GetRowsAt</b>,<b> GetApproximatePosition</b>,<b> </b>or <b>FindNextRow</b> skips the bookmark row and continues with the next row.</p>
<p>
VARIANT_FALSE—<b>GetRowsAt</b>,<b> GetApproximatePosition</b>, or <b>FindNextRow</b> returns DB_E_BADBOOKMARK.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_bookmarktype"></a>DBPROP_BOOKMARKTYPE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Bookmark Type<p>
The bookmark type supported by the rowset. One of the following:</p>
<p>
DBPROPVAL_BMK_NUMERIC—The bookmark type is numeric. Numeric bookmarks are based upon a row property that is not dependent on the values of the row's columns. For instance, they can be based on the absolute position of the row within a rowset, or on a row ID that the storage engine assigned to a tuple at its creation. The validity of numeric bookmarks is not changed by modifying the row's columns.</p>
<p>
DBPROPVAL_BMK_KEY—The bookmark type is key. Key bookmarks are based on the values of one or more of the row's columns; these values form a unique key for each row. A key bookmark may be left dangling if the key values of the corresponding row are changed.</p>
<p>
For more information, see "<a href="ch04pr_9sj7.htm">Bookmark Types</a>" in Chapter 4.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_byrefaccessors"></a>DBPROP_BYREFACCESSORS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Pass By Ref Accessors<p>
Whether the provider supports the DBACCESSOR_PASSBYREF flag in <b>IAccessor::CreateAccessor</b>. This applies to both row and parameter accessors.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_cachedeferred"></a>DBPROP_CACHEDEFERRED</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? Y<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Cache Deferred Columns<p>
VARIANT_TRUE—The provider caches the value of a deferred column when the consumer first gets a value from that column. When the consumer later gets a value from the column, the provider returns the value in the cache. The contents of the cache can be overwritten by <b>IRowsetChange::SetData</b> or <b>IRowsetRefresh::RefreshVisibleData</b>. The cached value is released when the row is released.</p>
<p>
Consumers should set the value of this property to VARIANT_TRUE rather sparingly, because it might require substantial memory use in the provider. Such use might limit the number of rows that can be held at one time. Setting the value of this property to VARIANT_TRUE automatically sets the value of the DBPROP_DEFERRED property to VARIANT_TRUE.</p>
<p>
VARIANT_FALSE—The provider does not cache the value of a deferred column, and multiple calls to <b>IRowset::GetData</b> for the column can return different values.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_canfetchbackwards"></a>DBPROP_CANFETCHBACKWARDS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Fetch Backward<p>
Whether the rowset can fetch backward.</p>
<p>
VARIANT_TRUE—<i>cRows</i> in <b>IRowset::GetNextRows</b>, <b>IRowsetLocate::GetRowsAt</b>, and <b>IRowsetScroll::GetRowsAtRatio</b> can be negative. When it is negative, these methods fetch rows backward from the specified row.</p>
<p>
VARIANT_FALSE—<i>cRows</i> must be non-negative.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_canholdrows"></a>DBPROP_CANHOLDROWS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Hold Rows<p>
VARIANT_TRUE—The rowset allows the consumer to retrieve more rows or change the next fetch position while holding previously fetched rows with pending changes.</p>
<p>
VARIANT_FALSE—The rowset requires pending changes to be transmitted to the data source and all rows to be released before fetching additional rows, inserting new rows, or changing the next fetch position.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_canscrollbackwards"></a>DBPROP_CANSCROLLBACKWARDS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Scroll Backward<p>
Whether the rowset can scroll backward.</p>
<p>
VARIANT_TRUE—<i>lRowsOffset</i> in <b>IRowset::GetNextRows</b> or <b>IRowsetLocate::GetRowsAt</b> can be negative.</p>
<p>
VARIANT_FALSE—<i>lRowsOffset</i> must be non-negative.</p>
<p>
If the rowset supports <b>IRowsetLocate</b>, then the value of this property is VARIANT_TRUE, because this method supports backward scrolling by definition.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_cataloglocation"></a>DBPROP_CATALOGLOCATION</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Catalog Location<p>
The position of the catalog name in a qualified table name in a text command. One of the following:</p>
<p>
DBPROPVAL_CL_START—The catalog name is at the start of the fully qualified name. For example, a dBASE<sup>®</sup> provider returns DBPROPVAL_CL_START because the directory (catalog name) is at the start of the table name, as in \EMPDATA\EMP.DBF.</p>
<p>
DBPROPVAL_CL_END—The catalog name is at the end of the fully qualified name. For example, an ORACLE server provider returns DBPROPVAL_CL_END because the catalog name is at the end of the table name, as in ADMIN.EMP@EMPDATA.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_catalogterm"></a>DBPROP_CATALOGTERM</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Catalog Term<p>
The name the data source uses for a catalog; for example, "catalog", "database", or "directory". This is used for building user interfaces.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_catalogusage"></a>DBPROP_CATALOGUSAGE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Catalog Usage<p>
A bitmask specifying how catalog names can be used in text commands. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_CU_DML_STATEMENTS—Catalog names are supported in all Data Manipulation Language statements.</p>
<p>
DBPROPVAL_CU_TABLE_DEFINITION—Catalog names are supported in all table definition statements.</p>
<p>
DBPROPVAL_CU_INDEX_DEFINITION—Catalog names are supported in all index definition statements.</p>
<p>
DBPROPVAL_CU_PRIVILEGE_DEFINITION—Catalog names are supported in all privilege definition statements.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_changeinsertedrows"></a>DBPROP_CHANGEINSERTEDROWS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Change Inserted Rows<p>
VARIANT_TRUE—The consumer can call <b>IRowsetChange::DeleteRows</b> or <b>IRowsetChange::SetData</b> for newly inserted rows.</p>
<p>
VARIANT_FALSE—If the consumer calls <b>DeleteRows</b> or <b>SetData</b> for newly inserted rows, <b>DeleteRows</b> returns a status of DBROWSTATUS_E_NEWLYINSERTED for the row and <b>SetData</b> returns DB_E_NEWLYINSERTED.</p>
<p>
A newly inserted row is defined to be a row for which the insertion has been transmitted to the data source, as opposed to a pending insert row. For some providers this property may imply other properties.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_col_autoincrement"></a>DBPROP_COL_AUTOINCREMENT</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Autoincrement<p>
Whether the values of the column are autoincrementing. One of the following:</p>
<p>
VARIANT_TRUE—The values of the column are autoincrementing.</p>
<p>
VARIANT_FALSE—The values of the column are not autoincrementing.</p>
<p>
If this property is read-only, then whether or not a column is autoincrementing is a property of the datatype. If this property is read/write, then DBPROP_COL_AUTOINCREMENT can be specified for the column provided the AUTO_UNIQUE_VALUE property of the underlying datatype is VARIANT_TRUE in the PROVIDER_TYPES schema rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_col_default"></a>DBPROP_COL_DEFAULT</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: Any<br>
Typical R/W: R/W<br>
Description: Default<p>
A VARIANT specifying the default value for an object—typically a domain or column. If the default value is a string, the string must be quoted so it can be distinguished from an object of the same name. For example, 'Salary' is a string, but Salary is an object, such as a column.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_col_description"></a>DBPROP_COL_DESCRIPTION</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: Description<p>
A string specifying a human-readable description of the specified column.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_col_fixedlength"></a>DBPROP_COL_FIXEDLENGTH</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Fixed Length<p>
Whether a column is fixed- or variable-length.</p>
<p>
If the value of this property is VARIANT_TRUE, the column is fixed length and <i>ulColumnSize</i> in the DBCOLUMNDESC structure contains the fixed-length value. If the value of this property is VARIANT_FALSE or is not specified, the column is variable length and <i>ulColumnSize</i> represents the maximum size of the column. For information about the DBCOLUMNDESC structure, see <a href="tbldef_19b9.htm">ITableDefinition::CreateTable</a>.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_col_nullable"></a>DBPROP_COL_NULLABLE</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Nullable<p>
Whether a column can contain a NULL value. One of the following:</p>
<p>
VARIANT_TRUE—The column can contain NULL values.</p>
<p>
VARIANT_FALSE—The column cannot contain NULL values.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_col_primarykey"></a>DBPROP_COL_PRIMARYKEY</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Primary Key<p>
Whether the column is part of the primary key. One of the following:</p>
<p>
VARIANT_TRUE—The column is part of the primary key of the table.</p>
<p>
VARIANT_FALSE—The column is not part of the primary key of the table.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_col_unique"></a>DBPROP_COL_UNIQUE</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Unique<p>
Whether values of the column must be unique in the table. One of the following:</p>
<p>
VARIANT_TRUE—The values of the column must be unique within the table.</p>
<p>
VARIANT_FALSE—The values of the column can be repeated within the table.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_columndefinition"></a>DBPROP_COLUMNDEFINITION</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Column Definition<p>
A bitmask defining the valid clauses for the definition of a column. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_CD_NOTNULL—Columns can be created non-nullable.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_columnlcid"></a>DBPROP_COLUMNLCID</td>
<td width=58%>Property group: Column<br>
Property set: DBPROPSET_COLUMN<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Column LCID<p>
The locale ID of the column.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_columnrestrict"></a>DBPROP_COLUMNRESTRICT</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Column Privileges<p>
VARIANT_TRUE—Access rights are restricted on a column-by-column basis. If the rowset exposes <b>IRowsetChange</b>, <b>IRowsetChange::SetData</b> cannot be called for at least one column. A provider must not execute a query that would specify a column for which the consumer has no read access rights.</p>
<p>
VARIANT_FALSE—Access rights are not restricted on a column-by-column basis. If the rowset exposes <b>IRowsetChange</b>, <b>SetData</b> can be called for any column in the rowset.</p>
<p>
If access is restricted both by row and by column, then individual columns of particular rows might have their own stricter access rights: the consumer might not even be permitted to read such columns. The column values will be NULL. If a NULL value is contrary to schema rules (NULLs not permitted) then the rowset should not count or return any rows that would have this condition. For more information, see DBPROP_ROWRESTRICT.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_commandtimeout"></a>DBPROP_COMMANDTIMEOUT</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Command Time Out<p>
The number of seconds before a command times out. A value of 0 indicates an infinite timeout.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_commitpreserve"></a>DBPROP_COMMITPRESERVE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Preserve on Commit<p>
VARIANT_TRUE—After committing a transaction, the rowset remains active. That is, it is possible to fetch new rows, update, delete, and insert rows, and so on.</p>
<p>
VARIANT_FALSE—After committing a transaction, the only operations allowed on a rowset are to release row and accessor handles and to release the rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_concatnullbehavior"></a>DBPROP_CONCATNULLBEHAVIOR</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: NULL Concatenation Behavior<p>
How the data source handles the concatenation of NULL-valued character data type columns with non–NULL-valued character data type columns. One of the following:</p>
<p>
DBPROPVAL_CB_NULL—The result is NULL valued.</p>
<p>
DBPROPVAL_CB_NON_NULL—The result is the concatenation of the non–NULL-valued column or columns.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_connectionstatus"></a>DBPROP_CONNECTIONSTATUS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Connection Status<p>
The status of the current connection. One of the following:</p>
<p>
DBPROPVAL_CS_UNINITIALIZED—The DSO is in an uninitialized state.</p>
<p>
DBPROPVAL_CS_INITIALIZED—The DSO is in an initialized state and able to communicate with the data store.</p>
<p>
DBPROPVAL_CS_COMMUNICATIONFAILURE—The DSO is unable to communicate with the data store.</p>
<p>
Some providers may have to silently spawn multiple connections to the database in order to support multiple concurrent Commands, Sessions, and Rowsets, according to DBPROP_MULTIPLECONNECTIONS. For such providers, DBPROP_CONNECTIONSTATUS refers to the status of the primary connection, which was created when the user called <b>Initialize</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_currentcatalog"></a>DBPROP_CURRENTCATALOG</td>
<td width=58%>Property group: Data Source<br>
Property set: DBPROPSET_DATASOURCE<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: Current Catalog<p>
The name of the current catalog. The consumer can use the CATALOGS schema rowset to enumerate catalogs.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_datasourcename"></a>DBPROP_DATASOURCENAME</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Data Source Name<p>
The name of the data source. This might be used during the connection process.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_datasourcereadonly"></a>DBPROP_DATASOURCEREADONLY</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Read-Only Data Source<p>
VARIANT_TRUE—The data source is read-only.</p>
<p>
VARIANT_FALSE—The data source is updatable.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_dbmsname"></a>DBPROP_DBMSNAME</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: DBMS Name<p>
The name of the product accessed by the provider. For example, "ORACLE Server" or, for Microsoft<sup>®</sup> Excel<sup>®</sup>, "Excel".</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_dbmsver"></a>DBPROP_DBMSVER</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: DBMS Version<p>
The version of the product accessed by the provider. The version is of the form ##.##.####, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The provider must render the product version in this form but can also append the product-specific version. For example, "04.01.0000 Rdb 4.1".</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_deferred"></a>DBPROP_DEFERRED</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? Y<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Defer Column<p>
VARIANT_TRUE—The data in the column is not fetched until an accessor is used on the column.</p>
<p>
VARIANT_FALSE—The data in the column is fetched when the row containing it is fetched.</p>
<p>
The value of this property is automatically set to VARIANT_TRUE if the value of the DBPROP_CACHEDEFERRED property is set to VARIANT_TRUE.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_delaystorageobjects"></a>DBPROP_DELAYSTORAGEOBJECTS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Delay Storage Object Updates<p>
In delayed update mode, if the value of this property is VARIANT_TRUE then storage objects are also used in delayed update mode. In particular:
<ul type=disc>
<li>
Changes to the object are not transmitted to the data source until <b>IRowsetUpdate::Update</b> is called,<br><br></li>
<li>
<b>IRowsetUpdate::Undo</b> undoes any pending changes, and<br><br></li>
<li>
<b>IRowsetUpdate::GetOriginalData</b> retrieves the original value of the object; that is, the object's value when the row was last fetched or updated and excluding any changes made since then.</li>
</ul>
<p>
In delayed update mode, if the value of this property is VARIANT_FALSE, then storage objects are used in immediate update mode. In particular:
<ul type=disc>
<li>
Changes to the object are immediately transmitted to the data source.<br><br></li>
<li>
<b>Update</b> has no effect on the object.<br><br></li>
<li>
<b>Undo</b> does not undo changes made to the object since the row was last fetched or updated.<br><br></li>
<li>
<b>GetOriginalData</b> retrieves the current value of the object, including changes made since the row was last fetched or updated.<br><br></li>
<li>
In immediate update mode, this property has no effect on storage objects.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_dsothreadmodel"></a>DBPROP_DSOTHREADMODEL</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Data Source Object Threading Model<p>
A bitmask specifying the threading models supported by the data source object. A combination of one or more of the following:</p>
<p>
DBPROPVAL_RT_FREETHREAD<br>
DBPROPVAL_RT_APTMTTHREAD<br>
DBPROPVAL_RT_SINGLETHREAD</p>
<p>
Note that the threading model returned in this property may be stricter than the thread model registered under the provider's CLSID in the case where additional threading limitations are imposed by underlying components.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_filtercompareops"></a>DBPROP_FILTERCOMPAREOPS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? Y<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Filter Operations<p>
A bitmask describing the comparison operations supported by <b>IViewFilter</b> for a particular column. If no column is specified, this is the full set of comparison operators that may be supported:</p>
<p>
DBPROPVAL_CO_EQUALITY — Provider supports the following comparison operators:<br>
DBCOMPAREOPS_LT<br>
DBCOMPAREOPS_LE<br>
DBCOMPAREOPS_EQ<br>
DBCOMPAREOPS_GE<br>
DBCOMPAREOPS_GT<br>
DBCOMPAREOPS_NE</p>
<p>
DBPROPVAL_CO_STRING — Provider supports the following comparison operator:<br>
DBCOMPAREOPS_BEGINSWITH</p>
<p>
DBPROPVAL_CO_CONTAINS—Provider supports the following comparison operators:<br>
DBCOMPAREOPS_CONTAINS<br>
DBCOMPAREOPS_NOTCONTAINS</p>
<p>
DBPROPVAL_CO_BEGINSWITH—Provider supports the following comparison operators:<br>
DBCOMPAREOPS_BEGINSWITH<br>
DBCOMPAREOPS_NOTBEGINSWITH</p>
<p>
DBPROPVAL_CO_CASESENSITIVE — Provider supports the DBCOMPAREOPS_CASESENSITIVE modifier.</p>
<p>
DBPROPVAL_CO_CASEINSENSITIVE — Provider supports the DBCOMPAREOPS_CASEINSENSITIVE modifier.
<ul type=disc>
<li>
Providers may support one, or the other, or both of DBPROPVAL_CO_CASESENSITIVE and DBPROPVAL_CO_CASEINSENSITIVE.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_findcompareops"></a>DBPROP_FINDCOMPAREOPS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? Y<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Find Operations<p>
A bitmask describing the comparison operations supported by <b>IRowsetFind</b> for a particular column. If no column is specified, this is the full set of comparison operators that may be supported:</p>
<p>
DBPROPVAL_CO_EQUALITY — Provider supports the following comparison operators:<br>
DBCOMPAREOPS_LT<br>
DBCOMPAREOPS_LE<br>
DBCOMPAREOPS_EQ<br>
DBCOMPAREOPS_GE<br>
DBCOMPAREOPS_GT<br>
DBCOMPAREOPS_NE</p>
<p>
DBPROPVAL_CO_STRING — Provider supports the following comparison operators:<br>
DBCOMPAREOPS_BEGINSWITH</p>
<p>
DBPROPVAL_CO_CONTAINS—Provider supports the following comparison operators:<br>
DBCOMPAREOPS_CONTAINS<br>
DBCOMPAREOPS_NOTCONTAINS</p>
<p>
DBPROPVAL_CO_BEGINSWITH—Provider supports the following comparison operators:<br>
DBCOMPAREOPS_BEGINSWITH<br>
DBCOMPAREOPS_NOTBEGINSWITH</p>
<p>
DBPROPVAL_CO_CASESENSITIVE — Provider supports the DBCOMPAREOPS_CASESENSITIVE modifier.</p>
<p>
DBPROPVAL_CO_CASEINSENSITIVE — Provider supports the DBCOMPAREOPS_CASEINSENSITIVE modifier.</p>
<p>
All providers that support<b> IRowsetFind</b> must support DBPROPVAL_CO_EQUALITY and DBPROPVAL_CO_STRING.</p>
<p>
Providers may support one, or the other, or both of DBPROPVAL_CO_CASESENSITIVE and DBPROPVAL_CO_CASEINSENSITIVE.<b> </b></p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_groupby"></a>DBPROP_GROUPBY</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: <b>GROUP BY</b> Support<p>
The relationship between the columns in a <b>GROUP BY</b> clause and the nonaggregated columns in the select list. One of the following:</p>
<p>
DBPROPVAL_GB_EQUALS_SELECT—The <b>GROUP BY</b> clause must contain all nonaggregated columns in the select list. It cannot contain any other columns. For example, <b>SELECT DEPT, MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT</b>.</p>
<p>
DBPROPVAL_GB_COLLATE—A COLLATE clause can be specified at the end of each grouping column.</p>
<p>
DBPROPVAL_GB_CONTAINS_SELECT—The <b>GROUP BY</b> clause must contain all nonaggregated columns in the select list. It can contain columns that are not in the select list. For example, <b>SELECT DEPT, MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT, AGE</b>.</p>
<p>
DBPROPVAL_GB_NO_RELATION—The columns in the <b>GROUP BY</b> clause and the select list are not related. The meaning of nongrouped, nonaggregated columns in the select list is data source–dependent. For example, <b>SELECT DEPT, SALARY FROM EMPLOYEE GROUP BY DEPT, AGE</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_heterogeneoustables"></a>DBPROP_HETEROGENEOUSTABLES</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Heterogeneous Table Support<p>
A bitmask specifying whether the provider can join tables from different catalogs or providers. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_HT_DIFFERENT_CATALOGS<br>
DBPROPVAL_HT_DIFFERENT_PROVIDERS</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_iaccessor"></a>DBPROP_IACCESSOR<br>
<a name="oledbdbprop_ichapteredrowset"></a>DBPROP_ICHAPTEREDROWSET<br>
<a name="oledbdbprop_icolumnsinfo"></a>DBPROP_ICOLUMNSINFO<br>
<a name="oledbdbprop_icolumnsrowset"></a>DBPROP_ICOLUMNSROWSET<br>
<a name="oledbdbprop_iconnectionpointcontainer"></a>DBPROP_ICONNECTIONPOINTCONTAINER<br>
<a name="oledbdbprop_iconverttype"></a>DBPROP_ICONVERTTYPE<br>
<a name="oledbdbprop_idbasynchstatus"></a>DBPROP_IDBASYNCHSTATUS<br>
<a name="oledbdbprop_imultipleresults"></a>DBPROP_IMULTIPLERESULTS<br>
<a name="oledbdbprop_irowset"></a>DBPROP_IROWSET<br>
<a name="oledbdbprop_irowsetchange"></a>DBPROP_IROWSETCHANGE<br>
<a name="oledbdbprop_irowsetfind"></a>DBPROP_IROWSETFIND<br>
<a name="oledbdbprop_irowsetidentity"></a>DBPROP_IROWSETIDENTITY<br>
<a name="oledbdbprop_irowsetindex"></a>DBPROP_IROWSETINDEX <br>
<a name="oledbdbprop_irowsetinfo"></a>DBPROP_IROWSETINFO<br>
<a name="oledbdbprop_irowsetlocate"></a>DBPROP_IROWSETLOCATE<br>
<a name="oledbdbprop_irowsetrefresh"></a>DBPROP_IROWSETREFRESH<br>
<a name="oledbdbprop_irowsetscroll"></a>DBPROP_IROWSETSCROLL<br>
<a name="oledbdbprop_irowsetupdate"></a>DBPROP_IROWSETUPDATE<br>
<a name="oledbdbprop_irowsetview"></a>DBPROP_IROWSETVIEW<br>
<a name="oledbdbprop_isupporterrorinfo"></a>DBPROP_ISUPPORTERRORINFO</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W (except as noted below)<br>
Description:IAccessor<br>
IChapteredRowset<br>
IColumnsInfo<br>
IColumnsRowset<br>
IConnectionPointContainer<br>
IConvertType<br>
IDBAsynchStatus<br>
IMultipleResults<br>
IRowset<br>
IRowsetChange<br>
IRowsetFind<br>
IRowsetIdentity<br>
IRowsetIndex <br>
IRowsetInfo<br>
IRowsetLocate<br>
IRowsetRefresh<br>
IRowsetScroll<br>
IRowsetUpdate<br>
IRowsetView<br>
ISupportErrorInfo<p>
If the value of any of these properties is set to VARIANT_TRUE, the rowset supports the specified interface. Providers that support an interface must support the property associated with that interface with a value of VARIANT_TRUE. These properties are primarily used to request interfaces through <b>ICommandProperties::SetProperties</b>.</p>
<p>
The values of the DBPROP_IRowset, DBPROP_IAccessor, DBPROP_IColumnsInfo, DBPROP_IConvertType, and DBPROP_IRowsetInfo properties are read-only and are always VARIANT_TRUE. They cannot be set to VARIANT_FALSE. If the consumer does not set the value of any of these properties to true, the resulting rowset supports <b>IRowset,</b> <b>IAccessor</b>, <b>IColumnsInfo</b>, <b>IConvertType</b>, and <b>IRowsetInfo</b>.</p>
<p>
Setting DBPROP_IRowsetLocate to VARIANT_TRUE implicitly causes the created rowset to support bookmarks and <b>IRowsetInfo::GetProperties</b> will return VARIANT_TRUE for the property DBPROP_BOOKMARKS. Setting DBPROP_IRowsetUpdate to VARIANT_TRUE automatically sets DBPROP_IRowsetChange to VARIANT_TRUE.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_identifiercase"></a>DBPROP_IDENTIFIERCASE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Identifier Case Sensitivity<p>
How identifiers treat case. One of the following:</p>
<p>
DBPROPVAL_IC_UPPER—Identifiers in SQL are case insensitive and are stored in uppercase in system catalog.</p>
<p>
DBPROPVAL_IC_LOWER—Identifiers in SQL are case insensitive and are stored in lowercase in system catalog.</p>
<p>
DBPROPVAL_IC_SENSITIVE—Identifiers in SQL are case sensitive and are stored in mixed case in system catalog.</p>
<p>
DBPROPVAL_IC_MIXED—Identifiers in SQL are case insensitive and are stored in mixed case in system catalog.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_ilockbytes"></a>DBPROP_ILOCKBYTES<br>
<a name="oledbdbprop_isequentialstream"></a>DBPROP_ISEQUENTIALSTREAM<br>
<a name="oledbdbprop_istorage"></a>DBPROP_ISTORAGE<br>
<a name="oledbdbprop_istream"></a>DBPROP_ISTREAM</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? Y<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description:ILockBytes<br>
ISequentialStream<br>
IStorage<br>
IStream<p>
If the value of this property is set to VARIANT_TRUE, then the rowset is capable of manipulating the contents of columns as a storage object supporting the specified interface. The provider reports its ability to enable this property on a per-column basis by setting the flag DBPROPFLAGS_COLUMNOK. A provider that does not have the ability to turn the property on/off on a per-column basis, does not set DBPROPFLAGS_COLUMNOK. Regardless of whether the property is supported in the rowset as a whole or on a per-column basis, the ability to manipulate a column value as a storage object depends on whether the provider supports the coercion from the column's native type (BLOB or non-BLOB) to the particular storage interface.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_immobilerows"></a>DBPROP_IMMOBILEROWS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Immobile Rows<p>
VARIANT_TRUE—The rowset will not reorder inserted or updated rows. For <b>IRowsetChange::InsertRow</b>, rows will appear at the end of the rowset.</p>
<p>
VARIANT_FALSE—If the rowset is ordered, then inserted rows and updated rows (where one or more of the columns in the ordering criteria are updated) obey the ordering criteria of the rowset. If the rowset is not ordered, then inserted rows are not guaranteed to appear in a determinate position, and the position of updated rows is not changed.</p>
<p>
This property is meaningful only if DBPROP_OWNINSERT is VARIANT_TRUE.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_autoupdate"></a>DBPROP_INDEX_AUTOUPDATE</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Auto-Update<p>
Whether the index is maintained automatically when changes are made to the corresponding base table. One of the following:</p>
<p>
VARIANT_TRUE—The index is automatically maintained.</p>
<p>
VARIANT_FALSE—The index must be maintained by the consumer through explicit calls to <b>IRowsetChange</b>.</p>
<p>
Ensuring consistency of the index as a result of updates to the associated base table is the responsibility of the consumer.</p>
<p>
VARIANT_TRUE is always returned when using integrated indexes.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_clustered"></a>DBPROP_INDEX_CLUSTERED</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Clustered<p>
Whether an index is clustered.</p>
<p>
VARIANT_TRUE—The leaf nodes of the index contain full rows, not bookmarks. This is a way to represent a table clustered by key value.</p>
<p>
VARIANT_FALSE—The leaf nodes of the index contain bookmarks of the base table rows whose key value matches the key value of the index entry.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_fillfactor"></a>DBPROP_INDEX_FILLFACTOR</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Fill Factor<p>
For a B+-tree index, this property represents the storage utilization factor of page nodes during the creation of the index. The value is an integer from 1 to 100 representing the percentage of use of an index node. For a linear hash index, this property represents the storage utilization of the entire hash structure (the ratio of the used area to the total allocated area) before a file structure expansion occurs.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_initialsize"></a>DBPROP_INDEX_INITIALSIZE</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Initial Size<p>
The total number of bytes allocated to this structure at creation time.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_nullcollation"></a>DBPROP_INDEX_NULLCOLLATION</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: NULL Collation<p>
How NULLs are collated in the index. One of the following:</p>
<p>
DBPROPVAL_NC_END—NULLs are collated at the end of the list, regardless of the collation order.</p>
<p>
DBPROPVAL_NC_START—NULLs are collated at the start of the list, regardless of the collation order.</p>
<p>
DBPROPVAL_NC_HIGH—NULLs are collated at the high end of the list.</p>
<p>
DBPROPVAL_NC_LOW—NULLs are collated at the low end of the list.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_nulls"></a>DBPROP_INDEX_NULLS</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: NULL Keys<p>
Whether NULL keys are allowed. One of the following values:</p>
<p>
DBPROPVAL_IN_DISALLOWNULL—The index does not allow entries where the key columns are NULL. If the consumer attempts to insert an index entry with a NULL key, then the provider returns an error.</p>
<p>
DBPROPVAL_IN_IGNORENULL—The index does not insert entries containing NULL keys. If the consumer attempts to insert an index entry with a NULL key, then the provider ignores that entry and no error code is returned.</p>
<p>
DBPROPVAL_IN_IGNOREANYNULL—The index does not insert entries where some column key has a NULL value. For an index having a multi-column search key, if the consumer inserts an index entry with NULL value in some column of the search key, then the provider ignores that entry and no error code is returned.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_primarykey"></a>DBPROP_INDEX_PRIMARYKEY</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Primary Key<p>
Whether the index represents the primary key on the table.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_sortbookmarks"></a>DBPROP_INDEX_SORTBOOKMARKS</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Sort Bookmarks<p>
How the index treats repeated keys. One of the following:</p>
<p>
VARIANT_TRUE—The index sorts repeated keys by bookmark.</p>
<p>
VARIANT_FALSE—The index does not sort repeated keys by bookmark.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_tempindex"></a>DBPROP_INDEX_TEMPINDEX</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Temporary Index<p>
Whether the index is temporary. One of the following:</p>
<p>
VARIANT_TRUE—The index is destroyed when the session is released.</p>
<p>
VARIANT_FALSE—The index is created permanently.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_type"></a>DBPROP_INDEX_TYPE</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Index Type<p>
The type of the index. One of the following:</p>
<p>
DBPROPVAL_IT_BTREE—The index is a B+-tree.</p>
<p>
DBPROPVAL_IT_HASH—The index is a hash file using linear or extensible hashing.</p>
<p>
DBPROPVAL_IT_CONTENT—The index is a content index.</p>
<p>
DBPROPVAL_IT_OTHER—The index is some other type of index.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_index_unique"></a>DBPROP_INDEX_UNIQUE</td>
<td width=58%>Property group: Index<br>
Property set: DBPROPSET_INDEX<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Unique<p>
Whether index keys must be unique.</p>
<p>
VARIANT_TRUE: The index keys must be unique.</p>
<p>
VARIANT_FALSE: Duplicate keys are allowed.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_asynch"></a>DBPROP_INIT_ASYNCH</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Asynchronous Processing<p>
A bitmask specifying the asynchronous processing performed on the data source. A combination of zero or more of the following</p>
<p>
DBPROPVAL_ASYNCH_INITIALIZE: <b>IDBInitialize::Initialize</b> returns immediately, but the actual initialization of the data source is done asynchronously. The data source behaves as an unititialized data source prior to completing the initialization process, except that any call to <b>IDBInitialize</b> returns E_UNEXPECTED.</p>
<p>
If no bits are set (the default), <b>IDBInitialize::Initialize</b> does not return until the data source is completely initialized.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_catalog"></a>DBPROP_INIT_CATALOG</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Typical R/W: R/W<br>
Description: Initial Catalog<p>
The name of the initial, or default, catalog to use when connecting to the data source. If the provider supports changing the catalog for an initialized data source, the consumer can specify a different catalog name through the DBPROP_CURRENCATALOG property in the DBPROPSET_DATASOURCE property set after initialization.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_datasource"></a>DBPROP_INIT_DATASOURCE</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: Data Source<p>
The name of the database or enumerator to connect to. DBPROP_INIT_DATASOURCE is used to identify the data source to connect to, for instance a relational database server or a local file.&nbsp; If the provider uses two-part naming to identify the data source, then the data source name is qualified with the location specified in DBPROP_INIT_DATASOURCE.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_hwnd"></a>DBPROP_INIT_HWND</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Window Handle<p>
The window handle to be used if the data source object or enumerator needs to prompt for additional information.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_impersonation_level"></a>DBPROP_INIT_IMPERSONATION_LEVEL</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Impersonation Level<p>
The level of impersonation that the server is allowed to use when impersonating the client. This property applies only to network connections other than Remote Procedure Call (RPC) connections; these impersonation levels are similar to those provided by RPC. The values of this property correspond directly to the levels of impersonation that can be specified for authenticated RPC connections, but can be applied to connections other than authenticated RPC. One of the following:</p>
<p>
DB_IMP_LEVEL_ANONYMOUS—The client is anonymous to the server. The server process cannot obtain identification information about the client and cannot impersonate the client.</p>
<p>
DB_IMP_LEVEL_IDENTIFY—The server can obtain the client's identity. The server can impersonate the client for ACL checking but cannot access system objects as the client.</p>
<p>
DB_IMP_LEVEL_IMPERSONATE—The server process can impersonate the client's security context while acting on behalf of the client. This information is obtained when the connection is established, not on every call.</p>
<p>
DB_IMP_LEVEL_DELEGATE—The process can impersonate the client's security context while acting on behalf of the client. The server process can also make outgoing calls to other servers while acting on behalf of the client.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_lcid"></a>DBPROP_INIT_LCID</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Locale Identifier<p>
The locale ID of preference for the consumer. Consumers specify the LCID at initialization. This provides a method for the server to determine the consumer's LCID of choice in cases where it can use this information. This property does not guarantee that all text returned to the consumer will be translated according to the LCID.</p>
<p>
Providers may wish to set the <i>dwOptions</i> of the DBPROP structure for this property to DBPROPOPTIONS_OPTIONAL.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_location"></a>DBPROP_INIT_LOCATION</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: Location<p>
The location of the data source or enumerator to connect to. Typically, this will be a server name. DBPROP_INIT_LOCATION is used as the first part of a two-part name to qualify the data source specified in the DBPROP_INIT_DATASOURCE property. For example, if the data source is defined on a different machine, this might be the machine name on which to look for the data source definition. This is typically not used if the provider can identify the data source using a single name, such as the name of an RDBMS server, that the consumer can use to identify the data source directly.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_mode"></a>DBPROP_INIT_MODE</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Mode<p>
A bitmask specifying access permissions. A combination of zero or more of the following:</p>
<p>
DB_MODE_READ—Read-only.</p>
<p>
DB_MODE_WRITE—Write-only.</p>
<p>
DB_MODE_READWRITE—Read/write (DB_MODE_READ | DB_MODE_WRITE).</p>
<p>
DB_MODE_SHARE_DENY_READ—Prevents others from opening in read mode.</p>
<p>
DB_MODE_SHARE_DENY_WRITE—Prevents others from opening in write mode.</p>
<p>
DB_MODE_SHARE_EXCLUSIVE—Prevents others from opening in read/write mode (DB_MODE_SHARE_DENY_READ | DB_MODE_SHARE_DENY_WRITE).</p>
<p>
DB_MODE_SHARE_DENY_NONE—Neither read nor write access can be denied to others.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_oledbservices"></a>DBPROP_INIT_OLEDBSERVICES</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: OLE DB Services<p>
A bitmask specifying OLE DB services to enable. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_OS_RESOURCEPOOLING—Resources should be pooled.</p>
<p>
DBPROPVAL_OS_TXNENLISTMENT—Sessions in an MTS environment should automatically be enlisted in a global transaction where required (implies DBPROPVAL_OS_RESOURCEPOOLING).</p>
<p>
DBPROPVAL_OS_ENABLEALL (default)—All services should be invoked. By default, all services are enabled and invoked as requested. Individual services can be deselected by specifying the bitwise-OR of DBPROPVAL_OS_ENABLEALL along with the bitwise complement of any services to be deselected. For example, DBPROPVAL_OS_ENABLEALL | ~DBPROPVAL_OS_TXNENLISTMENT enables all services except automatic transaction enlistment in an MTS environment.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_prompt"></a>DBPROP_INIT_PROMPT</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I2<br>
Typical R/W: R/W<br>
Description: Prompt<p>
Whether to prompt the user during initialization. One of the following values:</p>
<p>
DBPROMPT_PROMPT—Always prompt the user for initialization information.</p>
<p>
DBPROMPT_COMPLETE—Prompt the user only if more information is needed.</p>
<p>
DBPROMPT_COMPLETEREQUIRED—Prompt the user only if more information is needed. Do not allow the user to enter optional information.</p>
<p>
DBPROMPT_NOPROMPT—Do not prompt the user.</p>
<p>
Information obtained from the user during prompting is available following initialization by calling <b>GetProperties</b> for the appropriate initialization properties.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_protection_level"></a>DBPROP_INIT_PROTECTION_LEVEL</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Protection Level<p>
The level of protection of data sent between client and server. This property applies only to network connections other than RPC connections; these protection levels are similar to those provided by RPC. The values of this property correspond directly to the levels of protection that can be specified for authenticated RPC connections, but can be applied to connections other than authenticated RPC. One of the following:</p>
<p>
DB_PROT_LEVEL_NONE—Performs no authentication of data sent to the server.</p>
<p>
DB_PROT_LEVEL_CONNECT—Authenticates only when the client establishes the connection with the server.</p>
<p>
DB_PROT_LEVEL_CALL—Authenticates the source of the data at the beginning of each request from the client to the server.</p>
<p>
DB_PROT_LEVEL_PKT—Authenticates that all data received is from the client.</p>
<p>
DB_PROT_LEVEL_PKT_INTEGRITY—Authenticates that all data received is from the client and that it has not been changed in transit.</p>
<p>
DB_PROT_LEVEL_PKT_PRIVACY—Authenticates that all data received is from the client, that it has not been changed in transit, and protects the privacy of the data by encrypting it.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_providerstring"></a>DBPROP_INIT_PROVIDERSTRING</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_BSTR<br>
Typical R/W: R/W<br>
Description: Extended Properties<p>
A string containing provider-specific, extended connection information. Use of this property implies that the consumer knows how this string will be interpreted and used by the provider. Consumers should use this property only for provider-specific connection information that cannot be explicitly described through the property mechanism.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_init_timeout"></a>DBPROP_INIT_TIMEOUT</td>
<td width=58%>Property group: Initialization<br>
Property set: DBPROPSET_DBINIT<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Connect Timeout<p>
The amount of time (in seconds) to wait for initialization to complete.</p>
<p>
For maximum user concurrency and component interoperability, providers for whom initialization is a potentially lengthy operation, such as connection across a network, are strongly encouraged to support this property.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_iviewchapter"></a>DBPROP_IVIEWCHAPTER<br>
<a name="oledbdbprop_iviewfilter"></a>DBPROP_IVIEWFILTER<br>
<a name="oledbdbprop_iviewrowset"></a>DBPROP_IVIEWROWSET<br>
<a name="oledbdbprop_iviewsort"></a>DBPROP_IVIEWSORT<br>
DBPROP_IACCESSOR<br>
DBPROP_ICOLUMNSINFO<br>
DBPROP_ISUPPORTERRORINFO<br>
</td>
<td width=58%>Property group: View<br>
Property set: DBPROPSET_VIEW<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description:IViewChapter<br>
IViewFilter<br>
IViewRowset<br>
IViewSort<br>
IAccessor<br>
IColumnsInfo<br>
ISupportErrorInfo<p>
For all methods returning a <b>Rowset</b> or <b>View</b> object, in addition to <b>Rowset</b> properties, DBPROPSET_VIEW should be set before creating a view.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_literalbookmarks"></a>DBPROP_LITERALBOOKMARKS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Literal Bookmarks<p>
VARIANT_TRUE—Bookmarks can be compared literally. That is, they can be compared as a sequence of bytes. Furthermore, if the bookmarks are ordered (as specified by the DBPROP_ORDEREDBOOKMARKS property), the bytes are guaranteed to be ordered so that an arithmetic comparison as their scalar type yields the same result as a call to <b>IRowsetLocate::Compare</b>. Setting the value of this property to VARIANT_TRUE automatically sets the value of DBPROP_BOOKMARKS to VARIANT_TRUE.</p>
<p>
VARIANT_FALSE—Bookmarks can only be compared with <b>IRowsetLocate::Compare</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_literalidentity"></a>DBPROP_LITERALIDENTITY</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Literal Row Identity<p>
VARIANT_TRUE—The consumer can perform a binary comparison of two row handles to determine whether they point to the same row.</p>
<p>
VARIANT_FALSE—The consumer must call <b>IRowsetIdentity::IsSameRow</b> to determine whether two row handles point to the same row.</p>
<p>
Whether the handle of a newly inserted row can be successfully compared to another handle is specified by the DBPROP_STRONGIDENTITY property.</p>
<p>
For more information about row identity, see "<a href="ch04pr_6pmc.htm">Uniqueness of Rows in the Rowset</a>" in Chapter 4.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_lockmode"></a>DBPROP_LOCKMODE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Lock Mode<p>
The level of locking peformed by the rowset. One of the following:</p>
<p>
DBPROPVAL_LM_NONE—The provider is not required to lock rows at any time to ensure successful updates. Updates may fail when sent to the server for reasons of concurrency (for example, if someone else has updated the row).</p>
<p>
DBPROPVAL_LM_SINGLEROW—The provider uses the minimum level of locking necessary to ensure that changes successfully written to a single row returned by the most recent fetch will not fail due to a concurrency violation if <b>Update</b> is called before any additional rows are retrieved. Typically this means that the provider takes a lock on the row when <b>SetData</b> is first called on the row, but the provider may lock the row as early as when it is read in order to guarantee that calling <b>Update</b> will succeed.</p>
<p>
Lock Mode and Isolation Level are closely related, but distinct. A consumer's isolation level specifies the isolation of that consumer from changes made by other users to the underlying data. Lock mode defines when underlying data is locked in order to ensure updates succeed. The provider may use locking in order to enforce higher levels of isolation, in which case a higher level of locking may occur than required to enforce the specified lock mode. Lock mode specifies the minimum level of locking.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxindexsize"></a>DBPROP_MAXINDEXSIZE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Maximum Index Size<p>
The maximum number of bytes allowed in the combined columns of an index. If there is no specified limit or the limit is unknown, this value is set to zero.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxopenchapters"></a>DBPROP_MAXOPENCHAPTERS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Maximum Open Chapters<p>
The maximum number of of chapters that can be open at any time.</p>
<p>
If a chapter must be released before a new chapter can be opened, this value is one; if the provider does not support chapters, this value is zero.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxopenrows"></a>DBPROP_MAXOPENROWS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Maximum Open Rows<p>
The maximum number of rows that can be active at the same time. This limit does not reflect resource limitations such as RAM, but does apply if the rowset implementation uses some strategy that results in a limit. If there is no limit, the value of this property is zero. The provider is free to support a greater number of active rows than the maximum specified by the consumer. In this case, the provider will return its actual maximum number of active rows instead of the value specified by the consumer.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxorsinfilter"></a>DBPROP_MAXORSINFILTER</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Maximum OR Conditions<p>
The maximum number of disjunct conditions that can be supported in a view filter. Multiple conditions (rows) of a view filter are joined in a logical OR. Providers that do not support joining multiple conditions return a value of 1. Providers that do not support view filters return a value of 0.</p>
<p>
This value applies only to the conditions that can be joined in a logical OR in a call to <b>SetFilter</b>; it does not imply the maximum number of OR conditions that may exist in a command.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxpendingrows"></a>DBPROP_MAXPENDINGROWS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Maximum Pending Rows<p>
The maximum number of rows that can have pending changes at the same time. This limit does not reflect resource limitations such as Random Access Memory (RAM), but does apply if the rowset implementation uses some strategy that results in a limit. If there is no limit, this value is zero. The provider is free to support a greater number of pending rows than the maximum specified by the consumer. In this case, the provider will return its actual maximum number of pending rows instead of the value specified by the consumer.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxrows"></a>DBPROP_MAXROWS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Maximum Rows<p>
The maximum number of rows that can be returned in a rowset. If there is no limit, this value is zero. If the provider supports setting DBPROP_MAXROWS the provider must ensure that the rowset never contains more than the specified number of rows.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxrowsize"></a>DBPROP_MAXROWSIZE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Maximum Row Size<p>
The maximum length of a single row in a table. If there is no specified limit or the limit is unknown, this value is set to zero.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxrowsizeincludesblob"></a>DBPROP_MAXROWSIZEINCLUDESBLOB</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Maximum Row Size Includes BLOB<p>
VARIANT_TRUE—The maximum row size returned for the DBPROP_MAXROWSIZE property includes the length of all BLOB data.</p>
<p>
VARIANT_FALSE—The maximum row size does not include the length of all BLOB data.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxsortcolumns"></a>DBPROP_MAXSORTCOLUMNS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Maximum Sort Columns<p>
The maximum number of columns that can be supported in a View Sort. If there is no specified limit or the limit is unknown, this value is set to zero.</p>
<p>
This value applies only to the number of sort columns that can be specified in a call to <b>SetSortOrder</b>; it does not imply the maximum number of columns that can be used to sort in a command.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maxtablesinselect"></a>DBPROP_MAXTABLESINSELECT</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Maximum Tables in SELECT<p>
The maximum number of tables allowed in the <b>FROM</b> clause of a <b>SELECT</b> statement. If there is no specified limit or the limit is unknown, this value is set to zero.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_maywritecolumn"></a>DBPROP_MAYWRITECOLUMN</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? Y<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Column Writable<p>
Whether a particular column is writable or not. This property can be set implicitly through the command used to create the rowset. For example, if the rowset is created by the SQL statement <b>SELECT A, B FROM MyTable FOR UPDATE OF A</b>, then this property is VARIANT_TRUE for column A and VARIANT_FALSE for column B.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_memoryusage"></a>DBPROP_MEMORYUSAGE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Memory Usage<p>
This property estimates the amount of memory that can be used by the rowset. If it is 0, the rowset can use unlimited memory. If it is between 1 and 99 inclusive, the rowset can use the specified percentage of total available virtual memory (physical and page file). If it is greater than or equal to 100, the rowset can use up to the specified number of kilobytes of memory.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_multipleconnections"></a>DBPROP_MULTIPLECONNECTIONS</td>
<td width=58%>Property group: Data Source<br>
Property set: DBPROPSET_DATASOURCE<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Multiple Connections<p>
Some providers may have to spawn multiple connections to the database in order to support multiple concurrent Commands, Sessions, and Rowsets. Such providers may expose DBPROP_MULTIPLECONNECTIONS in order to let the consumer disable making additional connections under the covers. Providers that can support multiple concurrent Commands, Sessions, and Rowsets without spawning multiple connections do not support this property.</p>
<p>
VARIANT_TRUE (default)—The provider silently creates additional connections as required in order to support concurrent Command, Session, and Rowset objects.</p>
<p>
VARIANT_FALSE—The provider returns DB_E_OBJECTOPEN if a method would require spawning an additional connection to the database.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_multipleparamsets"></a>DBPROP_MULTIPLEPARAMSETS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Multiple Parameter Sets<p>
VARIANT_TRUE—The provider supports multiple parameter sets.</p>
<p>
VARIANT_FALSE—The provider supports only a single set of parameters per execution.</p>
<p>
All providers that support parameters must support this property. Providers that do not support parameters must not support this property.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_multipleresults"></a>DBPROP_MULTIPLERESULTS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Multiple Results<p>
A bitmask specifying whether the provider supports multiple results objects and what restrictions it places on these objects. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_MR_SUPPORTED—The provider supports multiple results objects.</p>
<p>
DBPROPVAL_MR_CONCURRENT—More than one rowset created by the same multiple results object can exist concurrently. If this bit is not set, the consumer must release the current rowset before calling <b>IMultipleResults::GetResult</b> to get the next result.</p>
<p>
If multiple results objects are not supported, DBPROPVAL_MR_NOTSUPPORTED is returned. For more information about multiple results, see "<a href="ch03pr_0tf7.htm">Multiple Results</a>" in Chapter 3.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_multiplestorageobjects"></a>DBPROP_MULTIPLESTORAGEOBJECTS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Multiple Storage Objects<p>
VARIANT_TRUE—The provider supports multiple, open storage objects at the same time.</p>
<p>
VARIANT_FALSE—The provider supports only one open storage object at a time. Any method that attempts to open a second storage object returns a status of DBSTATUS_E_CANTCREATE for the column on which it attempted to open the second storage object, regardless of whether the objects are constructed over the same column, different columns in the same row, or different rows.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_multitableupdate"></a>DBPROP_MULTITABLEUPDATE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Multi-Table Update<p>
VARIANT_TRUE—The provider can update rowsets derived from multiple tables.</p>
<p>
VARIANT_FALSE—The provider cannot update rowsets derived from multiple tables.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_notificationgranularity"></a>DBPROP_NOTIFICATIONGRANULARITY</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Notification Granularity<p>
DBPROPVAL_NT_SINGLEROW—For methods that operate on multiple rows, the provider calls <b>IRowsetNotify::OnRowChange</b> separately for each phase for each row. A cancellation affects a single row; it does not affect the other rows, and notifications are still sent for these rows.</p>
<p>
DBPROPVAL_NT_MULTIPLEROWS—For methods that operate on multiple rows, then for each phase, the provider calls <b>OnRowChange</b> once for all rows that succeed and once for all rows that fail. This separation can occur at each phase where a change can fail. For example, if <b>IRowsetChange::DeleteRows</b> deletes some rows and fails to delete others during the Preliminary Work phase, it calls <b>OnRowChange</b> twice: once with DBEVENTPHASE_SYNCHAFTER and the array of handles of rows that it deleted, and once with DBEVENTPHASE_FAILEDTODO and the array of handles of rows it failed to delete. A cancellation affects all rows with handles that were passed to <b>OnRowChange</b>.</p>
<p>
DBPROP_NOTIFICATIONGRANULARITY does not affect how providers return notifications about events that affect columns or the entire rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_notificationphases"></a>DBPROP_NOTIFICATIONPHASES</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Notification Phases<p>
A bitmask specifying the notification phases supported by the provider. A combination of two or more of the following:</p>
<p>
DBPROPVAL_NP_OKTODO<br>
DBPROPVAL_NP_ABOUTTODO<br>
DBPROPVAL_NP_SYNCHAFTER<br>
DBPROPVAL_NP_FAILEDTODO<br>
DBPROPVAL_NP_DIDEVENT</p>
<p>
The DBPROPVAL_NP_FAILEDTODO and DBPROPVAL_NP_DIDEVENT bits must be returned by all providers that support notifications.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_notifycolumnset"></a>DBPROP_NOTIFYCOLUMNSET<br>
<a name="oledbdbprop_notifyrowdelete"></a>DBPROP_NOTIFYROWDELETE<br>
<a name="oledbdbprop_notifyrowfirstchange"></a>DBPROP_NOTIFYROWFIRSTCHANGE<br>
<a name="oledbdbprop_notifyrowinsert"></a>DBPROP_NOTIFYROWINSERT<br>
<a name="oledbdbprop_notifyrowresynch"></a>DBPROP_NOTIFYROWRESYNCH<br>
<a name="oledbdbprop_notifyrowsetrelease"></a>DBPROP_NOTIFYROWSETRELEASE<br>
<a name="oledbdbprop_notifyrowsetfetchpositionchange"></a>DBPROP_NOTIFYROWSETFETCH-POSITIONCHANGE<br>
<a name="oledbdbprop_notifyrowundochange"></a>DBPROP_NOTIFYROWUNDOCHANGE<br>
<a name="oledbdbprop_notifyrowundodelete"></a>DBPROP_NOTIFYROWUNDODELETE<br>
<a name="oledbdbprop_notifyrowundoinsert"></a>DBPROP_NOTIFYROWUNDOINSERT<br>
<a name="oledbdbprop_notifyrowupdate"></a>DBPROP_NOTIFYROWUPDATE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description:Column Set Notification<br>
Row Delete Notification<br>
Row First Change Notification<br>
Row Insert Notification<br>
Row Resynchronization Notification<br>
Rowset Release Notification<br>
Rowset Fetch Position Change Notification<br>
Row Undo Change Notification<br>
Row Undo Delete Notification<br>
Row Undo Insert Notification<br>
Row Update Notification<p>
A bitmask specifying whether the notification phase is cancelable. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_NP_OKTODO<br>
DBPROPVAL_NP_ABOUTTODO<br>
DBPROPVAL_NP_SYNCHAFTER</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_nullcollation"></a>DBPROP_NULLCOLLATION</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: NULL Collation Order<p>
Where NULLs are sorted in a list. One of the following:</p>
<p>
DBPROPVAL_NC_END—NULLs are sorted at the end of the list, regardless of the sort order.</p>
<p>
DBPROPVAL_NC_HIGH—NULLs are sorted at the high end of the list.</p>
<p>
DBPROPVAL_NC_LOW—NULLs are sorted at the low end of the list.</p>
<p>
DBPROPVAL_NC_START—NULLs are sorted at the start of the list, regardless of the sort order.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_oleobjects"></a>DBPROP_OLEOBJECTS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: OLE Object Support<p>
A bitmask specifying the ways in which the provider supports access to BLOBs and OLE objects stored in columns. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_OO_BLOB—The provider supports access to BLOBs as structured storage objects. A consumer determines what interfaces are supported through DBPROP_STRUCTUREDSTORAGE.</p>
<p>
DBPROPVAL_OO_IPERSIST—The provider supports access to OLE objects through <b>IPersistStream</b>, <b>IPersistStreamInit</b>, or <b>IPersistStorage</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_orderbycolumnsinselect"></a>DBPROP_ORDERBYCOLUMNSINSELECT</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: ORDER BY Columns in Select List<p>
VARIANT_TRUE—Columns in an <b>ORDER BY</b> clause must be in the select list.</p>
<p>
VARIANT_FALSE—Columns in an <b>ORDER BY</b> clause are not required to be in the select list.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_orderedbookmarks"></a>DBPROP_ORDEREDBOOKMARKS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Bookmarks Ordered<p>
VARIANT_TRUE—Bookmarks can be compared to determine the relative position of their associated rows in the rowset. Setting the value of this property to VARIANT_TRUE automatically sets the value of DBPROP_BOOKMARKS to VARIANT_TRUE.</p>
<p>
VARIANT_FALSE—Bookmarks can only be compared for equality. </p>
<p>
Whether bookmarks can be compared byte-by-byte or must be compared with <b>IRowsetLocate::Compare</b> depends on the value of the DBPROP_LITERALBOOKMARKS property.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_otherinsert"></a>DBPROP_OTHERINSERT</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Others' Inserts Visible<p>
VARIANT_TRUE—The rowset can see rows inserted by someone other than a consumer of the rowset. That is, if someone other than a consumer of the rowset inserts a row, any consumer of the rowset can see that row the next time it fetches a set of rows containing it. This includes rows inserted by other parties in the same transaction, as well as rows inserted by parties outside the transaction.</p>
<p>
The transaction isolation level does not affect the ability of the rowset to see rows inserted by other parties in the same transaction, such as other rowsets in the same session. However, it does restrict the ability of the rowset to see rows inserted by parties outside the transaction.</p>
<p>
VARIANT_FALSE—The rowset cannot see rows inserted by others.</p>
<p>
For programmers accustomed to the cursor model in ODBC, the DBPROP_OTHERUPDATEDELETE and DBPROP_OTHERINSERT properties correspond to ODBC cursors as follows:</p>
<p>
Static cursor:<br>
 DBPROP_OTHERINSERT = VARIANT_FALSE<br>
 DBPROP_OTHERUPDATEDELETE = <br>
 VARIANT_FALSE</p>
<p>
Keyset-driven cursor:<br>
 DBPROP_OTHERINSERT = VARIANT_FALSE<br>
 DBPROP_OTHERUPDATEDELETE = <br>
 VARIANT_TRUE</p>
<p>
Dynamic cursor:<br>
 DBPROP_OTHERINSERT = VARIANT_TRUE<br>
 DBPROP_OTHERUPDATEDELETE = <br>
 VARIANT_TRUE</p>
<p>
Furthermore, the DBPROP_OWNUPDATEDELETE and DBPROP_OWNINSERT properties correspond to the values returned by the SQL_STATIC_SENSITIVITY information type in <b>SQLGetInfo</b> in ODBC.</p>
<p>
For a description of how these properties relate to transaction isolation level, see "<a href="ch05pr_68c3.htm">Visibility of Other Changes</a>" in Chapter 5.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_otherupdatedelete"></a>DBPROP_OTHERUPDATEDELETE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Others' Changes Visible<p>
VARIANT_TRUE—The rowset can see updates and deletes made by someone other than a consumer of the rowset. That is, suppose someone other than a consumer of the rowset updates the data underlying a row or deletes the row. If the row is released completely, any consumer of the rowset will see that change the next time it fetches the row. This includes updates and deletes made by other parties in the same transaction, as well as updates and deletes made by parties outside the transaction.</p>
<p>
The transaction isolation level does not affect the ability of the rowset to see updates or deletes made by other parties in the same transaction, such as other rowsets in the same session. However, it does restrict the ability of the rowset to see updates or deletes made by parties outside the transaction.</p>
<p>
VARIANT_FALSE—The rowset cannot see updates and deletes made by others.</p>
<p>
For information about how this relates to the cursor types in ODBC, see the DBPROP_OTHERINSERT property.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_outputparameteravailability"></a>DBPROP_OUTPUTPARAMETERAVAILABILITY</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Output Parameter Availability<p>
The time at which output parameter values become available. One of the following:</p>
<p>
DBPROPVAL_OA_NOTSUPPORTED—Output parameters are not supported.</p>
<p>
DBPROPVAL_OA_ATEXECUTE—Output parameter data is available immediately after <b>ICommand::Execute</b> returns.</p>
<p>
DBPROPVAL_OA_ATROWRELEASE—If a command returns a single result that is a rowset, output parameter data is available at the time the rowset is completely released. If a command returns multiple results, output parameter data is available when <b>IMultipleResults::GetResult</b> returns DB_S_NORESULT or the multiple results object is completely released, whichever occurs first. Before the output parameter data is available, the consumer's bound memory is in an indeterminate state. For more information about multiple results, see "<a href="ch03pr_0tf7.htm">Multiple Results</a>" in Chapter 3.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_owninsert"></a>DBPROP_OWNINSERT</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Own Inserts Visible<p>
VARIANT_TRUE—The rowset can see its own inserts. That is, if a consumer of a rowset inserts a row, any consumer of the rowset can see that row the next time it fetches a set of rows containing it.</p>
<p>
This ability is independent of the transaction isolation level, because all consumers of the rowset share the same transaction.</p>
<p>
VARIANT_FALSE—The rowset cannot see rows inserted by consumers of the rowset unless the command is re-executed.</p>
<p>
For information about how this relates to the SQL_STATIC_SENSITIVITY information type in ODBC, see the DBPROP_OTHERINSERT property.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_ownupdatedelete"></a>DBPROP_OWNUPDATEDELETE</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Own Changes Visible<p>
VARIANT_TRUE—The rowset can see its own updates and deletes. That is, suppose a consumer of the rowset updates or deletes a row. If the row is released completely, any consumer of the rowset will see the update or delete the next time it fetches that row.</p>
<p>
This ability is independent of the transaction isolation level because all consumers of the rowset share the same transaction.</p>
<p>
VARIANT_FALSE—The rowset cannot see updates and deletes made by consumers of the rowset unless the command is re-executed.</p>
<p>
For information about how this relates to the SQL_STATIC_SENSITIVITY information type in ODBC, see the DBPROP_OTHERINSERT property.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_persistentidtype"></a>DBPROP_PERSISTENTIDTYPE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Persistent ID Type<p>
An integer specifying the type of DBID that the provider uses when persisting DBIDs for tables, indexes, and columns. This is generally the type of DBID that the provider considers to be the most permanent under schema changes and physical data reorganizations. One of the following:</p>
<p>
DBPROPVAL_PT_NAME<br>
DBPROPVAL_PT_PROPID<br>
DBPROPVAL_PT_GUID<br>
DBPROPVAL_PT_GUID_NAME<br>
DBPROPVAL_PT_GUID_PROPID<br>
DBPROPVAL_PT_PGUID_NAME<br>
DBPROPVAL_PT_PGUID_PROPID</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_prepareabortbehavior"></a>DBPROP_PREPAREABORTBEHAVIOR</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Prepare Abort Behavior<p>
How aborting a transaction affects prepared commands. One of the following:</p>
<p>
DBPROPVAL_CB_DELETE—Aborting a transaction deletes prepared commands. The application must reprepare commands before executing them.</p>
<p>
DBPROPAL_CB_PRESERVE—Aborting a transaction preserves prepared commands. The application can re-execute commands without repreparing them.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_preparecommitbehavior"></a>DBPROP_PREPARECOMMITBEHAVIOR</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Prepare Commit Behavior<p>
How committing a transaction affects prepared commands. One of the following:</p>
<p>
DBPROPVAL_CB_DELETE—Committing a transaction deletes prepared commands. The application must reprepare commands before executing them.</p>
<p>
DBPROPAL_CB_PRESERVE—Committing a transaction preserves prepared commands. The application can re-execute commands without repreparing them.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_procedureterm"></a>DBPROP_PROCEDURETERM</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Procedure Term<p>
A character string with the data source vendor's name for a procedure; for example, "database procedure", "stored procedure", or "procedure". This is used for building user interfaces.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_providerfriendlyname"></a>DBPROP_PROVIDERFRIENDLYNAME</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Provider Friendly Name<p>
The friendly name of the provider, for example "Microsoft OLE DB Provider for ODBC Drivers".</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_providername"></a>DBPROP_PROVIDERNAME</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Provider Name<p>
The filename of the provider; for example, "MYPRVDR.DLL".</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_provideroledbver"></a>DBPROP_PROVIDEROLEDBVER</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: OLE DB Version<p>
The version of OLE DB supported by the provider. The version is of the form ##.##, where the first two digits are the major version and the next two digits are the minor version. For example, OLE DB providers conforming to the 1.5 specification would return "01.50".</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_providerver"></a>DBPROP_PROVIDERVER</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Provider Version<p>
The version of the provider. The version is of the form ##.##.####, where the first two digits are the major version, the next two digits are the minor version, and the last four digits are the release version. The provider can append a description of the provider.</p>
<p>
This is the same as DBPROP_DBMSVER if the DBMS is the same as the provider; that is, if the DBMS supports OLE DB interfaces directly. It is different if the provider is separate from the DBMS, such as when the provider accesses the DBMS through ODBC.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_quickrestart"></a>DBPROP_QUICKRESTART</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Quick Restart<p>
VARIANT_TRUE—<b>IRowset::RestartPosition</b> is relatively quick to execute. In particular, it does not reexecute the command that created the rowset.</p>
<p>
VARIANT_FALSE—<b>RestartPosition</b> is expensive to execute and requires reexecuting the command that created the rowset.</p>
<p>
Although the value of this property can be set to VARIANT_TRUE, the provider is not required to honor it. The reason for this is that the provider does not know what the command is at the time the property is set; in particular, the consumer can set this property and then change the command text. However, the provider can fail this property if it is never able to quickly restart the next fetch position. Thus, if a consumer successfully sets this property, it must still check this flag on the rowset to determine if the next fetch position can be quickly set.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_quotedidentifiercase"></a>DBPROP_QUOTEDIDENTIFIERCASE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W R<br>
Description: Quoted Identifier Sensitivity<p>
How quoted identifiers treat case. One of the following:</p>
<p>
DBPROPVAL_IC_UPPER—Quoted identifiers in SQL are case insensitive and are stored in uppercase in system catalog.</p>
<p>
DBPROPVAL_IC_LOWER—Quoted identifiers in SQL are case insensitive and are stored in lowercase in system catalog.</p>
<p>
DBPROPVAL_IC_SENSITIVE—Quoted identifiers in SQL are case sensitive and are stored in mixed case in system catalog.</p>
<p>
DBPROPVAL_IC_MIXED—Quoted identifiers in SQL are case insensitive and are stored in mixed case in system catalog.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_reentrantevents"></a>DBPROP_REENTRANTEVENTS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Reentrant Events<p>
VARIANT_TRUE—The provider supports reentrancy during callbacks to the <b>IRowsetNotify</b> interface. The provider might not support reentrancy on all rowset methods. These methods return DB_E_NOTREENTRANT.</p>
<p>
VARIANT_FALSE—The provider does not support such reentrancy. The provider returns DB_E_NOTREENTRANT on methods called during the notification.</p>
<p>
Regardless of this flag, all providers must support <b>IRowset::GetData</b> and <b>IRowset::ReleaseRows</b> calls during notifications, so long as the columns being accessed do not include deferred columns.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_removedeleted"></a>DBPROP_REMOVEDELETED</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Remove Deleted Rows<p>
If the value of this property is VARIANT_TRUE, the provider removes rows it detects as having been deleted from the rowset. That is, fetching a block of rows that formerly included a deleted row does not return a handle to that row.</p>
<p>
Which rows the rowset detects as having been deleted is determined by the DBPROP_OWNUPDATEDELETE and DBPROP_OTHERUPDATEDELETE properties; whether the rowset removes these rows is determined by this property.</p>
<p>
This property is independent of the transaction isolation level. While the transaction isolation level in some cases determines whether the rowset can detect a row as having been deleted, it has no effect on whether or not the rowset removes that row.</p>
<p>
For programmers accustomed to the cursor model in ODBC, the value of this property is always VARIANT_TRUE for rowsets implemented through dynamic cursors; that is, dynamic cursors always remove deleted rows. Whether static and keyset-driven cursors remove deleted rows depends on the value of this property.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_reportmultiplechanges"></a>DBPROP_REPORTMULTIPLECHANGES</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Report Multiple Changes<p>
VARIANT_TRUE—An update or delete can affect multiple rows and the provider can detect that multiple rows have been updated or deleted. This happens when a provider cannot uniquely identify a row. For example, the provider might use the values of all the columns in the row to identify the row; if these columns do not include a unique key, an update or delete might affect more than one row.</p>
<p>
VARIANT_FALSE—An update or delete always affects a single row or the provider cannot detect whether it affects multiple rows.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_resetdatasource"></a>DBPROP_RESETDATASOURCE</td>
<td width=58%>Property group: Data Source<br>
Property set: DBPROPSET_DATASOURCE<br>
Type: VT_I4<br>
Typical R/W: W<br>
Description: Reset Datasource<p>
A bitmask specifying the data source state to be reset.&nbsp; A combination of zero or more of the following:</p>
<p>
DBPROPVAL_RD_RESETALL—The provider should reset all states associated with the data source, such that the DSO appears as if it were newly initialized, with the exception that any open object is not released.</p>
<p>
DBPROP_RESETDATASOURCE is generally used by a consumer in order to reuse an existing data source object without paying the cost of uninitializing and reinitializing the DSO.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_returnpendinginserts"></a>DBPROP_RETURNPENDINGINSERTS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Return Pending Inserts<p>
VARIANT_TRUE—The methods that fetch rows, such as <b>IRowset::GetNextRows</b>, can return pending insert rows; that is, rows that have been inserted in delayed update mode but for which <b>IRowsetUpdate::Update</b> has not yet been called.</p>
<p>
VARIANT_FALSE—The methods that fetch rows cannot return pending insert rows.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_row_bulkops"></a>DBPROP_ROW_BULKOPS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_14 <br>
Description: Bulk Operations<p>
A bitmask describing optimizations that a provider may take for updates to the rowset. These optimizations are usually used for things like bulk loading of a table. The following values can be specified, and are usually set as OPTIONAL properties because they are hints to the provider. Additional bits may be defined in the future; providers should be prepared to handle new bits in this bitmask by ignoring them if the property is set as optional, or returning an error if the property is set as required.</p>
<p>
DBPROPVAL_BO_NOLOG—The provider is not required to log inserts or changes to the rowset.</p>
<p>
DBPROPVAL_BO_NOINDEXUPDATE—The provider is not required to update indexes based on inserts or changes to the rowset. Any indexes need to be re-created following changes made through the rowset.</p>
<p>
DBPROPVAL_BO_REFINTEGRITY—Referential Integrity constraints do not need to be checked or enforced for changes made through the rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_rowrestrict"></a>DBPROP_ROWRESTRICT</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Row Privileges<p>
VARIANT_TRUE—Access rights are restricted on a row-by-row basis. If the rowset supports <b>IRowsetChange</b>, <b>IRowsetChange::SetData</b> can be called for some but not all rows. A rowset must never count or return a handle for a row for which the consumer does not have read access rights.</p>
<p>
VARIANT_FALSE—Access rights are not restricted on a row-by-row basis. If the rowset supports <b>IRowsetChange</b>, <b>SetData</b> can be called for any row.</p>
<p>
For more information, see DBPROP_COLUMNRESTRICT.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_rowset_asynch"></a>DBPROP_ROWSET_ASYNCH</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Asynchronous Rowset Processing<p>
A bitmask specifying the asynchronous processing performed on the rowset. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_ASNYCH_INITIALIZE: The rowset is initialized asynchronously. The method requesting the rowset returns immediately, but attempting to call any interface other than <b>IConnectionPointContainer</b> to obtain the IID_IDBAsynchNotify connection point may fail and the full set of interfaces may not be available on the rowset until asynchronous initialization has completed.</p>
<p>
DBPROPVAL_ASNYCH_SEQUENTIALPOPULATION: The rowset is sequentially asynchronously populated; requests for rows may return DB_S_ENDOFROWSET before the end of the rowset is actually reached. Asynchronously populated rows are always added to the end of the rowset.</p>
<p>
DBPROPVAL_ASNYCH_RANDOMPOPULATION: The rowset is randomly asynchronously populated; requests for rows may return DB_S_ENDOFROWSET before the end of the rowset is actually reached. Asynchronously populated rows may be inserted anywhere in the rowset.</p>
<p>
The consumer may set both DBPROPVAL_ASNYCH_SEQUENTIALPOPULATION and DBPROPVAL_ASNYCH_RANDOMPOPULATION bits to request that the rowset be asynchronously populated either sequentially or randomly. The consumer is prepared for asynchronous notifications in <b>OnRowChange </b>as well as from<b> IDBAsynchStatus</b>. Only one property is returned by the rowset; if the rowset is asynchronously populated it returns either DBPROPVAL_ASNYCH_RANDOM or DBPROPVAL_ASNYCH_SEQUENTIAL. </p>
<p>
If no bits are set (the default) the rowset is initialized and populated synchronously. All requested interfaces are available when the method requesting the rowset returns and requesting rows block until the requested number of <i>hRows</i> are obtained or the end of the rowset is reached.</p>
<p>
DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION: The rowset is to be populated asynchronously in the background. The rowset supports <b>IDBAsynchStatus</b> in order to get information about the population of the rowset or abort background population, and may support the connection point for <b>IDBAsynchNotify</b> to give status of the background population. DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION is implied by DBPROPVAL_ASYNCH_SEQUENTIALPOPLUATION and DBPROPVAL_ASYNCH_RANDOMPOPULATION, however, if DBPROPVAL_ASYNCH_SEQUENTIALPOPLUATION or DBPROPVAL_ASYNCH_RANDOMPOPLUATION are not also set, the rowset appears to the consumer as if it were being populated synchronously in that requesting rows will always block until the requested number of hRows are obtained or the end of the rowset is reached.</p>
<p>
DBPROPVAL_ASYNCH_PREPOPULATE: The consumer prefers to optimize for retrieving all data when the rowset is materialized. This is a hint to the provider to fetch all of the data up-front. DBPROPVAL_ASYNCH_PREPOPULATE is only a hint to the provider, the provider should never fail opening the rowset based on the setting of this flag, and need not return it to the consumer, even if the rowset is prepopulated.</p>
<p>
DBPROPVAL_ASYNCH_POPULATEONDEMAND: The consumer prefers to optimize for getting each individual request for data returned as quickly as possible. This is a hint to the provider to populate the rowset as the data is fetched. DBPROPVAL_ASYNCH_POPULATEONDEMAND is only a hint to the provider, the provider should never fail opening the rowset based on the setting of this flag, and need not return it to the consumer, even if the rowset is populated on demand.</p>
<p>
Since DBPROPVAL_ASYNCH_PREPOPULATE and DBPROPVAL_ANSYCH_POPULATEONDEMAND are just hints to the provider, if the consumer sets one or both of these properties in addition to the asychronous population properties DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION or DBPROPVAL_ASYNCH_RANDOMPOPULATION, then the provider should attempt to populate asynchronously according to DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION and DBPROPVAL_ASYNCH_RANDOMPOPULATION. If the asynchronous population specified by DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION or DBPROPVAL_ASYNCH_RANDOMPOPULATION can not be supported, the provider should fail if DBPROPOPTIONS_REQUIRED was specified for the property, or attempt to populate synchronously according to DBPROPVAL_ASYNCH_PREPOPULATE or DBPROPVAL_ASYNCH_POPULATEONDEMAND if the property was set with DBPROPOPTIONS_OPTIONAL.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_rowsetconversionsoncommand"></a>DBPROP_ROWSETCONVERSIONSONCOMMAND</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Rowset Conversions on Command<p>
VARIANT_TRUE—Callers to <b>IConvertType::CanConvert</b> can inquire on a command about conversions supported on rowsets generated by the command.</p>
<p>
VARIANT_FALSE—Callers can inquire on a command only about conversions supported by the command.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_rowthreadmodel"></a>DBPROP_ROWTHREADMODEL</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Row Threading Model<p>
A bitmask specifying the threading models supported by the rowset. A combination of one or more of the following:</p>
<p>
DBPROPVAL_RT_FREETHREAD<br>
DBPROPVAL_RT_APTMTTHREAD<br>
DBPROPVAL_RT_SINGLETHREAD</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_schematerm"></a>DBPROP_SCHEMATERM</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Schema Term<p>
The name the data source uses for a schema; for example, "schema" or "owner". This is used for building user interfaces.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_schemausage"></a>DBPROP_SCHEMAUSAGE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Schema Usage<p>
A bitmask specifying how schema names can be used in text commands. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_SU_DML_STATEMENTS—Schema names are supported in all Data Manipulation Language statements.</p>
<p>
DBPROPVAL_SU_TABLE_DEFINITION—Schema names are supported in all table definition statements.</p>
<p>
DBPROPVAL_SU_INDEX_DEFINITION—Schema names are supported in all index definition statements.</p>
<p>
DBPROPVAL_SU_PRIVILEGE_DEFINITION—Schema names are supported in all privilege definition statements.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_servercursor"></a>DBPROP_SERVERCURSOR</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Server Cursor<p>
If the value of this property is set to VARIANT_TRUE with <b>ICommandProperties::SetProperties</b>, the cursor underlying the rowset (if any) must be materialized on the server.</p>
<p>
If the value of this property is not set to VARIANT_TRUE with <b>ICommandProperties::SetProperties</b>, it is up to the provider to decide where to materialize the cursor.</p>
<p>
The consumer can determine where the cursor was materialized by checking the value of this property on the rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_serverdataoninsert"></a>DBPROP_SERVERDATAONINSERT</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Server Data on Insert<p>
VARIANT_TRUE—At the time an insert is transmitted to the server (when <b>InsertRow</b> is called in immediate mode, or when Update is called for an inserted row in deferred update mode), the provider retrieves data from the server to update the local row cache.</p>
<p>
VARIANT_FALSE—The provider does not retrieve server values for newly inserted rows.&nbsp; The consumer can only retrieve data values explicitly set in the call to <b>InsertRow</b>, or by calls to <b>SetData</b> for the hRow returned by <b>InsertRow</b>.</p>
<p>
Consumers should be aware that setting DBPROP_SERVERDATAONINSERT is potentially expensive, and may not be supported for certain types of rowsets.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_servername"></a>DBPROP_SERVERNAME</td>
<td width=58%>Property group: Datasource Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type:VT_BSTR<br>
Typical R/W:R<br>
Description:&nbsp; Server Name<p>
The name of the server. This may be the same as the DBPROP_INIT_DATASOURCE property if the server name is used to define the data source that the user specifies when connecting, or may be the actual name of the server if the provider connects through "friendly" data source names.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_sess_autocommitisolevels"></a>DBPROP_SESS_AUTOCOMMITISOLEVELS</td>
<td width=58%>Property group: Session<br>
Property set: DBPROPSET_SESSION<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Autocommit Isolation Levels<p>
A bitmask specifying the transaction isolation level while in auto-commit mode. The values that can be set in this bitmask are the same as those that can be set for DBPROP_SUPPORTEDTXNISOLEVELS.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_sortonindex"></a>DBPROP_SORTONINDEX</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Sort on Index<p>
VARIANT_TRUE: The provider supports <b>SetSortOrder</b> only for columns contained in an index.</p>
<p>
VARIANT_FALSE: The provider does not require columns to be indexed in order to be specified in <b>SetSortOrder</b>, or the provider does not support <b>SetSortOrder</b>.</p>
<p>
This value applies only to the ability to specify a column in <b>SetSortOrder</b>; it does not imply whether or not nonindexed columns can be used in the order clause of a command.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_sqlsupport"></a>DBPROP_SQLSUPPORT</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: SQL Support<p>
A bitmask specifying the level of support for SQL. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_SQL_NONE—SQL is not supported.</p>
<p>
DBPROPVAL_SQL_ODBC_MINIMUM<br>
DBPROPVAL_SQL_ODBC_CORE<br>
DBPROPVAL_SQL_ODBC_EXTENDED—These levels correspond to the levels of SQL conformance defined in ODBC version 2.5. These levels are cumulative. That is, if the provider supports one level, it also sets the bits for all lower levels. For example, if the provider sets the DBPROPVAL_SQL_ODBC_CORE bit, it also sets the DBPROPVAL_SQL_ODBC_MINIMUM bit.</p>
<p>
DBPROPVAL_SQL_ESCAPECLAUSES—The provider supports the ODBC escape clause syntax.</p>
<p>
DBPROPVAL_SQL_ANSI92_ENTRY<br>
DBPROPVAL_SQL_FIPS_TRANSITIONAL<br>
DBPROPVAL_SQL_ANSI92_INTERMEDIATE<br>
DBPROPVAL_SQL_ANSI92_FULL—These levels correspond to the levels in ANSI SQL92. These levels are cumulative. That is, if the provider supports one level, it also sets the bits for all lower levels.</p>
<p>
DBPROPVAL_SQL_ANSI89_IEF—The provider supports the ANSI89 Integrity Enhancement Facility.</p>
<p>
DBPROPVAL_SQL_SUBMINIMUM—The provider supports the DBGUID_SQL dialect and parses the command text according to SQL rules, but does not support either the minimum ODBC level nor the ANSI SQL92 Entry level. This level is not accumulative; providers that support at least the minimal ODBC Level or ANSI SQL92 Entry Level do not set this bit. OLE DB consumers can determine whether or not the provider supports the DBGUID_SQL dialect by verifying that the DBPROPVAL_SQL_NONE bit is not set.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_strongidentity"></a>DBPROP_STRONGIDENTITY</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_BOOL<br>
Typical R/W: R<br>
Description: Strong Row Identity<p>
VARIANT_TRUE—The handles of newly inserted rows can be compared as specified by DBPROP_LITERALIDENTITY.</p>
<p>
VARIANT_FALSE—There is no guarantee that the handles of newly inserted rows can be compared successfully. In this case, <b>IRowsetIdentity::IsSameRow</b> might return DB_E_NEWLYINSERTED.</p>
<p>
A newly inserted row is defined as a row for which an insertion has been transmitted to the data source, as opposed to a pending insert row. For more information, see "<a href="ch04pr_6pmc.htm">Uniqueness of Rows in the Rowset</a>" in Chapter 4.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_structuredstorage"></a>DBPROP_STRUCTUREDSTORAGE</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Structured Storage<p>
A bitmask specifying what interfaces the rowset supports on storage objects. If a provider can support any of these interfaces it is also required to support <b>ISequentialStream</b>. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_SS_ISEQUENTIALSTREAM<br>
DBPROPVAL_SS_ISTREAM<br>
DBPROPVAL_SS_ISTORAGE<br>
DBPROPVAL_SS_ILOCKBYTES</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_subqueries"></a>DBPROP_SUBQUERIES</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Subquery Support<p>
A bitmask specifying the predicates in text commands that support subqueries. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_SQ_CORRELATEDSUBQUERIES<br>
DBPROPVAL_SQ_COMPARISON<br>
DBPROPVAL_SQ_EXISTS<br>
DBPROPVAL_SQ_IN<br>
DBPROPVAL_SQ_QUANTIFIED</p>
<p>
The DBPROPVAL_SQ_CORRELATEDSUBQUERIES bit indicates that all predicates that support subqueries support correlated subqueries.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_supportedtxnddl"></a>DBPROP_SUPPORTEDTXNDDL</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Transaction DDL<p>
Whether Data Definition Language (DDL) statements are supported in transactions. One of the following:</p>
<p>
DBPROPVAL_TC_NONE—Transactions are not supported.</p>
<p>
DBPROPVAL_TC_DML—Transactions can only contain Data Manipulation Language (DML) statements. DDL statements within a transaction cause an error.</p>
<p>
DBPROPVAL_TC_DDL_COMMIT—Transactions can only contain DML statements. DDL statements within a transaction cause the transaction to be committed.</p>
<p>
DBPROPVAL_TC_DDL_IGNORE—Transactions can only contain DML statements. DDL statements within a transaction are ignored.</p>
<p>
DBPROPVAL_TC_ALL—Transactions can contain DDL and DML statements in any order.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_supportedtxnisolevels"></a>DBPROP_SUPPORTEDTXNISOLEVELS</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Isolation Levels<p>
A bitmask specifying the supported transaction isolation levels. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_TI_CHAOS<br>
DBPROPVAL_TI_READUNCOMMITTED<br>
DBPROPVAL_TI_BROWSE<br>
DBPROPVAL_TI_CURSORSTABILITY<br>
DBPROPVAL_TI_READCOMMITTED<br>
DBPROPVAL_TI_REPEATABLEREAD<br>
DBPROPVAL_TI_SERIALIZABLE<br>
DBPROPVAL_TI_ISOLATED</p>
<p>
For more information, see "<a href="ch12pr_5mgj.htm">Isolation Levels</a>" in Chapter 12.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_supportedtxnisoretain_table"></a>DBPROP_SUPPORTEDTXNISORETAIN</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_I4<br>
Typical R/W: R<br>
Description: Isolation Retention<p>
A bitmask specifying the supported transaction isolation retention levels. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_TR_COMMIT_DC—The transaction may either preserve or dispose of isolation context across a retaining commit.</p>
<p>
DBPROPVAL_TR_COMMIT—The transaction preserves its isolation context (that is, it preserves its locks, if that is how isolation is implemented) across a retaining commit.</p>
<p>
DBPROPVAL_TR_COMMIT_NO—The transaction is explicitly not to preserve isolation across a retaining commit.</p>
<p>
DBPROPVAL_TR_ABORT_DC—The transaction may either preserve or dispose of isolation context across a retaining abort.</p>
<p>
DBPROPVAL_TR_ABORT—The transaction preserves its isolation context across a retaining abort.</p>
<p>
DBPROPVAL_TR_ABORT_NO—The transaction is explicitly not to preserve isolation across a retaining abort.</p>
<p>
DBPROPVAL_TR_DONTCARE—The transaction may preserve or dispose of isolation context across a retaining commit or abort. This is the default.</p>
<p>
DBPROPVAL_TR_BOTH—Isolation is preserved across both a retaining commit and a retaining abort.</p>
<p>
DBPROPVAL_TR_NONE—Isolation is explicitly not to be retained across either a retaining commit or abort.</p>
<p>
DBPROPVAL_TR_OPTIMISTIC—Optimistic concurrency control is to be used. If DBPROPVAL_TR_OPTIMISTIC is specified, then whatever isolation technology is in place (such as locking), it must be the case that other transactions' ability to make changes to the data and resources manipulated by this transaction is not in any way affected by the data read or updated by this transaction. That is, optimistic control is to be used for all data in the transaction.</p>
<p>
For more information, see <a href="txnloc_44dq.htm">ITransactionLocal::StartTransaction</a>.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_supportedtxnisoretain"></a>DBPROP_TABLETERM</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: Table Term<p>
The name the data source uses for a table; for example, "table" or "file". This is used for building user interfaces.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_tbl_temptable"></a>DBPROP_TBL_TEMPTABLE</td>
<td width=58%>Property group: Table<br>
Property set: DBPROPSET_TABLE<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Temporary Table<p>
Whether the table is temporary. One of the following:</p>
<p>
VARIANT_TRUE—The table is destroyed when the session is released.</p>
<p>
VARIANT_FALSE—The table is created permanently.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_transactedobject"></a>DBPROP_TRANSACTEDOBJECT</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? Y<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: Objects Transacted<p>
VARIANT_TRUE—Any object created on the specified column is transacted. That is, data made visible to the data source through the object can be committed with <b>ITransaction::Commit</b> or aborted with <b>ITransaction::Abort</b>.</p>
<p>
VARIANT_FALSE—Any object created on the specified column is not transacted. That is, all changes to the object are permanent once they are made visible to the data source.</p>
<p>
If this property is set on a column that does not contain an object, it is ignored.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_uniquerows"></a>DBPROP_UNIQUEROWS</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Type: VT_BOOL<br>
Typical R/W: R/W<br>
Description: UniqueRows<p>
VARIANT_TRUE—Each row is uniquely identified by its column values.</p>
<p>
VARIANT_FALSE—Rows in the rowset may or may not be uniquely identified by their column values.</p>
<p>
If this property is set to VARIANT_TRUE when opening the rowset, the provider adds additional columns, if necessary, in order to ensure that each row is uniquely identified by its values. These additional columns appear at the end of the rowset, have a DBID of type DBKIND_GUID_PROPID, DBKIND_PGUID_PROPID, DBKIND_GUID_NAME, or DBKIND_PGUID_NAME, and the guid (or pguid) element is (or points to) DBCOL_SPECIALCOL.&nbsp; These columns are typically not displayed to the user, but are used by components such as update services to uniquely identify a row. </p>
<p>
The provider may, but is not required to, duplicate existing columns in the rowset in order to make sure key columns are included.</p>
<p>
If this property is set to VARIANT_TRUE, and the provider supports the optional <b>IColumnsRowset</b> metadata column DBCOLUMN_KEYCOLUMN, then the set of columns which uniquely identify the row have a value of VARIANT_TRUE in the DBCOLUMN_KEYCOLUMN column returned by <b>IColumnsRowset</b>. This may be a subset of the columns in the row, or all of the columns if the provider cannot determine a proper subset that uniquely identifies the row. If this property is not VARIANT_TRUE, then DBCOLUMN_KEYCOLUMN may or may not be set to VARIANT_TRUE for key columns, but there is no guarantee that the set of columns that are flagged with this value are sufficient in order to uniquely identify the row.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_updatability"></a>DBPROP_UPDATABILITY</td>
<td width=58%>Property group: Rowset<br>
Property set: DBPROPSET_ROWSET<br>
Column? N<br>
Type: VT_I4<br>
Typical R/W: R/W<br>
Description: Updatability<p>
A bitmask specifying the supported methods on <b>IRowsetChange</b>. A combination of zero or more of the following:</p>
<p>
DBPROPVAL_UP_CHANGE—<b>SetData</b> is supported.</p>
<p>
DBPROPVAL_UP_DELETE—<b>DeleteRows</b> is supported.</p>
<p>
DBPROPVAL_UP_INSERT—<b>InsertRow</b> is supported.</p>
<p>
DBPROP_UPDATABILITY should be used in conjunction with DBPROP_IRowsetChange. If DBPROP_IRowsetChange is VARIANT_TRUE and DBPROP_UPDATABILITY is not set, then it is provider-specific what methods are supported on <b>IRowsetChange</b>.</p>
<p>
If DBPROP_UPDATABILITY is specified, then the provider must not support any methods whose bits are not set.</p>
</td>
</tr>
<tr valign=top>
<td width=42%><a name="oledbdbprop_username"></a>DBPROP_USERNAME</td>
<td width=58%>Property group: Data Source Information<br>
Property set: DBPROPSET_DATASOURCEINFO<br>
Type: VT_BSTR<br>
Typical R/W: R<br>
Description: User Name<p>
A character string with the name used in a particular database, which can be different than a login name.</p>
</td>
</tr>
</table><br>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE MEMBER, DROP MEMBER, ALTER MEMBER Statements</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="creatememberdropmemberaltermemberstatements"></a>CREATE MEMBER, DROP MEMBER, ALTER MEMBER Statements</h1>
<p>
The CREATE MEMBER, DROP MEMBER, and ALTER MEMBER statements allow the creation, deletion, and modification of calculated members. Calculated members can be defined in the scope of a single query (as part of the DEFINE clause in the SELECT statement, or on the session level (by using the CREATE MEMBER statement). A newly created member may have several properties such as Name, Expression, Format, Fore_Color and Back_Color. The syntax allows setting these properties.</p>
<h2>BNF</h2>
<p>
Member functions serve to extend an existing Dimension and Level with an additional member.</p>
<p>
&lt;<i>MDX statement</i>&gt; <b>::=</b> &lt;<i>select-clause-list</i>&gt; &lt;<i>from-clause</i>&gt; &lt;<i>optional-where-clause</i>&gt; <br>
 &nbsp; &lt;<i>optional-define-formula-clause-list</i>&gt; &lt;<i>optional-define-set-clause-list</i>&gt;<br>
 &nbsp; | &lt;<i>create-formula-clause</i>&gt;<br>
 &nbsp; | &lt;<i>alter-formula-clause</i>&gt;<br>
 &nbsp; | &lt;<i>drop-formula-clause</i>&gt;<br>
 &nbsp; | &lt;<i>create-set-clause</i>&gt;<br>
 &nbsp; | &lt;<i>alter-set-clause</i>&gt;<br>
 &nbsp; | &lt;<i>drop-set-clause</i>&gt;</p>
<p>
&lt;<i>optional-define-formula-clause-list</i>&gt; <b>::= </b>&lt;<i>empty</i>&gt;<br>
 &nbsp; | &lt;<i>define-formula-clause-list</i>&gt;</p>
<p>
&lt;<i>define-formula-clause-list</i>&gt; <b>::= </b>&lt;<i>define-formula-clause</i>&gt;<br>
 &nbsp; | &lt;<i>define-formula-clause</i>&gt;<b>,</b> &lt;<i>define-formula-clause-list</i>&gt;</p>
<p>
&lt;<i>define-formula-clause</i>&gt; <b>::= DEFINE </b>&lt;<i>define-formula-subset</i>&gt;</p>
<p>
&lt;<i>create-formula-clause</i>&gt; <b>::= CREATE </b>&lt;<i>optional-scope</i>&gt; &lt;<i>define-formula-subset</i>&gt;</p>
<p>
&lt;<i>alter-formula-clause</i>&gt; <b>::= ALTER </b>&lt;<i>define-formula-subset</i>&gt;</p>
<p>
&lt;<i>drop-formula-clause</i>&gt; <b>::= DROP MEMBER </b>&lt;<i>fully-qualified-member-name</i>&gt;</p>
<p>
&lt;<i>define-formula-subset</i>&gt; <b>::= MEMBER </b>&lt;<i>fully-qualified-member-name</i>&gt; <b>AS <br>
 &nbsp; </b>&lt;<i>property-definition-list</i>&gt;</p>
<p>
&lt;<i>property-definition-list</i>&gt; <b>::= </b>&lt;<i>property-definition</i>&gt;<br>
 &nbsp; | &lt;<i>property-definition</i>&gt;<b>,</b> &lt;<i>property-definition-list</i>&gt;</p>
<p>
&lt;<i>property-definition</i>&gt; <b>::= </b>&lt;<i>property-identifier</i>&gt; <b>=</b> &lt;<i>property-value</i>&gt;</p>
<p>
&lt;<i>property-identifier</i>&gt; <b>::= </b>&lt;<i>identifier</i>&gt;</p>
<p>
&lt;<i>property-value</i>&gt; <b>::= </b>&lt;<i>string</i>&gt;<br>
 &nbsp; | &lt;<i>number</i>&gt;</p>
<p>
&lt;<i>optional-define-set-clause-list</i>&gt; <b>::= </b>&lt;<i>empty</i>&gt;<br>
 &nbsp; | &lt;<i>define-set-clause-list</i>&gt;</p>
<p>
&lt;<i>define-set-clause-list</i>&gt; <b>::= </b>&lt;<i>define-set-clause</i>&gt;<br>
 &nbsp; | &lt;<i>define-set-clause</i>&gt;<b>,</b> &lt;<i>define-set-clause-list</i>&gt;</p>
<p>
&lt;<i>define-set-clause</i>&gt; <b>::= DEFINE </b>&lt;<i>define-set-subset</i>&gt;</p>
<p>
&lt;<i>create-set-clause</i>&gt; <b>::= CREATE </b>&lt;<i>optional-scope</i>&gt; &lt;<i>define-set-subset</i>&gt;</p>
<p>
&lt;<i>alter-set-clause</i>&gt; <b>::= ALTER </b>&lt;<i>define-set-subset</i>&gt;</p>
<p>
&lt;<i>drop-set-clause</i>&gt; <b>::= DROP SET </b>&lt;<i>set-name</i>&gt;</p>
<p>
&lt;<i>define-set-subset</i>&gt; <b>::= SET </b>&lt;<i>set-expression</i>&gt; <b>AS </b>&lt;<i>set-name</i>&gt;</p>
<p>
&lt;<i>optional-scope</i>&gt; <b>::= </b>&lt;<i>empty</i>&gt; | <b>GLOBAL</b> | <b>SESSION</b></p>
<h2>Example</h2>
<pre><code>select … define member Measures.Measure.Margin AS
 &nbsp; expression = "sales - cost",
 &nbsp; forecolor = "if( margin &lt; 0, red, green )"

select topnpro on rows
 &nbsp; { cxt, scale, margin } on columns
 &nbsp; from sales
 &nbsp; define member sales.measures.margin as
 &nbsp;&nbsp;&nbsp;&nbsp; expression = "sales - cost"
 &nbsp; define set topcount(products,10,5.98) AS topnpro

create member Products.Product.[Office] AS
expression = "[Word] + [Excel] + [Access]"</code></pre>
<h2>Scope</h2>
<p>
There are several scopes an object (formula or set) may occur within. A separate syntax is used for each scope.
<ul type=disc>
<li>
Query scope. The visibility and lifetime of the object is limited to the query. The formula is defined in an individual query. Query scope overloads session and global scope.<br><br></li>
<li>
Session scope. The visibility and lifetime of the object is limited to the session that created it. Session scope overloads global scope.<br><br></li>
<li>
Global scope. The visibility extends to other users, and its lifetime extends beyond the session from which it was created.</li>
</ul>
<p class=indent>
<B><b>Notes</b></B>
<ul type=disc>
<li>
Objects specified within an individual query have query scope.<br><br></li>
<li>
Objects not specifying a scope have session scope.<br><br></li>
<li>
ALTER and DROP always affect the most local scope (i.e. session before global).</li>
</ul>
<h2>Quoted Strings in Member Definitions</h2>
<p>
Strings inside member definitions are delimited with either single or double quotes. These can be nested arbitrarily by alternating single and double quotes.</p>
<h2>Standard Properties</h2>
<p>
Some standard property names exist. When connected to a Microsoft<sup>®</sup> OLAP Server, the list of standard properties is either supported or available to be supported, as the Administrator chooses.</p>
<p>
Additional properties may be available. The properties depend upon the cube definition, and represent information relevant to the Dimension / Level in the cube.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=584>
<tr valign=top>
<td class=label width=21%><b>Property</b></td>
<td class=label width=79%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=21%>Expression</td>
<td width=79%>Value, an additive numeric quantity. It need not be additive, since it might be used only as a displayed member. For instance, percentages might be returned as the result of a calculation.</td>
</tr>
<tr valign=top>
<td width=21%>SolveOrder</td>
<td width=79%>The order in which the formula will be solved in case of intersection with other formulas.</td>
</tr>
<tr valign=top>
<td width=21%>Format_String</td>
<td width=79%>MS Office format string&nbsp; - for the cell values</td>
</tr>
<tr valign=top>
<td width=21%>Alignment</td>
<td width=79%>0-Left, 1-right, 2-center - for the cell values</td>
</tr>
<tr valign=top>
<td width=21%>Fore_Color</td>
<td width=79%>RGB value – for the cell values</td>
</tr>
<tr valign=top>
<td width=21%>Back_Color</td>
<td width=79%>RGB value – for the cell values</td>
</tr>
<tr valign=top>
<td width=21%>Font_Name</td>
<td width=79%>The font name - for the cell values</td>
</tr>
<tr valign=top>
<td width=21%>Font_Size</td>
<td width=79%>The font size - for the cell values</td>
</tr>
<tr valign=top>
<td width=21%>…</td>
<td width=79%></td>
</tr>
</table><br>
<h2>Ambiguities and Name Conflicts</h2>
<p>
Ambiguities (name conflicts) can arise. It is the responsibility of the client application to provide unambiguous (qualified) names. It is the responsibility of the provider code to warn of potential ambiguities, or to provide notification (alerts?) if ambiguities exist. To prevent name conflicts, the following rules apply:
<ul type=disc>
<li>
In the INSERT INTO statement, level name can be qualified with dimension name. Measure name can be qualified with the keyword MEASURES. For example:<pre><code>Create Cube myCube (
 &nbsp; Dimension Products,
 &nbsp;&nbsp;&nbsp;&nbsp; Level ID,
 &nbsp; Dimension Customer,
 &nbsp;&nbsp;&nbsp;&nbsp; Level ID,
 &nbsp; Measure ID);
Insert Into myCube (Products.ID, Customer.ID, Measures.ID) Select Dim_Products.ID, Dim_Customers.ID, Sales_ID From Dim_Products, Dim_Customers, Sales Where Sales.ID=Products.ID AND Sales.ID = Customers.ID;
</code></pre>
</li>
<li>
Existing members may not be overridden. For instance, one cannot&nbsp; create a new member function "WA" if "WA" already exists.</li>
</ul>
<h2>SELECT</h2>
<p>
The SELECT statement is described in the OLE DB for OLAP specification.</p>
</font></BODY>
</HTML>

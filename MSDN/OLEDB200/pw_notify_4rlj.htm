<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Technology Overview: Notifications</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbpwk_notifyoverview"></a><sup></sup>Notifications</h1>
<p>
Notifications allow the provider layers to communicate changes in the underlying data source to other consumers or controls that register an interest. Notifications are required by the OLE DB Simple Provider DLL. The following figure shows how notifications are issued and received in the OLE DB Simple Provider framework:</p>
<p>
<img src="pwk003.gif" border=0></P><p>
There are three levels of notifications that occur in this framework:</p>
<h1>OLE DB Notifications</h1>
<p>
These notifications are issued by the OLE DB Simple Provider DLL (MSDAOSP.DLL), and are consumed by any OLE DB control or application that wants to be notified about changes (through OLE DB) to a Rowset from other consumers. They are implemented through the <b>IRowsetNotify</b> OLE DB interface (for further information, refer to the online <i>OLE DB Programmer's Reference</i> supplied with the OLE DB SDK).</p>
<h1>OSP Notifications</h1>
<p>
These notifications are issued by the OSP object and other objects that might be changing data owned by the OSP object. The notifications consist of methods belonging to the OSP <a href="pw_osp_74mq.htm">OLEDBSimpleProviderListener</a> interface. The listener for this set of notifications is the MSDAOSP.DLL. For example, suppose one OSP serves an array data source. If another object outside that OSP alters an element in the array data (using the <b>SetVariant</b> OSP method), then it must also issue the OSP notifications (for example, the <b>OLEDBSimpleProviderListener::CellChanged</b> method).</p>
<h1>Data Source Notifications</h1>
<p>
These notifications are issued by the OSP Data Object. It is possible that other controls or applications not consuming data through the MSDAOSP.DLL may be refreshing or changing the same data source held by an OSP. In these cases, data source notifications come into play. For example, suppose a filter property on a control can alter array data exposed by an OSP. If the filter property is changed, then the code must issue data source notifications to indicate that the entire data source has changed. </p>
<p>
Data source notifications are listened to by code that has requested data sources through the data binding interfaces (either <a href="pw_id_6xid.htm">IDataSource</a> or <a href="pw_msdso_36t0.htm">msDataSourceObject</a> through <b>IDispatch</b>). The listener depends on which object issued <a href="pw_id_1i9e.htm">IDataSource::getDataMember</a>. MSDAOSP.DLL will listen to these notifications (through <b>DataSourceListener</b>) when it requests an OSP. If a change to the data occurred, the Rowset being held by the OSP is in an invalid state ("zombie" state) and must be released. The application can make a fresh request to get the new data via <b>IDataSource::getDataMember</b> or <b>msDataSourceObject</b>.</p>
<h1>Additional Information</h1>
<p>
OSP and data source listeners (<b>OLEDBSimpleProviderListener</b> and <b>DataSourceListener</b>) are not capable of vetoing or canceling a notification. Thus, developers do not need to check the results of a pre-notification to validate whether the data change has actually occurred.</p>
<p>
MSDAOSP.DLL is capable of opening more than one rowset at a time on a simple provider, as long as the simple provider's Data Source and OSP objects support multiple listeners.&nbsp; It is the provider writer's responsibility to accomodate multiple listeners by:
<ul type=disc>
<li>
maintaing a list of listeners when adding or removing Data Source or OSP listeners, and<br><br></li>
<li>
notifying each listener in this list when firing Data Source or OSP notifications.</li>
</ul>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an ActiveX Control</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="creatingactivexcontrol"></a>Creating an ActiveX Control</h1>
<p>
It’s relatively easy to create an ActiveX control using the framework. The provided wizard does most of the work for you; the process is briefly described here. </p>
<p>
The framework implements its core functionality in a few C++ classes, notably <b>CAutomationObject</b>, <b>COleControl</b> (which inherits from <b>CAutomationObject</b>), and <b>CPropertyPage</b>. All objects inherit from <b>CUnknownObject</b>, which provides the support for aggregation.</p>
<p>
To write an ActiveX control, you need to declare a new object that inherits from <b>COleControl</b>. In addition, you need to inherit from some sort of Automation interface that describes the properties and methods for your control, such as <b>IMyControl</b>. This interface description is generated by the MkTypLib utility and is put in an output file created by MkTypLib (the CtlWiz sets up an environment where this file is named MyControlInterfaces.h). <b>COleControl</b> has a number of virtual methods that are declared as pure, which you simply must implement in your control class. These include <b>WindowProc</b>, <b>LoadBinaryState</b>, <b>LoadTextState</b>, <b>SaveBinaryState</b>, <b>SaveTextState</b>, <b>OnDraw</b>, and <b>RegisterClassData</b>.</p>
<p>
To write a property page, you declare a new object that inherits from <b>CPropertyPage</b>. This object must implement a <b>DialogProc </b>function. You can also implement Automation objects and collections by declaring a new object that inherits from <b>CAutomationObject</b>.</p>
<p>
Because an ActiveX control is an in-process OLE server, you also need one file to describe all your objects, whether they are controls, Automation objects, or property pages. This file includes a table of all objects and information about them. In addition, it has information about what sort of localization your server would like to use, and what sort of licensing support you'd like to have.</p>
<p>
Finally, you need a resource file, an .odl file to describe your interfaces and event interfaces, a .def file to hold your linking information, and a file to define all the Globally Unique Identifiers (GUID) that have been declared.</p>
<p>
Although you can create all this information by using one of the sample controls as a starting point for your project, it’s easier to use the control wizard to create a new control.</p>
<h1>Using the Control Wizard</h1>
<p>
The control wizard is available from within Visual C++, and you can use it to create a new ActiveX control project. It is not a robust program and may fail if something unexpected occurs, but it will save you a considerable amount of time in the beginning.</p>
<p class=label>
<b>To install and run the control wizard</b>
<ol>
<li>
Follow the installation instructions in the readme file for this SDK.<br><br></li>
<li>
In Visual C++, open the <b>Tools</b> menu and click <b>Customize</b>.<br><br></li>
<li>
Select the <b>Add-ins and Macro Files</b> tab.<br><br></li>
<li>
Browse for and open ADBSDK\bin\AFCWiz.dll. This creates a custom toolbar with an icon for the control wizard. Alternately, you can place the control wizard icon in a menu or on a toolbar by dragging it from the <b>Command</b> tab (with the <b>Add-ins</b> category selected) to the desired menu or toolbar.<br><br></li>
<li>
To run the control wizard, just click the control wizard icon.</li>
</ol>
<p>
When you run the control wizard for this release, you will receive a warning message (which you can ignore) if you create your control in an existing directory. Also, after you load your control’s project and compile it, you will receive some linker warnings about the structure of your .def file. You can resolve these warnings by removing the entries for PRTMODE, CODE, and DATA. You should also modify your EXPORTS section to look like this:</p>
<pre><code>EXPORTS      
DllRegisterServer      @1 PRIVATE
DllUnregisterServer   @2 PRIVATE
DllCanUnloadNow      @3 PRIVATE
DllGetClassObject      @4 PRIVATE
</code></pre>
</font></BODY>
</HTML>

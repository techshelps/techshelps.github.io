<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lifetime of Storage Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledblifetime_of_storage_objects"></a>Lifetime of Storage Objects</h1>
<p>
The consumer releases a storage object created by the provider by calling <b>Release</b> on that object. If a provider supports DBPROP_MULTIPLESTORAGEOBJECTS = VT_FALSE, then the consumer must always call <b>Release</b> on the storage object to guarantee that a new storage object on any row can be opened. In addition, the storage object may enter a zombie state if one of the following events occurs:
<ul type=disc>
<li>
The consumer calls <b>Release</b> to release the rowset containing the row.<br><br></li>
<li>
The consumer calls <b>IRowset::ReleaseRows</b> to release the row containing the storage object.<br><br></li>
<li>
The consumer calls <b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> and the retaining flag is set so that the rowset enters a zombie state.<br><br></li>
<li>
The consumer deletes the row containing the storage object and transmits the deletion to the data source.</li>
</ul>
<p>
When a storage object enters a zombie state, it is not automatically released. Instead, if the consumer calls any method on the storage object except <b>Release</b>, that method returns E_UNEXPECTED. It is the consumer's responsibility to release the storage object, even if it is in a zombie state.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Longer Lifetime and Scope: Named Sets and Calculated Members</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="longerlifetimescopenamedsetscalculatedmembers"></a>Longer Lifetime and Scope: Named Sets and Calculated Members</h1>
<p>
The scope of the named sets and calculated members specified in the previous section is just the MDX statement in which they appear. Consequently, their lifetime is also limited to the life of the query execution.</p>
<p>
It is frequently useful to have named sets and calculated members available for the life of a session, and visible to all queries in that session. When used with the UI-related set functions, named sets provide a powerful mechanism to create queries that not only preserve the state, but also provide an efficient method to process UI operations. For more information on how to do this, see “Preserving State During UI Operations” in this section.</p>
<p>
To create a named set or a calculated member with longer scope and lifetime, use the following syntax:</p>
<p>
<i>create_formula_statement</i><b>:= CREATE </b>[<i>scope</i>]<b> </b><i>formula_specification</i></p>
<p>
The syntax for <i>formula_specification</i> is exactly the same as the syntax used in creating named sets and calculated members. For information on syntax, see “Named Sets and Calculated Members” in this chapter. The create formula statement creates a named set or a named member. </p>
<p>
The scope and lifetime of this created entity depends on the value of <i>scope</i>. There are two possible values of <i>scope</i>:
<ul type=disc>
<li>
GLOBAL. The created entity will be visible for all queries across all sessions. Its lifetime is until an explicit drop formula statement is issued. <br><br></li>
<li>
SESSION. The created entity will be visible for all queries within the session. Its lifetime is the same as that of the session within which it is created. When the session dies, the entity will be automatically dropped.</li>
</ul>
<p>
As an example, the MDX statement below creates the same dataset that is specified in “Cube and Dataset Example”:</p>
<pre><code>CREATE SalesCube.ColumnsAxisSet AS CROSSJOIN({Venkatrao, Netz},
 &nbsp; {USA_North.CHILDREN, USA_South, Japan})
CREATE SalesCube.RowsAxisSet AS {Qtr1.CHILDREN, Qtr2, Qtr3, 
 &nbsp; Qtr4.CHILDREN}
SELECT ColumnsAxisSet ON COLUMNS, RowsAxisSet ON ROWS
FROM SalesCube
WHERE (Sales, [1991], Products.All)
</code></pre>
<p>
The following rules determine the semantics of named sets and members that are created by using <i>create_formula_statement</i>:
<ul type=disc>
<li>
If a scope is not specified, then it defaults to SESSION. In the above example, both <b>ColumnsAxisSet</b> and <b>RowsAxisSet</b> have a scope of SESSION.<br><br></li>
<li>
The name of the set or member being created must be qualified by the name of the cube. The absence of such a qualification is a syntax error. This is because there is no inherent cube context associated with a session. Therefore, the member or the set name has to provide the cube context. Thus, in the above example, the sets <b>ColumnsAxisSet</b> and <b>RowsAxisSet</b> were qualified by the cube name, <b>SalesCube</b>.<br><br></li>
<li>
Two SESSION scope named sets/members with the same name can exist on the same cube, as long as they are in two different sessions. This is because the scope of each is the session that created it . They are not visible outside the session.<br><br></li>
<li>
Named sets and members created with SESSION scope can be explicitly dropped during the session that created them.<br><br></li>
<li>
It is an error to drop a named set/member when it is being used by a query.</li>
</ul>
</font></BODY>
</HTML>

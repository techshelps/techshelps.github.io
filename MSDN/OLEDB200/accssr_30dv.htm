<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IAccessor::GetBindings</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbiaccessor__getbindings"></a>IAccessor::GetBindings</h1>
<p>
Returns the bindings in an accessor.</p>
<pre><code>HRESULT GetBindings (
   HACCESSOR               hAccessor,
   DBACCESSORFLAGS *   pdwAccessorFlags,
   ULONG *                     pcBindings,
   DBBINDING **               prgBindings);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hAccessor</i></p>
<p class=indent>
[in]<br>
The handle of the accessor for which to return the bindings.</p>
<p class=dt>
<i>pdwAccessorFlags</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return a bitmask that describes the properties of the accessor and how it is intended to be used. For more information, see <i>dwAccessorFlags</i> in <a href="accssr_4r02.htm">CreateAccessor</a>. If this method fails, *<i>pdwAccessorFlags</i> is set to DBACCESSOR_INVALID.</p>
<p class=dt>
<i>pcBindings</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return the number of bindings in the accessor. If this method fails, *<i>pcBindings</i> is set to zero.</p>
<p class=dt>
<i>prgBindings</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return an array of DBBINDING structures. One DBBINDING structure is returned for each binding in the accessor. The provider allocates memory for these structures and any structures pointed to by elements of these structures; for example, if <i>pObject</i> in a binding structure is not a null pointer, the provider allocates a DBOBJECT structure for return to the consumer. The provider returns the address to the memory for these structures; the consumer releases the memory for these structures with <b>IMalloc::Free</b> when it no longer needs the bindings. If *<i>pcBindings</i> is zero on output or the method fails, the provider does not allocate any memory and ensures that *<i>prgBindings</i> is a null pointer on output. For information about bindings, see "<a href="ch06pr_7q2b.htm">DBBINDING Structures</a>" in chapter 6.</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded.</p>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>pdwAccessorFlags</i>, <i>pcBindings</i>, or <i>prgBindings</i> was a null pointer.</p>
<p class=dt>
</p>
<p class=indent>
E_OUTOFMEMORY<br>
The provider was unable to allocate sufficient memory in which to return the binding structures.</p>
<p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
<b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was called and the object is in a zombie state. This error can be returned only when the method is called on a rowset.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADACCESSORHANDLE<br>
<i>hAccessor</i> was invalid.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTREENTRANT<br>
The provider called a method from <b>IRowsetNotify</b> in the consumer and the method has not yet returned.</p>
<p class=label>
<b>Comments</b></p>
<p>
This method makes no logical change to the state of the object.</p>
<p>
If the accessor is a null accessor, then the method sets *<i>pcBindings</i> to zero and *<i>prgBindings</i> to a null pointer.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="accssr_4r02.htm">IAccessor::CreateAccessor</a></p>
</font></BODY>
</HTML>

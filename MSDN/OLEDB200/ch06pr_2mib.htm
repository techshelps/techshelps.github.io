<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Parts</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbdata_parts"></a>Data Parts</h1>
<p>
Data has three parts: the data <i>value</i>, the <i>length</i> of the data value, and the <i>status</i> of the data value. The consumer can bind one, two, or all three of these parts. Except in very rare cases, the consumer always binds the data value and the status, and always binds the length for variable-length data types.</p>
<p>
If the consumer is getting data and does not bind a part, the provider does not return that part. Although this is not an error, it is generally of little or no use. For example, if the consumer does not bind the status and the provider returns DB_S_ERRORSOCCURRED, the consumer must assume that the value was not returned correctly.</p>
<p>
If the consumer is setting data and does not bind a part, the provider sends the data if it has sufficient information; otherwise it returns an error. For example, if the consumer binds the status but not the value, the provider sends the data if the status is DBSTATUS_S_ISNULL and returns an error if the status is DBSTATUS_S_OK.</p>
<p>
The following table explains the behavior of the consumer and provider for each combination of bound parts.</p>
<p class=label>
<b>Consumer/Provider behaviors for data binding</b></p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=7%><b>Val</b></td>
<td class=label width=8%><b>Len</b></td>
<td class=label width=8%><b>Stat</b></td>
<td class=label width=38%><b>Use when getting data</b></td>
<td class=label width=39%><b>Use when setting data</b></td>
</tr>
<tr valign=top>
<td width=7%>&alpha;</td>
<td width=8%>&alpha;</td>
<td width=8%>&alpha;</td>
<td width=38%>Most commonly used combination when getting variable-length data.</td>
<td width=39%>Most commonly used combination when setting variable-length data.</td>
</tr>
<tr valign=top>
<td width=7%>&alpha;</td>
<td width=8%>&alpha;</td>
<td width=8%>–</td>
<td width=38%>Not generally used.<p>
If the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that it didn’t successfully get or set the value for the column.</p>
<p>
If the column is nullable, the consumer cannot determine the validity of the returned value or length because it does not know if the column value is NULL.</p>
</td>
<td width=39%>Not generally used.<p>
If the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that it didn’t successfully get or set the value for the column.</p>
<p>
The provider assumes the status is DBSTATUS_S_OK.</p>
</td>
</tr>
<tr valign=top>
<td width=7%>&alpha;</td>
<td width=8%>–</td>
<td width=8%>&alpha;</td>
<td width=38%>Most commonly used combination when getting fixed-length data.</td>
<td width=39%>Most commonly used combination when setting fixed-length data.<p>
The provider assumes that string data is null terminated.</p>
<p>
See note 1.</p>
</td>
</tr>
<tr valign=top>
<td width=7%>&alpha;</td>
<td width=8%>–</td>
<td width=8%>–</td>
<td width=38%>Not generally used.<p>
If the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that it didn’t successfully get or set the value for the column.</p>
<p>
If the column is nullable, the consumer cannot determine the validity of the returned value or length because it does not know if the column value is NULL.</p>
</td>
<td width=39%>Not generally used.<p>
If the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that it didn’t successfully get or set the value for the column.</p>
<p>
The provider assumes the status is DBSTATUS_S_OK.</p>
<p>
The provider assumes that string data is null terminated.</p>
<p>
If <i>wType</i> in the DBBINDING structure is a variable length DBTYPE, the provider returns a DB_E_ERRORSOCCURRED.</p>
</td>
</tr>
<tr valign=top>
<td width=7%>–</td>
<td width=8%>&alpha;</td>
<td width=8%>&alpha;</td>
<td width=38%>Not generally used. </td>
<td width=39%>If IColumnsInfo::GetColumnInfo does not return DBCOLUMNFLAGS_ISLONG for the column, the provider returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED.</td>
</tr>
<tr valign=top>
<td width=7%>–</td>
<td width=8%>&alpha;</td>
<td width=8%>–</td>
<td width=38%>Not generally used.<p>
If the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that it didn’t successfully get or set the value for the column.</p>
<p>
If the column is nullable, the consumer cannot determine the validity of the returned value or length because it does not know if the column value is NULL..</p>
</td>
<td width=39%>Not generally used.<p>
If the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that it didn’t successfully get or set the value for the column.</p>
<p>
The provider assumes the status is DBSTATUS_S_OK.</p>
</td>
</tr>
<tr valign=top>
<td width=7%>–</td>
<td width=8%>–</td>
<td width=8%>&alpha;</td>
<td width=38%>Not generally used.</td>
<td width=39%>Not generally used. <p>
Can be used to set the value of a column or parameter to NULL or to specify that the provider is to use the default value for an input or input/output parameter in a procedure.</p>
<p>
If the status is DBSTATUS_S_OK, the provider returns a status of DBSTATUS_E_UNAVAILABLE.</p>
</td>
</tr>
<tr valign=top>
<td width=7%>–</td>
<td width=8%>–</td>
<td width=8%>–</td>
<td width=38%><b>IAccessor::CreateAccessor</b> returns DBBINDSTATUS_<br>
BADBINDINFO for the binding.</td>
<td width=39%><b>IAccessor::CreateAccessor</b> returns DBBINDSTATUS_<br>
BADBINDINFO for the binding.</td>
</tr>
<tr valign=top>
<td class=mini colspan=5 width=100%><sup>1</sup>If <i>wType</i> in the DBBINDING structure is DBTYPE_BYTES, and the status is DBSTATUS_S_OK, the provider uses the value of cbMaxLen in the DBBINDING structure as the number of bytes to read. Note that 1.x providers may return an error for this case; in order to work with 1.x providers, consumers should always include the length data part when specifying non-null values of type DBTYPE_BYTES. </td>
</tr>
</table><br>
</font></BODY>
</HTML>

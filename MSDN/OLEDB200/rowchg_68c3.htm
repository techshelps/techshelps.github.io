<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRowsetChange::DeleteRows</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbirowsetchange__deleterows"></a>IRowsetChange::DeleteRows</h1>
<p>
Deletes rows.</p>
<pre><code>HRESULT DeleteRows (
   HCHAPTER         hChapter,
   ULONG            cRows,
   const HROW         rghRows[],
   DBROWSTATUS   rgRowStatus[]);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hChapter</i></p>
<p class=indent>
[in]<br>
The chapter handle. For nonchaptered rowsets, <i>hChapter</i> is ignored.</p>
<p class=dt>
<i>cRows</i></p>
<p class=indent>
[in]<br>
The number of rows to be deleted. If <i>cRows</i> is zero, <b>DeleteRows</b> does not do anything.</p>
<p class=dt>
<i>rghRows</i></p>
<p class=indent>
[in]<br>
An array of handles of the rows to be deleted.</p>
<p class=tl>
If <i>rghRows</i> includes a duplicate row handle, <b>DeleteRows</b> behaves as follows. If the row handle is valid, it is provider-specific whether the returned row status information for each row or a single instance of the row is set to DBROWSTATUS_S_OK. If the row handle is invalid, the row status information for each occurrence of the row contains the appropriate error.</P><p class=dt>
<i>rgRowStatus</i></p>
<p class=indent>
[out]<br>
An array with <i>cRows</i> elements in which to return values indicating the status of each row specified in <i>rghRows</i>. If no errors or warnings occur while deleting a row, the corresponding element of <i>rgRowStatus</i> is set to DBROWSTATUS_S_OK. If a warning occurs while deleting a row, the corresponding element is set as specified in S_OK. If an error occurs while deleting a row, the corresponding element is set as specified in DB_S_ERRORSOCCURRED. The consumer allocates memory for this array. If <i>rgRowStatus</i> is a null pointer, no row statuses are returned. For information about the DBROWSTATUS enumerated type, see "<a href="ch13pr_5ib7.htm">Arrays of Errors</a>" in Chapter 13.</p>
<p class=dt>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded. All rows were successfully deleted. The following values can be returned in <i>rgRowStatus</i>:
<ul type=disc>
<li>
The row was successfully deleted and no warning conditions occurred. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_S_OK.<br><br></li>
<li>
The rowset was in immediate update mode, and deleting a single row caused more than one row to be deleted in the data source. For more information, see the DBPROP_REPORTMULTIPLECHANGES property. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_S_MULTIPLECHANGES.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
An error occurred while deleting a row, but at least one row was successfully deleted. Successes and warnings can occur for the reasons listed under S_OK. The following errors can occur:
<ul type=disc>
<li>
An element of <i>rghRows</i> was invalid or was a row handle to which the current thread does not have access rights. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_INVALID.<br><br></li>
<li>
Deletion of a row was canceled during notification. The row was not deleted and the corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_CANCELED.<br><br></li>
<li>
An element of <i>rghRows</i> referred to a row with a pending delete or for which a deletion had been transmitted to the data source. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_DELETED.<br><br></li>
<li>
Deleting a row referred to by an element of <i>rghRows</i> violated the integrity constraints for the column or table. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_INTEGRITYVIOLATION.<br><br></li>
<li>
The rowset was in immediate update mode and the row was not deleted due to reaching a limit on the server, such as a query execution timing out. The error in the corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_LIMITREACHED.<br><br></li>
<li>
Deleting a row would exceed the limit for pending changes specified by the rowset property DBPROP_MAXPENDINGROWS. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED.<br><br></li>
<li>
DBPROP_CHANGEINSERTEDROWS was VARIANT_FALSE and an element of <i>rghRows</i> referred to a row for which the insertion has been transmitted to the data source. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_NEWLYINSERTED.<br><br></li>
<li>
The consumer did not have sufficient permission to delete a row. This error can be returned only if the value of the DBPROP_ROWRESTRICT property is VARIANT_TRUE. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_PERMISSIONDENIED. If the rowset is in delayed update mode, this error might not be returned until <b>IRowsetUpdate::Update</b> is called.<br><br></li>
<li>
The consumer encountered a recoverable, provider-specific error, such as an RPC failure when transmitting the change to a remote server. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_FAIL.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>rghRows</i> was a null pointer and <i>cRows</i> was greater than or equal to one.</p>
<p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
<b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was called and the object is in a zombie state.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADCHAPTER<br>
The rowset was chaptered and <i>hChapter</i> was invalid.</p>
<p class=tl>
The rowset was single-chaptered and the specified chapter was not the currently open chapter. The consumer must use the currently open chapter or release the currently open chapter before specifying a new chapter.</P><p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
Errors occurred while deleting all of the rows. Errors can occur for the reasons listed under DB_S_ERRORSOCCURRED.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTREENTRANT<br>
The consumer called this method while it was processing a notification, and it is an error to call this method while processing the specified DBREASON value.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTSUPPORTED<br>
The provider does not support this method.</p>
<p class=dt>
</p>
<p class=label>
<b>Comments</b></p>
<p>
In delayed update mode, <b>DeleteRows</b> marks rows for deletion, rather than actually deleting them. Rows with pending deletes cannot be used in any methods except <b>IRowsetRefresh::GetLastVisibleData</b>, <b>IRowsetUpdate::Undo,</b> <b>IRowsetUpdate::Update</b>, <b>IRowsetUpdate::GetOriginalData</b>, and <b>IRowset::ReleaseRows</b>. The deletion is not transmitted to the data source until <b>Update</b> is called. In immediate update mode, <b>DeleteRows</b> transmits deletions to the data source immediately. For more information, see "<a href="ch05pr_0ue9.htm">Changing Data</a>" in Chapter 5.</p>
<p>
After a deletion has been transmitted to the data source, it cannot be undone. The row cannot be used with any method except <b>ReleaseRows</b>. Neither <b>DeleteRows</b> nor <b>Update</b> releases rows after transmitting deletions to the data source. The consumer must release the row with <b>ReleaseRows</b>.</p>
<p>
If <b>DeleteRows</b> is called for a row with a pending insert, the row is placed in the same state as a row for which a deletion has been transmitted to the data source. That is, if a row is inserted and then deleted in delayed update mode, the deletion cannot be undone. The row cannot be used with any method except <b>ReleaseRows</b>, which must be called to release it.</p>
<p>
If an error occurs while deleting a row, <b>DeleteRows</b> continues deleting the other rows in <i>rghRows</i> and returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED. It returns status information about each row in <i>rgRowStatus</i>.</p>
<p>
If the DBPROP_ROWRESTRICT property is VARIANT_TRUE, the consumer may have permission to delete some rows but not other rows.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="rowupd_2xyn.htm">IRowsetUpdate::Undo</a>, <a href="rowupd_49gl.htm">IRowsetUpdate::Update</a></p>
</font></BODY>
</HTML>

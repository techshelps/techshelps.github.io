<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICommandProperties::SetProperties</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbicommandproperties__setproperties"></a>ICommandProperties::SetProperties</h1>
<p>
Sets properties in the Rowset property group.</p>
<pre><code>HRESULT SetProperties (
   ULONG         cPropertySets,
   DBPROPSET   rgPropertySets[]);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>cPropertySets</i></p>
<p class=indent>
[in]<br>
The number of DBPROPSET structures in <i>rgPropertySets</i>. If this is zero, the provider ignores <i>rgPropertySets</i> and the method does not do anything.</p>
<p class=dt>
<i>rgPropertySets</i></p>
<p class=indent>
[in/out]<br>
An array of DBPROPSET structures containing properties and values to be set. The properties specified in these structures must belong to the Rowset property group. If the same property is specified more than once in <i>rgPropertySets</i>, then which value is used is provider-specific. If <i>cPropertySets</i> is zero, this parameter is ignored.</p>
<p class=tl>
For information about the properties in the Rowset property group that are defined by OLE DB, see "<a href="appcpr_8u7n.htm#oledbrowset_properties">Rowset Properties</a>" in Appendix C. For information about the DBPROPSET and DBPROP structures, see "<a href="ch11pr_5pb9.htm">DBPROPSET Structure</a>" and "<a href="ch11pr_3xt1.htm">DBPROP Structure</a>" in Chapter 11.</P><p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded. In all DBPROP structures passed to the method, <i>dwStatus</i> is set to DBPROPSTATUS_OK.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
One or more properties were not set. Properties not in error remain set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were not set. <b>SetProperties</b> can fail to set properties for a number of reasons, including:
<ul type=disc>
<li>
The property was not supported by the provider.<br><br></li>
<li>
The property was not in the Rowset property group.<br><br></li>
<li>
The property set was not supported by the provider.<br><br></li>
<li>
The property is read-only and was not set to its default value.<br><br></li>
<li>
It was not possible to set the property.<br><br></li>
<li>
The value of <i>dwOptions</i> in a DBPROP structure was invalid.<br><br></li>
<li>
<i>colid</i> in the DBPROP structure was not DB_NULLID and the property cannot be set on a column.<br><br></li>
<li>
The data type in <i>vValue</i> in the DBPROP structure was not the data type of the property or was not VT_EMPTY.<br><br></li>
<li>
The value in <i>vValue</i> in the DBPROP structure was invalid.<br><br></li>
<li>
The property's value conflicted with an existing property.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>cPropertySets</i> was not equal to zero and <i>rgPropertySets</i> was a null pointer.</p>
<p class=tl>
In an element of <i>rgPropertySets</i>, <i>cProperties</i> was not zero and <i>rgProperties</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
All property values were invalid and no properties were set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine why properties were not set. The method can fail to set properties for any of the reasons specified in DB_S_ERRORSOCCURRED, except the reason that states that it was not possible to set the property.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_OBJECTOPEN<br>
Properties cannot be set while there is an open rowset.</p>
<p class=label>
<b>Comments</b></p>
<p>
Consumers should first set properties for interfaces and then set other properties that modify those interfaces. The combination of the values of an interface property and a noninterface property might result in another interface being requested. However, the value of a noninterface property, by itself, never results in another interface being requested.</p>
<p>
Setting property values is a cumulative operation. That is, each call to <b>SetProperties</b> attempts to change the values of the specified properties. If a new value is illegal or conflicts with the value of another property, the value of the property is not changed and <b>SetProperties</b> returns DBPROPSTATUS_BADVALUE or DBPROPSTATUS_CONFLICTING in the <i>dwStatus</i> element of the DBPROP structure for the property. Properties are processed from the beginning of the array to the end of the array. As they are processed, properties that conflict with previously set properties, including those set previously on the same call, are marked with DBPROPSTATUS_CONFLICTING, and processing continues through the array of properties.</p>
<p>
<b>SetProperties</b> cannot always determine whether a property can be set to its requested value. For example, the provider often cannot determine whether the rowset is updatable until it creates the rowset. In this case, <b>SetProperties</b> appears to successfully set the property value and the provider delays the determination until <b>ICommand::Execute</b> is called.</p>
<p>
If the value of <i>dwOptions</i> for a property is DBPROPOPTIONS_OPTIONAL, the provider attempts to determine whether it can set the property to the requested value. If it can make this determination, it sets the property and returns DBPROPSTATUS_OK or does not set the property and returns DBPROPSTATUS_NOTSET. If it cannot make this determination, it can delay setting the property until the command is executed; in this case, the value of <i>dwOptions</i> returned for the property by <b>GetProperties</b> is DBPROPOPTIONS_OPTIONAL.</p>
<p>
Consumers should not attempt to unset mandatory rowset interfaces such as <b>IRowset</b>, <b>IAccessor</b>, <b>IColumnsInfo</b>, and <b>IRowsetInfo</b>. These interfaces are always supported, and <b>SetProperties</b> returns DBPROPSTATUS_NOTSETTABLE for them.</p>
<p>
Even if <b>IDBProperties::GetPropertyInfo</b> lists a property as being supported by the provider, <b>SetProperties</b> can return DBPROPSTATUS_NOTSUPPORTED when the consumer attempts to set the property value if the property does not apply to the current circumstances. For example, the provider's ability to support the property might be affected by the current transaction or the current command text.</p>
<p>
If an error occurs when setting a particular property, <b>SetProperties</b> flags the error in <i>dwStatus</i> in the DBPROP structure and continues processing.</p>
<p>
Although providers allow changing properties at any time before command execution, consumers are encouraged to set all properties prior to preparing the command to avoid forcing the provider to reprepare the command at execution.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="cmdprop_2wqb.htm">ICommandProperties::GetProperties</a>, <a href="dbprop_3ffz.htm">IDBProperties::GetPropertyInfo</a>, <a href="rowinf_1pgz.htm">IRowsetInfo::GetProperties</a></p>
</font></BODY>
</HTML>

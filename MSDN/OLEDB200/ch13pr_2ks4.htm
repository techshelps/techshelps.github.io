<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How an Automation Component Returns an Error Object</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbhow_an_automation_component_returns_an_error_object"></a>How an Automation Component Returns an Error Object</h1>
<p>
When a component using Automation causes an error, it can return an object to describe that error. To do this, the component makes the following calls:
<ol>
<li>
Calls <b>CreateErrorInfo</b> in the Automation DLL. This function creates an Automation error object that exposes <b>ICreateErrorInfo</b> and <b>IErrorInfo</b>.<br><br></li>
<li>
Calls the methods in <b>ICreateErrorInfo</b> to store information in the error object, such as the string describing the error and the GUID of the interface that caused the error.<br><br></li>
<li>
Calls <b>QueryInterface</b> to retrieve the <b>IErrorInfo</b> interface pointer on the error object. This interface pointer will identify the error object to all Automation components.<br><br></li>
<li>
Calls <b>SetErrorInfo</b> in the Automation DLL and passes it the <b>IErrorInfo</b> interface pointer. <b>SetErrorInfo</b> replaces its current error object, if any, with the new error object and adds a reference count to the new error object.<br><br></li>
<li>
Calls <b>Release</b> to release its reference count on the error object. This effectively transfers ownership of the error object from the component that caused the error to the Automation DLL.</li>
</ol>
<p>
The following code shows an example of how an Automation component might create an Automation error object and transfer ownership of the object to the Automation DLL.</p>
<pre><code>#include &lt;oledb.h&gt; 
int main() {
 ICreateErrorInfo *pcerrinfo;
 IErrorInfo&nbsp;&nbsp; *perrinfo;

 // Error occurs in a method in the provider. (Not shown.) 
 //Create an Automation error object.
 CreateErrorInfo(&amp;pcerrinfo);

 // Use the returned ICreateErrorInfo interface pointer to add error information to
 // the object. (Not shown.)

 // Retrieve an IErrorInfo interface pointer on the object and call SetErrorInfo to
 // pass the error object to the Automation DLL.
 pcerrinfo-&gt;QueryInterface(IID_IErrorInfo, (void**)&amp;perrinfo);

 SetErrorInfo(0, perrinfo);

 // Release the interface pointers on the object to finish transferring ownership of
 // the object to the Automation DLL.
 perrinfo-&gt;Release();
 pcerrinfo-&gt;Release();
} ;
</code></pre>
</font></BODY>
</HTML>

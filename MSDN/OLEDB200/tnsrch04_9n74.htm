<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Role of the Rowset Object in OLE DB for OLAP</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="roleofrowsetobjectinoledbforolap"></a>Role of the Rowset Object in OLE DB for OLAP</h1>
<p>
The <b>Rowset </b>object is the OLE DB universal abstraction for tabular data. Rowsets are used extensively by OLE DB for OLAP; there are essentially three areas of OLE DB for OLAP that return rowsets:
<ul type=disc>
<li>
Schema rowsets. These are used to return schema information.<br><br></li>
<li>
Axis rowsets. These are used to return information about the axes of a dataset.<br><br></li>
<li>
Range rowset. Each cell in a dataset is modeled as a row, and the collection of cells that the application is interested in updating is presented as a range rowset.</li>
</ul>
<p>
This means that an OLE DB for OLAP provider must implement the <b>Rowset </b>object and all the mandatory interfaces on that object. However, OLE DB for OLAP rowsets usually are significantly simpler than the general OLE DB rowset. They do not need to implement bookmarks or scrolling. The axis rowsets and the schema rowsets need not implement updatability either.</p>
<p>
Nothing prevents a provider from implementing a rowset with all of the above features. However, it does not need to in order to be compliant with OLE DB for OLAP.</p>
</font></BODY>
</HTML>

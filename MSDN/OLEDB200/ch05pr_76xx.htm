<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Immediate vs. Delayed Update Mode</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbimmediate_vs._delayed_update_mode"></a>Immediate vs. Delayed Update Mode</h1>
<p>
Whether the consumer uses immediate or delayed update mode depends on how many consumers share the rowset and how they use the rowset. In most cases, the primary user of immediate update mode is a single consumer that wants to transmit changes immediately to the data source. Consumers use delayed update mode for many reasons, including the following:
<ul type=disc>
<li>
<b>Shared rowsets</b>—If multiple consumers share a rowset, they often use notifications to coordinate multiple changes. By using delayed update mode, consumers can coordinate their changes locally in the rowset before transmitting them to the data source.<br><br></li>
<li>
<b>Multiple changes to the same row</b>—If a consumer makes multiple changes to the same row, such as when multiple accessors are used or when users input changes at different times, the row might be left in an invalid state. For example, if a key consists of several columns and each column is changed in a separate call to <b>IRowsetChange::SetData</b>, the intermediate states might be invalid. By using delayed update mode, the consumer can buffer these changes in the rowset before transmitting them to the data source.<br><br></li>
<li>
<b>Network traffic</b>—If a rowset resides on one node in a network and the data source resides on another node, transmitting changes from the rowset to the data source requires a network call. By using delayed update mode, the consumer can bundle together changes to multiple rows and send them across the network with a single call to <b>IRowsetUpdate::Update</b>. This is particularly critical for wide area networks such as the Internet, on which network calls are very expensive.<br><br></li>
<li>
<b>Undoing changes</b>—<b>IRowsetUpdate::Undo</b> enables the consumer to undo pending changes. By using delayed update mode, consumers can expose an undo capability to users without having to implement it.</li>
</ul>
</font></BODY>
</HTML>

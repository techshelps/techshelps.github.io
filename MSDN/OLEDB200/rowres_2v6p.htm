<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRowsetRefresh::GetLastVisibleData</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbirowsetrefresh__getlastvisibledata"></a>IRowsetRefresh::GetLastVisibleData</h1>
<p>
Gets the most recent data from either the visible data cache or the data source.</p>
<pre><code>HRESULT GetLastVisibleData (
HROW       hRow,
HACCESSOR    hAccessor,
void *         pData);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hRow</i></p>
<p class=indent>
[in]<i><br>
</i>The handle of the row with pending changes for which to get the latest data. This can be the handle of a row with a pending delete.</p>
<p class=dt>
<i>hAccessor</i></p>
<p class=indent>
[in]<i><br>
</i>The handle of the accessor to use. If <i>hAccessor</i> is the handle of a null accessor (<i>cBindings</i> in <b>IAccessor::CreateAccessor</b> was zero), then <b>GetLastVisibleData</b> does not get any data values.</p>
<p class=dt>
<i>pData</i></p>
<p class=indent>
[out]<i><br>
</i>A pointer to a buffer in which to return the data. The consumer allocates memory for this buffer.</p>
<p class=dt>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=dt>
S_OK</p>
<p class=indent>
The method succeeded. The status of all columns bound by the accessor is set to DBSTATUS_S_OK, DBSTATUS_S_ISNULL, or DBSTATUS_S_TRUNCATED.</p>
<p class=dt>
DB_S_ERRORSOCCURRED</p>
<p class=indent>
An error occurred while returning data for one or more columns, but data was successfully returned for at least one column. To determine the columns for which data was returned, the consumer checks the status values. For a list of status values that can be returned by this method, see “Status Values Used When Getting Data” in “Status” in Chapter 6.</p>
<p class=dt>
E_FAIL</p>
<p class=indent>
A provider-specific error occurred.</p>
<p class=dt>
E_INVALIDARG</p>
<p class=indent>
<i>pData</i> was a null pointer and <i>hAccessor</i> was not a null accessor.</p>
<p class=dt>
E_UNEXPECTED</p>
<p class=indent>
<b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was called and the object is in a zombie state.</p>
<p class=dt>
DB_E_BADACCESSORHANDLE</p>
<p class=indent>
<i>hAccessor</i> was invalid. It is possible for a reference accessor or an accessor that has a binding that uses provider-owned memory to be invalid for use with this method, even if the accessor is valid for use with <b>IRowset::GetData</b> or <b>IRowsetChange::SetData</b>.</p>
<p class=dt>
DB_E_BADACCESSORTYPE</p>
<p class=indent>
The specified accessor was not a row accessor.</p>
<p class=dt>
DB_E_BADROWHANDLE</p>
<p class=indent>
<i>hRow</i> was invalid.</p>
<p class=dt>
DB_E_ERRORSOCCURRED</p>
<p class=indent>
Errors occurred while returning data for all columns. To determine what errors occurred, the consumer checks the status values. For a list of status values that can be returned by this method, see “Status Values Used When Getting Data” in “Status” in Chapter 6.</p>
<p class=dt>
DB_E_PENDINGINSERT</p>
<p class=indent>
The rowset was in delayed update mode and <i>hRow</i> referred to a pending insert row.</p>
<p class=indent>
If this method performs deferred accessor validation and that validation takes place before any data is transferred, it can also return any of the following return codes for the applicable reasons listed in the corresponding DBBINDSTATUS values in <b>IAccessor::CreateAccessor</b>:</p>
<p class=indent>
E_NOINTERFACE<br>
DB_E_BADBINDINFO<br>
DB_E_BADORDINAL<br>
DB_E_BADSTORAGEFLAGS<br>
DB_E_UNSUPPORTEDCONVERSION</p>
<p class=dt>
</p>
<p class=label>
<b>Comments</b></p>
<p>
This method makes no logical change to the state of the object. A consumer calls <b>GetLastVisibleData</b> to retrieve the latest visible data from the data source.</p>
<p>
For providers that cache visible data, this is visible data obtained in the most recent call to <b>IRowsetRefresh::RefreshVisibleData</b> for this row. On a given row with pending changes, until there has been a successful call to refresh the visible data cache with <b>IRowsetRefresh::RefreshVisibleData</b>, this method will return the same data as a call to <b>IRowsetUpdate::GetOriginalData</b> for that row. On a given row with no pending changes, this method will return the same data as a call to <b>IRowset::GetData</b> for that row.</p>
<p>
For providers that don't cache visible data, or for deferred columns, this is the data currently visible from the data source. For a complete description of how <b>GetLastVisibleData</b> retrieves data, see “Getting Data” in Chapter 6.</p>
<p>
<b>GetVisibleData</b> is usually used in combination with <b>IRowset::GetData</b> and <b>IRowsetUpdate::GetOriginalData</b> to allow consumers to display collisions occurring with optimistic updates. After a row collision and a call to <b>IRowsetRefresh::RefreshVisibleData</b> to obtain the latest data source values for the conflicting rows, the three <b>GetData</b>-style functions collectively allow consumers access to all three sets of values needed to analyze the collision and decide on a resolution. The consumer can gain access to the pending-change values (<b>GetData</b>), the original values of the rowset before any changes were made (<b>GetOriginalData</b>), and the newly changed values at the data source that caused the collision (<b>GetLastVisibleData</b>).</p>
<p>
If <b>GetLastVisibleData</b> fails, the memory to which <i>pData</i> points is not freed but its contents are undefined. If, before <b>GetLastVisibleData</b> failed, the provider allocated any memory for return to the consumer, the provider frees this memory and does not return it to the consumer.</p>
<p>
There is a difference between calling <b>GetOriginalData</b> and calling <b>GetLastVisibleData</b>. In a delayed update mode, if data is changed by another consumer, different consumers may retrieve different data. For example, the value in Column 1 is X. In a delayed update mode, Consumer A changes the value in that column to Y but does not transmit this action to the data source. Consumer B then changes the value in Column 1 to Z. If Consumer A calls <b>GetOriginalData</b>, it gets X. However, if it calls <b>GetLastVisibleData</b>, using a dirty read, it will retrieve Z.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="rowset_64f5.htm">IRowset::GetData</a>, <a href="rowupd_74yp.htm">IRowsetUpdate::GetOriginalData</a>, <a href="rowres_4fdt.htm">IRowsetRefresh::RefreshVisibleData</a></p>
</font></BODY>
</HTML>

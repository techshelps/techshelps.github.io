<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Technology Overview: Toolkit Components</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbpwk_techoverview"></a><sup></sup>Components</h1>
<p>
When you build an OLE DB provider with Microsoft's OLE DB Simple Provider Toolkit, you are actually assembling a provider from several Microsoft component technologies. </p>
<p>
Providers built with the Toolkit consist of an <a href="#oledbpwk_oledbmappinglayer">OLE DB Simple Provider DLL</a> (MSDAOSP.DLL) that interoperates with one or more implementations of Internet Explorer's <a href="pw_ospintro_7ai7.htm">OSP</a> (for OLE DB Simple Provider) API. OSP supplies interfaces for basic provider capabilities over simple data, and the OLE DB Simple Provider expands the simple data provider functionality, adding comprehensive support for core <a href="pw_ioledb_541f.htm">OLE DB interfaces</a> and <a href="pw_props_7v3n.htm">OLE DB properties</a>, with features such as bookmarks and unique row handles (for improved data identification), and limited data conversion capabilities.</p>
<p>
The following figure shows, at a high level, the architecture of an OLE DB provider written with the Simple Provider Toolkit:</p>
<p>
<img src="pwk002.gif" border=0></p>
<p>
Following are descriptions of the main components shown in the figure and how they work:</p>
<h3>ADO and Other OLE DB Consumers</h3>
<p>
These can be any OLE DB-compliant application or control on a computer on which the provider is registered. If you are using <a href="pw_overadd_15pp.htm">ADO</a> Recordsets as a consumer, you code the provider identification information in the connection string and receive the data in the form of ADO Recordsets. </p>

<h3><a name="oledbpwk_oledbmappinglayer"></a>OLE DB Simple Provider DLL</h3>
<p>
The OLE DB Simple Provider DLL (MSDAOSP.DLL) acts as the go-between for the OSP Data Object and the consuming application or control. The DLL consists of code that understands OSP interface calls and does the following:
<ul type=disc>
<li>
Exposes the OLE DB Data Source, Session, and Rowset objects to consumers such as ADO, data-binding controls, or OLE DB-compliant applications.<br><br></li>
<li>
Uses either the <b>msDataSourceObject</b> function or <b>IDataSource::getDataMember</b> function to select the correct OSP objects.<br><br></li>
<li>
Consumes OSP interfaces from a data source and exposes the data as an <a href="pw_overadd_02gj.htm">OLE DB Rowset</a>.<br><br></li>
<li>
Makes OLE DB <a href="pw_notify_4rlj.htm">notifications</a> available. This information can be passed on to consuming objects, informing them whether data currently being manipulated has changed.</li>
</ul>
<p>
MSDAOSP.DLL assumes that OSP is correctly implemented (according to the OSP specification) and does no internal checking of OSP parameters or return codes.</p>

<h3><a name="oledbpwk_odooverview"></a>OSP Data Object</h3>
<p>
To accommodate different programming language environments, multiple data sources and their OSP implementations, and coordinate different types of notification, the simple data provider architecture includes an abstraction called the <i>OSP Data Object</i>. This object needs to be coded and registered before it is instantiated and used with the OLE DB Simple Provider DLL (MSDAOSP.DLL).</p>
<p>
An OSP Data Object implements one or more instances of <a href="pw_ospintro_7ai7.htm">OSP</a>, with each instance giving access to a particular source of data. The OSP Data Object includes methods that allow the OLE DB Simple Provider DLL to request the desired OSP implementation and, thus, the desired data source:
<ul type=disc>
<li>
If you are writing the provider in Visual C++ you will use the <a href="pw_id_6xid.htm">IDataSource</a> interface and its <b>getDataMember</b> method to request an OSP.<br><br></li>
<li>
If you are writing the provider in Visual Basic or Visual J++ you will use the <a href="pw_msdso_36t0.htm">msDataSourceObject</a> method along with the appropriate <b>IDispatch</b> methods to request an OSP.</li>
</ul>
<p>
In both of the above implementations, the decision as to which OSP to request is based on the <i>DataMember</i> string that is passed in to the OSP Data Object. The format and syntax of that string is implementation-defined and must be specified by each OSP developer and to users of the OSP data source. </p>
<p>
To expose a provider's full OLE DB functionality, the OSP Data Object needs to reference the OLE DB Simple Provider DLL (MSDAOSP.DLL). The developer can use one of two methods to accomplish this:
<ul type=disc>
<li>
Complete the <a href="pw_reg_77j9.htm">RegisterProvider.reg file</a> supplied with the Toolkit.<br><br></li>
<li>
Supply his or her own registration code for the OSP Data Object.</li>
</ul>
<p>
After the above step has been completed, the developer must register the OSP Data Object using regsvr32.exe (in Visual Basic and Visual C++ implementations) or javareg (in Visual J++).</p>
<p>
The OSP Data Object also sends <a href="pw_notify_4rlj.htm">notifications</a> to MSDAOSP.DLL, and data source notifications to MSDAOSP.DLL or external data consumers or controls (that is, applications outside the provider framework but able to access the same data sources). Where the data source notifications go to depends on which of the objects (MSDAOSP.DLL or an external data consumer) obtained the instance of the data source object.</p>
</font></BODY>
</HTML>

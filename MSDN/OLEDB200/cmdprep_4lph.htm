<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICommandPrepare::Prepare</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbicommandprepare__prepare"></a>ICommandPrepare::Prepare</h1>
<p>
Validates and optimizes the current command.</p>
<p>
<b>HRESULT Prepare (</b><br>
<b>ULONG</b><i>cExpectedRuns</i><b>);</b></p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>cExpectedRuns</i></p>
<p class=indent>
[in]<br>
Using this parameter, the consumer can indicate how often the command execution plan, which is produced by <b>Prepare</b>, will be used; that is, how often the command is likely to be executed without renewed optimization. This guides the optimizer in determining tradeoffs between search effort and run-time processing effort. A value of zero indicates that the consumer is unable to provide an estimate, and leaves it to the optimizer to choose a default value.</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
The command was prepared but one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_OPTIONAL—were not set. The consumer calls <b>ICommandProperties::GetProperties</b> to determine which properties were set.</p>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_OUTOFMEMORY<br>
The provider ran out of memory while preparing the command.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ABORTLIMITREACHED<br>
Preparation has been aborted because a resource limit has been reached. For example, the preparation timed out.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSINCOMMAND<br>
The command text contained one or more errors. Providers should use OLE DB error objects to return details about the errors.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
The command was not prepared because one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_REQUIRED—were not set. The consumer calls <b>ICommandProperties::GetProperties</b> to determine which properties were not set.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOCOMMAND<br>
No command text was currently set on the Command object.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_OBJECTOPEN<br>
A rowset was open on the command.</p>
<p class=dt>
</p>
<p class=indent>
DB_SEC_E_PERMISSIONDENIED<br>
The consumer did not have sufficient permission to prepare the command.</p>
<p class=label>
<b>Comments</b></p>
<p>
Although they are not required to do so, consumers should set any properties before calling <b>Prepare</b>, because these properties might be relevant to preparing the command.</p>
<p>
If <b>Prepare</b> is called redundantly, the provider determines whether command optimization is reinvoked; the provider returns S_OK.</p>
<p>
If <b>Prepare</b> returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer can immediately call <b>ICommandProperties::GetProperties</b> with the DBPPROPSET_PROPERTIESINERROR property set to return the properties that could not be set. For more information, see "<a href="ch11pr_0s4z.htm">Property Sets</a>" in Chapter 11.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="command_9zhh.htm">ICommand::Execute</a>, <a href="cmdprep_3f51.htm">ICommandPrepare::Unprepare</a>, <a href="cmdprm_7fjj.htm">ICommandWithParameters::SetParameterInfo</a></p>
</font></BODY>
</HTML>

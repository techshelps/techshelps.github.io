<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISequentialStream::Write</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbisequentialstream__write"></a>ISequentialStream::Write</h1>
<p>
Writes a specified number of bytes into the stream object starting at the current read/write location within the stream. </p>
<pre><code>HRESULT Write( 
   Void const *    pv,      //Pointer to buffer into which the stream 
                              is written 
   ULONG&nbsp;&nbsp;&nbsp;       cb,      //Specifies the number of bytes to write 
   ULONG *&nbsp; pcbWritten);   // Specifies the actual number of 
                              bytes written
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pv</i></p>
<p class=indent>
[in]<br>
Points to the buffer from which the stream should be written.</p>
<p class=dt>
<i>cb</i></p>
<p class=indent>
[in]<br>
The number of bytes of data to attempt to write into the stream.</p>
<p class=dt>
<i>pcbWritten</i></p>
<p class=indent>
[out]<br>
Pointer to a location where this method writes the actual number of bytes written to the stream object. The caller can set this pointer to NULL, in which case this method does not provide the actual number of bytes written.</p>
<p class=label>
<b>Return Code</b></p>
<p class=dt>
S_OK </p>
<p class=indent>
The data was successfully written into the stream object. </p>
<p class=dt>
E_PENDING </p>
<p class=indent>
Asynchronous Storage only: Part or all of the data to be written is currently unavailable. For more information, see <b>IFillLockBytes</b> and Asynchronous Storage. </p>
<p class=dt>
STG_E_MEDIUMFULL </p>
<p class=indent>
The write operation was not completed because there is no space left on the storage device. </p>
<p class=dt>
STG_E_ACCESSDENIED </p>
<p class=indent>
The caller does not have sufficient permissions for writing this stream object. </p>
<p class=dt>
STG_E_CANTSAVE </p>
<p class=indent>
Data cannot be written for reasons other than lack of access or space. </p>
<p class=dt>
STG_E_INVALIDPOINTER </p>
<p class=indent>
One of the pointer values is invalid. </p>
<p class=dt>
STG_E_REVERTED </p>
<p class=indent>
The object has been invalidated by a revert operation above it in the transaction tree. </p>
<p class=dt>
STG_E_WRITEFAULT </p>
<p class=indent>
The write operation was not completed due to a disk error. </p>
<p class=label>
<b>Comments</b></p>
<p>
<b>ISequentialStream::Write</b> writes the specified data to a stream object. The current read/write location within the stream is adjusted for the number of bytes actually written. The number of bytes actually written is returned in the <i>pcbWrite</i> parameter. If the byte count is zero bytes, the write operation has no effect. </p>
<p>
The <i>pcbWrite</i> parameter can have a value even if an error occurs. </p>
</font></BODY>
</HTML>

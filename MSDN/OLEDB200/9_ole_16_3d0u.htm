<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLOLEDB Example: Retrieving Error Information</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="examplec_retrieving_error_information"></a>SQLOLEDB Example: Retrieving Error Information</h1>
<p>
This example obtains information from the various error interfaces exposed by SQLOLEDB.</p>
<pre><code>////////////////////////////////////////////////////////////////////////
// DumpErrorInfo queries SQLOLEDB error interfaces, retrieving available
// status or error information.
void DumpErrorInfo
  (
  IUnknown* pObjectWithError,
  REFIID IID_InterfaceWithError
  )
  {
<b><i>  </i></b>
  // Interfaces used in the example.
  IErrorInfo*&nbsp;&nbsp;&nbsp;&nbsp; pIErrorInfoAll&nbsp;&nbsp;&nbsp; = NULL;
  IErrorInfo*&nbsp;&nbsp;&nbsp;&nbsp; pIErrorInfoRecord&nbsp;&nbsp; = NULL;
  IErrorRecords*&nbsp;&nbsp;&nbsp; pIErrorRecords&nbsp;&nbsp;&nbsp; = NULL;
  ISupportErrorInfo*&nbsp; pISupportErrorInfo&nbsp; = NULL;
  ISQLErrorInfo*&nbsp;&nbsp;&nbsp; pISQLErrorInfo&nbsp;&nbsp;&nbsp; = NULL;
  ISQLServerErrorInfo*&nbsp; pISQLServerErrorInfo&nbsp; = NULL;
<b><i>  </i></b>
  // Number of error records.
  ULONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nRecs;
  ULONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nRec;
<b><i>  </i></b>
  // Basic error information from GetBasicErrorInfo.
  ERRORINFO&nbsp;&nbsp;&nbsp;&nbsp; errorinfo;
<b><i>  </i></b>
  // IErrorInfo values.
  BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrDescription;
  BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrSource;
<b><i>  </i></b>
  // ISQLErrorInfo parameters.
  BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrSQLSTATE;
  LONG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lNativeError;
<b><i>  </i></b>
  // ISQLServerErrorInfo parameter pointers.
  SSERRORINFO*&nbsp;&nbsp;&nbsp; pSSErrorInfo = NULL;
  OLECHAR*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSSErrorStrings = NULL;
<b><i>  </i></b>
  // Hard-code an American English locale for the example.
  DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MYLOCALEID = 0x0409;
<b><i>  </i></b>
  // Only try to obtain error information if the interface supports
  // it.
  if (FAILED(pObjectWithError-&gt;QueryInterface(IID_ISupportErrorInfo,
 &nbsp;&nbsp; (void**) &amp;pISupportErrorInfo)) ||
 &nbsp;&nbsp; FAILED(pISupportErrorInfo-&gt;
 &nbsp;&nbsp; InterfaceSupportsErrorInfo(IID_InterfaceWithError)))
 &nbsp;&nbsp; {
 &nbsp;&nbsp; wprintf(L"ErrorInfo interface not supported on object");
 &nbsp;&nbsp; return;
 &nbsp;&nbsp; }
<b><i>  </i></b>
  // Don't bother to test the return of GetErrorInfo. It can succeed
  // AND return a NULL pointer in pIErrorInfoAll. Simply test the
  // pointer.
  GetErrorInfo(0, &amp;pIErrorInfoAll);
<b><i>  </i></b>
  if (pIErrorInfoAll != NULL)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; // Test to see if it's a valid OLE DB IErrorInfo exposing a list
 &nbsp;&nbsp; // of records.
 &nbsp;&nbsp; if (SUCCEEDED(pIErrorInfoAll-&gt;QueryInterface(IID_IErrorRecords,
 &nbsp;&nbsp; (void**) &amp;pIErrorRecords)))
 &nbsp;&nbsp; {
 &nbsp;&nbsp; pIErrorRecords-&gt;GetRecordCount(&amp;nRecs);
<b><i>  </i></b>
 &nbsp;&nbsp; // Within each record, retrieve information from each
 &nbsp;&nbsp; // of the defined interfaces.
 &nbsp;&nbsp; for (nRec = 0; nRec &lt; nRecs; nRec++)
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; // From IErrorRecords, get the HRESULT and a reference
 &nbsp;&nbsp;&nbsp;&nbsp; // to the ISQLErrorInfo interface.
 &nbsp;&nbsp;&nbsp;&nbsp; pIErrorRecords-&gt;GetBasicErrorInfo(nRec, &amp;errorinfo);
 &nbsp;&nbsp;&nbsp;&nbsp; pIErrorRecords-&gt;GetCustomErrorObject(nRec,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IID_ISQLErrorInfo, (IUnknown**) &amp;pISQLErrorInfo);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp; // Display the HRESULT, then use the ISQLErrorInfo.
 &nbsp;&nbsp;&nbsp;&nbsp; wprintf(L"HRESULT:\t%#X\n", errorinfo.hrError);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp; if (pISQLErrorInfo != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pISQLErrorInfo-&gt;GetSQLInfo(&amp;bstrSQLSTATE, 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;lNativeError);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display the SQLSTATE and native error values.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wprintf(L"SQLSTATE:\t%s\nNative Error:\t%ld\n",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrSQLSTATE, lNativeError);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SysFree BSTR references.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SysFreeString(bstrSQLSTATE);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get the ISQLServerErrorInfo interface from
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ISQLErrorInfo before releasing the reference.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pISQLErrorInfo-&gt;QueryInterface(
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IID_ISQLServerErrorInfo,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (void**) &amp;pISQLServerErrorInfo);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pISQLErrorInfo-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp; // Test to ensure the reference is valid, then
 &nbsp;&nbsp;&nbsp;&nbsp; // get error information from ISQLServerErrorInfo.
 &nbsp;&nbsp;&nbsp;&nbsp; if (pISQLServerErrorInfo != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pISQLServerErrorInfo-&gt;GetErrorInfo(&amp;pSSErrorInfo,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pSSErrorStrings);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ISQLServerErrorInfo::GetErrorInfo succeeds
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // even when it has nothing to return. Test the
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // pointers before using.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pSSErrorInfo)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Display the state and severity from the
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // returned information. The error message comes
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // from IErrorInfo::GetDescription.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wprintf(L"Error state:\t%d\nSeverity:\t%d\n",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSSErrorInfo-&gt;bState,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pSSErrorInfo-&gt;bClass);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // IMalloc::Free needed to release references
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // on returned values. For the example, assume
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the g_pIMalloc pointer is valid.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g_pIMalloc-&gt;Free(pSSErrorStrings);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g_pIMalloc-&gt;Free(pSSErrorInfo);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pISQLServerErrorInfo-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp; if (SUCCEEDED(pIErrorRecords-&gt;GetErrorInfo(nRec,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MYLOCALEID, &amp;pIErrorInfoRecord)))
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get the source and description (error message)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // from the record's IErrorInfo.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIErrorInfoRecord-&gt;GetSource(&amp;bstrSource);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIErrorInfoRecord-&gt;GetDescription(&amp;bstrDescription);
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bstrSource != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wprintf(L"Source:\t\t%s\n", bstrSource);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SysFreeString(bstrSource);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bstrDescription != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wprintf(L"Error message:\t%s\n",
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bstrDescription);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SysFreeString(bstrDescription);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
<b><i>  </i></b>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pIErrorInfoRecord-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp;&nbsp;&nbsp; }
<b><i>  </i></b>
 &nbsp;&nbsp; pIErrorRecords-&gt;Release();
 &nbsp;&nbsp; }
 &nbsp;&nbsp; else
 &nbsp;&nbsp; {
 &nbsp;&nbsp; // IErrorInfo is valid, get the source and
 &nbsp;&nbsp; // description to see what it is.
 &nbsp;&nbsp; pIErrorInfoAll-&gt;GetSource(&amp;bstrSource);
 &nbsp;&nbsp; pIErrorInfoAll-&gt;GetDescription(&amp;bstrDescription);
<b><i>  </i></b>
 &nbsp;&nbsp; if (bstrSource != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; wprintf(L"Source:\t\t%s\n", bstrSource);
 &nbsp;&nbsp;&nbsp;&nbsp; SysFreeString(bstrSource);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; if (bstrDescription != NULL)
 &nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; wprintf(L"Error message:\t%s\n", bstrDescription);
 &nbsp;&nbsp;&nbsp;&nbsp; SysFreeString(bstrDescription);
 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp;&nbsp; }
<b><i>  </i></b>
 &nbsp;&nbsp; pIErrorInfoAll-&gt;Release();
 &nbsp;&nbsp; }
  else
 &nbsp;&nbsp; {
 &nbsp;&nbsp; wprintf(L"GetErrorInfo failed.");
 &nbsp;&nbsp; }
<b><i>  </i></b>
  pISupportErrorInfo-&gt;Release();
<b><i>  </i></b>
  return;
  }
<b><i>  </i></b></code></pre>
</font></BODY>
</HTML>

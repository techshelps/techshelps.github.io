<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How an Automation Consumer Retrieves an Error Object</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbhow_an_automation_consumer_retrieves_an_error_object"></a>How an Automation Consumer Retrieves an Error Object</h1>
<p>
When an Automation consumer retrieves an error object in response to a return code it received, the consumer makes the following calls:
<ol>
<li>
Calls <b>QueryInterface</b> on the component that returned the code to retrieve an <b>ISupportErrorInfo</b> interface pointer on that component. This interface must be supported by all components that create error objects.<br><br></li>
<li>
Calls the <b>InterfaceSupportsErrorInfo</b> method in this interface and passes it the IID of the interface containing the method that returned the code. The <b>InterfaceSupportsErrorInfo</b> method returns S_OK if the interface supports error objects (meaning the consumer should retrieve the current error object, if one exists) and S_FALSE if the interface does not support error objects (meaning the consumer should not retrieve the current error object because it applies to another interface and method).<br><br></li>
<li>
Calls the <b>GetErrorInfo</b> function in the Automation DLL. This function returns an <b>IErrorInfo</b> interface pointer on the current error object and releases its reference count on the error object, thus transferring ownership of the error object to the consumer.<br><br></li>
<li>
Calls the methods in the <b>IErrorInfo</b> interface to retrieve information from the error object.<br><br></li>
<li>
Calls <b>Release</b> on the error object to release it.</li>
</ol>
<p>
The following code shows an example of how an Automation consumer might retrieve and use an Automation error object:</p>
<pre><code>#include &lt;oledb.h&gt;
IUnknown *pMyObject;
extern GUID IID_IMyInterface;

int main() {
 IErrorInfo&nbsp;&nbsp;&nbsp; *perrinfo;
 ISupportErrorInfo *pserrinfo;
 HRESULT&nbsp;&nbsp;&nbsp; hr;

 // Error occurs when calling method. (Not shown.) 
 //Check that the current interface supports error objects.
hr = pMyObject-&gt;QueryInterface(IID_ISupportErrorInfo, (void**) &amp;pserrinfo);
 if (SUCCEEDED(hr)) {
  hr = pserrinfo-&gt;InterfaceSupportsErrorInfo(IID_IMyInterface);
  if (hr == S_OK) {
 &nbsp; // Get the current error object.
 &nbsp; GetErrorInfo(0, &amp;perrinfo);

 &nbsp; // Use the returned IErrorInfo interface to retrieve error information.
 &nbsp; // (Not shown).

 &nbsp; // Release the error object.
 &nbsp; perrinfo-&gt;Release();
  }
 }
} ;
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDBInitialize::Initialize</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbidbinitialize__initialize"></a>IDBInitialize::Initialize</h1>
<p>
Initializes a data source object or enumerator.</p>
<pre><code>HRESULT Initialize();</code></pre>
<p class=label>
<b>Parameters</b></p>
<p>
None.</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ASYNCHRONOUS<br>
The method has initiated asynchronous initialization of the data source. The consumer can call <b>IDBAsynchStatus::GetStatus</b> to poll for status or can register for notifications of asynchronous processing. Until asynchronous processing completes, the data source remains in an uninitialized state.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
The data source object or enumerator was initialized but one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_OPTIONAL—were not set. In order to return properties in error, the provider uses DBPROPSET_PROPERTIESINERROR as described in Chapter 11, "Properties." The method can fail to set properties for a number of reasons, including:
<ul type=disc>
<li>
It was not possible to set the property.<br><br></li>
<li>
The value in <i>vValue</i> in the DBPROP structure was invalid.<br><br></li>
<li>
The property's value conflicted with an existing property.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_OUTOFMEMORY<br>
The provider was unable to allocate sufficient memory in order to initialize the data source object or enumerator.</p>
<p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
The data source is in the process of being initialized asynchronously. To cancel asynchronous execution, call <b>IDBAsynchStatus::Abort</b>.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ALREADYINITIALIZED<br>
<b>Initialize</b> had already been called for the data source object or enumerator and an intervening call to <b>Uninitialize</b> had not been made.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_CANCELED<br>
The provider prompted for additional information and the user selected Cancel.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
The data source object or enumerator was not initialized because one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_REQUIRED—were not set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were in error. The method can fail to set properties for any of the reasons specified in DB_S_ERRORSOCCURRED, except the reason that states that it was not possible to set the property.</p>
<p class=dt>
</p>
<p class=indent>
DB_SEC_E_AUTH_FAILED<br>
Authentication of the consumer to the data source or enumerator failed. The data source object or enumerator remains in the uninitialized state.</p>
<p class=dt>
</p>
<p class=label>
<b>Comments</b></p>
<p>
<b>Initialize</b> initializes the data source object or enumerator. It uses the values of properties in the Initialization property group that have been set with <b>IDBProperties::SetProperties</b>. If the consumer has not set values for all required properties, <b>Initialize</b> can prompt for values.</p>
<p>
If <b>Initialize</b> returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer can immediately call <b>IDBProperties::GetProperties</b> with the DBPPROPSET_PROPERTIESINERROR property set to return the properties that could not be set. For more information, see "<a href="ch11pr_0s4z.htm">Property Sets</a>" in Chapter 11.</p>
<p>
For information about what the consumer can and cannot do with a data source object or enumerator before it is initialized, see "<a href="ch02pr_2u2b.htm">Data Source Object States</a>" and "<a href="ch02pr_8i7n.htm">Enumerator States</a>" in Chapter 2.</p>
<h1>Initializing a Data Source Object Through a Network Connection</h1>
<p>
The following shows how to instantiate a data source object as an in-process object using <b>CoCreateInstance</b>.</p>
<pre><code>#include &lt;oledb.h&gt;
extern CLSID CLSID_DSO;
int main() {
 HRESULT&nbsp;&nbsp;&nbsp; hr;
 IDBInitialize *pIDBInitialize;

 // Create the data source object.
 hr = CoCreateInstance(CLSID_DSO, NULL, CLSCTX_INPROC_SERVER,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IID_IDBInitialize, (void**) &amp;pIDBInitialize);

 // Set the initialization properties.
 DBPROP rgProps[8];
 for (ULONG i = 0; i &lt;= 7; i++) {
  VariantInit(&amp;rgProps[i].vValue);
  rgProps[i].dwOptions = DBPROPOPTIONS_REQUIRED;
 };

 rgProps[0].dwPropertyID = DBPROP_INIT_LOCATION; 
 V_VT(&amp;(rgProps[0].vValue)) = VT_BSTR;
 V_BSTR(&amp;(rgProps[0].vValue)) = SysAllocStringLen(OLESTR("server"),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wcslen(OLESTR("server")));

 rgProps[1].dwPropertyID = DBPROP_INIT_DATASOURCE;
 V_VT(&amp;(rgProps[1].vValue)) = VT_BSTR;
 V_BSTR(&amp;(rgProps[1].vValue)) = SysAllocStringLen(OLESTR("database"),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wcslen(OLESTR("database")));

 rgProps[2].dwPropertyID = DBPROP_AUTH_PASSWORD;
 V_VT(&amp;(rgProps[2].vValue)) = VT_BSTR;
 V_BSTR(rgProps[2].vValue) = SysAllocStringLen(OLESTR("password"),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wcslen(OLESTR("password")));

 rgProps[3].dwPropertyID = DBPROP_AUTH_USERID;
 V_VT(&amp;(rgProps[3].vValue)) = VT_BSTR;
 V_BSTR(&amp;(rgProps[3].vValue)) = SysAllocStringLen(OLESTR("username"),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wcslen(OLESTR("username")));

 rgProps[4].dwPropertyID = DBPROP_AUTH_ENCRYPT_PASSWORD;
 V_VT(&amp;(rgProps[4].vValue)) = VT_BOOL;
 V_BOOL(&amp;(rgProps[4].vValue)) = VARIANT_TRUE;

 rgProps[5].dwPropertyID = DBPROP_AUTH_CACHE_AUTHINFO;
 V_VT(&amp;(rgProps[5].vValue)) = VT_BOOL;
 V_BOOL(&amp;(rgProps[5].vValue)) = VARIANT_TRUE;

 rgProps[6].dwPropertyID = DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO;
 V_VT(&amp;(rgProps[6].vValue)) = VT_BOOL;
 V_BOOL(&amp;(rgProps[6].vValue)) = VARIANT_TRUE;

 rgProps[7].dwPropertyID = DBPROP_AUTH_PERSIST_ENCRYPTED;
 V_VT(&amp;(rgProps[7].vValue)) = VT_BOOL;
 V_BOOL(&amp;(rgProps[7].vValue)) = VARIANT_TRUE;

 // Create the structure containing the properties.
 DBPROPSET PropSet;
 PropSet.rgProperties&nbsp; = rgProps;
 PropSet.cProperties&nbsp;&nbsp; = 8;
 PropSet.guidPropertySet = DBPROPSET_DBINIT;

 // Get an IDBProperties pointer and set the initialization properties.
 IDBProperties *pIDBProperties;
 pIDBInitialize-&gt;QueryInterface(IID_IDBProperties, &amp;pIDBProperties);
 pIDBProperties-&gt;SetProperties(1, &amp;PropSet);
 pIDBProperties-&gt;Release();

 // Initialize the data source object.
 hr = pIDBInitialize-&gt;Initialize();
 return hr;
};
</code></pre>
<p>
<b>See Also</b></p>
<p>
<a href="dbinit_4rmt.htm">IDBInitialize::Uninitialize</a>, <a href="dbprop_8n8z.htm">IDBProperties::SetProperties</a></p>
</font></BODY>
</HTML>

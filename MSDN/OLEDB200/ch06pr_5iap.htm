<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Data</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbsetting_data"></a>Setting Data</h1>
<p>
To set data, such as with <b>IRowsetChange::SetData</b> for rowset data, or <b>ICommand::Execute</b> for input parameter data, the consumer performs the following actions:
<ol>
<li>
Creates an accessor to bind the columns or input parameters.<br><br></li>
<li>
Allocates a buffer to hold the data to pass to the provider.<br><br></li>
<li>
Places data in this buffer. For more information, see the next procedure.<br><br></li>
<li>
Calls a method that sets data and passes the handle to the accessor and a pointer to the buffer.</li>
</ol>
<p>
For each column, except as noted later, or input parameter specified in the accessor, the consumer performs the actions in the following procedure. When passing key values to an index rowset, the consumer performs this procedure only for the number of key columns specified in the <i>cKeyValues</i> argument in <b>IRowsetIndex::Seek</b>, or the <i>cStartKeyValues</i> or <i>cEndKeyValues</i> arguments in <b>IRowsetIndex::SetRange</b>. </p>
<p class=indent>
<b>Note</b> &nbsp; This procedure assumes that the consumer has bound the value, length, and status for each column or input parameter. If any of these are not bound, the procedure is the same except that the consumer does not set the unbound part.
<ol>
<li>
If the data is NULL, sets the status to DBSTATUS_S_ISNULL and proceeds to the next column or input parameter. If the provider is to use the default as the input value for an input or input/output parameter in a procedure, sets the status to DBSTATUS_S_DEFAULT and proceeds to the next column or input parameter. If the provider is to ignore this column in performing the insert or update, sets the status to DBSTATUS_S_IGNORE. Otherwise, sets the status to DBSTATUS_S_OK. The address at which the status value is placed is calculated from the buffer address passed to the method and the <b>obStatus</b> element of the binding.<br><br></li>
<li>
If <i>wType</i> is DBTYPE_STR, DBTYPE_WSTR, and DBTYPE_BYTES, or any of these values combined with DBTYPE_BYREF, sets the length to the length of the data in bytes, not counting the null-termination character for strings. For all other data types, the provider ignores the length, so the consumer does not need to set it.<br><br></li>
<li>
Sets the data value. <br>
<br>
The address at which the data value is placed is calculated from the buffer address passed to the method and the <i>obValue</i> element of the binding. If <i>wType</i> is DBTYPE_BSTR or is combined with DBTYPE_BYREF, DBTYPE_VECTOR, or DBTYPE_ARRAY, the consumer places the data in separately allocated memory and places a pointer to the data in its buffer. For information about how this memory is allocated and freed, see "<a href="ch06pr_7bp0.htm">Memory Management</a>" earlier in this chapter.</li>
</ol>
<p>
For each column, except as noted later, or input parameter specified in the accessor, the provider performs the actions in the following procedure. When passing key values to an index rowset, the provider performs this procedure only for the number of key columns specified in the <i>cKeyValues</i> argument in <b>Seek</b>, or the <i>cStartKeyValues</i> or <i>cEndKeyValues</i> arguments in <b>SetRange</b>. This procedure assumes that the consumer has bound the value, length, and status for each column or input parameter. If any of these are not bound, the procedure is the same except that the provider does not attempt to retrieve the unbound part from the consumer's buffer; for more information, see "<a href="ch06pr_2mib.htm">Data Parts</a>" earlier in this chapter.
<ol>
<li>
Validates the accessor against the metadata if it has not already done so. <br>
<br>
The provider can validate the entire accessor before setting any data or on a binding-by-binding basis while setting data. If validation fails in the former case, the provider produces the appropriate return code and does not set any data. If it fails in the latter case, the provider sets the status to DBSTATUS_E_BADACCESSOR and proceeds to the next column or output parameter.<br><br></li>
<li>
Retrieves the status value from the consumer’s buffer. <p class=tl>
If the status is DBSTATUS_S_ISNULL, the provider uses a null value and proceeds to the next column or input parameter. If the status is DBSTATUS_S_DEFAULT, the provider uses the default value and proceeds to the next column or input parameter. If the status is DBSTATUS_S_IGNORE, the provider skips the column and proceeds to the next column to be inserted or updated.&nbsp; If the status is DBSTATUS_S_OK, the provider proceeds to the next step. If the status is any other value, the provider sets the status to DBSTATUS_E_BADSTATUS and proceeds to the next column or input parameter. The address from which the status value is retrieved is calculated from the buffer address passed to the method and the <b>obStatus</b> element of the binding.</P></li>
<li>
If <i>wType</i> is DBTYPE_STR, DBTYPE_WSTR, DBTYPE_BYTES, or one of these indicators combined with DBTYPE_BYREF, the provider retrieves the length from the consumer's buffer. </li>
</ol>
<p class=indent>
For all other data types, the provider ignores the length. The address from which the length value is retrieved is calculated from the buffer address passed to the method and the <i>obLength</i> element of the binding.
<ol start=4>
<li>
Retrieves the data value from the consumer's buffer. The address from which the data value is retrieved is calculated from the buffer address passed to the method and the <i>obValue</i> element of the binding.<ul type=disc>
<li>
<b>Variable-length data types</b>—The provider retrieves the number of bytes of variable-length data as specified by the length, up to <i>cbMaxLen</i> bytes. It is generally a consumer programming error if the length is greater than <i>cbMaxLen</i>. If no length is bound, the provider retrieves strings up to the first null-termination character; this is an error for DBTYPE_BYTES.<br><br></li>
<li>
<b>Fixed-length data types</b>—The provider retrieves the number of bytes of fixed-length data from the consumer's buffer based on the size of the data type; it ignores <i>cbMaxLen</i>.<p class=tl>
If the type indicator is DBTYPE_IUNKNOWN or DBTYPE_IDISPATCH, the provider retrieves a pointer to an interface on the object from the consumer's buffer. For information about how the provider retrieves the object itself, see Chapter 7, "<a href="ch07pr_5ipf.htm">BLOBs and OLE Objects</a>."</P><p class=tl>
If the type indicator is DBTYPE_BSTR, the provider retrieves the pointer to the BSTR from the consumer's buffer and the BSTR from the memory to which this pointer points. The provider ignores <i>cbMaxLen</i>; that is, it does not truncate the BSTR to <i>cbMaxLen</i> bytes.</P></li>
<li>
<b>DBTYPE_BYREF</b>—The provider retrieves a pointer to the data from the consumer's buffer and the data from the memory to which this pointer points. The provider retrieves the data from this memory as if it were retrieving it directly from the consumer's buffer, except that it always ignores <i>cbMaxLen</i>, even when DBTYPE_BYREF is combined with DBTYPE_STR, DBTYPE_WSTR, or DBTYPE_BYTES.<br><br></li>
<li>
<b>DBTYPE_VECTOR</b>—The provider retrieves a pointer to an array of data and a count of the number of elements in the array from a DBVECTOR structure in the consumer's buffer. It retrieves the data itself from the array to which this pointer points. The provider retrieves the data from this memory as if it were retrieving it directly from the consumer's buffer.<br><br></li>
<li>
<b>DBTYPE_ARRAY</b>—The provider retrieves a pointer to a SAFEARRAY from the consumer's buffer. It retrieves the data from the SAFEARRAY to which this pointer points.</li>
</ul>
</li>
<li>
Converts the data from the type that is stored in the consumer's buffer, as specified by the <i>wType</i> element of the binding, to the type of the column or input parameter. </li>
</ol>
<p class=indent>
If an error occurs while converting the data, the provider sets the status accordingly and proceeds to the next column or output parameter. For a list of status values that describe conversion errors, see "Status Values Used When Setting Data" in "<a href="ch06pr_5q9f.htm">Status</a>," earlier in this chapter. For more information about converting data, see "<a href="appapr_23ar.htm">Data Type Conversion Rules</a>" in Appendix A.</p>
<p>
If the provider encounters an error while retrieving a column or input parameter value, it sets the status value of that column or input parameter. Depending on the provider, it does one of the following:
<ul type=disc>
<li>
Stops processing and backs out any changes already made.<br><br></li>
<li>
Stops processing and leaves any changes already made.<br><br></li>
<li>
Continues processing some or all of the remaining columns or input parameters. </li>
</ul>
<p>
If the provider stops processing, it must set the status value of any column or input parameter that was not in error and was not successfully set to DBSTATUS_E_UNAVAILABLE. This way, the consumer can determine which column or input parameter values were valid, which were invalid, and which were not validated. </p>
<p>
When setting column data, except when seeking a key value or setting the index range, the provider then produces one of the following return codes:
<ul type=disc>
<li>
<b>DB_S_ERRORSOCCURRED</b>—The method successfully set data for at least one column.<br><br></li>
<li>
<b>DB_E_ERRORSOCCURRED</b>—The method did not successfully set data for any columns.</li>
</ul>
<p>
When setting input parameter data, seeking a key value, or setting the index range, the provider then returns DB_E_ERRORSOCCURRED.</p>
<p>
The consumer checks the status values to determine the columns or input parameters for which data was successfully set. If the consumer did not bind a status value for a column or input parameter and a method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, it must be assumed that the column or input parameter value was not successfully set. </p>
</font></BODY>
</HTML>

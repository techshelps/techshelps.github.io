<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbcommand_objects"></a>Command Objects</h1>
<p>
In OLE DB, Data Definition Language (DDL) and Data Manipulation Language (DML) statements are referred to as <i>text commands</i>. A command object contains a text command and encapsulates the query processing services available in today's DBMSs. Commands expose various interfaces representing different areas of functionality of a query processor, including query formulation, preparation, and execution. This figure illustrates a typical OLE DB query processor.</p>
<p class=label>
<b>Typical OLE DB query processor</b></p>
<p>
<img src="ch0105.gif" border=0></p>
<p>
The main purpose of a command object is to execute a text command. Executing a command such as an SQL <b>SELECT</b> statement creates a rowset. Executing a command such as an SQL <b>UPDATE</b> or <b>CREATE TABLE</b> statement does not create a rowset.</p>
<p>
Text commands are expressed in a provider-specific language—usually ANSI SQL92.</p>
<p>
To use a command, an OLE DB consumer performs the following actions:
<ol>
<li>
Obtains an interface on the command.<br><br></li>
<li>
Builds a text string representing the command text.<br><br></li>
<li>
Passes the text string to the command.<br><br></li>
<li>
Requests properties to be supported by the resulting rowset, if any, including the interfaces it will expose.<br><br></li>
<li>
Executes the command. (If the command text specified the creation of a rowset, the command returns the rowset to the consumer.)</li>
</ol>
<p>
Because providers can both consume and produce rowsets, it is possible to compose query processors to process distributed, heterogeneous, or parallel queries. It is also possible to compose specialized query processors, such as SQL query processors, text-search query processors, and geographical or image query processors.</p>
<h1>Rowset Properties</h1>
<p>
During command formulation, OLE DB consumers can request certain properties to be satisfied by the rowsets resulting from a command. Common properties include the set of interfaces to be supported by the resulting rowset. Any rowset returned from a command exposes the mandatory interfaces <b>IRowset</b>, <b>IAccessor</b>, <b>IColumnsInfo</b>, and <b>IRowsetInfo</b>, described earlier. </p>
<p>
The basic <b>IRowset</b> interface supported by all rowsets enables consumers to, at minimum, navigate forward in the rowset. By requesting the rowset property to scroll backward, a consumer can navigate the rowset in both directions. </p>
<p>
To support bidirectional rowsets efficiently, there are additional requirements when creating rowset objects. A forward-only rowset can be fed directly from the query execution plan output. A bidirectional rowset might require materializing the result. In addition to the default interfaces, a consumer may request interfaces to enable direct positioning within a rowset with bookmarks (<b>IRowsetLocate</b>), scrollability (<b>IRowsetScroll</b>), immediate updatability of rows (<b>IRowsetChange</b>), and deferred updatability of rows (<b>IRowsetUpdate</b>). It is also possible to request additional properties that specialize the behavior of certain interfaces — for example, to make some columns of the rowset updatable and the rest read-only.</p>
</font></BODY>
</HTML>

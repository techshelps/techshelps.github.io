<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conversions Involving Numeric Values</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbconversions_involving_numeric_values"></a>Conversions Involving Numeric Values</h1>
<p>
Conversions involving numeric values use the following general guidelines:
<ul type=disc>
<li>
Except for the most significant digit, all digits in floating point numbers are considered to be less significant. Thus, floating point numbers can always be converted (possibly with truncation) to integers, numerics, or strings as long as they don't overflow the integer, numeric, or string.<p class=tl>
For example, 1.234567E2 is truncated to 123 when converted to an integer, to 123.4 when converted to a NUMERIC(4, 1), to 120 when converted to a NUMERIC(4, –&nbsp;1), assuming the provider supports negative scale (many do not), to "123\0" when converted to a four-byte ANSI string, and to "123.4\0" when converted to a six byte ANSI string. It cannot be converted to an ANSI string of three or fewer bytes because such a conversion would overflow the string.</P></li>
<li>
In DBTYPE_NUMERIC and DBTYPE_DECIMAL, digits to the right of the decimal point are considered less significant and can be truncated; digits to the left of the decimal point are considered significant and cannot be truncated. For example, 123.4567 is truncated to 123 when converted to an integer and to "123.4\0" when converted to a six-byte ANSI string.<br><br></li>
<li>
In strings that represent numbers, digits to the right of the decimal point are considered less significant and can be truncated; digits to the left of the decimal point are considered significant and cannot be truncated. For example, "123.45\0" is truncated to 123 when converted to an integer and 123.4 when converted to a NUMERIC(4, 1). "1234.5\0" cannot be converted to a one-byte integer.<br><br></li>
<li>
It is provider-specific whether negative numbers are truncated up or down. <br>
Thus, –&nbsp;1.99 might be truncated to –&nbsp;1 or to –&nbsp;2 when converted to an integer.</li>
</ul>
</font></BODY>
</HTML>

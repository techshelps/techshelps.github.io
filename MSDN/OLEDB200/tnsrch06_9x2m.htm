<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UNION</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="union"></a>UNION</h1>
<h2>Removing Duplicates</h2>
<p>
Consider UNION(S1, S2) where:</p>
<p>
S1 = {Kansas, Buffalo, Topeka, USA, Canada}</p>
<p>
S2 = {Kansas, Topeka, Wichita, Canada}
<ol>
<li>
As shown in “Literal Sets,” make two tables — S1 and S2 — that contain the fully qualified member names in the sets S1 and S2 respectively.<br><br></li>
<li>
The following query does the union:<pre><code>SELECT Name, Newrank AS Rank
FROM 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((SELECT Name, "1" AS Src, Rank FROM S1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNION ALL
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SELECT Name, "2" AS Src, Rank FROM S2)
 &nbsp;&nbsp;&nbsp;&nbsp; RANKTOP 1 ROWS RANKORDER BY Src, Rank RANKGROUP BY Name)
 &nbsp; RANK ROWS AS NewRank RANKORDER BY Src, Rank)
ORDER BY Rank
</code></pre>
<p class=tl>
In English, the query:</P><ol>
<li>
Makes a union of S1 and S2, with the Src column tagging which set a row came from.<br><br></li>
<li>
The RankTop operation groups duplicates into separate groups by using the GROUP BY clause and orders each group by Src, Rank, and picks up the first one. This ensures that duplicates are eliminated from the tail.<br><br></li>
<li>
The Rank orders the filtered rows by Src and Rank and assigns a new rank to each row so that input ordering is preserved.</li>
</ol>
</li>
</ol>
<h2>Retaining Duplicates</h2>
<p>
Consider UNION(S1, S2, ALL). As in the previous section, tables are generated for S1 and S2. Then you use the following query:</p>
<pre><code>SELECT Name, Newrank AS Rank
FROM 
 &nbsp;&nbsp;&nbsp;&nbsp; ((SELECT Name, "1" AS Src, Rank FROM S1
 &nbsp;&nbsp;&nbsp;&nbsp; UNION ALL
 &nbsp;&nbsp;&nbsp;&nbsp; SELECT Name, "2" AS Src, Rank FROM S2)
 &nbsp; RANK ROWS AS NewRank RANKORDER BY Src, Rank)
ORDER BY Rank
</code></pre>
<p>
This is simpler because you need not remove duplicates. After the union, the Rank operation generates a rank value for each of the rows of the table joined by union. The outer SELECT emits this table, ordering it by the NewRank (renamed as Rank) column.</p>
<h2>Generalizing for Sets with Arbitrary Dimensionality</h2>
<p>
Each tuple has more than one element for these sets. Replace the Name column in the select list of each SELECT statement above by a list of columns (which is equivalent to the number of dimensions in the input sets). </p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRowset::ReleaseRows</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbirowset__releaserows"></a>IRowset::ReleaseRows</h1>
<p>
Releases rows.</p>
<pre><code>HRESULT ReleaseRows (
   ULONG               cRows,
   const HROW            rghRows[],
   DBROWOPTIONS   rgRowOptions[]
   ULONG               rgRefCounts[],
   DBROWSTATUS      rgRowStatus[]);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>cRows</i></p>
<p class=indent>
[in]<br>
The number of rows to release. If <i>cRows</i> is zero, <b>ReleaseRows</b> does not do anything.</p>
<p class=dt>
<i>rghRows</i></p>
<p class=indent>
[in]<br>
An array of handles of the rows to be released. The row handles need not form a logical cluster; they may have been obtained at separate times and need not be for contiguous underlying rows. They must belong to the current thread. Row handles are decremented by one reference count for each time they appear in the array.</p>
<p class=dt>
<i>rgRowOptions</i></p>
<p class=indent>
[in]<br>
An array of <i>cRows</i> elements containing bitmasks indicating additional options to be specified when releasing a row. This parameter is reserved for future use and should be set to a null pointer.</p>
<pre><code>typedef DWORD DBROWOPTIONS;</code></pre>
<p>
<i><br>
rgRefCounts</i></p>
<p class=indent>
[out]<br>
An array with <i>cRows</i> elements in which to return the new reference count of each row. If <i>rgRefCounts</i> is a null pointer, no counts are returned. The consumer allocates, but is not required to initialize, memory for this array and passes the address of this memory to the provider. The provider returns the reference counts in the array.</p>
<p class=dt>
<i>rgRowStatus</i></p>
<p class=indent>
[out]<br>
An array with <i>cRows</i> elements in which to return values indicating the status of each row specified in <i>rghRows</i>. If no errors or warnings occur while releasing a row, the corresponding element of <i>rgRowStatus</i> is set to DBROWSTATUS_S_OK. If an error or warning occurs while releasing a row, the corresponding element is set as specified in DB_S_ERRORSOCCURRED. The consumer allocates memory for this array. If <i>rgRowStatus</i> is a null pointer, no row statuses are returned. For information about the DBROWSTATUS enumerated type, see "<a href="ch13pr_5ib7.htm">Arrays of Errors</a>" in Chapter 13.</p>
<p class=dt>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded. All rows were successfully released. The following values can be returned in *<i>prgRowStatus</i>:
<ul type=disc>
<li>
The row was successfully released. The corresponding element of *<i>prgRowStatus</i> contains DBROWSTATUS_S_OK.<br><br></li>
<li>
A row had a pending change. The row was released and the corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_S_PENDINGCHANGES.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
An error occurred while releasing a row, but at least one row was successfully released. Successes and warnings can occur for the reasons listed under S_OK. The following errors can occur:
<ul type=disc>
<li>
A row handle was invalid. The row was not released and the corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_INVALID.<br><br></li>
<li>
The consumer encountered a recoverable, provider-specific error, such as an RPC failure when transmitting the change to a remote server. The corresponding element of <i>rgRowStatus</i> contains DBROWSTATUS_E_FAIL.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>rghRows</i> was a null pointer and <i>cRows</i> was not equal to zero.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
Errors occurred while releasing all of the rows. Errors can occur for the reasons listed under DB_S_ERRORSOCCURRED.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTREENTRANT<br>
The consumer called this method while it was processing a notification, and it is an error to call this method while processing the specified DBREASON value.</p>
<p class=dt>
</p>
<p class=label>
<b>Comments</b></p>
<p>
<b>ReleaseRows</b> decreases the reference count on the specified rows. It must be called once for each time that a row was fetched. For example, if the row was fetched three times, <b>ReleaseRows</b> must be called three times. Furthermore, if a row handle is duplicated in <i>rghRows</i>, the corresponding row will have its reference count decremented by one for each time it appears in the array.</p>
<p>
If a provider doesn't support exact reference counts on rows, it should return a reference count of 1 while the row is active. Consumers should be aware of this behavior and should use the returned reference count for debugging purposes only; consumers should not rely on the returned reference count to indicate whether the row would survive another release. In this case, a provider may choose to return S_OK for any and all calls to <b>ReleaseRows</b> until the rowset itself is released.</p>
<p>
If a consumer calls <b>ReleaseRows</b> on a row with pending changes, the row remains valid and <b>ReleaseRows</b> returns DBROWSTATUS_S_PENDINGCHANGES in <i>rgRowStatus</i>.</p>
<p>
When the reference count for a row decreases to zero, the row is released:
<ul type=disc>
<li>
Subject to the rules of the current transaction, the rowset is free to discard any resources used by a row that has a reference count of zero. For example, these might include memory, locks, and original values. When the rowset actually discards these resources is provider-specific.<br><br></li>
<li>
If the row has pending changes, the row still remains valid even though its reference count is zero. Consumers should not use the handle of a row that has a reference count of zero, even though the handle might still be valid. If <b>IRowsetUpdate::Update</b> is called to transmit pending changes for a row with a reference count of zero to the data source, it transmits the changes of the row and releases the row and its resources if the update succeeds. If <b>IRowsetUpdate::Undo</b> is called to undo the pending changes for a row with a reference count of zero, it releases the row and its resources.<br><br></li>
<li>
Pending changes are not lost when releasing a reference count obtained from <b>GetRowsAt</b>. A provider may take its own reference count on the row handle or store the row internally until pending changes are committed or dismissed (using <b>Update</b> or <b>Undo</b>).</li>
</ul>
<p>
After a row is released, methods called with the handle to that row return DB_E_BADROWHANDLE if the row has pending changes. After the pending changes are transmitted to the data source, methods might continue to return this error. However, the provider might have an implementation that recycles row handles and thereafter cannot detect the misuse. Because provider behavior varies, consumers should not use the handles of released rows.</p>
<p>
If <b>ReleaseRows</b> encounters an error while decrementing the reference count of a row or releasing the row, it sets the corresponding element in <i>rgRowStatus</i> to the appropriate DBROWSTATUS value and continues processing.</p>
<p>
This method can be called while the rowset is in a zombie state to allow the consumer to clean up after a transaction has been committed or aborted.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="rowset_6zlf.htm">IRowset::AddRefRows</a></p>
</font></BODY>
</HTML>

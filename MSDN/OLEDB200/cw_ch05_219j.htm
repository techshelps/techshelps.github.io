<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview of Interface Leveling</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="overviewofinterfaceleveling"></a>Overview of Interface Leveling</h1>
<p>
To meet its goal of providing data access to all types of data in a COM environment, OLE DB is designed as a component technology. Data sources expose the interfaces that reflect their functionality, and common components can be built on top of those interfaces to expose more robust data models. OLE DB creates components by identifying common characteristics among different data providers and services, and defining common interfaces to expose those characteristics. So, for example, while a rowset can be obtained through a number of very different mechanisms, the end result is still a rowset with well-defined interfaces, methods, and characteristics. Navigating the results of a complex multitable join is no different from navigating the results of a text file containing tabular data. Defining common interfaces in this manner allows components to more efficiently augment the individual data provider's native functionality.</p>
<p>
An OLE DB provider exposes OLE DB interfaces over some type of data. OLE DB providers include everything from a full SQL DBMS to an ISAM file to a text file or data stream. Obviously, these types of data providers have different functionality, and it's important not to limit that functionality. But at the same time it's not reasonable to expect all providers that expose simple tabular data to implement a full-blown query engine. Instead of looking at the differences between providers, OLE DB looks at the similarities and defines the common interfaces used to expose those similarities.&nbsp; </p>
<p>
Once the base functionality is defined, the next step is to view the additional functionality as incremental additions to this base functionality. Thus, the more sophisticated providers can expose these advanced features in addition to the base-level interfaces. Furthermore, individual service components can be built to implement these features on top of the simpler providers.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLE DB Error Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbole_db_error_objects"></a>OLE DB Error Objects</h1>
<p>
Automation error objects do not support two capabilities required by OLE DB:
<ul type=disc>
<li>
The ability to return multiple error records from a single call.<br><br></li>
<li>
The ability to return provider-specific error information.</li>
</ul>
<p>
For example, each service component, even one in the chain of service components, might want to add its own error information and a provider might want to expose error information that is unique to it.</p>
<p>
To solve this problem, OLE DB extends Automation error objects. In particular, it adds the ability for an error object to contain multiple <i>error records</i>. That is, an Automation error object effectively contains a single error record and looks like this:</p>
<p class=label>
<b>Automation error object</b></p>
<p>
<img src="ch1301.gif" border=0></p>
<p>
An OLE DB error object contains multiple error records and looks like this:</p>
<p class=label>
<b>OLE DB error object</b></p>
<p>
<img src="ch1302.gif" border=0></p>
<p>
Support for OLE DB error objects is optional. Providers can choose to generate them from all of their interfaces, from some of their interfaces, or from none of their interfaces. OLE DB error objects can be created by any method call. Although they are most commonly created when the method returns an error or warning, such as the DB_E_ERRORSINCOMMAND code returned by <b>ICommand::Execute</b> or the DB_S_ERRORSOCCURRED code returned by <b>IRowsetUpdate::Update</b>, they can also be returned when the method succeeds completely and returns S_OK or S_FALSE.</p>
<p>
OLE DB Providers are not required to generate error objects, even if a method on an interface that supports error objects returns an error. In this case, even though <b>ISupportErrorInfo</b> returns S_OK, calling GetErrorInfo returns a null value. However, the provider is required to clear any existing error objects when any method on an interface that supports error objects is called, whether that method returns an error or not. Thus, the consumer can be assured that, if an error object does exist after calling a method on an interface that supports error objects, that the error object describes the outcome of that method.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IColumnsRowset::GetColumnsRowset</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbicolumnsrowset__getcolumnsrowset"></a>IColumnsRowset::GetColumnsRowset</h1>
<p>
Returns a rowset containing metadata about each column in the current rowset. This rowset is known as the <i>column metadata rowset</i> and is read-only.</p>
<pre><code>HRESULT GetColumnsRowset (
   IUnknown *      pUnkOuter,
   ULONG         cOptColumns,
   const DBID      rgOptColumns[],
   REFIID            riid,
   ULONG         cPropertySets,
   DBPROPSET   rgPropertySets[],
   IUnknown **      ppColRowset);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pUnkOuter</i></p>
<p class=indent>
[in]<br>
A pointer to the controlling <b>IUnknown</b> interface if the column metadata rowset is being created as part of an aggregate. It is a null pointer if the rowset is not part of an aggregate.</p>
<p class=dt>
<i>cOptColumns</i></p>
<p class=indent>
[in]<br>
The number of the elements in <i>rgOptColumns</i>. If <i>cOptColumns</i> is zero, then <i>rgOptColumns</i> is ignored, and the provider returns all available columns in the columns rowset.</p>
<p class=dt>
<i>rgOptColumns</i></p>
<p class=indent>
[in]<br>
An array that specifies the optional columns to return. In addition to the optional columns listed below, the consumer can request provider-specific columns.</p>
<p class=dt>
<i>riid</i></p>
<p class=indent>
[in]<br>
The IID of the requested rowset interface. This interface is conceptually added to the list of required interfaces on the resulting rowset, and the method fails (E_NOINTERFACE) if that interface cannot be supported on the resulting rowset.</p>
<p class=dt>
<i>cPropertySets</i></p>
<p class=indent>
[in]<br>
The number of DBPROPSET structures in <i>rgPropertySets</i>. If this is zero, the provider ignores <i>rgPropertySets</i>.</p>
<p class=dt>
<i>rgPropertySets</i></p>
<p class=indent>
[in/out]<br>
An array of DBPROPSET structures containing properties and values to be set. The properties specified in these structures must belong to the Rowset property group. If the same property is specified more than once in <i>rgPropertySets</i>, then it is provider-specific which value is used. If <i>cPropertySets</i> is zero, this argument is ignored.</p>
<p class=tl>
For information about the properties in the Rowset property group that are defined by OLE DB, see "<a href="appcpr_8u7n.htm#oledbrowset_properties">Rowset Properties</a>" in Appendix C. For information about the DBPROPSET and DBPROP structures, see "<a href="ch11pr_5pb9.htm">DBPROPSET Structure</a>" and "<a href="ch11pr_3xt1.htm">DBPROP Structure</a>" in Chapter 11.</P><p class=dt>
<i>ppColRowset</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return the requested interface pointer on the column metadata rowset. If an error occurs, the returned pointer is null. If <b>GetColumnsRowset </b>is called on a command that does not return rows, then the column metadata rowset will be empty.</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded. In all DBPROP structures passed to the method, <i>dwStatus</i> is set to DBPROPSTATUS_OK.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ASYNCHRONOUS<br>
The method has initiated asynchronous creation of the rowset. The consumer can call <b>IDBAsynchStatus</b> to poll for status or <b>IConnectionPointContainer</b> to obtain the IID_IDBAsynchNotify connection point. Attempting to call any other interfaces may fail and the full set of interfaces may not be available on the object until asynchronous initialization of the rowset has completed.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
The rowset was opened but one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_OPTIONAL—were not set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were not set. The method can fail to set properties for a number of reasons, including:
<ul type=disc>
<li>
The property was not supported by the provider.<br><br></li>
<li>
The property was not in the Rowset property group.<br><br></li>
<li>
The property set was not supported by the provider.<br><br></li>
<li>
It was not possible to set the property.<br><br></li>
<li>
<i>colid</i> in the DBPROP structure was invalid.<br><br></li>
<li>
The data type in <i>vValue</i> in the DBPROP structure was not the data type of the property or was not VT_EMPTY.<br><br></li>
<li>
The value in <i>vValue</i> in the DBPROP structure was invalid.<br><br></li>
<li>
The property's value conflicted with an existing property.<br><br></li>
<li>
A property was specified to be applied to all columns, but could not be applied to one or more columns.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>ppColRowset</i> was a null pointer.</p>
<p class=tl>
<i>cPropertySets</i> was greater than zero and <i>rgPropertySets</i> was a null pointer.</P><p class=tl>
In an element of <i>rgPropertySets</i>, <i>cProperties</i> was not zero and <i>rgProperties</i> was a null pointer.</P><p class=tl>
<i>cOptColumns</i> was greater than zero and <i>rgOptColumns</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
E_NOINTERFACE<br>
The column metadata rowset did not support the interface specified in <i>riid</i>.</p>
<p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
<b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was called and the object is in a zombie state. This error can be returned only when the method is called on a rowset.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ABORTLIMITREACHED<br>
The method failed because a resource limit has been reached. For example, a query used to implement the method timed out. No rowset is returned.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADCOLUMNID<br>
An element of <i>rgOptColumns was an invalid DBID.</i></p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
No rowset was returned because one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_REQUIRED or an invalid value—were not set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were not set. None of the satisfiable properties are remembered. The method can fail to set properties for any of the reasons specified in DB_S_ERRORSOCCURRED, except the reason that states that it was not possible to set the property.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOAGGREGATION<br>
<i>pUnkOuter</i> was not a null pointer and the column's rowset does not support aggregation.</p>
<p class=indent>
<i>pUnkOuter</i> was non-null and <i>riid</i> was not IID_Unknown.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOCOMMAND<br>
No command text was set. This error can be returned only when this method is called from the command object.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTPREPARED<br>
The command exposed <b>ICommandPrepare</b> and the command text was set, but the command was not prepared. This error can be returned only when this method is called from the command object.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTREENTRANT<br>
The provider called a method from <b>IRowsetNotify</b> in the consumer and the method has not yet returned.</p>
<p class=dt>
</p>
<p class=indent>
DB_SEC_E_PERMISSIONDENIED<br>
The consumer did not have sufficient permission to create the column metadata rowset.</p>
<p class=label>
<b>Comments</b></p>
<p>
This method makes no logical change to the state of the object.</p>
<p>
<b>GetColumnsRowset</b> creates a rowset containing metadata about a rowset. Unlike <b>IColumnsInfo::GetColumnInfo</b>, it provides all of the metadata, but it is more complex to implement and use.</p>
<p>
The rows in the column metadata rowset describe the columns in the underlying rowset. The column metadata rowset contains one row for each column in the rowset. This includes the columns of the base table and any pseudo-columns generated by the provider or data source, such as bookmarks and row IDs.</p>
<p>
The order of the rows is the order in which the columns appear in the rowset (column ordinal order). This is the same order as they appear in <b>IColumnsInfo</b>. The order is usually predictable from the ordering of requested columns in the command text; if the command text does not specify an order, such as <b>SELECT * FROM MyTable</b>, then the order is determined by the provider, such as when the command is prepared.</p>
<p>
Each column in the column metadata rowset describes a single attribute, such as the name or data type, of a column in the original rowset. The order of the required columns is the same as the order in which they are listed below. The order of the optional columns is arbitrary, although they must be after the required columns. That is, the optional columns in the column metadata rowset can occur in any order after the required columns.</p>
<p>
The column metadata rowset always includes the required columns. It contains only those optional columns which are requested.</p>
<p>
<b>GetColumnsRowset</b> can be called for rowsets created by <b>GetColumnsRowset</b>.</p>
<p>
Calling <b>GetColumnsRowset</b> on a command before the command is executed may be an expensive operation.</p>
<h1>Required Metadata Columns</h1>
<p>
The column metadata rowset always contains the following columns; these columns return the same information as <b>GetColumnInfo</b>.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=29%><b>Column ID</b></td>
<td class=label width=21%><b>Type indicator</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_IDNAME</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>Column name. This column, together with the DBCOLUMN_GUID and DBCOLUMN_PROPID columns, form the ID of the column. One or more of these columns will be NULL depending on which elements of the DBID structure the provider uses.<p>
The column ID of a base table should be invariant under views.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_GUID</td>
<td width=21%>DBTYPE_GUID</td>
<td width=50%>Column GUID.</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_PROPID</td>
<td width=21%>DBTYPE_UI4</td>
<td width=50%>Column property ID.</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_NAME</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the column; this might not be unique. If this cannot be determined, a NULL is returned.<p>
The name can be different from the value returned in DBCOLUMN_IDNAME if the column has been renamed by the command text. This name always reflects the most recent renaming of the column in the current view or command text.</p>
<p>
If <b>GetColumnsRowset</b> is called for a column metadata rowset (the rowset returned by <b>GetColumnsRowset</b>), the name of each column is the name of the column ID constant. For example, the name of the DBCOLUMN_SCALE column is "DBCOLUMN_SCALE".</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_NUMBER</td>
<td width=21%>DBTYPE_UI4</td>
<td width=50%>The ordinal of the column. This is zero for the bookmark column of the row, if any. Other columns are numbered starting with one. This column cannot contain a NULL value.</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_TYPE</td>
<td width=21%>DBTYPE_UI2</td>
<td width=50%>The indicator of the column's data type. If the data type of the column varies from row to row, this must be DBTYPE_VARIANT. This column cannot contain a NULL value. For a list of valid type indicators, see "<a href="appapr_9nub.htm">Type Indicators</a>" in Appendix A.</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_TYPEINFO</td>
<td width=21%>DBTYPE_<br>
IUNKNOWN</td>
<td width=50%>Reserved for future use. Providers should return a null pointer in <i>pTypeInfo</i>.</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
COLUMNSIZE</td>
<td width=21%>DBTYPE_UI4</td>
<td width=50%>The maximum possible length of a value in the column. For columns that use a fixed-length data type, this is the size of the data type. For columns that use a variable-length data type, this is one of the following:<ul type=disc>
<li>
The maximum length of the column in characters, for DBTYPE_STR and DBTYPE_WSTR, or bytes, for DBTYPE_BYTES, if one is defined. For example, a CHAR(5) column in an SQL table has a maximum length of 5.<br><br></li>
<li>
The maximum length of the data type in characters, for DBTYPE_STR and DBTYPE_WSTR, or bytes, for DBTYPE_BYTES, if the column does not have a defined length.<br><br></li>
<li>
~0 (bitwise, the value is not 0; that is, all bits are set to 1) if neither the column nor the data type has a defined maximum length.</li>
</ul>
<p>
For data types that do not have a length, this is set to ~0 (bitwise, the value is not 0; that is, all bits are set to 1).</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
PRECISION</td>
<td width=21%>DBTYPE_UI2</td>
<td width=50%>If DBCOLUMN_TYPE is a numeric data type, this is the maximum precision of the column. The precision of columns with a data type of DBTYPE_DECIMAL or DBTYPE_NUMERIC depends on the definition of the column. For the precision of all other numeric data types, see "<a href="appapr_04hf.htm">Precision of Numeric Data Types</a>" in Appendix A.<p>
If DBCOLUMN_TYPE is not a numeric data type, this is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_SCALE</td>
<td width=21%>DBTYPE_I2</td>
<td width=50%>If DBCOLUMN_TYPE is DBTYPE_DECIMAL or DBTYPE_NUMERIC, this is the number of digits to the right of the decimal point. Otherwise, this is NULL.</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_FLAGS</td>
<td width=21%>DBTYPE_UI4</td>
<td width=50%>A bitmask that describes column characteristics. The DBCOLUMNFLAGS enumerated type specifies the bits in the bitmask. For more information, see <a href="colinf_3lrj.htm">IColumnsInfo::GetColumnInfo</a>. This column cannot contain a NULL value.</td>
</tr>
</table><br>
<h1>Optional Metadata Columns</h1>
<p>
The following columns are optional; if the column metadata rowset does not contain one of them, the consumer can safely use the default value. The default value is the value the consumer should assume if the provider does not support that information. It is also the value the column metadata rowset returns when the provider does have support, but does not specify that information for a particular column. The provider can also have optional, provider-specific columns.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=29%><b>Column ID</b></td>
<td class=label width=21%><b>Type indicator</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
BASECATALOGNAME</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the catalog in the data source that contains the column. NULL if the base catalog name cannot be determined.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
BASECOLUMNNAME</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the column in the data source. This might be different than the column name returned in the DBCOLUMN_NAME column if an alias was used. NULL if the base column name cannot be determined.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
BASESCHEMANAME</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the schema in the data source that contains the column. NULL if the base schema name cannot be determined.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
BASETABLENAME</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the table in the data source that contains the column. NULL if the base table name cannot be determined.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_CLSID</td>
<td width=21%>DBTYPE_GUID</td>
<td width=50%>If all objects in the column all have the same class ID, this is that class ID. If the column may contain objects with different class IDs, or if the column is not of DBTYPE_IUNKNOWN, this is set to NULL.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
COLLATINGSEQUENCE</td>
<td width=21%>DBTYPE_I4</td>
<td width=50%>The locale ID (LCID) that defines the collating sequence for the column. For more information, see the OLE documentation.<p>
The default of this column is the code page installed on the local machine.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
COMPUTEMODE</td>
<td width=21%>DBTYPE_I4</td>
<td width=50%>Whether a column is computed. One of the following:<p>
DBCOMPUTEMODE_COMPUTED: The column is computed, such as Salary/12.</p>
<p>
DBCOMPUTEMODE_DYNAMIC: The column is computed and <b>IRowset::GetData</b> returns the value of the column based on the current values of its component columns, which might have been changed with <b>IRowsetChange::SetData</b> or <b>IRowsetChange::InsertRow</b>.</p>
<p>
DBCOMPUTEDMODE_NOTCOMPUTED: The column is not computed. This is the default.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
DATETIMEPRECISION</td>
<td width=21%>DBTYPE_UI4</td>
<td width=50%>The datetime precision—number of digits in the fractional seconds portion—if the column is a datetime or interval type.<p>
The default of this column is derived from the value in column DATETIME_PRECISION in the COLUMNS schema rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
DEFAULTVALUE</td>
<td width=21%>DBTYPE_<br>
VARIANT</td>
<td width=50%>The column default value if declared statically. Dynamic initialization is handled by notifications. NULL if the default value cannot be determined. For a list of possible values, see the COLUMN_DEFAULT in "<a href="appbpr_5jjo.htm">COLUMNS Rowset</a>" in Appendix B.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
DOMAINCATALOG</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the catalog containing the column's domain. NULL if the domain catalog name cannot be determined.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
DOMAINSCHEMA</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the schema containing the column's domain. NULL if the domain schema name cannot be determined.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
DOMAINNAME</td>
<td width=21%>DBTYPE_WSTR</td>
<td width=50%>The name of the domain of which the column is a member. NULL if the domain name cannot be determined.<p>
The default of this column is NULL.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
HASDEFAULT</td>
<td width=21%>DBTYPE_BOOL</td>
<td width=50%>VARIANT_TRUE: The column has a default value.<p>
VARIANT_FALSE: The column does not have a default value.</p>
<p>
NULL: The provider could not determine if the column has a default value or if a default value does not make sense for the column. For example, it is a computed, derived, or nonupdatable column.</p>
<p>
The default of this column is VARIANT_FALSE.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
ISAUTOINCREMENT</td>
<td width=21%>DBTYPE_BOOL</td>
<td width=50%>VARIANT_TRUE: The column assigns values to new rows in fixed increments.<p>
VARIANT_FALSE: The column does not assign values to new rows in fixed increments.</p>
<p>
The default of this column is VARIANT_FALSE.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
ISCASESENSITIVE</td>
<td width=21%>DBTYPE_BOOL</td>
<td width=50%>VARIANT_TRUE if the order of the column is case sensitive and if searches on the column are case sensitive. Otherwise, VARIANT_FALSE.<p>
The default of this column is VARIANT_TRUE.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
ISSEARCHABLE</td>
<td width=21%>DBTYPE_UI4</td>
<td width=50%>An integer indicating the searchability of a column. For more information, see the SEARCHABLE column in "<a href="appbpr_1flg.htm">PROVIDER_TYPES Rowset</a>" in Appendix B.<p>
The default of this column is derived from the value of the SEARCHABLE column in the PROVIDER_TYPES schema rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
ISUNIQUE</td>
<td width=21%>DBTYPE_BOOL</td>
<td width=50%>VARIANT_TRUE: No two rows in the base table—the table returned in DBCOLUMN_BASETABLENAME—can have the same value in this column. DBCOLUMN_ISUNIQUE is guaranteed to be VARIANT_TRUE if the column constitutes a key by itself, or if there is a constraint of type UNIQUE that applies only to this column.<p>
VARIANT_FALSE: The column can contain duplicate values in the base table.</p>
<p>
The default of this column is VARIANT_FALSE.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
MAYSORT</td>
<td width=21%>DBTYPE_BOOL</td>
<td width=50%>VARIANT_TRUE: The column can be sorted.<p>
VARIANT_FALSE: The column cannot be sorted.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_<br>
OCTETLENGTH</td>
<td width=21%>DBTYPE_UI4</td>
<td width=50%>The maximum length in octets (bytes) of the column, if the column is a character or binary type. A value of zero means the column has no maximum length. NULL for all other types of columns.<p>
The default of this column is derived from the value of the CHARACTER_OCTET_LENGTH column in the COLUMNS schema rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_KEYCOLUMN</td>
<td width=21%>DBTYPE_BOOL</td>
<td width=50%>VARIANT_TRUE—The column is one of a set of columns required in order to uniquely identify the row.<p>
VARIANT_FALSE—The column is not required to uniquely identify the row. If the DBPROP_UNIQUEROW property is set to VARIANT_TRUE, then the set of columns with DBCOLUMN_KEYCOLUMN set to VARIANT_TRUE uniquely identifies a row in the rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBCOLUMN_BASETABLEVERSION</td>
<td width=21%>DBTYPE_UI8</td>
<td width=50%>Version number of the table in the data source that contains the column. This number is assumed to change every time the table definition is modified. The way in which this number is generated is provider specific.</td>
</tr>
</table><br>
<p class=label>
<b>See Also</b></p>
<p>
<a href="colinf_3lrj.htm">IColumnsInfo::GetColumnInfo</a>, <a href="colrow_8k8j.htm">IColumnsRowset::GetAvailableColumns</a>, <a href="rowinf_1pgz.htm">IRowsetInfo::GetProperties</a></p>
</font></BODY>
</HTML>

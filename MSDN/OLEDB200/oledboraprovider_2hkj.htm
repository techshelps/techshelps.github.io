<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Source Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledboracledata_source_objects"></a>Data Source Objects</h1>
<p>
OLE DB uses the term <i>data source</i> for the set of OLE DB interfaces used to establish a link to a data store, such as Oracle. Creating an instance of the data source object of the provider is the first task of an OLE DB consumer. For more information about data source objects, see "<a href="ch02pr_0qgj.htm">Data Source Objects</a>" in Chapter 2, "Enumerators, Data Source Objects, and Sessions," of the <i>OLE DB Programmer's Reference</i>.</p>
<p>
Every OLE DB provider declares a class identifier for itself. The class identifier for the OLE DB Provider for Oracle is the C/C++ macro CLSID_MSDAORA, which can be found in the header file Msdaora.h. With the class identifier, the consumer uses the OLE <b>CoCreateInstance</b> function to manufacture an instance of the data source object.</p>
<p>
The Oracle provider is an in-process server. Instances of the Oracle provider objects are created using the CLSCTX_INPROC_SERVER macro to indicate the executable context.</p>
<p>
The data source object exposes the OLE DB initialization interfaces that allow the consumer to connect to existing Oracle databases.</p>
<h3>Example</h3>
<p>
This example uses the class identifier macro to create a data source object and get a reference to its <a href="dbinit_1ko5.htm">IDBInitialize</a> interface.</p>
<pre><code>#include "msdaora.h"
IDBInitialize* pIDBInitialize;
HRESULT&nbsp;&nbsp;&nbsp; hr;
<b><i>  </i></b>
hr = CoCreateInstance(CLSID_MSDAORA, NULL, CLSCTX_INPROC_SERVER,
  IID_IDBInitialize, (void**) &amp;pIDBInitialize);
<b><i>  </i></b>
if (FAILED(hr))
{
  // Display error
…
}
  </code></pre>
<p>
With successful creation of an instance of a data source object, the consumer application can continue by initializing the data source and creating sessions. OLE DB sessions expose the interfaces that allow data access and manipulation.</p>
<p>
The provider makes its first connection to a specified Oracle server as part of successful data source initialization. The connection is maintained as long as a reference is maintained on any data source initialization interface, or until <b>IDBInitialize::Uninitialize</b> is called.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The OLE DB Provider for Oracle looks for the file Ociw32.dll when the client application tries to initialize. If this file is not an Oracle version 7.3.3 or later file, or if the file is not found, the provider returns a message stating that <b>IID_IDBInitialize</b> failed: “The Oracle client and networking components were not found. These components are supplied by the Oracle Corporation and are part of the Oracle Version 7.3.3 (or greater) client software installation. You will be unable to use this provider until these components have been installed.”</p>
</font></BODY>
</HTML>

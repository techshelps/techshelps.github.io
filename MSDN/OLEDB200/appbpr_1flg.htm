<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROVIDER_TYPES Rowset</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbprovider_types_rowset"></a>PROVIDER_TYPES Rowset</h1>
<p>
The PROVIDER_TYPES rowset identifies the (base) data types supported by the data provider.</p>
<p>
The PROVIDER_TYPES rowset contains the following columns.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=31%><b>Column name</b></td>
<td class=label width=22%><b>Type indicator</b></td>
<td class=label width=47%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=31%>TYPE_NAME</td>
<td width=22%>DBTYPE_WSTR</td>
<td width=47%>Provider-specific data type name.</td>
</tr>
<tr valign=top>
<td width=31%>DATA_TYPE</td>
<td width=22%>DBTYPE_UI2</td>
<td width=47%>The indicator of the data type.</td>
</tr>
<tr valign=top>
<td width=31%>COLUMN_SIZE</td>
<td width=22%>DBTYPE_UI4</td>
<td width=47%>The length of a non-numeric column or parameter refers to either the maximum or the defined length for this type by the provider. For character data, this is the maximum or defined length in characters. For datetime data types, this is the length of the string representation (assuming the maximum allowed precision of the fractional seconds component).<p>
If the data type is numeric, this is the upper bound on the maximum precision of the data type. For the maximum precision of all numeric data types, see "<a href="appapr_04hf.htm">Precision of Numeric Data Types</a>" in Appendix A.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>LITERAL_PREFIX</td>
<td width=22%>DBTYPE_WSTR</td>
<td width=47%>Character or characters used to prefix a literal of this type in a text command.</td>
</tr>
<tr valign=top>
<td width=31%>LITERAL_SUFFIX</td>
<td width=22%>DBTYPE_WSTR</td>
<td width=47%>Character or characters used to suffix a literal of this type in a text command.</td>
</tr>
<tr valign=top>
<td width=31%>CREATE_PARAMS</td>
<td width=22%>DBTYPE_WSTR</td>
<td width=47%>The creation parameters are specified by the consumer when creating a column of this data type. For example, the SQL data type DECIMAL needs a precision and a scale. In this case, the creation parameters might be the string "precision,scale". In a text command to create a DECIMAL column with a precision of 10 and a scale of 2, the value of the TYPE_NAME column might be DECIMAL() and the complete type specification would be DECIMAL(10,2). <p>
The creation parameters appear as a comma-separated list of values, in the order they are to be supplied, with no surrounding parentheses. If a creation parameter is length, maximum length, precision, or scale, "length", "max length", "precision", and "scale" should be used, respectively. If the creation parameters are some other value, it is provider-specific what text is used to describe the creation parameter.</p>
<p>
If the data type requires creation parameters, "()" generally appears in the type name. This indicates the position at which to insert the creation parameters. If the type name does not include "()", the creation parameters are enclosed in parentheses and appended to the end of the data type name.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>IS_NULLABLE</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—The data type is nullable.<p>
VARIANT_FALSE—The data type is not nullable.</p>
<p>
NULL—It is not known whether the data type is nullable.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>CASE_SENSITIVE</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—The data type is a character type and is case sensitive.<p>
VARIANT_FALSE—The data type is not a character type or is not case sensitive.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>SEARCHABLE</td>
<td width=22%>DBTYPE_UI4</td>
<td width=47%>If the provider supports <b>ICommandText</b>, then this column is an integer indicating the searchability of a data type; otherwise, this column is NULL. One of the following:<p>
DB_UNSEARCHABLE—The data type cannot be used in a <b>WHERE</b> clause.</p>
<p>
DB_LIKE_ONLY—The data type can be used in a <b>WHERE</b> clause only with the <b>LIKE</b> predicate.</p>
<p>
DB_ALL_EXCEPT_LIKE—The data type can be used in a <b>WHERE</b> clause with all comparison operators except <b>LIKE</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=31%></td>
<td width=22%></td>
<td width=47%>DB_SEARCHABLE—The data type can be used in a <b>WHERE</b> clause with any comparison operator.</td>
</tr>
<tr valign=top>
<td width=31%>UNSIGNED_ATTRIBUTE</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—The data type is unsigned.<p>
VARIANT_FALSE—The data type is signed.</p>
<p>
NULL—Not applicable to data type.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>FIXED_PREC_SCALE</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—The data type has a fixed precision and scale.<p>
VARIANT_FALSE—The data type does not have a fixed precision and scale.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>AUTO_UNIQUE_VALUE</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—Values of this type can be autoincrementing.<p>
VARIANT_FALSE—Values of this type cannot be autoincrementing.</p>
<p>
If this value is VARIANT_TRUE, then whether a column of this type is always autoincrementing or not depends on the provider's DBPROP_COL_AUTOINCREMENT column property. If the DBPROP_COL_AUTOINCREMENT property is read/write, then whether or not a column of this type is autoincrementing depends on the setting of the DBPROP_COL_AUTOINCREMENT property. If DBPROP_COL_AUTOINCREMENT is a read-only property, then either all columns of this type are autoincrementing or they are all not.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>LOCAL_TYPE_NAME</td>
<td width=22%>DBTYPE_WSTR</td>
<td width=47%>Localized version of TYPE_NAME. NULL is returned if a localized name is not supported by the data provider.</td>
</tr>
<tr valign=top>
<td width=31%>MINIMUM_SCALE</td>
<td width=22%>DBTYPE_I2</td>
<td width=47%>If the<i> type indicator</i> is DBTYPE_DECIMAL or DBTYPE_NUMERIC, this is the minimum number of digits allowed to the right of the decimal point. Otherwise, this is NULL.</td>
</tr>
<tr valign=top>
<td width=31%>MAXIMUM_SCALE</td>
<td width=22%>DBTYPE_I2</td>
<td width=47%>If the<i> type indicator</i> is DBTYPE_DECIMAL or DBTYPE_NUMERIC, this is the maximum number of digits allowed to the right of the decimal point. Otherwise, this is NULL.</td>
</tr>
<tr valign=top>
<td width=31%>GUID</td>
<td width=22%>DBTYPE_GUID</td>
<td width=47%>The GUID of the type. All types supported by a provider are described in a type library, so each type has a corresponding GUID.</td>
</tr>
<tr valign=top>
<td width=31%>TYPELIB</td>
<td width=22%>DBTYPE_WSTR</td>
<td width=47%>The type library containing the description of this type. All types supported by a provider, including those in Appendix A, are described in one or more type libraries.</td>
</tr>
<tr valign=top>
<td width=31%>VERSION</td>
<td width=22%>DBTYPE_WSTR</td>
<td width=47%>The version of the type definition. Providers may wish to version type definitions. Different providers may use different version schemes, such as a timestamp or number (integer or float). NULL if not supported.</td>
</tr>
<tr valign=top>
<td width=31%>IS_LONG</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—The data type is a BLOB that contains very long data; the definition of very long data is provider-specific.<p>
VARIANT_FALSE—The data type is a BLOB that does not contain very long data or is not a BLOB.</p>
<p>
This value determines the setting of the DBCOLUMNFLAGS_ISLONG flag returned by <b>GetColumnInfo</b> in <b>IColumnsInfo</b> and <b>GetParameterInfo</b> in <b>ICommandWithParameters</b>. For more information, see <a href="colinf_3lrj.htm">GetColumnInfo</a>, <a href="cmdprm_5ka7.htm">GetParameterInfo</a>, and "<a href="ch07pr_47dt.htm">Accessing BLOB Data</a>" in Chapter 7.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>BEST_MATCH</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—The data type is the best match between all data types in the data source and the OLE DB data type indicated by the value in the DATA_TYPE column.<p>
VARIANT_FALSE—The data type is not the best match.</p>
<p>
For each set of rows in which the value of the DATA_TYPE column is the same, the BEST_MATCH column is set to VARIANT_TRUE in only one row.</p>
</td>
</tr>
<tr valign=top>
<td width=31%>IS_FIXEDLENGTH</td>
<td width=22%>DBTYPE_BOOL</td>
<td width=47%>VARIANT_TRUE—Columns of this type created by the DDL will be of fixed length.<p>
VARIANT_FALSE—Columns of this type created by the DDL will be of variable length.</p>
<p>
If the field is NULL, it is not known whether the provider will map this field with a fixed or variable length.</p>
</td>
</tr>
</table><br>
<p>
<b>Default Sort Order:</b> DATA_TYPE</p>
</font></BODY>
</HTML>

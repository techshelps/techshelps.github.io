<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Provider Threading Responsibilities</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbprovider_threading_responsibilities"></a>Provider Threading Responsibilities</h1>
<p>
Free-threaded in-process OLE DB objects have the following threading responsibilities:
<ul type=disc>
<li>
To implement the guarding mechanisms necessary to guarantee safe operation of the OLE DB objects, when objects are called from different threads. The choice of these mechanisms is provider-specific.<br><br></li>
<li>
To guarantee an operation free of deadlocks and of starvation.<br><br></li>
<li>
In the case of rowset objects, to shield other threads executing concurrently from the effects of methods like <b>IRowsetUpdate::Update</b> or <b>IRowsetRefresh::ResynchVisibleData</b> that may change the state of the rowset's copies of the rows. <b>Update</b> should be an atomic operation. While working in immediate update mode, all methods that modify the rowset's copies of the rows (<b>IRowsetChange::SetData</b>, <b>IRowsetChange::DeleteRows</b>, and so on) should also be atomic operations. <br><br></li>
<li>
In the case of rowset objects, to guarantee that all other provider-implemented objects for which the rowset is a factory (such as other rowsets or OLE storage objects) are also free-threaded.<br><br></li>
<li>
To guarantee a minimum of marshaling support for their use by apartment-model consumers; for instance, by aggregating to them an <b>IMarshal</b> object obtained from <b>CoCreateFreeThreadedMarshaler</b>. For more information, see the Microsoft Win32<sup>®</sup> SDK, <i>OLE Programmer's Reference</i>. The provider can perform this aggregation lazily; that is, defer it until <b>QueryInterface</b> requests <b>IMarshal</b>.</li>
</ul>
<p>
Apartment model in-process OLE DB objects have the following threading responsibilities:
<ul type=disc>
<li>
The provider must assume that the OLE DB object will always receive direct calls on the same thread (apartment) on which it was created. Objects, however, can be created on different threads. Apartment objects belong to the same thread for all their existence.<br><br></li>
<li>
Apartment objects must use a proxy-stub mechanism to accept calls from other apartments. For this, <b>CoMarshalInterface</b> accepts a flag (MSHCTX_INPROC) to describe an interapartment communication. In the apartment model, calls using these proxy-stubs are synchronized by OLE in the same manner as Windows messages synchronize calls.</li>
</ul>
<p class=label>
<b>Apartment model in-process OLE DB objects</b></p>
<p>
<img src="ch1401.gif" border=0></p>
<ul type=disc>
<li>
In the case of rowset objects, the provider should guarantee that all other objects created by the rowset and returned by it—such as other rowsets or OLE storage objects—are also apartment model and belong to the same thread as their ancestor rowset.<br><br></li>
<li>
Apartment OLE DB objects should not share state with other OLE DB objects because these objects may reside in different threads. The exception to this rule is OLE DB objects that have an ancestor/descendant relationship, such as those created by <b>IColumnsRowset::GetColumnsRowset</b>. Because these objects belong to the same apartment, they are guaranteed to execute serially and may share state safely, if needed.<br><br></li>
<li>
Strictly speaking, the provider should furnish marshaling support (proxy/stub) for all the object's interfaces.</li>
</ul>
</font></BODY>
</HTML>

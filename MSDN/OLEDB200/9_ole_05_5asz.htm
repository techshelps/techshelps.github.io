<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Persisted Data Source Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="persisted_data_source_objects"></a>Persisted Data Source Objects</h1>
<p>
SQLOLEDB supports persisted data source objects with the <b>IPersistFile</b> interface.</p>
<h3>Examples</h3>
<h4>Persist data source initialization properties</h4>
<p>
This example shows a function that persists data source initialization properties that define a server, database, and the use of the Windows NT Authentication Mode for connection. The server name and database name are received in the <i>pLocation</i> and <i>pDatasource</i> parameters of the function.</p>
<pre><code>HRESULT SetAndSaveInitProps
(
  IDBInitialize* pIDBInitialize,
  WCHAR* pLocation,
  WCHAR* pDatasource,
  BOOL bUseWinNTAuth
)
{
  const ULONG&nbsp;&nbsp; nProps = 3;
  ULONG&nbsp;&nbsp;&nbsp;&nbsp; nSSProps;
  ULONG&nbsp;&nbsp;&nbsp;&nbsp; nPropSets;
  ULONG&nbsp;&nbsp;&nbsp;&nbsp; nProp;
  IDBProperties*&nbsp; pIDBProperties&nbsp; = NULL;
  IPersistFile* pIPersistFile = NULL;
  DBPROP&nbsp;&nbsp;&nbsp; aInitProps[nProps];
  DBPROP*&nbsp;&nbsp; aSSInitProps&nbsp; = NULL;
  DBPROPSET*&nbsp; aInitPropSets = NULL;
  HRESULT&nbsp;&nbsp; hr;
<b><i>  </i></b>
  // Setup arrays based on whether the Windows NT
  // Authentication Mode is used.
  if (bUseWinNTAuth == FALSE)
  {
 &nbsp;&nbsp; nSSProps = 0;
 &nbsp;&nbsp; nPropSets = 1;
  }
  else
  {
 &nbsp;&nbsp; nPropSets = 2;
<b><i>  </i></b>
 &nbsp;&nbsp; nSSProps = 1;
 &nbsp;&nbsp; aSSInitProps = new DBPROP[nSSProps];
  }
  aInitPropSets = new DBPROPSET[nPropSets];
<b><i>  </i></b>
  // Initialize common property options.
  for (nProp = 0; nProp &lt; nProps; nProp++)
  {
 &nbsp;&nbsp; VariantInit(&amp;aInitProps[nProp].vValue);
 &nbsp;&nbsp; aInitProps[nProp].dwOptions = DBPROPOPTIONS_REQUIRED;
 &nbsp;&nbsp; aInitProps[nProp].colid = DB_NULLID;
  }
<b><i>  </i></b>
  // Level of prompting for rest of the connection
  // process.
  aInitProps[0].dwPropertyID = DBPROP_INIT_PROMPT;
  aInitProps[0].vValue.vt = VT_I2;
  aInitProps[0].vValue.iVal = DBPROMPT_NOPROMPT;    
<b><i>  </i></b>
  // Server name.
  aInitProps[1].dwPropertyID = DBPROP_INIT_LOCATION;   
  aInitProps[1].vValue.vt = VT_BSTR;
  aInitProps[1].vValue.bstrVal = SysAllocString(pLocation);
<b><i>  </i></b>
  // Database.
  aInitProps[2].dwPropertyID = DBPROP_INIT_DATASOURCE;
  aInitProps[2].vValue.vt = VT_BSTR;
  aInitProps[2].vValue.bstrVal = SysAllocString(pDatasource);
<b><i>  </i></b>
  if (bUseWinNTAuth == TRUE)
  {
 &nbsp;&nbsp; // Initialize SQL Server provider-specific properties.
 &nbsp;&nbsp; for (nProp = 0; nProp &lt; nSSProps; nProp++)
 &nbsp;&nbsp; {
 &nbsp;&nbsp; VariantInit(&amp;aSSInitProps[nProp].vValue);
 &nbsp;&nbsp; aSSInitProps[nProp].dwOptions = DBPROPOPTIONS_REQUIRED;
 &nbsp;&nbsp; aSSInitProps[nProp].colid = DB_NULLID;
 &nbsp;&nbsp; }
<b><i>  </i></b>
 &nbsp;&nbsp; // Windows NT Authentication Mode.
 &nbsp;&nbsp; aSSInitProps[0].dwPropertyID = SSPROP_AUTH_TRUSTEDCONNECTION;
 &nbsp;&nbsp; aSSInitProps[0].vValue.vt = VT_BOOL;
 &nbsp;&nbsp; aSSInitProps[0].vValue.boolVal = VARIANT_TRUE;
  }
<b><i>  </i></b>
  // Now that properties are set, construct the PropertySet array.
  aInitPropSets[0].guidPropertySet = DBPROPSET_DBINIT;
  aInitPropSets[0].cProperties = nProps;
  aInitPropSets[0].rgProperties = aInitProps;
<b><i>  </i></b>
  if (bUseWinNTAuth == TRUE)
  {
 &nbsp;&nbsp; aInitPropSets[1].guidPropertySet = DBPROPSET_SQLSERVERDBINIT;
 &nbsp;&nbsp; aInitPropSets[1].cProperties = nSSProps;
 &nbsp;&nbsp; aInitPropSets[1].rgProperties = aSSInitProps;
  }
<b><i>  </i></b>
  // Set initialization properties.
  pIDBInitialize-&gt;QueryInterface(IID_IDBProperties,
 &nbsp;&nbsp; (void**) &amp;pIDBProperties);
  hr = pIDBProperties-&gt;SetProperties(nPropSets, aInitPropSets);
  if (FAILED(hr))
  {
 &nbsp;&nbsp; // Display error from failed SetProperties.
  }
  pIDBProperties-&gt;Release();
<b><i>  </i></b>
  // Free references on OLE known strings.
  for (nProp = 0; nProp &lt; nProps; nProp++)
  {
 &nbsp;&nbsp; if (aInitProps[nProp].vValue.vt == VT_BSTR)
 &nbsp;&nbsp; SysFreeString(aInitProps[nProp].vValue.bstrVal);
  }
<b><i>  </i></b>
  // Free dynamically allocated memory.
  delete [] aInitPropSets;
  delete [] aSSInitProps;
<b><i>  </i></b>
  // On success, persist the data source.
  if (SUCCEEDED(hr))
  {
 &nbsp;&nbsp; pIDBInitialize-&gt;QueryInterface(IID_IPersistFile,
 &nbsp;&nbsp; (void**) &amp;pIPersistFile);
<b><i>  </i></b>
 &nbsp;&nbsp; hr = pIPersistFile-&gt;Save(OLESTR("MyDataSource"), FALSE);
<b><i>  </i></b>
 &nbsp;&nbsp; if (FAILED(hr))
 &nbsp;&nbsp; {
 &nbsp;&nbsp; // Display errors from IPersistFile interface.
 &nbsp;&nbsp; }
 &nbsp;&nbsp; pIPersistFile-&gt;Release();
  }
<b><i>  </i></b>
  return (hr);
}
<b><i>  </i></b></code></pre>
<h4>Use persisted data source initialization properties</h4>
<p>
This example uses a persisted data source object with additional initialization properties that provide a SQL Server login ID and password.</p>
<pre><code>HRESULT InitFromPersistedDS
(
  IDBInitialize* pIDBInitialize,
  WCHAR* pPersistedDSN,
  WCHAR* pUID,
  WCHAR* pPWD
)
{
  const ULONG&nbsp;&nbsp; nProps = 3;
  const ULONG&nbsp;&nbsp; nPropSets = 1;
  ULONG&nbsp;&nbsp;&nbsp;&nbsp; nProp;
  IDBProperties*&nbsp; pIDBProperties&nbsp; = NULL;
  IPersistFile* pIPersistFile = NULL;
  DBPROP&nbsp;&nbsp;&nbsp; aInitProps[nProps];
  DBPROPSET&nbsp;&nbsp; aInitPropSets[nPropSets];
  HRESULT&nbsp;&nbsp; hr;
<b><i>  </i></b>
  // First load the persisted data source information.
  pIDBInitialize-&gt;QueryInterface(IID_IPersistFile,
 &nbsp;&nbsp; (void**) &amp;pIPersistFile);
<b><i>  </i></b>
  hr = pIPersistFile-&gt;Load(pPersistedDSN, STGM_DIRECT);
<b><i>  </i></b>
  if (FAILED(hr))
  {
 &nbsp;&nbsp; // Display errors from IPersistFile interface.
  }
  pIPersistFile-&gt;Release();
<b><i>  </i></b>
  if (FAILED(hr))
  {
 &nbsp;&nbsp; return (hr);
  }
<b><i>  </i></b>
  // Initialize common property options.
  for (nProp = 0; nProp &lt; nProps; nProp++)
  {
 &nbsp;&nbsp; VariantInit(&amp;aInitProps[nProp].vValue);
 &nbsp;&nbsp; aInitProps[nProp].dwOptions = DBPROPOPTIONS_REQUIRED;
 &nbsp;&nbsp; aInitProps[nProp].colid = DB_NULLID;
  }
<b><i>  </i></b>
  // Level of prompting for rest of the connection
  // process.
  aInitProps[0].dwPropertyID = DBPROP_INIT_PROMPT;
  aInitProps[0].vValue.vt = VT_I2;
  aInitProps[0].vValue.iVal = DBPROMPT_NOPROMPT;    
<b><i>  </i></b>
  // SQL Server login identifier.
  aInitProps[1].dwPropertyID = DBPROP_AUTH_USERID;
  aInitProps[1].vValue.vt = VT_BSTR;
  aInitProps[1].vValue.bstrVal = SysAllocString(
 &nbsp;&nbsp; (pUID != NULL ? pUID : OLESTR(““)));
<b><i>  </i></b>
  // SQL Server password.
  aInitProps[2].dwPropertyID = DBPROP_AUTH_PASSWORD;
  aInitProps[2].vValue.vt = VT_BSTR;
  aInitProps[2].vValue.bstrVal = SysAllocString(
 &nbsp;&nbsp; (pPWD != NULL ? pPWD : OLESTR(““)));
<b><i>  </i></b>
  // Now that properties are set, construct the PropertySet array.
  aInitPropSets[0].guidPropertySet = DBPROPSET_DBINIT;
  aInitPropSets[0].cProperties = nProps;
  aInitPropSets[0].rgProperties = aInitProps;
<b><i>  </i></b>
  // Set initialization properties.
  pIDBInitialize-&gt;QueryInterface(IID_IDBProperties,
 &nbsp;&nbsp; (void**) &amp;pIDBProperties);
  hr = pIDBProperties-&gt;SetProperties(nPropSets, aInitPropSets);
  if (FAILED(hr))
  {
 &nbsp;&nbsp; // Display error from failed SetProperties.
  }
  pIDBProperties-&gt;Release();
<b><i>  </i></b>
  // Free references on OLE-known strings.
  for (nProp = 0; nProp &lt; nProps; nProp++)
  {
 &nbsp;&nbsp; if (aInitProps[nProp].vValue.vt == VT_BSTR)
 &nbsp;&nbsp; SysFreeString(aInitProps[nProp].vValue.bstrVal);
  }
<b><i>  </i></b>
  if (FAILED(hr))
  {
 &nbsp;&nbsp; return (hr);
  }
<b><i>  </i></b>
  hr = pIDBInitialize-&gt;Initialize();
  return (hr);
}
<b><i>  </i></b></code></pre>
<p>
The <b>IPersistFile::Save</b> function can be called before or after calling <b>IDBInitialize::Initialize</b>. Calling the function after a successful return from <b>IDBInitialize::Initialize</b> ensures persisting a valid data source specification.</p>
</font></BODY>
</HTML>

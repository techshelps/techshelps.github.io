<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICommand::Execute</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbicommand__execute"></a>ICommand::Execute</h1>
<p>
Executes the command. </p>
<pre><code>HRESULT Execute (
   IUnknown *      pUnkOuter,
   REFIID            riid,
   DBPARAMS *   pParams,
   LONG   *         pcRowsAffected,
   IUnknown **      ppRowset);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pUnkOuter</i></p>
<p class=indent>
[in]<br>
A pointer to the controlling <b>IUnknown</b> interface if the rowset is being created as part of an aggregate; otherwise, it is null.</p>
<p class=dt>
<i>riid</i></p>
<p class=indent>
[in]<br>
The requested IID for the rowset returned in *<i>ppRowset</i>. This interface is conceptually added to the list of required interfaces on the resulting rowset, and the method fails (E_NOINTERFACE) if that interface cannot be supported on the resulting rowset.</p>
<p class=tl>
If this is IID_NULL, then <i>ppRowset</i> is ignored and no rowset is returned, even if the command would otherwise generate a rowset. Specifying IID_NULL is useful in the case of text commands that do not generate rowsets, such as data definition commands, as a hint to the provider that no rowset properties need to be verified.</P><p class=tl>
If <i>riid</i> is IID_IMultipleResults, the provider creates a multiple results object and returns a pointer to it in *<i>ppRowset</i>; it does this even if the command generates a single result. If the provider supports multiple results and the command generates multiple results but <i>riid</i> is not IID_IMultipleResults, the provider returns the first result and discards any remaining results. If <i>riid</i> is IID_IMultipleResults and the provider does not support multiple results, <b>Execute</b> returns E_NOINTERFACE.</P><p class=dt>
<i>pParams</i></p>
<p class=indent>
[in/out]<br>
A pointer to a DBPARAMS structure that specifies the values for one or more parameters. In text commands that use parameters, if no value is specified for a parameter through <i>pParams</i>, an error occurs.</p>
<pre><code>struct DBPARAMS {
 void *&nbsp; pData;
 ULONG&nbsp;&nbsp; cParamSets;
 HACCESSOR hAccessor;
};
</code></pre>
<p class=tl>
The elements of this structure are used as follows.<br>
</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows width=571>
<tr valign=top>
<td class=label width=25%><b>Element</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><i>pData</i></td>
<td width=75%>Pointer to a buffer from which the provider retrieves input parameter data and to which the provider returns output parameter data, according to the bindings specified by <i>hAccessor</i>. This pointer must be a valid pointer to a contiguous block of consumer-owned memory for the input and output parameter values. For more information, see "<a href="ch06pr_5iap.htm">Setting Data</a>" and "<a href="ch06pr_54dd.htm">Getting Data</a>" in Chapter 6.<p>
When output parameter data is available to the consumer depends on the DBPROP_OUTPUTPARAMETERAVAILABILITY property.</p>
</td>
</tr>
<tr valign=top>
<td width=25%><i>cParamSets</i></td>
<td width=75%>The number of sets of parameters in *<i>pData</i>. If <i>cParamSets</i> is greater than one, then the bindings described by <i>hAccessor</i> define the offsets within *<i>pData</i> for each set of parameters, and <i>cbRowSize</i> (as specified in <b>IAccessor::CreateAccessor</b>) defines a single fixed offset between each of those values and the corresponding values for the next set of parameters. Sets of multiple parameters (<i>cParamSets</i> is greater than one) can be specified only if DBPROP_MULTIPLEPARAMSETS is VARIANT_TRUE and the command does not return any rowsets.</td>
</tr>
<tr valign=top>
<td width=25%><i>hAccessor</i></td>
<td width=75%>Handle of the accessor to use. If <i>hAccessor</i> is the handle of a null accessor (<i>cBindings</i> in <b>CreateAccessor</b> was 0), then <b>Execute</b> does not retrieve or return any parameter values.</td>
</tr>
</table><br>
<p class=tl>
If the command text does not include parameters, the provider ignores this argument.</P><p class=dt>
<i>pcRowsAffected</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return the count of rows affected by a command that updates, deletes, or inserts rows. If <i>cParamSets</i> is greater than one, *<i>pcRowsAffected</i> is the total number of rows affected by all of the sets of parameters specified in the execution. If the number of affected rows is not available, *<i>pcRowsAffected</i> is set to DB_COUNTUNAVAILABLE on output. If <i>riid</i> is IID_IMultipleResults, the value returned in *<i>pcRowsAffected</i> is either DB_COUNTUNAVAILABLE or the total number of rows affected by the entire command; to retrieve individual row counts, the consumer calls <b>IMultipleResults::GetResult</b>. If the command does not update, delete, or insert rows, *<i>pcRowsAffected</i> is undefined on output. If <i>pcRowsAffected</i> is a null pointer, no count of rows is returned.</p>
<p class=tl>
<i>pcRowsAffected</i> is undefined if <b>ICommand::Execute</b> returns DB_S_ASYNCHRONOUS. For asynchronously executed commands, the consumer should call <b>IDBAsynchStatus::GetStatus</b> to obtain the number of rows affected in <i>pulProgress</i>.</P><p class=dt>
<i>ppRowset</i></p>
<p class=indent>
[in/out]<br>
A pointer to the memory in which to return the rowset's pointer. If <i>ppRowset</i> is a null pointer, no rowset is created.<br>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded. In all DBPROP structures returned by the method, <i>dwStatus</i> is set to DBPROPSTATUS_OK, the status of all input parameters bound by the accessor is set to DBSTATUS_S_OK or DBSTATUS_S_ISNULL, and the status of all output parameters bound by the accessor is set to DBSTATUS_S_OK, DBSTATUS_S_ISNULL, or DBSTATUS_S_TRUNCATED or is unknown because the parameter value has not been returned yet.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ASYNCHRONOUS<br>
The method has initiated asynchronous creation of the rowset. The consumer can call <b>IDBAsynchStatus</b> to poll for status or <b>IConnectionPointContainer</b> to obtain the IID_IDBAsynchNotify connection point. Attempting to call any other interfaces may fail, and the full set of interfaces may not be available on the object until asynchronous initialization of the rowset has completed.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
This can be returned for any of the following reasons.
<ul type=disc>
<li>
The command was executed but an error occurred while returning one or more output parameter values. To determine which output parameters were not returned, the consumer checks the status values. For a list of status values that can be returned by this method, see "Status Values Used When Getting Data" in "<a href="ch06pr_5q9f.htm">Status</a>" in Chapter 6.<br><br></li>
<li>
The rowset was opened but one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_OPTIONAL—were not set. The consumer calls <b>IRowsetInfo::GetProperties</b> to determine which properties were set.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
DB_S_STOPLIMITREACHED<br>
Execution has been stopped because a resource limit has been reached. The results obtained so far have been returned. Execution cannot be resumed.</p>
<p class=tl>
Multiple sets of parameters were specified and one or more, but not all of the parameters have been processed prior to the command being canceled by <b>ICommand::Cancel</b> or <b>IDBAsynchStatus::Abort</b>.</P><p class=tl>
This return code takes precedence over DB_S_ERRORSOCCURRED. That is, if the conditions described here and in those described in DB_S_ERRORSOCCURRED both occur, the provider returns this code. When the consumer receives this return code, it should also check for the conditions described in DB_S_ERRORSOCCURRED.</P><p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>pParams</i> was not ignored, <i>cParamSets</i> in the DBPARAMS structure pointed to by <i>pParams</i> was greater than one, <i>ppRowset</i> was not a null pointer, and the provider does not support multiple results.</p>
<p class=tl>
<i>pParams</i> was not ignored and, in the DBPARAMS structure pointed to by <i>pParams</i>, <i>pData</i> was a null pointer.</P><p class=tl>
<i>pParams</i> was not ignored, was not a null pointer, and in the DBPARAMS structure pointed to by <i>pParams</i>, <i>cParamSets</i> was zero.</P><p class=tl>
<i>riid</i> was not IID_NULL and <i>ppRowset</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
E_NOINTERFACE<br>
The rowset did not support the interface specified in <i>riid</i>.</p>
<p class=tl>
<i>riid</i> was IID_IMultipleResults and the provider did not support multiple results objects.</P><p class=dt>
</p>
<p class=indent>
DB_E_ABORTLIMITREACHED<br>
Execution has been aborted because a resource limit has been reached. For example, a query timed out. No results have been returned.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADACCESSORHANDLE<br>
<i>pParams</i> was not ignored and <i>hAccessor</i> in the DBPARAMS structure pointed to by <i>pParams</i> was invalid.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADACCESSORTYPE<br>
<i>hAccessor</i> in the DBPARAMS structure pointed to by <i>pParams</i> was not the handle of a parameter accessor.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_CANCELED<br>
The command was canceled by a call to <b>Cancel</b> on another thread. No records were affected.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_CANTCONVERTVALUE<br>
A literal value in the command text could not be converted to the type of the associated column for reasons other than data overflow.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_DATAOVERFLOW<br>
A literal value in the command text overflowed the type specified by the associated column.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSINCOMMAND<br>
The command text contained one or more errors. Providers should use OLE DB error objects to return details about the errors.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
The method failed due to one or more invalid input parameter values. To determine which input parameter values were invalid, the consumer checks the status values. For a list of status values that can be returned by this method, see "Status Values Used When Setting Data" in "<a href="ch06pr_5q9f.htm">Status</a>" in Chapter 6.</p>
<p class=tl>
The command was not executed and no rowset was returned because one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_REQUIRED—were not set.</P><p class=dt>
</p>
<p class=indent>
DB_E_INTEGRITYVIOLATION<br>
A literal value in the command text violated the integrity constraints for the column.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOAGGREGATION<br>
<i>pUnkOuter</i> was not a null pointer and the rowset being created does not support aggregation.</p>
<p class=indent>
<i>pUnkOuter</i> was non-null and <i>riid</i> was not IID_Unknown.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOCOMMAND<br>
No command text was currently set on the command object.</p>
<p class=indent>
DB_E_NOTABLE<br>
The specific table or view does not exist in the current data source.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_PARAMNOTOPTIONAL<br>
A value was not supplied for a required parameter.</p>
<p class=tl>
The command text used parameters and <i>pParams</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
DB_SEC_E_PERMISSIONDENIED<br>
The consumer did not have sufficient permission to execute the command. For example, a rowset-returning command specified a column for which the consumer does not have read permission, or an update command specified a column for which the consumer does not have write permission.</p>
<p class=indent>
DB_E_OBJECTOPEN<br>
The provider would have to open a new connection to support the operation and DBPROP_MULTIPLECONNECTIONS is set to VARIANT_FALSE.</p>
<p class=dt>
</p>
<p>
If this method performs deferred accessor validation and that validation takes place before any data is transferred, it can also return any of the following HRESULTs for the reasons listed in the corresponding DBBINDSTATUS values in <b>IAccessor::CreateAccessor:</b></p>
<p>
E_NOINTERFACE<br>
DB_E_BADBINDINFO<br>
DB_E_BADORDINAL<br>
DB_E_BADSTORAGEFLAGS<br>
DB_E_UNSUPPORTEDCONVERSION<br>
</p>
<p class=label>
<b>Comments</b></p>
<p>
If the command returns rows, such as an SQL <b>SELECT</b> statement, the result of this method is a rowset over the result rows. If no rows match the command, the rowset is still created. The resulting rowset is fully functional and can be used, for example, to insert new rows or determine column metadata.</p>
<p>
If the command returns multiple results (rowsets or row counts), the consumer requests a multiple-results object by setting <i>riid</i> to IID_IMultipleResults. <b>Execute</b> creates the multiple-results object and returns an <b>IMultipleResults</b> interface pointer to it in *<i>ppRowset</i>. The consumer repeatedly calls <b>IMultipleResults::GetResult</b> to retrieve the results in order. For more information, see "<a href="ch03pr_0tf7.htm">Multiple Results</a>" in Chapter 3.</p>
<p>
If any or all parameters fail and the provider does not support errors within an array of parameters (that is, the command fails if any or all of the parameters fail), the provider returns DB_E_ERRORSOCCURRED and returns any error information for the failed parameters in their status bindings.</p>
<p>
If any or all parameters fail and the provider supports errors within an array of parameters, the provider returns DB_S_ERRORSOCCURRED, sets <i>pcRowsAffected</i> to the number of successful parameters, and returns any error information for the failed parameters in their status bindings.</p>
<p>
If <b>Execute</b> is called multiple times for a single command, with or without changes to the command text, the outcome may reflect changes in the underlying stored data, depending on the isolation level specified for the surrounding transaction.</p>
<p>
<b>Execute</b> can be called when a rowset is already open on the command only if the only change between the calls is a change in the value of existing parameters (calls to <b>ICommandWithParameters::SetParameterInfo</b> will fail). Methods that modify the command (<b>ICommandPrepare::Prepare</b>, <b>ICommandPrepare::Unprepare</b>, <b>ICommandProperties::SetProperties</b>, and <b>ICommandText::SetCommandText</b>) while a rowset is open will fail and return DB_E_OBJECTOPEN. Each call to <b>Execute</b> creates a new rowset, which must be explicitly released by <b>IRowset::Release</b>.</p>
<p>
<b>Execute</b> does not affect the prepared state of a command.</p>
<p>
The consumer determines whether the command supports parameters by calling <b>QueryInterface</b> for <b>ICommandWithParameters</b>. If this interface is exposed, the command supports parameters; if it is not exposed, the command does not support parameters. If the command does not support parameters, <b>Execute</b> ignores <i>pParams</i>. However, if the command text includes parameters, <b>Execute</b> returns DB_E_ERRORSINCOMMAND.</p>
<p>
If an input parameter value is not specified, <b>Execute</b> returns DB_E_PARAMNOTOPTIONAL. If the provider cannot describe parameters and the consumer has not called <b>SetParameterInfo</b> for all parameters, the behavior of <b>Execute</b> is undefined. For example, <b>Execute</b> might guess at the parameter information or it might fail completely. For more information, see <a href="cmdprm_7fjj.htm">SetParameterInfo</a>.</p>
<p>
If <b>Execute</b> returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer can immediately call <b>ICommandProperties::GetProperties</b> with the DBPPROPSET_PROPERTIESINERROR property set to return the properties that could not be set. For more information, see "<a href="ch11pr_0s4z.htm">Property Sets</a>" in Chapter 11.</p>
<p>
<b>Execute</b> does not alter the value of any properties. That is, <b>ICommandProperties::GetProperties</b> returns the same value for a property regardless of whether it is called before or after <b>Execute</b> and whether <b>Execute</b> succeeded or failed. However, if a property value is not required, <b>IRowsetInfo::GetProperties</b> can return a different value for that property than <b>ICommandProperties::GetProperties</b>. For more information, see <a href="rowinf_1pgz.htm">IRowsetInfo::GetProperties</a>.</p>
<p>
If several threads concurrently request execution of a given command, the corresponding executions are serialized, and each thread will block until its corresponding execution concludes.</p>
<p>
<b>Execute</b> can fail even if <b>ICommandPrepare::Prepare</b> has succeeded; this may be the case if, for example, the underlying schema has changed between the <b>Prepare</b> and <b>Execute</b> calls and the command text had therefore become illegal.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="command_6uuk.htm">ICommand::Cancel</a>, <a href="cmdprep_4lph.htm">ICommandPrepare::Prepare</a>, <a href="cmdtxt_7sok.htm">ICommandText::SetCommandText</a>, <a href="cmdprm_7fjj.htm">ICommandWithParameters::SetParameterInfo</a></p>
</font></BODY>
</HTML>

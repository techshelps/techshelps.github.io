<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Time Series Functions</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="timeseriesfunctions"></a>Time Series Functions</h1>
<p>
The set of time series functions in MDX provides a powerful tool for data analysis. The time series functions described in this section are, in fact, member, set, or numeric functions.</p>
<p>
Even though these functions are called “time series functions,” they work equally well with any other dimension. This is because the semantics of these functions do not rely on the underlying dimension being the Time dimension. In fact, in many cases, there exist actual scenarios where they can be useful on other dimensions. However, by far their most common use is with the Time dimension, hence their name. The exceptions to this are the <i>x</i><b>TD</b> (<b>YTD</b>, <b>MTD</b>, <b>QTD</b>, <b>WTD</b>) functions, which are applicable to the Time dimension only.</p>
<p>
It is useful to clarify what we mean by “Time dimension.” This does not necessarily refer to a dimension whose name is “Time.” Rather, it refers to the dimension whose DIMENSION_TYPE property in the DIMENSIONS rowset is MD_DIMTYPE_TIME.</p>
<p>
The time series functions operate on the dimension that is specified implicitly as part of their <i>set, member </i>or <i>level</i> arguments. However, these arguments are optional for many time series functions; so it is possible to invoke the function with no <i>set, member</i> or <i>level </i>arguments. In such a case, the provider applies this function to that dimension whose DIMENSION_TYPE property is MD_DIMTYPE_TIME. If there exist multiple dimensions whose DIMENSION_TYPE property is MD_DIMTYPE_TIME, then which one is chosen is provider specific.</p>
<h2>Time Series Set Value Expressions</h2>
<p>
<b>PERIODSTODATE([&lt;level&gt;[, &lt;member&gt;]]))</b></p>
<p class=tl>
Within the scope of <i>level</i>, returns the set of periods on the level of <i>member</i>, starting with the first period and ending with <i>member</i>. If no level<i> </i>or member is specified, then the <i>member</i> value is <b>Time.CURRENTMEMBER</b> and <i>level</i> is the parent level of <b>Time.CURRENTMEMBER</b>. If a level is specified, then <i>member</i> is <i>dimension</i><b>.CURRENTMEMBER</b>, where <i>dimension </i>is the dimension of <i>level</i>.</P><pre><code>PERIODSTODATE(Quarter, [05-Sep-1997])
</code></pre>
<p class=tl>
returns the set of days from the beginning of Quarter3. (This is the member at the Quarter level that is the ancestor of [05-Sep-1997]) through [05-Sep-1997].)</P><pre><code>PERIODSTODATE(Year)
</code></pre>
<p class=tl>
returns the set of members from the beginning of the year that is the ancestor of <b>Time.CURRENTMEMBER</b>, through <b>Time.CURRENTMEMBER</b>.</P><pre><code>PERIODSTODATE()
</code></pre>
<p class=tl>
returns the set of members from the beginning of the containing period of <b>Time.CURRENTMEMBER</b> to <b>Time.CURRENTMEMBER</b>. All the returned members are at the same level as <b>Time.CURRENTMEMBER</b>.</P><p class=tl>
<b>PERIODSTODATE(</b><i>level</i><b>, </b><i>member</i><b>)</b> is the same as <b>TOPCOUNT(Descendants(Ancestor(</b><i>member</i><b>, </b><i>level</i><b>), </b><i>member</i><b>.Level), 1):</b><i>member</i></P><p>
<b><i>x</i>TD([&lt;member&gt;])</b></p>
<p class=tl>
A shortcut function to <b>PERIODSTODATE</b> that predefines the <i>level</i> argument to be Year (<b>YTD</b>), Month (<b>MTD</b>), Quarter (<b>QTD</b>), or Week (<b>WTD</b>). If no member is specified, then the default is <b>Time.CURRENTMEMBER</b>.</P><p>
<b>LASTPERIODS(&lt;index&gt;[, &lt;member&gt;])</b></p>
<p class=tl>
Returns the set of <i>index</i> periods ending with <i>member</i> and starting with the member lagging <i>index</i> – 1 from <i>member</i>. This is the same as <b>LAG(</b><i>member</i><b>,</b><i> index</i><b> – 1):</b><i>member.</i></P><p class=tl>
For example, </P><pre><code>LASTPERIODS(5, [1991June])
</code></pre>
<p class=tl>
returns the set </P><pre><code>{[1991Feb], [1991Mar], [1991Apr], [1991May], [1991June]}
</code></pre>
<p class=tl>
If <i>member</i> is not specified, then it is <b>Time.CURRENTMEMBER</b>.</P><h2>Time Series Member Value Expressions</h2>
<p>
<b>PARALLELPERIOD([&lt;level&gt;[, &lt;index&gt;[, &lt;member&gt;]]])</b></p>
<p class=tl>
This function is similar to the <b>COUSIN</b> function, but is more closely related to Time series. It takes the ancestor of <i>member</i> at <i>level</i> (call it <i>ancestor</i>); then it takes the sibling of <i>ancestor</i> that lags by <i>index</i>, and returns the parallel period of <i>member</i> among the descendants of <i>ancestor</i>.</P><p class=tl>
This function has the following defaults:</P><ul type=disc>
<li>
Default <i>member</i> value is <b>Time.CURRENTMEMBER</b> if <i>level</i> is not specified. Otherwise it is <i>dimension</i><b>.CURRENTMEMBER</b>, where <i>dimension</i> is the dimension to which <i>level</i> belongs.<br><br></li>
<li>
Default <i>index</i> is 1.<br><br></li>
<li>
Default <i>level</i> is the level of the parent of <i>member</i>.<p class=tl>
This function is equivalent to:</P><p class=tl>
<b>COUSIN(</b><i>member</i><b>,LAG(ANCESTOR(</b><i>member</i><b>,</b><i>level</i><b>),</b><i>index</i><b>)</b></P><pre><code>PARALLELPERIOD(Year,2, [96 Qtr 3])
</code></pre>
<p class=tl>
returns the member [94 Qtr 3].</P><pre><code>PARALLELPERIOD(Year,2)
</code></pre>
<p class=tl>
returns the parallel period of <b>Time.CURRENTMEMBER</b>, two years ago. That is, if <b>Time.CURRENTMEMBER </b>is [1993June], then the returned member is [1991June].</P><pre><code>PARALLELPERIOD(Year)
</code></pre>
<p class=tl>
returns the parallel period of <b>Time.CURRENTMEMBER</b> from last year. That is, if <b>Time.CURRENTMEMBER</b> is [1993June], then the returned member is [1992June].</P><pre><code>PARALLELPERIOD()
</code></pre>
<p class=tl>
returns the parallel period in the immediately prior sibling to the parent of <b>Time.CURRENTMEMBER</b>. For example, if <b>Time.CURRENTMEMBER</b> is [1993June], then the returned member is [1993March]. The parent of ([1993June] is Quarter2, whose immediately prior sibling is Quarter1, in which the parallel period is [1993March].</P></li>
</ul>
<p>
<b>OPENINGPERIOD([&lt;level&gt;[, &lt;member&gt;]])</b></p>
<p class=tl>
This function returns the first period among the descendants of <i>member</i> at <i>level</i>. For example, OPENINGPERIOD(Month, [1991]) returns [1991January]. If no <i>member</i> is specified, then the default is <b>Time.CURRENTMEMBER</b>. If no <i>level</i> is specified, then it is the level below that of <i>member</i>. This function is equivalent to <b>TOPCOUNT(Descendants(,</b><i>member</i><b>, </b><i>level</i><b>), 1)</b>.</P><p class=tl>
The function <b>CLOSINGPERIOD</b> is very similar, the only difference being it returns the last sibling instead of the first sibling.</P><h2>Time Series Analysis (Numeric) Functions</h2>
<p>
These are functions pertaining to finding covariance, correlation, and linear regression by using the least squares method.</p>
<p>
<b>COVARIANCE(&lt;set&gt;, &lt;numeric_value_expression&gt;<br>
[, &lt;numeric_value_expression&gt;])</b></p>
<p>
<b>CORRELATION(&lt;set&gt;, &lt;numeric_value_expression&gt;<br>
[, &lt;numeric_value_expression&gt;])</b></p>
<p class=tl>
Covariance and correlation are measures of linear association. Both functions evaluate <i>set</i> against the first numeric value expression to get the values for the y-axis. The set is evaluated against the second numeric value expression (if present) to get the set of values for the x-axis. If the second numeric value expression is not present, then the members of <i>set</i> are used as values for the x-axis. </P><p class=tl>
The latter case does not make much sense for most dimensions (for example, SalesPerson). However, it does make sense for the Time dimension. Covariance and correlation are calculated for these x and y values.</P><p>
Linear regression by using the least squares method calculates the equation of the best fit line for a series of points. For the purposes of this section, let the regression line be given by the equation </p>
<pre><code>y = ax+b
</code></pre>
<p>
where <i>a</i> is called the intercept and <i>b</i> is called the slope. </p>
<p>
<b>LINREGINTERCEPT(&lt;set&gt;, &lt;numeric_value_expression&gt;<br>
 &nbsp; [, &lt;numeric_value_expression&gt;])</b></p>
<p>
<b>LINREGSLOPE(&lt;set&gt;, &lt;numeric_value_expression&gt;<br>
 &nbsp; [, &lt;numeric_value_expression&gt;])</b></p>
<p>
<b>LINREGVARIANCE(&lt;set&gt;, &lt;numeric_value_expression&gt;<br>
 &nbsp; [, &lt;numeric_value_expression&gt;])</b></p>
<p>
<b>LINREGR2(&lt;set&gt;, &lt;numeric_value_expression&gt;<br>
 &nbsp; [, &lt;numeric_value_expression&gt;])</b></p>
<p class=tl>
Evaluates <i>set</i> against the first numeric value expression to get the set of values for the y-axis. Evaluates <i>set</i> against the second numeric value expression (if present) to get the set of values for the x-axis. If the second numeric value expression is not present, then it uses the members of <i>set</i> as values for the x-axis. </P><p class=tl>
The latter case does not make much sense for most dimensions (for example, SalesPerson). However, it does make sense for the time dimension.</P><p class=tl>
After obtaining the set of points, <b>LINREGINTERCEPT </b>returns the intercept of the regression line (<i>b</i> in the equation above). <b>LINREGSLOPE </b>returns the slope of the regression line (<i>a</i> in the equation above). <b>LINREGVARIANCE </b>returns the statistical variance that describes the fit of the linear equation to the points, and <b>LINREGR2 </b>returns the statistical R<sup>2</sup> that describes the fit of the linear equation to the points.</P><p>
<b>LINREGPOINT(&lt;numeric_value_expression&gt;, &lt;set&gt;, <br>
 &nbsp; &lt;numeric_value_expression&gt; [, &lt;numeric_value_expression&gt;])</b></p>
<p class=tl>
Uses the last three arguments — <i>set</i> and <i>numeric_value_expression</i> — like the other <b>LINREG</b><i>xxx</i> functions to calculate the regression line. Now, it evaluates the first argument (<i>numeric_value_expression</i>) and uses the resulting number as the “x” value in the regression equation (y = ax + b) to calculate the “y” value.</P><p class=tl>
For example, the dimension “Campaign” contains members that represent the various advertising campaigns. There are two measures associated with each campaign — the cost of the campaign and the revenues resulting from the campaign. To find the correlation between the cost of the campaign and the revenues that it generates, you use the regression line y = ax + b, where <i>x </i>is the cost and <i>y</i> is the revenue. The <i>a</i> and <i>b</i> values are calculated by using:</P><pre><code>a = LinRegCoef(Campaigns.Members, Revenues, Cost)
b = LinRegConst(Campaigns.Members, Revenues, Cost)
</code></pre>
<p class=tl>
For another example, you can find the trend in Sales for the sales of the last nine periods and forecast the next period:</P><pre><code>a = LinRegSlope(LastPeriods(9), Sales)
b = LinRegIntercept(LastPeriods(9), Sales)
NextPeriod = LinRegPoint(10, LastPeriods(9), Sales)
</code></pre>
</font></BODY>
</HTML>

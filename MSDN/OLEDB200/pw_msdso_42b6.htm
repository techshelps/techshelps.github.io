<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DataSourceListener</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbpwk_sdkdatasourcelistener"></a><sup></sup>DataSourceListener</h1>
<p>
The <b>DataSourceListener</b> methods described below should only be used when the provider is being written in Microsoft Visual Basic or Microsoft Visual J++. Implement the methods in your provider code using the appropriate <b>IDispatch</b> methods.</p>
<p>
There are instances where a consumer already has an interface to a data set supplied by the object, and the shape of the data set changes. For example, the number of columns changes, the name of the columns changes, the type of a column changes, or the entire data set is reordered (the result of a sort operation). In such an instance, there needs to be a way for the consumer to be notified of the change so it can retrieve a new interface on the (changed) data by using a call to <b>msDataSourceObject</b>. Consumers will do this by registering with the provider for a notification.</p>
<p>
The object must support a method whereby the consumer can register for receiving such notifications. The method has the following signature:</p>
<p>
<b>HRESULT addDataSourceListener(</b><br>
<b>[in] DataSourceListener</b><i>*pEvent</i><b>);</b></p>
<p>
<b>DataSourceListener</b> is defined as follows:</p>
<p>
<b>[ local, object, version(1.0) <br>
  uuid(7c0ffab2-cd84-11d0-949a-00a0c91110ed) ]</b></p>
<p>
<b>interface DataSourceListener : IUnknown</b></p>
<p>
<b>{</b><br>
<b>HRESULT dataMemberChanged([in] BSTR qualifier); </b><br>
<b>HRESULT dataMemberAdded([in] BSTR qualifier); </b><br>
<b>HRESULT dataMemberRemoved([in] BSTR qualifier); </b><br>
<b>}</b></p>
<p class=label>
<b>Notes</b>
<ul type=disc>
<li>
When a data change occurs, the object will call the <b>dataMemberChanged</b> method of the <b>DataSourceListener</b> to notify the consumer that the shape has changed. The object will pass the corresponding qualifier to the consumer. However, only the values NULL or "" are valid for the qualifier. <b>dataMemberAdded</b> and <b>dataMemberRemoved</b> are called to notify the consumer that a multiple-dataset-capable control has a new data set available or has removed a previously existing one. Because providers with multiple data sets are not currently supported, these events are ignored.<br><br></li>
<li>
A data consumer can notify a provider that it is no longer interested in data shape change notifications by calling <b>addDataSourceListener(NULL)</b>. Note that this precludes multi-casting event notifications but keeps requirements on controls simple.</li>
</ul>
</font></BODY>
</HTML>

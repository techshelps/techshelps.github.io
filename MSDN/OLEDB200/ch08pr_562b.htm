<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Index Rowsets</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbusing_index_rowsets"></a>Using Index Rowsets</h1>
<p>
Index implementations vary in their support of certain capabilities. Before an index rowset is created, consumers can determine the capabilities of the underlying index by calling <b>IDBSchemaRowset::GetRowset</b> for the INDEXES schema rowset. They can determine the capabilities of an index rowset to which they already have an interface pointer by calling <b>IRowsetIndex::GetIndexInfo</b>.</p>
<p>
To use an index rowset, a consumer usually performs the following actions:
<ol>
<li>
Creates an instance of a rowset over a base table and a rowset over an index designed for use with that base table.<br><br></li>
<li>
Calls <b>IColumnsInfo::GetColumnInfo</b> on the index rowset to determine which column contains the bookmarks that point to rows in the base table column. <p class=tl>
The ordinal of this column is greater than zero and the DBCOLUMNFLAGS_ISBOOKMARK flag is set on it. <b>GetColumnInfo</b> also returns the key columns in the order of most significant column to least significant column. The consumer can determine which columns are the key columns by inspecting the DBINDEXCOLUMNDESC structure returned by <b>GetIndexInfo</b>.</P></li>
<li>
(Optional) Calls <b>IRowsetIndex::SetRange</b> on the index rowset to set the range in which to search for key values in the index. If the consumer does not call <b>SetRange</b>, the index rowset will search the entire index.<br><br></li>
<li>
Calls <b>IRowsetIndex::Seek</b> on the index rowset to set the next fetch position to a specified key value. This key value must be in the range set in step 3, which is optional.<br><br></li>
<li>
Calls <b>IRowset::GetNextRows</b> on the index rowset to get the row or rows from the index starting with the key value specified in step 4. <b>GetNextRows</b> is limited to the range set in step 3, which is optional.<br><br></li>
<li>
Calls <b>IRowset::GetData</b> on the index rowset for each fetched row to get the bookmarks pointing to the base table rowset.<br><br></li>
<li>
Calls <b>IRowsetLocate::GetRowsByBookmark</b> on the base table rowset to retrieve the rows in that rowset that correspond to the index rows fetched in step 5. this occurs only if step 3, the call to <b>IRowsetIndex::SetRange</b> on the index rowset, was performed.</li>
</ol>
<p>
Because an index is a rowset, the consumer can treat it like any other rowset. For example, the consumer can call methods in <b>IRowsetChange</b> to add, delete, and update rows in the index.</p>
</font></BODY>
</HTML>

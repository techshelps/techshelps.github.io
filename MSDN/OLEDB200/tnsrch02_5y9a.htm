<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Postprocessing and New Dataset Specification</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="postprocessingnewdatasetspecification"></a>Postprocessing and New Dataset Specification</h1>
<p>
After obtaining a new dataset, the consumer typically wants to perform several operations on it, such as pivoting, changing dimension orientation, sorting, or rotation. In general, there are two approaches to accommodating such functionality:
<ul type=disc>
<li>
Treat each operation as a modification to the command specification. In this method, every operation results in the creation of a new dataset.<br><br></li>
<li>
Postprocessing, in which the consumer creates a dataset object from some command specification. Once the object is created, further user operations modify the dataset object, resulting in a change to the data manifold represented by the dataset. There is no need to create a new dataset or alter the original command specification that created the dataset.</li>
</ul>
<p>
OLE DB for OLAP takes the first approach. The primary reason is simplicity: Any operation that the user wants to perform on a dataset is necessarily a subset of the operations needed to create the dataset from the cube. By considering postprocessing operators as incremental changes to the original dataset specification, all the semantics of the command specification process (which have already been defined) can be leveraged. The postprocessing approach requires first identifying the postprocessing operators as a subset of the original command operators, then defining semantics for each of these operators, and so on. There is no significant functionality or ease-of-use gain for the consumer anyway.</p>
</font></BODY>
</HTML>

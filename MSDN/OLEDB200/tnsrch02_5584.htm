<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the OLE DB Command Object</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="usingoledbcommandobject"></a>Using the OLE DB Command Object</h1>
<p>
When you have an MDX statement that represents the desired dataset, the next step is to submit the query for execution. OLE DB for OLAP uses the existing infrastructure in OLE DB for query execution. This infrastructure takes the form of the command object. The command object has an interface called <b>ICommandText</b>, which has several methods that, when taken together, provide the ability to execute queries:
<ul type=disc>
<li>
<b>ICommand::SetCommandText</b> associates the query string with the command object.<br><br></li>
<li>
<b>ICommand::GetCommandText</b> gets the query string associated with the command object.<br><br></li>
<li>
<b>ICommand::Execute</b> executes the query associated with the command object.<br><br></li>
<li>
<b>ICommand::Cancel</b> attempts to cancel a currently executing query.<br><br></li>
<li>
<b>ICommand::GetDBSession</b> gets an interface pointer to the session object that created this command object.</li>
</ul>
<p>
Execution of an MDX statement usually results in the creation of a dataset, unless the application chooses to ask for a rowset object to be created (which represents a flattened dataset). For more information, see “Flattening a Dataset to Produce a Rowset.”</p>
</font></BODY>
</HTML>

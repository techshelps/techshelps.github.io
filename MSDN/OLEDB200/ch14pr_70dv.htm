<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Consumer Threading Responsibilities</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbconsumer_threading_responsibilities"></a>Consumer Threading Responsibilities</h1>
<p>
Free-threaded consumers have the following threading responsibilities:
<ul type=disc>
<li>
To call <b>CoInitializeEx</b> on each thread, with a null pointer as the first parameter and COINIT_MULTITHREADED as the second parameter, to initialize it as free-threaded.<br><br></li>
<li>
When passing interfaces to other threads, to transfer pointers directly only when:<ul type=disc>
<li>
the other thread is free-threaded, and <br><br></li>
<li>
the pointers correspond to free-threaded objects. </li>
</ul>
<p class=tl>
The set of threads initialized as free-threaded acts similarly to single big apartment, so pointers can be freely passed between these threads. To transfer a free-threaded object to a real apartment, it is recommended, although not required, to marshal the pointer at the source and unmarshal it at the destination. To transfer an apartment-threaded object to any free-threaded thread, it is necessary to marshal the pointer at the source and unmarshal it at the destination.</P></li>
</ul>
<p>
Apartment-threaded consumers have the following threading responsibilities:
<ul type=disc>
<li>
To implement a message queue.<br><br></li>
<li>
To call <b>CoInitialize</b> or <b>OLEInitialize</b> on the thread.<br><br></li>
<li>
To always marshal pointers of OLE DB (and other OLE) objects to other apartments by using <b>CoMarshalInterface</b> and <b>CoUnmarshalInterface</b> calls. Calls to these methods trigger the deployment of proxies and stubs by the COM infrastructure. Well-behaved apartment-model consumers may interact efficiently with free-threaded servers if the free-threaded server aggregates with a generic free-threaded marshaler that COM supplies by using <b>CoCreateFreeThreadedMarshaler</b>.</li>
</ul>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Schema Rowset</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="creatingschemarowset"></a>Creating a Schema Rowset</h1>
<p>
This example creates a schema rowset that represents the dimensions schema. This function returns an <b>IRowset</b> interface pointer for the schema rowset.</p>
<pre><code>//
HRESULT MDPSchemaSample(IDBSchemaRowset* pIDBSchemaRowset, 
                        IUnknown** ppIUnknown)
{
   HRESULT hr;
   assert(*ppIUnknown == NULL);

   IDBSchemaRowset *pIDBSchemaRowset = NULL;
   hr = pIUnknown-&gt;QueryInterface(IID_IDBSchemaRowset, 
      (void **) &amp;pIDBSchemaRowset);

   // Get a list of the schemas supported by the provider
   GUID *rgSchemas = NULL;
   ULONG *rgRestrictionSupport = NULL;
   ULONG cSchemas;
   hr = pIDBSchemaRowset-&gt;GetSchemas( &amp;cSchemas, &amp;rgSchemas, 
      &amp;rgRestrictionSupport );

   // Create a rowset that represents the dimensions.Check if 
   // MDSCHEMA_DIMENSIONS is in the list returned by GetSchemas()
   ULONG cRestrictions = 0;
   BOOL bSchemaSupported = FALSE;
   for (ULONG i=0; i &lt; cSchemas; i++)
   {
      if (rgSchemas[i] == MDSCHEMA_DIMENSIONS)
      {
         bSchemaSupported = TRUE;
         cRestrictions = rgRestrictionSupport[i];
      }
   }
   if (bSchemaSupported)
   {
      IDBCreateCommand *pIDBCreateCommand = NULL;
      VARIANT rgRestrictions[MAX_RESTRICTIONS];

      // Initialize the restrictions
      for (ULONG j=0; j &lt; cRestrictions; j++)
         VariantInit( &amp;rgRestrictions[j] );

      rgRestrictions[CUBE_NAME].bstrVal = SysAllocString( 
                                 L"Video Store Sales");
      rgRestrictions[CUBE_NAME].vt = VT_BSTR;
      assert(rgRestrictions[CUBE_NAME].bstrVal);

      rgRestrictions[DIMENSION_NAME].bstrVal = 
         SysAllocString( L"Customer Location");
      rgRestrictions[DIMENSION_NAME].vt = VT_BSTR;
      assert(rgRestrictions[DIMENSION_NAME].bstrVal);

      // Create a schema rowset for the "Customer Location" dimension
      hr = pIDBSchemaRowset-&gt;GetRowset(NULL, MDSCHEMA_DIMENSIONS,
                  cRestrictions, rgRestrictions, IID_IRowset, 0, NULL, 
                  (IUnknown **)ppIUnknown ));

      // free the restrictions
      for (j=0; j &lt; cRestrictions; j++)
         VariantClear(&amp;rgRestrictions[j]);
   }

   if (rgSchemas) CoTaskMemFree(rgSchemas);
   if (rgRestrictionSupport) CoTaskMemFree(rgRestrictionSupport);
   if (pIDBSchemaRowset) pIDBSchemaRowset-&gt;Release();
   return hr;
}
</code></pre>
</font></BODY>
</HTML>

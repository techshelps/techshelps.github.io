<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICommandWithParameters</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="icommandwithparameters"></a>ICommandWithParameters</h1>
<p>
This section describes Jet-specific implementation of the <b>ICommandWithParameters</b> interfaces. This includes <b>ICommandWithParameters::GetParameterInfo</b>, <b>ICommandWithParamaters::MapParameterInfo</b>, and <b>ICommandWithParameters::SetParameterInfo</b>.</p>
<p>
This interface encapsulates parameters. Parameters are scalar values, or a vector of scalar values, typically expressed in predicates but possibly supported by many providers in any scalar expression. </p>
<p>
For scalar parameters of prepared commands, there is a presumption that different parameter values do not require different plans. In other words, a single preparation and its resulting plan are satisfactory for all possible values of scalar parameters.</p>
<p>
Parameter values are set when a command is executed. Methods are included here to offer a means for setting and obtaining a list of parameters and their types. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Method</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>GetParameterInfo</b></td>
<td width=50%>Gets a list of the command’s parameters, their names and their types.</td>
</tr>
<tr valign=top>
<td width=50%><b>MapParameterNames</b></td>
<td width=50%>Returns an array of column ordinals when given named parameters.</td>
</tr>
<tr valign=top>
<td width=50%><b>SetParameterInfo</b></td>
<td width=50%>Specifies the native data type of each parameter.</td>
</tr>
</table><br>
<h3>ICommandWithParameters::GetParameterInfo</h3>
<p>
Gets a list of the command’s parameters, their names, and their types. For information on how this interface is implemented, see the <i>OLE DB Programmer’s Reference</i>.</p>
<h3>ICommandWithParameters::MapParameterNames</h3>
<p>
Returns an array of column ordinals when given named parameters. For information on how this interface is implemented, see the <i>OLE DB Programmer’s Reference</i>.</p>
<h3>ICommandWithParameters::SetParameterInfo</h3>
<p>
Specifies the native data type of each parameter. For information on how this interface is implemented, see the <i>OLE DB Programmer’s Reference</i>.</p>
</font></BODY>
</HTML>

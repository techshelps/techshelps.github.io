<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Instance of a Data Source Directly by Using the Provider's CLSID</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="creatinginstanceofdatasourcedirectlybyusingprovidersclsid"></a>Creating an Instance of a Data Source Directly by Using the Provider's CLSID</h1>
<p>
This example connects directly to a specific MDP by using the provider’s unique class identifier, in this case represented by CLSID_GENOLAP. After obtaining an IID_IDBSchemaRowset pointer, this function proceeds to call the function <b>MDPSchemaSample()</b> (the code for which appears in the next section) in order to traverse the schema rowset for the MDP data source.</p>
<pre><code>//
HRESULT MDPConnectUsingClsId(void)
{
   HRESULT hr;

   // Initialize property values
   for (ULONG i=0; i &lt; NUMELEM(rgProperties); i++)
      VariantInit(&amp;rgProperties[i].vValue);

   // Create the instance of the MSOLAP provider
   IDBInitialize *pIDBInitialize = NULL;
   hr = CoCreateInstance(CLSID_MSOLAP, NULL, CLSCTX_INPROC_SERVER, 
      IID_IDBInitialize, (LPVOID*)&amp;pIDBInitialize);

   IDBProperties *pIDBProperties = NULL;
   hr = pIDBInitialize-&gt;QueryInterface(IID_IDBProperties, (void **)
                  &amp;pIDBProperties);

   // Identify property set
   DBPROPSET rgPropertySet[1];
   DBPROP      rgProperties[1];
   rgPropertySet[0].rgProperties    = rgProperties;
   rgPropertySet[0].cProperties   = 1;
   rgPropertySet[0].guidPropertySet = DBPROPSET_DBINIT;

   // Fill in data source
   rgProperties[0].dwPropertyID = DBPROP_INIT_DATASOURCE;
   rgProperties[0].dwOptions = DBPROPOPTIONS_REQUIRED;
   rgProperties[0].colid = DB_NULLID;
   rgProperties[0].vValue.vt = VT_BSTR;
   rgProperties[0].vValue.bstrVal   = SysAllocString(L"LocalHost");
   assert(rgProperties[0].vValue.bstrVal);

   hr = pIDBProperties-&gt;
         SetProperties(NUMELEM(rgPropertySet), rgPropertySet);

   // Initialize and create the session.
   hr = pIDBInitialize-&gt;Initialize();

   IDBCreateSession *pIDBCreateSession = NULL;
   hr = pIDBInitialize-&gt;
      QueryInterface(IID_IDBCreateSession, 
         (void **) &amp;pIDBCreateSession);

   IDBSchemaRowset *pIDBSchemaRowset = NULL;
   hr = pIDBCreateSession-&gt;CreateSession(NULL, IID_IDBSchemaRowset, 
      (IUnknown **) &amp;pIDBSchemaRowset);

   IRowset* pIRowset = NULL;
   hr = MDPSchemaSample(pIDBSchemaRowset, (IUnknown**)pIRowset);

   if (pIDBInitialize) pIDBInitialize-&gt;Release();
   if (pIDBProperties) pIDBProperties-&gt;Release();
   if (pIDBCreateSession) pIDBCreateSession-&gt;Release();
   if (pIDBSchemaRowset) pIDBSchemaRowset-&gt;Release();
   if (pIRowset) pIRowset-&gt;Release();
   return hr;
}
</code></pre>
</font></BODY>
</HTML>

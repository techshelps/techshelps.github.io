<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Status</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbstatus"></a>Status</h1>
<p>
The status indicates whether the data value or some other value, such as a NULL, is to be used as the value of the column or parameter. If the data value is to be used, the consumer sets the status to DBSTATUS_S_OK on input. On output, the provider returns information about whether the consumer was able to set or get the value.</p>
<p>
If the data value is not to be used, the status is set to DBSTATUS_S_ISNULL or DBSTATUS_S_DEFAULT. DBSTATUS_S_ISNULL indicates that a NULL value is to be used for the column or parameter; the data value and length are ignored. DBSTATUS_S_DEFAULT indicates that the default value of an input or input/output parameter in a procedure is to be used on input. The data value and length are ignored on input. However, they are used on output for an input/output parameter.</p>
<h1>Status Values Used When Getting Data</h1>
<p>
To get rowset or output parameter data, use <b>ICommand::Execute</b>, <b>IMultipleResults::GetResults</b>, <b>IRowset::GetData</b>, <b>IRowsetRefresh::GetLastVisibleData</b>, and <b>IRowsetUpdate::GetOriginalData</b>. As the provider returns the data, it sets the status of each column or output parameter so the consumer can determine which data values it got successfully. It produces the return codes as follows:
<ul type=disc>
<li>
<b>Success return code (generally S_OK)</b>—No errors occurred while getting data for any columns or parameters. Warning conditions may have occurred for any columns or parameters.<p class=atl>
<B><b>Note&nbsp; </b></B> Truncation is a warning condition when getting data. The corresponding status is set to DBSTATUS_S_TRUNCATED.</p></li>
<li>
<b>DB_S_ERRORSOCCURRED</b>—Errors occurred while getting data for one or more columns or parameters but data was successfully returned for at least one column or parameter. Warning conditions may have occurred for any nonerror columns or parameters. <br><br></li>
<li>
<b>DB_E_ERRORSOCCURRED</b>—Errors occurred while getting data for all columns or parameters. Warning conditions did not occur for any columns or parameters.</li>
</ul>
<p>
If the provider returns a fatal error other than DB_E_ERRORSOCCURRED, such as E_FAIL, the returned status values are undefined. If the consumer did not bind the status for a column or output parameter and the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that the value for that column or output parameter was not successfully returned.</p>
<p>
The following table explains the meaning of each returned status value, whether it is a success, error, or warning condition, and whether data was successfully returned.</p>
<p class=label>
<b>Status values for returned data</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=29%><b><br>
Status value </b></td>
<td class=label width=17%><b>Success, warning, <br>
or error</b></td>
<td class=label width=13%><b>Data<br>
returned</b></td>
<td class=label width=41%><b><br>
Description </b></td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_S_OK</td>
<td width=17%>Success</td>
<td width=13%>Y</td>
<td width=41%>The provider returned a non-NULL value.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_S_ISNULL</td>
<td width=17%>Success</td>
<td width=13%>Y</td>
<td width=41%>The provider returned a NULL value.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_S_<br>
TRUNCATED</td>
<td width=17%>Warning</td>
<td width=13%>Y</td>
<td width=41%>Variable-length data or nonsignificant digits of numeric data were truncated.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
BADACCESSOR</td>
<td width=17%>Error</td>
<td width=13%>N</td>
<td width=41%>Accessor validation was deferred and was performed while the method returned data. The binding was invalid for this column or parameter.<p>
For a description of the cases that may cause deferred accessor validation to fail, see the description of the DBBINDSTATS values listed under the rgStatus argument of CreateAccessor.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
CANTCONVERTVALUE</td>
<td width=17%>Error</td>
<td width=13%>N</td>
<td width=41%>The data value couldn't be converted for reasons other than sign mismatch or data overflow. For example, the data was corrupted in the data source but the row was still retrievable.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
CANTCREATE</td>
<td width=17%>Error</td>
<td width=13%>N</td>
<td width=41%>One of the following conditions:<p>
The provider could not allocate memory in which to return data.</p>
<p>
The type indicator for the column was DBTYPE_IUNKNOWN and a storage object was already open on the column.</p>
<p>
The type indicator for the column was DBTYPE_IUNKNOWN, the provider supports only one open storage object at a time (DBPROP_<br>
MULTIPLESTORAGEOBJECTS was VARIANT_FALSE), and a storage object was already open on the rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
DATAOVERFLOW</td>
<td width=17%>Error</td>
<td width=13%>N</td>
<td width=41%>Conversion failed because the data value overflowed the type specified for the value part in the consumer's buffer.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
SIGNMISMATCH</td>
<td width=17%>Error</td>
<td width=13%>N</td>
<td width=41%>Conversion failed because the data value was signed and the type specified for the value part in the consumer's buffer was unsigned.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
UNAVAILABLE</td>
<td width=17%>Error</td>
<td width=13%>N</td>
<td width=41%>The provider could not determine a value. For example, the row was just created, the default for the column was not available, and the consumer had not yet set a new value.</td>
</tr>
</table><br>
<h1>Status Values Used When Setting Data</h1>
<p>
To set rowset or input parameter data, use<b> ICommand::Execute</b>, <b>IRowsetChange::SetData</b>, <b>IRowsetChange::InsertRow</b>, <b>IRowsetIndex::Seek</b>, and <b>IRowsetIndex::SetRange</b>. When using these methods, the consumer must set the status to one of the following values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=33%><b>Status value </b></td>
<td class=label width=67%><b>Description </b></td>
</tr>
<tr valign=top>
<td width=33%>DBSTATUS_S_OK</td>
<td width=67%>The value sent to the provider is not NULL and is passed in the consumer's buffer at the offset specified by <i>obValue</i> in the binding.</td>
</tr>
<tr valign=top>
<td width=33%>DBSTATUS_S_ISNULL</td>
<td width=67%>The value sent to the provider is NULL. The provider ignores the contents of the value and length parts of the consumer's buffer.</td>
</tr>
<tr valign=top>
<td width=33%>DBSTATUS_S_<br>
DEFAULT</td>
<td width=67%>The provider is to use the default value in <b>SetData </b>or <b>InsertRow,</b> or use it as the input value for an input or input/output parameter in a procedure. The provider ignores the contents of the value and the length parts of the consumer's buffer on input, although it uses them on output for input/output parameters. This value is never returned when getting data. If the provider can determine the default value, that value is returned along with a status of DBSTATUS_S_OK if the default is non-null, or DBSTATUS_S_ISNULL if the default is null. If the provider cannot determine the default value, it returns DBSTATUS_E_UNAVAILABLE when calling GetData for columns set as DBSTAUS_S_DEFAULT. Note that consumers should be prepared for 1.0 or 1.1 providers to return DBSTATUS_E_BADSTATUS when attempting to specify DBSTATUS_S_DEFAULT in <b>SetData</b> or <b>InsertRow</b>.</td>
</tr>
<tr valign=top>
<td width=33%>DBSTATUS_S_IGNORE</td>
<td width=67%>The provider is to skip this column when setting data. The provider ignores the contents of the value and the length parts of the consumer's buffer for this column and does not change the underlying column value. DBSTATUS_S_IGNORE is not valid for parameters, and returns DBSTATUS_E_BADSTATUS. Consumers should use DBSTATUS_S_DEFAULT to pass default values as parameters. Consumers should be prepared for 1.x providers to return DBSTATUS_E_BADSTATUS when attempting to specify DBSTATUS_S_IGNORE in <b>SetData</b> or <b>InsertRow</b>.</td>
</tr>
</table><br>
<p>
As the provider transfers data from the consumer to the provider, it sets the status of each column or input parameter so that the consumer can determine which data values were successfully set. It produces return codes as follows:
<ul type=disc>
<li>
<b>Success return code (usually S_OK)</b>—No errors occurred while setting data for any columns or parameters.<br><br></li>
<li>
<b>DB_S_ERRORSOCCURRED</b>—Errors occurred while setting data for one or more columns or parameters but data was successfully set for at least one column or parameter.<p class=atl>
<B><b>Note&nbsp; </b></B> Truncation is an error condition when setting data. The corresponding status is set to DBSTATUS_E_CANTCONVERTVALUE.</p></li>
<li>
<b>DB_E_ERRORSOCCURRED</b>—Errors occurred while setting data for all columns or parameters.</li>
</ul>
<p>
If the provider returns a fatal error other than DB_E_ERRORSOCCURRED, such as E_FAIL, the returned status values are undefined. If the consumer did not bind the status for a column or input parameter and the method returns DB_S_ERRORSOCCURRED or DB_E_ERRORSOCCURRED, the consumer must assume that the value for that column or input parameter was not successfully set.</p>
<p>
The following table explains the meaning of each returned status value, whether it is a success or error condition, and whether data was successfully sent.</p>
<p class=label>
<b>Returned status values for sent data</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=29%><b><br>
Status value </b></td>
<td class=label width=17%><b>Success, warning, <br>
or error</b></td>
<td class=label width=9%><b>Data<br>
sent</b></td>
<td class=label width=45%><b><br>
Description </b></td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_S_OK</td>
<td width=17%>Success</td>
<td width=9%>Y</td>
<td width=45%>A non-NULL value was sent to the provider.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_S_ISNULL</td>
<td width=17%>Success</td>
<td width=9%>Y</td>
<td width=45%>A NULL value was sent to the provider.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_S_<br>
DEFAULT</td>
<td width=17%>Success</td>
<td width=9%>Y</td>
<td width=45%>The provider used the default value for an input parameter in a procedure. If the provider used the default value on input for an input/output parameter, the status is set to the status of the output value on output.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
BADACCESSOR</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>Accessor validation was deferred and was performed while the method sent data. The binding was invalid for this column or parameter.<p>
For a description of the cases that may cause deferred accessor validation to fail, see the description of the DBBINDSTATS values listed under the <b><i>rgStatus</i></b> argument of CreateAccessor.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
BADSTATUS</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>One of the following conditions:<ul type=disc>
<li>
The status value sent to the provider was not DBSTATUS_S_OK, DBSTATUS_S_ISNULL, DBSTATUS_S_IGNORE, or DBSTATUS_S_DEFAULT.<br><br></li>
<li>
The status value was DBSTATUS_S_DEFAULT and the binding was not used in <b>SetData</b>, <b>InsertData</b>, or for an input or input/output parameter in a procedure.<br><br></li>
<li>
The status value was DBSTATUS_S_DEFAULT, the binding was not for an input or input/output parameter in a procedure, and the provider was a 1.0 or a 1.1 provider.<br><br></li>
<li>
The binding used in <b>SetData</b> only contained the status part and the status value was not DBSTATUS_S_ISNULL.<br><br></li>
<li>
The status value sent to the provider was DBSTATUS_S_IGNORE and the binding was for a parameter in a procedure.<br><br></li>
<li>
The status value sent to a provider was DBSTATUS_IGNORE and the provider was a 1.x provider.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
CANTCONVERTVALUE</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>The data value couldn't be converted for reasons other than sign mismatch or data overflow. For example, converting the data would have truncated it, including truncating nonsignificant digits in numeric data.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
CANTCREATE</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>One of the following conditions:<p>
The type indicator for the column was DBTYPE_IUNKNOWN and a storage object was already open on the column.</p>
<p>
The type indicator for the column was DBTYPE_IUNKNOWN, the provider supports only one open storage object at a time (DBPROP_<br>
MULTIPLESTORAGEOBJECTS was VARIANT_FALSE), and a storage object was already open on the rowset.</p>
</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
DATAOVERFLOW</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>Conversion failed because the data value overflowed the type used by the provider.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
INTEGRITYVIOLATION</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>The data value violated the integrity constraints for the column.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
PERMISSIONDENIED</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>The DBPROP_COLUMNRESTRICT property was VARIANT_TRUE and the user did not have permission to write to the column.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
SCHEMAVIOLATION</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>The data value violated the schema for the column.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
SIGNMISMATCH</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>Conversion failed because the data value was signed and the type used by the provider was unsigned.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
UNAVAILABLE</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%>The value was not sent for an undetermined reason. For example, the provider encountered an error while sending a column or parameter value and stopped processing. If the provider backs out changes it made before the error, it also sets the status of the columns from which it backs data out to DBSTATUS_E_UNAVAILABLE.</td>
</tr>
<tr valign=top>
<td width=29%>DBSTATUS_E_<br>
UNAVAILABLE</td>
<td width=17%>Error</td>
<td width=9%>N</td>
<td width=45%><ul type=disc>
<li>
One of the following conditions: <br><br></li>
<li>
The consumer did not bind the value part of the data, the status was DBSTATUS_S_OK, and <b>IColumnsInfo::GetColumnInfo</b> did not return the DBCOLUMNFLAGS_ISLONG flag for the column.<br><br></li>
<li>
The consumer did not bind the length part of the data, the status was DBSTATUS_S_OK, and <i>wType</i> in the DBBINDING structure was DBTYPE_BYTES.</li>
</ul>
</td>
</tr>
</table><br>
</font></BODY>
</HTML>

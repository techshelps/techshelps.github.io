<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Committing or Aborting a Transaction Object</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbcommitting_or_aborting_a_transaction_object"></a>Committing or Aborting a Transaction Object</h1>
<p>
The transaction object supports <b>ITransaction</b> for committing or aborting a transaction directly. This enables the consumer to commit or abort at other than the current (lowest) level of a nested transaction. Calling <b>ITransactionLocal::Commit</b> or <b>ITransactionLocal::Abort</b> on the session is equivalent to calling <b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> on a transaction object associated with the current transaction.</p>
<p>
Calling <b>Commit</b> or <b>Abort</b> on the transaction object with the <i>fRetaining</i> flag set to TRUE implicitly begins a new unit of work and the transaction object remains valid. Calling <b>Commit</b> or <b>Abort</b> with <i>fRetaining</i> set to FALSE terminates the transaction and the transaction object enters a zombie state. At this point, the only valid action that can be performed on the transaction object is to release it.</p>
</font></BODY>
</HTML>

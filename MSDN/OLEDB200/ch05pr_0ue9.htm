<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Changing Data</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbchanging_data"></a>Changing Data</h1>
<p>
Consumers change data by calling the methods <b>SetData</b>, <b>DeleteRows</b>, and <b>InsertRow</b> in <b>IRowsetChange</b>. These methods change the data for a row in the rowset's copy of the row. Whether the method immediately transmits these changes to the data source depends on whether the rowset exposes <b>IRowsetUpdate</b>.</p>
<p>
If the rowset does not expose <b>IRowsetUpdate</b>, it is said to be in <i>immediate update mode</i>. In immediate update mode, the methods in <b>IRowsetChange</b> <i>transmit</i> changes to the data source, where they become visible to other transactions running at the Read Uncommitted transaction isolation level. Such changes are <i>transmitted changes</i>.</p>
<p>
If the rowset exposes <b>IRowsetUpdate</b>, it is in <i>delayed update mode</i>. In delayed update mode, the methods in <b>IRowsetChange</b> do not transmit changes to the data source. Instead, they buffer the changes in the rowset; such changes are <i>pending changes</i>. While changes are pending, they are wholly local to the rowset and therefore not visible to other transactions, even those running at the Read Uncommitted isolation level.</p>
<p>
To transmit pending changes to the data source, the consumer calls <b>IRowsetUpdate::Update</b>. As in immediate update mode, such changes then become visible to other transactions running at the Read Uncommitted transaction isolation level and are <i>transmitted changes</i>.</p>
<p>
If the rowset was created in the context of a transaction, the consumer can commit or abort transmitted changes by calling <b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> to commit or abort them. Committed changes become visible to other transactions running at the Read Committed transaction isolation level. If the consumer commits or aborts transmitted changes and there are still pending changes, then what happens to those pending changes depends on the DBPROP_COMMITPRESERVE and DBPROP_ABORTPRESERVE properties. For more information, see "Rowset Preservation" in "<a href="ch12pr_0cs2.htm">Commit and Abort Behavior</a>" in Chapter 12.</p>
<p>
The following figure shows how the methods in <b>IRowsetChange</b>, <b>IRowsetUpdate</b>, and <b>ITransaction</b> move data.</p>
<p class=label>
<b>IRowsetChange, IRowsetUpdate, and ITransaction methods moving data</b></p>
<p>
<img src="ch0501.gif" border=0></p>
<p>
To get a read-only rowset, the consumer does not request <b>IRowsetChange</b> or <b>IRowsetUpdate</b> as a property of the rowset.</p>
</font></BODY>
</HTML>

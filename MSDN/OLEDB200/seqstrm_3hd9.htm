<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISequentialStream</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbisequentialstream"></a>ISequentialStream</h1>
<p>
<b>ISequentialStream</b> is the preferred minimal interface for reading and writing Binary Large Object (BLOB) data in OLE DB. <b>ISequentialStream</b> is a subset of the OLE <b>IStream</b> interface, and provides forward-only reading and writing of data. The <b>IStream</b> interface inherits its Read and Write methods from <b>ISequentialStream</b>.</p>
<h1>When to Implement</h1>
<p>
You can implement <b>ISequentialStream</b> on an object if you require simple sequential access to a stream object. If you implement <b>IStream</b>, you must provide an implementation of the Read and Write methods from <b>ISequentialStream</b>.</p>
<p>
<b>Note&nbsp;&nbsp;&nbsp;</b>Most applications do not implement <b>ISequentialStream</b> as a separate interface, and you are not required to provide it separately even if you provide an <b>IStream</b> implementation. For example, the compound file implementation of structured storage does not succeed on a <b>QueryInterface</b> for <b>ISequentialStream</b> but it includes the Read and Write methods through the <b>IStream</b> interface pointer. The same is true for the NTFS Native Structured Storage implementation.</p>
<h1>When to Call</h1>
<p>
Call the methods of the <b>ISequentialStream</b> interface from a container or application to perform sequential reads and writes of data. Most applications call the Read and Write methods through the <b>IStream</b> interface.</p>
<h1>Methods in Vtable Order</h1>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=595>
<tr valign=top>
<td class=label width=50%><b>IUnknown Methods</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>QueryInterface</b></td>
<td width=50%>Returns pointers to supported interfaces.</td>
</tr>
<tr valign=top>
<td width=50%><b>AddRef</b></td>
<td width=50%>Increments the reference count.</td>
</tr>
<tr valign=top>
<td width=50%></td>
<td width=50%>Decrements the reference count.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=595>
<tr valign=top>
<td class=label width=49%><b>ISequentialStream Methods</b></td>
<td class=label width=51%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=49%><b>Read</b></td>
<td width=51%>Reads a specified number of bytes from the stream object into memory, starting at the current seek pointer.</td>
</tr>
<tr valign=top>
<td width=49%><b>Write</b></td>
<td width=51%>Writes a specified number of bytes to the stream object, starting at the current seek pointer.</td>
</tr>
</table>
</font></BODY>
</HTML>

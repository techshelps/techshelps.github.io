<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Limitations</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbpwk_limitations"></a><sup></sup>Limitations</h1>
<p>
The OLE DB Simple Provider Toolkit exposes core OLE DB interfaces and capabilities, and is geared toward making less complex data environments OLE DB compliant. You should evaluate whether the Simple Provider Toolkit is capable of giving you the kinds of data and the functionality that you want in an OLE DB data provider. To guide you in this assessment, see the <a href="pw_ioledb_541f.htm">OLE DB Supported Interfaces</a> section, which lists the interfaces exposed by the <a href="pw_toverview_4fxz.htm#oledbpwk_oledbmappinglayer">Simple Provider DLL</a>.</p>
<p>
If you require greater functionality than can be achieved with the Toolkit, or you are working over complex data, consider building an OLE DB provider using Microsoft Visual C++ rather than with the OSP interfaces. For example, providers built with the Toolkit do not support command capability. If your provider must accept commands, then you should consider building it using the OLE DB C++ interface. Although writing providers with Microsoft Visual C++ involves a greater development effort, the providers you write will afford you greater extensibility and a richer set of OLE DB data manipulation routines.</p>
</font></BODY>
</HTML>

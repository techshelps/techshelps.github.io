<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AddProp</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="addprop"></a>AddProp</h1>
<pre><code>HRESULT AddProp(
const WCHAR* wszName, 
VARTYPE vtType, 
long lOffset, 
void *pDefValue);</code></pre>
<p class=label>
</p>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>wszName</i></p>
<p class=indent>
Pointer to the property name, used for PropertyBag persisting. This pointer must be constant data and must not change during the lifetime of the object. </p>
<p class=dt>
<i>wtType</i></p>
<p class=indent>
Variant data type of the property. The following property types are supported.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=571>
<tr valign=top>
<td class=label width=35%><b>Property type</b></td>
<td class=label width=65%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=35%>VT_BOOL</td>
<td width=65%>Use for properties of VARIANT_BOOL.</td>
</tr>
<tr valign=top>
<td width=35%>VT_I2</td>
<td width=65%>Use for numeric properties of type short.</td>
</tr>
<tr valign=top>
<td width=35%>VT_I4</td>
<td width=65%>Use for numeric properties of type long or integer.</td>
</tr>
<tr valign=top>
<td width=35%>VT_R4</td>
<td width=65%>Use for numeric properties of type float.</td>
</tr>
<tr valign=top>
<td width=35%>VT_R8</td>
<td width=65%>Use for numeric properties of type double.</td>
</tr>
<tr valign=top>
<td width=35%>VT_LPWSTR</td>
<td width=65%>Use for wide string properties.</td>
</tr>
<tr valign=top>
<td width=35%>VT_LPSTR</td>
<td width=65%>Use for ANSI/multibyte string properties.</td>
</tr>
<tr valign=top>
<td width=35%>VT_BSTR</td>
<td width=65%>Use for BSTR string properties (Basic strings).</td>
</tr>
<tr valign=top>
<td width=35%>VT_UNKNOWN</td>
<td width=65%>Use for interface properties that support <b>IPersistStream</b> and <b>IPersistPropertyBag</b> and are co-creatable. For example, <b>IFont</b> and <b>IPicture </b>are interfaces that meet these requirements.</td>
</tr>
</table><br>
<p class=dt>
<i>lOffset</i></p>
<p class=indent>
Offset to property in the user data buffer. This is unique among the properties. If a property is already added with the same offset, then the latter add will replace the former.</p>
<p class=dt>
<i>pDefValue</i></p>
<p class=indent>
The default value of the property. Properties are not persisted if the current value matches the default value. Depending on the property data type, this argument is interpreted as follows.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=571>
<tr valign=top>
<td class=label width=33%><b>Property type</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>VT_BOOL</td>
<td width=67%>Pointer to VARIANT_BOOL; the value is copied.</td>
</tr>
<tr valign=top>
<td width=33%>VT_I2</td>
<td width=67%>Pointer to a short; the value is copied.</td>
</tr>
<tr valign=top>
<td width=33%>VT_I4</td>
<td width=67%>Pointer to a long; the value is copied.</td>
</tr>
<tr valign=top>
<td width=33%>VT_R4</td>
<td width=67%>Pointer to a float; the value is copied.</td>
</tr>
<tr valign=top>
<td width=33%>VT_R8</td>
<td width=67%>Pointer to a double; the value is copied.</td>
</tr>
<tr valign=top>
<td width=33%>VT_LPWSTR</td>
<td width=67%>Pointer to the string data; the pointer is stored and referenced as needed.</td>
</tr>
<tr valign=top>
<td width=33%>VT_LPSTR</td>
<td width=67%>Pointer to the string data; the pointer is stored and referenced as needed.</td>
</tr>
<tr valign=top>
<td width=33%>VT_BSTR</td>
<td width=67%>Pointer to the string data; the pointer is stored and referenced as needed.</td>
</tr>
<tr valign=top>
<td width=33%>VT_UNKNOWN</td>
<td width=67%>Pointer to a CLSID; the pointer is stored and referenced as needed.</td>
</tr>
</table><br>
<p class=label>
</p>
<p class=label>
<b>Returns</b></p>
<p class=dt>
S_OK</p>
<p class=indent>
Method succeeded.</p>
<p>
E_OUTOFMEMORY <br>
Returned if allocation failed. </p>
<p>
E_INVALIDARG <br>
Returned if the Variant type is not supported.</p>
<p class=label>
<b>Comments</b></p>
<p>
Adds a property to the persistence collection.</p>
<p>
For VT_UNKNOWN, <i>pDefValue</i> must point to an IID for the interface object. After a load, the <b>IUnknown</b> is QI for the interface identified by the given IID, and is stored at the specified offset in the user buffer.</p>
<p>
Property offsets are offsets within a contiguous buffer kept by the caller. A property offset can be an offset to a data member within a class or a data member within a structure. Regardless, for each <b>CPersistProperties</b> collection, the offsets must be within the same buffer. The buffer and the buffer size are passed to the <b>Load</b> and <b>Save</b> methods for persistence.</p>
</font></BODY>
</HTML>

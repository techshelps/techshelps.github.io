<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting and Setting IPersist* Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbgetting_and_setting_ipersist_objects"></a>Getting and Setting IPersist* Objects</h1>
<p>
The following sections explain how to get and set IPersist* objects.</p>
<h1>Getting IPersist* Objects</h1>
<p>
To get an IPersist* object from a column, a consumer performs the following actions:
<ol>
<li>
Creates an accessor that includes a binding to the column. It sets the <i>wType</i> element of the DBBINDING structure to DBTYPE_IUNKNOWN and sets the <i>iid</i> element of the DBOBJECT structure in the binding to the needed interface.<br><br></li>
<li>
Calls <b>IRowset::GetData</b>, <b>IRowsetRefresh::GetLastVisibleData</b>, or <b>IRowsetUpdate::GetOriginalData</b>.</li>
</ol>
<p>
If the object is not currently loaded, the provider, in turn:
<ol>
<li>
Creates an instance of the IPersist* object and obtains an <b>IPersistStorage</b>, <b>IPersistStreamInit</b>, or <b>IPersistStream</b> pointer on it. For example, it might call <b>CoCreateInstance</b> with <i>rclsid</i> set to the class ID of the object and <i>riid</i> set to IID_IPersistStorage. How the provider determines the class ID of the object is provider-specific. For more information, see "<a href="ch07pr_6e0j.htm">IPersist* Objects</a>," earlier in this chapter.<br><br></li>
<li>
Creates an <b>IStream</b> or <b>IStorage</b> instance over the data in the column. If there is no data in the column, as is the case for a newly created row, the provider then calls <b>InitNew</b> on either <b>IPersistStorage</b> or <b>IPersistStreamInit</b>. <p class=tl>
If the provider supports only a single open storage object at a time and another storage object is open, the method returns a status of DBSTATUS_E_CANTCREATE for the column.</P></li>
<li>
Loads the <b>IPersist*</b> object by calling <b>Load</b> on the <b>IPersist*</b> interface on the object and passing the interface pointer obtained in step 2.<br><br></li>
<li>
Performs the operations required to enable future calls to the method to detect that the object has already been loaded (for example, using a moniker to the object) and to return a pointer on the loaded object.<br><br></li>
<li>
Returns a pointer to the requested interface to the consumer. If the object does not support the requested interface, the method returns E_NOINTERFACE. After the method returns, the rowset does not hold any reference counts on the object.</li>
</ol>
<p>
If the object is currently loaded—which the provider can determine by virtue of the operations performed in step 4 in the preceding procedure—the provider performs the following action:
<ul type=disc>
<li>
Returns a pointer to the requested interface to the consumer. <br><br></li>
<li>
If the object does not support this interface, the method returns E_NOINTERFACE.</li>
</ul>
<p>
If any errors occur during these procedures, the provider ensures that no objects remain instantiated when <b>GetData</b>, <b>GetLastVisibleData</b>, or <b>GetOriginalData</b> returns.</p>
<h1>Setting IPersist* Objects</h1>
<p>
To set an <b>IPersist*</b> object in a column, a consumer uses one of two procedures. In the first procedure, the consumer performs the following actions:
<ol>
<li>
Calls <b>IRowset::GetData</b> to retrieve an <b>IStorage</b> or <b>IStream</b> pointer over the object's data. It does this in the same way it retrieves an <b>IStorage</b> or <b>IStream</b> pointer over BLOB data. The provider does not load the object, as is the case when the consumer calls <b>GetData</b> and requests a different interface, such as <b>IPersistStorage</b>. If the provider supports only one open storage object at a time and another storage object is open, the method returns a status of DBSTATUS_E_CANTCREATE for the column.<br><br></li>
<li>
Calls <b>Save</b> on the <b>IPersist*</b> interface of the <b>IPersist*</b> object and passes it the storage interface pointer retrieved in step 1.<br><br></li>
<li>
Calls <b>IPersistStorage::SaveCompleted</b> on the <b>IPersist*</b> object if <b>IPersistStorage</b> is used. The consumer should be careful if it sets the <i>pStgNew</i> parameter to a non-null pointer, because the provider does not dissociate the column's storage object from the <b>IPersist*</b> object.</li>
</ol>
<p>
This procedure should be used only by consumers that know what kind of <b>IPersist* </b>objects should be stored in a column. Because the storage object, which is implemented by the rowset, does not have a pointer to the <b>IPersist*</b> object, the rowset cannot determine whether the <b>IPersist*</b> object uses a class ID that matches the class ID used by the objects in the column. The possibility therefore arises that the consumer could store an object in the column of a type of which the rowset will not be able to create an instance later.
<ul type=disc>
<li>
In the second procedure, the consumer performs the following action. Note that this procedure can be used by any consumer. It should be used by consumers that do not know what kind of <b>IPersist*</b> objects can be stored in the column because the provider can check the class ID of the object before storing it.Calls <b>IRowsetChange::SetData</b> or <b>IRowsetChange::InsertRow</b> and passes a pointer to an interface on the <b>IPersist*</b> object.</li>
</ul>
<p>
The provider performs the following actions, in turn:
<ol>
<li>
Creates a new storage object for the column and retrieves a storage interface pointer on that object. <p class=tl>
If there is an existing storage object on the column that the provider cannot release, <b>SetData</b> or <b>InsertRow</b> returns a status of DBSTATUS_E_CANTCREATE for the column. For example, this occurs if there is an <b>IPersist*</b> object loaded on the column. If the provider supports only one open storage object at a time and a storage object is open over another column or row, the method returns a status of DBSTATUS_E_CANTCREATE for the column.</P></li>
<li>
(Optional) Calls <b>IPersist::GetClassID</b> on the <b>IPersist*</b> object to verify that the specified <b>IPersist*</b> object is of a type that can be stored in the column.<br><br></li>
<li>
Calls <b>Save</b> on the <b>IPersist*</b> interface of the <b>IPersist*</b> object and passes it the storage interface pointer retrieved in step 1. <p class=tl>
If the provider calls <b>IPersistStorage::Save</b>, it sets the <i>fSameAsLoad</i> argument to FALSE; if the provider calls <b>IPersistStream::Save</b> or <b>IPersistStreamInit::Save</b>, it sets the <i>fClearDirty</i> flag to TRUE.</P></li>
<li>
Calls <b>IPersistStorage::SaveCompleted</b> on the <b>IPersist*</b> object if <b>IPersistStorage</b> is used. The provider sets the <i>pStgNew</i> argument to a null pointer.<br><br></li>
<li>
Performs the operations required to enable future calls to <b>GetData</b>, <b>GetLastVisibleData</b>, or <b>GetOriginalData</b> to detect whether the object is loaded and to return a pointer on the loaded object. <p class=tl>
After <b>SetData</b> or <b>InsertRow</b> returns, the rowset does not hold any reference counts on the <b>IPersist*</b> object.</P></li>
</ol>
</font></BODY>
</HTML>

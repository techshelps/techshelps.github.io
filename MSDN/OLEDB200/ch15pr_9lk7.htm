<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Processing</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbasynchronous_processing"></a>Overview of Asynchronous Processing</h1>
<p>
Asynchronous processing enables methods to return immediately without blocking on the calling thread. Consumers request asynchronous processing when initializing a data source, or when opening or populating a rowset. The consumer must explicitly request asynchronous processing. Otherwise, the provider can perform asynchronous operations in the background, but must behave synchronously, blocking if necessary, until the underlying asynchronous operation completes.</p>
<p>
Data Source Initialization properties are used when consumers initialize a data source asynchronously. Consumers wishing to asynchronously open a rowset use the Command Execution and Rowset Generation properties. Consumers wishing to asynchronously populate a rowset use properties of Rowset Population.<br>
</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=603>
<tr valign=top>
<td class=label width=50%><b>For more information on</b></td>
<td class=label width=50%><b>Go to</b></td>
</tr>
<tr valign=top>
<td width=50%>Calling thread</td>
<td width=50%>"<a href="ch14pr_946r.htm">Provider Threading Models</a>" in Chapter 14, "Programming Considerations"</td>
</tr>
<tr valign=top>
<td width=50%>Consumers</td>
<td width=50%>"<a href="ch01pr_9lgz.htm">Consumers and Providers</a>" in Chapter 1, "Overview of OLE DB"</td>
</tr>
<tr valign=top>
<td width=50%>Data source</td>
<td width=50%>"<a href="ch02pr_0qgj.htm">Data Source Objects</a>" in Chapter 2, "Enumerators, Data Source Objects, and Sessions"</td>
</tr>
<tr valign=top>
<td width=50%>Rowset</td>
<td width=50%>Chapter 4, "<a href="ch04pr_3sdv.htm">Rowsets</a>"</td>
</tr>
<tr valign=top>
<td width=50%>Asynchronously initialize a data source </td>
<td width=50%>"<a href="ch15pr_60tq.htm">Asynchronous Data Source Initialization</a>" in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Asynchronously open a rowset </td>
<td width=50%>"<a href="ch15pr_0f1q.htm">Asynchronous Command Execution and Rowset Generation</a>" in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Asynchronously populate a rowset</td>
<td width=50%>"<a href="ch15pr_00fi.htm">Asynchronous Rowset Population</a>" in this chapter</td>
</tr>
</table><br>
<p>
Consumers can poll for the status of an asynchronous operation by calling <b>IDBAsynchStatus::GetStatus</b> on the object being asynchronously processed, or can register for progress notifications by passing the consumer's <b>IDBAsynchNotify</b> interface to the connection point of the object being asynchronously processed.</p>
<p>
Asynchronous processing can occur in phases. If the object is asynchronously initialized, the initialization phase occurs first. While the object is in the initialization phase it is in an uninitialized state. Attempting to call other interfaces may fail, and attempting to call <b>QueryInterface</b> for interfaces other than <b>IConnectionPointContainer</b> may return E_NOINTERFACE.</p>
<p>
Once all asynchronous processing has completed for an operation, the provider calls <b>IDBAsynchNotify::OnProgress</b> with <i>ulAsynchPhase</i> set to DBASYNCHPHASE_COMPLETE for that operation, followed by <b>IDBAsynchNotify::OnStop</b> to notify listeners that asynchronous processing has completed. Any calls to <b>IDBAsynchStatus::GetStatus</b> for that operation return an HRESULT indicating the outcome of the operation, with <i>ulAsynchPhase</i> set to DBASYNCHPHASE_COMPLETE, <i>pulProgress </i>equal to <i>pulProgressMax</i>, and <i>ppwszStatusString</i> set to a provider-specific value indicating completion, or NULL.</p>
</font></BODY>
</HTML>

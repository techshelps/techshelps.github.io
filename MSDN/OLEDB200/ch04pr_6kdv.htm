<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fetching Rows</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbfetching_rows"></a>Fetching Rows</h1>
<p>
Methods such as <b>IRowset::GetNextRows</b>, <b>IRowsetLocate::GetRowsAt</b>, <b>IRowsetLocate::GetRowsByBookmarks</b>, and <b>IRowsetScroll::GetRowsAtRatio </b>can fetch rows. These methods enable the consumer to get multiple row handles with a single call.</p>
<p>
The provider manages its row buffers on behalf of the consumer. When a row is fetched, the provider stores it in a buffer local to the provider. It is probably stored in a native format, although how this is done is provider specific. The consumer does not have direct access to the provider's row buffer, except through reference accessors. Instead, the consumer uses <b>IRowset::GetData</b> to get a copy of the data and <b>IRowsetChange::SetData</b> to make changes to the data. For more information, see Chapter 6, "<a href="ch06pr_92ap.htm">Getting and Setting Data</a>."</p>
<p>
In most cases, rows are processed in <i>parallel</i>. Subject to limitations of the command or to limits upon resources, the consumer can hold and work with as many rows as it needs. There is no concept of a single current row, although there is a next fetch row for <b>IRowset::GetNextRows</b>, which is used for sequential read operations.</p>
<p>
If the rowset supports <b>IRowsetLocate</b>, then any pattern of rows can be held. In a <i>sequential rowset</i> (that is, a rowset that does not support <b>IRowsetLocate</b>), a rule may require rows to be released from prior <b>GetNextRows</b> calls before a new <b>GetNextRows</b> call can be made.</p>
<h1>Reference-Counting Row Handles</h1>
<p>
Individual row handles have associated reference counts. Methods that return row handles increment the reference counts of the returned row handles. The provider holds the rows until the consumer releases them with <b>IRowset::ReleaseRows</b>. The consumer must call <b>ReleaseRows</b> for the row once for each time it was fetched or <b>IRowset::AddRefRows</b> was called for it.</p>
<p>
Rows are implicitly released only when the consumer calls <b>IRowset::Release</b>. Deleting a row does not release the row handle; whether the deletion is done by calling <b>IRowsetChange::DeleteRows</b>, calling <b>IRowsetUpdate::Update</b> on a row with a pending deletion, or calling <b>IRowsetUpdate::Undo</b> on a row with a pending insert, the consumer must call <b>ReleaseRows</b> to release the row.</p>
<h1>Next Fetch Position</h1>
<p>
The OLE DB provider keeps track of the next fetch position so that a sequence of calls to <b>GetNextRows</b> (with no skips, changes of direction, or intervening calls to <b>FindNextRow</b>, <b>Seek</b>, or <b>RestartPosition</b>) reads the entire rowset without skipping or repeating any row. The next fetch position is changed either by calling <b>IRowset::GetNextRows</b>, <b>IRowset::RestartPosition</b>, or <b>IRowsetIndex::Seek</b>, or by calling <b>FindNextRow</b> with a null <i>pBookmark</i> value. Calling <b>FindNextRow</b> with a non-null <i>pBookmark</i> value has no effect on the next fetch position.</p>
<p>
If the rowset supports reversible fetch direction, and the fetch direction is reversed from the previous call to <b>GetNextRows</b> or <b>FindNextRow</b> with a null <i>pBookmark</i> value, then the next fetch position for <b>GetNextRows</b> or <b>FindNextRow</b> in the new direction is the last row that was fetched in the previous direction; otherwise, the next fetch position is the row following the last row fetched by either <b>GetNextRows</b> or <b>FindNextRow</b> with a null <i>pBookmark</i> value.</p>
<h1>Fetch Direction</h1>
<p>
Rowsets can take a <i>negative count</i> of requested rows. This means that the absolute count of rows beginning with the first specified row and then moving backward will be returned. For example, the next fetch row in <b>GetNextRows</b> or the bookmarked row in <b>IRowsetLocate::GetRowsAt</b> is the specified row and those preceding it up to the absolute count will be returned. This behavior is independent of skip (offset) counts, which also can be negative.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Link API Overview</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="datalinkapioverview"></a>Data Link API Overview</h1>
<p>
The data link API exposes a user interface that you can implement in your applications to create and manage connections to OLE DB data sources. </p>
<p>
Because the data link API is included with OLE DB as a core component, you can always assume that the user interface is available to your application users if ADO or OLE DB is properly installed on their system. </p>
<p>
This section includes the following topics:
<ul type=disc>
<li>
Using the Data Link API<br><br></li>
<li>
Building and Saving Connection Strings<br><br></li>
<li>
Data Link API User Interface Components</li>
</ul>
<p>
<b>Using the Data Link API</b></p>
<p>
Before you can access data from OLE DB, you must provide specific connection information such as:
<ul type=disc>
<li>
The <i>type</i> of data that you want to access.<br><br></li>
<li>
The <i>server</i> on which the data resides.<br><br></li>
<li>
The <i>database</i> in which the data is stored.</li>
</ul>
<p>
For example, to connect to a Microsoft<sup>®</sup> SQL Server™ database you need to specify the OLE DB provider for SQL Server, a server name, and a database name.</p>
<p>
You can call the data link API to build a string version of this connection information that you can save and reuse in your applications. This string version is referred to as a c<i>onnection string</i>. The user interface that prompts users to build the connection string is referred to as the <i>data link</i> dialog boxes. The information specified in a connection string may vary depending on the OLE DB provider that is specified.</p>
<p>
<b>Building and Saving Connection Strings Using the Data Link Properties Dialog Box</b></p>
<p>
Using the data link dialog boxes, your end users can build connection strings directly within your application. Once created, a connection string can be saved with the application itself or as a separate file with the .udl extension. This file is referred to as a <i>Microsoft Data Link</i> file.</p>
<p>
Each method of saving a connection string is compared below.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Saving a connection string with the application data</b></td>
<td class=label width=50%><b>Saving a connection string as a data link (.udl) file</b></td>
</tr>
<tr valign=top>
<td width=50%>Connection string is saved and stored with the application.</td>
<td width=50%>Connection string is saved as an .udl file, enabling users to save and modify it from their system.</td>
</tr>
<tr valign=top>
<td width=50%>Connection string is part of the application and is thus automatically redistributed with the application.</td>
<td width=50%>The .udl file must be included as a separate file when you redistribute your application.</td>
</tr>
<tr valign=top>
<td width=50%>If the connection information changes, the connection string must be modified from within your application.</td>
<td width=50%>Users can modify the .udl file at anytime if the connection information changes.</td>
</tr>
</table><br>
<p>
As a programmer, you can use either method to prompt users to build connection strings while using your application. You call the same data link dialog boxes regardless of the method used.</p>
<p>
Users can also build connection strings from Control Panel by clicking the <b>Data Links</b> icon. The <b>Data Links</b> icon opens the <b>Organize Data Link Files</b> dialog box, which allows users to create new .udl files or modify the connection string in existing .udl files. Users can store .udl files anywhere on their system or network.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can manually build a connection string as long as it conforms to the syntax rules. For more information about the format of a connection string, see <a href="msdasc_ov_0ipk.htm">Connection String Syntax</a>. </p>
<p>
<b>Data Link API User Interface Components</b></p>
<p>
The data link API includes the following dialog boxes:
<ul type=disc>
<li>
<b>Data Link Properties</b><br><br></li>
<li>
<b>Organize Data Link Files</b><br><br></li>
<li>
<b>Select Data Link</b></li>
</ul>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;To get help about the data link interface, press F1 while viewing an active dialog box.</p>
<h3>Data Link Properties Dialog Box</h3>
<p>
Users typically use the <b>Data Link Properties</b> dialog box either to edit an existing connection string, or to build a new connection string. This is a tabbed dialog box that exposes all of the properties that the selected OLE DB provider supports. For example, the <b>Advanced</b> tab includes default settings that the user can modify as necessary. The <b>Connection</b> tab is provider-specific.</p>
<p>
Depending on which OLE DB provider the user selects, the tabs and the options in this dialog box may vary.</p>
<h3>Organize Data Link Files Dialog Box</h3>
<p>
To create or edit data link (.udl) files, which contain connection strings that have been saved, users use the <b>Organize Data Link Files</b> dialog box. Users can also access this dialog box from Control Panel by clicking the <b>Data Links</b> icon.</p>
<h3>Select Data Link Dialog Box</h3>
<p>
If you want your application to reference a .udl file instead of storing a connection string directly in your application, you can prompt users with the <b>Select Data Link File</b> dialog box. This allows the user to select from existing .udl files, as well as to create new ones. </p>
<p>
For example, if your application supports .udl files, a user could create an .udl file that points to the user's Customer database. Using the <b>Select Data Link</b> dialog box, the user could then specify this .udl file to access the Customer database. </p>
<p>
Referencing an .udl file is beneficial to users if a database is upgraded to a different server or is modified. In this case, the user simply edits the connection string within the .udl file with the updated information and the application that uses this file will instantly reflect the changes.</p>
<p>
The <b>Select Data Link File</b> dialog box is the same as the <b>Organize Data Links</b> dialog box, but it returns the selected .udl file to the application. </p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="msdasc_ov_0kvi.htm">Referencing a Connection String in Your Application</a></p>
<p>
<a href="msdasc_ov_0ipk.htm">Connection String Syntax</a></p>
</font></BODY>
</HTML>

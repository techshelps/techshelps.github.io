<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COLUMNS Axis Expression</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="columnsaxisexpression"></a>COLUMNS Axis Expression</h1>
<p>
The COLUMNS axis expression consists of the CROSSJOIN function applied on two literal sets. By applying the mappings described in "Literal Sets," you get two virtual tables. These virtual tables are used as input to the SQL statements described in "CROSSJOIN." The result of these operations yields table C:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=39%><b>Name1</b></td>
<td class=label width=49%><b>Name2</b></td>
<td class=label width=12%><b>Rank</b></td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Access</td>
<td width=49%>Geography.All.USA.Kansas</td>
<td width=12%>1</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Access</td>
<td width=49%>Geography.All.USA.NewYork.Buffalo</td>
<td width=12%>2</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Access</td>
<td width=49%>Geography.All.USA.KansasTopeka</td>
<td width=12%>3</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Access</td>
<td width=49%>Geography.All.USA </td>
<td width=12%>4</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Access</td>
<td width=49%>Geography.All.Canada</td>
<td width=12%>5</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Word</td>
<td width=49%>Geography.All.USAKansas</td>
<td width=12%>6</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Word</td>
<td width=49%>Geography.All.USA.NewYork.Buffalo</td>
<td width=12%>7</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Word</td>
<td width=49%>Geography.All.USA.KansasTopeka</td>
<td width=12%>8</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Word</td>
<td width=49%>Geography.All.USA </td>
<td width=12%>9</td>
</tr>
<tr valign=top>
<td width=39%>Products.All.Office.Word</td>
<td width=49%>Geography.All.Canada</td>
<td width=12%>10</td>
</tr>
</table><br>
<p>
Denote by Cprime the following table:</p>
<table border=1 cellpadding=5 cols=8 frame=below rules=rows width=582>
<tr valign=top>
<td class=label width=13%><b><br>
<br>
Product</b></td>
<td class=label width=13%><b><br>
<br>
ProdLine</b></td>
<td class=label width=14%><b><br>
Product.<br>
All</b></td>
<td class=label width=13%><b><br>
<br>
City</b></td>
<td class=label width=12%><b><br>
<br>
State</b></td>
<td class=label width=13%><b><br>
<br>
Country</b></td>
<td class=label width=12%><b>Geo-<br>
graphy.<br>
All</b></td>
<td class=label width=10%><b><br>
<br>
Rank</b></td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Access</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>ALL()</td>
<td width=12%>Geo-<br>
graphy.<br>
USA.<br>
Kansas</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>1</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Access</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>Geo-<br>
graphy.<br>
USA.<br>
NewYork.<br>
Buffalo</td>
<td width=12%>Geo-<br>
graphy.<br>
USA.<br>
NewYork</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>2</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Access</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>Geo-<br>
graphy.<br>
USA.<br>
Kansas.<br>
Topeka</td>
<td width=12%>Geo-<br>
graphy.<br>
USA.<br>
Kansas</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>3</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Access</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>ALL()</td>
<td width=12%>ALL()</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>4</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Access</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>ALL()</td>
<td width=12%>ALL()</td>
<td width=13%>Geo-<br>
graphy.<br>
Canada</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>5</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Word</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>ALL()</td>
<td width=12%>Geo-<br>
graphy.<br>
USA.<br>
Kansas</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>6</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Word</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>Geo-<br>
graphy.<br>
USA.<br>
NewYork.<br>
Buffalo</td>
<td width=12%>Geo-<br>
graphy.<br>
USA.<br>
NewYork</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>7</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Word</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>Geo-<br>
graphy.<br>
USA.<br>
Kansas.<br>
Topeka</td>
<td width=12%>Geo-<br>
graphy.<br>
USA.<br>
Kansas</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>8</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Word</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>ALL()</td>
<td width=12%>ALL()</td>
<td width=13%>Geo-<br>
graphy.<br>
USA</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>9</td>
</tr>
<tr valign=top>
<td width=13%>Products.<br>
All.Office.<br>
Word</td>
<td width=13%>Products.<br>
All.Office.</td>
<td width=14%>Product.<br>
All</td>
<td width=13%>ALL()</td>
<td width=12%>ALL()</td>
<td width=13%>Geo-<br>
graphy.<br>
Canada</td>
<td width=12%>Geo-<br>
graphy.<br>
All</td>
<td width=10%>10</td>
</tr>
</table><br>
<p>
Cprime is obtained from C by using the following steps:
<ol>
<li>
Find out the number of nested dimensions in the axis expression:<pre><code>SELECT COUNT DISTINCT COMPONENT(Name, -1) FROM C
</code></pre>
<p class=tl>
For our example, this is 2.</P></li>
<li>
Find the names of each dimension:<pre><code>SELECT DISTINCT COMPONENT(Name, -1) FROM C
</code></pre>
<p class=tl>
For our example, this is Products, Geography.</P></li>
<li>
For each dimension, find out the deepest member in the axis expression:<pre><code>SELECT MAX(LEVEL(Name)) FROM C GROUP BY COMPONENT(Name, -1)
</code></pre>
<p class=tl>
For our example, this is 3 for Geography and 2 for Products.</P></li>
<li>
Make two tables — C1 and C2. C1 has all members in C from Products and C2 has all members in C from Geography.<pre><code>CREATE LOCAL TEMPORARY VIEW C1(Name, Rank) AS

 &nbsp; SELECT Name, NewRank AS Rank 
FROM 
 &nbsp;&nbsp;&nbsp; (SELECT Name1 FROM C WHERE COMPONENT(Name, -1) = "Products"
 &nbsp;&nbsp;&nbsp; RANK ROWS AS NewRank RANKORDER BY Rank)

CREATE LOCAL TEMPORARY VIEW C2(Name, Rank) AS

 &nbsp; SELECT Name, NewRank AS Rank 
FROM 
 &nbsp;&nbsp;&nbsp; (SELECT Name2 FROM C WHERE COMPONENT(Name, -1) = “Geography”
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RANK ROWS AS NewRank RANKORDER BY Rank)
</code></pre>
</li>
<li>
Now make Cprime:<pre><code>SELECT Product AS COMPONENT(C1.Name, 2), 
 &nbsp; ProdLine AS COMPONENT(C1.Name, 1), 
 &nbsp; Product.All AS COMPONENT(C1.Name, 0),
 &nbsp; City AS COMPONENT(C2.Name, 3),
 &nbsp; State AS COMPONENT(C2.Name, 2),
 &nbsp; Country AS COMPONENT(C2.Name, 1),
 &nbsp; Geography.All AS COMPONENT(C2.Name, 0)
 &nbsp; NewRank AS Rank
FROM 
 &nbsp; (C1 CROSS JOIN C2) RANK ROWS AS NewRank 
RANKORDER BY C1.Rank, C2.Rank
</code></pre>
</li>
</ol>
</font></BODY>
</HTML>

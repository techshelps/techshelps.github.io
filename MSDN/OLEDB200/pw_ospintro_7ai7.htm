<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OSP Language Reference</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbpwk_ospsdkintro"></a><sup></sup>OSP Language Reference</h1>
<p>
OSP (for OLE DB Simple Provider) is a set of Internet Explorer APIs that includes a limited number of COM interfaces and associated methods. It is designed to let you easily expose simple data (such as in-memory arrays of string and variant data types) to data-binding controls in HTML pages, Internet Explorer HTML forms, and consumer applications. </p>
<h1>OSP API Documentation</h1>
<p>
The OSP API interfaces and methods documented here are also described in the Internet Explorer SDK. However, this version of the OSP documentation includes additional information specific to the Toolkit's usage of OSP.</p>
<h1>OSP and the Toolkit</h1>
<p>
The Toolkit uses the OSP API as an integral part of its OLE DB provider architecture. Think of it using OSP as a building block by which OLE DB functionality is exposed over your simple data. As a provider writer using this toolkit, you use OSP methods to:
<ul type=disc>
<li>
Expose a data source. You must implement a separate OSP for each data source you want to expose.<br><br></li>
<li>
Build <a href="pw_toverview_4fxz.htm#oledbpwk_odooverview">OSP Data Objects</a> (ODOs). These data objects do the following: <ul type=disc>
<li>
Encapsulate one or more OSPs.<br><br></li>
<li>
Expose the correct OSP instance to the <a href="pw_toverview_4fxz.htm#oledbpwk_oledbmappinglayer">OLE DB Simple Provider DLL</a> (using either the <a href="pw_id_6xid.htm">IDataSource</a> interface or the <a href="pw_msdso_36t0.htm">msDataSourceObject</a> method).<br><br></li>
<li>
Send <a href="pw_notify_4rlj.htm">notifications</a> to the OLE DB Simple Provider DLL.</li>
</ul>
</li>
</ul>
<h1>OSP Interfaces</h1>
<p>
OSP defines two interfaces (click on either to jump directly to its reference page): 
<ul type=disc>
<li>
<a href="pw_osp_90s2.htm">OLEDBSimpleProvider</a>, which implements the methods used for data access.<br><br></li>
<li>
<a href="pw_osp_74mq.htm">OLEDBSimpleProviderListener</a>, which specifies the methods to be implemented by the consumer for receiving notifications of data changes.</li>
</ul>
<h1>Method Categories</h1>
<p>
The OSP methods you can implement with the OLE DB Simple Provider Toolkit can be categorized as follows: </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=30%><b>Category</b></td>
<td class=label width=70%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%>Schema</td>
<td width=70%>Obtain basic metadata information about the underlying rows and columns.</td>
</tr>
<tr valign=top>
<td width=30%>Data Access via Variants</td>
<td width=70%>Retrieve and set variant values in the data set. </td>
</tr>
<tr valign=top>
<td width=30%>Insert/Deletion</td>
<td width=70%>Insert/delete rows and columns into the data set.</td>
</tr>
<tr valign=top>
<td width=30%>Find</td>
<td width=70%>Implement basic search functionality across the data.</td>
</tr>
<tr valign=top>
<td width=30%>Localization</td>
<td width=70%>Implement functionality for data conversions based on country.</td>
</tr>
<tr valign=top>
<td width=30%>Event handler</td>
<td width=70%>Register (and unregister) an event handler, which can be notified of changes to cells, rows, and columns.</td>
</tr>
<tr valign=top>
<td width=30%>Asynchronous data population</td>
<td width=70%>Allows data to populate a target application or control asynchronously. </td>
</tr>
<tr valign=top>
<td width=30%>Notifications</td>
<td width=70%>Notifies, through an event handler, changes to cells, rows, and columns.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Query-Based Updates</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcproviderquery_based_updates"></a><sup></sup>Query-Based Updates</h1>
<p>
This section describes query-based updates and explains how rows are identified through the <b>WHERE</b> clause. It also describes the conditions under which rowsets can be updated based on query-based updates.</p>
<h1>Query-Based Update Definition</h1>
<p>
Query-based updates use the SQL <b>INSERT</b>, <b>UPDATE</b> and <b>DELETE</b> commands to issue updates to the ODBC database. These commands are not positioned and are independent of, but in the same transaction context as, the rowset cursor. Query-based updates are used when the ODBC driver does not support the features required to use positioned updates, or when you specifically set some property to request a query-based update. </p>
<h1>Row Identification</h1>
<p>
When updating or deleting an existing row, query-based update must identify the row through the <b>WHERE</b> clause of the <b>UPDATE</b> or <b>DELETE</b> command. Because it does not have any primary key information, a query-based update constructs a hopeful key that may be able to identify the row. The hopeful key consists of all searchable columns in the rowset. By default, all REAL, FLOAT, and DOUBLE numeric values are excluded from the WHERE clause; to include these values, users must set the property KAGPROP_INCLUDENONEXACT to VARIANT_TRUE. If the key does not uniquely identify a row, then severe update anomalies are possible. </p>
<p>
For example if a rowset contains columns A, B, C, and D where columns A and D are searchable, the <b>DELETE</b> command that would be issued by a query-based update would be:</p>
<p>
<b>DELETE FROM </b><i>table-name</i><b> WHERE (A = </b><i>value-a</i><b> AND D = </b><i>value-d</i><b>)</b></p>
<p>
<i>Value-x</i> is the value of column <i>x</i> for the row being deleted.</p>
<h1>Criteria for Updatable Rowsets</h1>
<p>
To be updatable using query-based updates, a rowset must satisfy the following criteria. First, a rowset must contain at least one searchable column. Second, the query used to create the rowset must contain only a single table or view name in its <b>FROM</b> clauses.</p>
<h1>Ensuring Changes are Visible</h1>
<p>
To ensure that changes are visible, the consumer should set DBPROP_OTHERUPDATEDELETE or DBPROP_OTHERINSERT. This enables the ODBC Provider to expose changes to the data source using query-based updates.</p>
<h1>Setting the QBUTimeout Value</h1>
<p>
If your query-based updates are timing out (for example, because of a heavy load on a server), you may want to try changing the QBUTimeout value in the system registry. </p>
<p>
Using the registry editor, go to the following key location: HKEY_CLASSES_ROOT\CLSID\{c8b522cb-5cf3-11ce-ade5-00aa0044773d}\Flags. Under this registry key you can change the DWORD value of QBUTimeout to the desired number. If no value is given, QBUTimeout will default to 30 seconds.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If the key "Flags" does not exist under {c8b522cb-5cf3-11ce-ade5-00aa0044773d}, you have to add it before adding the named value QBUTimeout.</p>
</font></BODY>
</HTML>

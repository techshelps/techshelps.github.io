<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Commands</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbcommands"></a>Overview of Commands</h1>
<p>
In OLE DB, Data Definition Language (DDL) and Data Manipulation Language (DML) statements are referred to as <i>text commands</i>. A command object contains a text command and its main purpose is to execute the command. Commands expose various interfaces representing different areas of functionality of a query processor, including query formulation, preparation, and execution. Text commands are expressed in a provider-specific language—usually ANSI SQL92. Commands can be in one of four states: Initial,<b> </b>Unprepared,<b> </b>Prepared, or<b> </b>Executed<b>. </b>Parameters can be used with commands to bind to consumer variables at execution time. When executed, commands return <i>results</i>: either a rowset or a row count, or <i>multiple results</i>. This chapter discusses the use and states of command objects, binding input parameters and determining support of output parameters, and the results set.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=603>
<tr valign=top>
<td class=label width=50%><b>For more information on</b></td>
<td class=label width=50%><b>Go to</b></td>
</tr>
<tr valign=top>
<td width=50%>Using commands</td>
<td width=50%>"<a href="ch03pr_2ltf.htm">Using Commands</a>" in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Command states</td>
<td width=50%>"<a href="ch03pr_96wj.htm">Command States</a>" in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Input and Output Parameters</td>
<td width=50%>"<a href="ch03pr_9z77.htm">Using Parameters</a>" in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Multiple results</td>
<td width=50%>"<a href="ch03pr_0tf7.htm">Multiple Results</a>" in this chapter</td>
</tr>
</table><br>
<p>
A command is used to execute a provider-specific text command, such as an SQL statement. It is important not to confuse a <i>command</i>, which is an object, and its <i>command text</i>, which is a string. Commands are usually used for <i>data definition</i>, such as creating a table or granting privileges, and <i>data manipulation</i>, such as updating or deleting rows. A special case of data manipulation is creating a rowset—for example, an SQL <b>SELECT</b> statement.</p>
<p>
Providers are not required to support commands. In general, providers built on top of a DBMS, such as an SQL DBMS, support commands, and providers built on top of a simple data structure, such as a file or an array of data in an application, do not support commands.</p>
<p>
Command objects:</p>
<pre><code>CoType TCommand {
   [mandatory] interface IAccessor;
   [mandatory] interface IColumnsInfo;
   [mandatory] interface ICommand;
   [mandatory] interface ICommandProperties;
   [mandatory] interface ICommandText;
   [mandatory] interface IConvertType;
   [optional]&nbsp; interface IColumnsRowset;
   [optional]&nbsp; interface ICommandPrepare;
   [optional]&nbsp; interface ICommandWithParameters;
   [optional]&nbsp; interface ISupportErrorInfo;
}
</code></pre>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing BLOB Data</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbaccessing_blob_data"></a>Accessing BLOB Data</h1>
<p>
BLOBs can be accessed as in-memory data, that is, a sequence of bytes sent or retrieved in one piece; or as a storage object, that is, through <b>ISequentialStream</b>, <b>IStream</b>, <b>IStorage</b>, or <b>ILockBytes</b>. The method a consumer uses depends on the setting of the DBCOLUMNFLAGS_ISLONG flag returned by <b>IColumnsInfo::GetColumnInfo</b> and the length of the BLOB data.</p>
<p>
The provider sets the DBCOLUMNFLAGS_ISLONG flag to inform the consumer that the provider supports data access through a storage interface as the preferred way to access the BLOB data. Although the consumer can still choose to access the BLOB as in-memory data, there may be provider-specific problems in doing so. For example, the BLOB might be truncated due to machine limits on memory or <b>IRowset::GetData</b> might fail if called more than once for the BLOB.</p>
<p>
If the DBCOLUMNFLAGS_ISLONG flag is not set, the consumer can safely access the BLOB as in-memory data. It is provider specific whether the provider supports reading such data through a storage interface. In general, consumers allocate sufficient memory to hold such columns in their entirety and treat them as in-memory data.</p>
</font></BODY>
</HTML>

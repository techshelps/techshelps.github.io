<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IAccessor</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="iaccessor"></a>IAccessor </h1>
<p>
This section describes Jet-specific implementation of the <b>IAccessor</b> Interfaces. This includes <b>IAccessor::AddRefAccessor</b>, <b>IAccessor::CreateAccessor</b>, <b>IAccessor::GetBindings</b>, and <b>IAccessor::ReleaseAccessor</b>.</p>
<p>
To create an accessor, a consumer calls <b>CreateAccessor</b>. The consumer may create and release accessors at any time while the rowset or command remains in existence. When one thread of a consumer shares an accessor with another thread, it calls<b> AddRefAccessor</b> to increment the reference count of that accessor.</p>
<p>
When the consumer is done with a rowset, it calls <b>ReleaseAccessor</b> to release any accessors on the rowset, including accessors inherited from the command. When the consumer is done with a command, it calls <b>ReleaseAccessor</b> to release any accessors created on the command. In both cases, the consumer must call <b>ReleaseAccessor</b> once for each reference count on the accessor.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Method</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>AddRefAccessor</b></td>
<td width=50%>Adds a reference count to an existing accessor.</td>
</tr>
<tr valign=top>
<td width=50%><b>CreateAccessor</b></td>
<td width=50%>Creates an accessor from a set of bindings.</td>
</tr>
<tr valign=top>
<td width=50%><b>GetBindings</b></td>
<td width=50%>Returns the bindings in an accessor.</td>
</tr>
<tr valign=top>
<td width=50%><b>ReleaseAccessor</b></td>
<td width=50%>Releases an accessor.</td>
</tr>
</table><br>
<h3>IAccessor::AddRefAccessor</h3>
<p>
Adds a reference count to an existing accessor. For information on how this interface is implemented, see the <i>OLE DB Programmer’s Reference</i>. OLE DB Programmer’s Reference</p>
<h3>IAccessor::CreateAccessor</h3>
<p>
CreateAccessor creates an accessor from a set of bindings. For information on how this interface is implemented, see the <i>OLE DB Programmer’s Reference</i>s.</p>
<h3>IAccessor::GetBindings</h3>
<p>
Returns the bindings in an accessor. For information on how this interface is implemented, see the <i>OLE DB Programmer’s Reference</i>s.</p>
<h3>IAccessor::ReleaseAccessor</h3>
<p>
Releases an accessor. For information on how this interface is implemented, see the <i>OLE DB Programmer’s Reference</i>s.</p>
<h3>Optimization</h3>
<p>
Do not try to optimize accessors in this provider. It does not have internal row cache. Therefore, it is not capable of optimization as described in the <i>OLE DB Programmer’s Reference</i>. All accessors are equally optimized as they are in process.</p>
</font></BODY>
</HTML>

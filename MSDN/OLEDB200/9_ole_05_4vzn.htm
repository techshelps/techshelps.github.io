<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Source Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="data_source_objects"></a>Data Source Objects</h1>
<p>
OLE DB uses the term <i>data source</i> for the set of OLE DB interfaces used to establish a link to a data store, such as Microsoft SQL Server. Creating an instance of the data source object of the provider is the first task of an OLE DB consumer.</p>
<p>
Every OLE DB provider declares a class identifier for itself. The class identifier for SQLOLEDB is the C/C++ macro CLSID_SQLOLEDB. With the class identifier, the consumer uses the OLE <b>CoCreateInstance</b> function to manufacture an instance of the data source object.</p>
<p>
SQLOLEDB is an in-process server. Instances of SQLOLEDB objects are created using the CLSCTX_INPROC_SERVER macro to indicate the executable context.</p>
<p>
The SQLOLEDB data source object exposes the OLE DB initialization interfaces that allow the consumer to connect to existing SQL Server databases.</p>
<h3>Example</h3>
<p>
This example uses the class identifier macro to create a SQLOLEDB data source object and get a reference to its <b>IDBInitialize</b> interface.</p>
<pre><code>IDBInitialize* pIDBInitialize;
HRESULT&nbsp;&nbsp;&nbsp; hr;
<b><i>  </i></b>
hr = CoCreateInstance(CLSID_SQLOLEDB, NULL, CLSCTX_INPROC_SERVER,
  IID_IDBInitialize, (void**) &amp;pIDBInitialize);
<b><i>  </i></b>
if (SUCCEEDED(hr))
{
  //&nbsp; Do stuff with the interface.
  pIDBInitialize-&gt;Uninitialize();
  pIDBInitialize-&gt;Release();
}
else
{
  // Display error from CoCreateInstance.
}
<b><i>  </i></b></code></pre>
<p>
With successful creation of an instance of a SQLOLEDB data source object, the consumer application can continue on by initializing the data source and creating sessions. OLE DB sessions present the interfaces that allow data access and manipulation.</p>
<p>
SQLOLEDB makes its first connection to a specified SQL Server as part of successful data source initialization. The connection is maintained as long as a reference is maintained on any data source initialization interface, or until <b>IDBInitialize::Uninitialize</b> is called.</p>
</font></BODY>
</HTML>

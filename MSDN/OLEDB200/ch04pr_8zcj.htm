<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Releasing Rowsets</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbcreating_and_releasing_rowsets"></a>Creating and Releasing Rowsets</h1>
<p>
The consumer typically uses one of two procedures for creating rowsets. The first procedure uses the <b>IOpenRowset</b> interface, which deals with the simpler case of retrieving all data from the table. The second procedure involves creating and executing a command to get a rowset that meets specific criteria. All providers must implement the simpler case. Even if the rowset specified by either method has no rows, the rowset is still created. The resulting rowset is fully functional and can be used, for example, to insert new rows or determine column metadata.</p>
<p>
Because rowsets are the fundamental objects for getting data, several methods that return information create rowsets, such as <b>IColumnsRowset::GetColumnsRowset</b>, <b>IDBSchemaRowset::GetRowset</b>, and <b>ISourcesRowset::GetSourcesRowset</b>.</p>
</font></BODY>
</HTML>

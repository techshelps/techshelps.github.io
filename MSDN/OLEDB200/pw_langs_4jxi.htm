<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Basic: Information and Guidelines</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbpwk_vbstuff"></a><sup></sup>Visual Basic: Information and Guidelines</h1>
<p>
Here is a brief outline of the steps needed to build an OLE DB Simple Provider in Visual Basic.</p>
<h4>Building a Simple Provider in Visual Basic 6</h4>
<ol>
<li>
Start Microsoft Visual Basic. From the <b>File</b> menu, select <b>New Project</b>. The <b>New Project</b> dialog box appears. Use this dialog box to select the ActiveX DLL icon.<br><br></li>
<li>
From the <b>Project</b> menu, select <b>References</b>. The <b>References</b> dialog box appears, listing the available references. Select the <b>Microsoft</b> <b>OLE DB Simple Provider 1.5 Library</b> check box.<p class=tl>
When you select <b>Object Browser</b> from the <b>View</b> menu or press F2 to display the <b>Object Browser</b> dialog box, the classes OLEDBSimpleProvider and OLEDBSimpleProviderListener should appear in the Classes pane of the Object Browser. You can focus on these classes and their members by selecting <b>MSDAOSP</b> in the <b>Project/Library</b> list.</P></li>
<li>
From the <b>Project</b> menu, select <b>Add Class Module</b>. The <b>Add Class Module</b> dialog box appears. Use this dialog box to select and open the Class Module icon. In the Procedure (Declarations) of the Object (General) inside the Code window, type the following as your first line of code:<p class=tl>
<span class=cfe><b><code>Implements OLEDBSimpleProvider</code></b></span></P></li>
<li>
Now you can develop your own simple provider class. Use the <a href="pw_ospintro_7ai7.htm">OSP language reference</a> supplied with the Toolkit to implement all the OSP methods. You can view the sample code in the file MyOSPObject.cls as a reference.<br><br></li>
<li>
You also need to add a Data Source class and its <b>GetDataMember</b> function. Add a second class to your project and in its <b>Properties</b> window, select <b>DataSourceBehavior = "1 - vbDataSource"</b>. In the <b>Object</b> drop-down box, select <b>Class</b>. In the <b>Procedure</b> drop-down box, select <b>GetDataMember</b>. Implement the <b>GetDataMember</b> by using the <b>DataMember</b> input argument to determine a simple provider object to return. For example,<pre><code>Private Sub Class_GetDataMember(Datamember As String, Data As Object)
Dim MyOSP As New MyOSPObject
Set Data = MyOSP
End Sub
</code></pre>
</li>
<li>
From the <b>File</b> menu, select <b>Make</b> <b><i>ProjectName</i>.dll…</b> to build and register your provider.</li>
</ol>
<h4>Registration</h4>
<p>
As part of the information required to register the provider, you need a ProgID for the <a href="pw_toverview_4fxz.htm#oledbpwk_odooverview">OSP Data Object</a>. </p>
<p>
In Visual Basic, the ProgID is the project name followed by the name of the data source object class or control name on which the OSP Data Object is implemented. The two names are separated with a "." (period).</p>
<p>
For example, suppose you have a project named "MyOSPProject", and a class that implements the <b>msDataSourceObject</b> method named "MyOSPClass". The ProgID will be "MyOSPProject.MyOSPClass". The Version-Independent ProgID will be " MyOSPProject.MyOSPClass.1".</p>
<h4>Programming Notes for Visual Basic 5 Users</h4>
<ul type=disc>
<li>
In Visual Basic 5 implementations, use <a href="pw_msdso_36t0.htm">msDataSourceObject</a> and the appropriate <b>IDispatch</b> methods (such as <b>Invoke</b>) to expose the correct OSP implementation to the <a href="pw_toverview_4fxz.htm#oledbpwk_oledbmappinglayer">Simple Provider DLL</a> (MSDAOSP.DLL).<br><br></li>
<li>
When coding data source notifications in Visual Basic 5, use the <a href="pw_msdso_42b6.htm">addDataSourceListener</a> and <a href="pw_msdso_42b6.htm">removeDataSourceListener</a> methods with <b>IDispatch</b>.<br><br></li>
<li>
Make sure to code the implementation for the <b>addDataSourceListener</b> method in your OSP Data Object. Implementing <b>msDataSourceObject</b> without implementing <b>addDataSourceListener</b> will result in a run-time error when your data source is being used.<br><br></li>
<li>
For Visual Basic 5 users, Step 5 in the previous procedure is:<p class=tl>
You also need to implement two data source functions. Add a second class module and implement <a href="pw_msdso_36t0.htm">msDataSourceObject</a> and <a href="pw_msdso_42b6.htm">addDataSourceListener</a>. For example:</P><p class=tl>
<span class=cfe><b><code>Public Function msDataSourceObject(DataMember$)</code></b></span></P><p class=tl>
<span class=cfe><b><code>AS OLEDBSimpleProvider</code></b></span></P><p class=tl>
You can view the sample code in the file MyDataSource.cls as a reference.</P></li>
</ul>
</font></BODY>
</HTML>

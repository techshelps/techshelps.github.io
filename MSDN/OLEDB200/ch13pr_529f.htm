<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Lookup Services</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledberror_lookup_services"></a>Error Lookup Services</h1>
<p>
The ERRORINFO structure does not contain the error messages and help file information that <b>IErrorInfo</b> can return. Instead, this information is stored in a provider-specific lookup service. There are several reasons for this. First, it allows the information to be easily localized. Second, it means that the information is not created and passed around until it is requested. Third, it provides an easy mechanism by which the provider can parameterize error messages.</p>
<p>
The information in this lookup service can be created when the lookup service is written or it can be created at run time. The former case, known as <i>static errors</i>, is common when the lookup service is tied to a single database and the programmer knows ahead of time what the error messages are. For example, a provider built directly over an Oracle database might use static errors.</p>
<p>
The latter case, known as <i>dynamic errors</i>, is common when the lookup service is not tied to any particular database and the programmer cannot predict the error messages. For example, a provider built on top of any ODBC driver might use dynamic errors. The lookup service creates dynamic errors at run time and releases them when the error object with which they are associated calls <b>IErrorLookup::ReleaseErrors</b> as part of its release code. Dynamic errors are identified by a <i>dynamic error ID.</i> In most cases, all dynamic errors associated with a single error object have the same ID. This is not required, but it is more efficient when releasing error objects.</p>
<p>
An error lookup service must be created by each provider that supports OLE DB error objects. The lookup service exposes the <b>IErrorLookup</b> interface. For information about the registry entries used by error lookup services, see "<a href="ch14pr_3q5v.htm">Error Lookup Service Registry Entries</a>" in Chapter 14.</p>
<p>
When a consumer calls <b>IErrorInfo::GetDescription</b> or <b>IErrorInfo::GetSource</b> for a particular record in an OLE DB error object, the error object creates an instance of the error lookup service. It then calls <b>IErrorLookup::GetErrorDescription</b> and passes the <i>hrError</i> element of the ERRORINFO structure in the record, along with the lookup ID, the locale ID, and the parameters. <b>GetErrorDescription</b> uses the information provided to retrieve the error description and inserts the parameters into this description. However, if the lookup ID is set to IDENTIFIER_SDK_ERROR, the error object bypasses the error lookup service and retrieves the error description from the error resource DLL shipped with the OLE DB SDK. Finally, the error object returns the completed, localized error message and source to the error object, which returns them to the consumer.</p>
<p>
A similar process occurs when the consumer calls <b>IErrorInfo::GetHelpFile</b> or <b>IErrorInfo::GetHelpContext</b>, although no parameters are passed. If the lookup ID is set to IDENTIFIER_SDK_ERROR, then the error object uses the error lookup service to get the Help file and Help context ID.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Views</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbviews"></a>Views</h1>
<p>
Providers that do not support full command syntax can still expose simple operations such as sorting or filtering a rowset by applying a view. Views may be applied when opening a rowset, or they may be applied to an existing rowset in order to return either a new chapter on that rowset or a completely new rowset with the additional functionality.</p>
<p>
Views are similar to commands, with the following restrictions:
<ul type=disc>
<li>
The source of the rowset is a single table, fixed at the time the view is created.<br><br></li>
<li>
Views support only simple operations such as filtering and sorting. They do not support complex semantics such as subqueries, joins, or dynamic parameters.<br><br></li>
<li>
View operations are expressed through method calls as opposed to textual statements.</li>
</ul>
<p>
Views:</p>
<pre><code>   CoType TView {
      [mandatory] interface IColumnsInfo;
      [optional]&nbsp; interface IAccessor;
      [optional]&nbsp; interface ISupportErrorInfo;
      [optional]&nbsp; interface IViewChapter;
      [optional]&nbsp; interface IViewFilter;
      [optional]&nbsp; interface IViewRowset;
      [optional]&nbsp; interface IViewSort;
   };
</code></pre>
<p>
Views are created in one of two ways:
<ul type=disc>
<li>
<b>Applying a view when opening a rowset.</b> In order to apply a view when opening a rowset, the following steps occur:<ol>
<li>
The consumer requests that IID_IViewRowset be supported when executing a method that returns a rowset, either by setting the DBPROP_IViewRowset property, or by requesting IID_IViewRowset on the returned rowset. The method returns a view object in place of the rowset.<br><br></li>
<li>
The consumer applies operations such as filtering and sorting to the view object through interfaces such as <b>IViewFilter</b> and <b>IViewSort</b>.<br><br></li>
<li>
The consumer calls <b>IViewRowset::OpenViewRowset</b> on the view object in order to return the actual rowset.</li>
</ol>
</li>
<li>
<b>Applying a view to an existing rowset.</b> In order to apply a view to an existing rowset, the following steps occur:<ol>
<li>
The consumer calls <b>IRowsetView::CreateView</b> on the rowset.<br><br></li>
<li>
The consumer applies operations such as filtering and sorting to the view object through interfaces such as <b>IViewFilter</b> and <b>IViewSort</b>.<br><br></li>
<li>
The consumer calls <b>IViewChapter::OpenViewChapter</b> on the view to return a new chapter on the original rowset that reflects the view operations.<br>
- or -<br>
The consumer calls <b>IViewRowset::OpenViewRowset</b> on the view in order to return a new rowset with the view operations applied.</li>
</ol>
</li>
</ul>
</font></BODY>
</HTML>

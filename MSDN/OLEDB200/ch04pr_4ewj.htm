<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deferred Columns</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbdeferred_columns"></a>Deferred Columns</h1>
<p>
For a <i>deferred</i> column, the provider is not required to retrieve data from the data source until <b>IRowset::GetData</b> is called for that column, or, if the column contains an OLE object, until a method used to access that object is called. It is provider specific when the data in a deferred column is actually retrieved. For example, it might be retrieved when the command is executed, when the row handle is fetched, lazily in the background, or when <b>GetData</b> or a method on another interface is called for the column. If a column is deferred, the DBCOLUMNFLAGS_MAYDEFER enumerated type flag returned by <b>IColumnsInfo::GetColumnsInfo</b> is set for the column.</p>
<p>
Whether the data for a deferred column is cached depends on the setting of the DBCOLUMNFLAGS_CACHEDEFERRED flag returned by <b>GetColumnsInfo</b>. If this flag is set, the column value is cached when first read. The cached value is returned whenever the column is read. It can be changed by calling <b>IRowsetChange::SetData</b> or <b>IRowsetRefresh::RefreshVisibleData</b> and is released only when the row handle is released. If the DBCOLUMNFLAGS_CACHEDEFERRED flag is not set, then multiple calls to <b>GetData</b> (or the method used to read the column, if the column contains OLE objects) can return different values. Such calls are not guaranteed to reflect a change to the underlying column unless <b>RefreshVisibleData</b> has been called.</p>
<p>
To use a deferred column, the consumer sets the DBPROP_DEFERRED property; columns that contain OLE objects are deferred by default.</p>
<p>
The consumer should be aware of an increased isolation risk of using deferred columns because deferred data might be read at a different time than nondeferred data. If the consumer is not using Repeatable Read isolation or better, then it may encounter discrepancies between the original and the deferred access to a row. In particular, the consumer may find that the column is missing because the row has been deleted, or the column may not match the rest of the row. Under some circumstances, use of a row version column in conjunction with both original and deferred access can be used to warn a consumer about a situation where a concurrent error has occurred; a consumer can determine whether a column contains a row version with the DBCOLUMNFLAGS_ISROWVER flag in <b>GetColumnInfo</b>.</p>
</font></BODY>
</HTML>

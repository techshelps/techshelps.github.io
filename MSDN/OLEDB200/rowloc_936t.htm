<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRowsetLocate::Compare</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbirowsetlocate__compare"></a>IRowsetLocate::Compare</h1>
<p>
Compares two bookmarks.</p>
<pre><code>HRESULT Compare (
   HCHAPTER         hChapter,
   ULONG            cbBookmark1,
   const BYTE *         pBookmark1,
   ULONG            cbBookmark2,
   const BYTE *         pBookmark2,
   DBCOMPARE *   pComparison);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hChapter</i></p>
<p class=indent>
[in]<br>
The chapter handle. For nonchaptered rowsets, <i>hChapter</i> is ignored.</p>
<p class=dt>
<i>cbBookmark1</i></p>
<p class=indent>
[in]<br>
The length in bytes of the first bookmark.</p>
<p class=dt>
<i>pBookmark1</i></p>
<p class=indent>
[in]<br>
A pointer to the first bookmark. This can be a pointer to DBBMK_FIRST or DBBMK_LAST.</p>
<p class=dt>
<i>cbBookmark2</i></p>
<p class=indent>
[in]<br>
The length in bytes of the second bookmark.</p>
<p class=dt>
<i>pBookmark2</i></p>
<p class=indent>
[in]<br>
A pointer to the second bookmark. This can be a pointer to DBBMK_FIRST or DBBMK_LAST.</p>
<p class=dt>
<i>pComparison</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return a flag that specifies the result of the comparison. The returned flag will be one of the following values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=571>
<tr valign=top>
<td class=label width=50%><b>Value</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>DBCOMPARE_LT</td>
<td width=50%>The first bookmark is before the second.</td>
</tr>
<tr valign=top>
<td width=50%>DBCOMPARE_EQ</td>
<td width=50%>The two bookmarks are equal.</td>
</tr>
<tr valign=top>
<td width=50%>DBCOMPARE_GT</td>
<td width=50%>The first bookmark is after the second.</td>
</tr>
<tr valign=top>
<td width=50%>DBCOMPARE_NE</td>
<td width=50%>The bookmarks are not equal and not ordered.</td>
</tr>
<tr valign=top>
<td width=50%>DBCOMPARE_NOTCOMPARABLE</td>
<td width=50%>The two bookmarks cannot be compared.</td>
</tr>
</table><br>
<p class=label>
<b><br>
Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded.</p>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>cbBookmark1</i> or <i>cbBookmark2</i> was zero.</p>
<p class=tl>
<i>pBookmark1</i>, <i>pBookmark2</i>, or <i>pComparison</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
<b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was called and the object is in a zombie state.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADBOOKMARK<br>
*<i>pBookmark1</i> or *<i>pBookmark2</i> was invalid, incorrectly formed, or DBBMK_INVALID.</p>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Consumers should only attempt to use bookmarks that they have received from the provider. The provider is guaranteed only to handle bookmarks it gives out in a predictable manner. Attempting to use a random value as a bookmark is undefined; the provider may return DB_E_BADBOOKMARK, may return an unexpected row, or may terminate abnormally.</p><p class=dt>
</p>
<p class=indent>
DB_E_BADCHAPTER<br>
The rowset was chaptered and <i>hChapter</i> was invalid.</p>
<p class=tl>
The rowset was single-chaptered and the specified chapter was not the currently open chapter. The consumer must use the currently open chapter or release the currently open chapter before specifying a new chapter.</P><p class=dt>
</p>
<p class=indent>
DB_E_NOTREENTRANT<br>
The provider called a method from <b>IRowsetNotify</b> in the consumer that had not yet returned, and the provider does not support reentrancy in this method.<br>
</p>
<p class=label>
<b>Comments</b></p>
<p>
This method makes no logical change to the state of the object.</p>
<p>
If bookmarks are ordered, they can be compared to determine the relative position of their associated rows in the rowset. The DBPROP_ORDEREDBOOKMARKS property indicates whether bookmarks are ordered. If bookmarks are not ordered, then the returned comparison value will be DBCOMPARE_EQ or DBCOMPARE_NE. If bookmarks are ordered, then the returned comparison value will be DBCOMPARE_LT, DBCOMPARE_EQ, or DBCOMPARE_GT. The command that creates the rowset does not have to have an ordered text command, such as an SQL statement containing an <b>ORDER BY</b> clause, to have ordered bookmarks.</p>
<p>
<b>Compare</b> can compare any valid bookmarks. The consumer is not required to have permission to read the corresponding rows, nor are the rows even required to exist&nbsp;— for example, they might have been deleted.</p>
<p>
If the DBPROP_LITERALBOOKMARKS property is VARIANT_TRUE, then consumers can directly compare values.</p>
<p>
Specifying the bookmark DBBMK_FIRST or DBBMK_LAST returns DBCOMPARE_EQ when compared with itself and DBCOMPARE_NE when compared with any other bookmark.<br>
</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="rowloc_72nc.htm">IRowsetLocate::Hash</a>, <a href="rowide_8g1j.htm">IRowsetIdentity::IsSameRow</a></p>
</font></BODY>
</HTML>

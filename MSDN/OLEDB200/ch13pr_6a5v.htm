<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Records</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledberror_records"></a>Error Records</h1>
<p>
Records in OLE DB error objects are numbered starting from zero. The methods in <b>IErrorRecords</b> allow consumers to specify the record from which to retrieve error information. As error records are added, they are added to the top of the list (that is, the number of the existing error records is increased by 1 and a new record 0 is added), so consumers can start with the highest level of error information and then retrieve increasingly more detailed information.</p>
<p>
Each error record is composed of five parts: an ERRORINFO structure, error parameters, a pointer to a custom error object, a dynamic error ID, and a lookup ID.</p>
<h1>ERRORINFO Structure</h1>
<p>
The ERRORINFO structure returns most of the basic information associated with an error:</p>
<p>
typedef struct tagERRORINFO {</p>
<p>
&nbsp;HRESULT hrError;</p>
<p>
&nbsp;DWORD dwMinor;</p>
<p>
&nbsp;CLSID clsid;</p>
<p>
&nbsp;IID&nbsp;&nbsp; iid;</p>
<p>
&nbsp;DISPID&nbsp; dispid;</p>
<p>
} ERRORINFO;</p>
<pre></pre>
<p>
The elements of this structure are used as follows.</p>
<p class=label>
<b>The ERRORINFO structure</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>Element</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%><i>hrError</i></td>
<td width=78%>The code returned by the method. This might be different in different records in the error object. For example, suppose a query processor service component opens rowsets provided by base table data providers. If <b>ICommand::Execute</b> in the query processor calls <b>IOpenRowset::OpenRowset</b> in a base table data provider and <b>OpenRowset</b> fails with DB_E_NOTABLE, <b>Execute</b> might return DB_E_ERRORSINCOMMAND.</td>
</tr>
<tr valign=top>
<td width=22%><i>dwMinor</i></td>
<td width=78%>A provider-specific error code.</td>
</tr>
<tr valign=top>
<td width=22%><i>clsid</i></td>
<td width=78%>The class ID of the object that returned the error.</td>
</tr>
<tr valign=top>
<td width=22%><i>iid</i></td>
<td width=78%>The interface ID of the interface that generated the error. <i>iid</i> can be different from the ID of the interface that defines the method the consumer called. For example, if a consumer calls <b>Execute</b> in a query processor, the query processor calls <b>OpenRowset</b> in a base table data provider, and <b>OpenRowset</b> fails, <i>iid</i> is IID_IOpenRowset, not IID_ICommand.<p>
If the method that generates an error belongs to more than one interface due to inheritance, this is the ID of the first interface in which the method is defined. For example, suppose <b>IRowsetLocate::GetRowsAt</b> is called through a pointer to <b>IRowsetScroll</b>, which inherits from <b>IRowsetLocate</b>. If <b>GetRowsAt</b> fails, <i>iid</i> is IID_IRowsetLocate, not IID_IRowsetScroll.</p>
</td>
</tr>
<tr valign=top>
<td width=22%><i>dispid</i></td>
<td width=78%>If defined, this might indicate the method that returned the error.</td>
</tr>
</table><br>
<h1>Error Parameters</h1>
<p>
Error parameters are provider-specific values that are incorporated into error messages. For example, the provider might associate the error message<code> Cannot open table &lt;param1&gt; </code>with a <i>dwMinor</i> value of 10.</p>
<p>
In the example, the error parameters would be used to supply the name of the table that could not be opened. Error parameters are inserted into error messages by a provider-specific <i>error lookup service</i>. Thus, the format of error parameters and how they are substituted into error messages are completely provider specific. The code in <b>IErrorInfo</b> calls the error lookup service. For more information, see "<a href="ch13pr_529f.htm">Error Lookup Services</a>" later in this chapter.</p>
<h1>Custom Error Objects</h1>
<p>
Associated with each error record is a custom error object. An interface pointer to the object is stored in the record. If no custom error object exists, this pointer is null. The custom error object is the mechanism by which OLE DB error objects are extensible.</p>
<p>
When an error record is added, the error object calls <b>AddRef</b> to add a reference to the custom error object. The provider that created the custom error object calls <b>Release</b> to release its hold on the custom error object. Thus, ownership of the custom error object is effectively transferred from the provider to the error object. The error object releases all custom error objects when it is released.</p>
<p>
For example, ODBC-related providers can expose <b>ISQLErrorInfo</b> on a custom error object to return the SQLSTATE value. For more information, see <a href="errsql_4uwf.htm">ISQLErrorInfo</a>.</p>
<h1>Dynamic Error ID</h1>
<p>
The dynamic error ID is the ID of an error message created at run time by the error lookup service, as opposed to an error message hard-coded in the lookup service. The error object uses the dynamic error ID to release the dynamic error message when the error object is released. In most cases, all error messages associated with a single error object have the same dynamic error ID. For more information, see "<a href="ch13pr_529f.htm">Error Lookup Services</a>" later in this chapter.</p>
<h1>Lookup ID</h1>
<p>
The error lookup service uses the lookup ID in conjunction with the return code to identify the error description, Help file, and context ID for a specific error. The lookup ID also can be a special value, IDENTIFIER_SDK_ERROR, that tells the implementation of <b>IErrorInfo</b> that is shipped with the OLE DB SDK to ignore the provider's lookup service and use the description supplied in the error resource DLL shipped with the OLE DB SDK. For more information, see "<a href="ch13pr_529f.htm">Error Lookup Services</a>" later in this chapter.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRowsetUpdate::GetOriginalData</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbirowsetupdate__getoriginaldata"></a>IRowsetUpdate::GetOriginalData</h1>
<p>
Gets the data most recently fetched from or transmitted to the data source; does not get values based on pending changes.</p>
<pre><code>HRESULT GetOriginalData (
   HROW            hRow,
   HACCESSOR   hAccessor,
   void *            pData);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>hRow</i></p>
<p class=indent>
[in]<br>
The handle of the row for which to get the original data. This can be the handle of a row with a pending change or delete.</p>
<p class=dt>
<i>hAccessor</i></p>
<p class=indent>
[in]<br>
The handle of the accessor to use. If <i>hAccessor</i> is the handle of a null accessor (<i>cBindings</i>in <b>IAccessor::CreateAccessor</b> was zero), then <b>GetOriginalData</b> does not get any data values.</p>
<p class=dt>
<i>pData</i></p>
<p class=indent>
[out]<br>
A pointer to a buffer in which to return the data. The consumer allocates memory for this buffer.</p>
<p class=dt>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded. The status of all columns bound by the accessor is set to DBSTATUS_S_OK, DBSTATUS_S_ISNULL, or DBSTATUS_S_TRUNCATED.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
A row handle in <i>rghRows</i> referred to a row on which a storage object or OLE object was open. The corresponding element of *<i>prgRowStatus</i> contains DBROWSTATUS_E_OBJECTOPEN.<br>
<br>
An error occurred while returning data for one or more columns, but data was successfully returned for at least one column. To determine the columns for which data was returned, the consumer checks the status values. For a list of status values that can be returned by this method, see "Status Values Used When Getting Data" in "<a href="ch06pr_5q9f.htm">Status</a>" in Chapter 6.</p>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>pData</i> was a null pointer and <i>hAccessor</i> was not a null accessor.</p>
<p class=dt>
</p>
<p class=indent>
E_UNEXPECTED<br>
<b>ITransaction::Commit</b> or <b>ITransaction::Abort</b> was called and the object is in a zombie state.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADACCESSORHANDLE<br>
<i>hAccessor</i> was invalid. It is possible for a reference accessor or an accessor that has a binding that uses provider-owned memory to be invalid for use with this method, even if the accessor is valid for use with <b>IRowset::GetData</b> or <b>IRowsetChange::SetData</b>.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADACCESSORTYPE<br>
The specified accessor was not a row accessor.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADROWHANDLE<br>
<i>hRow</i> was invalid.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_DELETEDROW<br>
<i>hRow</i> referred to a row for which a deletion had been transmitted to the data source.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
Errors occurred while returning data for all columns. To determine what errors occurred, the consumer checks the status values. For a list of status values that can be returned by this method, see "Status Values Used When Getting Data" in "<a href="ch06pr_5q9f.htm">Status</a>" in Chapter 6.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTREENTRANT<br>
The provider called a method from <b>IRowsetNotify</b> in the consumer that had not yet returned, and the provider does not support reentrancy in this method.</p>
<p>
If this method performs deferred accessor validation and that validation takes place before any data is transferred, it can also return any of the following return codes for the applicable reasons listed in the corresponding DBBINDSTATUS values in <b>IAccessor::CreateAccessor:</b></p>
<p>
E_NOINTERFACE<br>
DB_E_BADBINDINFO<br>
DB_E_BADORDINAL<br>
DB_E_BADSTORAGEFLAGS<br>
DB_E_UNSUPPORTEDCONVERSION</p>
<p class=label>
<b>Comments</b></p>
<p>
This method makes no logical change to the state of the object.</p>
<p>
<b>GetOriginalData</b> retrieves the values the row contained when it was last fetched or had changes transmitted to the data source. It does not retrieve any pending changes or changes made by other rowsets in the same transaction or other applications in other transactions. It also does not affect the current values for the row. For a complete description of how <b>GetOriginalData</b> retrieves data, see "<a href="ch06pr_54dd.htm">Getting Data</a>" in Chapter 6.</p>
<p>
How <b>GetOriginalData</b> works is best illustrated in the following examples. In the first example, <b>GetOriginalData</b> fetches the values last fetched from the data source:
<ol>
<li>
The consumer fetches a row.<br><br></li>
<li>
The consumer calls <b>IRowsetChange::SetData</b> to update values in the row.<br><br></li>
<li>
The consumer calls <b>GetOriginalData</b>. The consumer retrieves the values it would have retrieved had it called <b>IRowset::GetData</b> after step 1 and before step 2.</li>
</ol>
<p>
In the second example, <b>GetOriginalData</b> fetches the values last transmitted to the data source:
<ol>
<li>
The consumer fetches a row.<br><br></li>
<li>
The consumer calls <b>SetData</b> to update values in the row.<br><br></li>
<li>
The consumer calls <b>Update</b>.<br><br></li>
<li>
The consumer calls <b>SetData</b> to update values in the row.<br><br></li>
<li>
The consumer calls <b>GetOriginalData</b>. The consumer retrieves the values it would have retrieved had it called <b>GetData</b> after step 3 and before step 4.</li>
</ol>
<p>
To implement <b>GetOriginalData</b>, the provider usually caches the original values just before making a change to a row and discards the cached values when <b>Undo</b> or <b>Update</b> is called for the row.</p>
<p>
If <i>hRow</i> refers to a pending insert row, <b>GetOriginalData</b> returns the column defaults and, for columns without defaults or for which the provider was unable to determine the defaults, NULLs.</p>
<p>
Whether <b>GetOriginalData</b> can retrieve the original value of an OLE object that is stored in a column, or a storage object that is created over a BLOB after changes have been made to that OLE object or BLOB, depends on the value of the DBPROP_DELAYSTORAGEOBJECTS rowset property.</p>
<p>
There is a difference between calling <b>GetOriginalData</b> and calling <b>GetLastVisibleData</b>. In a delayed update mode, if data is changed by another consumer, different consumers may retrieve different data. For example, the value in Column 1 is X. In a delayed update mode, Consumer A changes the value in that column to Y but does not transmit this action to the data source. Consumer B then changes the value in Column 1 to Z. If Consumer A calls <b>GetOriginalData</b>, it gets X. However, if it calls <b>GetLastVisibleData</b>, using a dirty read, it will retrieve Z.</p>
<p>
<b>GetOriginalData</b> does not enforce any security restrictions. The provider must not create a rowset that includes columns for which the consumer does not have read privileges, so <b>GetOriginalData</b> never encounters problems accessing the data for a column. The rowset can contain columns to which the consumer does not have write permission if DBPROP_COLUMNRESTRICT is VARIANT_TRUE. The methods that fetch rows must not return the handles of rows for which the consumer does not have read privileges, so <b>GetOriginalData</b> never encounters problems accessing a row. Such rows might exist if the DBPROP_ROWRESTRICT property is VARIANT_TRUE.</p>
<p>
If <b>GetOriginalData</b> fails, the memory to which <i>pData</i> points is not freed but its contents are undefined. If, before <b>GetOriginalData</b> failed, the provider allocated any memory for return to the consumer, the provider frees this memory and does not return it to the consumer.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="rowset_64f5.htm">IRowset::GetData</a>, <a href="rowres_2v6p.htm">IRowsetRefresh::GetLastVisibleData</a>, <a href="rowupd_2xyn.htm">IRowsetUpdate::Undo</a>, <a href="rowupd_49gl.htm">IRowsetUpdate::Update</a></p>
</font></BODY>
</HTML>

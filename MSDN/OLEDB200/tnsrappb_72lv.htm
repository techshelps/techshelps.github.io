<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Expressions</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="expressions"></a>Expressions</h1>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The syntax of &lt;value_expression&gt; is generally the same as SQL-92, subclause 6.11, &lt;value_expression&gt;. Differences are:
<ul type=disc>
<li>
&lt;tuple&gt;[.VALUE], &lt;property&gt;[.VALUE], and &lt;conditional_expression&gt; are new values for &lt;value_expression_primary&gt;.<br><br></li>
<li>
There are new values for &lt;numeric_value_function&gt;, mainly for statistical analysis.<br><br></li>
<li>
The BNF for &lt;value_expression_primary&gt;, &lt;character_string_literal&gt;, and &lt;string_value_expression&gt; have been shortened by eliminating several intermediate nonterminals.</li>
</ul>
<pre><code>&nbsp;
&lt;value_expression&gt; ::= &lt;numeric_value_expression&gt; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &lt;string_value_expression&gt; 

&lt;numeric_value_expression&gt; ::= &lt;term&gt; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &lt;numeric_value_expression&gt; {&lt;plus&gt; | &lt;minus&gt;} &lt;term&gt;

&lt;term&gt; ::= &lt;factor&gt; | &lt;term&gt; {&lt;asterisk&gt; | &lt;solidus&gt;} &lt;factor&gt;

&lt;factor&gt; ::= [&lt;sign&gt;] &lt;numeric_primary&gt;

&lt;sign&gt; ::= + | -

&lt;plus&gt; ::= +

&lt;minus&gt; ::= -

&lt;asterisk&gt;::= *

&lt;solidus&gt; ::= /

&lt;numeric_primary&gt; ::= &lt;value_expression_primary&gt; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &lt;numeric_value_function&gt;</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The data type of &lt;value_expression_primary&gt; in the above production shall be numeric.</p>
<pre><code>&nbsp;
&lt;value_expression_primary&gt; ::= &lt;unsigned_numeric_literal&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | (&lt;value_expression&gt;)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; &lt;character_string_literal&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | [&lt;cube_name&gt;.]&lt;tuple&gt;[.VALUE]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; &lt;property&gt;[.VALUE]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp; &lt;conditional_expression&gt;

&lt;conditional_expression&gt; ::= &lt;if_expression&gt; | &lt;case_expression&gt;

&lt;if_expression&gt; ::= iif(&lt;search_condition&gt;, &lt;true_part&gt;, &lt;false_part&gt;)

&lt;true_part&gt; ::= &lt;value_expression&gt;

&lt;false_part&gt; ::= &lt;value_expression&gt;

&lt;case_expression&gt; ::= &lt;simple_case&gt; | &lt;searched_case&gt; | &lt;coalesce_empty&gt;

&lt;simple_case&gt; ::= CASE &lt;case_operand&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;simple_when_clause&gt;...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [&lt;else_clause&gt;]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END

&lt;searched_case&gt; ::= CASE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;searched_when_clause&gt;...
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [&lt;else_clause&gt;]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; END

&lt;simple_when_clause&gt; ::= WHEN &lt;when_operand&gt; THEN &lt;result&gt;

&lt;searched_when_clause&gt; ::= WHEN &lt;search_condition&gt; THEN &lt;result&gt;

&lt;else_clause&gt; ::= ELSE &lt;value_expression&gt;

&lt;case_operand&gt; ::= &lt;value_expression&gt;

&lt;when_operand&gt; ::= &lt;value_expression&gt;

&lt;result&gt; ::= &lt;value_expression&gt;

&lt;coalesce_empty&gt; ::= COALESCEEMPTY (&lt;value_expression&gt; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {, &lt;value_expression&gt; }...)

&lt;signed_numeric_literal&gt; ::= [&lt;sign&gt;]&lt;unsigned_numeric_literal&gt;

&lt;unsigned_numeric_literal&gt; ::= &lt;exact_numeric_literal&gt; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &lt;approximate_numeric_literal&gt;

&lt;exact_numeric_literal&gt; ::= &lt;unsigned_integer&gt;[.&lt;unsigned_integer&gt;]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &lt;unsigned_integer&gt;.
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | .&lt;unsigned_integer&gt;

&lt;unsigned_integer&gt; ::= {&lt;digit&gt;}...

&lt;approximate_numeric_literal&gt; ::= &lt;mantissa&gt;E&lt;exponent&gt;

&lt;mantissa&gt; ::= &lt; exact_numeric_literal&gt;

&lt;exponent&gt; ::= [&lt;sign&gt;]&lt;unsigned_integer&gt;

&lt;string_value_expression&gt; ::= &lt;value_expression_primary&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &lt;string_value_expression&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;concatenation_operator&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value_expression_primary&gt;</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The data type of &lt;value_expression_primary&gt; in the above production shall be a character string.</p>
<pre><code>&nbsp;
&lt;character_string_literal&gt;::= &lt;quote&gt;[&lt;character_representation&gt;...] 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;quote&gt;

&lt;character_representation&gt; ::= &lt;nonquote_character&gt; | &lt;quote_symbol&gt;

&lt;nonquote_character&gt; ::= !! 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;any_character_in_the_character_set_other_than_quote&gt;

&lt;quote_symbol&gt; ::= &lt;quote&gt; &lt;quote&gt;

&lt;quote&gt;  ::= ’

&lt;concatenation_operator&gt; ::= ||
</code></pre>
</font></BODY>
</HTML>

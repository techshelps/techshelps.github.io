<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Command Execution and Rowset Generation</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbasynchronous_command_execution_and_rowset_generation"></a>Asynchronous Command Execution and Rowset Generation</h1>
<p>
Consumers that want to asynchronously open a rowset set the DBPROPVAL_ASYNCH_INITIALIZE bit in the DBPROP_ROWSET_ASYNCH property. When setting this bit, it is permitted to ask for <b>IConnectionPointContainer</b> to obtain IID_IDBAsynchNotify, or IID_IDBAsynch, or IID_IUnknown (and <b>QueryInterface</b> for either of the other two interfaces).</p>
<p>
Additionally, if the consumer calls <b>Execute</b>, <b>OpenRowset</b>, <b>GetRowset</b>, <b>GetColumnsRowset</b>, <b>GetResult</b>, <b>GetSourcesRowset</b>, or any other method that returns a rowset, <i>riid</i> must be set to IID_IDBAsynchStatus or IID_IConnectionPointContainer.</p>
<p>
The method returns immediately with S_OK if the rowset initialization completes immediately, or DB_S_ASYNCHRONOUS if the rowset will continue initializing asynchronously, with <i>ppRowset</i> set to the requested interface on the rowset. Until the rowset is fully initialized, it behaves as if it is in a zombie state, and calling <b>QueryInterface</b> for interfaces other than IID_IConnectionPointContainer or IID_IDBAsynchStatus may return E_NOINTERFACE. Unless the consumer explicitly requests asynchronous processing, the rowset is initialized synchronously. All requested interfaces are available when the method requesting the rowset returns. This does not necessarily mean that the rowset is fully populated, but it must be complete and fully functional.</p>
<p>
If the executed command does not return a rowset, it still returns immediately with an object that supports <b>IDBAsynchStatus</b>.</p>
<p>
If output parameters are specified on the command, they are usually not available until the rowset is completely initialized, and may not be available until all of the data has been read from the rowset.</p>
<p>
To obtain multiple results, the consumer sets the DBPROPVAL_ASYNCH_INITIALIZE bit of the DBPROP_ROWSET_ASYNCH property prior to executing the command, then calls <b>ICommand::Execute </b>with<i> riid</i> set to IID_IMultipleResults, and finally <b>IMultipleResults::GetResult</b> with <i>riid</i> set to IID_IDBAsynchStatus to retrieve individual results asynchronously. When consumers request a multiple-results object from <b>Execute</b>, providers should return immediately with the multiple-results object, and save processing until the consumer calls <b>GetResult</b>.</p>
<p>
To cancel creation of the rowset, the consumer may call<b> IDBAsynchStatus::Abort</b>, or may simply release all interfaces on the rowset. Once the rowset's reference count goes to zero, any asynchronous processing is canceled and the rowset is released. Calling <b>IDBAsynchStatus::Abort</b> still requires releasing the interface. </p>
</font></BODY>
</HTML>

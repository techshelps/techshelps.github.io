<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rowset Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbrowset_objects"></a>Rowset Objects</h1>
<p>
Rowsets are the central object that enables all OLE DB data providers to expose data in tabular form. Conceptually, a rowset is a set of rows in which each row has columns of data. Base table providers present their data in the form of rowsets. Query processors present the result of queries in the form of rowsets. This makes it possible to layer components that consume or produce data through the same object. </p>
<p>
The most basic rowset object exposes four interfaces.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Interface</b></td>
<td class=label width=50%><b>Used for</b></td>
</tr>
<tr valign=top>
<td width=50%><b>IRowset</b></td>
<td width=50%>Contains methods for fetching rows in the rowset sequentially.</td>
</tr>
<tr valign=top>
<td width=50%><b>IAccessor</b></td>
<td width=50%>Permits the definition of groups of column bindings describing the way tabular data is bound to consumer program variables.</td>
</tr>
<tr valign=top>
<td width=50%><b>IColumnsInfo</b></td>
<td width=50%>Provides information about the columns of the rowset.</td>
</tr>
<tr valign=top>
<td width=50%><b>IRowsetInfo</b></td>
<td width=50%>Provides information about the rowset itself.</td>
</tr>
</table><br>
<p>
By using <b>IRowset</b>, a consumer can sequentially traverse the rows in the rowset, including traversing backward if the rowset supports it. The figure illustrates the data structures a generic rowset object might support.</p>
<p class=label>
<b>Data structures supported by a generic rowset object</b></p>
<p>
<img src="ch0103.gif" border=0></p>
<p>
Other rowset interfaces expose additional rowset capabilities. For example, there is an interface to insert, delete, and update rows and interfaces that expose richer row navigation models, such as direct access and scrollability. </p>
<p>
Rowsets are created in one of two ways. First, they can be created as the result of a query. Second, they can be created directly as the result of calling <b>IOpenRowset::OpenRowset</b>. All providers support creation by calling <b>IOpenRowset::OpenRowset</b>. However, simple providers — such as those built over a base table, index, file, or in-memory structure — generally do not support creation by query.</p>
<p>
Index rowsets are rowsets whose rows are formed from index entries. Index rowsets have the additional property of allowing efficient access to contiguous rows within a range of keys. They are used primarily by query processor components. Indexes abstract the functionality of B-trees and indexed-sequential files. </p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Interface</b></td>
<td class=label width=50%><b>Used for</b></td>
</tr>
<tr valign=top>
<td width=50%><b>IRowset</b></td>
<td width=50%>Traverses indexes.</td>
</tr>
<tr valign=top>
<td width=50%><b>IColumnsInfo</b></td>
<td width=50%>Obtains information about the index entries.</td>
</tr>
<tr valign=top>
<td width=50%><b>IRowsetChange</b></td>
<td width=50%>Performs insertions and deletions.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

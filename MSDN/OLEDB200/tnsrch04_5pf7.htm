<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Restrictions</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="restrictions"></a>Restrictions</h1>
<p>
The MEMBERS rowset can have up to 12 restrictions. The first 11 are straightforward — they are columns in the MEMBERS rowset: CATALOG_NAME, SCHEMA_NAME, CUBE_NAME, DIMENSION_UNIQUE_NAME, HIERARCHY_UNIQUE_NAME, LEVEL_UNIQUE_NAME, LEVEL_NUMBER, MEMBER_NAME, MEMBER_UNIQUE_NAME, MEMBER_CAPTION, and MEMBER_TYPE. The eleventh restriction, called the <i>tree operation</i>, is not on any particular column of the MEMBERS rowset; rather, it specifies a tree operator. The idea is that the consumer specifies a MEMBER_UNIQUE_NAME restriction and the tree operator (ANCESTORS, CHILDREN, SIBLINGS, PARENT, DESCENDANTS, SELF) to obtain the desired set of members. The SELF operator includes the row for the member itself in the list of returned rows. The following constants are defined in the header file:</p>
<pre><code>// tree operations on restriction 12 on members rowset
#define MDTREEOP_ANCESTORS      0x00000020
#define MDTREEOP_CHILDREN      0x00000001
#define MDTREEOP_SIBLINGS       0x00000002
#define MDTREEOP_PARENT       0x00000004
#define MDTREEOP_SELF&nbsp;&nbsp;       0x00000008
#define MDTREEOP_DESCENDANTS   0x00000010
</code></pre>
<p>
These designations comprise a bit mask and may be combined.</p>
<h2>Effect of Multiple Restrictions</h2>
<p>
For the most part, specifying more than one restriction results in each of the restrictions being joined by an AND operation. For example, if the consumer specifies a level name restriction of “General Managers” and the member name restriction of “Bill,” then the effect is to find “Bill” among “General Managers.”</p>
<p>
The sole exceptions to this rule are the tree operator restrictions. Tree operators operate on a particular member. This member is itself specified by using the other restrictions, such as member name, level name, level number, and so forth. The tree operator interacts with other restrictions as follows:
<ul type=disc>
<li>
All restrictions other than the tree operator are joined by an AND operation and applied to the MEMBERS rowset to get the members.<br><br></li>
<li>
The tree operator is then applied to these members to yield the required rows.</li>
</ul>
<p>
The consumer can combine more than one tree operator by using the bitwise-OR operator of C/C++. MDTREEOP_CHILDREN | MDTREEOP_SELF returns a rowset containing the list of children of the specified member and the member itself.</p>
<p>
The data type for the tree operator restriction that the provider expects in the <i>rgRestrictionsArray</i> parameter of <b>IDBSchemaRowset::GetRowset</b> is DBTYPE_I4.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>PARENT_UNIQUE_NAME is not a restriction because specifying the tree operator MEMBER_PARENT can do the same thing.</p>
<h2>Possibility of Duplicates</h2>
<p>
When using the tree operator restriction, it is possible that the resulting rowset will contain duplicate rows. For example, suppose that the non-tree restrictions select two members that are siblings of each other. The tree restriction is MDTREEOP_SIBLINGS. This will cause the list of siblings to be repeated in the resulting rowset because the list of siblings was specified twice.</p>
</font></BODY>
</HTML>

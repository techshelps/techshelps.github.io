<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BLOBs and OLE Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbblobs_and_ole_objects"></a>Overview of BLOBs and OLE Objects</h1>
<p>
Rowsets must support the efficient storage and retrieval of binary large objects (BLOBs) and OLE objects. To a rowset, a BLOB or OLE object is a large sequence of uninterpreted bytes that a consumer stores in a column. The consumer is entirely responsible for interpreting the contents of the BLOB or OLE object. The provider is responsible only for providing the mechanism or mechanisms with which the consumer stores and retrieves BLOBs and OLE objects.</p>
<p>
This chapter discusses the methods of accessing BLOB data as in-memory data, storage objects, and columns. Where in-memory data is treated as a sequence of bytes sent or retrieved in one piece, a storage object, which is the rowset that exposes storage interfaces, is retrieved or sent in pieces. The rows in the rowset act as <i>containers</i> of the storage objects. Limitations and lifetimes of storage objects are also discussed. OLE objects can also be stored in columns in a rowset, and are known as IPersist* objects. The manipulation, update semantics, and transaction considerations of IPersist* objects are explained.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=603>
<tr valign=top>
<td class=label width=50%><b>For more information on</b></td>
<td class=label width=50%><b>Go to</b></td>
</tr>
<tr valign=top>
<td width=50%>Accessing BLOB data</td>
<td width=50%>“<a href="ch07pr_47dt.htm">Accessing BLOB Data</a>” in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Column data</td>
<td width=50%>“<a href="ch07pr_8bcj.htm">Creating BLOB Columns</a>” in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>In-memory data</td>
<td width=50%>“<a href="ch07pr_1xb5.htm">BLOBs as In-Memory Data</a>” in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Storage object</td>
<td width=50%>“<a href="ch07pr_3zlf.htm">BLOBs as Storage Objects</a>” in this chapter</td>
</tr>
<tr valign=top>
<td width=50%>Rowsets</td>
<td width=50%>Chapter 4, “<a href="ch04pr_3sdv.htm">Rowsets</a>”</td>
</tr>
<tr valign=top>
<td width=50%>Limitations and lifetimes of storage objects</td>
<td width=50%>“<a href="ch07pr_778z.htm">Limitations of Storage Objects</a>” in this chapter<p>
“<a href="ch07pr_97qr.htm">Lifetime of Storage Objects</a>” in this chapter</p>
</td>
</tr>
<tr valign=top>
<td width=50%>IPersist* objects</td>
<td width=50%>“<a href="ch07pr_6e0j.htm">IPersist* Objects</a>” in this chapter</td>
</tr>
</table><br>
<p>
BLOBs and OLE objects fall into the following categories:
<ul type=disc>
<li>
<b>BLOB</b>—An uninterpreted sequence of bytes or characters. There is no behavior encapsulated in a BLOB. All the logic for interpreting a BLOB is in the consumer. The type indicator of a BLOB column is DBTYPE_BYTES, DBTYPE_STR, or DBTYPE_WSTR.<br><br></li>
<li>
<b>IPersist* object</b>—An OLE object supporting <b>IPersistStream</b>, <b>IPersistStreamInit</b>, or <b>IPersistStorage</b>. The type indicator of an IPersist* column is DBTYPE_IUNKNOWN.<br><br></li>
<li>
<b>Non-IPersist* object</b>—A COM object supporting some persistence model other than <b>IPersistStream</b>, <b>IPersistStreamInit</b>, or <b>IPersistStorage</b>. These are not supported in OLE DB, Version 1.5.<br><br></li>
<li>
<b>Abstract Data Type (ADT)</b>—An encapsulated object supporting a behavior not in the form of a COM interface. These are not supported in OLE DB, Version 1.5.</li>
</ul>
<p>
A consumer determines what types of BLOBs and OLE objects a provider supports by calling <b>IDBProperties::GetProperties</b> with the DBPROP_OLEOBJECTS property.</p>
</font></BODY>
</HTML>

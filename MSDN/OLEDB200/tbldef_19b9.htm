<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ITableDefinition::CreateTable</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbitabledefinition__createtable"></a>ITableDefinition::CreateTable</h1>
<p>
Creates a new base table in the data source.</p>
<pre><code>HRESULT CreateTable(
   IUnknown *            pUnkOuter,
   DBID *                  pTableID,
   ULONG               cColumnDescs,
   DBCOLUMNDESC   rgColumnDescs[],
   REFIID                  riid,
   ULONG               cPropertySets,
   DBPROPSET         rgPropertySets[],
   DBID **               ppTableID,
   IUnknown **            ppRowset);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pUnkOuter</i></p>
<p class=indent>
[in]<br>
The controlling unknown if the rowset is to be aggregated, otherwise a null pointer.</p>
<p class=dt>
<i>pTableID</i></p>
<p class=indent>
[in]<br>
A pointer to the ID of the table to create. If this is a null pointer, the provider must assign a unique ID to the table.</p>
<p class=dt>
<i>cColumnDescs</i></p>
<p class=indent>
[in]<br>
The number of DBCOLUMNDESC structures in the <i>rgColumnDescs</i> array. This can be zero if the provider allows the creation of tables with no columns.</p>
<p class=dt>
<i>rgColumnDescs</i></p>
<p class=indent>
[in/out]<br>
An array of DBCOLUMNDESC structures that describe the columns of the table.</p>
<pre><code>typedef struct tagDBCOLUMNDESC {
 LPOLESTR&nbsp; pwszTypeName;
 ITypeInfo * pTypeInfo;
 DBPROPSET * rgPropertySets;
 CLSID *&nbsp;&nbsp; pclsid;
 ULONG&nbsp;&nbsp; cPropertySets;
 ULONG&nbsp;&nbsp; ulColumnSize;
 DBID&nbsp;&nbsp;&nbsp; dbcid;
 DBTYPE&nbsp;&nbsp;&nbsp; wType;
 BYTE&nbsp;&nbsp;&nbsp; bPrecision;
 BYTE&nbsp;&nbsp;&nbsp; bScale;
} DBCOLUMNDESC;
</code></pre>
<p class=tl>
The elements of this structure are used as follows. The consumer generally decides the values to use in the non-properties elements of this structure based on values from the PROVIDER_TYPES schema rowset.<br>
</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows width=571>
<tr valign=top>
<td class=label width=25%><b>Element</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><i>pwszTypeName</i></td>
<td width=75%>The provider-specific name of the data type of the column. This name corresponds to a value in the TYPE_NAME column in the PROVIDER_TYPES schema rowset. In most cases, there is no reason for a consumer to specify a value for <i>pwszTypeName</i> that is different from the values listed in the PROVIDER_TYPES schema rowset.</td>
</tr>
<tr valign=top>
<td width=25%><i>pTypeInfo</i></td>
<td width=75%>If <i>pTypeInfo</i> is not a null pointer, then the data type of the column is an abstract data type (ADT) and values in this column are actually instances of the type described by the type library. <i>wType</i> may be either DBTYPE_BYTES with a length of at least 4, or it may be DBTYPE_IUNKNOWN. The instance values are required to be COM objects derived from <b>IUnknown</b>.</td>
</tr>
<tr valign=top>
<td width=25%><i>rgPropertySets</i></td>
<td width=75%>An array of DBPROPSET structures containing properties and values to be set. The properties specified in these structures must belong to the Column property group. All properties specified in <i>rgPropertySets</i> for this element of <i>rgColumnDescs</i> apply to the column specified by <i>dbcid</i>; the <i>colid</i> element in the DBPROP structure for specified properties is ignored. If the same property is specified more than once in <i>rgPropertySets</i>, then it is provider-specific which value is used. If <i>cPropertySets</i> is zero, this argument is ignored.<p>
For information about the properties in the Column property group that are defined by OLE DB, see "<a href="appcpr_8u7n.htm#oledbcolumn_properties">Column Properties</a>" in Appendix C. For information about the DBPROPSET and DBPROP structures, see "<a href="ch11pr_5pb9.htm">DBPROPSET Structure</a>" and "<a href="ch11pr_3xt1.htm">DBPROP Structure</a>" in Chapter 11.</p>
</td>
</tr>
<tr valign=top>
<td width=25%><i>pclsid</i></td>
<td width=75%>If the column contains OLE objects, a pointer to the class ID of those objects. If more than one class of objects can reside in the column, *<i>pclsid</i> is set to IID_NULL.</td>
</tr>
<tr valign=top>
<td width=25%><i>cPropertySets</i></td>
<td width=75%>The number of DBPROPSET structures in <i>rgPropertySets</i>. If this is zero, the provider ignores <i>rgPropertySets</i>.</td>
</tr>
<tr valign=top>
<td width=25%><i>ulColumnSize</i></td>
<td width=75%>If <i>wType</i> is DBTYPE_STR or DBTYPE_WSTR, this is the maximum length in characters for values in this column. If <i>wType</i> is DBTYPE_BYTES, this is the maximum length in bytes for values in this column. For all other values of <i>wType</i>, this is ignored. Providers that do not require a length argument in the specification of the provider type (<i>pwszTypeName</i>) ignore this value.</td>
</tr>
<tr valign=top>
<td width=25%><i>dbcid</i></td>
<td width=75%>The column ID of the column.</td>
</tr>
<tr valign=top>
<td width=25%><i>wType</i></td>
<td width=75%>The type indicator for the data type of the column. This name corresponds to a value in the DATA_TYPE column in the PROVIDER_TYPES schema rowset. In most cases, there is no reason for a consumer to specify a value for <i>wType</i> that is different from the values listed in the PROVIDER_TYPES schema rowset.</td>
</tr>
<tr valign=top>
<td width=25%><i>bPrecision</i></td>
<td width=75%>The maximum precision of data values in the column when <i>wType</i> is the indicator for a numeric type; it is ignored for all other data types. This must be within the limits specified for the type in the COLUMN_SIZE column in the PROVIDER_TYPES schema rowset. For information about the precision of numeric data types, see "<a href="appapr_04hf.htm">Precision of Numeric Data Types</a>" in Appendix A.</td>
</tr>
<tr valign=top>
<td width=25%><i>bScale</i></td>
<td width=75%>The scale of data values in the column when <i>wType</i> is DBTYPE_NUMERIC or DBTYPE_DECIMAL; it is ignored for all other data types. This must be within the limits specified for the type in the MINIMUM_SCALE and MAXIMUM_SCALE columns in the PROVIDER_TYPES schema rowset.</td>
</tr>
</table><br>
<p class=dt>
<i>riid</i></p>
<p class=indent>
[in]<br>
The IID of the interface to be returned for the resulting rowset; this is ignored if <i>ppRowset</i> is a null pointer.</p>
<p class=dt>
<i>cPropertySets</i></p>
<p class=indent>
[in]<br>
The number of DBPROPSET structures in <i>rgPropertySets</i>. If this is zero, the provider ignores <i>rgPropertySets</i>.</p>
<p class=dt>
<i>rgPropertySets</i></p>
<p class=indent>
[in/out]<br>
An array of DBPROPSET structures containing properties and values to be set. The properties specified in these structures must belong to the Rowset property group (for properties that apply to the rowset returned in *<i>ppRowset</i>) or the Table property group (for properties that apply to the table). If the same property is specified more than once in <i>rgPropertySets</i>, then it is provider-specific which value is used. If <i>cPropertySets</i> is zero, this argument is ignored.</p>
<p class=tl>
For information about the properties in the Rowset and Tables property groups that are defined by OLE DB, see "<a href="appcpr_8u7n.htm#oledbrowset_properties">Rowset Properties</a>" and "<a href="appcpr_8u7n.htm#oledbtable_properties">Table Properties</a>" in Appendix C. For information about the DBPROPSET and DBPROP structures, see "<a href="ch11pr_5pb9.htm">DBPROPSET Structure</a>" and "<a href="ch11pr_3xt1.htm">DBPROP Structure</a>" in Chapter 11.</P><p class=dt>
<i>ppTableID</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return the DBID of the newly created table. If <i>ppTableID</i> is a null pointer, no DBID is returned.</p>
<p class=dt>
<i>ppRowset</i></p>
<p class=indent>
[out]<br>
A pointer to memory in which to return the requested interface pointer on an empty rowset opened on the newly created table. If <i>ppRowset</i> is a null pointer, no rowset is created.</p>
<p class=dt>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded and the table is created and opened. In all DBPROP structures passed to the method, dwStatus is set to DBPROPSTATUS_OK.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
The table was created and the rowset was opened, but one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_OPTIONAL—were not set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were not set. The method can fail to set properties for a number of reasons, including:
<ul type=disc>
<li>
The property was not supported by the provider.<br><br></li>
<li>
The property was not in the Column, Rowset, or Table property group.<br><br></li>
<li>
The property set was not supported by the provider.<br><br></li>
<li>
It was not possible to set the property.<br><br></li>
<li>
<i>colid</i> in the DBPROP structure was not DB_NULLID.<br><br></li>
<li>
The data type in <i>vValue</i> in the DBPROP structure was not the data type of the property or was not VT_EMPTY.<br><br></li>
<li>
The value in <i>vValue</i> in the DBPROP structure was invalid.<br><br></li>
<li>
The property's value conflicted with an existing property.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>pTableID</i> and <i>ppTableID</i> were both null pointers.</p>
<p class=tl>
<i>cColumnDesc</i> was not zero or <i>rgColumnDescs</i> was a null pointer. cColumnDesc was zero and the provider does not support creating tables with no columns. </P><p class=tl>
<i>cPropertySets</i> was not zero and <i>rgPropertySets</i> was a null pointer.</P><p class=tl>
In an element of <i>rgPropertySets</i>, <i>cProperties</i> was not zero and <i>rgProperties</i> was a null pointer.</P><p class=tl>
In an element of <i>rgColumnDescs</i>, <i>cPropertySets</i> was not zero and <i>rgPropertySets</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
DB_E_BADCOLUMNID<br>
<i>dbcid</i> in an element of <i>rgColumnDescs</i> was an invalid column ID.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADTABLEID<br>
<i>*pTableID</i> was an invalid table ID.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADPRECISION<br>
The precision in an element of <i>rgColumnDescs</i> was invalid.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADSCALE<br>
The scale in an element of <i>rgColumnDescs</i> was invalid.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_BADTYPE<br>
One or more of the <i>wType</i>, <i>pwszTypeName</i>, and <i>pTypeInfo</i> elements in an element of <i>rgColumnDescs</i> was invalid.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_DUPLICATECOLUMNID<br>
<i>dbcid</i> was the same in two or more elements of <i>rgColumnDescs</i>.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_DUPLICATETABLEID<br>
The specified table already exists in the current data source.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
The table was not created and no rowset was returned because one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_REQUIRED or an invalid value—could not be set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were not set. The method can fail to set properties for any of the reasons specified in DB_S_ERRORSOCCURRED.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOAGGREGATION<br>
<i>pUnkOuter</i> was not a null pointer and the rowset being created does not support aggregation.</p>
<p class=indent>
<i>pUnkOuter</i> was non-null and <i>riid</i> was not IID_Unknown.</p>
<p class=dt>
</p>
<p class=indent>
DB_SEC_E_PERMISSIONDENIED<br>
The consumer did not have sufficient permission to create the table.</p>
<p class=indent>
DB_E_OBJECTOPEN<br>
The provider would have to open a new connection to support the operation and DBPROP_MULTIPLECONNECTIONS is set to VARIANT_FALSE.</p>
<p class=dt>
</p>
<p class=label>
<b>Comments</b></p>
<p>
If <i>ppRowset</i> is not a null pointer, an empty rowset is opened on the newly created table. If <b>CreateTable</b> returns any errors, the table is not created, and <i>ppTableID</i> is set to NULL on output.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="dbprop_3ffz.htm">IDBProperties::GetPropertyInfo</a>, <a href="tbldef_8oxa.htm">ITableDefinition::AddColumn</a>, <a href="tbldef_83e6.htm">ITableDefinition::DropColumn</a>, <a href="tbldef_9gbp.htm">ITableDefinition::DropTable</a></p>
</font></BODY>
</HTML>

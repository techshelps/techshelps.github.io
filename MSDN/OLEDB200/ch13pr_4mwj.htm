<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interfaces Used by OLE DB Error Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbinterfaces_used_by_ole_db_error_objects"></a>Interfaces Used by OLE DB Error Objects</h1>
<p>
The following table describes which interfaces providers must implement to support OLE DB error objects, which interfaces are implemented by code in the OLE DB SDK, and which functions are implemented by the Automation DLL.</p>
<p class=label>
<b>Interfaces required of providers to support OLE DB error objects</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>Interface or function</b></td>
<td class=label width=78%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=22%><b>ISupportErrorInfo</b></td>
<td width=78%><b>Defined by:</b>Automation<br>
<b>Implemented by:</b>Provider<br>
<b>Implemented on:</b>OLE DB object (for example, rowset or command)<p>
The consumer uses this interface to determine whether an object can return OLE DB error objects and, if so, which interfaces on that object can return OLE DB error objects.</p>
</td>
</tr>
<tr valign=top>
<td width=22%><b>IErrorLookup</b></td>
<td width=78%><b>Defined by:</b>OLE DB<br>
<b>Implemented by:</b>Provider<br>
<b>Implemented on:</b>Error lookup service<p>
The error lookup service is required by the error object code in the OLE DB SDK and is used by that code to implement <b>IErrorRecords</b> and <b>IErrorInfo</b>. For more information, see "<a href="ch13pr_529f.htm">Error Lookup Services</a>" later in this chapter.</p>
</td>
</tr>
<tr valign=top>
<td width=22%><b>IErrorRecords</b></td>
<td width=78%><b>Defined by:</b>OLE DB<br>
<b>Implemented by:</b>OLE DB SDK<br>
<b>Implemented on:</b>OLE DB error object<p>
This is the main interface through which OLE DB error objects are accessed.</p>
</td>
</tr>
<tr valign=top>
<td width=22%><b>IErrorInfo</b></td>
<td width=78%><b>Defined by:</b>Automation<br>
<b>Implemented by:</b>OLE DB SDK<br>
<b>Implemented on:</b>OLE DB error object<p>
OLE DB error objects expose <b>IErrorInfo</b> at the top level (that is, on the object itself) only so they can be treated by the Automation DLL and by Automation consumers as Automation error objects. If the methods on this interface are called, they will retrieve the information from record 0 using the default locale ID.</p>
<p>
To retrieve error information from other records, the consumer calls <b>IErrorRecords::GetErrorInfo</b> and passes a record number and locale ID. The OLE DB error object returns a pointer to an <b>IErrorInfo</b> interface, which will return error information from the specified error record using the specified locale ID. The <b>IErrorInfo</b> pointer returned on a particular record is not the same as the <b>IErrorInfo</b> interface pointer exposed by the OLE DB error object through <b>QueryInterface</b>. For more information about how these interface pointers are used, see "<a href="ch13pr_2fn8.htm">How a Consumer Retrieves an OLE DB Error Object</a>" and "<a href="ch13pr_529f.htm">Error Lookup Services</a>" later in this chapter.</p>
</td>
</tr>
<tr valign=top>
<td width=22%><b>IClassFactory</b></td>
<td width=78%><b>Defined by:</b>Automation<br>
<b>Implemented by:</b>OLE DB SDK<br>
<b>Implemented on:</b>OLE DB error object class factory<p>
OLE DB error objects are created by a class factory exposed by the error object code in the OLE DB SDK. You can create them by calling <b>CoCreateInstance</b> with the CLSID_EXTENDEDERRORINFO class ID or by calling <b>IClassFactory::CreateInstance</b> on a class factory object retrieved with <b>DllGetClassObject</b>. If the provider frequently creates error objects, the latter method is faster and therefore preferred.</p>
<p>
OLE DB error objects cannot be created by the <b>CreateErrorInfo</b> function in the Automation DLL because the function can create only Automation error objects.</p>
</td>
</tr>
<tr valign=top>
<td width=22%><b>GetErrorInfo</b></td>
<td width=78%><b>Defined by:</b>Automation<br>
<b>Implemented by:</b>Automation DLL<br>
<b>Implemented on:</b>N/A<p>
<b>GetErrorInfo</b> transfers ownership of the OLE DB error object on the current thread from the Automation DLL to the consumer. It identifies error objects by their <b>IErrorInfo</b> interface pointer, which is one reason OLE DB error objects directly expose <b>IErrorInfo</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=22%><b>SetErrorInfo</b></td>
<td width=78%><b>Defined by:</b>Automation<br>
<b>Implemented by:</b>Automation DLL<br>
<b>Implemented on:</b>N/A<p>
<b>SetErrorInfo</b> transfers ownership of the OLE DB error object on the current thread from the provider to the Automation DLL. It identifies error objects by their <b>IErrorInfo</b> interface pointer, which is one reason OLE DB error objects directly expose <b>IErrorInfo</b>.</p>
</td>
</tr>
</table><br>
</font></BODY>
</HTML>

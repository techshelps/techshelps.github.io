<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Navigating Hierarchical Rowsets</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbnavigating_hierarchical_rowsets"></a>Navigating Hierarchical Rowsets</h1>
<p>
When the consumer executes a hierarchical query, the method returns the requested interface on the root rowset. This root rowset contains one or more chapter columns.</p>
<p>
Before using a chapter, the consumer must obtain a pointer to the child rowset by passing the ordinal of the chapter-valued column to either <b>IParentRowset::GetChildRowset</b> or <b>IRowsetInfo::GetReferencedRowset</b>. Consumers generally use <b>GetChildRowset</b> to obtain an aggregated instance of the child rowset, and <b>GetReferencedRowset</b> to obtain a reference on a previously retrieved rowset, or to create an instance of a nonaggregated rowset if the child rowset does not already exist.</p>
<p>
Calling <b>GetReferencedRowset</b> for a child rowset that has already been obtained takes an additional reference count on that rowset. Calling <b>GetReferencedRowset</b> for a child rowset that has not previously been obtained returns the requested interface on a nonaggregated instance of the rowset.</p>
<p>
<b>GetChildRowset</b> can be called only once for each child rowset and, if called, must be called before any calls to <b>GetReferencedRowset</b> for that child. The <i>pUnkOuter</i> argument specified in <b>GetChildRowset</b> defines the controlling unknown for all references to that child rowset for the lifetime of the parent. The parent rowset must use <i>addref</i> on this controlling unknown to guarantee that it doesn’t go away before the parent. Even though the controlling unknown is constant for the lifetime of the parent, the consumer must not assume that rowset state, such as accessors, row position, and so on, are held when all references to the rowset are released. Furthermore, providers must ensure that the next fetch position within the child rowset is reset once all references to that child rowset have been released. Calling <b>GetChildRowset</b> for a child rowset that has already been obtained returns DB_E_OBJECTOPEN. </p>
<p>
For example, after executing the above command and calling <b>IParentRowset::GetChildRowset</b> with the ordinal of the order_rows column, the consumer can get an additional reference on the Orders rowset by calling <b>pCustomer-&gt;GetReferencedRowset</b> on the Customer rowset with the ordinal of the order_rows column.</p>
<p>
The consumer navigates rows inside a chapter using methods such as <b>IRowset::GetNextRows</b>, <b>IRowsetLocate::GetRowsAt</b>, and <b>IRowsetLocate::GetRowsByBookmark</b>, passing the chapter handle obtained from a parent rowset as an input argument to the method. For example, suppose the Customer rowset has a row for Jones containing a chapter <i>chJonesOrders</i>. Jones's orders are fetched by calling <b>pOrders-&gt;GetNextRows</b> and passing <i>chJonesOrders</i> as an input argument to the method.</p>
</font></BODY>
</HTML>

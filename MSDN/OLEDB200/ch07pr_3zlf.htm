<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BLOBs as Storage Objects</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbblobs_as_storage_objects"></a>BLOBs as Storage Objects</h1>
<p>
When a BLOB is treated as a storage object, you can get or set it in pieces using <b>ISequentialStream</b>, <b>IStream</b>, <b>IStorage</b>, or <b>ILockBytes</b>, collectively known as the <i>storage interfaces</i>. The rowset acts as a <i>factory</i> for the objects that expose these interfaces, which are collectively known as <i>storage objects</i>.</p>
<p>
The rows in the rowset act as <i>containers</i> of the storage objects. The relationship between a storage object and the row that contains it is the same as the relationship between an <b>IStream</b> or <b>IStorage</b> object and its parent <b>IStorage</b> object.</p>
<p>
This relationship dictates the behavior of the storage object with respect to its containing row in many circumstances. For example, the Structured Storage specification states that, when a parent <b>IStorage</b> is released, all child <b>IStorage</b> and <b>IStream</b> objects are invalidated. Similarly, if a row handle is released with <b>IRowset::ReleaseRows</b>, any storage objects open in that row enter a zombie state, where releasing the object generally is the only valid consumer action. Any questions not specifically answered in this specification about the relationship between rows and storage objects can be answered by looking at the Structured Storage specification.</p>
<p>
The following table shows the rowset methods and interfaces that are analogous to <b>IStorage</b> methods and modes.</p>
<p class=label>
<b>Analogous methods, modes, and interfaces for IStorage and IRowset</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=39%><b>IStorage method or mode</b></td>
<td class=label width=61%><b>Rowset method or interface</b></td>
</tr>
<tr valign=top>
<td width=39%>Transacted mode</td>
<td width=61%>Delayed update mode</td>
</tr>
<tr valign=top>
<td width=39%>Direct mode</td>
<td width=61%>Immediate update mode</td>
</tr>
<tr valign=top>
<td width=39%><b>IStorage::Commit</b></td>
<td width=61%><b>IRowsetUpdate::Update</b></td>
</tr>
<tr valign=top>
<td width=39%><b>IStorage::Revert</b></td>
<td width=61%><b>IRowsetUpdate::Undo</b></td>
</tr>
<tr valign=top>
<td width=39%><b>IStorage::CreateStream</b>, <b>IStorage::OpenStream</b>, <b>IStorage::CreateStorage</b>, <b>IStorage::OpenStorage</b></td>
<td width=61%><b>IRowset::GetData</b><p>
By default, BLOB columns are deferred. In most cases, their data is not fetched and storage objects are not created until <b>GetData</b> is called. Methods that fetch rows, such as <b>IRowset::GetNextRows</b>, do not usually return data for BLOB columns in the rowset's copy of the row.</p>
<p>
For more information, see "<a href="ch07pr_2wdv.htm">Getting and Setting BLOB Data with Storage Objects</a>" later in this chapter and "<a href="ch04pr_4ewj.htm">Deferred Columns</a>" in Chapter 4.</p>
</td>
</tr>
<tr valign=top>
<td width=39%><b>IStorage::DestroyElement</b></td>
<td width=61%><b>IRowsetChange::SetData</b>. For more information, see "<a href="ch07pr_2wdv.htm">Getting and Setting BLOB Data with Storage Objects</a>," later in this chapter.</td>
</tr>
</table><br>
<p>
The only significant difference between a parent <b>IStorage</b> object in the Structured Storage model and a row in a rowset is that a row can contain a storage object that exposes <b>ISequentialStream</b>, <b>IStream</b>, <b>IStorage</b>, or <b>ILockBytes</b>, whereas a parent <b>IStorage</b> object can expose only a child that exposes <b>IStorage</b> or <b>IStream</b>. For purposes of the analogy between Structured Storage and rows, <b>ISequentialStream</b> and <b>ILockBytes</b> storage objects are usually treated as <b>IStream</b> storage objects.</p>
</font></BODY>
</HTML>

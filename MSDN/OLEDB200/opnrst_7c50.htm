<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IOpenRowset::OpenRowset</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbiopenrowset__openrowset"></a>IOpenRowset::OpenRowset</h1>
<p>
Opens and returns a rowset that includes all rows from a single base table or index.</p>
<pre><code>HRESULT OpenRowset(
   IUnknown *      pUnkOuter,
   DBID *            pTableID,
   DBID *            pIndexID,
   REFIID            riid,
   ULONG         cPropertySets,
   DBPROPSET   rgPropertySets[],
   IUnknown **      ppRowset);
</code></pre>
<p class=label>
<b>Parameters</b></p>
<p class=dt>
<i>pUnkOuter</i></p>
<p class=indent>
[in]<br>
The controlling <b>IUnknown</b> if the rowset is to be aggregated, otherwise a null pointer.</p>
<p class=dt>
<i>pTableID</i></p>
<p class=indent>
[in]<br>
The DBID of the table to open. For more information, see the "Comments" section.</p>
<p class=dt>
<i>pIndexID</i></p>
<p class=indent>
[in]<br>
The DBID of the index to open. For more information, see the "Comments" section.</p>
<p class=dt>
<i>riid</i></p>
<p class=indent>
[in]<br>
The IID of the interface to return in *<i>ppRowset</i>. This interface is conceptually added to the list of required interfaces on the resulting rowset, and the method fails (E_NOINTERFACE) if that interface cannot be supported on the resulting rowset. This must be an interface that the rowset supports, even when <i>ppRowset</i> is set to a null pointer and no rowset is created.</p>
<p class=dt>
<i>cPropertySets</i></p>
<p class=indent>
[in]<br>
The number of DBPROPSET structures in <i>rgPropertySets</i>. If this is zero, the provider ignores <i>rgPropertySets</i>.</p>
<p class=dt>
<i>rgPropertySets</i></p>
<p class=indent>
[in/out]<br>
An array of DBPROPSET structures containing properties and values to be set. The properties specified in these structures must belong to the Rowset property group. If the same property is specified more than once in <i>rgPropertySets</i>, then it is provider-specific which value is used. If <i>cPropertySets</i> is zero, this argument is ignored.</p>
<p class=tl>
For information about the properties in the Rowset property group that are defined by OLE DB, see "<a href="appcpr_8u7n.htm#oledbrowset_properties">Rowset Properties</a>" in Appendix C. For information about the DBPROPSET and DBPROP structures, see "<a href="ch11pr_5pb9.htm">DBPROPSET Structure</a>" and "<a href="ch11pr_3xt1.htm">DBPROP Structure</a>" in Chapter 11.</P><p class=dt>
<i>ppRowset</i></p>
<p class=indent>
[in/out]<br>
A pointer to memory in which to return the interface pointer to the created rowset. If <i>ppRowset</i> is a null pointer, no rowset is created; properties are verified and if a required property cannot be set, DB_E_ERRORSOCCURRED is returned. If <b>OpenRowset</b> fails, *<i>ppRowset</i> is set to a null pointer.</p>
<p class=dt>
</p>
<p class=label>
<b>Return Code</b></p>
<p class=indent>
S_OK<br>
The method succeeded and the rowset is opened. In all DBPROP structures passed to the method, <i>dwStatus</i> is set to DBPROPSTATUS_OK.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ASYNCHRONOUS<br>
The method has initiated asynchronous creation of the rowset. The consumer can call <b>IDBAsynchStatus</b> to poll for status or <b>IConnectionPointContainer</b> to obtain the IID_IDBAsynchNotify connection point. Attempting to call any other interfaces may fail, and the full set of interfaces may not be available on the object until asynchronous initialization of the rowset has completed.</p>
<p class=dt>
</p>
<p class=indent>
DB_S_ERRORSOCCURRED<br>
The rowset was opened but one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_OPTIONAL—were not set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were not set. The method can fail to set properties for a number of reasons, including:
<ul type=disc>
<li>
<i>colid</i> in the DBPROP structure was invalid.<br><br></li>
<li>
The data type in <i>vValue</i> in the DBPROP structure was not the data type of the property or was not VT_EMPTY.<br><br></li>
<li>
The value in <i>vValue</i> in the DBPROP structure was invalid.<br><br></li>
<li>
The property's value conflicted with an existing property.<br><br></li>
<li>
A property was specified to be applied to all columns, but could not be applied to one or more columns.<br><br></li>
<li>
The property was not supported by the provider.<br><br></li>
<li>
It was not possible to set the property.</li>
</ul>
<p class=dt>
</p>
<p class=indent>
DB_S_STOPLIMITREACHED<br>
Execution has been stopped because a resource limit has been reached. The results obtained so far have been returned. This return code takes precedence over DB_S_ERRORSOCCURRED; that is, if the conditions descrbed here and in those described in DB_S_ERRORSOCCURRED both occur, the provider returns this code. When the consumer receives this return code, it should also check for the conditions described in DB_S_ERRORSOCCURRED.</p>
<p class=dt>
</p>
<p class=indent>
E_FAIL<br>
A provider-specific error occurred.</p>
<p class=dt>
</p>
<p class=indent>
E_INVALIDARG<br>
<i>pTableID</i> and <i>pIndexID</i> were both null pointers.</p>
<p class=tl>
<i>cPropertySets</i> was not zero and <i>prgPropertySets</i> was a null pointer.</P><p class=tl>
In an element of <i>rgPropertySets</i>, <i>cProperties</i> was not zero and <i>rgProperties</i> was a null pointer.</P><p class=dt>
</p>
<p class=indent>
E_NOINTERFACE<br>
The rowset did not support the interface specified in <i>riid</i> or <i>riid</i> was IID_NULL.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ERRORSOCCURRED<br>
No rowset was returned because one or more properties—for which the <i>dwOptions</i> element of the DBPROP structure was DBPROPOPTIONS_REQUIRED or an invalid value—were not set. The consumer checks <i>dwStatus</i> in the DBPROP structures to determine which properties were not set. None of the satisfiable properties are remembered. The method can fail to set properties for any of the reasons specified in DB_S_ERRORSOCCURRED except the reason that states that it was not possible to set the property.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_ABORTLIMITREACHED<br>
The method failed because a resource limit has been reached. For example, a query used to implement the method timed out. No rowset is returned.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOAGGREGATION<br>
<i>pUnkOuter</i> was not a null pointer and the rowset being created does not support aggregation.</p>
<p class=indent>
<i>pUnkOuter</i> was non-null and <i>riid</i> was not IID_Unknown.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOINDEX<br>
The specified index does not exist in the current data source or did not apply to the specified table.</p>
<p class=dt>
</p>
<p class=indent>
The provider does not support opening indexes through <b>IOpenRowset</b>.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_NOTABLE<br>
The specified table does not exist in the current data source.</p>
<p class=dt>
</p>
<p class=indent>
DB_E_PARAMNOTOPTIONAL<br>
The table specified by <i>pTableID</i> is a procedure that requires one or more parameters.</p>
<p class=dt>
</p>
<p class=indent>
DB_SEC_E_PERMISSIONDENIED<br>
The consumer did not have sufficient permission to open the rowset. For example, a rowset included a column for which the consumer does not have read permission.</p>
<p class=indent>
DB_E_OBJECTOPEN<br>
The provider would have to open a new connection to support the operation and DBPROP_MULTIPLECONNECTIONS is set to VARIANT_FALSE.</p>
<p class=dt>
</p>
<p class=label>
<b>Comments</b></p>
<p>
If the table or index has no rows, the rowset is still created. The resulting rowset is fully functional and can be used, for example, to insert new rows or determine column metadata.</p>
<p>
<i>pTableID</i> and <i>pIndexID</i> are used in the following combinations:
<ul type=disc>
<li>
If <i>pTableID</i> is not a null pointer and <i>pIndexID</i> is a null pointer, the table identified by *<i>pTableID</i> is opened.<br><br></li>
<li>
If <i>pTableID</i> is a null pointer and <i>pIndexID</i> is not a null pointer, *<i>pIndexID</i> must uniquely and fully identify an index; this index is opened. If *<i>pIndexID</i> does not uniquely and fully identify an index, DB_E_NOINDEX is returned.<br><br></li>
<li>
If neither <i>pTableID</i> nor <i>pIndexID</i> is a null pointer, *<i>pIndexID</i> must identify an index for the table identified by *<i>pTableID</i>; this index is opened. If *<i>pIndexID</i> does not identify an index for the table identified by *<i>pTableID</i>, DB_E_NOINDEX is returned.<br><br></li>
<li>
If both <i>pTableID</i> and <i>pIndexID</i> are null pointers, E_INVALIDARG is returned.</li>
</ul>
<p>
Consumers must supply fully qualified names as <i>pTableID</i> on providers that support catalog or schema names. For more information, see "Fully Qualified Names," Chapter 4.</p>
<p>
The threading model of the returned rowset is determined by the property DBPROP_ROWTHREADMODEL.</p>
<p class=label>
<b>See Also</b></p>
<p>
<a href="dbccom_4ack.htm">IDBCreateCommand::CreateCommand</a></p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROVIDER_TYPES Rowset</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="provider_typesrowset"></a>PROVIDER_TYPES Rowset</h1>
<p>
The PROVIDER_TYPES rowset identifies the (base) data types supported by the data provider.</p>
<p>
The PROVIDER_TYPES rowset contains the following columns:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=632>
<tr valign=top>
<td class=label width=30%><b>Column name</b></td>
<td class=label width=24%><b>Type indicator</b></td>
<td class=label width=46%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=30%>TYPE_NAME</td>
<td width=24%>DBTYPE_WSTR</td>
<td width=46%>Provider-specific data type name.</td>
</tr>
<tr valign=top>
<td width=30%>DATA_TYPE</td>
<td width=24%>DBTYPE_UI2</td>
<td width=46%>The indicator of the data type.</td>
</tr>
<tr valign=top>
<td width=30%>COLUMN_SIZE</td>
<td width=24%>DBTYPE_UI4</td>
<td width=46%>The length of a non-numeric column or parameter refers to either the maximum or the defined length for this type by the provider. For character data, this is the maximum or defined length in characters.<p>
If the data type is numeric, this is the upper bound on the maximum precision of the data type. For the maximum precision of the data type. </p>
</td>
</tr>
<tr valign=top>
<td width=30%>LITERAL_PREFIX</td>
<td width=24%>DBTYPE_WSTR</td>
<td width=46%>Character or characters used to prefix a literal of this type in a text command.</td>
</tr>
<tr valign=top>
<td width=30%>LITERAL_SUFFIX</td>
<td width=24%>DBTYPE_WSTR</td>
<td width=46%>Character or characters used to suffix a literal of this type in a text command.</td>
</tr>
<tr valign=top>
<td width=30%>CREATE_PARAMS</td>
<td width=24%>DBTYPE_WSTR</td>
<td width=46%>The creation parameters are specified by the consumer when creating a column of this data type. For example, the SQL data type DECIMAL needs a precision and a scale. In this case, the creation parameters might be the string “precision, scale.” In the text command to create a DECIMAL column with a precision of 10 and a scale of 2, the value of the TYPE_NAME column might be DECIMAL() and the complete type specification would be DECIMAL(10,2).<p>
The creation parameters appear as a comma-separated list of values, in the order they are to be supplied, with no surrounding parentheses. If a creation parameter is length, maximum length, precision, or scale, “length,” “max length,” “precision,” and “scale” should be used, respectively. If the creation parameters are some other value, it is provider-specific what text is used to describe the creation parameter.</p>
<p>
If the data type required creation parameters, “()” generally appears in the type name. This indicates the position at which to insert the creation parameters. If the type name does not include “()”, the creation parameters are enclosed in parentheses and appended to the end of the data type name.</p>
</td>
</tr>
<tr valign=top>
<td width=30%>IS_NULLABLE</td>
<td width=24%>DBTYPE_BOOL</td>
<td width=46%>Specifies values as:<ul type=disc>
<li>
VARIANT_TRUE, which indicates that the data type is nullable.<br><br></li>
<li>
VARIANT_FALSE, which indicates that the data type is not nullable.<br><br></li>
<li>
NULL, which indicates that it is not known whether the data type is nullable.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=30%>CASE_SENSITIVE</td>
<td width=24%>DBTYPE_BOOL</td>
<td width=46%>Specifies values as either of:<ul type=disc>
<li>
VARIANT_TRUE, which indicates that the data type is a character type and is case sensitive.<br><br></li>
<li>
VARIANT_FALSE, which indicates that the data type is not a character type or is not case sensitive.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=30%>SEARCHABLE</td>
<td width=24%>DBTYPE_UI4</td>
<td width=46%>If the provider supports <b>ICommandText</b>, then this column is an integer indicating the searchability of a data type. Otherwise, this column is NULL. Specifies values as one of:<ul type=disc>
<li>
DB_UNSEARCHABLE, which indicates that the data type cannot be used in a <b>WHERE</b> clause.<br><br></li>
<li>
DB_LIKE_ONLY, which indicates that the data type can be used in a <b>WHERE</b> clause only with the <b>LIKE</b> predicate.<br><br></li>
<li>
DB_ALL_EXCEPT_LIKE, which indicates that the data type can be used in a <b>WHERE</b> clause with all comparison operators except <b>LIKE.</b><br><br></li>
<li>
DB_SEARCHABLE, which indicates that the data type can be used in a <b>WHERE</b> clause with any comparison operator.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=30%>UNSIGNED _ATTRIBUTE</td>
<td width=24%>DBTYPE_BOOL</td>
<td width=46%>Specifies values as:<ul type=disc>
<li>
VARIANT_TRUE, which indicates that the data type is unsigned.<br><br></li>
<li>
VARIANT_FALSE, which indicates that the data type is signed.<br><br></li>
<li>
NULL, which indicates that it is not applicable to data type.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=30%>FIXED_PREC_SCALE</td>
<td width=24%>DBTYPE_BOOL</td>
<td width=46%>Specifies values as one of:<ul type=disc>
<li>
VARIANT_TRUE, which indicates that the data type has a fixed precision and scale.<br><br></li>
<li>
VARIANT_FALSE, which indicates that the data type does not have a fixed precision and scale.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=30%>AUTO_UNIQUE_VALUE</td>
<td width=24%>DBTYPE_BOOL</td>
<td width=46%>Specifies values as one of:<ul type=disc>
<li>
VARIANT_TRUE, which indicates that values of this type can be autoincrementing.<br><br></li>
<li>
VARIANT_FALSE, which indicates that values of this type cannot be autoincrementing.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=30%>LOCAL_TYPE_NAME</td>
<td width=24%>DBTYPE_WSTR</td>
<td width=46%>Localized version of TYPE_NAME. NULL is returned if a localized name is not supported by the data provider.</td>
</tr>
<tr valign=top>
<td width=30%>MINIMUM_SCALE</td>
<td width=24%>DBTYPE_I2</td>
<td width=46%>If the type indicator is DBTYPE_DECIMAL or DBTYPE_NUMERIC, this is the minimum number of digits allowed to the right of the decimal point. Otherwise, this is NULL.</td>
</tr>
<tr valign=top>
<td width=30%>MAXIMUM_SCALE</td>
<td width=24%>DBTYPE_I2</td>
<td width=46%>If the type indicator is DBTYPE_DECIMAL or DBTYPE_NUMERIC, this is the maximum number of digits allowed to the right of the decimal point. Otherwise, this is NULL.</td>
</tr>
<tr valign=top>
<td width=30%>GUID</td>
<td width=24%>DBTYPE_GUID</td>
<td width=46%>The GUID of the type. All types supported by a provider are described in a type library, so each type has a corresponding GUID.</td>
</tr>
<tr valign=top>
<td width=30%>TYPELIB</td>
<td width=24%>DBTYPE_WSTR</td>
<td width=46%>The type library containing the description of this type. </td>
</tr>
<tr valign=top>
<td width=30%>VERSION</td>
<td width=24%>DBTYPE_WSTR</td>
<td width=46%>The version of the type definition. Providers may wish to indicate version type definitions. Different providers may use different version schemas, such as a timestamp or number (integer or float). NULL if not supported.</td>
</tr>
<tr valign=top>
<td width=30%>IS_LONG</td>
<td width=24%>DBTYPE_BOOL</td>
<td width=46%>This value determines the setting of the DBCOLUMNFLAGS_ISLONG flag returned by <b>GetColumnInfo</b> in <b>IColumnsInfo</b> and <b>GetParameterInfo</b> in <b>ICommandWithParameters</b>. Specifies values as one of:<ul type=disc>
<li>
VARIANT_TRUE, which indicates that the data type is a BLOB that contains very long data. The definition of very long data is provider-specific.<br><br></li>
<li>
VARIANT_FALSE, which indicates that the data type is a BLOB that does not contain very long data or is not a BLOB.</li>
</ul>
</td>
</tr>
<tr valign=top>
<td width=30%>BEST_MATCH</td>
<td width=24%>DBTYPE_BOOL</td>
<td width=46%>Specifies values as one of:<ul type=disc>
<li>
VARIANT_TRUE, which indicates that the data type is the best match between all data types in the data source and the OLE DB data type indicated by the value in the DATA_TYPE column.<br><br></li>
<li>
VARIANT_FALSE, which indicates that the data type is not the best match.</li>
</ul>
<p>
For each set of rows in which the value of the DATA_TYPE column is the same, the BEST_MATCH column is set to VARIANT_TRUE in only one row.</p>
</td>
</tr>
</table><br>
<p>
<b>Default Sort Order</b>: DATA_TYPE.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glGetBooleanv, glGetDoublev, glGetFloatv, glGetIntegerv</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glget"></a>glGetBooleanv, glGetDoublev, glGetFloatv, glGetIntegerv</h1>
<p>
These functions return the value or values of a selected parameter.</p>
<pre><code><b>void glGetBooleanv(
  GLenum</b><i> pname</i><b>,</b>        
<b>  GLboolean *</b><i> params</i>   
<b>);</b>
 
<b>void glGetDoublev(</b>
<b>  GLenum</b><i> pname</i><b>,</b>       
<b>  GLdouble *</b><i> params</i>   
<b>);</b>
 
<b>void glGetFloatv(</b>
<b>  GLenum</b><i> pname</i><b>,</b>      
<b>  GLfloat *</b><i> params</i>   
<b>);</b>
 
<b>void glGetIntegerv(</b>
<b>  GLenum</b><i> pname</i><b>,</b>   
<b>  GLint *</b><i> params</i>  
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pname</i></dt>
<dd>
The parameter value to be returned. The following symbolic constants are accepted: 
<dl>
<dt>
GL_ACCUM_ALPHA_BITS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of alpha bitplanes in the accumulation buffer. </dd>
<dt>
GL_ACCUM_BLUE_BITS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of blue bitplanes in the accumulation buffer. </dd>
<dt>
GL_ACCUM_CLEAR_VALUE</dt>
<dd>
The<i> params</i> parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc01_3dbh.htm"><b>glClearAccum</b></a>. </dd>
<dt>
GL_ACCUM_GREEN_BITS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of green bitplanes in the accumulation buffer. </dd>
<dt>
GL_ACCUM_RED_BITS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of red bitplanes in the accumulation buffer. </dd>
<dt>
GL_ALPHA_BIAS</dt>
<dd>
The<i> params</i> parameter returns one value: the alpha bias factor used during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_ALPHA_BITS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of alpha bitplanes in each color buffer. </dd>
<dt>
GL_ALPHA_SCALE</dt>
<dd>
The<i> params</i> parameter returns one value: the alpha scale factor used during pixel transfers. See <b>glPixelTransfer</b>. </dd>
<dt>
GL_ALPHA_TEST</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See <a href="glfunc01_5qhv.htm"><b>glAlphaFunc</b></a>. </dd>
<dt>
GL_ALPHA_TEST_FUNC</dt>
<dd>
The<i> params</i> parameter returns one value: the symbolic name of the alpha test function. See <b>glAlphaFunc</b>. </dd>
<dt>
GL_ALPHA_TEST_REF</dt>
<dd>
The<i> params</i> parameter returns one value: the reference value for the alpha test. See <a href="glfunc01_5qhv.htm"><b>glAlphaFunc</b></a>. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. </dd>
<dt>
GL_ATTRIB_STACK_DEPTH</dt>
<dd>
The<i> params</i> parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a>. </dd>
<dt>
GL_AUTO_NORMAL</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. </dd>
<dt>
GL_AUX_BUFFERS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of auxiliary color buffers. </dd>
<dt>
GL_BLEND</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether blending is enabled. See <a href="glfunc01_4vs3.htm"><b>glBlendFunc</b></a>. </dd>
<dt>
GL_BLEND_DST</dt>
<dd>
The<i> params</i> parameter returns one value: the symbolic constant identifying the destination blend function. See <b>glBlendFunc</b>. </dd>
<dt>
GL_BLEND_SRC</dt>
<dd>
The<i> params</i> parameter returns one value: the symbolic constant identifying the source blend function. See <a href="glfunc01_4vs3.htm"><b>glBlendFunc</b></a>. </dd>
<dt>
GL_BLUE_BIAS</dt>
<dd>
The<i> params</i> parameter returns one value: the blue bias factor used during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_BLUE_BITS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of blue bitplanes in each color buffer. </dd>
<dt>
GL_BLUE_SCALE</dt>
<dd>
The<i> params</i> parameter returns one value: the blue scale factor used during pixel transfers. See <b>glPixelTransfer</b>. </dd>
<dt>
GL_CLIP_PLANE<i>i</i></dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See <a href="glfunc01_9g11.htm"><b>glClipPlane</b></a>. </dd>
<dt>
GL_COLOR_CLEAR_VALUE</dt>
<dd>
The<i> params</i> parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc01_0rhu.htm"><b>glClearColor</b></a>. </dd>
<dt>
GL_COLOR_MATERIAL</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See <a href="glfunc01_58vg.htm"><b>glColorMaterial</b></a>. </dd>
<dt>
GL_COLOR_MATERIAL_FACE</dt>
<dd>
The<i> params</i> parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See <b>glColorMaterial</b>. </dd>
<dt>
GL_COLOR_MATERIAL_PARAMETER</dt>
<dd>
The<i> params</i> parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See <a href="glfunc01_58vg.htm"><b>glColorMaterial</b></a>. </dd>
<dt>
GL_COLOR_WRITEMASK</dt>
<dd>
The<i> params</i> parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See <a href="glfunc01_1fsb.htm"><b>glColorMask</b></a>. </dd>
<dt>
GL_CULL_FACE</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether polygon culling is enabled. See <a href="glfunc01_9yxx.htm"><b>glCullFace</b></a>. </dd>
<dt>
GL_CULL_FACE_MODE</dt>
<dd>
The<i> params</i> parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See <b>glCullFace</b>. </dd>
<dt>
GL_CURRENT_COLOR</dt>
<dd>
The<i> params</i> parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc01_62b6.htm"><b>glColor</b></a>. </dd>
<dt>
GL_CURRENT_INDEX</dt>
<dd>
The<i> params</i> parameter returns one value: the current color index. See <a href="glfunc03_7ak8.htm"><b>glIndex</b></a>. </dd>
<dt>
GL_CURRENT_NORMAL</dt>
<dd>
The<i> params</i> parameter returns three values: the <i>x</i>, <i>y</i>, and <i>z</i> values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc03_5ru4.htm"><b>glNormal</b></a>. </dd>
<dt>
GL_CURRENT_RASTER_COLOR</dt>
<dd>
The<i> params</i> parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc03_0tgz.htm"><b>glRasterPos</b></a>. </dd>
<dt>
GL_CURRENT_RASTER_DISTANCE</dt>
<dd>
The<i> params</i> parameter returns one value: the distance from the eye to the current raster position. See <b>glRasterPos</b>. </dd>
<dt>
GL_CURRENT_RASTER_INDEX</dt>
<dd>
The<i> params</i> parameter returns one value: the color index of the current raster position. See <a href="glfunc03_0tgz.htm"><b>glRasterPos</b></a>. </dd>
<dt>
GL_CURRENT_RASTER_POSITION</dt>
<dd>
The<i> params</i> parameter returns four values: the <i>x</i>, <i>y</i>, <i>z</i>, and <i>w</i> components of the current raster position. The <i>x</i>, <i>y</i>, and <i>z</i> components are in window coordinates, and <i>w</i> is in clip coordinates. See <b>glRasterPos</b>. </dd>
<dt>
GL_CURRENT_RASTER_TEXTURE_COORDS</dt>
<dd>
The<i> params</i> parameter returns four values: the <i>s</i>, <i>t</i>, <i>r</i>, and <i>q </i>current raster texture coordinates. See <a href="glfunc03_0tgz.htm"><b>glRasterPos</b></a> and <a href="glfunc03_6qck.htm"><b>glTexCoord</b></a>. </dd>
<dt>
GL_CURRENT_RASTER_POSITION_VALID</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether the current raster position is valid. See <a href="glfunc03_0tgz.htm"><b>glRasterPos</b></a>. </dd>
<dt>
GL_CURRENT_TEXTURE_COORDS</dt>
<dd>
The<i> params</i> parameter returns four values: the <i>s</i>, <i>t</i>, <i>r</i>, and <i>q</i> current texture coordinates. See <a href="glfunc03_6qck.htm"><b>glTexCoord</b></a>. </dd>
<dt>
GL_DEPTH_BIAS</dt>
<dd>
The<i> params</i> parameter returns one value: the depth bias factor used during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_DEPTH_BITS</dt>
<dd>
The<i> params</i> parameter returns one value: the number of bitplanes in the depth buffer. </dd>
<dt>
GL_DEPTH_CLEAR_VALUE</dt>
<dd>
The<i> params</i> parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc01_4j1k.htm"><b>glClearDepth</b></a>. </dd>
<dt>
GL_DEPTH_FUNC</dt>
<dd>
The<i> params</i> parameter returns one value: the symbolic constant that indicates the depth comparison function. See <a href="glfunc01_5kkj.htm"><b>glDepthFunc</b></a>. </dd>
<dt>
GL_DEPTH_RANGE</dt>
<dd>
The<i> params</i> parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc01_9bxh.htm"><b>glDepthRange</b></a>. </dd>
<dt>
GL_DEPTH_SCALE</dt>
<dd>
The<i> params</i> parameter returns one value: the depth scale factor used during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_DEPTH_TEST</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See <a href="glfunc01_5kkj.htm"><b>glDepthFunc</b></a> and <a href="glfunc01_9bxh.htm"><b>glDepthRange</b></a>. </dd>
<dt>
GL_DEPTH_WRITEMASK</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See <a href="glfunc01_35ij.htm"><b>glDepthMask</b></a>. </dd>
<dt>
GL_DITHER</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled. </dd>
<dt>
GL_DOUBLEBUFFER</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether double buffering is supported. </dd>
<dt>
GL_DRAW_BUFFER</dt>
<dd>
The<i> params</i> parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See <a href="glfunc01_4gxe.htm"><b>glDrawBuffer</b></a>. </dd>
<dt>
GL_EDGE_FLAG</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether the current edge flag is true or false. See <a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a>. </dd>
<dt>
GL_FOG</dt>
<dd>
The<i> params</i> parameter returns a single Boolean value indicating whether fogging is enabled. See <a href="glfunc02_5rmv.htm"><b>glFog</b></a>. </dd>
<dt>
GL_FOG_COLOR</dt>
<dd>
The<i> params</i> parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <b>glFog</b>. </dd>
<dt>
GL_FOG_DENSITY</dt>
<dd>
The<i> params</i> parameter returns one value: the fog density parameter. See <b>glFog</b>. </dd>
<dt>
GL_FOG_END</dt>
<dd>
The<i> params</i> parameter returns one value: the end factor for the linear fog equation. See <b>glFog</b>. </dd>
<dt>
GL_FOG_HINT</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating the mode of the fog hint. See <a href="glfunc03_9uno.htm"><b>glHint</b></a>. </dd>
<dt>
GL_FOG_INDEX</dt>
<dd>
The<i> params </i>parameter returns one value: the fog color index. See <a href="glfunc02_5rmv.htm"><b>glFog</b></a>. </dd>
<dt>
GL_FOG_MODE</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating which fog equation is selected. See <b>glFog</b>. </dd>
<dt>
GL_FOG_START</dt>
<dd>
The<i> params </i>parameter returns one value: the start factor for the linear fog equation. See <a href="glfunc02_5rmv.htm"><b>glFog</b></a>. </dd>
<dt>
GL_FRONT_FACE</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See <a href="glfunc02_49t1.htm"><b>glFrontFace</b></a>. </dd>
<dt>
GL_GREEN_BIAS</dt>
<dd>
The<i> params </i>parameter returns one value: the green bias factor used during pixel transfers. </dd>
<dt>
GL_GREEN_BITS</dt>
<dd>
The<i> params </i>parameter returns one value: the number of green bitplanes in each color buffer. </dd>
<dt>
GL_GREEN_SCALE</dt>
<dd>
The<i> params </i>parameter returns one value: the green scale factor used during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_INDEX_BITS</dt>
<dd>
The<i> params </i>parameter returns one value: the number of bitplanes in each color-index buffer. </dd>
<dt>
GL_INDEX_CLEAR_VALUE</dt>
<dd>
The<i> params </i>parameter returns one value: the color index used to clear the color-index buffers. See <a href="glfunc01_1zqw.htm"><b>glClearIndex</b></a>. </dd>
<dt>
GL_INDEX_MODE</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE). </dd>
<dt>
GL_INDEX_OFFSET</dt>
<dd>
The<i> params </i>parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_INDEX_SHIFT</dt>
<dd>
The<i> params </i>parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See <b>glPixelTransfer</b>. </dd>
<dt>
GL_INDEX_WRITEMASK</dt>
<dd>
The<i> params </i>parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See <a href="glfunc03_5ajv.htm"><b>glIndexMask</b></a>. </dd>
<dt>
GL_LIGHT<i>i</i></dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether the specified light is enabled. See <a href="glfunc03_88z8.htm"><b>glLight</b></a> and <a href="glfunc03_3y5o.htm"><b>glLightModel</b></a>. </dd>
<dt>
GL_LIGHTING</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether lighting is enabled. See <b>glLightModel</b>. </dd>
<dt>
GL_LIGHT_MODEL_AMBIENT</dt>
<dd>
The<i> params </i>parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc03_3y5o.htm"><b>glLightModel</b></a>. </dd>
<dt>
GL_LIGHT_MODEL_LOCAL_VIEWER</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See <b>glLightModel</b>. </dd>
<dt>
GL_LIGHT_MODEL_TWO_SIDE</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front- and back-facing polygons. See <a href="glfunc03_3y5o.htm"><b>glLightModel</b></a>. </dd>
<dt>
GL_LINE_SMOOTH</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See <a href="glfunc03_75k8.htm"><b>glLineWidth</b></a>. </dd>
<dt>
GL_LINE_SMOOTH_HINT</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See <a href="glfunc03_9uno.htm"><b>glHint</b></a>. </dd>
<dt>
GL_LINE_STIPPLE</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether stippling of lines is enabled. See <a href="glfunc03_7sdh.htm"><b>glLineStipple</b></a>. </dd>
<dt>
GL_LINE_STIPPLE_PATTERN</dt>
<dd>
The<i> params </i>parameter returns one value: the 16-bit line stipple pattern. See <b>glLineStipple</b>. </dd>
<dt>
GL_LINE_STIPPLE_REPEAT</dt>
<dd>
The<i> params </i>parameter returns one value: the line stipple repeat factor. See <a href="glfunc03_7sdh.htm"><b>glLineStipple</b></a>. </dd>
<dt>
GL_LINE_WIDTH</dt>
<dd>
The<i> params </i>parameter returns one value: the line width as specified with <a href="glfunc03_75k8.htm"><b>glLineWidth</b></a>. </dd>
<dt>
GL_LINE_WIDTH_GRANULARITY</dt>
<dd>
The<i> params </i>parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See <b>glLineWidth</b>. </dd>
<dt>
GL_LINE_WIDTH_RANGE</dt>
<dd>
The<i> params </i>parameter returns two values: the smallest and largest supported widths for antialiased lines. See <a href="glfunc03_75k8.htm"><b>glLineWidth</b></a>. </dd>
<dt>
GL_LIST_BASE</dt>
<dd>
The<i> params </i>parameter returns one value: the base offset added to all names in arrays presented to <b>glCallLists</b>. See <a href="glfunc03_1icl.htm"><b>glListBase</b></a>. </dd>
<dt>
GL_LIST_INDEX</dt>
<dd>
The<i> params </i>parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See <a href="glfunc03_2eyc.htm"><b>glNewList</b></a>. </dd>
<dt>
GL_LIST_MODE</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See <b>glNewList</b>. </dd>
<dt>
GL_LOGIC_OP</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether fragment indexes are merged into the frame buffer using a logical operation. See <a href="glfunc03_7wkw.htm"><b>glLogicOp</b></a>. </dd>
<dt>
GL_LOGIC_OP_MODE</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating the selected logic operational mode. See <b>glLogicOp</b>. </dd>
<dt>
GL_MAP1_COLOR_4</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See <a href="glfunc03_78s1.htm"><b>glMap1</b></a>. </dd>
<dt>
GL_MAP1_GRID_DOMAIN</dt>
<dd>
The<i> params </i>parameter returns two values: the endpoints of the 1-D maps grid domain. See <a href="glfunc03_509w.htm"><b>glMapGrid</b></a>. </dd>
<dt>
GL_MAP1_GRID_SEGMENTS</dt>
<dd>
The<i> params </i>parameter returns one value: the number of partitions in the 1-D maps grid domain. See <b>glMapGrid</b>. </dd>
<dt>
GL_MAP1_INDEX</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See <a href="glfunc03_78s1.htm"><b>glMap1</b></a>. </dd>
<dt>
GL_MAP1_NORMAL</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See <b>glMap1</b>. </dd>
<dt>
GL_MAP1_TEXTURE_COORD_1</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See <a href="glfunc03_78s1.htm"><b>glMap1</b></a>. </dd>
<dt>
GL_MAP1_TEXTURE_COORD_2</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See <b>glMap1</b>. </dd>
<dt>
GL_MAP1_TEXTURE_COORD_3</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See <a href="glfunc03_78s1.htm"><b>glMap1</b></a>. </dd>
<dt>
GL_MAP1_TEXTURE_COORD_4</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See <b>glMap1</b>. </dd>
<dt>
GL_MAP1_VERTEX_3</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See <a href="glfunc03_78s1.htm"><b>glMap1</b></a>. </dd>
<dt>
GL_MAP1_VERTEX_4</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See <b>glMap1</b>. </dd>
<dt>
GL_MAP2_COLOR_4</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. </dd>
<dt>
GL_MAP2_GRID_DOMAIN</dt>
<dd>
The<i> params </i>parameter returns four values: the endpoints of the 2-D maps <i>i</i> and <i>j</i> grid domains. See <a href="glfunc03_509w.htm"><b>glMapGrid</b></a>. </dd>
<dt>
GL_MAP2_GRID_SEGMENTS</dt>
<dd>
The<i> params </i>parameter returns two values: the number of partitions in the 2-D maps <i>i </i>and<i> j</i> grid domains. See <b>glMapGrid</b>. </dd>
<dt>
GL_MAP2_INDEX</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. </dd>
<dt>
GL_MAP2_NORMAL</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See <b>glMap2</b>. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_1</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_2</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See <b>glMap2</b>. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_3</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_4</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See <b>glMap2</b>. </dd>
<dt>
GL_MAP2_VERTEX_3</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. </dd>
<dt>
GL_MAP2_VERTEX_4</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See <b>glMap2</b>. </dd>
<dt>
GL_MAP_COLOR</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_MAP_STENCIL</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See <b>glPixelTransfer</b>. </dd>
<dt>
GL_MATRIX_MODE</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See <a href="glfunc03_4vs5.htm"><b>glMatrixMode</b></a>. </dd>
<dt>
GL_MAX_ATTRIB_STACK_DEPTH</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum supported depth of the attribute stack. See <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a>. </dd>
<dt>
GL_MAX_CLIP_PLANES</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum number of application-defined clipping planes. See <a href="glfunc01_9g11.htm"><b>glClipPlane</b></a>. </dd>
<dt>
GL_MAX_EVAL_ORDER</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See <a href="glfunc03_78s1.htm"><b>glMap1</b></a> and <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. </dd>
<dt>
GL_MAX_LIGHTS</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum number of lights. See <a href="glfunc03_88z8.htm"><b>glLight</b></a>. </dd>
<dt>
GL_MAX_LIST_NESTING</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum recursion depth allowed during display-list traversal. See <a href="glfunc01_6uk4.htm"><b>glCallList</b></a>. </dd>
<dt>
GL_MAX_MODELVIEW_STACK_DEPTH</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum supported depth of the modelview matrix stack. See <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>. </dd>
<dt>
GL_MAX_NAME_STACK_DEPTH</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum supported depth of the selection name stack. See <a href="glfunc03_72ud.htm"><b>glPushName</b></a>. </dd>
<dt>
GL_MAX_PIXEL_MAP_TABLE</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum supported size of a <b>glPixelMap</b> lookup table. See <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>. </dd>
<dt>
GL_MAX_PROJECTION_STACK_DEPTH</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum supported depth of the projection matrix stack. See <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>. </dd>
<dt>
GL_MAX_TEXTURE_SIZE</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum width or height of any texture image (without borders). See <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a> and <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>. </dd>
<dt>
GL_MAX_TEXTURE_STACK_DEPTH</dt>
<dd>
The<i> params </i>parameter returns one value: the maximum supported depth of the texture matrix stack. See <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>. </dd>
<dt>
GL_MAX_VIEWPORT_DIMS</dt>
<dd>
The<i> params </i>parameter returns two values: the maximum supported width and height of the viewport. See <a href="glfunc03_5ur8.htm"><b>glViewport</b></a>. </dd>
<dt>
GL_MODELVIEW_MATRIX</dt>
<dd>
The<i> params </i>parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>. </dd>
<dt>
GL_MODELVIEW_STACK_DEPTH </dt>
<dd>
The<i> params </i>parameter returns one value: the number of matrices on the modelview matrix stack. See <b>glPushMatrix</b>. </dd>
<dt>
GL_NAME_STACK_DEPTH </dt>
<dd>
The<i> params </i>parameter returns one value: the number of names on the selection name stack. See <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>. </dd>
<dt>
GL_NORMALIZE </dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See <a href="glfunc03_5ru4.htm"><b>glNormal</b></a>. </dd>
<dt>
GL_PACK_ALIGNMENT </dt>
<dd>
The<i> params </i>parameter returns one value: the byte alignment used for writing pixel data to memory. See <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>. </dd>
<dt>
GL_PACK_LSB_FIRST </dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See <b>glPixelStore</b>. </dd>
<dt>
GL_PACK_ROW_LENGTH </dt>
<dd>
The<i> params </i>parameter returns one value: the row length used for writing pixel data to memory. See <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>. </dd>
<dt>
GL_PACK_SKIP_PIXELS </dt>
<dd>
The<i> params </i>parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See <b>glPixelStore</b>. </dd>
<dt>
GL_PACK_SKIP_ROWS </dt>
<dd>
The<i> params </i>parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>. </dd>
<dt>
GL_PACK_SWAP_BYTES </dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See <b>glPixelStore</b>. </dd>
<dt>
GL_PERSPECTIVE_CORRECTION_HINT </dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See <a href="glfunc03_9uno.htm"><b>glHint</b></a>. </dd>
<dt>
GL_PIXEL_MAP_A_TO_A_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>. </dd>
<dt>
GL_PIXEL_MAP_B_TO_B_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the blue-to-blue pixel-translation table. See <b>glPixelMap</b>. </dd>
<dt>
GL_PIXEL_MAP_G_TO_G_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the green-to-green pixel-translation table. See <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>. </dd>
<dt>
GL_PIXEL_MAP_I_TO_A_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the index-to-alpha pixel translation table. See <b>glPixelMap</b>. </dd>
<dt>
GL_PIXEL_MAP_I_TO_B_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the index-to-blue pixel translation table. See <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>. </dd>
<dt>
GL_PIXEL_MAP_I_TO_G_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the index-to-green pixel-translation table. See <b>glPixelMap</b>. </dd>
<dt>
GL_PIXEL_MAP_I_TO_I_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the index-to-index pixel-translation table. See <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>. </dd>
<dt>
GL_PIXEL_MAP_I_TO_R_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the index-to-red pixel-translation table. See <b>glPixelMap</b>. </dd>
<dt>
GL_PIXEL_MAP_R_TO_R_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the red-to-red pixel-translation table. See <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>. </dd>
<dt>
GL_PIXEL_MAP_S_TO_S_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the size of the stencil-to-stencil pixel translation table. See <b>glPixelMap</b>. </dd>
<dt>
GL_POINT_SIZE </dt>
<dd>
The<i> params </i>parameter returns one value: the point size as specified by <a href="glfunc03_5m91.htm"><b>glPointSize</b></a>. </dd>
<dt>
GL_POINT_SIZE_GRANULARITY </dt>
<dd>
The<i> params </i>parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See <b>glPointSize</b>. </dd>
<dt>
GL_POINT_SIZE_RANGE </dt>
<dd>
The<i> params </i>parameter returns two values: the smallest and largest supported sizes for antialiased points. See <a href="glfunc03_5m91.htm"><b>glPointSize</b></a>. </dd>
<dt>
GL_POINT_SMOOTH</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See <b>glPointSize</b>. </dd>
<dt>
GL_POINT_SMOOTH_HINT</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See <a href="glfunc03_9uno.htm"><b>glHint</b></a>. </dd>
<dt>
GL_POLYGON_MODE</dt>
<dd>
The<i> params </i>parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See <a href="glfunc03_9zol.htm"><b>glPolygonMode</b></a>. </dd>
<dt>
GL_POLYGON_SMOOTH</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See <b>glPolygonMode</b>. </dd>
<dt>
GL_POLYGON_SMOOTH_HINT</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See <a href="glfunc03_9uno.htm"><b>glHint</b></a>. </dd>
<dt>
GL_POLYGON_STIPPLE</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See <a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a>. </dd>
<dt>
GL_PROJECTION_MATRIX</dt>
<dd>
The<i> params </i>parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>. </dd>
<dt>
GL_PROJECTION_STACK_DEPTH </dt>
<dd>
The<i> params </i>parameter returns one value: the number of matrices on the projection matrix stack. See <b>glPushMatrix</b>. </dd>
<dt>
GL_READ_BUFFER </dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a> and <a href="glfunc01_8o4t.htm"><b>glAccum</b></a>. </dd>
<dt>
GL_RED_BIAS </dt>
<dd>
The<i> params </i>parameter returns one value: the red bias factor used during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_RED_BITS </dt>
<dd>
The<i> params </i>parameter returns one value: the number of red bitplanes in each color buffer. </dd>
<dt>
GL_RED_SCALE </dt>
<dd>
The<i> params </i>parameter returns one value: the red scale factor used during pixel transfers. See <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>. </dd>
<dt>
GL_RENDER_MODE </dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See <a href="glfunc03_2aqt.htm"><b>glRenderMode</b></a>. </dd>
<dt>
GL_RGBA_MODE </dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See <a href="glfunc01_62b6.htm"><b>glColor</b></a>. </dd>
<dt>
GL_SCISSOR_BOX </dt>
<dd>
The<i> params </i>parameter returns four values: the <i>x</i> and <i>y</i> window coordinates of the scissor box, followed by its width and height. See <a href="glfunc03_4nxu.htm"><b>glScissor</b></a>. </dd>
<dt>
GL_SCISSOR_TEST</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether scissoring is enabled. See <b>glScissor</b>. </dd>
<dt>
GL_SHADE_MODEL</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See <a href="glfunc03_24rw.htm"><b>glShadeModel</b></a>. </dd>
<dt>
GL_STENCIL_BITS</dt>
<dd>
The<i> params </i>parameter returns one value: the number of bitplanes in the stencil buffer. </dd>
<dt>
GL_STENCIL_CLEAR_VALUE</dt>
<dd>
The<i> params </i>parameter returns one value: the index to which the stencil bitplanes are cleared. See <a href="glfunc01_4j3g.htm"><b>glClearStencil</b></a>. </dd>
<dt>
GL_STENCIL_FAIL</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See <a href="glfunc03_5tm8.htm"><b>glStencilOp</b></a>. </dd>
<dt>
GL_STENCIL_FUNC</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See <a href="glfunc03_9t9f.htm"><b>glStencilFunc</b></a>. </dd>
<dt>
GL_STENCIL_PASS_DEPTH_FAIL</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See <a href="glfunc03_5tm8.htm"><b>glStencilOp</b></a>. </dd>
<dt>
GL_STENCIL_PASS_DEPTH_PASS</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See <b>glStencilOp</b>. </dd>
<dt>
GL_STENCIL_REF</dt>
<dd>
The<i> params </i>parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See <a href="glfunc03_9t9f.htm"><b>glStencilFunc</b></a>. </dd>
<dt>
GL_STENCIL_TEST</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See <b>glStencilFunc</b> and <a href="glfunc03_5tm8.htm"><b>glStencilOp</b></a>. </dd>
<dt>
GL_STENCIL_VALUE_MASK</dt>
<dd>
The<i> params </i>parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See <a href="glfunc03_9t9f.htm"><b>glStencilFunc</b></a>. </dd>
<dt>
GL_STENCIL_WRITEMASK</dt>
<dd>
The<i> params </i>parameter returns one value: the mask that controls writing of the stencil bitplanes. See <a href="glfunc03_7e7f.htm"><b>glStencilMask</b></a>.</dd>
<dt>
GL_STEREO </dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported. </dd>
<dt>
GL_SUBPIXEL_BITS</dt>
<dd>
The<i> params </i>parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates. </dd>
<dt>
GL_TEXTURE_1D</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a>. </dd>
<dt>
GL_TEXTURE_2D</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>. </dd>
<dt>
GL_TEXTURE_ENV_COLOR</dt>
<dd>
The<i> params </i>parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and –1.0 returns the most negative representable integer value. See <a href="glfunc03_6xyu.htm"><b>glTexEnv</b></a>. </dd>
<dt>
GL_TEXTURE_ENV_MODE</dt>
<dd>
The<i> params </i>parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See <b>glTexEnv</b>. </dd>
<dt>
GL_TEXTURE_GEN_S</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See <a href="glfunc03_73u6.htm"><b>glTexGen</b></a>. </dd>
<dt>
GL_TEXTURE_GEN_T</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See <b>glTexGen</b>. </dd>
<dt>
GL_TEXTURE_GEN_R</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See <a href="glfunc03_73u6.htm"><b>glTexGen</b></a>. </dd>
<dt>
GL_TEXTURE_GEN_Q</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See <b>glTexGen</b>. </dd>
<dt>
GL_TEXTURE_MATRIX</dt>
<dd>
The<i> params </i>parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>. </dd>
<dt>
GL_TEXTURE_STACK_DEPTH</dt>
<dd>
The<i> params </i>parameter returns one value: the number of matrices on the texture matrix stack. See <b>glPushMatrix</b>. </dd>
<dt>
GL_UNPACK_ALIGNMENT</dt>
<dd>
The<i> params </i>parameter returns one value: the byte alignment used for reading pixel data from memory. See <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>. </dd>
<dt>
GL_UNPACK_LSB_FIRST</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See <b>glPixelStore</b>. </dd>
<dt>
GL_UNPACK_ROW_LENGTH</dt>
<dd>
The<i> params </i>parameter returns one value: the row length used for reading pixel data from memory. See <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>. </dd>
<dt>
GL_UNPACK_SKIP_PIXELS</dt>
<dd>
The<i> params </i>parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See <b>glPixelStore</b>. </dd>
<dt>
GL_UNPACK_SKIP_ROWS</dt>
<dd>
The<i> params </i>parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>. </dd>
<dt>
GL_UNPACK_SWAP_BYTES</dt>
<dd>
The<i> params </i>parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See <b>glPixelStore</b>. </dd>
<dt>
GL_VIEWPORT</dt>
<dd>
The<i> params </i>parameter returns four values: the <i>x</i> and <i>y</i> window coordinates of the viewport, followed by its width and height. See <a href="glfunc03_5ur8.htm"><b>glViewport</b></a>. </dd>
<dt>
GL_ZOOM_X</dt>
<dd>
The<i> params </i>parameter returns one value: the <i>x</i> pixel zoom factor. See <a href="glfunc03_4mul.htm"><b>glPixelZoom</b></a>. </dd>
<dt>
GL_ZOOM_Y</dt>
<dd>
The<i> params </i>parameter returns one value: the <i>y</i> pixel zoom factor. See <b>glPixelZoom</b>. </dd>
</dl>
</dd>
<dt>
<i>params</i></dt>
<dd>
Returns the value or values of the specified parameter.
</dd>
</dl>
<h4>Remarks</h4>
<p>
These four functions return values for simple state variables in OpenGL. The <i>pname</i> parameter is a symbolic constant indicating the state variable to be returned, and <i>params</i> is a pointer to an array of the indicated type in which to place the returned data.</p>
<p>
Type conversion is performed if <i>params</i> has a different type from the state variable value being requested. If you call <b>glGetBooleanv</b>, a floating-point or integer value is converted to GL_FALSE if and only if it is zero. Otherwise, it is converted to GL_TRUE. </p>
<p>
If you call <b>glGetIntegerv</b>, Boolean values are returned as GL_TRUE or GL_FALSE, and most floating-point values are rounded to the nearest integer value. Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to the most positive representable integer value and –1.0 to the most negative representable integer value. </p>
<p>
If you call <b>glGetFloatv</b> or <b>glGetDoublev</b>, Boolean values are returned as GL_TRUE or GL_FALSE, and integer values are converted to floating-point values.</p>
<p>
You can query many of the Boolean parameters more easily with <a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a>. </p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>pname</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%><b>glGet</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in gl.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_8o4t.htm"><b>glAccum</b></a>, <a href="glfunc01_5qhv.htm"><b>glAlphaFunc</b></a>, <a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_4vs3.htm"><b>glBlendFunc</b></a>, <a href="glfunc01_6uk4.htm"><b>glCallList</b></a>, <a href="glfunc01_3dbh.htm"><b>glClearAccum</b></a>, <a href="glfunc01_0rhu.htm"><b>glClearColor</b></a>, <a href="glfunc01_4j1k.htm"><b>glClearDepth</b></a>, <a href="glfunc01_1zqw.htm"><b>glClearIndex</b></a>, <a href="glfunc01_4j3g.htm"><b>glClearStencil</b></a>, <a href="glfunc01_9g11.htm"><b>glClipPlane</b></a>, <a href="glfunc01_62b6.htm"><b>glColor</b></a>, <a href="glfunc01_1fsb.htm"><b>glColorMask</b></a>, <a href="glfunc01_58vg.htm"><b>glColorMaterial</b></a>, <a href="glfunc01_9yxx.htm"><b>glCullFace</b></a>, <a href="glfunc01_5kkj.htm"><b>glDepthFunc</b></a>, <a href="glfunc01_35ij.htm"><b>glDepthMask</b></a>, <a href="glfunc01_9bxh.htm"><b>glDepthRange</b></a>, <a href="glfunc01_4gxe.htm"><b>glDrawBuffer</b></a>, <a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc02_5rmv.htm"><b>glFog</b></a>, <a href="glfunc02_49t1.htm"><b>glFrontFace</b></a>, <a href="glfunc02_8ndx.htm"><b>glGetClipPlane</b></a>, <a href="glfunc02_4jzm.htm"><b>glGetError</b></a>, <a href="glfunc02_0644.htm"><b>glGetLight</b></a>, <a href="glfunc02_2z3k.htm"><b>glGetMap</b></a>, <a href="glfunc02_8wj0.htm"><b>glGetMaterial</b></a>, <a href="glfunc02_76i8.htm"><b>glGetPixelMap</b></a>, <a href="glfunc02_2mw5.htm"><b>glGetPolygonStipple</b></a>, <a href="glfunc02_6dwn.htm"><b>glGetString</b></a>, <a href="glfunc02_9unq.htm"><b>glGetTexEnv</b></a>, <a href="glfunc02_00j2.htm"><b>glGetTexGen</b></a>, <a href="glfunc02_3d45.htm"><b>glGetTexImage</b></a>, <a href="glfunc02_9df6.htm"><b>glGetTexLevelParameter</b></a>, <a href="glfunc02_5cqa.htm"><b>glGetTexParameter</b></a>, <a href="glfunc03_9uno.htm"><b>glHint</b></a>, <a href="glfunc03_7ak8.htm"><b>glIndex</b></a>, <a href="glfunc03_5ajv.htm"><b>glIndexMask</b></a>, <a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a>, <a href="glfunc03_88z8.htm"><b>glLight</b></a>, <a href="glfunc03_3y5o.htm"><b>glLightModel</b></a>, <a href="glfunc03_7sdh.htm"><b>glLineStipple</b></a>, <a href="glfunc03_75k8.htm"><b>glLineWidth</b></a>, <a href="glfunc03_1icl.htm"><b>glListBase</b></a>, <a href="glfunc03_7wkw.htm"><b>glLogicOp</b></a>, <a href="glfunc03_78s1.htm"><b>glMap1</b></a>, <a href="glfunc03_78s2.htm"><b>glMap2</b></a>, <a href="glfunc03_509w.htm"><b>glMapGrid</b></a>, <a href="glfunc03_4vs5.htm"><b>glMatrixMode</b></a>, <a href="glfunc03_2eyc.htm"><b>glNewList</b></a>, <a href="glfunc03_5ru4.htm"><b>glNormal</b></a>, <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>, <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>, <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>, <a href="glfunc03_4mul.htm"><b>glPixelZoom</b></a>, <a href="glfunc03_5m91.htm"><b>glPointSize</b></a>, <a href="glfunc03_9zol.htm"><b>glPolygonMode</b></a>, <a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a>, <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a>, <a href="glfunc03_246w.htm"><b>glPushMatrix</b></a>, <a href="glfunc03_72ud.htm"><b>glPushName</b></a>, <a href="glfunc03_0tgz.htm"><b>glRasterPos</b></a>, <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a>, <a href="glfunc03_4nxu.htm"><b>glScissor</b></a>, <a href="glfunc03_24rw.htm"><b>glShadeModel</b></a>, <a href="glfunc03_9t9f.htm"><b>glStencilFunc</b></a>, <a href="glfunc03_7e7f.htm"><b>glStencilMask</b></a>, <a href="glfunc03_5tm8.htm"><b>glStencilOp</b></a>, <a href="glfunc03_6qck.htm"><b>glTexCoord</b></a>, <a href="glfunc03_6xyu.htm"><b>glTexEnv</b></a>, <a href="glfunc03_73u6.htm"><b>glTexGen</b></a>, <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a>, <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>, <a href="glfunc03_5ur8.htm"><b>glViewport</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

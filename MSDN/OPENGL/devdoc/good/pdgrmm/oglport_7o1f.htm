<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting Pixel Operations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ogl_porting_pixel_operations"></a>Porting Pixel Operations</h2>
<p>
When porting code that involves pixel operations, keep the following points in mind:
<ul>
<li>
Logical pixel operations are not applied to RGBA color buffers. For more information, see <a href="glfunc03_7wkw.htm"><b>glLogicOp</b></a>.</li>
<li>
In general, IRIS GL uses the format ABGR for pixels, whereas OpenGL uses RGBA. You can change the format with <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>.</li>
<li>
When porting <b>lrectwrite</b> functions, be careful to note where <b>lrectwrite</b> is writing (for example, it could be writing to the depth buffer).</li>
</ul>
<p>
OpenGL gives you some additional flexibility in pixel operations. The following table lists IRIS GL functions for pixel operations and their equivalent OpenGL functions.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=25%>IRIS GL Function</th>
<th align=left width=37%>OpenGL Function</th>
<th align=left width=38%>Meaning</th>
</tr>
<tr valign=top>
<td width=25%><b>lrectread</b>, <b>rectread</b>,<p>
<b>readRGB</b></p>
</td>
<td width=37%><a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a></td>
<td width=38%>Read a block of pixels from the frame buffer.</td>
</tr>
<tr valign=top>
<td width=25%><b>lrectwrite</b>, <b>rectwrite</b></td>
<td width=37%><a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a></td>
<td width=38%>Write a block of pixels to the frame buffer.</td>
</tr>
<tr valign=top>
<td width=25%><b>rectcopy</b></td>
<td width=37%><a href="glfunc01_36ur.htm"><b>glCopyPixels</b></a></td>
<td width=38%>Copy pixels in the frame buffer.</td>
</tr>
<tr valign=top>
<td width=25%><b>rectzoom</b></td>
<td width=37%><a href="glfunc03_4mul.htm"><b>glPixelZoom</b></a></td>
<td width=38%>Specify pixel zoom factors for <b>glDrawPixels</b> and <b>glCopyPixels</b>.</td>
</tr>
<tr valign=top>
<td width=25%><b>cmov</b></td>
<td width=37%><a href="glfunc03_0tgz.htm"><b>glRasterPos</b></a></td>
<td width=38%>Specify raster position for pixel operations.</td>
</tr>
<tr valign=top>
<td width=25%><b>readsource</b></td>
<td width=37%><a href="glfunc03_6hte.htm"><b>glReadBuffer</b></a></td>
<td width=38%>Select a color buffer source for pixels.</td>
</tr>
<tr valign=top>
<td width=25%><b>pixmode</b></td>
<td width=37%><a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>,<br>
<a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a></td>
<td width=38%>Set pixel storage modes.<br>
Set pixel transfer modes.</td>
</tr>
<tr valign=top>
<td width=25%><b>logicop</b></td>
<td width=37%><a href="glfunc03_7wkw.htm"><b>glLogicOp</b></a></td>
<td width=38%>Specify a logical operation for pixel writes.</td>
</tr>
<tr valign=top>
<td width=25%>—</td>
<td width=37%><a href="glfunc01_3l5x.htm"><b>glEnable</b></a><b>(</b>GL_LOGIC_OP<b>)</b></td>
<td width=38%>Turn on pixel logic operations.</td>
</tr>
</table><br>
<p>
For a complete list of possible logical operations, see <a href="glfunc03_7wkw.htm"><b>glLogicOp</b></a>.</p>
<p>
This IRIS GL code sample shows a typical pixel write:</p>
<pre><code>unsigned long *packedRaster; 
.. 
packedRaster[k] = 0x00000000; 
.. 
lrectwrite(0, 0, xSize, ySize, packedRaster); 
 </code></pre>
<p>
The preceding code looks like this when translated to OpenGL:</p>
<pre><code>glRasterPos2i( 0, 0); 
glDrawPixels( xSize + 1, ySize + 1, GL_RGBA, GL_UNSIGNED_BYTE,
              packedRaster); 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

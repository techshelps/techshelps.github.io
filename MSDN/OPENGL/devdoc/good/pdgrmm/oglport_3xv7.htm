<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting NURBS Surfaces</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ogl_porting_nurbs_surfaces"></a>Porting NURBS Surfaces</h3>
<p>
The following table lists the IRIS GL functions for drawing NURBS surfaces and their equivalent OpenGL functions.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=24%>IRIS GL Function</th>
<th align=left width=32%>OpenGL Function</th>
<th align=left width=44%>Meaning</th>
</tr>
<tr valign=top>
<td width=24%><b>bgnsurface</b></td>
<td width=32%><a href="glufnc01_6q05.htm"><b>gluBeginSurface</b></a></td>
<td width=44%>Begin a surface definition.</td>
</tr>
<tr valign=top>
<td width=24%><b>nurbssurface</b></td>
<td width=32%><a href="glufnc01_6ftx.htm"><b>gluNurbsSurface</b></a></td>
<td width=44%>Specify surface attributes.</td>
</tr>
<tr valign=top>
<td width=24%><b>endsurface</b></td>
<td width=32%><a href="glufnc01_6q05.htm"><b>gluEndSurface</b></a></td>
<td width=44%>End a surface definition.</td>
</tr>
</table><br>
<p>
The following table lists IRIS GL parameters for surface types and their equivalent OpenGL parameters.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=24%>IRIS GL Type</th>
<th align=left width=42%>OpenGL Type</th>
<th align=left width=34%>Meaning</th>
</tr>
<tr valign=top>
<td width=24%>N_V3D</td>
<td width=42%>GL_MAP2_VERTEX_3</td>
<td width=34%>Polynomial curve.</td>
</tr>
<tr valign=top>
<td width=24%>N_V3DR</td>
<td width=42%>GL_MAP2_VERTEX_4</td>
<td width=34%>Rational curve.</td>
</tr>
<tr valign=top>
<td width=24%>N_C4D</td>
<td width=42%>GL_MAP2_COLOR_4</td>
<td width=34%>Control points define color surface in (R,G,B,A) form.</td>
</tr>
<tr valign=top>
<td width=24%>N_C4DR</td>
<td width=42%><b>—</b></td>
<td width=34%>—</td>
</tr>
<tr valign=top>
<td width=24%>N_T2D</td>
<td width=42%>GL_MAP2_TEXTURE<br>
_COORD_2</td>
<td width=34%>Control points are texture coordinates.</td>
</tr>
<tr valign=top>
<td width=24%>N_T2DR</td>
<td width=42%>GL_MAP2_TEXTURE<br>
_COORD_3</td>
<td width=34%>Control points are texture coordinates.</td>
</tr>
<tr valign=top>
<td width=24%><b>—</b></td>
<td width=42%>GL_MAP2_NORMAL</td>
<td width=34%>Control points are normals.</td>
</tr>
</table><br>
<p>
For more information on available evaluator types, see <a href="glfunc03_78s2.htm"><b>glMap2</b></a>.</p>
<p>
The following code sample draws a trimmed NURBS surface:</p>
<pre><code>/* 
 *  trim.c 
 *  This program draws a NURBS surface in the shape of a 
 *  symmetrical hill, using both a NURBS curve and pwl 
 *  (piecewise linear) curve to trim part of the surface 
 */ 
#include &lt;GL/gl.h&gt; 
#include &lt;GL/glu.h&gt; 
#include "aux.h" 
 
GLfloat ctlpoints[4][4][3]; 
 
GLUnurbsObj *theNurb; 
 
/* 
 *  Initializes the control points of the surface to  
 *  a small hill. The control points range from -3 to  
 *  +3 in x, y, and z 
 */ 
void init_surface(void) 
{ 
    int u, v; 
    for (u = 0; u &lt; 4; u++) { 
        for (v = 0; v &lt; 4; v++) { 
            ctlpoints[u][v][0] = 2.0*((GLfloat)u - 1.5); 
            ctlpoints[u][v][1] = 2.0*((GLfloat)v - 1.5); 
 
            if ( (u == 1 || u == 2) &amp;&amp; (v == 1 || v == 2)) 
                ctlpoints[u][v][2] = 3.0; 
            else 
                ctlpoints[u][v][2] = -3.0; 
        } 
    } 
} 
 
/*  Initialize material property and depth buffer 
 */ 
void myinit(void) 
{ 
    GLfloat mat_diffuse[] = { 0.6, 0.6, 0.6, 1.0 }; 
    GLfloat mat_specular[] = { 0.9, 0.9, 0.9, 1.0 }; 
    GLfloat mat_shininess[] = { 128.0 }; 
 
    glClearColor (0.0, 0.0, 0.0, 1.0); 
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse); 
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular); 
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess); 
 
    glEnable(GL_LIGHTING); 
    glEnable(GL_LIGHT0); 
    glDepthFunc(GL_LEQUAL); 
    glEnable(GL_DEPTH_TEST); 
    glEnable(GL_AUTO_NORMAL); 
    glEnable(GL_NORMALIZE); 
 
    init_surface(); 
 
    theNurb = gluNewNurbsRenderer(); 
    gluNurbsProperty(theNurb, GLU_SAMPLING_TOLERANCE, 50.0); 
    gluNurbsProperty(theNurb, GLU_DISPLAY_MODE, GLU_FILL); 
} 
 
void display(void) 
{ 
    GLfloat knots[8] = {0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0}; 
    GLfloat edgePt[5][2] = /* counter clockwise */ 
    {{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.0}, {0.0, 1.0}, 
     {0.0, 0.0}}; 
    GLfloat curvePt[4][2] = /* clockwise */ 
    {{0.25, 0.5}, {0.25, 0.75}, {0.75, 0.75}, {0.75, 0.5}}; 
    GLfloat curveKnots[8] = 
        {0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0}; 
    GLfloat pwlPt[4][2] = /* clockwise */ 
        {{0.75, 0.5}, {0.5, 0.25}, {0.25, 0.5}}; 
 
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    glPushMatrix(); 
    glRotatef(330.0, 1.,0.,0.); 
    glScalef (0.5, 0.5, 0.5); 
 
    gluBeginSurface(theNurb); 
    gluNurbsSurface(theNurb, 
            8, knots, 
            8, knots, 
            4 * 3, 
            3, 
            &amp;ctlpoints[0][0][0], 
            4, 4, 
            GL_MAP2_VERTEX_3); 
    gluBeginTrim (theNurb); 
        gluPwlCurve (theNurb, 5, &amp;edgePt[0][0], 2, 
                     GLU_MAP1_TRIM_2); 
    gluEndTrim (theNurb); 
    gluBeginTrim (theNurb); 
        gluNurbsCurve (theNurb, 8, curveKnots, 2, 
                &amp;curvePt[0][0], 4, GLU_MAP1_TRIM_2); 
        gluPwlCurve (theNurb, 3, &amp;pwlPt[0][0], 2, 
                     GLU_MAP1_TRIM_2); 
    gluEndTrim (theNurb); 
    gluEndSurface(theNurb); 
 
    glPopMatrix(); 
    glFlush(); 
} 
 
void myReshape(GLsizei w, GLsizei h) 
{ 
    glViewport(0, 0, w, h); 
    glMatrixMode(GL_PROJECTION); 
    glLoadIdentity(); 
    gluPerspective (45.0, (GLdouble)w/(GLdouble)h, 3.0, 8.0); 
 
    glMatrixMode(GL_MODELVIEW); 
    glLoadIdentity(); 
    glTranslatef (0.0, 0.0, -5.0); 
} 
 
/*  Main Loop 
 */ 
int main(int argc, char** argv) 
{ 
    auxInitDisplayMode (AUX_SINGLE | AUX_RGBA | AUX_DEPTH); 
    auxInitPosition (0, 0, 500, 500); 
    auxInitWindow (argv[0]); 
    myinit(); 
    auxReshapeFunc (myReshape); 
    auxMainLoop(display); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

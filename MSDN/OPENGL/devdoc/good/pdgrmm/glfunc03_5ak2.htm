<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glVertexPointer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glvertexpointer"></a>glVertexPointer</h1>
<p>
The <b>glVertexPointer </b>function defines an array of vertex data.</p>
<pre><code><b>void glVertexPointer(
  GLint</b><i> size</i><b>,</b>             
<b>  GLenum</b><i> type</i><b>,</b>            
<b>  GLsizei</b><i> stride</i><b>,</b>         
<b>  GLsizei</b><i> count</i><b>,</b>          
<b>  const GLvoid</b><i> *pointer</i>   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>size</i></dt>
<dd>
The number of coordinates per vertex. The value of <i>size</i> must be 2, 3, or 4.</dd>
<dt>
<i>type</i></dt>
<dd>
The data type of each coordinate in the array using the following symbolic constants: GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE.</dd>
<dt>
<i>stride</i></dt>
<dd>
The byte offset between consecutive vertices. When <i>stride</i> is zero, the vertices are tightly packed in the array.</dd>
<dt>
<i>count</i></dt>
<dd>
The number of vertices, counting from the first, that are static.</dd>
<dt>
<i>pointer</i></dt>
<dd>
A pointer to the first coordinate of the first vertex in the array.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The<b> glVertexPointer</b> function specifies the location and data of an array of vertex coordinates to use when rendering. The <i>size</i> parameter specifies the number of coordinates per vertex. The <i>type</i> parameter specifies the data type of each vertex coordinate. The <i>stride</i> parameter determines the byte offset from one vertex to the next, enabling the packing of vertices and attributes in a single array or storage in separate arrays. In some implementations, storing the vertices and attributes in a single array can be more efficient than using separate arrays. Starting from the first vertex element, the <i>count</i> parameter indicates the total number of static elements. Your application can modify static elements, but once the elements are modified, the application must explicitly specify the array again before using the array for any rendering. Non-static array elements are not accessed until you call <a href="glfunc01_8oqb.htm"><b>glDrawArrays</b></a> or <a href="glfunc01_2q5w.htm"><b>glArrayElement</b></a>.</p>
<p>
A vertex array is enabled when you specify the<b> </b>GL_VERTEX_ARRAY constant with <a href="glfunc01_72at.htm"><b>glEnableClientState</b></a>. When enabled, <b>glDrawArrays</b> and <b>glArrayElement</b> use the vertex array. By default, the vertex array is disabled.</p>
<p>
You cannot include <b>glVertexPointer</b> in display lists.</p>
<p>
When you specify a vertex array using <b>glVertexPointer</b>, the values of all the function's vertex array parameters are saved in a client-side state and static array elements can be cached. Because the vertex array parameters are client-side state, their values are not saved or restored by <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a> and <b>glPopAttrib</b>.</p>
<p>
Although no error is generated if you call <b>glVertexPointer</b> within <a href="glfunc01_9u3y.htm"><b>glBegin</b></a> and <a href="glfunc01_9u3y.htm"><b>glEnd</b></a> pairs, the results are undefined.</p>
<p>
The following functions retrieve information related to <b>glVertexPointer</b>:</p>
<p class=indent1>
<a href="glfunc02_5ub8.htm"><b>glGet</b></a> with argument GL_VERTEX_ARRAY_SIZE </p>
<p class=indent1>
<b>glGet</b> with argument GL_VERTEX_ARRAY_STRIDE </p>
<p class=indent1>
<b>glGet</b> with argument GL_VERTEX_ARRAY_COUNT </p>
<p class=indent1>
<b>glGet</b> with argument GL_VERTEX_ARRAY_TYPE </p>
<p class=indent1>
<a href="glfunc02_8uwm.htm"><b>glGetPointerv</b></a> with argument GL_VERTEX_ARRAY_POINTER </p>
<p class=indent1>
<a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a> with argument GL_VERTEX_ARRAY </p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>size</i> was not 2, 3, or 4.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>type</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>stride</i> or <i>count</i> was negative.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="glfunc01_2q5w.htm"><b>glArrayElement</b></a>, <a href="glfunc01_456a.htm"><b>glColorPointer</b></a>, <a href="glfunc01_8oqb.htm"><b>glDrawArrays</b></a>, <a href="glfunc01_61pu.htm"><b>glEdgeFlagPointer</b></a>, <a href="glfunc01_3l5x.htm"><b>glEnableClientState</b></a>, <a href="glfunc02_8uwm.htm"><b>glGetPointerv</b></a>, <a href="glfunc02_6dwn.htm"><b>glGetString</b></a>, <a href="glfunc03_36lu.htm"><b>glIndexPointer</b></a>, <a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a>, <a href="glfunc03_1tiq.htm"><b>glNormalPointer</b></a>, <a href="glfunc03_64z6.htm"><b>glTexCoordPointer</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

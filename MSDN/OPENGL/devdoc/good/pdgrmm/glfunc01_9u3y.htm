<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glBegin, glEnd</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glbegin"></a>glBegin, glEnd</h1>
<p>
The <b>glBegin</b> and <b>glEnd</b> functions delimit the vertices of a primitive or a group of like primitives.</p>
<pre><code><b>void glBegin(
  GLenum</b><i> mode</i>   
<b>);</b>
 
<b>void glEnd(</b>
 <i> void</i>   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>mode</i></dt>
<dd>
The primitive or primitives that will be created from vertices presented between <b>glBegin</b> and the subsequent <b>glEnd</b>. The following are accepted symbolic constants and their meanings: 
<dl>
<dt>
GL_POINTS</dt>
<dd>
Treats each vertex as a single point. Vertex <i>n</i> defines point <i>n</i>. <i>N</i> points are drawn. </dd>
<dt>
GL_LINES</dt>
<dd>
Treats each pair of vertices as an independent line segment. Vertices <i>2n</i> – <i>1</i> and <i>2n</i> define line <i>n. N/2</i> lines are drawn. </dd>
<dt>
GL_LINE_STRIP</dt>
<dd>
Draws a connected group of line segments from the first vertex to the last. Vertices <i>n</i> and <i>n+1</i> define line <i>n. N</i> – <i>1</i> lines are drawn. </dd>
<dt>
GL_LINE_LOOP</dt>
<dd>
Draws a connected group of line segments from the first vertex to the last, then back to the first. Vertices <i>n</i> and <i>n+1</i> define line <i>n. </i>The last line, however, is defined by vertices<i> N</i> and <i>1. N</i> lines are drawn. </dd>
<dt>
GL_TRIANGLES</dt>
<dd>
Treats each triplet of vertices as an independent triangle. Vertices <i>3n</i> – <i>2</i>, <i>3n –</i><i>1</i>, and <i>3n</i> define triangle <i>n. N/3</i> triangles are drawn. </dd>
<dt>
GL_TRIANGLE_STRIP</dt>
<dd>
Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. For odd <i>n</i>, vertices <i>n</i>, <i>n + 1</i>, and <i>n + 2</i> define triangle <i>n</i>. For even <i>n</i>, vertices <i>n + 1</i>, <i>n</i>, and <i>n + 2</i> define triangle <i>n</i>. <i>N </i>– <i>2</i> triangles are drawn. </dd>
<dt>
GL_TRIANGLE_FAN</dt>
<dd>
Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. Vertices <i>1</i>, <i>n + 1</i>, and <i>n + 2</i> define triangle <i>n</i>. <i>N</i> – <i>2</i> triangles are drawn. </dd>
<dt>
GL_QUADS</dt>
<dd>
Treats each group of four vertices as an independent quadrilateral. Vertices <i>4n</i> – <i>3</i>, <i>4n</i> – <i>2</i>, <i>4n</i> – <i>1</i>, and <i>4n</i> define quadrilateral <i>n</i>. <i>N/4</i> quadrilaterals are drawn. </dd>
<dt>
GL_QUAD_STRIP</dt>
<dd>
Draws a connected group of quadrilaterals. One quadrilateral is defined for each pair of vertices presented after the first pair. Vertices <i>2n</i> – <i>1</i>, <i>2n</i>, <i>2n + 2</i>, and <i>2n + 1</i> define quadrilateral <i>n</i>. <i>N</i> quadrilaterals are drawn. Note that the order in which vertices are used to construct a quadrilateral from strip data is different from that used with independent data.</dd>
<dt>
GL_POLYGON</dt>
<dd>
Draws a single, convex polygon. Vertices <i>1</i> through <i>N</i> define this polygon.
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>glBegin</b> and <b>glEnd</b> functions delimit the vertices that define a primitive or a group of like primitives. The <b>glBegin</b> function accepts a single argument that specifies which of ten ways the vertices are interpreted. Taking <i>n</i> as an integer count starting at one, and <i>N </i>as the total number of vertices specified, the interpretations are as follows: 
<ul>
<li>
You can use only a subset of OpenGL functions between <b>glBegin</b> and <b>glEnd</b>. The functions you can use are: <p>
<a href="glfunc03_2kag.htm"><b>glVertex</b></a><br>
<a href="glfunc01_62b6.htm"><b>glColor</b></a><br>
<a href="glfunc03_7ak8.htm"><b>glIndex</b></a><br>
<a href="glfunc03_5ru4.htm"><b>glNormal</b></a><br>
<a href="glfunc03_6qck.htm"><b>glTexCoord</b></a><br>
<a href="glfunc01_7hb8.htm"><b>glEvalCoord</b></a><br>
<a href="glfunc02_1o50.htm"><b>glEvalPoint</b></a><br>
<a href="glfunc03_7cq4.htm"><b>glMaterial</b></a><br>
<a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a>
<p>
You can also use <a href="glfunc01_6uk4.htm"><b>glCallList</b></a> or <a href="glfunc01_8bub.htm"><b>glCallLists</b></a> to execute display lists that include only the preceding functions. If any other OpenGL function is called between <b>glBegin</b> and <b>glEnd</b>, the error flag is set and the function is ignored.
</li>
<li>
Regardless of the value chosen for <i>mode </i>in <b>glBegin</b>, there is no limit to the number of vertices you can define between <b>glBegin</b> and <b>glEnd</b>. Lines, triangles, quadrilaterals, and polygons that are incompletely specified are not drawn. Incomplete specification results when either too few vertices are provided to specify even a single primitive or when an incorrect multiple of vertices is specified. The incomplete primitive is ignored; the complete primitives are drawn.</li>
<li>
The minimum specification of vertices for each primitive is: </li>
</ul>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=30%>Minimum Number <br>
of Vertices</th>
<th align=left width=70%><br>
Type of Primitive</th>
</tr>
<tr valign=top>
<td width=30%>1 </td>
<td width=70%>point</td>
</tr>
<tr valign=top>
<td width=30%>2</td>
<td width=70%>line</td>
</tr>
<tr valign=top>
<td width=30%>3</td>
<td width=70%>triangle</td>
</tr>
<tr valign=top>
<td width=30%>4</td>
<td width=70%>quadrilateral</td>
</tr>
<tr valign=top>
<td width=30%>3</td>
<td width=70%>polygon</td>
</tr>
</table><br>
<p class=indent1>
Modes that require a certain multiple of vertices are GL_LINES (2), GL_TRIANGLES (3), GL_QUADS (4), and GL_QUAD_STRIP (2).</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error Code</th>
<th align=left width=52%>Condition</th>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_ENUM </td>
<td width=52%><i>mode</i> was set to an unaccepted value.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_OPERATION </td>
<td width=52%>A function other than <b>glVertex</b>,<b> glColor</b>,<b> glIndex</b>,<b> glNormal</b>,<b> glTexCoord</b>,<b> glEvalCoord</b>,<b> glEvalPoint</b>,<b> glMaterial</b>,<b> glEdgeFlag</b>,<b> glCallList</b>, or <b>glCallLists</b> was called between <b>glBegin</b> and the corresponding <b>glEnd</b>.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_OPERATION </td>
<td width=52%><b>glEnd</b> was called before the corresponding <b>glBegin</b> was called, or <b>glBegin</b> was called within a <b>glBegin</b>/<b>glEnd</b> sequence.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in gl.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_6uk4.htm"><b>glCallList</b></a>, <a href="glfunc01_8bub.htm"><b>glCallLists</b></a>, <a href="glfunc01_62b6.htm"><b>glColor</b></a>, <a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a>, <a href="glfunc01_7hb8.htm"><b>glEvalCoord</b></a>, <a href="glfunc02_1o50.htm"><b>glEvalPoint</b></a>, <a href="glfunc03_7ak8.htm"><b>glIndex</b></a>, <a href="glfunc03_7cq4.htm"><b>glMaterial</b></a>, <a href="glfunc03_5ru4.htm"><b>glNormal</b></a>, <a href="glfunc03_6qck.htm"><b>glTexCoord</b></a>, <a href="glfunc03_2kag.htm"><b>glVertex</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Basic OpenGL Operation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_basic_opengl_operation"></a>Basic OpenGL Operation</h1>
<p>
The following abstract, high-level block diagram illustrates how OpenGL processes data. In the diagram, commands enter from the left and proceed through what can be considered a processing pipeline. Some commands specify geometric objects to be drawn, and others control how the objects are handled during the various processing stages. </p>
<p>
<img src="images/basic01.gif" border=0></p>
<p>
The processing stages in basic OpenGL operation are as follows:
<ul>
<li>
<b>Display list</b> Rather than having all commands proceed immediately through the pipeline, you can choose to accumulate some of them in a display list for processing later. </li>
<li>
<b>Evaluator</b> The evaluator stage of processing provides an efficient way to approximate curve and surface geometry by evaluating polynomial commands of input values. </li>
<li>
<b>Per-vertex operations and primitive assembly</b> OpenGL processes geometric primitives—points, line segments, and polygons—all of which are described by vertices. Vertices are transformed and lit, and primitives are clipped to the viewport in preparation for rasterization.</li>
<li>
<b>Rasterization</b> The rasterization stage produces a series of frame-buffer addresses and associated values using a two-dimensional description of a point, line segment, or polygon. Each fragment so produced is fed into the last stage, per-fragment operations.</li>
<li>
<b>Per-fragment operations</b> These are the final operations performed on the data before it's stored as pixels in the frame buffer. <p>
Per-fragment operations include conditional updates to the frame buffer based on incoming and previously stored z values (for z buffering) and blending of incoming pixel colors with stored colors, as well as masking and other logical operations on pixel values.
</li>
</ul>
<p>
Data can be input in the form of pixels rather than vertices. Data in the form of pixels, such as might describe an image for use in texture mapping, skips the first stage of processing described above and instead is processed as pixels, in the pixel operations stage. Following pixel operations, the pixel data is either: 
<ul>
<li>
Stored as texture memory, for use in the rasterization stage.</li>
<li>
Rasterized, with the resulting fragments merged into the frame buffer just as if they were generated from geometric data.</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

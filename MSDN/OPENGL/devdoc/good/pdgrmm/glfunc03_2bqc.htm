<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glTexSubImage2D</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_gltexsubimage2d"></a>glTexSubImage2D</h1>
<p>
The <b>glTexSubImage2D</b> function specifies a portion of an existing one-dimensional texture image. You cannot define a new texture with <b>glTexSubImage2D</b>.</p>
<pre><code><b>void glTexSubImage2D(
  GLenum</b><i> target</i><b>,        </b>
<b>  GLint</b><i> level</i><b>,          </b>
<b>  GLint</b><i> xoffset</i><b>,        </b>
<b>  GLint</b><i> yoffset</i><b>,        </b>
<b>  GLsizei</b><i> width</i><b>,        </b>
<b>  GLsizei</b><i> height</i><b>,       </b>
<b>  GLenum</b><i> format</i><b>,        </b>
<b>  GLenum</b><i> type</i><b>,          </b>
<b>  const GLvoid</b><i> *pixels  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>target</i></dt>
<dd>
The target texture. Must be GL_TEXTURE_2D. </dd>
<dt>
<i>level</i></dt>
<dd>
The level-of-detail number. Level 0 is the base image. Level <i>n</i> is the <i>n</i>th mipmap reduction image. </dd>
<dt>
<i>xoffset</i></dt>
<dd>
A texel offset in the <i>x</i> direction within the texture array. </dd>
<dt>
<i>yoffset</i></dt>
<dd>
A texel offset in the <i>y</i> direction within the texture array. </dd>
<dt>
<i>width</i></dt>
<dd>
The width of the texture sub-image. </dd>
<dt>
<i>height</i></dt>
<dd>
The height of the texture sub-image. </dd>
<dt>
<i>format</i></dt>
<dd>
The format of the pixel data. It can assume one of the following symbolic values:
<dl>
<dt>
GL_COLOR_INDEX</dt>
<dd>
Each element is a single value, a color index. It is converted to fixed point format (with an unspecified number of 0 bits to the right of the binary point), shifted left or right depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET (see <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>). The resulting index is converted to a set of color components using the GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A tables, and clamped to the range [0,1].</dd>
<dt>
GL_RED</dt>
<dd>
Each element is a single red component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <b>glPixelTransfer</b>). </dd>
<dt>
GL_GREEN</dt>
<dd>
Each element is a single green component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>). </dd>
<dt>
GL_BLUE</dt>
<dd>
Each element is a single blue component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red and green, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <b>glPixelTransfer</b>). </dd>
<dt>
GL_ALPHA</dt>
<dd>
Each element is a single alpha component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>). </dd>
<dt>
GL_RGB</dt>
<dd>
Each element is an RGB triple. It is converted to floating point format and assembled into an RGBA element by attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <b>glPixelTransfer</b>). </dd>
<dt>
GL_RGBA </dt>
<dd>
Each element is a complete RGBA element. It is converted to floating point. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <b>glPixelTransfer</b>). </dd>
<dt>
GL_LUMINANCE </dt>
<dd>
Each element is a single luminance value. It is converted to floating point format, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue, and attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>). </dd>
<dt>
GL_LUMINANCE_ALPHA </dt>
<dd>
Each element is a luminance/alpha pair. It is converted to floating point format, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see <b>glPixelTransfer</b>).</dd>
</dl>
</dd>
<dt>
<i>type </i></dt>
<dd>
The data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT.</dd>
<dt>
<i>pixels</i></dt>
<dd>
A pointer to the image data in memory.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Two-dimensional texturing for a primitive is enabled using <a href="glfunc01_3l5x.htm"><b>glEnable</b></a> and <b>glDisable</b> with the argument GL_TEXTURE_2D. During texturing, part of a specified texture image is mapped onto each enabled primitive. You use the <b>glTexSubImage2D</b> function to specify a contiguous sub-image of an existing one-dimensional texture image for texturing.</p>
<p>
The texels referenced by <i>pixels</i> replace a region of the existing texture array with <i>x</i> indexes of <i>xoffset</i> and <i>xoffset</i> + (<i>width</i> – 1) inclusive and <i>y</i> indexes of <i>yoffset</i> and <i>Yoffset</i> + (<i>height</i> – 1) inclusive. This region cannot include any texels outside the range of the originally specified texture array.</p>
<p>
Specifying a sub-image with a <i>width</i> of zero has no effect and does not generate an error.</p>
<p>
Texturing has no effect in color-index mode.</p>
<p>
In general, texture images can be represented by the same data formats as the pixels in a <a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a> command, except that GL_STENCIL_INDEX and GL_DEPTH_COMPONENT cannot be used. The <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a> and <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a> modes affect texture images in exactly the way they affect <b>glDrawPixels</b>.</p>
<p>
The following functions retrieve information related to <b>glTexSubImage2D</b>:</p>
<p class=indent1>
<a href="glfunc02_3d45.htm"><b>glGetTexImage</b></a> </p>
<p class=indent1>
<a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a> with argument GL_TEXTURE_2D</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>target</i> was not GL_TEXTURE_2D.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>format</i> was not an accepted constant. </td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>type</i> was not an accepted constant.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>type</i> was GL_BITMAP and <i>format</i> was not GL_COLOR_INDEX.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>level</i> was less than zero or greater than log (2) <i>max</i>, where <i>max</i> was the returned value of GL_MAX_TEXTURE_SIZE.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>xoffset</i> was less than -<i>b</i>; or <i>xoffset</i> + <i>width</i> was greater than <i>w</i> - <i>b</i>; or <i>yoffset</i> was less than -<i>b</i>; or <i>yoffset</i> + <i>height</i> was greater than <i>h</i> - <i>b</i>, where <i>w</i> is the GL_TEXTURE_WIDTH, h is the GL_TEXTURE_HEIGHT, and <i>b</i> is the width of the GL_TEXTURE_BORDER of the texture image being modified.<p>
Note that <i>w</i> and <i>h</i> include twice the border width.</p>
</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>width</i> was less than -<i>b</i>, where <i>b</i> is the border width of the texture array.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>border</i> was not zero or 1.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%>The texture array was not defined by a previous <b>glTexImage2D</b> operation.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%><b>glTexSubImage2D</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a>, <a href="glfunc01_3l5x.htm"><b>glEnable</b></a>, <a href="glfunc02_5rmv.htm"><b>glFog</b></a>, <a href="glfunc02_3d45.htm"><b>glGetTexImage</b></a>, <a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a>, <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>, <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>, <a href="glfunc03_6xyu.htm"><b>glTexEnv</b></a>, <a href="glfunc03_73u6.htm"><b>glTexGen</b></a>, <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>, <a href="glfunc03_9upe.htm"><b>glTexParameter</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glEvalMesh</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glevalmesh"></a>glEvalMesh1, glEvalMesh2</h1>
<p>
The <b>glEvalMesh1</b> and <b>glEvalMesh2</b> functions compute a one- or two-dimensional grid of points or lines.</p>
<pre><code><b>void glEvalMesh1(
  GLenum</b><i> mode</i><b>,</b>   
<b>  GLint</b><i> i1</i><b>,</b>      
<b>  GLint</b><i> i2</i>       
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>mode</i></dt>
<dd>
In <b>glEvalMesh1</b>, specifies whether to compute a one-dimensional mesh of points or lines. The following symbolic constants are accepted: GL_POINT and GL_LINE. </dd>
<dt>
<i>i1, i2</i></dt>
<dd>
The first and last integer values for grid domain variable<i> i</i>.
</dd>
</dl>
<pre><code><b>void glEvalMesh2(
  GLenum</b><i> mode</i><b>,</b>   
<b>  GLint</b><i> i1</i><b>,</b>      
<b>  GLint</b><i> i2</i><b>,</b>      
<b>  GLint</b><i> j1</i><b>,</b>      
<b>  GLint</b><i> j2</i>       
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>mode</i></dt>
<dd>
In <b>glEvalMesh2</b>, specifies whether to compute a two-dimensional mesh of points, lines, or polygons. The following symbolic constants are accepted: GL_POINT, GL_LINE, and GL_FILL. </dd>
<dt>
<i>i1, i2</i></dt>
<dd>
The first and last integer values for grid domain variable<i> i</i>. </dd>
<dt>
<i>j1, j2</i></dt>
<dd>
The first and last integer values for grid domain variable <i>j</i>.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Use <a href="glfunc03_509w.htm"><b>glMapGrid</b></a> and <b>glEvalMesh</b> in tandem to efficiently generate and evaluate a series of evenly spaced map domain values. The <b>glEvalMesh</b> function steps through the integer domain of a one- or two-dimensional grid, whose range is the domain of the evaluation maps specified by <a href="glfunc03_78s1.htm"><b>glMap1</b></a> and <a href="glfunc03_78s2.htm"><b>glMap2</b></a>. The <i>mode</i> parameter determines whether the resulting vertices are connected as points, lines, or filled polygons.</p>
<p>
In the one-dimensional case, <b>glEvalMesh1</b>, the mesh is generated as if the following code fragment were executed:</p>
<p>
<b>glBegin</b>(<i>type</i>)&nbsp;;</p>
<p>
for (<i>i</i> = <i>i1</i>;<i> i </i>&lt;= <i>i2</i>;<i> i</i> += 1) </p>
<p>
<b>glEvalCoord1</b>(<i>i</i>·&Delta;<i>u </i>+ <i>u</i> (1) )</p>
<p>
<b>glEnd</b>(&nbsp;);</p>
<p>
where</p>
<p>
&Delta;<i>u</i> = (<i>u</i> (2)  –<i> u</i> (1) ) /<i> n</i></p>
<p>
and <i>n</i>,<i> u</i> (1) , and <i>u</i> (2)  are the arguments to the most recent <b>glMapGrid1</b> function. The <i>type</i> parameter is GL_POINTS if <i>mode</i> is GL_POINT, or GL_LINES if <i>mode</i> is GL_LINE. The one absolute numeric requirement is that if <i>i</i> = <i>n</i>, then the value computed from <i>i</i>·&Delta; <i>u</i> + <i>u</i> (1)  is exactly <i>u</i> (2) .</p>
<p>
In the two-dimensional case, <b>glEvalMesh2</b>, let </p>
<p>
&Delta; <i>u</i> = (<i>u</i> (2)  – <i>u</i> (1) )/<i>n</i></p>
<p>
&Delta; <i>v</i> = (<i>v</i> (2)  – <i>v</i> (1) )/<i>m</i>,</p>
<p>
where <i>n</i>, <i>u</i> (1) , <i>u</i> (2) , <i>m</i>, <i>v</i> (1) , and <i>v</i> (2)  are the arguments to the most recent <b>glMapGrid2</b> function. Then, if <i>mode</i> is GL_FILL, <b>glEvalMesh2</b> is equivalent to:</p>
<p>
for (<i>j</i> = <i>j1</i>; <i>j</i> &lt; <i>j2</i>; <i>j</i> += 1) {</p>
<p>
<b>glBegin(</b>GL_QUAD_STRIP<b>)</b>;</p>
<p>
for (<i>i</i> = <i>i1</i>; <i>i</i> &lt;= <i>i2</i>; <i>i</i> += 1) {</p>
<p>
<b>glEvalCoord2</b>(<i>i</i>·&Delta; <i>u</i> + <i>u</i> (1 ) , <i>j </i>·&Delta; <i>v</i> + <i>v</i> (1) );</p>
<p>
<b>glEvalCoord2</b>(<i>i</i>·&Delta; <i>u</i> + <i>u</i> (1 ) , (<i>j</i>+1) ·&Delta; <i>v</i> + <i>v</i> (1) );</p>
<p>
}</p>
<p>
<b>glEnd</b>(&nbsp;); </p>
<p>
}</p>
<p>
If <i>mode</i> is GL_LINE, then a call to <b>glEvalMesh2</b> is equivalent to:</p>
<p>
for (<i>j</i> = <i>j1</i>; <i>j</i> &lt;= <i>j2</i>; <i>j</i> += 1) {</p>
<p>
<b>glBegin(</b>GL_LINE_STRIP<b>)</b>;</p>
<p>
for (<i>i</i> = <i>i1</i>; <i>i</i> &lt;= <i>i2</i>; <i>i</i> += 1)</p>
<p>
<b>glEvalCoord2</b>(<i>i</i>·&Delta; <i>u</i> + <i>u</i> (1) ,<i> j</i>·&Delta; <i>v</i> + <i>v</i> (1) );</p>
<p>
<b>glEnd</b>(&nbsp;);</p>
<p>
}</p>
<p>
for (<i>i</i> = <i>i1</i>; <i>i</i> &lt;= <i>i2</i>; <i>i</i> += 1) {</p>
<p>
<b>glBegin(</b>GL_LINE_STRIP<b>)</b>;</p>
<p>
for (<i>j</i> = <i>j1</i>; <i>j</i> &lt;= <i>j1</i>; <i>j</i> += 1)</p>
<p>
<b>glEvalCoord2</b>(<i>i</i>·&Delta; <i>u</i> + <i>u</i> (1) ,<i> j</i>·&Delta; <i>v</i> + <i>v</i> (1) );</p>
<p>
<b>glEnd</b>(&nbsp;);</p>
<p>
}</p>
<p>
And finally, if <i>mode</i> is GL_POINT, then a call to <b>glEvalMesh2</b> is equivalent to:</p>
<p>
<b>glBegin(</b>GL_POINTS<b>)</b>; </p>
<p>
for (<i>j</i> = <i>j1</i>; <i>j</i> &lt;= <i>j2</i>; <i>j</i> += 1) {</p>
<p>
for (<i>i</i> = <i>i1</i>; <i>i</i> &lt;= <i>i2</i>; <i>i</i> += 1) {</p>
<p>
<b>glEvalCoord2</b>(<i>i</i>·&Delta; <i>u</i> + <i>u</i> (1) , <i>j</i>·&Delta; <i>v</i> + <i>v</i> (1) );</p>
<p>
} </p>
<p>
} </p>
<p>
<b>glEnd</b>(&nbsp;);</p>
<p>
In all three cases, the only absolute numeric requirements are that if <i>i</i> = <i>n</i>, then the value computed from <i>i</i>·&Delta; <i>u</i> + <i>u</i> (1)  is exactly <i>u</i> (2) , and if <i>j</i> = <i>m</i>, then the value computed from <i>j</i>·&Delta; <i>v</i> + <i>v</i> (1)  is exactly <i>v</i> (2) .</p>
<p>
The following functions retrieve information relating to <b>glEvalMesh</b>:</p>
<p class=indent1>
<a href="glfunc02_5ub8.htm"><b>glGet</b></a> with argument GL_MAP1_GRID_DOMAIN</p>
<p class=indent1>
<b>glGet</b> with argument GL_MAP2_GRID_DOMAIN</p>
<p class=indent1>
<b>glGet</b> with argument GL_MAP1_GRID_SEGMENTS</p>
<p class=indent1>
<b>glGet</b> with argument GL_MAP2_GRID_SEGMENTS</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>mode</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%><b>glEvalMesh</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in gl.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc01_7hb8.htm"><b>glEvalCoord</b></a>, <a href="glfunc02_1o50.htm"><b>glEvalPoint</b></a>, <a href="glfunc03_78s1.htm"><b>glMap1</b></a>, <a href="glfunc03_78s2.htm"><b>glMap2</b></a>, <a href="glfunc03_509w.htm"><b>glMapGrid</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

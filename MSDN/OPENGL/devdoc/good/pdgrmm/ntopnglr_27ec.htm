<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>wglCreateLayerContext</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_wglcreatelayercontext"></a>wglCreateLayerContext</h1>
<p>
The <b>wglCreateLayerContext </b>function creates a new OpenGL rendering context for drawing to a specified layer plane on a device context. </p>
<pre><code><b>HGLRC wglCreateLayerContext(
  HDC </b><i> hdc</i><b>,          </b>// device context used for a rendering context
<b>  int </b><i> iLayerPlane</i>   // specifies the layer plane that a rendering 
                     // context is bound to
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hdc</i></dt>
<dd>
Specifies the device context for a new rendering context.</dd>
<dt>
<i>iLayerPlane</i></dt>
<dd>
Specifies the layer plane to which you want to bind a rendering context. The value 0 identifies the main plane. Positive values of <i>iLayerPlane</i> identify overlay planes, where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on. Negative values identify underlay planes, where –1 is the first underlay plane under the main plane, –2 is the second underlay plane under the first underlay plane, and so on. The number of overlay and underlay planes is given in the <b>bReserved</b><i> </i>member of the <a href="ntopnglr_73jm.htm"><b>PIXELFORMATDESCRIPTOR</b></a> structure.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a handle to an OpenGL rendering context.</p>
<p>
If the function fails, the return value is NULL. To get extended error information, call <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_1.Click()><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
A rendering context is a port through which all OpenGL commands pass. Every thread that makes OpenGL calls must have one current, active rendering context. A rendering context is not the same as a device context; a rendering context contains information specific to OpenGL, while a device context contains information specific to GDI.</p>
<p>
Before you create a rendering context, set the pixel format of the device context with the <a href="ntopnglr_3q5w.htm"><b>SetPixelFormat</b></a> function. You can use a rendering context in a specified layer plane of a window with identical pixel formats only.</p>
<p>
With OpenGL applications that use multiple threads, you create a rendering context, select it as the current rendering context of a thread, and make OpenGL calls for the specified thread. When you are finished with the rendering context of the thread, call the <a href="ntopnglr_0g6s.htm"><b>wglDeleteContext</b></a> function. The following code example shows how to use <b>wglCreateLayerContext</b>.</p>
<pre><code>// The following code fragment shows how to render to overlay 1 
// This example assumes that the pixel format of hdc includes  
// overlay plane 1 
 
HDC hdc; 
HGLRC; 
 
// create a rendering context for overlay plane 1 
hglrc = wglCreateLayerContext(hdc, 1); 
 
// make it the calling thread's current rendering context 
wglMakeCurrent(hdc, hglrc); 
 
// call OpenGL functions here. . . 
 
// when the rendering context is no longer needed. . . 
 
// make the rendering context not current 
wglMakeCurrent(NULL, NULL); 
 
// delete the rendering context 
wglDeleteContext(hglrc); 
  </code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in wingdi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="ntopnglo_3ab9.htm">OpenGL on Windows NT and Windows 95 Overview</a>, <a href="ntopnglo_4e7n.htm">WGL Functions</a>, <a href="ntopnglr_73jm.htm"><b>PIXELFORMATDESCRIPTOR</b></a>, <a href="ntopnglr_3q5w.htm"><b>SetPixelFormat</b></a>, <a href="ntopnglr_1awk.htm"><b>wglCreateContext</b></a>, <a href="ntopnglr_0g6s.htm"><b>wglDeleteContext</b></a>, <a href="ntopnglr_667o.htm"><b>wglGetCurrentContext</b></a>, <a href="ntopnglr_7psz.htm"><b>wglGetCurrentDC</b></a>, <a href="ntopnglr_2u0k.htm"><b>wglMakeCurrent</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

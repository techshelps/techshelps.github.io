<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examining a Device's Supported Pixel Formats</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ogl_examining_a_devices_supported_pixel_formats"></a>Examining a Device's Supported Pixel Formats</h3>
<p>
The <a href="ntopnglr_9ygk.htm"><b>DescribePixelFormat</b></a> function obtains pixel format data for a device context. It also returns an integer that is the maximum pixel format index for the device context. The following code sample shows how to use that result to step through and examine the pixel formats supported by a device:</p>
<pre><code>// local variables 
int                      iMax ; 
PIXELFORMATDESCRIPTOR    pfd; 
int                      iPixelFormat ; 
 
// initialize a pixel format index variable 
iPixelFormat = 1; 
 
// keep obtaining and examining pixel format data... 
do { 
    // try to obtain some pixel format data 
    iMax = DescribePixelFormat(hdc, iPixelFormat, sizeof(pfd), &amp;pfd); 
 
    // if there was some problem with that...  
    if (iMax == 0) 
     
        // return indicating failure 
        return(FALSE); 
     
    // we have successfully obtained pixel format data 
 
    // let's examine the pixel format data... 
    myPixelFormatExaminer (&amp;pfd); 
    }  
 
// ...until we've looked at all the device context's pixel formats 
while (++iPixelFormat &lt;= iMax); 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pixel Formats</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ogl_pixel_formats"></a>Pixel Formats</h2>
<p>
A <i>pixel format</i> specifies several properties of an OpenGL drawing surface. Some of the properties specified by a pixel format are:
<ul>
<li>
Whether the pixel buffer is single- or double-buffered.</li>
<li>
Whether the pixel data is in RGBA or color-index form.</li>
<li>
The number of bits used to store color data.</li>
<li>
The number of bits used for the depth (z-axis) buffer.</li>
<li>
The number of bits used for the stencil buffer.</li>
<li>
The number of overlay and underlay planes.</li>
<li>
Various visibility masks.</li>
</ul>
<p>
Microsoft's implementation of OpenGL for Windows NT and Windows 95 uses the <a href="ntopnglr_73jm.htm"><b>PIXELFORMATDESCRIPTOR</b></a> data structure to convey pixel format data. The structure's members specify the preceding properties and several others.  </p>
<p>
A given device context can support several pixel formats. Windows NT and Windows 95 identify the pixel formats that a device context supports with consecutive one-based index values (1, 2, 3, 4, and so on). A device context can have just one current pixel format, chosen from the set of pixel formats it supports.</p>
<p>
Each window has its own current pixel format in OpenGL in Windows NT and Windows 95. This means, for example, that an application can simultaneously display RGBA and color-index OpenGL windows, or single- and double-buffered OpenGL windows. This per-window pixel format capability is limited to OpenGL windows.</p>
<p>
Typically, you obtain a device context, set the device context's pixel format, and then create an OpenGL rendering context suitable for that device. </p>
<p>
<b>Note</b>  You set the pixel format before creating a rendering context because the rendering context inherits the device context's pixel format.</p>
<p>&nbsp;</p></body>
</HTML>

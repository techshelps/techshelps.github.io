<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting Depth Cueing and Fog Commands</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ogl_porting_depth_cueing_and_fog_commands"></a>Porting Depth Cueing and Fog Commands</h2>
<p>
When porting depth-cueing and fog commands, keep the following points in mind:
<ul>
<li>
The IRIS GL call, <b>fogvertex</b>, sets a mode and the parameters affecting that mode. In OpenGL, you call <a href="glfunc02_5rmv.htm"><b>glFog</b></a> once to set the mode, and then again twice or more to set various parameters.</li>
<li>
In OpenGL, depth cueing is not a separate feature. Use linear fog instead of depth cueing. (This section gives an example of how to do this.) The following IRIS GL functions have no direct OpenGL equivalent:<p>
<b>depthcue</b>
<p>
<b>lRGBrange</b>
<p>
<b>lshaderange</b>
<p>
<b>getdcm</b>
</li>
<li>
To adjust fog quality, use <a href="glfunc03_9uno.htm"><b>glHint</b></a><b>(</b>GL_FOG_HINT<b>)</b>.</li>
</ul>
<p>
The following table lists the IRIS GL functions for managing fog and their equivalent OpenGL functions. </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>IRIS GL Function</th>
<th align=left width=31%>OpenGL Function</th>
<th align=left width=38%>Meaning</th>
</tr>
<tr valign=top>
<td width=31%><b>fogvertex</b></td>
<td width=31%><a href="glfunc02_5rmv.htm"><b>glFog</b></a></td>
<td width=38%>Set various fog parameters.</td>
</tr>
<tr valign=top>
<td width=31%><b>fogvertex(</b>FG_ON<b>)</b></td>
<td width=31%><a href="glfunc01_3l5x.htm"><b>glEnable</b></a><b>(</b>GL_FOG<b>)</b></td>
<td width=38%>Turn fog on.</td>
</tr>
<tr valign=top>
<td width=31%><b>fogvertex(</b>FG_OFF<b>)</b></td>
<td width=31%><a href="glfunc01_3l5x.htm"><b>glDisable</b></a><b>(</b>GL_FOG<b>)</b></td>
<td width=38%>Turn fog off.</td>
</tr>
<tr valign=top>
<td width=31%><b>depthcue</b></td>
<td width=31%><a href="glfunc02_5rmv.htm"><b>glFog</b></a><b>(</b>GL_FOG_MOD, GL_LINEAR<b>)</b></td>
<td width=38%>Use linear fog for depth cueing.</td>
</tr>
</table><br>
<p>
The following table lists the parameters you can pass to <b>glFog</b>.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Fog Parameter</th>
<th align=left width=40%>Meaning</th>
<th align=left width=29%>Default</th>
</tr>
<tr valign=top>
<td width=31%>GL_FOG_DENSITY</td>
<td width=40%>Fog density.</td>
<td width=29%>1.0</td>
</tr>
<tr valign=top>
<td width=31%>GL_FOG_START</td>
<td width=40%>Near distance for linear fog.</td>
<td width=29%>0.0</td>
</tr>
<tr valign=top>
<td width=31%>GL_FOG_END</td>
<td width=40%>Far distance for linear fog.</td>
<td width=29%>1.0</td>
</tr>
<tr valign=top>
<td width=31%>GL_FOG_INDEX</td>
<td width=40%>Fog color index.</td>
<td width=29%>0.0</td>
</tr>
<tr valign=top>
<td width=31%>GL_FOG_COLOR</td>
<td width=40%>Fog RGBA color.</td>
<td width=29%>(0, 0, 0, 0)</td>
</tr>
<tr valign=top>
<td width=31%>GL_FOG_MODE</td>
<td width=40%>Fog mode.</td>
<td width=29%>See the following table.</td>
</tr>
</table><br>
<p>
The fog-density parameter of OpenGL differs from the one in IRIS GL. They are related as follows:
<ul>
<li>
if <b>fogMode</b> = EXP2<br>
<i>openGLfogDensity</i> = (<i>irisGLfogDensity</i>)  (<b>sqrt</b>( – <b>log</b>( 1 / 255 ) ))</li>
<li>
if <b>fogMode</b> =  EXP<br>
<i>openGLfogDensity</i> = (<i>irisGLfogDensity</i>)  (– <b>log</b>( 1 / 255 ) )</li>
</ul>
<p>
where <b>sqrt</b> is the square root operation, <b>log</b> is the natural logarithm, <i>irisGLfogDensity</i> is the IRIS GL fog density, and <i>openGLfogDensity</i> is the OpenGL fog density.</p>
<p>
To switch between calculating fog in per-pixel mode and per-vertex mode, use <a href="glfunc03_9uno.htm"><b>glHint</b></a><b>(</b>GL_FOG_HINT, <b>hintMode)</b>. Two hint modes are available:
<ul>
<li>
GL_NICEST       per-pixel fog calculation</li>
<li>
GL_FASTEST    per-vertex fog calculation</li>
</ul>
<p>
The following table lists the IRIS GL fog modes and their OpenGL equivalents.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=23%>IRIS GL Fog Mode</th>
<th align=left width=28%>OpenGL Fog Mode</th>
<th align=left width=27%>Hint Mode</th>
<th align=left width=22%>Meaning</th>
</tr>
<tr valign=top>
<td width=23%>FG_VTX_EXP, <p>
FG_PIX_EXP</p>
</td>
<td width=28%>GL_EXP</td>
<td width=27%>GL_FASTEST,<p>
GL_NICEST</p>
</td>
<td width=22%>Heavy fog mode (default).</td>
</tr>
<tr valign=top>
<td width=23%>FG_VTX_EXP2, <p>
FG_PIX_EXP2</p>
</td>
<td width=28%>GL_EXP2</td>
<td width=27%>GL_FASTEST,<p>
GL_NICEST</p>
</td>
<td width=22%>Haze mode.</td>
</tr>
<tr valign=top>
<td width=23%>FG_VTX_LIN, <p>
FG_PIX_LIN</p>
</td>
<td width=28%>GL_LINEAR</td>
<td width=27%>GL_FASTEST,<p>
GL_NICEST</p>
</td>
<td width=22%>Linear fog mode. (Use for depth cueing.)</td>
</tr>
</table><br>
<p>
The following code example demonstrates depth cueing in OpenGL:</p>
<pre><code>/* 
 *  depthcue.c 
 *  This program draws a wire frame model, which uses 
 *  intensity (brightness) to give clues to distance 
 *  Fog is used to achieve this effect 
 */ 
#include &lt;GL/gl.h&gt; 
#include &lt;GL/glu.h&gt; 
#include "aux.h" 
 
/*  Initialize linear fog for depth cueing 
 */ 
void myinit(void) 
{ 
    GLfloat fogColor[4] = {0.0, 0.0, 0.0, 1.0}; 
 
    glEnable(GL_FOG); 
    glFogi (GL_FOG_MODE, GL_LINEAR); 
    glHint (GL_FOG_HINT, GL_NICEST);  /*  per pixel  */ 
    glFogf (GL_FOG_START, 3.0); 
    glFogf (GL_FOG_END, 5.0); 
    glFogfv (GL_FOG_COLOR, fogColor); 
    glClearColor(0.0, 0.0, 0.0, 1.0); 
 
    glDepthFunc(GL_LEQUAL); 
    glEnable(GL_DEPTH_TEST); 
    glShadeModel(GL_FLAT); 
} 
 
/*  display() draws an icosahedron 
 */ 
void display(void) 
{ 
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    glColor3f (1.0, 1.0, 1.0); 
    auxWireIcosahedron(1.0); 
    glFlush(); 
} 
 
void myReshape(GLsizei w, GLsizei h) 
{ 
    glViewport(0, 0, w, h); 
    glMatrixMode(GL_PROJECTION); 
    glLoadIdentity(); 
    gluPerspective (45.0, (GLfloat) w/(GLfloat) h, 3.0, 5.0); 
    glMatrixMode(GL_MODELVIEW); 
    glLoadIdentity (); 
    glTranslatef (0.0, 0.0, -4.0); /*move object into view*/ 
} 
/*  Main Loop 
 */ 
int main(int argc, char** argv) 
{ 
    auxInitDisplayMode (AUX_SINGLE | AUX_RGBA | AUX_DEPTH); 
    auxInitPosition (0, 0, 400, 400); 
    auxInitWindow (argv[0]); 
    myinit(); 
    auxReshapeFunc (myReshape); 
    auxMainLoop(display); 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

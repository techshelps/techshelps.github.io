<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting Screen and Buffer Clearing Commands</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ogl_porting_screen_and_buffer_clearing_commands"></a>Porting Screen and Buffer Clearing Commands</h3>
<p>
OpenGL replaces a variety of IRIS GL <b>clear</b> functions (such as <b>zclear</b>, <b>aclear</b>, <b>sclear</b>, and so on) with a single function, <a href="glfunc01_8koi.htm"><b>glClear</b></a>. Specify exactly what you want to clear by passing masks to <b>glClear</b>.</p>
<p>
Keep the following points in mind when porting screen and buffer commands:
<ul>
<li>
OpenGL maintains clearing colors separately from drawing colors, with calls like <a href="glfunc01_0rhu.htm"><b>glClearColor</b></a> and <a href="glfunc01_1zqw.htm"><b>glClearIndex</b></a>. Be sure to set the clear color for each buffer before clearing.</li>
<li>
Instead of using one of several differently named clear calls, you now clear several buffers with one call, <a href="glfunc01_8koi.htm"><b>glClear</b></a>, by <b>OR</b>ing together buffer masks. For example, <b>czclear</b> is replaced by: <pre><code>glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ) 
 </code></pre>
</li>
<li>
IRIS GL references the polygon stipple and the color writemask. OpenGL ignores the polygon stipple but references the color writemask. (The <b>czclear</b> function ignores both the polygon stipple and the color writemask.)</li>
</ul>
<p>
The following table lists the various IRIS GL clear functions with their equivalent OpenGL functions. </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=22%>IRIS GL Call</th>
<th align=left width=49%>OpenGL Call</th>
<th align=left width=29%>Meaning</th>
</tr>
<tr valign=top>
<td width=22%><b>acbuf(AC_CLEAR)</b></td>
<td width=49%><b>glClear(</b>GL_ACCUM_BUFFER_BIT<b>)</b></td>
<td width=29%>Clear the accumulation buffer.</td>
</tr>
<tr valign=top>
<td width=22%>—</td>
<td width=49%><b>glClearColor</b></td>
<td width=29%>Set the RGBA clear color.</td>
</tr>
<tr valign=top>
<td width=22%>—</td>
<td width=49%><b>glClearIndex</b></td>
<td width=29%>Set the clear-color index.</td>
</tr>
<tr valign=top>
<td width=22%><b>clear</b></td>
<td width=49%><b>glClear(</b>GL_COLOR_BUFFER_BIT<b>)</b></td>
<td width=29%>Clear the color buffer.</td>
</tr>
<tr valign=top>
<td width=22%>—</td>
<td width=49%><b>glClearDepth</b></td>
<td width=29%>Specify the clear value for the depth buffer.</td>
</tr>
<tr valign=top>
<td width=22%><b>zclear</b></td>
<td width=49%><b>glClear(</b>GL_DEPTH_BUFFER_BIT<b>)</b></td>
<td width=29%>Clear the depth buffer.</td>
</tr>
<tr valign=top>
<td width=22%><b>czclear</b></td>
<td width=49%><b>glClear(</b>GL_COLOR_BUFFER_BIT |<p>
GL_DEPTH_BUFFER_BIT<b>)</b></p>
</td>
<td width=29%>Clear the color buffer and the depth buffer.</td>
</tr>
<tr valign=top>
<td width=22%>—</td>
<td width=49%><b>glClearAccum</b></td>
<td width=29%>Specify clear values for the accumulation buffer.</td>
</tr>
<tr valign=top>
<td width=22%>—</td>
<td width=49%><b>glClearStencil</b></td>
<td width=29%>Specify the clear value for the stencil buffer.</td>
</tr>
<tr valign=top>
<td width=22%><b>sclear</b></td>
<td width=49%><b>glClear(</b>GL_STENCIL_BUFFER_BIT<b>)</b></td>
<td width=29%>Clear the stencil buffer.</td>
</tr>
</table><br>
<p>
When your IRIS GL code uses both <b>gclear</b> and <b>sclear</b>, you can combine them into a single <b>glClear</b> call—this can improve your program's performance.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting Matrix and Transformation Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ogl_porting_matrix_and_transformation_functions"></a>Porting Matrix and Transformation Functions</h3>
<p>
IRIS GL and OpenGL handle matrices and transformations in a similar manner. But there are several differences to keep in mind when porting code from IRIS GL:
<ul>
<li>
In OpenGL you are always in double-matrix mode; there is no single-matrix mode.</li>
<li>
Angles are measured in degrees, instead of tenths of degrees.</li>
<li>
Projection matrix calls, like <a href="glfunc02_0oj1.htm"><b>glFrustum</b></a> and <a href="glfunc03_8qnj.htm"><b>glOrtho</b></a>, now multiply onto the current matrix, instead of being loaded onto the current matrix.</li>
<li>
The OpenGL function, <a href="glfunc03_21d1.htm"><b>glRotate</b></a>, is very different from <b>rotate</b>. You can rotate around any arbitrary axis, instead of being confined to the x-, y-, and z- axes. For example, you can translate:<pre><code>rotate(200*(i+1), 'z'); 
 </code></pre>
<p>
to:
<pre><code>glRotate(.1*(200*(i+1), 0.0, 0.0, 1.0); 
 </code></pre>
<p>
When translating from <b>rotate</b> to <b>glRotate</b> you switch to degrees from tenths of degrees and replace 'z' with a vector for the z-axis.
</li>
<li>
OpenGL has no equivalent to the <b>polarview</b> function. You can replace it easily with a translation and three rotations. For example, you can translate:<pre><code>polarview(distance, azimuth, incidence, twist);
 </code></pre>
<p>
to:
<pre><code>glTranslatef( 0.0, 0.0, -distance); 
glRotatef( -twist * 10.0, 0.0, 0.0, 1.0); 
glRotatef( -incidence * 10.0, 1.0, 0.0, 0.0); 
glRotatef( -azimuth * 10.0, 0.0, 0.0, 1.0); 
 </code></pre>
</li>
</ul>
<p>
The following table lists the OpenGL matrix functions and their equivalent IRIS GL functions.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=25%>IRIS GL Function</th>
<th align=left width=26%>OpenGL Function</th>
<th align=left width=49%>Meaning</th>
</tr>
<tr valign=top>
<td width=25%><b>mmode</b></td>
<td width=26%><a href="glfunc03_4vs5.htm"><b>glMatrixMode</b></a></td>
<td width=49%>Set current matrix mode.</td>
</tr>
<tr valign=top>
<td width=25%>—</td>
<td width=26%><a href="glfunc03_6h2x.htm"><b>glLoadIdentity</b></a></td>
<td width=49%>Replace current matrix with the identity matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>loadmatrix</b></td>
<td width=26%><a href="glfunc03_3260.htm"><b>glLoadMatrixf</b></a>,<p>
<a href="glfunc03_3260.htm"><b>glLoadMatrixd</b></a></p>
</td>
<td width=49%>Replace current matrix with the specified matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>multmatrix</b></td>
<td width=26%><a href="glfunc03_0xmg.htm"><b>glMultMatrixf</b></a>,<p>
<a href="glfunc03_0xmg.htm"><b>glMultMatrixd</b></a></p>
</td>
<td width=49%>Post-multiply current matrix with the specified matrix (note that <b>multmatrix</b> pre-multiplied).</td>
</tr>
<tr valign=top>
<td width=25%><b>mapw</b>, <b>mapw2</b></td>
<td width=26%><a href="glufnc01_3xv8.htm"><b>gluUnProject</b></a></td>
<td width=49%>Project world-space coordinates to object space (see also <a href="glufnc01_4mno.htm"><b>gluProject</b></a>).</td>
</tr>
<tr valign=top>
<td width=25%><b>ortho</b></td>
<td width=26%><a href="glfunc03_8qnj.htm"><b>glOrtho</b></a></td>
<td width=49%>Multiply current matrix by an orthographic projection matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>ortho2</b></td>
<td width=26%><a href="glufnc01_5alg.htm"><b>gluOrtho2D</b></a></td>
<td width=49%>Define a two-dimensional orthographic projection matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>perspective</b></td>
<td width=26%><a href="glufnc01_6m79.htm"><b>gluPerspective</b></a></td>
<td width=49%>Define a perspective projection matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>picksize</b></td>
<td width=26%><a href="glufnc01_2gqg.htm"><b>gluPickMatrix</b></a></td>
<td width=49%>Define a picking region.</td>
</tr>
<tr valign=top>
<td width=25%><b>popmatrix</b></td>
<td width=26%><a href="glfunc03_246w.htm"><b>glPopMatrix</b></a></td>
<td width=49%>Pop current matrix stack, replacing the current matrix with the one below it.</td>
</tr>
<tr valign=top>
<td width=25%><b>pushmatrix</b></td>
<td width=26%><a href="glfunc03_246w.htm"><b>glPushMatrix</b></a></td>
<td width=49%>Push current matrix stack down by one, duplicating the current matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>rotate</b>,<p>
<b>rot</b></p>
</td>
<td width=26%><a href="glfunc03_21d1.htm"><b>glRotated</b></a>,<p>
<a href="glfunc03_21d1.htm"><b>glRotatef</b></a></p>
</td>
<td width=49%>Rotate current coordinate system by the given angle about the vector from the origin through the given point. Note that <b>rotate</b> rotated only about the x-, y-, and z-axes.</td>
</tr>
<tr valign=top>
<td width=25%><b>scale</b></td>
<td width=26%><a href="glfunc03_1691.htm"><b>glScaled</b></a>,<p>
<a href="glfunc03_1691.htm"><b>glScalef</b></a></p>
</td>
<td width=49%>Multiply current matrix by a scaling matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>translate</b></td>
<td width=26%><a href="glfunc03_9a05.htm"><b>glTranslatef</b></a>,<p>
<a href="glfunc03_9a05.htm"><b>glTranslated</b></a></p>
</td>
<td width=49%>Move coordinate-system origin to the point specified, by multiplying the current matrix by a translation matrix.</td>
</tr>
<tr valign=top>
<td width=25%><b>window</b></td>
<td width=26%><a href="glfunc02_0oj1.htm"><b>glFrustum</b></a></td>
<td width=49%>Given coordinates for clipping planes, multiply the current matrix by a perspective matrix.</td>
</tr>
</table><br>
<p>
OpenGL has three matrix modes, which are set with <a href="glfunc03_4vs5.htm"><b>glMatrixMode</b></a>. The following table lists the modes available as parameters for <b>glMatrixMode</b>. </p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=27%>IRIS GL Matrix Mode</th>
<th align=left width=26%>OpenGL Mode</th>
<th align=left width=24%>Meaning</th>
<th align=left width=23%>Min Stack Depth</th>
</tr>
<tr valign=top>
<td width=27%><b>MTEXTURE</b></td>
<td width=26%>GL_TEXTURE</td>
<td width=24%>Operate on the texture matrix stack.</td>
<td width=23%>2</td>
</tr>
<tr valign=top>
<td width=27%><b>MVIEWING</b></td>
<td width=26%>GL_MODELVIEW</td>
<td width=24%>Operate on the model view matrix stack.</td>
<td width=23%>32</td>
</tr>
<tr valign=top>
<td width=27%><b>MPROJECTION</b></td>
<td width=26%>GL_PROJECTION</td>
<td width=24%>Operate on the projection matrix stack.</td>
<td width=23%>2</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

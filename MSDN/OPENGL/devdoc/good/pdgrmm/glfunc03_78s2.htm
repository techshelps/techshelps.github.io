<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glMap2</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glmap2"></a>glMap2d, glMap2f</h1>
<p>
The <b>glMap2d</b> and <b>glMap2f</b> functions define a two-dimensional evaluator.</p>
<pre><code><b>void glMap2d(
  GLenum</b><i> target</i><b>,</b>           
<b>  GLdouble</b><i> u1</i><b>,</b>             
<b>  GLdouble</b><i> u2</i><b>,</b>             
<b>  GLint</b><i> ustride</i><b>,</b>           
<b>  GLint</b><i> uorder</i><b>,</b>            
<b>  GLdouble</b><i> v1</i><b>,</b>             
<b>  GLdouble</b><i> v2</i><b>,</b>             
<b>  GLint</b><i> vstride</i><b>,</b>           
<b>  GLint</b><i> vorder</i><b>,</b>            
<b>  const GLdouble</b><i> *points</i>   
<b>);</b>
 
<b>void glMap2f(</b>
<b>  GLenum</b><i> target</i><b>,</b>          
<b>  GLfloat</b><i> u1</i><b>,</b>             
<b>  GLfloat</b><i> u2</i><b>,</b>             
<b>  GLint</b><i> ustride</i><b>,</b>          
<b>  GLint</b><i> uorder</i><b>,</b>           
<b>  GLfloat</b><i> v1</i><b>,</b>             
<b>  GLfloat</b><i> v2</i><b>,</b>             
<b>  GLint</b><i> vstride</i><b>,</b>          
<b>  GLint</b><i> vorder</i><b>,</b>           
<b>  const GLfloat</b><i> *points</i>   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>target</i></dt>
<dd>
The kind of values that are generated by the evaluator. The following symbolic constants are accepted: 
<dl>
<dt>
GL_MAP2_VERTEX_3</dt>
<dd>
Each control point is three floating-point values representing <i>x, y, </i>and <i>z</i>. Internal <a href="glfunc03_2kag.htm"><b>glVertex3</b></a> commands are generated when the map is evaluated. </dd>
<dt>
GL_MAP2_VERTEX_4</dt>
<dd>
Each control point is four floating-point values representing <i>x, y, z,</i> and <i>w</i>. Internal <a href="glfunc03_2kag.htm"><b>glVertex4</b></a> commands are generated when the map is evaluated. </dd>
<dt>
GL_MAP2_INDEX</dt>
<dd>
Each control point is a single floating-point value representing a color index. Internal <a href="glfunc03_7ak8.htm"><b>glIndex</b></a> commands are generated when the map is evaluated. The current index is not updated with the value of these <b>glIndex</b> commands, however. </dd>
<dt>
GL_MAP2_COLOR_4</dt>
<dd>
Each control point is four floating-point values representing red, green, blue, and alpha. Internal <a href="glfunc01_62b6.htm"><b>glColor4</b></a> commands are generated when the map is evaluated. The current color is not updated with the value of these <b>glColor4</b> commands, however. </dd>
<dt>
GL_MAP2_NORMAL</dt>
<dd>
Each control point is three floating-point values representing the <i>x, y,</i> and <i>z</i> components of a normal vector. Internal <a href="glfunc03_5ru4.htm"><b>glNormal</b></a> commands are generated when the map is evaluated. The current normal is not updated with the value of these <b>glNormal</b> commands, however. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_1</dt>
<dd>
Each control point is a single floating-point value representing the <i>s</i> texture coordinate. Internal <a href="glfunc03_6qck.htm"><b>glTexCoord1</b></a> commands are generated when the map is evaluated. The current texture coordinates are not updated with the value of these <b>glTexCoord</b> commands, however. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_2</dt>
<dd>
Each control point is two floating-point values representing the <i>s</i> and <i>t</i> texture coordinates. Internal <a href="glfunc03_6qck.htm"><b>glTexCoord2</b></a> commands are generated when the map is evaluated. The current texture coordinates are not updated with the value of these <b>glTexCoord</b> commands, however. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_3</dt>
<dd>
Each control point is three floating-point values representing the <i>s, t,</i> and <i>r </i>texture coordinates. Internal <a href="glfunc03_6qck.htm"><b>glTexCoord3</b></a> commands are generated when the map is evaluated. The current texture coordinates are not updated with the value of these <b>glTexCoord</b> commands, however. </dd>
<dt>
GL_MAP2_TEXTURE_COORD_4</dt>
<dd>
Each control point is four floating-point values representing the <i>s, t, r,</i> and <i>q</i> texture coordinates. Internal <a href="glfunc03_6qck.htm"><b>glTexCoord4</b></a> commands are generated when the map is evaluated. The current texture coordinates are not updated with the value of these <b>glTexCoord</b> commands, however.</dd>
</dl>
</dd>
<dt>
<i>u1, u2</i></dt>
<dd>
A linear mapping of <i>u</i>, as presented to <b>glEvalCoord2</b>, to <i>û</i>, one of the two variables that is evaluated by the equations specified by this command. </dd>
<dt>
<i>ustride</i></dt>
<dd>
The number of floats or doubles between the beginning of control point <b>R</b><i> (ij) </i> and the beginning of control point <b>R</b> ((<i>i</i>+1)<i>j</i>) , where <i>i</i> and<i> j</i> are the <i>u</i> and <i>v</i> control point indexes, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. </dd>
<dt>
<i>uorder</i></dt>
<dd>
The dimension of the control point array in the <i>u</i>-axis. Must be positive. </dd>
<dt>
<i>v1, v2</i></dt>
<dd>
A linear mapping of <i>v</i>, as presented to <a href="glfunc01_7hb8.htm"><b>glEvalCoord2</b></a>, to , one of the two variables that is evaluated by the equations specified by this command. </dd>
<dt>
<i>vstride</i></dt>
<dd>
The number of floats or doubles between the beginning of control point <b>R</b><i> (ij) </i> and the beginning of control point <b>R</b><i> (i</i>(<i>j</i>+1)<i>) </i>, where <i>i</i> and <i>j</i> are the <i>u</i> and <i>v</i> control point indexes, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. </dd>
<dt>
<i>vorder</i></dt>
<dd>
The dimension of the control point array in the <i>v</i>-axis. Must be positive. </dd>
<dt>
<i>points</i></dt>
<dd>
A pointer to the array of control points.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Evaluators provide a way to use polynomial or rational polynomial mapping to produce vertices, normals, texture coordinates, and colors. The values produced by an evaluator are sent on to further stages of OpenGL processing just as if they had been presented using <a href="glfunc03_2kag.htm"><b>glVertex</b></a>, <a href="glfunc03_5ru4.htm"><b>glNormal</b></a>, <a href="glfunc03_6qck.htm"><b>glTexCoord</b></a>, and <a href="glfunc01_62b6.htm"><b>glColor</b></a> commands, except that the generated values do not update the current normal, texture coordinates, or color.</p>
<p>
All polynomial or rational polynomial splines of any degree (up to the maximum degree supported by the OpenGL implementation) can be described using evaluators. These include almost all surfaces used in computer graphics, including B-spline surfaces, NURBS surfaces, Bezier surfaces, and so on. </p>
<p>
Evaluators define surfaces based on bivariate Bernstein polynomials. Define <b>p</b>(<i>û,</i>) as</p>
<p>
<img src="images/map05.gif" border=0></p>
<p>
where <b>R</b><i> (ij) </i> is a control point,  (<i>û</i>) is the <i>i</i>th Bernstein polynomial of degree </p>
<p>
<i>n</i> (<i>uorder</i> = <i>n</i> + 1)</p>
<p>
<img src="images/map06.gif" border=0></p>
<p>
and () is the<i> j</i>th Bernstein polynomial of degree <i>m</i> (<i>vorder</i> = <i>m</i> + 1)</p>
<p>
<img src="images/map07.gif" border=0></p>
<p>
Recall that</p>
<p>
<img src="images/map08.gif" border=0></p>
<p>
The<b> glMap2</b> function is used to define the basis and to specify what kind of values are produced. Once defined, a map can be enabled and disabled by calling <a href="glfunc01_3l5x.htm"><b>glEnable</b></a> and <b>glDisable</b> with the map name, one of the nine predefined values for <i>target</i>, described above. When <a href="glfunc01_7hb8.htm"><b>glEvalCoord2</b></a> presents values <i>u</i> and <i>v</i>, the bivariate Bernstein polynomials are evaluated using <i>û</i> and , where</p>
<p>
<img src="images/map09.gif" border=0></p>
<p>
<img src="images/map10.gif" border=0></p>
<p>
The<i> target</i> parameter is a symbolic constant that indicates what kind of control points are provided in <i>points</i>, and what output is generated when the map is evaluated. </p>
<p>
The<i> ustride</i>, <i>uorder</i>, <i>vstride</i>, <i>vorder</i>, and <i>points</i> parameters define the array addressing for accessing the control points. The <i>points</i> parameter is the location of the first control point, which occupies one, two, three, or four contiguous memory locations, depending on which map is being defined. There are <i>uorder</i>x<i>vorder</i> control points in the array. The <i>ustride</i> parameter tells how many float or double locations are skipped to advance the internal memory pointer from control point <b>R</b><i> (ij) </i> to control point <b>R</b> ((<i>i</i>+1)<i>j</i>) . The <i>vstride</i> parameter tells how many float or double locations are skipped to advance the internal memory pointer from control point <b>R</b><i> (ij) </i> to control point <b>R</b><i> (i</i>(<i>j</i>+1)<i>) </i>.</p>
<p>
As is the case with all OpenGL commands that accept pointers to data, it is as if the contents of <i>points</i> were copied by <b>glMap2</b> before it returned. Changes to the contents of <i>points</i> have no effect after <b>glMap2</b> is called.</p>
<p>
The following functions retrieve information related to <b>glMap2</b>:</p>
<p class=indent1>
<a href="glfunc02_5ub8.htm"><b>glGet</b></a> with argument GL_MAX_EVAL_ORDER</p>
<p class=indent1>
<a href="glfunc02_2z3k.htm"><b>glGetMap</b></a></p>
<p class=indent1>
<a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a> with argument GL_MAP2_VERTEX_3</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_VERTEX_4</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_INDEX</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_COLOR_4</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_NORMAL</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_TEXTURE_COORD_1</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_TEXTURE_COORD_2</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_TEXTURE_COORD_3</p>
<p class=indent1>
<b>glIsEnabled</b> with argument GL_MAP2_TEXTURE_COORD_4</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>target</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>u1</i> was equal to <i>u2</i>, or if <i>v1</i> was equal to <i>v2</i>.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%>either <i>ustride</i> or <i>vstride</i> was less than the number of values in a control point.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%>either <i>uorder</i> or <i>vorder</i> was less than one or greater than GL_MAX_EVAL_ORDER.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%><b>glMap2</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in gl.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_62b6.htm"><b>glColor</b></a>, <a href="glfunc01_3l5x.htm"><b>glEnable</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc01_7hb8.htm"><b>glEvalCoord</b></a>, <a href="glfunc02_2rvs.htm"><b>glEvalMesh</b></a>, <a href="glfunc02_1o50.htm"><b>glEvalPoint</b></a>, <a href="glfunc03_78s1.htm"><b>glMap1</b></a>, <a href="glfunc03_509w.htm"><b>glMapGrid</b></a>, <a href="glfunc03_5ru4.htm"><b>glNormal</b></a>, <a href="glfunc03_6qck.htm"><b>glTexCoord</b></a>, <a href="glfunc03_2kag.htm"><b>glVertex</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

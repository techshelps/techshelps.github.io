<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting bgn/end Commands</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ogl_porting_bgn_end_commands"></a>Porting bgn/end Commands</h3>
<p>
IRIS GL uses the begin/end paradigm but has a different function for each graphics primitive. For example, you probably use <b>bgnpolygon</b> and <b>endpolygon</b> to draw polygons, and <b>bgnline</b> and <b>endline</b> to draw lines. In OpenGL, you use the <a href="glfunc01_9u3y.htm"><b>glBegin</b></a>/<a href="glfunc01_9u3y.htm"><b>glEnd</b></a> structure for both. In OpenGL you draw most geometric objects by enclosing a series of functions that specify vertices, normals, textures, and colors between pairs of <b>glBegin</b> and <b>glEnd</b> calls. For example: </p>
<pre><code>void glBegin( GLenum mode) ; 
   /* vertex list, colors, normals, textures, materials */ 
void glEnd( void ); 
 </code></pre>
<p>
The <b>glBegin</b> function takes a single parameter that specifies the drawing mode, and thus the primitive. Here's an OpenGL code sample that draws a polygon and then a line:</p>
<pre><code>glBegin( GL_POLYGON ) ; 
   glVertex2f(20.0, 10.0); 
   glVertex2f(10.0, 30.0); 
   glVertex2f(20.0, 50.0); 
   glVertex2f(40.0, 50.0); 
   glVertex2f(50.0, 30.0); 
   glVertex2f(40.0, 10.0); 
glEnd(); 
glBegin( GL_LINES ) ; 
   glVertex2i(100,100); 
   glVertex2i(500,500); 
glEnd(); 
 </code></pre>
<p>
With OpenGL, you draw different geometric objects by specifying different parameters for <a href="glfunc01_9u3y.htm"><b>glBegin</b></a>. The following table lists the OpenGL <b>glBegin</b> parameters that correspond to equivalent IRIS GL functions.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=25%>IRIS GL Function</th>
<th align=left width=31%>Value of glBegin Mode</th>
<th align=left width=44%>Meaning</th>
</tr>
<tr valign=top>
<td width=25%><b>bgnpoint</b></td>
<td width=31%>GL_POINTS</td>
<td width=44%>Individual points.</td>
</tr>
<tr valign=top>
<td width=25%><b>bgnline</b></td>
<td width=31%>GL_LINE_STRIP</td>
<td width=44%>Series of connected line segments.</td>
</tr>
<tr valign=top>
<td width=25%><b>bgnclosedline</b></td>
<td width=31%>GL_LINE_LOOP</td>
<td width=44%>Series of connected line segments, with a segment added between first and last vertices.</td>
</tr>
<tr valign=top>
<td width=25%>—</td>
<td width=31%>GL_LINES</td>
<td width=44%>Pairs of vertices interpreted as individual line segments.</td>
</tr>
<tr valign=top>
<td width=25%><b>bgnpolygon</b></td>
<td width=31%>GL_POLYGON</td>
<td width=44%>Boundary of a simple convex polygon.</td>
</tr>
<tr valign=top>
<td width=25%>—</td>
<td width=31%>GL_TRIANGLES</td>
<td width=44%>Triples of vertices interpreted as triangles.</td>
</tr>
<tr valign=top>
<td width=25%><b>bgntmesh</b></td>
<td width=31%>GL_TRIANGLE_STRIP</td>
<td width=44%>Linked strips of triangles.</td>
</tr>
<tr valign=top>
<td width=25%>—</td>
<td width=31%>GL_TRIANGLE_FAN</td>
<td width=44%>Linked fans of triangles.</td>
</tr>
<tr valign=top>
<td width=25%>—</td>
<td width=31%>GL_QUADS</td>
<td width=44%>Quadruples of vertices interpreted as quadrilaterals.</td>
</tr>
<tr valign=top>
<td width=25%><b>bgnqstrip</b></td>
<td width=31%>GL_QUAD_STRIP</td>
<td width=44%>Linked strips of quadrilaterals.</td>
</tr>
</table><br>
<p>
For a detailed discussion of the differences between triangle meshes, strips, and fans, see <a href="oglport_60j7.htm">Porting Triangles</a>.</p>
<p>
There is no limit to the number of vertices you can specify between a <a href="glfunc01_9u3y.htm"><b>glBegin</b></a>/<a href="glfunc01_9u3y.htm"><b>glEnd</b></a> pair.</p>
<p>
In addition to specifying vertices inside a <b>glBegin</b>/<b>glEnd</b> pair, you can specify a current normal, current texture coordinates, and a current color. The following table lists the commands valid inside a <b>glBegin</b>/<b>glEnd</b> pair.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>IRIS GL Function</th>
<th align=left width=31%>OpenGL Function</th>
<th align=left width=38%>Meaning</th>
</tr>
<tr valign=top>
<td width=31%><b>v2</b>, <b>v3</b>, <b>v4</b></td>
<td width=31%><a href="glfunc03_2kag.htm"><b>glVertex</b></a></td>
<td width=38%>Set vertex coordinates.</td>
</tr>
<tr valign=top>
<td width=31%><b>RGBcolor</b>, <b>cpack</b></td>
<td width=31%><a href="glfunc01_62b6.htm"><b>glColor</b></a></td>
<td width=38%>Set current color.</td>
</tr>
<tr valign=top>
<td width=31%><b>color</b></td>
<td width=31%><a href="glfunc03_7ak8.htm"><b>glIndex</b></a></td>
<td width=38%>Set current color index.</td>
</tr>
<tr valign=top>
<td width=31%><b>n3f</b></td>
<td width=31%><a href="glfunc03_5ru4.htm"><b>glNormal</b></a></td>
<td width=38%>Set normal vector coordinates.</td>
</tr>
<tr valign=top>
<td width=31%>—</td>
<td width=31%><a href="glfunc01_7hb8.htm"><b>glEvalCoord</b></a></td>
<td width=38%>Evaluate enabled one- and two-dimensional maps.</td>
</tr>
<tr valign=top>
<td width=31%><b>callobj</b></td>
<td width=31%><a href="glfunc01_6uk4.htm"><b>glCallList</b></a>, <a href="glfunc01_8bub.htm"><b>glCallLists</b></a></td>
<td width=38%>Execute display list(s).</td>
</tr>
<tr valign=top>
<td width=31%><b>t2</b></td>
<td width=31%><a href="glfunc03_6qck.htm"><b>glTexCoord</b></a></td>
<td width=38%>Set texture coordinates.</td>
</tr>
<tr valign=top>
<td width=31%>—</td>
<td width=31%><a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a></td>
<td width=38%>Control drawing edges.</td>
</tr>
<tr valign=top>
<td width=31%><b>lmbind</b></td>
<td width=31%><a href="glfunc03_7cq4.htm"><b>glMaterial</b></a></td>
<td width=38%>Set material properties.</td>
</tr>
</table><br>
<p>
<b>Note</b>  If you use any OpenGL function other than those listed in the preceding table inside a <a href="glfunc01_9u3y.htm"><b>glBegin</b></a>/<a href="glfunc01_9u3y.htm"><b>glEnd</b></a> pair, you'll get unpredictable results, or possibly an error.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glInterleavedArrays</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glinterleavedarrays"></a>glInterleavedArrays</h1>
<p>
The <b>glInterleavedArrays</b> function simultaneously specifies and enables several interleaved arrays in a larger aggregate array.</p>
<pre><code><b>void glInterleavedArrays(
  GLenum</b><i> format</i><b>,           </b>
<b>  GLsizei</b><i> stride</i><b>,          </b>
<b>  const GLvoid *</b><i> pointer</i>   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>format</i></dt>
<dd>
The type of array to enable. The parameter can assume one of the following symbolic values: GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, or GL_T4F_C4F_N3F_V4F. </dd>
<dt>
<i>stride</i></dt>
<dd>
The offset in bytes between each aggregate array element.</dd>
<dt>
<i>pointer</i></dt>
<dd>
A pointer to the first element of an aggregate array.
</dd>
</dl>
<h4>Remarks</h4>
<p>
With the <b>glInterleavedArrays</b> function you can simultaneously specify and enable several interleaved color, normal, texture, and vertex arrays whose elements are part of a larger aggregate array element. For some memory architectures this is more efficient than specifying the arrays separately.</p>
<p>
If the <i>stride</i> parameter is zero then the aggregate array elements are stored consecutively; otherwise <i>stride</i> bytes occur between aggregate array elements.</p>
<p>
The <i>format</i> parameter serves as a "key" that describes how to extract individual arrays from the aggregate array:
<ul>
<li>
If <i>format</i> contains a T, then texture coordinates are extracted from the interleaved array. </li>
<li>
If C is present, color values are extracted. </li>
<li>
If N is present, normal coordinates are extracted. </li>
<li>
Vertex coordinates are always extracted. </li>
<li>
The digits 2, 3, and 4 denote how many values are extracted. </li>
<li>
F indicates that values are extracted as floating point values. </li>
<li>
If 4UB follows the C, colors may also be extracted as 4 unsigned bytes. If a color is extracted as 4 unsigned bytes the vertex array element that follows is located at the first possible floating point aligned address.</li>
</ul>
<p>
If you call <b>glInterleavedArrays</b> while compiling a display list, it is not compiled into the list but is executed immediately.</p>
<p>
You cannot include calls to <b>glInterleavedArrays</b> in <b>glDisableClientState</b> between calls to <a href="glfunc01_9u3y.htm"><b>glBegin</b></a> and the corresponding call to <b>glEnd</b>.</p>
<p>
<b>Note</b>  The <b>glInterleavedArrays</b> function is only available in OpenGL version 1.1 or later.</p>
<p>
The <b>glInterleavedArrays</b> function is implemented on the client side with no protocol. Because the vertex array parameters are client-side state, they are not saved or restored by <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a> and <b>glPopAttrib</b>. Use <a href="glfunc03_3leq.htm"><b>glPushClientAttrib</b></a> and <b>glPopClientAttrib</b> instead.</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>format</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE</td>
<td width=57%><i>stride</i> was a negative value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%><b>glInterleavedArrays</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="glfunc01_2q5w.htm"><b>glArrayElement</b></a>, <a href="glfunc01_456a.htm"><b>glColorPointer</b></a>, <a href="glfunc01_8oqb.htm"><b>glDrawArrays</b></a>, <a href="glfunc01_1kz7.htm"><b>glDrawElements</b></a>, <a href="glfunc01_61pu.htm"><b>glEdgeFlagPointer</b></a>, <a href="glfunc01_72at.htm"><b>glEnableClientState</b></a>, <a href="glfunc02_8uwm.htm"><b>glGetPointerv</b></a>, <a href="glfunc03_36lu.htm"><b>glIndexPointer</b></a>, <a href="glfunc03_1tiq.htm"><b>glNormalPointer</b></a>, <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a>, <a href="glfunc03_3leq.htm"><b>glPushClientAttrib</b></a>, <a href="glfunc03_64z6.htm"><b>glTexCoordPointer</b></a>, <a href="glfunc03_5ak2.htm"><b>glVertexPointer</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetPixelFormat</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_setpixelformat"></a>SetPixelFormat</h1>
<p>
The <b>SetPixelFormat</b> function sets the pixel format of the specified device context to the format specified by the <i>iPixelFormat</i> index.</p>
<pre><code><b>BOOL SetPixelFormat(
  HDC </b><i> hdc</i><b>,  </b>// device context whose pixel format the function 
             // attempts to set
<b>  int </b><i> iPixelFormat</i><b>,</b>
<b>             </b>// pixel format index (one-based)
<b>  CONST PIXELFORMATDESCRIPTOR * </b><i> ppfd</i> 
             // pointer to logical pixel format specification
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hdc</i></dt>
<dd>
Specifies the device context whose pixel format the function attempts to set.</dd>
<dt>
<i>iPixelFormat</i></dt>
<dd>
Index that identifies the pixel format to set. The various pixel formats supported by a device context are identified by one-based indexes.</dd>
<dt>
<i>ppfd</i></dt>
<dd>
Pointer to a <a href="ntopnglr_73jm.htm"><b>PIXELFORMATDESCRIPTOR</b></a> structure that contains the logical pixel format specification. The system's metafile component uses this structure to record the logical pixel format specification. The structure has no other effect upon the behavior of the <b>SetPixelFormat</b> function.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE.</p>
<p>
If the function fails, the return value is FALSE. To get extended error information, call <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_1.Click()><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
If <i>hdc</i> references a window, calling the <b>SetPixelFormat</b> function also changes the pixel format of the window. Setting the pixel format of a window more than once can lead to significant complications for the Window Manager and for multithread applications, so it is not allowed. An application can only set the pixel format of a window one time. Once a window's pixel format is set, it cannot be changed.</p>
<p>
You should select a pixel format in the device context before calling the <a href="ntopnglr_1awk.htm"><b>wglCreateContext</b></a> function. The <b>wglCreateContext</b> function creates a rendering context for drawing on the device in the selected pixel format of the device context.</p>
<p>
An OpenGL window has its own pixel format. Because of this, only device contexts retrieved for the client area of an OpenGL window are allowed to draw into the window. As a result, an OpenGL window should be created with the WS_CLIPCHILDREN and WS_CLIPSIBLINGS styles. Additionally, the window class attribute should not include the CS_PARENTDC style.</p>
<p>
The following code example shows <b>SetPixelFormat</b> usage:</p>
<pre><code>PIXELFORMATDESCRIPTOR pfd = { 
    sizeof(PIXELFORMATDESCRIPTOR),   // size of this pfd 
    1,                     // version number 
    PFD_DRAW_TO_WINDOW |   // support window 
    PFD_SUPPORT_OPENGL |   // support OpenGL 
    PFD_DOUBLEBUFFER,      // double buffered 
    PFD_TYPE_RGBA,         // RGBA type 
    24,                    // 24-bit color depth 
    0, 0, 0, 0, 0, 0,      // color bits ignored 
    0,                     // no alpha buffer 
    0,                     // shift bit ignored 
    0,                     // no accumulation buffer 
    0, 0, 0, 0,            // accum bits ignored 
    32,                    // 32-bit z-buffer 
    0,                     // no stencil buffer 
    0,                     // no auxiliary buffer 
    PFD_MAIN_PLANE,        // main layer 
    0,                     // reserved 
    0, 0, 0                // layer masks ignored 
}; 
HDC  hdc; 
int  iPixelFormat; 
 
// get the best available match of pixel format for the device context  
iPixelFormat = ChoosePixelFormat(hdc, &amp;pfd); 
 
// make that the pixel format of the device context 
SetPixelFormat(hdc, iPixelFormat, &amp;pfd); 
 </code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in wingdi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with gdi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="ntopnglo_3ab9.htm">OpenGL on Windows NT and Windows 95 Overview</a>, <a href="ntopnglo_74ab.htm">Win32 Functions</a>, <a href="ntopnglr_2qb8.htm"><b>ChoosePixelFormat</b></a>, <a href="ntopnglr_9ygk.htm"><b>DescribePixelFormat</b></a>, <a href="ntopnglr_99kk.htm"><b>GetPixelFormat</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glColorPointer</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glcolorpointer"></a>glColorPointer</h1>
<p>
The <b>glColorPointer</b> function defines an array of colors.</p>
<pre><code><b>void glColorPointer(
  GLint</b><i> size</i><b>,</b>              
<b>  GLenum</b><i> type</i><b>,</b>             
<b>  GLsizei</b><i> stride</i><b>,</b>          
<b>  GLsizei</b><i> count</i><b>,</b>           
<b>  const GLvoid *</b><i> pointer</i>   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>size</i></dt>
<dd>
The number of components per color. The value must be either 3 or 4.</dd>
<dt>
<i>type</i></dt>
<dd>
The data type of each color component in a color array. Acceptable data types are specified with the following constants: GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE.</dd>
<dt>
<i>stride</i></dt>
<dd>
The byte offset between consecutive colors. When <i>stride</i> is zero, the colors are tightly packed in the array.</dd>
<dt>
<i>count</i></dt>
<dd>
The number of static colors, counting from the first color.</dd>
<dt>
<i>pointer</i></dt>
<dd>
A pointer to the first component of the first color element in a color array.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>glColorPointer</b> function specifies the location and data format of an array of color components to use when rendering. The <i>stride</i> parameter determines the byte offset from one color to the next, enabling the packing of vertex attributes in a single array or storage in separate arrays. In some implementations, storing vertex attributes in a single array can be more efficient than the use of separate arrays. Starting from the first color array element, <i>count </i>indicates the total number of static elements. You can modify static elements, but once the elements are modified, you must explicitly specify the array again before using the array for any rendering. Nonstatic color array elements are not accessed until you call <a href="glfunc01_8oqb.htm"><b>glDrawArrays</b></a> or <a href="glfunc01_2q5w.htm"><b>glArrayElement</b></a>.</p>
<p>
The color array is enabled when you specify the GL_COLOR_ARRAY constant with <a href="glfunc01_72at.htm"><b>glEnableClientState</b></a>. Calling <b>glArrayElement</b>, <b>or</b> <b>glDrawArrays</b> uses the color array that is thus enabled. By default, the color array is disabled. The <b>glColorPointer</b> calls are not entered in display lists. </p>
<p>
When you specify a color array using <b>glColorPointer</b>, the values of all the function's color array parameters are saved in a client-side state, and you can cache static array elements. Because the color array parameters are in a client-side state, <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a> and <a href="glfunc03_68iq.htm"><b>glPopAttrib</b></a> do not save or restore the parameters' values.</p>
<p>
Although specifying the color array within <a href="glfunc01_9u3y.htm"><b>glBegin</b></a> and <a href="glfunc01_9u3y.htm"><b>glEnd</b></a> pairs does not generate an error, the results are undefined.</p>
<p>
The following functions retrieve information related to the <b>glColorPointer</b> function:</p>
<p class=indent1>
<a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a> with argument GL_COLOR_ARRAY </p>
<p class=indent1>
<a href="glfunc02_5ub8.htm"><b>glGet</b></a> with argument GL_COLOR_ARRAY_SIZE </p>
<p class=indent1>
<b>glGet</b> with argument GL_COLOR_ARRAY_TYPE </p>
<p class=indent1>
<b>glGet</b> with argument GL_COLOR_ARRAY_STRIDE </p>
<p class=indent1>
<b>glGet</b> with argument GL_COLOR_ARRAY_COUNT </p>
<p class=indent1>
<a href="glfunc02_8uwm.htm"><b>glGetPointerv</b></a> with argument GL_COLOR_ARRAY_POINTER </p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error Code</th>
<th align=left width=52%>Condition</th>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_VALUE </td>
<td width=52%><i>size</i> was not 3 or 4.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_ENUM </td>
<td width=52%><i>type</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_VALUE </td>
<td width=52%><i>stride</i> or <i>count</i> was negative.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="glfunc01_2q5w.htm"><b>glArrayElement</b></a>, <a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_8oqb.htm"><b>glDrawArrays</b></a>, <a href="glfunc01_61pu.htm"><b>glEdgeFlagPointer</b></a>, <a href="glfunc01_72at.htm"><b>glEnableClientState</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc02_5ub8.htm"><b>glGet</b></a>, <a href="glfunc02_6dwn.htm"><b>glGetString</b></a>, <a href="glfunc02_8uwm.htm"><b>glGetPointerv</b></a>, <a href="glfunc03_36lu.htm"><b>glIndexPointer</b></a>, <a href="glfunc03_7pgk.htm"><b>glIsEnabled</b></a>, <a href="glfunc03_1tiq.htm"><b>glNormalPointer</b></a>, <a href="glfunc03_68iq.htm"><b>glPopAttrib</b></a>, <a href="glfunc03_68iq.htm"><b>glPushAttrib</b></a>, <a href="glfunc03_64z6.htm"><b>glTexCoordPointer</b></a>, <a href="glfunc03_5ak2.htm"><b>glVertexPointer</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glArrayElement</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glarrayelement"></a>glArrayElement</h1>
<p>
The <b>glArrayElement</b> function specifies the array elements used to render a vertex.</p>
<pre><code><b>void glArrayElement(
  GLint</b><i> index</i>   
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>index</i></dt>
<dd>
An index in the enabled arrays.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Use the <b>glArrayElement</b> function within <a href="glfunc01_9u3y.htm"><b>glBegin</b></a> and <a href="glfunc01_9u3y.htm"><b>glEnd</b></a> pairs to specify vertex and attribute data for point, line, and polygon primitives. The <b>glArrayElement</b> function specifies the data for a single vertex using vertex and attribute data located at the <i>index</i> of the enabled vertex arrays.</p>
<p>
You can use <b>glArrayElement</b> to construct primitives by indexing vertex data, rather than by streaming through arrays of data in first-to-last order. Because <b>glArrayElement</b> specifies a single vertex only, you can explicitly specify attributes for individual primitives. For example, you can set a single normal for each individual triangle.</p>
<p>
When you include calls to <b>glArrayElement</b> in display lists, the necessary array data, determined by the array pointers and enable values, is entered in the display list also. Array pointer and enable values are determined when display lists are created, not when display lists are executed.</p>
<p>
You can read and cache static array data at any time with <b>glArrayElement</b>. When you modify the elements of a static array without specifying the array again, the results of any subsequent calls to <b>glArrayElement</b> are undefined.</p>
<p>
When you call <b>glArrayElement</b> without first calling <b>glEnableClientState(</b>GL_VERTEX_ARRAY<b>)</b>, no drawing occurs, but the attributes corresponding to enabled arrays are modified. Although no error is generated when you specify an array within <b>glBegin</b> and <b>glEnd</b> pairs, the results are undefined.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in gl.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_456a.htm"><b>glColorPointer</b></a>, <a href="glfunc01_8oqb.htm"><b>glDrawArrays</b></a>, <a href="glfunc01_61pu.htm"><b>glEdgeFlagPointer</b></a>, <a href="glfunc01_72at.htm"><b>glEnableClientState</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc02_8uwm.htm"><b>glGetPointerv</b></a>, <a href="glfunc02_6dwn.htm"><b>glGetString</b></a>, <a href="glfunc03_36lu.htm"><b>glIndexPointer</b></a>, <a href="glfunc03_1tiq.htm"><b>glNormalPointer</b></a>, <a href="glfunc03_64z6.htm"><b>glTexCoordPointer</b></a>, <a href="glfunc03_5ak2.htm"><b>glVertexPointer</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

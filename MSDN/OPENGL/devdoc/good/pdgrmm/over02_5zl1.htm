<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OpenGL Processing Pipeline</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_opengl_processing_pipeline"></a>OpenGL Processing Pipeline</h1>
<p>
Many OpenGL functions are used specifically for drawing objects such as points, lines, polygons, and bitmaps. Other functions control the way that some of this drawing occurs (such as those that enable antialiasing or texturing). Still other functions are specifically concerned with frame buffer manipulation. The topics in this section describe how all the OpenGL functions work together to create the OpenGL processing pipeline. This section also takes a closer look at the stages in which data is actually processed, and ties these stages to OpenGL functions. </p>
<p>
The following illustration shows a detailed block diagram of the OpenGL processing pipeline. For most of the pipeline, you can see three vertical arrows between the major stages. These arrows represent vertices and the two primary types of data that can be associated with vertices: color values and texture coordinates. Also note that vertices are assembled into primitives, then into fragments, and finally into pixels in the frame buffer. This progression is discussed in more detail in <a href="over02_30dv.htm">Vertices</a>, <a href="over02_8coj.htm">Primitives</a>, <a href="over02_5do3.htm">Fragments</a>, and <a href="over02_6qk3.htm">Pixels</a>. </p>
<p>
<img src="images/proc01.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

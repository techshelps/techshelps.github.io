<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glDrawElements</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_gldrawelements"></a>glDrawElements</h1>
<p>
The <b>glDrawElements</b> function renders primitives from array data.</p>
<pre><code><b>void glDrawElements(
  GLenum</b><i> mode</i><b>,           </b>
<b>  GLsizei</b><i> count</i><b>,         </b>
<b>  GLenum</b><i> type</i><b>,           </b>
<b>  const GLvoid</b><i> *indices  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>mode</i></dt>
<dd>
The kind of primitives to render. It can assume one of the following symbolic values: GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON. </dd>
<dt>
<i>count</i></dt>
<dd>
The number of elements to be rendered. </dd>
<dt>
<i>type</i></dt>
<dd>
The type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</dd>
<dt>
<i>indices</i></dt>
<dd>
A pointer to the location where the indices are stored. 
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>glDrawElements</b> function enables you to specify multiple geometric primitives with very few function calls. Instead of calling an OpenGL function to pass each individual vertex, normal, or color, you can specify separate arrays of vertexes, normals, and colors beforehand and use them to define a sequence of primitives (all of the same type) with a single call to <b>glDrawElements</b>.</p>
<p>
When you call the <b>glDrawElements</b> function, it uses <i>count</i> sequential elements from <i>indices</i> to construct a sequence of geometric primitives. The <i>mode</i> parameter specifies what kind of primitives are constructed, and how the array elements are used to construct these primitives. If GL_VERTEX_ARRAY is not enabled, no geometric primitives are generated.</p>
<p>
Vertex attributes that are modified by <b>glDrawElements</b> have an unspecified value after <b>glDrawElements</b> returns. For example, if GL_COLOR_ARRAY is enabled, the value of the current color is undefined after <b>glDrawElements</b> executes. Attributes that aren't modified remain unchanged.</p>
<p>
You can include the <b>glDrawElements</b> function in display lists. When <b>glDrawElements</b> is included in a display list, the necessary array data (determined by the array pointers and enables) is also entered into the display list. Because the array pointers and enables are client-side state variables, their values affect display lists when the lists are created, not when the lists are executed.</p>
<p>
<b>Note</b>  The <b>glDrawElements</b> function is only available in OpenGL version 1.1 or later.</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>mode</i> was not an accepted value. </td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%><i>count</i> was a negative value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%><b>glDrawElements</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="glfunc01_2q5w.htm"><b>glArrayElement</b></a>, <a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_456a.htm"><b>glColorPointer</b></a>, <a href="glfunc01_8oqb.htm"><b>glDrawArrays</b></a>, <a href="glfunc01_61pu.htm"><b>glEdgeFlagPointer</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc02_8uwm.htm"><b>glGetPointerv</b></a>, <a href="glfunc03_36lu.htm"><b>glIndexPointer</b></a>, <a href="glfunc03_1tiq.htm"><b>glNormalPointer</b></a>, <a href="glfunc03_64z6.htm"><b>glTexCoordPointer</b></a>, <a href="glfunc03_5ak2.htm"><b>glVertexPointer</b></a></p>
<p>&nbsp;</p></body>
</HTML>

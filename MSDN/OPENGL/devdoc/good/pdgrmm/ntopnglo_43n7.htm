<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Drawing with Double Buffers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_ogl_drawing_with_double_buffers"></a>Drawing with Double Buffers</h2>
<p>
Double buffers smooth the transition between one image and another on the screen. Swapping buffers typically comes at the end of a sequence of drawing commands. By default, the Microsoft implementation of OpenGL in Windows NT and Windows 95 draws to the off-screen buffer; when drawing is complete, you call the <a href="ntopnglr_1ss3.htm"><b>SwapBuffers</b></a> function to copy the off-screen buffer to the on-screen buffer. The following code sample prepares to draw, calls a drawing function, and then copies the completed image on to the screen if double buffering is available.</p>
<pre><code>void myRedraw(void) 
{ 
    // set up for drawing commands 
    glMatrixMode(GL_PROJECTION); 
    glLoadIdentity(); 
    gluPerspective(45, 1.0, 0.1, 100.0); 
 
    // draw our objects 
    myDrawAllObjects(GL_FALSE); 
 
    // if we're double-buffering ... 
    if (bDoubleBuffering)  
 
        // ...draw the copied image to the screen 
        SwapBuffers(hdc); 
} 
 </code></pre>
<p>
The following code sample obtains a window device context, renders a scene, copies the image to the screen (to show the rendering), and then releases the device context.</p>
<pre><code>hdc = GetDC(hwnd); 
mySceneRenderingFunction(); 
SwapBuffers(hdc); 
ReleaseDC(hWnd, hdc); 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

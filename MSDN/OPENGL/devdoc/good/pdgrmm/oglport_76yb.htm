<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Porting Polygons and Quadrilaterals</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_ogl_porting_polygons_and_quadrilaterals"></a>Porting Polygons and Quadrilaterals</h3>
<p>
Keep the following points in mind when porting polygons and quadrilaterals:
<ul>
<li>
There is no direct equivalent for <b>concave(TRUE)</b>. Instead you can use the tessellation routines in the GLU, described in <a href="over02_6l83.htm">Tessellating Polygons</a>. </li>
<li>
Polygon modes are set differently.</li>
<li>
These polygon drawing functions have no direct equivalents in OpenGL: the <b>poly</b> family of routines; the <b>polf</b> family of routines; <b>pmv</b>, <b>pdr</b>, and <b>pclos</b>; <b>rpmv</b> and <b>rpdr</b>; <b>splf</b>; and <b>spclos</b>.</li>
</ul>
<p>
If your IRIS GL code uses these functions, you'll have to rewrite the code using <a href="glfunc01_9u3y.htm"><b>glBegin</b></a><b>(</b>GL_POLYGON<b>)</b>. </p>
<p>
The following table lists the IRIS GL polygon drawing functions and their equivalent OpenGL functions.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=23%>IRIS GL Function</th>
<th align=left width=39%>OpenGL Function</th>
<th align=left width=38%>Meaning</th>
</tr>
<tr valign=top>
<td width=23%><b>bgnpolygon</b> <br>
<b>endpolygon</b></td>
<td width=39%><a href="glfunc01_9u3y.htm"><b>glBegin</b></a><b>(</b>GL_POLYGON<b>)</b> <a href="glfunc01_9u3y.htm"><b>glEnd</b></a></td>
<td width=38%>Vertices define boundary of a simple convex polygon.</td>
</tr>
<tr valign=top>
<td width=23%>—</td>
<td width=39%><b>glBegin(</b>GL_QUADS<b>)</b><p>
<b>glEnd</b></p>
</td>
<td width=38%>Interpret quadruples of vertices as quadrilaterals.</td>
</tr>
<tr valign=top>
<td width=23%><b>bgnqstrip</b> <br>
<b>endqstrip</b></td>
<td width=39%><a href="glfunc01_9u3y.htm"><b>glBegin</b></a><b>(</b>GL_QUAD<br>
_STRIP<b>)</b><p>
<b>glEnd</b></p>
</td>
<td width=38%>Interpret vertices as linked strips of quadrilaterals.</td>
</tr>
<tr valign=top>
<td width=23%>—</td>
<td width=39%><a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a></td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=23%><b>polymode</b></td>
<td width=39%><a href="glfunc03_9zol.htm"><b>glPolygonMode</b></a></td>
<td width=38%>Set polygon drawing mode.</td>
</tr>
<tr valign=top>
<td width=23%><b>rect</b> <p>
<b>rectf</b></p>
</td>
<td width=39%><a href="glfunc03_5o6s.htm"><b>glRect</b></a></td>
<td width=38%>Draw a rectangle.</td>
</tr>
<tr valign=top>
<td width=23%><b>sbox</b> <p>
<b>sboxf</b></p>
</td>
<td width=39%>—</td>
<td width=38%>Draw a screen-aligned rectangle.</td>
</tr>
</table><br>

<h4><a name="_ogl_porting_polygon_modes"></a>Porting Polygon Modes</h4>
<p>
The OpenGL function <a href="glfunc03_9zol.htm"><b>glPolygonMode</b></a> lets you specify which side of a polygon (the back or the front) the mode applies to. Its syntax is:</p>
<pre><code>void glPolygonMode( GLenum face, GLenum mode ); 
 </code></pre>
<p>
where face is one of:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=41%>GL_FRONT</td>
<td width=59%>mode which applies to front-facing polygons</td>
</tr>
<tr valign=top>
<td width=41%>GL_BACK</td>
<td width=59%>mode which applies to back-facing polygons</td>
</tr>
<tr valign=top>
<td width=41%>GL_FRONT_AND_BACK</td>
<td width=59%>mode which applies to both front- and back-facing polygons</td>
</tr>
</table><br>
<p>
The GL_FRONT_AND_BACK mode is equivalent to the IRIS GL <b>polymode</b> function. The following table lists IRIS GL polygon modes and their equivalent OpenGL modes.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>IRIS GL Mode</th>
<th align=left width=25%>OpenGL Mode</th>
<th align=left width=44%>Meaning</th>
</tr>
<tr valign=top>
<td width=31%>PYM_POINT</td>
<td width=25%>GL_POINT</td>
<td width=44%>Draw vertices as points.</td>
</tr>
<tr valign=top>
<td width=31%>PYM_LINE</td>
<td width=25%>GL_LINE</td>
<td width=44%>Draw boundary edges as line segments.</td>
</tr>
<tr valign=top>
<td width=31%>PYM_FILL</td>
<td width=25%>GL_FILL</td>
<td width=44%>Draw polygon interior filled.</td>
</tr>
<tr valign=top>
<td width=31%>PYM_HOLLOW</td>
<td width=25%>—</td>
<td width=44%>Fill only interior pixels at the boundaries.</td>
</tr>
</table><br>

<h4><a name="_ogl_porting_polygon_stipples"></a>Porting Polygon Stipples</h4>
<p>
When porting IRIS GL polygon stipples, keep the following points in mind:
<ul>
<li>
OpenGL doesn't use tables for polygon stipples; only one stipple pattern is kept. You can use display lists to store different stipple patterns.</li>
<li>
The OpenGL polygon stipple bitmap size is always a 32x32 bit pattern.</li>
<li>
Stipple encoding is affected by <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>. </li>
</ul>
<p>
For more information on porting polygon stipples, see <a href="oglport_7o1f.htm">Porting Pixel Operations</a>. </p>
<p>
The following table lists IRIS GL polygon stipple functions and their equivalent OpenGL functions.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=26%>IRIS GL Function</th>
<th align=left width=36%>OpenGL Function</th>
<th align=left width=38%>Meaning</th>
</tr>
<tr valign=top>
<td width=26%><b>defpattern</b></td>
<td width=36%><a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a></td>
<td width=38%>Set the stipple pattern.</td>
</tr>
<tr valign=top>
<td width=26%><b>setpattern</b></td>
<td width=36%>—</td>
<td width=38%>OpenGL keeps only one polygon stipple pattern.</td>
</tr>
<tr valign=top>
<td width=26%><b>getpattern</b></td>
<td width=36%><a href="glfunc02_2mw5.htm"><b>glGetPolygonStipple</b></a></td>
<td width=38%>Return the stipple bitmap (used to return an index).</td>
</tr>
</table><br>
<p>
In OpenGL, you enable and disable polygon stippling by passing GL_POLYGON_STIPPLE as a parameter for <a href="glfunc01_3l5x.htm"><b>glEnable</b></a> and <a href="glfunc01_3l5x.htm"><b>glDisable</b></a>.</p>
<p>
The following OpenGL code sample demonstrates polygon stippling:</p>
<pre><code>void display(void) 
{ 
    GLubyte fly[] = { 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60, 
      0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20, 
      0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20, 
      0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22, 
      0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22, 
      0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22, 
      0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22, 
      0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC, 
      0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30, 
      0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0, 
      0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0, 
      0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30, 
      0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08, 
      0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08, 
      0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08 
    }; 
    GLubyte halftone[] = { 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55, 
      0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55 
    }; 
 
    glClear (GL_COLOR_BUFFER_BIT); 
 
/*  draw all polygons in white*/ 
    glColor3f (1.0, 1.0, 1.0); 
 
/*  draw one solid, unstippled rectangle,*/ 
/*  then two stippled rectangles*/ 
    glRectf (25.0, 25.0, 125.0, 125.0); 
    glEnable (GL_POLYGON_STIPPLE); 
    glPolygonStipple (fly); 
    glRectf (125.0, 25.0, 225.0, 125.0); 
    glPolygonStipple (halftone); 
    glRectf (225.0, 25.0, 325.0, 125.0); 
    glDisable (GL_POLYGON_STIPPLE); 
 
    glFlush (); 
} 
 </code></pre>

<h4><a name="_ogl_porting_tessellated_polygons"></a>Porting Tessellated Polygons</h4>
<p>
In IRIS GL, you use <b>concave(TRUE)</b> and then <b>bgnpolygon</b> to draw concave polygons. The OpenGL GLU includes functions you can use to draw concave polygons. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To draw a concave polygon with OpenGL</h5>
<ol>
<li>
Create a tessellation object.</li>
<li>
Define callbacks that will be used to process the triangles generated by the tessellator.</li>
<li>
Specify the concave polygon to be tessellated.</li>
</ol>
<p>
The following table lists the OpenGL functions for drawing tessellated polygons.&nbsp;&nbsp;&nbsp;&nbsp; </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>OpenGL GLU Function</th>
<th align=left width=57%>Meaning</th>
</tr>
<tr valign=top>
<td width=43%><a href="glufnc01_1nlf.htm"><b>gluNewTess</b></a></td>
<td width=57%>Create a new tessellation object.</td>
</tr>
<tr valign=top>
<td width=43%><a href="glufnc01_0tdf.htm"><b>gluDeleteTess</b></a></td>
<td width=57%>Delete a tessellation object.</td>
</tr>
<tr valign=top>
<td width=43%><a href="glufnc01_9bu3.htm"><b>gluTessCallback</b></a></td>
<td width=57%>—</td>
</tr>
<tr valign=top>
<td width=43%><a href="glufnc01_1qni.htm"><b>gluBeginPolygon</b></a></td>
<td width=57%>Begin the polygon specification.</td>
</tr>
<tr valign=top>
<td width=43%><a href="glufnc01_2p14.htm"><b>gluTessVertex</b></a></td>
<td width=57%>Specify a polygon vertex in a contour.</td>
</tr>
<tr valign=top>
<td width=43%><a href="glufnc01_5nzm.htm"><b>gluNextContour</b></a></td>
<td width=57%>Indicate that the next series of vertices describe a new contour.</td>
</tr>
<tr valign=top>
<td width=43%><a href="glufnc01_1qni.htm"><b>gluEndPolygon</b></a></td>
<td width=57%>End the polygon specification.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>gluTessCallback</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glutesscallback"></a>gluTessCallback</h1>
<p>
The <b>gluTessCallback</b> function defines a callback for a tessellation object.</p>
<pre><code><b>void gluTessCallback(
  GLUtesselator *</b><i> tess</i><b>,</b>   
<b>  GLenum</b><i> which</i><b>,</b>           
<b>  void (* fn)(</b><i>&nbsp;)          </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>tess</i></dt>
<dd>
The tessellation object (created with <a href="glufnc01_1nlf.htm"><b>gluNewTess</b></a>). </dd>
<dt>
<i>which</i></dt>
<dd>
The callback being defined. The following values are valid: GLU_TESS_BEGIN, GLU_TESS_BEGIN_DATA, GLU_TESS_EDGE_FLAG, GLU_TESS_EDGE_FLAG_DATA, GLU_TESS_VERTEX, GLU_TESS_VERTEX_DATA, GLU_TESS_END, GLU_TESS_END_DATA, GLU_TESS_COMBINE, GLU_TESS_COMBINE_DATA, GLU_TESS_ERROR, and GLU_TESS_ERROR_DATA.
<p>
For more information on these callbacks, see the following Remarks section.
</dd>
<dt>
<i>fn </i></dt>
<dd>
The function to be called.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Use <b>gluTessCallback</b> to specify a callback to be used by a tessellation object. If the specified callback is already defined, then it is replaced. If <i>fn</i> is NULL, then the existing callback becomes undefined.</p>
<p>
The tessellation object uses these callbacks to describe how a polygon that you specify is broken into triangles. </p>
<p>
There are two versions of each callback, one with polygon data that you can define and one without. If both versions of a particular callback are specified, the callback with the polygon data you specify will be used. The <i>polygon_data</i> parameter of <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a> is a copy of the pointer that was specified when <b>gluTessBeginPolygon</b> was called.</p>
<p>
The following are valid callbacks:
<dl>
<dt>
GLU_TESS_BEGIN</dt>
<dd>
The GLU_TESS_BEGIN callback is invoked like <a href="glfunc01_9u3y.htm"><b>glBegin</b></a> to indicate the start of a (triangle) primitive. The function takes a single argument of type <b>GLenum</b>. If you set the GLU_TESS_BOUNDARY_ONLY property to GL_FALSE, the argument is set to either<b> </b>GL_TRIANGLE_FAN, GL_TRIANGLE_STRIP, or GL_TRIANGLES. If you set the<b> </b>GLU_TESS_BOUNDARY_ONLY property to GL_TRUE, the argument is set to GL_LINE_LOOP. The function prototype for this callback is as follows:
<p>
<b>void begin (GLenum </b><i>type</i><b>);</b> 
</dd>
<dt>
GLU_TESS_BEGIN_DATA</dt>
<dd>
GLU_TESS_BEGIN_DATA is the same as the GLU_TESS_BEGIN<b> </b>callback except that it takes an additional pointer argument. This pointer is identical to the opaque pointer provided when you call <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a>. The function prototype for this callback is:
<p>
<b>void beginData (GLenum</b> <i>type</i>,<b> void * </b><i>polygon_data</i><b>);</b> 
</dd>
<dt>
GLU_TESS_EDGE_FLAG</dt>
<dd>
The GLU_TESS_EDGE_FLAG callback is similar to <a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a>. The function takes a single Boolean flag that indicates which edges lie on the polygon boundary. If the flag is GL_TRUE, then each vertex that follows begins an edge that lies on the polygon boundary; that is, an edge which separates an interior region from an exterior one. If the flag is GL_FALSE, then each vertex that follows begins an edge that lies in the polygon interior. The GLU_TESS_EDGE_FLAG callback (if defined) is invoked before the first vertex callback is made.
<p>
Because triangle fans and triangle strips do not support edge flags, the begin callback is not called with GL_TRIANGLE_FAN or GL_TRIANGLE_STRIP if an edge flag callback is provided. Instead, the fans and strips are converted to independent triangles. The function prototype for this callback is:

<p>
<b>void edgeFlag (GLboolean </b><i>flag</i><b>);</b> 
</dd>
<dt>
GLU_TESS_EDGE_FLAG_DATA</dt>
<dd>
The GLU_TESS_EDGE_FLAG_DATA callback is the same as the GLU_TESS_EDGE_FLAG callback except that it takes an additional pointer argument. This pointer is identical to the opaque pointer provided when you call <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a>. The function prototype for this callback is:
<p>
<b>void edgeFlagData (GLboolean</b> <i>flag</i>,<b> void * </b><i>polygon_data</i><b>);</b> 
</dd>
<dt>
GLU_TESS_VERTEX</dt>
<dd>
The GLU_TESS_VERTEX callback is invoked between the begin and end callbacks. It is similar to <a href="glfunc03_2kag.htm"><b>glVertex</b></a>, and it defines the vertices of the triangles created by the tessellation process. The function takes a pointer as its only argument. This pointer is identical to the opaque pointer that you provided when you defined the vertex (see <a href="glufnc01_2p14.htm"><b>gluTessVertex</b></a>). The function prototype for this callback is:
<p>
<b>void vertex (void * </b><i>vertex_data</i><b>);</b> 
</dd>
<dt>
GLU_TESS_VERTEX_DATA</dt>
<dd>
The GLU_TESS_VERTEX_DATA is the same as the GLU_TESS_VERTEX callback except that it takes an additional pointer argument. This pointer is identical to the opaque pointer provided when you call <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a>. The function prototype for this callback is:
<p>
<b>void vertexData (void * </b><i>vertex_data</i>,<b> void * </b><i>polygon_data</i><b>);</b> 
</dd>
<dt>
GLU_TESS_END</dt>
<dd>
The GLU_TESS_END callback serves the same purpose as <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>. It indicates the end of a primitive, and it takes no arguments. The function prototype for this callback is:
<p>
<b>void end (void); </b>
</dd>
<dt>
GLU_TESS_END_DATA</dt>
<dd>
The GLU_TESS_END_DATA callback is the same as the GLU_TESS_END callback except that it takes an additional pointer argument. This pointer is identical to the opaque pointer provided when you call <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a>. The function prototype for this callback is:
<p>
<b>void endData (void * </b><i>polygon_data</i><b>);</b> 
</dd>
<dt>
GLU_TESS_COMBINE</dt>
<dd>
Call the GLU_TESS_COMBINE callback to create a new vertex when the tessellation detects an intersection, or to merge features. The function takes four arguments: 
<ul>
<li>
An array of three elements, each of type <b>Gldouble</b>.</li>
<li>
An array of four pointers.</li>
<li>
An array of four elements, each of type <b>GLfloat</b>.</li>
<li>
A pointer to a pointer. </li>
</ul>

<p>
The function prototype for this callback is:

<p>
<b>void combine(GLdouble</b> <i>coords[3]</i>,<b> void * </b><i>vertex_data[4]</i>, <b>GLfloat </b><i>weight[4]</i>,<b> void **</b><i>outData</i><b>);</b> 

<p>
The vertex is defined as a linear combination of up to four existing vertices, stored in <i>vertex_data</i>. The coefficients of the linear combination are given by <i>weight</i>; these weights always sum to 1.0. All vertex pointers are valid even when some of the weights are zero. The <i>coords</i> parameter gives the location of the new vertex.

<p>
Allocate another vertex, interpolate parameters using <i>vertex_data</i> and weight, and return the new vertex pointer in <i>outData</i>. This handle is supplied during rendering callbacks. Free the memory sometime after calling <a href="glufnc01_4sa6.htm"><b>gluTessEndPolygon</b></a>.

<p>
For example, if the polygon lies in an arbitrary plane in three-dimensional space, and you associate a color with each vertex, the GLU_TESS_COMBINE callback might look like the following:

<pre><code>void myCombine( GLdouble coords[3], VERTEX *d[4], 
                         GLfloat w[4], VERTEX **dataOut ) 
{ 
    VERTEX *new = new_vertex(); 
    new-&gt;x = coords[0]; 
    new-&gt;y = coords[1]; 
    new-&gt;z = coords[2]; 
    new-&gt;r = w[0]*d[0]-&gt;r + w[1]*d[1]-&gt;r + w[2]*d[2]-&gt;r + 
                w[3]*d[3]-&gt;r; 
    new-&gt;g = w[0]*d[0]-&gt;g + w[1]*d[1]-&gt;g + w[2]*d[2]-&gt;g + 
                w[3]*d[3]-&gt;g; 
    new-&gt;b = w[0]*d[0]-&gt;b + w[1]*d[1]-&gt;b + w[2]*d[2]-&gt;b + 
                w[3]*d[3]-&gt;b; 
    new-&gt;a = w[0]*d[0]-&gt;a + w[1]*d[1]-&gt;a + w[2]*d[2]-&gt;a + 
                w[3]*d[3]-&gt;a; 
        *dataOut = new; 
} 
  </code></pre>

<p>
When the tessellation detects an intersection, the GLU_TESS_COMBINE or GLU_TESS_COMBINE_DATA callback (see below) must be defined, and must write a non-NULL pointer into <i>dataOut</i>. Otherwise the GLU_TESS_NEED_COMBINE_CALLBACK error occurs, and no output is generated. (This is the only error that can occur during tessellation and rendering.)
</dd>
<dt>
GLU_TESS_COMBINE_DATA</dt>
<dd>
The GLU_TESS_COMBINE_DATA callback is the same as the GLU_TESS_COMBINE callback except that it takes an additional pointer argument. This pointer is identical to the opaque pointer provided when you call <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a>. The function prototype for this callback is:
<p>
<b>void combineData (GLdouble </b><i>coords[3]</i>,<b> void *</b><i>vertex_data[4]</i>,<b> GLfloat </b><i>weight[4]</i>,<b> void **</b><i>outData</i>,<b> void *</b> <i>polygon_data</i><b>);</b> 
</dd>
<dt>
GLU_TESS_ERROR</dt>
<dd>
The GLU_TESS_ERROR callback is called when an error is encountered. The one argument is of type <b>GLenum</b>; it indicates the specific error that occurred and is set to one of the following: GLU_TESS_MISSING_BEGIN_POLYGON, GLU_TESS_MISSING_END_POLYGON, GLU_TESS_MISSING_BEGIN_CONTOUR, GLU_TESS_MISSING_END_CONTOUR, GLU_TESS_COORD_TOO_LARGE, or GLU_TESS_NEED_COMBINE_CALLBACK. 
<p>
Call <a href="glufnc01_8von.htm"><b>gluErrorString</b></a> to retrieve character strings describing these errors. The function prototype for this callback is as follows:

<p>
<b>void error (GLenum</b> <i>errno</i><b>);</b> 

<p>
The GLU library recovers from the first four errors by inserting the missing call or calls. GLU_TESS_COORD_TOO_LARGE indicates that some vertex coordinate exceeded the predefined constant GLU_TESS_MAX_COORD in absolute value, and that the value has been clamped. (Coordinate values must be small enough that two can be multiplied together without overflow.) GLU_TESS_NEED_COMBINE_CALLBACK indicates that the tessellation detected an intersection between two edges in the input data, and the GLU_TESS_COMBINE or GLU_TESS_COMBINE_DATA callback was not provided. No output will be generated.
</dd>
<dt>
GLU_TESS_ERROR_DATA</dt>
<dd>
The GLU_TESS_ERROR_DATA callback is the same as the GLU_TESS_ERROR callback, except that it takes an additional pointer argument. This pointer is identical to the opaque pointer provided when you call <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a>. The function prototype for this callback is:
<p>
<b>void errorData (GLenum </b><i>errno</i>,<b> void * </b><i>polygon_data</i><b>);</b> 

</dd>
</dl>
<h4>Example</h4>
<p>
You can directly render tessallated polygons as follows:</p>
<pre><code>gluTessCallback(tess, GLU_TESS_BEGIN, glBegin);  
gluTessCallback(tess, GLU_TESS_VERTEX, glVertex3dv);  
gluTessCallback(tess, GLU_TESS_END, glEnd);  
gluTessBeginPolygon(tess, NULL); 
    gluTessBeginContour(tess); 
        gluTessVertex(tess, v, v); 
        . .  
    gluTessEndContour(tess); 
gluTessEndPolygon(tess); 
  </code></pre>
<p>
Store the tessellated polygon in a display list so that it does not need to be tessellated every time it is rendered.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in glu.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with glu32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_75lz.htm"><b>glEdgeFlag</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc03_2kag.htm"><b>glVertex</b></a>, <a href="glufnc01_0tdf.htm"><b>gluDeleteTess</b></a>, <a href="glufnc01_8von.htm"><b>gluErrorString</b></a>, <a href="glufnc01_1nlf.htm"><b>gluNewTess</b></a>, <a href="glufnc01_4sa6.htm"><b>gluTessBeginPolygon</b></a>, <a href="glufnc01_4sa6.htm"><b>gluTessEndPolygon</b></a>, <a href="glufnc01_2p14.htm"><b>gluTessVertex</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

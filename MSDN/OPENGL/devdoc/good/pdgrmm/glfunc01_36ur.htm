<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glCopyPixels</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glcopypixels"></a>glCopyPixels</h1>
<p>
The <b>glCopyPixels</b> function copies pixels in the frame buffer.</p>
<pre><code><b>void glCopyPixels(
  GLint</b><i> x</i><b>,</b>         
<b>  GLint</b><i> y</i><b>,</b>         
<b>  GLsizei</b><i> width</i><b>,</b>   
<b>  GLsizei</b><i> height</i><b>,</b>  
<b>  GLenum</b><i> type</i>      
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>x, y</i></dt>
<dd>
The window coordinates of the lower-left corner of the rectangular region of pixels to be copied. </dd>
<dt>
<i>width, height</i></dt>
<dd>
The dimensions of the rectangular region of pixels to be copied. Both must be nonnegative. </dd>
<dt>
<i>type</i></dt>
<dd>
Specifies whether <b>glCopyPixels</b> is to copy color values, depth values, or stencil values. The acceptable symbolic constants are:
<dl>
<dt>
GL_COLOR</dt>
<dd>
The <b>glCopyPixels</b> function reads indexes or RGBA colors from the buffer currently specified as the read source buffer (see <a href="glfunc03_6hte.htm"><b>glReadBuffer</b></a>). 
<p>
If OpenGL is in color-index mode:

<p>
1.Each index that is read from this buffer is converted to a fixed-point format with an unspecified number of bits to the right of the binary point. 

<p>
2.Each index is shifted left by GL_INDEX_SHIFT bits, and added to GL_INDEX_OFFSET. 

<p>
If GL_INDEX_SHIFT is negative, the shift is to the right. In either case, zero bits fill otherwise unspecified bit locations in the result. 

<p>
3.If GL_MAP_COLOR is true, the index is replaced with the value that it references in lookup table GL_PIXEL_MAP_I_TO_I. 

<p>
4.Whether the lookup replacement of the index is done or not, the integer part of the index is then <b>AND</b>ed with 2^<i>b </i>– 1, where <i>b</i> is the number of bits in a color-index buffer. 

<p>
If OpenGL is in RGBA mode:

<p>
1.The red, green, blue, and alpha components of each pixel that is read are converted to an internal floating-point format with unspecified precision. 

<p>
2.The conversion maps the largest representable component value to 1.0, and component value zero to 0.0. 

<p>
3.The resulting floating-point color values are then multiplied by GL_c_SCALE and added to GL_c_BIAS, where <i>c</i> is RED, GREEN, BLUE, and ALPHA for the respective color components. 

<p>
4.The results are clamped to the range [0,1]. 

<p>
5.If GL_MAP_COLOR is true, each color component is scaled by the size of lookup table GL_PIXEL_MAP_c_TO_c, and then replaced by the value that it references in that table; <i>c</i> is R, G, B, or A, respectively.

<p>
The resulting indexes or RGBA colors are then converted to fragments by attaching the current raster position <i>z</i>-coordinate and texture coordinates to each pixel, and then assigning window coordinates (<i>x (r) </i>&nbsp;+&nbsp;<i>i</i>,&nbsp;<i>y (r) &nbsp;+&nbsp;j</i>), where (<i>x (r) &nbsp;y (r) </i>) is the current raster position, and the pixel was the pixel in the <i>i </i>position in the <i>j </i>row. These pixel fragments are then treated just like the fragments generated by rasterizing points, lines, or polygons. Texture mapping, fog, and all the fragment operations are applied before the fragments are written to the frame buffer.
</dd>
<dt>
GL_DEPTH</dt>
<dd>
Depth values are read from the depth buffer and converted directly to an internal floating-point format with unspecified precision. The resulting floating-point depth value is then multiplied by GL_DEPTH_SCALE and added to GL_DEPTH_BIAS. The result is clamped to the range [0,1].
<p>
The resulting depth components are then converted to fragments by attaching the current raster position color or color index and texture coordinates to each pixel, then assigning window coordinates (<i>x (r) </i>&nbsp;+&nbsp;<i>i</i>,&nbsp;<i>y (r) &nbsp;+&nbsp;j</i>), where (x<i> (r) </i>,&nbsp;y<i> (r) </i>) is the current raster position, and the pixel was the pixel in the <i>i </i>position in the <i>j </i>row. These pixel fragments are then treated just like the fragments generated by rasterizing points, lines, or polygons. Texture mapping, fog, and all the fragment operations are applied before the fragments are written to the frame buffer. 
</dd>
<dt>
GL_STENCIL</dt>
<dd>
Stencil indexes are read from the stencil buffer and converted to an internal fixed-point format with an unspecified number of bits to the right of the binary point. Each fixed-point index is then shifted left by GL_INDEX_SHIFT bits, and added to GL_INDEX_OFFSET. If GL_INDEX_SHIFT is negative, the shift is to the right. In either case, zero bits fill otherwise unspecified bit locations in the result. If GL_MAP_STENCIL is true, the index is replaced with the value that it references in lookup table GL_PIXEL_MAP_S_TO_S. Whether the lookup replacement of the index is done or not, the integer part of the index is then <b>AND</b>ed with 2^<i>b</i> – 1, where <i>b</i> is the number of bits in the stencil buffer. The resulting stencil indexes are then written to the stencil buffer such that the index read from the<i> i</i> location of the<i> j</i> row is written to location (<i>x (r) &nbsp;+&nbsp;i,&nbsp;y (r) &nbsp;+&nbsp;j</i>), where (<i>x (r) </i>,<i>&nbsp;y (r) </i>) is the current raster position. Only the pixel-ownership test, the scissor test, and the stencil writemask affect these writes.
</dd>
</dl>
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>glCopyPixels</b> function copies a screen-aligned rectangle of pixels from the specified frame buffer location to a region relative to the current raster position. Its operation is well defined only if the entire pixel source region is within the exposed portion of the window. Results of copies from outside the window, or from regions of the window that are not exposed, are hardware dependent and undefined.</p>
<p>
The<i> x</i> and <i>y</i> parameters specify the window coordinates of the lower-left corner of the rectangular region to be copied. The <i>width</i> and <i>height</i> parameters specify the dimensions of the rectangular region to be copied. Both <i>width</i> and <i>height</i> must be nonnegative.</p>
<p>
Several parameters control the processing of the pixel data while it is being copied. These parameters are set with three functions: <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>, <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>, and <a href="glfunc03_4mul.htm"><b>glPixelZoom</b></a>. This topic describes the effects on <b>glCopyPixels</b> of most, but not all, of the parameters specified by these three functions.</p>
<p>
The <b>glCopyPixels</b> function copies values from each pixel with the lower-left corner at (<i>x&nbsp;</i>+&nbsp;<i>i</i>,&nbsp;<i>y&nbsp;</i>+&nbsp;<i>j</i>) for 0&le;<i>i</i>&lt;<i>width</i> and 0&le;<i>j</i>&lt;<i>height</i>. This pixel is said to be the <i>i</i> pixel in the<i> j</i> row. Pixels are copied in row order from the lowest to the highest row, left to right in each row.</p>
<p>
The<i> type</i> parameter specifies whether color, depth, or stencil data is to be copied. </p>
<p>
The rasterization described thus far assumes pixel zoom factors of 1.0. If you use <a href="glfunc03_4mul.htm"><b>glPixelZoom</b></a> to change the <i>x</i> and <i>y</i> pixel zoom factors, pixels are converted to fragments as follows. If (<i>x (r) ,&nbsp;y (r) </i>) is the current raster position, and a given pixel is in the <i>i</i> location in the <i>j</i> row of the source pixel rectangle, then fragments are generated for pixels whose centers are in the rectangle with corners at</p>
<p>
(<i>x (r)  </i>+ <i>zoom (x)  i</i>,<i> y (r)  </i>+ <i>zoom (y)  j</i>)</p>
<p>
and </p>
<p>
(<i>x (r) </i> + <i>zoom (x)  </i>(<i>i </i>+ 1), <i>y (r)  </i>+ <i>zoom (y)  </i>(<i>j </i>+ 1 ))</p>
<p>
where <i>zoom (x) </i> is the value of GL_ZOOM_X and <i>zoom (y) </i> is the value of GL_ZOOM_Y.</p>
<p>
Modes specified by <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a> have no effect on the operation of <b>glCopyPixels</b>.</p>
<p>
The following functions retrieve information related to <b>glCopyPixels</b>:</p>
<p class=indent1>
<a href="glfunc02_5ub8.htm"><b>glGet</b></a> with argument GL_CURRENT_RASTER_POSITION</p>
<p class=indent1>
<b>glGet</b> with argument GL_CURRENT_RASTER_POSITION_VALID</p>
<p>
To copy the color pixel in the lower-left corner of the window to the current raster position, use</p>
<p>
<b>glCopyPixels(</b>0, 0, 1, 1, GL_COLOR<b>)</b>;</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error Code</th>
<th align=left width=52%>Condition</th>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_ENUM </td>
<td width=52%><i>type</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_VALUE </td>
<td width=52%>Either <i>width</i> or <i>height</i> was negative.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_OPERATION </td>
<td width=52%><i>type</i> was GL_DEPTH and there was no depth buffer.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_OPERATION </td>
<td width=52%><i>type</i> was GL_STENCIL and there was no stencil buffer.</td>
</tr>
<tr valign=top>
<td width=48%>GL_INVALID_OPERATION </td>
<td width=52%><b>glCopyPixels</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in gl.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_5kkj.htm"><b>glDepthFunc</b></a>, <a href="glfunc01_4gxe.htm"><b>glDrawBuffer</b></a>, <a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc02_5ub8.htm"><b>glGet</b></a>, <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>, <a href="glfunc03_7kdh.htm"><b>glPixelStore</b></a>, <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>, <a href="glfunc03_4mul.htm"><b>glPixelZoom</b></a>, <a href="glfunc03_0tgz.htm"><b>glRasterPos</b></a>, <a href="glfunc03_6hte.htm"><b>glReadBuffer</b></a>, <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a>, <a href="glfunc03_9t9f.htm"><b>glStencilFunc</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>glPixelStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_ogl_glpixelstore"></a>glPixelStoref, glPixelStorei</h1>
<p>
The <b>glPixelStoref</b> and <b>glPixelStorei </b>functions set pixel storage modes.</p>
<pre><code><b>void glPixelStoref(
  GLenum</b><i> pname</i><b>,</b>   
<b>  GLfloat</b><i> param</i>   
<b>);</b>
 
<b>void glPixelStorei(</b>
<b>  GLenum</b><i> pname</i><b>,</b>   
<b>  GLint</b><i> param</i>     
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pname</i></dt>
<dd>
The symbolic name of the parameter to be set. Six of the twelve storage parameters affect how pixel data is returned to client memory, and are therefore significant only for <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a> commands. They are as follows: 
<dl>
<dt>
GL_PACK_SWAP_BYTES</dt>
<dd>
If true, byte ordering for multibyte color components, depth components, color indexes, or stencil indexes is reversed. That is, if a four-byte component is made up of bytes <i>b</i> (0) , <i>b</i> (1) , <i>b</i> (2) , <i>b</i> (3) , it is stored in memory as <i>b</i> (3) , <i>b</i> (2) , <i>b</i> (1) , <i>b</i> (0)  if GL_PACK_SWAP_BYTES is true. GL_PACK_SWAP_BYTES has no effect on the memory order of components within a pixel, only on the order of bytes within components or indexes. For example, the three components of a GL_RGB format pixel are always stored with red first, green second, and blue third, regardless of the value of GL_PACK_SWAP_BYTES. </dd>
<dt>
GL_PACK_LSB_FIRST</dt>
<dd>
If true, bits are ordered within a byte from least significant to most significant; otherwise, the first bit in each byte is the most significant one. This parameter is significant for bitmap data only. </dd>
<dt>
GL_PACK_ROW_LENGTH </dt>
<dd>
If greater than zero, GL_PACK_ROW_LENGTH defines the number of pixels in a row. If the first pixel of a row is placed at location <i>p</i> in memory, then the location of the first pixel of the next row is obtained by skipping</dd>
</dl>
</dd>
</dl>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/pix01.gif" border=0></p>
<p>
components or indexes, where <i>n</i> is the number of components or indexes in a pixel,<i> l</i> is the number of pixels in a row (GL_PACK_ROW_LENGTH if it is greater than zero, the width argument to the pixel routine otherwise), <i>a</i> is the value of GL_PACK_ALIGNMENT, and <i>s</i> is the size, in bytes, of a single component (if <i>a</i> &lt; <i>s</i>, then it is as if <i>a</i> = <i>s</i>). In the case of 1-bit values, the location of the next row is obtained by skipping</p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/pix02.gif" border=0></p>
<p>
components or indexes.</p>
<p>
The word <i>component</i> in this description refers to the nonindex values red, green, blue, alpha, and depth. Storage format GL_RGB, for example, has three components per pixel: first red, then green, and finally blue. 
<dl>
<dt>
GL_PACK_SKIP_PIXELS and GL_PACK_SKIP_ROWS</dt>
<dd>
These values are provided as a convenience to the programmer; they provide no functionality that cannot be duplicated simply by incrementing the pointer passed to <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a>. Setting GL_PACK_SKIP_PIXELS to <i>i</i> is equivalent to incrementing the pointer by <i>i</i> <i>n</i> components or indexes, where <i>n</i> is the number of components or indexes in each pixel. Setting GL_PACK_SKIP_ROWS to <i>j </i>is equivalent to incrementing the pointer by <i>j</i> <i>k</i> components or indexes, where <i>k</i> is the number of components or indexes per row, as computed above in the GL_PACK_ROW_LENGTH section. </dd>
<dt>
GL_PACK_ALIGNMENT</dt>
<dd>
Specifies the alignment requirements for the start of each pixel row in memory. The allowable values are 1 (byte-alignment), 2 (rows aligned to even-numbered bytes), 4 (word alignment), and 8 (rows start on double-word boundaries).
<p>
The other six of the twelve storage parameters affect how pixel data is read from client memory. These values are significant for <a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a>, <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a>, <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>, <a href="glfunc01_1a5s.htm"><b>glBitmap</b></a>, and <a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a>. They are as follows:
</dd>
<dt>
GL_UNPACK_SWAP_BYTES</dt>
<dd>
If true, byte ordering for multibyte color components, depth components, color indexes, or stencil indexes is reversed. That is, if a four-byte component is made up of bytes <i>b</i> (0) , <i>b</i> (1) , <i>b</i> (2) , <i>b</i> (3) , it is taken from memory as <i>b</i> (3) , <i>b</i> (2) , <i>b</i> (1) , <i>b</i> (0)  if GL_UNPACK_SWAP_BYTES is true. GL_UNPACK_SWAP_BYTES<b> </b>has no effect on the memory order of components within a pixel, only on the order of bytes within components or indexes. For example, the three components of a GL_RGB format pixel are always stored with red first, green second, and blue third, regardless of the value of GL_UNPACK_SWAP_BYTES. </dd>
<dt>
GL_UNPACK_LSB_FIRST</dt>
<dd>
If true, bits are ordered within a byte from least significant to most significant; otherwise, the first bit in each byte is the most significant one. This is significant for bitmap data only. </dd>
<dt>
GL_UNPACK_ROW_LENGTH</dt>
<dd>
If greater than zero, GL_UNPACK_ROW_LENGTH defines the number of pixels in a row. If the first pixel of a row is placed at location <i>p</i> in memory, then the location of the first pixel of the next row is obtained by skipping</dd>
</dl>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/pix03.gif" border=0></p>
<p>
components or indexes, where n is the number of components or indexes in a pixel, <i>l</i> is the number of pixels in a row (GL_UNPACK_ROW_LENGTH if it is greater than zero, the width argument to the pixel routine otherwise), <i>a</i> is the value of GL_UNPACK_ALIGNMENT, and <i>s</i> is the size, in bytes, of a single component (if <i>a</i> &lt; <i>s</i>, then it is as if <i>a</i>&nbsp;=&nbsp;<i>s</i>). In the case of 1-bit values, the location of the next row is obtained by skipping</p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="images/pix04.gif" border=0></p>
<p>
components or indexes.</p>
<p>
The word <i>component</i> in this description refers to the nonindex values red, green, blue, alpha, and depth. Storage format GL_RGB, for example, has three components per pixel: first red,<b> </b>then green, and finally blue. 
<dl>
<dt>
GL_UNPACK_SKIP_PIXELS and GL_UNPACK_SKIP_ROWS</dt>
<dd>
These values are provided as a convenience to the programmer; they provide no functionality that cannot be duplicated simply by incrementing the pointer passed to <a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a>, <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a>, <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>, <a href="glfunc01_1a5s.htm"><b>glBitmap</b></a>, or <a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a>. Setting GL_UNPACK_SKIP_PIXELS to <i>i</i> is equivalent to incrementing the pointer by <i>i n</i> components or indexes, where <i>n</i> is the number of components or indexes in each pixel. Setting GL_UNPACK_SKIP_ROWS to <i>j</i> is equivalent to incrementing the pointer by <i>j k</i> components or indexes, where <i>k</i> is the number of components or indexes per row, as computed above in the GL_UNPACK_ROW_LENGTH section. </dd>
<dt>
GL_UNPACK_ALIGNMENT</dt>
<dd>
Specifies the alignment requirements for the start of each pixel row in memory. The allowable values are 1 (byte-alignment), 2 (rows aligned to even-numbered bytes), 4 (word alignment), and 8 (rows start on double-word boundaries).</dd>
<dt>
<i>param</i></dt>
<dd>
The value that <i>pname</i> is set to.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The<b> glPixelStore</b> function sets pixel storage modes that affect the operation of subsequent <a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a> and <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a> as well as the unpacking of polygon stipple patterns (see <a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a>), bitmaps (see <a href="glfunc01_1a5s.htm"><b>glBitmap</b></a>), and texture patterns (see <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a> and <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>).</p>
<p>
The following table gives the type, initial value, and range of valid values for each of the storage parameters that can be set with <b>glPixelStore</b>.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=44%>Pname</th>
<th align=left width=18%>Type</th>
<th align=left width=15%>Initial Value</th>
<th align=left width=23%>Valid Range</th>
</tr>
<tr valign=top>
<td width=44%>GL_PACK_SWAP_BYTES</td>
<td width=18%>Boolean</td>
<td width=15%>false</td>
<td width=23%>true or false</td>
</tr>
<tr valign=top>
<td width=44%>GL_PACK_SWAP_BYTES</td>
<td width=18%>Boolean</td>
<td width=15%>false</td>
<td width=23%>true or false</td>
</tr>
<tr valign=top>
<td width=44%>GL_PACK_ROW_LENGTH</td>
<td width=18%>integer</td>
<td width=15%>0</td>
<td width=23%>[0,)</td>
</tr>
<tr valign=top>
<td width=44%>GL_PACK_SKIP_ROWS</td>
<td width=18%>integer</td>
<td width=15%>0</td>
<td width=23%>[0,)</td>
</tr>
<tr valign=top>
<td width=44%>GL_PACK_SKIP_PIXELS</td>
<td width=18%>integer</td>
<td width=15%>0</td>
<td width=23%>[0,)</td>
</tr>
<tr valign=top>
<td width=44%>GL_PACK_ALIGNMENT</td>
<td width=18%>integer</td>
<td width=15%>4</td>
<td width=23%>1, 2, 4, or 8 </td>
</tr>
<tr valign=top>
<td width=44%>GL_UNPACK_SWAP_BYTES</td>
<td width=18%>Boolean</td>
<td width=15%>false</td>
<td width=23%>true or false</td>
</tr>
<tr valign=top>
<td width=44%>GL_UNPACK_LSB_FIRST</td>
<td width=18%>Boolean</td>
<td width=15%>false</td>
<td width=23%>true or false </td>
</tr>
<tr valign=top>
<td width=44%>GL_UNPACK_ROW_LENGTH</td>
<td width=18%>integer</td>
<td width=15%>0</td>
<td width=23%>[0,)</td>
</tr>
<tr valign=top>
<td width=44%>GL_UNPACK_SKIP_ROWS</td>
<td width=18%>integer</td>
<td width=15%>0</td>
<td width=23%>[0,)</td>
</tr>
<tr valign=top>
<td width=44%>GL_UNPACK_SKIP_PIXELS</td>
<td width=18%>integer</td>
<td width=15%>0</td>
<td width=23%>[0,)</td>
</tr>
<tr valign=top>
<td width=44%>GL_UNPACK_ALIGNMENT</td>
<td width=18%>integer</td>
<td width=15%>4</td>
<td width=23%>1, 2, 4, or 8</td>
</tr>
</table><br>
<p>
The<b> glPixelStoref</b> function can be used to set any pixel store parameter. If the parameter type is Boolean, and if <i>param</i> is 0.0, then the parameter is false; otherwise it is set to true. If <i>pname</i> is an integer type parameter, then <i>param</i> is rounded to the nearest integer.</p>
<p>
Likewise, the <b>glPixelStorei</b> function can also be used to set any of the pixel store parameters. Boolean parameters are set to false if <i>param</i> is 0 and true otherwise. The <i>param</i> parameter is converted to floating point before being assigned to real-valued parameters.</p>
<p>
The pixel storage modes in effect when <a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a>, <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a>, <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a>, <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a>, <a href="glfunc01_1a5s.htm"><b>glBitmap</b></a>, or <a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a> is placed in a display list control the interpretation of memory data. The pixel storage modes in effect when a display list is executed are not significant.</p>
<p>
The following functions retrieve information related to <b>glPixelStore</b>:</p>
<p class=indent1>
<a href="glfunc02_5ub8.htm"><b>glGet</b></a> with argument GL_PACK_SWAP_BYTES</p>
<p class=indent1>
<b>glGet</b> with argument GL_PACK_LSB_FIRST</p>
<p class=indent1>
<b>glGet</b> with argument GL_PACK_ROW_LENGTH</p>
<p class=indent1>
<b>glGet</b> with argument GL_PACK_SKIP_ROWS</p>
<p class=indent1>
<b>glGet</b> with argument GL_PACK_SKIP_PIXELS</p>
<p class=indent1>
<b>glGet</b> with argument GL_PACK_ALIGNMENT</p>
<p class=indent1>
<b>glGet</b> with argument GL_UNPACK_SWAP_BYTES</p>
<p class=indent1>
<b>glGet</b> with argument GL_UNPACK_LSB_FIRST</p>
<p class=indent1>
<b>glGet</b> with argument GL_UNPACK_ROW_LENGTH</p>
<p class=indent1>
<b>glGet</b> with argument GL_UNPACK_SKIP_ROWS</p>
<p class=indent1>
<b>glGet</b> with argument GL_UNPACK_SKIP_PIXELS</p>
<p class=indent1>
<b>glGet</b> with argument GL_UNPACK_ALIGNMENT</p>
<h4>Error Codes</h4>
<p>
The following are the error codes generated and their conditions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error Code</th>
<th align=left width=57%>Condition</th>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_ENUM </td>
<td width=57%><i>pname</i> was not an accepted value.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_VALUE </td>
<td width=57%>A negative row length, pixel skip, or row skip value was specified, or if alignment was specified as other than 1, 2, 4, or 8.</td>
</tr>
<tr valign=top>
<td width=43%>GL_INVALID_OPERATION </td>
<td width=57%><b>glPixelStore</b> was called between a call to <b>glBegin</b> and the corresponding call to <b>glEnd</b>.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.5 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in gl.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with opengl32.lib.</p>
<h4>See Also</h4>
<p>
<a href="glfunc01_9u3y.htm"><b>glBegin</b></a>, <a href="glfunc01_1a5s.htm"><b>glBitmap</b></a>, <a href="glfunc01_6lbn.htm"><b>glDrawPixels</b></a>, <a href="glfunc01_9u3y.htm"><b>glEnd</b></a>, <a href="glfunc03_5mpc.htm"><b>glPixelMap</b></a>, <a href="glfunc03_881e.htm"><b>glPixelTransfer</b></a>, <a href="glfunc03_4mul.htm"><b>glPixelZoom</b></a>, <a href="glfunc03_1tr9.htm"><b>glPolygonStipple</b></a>, <a href="glfunc03_8m7n.htm"><b>glReadPixels</b></a>, <a href="glfunc03_16hw.htm"><b>glTexImage1D</b></a>, <a href="glfunc03_16jo.htm"><b>glTexImage2D</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISAPI and the Web Application Architecture</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_in_isapi_and_the_web_application_architecture"></a>ISAPI and the Web Application Architecture</h1>
<p>
Microsoft® developed the ISAPI model as an alternative to the Common Gateway Interface (CGI). The ISAPI model provides a number of advantages over the CGI model, including low overhead, fast loading, and better scalability.</p>
<p>
A detailed comparison of the two models is provided in <a href="isapimrg_302x.htm"><b>ISAPI and CGI</b></a>.</p>
<p>
You can assemble ISAPI extensions into Web applications that provide all of the functionality of an application running on your desktop. You can also create ISAPI filters to customize the functionality of IIS. Filters provide a slightly different processing model than extensions. An extension is activated upon request by a client, whereas a filter is activated by IIS directly when a particular request event occurs. Extensions are request-driven, filters are processing event-driven.</p>
<p>
IIS builds on the concept of a namespace to identify applications. A namespace can be defined as a way of associating a protocol and network service addressing scheme with a human-friendly name. The IIS application architecture extends the concept of a namespace by enabling the creation of applications through a virtual directory structure. </p>
<p>
The namespace provides a way to identify a group of files as belonging together. Scripts and extension dlls within an application boundary form a unit of isolation. A unit of isolation always runs in a single server process. IIS administrators can either run applications in the same server process as IIS, or they can isolate the application by running it in a separate process. The ability to isolate an application is particularly helpful during development and testing. Isolated applications, however, will never perform as well as applications sharing the IIS process. </p>
<p>
The following diagram illustrates the concept of an application boundary.</p>
<p>
<img src="art/isapi2.gif" border=0></p>
<p>
Notice that virtual directories can be nested. Also, notice that you can combine ISAPI dlls and ASP script pages in the same application. </p>
<p>
For more information on combining ISAPI dlls and ASP script in an application, see <i>Deploying Your Component</i> and <i>Application Isolation Issues</i> in <a href="crtcomp_88c0.htm"><b>Creating Components for ASP</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

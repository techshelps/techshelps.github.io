<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HttpFilterProc</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_in_httpfilterproc"></a>HttpFilterProc</h1>
<p>
IIS calls the <b>HttpFilterProc</b> entry point for each event notification which the filter has registered. IIS uses this function to pass information to the ISAPI filter regarding the notification. The filter uses this information to respond to the event. </p>
<pre><code><b>DWORD WINAPI HttpFilterProc(
  PHTTP_FILTER_CONTEXT</b><i> pfc</i><b>,  </b>
<b>  DWORD</b><i> notificationType</i><b>,  </b>
<b>  LPVOID</b><i> pvNotification  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pfc</i></dt>
<dd>
Points to the <a href="isapiref_81rm.htm"><b>HTTP_FILTER_CONTEXT</b></a> structure that contains context information. </dd>
<dt>
<i>notificationType</i></dt>
<dd>
Indicates the type of event being processed. Following are the valid types:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=53%>Value</th>
<th align=left width=47%>Meaning</th>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_AUTHENTICATION</td>
<td width=47%>The server is authenticating the client. This event only occurs during authentication of a net session. For example, if a keep-alive request has been negotiated and the client makes multiple requests on the same socket, this notification will not occur once the initial authentication has been completed. This notification is only for Anonymous and Basic authentication requests. Windows NT® Challenge/Response requests are handled internally by the server.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_END_OF_REQUEST</td>
<td width=47%>Notify the application that the filter is called at the end of every request, thus allowing the filter to clean up resources on a per-request basis. The network connection will remain open when the notification is called. </td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_SECURE_PORT</td>
<td width=47%>Notify the application only for sessions over a secure port.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_NONSECURE_PORT</td>
<td width=47%>Notify the application only for sessions over a nonsecure port.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_READ_RAW_DATA</td>
<td width=47%>Allow the application to see the raw data. The data returned will contain both headers and data. This notification may be called more than one time by a single request. Notifications for multiple requests may be made on the same pfc if the client and server have agreed to a keep-alive request.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_PREPROC_HEADERS</td>
<td width=47%>The server has preprocessed the headers. This notification occurs once per request. The HTTP_FILTER_CONTEXT <b>GetServerVariable</b> may not retrieve client headers until this notification has occurred. </td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_URL_MAP</td>
<td width=47%>The server is mapping a logical URL to a physical path. The server translates the base URL, but it also translates PATH_INFO into PATH_TRANSLATED. In addition, the ISAPI application may translate the URL.<p>
If a filter retrieves the PATH_TRANSLATED or PATH_INFO server variables within the SF_NOTIFY_URL_MAP notification, the filter will be called recursively with the SF_NOTIFY_URL_MAP notification to do the physical translation for the variable. Care should be taken to prevent endless recursion in this specific scenario.</p>
</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_SEND_RAW_DATA</td>
<td width=47%>The server is sending raw data back to the client. This notification may be called more than one time by a single request. Notifications for multiple requests may be made on the same <i>pfc</i> if the client and server have agreed to a keep-alive request.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_LOG</td>
<td width=47%>The server is writing information to the server log. This notification occurs once per response.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_END_OF_NET_SESSION</td>
<td width=47%>The session with the client is ending. If a keep-alive request has been negotiated between the client and the server and multiple requests are sent over the same socket, this notification will only occur after the net session is closed.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_ACCESS_DENIED</td>
<td width=47%>allows an ISAPI Filter to be notified any time the server is about to return a 401 Access Denied error message. This lets the filter analyze the failure and return a custom message.</td>
</tr>
<tr valign=top>
<td width=53%>SF_NOTIFY_SEND_RESPONSE</td>
<td width=47%>This is similar in function to SF_NOTIFY_PREPROC_HEADERS, however it concerns headers that are being sent to the client. A filter can inspect, add, or delete headers the client will receive for a particular request.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pvNotification</i></dt>
<dd>
The notification-specific structure.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Notification Type</th>
<th align=left width=52%><i>pvNotification</i> points to</th>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_READ_RAW_DATA </td>
<td width=52%>HTTP_FILTER_RAW_DATA</td>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_SEND_RAW_DATA</td>
<td width=52%>HTTP_FILTER_RAW_DATA</td>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_PREPROC_HEADERS</td>
<td width=52%>HTTP_FILTER_PREPROC_HEADERS</td>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_AUTHENTICATION</td>
<td width=52%>HTTP_FILTER_AUTHENT</td>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_URL_MAP</td>
<td width=52%>HTTP_FILTER_URL_MAP</td>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_LOG</td>
<td width=52%>HTTP_FILTER_LOG</td>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_ACCESS_DENIED</td>
<td width=52%>HTTP_FILTER_ACCESS_DENIED</td>
</tr>
<tr valign=top>
<td width=48%>SF_NOTIFY_SEND_RESPONSE</td>
<td width=52%>HTTP_FILTER_SEND_RESPONSE</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns one of the following values that indicate how the application handled the event.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=66%>Value</th>
<th align=left width=34%>Meaning</th>
</tr>
<tr valign=top>
<td width=66%>SF_STATUS_REQ_FINISHED</td>
<td width=34%>The filter has handled the HTTP request. The server should disconnect the session.</td>
</tr>
<tr valign=top>
<td width=66%>SF_STATUS_REQ_FINISHED_KEEP_CONN</td>
<td width=34%>This is the same as SF_STATUS_REQ_FINISHED, except that the server should keep the TCP session open if the option was negotiated.</td>
</tr>
<tr valign=top>
<td width=66%>SF_STATUS_REQ_NEXT_NOTIFICATION</td>
<td width=34%>The next filter in the notification chain should be called.</td>
</tr>
<tr valign=top>
<td width=66%>SF_STATUS_REQ_HANDLED_NOTIFICATION</td>
<td width=34%>This filter handled the notification. No other handlers should be called for this particular notification type.</td>
</tr>
<tr valign=top>
<td width=66%>SF_STATUS_REQ_ERROR</td>
<td width=34%>An error occurred. The server should call <b>GetLastError</b> and indicate the error to the client. The HTTP request will generally be aborted when this status is returned. The client should call <b>SetLastError</b> with the nature of the failure.</td>
</tr>
<tr valign=top>
<td width=66%>SF_STATUS_REQ_READ_NEXT</td>
<td width=34%>The filter is an opaque stream filter (encrypted/compressed HTTP requests) and the session parameters are being negotiated. This is valid only for raw-read notification. This notification indicates that the full request has not been received yet and the Web server should issue another read and notify the filter with the additional data read.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
This is where the core work of the ISAPI filters is done. The various structures pointed to by <i>pvNotification</i> contain data and function pointers specific to these operations. See the structure details for more information.</p>
<h4>See Also</h4>
<p>
<a href="isapiref_81rm.htm"><b>HTTP_FILTER_CONTEXT</b></a>, <a href="isapiref_12lu.htm"><b>HTTP_FILTER_RAW_DATA</b></a>, <a href="isapiref_3cs2.htm"><b>HTTP_FILTER_PREPROC_HEADERS</b></a>, <a href="isapiref_2kqa.htm"><b>HTTP_FILTER_AUTHENT</b></a>, <a href="isapiref_30qa.htm"><b>HTTP_FILTER_URL_MAP</b></a>, <a href="isapiref_1otu.htm"><b>HTTP_FILTER_LOG</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

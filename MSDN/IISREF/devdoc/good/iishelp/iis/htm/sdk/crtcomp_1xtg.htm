<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deploying Your Component</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_deploying_your_component"></a>Deploying Your Component</h2>
<p>
Your component's functionality will be exposed in ASP through a script contained in a file with the .asp extension. When you group ASP script files into applications they share access to the built-in <a href="crtcomp_2ujy.htm"><b>Application</b></a> object. Another important aspect of applications is that you can isolate them from each other by running them in a separate memory space from IIS. If you choose to do this, you should review the <a href="crtcomp_19v7.htm"><b>Application Isolation Issues</b></a>.</p>
<p>
The way you define applications has changed in IIS 4.0. In previous versions, you defined an application by creating a virtual directory. In IIS 4.0 you can use the Microsoft Management Console to define an application starting point. The application boundary will extend down the virtual directory structure until it reaches the starting point of another application. The following table illustrates these two approaches to defining applications. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>IIS 3.0 Application Structure</th>
<th align=left width=52%>IIS 4.0 Application Structure</th>
</tr>
<tr valign=top>
<td width=48%>Virtual directory = /Myapp</td>
<td width=52%>Virtual directory = /Myapps/Toplevel</td>
</tr>
<tr valign=top>
<td width=48%>Physical directory = C:\Myapps</td>
<td width=52%>Physical directory = C:\Myapps</td>
</tr>
<tr valign=top>
<td width=48%>Files: C:\Myapps\Global.asa, C:\Myapps\Default.asp</td>
<td width=52%>Virtual directory = /Myapps/Nextlevel</td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>Physical directory = \\Remote1\remoteasps</td>
</tr>
<tr valign=top>
<td width=48%></td>
<td width=52%>Files : C:\Myapps\Global.asa, \\Remote1\remoteasps\default.asp</td>
</tr>
</table><br>
<p>
Notice that in IIS 4.0 you can create multiple levels of virtual directories, which allow your applications to span multiple physical locations.</p>
<p>
In addition to using the Management Console to define applications, you can use ASP scripts to perform these tasks by accessing the<b> <a href="aoiisao_2kfn.htm">IIS Admin Objects</a></b>.</p>
<p>&nbsp;</p></body>
</HTML>

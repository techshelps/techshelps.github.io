<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Component Design Guidelines</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_component_design_guidelines"></a>Component Design Guidelines</h2>
<p>
All of your component design decisions are interrelated. Your component's function will impact what scope script writers will give it, which, in turn, will impact your selection of a threading model. The guidelines below represent two possible ways you can approach making these decisions:
<ul>
<li>
<a href="#_scope_view"><b>Scope</b></a></li>
<li>
<a href="#_threading_view"><b>Threading</b></a></li>
</ul>
<p>
These guidelines are not hard-and-fast rules, but are design recommendations to help you develop high-performance components faster.</p>

<h3><a name="_scope_view"></a>Scope view</h3>
<p>
You should give the majority of your components page-level scope. Most components that you develop around a set of business rules (business objects) should be given page scope. If the components are going to participate in transactions, they should be registered with the Microsoft® Transaction Server (MTS) explorer. Any components that you give page-level scope to should support either the Apartment or Both threading model.</p>
<p>
You should consider using session scope if you want a component to manage an aspect of an ASP application that spans multiple scripts, but relates to a particular user. For example, if you know the application design requires multiple ASP scripts to access a database, you should create a single database access component and give it session scope. The database access component retrieves the required record set, and shares the data between all scripts in the session.</p>
<p>
Be very cautious about giving a component application scope. Some general utility components, such as a counter component, could require application scope, but there are very few situations where a component will require application scope. You should store the data required by the component at the application level and give it session or page scope. Components with application scope should be developed with the Both threading model and should aggregate the FreeThreadedMarshaler. You should not give application scope to transactional components (those registered with MTS explorer).</p>

<h3><a name="_threading_view"></a>Threading view</h3>
<p>
Although it is possible for you to use any of the four threading models, it is recommended that you develop your components with either the Apartment or Both model. There are serious performance limitations with the Single and Free models. For a detailed explanation see the following:  </p>
<p>
<a href="crtcomp_5sx0.htm"><b>Single Threaded</b></a> </p>
<p>
and </p>
<p>
<a href="crtcomp_1o2s.htm"><b>Free Threaded</b></a> </p>
<p>
You can use the Both threading model for all types of ASP components. All Both threaded components should use the COM Library function CoCreateFreeThreadedMarshaler to create a free threaded marshaler object. If you aggregate the free threaded marshaler object, you can make calls between threads without any marshaling or thread switches. For more information on free threaded marshaler objects, see <i>In-process Server Threading Issues</i> and <i>CoCreateFreeThreadedMarshaler</i> in the COM section of the Platform SDK.</p>
<p>
The only disadvantage of building components using the Both model is that it does not allow for serialization of calls to the component. This means that your component will need to guarantee thread safety. Building in thread safety may slow down your development time, but will allow your component to be more suitable for use in session or application scope. </p>
<p>
You can use the Apartment model for components with page or session scope. However, when you create Apartment model components in a session, the session is locked down to a single thread. This slows access time. </p>
<p>
You should not use the Apartment threading model for components that you plan to give application scope. Creating an instance of an Apartment model object with <b>Server.CreateObject</b> will generate an error. For example, if in the following script <code>MyObj</code> was an apartment-threaded object, the script would generate an error.</p>
<pre><code>MyObj = Server.CreateObject("MyObj")
Set Application("Myapp") = MyObj
 </code></pre>
<p>
If you place an Apartment-threaded component in an application with the &lt;OBJECT&gt; tag, it will not generate an error. However, it will cause access to be slow. In addition, if you develop a component with the Apartment model and give it application scope, it will run in the System security context, rather than the context of the current user, thereby making it unacceptable for scenarios which rely on Windows&nbsp;NT® security.</p>
<p>&nbsp;</p></body>
</HTML>

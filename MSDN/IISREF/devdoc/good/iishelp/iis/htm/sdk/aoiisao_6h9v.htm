<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the IIS Admin Objects</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_k2_using_the_iis_admin_objects"></a>Using the IIS Admin Objects</h2>
<p>
You can use the IIS Admin Objects to configure your IIS installation, creating new FTP and Web servers, virtual directories, and other IIS elements, and also changing settings that affect IIS operation. Your IIS configuration information is stored as values in the metabase, called metabase properties, and you use the IIS Admin Objects to change these configuration values. Individual IIS Admin Objects correspond to specific types of keys in the metabase. With simple ASP scripts, you can use the IIS Admin Objects to create powerful and flexible custom administration applications for remote administration of your IIS installation. The remote Internet Service Manager (HTML) for IIS was developed using the IIS Admin Objects with VBScript and JScript™. The source code files for this program are located in \system32\inetsev\iisadmin in your system directory. </p>
<p>
The IIS Admin Objects expose a hierarchical namespace of objects where each object has an <b>ADsPath</b>, similar to a Uniform Resource Locator (URL), that is prefixed with IIS:// followed by the name of the computer on which IIS is running, followed by the path of the object in the metabase. For example, IIS://MyComputer/W3SVC refers to the <b>IIsWebService </b>object for the machine named MyComputer. The object associated with the machine on which IIS is running is the <b>IIsComputer</b> object, and contains all of the other IIS Admin Objects directly or indirectly. To get a reference to a named object, you use the <b>GetObject</b> function in Visual Basic®, VBScript or other scripting languages. For example, you can retrieve the current value of <b>MaxBandwidth</b> for the computer named <code>MyComputer</code> with the following VBScript in an .asp file. You can use LocalHost instead of <code>MyComputer</code> to access the computer on which IIS is running. </p>
<pre><code>&lt;% 
Dim ComputerObj 
Dim MaxBW 
Set ComputerObj = GetObject("IIS://MyComputer") 
MaxBW = ComputerObj.Get("MaxBandwidth") 
' You could also use MaxBW = ComputerObj.MaxBandwidth 
%&gt; 
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;ASP scripts that access the metabase require administrator privileges on the machine on which IIS is running. When you execute these scripts from a remote machine, you must connect through a secure connection, such as the Windows NT Challenge/Response authentication method. It is suggested that you create a server or directory for your administrative .asp files and set the directory security authentication method to Windows NT Challenge/Response for the server or directory. </p>
<p>
<b>Note</b>&nbsp;&nbsp;For security purposes, out-of-process applications cannot access the metabase. It is recommended that you retain this default behavior unless special circumstances require otherwise. There are two ways you can modify this behavior, but each introduces some security risk. One approach is to give the IWAM_<i>machinename</i> account access to the metabase, which will allow access to the metabase for all out-process-applications created with this default identity. Another approach is to change the identity of the specific out-of-process-package to some other account identity and give that account access to the metabase. This introduces some risk but less than that introduced by giving metabase access to the IWAM_<i>machinename</i> account. </p>
<p>
The topics in this section explain how to use the ADSI methods for the IIS Admin Objects, and provide a sample program using these methods. 
<ul>
<li>
<a href="aoiisao_57hv.htm"><b>ADSI Object Properties</b></a> describes the ADSI-specified properties of the IIS Admin Objects.</li>
<li>
<a href="aoiisao_0ewj.htm"><b>ADSI Object Methods</b></a> describes the ADSI-specified methods used by Automation languages such as VBScript.</li>
<li>
<a href="aoiisao_65yr.htm"><b>ADSI Container Object Properties</b></a> describes the ADSI-specified properties of those IIS Admin Objects that are also container objects.</li>
<li>
<a href="aoiisao_7qpf.htm"><b>ADSI Container Object Methods</b></a> describes the ADSI-specified methods of those IIS Admin Objects that are also container objects.</li>
<li>
<a href="aoiisao_4z8z.htm"><b>Common Object Methods</b></a> describes those methods, other than ADSI methods, that can be used by any of the IIS Admin Objects.</li>
<li>
The <a href="aoiisao_09bh.htm"><b>Sample Program</b></a> uses ADSI container features and ADSI properties and methods in an ASP script to display the structure of your IIS namespace. </li>
</ul>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Establishing a Debugging Environment</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_k2_establishing_a_debugging_environment"></a>Establishing a Debugging Environment</h2>
<p>
There are several ways to establish an environment for debugging your server components and ISAPI extensions. If you are using a debugging tool capable of attaching to a Windows NT process, you can use this functionality to debug your component or extension. For example, if you are debugging an ISAPI extension with Microsoft Visual Studio™ you should take the following steps.
<ol>
<li>
Start the iisadmin process. This can be done from the command line with the command <b>net start iisadmin</b>. You can also use the Services dialog box from the Control Panel to start the IIS Admin Service, which will start iisadmin.</li>
<li>
Launch Visual Studio and select the Attach to Process command from the Start Debug sub-menu of the Build menu.</li>
<li>
Click the Show System Process check box.</li>
<li>
Select the inetinfo process from the list and click OK.</li>
<li>
Start the w3svc service. This can be done from the command line with the command <b>net start w3svc</b>. You may also use the Services dialog box in the Control Panel to start the World Wide Web Publishing Service.</li>
</ol>
<p>
If the debugging tool you are using is not capable of attaching to a Windows NT process, you should take the following steps to establish an appropriate debugging environment.
<ol>
<li>
Open the Services dialog box in the Control Panel.</li>
<li>
Select the IIS Admin service and click the Startup button.</li>
<li>
Select the Allow Service to Interact with Desktop check box and click OK.</li>
<li>
Repeat steps 2 and 3 for all processes that run under the IIS Admin process, for example World Wide Web Publishing Service, and FTP Publishing Service.</li>
<li>
Use the Registry Editor (REGEDIT) to add a subkey named <b>Inetinfo.Exe</b> to the HKEY_LOCAL_MACHINE/Software/Microsoft/WindowsNT/CurrentVersion/Image File Execution Options key.</li>
<li>
Add the following entry to this new key:<br>
Debugger = &lt;DebuggerExeName&gt; where DebuggerExeName is the full path to the debugger you are using.</li>
</ol>
<p>
When the World Wide Web Publishing Service is started, your debugger will also be launched. You can now set appropriate break points in your ISAPI extension.</p>
<p>
You won't be able to set breakpoints in a component's source code until the component has been loaded into memory. First, you will need to start Internet Explorer and view the .ASP page containing the object. As soon as the page is loaded, you should be able to set breakpoints in your component. Select Refresh to view the page again, and trigger the breakpoints you selected. If the component cannot be loaded even once (for instance, if the fault occurs in component startup code) you will need to load the component DLL prior to starting the debugging session. (See step 11 below.)</p>
<p>
In some cases, you may not be able to use either of the two procedures outlined above. If you have difficulty using either of these strategies, there is a third approach, which has been described in previous releases of IIS. This third approach requires the establishing of NT security privileges as well as making changes to the registry. It will also disable your ability to run IIS as a service. This approach should only be attempted if the previous two strategies have failed.
<ol>
<li>
Use the User Manager for Domains administration tool (USRMGR) to add the <b>Log on as Service</b>, <b>Act as part of the operating system</b> and <b>Generate security audits</b> rights on the local computer to the NT account you will use when debugging the ISAPI extension.</li>
<li>
Use the Distributed COM Configuration utility (DCOMCNFG) to change the identity of the IIS Admin Service to the user account you will use for debugging.</li>
<li>
Use the Registry Editor (REGEDIT) to remove the LocalService keyword from all IISADMIN-related subkeys under HKEY_CLASSES_ROOT/AppID. This keyword may be found in the following subkeys: <br>
{61738644-F196-11D0-9953-00C04FD919C1} // IIS WAMREG admin Service<br>
{9F0BD3A0-EC01-11D0-A6A0-00A0C922E752} // IIS Admin Crypto Extension<br>
{A9E69610-B80D-11D0-B9B9-00A0C922E750} // IISADMIN Service<br>
The LocalService keyword may be found in additional subkeys of AppID.</li>
<li>
Add LocalServer32 subkeys to all IISADMIN related subkeys under the CLSID node of the registry. This will include subkeys corresponding to all of the subkeys you removed in the previous step. Set the default value of these new keys to &lt;path&gt;\inetinfo.exe -e w3svc. (&lt;path&gt; is normally "c:\winnt\system32\inetsrv".)</li>
<li>
Stop the WWW and FTP services from the Microsoft Management Console, or from the Services dialog box in the Control Panel.</li>
<li>
Start Visual Studio and select the Debug tab in Project Settings window.</li>
<li>
Enter C:\WINNT\System32\Inetsrv\inetinfo.exe in the <b>Executable for debug session</b> field.</li>
<li>
Enter "-e w3svc" in the <b>Program Arguments</b> field.</li>
<li>
Select the Link tab in the Visual Studio Project Settings Window.</li>
<li>
Enter the name and path of the ISAPI extension you are debugging in the <b>Output file name</b> field.</li>
<li>
Optionally, add your component DLL to the list of <b>Additional DLLs</b> that are loaded before the application starts. This will allow you to set breakpoints in component startup code. </li>
<li>
Click the <b>Go</b> button to start the debugging session.</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;After you have completed the debugging session, you must reverse steps five through one to restore the previous settings and allow IIS to be run as a service.</p>
<p>&nbsp;</p></body>
</HTML>

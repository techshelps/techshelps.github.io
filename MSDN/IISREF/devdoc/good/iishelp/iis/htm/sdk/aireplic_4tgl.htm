<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Replication Extension Interface</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_k2_using_the_replication_extension_interface"></a>Using the Replication Extension Interface</h2>
<p>
Your DCOM replication extension interface must be developed as detailed in the <a href="aireplic_5orp.htm"><b>IMSAdminReplication Interface Reference</b></a> section and registered with IIS as specified in <a href="axextif_91yd.htm"><b>Custom Extensions Interface</b></a>. Your interface must be installed on all source and target computers. </p>
<p>
Iissync.exe replicates the metabase and calls system-installed extensions to replicate Web application definitions and MTS application package definitions, adjusting the registry on the target computer as necessary. Iissync.exe also calls your custom replication interface, enabling you to perform additional replication tasks. Your custom replication interface methods are <b>IMSAdminReplication::GetSignature,</b> <b>IMSAdminReplication::Serialize,</b> <b>IMSAdminReplication::DeSerialize,</b> <b>IMSAdminReplication::Propagate,</b> and <b>IMSAdminReplication::Propagate2</b>. Iissync.exe calls all of these methods, if necessary, except <b>Propagate2</b>, before replicating the metabase. It calls your <b>Propagate2</b> method after replicating the metabase. </p>
<p>
When replicating to multiple target computers, iissync.exe processes each target computer independent of the others. This means that different target computers may be in different steps of the replication process at the same time. The process will be discussed in two scenarios: Scenario A, when you replicate from one source computer to one target computer; and Scenario B, when you replicate from one source computer to multiple target computers.</p>
<p>
<b>Scenario A:</b> 
<ul>
<li>
Iissync.exe calls <b>GetSignature</b> on the source and target computers. Both computers calculate and return custom signatures that represent the state of the configuration data and other data that is to be synchronized. </li>
<li>
Iissync.exe compares the two signatures. If they are the same, iissync.exe replicates the metabase and then calls <b>Propagate2</b> on the source computer, identifying the target computer and providing a flag that indicates that the signatures were the same. Your program on the source computer can then perform any termination tasks you require. </li>
<li>
If the two signatures are not the same, iissync.exe calls <b>Serialize</b> on the source computer. Your program returns data to iissync.exe for presentation to the target computer with a call to <b>DeSerialize</b>. Data stored in a secure manner may be transferred with these methods. </li>
<li>
If the two signatures are not the same, iissync also calls <b>Propagate</b> on the source computer, identifying the target computer and providing a flag indicating that the signatures were different. Your program on the source computer can then transfer data directly to the target computer. For example, you might use <b>xcopy,</b> or some other network copy utility, to copy data files to the target computer from the source computer or from another computer on the network. <b>Serialize</b> and <b>Propagate</b> are called on the source computer before <b>DeSerialize</b> is called on the target computer. <b>Deserialize</b> will not be called on the target computer if either the <b>Serialize</b> or <b>Propagate</b> method returns an error that causes replication to be terminated. </li>
<li>
Iissync.exe then calls <b>Propagate2</b> on the source computer, identifying the target computer and providing a flag that indicates the signatures were not the same. Your program on the source computer can then perform any termination tasks you require associated with this target computer. </li>
</ul>
<p>
<b>Scenario B:</b> 
<ul>
<li>
The process operates exactly the same for each target computer as described in Scenario A. </li>
<li>
Iissync.exe calls the source computer's <b>GetSignature</b> method only once. The returned signature is compared against each target computer's signature. </li>
<li>
If any target computer's signature differs from the source computer, iissync.exe calls the source computer's <b>Serialize</b> method once. Your program returns data to iissync.exe for presentation to all target computers that have different signatures. Iissync.exe also calls the <b>Propagate</b> method on the source computer once for each target computer with a signature mismatch. The data returned from the source computer's <b>Serialize</b> method is presented through the <b>DeSerialize</b> method to those target computers that have different signatures. <b>DeSerialize</b> will not be called on the target computer if either the <b>Serialize</b> or <b>Propagate</b> method returns an error that causes replication to be terminated. </li>
<li>
After iissync replicates the metabase to a target computer, it calls the <b>Propagate2</b> method on the source computer, identifying the target computer and providing a flag that indicates whether or not this target computer's signature matches the source computer's signature. Iissync.exe calls the source computer's <b>Propagate2</b> method once for each target computer, regardless of whether the target computer's signature matches the source computer's signature. <b>Propagate2</b> will not be called on the source computer for any target computer for which the replication process has been terminated by an error. </li>
<li>
The source computer's <b>Propagate</b> and <b>Propagate2</b> methods may be called multiple times in no predictable sequence, except that <b>Propagate2</b> is called when the replication process is complete for the identified target computer. </li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;Replication to multiple target computers is not sequenced. You should not make any assumptions when designing your program in regards to the order in which target computers are selected for replication. Your <b>GetSignature</b> method is called first. On the source computer, calls to other methods may be received multiple times in any order. </p>
<h4>Replication Process Flow</h4>
<p>
<img src="art/aireplic.gif" border=0> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Free-Threaded</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_free_threaded"></a>Free-Threaded</h3>
<p>
Building Free-threaded components is not recommended; if possible, you should use the Both model instead. One disadvantage of Free-threaded components is that you must register them with the MTS explorer in order to access the <b>ObjectContext</b> object, whereas all Both- or Apartment-threaded components can access <b>ObjectContext</b>. This means that Free-threaded components that you have not registered with MTS explorer can only access the ASP built-in objects through the <b>ScriptingContext </b>object. This method of accessing the built-in objects is considered less suitable for ASP components than using <b>ObjectContext</b>. For more information, see <a href="crtcomp_75kj.htm"><b>accessing the ASP built-in objects</b></a>.  </p>
<p>
The final problem with Free-threaded components is that, like Single-threaded components, they run in the SYSTEM context, rather than the context of the logged on user. As a result, the Free-threaded model is not acceptable for scenarios which will rely on Windows&nbsp;NT® security to control access to objects.</p>
<p>&nbsp;</p></body>
</HTML>

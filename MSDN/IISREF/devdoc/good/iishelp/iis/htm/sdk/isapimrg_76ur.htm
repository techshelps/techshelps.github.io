<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Important Notes for Extension Developers</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_in_important_notes_for_extension_developers"></a>Important Notes for Extension Developers</h2>
<p>
Because the ISAPI extension DLL is loaded in the same process as the HTTP server, access violations by ISAPI extensions can crash some HTTP servers. Therefore, you should thoroughly test all ISAPI extensions to ensure integrity. This is important; if your ISAPI extension malfunctions, it can corrupt the server's memory space, or cause memory or resource leaks. </p>
<p>
With IIS 4.0 you can make sure that such suspect ISAPI DLLs run in the namespace marked as <b>Run in separate memory space</b>. This will ensure that IIS will use the process isolation technique to execute the ISAPI DLL in a different process than the IIS process. IIS also does detection and recovery for such exterior processes dedicated for hosting ISAPI DLLs.</p>
<p>
To avoid this problem, many HTTP servers wrap the entry points for your ISAPI extensions in a try/except clause so access violations or other exceptions will not directly affect the server. For more information on the try/except clause, refer to the Win32® API documentation.</p>
<p>
The main entry point in the ISAPI extensions, <a href="appref_2n8j.htm"><b>HttpExtensionProc</b></a>, takes only one input parameter: a pointer to the structure type EXTENSION_CONTROL_BLOCK. You are not expected to change any member except lpszLogData in the ECB structure.</p>
<p>
However, you are encouraged to initialize your DLL automatically by defining an entry point function for the DLL (for example, <b>DllMain</b>). The operating system calls this entry point function by default the first time a <b>LoadLibrary</b> call or the last time a <b>FreeLibrary</b> call is made for that DLL, or when a new thread is created or destroyed in the process.</p>
<p>
You are also encouraged to maintain statistical information, or any information pertaining to the DLL, within the DLL itself. By creating the appropriate forms, you can measure the usage and performance of a DLL remotely. Also, you can integrate this information with the system performance counters so that you can integrate it with <b>PerfMon</b>. You can also use the <b>lpszLogData</b> member of the ECB to record data with the server log.</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Basic Extension Framework</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_in_basic_extension_framework"></a>Basic Extension Framework</h2>
<p>
You can develop ISAPI extensions with any tool capable of building a 32-bit DLL. Microsoft® Visual C++® 5.0 includes the ISAPI Extension Wizard, a tool you can use to quickly establish the basic framework for an ISAPI extension. Most of the code shown in this topic is automatically generated by the ISAPI Extension Wizard.</p>
<p>
ISAPI extensions can be thought of as having sections that correspond to the three basic functions: 
<ul>
<li>
<a href="#_in_initialization"><b>Initialization</b></a> </li>
<li>
<a href="#_in_processing"><b>Processing</b></a> </li>
<li>
<a href="#_in_termination"><b>Termination</b></a> </li>
</ul>

<h3><a name="_in_initialization"></a>Initialization</h3>
<p>
Initialization takes place through the entry point function <a href="appref_504l.htm"><b>GetServerVariable</b></a>. In the C++ environment, you define entry point functions through a .def file. For example, the following code sample would be used to specify the entry point functions in a .def file for an extension called <code>MyExtension</code>.</p>
<pre><code>; MyExtension.def : declares the module parameters for the DLL.
 
LIBRARY         "MyExtension"
 
EXPORTS
    HttpExtensionProc
    GetExtensionVersion
    TerminateExtension
 </code></pre>
<p>
The purpose of <code>GetExtensionVersion</code> is to establish the version of ISAPI that was used to build the DLL. The following code accomplishes this task.</p>
<pre><code>BOOL WINAPI 
GetExtensionVersion(
    HSE_VERSION_INFO* pVer
    )
{
        pVer-&gt;dwExtensionersion = 
        MAKELONG(HSE_VERSION_MINOR, HSE_VERSION_MAJOR);
        strcpy(pVer-&gt;lpszExtensionDesc, "My ISAPI Extension");
 
return (TRUE);
}
 </code></pre>

<h3><a name="_in_processing"></a>Processing</h3>
<p>
You can expose your extension's functionality through the <a href="appref_2n8j.htm"><b>HTTPExtensionProc</b></a> entry point function. This function receives an <a href="appref_3z1n.htm"><b>EXTENSION_CONTROL_BLOCK</b></a> (ECB) structure that contains data used for  required processing. Also, your extension communicates with IIS through the ECB.</p>
<p>
You can obtain the ECB through the <a href="appref_2n8j.htm"><b>HttpExtensionProc</b></a> function. </p>
<p>
When you use <b>HttpExtensionProc</b>, it first <a href="isapimrg_27ua.htm"><b>sends a header</b></a> to the client, which provides the client with information, such as the content type that will be returned. After you send the header, you can perform any other processing through the various callback functions provided in the ECB. </p>
<p>
Further details on processing can be found in the <a href="isapimrg_50ft.htm"><b>Reading and Writing Asynchronously</b></a> topic.</p>

<h3><a name="_in_termination"></a>Termination</h3>
<p>
IIS removes an extension from memory when it is no longer needed. If the extension provides the optional <a href="appref_64oe.htm"><b>TerminateExtension</b></a> entry point function, IIS will call the function before removing the extension. You can use <b>TerminateExtension</b> to close down any threads that your extension has initialized during processing. </p>
<p>&nbsp;</p></body>
</HTML>

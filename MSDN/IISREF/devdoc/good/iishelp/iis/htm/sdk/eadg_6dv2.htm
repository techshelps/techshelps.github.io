<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The New System Design</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_k2_the_new_system_design"></a>The New System Design</h2>
<p>
Today's client/server applications resemble their ancestors so little, in fact, that they have been given a new name, the<i> multi-tier application</i>, also known as <i>n-tier</i> architecture. In this model, the division between client and server isn't as easily discernible, and often the server becomes a client itself. Not surprisingly, the new system model attempts to distribute computing tasks more evenly between the client and server. Viewed from a purely functional standpoint, most systems will perform the following three main tasks: </p>
<pre><code>Presentation - Business Logic </code>–<code> Data Services 
 </code></pre>
<ul>
<li>
The presentation layer comprises the entire user experience. Not only does this layer allow the users to interact with the application, input data, and view the results of requests, it manages the manipulation and formatting of data once it arrives at the client. On the Web, the browser application performs the tasks of the presentation layer. </li>
</ul>
<p>
Data services are provided by a structured (SQL, Oracle database) or unstructured store (Microsoft® Exchange, Microsoft® Message Queue), which manages and provides access to the application data. A single application may enlist the services of one or more data stores.</p>
<p>
Between these two layers lies the murky domain of the distributed application developer. Business logic, which are the rules that govern application processing, connect the user at one end with the data at the other. The functions that these rules govern closely mimic everyday business tasks, and can be a single task, or a series of tasks. </p>
<p>
The three-tier architecture isolates each major piece of functionality. The presentation is independent of the processing rules and business logic, which in turn is separate from the data. This model requires much more analysis and design up front, but greatly reduces maintenance costs and increases functional flexibility in the long run. </p>
<p>&nbsp;</p></body>
</HTML>

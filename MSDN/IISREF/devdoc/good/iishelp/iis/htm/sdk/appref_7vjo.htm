<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WriteClient</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_in_writeclient"></a>WriteClient</h1>
<p>
The <b>WriteClient</b> function is a callback function that is supplied in the <a href="appref_3z1n.htm"><b>ECB</b></a> (EXTENSION_CONTROL_BLOCK) for a request sent to the ISAPI extension. It sends the data present in the given buffer to the client that made the request.</p>
<pre><code><b>BOOL WriteClient(
  HCONN</b><i> ConnID</i><b>,        </b>
<b>  LPVOID</b><i> Buffer</i><b>,       </b>
<b>  LPDWORD</b><i> lpdwBytes</i><b>,</b>   
<b>  DWORD</b><i> dwReserved</i>     
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ConnID</i></dt>
<dd>
Specifies the logical connection identifier of the client to which the response data should be sent.</dd>
<dt>
<i>Buffer</i></dt>
<dd>
Points to the data to be sent.</dd>
<dt>
<i>lpdwSizeofBuffer</i></dt>
<dd>
Points to a DWORD that contains the number of bytes from the buffer that will be written to the client when the call is made. The DWORD also contains the number of bytes successfully sent out for synchronous write operations. For asynchronous write operations the returned value has no meaning.</dd>
<dt>
<i>dwReserved</i></dt>
<dd>
Specifies a DWORD that contains flags which indicates how the I/O operation should be handled. Can be either of the following values.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>HSE_IO_SYNC </td>
<td width=52%>Indicates that the I/O operation should be done synchronously</td>
</tr>
<tr valign=top>
<td width=48%>HSE_IO_ASYNC </td>
<td width=52%>Indicates that the I/O operation should be done asynchronously. The ISAPI extension should have made a call to <b>ServerSupportFunction</b>( HSE_REQ_IO_COMPLETION) and submitted a callback function and context value for handling completion of asynchronous operations.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If an error occurs, the return value is FALSE. The Win32® <b>GetLastError</b> function can be called to determine the cause of the error.</p>
<h4>Remarks</h4>
<p>
This function attempts to write the data in the supplied buffer to the socket in which the client request came in. For synchronous writes, it attempts to write in the calling thread. The thread may become blocked while trying to send the data to client. On completion, <b>WriteClient</b> returns the number of bytes sent in *<i>lpdwBytes</i>.</p>
<p>
For asynchronous writes, <b>WriteClient</b> submits the write operation to the system asynchronously and returns from the call immediately. At this point the ISAPI extension may choose to do more background processing or return from the <b>HttpExtensionProc</b> function with a HSE_STATUS_PENDING. When the I/O operation completes, the server calls the callback function submitted by ISA with the ECB, context value, number of bytes sent and error codes, if any. It is the responsibility of ISA to do further processing and finally use <b>ServerSupportFunction </b>with HSE_DONE_WITH_SESSION set to notify the server when it is done processing the request.</p>
<p>
Only one outstanding asynchronous I/O operation is permitted per request. This includes an asynchronous <a href="#_in_writeclient"><b>WriteClient</b></a>, an asynchronous <b>TransmitFile</b>, or a <a href="appref_4gtq.htm"><b>ServerSupportFunction</b></a> call with the HSE_REQ_SEND_URL value set.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending a Header</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_in_sending_a_header"></a>Sending a Header</h2>
<p>
Before your extension delivers any output, it must send the client an HTTP response header. This header must be in the correct format or the client will not be able to use it. Among other things, the response header specifies the type of content that you are returning to the client and whether or not the connection should be kept active after the request has been serviced. </p>
<p>
To send a response header you should call the ServerSupportFunction (HSE_REQ_SEND_RESPONSE_HEADER_EX). (Note that HSE_REQ_SEND_RESPONSE_HEADER_EX is an upgrade from the HSE_REQ_SEND_RESPONSE_HEADER function.)This function uses the <a href="appref_1hm7.htm"><b>HSE_SEND_HEADER_EX_INFO</b></a> structure to specify the header information. The processing steps you should build into your extension in order to send a response header are:
<ul>
<li>
populate the HSE_SEND_HEADER_EX_INFO structure with the required data</li>
<li>
call ServerSupportFunction and specify HSE_REQ_SEND_RESPONSE_HEADER_EX as the value for the dwHSERequest parameter</li>
<li>
handle any error conditions.</li>
</ul>
<p>
The following example demonstrates using the ServerSupportFunction (HSE_REQ_SEND_RESPONSE_HEADER_EX) to send a response header.</p>
<pre><code>*/
GetExtensionVersion

IIS calls this entry point to load the ISAPI DLL.

Returns:
    TRUE on success

Side effects:
    None.
*/
BOOL WINAPI
GetExtensionVersion(
    HSE_VERSION_INFO *pVer
)
{
    pVer-&gt;dwExtensionVersion =
        MAKELONG( HSE_VERSION_MINOR, HSE_VERSION_MAJOR );

    lstrcpyn(
        pVer-&gt;lpszExtensionDesc
        , "ISAPI SendHeaderEx sample"
        , HSE_MAX_EXT_DLL_NAME_LEN
    );

    return TRUE;
}



/*---------------------------------------------------------------------*
HttpExtensionProc

IIS calls this entry point to process a browser request.

Returns:
    TRUE on success

Side effects:
    None.
*/
DWORD WINAPI
HttpExtensionProc(
    EXTENSION_CONTROL_BLOCK *pECB
)
{

    HSE_SEND_HEADER_EX_INFO    SendHeaderExInfo;

    DWORD cchStatus;
    DWORD cchHeader;
    DWORD cchContent;

    //
    //  NOTE we must send Content-Length header with correct byte count
    //  in order for keep-alive to work.
    //

    char szStatus[]     = "200 OK";
    char szContent[]    =   "&lt;html&gt;"
                            "&lt;br&gt; Usage:"
                            "&lt;br&gt; To keep connection alive: http://localhost/vdir/SendHdrX.dll?Keep-Alive"
                            "&lt;br&gt; To close connection: http://localhost/vdir/SendHdrX.dll"
                            "&lt;/html&gt;";
    char szHeaderBase[] = "Content-Length: %lu\r\nContent-type: text/html\r\n\r\n";
    char szHeader[4096];

    cchStatus = lstrlen(szStatus);
    cchHeader = lstrlen(szHeader);
    cchContent = lstrlen(szContent);
    
    //
    //  fill in byte count in Content-Length header
    //

    sprintf( szHeader, szHeaderBase, cchContent );

    //
    //  Populate SendHeaderExInfo struct
    //

    SendHeaderExInfo.pszStatus = szStatus;
    SendHeaderExInfo.pszHeader = szHeader;
    SendHeaderExInfo.cchStatus = cchStatus;
    SendHeaderExInfo.cchHeader = cchHeader;
    SendHeaderExInfo.fKeepConn = FALSE;

    if ( 0 == lstrcmpi( pECB-&gt;lpszQueryString , "Keep-Alive" ) ) {

        SendHeaderExInfo.fKeepConn = TRUE;
    }

    //
    //  Send header
    //

    if ( !pECB-&gt;ServerSupportFunction(
                pECB-&gt;ConnID
                , HSE_REQ_SEND_RESPONSE_HEADER_EX
                , &amp;SendHeaderExInfo
                , NULL
                , NULL
            ) ) {

        return HSE_STATUS_ERROR;
}
</code></pre>
<p>
For a complete working sample of an extension that sends a response header to the client, see <a href="nonssamp_8jzn.htm"><b>Developer Samples</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

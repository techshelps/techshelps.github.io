<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Logging Interface</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_in_logging_interface"></a>Logging Interface</h1>
<p>
The Microsoft® Internet Information Server (IIS) logging interface provides you with a flexible method for generating server activity logs without interfering with other server processes. Using this architecture, you can move most of the maintenance of event logs from virtual servers to logging modules. A logging module is a COM component that exposes methods to IIS. When a log event occurs, IIS calls the appropriate log module's <b>LogInformation</b> method and provides it with a pointer to an <b>IInetLoginformation</b> interface. The logging module then uses the interface to record the log information. IIS determines which <b>IINetLogInformation</b> methods to expose to the logging module as specified by the MD_LOGEXT_FIELD_MASK identifier in the metabase. </p>
<p>
IIS contains four built-in logging modules; you can also create custom logging modules to meet your own needs. To do this, you should create a COM object that exposes the methods specified in <a href="logovrvw_7wkl.htm"><b>ILogPlugin</b> <b>Interface</b></a>. </p>
<p>
The logging architecture is new with this version of IIS. Previously, you could create custom logging capabilities through ISAPI filters that registered interest in particular server events. The new architecture makes use of COM to facilitate the development of customized logging. In this architecture, logging modules are added by registering a COM object that supports the methods required by IIS. The registered object can then be established as the logging module for a virtual directory by setting the MS_LOG_PLUGIN_ORDER property with a script, or by selecting the module through the administrative user interface. </p>
<p>
If you create a custom logging module, you should also provide a logging user interface module so that administrators can configure your logging module. The built-in logging modules come with user interface modules that expose general logging properties, such as log file period and location. Your user interface module, however, is not restricted to performing just these tasks. </p>
<p>
The new logging architecture relies on three interfaces that are defined in the ilogobj.h file. The <b>IINetLogInformation</b> and <b>ILogPlugin</b> interfaces expose methods that are used to log server transactions, while the <b>ILogUIPlugin</b> interface is implemented by the user interface module for the logging module. All three interfaces inherit the <b>IUnknown</b> interface. </p>
<p>
<b>ILogPlugin</b> interface also provides methods that IIS uses to manage a logging module. IIS calls these methods to initialize, shut down, and configure the logging module.</p>
<p>&nbsp;</p></body>
</HTML>

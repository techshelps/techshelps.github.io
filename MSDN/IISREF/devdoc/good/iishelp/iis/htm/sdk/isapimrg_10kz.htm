<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extension Security Issues</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_in_extension_security_issues"></a>Extension Security Issues</h2>
<p>
Security for ISAPI extensions is derived from the Microsoft® Windows&nbsp;NT® security model. If your extension accesses secured system resources, it must obtain the appropriate Windows&nbsp;NT permissions. Several inter-related issues determine how you accomplish this programming task. This topic provides an overview of these security issues and outlines the processing steps required to access secured resources.</p>
<p>
The topic is divided into the following sub-sections:</p>
<p>
<a href="#_in_security_identities"><b>Security Identities</b></a></p>
<p>
<a href="#_in_process_execution"><b>Process Execution</b></a></p>

<h3><a name="_in_security_identities"></a>Security Identities</h3>
<p>
Every Microsoft® Windows NT® process has a unique process identity which is used by the Windows NT object manager for various management tasks. Each process object contains an associated access token, which indicates the type of access rights the process has for secured resources. ISAPI extensions either run in the inetinfo process or in an isolated process. The process identity for applications running in the intetinfo process is SYSTEM. The process identity for isolated applications is IWAM_&lt;machinename&gt;. </p>
<p>
A very simple ISAPI extension will be able to respond to the request and immediately return the required information. More complex extensions, however, will rely on worker threads to accomplish their processing. By default, worker threads have the same identity as the process in which they are running. If your ISAPI accesses secured resources, it will need to pass the security context of the logged-on user to a thread. The security context is passed to the thread by obtaining an impersonation token from the process. The detailed steps for obtaining an impersonation token are described in the Process Execution section.</p>

<h3><a name="_in_process_execution"></a>Process Execution</h3>
<p>
ISAPI extensions can be divided into two broad categories, pending and non-pending. A pending extension returns the value HSE_STATUS_PENDING from the initial call to <a href="appref_2n8j.htm"><b>HttpExtensionProc</b></a>. The process of obtaining a security token for a thread is slightly different for these two categories. The process for the non-pending case is illustrated in the following diagram.</p>
<p>
<img src="art/thrdfin1.gif" border=0></p>
<p>
When IIS processes a request, it verifies that the client has permission to access any requested resources.(Step 1) IIS supports four different authentication schemes for performing this check: anonymous, basic, Windows NT Challenge/Response, and Client Certificates. Regardless of which authentication scheme is used, once the client has been authenticated, the request has an established security context. If the authentication scheme used is anonymous, the security context will be set to IUSR_machinename. If either Basic or NTLM authentication has been used, the security context will be set to the account the user logged in with on the client machine.</p>
<p>
After IIS has authenticated the user, it calls SetThreadToken on the current Input/Output thread so that the thread is running as the authenticated user. (Step 2). Because the non-pending ISAPI extensions is called with the security context of the authenticated user, it can access the same secured resources as the authenticated user.</p>
<p>
In the case of the pending extension, the process of setting the appropriate security context requires some additional steps. This is illustrated in the following diagram.</p>
<p>
<img src="art/thrdfin2.gif" border=0></p>
<p>
Because the pending ISAPI extension needs to access the current security context it calls <a href="appref_4gtq.htm"><b>ServerSupportFunction</b></a> and specifies HSE_REQ_GET_IMPERSONATION_TOKEN as the value for the dwHSERequest parameter. (Step 3) This function returns a handle that you can use to obtain an impersonation token for a worker thread.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The handle for the impersonation token that is returned will be valid for the lifetime of the EXTENSION_CONTROL_BLOCK (ECB). If the call to the ServerSupportFunction was for a synchronous operation, the ECB is valid until the HttpExtensionProc function completes. If the call to the ServerSupportFunction was for an asynchronous operation, the ECB will be valid until your extension calls ServerSupportFunction and specifies a value of HSE_REQ_DONE_WITH_SESSION for the dwHSERequest parameter. </p>
<p>
When the thread needs to access secured system resources, it should call either ImpersonateLoggedonUser or SetThreadToken and pass the reference to the handle it received from the ServerSupportFunction as an input parameter. (Step 4) Both ImpersonateLoggedonUser or SetThreadToken are Win32 API functions. </p>
<p>
You may want to call the Win32 API RevertToSelf function after the thread has finished using the current security context (Step 5). Calling RevertToSelf will return the thread to the security context of the process in which it is running. For ISAPI extensions running in the INETINFO process, the security context is SYSTEM. For ISAPI extensions running in an isolated process, the security context is IWAM_machinename. </p>
<p>
For more information on IIS authentication see <a href="../../../iis/htm/core/iiathsc.htm"><b>Authentication</b></a> in the Server Administration section. </p>
<p>
For more information on the Win32 API's, see the Platform SDK.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing the ASP Built-in Objects</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_accessing_the_asp_built_in_objects"></a>Accessing the ASP Built-in Objects</h2>
<p>
In IIS 3.0, components could access ASP built-in objects through the <a href="crtcomp_01v8.htm"><b>IScriptingContext</b></a> interface. Components that needed to access the built-in objects did so through <a href="crtcomp_28s3.htm"><b>page-level event methods</b></a>. While this is still supported, an alternative now exists and is recommended as an improvement over page-level event methods. </p>
<p>
You can now use the <a href="crtcomp_4tpw.htm"><b>ObjectContext</b></a> object to access the built-in objects. <b>ObjectContext </b>makes IIS applications better suited for large scale scenarios and provides support for transaction processing. It is highly recommended that you convert your existing ASP-based applications to this new approach if they are high-volume applications. This conversion is required if your applications support transaction processing.</p>
<p>
If your ASP application includes transaction processing scripts, any object instances from your component that participate in transactions must be registered with the Microsoft Transaction Server (MTS). By registering your component with MTS, you will be able to take advantage of the <a href="../../../mts/html/quicktour_2.htm"><b>MTS run-time environment</b></a> benefits. </p>
<p>
In the following sample, a script calls two objects, <code>CheckInventory</code> and <code>PostSale</code>. Because both objects participate in the transaction, each must be registered with MTS. </p>
<pre><code>&lt;%@Transaction = Required%&gt; 
Dim Quantitytocheck, Accountocheck, Invstatus, Acctstatus
   Set Invstatus = Server.CreateObject(MyObj.CheckInventory)
   Set Acctstatus = Server.CreateObject(MyObj.PostSale)
      quantityout = Response("Currentquantity")
      accountout = Response("Currentaccout")
   Set Quantitytocheck = Invstatus.checkqoh(quantityout)
      If Quantitytocheck = OKStatus 
            Set Accounttocheck = Acctstatus.postit(accountout)
        Else Context.SetAbort
      End if
%&gt;
</code></pre>
<p>
In the above example, <code>MyObj.CheckInventory</code> and <code>MyObj.PostSale</code> would access ASP built-in objects through the MTS <b>ObjectContext</b>. The following sample demonstrates accessing the <code>Response</code> object.</p>
<pre><code>Public Function GetResponse(ByVal stringin As Variant)
   Dim curres As ObjectContext
   Set curres = GetObjectContext ()
   GetResponse = curres("Response").Write (stringin)
End Function</code></pre>
<p>
To see complete sample components that use <b>ObjectContext</b> to access the ASP built-in objects, see <a href="nonssamp_8jzn.htm">Developer Samples</a>.</p>
<p>&nbsp;</p></body>
</HTML>

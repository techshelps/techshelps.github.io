<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Inheritance</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_k2_property_inheritance"></a>Property Inheritance</h2>
<p>
The property inheritance feature of the metabase enables you to configure your IIS installation with few repetitious settings, and to minimize the amount of memory required for the metabase. Most metabase properties are inheritable—properties that are not explicitly set at a specific key inherit values assigned at higher level keys. For example, you can set file and directory permissions such as <b>AccessRead</b> and <b>AccessWrite</b> at the W3SVC level to apply to all files and directories in all Web site server instances, or you can set them at the W3SVC/2/ROOT level to apply to all files and directories for the second Web server only. You can then set different permissions for individual directories and files by explicitly setting them at lower levels. For example, you might set the <b>AccessExecute</b> permission property to FALSE for the second Web server (...W3SVC/2/ROOT) and then explicitly set it to TRUE for specific virtual directories, directories, or files on that server, such as ...W3SVC/2/ROOT/VDir1/VDir1a, ...W3SVC/2/ROOT/VDir2/Dir2d, and ...W3SVC/2/ROOT/VDir2/Dir3/File1, and so on. </p>
<p>
Most metabase properties are inheritable. A few are used only at specific keys and are not inheritable. Some properties in the metabase are lists of values, such as the <b>ServerBindings</b> property (a list of server binding values). Modifications to an inherited list repeat the entire list at the key where it is modified, with some exceptions such as lists of errors that inherit a default list and only store changes at keys where you modify the list.</p>
<p>
Flag properties, such as file access permissions, are often combined into one DWORD. The entire set of flags stored together inherits together. For example, if you change one of the file access permissions, such as <b>AccessRead</b> for a directory, the entire set of file access permissions, in the property <b>AccessFlags</b>, is stored at the metabase key for that directory. This means that if you change other default file access permissions, such as <b>AccessWrite</b> or <b>AccessScript</b>, at a key above that directory's key, the changes will not be inherited because they are already stored at the directory's key.</p>
<p>
Metabase properties are individually described in detail, including whether or not they are inheritable, in the <a href="arproprf_3usl.htm"><b>Administration Property Reference</b></a>. Properties such as access permission properties that are stored as part of a set are so identified, along with the other properties in the set and the property associated with the entire set. </p>
<p>&nbsp;</p></body>
</HTML>

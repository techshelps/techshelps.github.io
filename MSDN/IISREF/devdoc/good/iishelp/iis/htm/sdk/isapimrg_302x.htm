<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ISAPI and CGI</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_in_isapi_and_cgi"></a>ISAPI and CGI</h2>
<p>
The chief difference between the CGI programming model and the ISAPI programming model is that CGI creates a unique process for every request, while ISAPI does not. With CGI, every time an HTTP server receives a request it must initiate a new process, which, along with maintaining processes, is very resource intensive. This inherent limitation in CGI has made it difficult to develop responsive applications on the Internet. </p>
<p>
The following diagram illustrates the difference between the CGI model and the ISAPI model.</p>
<p>
<img src="art/isapi.gif" border=0></p>
<p>
In the ISAPI model, each request received by an HTTP server initiates the creation of a ECB data structure. Creating and maintaining a data structure is much easier and faster than initiating a new process. In addition, since the ECB and the extension are usually both running in the same process as IIS, the server can process requests faster and accommodate a higher volume of requests. </p>
<p>
Finally, rather than using process isolation, the ISAPI model uses threads to isolate processing work items. Using multiple threads to synchronize work allows IIS to make more efficient use of system resources than is possible with the CGI model, or other models based on process isolation.</p>
<p>
IIS 4.0 supports process isolation for ISAPI DLLs and scripts. IIS uses custom high speed methods to establish communication between the server process and the surrogate process housing the ISAPI DLLs thus providing robustness with high performance. Still, the ISAPI DLLs are only loaded once per isolated process. The application namespace boundary governs how the different processes are created and used.</p>
<p>
When IIS receives a request for a particular extension, it loads the DLL into memory where it services other requests. For example, the following HTTP request causes IIS to create an instance of <code>MyISAPI.dll</code>.</p>
<pre><code>http://IIS/Applications/MyISAPI.dll?paramater1,parameter2
 </code></pre>
<p>
When IIS closes the extension, it calls the extension's <a href="appref_64oe.htm"><b>TerminateExtension</b></a> function, if present. You are encouraged to use <b>TerminateExtension</b> to clean up any threads and state information that the extension may have used in processing the request.</p>
<p>
For more information about CGI, refer to http://hoohoo.ncsa.uiuc.edu/cgi/.</p>
<p>&nbsp;</p></body>
</HTML>

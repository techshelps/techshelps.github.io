<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetServerVariable</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_in_getservervariable"></a>GetServerVariable</h1>
<p>
The <b>GetServerVariable</b> function retrieves information about a connection or about the IIS itself.</p>
<pre><code><b>BOOL WINAPI GetServerVariable(
  HCONN</b><i> hConn</i><b>,             </b>
<b>  LPSTR</b><i> lpszVariableName</i><b>,  </b>
<b>  LPVOID</b><i> lpvBuffer</i><b>,        </b>
<b>  LPDWORD</b><i> lpdwSizeofBuffer  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hConn</i></dt>
<dd>
[in] Specifies the connection handle.</dd>
<dt>
<i>lpszVariableName</i></dt>
<dd>
[in] A null-terminated string that indicates which variable is requested. These are the possible variables. 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=51%>ALL_HTTP</td>
<td width=49%>Retrieves all HTTP headers that were received. These variables are of the form HTTP_&lt;header field name&gt;. The headers consist of a null-terminated string with the individual headers separated by line feeds.</td>
</tr>
<tr valign=top>
<td width=51%>ALL_RAW</td>
<td width=49%>Retrieves all headers in the raw-form. The header-names and values appear as they are sent by the client. Currently, this value is primarily used by Proxy server and other similar applications.</td>
</tr>
<tr valign=top>
<td width=51%>APPL_MD_PATH</td>
<td width=49%>Retrieves the metabase path of the application for the ISAPI DLL or the script.</td>
</tr>
<tr valign=top>
<td width=51%>APPL_PHYSICAL_PATH</td>
<td width=49%>Retrieves the physical path that corresponds with the metabase path. IIS maps the namespace to the physical directory path ; this allows APPL_MD_PATH to return this value. This is a costly function (in run time) compared to getting just APPL_MD_PATH.</td>
</tr>
<tr valign=top>
<td width=51%>AUTH_PASSWORD</td>
<td width=49%>Specifies the value entered in the client's authentication dialog. This variable is only available if Basic authentication is used. </td>
</tr>
<tr valign=top>
<td width=51%>AUTH_TYPE</td>
<td width=49%>Specifies the type of authentication used. If the string is empty, then no authentication is used. Possible values are kerberos, user, SSL/PCT, Basic, and NTLM.</td>
</tr>
<tr valign=top>
<td width=51%>AUTH_USER</td>
<td width=49%>Specifies the value entered in the client's authentication dialog.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_COOKIE</td>
<td width=49%>Specifies a unique ID for a client certificate. Returned as a string. Can be used as a signature for the whole client certificate.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_FLAGS</td>
<td width=49%>If bit0 is set to 1, a client certificate is present. If bit1 is set to 1, the Certifying Authority of the client certificate is invalid (not on this server's list of recognized CAs).</td>
</tr>
<tr valign=top>
<td width=51%>CERT_ISSUER</td>
<td width=49%>Specifies the issuer field of the client certificate. For example, the following codes might be O=MS, OU=IAS, CN=user name, C=USA, and so on.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_KEYSIZE</td>
<td width=49%>Specifies the number of bits in the Secure Sockets Layer (SSL) connection key size.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_SECRETKEYSIZE</td>
<td width=49%>Specifies the number of bits in the server certificate private key.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_SERIALNUMBER</td>
<td width=49%>Specifies the serial number field of the client certificate.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_SERVER_ISSUER</td>
<td width=49%>Specifies the issuer field of the server certificate.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_SERVER_SUBJECT</td>
<td width=49%>Specifies the subject field of the server certificate.</td>
</tr>
<tr valign=top>
<td width=51%>CERT_SUBJECT</td>
<td width=49%>Specifies the subject field of the client certificate.</td>
</tr>
<tr valign=top>
<td width=51%>CONTENT_LENGTH</td>
<td width=49%>Specifies the number of bytes of data which the script or extension can expect to receive from the client. This total does not include headers.</td>
</tr>
<tr valign=top>
<td width=51%>CONTENT_TYPE</td>
<td width=49%>Specifies the content type of the information supplied in the body of a POST request.</td>
</tr>
<tr valign=top>
<td width=51%>HTTP_ACCEPT</td>
<td width=49%>Specifies the special-case HTTP header. </td>
</tr>
<tr valign=top>
<td width=51%>HTTPS</td>
<td width=49%>Returns on if the request came in through secure channel (SSL), or off if the request is for a non-secure channel. </td>
</tr>
<tr valign=top>
<td width=51%>HTTPS_KEYSIZE</td>
<td width=49%>Specifies the number of bits in the SSL connection key size.</td>
</tr>
<tr valign=top>
<td width=51%>HTTPS_SECRETKEYSIZE</td>
<td width=49%>Specifies the number of bits in server certificate private key.</td>
</tr>
<tr valign=top>
<td width=51%>HTTPS_SERVER_ISSUER</td>
<td width=49%>Specifies the issuer field of the server certificate.</td>
</tr>
<tr valign=top>
<td width=51%>HTTPS_SERVER_SUBJECT</td>
<td width=49%>Specifies the subject field of the server certificate.</td>
</tr>
<tr valign=top>
<td width=51%>INSTANCE_ID</td>
<td width=49%>Specifies the ID for the IIS instance in textual format. If the instance ID is 1, it appears as a string. This value can be used to retrieve the ID of the Web-server instance, in the metabase, to which the request belongs.</td>
</tr>
<tr valign=top>
<td width=51%>INSTANCE_META_PATH</td>
<td width=49%>Specifies the metabase path for the instance to which the request belongs. </td>
</tr>
<tr valign=top>
<td width=51%>PATH_INFO</td>
<td width=49%>Specifies the additional path information, as given by the client. This consists of the trailing part of the URL after the script name, but before the query string, if any.</td>
</tr>
<tr valign=top>
<td width=51%>PATH_TRANSLATED</td>
<td width=49%>Specifies this is the value of PATH_INFO, but with any virtual path expanded into a directory specification.</td>
</tr>
<tr valign=top>
<td width=51%>QUERY_STRING</td>
<td width=49%>Specifies the information which follows the question mark in the URL that referenced this script.</td>
</tr>
<tr valign=top>
<td width=51%>REMOTE_ADDR</td>
<td width=49%>Specifies the IP address of the client or agent of the client (for example gateway, proxy, or firewall) that sent the request.</td>
</tr>
<tr valign=top>
<td width=51%>REMOTE_HOST</td>
<td width=49%>Specifies the host name of the client or agent of the client (for example, gateway, proxy or firewall) that sent the request.</td>
</tr>
<tr valign=top>
<td width=51%>REMOTE_USER</td>
<td width=49%>Specifies the user name supplied by the client and authenticated by the server. This comes back as an empty string when the user is anonymous.</td>
</tr>
<tr valign=top>
<td width=51%>REQUEST_METHOD</td>
<td width=49%>Specifies the HTTP request method verb.</td>
</tr>
<tr valign=top>
<td width=51%>SCRIPT_NAME</td>
<td width=49%>Specifies the name of the script program being executed.</td>
</tr>
<tr valign=top>
<td width=51%>SERVER_NAME</td>
<td width=49%>Specifies the server's host name, or IP address, as it should appear in self-referencing URLs.</td>
</tr>
<tr valign=top>
<td width=51%>SERVER_PORT</td>
<td width=49%>Specifies the TCP/IP port on which the request was received.</td>
</tr>
<tr valign=top>
<td width=51%>SERVER_PORT_SECURE</td>
<td width=49%>Specifies a string of either 0 or 1. If the request is being handled on the secure port, then this will be 1. Otherwise, it will be 0.</td>
</tr>
<tr valign=top>
<td width=51%>SERVER_PROTOCOL</td>
<td width=49%>Specifies the name and version of the information retrieval protocol relating to this request. </td>
</tr>
<tr valign=top>
<td width=51%>SERVER_SOFTWARE</td>
<td width=49%>Specifies the name and version of the Web server under which the ISAPI Extension DLL program is running.</td>
</tr>
<tr valign=top>
<td width=51%>URL</td>
<td width=49%>Specifies the base portion of the URL. Parameter values will not be included. The value is determined when IIS parses the URL from the header.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpvBuffer</i></dt>
<dd>
[out] Points to the buffer to receive the requested information.</dd>
<dt>
<i>lpdwSizeofBuffer</i></dt>
<dd>
[in/out] Points to a DWORD that indicates the size of the buffer pointed to by <i>lpvBuffer</i>. On successful completion, the DWORD contains the size of bytes transferred into the buffer, including the null-terminating byte.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. The Win32® <b>GetLastError</b> function can be used to determine why the call failed. The following are the possible error values. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%>Value</th>
<th align=left width=42%>Meaning</th>
</tr>
<tr valign=top>
<td width=58%>ERROR_INVALID_PARAMETER</td>
<td width=42%>Bad connection handle, in either <i>lpszVariableName</i> or <i>lpdwSizeOfBuffer.</i></td>
</tr>
<tr valign=top>
<td width=58%>ERROR_INVALID_INDEX</td>
<td width=42%>Bad or unsupported variable identifier.</td>
</tr>
<tr valign=top>
<td width=58%>ERROR_INSUFFICIENT_BUFFER</td>
<td width=42%>Buffer too small. The required buffer size is *<i>lpdwSizeofBuffer.</i></td>
</tr>
<tr valign=top>
<td width=58%>ERROR_NO_DATA</td>
<td width=42%>The data requested is not available.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>GetServerVariable</b> function copies information into a buffer supplied by the caller. The information can include CGI variables and information relating to an HTTP connection or to the server itself. </p>
<p>
<b>Note</b>&nbsp;&nbsp;In respect to AUTH_TYPE, if the string is not empty it does not mean the user was authenticated (if the authentication scheme is not basic or NTLM). The server allows authentication schemes it does not natively understand since an ISAPI Filter may be able to handle that particular scheme.</p>
<p>
The<i> lpszVariableName</i> can be used to retrieve a specific header by using the HTTP_&lt;headername&gt; value. For example, supplying the value HTTP_ACCEPT returns the accept header, and HTTP_VERSION returns the version header.</p>
<p>
The values of the fields for the HTTP_ACCEPT variable are concatenated, and separated by a comma (,). </p>
<p>
If bit 1 of the Cert_Flags variable is set to 1, indicating that the certificate is invalid, IIS 4.0 will reject the certificate. Earlier versions of IIS will not reject the certificate.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ServerSupportFunction</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_in_serversupportfunction"></a>ServerSupportFunction</h1>
<p>
The <b>ServerSupportFunction</b> is a callback function that is supplied in the ECB (EXTENSION_CONTROL_BLOCK). It supports several auxiliary functions that are not covered by other explicit callback functions in the ECB.</p>
<pre><code><b>BOOL ServerSupportFunction(
  HCONN</b><i> ConnID</i><b>,         </b>
<b>  DWORD</b><i> dwHSERRequest</i><b>,  </b>
<b>  LPVOID</b><i> lpvBuffer</i><b>,     </b>
<b>  LPDWORD</b><i> lpdwSize</i><b>,</b>     
<b>  LPDWORD</b><i> lpdwDataType</i>  
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ConnID</i></dt>
<dd>
Specifies the logical connection identifier of the client to which the response data should be sent. </dd>
<dt>
<i>dwHSERReques</i>t</dt>
<dd>
Specifies a DWORD that contains the HTTP Server Extension Request type which indicates the functions the ISAPI extension requested . Possible values are:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=38%>Value</th>
<th align=left width=62%>Meaning</th>
</tr>
<tr valign=top>
<td width=38%>HSE_APPEND_LOG_PARAMETER</td>
<td width=62%>Appends a string to the log record being written out to the log file.</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_ABORTIVE_CLOSE</td>
<td width=62%>Requests an abortive close on disconnect for this connection. Abortive close is one of the two types of closes (the other is graceful close) available for TCP sockets. In an abortive close the server forces an immediate close of the connection once the data is sent. Generally, the abortive close performs much better than the graceful close.</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_ASYNC_READ_CLIENT</td>
<td width=62%>Enables the ISAPI extension to perform an aynchronous read from the client. The extension should submit a callback function and context by calling <b>ServerSupportFunction</b> with HSE_REQ_IO_COMPLETION specified. If this is not done, the call will fail and the serer will return ERROR_INVALID_PARAMETER. If the read completes with zero bytes read, then the client has closed their connection gracefully so the operation should be terminated.<p>
If this value is specified, the only supported value for <i>lpdwDataType</i> is HSE_IO_ASYNC.</p>
</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_DONE_WITH_SESSION</td>
<td width=62%>Specifies that if the server extension holds on to the session because of extended processing requirements, the server must be notified when the session is finished so the server can close it and free its related structures. The parameters <i>lpdwSize</i>, and <i>lpdwDataType</i> are ignored. The <i>lpvBuffer</i> parameter may optionally point to a DWORD that contains HSE_STATUS codes. IIS recognizes HSE_STATUS_SUCCESS_WITH_KEEP_CONN for keeping the IIS connection alive if the client also requests to keep the connection alive. This parameter must be sent to the server if the HSE_IO_DISCONNECT_AFTER_SEND parameter has been included in the HSE_TF_INFO structure as part of a HSE_REQ_TRANSMIT_FILE request. This parameter will explicitly close the connection.</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_GET_CERT_INFO_EX</td>
<td width=62%>Specifies the certificate context for the first certificate in the client's certificate chain.<p>
This option depends upon two structures: the <a href="appref_8abc.htm"><b>CERT_CONTEXT_EX</b></a> structure.which contains an embedded <b>CERT_CONTEXT</b> structure.</p>
<p>
The <b>CERT_CONTEXT</b> structure contains an embedded buffer, which will hold the certificate.</p>
<p>
To use this option, the caller must: 1) instantiate a <b>CERT_CONTEXT_EX</b> structure; 2) allocate the buffer embedded within the <b>CERT_CONTEXT</b> structure; and 3) pass HSE_REQ_GET_CERT_INFO_EX as the second parameter, and the address of the <b>CERT_CONTEXT_EX</b> structure as the third parameter to <b>ServerSupportFunction</b>. </p>
</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_GET_IMPERSONATION_TOKEN</td>
<td width=62%>Specifies a handle to the impersonation token that the request is running. An impersonation token is a handle that represents a user context. Before resources, such as files and registry keys are opened, the thread should be impersonated first with either the <b>ImpersonateLoggedOnUser</b> or <b>SetThreadToken</b> Win32® API. The impersonation token returned by HSE_REQ_GET_IMPERSONATION_TOKEN can be used with these APIs.<p>
The token is owned by IIS. The ISAPI DLL should not call <b>CloseHandle </b>on this token. The lifetime of the token lasts until the current request's ECB is destroyed.</p>
<p>
The <i>lpvBuffer</i> parameter points to the HANDLE that will contain the impersonation token.</p>
</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_GET_SSPI_INFO</td>
<td width=62%>Specifies the <b>CtxtHandle</b> and <b>CredHandle</b> structures, as defined in sspi.h, for the server's certificate chain.<p>
The caller can then use these handles to query or manipulate the server certificate information through the standard certificate API's defined in sspi.h.</p>
<p>
To use this option, the caller must first instantiate <b>CtxtHandle</b> and <b>CredHandle</b> structures, then pass HSE_REQ_GET_SSPI_INFO as the second parameter, the address of the <b>CtxtHandle</b> structure as the third parameter, and the address of the <b>CredHandle</b> structure as the fifth parameter to <b>ServerSupportFunction</b>.</p>
<p>
<b>NOTE:</b> This option is not supported if your extension is running in a separate process from IIS.</p>
</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_IO_COMPLETION</td>
<td width=62%>Enables the ISAPI extension to set a callback function and context that will be used for handling asynchronous I/O operations. The callback function is <a href="appref_2fqm.htm"><b>PFN_HSE_IO_COMPLETION</b></a><p>
The callback function is used only if the function pointer passed is non-NULL. Any context value is allowed. If multiple calls are made for this option, the values used in the most recent call to <b>ServerSupportFunction</b> will be used. All old values will be lost. </p>
<p>
In case of errors during asynchronous I/O processing, the server makes a single call to the callback function. It is the responsibility of the ISAPI extension to do the cleanup during the call.</p>
<p>
When this option is used, <i>lpvBuffer</i> points to the callback function for asynchronous I/O completion and <i>lpdwDataType</i> contains the Context value to use for the callbacks.</p>
</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_IS_KEEP_CONN</td>
<td width=62%>Obtains the keep-alive status of the connection. If this option is used, <i>lpvBuffer</i> points to a BOOL which will contain the state on return. </td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_MAP_URL_TO_PATH</td>
<td width=62%>Specifies that the <i>lpvBuffer</i> parameter points to the buffer that contains the logical path on entry and the physical path on exit. The <i>lpdwSize</i> parameter points to the DWORD containing the size of the buffer passed in <i>lpvBuffer</i> on entry, and the number of bytes placed in the buffer on exit. The <i>lpdwDataType</i> parameter is ignored.</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_MAP_URL_TO_PATH_EX</td>
<td width=62%>This is an improved version of the HSE_REQ_MAP_URL_TO_PATH function. This version requires that you provide a pointer to the <a href="appref_2w33.htm"><b>HSE_URL_MAPEX_INFO</b></a> structure in the lpdwDataType parameter. IIS will fill populate this structure with information concerning the URL, such as any attributes values that have been set. </td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_REFRESH_ISAPI_ACL</td>
<td width=62%>Forces the server to update the ISAPI DLL ACL dynamically. This option forces the server to re-read the ACL for the ISAPI DLL. If this option is used <i>LpvBuffer</i> is a string that contains the name of the ISAPI DLL.</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_SEND_URL_REDIRECT_RESP</td>
<td width=62%>This option sends a 302 message (URL Redirect) to the client. No further processing is needed after the call. This operation is similar to specifying URI: &lt;URL&gt; in a CGI script header. With this option, the <i>lpvBuffer</i> variable points to a null-terminated string of URL. The variable <i>lpdwSize</i> should have the size of <i>lpvBuffer</i>. The variable <i>lpdwDataType</i> is ignored.</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_SEND_URL</td>
<td width=62%>Sends the data specified by the URL to the client as if the client had requested that URL. The null-terminated URL pointed to by <i>lpvBuffer</i> must be on the server and must not specify protocol information (that is, it must begin with a /). No further processing is required after this call. This value should only be used if you are not sending any response back to the client. The parameter <i>lpdwSize</i> points to a DWORD holding the size of <i>lpvBuffer</i>. The parameter <i>lpdwDataType</i> is ignored.<p>
Support for this value is for compatability with earlier versions of ISAPI. HSE_REQ_SEND_URL_EX should be used instead.</p>
</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_SEND_URL_EX</td>
<td width=62%>Similar to HSE_REQ_SEND_URL; however, it adds support for specifying the verb to use in the redirect.</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_SEND_RESPONSE_HEADER</td>
<td width=62%>Sends a complete HTTP server response header, including the status, server version, message time, and MIME version. The ISAPI extension should append other HTTP headers such as the content type and content length, followed by an extra \r\n. This option allows the function to take only text, up to the first \0 terminator. The function with this parameter should only be called once per request. </td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_SEND_RESPONSE_HEADER_EX </td>
<td width=62%>This is an improved version of HSE_REQ_SEND_RESPONSE_HEADER. This new version allows your extension to specify whether the connection should be kept open through the fKeepConn member of the HSE__SEND_HEADER_EX_INFO structure. You can also use this structure to indicate the lengths of the header and status strings, which will provide better performance than using HSE_REQ_SEND_RESPONSE_HEADER. <p>
This function requires that a pointer to the <a href="appref_1hm7.htm"><b>HSE_SEND_HEADER_EX_INFO</b></a> structure be included in the lpvbuffer parameter.</p>
</td>
</tr>
<tr valign=top>
<td width=38%>HSE_REQ_TRANSMIT_FILE</td>
<td width=62%>Enables the ISAPI extension to use the Win32 <b>TransmitFile</b> function to send a file to the client. The server performs this operation asynchronously. The extension should either submit a callback function (and context) by setting the values in the <a href="appref_9x0v.htm"><b>HSE_TF_INFO</b></a> object passed in or should have called <b>ServerSupportFucntion</b> with HSE_REQ_IO_COMPLETION set. If none of the above is done, this call will fail and the server will return an ERROR_INVALID_PARAMETER. Also, the extension should specify the file handle in the structure that is passed in. If all parameters are present, the server submits this operation to its internal asynchronous I/O queue and returns to the caller. The ISAPI extension can at this point return HSE_STATUS_PENDING, if returning from HttpExtenionProc, and later on use HSE_DONE_WITH_SESSION, when the callback that indicates I/O has completed occurs.<p>
If this option is used, <i>lpvBuffer</i> points to the HSE_TF_INFO object. <i>lpdwSize</i> and<br>
<i>lpdwDataType</i> are both ignored.</p>
</td>
</tr>
<tr valign=top>
<td width=38%></td>
<td width=62%></td>
</tr>
</table><br>

</dd>
<dt>
<i>lpvBuffer</i></dt>
<dd>
Points to a buffer. The contents of the buffer will vary, depending on the value set for the <i>dwHSERReques</i>t parameter. Details are provided in the table of possible values for the <i>dwHSERReques</i>t parameter.</dd>
<dt>
<i>lpdwSizeofBuffer</i></dt>
<dd>
Points to a DWORD. The meaning of the DWORD will vary, depending on the value set for the <i>dwHSERReques</i>t parameter. Details are provided in the table of possible values for the <i>dwHSERReques</i>t parameter.</dd>
<dt>
<i>lpdwDataType</i></dt>
<dd>
Points to a DWORD. The meaning of the DWORD will vary, depending on the value set for the <i>dwHSERReques</i>t parameter. Details are provided in the table of possible values for the <i>dwHSERReques</i>t parameter.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

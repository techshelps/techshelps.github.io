<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading and Writing Asynchronously</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_in_reading_and_writing_asynchronously"></a>Reading and Writing Asynchronously</h2>
<p>
ISAPI supports asynchronous I/O operations in three ways. First, your extension can write to the client asynchronously by calling the <a href="appref_7vjo.htm"><b>WriteClient</b></a> callback function with the <i>dwReserved</i> parameter set to HSE_IO_ASYNC. Your extension can read from the client asynchronously by calling the <a href="appref_4gtq.htm"><b>ServerSupportFunction</b></a> callback function with the <i>dwHSERequest</i> parameter set to HSE_REQ_ASYNC_READ_CLIENT. Finally, your extension can utilize the Win32® <b>TransmitFile </b>function to transmit a file quickly using the Winsock socket handle. To use <b>TransmitFile</b>, your extension calls the <b>ServerSupportFunction </b>with the<b> </b><i>dwHSERequest</i> parameter set to HSE_REQ_TRANSMIT_FILE.</p>
<p>
The following code establishes an asynchronous reading from a client.</p>
<pre><code>DWORD
DoAsyncRC(
LPEXTENSION_CONTROL_BLOCK pecb
)
{
    char    szHeader[256] = "";
    BOOL    fReturn = TRUE;
    DWORD   dwFlags;
    DWORD   cbTotalToRead = MAX_BUF_SIZE;
    DWORD   hseStatus = HSE_STATUS_PENDING;
 
    //
    // Initialize the context for ReadClient
    //
 
    pByteReadSoFar = &amp;(pecb-&gt;cbAvailable);
    
    fReturn =
    pecb-&gt;ServerSupportFunction(
            pecb-&gt;ConnID,
            HSE_REQ_IO_COMPLETION,
            AsyncReadClientIoCompletion,
            0,
            pByteReadSoFar);
 
    if (!fReturn) {
        hseStatus = HSE_STATUS_ERROR;
    }
 
    dwFlags = HSE_IO_ASYNC;
    fReturn = 
    pecb-&gt;ServerSupportFunction(
            pecb-&gt;ConnID,
            HSE_REQ_ASYNC_READ_CLIENT,
            g_ReadBuffer,
            &amp;cbTotalToRead,
            &amp;dwFlags);
 
    if (!fReturn) {
        hseStatus = HSE_STATUS_ERROR;
    }
 
    return (hseStatus);
}
 </code></pre>
<p>
For a complete working sample that performs an asynchronous read from a client, see <a href="nonssamp_8jzn.htm"><b>Developer Samples</b></a>. </p>
<p>&nbsp;</p></body>
</HTML>

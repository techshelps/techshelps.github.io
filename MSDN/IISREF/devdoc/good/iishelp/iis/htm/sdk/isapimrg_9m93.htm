<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous I/O Processing</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_in_asynchronous_i_o_processing"></a>Asynchronous I/O Processing</h2>
<p>
It is important that your ISAPI extensions support asynchronous operations because that frees server pool threads to complete I/O operations. In addition, the IIS server engine already has built-in support to manage asynchronous I/O operations using the completion ports and server thread pool. ISAPI 1.0 only supported synchronous I/O operations through the <a href="appref_235g.htm"><b>ReadClient</b></a> and <a href="appref_7vjo.htm"><b>WriteClient</b></a> callback functions.</p>
<p>
There are two basic types of async processing.You can implement <b>WriteClient</b> as an async process by setting the <i>dwReserved</i> parameter to HSE_IO_ASYNC. <b>ReadClient</b> and <b>TransmitFile</b> use the <b>ServerSupportFunction</b> to indicate asynchronous processing. For <b>TransmitFile</b> this is accomplished by calling the <b>ServerSupportFunction</b> with the <i>dwHSERequest</i> parameter set to HSE_REQ_TRANSMIT_FILE. For <b>ReadClient</b> the <i>dwHSERequest</i> parameter is set to HSE_REQ_ASYNC_READ_CLIENT.</p>
<p>
ISAPI 2.0 and later versions support asynchronous write operations using the existing <b>WriteClient </b>callback function with a special flag that indicates the operation has to be performed asynchronously. In addition, these versions of ISAPI provide a mechanism to request the server transmit a file using the Win32 API <b>TransmitFile</b>. Only one asynchronous I/O operation can be in process at a time. If your ISAPI extension begins an asynchronous I/O operation, you should wait until the operation completes before starting another one.</p>
<h5><img src="../../../../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;The following steps outline the order of events for asynchronous processing</h5>
<ol>
<li>
IIS I/O thread calls the ISAPI extension with an ECB.</li>
<li>
Extension returns HSE_STATUS_PENDING and puts the ECB in a worker queue.</li>
<li>
Extension starts or re-uses a worker thread for the ECB and adds a <b>ServerSupportFunction</b> to the ECB with the <i>dwHSERequest</i> parameter set to HSE_REQ_IO_COMPLETION. The ECB is put on the worker thread.</li>
<li>
The worker thread performs the required work using an async processing function. </li>
<li>
When the I/O completes IIS calls the Async IO callback function with the context &amp; IO status (bytes &amp; error code). In the callback the ISAPI DLL may do other calls to either <b>WriteClient</b> or <b>ServerSupportFunction</b> until there are no more bytes waiting to be read or written.</li>
<li>
When the worker thread is finished processing, it calls the <b>ServerSupportFunction</b> with the <i>dwHSERequest</i> parameter set to HSE_REQ_DONE_WITH_SESSION. When IIS receives this callback, it destroys the ECB.</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;There is exactly one ECB for each ISAPI request. ECBs may be recycled for subsequent requests (only after the completion of the entire request). After calling the <b>ServerSupportFunction</b> with HSE_REQ_DONE_WITH_SESSION the extension should no longer use the ECB for which the call was made.</p>
<p>&nbsp;</p></body>
</HTML>

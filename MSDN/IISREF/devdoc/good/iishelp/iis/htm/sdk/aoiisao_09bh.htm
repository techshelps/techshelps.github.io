<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Program</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_k2_sample_program"></a>Sample Program</h3>
<p>
You can use the IIS Admin Objects to recursively walk the metabase on your computer. The following sample program uses VBScript code in an .asp file to list the nodes in the metabase structure, optionally printing the ADSI properties, mandatory properties, optional properties, whether each property is inheritable, and the data type of the property. </p>
<pre><code>&lt;HTML&gt; 
&lt;HEAD&gt; 
&lt;TITLE&gt;SchemaA.asp (IIS Property Schema)&lt;/TITLE&gt; 
&lt;/HEAD&gt; 
&lt;BODY BGCOLOR=#FFFFFF&gt; 
&lt;FONT FACE="Courier" SIZE=2&gt; 
&lt;% 
' This program will list metabase nodes installed on LocalHost, 
' optionally printing ADSI properties, mandatory properties, 
' optional properties, whether the properties are inheritable,
' and the data type of the property. 
 
' Option usage .../SchemaA.asp?ShowProp={param}&amp;ShowInh={T|F} 
'     &amp;ShowType={T|F}&amp;StartKey={Path}&amp;Recurse={T|F} 
' ShowProp={All|None|(one or more of AMO)} 
'   All or AMO =&gt; All properties [Default] 
'   None or N =&gt; No properties 
'   A =&gt; ADSI properties 
'   M =&gt; Mandatory properties 
'   O =&gt; Optional properties 
' ShowInh={T|F} (Show property inheritance attribute} 
' ShowType={T|F} (Show property data type) 
' StartKey={Path of starting key e.g. IIS://LocalHost/W3SVC} 
' Recurse={T|F} (Recurse from the starting key) 
' Default: All, T, T, IIS://LocalHost, T 
 
Dim MachName      ' Holds machine name (LocalHost) 
Dim ADsObj        ' Holds object 
Dim SchemaPath    ' Path to object's schema object 
Dim SchemaObj     ' Holds object's schema object 
Dim PropSchemaObj ' Holds schema for individual property 
Dim MandPropList  ' Holds object's mandatory property list 
Dim OptPropList   ' Holds object's optional property list 
 
Dim Level         ' Recursive indent level 
Dim LevelWidth    ' Number of indent spaces per level (default 3) 
Dim Indent        ' String spaces for indentation 
Dim ShowProp      ' Input parameter 
Dim ShowInh       ' Input parameter 
Dim StartKey      ' Input parameter 
Dim Recurse       ' Input parameter 
Dim PropArgs      ' Temporary variable 
Dim InhArgs       ' Temporary variable 
Dim KeyArgs       ' Temporary variable 
Dim RecurseArgs   ' Temporary variable 
 
Dim InhList(2)    ' Holds output text 
InhList(0) = "  Inh  " 
InhList(1) = "Not Inh" 
InhList(2) = "Invalid Property" 
 
MachName = "LocalHost" 
 
' Get arguments from command line 
ShowProp = "AMO"  ' Default to all options 
PropArgs = Request.QueryString("ShowProp") 
If PropArgs &lt;&gt; "" Then 
    ShowProp = UCase(PropArgs) 
    If ShowProp = "NONE" Then ShowProp = "N" 
    If ShowProp = "ALL" Then ShowProp = "AMO" 
End If 
 
ShowInh = "T" 
InhArgs = Request.QueryString("ShowInh") 
If InhArgs &lt;&gt; "" Then 
    ShowInh = UCase(InhArgs) 
    If ShowInh = "YES" or ShowInh = "TRUE" Then ShowInh = "T" 
    If ShowInh = "FALSE" or ShowInh = "F" Then ShowInh = "F" 
End If 
 
ShowType = "T" 
InhArgs = Request.QueryString("ShowType") 
If InhArgs &lt;&gt; "" Then 
    ShowType = UCase(InhArgs) 
    If ShowType = "YES" or ShowType = "TRUE" Then ShowType = "T" 
    If ShowType = "FALSE" or ShowType = "F" Then ShowType = "F" 
End If 
 
StartKey = "IIS://" &amp; MachName 
KeyArgs = Request.QueryString("StartKey") 
If KeyArgs &lt;&gt; "" Then 
    StartKey = KeyArgs 
End If 
 
Recurse = "T" 
RecurseArgs = Request.QueryString("Recurse") 
If RecurseArgs &lt;&gt; "" Then 
    Recurse = UCase(RecurseArgs) 
End If 
 
on error resume next 
Set ADsObj = GetObject(StartKey) 
If err.number &lt;&gt; 0 then 
    response.write "Error " &amp; err.number &amp; "  =  " &amp; err.description 
    Err.Raise ,,"Unable to open path object" 
end if 
 
REM Use HTML &lt;PRE&gt; tag to prevent white space compression 
Response.Write "&lt;PRE&gt;" 
 
Response.Write "&lt;B&gt;" &amp; ADsObj.ADsPath &amp; "&lt;/B&gt;  Structure/Property Schema&lt;/B&gt;&lt;BR&gt;" 
Response.Write "    [ShowProp = " &amp; ShowProp &amp; "]&lt;BR&gt;" 
Response.Write "    [ShowInh  = " &amp; ShowInh &amp; "]&lt;BR&gt;" 
Response.Write "    [ShowType = " &amp; ShowType &amp; "]&lt;BR&gt;" 
Response.Write "    [StartKey = " &amp; StartKey &amp; "]&lt;BR&gt;" 
Response.Write "    [Recurse  = " &amp; Recurse &amp; "]&lt;BR&gt;" 
 
Response.Write "&lt;BR&gt;" 
Response.Write " &lt;B&gt;Option usage:&lt;/B&gt; .../SchemaA.asp?ShowProp={param}&amp;ShowInh={T|F}" 
Response.Write "&amp;ShowType={T|F}&amp;StartKey={Path}&amp;Recurse={T|F} &lt;BR&gt;" 
Response.Write "   ShowProp={All|None|(one or more of AMO)}  &lt;BR&gt;" 
Response.Write "     All or AMO =&gt; All properties [Default]  &lt;BR&gt;" 
Response.Write "     None or N =&gt; No properties  &lt;BR&gt;" 
Response.Write "     A =&gt; ADSI properties  &lt;BR&gt;" 
Response.Write "     M =&gt; Mandatory properties  &lt;BR&gt;" 
Response.Write "     O =&gt; Optional properties  &lt;BR&gt;" 
Response.Write "   ShowInh={T|F} (Show property inheritance attribute}  &lt;BR&gt;" 
Response.Write "   ShowType={T|F} (Show property data type)  &lt;BR&gt;" 
Response.Write "   StartKey={Path of starting key e.g. IIS://LocalHost/W3SVC}  &lt;BR&gt;" 
Response.Write "   Recurse={T|F} (Recurse from the starting key)  &lt;BR&gt;" 
Response.Write "   Default: All, T, T, IIS://LocalHost, T  &lt;BR&gt;" 
 
Response.Write "&lt;HR&gt;" 
 
' Recursively retrieve and print object names and properties 
LevelWidth = 3 
Level = -1 
PrintProps(ADsObj) 
 
' Complete the page 
Response.Write "&lt;/PRE&gt;" 
Response.Write "&lt;HR&gt;" 
 
Sub PrintProps(ThisObj) 
On error Resume next 
If Err.Number &lt;&gt; 0 Then 
    Err.Clear 
    Level = Level - 1 
    Exit Sub 
End If 
Level = Level + 1 
Response.write Space(LevelWidth*Level) 
If ShowProp &lt;&gt; "N" Then 
    Response.write "&lt;B&gt;" 
End If 
Response.Write ThisObj.Name 
If IsNumeric(ThisObj.Name) Then 
    Response.write " (Virtual Server - " &amp; ThisObj.ServerComment &amp; ")" 
End If 
If ShowProp &lt;&gt; "N" Then 
    Response.write "&lt;/B&gt;" 
End If 
Response.Write "&lt;BR&gt;" 
 
If Instr(ShowProp, "A") &gt; 0 Then 
    ' Print the ADSI properties 
    Indent = Space(LevelWidth*(Level+1)) 
    Response.Write Indent &amp; "&lt;I&gt;ADSI Properties&lt;/I&gt;&lt;BR&gt;" 
    Indent = Space(LevelWidth*(Level+2)) 
    Response.write Indent &amp; "Name    = " &amp; ThisObj.Name 
    Response.write "&lt;BR&gt;" 
    Response.write Indent &amp; "ADsPath = " &amp; ThisObj.AdsPath 
    Response.write "&lt;BR&gt;" 
    Response.write Indent &amp; "Class   = " &amp; ThisObj.Class 
    Response.write "&lt;BR&gt;" 
    Response.write Indent &amp; "GUID    = " &amp; ThisObj.GUID 
    Response.write "&lt;BR&gt;" 
    Response.write Indent &amp; "Parent  = " &amp; ThisObj.Parent 
    Response.write "&lt;BR&gt;" 
    Response.write Indent &amp; "Schema  = " &amp; ThisObj.Schema 
    Response.write "&lt;BR&gt;" 
End If  ' Show ADSI 
 
If Instr(ShowProp, "M") &gt; 0 Then 
    ' Print the mandatory properties 
    SchemaPath = ThisObj.Schema 
    Set SchemaObj = GetObject(SchemaPath) 
    Indent = Space(LevelWidth*(Level+1)) 
    Response.Write Indent &amp; "&lt;I&gt;Mandatory Properties&lt;/I&gt;&lt;BR&gt;" 
    MandPropList = SchemaObj.MandatoryProperties 
    Indent = Space(LevelWidth*(Level+2)) 
    For Each PropName in MandPropList 
        Response.Write Indent &amp; PropName 
        If ShowInh = "T" Then 
            Response.Write Space(35-Len(PropName)) 
            Response.Write InhList(IsInheritable(PropName)) 
        End If 
        If ShowType = "T" Then 
            If ShowInh = "T" Then 
                ' Already vertically aligned - just move on a little 
                Response.Write Space(4) 
            Else 
                ' Pad out to align vertically 
                Response.Write Space(35-Len(PropName)) 
            End If 
            Set PropSchemaObj = GetObject("IIS://" &amp; MachName &amp; "/Schema/" &amp; PropName) 
            Response.Write PropSchemaObj.Syntax 
        End If 
        Response.Write "&lt;BR&gt;" 
    Next 
    End If   ' Show Mandatory 
 
If Instr(ShowProp, "O") &gt; 0 Then 
    ' Print the optional properties 
    SchemaPath = ThisObj.Schema 
    Set SchemaObj = GetObject(SchemaPath) 
    Indent = Space(LevelWidth*(Level+1)) 
    Response.Write Indent &amp; "&lt;I&gt;Optional Properties&lt;/I&gt;&lt;BR&gt;" 
    OptPropList = SchemaObj.OptionalProperties 
    Indent = Space(LevelWidth*(Level+2)) 
    For Each PropName in OptPropList 
        Response.Write Indent &amp; PropName 
        If ShowInh = "T" Then 
            Response.Write Space(35-Len(PropName)) 
            Response.Write InhList(IsInheritable(PropName)) 
        End If 
        If ShowType = "T" Then 
            If ShowInh = "T" Then 
                ' Already vertically aligned - just move on a little 
                Response.Write Space(4) 
            Else 
                ' Pad out to align vertically 
                Response.Write Space(35-Len(PropName)) 
            End If 
            Set PropSchemaObj = GetObject("IIS://" &amp; MachName &amp; "/Schema/" &amp; PropName) 
            Response.Write PropSchemaObj.Syntax 
        End If 
        Response.Write "&lt;BR&gt;" 
    Next 
End If   ' Show Optional 
 
' Enumerate children recursively 
If Recurse &lt;&gt; "T" Then 
    Exit Sub 
End If 
If ShowProp &lt;&gt; "N" Then    ' Add a blank separator line if props show 
    Response.Write "&lt;BR&gt;" 
End If 
For Each Child in ThisObj 
    If Err.Number &lt;&gt; 0 Then 
        ' Skip objects that have no children 
        Err.Clear 
    Else 
        ' Recurse into the children of this object 
        PrintProps(Child) 
    End If 
Next 
Level = Level - 1 
Err.Clear 
End Sub 
 
Function IsInheritable(PropNameIn) 
' Returns 0 if inheritable 
' Returns 1 if a valid property and not inheritable 
' Returns 2 if not a valid property 
Const IIS_INHERITABLE_ONLY = 1 
Const MD_ERROR_DATA_NOT_FOUND = &amp;H800CC801 
Const NOT_A_VALID_PROPERTY = &amp;H80005006 
Dim IsInheritableObj 
Dim IsInheritablePaths 
On Error Resume Next 
Set IsInheritableObj = GetObject("IIS://" &amp; MachName) 
IsInheritablePaths = IsInheritableObj.GetDataPaths(PropNameIn, IIS_INHERITABLE_ONLY) 
Select Case Err.Number 
    Case 0                        ' Valid property, inheritable 
        IsInheritable = 0 
    Case MD_ERROR_DATA_NOT_FOUND  ' Valid property, not inheritable 
        IsInheritable = 1 
    Case NOT_A_VALID_PROPERTY     ' Not a valid property 
        IsInheritable = 2 
End Select 
Err.Clear 
End Function 
 
%&gt; 
&lt;/BODY&gt; 
&lt;/HTML&gt; </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering an Event Sink</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_k2_registering_an_event_sink"></a>Registering an Event Sink</h3>
<p>
You may design your application to be notified when certain events occur. To receive event notifications, your application must implement a COM sink of a class descended from the <b>IMSAdminBaseSink </b>interface. You may implement a sink for the following events. 
<ul>
<li>
The metabase shuts down. </li>
<li>
A key or its associated data changes. </li>
</ul>
<h4>Shutdown Notify Sink</h4>
<p>
This sink method will be called when IISADMIN stops. The metabase will be open during this call, however, there is no guarantee that handles will not be open that prevent you from reading from or writing to portions of the metabase. In addition, your sink must not release its interface during this call. The recommended implementation is, when notified, set a flag and return, then release the interface. The metabase will wait for five seconds or until all interfaces have been released before actually shutting down.</p>
<p>
Your callback method must implement the following prototype as a minimum:</p>
<pre><b><code>HRESULT STDMETHODCALLTYPE ShutdownNotify( void) 
{ 
  return HRESULT_FROM_WIN32(ERROR_NOT_SUPPORTED); 
} 
 </code></b></pre>
<h4>Change Notify Sink</h4>
<p>
If your application needs to be notified whenever a key or its associated data changes, it must implement the <b>SinkNotify</b> method. This method will receive a notification whenever one of the following events occurs.
<ul>
<li>
A key that has been changed is closed by the <b>CloseKey</b> method.</li>
<li>
Permissions on a handle to a key are changed from write or read/write to read-only by the <b>ChangePermissions</b> method.</li>
</ul>
<p>
The <b>SinkNotify</b> method is not called if the handle is closed by the instance of the <b>IMSMetadata</b> interface that registered the sink. In other words, a client only receives notifications of changes made by other clients. </p>
<p>
<b>Note</b>&nbsp;&nbsp;Do not open any write handles within your <b>SinkNotify</b> processing or recursive notifications between clients may cause a system lockup. You may open read handles to the metabase within your <b>SinkNotify</b> method. </p>
<p>
Your callback method must implement the following prototype as a minimum:</p>
<pre><code><b>HRESULT SinkNotify( 
DWORD </b><i>dwMDNumElements </i>
<b>MD_CHANGE_OBJECT </b><i>pcoChangeList[]</i>
<b>)</b>; 
 </code></pre>
<p>
The parameter <i>dwMDNumElements</i> receives the number of elements that have changed. The maximum number of change entries that are sent on a single call to the callback method is specified by the constant MD_MAX_CHANGE_ENTRIES. If more notifications are required, the method is called multiple times. </p>
<h4>Remarks</h4>
<p>
IIS does not make secure calls to remote machines. If your program implements a sink and is executing on a machine other than the machine on which IIS is running, you must remove security by calling the COM <b>CoInitializeSecurity</b> function with the <i>dwImpLevel</i> parameter set to RPC_C_AUTHN_LEVEL_NONE, as shown in this example: </p>
<pre><code>hRes = CoInitializeSecurity(NULL, 
            -1, 
            NULL, 
            NULL, 
            RPC_C_AUTHN_LEVEL_NONE, 
            0, 
            NULL, 
            EOAC_NONE, 
            0) 
 </code></pre>
<p>
For more information on this function, see the Reference topic in COM and ActiveX Object Services in the Platform SDK, which is also available in the MSDN Library.</p>
<p>&nbsp;</p></body>
</HTML>

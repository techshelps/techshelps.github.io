<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Issues</title>
<link disabled rel=stylesheet href=../../../../../backsdk3.css>
<style type="text/css">
@import url(../../../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_security_issues"></a>Security Issues</h2>
<p>
If you store your server component in the <b>Session</b> object, the server will free the component in the security context of the Web server instead of the security context of the client who owns the session.</p>
<p>
If your component requires that its cleanup or destructor method run in the security context of the client, it should save the client's security context during its creation method so that it can recall this context during its cleanup. </p>
<p>
You can obtain the security context of the client by calling the <code>OpenThreadToken</code> function. In your component's destructor method you can call the <code>SetThreadToken</code> function to set the security context to the previously saved client's context. This procedure is outlined in the following pseudo code example which includes the necessary Win32 API functions. This is not a working example, the italicized functions all require additional parameters. </p>
<pre><code>//saving the client's security context 
<i>OpenThreadToken</i>(<i>hTokenClient</i>,);
// . . . creation code

//make a copy of the current security context
Success = OpenThreadToken(
          GetCurrentThread(),
          TOKEN_QUERY|TOKEN_IMPERSONATE|TOKEN_EXECUTE,
          TRUE,
          HToken);
//set the security context to the previously-saved client context
<i>SetThreadToken(hTokenClient)</i>;
// . . . destruction code
//reset the thread to its standard security context
<i>SetThreadToken(hTokenSave)</i>;

 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;In the previous example, the standard security context is saved in <code>hTokenSave</code> before the object calls the <code>SetThreadToken</code> function. This enables you to reset the thread to its normal security context after the object instance is destroyed. This is not a working sample.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXTERNAL Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngexternal"></a><sup></sup>EXTERNAL Command</h1>
<p>
<a href="lngexternalsa.htm">See Also</a></p>
<p>
Alerts the <a href="wndproject_manager.htm">Project Manager</a> to an undefined reference.</p>
<p class=label>
<b>Syntax</b></p>
<p>
EXTERNAL FILE <i>FileList</i> | ARRAY <i>ArrayList</i> <br>
 &nbsp; | CLASS | FORM | LABEL | LIBRARY | MENU<br>
 &nbsp; | PROCEDURE | QUERY | REPORT | SCREEN | TABLE</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
FILE <i>FileList</i></p>
<p class=indent>
Specifies that the file you include in an indirect file reference or macro substitution is a stand-alone file, such as a text file, .BMP bitmap file, and so on. <i>FileList</i> may contain a list of file names separated by commas.</p>
<p class=dt>
ARRAY <i>ArrayList</i></p>
<p class=indent>
When an array is created in a program and then used in a lower-level program, include ARRAY with the array name in the lower-level program. <i>ArrayList</i> may contain a list of array names separated by commas.</p>
<p class=tl>
In the following example, the first program creates an array named <code>gaInvoice</code>. The array is initialized and a lower-level program named <code>dispinvo</code> is called. <code>dispinvo</code> displays the contents of the array created in the higher-level program. The command EXTERNAL ARRAY GAINVOICE is included to alert the Project Manager.</P><pre><code>DIMENSION gaInvoice(4)
STORE 'Paid' TO gaInvoice
DO dispinvo
*** Program dispinvo ***
PROCEDURE dispinvo
EXTERNAL ARRAY gaInvoice
? gaInvoice(1)
? gaInvoice(2)
? gaInvoice(3)
? gaInvoice(4)
RETURN
*** End of dispinvo program ***
</code></pre>
<p class=tl>
When an array is passed to a user-defined function or procedure, the corresponding array in the user-defined function or procedure must be identified to the Project Manager. Include the ARRAY option with the name of the array included in the PARAMETER statement.</P><pre><code>DIMENSION gaArrayOne(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Create an array
EXTERNAL ARRAY gaArrayTwo&nbsp;&nbsp; &amp;&amp; Name of the array used in the UDF
SET TALK OFF
STORE 10 TO gaArrayOne(1)
STORE&nbsp; 2 TO gaArrayOne(2)
= ADDTWO(@gaArrayOne)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Pass the array by reference to a UDF
FUNCTION ADDTWO
PARAMETER gaArrayTwo
CLEAR
gaArrayTwo(1) = gaArrayTwo(1) + 2
gaArrayTwo(2) = gaArrayTwo(2) + 2
? gaArrayTwo(1)
? gaArrayTwo(2)
</code></pre>
<p class=dt>
CLASS</p>
<p class=indent>
Specifies that the file you include in an indirect file reference or macro substitution is a visual class library.</p>
<pre><code>EXTERNAL CLASS myvclass&nbsp; &amp;&amp; CLASS myvclass must exist
STORE 'myvclass' TO gcClassFile
MODIFY CLASS (gcClassFile)
</code></pre>
<p class=dt>
FORM</p>
<p class=indent>
If a Form definition file is included in an indirect file reference or macro substitution, include FORM and the Form file name. FORM is identical to SCREEN.</p>
<pre><code>EXTERNAL FORM dataentr&nbsp; &amp;&amp; FORM dataentr must exist
STORE 'dataentr' TO gcFormFile
DO FORM (gcFormFile)
</code></pre>
<p class=dt>
LABEL</p>
<p class=indent>
Specifies that the file you include in an indirect file reference or macro substitution is a label definition file.</p>
<pre><code>EXTERNAL LABEL Maillabl&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; LABEL FORM Maillabl must exist
STORE 'Maillabl' TO gcLabelFile
LABEL FORM (gcLabelFile) PREVIEW 
</code></pre>
<p class=dt>
LIBRARY</p>
<p class=indent>
Include LIBRARY when a library file is referenced by indirect file referencing or macro substitution in SET LIBRARY.</p>
<pre><code>EXTERNAL LIBRARY regress&nbsp; &amp;&amp; LIBRARY regress must exist
STORE 'regress' TO gcStatFunc
SET LIBRARY TO (gcStatFunc)
</code></pre>
<p class=dt>
MENU</p>
<p class=indent>
If a menu definition file is included in an indirect file reference or macro substitution, include MENU and the menu file name.</p>
<pre><code>EXTERNAL MENU pickfile&nbsp; &amp;&amp; MENU pickfile must exist
STORE 'pickfile' TO gcSysMenPad
MODIFY MENU (gcSysMenPad)
</code></pre>
<p class=dt>
PROCEDURE</p>
<p class=indent>
Identifies an external procedure or user-defined function.</p>
<pre><code>EXTERNAL PROCEDURE delblank&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; PROCEDURE delblank must exist
STORE 'delblank' TO gcTrimBlanks
DO (gcTrimBlanks) WITH 'A B C D E'
</code></pre>
<p class=dt>
QUERY</p>
<p class=indent>
Specifies that the file you include in an indirect file reference or macro substitution is a query file.</p>
<pre><code>EXTERNAL QUERY sales&nbsp; &amp;&amp; QUERY sales must exist
STORE 'sales.qpr' TO gcSalesFile
DO (gcSalesFile)
</code></pre>
<p class=dt>
REPORT</p>
<p class=indent>
Specifies that the file you include in an indirect file reference or macro substitution is a report definition file.</p>
<pre><code>EXTERNAL REPORT overdue&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; REPORT overdue must exist
STORE 'overdue' TO gcReportFile
REPORT FORM (gcReportFile) PREVIEW
</code></pre>
<p class=dt>
SCREEN</p>
<p class=indent>
If a form definition file is included in an indirect file reference or macro substitution, include SCREEN and the screen file name. SCREEN is identical to FORM.</p>
<pre><code>EXTERNAL SCREEN dataentr&nbsp; &amp;&amp; SCREEN dataentr must exist
STORE 'dataentr' TO gcScreenFile
MODIFY SCREEN (gcScreenFile)
</code></pre>
<p class=dt>
TABLE</p>
<p class=indent>
Specifies that the file you include in an indirect file reference or macro substitution is a Visual FoxPro table.</p>
<pre><code>EXTERNAL TABLE customer &amp;&amp; Table customer must exist
STORE 'customer' TO gcMyTable
USE (gcMyTable)
</code></pre>
<p class=label>
<b>Remarks</b></p>
<p>
Use EXTERNAL to include files and to resolve undefined references in a project created by the Project Manager. EXTERNAL is used only by the Project Manager and is ignored during program execution.</p>
<p>
For more information on creating projects with the Project Manager, see "Using the Project Manager" in Chapter 15, <a href="dgcompiling_an_application.htm">Compiling an Application</a>, in the <i>Programmer's Guide</i>.</p>
<p>
Files whose names you specify with EXTERNAL are included in a project by the Project Manager. You must include CLASS, FILE, FORM, LABEL, LIBRARY, MENU, PROCEDURE, QUERY, REPORT, SCREEN, or TABLE before the file name or a set of file names separated with commas to tell the Project Manager the type of files to include in the project.</p>
<p>
The Project Manager must also be alerted to file names contained in a name expression or macro substitution. This ensures that all necessary files are included in a project when the project is built. It must also be alerted to arrays that are created in another procedure or user-defined function.</p>
<p>
For more information on name expressions and macro substitution, see the <a href="lngand.htm">&amp;</a> command. Whenever possible, use a name expression instead of macro substitution to improve performance.</p>
</BODY>
</HTML>

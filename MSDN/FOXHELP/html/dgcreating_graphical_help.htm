<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Graphical Help</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgcreating_graphical_help"></a><sup></sup>Chapter 23: Creating Graphical Help</h1>
<p>
You can add professional polish to your application by adding a graphical Help file in the form of HTML or WinHelp Help. Graphical Help can include graphics and formatted text; .dbf-style Help is limited to a single font without graphics. For information about creating .DBF-style Help, see Chapter 24, <a href="dgcreating__dbf_style_help.htm">Creating .DBF-Style Help</a>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Microsoft Visual Studio 6.0 includes Microsoft HTML Help Workshop (Hhw.exe) for creating HTML Help files. It does not include Microsoft Help Workshop 4.0 (Hcw.exe) for creating Winhelp files. Previous versions of Microsoft Visual FoxPro include Microsoft Help Workshop 4.0.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dghtml_help">HTML Help</a></li>
<li>
<a href="#dgwinhelp40">WinHelp 4.0</a></li>
</ul>

<h2><a name="dghtml_help"></a>HTML Help</h2>
<p>
HTML Help provides many of the features of Winhelp, and adds the following features:
<ul type=disc>
<li>
Support for HTML.<br><br></li>
<li>
Support for ActiveX, Java, and scripting (Javascript and Microsoft Visual Basic Script).<br><br></li>
<li>
Support for HTML image formats (.jpg, .gif, .png).<br><br></li>
<li>
Capability to jump from a Help topic to a site on the Internet.<br><br></li>
<li>
Capability to view the HTML code for a Help topic.</li>
</ul>
<p>
HTML Help is created with Microsoft HTML Help Workshop, which is included with Visual Studio and stand-alone Visual FoxPro. HTML Help Workshop provides a complete authoring system for HTML Help, and includes backwards compatibility that allows you to easily create HTML Help files from existing Winhelp projects. To create HTML Help files for your application, consult the online Help for the HTML Help Workshop.</p>
<p>
A sample HTML Help project, part of the Solutions sample, is included in …\Samples\Vfp98\Solution\Help. It includes the following files:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=22%><B><b>File</b></B></td>
<td width=78%><B><b>Description</b></B></td>
</tr>
<tr valign=top>
<td width=22%>Solution.chm</td>
<td width=78%>Compiled Help file.</td>
</tr>
<tr valign=top>
<td width=22%>Solution.hhp</td>
<td width=78%>Project file - a text file that brings together all the elements of a help project and contains information about how a compiled help file will appear.</td>
</tr>
<tr valign=top>
<td width=22%>Solution.hhk</td>
<td width=78%>Index file - contains the index entries (keywords) for your index.</td>
</tr>
<tr valign=top>
<td width=22%>Solution.hhc</td>
<td width=78%>Table of Contents file.</td>
</tr>
<tr valign=top>
<td width=22%>Solution.ali</td>
<td width=78%>Alias file for context-sensitive Help support. Maps product Ids to Help topics.</td>
</tr>
<tr valign=top>
<td width=22%>Solution.hh</td>
<td width=78%>Header file for context-sensitive Help support. Includes product Ids.</td>
</tr>
<tr valign=top>
<td width=22%>Solution.chi</td>
<td width=78%>Index file used when you ship .chm files that are likely to remain on a CD-ROM, as in the case of the MSDN Library. The .chi file allows certain navigation information to be installed locally on a hard disk for quick access, while the main content lives on the CD-ROM. A .chi file should not be used in a non-CD-ROM scenario. When a .chi file is not used all the information that would be in it remains in the .chm itself.</td>
</tr>
<tr valign=top>
<td width=22%>MSDN_ie3.css</td>
<td width=78%>Cascading style sheet.</td>
</tr>
<tr valign=top>
<td width=22%>MSDN_ie4.css</td>
<td width=78%>Cascading style sheet.</td>
</tr>
<tr valign=top>
<td width=22%><i>FileName</i>.htm</td>
<td width=78%>Source content files.</td>
</tr>
<tr valign=top>
<td width=22%><i>FileName</i>.gif</td>
<td width=78%>Source graphics files.</td>
</tr>
</table><br>
<h3>Planning Access to Online HTML Help</h3>
<p>
In addition to creating an HTML Help file that contains useful information, you need to provide a means for users of your application to access Help. There are three ways to deliver Help:</p>
<ul type=disc>
<li>
A Help menu — a menu that appears on the main menu bar of your application.</li>
<li>
Context-sensitive Help — Help that appears when a user presses F1 (or another key that you specify) while a particular object, control, or menu option is selected.</li>
<li>
"What's This?" Help — Help that appears when a user calls for help on a particular object or control.</li>
</ul>
<p>
Implementing HTML Help is similar to implementing WinHelp. The following sections describe how you can implement HTML Help for your application.</p>
<h4>Planning a Help Menu</h4>
<p>
A Help menu typically contains commands that provide access to the topics in your Help system. It is strongly recommended to have a single command on your Help menu that opens your HTML Help system. Beyond that, you can place additional commands on the Help menu that provide system information, or copyright and version information about your application.</p>
<h3>Adding Context Sensitivity</h3>
<p>
Context-sensitive Help allows users to easily access Help topics relating to what they are doing or seeing in your application at any given time. For example, if a user is viewing a data entry form, context-sensitive Help could provide a topic relating specifically to that data entry form.</p>
<p>
You decide the level of detail at which context-sensitive Help is implemented in your application. For example, you can associate a context-sensitive Help topic with a form, or you can associate more detailed Help topics with each control and field on your form.</p>
<p>
Context-sensitive Help is typically accessed by pressing F1, but you can specify any key to activate context-sensitive Help with <a href="lngon_key_label.htm">ON KEY LABEL</a>.</p>
<p class=label>
<b>Using Context-Sensitive Help on a Form</b></p>
<p>
To implement context-sensitive Help, you must specify a Help file for your application, and then associate specific Help topics with different objects in your application.</p>
<p class=label>
<b>To add context-sensitive Help</b>
<ol>
<li>
Specify a Help file for your application.<br><br></li>
<li>
Assign a Help topic to each object for which you plan to provide context-sensitive Help.</li>
</ol>
<h4>Specifying a Help File</h4>
<p>
You determine the Help file that can be accessed in your application by including the command <a href="lngset_help.htm">SET HELP TO file</a> in your code, where <i>file</i> is the name of your Help file. For example, if your Help file is called Myhelp.chm, you can use the following command:</p>
<pre><code>SET HELP TO MYHELP.CHM
</code></pre>
<p>
This command is typically included in the setup code for the main program of your application.</p>
<h4>Assigning Help Topics</h4>
<p>
You can assign a Help topic to specific objects in your Visual FoxPro application.</p>
<p class=label>
<b>To assign a Help topic to an object</b>
<ol>
<li>
In Design mode, open the object – a form, control, or toolbar, for example – that you want to assign context-sensitive Help to.<br><br></li>
<li>
View the object's properties.<br><br></li>
<li>
Set the <a href="lnghelpcontextid_property.htm">HelpContextID</a> property to the number representing a specific topic in your HTML Help file.</li>
</ol>
<p>
For more information about mapping HTML Help topics to context ID numbers, consult the online Help for the HTML Help Workshop.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To assign Help topics to menu titles or menu commands, you must include the <a href="lngset_topic.htm">SET TOPIC TO</a> command in the procedure associated with the menu title or menu command. </p>
<h3>Implementing "What's This?" Help</h3>
<p>
"What's This?" Help is similar to context-sensitive Help because it provides Help related to the specific object or control that currently has focus. </p>
<p>
For WinHelp, instead of invoking the Help file and displaying the Help topic in the full default-sized Help window, "What's This?" Help displays the topic in a small pop-up window that disappears as soon as the user clicks anywhere on the screen. "What's This?" Help is useful for providing brief tip-style descriptions or definitions for specific controls.</p>
<p>
Unlike WinHelp, HTML "What's This?" Help is displayed in the full default-sized Help window.</p>
<p>
You associate "What's This?" Help with a particular form, form control, or toolbar by setting its <a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a> property to a number representing a specific topic in your Help file.</p>
<p>
Use the following properties and methods to implement "What's This?" Help:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthishelpproperty.htm">WhatsThisHelp</a></td>
<td width=71%>Set this property to true (.T.) on a form to enable "What's This?" Help for the form and any controls on the form.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthisbuttonproperty.htm">WhatsThisButton</a></td>
<td width=71%>Set this property to true (.T.) if you want a "What's This?" Help button to appear in the title bar of the form.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a></td>
<td width=71%>For a form, control, or toolbar, set this property to an ID number corresponding to a topic in your HTML Help file.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthismodemethod.htm">WhatsThisMode</a></td>
<td width=71%>Use this method to display the "What's This?" Help question mark mouse pointer and enable "What's This?" Help mode. Clicking an object displays the "What's This?" Help topic specified by the WhatsThisHelpID property for the object.</td>
</tr>
</table><br>
<p class=label>
<b>To implement "What's This?" Help</b>
<ol>
<li>
In design mode, open the form you want to enable "What's This?" Help for.<br><br></li>
<li>
Set the form's <a href="lngwhatsthishelpproperty.htm">WhatsThisHelp</a> property to true (.T.).<br><br></li>
<li>
To display a "What's This?" Help button in the form's title bar, set the form's <a href="lngwhatsthisbuttonproperty.htm">WhatsThisButton</a> property to true (.T.).<br><br></li>
<li>
To associate a "What's This?" Help topic with the form, set the form's <a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a> property to an ID number corresponding to a topic in your HTML Help file.<br><br></li>
<li>
To associate a "What's This?" Help topic with a specific control on the form, select the control and set its <a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a> property to an ID number corresponding to a topic in your HTML Help file.</li>
</ol>
<h3>Programming Help Features</h3>
<p>
You can program your application so that users can access your HTML Help system. Although an HTML Help system can consist of one or more separate files, Help appears to users as part of your application.</p>
<p>
You can program your Visual FoxPro application to use graphical and .dbf-style Help with the SET HELP TO and SET TOPIC TO commands. <a href="lngset_help.htm">SET HELP TO</a> specifies the name of a custom Help file for your application. <a href="lngset_topic.htm">SET TOPIC TO</a> sets the identifying keyword for a topic in the custom Help file.</p>
<h4>Reserving F1</h4>
<p>
When a user presses F1 in your application, Visual FoxPro can display a context-sensitive Help topic. To do this, assign a Help context ID to a topic in your Help table and assign the same value to the <a href="lnghelpcontextid_property.htm">HelpContextID</a> property of your form or control. When the form or control has the focus and the user presses F1, Visual FoxPro displays the matching topic.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;F1 is enabled for context-sensitive Help by default. Because this is a recognized standard for Help, redefining this key is not recommended.</p>
<h4>Including Help Buttons on Forms</h4>
<p>
If you add Help buttons to your forms, users can access Help more easily. You should especially consider adding a Help button if your user is a novice.</p>
<p class=label>
<b>To set context sensitivity and add a Help button</b>
<ol>
<li>
In the <a href="lnginit_event.htm">Init</a> event for your form, set the <a href="lnghelpcontextid_property.htm">HelpContextID</a> property for all the form's objects to the same value you assigned to the Help topic. For example, if the value is 7, you can use the following command:<pre><code>THIS.SetAll("HelpContextID", 7)
</code></pre>
</li>
<li>
Add a command button to your form.<br><br></li>
<li>
Set the <a href="lngcaption_property.htm">Caption</a> property of the command button to Help.<br><br></li>
<li>
In the <a href="lngclick_event.htm">Click</a> event of the command button, add the following command:<pre><code>HELP ID THIS.HelpContextID
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Save the Help button as a class so that you can easily add it to any form. For more information about saving objects as classes, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>.</p>
<h3>Distributing a Compiled HTML Help System</h3>
<p>
In addition to the .chm file you create for your HTML Help system, you can use a free-distributable setup program, Hhupd.exe, that will install and register the HTML Help runtime components listed below. Internet Explorer or the Internet Explorer runtime engine must be installed on your users’ machines.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Component Name</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>Hhctrl.ocx</td>
<td width=71%>HTML Help ActiveX control</td>
</tr>
<tr valign=top>
<td width=29%>Itss.dll</td>
<td width=71%>Dynamic link library that handles compiled HTML</td>
</tr>
<tr valign=top>
<td width=29%>Itircl.dll</td>
<td width=71%>Full-text search Dynamic link library</td>
</tr>
<tr valign=top>
<td width=29%>Hh.exe</td>
<td width=71%>HTML Help viewer</td>
</tr>
</table><br>
<p>
You will find this setup program in the Redist folder in the folder where HTML Help Workshop has been installed. This setup program can be called from other setup programs, and can be made to run in 'quiet' mode so that it does not interfere with the setup program you may have already created. For a complete list of command line options, run Hhupd.exe/?.</p>

<h2><a name="dgwinhelp40"></a>WinHelp 4.0</h2>
<p>
Use the Microsoft Help Workshop, provided with previous versions of Visual FoxPro, to create Winhelp files. The Microsoft Help Workshop includes a Help Authoring Guide. The Help Authoring Guide (Hcw.hlp) is a graphical Help file that contains much of the information you will need to author a robust Help system.</p>
<h3>Choosing Help Features</h3>
<p>
WinHelp systems can have some or all of the following features:</p>
<ul type=disc>
<li>
A contents page that provides a hierarchical view of the topics in your Help system.</li>
<li>
An index, based on keywords you provide, that guides a user to specific information.</li>
<li>
Full-text search capabilities that allow users to search for information in Help based on specific words and phrases.</li>
<li>
Text with multiple fonts, font sizes, and colors.</li>
<li>
Graphics, including bitmaps with multiple resolutions.</li>
<li>
Macros that automate or extend the operation of the Help system.</li>
<li>
Hot spots — mouse-sensitive areas you create to give users jumps that link topics; pop-up windows that display additional text; and macro commands that you add to the Help system.</li>
<li>
Segmented hypergraphics: graphics with one or more hot spots.</li>
<li>
Secondary windows.</li>
<li>
Customizable menus.</li>
<li>
Graphics in Windows metafile format.</li>
<li>
.DLLs.</li>
</ul>
<h3>Planning Access to Online Help</h3>
<p>
In addition to creating a WinHelp file that contains useful information, you need to provide a means for users of your application to access Help. There are three ways to deliver Help:</p>
<ul type=disc>
<li>
A Help menu — a menu that appears on the main menu bar of your application.</li>
<li>
Context-sensitive Help — Help that appears when a user presses F1 (or another key that you specify) while a particular object, control, or menu option is selected.</li>
<li>
"What's This" Help — Help that appears as a brief pop-up tip when a user calls for help on a particular object or control.</li>
</ul>
<h4>Planning a Help Menu</h4>
<p>
A Help menu typically contains commands that provide access to the topics in your Help system. WinHelp 4.0 features the Help Finder window, which is a single dialog box providing access to contents, index, and full-text searching.</p>
<p class=label>
<b>The Help Finder Window</b></p>
<p>
<img src="afd24001.gif" border=0></p>
<p>
It is strongly recommended to have a single command on your Help menu that opens the Help Finder window. Beyond that, you can place additional commands on the Help menu that provide system information, or copyright and version information about your application.</p>
<p>
You can call the Help Finder window programmatically using the WinHelp function with the HELP FINDER parameter. For more information, see "Using the WinHelp Function" later in this chapter, and the WinHelp topic in the Help Authoring Guide.</p>
<h3>Adding Context Sensitivity to Help</h3>
<p>
Context-sensitive Help allows users to easily access Help topics relating to what they are doing or seeing in your application at any given time. For example, if a user is viewing a data entry form, context-sensitive Help could provide a topic relating specifically to that data entry form.</p>
<p>
You decide the level of detail at which context-sensitive Help is implemented in you application. For example, you can associate a context-sensitive Help topic with a form, or you can associate more detailed Help topics with each control and field on your form.</p>
<p>
Context-sensitive Help is typically accessed by pressing F1, but you can specify any key to activate context-sensitive Help with <a href="lngon_key_label.htm">ON KEY LABEL</a>.</p>
<p class=label>
<b>Using Context-Sensitive WinHelp on a Form</b></p>
<p>
<img src="afd24002.gif" border=0></p>
<p>
To implement context-sensitive Help, you must specify a Help file for your application, and then associate specific Help topics with different objects in your application.</p>
<p class=label>
<b>To add context-sensitive Help</b>
<ol>
<li>
Specify a Help file for your application.<br><br></li>
<li>
Assign a Help topic to each object for which you plan to provide context-sensitive Help.</li>
</ol>
<h4>Specifying a Help File</h4>
<p>
You determine the Help file that can be accessed in your application by including the command <a href="lngset_help.htm">SET HELP TO file</a> in your code, where <i>file</i> is the name of your Help file. For example, if your Help file is called Myhelp.hlp, you can use the following command:</p>
<pre><code>SET HELP TO MYHELP.HLP
</code></pre>
<p>
This command is typically included in the setup code for the main program of your application.</p>
<h4>Assigning Help Topics</h4>
<p>
You can assign a Help topic to specific objects in your Visual FoxPro application.</p>
<p class=label>
<b>To assign a Help topic to an object</b>
<ol>
<li>
In Design mode, open the object — a form, control, or toolbar, for example — that you want to assign context-sensitive Help to.<br><br></li>
<li>
View the object's properties.<br><br></li>
<li>
Set the <a href="lnghelpcontextid_property.htm">HelpContextID</a> property to the number representing a specific topic in your Help file.</li>
</ol>
<p>
For more information about mapping Help topics to context ID numbers, see the Help Authoring Guide.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To assign Help topics to menu titles or menu commands, you must include the <a href="lngset_topic.htm">SET TOPIC TO</a> command in the procedure associated with the menu title or menu command. </p>
<h3>Implementing "What's This?" Help</h3>
<p>
"What's This?" Help is similar to context-sensitive Help because it provides Help related to the specific object or control that currently has focus. However, instead of invoking the Help file and displaying the Help topic in the full default-sized Help window, "What's This?" Help displays the topic in a small pop-up window that disappears as soon as the user clicks anywhere on the screen. "What's This?" Help is useful for providing brief tip-style descriptions or definitions for specific controls.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Keep your "What's This?" Help topics brief and concise so that the window doesn't grow too large to obscure the feature you're describing.</p>
<p class=label>
<b>"What's This?" Help</b></p>
<p>
<img src="afd24003.gif" border=0></p>
<p>
You associate "What's This?" Help with a particular form, form control, or toolbar by setting its <a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a> property to a number representing a specific topic in your Help file.</p>
<p>
Use the following properties and methods to implement "What's This?" Help:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthishelpproperty.htm">WhatsThisHelp</a></td>
<td width=71%>Set this property to true (.T.) on a form to enable "What's This?" Help for the form and any controls on the form.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthisbuttonproperty.htm">WhatsThisButton</a></td>
<td width=71%>Set this property to true (.T.) if you want a "What's This?" Help button to appear in the title bar of the form.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a></td>
<td width=71%>For a form, control, or toolbar, set this property to an ID number corresponding to a topic in your Help file.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngwhatsthismodemethod.htm">WhatsThisMode</a></td>
<td width=71%>Use this method to display the "What's This?" Help question mark mouse pointer and enable "What's This?" Help mode. Clicking an object displays the "What's This?" Help topic specified by the WhatsThisHelpID property for the object.</td>
</tr>
</table><br>
<p class=label>
<b>Using a "What's This?" button</b></p>
<p>
<img src="afd24004.gif" border=0></p>
<p class=label>
<b>To implement "What's This?" Help</b>
<ol>
<li>
In design mode, open the form you want to enable "What's This?" Help for.<br><br></li>
<li>
Set the form's <a href="lngwhatsthishelpproperty.htm">WhatsThisHelp</a> property to true (.T.).<br><br></li>
<li>
To display a "What's This?" Help button in the form's title bar, set the form's <a href="lngwhatsthisbuttonproperty.htm">WhatsThisButton</a> property to true (.T.).<br><br></li>
<li>
To associate a "What's This?" Help topic with the form, set the form's <a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a> property to an ID number corresponding to a topic in your Help file.<br><br></li>
<li>
To associate a "What's This?" Help topic with a specific control on the form, select the control and set its <a href="lngwhatsthishelpidproperty.htm">WhatsThisHelpID</a> property to an ID number corresponding to a topic in your Help file.</li>
</ol>
<h3>Programming Help Features</h3>
<p>
You can program your application so that users can access your Help system in Microsoft Help. Although a Help system can consist of one or more separate files, Help appears to users as part of your application.</p>
<p>
You can program your Visual FoxPro application to use graphical and .dbf-style Help with the SET HELP TO and SET TOPIC TO commands or with the WinHelp function described later in this chapter. <a href="lngset_help.htm">SET HELP TO</a> specifies the name of a custom Help file for your application. <a href="lngset_topic.htm">SET TOPIC TO</a> sets the identifying keyword for a topic in the custom Help file.</p>
<h3>Using the WinHelp Function</h3>
<p>
Another way to program your application to use Help is to call the WinHelp function. The WinHelp function is part of the Windows application programming interface (API). The WinHelp function is only available on the Windows platform.</p>
<p>
You can use the WinHelp function in addition to the HelpContextID property, especially to call a second Help file.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you use SET HELP TO, HELP ID, and SET TOPIC TO, you don't need to use the WinHelp function.</p>
<p class=label>
<b>To use the WinHelp function</b>
<ol>
<li>
Define the command parameters that you'll pass in your application.<p class=tl>
For a description of these parameters, see "The wCmd Parameter" later in this chapter.</P></li>
<li>
Set the library with <a href="lngset_library.htm">SET LIBRARY TO</a> and define the variables to be used, typically in the initialization code for your application's main file.<pre><code>SET LIBRARY TO SYS(2004) + "FOXTOOLS.FLL" ADDITIVE
Help = RegFn("Help", "LCIC", "I")
</code></pre>
<p class=tl>
The library must be set to Foxtools.fll. <a href="lngsyslp2004rp___visual_foxpro_start_directory.htm">SYS(2004)</a> returns the Visual FoxPro root directory, where Foxtools.fll is installed.</P><p class=tl>
If you want to open a Help topic by sending its K keyword, define a variable with RegFn(&nbsp;), like the Help variable in the previous example. If you want to open a Help topic mapped with a number, define a variable with RegFn like the HelpI variable in the previous example and use a number instead of a string for <i>dwData</i>. If you pass numbers, you must map them in the [MAP] section of the .hpj file to unique context strings defined with the number sign (#) footnote.</P></li>
<li>
Use CallFn(&nbsp;) to call the function.<p class=tl>
For example, if your Help file is called Myhelpfile.hlp, use CallFn(&nbsp;) to open a topic in Myhelpfile.hlp by including the topic's K keyword:</P><pre><code>#define HELP_KEY 0x0101
wCmd = HELP_KEY
cFilename = Myhelpfile.hlp"
dwData = "Add Menu Items at Run Time"
CallFn(Help, MainHWND(), cFileName, wCmd, dwData)
</code></pre>
</li>
</ol>
<p>
&nbsp;For more information on FoxTools functions, see Foxtools.chm in the Vfp98\Tools directory.</p>
<h3>Specifying WinHelp Parameters</h3>
<p>
The following parameters specify options for the WinHelp function.</p>
<h4>The hWnd Parameter</h4>
<p>
The <i>hWnd</i> parameter identifies the window requesting Help. Help uses this identifier to track which applications have requested Help. In Visual FoxPro, use the MainHWND(&nbsp;) function included in the Foxtools.fll library for the <i>hWnd </i>parameter.</p>
<h4>The lpzFileName Argument</h4>
<p>
The <i>lpzFileName</i> argument represents a text string designating a valid path and file name for the Help file containing the desired topic. It is passed by value.</p>
<h4>The wCmd Parameter</h4>
<p>
The <i>wCmd </i>parameter specifies either the type of search that Help uses to locate the specified topic or that the application no longer requires Help. It can be set to any of the following values.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Constant</b></td>
<td class=label width=27%><b>Value</b></td>
<td class=label width=40%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=33%>HELP_FINDER</td>
<td width=27%>0x000B</td>
<td width=40%>Displays the Help Finder window.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_CONTEXT</td>
<td width=27%>0x0001</td>
<td width=40%>Displays Help for a particular topic identified by a context number.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_HELPONHELP</td>
<td width=27%>0x0004</td>
<td width=40%>Loads Help.hlp and displays the Using Help index topic.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_INDEX</td>
<td width=27%>0x0003</td>
<td width=40%>Displays the main Help index topic as defined in the [OPTIONS] section of the Help Project file (.hpj).</td>
</tr>
<tr valign=top>
<td width=33%>HELP_KEY</td>
<td width=27%>0x0101</td>
<td width=40%>Displays the first topic found in the keyword list that corresponds to the keyword in the <i>dwData </i>parameter.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_QUIT</td>
<td width=27%>0x0002</td>
<td width=40%>Informs the Help application that Help is no longer needed. If no other applications have requested Help, Windows closes the Help application.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_SETINDEX</td>
<td width=27%>0x0005</td>
<td width=40%>Sets a specific topic as the index topic.</td>
</tr>
</table><br>
<h4>The dwData Parameter</h4>
<p>
The <i>dwData</i> parameter represents the topic for which the application is requesting Help. Its content and format depend on the value of <i>wCmd</i> passed when your application calls the WinHelp function.</p>
<p>
In most calls to Help you pass the <i>dwData</i> argument by value. This is the default in Visual FoxPro.</p>
<p>
Depending on the circumstances, <i>dwData</i> in the preceding line can either represent a text string, indicating a keyword to look up, or a numeric value, indicating the context number that identifies a specific topic.</p>
<p>
The following list describes the format of <i>dwData </i>for each value of <i>wCmd.</i></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>wCmd Value</b></td>
<td class=label width=67%><b>dwData Format</b></td>
</tr>
<tr valign=top>
<td width=33%>HELP_CONTEXT</td>
<td width=67%>A numeric value containing the context number for the topic. Instead of using HELP_INDEX, HELP_CONTEXT can use the value –1.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_HELPONHELP</td>
<td width=67%>Ignored.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_INDEX</td>
<td width=67%>Ignored.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_KEY</td>
<td width=67%>A long pointer to a string that contains a keyword for the desired topic.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_QUIT</td>
<td width=67%>Ignored.</td>
</tr>
<tr valign=top>
<td width=33%>HELP_SETINDEX</td>
<td width=67%>A numeric value containing the context number for the topic you want as the index.</td>
</tr>
</table><br>
<p>
Because the WinHelp function can specify either a context number or a keyword, it supports both context-sensitive Help and topical searches of the Help file.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If a Help file contains two or more indexes, the application must assign one as the default. To ensure that the correct index remains set, the application should call Help with <i>wCmd</i> set to help_setindex (with <i>dwData </i>specifying the corresponding context identifier). Each call to Help should be followed with a command set to help_context. You should never use HELP_index with help_setindex.</p>
<h4>Reserving F1 for Help</h4>
<p>
When a user presses F1 in your application, Visual FoxPro can display a context-sensitive Help topic. To do this, assign a Help context ID to a topic in your Help table and assign the same value to the <a href="lnghelpcontextid_property.htm">HelpContextID</a> property of your form or control. When the form or control has the focus and the user presses F1, Visual FoxPro displays the matching topic.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;F1 is enabled for context-sensitive Help by default. Because this is a recognized standard for Help, redefining this key is not recommended.</p>
<h4>Including Help Buttons on Forms</h4>
<p>
If you add Help buttons to your forms, users can access Help more easily. You should especially consider adding a Help button if your user is a novice.</p>
<p class=label>
<b>To set context sensitivity and add a Help button</b>
<ol>
<li>
In the <a href="lnginit_event.htm">Init</a> event for your form, set the <a href="lnghelpcontextid_property.htm">HelpContextID</a> property for all the form's objects to the same value you assigned to the Help topic. For example, if the value is 7, you can use the following command:<pre><code>THIS.SetAll("HelpContextID", 7)
</code></pre>
</li>
<li>
Add a command button to your form.<br><br></li>
<li>
Set the <a href="lngcaption_property.htm">Caption</a> property of the command button to Help.<br><br></li>
<li>
In the <a href="lngclick_event.htm">Click</a> event of the command button, add the following command:<pre><code>HELP ID THIS.HelpContextID
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Save the Help button as a class so that you can easily add it to any form. For more information about saving objects as classes, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>.</p>
<h4>Quitting Help</h4>
<p>
The Help application is a shared resource available to all Windows applications. Because it is also a stand-alone application, the user can execute it like any other application. As a result, your application has limited control over the Help application.</p>
<p>
While your application cannot directly close the Help application window, it can inform the Help application that Help is no longer needed. Before closing its main window, your application should call Help with the <i>wCmd</i> parameter set to help_quit, which informs Help that your application will not need it again.</p>
<p>
An application that has called Help at some point during its execution must call Help with the <i>wCmd</i> parameter set to help_quit before the application terminates.</p>
<p>
If an application opens more than one Help file, it must call the WinHelp function to quit the Help application for each file.</p>
<p>
If an application or dynamic-link library (DLL) has opened a Help file but no longer wants the associated instance of the Help application to remain active, then the application or DLL should call Help with the <i>wCmd</i> parameter set to help_quit to quit that instance of the Help application.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Before terminating, an application or DLL should always call Help for any of the opened Help files. A Help file is opened if any other Help call has been made using the Help file name.</p>
<p>
The Help application does not exit until all windows that have called Help have subsequently called it with <i>wCmd</i> set to help_quit. If an application fails to do so, then the Help application will continue running, even after all applications that requested Help have terminated.</p>
</BODY>
</HTML>

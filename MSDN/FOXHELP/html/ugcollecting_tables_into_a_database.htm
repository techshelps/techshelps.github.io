<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Collecting Tables into a Database</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="ugcollecting_tables_into_a_database"></a><sup></sup>Chapter 3: Collecting Tables into a Database</h1>
<p>
Tables, used individually, are helpful for storing and viewing the information you work with. But if you organize your tables into a database, you can tap more of the power of Visual FoxPro. By putting your tables into a database, you can reduce storage of redundant data and protect the integrity of your data. For example, you do not have to repeatedly store the name and address of a customer for each order that the customer has placed. You can store the customer’s name and address in one table and relate that information to orders stored in another table. If the customer’s address changes, you only need to update one record. You can control how fields are displayed or what values may be entered into fields. You can also add views and connections to a database for updating records or expanding your access to remote data.</p>
<p>
This chapter explains the basics: incorporating tables or views into a database, setting relationships between tables, and controlling data entry and other properties for database tables. Databases, the process of database design, and the use of database table properties are covered in more detail in Chapter 5, <a href="dgdesigning_databases.htm">Designing Databases</a>, and Chapter 6, <a href="dgcreating_databases.htm">Creating Databases</a>, in the <i>Programmer’s Guide</i>.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#ugworking_with_a_database">Working with a Database</a></li>
<li>
<a href="#ugcreating_a_new_database">Creating a New Database</a><br><br></li>
<li>
<a href="#ugusing_the_database_wizard">Using the Database Wizard</a></li>
<li>
<a href="#ugdefining_field_display">Defining Field Display</a></li>
<li>
<a href="#ugcontrolling_data_entry_in_a_field">Controlling Data Entry in a Field</a></li>
<li>
<a href="#ugcontrolling_data_entry_in_a_record">Controlling Data Entry in a Record</a></li>
<li>
<a href="#ugmanaging_records_in_a_database">Managing Records in a Database</a></li>
</ul>

<h2><a name="ugworking_with_a_database"></a>Working with a Database</h2>
<p>
A database provides a working environment where you can store a collection of tables, establish relationships between the tables, and set properties and data validation rules that control how the related tables work together. A database is stored as a file with a .dbc extension.</p>
<p class=label>
<b>Contents of a database</b></p>
<p>
<img src="afu03001.gif" border=0></p>
<p>
You can use databases independently or incorporate them into a project by adding them to the Project Manager. To access the tables within a database, the database must be open.</p>
<p class=label>
<b>To open a database</b>
<ol>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the name of the database you want to use.<br><br></li>
<li>
Choose <b>Modify</b>.</li>
</ol>
<p>
You can also choose Open from the File menu and choose the name of a database.</p>
<p>
To look at the structure of a sample database, try opening Testdata.dbc, which is found in the Visual Studio …\Samples\Vfp98\Data directory.</p>
<p>
When you open a database, the Database Designer appears, showing you the tables that make up the database, and the relationships between them.</p>
<p class=label>
<b>Tables in the Database Designer</b></p>
<p>
<img src="afu03002.gif" border=0></p>
<p>
The Database Designer toolbar displays so that you can quickly access database-related options. Database commands are available on the Database menu; you can also display shortcut menus by clicking the right mouse button in the Database Designer.</p>
<p>
You can resize the tables in the Database Designer to see more or less of the fields and the indexes they contain, or collapse the table to show only the table names, which is helpful if your database contains many tables.</p>
<p class=label>
<b>To expand or collapse a single table</b>
<ol>
<li>
Place the pointer on a table in the <a href="wnddatabase_designer.htm">Database Designer</a> and click the right mouse button<br><br></li>
<li>
Choose <b>Expand</b> or <b>Collapse</b>.</li>
</ol>
<p class=label>
<b>To expand or collapse all the tables</b>
<ol>
<li>
Place the pointer in the <a href="wnddatabase_designer.htm">Database Designer</a> and click the right mouse button<br><br></li>
<li>
Choose <b>Expand All</b> or <b>Collapse All</b>.<p class=label>
<b>Collapsed view of tables in a database</b>
<p>
<img src="afu03003.gif" border=0></P></li>
</ol>
<p>
You can change the layout of your tables displayed in the Database Designer. For example, after working in the database, you might want to return the tables to the default height and width or you might want to improve the layout by aligning the tables.</p>
<p class=label>
<b>To arrange the tables in a database</b>
<ul type=disc>
<li>
From the <b>Database</b> menu, choose <b>Arrange</b>, and then select the appropriate options in the <b>Find Table</b> or <b>View</b> dialog box.<p class=tl>
In the <b>Database Designer</b>, the title bar of the table you selected is highlighted.</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>To</b></td>
<td class=label width=50%><b>Select</b></td>
</tr>
<tr valign=top>
<td width=50%>Arrange the tables alphabetically by name</td>
<td width=50%><b>By name</b></td>
</tr>
<tr valign=top>
<td width=50%>Arrange the tables by type</td>
<td width=50%><b>By type</b></td>
</tr>
<tr valign=top>
<td width=50%>Align the tables in a row</td>
<td width=50%><b>Horizontally</b></td>
</tr>
<tr valign=top>
<td width=50%>Align the tables in a column</td>
<td width=50%><b>Vertically</b></td>
</tr>
<tr valign=top>
<td width=50%>Return the tables to their original size</td>
<td width=50%><b>Resize objects to default height and width</b></td>
</tr>
</table><br>
</li>
</ul>
<p>
To keep notes about the database, you can add a comment.</p>
<p class=label>
<b>To add a comment to a database</b>
<ul type=disc>
<li>
From the <b>Database</b> menu, choose <b>Properties</b>, and then type your comment in the <b>Comment</b> box.</li>
</ul>

<h2><a name="ugcreating_a_new_database"></a>Creating a New Database</h2>
<p>
To incorporate your data into a database, first create a new database, then add the tables you want to work with and define the relationships between them. You can also create new local or remote views from within the <a href="wnddatabase_designer.htm">Database Designer</a> to incorporate them into your database.</p>

<h2><a name="ugusing_the_database_wizard"></a>Using the Database Wizard</h2>
<p>
You can use the Database Wizard to help you create a new database. The wizard provides templates and poses a series of questions to help you set up your database based on your answers.</p>
<p class=label>
<b>To create a database using the Database Wizard</b>
<ol>
<li>
In the <B><b>Project Manager</b></B>, select the <B><b>Data</b></B> tab and select <B><b>Databases</b></B>.<br><br></li>
<li>
Choose <B><b>New</b></B>.<br><br></li>
<li>
Choose the <B><b>Database Wizard</b></B> button.<br><br></li>
<li>
Follow the instructions on the wizard screens.</li>
</ol>
<p>
You can also access the Database Wizard from the menu by choosing New from the File menu, selecting Database, and selecting the Database Wizard option.</p>
<p>
The wizard provides templates for tables and views, indexes, primary keys, and relationships you can choose or edit.</p>
<p class=label>
<b>To create a new database</b>
<ol>
<li>
In the <b>Project Manager</b>, select <b>Databases</b>.<br><br></li>
<li>
Choose <b>New</b>.</li>
</ol>
<p>
When you create a new database, an empty Database Designer window is displayed, along with the Database Designer toolbar.</p>
<p class=label>
<b>A new database in the Database Designer</b></p>
<p>
<img src="afu03004.gif" border=0></p>
<h3>Adding Tables to a Database</h3>
<p>
Begin building your database by adding the tables you want to use. You can select any table that is not currently part of another database. Since tables can only belong to one database at a time, you need to remove a table from a database before you can use it in a new database.</p>
<p class=label>
<b>To add a table to a database</b>
<ol>
<li>
From the <b>Database</b> menu, choose <b>Add Table</b>.<br><br></li>
<li>
In the <b>Open</b> dialog box, select a table and choose <b>OK</b>.</li>
</ol>
<p>
You can remove a table from a database if it is no longer needed, or if you need to use it in another database.</p>
<p class=label>
<b>To remove a table from a database</b>
<ol>
<li>
Select the table.<br><br></li>
<li>
From the <b>Database</b> menu, choose <b>Remove</b>.<br><br></li>
<li>
In the dialog box, choose <b>Remove</b>.</li>
</ol>
<h3>Creating and Adding Views</h3>
<p>
Views display records from one or more tables and can be used to update those source tables. If you want to add a local view to your database, you can create one from the tables or views currently contained in your database, or from free tables outside your database. If the information you need is on a remote data source, you can create a remote view from it and incorporate that view into your database.</p>
<p>
Because views exist only within the context of a database, you must create a view within your database in order to incorporate it into your database.</p>
<p>
For information about creating local or remote views, see Chapter 5, <a href="ugupdating_data_with_views.htm">Updating Data with Views</a>.</p>
<h3>Finding a Table or View in a Database</h3>
<p>
If your database has many tables and views, you might want to quickly locate a specific table. You can use the Find command to highlight the table or view you want to work with.</p>
<p class=label>
<b>To find a table in a database</b>
<ul type=disc>
<li>
From the <b>Database</b> menu, choose <b>Find Object</b>, and then select the table you want to find in the <b>Find Table or View</b> dialog box.</li>
</ul>
<p>
If you want to show only the tables or only certain views, you can choose to display only tables or certain views.</p>
<p class=label>
<b>To display only the tables or views</b>
<ul type=disc>
<li>
From the <b>Database</b> menu, choose <b>Properties</b>, and then select the appropriate display options in the <b>Database Properties</b> dialog box.</li>
</ul>
<h3>Relating Tables</h3>
<p>
The Database Designer makes it easy to create relationships between tables by linking their indexes. The relationships you create in a database are called <a href="glspersistent_relationship.htm">persistent relationships</a>, because they are stored as part of the database. Each time you use the tables in the <a href="wndquery_designer.htm">Query or View Designers</a>, or in the <a href="wnddata_environment_designer.htm">Data Environment Designer</a> when creating forms, these persistent relationships appear as default links or joins between the tables.</p>

<h4><a name="ugpreparing_for_relationships"></a>Preparing for Relationships</h4>
<p>
Before you can create a relationship between tables, the tables you want to relate need to have certain fields and indexes in common. The fields are called primary and foreign key fields. The <a href="glsprimary_key.htm">primary key</a> field identifies a specific record within a table. The <a href="glsforeign_key.htm">foreign key</a> field identifies the related records that reside in another table within the database. You also need to add a primary index to a primary key field and a regular index to a foreign key field.</p>
<p class=label>
<b>Indexes to support a relationship between two tables</b></p>
<p>
<img src="afu03005.gif" border=0></p>
<p>
To determine which tables need the fields, think about how your data is related by number of records. For example, one customer can have many orders. So, the customer table holds the primary records and the orders table has the related records.</p>
<p>
To prepare the primary table for a relationship to the table with the related records, you need to add a primary key field to the primary table, which in our example is Customers. You know this because the Customer table will contain one record for many related records in the Orders table.</p>
<p>
To provide a common field between the two tables, you need to add a foreign key field to the table with the related records, which in our example is the Orders table. The foreign key field should match the primary key field with the same data type and usually the same name as the primary key field. The indexes you create on the primary and foreign key fields should have the same expression.</p>
<p>
For more information about primary key fields, foreign key fields, and relationships, see Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, in the <i>Programmer’s Guide</i>.</p>
<p class=label>
<b>To prepare for relationships</b>
<ol>
<li>
Determine which table has the primary records and which table has the related records.<br><br></li>
<li>
To the table with the primary record, add an integer field, then add a primary index on the new field.<br><br></li>
<li>
To the table with the related records, add a field that matches the primary key in the other table, then add a regular index on that new field.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Use the same expression for both indexes. For example, if you use a function in the expression on the primary key field, you need to use the same function in the expression on the foreign key field.</p></li>
</ol>
<h3>Creating and Editing Relationships</h3>
<p>
With the key fields and indexes defined, you are now ready to create a relationship. If your tables are not already indexed, you need to open them in the Table Designer and add indexes to them. For information on indexing tables, see Chapter 2, <a href="ugcreating_tables_and_indexes.htm">Creating Tables and Indexes</a>.</p>
<p class=label>
<b>To create a relationship between tables</b>
<ul type=disc>
<li>
Drag from the index in one table to the matching index in another table.</li>
</ul>
<p>
Once you set the relationship, you see a line connecting the two tables in the Database Designer.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can see relationship lines only if the Relations option in the Database Properties dialog box is turned on. You can access the Database Properties dialog box by choosing Properties from the shortcut menu in the Database Designer.</p>
<p class=label>
<b>Line shows the relationship between two tables.</b></p>
<p>
<img src="afu03006.gif" border=0></p>
<p>
You can also edit the relationship.</p>
<p class=label>
<b>To edit a relationship between tables</b>
<ul type=disc>
<li>
Double-click the relationship line between the tables, and then select the appropriate settings in the <b>Edit Relationship</b> dialog box.</li>
</ul>
<p class=label>
<b>Edit Relationship dialog box</b></p>
<p>
<img src="afu03014.gif" border=0></p>
<p>
The type of relationship created is determined by the type of index used on the child table. For example, if the index on the child table is a <a href="glsprimary_index.htm">primary</a> or <a href="glscandidate_index.htm">candidate index</a>, the relation is one-to-one; otherwise (for <a href="glsunique_index.htm">unique</a> and <a href="glsregular_index.htm">regular</a> indexes) it is a one-to-many relationship.</p>

<h2><a name="ugdefining_field_display"></a>Defining Field Display</h2>
<p>
When you add tables to a database, you can immediately take advantage of additional properties not available when working with free tables. These properties are stored as part of the database, and remain with the table only as long as it belongs to the database.</p>
<p>
Using properties for fields in a database table, you can:</p>
<ul type=disc>
<li>
Assign captions to fields.</li>
<li>
Enter comments about the purpose of a field.</li>
<li>
Set default values for fields.</li>
<li>
Set an input mask and display format for a field.</li>
<li>
Set a control class and library for a field.</li>
<li>
Set validation rules to restrict the data that can be entered in a field.</li>
</ul>
<p>
The following sections describe some of these properties. You can find more information in Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, in the <i>Programmer’s Guide</i>.</p>
<h2>Setting a Field Caption</h2>
<p>
You can display descriptive labels for fields you display in the Browse window or on your forms by using field captions.</p>
<p class=label>
<b>To assign a caption to a field</b>
<ol>
<li>
Select the table in the <b>Database Designer</b> and choose <b>Modify</b>.<br><br></li>
<li>
Select the field you want to assign the caption to.<br><br></li>
<li>
In the <b>Caption</b> box, type the caption you want displayed for the field.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p>
For example, if the name of a field is Cust_ID, you can add a caption such as “Customer ID” to the field. Each time you browse the table, use the field in a query or view, or add the field to a form; you see the caption instead of the field name as a label for the field.</p>
<p class=label>
<b>Column name based on caption</b></p>
<p>
<img src="afu03007.gif" border=0></p>
<h2>Entering Comments for a Field</h2>
<p>
As you set up the structure of your tables, you may want to enter notes or comments to remind you or others of what the table field represents. You can annotate each field by typing a message in the Field Comment box in the Table Designer.</p>
<p class=label>
<b>Comments clarify the purpose of a field.</b></p>
<p>
<img src="afu03008.gif" border=0></p>
<p class=label>
<b>To add a comment to a field</b>
<ol>
<li>
In the <b>Table Designer</b>, select the field.<br><br></li>
<li>
In the <b>Field Comment</b> box, type your comment.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>

<h2><a name="ugcontrolling_data_entry_in_a_field"></a>Controlling Data Entry in a Field</h2>
<p>
You can make data entry into your table easier by supplying default values for fields and by defining validation rules for values entered into fields.</p>
<h2>Setting Default Field Values</h2>
<p>
If you want to have a value entered into a field automatically whenever you create a new record, you can set a default value for that field using the field properties in the Table Designer. For example, if most of your sales come from one particular region, you might want to set that region as the default value for the region field.</p>
<p class=label>
<b>To set a default value for a field</b>
<ol>
<li>
In the <b>Database Designer</b>, select the table.<br><br></li>
<li>
From the <b>Database</b> menu, choose <b>Modify</b>.<br><br></li>
<li>
In the <b>Table Designer</b>, select the field you want to assign the default value to.<br><br></li>
<li>
In the <b>Default value</b> box, type the field value you want displayed in all new records (enclose character fields in quotes).<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p>
For example, you might want all new records in a Products table to have a default “reorder at” setting of 15 units.</p>
<p class=label>
<b>Setting a default value for a field</b></p>
<p>
<img src="afu03009.gif" border=0></p>
<h2>Setting Validation Rules and Validation Text</h2>
<p>
By entering a validation rule for a field when defining the structure of a table, you can control the type of entry that can be made to that field. For example, you could restrict the acceptable entries for a field to a list of states, open purchase order numbers, valid ID numbers, and so on.</p>
<p class=label>
<b>To set a validation rule and validation text for a field</b>
<ol>
<li>
Open a table in the <b>Table Designer</b>.<br><br></li>
<li>
In the <b>Table Designer</b>, select the name of the field you want to set a rule for.<br><br></li>
<li>
Choose the dialog button next to the <b>Rule</b> box.<br><br></li>
<li>
In the <b>Expression Builder</b>, set up the validation expression and choose <b>OK</b>.<br><br></li>
<li>
In the <b>Message</b> box, type the error message in quotes.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p>
For example, try creating a simple address table and restricting the entries in the Country field to “UK” or “USA.”</p>
<pre><code>Customer.country = "UK" OR Customer.country = "USA"
</code></pre>
<p>
You can also specify the message to display if the validation rule is not met. For example, you could display this message:</p>
<pre><code>"Country must be USA or UK. Please reenter value."
</code></pre>
<p>
When creating your validation rule, you must create a valid Visual FoxPro expression that takes into account the field length, that a field can either be empty or contain the desired value, and so on. Your expression may include functions if the functions evaluate to true or false.</p>
<p>
For example, assume you are using the Customer table from the Visual Studio …\Samples\Vfp98\Data directory, and you want to be sure that any new customer ID codes are less than 6 characters long. In the Validation Rule box for the Cust_ID field, you could enter:</p>
<pre><code>LEN(ALLTRIM(CUST_ID)) &lt; 6
</code></pre>
<p>
Then, in the Validation Text box, you would enter this error prompt:</p>
<pre><code>"Customer ID must be less than 6 characters. Please reenter."
</code></pre>
<p>
If you try to enter a customer ID that is too long, the validation text appears in a dialog box.</p>
<p class=label>
<b>Validation text appears when incorrect value is entered.</b></p>
<p>
<img src="afu03010.gif" border=0></p>

<h2><a name="ugcontrolling_data_entry_in_a_record"></a>Controlling Data Entry in a Record</h2>
<p>
Just as you can assign database properties to the individual fields within a table, you can set properties which apply to the entire table, or to the records within a table. In the Table Designer, you access these properties on the Table tab.</p>
<h2>Setting a Validation Rule for a Table</h2>
<p>
If you want two or more fields to be compared, or to meet a certain condition as records are entered into a table, you can set a validation rule for the table.</p>
<p class=label>
<b>To set a validation rule</b>
<ol>
<li>
Select the table and choose <b>Modify</b>.<br><br></li>
<li>
In the <b>Table Designer</b>, choose the <b>Table</b> tab.<br><br></li>
<li>
In the <b>Rule</b> box, enter a valid Visual FoxPro expression that defines the rule. Choose the dialog button to use the <b>Expression Builder</b>.<br><br></li>
<li>
In the <b>Message</b> box, enter the prompt you want to be displayed if the rule is broken.<br><br></li>
<li>
Choose <b>OK</b>.<br><br></li>
<li>
In the <b>Table Designer</b>, choose <b>OK</b>.</li>
</ol>
<p>
For example, assume you are using the Customer table found in the Visual Studio …\Samples\Vfp98\Data directory, and don’t want customer orders from the state of Washington to exceed $10,000. You can enforce this rule by typing the following expression into the Validation Rule box in the Table tab:</p>
<pre><code>IIF(Customer.region = "WA" and Customer.maxordamt &gt; 10000, .F.,.T.)
</code></pre>
<p>
The Message Text value could be something like:</p>
<pre><code>"Orders from WA state customers cannot exceed $10,000"
</code></pre>
<p class=label>
<b>Entry rejected based on validation rule.</b></p>
<p>
<img src="afu03011.gif" border=0></p>
<h2>Setting a Trigger</h2>
<p>
<i>Triggers</i> are expressions that activate whenever a record is inserted, deleted, or updated in the table. Usually, triggers involve writing a program, or stored procedure, that is activated when the table is changed. For more information about triggers, see “Using Triggers” in Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, in the <i>Programmer’s Guide</i>.</p>

<h2><a name="ugmanaging_records_in_a_database"></a>Managing Records in a Database</h2>
<p>
After establishing relationships, you can also set rules for managing the related records in your database. These rules govern <a href="glsreferential_integrity.htm">referential integrity</a>. For example, if you add a supplier record, you might want to automatically add information about the supplier's products to the Products table. To help you set up rules to control how records are inserted, updated, or deleted in related tables, you can use the Referential Integrity Builder.</p>
<p class=label>
<b>Referential Integrity button in Edit Relationship dialog box</b></p>
<p>
<img src="afu03015.gif" border=0></p>
<p class=label>
<b>To use the Referential Integrity Builder</b>
<ol>
<li>
In the <b>Database Designer</b>, create a relationship between two tables, or double-click the relationship line to edit the relationship.<br><br></li>
<li>
In the <b>Edit Relationship</b> dialog box, choose the <b>Referential Integrity</b> button.<br><br></li>
<li>
In the <b>Referential Integrity Builder</b>, select the rules you want to enforce for updating, deleting, or inserting records.<br><br></li>
<li>
Choose <b>OK</b>, and then choose <b>Yes</b> to save your changes, generate RI code, and exit the builder.</li>
</ol>
</BODY>
</HTML>

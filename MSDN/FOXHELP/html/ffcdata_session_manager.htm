<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Session Manager (VFP Foundation Class)</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="ffcdata_session_manager"></a><sup></sup>Data Session Manager</h1>
<p>
<a href="ffcdata_session_managersa.htm">See Also</a></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Category</b></td>
<td width=67%>Application</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Default Catalog</b></td>
<td width=67%>Visual&nbsp;FoxPro&nbsp;Catalog\Foundation&nbsp;Classes\Application</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Class</b></td>
<td width=67%>_datasession</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Base Class</b></td>
<td width=67%>Custom</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Class Library</b></td>
<td width=67%>_app.vcx</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Parent Class</b></td>
<td width=67%>_custom</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Sample</b></td>
<td width=67%>...\Samples\Vfp98\Solution\Ffc\environ.scx</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
This class is used to manage data sessions and handle data updates in all forms or formsets in the current data session. It enables an Application object to easily iterate through sessions to provide Windows-closing behavior during Exit or Shutdown. It also provides generic QueryUnload behavior for forms and formsets, and generic session-wide Update and Revert code. You can use it to evaluate whether any data has been changed in a session before you use your own conflict handling procedure. </p>
<p>
This class works with free tables as well as tables in databases. Observe the transactions limit (5).</p>
<p>
To use, drop the class on a project or form or, from the Component Gallery <a href="newitem_shortcut_menu.htm">Item Shortcut menu</a>, select <b>Add to Project</b> or <b>Add to Form</b>. When you add the class to a form, Visual FoxPro places the class on the form. You can then specify the appropriate property values and provide any necessary input and output objects. When you drop the class on a project, you can choose between adding the class or creating a subclass.</p>
<p>
See <a href="ffcusing_visual_foxpro_foundation_classes.htm">Guidelines for Using Visual FoxPro Foundation Classes</a> for more information on using foundation classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Properties, Events, Methods</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=48%>iDataChangedMode property</td>
<td width=52%>Specifies the type of data change performed.<p class=tl>
0 - Everything changed. <br>
1 - Ignore view fields not in Updatefields list. <br>
2- Ignore views not set to send updates.</P><p>
<B><b>Default: </b></B>0</p>
</td>
</tr>
<tr valign=top>
<td width=48%>iSavedSessionID property</td>
<td width=52%>Specifies integer value representing the ID of the saved session.<br>
<B><b>Default: </b></B>1</td>
</tr>
<tr valign=top>
<td width=48%>lSuccess property</td>
<td width=52%>Specifies whether the data operation (update) was successful.<br>
<B><b>Default: </b></B>.T.</td>
</tr>
<tr valign=top>
<td width=48%>lUseTransactions property</td>
<td width=52%>Specifies whether to wrap the updating routine in a transaction.<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Only tables in a database container (.dbc) are affected in transactions.</p>
<p>
<B><b>Default: </b></B>.T.</p>
</td>
</tr>
<tr valign=top>
<td width=48%>DataChanged method</td>
<td width=52%>Checks if data has changed.<br>
<B><b>Syntax: </b></B>DataChanged(&nbsp;)<br>
<B><b>Return:</b></B> none<br>
<B><b>Arguments: </b></B> none</td>
</tr>
<tr valign=top>
<td width=48%>DataFlush method</td>
<td width=52%>Ensures that the active control will have its current contents "recognized" even if you choose to update from a toolbar button while a grid has the focus.<br>
<B><b>Syntax:</b></B> DataFlush(&nbsp;)<br>
<B><b>Return:</b></B> none<br>
<B><b>Arguments: </b></B>none</td>
</tr>
<tr valign=top>
<td width=48%>GetActiveControlRef method</td>
<td width=52%>Returns the truly active control, <i>loRealActiveControl</i>, in cases where the current active control is a Grid.<br>
<B><b>Syntax:</b></B> GetActiveControlRef(<i>toActiveControl</i>)<br>
<B><b>Return:</b></B> <i>loRealActiveControl</i><br>
<B><b>Arguments: <br>
</b></B><i>toActiveControl</i> specifies the current control.</td>
</tr>
<tr valign=top>
<td width=48%>GetMessageBoxTitle method</td>
<td width=52%>Returns a portion of the titlebar text specifying the name of the message.<br>
<B><b>Syntax:</b></B> GetMessageBoxTitle(&nbsp;)<br>
<B><b>Return:</b></B> <i>cTitlebarText</i><br>
<B><b>Arguments: </b></B> none</td>
</tr>
<tr valign=top>
<td width=48%>QueryUnload method</td>
<td width=52%>Provides dialog boxes to manage data change decisions.<br>
<B><b>Syntax: </b></B>QueryUnload(<i>tlDataChangeAlreadyConfirmed</i>,<i> toForm</i>,<i> tlNoShow</i>)<br>
<B><b>Return:</b></B> <i>liResult </i><br>
<B><b>Arguments: <br>
</b></B><i>tlDataChangeAlreadyConfirmed </i>specifies whether data has been changed<br>
<i>toForm </i>specifies<i> </i>the form.<i><br>
tlNoShow</i> specifies whether to display the form.<br>
<i>liResult </i>specifies the MESSAGEBOX or value.</td>
</tr>
<tr valign=top>
<td width=48%>RestoreSessionID method</td>
<td width=52%>Restores the data session.<br>
<B><b>Syntax:</b></B> RestoreSessionID<br>
<B><b>Return:</b></B> none<br>
<B><b>Arguments: </b></B> none</td>
</tr>
<tr valign=top>
<td width=48%>Revert method</td>
<td width=52%>Reverts the session to original data.<br>
<B><b>Syntax:</b></B> Revert(<i>tlUserChoiceAlreadyConfirmed</i>,<i> tlDataChangeAlreadyConfirmed</i>,<i> toForm</i>,<i> tlNoShow</i>)<br>
<B><b>Return:</b></B> none<br>
<B><b>Arguments: </b></B> <i>tlUserChoiceAlreadyConfirmed</i> specifies whether to display a confirmation dialog.<br>
<i>tlDataChangeAlreadyConfirmed</i> specifies whether to display a confirmation dialog.<br>
<i>toForm </i>specifies<i> </i>the form.<i><br>
tlNoShow</i> specifies whether to display the form.</td>
</tr>
<tr valign=top>
<td width=48%>SetSessionID method</td>
<td width=52%>Sets the data session.<br>
<B><b>Syntax:</b></B> SetSessionID(&nbsp;)<br>
<B><b>Return:</b></B> none<br>
<B><b>Arguments: </b></B> none</td>
</tr>
<tr valign=top>
<td width=48%>Update method</td>
<td width=52%>Updates data.<br>
<B><b>Syntax:</b></B> Update(<i>tlUserChoiceAlreadyConfirmed</i>,<i> tlDataChangeAlreadyConfirmed</i>,<i> toForm</i>,<i> tlNoShow</i>)<br>
<B><b>Return:</b></B> none<br>
<B><b>Arguments: </b></B> <i>tlUserChoiceAlreadyConfirmed</i> specifies whether to display a confirmation dialog.<br>
<i>tlDataChangeAlreadyConfirmed</i> specifies whether to display a confirmation dialog.<br>
<i>toForm </i>specifies<i> </i>the form.<i><br>
tlNoShow</i> specifies whether to display the form.</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COMPILE Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngcompile"></a><sup></sup>COMPILE Command</h1>
<p>
<a href="lngcompilesa.htm">See Also</a></p>
<p>
Compiles one or more source files and creates an object file for each source file.</p>
<p class=label>
<b>Syntax</b></p>
<p>
COMPILE [CLASSLIB | LABEL | REPORT] <i>FileName</i> | <i>FileSkeleton</i> | ?<br>
 &nbsp; [ENCRYPT] [NODEBUG]<br>
 &nbsp; [AS <i>nCodePage</i>]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
CLASSLIB</p>
<p class=indent>
Specifies that the file to compile is a visual class library (.vcx). Visual class library source code is stored in memo fields in the visual class library table. COMPILE CLASSLIB compiles these memo fields into object code that is stored in an additional memo field.</p>
<p class=dt>
LABEL</p>
<p class=indent>
Specifies that the file to compile is a label definition file (.lbx). Source code for the data environment saved with the label definition file is compiled and stored in an additional memo field.</p>
<p class=dt>
REPORT</p>
<p class=indent>
Specifies that the file to compile is a report definition file (.frx). Source code for the data environment saved with the report definition file is compiled and stored in an additional memo field.</p>
<p class=dt>
<i>FileName</i> | <i>FileSkeleton</i></p>
<p class=indent>
Specifies for compilation a single file <i>FileName</i> or a set of files that match a file skeleton <i>FileSkeleton</i> containing wildcards such as * and ?. For example, to compile all program files with the extension .prg in the current directory or folder, issue COMPILE *.PRG.</p>
<p class=dt>
?</p>
<p class=indent>
Displays the Compile dialog box, allowing you to choose a file to compile.</p>
<p class=dt>
ENCRYPT</p>
<p class=indent>
Encrypts your compiled Visual FoxPro programs. Cannot be used with the CLASSLIB, LABEL, and REPORT keywords. This prevents any access to your original source programs. For additional source code protection, always include this option when compiling programs intended for distribution.</p>
<p class=dt>
NODEBUG</p>
<p class=indent>
Reduces the size of your compiled file by 2 bytes per source file line. Cannot be used with the CLASSLIB, LABEL, and REPORT keywords. These two bytes in the compiled file are a reference to the corresponding line in the source file. Removing these two bytes doesn't affect the program's performance, but it does reduce your compiled file size, and conserves disk space.</p>
<p class=tl>
When you include NODEBUG, you cannot view a program's execution in the Trace window or use MESSAGE(1) to return the source code for a line that causes an error.</P><p class=dt>
AS <i>nCodePage</i></p>
<p class=indent>
Specifies the code page for which the program is compiled. Cannot be used with the CLASSLIB, LABEL, and REPORT keywords. The compilation code page you specify with this clause overrides the global compilation code page specified with <a href="lngset_cpcompile.htm">SET CPCOMPILE</a>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Visual FoxPro executes only object files, so if a source file hasn't been compiled it is automatically compiled when you run the program. The source file remains unchanged. A separate compiled file is created with the same root name as the source file, but with a different extension. The following table lists the source and compiled file extensions for each file type:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>File type</b></td>
<td class=label width=33%><b>Source extension</b></td>
<td class=label width=34%><b>Compiled extension</b></td>
</tr>
<tr valign=top>
<td width=33%>Program file</td>
<td width=33%>PRG</td>
<td width=34%>FXP</td>
</tr>
<tr valign=top>
<td width=33%>Form code</td>
<td width=33%>SPR</td>
<td width=34%>SPX</td>
</tr>
<tr valign=top>
<td width=33%>Menu code</td>
<td width=33%>MPR</td>
<td width=34%>MPX</td>
</tr>
<tr valign=top>
<td width=33%>Query</td>
<td width=33%>QPR</td>
<td width=34%>QPX</td>
</tr>
<tr valign=top>
<td width=33%>Format</td>
<td width=33%>FMT</td>
<td width=34%>PRX</td>
</tr>
</table><br>
<p>
The compiler detects any syntax errors in the source file. Compilation error messages are saved to a text file if SET LOGERRORS is ON when the file is compiled. The error log file has the same root name as the compiled file, and has an .err extension. If SET LOGERRORS is OFF, the error log file isn't created.</p>
</BODY>
</HTML>

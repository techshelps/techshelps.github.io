<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Designing Menus and Toolbars</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgdesigning_menus_and_toolbars"></a><sup></sup>Chapter 11: Designing Menus and Toolbars</h1>
<p>
<a href="glsmenu.htm">Menus</a> and <a href="glstoolbar.htm">toolbars</a> provide a structured and accessible route for users to leverage the commands and tools contained in your applications. Proper planning and design of menus and toolbars will ensure that the key functionality of your applications is exposed, and that users will not become frustrated as they try to use your applications.</p>
<p>
For information about customizing Visual FoxPro toolbars, see Chapter 3, <a href="igconfiguring_visual_foxpro.htm">Configuring Visual FoxPro</a>, in the <i>Installation Guide</i>.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dgusing_menus_in_your_applications">Using Menus in Your Applications</a></li>
<li>
<a href="#dgcreating_custom_toolbars">Creating Custom Toolbars</a></li>
<li>
<a href="#dgtesting_and_debugging_a_menu_system">Testing and Debugging a Menu System</a></li>
<li>
<a href="#dgcustomizing_a_menu_system">Customizing a Menu System</a></li>
</ul>

<h2><a name="dgusing_menus_in_your_applications"></a>Using Menus in Your Applications</h2>
<p>
Users often browse <a href="glsmenu.htm">menus</a> before looking elsewhere for information about your application. If your menus are well designed, users can organize their understanding of the application by developing a mental model based on the menu organization and content alone. With the Visual FoxPro Menu Designer, you can create menus that enhance the quality of your applications.</p>
<p>
Each part of a Visual FoxPro application can have its own <a href="glsmenu_system.htm">menu system</a>, or set of menus. The following sections describe how to create a menu system, but don't explain how to incorporate the menu system into your application. For details about adding menus to an application, see Chapter 13, <a href="dgcompiling_an_application.htm">Compiling an Application</a>.</p>
<p>
The following sections describe:</p>
<ul type=disc>
<li>
<a href="#dgcreating_a_menu_system">Creating a Menu System</a></li>
<li>
<a href="#dgplanning_a_menu_system">Planning a Menu System</a></li>
<li>
<a href="#dgcreating_menus_shortcut_menus_menu_items_and_submenus">Creating Menus, Shortcut Menus, Menu Items, and Submenus</a></li>
<li>
<a href="#dgassigning_tasks_to_a_menu_system">Assigning Tasks to a Menu System</a></li>
</ul>

<h3><a name="dgcreating_a_menu_system"></a>Creating a Menu System</h3>
<p>
Much of the work involved in creating a menu system is done in the Menu Designer, where you create the actual menus, submenus, and menu options.</p>
<p class=label>
<b>Menu Designer</b></p>
<p>
<img src="afd11001.gif" border=0></p>
<p>
Creating a menu system involves several steps. Regardless of the size of your application and the complexities of the menus you plan to use, you should:</p>
<ul type=disc>
<li>
Plan and design the system.<p class=tl>
Decide what menus you need, where they appear in the interface, which ones need submenus, and so on. For more information about planning menu systems, see <a href="#dgplanning_a_menu_system">Planning a Menu System</a> later in this chapter.</P></li>
<li>
Create the menus and submenus.<p class=tl>
Define the menu titles, menu items, and submenus using the Menu Designer.</P></li>
<li>
Assign tasks to the system so that it does what you want.<p class=tl>
Specify tasks for the menus to perform, such as displaying forms and dialog boxes. Additionally, include <a href="glssetup_code.htm">setup code</a> and <a href="glscleanup_code.htm">cleanup code</a> if appropriate. Setup code executes before the menu system is defined and can include code for opening files, declaring <a href="glsvariable.htm">variables</a>, or placing the menu system on a <a href="glsstack.htm">stack</a> so that it can be retrieved later. Cleanup code contains code to be executed after the menu definition code, and makes menus and menu items available or unavailable for selection.</P></li>
<li>
Generate the menu program.</li>
<li>
Run the program to test the system.</li>
</ul>

<h3><a name="dgplanning_a_menu_system"></a>Planning a Menu System</h3>
<p>
The usefulness of an application can depend on the quality of its <a href="glsmenu_system.htm">menu systems</a>. If you invest planning time in your menus, users will accept them readily and learn them quickly.</p>
<p>
While designing your menu system, consider the following guidelines:</p>
<ul type=disc>
<li>
Organize the system according to the tasks users will perform, not according to the hierarchy of programs in the application.<p class=tl>
Users can form a mental model of how the application is organized by looking at the menus and menu items. To design these menus and menu items effectively, you should know how your users will think about and accomplish their work.</P></li>
<li>
Give each menu a meaningful title.</li>
<li>
Organize menu items according to their expected frequency of use, their logical sequence, or their alphabetical order.<p class=tl>
If you can’t predict the frequency and can’t determine a logical order, then organize menu items alphabetically. Alphabetical ordering is particularly effective when a menu contains more than eight items. With so many items, the user spends time scanning them; alphabetical ordering facilitates scanning.</P></li>
<li>
Put separator lines between logical groups of menu items.</li>
<li>
Limit the number of items on a menu to one screen.</li>
<li>
If the number exceeds the length of a screen, create submenus for appropriate menu items.</li>
<li>
Choose <a href="glsaccess_key.htm">access keys</a> and keyboard shortcuts for menus and menu items.<p class=tl>
For example, ALT+F could be an access key for a File menu.</P></li>
<li>
Use words that clearly describe the menu items.<p class=tl>
Use common words rather than computer jargon, and use simple, active verbs to indicate what actions will result from choosing each menu item. Don’t use nouns as verbs. Additionally, describe the menu items using parallel construction. For example, if you use single words for all the items, then use the same part of speech for all of them.</P></li>
<li>
Use mixed upper and lowercase letters in menu items.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To see an example of a menu system, run the Tasmanian Traders application, Tastrade.app, located in the Visual Studio …\Samples\Vfp98\Tastrade directory.</p></li>
</ul>

<h3><a name="dgcreating_menus_shortcut_menus_menu_items_and_submenus"></a>Creating Menus, Shortcut Menus, Menu Items, and Submenus</h3>
<p>
After planning your menu system, you can create it with the Menu Designer. You can create menus, shortcut menus, menu items, submenus of menu items, lines that separate groups of related menu items, and so on. The following sections provide the details.</p>
<h4>Creating Menus</h4>
<p>
You can create menus by customizing the existing Visual FoxPro menu system or by developing your own menu system. To start with the existing Visual FoxPro menu system, use the Quick Menu feature.</p>
<p class=label>
<b>To create a menu system with Quick Menu</b>
<ol>
<li>
From the <a href="wndproject_manager.htm">Project Manager</a>, select the <b>Other</b> tab, select <b>Menus</b>, and then select <b>New</b>.<br><br></li>
<li>
Select <b>Menu</b>.<p class=tl>
The <b>Menu Designer</b> appears.</P></li>
<li>
From the <b>Menu</b> menu, choose <b>Quick Menu</b>.<p class=tl>
The <b>Menu Designer</b> now contains information about the main Visual FoxPro menus.</P><p class=label>
<b>A menu system created with the Quick Menu feature</b>
<p>
<img src="afd11002.gif" border=0></P></li>
<li>
Customize the menu system by adding or changing menu items.<p class=atl>
For example, insert a Customer menu before the Help menu by choosing the mover button associated with the Help menu, choosing the <b>Insert</b> button, and then typing <b>Customer</b> in the <b>Prompt</b> column. The result looks like this:</p><p class=label>
<b>A customized menu system</b>
<p>
<img src="afd11003.gif" border=0></P></li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Drag mover buttons to change the location of menus on the menu bar.</p>
<p class=indent>
If you need a Help menu, make it the last menu on the menu bar so that users can find it quickly.</p>
<p>
Before you can use your menu in an application, you must generate it.</p>
<p class=label>
<b>To generate a menu</b>
<ul type=disc>
<li>
From the <a href="cmdmenu_menu.htm">Menu menu</a>, choose <b>Generate</b>.</li>
</ul>
<p>
Visual FoxPro prompts you to save the menu system in a file with an .mnx extension. This file is a table that will store all the information about the menu system. After you save the menu system, Visual FoxPro prompts for an output file with an .mpr extension. This file will contain the generated menu program.</p>
<h4>Creating Shortcut Menus</h4>
<p>
Shortcut menus appear when you click the right mouse button on a <a href="glscontrol.htm">control</a> or <a href="glsobject.htm">object</a>, and provide a quick way to expose all of the functions that apply to just that object. You can use Visual FoxPro to create shortcut menus, then attach these menus to controls. For example, you can create a shortcut menu containing the commands Cut, Copy, and Paste that will appear when a user right-clicks on data contained in a <a href="ctlgrid_control.htm">Grid control</a>.</p>
<p class=label>
<b>To create a shortcut menu</b>
<ol>
<li>
From the <a href="wndproject_manager.htm">Project Manager</a>, select the <b>Other</b> tab, select <b>Menus</b>, and then choose <b>New</b>.<br><br></li>
<li>
Choose <b>Shortcut</b>.<p class=tl>
The <b>Shortcut Designer</b> appears.</P></li>
</ol>
<p>
Once you are in the Shortcut Menu designer, the process for adding menu items is the same as it is for creating menus.</p>
<p>
For an example of shortcut menus, run Solution.app in the Visual Studio …\Samples\Solution\Vfp98\Solution directory.</p>
<h4>Creating SDI Menus</h4>
<p>
SDI menus are menus that appear in <a href="glssdi.htm">single-document interface</a> (SDI) windows. To create an SDI menu you must indicate that the menu will be used on an SDI form while you're designing the menu. Other than that, the process of creating an SDI menu is the same as that for creating a normal menu.</p>
<p class=label>
<b>To create an SDI menu</b>
<ul type=disc>
<li>
While the <a href="wndmenu_designer.htm">Menu Designer</a> is open, choose <b>General Options</b> from the <b>View</b> menu, and select <b>Top-Level Form</b>.</li>
</ul>
<h4>Creating Menu Items</h4>
<p>
After creating menus, you can place menu items on the menus. Menu items can represent Visual FoxPro commands or procedures that you want the user to execute, or menu items can contain submenus that offer additional menu items.</p>
<p class=label>
<b>To add menu items to a menu</b>
<ol>
<li>
In the <b>Prompt</b> column, select the menu title to which you want to add menu items.<br><br></li>
<li>
In the <b>Result</b> box, select <b>Submenu</b>.<p class=tl>
A <b>Create</b> button appears to the right of the list.</P></li>
<li>
Choose the <b>Create</b> button.<p class=tl>
An empty design window appears. In this window, you enter the menu items.</P></li>
<li>
In the <b>Prompt</b> column, type the names of the new menu items.</li>
</ol>
<h4>Creating Submenus</h4>
<p>
For each menu item, you can create a submenu containing additional menu items.</p>
<p class=label>
<b>To create a submenu</b>
<ol>
<li>
In the <b>Prompt</b> column, select the menu item to which you want to add a submenu.<br><br></li>
<li>
In the <b>Result</b> box, select <b>Submenu</b>.<p class=tl>
A <b>Create</b> button appears to the right of the list. If a submenu already exists, an <b>Edit</b> button appears instead.</P></li>
<li>
Select <b>Create</b> or <b>Edit</b>.<br><br></li>
<li>
In the <b>Prompt</b> column, type the names of the new menu items.</li>
</ol>
<h4>Adding Menus Programmatically</h4>
<p>
Though you typically create menus and menu items using the Menu Designer, you can also create them using Visual FoxPro commands. For example, you can create a menu using <a href="lngdefine_pad.htm">DEFINE PAD</a>, a submenu using <a href="lngdefine_popup.htm">DEFINE POPUP</a>, and items on the submenu using a series of <a href="lngdefine_bar.htm">DEFINE BAR</a> commands.</p>
<h4>Grouping Menu Items</h4>
<p>
For readability, separate groups of similar menu items with dividing lines. For example, in Visual FoxPro, the Edit menu has a line separating the Undo and Redo commands from the Cut, Copy, Paste, Paste Special, and Clear commands.</p>
<p class=label>
<b>Grouped menu items</b></p>
<p>
<img src="afd11004.gif" border=0></p>
<p class=label>
<b>To group menu items</b>
<ol>
<li>
In the <b>Prompt</b> column, type <b>\-</b>. This creates a dividing line.<br><br></li>
<li>
Drag the button to the left of the <b>\-</b> prompt to move the dividing line until it appears where you want it.</li>
</ol>
<h3>Saving a Menu as HTML</h3>
<p>
You can use the <b>Save As HTML</b> option on the <b>File</b> menu when you're creating a menu to save the contents of a menu as an HTML (Hypertext Markup Language) file.</p>
<p class=label>
<b>To save a form as HTML</b>
<ol>
<li>
Open the menu.<br><br></li>
<li>
Choose <b>Save As HTML</b> on the <b>File</b> menu. (You will be asked to save the menu if it has been modified.)<br><br></li>
<li>
Enter the name of the HTML file to create and choose <b>Save</b>.</li>
</ol>
<h3>Including Menus in an Application</h3>
<p>
Once you create a <a href="glsmenu_system.htm">menu system</a>, you can include it in your application.</p>
<p class=label>
<b>To include a menu system in your application</b>
<ul type=disc>
<li>
Add the .mnx file to your project, then build the application from the project. For more information about building your application, see Chapter 13, <a href="dgcompiling_an_application.htm">Compiling an Application</a>.</li>
</ul>
<h4>Attaching Shortcut Menus to Controls</h4>
<p>
Once you create and generate a <a href="glsshortcut_menu.htm">shortcut menu</a>, you can attach it to a control. Shortcut menus typically appear when a user right-clicks on a control. You can attach a shortcut menu to a particular <a href="glscontrol.htm">control</a> by entering a small amount of code in the right-click event of the control.
<ol>
<li>
Select the control to which you want to attach the shortcut menu.<br><br></li>
<li>
In the <a href="wndproperties_window.htm">Properties</a> window, choose the <b>Methods</b> tab and select <b>Right Click Event</b>.<br><br></li>
<li>
In the code window, type <b>DO</b> <i>menu</i><b>.MPR</b>, where <i>menu</i> is the name of the shortcut menu.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Be sure to use the .mpr extension when referencing shortcut menus.</p></li>
</ol>
<h4>Attaching SDI Menus to Forms</h4>
<p>
Once you create an SDI menu, you can attach it to an SDI form. In addition, you must:</p>
<ul type=disc>
<li>
Set the form’s <a href="lngshowwindow_property.htm">ShowWindow property</a>.</li>
<li>
Add a <a href="lngdo.htm">DO</a> statement to the form’s <a href="lnginit_event.htm">Init event</a>.</li>
</ul>
<p class=label>
<b>To attach an SDI menu to a form</b>
<ol>
<li>
In the <a href="wndform_designer.htm">Form Designer</a>, set the form’s ShowWindow property to <b>2 – As Top Level Form</b>.<br><br></li>
<li>
In the Init event of the form, call the menu.<p class=tl>
For example, if your menu is called <code>SDIMENU.MPR</code>, add this code:</P><pre><code>DO SDIMENU.MPR WITH THIS,.T.
</code></pre>
</li>
</ol>

<h3><a name="dgassigning_tasks_to_a_menu_system"></a>Assigning Tasks to a Menu System</h3>
<p>
As you create a <a href="glsmenu_system.htm">menu system</a>, you should consider ease of access to the system, and you must assign tasks to the system. You must give menus and menu items tasks to perform, such as displaying <a href="glsform.htm">forms</a>, <a href="glstoolbar.htm">toolbars</a>, and other menu systems. You should define <a href="glsaccess_key.htm">access keys</a> to permit entry to the menu system. You can also add keyboard shortcuts and enable or disable menu items for more control.</p>
<h4>Assigning Access Keys</h4>
<p>
Well-designed menus have <a href="glsaccess_key.htm">access keys</a> for quick keyboard access to the menu functionality. The access key is represented by the underlined letter in the menu title or menu item. For instance, the Visual FoxPro File menu uses “F” as its access key.</p>
<p>
If you don’t assign an access key to a menu title or menu item, Visual FoxPro automatically assigns the first letter as the access key. For example, the Customer menu created previously didn’t have a defined access key. Accordingly, Visual FoxPro assigned the first letter (C) as the access key.</p>
<p class=label>
<b>Menus with access keys</b></p>
<p>
<img src="afd11005.gif" border=0></p>
<p class=label>
<b>To specify the access key for a menu or menu item</b></p>
<ul type=disc>
<li>
Type <b>\&lt;</b> to the left of the letter you want as the access key.<p class=tl>
For example, to set the access key to “u” in the Customer menu title, replace <b>Customer</b> with <b>C\&lt;ustomer</b> in the Prompt column.</P></li>
</ul>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;If an access key for your menu system doesn’t work, look for duplicate access keys.</p>
<h4>Assigning Keyboard Shortcuts</h4>
<p>
In addition to assigning access keys, you can specify keyboard shortcuts for menus or menu items. As with access keys, keyboard shortcuts let you choose a menu or menu item by holding down one key while pressing another. The difference between access keys and keyboard shortcuts is that you can use a keyboard shortcut to choose a menu item without first displaying its menu.</p>
<p>
Keyboard shortcuts for Visual FoxPro menu items are combinations of the CTRL or ALT key and another key. For instance, you can create a new file in Visual FoxPro by pressing CTRL+N.</p>
<p class=label>
<b>To specify a keyboard shortcut for a menu or menu item</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu title or menu item.<br><br></li>
<li>
Choose the button in the <b>Options</b> column to display the <b>Prompt Options</b> dialog box.<br><br></li>
<li>
In the <b>Key Label</b> box, press a key combination to create a keyboard shortcut.<p class=tl>
If a menu item doesn’t have a keyboard shortcut, Visual FoxPro displays “(press the key)” in the <b>Key Label</b> box.</P></li>
<li>
In the <b>Key Text</b> box, add the text you want to appear beside the menu item.<p class=tl>
By default, Visual FoxPro repeats the keyboard shortcut from the <b>Key Label</b> box in the <b>Key Text</b> box. However, you can change the text in the <b>Key Text</b> box if you want your application to display different text. For example, if both the <b>Key Label</b> and <b>Key Text</b> were CTRL+R, you could change the <b>Key Text</b> value to ^R.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;CTRL+J is an invalid keyboard shortcut because it is used to close certain dialog boxes in Visual FoxPro.</p></li>
</ol>
<h4>Enabling and Disabling Menu Items</h4>
<p>
You can enable or disable a menu or menu item based on a logical condition.</p>
<p class=label>
<b>To enable or disable a menu or menu item</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu title or menu item.<br><br></li>
<li>
Choose the button in the <b>Options</b> column to display the <b>Prompt Options</b> dialog box.<br><br></li>
<li>
Select <b>Skip For</b>.<p class=tl>
The <b>Expression Builder</b> appears.</P><p class=label>
<b>Expression Builder Dialog Box</b>
<p>
<img src="afd11006.gif" border=0></P></li>
<li>
In the <b>Skip For</b> box, type the expression that determines whether the menu or menu item is enabled or disabled.<p class=tl>
If the expression evaluates to false (.F.), the menu or menu item is enabled. If the expression evaluates to true (.T.), the menu or menu item is disabled and cannot be selected or chosen. For details, see <a href="lngdefine_bar.htm">DEFINE BAR</a> and <a href="lngdefine_pad.htm">DEFINE PAD</a>.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;After the menu system has been displayed, you can enable and disable menus and menu items by using the <a href="lngset_skip_of.htm">SET SKIP OF</a> command..</p></li>
</ol>
<h4>Marking the State of a Menu Item</h4>
<p>
On a menu, a check mark next to a menu item indicates that it is in effect. For example, if you put a check mark next to the Credit item on the Customer menu created earlier, Credit is in effect.</p>
<p>
At run time, you can place a check mark next to a menu item by using the <a href="lngset_mark_of.htm">SET MARK OF</a> command.</p>
<p>
For an example of disabling and marking the state of menu items, run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.</p>
<h4>Assigning Tasks to Menus or Menu Items</h4>
<p>
When a menu or menu item is selected, it performs a task, such as displaying a <a href="glsform.htm">form</a>, a <a href="glstoolbar.htm">toolbar</a>, or another menu system. To perform a task, a menu or menu item must execute a Visual FoxPro command. The command can be contained in one line, or it can be a procedure call.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you expect to use a set of commands in several places, write a procedure. The procedure should be explicitly named and written in the menu <a href="glscleanup_code.htm">cleanup code</a>, or somewhere where it can be referenced by any menu or <a href="glsobject.htm">object</a>.</p>
<h4>Performing Tasks with Commands</h4>
<p>
To perform a task, you can assign a command to a menu or menu item. A command can be any valid Visual FoxPro command, including a call to a program that exists on your path or a procedure defined in the Cleanup option of the <a href="cmdgeneral_options_dialog_box.htm">General Options dialog box</a>. For more information, see <a href="#dgcreating_a_default_procedure_for_a_menu_system">Creating a Default Procedure for a Menu System</a> later in this chapter.</p>
<p class=label>
<b>To assign a command to a menu or menu item</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu title or menu item.<br><br></li>
<li>
In the <b>Result</b> box, select <b>Command</b>.<br><br></li>
<li>
In the box to the right of the <b>Result</b> box, type the appropriate command:<p class=label>
<b>Assigning a command to a menu</b>
<p>
<img src="afd11007.gif" border=0></P></li>
</ol>
<p>
If the command calls a procedure in the menu’s cleanup code, use the <a href="lngdo.htm">DO</a> command with the following <a href="glssyntax.htm">syntax</a>:</p>
<p>
DO <i>procname</i> IN <i>menuname</i></p>
<p>
In this syntax, <i>menuname</i> specifies the location of the procedure. This is the name of the menu file and must have the .mpr extension. If you don’t specify the location in <i>menuname</i>, you must specify it with <a href="lngset_procedure.htm">SET PROCEDURE</a> TO <i>menuname</i>.mpr, if the procedure is in the menu cleanup code.</p>
<h4>Displaying Forms and Dialog Boxes</h4>
<p>
From a menu or menu item, you can display a compiled form or dialog box by calling it with a command or <a href="glsprocedure.htm">procedure</a>. For example, to display a form named “Orders,” use the following command:</p>
<pre><code>DO FORM Orders
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;When you create a menu or menu item that displays a form or dialog box, put three dots at the end of the prompt to indicate that more user input is required.</p>
<p class=label>
<b>Dots after a menu item show that user input is required.</b></p>
<p>
<img src="afd11009.gif" border=0></p>
<h4>Displaying Toolbars</h4>
<p>
If you create a custom toolbar for an application, you can display it by calling it from a menu or menu item. For details, see <a href="#dgcreating_custom_toolbars">Creating Custom Toolbars</a> later in this chapter.</p>
<h4>Performing Tasks with Procedures</h4>
<p>
You can assign a <a href="glsprocedure.htm">procedure</a> to a menu or menu item. The way you assign a procedure depends on whether the menu or menu item has submenus.</p>
<p class=label>
<b>To assign a procedure to a menu or menu item without submenus</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu title or menu item.<br><br></li>
<li>
In the <b>Result</b> box, select <b>Procedure</b>.<p class=tl>
A <b>Create</b> button appears to the right of the list. If a procedure has been defined previously, an <b>Edit</b> button appears instead.</P></li>
<li>
Select <b>Create</b> or <b>Edit</b>.<p class=label>
<b>Assigning a procedure to a menu with submenus</b>
<p>
<img src="afd11011.gif" border=0></P></li>
<li>
Type the appropriate code in the window.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You don’t need to type the <a href="lngprocedure.htm">PROCEDURE</a> command in the procedure editing window because Visual FoxPro generates this statement for you. The only place you need the PROCEDURE statement is in the <a href="glscleanup_code.htm">cleanup code</a>.</p></li>
</ol>
<p class=label>
<b>To assign a procedure to a menu or menu item with submenus</b>
<ol>
<li>
In the <b>Menu level</b> box, select the level that includes the appropriate menu or menu item. For example, suppose your menu system includes the Customer menu created earlier. To assign a procedure to the Customer menu, select the “Menu Bar” level in the Menu Level box. Similarly, to assign a procedure to an item on the Customer menu, select the “Customer” level in the list.<br><br></li>
<li>
From the <b>View</b> menu, choose <b>Menu Options</b>.<p class=tl>
Visual FoxPro displays the <b>Menu Options</b> dialog box.</P><p class=label>
<b>Assigning a procedure to a menu with submenus</b>
<p>
<img src="afd11012.gif" border=0></P></li>
<li>
Assign the procedure by doing one of the following:<ul type=disc>
<li>
Write or call a procedure in the <b>Procedure</b> box.<p class=tl>
-or-</P></li>
<li>
Choose <b>Edit</b> and then <b>OK</b> to open a separate editing window and write or call a procedure.</li>
</ul>
</li>
</ol>
<h4>Adding Setup Code to a Menu System</h4>
<p>
You can customize a <a href="glsmenu_system.htm">menu system</a> by adding <a href="glssetup_code.htm">setup code</a> to it. Setup code can include code for creating the environment, defining variables, opening necessary files, and saving or restoring menu systems with the <a href="lngpush_menu.htm">PUSH MENU</a> and <a href="lngpop_menu.htm">POP MENU</a> commands.</p>
<p class=label>
<b>To add setup code to a menu system</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>General Options</b>.<br><br></li>
<li>
In the <b>Menu Code</b> area, select <b>Setup</b> and then choose <b>OK</b>.<br><br></li>
<li>
In the setup code window, type the appropriate setup code.<p class=tl>
Your changes are saved when you close the Menu Designer.</P></li>
</ol>
<h4>Adding Cleanup Code to a Menu System</h4>
<p>
You can tailor your menu system by adding <a href="glscleanup_code.htm">cleanup code</a> to it. Cleanup code typically contains code that initially enables or disables menus and menu items. When you generate and run the menu program, <a href="glssetup_code.htm">setup code</a> and menu definition code is processed before cleanup code.</p>
<p class=label>
<b>To add cleanup code to a menu system</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>General Options</b>.<br><br></li>
<li>
In the <b>Menu Code</b> area, select <b>Cleanup</b> and then choose <b>OK</b>.<br><br></li>
<li>
In the code window, type the appropriate cleanup code.<p class=tl>
Your changes are saved when you close the <b>Menu Designer</b>.</P></li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If your menu is the main program in an application, include a <a href="lngread_events.htm">READ EVENTS</a> command in the cleanup code and assign a <a href="lngclear.htm">CLEAR</a> EVENTS command to the menu command used to exit the menu system. This prevents your run-time applications from terminating prematurely.</p>
<h4>Controlling Menus at Run Time</h4>
<p>
Each Visual FoxPro menu has two names, and each menu item has a name and a number. Visual FoxPro uses one name in the user interface and the other name or number in the generated menu program (.mpr). You can use these names or numbers to reference and control menus and menu items at <a href="glsrun_time.htm">run time</a>. If you don't provide a name or number when creating menus and menu items, Visual FoxPro creates one when you generate the menu program.</p>
<p>
For an example of adding and removing menu items at run time, see Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Avoid using Visual FoxPro-generated names and numbers in code, because they change each time you generate the menu program. If you refer to a generated name or number, your code might fail.</p>
<p>
In the <a href="wndmenu_designer.htm">Menu Designer</a>, the Prompt column shows what appears in the user interface, and the column to the right of the Result box shows what appears in the generated program.</p>
<p class=label>
<b>Using Pad Name to reference a menu pad in the generated menu program</b></p>
<p>
<img src="afd11013.gif" border=0></p>
<p class=label>
<b>Using Bar # to reference a menu item in the generated menu program</b></p>
<p>
<img src="afd11014.gif" border=0></p>
<p class=label>
<b>To specify a name for a menu pad</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu title.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <b>Result</b> column must show <b>Command</b>, <b>Submenu</b>, or <b>Procedure</b> — not <b>Pad Name</b>.</p></li>
<li>
Choose the button in the <b>Options</b> column to display the <b>Prompt Options</b> dialog box.<br><br></li>
<li>
In the <b>Pad Name</b> box, type the name of your choice.<br><br></li>
<li>
Choose <b>OK</b> to return to the <b>Menu Designer</b>.</li>
</ol>
<p class=label>
<b>To specify a number for a menu item</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu item.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <b>Result</b> column must show <b>Command</b>, <b>Submenu</b>, or <b>Procedure</b> — not <b>Bar #</b>.</p></li>
<li>
Choose the button in the <b>Options</b> column to display the <b>Prompt Options</b> dialog box.<br><br></li>
<li>
In the <b>Bar #</b> box, type the number of your choice.<br><br></li>
<li>
Choose <b>OK</b> to return to the <b>Menu Designer</b>.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you use the Quick Menu feature, don’t change the names or numbers that Visual FoxPro provides for system menus or menu items; otherwise, you might get unpredictable results when you run the generated menu program.</p></li>
</ol>

<h2><a name="dgcreating_custom_toolbars"></a>Creating Custom Toolbars</h2>
<p>
If your application includes repetitive tasks that users perform frequently, you can add custom <a href="glstoolbar.htm">toolbars</a> to simplify or speed up the tasks. For example, if users typically print a report by choosing a menu command, you can simplify the task by providing a toolbar with a print button.</p>
<p>
The following sections describe how to create custom toolbars for your applications. For details about customizing the toolbars that come with Visual FoxPro, see <a href="cmdcustomize_toolbar_dialog_box.htm">Customize Toolbar Dialog Box</a>.</p>
<p>
The following sections discuss:</p>
<ul type=disc>
<li>
<a href="#dgdefining_a_toolbar_class">Defining a Toolbar Class</a></li>
<li>
<a href="#dgadding_objects_to_a_custom_toolbar_class">Adding Objects to a Custom Toolbar Class</a></li>
<li>
<a href="#dgadding_custom_toolbars_to_form_sets">Adding Custom Toolbars to Form Sets</a></li>
</ul>

<h3><a name="dgdefining_a_toolbar_class"></a>Defining a Toolbar Class</h3>
<p>
If you want to create a <a href="glstoolbar.htm">toolbar</a> that contains buttons not already found on existing toolbars, you can do so by defining a custom toolbar <a href="glsclass.htm">class</a>. Visual FoxPro provides a Toolbar <a href="glsbase_class.htm">base class</a> from which you can create the class you need.</p>
<p>
After defining a toolbar class, you can add <a href="glsobject.htm">objects</a> to the toolbar class, then define the properties, events, and methods for the custom toolbar. Finally, you can add the toolbar to a <a href="glsform_set.htm">form set</a>.</p>
<p class=label>
<b>To define a custom toolbar class</b>
<ol>
<li>
From the <a href="wndproject_manager.htm">Project Manager</a>, select <b>Classes</b> and then choose <b>New</b>.<br><br></li>
<li>
In the <b>Class Name</b> box, type the name of your class.<br><br></li>
<li>
From the <b>Based On</b> box, select <b>Toolbar</b> to use the Toolbar base class.<p class=tl>
-or-</P><p class=tl>
Choose the dialog button to choose another toolbar class.</P></li>
<li>
In the <b>Store</b> <b>In</b> box, type the name of the <a href="glsclass_library.htm">library</a> in which you want to save the new class.<p class=tl>
-or-</P><p class=tl>
Choose the dialog button to select an existing library.</P></li>
<li>
Add objects to the new toolbar class.</li>
</ol>
<p>
For example, you could store a printing class based on the Toolbar base class in an inventory library.</p>
<p class=label>
<b>Creating a new class in the New Class dialog box</b></p>
<p>
<img src="afd11015.gif" border=0></p>
<p>
When you complete the <a href="cmdnew_class_dialog_box.htm">New Class dialog box</a>, the Class Designer appears.</p>
<p class=label>
<b>A new custom toolbar in the Class Designer</b></p>
<p>
<img src="afd11016.gif" border=0></p>
<p>
You can also define a toolbar class by doing one of the following:</p>
<ul type=disc>
<li>
Choosing New from the File menu and then choosing Class.</li>
<li>
Using the <a href="lngcreate_class.htm">CREATE CLASS</a> or <a href="lngmodify_class.htm">MODIFY CLASS</a> command.</li>
<li>
Defining the class programmatically with the <a href="lngdefine_class.htm">DEFINE CLASS</a> command.</li>
</ul>

<h3><a name="dgadding_objects_to_a_custom_toolbar_class"></a>Adding Objects to a Custom Toolbar Class</h3>
<p>
After creating a custom toolbar <a href="glsclass.htm">class</a>, you can add <a href="glsobject.htm">objects</a> to it, including any objects supported by Visual FoxPro. For example, you can add objects from the Controls toolbar.</p>
<p class=label>
<b>To add objects to your custom toolbar class</b>
<ol>
<li>
Open the <a href="glsclass_library.htm">class library</a> containing the custom toolbar class, and then open the class.<br><br></li>
<li>
On the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a>, choose an object you want to add.<br><br></li>
<li>
Place the object on the custom toolbar by selecting the custom toolbar.<br><br></li>
<li>
Repeat steps 2 and 3 until the custom toolbar is complete.<br><br></li>
<li>
Reorganize the objects on the custom toolbar, if appropriate.<p class=tl>
For example, you can size objects, move them by dragging them, delete them by pressing the DELETE key, or add extra space between them by inserting <b>Separator</b> objects from the <b>Form Controls</b> toolbar.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can move only one object at a time.</p></li>
<li>
Set properties of the toolbar in the <b>Properties</b> window.<br><br></li>
<li>
Save the custom toolbar class.</li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can add a bitmap or icon to a toolbar button by setting its <a href="lngpicture_property.htm">Picture property</a>.</p>

<h3><a name="dgadding_custom_toolbars_to_form_sets"></a>Adding Custom Toolbars to Form Sets</h3>
<p>
After defining a toolbar <a href="glsclass.htm">class</a>, you can create a <a href="glstoolbar.htm">toolbar</a> from it. You can coordinate toolbars and <a href="glsform.htm">forms</a> by using the Form Designer or writing code.</p>
<h4>Coordinating Toolbars and Forms in the Form Designer</h4>
<p>
You can add a toolbar to a <a href="glsform_set.htm">form set</a> so that the toolbar opens along with the forms in the form set. You cannot add the toolbar directly to the form.</p>
<p class=label>
<b>To add a toolbar to a form set using the Form Designer</b>
<ol>
<li>
Register and select the <a href="glsclass_library.htm">library</a> containing the toolbar <a href="glsclass.htm">class</a>.<br><br></li>
<li>
Open the <a href="glsform_set.htm">form set</a> with which you want to use the toolbar class, click the <b>View Classes</b> button on the <b>Form Controls</b> toolbar, and then select the toolbar class from the list displayed.<br><br></li>
<li>
From the <b>Form Controls</b> toolbar, choose the toolbar class.<br><br></li>
<li>
Click in the <b>Form Designer</b> to add the toolbar, and then drag the toolbar to its appropriate location.<p class=tl>
Visual FoxPro adds the toolbar to the form set. If a form set isn’t open, Visual FoxPro prompts you for one.</P></li>
<li>
Define the actions of the toolbar and its buttons (see “<a href="#dgdefining_toolbar_actions">Defining Toolbar Actions</a>” later in this chapter).<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To determine an object’s class, look at its ToolTip in the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a>.</p></li>
</ol>
<p>
For more information on how to register and select the library containing the toolbar class, see “Adding Classes to Forms, Form Sets, and Toolbars” in Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>.</p>
<h4>Coordinating Toolbars and Forms Using Code</h4>
<p>
In addition to using the <a href="wndform_designer.htm">Form Designer</a>, you can add <a href="glstoolbar.htm">toolbars</a> to <a href="glsform_set.htm">form sets</a> by using code.</p>
<p class=label>
<b>To add a toolbar to a form set using code</b>
<ul type=disc>
<li>
In the form set’s <a href="lnginit_event.htm">Init</a> event, use the <a href="lngset_classlib.htm">SET CLASSLIB</a> command to specify the <a href="glsclass_library.htm">library</a> containing the toolbar <a href="glsclass.htm">class</a>, and then create a toolbar from that class in the form set.</li>
</ul>
<p>
For example, to add and display the toolbar <code>tbrPrint</code>, which is based on the <code>printing</code> class in the <code>inventory</code> class library, add the following code to the form set’s Init event:</p>
<pre><code>SET CLASSLIB TO inventory
THIS.AddObject("tbrPrint","printing")
THIS.tbrPrint.Show
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the toolbar class does not define the actions of the toolbar and its buttons, you must define the actions in the event <a href="glsprocedure.htm">procedures</a> associated with the toolbar and its buttons. For more information, see “<a href="#dgdefining_toolbar_actions">Defining Toolbar Actions</a>” later in this chapter.</p>
<h4>Example: Creating a Custom Toolbar</h4>
<p>
You can define all aspects of a toolbar in code. For example, if you add the following code to a form set’s Init event, when the form set is loaded Visual FoxPro creates and displays the toolbar defined in the code. This toolbar contains two buttons.</p>
<p class=label>
<b>Toolbar with two buttons</b></p>
<p>
<img src="afd11017.gif" border=0></p>
<p>
When chosen, these buttons change the font attributes of the form <code>frmForm1</code> in the form set.</p>
<p class=label>
<b>Form Set Init Event Code</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=57%><b>Code</b></td>
<td class=label width=43%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=57%><pre><code>THIS.AddObject("tbrTool1","mytoolbar")
THIS.tbrTool1.Show</code></pre>
</td>
<td width=43%>Adds a toolbar of the class <code>mytoolbar</code> to the current form set and makes the toolbar visible. This code is in the form set’s Init event.</td>
</tr>
</table><br>
<p class=label>
<b>Class definition code</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=57%><b>Code</b></td>
<td class=label width=43%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=57%><pre><code>DEFINE CLASS myToolBar AS TOOLBAR

ADD OBJECT cmdBold AS COMMANDBUTTON
ADD OBJECT sep1&nbsp;&nbsp;&nbsp; AS SEPARATOR
ADD OBJECT cmdItalic AS COMMANDBUTTON</code></pre>
</td>
<td width=43%>Start of the class definition: one toolbar with a command button, a separator, and another command button.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>Left = 1
Top&nbsp; = 1
Width = 25
Caption = "Form Attributes"</code></pre>
</td>
<td width=43%>Sets properties of the toolbar object.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>cmdBold.Caption = "B"
cmdBold.Height = 1.7
cmdBold.Width = 10

cmdItalic.Caption = "I"
cmdItalic.Height = 1.7
cmdItalic.Width = 10
cmdItalic.FontBold = .F.</code></pre>
</td>
<td width=43%>Sets properties of the controls. Notice that there are no Top or Left property settings for controls on a toolbar. Controls on a toolbar are automatically positioned in the order they are added.<br>
<br>
The FontBold property of <code>cmdItalic</code> is set to false (.F.) because FontBold is true (.T.) by default.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>PROCEDURE Activate
 &nbsp; THIS.cmdBold.FontBold = ;
 &nbsp;&nbsp; THISFORMSET.frmForm1.FontBold
 &nbsp; THIS.cmdItalic.FontItalic = ;
 &nbsp;&nbsp; THISFORMSET.frmForm1.FontItalic
ENDPROC</code></pre>
</td>
<td width=43%>When the toolbar is activated, the font attributes of the two command buttons are set to reflect the Bold and Italic font settings of <code>frmForm1</code>.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>PROCEDURE cmdBold.CLICK
 &nbsp; THISFORMSET.frmForm1.FontBold = ;
 &nbsp;&nbsp; !THISFORMSET.frmForm1.FontBold
 &nbsp; THIS.FontBold = ;
 &nbsp;&nbsp; THISFORMSET.frmForm1.FontBold
ENDPROC</code></pre>
</td>
<td width=43%>When the user clicks <code>cmdBold</code>, the FontBold setting of <code>frmForm1</code> is reversed, and the FontBold setting of <code>cmdBold</code> is set to match it.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>PROCEDURE cmdItalic.CLICK
 &nbsp; THISFORMSET.frmForm1.FontItalic = ;
 &nbsp;&nbsp; !THISFORMSET.frmForm1.FontItalic
 &nbsp; THIS.FontItalic = ;
 &nbsp;&nbsp; THISFORMSET.frmForm1.FontItalic
ENDPROC</code></pre>
</td>
<td width=43%>When the user clicks <code>cmdItalic</code>, the FontItalic setting of <code>frmForm1</code> is reversed, and the FontItalic setting of <code>cmdItalic</code> is set to match it.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>ENDDEFINE</code></pre>
</td>
<td width=43%>End of the class definition.</td>
</tr>
</table><br>
<h4>Setting Properties of Custom Toolbars</h4>
<p>
While designing a custom toolbar, you can set its <a href="glsproperty.htm">properties</a>. For example, you can set the <a href="lngmovable_property.htm">Movable property</a> to allow the user to move the toolbar.</p>
<p>
Additionally, you can use <a href="glsmethod.htm">methods</a> and <a href="glsevent.htm">events</a> to control custom toolbars. For example, you can use the <a href="lngdock_method.htm">Dock</a> method to dock or float a toolbar, and you can use the <a href="lngbeforedock_event.htm">BeforeDock</a> event and <a href="lngafterdock_event.htm">AfterDock</a> event to control what happens before and after a toolbar is docked.</p>

<h4><a name="dgdefining_toolbar_actions"></a>Defining Toolbar Actions</h4>
<p>
After creating a toolbar, you must define the actions associated with the toolbar and its <a href="glsobject.htm">objects</a>. For example, you must define what happens when the user clicks the toolbar or one of its buttons.</p>
<p class=label>
<b>To define a toolbar action</b>
<ol>
<li>
Select the object for which you want to define an action: the toolbar or one of its buttons.<br><br></li>
<li>
In the <a href="wndproperties_window.htm">Properties window</a>, choose the <b>Methods</b> tab.<br><br></li>
<li>
Edit the appropriate event.<br><br></li>
<li>
Add the code that specifies the action.</li>
</ol>
<p>
Additionally, you can set properties and methods of the toolbar and its objects.</p>
<h4>Coordinating Menus and Custom Toolbars</h4>
<p>
If you create a <a href="glstoolbar.htm">toolbar</a>, you should synchronize <a href="glsmenu.htm">menu</a> commands with their corresponding toolbar buttons. For example, if you enable a toolbar button, you should enable its corresponding menu command.</p>
<p>
You should design and create your application to:</p>
<ul type=disc>
<li>
Perform the same actions when the user chooses associated toolbar buttons and menu items.</li>
<li>
Coordinate the enabling and disabling of associated toolbar buttons and menu items.</li>
</ul>
<p>
Follow these general steps when coordinating menu items and toolbar buttons:
<ol>
<li>
Create a <a href="glstoolbar.htm">toolbar</a> by defining a toolbar <a href="glsclass.htm">class</a>, add <a href="glscommand_button_.htm">command buttons</a>, and include the operational code in the <a href="glsmethod.htm">methods</a> associated with the <a href="lngclick_event.htm">Click events</a> of the command buttons.<br><br></li>
<li>
Create the coordinated menu.<br><br></li>
<li>
Add the coordinated toolbar and menu to a <a href="glsform_set.htm">form set</a>.</li>
</ol>
<h4>Creating the Coordinated Menu</h4>
<p>
When you coordinate a <a href="glsmenu.htm">menu</a> with a <a href="glstoolbar.htm">toolbar</a>, the menu items accomplish the same tasks as the associated toolbar buttons, and the menu items are automatically disabled when the associated toolbar button is disabled.</p>
<p class=label>
<b>To create a menu that is coordinated with a toolbar</b>
<ol>
<li>
In the <a href="wndmenu_designer.htm">Menu Designer</a>, create a submenu with a descriptive prompt for every button on the toolbar.<br><br></li>
<li>
In the result column for each submenu item, choose <b>Command</b>.<br><br></li>
<li>
For each submenu item, call the code associated with the <a href="lngclick_event.htm">Click</a> event of the appropriate toolbar command button.<p class=tl>
For example, if the name of the button on the toolbar is <code>cmdA</code>, add the following line of code in the edit box for the submenu item command:</P><pre><code>Formset.toolbar.cmdA.Click
</code></pre>
</li>
<li>
Choose the button in the <b>Options</b> column to open the <b>Prompt Options</b> dialog box and choose <b>Skip For</b>.<br><br></li>
<li>
In the <a href="wndexpression_builder_dialog_box.htm">Expression Builder</a>, enter an expression that indicates that the menu option should be skipped when the toolbar command button is not enabled.<p class=tl>
For example, if the name of the button on the toolbar is <code>cmdA</code>, enter the following expression in the <b>Skip For</b> box:</P><pre><code>NOT formset.toolbar.cmdA.Enabled
</code></pre>
</li>
<li>
Generate the menu.<br><br></li>
<li>
Add the menu to the form set with the toolbar and run the form set.</li>
</ol>
<p>
When the user opens the menu, Visual FoxPro evaluates the Skip For condition, disabling the menu item if the associated toolbar command button is disabled. When the user chooses an item on the menu, the code in the <a href="lngclick_event.htm">Click event</a> of the associated toolbar command button is executed.</p>
<h4>Adding a Coordinated Toolbar and Menu to a Form Set</h4>
<p>
Once you have created a toolbar <a href="glsclass.htm">class</a> and a <a href="glsmenu.htm">menu</a> that are designed to work together, it is easy to incorporate them in a <a href="glsform_set.htm">form set</a>.</p>
<p class=label>
<b>To incorporate a coordinated toolbar and menu in a form set</b>
<ol>
<li>
Add the toolbar to the form set in one of three ways:<ul type=disc>
<li>
Drag the toolbar class from the <a href="wndproject_manager.htm">Project Manager</a> into the <a href="wndform_designer.htm">Form Designer</a>.<br><br></li>
<li>
Register the toolbar <a href="glsclass_library.htm">class library</a> and add the toolbar to the form set from the <a href="tlsform_controls_toolbar.htm">Controls toolbar</a>.<br><br></li>
<li>
In the <a href="lnginit_event.htm">Init</a> event of the form set, include code with the <a href="lngaddobject_method.htm">AddObject</a> method to add the toolbar.</li>
</ul>
</li>
<li>
In the <a href="lngload_event.htm">Load</a> event of the form set, save the existing menu and run your menu program.<p class=tl>
For example, if your menu name is <code>mymenu</code>, include the following lines of code using the <a href="lngpush_menu.htm">PUSH MENU</a> and <a href="lngdo.htm">DO</a> commands:</P><pre><code>PUSH MENU _MSYSMENU
DO mymenu.mpr
</code></pre>
</li>
<li>
In the Unload event of the form set, restore the original menu with the <a href="lngpop_menu.htm">POP MENU</a> command:<pre><code>POP MENU _MSYSMENU
</code></pre>
</li>
</ol>
<p>
If some menu commands are used more than others, you can create custom toolbars containing buttons for those commands. Then, users can simply press the buttons whenever they need the commands. However, if you create a toolbar, you should synchronize the menu commands with their corresponding buttons. For example, if you enable a button, you should enable its corresponding menu command.</p>

<h2><a name="dgtesting_and_debugging_a_menu_system"></a>Testing and Debugging a Menu System</h2>
<p>
You can preview a <a href="glsmenu_system.htm">menu system</a> as you design it or you can test and debug it after generating the menu program.</p>
<p class=label>
<b>To preview a menu system as you design it</b>
<ul type=disc>
<li>
In the <a href="wndmenu_designer.htm">Menu Designer</a>, choose <b>Preview</b>.</li>
</ul>
<p>
When you choose Preview, the menu system you’ve defined appears at the top of the screen. Additionally, the Preview dialog box displays the file name (or a temporary file name) of the menu system.</p>
<p class=label>
<b>Previewing a menu system</b></p>
<p>
<img src="afd11018.gif" border=0></p>
<p>
If you select a menu title or menu item, it also appears in the Preview dialog box, along with the command assigned to it, if there is one.</p>
<p class=label>
<b>To test a menu system</b>
<ol>
<li>
From the <a href="cmdmenu_menu.htm">Menu menu</a>, choose <b>Generate</b>.<p class=tl>
If you’ve changed the menu, Visual FoxPro prompts you to save the changes.</P></li>
<li>
In the <b>Generate Menu</b> dialog box, enter a name for the generated menu program by typing the name in the <b>Output File</b> box or by choosing the dialog button.<br><br></li>
<li>
Choose <b>Generate</b> to produce a menu program file with an .mpr extension.<br><br></li>
<li>
From the <b>Program</b> menu, choose <b>Do</b> to run the program.<p class=atl>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;If you modify the generated menu program (the .mpr file), you’ll lose the changes when you modify the menu using the <a href="wndmenu_designer.htm">Menu Designer</a> and then regenerate the menu program.</p></li>
</ol>
<p>
If the menu program doesn’t work as intended, use the diagnostic tools provided with Visual FoxPro. For more information, see Chapter 14, <a href="dgtesting_and_debugging_applications.htm">Testing and Debugging Applications</a>.</p>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;If you run an application (.exe file) in which the main program is a menu and the application terminates as soon as the menu is displayed, include the <a href="lngread_events.htm">READ EVENTS</a> command in the cleanup code. You must also assign a <a href="lngclear.htm">CLEAR</a> EVENTS command to the menu command that allows the user to exit the menu system.</p>

<h2><a name="dgcustomizing_a_menu_system"></a>Customizing a Menu System</h2>
<p>
After creating a basic <a href="glsmenu_system.htm">menu system</a>, you can customize it. For example, you can create status bar messages, define menu locations, or define default procedures.</p>
<h3>Displaying Status Bar Messages</h3>
<p>
When a menu or menu item is selected, you can display a status bar message describing the choice. Such a message helps the user by adding information about the menu choice.</p>
<p class=label>
<b>To display a message when a menu or menu item is selected</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu title or menu item.<br><br></li>
<li>
Choose the button in the <b>Options</b> column to display the <b>Prompt Options</b> dialog box.<br><br></li>
<li>
Select <b>Message</b>.<p class=tl>
The <b>Expression Builder</b> dialog box appears.</P></li>
<li>
In the <b>Message</b> box, type the appropriate message.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Enclose character strings in quotation marks.</p></li>
</ol>
<h3>Defining the Location of Menu Titles</h3>
<p>
You can customize the location of user-defined menu titles in your applications. You can customize the location relative to the active <a href="glsmenu_system.htm">menu system</a> by choosing options in the <a href="cmdgeneral_options_dialog_box.htm">General Options dialog box</a>. Additionally, you can specify the location of menu titles when the user edits an object visually.</p>
<p class=label>
<b>To specify a relative location for user — defined menu titles</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>General Options</b>.<br><br></li>
<li>
Choose the appropriate <b>Location</b> option: <b>Replace</b>, <b>Append</b>, <b>Before</b>, or <b>After</b>.</li>
</ol>
<p>
Visual FoxPro relocates all of the menu titles you’ve defined. If you want to relocate some but not all of them, drag the mover buttons next to the appropriate menu titles in the <a href="wndmenu_designer.htm">Menu Designer</a>.</p>
<p>
Additionally, you can specify the location of menu titles when the user edits an object in your application. If you include an <a href="glsobject.htm">object</a> and the user activates it, your menu titles will not appear on the resulting menu bar unless you indicate that you want them there.</p>
<p class=label>
<b>To control menu title location during object visual editing</b>
<ol>
<li>
In the <b>Prompt</b> column, select the appropriate menu title.<br><br></li>
<li>
Choose the button in the <b>Options</b> column to display the <b>Prompt Options</b> dialog box.<br><br></li>
<li>
Set the <b>Negotiate </b>check box.<br><br></li>
<li>
Choose one of the following option buttons:<ul type=disc>
<li>
<b>None</b> does not place the menu title on the menu bar. Choosing <b>None</b> is the same as not choosing any option.<br><br></li>
<li>
<b>Left</b> places the menu title in the left group of menu titles on the menu bar.<br><br></li>
<li>
<b>Middle</b> places the menu title in the middle group of menu titles on the menu bar.<br><br></li>
<li>
<b>Right</b> places the menu title in the right group of menu titles on the menu bar.</li>
</ul>
</li>
</ol>
<p>
If you don’t choose Left, Middle, or Right, the menu title will not appear on the menu bar when the user edits an object. For more information about editing objects visually, see Chapter 16, <a href="dgadding_ole.htm">Adding OLE</a>.</p>
<h3>Saving and Restoring Menus</h3>
<p>
You can save and restore menus on the stack with the <a href="lngpush_menu.htm">PUSH MENU</a> and <a href="lngpop_menu.htm">POP MENU</a> commands. Pushing and popping is useful when you want to remove a menu temporarily, replace it with another, and then restore the original later on.</p>
<p>
The number of menus you save in memory is limited only by the amount of available memory.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Check the available memory with the <a href="lngsyslp1016rp___user_object_memory_use.htm">SYS(1016)</a> function. For example, to check how much memory your menu system uses, call SYS(1016), push the menu on the stack, then call SYS(1016) again.</p>

<h3><a name="dgcreating_a_default_procedure_for_a_menu_system"></a>Creating a Default Procedure for a Menu System</h3>
<p>
You can create a global <a href="glsprocedure.htm">procedure</a> that applies to your entire <a href="glsmenu_system.htm">menu system</a>. Such a procedure runs whenever a menu without an assigned procedure is chosen.</p>
<p>
For example, suppose you’re developing an application for which some menus do not yet have submenus, procedures, and so on. For these menus, you can create a code stub that executes when the menus are chosen. For instance, you could create a general procedure that includes this function:</p>
<pre><code>MESSAGEBOX("Feature not available")
</code></pre>
<p class=label>
<b>To create a default procedure</b>
<ol>
<li>
Open the menu system you’re designing.<br><br></li>
<li>
From the <b>View</b> menu, choose <b>General Options</b>.<br><br></li>
<li>
Assign the procedure by doing one of the following:<ul type=disc>
<li>
Write or call a procedure in the <b>Procedure</b> box.<p class=tl>
-or-</P></li>
<li>
Select <b>Edit</b> and then <b>OK</b> to open a separate editing window and write or call a procedure.</li>
</ul>
</li>
</ol>
<h3>Setting the System Menu</h3>
<p>
You can manipulate menus that use the Visual FoxPro menu system by using the <a href="lngset_sysmenu.htm">SET SYSMENU</a> command. With SET SYSMENU, you can disable your menus, add and remove items from your menus, restore the default Visual FoxPro menus, and control access to your menus during program execution.</p>
</BODY>
</HTML>

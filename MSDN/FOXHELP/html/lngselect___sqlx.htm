<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SELECT - SQL Command Example</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<p class=label>
<b><a name="lngselect___sqlx"></a><sup></sup>SELECT - SQL Command Examples</b></p>
<p>
The following examples illustrate the use of user-defined functions with SELECT - SQL:</p>
<p>
<B><b>Example 1</b></B></p>
<p>
Example 1 displays the names of all companies in <code>customer</code> (one field from one table).</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> customer.company ;
 &nbsp; <span class=cfe><b>FROM</b></span> customer
</code></pre>
<p>
<B><b>Example 2</b></B></p>
<p>
Example 2 displays the contents of three fields from two tables and joins the two tables based on the <code>cust_id</code> field. It uses local aliases for both tables.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> a.company, b.order_date, b.shipped_on ;
 &nbsp; <span class=cfe><b>FROM</b></span> customer a, orders b ;
 &nbsp; <span class=cfe><b>WHERE</b></span> a.cust_id = b.cust_id
</code></pre>
<p>
<B><b>Example 3</b></B></p>
<p>
Example 3 displays only records with unique data in the specified fields.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT DISTINCT</b></span> a.company, b.order_date, b.shipped_on ;
 &nbsp; <span class=cfe><b>FROM</b></span> customer a, orders b ;
 &nbsp; <span class=cfe><b>WHERE</b></span>  a.cust_id = b.cust_id
</code></pre>
<p>
<B><b>Example 4</b></B></p>
<p>
Example 4 displays the <code>country</code>, <code>postalcode,</code> and <code>company</code> fields in ascending order.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> country, postalcode, company ;
 &nbsp; <span class=cfe><b>FROM</b></span> customer ;
 &nbsp; <span class=cfe><b>ORDER BY</b></span> country, postalcode, company
</code></pre>
<p>
<B><b>Example 5</b></B></p>
<p>
Example 5 stores the contents of fields from two tables in a third table.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> a.company, b.order_date, b.shipped_on ;
 &nbsp; <span class=cfe><b>FROM</b></span> customer a, orders b ;
 &nbsp; <span class=cfe><b>WHERE</b></span> a.cust_id = b.cust_id ;
 &nbsp; <span class=cfe><b>INTO TABLE</b></span> custship.dbf
BROWSE
</code></pre>
<p>
<B><b>Example 6</b></B></p>
<p>
Example 6 displays only records with an order date earlier than 02/16/1994.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> a.company, b.order_date, b.shipped_on ;
 &nbsp; <span class=cfe><b>FROM</b></span> customer a, orders b ;
 &nbsp; <span class=cfe><b>WHERE</b></span> a.cust_id = b.cust_id ;
 &nbsp; <span class=cfe><b>AND</b></span> b.order_date &lt; {^1994-02-16}
</code></pre>
<p>
<B><b>Example 7</b></B></p>
<p>
Example 7 displays the names of all companies from <code>customer</code> with a postal code that matches a postal code in the <code>orders</code> table.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> company <span class=cfe><b>FROM</b></span> customer a <span class=cfe><b>WHERE</b></span> ;
 &nbsp; <span class=cfe><b>EXISTS</b></span> (<span class=cfe><b>SELECT</b></span> * <span class=cfe><b>FROM</b></span> orders b <span class=cfe><b>WHERE</b></span> a.postalcode = b.postalcode)
</code></pre>
<p>
<B><b>Example 8</b></B></p>
<p>
Example 8 displays all records from <code>customer</code> having a company name that begins with an uppercase C and is an unknown length.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> * <span class=cfe><b>FROM</b></span> customer a <span class=cfe><b>WHERE</b></span> a.company <span class=cfe><b>LIKE</b></span> "C%"
</code></pre>
<p>
<B><b>Example 9</b></B></p>
<p>
Example 9 displays all records from <code>customer</code> having a country name that begins with an uppercase U and is followed by one unknown character.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> * <span class=cfe><b>FROM</b></span> customer a <span class=cfe><b>WHERE</b></span> a.country <span class=cfe><b>LIKE</b></span> "U_"
</code></pre>
<p>
<B><b>Example 10</b></B></p>
<p>
Example 10 displays the names of all cities in <code>customer</code> in uppercase and names the output column <code>CityList</code>.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
<span class=cfe><b>SELECT</b></span> UPPER(city) <span class=cfe><b>AS</b></span> CityList <span class=cfe><b>FROM</b></span> customer
</code></pre>
<p>
<B><b>Example 11</b></B></p>
<p>
Example 11 demonstrates how you can perform a query on data that contains percentage signs (%). A backslash (\) is placed before the percentage sign to indicate that it should be treated as a literal, and the backslash is specified as the escape character in the ESCAPE clause.</p>
<p>
Because the sample tables included with Visual FoxPro do not contain the percentage sign character, this query returns no results.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
SELECT * FROM customer;
WHERE company LIKE "%\%%" ESCAPE "\"
</code></pre>
<p>
<B><b>Example 12</b></B></p>
<p>
Example 12 demonstrates how you can perform a query on data that contains underscores (_). A backslash (\) is placed before the underscore to indicate that it should be treated as a literal, and the backslash is specified as the escape character in the ESCAPE clause.</p>
<p>
Because the sample tables included with Visual FoxPro do not contain the underscore character, this query returns no results.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
SELECT * FROM customer;
WHERE company LIKE "%\_%" ESCAPE "\"
</code></pre>
<p>
<B><b>Example 13</b></B></p>
<p>
In example 13, the Escape character uses itself as a literal. The dash is both the escape character and a literal. The query returns all rows where the company name contains a percentage sign followed by a dash.</p>
<p>
Because the sample tables included with Visual FoxPro do not contain the percentage sign character, this query returns no results.</p>
<pre><code>CLOSE ALL
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
SELECT * FROM customer;
WHERE company LIKE "%-%--%" Escape "-"
</code></pre>
</BODY>
</HTML>

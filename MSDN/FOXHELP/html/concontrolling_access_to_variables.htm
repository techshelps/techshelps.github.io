<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Controlling Access to Variables</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="concontrolling_access_to_variables"></a><sup></sup>Controlling Access to Variables</h1>
<p>
Variables exist only while an application is running or during the Visual FoxPro session in which they are created. To specify the scope of a variable, use the LOCAL, PRIVATE, and PUBLIC keywords.
<ul type=disc>
<li>
<a href="lnglocal.htm">LOCAL</a> creates variables or arrays that can be used and modified only in the program they are created, and cannot be accessed by higher or lower level programs. Local variables and arrays are released once the program containing them stops running.<br><br></li>
<li>
<a href="lngprivate.htm">PRIVATE</a> hides variables or arrays that were defined in a calling program from the current program. You can then reuse those variable names in the current program without affecting the original variables. Once the program containing PRIVATE has stopped running, all variables and arrays that were declared privately are again available.<br><br></li>
<li>
<a href="lngpublic.htm">PUBLIC</a> defines global variables or arrays. Global variables and arrays can be used and modified from any program you run during the current Visual FoxPro session. Any variable or array you create in the Command window is automatically public.</li>
</ul>
<h4>Accessing Variables</h4>
<p>
If a variable has the same name as a field, Visual FoxPro always gives precedence to the field name. You can reference the variable using <code>m.</code> or <code>m-&gt;</code> plus the variable name, as in the following examples.</p>
<pre><code>?&nbsp; m.cFname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
?&nbsp; m-&gt;cFname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; print value in cFname
?&nbsp; cFname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; prints contents of field cFname
</code></pre>
<p>
For more information about these commands, see the appropriate topics in Help.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In object-oriented programming you can create properties of objects to hold values instead of using variables. For more information, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>, in the <i>Programmer's Guide</i>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Forms</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgcreating_forms"></a><sup></sup>Chapter 9: Creating Forms</h1>
<p>
You can use forms to give your users a familiar interface for viewing and entering data into a database, but forms provide far more than just an interface. Forms provide a rich set of <a href="glsobject.htm">objects</a> that can respond to user (or system) <a href="glsevent.htm">events</a> so that you can enable your users to accomplish their information management tasks as easily and as intuitively as possible.</p>
<p>
This chapter covers:</p>
<ul type=disc>
<li>
<a href="#dgdesigning_forms">Designing Forms</a></li>
<li>
<a href="#dgcreating_a_new_form">Creating a New Form</a></li>
<li>
<a href="#dgadding_objects_to_forms">Adding Objects to Forms</a></li>
<li>
<a href="#dgmanipulating_objects">Manipulating Objects</a></li>
<li>
<a href="#dgmanaging_forms">Managing Forms</a></li>
</ul>

<h2><a name="dgdesigning_forms"></a>Designing Forms</h2>
<p>
Visual FoxPro provides you with a powerful Form Designer to make form design fast and easy. You can have:</p>
<ul type=disc>
<li>
Various types of objects on the forms.</li>
<li>
Data bound to objects on the form.</li>
<li>
Top-level or child forms.</li>
<li>
Multiple forms that can be manipulated together.</li>
<li>
Forms based on your own custom templates.</li>
</ul>
<p>
Forms and form sets are objects with their own <a href="glsproperty.htm">properties</a>, <a href="glsevent.htm">events</a>, and <a href="glsmethod.htm">methods</a> that you can set in the Form Designer. A form set consists of one or more forms that can be manipulated as a unit. If you have four forms in your form set, for example, you can display or hide them as a unit with a single command at run time.</p>

<h2><a name="dgcreating_a_new_form"></a>Creating a New Form</h2>
<p>
You can create new forms in the <a href="wndform_designer.htm">Form Designer</a>, and you can see how each object will appear to the user as you design it.</p>
<p class=label>
<b>To create a new form</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select <b>Forms</b> and choose <b>New</b>.<p class=tl>
-or-</P><p class=tl>
From the <b>File</b> menu, choose <b>New</b>, select <b>Form</b>, and choose <b>New File</b>.</P><p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_form.htm">CREATE FORM</a> command.</li>
</ul>
<p class=label>
<b>The Form Designer with toolbars: <a href="tlsform_designer_toolbar.htm">Form Designer</a>, <a href="tlsform_controls_toolbar.htm">Controls</a>, <a href="tlslayout_toolbar.htm">Layout</a>, and <a href="tlscolor_palette_toolbar.htm">Palette</a></b></p>
<p>
<img src="afd09002.gif" border=0></p>
<p>
For a more detailed description of the Form Designer, see Chapter 8, <a href="ugmanaging_data_through_forms.htm">Managing Data Through Forms</a>, in the <i>User’s Guide</i>. </p>
<h3>Setting the Data Environment</h3>
<p>
Each form or set of forms includes a <a href="glsdata_environment.htm">data environment</a>. The data environment is an object that includes the <a href="glstable.htm">tables</a> or <a href="glsview.htm">views</a> the form interacts with and the relationships between tables that the form expects. You can visually design the data environment in the Data Environment Designer and save it with the form.</p>
<p>
The data environment can automate opening and closing tables and views when the form is run. In addition, the data environment helps you set the <a href="lngcontrolsource_property.htm">ControlSource</a> property for controls by populating the ControlSource property setting box in the <a href="wndproperties_window.htm">Properties window</a> with all the fields in your data environment.</p>
<p class=label>
<b>To open the Data Environment Designer</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>Data Environment</b>.<br><br></li>
<li>
From the <b>Shortcut</b> menu, choose <b>Add</b>.<br><br></li>
<li>
In the <b>Open</b> dialog box, choose a table or view to add to the data environment.</li>
</ol>
<p class=label>
<b>The Data Environment Designer</b></p>
<p>
<img src="afd09003.gif" border=0></p>
<h4>Common Data Environment Properties</h4>
<p>
The following data environment properties are commonly set in the Properties window:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Property</b></td>
<td class=label width=42%><b>Description</b></td>
<td class=label width=31%><b>Default Setting</b></td>
</tr>
<tr valign=top>
<td width=27%><a href="lngautoclosetables_property.htm">AutoCloseTables</a></td>
<td width=42%>Controls whether tables and views are closed when the form is released.</td>
<td width=31%>True (.T.)</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngautoopentables_property.htm">AutoOpenTables</a></td>
<td width=42%>Controls whether tables and views in <br>
the data environment are opened when the <br>
form is run.</td>
<td width=31%>True (.T.)</td>
</tr>
<tr valign=top>
<td width=27%><a href="lnginitialselectedalias_property.htm">InitialSelectedAlias</a></td>
<td width=42%>Specifies the table or view that is selected when the form is run.</td>
<td width=31%><code>""</code> at design time. If not specified, at run time the first cursor added to the DataEnvironment is initially selected.</td>
</tr>
</table><br>
<h4>Adding a Table or View to the Data Environment Designer</h4>
<p>
When you add <a href="glstable.htm">tables</a> or <a href="glsview.htm">views</a> to the Data Environment Designer, you can see the <a href="glsfield.htm">fields</a> and <a href="glsindex.htm">indexes</a> that belong to the table or view.</p>
<p class=label>
<b>To add a table or view to the Data Environment</b>
<ol>
<li>
From the <a href="wnddata_environment_designer.htm">Data Environment Designer</a>, choose <b>Add</b> from the <a href="cmddata_environment_menu.htm">DataEnvironment</a> menu.<br><br></li>
<li>
In the <a href="cmdadd_table_or_view_dialog_box.htm">Add Table or View</a> dialog box, choose a table or view from the list.<p class=tl>
-or-</P><p class=tl>
If no database or project is open, choose <b>Other</b> to select a table.</P></li>
</ol>
<p>
You can also drag a table or view from an open project or the <a href="wnddatabase_designer.htm">Database Designer</a> into the Data Environment Designer.</p>
<p>
When the Data Environment Designer is active, the <a href="wndproperties_window.htm">Properties window</a> displays <a href="glsobject.htm">objects</a> and <a href="glsproperty.htm">properties</a> associated with the data environment. Each table or view in the data environment, each relationship between tables, and the data environment itself is a separate object in the Object box of the Properties window.</p>
<h4>Removing a Table from the Data Environment Designer</h4>
<p>
When you remove a table from the data environment, any <a href="glsrelation.htm">relationships</a> that the table is involved in are also removed.</p>
<p class=label>
<b>To remove a table or view from the Data Environment Designer</b>
<ol>
<li>
In the <a href="wnddata_environment_designer.htm">Data Environment Designer</a>, select the table or view.<br><br></li>
<li>
From the <b>DataEnvironment</b> menu, choose <b>Remove</b>.</li>
</ol>
<h4>Setting Relationships in the Data Environment Designer</h4>
<p>
If you add tables to the Data Environment Designer that have <a href="glspersistent_relationship.htm">persistent relationships</a> set in a database, the relationships are automatically added in the data environment. If the tables don’t have persistent relationships, you can still relate them in the Data Environment Designer.</p>
<p class=label>
<b>To set relationships in the Data Environment Designer</b>
<ul type=disc>
<li>
Drag a field from the <a href="glsprimary_table.htm">primary table</a> onto the matching index tag in the <a href="glsrelated_table.htm">related table</a>.<p class=label>
<b>The Data Environment Designer with relationships set between tables</b>
</li>
</ul>
<p>
<img src="afd09004.gif" border=0></p>
<p>
You can also drag a field from the <a href="glsprimary_table.htm">primary table</a> to a field in the <a href="glsrelated_table.htm">related table</a>. If there is no index tag in the related table corresponding to the field in the primary table, you're prompted to create the index tag.</p>
<h4>Editing Relationships in the Data Environment Designer</h4>
<p>
When you set a <a href="glsrelation.htm">relation</a> in the Data Environment Designer, a line between the tables indicates the relationship.</p>
<p class=label>
<b>To edit the properties of the relation</b>
<ul type=disc>
<li>
In the <a href="wndproperties_window.htm">Properties</a> window, select the relation from the <b>Object</b> box.</li>
</ul>
<p>
The properties of the relation correspond to clauses and keywords in the <a href="lngset_relation.htm">SET RELATION</a> and <a href="lngset_skip.htm">SET SKIP</a> commands. </p>
<p>
The <a href="lngrelationalexpr_property.htm">RelationalExpr</a> property is set by default to the name of the <a href="glsprimary_key.htm">primary key</a> field in the primary table. If the related table is indexed on an <a href="glsexpression.htm">expression</a>, you need to set the RelationalExpr property to this expression. For example, if the related table is indexed on <code>UPPER(cust_id)</code>, you need to set RelationalExpr to <code>UPPER(cust_id)</code>.</p>
<p>
If the relation is not a <a href="glsone_to_many_relationship.htm">one-to-many relationship</a>, set the <a href="lngonetomany_property.htm">OneToMany</a> property to false (.F.). This corresponds to using the <a href="lngset_relation.htm">SET RELATION</a> command without issuing <a href="lngset_skip.htm">SET SKIP</a>.</p>
<p>
Setting the OneToMany property of a relation to true (.T.) corresponds to issuing the SET SKIP command. When you skip through the <a href="glsparent_table.htm">parent table</a>, the record pointer remains on the same parent record until the record pointer moves through all related records in the <a href="glschild_table.htm">child table</a>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you want a one-to-many relationship in the form, set the OneToMany property to true (.T.), even if a persistent one-to-many relationship has been established in a database.</p>
<h3>Creating Single- and Multiple-Document Interfaces</h3>
<p>
Visual FoxPro allows to you to create two types of applications:</p>
<ul type=disc>
<li>
<a href="glsmdi.htm">Multiple-document interface(MDI)</a> applications consist of a single main window, and the application’s windows are contained within or float on top of the main window. Visual FoxPro is primarily an MDI application, with the command window, edit windows, and designer windows contained within the main Visual FoxPro window.</li>
<li>
<a href="glssdi.htm">Single-document interface(SDI)</a> applications consist of one or more independent windows, each of which appears separately on the Windows desktop. Microsoft Exchange is an example of an SDI application, in which each message you open appears in its own independent window.</li>
</ul>
<p>
An application consisting of single window is usually an SDI application, but some applications mix SDI and MDI elements. For example, Visual FoxPro displays its debugger as an SDI application, which in turn contains MDI windows of its own.</p>
<p>
To support both types of interfaces, Visual FoxPro allows you to create several types of forms:</p>
<ul type=disc>
<li>
<i>Child form</i>. A form contained within another window, used in creating MDI applications. Child forms cannot be moved outside the bounds of their parent form (the main form), and when minimized appear at the bottom of their parent form. If their parent form is minimized, they are minimized along with it.</li>
<li>
<i>Floating form</i>. A form that belongs to a parent (main) form, but is not contained within it. Instead, floating forms can be moved anywhere on the screen. They cannot be moved behind their parent window. If minimized, a floating form appears at the bottom of the desktop. If their parent form is minimized, floating forms are minimized along with it. Floating forms are also used in creating MDI applications.</li>
<li>
<i>Top-level form</i>. An independent form without parent form, used to create an SDI application, or to serve as the parent for other child forms in an MDI application. Top-level forms work at the same level as other Windows applications, and can appear in front of or behind them. They appear on the Windows taskbar.</li>
</ul>
<p class=label>
<b>Child, floating, and top-level forms</b></p>
<p>
<img src="afd09001.gif" border=0></p>
<h4>Specifying a Form Type</h4>
<p>
You create all types of forms in much the same way, but you set specific <a href="glsproperty.htm">properties</a> to indicate how the form should behave.</p>
<p>
If you're creating a child form, you specify not only that it should appear inside another form, but also whether it is an <a href="glsmdi.htm">MDI</a>-compliant child form, which indicates how the form behaves when maximized. If the child form is MDI-compliant, it combines with the parent form, sharing the parent form’s title bar and caption, menus, and toolbars. A child form that is not MDI-compliant maximizes into the full client area of the parent, but retains its own caption and title bar.</p>
<p class=label>
<b>To specify a child form</b>
<ol>
<li>
Create or edit the form using the <a href="wndform_designer.htm">Form Designer</a>.<br><br></li>
<li>
Set the form’s <a href="lngshowwindow_property.htm">ShowWindow</a> property to one of the following values:<ul type=disc>
<li>
<b>0</b> <b>—</b> <b>In Screen</b>. The child form’s parent will be the main Visual FoxPro window.<br><br></li>
<li>
<b>1</b> <b>—</b> <b>In Top-Level Form</b>. The child form’s parent will be the top-level form that is active when the child window is displayed. Use this setting if you want the child window to appear inside any top-level window other than the main Visual FoxPro window.</li>
</ul>
</li>
<li>
Set the form’s <a href="lngmdiform_property.htm">MDIForm</a> property to .T. (true) if you want the child form to be combined with the parent when maximized, or to .F. (false) if the child window should be retained as a separate window when maximized.</li>
</ol>
<p>
A floating form is a variation of a child form.</p>
<p class=label>
<b>To specify a floating form</b>
<ol>
<li>
Create or edit the form using the <a href="wndform_designer.htm">Form Designer</a>.<br><br></li>
<li>
Set the form’s <a href="lngshowwindow_property.htm">ShowWindow</a> property to one of the following values:<ul type=disc>
<li>
<b>0</b> <b>—</b> <b>In Screen</b>. The floating form’s parent will be the main Visual FoxPro window.<br><br></li>
<li>
<b>1</b> <b>—</b> <b>In Top-Level Form</b>. The floating form’s parent will be the top-level form that is active when the floating window is displayed.</li>
</ul>
</li>
<li>
Set the form’s <a href="lngdesktop_property.htm">Desktop</a> property to .T. (true).</li>
</ol>
<p class=label>
<b>To specify a top-level form</b>
<ol>
<li>
Create or edit the form using the <a href="wndform_designer.htm">Form Designer</a>.<br><br></li>
<li>
Set the form’s <a href="lngshowwindow_property.htm">ShowWindow</a> property to <b>2</b> — <b>As Top-Level Form</b>.</li>
</ol>
<h4>Displaying a Child Form Inside a Top-Level Form</h4>
<p>
If you've created a child form in which the <a href="lngshowwindow_property.htm">ShowWindow</a> property is set to <b>1</b> <b>—</b> <b>In Top-Level Form</b>, you don't directly specify the top-level form that acts as the child form’s parent. Instead, Visual FoxPro assigns the child form to a parent at the time the child window is displayed.</p>
<p class=label>
<b>To display a child form inside a top-level form</b>
<ol>
<li>
Create a top-level form.<br><br></li>
<li>
In the event code of the top-level form, include the <a href="lngdo_form.htm">DO FORM</a> command, specifying the name of the child form to display.<p class=tl>
For example, create a button in the top-level form, and then in the <a href="lngclick_event.htm">Click</a> event code for the button, include a command such as this one:</P><pre><code>DO FORM MyChild
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The top-level form must be visible and active when the child form is displayed. Therefore, you cannot use the <a href="lnginit_event.htm">Init event</a> of the top-level form to display a child form, because the top-level form will not yet be active.</p></li>
<li>
Activate the top-level form, and then if necessary, trigger the event that displays the child form.</li>
</ol>
<h4>Hiding the Main Visual FoxPro Window</h4>
<p>
If you're running a top-level form, you might not want the main Visual FoxPro window to be visible. You can use the <a href="lngvisible_property.htm">Visible</a> property of the <a href="ctlapplication_object.htm">Application object</a> to hide and show the main Visual FoxPro window as needed.</p>
<p class=label>
<b>To hide the main Visual FoxPro window</b>
<ol>
<li>
In the <a href="lnginit_event.htm">Init</a> event of the form, include the following line of code:<pre><code>Application.Visible = .F.
</code></pre>
</li>
<li>
In the <a href="lngdestroy_event.htm">Destroy</a> event of the form, include the following line of code:<pre><code>Application.Visible = .T.
</code></pre>
</li>
</ol>
<p>
Make sure that you also provide a way to close the form by using <code>THISFORM.Release</code> in some method or event.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also include the following line in a configuration file to hide the main Visual FoxPro window:</p>
<pre><code>SCREEN = OFF
</code></pre>
<p class=indent>
For more information about configuring Visual FoxPro, see Chapter 3, <a href="igconfiguring_visual_foxpro.htm">Configuring Visual FoxPro</a>, in the <i>Installation Guide</i>.</p>
<h4>Adding a Menu to a Top-Level Form</h4>
<p class=label>
<b>To add a menu to a top-level form</b>
<ol>
<li>
Create a top-level form menu. For more information about creating menus for top-level forms, see Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a>.<br><br></li>
<li>
Set the form’s <a href="lngshowwindow_property.htm">ShowWindow</a> property to <b>2 – As Top-Level Form</b>.<br><br></li>
<li>
In the <a href="lnginit_event.htm">Init</a> event of the form, run the menu program and pass it two <a href="glsparameter.htm">parameters</a>:<p class=tl>
DO <i>menuname.mpr</i> WITH <i>oForm, lAutoRename</i></P><p class=tl>
<i>oForm </i>is an object reference to the form. In the Init event of the form, pass THIS as the first parameter.</P><p class=tl>
<i>lAutoRename </i>specifies whether or not a new unique name is generated for the menu. If you plan to run multiple instances of the form, pass .T. for <i>lAutoRename.</i></P><p class=tl>
For example, you can call a menu called <code>mySDImenu</code> with this code:</P><pre><code>DO mySDImenu.mpr WITH THIS, .T.
</code></pre>
</li>
</ol>
<h3>Extending Forms with Form Sets</h3>
<p>
You can manipulate multiple forms as a group by including them in a <a href="glsform_set.htm">form set</a>. A form set has these benefits:</p>
<ul type=disc>
<li>
You can show or hide all the forms in a form set at one time.</li>
<li>
You can visually arrange multiple forms at once to control their relative positions.</li>
<li>
Because all the forms in a form set are defined in a single .scx file with a single <a href="glsdata_environment.htm">data environment</a>, you can automatically synchronize record pointers in multiple forms. If you change the record pointer in a <a href="glsparent_table.htm">parent table</a> in one form, the child records in another form are updated and displayed.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;All the forms and all the objects on the forms are loaded when you run the form set. Loading many forms with a lot of <a href="glscontrol.htm">controls</a> might take several seconds.</p>
<h4>Creating a New Form Set</h4>
<p>
A form set is a parent container for one or more forms. When you are in the <a href="wndform_designer.htm">Form Designer</a>, you can create a form set.</p>
<p class=label>
<b>To create a form set</b>
<ul type=disc>
<li>
From the <a href="cmdform_menu.htm">Form</a> menu, choose <b>Create Formset</b>.</li>
</ul>
<p>
If you don’t want to work with multiple forms as a group of forms, you don’t need to create a form set. Once you've created a form set, you can add forms to it.</p>
<h4>Adding and Removing Forms</h4>
<p>
Once you've created a <a href="glsform_set.htm">form set</a>, you can add new forms and remove forms.</p>
<p class=label>
<b>To add additional forms to a form set</b>
<ul type=disc>
<li>
From the <a href="cmdform_menu.htm">Form</a> menu, choose <b>Add New Form</b>.</li>
</ul>
<p class=label>
<b>To remove a form from a form set</b>
<ol>
<li>
In the <b>Form</b> box at the bottom of the <a href="wndform_designer.htm">Form Designer</a>, select the form.<br><br></li>
<li>
From the <b>Form</b> menu, choose <b>Remove Form</b>.</li>
</ol>
<p>
If you have a single form in a form set, you can remove the form set so that you have only the form.</p>
<p class=label>
<b>To remove a form set</b>
<ul type=disc>
<li>
From the <a href="cmdform_menu.htm">Form</a> menu, choose <b>Remove Formset</b>.</li>
</ul>
<p>
Forms are saved in table format to a file with an .scx extension. When you create a form, the .scx table contains a record for the form, a record for the <a href="glsdata_environment.htm">data environment</a>, and two records for internal use. A record is added for each object you add to the form or to the data environment. If you create a form set, an additional record is added for the form set and for each new form. The parent container of each form is the form set. The parent container of each control is the form that it is placed on.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;When you run a form set, you may not want all forms in the form set initially visible. Set the <a href="lngvisible_property.htm">Visible</a> property to false (.F.) for forms you don’t want displayed when the form set runs. Set the Visible property to true (.T.) when you want the forms displayed.</p>

<h2><a name="dgadding_objects_to_forms"></a>Adding Objects to Forms</h2>
<p>
To design the functionality you want in a form, you add the appropriate controls, set form and control properties, and write event code.</p>
<p>
You can add the following types of objects to a form:</p>
<ul type=disc>
<li>
<a href="glscontrol.htm">Controls</a></li>
<li>
<a href="glscontainer_classes.htm">Containers</a></li>
<li>
<a href="glsuser_defined_class_udc_.htm">User-defined classes</a></li>
<li>
<a href="dgadding_ole.htm">OLE objects</a></li>
</ul>
<h3>Understanding Container and Control Objects</h3>
<p>
<a href="glsobject.htm">Objects</a> in Visual FoxPro belong in one of two categories, depending on the nature of the class they are based on:</p>
<ul type=disc>
<li>
<a href="glscontainer_classes.htm">Containers</a> can hold other containers or controls. They can act as the parent object for other objects. For example, a form, as a container, is the parent object of a check box on that form.</li>
<li>
<a href="glscontrol.htm">Controls</a> can be placed in containers, but cannot be the parent for other objects. For example, a check box cannot contain any other object.</li>
</ul>
<p>
The <a href="wndform_designer.htm">Form Designer</a> allows you to design both containers and controls.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Container</b></td>
<td class=label width=62%><b>Can contain</b></td>
</tr>
<tr valign=top>
<td width=38%>Column</td>
<td width=62%>Headers, and any objects except form sets, forms, toolbars, timers, and other columns</td>
</tr>
<tr valign=top>
<td width=38%>Command button group</td>
<td width=62%>Command buttons</td>
</tr>
<tr valign=top>
<td width=38%>Form set</td>
<td width=62%>Forms, toolbars</td>
</tr>
<tr valign=top>
<td width=38%>Form</td>
<td width=62%>Page frames, grids, any controls</td>
</tr>
<tr valign=top>
<td width=38%>Grid</td>
<td width=62%>Columns</td>
</tr>
<tr valign=top>
<td width=38%>Option button group</td>
<td width=62%>Option buttons</td>
</tr>
<tr valign=top>
<td width=38%>Page frame</td>
<td width=62%>Pages</td>
</tr>
<tr valign=top>
<td width=38%>Page</td>
<td width=62%>Grids, any controls</td>
</tr>
</table><br>
<h3>Adding Visual FoxPro Containers</h3>
<p>
In addition to form sets and forms, Visual FoxPro provides four base container classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=60%><b>Visual FoxPro Container Classes</b></td>
<td class=label width=40%></td>
</tr>
<tr valign=top>
<td width=60%><a href="ctlcommandgroup_control.htm">Command button group</a></td>
<td width=40%><a href="ctloptiongroup_control.htm">Option button group</a></td>
</tr>
<tr valign=top>
<td width=60%><a href="ctlgrid_control.htm">Grid</a></td>
<td width=40%><a href="ctlpageframe_control.htm">Page frame</a></td>
</tr>
</table><br>
<p class=label>
<b>To add container objects to a form</b>
<ul type=disc>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar, select the desired container object (button group, grid, or page frame) button and drag it to size in the form.</li>
</ul>
<p>
When you add a command button group or an option button group to a form in the Form Designer, the group contains two buttons by default. When you add a page frame to a form, the page frame contains two pages by default. You can add more buttons or pages by setting the <a href="lngbuttoncount_property.htm">ButtonCount</a> property or the <a href="lngpagecount_property.htm">PageCount</a> property to the number you want.</p>
<p>
When you add a grid to a form, the <a href="lngcolumncount_property.htm">ColumnCount</a> property is set to – 1 by default, which indicates AutoFill. At run time, the grid will display as many columns as there are fields in the RowSource table. If you don’t want AutoFill, you can specify the number of columns by setting the grid’s <a href="lngcolumncount_property.htm">ColumnCount property</a>.</p>
<p>
For more information about these container objects, see Chapter 10, <a href="dgusing_controls.htm">Using Controls</a>.</p>
<h4>Collection and Count Properties</h4>
<p>
All container objects in Visual FoxPro have a count property and a collection property associated with them. The collection property is an <a href="glsarray.htm">array</a> referencing each contained object. The count property is a numeric property indicating the number of contained objects.</p>
<p>
The collection and count properties for each container are named according to the type of object that can be contained in the container. The following table lists the containers and the corresponding collection and count properties.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Container</b></td>
<td class=label width=34%><b>Collection Property</b></td>
<td class=label width=35%><b>Count Property</b></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlapplication_object.htm">Application</a></td>
<td width=34%><a href="lngobjects_collection.htm">Objects</a><br>
<a href="lngforms_property.htm">Forms</a></td>
<td width=35%><a href="lngcount_property.htm">Count</a><br>
<a href="lngformcount_property.htm">FormCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlformset_object.htm">FormSet</a></td>
<td width=34%><a href="lngforms_property.htm">Forms</a></td>
<td width=35%><a href="lngformcount_property.htm">FormCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlform_object.htm">Form</a></td>
<td width=34%><a href="lngobjects_collection.htm">Objects</a><br>
<a href="lngcontrols_property.htm">Controls</a></td>
<td width=35%><a href="lngcount_property.htm">Count</a><br>
<a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlpageframe_control.htm">PageFrame</a></td>
<td width=34%><a href="lngpages_property.htm">Pages</a></td>
<td width=35%><a href="lngpagecount_property.htm">PageCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlpage_object.htm">Page</a></td>
<td width=34%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=35%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlgrid_control.htm">Grid</a></td>
<td width=34%><a href="lngcolumns_property.htm">Columns</a></td>
<td width=35%><a href="lngcolumncount_property.htm">ColumnCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlcommandgroup_control.htm">CommandGroup</a></td>
<td width=34%><a href="lngbuttons_property.htm">Buttons</a></td>
<td width=35%><a href="lngbuttoncount_property.htm">ButtonCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctloptiongroup_control.htm">OptionGroup</a></td>
<td width=34%><a href="lngbuttons_property.htm">Buttons</a></td>
<td width=35%><a href="lngbuttoncount_property.htm">ButtonCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlcolumn_object.htm">Column</a></td>
<td width=34%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=35%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctltoolbar_object.htm">ToolBar</a></td>
<td width=34%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=35%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlcontainer_object.htm">Container</a></td>
<td width=34%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=35%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="ctlcontrol_object.htm">Control</a></td>
<td width=34%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=35%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
</table><br>
<p>
These properties allow you to use a loop to programmatically manipulate all or specific contained objects. For example, the following lines of code set the <a href="lngbackcolor_forecolor_properties.htm">BackColor</a> property of columns in a grid to alternating green and red:</p>
<pre><code>o = THISFORM.grd1
FOR i = 1 to o.ColumnCount
 &nbsp; IF i % 2 = 0 &amp;&amp; Even-numbered column
 &nbsp;&nbsp;&nbsp;&nbsp; o.Columns(i).BackColor = RGB(0,255,0) &amp;&amp; Green
 &nbsp; ELSE
 &nbsp;&nbsp;&nbsp;&nbsp; o.Columns(i).BackColor = RGB(255,0,0) &amp;&amp; Red
 &nbsp; ENDIF
ENDFOR
</code></pre>
<h3>Adding Visual FoxPro Controls to a Form</h3>
<p>
You can easily add any of the standard Visual FoxPro controls to your form by using the Controls toolbar.</p>
<p class=label>
<b>Standard Visual FoxPro Controls</b></p>
<p>
<a href="ctlcheckbox_control.htm">Check box</a><br>
<a href="ctlhyperlink_object.htm">Hyperlink</a><br>
<a href="ctllistbox_control.htm">List box</a><br>
<a href="ctlspinner_control.htm">Spinner</a><br>
<a href="ctlcombobox_control.htm">Combo box</a><br>
<a href="ctlimage_control.htm">Image</a><br>
<a href="ctlole_bound_control.htm">OLE Bound Control</a><br>
<a href="ctltextbox_control.htm">Text box</a><br>
<a href="ctlcommandbutton_control.htm">Command button</a><br>
<a href="ctllabel_control.htm">Label</a><br>
<a href="ctlole_container_control.htm">OLE Container Control</a><br>
<a href="ctltimer_control.htm">Timer</a><br>
<a href="ctleditbox_control.htm">Edit box</a><br>
<a href="ctlline_control.htm">Line</a><br>
<a href="ctlshape_control.htm">Shape</a></p>
<p class=label>
<b>To add controls to a form</b>
<ul type=disc>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar, select the desired control button and click or drag it to size in the form.</li>
</ul>
<p>
For more information about which control to choose, see Chapter 10, <a href="dgusing_controls.htm">Using Controls</a>.</p>
<h4>Adding Data-Bound Controls to a Form</h4>
<p>
You can bind controls to data in a table, view, table field, or view field by setting the <a href="lngcontrolsource_property.htm">ControlSource</a> property of a control to a field or the <a href="lngrecordsource_property.htm">RecordSource property</a> of a <a href="glsgrid_.htm">grid</a> to a table or view. But you can also create data-bound controls by dragging fields or tables to the form directly from:</p>
<ul type=disc>
<li>
The <a href="wndproject_manager.htm">Project Manager</a></li>
<li>
The <a href="wnddatabase_designer.htm">Database Designer</a></li>
<li>
The <a href="wnddata_environment_designer.htm">Data Environment Designer</a></li>
</ul>
<p>
The class of control created this way depends on the Field Mappings settings in the Properties tab of the Table Designer or the Field Mapping tab of the Options dialog box.</p>
<p>
For more information about setting default control classes, see the <a href="wndtable_designer.htm">Table Designer</a> or the <a href="cmdfield_mapping_tab_options_dialog_box.htm">Field Mapping</a> tab of the Options dialog box.</p>
<h3>Adding User-Defined Objects to a Form</h3>
<p>
One of the most powerful features of Visual FoxPro is the ability to create <a href="glsclass.htm">classes</a> that can easily be used and reused in various pieces of your applications. Once you've created classes, you can add them to your forms.</p>
<p class=label>
<b>To add an object based on a custom class</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, drag the class onto the container.</li>
</ul>
<p>
You can also add your classes directly from the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar when you add them to your toolbar.</p>
<h4>Adding Class Libraries to the Controls Toolbar</h4>
<p>
You need to register your <a href="glsclass_library.htm">class libraries</a> before they can be displayed in the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a>.</p>
<p class=label>
<b>To register a class library</b>
<ol>
<li>
From the <a href="cmdtools_menu.htm">Tools</a> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <a href="cmdoptions_dialog_box.htm">Options</a> dialog box, choose the <b>Controls</b> tab.<br><br></li>
<li>
Choose <b>Add</b>.<br><br></li>
<li>
In the <b>Open</b> dialog box, choose a class library to add to the <b>Selected</b> list and choose <b>Open</b>.<br><br></li>
<li>
Repeat steps 3 and 4 until you've added all the libraries you want to register.</li>
</ol>
<p>
Classes in the class libraries in the Selected list can be used in the <a href="wndform_designer.htm">Form Designer</a> as easily as Visual FoxPro <a href="glsbase_class.htm">base classes</a> can be used.</p>
<p class=label>
<b>Controls tab of the Options dialog box</b></p>
<p>
<img src="afd09005.gif" border=0></p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you want the class libraries to be available from the Form Controls toolbar every time you run Visual FoxPro, choose Set as Default in the <a href="cmdoptions_dialog_box.htm">Options</a> dialog box.</p>
<p>
You can also register libraries directly in the <a href="wndform_designer.htm">Form Designer</a>.</p>
<p class=label>
<b>To register a class library in the Form Designer</b></p>
<p>
<img src="b002.gif" border=0>
<ol>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar, choose the <b>View Classes</b> button.<br><br></li>
<li>
From the submenu, choose <b>Add</b>.<p class=label>
<b>Submenu of the View Classes button</b>
<p>
<img src="afd09006.gif" border=0></P></li>
<li>
In the <b>Open</b> dialog box, choose a class library to add to the <b>Form Controls</b> toolbar and choose <b>Open</b>.</li>
</ol>
<h4>Adding Objects to a Form from a Class Library</h4>
<p>
Once you've added class libraries in the Classes tab of the <a href="cmdoptions_dialog_box.htm">Options</a> dialog box or from the View Classes submenu, you can access them in the <a href="wndform_designer.htm">Form Designer</a>.</p>
<p class=label>
<b>To add a custom object from the Controls toolbar</b></p>
<p>
<img src="b002.gif" border=0>
<ol>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar, choose the <b>View Classes</b> button.<br><br></li>
<li>
From the list of registered class libraries, select the library that contains the control you want to add to the form.<p class=tl>
The toolbar is populated with the controls in the library you selected.</P><p class=label>
<b>User-defined class library added to the View Classes submenu</b>
<p>
<img src="afd09007.gif" border=0></P></li>
<li>
Click the control you want and drag it to size in the form.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can remove a visual class library from the View Classes toolbar menu by selecting the library in the Selected list in the Controls tab of the Options dialog box, and choosing Remove.</p>
<p>
When you add objects to a form based on anything other than the Visual FoxPro <a href="glsbase_class.htm">base classes</a>, a relative path to the class library (.vcx file) is stored in the form’s .scx file. If you move either the form or the <a href="glsclass_library.htm">class library</a> to a different location, Visual FoxPro displays a dialog box when you try to run the form so that you can manually locate the class library.</p>
<h3>Determining What Controls Are on a Form</h3>
<p>
To determine how many controls are on the form, you can use the <a href="lngcontrolcount_property.htm">ControlCount</a> property. The <a href="lngcontrols_property.htm">Controls[n]</a> property of the form allows you to reference each control on the form. The following program prints the <a href="lngname_property.htm">Name</a> property of all the controls on the currently active form.</p>
<pre><code>ACTIVATE SCREEN&nbsp; &amp;&amp; to print to the main Visual FoxPro window
FOR nCnt = 1 TO Application.ActiveForm.ControlCount
 &nbsp; ? Application.ActiveForm.Controls[nCnt].Name
ENDFOR
</code></pre>
<h3>Adding Properties and Methods to a Form</h3>
<p>
You can add as many new <a href="glsproperty.htm">properties</a> and <a href="glsmethod.htm">methods</a> as you want to a form set or to a form that isn’t part of a form set. Properties hold a value; methods hold procedural code to be run when you call the method. The new properties and methods are scoped to the form and you reference them the same way you reference other properties or methods of the form.</p>
<h4>Creating New Properties</h4>
<p>
If you have a form set, properties and methods that you add in the <a href="wndform_designer.htm">Form Designer</a> are scoped to the form set. If you don’t have a form set, the properties and methods are scoped to the form.</p>
<p class=label>
<b>To add a new property to a form</b>
<ol>
<li>
From the <a href="cmdform_menu.htm">Form</a> menu, choose <b>New Property</b>.<br><br></li>
<li>
In the <a href="cmdnew_property_dialog_box.htm">New Property</a> dialog box, type the name of the property. You can also include a description of the property that can be displayed at the bottom of the <a href="wndproperties_window.htm">Properties</a> window.<p class=label>
<b>Adding a property to a form</b>
<p>
<img src="afd09008.gif" border=0></P></li>
</ol>
<h4>Creating an Array Property</h4>
<p>
An array property is scoped to the form like any other property, but can be manipulated with the Visual FoxPro array commands and functions.</p>
<p class=label>
<b>To create an array property</b>
<ol>
<li>
Add a new property to the form.<br><br></li>
<li>
In the <b>Name</b> box of the <a href="cmdnew_property_dialog_box.htm">New Property</a> dialog box, type the name of the array property and include the size and dimensions of the array.<p class=tl>
For example, to create a two-dimensional array with 10 rows, you could type <b>arrayprop[10,2]</b> in the Name box of the New Property dialog box.</P></li>
</ol>
<p>
Array properties are read-only in design mode, but you can manage, redimension, and assign values to the elements of the array property at <a href="glsrun_time.htm">run time</a>. For an example of using an array property, see “<a href="#dgmanaging_multiple_instances_of_a_form">Managing Multiple Instances of a Form</a>” later in this chapter.</p>
<h4>Creating New Methods</h4>
<p>
You can add <a href="glsmethod.htm">methods</a> to the form that can be called the same way the form class methods can be called.</p>
<p class=label>
<b>To create a new method for a form</b>
<ol>
<li>
From the <a href="cmdform_menu.htm">Form</a> menu, choose <b>New Method</b>.<br><br></li>
<li>
In the <a href="cmdnew_method_dialog_box.htm">New Method</a> dialog box, type the name of the method. You can optionally include a description of the method.</li>
</ol>
<p>
You call a user-defined method the same way you call base class methods, using the following <a href="glssyntax.htm">syntax</a>:</p>
<p>
<i>ObjectName</i>.<i>MethodName</i></p>
<p>
Your method can also accept <a href="glsparameter.htm">parameters</a> and return values. In this case, you call the method in an assignment statement:</p>
<p>
<i>cVariable</i> = <i>ObjectName</i>.<i>MethodName</i>(<i>cParameter</i>, <i>nParameter</i>)</p>
<h3>Including Predefined Constants</h3>
<p>
To use predefined <a href="glsconstant.htm">constants</a> in your methods, you can include a header file in a form or a form set using <a href="lnghinclude_preprocessor_directive.htm">#INCLUDE</a>. A header file typically contains compile-time constants defined with the <a href="lnghdefine_..._hundef_preprocessor_directive.htm">#DEFINE</a> preprocessor directive.</p>
<p class=label>
<b>To include a file in a form</b>
<ol>
<li>
From the <b>Form</b> menu, choose <b>Include File</b>.<br><br></li>
<li>
In the <a href="cmdinclude_file_dialog_box.htm">Include File</a> dialog box, specify the file in the <b>Include File</b> text box.<p class=tl>
-or-</P><p class=tl>
Choose the dialog button to open the <b>Include</b> dialog box and choose the file.</P></li>
<li>
Choose <b>OK</b>.</li>
</ol>

<h2><a name="dgmanipulating_objects"></a>Manipulating Objects</h2>
<p>
There are several ways you can manipulate <a href="glsobject.htm">objects</a> at <a href="glsdesign_time.htm">design time:</a></p>
<ul type=disc>
<li>
Set the size and position of objects by dragging them in the <a href="wndform_designer.htm">Form Designer</a> window.</li>
<li>
Align controls by choosing alignment tools on the <a href="tlslayout_toolbar.htm">Layout</a> toolbar or options on the <a href="cmdformat_menu.htm">Format</a> menu.</li>
<li>
Set colors by choosing foreground and background colors in the <a href="tlscolor_palette_toolbar.htm">Palette</a> toolbar.</li>
<li>
Set properties in the <a href="wndproperties_window.htm">Properties</a> window. The primary point of control for all objects in your form is the Properties window.</li>
</ul>

<h3><a name="dgsetting_properties_at_design_time"></a>Setting Properties at Design Time</h3>
<p>
The Properties window opens with the <a href="glsproperty.htm">properties</a> or <a href="glsevent.htm">events</a> of the selected object displayed. If more than one object is selected, the properties that the objects have in common are displayed in the Properties window. To edit the properties or events of a different object, choose the appropriate object from the Object box or select a different control in the form.</p>
<p class=label>
<b>The Properties window</b></p>
<p>
<img src="afd09009.gif" border=0></p>
<p class=label>
<b>To set a property</b>
<ol>
<li>
In the <a href="wndproperties_window.htm">Properties</a> window, select a property in the <b>Property and Events</b> list.<br><br></li>
<li>
In the <b>Property Settings</b> box, type or choose the desired setting for the selected property.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Properties that are read-only at <a href="glsdesign_time.htm">design time,</a> such as the <a href="lngclass_property.htm">Class</a> property of an object, are displayed in the Properties and Events list in the Properties window in italics.</p>
<p>
If the property requires a character value, you don’t have to include the value in quotation marks. If you want the caption of a form to be CUSTOMER, type <b>CUSTOMER</b> in the Property Settings box. If you want the caption of a form to be “CUSTOMER,” with the quotation marks displayed in the window title, type <b>“CUSTOMER”</b> in the Property Settings box.</p>
<h4>Setting Properties with Expressions</h4>
<p>
You can also set properties to the results of <a href="glsexpression.htm">expressions</a> or <a href="glsfunction.htm">functions</a> through the Properties window.</p>
<p class=label>
<b>To set a property with an expression</b>
<ul type=disc>
<li>
In the <a href="wndproperties_window.htm">Properties</a> window, choose the <b>Function</b> button to open the <b>Expression Builder</b>.<p class=tl>
-or-</P></li>
<li>
In the <b>Property Settings</b> box, type <b>=</b> followed by an expression.<p class=tl>
For example, you can set the <a href="lngcaption_property.htm">Caption</a> property of a form to indicate the currently active table when the form is run by typing <b>=ALIAS(&nbsp;) </b>in the Property Settings box.</P></li>
</ul>
<p>
A property expression is evaluated when the you set it in the Properties window and when the object is initialized at <a href="glsrun_time.htm">run time</a> or <a href="glsdesign_time.htm">design time</a>. Once the object is created, the property setting doesn’t change until you or a user explicitly changes it.</p>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;If you set a property to the result of a <a href="glsuser_defined_function_udf_.htm">user-defined function</a>, the function is evaluated when you set the property or modify or run the form. If there is an error in the user-defined function, you might not be able to open your form.</p>
<p class=indent>
You can also set the property to the user-defined function in the <a href="lnginit_event.htm">Init event</a> of the object, as in the following example:</p>
<pre><code>THIS.Caption = myfunction(&nbsp;)
</code></pre>
<p class=indent>
If there is an error in the user-defined function, you still won’t be able to run the form this way, but you’ll be able to modify it.</p>
<h3>Defining Form Behavior</h3>
<p>
When you are designing a form in the <a href="wndform_designer.htm">Form Designer</a>, the form is live: except for setting the <a href="lngvisible_property.htm">Visible</a> property to false (.F.), visual and behavioral changes you make are immediately reflected in the form. If you set the <a href="lngwindowstate_property.htm">WindowState</a> property to 1 – Minimized or 2 – Maximized, the form in the Form Designer immediately reflects this setting. If you set the <a href="lngmovable_property.htm">Movable</a> property to false (.F.), a user will not be able to move the form at <a href="glsrun_time.htm">run time</a> and you won’t be able to move the form at <a href="glsdesign_time.htm">design time</a> either. You might want to design the functionality of your form and add all the appropriate controls before you set some of the properties that determine form behavior.</p>
<p>
The following form properties are commonly set at design time to define the appearance and behavior of the form.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Property</b></td>
<td class=label width=57%><b>Description</b></td>
<td class=label width=22%><b>Default</b></td>
</tr>
<tr valign=top>
<td width=21%><a href="lngalwaysontop_property.htm">AlwaysOnTop</a></td>
<td width=57%>Controls whether a form is always on top of other open windows.</td>
<td width=22%>False (.F.)</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngautocenter_property.htm">AutoCenter</a></td>
<td width=57%>Controls whether the form is automatically centered in the main Visual FoxPro window or on the desktop when the form is initialized.</td>
<td width=22%>False (.F.)</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngbackcolor_forecolor_properties.htm">BackColor</a></td>
<td width=57%>Determines the color of the form window.</td>
<td width=22%>255,255,255</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngborderstyle_property.htm">BorderStyle</a></td>
<td width=57%>Controls whether the form has no border, a single-line border, a double-wide border, or a system border. If the BorderStyle is 3 - System, the user will be able to resize the form.</td>
<td width=22%>3</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngcaption_property.htm">Caption</a></td>
<td width=57%>Determines the text displayed in the title bar of the form.</td>
<td width=22%>Form1</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngclosableproperty.htm">Closable</a></td>
<td width=57%>Controls whether the user can close the form by double-clicking the close box.</td>
<td width=22%>True (.T.)</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngdatasession_property.htm">DataSession</a></td>
<td width=57%>Controls whether the tables in the form are opened in work areas that are globally accessible or private to the form.</td>
<td width=22%>1</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngmaxbutton_property.htm">MaxButton</a></td>
<td width=57%>Controls whether or not the form has a maximize button.</td>
<td width=22%>True (.T.)</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngminbutton_property.htm">MinButton</a></td>
<td width=57%>Controls whether or not the form has a minimize button.</td>
<td width=22%>True (.T.)</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngmovable_property.htm">Movable</a></td>
<td width=57%>Controls whether or not the form can be moved to a new location on the screen.</td>
<td width=22%>True (.T.)</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngscalemode_property.htm">ScaleMode</a></td>
<td width=57%>Controls whether the unit of measurement in object size and position properties is foxels or pixels.</td>
<td width=22%>Determined by settings in the Options dialog box.</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngscrollbars_property.htm">Scrollbars</a></td>
<td width=57%>Controls the type of scroll bars a form has.</td>
<td width=22%>0 - None</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngtitlebar_property.htm">TitleBar</a></td>
<td width=57%>Controls whether a title bar appears at the top of the form.</td>
<td width=22%>1 - On</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngshowwindow_property.htm">ShowWindow</a></td>
<td width=57%>Controls whether the window is a child (in screen), floating, or top-level window.</td>
<td width=22%>0 - In Screen</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngwindowstate_property.htm">WindowState</a></td>
<td width=57%>Controls whether the form is minimized (in Windows only), maximized, or normal.</td>
<td width=22%>0 - Normal</td>
</tr>
<tr valign=top>
<td width=21%><a href="lngwindowtype_property.htm">WindowType</a></td>
<td width=57%>Controls whether the form is modeless (the default) or modal. If the form is modal, the user must close the form before accessing any other elements of your application’s user interface.</td>
<td width=22%>0 – Modeless</td>
</tr>
</table><br>
<p>
You can use the <a href="lnglockscreen_property.htm">LockScreen</a> property to make run-time adjustment of control layout properties appear cleaner.</p>
<h4>Assigning Icons to Forms</h4>
<p>
In Visual FoxPro for Windows, you can assign an icon to the form; the icon is displayed when the window is minimized in Windows NT<sup>®</sup> and in the title bar in Windows 95. To assign an icon to a form, set the form’s Icon property to the name of an .ico file.</p>
<p class=label>
<b>To assign an icon to a form</b>
<ol>
<li>
Open the form.<br><br></li>
<li>
Open the <a href="wndproperties_window.htm">Properties</a> window.<br><br></li>
<li>
Set the <a href="lngicon_property.htm">Icon</a> property to the .ico file that you want to display.</li>
</ol>
<h3>Editing Event and Method Code</h3>
<p>
Events are user actions, such as clicks and mouse movements, or system actions, such as the progression of the system clock. Methods are procedures that are associated with the object and that are specifically invoked programmatically. For a discussion of events and methods, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>. You can specify the code to be processed when an event is triggered or a method is invoked.</p>
<p class=label>
<b>To edit event or method code</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>Code</b>.<br><br></li>
<li>
Select the event or method in the <b>Procedure</b> box.<br><br></li>
<li>
In the <b>Edit</b> window, write the code you want to be processed when the event is triggered or the method is invoked.<p class=tl>
For example, you could have a command button on a form with the caption “Quit.” In the Click event for the button, include the line:</P><pre><code>THISFORM.Release
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To move between procedures in the Code Editing window, press PAGE DOWN or PAGE UP.</p>
<p>
When the user clicks the command button, the form is removed from the screen and from memory. If you don’t want to release the form from memory, you could instead include the following line in the click event:</p>
<pre><code>THISFORM.Hide
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If code associated with the Init event of a <a href="glsform_set.htm">form set</a>, a <a href="glsform.htm">form</a>, or any object on any form in a form set returns false (.F.), the form will not be created.</p>
<h3>Saving Forms</h3>
<p>
You need to save your form before you can run it. If you try to close the Form Designer when the form has not been saved, Visual FoxPro prompts you to save or discard the changes you've made.</p>
<p class=label>
<b>To save a form</b>
<ul type=disc>
<li>
In the <a href="wndform_designer.htm">Form Designer</a>, choose <b>Save</b> from the <b>File</b> menu.</li>
</ul>
<h4>Saving Forms and Controls as Classes</h4>
<p>
You can also save a form, or a subset of the controls on a form, as a class definition. If you intend to create <a href="glssubclass.htm">subclasses</a> based on the form or reuse the controls in other forms, save the form as a class definition.</p>
<p class=label>
<b>To save a form or selected controls as a class definition</b>
<ol>
<li>
From the <b>File</b> menu, choose <b>Save As Class</b>.<br><br></li>
<li>
In the <a href="cmdsave_as_class_dialog_box.htm">Save As Class</a> dialog box, choose <b>Current form</b> or <b>Selected controls</b>.<p class=label>
<b>The Save As Class dialog box</b>
<p>
<img src="afd09010.gif" border=0></P></li>
<li>
In the <b>Name</b> box, enter a name for the class.<br><br></li>
<li>
In the <b>File</b> box, enter a filename for the class to be stored to.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p>
If you don’t give the filename an extension, the default extension of .vcx is added when the file is saved. Once a form has been saved as a class definition, you can modify it with the MODIFY CLASS command. For more information about creating classes, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>.</p>
<h3>Running a Form</h3>
<p>
You can run a form directly from the interface or in program code.</p>
<h4>Running a Form Interactively</h4>
<p>
There are several ways to run the form you've designed.</p>
<p>
<img src="b142.gif" border=0></p>
<p class=indent>
If you're working in the <a href="wndform_designer.htm">Form Designer</a>, you can test the form by clicking the Run button on the <a href="tlsform_designer_toolbar.htm">Form Designer toolbar</a>. To reopen the form in the Form Designer, close the form or choose the Modify Form button on the toolbar.</p>
<p>
You can also run a form from a project or programmatically.</p>
<p class=label>
<b>To run a form interactively</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the form and choose <b>Run</b>.<p class=tl>
-or-</P></li>
<li>
Type <a href="lngdo_form.htm">DO FORM</a> in the <a href="wndcommand_window.htm">Command</a> window.</li>
</ul>
<p>
You can also run the form by choosing Do from the Program menu, choosing Form in the List Files of Type box, selecting the form, and choosing Do.</p>
<h4>Running a Form from a Program</h4>
<p>
To programmatically run a form, include the <a href="lngdo_form.htm">DO FORM</a> command in the code associated with an event, in method code, or in a program or procedure.</p>
<h4>Naming the Form Object</h4>
<p>
By default, when you use the DO FORM command, the name of the form object is the same as the name of the .scx file. For example, the following line of code runs Customer.scx. Visual FoxPro automatically creates an object <a href="glsvariable.htm">variable</a> for the form named <code>customer</code>:</p>
<pre><code>DO FORM Customer
</code></pre>
<p class=label>
<b>To name a form object</b>
<ul type=disc>
<li>
Use the NAME clause of the <a href="lngdo_form.htm">DO FORM</a> command.</li>
</ul>
<p>
For example, the following commands run a form, creating two form object <a href="glsvariable.htm">variable</a> names:</p>
<pre><code>DO FORM Customer NAME frmCust1
DO FORM Customer NAME frmCust2
</code></pre>
<h4>Manipulating the Form Object</h4>
<p>
If you issue the <a href="lngdo_form.htm">DO FORM</a> command from the <a href="wndcommand_window.htm">Command window</a>, the form object is associated with a public <a href="glsvariable.htm">variable</a>. You can access the form object through the variable name. For example, the following commands, issued in the Command window, open a form named <code>Customer</code> and change its caption.</p>
<pre><code>DO FORM Customer
Customer.Caption = "Hello"
</code></pre>
<p>
If you then issue the following command in the Command window, <code>O</code> is displayed in the active output window, indicating that <code>Customer</code> is an object:</p>
<pre><code>? TYPE("Customer")
</code></pre>
<p>
If you issue the <a href="lngdo_form.htm">DO FORM</a> command in a program, the form object is scoped to the program. If the program or procedure completes, the object is gone, but the form remains visible. For example, you could run the following program:</p>
<pre><code>*formtest.prg
DO FORM Customer
</code></pre>
<p>
After you run the program, the form remains visible and all of the controls on the form are active, but <code>TYPE("Customer")</code> returns <code>U</code> indicating that <code>Customer</code> is an undefined <a href="glsvariable.htm">variable</a>. The following command, issued in the Command window, would generate an error:</p>
<pre><code>Customer.Caption = "Hello"
</code></pre>
<p>
You can, however, access the form by using the <a href="lngactiveform_property.htm">ActiveForm</a>, <a href="lngforms_property.htm">Forms</a>, and <a href="lngformcount_property.htm">FormCount</a> properties of the application object.</p>
<h4>Scoping the Form to the Form Object Variable</h4>
<p>
The LINKED keyword of the <a href="lngdo_form.htm">DO FORM</a> command allows you to link the form to the form object. If you include the LINKED keyword, when the <a href="glsvariable.htm">variable</a> associated with the form object goes out of scope, the form is released.</p>
<p>
For example, the following command creates a form linked to the object variable <code>frmCust2</code>:</p>
<pre><code>DO FORM Customer NAME frmCust2 LINKED
</code></pre>
<p>
When <code>frmCust2</code> is released, the form is closed.</p>
<h4>Closing an Active Form</h4>
<p>
To allow users to close the active form by clicking the close button or by choosing Close from the form’s Control menu, set the Closable property of the form.</p>
<p class=label>
<b>To allow a user to close the active form</b>
<ul type=disc>
<li>
In the <a href="wndproperties_window.htm">Properties</a> window, set the <a href="lngclosableproperty.htm">Closable</a> property to true (.T.).<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngrelease.htm">RELEASE</a> command.</li>
</ul>
<p>
For example, you can close and release the <code>frmCustomer</code> form by issuing the following command in a program or in the <a href="wndcommand_window.htm">Command window</a>:</p>
<pre><code>RELEASE frmCustomer
</code></pre>
<p>
You can also allow a user to close and release a form by including the following command in the <a href="lngclick_event.htm">Click</a> event code for a control, such as a command button with a caption of “Quit”:</p>
<pre><code>THISFORM.Release
</code></pre>
<p>
You can also use the <a href="lngrelease.htm">RELEASE</a> command in the code associated with an object on the form, but any code you've included in the Release method will not be executed.</p>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;When you release a form, you release from memory the object <a href="glsvariable.htm">variable</a> created for the form. There is a single variable for a form set, so you can’t release forms in a form set without releasing the form set. If you want to release the form set, you can use <code>RELEASE THISFORMSET</code>. If you want to remove a form from the screen so that a user can no longer see it or interact with it, you can use <code>THISFORM.Hide</code>.</p>
<h3>Setting Properties at Run Time</h3>
<p>
The object model in Visual FoxPro gives you a great deal of control over properties at <a href="glsrun_time.htm">run time</a>.</p>
<h4>Referencing Objects in the Object Hierarchy</h4>
<p>
To manipulate an object, you need to identify it in relation to the container hierarchy. At the highest level of the container hierarchy (the form set or form) you need to reference the object <a href="glsvariable.htm">variable</a>. Unless you use the NAME clause of the <a href="lngdo_form.htm">DO FORM</a> command, the object variable has the same name as the .scx file.</p>
<p>
Properties are manipulated by referencing the object variable, the control, and the property, separated by dots (.):</p>
<p>
<i>objectvariable</i>.[<i>form</i>.]<i>control</i>.<i>property</i> = <i>Setting</i></p>
<p>
The following table lists properties or keywords that make it easier to reference an object in the object hierarchy:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Property or keyword</b></td>
<td class=label width=73%><b>Reference</b></td>
</tr>
<tr valign=top>
<td width=27%><a href="lngactivecontrol_property.htm">ActiveControl</a></td>
<td width=73%>The control on the currently active form that has the focus</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngactiveform_property.htm">ActiveForm</a></td>
<td width=73%>The currently active form</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngactivepage_property.htm">ActivePage</a></td>
<td width=73%>The active page on the currently active form</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngparent_property.htm">Parent</a></td>
<td width=73%>The immediate container of the object</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngthis_object_reference.htm">THIS</a></td>
<td width=73%>The object or a procedure or event of the object</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngthisform_object_reference.htm">THISFORM</a></td>
<td width=73%>The form that contains the object</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngthisformset_object_reference.htm">THISFORMSET</a></td>
<td width=73%>The form set that contains the object</td>
</tr>
</table><br>
<p>
For example, to change the caption of a command button on the form <code>frmCust</code> in a form set stored in Custview.scx, use the following command in a program or in the Command window:</p>
<pre><code>CustView.frmCust.cmdButton1.Caption = "Edit"
</code></pre>
<p>
Use the THIS, THISFORM, and THISFORMSET keywords to reference objects from within a form. For example, to change the Caption of a command button when the command button is clicked, include the following command in the Click event code for the command button:</p>
<pre><code>THIS.Caption = "Edit"
</code></pre>
<p>
The following table gives examples of using THISFORMSET, THISFORM, THIS, and Parent to set object properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=57%><b>Command</b></td>
<td class=label width=43%><b>Where to include the command</b></td>
</tr>
<tr valign=top>
<td width=57%><pre><code>THISFORMSET.frm1.cmd1.Caption = 'OK'</code></pre>
</td>
<td width=43%>In the event or method code of any control on any form in the form set except for <code>frm1</code>.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>THISFORM.cmd1.Caption = 'OK'</code></pre>
</td>
<td width=43%>In the event or method code of any control except for <code>cmd1</code> on the same form that <code>cmd1</code> is on.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>THIS.Caption = 'OK'</code></pre>
</td>
<td width=43%>In the event or method code of the control whose caption you want to change.</td>
</tr>
<tr valign=top>
<td width=57%><pre><code>THIS.Parent.BackColor = RGB(192,0,0)</code></pre>
</td>
<td width=43%>In the event or method code of a control on a form. The command changes the background color of the form to dark red.</td>
</tr>
</table><br>
<h4>Setting Properties at Run Time with Expressions</h4>
<p>
You can also set properties at <a href="glsrun_time.htm">run time</a> using <a href="glsexpression.htm">expressions</a> or <a href="glsfunction.htm">functions</a>.</p>
<p class=label>
<b>To set properties to expressions at run time</b>
<ul type=disc>
<li>
Assign an expression to the property.<p class=tl>
-or-</P></li>
<li>
Assign the result of a <a href="glsuser_defined_function_udf_.htm">user-defined function</a> to the property.<p class=tl>
For example, you could set the caption of a button to be Edit or Save, depending on the value of a <a href="glsvariable.htm">variable</a>. Declare the variable in the calling program for your form:</P><pre><code>PUBLIC glEditing
glEditing = .F.</code></pre>
</li>
</ul>
<pre></pre>
<p class=tl>
Then use an IIF expression in the Caption setting:</P><pre><code>frsSet1.frmForm1.cmdButton1.Caption = ;    
IIF(glEditing = .F., "Edit", "Save")
</code></pre>
<p>
You could determine the size of a button and set the caption using expressions with fields in a table:</p>
<pre><code>* set button width to length of 'Call ' + first and last names
frmForm1.cmdButton1.Width = 5 + ;
 &nbsp; LEN(ALLTRIM(employee.first_name&nbsp;&nbsp;&nbsp; + " " + employee.last_name)) 
* set button caption to 'Call ' + first and last names
frmForm1.cmdButton1.Caption = "Call " + ;
 &nbsp; ALLTRIM(employee.first_name + " " + employee.last_name)
</code></pre>
<p>
You could also set the caption using a user-defined function:</p>
<pre><code>frsSet1.frmForm1.cmdButton1.Caption = setcaption()
</code></pre>
<h4>Setting Multiple Properties</h4>
<p>
You can set multiple properties at once.</p>
<p class=label>
<b>To set multiple properties</b>
<ul type=disc>
<li>
Use the <a href="lngwith_..._endwith.htm">WITH ... ENDWITH</a> structure.<p class=tl>
For example, to set multiple properties of a column in a <a href="glsgrid_.htm">grid</a> in a <a href="glsform.htm">form</a>, you could include the following statement in any event or method code in the form:</P><pre><code>WITH THISFORM.grdGrid1.grcColumn1
.Width = 5
.Resizable = .F.
.ForeColor = RGB(0,0,0)
.BackColor = RGB(255,255,255)
.SelectOnEntry = .T.
ENDWITH</code></pre>
</li>
</ul>
<pre></pre>
<h3>Calling Methods at Run Time</h3>
<p>
The <a href="glssyntax.htm">syntax</a> for calling methods of an object is:</p>
<p>
<i>Parent.Object.Method</i></p>
<p>
Once an <a href="glsobject.htm">object</a> has been created, you can call the <a href="glsmethod.htm">methods</a> of that object from anywhere in your application. The following commands call methods to display a form and set the focus to a command button:</p>
<pre><code>* form set saved in MYF_SET.SCX
myf_set.frmForm1.Show
myf_set.frmForm1.cmdButton1.SetFocus
</code></pre>
<p>
To hide the form, issue this command:</p>
<pre><code>myf_set.frmForm1.Hide
</code></pre>
<h3>Responding to Events</h3>
<p>
The code you include in an event procedure is executed when the <a href="glsevent.htm">event</a> takes place. For example, the code you include in the Click event procedure of a command button runs when the user clicks the command button.</p>
<p>
Calling the procedural code associated with an event does not cause the event to occur. For example, the following statement causes the code in the Activate event of <code>frmPhoneLog</code> to be executed, but it doesn’t activate the form:</p>
<pre><code>frmPhoneLog.Activate
</code></pre>
<p>
Calling the <a href="lngshow_method.htm">Show method</a> of a form causes the form to be displayed and activated, at which point the code in the Activate event is executed:</p>
<pre><code>frmPhoneLog.Show
</code></pre>
<h3>Example of Manipulating Objects</h3>
<p>
The following example sets properties and calls event code from various objects within a <a href="glsform_set.htm">form set</a>. The example includes two <a href="glsform.htm">forms</a>, frmLeft and frmRight, in a formset.</p>
<p class=label>
<b>Sample form set in the Form Designer</b></p>
<p>
<img src="afd09011.gif" border=0></p>
<p>
The two check boxes and the command button on frmLeft have event code associated with them. The name of the text box on frmLeft is <code>txtInput</code>.</p>
<p class=label>
<b>Event Code for Objects in LeftForm</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Object</b></td>
<td class=label width=18%><b>Event</b></td>
<td class=label width=64%><b>Code</b></td>
</tr>
<tr valign=top>
<td width=18%>chkItalic</td>
<td width=18%>Click</td>
<td width=64%><pre><code>THISFORM.txtInput.FontItalic = ;
 &nbsp; THIS.Value</code></pre>
</td>
</tr>
<tr valign=top>
<td width=18%>chkBold</td>
<td width=18%>Click</td>
<td width=64%><pre><code>THIS.txtInput.FontBold = THIS.Value</code></pre>
</td>
</tr>
<tr valign=top>
<td width=18%>cmdClear</td>
<td width=18%>Click</td>
<td width=64%><pre><code>THISFORM.txtInput.Value = ""</code><pre><code>THISFORM.txtInput.FontBold = .F.
THISFORM.txtInput.FontItalic = .F.
THISFORM.chkItalic.Value = .F.
THISFORM.chkBold.Value = .F.</code></pre>
</pre>
</td>
</tr>
</table><br>
<h4>Setting a Property of Another Control on the Same Form</h4>
<p>
You can set the properties of one <a href="glscontrol.htm">control</a> from within the event code of another by using the THISFORM keyword or the <a href="lngparent_property.htm">Parent</a> property. The following two commands are executed when a user initially clicks on the Italic and the Bold check boxes, setting the appropriate text box properties:</p>
<pre><code>THISFORM.txtInput.FontItalic = .T.
THIS.Parent.txtInput.FontBold = .T.
</code></pre>
<p>
In this case, THISFORM and THIS.Parent can be used interchangeably.</p>
<p class=label>
<b>Sample form set at run time</b></p>
<p>
<img src="afd09012.gif" border=0></p>
<p>
The code in the click event for <code>cmdClear</code> uses THISFORM to reset the values of the other controls on the form.</p>
<h4>Setting Another Form’s Properties</h4>
<p>
You can also set <a href="glsproperty.htm">properties</a> of one <a href="glsform.htm">form</a> from another. Form2 contains five command buttons. The first button on the form has this code in its <a href="lngclick_event.htm">Click</a> event:</p>
<pre><code>THISFORMSET.frmLeft.Caption = ;
 ALLTRIM(ThisFormSet.frmLeft.txtInput.Value)
</code></pre>
<p>
Notice that the <a href="glsform_set.htm">form set</a> and the form need to be referenced when setting properties from within a different form.</p>
<p class=label>
<b>User clicks “Change Left Form Caption” command button on Right Form</b></p>
<p>
<img src="afd09013.gif" border=0></p>
<p>
The click event code of the second command button on <code>frmRight</code> demonstrates setting a property of a form from within an object on the form:</p>
<pre><code>THISFORM.Caption = ;
 ALLTRIM(ThisFormSet.frmLeft.txtInput.Value)
</code></pre>
<p>
If the user chooses this button, the caption of frmRight changes to the value in the text box on frmLeft.</p>
<h4>Accessing Objects on Different Forms</h4>
<p>
The following code in the <a href="lngclick_event.htm">Click</a> event of the Change Bold Setting command button changes the value of the Bold check box on frmLeft and calls the event code associated with this control.</p>
<pre><code>THISFORMSET.frmLeft.chkBold.Value = ;
 &nbsp; NOT THISFORMSET.frmLeft.chkBold.Value
THISFORMSET.frmLeft.chkBold.InteractiveChange
</code></pre>
<p>
The last line of the example calls the <a href="lnginteractivechange_event.htm">InteractiveChange</a> event of <code>chkBold</code>. You could also call this procedure with the following command:</p>
<pre><code>THISFORMSET.frmForm1.chkBold.InteractiveChange(&nbsp;)
</code></pre>
<p>
If this procedure call is omitted, the value of the check box changes, but the <a href="lngdynamicfont_foo_properties.htm">FontBold</a> property of the text box is never changed.</p>
<p class=label>
<b>User clicks “Change Bold Setting” command button on Right Form</b></p>
<p>
<img src="afd09014.gif" border=0></p>
<h4>Checking Properties and Calling Method Code <br>
of Another Form</h4>
<p>
The following code in the <a href="lngclick_event.htm">Click</a> event of the Hide Left Form command button hides or shows frmLeft, depending on the value of the <a href="lngvisible_property.htm">Visible</a> property, and changes the button caption as appropriate:</p>
<pre><code>IF ThisFormSet.frmLeft.Visible
 &nbsp; ThisFormSet.frmLeft.Hide
 &nbsp; THIS.Caption = "Show Left Form"
ELSE
 &nbsp; ThisFormSet.frmLeft.Show
 &nbsp; THIS.Caption = "Hide Left Form"
ENDIF
</code></pre>
<p>
Notice that the THIS keyword is used within event code of a <a href="glscontrol.htm">control</a> to reference properties of the control.</p>
<p class=label>
<b>User clicks Hide Left Form command button on Right Form</b></p>
<p>
<img src="afd09015.gif" border=0></p>
<p>
The following command in the Click event of the Quit command button releases the form set, causing both forms to close:</p>
<pre><code>RELEASE ThisFormSet
</code></pre>

<h2><a name="dgmanaging_forms"></a>Managing Forms</h2>
<p>
The following procedures describe common tasks associated with managing forms in an application.</p>
<h3>Hiding a Form</h3>
<p>
You can hide a form so that it is not visible to a user. When the form is hidden, the user cannot interact with the form, but you still have full programmatic control of them.</p>
<p class=label>
<b>To hide a form</b>
<ul type=disc>
<li>
Use the <a href="lnghide_method.htm">Hide</a> method.<p class=tl>
For example, in the code associated with the <a href="lngclick_event.htm">Click</a> event of a command button, you could include the following line of code:</P><pre><code>THISFORM.Hide
</code></pre>
</li>
</ul>
<p>
When the user clicks the command button, the form remains in memory, but is not visible.</p>
<h4>Releasing a Form</h4>
<p>
You can allow a user to release a form when he or she is finished interacting with it. When you release a form, you can no longer access properties and methods of the form.</p>
<p class=label>
<b>To release a form</b>
<ul type=disc>
<li>
Call the <a href="lngrelease_method.htm">Release</a> method.</li>
</ul>
<p>
For example, in the code associated with the <a href="lngclick_event.htm">Click</a> event of a command button, you could include the following line of code:</p>
<pre><code>THISFORM.Release
</code></pre>
<p>
When the user clicks the command button, the form closes.</p>
<h3>Passing Parameters to a Form</h3>
<p>
Sometimes you want to pass <a href="glsparameter.htm">parameters</a> to forms when you run them to set property values or specify operational defaults.</p>
<p class=label>
<b>To pass a parameter to a form created in the Form Designer</b>
<ol>
<li>
Create properties on the form to hold the parameters, such as ItemName and ItemQuantity.<br><br></li>
<li>
In the <a href="lnginit_event.htm">Init</a> event code for the form, include a <a href="lngparameters.htm">PARAMETERS</a> statement such as:<pre><code>PARAMETERS cString, nNumber
</code></pre>
</li>
<li>
In the Init event code for the form, assign the parameters to the properties, as in this example:<pre><code>THIS.ItemName = cString
THIS.ItemQuantity = nNumber
</code></pre>
</li>
<li>
When running the form, include a WITH clause in the <a href="lngdo_form.htm">DO FORM</a> command:<pre><code>DO FORM myform WITH "Bagel", 24
</code></pre>
</li>
</ol>
<h4>Returning a Value From a Form</h4>
<p>
You can use forms throughout your application to allow users to specify a value.</p>
<p class=label>
<b>To return a value from a form</b>
<ol>
<li>
Set the <a href="lngwindowtype_property.htm">WindowType</a> property of the form to 1 to make the form modal.<br><br></li>
<li>
In the code associated with the Unload event of the form, include a <a href="lngreturn.htm">RETURN</a> command with the return value.<br><br></li>
<li>
In the program or method that runs the form, include the TO keyword in the <a href="lngdo_form.htm">DO FORM</a> command.<p class=tl>
For example, if <code>FindCustID</code> is a modal form that returns a character value, the following line of code stores the return value to a <a href="glsvariable.htm">variable</a> named <code>cCustID</code>:</P><pre><code>DO FORM FindCustID TO cCustID
</code></pre>
</li>
</ol>
<p>
For more information, see <a href="lngreturn.htm">RETURN</a> and <a href="lngdo_form.htm">DO FORM</a>.</p>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;If you get an error, make sure the WindowType is set to 1 (Modal).</p>
<h3>Saving a Form as HTML</h3>
<p>
You can use the <b>Save As HTML</b> option on the <b>File</b> menu when you're creating a form to save the contents of a form as an HTML (Hypertext Markup Language) file.</p>
<p class=label>
<b>To save a form as HTML</b>
<ol>
<li>
Open the form.<br><br></li>
<li>
Choose <b>Save As HTML</b> on the <b>File</b> menu. (You will be asked to save the form if it has been modified.)<br><br></li>
<li>
Enter the name of the HTML file to create and choose <b>Save</b>.</li>
</ol>

<h3><a name="dgmanaging_multiple_instances_of_a_form"></a>Managing Multiple Instances of a Form</h3>
<p>
You can have multiple <a href="glsinstance.htm">instances</a> of a class definition active at a time. For example, you can design one order form but have several open orders in your application. Each uses the same form definition but is displayed and manipulated individually.</p>
<p>
When you have multiple instances of a form, the key points to remember are:</p>
<ul type=disc>
<li>
Create an array property in the launching form to hold the object variables associated with each instance of the multiple instance form. The easiest way to keep track of instance variables when you don’t know ahead of time how many there will be is to use an array.</li>
<li>
For the form that is to have multiple instances, set the <a href="lngdatasession_property.htm">DataSession</a> property to 2 – Private Data Session. A private data session provides a separate set of <a href="glswork_area.htm">work areas</a> for each instance of the form so that selected tables and record pointer positions are all independent.</li>
</ul>
<p>
The following example provides code that demonstrates creating multiple instances of a form. For the sake of brevity, this code is not optimized; it is intended only to present the concepts.</p>
<p>
The following form launches multiple instances:</p>
<p class=label>
<b>Launcher Form</b></p>
<p>
<img src="afd09016.gif" border=0></p>
<p class=label>
<b>Property Setting for Launch.scx</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Object</b></td>
<td class=label width=17%><b>Property</b></td>
<td class=label width=65%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=18%>frmLaunch</td>
<td width=17%>aForms[1]</td>
<td width=65%><pre><code>" "</code></pre>
</td>
</tr>
</table><br>
<p class=label>
<b>Event Code for Launch.scx</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Object</b></td>
<td class=label width=17%><b>Event</b></td>
<td class=label width=65%><b>Code</b></td>
</tr>
<tr valign=top>
<td width=18%>cmdQuit</td>
<td width=17%><a href="lngclick_event.htm">Click</a></td>
<td width=65%><pre><code>RELEASE THISFORM</code></pre>
</td>
</tr>
<tr valign=top>
<td width=18%>cmdLaunch</td>
<td width=17%>Click</td>
<td width=65%><pre><code>nInstance = ALEN(THISFORM.aForms)
DO FORM Multi ;
  NAME THISFORM.aForms[nInstance] ;</code><pre><code>&nbsp;&nbsp;LINKED
DIMENSION ;
  THISFORM.aForms[nInstance + 1]</code></pre>
</pre>
</td>
</tr>
</table><br>
<p>
In refining the code in this example, you could manage the <a href="glsarray.htm">array</a> of form objects so that empty array elements reused as forms are closed and new forms are opened, rather than always redimensioning the array and increasing the number of elements by one.</p>
<p>
The form that can have multiple instances is Multi.scx. The data environment for this form contains the Employee table.</p>
<p class=label>
<b>Multiple instances of Multi.scx</b></p>
<p>
<img src="afd09017.gif" border=0></p>
<p class=label>
<b>Property Setting for Multi.scx</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Object</b></td>
<td class=label width=22%><b>Property</b></td>
<td class=label width=57%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=21%>txtFirstname</td>
<td width=22%><a href="lngcontrolsource_property.htm">ControlSource</a></td>
<td width=57%><pre><code>Employee.first_name</code></pre>
</td>
</tr>
<tr valign=top>
<td width=21%>txtLastName</td>
<td width=22%><a href="lngcontrolsource_property.htm">ControlSource</a></td>
<td width=57%><pre><code>Employee.last_name</code></pre>
</td>
</tr>
<tr valign=top>
<td width=21%>frmMulti</td>
<td width=22%><a href="lngdatasession_property.htm">DataSession</a></td>
<td width=57%>2 - Private Data Session</td>
</tr>
</table><br>
<p>
When you choose Launch Form in the Launcher form, an instance of the Multi form is created. When you close the Launcher form, the property array aForms is released and all instances of Multi are destroyed.</p>
<p>
Visual FoxPro provides some <a href="glsfunction.htm">functions</a> and <a href="glsproperty.htm">properties</a> to help you manage multiple instances of objects. For more information, see <a href="lngainstancelp_rp.htm">AINSTANCE(&nbsp;)</a>, <a href="lngausedlp_rp.htm">AUSED(&nbsp;)</a>, and <a href="lngdatasessionid_property.htm">DataSessionID</a> in the <i>Language Reference</i>.</p>
<h3>Setting the Design Area for a Form</h3>
<p>
You can set the maximum design area for the <a href="wndform_designer.htm">Form Designer</a> in the Options dialog box.</p>
<p class=label>
<b>Forms tab of the Options dialog box</b></p>
<p>
<img src="afd09018.gif" border=0></p>
<p class=label>
<b>To set the maximum design area for a form</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <a href="cmdoptions_dialog_box.htm">Options</a> dialog box, choose the <b>Forms</b> tab.<br><br></li>
<li>
In the <b>Maximum design area</b> box, choose the pixel coordinates for the maximum design area.</li>
</ol>
<p>
When you set the maximum design area, the background of the Form Designer is white within the design area boundaries and gray in areas beyond the maximum design area. If you develop applications on a monitor with a resolution of 1024 x 768, for example, you can set your design resolution to 640 x 480 and know that the forms you design will always fit on 640 x 480 screens.</p>
<p>
Within the design area, be sure to account for standard window attributes such as <a href="glstoolbar.htm">toolbars</a>. For example, in a 640 x 480 screen, a form with a status bar and one toolbar docked at the top or the bottom of the screen can have a maximum height of 390 pixels.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Main Visual FoxPro<br>
window attribute</b></td>
<td class=label width=68%><b>Required pixels</b></td>
</tr>
<tr valign=top>
<td width=32%>Title and menu</td>
<td width=68%>38</td>
</tr>
<tr valign=top>
<td width=32%>Status bar</td>
<td width=68%>23</td>
</tr>
<tr valign=top>
<td width=32%>Docked toolbar</td>
<td width=68%>29</td>
</tr>
</table><br>
<h3>Using Local and Remote Data in a Form</h3>
<p>
You can create forms that can be easily switched between using <a href="glslocal_data.htm">local data</a> and data that is stored remotely (for example, on a database server). This allows you to create a prototype application using local or test data, then switch to <a href="glsremote_data.htm">remote</a> or live data without substantial changes to your forms.</p>
<p>
For example, if your Visual FoxPro application is a front end for a large customer table stored on a database server, you can create a local .dbf file that contains a small but representative sampling of the data. You can then create, test, and debug your forms based on this small set of data. When you're ready to distribute your application, you can link your form to the large data set.</p>
<p>
The key to being able to switch between local and remote data is to make sure that you use <a href="glsview.htm">views</a> instead of directly linking your form (and its controls) to a table. To access remote data, you must use a view in any event. Therefore, to facilitate switching between local and remote data, create a view for the local data as well. When you create the form, you can add both views to its <a href="glsdata_environment.htm">data environment</a>, then switch between them as needed.</p>
<p class=label>
<b>To create a form that can switch between local and remote data</b>
<ol>
<li>
Create two <a href="glsview.htm">views</a> of the data, one that points to the <a href="glsremote_data.htm">remote data</a>, and another that points to the <a href="glslocal_data.htm">local data</a>.<br><br></li>
<li>
Create a new form.<br><br></li>
<li>
Open the <a href="wnddata_environment_designer.htm">Data Environment Designer</a> for the form, and then add both views.<br><br></li>
<li>
Right-click the <b>Data Environment Designer</b>, and then choose <b>Properties</b>.<br><br></li>
<li>
In the <a href="wndproperties_window.htm">Properties window</a>, set the <a href="lngalias_property.htm">Alias</a> property for both cursors to the same name.<br><br></li>
<li>
Set the data environment’s <a href="lngopenviews_property.htm">OpenViews</a> property to either <b>1</b> — <b>Local Only</b> or <b>2</b> <b>—</b> <b>Remote Only</b>, depending on which view you wanted to use when running the form.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because you are using the same alias for both views, do not choose <b>0</b> — <b>Local and Remote</b> (the default).</p></li>
<li>
On the form, add the <a href="glscontrol.htm">controls</a> you need and set their <a href="lngcontrolsource_property.htm">ControlSource</a> properties to the appropriate fields in the view. Because both views have the same <a href="glsalias.htm">alias</a>, the controls will respond automatically to whichever view is active when the form is run.</li>
</ol>
<p>
After the form is created, you can switch the views alias by changing the data environment’s OpenViews property. You can do this in the Data Environment while using the <a href="wndform_designer.htm">Form Designer</a>. Alternatively, you can write code and attach it to an event, which is useful if you want to switch views at <a href="glsrun_time.htm">run time</a>. For example, you could put this code in the form’s <a href="lngactivate_event.htm">Activate</a> event:</p>
<pre><code>THISFORM.DataEnvironment.OpenViews = 2 &amp;&amp; Use remote view
</code></pre>
<p>
If you create a form that can be switched between local and remote data, you must also design your navigation code to accommodate both views, particularly if you are designing forms with <a href="glsone_to_many_relationship.htm">one-to-many relationships</a>. For example, if your form only accesses a local table or view, you might use code such as the following in a Next command button to move to the next record in a cursor:</p>
<pre><code>SKIP 1
THISFORM.Refresh()
</code></pre>
<p>
However, this code is inefficient when you're navigating in a remote view, because it assumes that the <a href="glscursor.htm">cursor</a> contains all the data required by the form. As a rule, you want to minimize the amount of data that you download from the remote data source.</p>
<p>
The solution is to use a parameterized view. For example, the definition for a view used to edit customer information could be:</p>
<pre><code>SELECT * FROM CUSTOMERS WHERE ;
 CUSTOMERS.COMPANY_NAME = ?pCompanyName
</code></pre>
<p>
When the form runs, it can prompt the user for a customer name using a dialog box or by allowing the user to enter a name in a text box. The code for a Display button would then be similar to the following:</p>
<pre><code>pCompanyName = THISFORM.txtCompanyName.Value
REQUERY("customer")
THISFORM.Refresh()
</code></pre>
<p>
For more information about parameterized views, see “Creating a Parameterized View” in Chapter 8, <a href="dgcreating_views.htm">Creating Views</a>.</p>
<h3>Setting Form Templates</h3>
<p>
You can create your own form class to use a template for all your new forms, or you can use one of the sample classes that ship with Visual FoxPro.</p>
<p>
When you create a new form, it is based on the <a href="glstemplate.htm">template</a> form that is set in the Options dialog box. If no template is specified, the new form is based on the Visual FoxPro Form <a href="glsbase_class.htm">base class</a>. For more information about Visual FoxPro classes, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>.</p>
<h4>Advantages of Using Form Templates</h4>
<p>
Form templates allow you to set default <a href="glsproperty.htm">properties</a> for your forms so that you can easily give all the forms in your application a consistent look and feel. You could include a company logo, for instance, and use a consistent color scheme in all your forms by designing a template form class with these attributes. If the company logo changes, you could change the picture in the template form class and all the forms you created based on the template would automatically inherit the new logo.</p>
<p>
You can add custom properties and <a href="glsmethod.htm">methods</a> to the Visual FoxPro form class so that these properties and methods are available to each form in your application. If you are used to creating <a href="glsvariable.htm">variables</a> and user-defined procedures that are scoped to a form, using custom properties and methods provides this functionality, and also allows you to have a cleaner encapsulation model.</p>
<h4>Specifying the Default Form Template</h4>
<p>
You can specify a form class from a registered <a href="glsclass_library.htm">class library</a> for your form template.</p>
<p class=label>
<b>To specify a default form template</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <a href="cmdoptions_dialog_box.htm">Options</a> dialog box, choose the <b>Forms</b> tab.<br><br></li>
<li>
In the <b>Template classes</b> area, select the <b>Form</b> check box.<p class=tl>
If no form template has been selected, the <b>Open</b> dialog box opens so that you can choose a form class. If a form template has been selected, you can change it by choosing the dialog button and selecting another class.</P></li>
<li>
Choose <b>Set as Default</b> if you want the template to be used in subsequent sessions of Visual FoxPro.<br><br></li>
<li>
Choose <b>OK</b>.<p class=label>
<b>Forms tab of the Options dialog box</b>
<p>
<img src="afd09019.gif" border=0></P></li>
</ol>
<h4>Using Form Templates</h4>
<p>
You can specify <a href="glsform_set.htm">form set</a> templates the same way you set form templates. The following combinations are possible:</p>
<ul type=disc>
<li>
Both form set and form templates are specified.<p class=tl>
Choosing Form in the <a href="cmdnew_dialog_box.htm">New</a> dialog box (and all the other ways to create a new form) will automatically create a form set based on the template form set class. When you choose Add New Form from the <a href="cmdform_menu.htm">Form</a> menu in the <a href="wndform_designer.htm">Form Designer</a>, a form based on your form template is added to the form set.</P></li>
<li>
Only the form set template is specified.<p class=tl>
Choosing Form in the New dialog box (and all the other ways to create a new form) will automatically create a form set based on the template FormSet class. When you choose Add New Form from the Form menu in the <a href="wndform_designer.htm">Form Designer</a>, a form based on the Visual FoxPro Form base class is added to the form set.</P></li>
<li>
Only the form template is specified.<p class=tl>
Choosing Form in the New dialog box (and all the other ways to create a new form) will automatically create a form based on the template Form class.</P></li>
<li>
No templates are specified.<p class=tl>
Choosing Form in the New dialog box (and all the other ways to create a new form) will automatically create a form based on the Visual FoxPro Form base class.</P></li>
</ul>
</BODY>
</HTML>

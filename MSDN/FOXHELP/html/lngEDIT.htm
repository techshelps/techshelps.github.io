<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EDIT Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngedit"></a><sup></sup>EDIT Command</h1>
<p>
<a href="lngeditsa.htm">See Also</a></p>
<p>
Displays fields for editing.</p>
<p class=label>
<b>Syntax</b></p>
<p>
EDIT<br>
 &nbsp; [FIELDS <i>FieldList</i>]<br>
 &nbsp; [<i>Scope</i>] [FOR <i>lExpression1</i>] [WHILE <i>lExpression2</i>]<br>
 &nbsp; [FONT <i>cFontName</i> [, <i>nFontSize</i>]]<br>
 &nbsp; [STYLE <i>cFontStyle</i>]<br>
 &nbsp; [FREEZE <i>FieldName</i>]<br>
 &nbsp; [KEY <i>eExpression1</i> [, <i>eExpression2</i>]]<br>
 &nbsp; [LAST | NOINIT]<br>
 &nbsp; [LPARTITION]<br>
 &nbsp; [NAME <i>ObjectName</i>]<br>
 &nbsp; [NOAPPEND]<br>
 &nbsp; [NODELETE]<br>
 &nbsp; [NOEDIT | NOMODIFY]<br>
 &nbsp; [NOLINK]<br>
 &nbsp; [NOMENU]<br>
 &nbsp; [NOOPTIMIZE]<br>
 &nbsp; [NORMAL]<br>
 &nbsp; [NOWAIT]<br>
 &nbsp; [PARTITION <i>nColumnNumber</i> [LEDIT] [REDIT]]<br>
 &nbsp; [PREFERENCE <i>PreferenceName</i>]<br>
 &nbsp; [REST]<br>
 &nbsp; [SAVE]<br>
 &nbsp; [TIMEOUT <i>nSeconds</i>]<br>
 &nbsp; [TITLE <i>cTitleText</i>]<br>
 &nbsp; [VALID [:F] <i>lExpression3</i> [ERROR <i>cMessageText</i>]]<br>
 &nbsp; [WHEN <i>lExpression4</i>]<br>
 &nbsp; [WIDTH <i>nFieldWidth</i>]<br>
 &nbsp; [WINDOW <i>WindowName1</i>] <br>
 &nbsp; [IN [WINDOW] <i>WindowName2</i> | IN SCREEN<br>
 &nbsp; [COLOR SCHEME <i>nSchemeNumber</i>]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
FIELDS <i>FieldList</i></p>
<p class=indent>
Specifies the fields that appear in the Edit window. The fields are displayed in the order specified in <i>FieldList</i>. You can include fields from other related tables in the field list. When you include a field from a related table<b>, </b>preface the field name with its table alias and a period.</p>
<p class=tl>
If you omit FIELDS, all fields in the table are displayed in the order they appear in the table structure.</P><p class=tl>
The field list can specify any combination of fields or calculated fields, including fields from tables open in other work areas. The syntax of the field list is:</P><pre><code>FieldName1 
 &nbsp; [:R] 
 &nbsp; [:nColumnWidth]
 &nbsp; [:V = lExpression1 [:F] [:E = cMessageText]]
 &nbsp; [:P = cFormatCodes] 
 &nbsp; [:B = eLowerBound, eUpperBound [:F]]
 &nbsp; [:H = cHeadingText]
 &nbsp; [:W = lExpression2]
 &nbsp; [, FieldName2 [:R]...]
</code></pre>
<h1>Calculated Fields</h1>
<p class=tl>
The field list can contain statements for creating calculated fields. A calculated field contains read-only data created with an expression. This expression may take any form but it must be a valid Visual FoxPro expression.</P><p class=tl>
The syntax of the statement you use to create a calculated field is:</P><p class=tl>
<i>CalculatedFieldName</i> = <i>eExpression</i></P><p class=tl>
This example creates a calculated field called <code>location</code>:</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Open customer table
EDIT FIELDS location = ALLTRIM(city) + ', ' + country
</code></pre>
<p class=tl>
The FIELDS clause field list includes eight options, which enable special handling of fields displayed in the Edit window.</P><p class=dt>
:<i>nColumnWidth</i></p>
<p class=indent>
Specifies the display size for a field in columns. The value of :<i>nColumnWidth</i> doesn't affect the size of the field in the table; it alters only the way the field appears in the Edit window.</p>
<p class=dt>
:R</p>
<p class=indent>
In the following example, an Edit window is opened with the <code>cust_id</code> and <code>company</code> fields. The <code>cust_id</code> field is read-only and cannot be changed.</p>
<pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Open customer table
EDIT FIELDS cust_id:R, company
</code></pre>
<p class=dt>
:V = <i>lExpression1</i></p>
<p class=indent>
Specifies a verify option that performs field-level data validation within the Edit window. If <i>lExpression1</i> evaluates to true (.T.) when you move the cursor from the field, the data input into the field is considered correct and the cursor moves to the next field.</p>
<p class=tl>
If <i>lExpression1</i> evaluates to false (.F.), the data input is considered incorrect, the cursor remains in the field and a message is displayed. If <i>lExpression1</i> evaluates to 0, the data input is considered incorrect and the cursor remains in the field, but no error message is displayed.</P><p class=tl>
By default, <i>lExpression1</i> is evaluated only when the field is modified. To force verification, include the :F option.</P><p class=tl>
You can display your own error message by including the :E option.</P><p class=tl>
The verify option isn't executed for memo fields.</P><p class=dt>
:F</p>
<p class=indent>
Specifies a forced validation option that determines if the expression in the verify option (<i>lExpression1</i>) is evaluated when you move the cursor from a field or another window is activated. If :F is not included, <i>lExpression1</i> is evaluated only if changes are made to the field. If :F is included, <i>lExpression1</i> is evaluated, even if the field isn't modified.</p>
<p class=dt>
:E = <i>cMessageText</i></p>
<p class=indent>
Displays an error message specified with <i>cMessageText</i> instead of the default system message.</p>
<p class=tl>
If the validation expression :V = <i>lExpression1</i> evaluates to true (.T.), the cursor leaves the field normally. If the expression evaluates to false (.F.), the cursor remains in the field and the error message appears.</P><p class=tl>
If the validation expression :V = <i>lExpression1</i> evaluates to 0, no message is displayed and the cursor remains in the field being validated. This lets you display your own error messages in validation routines.</P><p class=tl>
The error message is displayed only if SET NOTIFY is ON. The bell is sounded if SET BELL is ON.</P><p class=tl>
The following example opens the <code>products</code> table and displays the <code>product_id</code> and <code>prod_name</code> fields. Enter a value greater than 100 in the <code>product_id</code> field to perform the field validation.</P><p class=tl>
:V specifies the validation criteria. :F forces the validation check to be performed whether the data is changed or not. :E replaces the Visual FoxPro system error message with a user-defined error message.</P><p class=tl>
In Visual FoxPro, the error message is displayed in the status bar at the bottom of the main Visual FoxPro window.</P><p class=tl>
Press ESC to close the Edit window.</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE products&nbsp; &amp;&amp; Open products table
IF _WINDOWS OR _MAC
 &nbsp; SET STATUS BAR ON
ENDIF
USE products
EDIT FIELDS in_stock :V = in_stock &lt; 100 ;
 &nbsp; :F ;
 &nbsp; :E = 'The stock amount must be less than 100'
</code></pre>
<p class=dt>
:P = <i>cFormatCodes</i></p>
<p class=indent>
Specifies a picture option that lets you create an editing template specified with <i>cFormatCodes</i> that controls the display and input of data for each field in an Edit window.</p>
<p class=tl>
For more information on using picture editing codes, see the <a href="lngformat_property.htm">Format</a> and <a href="lnginputmask_property.htm">InputMask</a> properties.</P><p class=tl>
The following example uses the picture option to allow only numeric data in a specific format to be entered in the <code>unit_price</code> field:</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE products&nbsp; &amp;&amp; Open products table
EDIT FIELDS unit_price :P = '99,999.99'
</code></pre>
<p class=dt>
:B = <i>eLowerBound</i>, <i>eUpperBound</i> [:F]</p>
<p class=indent>
Specifies a set of boundaries between which data must fall. The boundary expressions <i>eLowerBound</i> and <i>eUpperBound</i> must match the data type of the field and cannot be the names of user-defined functions. If the data entered doesn't fall between <i>eLowerBound</i> and <i>eUpperBound</i>, a system message is displayed indicating the range between which the data must fall.</p>
<p class=tl>
By default, the data you enter is checked against the boundary values only if you make a change to the contents of the field. To force checking against the boundary values, include the forced validation option (:F).</P><p class=tl>
The following example ensures that the value in the <code>in_stock</code> field is between 1 and 100. Press ESC to close the Edit window.</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE products&nbsp; &amp;&amp; Open products table
EDIT FIELDS in_stock :B = 1, 100 :F
</code></pre>
<p class=dt>
:H = <i>cHeadingText</i></p>
<p class=indent>
Specifies a heading option (:H) that allows you to replace the default field names with your own headings, which you specify with <i>cHeadingText</i>. By default, field names are placed to the left side of the fields in the Edit window.</p>
<p class=tl>
The following example provides user-defined headings for the displayed fields.</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE products&nbsp; &amp;&amp; Open products table
EDIT FIELDS prod_name :H = 'Product Name:', ;
 &nbsp; unit_price :H = 'Price per Unit:'
</code></pre>
<p class=dt>
:W = <i>lExpression2</i></p>
<p class=indent>
Specifies a WHEN option that allows you to conditionally prohibit the cursor from being moved to a field based on the value of the logical expression <i>lExpression</i>. (:W) evaluates <i>lExpression</i>. If <i>lExpression2</i> evaluates to false (.F.), you can't move the cursor to the field. If <i>lExpression2</i> evaluates to true (.T.), you can move the cursor to the field. User-defined functions are supported in <i>lExpression2</i>.</p>
<p class=tl>
Moving the cursor to all fields is prohibited if the current field is marked read-only. This occurs only when every field contains a WHEN clause that evaluates to false.</P><p class=dt>
<i>Scope</i></p>
<p class=indent>
Specifies a range of records that are displayed in the Edit window. The scope clauses are: ALL, NEXT <i>nRecords</i>, RECORD <i>nRecordNumber</i>, and REST. Commands that include <i>Scope</i> operate only on the table in the active work area. The default scope for EDIT is ALL records.</p>
<p class=tl>
For more information, see the <a href="tblscope_clauses.htm">Scope Clauses</a> online topic.</P><p class=dt>
FOR <i>lExpression1</i></p>
<p class=indent>
Specifies that only the records that satisfy the logical condition <i>lExpression1</i> are displayed in the Edit window. Using this argument allows you to filter out undesired records.</p>
<p class=tl>
Rushmore optimizes an EDIT FOR query if <i>lExpression1</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR clause.</P><p class=tl>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
WHILE <i>lExpression2</i></p>
<p class=indent>
Specifies a condition whereby records are displayed in the Edit window for as long as the logical expression <i>lExpression2</i> evaluates to true (.T.).</p>
<p class=dt>
FONT <i>cFontName</i> [, <i>nFontSize</i>]</p>
<p class=indent>
Specifies the Edit window's font and font size. The character expression <i>cFontName</i> specifies the name of the font, and the numeric expression <i>nFontSize</i> specifies the font size. For example, the following clause specifies 16-point Courier font for the fields displayed in an Edit window:</p>
<pre><code>FONT 'Courier',16 
</code></pre>
<p class=tl>
If you include the FONT clause but omit the font size <i>nFontSize</i>, a 10-point font is used in the Edit window.</P><p class=tl>
If you omit the FONT clause, 8-point MS Sans Serif is used. If the font you specify is not available, a font with similar font characteristics is substituted.</P><p class=dt>
STYLE <i>cFontStyle</i></p>
<p class=indent>
Specifies the Edit window's font style in Visual FoxPro. If you omit the STYLE clause, the Normal font style is used.</p>
<p class=tl>
If the font style you specify is not available, a font style with similar characteristics is substituted.</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Character</b></td>
<td class=label width=74%><b>Font style</b></td>
</tr>
<tr valign=top>
<td width=26%>B</td>
<td width=74%>Bold</td>
</tr>
<tr valign=top>
<td width=26%>I</td>
<td width=74%>Italic</td>
</tr>
<tr valign=top>
<td width=26%>N</td>
<td width=74%>Normal</td>
</tr>
<tr valign=top>
<td width=26%>O</td>
<td width=74%>Outline</td>
</tr>
<tr valign=top>
<td width=26%>Q</td>
<td width=74%>Opaque</td>
</tr>
<tr valign=top>
<td width=26%>S</td>
<td width=74%>Shadow</td>
</tr>
<tr valign=top>
<td width=26%>-</td>
<td width=74%>Strikeout </td>
</tr>
<tr valign=top>
<td width=26%>T</td>
<td width=74%>Transparent</td>
</tr>
<tr valign=top>
<td width=26%>U</td>
<td width=74%>Underline</td>
</tr>
</table><br>
<p class=tl>
You can include more than one character to specify a combination of font styles. The following example opens an Edit window and uses an underlined font:</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Opens customer table
IF _WINDOWS
 &nbsp; EDIT FIELDS contact FONT 'System', 15&nbsp; STYLE 'NU'
ENDIF
IF _MAC
 &nbsp; EDIT FIELDS contact FONT 'Geneva', 14&nbsp; STYLE 'NU'
ENDIF
</code></pre>
<p class=dt>
FREEZE <i>FieldName</i></p>
<p class=indent>
Allows changes to be made to only one field specified with <i>FieldName</i> in the Edit window. The remaining fields are displayed and cannot be edited.</p>
<p class=dt>
KEY <i>eExpression1</i> [, <i>eExpression2</i>]</p>
<p class=indent>
Limits the scope of records that are displayed in the Edit window. With KEY, you can specify an index key value (<i>eExpression1</i>) or a range of key values (<i>eExpression1</i> , <i>eExpression2</i>) for the records displayed in the Edit window. The table must be indexed, and the index key value or values included in the KEY clause must be the same data type as the index expression of the master index file or master tag.</p>
<p class=tl>
In the following example, only records with postal codes falling within the range of 10,000 to 30,000 are displayed in the Edit window:</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Open customer table
SET ORDER TO postalcode
EDIT KEY '10000', '30000'
</code></pre>
<p class=dt>
LAST | NOINIT</p>
<p class=indent>
Saves any configuration changes made to the appearance of an Edit window. The changes are saved in the FOXUSER file and can include changes to the field list, the size of each field, and the location and size of the Edit window. For more information on this file, see <a href="lngset_resource.htm">SET RESOURCE</a>.</p>
<p class=tl>
If you issue EDIT with the LAST clause, the Edit window opens in the same configuration that was last saved in the FOXUSER file. This restores the previous Edit window configuration created with the last EDIT. If the last EDIT command issued in the Command window included a long list of clauses, issue EDIT LAST to avoid having to retype the command.</P><p class=tl>
Any Edit window configuration changes you make in the current session aren't saved if you exit EDIT by pressing CTRL+Q.</P><p class=dt>
LPARTITION</p>
<p class=indent>
Places the cursor in the first field in the left partition of the Edit window. An Edit window can be split into left and right partitions by including the PARTITION clause. By default, the cursor is placed in the first field in the right partition when the Edit window is opened.</p>
<p class=tl>
The cursor is placed in the right partition of the Edit window if you include LPARTITION without the PARTITION clause.</P><p class=dt>
NAME <i>ObjectName</i></p>
<p class=indent>
Creates an object reference for the Edit window, allowing you to manipulate the Edit window with object-oriented properties available for the Grid control.</p>
<p class=tl>
For additional information about object-oriented programming in Visual FoxPro, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>, in the <i>Programmer's Guide</i>. For additional information about the Grid control properties that you can specify for an Edit window created with the NAME clause, see the <a href="ctlgrid_control.htm">Grid Control</a> topic. </P><p class=dt>
NOAPPEND</p>
<p class=indent>
Prevents the user from adding records to the table by pressing CTRL+Y or choosing Append Mode from the View menu.</p>
<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Including NOAPPEND doesn't prevent you from appending a record from within a routine (created with VALID, WHEN, or ON KEY LABEL) while in the Edit window.</p><p class=dt>
NODELETE</p>
<p class=indent>
Prevents records from being marked for deletion from within an Edit window. By default, a record can be marked for deletion by pressing CTRL+T, choosing Toggle Deletion Mark from the Table menu or clicking in the leftmost column of the record to be deleted.</p>
<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Including NODELETE doesn't prevent you from marking a record for deletion from within a routine (created with VALID, WHEN or ON KEY LABEL) while in the Edit window.</p><p class=dt>
NOEDIT | NOMODIFY</p>
<p class=indent>
Prevents a user from modifying the table. NOEDIT and NOMODIFY are identical. If you include either clause, you can browse or search the table, but you cannot edit it. However, you can append and delete records.</p>
<p class=dt>
NOLINK</p>
<p class=indent>
Unlinks partitions in the Edit window. By default, the left and right partitions of the Edit window are linked; when you scroll through one partition, the other partition scrolls.</p>
<p class=dt>
NOMENU</p>
<p class=indent>
Removes the Table menu title in Visual FoxPro from the system menu bar, preventing access to the Edit menu.</p>
<p class=dt>
NOOPTIMIZE</p>
<p class=indent>
Disables Rushmore optimization of EDIT.</p>
<p class=tl>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide.</i></P><p class=dt>
NORMAL</p>
<p class=indent>
Opens the Edit window with its normal default settings, such as its colors, size, position, title, and control options (GROW, FLOAT, ZOOM, and so on). If you omit NORMAL and the current output window is a user-defined window with its own settings, the Edit window assumes those user-defined settings as well.</p>
<p class=dt>
NOWAIT</p>
<p class=indent>
Continues program execution immediately after the Edit window is opened. The program doesn't wait for the Edit window to be closed but continues executing on the program line immediately following the program line containing EDIT NOWAIT. If you omit NOWAIT, when EDIT is issued from within a program, an Edit window is opened and program execution pauses until the Edit window is closed.</p>
<p class=tl>
NOWAIT is available only from within a program. Including NOWAIT when issuing EDIT from the Command window has no effect.</P><p class=dt>
PARTITION <i>nColumnNumber</i></p>
<p class=indent>
Splits an Edit window into left and right partitions with <i>nColumnNumber</i> specifying the column number of the split bar. For example, if <i>nColumnNumber</i> is 20, the split bar is placed in column 20 of the Edit window.</p>
<p class=dt>
LEDIT</p>
<p class=indent>
Specifies that the left partition of the Edit window appears in Browse mode.</p>
<p class=dt>
REDIT</p>
<p class=indent>
Specifies that the right partition of the Edit window appears in Browse mode. The following examples opens an Edit window with the split bar placed in column 20 and the right partition open in Browse mode.</p>
<p class=tl>
Include both keywords to open both partitions in Browse mode.</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Opens customer table

EDIT PARTITION 30 REDIT
</code></pre>
<p class=dt>
PREFERENCE <i>PreferenceName</i></p>
<p class=indent>
Saves an Edit window's attributes and options for later use. Unlike LAST, which restores the Edit window as it appeared in the previous session, PREFERENCE saves an Edit window's attributes indefinitely in the FOXUSER resource file. Preferences can be retrieved at any time. For more information about the FOXUSER resource file, see <a href="lngset_resource.htm">SET RESOURCE</a>.</p>
<p class=tl>
Issuing EDIT with the specified preference name <i>PreferenceName</i> for the first time creates an entry in the FOXUSER file that saves the Edit window configuration. Issuing EDIT later with the same preference name restores the Edit window to that preference state. When the Edit window is closed, the preference state is updated.</P><p class=tl>
Preference names can be up to 10 characters long, must begin with a letter or an underscore, and can contain any combination of letters, numbers, and underscores.</P><p class=tl>
Once you have a preference the way you like it, you can prevent it from being changed. Close the Edit window, issue SET RESOURCE OFF, open the FOXUSER file as a table, and change the field containing the preference to read-only by changing the value of the logical field READONLY to true (.T.).</P><p class=tl>
For more information about the FOXUSER resource file, see <a href="lngset_resource.htm">SET RESOURCE</a>.</P><p class=dt>
REST</p>
<p class=indent>
Prevents the record pointer from being moved from its current position to the top of the table. By default, EDIT positions the record pointer at the top of the table.</p>
<p class=dt>
SAVE</p>
<p class=indent>
Keeps the Edit window and any of its memo field text-editing windows active and visible (open). You can then return to the Edit window after cycling through other open windows with the keyboard or the mouse.</p>
<p class=tl>
SAVE is available only from within a program. SAVE has no effect when included with EDIT in the Command window because EDIT SAVE is always the default in the interactive mode.</P><p class=dt>
TIMEOUT <i>nSeconds</i></p>
<p class=indent>
Specifies how long an Edit window waits for input. The numeric expression <i>nSeconds</i> specifies how many seconds can elapse without any input before the Edit window automatically closes.</p>
<p class=tl>
TIMEOUT is available only from within a program; it has no effect when you issue EDIT from the Command window. In the following example, the Edit window is closed if no input occurs in 10 seconds.</P><pre><code>DEFINE WINDOW wEdit FROM 1,1 TO 24,40 ;
 &nbsp; CLOSE ;
 &nbsp; GROW ;
 &nbsp; COLOR SCHEME 10
CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Open customer table
EDIT WINDOW wEdit ;
 &nbsp; FIELDS phone :H = 'Phone Number:' , ;
 &nbsp; company :H = 'Company:' ;
 &nbsp; TIMEOUT 10
RELEASE WINDOW wEdit 
</code></pre>
<p class=dt>
TITLE <i>cTitleText</i></p>
<p class=indent>
Overrides the default table name or alias that appears in the Edit window title bar with the title you specify with <i>cTitleText</i>. Otherwise, the name or alias of the table being browsed appears in the title bar.</p>
<p class=tl>
If you issue EDIT WINDOW to place the Edit window in a user-defined window, the Edit window's title replaces the user-defined window's title.</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Open customer table
EDIT;
 &nbsp; TITLE 'My Edit Window' ;
 &nbsp; FIELDS phone :H = 'Phone Number' , ;
 &nbsp; company :H = 'Company:'
</code></pre>
<p class=dt>
VALID <i>lExpression3</i></p>
<p class=indent>
Performs record-level validation in an Edit window. The VALID clause is executed only if a change is made to the record and you move the cursor to another record. The VALID clause is not executed if the only change is to a memo field.</p>
<p class=tl>
If VALID returns true (.T.), you can move the cursor to another record. If VALID returns false (.F.), the cursor remains in the current field and Visual FoxPro displays an error message. You can display your own error message when VALID returns false by including the ERROR clause. The character expression <i>cMessageText</i> is displayed as the error message. If VALID returns 0, the cursor remains in the current field, and an error message isn't displayed.</P><p class=tl>
The VALID clause shouldn't be confused with the verify option (:V), which enables field-level validation.</P><p class=dt>
:F</p>
<p class=indent>
Forces the VALID clause to execute before the user moves the cursor to the next record. In this case, VALID is executed even if the record isn't changed.</p>
<p class=dt>
ERROR <i>cMessageText</i></p>
<p class=indent>
Specifies an error message that overrides the system default and whose contents you define with <i>cMessageText</i>. Visual FoxPro displays your error message when VALID returns false (.F.).</p>
<p class=dt>
WHEN <i>lExpression4</i></p>
<p class=indent>
Evaluates a condition when the user moves the cursor to another record. If <i>lExpression4</i> evaluates to true (.T.), the user can modify the record moved to. If <i>lExpression4</i> evaluates to false (.F.) or 0, the record the user moves to becomes read-only and cannot be modified.</p>
<p class=tl>
The WHEN clause isn't executed when another window is activated.</P><p class=dt>
WIDTH <i>nFieldWidth</i></p>
<p class=indent>
Limits the number of characters displayed for all fields in a partition of the Edit window to <i>nFieldWidth</i>. Including the WIDTH clause doesn't change the size of fields in the table itself; it alters only the way the fields are displayed in the Edit window. If a width has been specified for an individual field with the FIELDS clause, it overrides the width specified with the WIDTH clause for that field.</p>
<p class=dt>
WINDOW <i>WindowName1</i></p>
<p class=indent>
Specifies a user-defined window whose characteristics the Edit window assumes. For example, if the user-defined window is created with the FLOAT clause, the Edit window can be moved. The specified window doesn't have to be active or visible, but it must be defined.</p>
<p class=dt>
IN [WINDOW] <i>WindowName2</i></p>
<p class=indent>
Specifies the parent window within which the Edit window is opened. The Edit window doesn't assume the characteristics of the parent window. An Edit window activated inside a parent window cannot be moved outside the parent window. If the parent window is moved, the Edit window moves with it.</p>
<p class=tl>
To access the Edit window, the parent window must first be defined with DEFINE WINDOW and must be active and visible.</P><p class=dt>
IN SCREEN</p>
<p class=indent>
Explicitly places an Edit window in the main Visual FoxPro window when a user-defined window is active.</p>
<p class=dt>
COLOR SCHEME <i>nSchemeNumber</i></p>
<p class=indent>
Specifies the number of a color scheme used for the Edit window's colors. In Visual FoxPro, the Edit window assumes the color scheme established using the Color Control Panel.</p>
<p class=label>
<b>Remarks</b></p>
<p>
EDIT allows you to edit the selected table within a window. EDIT behaves identically to CHANGE.</p>
<p>
If you press ESC to exit the Edit window, changes made to the last field you modified are discarded. However, if you move to another record after modifying a field, your changes to the field are saved.</p>
<p>
In a program, use DEACTIVATE WINDOW to save your changes and close an Edit window. Include the name of the Edit window in DEACTIVATE WINDOW. For more information on Edit window names, see <a href="lngwtitlelp_rp.htm">WTITLE(&nbsp;)</a>.</p>
<h4>SET SKIP Support</h4>
<p>
SET SKIP lets you establish a one-to-many relationship between two tables (see the example). For each record in the parent table, there can be multiple related records in the child table. If you create a one-to-many relationship, you can use EDIT to view records from both the parent and child tables.</p>
<p>
The parent record appears once, along with the first matching record from the child table. Any subsequent matching records are displayed in the rows following the parent record and first matching child record. In FoxPro for MS-DOS, shaded blocks are displayed in any column containing information from the parent table beyond the first matching record. In Visual FoxPro, the fill character for repeated parent information depends on the current Edit window font.</p>
<p>
For more information, see <a href="lngset_skip.htm">SET SKIP</a>.</p>
<h4>COL(&nbsp;) and ROW(&nbsp;) Support</h4>
<p>
Use COL(&nbsp;) and ROW(&nbsp;) to return the current screen row and column position of the cursor in an Edit window. If an Edit window is opened in the main Visual FoxPro window, the returned cursor position is relative to the main Visual FoxPro window, not to the Edit window itself. If an Edit window is opened in a user-defined window, COL(&nbsp;) and ROW(&nbsp;) return the cursor position relative to the user-defined window.</p>
</BODY>
</HTML>

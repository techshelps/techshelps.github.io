<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filer.dll</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="newfiler.dll"></a><sup></sup>Filer.dll</h1>
<p>
Filer.dll is a component version of the Filer desk accessory, available in previous versions of Microsoft Visual FoxPro (versions 3.0b and earlier). Filer.dll supports the most popular features of the Filer, including support for searching files for text strings and opening multiple files for editing.</p>
<p>
Filer.dll is a COM object, and as such, supports Automation. You can, therefore, create an instance of Filer.dll in Visual FoxPro or other Automation servers such as Microsoft Visual Basic and Microsoft Excel.</p>
<p>
Filer.dll is a base component that provides the file and text search engine, but doesn’t include a user interface. For example, you can programmatically create an instance of the Filer and search for and manipulate files without any input from a user. However, a Visual FoxPro form, Filer.scx (and Filer.sct), is provided to demonstrate how you can create a user interface for Filer.dll. For more information, see “Filer Interface” below.</p>
<p>
The following command will create an instance of the non-visual Filer search engine in Visual FoxPro. The syntax for other Automation servers is similar.</p>
<pre><code>oMyFiler = CREATEOBJECT('Filer.FileUtil')
</code></pre>
<p>
Once the Filer object is instantiated, you can specify file search conditions with the Filer properties, and then execute the file search with the Find( ) method. The Find method creates a Files collection object with its own set of properties that allow you to determine information about the files that match the search conditions. There are also methods for the Files collection object that allow you to open or delete the matching files.</p>
<p>
The following simple Visual FoxPro example demonstrates how you can search for and open text files from within Visual FoxPro.</p>
<pre><code>*** Instantiate the Filer object
oMyFiler = CREATEOBJECT('Filer.FileUtil')

oMyFiler.SearchPath = 'C:\Program Files\Microsoft Visual Studio\Vfp98' &amp;&amp; Default directory
oMyFiler.FileExpression = '*.TXT' &amp;&amp; Text file search

oMyFiler.Find(0) &amp;&amp; Search, discard last collection

FOR nFileCount = 1 TO oMyFiler.Files.Count
   oMyFiler.Files.Item(nFileCount).Edit &amp;&amp; Open files
ENDFOR
</code></pre>
<h3>Distribution</h3>
<p>
Filer.dll and its companion files are for use with Visual FoxPro only. You are not permitted to distribute any of the files with your distributed run-time applications.</p>
<h3>Filer Object Properties</h3>
<p>
The following table describes the properties associated with the Filer object.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Property</b></td>
<td class=label width=18%><b>Data Type</b></td>
<td class=label width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>SearchPath</td>
<td width=18%>C</td>
<td width=60%>The folder from which the search starts. Universal naming conventions (UNC) are supported.<br>
The default folder is C:\Program Files\Microsoft Visual Studio\Vfp98.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>FileExpression</td>
<td width=18%>C</td>
<td width=60%>The file search mask that can include multiple masks separated by semicolons (;). For example, the file search mask *.scx; *.sct specifies to search for all files with the extensions .scx and .sct.<br>
The default file search mask is *.*.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>SubFolder</td>
<td width=18%>N</td>
<td width=60%>A numeric value that specifies if a recursive search is performed from the folder specified with the SearchPath property.<br>
If SubFolder is 0, the file search is performed only in the folder specified with the SearchPath property. If SubFolder is 1, the file search is performed in the folder specified with the SearchPath property and all its subfolders. Note that the Filer ignores System folders.<br>
The default value is 0.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>SearchText1</td>
<td width=18%>C</td>
<td width=60%>A text string to search for in the files that match the file search mask specified by the FileExpression property.<br>
The default value is the empty string.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>SearchText2</td>
<td width=18%>C</td>
<td width=60%>An additional text string to search for in the files that match the file search mask specified by the FileExpression property. Ignored if SearchText1 contains the empty string.<br>
The default value is the empty string.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>SearchText3</td>
<td width=18%>C</td>
<td width=60%>An additional text string to search for in the files that match the file search mask specified by the FileExpression property. Ignored if SearchText1 and SearchText2 contain the empty string.<br>
The default value is the empty string.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>IgnoreCase</td>
<td width=18%>N</td>
<td width=60%>A numeric value specifying whether or not case is ignored for text in the text strings specified in SearchText1, SearchText2, and SearchText3. If IgnoreCase is 0, case isn’t ignored (upper- and lower-case are significant). If IgnoreCase is 1, case is ignored.<br>
The default value is 1.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>WholeWords</td>
<td width=18%>N</td>
<td width=60%>A numeric value specifying whether or not the text in the text strings specified in SearchText1, SearchText2, and SearchText3 must match whole words for the search to be successful. If WholeWords is 0, the text in the text strings do not have to match whole words for the search to be successful. If WholeWords is 1, the text in the text strings must match whole words for the search to be successful.<br>
The default value is 0.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>SearchAnd</td>
<td width=18%>N</td>
<td width=60%>A numeric value specifying whether or not all the text in the text strings specified in SearchText1, SearchText2, and SearchText3 must match for the search to be successful. If SearchAnd is 0, the search is successful if any of the text in the text strings matches. If SearchAnd is 1, the search is successful only if all of the text in the text strings matches.<br>
The default value is 0.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>Editor</td>
<td width=18%>C</td>
<td width=60%>The editor in which files are opened with the Files collection Open method. Ignored if the IsHostedByFox property is 1.<br>
The default editor is Notepad.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>IsHostedByFox</td>
<td width=18%>N</td>
<td width=60%>A numeric value indicating the client that instantiated Filer.dll. If IsHostedByFox is 1, the client is Visual FoxPro, and the Visual FoxPro editor is used to open files. If IsHostedByFox is 0, the client is an application other than Visual FoxPro, and the editor used to open files is specified by the Editor property.<br>
The default value is 1 in Visual FoxPro.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>SortBy</td>
<td width=18%>N</td>
<td width=60%>A numeric value that specifies the order in which the Files collection is sorted. The following table lists the values for the SortBy property and the order in which the files are sorted.<br>
<br>
0No order<br>
1Path and file name<br>
2File name<br>
3File extension<br>
4File size<br>
5File last write date<br>
6File last access date<br>
7File creation date<br>
8File attributes<br>
<br>
The default value is 1.<br>
Read-write.</td>
</tr>
<tr valign=top>
<td width=22%>SortDirection</td>
<td width=18%>N</td>
<td width=60%>A numeric value that specifies if the Files collection is sorted in ascending or descending order. If SortDirection is 0, the Files collection is sorted in ascending order. If SortDirection is 1, the Files collection is sorted in descending order.<br>
The default value is 0.<br>
Read-write.</td>
</tr>
</table><br>
<h3>Filer Object Methods</h3>
<p>
The following table describes the methods associated with the Filer object.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Method</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>Find(<i>nValue</i>)</td>
<td width=78%>A method that performs the file search and creates a Files collection. The Find method contains a numeric value indicating the number files in the Files collection.<p>
<i>nValue</i> is a numeric value that specifies if Files collections from previous searches are discarded. If <i>nValue</i> is 0, the Files collections from previous searches are discarded. If <i>nValue</i> is 1, the Files collection created by the current search is appended to the previous searches.</p>
<p>
Note that <i>nValue</i> is not optional.</p>
</td>
</tr>
</table><br>
<h3>Files Collection Objects</h3>
<p>
The following table describes the object references associated with the Files collection.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Object</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>Item(<i>nValue</i>)</td>
<td width=78%>An object reference to a file in the Files collection. <i>nValue</i> is an index to a file in the Files collection. <i>nValue</i> begins at 1, and continues to the number of files in the Files collection. You can use the Count property, described below, to determine the number of files in the Files collection.</td>
</tr>
</table><br>
<h3>Files Collection Properties</h3>
<p>
The following table describes the properties associated with the Files collection.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Property</b></td>
<td class=label width=21%><b>Data Type</b></td>
<td class=label width=55%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%>Count</td>
<td width=21%>N</td>
<td width=55%>Contains the number of files in the Files collection.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>Name</td>
<td width=21%>C</td>
<td width=55%>The name of the file, excluding the path.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>Size</td>
<td width=21%>N</td>
<td width=55%>The size of the file in bytes.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>SizeHigh</td>
<td width=21%>N</td>
<td width=55%>The high 4 bytes of the file size if the file size is greater than 4 gigabytes.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>Attr</td>
<td width=21%>N</td>
<td width=55%>The Windows file attributes for a file. The following is a list of numeric values for typical file attributes.<br>
<br>
0No attributes set<br>
1Read-Only<br>
2Hidden<br>
4System<br>
32Archived<br>
<br>
The value of Attr can be the sum of several file attributes. For example, if Attr is 7 (1+2+4), the file is a read-only, hidden system file.<br>
For more information about the other file attributes for which Attr returns values, see the GetFileAttributes function described in the Microsoft Developer’s Network library.<br>
Read-Write.</td>
</tr>
<tr valign=top>
<td width=24%>DateTime</td>
<td width=21%>N</td>
<td width=55%>The time stamp assigned by Windows to a file when it is created.<br>
The integer portion of the time stamp is the number of days since 12/30/1899, and the remainder is the fractional remainder of the day from which you can determine the time when the file was created.<br>
The Filer form, Filer.scx, contains a user-defined method called GetTime that demonstrates how you can determine the date and time a file was created from the DateTime property.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>LastAccessTime</td>
<td width=21%>N</td>
<td width=55%>The time stamp assigned by Windows to a file when it is was last accessed.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>LastWriteTime</td>
<td width=21%>N</td>
<td width=55%>The time stamp assigned by Windows to a file when it is was last written to.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>AlternateName</td>
<td width=21%>C</td>
<td width=55%>The short name of the file if the file name is longer than the MS-DOS<sup>®</sup> 8.3 character naming convention.<br>
Read-only.</td>
</tr>
<tr valign=top>
<td width=24%>Path</td>
<td width=21%>C</td>
<td width=55%>The full path to file.<br>
Read-only.</td>
</tr>
</table><br>
<h3>Files Collection Methods</h3>
<p>
The following table describes the methods associated with the Files collection.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Method</b></td>
<td class=label width=76%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%>Edit</td>
<td width=76%>Opens the specified file for editing. If the IsHostedByFox property is 1 (the default for Visual FoxPro), the file is opened in the Visual FoxPro editor. If the IsHostedByFox property is 0, the file is opened in the editor specified with the Editor property (NotePad by default).</td>
</tr>
<tr valign=top>
<td width=24%>Delete</td>
<td width=76%>Deletes the specified file from disk. The file isn’t placed in the Recycling Bin.</td>
</tr>
</table><br>
<h3>Running Filer.scx</h3>
<p>
A sample form, Filer.scx, is included to demonstrate how you can create a user interface in Visual FoxPro for Filer.dll. To run the Filer form, use the DO FORM command as follows:</p>
<pre><code>DO FORM (HOME(1) + 'Tools\Filer\Filer.scx')
</code></pre>
<p>
When you run the Filer form, a Filer item is added to the Visual FoxPro Tools menu, and the item remains in the menu during the current Visual FoxPro session. Choose the Filer item from the Tools menu to run the Filer again.</p>
<p>
Issue the following command to open the Filer form to view the code behind the interface or to modify the form:</p>
<pre><code>MODIFY FORM (HOME(1) + 'Tools\Filer\Filer.scx')
</code></pre>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COPY TO Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngcopy_to"></a><sup></sup>COPY TO Command</h1>
<p>
<a href="lngcopy_tox.htm">Example</a> &nbsp; <a href="lngcopy_tosa.htm">See Also</a></p>
<p>
Creates a new file from the contents of the currently selected table.</p>
<p class=label>
<b>Syntax</b></p>
<p>
COPY TO <i>FileName</i><br>
 &nbsp; [DATABASE <i>DatabaseName</i> [NAME <i>LongTableName</i>]]<br>
 &nbsp; [FIELDS <i>FieldList</i><br>
 &nbsp; | FIELDS LIKE <i>Skeleton</i><br>
 &nbsp; | FIELDS EXCEPT <i>Skeleton</i>]<br>
 &nbsp; [<i>Scope</i>] [FOR <i>lExpression1</i>] [WHILE <i>lExpression2</i>]<br>
 &nbsp; [[WITH] CDX] | [[WITH] PRODUCTION]<br>
 &nbsp; [NOOPTIMIZE]<br>
 &nbsp; [[TYPE] [FOXPLUS | FOX2X | DIF | MOD<br>
 &nbsp; | SDF | SYLK | WK1 | WKS | WR1 | WRK | CVS | | XLS | XL5<br>
 &nbsp; | DELIMITED [WITH <i>Delimiter</i> | WITH BLANK | WITH TAB<br>
 &nbsp; | WITH CHARACTER <i>Delimiter</i>]]]<br>
 &nbsp; [AS <i>nCodePage</i>]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>FileName</i></p>
<p class=indent>
Specifies the name of the new file COPY TO creates. If you do not include an extension with the file name, the default extension for the specified file type is assigned. If you do not specify a file type, COPY TO creates a new Visual FoxPro table and assigns the table file name the default extension .dbf.</p>
<p class=dt>
DATABASE <i>DatabaseName</i></p>
<p class=indent>
Specifies a database to which the new table is added.</p>
<p class=dt>
NAME <i>LongTableName</i></p>
<p class=indent>
Specifies a long name for the new table. Long names can contain up to 128 characters and can be used in place of short file names in the database.</p>
<p class=dt>
FIELDS <i>FieldList</i></p>
<p class=indent>
Specifies which fields are copied to the new file. If you omit FIELDS <i>FieldList</i>, all fields are copied to the file. If the file you are creating is not a table, memo fields are not copied to the new file, even if memo field names are included in the field list.</p>
<p class=dt>
FIELDS LIKE <i>Skeleton</i></p>
<p class=indent>
Specifies that fields from the original table that match the field skeleton <i>Skeleton</i> are included in the new file that COPY TO creates.</p>
<p class=dt>
FIELDS EXCEPT <i>Skeleton</i></p>
<p class=indent>
Specifies that all fields except those that match the field skeleton <i>Skeleton</i> are included in the new file that COPY TO creates.</p>
<p class=tl>
The field skeleton <i>Skeleton</i> supports wildcards. For example, to specify that all fields that begin with the letters A and P are included in the new file, use the following:</P><pre><code>COPY TO mytable FIELDS LIKE A*,P*
</code></pre>
<p class=tl>
The LIKE clause can be combined with the EXCEPT clause:</P><pre><code>COPY TO mytable FIELDS LIKE A*,P* EXCEPT PARTNO*
</code></pre>
<p class=dt>
<i>Scope</i></p>
<p class=indent>
Specifies a range of records to copy to a file. Only the records within the range are copied. The scope clauses are: ALL, NEXT <i>nRecords</i>, RECORD <i>nRecordNumber</i>, and REST. For more information on scope clauses, see the <a href="tblscope_clauses.htm">Scope Clauses</a> topic.</p>
<p class=dt>
FOR <i>lExpression1</i></p>
<p class=indent>
Specifies that only the records for which the logical condition <i>lExpression1</i> evaluates to true (.T.) are copied to the file. Include FOR <i>lExpression1</i> to conditionally copy records, filtering out undesired records.</p>
<p class=tl>
Rushmore<sup>™</sup> optimizes COPY TO with a FOR <i>lExpression1</i> clause if <i>lExpression1</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR <i>lExpression1</i> clause. </P><p class=tl>
For information on Rushmore optimizable expressions, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
WHILE <i>lExpression2</i></p>
<p class=indent>
Specifies a condition whereby records are copied for as long as the logical expression <i>lExpression2</i> evaluates to true (.T.).</p>
<p class=dt>
[WITH] CDX | [WITH] PRODUCTION</p>
<p class=indent>
Creates a structural index file for the new table that is identical to the structural index file of the existing table. The tags and index expressions from the original structural index file are copied to the new structural index file. The CDX and PRODUCTION clauses are identical.</p>
<p class=tl>
Do not include CDX or PRODUCTION if you are copying to a file other than a new Visual FoxPro table.</P><p class=dt>
NOOPTIMIZE</p>
<p class=indent>
Disables Rushmore optimization of COPY TO.</p>
<p class=indent>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</p>
<p class=dt>
TYPE</p>
<p class=indent>
Specifies the file type if the file you create isn't a Visual FoxPro table. Although you must specify a file type, you need not include the TYPE keyword.</p>
<p class=dt>
FOXPLUS</p>
<p class=indent>
Visual FoxPro memo files have a different structure than Microsoft FoxBASE+<sup>™</sup> memo files. If your source Visual FoxPro table contains a memo field, include the FOXPLUS clause to create a table that can be used in FoxBASE+. The Visual FoxPro memo field cannot contain binary data because FoxBASE+ does not support binary data in memo fields.</p>
<p class=dt>
FOX2X</p>
<p class=indent>
Creates a new table that can be opened in earlier versions of FoxPro (versions 2.0, 2.5, and 2.6).</p>
<p class=tl>
For Numeric, Float, Integer, Double, and Currency type fields, null values in the source table are converted to zero in the new table. For other field types, null values in the source table are converted to blanks in the new table. For further information about blank values, see <a href="lngisblanklp_rp.htm">ISBLANK(&nbsp;)</a>.</P><p class=tl>
The following table lists the Visual FoxPro fields types that are converted to different field types in the new table when the FOX2X argument is included.</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Visual FoxPro field type</b></td>
<td class=label width=52%><b>FoxPro 2.x field type</b></td>
</tr>
<tr valign=top>
<td width=48%>Currency</td>
<td width=52%>Float</td>
</tr>
<tr valign=top>
<td width=48%>DateTime</td>
<td width=52%>Date</td>
</tr>
<tr valign=top>
<td width=48%>Double</td>
<td width=52%>Float</td>
</tr>
<tr valign=top>
<td width=48%>Integer</td>
<td width=52%>Numeric</td>
</tr>
</table><br>
<p class=dt>
DIF</p>
<p class=indent>
Creates a VisiCalc<sup>®</sup> .dif (Data Interchange Format) file. Fields from the Visual FoxPro table become vectors (columns) and records become tuples (rows). The new file name is assigned a .dif extension if you do not include an extension in <i>FileName</i>.</p>
<p class=dt>
MOD</p>
<p class=indent>
Creates a Microsoft Multiplan<sup>®</sup> version 4.01 file. The new Microsoft Multiplan file name is assigned an .mod extension if an extension isn't included.</p>
<p class=dt>
SDF</p>
<p class=indent>
Creates an SDF (System Data Format) file. An SDF file is an ASCII text file in which records have a fixed length and end with a carriage return and line feed. Fields aren't delimited. The SDF file name is assigned a .txt file extension if you do not include an extension. Note that the SET CENTURY setting is ignored when creating SDF files with COPY TO.</p>
<p class=dt>
SYLK</p>
<p class=indent>
Creates a SYLK (Symbolic Link) interchange file. SYLK files are used in Microsoft MultiPlan. Each field from the currently selected table becomes a column in the spreadsheet and each record becomes a row. SYLK file names have no extension.</p>
<p class=dt>
WK1</p>
<p class=indent>
Creates a Lotus<sup>®</sup> 1-2-3<sup>®</sup> version 2.x spreadsheet file. Each field from the currently selected table becomes a column in the spreadsheet and each record becomes a row. A .wk1 file name extension is assigned to the new spreadsheet.</p>
<p class=dt>
WKS</p>
<p class=indent>
Creates a Lotus 1-2-3 version 1a spreadsheet file. Each field from the currently selected table becomes a column in the spreadsheet and each record becomes a row. A .wks file name extension is assigned to the new spreadsheet.</p>
<p class=dt>
WR1</p>
<p class=indent>
Creates a Lotus Symphony<sup>®</sup> version 1.1 or 1.2 spreadsheet file. Each field from the currently selected table becomes a column in the spreadsheet and each record becomes a row. A .wr1 file name extension is assigned to the new spreadsheet.</p>
<p class=dt>
WRK</p>
<p class=indent>
Creates a Lotus Symphony version 1.0 spreadsheet file. Each field from the currently selected table becomes a column in the spreadsheet and each record becomes a row. A .wr1 file name extension is assigned to the new spreadsheet.</p>
<p class=dt>
CVS</p>
<p class=indent>
Creates a comma separated value file. A CSV file has the field names as the first line in the file, and the field values in the remainder of the file are separated with commas.</p>
<p class=dt>
XLS</p>
<p class=indent>
Creates a Microsoft Excel version 2.0 worksheet file. Each field from the currently selected table becomes a column in the spreadsheet and each record becomes a row. An .xls extension is assigned to the new worksheet if you do not include a file extension.</p>
<p class=dt>
XL5</p>
<p class=indent>
Creates a Microsoft Excel version 5.0 worksheet file. Each field from the currently selected table becomes a column in the spreadsheet and each record becomes a row. An .xls extension is assigned to the new worksheet if you do not include a file extension.</p>
<p class=dt>
DELIMITED</p>
<p class=indent>
Creates a delimited file. A delimited file is an ASCII text file in which each record ends with a carriage return and linefeed. The default field separator is a comma. Since character data may include commas, character fields are additionally delimited with double quotation marks.</p>
<p class=tl>
Unless you specify otherwise, a .txt extension is assigned to all newly created DELIMITED files.</P><p class=dt>
DELIMITED WITH <i>Delimiter</i></p>
<p class=indent>
Creates a delimited file with character fields delimited by a character other than a quotation mark. The character that delimits character fields is specified with <i>Delimiter</i>.</p>
<p class=dt>
DELIMITED WITH BLANK</p>
<p class=indent>
Creates a delimited file with fields separated by spaces instead of commas.</p>
<p class=dt>
DELIMITED WITH TAB</p>
<p class=indent>
Creates a delimited file with fields separated by tabs instead of commas.</p>
<p class=dt>
DELIMITED WITH CHARACTER <i>Delimiter</i></p>
<p class=indent>
Creates a delimited file with all fields enclosed by the character specified with <i>Delimiter</i>. If <i>Delimiter</i> is a semicolon (the character used in Visual FoxPro to indicate command line continuation), enclose the semicolon in quotation marks. You can also specify the BLANK and TAB keywords for <i>Delimiter</i>.</p>
<p class=tl>
Note that the WITH <i>Delimiter </i>clause can be combined with the WITH CHARACTER clause. For example, the following command creates a text file with character fields enclosed by underscores and all fields delimited from each other with semicolons:</P><pre><code>COPY TO mytxt.txt DELIMITED WITH _ WITH CHARACTER ';'
</code></pre>
<p class=dt>
AS <i>nCodePage</i></p>
<p class=indent>
Specifies the code page for the table or file COPY TO creates. Visual FoxPro copies the contents of the currently selected table, and, as it copies the data, automatically converts the data to the code page you specify for the new table or file. If possible, Visual FoxPro marks the newly created table or file with the code page you specify.</p>
<p class=tl>
If you specify a value for <i>nCodePage</i> that is not supported, Visual FoxPro generates an error message. You can use GETCP(&nbsp;) for <i>nCodePage</i> to display the Code Page dialog box, allowing you to specify a code page for the table or file Visual FoxPro creates.</P><p class=tl>
If you omit AS <i>nCodePage</i>, the newly created table or file is converted to the current Visual FoxPro code page.</P><p class=tl>
If <i>nCodePage</i> is 0, no code page conversion occurs and the newly created table or file is not marked with a code page.</P><p class=label>
<b>Remarks</b></p>
<p>
If an index order is set, records are copied in master index order.</p>
</BODY>
</HTML>

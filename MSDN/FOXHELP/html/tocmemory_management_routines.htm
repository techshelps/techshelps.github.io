<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Help Contents: Professional Reference</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="tocmemory_management_routines"></a><sup></sup>Memory Management Routines</h1>
<p>
These API routines allow you to manipulate and allocate memory for your API functions.</p>
<h4><a href="lng_allocalp_rp.htm">_Alloca(&nbsp;)</a></h4>
<p>
Allocates a block of stack space for the calling routine. Memory is automatically freed when the routine exits.</p>
<h4><a href="lng_allochandlp_rp.htm">_AllocHand(&nbsp;)</a></h4>
<p>
Returns a new MHANDLE of size <i>hsize</i>. A value of zero is returned when there is insufficient memory to fulfill the request. Memory allocated with _AllocHand(&nbsp;) isn't initialized.</p>
<h4><a href="lng_freehandlp_rp.htm">_FreeHand(&nbsp;)</a></h4>
<p>
Releases an MHANDLE previously allocated by means such as _AllocHand(&nbsp;).</p>
<h4><a href="lng_gethandsizelp_rp.htm">_GetHandSize(&nbsp;)</a></h4>
<p>
Returns the usable number of bytes associated with an MHANDLE.</p>
<h4><a href="lng_handtoptrlp_rp.htm">_HandToPtr(&nbsp;)</a></h4>
<p>
Translates an MHANDLE to a FAR (32-bit) pointer, which points to the memory allocated to this MHANDLE.</p>
<h4><a href="lng_hlocklp_rp.htm">_HLock(&nbsp;)</a></h4>
<p>
Locks an MHANDLE to prevent it from moving if Visual FoxPro requires memory reorganization.</p>
<h4><a href="lng_hunlocklp_rp.htm">_HUnLock(&nbsp;)</a></h4>
<p>
Unlocks an MHANDLE, allowing it to participate in Visual FoxPro memory reorganization.</p>
<h4><a href="lng_memavaillp_rp.htm">_MemAvail(&nbsp;)</a></h4>
<p>
Returns True if a request to allocate a handle of <i>size</i> bytes will succeed. Otherwise, _MemAvail(&nbsp;) returns False.</p>
<h4><a href="lng_memcmplp_rp.htm">_MemCmp(&nbsp;)</a></h4>
<p>
Compares two <i>length</i> byte memory areas.</p>
<h4><a href="lng_memfilllp_rp.htm">_MemFill(&nbsp;)</a></h4>
<p>
Fills an area of memory starting at the location pointed to by <i>ptr</i> with <i>length</i> copies of the byte in <i>character</i>.</p>
<h4><a href="lng_memmovelp_rp.htm">_MemMove(&nbsp;)</a></h4>
<p>
Copies <i>length</i> bytes from <i>src</i> to <i>dest</i>.</p>
<h4><a href="lng_sethandsizelp_rp.htm">_SetHandSize(&nbsp;)</a></h4>
<p>
Changes the amount of memory allocated to an MHANDLE. The routine returns True if the reallocation is successful or False if the reallocation fails.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Guidelines for Using Visual FoxPro Foundation Classes</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="ffcusing_visual_foxpro_foundation_classes"></a>Guidelines for Using Visual FoxPro Foundation Classes</h1>
<p>
<a href="using_visual_foxpro_foundation_classessa.htm">See Also</a></p>
<p>
The Visual FoxPro .vcx visual class libraries located in the \Ffc\ folder contain a variety of foundation classes for enhancing your Visual FoxPro applications with little or no programming. You can freely distribute the foundation classes with your applications. These foundation classes are contained in the <a href="dgapplication_development_and_developer_productivity.htm#newcomponent_gallery_overview">Component Gallery</a>. The Component Gallery provides a quick and easy way to learn more about the properties, events, and methods of each of the foundation classes.</p>
<p>
You can also open up a foundation class in the Class Designer or Class Browser to see its structure and code. This is a great way to learn how the foundation class works as well as offering excellent insights into programming with Visual FoxPro.</p>
<p>
The following guidelines provide information about how you can add the Visual FoxPro foundation classes to your applications.</p>
<h2>Class Types</h2>
<p>
You need to know the Visual FoxPro base class of a foundation class before you can add the foundation class to your application. Certain foundation classes can be used only as visual objects on forms, while others are non-visual and can be run programmatically without being placed on a form. The <a href="ffcvisual_foxpro_foundation_classes.htm">Visual FoxPro Foundation Classes</a> documentation indicates the base class of each foundation class so you can determine if the foundation class can be added to a form, or run programmatically in your application. Note that in the Component Gallery you can right-click a foundation class to display a shortcut menu. Choose <b>Properties</b> from the shortcut menu, and then choose the Class tab to display the base class.</p>
<p>
The following table lists the Visual FoxPro base classes and how they can be added to your applications.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Category A – </b>base classes that can be dropped onto a form.</td>
<td class=label width=36%><b>Category B – </b>base classes that can be dropped onto a form or run programmatically in your application.</td>
<td class=label width=32%><b>Category C – </b>base classes that can only be run programmatically in your application.</td>
</tr>
<tr valign=top>
<td width=32%>Checkbox</td>
<td width=36%>Custom</td>
<td width=32%>Form</td>
</tr>
<tr valign=top>
<td width=32%>Combobox</td>
<td width=36%>Container</td>
<td width=32%>Formset</td>
</tr>
<tr valign=top>
<td width=32%>Commandbutton</td>
<td width=36%>Timer</td>
<td width=32%>Toolbar</td>
</tr>
<tr valign=top>
<td width=32%>Commandgroup</td>
<td width=36%>ProjectHook</td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Editbox</td>
<td width=36%>ActiveDoc</td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Grid</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Hyperlink</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Image</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Label</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Line</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Listbox</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>OLE Control</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Optionbutton</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Optiongroup</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Shape</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Spinner</td>
<td width=36%></td>
<td width=32%></td>
</tr>
<tr valign=top>
<td width=32%>Textbox</td>
<td width=36%></td>
<td width=32%></td>
</tr>
</table><br>
<h2>Adding Foundation Classes to Forms</h2>
<p>
You will most often add foundation classes to forms. You can drag and drop foundation classes from the Component Gallery, Class Browser, Project Manager, and the Forms Control toolbar onto forms. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can select a foundation class you’ve added to a form and then choose <b>Class Browser</b> from the <b>Tools</b> menu to display more information about the foundation class.</p>
<p>
<a href="newcomponent_gallery_window.htm">Component Gallery</a> – The Component Gallery provides the easiest way to add foundation classes to a form. For foundation classes with Category A and B base classes, you can drag the foundation class from the Component Gallery and then drop it on a form. You can also right-click a foundation class in the Component Gallery to display a shortcut menu, and then choose <b>Add to Form</b> to add the foundation class to the form. </p>
<p>
Some of the foundation classes have associated builders that are automatically launched to prompt you for more information needed by the foundation class. </p>
<p>
<a href="cmdclass_browser_window.htm">Class Browser</a> – You can drag foundation classes with Category A and B base classes directly from the Class Browser to a form by using the drag icon in the upper left corner of the Class Browser. Select the foundation class in the Class Browser, click the icon for the foundation class in the upper left corner of the Class Browser, and then drag the icon over the form. Release the mouse button over the form where you’d like the foundation class to appear on the form.</p>
<p>
Foundation classes dragged from the Class Browser to a form do not launch the associated builder. However, you can launch the builder after you drop the foundation class on the form. Select the foundation class on the form, then right-click to display the shortcut menu. Choose <b>Builder</b> from the shortcut menu to launch the builder.</p>
<p>
<a href="wndproject_manager.htm">Project Manager</a> – Foundation classes with Category A and B base classes can be dragged from the Project Manager and dropped on a form.</p>
<p>
Foundation classes dragged from the Project Manager to a form do not launch the associated builder. However, you can launch the builder after you drop the foundation class on the form. Select the foundation class, then right-click to display the shortcut menu. Choose <b>Builder</b> from the shortcut menu to launch the builder.</p>
<p>
<a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a> – Foundation classes with Category A and B base classes added to the Form Controls toolbar can be added to a form. </p>
<p>
If the Builder Lock isn’t on, foundation classes dropped from the Form Controls toolbar might launch an associated builder. If the Build Lock is on, you can launch the builder after you add the foundation class to the form. Select the foundation class on the form, and then right-click to display the shortcut menu. Choose <b>Builder</b> from the shortcut menu to launch the builder.</p>
<h2>Adding Foundation Classes to Projects</h2>
<p>
When a form containing foundation classes is added to a Visual FoxPro project, the Project Manager automatically adds the visual class libraries containing the foundation classes to the project. However, there are other cases where you might need to add foundation classes to a project. For example, if your application runs a Category C foundation class, you must add the foundation class to the project.</p>
<p>
You can add Visual FoxPro Foundation classes to a project by doing any of the following:
<ul type=disc>
<li>
Drag the item containing the class from the Component Gallery<br><br></li>
<li>
Drag the class library file (.vcx) using the Windows Explorer<br><br></li>
<li>
Choose the Add button in Project Manager</li>
</ul>
<h3>Adding Foundation Classes from the Component Gallery</h3>
<p>
You can drag a foundation class from the Component Gallery to a project, or you can right-click the foundation class in the Component Gallery to display a shortcut menu, and then choose <b>Add to Project</b> to add the foundation class to the project. When you add a foundation class to a project, the <b>Add Class to Project</b> dialog box is displayed, prompting you with the following options:</p>
<p class=dt>
<b>Add class to project</b></p>
<p class=indent>
Choose this option to add the foundation class and its .vcx class library to the project. Again, this is done automatically for classes dropped onto a form (Categories A and B). For certain Category B and C classes where you plan to call them programmatically from within your application, you will want to choose this option.</p>
<p class=dt>
<b>Create a new class from selected class</b></p>
<p class=indent>
Choose this option to create a new subclass from the foundation class you want to add to the project. This option allows you to enhance the functionality of the original foundation class, usually by adding additional program code.</p>
<p class=dt>
<b>Create a new form from selected class</b></p>
<p class=indent>
Choose this option for foundation classes with a Form base class (for example, the foundation classes in _dialogs.vcx). This option allows you to create a new form from the foundation class and enhance the functionality of the original foundation class.</p>
<h3>Adding Foundation Classes from the Windows Explorer</h3>
<p>
You can use Windows Explorer to access classes to add to your project.</p>
<p class=label>
<b>To add a foundation class using Windows Explorer</b>
<ul type=disc>
<li>
Choose the visual class library file (.vcx) containing the class from Windows Explorer to the Project Manager.</li>
</ul>
<p>
The visual class library is added to the Class Libraries item in the Project Manager.</p>
<h3>Adding Foundation Classes from within the Project Manager</h3>
<p>
You can use add classes to add to your project from within the Project Manager.</p>
<p class=label>
<b>To add a foundation class from within the Project Manager</b>
<ol>
<li>
In the Project Manager choose the Classes tab.<br><br></li>
<li>
Click the Add button.<br><br></li>
<li>
Select the class library from the \Ffc\ folder that contains the foundation class to add to the project.<br><br></li>
<li>
Click OK.</li>
</ol>
<h2>Incorporating Classes into your Application</h2>
<p>
In many situations, foundation classes don’t require additional programming to work with your application. However, you might need to provide additional program code for certain foundation classes (those of Category B and Category C non-visual base classes).</p>
<h3>Non-Visual Foundation Classes</h3>
<p>
For example, foundation classes are often based on the Category B Custom class, and these require additional programming. These non-visual classes often perform common tasks such as checking information in the Windows registry, handling environment settings, managing application errors, and utilizing Automation with other applications, such as performing mail merge with Microsoft Word.</p>
<p>
You can drop these non-visual classes onto a form, but you will need to do some additional work in order for them to work with your application. In some cases, a builder launches when you drag a foundation class onto a form.</p>
<p>
The following example demonstrates program code to use a non-visual foundation class in your application:
<ol>
<li>
Drag the <a href="ffcfile_version.htm">File Version</a> foundation class from the Component Gallery (Foundation&nbsp;Classes\Utilities folder) onto a form.<br><br></li>
<li>
Add a command button to the form and add the following code to its Click event:<pre><code>WITH THISFORM._FILEVERSION1
.cFileName = HOME( )+ 'VFP6.EXE'
.GetVersion( )
.DisplayVersion( )
ENDWITH
</code></pre>
</li>
<li value=18>
Run the form and click the command button.</li>
</ol>
<p>
You can incorporate a non-visual class in your application without dropping it on a form, as long as you include it in the project used to create the application. The following code illustrates how to run this same File Version foundation class when the class is not dropped onto a form.</p>
<pre><code>LOCAL oFileVersion
oFileVersion = NewObject(_fileversion, _utilities.vcx)
WITH oFileVersion
.cFileName = HOME( )+ 'VFP6.EXE'
.GetVersion( )
.DisplayVersion( )
ENDWITH
</code></pre>
<p class=indent>
<B><b>Note</b></B> &nbsp;This example assumes that the code can locate the _utilities.vcx class library or from an .app file that is built containing _utilities.vcx.</p>
<p>
When you use a non-visual foundation class, you need to know how and when the class is used within your application so it can be scoped correctly. If only a single form uses the class, you can just drag the class onto the form. However, if the class is used by many forms or is used globally by the application, the foundation class should have a global scope in the application so it remains accessible throughout the application. A global scope might also improve performance.</p>
<h3>Visual Foundation Classes</h3>
<p>
You can also programmatically add visual foundation classes, such as those with form base classes, to your application. The following example shows code you can add to your application to display an <a href="ffcabout_dialog.htm">Aboutbox dialog</a>.</p>
<pre><code>LOCAL oAbout
oAbout = NewObject(_aboutbox,_dialogs.vcx)
oAbout.Show( )
</code></pre>
<p>
You can create a subclass of the dialog box foundation class for each of your applications so that you can customize the contents of the dialog box for each application. The following example demonstrates how you can subclass the Aboutbox foundation class:
<ol>
<li>
Drag and drop the Aboutbox class from the Component Gallery (Foundation&nbsp;Classes\Dialogs folder) to the project for your application.<br><br></li>
<li>
Select <b>Create new form from selected class</b> in the <b>Add Class to Project</b> dialog box that is displayed, and enter name for the form.<br><br></li>
<li>
Change the Caption property for the new form for your application. <br><br></li>
<li>
Save and close the form.<br><br></li>
<li>
Add program code (DO FORM <i>FormName</i>) to the procedure that runs the form, such as an <b>About</b> menu item procedure.<p class=tl>
-or-</P></li>
</ol>
<p>
Drag the <a href="ffcdisplay_form_btn.htm">Run Form button</a> class from the Component Gallery (Foundation&nbsp;Classes\Buttons folder) onto the form. When the builder launches, you can specify the name of the form to execute.</p>
<p>
If you use the Visual FoxPro 6.0 <a href="dgapplication_development_and_developer_productivity.htm#newenhanced_application_framework">Application Framework</a>, the <a href="cmdapplication_builder.htm">Application Builder</a> automatically handles adding forms (both .scx and .vcx form classes). The new <a href="wizapplication_wizard_6.htm">Application Wizard</a> or the <a href="newcomponent_gallery_window.htm">Component Gallery</a> <b>New Application</b> item installs this framework in projects they create. The Application Builder interacts directly with the framework and enables you to specify how and where the form is launched.</p>
<p>
By using a framework built with the Application Wizard, the Application Builder, and Component Gallery, you have a rich set of tools for creating entire applications with minimal manual coding.</p>
<h2>Class Naming Conventions</h2>
<p>
The Visual FoxPro Foundation classes and their properties and methods use the following naming conventions.</p>
<h3>Classes and Class Libraries</h3>
<p>
Most foundation classes are subclassed from classes in the _base.vcx visual class library, which you can also find in the \Ffc\ folder. The naming conventions for these classes reflect the base class used. For example, a subclass of the Custom class is called <i>_</i>Custom<i> </i>in _base.vcx. All classes use an underscore ( _ ) to preface the name of a class in _base.vcx.</p>
<p>
A few class libraries do not contain classes that are subclassed from _base.vcx because these classes are shared with other Visual FoxPro components such as wizards and builders. These classes are contained in class libraries without a preceding underscore, such as Registry.vcx.</p>
<h3>Methods and Properties</h3>
<p>
Methods are often based on an action name such as <i>RunForm</i>. If the name contains several words, for example, RunForm, then capitalization reflects this. Properties are usually prefaced with a single lower case letter characterizing the data type of that particular property. For example, <i>cFileName</i> indicates that the property is of character type. In addition, default values for properties are also set to the appropriate data type. For example, a logical property can be initialized to false (.F.), while a numeric property can be initialized to 0.</p>
<p>
Properties of classes that shipped in earlier versions of Visual FoxPro do not strictly adhere to these property naming conventions, and retain their earlier names to avoid compatibility conflicts with user code referencing these properties.</p>
<h2>Enhancing or Modifying FoxPro Foundation Classes</h2>
<p>
You can enhance or modify the Visual FoxPro foundation classes to meet the needs of your application. However, we recommend that you do not modify the foundation classes themselves. The foundation classes might be periodically updated with new functionality.</p>
<h3>Subclassing the Foundation Class</h3>
<p>
The source code is provided so you can subclass any foundation class to override or enhance properties and methods. Choose to subclass when the behavior of a particular foundation class varies between different applications. </p>
<h3>Updating _base.vcx</h3>
<p>
If you want to add global changes to the Visual FoxPro foundation classes, you can modify _base.vcx. Since foundation classes are subclassed from _base.vcx, changes to this class library are automatically propagated to the foundation classes. A common set of methods and properties are provided for all the classes in _base.vcx. However, you can alter the classes in _base.vcx if they add desired behavior to your applications (unlike the foundation classes that we recommend that you do not change). </p>
<p>
Instead of changing _base.vcx, however, you should redefine the classes in _base.vcx to inherit their behavior from your own custom base classes (rather than from the Visual FoxPro base classes currently used). If you already have a custom class library which subclasses the Visual FoxPro base classes, you can redefine the classes in _base.vcx to inherit from your custom classes so that when components use the _base classes they will inherit from your custom classes too. You can use the Class Browser to redefine the parent class for a particular class.</p>
<p>
If you replace the entire _base.vcx class with your own, make sure that you have the same set of named classes, otherwise the foundation classes will have missing links.</p>
</BODY>
</HTML>

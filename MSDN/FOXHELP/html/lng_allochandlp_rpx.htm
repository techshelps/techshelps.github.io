<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_AllocHand( ) API Library Routine Example</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<p class=label>
<b><a name="lng_allochandlp_rpx"></a><sup></sup>_AllocHand(&nbsp;) API Library Routine Example</b></p>
<p>
In The following example, a character is replicated in memory supplied by _AllocHand(&nbsp;). The API function REPLTOMH(&nbsp;) below returns the memory handle to Visual FoxPro. From Visual FoxPro the memory handle is passed to API functions, which expect a memory handle argument (passed as an integer, "I").</p>
<h4>Visual FoxPro Code</h4>
<pre><code>SET LIBRARY TO ALLOCHAN
mh = REPLTOMH("x", 120)
? MHTOFOX(mh)
? LEN(MHTOFOX(mh))
? MHTOFOX(mh)
= FREEMH(mh)
</code></pre>
<h4>C Code</h4>
<pre><code>#include &lt;pro_ext.h&gt;

//&nbsp;&nbsp; Replicate char argument to memory allocated with <span class=cfe><b>_AllocHand()</b></span>.
//&nbsp;&nbsp; Return the memory handle to Visual FoxPro.
void FAR replToMH(ParamBlk FAR *parm)
{
 &nbsp; char FAR *rep;
 &nbsp; char c = *(char *) _HandToPtr(parm-&gt;p[0].val.ev_handle);
 &nbsp; MHANDLE mh;

 &nbsp; if ((mh = <span class=cfe><b>_AllocHand(</b></span>(int) parm-&gt;p[1].val.ev_long + 1)<span class=cfe><b>)</b></span> == 0)
 &nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp; _Error(182);&nbsp; // "Insufficient memory"
 &nbsp; }
 &nbsp; _HLock(mh);
 &nbsp; rep = _HandToPtr(mh);
 &nbsp; _MemFill(rep, c, (int) parm-&gt;p[1].val.ev_long);
 &nbsp; rep[parm-&gt;p[1].val.ev_long] = '\0';&nbsp; // null terminate
 &nbsp; _HUnLock(mh);

 &nbsp; _RetInt(mh, 10);
}

//&nbsp;&nbsp; Returns characters in memory handle.
//&nbsp;&nbsp; Argument in call from Visual FoxPro
//&nbsp;&nbsp; must be a valid Visual FoxPro memory handle.
void FAR MHToFoxString(ParamBlk FAR *parm)
{
 &nbsp; char FAR *string;
 &nbsp; MHANDLE mh = parm-&gt;p[0].val.ev_long;

 &nbsp; _HLock(mh);
 &nbsp; string = _HandToPtr(mh);
 &nbsp; _RetChar(string);
 &nbsp; _HUnLock(mh);
}

//&nbsp;&nbsp; Frees memory handle.&nbsp; Argument in call from
//&nbsp;&nbsp; Visual FoxPro must be a valid
//&nbsp;&nbsp; Visual FoxPro memory handle.
void FAR freeMH(ParamBlk FAR *parm)
{
 &nbsp; _FreeHand((MHANDLE) parm-&gt;p[0].val.ev_long);
}

FoxInfo myFoxInfo[] = {
 &nbsp; {"REPLTOMH", (FPFI) replToMH, 2, "C,I"},
 &nbsp; {"MHTOFOX", (FPFI) MHToFoxString, 1, "I"},
 &nbsp; {"FREEMH", (FPFI) freeMH, 1, "I"},
};
FoxTable _FoxTable = {
 &nbsp; (FoxTable FAR *) 0, sizeof(myFoxInfo)/sizeof(FoxInfo), myFoxInfo
};
</code></pre>
</BODY>
</HTML>

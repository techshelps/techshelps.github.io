<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEFINE POPUP Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngdefine_popup"></a><sup></sup>DEFINE POPUP Command</h1>
<p>
<a href="lngdefine_popupx.htm">Example</a> &nbsp; <a href="lngdefine_popupsa.htm">See Also</a></p>
<p>
Creates a menu.</p>
<p class=label>
<b>Syntax</b></p>
<p>
DEFINE POPUP <i>MenuName</i><br>
 &nbsp; [FROM <i>nRow1</i>, <i>nColumn1</i>]<br>
 &nbsp; [TO <i>nRow2</i>, <i>nColumn2</i>]<br>
 &nbsp; [IN [WINDOW] <i>WindowName</i> | IN SCREEN]<br>
 &nbsp; [FONT <i>cFontName</i> [, <i>nFontSize</i>]]<br>
 &nbsp; [STYLE <i>cFontStyle</i>]<br>
 &nbsp; [FOOTER <i>cFooterText</i>]<br>
 &nbsp; [KEY <i>KeyLabel</i>]<br>
 &nbsp; [MARGIN]<br>
 &nbsp; [MARK <i>cMarkCharacter</i>]<br>
 &nbsp; [MESSAGE <i>cMessageText</i>]<br>
 &nbsp; [MOVER]<br>
 &nbsp; [MULTISELECT]<br>
 &nbsp; [PROMPT FIELD <i>FieldName</i> | PROMPT FILES [LIKE <i>FileSkeleton</i>]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; | PROMPT STRUCTURE]<br>
 &nbsp; [RELATIVE]<br>
 &nbsp; [SCROLL]<br>
 &nbsp; [SHORTCUT]<br>
 &nbsp; [TITLE <i>cMenuTitleText</i>]<br>
 &nbsp; [COLOR SCHEME <i>nSchemeNumber</i><br>
 &nbsp; | COLOR <i>ColorPairList</i>]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>MenuName</i></p>
<p class=indent>
Specifies the name of the menu to create.</p>
<p class=dt>
FROM <i>nRow1</i>, <i>nColumn1</i> TO <i>nRow2</i>, <i>nColumn2</i></p>
<p class=indent>
Specifies where the menu is placed. <i>nRow1</i>, <i>nColumn1</i> specifies coordinates for the upper-left corner of the menu. If you omit the FROM clause, Visual FoxPro places the upper-left corner of the menu in the first row and first column of the main Visual FoxPro window or a user-defined window.</p>
<p class=tl>
To create a menu with a specific size, you can also include TO <i>nRow2</i>, <i>nColumn2</i> to specify the location of the lower-right corner of the menu. If you include FROM <i>nRow1</i>, <i>nColumn1</i> and omit TO <i>nRow2</i>, <i>nColumn2</i>, Visual FoxPro automatically sizes the menu. The menu is as wide as the longest menu item in it (if the items are created with DEFINE BAR) and as long as needed to display all of the menu items. The menu length is limited by the size of the main Visual FoxPro window or user-defined window in which the menu is placed. If a menu isn't large enough to contain all of the menu items, a scroll bar appears so that you can scroll through the menu items.</P><p class=dt>
IN [WINDOW] <i>WindowName</i></p>
<p class=indent>
Places a menu in a user-defined window you specify with <i>WindowName</i>. If you omit this clause, the menu is placed on the main Visual FoxPro window by default unless there is an active user-defined window. If there is an active user-defined window, the menu is placed in the active window.</p>
<p class=dt>
IN SCREEN</p>
<p class=indent>
Explicitly places a menu in the main Visual FoxPro window.</p>
<p class=dt>
FONT <i>cFontName</i> [, <i>nFontSize</i>]</p>
<p class=indent>
Specifies a default font for the menu. You can override the default font for an individual menu item by including the FONT clause in DEFINE BAR.</p>
<p class=tl>
<i>cFontName</i> specifies the name of the font, and <i>nFontSize</i> specifies the point size. For example, the following command creates a menu in 12-point Courier font:</P><pre><code>DEFINE POPUP popMyPopup FONT 'Courier', 12
</code></pre>
<p class=tl>
If the font you specify is not available, a font with similar font characteristics is substituted. If you include the FONT clause but omit the point size <i>nFontSize</i>, a 10-point font is used.</P><p class=dt>
STYLE <i>cFontStyle</i></p>
<p class=indent>
Specifies a default font style for the menu. You can override the default style for an individual menu item by including the FONT clause in DEFINE BAR.</p>
<p class=tl>
If you omit the STYLE clause, or if the font style you specify is not available, the Normal font style is used.</P><p class=tl>
The font styles you can specify with <i>cFontStyle</i> are listed in the following table:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Character</b></td>
<td class=label width=74%><b>Font style</b></td>
</tr>
<tr valign=top>
<td width=26%>B</td>
<td width=74%>Bold</td>
</tr>
<tr valign=top>
<td width=26%>I</td>
<td width=74%>Italic</td>
</tr>
<tr valign=top>
<td width=26%>N</td>
<td width=74%>Normal</td>
</tr>
<tr valign=top>
<td width=26%>Q</td>
<td width=74%>Opaque</td>
</tr>
<tr valign=top>
<td width=26%>-</td>
<td width=74%>Strikeout </td>
</tr>
<tr valign=top>
<td width=26%>T</td>
<td width=74%>Transparent</td>
</tr>
<tr valign=top>
<td width=26%>U</td>
<td width=74%>Underline</td>
</tr>
</table><br>
<p class=tl>
You can include more than one character to specify a combination of font styles. For example, the following command specifies Bold Italic:</P><pre><code>DEFINE MENU popMyPopup STYLE 'BI'
</code></pre>
<p class=dt>
FOOTER <i>cFooterText</i></p>
<p class=indent>
Creates a footer with the text specified with <i>cFooterText</i> centered in the bottom border of the menu.</p>
<p class=dt>
KEY <i>KeyLabel</i></p>
<p class=indent>
Specifies an access key or key combination for a menu. For a list of available keys and key combinations and their key label names, see <a href="lngon_key_label.htm">ON KEY LABEL</a>. </p>
<p class=tl>
Including KEY is equivalent to issuing the following command:</P><pre><code>ON KEY LABEL <i>KeyLabel</i> ACTIVATE POPUP <i>MenuName</i>
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If a keyboard macro is already defined with the same key label, the keyboard macro takes precedence, and the menu cannot be activated with the specified key or key combination.</p><p class=dt>
MARGIN</p>
<p class=indent>
Places an extra space to the left and right of each menu item. Mark characters are displayed in the space to the left of an item, and arrows indicating additional cascading submenus are available and are displayed to the right of menu items. If you omit MARGIN, the mark characters overwrite the first character of the menu item names; hierarchical arrows overwrite the last character of the menu items.</p>
<p class=dt>
MARK <i>cMarkCharacter</i></p>
<p class=indent>
Specifies a character that appears to the left of an item on the menu. The default mark character is a check mark. The MARK clause is ignored and the default mark character is used if the menu is integrated into the Visual FoxPro system menu. Also, the MARK clause is ignored if FoxFont isn't the font for the main FoxPro window or the user-defined window in which the menu is placed.</p>
<p class=tl>
MARK can be included to change the default mark character to a character specified with <i>cMarkCharacter</i>. If <i>cMarkCharacter</i> includes more than one character, only the first character is used as the mark character.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Specifying a mark character doesn't mark a menu item. Use SET MARK OF to mark a menu item.</p><p class=tl>
The MARK clause sets the mark character for all items on the menu. Mark characters specified with DEFINE BAR commands take precedence over mark characters specified with the MARK clause in DEFINE POPUP. SET MARK OF is used to toggle mark characters on or off and can also be used to specify a mark character for an individual menu item or for all menu items.</P><p class=dt>
MESSAGE <i>cMessageText</i></p>
<p class=indent>
Displays a message when you select a menu item. The message is placed in the graphical status bar. If the character-based status bar is turned on with SET STATUS ON, the message is centered on the last line of the main Visual FoxPro window.</p>
<p class=dt>
MOVER</p>
<p class=indent>
Places a double-headed arrow (<img src="arrowud.gif" border=0>) in the Mover box to the left of the selected item in the menu. You can drag the double-headed arrow to move an item to another position on the menu. GETBAR(&nbsp;) can be used to determine where each item is positioned on the menu.</p>
<p class=tl>
You cannot rearrange items in a menu created with a PROMPT clause.</P><p class=dt>
MULTISELECT</p>
<p class=indent>
Allows the user to select multiple items from a menu at the same time. When the user chooses an item from a menu, the mark character is placed to the left of the item.</p>
<p class=tl>
You cannot make multiple selections from a menu created with a PROMPT clause.</P><p class=tl>
MRKBAR(&nbsp;) can be used to determine which items are chosen from the menu.</P><p class=tl>
If you include MULTISELECT in DEFINE POPUP, you can include MARGIN to reserve space in each item for the mark character.</P><p class=tl>
In the following example, a menu named <code>popFruits</code> is created. MULTISELECT is included to create a menu that allows multiple items to be chosen.</P><p class=tl>
Each of the four items has a different mark character. When a user chooses items from the menu, the items are marked and a routine named <code>yourchoice</code> displays the chosen items.</P><pre><code>CLEAR
IF NOT _DOS
 &nbsp; MODIFY WINDOW SCREEN FONT 'foxfont', 12
ENDIF
ACTIVATE SCREEN
DEFINE POPUP popFruits FROM 5,5 ;
 &nbsp; MULTISELECT MARGIN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Create multi-choice menu
DEFINE BAR 1 OF popFruits ;
 &nbsp; PROMPT '\&lt;Apples'&nbsp; MARK CHR(3)&nbsp;&nbsp;&nbsp; &amp;&amp; First item
DEFINE BAR 2 OF popFruits ;
 &nbsp; PROMPT '\&lt;Bananas' MARK CHR(4)&nbsp;&nbsp;&nbsp; &amp;&amp; Second item
DEFINE BAR 3 OF popFruits ;
 &nbsp; PROMPT '\&lt;Grapes'&nbsp; MARK CHR(5) &amp;&amp; Third item
DEFINE BAR 4 OF popFruits ;
 &nbsp; PROMPT '\&lt;Lemons'&nbsp; MARK CHR(6)&nbsp;&nbsp;&nbsp; &amp;&amp; Fourth item
@ 12,5 SAY 'Your choices:'
ON SELECTION POPUP popFruits DO yourchoice&nbsp;&nbsp;&nbsp; &amp;&amp; Choice routine
ACTIVATE POPUP popFruits 
PROCEDURE yourchoice&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Executed when choice is made
@ 13,5 CLEAR
FOR gnCount = 1 TO CNTBAR('popFruits')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Loop for # of items
 &nbsp; IF MRKBAR('popFruits', gnCount) = .T.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Option is marked,
 &nbsp;&nbsp;&nbsp;&nbsp; ? PRMBAR('popFruits', gnCount) AT 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; display caption
 &nbsp; ENDIF
NEXT
</code></pre>
<p class=dt>
PROMPT FIELD <i>FieldName</i></p>
<p class=indent>
Specifies the field name from an open table whose records become the items on the menu. The menu contains an item for each record in the table. When the menu is activated, the tables' work area is selected.</p>
<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can take advantage of Rushmore optimization if you set a filter on the field specified with PROMPT FIELD used in the menu.</p><p class=atl>
For more information on Rushmore optimization, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</p><p class=tl>
<i>FieldName</i> can also contain multiple field names and expressions concatenated with the addition operator (+). <i>FieldName</i> can also be the name of the field in a table open in another work area or a user-defined function.</P><p class=tl>
There is no limit to the number of entries that can appear in a menu created with PROMPT FIELD.</P><p class=dt>
PROMPT FILES [LIKE <i>FileSkeleton</i>]</p>
<p class=indent>
Creates a menu that displays the names of files available in the current directory.</p>
<p class=tl>
LIKE <i>FileSkeleton</i> allows you to specify the files that are displayed in the menu using wildcards. For example, to create a menu that displays the names of tables in the default drive and directory, include the following command:</P><pre><code>PROMPT FILES LIKE *.DBF
</code></pre>
<p class=tl>
You can create a menu that displays the names of files on other drives and in other directories or folders by including a drive or volume specification, a directory specification, or both. For example, to create a menu that displays the names of program files in a directorycalled PROGRAMS on drive C, include the following command:</P><pre><code>PROMPT FILES LIKE C:\PROGRAMS\*.PRG
</code></pre>
<p class=dt>
PROMPT STRUCTURE</p>
<p class=indent>
Displays the names of the fields in the current table on the menu according to the table's field structure. When the menu is activated, the table's work area is selected.</p>
<p class=dt>
RELATIVE</p>
<p class=indent>
Specifies the order in which items are placed on a menu. If you create a menu without the RELATIVE clause, an item is positioned on a menu in an order dictated by the item's bar number. Space on the menu is reserved for undefined items. For example, if the first and third items are defined and the menu is activated, a blank line reserved for the second item is placed on the menu.</p>
<p class=tl>
If you create a menu with RELATIVE, the items appear on the menu in the order in which they are defined. Space in the menu isn't reserved for undefined items.</P><p class=tl>
Defining a menu with RELATIVE also lets you make use of BEFORE and AFTER clauses in DEFINE BAR to position items on a menu relative to other items. If a menu is created without RELATIVE, including BEFORE or AFTER in DEFINE BAR generates an error.</P><p class=tl>
Run the following two program examples and compare the placement of the items on each menu.</P><pre><code>*** RELATIVE Example&nbsp; ***
DEFINE POPUP popRelatYes RELATIVE FROM 1,1
DEFINE BAR 4&nbsp; OF popRelatYes PROMPT '4444'
DEFINE BAR 3&nbsp; OF popRelatYes PROMPT '3333'
DEFINE BAR 2&nbsp; OF popRelatYes PROMPT '2222'
DEFINE BAR 1&nbsp; OF popRelatYes PROMPT '1111'
DEFINE BAR 6&nbsp; OF popRelatYes PROMPT '6666' BEFORE 4
ACTIVATE POPUP popRelatYes 
*** NON-RELATIVE Example ***
DEFINE POPUP popRelatNo FROM 1,1
DEFINE BAR 4&nbsp; OF popRelatNo PROMPT '4444'
DEFINE BAR 3&nbsp; OF popRelatNo PROMPT '3333'
DEFINE BAR 2&nbsp; OF popRelatNo PROMPT '2222'
DEFINE BAR 1&nbsp; OF popRelatNo PROMPT '1111'
DEFINE BAR 6&nbsp; OF popRelatNo PROMPT '6666'
ACTIVATE POPUP popRelatNo
</code></pre>
<p class=dt>
SCROLL</p>
<p class=indent>
Places a scroll bar to the right of the menu you create. The scroll bar is displayed only when there are more items than can fit on the menu, or if the menu is too long to fit in the main Visual FoxPro window or the user-defined window in which it is placed.</p>
<p class=dt>
SHORTCUT</p>
<p class=indent>
Creates a shortcut menu. A shortcut menu typically appears when a selection, toolbar, or taskbar button is clicked with the right mouse button. The shortcut menu lists commands that pertain to the screen region on which the mouse was right-clicked.</p>
<p class=tl>
You can include MROW(&nbsp;) and MCOL(&nbsp;) in the FROM clause to activate the popup at the location where the mouse is clicked.</P><p class=dt>
TITLE <i>cMenuTitleText</i></p>
<p class=indent>
Displays a title in the center of the top border of the menu. <i>cTitleText</i> specifies the menu title.</p>
<p class=dt>
COLOR SCHEME <i>nSchemeNumber</i></p>
<p class=indent>
Specifies the colors for all elements of a menu. By default, the colors of menus created with DEFINE POPUP are controlled by color scheme 2.</p>
<p class=dt>
COLOR <i>ColorPairList</i></p>
<p class=indent>
Specifies the colors for all elements of a menu.</p>
<p class=tl>
For more information on color schemes and color pairs, see the <a href="lngcolors_overview.htm">Colors Overview</a> online topic.</P><p class=label>
<b>Remarks</b></p>
<p>
To place a set of menu items that you define on a menu, use a series of DEFINE BAR commands. To place records, files, or fields in a menu, use the PROMPT FIELD, PROMPT FILES, or PROMPT STRUCTURE options of DEFINE POPUP.</p>
<p>
When the menu is displayed and activated with ACTIVATE POPUP, you can choose one of the items on the menu. Depending on the item chosen, a routine can be executed or another menu can be displayed and activated. A menu that displays another menu when an item is chosen is called a cascading submenu. For more information on creating submenus, see <a href="lngon_bar.htm">ON BAR</a>.</p>
<p>
If you use the <a href="wndmenu_designer.htm">Menu Designer</a> to create your menu, you may not have to use these commands at all. The Menu Designer automatically creates the commands for your menu. The Menu Designer uses the Visual FoxPro system menu, which you can then modify by adding your own menu items.</p>
<p>
For more information on creating menus, see "Creating a Menu System" in Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a>, in the <i>Programmer's Guide</i>.</p>
</BODY>
</HTML>

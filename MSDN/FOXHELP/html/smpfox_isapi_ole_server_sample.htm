<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FoxISAPI: An Automation server Sample</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="smpfox_isapi_ole_server_sample"></a>FoxISAPI Automation Server Samples</h1>
<p>
Visual FoxPro includes an <a href="glsisapi.htm">ISAPI</a> extension called Foxisapi.dll that allows you to access Visual FoxPro custom Automation servers from any ISAPI supported web server such as Microsoft Internet Information Server and Microsoft Personal Web Server. The FoxISAPI extension works by creating an instance of a Visual FoxPro automation server and then calling a method on that server that returns HTML. The HTML is passed from the web server back to a Web browser such as Microsoft Internet Explorer. Visual FoxPro 6.0 provides a new version of the Foxisapi.dll that includes support for pool management of Visual FoxPro Automation servers and improved debugging capabilities.</p>
<p>
Visual FoxPro includes two FoxISAPI automation server samples that demonstrate how you can use the power of Visual FoxPro to dynamically support a web site. The first sample, <a href="#smpfoxweb_simplified_visual_foxpro_internet_server">FoxWeb</a>, located in the Samples\Servers\FoxIsapi\FoxWeb folder, is a simple sample designed to demonstrate basic FoxISAPI concepts. This sample steps you through the process of setup and deployment of FoxISAPI servers, both local and remotely. In addition, the sample walks through steps needed to implement pooling of servers for improved scalability. </p>
<p>
The second sample, <a href="#smpfoxis_visual_foxpro_internet_server">FoxIs</a>, located in the Samples\Servers\FoxIsapi\FoxIs folder, is a more complex sample that contains routines to map visual and functional content of a Visual FoxPro form to HTML. The concepts are the same as FoxWeb; FoxISAPI instantiates a server and invokes a method to return HTML. Because the FoxIs sample uses a visual form, it offers additional versatility by allowing you to run it as a stand-alone program, from OLE clients, and from a Web browser.</p>
<p>
If you’re not familiar with creating Visual FoxPro Automation servers, see Chapter 16, <a href="dgadding_ole.htm#dgcreating_ole_servers">Creating Automation Servers</a>, in the <i>Programmer's Guide</i>.</p>
<h3>FoxISAPI Components</h3>
<p>
The following table lists the core FoxWeb Automation server sample files and a description of each.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>File</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>Foxisapi.dll</td>
<td width=73%>The main component of the FoxISAPI Automation server samples, FoxWeb and FoxIs. Foxisapi.dll is used with the Microsoft Internet Information Server or the Microsoft Personal Web Server. Foxisapi.dll creates an instance of a Visual FoxPro Automation server and executes a method on that server. The method then returns the HTML displayed in the Web browser. Foxisapi.dll is used primarily with Visual FoxPro; however, it can be used with any Automation server.</td>
</tr>
<tr valign=top>
<td width=27%>Foxisapi.ini</td>
<td width=73%>An initialization file for Foxisapi.dll file that allows you to configure Foxisapi.dll.</td>
</tr>
<tr valign=top>
<td width=27%>Odebug.prg</td>
<td width=73%>A Visual FoxPro program used for debugging your Internet applications.</td>
</tr>
</table><br>
<h3>Configuring FoxISAPI Components</h3>
<p>
To install the core FoxISAPI components, follow these steps:
<ol>
<li>
Copy the Foxisapi.dll and Foxisapi.ini files to your web server’s script folder. For example, C:\InetPub\scripts\.<br><br></li>
<li>
Copy the Oldebug.prg program file to your Visual FoxPro root folder (the location returned by HOME(&nbsp;) function). For example, C:\Program Files\Microsoft Visual Studio\VFP98\.</li>
</ol>

<h2><a name="smpfoxweb_simplified_visual_foxpro_internet_server"></a>FoxWeb, a Simplified Visual FoxPro Internet Automation Server</h2>
<p>
FoxWeb is a simplified ISAPI Automation server sample designed to quickly get a Web site up and running. FoxWeb provides a new version of Foxisapi.dll (also provided with the Visual FoxPro <a href="#smpfoxis_visual_foxpro_internet_server">FoxIs</a> server sample) is also included. Foxisapi.dll now can manage multiple instances of Visual FoxPro Automation servers, and provides additional debugging methods for Visual FoxPro applications designed for the Internet.</p>
<h3>The FoxWeb Automation Server</h3>
<p>
The FoxWeb sample uses a simple Visual FoxPro server class intended to demonstrate the basic usage of a server run under FoxISAPI. All the code is stored in a file called Foxweb.prg. This file contains a class called Server which is marked as OLEPUBLIC so that it gets registered as an Automation server COM component when it is built. This class is instantiated by FoxISAPI and contains a number of methods that can be invoked (such as the Hello and Delay methods) as shown below. These methods illustrate the structures required by FoxISAPI in order to function properly.</p>
<h3>The FoxWeb Sample Files</h3>
<p>
The files for the new Visual FoxPro FoxWeb Automation server sample are located in the Visual Studio …\Samples\Vfp98\Servers\Foxisapi\FoxWeb directory.</p>
<h3>Setting up the FoxWeb Automation server</h3>
<p>
The following sections describe how to use Visual FoxPro to quickly get a Web site up and running with FoxWeb.</p>
<h4>Registering the Visual FoxPro FoxWeb Automation server</h4>
<p>
The Visual FoxPro Automation servers that return HTML must be registered. Registration is done automatically if your .exe or .dll was built with the Visual FoxPro Project Manager or with the BUILD EXE or BUILD DLL commands. For example, if you open the Foxweb project provided with the FoxWeb sample in the Project manager, you can choose <b>Build</b> to create an Automation server as an in-process .dll or an out-of-process .exe file. Note that the registration occurs only on the machine on which the file was built. </p>
<p>
A Visual FoxPro Automation server built as an <a href="glsout_of_process.htm">out-of-process</a> .exe can also be registered by specifying the Automation server name and including the /RegServer switch. For example, the following command registers the Visual FoxPro FoxWeb Automation server:</p>
<pre><code>Foxweb.exe /RegServer
</code></pre>
<p>
A Visual FoxPro Automation server built as an <a href="glsin_process.htm">in-process</a> .dll can also be registered with Regsvr32.exe. For example, the following command registers the Visual FoxPro Foxweb Automation server:</p>
<pre><code>Regsvr32 Foxweb.dll
</code></pre>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;If your Visual FoxPro ISAPI Automation server uses additional files such as .gif or .jpg files, be sure to place these files in directories that your Internet Information Server or Personal Web Server can access.</p>
<h4>Using your Web Browser to access a Visual FoxPro ISAPI Automation Server</h4>
<p>
A Visual FoxPro ISAPI Automation server is accessed from your Web browser by providing the URL (Universal Resource Locator) of the Automation server. The Web browser makes an HTTP request that is passed to your Internet Information Server or Personal Web Server. The Automation server passes the request to Foxisapi.dll, which, in turn, passes the request to your Automation server.</p>
<p>
For example, the URL below accesses the ISAPI Automation server named Foxweb.Server:</p>
<pre><code>HTTP://MyServer/Scripts/Foxisapi.dll/Foxweb.server.Delay?30
</code></pre>
<p>
The following table describes each of the elements of the URL example above.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>URL Element</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>Myserver</td>
<td width=67%>The virtual folder of your Internet Information Server or the Personal Web Server.</td>
</tr>
<tr valign=top>
<td width=33%>Scripts/Foxisapi.dll</td>
<td width=67%>The Internet Information Server or the Personal Web Server Scripts folder and Foxisapi.dll. </td>
</tr>
<tr valign=top>
<td width=33%>Foxweb.Server</td>
<td width=67%>The registered name (ProgID) of the Visual FoxPro ISAPI Automation server to call.<p>
In this example, Foxweb is the name of the .exe or .dll file for the Visual FoxPro Automation server. Server is the class name specified in the OLEPUBLIC clause of the DEFINE CLASS command that creates the Automation server.</p>
<p>
Foxweb.Server is also the ProgID for the Automation server as it is stored in the Windows Registry. You can use RegEdit to view or modify the Automation server’s ProgID.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Delay</td>
<td width=67%>The name of the method to execute on the Visual FoxPro ISAPI Automation server.</td>
</tr>
<tr valign=top>
<td width=33%>?30</td>
<td width=67%>A parameter passed to the method. The question mark is a delimiter that specifies that a parameter follows. For this method, 30 specifies that execution is delayed for 30 seconds. The parameter is passed as a character string.</td>
</tr>
</table><br>
<h4>Passing Parameters to Methods</h4>
<p>
The following code is from the Delay method in Foxweb.prg, and demonstrates the structure for methods executed on the Visual FoxPro ISAPI Automation servers.</p>
<pre><code>PROCEDURE Delay
 &nbsp; LPARAMETERS <i>cParm1</i>, <i>cIniFile</i>, <i>nPersistInstance</i>
 &nbsp; *** Your code here ***
 &nbsp; RETURN AnHTMLString
ENDPROC
</code></pre>
<p class=dt>
<i>cParm1</i></p>
<p class=indent>
A character string passed to the method. In the Delay method, this parameter specifies the number of seconds that execution is delayed.</p>
<p class=dt>
<i>cIniFile</i></p>
<p class=indent>
The name of the .ini file (passed to the method by Foxisapi.dll) created each time a Visual FoxPro ISAPI Automation server is accessed. Each .ini file is created in the Scripts folder and has a unique name that begins with “Fox.” You can use the GetPrivateProfileString function in Foxweb.prg, for example, to read information from the .ini file and return custom HTML based on a user’s configuration.</p>
<p class=dt>
<i>nPersistInstance</i></p>
<p class=indent>
Specifies if the instance of the Visual FoxPro ISAPI Automation server persists after it is finished executing your method. <i>nPersistInstance</i> is passed by reference to the method by Foxisapi.dll. If <i>nPersistInstance</i> is set to 0 in your web application, the instance of the Automation server remains alive after execution is finished. If <i>nPersistInstance</i> is a value other than 0, the instance of the Automation server is released. For optimal performance, <i>nPersistInstance</i> should be set to 0, otherwise the Automation server must be launched again the next time it is called.</p>
<h4>Using Foxisapi.dll to Pool Automation Servers</h4>
<p>
Because Foxisapi.dll is free-threaded, it can now pool multiple Visual FoxPro ISAPI Automation servers to provide better scalability for your web applications. Pooled ISAPI Automation servers allow a free ISAPI Automation server to service a request when other ISAPI Automation servers are busy. To take advantage of ISAPI Automation server pooling, the instances of the ISAPI Automation servers should be made persistent by setting <i>nPersistInstance</i> to 0 in your web application.</p>
<p>
The number of ISAPI Automation servers available to service requests is determined by settings in your Foxisapi.ini initialization file. To create a pool of multiple ISAPI Automation servers, include an entry in square brackets with the name of the ISAPI Automation server for which a pool is created. This entry is followed with a list of ISAPI Automation servers that comprise the pool, with a numeric value that specifies the maximum number of instances of each ISAPI Automation server that can be created.</p>
<p>
For example, placing the following lines in Foxisap.ini creates a pool of seven ISAPI Automation servers for service requests to Foxweb.myserver. Foxisapi.dll creates up to four instances of the Foxweb.server ISAPI Automation server and up to three instances of the Foxweb2.server ISAPI Automation server to service requests.</p>
<pre><code>[FOXWEB.MYSERVER]
FOXWEB.SERVER=4
FOXWEB2.SERVER=3
</code></pre>
<p>
The following URL executes the Delay method on either an instance of the Foxweb.server or the Foxweb2.server ISAPI Automation servers:</p>
<pre><code>HTTP://MyServer/Scripts/Foxisapi.dll/Foxweb.Myserver.Delay?30
</code></pre>
<p>
Foxisapi.ini can specify that the ISAPI Automation servers are instantiated up front before a service request is received. To do so, add a comma followed by an asterisk (*) after the number of instances, as shown in the following example.</p>
<pre><code>[FOXWEB.MYSERVER]
FOXWEB.SERVER=4,*
FOXWEB2.SERVER=3,*
</code></pre>
<h4>Using the Pool Manager across Multiple Machines</h4>
<p>
Foxisapi.dll provides the ability to manage Visual FoxPro ISAPI Automation servers on multiple machines. You can use Remote Automation or DCOM (Distributed Component Object Model) to access the ISAPI Automation servers. Note that for optimal performance and scalability the instances of the ISAPI Automation servers should be made persistent by setting <i>nPersistInstance</i> to 0 in your web application.</p>
<p>
The following example describes a scenario where two Visual FoxPro ISAPI Automation servers, Foxweb and Foxweb2, are placed on two machines.</p>
<p>
Machine_A is your local machine running Windows 95, DCOM, and Personal Web Server. Machine_B is your remote machine, accessible over your network, running Windows NT and DCOM.
<ol>
<li>
Machine_A is your Visual FoxPro development machine on which you’ve installed the Visual FoxPro FoxISAPI Automation server samples. On this machine, open the Foxweb project in the Visual FoxPro Project manager, and choose <b>Build</b> to create an ISAPI Automation server as an out-of-process .exe file. Building the .exe automatically registers the ISAPI Automation server on the machine as Foxweb.exe. Now open the Foxweb2 project in the Visual FoxPro Project manager, and choose <b>Build</b> to create and register another ISAPI Automation server as a .exe.<br><br></li>
<li>
To verify that the ISAPI Automation servers Foxweb and Foxweb2 are properly registered, you can use RegEdit and search for Foxweb and Foxweb2. Note that the ProgIDs for the servers are Foxweb.Server and Foxweb2.Server, respectively. Server is the class name specified in the OLEPUBLIC clause of the DEFINE CLASS command that creates the ISAPI Automation server. Foxweb.prg is the Visual FoxPro Internet application included in both the Foxweb and Foxweb2 projects.<br><br></li>
<li>
The ProgIDs for the ISAPI Automation servers both point to Machine_A, the local machine. The Registry settings for the Foxweb2 ISAPI Automation server need to be changed to point to Machine_B, the remote machine. Use Clireg32.exe, included as part of the Visual Studio common tools, to change the pointer in the Registry. Clireg32.exe is used to redirect calls to Foxweb2 to Machine_B. The following command, executed in the Windows Run dialog, runs Clireg32.exe:<pre><code>CLIREG32 FOXWEB2.VBR
</code></pre>
<p class=tl>
A dialog box is displayed, allowing you to specify Machine_B as the remote server to which calls to Foxweb2 are directed. The Remote Transport option in this dialog box lets you choose DCOM or Remote Automation as the transport method; choose DCOM.</P></li>
<li>
Now copy the Foxweb2.exe, Foxweb2.vbr, and Foxweb2.tlb files from Machine_A, the local machine, to Machine_B, the remote machine.<br><br></li>
<li>
Use the /RegServer option to register Foxweb2.exe on Machine_B at the MS-DOS prompt:<pre><code>C:\VFP\FOXWEB2.EXE /RegServer
</code></pre>
</li>
<li>
Finally, stop and restart the Personal Web Server on Machine_A to ensure that it is aware of the changes to the Registry.</li>
</ol>
<p>
You can execute the Status command on Foxisapi.dll to check the status of all the ISAPI Automation servers registered in Foxisapi.ini. The following URL executes the Status command:</p>
<pre><code>HTTP://Machine_A/Scripts/FoxISAPI.dll/Status
</code></pre>
<p>
You can execute the Reset command on Foxisapi.dll to reset all the ISAPI Automation servers registered in Foxisapi.ini. The Reset command releases all ISAPI Automation server instances. The following URL executes the Reset command:</p>
<pre><code>HTTP://Machine_A/Scripts/FoxISAPI.dll/Reset
</code></pre>
<p>
To test the installation, you can open up as many instances of your Web browser as there are ISAPI Automation servers in the pool. The Web browsers can be on multiple machines connected to your network. You can then call the Delay method in the URL from each Web browser so that Foxisapi.dll routes service requests to the other free ISAPI Automation servers. After the Delay method is executed from each Web browser, you can use the Status method to check to see if all ISAPI Automation servers in the pool received service requests.</p>
<h4>Debugging your ISAPI automation Servers</h4>
<p>
Foxisapi.dll also lets you debug your ISAPI Automation servers on your local machine. Set the number of instances of the ISAPI Automation server you wish to debug to 0 as shown in the following example Foxisapi.ini file:</p>
<pre><code>[FOXWEB.MYSERVER]
FOXWEB.SERVER=0
</code></pre>
<p>
The Odebug.prg program file must be present in your Visual FoxPro root folder and the ISAPI Automation server source files must be present. Be sure that the ISAPI Automation server you wish to debug is configured as a persistent ISAPI Automation server, and debugging information is turned on in the project containing the ISAPI Automation server source files. </p>
<p>
When the ISAPI Automation server is instantiated, Foxisapi.dll starts Visual FoxPro for debugging, allowing you to set breakpoints, trace through code, and so on.</p>
<h3>Foxisapi.dll Commands</h3>
<p>
Foxisapi.dll has commands you can call to determine the status of your ISAPI Automation servers and to reset the servers. The following table lists the Foxisapi.dll commands with a description of each.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Command</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>Status</td>
<td width=50%>Displays the current status of the ISAPI Automation servers, the Foxisapi.ini settings, and whether SingleMode or MultiMode is in effect.</td>
</tr>
<tr valign=top>
<td width=50%>Reset</td>
<td width=50%>Releases all instances of the ISAPI Automation servers. </td>
</tr>
<tr valign=top>
<td width=50%>SingleMode</td>
<td width=50%>Executes the Reset command, then limits the number of ISAPI Automation server instances to one instance. Execute this command to perform maintenance; for example, you can open tables exclusively in when SingleMode is in effect.</td>
</tr>
<tr valign=top>
<td width=50%>MultiMode</td>
<td width=50%>Executes the Reset command, then limits the number of ISAPI Automation server instances to the values specified in Foxisapi.ini.</td>
</tr>
</table><br>
<p>
Each of the Foxisapi.dll commands is called by a URL that is specified in Foxisapi.ini. The following is the contents of the sample Foxisapi.ini file with the default URLs:</p>
<pre><code>[FOXISAPI]
StatusURL = Status
ResetURL = Reset
SingleModeURL = SingleMode
MultiModeURL = MultiMode
</code></pre>
<p>
The following URL executes the Status command:</p>
<pre><code>HTTP://MyServer/Scripts/Foxisapi.dll/Status
</code></pre>
<p>
In the following sample Foxisapi.ini file, the URL for the Status command is changed from Status to MyStatus:</p>
<pre><code>[FOXISAPI]
StatusURL = MyStatus
ResetURL = Reset
SingleModeURL = MSingleMode
MultiModeURL = MultiMode
</code></pre>
<p>
After this change to Foxisapi.ini, the following URL executes the Status command:</p>
<pre><code>HTTP://MyServer/Scripts/FoxISAPI.dll/MyStatus
</code></pre>
<p class=indent>
Note&nbsp;&nbsp;&nbsp;You must reset Foxisapi.dll with the Reset command after you make changes to Foxisapi.ini file in order for the changes to take effect.</p>
<h3>Additional FoxISAPI.ini Settings</h3>
<p>
Foxisapi.dll reads Foxisapi.ini and configures its settings according to the items contained in Foxisapi.ini. The following table describes each of the additional items you can place in your Foxisapi.ini file.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Item</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%>AutoRefreshStatus</td>
<td width=72%>Specifies the number of seconds between Status page refreshes. The default is 0 seconds (the Status page isn’t refreshed) if this item is omitted or if Foxisapi.ini isn’t present.</td>
</tr>
<tr valign=top>
<td width=28%>BusyTimeout</td>
<td width=72%>Specifies the number of seconds Foxisapi.dll waits for the Visual FoxPro application servers to respond before a time-out message is generated. The default is 2 seconds if this item is omitted or if Foxisapi.ini isn’t present.</td>
</tr>
<tr valign=top>
<td width=28%>ReleaseTimeout</td>
<td width=72%>Specifies the number of seconds Foxisapi.dll waits for a busy Visual FoxPro application server to respond before the Reset command is executed. The default is 2 seconds if this item is omitted or if Foxisapi.ini isn’t present.</td>
</tr>
</table><br>
<p>
The following is taken from the sample Foxisapi.ini file, and demonstrates the formats of the additional items you can place in the file:</p>
<pre><code>[FOXISAPI]
BusyTimeout = 5
ReleaseTimeout = 15
</code></pre>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;You must reset Foxisapi.dll with the Reset command after you make changes to Foxisapi.ini file in order for the changes to take effect.</p>
<h3>Microsoft Internet Information Server Configuration Tips</h3>
<p>
Two Microsoft Internet Information Server registry entries, PoolThreadLimit and ThreadTimeout, can be added to your registry to improve performance with the Visual FoxPro FoxISAPI Automation servers. These registry entries determine the total number of threads that Internet Information Server can create, and the length of time the threads exist. For more information about these registry entries, see your Internet Information Server documentation.</p>
<p>
A Microsoft Knowledge Base article titled “How to Launch Automation servers from ISAPI Extensions” (number Q156223) is available on www.microsoft.com. This article provides information about the access security permissions required to launch Automation servers such as the Visual FoxPro ISAPI Automation Servers.</p>

<h2><a name="smpfoxis_visual_foxpro_internet_server"></a>FoxIs, a Visual FoxPro Internet Server</h2>
<p>
FoxIs, located in the Visual Studio …\Samples\Vfp98\Servers\Foxisapi\FoxIs directory, illustrates creating an <a href="glsout_of_process.htm">out-of-process</a> .exe or <a href="glsin_process.htm">in-process</a> .dll with ISAPI functionality that can be accessed from within Visual FoxPro as a stand-alone program, from Automation clients, and from a Web browser. Changes you make to its classes can enhance the Automation server, no matter how it is run.</p>
<p class=label>
<b>To open the FoxIs sample project</b>
<ul type=disc>
<li>
Type the following in the <b>Command</b> window:<pre><code>MODIFY PROJECT (HOME(2) + 'servers\foxisapi\foxis\foxis')
</code></pre>
</li>
</ul>
<h2>Running the FoxIs Sample</h2>
<p>
You can run the FoxIs sample four different ways. When you are trying out the code, it’s a good idea to go run the sample in this order:</p>
<p>
<b>Running from Within Visual FoxPro</b></p>
<p class=tl>
To run the FoxIs sample from within Visual FoxPro, run the following code in the Command window.</P><pre><code>SET DEFAULT TO (HOME(2) + 'servers\foxisapi\foxis\')
SET CLASSLIB TO employee
ox = Createobject('employee')
ox.show
</code></pre>
<p>
<b>Running as an Independent Executable</b></p>
<p class=tl>
You can build the sample into an executable file with the following line of code:</P><pre><code>BUILD EXE foxis FROM foxis
</code></pre>
<p class=tl>
The compiled file, FOXIS.EXE, is a Windows program that can be added to the Windows <b>Start</b> menu, started from the Windows Explorer, and so on.</P><p>
<b>Running as an Automation server</b></p>
<p class=tl>
Once the FoxIs sample has been compiled into a .exe or a .dll, it is registered as an Automation server in the Windows registry. You can create an object based on the employee class from any OLE controller, for example Excel, Visual Basic, and Visual FoxPro 3.0:</P><pre><code>ox = Createobject('foxis.employee')
ox.SHOW
</code></pre>
<p>
<b>Running from a Web Browser</b></p>
<p class=tl>
You can even run the FoxIs sample from a Web browser, which could be on another machine such as a 286 running MS-DOS, a Unix machine, a Macintosh, or a Personal Digital Assistant.</P><h2>System Requirements for Internet Use</h2>
<p>
To run the FoxIs sample from a Web browser, you must be running:
<ul type=disc>
<li>
Windows 95 or Windows NT 4.0 or higher.<br><br></li>
<li>
An ISAPI-compatible Web server, such as the Microsoft Personal Web Server for Windows 95 or Microsoft's Internet Information Server (IIS). IIS comes with Windows NT 4.0 and can be downloaded from www.microsoft.com; Personal Web Server also can be downloaded from www.microsoft.com.</li>
</ul>
<p>
If you're using Windows NT 4.0, you need to run the DCOMCNFG utility to configure DCOM to give rights to the IIS service to instantiate OLE objects.</p>
<p class=label>
<b>To configure Windows NT 4.0 DCOM</b>
<ol>
<li>
At the Command prompt, type <b>DCOMCNFG</b> and press <b>Enter</b>.<br><br></li>
<li>
In the <b>Applications</b> tab, select the name of the Automation server. When you build the server, the application is “employee” by default.<br><br></li>
<li>
In the <b>Default Security</b> tab of the <b>Distributed COM Configuration Properties</b> dialog box, choose <b>Edit Default</b> for each area: <b>Default Access Permissions</b>, <b>Default Launch Permissions</b>, and <b>Default Configuration Permissions</b>.<br><br></li>
<li>
In the <b>Registry Value Permissions</b> dialog box for each area, choose <b>Add</b>.<br><br></li>
<li>
In the <b>Add Names</b> box of the <b>Add Users and Groups</b> dialog box, type your WWW server’s name and your login user name. <p class=tl>
You can see the server’s name in the Microsoft Internet Service Manager Properties window. If your machine name is FOO, the following line in the <b>Add Names</b> box sets up a default user:</P><pre><code>\FOO\IUSR_FOO
</code></pre>
<p class=tl>
If your machine name is FOO and you log in as HOMER, the following line in the <b>Add Names</b> box sets up permissions for you when you login:</P><pre><code>\FOO\HOMER
</code></pre>
</li>
</ol>
<h2>Setting Up the FoxIs Sample for Internet Access</h2>
<p>
To set up the FoxIs sample, you need to create a .exe or .dll from the FoxIs project, and then copy the file to your Inetsvr\Scripts directory.</p>
<p class=label>
<b>To set up the FoxIs Sample</b>
<ol>
<li>
Open the FOXIS project.<br><br></li>
<li>
Choose the <b>Build</b> button, and then choose <b>Build COM DLL</b>.<br><br></li>
<li>
Copy Foxisapi.dll to your Inetsrv\Scripts folder.</li>
</ol>
<h2>Preliminary Testing</h2>
<p>
You can test the FoxIs sample application at various levels to see if you are configured correctly.</p>
<p class=label>
<b>To see if the code works</b>
<ol>
<li>
From the <b>Program</b> menu choose <b>Do</b>.<br><br></li>
<li>
Select Main.prg in the Visual FoxPro Samples\Servers\Foxisapi folder.<br><br></li>
<li>
Choose <b>Do</b>.</li>
</ol>
<p class=label>
<b>To see if the .EXE works</b>
<ol>
<li>
From the Visual FoxPro Command window, issue the following command:<pre><code>build exe Foxis.exe from foxis
</code></pre>
</li>
<li>
Double-click Foxis.exe in the Windows Explorer.</li>
</ol>
<p class=label>
<b>To see if the FoxIs Automation server works</b>
<ul type=disc>
<li>
Run the following commands:<pre><code>ox= createobject('foxis.employee')
ox.show &nbsp;&nbsp; &amp;&amp; See if it works as a ISAPI Automation server
?ox.startup( )&nbsp; &amp;&amp; See if it returns html
</code></pre>
</li>
</ul>
<p>
It is much easier to debug Automation servers from an Automation controller (such as Visual FoxPro) before instantiating it in foxIs.</p>
<h2>Set up the HTML page</h2>
<p>
To get things started, you need an HTML page that contains a reference to a url. For example, take the following code and put it in the Wwwroot\default.htm file.</p>
<pre><code>&lt;a HREF="/scripts/foxisapi.dll/FoxIS.employee.startup"&gt; &lt;i&gt;VFP ISAPI AUTOMATION SERVER DEMO PAGE&lt;/i&gt; &lt;/a&gt; 
</code></pre>
<p>
Then use a browser (which can be on the same machine) and connect to YourMachineName. For example, if your machine name was "foobar," then type "foobar" as the URL to go to. This would bring up the Default.htm page on the server named "foobar"</p>
<p>
A CreateObject("foxis.employee") is initiated and the Startup method is invoked on the object, which returns a generated HTML page. If the ISAPI Automation server hasn't been built yet, then the Foxisapi.dll returns an HTML error page.</p>
<p>
Then use your web browser to access the href above. If you get an error HTML page that says “Foxisapi error”, then you know the DLL is being loaded and is working. </p>
<pre><code>&nbsp;&lt;form action = "/scripts/foxisapi.dll/foxis.employee.cmd"&gt;
&lt;input name="Cmd" value = "Reset"&gt;
&lt;input type="submit" value="Dos Command"&gt;
&lt;/form&gt;
</code></pre>
<p>
You can actually put in any valid MS-DOS command and it will be executed on the server machine. If the command is "Reset" (default), then it will make the ISAPI Automation server release the first instance as well as it's own, thus releasing the ISAPI Automation server completely.</p>
<p>
In addition, you can evaluate any Visual FoxPro expression. However, if the Visual FoxPro expression displays a modal interface, as the MESSAGEBOX(&nbsp;) function does, the Automation server will hang waiting for a response that cannot be provided. However, for an in-process .dll, the modal interface is automatically managed and the Automation server won’t hang.</p>
<pre><code>&lt;form action = "/scripts/foxisapi.dll/foxis.employee.cmd?FOXCMD"&gt;
&lt;input name="Cmd"&gt;
&lt;input type="submit" value="Fox Expression"&gt;
like "today is "+ cdow(date()) or 45 * 3 or SYS(2004)
&lt;/form&gt;
</code></pre>
<h2>Debugging the Server</h2>
<p>
A Windows NT service has no Desktop, therefore no user interface will appear on the server machine. This means you should debug your server applications before deploying them.</p>
<p class=label>
<b>To trace through Foxisapi.dll with Visual C++ 5.0</b>
<ol>
<li>
Open Foxisapi.mak.<br><br></li>
<li>
Remove the comment mark from the following line in HttpExtensionProc:<pre><code>//    _asm int 3
</code></pre>
</li>
<li>
Rebuild the project.<br><br></li>
<li>
Start MSDEV with the process id (PID) of Inetinfo.exe. You can get the process id in the Windows NT Task Manager.</li>
</ol>
<p>
This process applies to Windows NT 4.0.</p>
<p class=indent>
<b>Tip</b>&nbsp;&nbsp;&nbsp;When debugging, you don't have to shut down the web server to change the Automation server. You can just terminate the out-of-process component by sending a reset value to the cmd method, as described above, or by using the Win32 SDK tools TLIST, KILL, PVIEW, or the Task Manager in Windows NT 4.0.</p>
<h2>The ISForm Class</h2>
<p>
The “engine” of the sample is the ISForm class in Isapi.vcx.</p>
<h3>Entry Points into the ISForm Class</h3>
<p>
The following methods can be called from the Web browser, by way of Foxisapi.dll, to return HTML pages.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Method</b></td>
<td class=label width=81%><b>Returns</b></td>
</tr>
<tr valign=top>
<td width=19%>Cmd</td>
<td width=81%>Evaluation of a Visual FoxPro expression or the results of a MS-DOS command.</td>
</tr>
<tr valign=top>
<td width=19%>DoSave</td>
<td width=81%>Saves the user changes to the data and returns the employee HTML page.</td>
</tr>
<tr valign=top>
<td width=19%>Skipit</td>
<td width=81%>The employee information for the specified employee in the table. Skipit takes cookie information passed in as a parameter from the Web browser, checks the cookies table to find the previous record number, and moves the record pointer forward or backward relative to the record number stored in the cookies table. The new record number is written back to the cookies table and the GenHTML method is called.</td>
</tr>
<tr valign=top>
<td width=19%>Startup</td>
<td width=81%>The employee information for the first employee in the table. Startup creates a new cookie id for the user and sends it back as a hidden input area in the HTML.</td>
</tr>
</table><br>
<h2>Keeping the Server Active</h2>
<p>
Normally, for each request from a web client, the Automation server is instantiated, generates an HTML page, and is released with the Release(&nbsp;) call in CallObject(&nbsp;) in Foxisapi.cpp. This means the entire Visual FoxPro runtime will start up and shut down for each request.</p>
<p>
If the ISAPI Automation server is registered as Multi-Use, and the Release(&nbsp;) is not called, then the first request will start up the server but subsequent requests will use the same instance of the server, making performance much better. Code in Foxisapi.dll and in the Load, Cmd, DoSave, Startup, and Skipit methods of the ISForm manage keeping the same instance of the server active.</p>
<h2>Variables in the DLL</h2>
<p>
Two variables are declared: pdispObj and pdispDoRelease. When the server is initially created, pdispObj is the dispatch handle to the OLE object. The pdispDoRelease variable is set to the same value as pdispObj and passed <i>by reference</i> as a parameter to the method of the ISForm server that was requested by the Web browser. Code in the Visual FoxPro ISForm Automation server can change the value of pdispDoRelease.</p>
<p class=indent>
<b>Tip</b>&nbsp;&nbsp;&nbsp;For more information about this sample, see the comments in the code in ISForm and Foxisapi.cpp.</p>
<h2>The Form Load Event</h2>
<p>
When the ISForm is created, code in the Load event creates two public variables, <i>gpInstance</i> and <i>gpDisp</i>. The first time the ISForm server is loaded, the gpInstance variable is set to 1. Subsequent instances increment this variable. When an instance is released, gpInstance is decremented.</p>
<h2>The Entry Point Methods</h2>
<p>
When a method (Cmd, DoSave, Skipit, or Startup) of the ISForm is invoked through Foxisapi.dll, the .dll passes a dispatch pointer by reference as a parameter to the method.</p>
<p>
The first time the server is run, the instance count is set to 1 and the dispatch pointer is stored to the global variable. Then value 0 is stored to the dispatch pointer.</p>
<pre><code>IF m.gnInstance = 1 
 &nbsp; IF TYPE('pDisp') $ 'NI' 
 &nbsp;&nbsp;&nbsp;&nbsp; gpDisp = m.pDisp
 &nbsp;&nbsp;&nbsp;&nbsp; pDisp = 0
 &nbsp; ENDIF
ENDIF
</code></pre>
<p>
At this point, two variables point to the same dispatch pointer value: gpDisp in the ISForm Automation server and pdispObj in Foxisapi.dll. The value of pdispDoRelease in the .dll is 0, as changed in the ISForm Automation server.</p>
<p>
Subsequent times the server is called the instance count in incremented, a new pdispObj is generated in the .dll, stored to pdispDoRelease, and passed by reference to the requested method. Because the gnInstance value is not 1, the gpDisp variable is not changed. From this point on, gpDisp in the Automation server holds a different value than pdispObj and pdispDoRelease in the .dll. </p>
<h2>Code in the DLL</h2>
<p>
The following C++ code in Foxisapi.cpp manages releasing the server. After the first instance is created, subsequent instances are released normally with the Release(&nbsp;) call in CallObject(&nbsp;) in Foxisapi.cpp because pdispObj and pdispDoRelease are set to the same non-zero value. </p>
<pre><code>if (pdispDoRelease != 0) {
 &nbsp; pdispObj-&gt;Release();&nbsp; //nonzero, so release the current object
 &nbsp; if (pdispObj != pdispDoRelease) {
 &nbsp;&nbsp;&nbsp;&nbsp; __try {&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (pdispDoRelease)-&gt;Release();
 &nbsp;&nbsp;&nbsp;&nbsp; } __except&nbsp; (EXCEPTION_EXECUTE_HANDLER) {

 &nbsp;&nbsp;&nbsp;&nbsp; }
 &nbsp; }
}
</code></pre>
<p>
The Destroy event of the ISForm decrements the instance count. When there is only one instance, pdispDoRelease has been set to 0 and the release code is not called. if the pdispObject and pdispDoRelease are the same, subsequent instances are released, but the original instance is not released.</p>
<h2>Releasing the Server</h2>
<p>
To force a release, pdispDoRelease cannot be 0 and must be a different value than pdispObject. The following HTML text sends a value to the server that affects a release:</p>
<pre><code>&nbsp;&lt;form action = "/scripts/foxisapi.dll/foxis.employee.cmd"&gt;
&lt;input name="Cmd" value = "Reset"&gt;
&lt;input type="submit" value="Dos Command"&gt;
&lt;/form&gt;
</code></pre>
<p>
The following code in the cmd method sets the pdispDoRelease value to the dispatch value of the first instance.</p>
<pre><code>CASE 'RESET'$upper(m.p1)
 &nbsp; m.pDisp= m.gpDisp
</code></pre>
<p>
Code in the .dll will now release the current instance and the original instance that has been kept in existence to prevent the Visual FoxPro runtime from having to be reloaded each time the server was called.</p>
<h2>Sending HTML Back to the Client</h2>
<p>
The GenHTML method of the ISForm class is called from each of the entry point methods. The HTML returned from the GenHTML method is returned to the web browser through the Internet Information Server.</p>
<p>
If the mode parameter passed to the GenHTML method is not “FORM,” the GenHTML method simply looks up the value in a table and sends back preformatted HTML.</p>
<pre><code>IF m.mode != 'FORM'
 &nbsp; =SEEK(m.mode,'html')
 &nbsp; rv = html.html
  RETURN m.rv
ENDIF
</code></pre>
<p>
If the mode parameter is “FORM,” code in GenHTML identifies each of the labels and textboxes on the form, sorts them in top to bottom and left-to-right order, evaluates the Captions and ControlSources of the controls, and uses Visual FoxPro’s text merge capabilities to construct the appropriate HTML text to approximate the display of the form.</p>
<p>
If you add additional labels and text boxes to the form, they are automatically displayed in the generated HTML.</p>
<h2>Creating and Using Cookies</h2>
<p>
As a web server this application can be hit dozens of times by various clients, and we need to keep track of the user state. In this case, we only track the current record number for that user. We could present the user with a login screen, and use the username as a key for the cookie, but instead we generate a cookie value in the MakeCookie method and pass it as a hidden value in the HTML sent back to the user. Each time the user chooses to go to a different record, we can read the cookie value from the HTTP string sent to the .dll, locate the cookie in the Cookies table, find the current record number and move the record number relative to this number.</p>
<p>
The following property and methods are used in the cookie manipulation process:
<ul type=disc>
<li>
Cookie property<br><br></li>
<li>
GetCookie method<br><br></li>
<li>
MakeCookie method<br><br></li>
<li>
WriteCookieInfo method</li>
</ul>
<h2>Error Handling</h2>
<p>
If an error occurs, code in the Error event of the ISForm class calls the GenHTML method with a parameter of “ERROR.” GenHTML reads the pre-formatted HTML text for errors and returns it to the Error event code. The Error event code substitutes error information for placeholders in the HTML:</p>
<pre><code>&nbsp;&nbsp;&nbsp;LOCAL rv
 &nbsp; rv = THIS.GenHTML('ERROR')
 &nbsp; rv = strtran(m.rv,'%METHOD%',m.cMethod)
 &nbsp; rv = strtran(m.rv,'%ERRORNO%',STR(m.nError,4))
 &nbsp; rv = strtran(m.rv,'%ERRORMSG%',Message(1))
 &nbsp; rv = strtran(m.rv,'%LINENO%',STR(m.nLine,4))
 &nbsp; THIS.ErrorHTML = m.rv
</code></pre>
<p>
When the ErrorHTML property isn’t empty, GenHTML sends the value of ErrorHTML back to the client.</p>
<h2>Tables Used in the FoxIs Sample</h2>
<p>
In addition to the employee table used for data entry and display, the FoxIs sample uses the following tables.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=19%><b>Table</b></td>
<td class=label width=81%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=19%>HTML</td>
<td width=81%>Holds HTML text to be sent back to the Web browser as a header for FoxCMD and DosCMD evaluations or in case of an error.</td>
</tr>
<tr valign=top>
<td width=19%>Cookies</td>
<td width=81%>Keeps track of record numbers for various web browsers. The unique cookie field value is passed as a hidden value in HTML text sent to a particular user.</td>
</tr>
</table><br>
</BODY>
</HTML>

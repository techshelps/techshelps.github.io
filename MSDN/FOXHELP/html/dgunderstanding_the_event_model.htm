<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding the Event Model</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgunderstanding_the_event_model"></a><sup></sup>Chapter 4: Understanding the Event Model</h1>
<p>
Visual FoxPro provides true <a href="glsmodeless.htm">modeless</a> operation so that you can easily coordinate multiple <a href="glsform.htm">forms</a> automatically and run multiple instances of a form simultaneously. Visual FoxPro also manages event processing for you so you can give your users a much richer interactive environment.</p>
<p>
This chapter describes:</p>
<ul type=disc>
<li>
<a href="#dgevents_in_visual_foxpro">Events in Visual FoxPro</a></li>
<li>
<a href="#dgtracking_event_sequences">Tracking Event Sequences</a></li>
<li>
<a href="#dgassigning_code_to_events">Assigning Code to Events</a></li>
</ul>

<h2><a name="dgevents_in_visual_foxpro"></a>Events in Visual FoxPro</h2>
<p>
<a href="glsevent_code.htm">Event code</a> is triggered automatically by the system in response to some user action. For example, code written for the Click event is automatically processed by the system when the user clicks on a control. Event code can also be triggered by system events, as in the case of the Timer event in a timer control.</p>
<h3>The Core Events</h3>
<p>
The following table contains a list of the core set of Visual FoxPro events, which apply to most controls.</p>
<p class=label>
<b>Core Event Set</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Event</b></td>
<td class=label width=69%><b>When the event is triggered</b></td>
</tr>
<tr valign=top>
<td width=31%><a href="lnginit_event.htm">Init</a></td>
<td width=69%>An object is created.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngdestroy_event.htm">Destroy</a></td>
<td width=69%>An object is released from memory.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngclick_event.htm">Click</a></td>
<td width=69%>The user clicks the object using the primary mouse button.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngdblclick_event.htm">DblClick</a></td>
<td width=69%>The user double-clicks the object using the primary mouse button.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngrightclick_event.htm">RightClick</a></td>
<td width=69%>The user clicks the object using the secondary mouse button.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lnggotfocus_event.htm">GotFocus</a></td>
<td width=69%>The object receives the focus, either by user action such as tabbing or clicking, or by changing the focus in code using the <a href="lngsetfocus_method.htm">SetFocus method</a>.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lnglostfocus_event.htm">LostFocus</a></td>
<td width=69%>The object loses the focus, either by user action such as tabbing to or clicking another object, or by changing the focus in code using the <a href="lngsetfocus_method.htm">SetFocus method</a>.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngkeypress_event.htm">KeyPress</a></td>
<td width=69%>The user presses and releases a key.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngmousedown_event.htm">MouseDown</a></td>
<td width=69%>The user presses the mouse button while the mouse pointer is over the object.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngmousemove_event.htm">MouseMove</a></td>
<td width=69%>The user moves the mouse over the object.</td>
</tr>
<tr valign=top>
<td width=31%><a href="lngmouseup_event.htm">MouseUp</a></td>
<td width=69%>The user releases the mouse button while the mouse pointer is over the object.</td>
</tr>
</table><br>
<h4>Containers and Object Events</h4>
<p>
There are two basic rules to keep in mind when you are writing event code for <a href="glscontrol.htm">controls</a>:</p>
<ul type=disc>
<li>
Containers do not process <a href="glsevent.htm">events</a> associated with the controls they contain.</li>
<li>
If no event code is associated with a control, Visual FoxPro checks to see if there is code associated with the event higher up the class hierarchy for the control.</li>
</ul>
<p>
When a user interacts with an object in any way —  by tabbing to it, clicking it, moving the mouse pointer over it, and so on — object events take place. Each object receives its events independently. For example, even though a command button is on a form, the form’s Click event is not triggered when a user clicks the command button; only the command button’s Click event is triggered.</p>
<p class=label>
<b>Container event code is separate from control event code</b></p>
<p>
<img src="afd04001.gif" border=0></p>
<p>
If there is no Click event code associated with the command button, nothing happens when the user clicks the button, even though there is Click event code associated with the form.</p>
<p>
This rule is also true of grid controls. The <a href="glsgrid_.htm">grid</a> contains columns which in turn contain headers and controls. When events occur, only the innermost object involved in the event recognizes the event. The higher-level containers do not recognize the event. The following illustration shows which objects process the MouseMove events that are generated when a user moves the mouse pointer across the grid.</p>
<p class=label>
<b>MouseMove events for a grid</b></p>
<p>
<img src="afd04002.gif" border=0></p>
<p>
There is an exception to this rule, however. If you have written event code for an option button group or a command button group but there is no code for the event in a particular button in the group, the group event code <i>is</i> executed when the button event occurs.</p>
<p>
For example, you can have an option button group with associated Click event code. Only one of the two option buttons in the group has associated Click event code:</p>
<p class=label>
<b>Event code for button groups can be used as the default</b></p>
<p>
<img src="afd04003.gif" border=0></p>
<p>
If a user clicks Option1, the Click event code associated with Option1 is executed. The Click event code associated with the option button group is not executed.</p>
<p>
Because there is no Click event code associated with Option2, if the user clicks Option2, the option group Click event code is executed.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When a sequence of events, such as MouseDown then MouseUp, is initiated for a control, the whole sequence of events belongs to the control.</p>
<p class=indent>
For example, if you click the left mouse button on a command button and drag the mouse pointer away from the command button, the command button’s MouseMove events continue to occur, even though the mouse pointer is moving over the form. If you release the left mouse button over the form instead of over the command button, the MouseUp event that occurs is associated with the command button rather than the form.</p>
<h4>Classes and Control Events</h4>
<p>
If a <a href="glscontrol.htm">control</a> on a <a href="glsform.htm">form</a> is based on a <a href="glsuser_defined_class_udc_.htm">user-defined class</a> (which, in turn, could be based on another user-defined class), Visual FoxPro checks in the immediate control for <a href="glsevent_code.htm">event code</a> when an event occurs. If there is code in that event procedure, Visual FoxPro executes it. If no code exists in the event procedure, Visual FoxPro checks the next level up in the class hierarchy. If at any point in the class hierarchy Visual FoxPro finds code for the event, that code is executed. Any code further up the hierarchy is not executed.</p>
<p class=label>
<b>If no event code is associated with an object, Visual FoxPro checks the parent class.</b></p>
<p>
<img src="afd04004.gif" border=0></p>
<p>
You can, however, include code in an event procedure and explicitly call the code in classes that the control is based on by using the <a href="lngdodefaultlp_rp.htm">DODEFAULT(&nbsp;)</a> function.</p>

<h2><a name="dgtracking_event_sequences"></a>Tracking Event Sequences</h2>
<p>
The Visual FoxPro event model is extensive, allowing you a great deal of control over the components of your application in response to a wide variety of user actions. Some of the event sequences are fixed, as for example, when a <a href="glsform.htm">form</a> is created or destroyed. Some <a href="glsevent.htm">events</a> occur independently, but most occur in conjunction with several other events based on user interaction.</p>
<h3>Setting Event Tracking On</h3>
<p>
The best way to see the Visual FoxPro event sequences is to set event tracking on in the debugger. Event tracking allows you to see when each event associated with your own forms and controls occurs in relation to other events, so that you can determine the most efficient place to include your code.</p>
<p class=label>
<b>To set event tracking on</b>
<ol>
<li>
From the <b>Tools</b> menu in the <a href="wnddebugger_window.htm">Debugger</a> window, choose <b>Event Tracking</b>.<br><br></li>
<li>
In the <b>Event Tracking</b> dialog box, select <b>Turn event tracking on</b>.</li>
</ol>
<p>
The events in the Events to track list are written to the Debugger Output window or a file as they occur.</p>
<p class=label>
<b>The Event Tracking dialog box</b></p>
<p>
<img src="afd04005.gif" border=0></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;this example, the MouseMove and Paint events have been removed from the Events to track list because these events occur so frequently that they make it more difficult to see the sequences of the other events.</p>
<h3>Watching Events Occur</h3>
<p>
Sometimes a single event is triggered by a user action, such as the user moving the mouse pointer over a control. Often, however, a user action triggers multiple events.</p>
<p>
This section describes the order in which events occur in response to user interaction, using the following form as an example.</p>
<p class=label>
<b>A sample form to illustrate event sequences</b></p>
<p>
<img src="afd04006.gif" border=0></p>
<p>
In this example scenario, the user performs the following actions on the form:
<ol>
<li>
Runs the form.<br><br></li>
<li>
Types text in Text1.<br><br></li>
<li>
Selects the field, and copies it to the clipboard.<br><br></li>
<li>
Moves to Text2.<br><br></li>
<li>
Pastes the text into Text2.<br><br></li>
<li>
Closes the form by clicking Command2.</li>
</ol>
<p>
These actions trigger one or more system events for each object. The following tables detail the events triggered in response to each user action.</p>
<h4>Action 1</h4>
<p>
The user runs the form by typing the following command in the <a href="wndcommand_window.htm">Command</a> window:</p>
<pre><code>DO FORM form1 NAME frmObject
</code></pre>
<p>
Visual FoxPro loads the form, initializes each object, then initializes the form; the form is activated and then the first field receives input focus.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Object</b></td>
<td class=label width=62%><b>Event</b></td>
</tr>
<tr valign=top>
<td width=38%>DataEnvironment</td>
<td width=62%><a href="lngbeforeopentables_event.htm">BeforeOpenTables</a></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%><a href="lngload_event.htm">Load</a></td>
</tr>
<tr valign=top>
<td width=38%>DataEnvironment</td>
<td width=62%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=38%>Text2</td>
<td width=62%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=38%>Command1</td>
<td width=62%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%><a href="lngactivate_event.htm">Activate</a></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%><a href="lnggotfocus_event.htm">GotFocus</a></td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%><a href="lngwhen_event.htm">When</a></td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%><a href="lnggotfocus_event.htm">GotFocus</a></td>
</tr>
</table><br>
<h4>Action 2</h4>
<p>
The user types <b>Test</b> in Text1. Each keystroke generates two events. The <a href="lngkeypress_event.htm">KeyPress event</a> receives 2 parameters: the pressed key and the state of the SHIFT, ALT, and CTRL keys.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Object</b></td>
<td class=label width=62%><b>Event</b></td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>KeyPress(84, 1) “T”</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>InteractiveChange</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>KeyPress(101, 0) “e”</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>InteractiveChange</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>KeyPress(115,0) “s”</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>InteractiveChange</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>KeyPress(116,0) “t”</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>InteractiveChange</td>
</tr>
</table><br>
<h4>Action 3</h4>
<p>
The user double-clicks Text1 to select the text, then presses CTRL+C to copy the text to the <a href="glsclipboard.htm">Clipboard</a>. Mouse events and a <a href="lngclick_event.htm">Click event</a> accompany the <a href="lngdblclick_event.htm">DblClick event</a>. The <a href="lngmousemove_event.htm">MouseMove</a> and <a href="lngmousedown_event.htm">MouseDown</a> events receive four <a href="glsparameter.htm">parameters</a>: a number indicating which button was pressed, the Shift state, and X and Y locations. The X and Y locations are relative to the form and reflect the scale mode (for example, <a href="glspixel.htm">pixels</a>) of the form. Only one MouseMove event is listed for each control. In actuality, this event would probably fire half a dozen times or more.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Object</b></td>
<td class=label width=62%><b>Event</b></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%>MouseMove(0, 0, 100, 35) </td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>MouseMove(0,0,44,22)</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>MouseDown(1, 0, 44, 22)</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>MouseUp(1, 0, 44, 22)</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>Click</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>MouseDown(1, 0, 44, 22)</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>MouseUp(1, 0, 44, 22)</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%>DblClick</td>
</tr>
</table><br>
<h4>Action 4</h4>
<p>
The user presses TAB to move to Text2.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Object</b></td>
<td class=label width=62%><b>Event</b></td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%><a href="lngkeypress_event.htm">KeyPress</a>(9, 0)</td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%><a href="lngvalid_event.htm">Valid</a></td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%><a href="lnglostfocus_event.htm">LostFocus</a></td>
</tr>
<tr valign=top>
<td width=38%>Text2</td>
<td width=62%><a href="lngwhen_event.htm">When</a></td>
</tr>
<tr valign=top>
<td width=38%>Text2</td>
<td width=62%><a href="lnggotfocus_event.htm">GotFocus</a></td>
</tr>
</table><br>
<h4>Action 5</h4>
<p>
The user pastes the copied text into Text2 by pressing CTRL+V.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Object</b></td>
<td class=label width=62%><b>Event</b></td>
</tr>
<tr valign=top>
<td width=38%>Text2</td>
<td width=62%>InteractiveChange</td>
</tr>
</table><br>
<h4>Action 6</h4>
<p>
The user clicks Command2, which closes the form.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Object</b></td>
<td class=label width=62%><b>Event</b></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%><a href="lngmousemove_event.htm">MouseMove</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngmousemove_event.htm">MouseMove</a></td>
</tr>
<tr valign=top>
<td width=38%>Text2</td>
<td width=62%><a href="lngvalid_event.htm">Valid</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngwhen_event.htm">When</a></td>
</tr>
<tr valign=top>
<td width=38%>Text2</td>
<td width=62%><a href="lnglostfocus_event.htm">LostFocus</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lnggotfocus_event.htm">GotFocus</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngmousedown_event.htm">MouseDown</a>(1, 0, 143, 128)</td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngmouseup_event.htm">MouseUp</a>(1, 0, 143, 128)</td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngclick_event.htm">Click</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngvalid_event.htm">Valid</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngwhen_event.htm">When</a></td>
</tr>
</table><br>
<p>
As the form closes and the object is released, these additional events take place, in opposite order to the events in Action 1.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Object</b></td>
<td class=label width=62%><b>Event</b></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=38%>Command2</td>
<td width=62%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=38%>Command1</td>
<td width=62%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=38%>Text2</td>
<td width=62%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=38%>Text1</td>
<td width=62%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=38%>Form1</td>
<td width=62%><a href="lngunload_event.htm">Unload</a></td>
</tr>
<tr valign=top>
<td width=38%>DataEnvironment</td>
<td width=62%><a href="lngafterclosetables_event.htm">AfterCloseTables</a></td>
</tr>
<tr valign=top>
<td width=38%>DataEnvironment</td>
<td width=62%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
</table><br>
<h3>The Visual FoxPro Event Sequence</h3>
<p>
The following table shows the general firing sequence of Visual FoxPro events. The <a href="glsdata_environment.htm">data environment’s</a> <a href="lngautoopentables_property.htm">AutoOpenTables property</a> is assumed to be set to true (.T.). Other events can occur based on user interaction and system response.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Object</b></td>
<td class=label width=50%><b>Events</b></td>
</tr>
<tr valign=top>
<td width=50%>Data environment</td>
<td width=50%><a href="lngbeforeopentables_event.htm">BeforeOpenTables</a></td>
</tr>
<tr valign=top>
<td width=50%>Form set</td>
<td width=50%><a href="lngload_event.htm">Load</a></td>
</tr>
<tr valign=top>
<td width=50%>Form</td>
<td width=50%><a href="lngload_event.htm">Load</a></td>
</tr>
<tr valign=top>
<td width=50%>Data environment cursor(s)</td>
<td width=50%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=50%>Data environment</td>
<td width=50%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=50%>Objects <sup>1</sup></td>
<td width=50%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=50%>Form</td>
<td width=50%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=50%>Form set</td>
<td width=50%><a href="lnginit_event.htm">Init</a></td>
</tr>
<tr valign=top>
<td width=50%>Form set</td>
<td width=50%><a href="lngactivate_event.htm">Activate</a></td>
</tr>
<tr valign=top>
<td width=50%>Form</td>
<td width=50%><a href="lngactivate_event.htm">Activate</a></td>
</tr>
<tr valign=top>
<td width=50%>Object1 <sup>2</sup></td>
<td width=50%><a href="lngwhen_event.htm">When</a></td>
</tr>
<tr valign=top>
<td width=50%>Form</td>
<td width=50%><a href="lnggotfocus_event.htm">GotFocus</a></td>
</tr>
<tr valign=top>
<td width=50%>Object1</td>
<td width=50%><a href="lnggotfocus_event.htm">GotFocus</a></td>
</tr>
<tr valign=top>
<td width=50%>Object1</td>
<td width=50%><a href="lngmessage_event.htm">Message</a></td>
</tr>
<tr valign=top>
<td width=50%>Object1</td>
<td width=50%><a href="lngvalid_event.htm">Valid</a> <sup>3</sup></td>
</tr>
<tr valign=top>
<td width=50%>Object1</td>
<td width=50%><a href="lnglostfocus_event.htm">LostFocus</a></td>
</tr>
<tr valign=top>
<td width=50%>Object2 <sup>3</sup></td>
<td width=50%><a href="lngwhen_event.htm">When</a></td>
</tr>
<tr valign=top>
<td width=50%>Object2</td>
<td width=50%><a href="lnggotfocus_event.htm">GotFocus</a></td>
</tr>
<tr valign=top>
<td width=50%>Object2</td>
<td width=50%><a href="lngmessage_event.htm">Message</a></td>
</tr>
<tr valign=top>
<td width=50%>Object2</td>
<td width=50%><a href="lngvalid_event.htm">Valid</a> <sup>4</sup></td>
</tr>
<tr valign=top>
<td width=50%>Object2</td>
<td width=50%><a href="lnglostfocus_event.htm">LostFocus</a></td>
</tr>
<tr valign=top>
<td width=50%>Form</td>
<td width=50%><a href="lngqueryunload_event.htm">QueryUnload</a></td>
</tr>
<tr valign=top>
<td width=50%>Form</td>
<td width=50%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=50%>Object <sup>5</sup></td>
<td width=50%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=50%>Form</td>
<td width=50%><a href="lngunload_event.htm">Unload</a></td>
</tr>
<tr valign=top>
<td width=50%>Form set</td>
<td width=50%><a href="lngunload_event.htm">Unload</a></td>
</tr>
<tr valign=top>
<td width=50%>Data environment</td>
<td width=50%><a href="lngafterclosetables_event.htm">AfterCloseTables</a></td>
</tr>
<tr valign=top>
<td width=50%>Data environment</td>
<td width=50%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
<tr valign=top>
<td width=50%>Data environment cursor(s)</td>
<td width=50%><a href="lngdestroy_event.htm">Destroy</a></td>
</tr>
</table><br>
<p class=mini>
1. For each object, from innermost object to outermost container<br>
2. First object in the tab order<br>
3. Next object to get focus<br>
4. As the object loses focus<br>
5.<sup> </sup>For each object, from outermost container to innermost object</p>

<h2><a name="dgassigning_code_to_events"></a>Assigning Code to Events</h2>
<p>
Unless you associate code with an event, nothing happens when that event occurs. You’ll almost never write code for all of the events associated with any Visual FoxPro object, but you’ll want to incorporate functionality in response to certain key events in your applications. To add code to be executed when an event occurs, use the <a href="wndproperties_window.htm">Properties</a> window in the <a href="wndform_designer.htm">Form Designer</a>.</p>
<p>
The sequence of events affects where you should put code. Keep in mind the following tips:</p>
<ul type=disc>
<li>
The Init events of all the <a href="glscontrol.htm">controls</a> on a <a href="glsform.htm">form</a> execute before the Init event of the form, so you can include code in the Init event of the form to manipulate any of the controls on the form before the form is displayed.</li>
<li>
If you want some code to be processed whenever the value of a <a href="glslist_box_.htm">list box</a>, <a href="glscombo_box_.htm">combo box</a>, or <a href="glscheck_box_.htm">check box</a> changes, associate it with the InteractiveChange event. The Click event might not occur or might be called even if the value hasn’t changed.</li>
<li>
When you are dragging a <a href="glscontrol.htm">control</a>, the other mouse events are suspended. For example, the MouseUp and MouseMove events do not occur during a drag-and-drop operation.</li>
<li>
The Valid and When events return a value. True (.T.) is the default. If you return false (.F.) or 0 from the When event, the <a href="glscontrol.htm">control</a> cannot get the focus. If you return false (.F.) or 0 from the Valid event, the focus cannot leave the control.</li>
</ul>
<p>
For more information about using the Form Designer, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>. For information on coding classes and adding event code, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>.</p>
</BODY>
</HTML>

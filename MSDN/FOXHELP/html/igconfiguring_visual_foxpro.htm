<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Configuring Visual FoxPro</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="igconfiguring_visual_foxpro"></a><sup></sup>Chapter 3: Configuring Visual FoxPro</h1>
<p>
After you install Visual FoxPro, you might want to customize your development environment. Environment settings include the main window title, default directory, project, editor, debugger and form tool options, temporary file storage, field mappings for drag and drop operations, and many other options.</p>
<p>
You can configure Visual FoxPro either interactively or programmatically. You can also establish configuration settings that are loaded when you start Visual FoxPro. For information on optimizing your system once it is configured, see Chapter 4, <a href="igoptimizing_your_system.htm">Optimizing Your System</a>. For information on optimizing your Visual FoxPro applications, see Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a> in the <i>Programmer’s Guide</i>.</p>
<p>
This chapter discusses:
<ul type=disc>
<li>
<a href="#igsetting_the_visual_foxpro_configuration">Setting the Visual FoxPro Configuration</a><br><br></li>
<li>
<a href="#igsetting_the_environment_interactively">Setting the Environment Interactively</a><br><br></li>
<li>
<a href="#igsetting_configuration_options_at_startup">Setting Configuration Options at Startup</a><br><br></li>
<li>
<a href="#igconfiguring_visual_foxpro_toolbars">Configuring Visual FoxPro Toolbars</a><br><br></li>
<li>
<a href="#igsetting_editor_options">Setting Editor Options</a><br><br></li>
<li>
<a href="#igrestoring_the_visual_foxpro_environment_before_quitting">Restoring the Visual FoxPro Environment Before Quitting</a></li>
</ul>

<h2><a name="igsetting_the_visual_foxpro_configuration"></a>Setting the Visual FoxPro Configuration</h2>
<p>
The Visual FoxPro configuration determines how your copy of Visual FoxPro looks and behaves. For example, you can establish the default locations for files used with Visual FoxPro, how your source code looks in an edit window, and the format of dates and times.</p>
<p>
Changes you make to the Visual FoxPro configuration can be temporary (for the current session only) or permanent (they become the default settings the next time you start Visual FoxPro). If the settings are temporary, they are stored in memory and are discarded when you quit Visual FoxPro. If you make permanent settings, they are stored in the Windows registry. The <a href="glsregistry.htm">registry</a> is a database maintained by Windows that stores configuration information about the operating system, all Windows applications, OLE, and optional components such as ODBC. For example, the registry is where Windows stores the associations between file name extensions and applications, so that when you click a file name, Windows can launch or activate the appropriate application. Similarly, Visual FoxPro stores its application-specific configuration information in the registry.</p>
<p>
For an example of how to do this, examine Registry.prg in the Visual Studio …\Samples\Vfp98\Classes directory, which contains numerous methods, based on Windows API calls, that allow you to manipulate the Windows registry.</p>
<p>
When you start Visual FoxPro, the program reads the configuration information in the registry and sets the configuration according to those settings. After reading the registry, Visual FoxPro also checks for a <a href="glsconfiguration_file.htm">configuration file</a>, which is a text file, in which you can store configuration settings to override the defaults stored in the registry. After Visual FoxPro has started, you can make additional configuration settings using the <a href="cmdoptions_dialog_box.htm">Options</a> dialog box or SET commands.</p>
<p class=label>
<b>Setting configuration using the Windows registry, configuration file, and Options dialog box</b></p>
<p>
<img src="afi03004.gif" border=0></p>
<p class=indent>
<B><b>Note</b></B> The run-time version of Visual FoxPro does not read the Windows registry when starting up, as registry settings are designed primarily to configure the development environment. If you intend to distribute your Visual FoxPro applications using a run-time library, you can establish configuration settings in two ways: with a configuration file, or with a program that manipulates the Windows registry on the user’s computer.</p>
<p>
Finally, Visual FoxPro also maintains a <a href="glsresource_file.htm">resource file</a>, Foxuser.dbf, which stores information about the current state of the program when you quit. For example, the resource file contains information about the location and size of the command window, current keyboard macros, which toolbars are displayed, and so on. The Foxuser.dbf file is an ordinary Visual FoxPro table, which you can read and change as required by your application.</p>

<h2><a name="igsetting_the_environment_interactively"></a>Setting the Environment Interactively</h2>
<p>
You can set configuration options interactively by using:
<ul type=disc>
<li>
The Options dialog box.<br><br></li>
<li>
The SET command in the Command window or in a program.<br><br></li>
<li>
Setting the Windows registry directly.</li>
</ul>

<h2><a name="igworking_with_the_options_dialog_box"></a>Working with the Options Dialog Box</h2>
<p>
To view and change environment settings, you can use the Options dialog box.</p>
<p class=label>
<b>The Options dialog box</b></p>
<p>
<img src="afi03001.gif" border=0></p>
<p class=label>
<b>To display the Options dialog box</b>
<ul type=disc>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.</li>
</ul>
<p>
The Options dialog box has a series of tabs representing different categories of environment options, as shown in the following table. For details about options you can set using each tab, see the <a href="cmdoptions_dialog_box.htm">Options dialog box</a>.</p>
<p class=label>
<b>Tabs available in the Options dialog box</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Use this tab</b></td>
<td class=label width=77%><b>To access these features</b></td>
</tr>
<tr valign=top>
<td width=23%>View</td>
<td width=77%>Interface options, such as whether to display a status bar, clock, command results, or system messages.</td>
</tr>
<tr valign=top>
<td width=23%>General</td>
<td width=77%>Data entry and programming options, such as setting the warning sound, whether to log compilation errors, whether to automatically fill new records, what navigation keys to use, what color palette to use, and whether to warn before overwriting files.</td>
</tr>
<tr valign=top>
<td width=23%>Data</td>
<td width=77%>Table options, such as whether to use Rushmore optimization, whether to enforce uniqueness using indexes, the memo block size, the record counter interval for searches, and what locking options to use.</td>
</tr>
<tr valign=top>
<td width=23%>Remote Data</td>
<td width=77%>Remote data access options, such as connection timeout values, the number of records to fetch at once, and how to use SQL for updates.</td>
</tr>
<tr valign=top>
<td width=23%>File Locations</td>
<td width=77%>Locations for the default Visual FoxPro directory, where Help is stored, and where auxiliary files are stored.</td>
</tr>
<tr valign=top>
<td width=23%>Forms</td>
<td width=77%>Form Designer options, such as the grid spacing, the scale units to use, the maximum design area, and what template classes to use.</td>
</tr>
<tr valign=top>
<td width=23%>Projects</td>
<td width=77%>Project Manager options, such as whether to prompt for wizards, whether to run or modify files when double-clicking, and options for source control.</td>
</tr>
<tr valign=top>
<td width=23%>Controls</td>
<td width=77%>Options for what visual class libraries and ActiveX controls to make available from the View Classes button on the Form Controls toolbar.</td>
</tr>
<tr valign=top>
<td width=23%>Regional</td>
<td width=77%>Formats for dates, times, currency, and numbers.</td>
</tr>
<tr valign=top>
<td width=23%>Debug</td>
<td width=77%>Debugger display and trace options, such as what font and color to use.</td>
</tr>
<tr valign=top>
<td width=23%>Syntax Coloring</td>
<td width=77%>Font and color options for identifying elements of programs, such as comments and keywords.</td>
</tr>
<tr valign=top>
<td width=23%>Field Mapping</td>
<td width=77%>Options for what controls to create when dragging tables or fields to a form from the Data Environment Designer, Database Designer, or Project Manager.</td>
</tr>
</table><br>

<h3><a name="igsaving_configuration_settings"></a>Saving Configuration Settings</h3>
<p>
You can save the settings you make in the Options dialog box for the current data session, or as default (permanent) settings for your copy of Visual FoxPro.</p>
<p class=label>
<b>To save settings for the current session only</b>
<ol>
<li>
In the <b>Options</b> dialog box, make setting choices.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<p>
When you save settings for the current session only, they remain in effect until you quit Visual FoxPro (or until you change them again). To save changes permanently, save them as default settings; this stores them in the Windows registry.</p>
<p class=label>
<b>To save current settings as default settings</b>
<ol>
<li>
In the <b>Options</b> dialog box, make setting changes.<br><br></li>
<li>
Choose <b>Set As Default</b>.<p class=atl>
<B><b>Note</b></B> The <b>Set as Default</b> button is disabled until you make a change to the current settings.</p></li>
</ol>
<p>
You can override default settings by issuing SET commands or by specifying a configuration file when you start Visual FoxPro. For details, see <a href="#igsetting_configuration_options_at_startup">Setting Configuration Options at Startup</a> later in this chapter.</p>

<h2><a name="igusing_the_set_command__to_configure_visual_foxpro"></a>Using the SET Command to Configure Visual FoxPro</h2>
<p>
Most options displayed on the tabs in the Options dialog box can also be modified programmatically by using a SET command or by assigning a value to a system variable. For example, to use a year-month-date format for dates, you can change the Date Format setting in the Regional tab of the Options dialog box, or you can use the SET DATE command:</p>
<pre><code>SET DATE TO ANSI      &amp;&amp; Sets format to yy.mm.dd
</code></pre>
<p>
If you configure the environment using SET commands, the settings are in effect only for the current session of Visual FoxPro. When you quit the program, your settings are discarded, and you must reissue the SET commands. However, you can automate this process by issuing SET commands at startup or using a configuration file. For details, see <a href="#igsetting_configuration_options_at_startup">Setting Configuration Options at Startup</a> later in this chapter.</p>
<p class=indent>
<B><b>Tip</b></B> You can also save a configuration made with SET commands by displaying the Options dialog box and saving your settings there. For details, see <a href="#igsaving_configuration_settings">Saving Configuration Settings</a> earlier in this chapter.</p>

<h2><a name="igchanging_configuration_settings_in_the_windows_registry"></a>Changing Configuration Settings in the Windows Registry</h2>
<p>
You can make changes directly in the Windows registry to set the Visual FoxPro configuration.</p>
<p class=label>
<b>Visual FoxPro configuration settings in the Windows registry</b></p>
<p>
<img src="afi03002.gif" border=0></p>
<p>
To change the Windows registry, use the Registry Editor, a utility provided with Windows.</p>
<p class=indent>
<B><b>Note</b></B> Exercise caution when changing the Windows registry; changing the wrong registry entry or making an incorrect entry for a setting can introduce an error that prevents Visual FoxPro from starting or working properly.</p>
<p class=label>
<b>To change configuration settings in the registry</b>
<ol>
<li>
In Windows, start the Registry Editor.<br><br></li>
<li>
Navigate to this registry key in HKEY_CURRENT_USER:<pre><code>Software\Microsoft\VisualFoxPro\6.0\Options
</code></pre>
</li>
<li>
Double-click the name of the setting to change, and then enter a new value.<br><br></li>
<li>
Close the Registry Editor.</li>
</ol>
<p>
Your change will be in effect the next time you start Visual FoxPro.</p>
<p>
You can also make changes to the registry by calling Windows APIs from a Visual FoxPro program.</p>

<h2><a name="igdisplaying_configuration_settings"></a>Displaying Configuration Settings</h2>
<p>
When Visual FoxPro is running, you can verify environment settings by using the Options dialog box or the <a href="lngdisplay_status.htm">DISPLAY STATUS</a> command, or by displaying the values of individual SET Commands.</p>
<p class=label>
<b>To display multiple environment settings</b>
<ul type=disc>
<li>
From the <b>Tools</b> menu, choose <b>Options</b> to display the <b>Options</b> dialog box and view the current settings.<p class=tl>
&nbsp;–&nbsp;or&nbsp;–&nbsp;</P></li>
<li>
Type <a href="lngdisplay_status.htm">DISPLAY STATUS</a> in the Command window.</li>
</ul>
<p class=label>
<b>To display individual environment settings</b>
<ul type=disc>
<li>
Use the <a href="lngsetlp_rp.htm">SET(&nbsp;)</a> function in the <b>Command</b> window to display the current value of any <a href="lngset.htm">SET</a> command.<p class=tl>
For example, to view the current status of SET TALK, type:</P><pre><code>? SET("TALK")
</code></pre>
</li>
</ul>
<p class=indent>
<B><b>Note</b></B> Because settings are valid only for the current data session, you must capture your settings and place them in a program or a form’s Init event code for every private data session.</p>
<p class=label>
<b>To echo Options dialog box settings to the Command window</b>
<ol>
<li>
In the <b>Options</b> dialog box, make setting choices.<br><br></li>
<li>
Hold down the SHIFT key and choose <b>OK</b>.<p class=tl>
The settings are echoed to the <b>Command</b> window.</P></li>
<li>
Copy the setting commands from the <b>Command</b> window.</li>
</ol>

<h2><a name="igsetting_configuration_options_at_startup"></a>Setting Configuration Options at Startup</h2>
<p>
In addition to making changes to the Visual FoxPro environment interactively, you can establish configuration settings when you first start the program. Doing so allows you to override default settings.</p>
<p>
This section describes you how can:
<ul type=disc>
<li>
Use SET commands when you initialize your application.<br><br></li>
<li>
Set the environment using a configuration file.<br><br></li>
<li>
Use command-line options when starting Visual FoxPro.</li>
</ul>

<h3><a name="igusing_set_commands_at_startup"></a>Using SET Commands</h3>
<p>
One way to establish configuration settings is to issue one or more SET commands when your application starts. For example, to configure your system to use display a clock in the status bar when the application starts, you can issue this SET command:</p>
<pre><code>SET CLOCK ON
</code></pre>
<p>
The exact point at which you issue the SET command depends on your application. In general, you would issue SET commands from your application’s <a href="glsmain_file.htm">main program file</a>, which is the program or form that controls access to the rest of your application. For details about specifying a main file for an application, see Chapter 13, <a href="dgcompiling_an_application.htm">Compiling an Application</a>, in the <i>Programmer’s Guide.</i></p>
<p>
For example, if your application begins by displaying a form, you can issue SET commands in the code for the Load or Init events of the form. If your application begins with a menu, you can add the SETUP commands by entering them in the menu’s Setup option. For details, see “Adding Setup Code to a Menu System” in Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a>, in the <i>Programmer’s Guide.</i></p>
<p class=indent>
<B><b>Tip</b></B> An efficient way to manage SET commands for startup is to create a procedure that contains all the commands that you want to issue. You can then call the procedure from the appropriate point in your application. Keeping all the SETUP commands in a single procedure makes it easier to debug and maintain your configuration settings.</p>

<h3>&nbsp;<a name="igsetting_the_environment_with_a_configuration_file"></a>Using a Configuration File</h3>
<p>
In addition to setting the Visual FoxPro environment using the Options dialog box or SET commands, you can establish preferred settings and save them in one or more configuration files. A Visual FoxPro configuration file is a text file in which you can specify values for SET commands, set system variables, and execute commands or call functions. Visual FoxPro reads the configuration file when starting up, establishing the settings and executing the commands in the file. Settings made in the configuration file override default settings made in the Options dialog box (and stored in the Windows registry).</p>
<p>
Using a configuration file provides several advantages. You can:
<ul type=disc>
<li>
Override the default settings established in the Options dialog box.<br><br></li>
<li>
Maintain several different configuration files, each with different settings, so that Visual FoxPro can load a configuration suitable to a particular user or project.<br><br></li>
<li>
Make changes more easily than if you establish settings with the SET commands in the program initialization sequence.<br><br></li>
<li>
Start a program or call a function automatically when Visual FoxPro starts.</li>
</ul>

<h4>&nbsp;<a name="igcreating_a_configuration_file"></a>Creating a Configuration File</h4>
<p>
To create a configuration file, use the Visual FoxPro editor (or any editor that can create text files) to create a text file in the directory where Visual FoxPro is installed. Earlier versions of Visual FoxPro created the file Config.fpw in the startup directory. Config.fpw became the default configuration file. You can create any program file and use it to establish default settings and behaviors by starting Visual FoxPro using that file either by double clicking the file or using a command line reference.</p>
<p>
If you are creating a new configuration file, you can save it using any name you want. By convention, configuration files have the extension .fpw.</p>
<p>
When you start Visual FoxPro you can use a default configuration file in the following locations (in order):
<ul type=disc>
<li>
The current working directory.<br><br></li>
<li>
The directory where Visual FoxPro is installed.<br><br></li>
<li>
The directories listed in the DOS path.</li>
</ul>
<p>
If the default configuration file is not found in these locations, Visual FoxPro uses only the default settings established in the Options dialog box.</p>
<p class=indent>
<B><b>Note</b></B> For details about specifying an alternative to the default file name or location for the configuration file, see <a href="#igspecifying_the_configuration_file_to_use">Specifying the Configuration File to Use</a> later in this chapter.</p>
<p>
Enter configuration settings using one of these methods:
<ul type=disc>
<li>
Make settings with the SET command.<br><br></li>
<li>
Set system variables.<br><br></li>
<li>
Call programs or functions.<br><br></li>
<li>
Include special terms used only in configuration files.</li>
</ul>
<p class=label>
<b>To enter SET commands in a configuration file</b>
<ul type=disc>
<li>
Enter <a href="lngset.htm">SET</a> commands without the SET keyword and with an equal sign.<p class=tl>
For example, to set a default path type, use this format:</P><pre><code>DEFAULT = HOME()+"\VFP"
</code></pre>
<p class=tl>
To add a clock to the status bar, use this command:</P><pre><code>CLOCK = ON
</code></pre>
</li>
</ul>
<p>
To enter a setting for a system variable, use the same syntax you would use in the Command window or in a program.</p>
<p class=label>
<b>To set system variables in a configuration file</b>
<ul type=disc>
<li>
Enter the name of the system variable, an equal sign (<b>=</b>), and the value to set the variable to.<p class=tl>
For example, the following command sets the caption of the main Visual FoxPro window:</P><pre><code>_SCREEN.Caption = "My Application"
</code></pre>
<p class=tl>
The following command specifies an alternative spelling checking program:</P><pre><code>_SPELLCHK = "SPLLCHK.EXE"
</code></pre>
</li>
</ul>
<p>
You can also call functions or execute programs from within a configuration file by using the COMMAND command. For example, you can start an initialization program as part of the startup process.</p>
<p class=label>
<b>To call functions or execute commands in a configuration file</b>
<ul type=disc>
<li>
Enter COMMAND, an equal sign (<b>=</b>), and the command to execute or function to call.<p class=tl>
For example, to include the Visual FoxPro version number in the caption of the main Visual FoxPro window, use this command:</P><pre><code>COMMAND =_SCREEN.Caption=;
"Visual FoxPro " + SUBSTR(VERS(),25,3)
</code></pre>
<p class=tl>
The following command launches a specific application when Visual FoxPro starts:</P><pre><code>COMMAND = DO MYAPP.APP
</code></pre>
</li>
</ul>
<p>
You can also use special terms in a configuration file that do not correspond to SET value, system variables, or commands.</p>
<p class=label>
<b>To use special terms in a configuration file</b>
<ul type=disc>
<li>
Enter the special term, an equal sign (<b>=</b>), and the setting.<p class=tl>
For example, to set the maximum number of variables available in Visual FoxPro, use this command:</P><pre><code>MVCOUNT = 2048
</code></pre>
</li>
</ul>
<p>
For a complete list of special terms for configuration files, see <a href="conspecial_terms_for_configuration_files.htm">Special Terms for Configuration Files</a>.</p>

<h3>&nbsp;<a name="igstarting_applications_or_programs_automatically"></a>Starting Applications or Programs Automatically</h3>
<p>
You can insert commands into a configuration file that automatically launch programs when Visual FoxPro starts. You can use these commands either to start an entire application, or just to start a program, such as one that initializes system variables.</p>
<p class=label>
<b>To start applications from a configuration file</b>
<ul type=disc>
<li>
Assign the name of your application to the <a href="lng_startup.htm">STARTUP</a> system variable anywhere in the configuration file:<pre><code>_STARTUP = MYAPP.APP
</code></pre>
<p class=tl>
&nbsp;–&nbsp;or&nbsp;–&nbsp;</P></li>
<li>
Use the COMMAND command, which must be the last line in your configuration file:<pre><code>COMMAND = DO MYAPP.APP
</code></pre>
</li>
</ul>

<h3><a name="igspecifying_the_configuration_file_to_use"></a>Specifying the Configuration File to Use</h3>
<p>
When Visual FoxPro starts, you can specify a configuration file or bypass all configuration files, allowing Visual FoxPro to use its default settings.</p>
<p>
When Visual FoxPro loads a configuration file, the settings in that file take precedence over corresponding default settings made in the Options dialog box.</p>
<p class=label>
<b>To specify a configuration file</b>
<ul type=disc>
<li>
In the command line that starts Visual FoxPro, specify the -C switch and the name of the configuration file that you want to use (including a path if necessary). Do not put a space between the switch and the file name.<p class=tl>
For example, the following command specifies the file Myapp.fpw as the configuration file:</P><pre><code>C:\Program Files\Microsoft Visual ;
Studio\Vfp98\Vfp6.exe -CC:\MYAPP\MYAPP.FPW
</code></pre>
<p class=tl>
&nbsp;–&nbsp;or&nbsp;–&nbsp;</P></li>
<li>
In Windows, double-click the name of the configuration file to use. Visual FoxPro will start using the configuration file you have selected.</li>
</ul>
<p>
If you want to avoid using any configuration file, including the default file Config.fpw, you can suppress all configuration files. This causes Visual FoxPro to use only the default settings established in the Options dialog box.</p>
<p class=label>
<b>To suppress a configuration file</b>
<ul type=disc>
<li>
In the command line that starts Visual FoxPro, add the -C switch with nothing after it.<p class=tl>
For example, to avoid any configuration file found in the startup directory or the system path, use this command line:</P><pre><code>Vfp6.exe -C
</code></pre>
</li>
</ul>
<h2>Using Command-Line Options When<br>
Starting Visual FoxPro</h2>
<p>
In addition to using the SET command and a configuration file, you can specify startup options by including a command-line switch. For example, using command-line options, you can suppress the display of the Visual FoxPro sign-on screen or specify a non-default configuration file. The following table lists the command-line switches available in Visual FoxPro.</p>
<p class=label>
<b>Command-line switches for Visual FoxPro</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Switch</b></td>
<td class=label width=76%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=24%><pre><code>-A</code></pre>
</td>
<td width=76%>Ignores the default configuration file and Windows registry settings.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>-C&lt;file&gt;</code></pre>
</td>
<td width=76%>Specifies a configuration file (including path if necessary) other than the default (Config.fpw).</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>-D&lt;file&gt;</code></pre>
</td>
<td width=76%>Specifies a runtime .DLL file (including path if necessary) other than the default.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>-L&lt;file&gt;</code></pre>
</td>
<td width=76%>Specifies a resource file (including path if necessary) other than the default, which allows you to use Visual FoxPro in a language other than the current language specified by Windows.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>-R</code></pre>
</td>
<td width=76%>Refreshes the Windows registry with information about Visual FoxPro, such as associations for Visual FoxPro files.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>-T</code></pre>
</td>
<td width=76%>Suppresses the display of the Visual FoxPro sign-on screen (banner). For details, see <a href="#igpreventing_display_of_the_sign_on_screen">Preventing Display of the Sign-On Screen</a> later in this chapter.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>/regserver</code></pre>
</td>
<td width=76%>registers an OLE component.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>/unregserver</code></pre>
</td>
<td width=76%>Removes an OLE registry entry.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>REGSVR32 &lt;server.DLL&gt;</code></pre>
</td>
<td width=76%>Registers a .DLL component.</td>
</tr>
<tr valign=top>
<td width=24%><pre><code>/u &lt;server.DLL&gt;</code></pre>
</td>
<td width=76%>Removes a .dll component.</td>
</tr>
</table><br>
<p>
For more information, see <a href="concommand_line_switches.htm">Command-Line Switches</a>.</p>
<p>
If the command switch requires arguments such as a file name, do not put a space between the switch and the argument. Separate multiple options with single spaces. For example, to specify a configuration file, use a command such as:</p>
<pre><code>C:\Vfp98\VFP6.EXE -CC:\MYAPP\MYAPP.FPW
</code></pre>

<h3><a name="igpreventing_display_of_the_sign_on_screen"></a>Preventing Display of the Sign-On Screen</h3>
<p>
By default, when Visual FoxPro starts, it displays a sign-on screen that shows the Visual FoxPro logo, version number, and other information. If you prefer that users of your application not see this sign-on screen, you can prevent Visual FoxPro from displaying it.</p>
<p class=label>
<b>To prevent the display of the sign-on screen</b>
<ul type=disc>
<li>
Add the -T switch to the Visual FoxPro command line as a command-line switch.<p class=atl>
<B><b>Note</b></B> For compatibility with earlier versions of Visual FoxPro, you can also set switches using the FOXPROWCFG DOS environment variable, but this method is not recommended.</p></li>
</ul>
<p>
For example, use a command such as:</p>
<pre><code>VFP6.EXE -T
</code></pre>

<h2><a name="igconfiguring_visual_foxpro_toolbars"></a>Configuring Visual FoxPro Toolbars</h2>
<p>
Visual FoxPro includes the following customizable toolbars.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Tool</b></td>
<td class=label width=31%><b>Associated Toolbars</b></td>
<td class=label width=38%><b>Command</b></td>
</tr>
<tr valign=top>
<td width=31%>Database Designer</td>
<td width=31%>Database</td>
<td width=38%>CREATE DATABASE</td>
</tr>
<tr valign=top>
<td width=31%>Form Designer</td>
<td width=31%>Form Controls<p>
Form Designer</p>
<p>
Color Palette</p>
<p>
Layout</p>
</td>
<td width=38%>CREATE FORM</td>
</tr>
<tr valign=top>
<td width=31%>Print Preview</td>
<td width=31%>Print Preview</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=31%>Query Designer</td>
<td width=31%>Query Designer</td>
<td width=38%>CREATE QUERY</td>
</tr>
<tr valign=top>
<td width=31%>Report Designer</td>
<td width=31%>Report Controls<p>
Report Designer</p>
<p>
Color Palette</p>
<p>
Layout</p>
</td>
<td width=38%>CREATE REPORT</td>
</tr>
</table><br>
<h3>Activating and Deactivating Toolbars</h3>
<p>
By default, only the Standard toolbar is visible. When you use a Visual FoxPro designer tools (for example, the Form Designer), the designer displays the toolbars that you commonly need when working with that designer tool. However, you can activate a toolbar any time you require it.</p>
<p class=label>
<b>To activate a toolbar</b>
<ul type=disc>
<li>
Run the associated tool.<p class=tl>
&nbsp;–&nbsp;or&nbsp;–&nbsp;</P></li>
</ul>
<ol>
<li>
From the <b>View</b> menu, select <b>Toolbars</b>.<br><br></li>
<li>
In the <b>Toolbars</b> dialog box, select the toolbar you want to activate.</li>
</ol>
<p class=label>
<b>To deactivate a toolbar</b>
<ul type=disc>
<li>
Close the associated tool.<p class=tl>
&nbsp;–&nbsp;or&nbsp;–&nbsp;</P></li>
</ul>
<ol>
<li>
From the <b>View</b> menu, select <b>Toolbars</b>.<br><br></li>
<li>
In the <b>Toolbars</b> dialog box, clear the toolbar you want to deactivate.</li>
</ol>

<h3><a name="igcustomizing_existing_toolbars"></a>Customizing Existing Toolbars</h3>
<p>
The easiest way to create custom toolbars is by modifying the toolbars already provided with Visual FoxPro. You can:
<ul type=disc>
<li>
Modify an existing toolbar by adding or removing buttons.<br><br></li>
<li>
Create a new toolbar that contains buttons from existing toolbars.</li>
</ul>
<p>
You can also define custom toolbars by creating a custom toolbar class using code. For details, see Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a> in the <i>Programmer’s Guide</i>.</p>

<h4><a name="igmodifying_an_existing_visual_foxpro_toolbar"></a>Modifying an Existing Visual FoxPro Toolbar</h4>
<p>
You can modify any of the toolbars provided with Visual FoxPro. For example, you might want to remove a button from an existing toolbar, or copy buttons from one toolbar to another.</p>
<p class=label>
<b>To modify a Visual FoxPro toolbar</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>Toolbars</b>.<br><br></li>
<li>
Select the toolbar you want to customize and choose <b>Customize</b>.<br><br></li>
<li>
Remove buttons from the toolbar by dragging them off of the toolbar.<br><br></li>
<li>
Add buttons to the toolbar by selecting an appropriate category in the <b>Customize Toolbar</b> dialog box and then dragging the appropriate buttons onto the toolbar.<br><br></li>
<li>
Complete the toolbar by choosing <b>Close</b> in the <b>Customize Toolbar</b> dialog box and then closing the toolbar window.</li>
</ol>
<p class=indent>
<B><b>Tip</b></B> If you change a Visual FoxPro toolbar, you can restore it to its original configuration of buttons by selecting the toolbar in the Toolbar dialog box and then choosing Reset.</p>

<h4><a name="igcreating_a_new_toolbar_from_existing_toolbars"></a>Creating a New Toolbar from Existing Toolbars</h4>
<p>
You can create your own toolbars comprised of buttons from other toolbars.</p>
<p class=label>
<b>To create your own toolbar</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>Toolbars</b>.<br><br></li>
<li>
Choose <b>New</b>.<br><br></li>
<li>
In the <b>New Toolbar</b> dialog box, name the toolbar.<br><br></li>
<li>
Add buttons to the toolbar by selecting a category in the <b>Customize Toolbar</b> dialog box and then dragging the appropriate buttons onto the toolbar.<br><br></li>
<li>
You can rearrange buttons on the toolbar by dragging them to the desired position.<br><br></li>
<li>
Complete the toolbar by choosing <b>Close</b> in the <b>Customize Toolbar</b> dialog box and then closing the toolbar window.</li>
</ol>
<p class=indent>
<B><b>Note</b></B> You cannot reset buttons on a toolbar you create.</p>
<p class=label>
<b>To delete a toolbar you created</b>
<ol>
<li>
From the <b>View</b> menu, choose <b>Toolbars</b>.<br><br></li>
<li>
Select the toolbar you want to delete.<br><br></li>
<li>
Choose <b>Delete</b>.<br><br></li>
<li>
Choose <b>OK</b> to confirm the deletion.</li>
</ol>
<p class=indent>
<B><b>Note</b></B> You cannot delete toolbars provided by Visual FoxPro.</p>

<h2><a name="igsetting_editor_options"></a>Setting Editor Options</h2>
<p>
You can configure the Visual FoxPro editor to display text the way you want by setting the font and text alignment. You can also make the editor easier to use by setting your preferences for indentation, wordwrap, automatic backup copies, and other features.</p>
<p>
To configure the editor, use the Edit Properties dialog box.</p>
<p class=label>
<b>The Edit Properties dialog box</b></p>
<p>
<img src="afi03003.gif" border=0></p>
<p>
For details about editor settings, see <a href="cmdedit_properties_dialog_box.htm">Edit Properties dialog box</a>.</p>
<p class=label>
<b>To display the Edit Properties dialog box</b>
<ol>
<li>
Open an editor window in one of these ways:<ul type=disc>
<li>
In the <b>Project Manager</b>, choose a program or text file and then choose <b>New</b>.<br><br></li>
<li>
Enter <a href="lngmodify_command.htm">MODIFY COMMAND</a>, <a href="lngmodify_file.htm">MODIFY FILE</a>, or <a href="lngmodify_memo.htm">MODIFY MEMO</a> in the command window.<br><br></li>
<li>
From the <b>File</b> menu choose <b>New</b> and then select <b>Program</b> or <b>Text File</b>, or choose <b>Open</b> and choose the name of a text or program file.<br><br></li>
<li>
In the <b>Form Designer</b>, double-click a form or a control.</li>
</ul>
</li>
<li>
Right-click anywhere in the editor window to display the shortcut menu, and then choose <b>Properties</b>.</li>
</ol>
<p class=indent>
<B><b>Tip</b></B> You can display the Font dialog box directly by right-clicking the edit window and then choosing Font from the shortcut menu.</p>
<p>
By default, settings that you make in the Edit Properties dialog box apply only to the current edit window. For example, if you change the font, the font for all text in the current window is changed. If you open another edit window, or if you close the current file and then reopen it, the default settings apply.</p>
<p>
If you prefer, you can save your settings permanently, or so that they apply to all files of a similar type. If you apply options to similar file types, Visual FoxPro uses the settings you make when you edit files with the same extension (for example, all .prg files, or all method code in the Form Designer).</p>
<p class=label>
<b>To save editor options permanently</b>
<ul type=disc>
<li>
In the <b>Edit Properties</b> window, select <b>Save Preferences</b> and then click <b>OK</b>.</li>
</ul>
<p class=label>
<b>To apply editor options to similar files</b>
<ul type=disc>
<li>
In the <b>Edit Properties</b> dialog box, select <b>Use These Preferences As Default</b> and then click <b>OK</b>.</li>
</ul>
<p>
You can also set the color and font that the editor uses to identify keywords, comments, and other elements of programs. For details, see <a href="cmdsyntax_coloring_tab_options_dialog_box.htm">Syntax Coloring Tab, Options dialog box</a>.</p>

<h2><a name="igrestoring_the_visual_foxpro_environment_before_quitting"></a>Restoring the Visual FoxPro Environment</h2>
<p>
If you want to close down all operations and return Visual FoxPro to its state at startup, issue the following commands, in the following order, in the Command window or in a program called just before you quit Visual FoxPro.</p>
<pre><code>CLEAR ALL
CLOSE ALL
CLEAR PROGRAM
</code></pre>
<p>
<a href="lngclear.htm">CLEAR ALL</a> removes all objects from memory which, in turn, closes all private data sessions and cursors.</p>
<p>
<a href="lngclose.htm">CLOSE ALL</a>, after CLEAR ALL has completed successfully, closes all databases, tables, and cursors in data session 1, the default Visual FoxPro data session.</p>
<p>
<a href="lngclear.htm">CLEAR PROGRAM</a> clears the compiled program buffer of the most recently executed programs. CLEAR PROGRAM forces Visual FoxPro to read the programs from disk, rather than from the program buffer.</p>
<p>
<B><b>Cleaning Up During Transactions</b></B> If transactions are in progress, use the <a href="lngend_transaction.htm">END TRANSACTION</a> command for each level of transaction before issuing CLEAR ALL, CLOSE ALL, and CLEAR PROGRAM.</p>
<p>
<B><b>Cleaning Up During Buffered Updates</b></B> If buffered updates are in progress, use either the <a href="lngtableupdatelp_rp.htm">TABLEUPDATE(&nbsp;)</a> or <a href="lngtablerevertlp_rp.htm">TABLEREVERT(&nbsp;)</a> functions for each cursor with buffered updates before issuing CLEAR ALL, CLOSE ALL, and CLEAR PROGRAM.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Optimizing Your System</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="igoptimizing_your_system"></a><sup></sup>Chapter 4: Optimizing Your System</h1>
<p>
Visual FoxPro is designed to be the fastest relational database development system. Applications you create with Visual FoxPro can have widely varying requirements and purposes. Because of this variety, you might want to optimize the operating system, Visual FoxPro, or your application for maximum performance.</p>
<p>
This chapter describes the ways you can optimize Windows and Visual FoxPro for your own use. For more information on optimizing applications you create in Visual FoxPro, see Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer’s Guide</i>.</p>
<p>
This chapter discusses:
<ul type=disc>
<li>
<a href="#igconfiguring_the_operating_environment">Configuring the Operating Environment</a><br><br></li>
<li>
<a href="#igoptimizing_visual_foxpro_startup_speed">Optimizing Visual FoxPro Startup Speed</a><br><br></li>
<li>
<a href="#igoptimizing_visual_foxpro_in_a_multiuser_environment">Optimizing Visual FoxPro in a Multiuser Environment</a></li>
</ul>

<h2><a name="igconfiguring_the_operating_environment"></a>Configuring the Operating Environment</h2>
<p>
An effective way to optimize Visual FoxPro performance is to get the best use of your computer’s hardware and environment. This section addresses how to use memory effectively and how to get the best performance from your hard disk.</p>
<h3>Using Memory and Virtual Memory Effectively</h3>
<p>
The most effective way to optimize your system for Visual FoxPro is to provide it with as much memory as possible. Visual FoxPro can take advantage of enormous amounts of computer memory. As well as providing memory, you can optimize the performance of Visual FoxPro by closing all other running applications on your computer.</p>
<p>
To get the best use of your computer’s memory while running Visual FoxPro, follow these guidelines:
<ul type=disc>
<li>
Do not run any other Windows applications while Visual FoxPro is running.<br><br></li>
<li>
If you have less than 16MB of RAM, do not use a RAM drive. For more information, see <a href="#igmanaging_temporary_files">Managing Temporary Files</a> later in this chapter.<br><br></li>
<li>
Use only those memory-resident programs needed for operation.</li>
</ul>
<p>
To increase the number of applications that you can run simultaneously, Microsoft Windows supports virtual memory by swapping segments of code (code that is the least recently used) from RAM to the hard disk in the form of a swap file. As a rule, the default settings in the Windows operating system for managing virtual memory meet the requirements of most users; these settings are recommended.</p>
<p class=indent>
<B><b>Note</b></B> The swap file does not improve Visual FoxPro performance and is not a substitute for more RAM. If you do need a swap file, make sure you create a permanent swap file rather than a temporary swap file.</p>
<h3>Simplifying the Display</h3>
<p>
You can free memory for Visual FoxPro by simplifying the way windows and screen backgrounds are displayed.
<ul type=disc>
<li>
To free memory for running applications, use a color or a pattern for the desktop background instead of wallpaper.<br><br></li>
<li>
Use the lowest-resolution display that is practical for you; the higher resolution the display, the more memory your computer requires and the slower your graphics and user-interface elements appear. For VGA-compatible displays that use an extended mode driver, such as Video 7 or 8514, using the standard VGA driver ensures faster display performance (but lower resolution and less color support).</li>
</ul>
<h3>Managing Your Hard Drive</h3>
<p>
By managing your hard drive, you can improve overall product speed. Follow these guidelines for getting the best performance from your hard disk:
<ul type=disc>
<li>
Provide a generous amount of disk space.<p class=tl>
Disk input/output performance degrades significantly when a disk drive is nearly full. If your disk drive has little free space, you can increase Visual FoxPro performance by removing unnecessary data or by purchasing a larger capacity drive. The more free disk space available, the more likely it is that contiguous blocks of disk space are available. Visual FoxPro uses this space for changes and additions to database, table, index, memo, and temporary files. Increasing free disk space therefore improves the performance of any commands that change or add to your files. More disk space also decreases the time required to read those files in response to your queries.</P></li>
<li>
Periodically use a utility to defragment your hard drive. This process increases query and update performance by reducing disk thrashing.</li>
</ul>
<h3>Optimizing Files and Directories</h3>
<p>
The way that Windows and Visual FoxPro manage files on disk can greatly affect the performance of your application. This section explains how to:
<ul type=disc>
<li>
Manage the number of files in a directory.<br><br></li>
<li>
Manage how Visual FoxPro creates temporary files.</li>
</ul>
<h4>Managing Files in Directories</h4>
<p>
As a directory becomes increasingly congested with entries, the operating system takes longer to find files. How fast your system can search its directories is a function that is not under the control of Visual FoxPro.</p>
<p>
To correct this situation, you must reduce the number of files in your directories. To reduce the number of files in your directories and speed up file search times, try the following:
<ul type=disc>
<li>
Use the Project Manager to avoid creating numerous generated files. Segregate your program files into separate directories.<br><br></li>
<li>
When you’re ready to release your application, create an application or an executable file instead of numerous individually-generated files.<p class=tl>
This process decreases the number of files in your application’s subdirectories, thereby increasing performance.</P></li>
<li>
If you delete a large proportion of files in one directory, copy the remaining files into a new directory or optimize the directory with a defragmenting utility program.<p class=tl>
Deleting files from a directory does not immediately speed directory searching. When a file is deleted, the entry remains as a “hole” in the directory and is still included in directory searches.</P></li>
<li>
Make sure directories and subdirectories contain fewer than 200 files.</li>
</ul>

<h3><a name="igmanaging_temporary_files"></a>Managing Temporary Files</h3>
<p>
Visual FoxPro creates temporary files for a variety of activities. For example, Visual FoxPro creates temporary files during editing, indexing, and sorting. Text editor sessions can also create a complete temporary copy of the file being edited.</p>
<p>
By default, Visual FoxPro creates its temporary files in the same directory that Windows stores its temporary files, unless you specifically designate an alternate location. Specify an alternate location by including one or more of the EDITWORK, SORTWORK, PROGWORK, and TMPFILES statements in the Config.fpw file.</p>
<p class=label>
<b>To specify the location of temporary files</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b> and then choose the <b>File Locations</b> tab.<br><br></li>
<li>
Enter a location for temporary files.</li>
</ol>
<p>
In most cases, you should specify one location for all Visual FoxPro temporary files. However, always make sure that the location you specify has enough space for all possible temporary files.</p>
<p>
The directory of temporary files should contain as few files as possible. A low number of files reduces the amount of time Visual FoxPro waits for Windows to return file handles.</p>
<p>
If you have a large amount of RAM (more than 16MB), you can consider using some it for a RAM drive and locating temporary files on it. However, in general, the more RAM is available, the better Visual FoxPro (and other Windows applications) run, and reserving RAM for a RAM disk can affect performance adversely. If you do want to try using a RAM disk for temporary files, you should probably not specify the RAM disk in the location for the SORTWORK statement, because temporary files created during sorting can be extremely large.</p>
<p>
For more information on temporary files, see <a href="#igoptimizing_visual_foxpro_in_a_multiuser_environment">Optimizing Visual FoxPro in a Multiuser Environment</a> later in this chapter.</p>

<h2><a name="igoptimizing_visual_foxpro_startup_speed"></a>Optimizing Visual FoxPro Startup Speed</h2>
<p>
Though Visual FoxPro is always fast, you can optimize the startup and operating speed. This section describes enhancing Visual FoxPro performance by managing startup speed and optimizing SET commands.</p>
<h3>Managing Startup Speed</h3>
<p>
The time required to load and start Visual FoxPro relates to the physical size of Visual FoxPro, the length of the PATH statement in effect, the number of items to be found at startup, and other factors. You can control the load size, the search path, component file locations, and the startup SET command values of Visual FoxPro.</p>
<h4>Managing File Locations</h4>
<p>
Visual FoxPro seeks Foxuser.dbf and Config.fpw in the following places:
<ol>
<li>
In the startup application or executable file, if any.<p class=tl>
For instance, you might start a Visual FoxPro application by using a command line such as the following:</P><pre><code>VFP MYAPP.APP
</code></pre>
<p class=tl>
&nbsp;–&nbsp;Or&nbsp;–</P><pre><code>VFP MYAPP.EXE
</code></pre>
<p class=tl>
If the startup application or executable file contains a Config.fpw file, it is always used and cannot be overridden.</P></li>
<li>
In the working directory.<br><br></li>
<li>
In the directory containing Visual FoxPro.<br><br></li>
<li>
Along the path established with the PATH environment variable.</li>
</ol>
<h4>Controlling File Loading</h4>
<p>
You can also speed startup by preventing Visual FoxPro from loading files you don’t plan to use. If your application does not use the FOXUSER or FOXHELP file, disable them in the Config.fpw file by using the following commands:</p>
<pre><code>RESOURCE = OFF
HELP = OFF
</code></pre>
<p>
Visual FoxPro seeks all other Visual FoxPro components (GENXTAB, CONVERT, and so on) only in the Visual FoxPro directory. If you place components elsewhere, you must explicitly identify the path to those components in your Config.fpw file. For example, you might specify these locations:</p>
<pre><code>_TRANSPORT = c:\migrate\transport.prg
_GENXTAB = c:\crosstab\genxtab.prg
_CONVERT = c:\fp2vfp\convert.app
</code></pre>
<p>
You can use the environment variable FOXPROWCFG to explicitly specify the location of Config.fpw. For details about the FOXPROWCFG variable, see Chapter 3, <a href="igconfiguring_visual_foxpro.htm">Configuring Visual FoxPro</a>.</p>
<h3>Optimizing the Load Size of Visual FoxPro</h3>
<p>
If you don’t plan on using any of the Visual FoxPro components listed previously, set them to an empty string to speed startup.</p>
<p class=label>
<b>To optimize the load size of Visual FoxPro</b>
<ul type=disc>
<li>
Use the following syntax:<p class=tl>
<i>cFileVariable</i> <b>=</b> ""</P></li>
</ul>
<p>
Replace <i>cFileVariable</i> with _TRANSPORT, _CONVERT, or other variables as appropriate.</p>
<h3>Optimizing Key SET Commands</h3>
<p>
You can optimize the operation of Visual FoxPro by tuning the values of certain SET commands.</p>
<p>
The following table shows SET commands that have the greatest effect on performance, and their settings for maximum performance. You can specify SET command values by including them in the Config.fpw file, by typing them in the Command window, or by setting them in the Options dialog box.</p>
<p class=label>
<b>Command Settings for Maximum Performance</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=47%><b>SET Command</b></td>
<td class=label width=53%><b>Performance Setting</b></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngset_escape.htm">SET ESCAPE</a></td>
<td width=53%>ON</td>
</tr>
<tr valign=top>
<td width=47%><a href="lngset_optimize.htm">SET OPTIMIZE</a></td>
<td width=53%>ON</td>
</tr>
<tr valign=top>
<td width=47%><a href="lngset_refresh.htm">SET REFRESH</a></td>
<td width=53%>0,0</td>
</tr>
<tr valign=top>
<td width=47%><a href="lngset_sysmenu.htm">SET SYSMENU</a></td>
<td width=53%>DEFAULT</td>
</tr>
<tr valign=top>
<td width=47%><a href="lngset_talk.htm">SET TALK</a></td>
<td width=53%>OFF</td>
</tr>
<tr valign=top>
<td width=47%><a href="lngset_view.htm">SET VIEW</a></td>
<td width=53%>OFF</td>
</tr>
</table><br>

<h2><a name="igoptimizing_visual_foxpro_in_a_multiuser_environment"></a>Optimizing Visual FoxPro in a Multiuser Environment</h2>
<p>
When you run Visual FoxPro in a multiuser environment, you can improve performance by handling temporary files effectively and by controlling the way files are shared.</p>
<h3>Managing Temporary Files in a Multiuser Environment</h3>
<p>
In most multiuser environments, you should place temporary files on the local drive. How you manage the files depends on the amount of disk space and RAM on the networked computers that run your application.</p>
<p>
If networked computers have sizable hard drives with plenty of free space, you can improve performance in a multiuser environment by placing Visual FoxPro temporary work files on local drives. Redirecting a file to a local drive provides additional speed by reducing the need to access the network drive and, therefore, reducing the amount of network traffic.</p>
<p>
On small networks, with older networked computers and slow hard drives, you might experience better performance by leaving Visual FoxPro temporary files on the file server. When in doubt, direct temporary files to the local hard drive. When working on large, heavily used networks, always redirect temporary files to the local hard drive.</p>
<p>
For example, to redirect all temporary files to a directory called WORK on drive C:, include the following lines in your Config.fpw file:</p>
<pre><code>TMPFILES=c:\work
EDITWORK=c:\work
SORTWORK=c:\work
PROGWORK=c:\work
</code></pre>
<p>
The SORTWORK directory must be large enough to hold the temporary files that Visual FoxPro generates during sorting and indexing activities. When Visual FoxPro handles large tables, these temporary files can be very large.</p>
<p>
By placing all your temporary files in a single directory on a local drive, you can safely erase the contents of the temporary file directory before each Visual FoxPro session. This will purge your system of any temporary files that were created but not erased by Visual FoxPro due to a system reboot or power loss.</p>
<h3>Sharing Tables in a Multiuser Environment</h3>
<p>
If users are sharing tables on a network, the way you manage access to files through file and record locks can affect performance. You can enhance performance by using the EXCLUSIVE clause of the USE and OPEN commands.</p>
<p>
With sharing enabled and EXCLUSIVE set to OFF, tables on a shared drive are opened for multiuser access. In this situation, the following command opens CUSTOMER.DBF in shared mode:</p>
<pre><code>USE c:\customer.dbf 
</code></pre>
<p>
Visual FoxPro can buffer write operations to non-shared files, thereby increasing performance. To increase performance of APPEND, REPLACE, and DELETE commands, be sure to open local tables or databases using the EXCLUSIVE clause of the USE or OPEN commands, as in the following example:</p>
<pre><code>OPEN DATABASE mycompany EXCLUSIVE
USE c:\customer.dbf EXCLUSIVE
</code></pre>
<p>
Avoid opening and closing tables repeatedly.</p>
<p>
For more information on accessing files in a shared environment, see Chapter 17, <a href="dgprogramming_for_shared_access.htm">Programming for Shared Access</a>, in the <i>Programmer’s Guide</i>.</p>
</BODY>
</HTML>

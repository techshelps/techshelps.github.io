<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fpole.dll</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="ovrfpole"></a><sup></sup>Fpole.dll</h1>
<p>
<a href="#fpolefpoleexamples">Examples</a></p>
<p>
With Fpole.dll, you can run Visual FoxPro commands and evaluate Visual FoxPro expressions from applications that allow API calls but do not support Automation.</p>
<p>
Fpole.dll contains six the following functions.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>To</b></td>
<td class=label width=50%><b>See</b></td>
</tr>
<tr valign=top>
<td width=50%>Run a Visual FoxPro command.</td>
<td width=50%><a href="#fpolefoxdocmd">FoxDoCmd( )</a></td>
</tr>
<tr valign=top>
<td width=50%>Evaluate a Visual FoxPro expression</td>
<td width=50%><a href="#fpolefoxeval">FoxEval( )</a></td>
</tr>
<tr valign=top>
<td width=50%>Specify whether error messages are displayed in message boxes.</td>
<td width=50%><a href="#fpoleseterrmode">SetErrMode( )</a></td>
</tr>
<tr valign=top>
<td width=50%>Specify the OLE class that FoxDoCmd(&nbsp;) and FoxEval(&nbsp;) create.</td>
<td width=50%><a href="#fpolesetoleobject">SetOleObject( )</a></td>
</tr>
<tr valign=top>
<td width=50%>Close the OLE object created when you use FoxDoCmd(&nbsp;) or FoxEval(&nbsp;).</td>
<td width=50%><a href="#fpolecloseit">CloseIt( )</a></td>
</tr>
<tr valign=top>
<td width=50%>Retrieve the last error that occurred.</td>
<td width=50%><a href="#fpolegetlasterr">GetLastErr( )</a></td>
</tr>
</table><br>

<h2><a name="fpolefoxdocmd"></a>FoxDoCmd(&nbsp;) Function</h2>
<p>
Runs a Visual FoxPro command from an application that allows API calls. </p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>nSuccess</i> = FoxDoCmd(<i>cFoxCommand</i>, <i>cOptions</i>)</p>
<p class=label>
<b>Returns</b></p>
<p>
Integer</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>cFoxCommand</i></p>
<p class=indent>
Specifies the Visual FoxPro command to run.</p>
<p class=dt>
<i>cOptions</i></p>
<p class=indent>
One or more of the following.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Setting</b></td>
<td class=label width=84%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=84%>(Blank) Runs the specified command without activating the main Visual FoxPro window.</td>
</tr>
<tr valign=top>
<td width=16%>a</td>
<td width=84%>Activates the main Visual FoxPro window and runs the specified command.</td>
</tr>
<tr valign=top>
<td width=16%>i</td>
<td width=84%>If Visual FoxPro is not running, activates Visual FoxPro without making the Visual FoxPro window visible.</td>
</tr>
<tr valign=top>
<td width=16%>t</td>
<td width=84%>If another program is already running in Visual FoxPro, displays an error message rather than executing <i>cFoxCommand</i>.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
Returns 0 if the Visual FoxPro command is successfully executed; -1 otherwise.</p>
<p>
If Visual FoxPro is already running, FoxDoCmd(&nbsp;) sends the command to Visual FoxPro. If Visual FoxPro is not already running, FoxDoCmd(&nbsp;) runs Visual FoxPro and sends the command.</p>
<p class=label>
<b>Example</b></p>
<pre><code>*In Visual FoxPro
DECLARE integer FoxDoCmd in "FPOLE.DLL" string,string
=FoxDoCmd("SELECT * FROM customer","at")
</code></pre>

<h2><a name="fpolefoxeval"></a>FoxEval(&nbsp;) Function</h2>
<p>
Evaluates a Visual FoxPro expression from an application that allows .dll calls.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>nExprLen</i> = FoxEval(<i>cExpression, cBuffer, nLen</i>)</p>
<p class=label>
<b>Returns</b></p>
<p>
Integer</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>cExpression</i></p>
<p class=indent>
The Visual FoxPro expression to evaluate.</p>
<p class=dt>
<i>cBuffer</i></p>
<p class=indent>
Where to store the value of the Visual FoxPro expression.</p>
<p class=dt>
<i>nLen</i></p>
<p class=indent>
The length of <i>cBuffer</i>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Returns the length of the string stored in <i>cBuffer</i> if successful; -1 otherwise.</p>
<p>
You need to pass the <i>cBuffer</i> argument by reference rather than by value for Visual FoxPro to be able to store a value in the buffer. In Visual FoxPro, for example, declare the function with @ after the second string. Arguments are passed by reference by default in Word Basic.</p>
<p>
Because there is no way to create and read a buffer in a Help file macro, this function is not useful as a registered routine in Help.</p>
<p class=label>
<b>Example</b></p>
<pre><code>*In Visual FoxPro
DECLARE integer FoxEval in (MYDLL) ;
   string, string @, integer 
cBuff = SPACE(100)
=FoxEval("TTOC(DATETIME())", @cBuff, 100)
?cBuff
</code></pre>

<h2><a name="fpoleseterrmode"></a>SetErrMode(&nbsp;) Function</h2>
<p>
Specifies whether or not error messages from Fpole.dll are displayed in message boxes.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>nSuccess</i> = SetErrMode(<i>nErrMode</i>)</p>
<p class=label>
<b>Returns</b></p>
<p>
Integer</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>nErrMode</i></p>
<p class=indent>
One of the following.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Setting</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%>0</td>
<td width=73%>Error messages are not displayed in message boxes.</td>
</tr>
<tr valign=top>
<td width=27%>1</td>
<td width=73%>(Default) Error messages are displayed in message boxes.</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
Returns 0 if the mode was successfully set; -1 otherwise.</p>

<h2><a name="fpolesetoleobject"></a>SetOLEObject(&nbsp;) Function</h2>
<p>
Specifies the OLE class that calls to FoxDoCmd(&nbsp;) and FoxEval(&nbsp;) create.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>nSuccess</i> = SetOleObject(<i>cOLEClass</i>)</p>
<p class=label>
<b>Returns</b></p>
<p>
Integer</p>
<p class=label>
<b>Remarks</b></p>
<p>
Returns 0 if the class was specified successfully; -1 otherwise.</p>
<p>
Specify your application in SetOLEObject(&nbsp;) to allow Automation from applications that don’t natively support Automation.</p>
<p class=label>
<b>Example</b></p>
<pre><code>DECLARE integer SetOLEObject in (MYDLL) string 
=SetOleObject("visualfoxpro.application")
</code></pre>

<h2><a name="fpolecloseit"></a>CloseIt(&nbsp;) Function</h2>
<p>
Closes the OLE object created when you use FoxDoCmd(&nbsp;) or FoxEval(&nbsp;).</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>nSuccess</i> = CloseIt(&nbsp;)</p>
<p class=label>
<b>Returns</b></p>
<p>
Integer</p>
<p class=label>
<b>Remarks</b></p>
<p>
Returns 0 if the object was removed successfully; -1 otherwise.</p>

<h2><a name="fpolegetlasterr"></a>GetLastErr(&nbsp;) Function</h2>
<p>
Retrieves the last error that occurred.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>nErrLen</i> = GetLastErr(<i>cBuffer, nLen</i>)</p>
<p class=label>
<b>Returns</b></p>
<p>
Integer</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>cBuffer</i></p>
<p class=indent>
Where to store the error message.</p>
<p class=dt>
<i>nLen</i></p>
<p class=indent>
The length of <i>cBuffer</i>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Returns the length of the string stored in <i>cBuffer</i> if successful; -1 otherwise.</p>
<p>
You need to pass the <i>cBuffer</i> argument by reference rather than by value for Visual FoxPro to be able to store a value in the buffer. In Visual FoxPro, for example, declare the function with @ after the second string. Arguments are passed by reference by default in Word Basic.</p>
<p>
Because there is no way to create and read a buffer in a Help file macro, this function is not useful as a registered routine in Help.</p>

<h2><a name="fpolefpoleexamples"></a>Fpole.dll Examples</h2>
<p>
The following examples demonstrate using functions in Fpole.dll from Visual FoxPro, a Help file, and Word Basic.</p>
<h4>Visual FoxPro Example</h4>
<pre><code>MYDLL = "C:\Program Files\Microsoft Visual Studio\Vfp98\Fpole.dll

DECLARE integer SetOleObject in (MYDLL) string 
DECLARE integer FoxDoCmd in (MYDLL) string,string 
DECLARE integer FoxEval in (MYDLL) ;
   string, string @,integer 

=SetOleObject("visualfoxpro.application") 
?FoxDoCmd("wait wind 'test' timeout 2","") 
?FoxDoCmd("modi proj xx2 nowait ","") 
?FoxDoCmd("close all","") 

clear dlls 
</code></pre>
<h4>Help File Example</h4>
<ol>
<li>
In the [CONFIG] section of a help project, register the DLL:<pre><code>RegisterRoutine("fpole.dll","FoxDoCmd","SS")
</code></pre>
</li>
<li>
In your .RTF file, call the function the same way you would call a native Help macro:<pre><code>HotSpotText!FoxDoCmd("DO (HOME() + 'myprg')","at")
</code></pre>
</li>
<li>
Compile and run the help file.</li>
</ol>
<h4>Simple Word Basic Example</h4>
<pre><code>Declare Sub FoxDoCmd Lib "C:\Program Files\Microsoft Visual Studio\Vfp98\Fpole.dll" (cCommand As String, cOptions As String) 

Sub MAIN 
FoxDoCmd "USE (HOME(2) + 'Data\Customer')", "i" 
FoxDoCmd "_CLIPTEXT = customer.company", "i" 
EditPaste 
End Sub 
</code></pre>
<h4>Another Word Basic Example</h4>
<p>
This example presents a dialog box so that a user can choose a customer ID from a list. The associated company name and contact are then inserted into the Word document.</p>
<pre><code>'Declare the Fpole.dll functions.
'--------------------------------
Declare Sub SetOleObject Lib "C:\Program Files\Microsoft Visual Studio\Vfp98\Fpole.dll(cApp As String)

Declare Sub FoxDoCmd Lib "C:\Program Files\Microsoft Visual Studio\Vfp98\Fpole.dll(cCommand As String, BringToFront As String)

Declare Sub FoxEval Lib "C:\Program Files\Microsoft Visual Studio\Vfp98\Fpole.dll(cExpression As String, cBuff As String, nLen As Integer)

Declare Sub CloseIt Lib "C:\Program Files\Microsoft Visual Studio\Vfp98\Fpole.dll

Sub MAIN

Dim cBuffer$
cBuffer$ = String$(50, " ")
Dim aCustID$(5)
aCustID$(0) = "BLONP"
aCustID$(1) = "CHOPS"
aCustID$(2) = "ISLAT"
aCustID$(3) = "LETSS"
aCustID$(4) = "SEVES"
cboCustID = 0'1st element in the array

Begin Dialog UserDialog 404, 150, "Calling Visual FoxPro with Fpole.dll"
   DropListBox 44, 33, 160, 108, aCustID$(), .cboCustID
   Text 15, 14, 268, 13, "Choose a Customer ID from the list.", .Text2
   Text 15, 61, 231, 13, "Then Choose OK to insert the ", .Text4
   Text 15, 78, 215, 13, "Company Name and Contact", .Text5
   Text 15, 95, 141, 13, "into your document.", .Text6
   OKButton 298, 76, 88, 21
   CancelButton 299, 111, 88, 21
End Dialog

Dim dlg As UserDialog
nButtonChoice = Dialog(dlg)

' If the user presses "Cancel"...
'--------------------------------
If nButtonChoice = 0 Then
   Goto EndOfSub
End If

' Automate Visual FoxPro
'-----------------------
Print "Opening Visual FoxPro"
SetOleObject "visualfoxpro.application"
FoxDoCmd "USE (HOME(2) + 'Data\Customer')", "i"
FoxDoCmd "LOCATE FOR cust_id = " + Chr$(39) + aCustID$(dlg.cboCustID) + Chr$(39), "i"

Insert "Customer ID" + Chr$(9)
FoxEval "cust_id", cBuffer$, 50
Insert RTrim$(cBuffer$)
InsertPara

Insert "Company:" + Chr$(9)
FoxEval "company", cBuffer$, 50
Insert RTrim$(cBuffer$)
InsertPara

FoxEval "contact", cBuffer$, 50
Insert "Contact: " + Chr$(9) + RTrim$(cBuffer$)
InsertPara

Print "Closing Visual FoxPro"
CloseIt
Print " "

EndOfSub:
End Sub
</code></pre>
</BODY>
</HTML>

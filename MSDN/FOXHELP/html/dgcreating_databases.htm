<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Databases</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgcreating_databases"></a><sup></sup>Chapter 6: Creating Databases</h1>
<p>
After you’ve designed your <a href="glsdatabase.htm">database</a>, you can build the database through the interface or with the language. You might want to add existing <a href="glstable.htm">tables</a> to your database, and then modify them to take advantage of the <a href="glsdata_dictionary.htm">data dictionary</a> features in Visual FoxPro. If you are working within a project in the <a href="wndproject_manager.htm">Project Manager</a>, you can add the tables as you create them.</p>
<p>
For more information about creating a database for a multiple-user environment, see Chapter 17, <a href="dgprogramming_for_shared_access.htm">Programming for Shared Access</a>.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dgcreating_a_database">Creating a Database</a></li>
<li>
<a href="#dgviewing_and_modifying_database_architecture">Viewing and Modifying Database Architecture</a></li>
<li>
<a href="#dgmanaging_a_database">Managing a Database</a></li>
<li>
<a href="#dgreferencing_multiple_databases">Referencing Multiple Databases</a></li>
<li>
<a href="#dghandling_database_errors">Handling Database Errors</a></li>
</ul>

<h2><a name="dgcreating_a_database"></a>Creating a Database</h2>
<p>
When you create a <a href="glsdatabase.htm">database</a>, you gather <a href="glstable.htm">tables</a> together into one collection and gain the benefit of <a href="glsdata_dictionary.htm">data dictionary</a> features.</p>
<p>
A data dictionary gives you greater flexibility in designing and modifying the database, and frees you from having to write code to create field-level and row-level <a href="glsvalidation.htm">validation</a> or to ensure the uniqueness of values within primary key fields. The Visual FoxPro data dictionary enables you to create or specify:</p>
<ul type=disc>
<li>
<a href="glsprimary_key.htm">Primary</a> and candidate keys.</li>
<li>
<a href="glspersistent_relationship.htm">Persistent relationships</a> between database tables.</li>
<li>
<a href="glslong_names.htm">Long names</a> for tables and fields.</li>
<li>
<a href="glscaption.htm">Captions</a> on fields that display in <a href="wndbrowse_window.htm">Browse</a> windows and Grid columns as headers.</li>
<li>
Default values on fields.</li>
<li>
The default <a href="glscontrol_classes.htm">control class</a> used in <a href="glsform.htm">forms</a>.</li>
<li>
<a href="glsinput_mask.htm">Input masks</a> and display formats for fields.</li>
<li>
<a href="glsfield_level_rule.htm">Field-level</a> rules and <a href="glsrecord_level_rule.htm">record-level</a> rules.</li>
<li>
<a href="glstrigger.htm">Triggers</a>.</li>
<li>
<a href="glsstored_procedure.htm">Stored procedures</a>.</li>
<li>
<a href="glsconnection.htm">Connections</a> to remote data sources.</li>
<li>
<a href="glslocal_view.htm">Local</a> and <a href="glsremote_view.htm">remote</a> views.</li>
<li>
Comments for each <a href="glsfield.htm">field</a>, <a href="glstable.htm">table</a>, and <a href="glsdatabase.htm">database</a>.</li>
</ul>
<p>
Some data dictionary features, such as long field names, primary and candidate keys, default values, field-level and record-level rules, and triggers, are stored in the .dbc file but are created as part of the process of building a table or view. For information about these features, see Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, and Chapter 8, <a href="dgcreating_views.htm">Creating Views</a>.</p>
<h3>Collecting Tables into a Database</h3>
<p>
To collect tables into a database, you need to create a database container to hold all of the <a href="glsobject.htm">objects</a> such as <a href="glsview.htm">views</a>, <a href="glsconnection.htm">connections</a>, and <a href="glsstored_procedure.htm">stored procedures</a> associated with the tables that make up your database.</p>
<p class=label>
<b>To create a new database</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the <b>Data</b> tab, then select <b>Databases</b> from the list and choose <b>New</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_database.htm">CREATE DATABASE</a> command.</li>
</ul>
<p>
For example, the following code creates and exclusively opens a new database called <code>Sample</code>:</p>
<pre><code>CREATE DATABASE Sample
</code></pre>
<p>
When you create a new database, it is empty, containing no associated tables or other objects. Adding a table creates links between the table file and the database container. The link information stored in the database about a table is a forward link. The link information stored in the table about the database container is the backlink.</p>
<p class=label>
<b>Links specify the associations between a database container and tables.</b></p>
<p>
<img src="afd06002.gif" border=0></p>
<p>
You can use the following <a href="glscommand.htm">commands</a> and <a href="glsfunction.htm">functions</a> to work with a database and its objects programmatically.</p>
<p class=label>
<b>Commands and functions that manipulate databases and database objects</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=31%><a href="lngadatabaseslp_rp.htm">ADATABASES(&nbsp;)</a></td>
<td width=34%><a href="lngcreate_view.htm">CREATE VIEW</a></td>
<td width=35%><a href="lngmodify_connection.htm">MODIFY CONNECTION</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngadbobjectslp_rp.htm">ADBOBJECTS(&nbsp;)</a></td>
<td width=34%><a href="lngdbclp_rp.htm">DBC(&nbsp;)</a></td>
<td width=35%><a href="lngmodify_database.htm">MODIFY DATABASE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngadd_table.htm">ADD TABLE</a></td>
<td width=34%><a href="lngdbgetproplp_rp.htm">DBGETPROP(&nbsp;)</a></td>
<td width=35%><a href="lngmodify_procedure.htm">MODIFY PROCEDURE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngalter_table___sql.htm">ALTER TABLE</a></td>
<td width=34%><a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a></td>
<td width=35%><a href="lngmodify_structure.htm">MODIFY STRUCTURE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngappend_procedures.htm">APPEND PROCEDURES</a></td>
<td width=34%><a href="lngdelete_connection.htm">DELETE CONNECTION</a></td>
<td width=35%><a href="lngmodify_view.htm">MODIFY VIEW</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngclose.htm">CLOSE DATABASE</a> </td>
<td width=34%><a href="lngdelete_database.htm">DELETE DATABASE</a></td>
<td width=35%><a href="lngopen_database.htm">OPEN DATABASE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngcopy_procedures.htm">COPY PROCEDURES</a></td>
<td width=34%><a href="lngdelete_view.htm">DELETE VIEW</a></td>
<td width=35%><a href="lngpack_database.htm">PACK DATABASE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngcreate_connection.htm">CREATE CONNECTION</a></td>
<td width=34%><a href="lngdisplay_database.htm">DISPLAY DATABASE</a></td>
<td width=35%><a href="lngrename_table.htm">RENAME TABLE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngcreate_database.htm">CREATE DATABASE</a></td>
<td width=34%><a href="lngdrop_table.htm">DROP TABLE</a></td>
<td width=35%><a href="lngremove_table.htm">REMOVE TABLE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngcreate_sql_view.htm">CREATE SQL VIEW</a></td>
<td width=34%><a href="lngindbclp_rp.htm">INDBC(&nbsp;)</a></td>
<td width=35%><a href="lngset_database.htm">SET DATABASE</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngcreate_table___sql.htm">CREATE TABLE</a></td>
<td width=34%><a href="lnglist_database.htm">LIST DATABASE</a></td>
<td width=35%><a href="lngvalidate_database.htm">VALIDATE DATABASE</a></td>
</tr>
</table><br>
<h3>Adding Tables to a Database</h3>
<p>
Each Visual FoxPro table can exist in one of two states: either as a <a href="glsfree_table.htm">free table</a>, which is a .dbf file that is not associated with any database, or as a <a href="glsdatabase_table.htm">database table</a>, which is a .dbf file that is associated with a database. Tables associated with a database can have <a href="glsproperty.htm">properties</a> that tables outside a database do not have, such as <a href="glsfield_level_rule.htm">field-level</a> and <a href="glsrecord_level_rule.htm">record-level</a> rules, <a href="glstrigger.htm">triggers</a>, and <a href="glspersistent_relationship.htm">persistent relationships</a>.</p>
<p>
You associate tables with a database by creating them within an open database, or by adding existing tables to a database. For information about creating new tables, see Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>.</p>
<p class=label>
<b>To add a free table to a database</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select <b>Tables</b> from the <b>All</b> tab or the <b>Data</b> tab, then choose <b>Add</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngadd_table.htm">ADD TABLE</a> command.</li>
</ul>
<p>
For example, the following code opens the <code>testdata</code> database and adds the <code>orditems</code> table:</p>
<pre><code>OPEN DATABASE testdata
ADD TABLE orditems
</code></pre>
<p>
You must explicitly add an existing free table to a database to make it a part of a database. Modifying the structure of a free table does not cause Visual FoxPro to add the free table to a database, even if a database is open when you issue the <a href="lngmodify_structure.htm">MODIFY STRUCTURE</a> command.</p>
<h4>Using Free Tables</h4>
<p>
You can associate a given table with only one database. However, you can use the data in an existing .dbf file without incorporating it into your database.</p>
<p class=label>
<b>To access a table in another database</b>
<ul type=disc>
<li>
Create a <a href="glsview.htm">view</a> in your database that references the table.<p class=tl>
-or-</P></li>
<li>
Access the table with the <a href="lnguse.htm">USE</a> command and the “!” symbol.</li>
</ul>
<p>
Use the “!” symbol to refer to a table in a database other than the current database. For example, if you want to browse the <code>orditems</code> table in the <code>testdata</code> database, you can type:</p>
<pre><code>USE testdata!orditems
BROWSE
</code></pre>
<p>
In the previous example, the <code>testdata</code> database is opened automatically for you when you issue the USE command, but Visual FoxPro does not set <code>testdata</code> as the current database. A database opened automatically, as in the previous example, is automatically closed when the table is closed, unless you open the database explicitly before closing the table.</p>
<p>
For information about using a view to access information outside your database, see Chapter 8, <a href="dgcreating_views.htm">Creating Views</a>.</p>
<h4>Removing a Table from a Database</h4>
<p>
When you add a table to a database, Visual FoxPro modifies the table file’s header record to document the path and file name for the database that now owns the table. This path and file name information is called a <a href="glsbacklink.htm">backlink</a>, because it links the table back to the owning database. The process of removing a table from a database not only removes the table and associated <a href="glsdata_dictionary.htm">data dictionary</a> information from the database file, but also updates the backlink information to reflect the table’s new status as a <a href="glsfree_table.htm">free table</a>.</p>
<p>
You can remove a table from a database through the interface or with the <a href="lngremove_table.htm">REMOVE TABLE</a> command. As you remove the table from the database, you can also choose to physically delete the table file from the disk.</p>
<p class=label>
<b>To remove a table from a database</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the table name, then choose <b>Remove</b>.<p class=tl>
-or-</P></li>
<li>
From the <a href="wnddatabase_designer.htm">Database Designer</a>, select the table and choose <b>Remove</b> from the <b>Database</b> menu.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngremove_table.htm">REMOVE TABLE</a> command.</li>
</ul>
<p>
For example, the following code opens the <code>testdata</code> database and removes the <code>orditems</code> table:</p>
<pre><code>OPEN DATABASE testdata
REMOVE TABLE orditems
</code></pre>
<p>
Removing a table from a database does not automatically delete the table file. If you want to both remove the table from the database and delete the table’s .dbf file from the disk, use the DELETE clause of the REMOVE TABLE command or the <a href="lngdrop_table.htm">DROP TABLE</a> command. For example, the following code opens the <code>testdata</code> database and deletes the <code>orditems</code> table from disk:</p>
<pre><code>OPEN DATABASE testdata
REMOVE TABLE orditems DELETE
</code></pre>
<p>
The following code also opens the <code>testdata</code> database, then deletes the <code>orditems</code> table without moving a copy to the Windows Recycle bin:</p>
<pre><code>OPEN DATABASE testdata
DROP TABLE orditems NORECYCLE
</code></pre>
<h4>Updating Table and Database Links</h4>
<p>
If you move database files (.dbc, .dct, and .dcx), or a table associated with a database, the relative paths change and might break the backlinks and forward links that Visual FoxPro uses to associate database and table files:</p>
<ul type=disc>
<li>
The <a href="glsbacklink.htm">backlink</a> links the table back to the table’s owning database. It consists of the relative path and file name for the .dbc file associated with the table, and is stored in the header of the Visual FoxPro table file (.dbf).</li>
<li>
The <a href="glsforward_link.htm">forward link</a> tells the database which tables belong to it. Forward links are stored in the database file (.dbc), and consist of the relative path and file name for each associated table file.</li>
</ul>
<p>
You can reestablish links and update the relative path information to reflect the new file location.</p>
<p class=label>
<b>To update links after moving a table or a database</b>
<ul type=disc>
<li>
Use the RECOVER clause of the <a href="lngvalidate_database.htm">VALIDATE DATABASE</a> command.</li>
</ul>
<p>
For example, the following code opens the <code>testdata</code> database and displays dialog boxes that allow you to locate tables that are not in the locations contained in the database:</p>
<pre><code>OPEN DATABASE testdata
VALIDATE DATABASE RECOVER
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you want to use a table without taking time to reestablish the links for all tables in the database, you can open the table with the <a href="lnguse.htm">USE</a> command. Visual FoxPro displays the <a href="cmdopen_dialog_box.htm">Open dialog box</a> to allow you to locate the owning database or delete the links.</p>
<p>
For information on removing the backlink from a table whose owning database has been deleted accidentally from disk, see <a href="lngfree_table.htm">FREE TABLE</a>.</p>
<h3>Creating Persistent Relationships</h3>
<p>
You can create <a href="glspersistent_relationship.htm">persistent relationships</a> between <a href="glstable.htm">tables</a> in a <a href="glsdatabase.htm">database</a>. Persistent relationships are relationships between database tables that are stored in the database file and are:</p>
<ul type=disc>
<li>
Automatically used as default join conditions in the <a href="wndquery_designer.htm">Query and View Designers</a>.</li>
<li>
Displayed in the <a href="wnddatabase_designer.htm">Database Designer</a> as lines relating table <a href="glsindex.htm">indexes</a>.</li>
<li>
Displayed in the <a href="wnddata_environment_designer.htm">Data Environment Designer</a> as default relationships for forms and reports.</li>
<li>
Used to store <a href="glsreferential_integrity.htm">referential integrity</a> information.</li>
</ul>
<p>
Unlike <a href="glstemporary_relationship.htm">temporary</a> relationships created with the <a href="lngset_relation.htm">SET RELATION</a> command, <a href="glspersistent_relationship.htm">persistent</a> relationships do not need to be re-created each time you use tables. However, because persistent relationships do not control the relationship between record pointers in tables, you will use both temporary SET RELATION relationships and persistent relationships when developing Visual FoxPro applications.</p>
<p>
In Visual FoxPro, you use <a href="glsindex.htm">indexes</a> to establish persistent relationships between tables in a database. You create a persistent relationship between indexes rather than between fields, which enables you to relate tables based on a simple or a complex index expression.</p>
<p class=label>
<b>To create a persistent relationship between tables</b>
<ul type=disc>
<li>
In the <a href="wnddatabase_designer.htm">Database Designer</a>, choose the index name you want to relate, then drag it to the index name of the related table.<p class=tl>
-or-</P></li>
<li>
Use the FOREIGN KEY clause with the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> or <a href="lngalter_table___sql.htm">ALTER TABLE</a> commands.</li>
</ul>
<p>
For example, the following command adds a <a href="glsone_to_many_relationship.htm">one-to-many</a> persistent relationship between the <code>customer</code> and <code>orders</code> table, based on the <a href="glsprimary_key.htm">primary</a> <code>cust_id</code> key in the <code>customer</code> table, and a new <a href="glsforeign_key.htm">foreign key</a>, <code>cust_id</code>, in the <code>orders</code> table:</p>
<pre><code>ALTER TABLE orders;
 &nbsp; ADD FOREIGN KEY cust_id TAG ;
 &nbsp;&nbsp;&nbsp;&nbsp; cust_id REFERENCES customer
</code></pre>
<p>
If you were to then examine the database schema in the Database Designer, you would see a line joining <code>orders</code> and <code>customer</code>, representing the new persistent relationship.</p>
<p class=label>
<b>Indexes provide the basis for persistent relationships</b></p>
<p>
<img src="afd06003.gif" border=0></p>
<p>
The type of index tag or key determines the type of <a href="glspersistent_relationship.htm">persistent relationship</a> you can create. You must use a <a href="glsprimary_index.htm">primary</a> or <a href="glscandidate_index.htm">candidate</a> index tag or key for the “one” side of a <a href="glsone_to_many_relationship.htm">one-to-many relationship</a>; for the “many” side, you must use a <a href="glsregular_index.htm">regular</a> index tag or key. For more information on index types and creating indexes, see Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>.</p>
<p class=label>
<b>To delete a persistent relationship between tables</b>
<ol>
<li>
In the <a href="wnddatabase_designer.htm">Database Designer</a>, click the relationship line between the two tables.<p class=tl>
The width of the relationship line increases to indicate that you have selected the relationship.</P></li>
<li>
Press the DELETE key<p class=tl>
-or-</P><p class=tl>
Use the DROP FOREIGN KEY clause with the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</P></li>
</ol>
<p>
For example, the following command deletes a persistent relationship between the <code>customer</code> and <code>orders</code> table, based on the <a href="glsprimary_key.htm">primary</a> <code>cust_id</code> key in the <code>customer</code> table, and a <a href="glsforeign_key.htm">foreign</a> key, <code>cust_id</code>, in the <code>orders</code> table:</p>
<pre><code>ALTER TABLE orders DROP FOREIGN KEY TAG cust_id SAVE
</code></pre>
<h3>Building Referential Integrity</h3>
<p>
Establishing <a href="glsreferential_integrity.htm">referential integrity</a> involves building a set of rules to preserve the defined relationships between <a href="glstable.htm">tables</a> when you enter or delete <a href="glsrecord.htm">records</a>.</p>
<p>
If you enforce referential integrity, Visual FoxPro prevents you from:</p>
<ul type=disc>
<li>
Adding records to a related table when there is no associated record in the <a href="glsprimary_table.htm">primary table</a>.</li>
<li>
Changing values in a primary table that would result in orphan records in a related table.</li>
<li>
Deleting records from a primary table when there are matching related records.</li>
</ul>
<p>
You can choose to write your own <a href="glstrigger.htm">triggers</a> and <a href="glsstored_procedure.htm">stored procedure</a> code to enforce referential integrity. However, the Visual FoxPro <a href="cmdreferential_integrity_builder.htm">Referential Integrity (RI) Builder</a> enables you to determine the types of rules you want to enforce, the tables on which you want the rules enforced, and the system events that will cause Visual FoxPro to check referential integrity rules.</p>
<p>
The RI Builder handles multiple levels of cascading for cascade deletes and updates and is recommended as a tool for building referential integrity.</p>
<p class=label>
<b>To open the RI Builder</b>
<ol>
<li>
Open the <a href="wnddatabase_designer.htm">Database Designer</a>.<br><br></li>
<li>
From the <b>Database</b> menu, choose <b>Referential Integrity</b>.</li>
</ol>
<p>
When you use the RI Builder to build rules for your database, Visual FoxPro generates code to enforce relational integrity rules, then saves it as <a href="glstrigger.htm">triggers</a> that reference <a href="glsstored_procedure.htm">stored procedures</a>. You can view this code by opening the stored procedure text editor for your database. For information about creating triggers programmatically, see “Using Triggers” in Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;When you make changes to the design of a <a href="glsdatabase.htm">database</a>, such as modifying database <a href="glstable.htm">tables</a> or altering <a href="glsindex.htm">indexes</a> used in a <a href="glspersistent_relationship.htm">persistent relationship</a>, you should rerun the RI Builder before you use the database. Rerunning the RI Builder revises the <a href="glsstored_procedure.htm">stored procedure</a> code and table <a href="glstrigger.htm">triggers</a> used to enforce referential integrity so that they reflect the new design. If you don’t rerun the RI Builder, you might have unexpected results, because the stored procedures and triggers are not rewritten to reflect your changes.</p>
<h3>Creating Stored Procedures</h3>
<p>
You can create stored procedures for the tables in your database. A <a href="glsstored_procedure.htm">stored procedure</a> is Visual FoxPro code that is stored in the .dbc file. Stored procedures are code procedures that operate specifically on the data in the database. Stored procedures can improve performance because they are loaded into memory when a database is opened.</p>
<p class=label>
<b>To create, modify, or remove a stored procedure</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select a database and select <b>Stored Procedures</b>, then choose <b>New</b>, <b>Modify</b>, or <b>Remove</b>.<p class=tl>
-or-</P></li>
<li>
In the <a href="wnddatabase_designer.htm">Database Designer</a>, choose <b>Edit Stored Procedures</b> from the <b>Database</b> menu.<p class=tl>
-or-</P></li>
<li>
In the <b>Command</b> window, use the <a href="lngmodify_procedure.htm">MODIFY PROCEDURE</a> command.</li>
</ul>
<p>
Each of these options opens the Visual FoxPro text editor, allowing you to create, modify, or remove stored procedures in the current database.</p>
<p>
You can use stored procedures for creating <a href="glsuser_defined_function_udf_.htm">user-defined functions</a> that you reference in <a href="glsfield_level_rule.htm">field-</a> and <a href="glsrecord_level_rule.htm">record-level</a> validation rules. When you save a user-defined function as a stored procedure in your database, the code for the function is saved in the .dbc file and automatically moves with the database if you relocate the database. Using stored procedures also makes your application more portable because you don’t have to manage user-defined function files separately from your database file.</p>
<h3>Viewing and Setting Database Properties</h3>
<p>
Each Visual FoxPro database has Version and Comment properties. You can view and set these properties with the <a href="lngdbgetproplp_rp.htm">DBGETPROP(&nbsp;)</a> and <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> functions.</p>
<p>
For example, the following code displays the version number of the <code>testdata</code> database:</p>
<pre><code>? DBGETPROP('testdata', 'database', 'version')
</code></pre>
<p>
The value returned represents the Visual FoxPro .dbc version number, and is read-only. Using the same function, you can view the comment, if one exists for the database:</p>
<pre><code>? DBGETPROP('testdata', 'database', 'comment')
</code></pre>
<p>
Unlike the Version property, the Comment property can be set. Use the <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> function to enter a description or other text that you want to store with the database.</p>
<p class=label>
<b>To set the comment property on the current database</b>
<ul type=disc>
<li>
In the <a href="wnddatabase_designer.htm">Database Designer</a>, choose <b>Properties</b> from the <b>Database</b> menu and type a comment in the <b>Comment</b> box.<p class=tl>
-or-</P></li>
<li>
Use the comment option of the <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> function.</li>
</ul>
<p>
For example, the following code changes the comment for the <code>testdata</code> database:</p>
<pre><code>? DBSETPROP('testdata', 'database', 'comment', ;
  'TestData is included with Visual FoxPro')
</code></pre>
<p>
You can also use the <a href="lngdbgetproplp_rp.htm">DBGETPROP(&nbsp;)</a> and <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> functions to view and set properties on other database objects such as <a href="glsconnection.htm">connections</a> and <a href="glsview.htm">views</a>.</p>

<h2><a name="dgviewing_and_modifying_database_architecture"></a>Viewing and Modifying Database Architecture</h2>
<p>
When you create a database, Visual FoxPro creates and exclusively opens a .dbc (DataBase Container) file. The .dbc file stores all the information about the database, including the names of files and <a href="glsobject.htm">objects</a> associated with it. The .dbc file does not physically contain any top-level objects such as tables or fields. Rather, Visual FoxPro stores file path pointers to the tables in the .dbc file.</p>
<p>
To examine the architecture of your database, you can <a href="glsbrowse.htm">browse</a> the database file, view the <a href="glsschema.htm">schema</a>, browse the database objects, validate the database, and even extend the .dbc file.</p>
<h3>Viewing the Database Schema</h3>
<p>
The database <a href="glsschema.htm">schema</a> is a visual representation of the table structures and persistent relationships established in your database. The <a href="wnddatabase_designer.htm">Database Designer</a> window displays the schema of the open database.</p>
<p class=label>
<b>To view the database schema</b>
<ul type=disc>
<li>
Use the <a href="lngmodify_database.htm">MODIFY DATABASE</a> command.</li>
</ul>
<p>
For example, the following code opens the <code>testdata</code> database and displays the schema in the Database Designer:</p>
<pre><code>MODIFY DATABASE testdata
</code></pre>
<p class=label>
<b>A database schema is a representation of the objects in a database.</b></p>
<p>
<img src="afd06006.gif" border=0></p>
<p>
From the Database Designer, you can use the Database toolbar to create a new table, add an existing table to the database, remove a table from the database, or modify the structure of a table. You can also create connections and edit <a href="glsstored_procedure.htm">stored procedures</a>.</p>
<h3>Browsing the Database File</h3>
<p>
The database file contains a record for each <a href="glstable.htm">table</a>, <a href="glsview.htm">view</a>, <a href="glsindex.htm">index</a>, index <a href="glstags.htm">tag</a>, <a href="glspersistent_relationship.htm">persistent relationship</a>, and <a href="glsconnection.htm">connection</a> associated with the database, as well as for each table field or view field having extended properties. It also includes a single record that contains all the <a href="glsstored_procedure.htm">stored procedures</a> for the database.</p>
<p>
For information about the structure of the .dbc file, see <a href="contable_file_structure_lp.dbfrp.htm">Table File Structure</a>.</p>
<p>
While the <a href="wnddatabase_designer.htm">Database Designer</a> provides a conceptual representation of the database <a href="glsschema.htm">schema</a>, sometimes you might need to browse the contents of the database file itself. You can browse a closed database by issuing the <a href="lnguse.htm">USE</a> command on the .dbc file. The following example opens a <a href="wndbrowse_window.htm">Browse</a> window displaying the contents of the <code>sales</code> database in table form.</p>
<pre><code>CLOSE DATABASE sales
USE sales.dbc EXCLUSIVE
BROWSE 
</code></pre>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Don’t use the <a href="lngbrowse.htm">BROWSE</a> command to alter the database file unless you are knowledgeable about the structure of the .dbc file. If you make an error while attempting to change the .dbc file you can invalidate the database and potentially lose data.</p>
<h3>Extending Database Files</h3>
<p>
Each .dbc file contains a Memo field named User that you can use to store your own information about each record in the database. You can also extend a .dbc file to add fields to accommodate your own needs as a developer. Fields must be added to the end of the structure. You must have exclusive access to a .dbc file to modify its structure.</p>
<p class=label>
<b>To add a field to a .dbc file</b>
<ol>
<li>
Open the .dbc file for exclusive use with the <a href="lnguse.htm">USE</a> command.<br><br></li>
<li>
Use the <a href="lngmodify_structure.htm">MODIFY STRUCTURE</a> command.</li>
</ol>
<p>
For example, the following code opens the <a href="wndtable_designer.htm">Table Designer</a> so you can add a field to the structure of Testdata.dbc:</p>
<pre><code>USE TESTDATA.DBC EXCLUSIVE
MODIFY STRUCTURE
</code></pre>
<p>
When you add a new field to a database file, begin the field name with “U” to designate it as a user-defined field. This designation prevents your field from conflicting with any future extensions to the .dbc file.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Don’t change any existing Visual FoxPro- defined fields in a .dbc file. Any changes you make to a .dbc file could affect the integrity of your database.</p>
<h3>Validating a Database</h3>
<p>
Validating a database ensures that the rows of the database are storing accurate representations of the meta-data in the database. You can check the integrity of the current database with the VALIDATE DATABASE command.</p>
<p class=label>
<b>To validate a database</b>
<ul type=disc>
<li>
Use the <a href="lngvalidate_database.htm">VALIDATE DATABASE</a> command.</li>
</ul>
<p>
For example, the following code uses and validates the .dbc file for the <code>testdata</code> database:</p>
<pre><code>OPEN DATABASE testdata EXCLUSIVE
VALIDATE DATABASE
</code></pre>

<h2><a name="dgmanaging_a_database"></a>Managing a Database</h2>
<p>
After creating a database, you might want to add it to a <a href="glsproject.htm">project</a> if it isn’t already part of one. If your database is already part of a project, you can remove it from a project. Also, if you no longer need the database, you can delete it from the disk.</p>
<p class=label>
<b>A database in the Project Manager</b></p>
<p>
<img src="afd06007.gif" border=0></p>
<h3>Adding a Database to a Project</h3>
<p>
When you create a database with the <a href="lngcreate_database.htm">CREATE DATABASE</a> command, the database is not automatically a part of a project, even if the <a href="wndproject_manager.htm">Project Manager</a> is open. You can add the database to a project to make it easier to organize, view and manipulate database objects through the interface, as well as to simplify the process of building an application. You can add a database to a project only through the Project Manager.</p>
<p class=label>
<b>To add a database to a project</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select <b>Databases</b> and choose <b>Add</b>.</li>
</ul>
<h3>Removing a Database from a Project</h3>
<p>
You can remove a database from a project only through the Project Manager.</p>
<p class=label>
<b>To remove a database from a project</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the database and choose <b>Remove</b>, and then choose <b>Remove</b> again.</li>
</ul>
<h3>Deleting a Database</h3>
<p>
You can delete a database from disk using the Project Manager or the <a href="lngdelete_database.htm">DELETE DATABASE</a> command.</p>
<p class=label>
<b>To delete a database</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the database and choose <b>Remove</b>, and then choose <b>Delete</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdelete_database.htm">DELETE DATABASE</a> command.</li>
</ul>
<p>
For example, the following code deletes the <code>sample</code> database:</p>
<pre><code>DELETE DATABASE sample
</code></pre>
<p>
Always use one of the methods above to delete a database from disk. Using the <a href="wndproject_manager.htm">Project Manager</a> or the <a href="lngdelete_database.htm">DELETE DATABASE</a> command enables Visual FoxPro to remove <a href="glsbacklink.htm">backlinks</a> to the database from the tables in a database. If you use another file manipulation utility to delete a database file, such as the Windows Explorer, these backlinks are not removed.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The DELETE DATABASE command does not delete the tables associated with a database from the disk; rather, the tables that were associated with the database become free tables. If you want to delete both a database and all its associated tables from disk, use the DELETETABLES clause with the DELETE DATABASE command.</p>

<h2><a name="dgreferencing_multiple_databases"></a>Referencing Multiple Databases</h2>
<p>
You can have many Visual FoxPro databases on your system to meet organizational needs in a multi-user environment. Multiple databases offer the following advantages:</p>
<ul type=disc>
<li>
Controlling user access to a subset of tables in the overall system.</li>
<li>
Organizing the data to efficiently meet the information needs of various groups using the system.</li>
<li>
Allowing exclusive use of a subset of tables for creating <a href="glslocal_view.htm">local</a> and <a href="glsremote_view.htm">remote</a> views at <a href="glsrun_time.htm">run time</a>.</li>
</ul>
<p>
For example, you might have a sales database that maintains sales information used primarily by the sales force working with customers and another database that maintains inventory information used primarily by the buyers working with suppliers. At times the information needs of these groups will overlap. These databases can be opened at the same time and accessed at will but they contain completely different types of information.</p>
<p class=label>
<b>Multiple databases can add flexibility to your system.</b></p>
<p>
<img src="afd06005.gif" border=0></p>
<p>
You can use multiple databases either by opening more than one database simultaneously or by referencing tables in a closed database. Once multiple databases are open, you can set the current database and select tables in it.</p>
<h3>Opening More Than One Database</h3>
<p>
When a database is open, the tables and relationships between tables are controlled by the information stored in the open database. You can have more than one database open at a time. For example, you might use multiple open databases when you run multiple applications, each based on a different database. You might also want to open multiple databases to use information, such as <a href="glscustom_control.htm">custom controls</a>, stored in a database that is separate from your application’s database.</p>
<p class=label>
<b>To open more than one database</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select a database and choose <b>Modify</b> or <b>Open</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngopen_database.htm">OPEN DATABASE</a> command.</li>
</ul>
<p>
Opening a new database does not close any databases you’ve opened previously. Other open databases remain open, and the newly opened database becomes the current database.</p>
<h3>Setting the Current Database</h3>
<p>
When you open multiple databases, Visual FoxPro sets the most recently opened database as the current database. Any tables or other objects you create or add to the database become a part of the current database by default. Commands and functions that manipulate open databases, such as ADD TABLE and DBC(&nbsp;), operate on the current database.</p>
<p>
You can choose a different database as the current database through the interface or with the SET DATABASE command.</p>
<p class=label>
<b>To set the current database</b>
<ul type=disc>
<li>
On the standard toolbar, select a database from the <b>Databases</b> box.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngset_database.htm">SET DATABASE</a> command.</li>
</ul>
<p>
For example, the following code opens three databases, sets the first database as the current database, then uses the DBC(&nbsp;) function to display the name of the current database:</p>
<pre><code>OPEN DATABASE testdata
OPEN DATABASE tastrade
OPEN DATABASE sample
SET DATABASE TO testdata
? DBC(&nbsp;)
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Visual FoxPro might open one or more databases automatically when you execute a <a href="glsquery.htm">query</a> or a <a href="glsform.htm">form</a> that requires the databases to be open. To be sure you are operating on the correct database, set the current database explicitly before issuing any commands that operate on the current database.</p>
<h3>Selecting Tables in the Current Database</h3>
<p>
You can choose from a list of tables in the current database with the USE command.</p>
<p class=label>
<b>To choose a table from the current database</b>
<ul type=disc>
<li>
Issue the <a href="lnguse.htm">USE</a> command with a “?” symbol.<p class=tl>
The <b>Use</b> dialog box displays so that you can select a table to open.</P></li>
</ul>
<p>
For example, the following code opens the <code>sales</code> database and prompts you to select a table from the list of tables in the database.</p>
<pre><code>OPEN DATABASE SALES
USE ?
</code></pre>
<p>
If you want to select a table that is not associated with the open database, you can choose Other in the Use dialog box.</p>
<h3>Closing a Database</h3>
<p>
You can close an open database from the Project Manager or with the CLOSE DATABASE command.</p>
<p class=label>
<b>To close a database</b>
<ul type=disc>
<li>
From the <a href="wndproject_manager.htm">Project Manager</a>, select the database and choose <b>Close</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngclose.htm">CLOSE</a> DATABASE command.</li>
</ul>
<p>
For example, the following code closes the <code>testdata</code> database:</p>
<pre><code>SET DATABASE TO testdata
CLOSE DATABASE
</code></pre>
<p>
Both options close the database automatically. You can also close databases and all other open objects with the ALL clause of the <a href="lngclose.htm">CLOSE</a> command.</p>
<p>
Issuing the <a href="lngclose.htm">CLOSE</a> DATABASE command from the <a href="wndcommand_window.htm">Command</a> window does not close a database if the database was opened by:</p>
<ul type=disc>
<li>
The Project Manager when you expanded the outline to view the contents of a database.</li>
<li>
A <a href="glsform.htm">form</a> that is running in its own <a href="glsdata_session.htm">data session</a>.</li>
</ul>
<p>
In these circumstances, the database remains open until the Project Manager closes the database, or until the form using the database is closed.</p>
<h3>Scope Resolution</h3>
<p>
Visual FoxPro uses the current database as the primary scope for named objects, such as tables. When a database is open, Visual FoxPro first searches within the open database for any objects you request, such as <a href="glstable.htm">tables</a>, <a href="glsview.htm">views</a>, <a href="glsconnection.htm">connections</a>, and so on. If the object is not in the database, Visual FoxPro looks in the default search path.</p>
<p>
For example, if the <code>customer</code> table is associated with the <code>sales</code> database, Visual FoxPro would always find the <code>customer</code> table in the database when you issue the following commands:</p>
<pre><code>OPEN DATABASE SALES
ADD TABLE F:\SOURCE\CUSTOMER.DBF
USE CUSTOMER
</code></pre>
<p>
If you issue the following command, Visual FoxPro will first look in the current database for the <code>products</code> table.</p>
<pre><code>USE PRODUCTS
</code></pre>
<p>
If <code>products</code> is not in the current database, Visual FoxPro will look outside the database, using the default search path.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can specify the full path for a table if you want to be able to access it inside or outside a database — for example, if you anticipate a change in the location of a table. However, you increase performance when you reference only the table name, because Visual FoxPro accesses database table names more quickly than names specified with a full path.</p>

<h2><a name="dghandling_database_errors"></a>Handling Database Errors</h2>
<p>
Database errors, also called “engine errors,” occur when run-time errors occur in record-level event code. For example, a database error occurs when a user attempts to store a null value to a field that doesn’t allow null values.</p>
<p>
When a database error occurs, the underlying database engine that detects the error typically posts an error message. However, the exact nature of the error message depends on what database is being accessed — for example, the error messages produced by a remote database server (such as Microsoft SQL Server) will probably be different from those produced if a database error occurs in a local Visual FoxPro table.</p>
<p>
In addition, engine-level errors are sometimes very generic, because the database engine has no information about the context in which a record is being updated. As a consequence, error messages produced by a database engine are often less useful to the end user of a Visual FoxPro application.</p>
<p>
To handle database errors in a more application-specific way, you can create triggers using the <a href="lngcreate_trigger.htm">CREATE TRIGGER</a> command. The trigger is called when a record update is attempted (delete, insert, or update). Your custom trigger code can then look for application-specific error conditions and report these.</p>
<p>
If you handle database errors using triggers, you should turn buffering on. That way, when a record is updated your trigger is called, but the record is not immediately sent to the underlying database. You therefore avoid the possibility of producing two error messages: one from your trigger, and another from the underlying database engine.</p>
<p class=label>
<b>To create custom error messages using triggers</b>
<ol>
<li>
Inside a user-defined function or stored procedure, write your own message text.<br><br></li>
<li>
Enable buffering with the <a href="lngcursorsetproplp_rp.htm">CURSORSETPROP(&nbsp;)</a> function to display your custom text. If buffering is off, the user will see both your custom text and the engine error message.</li>
</ol>
</BODY>
</HTML>

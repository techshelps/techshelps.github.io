<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data and Field Types</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="condata_and_field_types"></a><sup></sup>Data and Field Types</h1>
<p>
<a href="condata_and_field_typessa.htm">See Also</a></p>
<p>
All Visual FoxPro data has a type — a description of the permissible values and range and size of those values. Once you specify the type of data you are using, Visual FoxPro can efficiently store and manipulate the data.</p>
<p>
Variables and arrays hold a subset of the available Visual FoxPro data types. Additional data types are available only for fields in a table. To add a field of a specific type to a table programmatically, specify the field type with a letter abbreviation. For more information, see the description for <i>FieldType</i> in <a href="lngcreate_table___sql.htm">CREATE TABLE&nbsp;-&nbsp;SQL</a>.</p>
<p>
You specify the type of data to be stored in each field of a table when you create the table. The type of data in a variable or array element is determined by the value you store in the variable or array element. The following table lists the data types in Visual FoxPro.</p>
<p class=label>
<b>Visual FoxPro Data Types</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Data type</b></td>
<td class=label width=28%><b>Description</b></td>
<td class=label width=19%><b>Size</b></td>
<td class=label width=37%><b>Range</b></td>
</tr>
<tr valign=top>
<td width=16%><a href="concharacter_data_type.htm">Character</a></td>
<td width=28%>Any text</td>
<td width=19%>1 byte per character to 254</td>
<td width=37%>Any characters</td>
</tr>
<tr valign=top>
<td width=16%><a href="concurrency_data_type.htm">Currency</a></td>
<td width=28%>Monetary amounts</td>
<td width=19%>8 bytes</td>
<td width=37%> - 922337203685477.5807 to 922337203685477.5807</td>
</tr>
<tr valign=top>
<td width=16%><a href="condate_data_type.htm">Date</a></td>
<td width=28%>Chronological data consisting of month, year, and day</td>
<td width=19%>8 bytes</td>
<td width=37%>When using strict date formats, {^0001-01-01}, January 1st, 1 A.D to {^9999-12-31}, December 31st, 9999 A.D.</td>
</tr>
<tr valign=top>
<td width=16%><a href="condatetime_data_type.htm">DateTime</a></td>
<td width=28%>Chronological data consisting of month, year, day, and time</td>
<td width=19%>8 bytes</td>
<td width=37%>When using strict date formats, {^0001-01-01}, January 1st, 1 A.D to {^9999-12-31}, December 31st, 9999 A.D., plus 00:00:00 a.m. to 11:59:59 p.m.</td>
</tr>
<tr valign=top>
<td width=16%><a href="conlogical_data_type.htm">Logical</a></td>
<td width=28%>Boolean value of true or false</td>
<td width=19%>1 byte</td>
<td width=37%>True (.T.) or False (.F.)</td>
</tr>
<tr valign=top>
<td width=16%><a href="connumeric_data_type.htm">Numeric</a></td>
<td width=28%>Integers or fractions</td>
<td width=19%>8 bytes in memory;<br>
1 to 20 bytes in table</td>
<td width=37%> - .9999999999E+19 to .9999999999E+20</td>
</tr>
<tr valign=top>
<td width=16%>Variant</td>
<td width=28%>A variant can contain any of the Visual FoxPro data types and the null value. Once a value is stored to a variant, the variant assumes the data type of the data it contains.<p>
Variants are designated with an <i>e</i> prefix in language syntax.</p>
</td>
<td width=19%>See data types above.</td>
<td width=37%>See data types above.</td>
</tr>
</table><br>
<p>
In addition, Visual FoxPro provides data types that apply only to fields in tables.</p>
<p class=label>
<b>Visual FoxPro Field Types</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Field type</b></td>
<td class=label width=23%><b>Description</b></td>
<td class=label width=21%><b>Size</b></td>
<td class=label width=39%><b>Range</b></td>
</tr>
<tr valign=top>
<td width=17%><a href="condouble_field_type.htm">Double</a></td>
<td width=23%>A double-precision floating-point number</td>
<td width=21%>8 bytes</td>
<td width=39%>+/-4.94065645841247E-324 to +/-8.9884656743115E307</td>
</tr>
<tr valign=top>
<td width=17%><a href="confloat_field_type.htm">Float</a></td>
<td width=23%>Same as Numeric</td>
<td width=21%>8 bytes in memory;<br>
1 to 20 bytes in table</td>
<td width=39%> - .9999999999E+19 to .9999999999E+20</td>
</tr>
<tr valign=top>
<td width=17%><a href="congeneral_field_type.htm">General</a></td>
<td width=23%>Reference to an OLE object</td>
<td width=21%>4 bytes in table</td>
<td width=39%>Limited by available memory</td>
</tr>
<tr valign=top>
<td width=17%><a href="coninteger_field_type.htm">Integer</a></td>
<td width=23%>Integer values</td>
<td width=21%>4 bytes</td>
<td width=39%>-2147483647 to 2147483647</td>
</tr>
<tr valign=top>
<td width=17%><a href="conmemo_field_type.htm">Memo</a></td>
<td width=23%>Reference to a block of data</td>
<td width=21%>4 bytes in table</td>
<td width=39%>Limited by available memory</td>
</tr>
<tr valign=top>
<td width=17%>Character (Binary)</td>
<td width=23%>Any character data you want to maintain without change across code pages</td>
<td width=21%>1 byte per character to 254</td>
<td width=39%>Any characters</td>
</tr>
<tr valign=top>
<td width=17%>Memo (Binary)</td>
<td width=23%>Any memo field data you want to maintain without change across code pages</td>
<td width=21%>4 bytes in table</td>
<td width=39%>Limited by available memory</td>
</tr>
</table><br>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can use the <a href="lngtypelp_rp.htm">TYPE(&nbsp;)</a> function to determine the type of data stored in a variable, array element, or field.</p>
<p>
Each data type has its own characteristics, including storage size:</p>
<p class=label>
<b>Data Type Storage Differences</b></p>
<p>
<img src="afl00004.gif" border=0></p>
<p>
To see a list of the functions you can use with each data type, see <a href="catlanguage_categories.htm">Language Categories</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Tables</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgworking_with_tables"></a><sup></sup>Chapter 7: Working with Tables</h1>
<p>
Building your <a href="glsdatabase.htm">database</a> includes creating <a href="glstable.htm">tables</a>. When you designed your database, you specified the table <a href="glsfield.htm">fields</a> and relationships needed for your application. Now, as you create those tables, you make more detailed choices about the data types, captions, and potential default values for each field, the triggers for each table, as well as the table indexes you build to establish relationships between tables. This chapter describes the process of creating, refining, and relating tables and indexes as you develop an application. It focuses primarily on using the language to work with tables and records, but also explains using the interface to handle common tasks.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dgcreating_tables">Creating Tables</a></li>
<li>
<a href="#dgworking_with_records">Working with Records</a></li>
<li>
<a href="#dgindexing_tables">Indexing Tables</a></li>
<li>
<a href="#dgusing_multiple_tables">Using Multiple Tables</a></li>
</ul>

<h2><a name="dgcreating_tables"></a>Creating Tables</h2>
<p>
You can create a table in a database, or just create a free table not associated with a database. If you put the table in a database, you can create long table and field names for database tables. You can also take advantage of <a href="glsdata_dictionary.htm">data dictionary</a> capabilities for database tables, long field names, default field values, <a href="glsfield_level_rule.htm">field-</a> and <a href="glsrecord_level_rule.htm">record-level</a> rules, as well as <a href="glstrigger.htm">triggers</a>.</p>
<h3>Designing Database vs. Free Tables</h3>
<p>
A Visual FoxPro table, or .dbf file, can exist in one of two states: either as a database table (a table associated with a database) or as a free table that is not associated with any database. Tables associated with a database have several benefits over free tables. When a table is a part of a database you can create:</p>
<ul type=disc>
<li>
Long names for the table and for each field in the table.</li>
<li>
<a href="glscaption.htm">Captions</a> and comments for each table field.</li>
<li>
<a href="glsdefault_value.htm">Default values</a>, <a href="glsinput_mask.htm">input masks</a>, and format for table fields.</li>
<li>
Default <a href="glscontrol_classes.htm">control class</a> for table fields.</li>
<li>
<a href="glsfield_level_rule.htm">Field-level</a> and <a href="glsrecord_level_rule.htm">record-level</a> rules.</li>
<li>
Primary key <a href="glsindex.htm">indexes</a> and table relationships to support <a href="glsreferential_integrity.htm">referential integrity</a> rules.</li>
<li>
One <a href="glstrigger.htm">trigger</a> for each INSERT, UPDATE, or DELETE event.</li>
</ul>
<p>
Some features apply only to database tables. For information about associating tables with a database, see Chapter 6, <a href="dgcreating_databases.htm">Creating Databases</a>.</p>
<p class=label>
<b>Database tables have properties that free tables don’t.</b></p>
<p>
<img src="afd07001.gif" border=0></p>
<p>
You can design and create a table interactively with the <a href="wndtable_designer.htm">Table Designer</a>, accessible through the <a href="wndproject_manager.htm">Project Manager</a> or the File menu, or you can create a table programmatically with the language. This section primarily describes building a table programmatically. For information on using the Table Designer to build tables interactively, see Chapter 2, <a href="ugcreating_tables_and_indexes.htm">Creating Tables and Indexes</a>, in the <i>User’s Guide</i>.</p>
<p>
You use the following commands to create and edit a table programmatically:</p>
<p class=label>
<b>Commands for Creating and Editing Tables</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=48%><a href="lngalter_table___sql.htm">ALTER TABLE</a></td>
<td width=52%><a href="lngclose.htm">CLOSE TABLES</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcreate_table___sql.htm">CREATE TABLE</a></td>
<td width=52%><a href="lngdelete_file.htm">DELETE FILE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngremove_table.htm">REMOVE TABLE</a></td>
<td width=52%><a href="lngrename_table.htm">RENAME TABLE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngdrop_table.htm">DROP TABLE</a></td>
<td width=52%></td>
</tr>
</table><br>
<h3>Creating a Database Table</h3>
<p>
You can create a new table in a database through the menu system, the Project Manager, or through the language. As you create the table, you can create long table and field names, default field values, field- and record-level rules, as well as triggers.</p>
<p class=label>
<b>To create a new database table</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select a database, then <b>Tables</b>, and then <b>New</b> to open the <a href="wndtable_designer.htm">Table Designer</a>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command with a database open.</li>
</ul>
<p>
For example, the following code creates the table <code>smalltbl</code> with one column, called <code>name</code>:</p>
<pre><code>OPEN DATABASE Sales
CREATE TABLE smalltbl (name c(50))
</code></pre>
<p>
The new table is automatically associated with the database that is open at the time you create it. This association is defined by a <a href="glsbacklink.htm">backlink</a> stored in the table’s header record.</p>
<h3>Creating a Free Table</h3>
<p>
A free table is a table that is not associated with a database. You might want to create a free table, for example, to store lookup information that many databases share.</p>
<p class=label>
<b>To create a new free table</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select <b>Free Tables</b>, and then <b>New</b> to open the Table Designer.<p class=tl>
-or-</P></li>
<li>
Use the FREE keyword with the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command.</li>
</ul>
<p>
For example, the following code creates the free table <code>smalltbl</code> with one column, called <code>name</code>:</p>
<pre><code>CLOSE DATABASES
CREATE TABLE smalltbl FREE (name c(50))
</code></pre>
<p>
If no database is open at the time you create the table, you do not need to use the keyword FREE.</p>
<h3>Naming a Table</h3>
<p>
When you issue the CREATE TABLE command, you specify the file name for the .dbf file Visual FoxPro creates to store your new table. The file name is the default table name for both database and free tables. Table names can consist of letters, digits, or underscores and must begin with a letter or underscore.</p>
<p>
If your table is in a database, you can also specify a long table name. Long table names can contain up to 128 characters and can be used in place of short file names to identify the table in the database. Visual FoxPro displays long table names, if you’ve defined them, whenever the table appears in the interface, such as in the Project Manager, the Database Designer, the Query Designer, and the View Designer, as well as in the title bar of a Browse window.</p>
<p class=label>
<b>To give a database table a long name</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter a long name in the <b>Table Name</b> box.<p class=tl>
-or-</P></li>
<li>
Use the NAME clause of the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command.</li>
</ul>
<p>
For example, the following code creates the table <code>vendintl</code> and gives the table a more understandable long name of <code>vendors_international</code>:</p>
<pre><code>CREATE TABLE vendintl NAME vendors_international (company C(40))
</code></pre>
<p>
You can also use the <a href="wndtable_designer.htm">Table Designer</a> to rename tables or add long names to tables that were created without long names. For example, when you add a free table to a database, you can use the Table Designer to add a long table name. Long names can contain letters, digits, or underscores, and must begin with a letter or underscore. You can’t use spaces in long table names.</p>
<h3>Renaming a Table</h3>
<p>
You can rename database tables through the interface because you are changing the long name. If you remove the table from the database, the file name for the table retains the original name. Free tables do not have a long name and can only be renamed using the language.</p>
<p class=label>
<b>To rename a table in a database</b>
<ol>
<li>
In the <a href="wnddatabase_designer.htm">Database Designer</a>, select the table to rename.<br><br></li>
<li>
From the <b>Database</b> menu, choose <b>Modify</b>.<br><br></li>
<li>
In the <b>Table Designer,</b> type a new name for the table in the <b>Table Name</b> box on the <b>Table</b> tab.</li>
</ol>
<p class=label>
<b>To rename a free table</b></p>
<ul type=disc>
<li>
Use the <a href="lngrename.htm">RENAME</a> command.<p class=atl>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;If you use the RENAME command on tables associated with a database, the command does not update the <a href="glsbacklink.htm">backlink</a> to the database and can cause table access errors.</p></li>
</ul>
<h3>Deleting a Database Table</h3>
<p>
If a table is associated with a database, you can delete the table as a by-product of removing the table from its database. Deleting a table is different from removing a table from a database, however. If you just want to remove a table from a database but do not want to physically delete the table from disk, see “Removing a Table from a Database” in Chapter 6, <a href="dgcreating_databases.htm">Creating Databases</a>.</p>
<p class=label>
<b>To delete a database table from disk</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the table name, choose <b>Remove</b>, and then choose <b>Delete</b>.<p class=tl>
-or-</P></li>
<li>
From the <a href="wnddatabase_designer.htm">Database Designer</a>, select the table, choose <b>Remove</b> from the <b>Database</b> menu, and then choose <b>Delete</b>.<p class=tl>
-or-</P></li>
<li>
To delete the table plus all primary indexes, default values, and validation rules associated with the table, use the <a href="lngdrop_table.htm">DROP TABLE</a> command.<p class=tl>
-or-</P></li>
<li>
To delete just the table file (.dbf), use the <a href="lngerase.htm">ERASE</a> command.<p class=atl>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;If you use the ERASE command on tables associated with a database, the command does not update the <a href="glsbacklink.htm">backlink</a> to the database and can cause table access errors.</p></li>
</ul>
<p>
The following code opens the database <code>testdata</code> and deletes the table <code>orditems</code> and its indexes, default values, and validation rules:</p>
<pre><code>OPEN DATABASE testdata
DROP TABLE orditems
</code></pre>
<p>
If you delete a table using the DELETE clause of the <a href="lngremove_table.htm">REMOVE TABLE</a> command, you also remove the associated .fpt memo file and .cdx structural index file.</p>
<h3>Deleting a Free Table</h3>
<p>
If a table is not associated with a database, you can delete the table file through the Project Manager or with the DELETE FILE command.</p>
<p class=label>
<b>To delete a free table</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the free table, choose <b>Remove</b>, and then choose <b>Delete</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdelete_file.htm">DELETE FILE</a> command.</li>
</ul>
<p>
For example, if <code>sample</code> is the current table, the following code closes the table and deletes the file from disk:</p>
<pre><code>USE
DELETE FILE sample.dbf
</code></pre>
<p>
The file you want to delete cannot be open when DELETE FILE is issued. If you delete a table that has other associated files, such as a memo file (.fpt) or index files (.cdx or .idx), be sure to delete those files as well. For example, if the file <code>sample.dbf</code> also has an associated memo file, you could delete both files with the following commands:</p>
<pre><code>USE
DELETE FILE sample.dbf
DELETE FILE sample.fpt
</code></pre>
<h3>Duplicating a Table</h3>
<p>
You can make a copy of a tables structure, its <a href="glsstored_procedure.htm">stored procedures</a>, <a href="glstrigger.htm">trigger</a> expressions, and default field values by using the language. There is no menu option to perform the same function. This procedure does not copy the contents of the table.</p>
<p class=label>
<b>To duplicate a table</b>
<ol>
<li>
Open the original table.<br><br></li>
<li>
Use the <a href="lngcopy_structure.htm">COPY STRUCTURE</a> command to make a copy of the original table.<br><br></li>
<li>
Open the empty table created with the COPY STRUCTURE command.<br><br></li>
<li>
Use the <a href="lngappend_from.htm">APPEND FROM</a> command to copy the data from the original table.</li>
</ol>
<h3>Copying and Editing Table Structure</h3>
<p>
To modify the structure of an existing table, you can use the <a href="wndtable_designer.htm">Table Designer</a> or <a href="lngalter_table___sql.htm">ALTER TABLE</a>. Alternatively, you can create a new table based on the structure of an existing table, then modify the structure of the new table.</p>
<p class=label>
<b>To copy and edit a table structure</b>
<ol>
<li>
Open the original table.<br><br></li>
<li>
Use the <a href="lngcopy_structure_extended.htm">COPY STRUCTURE EXTENDED</a> command to produce a new table containing the structural information of the old table.<br><br></li>
<li>
Edit the new table containing the structural information to alter the structure of any new table created from that information.<br><br></li>
<li>
Create a new table using the <a href="lngcreate_from.htm">CREATE FROM</a> command.<p class=tl>
The new table is empty.</P></li>
<li>
Use <a href="lngappend_from.htm">APPEND FROM</a> or one of the data copying commands to fill the table if necessary.</li>
</ol>
<h3>Saving a Table as HTML</h3>
<p>
You can use the <b>Save As HTML</b> option on the <b>File</b> menu when you are browsing a table to save the contents of a table as an HTML (Hypertext Markup Language) file.</p>
<p class=label>
<b>To save a table as HTML</b>
<ol>
<li>
Open the table.<br><br></li>
<li>
Browse the table by issuing the <a href="lngbrowse.htm">BROWSE</a> command in the Command window or by choosing <b>Browse</b> from the <b>View</b> menu.<br><br></li>
<li>
Choose <b>Save As HTML</b> on the <b>File</b> menu.<br><br></li>
<li>
Enter the name of the HTML file to create and choose <b>Save</b>.</li>
</ol>
<h3>Creating Fields</h3>
<p>
When you create table fields, you determine how data is identified and stored in the table by specifying a field name, a data type, and a field width. You also can control what data is allowed into the field by specifying whether the field allows <a href="glsnull_value.htm">null values</a>, has a default value, or must meet validation rules. Setting the display properties, you can specify the type of form control created when the field is added onto a <a href="glsform.htm">form</a>, the format for the contents of the <a href="glsfield.htm">fields</a>, or the <a href="glscaption.htm">caption</a> that labels the content of field.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Tables in Visual FoxPro can contain up to 255 fields. If one or more fields can contain null values, the maximum number of fields the table can contain is reduced by one, from 255 to 254.</p>
<h3>Naming Fields</h3>
<p>
You specify field names as you build a new table. These field names can be 10 characters long for free tables or 128 characters long for database tables. If you remove a table from a database, the table’s long field names are truncated to 10 characters.</p>
<p class=label>
<b>To name a table field</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter a field name in the <b>Name</b> box.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command or <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
For example, to create and open the table <code>customer</code> with three fields, <code>cust_id</code>, <code>company</code>, and <code>contact</code>, you could issue the following command:</p>
<pre><code>CREATE TABLE customer (cust_id C(6), company C(40), contact C(30))
</code></pre>
<p>
In the previous example, the <code>C(6)</code> signifies a field with Character data and a field width of 6. Choosing data types for your table fields is discussed later in this section.</p>
<p>
Using the ALTER TABLE command, you add fields, <code>company</code>, and <code>contact</code> to an existing table <code>customer</code>:</p>
<pre><code>ALTER TABLE customer ;
 &nbsp; ADD COLUMN (company C(40), contact C(30))
</code></pre>
<h4>Using Short Field Names</h4>
<p>
When you create a table in a database, Visual FoxPro stores the long name for the table’s fields in a record of the .dbc file. The first 10 characters of the long name are also stored in the .dbf file as the field name.</p>
<p>
If the first 10 characters of the long field name are not unique to the table, Visual FoxPro generates a name that is the first <i>n</i> characters of the long name with the sequential number value appended to the end so that the field name is 10 characters. For example, these long field names are converted to the following 10-character names:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Long Name</b></td>
<td class=label width=62%><b>Short Name</b></td>
</tr>
<tr valign=top>
<td width=38%>customer_contact_name</td>
<td width=62%>customer_c</td>
</tr>
<tr valign=top>
<td width=38%>customer_contact_address</td>
<td width=62%>customer_2</td>
</tr>
<tr valign=top>
<td width=38%>customer_contact_city</td>
<td width=62%>customer_3</td>
</tr>
<tr valign=top>
<td width=38%>...</td>
<td width=62%>...</td>
</tr>
<tr valign=top>
<td width=38%>customer_contact_fax</td>
<td width=62%>customer11</td>
</tr>
</table><br>
<p>
While a table is associated with a database, you must use the long field names to refer to table fields. It is not possible to use the 10-character field names to refer to fields of a table in a database. If you remove a table from its database, the long names for the fields are lost and you must use the 10-character field names (stored in the .dbf) as the field names.</p>
<p>
You can use long field names composed of characters, not numbers, in your <a href="glsindex.htm">index</a> files. However, if you create an index using long field names and then remove the referenced table from the database, your index will not work. In this case, you can either shorten the names in the index and then rebuild the index; or delete the index and re-create it, using short field names. For information on deleting an index, see “<a href="#dgdeleting_an_index">Deleting an Index</a>” later in this chapter.</p>
<p>
The rules for creating long field names are the same as those for creating any Visual FoxPro identifier, except that the names can contain up to 128 characters.</p>
<p>
For more information about naming Visual FoxPro identifiers, see <a href="concreating_visual_foxpro_names.htm">Creating Visual FoxPro Names</a>.</p>
<h3>Choosing Data Types</h3>
<p>
As you create each table field you also choose a data type for the data the field is to store. When you choose a field’s data type, you’re deciding:</p>
<ul type=disc>
<li>
What kind of values to allow in the field. For example, you can’t store text in a <a href="connumeric_data_type.htm">Numeric</a> field.</li>
<li>
How much storage space Visual FoxPro is to set aside for the values stored in that field. For example, any value with the <a href="concurrency_data_type.htm">Currency data type</a> uses 8 bytes of storage.</li>
<li>
What types of operations can be performed on the values in that field. For example, Visual FoxPro can find the sum of Numeric or Currency values but not of <a href="concharacter_data_type.htm">Character</a> or <a href="congeneral_field_type.htm">General</a> values.</li>
<li>
Whether Visual FoxPro can index or sort values in the field . You can’t sort or create an index for <a href="conmemo_field_type.htm">Memo</a> or <a href="congeneral_field_type.htm">General</a> fields.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;For phone numbers, part numbers, and other numbers you don’t intend to use for mathematical calculations, you should select the Character data type, not the Numeric data type.</p></li>
</ul>
<p class=label>
<b>To choose a data type for a field</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, choose a data type from the <b>Type</b> list.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command.</li>
</ul>
<p>
For example, to create and open the table <code>products</code> with three fields, <code>prod_id</code>, <code>prod_name</code>, and <code>unit_price</code>, you could issue the following command:</p>
<pre><code>CREATE TABLE products (prod_id C(6), prod_name C(40), unit_price Y)
</code></pre>
<p>
In the previous example, the ‘Y’ after the <code>unit_price</code> field name specifies a Currency data type.</p>
<p>
For more information about specific data types, see <a href="condata_and_field_types.htm">Data and Field Types</a>.</p>
<h4>Adding a Regular Index Quickly</h4>
<p>
As you add a field, you can quickly define a <a href="glsregular_index.htm">regular index</a> on the field by specifying ascending or descending in the Index column of the <a href="wndtable_designer.htm">Table Designer</a>. The index you create is automatically added to the Index tab and uses the field as the expression. To modify the index, you can switch to the Index tab to change the index name, type, or to add a <a href="glsfilter.htm">filter</a>.</p>
<h4>Using Null Values</h4>
<p>
As you build a new table, you can specify whether one or more table fields will accept null values. When you use a null value, you are documenting the fact that information that would normally be stored in a field or record is not currently available. For example, an employee’s health benefits or tax status may be undetermined at the time a record is populated. Rather than storing a zero or a blank, which could be interpreted to have meaning, you could store a null value in the field until the information becomes available.</p>
<p class=label>
<b>To control entering null values per field</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, select or clear the <b>Null</b> column for the field.<p class=tl>
When the <b>Null</b> column is selected, you can enter null values in the field.</P><p class=tl>
-or-</P></li>
<li>
Use the NULL and NOT NULL clauses of the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command.</li>
</ul>
<p>
For example, the following command creates and opens a table that does not permit null values for the <code>cust_id</code> and <code>company</code> fields but does permit null values in the <code>contact</code> field:</p>
<pre><code>CREATE TABLE customer (cust_id C(6) NOT NULL, ;
 &nbsp; company C(40) NOT NULL, contact C(30) NULL)
</code></pre>
<p>
You can also control whether null values are permitted in table fields by using the <a href="lngset_null.htm">SET NULL</a> ON command.</p>
<p class=label>
<b>To permit null values in all table fields</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, select the <b>Null</b> column for each table field.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngset_null.htm">SET NULL</a> ON command before using the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command.</li>
</ul>
<p>
When you issue the SET NULL ON command, Visual FoxPro automatically checks the NULL column for each table field as you add fields in the Table Designer. If you issue the SET NULL command before issuing CREATE TABLE, you don’t have to specify the NULL or NOT NULL clauses. For example, the following code creates a table that allows nulls in every table field:</p>
<pre><code>SET NULL ON
CREATE TABLE test (field1 C(6), field2 C(40), field3 Y)
</code></pre>
<p>
The presence of null values affects the behavior of tables and <a href="glsindex.htm">indexes</a>. For example, if you use APPEND FROM or INSERT INTO to copy records from a table containing null values to a table that does not permit null values, then appended fields that contained null values would be treated as blank, empty, or zero in the current table.</p>
<p>
For more information about how null values interact with Visual FoxPro commands, see <a href="connull_values.htm">Handling Null Values</a>. </p>
<h4>Adding Comments to Fields</h4>
<p>
After you create a table in an open database, you can add a description of each table field to make your tables easier to understand and update. Visual FoxPro displays a field’s comment text in the <a href="wndproject_manager.htm">Project Manager</a> when you select the field in the list of fields for the table.</p>
<p class=label>
<b>To add a comment to a field in a database table</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter the text for your comment in the <b>Field Comment</b> box.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> function.</li>
</ul>
<p>
For example, you might want to clarify what is stored in the <code>unit_price</code> field in your <code>orditems</code> table by entering “Current retail price per unit” as comment text for the field:</p>
<pre><code>?DBSETPROP('orditems.price', 'field', 'comment', ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Current retail price per unit’)
</code></pre>
<p>
For more information on using DBSETPROP(&nbsp;) to set properties on database table fields, see Chapter 6, <a href="dgcreating_databases.htm">Creating Databases</a>.</p>
<h3>Creating Default Field Values</h3>
<p>
If you want Visual FoxPro to fill the contents of a field automatically as you add a new record, you can create a <a href="glsdefault_value.htm">default value</a> for the field. The default value is applied whether you enter data through a <a href="glsform.htm">form</a>, in a <a href="wndbrowse_window.htm">Browse</a> window, a <a href="glsview.htm">view</a>, or programmatically, and remains in the field until you enter a new value.</p>
<p>
You create default values either through the Table Designer or through the language. You can specify default values for any data type except <a href="congeneral_field_type.htm">General</a>.</p>
<p class=label>
<b>To assign a default value to a database table field</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter the value in the <b>Default value</b> box in the <b>Field validation</b> area.<p class=tl>
-or-</P></li>
<li>
Use the DEFAULT clause of the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command.</li>
</ul>
<p>
For example, you might want your application to limit the amount of merchandise a new customer can order until you’ve had time to complete a credit check and determine the amount of credit you’re willing to extend to that customer. The following example creates a <code>maxordamt</code> field with a default value of 1000:</p>
<pre><code>CREATE TABLE customer (cust_id C(6), company C(40), contact C(30), ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maxordamt Y(4) DEFAULT 1000)
</code></pre>
<p>
If your <code>customer</code> table already included the <code>maxordamt</code> column, you could add a default value for the column with this command:</p>
<pre><code>ALTER TABLE customer ALTER COLUMN maxordamt SET DEFAULT 1000
</code></pre>
<h4>Using Default Values to Speed Data Entry</h4>
<p>
You can use <a href="glsdefault_value.htm">default values</a> to speed data entry for your application’s users, enabling them to skip a field unless they want to enter a different value. For example, if your business primarily deals with domestic customers, you may want the <code>country</code> field in the <code>customer</code> table in a database to be filled with the name of your country automatically. If you’re entering a customer record for an international customer, you can then overwrite the name of your country with their country name.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If one of your application’s business rules requires that a field contain an entry, providing a default value helps to ensure that a particular <a href="glsfield_level_rule.htm">field-level</a> or <a href="glsrecord_level_rule.htm">record-level</a> rule will not be violated.</p>
<p>
If you remove or delete a table from a database, all default values bound to that table are deleted from the database. <a href="glsstored_procedure.htm">Stored procedures</a> referenced by the removed or deleted default value remain even after the default value has been removed.</p>
<p>
When you don’t specify a default value, a blank value (as defined for each data type) is inserted unless <a href="lngset_null.htm">SET NULL</a> is on. This preserves backward compatibility with any existing FoxPro code you might have.</p>
<p>
You can use .NULL. as a default value if you want the field to use null values. Whether SET NULL is on or off, if you use .NULL. as a default value, Visual FoxPro inserts .NULL. for all commands except APPEND BLANK.</p>
<h4>Allowable Default Values</h4>
<p>
You can specify default values that are either scalar values (such as “a number”) or expressions that evaluate to a scalar quantity. You can also specify any valid Xbase expression that returns a value consistent with the data type for the field.</p>
<p>
Visual FoxPro evaluates <a href="glsexpression.htm">expressions</a> for data type when the table structure is closed. If the data type doesn’t match the associated field type, Visual FoxPro generates an error. If the expression is a <a href="glsuser_defined_function_udf_.htm">user-defined function</a> (UDF) or contains a UDF, it is not evaluated.</p>
<p>
When you create the default value through the language, the CREATE TABLE or ALTER TABLE commands will generate an error if the data types do not match. If the expression is a UDF or contains a UDF, it is not evaluated at CREATE time and no error is returned.</p>
<h4>When Default Values are Applied</h4>
<p>
<a href="glsdefault_value.htm">Default values</a> are evaluated (if necessary) and placed in the appropriate fields when the APPEND, APPEND BLANK, or INSERT commands are issued.</p>
<p>
When you assign values with the APPEND FROM or INSERT - SQL commands, Visual FoxPro assigns default values to any fields not explicitly assigned. The APPEND FROM and INSERT - SQL commands also respect default values. However, when either of these commands is issued, defaults will not overwrite existing values in fields. If appended or inserted fields contain values, the existing value is retained as the record is appended or inserted and the default value is not applied.</p>
<h4>Using Default Values to Auto-Populate NOT NULL Fields</h4>
<p>
<a href="glsdefault_value.htm">Default values</a> are particularly useful to automatically populate fields that do not allow <a href="glsnull_value.htm">null values</a>. When you add a new record, default values are applied first, then each field is checked in definition order for missing information. This ensures fields designated as NOT NULL have the opportunity to be populated with default values before the NOT NULL constraint is applied.</p>
<h4>Specifying an Input Mask</h4>
<p>
By specifying an <a href="glsinput_mask.htm">input mask</a>, you define the punctuation, spacing, and other format attributes of values as they are entered into the field. The values are then stored in a uniform manner which can reduce data entry errors and make processing more efficient. For example, adding a mask to a numeric field storing telephone numbers helps the user to quickly fill out the field because the punctuation and spaces are already provided by the mask.</p>
<p class=label>
<b>To provide an input mask</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter the mask in the <b>Input mask</b> box in the <b>Display</b> area.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> function to set the InputMask property.<p class=tl>
For example, the following code specifies an input mask for a date:</P><pre><code>DBSetProp("orders.postalcode","field","InputMask", "99999-9999")
</code></pre>
</li>
</ul>
<h3>Controlling Display of a Field</h3>
<p>
Additional properties for fields allow you to control how a field and its values appear on <a href="glsform.htm">forms</a>, <a href="wndbrowse_window.htm">Browse windows</a>, and reports. You can specify a display format, a default field <a href="glscaption.htm">caption</a>, and a default <a href="glsclass.htm">class</a> and <a href="glsclass_library.htm">class library</a>.</p>
<h4>Defining a Format</h4>
<p>
A format provides an output mask that determines the manner in which the value of a field is displayed in a form, Browse window, or report. For example:</p>
<p class=label>
<b>To provide a format</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer,</a> enter the mask in the <b>Format</b> box in the <b>Display</b> area.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> function to set the Format property.</li>
</ul>
<p>
For example, the following code specifies a display format for a postal code:</p>
<pre><code>DBSetProp("orders.postalcode","field","Format","@R 99999-9999")
</code></pre>

<h4><a name="dgcreating_captions_for_fields"></a>Creating Captions for Fields</h4>
<p>
You can create a <a href="glscaption.htm">caption</a> for each field in a database table. Visual FoxPro displays a field’s caption text as the column header in a Browse window and as the default header name in a form grid.</p>
<p class=label>
<b>To add a caption to a field in a database table</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter the text for your caption in the <b>Caption</b> box in the <b>Display</b> area.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdbsetproplp_rp.htm">DBSETPROP(&nbsp;)</a> function.</li>
</ul>
<p>
For example, you might want to create a caption for the <code>fax</code> field in your <code>supplier</code> table by entering “Supplier_Fax” as the caption for the field:</p>
<pre><code>?DBSETPROP('supplier.fax', 'field', 'caption', 'Supplier_Fax')
</code></pre>
<p>
For more information on using DBSETPROP(&nbsp;) to set properties on database table fields, see Chapter 6, <a href="dgcreating_databases.htm">Creating Databases</a>.</p>
<h4>Setting a Default Class</h4>
<p>
To save time later when you're creating <a href="glsform.htm">forms</a>, you can set a default <a href="glsclass.htm">class</a> for a field. Once set, each time you add the field to a form, the <a href="glscontrol.htm">control</a> on the form uses the class you specify as the default. For example, character fields automatically appear as text box controls when you add them to a form. If you want to automatically create a combo box control instead when you use the field in a form, you can set that class as the default for this field. You can also use <a href="glsclass_library.htm">class libraries</a> that you've created.</p>
<p class=label>
<b>To set a default class</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, choose a class and library in the <b>Default Class</b> box and the <b>Default Library</b> box.</li>
</ul>
<p>
If you find you're often changing the library and class for your fields, you can map the fields data types to a library and class in the <a href="cmdoptions_dialog_box.htm">Options dialog box</a>. For more information about mapping your field data types to classes, see Chapter 3, <a href="igconfiguring_visual_foxpro.htm">Configuring Visual FoxPro</a>, in the <i>Installation Guide</i>. For more information about creating classes, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a>, in this book.</p>
<h3>Enforcing Business Rules</h3>
<p>
You can enforce business rules for data entry by creating field-level and record-level rules, called <a href="glsvalidation.htm">validation rules</a>, to control the data entered into database table fields and records. Field- and record-level rules compare the values entered against the rule expressions that you define. If the entered value does not meet the requirements of the rule, the value is rejected. Validation rules exist only in database tables.</p>
<p>
Field- and record-level rules enable you to control the types of information entered into a table, whether the data is accessed through a <a href="wndbrowse_window.htm">Browse window</a>, a <a href="glsform.htm">form</a>, or programmatically through the language. They allow you to consistently enforce the rule for a field with less coding than if you wrote the rule expression as code in a VALID clause on a form, or in a portion of program code. In addition, the rules you establish in a database are enforced for all users of the table, regardless of the requirements of the application.</p>
<p>
You can also create <a href="glscandidate_index.htm">candidate</a> or <a href="glsprimary_index.htm">primary</a> indexes that prevent duplicate entries in a field, and triggers to enforce <a href="glsreferential_integrity.htm">referential integrity</a> or perform other actions when the data in your database is changed.</p>
<h4>Knowing When Constraints Are Enforced</h4>
<p>
You choose database constraints based on the level at which you want to enforce a business or referential integrity rule, as well as the action that causes the constraint to be activated. The following table lists the data validation constraints in the order in which they are enforced by the Visual FoxPro engine, the level at which they are applied, and when the engine activates the validation.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=34%><b>Enforcement Mechanism</b></td>
<td class=label width=24%><b>Level</b></td>
<td class=label width=42%><b>Activated</b></td>
</tr>
<tr valign=top>
<td width=34%>NULL validation</td>
<td width=24%>Field or column</td>
<td width=42%>When you move out of the field/column in a browse, or when the field value changes during an INSERT or REPLACE.</td>
</tr>
<tr valign=top>
<td width=34%>Field-level rules</td>
<td width=24%>Field or column</td>
<td width=42%>When you move out of the field/column in a browse, or when the field value changes during an INSERT or REPLACE.</td>
</tr>
<tr valign=top>
<td width=34%>Record-level rules</td>
<td width=24%>Record </td>
<td width=42%>When the record update occurs.</td>
</tr>
<tr valign=top>
<td width=34%>Candidate/primary index</td>
<td width=24%>Record</td>
<td width=42%>When the record update occurs.</td>
</tr>
<tr valign=top>
<td width=34%>VALID clause</td>
<td width=24%>Form</td>
<td width=42%>When you move off the record.</td>
</tr>
<tr valign=top>
<td width=34%>Triggers</td>
<td width=24%>Table</td>
<td width=42%>When table values change during an INSERT, UPDATE, or DELETE event.</td>
</tr>
</table><br>
<p>
Constraints are activated in the order in which they appear in the table. The first violation of any validation test stops the command.</p>
<p>
Candidate and primary indexes are explained later in this chapter in the section “<a href="#dgcontrolling_duplicate_values">Controlling Duplicate Values</a>.”</p>
<h4>Limiting Values in a Field</h4>
<p>
When you want to control the type of information a user can enter into a field, and you can validate the data in a field independently of any other entry in the record, you use a field-level validation rule. For example, you might use a field-level validation rule to ensure that the user doesn’t enter a negative number in a field that should contain only positive values. You can also use a field-level rule to compare the values entered in a field against the values in another table.</p>
<p>
You should not create field- or record-level rules that are application-specific. Use field- and record-level validation rules to enforce data integrity and business rules that always apply to the data in your database, regardless of who may access the data. For example, you might create a rule that compares the entry in the <code>postal_code</code> field of a table against a lookup table that contains the postal abbreviation codes for your country, and rejects any value that is not already present as a valid postal code abbreviation.</p>
<p class=label>
<b>To create a field-level rule</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter the rule expression in the <b>Rule</b> box in the <b>Field validation</b> area.<p class=tl>
-or-</P></li>
<li>
Use the CHECK clause of the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> command.<p class=tl>
-or-</P></li>
<li>
Use the SET CHECK clause of the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
For example, the following code adds a field-level validation rule to the <code>orditems</code> table requiring that numbers entered into the <code>quantity</code> field be 1 or greater:</p>
<pre><code>ALTER TABLE orditems 
 &nbsp;&nbsp; ALTER COLUMN quantity SET CHECK quantity &gt;= 1
</code></pre>
<p>
When the user attempts to enter a value less than 1, Visual FoxPro displays an error and the value is rejected.</p>
<p>
You can customize the message displayed when the rule is violated by adding validation text to the field. The text you enter is displayed instead of the default error message.</p>
<p class=label>
<b>To add a custom error message to a field-level rule</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter the error message you want in the <b>Message</b> box in the <b>Field validation</b> area.<p class=tl>
-or-</P></li>
<li>
Use the optional ERROR clause with the CHECK clause of the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> or <a href="lngalter_table___sql.htm">ALTER TABLE</a> commands.</li>
</ul>
<p>
For example, the following code adds both a field-level validation rule for the <code>orditems</code> table requiring that numbers entered into the <code>quantity</code> column must be 1 or greater, as well as a custom error message:</p>
<pre><code>ALTER TABLE orditems ;
 &nbsp; ALTER COLUMN quantity SET CHECK quantity &gt;= 1 ;
 &nbsp; ERROR "Quantities must be greater than or equal to 1"
</code></pre>
<p>
When the user attempts to enter a value less than 1, Visual FoxPro displays an error with the custom error message you defined, and rejects the failed value. You can also use the SET CHECK clause of the ALTER TABLE command with the optional ERROR clause to create a custom error message.</p>
<p>
<b>Knowing When Field-Level Rules are Checked</b></p>
<p>
Field-level rules are checked when the field’s value changes. Unlike <a href="glstrigger.htm">triggers</a>, field-level rules fire even if data is buffered. When you work with data in a Browse window, form, or other window, Visual FoxPro checks field-level rules as you move away from the field. If a field value has not been changed, the rule is not checked. This means that you are free to tab through fields without the system validating any of the data.</p>
<p class=label>
<b>Field-level Rule Checking</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=31%><b>Data entry method</b></td>
<td class=label width=34%><b>Window or command</b></td>
<td class=label width=35%><b>Field-level rule checked</b></td>
</tr>
<tr valign=top>
<td width=31%>User interface</td>
<td width=34%><a href="wndbrowse_window.htm">Browse window</a><br>
<a href="glsform.htm">Form</a><br>
Other window</td>
<td width=35%>As you move away from the field, if the field value has changed. (If the field value has not been changed, the rule is not checked.)</td>
</tr>
<tr valign=top>
<td width=31%>Commands that do not specify fields</td>
<td width=34%><a href="lngappend.htm">APPEND</a><br>
<a href="lngappend_general.htm">APPEND GENERAL</a><br>
<a href="lngappend_memo.htm">APPEND MEMO</a><br>
<a href="lngbrowse.htm">BROWSE</a><br>
<a href="lngchange.htm">CHANGE</a><br>
<a href="lngdelete.htm">DELETE</a><br>
<a href="lngedit.htm">EDIT</a><br>
<a href="lnggather.htm">GATHER</a></td>
<td width=35%>As field value changes, in field definition order.</td>
</tr>
<tr valign=top>
<td width=31%></td>
<td width=34%><a href="lngappend.htm">APPEND</a> BLANK<br>
<a href="lnginsert.htm">INSERT</a><br>
<a href="lnginsert___sql.htm">INSERT - SQL</a></td>
<td width=35%>As the record is appended or inserted.</td>
</tr>
<tr valign=top>
<td width=31%>Commands that specify fields</td>
<td width=34%><a href="lngupdate.htm">UPDATE</a><br>
<a href="lngupdate___sql.htm">UPDATE - SQL</a><br>
<a href="lngreplace.htm">REPLACE</a></td>
<td width=35%>In the order in which fields are specified in the command.</td>
</tr>
</table><br>
<h4>Validating Record-Level Values</h4>
<p>
You use record-level validation rules to control the type of information a user can enter into a record. Record-level validation rules typically compare the values of two or more fields in the same record to make sure they follow the business rules established for the database. For example, you can use a record-level validation rule to ensure that one field’s value is always greater than that of another in the same record.</p>
<p class=label>
<b>To create a record-level validation rule and custom error message</b>
<ul type=disc>
<li>
In the <b>Table</b> tab of the <a href="wndtable_designer.htm">Table Designer</a>, enter the rule and error message you want in the <b>Rule</b> and <b>Message</b> boxes.<p class=tl>
-or-</P></li>
<li>
Use the CHECK clause of the <a href="lngcreate_table___sql.htm">CREATE TABLE</a> or <a href="lngalter_table___sql.htm">ALTER TABLE</a> commands.</li>
</ul>
<p>
For example, you might want to ensure employees are 18 years or older when hired. The following code adds a record-level validation rule and error text for the <code>employee</code> table requiring that the date of hire entered into the <code>hire_date</code> column is greater than or equal to their birth date plus 18 years:</p>
<pre><code>ALTER TABLE employee SET CHECK ;
 &nbsp; hire_date &gt;= birth_date + (18 * 365.25) ;
 &nbsp; ERROR "Employees must be 18 years or older by date of hire"
</code></pre>
<p>
If the user enters an employee record with an invalid date, Visual FoxPro displays an error with the custom error message you defined, and does not update the record.</p>
<p>
You can also use the SET CHECK clause of the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command to create a record-level validation rule. You should ensure that any rules specified for fields do not conflict semantically with the rules you define for the table. Visual FoxPro makes no attempt to compare the field-level and record-level expressions for consistency.</p>
<p>
<b>Knowing When Record-Level Rules are Checked</b></p>
<p>
Record-level rules, like field-level rules, activate when the record value changes. No matter how you work with data, whether in a Browse window, form, or other user interface window, or through commands that alter data, Visual FoxPro checks record-level rules as you move the record pointer off the record. If no values within the record have changed, the record-level rule is not checked when you move the record pointer. You are free to move through records without the system validating any of the data.</p>
<p>
If you modify a record, but don't move the record pointer, and then close the Browse window, the rule is still checked. You're warned of any errors that occur, and the Browse window is closed.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Do not include any commands or functions in your validation rules that attempt to move the record pointer in the current <a href="glswork_area.htm">work area</a> (that is, in the work area whose rules are being checked). Including commands or functions such as SEEK, LOCATE, SKIP, APPEND, APPEND BLANK, INSERT, or AVERAGE, COUNT, BROWSE, and REPLACE FOR in validation rules may cause them to trigger recursively, creating an error condition.</p>
<p>
Unlike <a href="glstrigger.htm">triggers</a>, record-level rules fire even if data is buffered. When a record-level rule fires during a running application, you need to include error handling code. Typically, this will mean not allowing the application to leave the form (or change the active environment, to be more generic) until the user either corrects the reported error or cancels the update.</p>
<h4>Removing a Table with Associated Rules from a Database</h4>
<p>
If you remove or delete a table from a database, all field-level and record-level rules bound to that table are deleted from the database. This is because the rules are stored in the .dbc file, and removing a table from the database breaks the link between the .dbf file and its .dbc file. However, <a href="glsstored_procedure.htm">stored procedures</a> referenced by the removed or deleted rule are not deleted. They are not automatically removed, because they may be used by rules in other tables that remain in the database.</p>
<h3>Using Triggers</h3>
<p>
A trigger is an expression that is bound to a table and is invoked when any of the table’s records are modified by one of the specified data-modification commands. Triggers can be used to perform any side-effect operations that a database application requires when data is modified. For example, you can use triggers to:</p>
<ul type=disc>
<li>
Log database modifications.</li>
<li>
Enforce <a href="glsreferential_integrity.htm">referential integrity</a>.</li>
<li>
Create an automatic reorder for a product that is low on stock.</li>
</ul>
<p>
Triggers are created and stored as <a href="glsproperty.htm">properties</a> on a specific table. If you remove a table from a database, the triggers associated with that table are deleted. Triggers fire after all other checks, such as validation rules, primary key enforcement, and null value enforcement, are performed. And unlike field- and record-level validation rules, triggers don’t fire on buffered data.</p>
<h4>Creating Triggers</h4>
<p>
You create triggers using the Table Designer or the CREATE TRIGGER command. For each table, you can create one trigger for each of the three events: INSERT, UPDATE, and DELETE. A table can have a maximum of three triggers at any one time. A trigger must return a true (.T.) or false (.F.) value.</p>
<p class=label>
<b>To create a trigger</b>
<ul type=disc>
<li>
In the <b>Table</b> tab of the <a href="wndtable_designer.htm">Table Designer</a>, enter the trigger expression or the name of a stored procedure containing the trigger expression in the <b>Insert trigger</b>, <b>Update trigger</b>, or <b>Delete trigger</b> box.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_trigger.htm">CREATE TRIGGER</a> command.</li>
</ul>
<p>
For example, perhaps each time Tasmanian Traders sells an item, they want to compare the remaining <code>Units_in_stock</code> against the <code>Reorder_level</code> and be notified if they need to reorder that item. You can create an Update trigger on the <code>products</code> table to accomplish this. Every time a product is sold, the Update trigger will fire and the <code>Units_in_stock </code>field<code> </code>will be updated to reflect the remaining items in stock.</p>
<p>
To create the trigger, you can specify <code>updProductsTrigger( )</code> as your Update trigger for the <code>products</code> table. You can add a field to <code>products</code>, named <code>reorder_amount</code>, which stores the amount you want to order each time you reorder the item, and create a <code>reorder</code> table with the fields: <code>product_id</code> and <code>reorder_amount</code>. You can then add this code to your stored procedure:</p>
<pre><code>PROCEDURE updProductsTrigger
 &nbsp; IF (units_in_stock+units_on_order) &lt;= reorder_level
 &nbsp; INSERT INTO Reorder VALUES(Products.product_id, ;
 &nbsp;&nbsp; Products.reorder_amount)
 &nbsp; ENDIF&nbsp;&nbsp; 
ENDPROC
</code></pre>
<p>
You can create similar triggers for an insert or delete event by using the FOR INSERT or FOR DELETE clause, respectively, instead of the FOR UPDATE clause. If you attempt to create a trigger that already exists for a particular event and table while <a href="lngset_safety.htm">SET SAFETY</a> is on, Visual FoxPro asks you if you want to overwrite the existing trigger.</p>
<h4>Removing or Deleting Triggers</h4>
<p>
You can remove a trigger from a database table through the interface or with the DELETE TRIGGER command.</p>
<p class=label>
<b>To delete a trigger</b>
<ul type=disc>
<li>
In the <b>Table</b> tab of the <a href="wndtable_designer.htm">Table Designer</a>, select the trigger expression in the <b>Insert trigger</b>, <b>Update trigger</b>, or <b>Delete trigger</b> box and delete it.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdelete_trigger.htm">DELETE TRIGGER</a> command.</li>
</ul>
<p>
The following example removes the update trigger for the <code>customer</code> table:</p>
<pre><code>DELETE TRIGGER ON customer FOR UPDATE
</code></pre>
<p>
If you remove or delete a table from a database, all triggers bound to that table are deleted from the database. However, <a href="glsstored_procedure.htm">stored procedures</a> referenced by the removed or deleted trigger are not deleted.</p>
<h4>Modifying Triggers</h4>
<p>
You can modify triggers through the Table Designer or through the language.</p>
<p class=label>
<b>To modify a trigger</b>
<ul type=disc>
<li>
In the <b>Table</b> tab of the <a href="wndtable_designer.htm">Table Designer</a>, enter the new trigger expression in the <b>Insert trigger</b>, <b>Update trigger</b>, or <b>Delete trigger</b> box.<p class=tl>
-or-</P></li>
<li>
Issue the <a href="lngset_safety.htm">SET SAFETY OFF</a> command, and then use the <a href="lngcreate_trigger.htm">CREATE TRIGGER</a> command.</li>
</ul>
<p>
When you modify a trigger by first issuing the <a href="lngset_safety.htm">SET SAFETY</a> OFF command and then re-creating the trigger, the old trigger expression is automatically deleted and replaced by the re-created trigger expression.</p>
<h3>Using Triggers to Build Referential Integrity</h3>
<p>
Visual FoxPro provides a <a href="cmdreferential_integrity_builder.htm">Referential Integrity Builder</a> to generate triggers and stored procedures that will enforce Referential Integrity (RI) for your database. For more information on using the RI Builder, see Chapter 6, <a href="dgcreating_databases.htm">Creating Databases</a>.</p>
<h3>Modifying the Table Structure</h3>
<p>
After you’ve built a table you can always modify the table structure and properties. You may want to add, change or delete field names, widths, data types, change default values or rules, or add comments or captions.</p>
<p>
You can open the Table Designer to modify your table’s structure, or you can make changes programmatically using the ALTER TABLE command. Make sure you have exclusive access to the table before modifying its structure.</p>
<p class=label>
<b>To modify the structure of a table with the Table Designer</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the table name and then choose <b>Modify</b>.<p class=tl>
-or-</P></li>
<li>
In the <a href="wnddatabase_designer.htm">Database Designer</a>, select the table in the schema and choose <b>Modify</b> from the <b>Database</b> menu.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngmodify_structure.htm">MODIFY STRUCTURE</a> command.</li>
</ul>
<p>
For example, you can modify the structure of the database table <code>employee</code> with the following commands:</p>
<pre><code>OPEN DATABASE testdata
USE employee EXCLUSIVE
MODIFY STRUCTURE
</code></pre>
<p>
Each of the previous options opens the Table Designer.</p>
<p class=label>
<b>To modify the structure of a table programmatically</b>
<ul type=disc>
<li>
Use the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
The ALTER TABLE command offers extensive clauses that enable you to add or drop table fields, create or drop primary or unique keys or foreign key tags, and rename existing fields. Some clauses apply only to tables associated with a database. A few specific examples are included in this section.</p>
<h3>Adding Fields</h3>
<p>
You can add a new field to a table with the Table Designer or with the language.</p>
<p class=label>
<b>To add a field to a table</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, choose <b>Insert</b>.<p class=tl>
-or-</P></li>
<li>
Use the ADD COLUMN clause of the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
For example, the following command adds a field called <code>fax</code> to the <code>customer</code> table and allows the field to have null values:</p>
<pre><code>ALTER TABLE customer ADD COLUMN fax c(20) NULL
</code></pre>
<h3>Deleting Fields</h3>
<p>
You can delete an existing field from a table with the Table Designer or with the language.</p>
<p class=label>
<b>To delete a field from a table</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, select the field and choose <b>Delete</b>.<p class=tl>
-or-</P></li>
<li>
Use the DROP COLUMN clause of the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
For example, the following command drops the field called <code>fax</code> from the <code>customer</code> table:</p>
<pre><code>ALTER TABLE customer DROP COLUMN fax 
</code></pre>
<p>
Removing a field from a table also removes the field’s default value setting, rule definitions, and caption. If index key or trigger expressions reference the field, the expressions become invalid when the field is removed. The invalid index key or trigger expression will not generate an error until <a href="glsrun_time.htm">run time</a>.</p>
<h3>Renaming Fields</h3>
<p>
You can rename existing table fields in two ways.</p>
<p class=label>
<b>To rename a table field</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter a new field name in the <b>Name</b> box for the existing field.<p class=tl>
-or-</P></li>
<li>
Use the RENAME COLUMN clause of the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
For example, to rename the column <code>company</code> in the <code>customer</code> table, you could issue the following command:</p>
<pre><code>ALTER TABLE customer RENAME COLUMN company TO company_long_new_name
</code></pre>
<p>
In the previous example, the new field name takes advantage of the ability to create long field names in database tables.</p>
<h3>Setting or Changing Field-Level or Table Rules</h3>
<p>
You can set new field-level or table rule expressions and rule text, as well as alter rules and text you established with CREATE TABLE or ALTER TABLE commands.</p>
<p class=label>
<b>To change an existing rule</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, select the <b>Table</b> tab and enter the new rule expression or rule text in the <b>Rule</b> and <b>Message</b> boxes in the <b>Record validation</b> section.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
To view the current rule expression and associated text, you can use the <a href="lngdbgetproplp_rp.htm">DBGETPROP(&nbsp;)</a> function; these values are read-only for tables and can only be changed using the ALTER TABLE command.</p>
<h3>Setting or Changing Default Values</h3>
<p>
You can set or change default values for table fields after you’ve built your table.</p>
<p class=label>
<b>To change an existing default value</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, enter the new value in the <b>Default value</b> box of the <b>Fields</b> tab.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
To view the current default value for a field, use the <a href="lngdbgetproplp_rp.htm">DBGETPROP(&nbsp;)</a> function; these values are read-only for tables and can only be changed using the ALTER TABLE command.</p>

<h2><a name="dgworking_with_records"></a>Working with Records</h2>
<p>
Once you’ve designed and created the structure for a table, you can store data in the table by adding new records. Later, you’ll change and delete existing records. Each of these tasks can be accomplished either through the interface or by using commands. This section focuses primarily on working with records programmatically. For more information about working with records through the interface, see Chapter 2, <a href="ugcreating_tables_and_indexes.htm">Creating Tables and Indexes</a>, in the <i>User’s Guide</i>.</p>
<h3>Adding Records</h3>
<p>
When you first create a Visual FoxPro table, it is open but empty. If you try to store data to a table without first creating a record in the table, nothing happens. The first step in adding records to a new table is to add rows to store the new data.</p>
<p class=label>
<b>To add records to a table</b>
<ul type=disc>
<li>
Use the <a href="lnginsert___sql.htm">INSERT - SQL</a> command.</li>
</ul>
<p>
The <a href="lnginsert___sql.htm">INSERT - SQL</a> command can be used to insert values specified with the command or to insert values from an <a href="glsarray.htm">array</a> or <a href="glsvariable.htm">variable</a>. For example, to insert a new record into the TasTrade database <code>customer</code> table, you could issue the following command:</p>
<pre><code>INSERT INTO customer (cust_id, company, contact) ;
 &nbsp; VALUES ("SMI007", "Smith's Delicatessen", "Sarah Smith")
</code></pre>
<p>
The INSERT - SQL command is useful with remote data, as it uses <a href="glsansi.htm">ANSI</a>-compliant SQL syntax.</p>
<p>
You can also use the APPEND BLANK command followed by the REPLACE command to add a blank record to a table and then store data in a field. The APPEND BLANK appends a new, blank record to a table. The REPLACE command replaces the current value of a field, even an empty field, with a new value.</p>
<p>
The <a href="lngreplace.htm">REPLACE</a> command requires:</p>
<ul type=disc>
<li>
An open <a href="glstable.htm">table</a>.</li>
<li>
An existing <a href="glsrecord.htm">record</a>.</li>
<li>
The name of the <a href="glsfield.htm">field</a> in which to store the value.</li>
<li>
A value for each field that is valid for the field’s <a href="glsdata_type.htm">data type</a>.</li>
</ul>
<p>
The following example uses the <a href="lngappend.htm">APPEND BLANK</a> command to create one record in which you can store data using the REPLACE command:</p>
<pre><code>APPEND BLANK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; record now available
REPLACE lastname WITH "SMITH"&nbsp;&nbsp; &amp;&amp; store character value to the field 
</code></pre>
<p>
You can use the <a href="lngupdate___sql.htm">UPDATE - SQL</a> command instead of the REPLACE command to update records in a table.</p>
<h3>Appending Records from Another Table</h3>
<p>
Another way to store data in records is to copy them from other tables or files. For example, you can <a href="glsappend.htm">append</a> records from another table or file.</p>
<p class=label>
<b>To append records from another file</b>
<ul type=disc>
<li>
Use the <a href="lngappend_from.htm">APPEND FROM</a> command.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngimport.htm">IMPORT</a> command.</li>
</ul>
<p>
Records can accept data directly, as in the previous example, where the INSERT command specified the text to be inserted into specific fields in the <code>customer</code> table, as well as from <a href="glsconstant.htm">constants</a>, <a href="glsvariable.htm">variables</a>, <a href="glsarray.htm">arrays</a>, <a href="glsobject.htm">objects</a>, and other data sources. For more information about other ways to import data, see Chapter 9, <a href="ugimporting_and_exporting_data.htm">Importing and Exporting Data</a>, in the <i>User’s Guide</i>.</p>
<h3>Adding Records in Browse Mode</h3>
<p>
If you want to add a new record while viewing a table in browse mode, you can choose Append Record from the <a href="cmdtable_menu.htm">Table menu</a>. Conversely, if you want to prevent users from being able to append a new record while in browse mode, you can use the NOAPPEND clause of the <a href="lngbrowse.htm">BROWSE</a> command.</p>
<h3>Entering Data in a Table</h3>
<p>
You can enter data in a table interactively, through a <a href="wndbrowse_window.htm">Browse window</a>, or programmatically, with the <a href="lngreplace.htm">REPLACE</a> or <a href="lngupdate___sql.htm">UPDATE - SQL</a> commands. When you use the REPLACE or UPDATE - SQL in a multi-user application, you can turn on record or table buffering, which enables you to edit data without locking the record until you want to commit changes. For more information on record and table buffering, see Chapter 17, <a href="dgprogramming_for_shared_access.htm">Programming for Shared Access</a>.</p>
<h3>Editing Records in a Table</h3>
<p>
You can display and edit existing records in a table through the interface or programmatically.</p>
<p class=label>
<b>To display records for editing</b>
<ul type=disc>
<li>
Use the <a href="lngedit.htm">EDIT</a> command.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngchange.htm">CHANGE</a> command.</li>
</ul>
<p>
For example, the following code displays the <code>customer</code> table in a Browse window in edit mode:</p>
<pre><code>USE customer
EDIT
</code></pre>
<p>
If you want to use a <a href="glsform.htm">form</a> to edit a record, create a <a href="glstext_box_.htm">text box</a> in your form and set its DataSource <a href="glsproperty.htm">property</a> to the name of the table you want to edit. For more information about forms, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>.</p>
<p>
You can also use the <a href="lngchange.htm">CHANGE</a> and <a href="lngedit.htm">EDIT</a> commands to make changes to specific fields in a table.</p>
<h3>Adding Graphics to a Table</h3>
<p>
You can store graphics in a Visual FoxPro table by creating a <a href="congeneral_field_type.htm">General field</a> and importing or pasting OLE objects, such as bitmaps or charts, into the field. The <a href="lngappend_general.htm">APPEND GENERAL</a> command places an OLE object into a General field. The following example stores a Microsoft Excel chart file from the default Visual FoxPro directory into a General field named Chart:</p>
<pre><code>APPEND GENERAL Chart FROM "CHART1.CLX" CLASS EXCELCHART
</code></pre>
<p>
For more information about working with OLE objects in Visual FoxPro tables, see Chapter 16, <a href="dgadding_ole.htm">Adding OLE</a>.</p>
<h3>Entering Null Values in Fields</h3>
<p>
You can enter a <a href="glsnull_value.htm">null value</a> in a field through the language with the NULL token, or through the interface with a key combination if the field accepts null values.</p>
<p class=label>
<b>To store a null value in a field</b>
<ul type=disc>
<li>
In a <a href="wndbrowse_window.htm">Browse</a> window or form control, press CTRL+0 (zero).<p class=tl>
-or-</P></li>
<li>
Use the NULL token.</li>
</ul>
<p>
For example, the following code replaces the existing value in the field <code>automobile</code> with a null value:</p>
<pre><code>REPLACE automobile WITH NULL 
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Use the <a href="lngset_nulldisplay.htm">SET NULLDISPLAY</a> command to specify the text displayed for null values.</p>
<h3>Deleting Records</h3>
<p>
You delete records by marking them for deletion, then removing the deleted records. Until you remove the records that are flagged for deletion, they are still on disk and can be unmarked and restored. This section describes how to mark, unmark, and remove records from your table.</p>
<h3>Marking Records for Deletion</h3>
<p>
You can mark records for deletion through the interface or with the <a href="lngdelete___sql.htm">DELETE - SQL</a> command.</p>
<p class=label>
<b>To mark a record for deletion</b>
<ul type=disc>
<li>
In a <a href="wndbrowse_window.htm">Browse</a> window, click the deletion marker to flag the record.<p class=tl>
-or-</P></li>
<li>
From the <a href="cmdtable_menu.htm">Table menu</a>, choose <b>Delete Records</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdelete___sql.htm">DELETE - SQL</a> command.</li>
</ul>
<p>
You can use the DELETE - SQL command to specify a range of records, as well as a condition based on a logical expression that records must meet to be marked for deletion. For example, the following code marks for deletion all product records with ‘T’ in the <code>Discontinu</code> field:</p>
<pre><code>USE products
DELETE FROM products WHERE discontinu = .T.
BROWSE
</code></pre>
<p>
Records you mark for deletion are not physically removed from the table until you issue a <a href="lngpack.htm">PACK</a> command. When you view the table in the Browse window, you’ll see that the deletion marker is flagged for each deleted record, but the record is still visible in the table, if <a href="lngset_deleted.htm">SET DELETED</a> is set to off. If SET DELETED is set to on, the records marked for deletion are excluded from the Browse window.</p>
<p>
The setting of the SET DELETED command also affects whether records marked for deletion are accessible by commands that operate on records. </p>
<h3>Retrieving Records Marked for Deletion</h3>
<p>
You can unmark records that were marked for deletion with the RECALL command. The RECALL command can recover records only if you have not issued a PACK or ZAP command, which physically deletes the records from the table.</p>
<p class=label>
<b>To unmark a record marked for deletion</b>
<ul type=disc>
<li>
In a <a href="wndbrowse_window.htm">Browse</a> window, click the deletion marker to unmark the record.<p class=tl>
-or-</P></li>
<li>
From the <a href="cmdtable_menu.htm">Table</a> menu, choose <b>Recall Records</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngrecall.htm">RECALL</a> command.</li>
</ul>
<p>
You can use the RECALL command to specify a range of records, as well as a condition based on a logical expression that records must meet to be unmarked for deletion. For example, the following code unmarks for deletion all product records with ‘T’ in the <code>discontinu</code> field:</p>
<pre><code>USE products 
RECALL FOR discontinu = .T.
BROWSE
</code></pre>
<p>
When you view the table in the Browse window, you’ll see that the deletion marker is not flagged for the records.</p>
<h3>Removing Records Marked for Deletion</h3>
<p>
After you’ve marked records for deletion, you can permanently remove them from disk through the interface or the language.</p>
<p class=label>
<b>To remove records marked for deletion from disk</b>
<ul type=disc>
<li>
In a <a href="wndbrowse_window.htm">Browse</a> window, choose <b>Remove Deleted Records</b> from the <b>Table</b> menu.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngpack.htm">PACK</a> command.</li>
</ul>
<p>
The PACK command has two clauses: MEMO and DBF. When you issue PACK without the MEMO or DBF clauses, records in both the table file and the associated memo file are removed. Make sure you have exclusive access to the table. For example, the following code removes records marked for deletion:</p>
<pre><code>USE customer EXCLUSIVE
PACK
</code></pre>
<p>
To delete records in the table file only and leave the memo file untouched, use PACK DBF.</p>
<h3>Conserving Space</h3>
<p>
Information in table <a href="conmemo_field_type.htm">memo fields</a> is stored in an associated memo file with the same name as the table and an .fpt extension. If you want to remove unused space from the memo file without removing records that are marked for deletion, issue the <a href="lngpack.htm">PACK</a> command with the MEMO clause. Make sure you have exclusive access to the table.</p>
<h3>Removing All Records from a Table</h3>
<p>
If you want to remove all records from a table, and leave just the table structure, you can use the <a href="lngzap.htm">ZAP</a> command. Issuing ZAP is equivalent to issuing DELETE ALL followed by PACK, but ZAP is much faster. Make sure you have exclusive access to the table.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Records zapped from the current table cannot be recalled.</p>

<h2><a name="dgindexing_tables"></a>Indexing Tables</h2>
<p>
When you want to navigate, view, or manipulate table records in a particular order, you use an index. Visual FoxPro uses indexes as ordering mechanisms to provide you with flexibility and power as you develop your application. You have the flexibility to create and use many different index keys for the same table, enabling you to work with records in different orders, according to your application’s requirements. You have the power to create custom relationships between tables based on their indexes, enabling you to access exactly the records you want.</p>
<p>
A Visual FoxPro index is a file that contains pointers that are logically ordered by the values of an index key. The index file is separate from the table’s .dbf file, and does not change the physical order of the records in the table. Rather, when you create an index, you create a file that maintains pointers to the records in the .dbf file. When you want to work with table records in a particular order, you choose an index to control the order and increase the speed in which the table is viewed and accessed.</p>
<h3>Creating One Index</h3>
<p>
When you first create a table, Visual FoxPro creates the table’s .dbf file and, if your table includes <a href="conmemo_field_type.htm">Memo</a> or <a href="congeneral_field_type.htm">General</a> fields, the associated .fpt file. You can choose to quickly add an index to a field as you define the field; otherwise, no index files are generated at that time. Records you enter into the new table are stored in the order you entered them; when you browse the new table, they appear in the order they were entered.</p>
<p>
Typically, you’ll want to be able to view and access the records in your new table in a specific order. For example, you may want to view the records in your customer table alphabetically by company name. When you want to control the order in which records are displayed and accessed, you create an index file for your table by creating the first ordering scenario, or index key, for your table. You can then set the order of the table to the new index key, and access the table’s records in the new order.</p>
<p class=label>
<b>To create an index key for a table</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, choose the Index tab and enter the information for one index key. Choose <b>Regular</b> as the index type.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngindex.htm">INDEX</a> command.</li>
</ul>
<p>
For example, the following code uses the table <code>customer</code> and creates an index key on the <code>city</code> field. The keyword TAG and the word “city” afterward specifies a name, or tag, for the new index key on the city field.</p>
<pre><code>USE customer
INDEX ON city TAG city
</code></pre>
<p>
In the previous example, the tag for the index key uses the same name as the field you’re indexing. The names don’t have to match — you could also choose to give the index key a different name.</p>
<p>
When you first create an index using the INDEX command, Visual FoxPro automatically uses the new index to set the order of the records in the table. For example, if you entered some data into the sample table created in the previous example, and then browsed the table, the records would appear in order by city.</p>
<h3>Creating an Index File</h3>
<p>
As you created the first index key for your table in the previous example, Visual FoxPro automatically created a new file, Customer.cdx, to store the new index key. The .cdx index file, called a <a href="glsstructural_compound_index.htm">structural compound index</a>, is the most common and important type of index file you’ll create in Visual FoxPro. The structural .cdx file:</p>
<ul type=disc>
<li>
Opens automatically when you open a table.</li>
<li>
Can contain multiple ordering scenarios, or index keys, in the same index file.</li>
<li>
Is automatically maintained as you add, change, or delete table records.</li>
</ul>
<p>
If a Visual FoxPro table has any index file associated with it at all, it is typically a structural .cdx file. The term “structural” refers to the fact that Visual FoxPro treats the file as an intrinsic part of the table and opens it automatically when you use a table. Whether you use the Table Designer or the simplest form of the INDEX command, as shown in the previous example, Visual FoxPro creates the .cdx file with the same base name as the current table, and stores the index information for the new key, or tag, inside. You use the structural .cdx file for frequently used index keys, such as those used for ordering records for daily viewing, data entry, SET RELATION linkages, <a href="glsrushmore_technology.htm">Rushmore</a>™ optimization on viewing records, or frequently printed reports.</p>
<p>
Visual FoxPro offers you two additional types of index files: the non-structural .cdx file and the single-key .idx file. Because the .cdx (or structural compound compact index) is the most important index type, most of the examples in this section will discuss using index keys in the .cdx file to order table records. The other two index file types are less frequently used and are discussed at the end of this section.</p>
<h3>Viewing Index Information</h3>
<p>
You can see how many records are indexed during the indexing process by setting <a href="lngset_talk.htm">TALK</a> to ON. The record interval displayed during indexing can be specified with <a href="lngset_odometer.htm">SET ODOMETER</a>. For more information about open index files, use the <a href="lngdisplay_status.htm">DISPLAY STATUS</a> command. This command lists the names of all open index files, their types (structural, .cdx, .idx), their index expressions, and the name of the master index file or master tag.</p>
<p>
The number of index files (.idx or .cdx) you can open is limited only by memory and system resources.</p>

<h3><a name="dgcontrolling_duplicate_values"></a>Controlling Duplicate Values</h3>
<p>
Visual FoxPro supports four types of indexes: primary, candidate, unique, and regular. These index types control whether duplicate values are permitted or prohibited in table fields and records.</p>
<h4>Preventing Duplicate Values</h4>
<p>
A <a href="glsprimary_index.htm">primary index</a> is an index that never permits duplicate values on the specified fields or expression. Primary indexes are principally used within the primary or “referenced” table for establishing referential integrity in a persistent relationship. You can create only one primary index for a table. Visual FoxPro returns an error if you specify a primary index on any field that already contains duplicate data.</p>
<p>
A <a href="glscandidate_index.htm">candidate index</a> is an index that never permits duplicate values on the specified <a href="glsfield.htm">fields</a> or <a href="glsexpression.htm">expression</a>. The name “Candidate” refers to the status of the index; since candidate indexes prohibit duplicate values, they qualify as “candidates” to be selected as the primary index on a table.</p>
<p>
You can create multiple candidate indexes for a table. You use candidate indexes as either the referenced or referencing index in a <a href="glspersistent_relationship.htm">persistent relationship</a> for establishing <a href="glsreferential_integrity.htm">referential integrity</a>.</p>
<p>
Visual FoxPro returns an error if you specify a candidate index on any field that already contains duplicate data.</p>
<h4>Setting a Primary or Candidate Index</h4>
<p>
You create primary and candidate indexes with the CREATE TABLE or ALTER TABLE commands. You can use both candidate and primary indexes in defining the “one” side of a <a href="glsone_to_many_relationship.htm">one-to-many</a> or a <a href="glsone_to_one_relationship.htm">one-to-one</a> persistent relationship.</p>
<p class=label>
<b>To create a primary or candidate index</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, select the <b>Index</b> tab and create an index, selecting <b>Primary</b> or <b>Candidate</b> as the index type.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
For example, either of the following commands make <code>cust_id</code> the primary key of the <code>customer</code> table:</p>
<pre><code>ALTER TABLE customer ADD PRIMARY KEY cust_id TAG cust_id
ALTER TABLE customer ALTER COLUMN cust_id c(5) PRIMARY KEY
</code></pre>
<p>
Primary and candidate indexes are stored in the structural .cdx file for a given table. The database stores the names of the indexes in the .cdx file and whether or not the indexes are Primary or Candidate. It is not possible to store these types of indexes in other .cdx files, nor is it possible to use .idx files for these types of indexes. The principal reason is that the index file that contains these indexes should always be open whenever their associated table is opened.</p>
<p>
<a href="glsprimary_key.htm">Primary keys</a> are part of a table within a database. If you free a table from a database, the primary key is removed.</p>
<p>
If you use a <a href="glsuser_defined_function_udf_.htm">user-defined function</a> in an index expression associated with a database, Visual FoxPro handles the expression in the same way it handles <a href="glsrule.htm">rule</a> and <a href="glstrigger.htm">trigger</a> expressions that contain UDFs.</p>
<h4>Permitting Duplicate Values</h4>
<p>
In Visual FoxPro, a <a href="glsunique_index.htm">unique index</a> does not prevent duplicate values from being created; rather, a unique index stores only the first occurrence of the value in the index file. In this sense, the word “unique” refers to the entries in the index file, which contains only unique values, because it doesn't store a particular key more than once, and ignores the second or later occurrence of a non-unique value. The table indexed by a unique index could contain duplicate values. Unique index types are provided primarily for backward compatibility.</p>
<p>
A <a href="glsregular_index.htm">regular index</a> is simply an index that is not unique, primary, or candidate. You use a regular index for ordering and seeking records, but not to enforce the uniqueness of the data in those records. You also use a regular index as the many side of a <a href="glsone_to_many_relationship.htm">one-to-many</a> persistent relationship.</p>
<p class=label>
<b>To create a regular index</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, select the <b>Index</b> tab and create an index, by selecting <b>Regular</b> as the index type.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngindex.htm">INDEX</a> command.</li>
</ul>
<p>
For example, the following commands make <code>city</code> a regular key for the <code>customer</code> table:</p>
<pre><code>USE customer 
INDEX ON city TAG city
</code></pre>
<h3>Creating Multiple Indexes</h3>
<p>
As you work with the records in your table, you’ll discover the need for accessing table records in several different sequences. For example, you might want to order the <code>customer</code> table by contact to quickly find a name you’re looking for, or by postal code to generate mailing labels that are presorted for more efficient mailing.</p>
<p>
You can create and store many different ordering scenarios for your table by creating multiple index keys for the same table. This enables you to order table records at different times according to different purposes.</p>
<p class=label>
<b>To create additional index keys for a table</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a> choose the Index tab and enter the information for additional index keys.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngindex.htm">INDEX</a> command.</li>
</ul>
<p>
For example, the following code creates two new index keys on the <code>employee</code> table: one on the <code>last_name</code> field and another on the <code>country</code> field:</p>
<pre><code>USE employee
INDEX ON last_name TAG last_name
INDEX ON country TAG country
</code></pre>
<p>
When you create an index tag without specifying the name of an index file, the tag is added automatically to the table’s structural .cdx index file. The following diagram shows a .cdx index file with three index tags.</p>
<p class=label>
<b>.cdx index contains multiple tags representing multiple record-ordering scenarios.</b></p>
<p>
<img src="afd07002.gif" border=0></p>
<p>
Two of the tags in the diagram, <code>emp_id</code> and <code>last_name</code>, represent indexes based on single fields. The <code>cntry_last</code> index orders records using a simple two-field index expression. For more information on building an index based on multiple fields, see “<a href="#dgindexing_on_expressions">Indexing on Expressions</a>” later in this chapter.</p>
<h3>Controlling the Order in which Records Are Accessed</h3>
<p>
After you create index keys for the <code>customer</code> table on the <code>company</code>, <code>city</code>, and <code>country</code> fields, you can access and display the table in different orders, simply by choosing the index key you prefer. You use the <a href="lngset_order.htm">SET ORDER</a> command to choose a specific index key as the ordering key for the table.</p>
<p>
For example, the following code opens a <a href="wndbrowse_window.htm">Browse window</a> displaying the records in the <code>customer</code> table in order by country:</p>
<pre><code>SET ORDER TO country
BROWSE
</code></pre>
<h3>Setting Record Order at Run-Time</h3>
<p>
Using the <a href="lngset_order.htm">SET ORDER</a> command, you can designate the controlling index file or tag. A table can have many index files open simultaneously. However, you determine the order in which the records in a table are displayed or accessed by setting one single-index (.idx) file (the controlling index file) or tag from a compound index (.cdx) file (the controlling tag) as the controlling index. Certain commands, such as SEEK, use the controlling index tag to search for records. You do not need to SET ORDER for running <a href="glsquery.htm">queries</a>.</p>
<h4>Setting Record Order Interactively in a Form </h4>
<p>
You can use <a href="lngset_order.htm">SET ORDER</a> at <a href="glsrun_time.htm">run time</a> to change the order of records in a <a href="glsform.htm">form</a>. For example, you might want to enable your application’s users to reorder the records in a <a href="glsgrid_.htm">grid</a> by clicking on the header of the column they want to order by.</p>
<p class=label>
<b>To sort the records in a grid by columns</b>
<ol>
<li>
Create a form with a <a href="ctlgrid_control.htm">Grid</a> control.<br><br></li>
<li>
Set the <a href="lngcolumncount_property.htm">ColumnCount</a> property of the grid to the number of fields you want displayed in the grid.<br><br></li>
<li>
In the <a href="lngclick_event.htm">Click</a> event for the header of each column in the grid, insert code that:<ul type=disc>
<li>
Sets the record order to an index key based on the column.<br><br></li>
<li>
Refreshes the form.</li>
</ul>
</li>
</ol>
<p>
For example, if you created a form based on the Customer table in the Testdata database with a grid containing four columns — <code>company</code>, <code>contact</code>, <code>postal code</code>, and <code>phone</code> — the grid would first appear sorted alphabetically because the records in that table were entered alphabetically.</p>
<p class=label>
<b>Customer table in grid, ordered alphabetically by company name</b></p>
<p>
<img src="afd07003.gif" border=0></p>
<p>
You could then enable the user to view the grid in <code>contact</code> or <code>postal_code</code> order by inserting the following code in the Click event of each column header:</p>
<p class=label>
<b>Sample event code to order records in a Grid by clicking on the column header</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Code</b></td>
<td class=label width=62%><b>Comment</b></td>
</tr>
<tr valign=top>
<td width=38%><pre><code>SET ORDER TO company
GO TOP
THISFORM.Refresh</code></pre>
</td>
<td width=62%>In the <code>Company</code> header Click event code, reorder the grid by the <code>company</code> index key and refresh the form to display records in order by company.</td>
</tr>
<tr valign=top>
<td width=38%><pre><code>SET ORDER TO contact
GO TOP
THISFORM.Refresh</code></pre>
</td>
<td width=62%>In the <code>Contact</code> header Click event code, reorder the grid by the <code>contact</code> index key and refresh the form to display records in order by contact name.</td>
</tr>
<tr valign=top>
<td width=38%><pre><code>SET ORDER TO
postalcode
GO TOP
THISFORM.Refresh</code></pre>
</td>
<td width=62%>In the <code>Postal_Code</code> header Click event code, reorder the grid by the <code>postalcode</code> index key and refresh the form to display records in order by postal code.</td>
</tr>
<tr valign=top>
<td width=38%><pre></pre>
</td>
<td width=62%>Because sorting by phone number is not relevant to this application, leave the <code>Phone</code> header Click event code blank.</td>
</tr>
</table><br>
<p>
In this example, when the <a href="glsform.htm">form</a> is first displayed, the <a href="glsgrid_.htm">grid</a> appears in alphabetical order by company. When the user clicks the header of the Contact column, Visual FoxPro displays the records in the grid in alphabetical order by contact name.</p>
<p class=label>
<b>Customer table in grid, reordered alphabetically by contact name</b></p>
<p>
<img src="afd07004.gif" border=0></p>
<p>
If the user clicks on the <code>Postal_code</code> column header, the grid is resorted and displayed in order by postal code.</p>
<p class=label>
<b>Customer table in grid, reordered by postal code</b></p>
<p>
<img src="afd07005.gif" border=0></p>
<p>
Since there isn't a pressing need in our example application to sort contacts by phone numbers, no <a href="lngset_order.htm">SET ORDER</a> code is inserted into the Click event for the <code>phone</code> column header. When the user clicks the Phone column header, the grid display does not change.</p>
<h3>Using Other Index Types</h3>
<p>
In addition to the most common index — the compact compound structural .cdx index — Visual FoxPro supports two other types of index files: the non-structural .cdx, and the stand-alone .idx index. Non-structural .cdx indexes are used for less frequently used multiple-key tags. Stand-alone, or .idx indexes are used for temporary or infrequently used single-key indexes, and are available primarily for backward compatibility.</p>
<p>
The following table is a summary of the three index types, how they are named, the number of keys they can contain, and the character limitations for each.</p>
<p class=label>
<b>Visual FoxPro Index Types </b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Index type</b></td>
<td class=label width=26%><b>Description</b></td>
<td class=label width=26%><b>Number of keys</b></td>
<td class=label width=23%><b>Limits</b></td>
</tr>
<tr valign=top>
<td width=25%>Structural .cdx</td>
<td width=26%>Uses same base name as the table file name; opens with table automatically</td>
<td width=26%>Multiple-key expressions, <br>
called tags</td>
<td width=23%>240-character limit on evaluated expression</td>
</tr>
<tr valign=top>
<td width=25%>Non-structural .cdx</td>
<td width=26%>Must be opened explicitly; uses a different name from the base table name</td>
<td width=26%>Multiple-key expressions, <br>
called tags</td>
<td width=23%>240-character limit on evaluated expression</td>
</tr>
<tr valign=top>
<td width=25%>Stand-alone .idx</td>
<td width=26%>Must be opened explicitly; base name of .idx file is user-defined</td>
<td width=26%>Single key expression</td>
<td width=23%>100-character limit on evaluated expression</td>
</tr>
</table><br>
<h4>Using Non-Structural .cdx Indexes</h4>
<p>
A non-structural .cdx index is useful when you want to create multiple index tags for a special purpose, but don’t want to burden your application with maintaining these indexes on an ongoing basis. For example, your application may have a special set of reports that analyzes data based on fields not normally indexed. Your application program can create a non-structural .cdx index with the necessary index tags, run the special reports, then delete the non-structural .cdx file.</p>
<p class=label>
<b>To create a non-structural .cdx index tag</b>
<ul type=disc>
<li>
Use the TAG and OF clauses with the <a href="lngindex.htm">INDEX</a> command.</li>
</ul>
<p>
You use the OF clause with the INDEX command to direct Visual FoxPro to store the tag in a file other than the structural .cdx index file for the table. For example, the following command creates tags called <code>title</code> and <code>hire_date</code> on the <code>employee</code> table and stores them in a non-structural .cdx file named <code>QRTLYRPT.CDX</code>:</p>
<pre><code>USE employee
INDEX ON title TO TAG title OF QRTLYRPT
INDEX ON hire_date TO TAG hiredate OF QRTLYRPT
</code></pre>
<h4>Using Stand-Alone Indexes</h4>
<p>
The stand-alone index file, based on a single key expression, is stored as an .idx file. In contrast to .cdx indexes, which can store multiple key expressions, the .idx index stores only a single key expression.</p>
<p>
You typically use stand-alone indexes as temporary indexes, creating or re-indexing them right before you need them. For example, you may have an index that you use only for a quarterly or annual summary report. Rather than include this infrequently used index in the structural .cdx, where it would be maintained every time you use the table, you can create a stand-alone .idx index. You can create as many .idx files as you want for a particular table.</p>
<p class=label>
<b>To create a stand-alone .idx index</b>
<ul type=disc>
<li>
Use the COMPACT clause of the <a href="lngindex.htm">INDEX</a> command.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcopy_tag.htm">COPY TAG</a> command.</li>
</ul>
<p>
Using the INDEX command with the COMPACT clause creates a new stand-alone index in a small, quickly accessed index file. You can omit the COMPACT clause if you want to create a non-compact stand-alone .idx file for compatibility with the older FoxBASE+<sup>®</sup> and FoxPro<sup>®</sup> version 1.0 index formats.</p>
<p>
The following code creates a stand-alone .idx file on <code>order_date</code> in the <code>orders</code> table, sets the order to the new index, then opens a <a href="wndbrowse_window.htm">Browse window</a> showing the orders in <code>order_date</code> sequence:</p>
<pre><code>USE ORDERS
INDEX ON order_date TO orddate COMPACT
SET ORDER TO orddate
BROWSE
</code></pre>
<p>
You can use the COPY TAG command to generate a stand-alone index file from an index tag in an existing .cdx file. For example, you may find that one of the indexes you currently maintain in the structural .cdx is used only for quarterly or annual reports. The following code creates a stand-alone index from a tag <code>birth_date</code> in the <code>employee</code> table:</p>
<pre><code>COPY TAG birth_date to birthdt COMPACT
</code></pre>
<p>
After you’ve created a stand-alone index from a tag in a .cdx file, you’ll typically delete this now unneeded tag from the .cdx file. The next section describes deleting an index.</p>

<h3><a name="dgdeleting_an_index"></a>Deleting an Index</h3>
<p>
You can delete indexes you’re no longer using by deleting the tag within the .cdx file, or by deleting the .idx file itself for stand-alone indexes. Deleting unused index tags improves performance by removing the need for Visual FoxPro to update unused tags to reflect changes in a table’s data.</p>
<h4>Deleting a Tag from the Structural .cdx File</h4>
<p>
You can remove a tag from the structural .cdx file using the Table Designer or the language.</p>
<p class=label>
<b>To delete an index tag in the structural .cdx</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, use the <b>Index</b> tab to select and delete the index.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngdelete_tag.htm">DELETE TAG</a> command.<p class=tl>
-or-</P></li>
<li>
Use the DROP PRIMARY KEY or DROP UNIQUE TAG clauses of the <a href="lngalter_table___sql.htm">ALTER TABLE</a> command.</li>
</ul>
<p>
For example, if your <code>employee</code> table contained a tag called <code>title</code>, you could delete it using the following code:</p>
<pre><code>USE employee
DELETE TAG title
</code></pre>
<p>
If the tag you wanted to delete was the primary key for the employee table, you could use the ALTER TABLE command:</p>
<pre><code>USE employee
ALTER TABLE DROP PRIMARY KEY
</code></pre>
<h4>Deleting a Tag from a Non-Structural .cdx File</h4>
<p>
A non-structural .cdx index and its tags are not visible in the <a href="wndtable_designer.htm">Table Designer</a>. You use the language to delete a tag from a non-structural .cdx file.</p>
<p class=label>
<b>To delete an index in a non-structural .cdx file</b>
<ul type=disc>
<li>
Use the OF clause of the <a href="lngdelete_tag.htm">DELETE TAG</a> command.</li>
</ul>
<p>
You use the OF clause with the DELETE TAG command to direct Visual FoxPro to delete a tag from a .cdx other than the structural .cdx file. For example, if you have a non-structural .cdx file named <code>QRTLYRPT.CDX</code> with a tag called <code>title</code>, you could delete the <code>title</code> tag with the following command:</p>
<pre><code>DELETE TAG title OF qtrlyrpt
</code></pre>
<p>
You delete all the tags in a structural or non-structural .cdx file with the ALL clause of the DELETE TAG command.</p>
<h4>Deleting a Stand-Alone .idx Index File</h4>
<p>
Because a stand-alone index file contains only a single index key expression, you delete the expression by deleting the .idx file from disk.</p>
<p class=label>
<b>To delete a stand-alone .idx file</b>
<ul type=disc>
<li>
Use the <a href="lngdelete_file.htm">DELETE FILE</a> command.</li>
</ul>
<p>
For example, the following code deletes the stand-alone .idx index file Orddate.idx:</p>
<pre><code>DELETE FILE orddate.idx
</code></pre>
<p>
You could also use a utility, such as Windows Explorer, to delete an unneeded stand-alone .idx file.</p>

<h3><a name="dgindexing_on_expressions"></a>Indexing on Expressions</h3>
<p>
You can increase the power of your applications by creating indexes based on expressions. These expressions can be simple or complex, depending upon what you want to accomplish.</p>
<h4>Indexing on Simple Expressions</h4>
<p>
Simple index expressions are indexes based on single fields, or on the concatenation of two or more character fields to form a multifield key. For example, you might want to create an index for the Customer table in the TasTrade database based on the expression:</p>
<pre><code>country + region + cust_id
</code></pre>
<p>
When you <a href="glsbrowse.htm">browse</a> the Customer table sorted by this index tag, you see the customers ordered by country, then region, then customer ID.</p>
<h4>Preventing Duplicates in a Combination of Fields</h4>
<p>
If you want to prevent duplicating values across multiple fields, you can create a <a href="glsprimary_index.htm">primary</a> or <a href="glscandidate_index.htm">candidate</a> index based on an expression combining multiple fields.</p>
<p>
For example, you may have a table that stores the area code and phone number in two columns:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Area Code</b></td>
<td class=label width=62%><b>Phone Number</b></td>
</tr>
<tr valign=top>
<td width=38%>206</td>
<td width=62%>444-nnnn</td>
</tr>
<tr valign=top>
<td width=38%>206</td>
<td width=62%>555-nnnn</td>
</tr>
<tr valign=top>
<td width=38%>313</td>
<td width=62%>444-nnnn</td>
</tr>
</table><br>
<p>
Both the area code field and the phone number field contain values that duplicate the values in other rows. However, no phone numbers are duplicated, because it is the combination of the two fields that makes up the value. Yet, if the primary or candidate index specified both columns in the index expression, the rows in the example would not be considered duplicates. If you attempted to enter a value that was exactly the same area code and phone number as one of the existing rows, Visual FoxPro would reject the entry as a duplicate.</p>
<h4>Using Null Values in Index Expressions</h4>
<p>
You can create indexes on fields that contain <a href="glsnull_value.htm">null values</a>. Index expressions that evaluate to .NULL. are inserted into the .cdx or .idx file before non-null entries. All null values are placed at the beginning of the index.</p>
<p>
The following example demonstrates one effect of indexing null values. This is the state of the table before the index is applied:</p>
<p class=label>
<b>Null values appear in the <code>SocSec</code> field for two records.</b></p>
<p>
<img src="afd07006.gif" border=0></p>
<p>
The value .NULL. in two records represents the fact that Social Security numbers for Anne Dunn and Alan Carter are either unknown or unavailable. You then create an index with the Social Security number using the following example:</p>
<pre><code>INDEX ON SocSec + LastName + FirstName TAG MyIndex
</code></pre>
<p>
When you view the table sorted by this index, you see the sort order as shown in the following figure.</p>
<p class=label>
<b>After indexing on <code>SocSec</code>, records containing null <code>SocSec</code> values appear first.</b></p>
<p>
<img src="afd07007.gif" border=0></p>
<p>
When the index expression contains null values, the records whose <code>SocSec</code> values are .NULL. are sorted first (by <code>LastName</code>), followed by the records whose <code>SocSec</code> values are non-null. Notice that there are two entries for Alan Carter. Because record 5 contains a null value, record 5 is indexed before record 2.</p>
<h4>Indexing on Complex Expressions</h4>
<p>
You can also create indexes based on more complex expressions. Visual FoxPro index key expressions can include Visual FoxPro <a href="glsfunction.htm">functions</a>, <a href="glsconstant.htm">constants</a>, or <a href="glsuser_defined_function_udf_.htm">user-defined functions</a>.</p>
<p>
The expression you create must evaluate to no more than 100 characters for a stand-alone (.idx) index or 240 characters for a .cdx index tag. You can use fields of different <a href="glsdata_type.htm">data types</a> together in a single tag by converting the individual components of the expression to character data.</p>
<p>
To take advantage of <a href="glsrushmore_technology.htm">Rushmore</a>™ optimization, the index expression must exactly match the criteria.</p>
<h4>Using Visual FoxPro Functions in an Index Tag</h4>
<p>
You can use Visual FoxPro functions in an index tag. For example, you can use the <a href="lngstrlp_rp.htm">STR(&nbsp;)</a> function to convert a numeric value into a character string. If you wanted to create an index tag for the <code>customer</code> table that combined the <code>cust_id</code> field with the <code>maxordamt</code> field, you could convert the <code>maxordamt</code> field from a Currency field with a width of 8 to an 8-character field with 2 decimal places using the following code:</p>
<pre><code>INDEX ON cust_id + STR(maxordamt, 8, 2) TAG custmaxord
</code></pre>
<p>
If you want to reduce the size of indexes for fields with integer values, you can convert the integer values to a binary character representation using the <a href="lngbintocfunction.htm">BINTOC(&nbsp;)</a> function. You can also convert the binary values to integer values using the <a href="lngctobinfunction.htm">CTOBIN(&nbsp;)</a> function.</p>
<p>
If you want to create an index to sort a table in chronological order, you can use the <a href="lngdtoslp_rp.htm">DTOS(&nbsp;)</a> function to convert a date field to a character string. To access the <code>employee</code> table by <code>hire_date</code> and <code>emp_id</code>, you can create this index key expression:</p>
<pre><code>INDEX ON DTOS(hire_date) + emp_id TAG id_hired
</code></pre>
<h4>Including Stored Procedures or User-Defined Functions</h4>
<p>
You can increase the power of your index by referencing a <a href="glsstored_procedure.htm">stored procedure</a> or a <a href="glsuser_defined_function_udf_.htm">user-defined function</a> in your index expression. For example, you can use a stored procedure or a UDF to extract the street name from a single field that includes both the street number and street name. If the street number is always numeric, the stored procedure or UDF can return the character portion of the field and pad the field with spaces as needed to create a constant-length index key. You can then use this index key to access records in the table in street-name order.</p>
<p>
You may prefer to use a stored procedure rather than a UDF in your index tag, if your table is associated with a database. Because a UDF is stored in a file that is&nbsp; separate from the database, it is possible to move or delete the UDF file, which then causes the index tag referencing the UDF to become invalid. In contrast, stored procedure code is stored in the .dbc file and can always be located by Visual FoxPro.</p>
<p>
Another benefit to using a stored procedure in an index tag is that referencing a stored procedure guarantees that the index is based on the exact code you specify. If you use a UDF in your index expression, any UDF that is in scope at the time of indexing and has the same name as the UDF referenced in your index will be used.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Exercise care when referencing a stored procedure or UDF in an index expression, as it increases the time required to create or update the index.</p>
<h4>Using Data in a Field in Another Table</h4>
<p>
You can create an index tag that refers to a table open in another <a href="glswork_area.htm">work area</a>. It’s wise to use a stand-alone index (.idx) for any tag that refers to more than one table. This is because if you were to include a tag referring to another table in a structural .cdx file, Visual FoxPro wouldn’t allow you to open the table until you opened the table referenced in the index tag.</p>
<h4>Accessing Records in Descending Order</h4>
<p>
You can view records in descending order by creating a descending index, or by reading an existing index in descending order.</p>
<p class=label>
<b>To create a descending index</b>
<ul type=disc>
<li>
In the <b>Index</b> tab of the <a href="wndtable_designer.htm">Table Designer</a>, choose the arrow button to the left of the <b>Name</b> box so that the arrow points down.<p class=tl>
-or-</P></li>
<li>
Use the DESCENDING clause with the <a href="lngindex.htm">INDEX ON</a> command to create a descending index.</li>
</ul>
<p>
To create a compound structural index file, you can use either method. To create other types of index files, you can use the second method. For example, you could create a new descending index ordering your <code>product</code> table from highest to lowest <code>unit_price</code> and browse the table in the new order with the following code:</p>
<pre><code>USE products
INDEX ON unit_price TAG unit_price DESCENDING
BROWSE
</code></pre>
<p class=label>
<b>To read an existing index in descending order</b>
<ul type=disc>
<li>
Use the DESCENDING clause of the <a href="lngset_order.htm">SET ORDER</a> command to read an existing index in descending order.</li>
</ul>
<p>
Reading an existing index in descending order enables you to leverage an existing index rather than create a new one. For example, you may have already created an index ordering your <code>product</code> table by <code>unit_price</code> with the following code:</p>
<pre><code>USE products
INDEX ON unit_price TAG unit_price
</code></pre>
<p>
By default, the order is ascending. You could browse the table in descending order with the following code:</p>
<pre><code>USE products
SET ORDER TO unit_price DESCENDING
BROWSE
</code></pre>
<p>
The previous examples focus on accessing information in descending order. Both the <a href="lngset_order.htm">SET ORDER</a> and <a href="lngindex.htm">INDEX</a> commands also offer an ASCENDING clause. You can combine these two commands to gain tremendous flexibility in your application. For example, if you use the ASCENDING or DESCENDING clause to create an index in the most frequently used order, you can then use the opposite clause with the SET ORDER command to view or access the information in the opposite order, when that order is more convenient.</p>
<h3>Filtering Data</h3>
<p>
You can limit the records you access to only the data you want by using a filtered index. When you create a filtered index, only records that match the filter expression are available for display and access.</p>
<p class=label>
<b>To filter data using a filtered index</b>
<ul type=disc>
<li>
In the <a href="wndtable_designer.htm">Table Designer</a>, select the <b>Index</b> tab and enter a filter expression in the <b>Filter</b> box for the index you want to filter.<p class=tl>
-or-</P></li>
<li>
Use the optional FOR clause with the <a href="lngindex.htm">INDEX</a> command.</li>
</ul>
<p>
If you include the optional FOR clause with the INDEX command, the index file acts as a filter on the table. Index keys are created in the index file for just those records that match the filter expression. For example, if you were preparing a mailing to go to the sales representatives in your company, and you wanted to sort the mailing by country, you could create an index that filtered the <code>employee</code> table so that only the records for sales representatives appeared, ordered by their country and their last name. The following code creates a filtered index and displays the filtered data in a Browse window:</p>
<pre><code>USE employee
INDEX ON country+last_name FOR title = "Sales Representative" ;
TAG reps_cntry
BROWSE
</code></pre>
<p>
When you view the Browse window, only the sales representatives are shown; the records for other employees do not appear at all in the Browse window.</p>
<p class=label>
<b>A filtered index builds an index only for records that match the filter expression.</b></p>
<p>
<img src="afd07008.gif" border=0></p>
<h4>Filtering Data Temporarily</h4>
<p>
You can use the <a href="lngset_filter.htm">SET FILTER</a> command to filter data temporarily, without building a special filtered index. This command is particularly useful when you want to specify a temporary condition that records in a table must meet in order to be accessible. To turn off the filter for the current table, you can issue SET FILTER TO without an expression. For example, you could issue the following command to filter the <code>customer</code> table to show only the customers in Germany:</p>
<pre><code>USE customer
SET FILTER TO country = "Germany"
BROWSE
</code></pre>
<p>
The SET FILTER command accepts any valid Visual FoxPro logical expression as the filter condition. Once you issue the SET FILTER command, only the records that satisfy the filter condition are available in the table. All commands that access the table respect the SET FILTER condition. You can set a separate filter for every open table.</p>
<h3>Using Indexes Efficiently</h3>
<p>
You can improve the performance of indexed tables by keeping indexes current and using optimizable expressions in your indexes.</p>
<h4>Rebuilding an Active Index File </h4>
<p>
Index files become outdated when you open a table without opening its corresponding index files and make changes to the key fields in the table. Index files can also become invalid as a result of a system crash, or potentially by accessing and updating a table from a program other than Visual FoxPro. When index files become outdated, you can update them by re-indexing with the REINDEX command.</p>
<p class=label>
<b>To rebuild an active index file</b>
<ul type=disc>
<li>
From the <a href="cmdtable_menu.htm">Table menu</a>, choose <b>Rebuild Indexes</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngreindex.htm">REINDEX</a> command.</li>
</ul>
<p>
For example, the following code updates the index file for the Customer table:</p>
<pre><code>USE customer
REINDEX
</code></pre>
<p>
REINDEX updates all index files open in the selected <a href="glswork_area.htm">work area</a>. Visual FoxPro recognizes each index file type (compound index .cdx files, structural .cdx files, and single index .idx files) and re-indexes accordingly. It updates all tags in .cdx files, and updates structural .cdx files, which open automatically with the table.</p>
<p>
You can also update outdated index files with the REINDEX command.</p>
<h4>Re-Indexing at Run Time</h4>
<p>
Re-indexing takes time, particularly when you’re re-indexing large tables. You should re-index only when necessary. You can enhance performance by re-indexing during the initialization or termination portion of your program, rather than performing indexing maintenance during the main portion of an application.</p>
<h4>Using Indexes to Optimize Queries</h4>
<p>
You can use indexes to speed <a href="glsquery.htm">queries</a> and other operations. For information on creating Rushmore-optimizable index expressions, see Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>.</p>

<h2><a name="dgusing_multiple_tables"></a>Using Multiple Tables</h2>
<p>
To use multiple tables, you use data sessions to control the tables that are available to forms, and work areas to set which tables are open. A <a href="glswork_area.htm">work area</a> is a numbered region that identifies an open table. You can open and manipulate Visual FoxPro tables in 32,767 work areas. Work areas are normally identified in your application by using the table alias of the table open in the work area. A table alias is a name that refers to a table open in a work area.</p>
<h3>Using Data Sessions</h3>
<p>
In addition to the work areas visible in the Data Session window, Visual FoxPro automatically provides a separate environment for each instance of a <a href="glsform.htm">form</a> or <a href="glsform_set.htm">form set</a> through <a href="glsdata_session.htm">data sessions</a>. A data session is a representation of the current dynamic work environment used by a form, form set, or report. Each data session contains its own set of work areas. These work areas contain the tables open in the work areas, their indexes, and relationships. For information on using data sessions, see Chapter 17, <a href="dgprogramming_for_shared_access.htm">Programming for Shared Access</a>.</p>

<h3><a name="dgviewing_work_areas"></a>Viewing Work Areas</h3>
<p>
You can see the list of tables open in a Visual FoxPro session by opening the Data Session window.</p>
<p class=label>
<b>To open the Data Session window</b>
<ul type=disc>
<li>
From the <b>Window</b> menu, choose <b>Data Session</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngset.htm">SET</a> command.</li>
</ul>
<p>
When you enter SET in the Command window, Visual FoxPro opens the <a href="wnddata_session_window.htm">Data Session</a> window and displays the work area aliases for the tables open in the current data session.</p>
<p class=label>
<b>Data Session window with the Employees table open</b></p>
<p>
<img src="afd07009.gif" border=0></p>

<h3><a name="dgopening_a_table_in_a_work_area"></a>Opening a Table in a Work Area</h3>
<p>
You can open a table in a work area with the Data Session window or with the USE command.</p>
<p class=label>
<b>To open a table in a work area</b>
<ul type=disc>
<li>
In the <a href="wnddata_session_window.htm">Data Session</a> window, choose <b>Open</b>.<p class=tl>
-or-</P></li>
<li>
Type <a href="lnguse.htm">USE</a> in the <b>Command</b> window.</li>
</ul>
<p>
To open a table in the lowest available work area, use the IN clause of the USE command with work area 0. For example, if tables are open in work areas 1 through 10, the following command opens the customer table in work area 11.</p>
<pre><code>USE customer IN 0
</code></pre>
<p>
You can also choose Open from the File menu to open a table in a work area.</p>

<h3><a name="dgclosing_a_table_in_a_work_area"></a>Closing a Table in a Work Area</h3>
<p>
You can close a table in a work area through the Data Session window or by using the language.</p>
<p class=label>
<b>To close a table in a work area</b>
<ul type=disc>
<li>
From the <a href="wnddata_session_window.htm">Data Session</a> window, select the alias of the table, and then choose <b>Close</b>.<p class=tl>
-or-</P></li>
<li>
Type <a href="lnguse.htm">USE</a> without a table name.<p class=tl>
-or-</P></li>
<li>
Use the IN clause of the USE command to reference the work area of the table you want to close.</li>
</ul>
<p>
When you issue the USE command without a table name and a table file is open in the currently selected work area, the table is closed. For example, the following code opens the <code>customer</code> table, displays a Browse window, and then closes the table:</p>
<pre><code>USE customer 
BROWSE
USE
</code></pre>
<p>
You also close a table automatically when you open another table in the same work area, or issue the USE command with the IN clause and reference the current work area. The following code opens, displays, and then closes the <code>customer</code> table by issuing USE IN and the table alias <code>customer</code>:</p>
<pre><code>USE customer 
BROWSE
USE IN customer
</code></pre>
<p>
You can’t have more than one table open in a work area at one time.</p>
<h3>Referencing a Work Area</h3>
<p>
You can reference the next available work area before you open a table by using the work area number as shown below:</p>
<pre><code>SELECT 0
</code></pre>
<h3>Using Table Aliases</h3>
<p>
A table alias is the name that Visual FoxPro uses to refer to a table open in a work area. Visual FoxPro automatically uses the file name for the default alias when you open a table. For example, if you open the file Customer.dbf in work area 0 with the following commands, the default alias <code>customer</code> is automatically assigned to the table:</p>
<pre><code>SELECT 0
USE customer
</code></pre>
<p>
You can then use the alias <code>customer</code> to identify the table in a command or function. You can also create your own alias.</p>
<h4>Creating a User-Defined Alias</h4>
<p>
You can assign your own user-defined alias to a table when you open it.</p>
<p class=label>
<b>To open a table with a user-defined alias</b>
<ul type=disc>
<li>
Type <a href="lnguse.htm">USE</a> with a table alias name.</li>
</ul>
<p>
For example, to open the file Customer.dbf in work area 0 and assign it an alias of <code>people</code>, use the following command:</p>
<pre><code>SELECT 0
USE customer ALIAS people
</code></pre>
<p>
You must then use the alias <code>people</code> to refer to the open table. An alias can consist of up to 254 letters, digits, or underscores and it must begin with a letter or an underscore. Visual FoxPro automatically creates an alias if the alias you provide contains an unsupported alias character.</p>
<h4>Using a Visual FoxPro-Assigned Alias</h4>
<p>
Visual FoxPro automatically assigns an alias to a table in certain instances:</p>
<ul type=disc>
<li>
If you open a single table simultaneously in multiple work areas by including the AGAIN clause with the <a href="lnguse.htm">USE</a> command and you don't specify an alias when opening the table in each work area.</li>
<li>
If a conflict occurs with aliases.</li>
</ul>
<p>
The default aliases assigned in the first 10 work areas are the work area letters “A” through “J”; the aliases assigned in work areas 11 through 32767 are W11 through W32767. You can use these Visual FoxPro-assigned aliases just as you would any default or user-defined alias to refer to a table open in a work area.</p>
<h4>Selecting a Work Area Using an Alias</h4>
<p>
You can move to a work area from another work area with the SELECT command. For example, if Customer.dbf is open in a work area and the default alias of CUSTOMER is assigned, you can move to this work area with the following SELECT command:</p>
<pre><code>SELECT customer
</code></pre>
<h4>Referring to Tables Open in Other Work Areas</h4>
<p>
You can also refer to fields in other work areas by prefacing the field name with the alias name and a period, or the –&gt; operator. For example, if you’re in a work area and you want to access the field <code>contact</code> from the Customer table open in a different work area, you could use the following to reference the field:</p>
<pre><code>customer.contact
</code></pre>
<p>
If the table you want to reference is opened with an alias, you can use the alias name. For example, if the Customer table is opened with the alias <code>people</code>, you can reference the <code>lastname</code> field with the following to refer to the field:</p>
<pre><code>people.lastname
</code></pre>
<p>
Using the table name or table alias specifically identifies the desired table independently from the work area in which the table is open.</p>
<h3>Setting Temporary Relationships Between Tables</h3>
<p>
When you establish a <a href="glstemporary_relationship.htm">temporary relationship</a> between tables, you cause the record pointer of one table (the child table) to automatically follow the movements of the record pointer in the other, or parent, table. This allows you to select a record on the “one” or parent side of a relationship and automatically access the related records on the “many” or child side of the table relationship.</p>
<p>
For example, you may want to relate the <code>customer</code> and <code>orders</code> tables so that when you move the record pointer in the <code>customer</code> table to a particular customer, the record pointer in the <code>orders</code> table moves to the record with the same customer number.</p>
<p>
You can use table work areas and table aliases to establish relationships between two open tables with the SET RELATION command. If you’re using a <a href="glsform.htm">form</a> to work with tables, you can store these relationships as part of the <a href="glsdata_environment.htm">data environment</a> for the form.</p>

<h4><a name="dgtemporarily_relating_tables"></a>Temporarily Relating Tables </h4>
<p>
You can use the Data Session window or the language to create temporary relationships between tables.</p>
<p class=label>
<b>To temporarily relate tables</b>
<ul type=disc>
<li>
In the <a href="wnddata_session_window.htm">Data Session</a> window, select tables and use the <b>Relations</b> button to create relationships.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngset_relation.htm">SET RELATION</a> command.</li>
</ul>
<p>
You use the SET RELATION command to establish a relationship between a table open in the currently selected work area, and another table open in another work area. You typically relate tables that have a common field, and the expression you use to establish the relationship is usually the index expression of the controlling index of the child table.</p>
<p>
For example, a customer may have many orders. If you create a relationship between the field that is common to both customer and order tables, you can easily see all the orders for any customer. The following program uses a field, <code>cust_id</code>, that is common to both tables and creates a relationship between the two tables based on the field <code>cust_id</code> in the <code>customer</code> table and the <code>cust_id</code> index tag in the <code>orders</code> table.</p>
<p class=label>
<b>Using SET RELATION to Establish Relationship Between Two Tables</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Code</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=48%><pre><code>USE customer IN 1</code></pre>
</td>
<td width=52%>Open the <code>customer</code> table (parent table) in work area 1.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>USE orders IN 2</code></pre>
</td>
<td width=52%>Open the <code>orders</code> table (child table) in work area 2.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>SELECT orders</code></pre>
</td>
<td width=52%>Select the child work area.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>SET ORDER TO TAG cust_id</code></pre>
</td>
<td width=52%>Specify the table order for the child table using the index tag <code>cust_id</code>.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>SELECT customer</code></pre>
</td>
<td width=52%>Select the parent work area.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>SET RELATION TO cust_id
INTO orders</code></pre>
</td>
<td width=52%>Create the relationship between the parent table and the controlling index in the child table.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>SELECT orders
BROWSE NOWAIT
SELECT customer
BROWSE NOWAIT</code></pre>
</td>
<td width=52%>Open two Browse windows; notice that moving the record pointer in the parent table changes the set of data viewed in the child table.</td>
</tr>
</table><br>
<p>
The Data Session window displays the two open tables, <code>Orders</code> and <code>Customer</code>, and the relationship established by the SET RELATION command.</p>
<p class=label>
<b>The Data Session window displays open table aliases and temporary relationships.</b></p>
<p>
<img src="afd07010.gif" border=0></p>
<p>
You created an index on the child table, <code>orders</code>, to organize records in the orders table into groups, according to the customer who placed the order. When you create a relationship between the parent table and the index of the child table, Visual FoxPro selects only those child table records whose index key matches the index key of the parent record you’ve selected.</p>
<p>
The previous example established a single relationship between two tables. You can also use the <a href="lngset_relation.htm">SET RELATION</a> command to establish multiple relationships between a single parent table and various child tables.</p>
<h4>Saving Table Relationships in a Data Environment</h4>
<p>
If you are creating a <a href="glsform.htm">form</a> that uses more than one table, you can use the <a href="glsdata_environment.htm">data environment</a> to create table relationships and store them with the form. Relationships you establish in the data environment are opened automatically when you run the form. For information on creating a data environment, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms.</a></p>
<h4>Relating Records in a Single Table</h4>
<p>
You can also create a relationship between records in a single table. This relationship, known as a self-referential relation, can be useful in situations where you have all the information you need stored in a single table. For example, you may want to move through the managers in the Employees table and have the employees who report to each manager automatically change as you move the record pointer from manager to manager.</p>
<p class=label>
<b>To temporarily relate records in a single table</b>
<ul type=disc>
<li>
In the <a href="wnddata_session_window.htm">Data Session</a> window, select tables and use the <b>Relations</b> button to create relationships.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngset_relation.htm">SET RELATION</a> command.</li>
</ul>
<p>
To create a self-referential relation, open the same table twice: once in one <a href="glswork_area.htm">work area</a> and then a second time, with the <a href="lnguse.htm">USE</a> AGAIN command, in another work area. Then use an index to relate the records. For example, the following code establishes and browses a self-referential relationship by creating an index tag named <code>mgr_id</code> that orders the <code>Employee</code> table by the <code>reports_to</code> field:</p>
<pre><code>SELECT 0
USE employee ALIAS managers
SELECT 0
USE employee AGAIN ALIAS employees
INDEX ON reports_to TAG mgr_id
SET ORDER TO mgr_id
SELECT managers
SET RELATION TO emp_id INTO employees
BROWSE
SELECT employees
BROWSE
</code></pre>
<p>
When you move the record pointer in the <code>managers</code> Browse window, the <code>employees</code> Browse window is refreshed to show only those employees who report to the selected manager.</p>
<h3>Setting Persistent Relationships With Indexes</h3>
<p>
Indexes are used to establish <a href="glspersistent_relationship.htm">persistent relationships</a> between tables in a database. Persistent relationships are relationships between database tables that are stored in the database file and are automatically used as default join conditions in the <a href="wndquery_designer.htm">Query</a> and <a href="wndquery_designer.htm">View Designers</a>. Persistent relationships are also displayed in the <a href="wnddatabase_designer.htm">Database Designer</a> as lines joining table indexes, and as default relationships when you use the tables in the data environment.</p>
<p>
Unlike <a href="glstemporary_relationship.htm">temporary relationships</a> set with the <a href="lngset_relation.htm">SET RELATION</a> command, <a href="glspersistent_relationship.htm">persistent relationships</a> do not need to be re-created each time you use tables. However, because persistent relationships do not control the relationship between record pointers in tables, you will use both temporary SET RELATION relationships as well as persistent relationships in developing Visual FoxPro applications. For more information on setting persistent relationships, see Chapter 6, <a href="dgcreating_databases.htm">Creating Databases</a>.</p>
</BODY>
</HTML>

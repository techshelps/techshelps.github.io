<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIMENSION Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngdimension"></a><sup></sup>DIMENSION Command</h1>
<p>
<a href="lngdimensionx.htm">Example</a> &nbsp; <a href="lngdimensionsa.htm">See Also</a></p>
<p>
Creates a one- or two-dimensional array of variables.</p>
<p class=label>
<b>Syntax</b></p>
<p>
DIMENSION <i>ArrayName1</i>(<i>nRows1</i> [, <i>nColumns1</i>])<br>
 &nbsp; [, <i>ArrayName2</i>(<i>nRows2</i> [, <i>nColumns2</i>])] ...</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>ArrayName1</i></p>
<p class=indent>
Specifies the name of the array. Multiple arrays can be created with a single DIMENSION command by including additional array names (<i>ArrayName2</i>,<b> </b><i>ArrayName3</i>, and so on).</p>
<p class=dt>
<i>nRows1</i> [, <i>nColumns1</i>]</p>
<p class=indent>
Specifies the size of the array to create. If you include just <i>nRows1</i>, a one-dimensional array is created. One-dimensional arrays have one column and <i>nRows1</i> rows. For example, the following command creates a one-dimensional array named <code>gaArrayOne</code> that contains one column and ten rows.</p>
<pre><code>DIMENSION gaArrayOne(10)
</code></pre>
<p class=tl>
To create a two-dimensional array, include both <i>nRows1</i> and <i>nColumns1</i>. <i>nRows1</i> specifies the number of rows in the array, and <i>nColumns1</i> specifies the number of columns. The following example creates a two-dimensional array named <code>gaArrayTwo</code> containing two rows and four columns:</P><pre><code>DIMENSION gaArrayTwo(2,4)
</code></pre>
<p class=tl>
You must specify a size for each array you create with DIMENSION. In the following example, three arrays are created: <code>gaArrayOne</code> and <code>gaArrayTwo</code> from the previous examples and a third array called <code>gaArrayThree</code>:</P><pre><code>DIMENSION gaArrayOne(10), gaArrayTwo(2,4), gaArrayThree(3,3)
</code></pre>
<p class=tl>
You can use either brackets or parentheses to enclose the expressions in DIMENSION or DECLARE. For example, the following two commands create identical arrays:</P><pre><code>DIMENSION gaArrayOne(10), gaArrayTwo[2,4], gaArrayThree(3,3)
DIMENSION gaArrayOne[10], gaArrayTwo(2,4), gaArrayThree[3,3]
</code></pre>
<p class=label>
<b>Remarks</b></p>
<p>
DIMENSION is identical in operation and syntax to DECLARE.</p>
<p>
<b>Array Elements…</b>&nbsp;&nbsp;&nbsp;The size of an array determines how many elements it can contain. Each element in an array can store a single piece of information. To determine how many elements an array contains and how much information it can store, multiply the number of rows (<i>nRows1</i>) in the array by the number of columns (<i>nColumns1</i>) in the array.</p>
<p>
Array elements can contain any type of data and are initialized to false (.F.) when the array is first created. You can initialize all the elements in an array to the same value with STORE if SET COMPATIBLE is FOXPLUS or OFF (the default setting). For example:</p>
<pre><code>DIMENSION gaArray(10,3)
STORE 'initial' TO gaArray
</code></pre>
<p>
<b>Array Subscripts…</b>&nbsp;&nbsp;&nbsp;Elements in an array are referenced by their subscripts. Each array element has a unique numeric subscript that identifies it. If the array is one-dimensional, an element's subscript is the same as its row number. For example, the subscript for the element in the third row of a one-dimensional array is 3.</p>
<p>
Elements in two-dimensional arrays are referenced by two subscripts. The first subscript indicates the row location of the element, and the second subscript indicates the column location. For example, the subscripts for the element in the third row and fourth column of a two-dimensional array are 3,4. For a further discussion of array element subscripts, see <a href="lngasubscriptlp_rp.htm">ASUBSCRIPT(&nbsp;)</a>.</p>
<p>
The subscript or subscripts for the first element in an array always start with 1. If an array is two-dimensional, it can also be referenced by a single subscript. Use AELEMENT(&nbsp;) to return the single subscript from a pair of array row and column subscripts. Use ASUBSCRIPT(&nbsp;) to return the row and column subscripts from a single subscript.</p>
<p>
<b>Redimensioning Arrays…</b>&nbsp;&nbsp;&nbsp;You can change the size and dimensions of an array by issuing DIMENSION again. The size of an array can be increased or decreased; one-dimensional arrays can be converted to two dimensions, and two-dimensional arrays can be reduced to one dimension.</p>
<p>
If the number of elements in an array is increased, the contents of all the elements in the original array are copied to the newly redimensioned array. The additional array elements are initialized to false (.F.).</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pool Manager: An Automation server Sample</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="smppool_manager_ole_server_sample"></a>Pool Manager: An Automation server Sample</h1>
<p>
An Automation server exposes properties and methods that can be set and called from other Automation-capable applications. </p>
<p>
All you need to do to create an Automation server is :
<ol>
<li>
Create a project.<br><br></li>
<li>
Add a .vcx file with an OLE Public class or a .prg file that defines a class with the OLEPUBLIC keyword.<br><br></li>
<li>
Create a .dll or an .exe file.</li>
</ol>
<p>
An Automation server can be deployed locally or remotely, exposing business functionality through methods that can be called and properties that can be set.</p>
<p>
This is an example of a <b>Pool Manager</b> implemented in a custom Automation server. A client can send jobs to this Pool Manager, which can be located on a remote computer, and have it handle the job processing. This allows you to continue working because the resources of the pool manager handle all the work. The jobs in this sample are dummy simulation jobs.</p>
<p class=label>
<b>To open the project for the pool manager sample</b>
<ul type=disc>
<li>
Type the following in the <b>Command</b> window:<pre><code>MODIFY PROJECT (HOME(2) + 'servers\poolmgr\pool')
</code></pre>
</li>
</ul>
<p class=label>
<b>To run the pool manager sample</b>
<ol>
<li>
Open Pool.pjx and choose <b>Build</b>.<br><br></li>
<li>
In the <b>Build Options</b> dialog box, select <b>Build Executable</b> and choose <b>OK</b> to create Pool.exe. The server is registered when you build the executable file.<br><br></li>
<li>
Run Pool.scx.</li>
</ol>
<h3>Pool Init Event</h3>
<p>
The first code to execute when you run the Pool form is the Init event, which creates a poolmgr object:</p>
<pre><code>* Pool Init
SET PROC TO jobmgr.prg
THIS.oPoolMgr = CreateObject('Pool.Poolmgr')
</code></pre>
<p>
When the oPoolMgr object is created, an array is dimensioned to keep track of jobs and a timer object, based on the PoolTimer class, is created to check for new or completed jobs.</p>
<h3>Pool AddJob Method</h3>
<p>
When the user chooses the <b>Print</b>, <b>Fax</b>, or <b>Excel Chart</b> buttons on the pool form, the AddJob method of the form is called. AddJob performs the following:
<ol>
<li>
Redimensions an array to keep track of outstanding jobs<br><br></li>
<li>
Creates an object based on a specific subclass of NewJob: FaxJob, PrintJob, or GraphJob. These classes are defined in JOBMGR.prg, and take a reference to the form as an argument.<br><br></li>
<li>
Passes the job object to the NewJob method of the PoolMgr object:<pre><code>PARAMETER cJobType
LOCAL oNewJobRef
IF ALEN(THIS.aJobs)&gt;1 OR TYPE('THIS.aJobs[1]') = 'O'
DIMENSION THIS.aJobs[ALEN(THIS.aJobs)+1]
ENDIF
oNewJobRef = CreateObject(m.cJobType,THIS)
THIS.oPoolMgr.NewJob(m.oNewJobRef)
</code></pre>
</li>
</ol>
<h3>PoolMgr NewJob Method</h3>
<p>
The NewJob method of the PoolMgr object redimensions the two dimensional PoolMgr job array and stores a reference to the job object in the first element of the new row and 0 to the second element, indicating that this is a new job.</p>
<pre><code>PARAMETER oNewJob
IF TYPE('oNewJob') # 'O' OR ISNULL(m.oNewJob)
 &nbsp; RETURN .F.
ENDIF
IF ALEN(THIS.aJobObjs,1) &gt; 1 ;
  OR ISNULL(THIS.aJobObjs[1])
 &nbsp; DIMENSION THIS.aJobObjs[ALEN(THIS.aJobObjs,1)+1,2]
ENDIF
THIS.aJobObjs[ALEN(THIS.aJobObjs,1),1] = oNewJob
THIS.aJobObjs[ALEN(THIS.aJobObjs,1),2] = 0
</code></pre>
<h3>PoolTimer Timer Event</h3>
<p>
Every three seconds, the PoolTimer timer event code is executed. This code loops through the job array. If the second element is 0, indicating a new job, then a new PrintJob, FaxJob, or GraphJob object (subclasses of Job in poolmgr.prg) is created to manage the job. For example, the following line creates an object based on PrintJob and stores a reference to it in the timer’s aJobs array:</p>
<pre><code>THIS.aJobs[ALEN(THIS.aJobs)] = CREATEOBJECT('Pool.PrintJob')
</code></pre>
<p>
The second element in the array for that row is then set to 1 to indicate that the job has been started and the SetupJob method of the new object is called. A reference to the job object is passed to the SetupJob method:</p>
<pre><code>THIS.aJobs[ALEN(THIS.aJobs)].SetupJob(THIS.Parent.aJobObjs[m.i,1])
</code></pre>
<h3>The Job Class</h3>
<p>
The Job class is defined in Poolmgr.prg:</p>
<pre><code>DEFINE CLASS Job AS FORM
</code></pre>
<p>
When an object based on the Job class, or any of its subclasses, is created, the StartJob method of the object is called.</p>
<pre><code>PROCEDURE SetupJob
 &nbsp; PARAMETER oJob
 &nbsp; THIS.oJob = m.oJob
 &nbsp; THIS.Caption = THIS.oJob.Jobtype
 &nbsp; THIS.Visible = .T.
ENDPROC
</code></pre>
<p>
The PrintJob class, for example, is a subclass of Job. If the object created is based on PrintJob, the StartJob method does the default processing of the parent class StartJob method, setting the caption of the form and displaying a label. Then the INKEY(&nbsp;) function is called to set a timeout of 10 seconds. In a functional implementation of this sample, instead of the INKEY(&nbsp;) function, you would include code at this point to process the print job.</p>
<pre><code>DEFINE CLASS PrintJob AS Job OLEPublic
 &nbsp; PROCEDURE StartJob
 &nbsp;&nbsp;&nbsp;&nbsp; DoDefault()
 &nbsp;&nbsp;&nbsp;&nbsp; =INKEY(10)
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.EndJob()
 &nbsp; ENDPROC
ENDDEFINE
</code></pre>
<p>
The EndJob method of the object calls the JobDone method of the original job object and releases the PrintJob, FaxJob, or GraphJob object.</p>
<pre><code>PROCEDURE EndJob
 &nbsp; THIS.lbl1.caption = 'Ending job...'
 &nbsp; THIS.oJob.JobDone()
 &nbsp; THIS.oJob = .null.
 &nbsp; THIS.Visible = .F.
 &nbsp; THISFORM.Release 
ENDPROC
</code></pre>
<p>
Code in the JobDone method of the original job object notifies the form that the job has been completed by calling the JobDone method of the form.</p>
<pre><code>PROCEDURE jobdone
 &nbsp; IF TYPE('THIS.oFormRef')='O'
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.oFormRef.JobDone(THIS.JobType)
 &nbsp; ENDIF
ENDPROC
</code></pre>
<p>
Finally, the JobDone method of the form displays the status of the job in the list box on the form:</p>
<pre><code>PARAMETER cJob
THIS.lstJobs.AddItem(m.cJob+' job is complete.')
</code></pre>
<h3>The Life of the Job Object</h3>
<p>
The job object (based on the PrintJob, FaxJob, or GraphJob class defined in JOBMGR.prg) is:
<ul type=disc>
<li>
Created in the AddJob method of the Pool form. <br><br></li>
<li>
Passed to the NewJob method of the PoolMgr class.<br><br></li>
<li>
Stored in the PoolMgr class to an element in an array<br><br></li>
<li>
Passed in the Timer event of the timer object in PoolMgr to the SetupJob method of the PrintJob, FaxJob, or GraphJob object (as defined in Poolmgr.prg, <i>not</i> JOBMGR.prg, and created in the Timer event).<br><br></li>
<li>
Stored to a property of the PrintJob, FaxJob, or GraphJob class in the SetupJob method.<br><br></li>
<li>
Set to .NULL. in the EndJob method of the PrintJob, FaxJob, or GraphJob object, after the JobDone method of the job is called.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE CURSOR - SQL Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngcreate_cursor___sql"></a><sup></sup>CREATE CURSOR – SQL Command</h1>
<p>
<a href="lngcreate_cursor___sqlx.htm">Example</a> &nbsp; <a href="lngcreate_cursor___sqlsa.htm">See Also</a></p>
<p>
Creates a temporary table.</p>
<p class=label>
<b>Syntax</b></p>
<p>
CREATE CURSOR <i>alias_name</i><br>
 &nbsp; (<i>fname1</i> <i>type</i> [(<i>precision</i> [, <i>scale</i>])<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NULL | NOT NULL]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [CHECK <i>lExpression</i> [ERROR <i>cMessageText</i>]]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [DEFAULT <i>eExpression</i>]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [UNIQUE]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NOCPTRANS]]<br>
 &nbsp; [, <i>fname2</i> ...]) <br>
 &nbsp; | FROM ARRAY <i>ArrayName</i></p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>alias_name</i></p>
<p class=indent>
Specifies the name of the temporary table to create. <i>alias_name</i> can be a name expression.</p>
<p class=dt>
<i>fname</i></p>
<p class=indent>
Specifies the name of a field in the temporary table. Each <i>fname</i> can be a name expression.</p>
<p class=dt>
<i>type</i></p>
<p class=indent>
Specifies a single letter indicating the data type for the field.</p>
<p class=dt>
<i>precision</i></p>
<p class=indent>
Specifies the width of the field specified with <i>fname</i>. Some data types require that you specify a <i>precision</i>.</p>
<p class=dt>
<i>scale</i></p>
<p class=indent>
Specifies the number of decimal places for the specified data type. Some data types require that you specify a <i>scale</i>.</p>
<p class=tl>
The following table shows what <i>type</i>, <i>precision</i>, and <i>scale</i> can be:</P><table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><i>FieldType</i></td>
<td class=label width=22%><i>nFieldWidth</i><b> </b></td>
<td class=label width=18%><i>nPrecision</i></td>
<td class=label width=43%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=17%>C</td>
<td width=22%>n</td>
<td width=18%>–</td>
<td width=43%>Character field of width n</td>
</tr>
<tr valign=top>
<td width=17%>D</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>Date</td>
</tr>
<tr valign=top>
<td width=17%>T</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>Datetime</td>
</tr>
<tr valign=top>
<td width=17%>N</td>
<td width=22%>n</td>
<td width=18%>d</td>
<td width=43%>Numeric field of width n with d decimal places</td>
</tr>
<tr valign=top>
<td width=17%>F</td>
<td width=22%>n</td>
<td width=18%>d</td>
<td width=43%>Floating numeric field of width n with d decimal places</td>
</tr>
<tr valign=top>
<td width=17%>I</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>Integer</td>
</tr>
<tr valign=top>
<td width=17%>B</td>
<td width=22%>–</td>
<td width=18%>d</td>
<td width=43%>Double </td>
</tr>
<tr valign=top>
<td width=17%>Y</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>Currency</td>
</tr>
<tr valign=top>
<td width=17%>L</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>Logical</td>
</tr>
<tr valign=top>
<td width=17%>M</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>Memo</td>
</tr>
<tr valign=top>
<td width=17%>G</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>General</td>
</tr>
<tr valign=top>
<td width=17%>P</td>
<td width=22%>–</td>
<td width=18%>–</td>
<td width=43%>Picture</td>
</tr>
</table><br>
<p class=tl>
<i>nFieldWidth</i> and <i>nPrecision</i> are ignored for D, T, Y, L, M, G, and P types. <i>nPrecision</i> defaults to zero (no decimal places) if <i>nPrecision</i> isn't included for the N, F, or B types.</P><p class=dt>
NULL</p>
<p class=indent>
Allows null values in the field.</p>
<p class=dt>
NOT NULL</p>
<p class=indent>
Prevents null values in the field.</p>
<p class=tl>
If you omit NULL and NOT NULL, the current setting of SET NULL determines if null values are allowed in the field. However, if you omit NULL and NOT NULL and include the PRIMARY KEY or UNIQUE clause, the current setting of SET NULL is ignored and the field defaults to NOT NULL.</P><p class=dt>
CHECK <i>lExpression</i></p>
<p class=indent>
Specifies a validation rule for the field. <i>lExpression</i> can be a user-defined function.</p>
<p class=dt>
ERROR <i>cMessageText</i></p>
<p class=indent>
Specifies the error message Visual FoxPro displays when the field validation rule generates an error. The message is displayed only when data is changed within a Browse window or Edit window.</p>
<p class=dt>
DEFAULT <i>eExpression</i></p>
<p class=indent>
Specifies a default value for the field. The data type of <i>eExpression</i> must be the same as the field's data type.</p>
<p class=dt>
UNIQUE</p>
<p class=indent>
Creates a candidate index for the field. The candidate index tag has the same name as the field.</p>
<p class=tl>
For more information about candidate indexes, see "Using Indexes" in Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, in the <i>Programmer's Guide</i>.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Candidate indexes (created by including the UNIQUE option) are not the same as indexes created with the UNIQUE option in the INDEX command. An index created with the UNIQUE option in the INDEX command allows duplicate index keys; candidate indexes do not allow duplicate index keys.</p><p class=tl>
Null values and duplicate records are not permitted in a field used for a candidate index. However, Microsoft Visual FoxPro will not generate an error if you create a candidate index for a field that supports null values. Visual FoxPro will generate an error if you attempt to enter a null or duplicate value into a field used for a candidate index.</P><p class=dt>
NOCPTRANS</p>
<p class=indent>
Prevents translation to a different code page for character and memo fields. If the cursor is converted to another code page, the fields for which NOCPTRANS has been specified are not translated. NOCPTRANS can be specified only for character and memo fields.</p>
<p class=tl>
The following example creates a cursor named <code>MYCURSOR</code> containing two character fields and two memo fields. The second character field <code>CHAR2</code> and the second memo field <code>MEMO2</code> include NOCPTRANS to prevent translation.</P><pre><code>CREATE CURSOR mycursor (char1 C(10), char2 C(10) NOCPTRANS,;
 &nbsp; memo1 M, memo2 M NOCPTRANS)
</code></pre>
<p class=dt>
FROM ARRAY <i>ArrayName</i></p>
<p class=indent>
Specifies the name of an existing array whose contents are the name, type, precision, and scale for each field in the temporary table. See <a href="lngafieldslp_rp.htm">AFIELDS(&nbsp;)</a> for the proper format for the contents of the array.</p>
<p class=label>
<b>Remarks</b></p>
<p>
CREATE CURSOR creates a temporary table that exists only until it is closed. A temporary table created with CREATE CURSOR can be manipulated like any other table — it can be browsed and indexed, and you can append and modify records.</p>
<p>
The temporary table is opened in the lowest available work area, and can be accessed by its alias. Each field in the temporary table is defined with a name, type, precision, and scale. These definitions can be obtained from the command itself or from an array. The temporary table is opened exclusively regardless of the setting of SET EXCLUSIVE.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding OLE</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgadding_ole"></a><sup></sup>Chapter 16: Adding OLE</h1>
<p>
You can extend the power of your Visual FoxPro applications by employing the strengths of other Automation-enabled applications or <a href="glsactivex_control.htm">ActiveX controls</a>. In your applications’ forms or General fields, you can include specific functionality or data such as text, sound, pictures, and video from other applications. You can view or manipulate this data visibly by using the application that created it. Or, you can manipulate the data invisibly and automatically by controlling the application programmatically with Automation.</p>
<p>
Other applications can also tap into the power of Visual FoxPro through Automation. You can even create Automation servers (COM components) in Visual FoxPro that your applications or other applications can access locally and remotely.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dgdesigning_an_ole_application">Designing an OLE Application</a></li>
<li>
<a href="#dgadding_ole_objects_to_your_applications">Adding OLE Objects to Your Applications</a></li>
<li>
<a href="#dgusing_activex_controls">Using ActiveX Controls</a></li>
<li>
<a href="#dgmanipulating_objects_with_automation">Manipulating Objects with Automation</a></li>
<li>
<a href="#dgsubclassing_objects">Subclassing Objects</a></li>
<li>
<a href="#dgcontrolling_visual_foxpro_from_other_applications">Controlling Visual FoxPro from Other Applications</a></li>
<li>
<a href="#dgcreating_ole_servers">Creating Automation Servers</a></li>
<li>
<a href="#dgusing_remote_automation">Using Remote Automation</a></li>
</ul>

<h2><a name="dgdesigning_an_ole_application"></a>Designing an OLE Application</h2>
<p>
Automation-enabled applications and COM components can act as <a href="glsautomation_server.htm">Automation servers</a>, clients, or both. Components that act as servers can provide objects to another application; components that act as clients can create objects.</p>
<p>
You can easily incorporate the power and flexibility of applications, such as Microsoft Excel and Word, in your Visual FoxPro applications. Because Visual FoxPro also acts as a server, you can also provide functionality that can be integrated into solution packages based around Microsoft Office or other COM components.</p>
<p>
Insertable OLE objects come from OLE-capable applications such as Microsoft Excel and Word. Such objects include Word documents and Excel worksheets. On forms, you can link or embed these objects using the OLE Container control, and you can store such objects in General fields of a table, displaying them in your forms with the OLE Bound control.</p>
<p>
In a Visual FoxPro application, you can use OLE and ActiveX technology in many ways. Before you create an application, consider the ways you can use it.</p>
<h3>Linking or Embedding OLE Objects</h3>
<p>
You can embed or link files from other Windows applications in your tables and forms. For example, you can embed or link a Word document in a General field of a table, and you can embed or link an Excel worksheet on a form.</p>
<p>
The difference between embedding and linking lies in where the data is stored. Embedding stores the data in the table or form, whereas linking does not. For example, when you embed an Excel worksheet on a form, the form contains a copy of the worksheet. When you link, however, the form contains only a reference to the worksheet — not the worksheet itself.</p>
<p class=label>
<b>Embedding and linking data</b></p>
<p>
<img src="afd16001.gif" border=0></p>
<p>
Both embedded and linked data start off with the original contents of the server file, as the illustration shows:</p>
<p class=label>
<b>A spreadsheet embedded and linked in a form</b></p>
<p>
<img src="afd16002.gif" border=0></p>
<p>
But when the original file is changed, linked data is automatically updated to reflect the change, whereas embedded data is not:</p>
<p class=label>
<b>Linked data updated in a form</b></p>
<p>
<img src="afd16003.gif" border=0></p>
<p>
Embedded data is not necessarily static, though. Both embedded and linked data can be displayed, changed, and manipulated interactively and programmatically in Visual FoxPro.</p>
<h3>Adding Bound or Unbound OLE Objects</h3>
<p>
<img src="b017a.gif" border=0></p>
<p>
On a form or in a report, you can create objects that are bound to General fields in tables. Such objects are called <i>bound OLE objects</i> and you use them to display the contents of OLE objects in General fields. You create bound OLE objects by using the <a href="ctlole_bound_control.htm">OLE Bound</a> control on the Form Controls toolbar. Alternatively, you create <i>unbound OLE objects</i> by using the <a href="ctlole_container_control.htm">OLE Container</a> control. An unbound OLE object is not connected to a General field in a table.</p>

<h2><a name="dgadding_ole_objects_to_your_applications"></a>Adding OLE Objects to Your Applications</h2>
<p>
You can add OLE objects to tables and forms interactively or programmatically.</p>
<h3>Adding OLE Objects to Tables</h3>
<p>
While you're designing tables for your application, consider whether you need OLE objects in the tables. For instance, suppose you have a product table and want to include Word documents containing nicely formatted descriptions of the products to be sent to potential customers. To include the Word documents, you must define a General field in the table. Then, you add the documents to the table by linking or embedding them in the General field.</p>
<p class=label>
<b>To add an OLE object to a table</b>
<ol>
<li>
Use the <a href="wndtable_designer.htm">Table Designer</a> to create a table with General field.<br><br></li>
<li>
Open the window for the General field by browsing the table and double-clicking the General field or by using the <a href="lngmodify_general.htm">MODIFY GENERAL</a> command.<br><br></li>
<li>
From the <b>Edit</b> menu, choose <b>Insert Object</b>.<p class=tl>
-or-</P></li>
</ol>
<ul type=disc>
<li>
Use the <a href="lngappend_general.htm">APPEND GENERAL</a> command.</li>
</ul>
<p>
For more information about adding OLE objects with the Table Designer, see Chapter 10, <a href="ugsharing_information_with_other_applications.htm">Sharing Information with Other Applications</a>, in the <i>User’s Guide</i>.</p>
<h4>Appending OLE Objects to Tables</h4>
<p>
You can add OLE objects to tables programmatically with the <a href="lngappend_general.htm">APPEND GENERAL</a> command. With this command, you can import an OLE object from a file and place it in a General field. If the field already contains an object, the new object replaces it.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Unlike APPEND and APPEND BLANK, APPEND GENERAL does not add a new record to the table.</p>
<p>
You can use APPEND GENERAL to embed OLE objects or link to OLE objects created by applications such as Microsoft Excel and Word. These applications support both linking and embedding. However, some applications such as Microsoft Graph only support embedding.</p>
<p>
Suppose you have Microsoft Word files that you want to store in a Visual FoxPro table. If the table has a General field named <code>WordDoc</code>, you can embed the documents by using the following code:</p>
<pre><code>CREATE TABLE oletable (name c(24), worddoc g)
CD GETDIR()

nFiles = ADIR(aWordFiles, "*.doc")
IF nFiles &gt; 0
 &nbsp; FOR i = 1 to nFiles
 &nbsp;&nbsp;&nbsp;&nbsp; APPEND BLANK
 &nbsp;&nbsp;&nbsp;&nbsp; REPLACE Oletable.Name WITH aWordFiles(i,1)
 &nbsp;&nbsp;&nbsp;&nbsp; APPEND GENERAL WordDoc FROM aWordFiles(i,1)
 &nbsp; ENDFOR
ELSE
 &nbsp; MESSAGEBOX("No Word files found.")
ENDIF
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The preceding example looks only for files ending in .doc, the standard extension used by Word files. Because Microsoft Word and OLE are aware of this, the files are automatically associated with the Word server when you use APPEND GENERAL.</p>
<p>
If you use a different extension from the one expected by the server, you must declare the class of the server, using the CLASS clause. For example, if you add the class for Word to the previous example, the code becomes:</p>
<pre><code>APPEND GENERAL WordDoc FROM wordfiles(i,1) CLASS "Word.Document.6"
</code></pre>
<p>
If you have files with common extensions (for example, .bmp) that other servers might use, you can use the CLASS clause to specify the particular server you want to use for those files. Alternatively, if you’d rather link than embed objects, use the LINK keyword.</p>
<pre><code>APPEND GENERAL WordDoc FROM wordfiles(i,1) LINK CLASS "Word.Document.6"
</code></pre>
<p>
In addition, you can replace data in an object by using the DATA keyword of <a href="lngappend_general.htm">APPEND GENERAL</a>, as the following Microsoft Graph example illustrates.</p>
<h4>Refreshing Microsoft Graph</h4>
<p>
Microsoft Graph is an embeddable application. The values in a Microsoft Graph chart are based on the values in the Microsoft Graph data sheet.</p>
<p class=label>
<b>Microsoft Graph object in a general field</b></p>
<p>
<img src="afd16004.gif" border=0></p>
<p>
In order to programmatically change the data in a Microsoft Graph chart, you need to construct a string that contains the new data, including tabs, carriage returns, and line feeds, and pass this string to a Microsoft Graph object with the DATA clause of the <a href="lngappend_general.htm">APPEND GENERAL</a> command.</p>
<p>
The following example assumes you have a table, named <code>stock</code>, with, among other fields, <code>date</code> and <code>close</code> for the date and the closing price of the stock. The Microsoft Graph object is stored in the <code>msgraph</code> general field of a table named <code>graph</code>. The example refreshes a graph with stock closing prices from the previous 30 days.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Code</b></td>
<td class=label width=50%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=50%><pre><code>#DEFINE CRLF CHR(13)+CHR(10)</code><pre><code>#DEFINE TAB CHR(9)
LOCAL lcData</code></pre>
</pre>
</td>
<td width=50%>Define carriage return and tab characters.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>SELECT date, close;</code><pre><code>&nbsp;&nbsp;FROM Stock WHERE BETWEEN(date, ;
  DATE(),DATE() - 30) ;
  ORDER BY date INTO CURSOR wtemp</code></pre>
</pre>
</td>
<td width=50%>Select the values that you want to update the graph with, in this case, the date and closing values for stocks for the last 30 days.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>SELECT wtemp</code><pre><code>lcData = " " + ;
  TAB + "Closing Price" + CRLF
SCAN 
  lcData = lcData + DTOC(date)
  lcData = lcData + TAB
  lcData = lcData + ;
  ALLTRIM(STR(close)) + CRLF
ENDSCAN</code></pre>
</pre>
</td>
<td width=50%>Build a character string (<code>lcData</code>) of data from the cursor to refresh the graph.<p>
“Closing Price,” as the column header, is the text that will be displayed by default in the graph’s legend.</p>
</td>
</tr>
<tr valign=top>
<td width=50%><pre><pre><code>SELECT graph
APPEND GENERAL msgraph DATA lcData</code></pre>
</pre>
</td>
<td width=50%>Send the new values to the graph in the DATA clause of the APPEND GENERAL command.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>USE IN wtemp</code></pre>
</td>
<td width=50%>Close the cursor.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also display OLE objects from General fields in your reports. For details about displaying OLE objects in reports, see “Adding a General Field” in Chapter 7, <a href="ugdesigning_reports_and_labels.htm">Designing Reports and Labels</a>, in the <i>User’s Guide</i>.</p>
<h3>Adding OLE Objects to Forms</h3>
<p>
Using the Form Designer, you can add insertable OLE objects to forms with the <a href="ctlole_container_control.htm">OLE Container</a> control. In addition, you can display OLE objects from General fields by using the <a href="ctlole_bound_control.htm">OLE Bound</a> control.</p>
<p class=label>
<b>To add an OLE object to a form</b>
<ol>
<li>
In the <a href="wndform_designer.htm">Form Designer</a>, add an <a href="ctlole_container_control.htm">OLE Container</a> control to your form. The <b>Insert Object</b> dialog box opens.<br><br></li>
<li>
In the <a href="cmdinsert_object_dialog_box.htm">Insert Object</a> dialog box, select <b>Create New</b> or <b>Create from File</b>.<p class=label>
<b>Insert Object dialog box</b>
<p>
<img src="afd16005.gif" border=0></P></li>
<li>
Choose the appropriate OLE object from the <b>Object Type</b> list.</li>
</ol>
<p>
You can also customize the Form Controls toolbar so that you can directly add specific OLE objects.</p>
<p class=label>
<b>To add OLE objects to the Form Controls toolbar</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options.</b><br><br></li>
<li>
In the <a href="cmdcontrols_tab_options_dialog_box.htm">Controls</a> tab of the <b>Options</b> dialog box, choose <b>ActiveX controls</b>.<p class=label>
<b>Controls tab of the Options dialog box</b>
<p>
<img src="afd16006.gif" border=0></P></li>
<li>
In the <b>Selected</b> list, select the OLE objects and ActiveX controls you want to be available from the <b>Form Controls</b> toolbar.<br><br></li>
<li>
Choose <b>Set as Default</b>, and then choose <b>OK</b>.<br><br></li>
<li>
In the <b>Form Controls</b> toolbar, choose <b>View Classes</b>, and then choose <b>ActiveX Controls</b>.</li>
</ol>
<p class=label>
<b>To display an OLE object from a General field</b>
<ol>
<li>
In the <a href="wndform_designer.htm">Form Designer</a>, add an <a href="ctlole_bound_control.htm">OLE Bound</a> control to your form.<br><br></li>
<li>
Specify the General field that contains the data by setting the object’s <a href="lngcontrolsource_property.htm">ControlSource</a> property.<p class=tl>
For example, if the table name is <code>Inventory</code> and the General field name is <code>Current</code>, then set the ControlSource property to <code>Inventory.Current</code>.</P></li>
</ol>
<p>
You can also display an OLE object from a General field programmatically:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=66%><b>Code</b></td>
<td class=label width=34%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=66%><pre><code>frm1 = CREATEOBJECT("form")</code></pre>
</td>
<td width=34%>Create form.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>frm1.ADDOBJECT("olb1",
"oleboundcontrol")</code></pre>
</td>
<td width=34%>Add control.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>frm1.olb1.ControlSource = 
"Inventory.Current"</code></pre>
</td>
<td width=34%>Bind the data to the control.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>frm1.olb1.Visible = .T.</code><pre><code>frm1.Visible = .T.</code></pre>
</pre>
</td>
<td width=34%>Make the control and form visible.</td>
</tr>
</table><br>
<h3>Interacting with OLE Objects</h3>
<p>
If you add an OLE object to a form or General field, you can edit the data and display characteristics of the object at run time or design time.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot edit the data of an OLE object in an OLE Bound control at design time.</p>
<p>
Some OLE objects support in-place editing so that you can edit the object in the window used by your application. For example, if you double-click a Microsoft Excel worksheet object in a General field, rather than starting a copy of Microsoft Excel in another window, the menu titles change to reflect the Microsoft Excel menu structure and the default Microsoft Excel toolbars are displayed. You or your application user can then edit the Microsoft Excel object without leaving your application.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can edit only embedded objects in place, not linked objects.</p>
<p>
You can also open the Automation server in another window, edit the data or display characteristics there, and have the new values reflected in your application when you return to it.</p>
<p class=label>
<b>To edit an OLE object in place in a General field window</b>
<ul type=disc>
<li>
From the <b>Edit</b> menu, select the specific object type, and from the submenu, choose <b>Edit</b>.<p class=tl>
For example, if the object is a Word document, select the <b>Document Object</b> menu item; if the object is a Microsoft Graph chart, select the <b>Chart Object</b> menu item.</P><p class=tl>
-or-</P></li>
<li>
Double-click the object.</li>
</ul>
<p class=label>
<b>To open the application for an OLE object in a General field window</b>
<ul type=disc>
<li>
From the <b>Edit</b> menu, select the specific object type, and from the submenu, choose <b>Open</b>.</li>
</ul>
<p>
When you add an OLE object to a form in either the <a href="ctlole_container_control.htm">OLE Container</a> control or the <a href="ctlole_bound_control.htm">OLE Bound</a> control, you have more control over the opening and editing of the object.</p>
<p>
You can determine whether the OLE object is opened or edited when the control gets the focus or when the user double-clicks the control by setting the AutoActivate property of an OLE bound or container control. The AutoVerbMenu property specifies whether the shortcut menu of the ActiveX control allows a user to open or edit the OLE object.</p>
<p>
To control access so that the OLE object can only be opened or edited programmatically with the <a href="lngdoverb_method.htm">DoVerb</a> method, set <a href="lngautoactivate_property.htm">AutoActivate</a> to 0 - Manual and <a href="lngautoverbmenuproperty.htm">AutoVerbMenu</a> to false (.F.) . </p>
<h4>Controlling Menus</h4>
<p>
When a user is in-place editing an OLE object, the menu bar displays the menus for the OLE object, not the menus for your application. If you create a menu title and want it to be displayed even while the user edits an OLE object, select Negotiate in the Prompt Options dialog box of the Menu Designer. For more information, see Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a>, or the NEGOTIATE clause in the <a href="lngdefine_pad.htm">DEFINE PAD</a> topic.</p>

<h2><a name="dgusing_activex_controls"></a>Using ActiveX Controls</h2>
<p>
ActiveX controls are objects with encapsulated functionality and exposed properties, events and methods. ActiveX controls provide a wide range of functionality that you can easily tap into. ActiveX controls that ship with Visual FoxPro include:</p>
<ul type=disc>
<li>
Windows 95 controls, like the RichText and the TreeView controls.</li>
<li>
System controls, like the Communications and MAPI controls.</li>
</ul>
<p>
ActiveX controls are versatile because you can subclass them to create other controls and you can control them by using the events, methods, and properties associated with the controls. You cannot create ActiveX controls with Visual FoxPro; however, you can create them using the Microsoft OLE Custom Control Developer’s Kit provided with Microsoft Visual C++<sup>®</sup> 4.0, and with the Microsoft Visual Basic<sup>®</sup> Control Creation Edition version 5.0.</p>
<p>
For more information about accessing ActiveX controls, see Chapter 27, <a href="dgextending_visual_foxpro_with_external_libraries.htm">Extending Visual FoxPro with External Libraries</a>. For more information on creating ActiveX controls specific to Visual FoxPro, see Chapter 28, <a href="dgaccessing_the_visual_foxpro_api.htm">Accessing the Visual FoxPro API</a>.</p>
<h3>Adding ActiveX Controls to a Form</h3>
<p>
ActiveX controls in Visual FoxPro must be contained in an OLE Container control (the base class is OLEControl). When you add an OLE Container control to a form, you can choose the ActiveX control you want to add to the form.</p>
<p class=label>
<b>To add an ActiveX control to a form</b>
<ol>
<li>
From the <b>Form Controls</b> toolbar, choose <a href="ctlole_container_control.htm">OLE Container Control</a> and drag it to size in the form.<br><br></li>
<li>
In the <a href="cmdinsert_object_dialog_box.htm">Insert Object</a> dialog box, choose <b>Insert Control</b>.<p class=label>
<b>Insert Object dialog box</b>
<p>
<img src="afd16007.gif" border=0></P></li>
<li>
In the <b>Control Type</b> list, select the desired ActiveX control.<br><br></li>
<li>
Choose <b>OK</b>.</li>
</ol>
<h3>Managing Bound ActiveX Controls</h3>
<p>
If an ActiveX control supports simple data binding, Visual FoxPro will expose a ControlSource property for the control. All you have to do is set the ControlSource property to a table field and the value displayed in the ActiveX control reflects that value in the underlying field. Changes to the value in the control are saved to the field.</p>
<p>
For examples of using ActiveX controls, run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To ensure all ActiveX control events are processed, set the <a href="lngautoyield_property.htm">AutoYield</a> property of the Visual FoxPro Application object to false (.F.).</p>

<h2><a name="dgmanipulating_objects_with_automation"></a>Manipulating Objects with Automation</h2>
<p>
OLE objects in your forms or programs, or ActiveX controls inside OLE Container controls, can be manipulated through code in the same way that you can program native Visual FoxPro objects.</p>
<h3>Manipulating Extrinsic Object Properties</h3>
<p>
In code, you can manipulate an object using its properties. The way you reference a property depends on whether the object stands alone or is part of a container, such as the <a href="ctlole_container_control.htm">OLE Container</a> control or <a href="ctlole_bound_control.htm">OLE Bound</a> control.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;ActiveX controls are always part of an OLE Container control.</p>
<p>
An object in a container has two parts: the object itself and a container around the object. Both the object and the container have properties, and sometimes they have the same property names. To ensure you reference the object’s properties, always append the container’s <a href="lngobject_property.htm">Object</a> property to the object’s name. For example, the following code refers to the object’s Left property.</p>
<pre><code>frm1.olecontrol1.Object.Left = 25&nbsp; &amp;&amp; Object's Left
</code></pre>
<p>
If you omit the Object property, you reference the container’s Left property instead.</p>
<pre><code>frm1.olecontrol1.Left= 25&nbsp; &amp;&amp; Container's Left property 
</code></pre>
<p>
For example, suppose you have an application that sends mail when the user clicks on a compose command button. If you've added a Microsoft MAPI message control to a form as <code>olecontrol1</code>, the code associated with the Click event of the command button might be:</p>
<pre><code>THISFORM.olecontrol1.Object.Compose
THISFORM.olecontrol1.Object.Send(.T.)
</code></pre>
<p>
In addition to using the Object property to reference properties of the contained object, you can use other properties of the container control. For example, you can reference the read-only <a href="lngoleclass_property.htm">OLEClass</a> property to identify the type of object in the container and the <a href="lngsizable_property.htm">Sizable</a> property to prevent users from changing the size of an object. For details about container control properties, see <a href="ctlole_container_control.htm">OLE Container Control</a>.</p>
<p>
In the Form and Class Designers, the properties of ActiveX controls are displayed in the Visual FoxPro <a href="wndproperties_window.htm">Properties</a> window, but most ActiveX controls also have their own interface for setting common properties. You can see this properties interface by selecting the object-specific Properties option from the ActiveX control’s shortcut menu. For example, to open the Properties dialog box for a rich text control, choose Microsoft RichText Control Properties from the shortcut menu.</p>
<p class=label>
<b>Opening the RichText control properties dialog box</b></p>
<p>
<img src="afd16009.gif" border=0></p>
<h3>Using Extrinsic Object Methods</h3>
<p>
In addition to setting and retrieving properties of objects, you can manipulate an object using methods it supports. For example, you can use the Add method of a Microsoft Excel collection object to create a new Microsoft Excel workbook.</p>
<p>
The following Automation example uses the Add method to create an Excel workbook, the Save method to save the workbook, and the Quit method to end Excel:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=70%><b>Code</b></td>
<td class=label width=30%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=70%><pre><code>oleApp = CREATEOBJECT("Excel.Application")</code></pre>
</td>
<td width=30%>Start Excel.</td>
</tr>
<tr valign=top>
<td width=70%><pre><code>OleApp.Visible=.T.</code></pre>
</td>
<td width=30%>Display Excel.</td>
</tr>
<tr valign=top>
<td width=70%><pre><code>OleApp.Workbooks.Add</code></pre>
</td>
<td width=30%>Create a workbook.</td>
</tr>
<tr valign=top>
<td width=70%><pre><code>OleApp.Cells(1,1).Value=7</code></pre>
</td>
<td width=30%>Set a cell’s value.</td>
</tr>
<tr valign=top>
<td width=70%><pre><code>OleApp.ActiveWorkbook.SaveAs("C:\TEMP.XLS")</code></pre>
</td>
<td width=30%>Save the workbook.</td>
</tr>
<tr valign=top>
<td width=70%><pre><code>OleApp.Quit</code></pre>
</td>
<td width=30%>Quit Excel.</td>
</tr>
</table><br>
<p>
If you create an object using the OLE Container control or OLE Bound control, you can use the <a href="lngdoverb_method.htm">DoVerb</a> method of the control to execute a verb on the object. For example, use DoVerb(0) to execute the default verb, DoVerb(– 1) to activate the object for visual editing, and DoVerb(– 2) to open the object in a separate window.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;See an application’s documentation to determine what Automation commands it supports. For example, Microsoft Excel add-in components are not available for Automation.</p>
<h3>Setting Time Outs</h3>
<p>
When you pass a request to an OLE object, the Automation server processes it. You don’t have much control over the server processing, but you can specify how long you’ll wait for a process to finish by setting the <a href="lngolerequestpendingtimeout_property.htm">OLERequestPendingTimeout</a> and <a href="lngoleserverbusytimeout_property.htm">OLEServerBusyTimeout</a> properties. You can determine what happens when that time has expired by setting the <a href="lngoleserverbusyraiseerror_property.htm">OLEServerBusyRaiseError</a> property.</p>
<h3>Accessing Collections of Objects</h3>
<p>
An object type can represent a single object or a collection of related objects. For example, a Microsoft Excel Workbook object represents a single workbook, whereas the Workbooks object represents all the workbooks currently loaded. Because the Workbooks object represents a collection of objects, it's called a collection object.</p>
<p>
In code, a collection is an unordered list in which the position of an object can change whenever objects are added to or removed from the collection. You access an object in a collection by iterating through the collection, using the Count property of the collection. The Count property returns the number of items in the collection. You can also use the Item method to return an item in a collection.</p>
<p>
For example, to display the names of worksheets in a Microsoft Excel workbook, use the following code:</p>
<pre><code>oleApp = CREATEOBJECT("Excel.Application")
oleApp.Workbooks.Add
FOR EACH x IN oleApp.Workbooks
 ? x.Name
ENDFOR
</code></pre>
<p>
You can also access a collection within a collection. For example, you can access a cells collection within a range using the following code:</p>
<pre><code>oleApp = CREATEOBJECT("Excel.sheet")
oleApp.Workbooks.Add
oleApp.Range(oleApp.Cells(1,1),oleApp.Cells(10,10)).Value=100
oleApp.Visible=.T.
</code></pre>
<h3>Using Arrays of Objects</h3>
<p>
You can pass arrays to methods, and you can receive arrays back. However, you must pass arrays by reference by prefixing the array name with the @ sign.</p>
<p>
For example, to send a Visual FoxPro array to Microsoft Excel, consider the following code. It creates an array in Visual FoxPro, assigns the array some values, starts Microsoft Excel, creates a workbook, sets a value to the first cell of a worksheet, and then copies that value to the other sheets in the array:</p>
<pre><code>DIMENSION aV(3)
aV(1) = "Sheet1"
aV(2) = "Sheet2"
aV(3) = "Sheet3"
oleApp=CREATEOBJECT("Excel.Application")
oleApp.Workbooks.Add
oleI=oleApp.Workbooks.Item(1)
oleI.Sheets.Item(1).Cells(1,1).Value = 83
oleI.Sheets(@aV).;
 FillAcrossSheets(oleI.Worksheets("Sheet1").Cells(1,1))

oleApp.Visible = .T.
</code></pre>
<p>
Alternatively, the following example returns an array to Visual FoxPro and then displays the contents of the array:</p>
<pre><code>oleApp = CREATEOBJECT("Excel.Application")
aOleArray = oleApp.GetCustomListContents(3)
FOR nIndex = 1 to ALEN(aOleArray)
 &nbsp; ? aOleArray(nIndex)
ENDFOR
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;With Visual FoxPro, you cannot pass arrays larger than two dimensions to OLE objects. For more information about working with arrays in Visual FoxPro, see Chapter 3, <a href="dgobject_oriented_programming.htm">Object-Oriented Programming</a> and <a href="lngoverview_of_the_language.htm">Overview of the Language</a>.</p>
<h3>Releasing Extrinsic Objects</h3>
<p>
An Automation server is automatically released if it is not visible and no variables in scope reference the object. You can use the <a href="lngrelease.htm">RELEASE</a> command to release the variable associated with an object. If the server is visible, use the <a href="lngquit_method.htm">Quit</a> method to release it.</p>

<h2><a name="dgsubclassing_objects"></a>Subclassing Objects</h2>
<p>
You can create custom objects by subclassing the base classes provided with Visual FoxPro. For example, the following code subclasses the Outline control provided with Visual FoxPro:</p>
<p class=label>
<b>Subclassing the Outline Control</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=66%><b>Code</b></td>
<td class=label width=34%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=66%><pre><code>PUBLIC frmMyForm, cFilename
SET SAFETY OFF</code></pre>
</td>
<td width=34%>Declare variables and initialize.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>frmMyForm = CREATEOBJECT("form")
frmMyForm.Width = 100
frmMyForm.ADDOBJECT("oleOutl","myoutline")
DIMENSION aSection(3)
aSection(1) = "Table"
aSection(2) = "Field"
aSection(3) = "Index"</code></pre>
</td>
<td width=34%>Create a form, add the custom outline control to the form, and then create an array for the items that the control lists.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>cFilename = GETFILE("dbc","Select a DBC")
USE (cFilename)
INDEX ON objecttype FOR (objecttype = "Table" ;
 &nbsp; OR objecttype = "Field" ;
 &nbsp; OR objecttype = "Index" ) ;
 &nbsp; TAG fname</code></pre>
</td>
<td width=34%>Prompt for a database that contains the information you want the control to list.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>FOR nIndex = 1 TO 3 STEP 1
 &nbsp; frmMyForm.oleOutl.AddItem(aSection(nIndex))
 &nbsp; frmMyForm.oleOutl.Indent;
 &nbsp;&nbsp; ((frmMyForm.oleOutl.ListCount-1)) = 1
 &nbsp; SCAN
 &nbsp;&nbsp;&nbsp;&nbsp; IF objecttype = aSection(nIndex)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frmMyForm.oleOutl.Additem(objectname)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frmMyForm.oleOutl.Indent;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((frmMyForm.oleOutl.ListCount-1)) = 2
 &nbsp;&nbsp;&nbsp;&nbsp; ENDIF
 &nbsp; ENDSCAN
 &nbsp; GO TOP
ENDFOR</code></pre>
</td>
<td width=34%>Gather information from the database, and then add it to the control.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>frmMyForm.oleOutl.Visible = .T.
frmMyForm.Show</code></pre>
</td>
<td width=34%>Make the control visible, and then display the form.</td>
</tr>
<tr valign=top>
<td width=66%><pre><code>DEFINE CLASS myoutline AS olecontrol
 &nbsp; OleClass = "msoutl.outline"
 &nbsp; Top = 5
 &nbsp; Left = 5
 &nbsp; Height = 10
 &nbsp; Width = 60
ENDDEFINE</code></pre>
</td>
<td width=34%>Define a subclass of the OLE Container control and add the outline control by setting the OleClass property of the container, and then defining other custom settings.</td>
</tr>
</table><br>
<p>
If you want to distribute your applications, there are some additional considerations. For more information, see Chapter 25, “<a href="dgbuilding_an_application_for_distribution.htm">Building an Application for Distribution</a>.”</p>

<h2><a name="dgcontrolling_visual_foxpro_from_other_applications"></a>Controlling Visual FoxPro from Other Applications</h2>
<p>
Because Visual FoxPro acts as a server (with level 2 compliance) as well as a client, applications that support Automation can create instances of Visual FoxPro, run Visual FoxPro commands, and access Visual FoxPro objects.</p>
<p>
You can even manipulate Visual FoxPro from applications that don't support Automation by using <a href="ovrfpole.htm">Fpole.dll</a>.</p>
<p>
You control Visual FoxPro from other applications by using the Visual FoxPro Application object. An Application object is automatically created whenever Visual FoxPro is launched, either directly, through DDE or through Automation.</p>
<p>
For example, the following lines of code in Visual Basic<sup>®</sup>, or a Microsoft Excel module create a reference to a Visual FoxPro application object:</p>
<pre><code>Dim oFox as Object
Set oFox = CreateObject("VisualFoxPro.Application")
</code></pre>
<p>
Once you have a reference to the Visual FoxPro Application object, you can call methods associated with the application object and access other objects through the collection properties of the Application object.</p>
<p class=label>
<b>Methods of the Application Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=50%><a href="lngdatatoclipmethod.htm">DataToClip</a></td>
<td width=50%><a href="lnghelpmethod.htm">Help</a></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngdocmd_method.htm">DoCmd</a></td>
<td width=50%><a href="lngquit_method.htm">Quit</a></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngeval_method.htm">Eval</a></td>
<td width=50%><a href="lngrequestdatamethod.htm">RequestData</a></td>
</tr>
</table><br>
<p>
The following example uses Visual Basic for Applications code in an Excel module to create a Visual FoxPro Application object, open a Visual FoxPro table, and add the results of a query to the active spreadsheet:</p>
<pre><code>Sub FoxTest()
Dim oFox as Object
Set oFox = CreateObject("VisualFoxPro.Application")

oFox.DoCmd "USE customer"
oFox.DoCmd "SELECT contact, phone FROM customer 
 &nbsp; WHERE country = " + Chr$(39) + USA+ Chr$(39) + " INTO CURSOR cust"
oFox.DataToClip "cust",,3
Range("A1:B1").Select
ActiveSheet.Paste
End Sub
</code></pre>
<h3>The Visual FoxPro Application Object Model</h3>
<p>
An application object is automatically created whenever Visual FoxPro is launched, either directly, through Automation or DDE. This application object provides access to all other objects created in a Visual FoxPro session through Collection properties.</p>
<p class=label>
<b>Visual FoxPro application object model</b></p>
<p>
<img src="afd16010.gif" border=0></p>
<h3>Accessing Objects Through Collection Properties</h3>
<p>
The Visual FoxPro application object and all container objects in Visual FoxPro have a count property and a collection property associated with them. The collection property is an array referencing each contained object. The count property is a numeric property indicating the number of contained objects.</p>
<p>
The following table lists objects and the corresponding collection and count properties.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Object</b></td>
<td class=label width=33%><b>Collection Property</b></td>
<td class=label width=34%><b>Count Property</b></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlapplication_object.htm">Application</a></td>
<td width=33%><a href="lngobjects_collection.htm">Objects</a><br>
<a href="lngforms_property.htm">Forms</a></td>
<td width=34%><a href="lngcount_property.htm">Count</a><br>
<a href="lngformcount_property.htm">FormCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlformset_object.htm">FormSet</a></td>
<td width=33%><a href="lngforms_property.htm">Forms</a></td>
<td width=34%><a href="lngformcount_property.htm">FormCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlform_object.htm">Form</a></td>
<td width=33%><a href="lngobjects_collection.htm">Objects</a><br>
<a href="lngcontrols_property.htm">Controls</a></td>
<td width=34%><a href="lngcount_property.htm">Count</a><br>
<a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlpageframe_control.htm">PageFrame</a></td>
<td width=33%><a href="lngpages_property.htm">Pages</a></td>
<td width=34%><a href="lngpagecount_property.htm">PageCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlpage_object.htm">Page</a></td>
<td width=33%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=34%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlgrid_control.htm">Grid</a></td>
<td width=33%><a href="lngcolumns_property.htm">Columns</a></td>
<td width=34%><a href="lngcolumncount_property.htm">ColumnCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlcommandgroup_control.htm">CommandGroup</a></td>
<td width=33%><a href="lngbuttons_property.htm">Buttons</a></td>
<td width=34%><a href="lngbuttoncount_property.htm">ButtonCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctloptiongroup_control.htm">OptionGroup</a></td>
<td width=33%><a href="lngbuttons_property.htm">Buttons</a></td>
<td width=34%><a href="lngbuttoncount_property.htm">ButtonCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlcolumn_object.htm">Column</a></td>
<td width=33%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=34%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctltoolbar_object.htm">ToolBar</a></td>
<td width=33%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=34%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlcontainer_object.htm">Container</a></td>
<td width=33%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=34%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="ctlcontrol_object.htm">Control</a></td>
<td width=33%><a href="lngcontrols_property.htm">Controls</a></td>
<td width=34%><a href="lngcontrolcount_property.htm">ControlCount</a></td>
</tr>
</table><br>
<p>
These properties allow you to use a loop to programmatically manipulate all or specific contained objects. For example, the following lines of code set the Visible property of all forms to True (.T.):</p>
<pre><code>FOR EACH Form IN Application.Forms
 &nbsp; Form.Visible = .T.
ENDFOR
</code></pre>

<h2><a name="dgcreating_ole_servers"></a>Creating Automation servers</h2>
<p>
With Visual FoxPro, you can create Automation servers (COM components) that package code to perform tasks common to many applications, or that implement complex business rules. These tasks and rules are then available to other programmers in your company, and to users of tools that support automation.</p>
<p>
For example, you could create one or more classes to handle enterprise-wide business rules. A client application that uses the business rule objects would pass input parameters in a method call, and the Automation server might then do a great deal of work, retrieving data from various sources and performing complex calculations, before returning the answer.</p>
<p>
Examples of Automation servers are installed in the Visual Studio …\Samples\Vfp98\Servers directory.</p>
<h3>Creating the Server</h3>
<p>
All you need to create an Automation server in Visual FoxPro is a project that contains classes defined as OLEPUBLIC. You can have as many OLEPUBLIC classes as you want in the project and they can be defined in program files (.prg) or class libraries (.vcx).</p>
<p>
For example, the following class definition in a program file creates a custom OLE public class:</p>
<pre><code>DEFINE class person AS CUSTOM OLEPUBLIC
 &nbsp; FirstName = SPACE(30)
 &nbsp; LastName = SPACE(45)

 &nbsp; PROCEDURE GetName
 &nbsp;&nbsp;&nbsp;&nbsp; RETURN THIS.FirstName + " " + THIS.LastName
 &nbsp; ENDPROC
ENDDEFINE
</code></pre>
<p>
When you're designing a class in the Class Designer, select OLE Public in the <a href="cmdclass_info_dialog_box.htm">Class Info</a> dialog box to designate the class as OLEPUBLIC.</p>
<p class=label>
<b>Class Info dialog box</b></p>
<p>
<img src="afd16011.gif" border=0></p>
<h4>Compiling the Server</h4>
<p>
In Visual FoxPro, you can create either an <a href="glsout_of_process.htm">out-of-process</a> or an <a href="glsin_process.htm">in-process</a> Automation server. An <i>out-of-process </i>component is an executable (.exe file) that runs in its own process. Communication between a client application and an out-of-process server is therefore called <i>cross-process </i>communication. An <i>in-process </i>component is a dynamic-link library (DLL) that runs in the same process address space as the client that calls it.</p>
<p>
There are benefits to each. An in-process server is faster because there is no inter-process communication overhead. On the other hand, an out-of-process server can be deployed remotely and an in-process server cannot. Additionally, because the in-process server and the client share a process address space, any serious error in the .dll will terminate the client whereas an error in an out-of-process .exe would only terminate the server.</p>
<p>
When you create an executable with OLE Public classes, you don’t lose any of your normal .exe capabilities. You can still run the executable, provide a user interface, and all the normal functionality you would include in an application. You increase the extensibility of your application, though, by allowing other applications to tap into the specific functionality you want to expose.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If more than one user is accessing the Automation server, there can be conflicts. If you've provided Automation access as well as a user interface for your functionality, provide an extra layer of consistency checking in the interface to make sure your environment hasn’t been changed.</p>
<p class=label>
<b>To compile an Automation server</b>
<ol>
<li>
From the <b>Project Manager</b>, choose <b>Build</b>.<br><br></li>
<li>
In the <a href="cmdbuild_options_dialog_box.htm">Build Options</a> dialog box, choose <b>Build Executable</b> or <b>Build OLE DLL</b>.<p class=label>
<b>Build Options dialog box</b>
<p>
<img src="afd16012.gif" border=0></P></li>
<li>
Choose <b>OK</b>.<p class=tl>
-or-</P></li>
</ol>
<ul type=disc>
<li>
Use the <a href="lngbuild_dll.htm">BUILD DLL</a> or <a href="lngbuild_exe.htm">BUILD EXE</a> commands.</li>
</ul>
<p>
Once you build the project, you can see the server classes displayed in the <a href="cmdproject_information_dialog_box.htm">Project Information</a> dialog box. Here you can also specify a help file and a Help context ID for each class. This help file can be opened from most generic object browsers.</p>
<p class=label>
<b>Project Information dialog box</b></p>
<p>
<img src="afd16013.gif" border=0></p>
<p>
You can choose class-specific instancing values in the Project Information dialog box. The instancing options are:</p>
<ul type=disc>
<li>
<B><b>Not Creatable</b></B>&nbsp;&nbsp;&nbsp;Even though the class is marked OLE public, it will not be available to other applications. For example, you could have a standard library of OLE public classes used in multiple applications and disable automation of one or more classes for a single application.</li>
<li>
<B><b>Single Use</b></B>&nbsp;&nbsp;&nbsp;Each client application that uses your server creates a separate instance of the server class. Each instance has a single thread of execution. Although separate instances require more memory, choosing Single Use allows the operating system to apply preemptive multitasking.</li>
<li>
<B><b>Multi Use</b></B>&nbsp;&nbsp;&nbsp;Once the server has been created, other applications can use the same instance.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you make changes in the Servers tab of the Project Information dialog box, you need to rebuild the .dll or .exe for the new settings to take effect.</p></li>
</ul>
<p>
When you build a project with OLE public classes, three files are created:</p>
<ul type=disc>
<li>
The .dll or .exe</li>
<li>
A type library (.tlb) file</li>
<li>
A registry (.vbr) file</li>
</ul>
<p>
The type library file is a binary file that lists all the published classes in your Automation server, along with their properties, methods, and events. OLE object browsers read this information and present it in a readable interface.</p>
<p>
The registry file lists the <a href="glsglobally_unique_identifier.htm">global unique IDs</a> (GUID) for the classes in your server.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A .vbr registry file is the same as a .reg registry file except that the .vbr file doesn’t include hard-coded paths.</p>
<p class=label>
<b>A .vbr file with GUIDs for each OLE public class in a project</b></p>
<p>
<img src="afd16014.gif" border=0></p>
<h3>Registering an Automation server</h3>
<p>
Your Automation servers are available to other applications once the servers have been added to the Windows Registry. When you build an Automation server, it's automatically registered on the build machine. You can also register your servers on other machines.</p>
<p>
When you use the Visual FoxPro <a href="wizsetup_wizard.htm">Setup Wizard</a> to create setup disks, the setup program registers your servers on your customers’ machines. You can also manually register servers.</p>
<p class=label>
<b>To register an .exe component</b>
<ul type=disc>
<li>
Run the .exe file with the <b>/regserver</b> switch.<p class=tl>
For example, to register Myserver.exe, run the following command:</P><pre><code>myserver /regserver
</code></pre>
</li>
</ul>
<p class=label>
<b>To remove an .exe component registry entry</b>
<ul type=disc>
<li>
Run the .exe file with the <b>/unregserver</b> switch.<p class=tl>
For example, to unregister Myserver.exe, run the following command:</P><pre><code>myserver /unregserver
</code></pre>
</li>
</ul>
<p class=label>
<b>To register a .dll component</b>
<ul type=disc>
<li>
Run REGSVR32 with the name of the server.<p class=tl>
For example, to register Myserver.dll run the following command:</P><pre><code>REGSVR32 myserver.dll
</code></pre>
</li>
</ul>
<p class=label>
<b>To remove a .dll component registry entry</b>
<ul type=disc>
<li>
Run REGSVR32 with the name of the server and the <b>/u</b> switch.<p class=tl>
For example, to register Myserver.dll run the following command:</P><pre><code>REGSVR32 /u myserver.dll
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The registry contains the full path name to the file, so if you move the file, you’ll need to register it again.</p></li>
</ul>
<h3>Using the Automation server</h3>
<p>
Any application that can create Automation objects can create objects based on your Automation server, set properties that are not HIDDEN or PROTECTED, and call methods. For example, assuming that your server is named <code>foxole</code> and contains a class named <code>person</code> with a GetName method, the following code could be run in Visual FoxPro 3.0:</p>
<pre><code>oTest = CREATEOBJECT("foxole.person")
cName = oTest.GetName()
</code></pre>
<p>
Similar code could be run in Microsoft Excel or Visual Basic:</p>
<pre><code>Set oTest = CreateObject("foxole.person")
cName$ = oTest.GetName()
</code></pre>
<h3>Raising or Returning Errors from Automation servers</h3>
<p>
The only interaction with the objects provided by an Automation server (COM component) is through the methods and properties of the exposed classes. When a client application calls a method of an object, and an error occurs in the Automation server, the method either returns an error value or raises an error in the client application.</p>
<p>
The client application decides whether to alert the user or proceed with another execution path. The Automation server itself never interacts with the user. This allows the location of the Automation server to be transparent to the client application. The Automation server can be local, running on the user’s computer, or you can use the Remote Automation feature of Visual FoxPro to run it on a network server.</p>

<h2><a name="dgusing_remote_automation"></a>Using Remote Automation</h2>
<p>
In typical Automation scenarios, both the client and the server are on a single computer and share the same resources, such as memory and processor.</p>
<p class=label>
<b>Automation on a single computer</b></p>
<p>
<img src="afd16015.gif" border=0></p>
<p>
When you create local servers for Automation, you can deploy them remotely. Remote Automation allows you the same flexibility, extensibility, and power of local Automation, but over a network. Remote Automation allows:</p>
<ul type=disc>
<li>
Servers to use separate resources.</li>
<li>
Many different users to access the same server.</li>
</ul>
<p>
You can configure a server and local computer for remote Automation with the Remote Automation Connection Manager, which saves the settings in the registry. The Automation Manager running on the server computer manages the Automation so that the same code that manipulates a local object can automatically manipulate a remote object.</p>
<p class=label>
<b>Remote automation</b></p>
<p>
<img src="afd16016.gif" border=0></p>
<h4>Configuring the Server</h4>
<p>
The first step in enabling remote Automation is to configure the server computer for client access in the Remote Automation Connection Manager.</p>
<p class=label>
<b>To configure the remote automation server</b>
<ol>
<li>
Copy the Automation server executable file (.exe) to the server and run it one time to register it in the Windows Registry.<br><br></li>
<li>
On the server computer, run Racmgr32.exe, the Remote Automation Connection Manager.<p>
<img src="afd16017.gif" border=0></P></li>
<li>
Select your class in the <b>COM Classes</b> list.<br><br></li>
<li>
In the <b>Client Access</b> tab, choose <b>Allow Remote Creates by Key</b>.<br><br></li>
<li>
In the <b>Client Access</b> tab, make sure <b>Allow Remote Activation</b> is selected.</li>
</ol>
<p>
After you've enabled client access in the Remote Automation Connection Manager, run the Automation Manager, Autmgr32.exe, on the server computer. Autmgr32.exe is installed in the System folder under Windows 95 or in the System32 folder under Windows NT. This will enable remote automation connections from other computers.</p>
<h4>Configuring the Client</h4>
<p>
When the server computer is set up, you can configure the local client computer.</p>
<p class=label>
<b>To configure the local computer for remote automation</b>
<ol>
<li>
Copy the .vbr file that was created when you created the Automation server to the client machine.<br><br></li>
<li>
Run CLIREG32 with the name of the .vbr file. For example, if the file is Myserver.vbr, run the following command at the Command prompt:<pre><code>CLIREG32 MYSERVER.VBR
</code></pre>
</li>
<li>
In the dialog box that opens, enter the network address of the server machine and choose the network protocol (usually TCP/IP).</li>
</ol>
<h3>System Security Policy Options</h3>
<p>
The following table describes the System Security Policy area options in the Client Access tab of the Remote Automation Connection Manager.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Name</b></td>
<td class=label width=15%><b>Value<sup>1</sup></b></td>
<td class=label width=59%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>Disallow All Remote Creates</td>
<td width=15%>0</td>
<td width=59%>Do not allow any objects to be created.</td>
</tr>
<tr valign=top>
<td width=26%>Allow Remote Creates by Key</td>
<td width=15%>2</td>
<td width=59%>An object can be created only if the Allow Remote Activation check box is selected. This alters its CLSID in the Windows Registry to include the following subkey setting: <code>AllowRemoteActivation = Y</code></td>
</tr>
<tr valign=top>
<td width=26%>Allow Remote Creates by ACL</td>
<td width=15%>3</td>
<td width=59%>A user can create an object only if the Access Control List for the CLSID in the Windows Registry includes the user. Windows NT only.</td>
</tr>
<tr valign=top>
<td width=26%>Allow All Remote Creates</td>
<td width=15%>1</td>
<td width=59%>Allow any object to be created. Not recommended outside the development environment.</td>
</tr>
</table><br>
<p class=mini>
1. The Value column lists the RemoteActivationPolicy preference setting of the Automation Manager in the Windows Registry.</p>
<h3>Using Authentication in Remote Automation</h3>
<p>
For remote Automation servers running on any Windows operating system, <a href="glsremote_call_procedure.htm">remote call procedure</a> (RPC) provides the following levels of authentication.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Name</b></td>
<td class=label width=15%><b>Value</b></td>
<td class=label width=59%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>Default</td>
<td width=15%>0</td>
<td width=59%>Use Network default.</td>
</tr>
<tr valign=top>
<td width=26%>None</td>
<td width=15%>1</td>
<td width=59%>No authentication.</td>
</tr>
<tr valign=top>
<td width=26%>Connect</td>
<td width=15%>2</td>
<td width=59%>Connection to the server is authenticated.</td>
</tr>
<tr valign=top>
<td width=26%>Call</td>
<td width=15%>3</td>
<td width=59%>Authenticates only at the beginning of each remote procedure call, when the server receives the request. Does not apply to connection-based protocol sequences (those that start with the prefix “ncacn”).</td>
</tr>
<tr valign=top>
<td width=26%>Packet</td>
<td width=15%>4</td>
<td width=59%>Verifies that all data received is from the expected client.</td>
</tr>
<tr valign=top>
<td width=26%>Packet Integrity</td>
<td width=15%>5</td>
<td width=59%>Verifies that none of the data transferred between client and server has been modified.</td>
</tr>
<tr valign=top>
<td width=26%>Packet Privacy</td>
<td width=15%>6</td>
<td width=59%>Verifies all previous levels and encrypts the argument values of each remote procedure call.</td>
</tr>
</table><br>
<p>
The need for RPC authentication should be evaluated carefully, because as the level of RPC authentication increases, performance declines. You can specify an authentication level for each class in your Automation server, so that costly levels like encryption need not be applied to the entire component.</p>
<p>
For example, a data service implemented as a remote Automation server might have a Logon class used to transmit user and password information, and this class might require Packet Privacy authentication. Other classes exposed by the server might use a much lower level of authentication.</p>
<h3>Troubleshooting Remote Automation</h3>
<p>
Here are some suggestions in case you run into difficulties.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=46%><b>Problem</b></td>
<td class=label width=54%><b>Action</b></td>
</tr>
<tr valign=top>
<td width=46%>OLE error code 0x800706d9: There are no more endpoints available from the endpoint manager.</td>
<td width=54%>Make sure the Automation manager is running on the server computer and that the name of the server computer is correctly entered in the Network Address box of the Remote Automation Connection Manager.</td>
</tr>
<tr valign=top>
<td width=46%>Visual FoxPro: Application doesn’t appear in the Remote Automation Manager OLE Classes list.</td>
<td width=54%><ol>
<li>
Run Regedit.exe to open the registry.<pre><code>vfp6.exe -r</code></pre>
</li>
<li>
Delete all references to Microsoft Visual FoxPro.<br><br></li>
<li>
Run Visual FoxPro with the -r command line tag:</li>
</ol>
</td>
</tr>
</table><br>
</BODY>
</HTML>

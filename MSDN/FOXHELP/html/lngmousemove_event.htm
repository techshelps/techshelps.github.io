<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MouseMove Event</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngmousemove_event"></a><sup></sup>MouseMove Event</h1>
<p>
<a href="lngmousemove_eventat.htm">Applies To</a> &nbsp; <a href="lngmousemove_eventsa.htm">See Also</a></p>
<p>
Occurs when the user moves the mouse over an object.</p>
<p class=label>
<b>Syntax</b></p>
<p>
PROCEDURE <i>Object.</i>MouseMove<br>
[LPARAMETERS <i>nIndex</i>, <i>nButton</i>, <i>nShift</i>, <i>nXCoord</i>, <i>nYCoord</i>]</p>
<p>
-or-</p>
<p>
LPARAMETERS <i>nButton</i>, <i>nShift</i>, <i>nXCoord</i>, <i>nYCoord</i></p>
<p class=label>
<b>Parameters</b></p>
<p>
You must include an LPARAMETERS or PARAMETERS statement in the event procedure and specify a name for each parameter. Visual FoxPro passes the MouseMove event four or five parameters in the following order:</p>
<p class=dt>
<i>nIndex</i></p>
<p class=indent>
Contains a number which uniquely identifies a control if it is in a control array. The <i>nIndex</i> parameter is passed only when the control is in a control array.</p>
<p class=dt>
<i>nButton</i></p>
<p class=indent>
Contains a number that specifies which mouse button was being held down as the mouse was moved, as listed in the following table:</p>
<p class=label>
<b>Mouse button values for </b><i>nButton</i></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Windows</b></td>
<td class=label width=57%><i>nButton</i><b> Value</b></td>
</tr>
<tr valign=top>
<td width=43%>Left mouse button</td>
<td width=57%>1</td>
</tr>
<tr valign=top>
<td width=43%>Right mouse button</td>
<td width=57%>2</td>
</tr>
<tr valign=top>
<td width=43%>Middle mouse button</td>
<td width=57%>4</td>
</tr>
</table><br>
<p class=tl>
If more than one mouse button is held down as the mouse is moved, <i>nButton</i> contains the sum of the values for the mouse buttons. For example, if both the left and right mouse buttons are pressed, the value of <i>nButton</i> is 3.</P><p class=dt>
<i>nShift</i></p>
<p class=indent>
Contains a number specifying the state of modifier keys when the mouse is moved. In Visual FoxPro for Windows, the valid modifier keys are the SHIFT, CTRL, and ALT keys.</p>
<p class=tl>
The values returned in <i>nShift</i> for individual modifier keys are listed in the following table.</P><p class=label>
<b>Modifier key values for </b><i>nShift</i></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=43%><b>Windows key</b></td>
<td class=label width=57%><b>Value</b></td>
</tr>
<tr valign=top>
<td width=43%>SHIFT</td>
<td width=57%>1</td>
</tr>
<tr valign=top>
<td width=43%>CTRL</td>
<td width=57%>2</td>
</tr>
<tr valign=top>
<td width=43%>ALT</td>
<td width=57%>4</td>
</tr>
</table><br>
<p class=tl>
If more than one modifier key is held down when the mouse is pressed, the <i>nShift</i> argument contains the sum of the values for the modifier keys. For example, in Visual FoxPro for Windows, if the user holds CTRL while pressing the mouse button, the <i>nShift</i> argument contains 2. But if the user holds CTRL+ALT while pressing the mouse button, the <i>nShift</i> argument contains 6. </P><p class=dt>
<i>nXCoord</i>, <i>nYCoord</i></p>
<p class=indent>
Contains the current horizontal (<i>nXCoord</i>) and vertical (<i>nYCoord</i>) position of the mouse pointer within the form. These coordinates are always expressed in terms of the form's coordinate system, in the unit of measurement specified in the ScaleMode property setting.</p>
<p>
The MouseMove event is triggered continually as the mouse pointer moves across objects.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use MouseDown and MouseUp events to respond to events caused by pressing and releasing mouse buttons.</p>
<p class=indent>
The <i>nButton</i> parameter for MouseMove differs from the <i>nButton</i> parameter for MouseDown and MouseUp. For MouseMove, the <i>nButton</i> parameter indicates the current state of all buttons; a single MouseMove event can indicate that some, all, or no buttons are pressed. For MouseDown or MouseUp, the <i>nButton</i> parameter indicates exactly one button per event.</p>
<p class=indent>
Avoid moving a window inside a MouseMove event procedure; it can cause cascading events and generate run-time errors, such as a stack overflow. MouseMove events are triggered when the window moves underneath the pointer. A MouseMove event can be triggered even if the mouse is stationary.</p>
</BODY>
</HTML>

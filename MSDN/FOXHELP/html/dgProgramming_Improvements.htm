<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming Improvements</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgprogramming_improvements"></a><sup></sup>Chapter 33: Programming Improvements</h1>
<p>
Microsoft Visual FoxPro now includes new programming features designed to improve developer productivity. These features include Access and Assign methods that let you execute code when the value of a property is queried or when you attempt to change the property's value, support for more graphic file formats, and new language to simplify programming tasks. Also, many of the file name manipulation functions available in Foxtools.fll, a Visual FoxPro API library, have been added to Visual FoxPro.</p>
<p>
This chapter covers:</p>
<ul type=disc>
<li>
<a href="#newaccess_and_assign_methods">Access and Assign Methods</a></li>
<li>
<a href="#newnew_graphics_support">GIF and JPEG Graphics Support</a></li>
<li>
<a href="#newnew_and_enhanced_language_elements">New and Enhanced Language</a></li>
<li>
<a href="#newyear_2000_date_support">Year 2000 Date Support</a></li>
</ul>

<h2><a name="newaccess_and_assign_methods"></a><sup></sup>Access and Assign Methods</h2>
<p>
Visual FoxPro has been enhanced to support Access and Assign methods. These user-defined methods let you execute code when the value of a property is queried, or when you attempt to change the property's value. </p>
<p>
The code in an Access method is executed when the value of a property is queried, typically by using the property in an object reference, storing the value of the property to a variable, or displaying the value of property with a question mark (?).</p>
<p>
The code in an Assign method is executed when you attempt to change the value of a property, typically by using the STORE or = command to assign a new value to the property.</p>
<p>
Access and Assign methods are executed when property values are queried or changed at run time only. Querying or changing property values at design time doesn't execute Access and Assign methods.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Because the value you attempt to assign to the property is passed to the Assign method, you must include a PARAMETERS or LPARAMETERS statement in the Assign method to accept the value.</p>
<p>
Access and Assign methods can be created independently — you can create an Access method without an Assign method, or an Assign method without an Access method.</p>
<p>
Access and Assign methods can be created for properties created programmatically within a DEFINE CLASS statement, or interactively for a form or class with the Form and Class designers. Access and Assign methods</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Access and Assign methods can also be created for all native Visual FoxPro properties. For example, you can create an Access method for the Left property of a form, allowing you to execute code whenever the form's Left property is queried. You can create an Assign method for a native Visual FoxPro property that is read-only (for example, the ParentClass property), but the method will never be executed.</p>
<h3>Benefits of Access and Assign Methods</h3>
<p>
Access and Assign methods provide the following benefits:</p>
<ul type=disc>
<li>
You can create a public interface for a class or object that separates the interface from the implementation.</li>
<li>
You can easily implement property validation.</li>
<li>
You can easily protect properties in subclassed ActiveX controls.</li>
</ul>
<h3>Creating Access and Assign Methods</h3>
<p>
Enhancements to the DEFINE CLASS command and the Form and Class designers allow you to create Access and Assign methods both programmatically and interactively.</p>
<h4>New DEFINE CLASS Suffixes</h4>
<p>
Two suffixes, _ACCESS and _ASSIGN, have been added to the DEFINE CLASS command to create Access and Assign methods. Appending one of these keywords to a function or procedure name creates an Access or Assign method for a property with the same name as the function or procedure.</p>
<p>
For example, the following code example uses DEFINE CLASS to create a custom class named MyClass. A user-defined property, MyProperty, is created for the class. An Access method for MyProperty is then created with the PROCEDURE statement.</p>
<p>
When the property value is queried, the code in the procedure (WAIT WINDOW 'This is the Access method') is executed. An Assign method for MyProperty is also created, again with a PROCEDURE statement. When an attempt is made to change the property value, the code in the procedure (WAIT WINDOW 'This is the Assign method') is executed.</p>
<p>
Note the use of an LPARAMETERS statement to accept the value passed to the Assign method. This example also demonstrates how you can create read-only properties.</p>
<pre><code>DEFINE CLASS MyClass AS Custom
 &nbsp; MyProperty = 100 &amp;&amp; A user-defined property

 &nbsp; PROCEDURE MyProperty_ACCESS &amp;&amp; Access method
 &nbsp;&nbsp;&nbsp;&nbsp; WAIT WINDOW 'This is the Access method';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; ' ' + PROGRAM( )
 &nbsp;&nbsp;&nbsp;&nbsp; RETURN THIS.MyProperty
 &nbsp; ENDPROC

 &nbsp; PROCEDURE MyProperty_ASSIGN &amp;&amp; Assign method
 &nbsp;&nbsp;&nbsp;&nbsp; LPARAMETERS tAssign&nbsp; &amp;&amp; Required to accept value
 &nbsp;&nbsp;&nbsp;&nbsp; WAIT WINDOW 'This is the Assign method';
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + ' ' + PROGRAM( )
 &nbsp; ENDPROC
ENDDEFINE
</code></pre>
<p>
This next example demonstrates how you can add an Assign method for a native Visual FoxPro property and perform simple validation on the property value you attempt to set. Note that in this example an Assign method is created without a corresponding Access method.</p>
<p>
DEFINE CLASS is used to create a Form class named frmMyForm. An Assign method named Left_ASSIGN is created with a PROCEDURE statement. The code in the Assign method is executed whenever an attempt is made to assign a value to the form's Left property.</p>
<p>
If you attempt to change the Left property value to a negative value, a message is displayed and the Left property value is left unchanged. If you attempt to change the Left property value to a non-negative value, the form's Left property is set to that value.</p>
<pre><code>DEFINE CLASS frmMyForm AS Form

 &nbsp; PROCEDURE Left_ASSIGN &amp;&amp; Assign method
 &nbsp;&nbsp;&nbsp;&nbsp; LPARAMETERS tAssign&nbsp; &amp;&amp; Required to accept value
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; DO CASE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CASE tAssign &lt; 0 &amp;&amp; Left value negative
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WAIT WINDOW 'Value must be greater than 0'
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OTHERWISE&nbsp; &amp;&amp; Left value not negative
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THIS.Left = tAssign
 &nbsp;&nbsp;&nbsp;&nbsp; ENDCASE
 &nbsp; ENDPROC
ENDDEFINE
</code></pre>
<p>
See <a href="lngdefine_class.htm">DEFINE CLASS</a> for further information about the syntax used to create Access and Assign methods.</p>
<h4>The Form and Class Designers</h4>
<p class=label>
<b>To create an Access or Assign method in the Form Designer</b>
<ol>
<li>
Choose <b>New Property</b> from the <b>Form</b> menu.<p class=tl>
The <b>New Property</b> dialog box is displayed.</P><p>
<img src="newprop.gif" border=0></P></li>
<li>
Enter the name of the property to create in the <b>Name</b> text box, and then select the <b>Access Method</b> check box or <b>Assign Method</b> check box (or both). <br><br></li>
<li>
Choose <b>Add</b> to create a property for the form, and to create Access or Assign methods for the property.</li>
</ol>
<p class=label>
<b>To create an Access or Assign method for an intrinsic Visual FoxPro property in the Form Designer</b>
<ol>
<li>
Choose <b>New Method</b> from the <b>Form</b> menu.<p class=tl>
The <b>New Method</b> dialog box is displayed.</P></li>
<li>
Enter the name of the intrinsic property followed with _Access or _Assign in the <b>Name</b> text box. For example, to create an Access method for the Left property, enter Left_Access in the <b>Name</b> text box.<br><br></li>
<li>
Choose <b>Add</b> to create an Access or Assign methods for the intrinsic property.</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In the Form Designer, you can create properties with Access and Assign methods only for a form or formset. To create properties with Access and Assign methods for a control or object, use the Class Designer to create the control or object class. In the Class Designer, add properties with Access and Assign methods to the control or object, and then add the control or object class to the Form in the Form Designer.</p>
<p class=label>
<b>To create an Access or Assign method for a class in the Class designer</b>
<ol>
<li>
Choose <b>New Property</b> from the <b>Class</b> menu.<p class=tl>
The <b>New Property</b> dialog box is displayed.</P></li>
<li>
Enter the name of the property to create in the <b>Name</b> textbox, then select the <b>Access Method</b> check box or <b>Assign Method</b> check box (or both).<br><br></li>
<li>
Choose <b>Add</b> to create a property for the class, and to create Access or Assign methods for the property.</li>
</ol>
<p>
For more information about creating Access or Assign methods , see the <a href="cmdnew_property_dialog_box.htm">New Property Dialog Box</a> topic.</p>
<h3>THIS_ACCESS Method</h3>
<p>
A new global class method, THIS_ACCESS, has been added to Visual FoxPro 6.0. The code in a THIS_ACCESS method is executed whenever you attempt to change the value of a member of an object or a member of an object is queried.</p>
<p>
A THIS_ACCESS method is created in code within a DEFINE CLASS command, or in the New Method or Edit Properties dialog boxes for .vcx visual class libraries. A THIS_ACCESS method must always return an object reference, otherwise an error is generated. The THIS object reference is typically returned. A THIS_ACCESS method must also include a parameter to accept the name of the member of the object that is changed or queried.</p>
<p>
The following simple example demonstrates how to create a THIS_ACCESS method in code within a DEFINE CLASS command. When this example is run as a program, 'Caption' is displayed twice, first when the Caption property is assigned a value, and again when the Caption property value is queried. The value of the Caption property ('abc') is then displayed.</p>
<pre><code>CLEAR
oTempObj = CREATEOBJECT('MyForm')&nbsp; &amp;&amp; Instantiate the Form
oTempObj.Caption = 'abc'&nbsp; &amp;&amp; Assign a value, triggers THIS_ACCESS
? oTempObj.Caption&nbsp; &amp;&amp; Query a value, triggers THIS_ACCESS

DEFINE CLASS MyForm AS Form
<b> &nbsp; </b>PROCEDURE THIS_ACCESS
<b> &nbsp;&nbsp;&nbsp;&nbsp; </b>LPARAMETER cMemberName&nbsp; &amp;&amp; Object member name

<b> &nbsp;&nbsp;&nbsp;&nbsp; </b>IF cMemberName = 'caption'
<b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b>? cMemberName&nbsp; &amp;&amp; Display the object member name
<b> &nbsp;&nbsp;&nbsp;&nbsp; </b>ENDIF
<b> &nbsp;&nbsp;&nbsp;&nbsp; </b>RETURN THIS
<b> &nbsp; </b>ENDPROC
ENDDEFINE
</code></pre>
<p>
Note that THIS_ACCESS is not intended to be a global replacement for Access and Assign methods - it only provides information about which object member is accessed or queried. Unlike an Access or Assign method, THIS_ACCESS does not provide control over values returned to specific object members.</p>
<h3>Access and Assign Programming Notes</h3>
<p>
The following sections describe programming information for Access and Assign methods.</p>
<h4>Scoping</h4>
<p>
Access and Assign methods are protected by default - you cannot access or make changes to an Access or Assign method from outside of the class in which the Access or Assign method is created.</p>
<p>
Include the HIDDEN keyword when you create an Access or Assign method to prevent access and changes to the properties from outside of the class definition. Only methods and events within the class definition can access the hidden properties. While protected properties can be accessed by subclasses of the class definition, hidden properties can only be accessed from within the class definition.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; If you don't include the HIDDEN keyword, you can subclass Access and Assign methods.</p>
<h4>Debugging</h4>
<p>
You can view the code for Access and Assign methods in the Trace window of the Debugger window. However, Access and Assign methods cannot be executed from within the Watch and Local windows of the Debugger window.</p>
<h4>Passing Arrays to Assign Methods</h4>
<p>
Arrays are passed to Access and Assign methods in the same manner as standard Visual FoxPro procedures.</p>
<p>
The entire array is passed to an Access or Assign method if you issue SET UDFPARMS TO REFERENCE or preface the array name with @. The first element of the array is passed by value if you issue SET UDFPARMS TO VALUE or enclose the array name by parentheses. Array elements are always passed by value. See <a href="lngset_udfparms.htm">SET UDFPARMS</a> for more information about passing values and arrays.</p>
<h4>ActiveX Controls</h4>
<p>
Access and Assign methods are not supported for an ActiveX control's native properties, events, or methods. However, Access and Assign methods are supported for properties, events, and methods for the Visual FoxPro OLE Container in which the ActiveX control is contained.</p>
<h4>ResetToDefault Method</h4>
<p>
Executing the ResetToDefault method for an Access or Assign method changes the code in the Access or Assign method to the default snippet. The result is that the inherited method code, if any, does not get executed. The technique used to ensure that code inherited from the parent class does get executed varies according to the method type.</p>
<p>
Place the following code in the subclass of an Access method to execute the code in the parent class:</p>
<pre><code>RETURN DODEFAULT(&nbsp;)
</code></pre>
<p>
Place the following code in the subclass of an Assign method to execute the code in the parent class:</p>
<pre><code>LPARAMETERS vnewval
DODEFAULT(vnewval)
THIS.&lt;property name&gt; = vnewval
</code></pre>
<p>
Place the following code in the subclass of a THIS_ACCESS method to execute the code in the parent class:</p>
<pre><code>LPARAMETERS cmember
RETURN DODEFAULT(cmember)
</code></pre>

<h2><a name="newnew_graphics_support"></a><sup></sup>GIF and JPEG Graphics Support</h2>
<p>
Visual FoxPro has been enhanced to support the GIF (Graphics Interchange Format) and JPEG (Joint Photographic Electronic Group) graphic file formats, widely used throughout the Internet.</p>
<p>
In general, any areas that supported .bmp (bitmap) format in previous versions of Visual FoxPro now also support the following graphic file formats.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=51%><b>Graphic format</b></td>
<td class=label width=49%><b>File extension</b></td>
</tr>
<tr valign=top>
<td width=51%>Bitmap</td>
<td width=49%>.bmp</td>
</tr>
<tr valign=top>
<td width=51%>Device Independent Bitmap</td>
<td width=49%>.dib</td>
</tr>
<tr valign=top>
<td width=51%>Graphics Interchange Format</td>
<td width=49%>.gif</td>
</tr>
<tr valign=top>
<td width=51%>Joint Photographic Electronic Group</td>
<td width=49%>.jpg</td>
</tr>
<tr valign=top>
<td width=51%>Cursor</td>
<td width=49%>.cur</td>
</tr>
<tr valign=top>
<td width=51%>Animated Cursor</td>
<td width=49%>.ani</td>
</tr>
<tr valign=top>
<td width=51%>Icon</td>
<td width=49%>.ico</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In Visual FoxPro, cursor, animated cursor, and icon files can be used as graphics files. For example, you can specify an animated cursor file for the Picture property for the Image control (however, the Image control displays the static representation of the cursor).</p>
<p>
Graphics support is provided in Visual FoxPro in three areas: language, controls and objects, and the interface.</p>
<h3>The Visual FoxPro Language</h3>
<p>
The following commands and functions have been enhanced to support the new graphic file formats.</p>
<p class=label>
<b>GETPICT(&nbsp;)</b></p>
<p>
The <b>Open</b> dialog displayed by issuing the <a href="lnggetpictlp_rp.htm">GETPICT(&nbsp;) function</a> in the <b>Command</b> window has been enhanced, allowing you to quickly locate all the graphic files supported in Visual FoxPro. The <b>Files of Type</b> drop-down list box now includes the following items.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Item</b></td>
<td class=label width=73%><b>File specifications</b></td>
</tr>
<tr valign=top>
<td width=27%>All Files</td>
<td width=73%>*.*</td>
</tr>
<tr valign=top>
<td width=27%>All Graphics Files</td>
<td width=73%>*.bmp, *.dib, *.jpg, *.gif, *.ani, *.cur, *.ico</td>
</tr>
<tr valign=top>
<td width=27%>Bitmap</td>
<td width=73%>*.bmp, *.dib</td>
</tr>
<tr valign=top>
<td width=27%>Cursor</td>
<td width=73%>*.cur</td>
</tr>
<tr valign=top>
<td width=27%>Animated Cursor</td>
<td width=73%>*.ani</td>
</tr>
<tr valign=top>
<td width=27%>Icon</td>
<td width=73%>*.ico</td>
</tr>
<tr valign=top>
<td width=27%>JPEG</td>
<td width=73%>*.jpg</td>
</tr>
<tr valign=top>
<td width=27%>GIF</td>
<td width=73%>*.gif</td>
</tr>
</table><br>
<p>
Check the <b>Preview</b> check box to display the currently selected graphics file. In previous versions of Visual FoxPro, it was necessary to choose the <b>Preview</b> button each time a new graphics file was selected. The size of the <b>Picture</b> area has also been increased.</p>
<p class=label>
<b>CLEAR RESOURCES</b></p>
<p>
The <a href="lngclear.htm">CLEAR RESOURCES command</a> in Visual FoxPro now clears all cached graphic files, including .gif and .jpg files.</p>
<h3>Visual FoxPro Controls and Objects</h3>
<p>
The following table lists Visual FoxPro controls and objects with properties for which you can specify graphics files. You can now specify .gif, .jpg, cursor, animated cursor, and icon graphic files for these properties, in addition to the .bmp and .dib graphic files supported in previous versions of Visual FoxPro.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Control or Object</b></td>
<td class=label width=50%><b>Properties</b></td>
</tr>
<tr valign=top>
<td width=50%>CheckBox Control </td>
<td width=50%>DisabledPicture <br>
DownPicture <br>
Picture </td>
</tr>
<tr valign=top>
<td width=50%>Command Button Container </td>
<td width=50%>DisabledPicture <br>
DownPicture <br>
Picture </td>
</tr>
<tr valign=top>
<td width=50%>Container Object </td>
<td width=50%>Picture </td>
</tr>
<tr valign=top>
<td width=50%>Control Object </td>
<td width=50%>Picture </td>
</tr>
<tr valign=top>
<td width=50%>Custom Object </td>
<td width=50%>Picture </td>
</tr>
<tr valign=top>
<td width=50%>Form Object </td>
<td width=50%>Picture </td>
</tr>
<tr valign=top>
<td width=50%>Image Control </td>
<td width=50%>Picture </td>
</tr>
<tr valign=top>
<td width=50%>OptionButton Control </td>
<td width=50%>DisabledPicture <br>
DownPicture <br>
Picture </td>
</tr>
<tr valign=top>
<td width=50%>Page Object </td>
<td width=50%>Picture </td>
</tr>
<tr valign=top>
<td width=50%>_Screen Object </td>
<td width=50%>Picture </td>
</tr>
</table><br>
<h3>The Visual FoxPro Interface</h3>
<p>
Several of the Visual FoxPro designers allow you to specify graphics files with the <b>Open</b> dialog. The <b>Open</b> dialog for the following designers have been enhanced to include the new graphic file formats.</p>
<h4>Form Designer and Class Designer</h4>
<p>
In the <b>Properties</b> window, by double-clicking the property or choosing the property's dialog button you can display the <b>Open</b> dialog for a property that supports graphic files.</p>
<h4>Project Manager</h4>
<p>
You can add graphics files to a project from the Project Manager <b>All</b> and <b>Other</b> tabs. When the <b>All</b> or <b>Other</b> tab is selected, select the <b>Other Files</b> item and then choose <b>Add</b>. The <b>Open</b> dialog is displayed, allowing you to add a graphics file to the project.</p>
<h4>Report Designer</h4>
<p>
The <b>Report Controls</b> toolbar contains the <b>Picture/OLE Bound Control</b> button. Click this button and drag the cursor over a band in the Report Designer to display the <b>Report Picture</b> dialog box. To display the <b>Open</b> dialog, choose the <b>File</b> dialog button. </p>

<h2><a name="newnew_and_enhanced_language_elements"></a><sup></sup>New and Enhanced Language Elements</h2>
<p>
Many new and enhanced language elements have been added to Visual FoxPro. The new language elements listed in this section include <a href="#newactive_documents_language">Active Documents</a>, <a href="#newproject_manager_hooks_language">Project Manager Hooks</a>, <a href="#newole_drag_and_drop_language">OLE drag-and-drop</a>, <a href="#newserver_improvements_language_elements">Server Improvements</a>, and <a href="#newmiscellaneous_language">miscellaneous language</a>. </p>
<p>
The <a href="#newenhanced_language_elements">enhanced</a> elements are also listed.</p>
<p>
In addition, many of the file name manipulation functions available in Foxtools.fll, a Visual FoxPro API library, have been added to Visual FoxPro. It's no longer necessary to use SET LIBRARY TO FOXTOOLS.FLL to call these <a href="#newfoxtools_language_elements">Foxtools</a> functions; you can call them directly in your Visual FoxPro programs.</p>
<p>
This section also describes improvements to Visual FoxPro performance, robustness, and usability.</p>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b><a name="newactive_documents_language"></a>New Active Documents language</b></td>
<td class=label width=59%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=41%><a href="ctlactivedoc_object.htm">ActiveDoc Object</a></td>
<td width=59%>Creates an Active Document that can be hosted in an Active Document container such as Microsoft Internet Explorer.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngalwaysonbottom_property.htm">AlwaysOnBottom Property</a></td>
<td width=59%>Prevents other windows from being covered a form's window.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngcommandtargetexec_event.htm">CommandTargetExec Event</a></td>
<td width=59%>Occurs when the user clicks on a menu item or toolbar item belonging to the Active Document container.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngcommandtargetquery_event.htm">CommandTargetQuery Event</a></td>
<td width=59%>Occurs when the Active Document host needs to find out if the Active Document supports various host menu and/or toolbar commands so that it can enable or disable the corresponding menu items and/or toolbar buttons.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngcontainerrelease_event.htm">ContainerRelease Event</a></td>
<td width=59%>Occurs when an Active Document is released by its host.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngcontainerreleasetype_property.htm">ContainerReleaseType Property</a></td>
<td width=59%>Specifies if an Active Document is opened in the Visual FoxPro run time when the Active Document is released by its host.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngcontinuousscroll_property.htm">ContinuousScroll Property</a></td>
<td width=59%>Specifies if scrolling within a form is continuous, or if scrolling only occurs when a scroll box is released.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngdefine_pad.htm">DEFINE PAD Command</a></td>
<td width=59%>Supports new NEGOTIATE options for specifying menu title location for Active Documents.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lnggethostlp_rp.htm">GETHOST(&nbsp;) Function</a></td>
<td width=59%>Returns an object reference to the container of an Active Document.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lnggoback_method.htm">GoBack Method</a></td>
<td width=59%>Navigates backwards in the history list of an Active Document host.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lnggoforward_method.htm">GoFoward Method</a></td>
<td width=59%>Navigates forwards in the history list of an Active Document host.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lnghidedoc_event.htm">HideDoc Event</a></td>
<td width=59%>Occurs when you navigate from an Active Document.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lnghscrollsmallchange_property.htm">HScrollSmallChange Property</a></td>
<td width=59%>Specifies the increment a form scrolls in the horizontal direction when you click on a horizontal scroll arrow.</td>
</tr>
<tr valign=top>
<td width=41%><a href="ctlhyperlink_object.htm">Hyperlink Object</a></td>
<td width=59%>Creates a Hyperlink object.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngishostedlp_rp.htm">ISHOSTED(&nbsp;) Function</a></td>
<td width=59%>Returns a logical value indicating if an Active Document is hosted in an Active Document container.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngnavigateto_method.htm">NavigateTo Method</a></td>
<td width=59%>Navigates in an Active Document container to a specified location.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngrun_event.htm">Run Event</a></td>
<td width=59%>Occurs when an Active Document has finished coordinating with its host and with COM and is ready to run user code.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lng_runactivedoc.htm">_RUNACTIVEDOC System Variable</a></td>
<td width=59%>Specifies an application that launches an Active Document.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngscrollbars_property.htm">ScrollBars Property</a></td>
<td width=59%>Now available for forms. If a form is in an Active Document, the scroll bars are displayed automatically when the size of the Active Document container is less than the size of the form.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngscrolled_event.htm">Scrolled Event</a></td>
<td width=59%>Now available for forms, allowing you to determine if the horizontal or vertical scroll bars are clicked or a scroll box is moved.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngsetviewport_method.htm">SetViewPort Method</a></td>
<td width=59%>Sets the values of the ViewPortLeft and ViewPortTop properties for a form.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngshowdoc_event.htm">ShowDoc Event</a></td>
<td width=59%>Occurs when you navigate to an Active Document.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngsyslp4204rp___active_document_debugging.htm">SYS(4204) - Active Document Debugging</a></td>
<td width=59%>Enables or disables debugging support for Active Documents in the Visual FoxPro debugger.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngviewportheight_property.htm">ViewPortHeight Property</a></td>
<td width=59%>Contains the viewport height for a form.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngviewportleft_property.htm">ViewPortLeft Property</a></td>
<td width=59%>Contains the left coordinate of the form that is visible in the viewport.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngviewporttop_property.htm">ViewPortTop Property</a></td>
<td width=59%>Contains the top coordinate of the form that is visible in the viewport.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngviewportwidth_property.htm">ViewPortWidth Property</a></td>
<td width=59%>Contains the viewport width for a form.</td>
</tr>
<tr valign=top>
<td width=41%><a href="lngvscrollsmallchange_property.htm">VScrollSmallChange Property</a></td>
<td width=59%>Specifies the increment a form scrolls vertically when you click on a scroll arrow.</td>
</tr>
</table><br>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b><a name="newproject_manager_hooks_language"></a>New Project Manager Hooks language</b></td>
<td class=label width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><a href="lngactiveproject_property.htm">ActiveProject Property</a></td>
<td width=60%>Contains an object reference to the project object for the currently active Project Manager window.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngadd_method.htm">Add Method</a></td>
<td width=60%>Adds a file to a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngaddtoscc_method.htm">AddToSCC Method</a></td>
<td width=60%>Adds a file in a project to source code control.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngafterbuild_event.htm">AfterBuild Event</a></td>
<td width=60%>Occurs after a project is rebuilt or an application file (.app), dynamic link library (.dll), or executable file (.exe) is created from a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngautoincrement_property.htm">AutoIncrement Property</a></td>
<td width=60%>Specifies if the build version of a project is automatically incremented each time a distributable .exe or in-process .dll is built.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngbeforebuild_event.htm">BeforeBuild Event</a></td>
<td width=60%>Occurs before a project is rebuilt or an application file (.app), dynamic link library (.dll), or executable file (.exe) is created from a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngbuild_method.htm">Build Method</a></td>
<td width=60%>Rebuilds a project, or creates an application file (.app), dynamic link library (.dll), or executable file (.exe) from a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngbuilddatetime_property.htm">BuildDateTime Property</a></td>
<td width=60%>Contains the last build date and time for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcheckin_method.htm">CheckIn Method</a></td>
<td width=60%>Checks in changes made to a file in a project under source code control.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcheckout_method.htm">CheckOut Method</a></td>
<td width=60%>Checks out a file in a project under source code control, allowing you to make changes to the file.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcleanup_method.htm">CleanUp Method</a></td>
<td width=60%>Cleans up a project table by removing records marked for deletion and packing memo fields.</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=40%><a href="lngclose_method.htm">Close Method</a></td>
<td width=60%>Closes a project and releases the project's ProjectHook and project objects.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngclsid_property.htm">CLSID Property</a></td>
<td width=60%>Contains the registered CLSID (Class Identifier) for a server in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcodepage_property.htm">CodePage Property</a></td>
<td width=60%>Contains the code page of a file in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcount_property.htm">Count Property</a></td>
<td width=60%>A count of the number of project, file or server objects in a project, file or server collection.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcreate_project.htm">CREATE PROJECT Command</a></td>
<td width=60%>Enhanced in Visual FoxPro 6.0. Supports two new options, NOSHOW and NOPROJECTHOOK, for use with the new Project Manager hooks.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngdebug_property.htm">Debug Property</a></td>
<td width=60%>Specifies if debugging information is included with compiled source code in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngdescription_property.htm">Description Property</a></td>
<td width=60%>For a file object, the description for the file. For a server object, the description of the server class.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngencrypted_property.htm">Encrypted Property</a></td>
<td width=60%>Specifies if compiled source code in a project is encrypted.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngexclude_property.htm">Exclude Property</a></td>
<td width=60%>Specifies if a file is excluded from an application (.app), dynamic link library (.dll), or executable file (.exe) when it is built from a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngfileclass_property.htm">FileClass Property</a></td>
<td width=60%>Contains the name of the form class on which a form in a project is based.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngfileclasslibrary_property.htm">FileClassLibrary Property</a></td>
<td width=60%>Contains the name of the class library containing the class on which a form in a project is based.</td>
</tr>
<tr valign=top>
<td width=40%><a href="ctlfile_object.htm">File Object</a></td>
<td width=60%>Provides references to specific files in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="ctlfiles_collection.htm">Files Collection</a></td>
<td width=60%>A collection of file objects.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lnggetlatestversion_method.htm">GetLatestVersion Method</a></td>
<td width=60%>Gets the latest version of a file in a project from source code control and copies a read-only version to your local drive.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lnghomedir_property.htm">HomeDir Property</a></td>
<td width=60%>Specifies the home directory for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lnginstancing_property.htm">Instancing Property</a></td>
<td width=60%>Specifies how a server in a project can be instantiated.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngitem_method.htm">Item Method</a></td>
<td width=60%>Returns an object reference to the specified item in a project collection.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lnglastmodified_property.htm">LastModified Property</a></td>
<td width=60%>Contains the date and time of the last modification made to a file in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngmainclass_property.htm">MainClass Property</a></td>
<td width=60%>Contains the name of an ActiveDoc class set as the main program in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngmainfile_property.htm">MainFile Property</a></td>
<td width=60%>Contains the name and path of the file set as the main program in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngmodify_method.htm">Modify Method</a></td>
<td width=60%>Opens a file in a project for modification in the appropriate designer or editor.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngmodify_project.htm">MODIFY PROJECT Command</a></td>
<td width=60%>Enhanced in Visual FoxPro 6.0. Supports two new options, NOSHOW and NOPROJECTHOOK, for use with the new Project Manager hooks.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngprogid_property.htm">ProgID Property</a></td>
<td width=60%>Contains the registered PROGID (Programmatic Identifier) for a server in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="ctlproject_object.htm">Project Object</a></td>
<td width=60%>Instantiated when a project is created or opened.</td>
</tr>
<tr valign=top>
<td width=40%><a href="ctlprojecthook_object.htm">ProjectHook Object</a></td>
<td width=60%>Instantiated whenever a project is opened, providing programmatic access to project events.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngprojecthook_property.htm">ProjectHook Property</a></td>
<td width=60%>An object reference to the ProjectHook object instantiated for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngprojecthookclass_property.htm">ProjectHookClass Property</a></td>
<td width=60%>The default ProjectHook class for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngprojecthooklibrary_property.htm">ProjectHookLibrary Property</a></td>
<td width=60%>The .vcx visual class library containing the default ProjectHook class for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="ctlprojects_collection.htm">Projects Collection</a></td>
<td width=60%>A collection of project objects.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngqueryaddfile_event.htm">QueryAddFile Event</a></td>
<td width=60%>Occurs just before a file is added to a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngquerymodifyfile_event.htm">QueryModifyFile Event</a></td>
<td width=60%>Occurs just before a file is modified in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngqueryremovefile_event.htm">QueryRemoveFile Event</a></td>
<td width=60%>Occurs just before a file is removed from a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngqueryrunfile_event.htm">QueryRunFile Event</a></td>
<td width=60%>Occurs just before a file is executed or a report or label is previewed in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngremove_method.htm">Remove Method</a></td>
<td width=60%>Removes a file from its files collection and project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngremovefromscc_method.htm">RemoveFromSCC Method</a></td>
<td width=60%>Removes a file in a project from source code control.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngrun_method.htm">Run Method</a></td>
<td width=60%>Runs or previews a file in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngsccprovider_property.htm">SCCProvider Property</a></td>
<td width=60%>The name of the source code control provider for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngsccstatus_property.htm">SCCStatus Property</a></td>
<td width=60%>Contains a numeric value indicating the source control status of a file in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="ctlserver_object.htm">Server Object</a></td>
<td width=60%>An object reference to a server in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="ctlservers_collection.htm">Servers Collection</a></td>
<td width=60%>A collection of server objects.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngserverclass_property.htm">ServerClass Property</a></td>
<td width=60%>Contains the name of a server class in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngserverclasslibrary_property.htm">ServerClassLibrary Property</a></td>
<td width=60%>Contains the name of the class library or program containing a server class.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngserverhelpfile_property.htm">ServerHelpFile Property</a></td>
<td width=60%>The help file for the type library created for server classes in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngserverproject_property.htm">ServerProject Property</a></td>
<td width=60%>The name of the project containing server classes.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngsetmain_method.htm">SetMain Method</a></td>
<td width=60%>Sets the main file in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngtype_property.htm">Type Property</a></td>
<td width=60%>The file type for a file in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngtypelibclsid_property.htm">TypeLibCLSID Property</a></td>
<td width=60%>The registry CLSID (Class Identifier) for a type library created for server classes in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngtypelibdesc_property.htm">TypeLibDesc Property</a></td>
<td width=60%>The description for a type library created for server classes in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngtypelibname_property.htm">TypeLibName Property</a></td>
<td width=60%>The name of the type library created for server classes in a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngundocheckout_method.htm">UndoCheckOut Method</a></td>
<td width=60%>Discards any changes made to a file and checks the file back into source code control.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversioncomments_property.htm">VersionComments Property</a></td>
<td width=60%>The comments for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversioncompany_property.htm">VersionCompany Property</a></td>
<td width=60%>The company name information for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversioncopyright_property.htm">VersionCopyright Property</a></td>
<td width=60%>The copyright information for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversiondescription_property.htm">VersionDescription Property</a></td>
<td width=60%>The description for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversionlanguage_property.htm">VersionLanguage Property</a></td>
<td width=60%>The language information for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversionnumber_property.htm">VersionNumber Property</a></td>
<td width=60%>The build number for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversionproduct_property.htm">VersionProduct Property</a></td>
<td width=60%>The product name information for a project.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngversiontrademarks_property.htm">VersionTrademarks Property</a></td>
<td width=60%>The trademarks information for a project.</td>
</tr>
</table><br>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b><a name="newole_drag_and_drop_language"></a>New OLE drag-and-drop language</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%><a href="lngcleardata_method.htm">ClearData Method</a></td>
<td width=61%>Clears all data and data formats from the OLE drag-and-drop DataObject. </td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=39%><a href="lngdataobject_object.htm">DataObject Object</a></td>
<td width=61%>Container for data being transferred from an OLE drag source to an OLE drop target.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnggetdata_method.htm">GetData Method</a></td>
<td width=61%>Retrieves data from the OLE drag-and-drop DataObject.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnggetformat_method.htm">GetFormat Method</a></td>
<td width=61%>Determines if data in a specified format is available on the OLE drag-and-drop DataObject.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolecompletedrag_event.htm">OLECompleteDrag Event</a></td>
<td width=61%>Occurs when data is dropped on the drop target or the OLE drag-and-drop operation is canceled.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledrag_method.htm">OLEDrag Method</a></td>
<td width=61%>Starts an OLE drag-and-drop operation.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledragdrop_event.htm">OLEDragDrop Event</a></td>
<td width=61%>Occurs when data is dropped on a drop target and the drop target's OLEDropMode property is set to 1 - Enabled.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledragmode_property.htm">OLEDragMode Property</a></td>
<td width=61%>Specifies how a drag operation is initiated.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledragover_event.htm">OLEDragOver Event</a></td>
<td width=61%>Occurs when data is dragged over a drop target and the drop target's OLEDropMode property is set to 1 – Enabled.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledragpicture_property.htm">OLEDragPicture Property</a></td>
<td width=61%>Specifies the picture displayed under the mouse pointer during an OLE drag-and-drop operation. You can specify a picture file of type .bmp, .dib, .jpg, .gif, .ani, .cur, and .ico.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledropeffects_property.htm">OLEDropEffects Property</a></td>
<td width=61%>Specifies the type of drop operations an OLE drop target supports.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledrophasdata_property.htm">OLEDropHasData Property</a></td>
<td width=61%>Specifies how a drop operation is managed.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledropmode_property.htm">OLEDropMode Property</a></td>
<td width=61%>Specifies how a drop target manages OLE drop operations.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledroptextinsertion_property.htm">OLEDropTextInsertion Property</a></td>
<td width=61%>Specifies if you can drop text in the middle of a word in the text box portion of a control.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolegivefeedback_event.htm">OLEGiveFeedBack Event</a></td>
<td width=61%>Occurs after every OLEDragOver event. Allows the drag source to specify the type of OLE drag-and-drop operation and the visual feedback.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolesetdata_event.htm">OLESetData Event</a></td>
<td width=61%>Occurs on a drag source when a drop target calls the GetData method and there is no data in a specified format in the OLE drag-and-drop DataObject.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolestartdrag_event.htm">OLEStartDrag Event</a></td>
<td width=61%>Occurs when the OLEDrag method is called.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngsetdata_method.htm">SetData Method</a></td>
<td width=61%>Places data on the OLE drag-and-drop DataObject.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngsetformat_method.htm">SetFormat Method</a></td>
<td width=61%>Places a data format on the OLE drag-and-drop DataObject.</td>
</tr>
</table><br>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b><a name="newserver_improvements_language_elements"></a>New Server Improvements language</b></td>
<td class=label width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcomarraylp_rp.htm">COMARRAY(&nbsp;) Function</a></td>
<td width=60%>Specifies how arrays are passed to COM objects.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcomclassinfolp_rp.htm">COMCLASSINFO(&nbsp;) Function</a></td>
<td width=60%>Returns registry information about a COM object such as a Visual FoxPro automation server.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcomreturnerrorlp_rp.htm">COMRETURNERROR(&nbsp;) Function</a></td>
<td width=60%>Populates the COM exception structure with information that COM clients can use to determine the source of Automation errors.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcreateobjectexlp_rp.htm">CREATEOBJECTEX(&nbsp;) Function</a></td>
<td width=60%>Creates an instance of a registered COM object (such as a Visual FoxPro automation server) on a remote computer.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngservername_property.htm">ServerName Property</a></td>
<td width=60%>Contains the full path and file name for an automation server.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngstartmodeproperty.htm">StartMode Property</a></td>
<td width=60%>Contains a numeric value that indicates how the instance of Visual FoxPro was started.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngsyslp2335rp___unattended_server_mode.htm">SYS(2335) – Unattended Server Mode</a></td>
<td width=60%>Enables or disables modal states for distributable Visual FoxPro .exe automation servers.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngsyslp2334rp___automation_server_startup.htm">SYS(2334) – Automation Server Startup</a></td>
<td width=60%>Returns a value indicating how a Visual FoxPro automation server was invoked or if a stand-alone executable (.exe) application is running.</td>
</tr>
</table><br>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b><a name="newmiscellaneous_language"></a>New Miscellaneous language</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%><a href="lngaddproperty_method.htm">AddProperty Method</a></td>
<td width=61%>Adds a new property to an object.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngagetfileversionlp_rp.htm">AGETFILEVERSION(&nbsp;)</a></td>
<td width=61%>Creates an array containing information about files with Microsoft Windows version resources such as .exe, .dll, and .fll files, or automation servers created in Visual FoxPro.<br>
Corresponds to the GetFileVersion(&nbsp;) function in Foxtools.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngagetclasslp_rp.htm">AGETCLASS(&nbsp;) Function</a></td>
<td width=61%>Displays class libraries in the Open dialog box and creates an array containing the name of the class library and class chosen.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngalineslp_rp.htm">ALINES(&nbsp;) Function</a></td>
<td width=61%>Copies each line in a character expression or memo field to a corresponding row in an array.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngamouseobjlp_rp.htm">AMOUSEOBJ(&nbsp;) Function</a></td>
<td width=61%>Returns mouse pointer position information and object references for the object and the object's container over which the mouse pointer is positioned.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnganetresourceslp_rp.htm">ANETRESOURCES(&nbsp;) Function</a></td>
<td width=61%>Places the names of network shares or printers into an array and then returns the number of resources.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngavcxclasseslp_rp.htm">AVCXCLASSES(&nbsp;) Function</a></td>
<td width=61%>Places the information about classes in a class library into an array.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngdisplaycount_property.htm">DisplayCount Property</a></td>
<td width=61%>Specifies the number of items displayed in the list portion of a ComboBox control.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngfiletostrlp_rp.htm">FILETOSTR(&nbsp;) Function</a></td>
<td width=61%>Returns the contents of a file as a character string.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lng_gallery.htm">_GALLERY System Variable</a></td>
<td width=61%>Specifies the program that is executed when you choose Component Gallery from the Tools menu.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lng_genhtml.htm">_GENHTML System Variable</a></td>
<td width=61%>Specifies an HTML (Hypertext Markup Language) generation program that creates a text file that contains a hypertext markup language version of a form, menu, report, or table.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lng_getexpr.htm">_GETEXPR System Variable</a></td>
<td width=61%>Specifies the program that is executed when you issue the GETEXPR command or the Expression Builder dialog box is displayed.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnggridhittest_method.htm">GridHitTest Method</a></td>
<td width=61%>Returns, as output parameters, the components of a grid control corresponding to specified horizontal (X) and vertical (Y) coordinates.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lng_include.htm">_INCLUDE System Variable</a></td>
<td width=61%>Specifies a default header file included with user-defined classes, forms, or form sets.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngindexseeklp_rp.htm">INDEXSEEK(&nbsp;) Function</a></td>
<td width=61%>Without moving the record pointer, searches an indexed table for the first occurrence of a record whose index key matches a specified expression.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngnewobjectlp_rp.htm">NEWOBJECT(&nbsp;) Function</a></td>
<td width=61%>Creates a new class or object directly from a .vcx visual class library or program.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngnewobject_method.htm">NewObject Method</a></td>
<td width=61%>Adds a new class or object to an object directly from a .vcx visual class library or program.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lng_samples.htm">_SAMPLES System Variable</a></td>
<td width=61%>Contains the path of the directory in which the Visual FoxPro samples are installed.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngset_browseime.htm">SET BROWSEIME Command</a></td>
<td width=61%>Specifies if the Input Method Editor is opened when you navigate to a text box in a Browse window.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngset_strictdate.htm">SET STRICTDATE Command</a></td>
<td width=61%>Specifies if ambiguous Date and DateTime constants generate errors.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngstrtofilelp_rp.htm">STRTOFILE(&nbsp;) Function</a></td>
<td width=61%>Writes the contents of a character string to a file.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngsyslp3055rp___for_and_where_clause_complexity.htm">SYS(3055) – FOR and WHERE Clause Complexity</a></td>
<td width=61%>Sets the complexity level of the FOR and WHERE clauses in commands and functions that support them.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngsyslp3056rp___read_registry_settings.htm">SYS(3056) – Read Registry Settings</a></td>
<td width=61%>Forces Visual FoxPro to read its registry settings again and update itself with the current registry settings.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngtitlebar_property.htm">TitleBar Property</a></td>
<td width=61%>Specifies if a title bar appears at the top of a form.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngvartypelp_rp.htm">VARTYPE(&nbsp;) Function</a></td>
<td width=61%>Returns the data type of an expression.</td>
</tr>
</table><br>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b><a name="newenhanced_language_elements"></a>Enhanced language elements</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%><a href="tblrelational_operators.htm">= Operator</a></td>
<td width=61%>Can be used in Visual FoxPro 6.0 to determine if two object references refer to the same object.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngalter_table___sql.htm">ALTER TABLE - SQL Command</a></td>
<td width=61%>Supports a new FOR clause for the ADD PRIMARY KEY and ADD FOREIGN KEY clauses. FOR allows you to create filtered primary and foreign indexes.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngappend_from.htm">APPEND FROM Command</a></td>
<td width=61%>Supports a new XL8 option for importing data from a Microsoft Excel 97 worksheet, and a new CSV option for importing data from a comma separated value file.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngcentury_property.htm">Century Property</a></td>
<td width=61%>The default for is now 1 – On. The century portion of the date is displayed in a text box to provide Year 2000 compliance.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlcheckbox_control.htm">CheckBox Control</a></td>
<td width=61%>Now supports the <a href="lngreadonly_property.htm">ReadOnly</a> property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlcolumn_object.htm">Column Object</a></td>
<td width=61%>Now supports the <a href="lngcomment_property.htm">Comment</a> and <a href="lngtag_property.htm">Tag</a> properties and the <a href="lngsaveasclass_method.htm">SaveAsClass</a> method.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngcompile_database.htm">COMPILE DATABASE Command</a></td>
<td width=61%>COMPILE DATABASE now packs memo fields in the .dct memo file for the database to remove unused space from the memo file.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlcontainer_object.htm">Container Object</a></td>
<td width=61%>Now supports the <a href="lngtag_property.htm">Tag</a> property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlcontrol_object.htm">Control Object</a></td>
<td width=61%>Now supports the <a href="lngtag_property.htm">Tag</a> property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngcopy_to.htm">COPY TO Command</a></td>
<td width=61%>Supports a new CSV option for exporting data as a comma separated value file.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngcreate_form.htm">CREATE FORM Command</a></td>
<td width=61%>Supports a new AS clause that allows you to create a new form or formset from a form or formset in a .vcx visual class library.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlcursor_object.htm">Cursor Object</a></td>
<td width=61%>Now supports the <a href="lngcomment_property.htm">Comment</a> and <a href="lngtag_property.htm">Tag</a> properties, and the <a href="lngreadexpression_method.htm">ReadExpression</a>, <a href="lngreadmethod_method.htm">ReadMethod</a>, <a href="lngsaveasclass_method.htm">SaveAsClass</a>, and <a href="lngwriteexpression_method.htm">WriteExpression</a> methods.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlcustom_object.htm">Custom Object</a></td>
<td width=61%>Now supports the <a href="lngtag_property.htm">Tag</a> property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctldataenvironment_object.htm">DataEnvironment Object</a></td>
<td width=61%>Now supports the <a href="lngcomment_property.htm">Comment</a> and <a href="lngtag_property.htm">Tag</a> properties, and the <a href="lngreadexpression_method.htm">ReadExpression</a>, <a href="lngreadmethod_method.htm">ReadMethod</a>, <a href="lngsaveasclass_method.htm">SaveAsClass</a>, and <a href="lngwriteexpression_method.htm">WriteExpression</a> methods.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngdatelp_rp.htm">DATE(&nbsp;) Function</a></td>
<td width=61%>Now supports optional numeric arguments that let you create year 2000 compliant Date values.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngdatetimelp_rp.htm">DATETIME(&nbsp;) Function</a></td>
<td width=61%>Now supports optional numeric arguments that let you create year 2000 compliant DateTime values.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngdefine_class.htm">DEFINE CLASS Command</a></td>
<td width=61%>Supports new Access and Assign methods, allowing you to execute code whenever a property is queried or you attempt to change the value of a property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngfdatelp_rp.htm">FDATE(&nbsp;) Function</a></td>
<td width=61%>Now supports an optional argument that lets you determine the time when a file was last modified without using character manipulation functions.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlform_object.htm">Form Object</a></td>
<td width=61%>Now supports the <a href="lngscrollbars_property.htm">Scrollbars</a> property and the <a href="lngscrolled_event.htm">Scrolled</a> event.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlformset_object.htm">FormSet Object</a></td>
<td width=61%>Now supports the <a href="lngparent_property.htm">Parent</a> and <a href="lngtag_property.htm">Tag</a> properties.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnggetdirlp_rp.htm">GETDIR( ) Function</a></td>
<td width=61%>The Select Directory dialog box has been enlarged to display more directory information.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnggetfilelp_rp.htm">GETFILE(&nbsp;) Function</a></td>
<td width=61%>Supports a new <i>cTitleBarCaption </i>option that lets you specify the title bar caption in the Open dialog box.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnggetfontlp_rp.htm">GETFONT(&nbsp;) Function</a></td>
<td width=61%>Allows you to specify a font, font size, and font style that are initially selected when the Font dialog box is displayed.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlheader_object.htm">Header Object</a></td>
<td width=61%>Now supports the <a href="lngcomment_property.htm">Comment</a> and <a href="lngtag_property.htm">Tag</a> properties, and the <a href="lngsaveasclass_method.htm">SaveAsClass</a> method.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lnghomelp_rp.htm">HOME(&nbsp;) Function</a></td>
<td width=61%>Now lets you determine the Visual FoxPro and Visual Studio samples, tools, graphics, and common directories.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlimage_control.htm">Image Control</a></td>
<td width=61%>Now supports the <a href="lngtooltiptext_property.htm">ToolTipText</a> property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngimport.htm">IMPORT Command</a></td>
<td width=61%>Supports a new XL8 option for importing data from a Microsoft Excel 97 worksheet.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctllabel_control.htm">Label Control</a></td>
<td width=61%>Now supports the <a href="lngtooltiptext_property.htm">ToolTipText</a> property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngmodify_memo.htm">MODIFY MEMO Command</a></td>
<td width=61%>Syntax coloring is now disabled in memo field editing windows in distributed run time applications.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoslp_rp.htm">OS( ) Function</a></td>
<td width=61%>Now supports an option that lets you determine if the operating system supports DBCS (double-byte character sets).</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlpage_object.htm">Page Object</a></td>
<td width=61%>Now supports the <a href="lngtag_property.htm">Tag</a> property and the <a href="lngsaveasclass_method.htm">SaveAsClass</a> method.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlpageframe_control.htm">PageFrame Control</a></td>
<td width=61%>Now supports the <a href="lngtag_property.htm">Tag</a> property.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngpemstatuslp_rp.htm">PEMSTATUS(&nbsp;) Function</a></td>
<td width=61%>PEMSTATUS(&nbsp;) supports a new 6 option for <i>nAttribute</i> that lets you determine if a property, event, or method was inherited from an object or class.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngprogramlp_rp.htm">PROGRAM( ) Function</a></td>
<td width=61%>Now supports –1 as an argument, allowing you to determine the current program level.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngrefresh_method.htm">Refresh Method</a></td>
<td width=61%>Now allows you to refresh the visual display of the Project Manager, and supports a new parameter to update the source control status for files in a project.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlrelation_object.htm">Relation Object</a></td>
<td width=61%>Now supports the <a href="lngcomment_property.htm">Comment</a> and <a href="lngtag_property.htm">Tag</a> properties, the <a href="lngdestroy_event.htm">Destroy</a>, <a href="lngerror_event.htm">Error</a>, and <a href="lnginit_event.htm">Init</a> events, and the <a href="lngreadexpression_method.htm">ReadExpression</a>, <a href="lngreadmethod_method.htm">ReadMethod</a>, and <a href="lngwriteexpression_method.htm">WriteExpression</a> methods.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngreport.htm">REPORT Command</a></td>
<td width=61%>Now supports a PREVIEW IN SCREEN clause, allowing you to place the preview window in the main Visual FoxPro window.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctlseparator_object.htm">Separator Object</a></td>
<td width=61%>Now supports the <a href="lngcomment_property.htm">Comment</a> and <a href="lngtag_property.htm">Tag</a> properties, and the <a href="lngreadexpression_method.htm">ReadExpression</a>, <a href="lngreadmethod_method.htm">ReadMethod</a>, <a href="lngsaveasclass_method.htm">SaveAsClass</a>, and <a href="lngwriteexpression_method.htm">WriteExpression</a> methods.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngset_bell.htm">SET BELL</a></td>
<td width=61%>A waveform sound duration is no longer required.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngsetlp_rp.htm">SET('PRINTER')</a></td>
<td width=61%>Supports a new 3 option that allows you to determine the current Visual FoxPro default printer set in the Visual FoxPro Print or Print Setup dialog boxes.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngsetlp_rp.htm">SET('BELL')</a></td>
<td width=61%>Can now be used to determine the waveform sound played when the bell sounds.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngstrconvlp_rp.htm">STRCONV(&nbsp;) Function</a></td>
<td width=61%>Supports a new <i>nLocaleID </i>argument that allows you to specify the Locale ID to use for the conversion.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngsyslp2333rp___activex_dual_interface_support.htm">SYS(2333) - ActiveX Dual Interface Support</a></td>
<td width=61%>Now allows you to determine its current setting, and the default startup setting for ActiveX dual interface support has been changed from enabled in Visual FoxPro 5.0 to disabled in Visual FoxPro 6.0.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngtableupdatelp_rp.htm">TABLEUPDATE(&nbsp;) Function</a></td>
<td width=61%>If an error other than a simple commit error occurs while updating records, the first element of the error array will now contain –1 and you can then use AERROR(&nbsp;) to determine why the changes could not be committed.</td>
</tr>
<tr valign=top>
<td width=39%><a href="ctltoolbar_object.htm">ToolBar Object</a></td>
<td width=61%>Now supports the <a href="lngtag_property.htm">Tag</a> property and the <a href="lngrelease_method.htm">Release</a> method.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngtransformlp_rp.htm">TRANSFORM(&nbsp;) Function</a></td>
<td width=61%>The <i>cFormatCodes</i> format code is now optional. A default transformation is used if the <i>cFormatCodes</i> format code is omitted.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngversionlp_rp.htm">VERSION( ) Function</a></td>
<td width=61%>Supports two new <i>nExpression </i>options, 4 and 5, to return just the Visual FoxPro version number in formats that can be easily parsed.</td>
</tr>
</table><br>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b><a name="newfoxtools_language_elements"></a>Foxtools functions</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%>The following functions have been added to Visual FoxPro 6.0 from Foxtools; they can now be used without executing SET LIBRARY TO FOXTOOLS.</td>
<td width=61%>Note that you must recompile any programs, class libraries, labels, or reports created in earlier versions of Visual FoxPro if they contain any of the following functions.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngaddbslp_rp.htm">ADDBS( ) Function</a></td>
<td width=61%>Adds a backslash (if needed) to a path expression.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngagetfileversionlp_rp.htm">AGETFILEVERSION(&nbsp;) Function</a></td>
<td width=61%>Creates an array containing information about files with Windows version resources such as .exe, .dll, and .fll files, or automation servers created in Visual FoxPro.<br>
Corresponds to the GetFileVersion(&nbsp;) function in Foxtools.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngdefaultextlp_rp.htm">DEFAULTEXT( ) Function</a></td>
<td width=61%>Returns a file name with a new extension if one doesn't already exist.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngdrivetypelp_rp.htm">DRIVETYPE( ) Function</a></td>
<td width=61%>Returns the type of the specified drive.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngforceextlp_rp.htm">FORCEEXT( ) Function</a></td>
<td width=61%>Returns a string with the old file name extension replaced by a new extension.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngforcepathlp_rp.htm">FORCEPATH( ) Function</a></td>
<td width=61%>Returns a file name with a new path name substituted for the old one.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngjustdrivelp_rp.htm">JUSTDRIVE( ) Function</a></td>
<td width=61%>Returns the drive letter from a complete path.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngjustextlp_rp.htm">JUSTEXT( ) Function</a></td>
<td width=61%>Returns the three-letter extension from a complete path.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngjustfnamelp_rp.htm">JUSTFNAME( ) Function</a></td>
<td width=61%>Returns the file name portion of a complete path and file name.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngjustpathlp_rp.htm">JUSTPATH( ) Function</a></td>
<td width=61%>Returns the path portion of a complete path and file name.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngjuststemlp_rp.htm">JUSTSTEM( ) Function</a></td>
<td width=61%>Returns the stem name (the file name before the extension) from a complete path and file name.</td>
</tr>
</table><br>
<h3>Improvements to Visual FoxPro Performance</h3>
<p>
The performance of string concatenation in Visual FoxPro 6.0 has been increased dramatically. String concatenation is typically used to create Web pages with code like the following:</p>
<pre><code>cMyString = cMyString + &lt;html tags&gt;
cMyString = cMyString + &lt;more html tags&gt;
cMyString = cMyString + &lt;even more html tags&gt;
</code></pre>
<p>
Also, object creation and instantiation performance has also been improved, and it typically 10 or more times faster than in previous versions.</p>
<h3>Improvements to Visual FoxPro Robustness</h3>
<p>
Visual FoxPro 6.0 now captures General Protection Faults (GPFs) in ActiveX controls placed on a form, or COM objects instantiated from within Visual FoxPro. A GPF in an ActiveX control or COM object is now treated as a trappable Visual FoxPro error (<a href="err1440.htm">Error 1440</a> - OLE object may be corrupt).</p>
<h3>Improvements to Visual FoxPro Usability</h3>
<p>
You can specify the Visual FoxPro editor comment string in the Windows registry. Using the Windows Registry Editor (RegEdit), open the Visual FoxPro 6.0 Options folder, and right-click the folder. Choose <b>New</b>, and then <b>String Value</b>. Enter the name “EditorCommandString” for the name of the new string value. Right-click the string value, and choose <b>Modify</b>. Enter the editor comment string (*!* is the default value used when this registry entry doesn’t exist in the Registry).</p>
<p>
The Form menu is now accessible from within the form code window. Also, you can run a form with the CTRL+E keyboard shortcut, even from within a form code window.</p>

<h2><a name="newyear_2000_date_support"></a><sup></sup>Year 2000 Date Support</h2>
<p>
Visual FoxPro 6.0 has been enhanced to provide better year 2000 date support. This section describes the enhancements made to Visual FoxPro to make it easier to create year 2000 compliant applications.</p>
<h3>SET CENTURY TO</h3>
<p>
The Visual FoxPro 5.0 documentation states that issuing SET CENTURY TO without additional arguments sets the century to the current century. This is only true in the 20th century, because the century is set to 19 regardless of the current century. In Visual FoxPro 6.0, SET CENTURY TO sets the century to the current century. Additionally, the value of SET CENTURY TO in new data sessions is initialized to the current century. </p>
<p>
Also, in Visual FoxPro 6.0, the default ROLLOVER value for SET CENTURY has changed to the last two digits of the current year plus 50 years - if the current year is 1998, <i>nYear</i> is 48, the last two digits of 2048 (1998 + 50). In Visual FoxPro 5.0 the default value is 0.</p>
<p>
See <a href="lngset_century.htm">SET CENTURY</a> for more information.</p>
<h3>Strict Date Formats</h3>
<p>
Normally, Date and DateTime constants or expressions are interpreted based on the current settings of <a href="lngset_date.htm">SET DATE</a> and <a href="lngset_century.htm">SET CENTURY</a> at the time the constants or expressions are compiled or evaluated. This means that many date constants are ambiguous since they might evaluate to different values depending upon when they were compiled and what date settings were in effect at compilation time. </p>
<p>
For example, is the date constant {10/11/12} October 11, 1912, October 11, 2012, November 10, 1912, November 12, 1910, or November 12, 2010?</p>
<p>
It all depends on the current settings of SET DATE and SET CENTURY TO. This can introduce errors into existing Visual FoxPro code wherever Date or DateTime constants or expressions are either compiled or are evaluated at run time, such as in report and object expressions. This can introduce year 2000 noncompliance into existing code when the setting of SET CENTURY rolls over into the year 2000 and a four-digit year isn't specified.</p>
<p>
To avoid noncompliance, a strict date format is now available in Visual FoxPro 6.0 (and Visual FoxPro 5.0). A strict date always evaluates to the same Date or DateTime value regardless of any date settings. The strict date format is:</p>
<p>
^yyyy-mm-dd[,][hh[:mm[:ss]][a|p]]</p>
<p>
The caret character (^) always denotes the strict date format and causes Dates and DateTimes to be interpreted in a YMD format. Valid Date and DateTime separators are hyphens, forward slashes, periods, and spaces.</p>
<p>
Empty Dates and DateTimes are considered nonambiguous and are always valid. Valid empty Date and DateTime formats include {}, {--}, and {--,:}.</p>
<p>
With strict date formats, a greater range of Date and DateTime values are available. In Visual FoxPro 5.0, the smallest date value that can be expressed is {^0100/1/1}, January 1st, 100 A.D. This is because year values less than 100 were always rounded up to the nearest century based on the setting of SET CENTURY.</p>
<p>
The smallest valid date in Visual FoxPro 6.0 is {^0001-01-01}, January 1st, 1 A.D. The largest valid date in Visual FoxPro 6.0 is {^9999-12-31}, December 31st, 9999 A.D.</p>
<p>
Note that the strict date format ignores the TAIWAN setting for SET DATE, so the year of a strict format Date or DateTime is always in the Western calendar. (Note that this is not true in Visual FoxPro 5.0.)</p>
<h3>SET STRICTDATE</h3>
<p>
A new command, <a href="lngset_strictdate.htm">SET STRICTDATE</a>, can be used to enforce year 2000 compliant date constants and date strings.</p>
<p>
SET STRICTDATE TO 0</p>
<p>
Setting STRICTDATE to 0 means that strict date format checking is off. This is Visual FoxPro 5.0 compatible. 0 is the default setting for the Visual FoxPro run time and ODBC driver. When STRICTDATE is set to 0, invalid Date and DateTimes evaluate to the empty date.</p>
<p>
SET STRICTDATE TO 1</p>
<p>
Setting STRICTDATE to 1 requires that all Date and DateTime constants be in the strict date format. Any Date or DateTime constant that is not in the strict format or evaluates to an invalid value generates an error, either during compilation, at run time, or during an interactive Visual FoxPro session. 1 is the default setting for an interactive Visual FoxPro session.</p>
<p>
SET STRICTDATE TO 2</p>
<p>
Identical to setting STRICTDATE to 1, but also generates a compilation error (2033 – CTOD and CTOT can produce incorrect results) whenever <a href="lngctodlp_rp.htm">CTOD(&nbsp;)</a> and <a href="lngctotlp_rp.htm">CTOT(&nbsp;)</a> functions appear in code.</p>
<p>
Because the values returned by CTOD(&nbsp;) and CTOT(&nbsp;) rely on SET DATE and SET CENTURY to interpret the date string they contain, they are prone to year 2000 noncompliance errors. Use DATE(&nbsp;) and DATETIME(&nbsp;) with the optional numeric arguments to create Date and DateTime constants and expressions.</p>
<p>
This setting is most useful during debugging sessions to trap for code that may contain year 2000 compliance errors.</p>
<h3>Strict Date Format Errors</h3>
<p>
The following new errors have been added to Visual FoxPro 6.0, and can be generated when SET STRICTDATE is set to 1 or 2.</p>
<h4>Error 2032: Ambiguous Date/DateTime constant.</h4>
<p>
This error occurs when a Date or DateTime did not adhere to the strict format. The following conditions will produce this error:
<ul type=disc>
<li>
The caret (^) is missing.<br><br></li>
<li>
The date separators are not the required hyphen, forward slash, period, or space separators.<br><br></li>
<li>
The year field contains less than four characters ({^98-02-16}).<br><br></li>
<li>
The month or day field is empty ({^1998-02}).</li>
</ul>
<h4>Error 2033: CTOD and CTOT can produce incorrect results.</h4>
<p>
This error occurs for the same reasons as error 2032, but CTOD(&nbsp;) and CTOT(&nbsp;) may be non-compliant or ambiguous. Use the <a href="lngdatelp_rp.htm">DATE(&nbsp;)</a> or <a href="lngdatetimelp_rp.htm">DATETIME(&nbsp;)</a> functions instead.</p>
<h4>Error 2034: Date/DateTime evaluated to an invalid value.</h4>
<p>
A Date or DateTime is not in the valid Date or DateTime format, or is outside the valid Date or DateTime range.</p>
<p>
When SET STRICTDATE is set to 0, invalid Date and DateTime constants evaluate to the empty Date or DateTime. When SET STRICTDATE is set to 1 or 2, invalid date constants, such as {^2000-02-31}, February 31<sup>st</sup>, or {^2000-01-01,25:00}, 25 o'clock, generate this error.</p>
<p>
Examples of invalid Dates and DateTimes include:
<ul type=disc>
<li>
{^2000-02-31}, February 31st, 2000.<br><br></li>
<li>
{^2000-01-01,25:00} 25 o'clock.<br><br></li>
<li>
{^2000-01-01, 14a}, 14 A.M.</li>
</ul>
<h4>Error 2035: Date/DateTime contains illegal characters.</h4>
<p>
The Date or DateTime constant contains characters that are not supported in Date and DateTime constants.</p>
<p>
When SET STRICTDATE is set to 0, the Date or DateTime constant containing the illegal characters evaluates to the empty Date or DateTime. When SET STRICTDATE is set to 1 or 2, the Date or DateTime constant containing the illegal characters generates this error.</p>
<p>
Note that the <a href="lngstrictdateentry_property.htm">StrictDateEntry</a> property isn't affected by the setting of SET STRICTDATE. The StrictDateEntry property remains unchanged in Visual FoxPro 6.0.</p>
<h3>Options Dialog</h3>
<p>
The <a href="cmdgeneral_tab_options_dialog_box.htm">General tab</a> of the <b>Options</b> dialog box now includes a <b>Year 2000 Compliance</b> drop-down list box, which specifies the setting of SET STRICTDATE. Like all other Options dialog items, the value is set for the current Visual FoxPro session, and choosing <b>Set As Default</b> saves the setting to the Windows registry for the next Visual FoxPro session.</p>
<h3>DATE( ) and DATETIME( ) Functions</h3>
<p>
The <a href="lngdatelp_rp.htm">DATE(&nbsp;)</a> and <a href="lngdatetimelp_rp.htm">DATETIME(&nbsp;)</a> functions now support optional numeric arguments that let you create year 2000 compliant Date or DateTime values. The enhancements to these functions now provide a preferable method for creating Date and DateTime values; it's no longer necessary to use character manipulation functions to create Date and DateTime values.</p>
<h3>FDATE( ) Function</h3>
<p>
The <a href="lngfdatelp_rp.htm">FDATE(&nbsp;)</a> function now supports an optional argument that lets you determine the time when a file was last modified without using character manipulation functions. For example, in previous versions of Visual FoxPro, it was necessary to write code like the following to determine when the Visual FoxPro resource file was last modified:</p>
<pre><code>tLastModified = CTOT(DTOC(FDATE('Foxuser.dbf')) + ' ' ;
 &nbsp; + FTIME('Foxuser.dbf') 
</code></pre>
<p>
This code can now be replaced with the following:</p>
<pre><code>tLastModified = FDATE('Foxuser.dbf', 1)
</code></pre>
<h3>Century Property</h3>
<p>
The default for the <a href="lngcentury_property.htm">Century</a> property in Visual FoxPro 6.0 is <b>1 – On</b>. The century portion of the date is displayed in a text box. In previous versions of Visual FoxPro, the default is <b>2 – the SET CENTURY setting determines if the century portion of the date is displayed</b>.</p>
</BODY>
</HTML>

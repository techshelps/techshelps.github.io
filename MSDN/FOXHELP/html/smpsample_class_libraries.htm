<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Class Libraries</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="smpsample_class_libraries"></a>Sample Class Libraries</h1>
<p>
The Visual FoxPro sample class library provide encapsulated functionality that you can easily add to your applications. The <a href="smpvisual_foxpro_solutions_sample.htm">Solutions sample application</a> illustrates using most of the sample classes. The sample classes are contained in the following files:
<ul type=disc>
<li>
<a href="#smpbuttons_class_library">Buttons.vcx</a><br><br></li>
<li>
<a href="#smpsamples_class_library">Samples.vcx</a><br><br></li>
<li>
<a href="#smptypelib_class_library">TypeLib.vcx</a><br><br></li>
<li>
<a href="#smputility_class_library">Utility.vcx</a><br><br></li>
<li>
<a href="#smpregistry_program">Registry.prg</a></li>
</ul>

<h2><a name="smpbuttons_class_library"></a>Buttons Class Library</h2>
<p>
Buttons.vcx contains the following classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Class</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>CmdOK</td>
<td width=78%>A command button that releases the form it is added to. If the form is contained in a form set, cmdOK releases the form set.</td>
</tr>
<tr valign=top>
<td width=22%>CmdCancel</td>
<td width=78%>A subclass of cmdOK with the Caption property set to “Cancel.”</td>
</tr>
<tr valign=top>
<td width=22%>CmdHelp</td>
<td width=78%>A command button that invokes help with the HelpContextID of the form it is added to.</td>
</tr>
<tr valign=top>
<td width=22%>MailBtn</td>
<td width=78%>A container with a command button, a Microsoft MAPI Message control, and a Microsoft MAPI Session control. Code in the Click event of the command button logs on to mail and composes a message containing the values in the current record of a table.<p>
For an example of using the MailBtn class, see SENDMAIL.SCX in the Visual FoxPro SAMPLES\SOLUTION\OLE folder.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>VCR</td>
<td width=78%>A set of table navigation buttons that allow a user to move the record pointer to the next, prior, top, and bottom records of a table.<p>
Set the Skiptable property to the alias of the table you want to move the record pointer in. If Skiptable is empty, the record pointer is moved in the currently selected work area.</p>
</td>
</tr>
</table><br>

<h2><a name="smpsamples_class_library"></a>Samples Class Library</h2>
<p>
Samples.vcx contains the following classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Class</b></td>
<td class=label width=77%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=23%>CboFontName</td>
<td width=77%>A combo box that displays all the currently available fonts in the system. </td>
</tr>
<tr valign=top>
<td width=23%>CboFontSize</td>
<td width=77%>A combo box that displays all the available point sizes for a particular font. Pass a font name to the FillList method to populate the combo box. The nLargestFont and nSmallestFont properties delimit the maximum and minimum font sizes displayed. You can use this control in conjuction with the cboFontName class. In the InteractiveChange event of the cboFontName object, call the FillList method of the cboFontSize object:<p>
<code>THISFORM.cboFontSize1.FillList(THIS.Value)</code></p>
<p>
For an example of using this class, see the tbrEditing class in the same class library.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Clock</td>
<td width=77%>A container that displays the current date and time.<p>
The “Display a system clock” component in the Solutions sample also uses the Clock class.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Datachecker</td>
<td width=77%>A custom class that manages resolving data conflicts. Code in the Error event of the VCR class in BUTTONS.vcx calls the CheckConflicts method of this class if an attempt to write buffered data to a table encounters changed values:<p>
<code>nConflictStatus = ;<br>
 THIS.DataChecker1.CheckConflicts()</code></p>
<p>
The “Run multiple instances of a form” component in the Solutions sample also uses this class to check for data conflicts.</p>
<p>
For more information, open the class and read the comments in the code.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Distinct_values<br>
_combo</td>
<td width=77%>A combo box that is populated on initialization with the distinct values in the ControlSource alias. For example, if you add this class to a form and set the ControlSource to “customer.country”, the combo box will be populated with the countries in the customer table without displaying the country names more than once.</td>
</tr>
<tr valign=top>
<td width=23%>FrmNoTitle</td>
<td width=77%>A form with properties set so that no title is displayed. If you want to display information in a separate window, you can create an object based on this class and use form graphics methods.<p>
The “Display line animation on a form” component in the Solutions sample also uses a form with no title to display the animation.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Lookup_combo</td>
<td width=77%>A combo box that makes it easy to display values from one field, for example a company name, while binding a ControlSource to another field, for example a company id number. This class has four custom properties:<p>
<i>order_column</i>: Column to sort the table by (optional).</p>
<p>
<i>lookup_table</i>: Table to fill the combo box from.</p>
<p>
<i>display_column</i>: Column in the table to display.</p>
<p>
<i>return_column</i>: Column whose value is written to the ControlSource.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>MoverLists</td>
<td width=77%>A container with two list boxes and four command buttons. A user can move selected items from one list to the other list by clicking the command buttons or dragging and dropping.<p>
You need to make sure the RowSourceType of each list box is set to 0 and use the AddItem method to add items to the source list box.</p>
<p>
MoverLists has three custom properties:</p>
<p>
<i>CanDropIcon</i>: Cursor to be displayed over a valid target in a drag and drop operation.</p>
<p>
<i>NoDropIcon</i>: Cursor to be displayed when dropping will not add the selected items to the list box.</p>
<p>
<i>DragThreshold</i>: Number of pixels before the drag operation begins.</p>
<p>
The “Move items between list boxes” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Print_reports</td>
<td width=77%>A modal form that allows a user to preview a report, print it, or direct it to a file. You can set the cReport property of the class to the name of the report or pass the report name in as a parameter:<p>
<code>o = CREATEOBJECT(print_reports, ;<br>
 “myreport.frx”)</code></p>
</td>
</tr>
<tr valign=top>
<td width=23%>QBF</td>
<td width=77%>A container with three command buttons. Add this class and the VCR class to a form with data-bound controls. When the user chooses Enter QBF, the values in the controls are blanked out. Values that the user enters in the controls specify the filter to be set on the table when the user chooses <b>Query</b>.<p>
The controls need to have a ControlSource set and the Parent of the controls needs to be the form, not another container.</p>
<p>
The “Create a query by example form” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Resizable</td>
<td width=77%>A custom class that manages resizing and repositioning the controls on a form at run time, maintaining their relative sizes and positions. Add the class to a form and, in the Resize event of the form, call the AdjustControls method:<p>
<code>THIS.Resizable2.AdjustControls</code></p>
<p>
Resizable has two custom properties you need to set:</p>
<p>
<i>RepositionList</i>: A string containing all the classes for which objects are repositioned.</p>
<p>
<i>ResizeList</i>: A string containing all the classes for which objects are resized.</p>
<p>
The “Resize and reposition controls at run time” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>RTFcontrols</td>
<td width=77%>A container class containing cboFontName, cboFontSize and command buttons for <b>Bold</b>, <b>Italic</b>, and <b>ForeColor</b>. The cboFontSize control is refreshed in the InteractiveChange event of cboFontName, but no additional functionality is coded with the <b>Bold</b>, <b>Italic</b> and <b>ForeColor </b>command buttons.<p>
The “Use the RichText control” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>SoundPlayer</td>
<td width=77%>This class can be used to play a non-visual multimedia file, such as a .WAV audio file. See <a href="smpsample_multimedia_classes.htm">Sample Multimedia Classes</a> for details.</td>
</tr>
<tr valign=top>
<td width=23%>StopWatch</td>
<td width=77%>A container class with a timer and labels to display stop watch values.<p>
StopWatch has three custom methods you’ll want to use:</p>
<p>
<i>Start</i>: Starts the stop watch.</p>
<p>
<i>Stop</i>: Stops the stop watch</p>
<p>
<i>Reset</i>: Resets the displayed time to 0:00</p>
<p>
The “Display a stop watch” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>TbrEditing</td>
<td width=77%>tbrEditing has a custom property and a method you’ll want to use:<p>
<i>nAppliesTo Property</i>: This property can be set to 1, 2, or 3. 
<ol>
<li>
User choices affect the current control on the active form.<br><br></li>
<li>
User choices affect all text boxes and edit boxes on the active form.<br><br></li>
<li>
User choices affect all controls on the active form.</li>
</ol>
<p>
<i>Refresh</i>: Accepts an object reference as a parameter and sets all the editing controls to the appropriate values of the object. Call the Refresh method in the GotFocus event of a control.</p>
<p>
The “Change font attributes” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
<tr valign=top>
<td width=23%>Videoframe</td>
<td width=77%>This class can be used to play a visual multimedia file, such as a video for Windows file. See <a href="smpsample_multimedia_classes.htm">Sample Multimedia Classes</a> for details.</td>
</tr>
</table><br>

<h2><a name="smptypelib_class_library"></a>Typelib Class Library</h2>
<p>
Typelib.vcx contains the following class.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Class</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>Typelib</td>
<td width=78%>A container class that contains a <a href="lngvisual_foxpro_foxtlib_control.htm">Foxtlib.ocx control</a>. The ExportTypeLib method of this class calls the methods of the Foxtlib control to read type library information from .OLB, .TLB, and .EXE files.<p>
The “View type library information” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
</table><br>

<h2><a name="smputility_class_library"></a>Utility Class Library</h2>
<p>
Utility.vcx contains the following classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Class</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>Arraylib</td>
<td width=78%>A custom class with methods for inserting array elements, deleting array elements, and scanning array columns.</td>
</tr>
<tr valign=top>
<td width=22%>Execsp</td>
<td width=78%>A custom class with methods that facilitate SQL pass through and executing stored procedures on a remote database.</td>
</tr>
<tr valign=top>
<td width=22%>Filelib</td>
<td width=78%>A custom class with methods that perform common string tasks used when manipulating file names, for example, removing the extension, adding a backslash to a path, and so on.</td>
</tr>
<tr valign=top>
<td width=22%>Menulib</td>
<td width=78%>A container class with methods that create a shortcut menu from an array.<p>
The “Create dynamic shortcut menus” component in the Solutions sample illustrates the use of this class.</p>
</td>
</tr>
</table><br>

<h2><a name="smpregistry_program"></a>Registry Program</h2>
<p>
Registry.prg contains the following classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Class</b></td>
<td class=label width=78%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>FileReg</td>
<td width=78%>A subclass of the Registry class that provides methods for reading the application associated with particular file extensions and the path to the application.</td>
</tr>
<tr valign=top>
<td width=22%>FoxReg</td>
<td width=78%>A subclass of the Registry class that provides methods for reading and writing Visual FoxPro settings in the Windows Registry.</td>
</tr>
<tr valign=top>
<td width=22%>ODBCReg</td>
<td width=78%>A subclass of the Registry class that provides methods for reading ODBC data source and driver information.</td>
</tr>
<tr valign=top>
<td width=22%>OldINIReg</td>
<td width=78%>A subclass of the Registry class that provides methods for reading and writing to an .INI file.</td>
</tr>
<tr valign=top>
<td width=22%>Registry</td>
<td width=78%>A custom class that provides methods for accessing Windows API functions for manipulating the Windows Registry.</td>
</tr>
</table><br>
<p>
For examples of using the registry classes, run SOLUTION.app in the VFP\SAMPLES\SOLUTION folder.</p>
</BODY>
</HTML>

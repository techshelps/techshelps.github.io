<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GETOBJECT( ) Function</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lnggetobjectlp_rp"></a><sup></sup>GETOBJECT(&nbsp;) Function</h1>
<p>
<a href="lnggetobjectlp_rpsa.htm">See Also</a></p>
<p>
Activates an Automation object and creates a reference to the object.</p>
<p class=label>
<b>Syntax</b></p>
<p>
GETOBJECT(<i>FileName</i> [, <i>ClassName</i>])</p>
<p class=label>
<b>Returns</b></p>
<p>
Object</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>FileName</i></p>
<p class=indent>
Specifies the full path and name of the file to activate. The application does not need to be specified, because the OLE dynamic link libraries determine the application to start based on the file name you provide.</p>
<p class=tl>
For example, the following code launches Microsoft Excel, opens a file named BUDGET.XLS, and creates a reference through an object variable named MBUDVAR:</P><pre><code>MBUDVAR = GETOBJECT('C:\EXCEL\WORK\BUDGET.XLS')
</code></pre>
<p class=dt>
<i>ClassName</i></p>
<p class=indent>
Specifies the class name of the object to retrieve. Some applications can store more than one object type in the same file, allowing you to use the class name to specify the object to activate. For example, if a word processing application stores its documents, macro definitions, and ToolBar objects in the same file, you can create a reference to the document file with the following command:</p>
<pre><code>MDOCFILE = GETOBJECT('C:\WRDPROC\MYDOC.DOC','WrdProc.Document')
  'WrdProc.Document')
</code></pre>
<p class=tl>
With some server applications, each time you issue GETOBJECT(&nbsp;), an additional instance of the application is started, using additional memory. If the application is already running, you can prevent additional instances of the application from starting by omitting <i>FileName</i> and including <i>ClassName</i>, as in this example:</P><pre><code>oleApp = GETOBJECT(, "Excel.Application")</code></pre>
<p class=label>
<b>Remarks</b></p>
<p>
Use GETOBJECT(&nbsp;) to activate an Automation object from a file and to assign a reference to the object through a memory variable or array element.</p>
<p>
If you specify an invalid file or class name, an OLE error is displayed, and the GETOBJECT(&nbsp;) function returns an empty string.</p>
</BODY>
</HTML>

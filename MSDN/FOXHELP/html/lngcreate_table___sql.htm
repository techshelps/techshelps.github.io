<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATE TABLE - SQL Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngcreate_table___sql"></a><sup></sup>CREATE TABLE – SQL Command</h1>
<p>
<a href="lngcreate_table___sqlx.htm">Example</a> &nbsp; <a href="lngcreate_table___sqlsa.htm">See Also</a></p>
<p>
Creates a table having the specified fields.</p>
<p class=label>
<b>Syntax</b></p>
<p>
CREATE TABLE | DBF <i>TableName1</i> [NAME <i>LongTableName</i>] [FREE]<br>
 &nbsp; (<i>FieldName1</i> <i>FieldType</i> [(<i>nFieldWidth</i> [, <i>nPrecision</i>])]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NULL | NOT NULL] <br>
 &nbsp;&nbsp;&nbsp;&nbsp; [CHECK <i>lExpression1</i> [ERROR <i>cMessageText1</i>]]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [DEFAULT <i>eExpression1</i>]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [PRIMARY KEY | UNIQUE]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [REFERENCES <i>TableName2</i> [TAG <i>TagName1</i>]]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NOCPTRANS]<br>
 &nbsp; [, <i>FieldName2</i> ...]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [, PRIMARY KEY <i>eExpression2</i> TAG <i>TagName2</i><br>
 &nbsp;&nbsp;&nbsp;&nbsp; |, UNIQUE <i>eExpression3</i> TAG <i>TagName3</i>]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [, FOREIGN KEY <i>eExpression4</i> TAG <i>TagName4</i> [NODUP]<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REFERENCES <i>TableName3</i> [TAG <i>TagName5</i>]]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [, CHECK <i>lExpression2</i> [ERROR <i>cMessageText2</i>]])<br>
| FROM ARRAY <i>ArrayName</i></p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>TableName1</i></p>
<p class=indent>
Specifies the name of the table to create. The TABLE and DBF options are identical.</p>
<p class=dt>
NAME <i>LongTableName</i></p>
<p class=indent>
Specifies a long name for the table. A long table name can be specified only when a database is open because long table names are stored in databases.</p>
<p class=tl>
Long names can contain up to 128 characters and can be used in place of short file names in the database.</P><p class=dt>
FREE</p>
<p class=indent>
Specifies that the table will not be added to an open database. FREE isn't required if a database isn't open.</p>
<p class=dt>
<i>(FieldName1 FieldType</i> [(<i>nFieldWidth</i> [, <i>nPrecision</i>])]</p>
<p class=indent>
Specifies the field name, field type, field width, and field precision (number of decimal places), respectively.</p>
<p class=tl>
A single table can contain up to 255 fields. If one or more fields allow null values, the limit is reduced by one to 254 fields.</P><p class=tl>
<i>FieldType</i> is a single letter indicating the field's data type. Some field data types require that you specify <i>nFieldWidth</i> or <i>nPrecision,</i> or both.</P><p class=tl>
The following table lists the values for <i>FieldType</i> and whether <i>nFieldWidth</i> and <i>nPrecision</i> are required.</P><table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><i>FieldType</i></td>
<td class=label width=20%><i>nFieldWidth</i><b> </b></td>
<td class=label width=20%><i>nPrecision</i></td>
<td class=label width=40%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%>C</td>
<td width=20%>n</td>
<td width=20%>–</td>
<td width=40%>Character field of width <i>n</i></td>
</tr>
<tr valign=top>
<td width=20%>D</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Date</td>
</tr>
<tr valign=top>
<td width=20%>T</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>DateTime</td>
</tr>
<tr valign=top>
<td width=20%>N</td>
<td width=20%>n</td>
<td width=20%>d</td>
<td width=40%>Numeric field of width <i>n</i> with <i>d</i> decimal places</td>
</tr>
<tr valign=top>
<td width=20%>F</td>
<td width=20%>n</td>
<td width=20%>d</td>
<td width=40%>Floating numeric field of width <i>n</i> with <i>d</i> decimal places</td>
</tr>
<tr valign=top>
<td width=20%>I</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Integer</td>
</tr>
<tr valign=top>
<td width=20%>B</td>
<td width=20%>–</td>
<td width=20%>d</td>
<td width=40%>Double </td>
</tr>
<tr valign=top>
<td width=20%>Y</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Currency</td>
</tr>
<tr valign=top>
<td width=20%>L</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Logical</td>
</tr>
<tr valign=top>
<td width=20%>M</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Memo</td>
</tr>
<tr valign=top>
<td width=20%>G</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>General</td>
</tr>
</table><br>
<p class=tl>
<i>nFieldWidth</i> and <i>nPrecision</i> are ignored for D, T, I, Y, L, M, G, and P types. <i>nPrecision</i> defaults to zero (no decimal places) if <i>nPrecision</i> isn't included for the N or F types. <i>nPrecision</i> defaults to the number of decimal places specified by the SET DECIMAL setting if <i>nPrecision</i> isn't included for the B type.</P><p class=dt>
NULL</p>
<p class=indent>
Allows null values in the field. If one or more fields can contain null values, the maximum number of fields the table can contain is reduced by one, from 255 to 254.</p>
<p class=dt>
NOT NULL</p>
<p class=indent>
Prevents null values in the field.</p>
<p class=tl>
If you omit NULL and NOT NULL, the current setting of SET NULL determines if null values are allowed in the field. However, if you omit NULL and NOT NULL and include the PRIMARY KEY or UNIQUE clause, the current setting of SET NULL is ignored and the field defaults to NOT NULL.</P><p class=dt>
CHECK <i>lExpression1</i></p>
<p class=indent>
Specifies a validation rule for the field. <i>lExpression1</i> can be a user-defined function. Note that when a blank record is appended, the validation rule is checked. An error is generated if the validation rule doesn't allow for a blank field value in an appended record.</p>
<p class=dt>
ERROR <i>cMessageText1</i></p>
<p class=indent>
Specifies the error message Visual FoxPro displays when the validation rule specified with CHECK generates an error. The message is displayed only when data is changed within a Browse window or Edit window.</p>
<p class=dt>
DEFAULT <i>eExpression1</i></p>
<p class=indent>
Specifies a default value for the field. The data type of <i>eExpression1</i>must be the same as the field's data type.</p>
<p class=dt>
PRIMARY KEY</p>
<p class=indent>
Creates a primary index for the field. The primary index tag has the same name as the field.</p>
<p class=dt>
UNIQUE</p>
<p class=indent>
Creates a candidate index for the field. The candidate index tag has the same name as the field. For more information about candidate indexes, see "Using Indexes" in Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, in the <i>Programmer's Guide</i>.</p>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Candidate indexes (created by including the UNIQUE option in CREATE TABLE or ALTER TABLE – SQL) are not the same as indexes created with the UNIQUE option in the INDEX command. An index created with the UNIQUE option in the INDEX command allows duplicate index keys; candidate indexes do not allow duplicate index keys. See <a href="lngindex.htm">INDEX</a> for additional information on its UNIQUE option.</p><p class=tl>
Null values and duplicate records are not permitted in a field used for a primary or candidate index. However, Visual FoxPro will not generate an error if you create a primary or candidate index for a field that supports null values. Visual FoxPro will generate an error if you attempt to enter a null or duplicate value into a field used for a primary or candidate index.</P><p class=dt>
REFERENCES <i>TableName2</i> [TAG <i>TagName1</i>]</p>
<p class=indent>
Specifies the parent table to which a persistent relationship is established. If you omit TAG <i>TagName1</i>, the relationship is established using the primary index key of the parent table. If the parent table does not have a primary index, Visual FoxPro generates an error.</p>
<p class=tl>
Include TAG <i>TagName1</i> to establish a relation based on an existing index tag for the parent table. Index tag names can contain up to 10 characters.</P><p class=tl>
The parent table cannot be a free table.</P><p class=dt>
NOCPTRANS</p>
<p class=indent>
Prevents translation to a different code page for character and memo fields. If the table is converted to another code page, the fields for which NOCPTRANS has been specified are not translated. NOCPTRANS can only be specified for character and memo fields.</p>
<p class=tl>
The following example creates a table named MYTABLE containing two character fields and two memo fields. The second character field CHAR2 and the second memo field MEMO2 include NOCPTRANS to prevent translation.</P><pre><code>CREATE TABLE mytable (char1 C(10), char2 C(10) NOCPTRANS,;
 &nbsp; memo1 M, memo2 M NOCPTRANS)
</code></pre>
<p class=dt>
PRIMARY KEY <i>eExpression2</i> TAG <i>TagName2</i></p>
<p class=indent>
Specifies a primary index to create. <i>eExpression2</i> specifies any field or combination of fields in the table. TAG <i>TagName2 s</i>pecifies the name for the primary index tag that is created. Index tag names can contain up to 10 characters.</p>
<p class=tl>
Because a table can have only one primary index, you cannot include this clause if you have already created a primary index for a field. Visual FoxPro generates an error if you include more than one PRIMARY KEY clause in CREATE TABLE.</P><p class=dt>
UNIQUE <i>eExpression3</i> TAG <i>TagName3</i></p>
<p class=indent>
Creates a candidate index. <i>eExpression3</i> specifies any field or combination of fields in the table. However, if you have created a primary index with one of the PRIMARY KEY options, you cannot include the field that was specified for the primary index. TAG <i>TagName3 s</i>pecifies a tag name for the candidate index tag that is created. Index tag names can contain up to 10 characters.</p>
<p class=tl>
A table can have multiple candidate indexes.</P><p class=dt>
FOREIGN KEY <i>eExpression4</i> TAG <i>TagName4</i> [NODUP]</p>
<p class=indent>
Creates a foreign (non-primary) index, and establishes a relationship to a parent table. <i>eExpression4</i> specifies the foreign index key expression and <i>TagName4</i> specifies the name of the foreign index key tag that is created<i>.</i> Index tag names can contain up to 10 characters. Include NODUP to create a candidate foreign index.</p>
<p class=tl>
You can create multiple foreign indexes for the table, but the foreign index expressions must specify different fields in the table.</P><p class=dt>
REFERENCES <i>TableName3</i> [TAG <i>TagName5</i>]</p>
<p class=indent>
Specifies the parent table to which a persistent relationship is established. Include TAG <i>TagName5</i> to establish a relation based on an index tag for the parent table. Index tag names can contain up to 10 characters. If you omit TAG <i>TagName5,</i> the relationship is established using the parent table's primary index key by default.</p>
<p class=dt>
CHECK <i>eExpression2</i> [ERROR <i>cMessageText2</i>]</p>
<p class=indent>
Specifies the table validation rule. ERROR <i>cMessageText2</i> specifies the error message Visual FoxPro displays when the table validation rule is executed. The message is displayed only when data is changed within a Browse window or Edit window.</p>
<p class=dt>
FROM ARRAY <i>ArrayName</i></p>
<p class=indent>
Specifies the name of an existing array whose contents are the name, type, precision, and scale for each field in the table. The contents of the array can be defined with the AFIELDS(&nbsp;) function.</p>
<p class=label>
<b>Remarks</b></p>
<p>
The new table is opened in the lowest available work area, and can be accessed by its alias. The new table is opened exclusively, regardless of the current setting of SET EXCLUSIVE.</p>
<p>
If a database is open and you don't include the FREE clause, the new table is added to the database. You cannot create a new table with the same name as a table in the database.</p>
<p>
If a database isn't open when you create the new table, including the NAME, CHECK, DEFAULT, FOREIGN KEY, PRIMARY KEY, or REFERENCES clauses generates an error.</p>
<p>
Note that the CREATE TABLE syntax uses commas to separate certain CREATE TABLE options. Also, the NULL, NOT NULL, CHECK, DEFAULT, PRIMARY KEY and UNIQUE clause must be placed within the parentheses containing the column definitions.</p>
</BODY>
</HTML>

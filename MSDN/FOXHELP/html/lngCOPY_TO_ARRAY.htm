<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COPY TO ARRAY Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngcopy_to_array"></a><sup></sup>COPY TO ARRAY Command</h1>
<p>
<a href="lngcopy_to_arrayx.htm">Example</a> &nbsp; <a href="lngcopy_to_arraysa.htm">See Also</a></p>
<p>
Copies data from the currently selected table to an array.</p>
<p class=label>
<b>Syntax</b></p>
<p>
COPY TO ARRAY <i>ArrayName</i><br>
 &nbsp; [FIELDS <i>FieldList</i><br>
 &nbsp; | FIELDS LIKE <i>Skeleton</i><br>
 &nbsp; | FIELDS EXCEPT <i>Skeleton</i>]<br>
 &nbsp; [<i>Scope</i>] [FOR <i>lExpression1</i>] [WHILE <i>lExpression2</i>]<br>
 &nbsp; [NOOPTIMIZE]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>ArrayName</i></p>
<p class=indent>
Specifies the array to which data from the table is copied.</p>
<p class=dt>
FIELDS <i>FieldList</i></p>
<p class=indent>
Specifies that only the fields specified in <i>FieldList</i> are copied to the array. If you omit FIELDS <i>FieldList</i>, all fields are copied to the array if the array has enough columns.</p>
<p class=dt>
FIELDS LIKE <i>Skeleton</i></p>
<p class=indent>
Specifies that fields that match the field skeleton <i>Skeleton</i> are copied to the array.</p>
<p class=dt>
FIELDS EXCEPT <i>Skeleton</i></p>
<p class=indent>
Specifies that all fields except those that match the field skeleton <i>Skeleton</i> are copied to the array.</p>
<p class=tl>
The field skeleton <i>Skeleton</i> supports wildcards. For example, to specify that all fields that begin with the letters A and P are copied to the array, use the following:</P><pre><code>COPY TO ARRAY aMyArray FIELDS LIKE A*,P*
</code></pre>
<p class=tl>
The LIKE clause can be combined with the EXCEPT clause:</P><pre><code>COPY TO ARRAY aMyArray FIELDS LIKE A*,P* EXCEPT PARTNO*
</code></pre>
<p class=dt>
<i>Scope</i></p>
<p class=indent>
Specifies a range of records copied to the array. Only the records within the range are copied. The scope clauses are: ALL, NEXT <i>nRecords</i>, RECORD <i>nRecordNumber</i>, and REST. </p>
<p class=tl>
For more information on scope clauses, see the <a href="tblscope_clauses.htm">Scope Clauses</a> online topic.</P><p class=tl>
The default scope for COPY TO ARRAY is ALL records.</P><p class=dt>
FOR <i>lExpression1</i></p>
<p class=indent>
Specifies that only the records that satisfy the logical condition <i>lExpression1</i> are copied to the array. Including FOR lets you conditionally copy records to the array, filtering out undesired records.</p>
<p class=tl>
Rushmore optimizes a COPY TO ARRAY query that includes FOR <i>lExpression1</i> if <i>lExpression1</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR clause. </P><p class=tl>
For information on Rushmore optimizable expressions, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
WHILE <i>lExpression2</i></p>
<p class=indent>
Specifies a condition whereby records are copied to the array as long as the logical expression <i>lExpression2</i> evaluates to true (.T.).</p>
<p class=dt>
NOOPTIMIZE</p>
<p class=indent>
Disables Rushmore optimization of COPY TO ARRAY. For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
COPY TO ARRAY and SCATTER are similar. COPY TO ARRAY copies multiple records to an array while SCATTER copies just one record into an array or a set of memory variables. Both COPY TO ARRAY and SCATTER create a new array if an array with the name you specify doesn't exist.</p>
<p>
To copy a single record to an array you can specify a one-dimensional array. The one-dimensional array you specify should have the same number of elements as fields in the table, not counting memo fields. Memo fields are ignored in COPY TO ARRAY.</p>
<p>
If you specify a one-dimensional array, the first field of a record is stored to the first element of the array, the second field is stored to the second element of the array, and so on. If the one-dimensional array has more elements than the table has fields, any remaining elements remain unchanged. If the array has fewer elements than the table has fields, any remaining fields are ignored.</p>
<p>
To copy multiple records or an entire table to an array, specify a two-dimensional array. The number of rows in the array is the number of records the array can hold, and the number of columns in the array is the number of fields the array can hold.</p>
<p>
Each record is stored in one row of the array, and each field of the record is stored in one column of the array. For each record, the first field is stored to the first column of the array, the second field is stored to the second column of the array, and so on. If the array has more columns than the table has fields, any remaining columns aren't changed. If the array has fewer columns than the table has fields, any remaining fields aren't stored to the array.</p>
<p>
Each successive row in the array is filled with the contents of the next record in the table. If the array has more rows than the table has records, any remaining rows aren't changed. If the array has fewer rows than the table has records, any remaining records aren't stored to the array.</p>
<p>
Data can be copied from arrays to new table records with APPEND FROM ARRAY. Data can also be copied from either an array or a set of memory variables to records in a table with GATHER.</p>
</BODY>
</HTML>

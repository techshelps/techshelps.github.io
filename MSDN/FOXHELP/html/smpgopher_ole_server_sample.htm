<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Gopher: An Automation server Sample</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="smpgopher_ole_server_sample"></a>Gopher Automation server Sample</h1>
<p>
This example simulates a smart search business object which locates a customer that may be contained in one of many different databases. What actually happens is that code in the BeforeOpenTables event of the data environment creates an object based on the gopher class and prompts a user for the database to use. Code in the gopher class opens the appropriate database. This strategy allows us to use Visual FoxPro in a 3-tiered model where user services are not tightly bound to data services as is the case in many of today's client-server environments.</p>
<p>
While this example only provides a choice between the Visual FoxPro TESTDATA and Tastrade sample databases, you can use this basic approach to provide a smart search business object which knows how and where to look across a corporate network for necessary databases.</p>
<p class=label>
<b>To open the project for the gopher sample</b>
<ul type=disc>
<li>
Type the following in the <b>Command</b> window:<pre><code>MODIFY PROJECT (HOME(2) + 'servers\gopher\foxsrch')
</code></pre>
</li>
</ul>
<p class=label>
<b>To run the gopher sample</b>
<ol>
<li>
Open the Foxsrch.pjx project in the Visual Studio …\Samples\Vfp98\Servers\Gopher folder.<br><br></li>
<li>
Select Srchdata.prg in the Project Manager and choose <b>Modify</b>.<br><br></li>
<li>
Change the following line so that FOXHOME is defined to reflect your Visual FoxPro samples folder:<pre><code>#DEFINE FOXHOME HOME(2)
</code></pre>
</li>
<li>
Save and close Srchdata.prg.<br><br></li>
<li>
In the Project Manager, choose <b>Build</b>.<br><br></li>
<li>
In the <b>Build Options</b> dialog box, select <b>Build Executable</b> and choose <b>OK</b> to create Foxsearch.exe. The server is registered when you build the executable file.<br><br></li>
<li>
Run Wing1.scx in the Visual Studio …\Samples\Vfp98\Servers\Gopher folder.</li>
</ol>
<p>
The following code is included in the BeforeOpenTables event of the Data Environment in Wing1.scx:</p>
<pre><code>LOCAL oGopher,lUseRemote
THIS.AddObject('cursor1','cursor')
THIS.cursor1.Alias = 'employee'
lUseRemote=(MESSAGEBOX('Do you want to use Remote Data?',36) = 6)

oGopher=CreateObject('FoxSearch.Gopher')
oGopher.UpdateDE(THIS,m.lUseRemote)
RELEASE oGopher
</code></pre>
<p>
The following code defines the Gopher class. The UpdateDE method takes an object reference to a data environment and a logical value as parameters. Based on the value of the logical value, the UpdateDE method sets different CursorSource values for a cursor in the data environment.</p>
<pre><code>#DEFINE FOXHOME&nbsp;&nbsp; HOME(2)

DEFINE CLASS Gopher AS Custom OLEPUBLIC
oDERef = ''

PROCEDURE UpdateDE
 &nbsp; PARAMETER oNewDE,lRemote
 &nbsp; IF TYPE('oNewDE')#'O' OR ISNULL(m.oNewDE)
 &nbsp;&nbsp;&nbsp;&nbsp; RETURN .F.
 &nbsp; ENDIF
 &nbsp; THIS.oDERef = m.oNewDE

 &nbsp; IF !m.lRemote
 &nbsp; * Use local data
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.oDERef.cursor1.database = FOXHOME + 'DATA\TESTDATA.DBC'
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.oDERef.cursor1.cursorsource = 'Employee'
 &nbsp; ELSE
 &nbsp; * Use remote data (simiulated)
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.oDERef.cursor1.database = FOXHOME + ;
 &nbsp;&nbsp;&nbsp;&nbsp; 'Tastrade\DATA\Tastrade.DBC'
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.oDERef.cursor1.cursorsource = 'Employee'
 &nbsp; ENDIF
 &nbsp; THIS.oDERef = ''
ENDPROC

ENDDEFINE
</code></pre>
</BODY>
</HTML>

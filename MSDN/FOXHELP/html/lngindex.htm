<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INDEX Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngindex"></a><sup></sup>INDEX Command</h1>
<p>
<a href="lngindexx.htm">Example</a> &nbsp; <a href="lngindexsa.htm">See Also</a></p>
<p>
Creates an index file to display and access table records in a logical order.</p>
<p class=label>
<b>Syntax</b></p>
<p>
INDEX ON <i>eExpression</i> TO <i>IDXFileName</i> | TAG <i>TagName</i> [OF <i>CDXFileName</i>]<br>
 &nbsp; [FOR <i>lExpression</i>]<br>
 &nbsp; [COMPACT]<br>
 &nbsp; [ASCENDING | DESCENDING]<br>
 &nbsp; [UNIQUE | CANDIDATE]<br>
 &nbsp; [ADDITIVE]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>eExpression</i></p>
<p class=indent>
Specifies an index expression that can include the name of a field or fields from the current table. An index key based on the index expression is created in the index file for each record in the table. Visual FoxPro uses these keys to display and access records in the table.</p>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Do not use a variable, an array element, or a field or field expression from a table in another work area for <i>eExpression</i>. If you access an index that contains a variable or field that no longer exists or cannot be located, Visual FoxPro generates an error message. Memo fields cannot be used alone in index file expressions; they must be combined with other character expressions.</p><p class=atl>
If you include a field prefaced by a table alias or work area letter in the index expression, Visual FoxPro generates an error message. Even though you can optimize FOR clauses with Rushmore technology if aliased fields are included, it is still highly recommended that you avoid using aliased fields when creating indexes. In several cases (USE&nbsp;...&nbsp;AGAIN, SQL queries, and so on), a different alias is automatically assigned to a table and the index might not be properly updated or used.</p><p class=atl>
For more information on Rushmore technology, see "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</p><p class=tl>
If you attempt to build an index with a key that varies in length, the key will be padded with spaces. Variable-length index keys aren't supported in Visual FoxPro.</P><p class=tl>
It is possible to create an index key with 0 length. For example, a 0-length index key is created when the index expression is a substring of an empty memo field. A 0-length index key generates an error message. When Visual FoxPro creates an index, it evaluates fields in the first record in the table. If a field is empty, it may be necessary to enter some temporary data in the field in the first record to prevent a 0-length index key.</P><p class=tl>
The length of an index key for an .idx index must be between 1 and 100 characters. The length of an index key for a .cdx index must be between 1 and 240 characters.</P><p class=dt>
TO <i>IDXFileName</i></p>
<p class=indent>
Creates an .idx index file. The index file is given the default extension .idx, which you can override by including a different extension or by changing the default index extension in the Visual FoxPro configuration file. Standard Windows rules for naming files, which include long file names, must be observed when creating index files.</p>
<p class=dt>
TAG <i>TagName</i> [OF <i>CDXFileName</i>]</p>
<p class=indent>
Creates a compound index file. A compound index file is a single index file that consists of any number of separate tags (index entries). Each tag is identified by its unique tag name. Tag names must begin with a letter or an underscore and can consist of any combination of up to 10 letters, digits, or underscores. The number of tags in a compound index file is limited only by available memory and disk space.</p>
<p class=tl>
Multiple-entry compound index files are always compact. It isn't necessary to include COMPACT when creating a compound index file. Names of compound index files are given a .cdx extension.</P><p class=tl>
Two types of compound index files can be created: structural and non-structural.</P><p class=tl>
If you exclude the optional OF <i>CDXFileName</i> clause from TAG <i>TagName</i>, you create a <i>structural compound index file</i>. A structural compound index file always has the same base name as the table and is automatically opened when the table is opened.</P><p class=tl>
If a table's structural compound index file cannot be located or is deleted or renamed, a dialog box appears when you try to open the table. If you choose the default Cancel push button, the table isn't opened. Choosing Ignore opens the table and removes the flag in the table's header that indicates an associated structural compound index file is present.</P><p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To reassociate a structural compound index that has become dissociated from its table, issue the following command:</p><pre><code>USE TableName INDEX CDXFileName
</code></pre>
<p class=tl>
If you include the optional OF <i>CDXFileName</i> clause after TAG <i>TagName, </i>you create a <i>non-structural compound index file</i>. Unlike a structural compound index file, a non-structural compound index file must be explicitly opened with SET INDEX or the INDEX clause in USE.</P><p class=tl>
If a compound index file has already been created and opened, issuing INDEX with TAG <i>TagName</i> adds a tag to the compound index file.</P><p class=tl>
<i>CDXFileName</i> is the name of the dissociated structural compound index. Be sure to reindex the table if it has been modified since the structural compound index was dissociated.</P><p class=dt>
FOR <i>lExpression</i></p>
<p class=indent>
Specifies a condition whereby only records that satisfy the filter expression <i>lExpression</i> are available for display and access; index keys are created in the index file for just those records matching the filter expression.</p>
<p class=tl>
Rushmore optimizes an INDEX&nbsp;...&nbsp;FOR <i>lExpression</i> command if <i>lExpression</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR clause.</P><p class=tl>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
COMPACT</p>
<p class=indent>
Creates a compact .idx file.</p>
<p class=dt>
ASCENDING</p>
<p class=indent>
Specifies an ascending order for the .cdx file. By default, .cdx tags are created in ascending order (you can include ASCENDING as a reminder of the index file's order). A table can be indexed in reverse order by including DESCENDING.</p>
<p class=dt>
DESCENDING</p>
<p class=indent>
Specifies a descending order for the .cdx file. You can't include DESCENDING when creating .idx index files. You can, however, specify a descending order for an .idx index file with SET INDEX and SET ORDER.</p>
<p class=dt>
UNIQUE</p>
<p class=indent>
Specifies that only the first record encountered with a particular index key value is included in an .idx file or a .cdx tag. UNIQUE can be used to prevent the display of or access to duplicate records. All records added with duplicate index keys are excluded from the index file. Using the UNIQUE option of INDEX is identical to executing SET UNIQUE ON before issuing INDEX or REINDEX.</p>
<p class=tl>
When a UNIQUE index or index tag is active and a duplicate record is changed in a manner that changes its index key, the index or index tag is updated. However, the next duplicate record with the original index key cannot be accessed or displayed until you reindex the file using REINDEX.</P><p class=dt>
CANDIDATE</p>
<p class=indent>
Creates a candidate structural index tag. The CANDIDATE keyword can be included only when creating a structural index tag; otherwise Visual FoxPro generates an error message.</p>
<p class=tl>
A candidate index tag prevents duplicate values in the field or combination of fields specified in the index expression <i>eExpression</i>. The term "candidate" refers to the type of index; because candidate indexes prevent duplicate values, they qualify as a "candidate" to be a primary index.</P><p class=tl>
Visual FoxPro generates an error if you create a candidate index tag for a field or combination of fields that already contain duplicate values.</P><p class=tl>
For additional information about candidate and primary index tags, see "Setting a Primary or Candidate Index" in Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
ADDITIVE</p>
<p class=indent>
Keeps open any previously opened index files. If you omit the ADDITIVE clause when you create an index file or files for a table with INDEX, any previously opened index files (except the structural compound index) are closed.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Records in a table that has an index file are displayed and accessed in the order specified by the index expression. The physical order of the records in the table isn't changed by an index file.</p>
<p>
If SET TALK is ON, Visual FoxPro reports how many records are indexed during the indexing process. The record interval displayed during indexing can be specified with SET ODOMETER.</p>
<p>
Use DISPLAY STATUS to display more information about open index files. This information includes the names of all open index files, their types (structural, .cdx, .idx), their index expressions, their collation sequences, and the name of the master index file or master tag.</p>
<p>
The number of index files (.idx or .cdx) you can open is limited only by memory and system resources. In Visual FoxPro, FoxPro for Windows, and FoxPro for MS-DOS, the total number of files you can open is determined by the FILES setting in the MS-DOS Config.sys configuration file. For more information on the FILES setting, see your MS-DOS manual.</p>
<p>
<b>Index Types</b>&nbsp;&nbsp;&nbsp;Visual FoxPro lets you create two types of index files:
<ul type=disc>
<li>
Compound .cdx index files containing multiple index entries called tags.<br><br></li>
<li>
.idx index files containing one index entry.</li>
</ul>
<p>
You can also create a structural compound index file, which is automatically opened with the table.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Because structural compound index files are automatically opened when the table is opened, they are the preferred index type.</p>
<p>
Include COMPACT to create compact .idx index files. Compound index files are always compact.</p>
<p>
<b>Index Order and Updating</b>&nbsp;&nbsp;&nbsp;Only one index file (the master index file) or tag (the master tag) controls the order in which the table is displayed or accessed. Certain commands (SEEK, for example) use the master index file or tag to search for records. However, all open .idx and .cdx index files are updated as changes are made to the table. You can designate the master index file or tag with the INDEX clause of USE or with SET INDEX and SET ORDER.</p>
<p>
<b>User-Defined Functions</b>&nbsp;&nbsp;&nbsp;Although an index expression can contain a user-defined function, you should not use user-defined functions in an index expression. User-defined functions in an index expression increase the time it takes to create or update the index. Also, index updates may not occur when a user-defined function is used for an index expression.</p>
<p>
If you use a user-defined function in an index expression, Visual FoxPro must be able to locate the user-defined function. When Visual FoxPro creates an index, the index expression is saved in the index file, but only a reference to the user-defined function is included in the index expression.</p>
</BODY>
</HTML>

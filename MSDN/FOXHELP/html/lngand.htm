<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>&amp; Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngand"></a><sup></sup>&amp; Command</h1>
<p>
<a href="lngandx.htm">Example</a> &nbsp; <a href="lngandsa.htm">See Also</a></p>
<p>
Performs macro substitution.</p>
<p class=label>
<b>Syntax</b></p>
<p>
&amp; <i>VarName</i>[.<i>cExpression</i>]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
&amp; <i>VarName</i></p>
<p class=indent>
Specifies the name of the variable or array element to reference in the macro substitution. Do not include the M. prefix that distinguishes variables from fields. Such inclusion causes a syntax error. The macro should not exceed the maximum statement length permitted in Visual FoxPro.</p>
<p class=tl>
A variable cannot reference itself recursively in macro substitution. For example, the following generates an error message:</P><pre><code>STORE '&amp;gcX' TO gcX
? &amp;gcX
</code></pre>
<p class=tl>
Macro substitution statements that appear in DO WHILE, FOR, and SCAN are evaluated only at the start of the loop and are not reevaluated on subsequent iterations. Any changes to the variable or array element that occur within the loop are not recognized.</P><p class=dt>
.<i>cExpression</i></p>
<p class=indent>
The optional period (.) delimiter and .<i>cExpression</i> are used to append additional characters to a macro. <i>cExpression</i> appended to the macro with .<i>cExpression</i> can also be a macro. If <i>cExpression</i> is a property name, include an extra period (<i>cExpression</i>..<i>PropertyName</i>).</p>
<p class=label>
<b>Remarks</b></p>
<p>
Macro substitution treats the contents of a variable or array element as a character string literal. When an ampersand (&amp;) precedes a character-type variable or array element, the contents of the variable or element replace the macro reference. You can use macro substitution in any command or function that accepts a character string literal.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Whenever possible, use a name expression instead of macro substitution. A name expression operates like macro substitution. However, a name expression is limited to passing character strings as names. Use a name expression for significantly faster processing if a command or function accepts a name (a file name, window name, menu name, and so on).</p>
<p class=indent>
For additional information on name expressions, see <a href="lngoverview_of_the_language.htm">Overview of the Language</a>.</p>
<p>
While the following commands are acceptable:</p>
<pre><code>STORE 'customer' TO gcTableName
STORE 'company'&nbsp; TO gcTagName
USE &amp;gcTableName ORDER &amp;gcTagName
</code></pre>
<p>
use a name expression instead:</p>
<pre><code>USE (gcTableName) ORDER (gcTagName)
</code></pre>
<p>
Macro substitution is useful for substituting a keyword in a command. In the following example, the TALK setting is saved to a variable so the setting can be restored later in the program. The original TALK setting is restored with macro substitution.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CREATEOBJECT( ) Function</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngcreateobjectlp_rp"></a><sup></sup>CREATEOBJECT(&nbsp;) Function</h1>
<p>
<a href="lngcreateobjectlp_rpx.htm">Example</a> &nbsp; <a href="lngcreateobjectlp_rpsa.htm">See Also</a></p>
<p>
Creates an object from a class definition or an Automation-enabled application.</p>
<p class=label>
<b>Syntax</b></p>
<p>
CREATEOBJECT(<i>ClassName</i> [, <i>eParameter1</i>, <i>eParameter2</i>, ...])</p>
<p class=label>
<b>Returns</b></p>
<p>
Object</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>ClassName</i></p>
<p class=indent>
Specifies the class or OLE object from which the new object is created. Visual FoxPro searches for the class or OLE object in the following order:
<ol>
<li>
Visual FoxPro base classes.<br><br></li>
<li>
User-defined class definitions in memory in the order they were loaded.<br><br></li>
<li>
Classes in the current program.<br><br></li>
<li>
Classes in .vcx class libraries opened with SET CLASSLIB.<br><br></li>
<li>
Classes in procedure files opened with SET PROCEDURE.<br><br></li>
<li>
Classes in the Visual FoxPro program execution chain.<br><br></li>
<li>
The OLE registry if SET OLEOBJECT is ON.<p class=tl>
OLE objects are created using the following syntax for <i>ClassName</i>:</P><pre><code>ApplicationName.Class
</code></pre>
<p class=tl>
For example, to create a Microsoft Excel worksheet (which supports Automation), you can use the following syntax:</P><pre><code>x = CREATEOBJECT('Excel.Sheet')
</code></pre>
<p class=tl>
When this code is run, Microsoft Excel is started (if not already running), and a new worksheet is created.</P><p class=tl>
A class library can have an alias. To specify an object in a class library with an alias, include the class library alias followed by a period and the object name.</P><p class=tl>
Note that <i>ClassName</i> cannot be the Visual FoxPro OLE Container control base class.</P></li>
</ol>
<p class=dt>
<i>eParameter1</i>, <i>eParameter2, ...</i></p>
<p class=indent>
These optional parameters are used to pass values to the Init event procedure for the class. The Init event is executed when you issue CREATEOBJECT(&nbsp;) and allows you to initialize the object.</p>
<p class=label>
<b>Remarks</b></p>
<p>
Use CREATEOBJECT(&nbsp;) to create an object from a class definition or an application that supports Automation, and assign a reference to the object to a system variable or array element.</p>
<p>
Before you can create an object from a user-defined class, the user-defined class must first be created with DEFINE CLASS, or it must be available in a .vcx visual class library opened with SET CLASSLIB.</p>
<p>
Use = or STORE to assign a reference to the object to a system variable or array element. If an object assigned to a system variable or array element is released, the system variable or array element contains the null value. Use RELEASE to remove the system variable or array element from memory.</p>
</BODY>
</HTML>

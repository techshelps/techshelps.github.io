<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing Applications Using the Application Framework</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="cmddeveloping_applications_with_framework"></a><sup></sup>Developing Applications Using the Application Framework</h1>
<p>
The Application Framework is designed, specifically, to include all necessary, and many optional, elements that make an application effective and pleasurable to use. Though the framework itself provides a great deal of flexibility and power to create applications the way that works best for you, this topic discusses the ways using the Application Wizard and the Application Builder ease your application development.</p>
<p>
This topic includes the following sections:</p>
<p>
<a href="#cmdstarting_with_the_idea">Starting with the Idea</a></p>
<p>
<a href="#cmdapplication_builder_adding_data">Adding Data</a></p>
<p>
<a href="#cmdapplication_builder_managing_documents">Managing Documents</a></p>
<p>
<a href="#cmdapplication_builder_describing_application_functionality">Describing Application Functionality</a></p>
<p>
<a href="#cmdapplication_builder_editing_menus">Editing Menus</a></p>
<p>
<a href="#cmdapplication_builder_customizing_the_application_framework">Customizing the Application Framework</a></p>
<p>
<a href="#cmdapplication_builder_extending_application_development">Extending Application Development</a></p>
<p>
<a href="#cmdapplication_builder_behind_the_scenes">Behind the Scenes</a></p>

<h2><a name="cmdstarting_with_the_idea"></a>Starting with the Idea</h2>
<p>
After you run the Application Wizard you will have an open project containing a number of files that comprise the application framework. The framework manages the following tasks for you:
<ul type=disc>
<li>
Provides startup and cleanup routines including saving and restoring of the environment state.<br><br></li>
<li>
Displays menus and toolbars.<br><br></li>
<li>
Manages integration of your user-defined forms and reports.</li>
</ul>
<p>
The framework helps you answer questions about what your application does, how users input data, what kind of application the user sees, and how to add the greatest functionality.</p>
<h3>Step 1: What do you want your application to do?</h3>
<p>
Because data is a critical part of your application and can impact performance, it’s important to know about proper database design and optimizing techniques. Your datasources can be Visual FoxPro tables, or remote views to back-end hosts such as SQL Server. Also, you should consider issues presented by any multi-user requirements of your application .</p>
<p>
The Application Builder allows you to use your existing data, or generate a new database with template tables for your specific application needs. The <a href="#cmdapplication_builder_adding_data">Adding Data </a> topic describes how to integrate data in your application.</p>
<h3>Step 2: How will users input data?</h3>
<p>
Data input is the first activity performed with a database application, and you should decide how you want users to enter data. Typically, a data-input form is used for entering data. Because of potential conflicts when multiple users edit the same data, the most common continuing activity of your forms in multi-user environments is properly handling conflict resolution.</p>
<p>
You should choose the type of form that is appropriate for your application based on the structures of your data. You might have a simple datasource where a single table form is sufficient. Other situations may dictate using a more complex 1-to-Many form.</p>
<p>
The Application Builder provides program code to add existing or new forms for the application framework. The Builder also lets you control how these forms integrate with the application.</p>
<p>
See <a href="#cmdapplication_builder_managing_documents">Managing Documents</a> for more details on adding forms to your application.</p>
<h3>Step 3: How will data be reported?</h3>
<p>
In addition to input, your application must support display of data, often achieved through reports. Applications tend to be in one of two styles, input intensive or output intensive. Output-intensive applications often contain many reports and facilities for analyzing and manipulating data.</p>
<p>
See <a href="#cmdapplication_builder_managing_documents">Managing Documents</a> for more details on adding reports to your application.</p>
<h3>Step 4: What type of application do you want?</h3>
<p>
After you deal with the data specifics, you can choose a style for your application. The style or type you select depends on the context of your application. Your application can run as the sole application in the Visual FoxPro window, as part of another application, or as a top-level application without the Visual FoxPro desktop.</p>
<p>
Use options in the <a href="cmdgeneral_tab_application_builder.htm">General tab</a> of the Application Builder to specify whether your application is to be a Normal, Module, or Top-level application.
<ul type=disc>
<li>
<b>Normal</b> –the application runs entirely in the Visual FoxPro desktop. <br><br></li>
<li>
<b>Module</b> – the application runs as an add-on to an existing application. <br><br></li>
<li>
<b>Top-Level</b> – the application runs in the Windows environment.</li>
</ul>
<h3>Step 5: What common features do you want for your application?</h3>
<p>
Most Windows applications have several standard features, such as a Splash screen, About dialog box, a standard toolbar, and a Help file. In addition, some applications have a Quick Start dialog box, User Login dialog box, and a Favorites menu.</p>
<p>
The application framework supports these common application features and assists you in choosing which features you want. The <a href="cmdgeneral_tab_application_builder.htm">General tab</a> of the Application Builder lets you provide information such as credits and version information, which is used by some of these options.</p>
<h3>Step 6: How can you add more powerful features to the application?</h3>
<p>
By using exclusive features of the Application Builder, you can create a fully functional and useful application. The Application Builder leverages the power of several wizards including the Form Wizard, Report Wizard, Database Wizard, and Table Wizard to simplify this process without any additional coding required.</p>
<p>
You might want to extend functionality beyond the applications you can create with the Application Builder by using the <a href="dgapplication_development_and_developer_productivity.htm#newcomponent_gallery_overview">Component Gallery</a> and <a href="ffcvisual_foxpro_foundation_classes.htm">Foundation Classes</a>. Visual FoxPro ships with over 100 foundation classes you can use to easily add effective enhancements to your application. These include data lookup and query-by-form controls, web hyperlinks, navigation toolbars, special effects, and offline data handles. The Component Gallery also contains other useful components such as ActiveX controls and COM components for use with your application.</p>
<h3>Step 7: How do you build and package the application?</h3>
<p>
When you are ready to build and package your application, the Application Builder enables you to build, test, and modify the application at any time. Since the Application Builder is reentrant, you can easily update the original design and incorporate requests for added functionality.</p>
<p>
The <a href="wndproject_manager.htm">Project Manager</a> handles all necessary files during the build process. You can choose to either build an .exe or .app file. Usually, you will select the EXE option when you are ready to distribute to users because it uses the Visual FoxPro runtime files.</p>
<p>
The last step is to create a distributable application package using the <a href="wizsetup_wizard.htm">Setup Wizard</a>. To do this, create a new folder and place in it your .exe file, data files, and any other files not compiled into the .exe. When you run the Setup Wizard using this folder, it will create all the necessary files for distribution including any extra system files.</p>

<h2><a name="cmdapplication_builder_adding_data"></a>Adding Data</h2>
<p>
After you plan your application, you need to select the data sources you need in developing your application. You can use the Application Builder <a href="cmddata_tab_application_builder.htm">Data tab</a> to add databases and tables to your application and project.</p>
<h3>Adding data using the Data tab</h3>
<p>
If you already have existing data, you can use the Data tab to create a data environment for your application by adding free tables or tables from a database to the application. As soon as you specify a table, the Application Builder displays it in the grid and prepares to create both a form and a report for the table. At this point, you have selected only which data sources to include. They are not actually added to the framework until you select the <b>Generate</b> button. If you want to add only the data source and not have new forms or reports, uncheck the options next to the table entry. If you have a form or report check box marked when you click the Generate button, the appropriate wizard creates a new document for that datasource. You can select a visual style for these documents from the Style drop-down lists.</p>
<p>
You can later edit these documents in the Form tab or Report tab of the Application Builder. If you have datasources listed in the Data tab grid and you click the OK button to exit the Application Builder, Visual FoxPro prompts you to add the tables, forms and reports to your project and application. Clicking the Generate button performs the same function.</p>
<p>
The documents generated by the Application Builder contain all the fields for the selected datasource. If you want more control over the layout of your document, run the Form Wizard or Report Wizard directly from the <b>Wizards </b>menu and add the newly created document in the Form tab or Report tab. You can also add or edit forms or reports from the Application Builder.</p>
<p>
When you use the Application Builder to add data, it is marked in the project as <b>Excluded</b>, meaning that it is not bound into the built application. This enables you to edit the added table. A table built into an application is read-only and cannot be edited. If you want to <i>include</i> a table in the project and thereby make it read-only (for example, a special lookup table where data will not change), right-click on the table in the Project Manager and select the <b>Include</b> menu item.</p>
<h3>Creating data using the Data tab</h3>
<p>
You can also use the <a href="wizdatabase_wizard.htm">Database Wizard</a> or the <a href="wizdatabase_wizard.htm">Table Wizard</a> buttons on the Data tab to create new tables to add to the project and application. These wizards create new data structures for your application in the appropriate data folder and allow you to generate new documents in the same manner discussed previously.</p>
<p>
The basic documents that the Application Builder creates contain all fields in the tables on which they are based. These documents are excellent for basic data input and reporting, but you might want to create documents for other unique purposes in your application. The Form Wizard and Report Wizard offer more flexibility and the foundation classes included with the Component Gallery offer added functionality to forms and reports.</p>
<h3>Locating data</h3>
<p>
If you use the Application Builder to add data and documents to your application, data-binding is handled automatically. The Application Builder does, however, offer a <b>Default Data Directory</b> option on the <a href="cmdadvanced_tab_application_builder.htm">Advanced tab</a> if you are manually coding documents to bind to data and need the application framework to handle data path resolution. Use this setting to specify a folder that contains your datasources to provide appropriate path information for this data.</p>
<h3>Importing data</h3>
<p>
With many applications, you may already have data that you wish to use, but it's not necessarily in the proper format. It might be in plain text or spreadsheet format. In these cases, you can use the <a href="wizimport_wizard.htm">Import Wizard</a> to migrate your data into FoxPro tables. You can then easily add these tables to your application.</p>
<h3>Upsizing data</h3>
<p>
Visual FoxPro includes an upsizing wizards that allows you to move your FoxPro data to SQL Server or Oracle databases. If the demands of your application require use of one of these databases, you can easily migrate your existing data and still keep the application intact.</p>
<p>
The <a href="wizoracle_upsizing_wizard.htm">Oracle Upsizing Wizard</a> and <a href="wizsql_server_upsizing_wizard.htm">SQL Upsizing Wizard</a> provide an option that allows you to <b>Create remote views on tables</b>. If you select this option, the tables in your database will be changed to remote views. Since the documents (forms or reports) in your application are bound solely to the datasource name, you can still run your application, but the data being used will be SQL Server or Oracle data instead of FoxPro tables.</p>
<p>
If you have existing SQL Server or Oracle data that you want to use in your application, you can easily set up a Visual FoxPro database containing remote views pointing to these datasources. The application framework will handle these just like they were native FoxPro tables.</p>

<h2><a name="cmdapplication_builder_managing_documents"></a>Managing Documents</h2>
<p>
Once you have selected data sources, you need to plan and choose the documents that you want to add to your application. The Application Builder is particularly effective for this task since it not only adds the document to your project, but also integrates it with the framework. Because the framework uses extended document information stored in a meta-table, the Application Builder automatically handles this integration. The meta-table is stored in same folder as the application project and is given the same name as the project plus an “_app.dbf” suffix. The extended document information that is stored in the framework meta-table specifies the following:
<ul type=disc>
<li>
A friendly name to display in the <b>Open</b> or <b>New</b> dialog box.<br><br></li>
<li>
Whether a form appears in the <b>New</b> dialog box.<br><br></li>
<li>
Whether a form appears in the <b>Open</b> dialog box.<br><br></li>
<li>
Whether a form uses a navigation toolbar.<br><br></li>
<li>
Whether a form uses a navigation menu.<br><br></li>
<li>
Whether a form allows for opening of multiple instances.</li>
</ul>
<p>
You can have the builder automatically create new forms and reports when you add data to the application. These documents are generated from the associated wizards.</p>
<p>
Once a document has been added to the application framework, it will automatically appear in the Forms tab or Reports tab.</p>
<p>
When you open the Forms tab you will find a list that contains the forms you have already added to your application manually or from entries in the Data tab. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;It's possible that a form in your project does not appear in the Forms tab. This is because that form is not registered in the application meta-table. You can register it by choosing the form using the <b>Add</b> button on the <a href="cmdforms_tab_application_builder.htm">Forms tab</a> page. In addition, the <b>Cleanup</b> button on the <a href="cmdadvanced_tab_application_builder.htm">Advanced tab</a> will synchronize the documents in your project with those registered in the meta-table. You can also edit or remove any of these documents from the appropriate tab.</p>
<p class=label>
<b>To add documents in the Application Builder</b>
<ol>
<li>
Click the <b>Add</b> button on the appropriate document tab (Form or Report) and select a document. The application framework automatically handles a variety of document types. With forms, you can select a form (.scx) file, a form class from a class library, (.vcx), or a program (.prg) file that contains code that runs a form. With reports, you can choose a report (.frx) file, label (.lbx) file, or program (.prg) file that has code to run a report.<br><br></li>
<li>
Once you add the file to the document list, you can choose various settings in terms of how that document functions in the application. <p class=tl>
The <a href="cmdforms_tab_application_builder.htm">Forms tab</a> enables you to manage the following options:</P><ul type=disc>
<li>
The application's friendly name.<br><br></li>
<li>
Whether the application is limited to a single instance.<br><br></li>
<li>
Whether the application uses a navigation toolbar.<br><br></li>
<li>
Whether the application uses a navigation menu.<br><br></li>
<li>
Whether the form appears in the <b>New</b> dialog box.<br><br></li>
<li>
Whether the form appears in the <b>Open</b> dialog box.</li>
</ul>
<p class=tl>
The <a href="cmdreports_tab_application_builder.htm">Reports tab</a> enables you to manage the following options:</P><ul type=disc>
<li>
The application's friendly name.<br><br></li>
<li>
Whether your report appears in the <b>Print Reports</b> dialog box.</li>
</ul>
</li>
</ol>
<p class=label>
<b>To edit documents in the Application Builder</b>
<ul type=disc>
<li>
Open any listed form or report by highlighting the document and then clicking the <b>Edit</b> button. In the case of a form, you may be prompted with the following message:<p class=tl>
“Would you like to add a mediator object to this form to fully enable it for use with the application framework?”</P><p class=tl>
If you answer "Yes", the Application Builder adds to your form an object that automatically communicates directly with the application object used by the framework. This object provides additional functionality to forms in your application. For example, when you close a form, the object can detect if there is buffered data that has not been saved and prompt you to save changes. Also, the object will also differentiate between a form launched using the <b>New</b> dialog box versus the <b>Open</b> dialog box.</P><p class=tl>
In the designer, edit your document to your liking. You might want to use the Component Gallery to add a background or foundation class. You can use the Component Gallery to add special characteristics and functionality to your document.</P></li>
</ul>
<p class=label>
<b>To remove documents in the Application Builder</b>
<ul type=disc>
<li>
You can remove any document from the meta-table by highlighting the document and then clicking the <b>Remove</b> button. After the document is removed from your application, it remains in the project file.</li>
</ul>
<p class=indent>
<b>Important</b>&nbsp;&nbsp;&nbsp;Your application will run regardless of whether a form or report is stored in the meta-table. As long as you provide code that specifies how to run this document, the application will handle it just fine. The advantage of using the Application Builder is that you would not need to worry about the application handling running forms and reports. This is done automatically.</p>

<h2><a name="cmdapplication_builder_describing_application_functionality"></a>Describing Application Functionality</h2>
<p>
Before discussing the general options available for your Application, let’s take a quick look at how the application works:</p>
<p>
<b>Application Startup</b> – Applications often have a Splash screen that displays during startup, showing information about the application. The Application Builder controls both the screen itself and information contained within it.</p>
<p>
<b>User Login</b> - When the application first launches, it might prompt the user to enter a login id and password. You can set this option in the Application Builder.</p>
<p>
<b>Quick Start</b> – You might want to display a dialog box of available documents for the user to select from immediately after startup. You can set this option in the Application Builder. </p>
<p>
<b>Opening Forms</b> – One of the primary functions of a database application is data input. Visual FoxPro accomplishes this in forms. The application framework uses a metaphor similar to that of Microsoft Office where the application is document-centric. The application framework provides a standard File Open menu item that runs your form, displaying existing data from your datasource. The framework also provides a File New menu that displays a form containing a new (blank) record.</p>
<p class=indent>
<b>Important</b>&nbsp;&nbsp;&nbsp;If you are adding your own forms to the framework, you will need to manually specify the action of a form when launched from the File New menu. Forms generated by the Application Builder and Form Wizard automatically handle new record insertions for you.</p>
<p>
<b>Editing Records</b> – During an editing session, the application framework provides much of the common database functionality for you. If you attempt to close the application while a buffer contains unsaved data, the application will prompt you to save changes first. This functionality is handled when you attempt to close a form or application. There is also a Navigation toolbar and Go menu that lets you:
<ul type=disc>
<li>
Navigate between records.<br><br></li>
<li>
Search for a record.<br><br></li>
<li>
Sort records on a certain field (both ascending and descending).<br><br></li>
<li>
Filter the data set.</li>
</ul>
<p>
<b>Printing</b> – If you have an open data input form, you can select the <b>Print</b> menu option, which prompts you with a selection of output options for the current data source. These include the following:
<ul type=disc>
<li>
Print or Preview the list of data.<br><br></li>
<li>
Export to a new file format such as a Microsoft Excel worksheet (.xls) file, text (.txt) file, and so on.<br><br></li>
<li>
Output to HTML.</li>
</ul>
<p>
<b>Running Reports</b> – The <b>Print Reports</b> menu option displays a dialog box of available reports for you to run. Once you select a report, the output dialog box opens to provide the following options:
<ul type=disc>
<li>
Print or Preview the report.<br><br></li>
<li>
Output to a text file.<br><br></li>
<li>
Output to HTML.</li>
</ul>
<p>
<b>Favorites</b> – The application framework supports a <b>Favorites</b> menu common to many web applications today. Because you can have multiple users if you choose the <b>User Login</b> option, items that appear in the Favorites menu are context sensitive to the user. The Favorites menu can contain any common Visual FoxPro document such as a Form, Report, Label or Program file. In addition, you can also click on the <b>Browse</b> button to select other types of documents such as Word, Excel, and HTML files.</p>
<p>
<b>Miscellaneous</b> – The application framework also supports some common Windows application features. These include:
<ul type=disc>
<li>
A Window menu that lets you cascade and arrange your open windows.<br><br></li>
<li>
An About dialog box and Help file menu items. The contents of the About dialog box can be set in the Application Builder.<br><br></li>
<li>
An Options dialog box that lets a user configures the environment.<br><br></li>
<li>
The Visual FoxPro Macro recorder so the user can record commonly used tasks.<br><br></li>
<li>
Login and Change Password dialog boxes options.</li>
</ul>
<p>
<b>Application Maintenance and Debugging</b> – The framework detects whether the application is being run under the Visual FoxPro runtime version or full development version. If run under full development version, a <b>Program</b> menu is displayed for debugging purposes. The menu items include many of the common Visual FoxPro debugging tools such as <b>Debugger</b>, <b>Command</b> window, and <b>Class Browser</b>.</p>
<p>
The application also contains excellent error handling. The error handler writes details of the cause of the error and state of the application to a log table. The user can access the error log by choosing the <b>Error</b> log option of the application <b>Tools</b> menu.</p>
<p>
Here is a summary of the application contents provided through the menus:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Menu</b></td>
<td class=label width=78%><b>Options</b></td>
</tr>
<tr valign=top>
<td width=22%>File</td>
<td width=78%>New, Open, Close, Save, Revert, Print, Print Reports, Print Setup, Quick Start, User Login, and Exit</td>
</tr>
<tr valign=top>
<td width=22%>Edit</td>
<td width=78%>Undo, Redo, Cut, Copy, Paste, Clear, Select All, Find, Find Again, Replace</td>
</tr>
<tr valign=top>
<td width=22%>Tools</td>
<td width=78%>Macros, Error Logs, Options, Change Password</td>
</tr>
<tr valign=top>
<td width=22%>Program</td>
<td width=78%>Do, Cancel, Resume, Suspend, Compile, Debugger, Data Session, Command window, Class Browser</td>
</tr>
<tr valign=top>
<td width=22%>Favorites</td>
<td width=78%>Add to Favorites, Clear Favorites</td>
</tr>
<tr valign=top>
<td width=22%>Window</td>
<td width=78%>Cascade, Arrange All, Cycle</td>
</tr>
<tr valign=top>
<td width=22%>Help</td>
<td width=78%>Help, About</td>
</tr>
</table><br>

<h2><a name="cmdapplication_builder_editing_menus"></a>Editing Menus</h2>
<p>
The application framework is designed to run without any need for the user to ever modify a menu. The framework will choose the appropriate menu for your application based on the type selected: <b>Normal</b>, <b>Module</b>, or <b>Top-Level</b>. However, this should not prevent you from modifying any of these menus if your application needs demand more than what the default menu offers. The application framework will run the menu fine with your modifications.</p>

<h2><a name="cmdapplication_builder_customizing_the_application_framework"></a>Customizing the Application Framework</h2>
<p>
You can use the Application Builder <b>General</b>, <b>Credit</b>, and <b>Advanced</b> tabs to change characteristics of the application framework.</p>
<p>
Use the <a href="cmdgeneral_tab_application_builder.htm">General tab</a> to change common application settings such as friendly name, application image, application type, icon, common dialog boxes such as Splash screen, About, Quick Start, and User Login dialog boxes</p>
<p>
Use the <a href="cmdcredits_tab_application_builder.htm">Credits tab</a> to provide information that will appear in the Splash screen and About dialog box of your application. These settings, can include author and company name, application version, copyright, and trademark.</p>
<p>
Use the <a href="cmdadvanced_tab_application_builder.htm">Advanced tab</a> to specify a Help file and default data directory for your application. You can also choose to eliminate the standard toolbar and a Favorites menu from your application.</p>
<p>
It is important to remember that while the Application Builder is reentrant, changes made through the Builder will not appear in the application until it is rebuilt.</p>

<h2><a name="cmdapplication_builder_extending_application_development"></a>Extending Application Development</h2>
<p>
Once you have created your application, you can use it as is and distribute it if you like. You will often want to add a little extra spice to what is in the typical application. Visual FoxPro has a number of useful tools to assist in this process. These include:</p>
<p>
<a href="wizwizards_overview.htm">Wizards</a><br>
<a href="cmdbuilders_overview.htm">Builders</a><br>
<a href="cmdclass_browser_window.htm">Class Browser</a><br>
<a href="newcomponent_gallery_window.htm">Component Gallery</a><br>
<a href="ffcvisual_foxpro_foundation_classes.htm">Visual FoxPro Foundation Classes</a></p>
<p>
<b>Create a new form</b> – The Component Gallery contains a number of form templates in the Visual FoxPro catalog that let you select certain fields from a datasource. The template dialog box includes an option to have the generated form automatically added to your project. If you desire a more complex form such as a 1-to-Many form, choose the appropriate Form Wizard.</p>
<p>
<b>Add a hyperlink to a form</b> – The Visual FoxPro catalog contains a number of hyperlink classes in the <b>Internet</b> folder. You can select a hyperlink label, image or button. When you drag-and-drop the control onto a form, a builder opens prompting you for the caption and target URL. In addition, the Component Gallery includes a <b>WWW</b> catalog containing a variety of common web sites. If you find here a web site you like and for which you'd like&nbsp; to create a hyperlink, drag-and-drop that item to your form (or choose <b>Add to Form</b> from shortcut menu).</p>
<p>
<b>Add Wallpaper to your form</b> - The <b>Multimedia</b> catalog contains a number of images as well as access to the entire Visual Studio media gallery. With your form already open, create form wallpaper by right-clicking on the desired image then selecting <b>Select Form Wallpaper</b> from the shortcut menu. </p>
<p>
Alternatively, you can drag the image from the gallery and drop it on the form to create an Image control on your form.</p>
<p>
<b>Add an ActiveX control to your form</b> – The <b>ActiveX</b> catalog contains a list of all registered ActiveX controls. If the <b>Installed Controls</b> folder in your catalog is empty, click the <b>Installed Controls</b> item and, from the shortcut menu, select <b>Refresh Controls</b>. The <b>Property</b> dialog box for this item provides the option to refresh from all controls in your system, or only those registered in the Visual FoxPro <b>Options</b> dialog box.</p>
<p>
<b>Drop a data-bound grid to your form</b> – The Component Gallery let’s you create <b>Data</b> items in any catalog. A form displays a grid when you drag-and-drop one of these tables or views onto it. You can also try examples from the Testdata database in the <b>Visual FoxPro</b> catalog.</p>
<p>
<b>Add a video image to your report</b> – The Visual Studio media gallery in the <b>Multimedia</b> catalog contains a number of videos you might want to use in your application. You can simply drag-and-drop one of these files onto a form or you might add the Video Player class and select a video of your choosing.</p>
<p>
<b>Add a shortcut menu to your form</b> – The <b>Visual FoxPro </b>catalog contains several shortcut menu classes in the <b>Menus</b> folder. You can use the Navigation Shortcut Menu class on any form to add record navigation functionality. You can use the Shortcut Menu class to create any kind of shortcut menu.</p>
<p>
<b>Incorporate a thermometer to show progress of an activity</b> – The Thermometer form class in the <b>Dialogs</b> folder is similar to the common thermometer used internally by Visual FoxPro. You can use this class to show progress of an operation that takes some time to perform. </p>
<p>
<b>Create a new report</b> – The Component Gallery contains a number of report templates in the <b>Visual FoxPro</b> catalog that let you select certain fields from a datasource. The template dialog includes an option to automatically add the generated report to your project. The Report Wizards offer most options including summary and grouping features as well as support for percent-of-total type reports.</p>
<p>
<b>Add highlighting effects to your forms</b> – The MouseOverFx class can provide the raised-control look of Microsoft Office 97 toolbars to any form or toolbar.</p>
<p>
<b>Send email from a form button</b> – The MAPI ActiveX controls let you automate email to your clients. You can also use the Send Mail class in the <b>Buttons</b> catalog to send the current record to an email address.</p>
<p>
<b>Lookup information in the Registry</b> – Use the Registry classes in the <b>Utilities</b> catalog for accessing critical Registry information. For example, you might need to find an ODBC driver or shared tool.</p>
<p>
<b>Output data to Word Mail Merge</b> – The <b>Automation</b> catalog contains a Mail Merge class that is used by the <a href="wizmail_merge_wizard.htm">Mail Merge Wizard</a> to output data to Word as a Mail Merge document.</p>
<p>
<b>Create a Web Browser for your application</b> – The Web Browser control in the <b>Internet</b> catalog can be the basis for your Visual FoxPro Web Browser form. The control allows you to integrate Visual FoxPro code with browser interaction. For example, you can intercept or log (and optionally redirect) URL sites before navigation. Webvwr.scx in the Vfp98\Ffc folder illustrates how simple it is to create this type of form.</p>
<p>
<b>Add a data mover to your form</b> - The <b>User Controls</b> catalog contains an assortment of mover classes. A mover is a set of list boxes that enable you to move an item from one list box to another list box. With the data mover classes, you simply need to drop the class onto a form. These movers are similar to those used in the Visual FoxPro Wizards.</p>
<p>
<b>Output data to Excel Pivot Table</b> – The <b>Automation</b> catalog contains a Pivot Table class that is used in the <a href="wizpivottable_wizard.htm">PivotTable Wizard</a> to output data to Excel as a Pivot Table document.</p>
<p>
<b>Create data-bound charts</b> – Start with the Graph By Record class in the <b>Automation</b> catalog to bind your chart to data, record-by-record. This and the Graph class share the engine used by the <a href="wizgraph_wizard.htm">Graph Wizard</a>.</p>
<p>
<b>Add Web Publishing to your application</b> – The new Web Publishing Wizard and Genhtml engine provide HTML generation tools for data. The wizard, a friendly layer on Genhtml, lets you select a variety of data layout and visual style options. You can create dynamic output so that the HTML updates as data changes.</p>

<h2><a name="cmdapplication_builder_behind_the_scenes"></a>Behind the Scenes</h2>
<p>
This section describes the various files and classes used by the application framework to create a hypothetical application. You can skip this section if you do not plan to modify any of these classes. However, this section provides details of how your application works.</p>
<p>
The following table lists files created and/or used by the Application Wizard for an application named Wines that tracks a wine collection. The Application Wizard creates files using a naming convention that incorporates the name of the application, as shown below in the table.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Application file</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%>Wines.app</td>
<td width=61%>This is your application created from the Build dialog box.</td>
</tr>
<tr valign=top>
<td width=39%>Wines.pjx (pjt)</td>
<td width=61%>This is your project file.</td>
</tr>
<tr valign=top>
<td width=39%>Wines_app.dbf (fpt, cdx)</td>
<td width=61%>This is the meta-table which stores form and report information entered into the Application Builder.</td>
</tr>
<tr valign=top>
<td width=39%>Wines_app.h</td>
<td width=61%>This include file contains a number of settings controlling the application framework, each of which you can set.</td>
</tr>
<tr valign=top>
<td width=39%>Wines_app.log</td>
<td width=61%>This is a log file you can use to record changes during application development.</td>
</tr>
<tr valign=top>
<td width=39%>Appuser.dbf (fpt, cdx)</td>
<td width=61%>If you choose to include User Login dialog boxes, this file is created to store password and user preferences (option settings and favorites).</td>
</tr>
<tr valign=top>
<td width=39%>Config.fpw</td>
<td width=61%>Contains runtime startup settings including the ability to hide the Visual FoxPro desktop if the Top-Level form option is selected. </td>
</tr>
<tr valign=top>
<td width=39%>Libs\Wines_app.vcx (vct)</td>
<td width=61%>These are the classes used by your application. They are subclassed from the _framewk library enabling you to modify these at will. Avoid editing the classes in _FRAMEWK if possible.</td>
</tr>
<tr valign=top>
<td width=39%>Menus\Wines _main.mnx (mnt)</td>
<td width=61%>This menu is used when you set the application type to Normal.</td>
</tr>
<tr valign=top>
<td width=39%>Menus\Wines _go.mnx (mnt)</td>
<td width=61%>This is the navigation menu used by forms when the navigation menu option is checked in the Forms tab of the Application Builder.</td>
</tr>
<tr valign=top>
<td width=39%>Menus\Wines _top.mnx (mnt)</td>
<td width=61%>This menu is used when you set the application type to Top-Level.</td>
</tr>
<tr valign=top>
<td width=39%>Menus\Wines _append.mnx (mnt)</td>
<td width=61%>This menu is used when you set the application type to Module.</td>
</tr>
<tr valign=top>
<td width=39%>Progs\Wines_app.prg</td>
<td width=61%>This is the main program, the point from which an application starts. It performs the following functions: displays Splash screen, creates the application object, sets the application paths and settings, and starts the application.</td>
</tr>
<tr valign=top>
<td width=39%>…\Vfp\Wizards\_Framewk.vcx (vct)</td>
<td width=61%>The framework contains the core set of classes used by the application framework. These include common classes such as: splash and aboutbox dialog boxes, application object, userlogin, and standardtoolbar to name a few. Most of these classes are subclassed in the Wines_app.vcx library. If you make changes at all, change classes in Wines_app and not in _framewk. </td>
</tr>
<tr valign=top>
<td width=39%>…\Vfp\Ffc\_app.vcx (vct)</td>
<td width=61%>This foundation class library contains classes used to manage an application environment.</td>
</tr>
<tr valign=top>
<td width=39%>…\Vfp\Ffc\_base.vcx (vct)</td>
<td width=61%>This is the class library containing base classes that all foundation classes are subclassed from.</td>
</tr>
<tr valign=top>
<td width=39%>…\Vfp\Ffc\setobjrf.prg</td>
<td width=61%>This file is used internally by the classes in _base.</td>
</tr>
<tr valign=top>
<td width=39%>…\Vfp\Ffc\_reports.vcx (vct)</td>
<td width=61%>This foundation class library contains classes used to handle reporting and output.</td>
</tr>
<tr valign=top>
<td width=39%>…\Vfp\Ffc\_table.vcx (vct)</td>
<td width=61%>This foundation class library contains classes used to perform all data querying and navigation.</td>
</tr>
<tr valign=top>
<td width=39%>…\Vfp\FFC\_UI.VCX (VCT)</td>
<td width=61%>This foundation class library contains classes used to manage various user interface routines such as Windows management.</td>
</tr>
</table><br>
<p>
In this example, the class library in which you would most likely want to modify the application framework is Wines_app.vcx. Here is a list of the classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Application-specific class</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%>App_aboutbox</td>
<td width=61%>Provides an About dialog box.</td>
</tr>
<tr valign=top>
<td width=39%>App_application</td>
<td width=61%>Manages all operations and events in the application</td>
</tr>
<tr valign=top>
<td width=39%>App_changepassword</td>
<td width=61%>Provides a Password dialog box</td>
</tr>
<tr valign=top>
<td width=39%>App_errorlogviewer</td>
<td width=61%>Provides an Error Log dialog box</td>
</tr>
<tr valign=top>
<td width=39%>App_favoritepicker</td>
<td width=61%>Provides a Favorites menu and item picker</td>
</tr>
<tr valign=top>
<td width=39%>App_navtoolbar</td>
<td width=61%>Provides data Navigation toolbar functionality</td>
</tr>
<tr valign=top>
<td width=39%>App_newopen</td>
<td width=61%>Provides New and Open dialog box functionality</td>
</tr>
<tr valign=top>
<td width=39%>App_options</td>
<td width=61%>Provides an Options dialog box</td>
</tr>
<tr valign=top>
<td width=39%>App_reportpicker</td>
<td width=61%>Displays a dialog box to select reports for printing</td>
</tr>
<tr valign=top>
<td width=39%>App_splash</td>
<td width=61%>Provides an application Splash screen</td>
</tr>
<tr valign=top>
<td width=39%>App_standardtoolbar</td>
<td width=61%>Provides Standard toolbar functionality</td>
</tr>
<tr valign=top>
<td width=39%>App_topform</td>
<td width=61%>Provides a form frame object with menus for Top-Level applications</td>
</tr>
<tr valign=top>
<td width=39%>App_userlogin</td>
<td width=61%>Provides a User Login dialog box</td>
</tr>
</table><br>
<p>
These classes enable you to create or access supporting forms and dialog boxes in your application.</p>
<p>
Because the Application Wizard adds <a href="ffcvisual_foxpro_foundation_classes.htm">Visual FoxPro Foundation Classes</a> to your application project, you can also change the basis of the form and reports that comprise your application.</p>
<p>
You can use wizards to create new databases, tables, forms and reports for the project from which you create your application. You can use the Class Browser to subclass the classes from which your forms and other application objects and functionality are generated.</p>
</BODY>
</HTML>

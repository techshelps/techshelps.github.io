<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Server Upsizing Wizard: Step 4 - Database Device (SQL Server)</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><sup><a name="wizsql_server_upsizing_wizard_step_4"></a></sup>SQL Server Upsizing Wizard: Step 4 – Map Field Data Types</h1>
<p>
<a href="wizsql_server_upsizing_wizard_step_4sa.htm">See Also</a></p>
<p>
In this step, Visual FoxPro displays the default data type mappings used to convert local data to remote data, as tables are upsized to the server. You can choose to change these default mappings.</p>
<p>
You can't change the default mapping for a key field to a data type that prevents the field from being indexed. You can change the default mapping of a field that is part of an index key if you choose a data type that is indexable; however, you might want to change the data types for the other fields in the key to match. Visual FoxPro warns you if you change the default data type mapping for a field that is not a key field but is used in a Visual FoxPro index. If you make a mistake, click <b>Default</b> to reset the data types.</p>
<h3>Options</h3>
<p class=dt>
<b>Table</b></p>
<p class=indent>
Select the table whose fields you want to map from the list of all the tables you've chosen to upsize.</p>
<p class=dt>
<b>Timestamp column</b></p>
<p class=indent>
Select this check box to add a timestamp column to the server version of the table.</p>
<p class=dt>
<b>Identity column</b></p>
<p class=indent>
Select this check box to add an identity column to the server version of the table.</p>
<p class=dt>
<b>Default</b></p>
<p class=indent>
Choose this button to reset all table field settings for all fields in the selected table back to their defaults. This button in effect undoes any changes you have entered for a specific table in Step 4.</p>
<p class=dt>
<b>Field Name</b></p>
<p class=indent>
Lists the fields contained in the table you selected in the <b>Table</b> list.</p>
<p class=dt>
<b>FoxPro Type</b></p>
<p class=indent>
Lists the Visual FoxPro data type for the field.</p>
<p class=dt>
<b>Server Type</b></p>
<p class=indent>
Lists the server data type to which Visual FoxPro data in this field will be mapped when the table is copied to the server. Click in this field to display a drop-down list from which you can select a different server data type.</p>
<p class=dt>
<b>Width</b></p>
<p class=indent>
Specifies the width of the field.</p>
<p class=dt>
<b>Precision</b></p>
<p class=indent>
Specifies the decimal precision of the field, when applicable.</p>
<h4>Creating Timestamp Columns</h4>
<p>
A SQL Server timestamp column contains a unique value, generated by SQL Server, that is updated whenever the server record is updated. Using a timestamp field on an updatable remote table can increase performance and reliability. </p>
<p>
If you update fields using the Visual FoxPro SQL WhereType values DB_KEYANDMODIFIED or DB_KEYANDUPDATABLE, Visual FoxPro must check all modified or all updatable fields to determine whether they were changed by another user. Because text or image fields can be many megabytes in size, comparing these fields for changes can be network-intensive and time-consuming, thereby reducing performance. Reliability can also be affected, because converting the value of a floating point field between client and server might cause the value to appear to have changed when it has not.</p>
<p>
When you add a timestamp field to a remote table and update using the SQL WhereType value DB_KEYANDTIMESTAMP, Visual FoxPro uses only the value in the timestamp field to determine whether a record has been changed before updating it. Because Visual FoxPro can compare the value in the timestamp field more quickly than it can evaluate the contexts of large text or image fields, you can increase performance on remote data. However, if you use the SQL WhereType value DB_KEYANDTIMESTAMP, any change in the remote record is recognized as an update conflict, whether or not the changed remote field is in the list of fields you've set as modifiable in your remote view.</p>
<p>
If you prefer to update fields using the Visual FoxPro SQL WhereType values DB_KEYANDMODIFIED, you might improve performance by setting the remote view's Compare Memo property to false (.F.). When CompareMemo is set to false, Memo fields are removed from the list of remote view fields compared against the data in the remote server row.</p>
</BODY>
</HTML>

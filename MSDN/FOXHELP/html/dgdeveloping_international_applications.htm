<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Developing International Applications</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgdeveloping_international_applications"></a><sup></sup>Chapter 18: Developing International Applications</h1>
<p>
To move into the world market, you must design your Visual FoxPro applications so that they're as effective internationally as domestically. This chapter describes how to use the international features of Visual FoxPro to produce applications for selected <a href="glslocale.htm">locales</a>.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dgplanning_an_international_application">Planning an International Application</a></li>
<li>
<a href="#dgdesigning_the_interface">Designing the Interface</a></li>
<li>
<a href="#dgentering_international_data">Entering International Data</a></li>
<li>
<a href="#dgworking_with_code_pages">Working with Code Pages</a></li>
<li>
<a href="#dgsorting_data_in_international_applications">Sorting Data in International Applications</a></li>
<li>
<a href="#dgworking_with_double_byte_character_sets">Working with Double-Byte Character Sets</a></li>
<li>
<a href="#dgcreating_or_modifying_programs">Creating or Modifying Programs</a></li>
<li>
<a href="#dgmanaging_files_in_an_international_application">Managing Files in an International Application</a></li>
</ul>

<h2><a name="dgplanning_an_international_application"></a>Planning an International Application</h2>
<p>
Preparing an international application usually involves three steps: creating data, writing code, and designing a user interface. Before you take these steps, however, you need to consider the following questions:</p>
<ul type=disc>
<li>
What data is acceptable?</li>
<li>
How do you write code for an international application?</li>
<li>
What should you consider when designing a user interface?</li>
</ul>
<p>
The following sections address these questions and pose others you need to consider before you prepare your application.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can reduce the cost of developing an international application and bring it to market more quickly by designing it as an international application initially rather than modifying it for international use later on.</p>
<h3>Preparing the International Data</h3>
<p>
To create international data for an application, you can enter it manually, import it from other applications, or append it to existing files and memo fields. For details about importing and appending data, see Chapter 9, <a href="ugimporting_and_exporting_data.htm">Importing and Exporting Data</a>, in the <i>User’s Guide</i>.</p>
<h3>What Data Is Acceptable?</h3>
<p>
To decide what data is acceptable, first consider the locales in which the application will be used. The locales will determine the cultural content of the data as well as the languages in which the data is prepared.</p>
<p>
In addition, the languages will affect the <a href="glscode_page.htm">code page</a> with which the data is prepared. A code page is a character set that a computer uses to display data properly, often to handle <i>international characters</i>. International characters include characters that have <a href="glsdiacritical_marks.htm">diacritical marks</a>. Diacritical marks are placed over, under, or through letters to indicate sound changes from the unmarked form. The most common diacritical marks are the grave accent (` as in à), acute accent (´ as in á), circumflex (^ as in â), tilde (~ as in ã ), umlaut (¨ as in ä ), ring (° as in å), and slash (/ as in ø), all used in conjunction with vowels.</p>
<p>
Ordinarily, data is automatically marked with the appropriate code page when you work with it. However, if you manually assign a code page to a table, or if you otherwise cause the code page to change, users might not recognize some or all of the data displayed. For details about code pages, see <a href="#dgworking_with_code_pages">Working with Code Pages</a> later in this chapter.</p>
<p>
Some languages, such as Chinese, Korean, and Japanese, use <i>DBCS</i> (double-byte character sets) to represent their data. If your application might run in these environments, you might need to use special string-handling functions and collation sequences for the application to work properly. For details about working in DBCS environments, see <a href="#dgworking_with_double_byte_character_sets">Working with Double-Byte Character Sets</a> later in this chapter.</p>
<h3>How Do You Write Code?</h3>
<p>
An application consists of a user interface component and an application component. The user interface component contains graphics, text strings, and settings related to various locales, such as dates, currencies, numeric values, and separators. The application component contains the code that is run for all locales, including code that processes the strings and graphics used in the user interface.</p>
<p class=label>
<b>The components of an application</b></p>
<p>
<img src="afd18001.gif" border=0></p>
<p>
When designing your application, keep the application and user interface components separate, because independent components make the application easier to localize and maintain. For example, with separate components, you don’t have to browse the source code to localize interface elements. For more information about writing code, see <a href="#dgcreating_or_modifying_programs">Creating or Modifying Programs</a>, later in this chapter.</p>
<h3>How Do You Design a User Interface?</h3>
<p>
The menus, forms, controls, toolbars, and bitmaps used in the user interface must serve the locales for which you’re designing the application. For example, if you design the application for users in Germany and France, dialog boxes must be large enough to display instructions properly when the instructions are localized in German and French. In addition, the images used in icons and bitmaps must be culturally correct so that they're understood in the target locales. For more information about designing user interfaces, see <a href="#dgdesigning_the_interface">Designing the Interface</a>, later in this chapter.</p>
<h3>Testing the Application</h3>
<p>
To test an international application, you need to check the country and language dependencies of the locale for which the application is designed. Testing involves checking the application’s data and user interface to ensure that they conform to the locale’s standards for date and time, numeric values, currency, list separators, and measurements.</p>

<h2><a name="dgdesigning_the_interface"></a>Designing the Interface</h2>
<p>
Because text tends to increase when you localize an application, be careful when designing the following user interface components:</p>
<ul type=disc>
<li>
Application messages</li>
<li>
Menus and forms</li>
<li>
Icons and bitmaps</li>
</ul>
<h3>Creating Application Messages</h3>
<p>
When you create messages in your application, English text strings are usually shorter than equivalent text strings in other languages. The following table shows the additional average growth for strings, based on their initial length.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>English length (in characters)</b></td>
<td class=label width=59%><b>Additional growth for localized strings</b></td>
</tr>
<tr valign=top>
<td width=41%>1 to 4</td>
<td width=59%>100%</td>
</tr>
<tr valign=top>
<td width=41%>5 to 10</td>
<td width=59%>80%</td>
</tr>
<tr valign=top>
<td width=41%>11 to 20</td>
<td width=59%>60%</td>
</tr>
<tr valign=top>
<td width=41%>21 to 30</td>
<td width=59%>40%</td>
</tr>
<tr valign=top>
<td width=41%>31 to 50</td>
<td width=59%>20%</td>
</tr>
<tr valign=top>
<td width=41%>over 50</td>
<td width=59%>10%</td>
</tr>
</table><br>
<h3>Designing Menus and Forms</h3>
<p>
As with messages, menus and forms can grow when the application is localized. For instance, consider the following forms, which are part of an Automated Teller Machine sample application. The first figure shows the English form, and the second figure shows the Spanish equivalent. You can see that extra space was allocated for text to increase in the form.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you allow room for text to increase in an interface, localizers need less time to resize controls and to redesign the interface.</p>
<p class=label>
<b>Text needs more room when localized.</b></p>
<p>
<img src="afd18004.gif" border=0></p>
<p>
In menus and forms, avoid crowding status bars. Also, avoid abbreviations, because they might not exist in other languages.</p>
<h3>Using Icons and Bitmaps</h3>
<p>
Used properly, icons and bitmaps can be an important part of a user interface. However, the meaning of icons and bitmaps can be more ambiguous than the meaning of words. Therefore, consider the following guidelines when using icons and bitmaps:</p>
<ul type=disc>
<li>
Use images that are universally recognized. For example, use an envelope to represent mail, but don’t use a mailbox because it’s not a universal symbol.</li>
<li>
Use culturally sensitive images. For example, avoid using images of religious symbols and animals.</li>
<li>
Avoid using text in bitmaps, because text growth can become a problem, just as it can in other parts of the interface.</li>
<li>
Avoid jargon, slang, humor, extravagant language, and ethnic stereotypes.</li>
<li>
Use ToolTips to help explain icons, which have the added advantage of expanding automatically to the size of the text they display.</li>
<li>
If you portray men and women, ensure that their gender roles are suitable, and that gestures and images of the human body are appropriate in the target culture.</li>
<li>
Use color appropriately. For example, avoid using color combinations associated with national flags or political movements.</li>
</ul>
<p>
If you’re not sure whether an icon or bitmap is appropriate, consult someone in the locale for which you’re designing the application.</p>

<h2><a name="dgentering_international_data"></a>Entering International Data</h2>
<p>
An important aspect of developing international applications is knowing how to enter data into your application. Data can come into your application in two ways:</p>
<ul type=disc>
<li>
Users enter the data.</li>
<li>
You or your users import the data from existing files.</li>
</ul>
<p>
The following sections discuss these two methods.</p>
<h3>Entering International Characters</h3>
<p>
You can enter international characters into Visual FoxPro using your keyboard. The exact method you use depends on the language you're working with. In single-byte character environments, you can enter the characters directly, or by pressing a combination of keys on the keyboard. On the other hand, DBCS environments often provide an Input Method Editor (IME), which is an application you can use to enter characters.</p>
<h4>Entering Characters Using the Keyboard</h4>
<p>
With an international keyboard, you can display international characters by simply pressing the keys dedicated to those characters. If your keyboard doesn’t have keys for international characters, you can enter such characters by using the character map provided with Windows or by pressing the ALT key in conjunction with keys on the numeric keypad.</p>
<p>
The easiest way to enter an international character is to copy it from the character map. In Windows 95, the character map is available from the Accessories menu.</p>
<p>
Alternatively, you can enter an international character by pressing ALT combined with a four-digit number beginning with zero that you enter from the numeric keypad.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot enter international characters in FoxFont. For example, if you open the Command window, switch to FoxFont, and then press a dedicated key, the result isn’t the character on the key. For best results, avoid FoxFont in international applications.</p>
<p class=label>
<b>To create an international character</b>
<ul type=disc>
<li>
Copy the character from the character map, and then paste it into your document.<p class=tl>
-or-</P></li>
<li>
Hold down ALT and then type a zero followed by the appropriate three-digit ASCII code.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The status bar on the character map shows the key combination that corresponds to each character selected on the map.</p></li>
</ul>
<p>
For instance, to type <code>ö</code> (ANSI code 246), press NUM LOCK on the numeric keypad, and then press ALT+0246. Be sure to use a standard Windows font — not FoxFont or FoxPrint.</p>
<p>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;If characters don’t transport correctly, see if you’re using FoxFont. For example, FoxFont is the default for user-defined windows created with <a href="lngdefine_window.htm">DEFINE WINDOW</a> (if the FONT clause is omitted). Be sure to use the FONT clause to specify a font other than the standard Windows font when creating user-defined windows so that international characters display correctly.</p>
<h4>Entering Characters Using an IME</h4>
<p>
If you're working in an IME environment, you can use an Input Method Editor to enter characters into Visual FoxPro. The IME is an application provided with your environment that allows you to type characters on the keyboard to display a selection of international characters and then choose the specific character you want. For example, an IME for Chinese might allow you to enter a Pinyin representation of a Chinese word and then display a list of characters that match the representation. When you select the character you want, the IME pastes it into Visual FoxPro.</p>
<p>
You can control when Visual FoxPro displays an IME by setting the <a href="lngimemode_property.htm">IMEMode</a> property or calling the <a href="lngimestatuslp_rp.htm">IMESTATUS(&nbsp;)</a> function. If you turn the IME window on, Visual FoxPro automatically displays the IME when you're editing in a system window such as the Browse or Edit windows. If you turn the IME window off, you can invoke the IME by pressing the appropriate keys on your keyboard.</p>
<h3>Appending and Copying International Data</h3>
<p>
If you're importing or copying data from delimited files using the <a href="lngappend_from.htm">APPEND FROM</a> or <a href="lngcopy_to.htm">COPY TO</a> commands, you can specify what character is being used in the file to separate fields. For example, it's common in many European countries to use a semicolon (;) as a field delimiter, whereas the common delimiters in the United States are comma (,), tab, or space.</p>
<p>
To import or copy files and specify a delimiter, add the DELIMITED WITH CHARACTER clause to the APPEND FROM or COPY TO commands:</p>
<pre><code>COPY TO mytxt.txt DELIMITED WITH _ WITH CHARACTER ";"
</code></pre>

<h2><a name="dgworking_with_code_pages"></a>Working with Code Pages</h2>
<p>
Data stored in Visual FoxPro is often tagged with a <i>code page</i>, which is a table of characters and corresponding numbers in memory that Windows uses to display data properly. For example, if you enter the letter C in a .dbf file, the letter is stored on your hard disk as the number 67. When you open the file, Visual FoxPro determines its code page, inspects the code page to find the character corresponding to the number 67, and then displays the character (C) on your monitor.</p>
<p>
Code pages correspond roughly to different alphabets. For example, Windows supplies code pages for English, German, Scandinavian languages, and so on. By using a different code pages, applications can properly display characters from these different alphabets.</p>
<h3>Understanding Code Pages in Visual FoxPro</h3>
<p>
Visual FoxPro displays data using one code page. By default, this is the current code page used by Windows. However, you can override the Windows code page by specifying an alternative code page in your configuration file (you must specify a valid code page).</p>
<p>
Tables in Visual FoxPro are tagged with the code page that was in use when the table was created. When you use the table, Visual FoxPro checks the code page for the table against the current code page. If they match, Visual FoxPro displays the data as is. If there is no code page for the table (for example, the table was created in an earlier version of FoxPro), Visual FoxPro prompts you for a code page and then marks the file with it.</p>
<p>
If the table code page does not match the system code page, Visual FoxPro attempts to translate characters from the table code page into the current one. For example, if you're using Visual FoxPro and the current system code page is the English code page, the character ü is represented by ANSI value 252. If the code page for the table represents the ü character as ANSI value 219, Visual FoxPro translates all instances of ANSI value 219 into ANSI 252 so that they display properly.</p>
<p>
Code page translation doesn't work perfectly in all instances, because code pages usually contain characters that are not represented one-for-one in other code pages. For example, you cannot map data that contains the MS-DOS<sup>®</sup> line-drawing characters into Windows, because the Windows code pages don't contain line-drawing characters. Similarly, you cannot translate data created in the Russian code page into an English code page, because there isn't a one-to-one correspondence between the alphabets for these languages. Finally, Visual FoxPro might not contain a character translation map for a particular code page. In that case, the data is displayed with no code page translation. (Visual FoxPro does not display an error to indicate that no code page translation is occurring.) Any of these situations can cause some characters to display improperly.</p>
<p>
If you want to create an application for a specific locale, you can avoid code page translation problems by creating the application’s components using the code page designed for that locale and environment. For example, to create an application for use in Russia, you should use code page 1251, 866, or 10007 for users in the Windows, MS-DOS, or Macintosh environments, respectively.For a complete list, see <a href="#concode_pages_supported_by_visual_foxpro">Code Pages Supported By Visual FoxPro</a> later in this chapter.</p>
<p>
If you need to enter some characters not represented by keys on your keyboard, you can enter these characters using ALT in conjunction with keys on the numeric keypad. However, remember that the same key combination in different environments often displays different results. For example, if you enter ALT+0182 with code page 1252 in Visual FoxPro, you see a paragraph symbol. In contrast, if you enter ALT+0182 with code page 437 in FoxPro for MS-DOS, you see a graphic character with a double vertical line meeting a single horizontal line.</p>
<p>
Although Visual FoxPro supports many code pages, only a few are used often. With Visual FoxPro for Windows, for example, English-speaking users typically use code page 1252, while in Visual FoxPro for Macintosh, English-speaking users typically use code page 10000. However, in FoxPro for MS-DOS, English-speaking users typically use code page 437.</p>
<p>
When working with code pages, be sure to test that the user interface and data display correctly by using the code page designed for a particular locale. If you see unexpected characters on the screen, check the underlying code page.</p>
<h3>Specifying the Code Page of a .dbf Files</h3>
<p>
When you create .dbf files, Visual FoxPro automatically gives them code page marks so that you can tell which code pages they use. However, if you use .dbf files from previous versions of FoxPro, they might not have code page marks.</p>
<p>
You can determine whether a .dbf file has a code page mark by using the <a href="lngcpdbflp_rp.htm">CPDBF(&nbsp;)</a> function after opening the file or by having Visual FoxPro check when you open the file.</p>
<p class=label>
<b>To check for code page marks automatically</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
Select the <a href="cmddata_tab_options_dialog_box.htm">Data</a> tab.<br><br></li>
<li>
Set the <b>Prompt for code page</b> check box, if it's not already set.<p class=tl>
To save this setting for future sessions of Visual FoxPro, choose <b>Set as Default</b>.</P><p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Instead of setting the <b>Prompt for code page</b> check box, you can use the <a href="lngset_cpdialog.htm">SET CPDIALOG</a> command to check for code pages.</p></li>
</ol>
<p>
If a file doesn’t have a code page mark, you must add a mark, as described in the following section.</p>

<h4><a name="dgadding_code_page_marks"></a>Adding Code Page Marks</h4>
<p>
If you use a .dbf file from a previous version of FoxPro, the file might not have a code page mark; without such a mark, the file might not display properly. If automatic code page checking is enabled, when you open the file you can tell if it has a code page mark. If it doesn’t have one, you can add one.</p>
<p class=label>
<b>To manually add a code page mark to a .dbf file</b>
<ol>
<li>
Ensure automatic code page checking is in effect (see the previous procedure).<br><br></li>
<li>
Open the file.<p class=tl>
If the file doesn’t have a code page mark, the <a href="cmdcode_page_dialog_box.htm">Code Page</a> dialog box appears.</P><p class=label>
<b>The Code Page dialog box</b>
<p>
<img src="afd18002.gif" border=0></P></li>
<li>
Choose the appropriate code page.<br><br></li>
<li>
View the file to see if you assigned the proper code page.<p class=tl>
If you can’t see some of the data, or if you can’t recognize some of it, the code page is not correct.</P></li>
<li>
If the code page is incorrect, remove the code page mark by using the <a href="smpcpzero.prg.htm">CPZERO</a> program in the Visual FoxPro Tools\Cpzero directory. For details, see <a href="#dgremoving_code_page_marks">Removing Code Page Marks</a> later in this chapter.<br><br></li>
<li>
Repeat this procedure until the code page is correct.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Text files such as program (.prg) and query (.qpr) files don't have code page marks. This means that you can’t tell which code pages the files use. However, if you include such files in a project, the project can keep a record of the code pages used. For details, see <a href="#dgspecifying_the_code_page_of_a_text_file">Specifying the Code Page of a Text File</a> later in this chapter.</p></li>
</ol>

<h4><a name="dgremoving_code_page_marks"></a>Removing Code Page Marks</h4>
<p>
If a .dbf file doesn't display properly, it might have the wrong code page mark. You can remove the code page mark with the CPZERO program located in Tools\Cpzero. Running CPZERO sets the code page to 0, meaning none.</p>
<p class=label>
<b>To remove a code page mark</b>
<ul type=disc>
<li>
Run <a href="smpcpzero.prg.htm">CPZERO</a> using the following syntax:<p class=tl>
DO CPZERO WITH "<i>filename</i>", 0</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you remove the code page mark of a .dbf file, the data in the file doesn’t change. To change the code page of the data, you must mark the file with the proper code page. For details, see <a href="#dgadding_code_page_marks">Adding Code Page Marks</a> earlier in this chapter.</p></li>
</ul>

<h4><a name="dgchanging_code_page_marks"></a>Changing Code Page Marks</h4>
<p>
You can change the code page of a .dbf file by removing its code page mark and then adding a new one, by copying the file to another file, or by using the CPZERO program.</p>
<p class=label>
<b>To change the code page of a .dbf file by copying the file</b>
<ul type=disc>
<li>
Use the <a href="lngcopy_to.htm">COPY TO</a> command, specifying the target code page with the AS clause. (To set the code page to the current system code page, omit the AS clause.)<p class=tl>
For example, to copy Test.dbf to Test866.dbf, while changing the code page to 866, use the following commands:</P><pre><code>USE TEST.DBF
COPY TO TEST866.DBF AS 866
</code></pre>
</li>
</ul>
<p>
When the COPY TO completes, the data in the resulting file will have the new code page.</p>
<p class=label>
<b>To change a code page mark using CPZERO</b>
<ul type=disc>
<li>
Run <a href="smpcpzero.prg.htm">CPZERO</a> using the following syntax:<p class=tl>
DO CPZERO WITH "<i>filename</i>", <i>newCodePage</i></P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Some characters cannot be translated between code pages successfully. In addition, some code page translations aren't supported by Visual FoxPro. Always check the results of a code page change to be sure that your data has been translated successfully.</p></li>
</ul>

<h3><a name="dgspecifying_the_code_page_of_a_text_file"></a>Specifying the Code Page of a Text File</h3>
<p>
If you forget the code page of a text file that’s not part of a project, you cannot determine the code page, because a text file doesn’t have a code page mark&nbsp; as .dbf files have. The best way to remember the code page of a text file is to add the file to a project.</p>
<p class=label>
<b>To specify the code page of a text file</b>
<ol>
<li>
Open the <a href="wndproject_manager.htm">Project Manager</a>.<br><br></li>
<li>
Select the text file whose code page you want to specify.<br><br></li>
<li>
From the <b>Project</b> menu, choose <b>Project Info</b>.<br><br></li>
<li>
In the <a href="cmdproject_information_dialog_box.htm">Project Information</a> dialog box, click the <b>Files</b> tab.<br><br></li>
<li>
Right-click the selected file.<br><br></li>
<li>
From the submenu, choose <b>Code Page</b>.<p class=tl>
Visual FoxPro displays the <a href="cmdcode_page_dialog_box.htm">Code Page</a> dialog box.</P></li>
<li>
Choose the appropriate code page.<p class=tl>
Visual FoxPro displays the available code pages.</P><p>
<img src="afd18003.gif" border=0></P></li>
</ol>
<p>
If you know the code page of a text file, you can specify it by using the AS clause of the appropriate Visual FoxPro command. For files you want to import or append, you can specify the code page in the <a href="lngimport.htm">IMPORT</a> or <a href="lngappend.htm">APPEND</a> commands. For query, program, and other text files already on your computer, you can change the code page using the <a href="lngmodify_query.htm">MODIFY QUERY</a>, <a href="lngmodify_command.htm">MODIFY COMMAND</a>, and <a href="lngmodify_file.htm">MODIFY FILE</a> commands.</p>
<p>
If you’re not sure which code page to apply, substitute the <a href="lnggetcplp_rp.htm">GETCP(&nbsp;)</a> function for the code page number in the command. GETCP(&nbsp;) displays the Code Page dialog box, allowing you to select the appropriate code page.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Some characters cannot be translated between code pages successfully. In addition, some code page translations aren't supported by Visual FoxPro. Always check the results of a code page change to be sure that your data has been translated successfully.</p>
<h3>Determining the Code Page of a Project File</h3>
<p>
After adding a file to a project, you can determine its code page. The method you use depends on whether the file is a table (.dbf file) or a text file.</p>
<p class=label>
<b>To determine the code page of a text file</b>
<ol>
<li>
Open the <a href="wndproject_manager.htm">Project Manager</a>.<br><br></li>
<li>
Under <b>Other</b>, select the text file whose code page you want to know.<br><br></li>
<li>
From the <b>Project</b> menu, choose <b>Project Info</b>.</li>
</ol>
<p class=label>
<b>To determine the code page of a table</b></p>
<ul type=disc>
<li>
Use the <a href="lngcpdbflp_rp.htm">CPDBF(&nbsp;)</a> function.</li>
</ul>
<p>
When you build an application from a project, the Project Manager automatically integrates the files in the project, no matter how many different code pages they have. The resulting application has the current code page.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When you add a .dbf file to a project, you don’t have to specify a code page for the file, because Visual FoxPro automatically determines the code page from the file’s code page mark. However, when you add a text file to a project, you must specify a code page for the file, because Visual FoxPro cannot determine the code page automatically.</p>
<p>
To prepare a program for use with another code page, specify the original code page when you save or compile the program on the new platform. For example, to prepare a program created with Visual FoxPro for Macintosh for use with Visual FoxPro, specify the appropriate MS-DOS code page when you save or compile the program with Visual FoxPro. If you use the <a href="lngcompile.htm">COMPILE</a> command, specify the code page using the AS clause. Alternatively, specify the code page with <a href="lngset_cpcompile.htm">SET CPCOMPILE</a> before compiling the program.</p>
<h3>Specifying Code Pages for Variables</h3>
<p>
You might want to manipulate international data in certain ways. For example, you might want to translate the data in a variable to another code page, or you might want to prevent translation of data in a character or memo field.</p>
<h4>Translating Data in Variables</h4>
<p>
If the code in your application includes a variable containing data from another code page, you can translate the data to the proper code page using the <a href="lngcpconvertlp_rp.htm">CPCONVERT(&nbsp;)</a> function. For example, suppose the variable <code>x</code> contains data created with the Macintosh® code page (10000). To translate the data to the Windows code page (1252), issue the following command:</p>
<pre><code>cConvert=CPCONVERT(10000,1252,x)
</code></pre>
<p>
In Windows, the converted data looks just as you see it on the Macintosh. For example, a character that looks like “ä” on the Macintosh looks identical in Windows.</p>
<h3>Preventing Translation of Data in Character or Memo Fields</h3>
<p>
In some cases, you don’t want automatic code page translation. For instance, if a character field contains an encrypted password, you don’t want Visual FoxPro to automatically translate the password, because doing so would alter it.</p>
<p class=label>
<b>To prevent translation of data in a character or memo field</b>
<ol>
<li>
Open the project containing the table.<br><br></li>
<li>
Select the table.<br><br></li>
<li>
Choose the <b>Modify</b> button.<p class=tl>
The <a href="wndtable_designer.htm">Table Designer</a> appears.</P></li>
<li>
Select the field whose data you want to protect.<br><br></li>
<li>
From the <b>Type</b> list, select <b>Character (Binary)</b> for a Character field, or <b>Memo (Binary)</b> for a memo field.<br><br></li>
<li>
Choose <b>OK</b>, and then choose <b>Yes</b> to make the changes permanent.<br><br></li>
<li>
Verify the changes by displaying the structure of the table with the <a href="lngdisplay_structure.htm">DISPLAY STRUCTURE</a> command.<p class=tl>
Alternatively, use the <a href="lngmodify_structure.htm">MODIFY STRUCTURE</a> command to protect the appropriate fields.</P></li>
</ol>
<p>
You can also prevent translation of selected characters in text files by using the <a href="lngchrlp_rp.htm">CHR(&nbsp;)</a> function.</p>

<h2><a name="concode_pages_supported_by_visual_foxpro"></a>Code Pages Supported by Visual FoxPro</h2>
<p>
A code page is a set of characters specific to a language or hardware platform. Accented characters are not represented by the same values across platforms and code pages. In addition, some characters available in one code page are not available in another.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Code page</b></td>
<td class=label width=45%><b>Platform</b></td>
<td class=label width=38%><b>Code page identifier</b></td>
</tr>
<tr valign=top>
<td width=17%>437</td>
<td width=45%>U.S. MS-DOS</td>
<td width=38%>x01</td>
</tr>
<tr valign=top>
<td width=17%>620 <sup>*</sup></td>
<td width=45%>Mazovia (Polish) MS-DOS</td>
<td width=38%>x69</td>
</tr>
<tr valign=top>
<td width=17%>737 <sup>*</sup></td>
<td width=45%>Greek MS-DOS (437G)</td>
<td width=38%>x6A</td>
</tr>
<tr valign=top>
<td width=17%>850</td>
<td width=45%>International MS-DOS</td>
<td width=38%>x02</td>
</tr>
<tr valign=top>
<td width=17%>852</td>
<td width=45%>Eastern European MS-DOS</td>
<td width=38%>x64</td>
</tr>
<tr valign=top>
<td width=17%>861</td>
<td width=45%>Icelandic MS-DOS</td>
<td width=38%>x67</td>
</tr>
<tr valign=top>
<td width=17%>865</td>
<td width=45%>Nordic MS-DOS</td>
<td width=38%>x66</td>
</tr>
<tr valign=top>
<td width=17%>866</td>
<td width=45%>Russian MS-DOS</td>
<td width=38%>x65</td>
</tr>
<tr valign=top>
<td width=17%>895 <sup>*</sup></td>
<td width=45%>Kamenicky (Czech) MS-DOS</td>
<td width=38%>x68</td>
</tr>
<tr valign=top>
<td width=17%>857</td>
<td width=45%>Turkish MS-DOS</td>
<td width=38%>x6B</td>
</tr>
<tr valign=top>
<td width=17%>1250</td>
<td width=45%>Eastern European Windows</td>
<td width=38%>xC8</td>
</tr>
<tr valign=top>
<td width=17%>1251</td>
<td width=45%>Russian Windows</td>
<td width=38%>xC9</td>
</tr>
<tr valign=top>
<td width=17%>1252</td>
<td width=45%>Windows ANSI</td>
<td width=38%>x03</td>
</tr>
<tr valign=top>
<td width=17%>1253</td>
<td width=45%>Greek Windows</td>
<td width=38%>xCB</td>
</tr>
<tr valign=top>
<td width=17%>1254</td>
<td width=45%>Turkish Windows</td>
<td width=38%>xCA</td>
</tr>
<tr valign=top>
<td width=17%>10000</td>
<td width=45%>Standard Macintosh</td>
<td width=38%>x04</td>
</tr>
<tr valign=top>
<td width=17%>10006</td>
<td width=45%>Greek Macintosh</td>
<td width=38%>x98</td>
</tr>
<tr valign=top>
<td width=17%>10007 <sup>*</sup></td>
<td width=45%>Russian Macintosh</td>
<td width=38%>x96</td>
</tr>
<tr valign=top>
<td width=17%>10029</td>
<td width=45%>Macintosh EE</td>
<td width=38%>x97</td>
</tr>
</table><br>
<p class=mini>
* Not detected when you include CODEPAGE=AUTO in your configuration file.</p>

<h2><a name="dgsorting_data_in_international_applications"></a>Sorting Data in International Applications</h2>
<p>
After creating a table of international data, check to see if your application sorts the data correctly. How the data sorts depends on the code page associated with the table, because the code page specifies the available sort orders or collation sequences.</p>
<h3>Understanding Sort Orders</h3>
<p>
Sort orders incorporate the sorting rules of different locales, allowing you to sort data in those languages correctly. In Visual FoxPro, the current sort order determines the results of character expression comparisons and the order in which records appear in indexed or sorted tables.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Sorting works differently in double-byte character (DBCS) environments. For details, see <a href="#dgsorting_dbcs_data">Sorting DBCS Data</a> later in this chapter.</p>
<p>
Use the appropriate sort order, because different sort orders produce different results, as shown in the following table.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>Unsorted</b></td>
<td class=label width=26%><b>Machine</b></td>
<td class=label width=26%><b>General</b></td>
<td class=label width=26%><b>Spanish</b></td>
</tr>
<tr valign=top>
<td width=22%>!@#$</td>
<td width=26%>Space</td>
<td width=26%>space</td>
<td width=26%>space</td>
</tr>
<tr valign=top>
<td width=22%>1234</td>
<td width=26%>!@#$</td>
<td width=26%>!@#$</td>
<td width=26%>!@#$</td>
</tr>
<tr valign=top>
<td width=22%>space</td>
<td width=26%>1234</td>
<td width=26%>1234</td>
<td width=26%>1234</td>
</tr>
<tr valign=top>
<td width=22%>Caesar</td>
<td width=26%>Caesar</td>
<td width=26%>äa</td>
<td width=26%>äa</td>
</tr>
<tr valign=top>
<td width=22%>cæsar</td>
<td width=26%>Car</td>
<td width=26%>ab</td>
<td width=26%>ab</td>
</tr>
<tr valign=top>
<td width=22%>Strasse</td>
<td width=26%>Char</td>
<td width=26%>äb</td>
<td width=26%>äb</td>
</tr>
<tr valign=top>
<td width=22%>straße</td>
<td width=26%>Czech</td>
<td width=26%>Caesar</td>
<td width=26%>Caesar</td>
</tr>
<tr valign=top>
<td width=22%>Car</td>
<td width=26%>Strasse</td>
<td width=26%>cæsar</td>
<td width=26%>cæsar</td>
</tr>
<tr valign=top>
<td width=22%>Char</td>
<td width=26%>Ab</td>
<td width=26%>Car</td>
<td width=26%>Car</td>
</tr>
<tr valign=top>
<td width=22%>Czech</td>
<td width=26%>Cæsar</td>
<td width=26%>Çar</td>
<td width=26%>Çar</td>
</tr>
<tr valign=top>
<td width=22%>ab</td>
<td width=26%>Straße</td>
<td width=26%>Char</td>
<td width=26%>Czech</td>
</tr>
<tr valign=top>
<td width=22%>Çar</td>
<td width=26%>Çar</td>
<td width=26%>Czech</td>
<td width=26%>Char</td>
</tr>
<tr valign=top>
<td width=22%>äa</td>
<td width=26%>Äa</td>
<td width=26%>Strasse</td>
<td width=26%>Strasse</td>
</tr>
<tr valign=top>
<td width=22%>äb</td>
<td width=26%>Äb</td>
<td width=26%>straße</td>
<td width=26%>straße</td>
</tr>
</table><br>
<h3>Sort Order Guidelines</h3>
<p>
Consider the following guidelines when choosing a sort order:</p>
<ul type=disc>
<li>
Avoid the Machine sort order if you want to sort international characters properly, because Machine sorts international characters in ASCII order. For example, notice that <code>Çar</code> follows <code>straße</code>.</li>
<li>
Characters with diacritical marks sort differently than characters without diacritical marks. For example, in the General and Spanish sort orders, notice that <code>äa</code> sorts before <code>ab</code> but <code>ab</code> sorts before <code>äb</code>.</li>
<li>
Ligatures such as <code>ß</code> sort the same as their equivalent character expansions. For example, <code>straße</code> sorts the same as <code>Strasse</code>, and <code>cæsar</code> sorts the same as <code>Caesar</code>.</li>
<li>
In some languages, two characters sort as a single character. For example, in Spanish the <code>Ch</code> in <code>Char</code> sorts as a character between <code>C</code> and <code>D</code>.</li>
</ul>
<p>
The following sections describe how to specify sort orders, check the current sort order, and recognize the effects of sort orders.</p>

<h3><a name="dgspecifying_sort_orders"></a>Specifying Sort Orders</h3>
<p>
You can specify a sort order for character fields used in subsequent indexing and sorting operations.</p>
<p class=label>
<b>To specify a sort order</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
Select the <a href="cmddata_tab_options_dialog_box.htm">Data</a> tab.<br><br></li>
<li>
In the <b>Collating sequence</b> box, select the appropriate sort order.<p class=tl>
To save this setting for future sessions of Visual FoxPro, choose <b>Set as Default</b>.</P><p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can also specify a sort order with the <a href="lngset_collate.htm">SET COLLATE TO</a> command or the COLLATE statement in your Config.fpw file. For details about Config.fpw, see Chapter 3, <a href="igconfiguring_visual_foxpro.htm">Configuring Visual FoxPro</a>, in the <i>Installation Guide</i>.</p></li>
</ol>
<p>
The current sort order doesn’t affect previously created indexes; however, it does affect the results of comparisons and commands such as SEEK and SELECT - SQL. For details, see <a href="#dgrecognizing_the_effects_of_sort_orders">Recognizing the Effects of Sort Orders</a> later in this chapter.</p>
<p>
You can change the sort order at any time. For instance, after opening a customer table, you can create index tags representing different sort orders, as shown in the following code. Then, you can change the sort order by simply using a different tag:</p>
<pre><code>USE customer
SET COLLATE TO "GENERAL"
INDEX ON fname TAG mygeneral ADDITIVE
SET COLLATE TO "MACHINE"
INDEX ON custid TAG mymachine ADDITIVE
SET COLLATE TO "DUTCH"
INDEX ON lname TAG mydutch ADDITIVE
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The sort order for an index overrides the current sort order.</p>
<p>
The current code page determines which sort orders are available. If you use <a href="lngset_collate.htm">SET COLLATE</a> to specify a sort order not supported by the current code page, Visual FoxPro generates an error. Also, if you specify a sort order in Config.fpw that isn’t supported by the current code page, the sort order defaults to Machine.</p>
<h3>Checking Sort Orders</h3>
<p>
You can determine the current sort order by using the <a href="lngsetlp_rp.htm">SET ('COLLATE')</a> function. For example, you can save the current sort order, set the current sort order to Machine, perform whatever work is necessary, and then restore the original sort order by using the following code:</p>
<pre><code>cCurrentOrder=SET('COLLATE')
SET COLLATE TO 'MACHINE'
*
* code that requires the Machine sort order
*
SET COLLATE TO cCurrentOrder&nbsp; &amp;&amp; return to the previous sort order
</code></pre>
<p>
You can also determine the sort order of an index or index tag by using the <a href="lngidxcollatelp_rp.htm">IDXCOLLATE(&nbsp;)</a> function.</p>

<h3><a name="dgrecognizing_the_effects_of_sort_orders"></a>Recognizing the Effects of Sort Orders</h3>
<p>
The sort order affects the results of string comparisons, <a href="lngseek.htm">SEEK</a>, and <a href="lngselect___sql.htm">SELECT - SQL</a>, as described in the following sections.</p>
<h4>Comparing Strings</h4>
<p>
All sort orders except for Machine and Unique Weight ignore case. This means that you don’t have to use <a href="lngupperlp_rp.htm">UPPER(&nbsp;)</a> in your index expressions.</p>
<p>
The current sort order affects string comparisons. For example, when you set the sort order to General, the following statements return true (.T.):</p>
<pre><code>?"A" = "a"
?"Straße"="Strasse"
?"æ" = "ae"
</code></pre>
<p>
However, when you use the Machine sort order, all of these statements return false (.F.). because the strings are matched for an exact comparison, byte by byte.</p>
<p>
The character string comparison operator (= =) gives you the same result as when you compare by value or when you compare using the Machine sort order; that is, it compares strings byte by byte. For example, the following statement returns false (.F.):</p>
<pre><code>? "Straße" == "Strasse"
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual FoxPro ignores SET EXACT when you use the character string comparison operator (= =).</p>
<h4>Using SEEK</h4>
<p>
Visual FoxPro ignores diacritical marks when you perform a <i>partial seek</i>. A partial seek occurs when you make the length of the expression less than the length of the key. If diacritics are important, consider using <a href="lngscan_..._endscan.htm">SCAN FOR...ENDSCAN</a> or <a href="lnglocate.htm">LOCATE FOR...CONTINUE</a> instead of <a href="lngseek.htm">SEEK</a>.</p>
<p>
The advantages of using SCAN and LOCATE instead of SEEK include the following:</p>
<ul type=disc>
<li>
SCAN and LOCATE are sensitive to diacritics.</li>
<li>
Visual FoxPro fully optimizes the results of SCAN or LOCATE if the current sort order is Machine or Unique Weight, whereas Visual FoxPro only partly optimizes the results of SEEK.</li>
<li>
SCAN and LOCATE remember the condition that invoked them, allowing you to use them for looping on a condition. In contrast, SEEK positions you somewhere in the index, and <a href="lngskip.htm">SKIP</a> continues down the index from that point. Accordingly, SEEK might not produce the results you want with international data.</li>
</ul>
<h4>Using SELECT - SQL</h4>
<p>
The <a href="lngselect___sql.htm">SELECT - SQL</a> command uses the current sort order. For example, if you have an index tag based on the General sort order, and the current sort order (returned by <a href="lngsetlp_rp.htm">SET ('COLLATE')</a>) is Machine, the result of SELECT SQL is based on Machine.</p>
<p>
To employ the current sort order, use the ORDER BY clause of SELECT - SQL.</p>
<h3>Using Indexes</h3>
<p>
Sort orders determine the order of records in indexed tables. Consider the following guidelines for using indexes with sort orders:</p>
<ul type=disc>
<li>
Rebuild indexes created in earlier versions of FoxPro if you want the indexes to use a sort order other than Machine.</li>
<li>
Rebuild dBASE indexes to take advantage of Visual FoxPro sort orders.</li>
<li>
Use the <a href="lngreindex.htm">REINDEX</a> command to rebuild an index, because REINDEX leaves the sort order unchanged.</li>
</ul>

<h2><a name="dgworking_with_double_byte_character_sets"></a>Working with Double-Byte Character Sets</h2>
<p>
Visual FoxPro supports <a href="glsdbcs.htm">DBCS</a> (double-byte character sets) — character sets that require more than one byte to represent a character. Some examples of languages that require a double-byte character set are Simplified Chinese, Traditional Chinese, Japanese, and Korean.</p>
<p>
Visual FoxPro DBCS support allows you to create international applications. For example, you can create a Japanese application with a U.S. version of Visual FoxPro if you're running the Japanese version of Windows. The Visual FoxPro DBCS functions operate properly on the Japanese character set, and the Japanese collation sequence is supported.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual FoxPro provides special programming functions for use with string in DBCS environments. For details, see <a href="#dgworking_with_strings_in_dbcs_environments">Working With Strings in DBCS Environments</a> later in this chapter.</p>
<h3>Using DBCS Characters When Naming Objects</h3>
<p>
Visual FoxPro allows you to use DBCS characters when naming elements of your applications. As with Visual FoxPro generally, elements can:</p>
<ul type=disc>
<li>
Be up to 254 characters in length with the combination of double-byte characters and single characters. For example, if you use all double-byte characters, the name you're creating can be only 127 characters long.</li>
<li>
Begin with a letter, number, underscore or leading-trailing byte combination.</li>
<li>
Contain only letters, numbers, underscores, or DBCS characters.</li>
</ul>
<p>
These rules apply to variables, objects (windows, menus, and so on), function and procedure names, class and subclass names, aliases, and constants. You can also use double-byte characters for file names. To avoid the possibility that characters in the file name are inadvertently treated as delimiters, it's safest to always enclose the file name in quotation marks.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Visual FoxPro length limits are expressed using single-byte characters. Using double-byte characters in field names, index expressions, variable names, window names, and so on, effectively shortens the length of the name. For example, a field name can be up to 10 bytes long in a free table, so a field name can consist of 10 single-byte characters, but only 5 double-byte characters. For more information about Visual FoxPro system capacities, see <a href="consystem_capacities.htm">System Capacities</a>.</p>

<h3><a name="dgsorting_dbcs_data"></a>Sorting DBCS Data</h3>
<p>
To help you order information in DBCS environments, Visual FoxPro supports collation sequences for Simplified Chinese, Traditional Chinese, Japanese, and Korean. Collation sequences allow you to properly order character fields in tables for each language.</p>
<p>
The following table lists the Visual FoxPro collation sequence options and the corresponding language.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Options</b></td>
<td class=label width=74%><b>Language</b></td>
</tr>
<tr valign=top>
<td width=26%>JAPANESE</td>
<td width=74%>Japanese</td>
</tr>
<tr valign=top>
<td width=26%>KOREAN</td>
<td width=74%>Korean</td>
</tr>
<tr valign=top>
<td width=26%>PINYIN</td>
<td width=74%>Simplified Chinese</td>
</tr>
<tr valign=top>
<td width=26%>STROKE</td>
<td width=74%>Simplified and Traditional Chinese</td>
</tr>
</table><br>
<p>
For more information about specifying collation sequences, see <a href="#dgspecifying_sort_orders">Specifying Sort Orders</a> earlier in this chapter.</p>

<h2><a name="dgcreating_or_modifying_programs"></a>Creating or Modifying Programs</h2>
<p>
You can prevent localization problems with code by observing the guidelines described in the following sections.</p>
<h3>Testing for International Versions</h3>
<p>
If it's important for your application to be able to determine what language Visual FoxPro is running in, you can call <a href="lngversionlp_rp.htm">VERSION(&nbsp;)</a>. Knowing the language environment can help you determine what text to display, how to format data, and so on. For example, the following code determines what language environment Visual FoxPro is running in and then runs a language-specific form:</p>
<pre><code>IF VERSION(3) = 34 THEN
 &nbsp; * Running in Spanish--display Spanish form
 &nbsp; DO FORM CST_SPN.SCX
ELSE
 &nbsp; * Display English form
 &nbsp; DO FORM CST_ENU.SCX
ENDIF
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Support for double-byte characters strings has been available in Visual FoxPro only since version 3.0b. If your application is relying on the availability of DBCS functions, you should also call the <a href="lngversionlp_rp.htm">VERSION(1)</a> function to test the Visual FoxPro version number.</p>
<h3>Using Strings</h3>
<p>
Avoid including strings directly in code because they make localization difficult. For instance, don’t include dates and currencies as strings in code. If possible, write your code so that it retrieves strings from files or tables separate from the program.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The performance of your program might suffer if you remove all strings from it. For example, performance might suffer if the program searches for strings while inside a loop.</p>
<p>
One way to work with strings in an application that will be translated is to use string constants throughout the application. You can then define the text for these constants in a separate text file that is referenced from your programs using the <a href="lnghinclude_preprocessor_directive.htm">#INCLUDE</a> preprocessor directive. For example, instead of embedding the error message “file not found,” you can use the constant ERR_FILE_NOT_FOUND. The text for this constant could be in a file called ERR_TEXT.H. A program that uses this technique might look like this:</p>
<pre><code>#INCLUDE ERR_TEXT.H

* processing here

IF ERR THEN
 &nbsp; MESSAGEBOX( ERR_FILE_NOT_FOUND )
ENDIF
</code></pre>
<p>
When your application is localized, the translator can create a locale-specific version of the error text file and then recompile the application.</p>

<h4><a name="dgworking_with_strings_in_dbcs_environments"></a>Working With Strings in DBCS Environments</h4>
<p>
Visual FoxPro includes functions for manipulating character expressions containing any combination of single-byte or double-byte characters. By using DBCS string functions, you can develop applications without having to write extra code that tests for double-byte characters when counting, locating, inserting, or removing characters in a string.</p>
<p>
Most DBCS functions are equivalent to their single-byte counterparts except that they're named with a C suffix to distinguish them. You can use these functions with both single-byte and double-byte data; the DBCS functions return exactly the same value as their single-byte counterparts when single-byte data is passed to them. A few other functions help you work with strings specifically in double-byte environments.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>DBCS string functions</b></td>
<td class=label width=62%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=38%><a href="lngat_clp_rp.htm">AT_C(&nbsp;)</a></td>
<td width=62%>Returns the position of one string within another (case-sensitive), starting at the left.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngatcclp_rp.htm">ATCC(&nbsp;)</a></td>
<td width=62%>Returns the position of one string within another (case-insensitive).</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngchrtranclp_rp.htm">CHRTRANC(&nbsp;)</a></td>
<td width=62%>Replaces characters in a string.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngimestatuslp_rp.htm">IMESTATUS(&nbsp;)</a> </td>
<td width=62%>Toggles double-byte editing in the Browse window.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngisleadbytelp_rp.htm">ISLEADBYTE(&nbsp;)</a></td>
<td width=62%>Tests whether a character is a DBCS character.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngleftclp_rp.htm">LEFTC(&nbsp;)</a></td>
<td width=62%>Returns leftmost characters from a string.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lnglenclp_rp.htm">LENC(&nbsp;)</a></td>
<td width=62%>Returns the number of characters in a string.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lnglikeclp_rp.htm">LIKEC(&nbsp;)</a></td>
<td width=62%>Determines whether two strings match.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngratclp_rp.htm">RATC(&nbsp;)</a></td>
<td width=62%>Returns the position of one string within another (case-sensitive), starting at the right.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngrightclp_rp.htm">RIGHTC(&nbsp;)</a></td>
<td width=62%>Returns rightmost characters from a string.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngstrconvlp_rp.htm">STRCONV(&nbsp;)</a></td>
<td width=62%>Converts characters between single-byte and double-byte representations.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngstuffclp_rp.htm">STUFFC(&nbsp;)</a></td>
<td width=62%>Replaces characters in a string with another string.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngsubstrclp_rp.htm">SUBSTRC(&nbsp;)</a></td>
<td width=62%>Returns a substring.</td>
</tr>
</table><br>
<p>
When working with double-byte string functions, remember that the maximum-length limit for variables, names, and so on is effectively cut in half.&nbsp; For more information about Visual FoxPro system capacities, see <a href="consystem_capacities.htm">System Capacities</a>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The Visual FoxPro DBCS functions are not supported in earlier versions of Visual FoxPro, and calling them might cause unpredictable results. If you use any DBCS functions in your application, use <a href="lngversionlp_rp.htm">VERSION(1)</a> to verify that the Visual FoxPro version is later than version 3.0.</p>
<h3>Working with Date, Time, and Currency Formats</h3>
<p>
To help you format dates, times, and currency to match what your users are accustomed to, you can use a variety of formatting techniques. You can:</p>
<ul type=disc>
<li>
Allow Visual FoxPro to use the settings established in the Control Panel.</li>
<li>
Specify a language or a specific format in the Visual FoxPro Options dialog box that you want to use.</li>
<li>
Format dates, times, and currency information in code.</li>
</ul>
<p class=label>
<b>To set a format for date, times, and currency</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>, and then click the <a href="cmdregional_tab_options_dialog_box.htm">Regional</a> tab.<br><br></li>
<li>
To use the settings made with the Windows Control Panel, choose <b>Use system settings</b>.<p class=tl>
-or-</P><p class=tl>
Choose a language or format for dates and times and then choose options for formatting currency and numbers. If you choose the format <b>Short</b> or <b>Long</b> for the date format, you cannot specify any further options for the date format, and the settings are read from the Windows Control Panel.</P></li>
<li>
Choose <b>OK</b> to use the options for this session, or <b>Set As Default</b> to make the changes the default settings for this copy of Visual FoxPro.</li>
</ol>
<p>
You can also make these settings using the <a href="lngset_sysformats.htm">SET SYSFORMATS</a> and <a href="lngset_date.htm">SET DATE</a> commands. As a rule, you would issue this command during the initialization of your application (for example, in the configuration file). The default for SET SYSFORMATS is OFF, so you must explicitly set it to ON when starting your application.</p>
<p>
You can establish data validation in individual text boxes by setting the <a href="lngformat_property.htm">Format</a> property of the text box. However, because text box formatting takes precedence over system-wide formatting, this can make it more difficult to localize your application to an environment that uses a different format for dates, currency, and so on.</p>
<h3>Using Preprocessor Directives</h3>
<p>
You can create application variants for different locales by using preprocessor directives. These control compilation of code in the application and include the <a href="lnghinclude_preprocessor_directive.htm">#INCLUDE</a>, <a href="lnghdefine_..._hundef_preprocessor_directive.htm">#DEFINE</a>, <a href="lnghdefine_..._hundef_preprocessor_directive.htm">#UNDEF</a>, and <a href="lnghif_..._hendif_preprocessor_directive.htm">#IF...#ENDIF</a> constructs.</p>
<p>
Using preprocessor directives can produce variants quickly; however, such directives have the following drawbacks:</p>
<ul type=disc>
<li>
To use preprocessor directives, you bracket code, and extensive bracketing can increase the code’s complexity.</li>
<li>
Compile-time constants are available only in the program that creates them.</li>
</ul>

<h2><a name="dgmanaging_files_in_an_international_application"></a>Managing Files in an International Application</h2>
<p>
The Project Manager can help you organize an international application. In a project, you can integrate the parts of an application, such as forms, menus, programs, and reports. The project ensures that the parts are current when you build the application for its target market.</p>
<p>
Unlike .dbf files, text files such as query and program files don't have code page marks. This means that you must keep track of the code pages used by text files so that you can use the files properly. With the Project Manager, you can track the code pages used by text files. For details, see <a href="#dgspecifying_the_code_page_of_a_text_file">Specifying the Code Page of a Text File</a> earlier in this chapter.</p>
<h3>Distributing Locale-Specific Run-Time Files</h3>
<p>
If you're distributing your application along with the run-time version of Visual FoxPro, you might need to include a locale-specific <i>resource file</i>. This file contains the dialog boxes and other user-interface elements that Visual FoxPro uses to interact with the user. There is a different run-time resource file for each language in which Visual FoxPro is available.</p>
<p>
You would normally need to concern yourself about a locale-specific run-time resource only if all of the following are true:</p>
<ul type=disc>
<li>
You are including the run-time version of Visual FoxPro with your application.</li>
<li>
You are distributing your application to users who use a language different from the one in which you developed it. For example, if you develop in English for an English-speaking user base, you don't need to worry about including a locale-specific resource file. However, if you use the English version of Visual FoxPro to develop but are distributing your run-time application in a French-speaking country, you should consider including the run-time resource file.</li>
<li>
Your application displays Visual FoxPro dialog boxes, menus, or error messages. Typically, if you've designed and localized your own versions of these interface elements, you don't need to include the locate-specific resource file.</li>
</ul>
<p>
For information about distributing run-time files with your application, see Chapter 25, <a href="dgbuilding_an_application_for_distribution.htm">Building an Application For Distribution</a>, and Chapter 26, <a href="dgcreating_distribution_disks.htm">Creating Distribution Disks</a>.</p>
<p>
Run-time resource files are named using the format Vfpaaa.dll, where “aaa” is a three-letter code representing the language. For example, the code ENU stands for United States English, the code DEU stands for German, and the code FRA for French. The run-time resource files for these languages are therefore Vfpenu.dll, Vfpdeu.dll, and Vfpfra.dll, respectively.</p>
<p>
You must always include at least one run-time resource file, even if you don't intend to use any of the user interface elements in Visual FoxPro as part of your application. By default, Visual FoxPro includes the resource file that's provided with your copy of the program. For example, if you're developing an application using the United States version of Visual FoxPro, Visual FoxPro automatically includes Vfpenu.dll if you include run-time files with your application. If you have no reason to use a locale-specific resource file, you can simply distribute the default resource file as part of your application.</p>
<p>
When the application is installed, users can specify the run-time resource file to use by making an entry in the Windows system registry or by using a command-line switch.</p>
<p class=label>
<b>To specify a run-time resource file</b>
<ul type=disc>
<li>
In the command line that starts your application, include the L switch and the name of the resource file that you want to use (including a path if necessary). Do not put a space between the switch and the file name.<p class=tl>
For example, the following command specifies the file Vfpdeu.dll as the resource file:</P><pre><code>C:\Program Files\Microsoft Visual ;
Studio\Vfp98\MYAPP.EXE -LC:\Myapp\Vfpdeu.dll
</code></pre>
<p class=tl>
-or-</P></li>
<li>
Set the Windows registry on the user’s machine (using code or an application such as Regedit.exe) to point to the resource file to use. The registry entry containing the name of the run-time resource file is:<p class=tl>
HKEY_CLASSES_ROOT\VisualFoxProRuntime.5\RuntimeResource.5</P></li>
</ul>
<p>
When the run-time application starts, Visual FoxPro searches for a resource file, first according to the L switch and then according to the Registry setting. If neither of these settings specifies a locale-specific resource file, Visual FoxPro uses the current system (Windows) locale to dynamically construct a DLL file name. Therefore, if the locale-specific resource file for your application matches the system locale on the user’s version of Windows, you don't need to explicitly specify the resource file name. However, it's always safest not to rely on the system default if you want to be sure that the proper file is loaded.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual FoxPro Foxtlib Control</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngvisual_foxpro_foxtlib_control"></a><sup></sup>Visual FoxPro Foxtlib Control</h1>
<p>
<a href="lngvisual_foxpro_foxtlib_controlsa.htm">See Also</a></p>
<p>
Visual FoxPro includes the Foxtlib ActiveX control (Foxtlib.ocx, located in the Windows System folder) which you can add to and distribute with your applications. ActiveX controls are added to a form in an application with the Visual FoxPro <a href="ctlole_container_control.htm">OLE container control</a>.</p>
<p>
The Foxtlib ActiveX control lets you access type library information from within a Visual FoxPro application. Type libraries are used to store class information (properties, methods, and so on) for Automation servers that you can create in Visual FoxPro and Visual Basic. Type libraries are typically viewed by Object Browsers and referenced in other application such as Visual Basic or Visual C++ to allow direct object references to be made and compiled into code.</p>
<p>
When you create an Automation server in the Project Manager or with the BUILD DLL or BUILD EXE commands, a type library (.tlb) file is generated. The type library file contains information about each class, such as the number of parameters it requires and their data types, the control’s return types, references to help topics or help files that provide more information about the class, and so on.</p>
<p>
Typelib.vcx, a visual class library example that utilizes the Foxtlib ActiveX control, is installed in the Visual Studio …\Samples\Vfp98\Classes directory.</p>
<p>
For information about creating custom Automation servers, see <a href="dgadding_ole.htm#dgcreating_ole_servers">Creating Automation Servers</a> in Chapter 16, “Adding OLE.”</p>
<p>
The following table lists the methods available for the Foxtlib ActiveX control. For additional information about these methods, consult the Microsoft Developers Network.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=49%><b>Method</b></td>
<td class=label width=51%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=49%>TLLoadTypeLib(<i>cTypeLibName</i>)</td>
<td width=51%>Loads the type library file specified with <i>cTypeLibName. CTypeLibName</i> must be a fully qualified path and file name. A positive integer handle to the type library file is returned; a value of 0 or less is returned if the type library file cannot be loaded.</td>
</tr>
<tr valign=top>
<td width=49%>TLRelease(<i>nTypeLibHandle</i>)</td>
<td width=51%>Releases the loaded type library whose handle is specified with <i>nTypeLibHandle</i>.</td>
</tr>
<tr valign=top>
<td width=49%>TLGetTypeInfoCount(<i>nTypeLibHandle</i>)</td>
<td width=51%>Returns the number of type infos in the type library whose handle is specified with <i>nTypeLibHandle</i>.</td>
</tr>
<tr valign=top>
<td width=49%>TLGetDocumentation(<i>nTypeLibHandle</i>,<br>
<i>aDocArray</i>, <i>nMemberID</i>, <i>nType</i>)</td>
<td width=51%>Creates a three-element array containing information about the type library whose handle is specified with <i>nTypeLibHandle</i>. <i>ADocArray</i> specifies the name of the array that is created.<p>
The 3-element array includes details on the name, document string, and help file for the member specified with <i>nMemberID</i>. <i>nType</i> specifies the member type: 0 -TypeInfo, or 1 - Member.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>TLGetTypeInfo(<i>nTypeLibHandle</i>,<br>
<i>nTypeInfoNum</i>)</td>
<td width=51%>Returns an integer index for use with the TLGetTypeAttr(&nbsp;), TlGetNames(&nbsp;), and TLGetFuncDesc(&nbsp;) methods. TLGetTypeInfo(&nbsp;) returns 0 if the method fails.<p>
Use TLGetTypeInfo(&nbsp;) to enumerate (beginning at 0) through all type infos in the type library whose handle is specified with <i>nTypeLibHandle</i>. <i>NTypeInfoNum</i> specifies the type info for which the index is returned.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>TLGetTypeAttr(<i>nTypeInfoIndex</i>,<br>
<i>aTypeArray</i>)</td>
<td width=51%>Creates a one-dimensional array containing information about a type info. <i>nTypeInfoIndex</i> specifies the index number for the type info. <i>aTypeArray</i> specifies the name of the array that is created.<p>
The information contained in each element of the array is listed below:</p>
<p>
&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp; GUID.<br>
  2&nbsp;&nbsp;&nbsp; LocaleID.<br>
  3&nbsp;&nbsp;&nbsp; Reserved.<br>
  4&nbsp;&nbsp;&nbsp; Constructor ID.<br>
  5&nbsp;&nbsp;&nbsp; Destructor ID.<br>
  6&nbsp;&nbsp;&nbsp; Reserved.<br>
  7&nbsp;&nbsp;&nbsp; Instance Size.<br>
  8&nbsp;&nbsp;&nbsp; Type Kind.<br>
  9&nbsp;&nbsp;&nbsp; Number of functions.<br>
10&nbsp;&nbsp;&nbsp; Number of variables/members.<br>
11&nbsp;&nbsp;&nbsp; Number of implemented interfaces.<br>
12&nbsp;&nbsp;&nbsp; Size of type's virtual function table.<br>
13&nbsp;&nbsp;&nbsp; Byte alignment of an instance of this type.<br>
14&nbsp;&nbsp;&nbsp; Flags.<br>
15&nbsp;&nbsp;&nbsp; Major version number.<br>
16&nbsp;&nbsp;&nbsp; Minor version number.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>TIGetFuncDesc(<i>nTypeInfoIndex</i>,<br>
<i>aTypeArray</i>, <i>nFunctionIndex</i>, <i>aParmsArray</i>)</td>
<td width=51%>Returns information for a function specified in a type info.<p>
The type info is specified with <i>nTypeInfoIndex</i>.</p>
<p>
<i>nFunctionIndex</i> specifies the index of the function for which information is returned. <i>nFunctionIndex</i> can be between 0&nbsp; and the function count returned by <i>aTypeArray</i>[9] of the TLGetTypeAttr(&nbsp;) method. </p>
<p>
TIGetFuncDesc(&nbsp;) creates two arrays whose names are specified with <i>aTypeArray</i> and <i>aParmsArray</i>.</p>
<p>
The <i>aTypeArray</i> contains information about the function. The <i>aParmsArray</i> array contains a listing of the parameters used by the function.</p>
<p>
The information contained in each element of <i>aTypeArray</i> is listed below:</p>
<p>
&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp; ID.<br>
  2&nbsp;&nbsp;&nbsp; Func kind - Specifies if the function is virtual, static, or dispatch-only.<br>
  3&nbsp;&nbsp;&nbsp; Invoke kind - Invocation kind; indicates if this is a property function and if so, what type. <br>
  4&nbsp;&nbsp;&nbsp; Callconv - Specifies the function's calling convention. <br>
  5&nbsp;&nbsp;&nbsp; Total number of parameters.<br>
  6&nbsp;&nbsp;&nbsp; Number of optional parameters.<br>
  7&nbsp;&nbsp;&nbsp; For FUNC_VIRTUAL, specifies the offset in the virtual function table.<br>
  8&nbsp;&nbsp;&nbsp; Count of permitted Scodes.<br>
  9&nbsp;&nbsp;&nbsp; Flags.</p>
<p>
The Func kinds are listed below:</p>
<p>
FUNC_PUREVIRTUAL<br>
The function is accessed through the virtual function table and takes an implicit “this” pointer.</p>
<p>
FUNC_VIRTUAL<br>
The function is accessed the same as PUREVIRTUAL, except the function has an implementation.</p>
<p>
FUNC_NONVIRTUAL<br>
The function is accessed by static address and takes an implicit “this” pointer.</p>
<p>
FUNC_STATIC<br>
The function is accessed by static address and does not take an implicit “this” pointer.</p>
<p>
FUNC_DISPATCH<br>
The function can be accessed only through IDispatch.</p>
<p>
The Invoke kinds are listed below:</p>
<p>
INVOKE_FUNC<br>
The member is called using normal function invocation syntax.</p>
<p>
INVOKE_PROPERTYGET<br>
The function is invoked using normal property access syntax.</p>
<p>
INVOKE_PROPERTYPUT<br>
The function is invoked using property value assignment syntax. A typical programming language might represent changing a property in the same way as assignment; for example, <i>Object</i>.<i>Property</i> := <i>Value</i>.</p>
<p>
INVOKE_PROPERTYPUTREF<br>
The function is invoked using property reference assignment syntax.</p>
<p>
The Flags are listed below:</p>
<p>
FUNCFLAG_FRESTRICTED = 1<br>
The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.</p>
<p>
FUNCFLAG_FSOURCE = 0x2<br>
The function returns an object that is a source of events.</p>
<p>
FUNCFLAG_FBINDABLE = 0x4<br>
The function supports data binding.</p>
<p>
FUNCFLAG_FDISPLAYBIND = 0x10<br>
The function is displayed to the user as bindable, that is, FUNC_FBINDABLE must also be set.</p>
<p>
FUNCFLAG_FDEFAULTBIND = 0x20<br>
The function that best represents the object. Only one function in a type info may have this attribute.</p>
<p>
FUNCFLAG_FHIDDEN= 0x40<br>
The function should not be displayed to the user, though it exists and is bindable.</p>
</td>
</tr>
<tr valign=top>
<td width=49%>TIGetNames(<i>nTypeInfoIndex</i>,<br>
<i>aNameArray</i>, <i>aTypeArray</i>[1])</td>
<td width=51%>Returns the number of functions for a type info and creates an array <p>
The type info is specified with <i>nTypeInfoIndex</i>, and <i>aNameArray</i> specifies the name of the array that is created.</p>
<p>
<i>aTypeArray</i>[1] specifies the ID returned from the <i>aTypeArray</i> array in the TIGetFuncDesc(&nbsp;) method.</p>
</td>
</tr>
</table><br>
</BODY>
</HTML>

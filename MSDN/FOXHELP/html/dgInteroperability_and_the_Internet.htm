<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interoperability and the Internet</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dginteroperability_and_the_internet"></a><sup></sup>Chapter 31: Interoperability and the Internet</h1>
<p>
Microsoft Visual FoxPro 6.0 now supports OLE drag-and-drop, which allows you to move data between Visual FoxPro and other applications, and within Visual FoxPro applications.</p>
<p>
Visual FoxPro 6.0 also makes it easy to create applications for use with the Internet and other Windows-based applications such as Microsoft Excel and Microsoft Visual Basic. Visual FoxPro 6.0 lets you create <a href="glsactive_document.htm">Active Documents</a> that can be hosted by Active Document hosts such as Internet browsers.</p>
<p>
Visual FoxPro 6.0 features improved Automation servers to work better with the Internet, Microsoft Transaction Server, and the Active Desktop.</p>
<p>
This chapter covers:</p>
<ul type=disc>
<li>
<a href="#newole_drag_and_drop">OLE Drag-and-Drop</a></li>
<li>
<a href="#newactive_documents">Active Documents</a></li>
<li>
<a href="#newserver_improvements">Server Improvements</a></li>
</ul>

<h2><a name="newole_drag_and_drop"></a><sup></sup>OLE Drag-and-Drop</h2>
<p>
Visual FoxPro now supports OLE drag-and-drop, a powerful and useful tool that allows you to move data between other applications that support OLE drag-and-drop (such as Visual FoxPro, Visual Basic, the Windows Explorer, Microsoft Word and Excel, and so on). In a distributed Visual FoxPro application, you can move data between controls in the application, or between controls and other Window applications that support OLE drag-and-drop.</p>
<p>
Note that previous versions of Visual FoxPro supported a programmatic drag-and-drop feature for controls, allowing you to move controls on a form. This form of drag and drop is still supported in Visual FoxPro 6.0. However, if you choose to implement drag and drop support in your applications, you should exclusively use either programmatic drag and drop for controls or OLE drag-and-drop – don't mix the two types of drag and drop support.</p>
<p>
Understanding some of the basics of OLE drag-and-drop applications makes it easier to take full advantage of their features.</p>
<h3>Dragging and Dropping Data</h3>
<p>
The mouse is used to drag and drop data between applications and controls. For example, you can select a set of files in the Windows Explorer. You can then press and hold the mouse button down while dragging the files, then release the mouse button to drop them onto the Visual FoxPro Project Manager, or you can select text in a Word document and drop the text into a text box on a Visual FoxPro form. During the OLE drag-and-drop operation, the mouse cursor changes to indicate that an OLE drag-and-drop operation is in effect.</p>
<h3>Drag Source</h3>
<p>
The application or control from which data is moved is called the drag source.</p>
<h4>Drag Source Properties, Events, and Methods</h4>
<p>
The following table lists the properties, events, and methods available for an OLE drag source.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=39%><b>Property, Event, or Method</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolecompletedrag_event.htm">OLECompleteDrag Event</a></td>
<td width=61%>Occurs when data is dropped on the drop target or the OLE drag-and-drop operation is canceled.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledrag_method.htm">OLEDrag Method</a></td>
<td width=61%>Starts an OLE drag-and-drop operation.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledragpicture_property.htm">OLEDragPicture Property</a></td>
<td width=61%>Specifies the picture displayed under the mouse pointer during an OLE drag-and-drop operation. You can specify a picture file of type .bmp, .dib, .jpg, .gif, .ani, .cur, and .ico.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngoledragmode_property.htm">OLEDragMode Property</a></td>
<td width=61%>Specifies how a drag source manages OLE drag operations.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolegivefeedback_event.htm">OLEGiveFeedBack Event</a></td>
<td width=61%>Occurs after every OLEDragOver event. Allows the drag source to specify the type of OLE drag-and-drop operation and the visual feedback.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolesetdata_event.htm">OLESetData Event</a></td>
<td width=61%>Occurs when a drop target calls the GetData method and there is no data in a specified format on the OLE drag-and-drop DataObject.</td>
</tr>
<tr valign=top>
<td width=39%><a href="lngolestartdrag_event.htm">OLEStartDrag Event</a></td>
<td width=61%>Occurs when the OLEDrag method is called.</td>
</tr>
</table><br>
<h3>Drop Target</h3>
<p>
The application or control to which the data is moved is called the <i>drop target</i>.</p>
<h4>Drop Target Properties and Events</h4>
<p>
The following table lists the properties, events, and methods available for an OLE drop target.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b>Property or Event</b></td>
<td class=label width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><a href="lngoledragdrop_event.htm">OLEDragDrop Event</a></td>
<td width=60%>Occurs when data is dropped on a drop target and the drop target's OLEDropMode property is set to 1 – Enabled.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngoledragover_event.htm">OLEDragOver Event</a></td>
<td width=60%>Occurs when data is dragged over a drop target and the drop target's OLEDropMode property is set to 1 – Enabled.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngoledropeffects_property.htm">OLEDropEffects Property</a></td>
<td width=60%>Specifies the type of drop operations an OLE drop target supports.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngoledrophasdata_property.htm">OLEDropHasData Property</a></td>
<td width=60%>Specifies how a drop operation is managed.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngoledropmode_property.htm">OLEDropMode Property</a></td>
<td width=60%>Specifies how a drop target manages OLE drop operations.</td>
</tr>
</table><br>
<h3>Moving Data</h3>
<p>
To perform a drag-and-drop operation to move data using the default (left) mouse button, select the data you want to move in the drag source. After selecting the data, press and hold down the mouse button as you move the mouse pointer over the drop target. Release the mouse button to drop the data onto the drop target. During the OLE drag-and-drop operation, the mouse cursor changes to indicate that an OLE drag-and-drop operation is in effect.</p>
<p>
You can also click the non-default (right) mouse button on the data in a drag source and drag it to a drop target. Depending on the drop target, a context menu may be displayed when you drop the data on the drop target. The context menu contains a set of options that let you choose how the data is processed by the drop target.</p>
<h3>Copying Data</h3>
<p>
You can also copy data from a drag source and paste it in a drop target. Press the Ctrl key as you click the mouse on the data selected in the drag source. The mouse cursor displays a plus sign (+) while the mouse is dragged to indicate a Copy operation is in effect.</p>
<h3>Targets and Sources Not Supporting OLE drag-and-drop</h3>
<p>
You can only move or copy data from a drag source that supports OLE drag-and-drop, and the drop target must also support OLE drag-and-drop. Note that while a drop target may support OLE drag-and-drop, the drop target doesn't have to accept the data you attempt to drop on it. For example, the data you're moving or copying may be in a format the drop target doesn't support. During a drag-and-drop operation, the mouse cursor changes to a No Drop symbol (a slashed circle) to indicate the mouse is positioned over an area of an application or control where the data cannot be dropped.</p>
<h3>Canceling an Operation</h3>
<p>
To cancel the OLE drag-and-drop operation, press ESC during the operation.</p>
<h2>Design Time OLE drag-and-drop Support</h2>
<p>
Design time support for OLE drag-and-drop in Visual FoxPro makes developing applications even faster than previous versions. OLE drag-and-drop makes it easy to drop files into the Project Manager and the Visual FoxPro designers from the Windows Explorer. Text can be easily moved or copied from other applications to the Command Window, the Visual FoxPro text editors, and the Properties Window.</p>
<p>
The following table lists the Visual FoxPro design time features that support OLE drag-and-drop with a description of the support.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Interface item</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%>Command Window</td>
<td width=67%>Drop target for files, drag source and drop target for text.<p>
If a file created in Visual FoxPro is dropped on the Command window, the file is opened with the appropriate Visual FoxPro command. For example, if a database is dropped on the Command window, Visual FoxPro issues the OPEN DATABASE and MODIFY DATABASE commands to open the file for modification. If a table is dropped on the Command window, the table is opened with the USE … AGAIN and BROWSE commands. If SET EXCLUSIVE is ON, the table is opened for exclusive use. If SET EXCLUSIVE is OFF, the table is opened for shared use.</p>
<p>
Other Visual FoxPro files are opened with the appropriate MODIFY command — forms are opened with MODIFY FORM, queries are opened with MODIFY QUERY, text and header (.H) files are opened with MODIFY FILE, and so on.</p>
<p>
If a file that has been created in another application is dropped on the Command window, the file is opened in the application with which it is associated. For example, dropping a Microsoft Excel spreadsheet on the Command window starts Excel and opens the spreadsheet.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Project Manager</td>
<td width=67%>Drop target for files.<p>
Files are added to the appropriate Project Manager categories, based on their file extensions. If a file with an extension Visual FoxPro does not recognize is dropped on the Project Manager, the file is added to the Other category. </p>
<p>
If a table contained in a database is dropped on the Project Manager, the database is added to the Databases category of the Data item and is marked as Excluded. If a free table is dropped on the Project Manager, the table is added to the Free Tables category of the Data item and is marked as Excluded. If a database is dropped on the Project Manager, the database is added to the Databases category of the Data item and is marked as Excluded.</p>
<p>
While OLE drag-and-drop makes it easy to add files to the Project Manager, remember that the Project Manager automatically adds any referenced files to the project when you build the project. For example, if a program you add to the project executes a second program, the second program is automatically added to the project when the project is built. It isn't necessary to manually add the second program to the project.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Text<br>
Editors</td>
<td width=67%>Drag source and drop target for text.<p>
Text editors include editing windows opened with MODIFY COMMAND, MODIFY FILE, and MODIFY MEMO, the Command window, snippet editing windows in the Form, Class, Menu, and Data Environment Designers, and the Stored Procedure editor in the Database Designer.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Debugger</td>
<td width=67%>Drag source and drop target for text.<p>
The Watch window text box and Name list are drag sources and drop targets for text. The Trace window and the Debug Output window are drag sources for text.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Database Designer</td>
<td width=67%>Drop target for files.<p>
Dropping a table onto the Database Designer adds the table to the current database.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Class Designer</td>
<td width=67%>Drop target for text and files.<p>
By default, dropping text on a container object in the Class Designer creates a label with the text as the value of its Caption property. You can change the default control created when text is dropped on the Form Designer in the Field Mapping Tab of the Options Dialog Box.</p>
<p>
If you drop text onto a non-container control (a CheckBox, CommandButton, Header, Label, or OptionButton control), the control's Caption property is set to the text.</p>
<p>
Dropping a graphics file (.ani, .bmp, .cur, .gif, .ico, or .jpg) onto the Class Designer creates an Image control with the Picture property set to the name of the graphics file.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Data Environment Designer</td>
<td width=67%>Drop target for files.<p>
Dropping a table onto the Data Environment Designer adds the table to the data environment. Dropping a database onto the Data Environment Designer displays the Add Table or View dialog, allowing you to add a table or view to the data environment.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Query Designer</td>
<td width=67%>Drop target for files.<p>
Dropping a table onto the Query Designer adds the table to the query. Dropping a database onto the Query Designer displays the Add Table or View dialog, allowing you to add a table or view to the query.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>View Designer</td>
<td width=67%>Drop target for files.<p>
Dropping a table onto the View Designer adds the table to the view. Dropping a database onto the View Designer displays the Add Table or View dialog, allowing you to add a table or view to the view.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Properties window</td>
<td width=67%>Drop target for text.<p>
You can drop text onto the text box that appears at the top of the Properties window when a design time property is selected.</p>
</td>
</tr>
<tr valign=top>
<td width=33%>Component Gallery</td>
<td width=67%>Drag source and drop target for files.<p>
You can drag objects out of the Component Gallery and drop them onto the Form Designer. You can also drag files out of the Component Gallery and drop them onto the Project Manager.</p>
<p>
Files can be dropped on the Component Gallery.</p>
</td>
</tr>
</table><br>
<h2>Run-Time OLE drag-and-drop Support</h2>
<p>
OLE drag-and-drop support is available at run time for Visual FoxPro controls and the text editor. The controls and the text editor support OLE drag-and-drop interactively at run time, and the controls provide programmatic support at run time. The <a href="lngdataobject_object.htm">DataObject object</a> provides programmatic OLE drag-and-drop support for the controls.</p>
<p>
Two modes of OLE drag-and-drop are available for Visual FoxPro controls: intrinsic mode and manual mode. In intrinsic mode, Visual FoxPro intrinsically handles an OLE drag-and-drop operation. In manual mode, OLE drag-and-drop operations are handled programmatically. The events that occur are determined by the OLE drag-and-drop mode. For more information, see the section, "Intrinsic and Manual OLE drag-and-drop Modes."</p>
<h3>Drag and Drop in Previous Versions of Visual FoxPro</h3>
<p>
Previous versions of Visual FoxPro supported programmatic drag-and-drop for controls, allowing you to move controls on a form. This form of drag and drop is still supported. If you use the default settings for the OLEDragMode and OLEDropMode properties, your existing applications will run as before without any changes.</p>
<h3>The DataObject Object</h3>
<p>
The <a href="lngdataobject_object.htm">DataObject object</a> is a container for data being transferred from an OLE drag source to an OLE drop target, and exists only for the duration of an OLE drag-and-drop operation. The DataObject object cannot be created programmatically and references to it become invalid once the OLE drag-and-drop operation is completed. The DataObject is passed as the oDataObject parameter in the OLEStartDrag, OLEDragOver, OLEDragDrop, and OLESetData events.</p>
<p>
The DataObject can store multiple sets of data, each in a different format. The existence of a specific format in the DataObject can be determined with the GetFormat method. See the <a href="lnggetformat_method.htm">GetFormat Method</a> for a listing of the formats supported by the DataObject.</p>
<h4>DataObject Object Methods</h4>
<p>
The DataObject object has methods that allow you to programmatically manipulate the data being dragged and dropped. The following table lists the methods available at run time for the DataObject.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=23%><b>Method</b></td>
<td class=label width=77%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=23%><a href="lngcleardata_method.htm">ClearData</a></td>
<td width=77%>Clears all data and data formats from the OLE drag-and-drop DataObject object.</td>
</tr>
<tr valign=top>
<td width=23%><a href="lnggetdata_method.htm">GetData</a></td>
<td width=77%>Retrieves data from the OLE drag-and-drop DataObject object.</td>
</tr>
<tr valign=top>
<td width=23%><a href="lnggetformat_method.htm">GetFormat</a></td>
<td width=77%>Determines if data in a specified format is available on the OLE drag-and-drop DataObject.</td>
</tr>
<tr valign=top>
<td width=23%><a href="lngsetdata_method.htm">SetData</a></td>
<td width=77%>Places data and its format on the OLE drag-and-drop DataObject.</td>
</tr>
<tr valign=top>
<td width=23%><a href="lngsetformat_method.htm">SetFormat</a></td>
<td width=77%>Places a data format without data on the OLE drag-and-drop DataObject.</td>
</tr>
</table><br>
<h3>Intrinsic and Manual OLE drag-and-drop Modes</h3>
<p>
Visual FoxPro supports two OLE drag-and-drop modes for controls: intrinsic and manual. In intrinsic mode, OLE drag-and-drop operations are handled by Visual FoxPro. In manual mode, OLE drag-and-drop operations are under programmatic control.</p>
<h4>Intrinsic OLE drag-and-drop Mode</h4>
<p>
Intrinsic OLE drag-and-drop mode can be implemented in an application to provide standard OLE drag-and-drop support without any additional programming.</p>
<p>
<b>To implement intrinsic OLE drag-and-drop support for a control</b>
<ol>
<li>
Set its OLEDragMode property to <b>1</b> – Automatic, allowing the control to act as an OLE drag source.<br><br></li>
<li>
Set the control's OLEDropMode property to <b>1</b> – Enabled, to allow the control to act as an OLE drop target.</li>
</ol>
<p>
For intrinsic OLE drag-and-drop operations, Visual FoxPro determines if the drop target supports the format of the data being dropped on it; if the drop target supports the format, the drop occurs, otherwise the drop is not allowed.</p>
<p>
The following table lists the Visual FoxPro controls and the data formats they support as drag sources in intrinsic mode. Note that CF_TEXT is text, such as text you would enter in a text box, and CFSTR_VFPSOURCEOBJECT is an object type reference to a Visual FoxPro control or object. For the controls below that support the CF_TEXT data format, you can drag text from the text portion of the control.</p>
<p class=label>
<b>Drag Source Data Formats</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=55%><b><br>
Control</b></td>
<td class=label width=45%><b>Data Format (defined in Foxpro.h)</b></td>
</tr>
<tr valign=top>
<td width=55%>Container, Image, Line, PageFrame, and Shape</td>
<td width=45%>CFSTR_VFPSOURCEOBJECT</td>
</tr>
<tr valign=top>
<td width=55%>CommandButton and Label</td>
<td width=45%>CFSTR_VFPSOURCEOBJECT and CF_TEXT</td>
</tr>
<tr valign=top>
<td width=55%>CheckBox, ComboBox, EditBox, ListBox, Spinner, and TextBox</td>
<td width=45%>CFSTR_VFPSOURCEOBJECT, CF_TEXT, and CFSTR_OLEVARIANT</td>
</tr>
</table><br>
<p>
The Visual FoxPro controls and data formats they support as drop targets in intrinsic mode are listed in the following table. For the controls listed in this table, you can drop text onto the text portion of the control. The text is inserted at the insertion point.</p>
<p class=label>
<b>Drop Target Data Formats</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=56%><b>Control</b></td>
<td class=label width=44%><b>Data Format</b></td>
</tr>
<tr valign=top>
<td width=56%>EditBox and ComboBox (When the ComboBox Style property is set to 0 - Dropdown Combo)</td>
<td width=44%>CF_TEXT</td>
</tr>
<tr valign=top>
<td width=56%>Spinner and TextBox</td>
<td width=44%>CFSTR_OLEVARIANT</td>
</tr>
</table><br>
<h4>Manual OLE drag-and-drop Mode</h4>
<p>
There may be cases where you'd like to control the type of data that can be dropped on a drop target, or provide additional functionality for a drag-and-drop operation. For example, you can convert data to a format supported by the drop target, or you can display a dialog that asks the user if they're sure they want to drop the data on the drop target. In cases such as these, override the intrinsic OLE drag-and-drop support to provide greater control over drag-and-drop operations.</p>
<p>
To implement manual OLE drag-and-drop support for a control, override the drag or drop events or methods you want to control to by writing your own event or method code. Include the NODEFAULT keyword in the event or method code to override the intrinsic Visual FoxPro drag-and-drop behavior.</p>
<p>
Backward compatibility (no OLE drag support) is provided for existing applications when OLEDragMode is set to 0 (the default) and you do not include additional OLE drag-and-drop coding.</p>

<h2><a name="newactive_documents"></a><sup></sup>Active Documents</h2>
<p>
Visual FoxPro 6.0 allows you to create Active Documents. Active Documents enable you to view non-HTML documents in a Web browser host such as Microsoft Internet Explorer. Active Document technology allows you to view multiple types of documents from multiple sources within a single Active Document host.</p>
<p>
An Active Document is a specific type of OLE embeddable document. It displays in the entire client area of an Active Document host and does menu merging with the host. The Active Document is full-frame and always in-place active.</p>
<p>
The following are some of the features that Active Documents provide:
<ul type=disc>
<li>
Active documents are always in-place active.<br><br></li>
<li>
Active Document menu and toolbar commands can be routed to the Active Document host.<br><br></li>
<li>
Active Documents provide seamless integration with other web pages when viewed in Internet Explorer.<br><br></li>
<li>
Active Documents provide an evolutionary step along the migration path from pure Visual FoxPro client applications to Active Platform applications that use a client interface based on HTML.</li>
</ul>
<h3>Creating an Active Document</h3>
<p>
Visual FoxPro Active Documents are easy to create. A Visual FoxPro Active Document, like any other Visual FoxPro application, can manipulate data, run forms, reports, and labels, instantiate classes, and run code.</p>
<p>
A Visual FoxPro Active Document is an application (.app) created from a Visual FoxPro project. Earlier versions of Visual FoxPro allowed you to create applications, so you may already be familiar with creating applications. For more information about creating applications, see Chapter 13, <a href="dgcompiling_an_application.htm">Compiling an Application</a>, in the <i>Programmer's Guide</i>.</p>
<p>
Any application can be run in Internet Explorer. However, only applications based on the ActiveDoc base class, described below, support the properties, events, and methods that provide communication with the Active Document host.</p>
<h4>The ActiveDoc Base Class</h4>
<p>
Visual FoxPro Active Documents differ slightly from other applications (.app). The most notable difference is that the “main file” for an Active Document must be set to a class based on the ActiveDoc base class. Other types of applications require that the main file be a program or a form.</p>
<p>
A class based on the ActiveDoc base class is created with the Class Designer and serves as the basis for all Visual FoxPro Active Documents. The ActiveDoc base class provides properties, events, and methods for an Active Document, and provides communication with the Active Document host. For example, the ContainerRelease event occurs when an Active Document is released by its host. You can place code in the ContainerRelease event to close files, complete transactions, and perform other clean up duties before the Active Document is released.</p>
<p>
<b>To set the main file to a class based on the ActiveDoc base class</b>
<ol>
<li>
Add the visual class library (.vcx) containing the class based on the ActiveDoc base class to the project.<br><br></li>
<li>
Expand the visual class library (.vcx) hierarchy by clicking the plus (+) box to the left of the library name, or right-click the library and choose <b>Expand All</b> from the shortcut menu.<br><br></li>
<li>
Select the class based on the ActiveDoc base class. Right-click the class and choose <b>Set Main</b> from the shortcut menu.</li>
</ol>
<h4>The ActiveDoc Object</h4>
<p>
When a Visual FoxPro Active Document is run in Internet Explorer, an ActiveDoc object is created from the ActiveDoc base class. The ActiveDoc object responds to events and method calls for the ActiveDoc base class.</p>
<h4>ActiveDoc Object Properties, Events, and Methods</h4>
<p>
The following tables list the properties, events, and methods supported by the ActiveDoc object.</p>
<p class=label>
<b>Properties</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=31%><a href="lngbaseclass_property.htm">BaseClass</a></td>
<td width=34%><a href="lngcaption_property.htm">Caption</a></td>
<td width=35%><a href="lngclass_property.htm">Class</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngclasslibrary_property.htm">ClassLibrary</a></td>
<td width=34%><a href="lngcomment_property.htm">Comment</a></td>
<td width=35%><a href="lngcontainerreleasetype_property.htm">ContainerReleaseType</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngname_property.htm">Name</a></td>
<td width=34%><a href="lngparent_property.htm">Parent</a></td>
<td width=35%><a href="lngparentclass_property.htm">ParentClass</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngtag_property.htm">Tag</a></td>
<td width=34%></td>
<td width=35%></td>
</tr>
</table><br>
<p class=label>
<b>Events</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=31%><a href="lngcommandtargetexec_event.htm">CommandTargetExec</a></td>
<td width=34%><a href="lngcommandtargetquery_event.htm">CommandTargetQuery</a></td>
<td width=35%><a href="lngcontainerrelease_event.htm">ContainerRelease</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngdestroy_event.htm">Destroy</a></td>
<td width=34%><a href="lngerror_event.htm">Error</a></td>
<td width=35%><a href="lnghidedoc_event.htm">HideDoc</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lnginit_event.htm">Init</a></td>
<td width=34%><a href="lngrun_event.htm">Run</a></td>
<td width=35%><a href="lngshowdoc_event.htm">ShowDoc</a></td>
</tr>
</table><br>
<p class=label>
<b>Methods</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=31%><a href="lngaddproperty_method.htm">AddProperty</a></td>
<td width=34%><a href="lngreadexpression_method.htm">ReadExpression</a></td>
<td width=35%><a href="lngreadmethod_method.htm">ReadMethod</a></td>
</tr>
<tr valign=top>
<td width=31%><a href="lngresettodefault_method.htm">ResetToDefault</a></td>
<td width=34%><a href="lngsaveasclass_method.htm">SaveAsClass</a></td>
<td width=35%><a href="lngwriteexpression_method.htm">WriteExpression</a></td>
</tr>
</table><br>
<h4>Active Document Event Sequences</h4>
<p>
When an Active Document application is opened in Internet Explorer, the Active Document runs and the Active Document’s Init event occurs. Then the Active Document’s ShowDoc event occurs. When Internet Explorer successfully hosts the Active Document, the Active Document’s Run event occurs. In general, the Active Document program code should be placed in this event. Typically, the Run event contains code that executes your menu code, executes the main form in the application, and contains READ EVENTS to start event processing, just like a standard Visual FoxPro application.</p>
<p>
You can put setup code in your Active Document’s Init event, but if the code takes too long to execute, the Active Document container might generate a time out error. If you do put setup code in the Init event, it should not require user interaction or create a user interface.</p>
<p>
The HideDoc event occurs if you navigate from an Active Document, and the ShowDoc event occurs when you navigate back to the Active Document.</p>
<p>
If Internet Explorer is closed when the Active Document is hosted, the HideDoc event occurs, and then the ContainerRelease Event occurs. The ContainerRelease event also occurs if the Active Document falls out of the Internet Explorer 3.0 cache.</p>
<p>
When the ContainerRelease event occurs, the program code in the event can do the following:
<ul type=disc>
<li>
Close files, clean up after itself, and issue QUIT to close the Active Document.<br><br></li>
<li>
Set the <a href="lngcontainerreleasetype_property.htm">ContainerReleaseType</a> property to 0 (the default), which opens the Active Document in the Visual FoxPro runtime. The Active Document continues to run in the main Visual FoxPro window of the runtime.</li>
</ul>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The CommandTargetExec event occurs if Internet Explorer 4.0 is about to close the Active Document or navigate from the Active Document. In this case, the CommandTargetExec event <i>nCommandID</i> parameter is set to 37, and you can set the <i>eArgOut</i> parameter to false (.F.) to prevent the Active Document from being closed by Internet Explorer. Internet Explorer 3.0 doesn’t support the CommandTargetExec event.</p>
<h4>New Active Document Functions</h4>
<p>
Two new functions, <a href="lnggethostlp_rp.htm">GETHOST(&nbsp;)</a> and <a href="lngishostedlp_rp.htm">ISHOSTED(&nbsp;)</a>, have been added to Visual FoxPro to provide information about an Active Document’s host. GETHOST(&nbsp;) returns an object reference to an Active Document’s host. ISHOSTED(&nbsp;) returns a logical value indicating if an Active Document is hosted.</p>
<h3>Changes to the Form Object</h3>
<p>
The user interface in a Visual FoxPro Active Document is defined by its program code. In general, a Visual FoxPro form should be displayed as the initial user interface. The following form properties, events, and methods have been added to Visual FoxPro to allow forms to work well in Active Documents.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Properties</b></td>
<td class=label width=33%></td>
<td class=label width=34%></td>
</tr>
<tr valign=top>
<td width=33%><a href="lngalwaysonbottom_property.htm">AlwaysOnBottom</a></td>
<td width=33%><a href="lngcontinuousscroll_property.htm">ContinuousScroll</a></td>
<td width=34%><a href="lnghscrollsmallchange_property.htm">HscrollSmallChange</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="lngscrollbars_property.htm">Scrollbars</a></td>
<td width=33%><a href="lngtitlebar_property.htm">TitleBar</a></td>
<td width=34%><a href="lngviewportheight_property.htm">ViewPortHeight</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="lngviewportleft_property.htm">ViewPortLeft</a></td>
<td width=33%><a href="lngviewporttop_property.htm">ViewPortTop</a></td>
<td width=34%><a href="lngviewportwidth_property.htm">ViewPortWidth</a></td>
</tr>
<tr valign=top>
<td width=33%><a href="lngvscrollsmallchange_property.htm">VScrollSmallChange</a></td>
<td width=33%></td>
<td width=34%></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Events</b></td>
<td class=label width=33%></td>
<td class=label width=34%></td>
</tr>
<tr valign=top>
<td width=33%><a href="lngscrolled_event.htm">Scrolled</a></td>
<td width=33%></td>
<td width=34%></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Methods</b></td>
<td class=label width=33%></td>
<td class=label width=34%></td>
</tr>
<tr valign=top>
<td width=33%><a href="lngsetviewport_method.htm">SetViewPort</a></td>
<td width=33%></td>
<td width=34%></td>
</tr>
</table><br>
<h4>Forms in Active Documents</h4>
<p>
Forms in an Active Document are displayed in the client area provided by Internet Explorer. To make a form display entirely within the Internet Explorer client area, set the following form properties to these values:</p>
<p>
BorderStyle = 0 (No Border)<br>
TitleBar = 0 (Off)<br>
WindowState = 2 (Maximized)</p>
<p>
Also, if scrollbars should be displayed when the Internet Explorers client area is smaller than the Active Document viewport (the area determined by a rectangle that encloses all the controls on the form), the Scrollbars property should be set to the following value:</p>
<p>
ScrollBars = 3 (Both horizontal and vertical scrollbars)</p>
<h3>Menus in Active Documents</h3>
<p>
If menu code is run in a Visual FoxPro Active Document, the menus are merged with the Internet Explorer menus, following specific menu merging rules. Once the Active Document menus are merged with those of Internet Explorer, the Active Document menus appear as if they would in a traditional Visual FoxPro application.</p>
<h4>Menu Negotiation</h4>
<p>
In Visual FoxPro 6.0 and earlier versions, you can specify menu negotiation behavior for menus when OLE visual editing occurs for an ActiveX control contained in a Visual FoxPro form. In Visual FoxPro 6.0, menu negotiation has been enhanced to provide control over where menus in an Active Document appear in Internet Explorer.</p>
<p>
When an Active Document is open in Internet Explorer, it shares menu space Internet Explorer and menus are merged together. Menus from Internet Explorer are merged with menus from the Active Document. The merged menus fall into six groups, and each group is owned by Internet Explorer, the Active Document, or both.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Group</b></td>
<td class=label width=67%><b>Owner</b></td>
</tr>
<tr valign=top>
<td width=33%>File Group</td>
<td width=67%>Internet Explorer</td>
</tr>
<tr valign=top>
<td width=33%>EditGroup</td>
<td width=67%>Active Document</td>
</tr>
<tr valign=top>
<td width=33%>Container Group</td>
<td width=67%>Internet Explorer</td>
</tr>
<tr valign=top>
<td width=33%>Object Group</td>
<td width=67%>Active Document</td>
</tr>
<tr valign=top>
<td width=33%>Window Group</td>
<td width=67%>Internet Explorer</td>
</tr>
<tr valign=top>
<td width=33%>Help Group</td>
<td width=67%>Active Document or Internet Explorer</td>
</tr>
</table><br>
<h4>Help Menu Merging</h4>
<p>
The Active Document shares its Help menu with Internet Explorer. If Internet Explorer has a help menu, the Active Document can add its help menu to the end of Internet Explorer’s help menu.</p>
<h4>Language Enhancements for Menu Negotiation</h4>
<p>
The DEFINE PAD NEGOTIATE clause has been enhanced to allow you specify how menu negotiation occurs for menus in an Active Document. A new second option, <i>cObjectPosition</i>, specifies the location of a menu title in the Internet Explorer menu bar.</p>
<p>
See <a href="lngdefine_pad.htm">DEFINE PAD</a> in the <i>Language Reference</i> for more information.</p>
<h4>Menu Negotiation and the Menu Designer</h4>
<p>
The <a href="cmdprompt_options_dialog_box.htm">Prompt Options</a> dialog box in the Menu designer has been enhanced, allowing you to specify menu negotiation for menus created in the Menu Designer and included in Active Documents. An <b>Object</b> drop-down has been added; this drop-down specifies how the menu title is negotiated when a Visual FoxPro Active Document is hosted in Internet Explorer.</p>
<h4>Menu Negotiation Information</h4>
<p>
The menu negotiation information is stored in the Location field of a menu’s .mnx file. The following table lists the values in this field and the type of menu negotiation for each value. See <a href="lngdefine_pad.htm">DEFINE PAD</a> for more information about <i>cContainerPosition</i> and <i>cObjectPosition</i>.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=14%><b>Value</b></td>
<td class=label width=26%><b><i>cContainerPosition</i></b></td>
<td class=label width=60%><b><i>cObjectPosition</i></b></td>
</tr>
<tr valign=top>
<td width=14%>0</td>
<td width=26%>None</td>
<td width=60%>None</td>
</tr>
<tr valign=top>
<td width=14%>1</td>
<td width=26%>Left</td>
<td width=60%>None</td>
</tr>
<tr valign=top>
<td width=14%>2</td>
<td width=26%>Middle</td>
<td width=60%>None</td>
</tr>
<tr valign=top>
<td width=14%>3</td>
<td width=26%>Right</td>
<td width=60%>None</td>
</tr>
<tr valign=top>
<td width=14%>4</td>
<td width=26%>None</td>
<td width=60%>Left</td>
</tr>
<tr valign=top>
<td width=14%>5</td>
<td width=26%>Left</td>
<td width=60%>Left</td>
</tr>
<tr valign=top>
<td width=14%>6</td>
<td width=26%>Middle</td>
<td width=60%>Left</td>
</tr>
<tr valign=top>
<td width=14%>7</td>
<td width=26%>Right</td>
<td width=60%>Left</td>
</tr>
<tr valign=top>
<td width=14%>8</td>
<td width=26%>None</td>
<td width=60%>Middle</td>
</tr>
<tr valign=top>
<td width=14%>9</td>
<td width=26%>Left</td>
<td width=60%>Middle</td>
</tr>
<tr valign=top>
<td width=14%>10</td>
<td width=26%>Middle</td>
<td width=60%>Middle</td>
</tr>
<tr valign=top>
<td width=14%>11</td>
<td width=26%>Right</td>
<td width=60%>Middle</td>
</tr>
<tr valign=top>
<td width=14%>12</td>
<td width=26%>None</td>
<td width=60%>Right</td>
</tr>
<tr valign=top>
<td width=14%>13</td>
<td width=26%>Left</td>
<td width=60%>Right</td>
</tr>
<tr valign=top>
<td width=14%>14</td>
<td width=26%>Middle</td>
<td width=60%>Right</td>
</tr>
<tr valign=top>
<td width=14%>15</td>
<td width=26%>Right</td>
<td width=60%>Right</td>
</tr>
</table><br>
<p>
Note that in Visual FoxPro 6.0 the Location field size was increased from 1 digit to 2 digits. This is the only change made in Visual FoxPro 6.0 to the <a href="contable_file_structure_lp.dbfrp.htm">structures of tables</a>, including database (.dbc), form (.scx), label (.lbx), project (.pjx), report (.frx), and visual class library (.vcx) tables.</p>
<h4>CommandTargetExec and CommandTargetQuery Events</h4>
<p>
Two Active Document events, CommandTargetExec and CommandTargetQuery, allow you to manage Internet Explorer menu selections (and other Internet Explorer events) from an Active Document. The CommandTargetExec event occurs when Internet Explorer notifies an Active Document of a command (including a menu command) to be executed. The CommandTargetQuery event occurs when Internet Explorer updates its user interface. See <a href="lngcommandtargetexec_event.htm">CommandTargetExec Event</a> and <a href="lngcommandtargetquery_event.htm">CommandTargetQuery Event</a> in the <i>Language Reference</i> for more information about each event.</p>
<h3>Running Active Documents</h3>
<p>
Visual FoxPro Active Documents require Vfp6.exe and Vfp6run.exe, or Vfp6run.exe, Vfp6r.dll, and Vfp6renu.dll (enu denotes the English version) to run. These files must be installed and registered on the computer on which Internet Explorer is installed. When Visual FoxPro is installed, Vfp6.exe is installed in the Visual FoxPro directory, and the remaining files are installed in the Windows 95 Windows\System directory or the Windows NT WinNT\System32 directories.</p>
<h4>Running Active Documents from the Tools Menu</h4>
<p>
The Visual FoxPro Tools menu contains a <b>Run Active Document</b> command that you can choose to display the <b>Run Active Document</b> dialog box. In this dialog you can specify how an Active Document is run. The following options are available:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Option</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%>In Browser (Default)</td>
<td width=68%>The Active Document is run in Internet Explorer using the Visual FoxPro runtime.</td>
</tr>
<tr valign=top>
<td width=32%>Stand Alone</td>
<td width=68%>The Active Document is run as a stand-alone application with the Visual FoxPro runtime.</td>
</tr>
<tr valign=top>
<td width=32%>In Browser (Debugging)</td>
<td width=68%>The Active Document is run in Internet Explorer using the Visual FoxPro executable (Vfp6.exe). Debugging capabilities, the Command window, and all features of the Visual FoxPro development environment are available.</td>
</tr>
<tr valign=top>
<td width=32%>Stand Alone (Debugging)</td>
<td width=68%>The Active Document is run as a stand alone application with the Visual FoxPro executable (Vfp6.exe), providing debugging capabilities, the Command window, and all features of the Visual FoxPro development environment.<p>
Choosing this option is identical to issuing DO &lt;Active Doc Name&gt; in the Command window.</p>
</td>
</tr>
</table><br>
<p>
You can also run an Active Document by opening the Active Document from the Open File dialog box in Internet Explorer, or by navigating to the Active Document from another Web page with a hyperlink to the Active Document.</p>
<h4>The Visual FoxPro Runtime and Active Documents</h4>
<p>
From Visual FoxPro you can run an Active Document by double-clicking the Active Document icon in the Windows Explorer. You can also run an Active Document from a Visual FoxPro runtime application. The Visual FoxPro runtime consists of two files, Vfp6run.exe and Vfp6r.dll. Both must be installed and registered to run Active Documents. The runtime can also be used to run other Visual FoxPro distributable files such as compiled Visual FoxPro programs (.fxp files).</p>
<p>
Vfp6run.exe, once registered, can be used to run Active Documents (and other Visual FoxPro distributable files) directly.</p>
<p class=label>
<b>Syntax for Vfp6run.exe</b></p>
<p>
VFP6RUN [/embedding] [/regserver] [/unregserver] [/security] <br>
 &nbsp; [/s] [/version] [<i>FileName</i>]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
/embedding</p>
<p class=indent>
Loads Vfp6run.exe as an active document server. In this mode, Vfp6run.exe is registered as a COM server capable of creating a Visual FoxPro Active Document object ("Visual.FoxPro.Application.6"). Without this argument, Vfp6run.exe doesn’t act as a COM server.</p>
<p class=dt>
/regserver</p>
<p class=indent>
Registers Vfp6run.exe.</p>
<p class=dt>
/unregserver</p>
<p class=indent>
Unregisters Vfp6run.exe.</p>
<p class=dt>
/security</p>
<p class=indent>
Displays the Application Security Settings dialog box, allowing you to specify the security settings for Active Documents and other application (.app) files. For more information, see the next section, "Active Document Security."</p>
<p class=dt>
/s</p>
<p class=indent>
Silent. Specifies that an error is generated if Vfp6run.exe is unable to load the Vfp6r.dll runtime component.</p>
<p class=dt>
/version</p>
<p class=indent>
Displays Vfp6run.exe and the Vfp6r.dll version information.</p>
<p class=dt>
<i>FileName</i></p>
<p class=indent>
Specifies the Visual FoxPro file to run.</p>
<p>
Vfp6run.exe requires that the runtime support dynamic link library Vfp6r.dll be installed and registered. To register Vfp6r.dll, run Regsvr32 with the name of the runtime:</p>
<pre><code>Regsvr32 Vfp6r.dll
</code></pre>
<h3>Active Document Security</h3>
<p>
The /security option for the Vfp6run.exe Visual FoxPro runtime allows you to set security levels for Active Documents and other application (.app) files. Executing <code>Vfp6run.exe /security</code> displays the <b>Application Security Settings</b> dialog box where you can set security levels for Active Documents and other .app files.</p>
<p>
The following options are available in the Application Security Settings dialog box:</p>
<h4>Hosted</h4>
<p>
Choose this application mode setting to specify a security level for an Active Document or application (.app) that is run from an Active Document container such as Internet Explorer.</p>
<h4>Non-hosted</h4>
<p>
Choose this application mode setting to specify a security level for an Active Document or application (.app) that is run from the Window Explorer by double-clicking its icon, or is run with the Visual FoxPro Vfp6run.exe runtime.</p>
<h4>High (most secure)</h4>
<p>
Choose this setting to prevent an Active Document or application (.app) from being run. </p>
<h4>Medium (more secure)</h4>
<p>
Choose this setting to display a warning before an Active Document or application (.app) is run. Medium is the default setting for non-hosted Active Documents and applications.</p>
<h4>Low (no security)</h4>
<p>
Choose this setting to run an Active Document or application (.app) without displaying a warning. Low is the default setting for hosted Active Documents and applications.</p>
<h4>Reset</h4>
<p>
Restores the default security level for the currently selected application mode (hosted or non-hosted).</p>
<h4>OK</h4>
<p>
Saves the settings you choose in the dialog box.</p>
<h3>Internet Explorer Notes</h3>
<p>
To increase performance, Internet Explorer 3.0 caches the last four pages visited in memory. This means that an Active Document can fall out of the Internet Explorer 3.0 cache, causing the ContainerRelease event to occur. Internet Explorer 4.0 does not have a page cache, so the ContainerRelease event occurs as soon as you navigate from an Active Document.</p>
<h3>Active Document Sample</h3>
<p>
The Visual FoxPro Solutions Sample application includes a sample named “Create Active Documents for the web” that demonstrates many of the Active Document features.</p>
<p>
<b>To run the Solutions Sample application</b>
<ul type=disc>
<li>
Enter the following in the <b>Command</b> window:<pre><code>DO (HOME(2) + 'solution\solution')
</code></pre>
<p class=tl>
&nbsp;–&nbsp;Or&nbsp;–&nbsp;</P></li>
</ul>
<ol>
<li>
From the <b>Program</b> menu, choose <b>Do</b>.<br><br></li>
<li>
Choose the …\<b>Samples\Vfp98\Solution</b> folder.<br><br></li>
<li>
Double-click <b>Solution.app</b>.</li>
</ol>
<p>
<b>To run the “Create Active Documents for the web” sample</b>
<ol>
<li>
After starting Solution.app, double-click <b>New Features for Visual FoxPro 6.0</b>.<br><br></li>
<li>
Click <b>Create Active Documents for the web</b> and then click the <b>Run Sample</b> button.</li>
</ol>
<p>
The “Create Active Documents for the web” sample allows you to open a project that contains all of the files necessary to create an Active Document from the project. When the project is open, you can examine the code in the Actdoc class to see how Active Document events are managed and how forms are run. Note that Actdoc, a class based on the ActiveDoc base class, is set as the main file in the project. An Active Document must have a class based on the ActiveDoc base class as its main file.</p>
<p>
You can also create build an Active Document from the project by choosing <b>Build</b> in the Project Manager. After the Active Document is built, choose <b>Run Active Document</b> from the <b>Tools</b> menu to run the Active Document.</p>

<h2><a name="newserver_improvements"></a><sup></sup>Automation Server Improvements</h2>
<p>
This topic describes improvements made to Visual FoxPro 6.0 Automation servers, and includes discussions of how Visual FoxPro Automation servers can work with products and technologies such as Microsoft Transaction Server and Microsoft Visual Basic.</p>
<p>
Visual FoxPro allows you to create Automation servers. An Automation server is a component application that exposes functionality that can be used and reused by other applications through Automation. For example, using Visual FoxPro you can create an Automation server that displays reusable forms (in an out-of-process .exe), or packages a complex routine into a simple component that other programmers can use. In addition, you could create one or more classes to handle enterprise-wide business rules. A client application that uses the business rule objects would pass input parameters in a method call, and the Automation server might then do a great deal of work, retrieving or storing data from various sources and performing complex calculations, before returning the answer.</p>
<p>
In Visual FoxPro, you can create either an <a href="glsout_of_process.htm">out-of-process</a> or an <a href="glsin_process.htm">in-process</a> Automation server. An <i>out-of-process </i>component is an executable (.exe) file that runs in its own process. Communication between a client application and an out-of-process server is therefore called <i>cross-process </i>communication. An <i>in-process </i>component is a dynamic-link library (.dll) file that runs in the same process address space as the client that calls it or in a Microsoft Transaction Server process.</p>
<p>
For more information about creating Visual FoxPro Automation servers, see <a href="dgadding_ole.htm#dgcreating_ole_servers">Creating Automation Servers</a>, in Chapter 16 of the <i>Programmer's Guide</i>.</p>
<h3>Visual FoxPro 6.0 Automation Server Improvements</h3>
<p>
The following topics describe the new and improved Visual FoxPro 6.0 Automation server features.</p>
<h3>Apartment Model Threading</h3>
<p>
Visual FoxPro Automation servers now support Apartment Model Threading. The Microsoft Transaction Server takes advantage of servers marked as apartment threaded and offers better thread protection and scalability.</p>
<p>
Each apartment model object (such as a Visual FoxPro Automation server) may only be entered by one thread, the thread that created the object (for example, called CoCreateInstance in Microsoft Visual C++. However, an object server (such as Microsoft Transaction Server) can support multiple objects, each being entered simultaneously by different threads. Common data held by the object server must be protected against thread collisions. The object server creates an apartment model object in the same thread that called CoCreateInstance. Calls to the object from the apartment thread are not marshaled.</p>
<p>
For more information about apartment model threading, search for “Apartment-Model Threading in Visual Basic” in the the MSDN library.</p>
<h4>User Interfaces and In-Process Servers</h4>
<p>
The new apartment model threading support requires that in-process .dll Automation servers not have user-interfaces. In Visual FoxPro 5.0, one could create (although it was not recommended) an in-process .dll Automation server that had a user-interface such as a form. The form could be used only for display because the form events are not supported. In Visual FoxPro 6.0, any attempts to create a user-interface in an in-process .dll Automation generates an error.</p>
<p>
An out-of-process .exe Automation server can have a user-interface. A new Visual FoxPro 6.0 function, <a href="lngsyslp2335rp___unattended_server_mode.htm">SYS(2335)</a>, has been added so you can disable modal events for an out-of-process .exe Automation server, which may be deployed remotely without intervention from a user. Modal events are created by user-defined modal forms, system dialogs, the MESSAGEBOX(&nbsp;) function and the WAIT command, and so on.</p>
<h3>Early (vtable) Binding</h3>
<p>
Visual FoxPro 6.0 now supports both early (vtable) binding as well as the existing IDispatch interface (together known as dual-interface support). Early (vtable) binding provides performance benefits for Automation controllers such as Visual Basic and the Microsoft Transaction Server that support early (vtable) binding.</p>
<h3>The Visual FoxPro Runtime Vfp6r.dll</h3>
<p>
A single Visual FoxPro 6.0 runtime, Vfp6r.dll, no longer services multiple in-process .dll Automation servers. Each in-process .dll now uses a separate instance of the Vfp6r.dll runtime. The following rules determine how in-process .dlls use the Vfp6r.dll runtime:
<ul type=disc>
<li>
The in-process .dll first called has exclusive use of the Vfp6r.dll runtime library (typically installed in the Windows 95 System folder or the Windows NT System32 folder).<br><br></li>
<li>
If an in-process .dll already has exclusive use of the Vfp6r.dll runtime, a renamed copy of the Vfp6r.dll runtime is created on disk and loaded into memory for each in-process .dll called. The Vfp6r.dll runtime is assigned a name based on that of the in-process .dll. For example, if an in-process .dll with the name Myserver.dll is called, a copy of the Vfp6r.dll runtime is renamed to Myserverr.dll (note the “r” appended to the name) and is loaded into memory to service the in-process .dll. <br><br></li>
<li>
Visual FoxPro runtimes are renamed only for in-process .dlls that run within the same process. This means that two separate clients, each running in their own process, can load two different Visual FoxPro in-process .dlls without the runtime being renamed. In this case, both Visual FoxPro in-process .dlls use Vfp6r.dll because the clients load in separate processes.<br><br></li>
<li>
Multiple Automation servers (created with OLEPUBLIC in DEFINE CLASS) in a single in-process .dll share the same Vfp6r.dll runtime. In this case, it’s possible that the Automation servers can affect each other by sharing public memory variables, setting the same SET commands, and so on. Be careful that multiple Automation servers in a single in-process .dll don’t interfere with each other.</li>
</ul>
<h3>Type Libraries</h3>
<p>
Visual FoxPro 6.0 now supports intrinsic (Visual FoxPro) properties, events, and methods in an Automation server’s type library. Only properties declared as Public are included in the type library; protected and hidden properties do not appear in the type library. Note that the Visual FoxPro Release method isn’t included in the type library because it already exists as a COM method.</p>
<p>
Both PUBLIC custom user-defined properties and methods appear in Visual FoxPro type libraries as long as they are marked Public. For methods, Visual FoxPro also includes a return value type (variant) and list of parameters (variants) parsed from the original method definition.</p>
<p>
Note that in Visual FoxPro 6.0 a single Help file can be designated the type library.</p>
<h3>Exception Handling</h3>
<p>
Visual FoxPro Automation servers are now more robust, so they can more gracefully terminate when an exception occurs. When exceptions occur in a Visual FoxPro 6.0 Automation server, the Automation server now sets the COM ErrorInfo object (via IErrorInfo) and cancels out of the current method. The Automation client has the option of releasing the Visual FoxPro Automation server or handling the exception, based on the information in the COM ErrorInfo object (and the client has access to the COM ErrorInfo object).</p>
<p>
A new function, COMRETURNERROR(&nbsp;), has been added to Visual FoxPro 6.0 to handle errors that occur on an Automation server. COMRETURNERROR(&nbsp;) can be used in the Error method, and populates the COM exception structure with information that Automation clients can use to determine the source of Automation server errors. For more information, see <a href="lngcomreturnerrorlp_rp.htm">COMRETURNERROR(&nbsp;)</a> in the <i>Language Reference</i>.</p>
<h3>Passing Arrays</h3>
<p>
Visual FoxPro 5.0 passes arrays to COM objects (such as Automation servers created in Visual FoxPro, Visual Basic, or Visual C) by value; the array elements are the same after a method call, and the COM object changes aren’t propagated to the elements on the client. This restriction prevents passing large amounts of data back and forth between Visual FoxPro 5.0 and COM objects.</p>
<p>
Also, the array passed to the COM object is assumed be a one-based array, meaning that the first element, row, and column in the array is referenced with 1 (for example, Myarray[1]). However, some COM objects require that the array passed is zero-based (the first element, row, and column in the array is referenced with 0; for example, Myarray[0]).</p>
<p>
A new Visual FoxPro 6.0 function, COMARRAY(&nbsp;), lets you specify how an array is passed to a COM object, and lets you specify if the array is zero or one-based. For more information, see <a href="lngcomarraylp_rp.htm">COMARRAY(&nbsp;)</a> in the <i>Language Reference</i>.</p>
<p>
Note that COMARRAY(&nbsp;) is only used when arrays are passed to COM objects using the following syntax:</p>
<pre><code>oComObject.Method(@MyArray)
</code></pre>
<p>
If the @ token is omitted, only the first element of the array is passed to the COM object and COMARRAY(&nbsp;) has no effect. This is the same behavior for earlier versions of Visual FoxPro.</p>
<h3>Building .dlls and .exes from Projects</h3>
<p>
Because in-process .dll and out-of-process .exe Automation servers are invoked through class instantiation, it isn’t necessary to specify a <a href="glsmain_file.htm">main file</a> for them. In Visual FoxPro 6.0 you can now build an in-process .dll or an out-of-process .exe Automation server without first specifying a main file in the Project Manager.</p>
<h3>Language</h3>
<p>
The following table lists the properties and functions added to Visual FoxPro 6.0 to make it easier to manage Automation clients and servers. See each topic for further information.</p>

<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=40%><b><a name="newserver_improvements_language"></a>New Server Improvements language</b></td>
<td class=label width=60%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcomarraylp_rp.htm">COMARRAY(&nbsp;) Function</a></td>
<td width=60%>Specifies how arrays are passed to COM objects.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcomclassinfolp_rp.htm">COMCLASSINFO(&nbsp;) Function</a></td>
<td width=60%>Returns registry information about a COM object such as a Visual FoxPro Automation server.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcreateobjectexlp_rp.htm">CREATEOBJECTEX(&nbsp;) Function</a></td>
<td width=60%>Creates an instance of a registered COM object (such as a Visual FoxPro Automation server) on a remote computer. For a Visual FoxPro in-process .dll, you can use Microsoft Transaction Server to create an instance of the .dll on a remote computer.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngcomreturnerrorlp_rp.htm">COMRETURNERROR(&nbsp;) Function</a></td>
<td width=60%>Populates the COM exception structure with information that Automation clients can use to determine the source of Automation server errors.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngservername_property.htm">ServerName Property</a></td>
<td width=60%>Contains the full path and file name for an Automation server. The ServerName property is a property of the Application object.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngstartmodeproperty.htm">StartMode Property</a></td>
<td width=60%>Contains a numeric value that indicates how the instance of Visual FoxPro was started.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngsyslp2334rp___automation_server_startup.htm">SYS(2334) – Automation Server Invocation Mode</a></td>
<td width=60%>Returns a value indicating how a Visual FoxPro automation server method was invoked.</td>
</tr>
<tr valign=top>
<td width=40%><a href="lngsyslp2335rp___unattended_server_mode.htm">SYS(2335) – Unattended Server Mode</a></td>
<td width=60%>Enables or disables support for modal states in distributable Visual FoxPro .exe Automation servers.</td>
</tr>
</table><br>
<h3>Automation Server Programming Notes</h3>
<p>
The following section provides additional programming information for Automation servers.</p>
<h4>The Application Object</h4>
<p>
The <a href="ctlapplication_object.htm">Application object</a> isn't exposed in an Automation server's type library. This prevents access to the Application object's <a href="lngdocmd_method.htm">DoCmd</a> and <a href="lngeval_method.htm">Eval</a> methods, which can potentially provide access to the entire Visual FoxPro language. You can expose the Application object by creating a custom property and setting its value to the Application object, or provide a method that accesses the Application object.</p>
<h3>Automation Server Samples</h3>
<p>
Visual FoxPro 6.0 includes two sample ISAPI Automation servers, FoxWeb and FoxIS. These samples manage sending selected records of Visual FoxPro data as HTML back to an Internet browser. For more information about these samples, see <a href="smpfox_isapi_ole_server_sample.htm">FoxISAPI: An OLE Server Sample</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetFormat Method</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngsetformat_method"></a><sup></sup>SetFormat Method</h1>
<p>
<a href="lngsetformat_methodat.htm">Applies To</a> &nbsp; <a href="lngsetformat_methodsa.htm">See Also</a></p>
<p>
Places a data format in the OLE drag-and-drop DataObject. Available at run time only.</p>
<p class=label>
<b>Syntax</b></p>
<p>
<i>oDataObject</i>.SetFormat(<i>nFormat</i> | <i>cFormat</i>)</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>nFormat</i> | <i>cFormat</i></p>
<p class=indent>
Specifies the format of the data placed on the DataObject. The following table lists the values for some common data formats with a description of each format. You can also create your own format by specifying a unique character string for <i>cFormat</i>.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=37%><b>Data format*</b></td>
<td class=label width=27%><b><i>nFormat</i><br>
| <i>cFormat</i></b></td>
<td class=label width=36%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=37%>CF_TEXT</td>
<td width=27%>1</td>
<td width=36%>Text format.</td>
</tr>
<tr valign=top>
<td width=37%>CF_OEMTEXT</td>
<td width=27%>7</td>
<td width=36%>Text format containing characters in the OEM character set.</td>
</tr>
<tr valign=top>
<td width=37%>CF_UNICODETEXT</td>
<td width=27%>13</td>
<td width=36%>Unicode text format, available only under Windows NT. </td>
</tr>
<tr valign=top>
<td width=37%>CF_FILES or CF_HDROP</td>
<td width=27%>15</td>
<td width=36%>A handle that identifies a list of files, such as a set of files dragged from the Windows Explorer.</td>
</tr>
<tr valign=top>
<td width=37%>CFSTR_OLEVARIANTARRAY</td>
<td width=27%>"OLE Variant Array"</td>
<td width=36%>An array. Multiple values can be transferred in a single drag-and-drop operation with this format.<p>
For example, this format can be used to drag a set of items in a list box to another list box.</p>
</td>
</tr>
<tr valign=top>
<td width=37%>CFSTR_OLEVARIANT</td>
<td width=27%>"OLE Variant"</td>
<td width=36%>A variant. All data types in Visual FoxPro are represented as variants. This format can be used to drag and drop Visual FoxPro data without losing the data type.</td>
</tr>
<tr valign=top>
<td width=37%>CFSTR_VFPSOURCEOBJECT</td>
<td width=27%>"VFP Source Object"</td>
<td width=36%>A reference to the Visual FoxPro drag source object.</td>
</tr>
</table><br>
<p class=mini>
* Defined in FOXPRO.H.</p>
<p class=label>
<b>Remarks</b></p>
<p>
You can place a data format in the DataObject before placing the corresponding data on the DataObject. If you place a data format in the DataObject without corresponding data and invoke the GetData method in the OLEDragDrop event, the OLESetData event is executed for the drag source. The drag source can then place the data on the DataObject with the SetData method in the OLESetData event.</p>
<p>
OLE drag-and-drop performance can be improved by placing just the data formats on the DataObject when a large amount of data is placed on the DataObject, when using data formats that aren't natively supported by Visual FoxPro, or when using a large number of formats.</p>
<p>
The SetFormat method can only be executed in the OLEStartDrag and OLESetData events.</p>
</BODY>
</HTML>

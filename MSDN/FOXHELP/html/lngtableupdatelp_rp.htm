<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TABLEUPDATE( ) Function</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngtableupdatelp_rp"></a><sup></sup>TABLEUPDATE(&nbsp;) Function</h1>
<p>
<a href="lngtableupdatelp_rpx.htm">Example</a> &nbsp; <a href="lngtableupdatelp_rpsa.htm">See Also</a></p>
<p>
Commits changes made to a buffered row or a buffered table or cursor.</p>
<p class=label>
<b>Syntax</b></p>
<p>
TABLEUPDATE([<i>nRows</i> [, <i>lForce</i>]] [, <i>cTableAlias</i> | <i>nWorkArea</i>]<br>
[, <i>cErrorArray</i>])</p>
<p class=label>
<b>Returns</b></p>
<p>
Logical</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>nRows</i></p>
<p class=indent>
Specifies which changes made to the table or cursor are committed. If nRows is 0 (or .F.) and row or table buffering is enabled, only changes made to the current record in the table or cursor are committed.</p>
<p class=indent>
If nRows is 1 and table buffering is enabled, changes made to all records are committed to the table or cursor. If nRows is 1 (or .T.) and row buffering is enabled, only changes made to the current record in the table or cursor are committed.</p>
<p class=tl>
If <i>nRows</i> is 2, changes made to the table or cursor are committed in the same manner as when <i>nRows</i> is 1. However, an error doesn't occur when a change cannot be committed, and Visual FoxPro continues to process any remaining records in the table or cursor. If <i>cErrorArray</i> is included, an array containing error information is created when an error occurs.</P><p class=tl>
The default value for <i>nRows</i> is 0.</P><p class=dt>
<i>lForce</i></p>
<p class=indent>
Determines whether changes made to the table or cursor by another user on a network are overwritten. If <i>lForce</i> is true (.T.), any changes made to the table or cursor by another user on a network are overwritten.</p>
<p class=tl>
If <i>lForce</i> is false (.F.), Visual FoxPro commits changes to the table or cursor, starting with the first record and continuing towards the end of the table or cursor. If a record modified by another user on the network is encountered, Visual FoxPro generates an error.</P><p class=tl>
When Visual FoxPro generates the error, you can handle the error through an ON ERROR routine, and the ON ERROR routine can issue TABLEUPDATE(&nbsp;) with <i>lForce</i> set to true (.T.) to commit changes to the record. Alternately, if a transaction is in progress, the ON ERROR routine can handle the error and then issue ROLLBACK to revert the table or cursor to its original state.</P><p class=tl>
The default for <i>lForce</i> is false (.F.).</P><p class=dt>
<i>cTableAlias</i></p>
<p class=indent>
Specifies the alias of the table or cursor in which the changes are committed. If you include a table or cursor alias, you must include the <i>lForce</i> argument.</p>
<p class=dt>
<i>nWorkArea</i></p>
<p class=indent>
Specifies the work area of the table or cursor in which the changes are committed. If you include a work area, you must include the <i>lForce</i> argument.</p>
<p class=dt>
<i>cErrorArray</i></p>
<p class=indent>
Specifies the name of an array created when <i>nRows</i> is 2 and changes to a record cannot be committed. The array contains a single column containing the record numbers of the records for which changes could not be committed. If you include an array name, you must include either a table or cursor alias <i>cTableAlias</i> or a work area number <i>nWorkArea</i>.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If an error other than a simple commit error occurs while updating records, the first element of <i>cErrorArray</i> will contain –1 and you can then use AERROR(&nbsp;) to determine the why the changes could not be committed.</p>
<p class=label>
<b>Remarks</b></p>
<p>
TABLEUPDATE(&nbsp;) returns true (.T.) if changes to all records are committed; otherwise, TABLEUPDATE(&nbsp;) returns false (.F.). If you specify 0 or 1 for <i>nRow</i>, the record pointer remains on the record where changes could not be committed and can issue AERROR(&nbsp;) to determine why the changes could not be committed.</p>
<p>
TABLEUPDATE(&nbsp;) cannot commit changes made to a table or cursor that does not have row or table buffering enabled. If you issue TABLEUPDATE(&nbsp;) and row or table buffering is not enabled, Visual FoxPro generates an error message. However, TABLEUPDATE(&nbsp;) can still commit changes to a table or cursor that has validation rules. Use CURSORSETPROP(&nbsp;) to enable or disable row and table buffering.</p>
<p>
Changes are committed to the table or cursor open in the currently selected work area if TABLEUPDATE(&nbsp;) is issued without the optional <i>cTableAlias</i> or <i>nWorkArea</i> arguments.</p>
<p>
If table buffering is used and multiple records are updated, TABLEUPDATE(&nbsp;) moves the record pointer to the last record updated.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Calling TABLEUPDATE(&nbsp;) for a local table or view that doesn’t use key fields generates a long WHERE clause to find the update row. The default number of fields supported in the WHERE clause is 40. If you receive the error <a href="err1812.htm">1812 - SQL: Statement Too Long</a>, you should either use a key field for the update or increase the complexity of the WHERE clause with <a href="lngsyslp3055rp___for_and_where_clause_complexity.htm">SYS(3055)</a>. If you use SYS(3055), increase its value to 8 times the number of fields in the table:</p>
<pre><code>= SYS(3055, 8 * MIN(40, FCOUNT( ))
</code></pre>
</BODY>
</HTML>

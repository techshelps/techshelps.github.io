<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Coverage Engine Object</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="newcoverage_engine_object"></a>Coverage Engine Object</h1>
<p>
<a href="newcoverage_engine_objectsa.htm">See Also</a></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Category</b></td>
<td width=73%>Reporting</td>
</tr>
<tr valign=top>
<td class=label width=27%><b>Class</b></td>
<td width=73%>cov_engine</td>
</tr>
<tr valign=top>
<td class=label width=27%><b>Class Library</b></td>
<td width=73%>coverage.vcx</td>
</tr>
<tr valign=top>
<td class=label width=27%><b>Base Class</b></td>
<td width=73%>formset</td>
</tr>
<tr valign=top>
<td class=label width=27%><b>Parent Class</b></td>
<td width=73%>scov_formset</td>
</tr>
</table><br>
<p>
This formset is not a subclass of _formset therefore the Coverage Profiler runs in both Microsoft Visual FoxPro 5.0 and Visual FoxPro 6.0.</p>
<p class=label>
<b>Remarks</b></p>
<p>
This class is subclassed from the Visual FoxPro formset class. Though it provides no visible components it provides the datatsession of a formset class and includes provisions for feedback on coverage log processing through <a href="lngwait.htm">WAIT WINDOW NOWAIT</a> and <a href="lngmessageboxlp_rp.htm">MESSAGEBOX(&nbsp;)</a> and subclasses of MSComDlg.CommonDialog. This formset has one member, a toolbar, that remains hidden while providing a container for custom objects such as CusRegistry or Dialog subclasses. Cov_standard, a subclass of cov_engine, provides a sample user interface, the <a href="dgapplication_development_and_developer_productivity.htm#newcoverage_profiler_application">Coverage Profiler application</a>. You can subclass either cov_engine or cov_standard to fit your requirements.</p>
<h3>aAddIns array Property</h3>
<p>
This one-dimensional array holds a list of registered AddIn files.</p>
<p>
<B><b>Default </b></B>.F. (the array will be dimensioned [1])</p>
<h3>aFileTypes array Property</h3>
<p>
This two-dimensional array holds a list of the file types (extensions) the Coverage Profiler handles. The first column holds the extension listed in the coverage text log (such as .fxp or .vct). The second column holds the extension of the matching source code file (such as .prg or .vcx) that the Coverage Profiler must locate in order to analyze the code. This array is filled at startup by the FillFileTypeArray(&nbsp;) method.</p>
<p>
<B><b>Default: </b></B>.F. (the array will be dimensioned [1, 2])</p>
<h3>cAddIn Property</h3>
<p>
Specifies the AddIn last run successfully. At startup, this property can be set by an AddIn passed to the Coverage Profiler application as a parameter and run in the Init. Otherwise, if addin file names have been previously stored to the registry, this property is filled using the aAddIns array.</p>
<p>
<B><b>Default: </b></B>""</p>
<h3>cBaseFontName Property</h3>
<p>
Specifies a base font name for any interface elements. The default for this attribute when no preference has been saved to the registry is the #DEFINE constant COV_DEFAULT_BASE_FONTNAME in COV_TUNE.H.</p>
<p>
<B><b>Default: </b></B>MS Sans Serif</p>
<h3>cBaseMonoFontName Property</h3>
<p>
Specifies a base font name for any interface elements that require a monospaced font.</p>
<p>
The default for this attribute when no preference has been saved to the registry is, first, any Visual FoxPro resource file entry for <a href="lngmodify_command.htm">MODIFY COMMAND</a> window preferences. Otherwise, the coverage engine looks for a Visual FoxPro registry entry for the Trace window. If one of these is not found, the coverage engine uses the #DEFINE constant COV_DEFAULT_MONO_FONTNAME in COV_TUNE.H.</p>
<p>
<B><b>Default: </b></B>Courier New</p>
<h3>cCovFilesAlias Property</h3>
<p>
Specifies the name of the cursor holding names of source files the Coverage Profiler should not locate and analyze. The engine fills this cursor with a set of file names, using the CreateCoverageFileNameCursor(&nbsp;) and FillCoverageFileNameCursor(&nbsp;) methods. You can use the coverage engine abstract AdjustCoverageFileNameCursor(&nbsp;) method to add file names to the set.</p>
<p>
<B><b>Default: </b></B>IgnoredFiles</p>
<h3>cDefaultWritePath Property</h3>
<p>
Specifies the path to cSourceFile. Supplies the default path for any file output of the Coverage Profiler.</p>
<p>
<B><b>Default: </b></B>""</p>
<h3>cMarkExecuted Property</h3>
<p>
Specifies the character(s) that mark lines of code that executed according to the current coverage log. Although this property defaults to an empty string, the engine uses the SetMarks(&nbsp;) procedure to adjust the length of cMarkExecuted and cMarkNotExecuted to equal lengths so the appearance of marked code is unspoiled. At startup, therefore, cMarkExecuted’s value is SPACE(4), to match the default length of cMarkNotExecuted.</p>
<p>
<B><b>Default:</b></B> ""</p>
<h3>cMarkNotExecuted Property</h3>
<p>
Specifies the character(s) that marks lines of code not run during the current coverage log.</p>
<p>
<B><b>Default:</b></B> |+SPACE(3)</p>
<h3>cSavedSkipFiles Property</h3>
<p>
Specifies the name of the table (.dbf) file that contains the list of source files skipped during coverage analysis.</p>
<p>
<B><b>Default:</b></B> ""</p>
<h3>cSavedTargetDBF Property</h3>
<p>
Specifies the name of the table (.dbf) file that contains the coverage results.</p>
<p>
<B><b>Default:</b></B> ""</p>
<h3>cSkippedAlias Property</h3>
<p>
Specifies the name of the cursor, which holds names of source files the Coverage Profiler could not locate or analyze. The engine fills this cursor using the CreateSkippedCursor(&nbsp;) method and saves it to disk using the SaveSkippedCursor(&nbsp;) method.</p>
<p>
<B><b>Default:</b></B> SkippedFiles</p>
<h3>cSourceAlias Property</h3>
<p>
Specifies the name of the source, which holds the appended and processed records stored by the coverage text log. The engine creates this cursor in the CreateSourceCursor(&nbsp;) method, and provides the abstract AdjustSourceCursor(&nbsp;) method so you can add fields, index tags, and so on. Then the engine proceeds to fill the cursor with records from the text log in the FillSourceCursor(&nbsp;) method.</p>
<p>
<B><b>Default:</b></B> FromLog</p>
<h3>cSourceFile Property</h3>
<p>
Specifies the name of the file to be analyzed. You can specify this value as the first parameter of the DO (_COVERAGE) WITH command.</p>
<p>
<B><b>Default:</b></B> ""</p>
<h3>cSuspendedLog Property</h3>
<p>
Specifies the name of the current coverage log (SET(COVERAGE)) if the Coverage Profiler suspends coverage data logging. This property is set with the SuspendCoverage(&nbsp;) method.</p>
<p>
<B><b>Default:</b></B> ""</p>
<h3>cTargetAlias Property</h3>
<p>
Specifies the target cursor, which holds the names of classes, source file names, coverage-marked procedure source code, and coverage statistics. The engine creates this cursor in the CreateTargetCursor(&nbsp;) method, and provides the abstract AdjustTargetCursor(&nbsp;) method so you can add fields, tags, and so on. Then the coverage engine locates and analyses source code in the FillTargetCursor(&nbsp;) method.</p>
<p>
<B><b>Default:</b></B> MarkedCode</p>
<h3>iLenExecuting</h3>
<p>
Specifies the length of the field in the source work file that contains information about the object and method name that is running covered lines of code, when the #DEFINE COV_TOPSPEED in COV_TUNE.H is false (.F.). You can decrease the default value, with care, if your fully-qualified object names and your method names are short, and if you wish to conserve the disk space used by the Profiler work files. See COV_TUNE.H for more information about this value. See <a href="newconserving_disk_space_during_coverage.htm">Conserving Disk Space during Coverage Runs</a> for more information on using iLenExecuting.</p>
<p>
<B><b>Default:</b></B> 115</p>
<h3>iLenHostFile</h3>
<p>
Specifies the length of the Hostfile field in source, target, and project work files that holds the name of the fully-qualified Visual FoxPro file holding the source code, when the #DEFINE COV_TOPSPEED in COV_TUNE.H is false (.F.). You can decrease the default value, with care, if your source files don't have long paths and if you wish to conserve the disk space used by the Profiler work files. See COV_TUNE.H for more information about this value. See <a href="newconserving_disk_space_during_coverage.htm">Conserving Disk Space during Coverage Runs</a> for more information on using iLenHostFile.</p>
<p>
<B><b>Default:</b></B> 115</p>
<h3>iLenObjClass</h3>
<p>
Specifies the length of a field in the source and target work files that holds information about the object executing Covered lines of code, when the #DEFINE COV_TOPSPEED in COV_TUNE.H is false (.F.). To conserve the disk space used by the Profiler work files, you can decrease the default value, with care, if your object names are short. You can do this even when object names are fully-qualified by their container hierarchy. See COV_TUNE.H for more information about this value. See <a href="newconserving_disk_space_during_coverage.htm">Conserving Disk Space during Coverage Runs</a> for more information on using iLenObjClass.</p>
<p>
<B><b>Default:</b></B> 115</p>
<h3>lBaseFontBold Property</h3>
<p>
Specifies a base font attribute (bold) for any displayed characters.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lBaseFontItalic Property</h3>
<p>
Specifies a base font attribute (italic) for any displayed characters.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lBaseMonoFontBold Property</h3>
<p>
Specifies a base font attribute (bold) for any displayed characters that require a monospaced font.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lBaseMonoFontItalic Property</h3>
<p>
Specifies a base font attribute (italic) for any displayed characters that require a monospaced font.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lError Property</h3>
<p>
A flag that specifies an error occurred, set by the Error method and checked by critical operations during processing.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lInCoverageFrame Property</h3>
<p>
Specifies whether the Coverage Profiler opens in the main Visual FoxPro window. The default displays Coverage Profiler elements in a separate window.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lInProfileMode Property</h3>
<p>
Specifies whether the Coverage Profiler analyzes the coverage log for profiling characteristics. In the default setting, the Coverage Profiler analyses for coverage characteristics.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lMarkAllOnLoad Property</h3>
<p>
Specifies whether all source code is marked when a target file is loaded. In the default setting, individual source code records are marked one at a time as required by the user.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lSmartPath Property</h3>
<p>
Specifies whether the engine retains a reference to directories in which you have located files.</p>
<p>
<B><b>Default: </b></B>.T.</p>
<h3>lStartInProfileMode Property</h3>
<p>
Specifies how the lInProfileMode property is set when each coverage log loads. This value is significant when the property lMarkAllOnLoad is set to true (.T.).</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lTurnedOffTrace Property</h3>
<p>
Specifies whether the Coverage Profiler issued SET TRBETWEEN OFF during its processing.</p>
<p>
<B><b>Default: </b></B>.F.</p>
<h3>lUsingRegistry Property</h3>
<p>
Specifies whether user options are saved to and restored from the Windows registry.</p>
<p>
<B><b>Default: </b></B>.T.</p>
<h3>lUsingStatusBar Property</h3>
<p>
Determines whether feedback messages during processing are displayed in the status bar or as a WAIT WINDOW NOWAIT message. The status bar is used when the Coverage Profiler runs in the main Visual FoxPro window or in unattended mode and STATUS BAR is ON.</p>
<p>
<B><b>Default:</b></B> .F.</p>
<h3>lVFP5 Property</h3>
<p>
Specifies whether the Coverage Profiler is running under Visual FoxPro version 5.0.</p>
<p>
<B><b>Default: </b></B>(ATC("FoxPro 05",VERSION( )) &gt; 0)</p>
<h3>nBasefontsize Property</h3>
<p>
Specifies a base font size for any displayed characters.</p>
<p>
<B><b>Default: </b></B>8</p>
<h3>oFrame Property</h3>
<p>
A reference to the Coverage Frame window when the Coverage Profiler exists in a separate window. The engine ensures that this window exists before displaying any related dialog boxes or other elements (including common dialog subclasses, SET TALK display, and so on).</p>
<p>
<B><b>Default: </b></B>.NULL.</p>
<h3>AddPath(&nbsp;) Method</h3>
<p>
Extracts the directory information from the passed file name, <i>TcFileName</i>, to concatenate into the current SET(PATH).</p>
<p>
<B><b>Syntax:</b></B> AddPath(<i>tcFileName</i>)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments: </b></B><i>TcFileName </i>specifies a file name.</p>
<h3>AddRegisteredAddin(&nbsp;) Method</h3>
<p>
Adds a file name, <i>TcFileToAdd</i>, to the aAddIns array when called by the RunAddIn(&nbsp;) method after an AddIn runs successfully.</p>
<p>
<B><b>Syntax:</b></B> AddRegisteredAddin(<i>tcFileToAdd</i>)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments: </b></B><i>tcFileToAdd </i>specifies the file to add to the AddIn array.</p>
<h3>AdjustCoverageFilenameCursor(&nbsp;) Method</h3>
<p>
Enables you to add files that you don’t want analyzed to the cursor’s file list when called by the CreateCoverageFilenameCursor(&nbsp;) method. See the cCovFilesAlias property.</p>
<p>
<B><b>Syntax:</b></B> AdjustCoverageFilenameCursor(<i>tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lReturn</i></p>
<p>
<B><b>Arguments:</b></B> tcTarget specifies the name of the cursor you want to modify.</p>
<h3>AdjustSourceCursor(&nbsp;) Method</h3>
<p>
Abstract method that enables you to add index tags and custom fields to the source cursor when called by the CreateSourceCursor(&nbsp;) method.</p>
<p>
<B><b>Syntax:</b></B> AdjustSourceCursor(<i>tcSource</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lReturn</i></p>
<p>
<B><b>Arguments: </b></B><i>tcSource </i>specifies the name of the cursor containing the source records.</p>
<h3>AdjustTargetCursor(&nbsp;) Method</h3>
<p>
Abstract method called by the CreateTargetCursor(&nbsp;) method enables you to add index tags and custom fields to the target cursor.</p>
<p>
<B><b>Syntax:</b></B> AdjustTargetCursor(<i>tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lReturn</i></p>
<p>
<B><b>Arguments: </b></B><i>tcTarget </i>specifies the name of the table being modified.</p>
<h3>ClearStatus(&nbsp;) Method</h3>
<p>
Removes a message from the status bar or performs a CLEAR WAIT WINDOW command. See lUsingStatusBar property.</p>
<p>
<B><b>Syntax:</b></B> ClearStatus(&nbsp;)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>CreateCoverageFilenameCursor(&nbsp;) Method</h3>
<p>
Creates a cursor to hold the names of source files that the Coverage Profiler should not locate and analyze. See the cCovFilesAlias property.</p>
<p>
<B><b>Syntax:</b></B> CreateCoverageFileNameCursor(&nbsp;)</p>
<p>
<B><b>Return:</b></B> lReturn AND NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>CreateForms(&nbsp;) Method</h3>
<p>
At startup, displays the Coverage Profiler window after workfiles have been set up if the coverage engine is not in unattended mode. In the coverage engine base class, this method creates only the Coverage frame (if the engine is not running in the Visual FoxPro window). Subclasses can augment this method to add their own dialogs.</p>
<p>
<B><b>Syntax:</b></B> CreateForms(&nbsp;)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>CreateSkippedCursor(&nbsp;) Method</h3>
<p>
The engine creates this cursor by looking for deleted records in the Source table, because skipped records are deleted when the engine encounters file names that cannot be Located or that are in the Ignored files list during its load of the log file. See the CSkippedAlias property.</p>
<p>
<B><b>Syntax:</b></B> CreateSkippedCursor(<i>tcSource</i>,<i> tcSkipped</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcSkipped</i> specifies the alias of the cursor containing the skipped records.</p>
<h3>CreateSourceCursor(&nbsp;) Method</h3>
<p>
Creates a source cursor in the following format:</p>
<p class=tl>
CREATE CURSOR(cSource) ;</P><p class=tl>
(Duration n(7,3), ;<br>
ObjClass c(COV_LEN_OBJCLASS), ;<br>
Executing c(COV_LEN_EXECUTING), ;<br>
Procline i, ;<br>
Hostfile c(COV_LEN_HOSTFILE), ;<br>
Stacklevel I, ;<br>
FileType c(4) )</P><p>
The Stacklevel field is excluded when the value of the lVFP5 property is true (.T.). See COV_TUNE.H for #DEFINE field lengths.</p>
<p>
<B><b>Syntax:</b></B> CreateSourceCursor(<i>tcSource</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i> AND NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments: </b></B><i>tcSource </i>specifies the name of the cursor containing the source records.</p>
<h3>CreateTargetCursor(&nbsp;) Method</h3>
<p>
Creates a target cursor in the following format:</p>
<p class=tl>
CREATE CURSOR (cTarget) ;</P><p class=tl>
(Hostfile c(COV_LEN_HOSTFILE), ;<br>
ObjClass c(COV_LEN_OBJCLASS), ;<br>
FileType c(4), ;<br>
Marked&nbsp;&nbsp; m, ;<br>
Profiled&nbsp; m, ;<br>
SourceCode m, ;<br>
Coverable i, ;<br>
Covered i, ;<br>
ObjTotal i, ;<br>
ObjHits i)</P><p>
See COV_TUNE.H for #DEFINE field lengths.</p>
<p>
The target file contains one record for each of the following in the coverage log:
<ul type=disc>
<li>
An ASCII source file.<br><br></li>
<li>
A class contained in an ASCII source file.<br><br></li>
<li>
A class contained in a .vcx or .scx file.<br><br></li>
<li>
A stored procedure list in a .dbc file.<br><br></li>
<li>
A Data Environment class or other Data Environment member class (such as a cursor) in a .frx or .lbx source file.</li>
</ul>
<p>
<B><b>Syntax:</b></B> CreateTargetCursor(<i>tcSource</i>,<i> tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>TcSource </i>specifies the name of the file to analyze.<br>
<i>tcTarget </i>specifies the name of the file you want to modify.</p>
<h3>DeleteRegisteredAddin(&nbsp;) Method</h3>
<p>
<B><b>Syntax:</b></B> DeleteRegisteredAddin(<i>tcFileToDelete</i>)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments:</b></B></p>
<p>
<i>tcFileToDelete</i> specifies the AddIn to remove from the registry.</p>
<p>
Removes a file name from the aAddIns array. Called by the RunAddIn method after an AddIn does not run successfully, whether the Registry is currently in use or not. </p>
<h3>DisplayProjectStatistics(&nbsp;) Method</h3>
<p>
Enables reporting after project statistics have been gathered in GetProjectStatistics(&nbsp;).</p>
<p>
<B><b>Syntax:</b></B> DisplayProjectStatistics(<i>tcSource</i>,<i> tcTarget</i>,<i> tcProject</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the name of the table being modified.<br>
<i>tcProject </i>specifies the alias of the project being analyzed.</p>
<h3>DoMessage(&nbsp;) Method</h3>
<p>
Displays tcMessage. If the Coverage Profiler is running in unattended mode, the message is displayed in a WAIT WINDOW TIMEOUT window so it doesn’t prevent further processing. You can specify the timeout value using COV_TIMEOUT_SECS (a #DEFINE in COV_TUNE.H).</p>
<p>
<B><b>Syntax:</b></B> DoMessage(<i>tcMessage [,tnMessageBoxOptions [,tcMessageBoxTitle]]</i>)</p>
<p>
<B><b>Return:</b></B> <i>liReturn </i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcMessage</i> specifies the message that appears in the MESSAGEBOX.<br>
<i>tnMessageBoxOptions </i>specifies the MESSAGEBOX <i>nDialogBoxType </i>setting.<br>
<i>tcMessageBoxTitle </i>specifies the MESSAGEBOX <i>cTitleBarText</i> setting.</p>
<p>
liReturn specifies any return value from MESSAGEBOX(&nbsp;), or 0 if a WAIT WINDOW executes.</p>
<h3>Error(&nbsp;) Method</h3>
<p>
Sets the dialog error flag. Depending on the value of COV_DEBUG (a #DEFINE in COV_TUNE.H), will display an error MESSAGEBOX and release the engine or display a WAIT WINDOW with error information and invoke the native Visual FoxPro error handler to allow the developer to cancel, suspend, or ignore the current error.</p>
<p>
<B><b>Syntax:</b></B> Error(<i>nError</i>,<i> cMethod</i>,<i> nLine</i>)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>nError </i>specifies the Visual FoxPro error number.<br>
<i>cMethod </i>specifies the name of the method that caused the error.<br>
<i>nLine </i>specifies the line number where the error occurred.</p>
<h3>FillCoverageFileNameCursor(&nbsp;) Method</h3>
<p>
CreateCoverageFileNameCursor(&nbsp;) calls this method to add the names of the coverage engine file set to the group of files that should be ignored during processing. This method is a hard-coded set of INSERTs in the base coverage engine. You can override this set in a subclass designed to read in a set of file names from a text file generated from the Coverage.pjx file list.</p>
<p>
<B><b>Syntax:</b></B> FillCoverageFileNameCursor(&nbsp;)</p>
<p>
<B><b>Return:</b></B> RETURN NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>FillFileTypeArray( ) Method</h3>
<p>
Initializes the aFileTypes array with known file extensions. See the aFileTypes property.</p>
<p>
<B><b>Syntax:</b></B> FillFileTypeArray(&nbsp;)</p>
<p>
<B><b>Return:</b></B> NOT(EMPTY(THIS.<i>aFileTypes</i>[1,1]) OR THIS.<i>lError</i>)</p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>FillOneTargetRecord(&nbsp;) Method</h3>
<p>
Places the unmarked source code for a target record into the appropriate memo field, for later marking, using a different strategy to find the right code for each type of source code. When COV_TOPSPEED is not #DEFINEd true (.T.), this method also places certain initial statistics into the Target file.</p>
<p>
<B><b>Syntax:</b></B> FillOneTargetRecord(<i>tcSource</i>,<i> tcTarget</i>,<i> tlFillingAll</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn </i>AND(NOT THIS<i>.lError)</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the name of the table being modified.<br>
<i>tlFillingAll</i> specifies whether all records are processed in a loop, which changes the user feedback and displayed character handling.</p>
<h3>FillSourceCursor(&nbsp;) Method</h3>
<p>
APPENDs the coverage log contents to the coverage analysis source file. This method calls the SourceAvailable(&nbsp;) method to eliminate records that refer to source files unavailable for analysis. It marks these records deleted in the source cursor.</p>
<p>
<B><b>Syntax:</b></B> FillSourceCursor(<i>tcSource</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i></p>
<p>
<B><b>Arguments: </b></B><i>tcSource </i>specifies the name of the source file.</p>
<h3>FillTargetCursor(&nbsp;) Method</h3>
<p>
Calls the FillOneTargetRecord(&nbsp;) method for all target records in a loop. Replicates the ObjHits statistics from the CreateTargetCursor(&nbsp;) method for additional records referring to the same source files with the target files. See the CreateTargetCursor(&nbsp;) method.</p>
<p>
<B><b>Syntax:</b></B> FillTargetCursor(<i>tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> (THIS<i>.iTargetReccount &gt; </i>0<i> </i>AND NOT THIS<i>.lError</i>)</p>
<p>
<B><b>Arguments: </b></B><i>TcTarget </i>specifies the target file that receives the processed results.</p>
<h3>FilterListByLocation(&nbsp;) Method</h3>
<p>
Provides a placeholder for future enhancements. It can be called either when a log loads or in response to a user action, with or without the Coverage Profiler application. This method is abstract in the engine.</p>
<p>
<B><b>Syntax:</b></B> FilterListByLocation(&nbsp;)</p>
<p>
<B><b>Return:</b></B> NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>GetAlias(&nbsp;) Method</h3>
<p>
Returns either a currently used alias or the default alias of one of the Coverage Profiler workfile types. The valid workfile types include the following:</p>
<p class=tl>
"SOURCE"<br>
"TARGET"<br>
"SKIPPED"<br>
"COVFILES"<br>
"PROJECT"</P><p>
(The list of types is #DEFINEd in COV_SPEC.H as COV_KNOWN_ALIAS_PROPERTIES.) Each workfile type matches one c…Alias property to specify the default alias for this workfile.</p>
<p>
The Coverage Profiler usually has a cursor open using each one of the workfile default aliases. However, the Coverage Profiler is capable of handling many sets of workfiles at the same time, within its data session, as long as you specify separate aliases for each one. The GetAlias(&nbsp;) method and the system of defined work types plus <a href="newalias_properties.htm">c…Alias</a> properties allows you to have default alias names without the default aliases being hardcoded.</p>
<p>
The engine methods that process the workfiles use aliases as parameters, so you can specify which source, target, or other file you are interested in at any time. Since you are usually interested only in one set of workfiles, however, these methods all use the GetAlias(&nbsp;) methods to specify which alias and workfile default type to seek if you do not pass them a specific alias or aliases.</p>
<p>
<B><b>Syntax:</b></B> GetAlias(<i>tAlias</i>,<i> tcWhichProp</i>)</p>
<p>
<B><b>Return:</b></B> <i>cReturn</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tAlias </i>specifies the alias of a file.<br>
<i>tcWhichProp </i>specifies the workfile type (currently, either Source or Target) of the current default.</p>
<h3>GetFontsFromUser(&nbsp;) Method </h3>
<p>
Instantiates a common dialog subclass to ask the user to set font properties. If lUsingOCXs is false (.F.) or there has been an error instantiating the common dialog, the method uses the GETFONT(&nbsp;) method. If the first parameter, <i>tlBaseMonoFont</i>, is true (.T.), the method shows only monospaced fonts and fills the monospaced font attribute properties of the engine. If this parameter is false (.F.), the second set of base font attribute properties is filled from a list of all available screen fonts.</p>
<p>
Refer to the GetResourceLocation(&nbsp;) method for more information on the lUsingOCX<i>s</i> property.</p>
<p>
<B><b>Syntax:</b></B> GetFontsFromUser(<i>tlBaseMonoFont</i>,<i> toMemberHost </i>) </p>
<p>
<B><b>Return:</b></B> <i>lFontChange</i> AND NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tlBaseMonoFont </i>specifies the default monospace font style.<br>
<i>toMemberHost</i> specifies a reference to the current Coverage object.</p>
<h3>GetProjectStatistics(&nbsp;) Method</h3>
<p>
Creates a cursor containing information about the files in a particular Visual FoxPro project, of this format:</p>
<p class=tl>
CREATE CURSOR(cProject) ;</P><p class=tl>
(Hostfile c(COV_LEN_HOSTFILE), ;<br>
FileType c(4), ;<br>
Coverable n(8), ;<br>
Covered n(8), ;<br>
ObjTotal n(8), ;<br>
ObjHits n(8))</P><p>
Creates a header file in this cursor, indicating the project to which this cursor applies. Fills this cursor with statistics drawn from the current coverage log that apply to each source file in the project. If necessary, calls MarkOneTargetRecord(&nbsp;) for any project files that have not yet had their source code marked.</p>
<p>
<B><b>Syntax:</b></B> GetStatistics(<i>tcSource</i>,<i> tcTarget</i>,<i> tcProject</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the alias containing the source records.<br>
<i>tcTarget </i>specifies the name of the alias being modified.<br>
<i>tcProject</i> specifies the project containing the source files.</p>
<h3>GetRegisteredAddins(&nbsp;) Method</h3>
<p>
Fills the aAddIns array and the cAddIn property.</p>
<p>
<B><b>Syntax:</b></B> GetRegisteredAddins(&nbsp;)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>GetRegistryKeyValue(&nbsp;) Method</h3>
<p>
This method, usually used at startup, uses the registry-handling member of the toolbar in the engine formset to get a registry key value for a user option. It converts the registry value to other TYPE(&nbsp;)s as required, and compares this TYPE(&nbsp;) to the passed value, <i>tDefaultValue</i>. It returns the registry value or the default value if the registry value is not found or is of the wrong type.</p>
<p>
<B><b>Syntax:</b></B> GetRegistryKeyValue(<i>tcOption</i>,<i> tDefaultValue</i>,<i> tcPath</i>)</p>
<p>
<B><b>Return:</b></B> <i>vReturn</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcOption </i>specifies the file type option.<br>
<i>tDefaultValue</i> specifies the default registry value.<br>
<i>tcPath</i> specifies <i>RegKey</i>.</p>
<h3>GetResourceLocation(&nbsp;) Method</h3>
<p>
Specifies whether GETFILE(&nbsp;)/ShowOpen(&nbsp;) strategy or PUTFILE(&nbsp;)/ShowSave(&nbsp;) strategy is followed. Note that this method provides for additional dialog subclasses, showing a Help file or print dialog, to be instantiated and used in the future.</p>
<p>
<i>toMemberHost</i> specifies an optional form reference that can be passed to indicate where the dialog is displayed. If <i>toMemberHost</i> is not passed, the file dialog will display relative to the Coverage frame (if the Coverage frame exists) or to the first form in the formset collection (if the Coverage Profiler is in the Visual FoxPro window).</p>
<p>
Adds a member of the appropriate common dialog subclass (depending on the value of <i>tcWhichDialog</i>) if this is the first call. The dialog subclasses differ in how they set various flags. </p>
<p>
If a common dialog subclass or .ocx-related error occur in the Coverage Profiler, this method sets the lUsingOCXs property to false (.F.) and uses GETFILE(&nbsp;)/PUTFILE(&nbsp;).</p>
<p>
You can set the #DEFINE COV_USE_OCXS if you prefer to default to the native Visual FoxPro functions even if there are no OCX errors.</p>
<p>
<B><b>Syntax:</b></B> GetResourceLocation(<i>tcHost</i>,<i> tcTitle</i>,<i> tcCDLFilter</i>,<i> tcFileName</i>,<i> tcWhichDialog</i>,<i> </i>[<i>toMemberHost</i>]<i> </i>)</p>
<p>
<B><b>Return:</b></B> <i>lcFileName</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcHost </i>specifies the name of the file name the method is starting from usually seeking the matching file name of the uncompiled version of the code. If it is passed, it provides information for the common file dialog .InitDir property. </p>
<p>
<i>tcTitle</i> specifies the title to use in the dialog or, in the GETFILE(&nbsp;)/PUTFILE(&nbsp;) version, to use as a WAIT WINDOW NOWAIT prompt. If <i>tcHost</i> is also passed and includes a file name, this information is added to the dialog title or prompt.</p>
<p>
<i>tcCDLFilter</i> specifies the file types allowed in the dialog. This parameter is expressed in the format required by the common dialog filter expression. If the GETFILE(&nbsp;)/PUTFILE(&nbsp;) is called, the method parses the common dialog filter to put it into appropriate format for the two Visual FoxPro functions.</p>
<p>
<i>tcFileName</i> specifies the default file name to display.</p>
<p>
<i>tcWhichDialog</i> GETFILE or PUTFILE.</p>
<h3>GetTableName(&nbsp;) Method</h3>
<p>
This method allows the coverage engine to generate file names with which to save its work to disk without overwriting existing files. Normally, it just supplies file name defaults, but in unattended mode this method creates the file names without user intervention. Each method that saves a file to disk calls GetTableName(&nbsp;) with a specific suffix; for example, in the SaveSkippedCursor:</p>
<pre><code>cDBFName = ; THIS.GetTableName(COV_SKIPFILEDBF_SUFFIX)
</code></pre>
<p>
GetTableName(&nbsp;) uses the path and stem of the current log file name (THIS.cSourceFile) and attaches the appropriate suffix to this stem plus a digit, followed by the DBF extension. </p>
<p>
For example, Testlog.txt would produce TESTLOG_SKIP1.DBF in the above example.</p>
<p>
GetTableName(&nbsp;) then increments the digit if the generated file name exists, until it finds a name that does not exist.</p>
<p>
The default suffixes are #DEFINEs in COV_TUNE.H.</p>
<p>
<B><b>Syntax:</b></B> GetTableName(<i>tcWhichSuffix</i>)</p>
<p>
<B><b>Return:</b></B> <i>cLogfileStem+SUFFIX</i>[<i>+n</i>]<i>+</i>.dbf</p>
<p>
<B><b>Arguments:</b></B> <i>tcWhichSuffix</i> specifies which file extension to use.</p>
<h3>LockScreens(&nbsp;) Method</h3>
<p>
Freezes or releases LockScreen properties and MousePointer properties for all members of _Screen during various long procedures.</p>
<p>
<B><b>Syntax:</b></B> LockScreens(<i>tlOn</i>)</p>
<p>
<B><b>Return:</b></B> .T.</p>
<p>
<B><b>Arguments: </b></B><i>tlOn</i> specifies whether Lockscreen is locked.</p>
<h3>MarkAllTargetRecords(&nbsp;) Method</h3>
<p>
Calls the MarkOneTargetRecord(&nbsp;) method for all target records in a loop. Can be called because <i>lMarkAllOnLoad</i> is true (.T.) or because the coverage engine is in unattended mode.</p>
<p>
<B><b>Syntax:</b></B> MarkAllTargetRecords(<i>tcSource, </i>t<i>cTarget</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the name of the table being modified.</p>
<h3>MarkCodeLine(&nbsp;) Method</h3>
<p>
Creates a marked-up version of a line of code plus coverage statistics. In Coverage mode, marks code as Executed if <i>tiExecuted </i>is a positive number and not Executed if <i>tiExecuted</i> is 0. In Profile mode, marks coverage statistics appropriately for the line. In either mode, marks code as uncoverable (just padded in front with spaces) if <i>tiExecuted</i> is .NULL..</p>
<p>
Returns the marked up code in <i>cMarkedLine</i>.</p>
<p>
<B><b>Syntax:</b></B> MarkCodeLine(<i>tcLine</i>,<i> tiExecuted</i>,<i> tnFirst, tnAverage</i>)</p>
<p>
<B><b>Return:</b></B> <i>cMarkedLine</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcLine </i>specifies the line of code.<br>
<i>tiExecuted </i>specifies the number of times <i>tcLine</i> was run.<br>
<i>tnAverage </i>specifies the average length of time to run.</p>
<h3>MarkOneTargetRecord(&nbsp;) Method</h3>
<p>
Determines whether the current target record, tcTarget, is already marked in the current coverage mode and, if not, passes the relevant information to the MarkTargetCoverage(&nbsp;) method for processing.</p>
<p>
<B><b>Syntax:</b></B> MarkOneTargetRecord(<i>tcSource</i>,<i> tcTarget</i>,<i> tlFillingAll</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn </i>AND (NOT THIS<i>.lError)</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the record being modified.<br>
<i>tlFillingAll </i>specifies whether other target records are being processed. If all records are processed in a loop, the user feedback and handling of displayed characters changes.</p>
<h3>MarkTargetCoverage( ) Method</h3>
<p>
Creates a marked-up version of tcSource and REPLACEs a memo field in the Target file, tcTarget, (whether the code is for a class or a full procedure file). </p>
<p>
To perform this action, the method starts with the sourcecode memo. The memo field REPLACEd depends on whether Coverage Profiler is marking Profiler or Coverage information, since the Target record retains both sets of marked-up code. This method parses the source code and evaluates its statistics line by line. By default, this method calls the MarkCodeLine(&nbsp;) method to actually mark each line once it has the appropriate statistics. However, the way this method marks the code line is #DEFINEd as COV_MARK_CODE_LINE in COV_TUNE.H, not directly implemented as a call to the MarkCodeLine(&nbsp;) method. This allows you to replace the call to the MarkCodeLine(&nbsp;) method with a different marking system. A second #DEFINE, COV_TOPSPEED, in COV_TUNE.H also allows you to switch the MarkCodeLine(&nbsp;) call to a simpler, in-line marking system for fastest response time.</p>
<p>
MarkTargetCoverage(&nbsp;) evaluates each line to find out whether it was executed, how many times it was executed, and its execution timings (first and average) when in Profile mode. However, many lines are considered uncoverable in Coverage Profiler. These lines, such as comments, DEFINE CLASS and ELSE statements, and lines within TEXT … ENDTEXT do not appear in coverage logs because they are not executable. This method sets the number of times these lines run to .NULL. These lines are not considered when Coverage Profiler compiles statistics. Also, lines broken by continuation symbols (semicolons) are considered as a single line of code and marked only on the last line.</p>
<p>
<B><b>Syntax:</b></B> MarkTargetCoverage(<i>tcSource</i>,<i> tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> NOT (EMPTY(<i>cMemo</i>) OR THIS.<i>lError</i>)</p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the name of the table being modified.</p>
<h3>OrderListByTime(&nbsp;) Method</h3>
<p>
This method provides a placeholder for future enhancements and subclasses and is abstract in the engine.</p>
<p>
<B><b>Syntax:</b></B> OrderListByTime( )</p>
<p>
<B><b>Return:</b></B> NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>PassedProperParams( ) Method</h3>
<p>
Test at startup to determine whether passed parameters are appropriate to the class. If any passed parameters are not appropriate TYPE( ), provides a MESSAGEBOX showing what parameters may be passed, and RETURNs false (.F.), preventing any further coverage processing as well as the instantiation of the class. </p>
<p>
This method uses a MESSAGEBOX for feedback and stops processing even if the Coverage Profiler is starting up in Unattended mode. If you are setting up the Coverage Profiler for automated testing, be sure your calling program sends correct parameters or the analysis will not proceed.</p>
<p>
<B><b>Syntax:</b></B> PassedProperParams(<i>tcFile</i>,<i> tlUnattended</i>,<i> tcAddIn</i>)</p>
<p>
<B><b>Return:</b></B> lReturn</p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>TcFile</i> specifies the name of the log file.<br>
<i>TlUnattended</i> specifies whether to run in unattended mode.<br>
<i>TcAddIn </i>specifies the AddIn file name(s).</p>
<h3>RestoreCoverage(&nbsp;) Method</h3>
<p>
If the Coverage Profiler previously suspended coverage logging, this method gives the user a chance to resume coverage logging when the Coverage Profiler releases. The user can choose to overwrite this previous log, append new log entries to it, or not resume coverage logging at that time.</p>
<p>
<B><b>Syntax:</b></B> RestoreCoverage(&nbsp;)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>RunAddin(&nbsp;) Method</h3>
<p>
Runs a file (.scx, .fxp, .app, .prg, .qpx, .qpr, .mpx, or .mpr) that adds functionality to the Coverage object. If no file name is passed, this method runs the file specified by the cAddIn property.</p>
<p>
The file must accept an object reference because the file is run by passing a reference to the coverage form, as in the following examples (depending on the file type):</p>
<p>
DO (cFileName) WITH THIS</p>
<p>
DO FORM (cFileName) WITH THIS</p>
<p>
<B><b>Syntax:</b></B> RunAddin(<i>tcAddin</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn </i>AND NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments: </b></B><i>TcAddin </i>specifies the name of the file to run.</p>
<h3>SaveOptionsToRegistry(&nbsp;) Method</h3>
<p>
This method can be called any time the user’s current values should be saved to the registry. It saves the following user preferences:</p>
<h4>Work options group</h4>
<p class=tl>
lStartInProfileMode<br>
lSmartPath<br>
lMarkAllOnLoad<br>
cMarkExecuted<br>
cMarkNotExecuted<br>
lRegisterAddIn</P><h4>UI options group</h4>
<p class=tl>
Font name, size, italic, bold for base monospace font</P><p>
There are a few registry settings not saved by this method, because they have to be done at specific moments during the life of the engine. These are:</p>
<p>
Coverage or main Visual FoxPro frame (must be done when the user makes a choice and will be in effect next session, but does not correspond to or affect any of the coverage property values for this session).</p>
<p>
Registered addins (this array is manipulated over the life of the session, and the full set of file names it contains is saved to the registry at the end of the session).</p>
<p>
<B><b>Syntax:</b></B> SaveOptionsToRegistry(&nbsp;)</p>
<p>
<B><b>Return:</b></B> <i>lSuccess</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SaveSkippedCursor(&nbsp;) Method</h3>
<p>
Saves the skipped files cursor to disk if it contains any records, and places the name of the table on disk in the cSavedSkipFiles property. See the cSkippedAlias and cSavedSkipFiles properties.</p>
<p>
<B><b>Syntax:</b></B> SaveSkippedCursor(<i>tcSkipped</i>)</p>
<p>
<B><b>Return:</b></B> RETURN NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments:</b></B> <i>tcSkipped</i> specifies the cursor containing skipped records.</p>
<h3>SaveTargetToDisk(&nbsp;) Method</h3>
<p>
Saves the output (target) file, including marked-up code and statistics, to disk.</p>
<p>
<B><b>Syntax:</b></B> SaveTargetToDisk(<i>tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> lReturn and NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments:</b></B> <i>tcTarget </i>specifies the name of the modified table.</p>
<h3>SetFontValues(&nbsp;) Method</h3>
<p>
Sets up initial font attribute values using registry key values and other defaults. See cBaseFontName and cBaseMonoFontName for information on how the coverage engine derives these defaults.</p>
<p>
<B><b>Syntax:</b></B> SetFontValues(&nbsp;)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments</b></B> none</p>
<h3>SetLogFile(&nbsp;) Method</h3>
<p>
Attempts to set up a file for analysis. </p>
<p>
If you pass no string value, the SET COVERAGE value is used. If there is no current log file, the method prompts for a file name. If a log file can be successfully set, the method returns .T. If the user designates no log file, the method returns. F. If no new log is specified, the Coverage Engine returns to the currently loaded log, if one is loaded, or releases, if no log is loaded. </p>
<p>
<B><b>Syntax:</b></B> SetLogFile(<i>tcFile</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i> </p>
<p>
<B><b>Arguments:</b></B> <i>TcFile </i>specifies the name of the file to analyze.</p>
<h3>SetMarks(&nbsp;) Method</h3>
<p>
Synchronizes the lengths of cMarkExecuted and cMarkNotExecuted and returns the values of either or both properties to a default if they are not character-type or both properties are empty. If user options are not available from the registry, this method gets defaults from the #DEFINE values, COV_DEFAULT_MARKNOTEXECUTED and COV_DEFAULT_MARKEXECUTED, which you can set in COV_TUNE.H. A third #DEFINE, COV_DEFAULT_MARKSPACING, ensures that there is space between the marks and the line of code.</p>
<p>
<B><b>Syntax:</b></B> SetMarks(&nbsp;)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lError </i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SetRegisteredAddins(&nbsp;) Method</h3>
<p>
Saves the file names in the aAddIns array to registry values.</p>
<p>
<B><b>Syntax:</b></B> SetRegisteredAddins(&nbsp;)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SetRegistryKeyValue(&nbsp;) Method</h3>
<p>
This method uses the registry-handling member of the toolbar in the engine formset to set a registry key value from a user option. It converts all values to string type before sending them to the registry-handler to apply to the registry.</p>
<p>
<B><b>Syntax:</b></B> SetRegistryKeyValue(<i>tcWhichOption</i>,<i> tValue</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcWhichOption </i>specifies the user option to be accessed.<br>
<i>tValue</i> specifies the value of <i>tcWhichOption</i>.</p>
<h3>SetUIFonts(&nbsp;) Method</h3>
<p>
Abstract in the engine, called by SetUiOptions, designed to allow the user font preferences saved in the various Base and BaseMont font properties to be applied to appropriate displayed characters .</p>
<p>
<B><b>Syntax:</b></B> SetUIFonts(&nbsp;)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SetUIOptions(&nbsp;) Method</h3>
<p>
Sets up initial UI options according to user preferences or defaults after initial setup of workfiles. This group of options includes fonts and the array of registered AddIns. It is required for UI display and user interaction with the workfiles, after they have been processed.</p>
<p>
<B><b>Syntax:</b></B> SetUIOptions(&nbsp;)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i> and NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SetUIToShowCode(&nbsp;) Method</h3>
<p>
Abstract in the engine, called at the end of SetupWorkFiles( ) to allow UI to show current Target record in the newly loaded log.</p>
<p>
<B><b>Syntax:</b></B> SetUIToShowCode(<i>tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SetUIToShowFileStates(&nbsp;) Method</h3>
<p>
Abstract in the engine, called at the end of SetupWorkFiles( ) to allow UI to indicate success or failure or current attempt to load a log.</p>
<p>
<B><b>Syntax:</b></B> SetUIToShowFileStates(<i>tcSource</i>,<i> tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the name of the table being modified.</p>
<h3>SetUpWorkFiles(&nbsp;) Method</h3>
<p>
This method sets and validates a coverage log, and then creates and fills the source and target work files for this text log. If the user choice is the same as the log file currently loaded, the method asks the user whether the log should be reloaded and analyzed. It checks that the log is not open in a text window before loading the log. If the user specifies lMarkAllOnLoad, it marks all records in the current mode (Coverage or Profile) after successfully filling the target file with source code entries. If Coverage Profiler is in unattended mode, it marks all records in both Coverage and Profile mode after successfully filling the target file. If the load succeeds, this method also sets the cDefaultWritePath to mark the path of the text log and the cSourceFile property to hold the name of this text log.</p>
<p>
<B><b>Syntax:</b></B> SetupWorkFiles(<i>tcLogFile,</i> <i>tcSource</i>,<i> tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i> AND NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>TcLogFile </i>specifies the name of the text log to analyze.<br>
<i>tcSource </i>specifies the name of the file to use as source.<br>
<i>tcTarget </i>specifies the name of the cursor being modified.</p>
<h3>SetWorkOptions(&nbsp;) Method</h3>
<p>
Sets up initial options according to user preferences or defaults before initial setup of workfiles. This group of options includes coverage marks and initial coverage mode, and is required for processing the work files.</p>
<p>
<B><b>Syntax:</b></B> SetWorkOptions(&nbsp;)</p>
<p>
<B><b>Return:</b></B> NOT THIS<i>.lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>ShowProjectStatistics(&nbsp;) Method</h3>
<p>
Calls GetProjectStatistics(&nbsp;) and DisplayProjectStatistics(&nbsp;) to run coverage analysis figures against a specific Visual FoxPro project set of files.</p>
<p>
<B><b>Syntax:</b></B> ShowStatistics(<i>tcSource</i>,<i> tcTarget</i>,<i> tcProject</i>)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i> AND NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource s</i>pecifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the name of the table being modified.<br>
<i>tcProject</i> specifies the project containing <i>tcSource</i>.</p>
<h3>ShowStatistics(&nbsp;) Method</h3>
<p>
Abstract in the base engine.</p>
<p>
<B><b>Syntax:</b></B> ShowStatistics(&nbsp;)</p>
<p>
<B><b>Return:</b></B> NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>ShowStatus(&nbsp;) Method</h3>
<p>
Places a message in the status bar or a WAIT WINDOW. See lUsingStatusBar property.</p>
<p>
<B><b>Syntax: </b></B>ShowStatus(<i>cMessage</i>)</p>
<p>
<B><b>Return:</b></B> </p>
<p>
<B><b>Arguments:</b></B> <i>cMessage </i>specifies the message to display in the status bar or WAIT WINDOW</p>
<h3>SourceAvailable(&nbsp;) Method</h3>
<p>
Replaces the current Source log compiled file name with the full path name of the file holding the uncompiled source code. Calls GetSourceLoc(&nbsp;) if necessary to Locate uncompiled source code. If the lSmarthPath property is true (.T.), uses AddPath(&nbsp;) to adjust SET (PATH) as the user specifies directories in which to find source files. RETURNs false (.F.) if the source file is on the Ignored Files list, if the file is of an unknown type, or if the uncompiled source code cannot be found.</p>
<p>
<B><b>Syntax:</b></B> SourceAvailable(&nbsp;)</p>
<p>
<B><b>Return:</b></B> <i>lReturn</i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SourceFileIsLog(&nbsp;) Method</h3>
<p>
Checks the file name held in the cSourceFile property for valid coverage log format.</p>
<p>
<B><b>Syntax:</b></B> SourceFileIsLog(&nbsp;)</p>
<p>
<B><b>Return:</b></B> <i>lReturn </i></p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>SuspendCoverage(&nbsp;) Method</h3>
<p>
Sets cSuspendedLog to the name of the current log, and temporarily stops Visual FoxPro from writing this log, in one of the following cases:
<ol>
<li>
The passed file name is the same as the current coverage log.<br><br></li>
<li>
No file name is passed and the engine defaults to analyzing the current coverage log.</li>
</ol>
<p>
<B><b>Syntax:</b></B> SuspendCoverage(&nbsp;)</p>
<p>
<B><b>Return:</b></B> none</p>
<p>
<B><b>Arguments:</b></B> none</p>
<h3>ToggleCoverageProfileMode(&nbsp;) Method</h3>
<p>
If the lMarkAllOnLoad property is true (.T.), marks all target records in the new mode.</p>
<p>
<B><b>Syntax:</b></B> ToggleCoverageProfileMode(<i>tcSource</i>,<i> tcTarget</i>)</p>
<p>
<B><b>Return:</b></B> RETURN NOT THIS.<i>lError</i></p>
<p>
<B><b>Arguments</b></B></p>
<p>
<i>tcSource </i>specifies the name of the table containing the source records.<br>
<i>tcTarget </i>specifies the name of the table being modified.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiling an Application</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgcompiling_an_application"></a><sup></sup>Chapter 13: Compiling an Application</h1>
<p>
You can easily create event-driven, object-oriented applications one piece at a time. This modular approach allows you to verify the functionality of each component as you create it. After you've created all the functional components, you can compile them into an application, which assembles the executable components of your project — forms, reports, menus, programs, and so on — into a single file that you can distribute to your users along with your data.</p>
<p>
To quickly create a complete project with <a href="dgapplication_development_and_developer_productivity.htm#newenhanced_application_framework">Application Framework</a>, you can use the <a href="wizapplication_wizard_6.htm">Application Wizard</a>. After the project is created, the new <a href="cmdapplication_builder.htm">Application Builder</a> opens so you can add a database, tables, reports, and forms.</p>
<p>
This chapter describes how to build a typical Visual FoxPro application. For more information about the process of developing Visual FoxPro applications, see Chapter 2, <a href="dgdeveloping_an_application.htm">Developing an Application</a>, and Chapter 14, <a href="dgtesting_and_debugging_applications.htm">Testing and Debugging Applications</a>. If you want to distribute your application, see Part 8, <a href="dgdistributing_applications.htm">Distributing Applications</a>.</p>
<p>
The application building process requires:</p>
<ul type=disc>
<li>
<a href="#dgstructuring_an_application">Structuring an Application</a></li>
<li>
<a href="#dgadding_files_to_a_project">Adding Files to a Project</a></li>
<li>
<a href="#dgcreating_an_application_from_a_project">Creating an Application from a Project</a></li>
</ul>

<h2><a name="dgstructuring_an_application"></a>Structuring an Application</h2>
<p>
A typical database application consists of data structures, a user interface, query options, and reporting capabilities. To design the structure of your application, carefully consider the function each component provides and its relationship to other components.</p>
<p>
An assembled Visual FoxPro application typically presents a user with a menu and one or more forms for entering or displaying data. You provide functionality and maintain data integrity and security by attaching code to certain events. Queries and reports allow your users to extract information from the database.</p>
<p class=label>
<b>Structure of a typical Visual FoxPro application</b></p>
<p>
<img src="afd13007.gif" border=0></p>
<p>
When structuring your application, you need to consider the following tasks:</p>
<ul type=disc>
<li>
Setting the application’s starting point.</li>
<li>
Initializing the environment.</li>
<li>
Displaying the interface.</li>
<li>
Controlling the event loop.</li>
<li>
Restoring the original environment when the application quits.</li>
</ul>
<p>
The following sections provide details about each of these tasks. Typically you would create an application object to complete these tasks; see the <a href="smptasmanian_traders_sample.htm">Tasmanian Traders</a> sample application located in the Visual Studio …\Samples\Vfp98\Tastrade directory for an example of this technique. Also, if you use the <a href="wizapplication_wizard.htm">Application Wizard</a> to compile your application, it creates an application object. Or, if you want, you can use a program as the main file that handles these tasks. For more information, see “<a href="#dgstructuring_a_program_as_a_main_file">Structuring a Program as a Main File</a>”.</p>

<h3><a name="dgsetting_the_starting_point"></a>Setting the Starting Point</h3>
<p>
You link each component together and set a starting point for your application with a <a href="glsmain_file.htm">main file</a>. The main file serves as the execution starting point for your application, and can consist of a program or form. When users run your application, Visual FoxPro launches the main file for your application, which in turn runs all other components as needed. All applications must have a main file. Usually, the best choice is to create a main program in your application. However, you can combine the functionality of the main program and the initial user interface by using a form as the main program.</p>
<p>
If you use the Application Wizard to create your application, you can allow the wizard to create a main file program for you. You don't need to specify a main file yourself unless you want to change the main file after the wizard is done.</p>
<p class=label>
<b>To set the starting point for an application</b>
<ol>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the file.<br><br></li>
<li>
From the <b>Project</b> menu, choose <b>Set Main</b>.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The file that you set as the application’s main file is automatically marked as included so that it is treated as read-only after you compile the application.</p></li>
</ol>
<p>
Only one file in the project can be set as the main file. The main file is displayed in bold type, as shown in the following illustration.</p>
<p class=label>
<b>Setting a main file in the Project Manager</b></p>
<p>
<img src="afd13008.gif" border=0></p>
<h3>Initializing the Environment</h3>
<p>
The first task that a main file or application object must accomplish is to set up your application’s environment. The default Visual FoxPro development environment establishes certain values of SET commands and system variables when Visual FoxPro opens. However, these settings might not be the best environment for your application.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To see the default values of the Visual FoxPro development environment, start Visual FoxPro without a configuration file by typing <b>VFP -C</b> and then issue the <a href="lngdisplay_status.htm">DISPLAY STATUS</a> command.</p>
<p>
It is always a good idea to save the initial environment settings and set up a specific environment for your application in your setup code.</p>
<p class=label>
<b>To capture commands for the current environment</b>
<ol>
<li>
From the <b>Tools </b>menu, choose <b>Options</b>.<br><br></li>
<li>
Press <b>Shift</b> and select <b>OK </b>to display the environment SET commands in the <b>Command </b>window.<br><br></li>
<li>
From the <b>Command</b> window, copy and paste into your program.</li>
</ol>
<p>
In an environment specific to your application, you might want to include code to:</p>
<ul type=disc>
<li>
Initialize variables.</li>
<li>
Establish a default path.</li>
<li>
Open any needed databases, free tables, and indexes. If your application requires access to remote data, the initialization routine can also prompt the user for the necessary login information.</li>
<li>
Reference external library and procedure files.</li>
</ul>
<p>
For example, if you wanted to test the default value of the <a href="lngset_talk.htm">SET TALK</a> command, store the value, and set TALK to OFF for your application, you could place the following code in your setup procedure:</p>
<pre><code>IF SET('TALK') = "ON"
 &nbsp; SET TALK OFF
 &nbsp; cTalkVal = "ON"
ELSE
 &nbsp; cTalkVal = "OFF"
ENDIF
</code></pre>
<p>
It is usually a good idea to save default settings in public variables, in a custom class, or as properties of an application object so that you can restore these values when quitting the application.</p>
<pre><code>SET TALK &amp;cTalkVal
</code></pre>
<h3>Displaying the Initial Interface</h3>
<p>
The initial user interface can be a menu, form, or any other user component. Often, an application will display a sign-on screen or logon dialog box before displaying the opening menu or form.</p>
<p>
You can initiate the user interface in the main program by using a <a href="lngdo.htm">DO</a> command to run a menu or a <a href="lngdo_form.htm">DO FORM</a> command to run a form. </p>
<h3>Controlling the Event Loop</h3>
<p>
Once the environment is set up and you've displayed the initial user interface, you're ready to establish an event loop to wait for user interaction.</p>
<p class=label>
<b>To control the event loop</b>
<ul type=disc>
<li>
Issue the <a href="lngread_events.htm">READ EVENTS</a> command, which causes Visual FoxPro to begin processing user events such as mouse clicks and keystrokes.</li>
</ul>
<p>
It is important to place the READ EVENTS command correctly in your main file, because all processing in the main file is suspended from the time the READ EVENTS command is executed until a subsequent CLEAR EVENTS command is issued. For example, you might issue a READ EVENTS command as the last command in an initialization procedure, executed after the environment has been initialized and the user interface displayed. If you don't include the READ EVENTS command, your application will return to the operating system after running.</p>
<p>
After the event loop has been started, the application is under the control of the user interface element that was last displayed. For example, if the following two commands are issued in the main file, the application displays the form Startup.scx:</p>
<pre><code>DO FORM STARTUP.SCX
READ EVENTS
</code></pre>
<p>
If you don't include a READ EVENTS command or its equivalent in your main file, your application will run properly from the Command window within the development environment. However, when you run it from your menu or main screen, the application will appear briefly, then quit.</p>
<p>
Your application must also provide a way to end the event loop.</p>
<p class=label>
<b>To terminate the event loop</b>
<ul type=disc>
<li>
Issue the <a href="lngclear.htm">CLEAR EVENTS</a> command.</li>
</ul>
<p>
Typically, you issue the CLEAR EVENTS command from a menu or a button in a form. The CLEAR EVENTS command suspends the event processing for Visual FoxPro and returns control to the program that issued the READ EVENTS command that started the event loop.</p>
<p>
For a simple program example, see <a href="#dgstructuring_a_program_as_a_main_file">Structuring a Program as a Main File</a> later in this chapter.</p>
<p class=indent>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;You need to establish a way to exit the event loop before you start it. Make sure your interface has a mechanism (such as an Exit button or menu command) to issue the CLEAR EVENTS command.</p>
<h3>Restoring the Original Environment</h3>
<p>
To restore the original value of saved variables, you can macrosubstitute them into the original SET commands. For example, if you saved the SET TALK setting into the public variable <code>cTalkVal</code>, issue the following command:</p>
<pre><code>SET TALK &amp;cTalkval
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Variable names used with macro substitution shouldn't contain the “m.” prefix because the period assumes a variable concatenation and will produce a syntax error.</p>
<p>
If you initialized the environment in a different program than the one in which you are restoring it — for example, if you initialize by calling one procedure, but restore the environment by calling another — be sure you can access the values you stored. For example, store the values to restore in public variables, custom classes, or as properties of an application object.</p>

<h3><a name="dgstructuring_a_program_as_a_main_file"></a>Structuring a Program as a Main File</h3>
<p>
If you use a program (.prg) file as the main file in your application, you must be sure that it includes commands to handle the tasks associated with major application tasks. The main file doesn't have to issue commands directly to accomplish all the tasks. For example, it is common to call procedures or functions to handle tasks such as initializing the environment and cleaning up.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If you used the <a href="wizapplication_wizard.htm">Application Wizard</a> and allowed it to create the program Main.prg, you can modify the program the wizard created instead of creating a new one. The wizards uses a special class to define an object for the application. The main program includes sections to instantiate and configure the object.</p>
<p class=label>
<b>To build a simple main program</b>
<ol>
<li>
Initialize the environment by opening databases, declaring variables, and so on.<br><br></li>
<li>
Establish the initial user interface by calling a menu or form.<br><br></li>
<li>
Establish the event loop by issuing the <a href="lngread_events.htm">READ EVENTS</a> command.<br><br></li>
<li>
Issue <a href="lngclear.htm">CLEAR EVENTS</a> command from a menu (such as an Exit command) or a button (such as an Exit command button). The main program shouldn't issue this command.<br><br></li>
<li>
Restore the environment when the user quits the application.</li>
</ol>
<p>
For example, your main program might look like this:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Code</b></td>
<td class=label width=68%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=32%><pre><code>DO SETUP.PRG</code></pre>
</td>
<td width=68%>Call program to set up environment (store values in public variables)</td>
</tr>
<tr valign=top>
<td width=32%><pre><code>DO MAINMENU.MPR</code></pre>
</td>
<td width=68%>Display menu as initial interface</td>
</tr>
<tr valign=top>
<td width=32%><pre><code>READ EVENTS</code></pre>
</td>
<td width=68%>Establish event loop. A different program (such as Mainmenu.mpr must issue a CLEAR EVENTS command)</td>
</tr>
<tr valign=top>
<td width=32%><pre><code>DO CLEANUP.PRG</code></pre>
</td>
<td width=68%>Restore environment before quitting</td>
</tr>
</table><br>

<h2><a name="dgadding_files_to_a_project"></a>Adding Files to a Project</h2>
<p>
A Visual FoxPro project consists of separate components that are stored as individual files. For example, a simple project might consist of forms (.scx files), reports (.frx files), and programs (.prg and .fxp files). In addition, a project usually has one or more databases (.dbc files), tables (stored in .dbf and .fpt files) and indexes (.cdx and .idx files). To be included in an application, a file has to be added to your project. That way, when you compile your application, Visual FoxPro can include the files for that component in the finished product.</p>
<p>
You can easily add files to a project in a number of ways:</p>
<ul type=disc>
<li>
To create a project and add existing files, use the Application Wizard.</li>
<li>
To automatically add new files to a project, open a project, then create the new files from within the Project Manager.</li>
<li>
To add existing files to a project, open a project and add them using the Project Manager.</li>
</ul>
<p>
If you’ve used the <a href="wizapplication_wizard.htm">Application Wizard</a> or Project Manager to create the files, you usually don’t need to do anything else — the file is automatically included in the project. One exception, however, is if your application includes a file that will be modified by the user. Because included files are read-only, you must mark the file as excluded. For details, see <a href="#dgreferencing_modifiable_files">Referencing Modifiable Files</a> later in this chapter.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;For a list of file types and extensions used in Visual FoxPro, see <a href="confile_extensions_and_file_types.htm">File Extensions and File Types</a>.</p>
<p>
If an existing file is not already part of your project, you can add it manually.</p>
<p class=label>
<b>To add a file to a project manually</b>
<ol>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, choose the type of component you want to add by selecting it in the hierarchy, and then click <b>Add</b>.<br><br></li>
<li>
In the <b>Open</b> dialog box, select the file to add.</li>
</ol>
<p>
Visual FoxPro also adds files to your project if you reference them in a program or form. For example, if a program in your project includes the following line, Visual FoxPro adds the file Orders.scx to your project:</p>
<pre><code>DO FORM ORDERS.SCX
</code></pre>
<p>
If a file is referenced in this way, it is not immediately included in a project. Later, when you build the project, Visual FoxPro resolves references to all files and automatically includes implicit files in the project. Additionally, if any other file is referenced through user-defined code within the new file, building the project will also resolve that reference and include the file. The referenced files appear in the Project Manager the next time you view the project.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Visual FoxPro might not be able to resolve references to picture (.bmp and .msk) files, depending on how they are used in code. Therefore, add pictures to your files manually. In addition, Visual FoxPro cannot automatically include files that are referenced using macro substitution, because the name of the file is not known until the application is running. If your application references files using macro substitution, include the referenced files manually.</p>

<h3><a name="dgreferencing_modifiable_files"></a>Referencing Modifiable Files</h3>
<p>
When you compile a project into an application, files included in the project are assembled into a single application file. After the project is built, files in the project that are marked “included” become read-only.</p>
<p>
Often, files that are part of your project, such as tables, are intended to be modified by users. In those cases, you should add the files to your project but mark them as excluded. Excluded files are still part of your application, so Visual FoxPro still tracks them as part of your project, but they are not compiled in the application file, so users can update them.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Tables are marked as excluded by default, because Visual FoxPro assumes that tables will be modifiable in an application.</p>
<p>
As a general rule, files containing executable programs (forms, reports, queries, menus, and programs) should be included in the application file, and data files should be excluded. However, you should determine whether to include or exclude files based on your application requirements. For example, a table that contains sensitive system information or information used only for lookup can be included in the application file to protect it from inadvertent change. Conversely, you might exclude a report (.frx) file if your application allows users to change it dynamically.</p>
<p>
If you exclude a file, you must make sure that Visual FoxPro can find the excluded file when the application runs. For example, when a form references a visual class library, the form stores a relative path to that library. If you include the library in the project, it is made part of the application file, and the form will always be able to locate the library. However, if you exclude the library, the form must search for the library using the relative path or the Visual FoxPro search path (as set using the <a href="lngset_path.htm">SET PATH</a> command). If the library is not in the expected locations — for example, if you have moved the library since creating the form — Visual FoxPro displays a dialog box asking the user to locate the library. You might not want users to see this dialog box. To be safe, include all files that don't need to be updated by users.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot include application (.app) files, and you should choose to exclude library files (.ocx, .fll, and .dll).</p>
<p class=label>
<b>To exclude modifiable files</b>
<ol>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the modifiable file.<br><br></li>
<li>
From the <b>Project</b> menu, choose <b>Exclude</b>.<p class=tl>
If the file is already excluded, the <b>Exclude</b> command is not available; the <b>Include</b> command appears in its place.</P></li>
</ol>
<p>
Excluded files have the <font face="Symbol">Æ</font> symbol to the left of their names.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Files marked as main files cannot be marked as excluded. For details about main files, see <a href="#dgsetting_the_starting_point">Setting the Starting Point</a> earlier in this chapter.</p>
<p class=label>
<b>Tables marked as excluded in a project</b></p>
<p>
<img src="afd13006.gif" border=0></p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To view all project files at once, choose <b>Project Info</b> from the <b>Project</b> menu and select the <b>Files</b> tab.</p>

<h2><a name="dgcreating_an_application_from_a_project"></a>Creating an Application from a Project</h2>
<p>
The final step in compiling a project is to build it. The end result of this process is a single file that includes all the files referenced in your project into a single application file (except those marked as excluded). You can distribute the application file along with the data files (and any other files you’ve excluded from the project) to your users, who can then launch the file to run your application.</p>
<p>
The steps involved in creating an application from your project are:</p>
<ul type=disc>
<li>
Testing the project.</li>
<li>
Building an application file from the project.</li>
</ul>
<h3>Testing a Project</h3>
<p>
To verify references and check that all components are available, you can test the project. To do so, you rebuild the project, which forces Visual FoxPro to resolve file references and to recompile files that are out of date.</p>
<p class=label>
<b>To test a project</b>
<ol>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, choose <b>Build</b>.<br><br></li>
<li>
In the <a href="cmdbuild_options_dialog_box.htm">Build Options</a> dialog box, select <b>Rebuild Project</b>.<br><br></li>
<li>
Select any other options you need and choose <b>OK</b>.<p class=tl>
-or-</P></li>
</ol>
<ul type=disc>
<li>
Use the <a href="lngbuild_project.htm">BUILD PROJECT</a> command.</li>
</ul>
<p>
For example, to build a project named Myproj.pjx, type:</p>
<pre><code>BUILD PROJECT myproj
</code></pre>
<p>
If errors occur during the build process, they are collected into a file in your current directory with the name of your project and an .err extension. The compilation error count is displayed on the status bar. You can also see the error file immediately.</p>
<p class=label>
<b>To display the error file immediately</b>
<ul type=disc>
<li>
Select the <b>Display Errors</b> box.</li>
</ul>
<p>
After the project has been built successfully, you should try to run it before creating an application.</p>
<p class=label>
<b>To run the application</b>
<ul type=disc>
<li>
In the <b>Project Manager</b>, highlight the main program, and then choose <b>Run</b>.<p class=tl>
-or-</P></li>
<li>
In the <b>Command</b> window, issue a DO command with the name of the main program:<pre><code>DO MAINPROG.PRG
</code></pre>
</li>
</ul>
<p>
If the program runs properly, you're ready to build an application file that will contain all the files included in the project.</p>
<p>
You should repeat the steps of rebuilding and running your project as you add components to your project. Unless you choose Recompile All Files in the Build Options dialog box, only files that have been modified since the last build are recompiled.</p>
<h3>Building an Application File from the Project</h3>
<p>
To create a finished file from your application, you build it into an application file. An application file has an extension of .app. To run the application, users first start Visual FoxPro, then load the .app file.</p>
<p>
You can choose to build either an application (.app) or an executable (.exe) file from your project. Users can run an .app file if they already have a copy of Visual FoxPro. Alternatively, you can create an .exe file. The .exe file works in conjunction with two Visual FoxPro dynamic link libraries (Vfp6r.dll and Vfp6enu.dll) that you ship with your application to provide a complete run-time environment for Visual FoxPro. The second file is specific to the region of the world your application targets. For more information, see Part 8, <a href="dgdistributing_applications.htm">Distributing Applications</a>.</p>
<p class=label>
<b>To build an application</b>
<ol>
<li>
In the <b>Project Manager</b>, choose <b>Build</b>.<br><br></li>
<li>
In the <a href="cmdbuild_options_dialog_box.htm">Build Options</a><b> </b>dialog box, choose <b>Build Application</b> to build an .app file, or <b>Build Executable</b> to build an .exe file.<br><br></li>
<li>
Select any other options you need, then choose <b>OK</b>.<p class=tl>
-or-</P></li>
</ol>
<ul type=disc>
<li>
Use the <a href="lngbuild_app.htm">BUILD APP</a> or <a href="lngbuild_exe.htm">BUILD EXE</a> command.</li>
</ul>
<p>
For example, to build an application called Myapp.app from a project named Myproj.pjx, you can type:</p>
<pre><code>BUILD APP myapp FROM myproj
</code></pre>
<p>
To create an application called Myapp.exe from a project named Myproj.pjx, you can type:</p>
<pre><code>BUILD EXE myapp FROM myproj
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also use the Build dialog box to create an Automation server from your Visual FoxPro application. For more information, see <a href="dgadding_ole.htm#dgcreating_ole_servers">Creating Automation Servers</a> in Chapter 16, “Adding OLE.”</p>
<p>
After you've created a finished application file for your project, you and your users can run it.</p>
<p class=label>
<b>To run an application as an .app file</b>
<ul type=disc>
<li>
In Visual FoxPro, choose <b>Do</b> from the <b>Program</b> menu and select the application file.<p class=tl>
-or-</P></li>
<li>
In the <b>Command</b> window, type <a href="lngdo.htm">DO</a> and the name of your application file.<p class=tl>
For example, to run an application called MYAPP, type:</P><pre><code>DO myapp.app
</code></pre>
</li>
</ul>
<p>
If you have created an .exe file from your application, users can run it in a variety of ways.</p>
<p class=label>
<b>To run an application as an .exe file</b>
<ul type=disc>
<li>
In Visual FoxPro, choose <b>Do</b> from the <b>Program</b> menu and select the application file, or in the <b>Command</b> window, type <a href="lngdo.htm">DO</a> and the name of your application file.<p class=tl>
For example, to run an .exe file called Myapp.exe, type:</P><pre><code>DO myapp.exe
</code></pre>
<p class=tl>
-or-</P></li>
<li>
In Windows, double-click the icon for the .exe file.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use the <a href="wizsetup_wizard.htm">Setup Wizard</a> to create an installation routine that installs the appropriate files.</p></li>
</ul>
</BODY>
</HTML>

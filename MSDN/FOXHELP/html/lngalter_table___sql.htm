<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ALTER TABLE - SQL Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngalter_table___sql"></a><sup></sup>ALTER TABLE – SQL Command</h1>
<p>
<a href="lngalter_table___sqlx.htm">Example</a> &nbsp; <a href="lngalter_table___sqlsa.htm">See Also</a></p>
<p>
Programmatically modifies the structure of a table.</p>
<p class=label>
<b>Syntax</b></p>
<p>
ALTER TABLE <i>TableName1</i><br>
 &nbsp; ADD | ALTER [COLUMN] <i>FieldName1</i><br>
 &nbsp;&nbsp;&nbsp;&nbsp; <i>FieldType</i> [(<i>nFieldWidth</i> [, <i>nPrecision</i>])]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NULL | NOT NULL]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [CHECK <i>lExpression1</i> [ERROR <i>cMessageText1</i>]]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [DEFAULT <i>eExpression1</i>]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [PRIMARY KEY | UNIQUE]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [REFERENCES <i>TableName2</i> [TAG <i>TagName1</i>]]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NOCPTRANS]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NOVALIDATE]<br>
-or-<br>
ALTER TABLE <i>TableName1</i><br>
 &nbsp; ALTER [COLUMN] <i>FieldName2</i><br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NULL | NOT NULL]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [SET DEFAULT <i>eExpression2</i>]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [SET CHECK <i>lExpression2</i> [ERROR <i>cMessageText2</i>]]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [DROP DEFAULT]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [DROP CHECK]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [NOVALIDATE]<br>
-or-<br>
ALTER TABLE <i>TableName1</i><br>
 &nbsp; [DROP [COLUMN] <i>FieldName3</i>]<br>
 &nbsp; [SET CHECK <i>lExpression3</i> [ERROR <i>cMessageText3</i>]]<br>
 &nbsp; [DROP CHECK]<br>
 &nbsp; [ADD PRIMARY KEY <i>eExpression3</i> TAG <i>TagName2</i> [FOR <i>lExpression4</i>]]<br>
 &nbsp; [DROP PRIMARY KEY]<br>
 &nbsp; [ADD UNIQUE <i>eExpression4</i> [TAG <i>TagName3</i> [FOR <i>lExpression5</i>]]]<br>
 &nbsp; [DROP UNIQUE TAG <i>TagName4</i>]<br>
 &nbsp; [ADD FOREIGN KEY [<i>eExpression5</i>] TAG <i>TagName4</i> [FOR <i>lExpression6</i>]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; REFERENCES <i>TableName2</i> [TAG <i>TagName5</i>]]<br>
 &nbsp; [DROP FOREIGN KEY TAG <i>TagName6</i> [SAVE]]<br>
 &nbsp; [RENAME COLUMN <i>FieldName4</i> TO <i>FieldName5</i>]<br>
 &nbsp; [NOVALIDATE]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>TableName1</i></p>
<p class=indent>
Specifies the name of the table whose structure is modified.</p>
<p class=dt>
ADD [COLUMN] <i>FieldName1</i></p>
<p class=indent>
Specifies the name of the field to add. A single table can contain up to 255 fields. If one or more fields allow null values, the limit is reduced by one to 254 fields.</p>
<p class=dt>
ALTER [COLUMN] <i>FieldName1</i></p>
<p class=indent>
Specifies the name of an existing field to modify.</p>
<p class=dt>
<i>FieldType</i> [(<i>nFieldWidth</i> [, <i>nPrecision</i>])]</p>
<p class=indent>
Specifies the field type, field width, and field precision (number of decimal places) for a new or modified field.</p>
<p class=tl>
<i>FieldType</i> is a single letter indicating the field's data type. Some field data types require that you specify <i>nFieldWidth</i> or <i>nPrecision</i> or both.</P><p class=tl>
The following table lists the values for <i>FieldType</i> and indicates whether <i>nFieldWidth</i> and <i>nPrecision</i> are required:</P><table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=20%><i>FieldType</i></td>
<td class=label width=20%><i>nFieldWidth</i></td>
<td class=label width=20%><i>nPrecision</i></td>
<td class=label width=40%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=20%>C</td>
<td width=20%>n</td>
<td width=20%>–</td>
<td width=40%>Character field of width <i>n</i></td>
</tr>
<tr valign=top>
<td width=20%>D</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Date</td>
</tr>
<tr valign=top>
<td width=20%>T</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>DateTime</td>
</tr>
<tr valign=top>
<td width=20%>N</td>
<td width=20%>n</td>
<td width=20%>d</td>
<td width=40%>Numeric field of width <i>n</i> with <i>d</i> decimal places</td>
</tr>
<tr valign=top>
<td width=20%>F</td>
<td width=20%>n</td>
<td width=20%>d</td>
<td width=40%>Floating numeric field of width <i>n</i> with <i>d</i> decimal places</td>
</tr>
<tr valign=top>
<td width=20%>I</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Integer</td>
</tr>
<tr valign=top>
<td width=20%>B</td>
<td width=20%>–</td>
<td width=20%>d</td>
<td width=40%>Double</td>
</tr>
<tr valign=top>
<td width=20%>Y</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Currency</td>
</tr>
<tr valign=top>
<td width=20%>L</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Logical</td>
</tr>
<tr valign=top>
<td width=20%>M</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Memo</td>
</tr>
<tr valign=top>
<td width=20%>G</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>General</td>
</tr>
<tr valign=top>
<td width=20%>P</td>
<td width=20%>–</td>
<td width=20%>–</td>
<td width=40%>Picture</td>
</tr>
</table><br>
<p class=tl>
<i>nFieldWidth</i> and <i>nPrecision</i> are ignored for D, T, I, Y, L, M, G, and P types. <i>nPrecision</i> defaults to zero (no decimal places) if <i>nPrecision</i> isn't included for the N, F, or B types.</P><p class=dt>
NULL | NOT NULL</p>
<p class=indent>
Allows or precludes null values in the field. If one or more fields can contain null values, the maximum number of fields the table can contain is reduced by one, from 255 to 254.</p>
<p class=tl>
If you omit NULL and NOT NULL, the current setting of SET NULL determines whether null values are allowed in the field. However, if you omit NULL and NOT NULL and include the PRIMARY KEY or UNIQUE clause, the current setting of SET NULL is ignored and the field defaults to NOT NULL.</P><p class=dt>
CHECK <i>lExpression1</i></p>
<p class=indent>
Specifies a validation rule for the field. <i>lExpression1</i> must evaluate to a logical expression; it can be a user-defined function or a stored procedure. When a blank record is appended, the validation rule is checked. An error is generated if the validation rule doesn't allow for a blank field value in an appended record.</p>
<p class=dt>
ERROR <i>cMessageText1</i></p>
<p class=indent>
Specifies the error message displayed when the field validation rule generates an error. The message is displayed only when data is changed within a Browse or Edit window.</p>
<p class=dt>
DEFAULT <i>eExpression1</i></p>
<p class=indent>
Specifies a default value for the field. The data type of <i>eExpression1</i> must be the same as the data type for the field.</p>
<p class=dt>
PRIMARY KEY</p>
<p class=indent>
Creates a primary index tag. The index tag has the same name as the field.</p>
<p class=dt>
UNIQUE</p>
<p class=indent>
Creates a candidate index tag with the same name as the field. </p>
<p class=tl>
For more information about candidate indexes, see Chapter 7, <a href="dgworking_with_tables.htm">Working with Tables</a>, in the <i>Programmer's Guide</i>.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Candidate indexes (created by including the UNIQUE option, provided for ANSI compatibility in ALTER TABLE or CREATE TABLE) are not the same as indexes created with the UNIQUE option in the INDEX command. An index created with UNIQUE in the INDEX command allows duplicate index keys; candidate indexes do not allow duplicate index keys.</p><p class=tl>
Null values and duplicate records are not permitted in a field used for a primary or candidate index.</P><p class=tl>
If you are creating a new field with ADD COLUMN, Microsoft Visual FoxPro will not generate an error if you create a primary or candidate index for a field that supports null values. However, Visual FoxPro will generate an error if you attempt to enter a null or duplicate value into a field used for a primary or candidate index.</P><p class=tl>
If you are modifying an existing field and the primary or candidate index expression consists of fields in the table, Visual FoxPro checks the fields to see if they contain null values or duplicate records. If they do, Visual FoxPro generates an error and the table is not altered.</P><p class=dt>
REFERENCES <i>TableName2</i> TAG <i>TagName1</i></p>
<p class=indent>
Specifies the parent table to which a persistent relationship is established. TAG <i>TagName1</i> specifies the parent table's index tag on which the relationship is based. Index tag names can contain up to 10 characters.</p>
<p class=dt>
NOCPTRANS</p>
<p class=indent>
Prevents translation to a different code page for character and memo fields. If the table is converted to another code page, the fields for which NOCPTRANS has been specified are not translated. NOCPTRANS can only be specified for character and memo fields.</p>
<p class=tl>
The following example creates a table named MYTABLE containing two character fields and two memo fields. The second character field <code>char2</code> and the second memo field <code>memo2</code> include NOCPTRANS to prevent translation.</P><pre><code>CREATE TABLE mytable (char1 C(10), char2 C(10) NOCPTRANS,;
 &nbsp; memo1 M, memo2 M NOCPTRANS)
</code></pre>
<p class=dt>
ALTER [COLUMN] <i>FieldName2</i></p>
<p class=indent>
Specifies the name of an existing field to modify. Note that multiple ALTER COLUMN clauses are required to change more than one property of a field in a single ALTER TABLE command. See the ALTER TABLE examples to see how the ALTER COLUMN clauses are structured.</p>
<p class=dt>
SET DEFAULT <i>eExpression2</i></p>
<p class=indent>
Specifies a new default value for an existing field. The data type of <i>eExpression2</i> must be the same as the data type for the field.</p>
<p class=dt>
SET CHECK <i>lExpression2</i></p>
<p class=indent>
Specifies a new validation rule for an existing field. <i>lExpression2</i> must evaluate to a logical expression, and may be a user-defined function or a stored procedure.</p>
<p class=dt>
ERROR <i>cMessageText2</i></p>
<p class=indent>
Specifies the error message displayed when the field validation rule generates an error. The message is displayed only when data is changed within a Browse or Edit window.</p>
<p class=dt>
DROP DEFAULT</p>
<p class=indent>
Removes the default value for an existing field.</p>
<p class=dt>
DROP CHECK</p>
<p class=indent>
Removes the validation rule for an existing field.</p>
<p class=dt>
DROP [COLUMN] <i>FieldName3</i></p>
<p class=indent>
Specifies a field to remove from the table. Removing a field from the table also removes the field's default value setting and field validation rule.</p>
<p class=tl>
If index key or trigger expressions reference the field, the expressions become invalid when the field is removed. In this case, an error isn't generated when the field is removed, but the invalid index key or trigger expressions will generate errors at run time.</P><p class=dt>
SET CHECK <i>lExpression3</i></p>
<p class=indent>
Specifies the table validation rule. <i>lExpression3</i> must evaluate to a logical expression; it can be a user-defined function or a stored procedure.</p>
<p class=dt>
ERROR <i>cMessageText3</i></p>
<p class=indent>
Specifies the error message displayed when the table validation rule generates an error. The message is displayed only when data is changed within a Browse or Edit window.</p>
<p class=dt>
DROP CHECK</p>
<p class=indent>
Removes the table's validation rule.</p>
<p class=dt>
ADD PRIMARY KEY <i>eExpression3</i> TAG <i>TagName2</i> [FOR <i>lExpression4</i>]</p>
<p class=indent>
Adds a primary index to the table. <i>eExpression3</i> specifies the primary index key expression; <i>TagName2</i> specifies the name of the primary index tag. Index tag names can contain up to 10 characters. If TAG <i>TagName2</i> is omitted and <i>eExpression3</i> is a single field, the primary index tag has the same name as the field specified in <i>eExpression3</i>.</p>
<p class=tl>
Include FOR <i>lExpression4</i> to specify a condition whereby only records that satisfy the filter expression <i>lExpression4</i> are available for display and access; primary index keys are created in the index file for just those records matching the filter expression. Note that you should avoid using the FOR clause to create a primary index; the uniqueness of a primary key is only enforced for those records that match the condition specified with FOR <i>lExpression4</i>. Instead, use the INDEX command with a FOR clause to create a filtered index.</P><p class=tl>
Rushmore optimizes an ALTER TABLE&nbsp;...&nbsp;FOR <i>lExpression4</i> command if <i>lExpression4</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR clause.</P><p class=tl>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
DROP PRIMARY KEY</p>
<p class=indent>
Removes the primary index and its index tag. Because a table can have only one primary key, it isn't necessary to specify the name of the primary key. Removing the primary index also deletes any persistent relations based on the primary key.</p>
<p class=dt>
ADD UNIQUE <i>eExpression4</i> [TAG <i>TagName3</i> [FOR <i>lExpression5</i>]]</p>
<p class=indent>
Adds a candidate index to the table. <i>eExpression4</i> specifies the candidate index key expression; <i>TagName3</i> specifies the name of the candidate index tag. Index tag names can contain up to 10 characters. If you omit TAG <i>TagName3,</i> and if <i>eExpression4</i> is a single field, the candidate index tag has the same name as the field specified in <i>eExpression4</i>.</p>
<p class=tl>
Include FOR <i>lExpression5</i> to specify a condition whereby only records that satisfy the filter expression <i>lExpression5</i> are available for display and access; candidate index keys are created in the index file for just those records matching the filter expression.</P><p class=tl>
Rushmore optimizes an ALTER TABLE&nbsp;...&nbsp;FOR <i>lExpression5</i> command if <i>lExpression5</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR clause.</P><p class=tl>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
DROP UNIQUE TAG <i>TagName4</i></p>
<p class=indent>
Removes the candidate index and its index tag. Because a table can have multiple candidate keys, you must specify the name of the candidate index tag.</p>
<p class=dt>
ADD FOREIGN KEY [<i>eExpression5</i>] TAG <i>TagName4</i> [FOR <i>lExpression6</i>]</p>
<p class=indent>
Adds a foreign (non-primary) index to the table. <i>eExpression5</i> specifies the foreign index key expression and <i>TagName4</i> specifies the name of the foreign index tag. Index tag names can contain up to 10 characters.</p>
<p class=tl>
Include FOR <i>lExpression6</i> to specify a condition whereby only records that satisfy the filter expression <i>lExpression6</i> are available for display and access; foreign index keys are created in the index file for just those records matching the filter expression.</P><p class=tl>
Rushmore optimizes an ALTER TABLE&nbsp;...&nbsp;FOR <i>lExpression6</i> command if <i>lExpression6</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR clause.</P><p class=tl>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
REFERENCES <i>TableName2</i> [TAG <i>TagName5</i>]</p>
<p class=indent>
Specifies the parent table to which a persistent relationship is established. Include TAG <i>TagName5</i> to establish a relationship based on an existing index tag for the parent table. Index tag names can contain up to 10 characters. If you omit TAG <i>TagName5</i>, the relationship is established using the parent table's primary index tag.</p>
<p class=dt>
DROP FOREIGN KEY TAG <i>TagName6</i> [SAVE]</p>
<p class=indent>
Deletes a foreign key whose index tag is <i>TagName6</i>. If you omit SAVE, the index tag is deleted from the structural index. Include SAVE to prevent the index tag from being deleted from the structural index.</p>
<p class=dt>
RENAME COLUMN <i>FieldName4</i> TO <i>FieldName5</i></p>
<p class=indent>
Allows you to change the name of a field in the table. <i>FieldName4</i> specifies the name of the field that is renamed. <i>FieldName5</i> specifies the new name of the field.</p>
<p class=atl>
<B><b>Caution</b></B>&nbsp;&nbsp;&nbsp;Exercise care when renaming table fields — index expressions, field and table validation rules, commands, functions, and so on may reference the original field names.</p><p class=dt>
NOVALIDATE</p>
<p class=indent>
Specifies that Visual FoxPro allows changes to be made to the structure of the table that may violate the integrity of the data in the table. By default, Visual FoxPro prevents ALTER TABLE from making changes to the structure of the table that violate the integrity of the data in the table. Include NOVALIDATE to override this default behavior.</p>
<p class=label>
<b>Remarks</b></p>
<p>
ALTER TABLE can be used to modify the structure of a table that has not been added to a database. However, Visual FoxPro generates an error if you include the DEFAULT, FOREIGN KEY, PRIMARY KEY, REFERENCES, or SET clauses when modifying a free table.</p>
<p>
ALTER TABLE may rebuild the table by creating a new table header and appending records to the table header. For example, changing a field's type or width may cause the table to be rebuilt.</p>
<p>
After a table is rebuilt, field validation rules are executed for any fields whose type or width is changed. If you change the type or width of any field in the table, the table rule is executed.</p>
<p>
If you modify field or table validation rules for a table that has records, Visual FoxPro tests the new field or table validation rules against the existing data and issues a warning on the first occurrence of a field or table validation rule or of a trigger violation.</p>
</BODY>
</HTML>

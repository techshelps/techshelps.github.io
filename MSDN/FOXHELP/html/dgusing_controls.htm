<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Controls</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgusing_controls"></a><sup></sup>Chapter 10: Using Controls</h1>
<p>
Controls are the primary medium of user interaction. By typing and clicking, and by moving through controls on the <a href="glsform.htm">forms</a> in your application, users can manipulate their data and accomplish the tasks they want to do.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dgunderstanding_controls_and_data">Understanding Controls and Data</a></li>
<li>
<a href="#dgchoosing_the_right_control_for_the_task">Choosing the Right Control for the Task</a></li>
<li>
<a href="#dgmaking_controls_easier_to_use">Making Controls Easier to Use</a></li>
<li>
<a href="#dgextending_forms">Extending Forms</a></li>
</ul>
<p>
For additional information, see <a href="ctlcontrols_and_objects.htm">Controls and Objects</a> in the <i>Language Reference</i>.</p>

<h2><a name="dgunderstanding_controls_and_data"></a>Understanding Controls and Data</h2>
<p>
You can have two types of controls on your forms: controls that are bound to data and controls that are not. When users interact with bound controls, the values that they enter or choose are stored in the data source, which can be a table field, a cursor field, or a <a href="glsvariable.htm">variable</a>. You bind a control to data by setting its <a href="lngcontrolsource_property.htm">ControlSource</a> property, or, in the case of grids, its <a href="lngrecordsource_property.htm">RecordSource</a> property.</p>
<p>
If you don’t set the ControlSource property of a control, the value that the user enters or chooses in the control is only stored as a property setting. The value is not written to disk or stored in memory beyond the lifetime of the control.</p>
<p class=label>
<b>Effect of a ControlSource Property Setting on Controls</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Control</b></td>
<td class=label width=72%><b>Effect</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="ctlcheckbox_control.htm">Check box</a></td>
<td width=72%>If the ControlSource is a field in a table, then NULL values, logical values true (.T.) or false (.F.), or numeric values 0, 1, or 2 in the ControlSource field cause the check box to be selected, cleared, or grayed as the record pointer moves through the table.</td>
</tr>
<tr valign=top>
<td width=28%><a href="ctlcolumn_object.htm">Column</a></td>
<td width=72%>If the ControlSource is a table field, the user is directly editing the field when editing values in the column. To bind an entire grid to data, set the RecordSource property of the grid.</td>
</tr>
<tr valign=top>
<td width=28%><a href="ctllistbox_control.htm">List box</a> or <br>
<a href="ctlcombobox_control.htm">combo box</a></td>
<td width=72%>If the ControlSource is a variable, the value the user chooses in the list is stored in the variable. If the ControlSource is a field in a table, the value is stored in the field at the record pointer. If an item in the list matches the value of the field in the table, the item is selected in the list when the record pointer moves through the table.</td>
</tr>
<tr valign=top>
<td width=28%><a href="ctloptionbutton_control.htm">Option button</a></td>
<td width=72%>If the ControlSource is a numeric field, 0 or 1 is written to the field, depending on whether or not the button is chosen.<br>
<br>
If the ControlSource is logical, .T. or .F. is written to the field, depending on whether the button is chosen. If the record pointer moves in the table, the value of the option button is updated to reflect the new value in the field.<br>
<br>
If the ControlSource of the option button’s OptionGroup control (not the option button itself) is a character field, the caption of the option button is stored to the field if the option button is chosen. Note that the control source for an option button (as distinct from an OptionGroup control) cannot be a character field, or Visual FoxPro will report a <a href="glsdata_type.htm">data type</a> mismatch when the form is run.</td>
</tr>
<tr valign=top>
<td width=28%><a href="ctlspinner_control.htm">Spinner</a></td>
<td width=72%>The spinner reflects and writes numeric values to the underlying field or variable.</td>
</tr>
<tr valign=top>
<td width=28%><a href="ctltextbox_control.htm">Text box</a> or <br>
<a href="ctleditbox_control.htm">edit box</a></td>
<td width=72%>The value in the table field is displayed in the text box. Changes the user makes to this value are written back to the table. Moving the record pointer affects the <a href="lngvalue_property.htm">Value property</a> of the text box.</td>
</tr>
</table><br>
<p>
Some of the tasks you want to accomplish with controls require having data bound to the control. Other tasks will not.</p>

<h2><a name="dgchoosing_the_right_control_for_the_task"></a>Choosing the Right Control for the Task</h2>
<p>
Visual FoxPro controls are flexible and versatile. Though there are multiple controls you could use to accomplish any particular task, you need to have a consistent approach to the controls you use so that users can tell what to expect when they see the interface you provide. For example, a label has a <a href="lngclick_event.htm">Click</a> event in the same way that a command button does, but users familiar with graphical interfaces expect to click on command buttons to perform actions.</p>
<p>
Most of the functionality you’ll want to build into your forms will fall under one of the following categories:</p>
<ul type=disc>
<li>
Providing users with a set of predetermined choices</li>
<li>
Accepting user input that can’t be predetermined</li>
<li>
Accepting user input in a given range</li>
<li>
Allowing users to perform specific actions</li>
<li>
Performing specific actions at given intervals</li>
<li>
Displaying information</li>
</ul>
<h3>Providing a Set of Predetermined Choices</h3>
<p>
One of the most straightforward ways to ensure the validity of the data in a database is to give users a predetermined set of options. By controlling user choices, you can make sure that no invalid data is stored in the database. The following controls allow you to provide users with a set of predetermined choices:</p>
<ul type=disc>
<li>
Option button groups</li>
<li>
List boxes and drop-down lists</li>
<li>
Check boxes</li>
</ul>
<h4>Using Option Button Groups</h4>
<p>
<img src="b008.gif" border=0></p>
<p>
Option button groups are containers that contain option buttons. Typically, option buttons allow users to specify one of a number of operational options in a dialog box rather than data entry. For example, option buttons can be used to specify output to a file, a printer, or to print preview as described in Chapter 12, <a href="dgadding_queries_and_reports.htm">Adding Queries and Reports</a>.</p>
<h4>Setting the Number of Option Buttons in an Option Button Group</h4>
<p>
When you create an option button group on a form, two option buttons are included by default. You can determine how many option buttons are in a group by changing the ButtonCount property.</p>
<p class=label>
<b>To set the number of option buttons in a group</b>
<ul type=disc>
<li>
Set the <a href="lngbuttoncount_property.htm">ButtonCount</a> property to the desired number of option buttons.<p class=tl>
For example, to have a group of six option buttons, set the ButtonCount property of the option button group to 6.</P></li>
</ul>
<p>
The <a href="lngvalue_property.htm">Value</a> property of the group indicates which of the buttons has been chosen. For example, if a user chooses the fourth option button in a group of six option buttons, the value of the option button group is 4.</p>
<p>
If the group’s <a href="lngcontrolsource_property.htm">ControlSource</a> property is a character field, or if the Value property is set to a character value before the form is run, the group’s Value property is the caption of the selected option button.</p>
<h4>Setting Option Button Properties</h4>
<p>
To manually adjust individual elements of an option button or command button group in the <a href="wndform_designer.htm">Form Designer</a>, choose Edit from the group’s shortcut menu.</p>
<p>
You can set <a href="glsproperty.htm">properties</a> on individual buttons in the <a href="wndproperties_window.htm">Properties window</a>. You can also set these properties at run time by specifying the name of the option button and the desired property setting. For example, the following line of code, included in the method or event code of some object on the same form as the option button group, sets the caption of <code>optCust</code> in the option button group <code>opgChoices</code>:</p>
<pre><code>THISFORM.opgChoices.optCust.Caption = "Sort by Customer"
</code></pre>
<p>
You can also set these properties at <a href="glsrun_time.htm">run time</a> by using the <a href="lngbuttons_property.htm">Buttons</a> property and specifying the index number of the option button in the group. For example, if <code>optCust</code> is the third button in the group, the following line of code also sets the caption of <code>optCust</code>:</p>
<pre><code>THISFORM.opgChoices.Buttons(3).Caption = "Sort by Customer"
</code></pre>
<p class=label>
<b>To set properties on all buttons in a group</b>
<ul type=disc>
<li>
Use the <a href="lngsetall_method.htm">SetAll</a> method of the group.<p class=tl>
For example, the following line of code disables all the buttons in an option button group named <code>opgMyGroup</code> on a form:</P><pre><code>THISFORM.opgMyGroup.SetAll("Enabled",.F., "OptionButton")
</code></pre>
</li>
</ul>
<h4>Enabling and Disabling Buttons in a Group</h4>
<p>
The previous example shows how to programmatically disable all option buttons in a group. When the buttons are disabled, they are displayed in the colors specified in the <a href="lngdisabledbackcolor_disabledforecolor_properties.htm">DisabledForeColor and DisabledBackColor</a> properties of the option buttons. You could also set the <a href="lngenabled_property.htm">Enabled</a> property of the option button group to false (.F.) to disable the group; however, there would be no visual clue for the user.</p>
<h4>Determining Which Option Button Is Currently Selected</h4>
<p>
You can use the <a href="lngvalue_property.htm">Value</a> property of the <a href="glsoption_button_group_.htm">option button group</a> to determine which option button in the group is selected. If the <a href="glscontrol_source.htm">control source</a> for the button is numeric, you have five option buttons in a group. If the third button is selected, the Value property of the option button group is 3; if no option buttons are selected, the Value property of the option button group is 0.</p>
<p>
You can also determine the caption of the selected option button by using the <a href="lngvalue_property.htm">Value</a> and <a href="lngbuttons_property.htm">Buttons</a> properties of the group. For example, the following line of code stores the <a href="lngcaption_property.htm">Caption</a> property of the selected option button to a variable <code>cSelected</code>.</p>
<pre><code>oGroup = THISFORM.opg1
cSelected = oGroup.Buttons(oGroup.Value).Caption
</code></pre>
<h4>Filtering Lists with Option Buttons</h4>
<p>
If you have a small set of predetermined table <a href="glsfilter.htm">filters</a>, you could use option buttons to allow users to switch between the filters.</p>
<p>
The following example assumes a form with a list box (<code>lstCustomers</code>) and an option button group that contains three option buttons.</p>
<p class=label>
<b>Property Settings for the List Box</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Object</b></td>
<td class=label width=26%><b>Property</b></td>
<td class=label width=49%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=25%>lstCustomers</td>
<td width=26%><a href="lngrowsourcetype_property.htm">RowSourceType</a></td>
<td width=49%>2 - Alias</td>
</tr>
<tr valign=top>
<td width=25%>lstCustomers</td>
<td width=26%><a href="lngrowsource_property.htm">RowSource</a></td>
<td width=49%>Customer</td>
</tr>
</table><br>
<p>
The filters are set in the <a href="lngclick_event.htm">Click</a> event code of the option buttons.</p>
<p class=label>
<b>Event Code for Filtering a List When a User Chooses an Option Button</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=17%><b>Object</b></td>
<td class=label width=17%><b>Event</b></td>
<td class=label width=66%><b>Code</b></td>
</tr>
<tr valign=top>
<td width=17%>optAll</td>
<td width=17%>Click</td>
<td width=66%><pre><code>SET FILTER TO
GO TOP
THISFORM.lstCustomers.Requery</code></pre>
</td>
</tr>
<tr valign=top>
<td width=17%>optCanada</td>
<td width=17%>Click</td>
<td width=66%><pre><code>SET FILTER TO customer.country = "Canada"
GO TOP
THISFORM.lstCustomers.Requery</code></pre>
</td>
</tr>
<tr valign=top>
<td width=17%>optUK</td>
<td width=17%>Click</td>
<td width=66%><pre><code>SET FILTER TO customer.country = "UK"
GO TOP
THISFORM.lstCustomers.Requery</code></pre>
</td>
</tr>
</table><br>
<p>
When the user closes the form, don’t forget to reset the filter by including SET FILTER TO in the Click event of the closing button or in the <a href="lngdestroy_event.htm">Destroy</a> event.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;To refresh a list when the list source might have changed, use the <a href="lngrequery_method.htm">Requery</a> method.</p>
<h4>Using Option Buttons to Store User Choices to a Table</h4>
<p>
While it is not as common, you can use option buttons to get information from a user to be stored in a table by saving the <a href="lngcaption_property.htm">Caption</a> property. If you have a standardized testing application, for example, you could use option buttons to allow a user to choose among multiple choice options A, B, C, or D. You could also use option buttons to indicate gender in an employee table.</p>
<p class=label>
<b>To store the Caption property of an option button to a table</b>
<ol>
<li>
Set the <a href="lngvalue_property.htm">Value</a> property of the option button group to an empty string.<br><br></li>
<li>
Set the <a href="lngcontrolsource_property.htm">ControlSource</a> property of the option button group to a character field in a table.</li>
</ol>
<p>
For example, if the captions of the option buttons in a group are “A”, “B”, “C”, and “D”, and the ControlSource of the option button group is a character field, when a user chooses the button with the caption “B”, “B” is stored in the field.</p>
<p class=label>
<b>To see an example of a multiple-choice test using option buttons</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>Options buttons</b>.<br><br></li>
<li>
Click <b>Present a user with multiple choices</b>.</li>
</ol>

<h4><a name="dgusing_list_boxes_and_drop_down_list_boxes"></a>Using List Boxes and Drop-Down List Boxes</h4>
<p>
<img src="b011.gif" border=0></p>
<p>
List boxes and drop-down list boxes (combo box controls with the Style property set to 2 - Dropdown List) provide a user with scrollable lists that contain a number of options or pieces of information. In a list box, multiple items can be visible at all times. In a drop-down list box, only one item is visible, but a user can click the down button to display a scrolling list of all the items in the drop-down list box.</p>
<p>
<img src="b010.gif" border=0></p>
<p>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory to see several examples that demonstrate using list boxes and drop-down list boxes, including the following:</p>
<ul type=disc>
<li>
Add pictures to a list.</li>
<li>
Multiselect items in a list.</li>
<li>
Fill a list with values from different sources.</li>
<li>
Display multiple columns in a list.</li>
<li>
Sort list items.</li>
<li>
Move items between lists.</li>
</ul>
<p class=label>
<b>List box and a drop-down list box with the same RowSource property setting</b></p>
<p>
<img src="afd10001.gif" border=0></p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you have room on the form and if you want to emphasize the choices a user has, use a list. To conserve space and emphasize the currently selected item, use a drop-down list box.</p>
<h4>Common List Properties and Methods</h4>
<p>
The following list box properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcolumncount_property.htm">ColumnCount</a></td>
<td width=75%>The number of columns in the list box.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcontrolsource_property.htm">ControlSource</a></td>
<td width=75%>Where the value that a user chooses from the list is stored.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngmoverbars_property.htm">MoverBars</a></td>
<td width=75%>Whether mover bars are displayed to the left of list items so that a user can easily rearrange the order of items in the list.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngmultiselect_property.htm">Multiselect</a></td>
<td width=75%>Whether the user can select more than one item in the list at a time.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngrowsource_property.htm">RowSource</a></td>
<td width=75%>Where the values displayed in the list come from.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngrowsourcetype_property.htm">RowSourceType</a></td>
<td width=75%>Whether the RowSource is a value, a table, a SQL statement, a query, an array, a list of files, or a list of fields.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <a href="lngvalue_property.htm">Value</a> property of a list can be numeric or character. The default is numeric. Set the Value property to an empty string if the RowSource is a character value and if you want the Value property to reflect the character string of the selected item in the list. You can press the SPACEBAR and then the BACKSPACE key to enter an empty string for a property in the <a href="wndproperties_window.htm">Properties window</a>.</p>
<p>
The following list box methods are commonly used.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Method</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngadditem_method.htm">AddItem</a></td>
<td width=75%>Adds an item to a list with a RowSourceType of 0.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngremoveitem_method.htm">RemoveItem</a></td>
<td width=75%>Removes an item from a list with a RowSourceType of 0.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngrequery_method.htm">Requery</a></td>
<td width=75%>Updates the list if the values in the RowSource have changed.</td>
</tr>
</table><br>
<h4>Filling a List Box or a Combo Box</h4>
<p>
You can fill a list box with items from a variety of sources by setting the <a href="lngrowsourcetype_property.htm">RowSourceType</a> and <a href="lngrowsource_property.htm">RowSource</a> properties.</p>
<p>
<b>Choosing the Type of Data for a List or Combo Box</b></p>
<p>
The <a href="lngrowsourcetype_property.htm">RowSourceType</a> property determines what kind of source populates the list box or combo box — for example, an <a href="glsarray.htm">array</a> or a <a href="glstable.htm">table</a>. Once you have set the RowSourceType, specify the source of the list items by setting the <a href="lngrowsource_property.htm">RowSource</a> property.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>RowSourceType</b></td>
<td class=label width=74%><b>Source of the List Items</b></td>
</tr>
<tr valign=top>
<td width=26%>0</td>
<td width=74%>None. Programmatically add items to the list.</td>
</tr>
<tr valign=top>
<td width=26%>1</td>
<td width=74%>Value</td>
</tr>
<tr valign=top>
<td width=26%>2</td>
<td width=74%>Alias</td>
</tr>
<tr valign=top>
<td width=26%>3</td>
<td width=74%>SQL Statement</td>
</tr>
<tr valign=top>
<td width=26%>4</td>
<td width=74%>Query (.qpr)</td>
</tr>
<tr valign=top>
<td width=26%>5</td>
<td width=74%>Array</td>
</tr>
<tr valign=top>
<td width=26%>6</td>
<td width=74%>Fields</td>
</tr>
<tr valign=top>
<td width=26%>7</td>
<td width=74%>Files</td>
</tr>
<tr valign=top>
<td width=26%>8</td>
<td width=74%>Structure</td>
</tr>
<tr valign=top>
<td width=26%>9</td>
<td width=74%>Popup. Included for backward compatibility.</td>
</tr>
</table><br>
<p>
The following sections describe the various RowSourceType settings.</p>
<p>
<B><b>None</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 0, the default, the list is not automatically populated. You can add items to the list by using the <a href="lngadditem_method.htm">AddItem</a> method:</p>
<pre><code>frmForm1.lstMyList.RowSourceType = 0
frmForm1.lstMyList.AddItem("First Item")
frmForm1.lstMyList.AddItem("Second Item")
frmForm1.lstMyList.AddItem("Third Item")
</code></pre>
<p>
The <a href="lngremoveitem_method.htm">RemoveItem</a> method allows you to remove items from the list. For example, the following line of code removes “Second Item” from the list:</p>
<pre><code>frmForm1.lstMyList.RemoveItem(2)
</code></pre>
<p>
<B><b>Value</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 1, you can specify multiple values in the RowSource property to be displayed in the list. If you set the RowSource property through the <a href="wndproperties_window.htm">Properties window</a>, include a comma-delimited list of items. If you set the RowSource programmatically, include the comma-delimited list in quotation marks:</p>
<pre><code>Form1.lstMyList.RowSourceType = 1
Form1.lstMyList.RowSource = "one,two,three,four"
</code></pre>
<p>
<B><b>Alias</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 2, you can include values from one or more fields in an open table.</p>
<p>
If the <a href="lngcolumncount_property.htm">ColumnCount</a> property is 0 or 1, the list displays values in the first field of the table. If you set the ColumnCount property to 3, the list displays values in the first three fields of the table. To display fields in a different order than they are stored in the table, set the RowSourceType property to 3 - SQL Statement or 6 - Fields.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the RowSourceType is 2 - Alias or 6 - Fields, when a user chooses a new value in the list, the table record pointer moves to the record with the value of that item.</p>
<p>
<B><b>SQL Statement</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 3 - SQL Statement, include a <a href="lngselect___sql.htm">SELECT - SQL</a> statement in the RowSource property. For example, the following statement selects all fields and all records from the Customer table into a <a href="glscursor.htm">cursor</a>:</p>
<pre><code>SELECT * FROM Customer INTO CURSOR mylist
</code></pre>
<p>
If you set the RowSource programmatically, remember to enclose the SELECT statement in quotation marks.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;By default, Visual FoxPro SELECT statements without INTO clauses immediately display the resulting cursor in a <a href="wndbrowse_window.htm">Browse window</a>. Since you rarely want this behavior in a RowSource SQL statement, include an INTO CURSOR clause in your SELECT statement.</p>
<p>
<B><b>Query</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 4, you can populate your list box with the results of a <a href="glsquery.htm">query</a> you designed in the <a href="wndquery_designer.htm">Query Designer</a>. When RowSourceType is set to 4, set RowSource to the .qpr file. For example, the following line of code sets the RowSource property of a list to a query.</p>
<pre><code>THISFORM.List1.RowSource = "region.qpr"
</code></pre>
<p>
If you don’t specify a file extension, Visual FoxPro assumes an extension of .qpr.</p>
<p>
<B><b>Array</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 5, the list is populated with the items in an <a href="glsarray.htm">array</a>. You can create an array property of the <a href="glsform.htm">form</a> or <a href="glsform_set.htm">form set</a> for the RowSource or use an array created elsewhere in your application.</p>
<p>
For information about creating array properties, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>.</p>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;The RowSource setting of a list is evaluated by Visual FoxPro as needed in your application, not just in the <a href="glsmethod.htm">method</a> in which you set the RowSource. You need to keep this scope in mind. If you create a local array in a method, that array will be scoped to the method and will not be available in all cases when Visual FoxPro needs to evaluate the property setting. If you set the RowSource of a list to an array property of the form or form set, you need to reference the property relative to the list, not relative to the method in which you set the property. For example, if you have a form array property named <code>arrayprop</code>, the following lines of code in the Init of the form produce different results:</p>
<pre><code>THIS.lst1.RowSource = "THIS.arrayprop"&nbsp;&nbsp; &amp;&amp; Error
THIS.lst1.RowSource = "THISFORM.arrayprop" &amp;&amp; No error.
</code></pre>
<p class=label>
<b>To populate a list with the elements in a multi-dimensional array</b>
<ol>
<li>
Set the <a href="lngrowsourcetype_property.htm">RowSourceType</a> property to 5.<br><br></li>
<li>
Set the <a href="lngrowsource_property.htm">RowSource</a> property to the multi-dimensional array.<br><br></li>
<li>
Set the <a href="lngcolumncount_property.htm">ColumnCount</a> property to the number of columns to display.<br><br></li>
<li>
Set the <a href="lngcolumnwidths_property.htm">ColumnWidths</a> property to the desired widths for each column.</li>
</ol>
<p>
<B><b>Fields</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 6, you can specify a field or comma-delimited list of fields to populate the list, such as:</p>
<pre><code>contact,company,country
</code></pre>
<p>
You can include the following types of information in the RowSource property of a list with a RowSourceType of 6 - Fields:</p>
<ul type=disc>
<li>
field</li>
<li>
alias.field</li>
<li>
alias.field, field, field, ...</li>
</ul>
<p>
If you want to have fields from multiple tables in the list, set the RowSourceType property to 3 - SQL Statement.</p>
<p>
Unlike a RowSourceType of 2 - Alias, a RowSourceType of 6 - Fields allows you to display fields independent of their actual positions in the table.</p>
<p>
<B><b>Files</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 7, the list is populated with files in the current directory. Additionally, options in the list allow you to choose a different drive and directory for file names to be displayed in the list.</p>
<p class=label>
<b>List populated with files in a directory</b></p>
<p>
<img src="afd10002.gif" border=0></p>
<p>
Set RowSource to the skeleton of the type of files you want to be displayed in the list. For example, to display Visual FoxPro tables in the list, set the RowSource property to <b>*.dbf</b>.</p>
<p>
<B><b>Structure</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 8, the list is populated with the fields in the table that you specify when you set the RowSource property. This RowSourceType setting is useful if you want to present the user with a list of fields to search for values in or a list of fields to order a table by.</p>
<p>
<B><b>Popup</b></B>&nbsp;&nbsp;&nbsp;If you set the RowSourceType property to 9, you can fill the list from a previously defined popup. This option is included for backward compatibility.</p>
<h4>Creating Multicolumn List Boxes</h4>
<p>
Although the default number of columns in a list box is one, a list box in Visual FoxPro can contain as many columns as you want. A multicolumn list box differs from a <a href="glsgrid_.htm">grid</a> in that you select a row at a time in a multicolumn list box while you can select individual cells in a grid, and data in the list cannot be directly edited.</p>
<p class=label>
<b>To display multiple columns in a list box</b>
<ol>
<li>
Set the <a href="lngcolumncount_property.htm">ColumnCount</a> property to the number of desired columns.<br><br></li>
<li>
Set the <a href="lngcolumnwidths_property.htm">ColumnWidths</a> property. For example, if there are three columns in the list box, the following command would set the column widths to 10, 15, and 30, respectively:<pre><code>THISFORM.listbox.ColumnWidths = "10, 15, 30"
</code></pre>
</li>
<li>
Set the <a href="lngrowsourcetype_property.htm">RowSourceType</a> property to <b>6 - Fields</b><code>.</code><br><br></li>
<li>
Set the <a href="lngrowsource_property.htm">RowSource</a> property to the fields to be displayed in the columns. For example, the following command sets the sources of three columns in a 3-column list box to the contact, city, and country fields of the customer table:<pre><code>form.listbox.RowSource = "contact,city,country"
</code></pre>
</li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;For the columns to align correctly, you need to either set the ColumnWidths property or change the <a href="lngfontname_property.htm">FontName</a> property to a monospaced font.</p>
<p>
When the RowSourceType of the list is set to 0 - None, you can use the AddListItem method to add items to a multicolumn list box. For example, the following code adds text to specific columns in a list box:</p>
<pre><code>THISFORM.lst1.ColumnCount = 3
THISFORM.lst1.Columnwidths = "100,100,100"
THISFORM.lst1.AddListItem("row1 col1", 1,1)
THISFORM.lst1.AddListItem("row1 col2", 1,2)
THISFORM.lst1.AddListItem("row1 col3", 1,3)
THISFORM.lst1.AddListItem("row2 col2", 2,2)
</code></pre>
<h4>Allowing Users to Select Multiple Items in a List Box</h4>
<p>
The default behavior of a list allows one item at a time to be selected. You can, however, allow a user to select multiple items in a list.</p>
<p class=label>
<b>To allow multiple selected items in a list</b>
<ul type=disc>
<li>
Set the <a href="lngmultiselect_property.htm">MultiSelect</a> property of the list to true (.T.).</li>
</ul>
<p>
To process the selected items — to copy them to an <a href="glsarray.htm">array</a> or incorporate them elsewhere in your application — loop through the list items and process those for which the <a href="lngselected_property.htm">Selected</a> property is true (.T.). The following code could be included in the <a href="lnginteractivechange_event.htm">InteractiveChange event</a> of a list box to display the selected items in a combo box, <code>cboSelected</code>, and the number of selected items in a text box, <code>txtNoSelected</code>:</p>
<pre><code>nNumberSelected = 0&nbsp; &amp;&amp; a variable to track the number
THISFORM.cboSelected.Clear &amp;&amp; clear the combo box
FOR nCnt = 1 TO THIS.ListCount
 &nbsp; IF THIS.Selected(nCnt)
 &nbsp;&nbsp;&nbsp;&nbsp; nNumberSelected = nNumberSelected + 1
 &nbsp;&nbsp;&nbsp;&nbsp; THISFORM.cboSelected.Additem (THIS.List(nCnt))
 &nbsp; ENDIF
ENDFOR
THISFORM.txtNoSelected.Value = nNumberSelected
</code></pre>
<h4>Allowing Users to Add Items to a List Box</h4>
<p>
In addition to allowing users to select items from a list box, you can allow users to interactively add items to a list.</p>
<p class=label>
<b>To add items to a list interactively</b>
<ul type=disc>
<li>
Use the <a href="lngadditem_method.htm">AddItem</a> method.</li>
</ul>
<p>
In the following example, when the user presses ENTER, the code in the KeyPress event of a text box adds the text in the text box to the list box and clears the text in the text box:</p>
<pre><code>LPARAMETERS nKeyCode, nShiftAltCtrl
IF nKeyCode = 13&nbsp;&nbsp; &amp;&amp; Enter Key
 &nbsp; THISFORM.lstAdd.AddItem(This.Value)
 &nbsp; THIS.Value = ""
ENDIF
</code></pre>
<h4>Allowing Users to Enter Data into a Table from a List</h4>
<p>
If the <a href="lngcontrolsource_property.htm">ControlSource</a> property is set to a field, whatever the user selects in the list is written to the table. This is an easy way to help ensure the integrity of the data in your table. While the user can still enter the wrong data, an illegal value cannot be entered.</p>
<p>
For example, if you have a list of states or counties for a user to choose from, the user cannot enter an invalid state or county abbreviation.</p>
<h4>Allowing Users to Go to a Record by Picking a Value in a List</h4>
<p>
Often, you want to let users select the <a href="glsrecord.htm">record</a> they want to view or edit. For example, you could provide users with a list of customer names. When the user selects a customer from the list, you select that customer’s record in the table and display customer information in text boxes on the form. You can do this several ways, depending on the source of data in your form.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>RowSourceType</b></td>
<td class=label width=72%><b>Selecting the appropriate record</b></td>
</tr>
<tr valign=top>
<td width=28%>2 - Alias<br>
6 - Fields</td>
<td width=72%>When the user chooses a value in the list, the record pointer is automatically set to the desired record. Issue <code>THISFORM.Refresh</code> in the InteractiveChange event of the list to show the new values in other controls on the form.</td>
</tr>
<tr valign=top>
<td width=28%>0 - None<br>
1 - Value<br>
3 - SQL Statement<br>
4 - QPR<br>
5 - Array</td>
<td width=72%>In the InteractiveChange event, select the table that has the record with the desired values, then search for the desired value. For example, if the RowSource holds customer identification numbers from the customer table, use this code:<pre><code>SELECT customer
LOCATE FOR THIS.Value = cust_id
THISFORM.Refresh</code></pre>
</td>
</tr>
</table><br>
<h4>Refreshing a One-To-Many Display Based on a List Value</h4>
<p>
When the user chooses to go to a record by picking a value in a list, you might have a <a href="glsone_to_many_relationship.htm">one-to-many relationship</a> that needs to reflect the changed record pointer in the <a href="glsparent_table.htm">parent table</a>. You can implement this functionality with both local tables and <a href="glslocal_view.htm">local</a> or <a href="glsremote_view.htm">remote</a> views.</p>
<p>
<b>Local Tables</b></p>
<p>
If the RowSourceType of the list is 2 - Alias or 6 - Fields and the RowSource is a local table with a relationship set in the form’s <a href="glsdata_environment.htm">data environment</a>, issue <code>THISFORM.Refresh</code> in the InteractiveChange event when the user chooses a new value. The many side of the <a href="glsone_to_many_relationship.htm">one-to-many relationship</a> automatically displays only the records that match the expression of the parent table involved in the <a href="glsrelation.htm">relation</a>.</p>
<p>
<b>Views</b></p>
<p>
Refreshing a one-to-many display is a little different if the RowSource of the list box is a <a href="glslocal_view.htm">local</a> or <a href="glsremote_view.htm">remote</a> view. The following example describes creating a form with a <a href="glslist_box_.htm">list box</a> and a <a href="glsgrid_.htm">grid</a>. The list box displays the values from the <code>cust_id</code> field in the <code>TESTDATA!Customer</code> table. The grid displays the orders associated with the <code>cust_id</code> field selected in the list box.</p>
<p>
First, in the <a href="wndquery_designer.htm">View Designer</a> create a parameterized view for the orders. When you create the view in the View Designer, set the selection criterion for the <a href="glsforeign_key.htm">foreign key</a> to a <a href="glsvariable.htm">variable</a>. In the following example, the variable is called <code>m.cCust_id</code>.</p>
<p class=label>
<b>Parameterized view using a variable</b></p>
<p>
<img src="afd10003.gif" border=0></p>
<p>
Then, when you design the form, follow the steps in the following procedure. Note that the view requires a value for the <a href="glsparameter.htm">parameter</a> that isn’t available when the form is loaded. By setting the <a href="lngnodataonload_property.htm">NoDataOnLoad</a> property of the view <a href="glscursor.htm">cursor</a> object to true (.T.), you prevent the view from being run until the <a href="lngrequerylp_rp.htm">REQUERY(&nbsp;)</a> function is called, at which time the user would have selected a value for the variable used in the parameterized view.</p>
<p class=label>
<b>To design a one-to-many list based on local or remote views</b>
<ol>
<li>
Add the table and the parameterized view to the <a href="glsdata_environment.htm">data environment</a>.<br><br></li>
<li>
In the <a href="wndproperties_window.htm">Properties</a> window for the view cursor object in the <b>Data Environment</b>, set the NoDataOnLoad property to true (.T.).<br><br></li>
<li>
Set the RowSourceType property of the list box to <b>6</b> — <b>Fields</b>, and set its RowSource property to the field referenced as the foreign key in the view’s parameter.<p class=tl>
In the example, you would set the RowSource property to <code>customer.cust_id</code>.</P></li>
<li>
Set the RecordSource property of the grid to the name of the view you created earlier.<br><br></li>
<li>
In the InteractiveChange event code of the list box, store the value of the list box to the variable, then requery the view, as in this example:<pre><code>m.cCust_id = THIS.Value
*assuming the name of the view is orders_view
=REQUERY("orders_view") 
</code></pre>
</li>
</ol>
<p>
For more information about local and remote views, see Chapter 8, <a href="dgcreating_views.htm">Creating Views</a>.</p>
<h4>Displaying Child Records in a List</h4>
<p>
You can display records from a <a href="glsone_to_many_relationship.htm">one-to-many relationship</a> in a list so that the list displays the child records in the relationship as the record pointer moves through the <a href="glsparent_table.htm">parent table</a>.</p>
<p class=label>
<b>To display child records in a list</b>
<ol>
<li>
Add a list to the form.<br><br></li>
<li>
Set the <a href="lngcolumncount_property.htm">ColumnCount</a> property of the list to the number of columns you want to display.<p class=tl>
For example, if you want to display the <code>Order_id</code>, <code>Order_net</code>, and <code>Shipped_on</code> fields in the list, set the ColumnCount property to 3.</P></li>
<li>
Set the <a href="lngcolumnwidths_property.htm">ColumnWidths</a> property to the appropriate widths for displaying your selected fields.<br><br></li>
<li>
Set the <a href="lngrowsourcetype_property.htm">RowSourceType</a> of the list to <b>3</b> — <b>SQL Statement</b>.<br><br></li>
<li>
Set the <a href="lngrowsource_property.htm">RowSource</a> to the <a href="lngselect.htm">SELECT</a> statement. For example, the following statement selects three fields from the orders table for the current record in the customer table:<pre><code>SELECT order_id, order_net, shipped_on from orders ;
WHERE order.cust_id = customer.cust_id ;
INTO CURSOR temp
</code></pre>
</li>
<li>
In the <a href="lnginit_event.htm">Init event</a> of the form and in the code that moves the record pointer through the table, requery the list:<pre><code>THISFORM.lstChild.Requery
</code></pre>
</li>
</ol>
<h4>Adding Pictures to Items in a List</h4>
<p>
You can set the <a href="lngpicture_property.htm">Picture property</a> of the list to the .bmp file you want displayed next to the items in the list.</p>
<p>
For example, you could have a list box populated with files. You might want to have a different bitmap next to the file if it is a table, a program, or some other file type.</p>
<p class=label>
<b>List box with pictures</b></p>
<p>
<img src="afd10004.gif" border=0></p>
<p>
The following code is associated with the <a href="lngclick_event.htm">Click event</a> of the list box:</p>
<pre><code>FOR iItem = 5 TO THIS.ListCount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; files start at the 5th item
 &nbsp; cExtension = UPPER(RIGHT(THIS.List(iItem),3))
 &nbsp; DO CASE
 &nbsp;&nbsp;&nbsp;&nbsp; CASE cExtension = "DBF"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THIS.Picture(iItem) = "tables.bmp"
 &nbsp;&nbsp;&nbsp;&nbsp; CASE cExtension = "BMP"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THIS.Picture(iItem) = "other.bmp"
 &nbsp;&nbsp;&nbsp;&nbsp; CASE cExtension = "PRG"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THIS.Picture(iItem) = "programs.bmp"
 &nbsp;&nbsp;&nbsp;&nbsp; CASE cExtension = "SCX"
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THIS.Picture(iItem) = "form.bmp"
 &nbsp;&nbsp;&nbsp;&nbsp; OTHERWISE 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; THIS.Picture(iItem) = IIF("]" $ cExtension, ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "", "textfile.bmp")
 &nbsp; ENDCASE
ENDFOR
</code></pre>
<h4>Using Check Boxes</h4>
<p>
<img src="b009.gif" border=0></p>
<p>
You can use <a href="glscheck_box_.htm">check boxes</a> to allow a user to specify a Boolean state: True or False, On or Off, Open or Closed. However, there are times when it isn’t accurate to evaluate something as True or False, such as unanswered questions on a True/False questionnaire.</p>
<p class=label>
<b>To see examples of using check boxes</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>Check boxes.</b></li>
</ol>
<p>
There are four possible states for a check box, as determined by the <a href="lngvalue_property.htm">Value property</a>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Display</b></td>
<td class=label width=74%><b>Value property</b></td>
</tr>
<tr valign=top>
<td width=26%><img src="afd10005.gif" border=0></td>
<td width=74%>0 or .F.</td>
</tr>
<tr valign=top>
<td width=26%><img src="afd10006.gif" border=0></td>
<td width=74%>1 or .T.</td>
</tr>
<tr valign=top>
<td width=26%><img src="afd10007.gif" border=0></td>
<td width=74%>2</td>
</tr>
<tr valign=top>
<td width=26%><img src="afd10008.gif" border=0></td>
<td width=74%>.NULL.</td>
</tr>
</table><br>
<p>
The Value property of the check box reflects the <a href="glsdata_type.htm">data type</a> of the last assignment. If you set the property to true (.T.) or false (.F.), the type is Logical until you set the property to a numeric value.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;A user can display a null value in a check box by pressing CTRL+0.</p>
<h4>Storing or Displaying Logical Fields</h4>
<p>
If you set the <a href="lngcontrolsource_property.htm">ControlSource</a> property of the check box to a logical field in a table, the check box is displayed as checked when the value in the current record is true (.T.), as not checked when the value in the current record is false (.F.), and as grayed when a <a href="glsnull_value.htm">null value</a> (.NULL.) is in the current record.</p>
<h3>Accepting Input That Can’t Be Predetermined</h3>
<p>
It is not always possible to anticipate all the possible values that a user might need to enter into a control. The following controls allow you to accept user input that can’t be predetermined:</p>
<ul type=disc>
<li>
Text boxes</li>
<li>
Edit boxes</li>
<li>
Combo boxes</li>
</ul>
<h4>Using Text Boxes</h4>
<p>
<img src="b004.gif" border=0></p>
<p>
The text box is the basic control that allows users to add or edit data stored in a non-memo field in a table.</p>
<p class=label>
<b>To see examples of using text boxes</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>Text boxes.</b></li>
</ol>
<p class=label>
<b>To programmatically reference or change the text displayed in the text box</b>
<ul type=disc>
<li>
Set or reference the <a href="lngvalue_property.htm">Value</a> property.</li>
</ul>
<p>
If you set a <a href="lngcontrolsource_property.htm">ControlSource</a> for the text box, the value displayed in the text box is stored in the Value property of the text box and in the variable or field specified in the ControlSource property.</p>
<h4>Validating the Data in a Text Box</h4>
<p>
To check or verify the value in the text box, include code in the <a href="glsmethod.htm">method</a> associated with the <a href="lngvalid_event.htm">Valid event</a>. If the value is invalid, return false (.F.) or 0. If the Valid returns false (.F.) an “Invalid input” message is displayed. If you want to display your own message, include the WAIT WINDOW command or the <a href="lngmessageboxlp_rp.htm">MESSAGEBOX(&nbsp;)</a> function in the Valid code and return 0.</p>
<p>
For example, if you have a text box that allows a user to type an appointment date, you could check to make sure that the date is not already past by including the following code in the Valid event of the text box:</p>
<pre><code>IF CTOD(THIS.Value) &lt; DATE(&nbsp;)
 &nbsp; = MESSAGEBOX("You need to enter a future date",1)
 &nbsp; RETURN 0
ENDIF
</code></pre>
<h4>Selecting Text When the Text Box Gets the Focus</h4>
<p>
To select all text when the user enters the text box with the keyboard, set the <a href="lngselectonentry_property.htm">SelectOnEntry</a> property to true (.T.).</p>
<h4>Formatting the Text in a Text Box</h4>
<p>
You can use the <a href="lnginputmask_property.htm">InputMask</a> property to determine the values that can be typed in the text box and the <a href="lngformat_property.htm">Format</a> property to determine the way values are displayed in the text box.</p>
<p>
<b>Using the InputMask Property</b></p>
<p>
The InputMask property determines the characteristics of each character typed into the text box. For example, you could set the InputMask property to 999,999.99 to limit user input to numeric values less than 1,000,000 with two decimal places. The comma and the period would be displayed in the text box before the user entered any values. If the user pressed a character key, the character would not be displayed in the text box.</p>
<p>
If you have a logical field and want a user to be able to type “Y” or “N” but not “T” or “F”, set the InputMask property to “Y”.</p>
<h4>Accepting User Passwords in a Text Box</h4>
<p>
Often in an application, you want to obtain secure information from a user, such as a password. You can use a <a href="glstext_box_.htm">text box</a> to get this information without making the information visible on the screen.</p>
<p class=label>
<b>To accept user input without displaying the actual value</b>
<ul type=disc>
<li>
Set the <a href="lngpasswordchar_property.htm">PasswordChar</a> property of the text box to * or some other generic character.</li>
</ul>
<p>
If you set the PasswordChar property to anything other than an empty string, the <a href="lngvalue_property.htm">Value</a> and <a href="lngtext_property.htm">Text</a> properties of the text box contain the actual value that the user typed in the text box, but the text box displays a generic character for every key the user pressed.</p>
<h4>Entering Dates in a Text Box</h4>
<p>
Text boxes have several properties that you can set to make it easy for your users to enter date values.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=27%><b>Property</b></td>
<td class=label width=73%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=27%><a href="lngcentury_property.htm">Century</a></td>
<td width=73%>Whether the first two digits of the year are displayed or not.</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngdateformat_property.htm">DateFormat</a></td>
<td width=73%>Format the date in the text box to one of fifteen predetermined formats, such as American, German, Japanese.</td>
</tr>
<tr valign=top>
<td width=27%><a href="lngstrictdateentry_property.htm">StrictDateEntry</a></td>
<td width=73%>Setting StrictDateEntry to 0 - Loose allows a user to enter dates in more flexible formats than the default 99/99/99.</td>
</tr>
</table><br>
<h4>Common Text Box Properties</h4>
<p>
The following text box properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Property</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="lngalignment_property.htm">Alignment</a></td>
<td width=72%>Whether the contents of the text box are left justified, right justified, centered, or automatic. Automatic alignment depends on the data type. Numbers, for example, are right justified and characters are left justified.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngcontrolsource_property.htm">ControlSource</a></td>
<td width=72%>The table field or variable whose value is displayed in the text box.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lnginputmask_property.htm">InputMask</a></td>
<td width=72%>Specifies the data entry rule each character entered must follow. For specific information about InputMask, see Help.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngselectonentry_property.htm">SelectOnEntry</a></td>
<td width=72%>Whether the contents of the text box are automatically selected when the text box receives the focus.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngtabstop_property.htm">TabStop</a></td>
<td width=72%>Whether the user can tab to the control. If TabStop is set to .F., a user can still select the text box by clicking it.</td>
</tr>
</table><br>
<h4>Using Edit Boxes</h4>
<p>
<img src="b005.gif" border=0></p>
<p>
You can allow users to edit text fro_m long character fields or memo fields in <a href="glsedit_box_.htm">edit boxes.</a> Edit boxes allow automatic word-wrapping and the ability to move through the text using the arrow keys, page up and page down keys, and scrollbars.</p>
<p class=label>
<b>To see examples of using edit boxes</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>Edit boxes.</b></li>
</ol>
<h4>Allowing Users to Edit a Memo Field in an Edit Box</h4>
<p>
All you have to do to allow a user to edit a memo field in an edit box is set the <a href="lngcontrolsource_property.htm">ControlSource</a> property of the edit box to the memo field. For example, if you have a memo field named <code>comments</code> in a table named <code>log</code>, you can set the ControlSource property of an edit box to <code>log.comments</code> to enable a user to edit the memo field in the edit box.</p>
<h4>Allowing Users to Edit a Text File in an Edit Box</h4>
<p>
You can also allow a user to edit a text file in an edit box. The following form demonstrates this.</p>
<p class=label>
<b>Example form for editing a text file in an edit box</b></p>
<p>
<img src="afd10009.gif" border=0></p>
<p>
An OK button on the form closes the form with the following command in the Click event code:</p>
<pre><code>RELEASE THISFORM
</code></pre>
<p>
The other two buttons in this example, <code>cmdOpenFile</code> and <code>cmdSave</code>, allow a user to open a text file and save the file after edits.</p>
<p class=label>
<b>Code Associated with the Click Event of cmdOpenFile</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Code</b></td>
<td class=label width=50%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=50%><pre><code>CREATE CURSOR textfile ;
  (filename c(35), mem m)</code><pre><code>APPEND BLANK</code></pre>
</pre>
</td>
<td width=50%>Create a <a href="glscursor.htm">cursor</a> with a character field to hold the name of the text file and a memo field to hold the contents of the text file. <br>
<br>
Add a blank record to the cursor.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>REPLACE textfile.FileName WITH ;
  GETFILE("TXT")</code></pre>
</td>
<td width=50%>Use the <a href="lnggetfilelp_rp.htm">GETFILE(&nbsp;)</a> function to return the name of the file to open. Store the name in the FileName field of the cursor.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>IF EMPTY(textfile.FileName)</code><pre><code>&nbsp;&nbsp;&nbsp;RETURN
ENDIF</code></pre>
</pre>
</td>
<td width=50%>If the user chooses Cancel in the Get File dialog box, the FileName field will be empty and there will be no file to open.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>APPEND MEMO mem FROM ;</code><pre><code>&nbsp;&nbsp;(textfile.FileName) OVERWRITE</code></pre>
</pre>
</td>
<td width=50%>Fill the memo field with the text in the file.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>THISFORM.edtText.ControlSource = ;</code><pre><code>&nbsp;&nbsp;"textfile.mem"
THISFORM.Refresh</code></pre>
</pre>
</td>
<td width=50%>Set the <a href="lngcontrolsource_property.htm">ControlSource</a> of the edit box on the form.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>THISFORM.cmdSave.Enabled = .T.</code></pre>
</td>
<td width=50%>Enable the Save button.</td>
</tr>
</table><br>
<p>
Once the file has been opened and edited, the Save button allows a user to write changes back out to the file.</p>
<p class=label>
<b>Code Associated with the <a href="lngclick_event.htm">Click Event</a> of cmdSave</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Code</b></td>
<td class=label width=50%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=50%><pre><code>COPY MEMO textfile.mem TO ;</code><pre><code>&nbsp;&nbsp;(textfile.filename)</code></pre>
</pre>
</td>
<td width=50%>Overwrites the old value in the file with the text in the memo field.</td>
</tr>
</table><br>
<h4>Manipulating Selected Text in an Edit Box</h4>
<p>
Edit boxes and text boxes have three properties that allow you to work with selected text: SelLength, SelStart, and SelText.</p>
<p>
You can select text programmatically using the <a href="lngselstart_property.htm">SelStart</a> and <a href="lngsellength_property.htm">SelLength</a> properties. For example, the following lines of code select the first word in an edit box.</p>
<pre><code>Form1.edtText.SelStart = 0 
Form1.edtText.SelLength = AT(" ", Form1.edtText.Text) - 1
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;When you change the SelStart property, the edit box scrolls to display the new SelStart. If you change the SelStart in a loop, for example when searching for text, your code will execute faster if you include <code>THISFORM.LockScreen = .T.</code> before processing and <code>THISFORM.LockScreen = .F.</code> after processing.</p>
<p>
You can access selected text in an edit box or text box with the <a href="lngseltext_property.htm">SelText</a> property. For example, the following line of code makes the selected text all uppercase:</p>
<pre><code>Form1.edtText.SelText = UPPER(Form1.edtText.SelText)
</code></pre>
<h4>Common Edit Box Properties</h4>
<p>
The following edit box properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngallowtabs_property.htm">AllowTabs</a></td>
<td width=75%>Whether the user can insert tabs in the edit box instead of&nbsp; moving to the next control. If you allow tabs, be sure to indicate that users can move to the next control by pressing CTRL+TAB.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lnghideselection_property.htm">HideSelection</a></td>
<td width=75%>Whether selected text in the edit box is visibly selected when the edit box doesn’t have the focus.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngreadonly_property.htm">ReadOnly</a></td>
<td width=75%>Whether the user can change the text in the edit box.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngscrollbars_property.htm">ScrollBars</a></td>
<td width=75%>Whether there are vertical scrollbars.</td>
</tr>
</table><br>
<h4>Using Combo Boxes</h4>
<p>
<img src="b010.gif" border=0></p>
<p>
The combo box control has the functionality of a list box and a text box. There are two styles for a <a href="glscombo_box_.htm">combo box</a>: Drop-down combo and Drop-down list. Specify which one you want by changing the <a href="lngstyle_property.htm">Style</a> property of the control. Drop-down lists are discussed in “<a href="#dgusing_list_boxes_and_drop_down_list_boxes">Using List Boxes and Drop-Down List Boxes</a>” earlier in this chapter.</p>
<h4>Drop-Down Combo</h4>
<p>
A user can click the button on a drop-down combo box to see a list of choices or enter a new item directly in the box beside the button. The default Style property of a combo box is 0 — Dropdown Combo.</p>
<h4>Adding User Items to Drop-Down Combo Lists</h4>
<p>
To add the new user value to the drop-down combo box, you can use the following line of code in the <a href="glsmethod.htm">method</a> associated with the <a href="lngvalid_event.htm">Valid event</a> of the combo box:</p>
<pre><code>THIS.AddItem(THIS.Text)
</code></pre>
<p>
Before adding an item, however, it would be a good idea to check to make sure that the value isn’t already in the combo box drop-down:</p>
<pre><code>lItemExists = .F. &amp;&amp; assume the value isn’t in the list.
FOR i = 1 to THIS.ListCount
 &nbsp; IF THIS.List(i) = THIS.Text
 &nbsp;&nbsp;&nbsp;&nbsp; lItemExists = .T.
 &nbsp;&nbsp;&nbsp;&nbsp; EXIT
 &nbsp; ENDIF
ENDFOR

IF !lItemExists
 &nbsp; THIS.AddItem(THIS.Text)
ENDIF
</code></pre>
<h4>Common Combo Box Properties</h4>
<p>
The following combo box properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Property</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="lngcontrolsource_property.htm">ControlSource</a></td>
<td width=72%>Specifies the table field where the value that the user chooses or enters is stored.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngdisplaycount_property.htm">DisplayCount</a></td>
<td width=72%>Specifies the maximum number of items displayed in the list.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lnginputmask_property.htm">InputMask</a></td>
<td width=72%>For drop-down combo boxes, specifies the type of values that can be typed in.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngincrementalsearch_property.htm">IncrementalSearch</a></td>
<td width=72%>Specifies whether the control tries to match an item in the list as the user types each letter.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngrowsource_property.htm">RowSource</a></td>
<td width=72%>Specifies the source of the items in the combo box.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngrowsourcetype_property.htm">RowSourceType</a></td>
<td width=72%>Specifies the type of the source for the combo box. The RowSourceType values for a combo box are the same as for a List. For an explanation of each, see Help or the discussion on list boxes earlier in this chapter.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngstyle_property.htm">Style</a></td>
<td width=72%>Specifies whether the combo box is a drop-down combo or a drop-down list.</td>
</tr>
</table><br>
<h3>Accepting Numeric Input in a Given Range</h3>
<p>
Although you can set the <a href="lnginputmask_property.htm">InputMask property</a> and include code in the <a href="lngvalid_event.htm">Valid event</a> to make sure that numeric values entered into text boxes fall within a given range, the easiest way to check the range of values is to use a <a href="glsspinner_.htm">spinner</a>.</p>
<h4>Using Spinners</h4>
<p>
<img src="b012.gif" border=0></p>
<p>
You can use spinners to allow users to make choices by “spinning” through values or directly typing the values in the spinner box.</p>
<h4>Setting the Range of Values that Users Can Choose </h4>
<p>
Set the <a href="lngkeyboardhighvalue_keyboardlowvalue_properties.htm">KeyboardHighValue</a> and the <a href="lngspinnerhighvalue_spinnerlowvalue_properties.htm">SpinnerHighValue</a> properties to the highest number you want users to be able to enter in the spinner.</p>
<p>
Set the <a href="lngkeyboardhighvalue_keyboardlowvalue_properties.htm">KeyboardLowValue</a> and the <a href="lngspinnerhighvalue_spinnerlowvalue_properties.htm">SpinnerLowValue</a> properties to the lowest number you want users to be able to enter in the spinner.</p>
<h4>Decrementing a Spinner When the User Clicks the Up Button</h4>
<p>
Sometimes, if your spinner reflects a value like “priority,” you want the user to be able to increase the priority from 2 to 1 by clicking the Up button. To cause the spinner number to decrement when the user clicks the Up button, set the <a href="lngincrement_property.htm">Increment property</a> to -1.</p>
<h4>Spinning Through Non-Numeric Values</h4>
<p>
While the value of a spinner is numeric, you can use the Spinner control and a text box to allow users to spin through multiple types of data. For instance, if you want a user to be able to spin through a range of dates, you could size the spinner so that only the buttons are visible and position a text box beside the spinner buttons. Set the <a href="lngvalue_property.htm">Value property</a> of the text box to a date and in the <a href="lngupclick_event.htm">UpClick</a> and <a href="lngdownclick_event.htm">DownClick</a> events of the spinner, increment or decrement the date.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can use the Windows API function GetSystemMetrics to set the width of your spinner so that only the buttons are visible and the buttons are the best width for the up and down arrow bitmap display.
<ol>
<li>
Set the spinner’s <a href="lngborderstyle_property.htm">BorderStyle property</a> to 0.<br><br></li>
<li>
Include the following code in the Init of the spinner:</li>
</ol>
<pre><code>DECLARE INTEGER GetSystemMetrics IN Win32api INTEGER
THIS.Width = GetSystemMetrics(2) &amp;&amp; SM_CXVSCROLL
</code></pre>
<h4>Common Spinner Properties</h4>
<p>
The following spinner properties are commonly set at <a href="glsdesign_time.htm">design time.</a></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Property</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%><a href="lnginterval_property.htm">Interval</a></td>
<td width=71%>How much to increment or decrement the value each time the user clicks the Up or Down buttons.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngkeyboardhighvalue_keyboardlowvalue_properties.htm">KeyboardHighValue</a></td>
<td width=71%>The highest value that can be entered into the spinner text box.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngkeyboardhighvalue_keyboardlowvalue_properties.htm">KeyboardLowValue</a> </td>
<td width=71%>The lowest value that can be entered into the spinner text box.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngspinnerhighvalue_spinnerlowvalue_properties.htm">SpinnerHighValue</a> </td>
<td width=71%>The highest value that the spinner will display when the user clicks the Up button.</td>
</tr>
<tr valign=top>
<td width=29%><a href="lngspinnerhighvalue_spinnerlowvalue_properties.htm">SpinnerLowValue</a> </td>
<td width=71%>The lowest value that the spinner will display when the user clicks the Down button.</td>
</tr>
</table><br>
<h3>Allowing Specific Actions</h3>
<p>
Frequently, you want to enable users to take specific actions that have nothing to do with manipulating values. For example, you can allow a user to close a form, open another form, move through a table, save or cancel edits, run a report or query, jump to an address of a destination on the Internet or an intranet, or any number of other actions.</p>
<h4>Using Command Buttons and Command Button Groups</h4>
<p>
<img src="b006007.gif" border=0></p>
<p>
One of the most common places to put the code for specific actions is the <a href="lngclick_event.htm">Click event</a> of a command button.</p>
<h4>Making a Command Button the Default Choice</h4>
<p>
Set the <a href="lngdefault_property.htm">Default property</a> to true (.T.) to make the command button the default choice. The default choice has a thicker border than other command buttons. If a command button is the default choice, when the user presses ENTER, the Click event of the command button executes.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the selected object on a form is an <a href="glsedit_box_.htm">edit box</a> or a <a href="glsgrid_.htm">grid</a>, the code associated with the Click event of the default choice is not executed when the user presses ENTER. Pressing ENTER in an edit box adds a carriage return and line feed to the value in the edit box. Pressing ENTER in a grid selects an adjacent field. To execute the Click event of the default button, press CTRL+ENTER.</p>
<h4>Common Command Button Properties</h4>
<p>
The following command button properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcancel_property.htm">Cancel</a></td>
<td width=75%>Specifies that the code associated with the Click event of the command button executes when a user presses ESC.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcaption_property.htm">Caption</a></td>
<td width=75%>Text displayed on the button.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngdisabledpicture_property.htm">DisabledPicture</a></td>
<td width=75%>The .bmp file displayed when the button is disabled.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngdownpicture_property.htm">DownPicture</a></td>
<td width=75%>The .bmp file displayed when the button is pressed.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngenabled_property.htm">Enabled</a></td>
<td width=75%>Whether the button can be chosen.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngpicture_property.htm">Picture</a></td>
<td width=75%>The .bmp file displayed on the button.</td>
</tr>
</table><br>
<p>
You can also include command buttons in a group so that you can manipulate them individually or as a group.</p>
<h4>Managing Command Button Choices at the Group Level</h4>
<p>
If you want to work with a single method procedure for all the code for the <a href="lngclick_event.htm">Click events</a> of command buttons in a group, you can attach the code to the Click event of the <a href="ctlcommandgroup_control.htm">command button group</a>. The <a href="lngvalue_property.htm">Value property</a> of the command button group indicates which of the buttons was clicked, as demonstrated in the following code example:</p>
<pre><code>DO CASE
 &nbsp; CASE THIS.Value = 1
 &nbsp;&nbsp;&nbsp;&nbsp; WAIT WINDOW "You clicked " + THIS.cmdCommand1.Caption NOWAIT
 &nbsp;&nbsp;&nbsp;&nbsp; * do some action
 &nbsp; CASE THIS.Value = 2
 &nbsp;&nbsp;&nbsp;&nbsp; WAIT WINDOW "You clicked " + THIS.cmdCommand2.Caption NOWAIT
 &nbsp;&nbsp;&nbsp;&nbsp; * do some other action
 &nbsp; CASE THIS.Value = 3
 &nbsp;&nbsp;&nbsp;&nbsp; WAIT WINDOW "You clicked " + THIS.cmdCommand3.Caption NOWAIT
 &nbsp;&nbsp;&nbsp;&nbsp; * do a third action
ENDCASE
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If the user clicks in the command button group but not on a particular button, the Value property still reflects the last command button that was selected.</p>
<p class=indent>
If you have written code for the Click event of a particular button in the group, that code is executed rather than the group Click event code when the user chooses that button.</p>
<h4>Common Command Button Group Properties</h4>
<p>
The following command button group properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngbuttoncount_property.htm">ButtonCount</a></td>
<td width=75%>Number of command buttons in the group.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngbackstyle_property.htm">BackStyle</a></td>
<td width=75%>Whether the command button group has a transparent or opaque background. A transparent background appears to be the same color that the underlying object, usually the form or a page, is.</td>
</tr>
</table><br>
<h4>Using the Hyperlink Object</h4>
<p>
You can use the Hyperlink object to jump to an address of a destination on the Internet or an intranet. The Hyperlink object can be used to start a hyperlink aware application, typically an Internet browser such as the Microsoft Internet Explorer, and open the page specified in the address. The Hyperlink NavigateTo(&nbsp;) method allows you to specify the address of the destination that you jump to.</p>
<p>
For example, to navigate to the Microsoft Internet site on the World Wide Web from a form, first add the Hyperlink control to the form. Add a command button to the form, and then add the following code to the Click event for the command button:</p>
<pre><code>THISFORM.Hyperlink1.NavigateTo(‘www.microsoft.com’)
</code></pre>
<p>
When the form is run, you can click the command button to jump to the Microsoft Web site.</p>
<h3>Performing Specific Actions at Given Intervals</h3>
<p>
The Timer control allows you to perform actions or check values at specific intervals.</p>
<h4>Using the Timer Control</h4>
<p>
<img src="b015.gif" border=0></p>
<p>
Timer controls respond to the passage of time independent of user interaction, so you can program them to take actions at regular intervals. A typical use is checking the system clock to see if it is time to do a particular task. Timers are also useful for other kinds of background processing.</p>
<p class=label>
<b>To see examples of using timers</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>Timer.</b></li>
</ol>
<p>
Each timer has an <a href="lnginterval_property.htm">Interval property</a>, which specifies the number of milliseconds that pass between one timer event and the next. Unless disabled, a timer continues to receive an <a href="glsevent.htm">event</a> (appropriately named the Timer event) at roughly equal intervals of time. The Interval property has a few limitations to consider when you’re programming a timer:</p>
<ul type=disc>
<li>
The interval can be between 0 and 2,147,483,647, inclusive, which means that the longest interval is about 596.5 hours (over 24 days).</li>
<li>
The interval is not guaranteed to elapse exactly on time. To ensure accuracy, the timer should check the system clock when it needs to, rather than try to keep track of accumulated time internally.</li>
<li>
The system generates 18 clock ticks per second, so even though the Interval property is measured in milliseconds, the true precision of an interval is no more than one-eighteenth of a second.</li>
<li>
If your application or another application is making heavy demands on the system — such as long loops, intensive calculations, or disk, network, or port access — your application may not get timer events as often as the Interval property specifies.</li>
</ul>
<h4>Placing a Timer Control on a Form</h4>
<p>
Placing a Timer control on a <a href="glsform.htm">form</a> is like drawing any other control: you choose the timer tool on the <a href="tlsform_controls_toolbar.htm">Controls toolbar</a> and click and drag on the form.</p>
<p class=label>
<b>A Timer control</b></p>
<p>
<img src="afd10010.gif" border=0></p>
<p>
The timer appears on the form at <a href="glsdesign_time.htm">design time</a> so you can select it, view its properties, and write an event procedure for it. At <a href="glsrun_time.htm">run time</a>, a timer is invisible and its position and size are irrelevant.</p>
<h4>Initializing a Timer Control</h4>
<p>
A Timer control has two key properties.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngenabled_property.htm">Enabled</a></td>
<td width=75%>If you want the timer to start working as soon as the form loads, set to true (.T.). Otherwise, leave this property set to false (.F.). You may choose to have an outside event (such as a click of a command button) start operation of the timer.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lnginterval_property.htm">Interval</a></td>
<td width=75%>Number of milliseconds between timer events.</td>
</tr>
</table><br>
<p>
Note that the Enabled property for the timer is different than for other objects. With most objects, the Enabled property determines whether the object can respond to an event caused by the user. With the Timer control, setting Enabled to false (.F.) suspends timer operation.</p>
<p>
Remember that the Timer event is periodic. The Interval property doesn’t determine “how long” as much as it determines “how often.” The length of the interval should depend on how much precision you want. Because there is some built-in potential for error, make the interval one-half the desired amount of precision.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The more often a timer event is generated, the more processor time is consumed in responding to the event. This can slow down overall performance. Don’t set a particularly small interval unless you need it.</p>
<h4>Responding to the Timer Event</h4>
<p>
When a Timer control’s interval elapses, Visual FoxPro generates the <a href="lngtimer_event.htm">Timer event</a>. Typically, you respond to this event by checking some general condition, such as the system clock.</p>
<p>
A digital clock is a very simple but highly useful application involving a Timer control. Once you understand how the application works, you can enhance it to work as an alarm clock, stopwatch, or other timing device.</p>
<p>
The digital clock application includes a timer and a label with a border. At <a href="glsdesign_time.htm">design time</a>, the application looks like this:</p>
<p class=label>
<b>The digital clock application</b></p>
<p>
<img src="afd10011.gif" border=0></p>
<p>
At <a href="glsrun_time.htm">run time</a>, the timer is invisible.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Control</b></td>
<td class=label width=30%><b>Property</b></td>
<td class=label width=49%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=21%>lblTime</td>
<td width=30%><a href="lngcaption_property.htm">Caption</a></td>
<td width=49%></td>
</tr>
<tr valign=top>
<td width=21%>Timer1</td>
<td width=30%><a href="lnginterval_property.htm">Interval</a></td>
<td width=49%>500 (half a second)</td>
</tr>
<tr valign=top>
<td width=21%>Timer1</td>
<td width=30%><a href="lngenabled_property.htm">Enabled</a></td>
<td width=49%>True</td>
</tr>
</table><br>
<p>
The sole procedure in the application is the Timer event procedure:</p>
<pre><code>IF THISFORM.lblTime.Caption != Time()
 &nbsp; THISFORM.lblTime.Caption = Time()
ENDIF
</code></pre>
<p>
The Interval property for the timer is set to 500, following the rule of setting the Interval to half of the shortest period you want to distinguish (one second in this case). This may cause the timer code to update the label with the same time twice in one second. This could cause some visible flicker, so the code tests to see if the time is different from what is displayed in the label before it changes the caption.</p>
<h3>Displaying Information</h3>
<p>
One of the principles of good design is to make relevant information visible. You can use the following controls to display information to your users:</p>
<ul type=disc>
<li>
Images</li>
<li>
Labels</li>
<li>
Text Boxes</li>
<li>
Edit Boxes</li>
<li>
Shapes</li>
</ul>
<h4>Using Images</h4>
<p>
<img src="b014.gif" border=0></p>
<p>
The Image control allows you to add pictures (.bmp files) to your form. An Image control has the full range of <a href="glsproperty.htm">properties</a>, <a href="glsevent.htm">events</a>, and <a href="glsmethod.htm">methods</a> that other controls have, so an Image control can be changed dynamically at <a href="glsrun_time.htm">run time</a>, Users can interact with images by clicking, double-clicking, and so on.</p>
<p>
The following table lists some of the key properties of an Image control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngpicture_property.htm">Picture</a></td>
<td width=75%>The picture (.bmp file) to display.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngborderstyle_property.htm">BorderStyle</a></td>
<td width=75%>Whether there is a visible border for the image.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngstretch_property.htm">Stretch</a></td>
<td width=75%>If Stretch is set to 0 – Clip, portions of the picture that extend beyond the dimensions of the Image control are not displayed. If Stretch is set to 1 - Isometric, the Image control preserves the original dimensions of the picture and displays as much of the picture as the dimensions of the Image control will allow. If Stretch is set to 2 - Stretch, the picture is adjusted to exactly match the height and width of the Image control.</td>
</tr>
</table><br>
<h4>Using Labels</h4>
<p>
<img src="b003.gif" border=0></p>
<p>
Labels differ from text boxes in that they:</p>
<ul type=disc>
<li>
Cannot have a data source.</li>
<li>
Cannot be directly edited.</li>
<li>
Cannot be tabbed to.</li>
</ul>
<p>
You can programmatically change the <a href="lngcaption_property.htm">Caption</a> and <a href="lngvisible_property.htm">Visible</a> properties of labels to tailor the label display to the situation at hand.</p>
<h4>Common Label Properties</h4>
<p>
The following label properties are commonly set at <a href="glsdesign_time.htm">design time</a>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcaption_property.htm">Caption</a></td>
<td width=75%>The text displayed by the label.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngautosize_property.htm">AutoSize</a></td>
<td width=75%>Whether the size of the label is adjusted to the length of the Caption.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngbackstyle_property.htm">BackStyle</a></td>
<td width=75%>Whether the label is Opaque or Transparent.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngwordwrap_property.htm">WordWrap</a></td>
<td width=75%>Whether the text displayed on the label can wrap to additional lines.</td>
</tr>
</table><br>
<h4>Using Text and Edit Boxes to Display Information</h4>
<p>
Set the <a href="lngreadonly_property.htm">ReadOnly property</a> of text and edit boxes to display information that the user can view but not edit. If you only disable an edit box, the user won’t be able to scroll through the text.</p>
<h4>Using Shapes and Lines</h4>
<p>
<a href="glsshape_.htm">Shapes</a> and <a href="glsline_.htm">lines</a> help you visually group elements of your form together. Research has shown that associating related items helps users to learn and understand an interface, which makes it easier for them to use your application.</p>
<p>
The following Shape properties are commonly set at <a href="glsdesign_time.htm">design time</a>.</p>
<p>
<img src="b019.gif" border=0></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcurvature_property.htm">Curvature</a></td>
<td width=75%>A value between 0 (90 degree angles) and 99 (circle or oval).</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngfillstyle_property.htm">FillStyle</a></td>
<td width=75%>Whether the shape is transparent or has a specified background fill pattern.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngspecialeffect_property.htm">SpecialEffect</a></td>
<td width=75%>Whether the shape is plain or 3D. This only has an effect when the Curvature property is set to 0.</td>
</tr>
</table><br>
<p>
The following Line properties are commonly set at <a href="glsdesign_time.htm">design time</a>.</p>
<p>
<img src="b018.gif" border=0></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngborderwidth_property.htm">BorderWidth</a></td>
<td width=75%>How many pixels wide the line is.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lnglineslant_property.htm">LineSlant</a></td>
<td width=75%>When the line is not horizontal or vertical, the direction of the slant. Valid values for this property are a slash (&nbsp;/&nbsp;) and a backslash (&nbsp;\&nbsp;).</td>
</tr>
</table><br>
<h4>Using Form Graphics to Display Information</h4>
<p>
You can graphically display information on a form by using the following form methods.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Method</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcircle_method.htm">Circle</a></td>
<td width=75%>Draws a circular figure or arc on a form.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcls_method.htm">Cls</a></td>
<td width=75%>Clears graphics and text from a form.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngline_method.htm">Line</a></td>
<td width=75%>Draws a line on a form.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngpset_method.htm">Pset</a></td>
<td width=75%>Sets a point on a form to a specific color.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngprint_method.htm">Print</a></td>
<td width=75%>Prints a character string on a form.</td>
</tr>
</table><br>
<p class=label>
<b>To see examples that demonstrate form graphics</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Forms</b>, then click <b>Form graphics</b>.</li>
</ol>
<h3>Enhancing Control Display</h3>
<p>
<a href="ctlcommandbutton_control.htm">Command buttons</a>, <a href="ctlcheckbox_control.htm">check boxes</a>, and <a href="ctloptionbutton_control.htm">option buttons</a> can display pictures in addition to captions. These controls all have properties that allow you to specify pictures to be displayed on the controls.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Property</b></td>
<td class=label width=72%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=28%><a href="lngdisabledpicture_property.htm">DisabledPicture</a></td>
<td width=72%>Picture displayed on the button when the button is disabled.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngdownpicture_property.htm">DownPicture</a></td>
<td width=72%>Picture displayed on the button when the button is pressed.</td>
</tr>
<tr valign=top>
<td width=28%><a href="lngpicture_property.htm">Picture</a></td>
<td width=72%>Picture displayed on the button when the button is enabled and not pressed.</td>
</tr>
</table><br>
<p>
If you don’t specify a DisabledPicture value, Visual FoxPro displays the Picture grayed when the control is disabled. If you don’t specify a DownPicture value, Visual FoxPro displays the Picture with the background colors changed so that the button appears pressed when the button is pressed.</p>
<p>
If you don’t want a caption displayed in addition to the picture, set the <a href="lngcaption_property.htm">Caption</a> property to an empty string by deleting the default caption in the Property Editing box of the <a href="wndproperties_window.htm">Properties window</a>.</p>
<h4>Using Picture Masks</h4>
<p>
Often, a .bmp picture contains white space you don’t want to appear on your controls. A white border around an irregularly shaped image could make your control look bad. To avoid this problem, Visual FoxPro creates a temporary default mask for your picture. White areas are given a transparent attribute so that the underlying color of the button or background shows through. To keep certain white areas of your .bmp white, create a mask for it that will override the default.</p>
<p class=label>
<b>To create a mask for a .bmp</b>
<ol>
<li>
Open the .bmp file in Paint or another bitmap utility.<br><br></li>
<li>
Blacken all areas of the picture that you want to be displayed exactly as they are in the .bmp file. Leave the areas you want to be transparent as white.<br><br></li>
<li>
Save the file in the same directory and with the same name as the .bmp file but with an .msk extension.</li>
</ol>
<p>
When Visual FoxPro loads a .bmp file specified by the <a href="lngpicture_property.htm">Picture</a> property for a command button, option button, or check box, it looks in the same directory for a matching .msk file. If an .msk file with the same name as the .bmp is in the directory, Visual FoxPro uses it as a mask for the picture. All white areas in the .msk picture are made transparent in the .bmp. All black areas in the .msk picture are displayed exactly as they are in the .bmp.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The .bmp picture and the .msk picture must have the same dimensions for the mask to be able to represent the area of the .bmp.</p>
<h3>Manipulating Multiple Rows of Data</h3>
<p>
Visual FoxPro provides a very powerful tool — the grid object — for displaying and manipulating multiple rows of data.</p>
<h4>Using Grids</h4>
<p>
<img src="b013.gif" border=0></p>
<p>
The grid is a container object. Just as a form set can contain forms, a grid can contain columns. In addition, the columns contain headers and controls, each with their own sets of <a href="glsproperty.htm">properties</a>, <a href="glsevent.htm">events</a>, and <a href="glsmethod.htm">methods</a>, giving you a great deal of control over the elements of the grid.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Container</b></td>
<td class=label width=75%><b>Can contain</b></td>
</tr>
<tr valign=top>
<td width=25%>Grid</td>
<td width=75%>Columns</td>
</tr>
<tr valign=top>
<td width=25%>Column</td>
<td width=75%>Headers, controls</td>
</tr>
</table><br>
<p>
The Grid object allows you to present and manipulate rows and columns of data in a <a href="glsform.htm">form</a> or <a href="glspage.htm">page</a>. A particularly useful application of the Grid control is creating one-to-many forms, such as an invoice form.</p>
<p class=label>
<b>To see examples of using grids</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>Grid</b>.</li>
</ol>
<p class=label>
<b>A form with a populated grid</b></p>
<p>
<img src="afd10012.gif" border=0></p>
<p class=label>
<b>To add a Grid control to a form</b>
<ul type=disc>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar, choose the <b>Grid</b> button and drag to size in the <b>Form</b> window.</li>
</ul>
<p>
If you do not specify a <a href="lngrecordsource_property.htm">RecordSource</a> value for the grid and there is a table open in the current <a href="glswork_area.htm">work area</a>, the grid will display all the fields in that table.</p>
<h4>Setting the Number of Columns in a Grid</h4>
<p>
One of the first properties you might want to set for the Grid control is the number of columns.</p>
<p class=label>
<b>To set the number of columns in a grid</b>
<ol>
<li>
Select the ColumnCount property in the <b>Property and Methods</b> list.<br><br></li>
<li>
In the <b>Property</b> box, type the number of columns you want.</li>
</ol>
<p>
If the ColumnCount property is set to - 1 (the default), the grid will contain, at <a href="glsrun_time.htm">run time</a>, as many columns as there are fields in the table associated with the grid.</p>
<h4>Manually Adjusting Grid Display at Design Time</h4>
<p>
Once you have added columns to the grid, you can change the width of the columns and the height of the rows. You can manually set the height and width properties of the column and row objects in the Properties window or visually set these properties in grid design mode.</p>
<p class=label>
<b>To switch to grid design mode</b>
<ul type=disc>
<li>
Choose <b>Edit</b> from the grid’s shortcut menu.<p class=tl>
-or-</P></li>
<li>
In the <b>Object</b> box of the <a href="wndproperties_window.htm">Properties window</a>, select a column of the grid.</li>
</ul>
<p>
When you are in grid design mode, a thick border is displayed around the grid. To switch out of grid design mode, select the form or another control.</p>
<p class=label>
<b>To adjust the width of the columns in a grid</b>
<ol>
<li>
In grid design mode, position the mouse pointer between grid column headers so that the pointer changes to a bar with arrows pointing left and right.<br><br></li>
<li>
Select the column and drag until the column is the desired width<p class=tl>
-or-</P><p class=tl>
Set the column’s Width property in the <a href="wndproperties_window.htm">Properties window</a>.</P></li>
</ol>
<p class=label>
<b>To adjust the height of the rows in a grid</b>
<ol>
<li>
In grid design mode, position the mouse pointer between the first and second buttons on the left side of the <b>Grid</b> control so that the pointer changes to a bar with arrows pointing up and down.<br><br></li>
<li>
Select the row and drag until the row is the desired height.<p class=tl>
-or-</P><p class=tl>
Set the column’s Height property in the <a href="wndproperties_window.htm">Properties window</a>.</P></li>
</ol>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;You can prevent a user from changing the height of the grid rows at run time by setting <a href="lngallowrowsizingproperty.htm">AllowRowSizing</a> to false (.F.).</p>
<h4>Setting the Source of the Data Displayed in the Grid</h4>
<p>
You can set the data source for the grid and for each column individually.</p>
<p class=label>
<b>To set the data source for a grid</b>
<ol>
<li>
Select the grid, then click the RecordSourceType property in the <a href="wndproperties_window.htm">Properties window</a>.<br><br></li>
<li>
Set the RecordSourceType property to <b>0</b> - <b>Table</b>, if you want Visual FoxPro to open the table for you, or <b>1</b> - <b>Alias</b> if you want the grid to be populated with the fields in a table that is already open.<br><br></li>
<li>
Click the RecordSource property in the <b>Properties</b> window.<br><br></li>
<li>
Type the name of the <a href="glsalias.htm">alias</a> or <a href="glstable.htm">table</a> to serve as the <a href="glsdata_source.htm">data source</a> for the grid.</li>
</ol>
<p>
If you want to specify particular fields to be displayed in particular columns, you can also set the <a href="glsdata_source.htm">data source</a> for a column.</p>
<p class=label>
<b>To set the data source for a column</b>
<ol>
<li>
Select the column, then click the ControlSource property in the <a href="wndproperties_window.htm">Properties window</a>.<br><br></li>
<li>
Type the name of the <a href="glsalias.htm">alias</a> or <a href="glstable.htm">table</a> and the <a href="glsfield.htm">field</a> to serve as the source for the values displayed in the column. For example, you can type:<pre><code>Orders.order_id
</code></pre>
</li>
</ol>
<h4>Adding Records to a Grid</h4>
<p>
You can allow users to add new records to a table displayed in a grid by setting the <a href="lngallowaddnewproperty.htm">AllowAddNew property</a> of the grid to true (.T.). When the AllowAddNew property is set to true, new records are added to the table when the last record is selected and the user presses the DOWN ARROW key.</p>
<p>
If you want more control over when a user adds new records to a table, you can set the AllowAddNew property to false (.F.), the default, and use the <a href="lngappend.htm">APPEND BLANK</a> or <a href="lnginsert.htm">INSERT</a> commands to add new records.</p>
<h4>Setting Up a One-To-Many Form Using the Grid Control</h4>
<p>
One of the most common uses for a grid is to display the child records for a table while <a href="glstext_box_.htm">text boxes</a> display the data for the parent records. When the user moves through the records in the <a href="glsparent_table.htm">parent table</a>, the grid displays the appropriate child records.</p>
<p>
If you have a <a href="glsdata_environment.htm">data environment</a> for your form that includes a <a href="glsone_to_many_relationship.htm">one-to-many relationship</a> between two tables, displaying the one-to-many relationship in the form is very easy.</p>
<p class=label>
<b>To set up a one-to-many form with a data environment</b>
<ol>
<li>
Drag desired fields from the parent table in the <a href="wnddata_environment_designer.htm">Data Environment Designer</a> to your form.<br><br></li>
<li>
Drag the related table from the <b>Data Environment Designer</b> to the form.</li>
</ol>
<p>
In almost all cases, you’ll want to create a data environment for your form or form set. However, it’s not much more complicated to create a one-to-many form without using the Data Environment Designer.</p>
<p class=label>
<b>To set up a one-to-many form without creating a data environment</b>
<ol>
<li>
Add text boxes to your form to display the desired fields from the <a href="glsprimary_table.htm">primary table</a>.<br><br></li>
<li>
Set the <a href="lngcontrolsource_property.htm">ControlSource</a> property of the text boxes to the primary table.<br><br></li>
<li>
Add a grid to the form.<br><br></li>
<li>
Set the <a href="lngrecordsource_property.htm">RecordSource</a> property of the grid to the name of the related table.<br><br></li>
<li>
Set the <a href="lnglinkmaster_property.htm">LinkMaster</a> property of the grid to the name of the primary table.<br><br></li>
<li>
Set the <a href="lngchildorder_property.htm">ChildOrder</a> property of the grid to the name of the index tag in the related table that corresponds to the relational expression of the primary table.<br><br></li>
<li>
Set the <a href="lngrelationalexpr_property.htm">RelationalExpr</a> property of the grid to the expression that joins the <a href="glsrelated_table.htm">related table</a> to the primary table. For example, if the ChildOrder tag is indexed on <code>"lastname + firstname"</code>, set RelationalExpr to the same expression.</li>
</ol>
<p>
Either way you set up the one-to-many form, you can add navigation controls to move through the parent table and refresh the form objects. For example, the following code could be included in the <a href="lngclick_event.htm">Click event</a> of a command button:</p>
<pre><code>SELECT orders &amp;&amp; if orders is the parent table
SKIP
IF EOF(&nbsp;)
 &nbsp; GO BOTTOM
ENDIF
THISFORM.Refresh
</code></pre>
<h4>Displaying Controls in Grid Columns</h4>
<p>
In addition to displaying field data in a grid, you can have controls in the columns of a grid so that you can present a user with embedded <a href="glstext_box_.htm">text boxes</a>, <a href="glscheck_box_.htm">check boxes</a>, drop-down <a href="glslist_box_.htm">list boxes</a>, <a href="glsspinner_.htm">spinners</a>, and other controls. For example, if you have a logical field in a table, when you run the form, a user can tell which record values are true (.T.) and which record values are false (.F.) by seeing whether the check box is set. Changing the value is as easy as setting or clearing the check box.</p>
<p>
You can add controls to grid columns interactively in the <a href="wndform_designer.htm">Form Designer</a> or write code to add the controls to the columns at <a href="glsrun_time.htm">run time</a>.</p>
<p class=label>
<b>To interactively add controls to a grid column</b>
<ol>
<li>
Add a grid to a form.<br><br></li>
<li>
In the <a href="wndproperties_window.htm">Properties window</a>, set the ColumnCount property of the grid to the number of desired columns.<p class=tl>
For example, type <b>2</b> for a two-column grid.</P></li>
<li>
In the <b>Properties</b> window, select the parent column for the control from the Object box.<p class=tl>
For example, select Column1 to add a control to Column1. The border of the grid changes to indicate that you are editing a contained object when you select the column.</P></li>
<li>
Select the desired control on the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a> and click in the parent column.<p class=tl>
The new control will not be displayed in the grid column in the <b>Form Designer</b>, but it will be visible at run time.</P></li>
<li>
In the <b>Properties</b> window, make sure the control is displayed indented under the parent column in the <b>Object</b> box.<p class=label>
<b>A check box added to a grid column</b>
<p>
<img src="afd10013.gif" border=0></P><p class=tl>
If the new control is a check box, set the Caption property of the check box to "&nbsp;" and the Sparse property of the column to false (.F.).</P></li>
<li>
Set the ControlSource property of the parent column to the desired table field.<p class=tl>
For example, the ControlSource of the column in the following illustration is <code>products.discontinu</code> from Testdata.dbc in the Visual Studio …\Samples\Vfp98\Data directory.</P></li>
<li>
Set the CurrentControl property of the parent column to the new control.</li>
</ol>
<p>
When you run the form, the control is displayed in the grid column.</p>
<p class=label>
<b>The check box is displayed in the column at run time.</b></p>
<p>
<img src="afd10014.gif" border=0></p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you want to be able to center a check box in a grid column, create a <a href="glscontainer_classes.htm">container class</a>, add a check box to the container class, and adjust the position of the check box in the container class. Add the container class to the grid column and set the ControlSource of the check box to the desired field.</p>
<p class=label>
<b>To remove controls from grid columns in the Form Designer</b>
<ol>
<li>
In the <b>Object</b> box of the <a href="wndproperties_window.htm">Properties window</a>, select the control.<br><br></li>
<li>
Activate the <a href="wndform_designer.htm">Form Designer</a>.<p class=tl>
If the <b>Properties</b> window is visible, the control name is displayed in the <b>Object</b> box.</P></li>
<li>
Press the DELETE key.</li>
</ol>
<p>
You can also add controls to a grid column using the <a href="lngaddobject_method.htm">AddObject method</a> in code.</p>
<p class=label>
<b>To programmatically add controls to a grid column</b>
<ul type=disc>
<li>
In the <a href="lnginit_event.htm">Init event</a> of the grid, use the <a href="lngaddobject_method.htm">AddObject method</a> to add the control to the grid column and set the <a href="lngcurrentcontrol_property.htm">CurrentControl property</a> of the column.</li>
</ul>
<p>
For example, the following lines of code in the Init event of a grid add two controls to a grid column and specify one of them as the current control:</p>
<pre><code>THIS.grcColumn1.AddObject("spnQuantity", "SPINNER")
THIS.grcColumn1.AddObject("cboQuantity", "COMBOBOX")
THIS.grcColumn1.CurrentControl = "spnQuantity"
* The following lines of code make sure the control is visible
* and is diplayed in every row in the grid
THIS.grcColumn1.spnQuantity.Visible = .T.
THIS.grcColumn1.Sparse = .F.
</code></pre>
<p>
In this example, Column1 has three possible current control values:</p>
<ul type=disc>
<li>
<code>spnQuantity</code></li>
<li>
<code>cboQuantity</code></li>
<li>
<code>Text1</code> (the default control)</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Properties set on the Grid level are not passed on to the columns or headers. In the same way, you must set properties of the headers and contained controls directly; they do not inherit their properties from settings at the Column level.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;For the best display of combo boxes in grid columns, set the following combo box properties:</p>
<pre><code>BackStyle = 0        &amp;&amp; Transparent
Margin = 0
SpecialEffect = 1 &amp;&amp; Plain
BorderStyle = 0        &amp;&amp; None
</code></pre>
<h4>Using Conditional Formatting in Grids</h4>
<p>
Special formatting in a grid can make it easier for a user to scan through the records in the grid and locate certain information. To provide conditional formatting, use the dynamic font and color properties of a column.</p>
<p>
For example, you can add a grid to a form and set the <a href="lngcolumncount_property.htm">ColumnCount</a> property to 2. Set the <a href="lngcontrolsource_property.htm">ControlSource</a> property of the first column to <code>orders.to_name</code> and the ControlSource property of the second column to <code>orders.order_net</code>. To display order totals less than 500.00 with a forecolor of black and order totals greater than or equal to 500.00 with a foreground color of red, include the following line in the grid’s Init event code:</p>
<pre><code>THIS.Column2.DynamicForeColor = ;
 &nbsp; "IIF(orders.order_net &gt;= 500, RGB(255,0,0), RGB(0,0,0))"
</code></pre>
<h4>Common Grid Properties</h4>
<p>
The following grid properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngchildorder_property.htm">ChildOrder</a></td>
<td width=75%>The <a href="glsforeign_key.htm">foreign key</a> of the <a href="glschild_table.htm">child table</a> that is joined with the <a href="glsprimary_key.htm">primary key</a> of the <a href="glsparent_table.htm">parent table.</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcolumncount_property.htm">ColumnCount</a></td>
<td width=75%>Number of columns. If ColumnCount is set to - 1, the grid has as many columns as there are fields in the grid’s RecordSource.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lnglinkmaster_property.htm">LinkMaster</a></td>
<td width=75%>The parent table for child records displayed in the grid.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngrecordsource_property.htm">RecordSource</a></td>
<td width=75%>The data to be displayed in the grid.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngrecordsourcetype_property.htm">RecordSourceType</a></td>
<td width=75%>Where the data displayed in the grid comes from:<br>
a <a href="glstable.htm">table,</a> an <a href="glsalias.htm">alias,</a> a <a href="glsquery.htm">query,</a> or a table selected by the user in response to a prompt.</td>
</tr>
</table><br>
<h4>Common Column Properties</h4>
<p>
The following column properties are commonly set at <a href="glsdesign_time.htm">design time.</a></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcontrolsource_property.htm">ControlSource</a></td>
<td width=75%>The data to be displayed in the column. This is often a field in a table.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngsparse_property.htm">Sparse</a></td>
<td width=75%>If Sparse is set to true (.T.), controls in a grid are displayed as controls only when the cell in the column is selected. Other cells in the column display the underlying data value in a text box. Setting Sparse to true (.T.) allows faster repainting if a user is scrolling through a grid with a lot of displayed rows.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngcurrentcontrol_property.htm">CurrentControl</a></td>
<td width=75%>Which control in the grid is active. The default is Text1, but if you add a control to the column, you can specify it as the CurrentControl.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The <a href="lngreadonly_property.htm">ReadOnly</a> property of a control inside the column is overridden by the ReadOnly property of the Column. If you set the ReadOnly property of the control in a column in the code associated with the <a href="lngafterrowcolchange_event.htm">AfterRowColChange event</a>, the new setting will be valid while you are in that cell.</p>

<h2><a name="dgmaking_controls_easier_to_use"></a>Making Controls Easier to Use</h2>
<p>
You want to make it as easy as possible for users to understand and use your controls. Access keys, tab order, ToolTip text, and selective disabling all contribute to a more usable design.</p>
<h3>Setting Access Keys</h3>
<p>
An access key allows a user to choose a control from anywhere in the <a href="glsform.htm">form</a> by pressing ALT and the key.</p>
<p class=label>
<b>To specify an access key for a control</b>
<ul type=disc>
<li>
Precede the desired letter in the <a href="lngcaption_property.htm">Caption property</a> for the control with a backslash and a less than sign (\&lt;).</li>
</ul>
<p>
For example, the following property setting for the Caption of a command button makes <code>O</code> the access key.</p>
<pre><code>\&lt;Open
</code></pre>
<p>
A user can choose the <a href="glscommand_button_.htm">command button</a> from anywhere in the form by pressing ALT+O.</p>
<p class=label>
<b>To specify an access key for a text box or edit box</b>
<ol>
<li>
Create a <a href="glslabel_.htm">label</a> with a backslash and less than sign (\&lt;) in front of the desired letter, such as <code>C\&lt;ustomer</code>.<br><br></li>
<li>
Make sure the label is the control in the <a href="glstab_order.htm">tab order</a> immediately preceding the text box or edit box you want to receive the focus.</li>
</ol>
<h3>Setting the Tab Order of Controls</h3>
<p>
The default <a href="glstab_order.htm">tab order</a> of controls on your form is the order in which you added the controls to the form.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Set the tab order of controls so that the user can easily move through your controls in a logical order.</p>
<p class=label>
<b>To change the tab order of controls</b>
<ol>
<li>
In the <a href="tlsform_designer_toolbar.htm">Form Designer toolbar</a>, choose <b>Set Tab Order</b>.<br><br></li>
<li>
Double-click the box next to the control you want to have the initial focus when the form opens.<br><br></li>
<li>
Click the box next to the other controls in the order you want them to be tabbed to.<br><br></li>
<li>
Click anywhere outside the tab order boxes to finish.</li>
</ol>
<p>
You can also set the tab order for the objects on your form by list, depending on the setting in the Form Design tab of the <a href="cmdoptions_dialog_box.htm">Options dialog box</a>.</p>
<p>
You can set the selection order for the option and command buttons within a control group. To move to a control group with the keyboard, a user tabs to the first button in the control group and then uses the arrow keys to select other buttons in the group.</p>
<p class=label>
<b>To change the selection order of buttons within a control group</b>
<ol>
<li>
In the <a href="wndproperties_window.htm">Properties window</a>, select the group in the <b>Object</b> list. A thick border indicates that the group is in edit mode.<br><br></li>
<li>
Select the <b>Form Designer</b> window.<br><br></li>
<li>
From the <b>View</b> menu, choose <b>Tab Order</b>.<br><br></li>
<li>
Set the selection order as you would the tab order for controls.</li>
</ol>
<h3>Setting ToolTip Text</h3>
<p>
Each control has a <a href="lngtooltiptext_property.htm">ToolTipText</a> property that allows you to specify the text displayed when the user pauses the mouse pointer over the control. Tips are especially useful for buttons with icons instead of text.</p>
<p class=label>
<b>To specify ToolTip text</b>
<ul type=disc>
<li>
In the <a href="wndproperties_window.htm">Properties window</a>, select the <b>ToolTipText</b> property and type the desired text.</li>
</ul>
<p>
The form’s <a href="lngshowtips_property.htm">ShowTips </a> property determines whether ToolTip text is displayed.</p>
<h3>Change the Mouse Pointer Display</h3>
<p>
You can change the mouse pointer display to provide visual clues to your users about different states your application might be in.</p>
<p>
For example, in the tsBaseForm class of the Tasmanian Traders sample application, a WaitMode method changes the mouse pointer to the default wait state cursor. Before running any code that might take a while to process, the Tasmanian Traders application passes a value of true (.T.) to&nbsp; the WaitMode method to change the pointer and let the user know that processing is going on. After the processing is completed, a call to WaitMode with false (.F.) restores the default mouse pointer.</p>
<pre><code>* WaitMode Method of tsBaseForm class
LPARAMETERS tlWaitMode

lnMousePointer = IIF(tlWaitMode, MOUSE_HOURGLASS, MOUSE_DEFAULT)
thisform.MousePointer = lnMousePointer
thisform.SetAll('MousePointer', lnMousePointer)
</code></pre>
<p>
If you want to change the mouse pointer to something other than one of the default pointers, set the <u>MousePointer </u>property to 99 - Custom and set the <u>MouseIcon </u>property to your own cursor (.cur) or icon (.ico) file.</p>
<h3>Enabling and Disabling Controls</h3>
<p>
Set a control’s <a href="lngenabled_property.htm">Enabled property</a> to false (.F.) if the functionality of the control is not available in a given situation.</p>
<h4>Enabling and Disabling Buttons in a Group</h4>
<p>
You can enable or disable individual option buttons or command buttons in a group by setting the <a href="lngenabled_property.htm">Enabled property</a> of each button to either true (.T.) or false (.F.). You can also disable or enable all the buttons in a group by setting the Enabled property of the group, as in the following line of code:</p>
<pre><code>frmForm1.cmgCommandGroup1.Enabled = .T.
</code></pre>
<p>
When you set the Enabled property of an <a href="glsoption_button_group_.htm">option button group</a> or a <a href="glscommand_button_group_.htm">command button group</a> to false (.F.), all the buttons in the group are disabled, but won’t be displayed with the disabled ForeColor and BackColor. Setting the Enabled property of the group does not change the Enabled property of the individual buttons in the group. This allows you to disable a group of buttons with some of the buttons already disabled. When you enable the group, buttons that were originally disabled remain disabled.</p>
<p>
If you want to disable all the buttons in a group so that they appear disabled, and if you don’t want to preserve information about which buttons were originally disabled or enabled, you can use the <a href="lngsetall_method.htm">SetAll</a> method of the group, like this:</p>
<pre><code>frmForm1.opgOptionGroup1.SetAll("Enabled", .F.)
</code></pre>
<h3>Allowing Users to Drag and Drop</h3>
<p>
When you design Visual FoxPro applications, you can drag text, files, and objects from the <a href="dgapplication_development_and_developer_productivity.htm#newcomponent_gallery_overview">Component Gallery</a>, <a href="wndproject_manager.htm">Project Manager</a>, the <a href="wnddatabase_designer.htm">Database Designer</a>, and the <a href="wnddata_environment_designer.htm">Data Environment Designer</a> to desired locations on forms and reports. The <a href="glsdrag_and_drop.htm">drag-and-drop</a> features in Visual FoxPro allow you to extend this ability to the user at <a href="glsrun_time.htm">run time</a>.</p>
<p>
This drag-and-drop capability extends to multiple-form operations. The user can drag text, files, and controls anywhere on the screen, including other forms.</p>
<p>
Two types of drag and drop are now supported in Visual FoxPro: OLE drag-and-drop and control drag and drop. OLE drag-and-drop allows you to move data between other applications that support OLE drag-and-drop (such as Visual FoxPro, Visual Basic, the Windows Explorer, Microsoft Word and Excel, and so on). In a distributed Visual FoxPro application, you can move data between controls in the application, or between controls and other Window applications that support OLE drag-and-drop.</p>
<p>
Control drag and drop allows you to drag and drop Visual FoxPro controls within your Visual FoxPro applications. Control drag and drop is also supported in earlier versions of Visual FoxPro. As the user drags a control, Visual FoxPro provides a gray outline that is the same size as the object and moves with the mouse pointer. You can override this default behavior by specifying a cursor file (.cur) for the <a href="lngdragicon_property.htm">DragIcon property</a> of a control.</p>
<p>
This section describes control drag and drop. For more information about OLE drag-and-drop, see <a href="dginteroperability_and_the_internet.htm#newole_drag_and_drop">OLE drag-and-drop</a> in Chapter 31, “Interoperability and the Internet.”</p>
<p class=label>
<b>To see examples of control drag and drop</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>General</b>.</li>
</ol>
<p class=label>
<b>Dragging an Image control at run time</b></p>
<p>
<img src="afd10017.gif" border=0></p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Run-time dragging of a control doesn’t automatically change its location. You can do this, but you must program the relocation yourself, as described in the section “<a href="#dgcausing_control_movement">Causing Control Movement</a>,” later in this chapter. Often, dragging is used only to indicate that some action should be performed; the control retains its original position after the user releases the mouse button.</p>
<p>
Using the following <a href="glsdrag_and_drop.htm">drag-and-drop</a> properties, events, and method, you can specify both the meaning of a drag operation and how dragging can be initiated (if at all) for any given control.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=64%><b>To</b></td>
<td class=label width=36%><b>Use this feature</b></td>
</tr>
<tr valign=top>
<td width=64%>Enable automatic or manual dragging of a control.</td>
<td width=36%><a href="lngdragmode_property.htm">DragMode property</a></td>
</tr>
<tr valign=top>
<td width=64%>Specify what icon is displayed when the control is dragged.</td>
<td width=36%><a href="lngdragicon_property.htm">DragIcon property</a></td>
</tr>
<tr valign=top>
<td width=64%>Recognize when a control is dropped onto the object.</td>
<td width=36%><a href="lngdragdrop_event.htm">DragDrop event</a></td>
</tr>
<tr valign=top>
<td width=64%>Recognize when a control is dragged over the object.</td>
<td width=36%><a href="lngdragover_event.htm">DragOver event</a></td>
</tr>
<tr valign=top>
<td width=64%>Start or stop manual dragging.</td>
<td width=36%><a href="lngdrag_method.htm">Drag method</a></td>
</tr>
</table><br>
<p>
All visual controls can be dragged at <a href="glsrun_time.htm">run time</a> and all controls share the properties listed in the preceding table. Forms recognize the DragDrop and DragOver events, but they don’t have DragMode and DragIcon properties.</p>
<h4>Enabling Automatic Drag Mode</h4>
<p>
To allow the user to drag a control whenever the user clicks the control, set its <a href="lngdragmode_property.htm">DragMode property</a> to 1. This enables automatic dragging of the control. When you set dragging to Automatic, dragging is always on.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;While an automatic drag operation is taking place, the control being dragged doesn’t recognize other mouse events.</p>
<h4>Responding When the User Drops the Object</h4>
<p>
When the user releases the mouse button after dragging a control, Visual FoxPro generates a <a href="lngdragdrop_event.htm">DragDrop event</a>. You can respond to this event in many ways. You can relocate the control at the new location (indicated by the last position of the gray outline). Remember that the control doesn’t automatically move to the new location.</p>
<p>
Two terms are important when discussing drag-and-drop operations — <i>source</i> and <i>target</i>.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Term</b></td>
<td class=label width=75%><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=25%>Source</td>
<td width=75%>The control being dragged.</td>
</tr>
<tr valign=top>
<td width=25%>Target</td>
<td width=75%>The object onto which the user drops the control. This object, which can be a form or control, recognizes the DragDrop event.</td>
</tr>
</table><br>
<p>
A <a href="glscontrol.htm">control</a> becomes the target if the mouse position is within its borders when the button is released. A <a href="glsform.htm">form</a> is the target if the pointer is in a blank portion of the form.</p>
<p>
The DragDrop event receives three <a href="glsparameter.htm">parameters</a>: <i>oSource</i>, <i>nXCoord</i>, and <i>nYCoord</i>. The parameter <i>oSource</i> is a reference to the control that was dropped onto the target. The parameters <i>nXCoord</i> and <i>nYCoord</i> contain the horizontal and vertical coordinates, respectively, of the mouse pointer within the target.</p>
<p>
Because <i>oSource</i> is an <a href="glsobject.htm">object</a>, you use it just as you would a control — you can refer to its <a href="glsproperty.htm">properties</a> or call one of its <a href="glsmethod.htm">methods</a>. For example, the following statements in the code associated with the DragDrop event checks to see whether the user has dropped a control on itself:</p>
<pre><code>LPARAMETERS oSource, nXCoord, nYCoord
IF oSource.Name != THIS.Name
 &nbsp; * Take some action.
ELSE
 &nbsp; * Control was dropped on itself.
 &nbsp; * Take some other action.
ENDIF
</code></pre>
<p>
All possible control types for <i>oSource</i> have a <a href="lngvisible_property.htm">Visible property</a>. Therefore, you can make a control invisible when it’s dropped on a certain part of a form or on another control. The following line in the code associated with the DragDrop event of an <a href="ctlimage_control.htm">Image control</a> causes a dragged control to disappear when it’s dropped on the image:</p>
<pre><code>LPARAMETERS oSource, nXCoord, nYCoord
oSource.Visible = .F.
</code></pre>
<h4>Indicating Valid Drop Zones</h4>
<p>
When you enable drag-and-drop, you can help your users by including visual clues about where a user can and cannot drop a control. The best way to do this is to change the <a href="lngdragicon_property.htm">DragIcon</a> of the source in the code associated with the <a href="lngdragover_event.htm">DragOver event</a>.</p>
<p>
The following code in the DragOver event of a control indicates to a user that the control is not a valid drop target. In this example, <code>cOldIcon</code> is a user-defined property of the form.</p>
<pre><code>LPARAMETERS oSource, nXCoord, nYCoord, nState
DO CASE
 &nbsp; CASE nState = 0 &amp;&amp; Enter
 &nbsp;&nbsp;&nbsp;&nbsp; THISFORM.cOldIcon = oSource.DragIcon
 &nbsp;&nbsp;&nbsp;&nbsp; oSource.DragIcon = "NODROP01.CUR"
 &nbsp; CASE nState = 1 &amp;&amp; Leave
 &nbsp;&nbsp;&nbsp;&nbsp; oSource.DragIcon = THISFORM.cOldIcon
ENDCASE
</code></pre>
<h4>Controlling When Dragging Starts or Stops</h4>
<p>
Visual FoxPro has a setting of Manual for the <a href="lngdragmode_property.htm">DragMode property</a> that gives you more control than the Automatic setting. The Manual setting allows you to specify when a control can and cannot be dragged. (When DragMode is set to Automatic, the control can always be dragged as long as the setting isn’t changed.)</p>
<p>
For instance, you may want to enable dragging in response to MouseDown and MouseUp events, or in response to a keyboard or menu command. The Manual setting also allows you to recognize a MouseDown event before dragging starts, so that you can record the mouse position.</p>
<p>
To enable dragging from code, leave DragMode in its default setting (0 - Manual). Then use the <a href="lngdrag_method.htm">Drag method</a> whenever you want to begin or stop dragging an object:</p>
<p>
<i>container.control</i>.Drag(<i>nAction</i>)</p>
<p>
If <i>nAction</i> is 1, the Drag method initiates dragging of the control. If <i>nAction</i> is 2, the control is dropped, causing a DragDrop event. The value 0 for <i>nAction</i> cancels the drag. The effect is similar to giving the value 2, except that no DragDrop event occurs.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;To enable a drag and drop operation from a <a href="glslist_box_.htm">list box</a>, the best place to call the Drag method is in the code associated with the MouseMove event of the source list box, after determining that the mouse button is down. For an example, see Lmover.scx in the Visual Studio …\Samples\Vfp98\Solution\Controls\Lists directory.</p>

<h4><a name="dgcausing_control_movement"></a>Causing Control Movement in a Drag-and-Drop Operation</h4>
<p>
You may want the source control to change position after the user releases the mouse button. To make a control move to the new mouse location, use the <a href="lngmove_method.htm">Move method</a>. For example, the following code in the DragDrop event of a form moves the control that is dragged to the location of the drop:</p>
<pre><code>LPARAMETERS oSource, nXCoord, nYCoord
oSource.Move(nXCoord, nYCoord)
</code></pre>
<p>
This code may not produce precisely the effects you want, because the upper-left corner of the control is positioned at the mouse location. The following code positions the center of the control at the mouse location:</p>
<pre><code>LPARAMETERS oSource, nXCoord, nYCoord
oSource.Move ((nXCoord – oSource.Width / 2), ;
 &nbsp; (nYCoord – oSource.Height / 2))
</code></pre>
<p>
The code works best when the <a href="lngdragicon_property.htm">DragIcon property</a> is set to a value other than the default (the gray rectangle). When the gray rectangle is being used, the user normally wants the control to move precisely into the final position of the gray rectangle. To do this, record the initial mouse position within the source control. Then use this position as an offset when the control is moved. For an example, see Ddrop.scx in the Visual Studio …\Samples\Vfp98\Solution\Forms directory.</p>
<p class=label>
<b>To record the initial mouse position</b>
<ol>
<li>
Specify manual dragging of the control.<br><br></li>
<li>
Declare two form-level <a href="glsvariable.htm">variables</a>, n<code>DragX</code> and n<code>DragY</code>.<br><br></li>
<li>
Turn on dragging when a <a href="lngmousedown_event.htm">MouseDown event</a> occurs. Also, store the value of <i>nXCoord</i> and <i>nYCoord</i> in the form-level variables in this event.<br><br></li>
<li>
Turn dragging off when the <a href="lngmouseup_event.htm">MouseUp event</a> occurs.</li>
</ol>

<h2><a name="dgextending_forms"></a>Extending Forms</h2>
<p>
Page frames allow you to extend the surface area of your forms, and <a href="glsactivex_control.htm">ActiveX controls</a> allow you to extend the functionality of your forms.</p>
<h3>Using Page Frames</h3>
<p>
<img src="b016.gif" border=0></p>
<p>
A page frame is a container object that contains pages. Pages in turn contain controls. Properties can be set at the page frame, page, or control level.</p>
<p class=label>
<b>To see examples of using page frames</b>
<ol>
<li>
Run Solution.app in the Visual Studio …\Samples\Vfp98\Solution directory.<br><br></li>
<li>
In the treeview, click <b>Controls</b>, then click <b>Page frame</b>.</li>
</ol>
<p>
You can think of the page frame as a three-dimensional container that presents layered <a href="glspage.htm">pages</a>. Only controls on the top page (or on top of the page frame) can be visible and active.</p>
<p class=label>
<b>Multiple pages in a page frame on a form</b></p>
<p>
<img src="afd10015.gif" border=0></p>
<p>
The page frame defines the location of the pages and the amount of the page that is visible. The upper-left corner of a page is anchored to the upper-left corner of the page frame. Controls can be placed on pages which are beyond the dimensions of the page frame. These controls are active, but are not visible unless you programmatically change the <a href="lngheight_property.htm">Height</a> and <a href="lngwidth_property.htm">Width</a> properties of the page frame to make the controls visible.</p>
<h4>Using Pages in an Application</h4>
<p>
With page frames and pages, you can create tabbed forms or dialog boxes with the same kind of interface capabilities that you see in the Project Manager.</p>
<p>
In addition, page frames allow you to define a region of the form where you can easily swap controls in and out. For example, in <a href="glswizard.htm">Wizards</a>, most of the form remains constant, but an area of the form changes with each step. Instead of creating five forms for the wizard steps, you could create one form with a page frame and five pages.</p>
<p>
Solution.app, in the Visual Studio ...\Samples\Vfp98\Solution directory, contains two page frame examples that demonstrate using frames with and without <a href="glstab.htm">tabs</a>.</p>
<h4>Adding Page Frames to a Form</h4>
<p>
You can include one or more page frames on any form.</p>
<p class=label>
<b>To add a page frame to a form</b>
<ol>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a>, choose the <b>Page Frame</b> button and drag to size in the <b>Form</b> window.<br><br></li>
<li>
Set the PageCount property to indicate the number of pages to include in the frame.<p class=label>
<b>Page frame with four pages</b>
<p>
<img src="afd10016.gif" border=0></P></li>
<li>
From the frame’s shortcut menu, choose <b>Edit</b> to activate the frame as a container. The page frame border widens to indicate that it is active.<br><br></li>
<li>
Add controls the same way you would add them to a form.<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Like other container controls, you must select the page frame and choose <b>Edit</b> from the right mouse menu, or select the container in the Object drop-down list in the <a href="wndproperties_window.htm">Properties window</a>, so that the container is selected (has a wider border) before you add controls to the page you are designing. If you do not activate the page as a container before adding controls, the controls will be added to the <a href="glsform.htm">form</a> instead of the <a href="glspage.htm">page</a>, even though they may appear to be on the page.</p></li>
</ol>
<p class=label>
<b>To select a different page in the page frame</b>
<ol>
<li>
Activate the page frame as a container by right-clicking it and choosing <b>Edit</b>.<br><br></li>
<li>
Select the tab of the page you want to use.<p class=tl>
-or-</P></li>
</ol>
<ul type=disc>
<li>
Select the page in the <b>Object</b> box in the <a href="wndproperties_window.htm">Properties window</a>.<p class=tl>
-or-</P></li>
<li>
Select the page in the <b>Page</b> box at the bottom of the <a href="wndform_designer.htm">Form Designer</a>.</li>
</ul>
<h4>Adding Controls to a Page</h4>
<p>
When you add controls to a page, they are visible and active only when their page is active.</p>
<p class=label>
<b>To add controls to a page</b>
<ol>
<li>
In the <b>Object</b> box of the <a href="wndproperties_window.htm">Properties</a> window, select the page. A border appears around the page frame indicating that you can manipulate contained <a href="glsobject.htm">objects</a>.<br><br></li>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar, choose the control button you want and drag to size in the page.</li>
</ol>
<h4>Managing Long Captions on Page Tabs</h4>
<p>
If the <a href="glscaption.htm">captions</a> on your <a href="glstab.htm">tabs</a> are longer than can be displayed on the tab given the width of the page frame and the number of pages, you have two options:</p>
<ul type=disc>
<li>
Set the <a href="lngtabstretch_property.htm">TabStretch</a> property to <b>1</b> - <b>Single Row</b> to show only the characters of the captions that will fit on the tabs. Single Row is the default.</li>
<li>
Set the TabStretch property to <b>0</b> - <b>Multiple Rows</b> to stack the tabs so that the entire caption on all the tabs is visible.</li>
</ul>
<h4>Changing Pages Programmatically</h4>
<p>
Whether a page frame is displayed with <a href="glstab.htm">tabs</a> or not, you can programmatically make a page active by using the <a href="lngactivepage_property.htm">ActivePage property</a>. For example, the following code in the Click event procedure of a command button on a form changes the active page of a frame page on the form to the third page:</p>
<pre><code>THISFORM.pgfOptions.ActivePage = 3
</code></pre>
<h4>Common Page Frame Properties</h4>
<p>
The following page frame properties are commonly set at design time.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngtabs_property.htm">Tabs</a></td>
<td width=75%>Whether tabs are visible for the pages.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngtabstyleproperty.htm">TabStyle</a></td>
<td width=75%>Whether or not the tabs are all the same size and together the same width as the page frame.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngpagecount_property.htm">PageCount</a></td>
<td width=75%>The number of pages in the page frame.</td>
</tr>
</table><br>
<h3>OLE Container Control</h3>
<p>
<img src="b017.gif" border=0></p>
<p>
You add an OLE object to a form by clicking this tool and dragging it to size in the Form window. This tool can represent a server object such as Microsoft Excel or Word, or it can represent an ActiveX control if your Windows SYSTEM directory contains ActiveX controls (files with an .ocx extension). For general information about ActiveX controls, see Chapter 16, <a href="dgadding_ole.htm">Adding OLE</a>.</p>
<h3>OLE Bound Control</h3>
<p>
<img src="b017a.gif" border=0></p>
<p>
You can create a bound OLE object on a form by clicking this tool and dragging it to size in the Form window. After creating the object, you connect it to a General field in a table. Then, you use the object to display the contents of the field. For example, if you store Word documents in a General field, you can display the contents of these documents by using a bound OLE object on a form.</p>
<p class=label>
<b>To create a bound OLE object</b>
<ol>
<li>
Create or open a form.<br><br></li>
<li>
In the <a href="tlsform_controls_toolbar.htm">Form Controls</a> toolbar, choose the <b>OLE Bound Control</b> button and drag it to size on the form.<br><br></li>
<li>
Bind the OLE object to a General field by setting the object’s ControlSource property.</li>
</ol>
<p>
For an example of using the OLE Bound control, see Chapter 16, <a href="dgadding_ole.htm">Adding OLE</a>.</p>
</BODY>
</HTML>

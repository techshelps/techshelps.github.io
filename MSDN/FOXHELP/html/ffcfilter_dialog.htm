<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filter Dialog Box (VFP Foundation Class)</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="ffcfilter_dialog"></a><sup></sup>Filter Dialog Box</h1>
<p>
<a href="ffcfilter_dialogsa.htm">See Also</a></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Category</b></td>
<td width=67%>Data Query</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Default Catalog</b></td>
<td width=67%>Visual&nbsp;FoxPro&nbsp;Catalog\Foundation&nbsp;Classes\Data&nbsp;Query</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Class</b></td>
<td width=67%>_filterdialog</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Base Class</b></td>
<td width=67%>Form</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Class Library</b></td>
<td width=67%>_table.vcx</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Parent Class</b></td>
<td width=67%>_form</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Sample</b></td>
<td width=67%>...\Samples\Vfp98\Solution\Ffc\datasort.scx</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
This class is a dialog box that uses an existing filter object to allow you to filter data in a particular field. </p>
<p>
To use, drop the class on a project or, from the Component Gallery <a href="newitem_shortcut_menu.htm">Item Shortcut menu</a>, select <b>Create Form</b> or <b>Add to Project</b>. When you drop the class on a project, you can choose between adding the class, creating a subclass, or creating a form. When you drop the class on a project or choose <b>Create a new form from the selected class</b> in the shortcut menu, Visual FoxPro displays an Open dialog box so you can specify the name of the form. Then Visual FoxPro creates and opens the form in the Form Designer.</p>
<p>
_FilterDialog enables you to use Visual FoxPro expressions to build a complex filter using booleans, nested conditions, and so on, limited to the fields available in currently-open tables. It automatically provides delimiters for various field types. It suggests which expressions might be optimizable by checking available tags on the current table. The field list places "*" in front of field names that have usable index tags.</p>
<p>
Like _FilterExpr, _FilterDialog needs at least one open table on which it can set a filter. Unlike _FilterExpr, _FilterDialog is not necessarily modal, however it is modal when _FilterExpr calls it. FilterDialog determines the current table in the Init event. FilterDialog never changes data sessions.</p>
<p>
When called by _FilterExpr, _FilterDialog determines what filter the user has already specified in the _FilterExpr edit box and displays that expression as its initial set of conditions. When _FilterDialog is called directly, it checks the current alias for a filter, using SET("FILTER"), and shows any current filter as its initial conditions.</p>
<p>
The _FilterDialog SetUpFilter(&nbsp;) method uses the conditions listed in the dialog and creates a filter expression, then applies the NORMALIZE( ) function to the expression. The result is stored in the cFilter property. When you click OK, SetupFilter(&nbsp;) runs. _FilterDialog calls the _FilterExpr.SetFilter method if it is called by an instance of _FilterExpr; otherwise it uses _table to determine if navigation is allowed, sets the filter directly, and refreshes the display if the filter is set.</p>
<p>
_FilterDialog is a standalone object and does not require the existence of _FilterExpr to build a filter. However, when called by _FilterExpr, the two dialogs work together to build a filter, by specifying an expression in _FilterExpr and by making choices in _FilterDialog. For more information on the Filter Expression class, see <a href="ffcfilter_expression.htm">_Filter Expression</a>.</p>
<p>
See <a href="ffcusing_visual_foxpro_foundation_classes.htm">Guidelines for Using Visual FoxPro Foundation Classes</a> for more information on using foundation classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Properties, Events, Methods</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>cFilter property</td>
<td width=50%>Contains the filter expression processed in the <i>SetupFilter</i> method.<br>
<B><b>Default:</b></B> ""</td>
</tr>
<tr valign=top>
<td width=50%>SetupFilter method</td>
<td width=50%>This method takes the conditions listed in the dialog and creates them into a filter expression, then applies the NORMALIZE(&nbsp;) function to the expression.<br>
<B><b>Syntax: </b></B>SetupFilter(<i>tcValue</i>)<br>
<B><b>Return:</b></B> <i>cFilter</i><br>
<B><b>Arguments: <br>
</b></B><i>tcValue </i>specifies an expression to use as the filter.<br>
<i>cFilter </i>is the value contained in the cFilter property.</td>
</tr>
<tr valign=top>
<td width=50%>cOldexact property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>iBact property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>iQptr property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>iQuerymax property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>iSelect property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>oCaller property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>aDBFs[1,0] property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>aTags[1,0] property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>aQuery[1,0] property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>aFLDs[1,0] property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>SetAction method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>QReset method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>QSet method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>FSet method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>NoBrack method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>Brackets method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>SetTags method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>OnTag method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>NoTag method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>EditQuery method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>SetRowsources method</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>SetInitialQueryParts method</td>
<td width=50%>Internal to the class.</td>
</tr>
</table><br>
</BODY>
</HTML>

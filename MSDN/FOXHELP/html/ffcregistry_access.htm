<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registry Access (VFP Foundation Class)</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="ffcregistry_access"></a>Registry Access</h1>
<p>
<a href="ffcregistry_accesssa.htm">See Also</a></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Category</b></td>
<td width=67%>System Utilities</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Default Catalog</b></td>
<td width=67%>Visual&nbsp;FoxPro&nbsp;Catalog\Foundation&nbsp;Classes\Utilities</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Class</b></td>
<td width=67%>registry</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Base Class</b></td>
<td width=67%>Custom</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Class Library</b></td>
<td width=67%>registry.vcx</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Parent Class</b></td>
<td width=67%>registry</td>
</tr>
<tr valign=top>
<td class=label width=33%><b>Sample</b></td>
<td width=67%>...\Samples\Vfp98\Solution\WinAPI\regfox.scx</td>
</tr>
</table><br>
<p class=label>
<b>Remarks</b></p>
<p>
This class provides access to information in the Windows Registry.</p>
<p>
To use, drop the class on a project or form or, from the Component Gallery <a href="newitem_shortcut_menu.htm">Item Shortcut menu</a>, select <b>Add to Project</b> or <b>Add to Form</b>. When you add the class to a form, Visual FoxPro places the class on the form. You can then specify the appropriate property values and provide any necessary input and output objects. When you drop the class on a project, you can choose between adding the class or creating a subclass.</p>
<p>
See <a href="ffcusing_visual_foxpro_foundation_classes.htm">Guidelines for Using Visual FoxPro Foundation Classes</a> for more information on using foundation classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Properties, Events, Methods</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%>CloseKey method</td>
<td width=50%>Closes a registry key.<br>
<B><b>Syntax:</b></B> CloseKey(&nbsp;)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B>none</td>
</tr>
<tr valign=top>
<td width=50%>DeleteKey method</td>
<td width=50%>Deletes a registry key.<br>
<B><b>Syntax:</b></B> DeleteKey(<i>nUserKey, cKeyPath</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>nUserKey</i> specifies the Registry User key.<br>
<i>cKeyPath</i> specifies the Registry User key path.</td>
</tr>
<tr valign=top>
<td width=50%>DeleteKeyValue method</td>
<td width=50%>Deletes a value from a registry key.<br>
<B><b>Syntax:</b></B> DeleteKeyValue(<i>cOptName, cKeyPath, nUserKey</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>cOptName</i> specifies the name of the Registry key option.<br>
<i>cKeyPath</i> specifies the path to the Registry key.<br>
<i>nUserKey</i> specifies the User key.</td>
</tr>
<tr valign=top>
<td width=50%>EnumKeys method</td>
<td width=50%>Enumerates through a registry key.<br>
<B><b>Syntax:</b></B> EnumKeys(@<i>aKeyNames</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>aKeyNames</i> specifies<i> </i>the Registry keys to enumerate.</td>
</tr>
<tr valign=top>
<td width=50%>EnumKeyValues method</td>
<td width=50%>Enumerates through values of a registry key.<br>
<B><b>Syntax:</b></B> EnumKeyValues(@<i>aKeyValues</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>aKeyValues </i>specifies the Registry User key values to enumerate.</td>
</tr>
<tr valign=top>
<td width=50%>EnumOptions method</td>
<td width=50%>Enumerates through all entries for a key and populates an array with values.<br>
<B><b>Syntax:</b></B> EnumOptions(@<i>aRegOpts, cOptPath, nUserKey, lEnumKeys</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: <br>
</b></B><i>aRegOpts</i> specifies the Registry key option.<br>
<i>cOptPath</i> specifies the path to the Registry key option.<br>
<i>nUserKey</i> specifies the User key ID. <br>
<i>lEnumKeys</i> specifies whether to enumerate other options, if they exist.</td>
</tr>
<tr valign=top>
<td width=50%>GetKeyValue method</td>
<td width=50%>Returns the value for a key.<br>
<B><b>Syntax:</b></B> GetKeyValue(<i>cValueName, cKeyValue</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>cValueName </i>specifies the name of the value to retrieve.<br>
<i>cKeyValue </i>specifies the value of <i>cValueName</i>.</td>
</tr>
<tr valign=top>
<td width=50%>GetRegKey method</td>
<td width=50%>Returns a registry key setting.<br>
<B><b>Syntax:</b></B> GetRegKey(<i>cOptName, cOptVal, cKeyPath, nUserKey</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>cOptName</i> specifies the name of the Registry key option.<br>
<i>cOptVal</i> specifies the value to apply to the option.<br>
<i>cKeyPath</i> specifies the Registry key path.<br>
<i>nUserKey</i> specifies the User key.</td>
</tr>
<tr valign=top>
<td width=50%>IsKey method</td>
<td width=50%>Returns whether a specified key exists.<br>
<B><b>Syntax:</b></B> IsKey(<i>cKeyName, nRegKey</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>cKeyName </i>specifies the name of the user ley to check, if it exists.<br>
<i>nRegKey</i> specifies the Registry key ID</td>
</tr>
<tr valign=top>
<td width=50%>OpenKey method</td>
<td width=50%>Opens a registry key.<br>
<B><b>Syntax:</b></B> Open(<i>cLookUpKey, nRegKey, lCreateKey)</i><br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>cLookUpKey</i> specifies the name of the user key for which to search.<br>
<i>nRegKey</i> specifies the Registry key ID<br>
<i>lCreateKey</i> specifies whether to create a new Registry key if the specified one does not exist.</td>
</tr>
<tr valign=top>
<td width=50%>SetKeyValue method</td>
<td width=50%>Sets the value of a registry key.<br>
<B><b>Syntax:</b></B> SetKeyValue(<i>cValueName, cValue</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>cValueName</i> specifies the name of the value to set.<br>
<i>cValue</i> specifies the value to apply to <i>cValueName</i>.</td>
</tr>
<tr valign=top>
<td width=50%>SetRegKey method</td>
<td width=50%>Sets the registry key setting.<br>
<B><b>Syntax:</b></B> SetRegKey(<i>cOptName, cOptVal, cKeyPath, nUserKey</i>, <i>lCreateKey</i>)<br>
<B><b>Return:</b></B> 0 if successful; otherwise the Windows API error code.<i><br>
</i><B><b>Arguments: </b></B><br>
<i>cOptName</i> specifies the name of the Registry key option.<br>
<i>cOptVal</i> specifies the value to apply to the option.<br>
<i>cKeyPath</i> specifies the Registry key path.<br>
<i>nUserKey</i> specifies the User key ID.<br>
<i>lCreateKey</i> specifies to create the new key. The new key is created if <i>lCreateKey</i> is set to true (.T.).</td>
</tr>
<tr valign=top>
<td width=50%>cAppPathKey property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>cIniDllFile property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>cODBCDllFile property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>cRegDllFile property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>cVfpOptPath property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>lCreateKey property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>lHadError property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>lLoaddedDlls property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>lLoadedInis property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>lLoadedOdbcs property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>nCurrentKey property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>nCurrentOS property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>nUserKey property</td>
<td width=50%>Internal to the class.</td>
</tr>
<tr valign=top>
<td width=50%>LoadRegFuncs method</td>
<td width=50%>Internal to the class.</td>
</tr>
</table><br>
</BODY>
</HTML>

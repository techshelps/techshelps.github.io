<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SORT Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngsort"></a><sup></sup>SORT Command</h1>
<p>
<a href="lngsortsa.htm">See Also</a></p>
<p>
Sorts records in the currently selected table and outputs the sorted records to a new table.</p>
<p class=label>
<b>Syntax</b></p>
<p>
SORT TO <i>TableName</i><br>
ON <i>FieldName1</i> [/A | /D] [/C]<br>
 &nbsp; [, <i>FieldName2</i> [/A | /D] [/C] ...]<br>
 &nbsp; [ASCENDING | DESCENDING]<br>
 &nbsp; [<i>Scope</i>] [FOR <i>lExpression1</i>] [WHILE <i>lExpression2</i>]<br>
 &nbsp; [FIELDS <i>FieldNameList</i><br>
 &nbsp; | FIELDS LIKE <i>Skeleton</i><br>
 &nbsp; | FIELDS EXCEPT <i>Skeleton</i>]<br>
 &nbsp; [NOOPTIMIZE]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>TableName</i></p>
<p class=indent>
Specifies the name of the new table containing the sorted records. Visual FoxPro assumes a .dbf file name extension for tables. A .dbf extension is automatically assigned if the file name you include doesn't have an extension.</p>
<p class=dt>
ON <i>FieldName1</i></p>
<p class=indent>
Specifies the field in the currently selected table on which the sort is based. The contents and data type of the field determine the order of the records in the new table. By default, the sort is done in ascending order. You can't sort on memo or general fields.</p>
<p class=tl>
The following example sorts a table on the <code>cust_id</code> field. The <code>customer</code> table is opened and sorted, creating a new table named <code>temp</code>. The records in <code>temp</code> are ordered by the <code>cust_id</code> field.</P><pre><code>CLOSE DATABASES
OPEN DATABASE (HOME(2) + 'data\testdata')
USE customer&nbsp; &amp;&amp; Opens Customer table
CLEAR
LIST FIELDS company, cust_id NEXT 3
SORT TO temp ON cust_id
USE temp
LIST FIELDS company, cust_id NEXT 3
WAIT WINDOW 'Now sorted on CUST_ID' NOWAIT
</code></pre>
<p class=tl>
You can include additional field names (<i>FieldName2</i>, <i>FieldName3</i>) to further order the new table. The first field <i>FieldName1</i> is the primary sort field, the second field <i>FieldName2</i> is the secondary sort field, and so on.</P><p class=dt>
[/A | /D] [/C]</p>
<p class=indent>
For each field you include in the sort, you can specify an ascending or descending sort order. /A specifies an ascending order for the field. /D specifies a descending order. /A or /D can be included with any type of field.</p>
<p class=tl>
By default, the field sort order for character fields is case sensitive. If you include the /C option after the name of a character field, case is ignored. You can combine the /C option with the /A or /D option. For example, /AC or /DC.</P><p class=tl>
In the following example, a new table named <code>clients</code> is created. The <code>orders</code> table is sorted on the <code>order_date</code> field in ascending order and the <code>freight</code> field in descending order.</P><pre><code>USE orders
SORT TO clients ON order_date/A,freight/D
</code></pre>
<p class=dt>
ASCENDING</p>
<p class=indent>
Specifies an ascending order for all fields not followed by /D.</p>
<p class=dt>
DESCENDING</p>
<p class=indent>
Specifies a descending order for all fields not followed by /A.</p>
<p class=tl>
If you omit either ASCENDING or DESCENDING, the sort order is ascending by default.</P><p class=dt>
<i>Scope</i></p>
<p class=indent>
Specifies a range of records to sort. The scope clauses are: ALL, NEXT <i>nRecords</i>, RECORD <i>nRecordNumber</i>, and REST.</p>
<p class=tl>
The default scope for SORT is ALL records.</P><p class=dt>
FOR <i>lExpression1</i></p>
<p class=indent>
Specifies that only the records in the current table for which the logical condition <i>lExpression1</i> evaluates to true (.T.) are included in the sort. Including FOR lets you conditionally sort records, filtering out undesired records.</p>
<p class=tl>
Rushmore optimizes a SORT&nbsp;...&nbsp;FOR command if <i>lExpression1</i> is an optimizable expression. For best performance, use an optimizable expression in the FOR clause. </P><p class=tl>
A discussion of expressions that Rushmore can optimize appears in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</P><p class=dt>
WHILE <i>lExpression2</i></p>
<p class=indent>
Specifies a condition whereby records from the current table are included in the sort for as long as the logical expression <i>lExpression2</i> evaluates to true (.T.).</p>
<p class=dt>
FIELDS <i>FieldNameList</i></p>
<p class=indent>
Specifies fields from the original table to include in the new table that SORT creates. If you omit the FIELDS clause, all fields from the original table are included in the new table.</p>
<p class=dt>
FIELDS LIKE <i>Skeleton</i></p>
<p class=indent>
Specifies that fields from the original table that match the field skeleton <i>Skeleton</i> are included in the new table that SORT creates.</p>
<p class=dt>
FIELDS EXCEPT <i>Skeleton</i></p>
<p class=indent>
Specifies that all fields except those that match the field skeleton <i>Skeleton</i> are included in the new table that SORT creates.</p>
<p class=tl>
The field skeleton <i>Skeleton</i> supports wildcards. For example, to specify that all fields that begin with the letters A and P are included in the new table, use the following:</P><pre><code>SORT TO mytable ON myfield FIELDS LIKE A*,P*
</code></pre>
<p class=tl>
The LIKE clause can be combined with the EXCEPT clause:</P><pre><code>SORT TO mytable ON myfield FIELDS LIKE A*,P* EXCEPT PARTNO*
</code></pre>
<p class=dt>
NOOPTIMIZE</p>
<p class=indent>
Disables Rushmore optimization of SORT.</p>
<p class=indent>
For more information, see <a href="lngset_optimize.htm">SET OPTIMIZE</a> and "Understanding Rushmore Technology" in Chapter 15, <a href="dgoptimizing_applications.htm">Optimizing Applications</a>, in the <i>Programmer's Guide</i>.</p>
<p class=label>
<b>Remarks</b></p>
<p>
One or more specified fields in the current table determine the order in which the records appear in the new table.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Be sure you have enough disk space for the new table and the temporary work files created during the sort. The disk space needed to perform a sort can be as much as three times the size of the source table. The amount of available disk space can be determined with DISKSPACE(&nbsp;) and SYS(2020). If you run out of disk space during a sort, Visual FoxPro displays an error message, and the temporary work files are deleted.</p>
<p>
Character-type fields that contain numbers and spaces might not sort in the order you expect. Numeric fields fill from right to left, with empty spaces to the left. In contrast, character fields fill from left to right, with empty spaces to the right.</p>
<p>
For example, if two records in a table contain a character field with 1724 in one record and 18 in the other, and the table is sorted on this field in ascending order, the record containing 1724 appears before the record containing 18. This is because Visual FoxPro reads each character in the character fields from left to right, and because 17 (in 1724) is less than 18 (in 18), it puts 1724 first. To avoid this problem, always precede lower numbers with leading zeros (0018) or make the field numeric.</p>
</BODY>
</HTML>

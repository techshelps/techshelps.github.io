<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEFINE CLASS Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngdefine_class"></a><sup></sup>DEFINE CLASS Command</h1>
<p>
<a href="lngdefine_classx.htm">Example</a> &nbsp; <a href="lngdefine_classsa.htm">See Also</a></p>
<p>
Creates a user-defined class or subclass and specifies the properties, events, and methods for the class or subclass.</p>
<p class=label>
<b>Syntax</b></p>
<p>
DEFINE CLASS <i>ClassName1</i> AS <i>ParentClass</i> [OLEPUBLIC]<br>
 &nbsp; [[PROTECTED | HIDDEN <i>PropertyName1</i>, <i>PropertyName2</i> ...]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [Object.]<i>PropertyName = eExpression ...</i>]<br>
 &nbsp; [ADD OBJECT [PROTECTED] <i>ObjectName</i> AS <i>ClassName2</i> [NOINIT]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; [WITH <i>cPropertylist</i>]]...<br>
 &nbsp; [[PROTECTED | HIDDEN] FUNCTION | PROCEDURE <i>Name</i>[_ACCESS | _ASSIGN]<br>
 &nbsp; | THIS_ACCESS [NODEFAULT]<br>
 &nbsp;&nbsp;&nbsp;&nbsp; <i>cStatements</i><br>
 &nbsp; [ENDFUNC | ENDPROC]]...<br>
ENDDEFINE</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>ClassName1</i></p>
<p class=indent>
Specifies the name of the class to create.</p>
<p class=dt>
AS <i>ParentClass</i></p>
<p class=indent>
Specifies the parent class on which a class or subclass is based. The parent class can be a Visual FoxPro base class, such as the Form class, or another user-defined class or subclass.</p>
<p class=tl>
The following table lists the Visual FoxPro base classes:</P><p class=label>
<b>Base class names</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=34%><a href="ctlactivedoc_object.htm">ActiveDoc</a></td>
<td width=66%><a href="ctlprojecthook_object.htm">ProjectHook</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcheckbox_control.htm">CheckBox</a></td>
<td width=66%><a href="ctllabel_control.htm">Label</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcolumn_object.htm">Column</a></td>
<td width=66%><a href="ctlline_control.htm">Line</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcombobox_control.htm">ComboBox</a></td>
<td width=66%><a href="ctllistbox_control.htm">ListBox</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcommandbutton_control.htm">CommandButton</a></td>
<td width=66%><a href="ctlole_container_control.htm">OLEControl</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcommandgroup_control.htm">CommandGroup</a></td>
<td width=66%><a href="ctlole_bound_control.htm">OLEBoundControl</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcontainer_object.htm">Container</a></td>
<td width=66%><a href="ctloptionbutton_control.htm">OptionButton</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcontrol_object.htm">Control</a></td>
<td width=66%><a href="ctloptiongroup_control.htm">OptionGroup</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcursor_object.htm">Cursor</a></td>
<td width=66%><a href="ctlpage_object.htm">Page</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlcustom_object.htm">Custom</a></td>
<td width=66%><a href="ctlpageframe_control.htm">PageFrame</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctldataenvironment_object.htm">DataEnvironment</a></td>
<td width=66%><a href="ctlrelation_object.htm">Relation</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctleditbox_control.htm">EditBox</a></td>
<td width=66%><a href="ctlseparator_object.htm">Separator</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlform_object.htm">Form</a></td>
<td width=66%><a href="ctlshape_control.htm">Shape</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlformset_object.htm">FormSet</a></td>
<td width=66%><a href="ctlspinner_control.htm">Spinner</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlgrid_control.htm">Grid</a></td>
<td width=66%><a href="ctltextbox_control.htm">TextBox</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlheader_object.htm">Header</a></td>
<td width=66%><a href="ctltimer_control.htm">Timer</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlhyperlink_object.htm">Hyperlink</a></td>
<td width=66%><a href="ctltoolbar_object.htm">ToolBar</a></td>
</tr>
<tr valign=top>
<td width=34%><a href="ctlimage_control.htm">Image</a></td>
<td width=66%></td>
</tr>
</table><br>
<p class=tl>
A non-visual user-defined class is created by specifying Custom for <i>ParentClass.</i></P><p class=tl>
In the following example, a subclass named <code>MyForm</code> is created, based on the Form base class. A Click method is created that displays a dialog box when <code>MyForm</code> is clicked.</P><pre><code>DEFINE CLASS MyForm AS Form
 &nbsp; PROCEDURE Click
 &nbsp;&nbsp;&nbsp;&nbsp; = MESSAGEBOX('MyForm has been clicked!')
 &nbsp; ENDPROC
ENDDEFINE
</code></pre>
<p class=dt>
OLEPUBLIC</p>
<p class=indent>
Specifies that the class in an Automation server can be accessed by an Automation client.</p>
<p class=tl>
If a program containing an OLEPUBLIC class definition is added to a project, an executable (.exe) file or a dynamic link library (.dll) containing the class can be created interactively in the Project Manager or with BUILD EXE or BUILD DLL. The EXE or DLL is automatically registered with the operating system, and becomes available to any Automation client.</P><p class=tl>
For information about creating custom Automation servers, see <a href="dgadding_ole.htm#dgcreating_ole_servers">Creating Automation Servers</a> in Chapter 16, “Adding OLE.”</P><p class=indent>
[PROTECTED | HIDDEN <i>PropertyName1, PropertyName2 ...</i>]<br>
[<i>Object</i>.]<i>PropertyName</i> = <i>eExpression ...</i> Creates a class or subclass property and assigns a default value to the property. Properties are named attributes of the class and define characteristics and behaviors for the class. Classes and subclasses can have multiple properties.</p>
<p class=tl>
Use = to assign a value to the property. The following example creates a user-defined class named <code>MyClass</code> and creates two properties called Name and Version. The Name property is initialized to the empty string and the Version property is initialized to the character string 1.0.</P><pre><code>DEFINE CLASS MyClass AS Custom
 &nbsp; Name = ''
 &nbsp; Version = '1.0'
ENDDEFINE
</code></pre>
<p class=tl>
A property can be accessed outside the class or subclass definition after the object is created with CREATEOBJECT(&nbsp;):</P><pre><code>MyOjbect = CREATEOBJECT('MyClass')
</code></pre>
<p class=tl>
Properties are accessed with the following syntax:</P><pre><code>ObjectName.Property
</code></pre>
<p class=tl>
The .<i>Object</i> keyword indicates to Visual FoxPro that the property value should be applied when the ActiveX control is created.</P><p class=tl>
The following example adds the Outline ActiveX control to a form. The Object keyword is used to specify a property for the Outline control before it is created.</P><pre><code>PUBLIC frmOLETest
frmOLETest = CREATEOBJECT('Form')
frmOLETest.Visible = .T.

frmOLETest.ADDOBJECT('OCXTest', 'BlueOLEControl', ;
 &nbsp; 'MSOutl.Outline')
frmOLETest.OCXTest.AddItem('Item One')
frmOLETest.OCXTest.AddItem('Item Two')

DEFINE CLASS BlueOLEControl AS OLEControl

 &nbsp; * Set a property of the ActiveX control
 &nbsp; .Object.Backcolor = 16776960
 &nbsp; 
 &nbsp; * Set properties of the OLE Container Control
 &nbsp; Visible = .T.
 &nbsp; Height = 100
 &nbsp; Width = 200
ENDDEFINE
</code></pre>
<p class=tl>
Include PROTECTED and a list of property names to prevent access and changes to the properties from outside of the class or subclass definition. Methods and events within the class or subclass definition can access the protected properties.</P><p class=tl>
In the following example, the Version property is protected, preventing it from being accessed and changed outside of the class definition. However, the Name property is not protected and can be accessed and changed.</P><pre><code>DEFINE CLASS MyClass AS Custom
 &nbsp; PROTECTED Version
 &nbsp; Name = ''
 &nbsp; Version = '1.0'
ENDDEFINE
</code></pre>
<p class=tl>
Include HIDDEN and a list of property names to prevent access and changes to the properties from outside of the class definition. Only methods and events within the class definition can access the hidden properties. While protected properties can be accessed by subclasses of the class definition, hidden properties can only be accessed from with the class definition.</P><p class=dt>
ADD OBJECT</p>
<p class=indent>
Adds an object to a class or subclass definition from a Visual FoxPro base class, user-defined class or subclass, or ActiveX custom control.</p>
<p class=dt>
PROTECTED</p>
<p class=indent>
Prevents access and changes to the object's properties from outside the class or subclass definition. The PROTECTED keyword must be placed immediately before <i>ObjectName</i> or FoxPro generates a syntax error.</p>
<p class=dt>
<i>ObjectName</i></p>
<p class=indent>
Specifies the name of the object and is used to reference the object from within the class or subclass definition after an object is created from the class or subclass definition.</p>
<p class=dt>
AS <i>ClassName2</i></p>
<p class=indent>
Specifies the name of the class or subclass containing the object you add to the class definition. For example, the following class definition adds a command button from the CommandButton base class and a list box from the ListBox base class.</p>
<pre><code>DEFINE CLASS MyClass AS Custom
 &nbsp; ADD OBJECT CB1 AS CommandButton
 &nbsp; ADD OBJECT LIST1 AS ListBox
ENDDEFINE
</code></pre>
<p class=dt>
NOINIT</p>
<p class=indent>
Specifies that an object's Init method is not executed when the object is added.</p>
<p class=dt>
WITH <i>cPropertyList</i></p>
<p class=indent>
Specifies a list of properties and property values for the object you add to the class or subclass definition. For example, the following class definition creates a class called <code>MyClass</code>, adds a command button to the class definition, and specifies the Caption and BackColor properties for the command button.</p>
<pre><code>DEFINE CLASS MyClass AS CUSTOM
 &nbsp; ADD OBJECT CB1 AS CommandButton;
 &nbsp;&nbsp;&nbsp;&nbsp; WITH Caption = 'Cancel', BackColor = 2
ENDDEFINE
</code></pre>
<p class=dt>
FUNCTION | PROCEDURE <i>Name</i>[_ACCESS | _ASSIGN] | THIS_ACCESS</p>
<p class=indent>
Create events and methods for the class or subclass. Events and methods are created as a set of functions or procedures.</p>
<p class=tl>
You can create an event function or procedure within a class or subclass definition to respond to an event. An event is an action such as a mouse click that is recognized by an object created with a class or subclass definition. For additional information about Visual FoxPro event processing, see "The Core Events" in Chapter 4, <a href="dgunderstanding_the_event_model.htm">Understanding the Event Model</a>, in the <i>Programmer's Guide</i>.</P><p class=tl>
Events are called with the following syntax:</P><pre><code>ObjectName.Event
</code></pre>
<p class=tl>
You can also create a method function or procedure within a class or subclass definition. A method is a procedure that acts upon the object created with the class or subclass definition. Methods are called with this syntax:</P><pre><code>ObjectName.Method
</code></pre>
<p class=tl>
The _ACCESS and _ASSIGN suffixes can be added to a procedure or function name to create an Access or Assign method for a property of the same name. The code in an Access method is executed whenever the property is queried. The code in an Assign method is executed whenever you attempt to change the value of the property. </P><p class=tl>
In addition, you can create a THIS_ACCESS procedure or function that is executed whenever you attempt to change the value of a member of an object or a member of an object is queried.</P><p class=tl>
For more information about creating Access and Assign methods with DEFINE CLASS, see <a href="dgprogramming_improvements.htm#newaccess_and_assign_methods">Access and Assign Methods</a> in Chapter 33, Programming Improvements, in the <i>Programmer's Guide</i>.</P><p class=dt>
NODEFAULT</p>
<p class=indent>
Prevents Visual FoxPro from performing its default event or method processing for Visual FoxPro events and methods. For example, if the KeyPress event occurs, including NODEFAULT in the KeyPress procedure or function prevents Visual FoxPro from placing the key press into the Visual FoxPro keyboard buffer. This allows you to create a KeyPress procedure that lets you test which key is pressed before the key is sent to the keyboard buffer.</p>
<p class=indent>
NODEFAULT may be placed anywhere within the event or method procedure. Note that NODEFAULT may also be placed within an event or method procedure in the Form Designer.</p>
<p class=dt>
<i>cStatements<br>
</i> &nbsp; [ENDFUNC | ENDPROC]]...<br>
ENDDEFINE</p>
<p class=indent>
<i>cStatements</i> are the Visual FoxPro commands that are executed when an event or method is executed.</p>
<p class=indent>
Event and method functions and procedures can accept values by including a PARAMETERS or LPARAMETERS statement as the first executable line of the function or procedure.</p>
<p class=indent>
Unlike most Visual FoxPro keywords, you cannot abbreviate ENDFUNC and ENDPROC. This prevents conflicts with the ENDFOR and ENDPRINTJOB keywords.</p>
<p class=indent>
The following example demonstrates how to create an event procedure that displays a message when the command button is clicked. This event procedure overrides the default command button Click event.</p>
<pre><code>DEFINE CLASS MyClass AS Custom
 &nbsp; ADD OBJECT MyButton AS CommandButton
 &nbsp; ADD OBJECT MyList AS ListBox
 &nbsp; PROCEDURE MyButton.Click
 &nbsp;&nbsp;&nbsp;&nbsp; = MESSAGEBOX('This is my click event procedure')
 &nbsp; ENDPROC
ENDDEFINE
</code></pre>
<p class=label>
<b>Remarks</b></p>
<p>
User-defined classes are a set of commands placed in a program file, similar to a procedure. The commands that follow the class or subclass definition define the properties, events, and methods for the class or subclass.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot have normal executable program code included in a program file after procedures; only class definitions, procedures, and user-defined functions can follow the first DEFINE CLASS, PROCEDURE or FUNCTION command in the file.</p>
<p>
Class and subclass definitions created with DEFINE CLASS cannot be placed within structured programming commands, such as IF&nbsp;...&nbsp;ENDIF or DO CASE&nbsp;...&nbsp;ENDCASE. Nor can they be placed in loops, such as DO WHILE&nbsp;...&nbsp;ENDDO or FOR&nbsp;...&nbsp;ENDFOR.</p>
<p>
To create an object from a class or subclass definition, issue CREATEOBJECT(&nbsp;) with the class or subclass name.</p>
</BODY>
</HTML>

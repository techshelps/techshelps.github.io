<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Browser Methods</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngclass_browser_methods"></a><sup></sup>Class Browser Methods</h1>
<p>
<a href="lngclass_browser_methodssa.htm">See Also</a></p>
<p>
The following methods are associated with the Class Browser.</p>
<p class=dt>
<B><b>AddClass(&nbsp;)</b></B></p>
<p class=indent>
Copies a class from one class library (.vcx) file to another. Used after a drag-and-drop operation between instances of the Class Browser and dependent on the oSource property. If the specified class does not exist, a class is created.</p>
<p class=dt>
<B><b>AddFile(&nbsp;)</b></B></p>
<p class=indent>
Adds a class library (.vcx) or form (.scx) file to the Class Browser class list. If no parameters are passed, an AddFile dialog box appears by using the Class Browser GetFile(&nbsp;) method. If <i>lIgnoreRefresh</i> is true (.T.), the Class Browser class list is not refreshed. If you are adding multiple files, you can wait until all classes are added before refreshing the list.</p>
<p class=tl>
<B><b>Syntax:</b></B>  AddFile([<i>cFileName</i>][, <i>lIgnoreRefresh</i>])</P><p class=dt>
<B><b>AddIn(&nbsp;)</b></B></p>
<p class=indent>
Installs or removes the specified add-in to the Browser.dbf registration table.</p>
<p class=tl>
<B><b>Syntax:</b></B>  AddIn(<i>cName</i>[, <i>cProgram</i>] [, <i>cMethod</i>] [, <i>cFileFilter</i>] [, <i>cPlatform</i>][, <i>cComment</i>])</P><p class=tl>
<B><b>Arguments</b></B></P><ul type=disc>
<li>
<i>cName</i> Specifies the name of the add-in. Not case-sensitive; however, when displayed on a menu, the value appears as entered.<br><br></li>
<li>
<i>cProgram</i> Specifies the name of a program (.PRG), form (.scx), application (.APP), executable file (.EXE), or compiled program (.FXP) to run. If no extension is provided, the extension .PRG is assumed. If a specific class library (.vcx) and a name for a new class are provided, a new class is created in the library.<p class=tl>
<B><b>Note</b></B> If this argument is .NULL., the add-in is marked for deletion in Browser.dbf and disabled in the add-in shortcut menu.</P></li>
<li>
<i>cMethod</i> Specifies a method name to use as an event hook. If empty, the add-in appears on the menu.<br><br></li>
<li>
<i>cFileFilter</i> Specifies a list of class libraries and forms that enable the add-in. If empty, the add-in is available for all class libraries (.vcx) and forms (.scx).<br><br></li>
<li>
<i>cPlatform</i> Specifies the platform the add-in is available on. If empty, the add-in is available on all platforms supported by Visual FoxPro.<br><br></li>
<li>
<i>cComment</i> Specifies text stored in a memo field in the Browser.dbf.</li>
</ul>
<p class=dt>
<B><b>AddInMenu(&nbsp;)</b></B></p>
<p class=indent>
Expands the menu that displays the registered add-ins.</p>
<p class=dt>
<B><b>AddInMethod(&nbsp;)</b></B></p>
<p class=indent>
Executes any registered add-in for the specified object method.</p>
<p class=tl>
<B><b>Syntax:</b></B>  AddInMethod(<i>cObjMethod</i>)</P><p class=tl>
<B><b>Example:</b></B>  To change the default behavior of the Help button in the Class Browser, use the following code:</P><pre><code>_OBROWSER.AddInMethod("cmdHelp.click")
</code></pre>
<p class=dt>
<B><b>AutoRefresh(&nbsp;)</b></B></p>
<p class=indent>
Determines whether to refresh the display by checking for updated class library (.vcx) information in the selected class in the class list, and by checking the total number of records in the class library (.vcx) file being edited. This method runs when the Class Browser form is activated.</p>
<p class=dt>
<B><b>BinToInt(&nbsp;)</b></B></p>
<p class=indent>
Returns the integer equivalent of a string representing a binary value. For example, passing this method a <i>cBinaryValue</i> of “11001” would return 25. </p>
<p class=tl>
<B><b>Syntax:</b></B>  BinToInt([<i>cBinaryValue</i>])</P><p class=dt>
<B><b>CleanUpFile(&nbsp;)</b></B></p>
<p class=indent>
Removes records from the class library (.vcx) file associated with the selected class in the class list.</p>
<p class=dt>
<B><b>ClearBrowser(&nbsp;)</b></B></p>
<p class=indent>
Internal use only.</p>
<p class=dt>
<B><b>ClearClass(&nbsp;)</b></B></p>
<p class=indent>
Clears the class cache from memory with the CLEAR CLASS command for a specific class, or all classes displayed if <i>lClearAll</i> is set to true (.T.).</p>
<p class=tl>
<B><b>Syntax:</b></B>  ClearClass([<i>lClearAll</i>])</P><p class=dt>
<B><b>NewClass(&nbsp;)</b></B></p>
<p class=indent>
Creates a subclass of the selected class in the class list.</p>
<p class=dt>
<B><b>DeactivateMenu(&nbsp;)</b></B></p>
<p class=indent>
Deactivates the add-in popup menu.</p>
<p class=dt>
<B><b>DisplayMenu(&nbsp;)</b></B></p>
<p class=indent>
Displays the shortcut menu at the current mouse pointer location. If <i>tnMenuMode</i> is 0, the Class Browser form shortcut menu is displayed; if 1, the Class list shortcut menu; if 2, the Member list shortcut menu.</p>
<p class=tl>
<B><b>Syntax:</b></B>  DisplayMenu(<i>tnMenuMode</i>)</P><p class=dt>
<B><b>DoAddIn(&nbsp;)</b></B></p>
<p class=indent>
Executes the specified add-in of the current or specific record of the table with the BROWSER alias. </p>
<p class=tl>
<B><b>Syntax:</b></B>  DoAddIn([<i>cAddInName</i>])</P><p class=dt>
<B><b>FileMatch(&nbsp;)</b></B></p>
<p class=indent>
Compares the specified file against the specified file list to determine if the file is one associated with the add-in.</p>
<p class=tl>
<B><b>Syntax:</b></B>  FileMatch(<i>cFileName</i>, <i>cFileList</i>)</P><p class=dt>
<B><b>ExportClass(&nbsp;)</b></B></p>
<p class=indent>
Generates and displays the definition source code of the selected class or the selected file in the class list. </p>
<p class=tl>
<B><b>Syntax:</b></B>  ExportClass([<i>lShow</i>] [, <i>tcExportToFileName</i>])</P><p class=tl>
<B><b>Arguments</b></B></P><ul type=disc>
<li>
<i>lShow </i>Specifies whether to display the code. If the parameter <i>lShow</i> is true (.T.), the Class Browser window displays the code.<br><br></li>
<li>
<i>tcExportToFileName</i> Specifies the name of the file to receive the code.</li>
</ul>
<p class=dt>
<B><b>FindClass(&nbsp;)</b></B></p>
<p class=indent>
Finds class text within a class.</p>
<p class=tl>
<B><b>Syntax:</b></B>  FindClass([<i>cFind</i>])</P><p class=dt>
<B><b>FormAddObject(&nbsp;)</b></B></p>
<p class=indent>
Adds an instance of the selected class in the class list to an external form.</p>
<p class=tl>
<B><b>Syntax:</b></B>  FormAddObject(<i>oObject</i> [, <i>nXCoord</i>] [, <i>nYCoord</i>] [, <i>lActivateForm</i>] [, <i>lDesignMode</i>][, <i>lNoShow</i>] [, <i>lNoErrors</i>] [, <i>lBuilder</i>] [<i>, oForm</i>])</P><p class=tl>
<B><b>Arguments</b></B></P><ul type=disc>
<li>
<i>oObject</i> Specifies a reference to the destination container. The values can be either “command” for the Command window, “screen” for the Visual FoxPro desktop, or “new”. You can implement these options with the following commands:<pre><code>_oBrowser.FormAddObject(“command”)
_oBrowser.FormAddObject(“-screen”)
_oBrowser.FormAddObject(“new”)
</code></pre>
</li>
<li>
<i>nXCoord</i> Specifies the horizontal position of the object inside the container. If no value is passed, the current mouse position is used.<br><br></li>
<li>
<i>nYCoord</i> Specifies the vertical position of the object inside the container. If no value is passed, the current mouse position is used.<br><br></li>
<li>
<i>lActivateForm</i> If true (.T.), the destination form is activated when the object is added to it; if false (.F.), the Class Browser remains active.<br><br></li>
<li>
<i>lDesignMode</i> If true (.T.), the object reference is an object currently in the Form Designer or class designer.<br><br></li>
<li>
<i>lNoShow</i> If true (.T.), the object reference is an object currently in the Form Designer or class designer.<br><br></li>
<li>
<i>lNoErrors </i>Specifies whether errors generated at instantiation are ignored. If false (.F.), errors are displayed in the Class Browser. <br><br></li>
<li>
<i>lBuilder </i>Specifies<i> </i>whether a custom builder is launched after the object is added to a container.<br><br></li>
<li>
<i>oForm </i>Specifies<i> </i>the container to which an object is added. <i>oForm</i>, an optional parameter,<i> </i>is primarily used to contain the host object in design mode.</li>
</ul>
<p class=dt>
<B><b>FormatMethods(&nbsp;)</b></B></p>
<p class=indent>
Formats the text of generated methods in the display of the class definition code.</p>
<p class=tl>
<B><b>Syntax:</b></B>  FormatMethods(<i>cMethods</i>)</P><p class=dt>
<B><b>FormatProperties(&nbsp;)</b></B></p>
<p class=indent>
Formats the text of generated properties in the display of the class definition source code.</p>
<p class=tl>
<B><b>Syntax:</b></B>  FormatProperties(<i>cProperties</i> [, <i>lAddObjectMode</i>])</P><p class=dt>
<B><b>GetFile(&nbsp;)</b></B></p>
<p class=indent>
Opens the Class Browser GetFile(&nbsp;) dialog box. The GetFile(&nbsp;) method is used internally by the Open or Add buttons in the Class Browser. Whenever the Class Browser prompts for a class library (.vcx) or form (.scx), the GetFile(&nbsp;) method is called internally.</p>
<p class=tl>
<B><b>Syntax:</b></B>  GetFile([<i>cFileExt</i>])</P><p class=dt>
<B><b>GetTimeStamp(&nbsp;)</b></B></p>
<p class=indent>
Returns the character equivalent of a timestamp value. If no parameter is passed, returns the timestamp string of the currently selected file.</p>
<p class=tl>
<B><b>Syntax:</b></B>  GetTimeStamp([<i>ntimestamp</i>])</P><p class=dt>
<B><b>IndentText(&nbsp;)</b></B></p>
<p class=indent>
Indents a block of text one tab.</p>
<p class=tl>
<B><b>Syntax:</b></B>  IndentText(<i>cCode</i>)</P><p class=dt>
<B><b>IntToBin(&nbsp;)</b></B></p>
<p class=indent>
Returns a string representing a binary value that is the equivalent of an integer value. For example, passing this method a <i>nInteger</i> of 25 would return “11001”.</p>
<p class=tl>
<B><b>Syntax:</b></B>  IntToBin([<i>nInteger</i>])</P><p class=dt>
<B><b>ModifyClass(&nbsp;)</b></B></p>
<p class=indent>
Opens the selected class in the Class Designer.</p>
<p class=dt>
<B><b>MsgBox(&nbsp;)</b></B></p>
<p class=indent>
Displays the Class Browser message box. Similar to the Visual FoxPro <a href="lngmessageboxlp_rp.htm">MESSAGEBOX(&nbsp;)</a> function.</p>
<p class=tl>
<B><b>Syntax:</b></B>  MsgBox(<i>cMessage</i> [, <i>nType</i>] [, <i>cTitle</i>])</P><p class=dt>
<B><b>NewFile(&nbsp;)</b></B></p>
<p class=indent>
Creates a new class library (.vcx) file. If no parameters are passed, the Open dialog box is displayed. If parameters are provided, a new class library (.vcx) is created and added to the class list in Class Browser.</p>
<p class=tl>
<B><b>Syntax:</b></B>  NewFile([<i>cFileName</i>] [, <i>lOpenFile</i>])</P><p class=dt>
<B><b>OpenFile(&nbsp;)</b></B></p>
<p class=indent>
Opens an existing class library (.vcx) or form (.scx) file. If a file name is not provided, the Open dialog box appears.</p>
<p class=tl>
<B><b>Syntax:</b></B>  OpenFile([<i>cFileName</i>])</P><p class=dt>
<B><b>ProperBaseClass(&nbsp;)</b></B></p>
<p class=indent>
Returns the base class name in the proper case. For example, “combobox” would return as “ComboBox”.</p>
<p>
<B><b>Syntax:</b></B>  ProperBaseClass(<i>cBaseClass</i>)</p>
<p class=dt>
<B><b>RedefineClass(&nbsp;)</b></B></p>
<p class=indent>
Changes the parent class of the selected class in the class list.</p>
<p class=tl>
<B><b>Syntax:</b></B>  RedefineClass([<i>cAsClass</i>] [, <i>cClassLoc</i>])</P><p class=dt>
<B><b>RefreshButtons(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the Class Browser command buttons based on the file type.</p>
<p class=dt>
<B><b>RefreshClassIcon(&nbsp;)</b></B></p>
<p class=indent>
Reloads the class icon from the icon file. </p>
<p class=dt>
<B><b>RefreshClassList(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the class list.</p>
<p class=tl>
<B><b>Syntax:</b></B>  RefreshClassList([<i>cDefaultClass</i>] [, <i>lIgnoreTable</i>])</P><p class=dt>
<B><b>RefreshClassListSubclass(&nbsp;)</b></B></p>
<p class=indent>
For internal use only.</p>
<p class=dt>
<B><b>RefreshFileAttrib(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the file attribute status of the file name associated with the selected class in the class list.</p>
<p class=dt>
<B><b>RefreshCaption(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the Class Browser caption of a form.</p>
<p class=dt>
<B><b>RefreshDescriptions(&nbsp;)</b></B></p>
<p class=indent>
Internal use only. Refreshes the descriptions of classes and members.</p>
<p class=dt>
<B><b>RefreshMembers(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the Member tabs to display information associated with the selected class in the class list and, if provided, the specified member.</p>
<p class=tl>
<B><b>Syntax:</b></B>  RefreshMembers([<i>tcDefaultMember</i>])</P><p class=dt>
<B><b>RefreshParentClassBrowser(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the state of the ParentClass Browser toolbar.</p>
<p class=dt>
<B><b>RefreshPrefRecNo(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the Browser.dbf preference record pointer for the class library (.vcx) or form (.scx) file being edited.</p>
<p class=dt>
<B><b>RefreshRecNo(&nbsp;)</b></B></p>
<p class=indent>
Refreshes the current record pointer of the class library (.vcx) or form (.scx) table for the file of the selected class.</p>
<p class=dt>
<B><b>RemoveClass(&nbsp;)</b></B></p>
<p class=indent>
Removes the selected class in the class list from its associated class library (.vcx) file.</p>
<p class=tl>
<B><b>Syntax:</b></B>  RemoveClass([<i>lConfirm</i>])</P><p class=dt>
<B><b>RenameClass(&nbsp;)</b></B></p>
<p class=indent>
Changes the class name of the selected class in the class list.</p>
<p class=tl>
<B><b>Syntax:</b></B>  RenameClass([<i>cToClass</i>])</P><p class=dt>
<B><b>ResetDefaults(&nbsp;)</b></B></p>
<p class=indent>
Restores original display settings. This method is called when you choose Restore Defaults from the shortcut menu. </p>
<p class=dt>
<B><b>SavePreferences(&nbsp;)</b></B></p>
<p class=indent>
Saves current preference settings to the Browser.dbf registration table.</p>
<p class=dt>
<B><b>ScaleResize(&nbsp;)</b></B></p>
<p class=indent>
Scales the controls on the Class Browser form to fit after the form is resized using the Resize(&nbsp;) event.</p>
<p class=dt>
<B><b>SeekClass(&nbsp;)</b></B></p>
<p class=indent>
Moves the class list pointer to a specific class or index in the class list. Can use the numeric value of the visual position in the class list.</p>
<p class=tl>
<B><b>Syntax:</b></B>  SeekClass([<i>cClass</i>][, cClassLibrary])</P><p class=dt>
<B><b>SeekMember(&nbsp;)</b></B></p>
<p class=indent>
Moves the member list pointer to a specific member.</p>
<p class=tl>
<B><b>Syntax:</b></B>  SeekMember(<i>tcMember</i>)</P><p class=dt>
<B><b>SeekParentClass(&nbsp;)</b></B></p>
<p class=indent>
Displays the parent class of the selected class in the class list.</p>
<p class=dt>
<B><b>SetBusyState(&nbsp;)</b></B></p>
<p class=indent>
Sets the lBusyStatus property to true (.T.) or false (.F.) based on the parameter received; also sets the mouse pointer shape to an arrow or hourglass.</p>
<p class=tl>
<B><b>Syntax:</b></B>  SetBusyState(<i>lBusyState</i>)</P><p class=dt>
<B><b>SetFont(&nbsp;)</b></B></p>
<p class=indent>
Sets the font and font size used by the Class Browser for its form, controls, and dialog boxes. If you don’t specify a font name or size, SetFont(&nbsp;) opens the Get Font dialog box.</p>
<p class=tl>
<B><b>Syntax:</b></B>  SetFont([<i>cFontName</i>][, <i>nFontSize</i>][, <i>lFontBold</i>][, <i>lFontItalic</i>])</P><p class=dt>
<B><b>ShowMenu(&nbsp;)</b></B></p>
<p class=indent>
Displays a menu based on an array. If a menu is a single-dimension array, this method displays a list of all items in your menu. If the array is two-dimensional with an item and an action, it displays the menu items and when the item is selected, it executes the associated action.</p>
<p class=tl>
<B><b>Syntax:</b></B>  ShowMenu(<i>aMenu</i>[, <i>cOnSelection</i>])</P><p class=dt>
<B><b>TrimExt(&nbsp;)</b></B></p>
<p class=indent>
Truncates the file name extension.</p>
<p class=tl>
<B><b>Syntax:</b></B>  TrimExt(<i>cFileName</i> [, <i>lPlatformType</i>])</P><p class=dt>
<B><b>TrimFile(&nbsp;)</b></B></p>
<p class=indent>
Truncates the file name and returns only the file name and path.</p>
<p class=tl>
<B><b>Syntax:</b></B>  TrimFile(<i>cFileName</i> [, <i>lPlatformType</i>])</P><p class=dt>
<B><b>TrimPath(&nbsp;)</b></B></p>
<p class=indent>
Truncates the path name.</p>
<p class=tl>
<B><b>Syntax:</b></B>  TrimPath(<i>cFileName</i> [, <i>lTrimExt</i>] [, <i>lPlatformType</i>])</P><p class=dt>
<B><b>UpdateReferences(&nbsp;)</b></B></p>
<p class=indent>
Used to update references of classes (subclasses and object members) when renaming a class and when moving a class from one class browser to another.</p>
<p class=tl>
<B><b>Syntax:</b></B>  UpdateReferences(<i>tcOldClassLoc, tcOldClass, tcNewClassLoc, tcNewClass </i>[<i>, tlAllInstances</i>])</P><p class=tl>
<B><b>Arguments</b></B></P><ul type=disc>
<li>
<i>tcOldClassLoc</i> Specifies the original contents of the ClassLoc field in the .vcx or .scx file.<br><br></li>
<li>
<i>tcOldClass</i> Specifies the original contents of the Class field in the .vcx or .scx file.<br><br></li>
<li>
<i>tcNewClassLoc</i> Specifies the new contents of the ClassLoc field in the .vcx or .scx file..<br><br></li>
<li>
<i>tcNewClass</i> Specifies the new contents of the Class field in the .vcx or .scx file.<br><br></li>
<li>
<i>tlAllInstances</i> If true (.T.) all files in all Class Browser windows are updated. If false (.F.) only the files in the current Class Browser window are updated.</li>
</ul>
<p class=dt>
<B><b>VersionCheck(&nbsp;)</b></B></p>
<p class=indent>
Validates the open class library (.vcx) or form (.scx) file.</p>
<p class=tl>
<B><b>Syntax:</b></B>  VersionCheck([<i>lShowErrorMsg</i>])</P><p class=dt>
<B><b>ViewProperty(&nbsp;)</b></B></p>
<p class=indent>
Displays the value of a specific property of the selected class.</p>
<p class=tl>
<B><b>Syntax:</b></B>  ViewProperty(<i>cProperty</i>)</P><p class=dt>
<B><b>WildcardMatch(&nbsp;)</b></B></p>
<p class=indent>
Compares strings for a wildcard match with the filters specified in the Type box.</p>
<p class=tl>
<B><b>Syntax:</b></B>  WildcardMatch(<i>cMatchExpList</i>, <i>cExpressionSearched</i>)</P></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEFINE BAR Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngdefine_bar"></a><sup></sup>DEFINE BAR Command</h1>
<p>
<a href="lngdefine_barx.htm">Example</a> &nbsp; <a href="lngdefine_barsa.htm">See Also</a></p>
<p>
Creates a menu item on a menu created with DEFINE POPUP.</p>
<p class=label>
<b>Syntax</b></p>
<p>
DEFINE BAR <i>nMenuItemNumber1</i> | <i>SystemItemName</i><br>
OF <i>MenuName</i> PROMPT <i>cMenuItemText</i><br>
 &nbsp; [BEFORE <i>nMenuItemNumber2</i> | AFTER <i>nMenuItemNumber3</i>]<br>
 &nbsp; [FONT <i>cFontName</i> [, <i>nFontSize</i>]]<br>
 &nbsp; [STYLE <i>cFontStyle</i>]<br>
 &nbsp; [KEY <i>KeyLabel</i> [, <i>cKeyText</i>]]<br>
 &nbsp; [MARK <i>cMarkCharacter</i>]<br>
 &nbsp; [MESSAGE <i>cMessageText</i>]<br>
 &nbsp; [SKIP [FOR <i>lExpression</i>]]<br>
 &nbsp; [COLOR SCHEME <i>nSchemeNumber</i><br>
 &nbsp; | COLOR <i>ColorPairList</i>] </p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>nMenuItemNumber1</i></p>
<p class=indent>
Specifies the menu item number. The menu item number allows you to reference the menu item in other commands and functions.</p>
<p class=dt>
<i>SystemItemName</i></p>
<p class=indent>
Specifies a menu item on the Visual FoxPro system menu. For example, to provide access to the Print menu item, issue the following:</p>
<pre><code>DEFINE BAR _MFI_PRINT OF popMyPopup PROMPT "Print..."
</code></pre>
<p class=tl>
Not all Visual FoxPro system menu items are available. Use SYS(2013) to return a list of the Visual FoxPro system menu names that are available.</P><p class=dt>
OF <i>MenuName</i></p>
<p class=indent>
Specifies the name of the menu on which the menu items are placed.</p>
<p class=dt>
PROMPT <i>cMenuItemText</i></p>
<p class=indent>
Specifies the caption that appears on the menu item.</p>
<p class=tl>
You can create a separator bar by specifying a backslash and a dash (\-) for <i>cMenuItemText</i>. A separator bar is used to separate item groups on a menu. For example, including the following command in a menu definition creates a separator bar between the third and fifth menu items:</P><pre><code>DEFINE BAR 4 OF popMyPopup PROMPT '\-'
</code></pre>
<p class=tl>
You can create multi-column menus by specifying a backslash and a vertical bar (\|) at the beginning of <i>cMenuItemText</i>. The menu item starts a new column, and subsequent menu items are placed in the same column until another menu item beginning with \| is encountered. For example, including the following command in a menu definition creates a new column in the menu:</P><pre><code>DEFINE BAR 4 OF popMyPopup PROMPT '\|Start a new column'
</code></pre>
<p class=tl>
You can create an access key for a menu item by placing a backslash and a less-than sign (\&lt;) before the character to be the access key. For example:</P><pre><code>DEFINE POPUP popReceive
DEFINE BAR 1 OF popReceive PROMPT '\&lt;Invoices'
DEFINE BAR 2 OF popReceive PROMPT 'In\&lt;quiry'
ACTIVATE POPUP popReceive
</code></pre>
<p class=tl>
The user can press the I key to choose Invoices from the Receive menu and press the Q key to choose Inquiry from the same menu.</P><p class=dt>
BEFORE <i>nMenuItemNumber2</i></p>
<p class=indent>
Places a menu item before the menu item specified with <i>nMenuItemNumber2</i>.</p>
<p class=dt>
AFTER <i>nMenuItemNumber3</i></p>
<p class=indent>
Places a menu item after the menu item specified with <i>nMenuItemNumber3</i>.</p>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;In order for BEFORE or AFTER to have an effect, you must include the RELATIVE clause when you create the menu with DEFINE POPUP.</p><p class=tl>
You can also include _MFIRST and _MLAST in the BEFORE and AFTER clauses. If you include_MFIRST in the BEFORE clause, the menu item is the first item on the menu. If you include_MFIRST in the AFTER clause, the menu item is the second item on the menu. If you include_MLAST in the AFTER clause, the menu item is the last item on the menu. If you include_MLAST in the BEFORE clause, the menu item is the next-to-last item on the menu.</P><p class=tl>
Menus created with DEFINE POPUP RELATIVE don't reserve space for undefined menu items. For example, if you define items 1, 2, 4, and 5 on a menu, a space for item 3 is not reserved. You can later insert item 3. The menu expands to accommodate it.</P><p class=tl>
Run the following program examples and note the differences in the order and placement of the items on each menu:</P><pre><code>*** RELATIVE Example ***
DEFINE POPUP popRelatYes RELATIVE FROM 1,1
DEFINE BAR 4&nbsp; OF popRelatYes PROMPT '4444'
DEFINE BAR 3&nbsp; OF popRelatYes PROMPT '3333'
DEFINE BAR 2&nbsp; OF popRelatYes PROMPT '2222'
DEFINE BAR 1&nbsp; OF popRelatYes PROMPT '1111'
DEFINE BAR 6&nbsp; OF popRelatYes PROMPT '6666' BEFORE 4
ACTIVATE POPUP popRelatYes 

*** NON-RELATIVE Example ***
DEFINE POPUP popRelatNo FROM 1,10
DEFINE BAR 4 OF popRelatNo PROMPT '4444'
DEFINE BAR 3 OF popRelatNo PROMPT '3333'
DEFINE BAR 2 OF popRelatNo PROMPT '2222'
DEFINE BAR 1 OF popRelatNo PROMPT '1111'
DEFINE BAR 6 OF popRelatNo PROMPT '6666'
ACTIVATE POPUP popRelatNo 
</code></pre>
<p class=dt>
FONT <i>cFontName</i> [, <i>nFontSize</i>]</p>
<p class=indent>
Specifies a font for the menu item. <i>cFontName</i> specifies the name of the font, and <i>nFontSize</i> specifies the point size. For example, the following command creates a menu item in 12-point Courier font:</p>
<pre><code>DEFINE BAR 1 OF popReceive PROMPT '\&lt;Invoices' FONT 'Courier', 12
</code></pre>
<p class=tl>
If the font you specify is not available, a font with similar font characteristics is substituted. If you include the FONT clause but omit the point size <i>nFontSize</i>, a 10-point font is used.</P><p class=dt>
STYLE <i>cFontStyle</i></p>
<p class=indent>
Specifies a font style for the menu item. If you omit the STYLE clause, the normal font style is used. If the font style you specify is not available, the normal font style is used.</p>
<p class=tl>
The font styles you can specify with <i>cFontStyle</i> are as follows:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><b>Character</b></td>
<td class=label width=74%><b>Font style</b></td>
</tr>
<tr valign=top>
<td width=26%>B</td>
<td width=74%>Bold</td>
</tr>
<tr valign=top>
<td width=26%>I</td>
<td width=74%>Italic</td>
</tr>
<tr valign=top>
<td width=26%>N</td>
<td width=74%>Normal</td>
</tr>
<tr valign=top>
<td width=26%>Q</td>
<td width=74%>Opaque</td>
</tr>
<tr valign=top>
<td width=26%>–</td>
<td width=74%>Strikeout </td>
</tr>
<tr valign=top>
<td width=26%>T</td>
<td width=74%>Transparent</td>
</tr>
<tr valign=top>
<td width=26%>U</td>
<td width=74%>Underline</td>
</tr>
</table><br>
<p class=tl>
You can include more than one character to specify a combination of font styles. For example, the following command specifies Bold Italic:</P><pre><code>DEFINE BAR 1 OF popReceive PROMPT '\&lt;Invoices' STYLE 'BI'
</code></pre>
<p class=dt>
KEY <i>KeyLabel</i> [, <i>cKeyText</i>]</p>
<p class=indent>
Specifies an access key or key combination for a menu item. The menu does not have to be activated in order for the menu item to be chosen, unlike when you assign an access key using a backslash and a less-than sign (\&lt;).</p>
<p class=tl>
For a list of available keys and key combinations and their key label names, see <a href="lngon_key_label.htm">ON KEY LABEL</a>.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;If a keyboard macro is already defined with the same key label, the keyboard macro takes precedence, and the menu item cannot be chosen with the specified key or key combination.</p><p class=tl>
Include <i>cKeyText</i> to replace the key label with your own text. You can use any character in the <i>cKeyText</i> parameter; for example, you can use the text "^B" to indicate a key label of CTRL+B. For example, including KEY CTRL+B places the text CTRL+B on the menu to the right of the menu item name, but specifying KEY CTRL+B, "^B" places the text ^+B on the menu. You can suppress the display of a key label by specifying an empty string for <i>cKeyText</i>.</P><p class=dt>
MARK <i>cMarkCharacter</i></p>
<p class=indent>
Specifies a mark character that appears to the left of the menu item. MARK can be included to change the default mark character to a character specified with <i>cMarkCharacter</i>. If <i>cMarkCharacter</i> includes more than one character, only the first character is used as the mark character.</p>
<p class=tl>
The default mark character is&nbsp; a check.</P><p class=tl>
The MARK clause is ignored and the default mark character is used if the menu containing the menu item is integrated into the Visual FoxPro system menu. Also, the MARK clause is ignored if FoxFont isn't the font for the main Visual FoxPro window or the user-defined window in which the menu containing the menu item is placed.</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Specifying a mark character doesn't mark a menu item. Use SET MARK OF to mark a menu item.</p><p class=tl>
Mark characters specified in DEFINE BAR take precedence over mark characters specified with MARK in DEFINE POPUP. SET MARK OF is used to toggle mark characters on or off, and can also be used to specify a mark character for an individual menu item or for all menu items.</P><p class=dt>
MESSAGE <i>cMessageText</i></p>
<p class=indent>
Displays a message when the user selects a menu item. The message is placed in the graphical status bar. If the graphical status bar is turned off with SET STATUS BAR OFF, the message is centered on the last line of the main Visual FoxPro window.</p>
<p class=dt>
SKIP [FOR <i>lExpression</i>]</p>
<p class=indent>
Specifies a condition whereby if <i>lExpression</i> evaluates to true (.T.), the menu item is disabled, preventing the user from choosing it; if false (.F.), the menu item is enabled. A disabled menu item appears in the disabled colors.</p>
<p class=tl>
You can also disable a menu item by placing a backslash (\) before the text of the prompt. For example:</P><pre><code>DEFINE BAR 1 OF popReceive PROMPT '\Invoices'
</code></pre>
<p class=tl>
A menu item disabled with SKIP or \ cannot be selected. Menus you create that include SKIP FOR expressions may not behave properly when the spelling checker or wizards are active.</P><p class=tl>
SKIP FOR expressions typically depend on the value of skip variables, but the skip variables are not visible to your menus when the spelling checker or wizards are active. In the initialization code of the spelling checker and wizard applications (SPELLCHK.APP and GENGRAPH.APP respectively), PRIVATE ALL is intentionally issued. This hides skip variables from user-defined menus and causes an error message when you choose a menu.</P><p class=tl>
To correct this situation, the following code is placed at the beginning of the spelling checker and wizard applications:</P><pre><code>IF TYPE("_memvarmask") = "C" and !EMPTY(_memvarmask)
 &nbsp; PRIVATE ALL EXCEPT &amp;_memvarmask
ELSE
 &nbsp; PRIVATE ALL
ENDIF
</code></pre>
<p class=tl>
Suppose a certain menu item should be skipped when the variable named "skipvar" evaluates to true. You should include the following lines in your menu startup code to take advantage of the _MEMVARMASK variable:</P><pre><code>PUBLIC _memvarmask
_memvarmask = "skipvar"
STORE .T. TO skipvar&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; Skip initially.
</code></pre>
<p class=tl>
To create a set of skip variables, include the following lines in your menu startup code:</P><pre><code>PUBLIC _memvarmask
_memvarmask = "skip*"
STORE .T. TO skipthis, skipthat&nbsp; &amp;&amp; Skip initially.
</code></pre>
<p class=tl>
When you run the spelling checker and wizards, they don't hide variables in SKIP FOR expressions, preventing the error messages you may experience when the spelling checker or wizards are active.</P><p class=tl>
Note that _MEMVARMASK isn't a system variable.</P><p class=dt>
COLOR SCHEME <i>nSchemeNumber</i></p>
<p class=indent>
Specifies the colors for an individual menu item, overriding the default colors or the colors specified with DEFINE POPUP.</p>
<p class=dt>
COLOR <i>ColorPairList</i></p>
<p class=indent>
Specifies the colors for an individual menu item, overriding the default colors or the colors specified with DEFINE POPUP. You can specify the colors of all menu items, mark characters, and messages.</p>
<p class=tl>
By default, the colors of menu items are determined by color scheme 2 of the current color set.</P><p class=tl>
For more information on color schemes and color pairs, see the <a href="lngcolors_overview.htm">Colors Overview</a> topic.</P><p class=label>
<b>Remarks</b></p>
<p>
DEFINE BAR is used with DEFINE POPUP to create menus. A menu is created and assigned a name with DEFINE POPUP. Menu items are placed on the menu with a series of DEFINE BAR commands.</p>
<p>
If you use the <a href="wndmenu_designer.htm">Menu Designer</a> to create your menu, you may not have to use these commands at all. The Menu Designer automatically creates the commands for your menu. The Menu Designer uses the Visual FoxPro system menu, which you can then modify by adding your own menu items. For more information on creating menus, see "Creating a Menu System" in Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a>, in the <i>Programmer's Guide</i>.</p>
<p>
You can also create a menu that contains records or fields from a table or a list of files available on disk. For more information, see the PROMPT FIELD, PROMPT STRUCTURE and PROMPT FILES clauses in <a href="lngdefine_popup.htm">DEFINE POPUP</a>.</p>
<p>
Use ON BAR to create a cascading submenu for a menu item.</p>
</BODY>
</HTML>

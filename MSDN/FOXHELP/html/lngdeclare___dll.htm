<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DECLARE - DLL Command</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="lngdeclare___dll"></a><sup></sup>DECLARE – DLL Command</h1>
<p>
<a href="lngdeclare___dllx.htm">Example</a> &nbsp; <a href="lngdeclare___dllsa.htm">See Also</a></p>
<p>
Registers a function in an external shared library. Libraries are 32-bit dynamic link library (.DLL) files.</p>
<p class=label>
<b>Syntax</b></p>
<p>
DECLARE [<i>cFunctionType</i>] <i>FunctionName</i> IN <i>LibraryName</i> [AS <i>AliasName</i>]<br>
 &nbsp; [<i>cParamType1</i> [@] <i>ParamName1</i>,<br>
 &nbsp;&nbsp;&nbsp;&nbsp; <i>cParamType2</i> [@] <i>ParamName2</i>, ...]</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>cFunctionType</i></p>
<p class=indent>
Indicates the data type of the return value from the shared library, if any. If the function does not return a value, omit <i>cFunctionType</i>.</p>
<p class=tl>
<i>cFunctionType</i> can assume the following values:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><i>cFunctionType</i></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>SHORT</td>
<td width=74%>16-bit integer</td>
</tr>
<tr valign=top>
<td width=26%>INTEGER</td>
<td width=74%>32-bit integer</td>
</tr>
<tr valign=top>
<td width=26%>SINGLE</td>
<td width=74%>32-bit floating point</td>
</tr>
<tr valign=top>
<td width=26%>DOUBLE</td>
<td width=74%>64-bit floating point</td>
</tr>
<tr valign=top>
<td width=26%>LONG</td>
<td width=74%>32-bit long integer</td>
</tr>
<tr valign=top>
<td width=26%>STRING</td>
<td width=74%>Character string</td>
</tr>
</table><br>
<p class=dt>
<i>FunctionName</i></p>
<p class=indent>
Specifies the name of the shared library function to register in Visual FoxPro. Function names passed in this parameter are case-sensitive.</p>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;A DLL function name may not be the same as stated in the Win32 API manual. For example, the MessageBox function should be named MessageBoxA (for single-byte character), and MessageBoxW (for UNICODE). If Visual FoxPro cannot locate the DLL function you specify with <i>FunctionName</i>, the letter A is appended to the end of the function name and Visual FoxPro searches again for the function with the new name.</p><p class=tl>
If the shared library function you specify has the same name as a Visual FoxPro function or is not a legal Visual FoxPro name, use the AS clause to assign an alias to the function when you register it, as described later in this topic.</P><p class=dt>
IN <i>LibraryName</i></p>
<p class=indent>
Specifies the name of the external shared library containing the function specified with <i>FunctionName</i>.</p>
<p class=tl>
If you specify WIN32API for the <i>LibraryName</i>, Visual FoxPro searches for the 32-bit Windows .dll function in Kernel32.dll, Gdi32.dll, User32.dll, Mpr.dll, and Advapi32.dll.</P><p class=dt>
AS <i>AliasName</i></p>
<p class=indent>
Specifies an alias name for a shared library function name that has the same name as a Visual FoxPro function or is not a legal Visual FoxPro name. <i>AliasName</i> should not be a Visual FoxPro reserved word or the name of a shared library function already registered with Visual FoxPro.</p>
<p class=tl>
If you assign alias to the function, use the alias when calling the shared library function. <i>AliasName</i> is not case-sensitive.</P><p class=dt>
<i>cParameterType1</i> [@] <i>ParamName1</i>, <i>cParameterType2</i> [@] <i>ParamName2</i>, ...</p>
<p class=indent>
Specifies the parameter types passed to the shared library function.</p>
<p class=tl>
<i>cParameterType</i> is required and specifies the data type of any parameters that the shared library function expects to have passed to it. <i>cParameterType</i> may be one of the following:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=26%><i>cParameterType</i></td>
<td class=label width=74%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=26%>INTEGER</td>
<td width=74%>32-bit integer</td>
</tr>
<tr valign=top>
<td width=26%>SINGLE</td>
<td width=74%>32-bit floating point</td>
</tr>
<tr valign=top>
<td width=26%>DOUBLE</td>
<td width=74%>64-bit floating point</td>
</tr>
<tr valign=top>
<td width=26%>LONG</td>
<td width=74%>32-bit long integer</td>
</tr>
<tr valign=top>
<td width=26%>STRING</td>
<td width=74%>Character string</td>
</tr>
</table><br>
<p class=tl>
Visual FoxPro generates an error if the parameters are not of the type the shared library function expects. Null values can be passed as empty character strings.</P><p class=tl>
To pass a parameter by reference when you call the function, you must include @ after the parameter <i>cParameterType</i> in this command, and before the corresponding variable in the calling function. If you don't include @ in DECLARE, in the calling function, or in both, the parameter is passed by value. For information about shared library functions that require @ to pass parameters by reference, see the programmer's guide for your operating system or environment (for example, refer to the Microsoft <i>Win32 Programmer's Guide</i> for information on passing parameters to Windows DLLs).</P><p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The parameter names <i>ParamName1</i>, <i>ParamName2,</i> and so on, are optional, and are not used by Visual FoxPro or the shared library function. You can include them as a reminder of the names and types of parameters the function receives.</p><p class=label>
<b>Remarks</b></p>
<p>
Before you can call a shared library function from within Visual FoxPro, you must issue DECLARE with the name of the function, the name of the shared library containing the function, and the parameter types the function expects to receive.</p>
<p>
For backward compatibility, Visual FoxPro allows calls to external API libraries using the SET LIBRARY command. (Using SET LIBRARY, you can access functions in Foxtools.fll). However, using DECLARE is the preferred method to register shared library functions.</p>
<p>
For further information about calling shared library functions, see the programmer's guide for your operating system or environment (for example, refer to the Microsoft <i>Win32 Programmer's Guide</i> for information on calling DLLs).</p>
<p>
Issue DISPLAY STATUS or LIST STATUS to display the names of registered functions. Issue CLEAR ALL or CLEAR DLLS to remove registered functions from memory.</p>
</BODY>
</HTML>

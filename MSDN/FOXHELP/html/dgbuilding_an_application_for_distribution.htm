<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building an Application for Distribution</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgbuilding_an_application_for_distribution"></a><sup></sup>Chapter 25: Building an Application for Distribution</h1>
<p>
Building an application for distribution is similar to developing a standard Visual FoxPro application. You work in the Visual FoxPro development environment as usual, but then you create an executable file or Automation server (a COM component) and test it in the run-time environment. You then distribute your application and any related files to your distribution sites.</p>
<p>
This chapter describes changes you need to make to prepare an application for distribution, as well as some suggested changes that help make a distributed application look unique.</p>
<p>
This chapter addresses:</p>
<ul type=disc>
<li>
<a href="#dgthe_distribution_process">The Distribution Process</a></li>
<li>
<a href="#dgpreparing_an_application_for_distribution">Preparing an Application for Distribution</a></li>
<li>
<a href="#dgcustomizing_an_application_for_distribution">Customizing an Application for Distribution</a></li>
<li>
<a href="#dgpreparing_to_make_distribution_disks">Preparing to Make Distribution Disks</a></li>
</ul>

<h2><a name="dgthe_distribution_process"></a>The Distribution Process</h2>
<p>
The following list identifies the steps you need to follow to distribute a Visual FoxPro application:</p>
<ul type=disc>
<li>
Create and debug the application using the Visual FoxPro development environment.</li>
<li>
Prepare and customize your application for the run-time environment.&nbsp; For details, see <a href="#dgcustomizing_an_application_for_distribution">Customizing an Application for Distribution</a> and <a href="#dgpreparing_an_application_for_distribution">Preparing an Application for Distribution</a>.<p class=atl>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Certain development environment features aren’t available in the run-time environment and must be removed from your application. These features are listed in <a href="#dgremoving_restricted_visual_foxpro_features_and_files">Removing Restricted Visual FoxPro Features and Files</a> later in this chapter.</p></li>
<li>
Create documentation and online Help. For more information about creating Help for your application, see Part 7, <a href="dgcreating_help_files.htm">Creating Help Files</a>.</li>
<li>
Build an application or executable file. For more information about building an application, see Chapter 13, <a href="dgcompiling_an_application.htm">Compiling an Application</a>.</li>
<li>
Create a distribution directory containing all the files a user needs to run your application.</li>
<li>
Create distribution disks and an installation routine using the <a href="wizsetup_wizard.htm">Setup Wizard</a>. For more information, see Chapter 26, <a href="dgcreating_distribution_disks.htm">Creating Distribution Disks</a>.</li>
<li>
Package and distribute your application disks and any printed documentation.</li>
</ul>

<h2><a name="dgpreparing_an_application_for_distribution"></a>Preparing an Application for Distribution</h2>
<p>
The following sections describe the steps you might need to take to prepare your application for the run-time environment. These steps include:</p>
<ul type=disc>
<li>
Choosing the type of build.</li>
<li>
Considering environment issues.</li>
<li>
Ensuring correct run-time behavior.</li>
<li>
Including resources in your application.</li>
<li>
Removing restricted features and files.</li>
<li>
Customizing your application.</li>
</ul>
<h3>Choosing the Type of Build</h3>
<p>
Before you can distribute your application, you must build either an application file, with an .app extension, or an executable file, with an .exe extension. The following table lists the differences between the builds.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Build Type</b></td>
<td class=label width=62%><b>Characteristics</b></td>
</tr>
<tr valign=top>
<td width=38%>Application (.app) file</td>
<td width=62%>10K to 15K smaller than an .exe file.<br>
User must own a copy of Visual FoxPro.</td>
</tr>
<tr valign=top>
<td width=38%>Executable (.exe) file</td>
<td width=62%>Application includes the Visual FoxPro loader so users don’t need to own Visual FoxPro. You must provide the two support files Vfp6r.dll and Vfp6renu.dll (EN denotes the English version). These files must be placed in the same directory as the executable file or along the MS-DOS path. See <a href="lngbuild_exe.htm">BUILD EXE</a> for more information about creating and distributing executables.</td>
</tr>
<tr valign=top>
<td width=38%>OLE DLL</td>
<td width=62%>Used to create a file that can be called by other applications. For details about using this build option, see Chapter 16, <a href="dgadding_ole.htm">Adding OLE</a>.</td>
</tr>
</table><br>
<p>
When you choose the type of build, consider the size of your final application file and whether your users own Visual FoxPro.</p>
<h3>Considering Hardware, Memory, and Network Issues</h3>
<p>
You should consider and test the minimum environment your application can operate in, including the amount of disk space and memory. The results of your testing and the resolution of other issues covered in this chapter can help determine the type of build you choose, the files you include with your application, and the way you structure your distribution directory.</p>
<p>
The applications you create have the same hardware, memory, and network requirements as Visual FoxPro. For more information on those requirements, see “System Requirements” in Chapter 1, <a href="iginstalling_visual_foxpro.htm">Installing Visual FoxPro</a>, in the <i>Installation Guide</i>. For additional information on creating applications for multiuser environments, see Chapter 17, <a href="dgprogramming_for_shared_access.htm">Programming for Shared Access</a>.</p>
<p>
An executable application file always checks for the presence of the Visual FoxPro run-time library, Vfp6r.dll. To run an application .exe file using the development version of Visual FoxPro, you must force the application to use the Visual FoxPro .exe file instead.</p>
<p class=label>
<b>To run an executable application in Visual FoxPro</b>
<ul type=disc>
<li>
Start Visual FoxPro, and then from the <b>Project</b> menu, choose <b>Do</b>. In the <a href="cmddo_dialog_box.htm">Do</a> dialog box, select your application’s .exe file name.<p class=tl>
-or-</P></li>
<li>
In the <a href="wndcommand_window.htm">Command</a> window, enter <a href="lngdo.htm">DO</a> followed by the name of your application’s .exe file name.<p class=tl>
-or-</P></li>
<li>
In the command line that starts Visual FoxPro, specify the&nbsp;E switch. For example, if your application is called MYAPP, you can run it with the following command line:<pre><code>MYAPP.EXE -E
</code></pre>
<p class=tl>
This command line switch forces the application to use the executable file Vfp6.exe. For this switch to work, Vfp6.exe must be in the search path.</P></li>
</ul>

<h3><a name="dgensuring_correct_run_time_behavior"></a>Ensuring Correct Run-Time Behavior</h3>
<p>
An application consisting only of modeless forms will not function properly in a run-time environment unless you provide a READ EVENTS command. You can ensure that the application runs properly by adding a calling program or setting the WindowType property.</p>
<p class=label>
<b>To run a form in a run-time environment</b>
<ul type=disc>
<li>
Run the form from a program containing a <a href="lngread_events.htm">READ EVENTS</a> command.<p class=tl>
-or-</P></li>
<li>
Set the form’s <a href="lngwindowtype_property.htm">WindowType</a> property to <b>Modal</b>.</li>
</ul>
<p>
Some Visual FoxPro applications rely heavily on Visual FoxPro system menus. At run time, some menus and commands are unavailable, and without a provision for a READ EVENTS command, a menu-driven application ends as quickly as it starts. Use the following section to review any menus you include in your application.</p>
<p>
For more information on structuring an application with the READ EVENTS command, see “Controlling the Event Loop” and “Examples of How to Structure an Application” in Chapter 13, <a href="dgcompiling_an_application.htm">Compiling an Application</a>.</p>
<h4>Menu Options</h4>
<p>
If you use the Visual FoxPro system menu, your application file includes only the following default menus and menu commands.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Menu</b></td>
<td class=label width=75%><b>Menu items</b></td>
</tr>
<tr valign=top>
<td width=25%>File</td>
<td width=75%>Close, Save, Save As, Exit</td>
</tr>
<tr valign=top>
<td width=25%>Edit</td>
<td width=75%>Undo, Redo, Cut, Copy, Paste, Paste Special, Select All, Find, Replace</td>
</tr>
<tr valign=top>
<td width=25%>Window</td>
<td width=75%>Arrange All, Hide, Hide All, Show All, Clear, Cycle, all open windows</td>
</tr>
<tr valign=top>
<td width=25%>Help</td>
<td width=75%>Contents, Search for Help on, Technical Support, About Visual FoxPro</td>
</tr>
</table><br>
<p>
You can disable or remove any of the default menus and menu commands, or add your own menus and menu commands to run-time applications.</p>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;If your menu system works in the development environment but closes prematurely in your application, make sure you have a <a href="lngread_events.htm">READ EVENTS</a> command active while your menu system is running. Also be sure to include a <a href="lngclear.htm">CLEAR EVENTS</a> command when you exit the menu system.</p>
<p>
For more information about customizing menus, see Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a>.</p>
<h3>Including Resources in Your Applications</h3>
<p>
Visual FoxPro provides several resource files that extend the basic functionality of your applications, including FOXUSER resource files, API libraries, and ActiveX controls. If you use these files, you must include them in your project or distribution tree.</p>

<h4><a name="dgincluding_foxuser_resource_files"></a>Including FOXUSER Resource Files</h4>
<p>
Visual FoxPro resource files store useful information for your application, including window positions, Browse window configurations, and label definitions. If your application relies on specific settings for any of these resource items, you must also distribute the FOXUSER database and memo files or the resource files you create specifically for your application. These resource files consist of a Visual FoxPro table with an associated memo file, usually named Foxuser.dbf and Foxuser.fpt.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The FOXUSER resource file isn't the same as the locale-specific resource file that contains dialog boxes and error messages. The FOXUSER resource file stores application information such as macros you've defined; the locale-specific resource file stores system text strings. For more information, see <a href="#dgincluding_a_locale_specific_resource_file">Including a Locale-Specific Resource File</a> later in this chapter.</p>
<h4>Including External Library Files</h4>
<p>
If your application includes external library files such as ActiveX controls (.ocx files) or Visual FoxPro API libraries (.fll files), use the <a href="wizsetup_wizard.htm">Setup Wizard</a> to ensure they're placed in the appropriate directory. You can distribute the Visual FoxPro file Foxtools.fll with your applications. For more information on creating external libraries to access the Visual FoxPro API, see Part 9, <a href="dgaccessing_apis.htm">Accessing APIs</a>.</p>

<h4><a name="dgincluding_activex_components"></a>Including COM Components</h4>
<p>
If you include ActiveX controls or have created a Automation server (a COM component) as part of your application, include any .ocx files in your project and ensure the necessary support files are installed on the user’s machine in the Windows system directory. Note that you can only distribute ActiveX controls for which you are licensed. For Automation servers, you must also include registration files, such as type libraries (.tlb files) and registry files (.vbr files), with your application.</p>
<p>
If you use the <a href="wizsetup_wizard.htm">Setup Wizard</a> to create the distribution disks, you can include these files automatically. In Step 6, make sure the ActiveX column contains check marks for the ActiveX controls you’re shipping. When you do this, the Setup program created by the Setup Wizard will ensure that COM components are registered properly on the user’s computer when the application is installed. For more information on the Setup Wizard, see Chapter 26, <a href="dgcreating_distribution_disks.htm">Creating Distribution Disks</a></p>
<p>
All users can run forms containing ActiveX controls; however, your application cannot accomplish certain tasks if it is running under the run-time version of Visual FoxPro. Remember the following guidelines:</p>
<ul type=disc>
<li>
Your application must be running under a full version of Visual FoxPro to change forms, classes, or subclasses that include ActiveX controls.</li>
<li>
Your application must be running under a full version of Visual FoxPro to add ActiveX controls to forms at run time. For example, the full version of Visual FoxPro is required to add the Outline control to a form by running the following code:<pre><code>PUBLIC frmOleNewForm
frmOleNewForm = CREATEOBJECT("form")
frmOleNewForm.Show
frmOleNewForm.ScaleMode = 3
frmOleNewForm.Addobject("NewOutline","OLEControl",;
"MSOutl.Outline")
</code></pre>
<p class=atl>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When a form is closed, controls added at run time aren't saved.</p></li>
<li>
Your application can be running under either the run-time or full version of Visual FoxPro to add subclassed ActiveX controls to a form at run time. For example, you can define the <code>RedOutline</code> subclass from the <code>Outline</code> class, and distribute the subclass in Olelib.vcx; all users can then add the <code>RedOutline</code> control to a form by running the following code:<pre><code>PUBLIC frmOleNewForm
frmOleNewForm = CREATEOBJECT("form")
frmOleNewForm.Show
frmOleNewForm.ScaleMode = 3
SET CLASSLIB TO CURR() + OLELIB.VCX
frmOleNewForm.Addobject("NewOutline","RedOutline")
</code></pre>
</li>
</ul>
<h4>Including a Configuration File</h4>
<p>
The configuration file, Config.fpw, can establish many default Visual FoxPro settings. For instance, you can change the Visual FoxPro title, the background color, and the way a user navigates with the keyboard.</p>
<p>
If you want the configuration file to be read-only, place it in your project and mark it as included. If you want the configuration to be modifiable, place the file in your project and mark it as excluded. Then distribute the configuration file with your application or executable file, as a separate file. By default, Visual FoxPro looks for a configuration file named Config.fpw. However, you can specify a different configuration file name using the -C command-line switch when starting Visual FoxPro.</p>
<p>
For more information about options that you can set in the configuration file, see “Using a Configuration File” in Chapter 3, <a href="igconfiguring_visual_foxpro.htm">Configuring Visual FoxPro</a>, in the <i>Installation Guide</i>.</p>

<h4><a name="dgincluding_a_locale_specific_resource_file"></a>Including a Locale-Specific Resource File</h4>
<p>
If you're distributing your application along with the run-time version of Visual FoxPro, you might need to include a locale-specific <i>resource file</i>. This file contains the dialog boxes and other user-interface elements that Visual FoxPro uses to interact with the user. There's a different run-time resource file for each language in which Visual FoxPro is available.</p>
<p>
For more information about using locale-specific run-time files, see “Distributing Locale-Specific Run-Time Files” in Chapter 18, Developing International Applications.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The locale-specific resource file isn't the same as the FOXUSER resource file, which stores application information such as macros you've defined. The locale-specific resource file stores system text strings. For more information, see <a href="#dgincluding_foxuser_resource_files">Including FOXUSER Resource Files</a> earlier in this chapter.</p>
<h4>Including All Your Files</h4>
<p>
You can freely reproduce and distribute some Visual FoxPro files, graphics, and programs with the applications you create. For detailed information, see <a href="#dgremoving_restricted_visual_foxpro_features_and_files">Removing Restricted Visual FoxPro Features and Files</a> later in this chapter.</p>
<p>
Before you build your application, make sure that your project includes the necessary files for your application as well as any additional resource files, such as graphics files or templates.</p>
<p>
The following table list files you can add to your project.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>If you are</b></td>
<td class=label width=52%><b>Add these files to your projects</b></td>
</tr>
<tr valign=top>
<td width=48%>Applying a custom configuration to your application</td>
<td width=52%>Config.fpw</td>
</tr>
<tr valign=top>
<td width=48%>Applying custom settings to your application</td>
<td width=52%>Foxuser.dbf and Foxuser.fpt</td>
</tr>
<tr valign=top>
<td width=48%>Distributing a .dbf-style Help file</td>
<td width=52%>Your .dbf-style Help file</td>
</tr>
</table><br>
<p class=label>
<b>To add files to your application</b>
<ul type=disc>
<li>
Include the files in your project.<p class=tl>
If you don't want to change them in the distributed application, place the files in your project and mark them as included. The files are then read-only and cannot be modified.</P><p class=tl>
-or-</P></li>
<li>
Add the files to your application directory. For details, see Chapter 26, <a href="dgcreating_distribution_disks.htm">Creating Distribution Disks</a>.<p class=tl>
If you want to modify them, place the files in your project and mark them as excluded. Then distribute them with your application as separate files.</P></li>
</ul>
<p>
For more information about creating a project, and including or excluding files in a project, see Chapter 13, <a href="dgcompiling_an_application.htm">Compiling an Application</a>.</p>

<h3><a name="dgremoving_restricted_visual_foxpro_features_and_files"></a>Removing Restricted Visual FoxPro Features and Files</h3>
<p>
The development environment of Visual FoxPro contains many features and files that are licensed for your use only. If your application contains any of these features or files, remove them.</p>
<h4>Restricted Visual FoxPro Features</h4>
<p>
You cannot include the following Visual FoxPro menus and their menu commands in a distributed executable file.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Restricted menus</b></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%>Database</td>
<td width=52%>Project</td>
</tr>
<tr valign=top>
<td width=48%>Form</td>
<td width=52%>Query</td>
</tr>
<tr valign=top>
<td width=48%>Menu</td>
<td width=52%>Table</td>
</tr>
<tr valign=top>
<td width=48%>Program</td>
<td width=52%></td>
</tr>
</table><br>
<p>
If your application includes the following commands, it will return the error “Feature not available.” Although you cannot include commands that create or modify menus, forms, or queries, you can run compiled menu, form, or query programs in your application.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Unavailable commands</b></td>
<td class=label width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngbuild_app.htm">BUILD APP</a></td>
<td width=52%><a href="lngmodify_form.htm">MODIFY FORM</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngbuild_exe.htm">BUILD EXE</a></td>
<td width=52%><a href="lngmodify_menu.htm">MODIFY MENU</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngbuild_project.htm">BUILD PROJECT</a></td>
<td width=52%><a href="lngmodify_procedure.htm">MODIFY PROCEDURE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcompile.htm">COMPILE</a></td>
<td width=52%><a href="lngmodify_project.htm">MODIFY PROJECT</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcreate_form.htm">CREATE FORM</a></td>
<td width=52%><a href="lngmodify_query.htm">MODIFY QUERY</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcreate_menu.htm">CREATE MENU</a></td>
<td width=52%><a href="lngmodify_screen.htm">MODIFY SCREEN</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcreate_query.htm">CREATE QUERY</a></td>
<td width=52%><a href="lngmodify_structure.htm">MODIFY STRUCTURE</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcreate_screen.htm">CREATE SCREEN</a></td>
<td width=52%><a href="lngmodify_view.htm">MODIFY VIEW</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcreate_view.htm">CREATE VIEW</a></td>
<td width=52%><a href="lngsuspend.htm">SUSPEND</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngmodify_connection.htm">MODIFY CONNECTION</a></td>
<td width=52%><a href="lngset_step.htm">SET STEP</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngmodify_database.htm">MODIFY DATABASE</a></td>
<td width=52%></td>
</tr>
</table><br>
<p>
If used in a distributed application, the following commands are ignored.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Ignored commands</b></td>
<td class=label width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngset_debug.htm">SET DEBUG</a></td>
<td width=52%><a href="lngset_dohistory.htm">SET DOHISTORY</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngset_development.htm">SET DEVELOPMENT</a></td>
<td width=52%><a href="lngset_echo.htm">SET ECHO</a></td>
</tr>
</table><br>
<h4>Restricted Visual FoxPro Files</h4>
<p>
Visual FoxPro installs files on your computer that are restricted and may not be reproduced or distributed, including:</p>
<ul type=disc>
<li>
Wizard files</li>
<li>
TrueType fonts</li>
<li>
SpellCheck utility files</li>
<li>
Help files</li>
</ul>
<p>
Although you cannot distribute Visual FoxPro sample applications with your applications, you can refer to portions of sample application code as examples for building your own application. You can also include the wizard class library, Wizstyle.vcx, and the sample class libraries in your application.</p>
<h4>License.txt</h4>
<p>
Visual FoxPro contains many files that are licensed for your use for design, development, and testing purposes only. See License.txt, located in your Visual FoxPro directory, for a list of restricted files.</p>
<p>
If your application contains any of these files, remove them. Under the terms of the Microsoft License Agreement you received with this product, you aren't permitted to ship these files in your application or on your disks.</p>
<h4>Distributable Files</h4>
<p>
You may distribute any Visual FoxPro file that isn't restricted. Pursuant to the Microsoft License Agreement you received with this product, files must be distributed in conjunction with a corresponding application. The following guidelines apply to distributable files.</p>
<h4>Setup Wizard</h4>
<p>
The <a href="wizsetup_wizard.htm">Setup Wizard</a> checks for restricted files and will exclude them from distributable disk sets. Do not assign these file names to any files you will distribute. The Setup Wizard will exclude any file that has a name identical to one on this list.</p>
<p>
Any files in the Visual FoxPro Distrib.src and SETUP directories that are required to support a corresponding application may be distributed. When you use the <a href="wizsetup_wizard.htm">Setup Wizard</a> to create distribution disks, it automatically places the required files from these directories on the distributable disks in a compressed format. Upon installation, these file are decompressed and are installed by name in the appropriate directories on the user’s machine. It isn't necessary to copy these files to your distribution tree.</p>
<h4>Samples</h4>
<p>
Files in the Visual Studio …\Samples\Vfp98 folders and in the Vfp98\Api\Samples folders are provided for you to learn from and build on. Although you may not distribute unmodified Visual FoxPro <A HREF="vfpsamppage.htm">sample applications</A>, you may refer to portions of sample application code as examples for building your own application.</p>
<p>
If you use any files in these directories (including all .bmp, .ico, and .cur files), they must be included in your project and in the application build. They must not appear by name on the distributable disks and may not be distributed independently of your applications.</p>
<h4>Class Libraries</h4>
<p>
You can use any .vcx file, including those in the Vfp98\Ffc and Vfp98\Gallery directories, without modification in your applications. The libraries must be included in your project and in your application build.</p>
<h4>ODBC Files</h4>
<p>
Please refer to the Microsoft License Agreement you received with this product for specific restrictions with respect to your redistribution of ODBC files.</p>
<h4>ActiveX Controls</h4>
<p>
Visual FoxPro includes a set of ActiveX controls (.ocx files) you can add to and distribute with your applications.</p>

<h2><a name="dgcustomizing_an_application_for_distribution"></a>Customizing an Application for Distribution</h2>
<p>
The Visual FoxPro default run-time environment looks like the development environment: it displays Visual FoxPro icons and menus. To give your application a unique appearance, you might want to customize some of its features by:</p>
<ul type=disc>
<li>
Protecting and documenting your source code.</li>
<li>
Calling error-handling and shutdown routines.</li>
<li>
Changing the default Visual FoxPro menu and menu commands.</li>
<li>
Including a configuration file to specify custom title, icon, keyboard, and Help settings.</li>
<li>
Modifying the main Visual FoxPro window.</li>
<li>
Adding Help to your application.</li>
</ul>
<h3>Protecting and Documenting Your Source Code</h3>
<p>
To prevent users from viewing or changing the source code of your application, encrypt your source code and remove debugging information.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Always back up your source code before encrypting it.</p>
<p class=label>
<b>To protect your source code</b>
<ol>
<li>
Open your application project.<br><br></li>
<li>
From the <b>Project</b> menu, choose <b>Project Info</b>.<br><br></li>
<li>
In the <a href="cmdproject_information_dialog_box.htm">Project Information</a> dialog box, select <b>Encrypted</b> and clear <b>Debug info</b>.<br><br></li>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, choose <b>Build</b>.<br><br></li>
<li>
In the <a href="cmdbuild_options_dialog_box.htm">Build Options</a> dialog box, select <b>Recompile all files</b> and choose <b>OK</b>.<br><br></li>
<li>
In the setup section of your application, include the <a href="lngset_debug.htm">SET DEBUG OFF</a> command.</li>
</ol>
<p>
Before you begin the distribution process, if you haven’t already done so, you can comment and format your code so it has a consistent appearance and is easier to maintain. You can use the <a href="cmdbeautify_options_dialog_box.htm">Beautify</a> option from the Tools menu or the <a href="wizdocumenting_wizard.htm">Documenting Wizard</a> to customize your application documentation in several ways, including:</p>
<ul type=disc>
<li>
Capitalizing keywords and variables.</li>
<li>
Indenting source code.</li>
<li>
Adding headers to files, procedures, and methods.</li>
</ul>
<p class=label>
<b>To use the Documenting Wizard</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Wizards</b>.<br><br></li>
<li>
From the submenu, choose <b>Documenting</b>.</li>
</ol>
<p>
You can also use the <a href="wizdocumenting_wizard.htm">Documenting Wizard</a> to create cross-references of symbols you’ve used in your application and to produce an analytical summary of your project.</p>
<h3>Calling Error-Handling and Shutdown Routines</h3>
<p>
At times, errors occur when users run your application. You can call your own error-handling routine by including <a href="lngon_error.htm">ON ERROR</a>. Typically, ON ERROR uses a <a href="lngdo.htm">DO</a> command to run a routine which handles the error, as in:</p>
<pre><code>ON ERROR DO My_Error
</code></pre>
<p>
If your application contains no error-handling routines when an error occurs, the application pauses and Visual FoxPro displays an error message with the following options:</p>
<ul type=disc>
<li>
<B><b>Cancel</b></B>&nbsp;&nbsp;&nbsp;If a user chooses Cancel, Visual FoxPro immediately stops running the application and returns control to the system.</li>
<li>
<B><b>Ignore</b></B>&nbsp;&nbsp;&nbsp;If a user chooses Ignore, Visual FoxPro ignores the line that caused the error and continues to the next line in the program.</li>
</ul>
<p>
For more information about error handling, see “Handling Run-Time Errors” in Chapter 14, <a href="dgtesting_and_debugging_applications.htm">Testing and Debugging Applications</a>.</p>
<p>
For a complete list and explanation of Visual FoxPro error messages, see <a href="tocerror_messages_a_z.htm">Error Messages</a>.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Be sure to provide documentation to your users that describes the errors that they might see, and suggests ways in which they can correct errors.</p>
<p>
Create your own shutdown routine by including the command <a href="lngon_shutdown.htm">ON SHUTDOWN</a> in your code. Typically, ON SHUTDOWN uses a DO command to call a routine if you try to exit the application, as in the following example:</p>
<pre><code>ON SHUTDOWN DO My_Shutdown
</code></pre>
<p>
This routine typically includes a dialog box that asks if the user is sure they want to quit the current application. If the user wants to quit the application, the routine can close open files and clean up the environment, and then issue the <a href="lngquit.htm">QUIT</a> command. If the user doesn't want to exit the current application, the routine can return control to the application.</p>
<h3>Adding Help to Your Application</h3>
<p>
You can integrate context-sensitive Help into your applications, so that users can press F1 or choose Help from a menu to get assistance with your application. The Help that you provide with your application has the same features as the Help in Visual FoxPro. For more information, see Part 7, <a href="dgcreating_help_files.htm">Creating Help Files</a>.</p>
<p>
If you create graphical Help for your application, include the .chm or .hlp file in your application distribution directory so that the Setup Wizard includes it on your distribution disks.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You cannot distribute Winhelp.exe or the Help files shipped with Visual FoxPro. For more information, see <a href="#dgremoving_restricted_visual_foxpro_features_and_files">Removing Restricted Visual FoxPro Features and Files</a> later in this chapter.</p>
<h3>Modifying the Appearance of Your Application</h3>
<p>
You can modify the appearance of your application without changing your application code by:</p>
<ul type=disc>
<li>
Changing the default menu system.</li>
<li>
Changing the default title.</li>
<li>
Changing the default application icon.</li>
<li>
Specifying platform-specific keyboard navigation.</li>
</ul>
<h4>Changing the Default Visual FoxPro Menus</h4>
<p>
You can add your own menus and menu options to distributed applications by using the Menu Designer. If you don't create your own menu, the run-time environment displays a default Visual FoxPro menu.</p>
<p>
For details on the default menus, see <a href="#dgensuring_correct_run_time_behavior">Ensuring Correct Run-Time Behavior</a> earlier in this chapter. For more information about the Menu Designer, see Chapter 11, <a href="dgdesigning_menus_and_toolbars.htm">Designing Menus and Toolbars</a>.</p>
<h4>Changing the Default Title</h4>
<p>
Your application runs in the main Visual FoxPro window. By default, the text “Microsoft Visual FoxPro” appears in the title bar.</p>
<p class=label>
<b>To customize the title of the main Visual FoxPro window</b>
<ul type=disc>
<li>
Add the following statement to your configuration file. <pre><code>TITLE = cMyTitle
</code></pre>
<p class=tl>
Replace <code>cMyTitle</code> with the title of the main window of your application.</P></li>
</ul>
<p>
To include a Visual FoxPro function as part of the title, use the <a href="lngcaption_property.htm">Caption</a> property of the main window as in the following example.</p>
<pre><code>COMMAND=_SCREEN.Caption=;
"Visual FoxPro " + SUBSTR(VERSION(),25,3)
</code></pre>
<h4>Changing the Default Application Icon</h4>
<p>
After your application is compiled, the default Visual FoxPro icon appears in the Windows Explorer or Start Menu as the application icon. You can use the generic icon that is supplied by Visual FoxPro or design your own.</p>
<p>
If you want to display your own icon, create an icon (.ico) file with two images: one small (16 by 16) and one standard (32 by 32). Create both images as 16-color icons.</p>
<p>
You can change the default Visual FoxPro icon in the Project Info dialog box of the Project menu. If you use the Setup Wizard to create distribution disks for your application, you can also specify an application icon there.</p>
<p class=label>
<b>To change the default application icon using the Project Manager</b>
<ol>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the <a href="glsmain_file.htm">main file</a> for your project.<br><br></li>
<li>
From the <b>Project</b> menu, choose <b>Project Info</b> and then select the <b>Project</b> tab.<br><br></li>
<li>
Choose <b>Attach icon</b>.<br><br></li>
<li>
Choose <b>Icon</b> and then select an icon (.ico) file to assign to your project.</li>
</ol>
<h3>Backing Up Your Source Code</h3>
<p>
In all application development, it’s a good practice to make complete backup copies of your original program files before you build an application. Store the backup copies separately from your compiled applications.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Be sure to maintain separate copies of your original source programs for future use. You cannot re-create your source programs from their compiled code.</p>
<h3>Building Your Application</h3>
<p>
When your application project contains all the necessary files, you're ready to build a distributable file. You can build your project as a standard application that only runs when Visual FoxPro is present, or as an executable application that runs without Visual FoxPro.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can also build your application as an Automation server. For details, see <a href="dgadding_ole.htm#dgcreating_ole_servers">Creating Automation Servers</a> in Chapter 16, “Adding OLE”.</p>
<h4>Building a Standard Visual FoxPro Application</h4>
<p>
You can build a standard Visual FoxPro application with the Project Manager or with the BUILD APP command. However, more build options are available when you create an application through the Project Manager.</p>
<p class=label>
<b>To build a standard application</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, choose <b>Build</b>, then in the <a href="cmdbuild_options_dialog_box.htm">Build Options</a> dialog box, choose <b>Build Application</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngbuild_app.htm">BUILD APP</a> command.</li>
</ul>
<h4>Building an Executable File</h4>
<p>
You can build a Visual FoxPro executable file with the Project Manager or with the BUILD EXE command.</p>
<p class=label>
<b>To build an executable file</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, choose <b>Build</b>, then in the <a href="cmdbuild_options_dialog_box.htm">Build Options</a> dialog box, choose <b>Build Executable</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngbuild_exe.htm">BUILD EXE</a> command.<p class=tl>
If you include the STANDALONE or EXTENDED clauses of the BUILD EXE command, Visual FoxPro generates a “Feature not available” error message.</P></li>
</ul>
<p>
You can also build an Automation server, which creates a DLL that can be called from other Windows programs.</p>
<p class=label>
<b>To compile an Automation server</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, choose <b>Build</b>, then in the <a href="cmdbuild_options_dialog_box.htm">Build Options</a> dialog box, choose <b>Build OLE DLL</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngbuild_dll.htm">BUILD DLL</a> command.</li>
</ul>

<h2><a name="dgpreparing_to_make_distribution_disks"></a>Preparing to Make Distribution Disks</h2>
<p>
Now that you’ve considered all the requirements and options that Visual FoxPro provides, and built an application from your files, follow these steps:</p>
<ul type=disc>
<li>
Create a distribution directory.</li>
<li>
Copy your application files from the project to the appropriate locations in your distribution directory.</li>
<li>
Create distribution disks.</li>
</ul>
<h3>Creating a Distribution Directory</h3>
<p>
The distribution directory contains copies of all the project files that comprise your application. The structure of this <i>distribution tree</i> represents the way the Setup routine created by the Setup Wizard will install files on a user’s machine.</p>
<p class=label>
<b>Mapping the project files to the distribution tree</b></p>
<p>
<img src="afd25001.gif" border=0></p>
<p class=label>
<b>To create the distribution directory</b>
<ol>
<li>
Create a directory named as you want it to appear on a user’s machine.<br><br></li>
<li>
Divide the distribution directory into any subdirectories folders that are appropriate for your application.<br><br></li>
<li>
Copy files from the application project into the directory folder.</li>
</ol>
<p>
You can use this directory to test your application in the run-time environment. If necessary, temporarily reset defaults on your development machine to reflect the minimum settings on a target user machine. When everything works correctly, use the Setup Wizard to create disk images that will reproduce the correct environment when you distribute copies of your application.</p>
<h3>Creating the Distribution Disks</h3>
<p>
To create distribution disks, use the <a href="wizsetup_wizard.htm">Setup Wizard</a>. The Setup Wizard compresses the files in the distribution tree and copies these compressed files to the disk image directory, placing them in a separate subdirectory for each disk. After you use the Setup Wizard to create images of your application disks, copy the contents of each disk image directory to a separate disk.</p>
<p>
When you distribute the package, the user can install all the files for your application by running Setup.exe from Disk 1.</p>
<p>
For details on using the Setup Wizard, see Chapter 26, <a href="dgcreating_distribution_disks.htm">Creating Distribution Disks</a>.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Development and Developer Productivity</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgapplication_development_and_developer_productivity"></a><sup></sup>Chapter 32: Application Development and Developer Productivity</h1>
<p>
Microsoft FoxPro has always provided developer tools for application development within the FoxPro application and the XBase language. Visual FoxPro has added object-oriented language and behaviors. This version of Visual FoxPro includes an enhanced application framework and object creation and maintenance tools designed to aid rapid application development and to streamline your maintenance tasks.</p>
<p>
This chapter discusses:</p>
<p>
<a href="#newcomponent_gallery_overview">Component Gallery</a></p>
<p>
<a href="#newcoverage_profiler_application">Coverage Profiler Application</a></p>
<p>
<a href="#newproject_manager_hooks">Project Manager Hooks</a></p>
<p>
<a href="#newnew_and_enhanced_wizards">New and Enhanced Wizards</a></p>
<p>
<a href="#newenhanced_application_framework">Enhanced Application Framework</a></p>

<h2><a name="newcomponent_gallery_overview"></a><sup></sup>Component Gallery</h2>
<p>
The Component Gallery is a container for catalogs of software objects such as class libraries, forms, buttons, and so on. The Component Gallery also contains new Visual FoxPro classes. You can use the Component Gallery to organize components into object, project, application, or other groupings. These visual groupings are dynamically customizable so that you can use, duplicate, or rearrange components among several classifications within the Component Gallery. You can access a specific item from any of the places in the Component Gallery that you place a reference to that component. You can have several references in different catalogs or folders to a single object. For instance, a button might appear in one or more Component Gallery project categories (represented as folders), but might also be visible in a "Tools" category that holds references to all the buttons you use.</p>
<p>
You can use the Component Gallery for all the functions provided by the separate <a href="wndproject_manager.htm">Project Manager</a>, <a href="cmdclass_browser_window.htm">Class Browser</a>, and <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a>. Each of the other Visual FoxPro components provides very specific focus to the projects or classes from within the special environment of either Project file or Class library. The Component Gallery allows you to manage the relationships between components and many of the behaviors of those components from either an abstract design level as well as from a more intimate development perspective.</p>
<p>
You can drag and drop components within the Component Gallery and from the Component Gallery to projects or forms. You can also change properties of objects or classes from within the Component Gallery.</p>
<p>
The Component Gallery can contain any Visual FoxPro element, including local and remote documents, files, or folders, Automation servers like Microsoft Excel and Word, and HTML locations and files. You can also include .prg files containing code snippets, classes, wizards, builders, or art.</p>
<p>
<b>To open the Component Gallery</b>
<ul type=disc>
<li>
From the <b>Tools</b> menu, click <b>Component Gallery</b>.<p class=tl>
-or-</P></li>
<li>
Type <b>DO (</b><a href="lng_gallery.htm">_GALLERY</a><b>)</b> in the <b>Command</b> window.</li>
</ul>
<h3>Managing Projects with the Component Gallery</h3>
<p>
You can use the Component Gallery to create Projects and Applications and to manage their development. Use the Component Gallery to arrange components within the Component Gallery or use the templates, builders, and wizards in the Component Gallery to create the project or application you want.</p>
<p>
<b>To create a project or an application from the Component Gallery</b>
<ul type=disc>
<li>
Use the <b>Application Wizard</b> or <b>New Application template</b> in the <b>Applications</b> folder of the <b>Visual FoxPro</b> catalog.</li>
</ul>
<p>
For catalogs and folders, select tabs and options for the change you want to make. For details, see <a href="newcomponent_gallery_options_dialog_box.htm">Component Gallery Options dialog box</a>.</p>
<h4>Moving and Viewing Items in the Component Gallery</h4>
<p>
You can move items in the right, Object, pane of the Component Gallery window to the desktop or to an open project or form. The Project Manager recognizes the item referenced by the Component Gallery item and places it in the proper location in the Project Manager. Component Gallery items placed on the desktop are nonfunctional. There is no desktop representation for the Database, Folder, and gallery items representing nonvisual files.</p>
<p>
<b>To move items from the Component Gallery</b>
<ol>
<li>
In the right pane, click the item you want to move.<p class=tl>
The <a href="newcomponent_gallery_toolbar.htm">Move icon</a>, located in the upper-left corner of the <b>Component Gallery</b> window, changes according to what item you select.</P></li>
<li>
Drag and drop the <b>Move</b> icon to the desktop or to an open project or form.</li>
</ol>
<p>
When the Component Gallery cannot find the original item represented by the gallery item, a Find dialog box opens so that you can locate the item.</p>
<p>
The following table identifies the gallery items included in Visual FoxPro and their default behaviors.</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=44%><b>Component Gallery Item Type</b></td>
<td class=label colspan=4 width=56%><b>Drag-and-Drop targets</b></td>
</tr>
<tr valign=top>
<td class=label width=44%></td>
<td class=label width=14%><b>Project</b></td>
<td class=label width=13%><b>Form</b></td>
<td class=label width=14%><b>Screen</b></td>
<td class=label width=15%><b>Controls</b></td>
</tr>
<tr valign=top>
<td width=44%>Class (_ClassItem)</td>
<td width=14%></td>
<td width=13%></td>
<td width=14%>6</td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>File (_FileItem)</td>
<td width=14%></td>
<td width=13%></td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>URL (_UrlItem)</td>
<td width=14%></td>
<td width=13%>1</td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Form (_FormItem)</td>
<td width=14%></td>
<td width=13%>9</td>
<td width=14%>11</td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Report (_ReportItem)</td>
<td width=14%></td>
<td width=13%>9</td>
<td width=14%>11</td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Program (_ProgramItem)</td>
<td width=14%></td>
<td width=13%></td>
<td width=14%>11</td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Menu (_MenuItem)</td>
<td width=14%></td>
<td width=13%>10</td>
<td width=14%>11</td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Image (_ImageItem)</td>
<td width=14%></td>
<td width=13%>2</td>
<td width=14%>7</td>
<td width=15%>2</td>
</tr>
<tr valign=top>
<td width=44%>Sound (_SoundItem)</td>
<td width=14%></td>
<td width=13%>3</td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Video (_VideoItem)</td>
<td width=14%></td>
<td width=13%>3</td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>ActiveX (_ActiveXItem)</td>
<td width=14%></td>
<td width=13%></td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Data (_DataItem)</td>
<td width=14%></td>
<td width=13%>4</td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Template (_TemplateItem)</td>
<td width=14%>5</td>
<td width=13%></td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Catalog (_CatalogItem)</td>
<td width=14%></td>
<td width=13%></td>
<td width=14%>8</td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Sample (_SampleItem)</td>
<td width=14%></td>
<td width=13%></td>
<td width=14%></td>
<td width=15%></td>
</tr>
<tr valign=top>
<td width=44%>Project (_ProjectItem)</td>
<td width=14%></td>
<td width=13%></td>
<td width=14%>11</td>
<td width=15%></td>
</tr>
</table><br>
<p class=mini>
&nbsp;&nbsp;1 – Add hyperlink class<br>
  2 – Add an image class or set a Picture property<br>
  3 – Add a multimedia class<br>
  4 – Add a grid class<br>
  5 – Depending on the type (e.g., form) creates a new file and adds it&nbsp; to the project<br>
  6 – Creates an instance in Screen<br>
  7 – Sets the Visual FoxPro wallpaper<br>
  8 – Launches a new Gallery window with that catalog<br>
  9 – Add a Button class to launch a form/report<br>
10 – Add a shortcut menu to a form<br>
11 – Opens in a designer (modifies)</p>
<h4>Using Shortcut Menus in the Component Gallery</h4>
<p>
You can right-click on a selected item in the right, Object, pane to display an <a href="newitem_shortcut_menu.htm">Item Shortcut menu</a> containing all the action options for that item, including <b>Add to Project</b> or <b>Add to Form</b> options. Use the shortcut menu to modify or, in some cases, run the gallery item. The shortcut menus are characteristic for each type of gallery item. You can change some properties of the selected item by clicking <b>Properties</b> on the shortcut menu to open the <a href="newitem_properties_dialog_box.htm">Item Properties dialog box</a>.</p>
<h4>Organizing Visual FoxPro or Windows Components into User-Defined Groups</h4>
<p>
The Component Gallery folders represent an arbitrary grouping of gallery items. You can reassemble the gallery items using drag and drop or you can duplicate items into other folders. You can copy and rename a catalog or folder and reassemble the items it contains. There are few, if any, limits on how you can use, modify, or create catalogs or folders.</p>
<h4>Reviewing and Modifying Classes</h4>
<p>
Since Component Gallery items represent real items that can be objects or classes, you can review or modify these classes by accessing the original object through the Component Gallery.</p>
<p>
<b>To review a class</b>
<ol>
<li>
In the Component Gallery, right-click a class.<br><br></li>
<li>
On the shortcut menu, click <b>View in Browser</b>.<p class=tl>
This opens the <a href="cmdclass_browser_window.htm">Class Browser</a> so you can view the properties and methods of the selected class.</P></li>
</ol>
<p>
<b>To modify a class</b>
<ol>
<li>
In the Component Gallery, right-click a class.<br><br></li>
<li>
On the shortcut menu, click <b>Modify</b>.<p class=tl>
This opens the class in the <b>Class Designer</b>.</P></li>
</ol>
<h4>Creating and Modifying Forms</h4>
<p>
You can use the Component Gallery to duplicate or modify forms and to add forms and other gallery items to a project.</p>
<p>
<b>To create a form from the Component Gallery</b>
<ul type=disc>
<li>
Double-click any template or select <b>New Form</b> from the shortcut menu of any template in the Forms folder of the Component Gallery.<p class=tl>
-or-</P></li>
<li>
Double-click the <b>Form Wizard</b> in the Forms folder of the Component Gallery.<p class=tl>
-or-</P></li>
<li>
Select <b>Create</b> <b>Form</b> from the shortcut menu of Component Gallery items in the Forms folder of the Component Gallery.</li>
</ul>
<h4>Advanced Editing Features in the Component Gallery</h4>
<p>
The default settings for catalogs and folders enable you to perform basic review and management with gallery items. If you want to modify characteristics of catalogs or folders, or if you want greater access to gallery properties, select <b>Advanced editing enabled</b> in the <a href="newcomponent_gallery_options_dialog_box.htm">Component Gallery Options dialog box</a>.</p>
<h3>Component Gallery Catalogs</h3>
<p>
When you open the Component Gallery, the left, Catalog, pane displays the default catalog shipped with the Component Gallery. A catalog is a visual representation of items that belong to a Visual FoxPro or user-defined group of items. Within a catalog you can create folders to further organize subgroups of items. Items can be forms, queries, programs, templates, art files, sound files, or other objects. The Visual FoxPro Component Gallery default catalog includes items grouped into several categories, including forms, controls, and others. The default catalog also includes an empty folder named Favorites that you can use to create or copy gallery items into. You can also copy and rename the default catalog, or create your own catalogs.</p>
<p>
Component Gallery catalog options are set for catalog content and opening behavior. <i>Global</i> catalogs can contain any Component Gallery item type. <i>Default</i> catalogs open automatically when you start the Component Gallery. For details, see the <a href="newcatalogs_tab_component_gallery_options_dialog_box.htm">Catalogs tab</a> of the Component Gallery Options dialog box. </p>
<p>
The Component Gallery includes the following catalogs.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=32%><b>Catalog</b></td>
<td class=label width=68%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=32%>VFPGLRY</td>
<td width=68%>Contains components used by other catalogs in the gallery. Contains all the catalogs shipped with Visual FoxPro.<br>
Default and Global catalog.</td>
</tr>
<tr valign=top>
<td width=32%>Visual FoxPro </td>
<td width=68%>Contains the Visual FoxPro Foundation classes.<br>
Default catalog.</td>
</tr>
<tr valign=top>
<td width=32%>Favorites</td>
<td width=68%>An empty folder.<br>
Global catalog.</td>
</tr>
<tr valign=top>
<td width=32%>My Base Classes</td>
<td width=68%>Contains subclassed Visual FoxPro base classes.<br>
Default catalog.</td>
</tr>
<tr valign=top>
<td width=32%>ActiveX</td>
<td width=68%>A dynamic catalog containing either a list of all registered ActiveX Controls or a list of all Visual FoxPro ActiveX Controls.<br>
Default catalog.</td>
</tr>
<tr valign=top>
<td width=32%>World Wide Web</td>
<td width=68%>A collection of Web site URLs.</td>
</tr>
<tr valign=top>
<td width=32%>Multimedia</td>
<td width=68%>A variety of images, sounds, and video items you can use in your applications.</td>
</tr>
<tr valign=top>
<td width=32%>Samples</td>
<td width=68%>References to the Solutions, Tastrade, ActiveX Servers and Client/Server samples.</td>
</tr>
</table><br>
<p>
When you click a catalog in the list view, the right, Object, pane, displays the contents of that catalog. You can open other catalogs by double-clicking the catalog in either panel. Several Catalogs are included in the Gallery folder.</p>
<h3>Customizing the Component Gallery</h3>
<p>
You can customize the Component Gallery by changing the default behavior of catalog, folder, and gallery items through the appropriate Properties dialogs.</p>
<p>
<b>To create a Component Gallery catalog</b>
<ol>
<li>
Select the <b>Options</b> button on the <a href="newcomponent_gallery_toolbar.htm">Component Gallery toolbar</a>.<br><br></li>
<li>
Click the <a href="newcatalogs_tab_component_gallery_options_dialog_box.htm">Catalogs tab</a> in the <b>Component Gallery Options</b> dialog box.<br><br></li>
<li>
Click <b>New</b> and name the new catalog in the <b>Open</b> dialog.<br><br></li>
<li>
Click <b>OK</b>.<br><br></li>
<li>
The <b>Component Gallery</b> adds the catalog to the treeview so you can begin using it as you would any existing catalog.</li>
</ol>
<p>
<b>To change a catalog or folder configuration</b>
<ol>
<li>
Right-click the catalog or folder.<br><br></li>
<li>
From the shortcut menu, click <b>Properties</b>.<br><br></li>
<li>
In the <a href="newcatalog_properties_dialog_box.htm">Catalog Properties dialog box</a> or <a href="newfolder_properties_dialog_box.htm">Folder Properties dialog box</a>, select the tab containing the options you want to configure.<p class=tl>
Gallery catalogs and folders, as displayed in the <a href="newcomponent_gallery_window.htm">Component Gallery window</a> <b>Catalog pane</b>, can represent URLs, folders, or files on your hard disk. You can view a Gallery folder as <b>Web view</b> or as an <b>Explorer-level view</b>, depending on the way you specify the name in the General tab of the Folder properties dialog.</P></li>
</ol>
<h4>Web Views</h4>
<p>
You can specify URLs or files as Gallery catalogs or as Gallery items. When you configure an item as a Gallery folder, the item automatically opens as a Web view in the <b>Object</b> (right) <b>pane</b> when you select it in the <b>Catalog pane</b>.</p>
<p>
<b>To configure a Gallery catalog or folder as a web view</b>
<ol>
<li>
In the <a href="newfolder_properties_dialog_box.htm">Folder Properties Dialog_Box</a>, select the <b>Node</b> tab.<br><br></li>
<li>
In the <b>Dynamic folder</b> field, specify the Web page or file name as in the following examples:<p class=tl>
http:\\www.microsoft.com\</P><p class=tl>
file:\\c:\my documents\testpage.htm</P><p class=tl>
file:\\c:\my documents\Wordfile.doc</P></li>
</ol>
<p>
When you highlight the Eeb view icon in the <b>Catalog pane</b>, the toolbar changes to include Web navigation buttons. The Web view will reflect the settings of your Windows Explorer.</p>
<h4>Explorer-level Views</h4>
<p>
You can specify a directory as a Gallery folder or catalog that has characteristics of Windows Explorer.</p>
<p>
<b>To configure a Gallery catalog or folder as an Explorer-level view</b>
<ol>
<li>
In the <a href="newfolder_properties_dialog_box.htm">Folder Properties Dialog_Box</a>, select the <b>Node</b> tab.<br><br></li>
<li>
In the <b>Dynamic folder</b> field, specify a folder or file name and backslash (\) as the value as in the following examples:<p class=tl>
C:\My Documents\</P></li>
</ol>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;This specification creates a view of actual files, unlike other Component Gallery views. In this view you <i>can</i> delete files from your disk.</p>
<p class=indent>
To create an Explorer-level view that maintains protection of displayed files, specify the target using a wildcard designation as in the following example:</p>
<p class=tl>
C:\My Documents\*.*</P><p>
Avoid using wildcards to create dynamic folders when you can expect to find more than 512 items, unless you have a fast machine with a large amount of RAM.</p>
<h3>Component Gallery Object Members</h3>
<p>
The Component Gallery is comprised of an interface, whose classes are contained in Vfpglry.vcx, and items that reference the following Visual FoxPro Foundation Classes.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Object</b></td>
<td class=label width=44%><b>Description</b></td>
<td class=label width=23%><b>Class library</b></td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcabout_dialog.htm">About Dialog</a></td>
<td width=44%>Provides a simple About dialog box for custom applications.</td>
<td width=23%>_dialogs.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdata_calendar.htm">ActiveX Calendar</a></td>
<td width=44%>A calendar control that can be tied to a date field.</td>
<td width=23%>_datetime.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcarray_handler.htm">Array Handler</a></td>
<td width=44%>Provides methods for handling array operations not performed by native product array functions.</td>
<td width=23%>_utility.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffccancel_button.htm">Cancel Button</a></td>
<td width=44%>Releases a form and discards any outstanding buffered data.</td>
<td width=23%>_miscbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcclock.htm">Clock</a></td>
<td width=44%>A simple clock control for a form or container.</td>
<td width=23%>_datetime.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcconflict_catcher.htm">Conflict Catcher</a></td>
<td width=44%>A dialog box for resolution of row conflicts encountered while editing under optimistic buffering.</td>
<td width=23%>_dataquery.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffccookies_class.htm">Cookies Class</a></td>
<td width=44%>A simple Web class for handling cookies between Web pages.</td>
<td width=23%>_internet.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcxtab_object.htm">Cross Tab</a></td>
<td width=44%>Generates a cross tab.</td>
<td width=23%>_utility.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffccomplex_data_edit_buttons.htm">Data Edit Buttons</a></td>
<td width=44%>A complete set of edit buttons (as used by Form Wizards).</td>
<td width=23%>Wizbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdata_navigation_buttons.htm">Data Navigation Buttons</a></td>
<td width=44%>A Top, Next, Prev, Bottom navigation button group and the DataChecker class to check for conflicts when moving records.</td>
<td width=23%>_datanav.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdatanav_object.htm">Data Navigation Object</a></td>
<td width=44%>A nonvisual navigation object that other classes can use.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdata_session_manager.htm">Data Session Manager</a></td>
<td width=44%>Manages data sessions and handles data updates.</td>
<td width=23%>_app.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdata_validation.htm">Data Validation</a></td>
<td width=44%>Traps for data conflicts on buffered data.</td>
<td width=23%>_datanav.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdbf_html.htm">DBF -&gt; HTML</a></td>
<td width=44%>Converts a Visual FoxPro cursor (.dbf) to HTML.</td>
<td width=23%>_internet.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdistinct_value_combo.htm">Distinct Values Combo</a></td>
<td width=44%>Performs a lookup of unique values from the controlsource field to populate a combo box.</td>
<td width=23%>_dataquery.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcerror_object.htm">Error Object</a></td>
<td width=44%>A generic error handler that works for both object and procedural code.</td>
<td width=23%>_app.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfieldmover.htm">Field Mover</a></td>
<td width=44%>A supermover list box that automatically loads fields from current data source.</td>
<td width=23%>_movers.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfile_registry.htm">File Registry</a></td>
<td width=44%>Provides a set of registry functions that return application-specific information.</td>
<td width=23%>Registry.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfile_version.htm">File Version</a></td>
<td width=44%>Retrieves information from the version resource of a file.</td>
<td width=23%>_utility.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfilter_button.htm">Filter Button</a></td>
<td width=44%>Displays dialog to specify a data filter on a particular field.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfilter_dialog.htm">Filter Dialog</a></td>
<td width=44%>A dialog that enables you to specify filter conditions on data.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfilter_expression.htm">Filter Expression Dialog</a></td>
<td width=44%>Creates an advanced filter expression dialog.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfind_findnext_buttonset.htm">Find (Findnext) Buttons</a></td>
<td width=44%>A generic find/findnext buttonset.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfind_button.htm">Find Button</a></td>
<td width=44%>Locates a record based on specific criteria.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfind_dialog.htm">Find Dialog</a></td>
<td width=44%>A find dialog with simple options such as Field choice. </td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfind_files_text.htm">Find Files/Text</a></td>
<td width=44%>Uses the Filer.DLL COM object to search for files.</td>
<td width=23%>_utility.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfind_object.htm">Find Object</a></td>
<td width=44%>Creates a generic object that locates a record based on specified critereria.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffccombo_font_picker.htm">Font Combobox</a></td>
<td width=44%>A combo box that lists available fonts. It is also used by tbrEditing and rtfControls classes.</td>
<td width=23%>_format.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffccombo_font_size_picker.htm">Fontsize Combobox</a></td>
<td width=44%>A combo box that lists available font sizes. It is also used by tbrEditing and rtfControls classes.</td>
<td width=23%>_format.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffctext_formatting_toolbar.htm">Format Toolbar</a></td>
<td width=44%>Provides a toolbar for applying font formatting to text of the active control.</td>
<td width=23%>_format.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcfrx_html.htm">FRX -&gt; HTML</a></td>
<td width=44%>Converts a Visual FoxPro reporting output (.frx) to HTML.</td>
<td width=23%>_internet.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcget_file_folder.htm">GetFile and Directory</a></td>
<td width=44%>Retrieves both a file and a folder name.</td>
<td width=23%>_controls.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcgoto_button.htm">Goto Dialog Button</a></td>
<td width=44%>Creates a button that displays the Goto dialog box.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcgoto_dialog.htm">Goto Dialog</a></td>
<td width=44%>Creates a Goto record dialog box.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcgraph_record_object.htm">Graph By Record Object</a></td>
<td width=44%>A navigation button group that allows you to refresh a new graph per record on the fly.</td>
<td width=23%>_utility.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcgraph_object.htm">Graph Object</a></td>
<td width=44%>Generates a Graph using the core Graph Wizard engine.</td>
<td width=23%>Autgraph.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffchelp_button.htm">Help Button</a></td>
<td width=44%>Displays the Help file as it starts searching for the specified HelpContextID.</td>
<td width=23%>_miscbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffchyperlink_button.htm">Hyperlink Button</a></td>
<td width=44%>Launches a Web browser from a button.</td>
<td width=23%>_hyperlink.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffchyperlink_image.htm">Hyperlink Image</a></td>
<td width=44%>Launches a Web browser from an image.</td>
<td width=23%>_hyperlink.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffchyperlink_label.htm">Hyperlink Label</a></td>
<td width=44%>Launches a Web browser from a label.</td>
<td width=23%>_hyperlink.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcini_registry.htm">INI Access</a></td>
<td width=44%>A set of registry functions that access old INI-style file settings.</td>
<td width=23%>Registry.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffclocate_item_dialog.htm">Item Locator</a></td>
<td width=44%>This button brings up a dialog to locate a record.</td>
<td width=23%>_dialogs.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffckeywords_dialog.htm">Keywords Dialog</a></td>
<td width=44%>Creates a dialog like the Component Gallery keywords dialog.</td>
<td width=23%>_dialogs.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffclaunchapp_btn.htm">Launch Button</a></td>
<td width=44%>Launches an application with an optional document.</td>
<td width=23%>_miscbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffclocate_button.htm">Locate Button</a></td>
<td width=44%>Displays a dialog to locate a record.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdata_lookup_combo.htm">Lookup Combobox</a></td>
<td width=44%>Performs a lookup of values in a field to populate a combo box.</td>
<td width=23%>_dataquery.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcmail_merge_object.htm">Mail Merge Object</a></td>
<td width=44%>Generates a Word Mail Merge using the core Mail Merge Wizard engine.</td>
<td width=23%>Mailmerge.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcmessagebox_wrapper.htm">Messagebox Handler</a></td>
<td width=44%>A simple wrapper around the MessageBox function.</td>
<td width=23%>_dialogs.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcmouseoverfx.htm">MouseOver Effects</a></td>
<td width=44%>Highlights a contol as the mouse passes over it.</td>
<td width=23%>_ui.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsimple_mover_listboxes.htm">Mover</a></td>
<td width=44%>Provides a simple mover list box class with move/remove buttons.</td>
<td width=23%>_movers.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcnavigation_shortcut_menu.htm">Navigation Shortcut Menu</a></td>
<td width=44%>A shortcut menu that can be dropped onto a form.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcnavigation_toolbar.htm">Navigation Toolbar</a></td>
<td width=44%>A set of navigation buttons in a toolbar.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcobject_state.htm">Object State</a></td>
<td width=44%>Determines the state of an object and saves/restores object property settings.</td>
<td width=23%>_app.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcodbc_registry.htm">ODBC Registry</a></td>
<td width=44%>A set of registry functions that return ODBC-specific information</td>
<td width=23%>Registry.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcoffline_online_object_(button).htm">Offline Switch</a></td>
<td width=44%>Provides a view of online data for use offline.</td>
<td width=23%>_dataquery.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcok_button.htm">OK Button</a></td>
<td width=44%>Performs a simple form release.</td>
<td width=23%>_miscbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcreport_output_control.htm">Output Control</a></td>
<td width=44%>Displays a complex dialog box that prompts the user for a reporting output option.</td>
<td width=23%>_reports.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcreport_output_dialog.htm">Output Dialog</a></td>
<td width=44%>Displays a dialog box that prompts the user for a reporting output option.</td>
<td width=23%>_reports.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcreport_object.htm">Output Object</a></td>
<td width=44%>Various reporting output options.</td>
<td width=23%>_reports.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcpassword_dialog.htm">Password Dialog</a></td>
<td width=44%>A simple Password dialog for custom applications.</td>
<td width=23%>_dialogs.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcpivottable_object.htm">Pivot Table</a></td>
<td width=44%>Generates a Mcirosoft Excel Pivot Table using the core PivotTable Wizard engine.</td>
<td width=23%>Pivtable.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcrun_report_btn.htm">Preview Report</a></td>
<td width=44%>A generic button to run a report.</td>
<td width=23%>_miscbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcqbf.htm">QBF</a></td>
<td width=44%>Provides a buttonset for Query-By-Form querying.</td>
<td width=23%>_dataquery.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcregistry_access.htm">Registry Access</a></td>
<td width=44%>Provides access to information in the Windows Registry.</td>
<td width=23%>registry.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcelastic_(resize)_panel_frame.htm">Resize Object</a></td>
<td width=44%>Causes form objects to resize/move with the Form's resize event.</td>
<td width=23%>_controls.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffctext_formatting_buttons.htm">RTF Controls</a></td>
<td width=44%>Provides a set of buttons for applying font formatting to text of the active control.</td>
<td width=23%>_format.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcdisplay_form_btn.htm">Run Form Button</a></td>
<td width=44%>A button that runs a form.</td>
<td width=23%>_miscbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcscx_html.htm">SCX -&gt; HTML</a></td>
<td width=44%>Converts an .scx form to an HTML.</td>
<td width=23%>_internet.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsendmail_buttons.htm">SendMail Buttons</a></td>
<td width=44%>Uses the MAPI ActiveX Control to send a mail message from a form.</td>
<td width=23%>_miscbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcshell_execute.htm">Shell Execute</a></td>
<td width=44%>Provides Windows Explorer double-click behavior.</td>
<td width=23%>_environ.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcshortcut_menu_wrapper.htm">Shortcut Menu Class</a></td>
<td width=44%>This wrapper class dynamically creates shortcut pop-up menus.</td>
<td width=23%>_menu.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsimple_data_edit_buttons.htm">Simple Edit Buttons</a></td>
<td width=44%>Provides simple Add, Edit, Delete, Duplicate, Save, and Cancel buttons (as used by Form Wizards).</td>
<td width=23%>Wizbtns.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsimple_navigation_buttons.htm">Simple Navigation Buttons</a></td>
<td width=44%>Provides a set of Next and Previous navigation buttons.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsimple_nav_pic_buttons.htm">Simple Picture Navigation Buttons</a></td>
<td width=44%>This is a set of simple picture navigation buttons.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsort_button.htm">Sort Button</a></td>
<td width=44%>Displays a dialog that enables you to perform an ascending or descending data sort on a particular field.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsort_dialog.htm">Sort Dialog</a></td>
<td width=44%>Enables you to perform an ascending or descending data sort on a particular field.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsortmover.htm">Sort Mover</a></td>
<td width=44%>This subclass of the supermover list box class automatically handles sorting of data.</td>
<td width=23%>_movers.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsort_object.htm">Sort Object</a></td>
<td width=44%>Performs a sort on a data source.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsort_selector.htm">Sort Selector</a></td>
<td width=44%>Performs an ascending or descending sort based on the current control.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsound_handler.htm">Sound Player</a></td>
<td width=44%>This class loads and plays a sound file.</td>
<td width=23%>_multimedia.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsplash_screen.htm">Splash Screen</a></td>
<td width=44%>Provides a simple Splash Screen for custom applications.</td>
<td width=23%>_dialogs.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcspt_stored_procedure_object.htm">SQL Pass Through</a></td>
<td width=44%>Provides SQL Pass Thru and can allow you to execute stored procedures on your host database.</td>
<td width=23%>_dataquery.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcstop_watch.htm">Stop Watch</a></td>
<td width=44%>Provides a stop watch control for a form or container.</td>
<td width=23%>_datetime.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcstring_conversion.htm">String Library</a></td>
<td width=44%>Performs various string conversions.</td>
<td width=23%>_utility.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsupermover.htm">Super Mover</a></td>
<td width=44%>Provides Move, Remove, Moveall, and Removeall buttons.</td>
<td width=23%>_movers.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcsystoolbar_handler.htm">System Toolbars</a></td>
<td width=44%>A manager class that handles and tracks Systoolbars.</td>
<td width=23%>_app.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffctablemover.htm">Table Mover</a></td>
<td width=44%>This subclass of the supermover list box class automatically loads tables and fields from the current data source.</td>
<td width=23%>_movers.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcshow_text_viewer.htm">Text Preview</a></td>
<td width=44%>Provides a viewer of output text.</td>
<td width=23%>_reports.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcthermometer.htm">Thermometer</a></td>
<td width=44%>Provides a standard thermometer class.</td>
<td width=23%>_controls.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffctrace_aware_timer.htm">Trace Aware Timer</a></td>
<td width=44%>This is an application utility that determines whether the trace window is open.</td>
<td width=23%>_app.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffctypelib_reader.htm">Type Library</a></td>
<td width=44%>The main routine ExportTypeLib creates a text file with Typelib output.</td>
<td width=23%>_utility.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcurl_address_combo.htm">URL Combo</a></td>
<td width=44%>Creates a combo box for typing in a Web URL. It launches Microsoft Internet Explorer and navigates to the site.</td>
<td width=23%>_internet.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcurl_picker_dialog.htm">URL Open Dialog</a></td>
<td width=44%>Provides a dialog that creates a drop-down list that stores URL history.</td>
<td width=23%>_internet.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcnavigation_buttons.htm">VCR Buttons</a></td>
<td width=44%>A Top, Next, Prev, and Bottom navigation button group.</td>
<td width=23%>_table.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcnav_pic_buttons.htm">VCR Picture Navigation Buttons</a></td>
<td width=44%>A set of VCR picture navigation buttons.</td>
<td width=23%>_table2.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcvideo_handler.htm">Video Player</a></td>
<td width=44%>Loads and plays a video file using MCI commands.</td>
<td width=23%>_multimedia.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcie4_browser_control.htm">Web Browser control</a></td>
<td width=44%>A subclass of the Internet Explorer 4.0 Browser control, which provides hooks for Visual FoxPro code.</td>
<td width=23%>_webview.vcx</td>
</tr>
<tr valign=top>
<td width=33%><a href="ffcwindowhandler.htm">Window Handler</a></td>
<td width=44%>Performs several common window operations typical of applications.</td>
<td width=23%>_ui.vcx</td>
</tr>
</table><br>
<p>
For full details on these class libraries, see the <a href="ffcvisual_foxpro_foundation_classes.htm">Visual FoxPro Foundation Classes</a> topic. You can get information on how to use the foundation classes in <a href="ffcusing_visual_foxpro_foundation_classes.htm">Guidelines for Using Visual FoxPro Foundation Classes</a>.</p>
<h3>Component Gallery Class Library (Vpfgallery.vcx)</h3>
<p>
The Component Gallery class library, Vpfgallery.vcx, provides the item types as classes.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Item type</b></td>
<td class=label width=65%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=35%><b>Class</b> (_ClassItem)</td>
<td width=65%>The generic item type for any Visual FoxPro class. This can be either from .vcx or .prg files.</td>
</tr>
<tr valign=top>
<td width=35%><b>File</b> (_FileItem)</td>
<td width=65%>This is any file. Visual FoxPro reads the Registry for shell functions and adds them to the menu. The gallery includes a look up routine that checks for specific extensions and redirects the item type. <p>
The gallery supports UNC naming conventions for team development (sharing of Catalogs across networks).</p>
</td>
</tr>
<tr valign=top>
<td width=35%><b>ActiveX</b> (_ActiveXItem)</td>
<td width=65%>This is an ActiveX Control or Server such as an .ocx created by Visual Basic CCE or .exe/.dll created by Visual FoxPro.</td>
</tr>
<tr valign=top>
<td width=35%><b>Data</b> (_DataItem)</td>
<td width=65%>This is a Visual FoxPro datasource (.dbc, .dbf, View, etc.).</td>
</tr>
<tr valign=top>
<td width=35%><b>Image</b> (_ImageItem)</td>
<td width=65%>This is a File Item Type whose file has an image file extension such as .bmp, .jpg, .gif, .ico, .cur, .ani, and so on. </td>
</tr>
<tr valign=top>
<td width=35%><b>Sound</b> (_SoundItem)</td>
<td width=65%>This is a File Item Type whose file has either a .wav or .rmi extension.</td>
</tr>
<tr valign=top>
<td width=35%><b>Video</b>(_VideoItem)</td>
<td width=65%>This is a File Item Type whose file has a .avi extension.</td>
</tr>
<tr valign=top>
<td width=35%><b>URL</b> (_UrlItem)</td>
<td width=65%>This is a Web Item Type and includes Web and local documents such as HTML files or Visual FoxPro Active Documents.</td>
</tr>
<tr valign=top>
<td width=35%><b>Sample</b> (_SampleItem)</td>
<td width=65%>This is a File Item Type for files that run in Visual FoxPro and can be an executable Visual FoxPro file such as .app, .exe, .prg, .scx, or .frx files.</td>
</tr>
<tr valign=top>
<td width=35%><b>Template</b> (_TemplateItem)</td>
<td width=65%>This is a Script Item Type that opens a builder for the Visual FoxPro element represented by the type of the highlighted item, including forms and reports.</td>
</tr>
<tr valign=top>
<td width=35%><b>Catalog</b> (_CatalogItem)</td>
<td width=65%>This is a Component Gallery type that allows you to Add and Open Visual FoxPro catalogs.</td>
</tr>
<tr valign=top>
<td width=35%><b>Form</b>(_FormItem)</td>
<td width=65%>This is a type for Visual FoxPro forms (.scx).</td>
</tr>
<tr valign=top>
<td width=35%><b>Report</b> (_ReportItem)</td>
<td width=65%>This is a type for Visual FoxPro reports (.frx).</td>
</tr>
<tr valign=top>
<td width=35%><b>Menu</b> (_MenuItem)</td>
<td width=65%>This is a type for Visual FoxPro menus (.mnx).</td>
</tr>
<tr valign=top>
<td width=35%><b>Program </b>(_ProgramItem)</td>
<td width=65%>This is a type for Visual FoxPro programs (.prg).</td>
</tr>
<tr valign=top>
<td width=35%><b>Project</b> (_ProjectItem)</td>
<td width=65%>This is a type for Visual FoxPro projects (.pjx).</td>
</tr>
</table><br>
<p>
You can use the Class Browser to examine the details of any of these classes.</p>
<p>
For details on other classes used in the Component Gallery, see the <a href="ffcvisual_foxpro_foundation_classes.htm">Visual FoxPro Foundation Classes</a> topic or use the <a href="cmdclass_browser_window.htm">Class Browser</a> to examine the libraries in the Ffc folder.</p>

<h3><a name="newcomponent_gallery_table_structure"></a><sup></sup>Component Gallery Table Structure</h3>
<p>
The Visual FoxPro Component Gallery is described in the following table structure.</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=15%><b>Field</b></td>
<td class=label width=30%><b>Field Name</b></td>
<td class=label width=25%><b>Type</b></td>
<td class=label width=15%><b>Width</b></td>
<td class=label width=15%><b>Index</b></td>
</tr>
<tr valign=top>
<td width=15%>1</td>
<td width=30%>TYPE</td>
<td width=25%>Character</td>
<td width=15%>12</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>2</td>
<td width=30%>ID</td>
<td width=25%>Character</td>
<td width=15%>12</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>3</td>
<td width=30%>PARENT</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>4</td>
<td width=30%>LINK</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>5</td>
<td width=30%>TEXT</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>6</td>
<td width=30%>TYPEDESC</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>7</td>
<td width=30%>DESC</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>8</td>
<td width=30%>PROPERTIES</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>9</td>
<td width=30%>FILENAME</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>10</td>
<td width=30%>CLASS</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>11</td>
<td width=30%>PICTURE</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>12</td>
<td width=30%>FOLDERPICT</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>13</td>
<td width=30%>SCRIPT</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>14</td>
<td width=30%>CLASSLIB</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>15</td>
<td width=30%>CLASSNAME</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>16</td>
<td width=30%>ITEMCLASS</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>17</td>
<td width=30%>ITEMTPDESC</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>18</td>
<td width=30%>VIEWS</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>19</td>
<td width=30%>KEYWORDS</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>20</td>
<td width=30%>SRCALIAS</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>21</td>
<td width=30%>SRCRECNO</td>
<td width=25%>Numeric</td>
<td width=15%>6</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>22</td>
<td width=30%>UPDATED</td>
<td width=25%>DateTime</td>
<td width=15%>8</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>23</td>
<td width=30%>COMMENT</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
<tr valign=top>
<td width=15%>24</td>
<td width=30%>USER</td>
<td width=25%>Memo</td>
<td width=15%>4</td>
<td width=15%>No</td>
</tr>
</table><br>

<h2><a name="newcoverage_profiler_application"></a><sup></sup>Coverage Profiler Application</h2>
<p>
A coverage application writes information about which lines of code in a file were run. A profiler application provides information about which lines actually run, how many times a line is run, duration, and more. <a href="glscoverage.htm">Coverage</a> and <a href="glsprofiling.htm">profiling</a> enable a developer to identify problem areas in an application, especially skipped code and performance bottlenecks.</p>
<p>
Visual FoxPro Coverage Profiler is provided in two parts – a Coverage engine you can use or customize, and a multiwindow application you can use to analyze programs and projects.</p>
<p>
The Coverage Profiler application provides several ways to view the data provided by the Coverage Engine. Coverage.app is a subclass of the Coverage engine. You can automate coverage, or modify the User Interface to suit your needs, run Coverage Profiler in unattended mode and not display the application window, or use engine features without using the interface.</p>
<p>
Upon startup the coverage application suspends coverage logging enabled with a SET COVERAGE TO command. When you release the coverage object, the application provides a choice to restore the SET COVERAGE setting.</p>
<h3>Coverage Profiler Log File</h3>
<p>
Coverage Profiler uses a log file generated by Visual FoxPro when you use the Coverage option in the Debugger Tools menu or use <a href="lngset_coverage.htm">SET COVERAGE TO</a> as in the following command:</p>
<pre><code>SET COVERAGE TO <i>cCoverage</i>.log
</code></pre>
<p>
When you use the command, the ADDITIVE clause allows you to avoid overwriting an existing log. This command starts data streaming and opens the file <i>cCoverage</i>.log, a text file that will gather the stream of details on the file or application you examine.</p>
<p>
A coverage log file consists of records in comma-delimited lines. The following list describes the structure of each record.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=13%><b>Item</b></td>
<td class=label width=87%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=13%>1</td>
<td width=87%>execution time</td>
</tr>
<tr valign=top>
<td width=13%>2</td>
<td width=87%>class executing the code</td>
</tr>
<tr valign=top>
<td width=13%>3</td>
<td width=87%>object, method, or procedure in which the code is found or called</td>
</tr>
<tr valign=top>
<td width=13%>4</td>
<td width=87%>line number within the method or procedure</td>
</tr>
<tr valign=top>
<td width=13%>5</td>
<td width=87%>fully defined file</td>
</tr>
<tr valign=top>
<td width=13%>6</td>
<td width=87%>call stack level (Visual FoxPro 6.0 only)</td>
</tr>
</table><br>
<p>
After specifying the log file name, run the program or application you want to examine. When you end the program you can use the SET COVERAGE TO command to stop the data stream to the coverage log.</p>
<p>
You can view the coverage log by starting Coverage Profiler from the Tools menu or by using <a href="lngdo.htm">DO</a> as in the following command:</p>
<pre><code>DO (_COVERAGE) [WITH <i>cCoverage</i>]
</code></pre>
<p>
Visual FoxPro prompts you for the name if you do not specify a log file. The <a href="lng_coverage.htm">_COVERAGE</a> System variable in Visual FoxPro 6.0 defaults to the Coverage Profiler application, Coverage.app.</p>
<h3>Examining Application Coverage and Profile</h3>
<p>
To use the Coverage Profiler effectively, prepare your application and your environment carefully. If you use the following guidelines, the Coverage Profiler can provide accurate and useful information about your project or application.</p>
<p>
<b>To use the Coverage Profiler to examine application coverage</b>
<ol>
<li>
Use the <b>Coverage Logging</b> option of the Debugger <b>Tools</b> menu or the <a href="lngset_coverage.htm">SET COVERAGE command</a> to start the coverage data stream and to open the file to log that data.<br><br></li>
<li>
Run the program or application you want to examine for coverage.<br><br></li>
<li>
Run the coverage application from the <b>Tools</b> menu<b> </b>or use DO (_COVERAGE) in the command window.<p class=tl>
The Coverage Profiler application starts in <b>Coverage Mode</b> by default.</P></li>
</ol>
<p>
<b>To use Coverage Profiler to examine application profile</b>
<ol>
<li>
Use the <a href="lngset_coverage.htm">SET COVERAGE command</a> to start the coverage data stream and to open the file to log that data.<br><br></li>
<li>
Run the program or application you want to profile.<br><br></li>
<li>
Run the coverage application from the <b>Tools</b> menu or use DO (<a href="lng_coverage.htm">_COVERAGE</a>) in the command window.<br><br></li>
<li>
Click the <b>Profile Mode</b> button in the <b>Coverage Profiler</b> dialog box.<p class=tl>
If you find that you are most often interested in profiling, you can change the default to Profile Mode in the <a href="newcoverage_profiler_options_dialog_box.htm">Coverage Profiler Options dialog box</a>.</P></li>
</ol>
<p>
<b>To use the Coverage Profiler with a specific log file</b></p>
<p>
Run the coverage application using the WITH option and the log file name as in the following example:</p>
<pre><code>DO (_COVERAGE) WITH "Mylog.LOG"
</code></pre>
<p class=tl>
This example uses the log file Mylog.log and opens the Coverage Profiler application window to display the results. If you specify no file name, the Coverage Profiler uses the log specified in a current SET COVERAGE TO command or displays the Open file dialog box when coverage logging is OFF.</P><p>
<b>To use the Coverage Profiler without the User Interface </b></p>
<p>
Run the coverage application using the WITH option and specify true (.T.) for unattended mode running as in the following example.</p>
<pre><code>DO (_COVERAGE) WITH "Mylog.LOG",.T.
</code></pre>
<p class=tl>
In this example, the Coverage Profiler application uses the log file Mylog.log and runs without displaying the Coverage Profiler application window. </P><p>
<b>To use the Coverage Profiler with a specific Add-In file</b></p>
<p>
Run the coverage application using the WITH option and the add-in file name as in the following example:</p>
<pre><code>DO (_COVERAGE) WITH "Mylog.LOG",, "add_ui.prg"
</code></pre>
<p class=tl>
This example uses the log file Mylog.log and opens the Coverage Profiler application window to display the results, and then the Add-In program ADD_UI.PRG runs. The second, unspecified, parameter is a logical value that specifies whether the coverage engine operates in unattended mode. In the default setting, false (.F.), the Coverage Profiler window displays.</P><p>
Besides viewing the profiler information, you can insert comments or markers and you can save the information as a file to use later.</p>
<h3>Modifying the Coverage Profiler</h3>
<p>
By default the Coverage Profiler application runs in a separate window. You can reconfigure it to run inside the main Visual FoxPro window by changing the Environment Option. In the <a href="newcoverage_profiler_options_dialog_box.htm">Coverage Profiler Options dialog box</a>, change the <b>Environment</b> selection from <b>Coverage frame</b> to <b>FoxPro frame</b>, and then restart the Coverage Profiler.</p>
<p>
You can also use the <b>Coverage Profiler Options</b> dialog box to modify the following Coverage Profiler characteristics.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=29%><b>Characteristic</b></td>
<td class=label width=71%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=29%>Add-Ins</td>
<td width=71%>Specifies whether Add-Ins are registered in the Coverage Profiler as they are used. For more information, see the section, "Coverage Profiler Add-Ins."</td>
</tr>
<tr valign=top>
<td width=29%>Coverage Marks</td>
<td width=71%>Specifies whether the Coverage Profiler marks code that is run or code that is not run.<br>
Specifies the character(s) used to mark code.<br>
Specifies when code is marked.</td>
</tr>
<tr valign=top>
<td width=29%>Fonts</td>
<td width=71%>Specifies the fonts used in the Coverage Profiler as code and in displays.</td>
</tr>
<tr valign=top>
<td width=29%>Smart Pathing</td>
<td width=71%>Specifies whether Coverage Profiler automatically seeks files in previously specified locations.</td>
</tr>
<tr valign=top>
<td width=29%>Start Mode</td>
<td width=71%>Specifies whether Coverage Profiler opens in Coverage or Profile Mode.</td>
</tr>
</table><br>
<h3>Ensuring Relevance in the Coverage Profiler</h3>
<p>
To help ensure that the files processed by the Coverage Profiler are the correct files:
<ul type=disc>
<li>
Set your project directory as the default before you start coverage logging so that the referenced files are relative.<br><br></li>
<li>
Avoid renaming objects dynamically. The Coverage Profiler will not find objects if you rename them at run time.<br><br></li>
<li>
Avoid using source files with exactly the same root name, even with different extensions. Internally, the Coverage Profiler cannot distinguish between them.<br><br></li>
<li>
Make sure that your project contains only the correct versions of much-modified files.<br><br></li>
<li>
Make sure your project does not contain multiple copies of a file in subdirectories.<br><br></li>
<li>
Perform a compile for the coverage run:<ul type=disc>
<li>
Make sure Debug information is in your application.<br><br></li>
<li>
Turn Encrypt OFF.<br><br></li>
<li>
Use RECOMPILE or Build All to force a fresh compile of all source code.<br><br></li>
<li>
Perform the compile immediately before the coverage run so that you know that the source code exactly matches the object code.</li>
</ul>
</li>
</ul>
<p>
Some lines in code, such as comments, DEFINE CLASS and ELSE statements, and lines within TEXT … ENDTEXT do not appear in coverage logs because they are not even potentially executable. Also, lines broken by continuation symbols (semicolons) are considered as a single line of code and marked only on the last line.</p>
<h3>Coverage Profiler Add-Ins</h3>
<p>
Add-Ins are code files (usually .prg or .scx) that provide an easy way for you to adjust the Coverage Profiler. The cov_standard subclass of the coverage engine which comprises the User Interface of Coverage.app shows only a small part of what you can do with the engine. The engine analyzes the coverage log; cov_standard just displays the results in one of many ways you could want to see them. </p>
<p>
You could create a different subclass of cov_engine with a very different display. For example, your subclass might display a dialog that runs queries against the coverage statistics gathered by the engine. The display options might provide a view of the marked code for a filtered set of log entries, or only a graph of the profiling results.</p>
<p>
You may not want to subclass cov_engine to create a new interface from scratch because the cov_engine class provides an easier process. You can add functionality to cov_standard, or any cov_engine subclass, using Add-Ins. Cov_standard exposes this feature through a button in the main dialog of Coverage Profiler. When you run an Add-In on an instance of cov_standard such as Coverage Profiler, the Add-In can manipulate the capabilities of cov_engine, the coverage tables, as well as cov_standard. Add-Ins might also add new dialogs and features to the cov_standard visual interface.</p>
<h4>Writing Add-Ins</h4>
<p>
You can write Add-Ins to enhance the standard interface or you can subclass cov_standard to create your own wholly new interface.</p>
<h4>Enhancing the Standard Application</h4>
<p>
The following list includes features you might want to provide through Add-Ins:
<ul type=disc>
<li>
Add a visible feature to the main dialog.<br><br></li>
<li>
Add a dialog into the coverage engine formset (reference limitation below on how to make sure your dialog shows up in the right place).<br><br></li>
<li>
Display a separate dialog that accesses a Coverage engine feature (reference limitation below on how to make sure your dialog shows up in the right place).<br><br></li>
<li>
Provide a querying interface that uses the Source table and presents a list of all lines that meet your criteria, and filters or orders the results.</li>
</ul>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use the Adjust… methods (AdjustCoverageFilenameCursor(&nbsp;), AdjustSourceCursor(&nbsp;), and AdjustTargetCursor(&nbsp;)) of the Engine to add fields to the Source and Target tables when the engine creates them, and use these fields in your Add-Ins.
<ul type=disc>
<li>
Add file names to the IgnoredFiles cursor, to eliminate those files from analysis. This can save analysis time.<br><br></li>
<li>
Use the special Init hook for Add-Ins.<br><br></li>
<li>
Register Add-Ins for retrieval and easy access to a list of Add-Ins.<p class=tl>
The modal dialog class cov_AddInDialog in the standard coverage engine subclass, presents previously registered dialogs in a drop-down list. When you set the coverage engine lRegisterAdd-In option ON, the full path name of successfully run Add-Ins are added to the Windows Registry so you can easily run these Add-Ins again. The Standard UI class also allows you to set this property in the <a href="newcoverage_profiler_options_dialog_box.htm">Coverage Profiler Options dialog box</a>.</P><p class=tl>
The Coverage Engine object maintains a list of all registered Add-Ins in the aAddIns property.</P></li>
<li>
Use the final coverage.log field information, callstack, to design your own interface or your own view of the coverage log.</li>
</ul>
<p>
When you write Add-Ins, consider the following information:
<ul type=disc>
<li>
You can use any of the supported file types as Add-Ins. The supported file types are .qpr, .qpx, .mpr, .mpx, .app, .exe, .scx, fxp, .prg and .procedures (if the procedures are already available in an open procedure library).<br><br></li>
<li>
The Coverage Engine formset has an "invisible" toolbar. If your Add-In is nonvisual you can use this toolbar to contain it. If your Add-In is a visual control, the standard subclass main dialog .Cov_tools member container is probably the most convenient place to put it. This allows the position and size to be automatically synchronized with the rest of the dialog when it is resized.<br><br></li>
<li>
All the engine methods that use the Source and Target tables take optional arguments that will allow you to point these methods at the appropriate aliases while you're working with them. You can also change the current cSourceAlias and cTargetAlias property contents to match the pair of cursors in which you are interested. This allows you to compare multiple Coverage log runs to each other within the same interface. <br><br></li>
<li>
Limitations:<ul type=disc>
<li>
Add-Ins must accept one parameter (the Coverage engine passes a reference to itself).<br><br></li>
<li>
An Add-In must be one of the permitted file types, listed above.<br><br></li>
<li>
Procedures you use as Add-Ins should be available in a currently loaded procedure library (see <a href="lngset_procedure.htm">SET PROCEDURE</a>). The Engine does not use the IN <i>FileName</i> syntax, and it does not call procedures or .prg files as functions and RETURN their values. It does not use the NAME or LINK keywords on the DO FORM command; you can either manage the reference yourself, or allow the Engine to scope a form for you by making your form a member of the Engine formset.<br><br></li>
<li>
If you run an Add-In at startup, you must use a reference because the public _oCoverage variable is not yet available. At other times, you can use the public variable reference within your own code, if you prefer.<br><br></li>
<li>
When you write an Add-In as a form, if you create the form as ShowWindow&nbsp;=&nbsp;1 and run Coverage in its own frame, your Add-In forms should display in the Coverage frame. <br><br></li>
<li>
If you use .RunAddIn from the Command window, make sure the coverage frame is the active MDI frame before you instantiate your forms.</li>
</ul>
</li>
</ul>
<h4>Subclass Cov_Standard Class</h4>
<p>
You can subclass either the coverage engine or its standard subclass. The following list describes the structure of the COVERAGE project source file set.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=30%><B><b>File</b></B></td>
<td width=70%><B><b>Description</b></B></td>
</tr>
<tr valign=top>
<td width=30%>Coverage.prg</td>
<td width=70%>A "wrapper" for the coverage object, which instantiates the object.</td>
</tr>
<tr valign=top>
<td width=30%>Coverage.vcx<br>
Coverage.vct</td>
<td width=70%>All classes for the engine and its standard subclass.</td>
</tr>
<tr valign=top>
<td width=30%>Cov_short.mnx<br>
Cov_short.mnt</td>
<td width=70%>Shortcut menu.</td>
</tr>
<tr valign=top>
<td width=30%>Cov_pjx.frx<br>
Cov_pjx.frt</td>
<td width=70%>Default mechanism to deliver project-level results.</td>
</tr>
<tr valign=top>
<td width=30%>Coverage.h</td>
<td width=70%>Header file for all Coverage code, incorporating the following elements:<p>
*— Coverage character constants for log and parsing:</p>
<pre><code>   #INCLUDE COV_CHAR.H
</code></pre>
<p>
*— Coverage localized strings (can use some log and parsing constants):</p>
<pre><code>   #INCLUDE COV_LOCS.H
</code></pre>
<p>
*— Coverage common dialog component constants:</p>
<pre><code>   #INCLUDE COV_DLGS.H
</code></pre>
<p>
*— Coverage specs &amp; requirements:</p>
<pre><code>   #INCLUDE COV_SPEC.H
</code></pre>
<p>
*— Coverage registry object constants:</p>
<pre><code>   #INCLUDE COV_REGS.H
</code></pre>
<p>
*— Coverage tune-able options:</p>
<p>
<code>#INCLUDE COV_TUNE.H</code></p>
</td>
</tr>
</table><br>
<p>
The COVERAGE project source file set also includes various .ico .bmp, and .msk files.</p>
<p>
Use the file COV_TUNE.H (containing appropriate comments and explanations) to become familiar with options available to you without rewriting code.</p>
<p>
Since Add-In use is governed by the coverage engine superclass, any other coverage subclass you create can use Add-Ins in the same manner as the standard subclass. </p>
<p>
The coverage engine subclass instantiated by the default Coverage.app does not augment the coverage engine RunAddIn(&nbsp;) method in any way. It does, however, invoke a modal dialog box to allow the user to pick an Add-In before it invokes the coverage engine RunAddIn(&nbsp;) method. The modal dialog box receives a reference to the Coverage object and sets the coverage engine cAddIn property.</p>
<p>
If you write your own coverage engine subclass, ensure that your subclass can use the same modal dialog class (cov_AddInDialog) to handle Add-Ins as the standard Coverage application; the dialog box does not rely on any features of the standard subclass. </p>
<p>
You can call a different modal dialog box, set the cAddIn file name directly in the cAddIn property, or override the contents of the cAddIn property by passing the name of the Add-In file you wish to run to the RunAddIn(&nbsp;) method.</p>
<p>
However you access an Add-In to run in your subclass, you can investigate the list of Add-Ins registered to Coverage.app by checking the file names in the coverage engine aAddIns property.</p>
<p>
For details on the Properties, Events, and Methods of the coverage engine, see <a href="newcoverage_engine_object.htm">Coverage Engine Object</a>.</p>

<h2><a name="newproject_manager_hooks"></a><sup></sup>Project Manager Hooks</h2>
<p>
In previous versions of Visual FoxPro, the only access to a project was through direct table manipulation of the project’s .pjx file. In Visual FoxPro 6.0, you can access a project programmatically, allowing you to manipulate a project as an object. A project can be manipulated at design time while the project is open in the Project Manager, or at design time and run time without the Project Manager visible.</p>
<p>
The following are some of the actions you can perform programmatically on a project:
<ul type=disc>
<li>
Add or delete files from a project.<br><br></li>
<li>
Add files in the project to source code control applications (such as Microsoft Visual SourceSafe) and check files in and out of source code control.<br><br></li>
<li>
Determine the number of files in a project and their types.<br><br></li>
<li>
Open and modify files in the project.<br><br></li>
<li>
Change properties of the project.<br><br></li>
<li>
Change properties of files in the project.<br><br></li>
<li>
Change properties of Automation servers (.dll dynamic-link libraries or .exe executable files) built from the project.<br><br></li>
<li>
Execute code when events occur in the project.<br><br></li>
<li>
Rebuild the project, or build .app, .exe, or .dll files from the project.</li>
</ul>
<p>
With the new project manager hooks, advanced developer’s can create their own project managers with unique customized user interfaces.</p>
<h3>The Project Object Hierarchy</h3>
<p>
The object hierarchy for a project consists of the project, a project object, and its associated ProjectHook object. A project object contains a files collection, consisting of files in the project, and a servers collection, consisting of Automation servers created from the project. The following diagrams illustrates the project object hierarchy within the Visual FoxPro object model:</p>
<p>
<img src="projman.gif" border=0></p>
<h4>Projects Collection</h4>
<p>
The projects collection gives direct access to a project object, allowing you to manipulate the project and the files and servers the project contains. A project object is added to the projects collection whenever a project is created, opened or an .app, .dll, or .exe is built from the project.</p>
<p>
Like other OLE collections, you can obtain information about a project from the projects collection. For example, the following code uses the projects collection Count and Item properties to display the names of all the projects in the projects collection, and then uses the FOR EACH command to display the same information:</p>
<pre><code>nProjectCount = Application.Projects.Count

FOR nCount = 1 TO nProjectCount
 &nbsp; ? Application.Projects.Item(nCount).Name
NEXT

FOR EACH oProj IN Application.Projects
 &nbsp; ? oProj.Name
ENDFOR
</code></pre>
<p>
This line of code uses the ActiveProject property to add a program, Main.prg, to the currently active project:</p>
<pre><code>Application.ActiveProject.Files.Add('Main.prg')
</code></pre>
<p>
This line of code adds Main.prg to the first project added to the projects collection:</p>
<pre><code>Application.Projects[1].Files.Add('Main.prg')
</code></pre>
<p>
A projects collection has the following properties and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Properties</b></td>
<td class=label width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngcount_property.htm">Count</a></td>
<td width=50%></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Methods</b></td>
<td class=label width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngitem_method.htm">Item</a></td>
<td width=50%></td>
</tr>
</table><br>
<h4>The Project Object</h4>
<p>
The project object is instantiated whenever a project is opened from the File menu or with the CREATE PROJECT, MODIFY PROJECT, BUILD APP, BUILD DLL, BUILD EXE, or BUILD PROJECT commands. The project object allows you to programmatically manipulate the project, and can be accessed through the Visual FoxPro <a href="ctlapplication_object.htm">Application object</a>. Note that the Application object supports a new <a href="lngactiveproject_property.htm">ActiveProject</a> property that provides a project object reference to the project open in the currently active Project Manager.</p>
<p>
A project object has the following properties and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=47%><b>Properties</b></td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngapplication_property.htm">Application</a></td>
<td width=53%><a href="lngautoincrement_property.htm">AutoIncrement</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngbaseclass_property.htm">BaseClass</a></td>
<td width=53%><a href="lngbuilddatetime_property.htm">BuildDateTime</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngdebug_property.htm">Debug</a></td>
<td width=53%><a href="lngencrypted_property.htm">Encrypted</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lnghomedir_property.htm">HomeDir</a></td>
<td width=53%><a href="lngicon_property.htm">Icon</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngmainclass_property.htm">MainClass</a></td>
<td width=53%><a href="lngmainfile_property.htm">MainFile</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngname_property.htm">Name</a></td>
<td width=53%><a href="lngparent_property.htm">Parent</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngprojecthook_property.htm">ProjectHook</a></td>
<td width=53%><a href="lngprojecthookclass_property.htm">ProjectHookClass</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngprojecthooklibrary_property.htm">ProjectHookLibrary</a></td>
<td width=53%><a href="lngsccprovider_property.htm">SCCProvider</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngserverhelpfile_property.htm">ServerHelpFile</a></td>
<td width=53%><a href="lngserverproject_property.htm">ServerProject</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngtypelibclsid_property.htm">TypeLibCLSID</a></td>
<td width=53%><a href="lngtypelibdesc_property.htm">TypeLibDesc</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngtypelibname_property.htm">TypeLibName</a></td>
<td width=53%><a href="lngversioncomments_property.htm">VersionComments</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngversioncompany_property.htm">VersionCompany</a></td>
<td width=53%><a href="lngversioncopyright_property.htm">VersionCopyright</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngversiondescription_property.htm">VersionDescription</a></td>
<td width=53%><a href="lngversionlanguage_property.htm">VersionLanguage</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngversionnumber_property.htm">VersionNumber</a></td>
<td width=53%><a href="lngversionproduct_property.htm">VersionProduct</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngversiontrademarks_property.htm">VersionTrademarks</a></td>
<td width=53%><a href="lngvisible_property.htm">Visible</a></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=47%><b>Methods</b></td>
<td class=label width=53%></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngbuild_method.htm">Build</a></td>
<td width=53%><a href="lngcleanup_method.htm">CleanUp</a></td>
</tr>
<tr valign=top>
<td width=47%><a href="lngrefresh_method.htm">Refresh</a></td>
<td width=53%><a href="lngsetmain_method.htm">SetMain</a></td>
</tr>
</table><br>
<h4>The ProjectHook Object</h4>
<p>
A ProjectHook object is a Visual FoxPro base class that is instantiated by default whenever a project assigned to the ProjectHook object is opened. (You can include the NOPROJECTHOOK clause in CREATE PROJECT and MODIFY PROJECT to prevent a ProjectHook object from being instantiated for the project.)</p>
<p>
The ProjectHook object allows programmatic access to events that occur in a project. For example, you can execute code whenever a file is added to a project.</p>
<p>
You can specify a default ProjectHook class for new projects in the <a href="cmdprojects_tab_options_dialog_box.htm">Projects tab</a> of the Options dialog box. If a default ProjectHook class isn’t specified in the Projects tab, new projects aren’t assigned a ProjectHook class. You can specify a project hook class for an individual project (overriding the default ProjectHook class) in the <a href="cmdproject_information_dialog_box.htm">Project Information dialog box</a>. At runtime, you can use the ProjectHook property to specify a project hook class for a project. If you change the ProjectHook class for a project, the new ProjectHook class doesn’t take effect until the project is closed and opened again.</p>
<p>
A ProjectHook object has the following properties, events, and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Properties</b></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngbaseclass_property.htm">BaseClass</a></td>
<td width=52%><a href="lngclass_property.htm">Class</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngclasslibrary_property.htm">ClassLibrary</a></td>
<td width=52%><a href="lngcomment_property.htm">Comment</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngname_property.htm">Name</a></td>
<td width=52%><a href="lngoledropeffects_property.htm">OLEDropEffects</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngoledrophasdata_property.htm">OLEDropHasData</a></td>
<td width=52%><a href="lngoledropmode_property.htm">OLEDropMode</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngparent_property.htm">Parent</a></td>
<td width=52%><a href="lngparentclass_property.htm">ParentClass</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngtag_property.htm">Tag</a></td>
<td width=52%></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Events</b></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngafterbuild_event.htm">AfterBuild</a></td>
<td width=52%><a href="lngbeforebuild_event.htm">BeforeBuild</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngdestroy_event.htm">Destroy</a></td>
<td width=52%><a href="lngerror_event.htm">Error</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lnginit_event.htm">Init</a></td>
<td width=52%><a href="lngoledragdrop_event.htm">OLEDragDrop</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngoledragover_event.htm">OLEDragOver</a></td>
<td width=52%><a href="lngolegivefeedback_event.htm">OLEGiveFeedBack</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngqueryaddfile_event.htm">QueryAddFile</a></td>
<td width=52%><a href="lngquerymodifyfile_event.htm">QueryModifyFile</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngqueryremovefile_event.htm">QueryRemoveFile</a></td>
<td width=52%><a href="lngqueryrunfile_event.htm">QueryRunFile</a></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=49%><b>Methods</b></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=49%><a href="lngaddproperty_method.htm">AddProperty</a></td>
<td width=51%><a href="lngreadexpression_method.htm">ReadExpression</a></td>
</tr>
<tr valign=top>
<td width=49%><a href="lngreadmethod_method.htm">ReadMethod</a></td>
<td width=51%><a href="lngresettodefault_method.htm">ResetToDefault</a></td>
</tr>
<tr valign=top>
<td width=49%><a href="lngsaveasclass_method.htm">SaveAsClass</a></td>
<td width=51%><a href="lngwriteexpression_method.htm">WriteExpression</a></td>
</tr>
</table><br>
<h4>Project Object and the ProjectHook Object Interaction</h4>
<p>
When you open the Project Manager from the File menu, or with the <a href="lngcreate_project.htm">CREATE PROJECT</a> or <a href="lngmodify_project.htm">MODIFY PROJECT</a> commands, the Project Manager window appears and a project object is instantiated with its associated ProjectHook object. Project build commands (<a href="lngbuild_project.htm">BUILD PROJECT</a>, <a href="lngbuild_app.htm">BUILD APP</a>, <a href="lngbuild_dll.htm">BUILD DLL</a>, and <a href="lngbuild_exe.htm">BUILD EXE</a>) also instantiate the project and ProjectHook objects.</p>
<p>
When an event occurs in a project, the project object passes the event to the ProjectHook object. User code in the event in the ProjectHook object is executed and control is passed back to the Project object. The value returned to the project object from the ProjectHook object determines if the project object finishes the operation. Placing NODEFAULT in the event code prevents the default action from being performed. For example, placing NODEFAULT in the QueryAddFile event prevents a file from successfully being added to a project.</p>
<h4>Files Collection</h4>
<p>
The files collection gives direct access to a file object, allowing you to manipulate file objects in a project while the project is open. Like other OLE collections, you can obtain information about a file in a project from the files collection. For example, the following code uses the files collection Count and Item properties to display the names of all the files in the files collection, and then uses the FOR EACH command to display the same information:</p>
<pre><code>nFileCount = Application.ActiveProject.Files.Count

FOR nCount = 1 TO nFileCount
 &nbsp; ? Application.ActiveProject.Files.Item(nCount).Name
NEXT

FOR EACH oProj IN Application.ActiveProject.Files
 &nbsp; ? oProj.Name
ENDFOR
</code></pre>
<p>
This line of code uses the ActiveProject property to add a file, Main.prg, to the currently active project:</p>
<pre><code>Application.ActiveProject.Files.Add('Main.prg')
</code></pre>
<p>
This line of code adds Main.prg to the first project added to the projects collection:</p>
<pre><code>Application.Projects[1].Files.Add('Main.prg')
</code></pre>
<p>
The files collection has the following properties and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Properties</b></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngcount_property.htm">Count</a></td>
<td width=50%></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Methods</b></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngadd_method.htm">Add</a></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%><u>Item</u></td>
<td width=50%></td>
</tr>
</table><br>
<h4>File Object</h4>
<p>
The file object allows you to manipulate individual files in a project.</p>
<p>
A file object has the following properties and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Properties</b></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcodepage_property.htm">CodePage</a></td>
<td width=52%><a href="lngdescription_property.htm">Description</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngexclude_property.htm">Exclude</a></td>
<td width=52%><a href="lngfileclass_property.htm">FileClass</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngfileclasslibrary_property.htm">FileClassLibrary</a></td>
<td width=52%><a href="lnglastmodified_property.htm">LastModified</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngname_property.htm">Name</a></td>
<td width=52%><a href="lngreadonly_property.htm">ReadOnly</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngsccstatus_property.htm">SCCStatus</a></td>
<td width=52%><a href="lngtype_property.htm">Type</a></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Methods</b></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngaddtoscc_method.htm">AddToSCC</a></td>
<td width=52%><a href="lngcheckin_method.htm">CheckIn</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngcheckout_method.htm">CheckOut</a></td>
<td width=52%><a href="lnggetlatestversion_method.htm">GetLatestVersion</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngmodify_method.htm">Modify</a></td>
<td width=52%><a href="lngremove_method.htm">Remove</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngremovefromscc_method.htm">RemoveFromSCC</a></td>
<td width=52%><a href="lngrun_method.htm">Run</a></td>
</tr>
<tr valign=top>
<td width=48%><a href="lngundocheckout_method.htm">UndoCheckOut</a></td>
<td width=52%></td>
</tr>
</table><br>
<h4>Servers Collection</h4>
<p>
The servers collection gives direct access to a server object, allowing you to manipulate the servers that a project contains. A server object is added to the servers collection whenever a .dll dynamic-link library or .exe executable file containing an Automation server is built from the project. For more information about creating Automation servers, see <a href="dgadding_ole.htm#dgcreating_ole_servers">Creating Automation Servers</a> in Chapter 16, “Adding OLE,” in the <i>Programmer's Guide</i>.</p>
<p>
A servers collection has the following properties and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Properties</b></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngcount_property.htm">Count</a></td>
<td width=50%></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=50%><b>Methods</b></td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%><a href="lngitem_method.htm">Item</a></td>
<td width=50%></td>
</tr>
</table><br>
<h4>Server Object</h4>
<p>
The server object lets you determine information (including type library information) about Automation servers contained in a project. This information is also available in the <a href="cmdserver_tab_project_information_dialog_box.htm">Servers tab</a> of the Project Information dialog box. Note that a server object isn’t created until the project containing the OLEPUBLIC class (specified in the <a href="lngdefine_class.htm">DEFINE CLASS</a> command) is built.</p>
<p>
A server object has the following properties and methods:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=41%><b>Properties</b></td>
<td width=59%></td>
</tr>
<tr valign=top>
<td width=41%><a href="lngclsid_property.htm">CLSID</a></td>
<td width=59%><a href="lngdescription_property.htm">Description</a></td>
</tr>
<tr valign=top>
<td width=41%><a href="lnghelpcontextid_property.htm">HelpContextID</a></td>
<td width=59%><a href="lnginstancing_property.htm">Instancing</a></td>
</tr>
<tr valign=top>
<td width=41%><a href="lngprogid_property.htm">ProgID</a></td>
<td width=59%><a href="lngserverclass_property.htm">ServerClass</a></td>
</tr>
<tr valign=top>
<td width=41%><a href="lngserverclasslibrary_property.htm">ServerClassLibrary</a></td>
<td width=59%></td>
</tr>
</table><br>
<h3>Project Object Architecture</h3>
<p>
A Visual FoxPro project object exposes an IDispatch interface so that Automation clients, ActiveX controls, and other COM objects can access the project object through standard OLE interfaces. Because a project object now exposes an IDispatch interface, the errors that can be generated when manipulating projects are OLE errors.</p>
<h3>Language Enhancements</h3>
<p>
Two new clauses have been added to the CREATE PROJECT and MODIFY PROJECT commands. The first clause, NOPROJECTHOOK, prevents the ProjectHook object from being instantiated for a project. The second clause, NOSHOW, opens a project without displaying it in the Project Manager, allowing you to programmatically manipulate the project without displaying it. You can use the Visible property to later display the Project Manager. For more information about these new clauses, see <a href="lngcreate_project.htm">CREATE PROJECT</a> and <a href="lngmodify_project.htm">MODIFY PROJECT</a>.</p>
<h3>Project Events</h3>
<p>
The following sections describe events and the order in which they occur when projects are created, modified, closed, built, and so on.</p>
<h4>Creating a New Project</h4>
<p>
The following events occur when you execute CREATE PROJECT, create a new project from the <b>File</b> menu, or click the <b>New</b> toolbar button and specify to create a new project:
<ol>
<li>
The project object is created.<br><br></li>
<li>
The ProjectHook object is instantiated.<br><br></li>
<li>
The Init event for the ProjectHook object occurs. If the Init event returns true (.T.), the default, the project is created and the project is displayed in the Project Manager.<p class=tl>
If the Init event returns false (.F.), the project isn’t created, the project and ProjectHook objects are released, and the Project Manager isn’t displayed.</P></li>
</ol>
<h4>Modifying an Existing Project</h4>
<p>
The following events occur when you execute MODIFY PROJECT, modify an existing project from the <b>File</b> menu, or click the <b>Open</b> toolbar button and specify an existing or new project:
<ol>
<li>
The project object is created. The project object obtains its values from the project’s .pjx file.<br><br></li>
<li>
The ProjectHook object is instantiated.<br><br></li>
<li>
The Init event for the ProjectHook object occurs. If the Init event returns true (.T.) (the default), the project is opened for modification in the Project Manager.<p class=tl>
If the Init event returns false (.F.), the project isn’t opened for modification, the project and ProjectHook objects are released, and the Project Manager isn’t displayed.</P></li>
</ol>
<h4>Closing a Project</h4>
<p>
The following events occur when an open project is closed:
<ol>
<li>
The ProjectHook Destroy event occurs and the ProjectHook object is released.<br><br></li>
<li>
The Project object is released.</li>
</ol>
<h4>Issuing BUILD APP, BUILD DLL, or BUILD EXE</h4>
<p>
The following events occur when BUILD APP, BUILD DLL, or BUILD EXE is issued:
<ol>
<li>
The project object is created. The project object obtains its values from the project’s .pjx file.<br><br></li>
<li>
The ProjectHook object is instantiated.<br><br></li>
<li>
The Init event for the ProjectHook object occurs. If the Init event returns true (.T.), the default, the ProjectHook BeforeBuild event occurs. If NODEFAULT is included in the BeforeBuild event, the .app, .dll, or .exe isn’t built. Otherwise, the build process continues.<p class=tl>
If any files are added to the project during the build process, the ProjectHook QueryAddFile event occurs before each file is added. If NODEFAULT is included in the QueryAddFile event, a file isn’t added to the project. Otherwise, the file is added to the project. When the .app, .dll, or .exe is successfully built, the ProjectHook AfterBuild event occurs, and then the ProjectHook Destroy event occurs.</P><p class=tl>
If the Init event returns false (.F.), the app, .dll, or .exe isn’t built, and the project and ProjectHook objects are released.</P></li>
</ol>
<h4>Issuing BUILD PROJECT</h4>
<p>
The following events occur when BUILD PROJECT with the FROM clause is issued. If the FROM clause is omitted, the events occur in the order described above when BUILD APP, BUILD DLL, or BUILD EXE is issued.
<ol>
<li>
The project object is created. The project object obtains its values from the project’s .pjx file.<br><br></li>
<li>
The ProjectHook object is instantiated.<br><br></li>
<li>
The Init event for the ProjectHook object occurs. If the Init event returns true (.T.), the default, the files specified in the FROM clause are added individually to the project. The ProjectHook QueryAddFile event occurs before each file is added to the project. If NODEFAULT is included in the QueryAddFile event, the file isn’t added to the project. Otherwise, the file is added to the project.<p class=tl>
The ProjectHook BeforeBuild event then occurs. If NODEFAULT is included in the BeforeBuild event, the project isn’t built. Otherwise, the project is built. When the project build is complete, the ProjectHook AfterBuild event occurs, and then the ProjectHook Destroy event occurs.</P><p class=tl>
If the ProjectHook Init event returns false (.F.), the project isn’t built. The project and ProjectHook objects are released and a new .pjx file isn’t created.</P></li>
</ol>
<h4>Using a Drag and Drop Operation</h4>
<p>
The following events occur when you drag a file or a set of files over the outline section (treeview) of the Project Manager:
<ol>
<li>
When the mouse pointer is positioned over the outline section of the Project Manager, the ProjectHook OLEDragOver event occurs with the <i>nState</i> parameter set to 0 (DRAG_ENTER in Foxpro.h). The OLEDragOver event then occurs repeatedly with the<i> nState </i>parameter set to 2 (DRAG_OVER in Foxpro.h). If the mouse pointer moves outside of the outline section of the Project Manager, the OLEDragOver event occurs with the <i>nState</i> parameter set to 1 (DRAG_LEAVE in Foxpro.h).<br><br></li>
<li>
The ProjectHook OLEDragDrop event occurs if you release the mouse button while the mouse pointer is positioned over the outline section of the Project Manager. By default, Visual FoxPro adds each file dropped on the Project Manager to the project. The ProjectHook QueryAddFile event occurs before each file is added to the project.</li>
</ol>
<h4>Adding a File with the Add Button</h4>
<p>
The following events occur when you add a file to a project by clicking the <b>Add</b> button in the Project Manager:
<ol>
<li>
The <b>Open</b> dialog box appears.<br><br></li>
<li>
If you select a file and choose <b>OK</b>, a file object is created for the file you select.<br><br></li>
<li>
The ProjectHook QueryAddFile event occurs and the name of the file object is passed to the event. If NODEFAULT is included in the QueryAddFile event, the file isn’t added to the project. Otherwise, the file is added to the project.</li>
</ol>
<h4>Adding a File with the New Button</h4>
<p>
The following events occur when you add a new file to a project by clicking the <b>New</b> button in the Project Manager:
<ol>
<li>
The appropriate designer or editor for the file is displayed.<br><br></li>
<li>
When the new file is saved, the <b>Save As</b> dialog box is displayed. Clicking <b>Save</b> creates a file object for the new file.<br><br></li>
<li>
The ProjectHook QueryAddFile event occurs and the name of the file object is passed to the event. If NODEFAULT is included in the QueryAddFile event, the file isn’t added to the project. Otherwise, the file is added to the project.</li>
</ol>
<h4>Modifying a File with the Modify Button</h4>
<p>
The following events occur when you modify a file in a project by clicking the <b>Modify</b> button in the Project Manager:
<ol>
<li>
The ProjectHook QueryModifyFile event occurs before the appropriate designer or editor for the file is displayed.<br><br></li>
<li>
The file object for the file to modify is passed as a parameter to the QueryModifyFile event. If NODEFAULT is included in the QueryModifyFile event, the appropriate designer or editor for the file isn’t displayed and the file isn’t modified. Otherwise, the file is opened in the appropriate designer or editor for modification.</li>
</ol>
<h4>Removing a File with the Remove Button</h4>
<p>
The following events occur when you remove a file in a project by clicking the <b>Remove</b> button in the Project Manager:
<ol>
<li>
The ProjectHook QueryRemoveFile event occurs.<br><br></li>
<li>
The file object for the file to be removed is passed as a parameter to the QueryRemoveFile event. If NODEFAULT is included in the QueryRemoveFile event, the file isn’t removed from the project. Otherwise, the file is removed from the project.</li>
</ol>
<h4>Executing a File with the Run Button</h4>
<p>
The following events occur when you execute a file in a project by clicking the <b>Run</b> button in the Project Manager:
<ol>
<li>
The ProjectHook QueryRunFile event occurs.<br><br></li>
<li>
The file object for the file to be executed is passed as a parameter to the QueryRunFile event. If NODEFAULT is included in the QueryRunFile event, the file isn’t executed. Otherwise, the file is executed.</li>
</ol>
<h4>Rebuilding a Project or Building a File with the Build Button</h4>
<p>
The following events occur when you rebuild the project or build an .app, .dll, or .exe from a project by clicking the <b>Build</b> button in the Project Manager:
<ol>
<li>
The <b>Build Options</b> dialog box is displayed.<br><br></li>
<li>
You can choose <b>Rebuild Project</b>, <b>Build Application</b>, <b>Build Executable</b>, or <b>Build COM DLL</b>, and specify additional build options. If you click <b>Cancel</b>, the build doesn’t occur.<br><br></li>
<li>
The ProjectHook BeforeBuild event occurs if you click <b>OK</b>, and the build process begins.<br><br></li>
<li>
When the build is completed, the ProjectHook AfterBuild event occurs.</li>
</ol>
<h3>Project Manager Hooks Sample</h3>
<p>
The Visual FoxPro Solutions Sample application includes a sample named “Track activities in a project” that demonstrates many of the new Project Manager hooks.</p>
<p>
<b>To run the Solutions Sample application</b>
<ul type=disc>
<li>
Enter the following in the <b>Command</b> window:<pre><code>DO (HOME(2) + 'solution\solution')
</code></pre>
<p class=tl>
&nbsp;–&nbsp;Or&nbsp;–&nbsp;</P></li>
</ul>
<ol>
<li>
From the <b>Program</b> menu, choose <b>Do</b>.<br><br></li>
<li>
Choose the …\<b>Samples\Vfp98\Solution</b> folder.<br><br></li>
<li>
Double-click <b>Solution.app</b>.</li>
</ol>
<p>
<b>To run the “Track activities in a project” sample</b>
<ol>
<li>
After starting Solution.app, double-click <b>New Features for Visual FoxPro 6.0</b>.<br><br></li>
<li>
Click <b>Track activities in a project</b> and then click the <b>Run Sample</b> button.</li>
</ol>
<p>
The “Track activities in a project” sample allows you to open a project and then manipulate the project in any manner. Any changes you make to the project are stored in a table. When you close the project, you can view the changes you made to the project in a Browse window.</p>
<p>
For more information about how the “Track activities in a project” sample works and to take a closer look at the code behind the sample, you can open the form used to create the sample.</p>
<p>
<b>To open the “Track activities in a project” form</b>
<ol>
<li>
After starting Solution.app, double-click <b>New Features for Visual FoxPro 6.0</b>.<br><br></li>
<li>
Click <b>Track activities in a project</b> and then click the <b>See Code</b> button.</li>
</ol>
<p>
Acttrack.scx, the form used to create the “Track activities in a project” sample, is opened in the Form designer.</p>
<p>
You may also want to take a closer look at the ProjectHook class library, Project_hook.vcx, that is assigned to the project you open in the “Track activities in a project” sample. Most of the code that is executed when project events occur is in the event procedures in this class library. Project_hook.vcx is located in the …\Samples\Vfp98\Solution\Tahoe directory.</p>

<h2><a name="newnew_and_enhanced_wizards"></a><sup></sup>New and Enhanced Wizards and Builders</h2>
<p>
The following wizards and builders are either new or enhanced.</p>
<p class=label>
<a href="wizapplication_wizard_6.htm"><b>Application Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>New</i></b></p>
<p>
The Application Wizard for Visual FoxPro 6.0 provides support for the enhanced <a href="#newenhanced_application_framework">Application Framework</a> and the new <a href="cmdapplication_builder.htm">Application Builder</a>. You can run the Application Wizard from the <a href="#newcomponent_gallery_overview">Component Gallery</a> or from the Visual FoxPro <b>Tools</b> menu by clicking <b>Wizards</b> and then <b>Application</b>. </p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The <a href="wizapplication_wizard.htm">Application Wizard (5.0)</a> from Visual FoxPro 5.0 is available from the <a href="cmdwizard_selection_dialog_box.htm">Wizard Selection dialog box</a> for backward compatibility.</p>
<p class=label>
<a href="wizconnection_wizards_overview.htm"><b>Connection Wizards</b></a><b> &nbsp;&nbsp;&nbsp; <i>New</i></b></p>
<p>
The Connection Wizards include the <b>Code Generation Wizard</b> and the <b>Reverse Engineering Wizard</b>. These wizards let you easily manage transfers between Visual FoxPro class libraries and Microsoft Visual Modeler models.</p>
<p class=label>
<a href="wizdatabase_wizard.htm"><b>Database Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>New</i></b></p>
<p>
The Visual FoxPro Database Wizard uses templates to create a database and tables. You can also use the wizard to create indexes and relationships between the tables in a new database.</p>
<p class=label>
<a href="wizdocumenting_wizard.htm"><b>Documenting Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro Documenting Wizard now provides an option to use the <a href="smpcode_analyzer.htm">Code Analyzer</a> as documentation is created.</p>
<p class=label>
<a href="wizform_wizard.htm"><b>Form Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The updated Visual FoxPro Form Wizard provides input mask, format, and a field mapping class for specific fields as stored in a database. This wizard also includes more form style options, including scrolling forms.</p>
<p class=label>
<a href="wizgraph_wizard.htm"><b>Graph Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro Graph Wizard creates a graph from a Visual FoxPro table using Microsoft Graph. This updated wizard supports the Graph 8.0 component of Microsoft Office 97, including automation of the datasheet and the Series by Row/Col option.</p>
<p class=label>
<a href="wizimport_wizard.htm"><b>Import Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The updated Visual FoxPro Import Wizard supports Office 97 and Microsoft Excel multisheet handling and provides the option to import a table to a database.</p>
<p class=label>
<a href="wizlabel_wizard.htm"><b>Label Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro Label Wizard now includes greater control of label fonts and direct access to the Add Label Wizard.</p>
<p class=label>
<a href="wizmail_merge_wizard.htm"><b>Mail Merge Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro Mail Merge Wizard creates either a data source for a Microsoft Word merged document or a text file that can be used by any word processor. This updated wizard supports the Microsoft Word 8.0 component of Office 97 and true VBA Automation with <a href="ctlapplication_object.htm">Application object</a> and collection support.</p>
<p class=label>
<a href="wizpivottable_wizard.htm"><b>Pivot Table Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro PivotTable Wizard helps you create interactive worksheet tables that summarize and analyze data between two or more fields in a table. This updated wizard supports the Microsoft Excel 8.0 component of Office 97. You can choose either to save a pivot table directly in Excel or to add one as an object on a form.</p>
<p class=label>
<a href="wizreport_wizard.htm"><b>Report Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro Report Wizard now includes advanced grouping and summary functionality so you can more easily customize your reports inside this single wizard. There are also more report styles to choose from.</p>
<p class=label>
<a href="wizremote_view_wizard.htm"><b>Remote View Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro View Wizard now provides access to System tables so you can use the functionality of ODBC drivers that support these.</p>
<p class=label>
<a href="wizsample_wizard.htm"><b>Sample Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>New</i></b></p>
<p>
The Visual FoxPro Sample Wizard provides simple steps to creating your own wizard. The output is an HTML file created from records in the data source you specify.</p>
<p class=label>
<a href="wizsetup_wizard.htm"><b>Setup Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro Setup Wizard now provides enhanced support for ActiveX controls and override of the Windows file number limit for use in NT setups. It also enables you to add external .DLLs to your application through the setup and to create Web-based installs.</p>
<p class=label>
<a href="wiztable_wizard.htm"><b>Table Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>Enhanced</i></b></p>
<p>
The Visual FoxPro Table Wizard now provides new table templates, optional style settings, support for both Character and Memo binary data types, and access to databases. You can add your table to a database and you can use database settings to determine the formats of fields you add to your table. You can also establish relationships between tables in the database.</p>
<p class=label>
<a href="wizweb_publishing_wizard.htm"><b>Web Publishing Wizard</b></a><b> &nbsp;&nbsp;&nbsp; <i>New</i></b></p>
<p>
The Visual FoxPro Web Publishing Wizard generates an HTML file created from records in the data source you specify.</p>

<h2><a name="newenhanced_application_framework"></a><sup></sup>Enhanced Application Framework</h2>
<p>
The Visual FoxPro 6.0 Application Framework is designed to make it easier to develop Visual FoxPro applications. You can access the enhanced Application Framework through the <a href="wizapplication_wizard_6.htm">Application Wizard</a> or through the <b>New Application</b> item of the <a href="newcomponent_gallery_window.htm">Component Gallery</a>. This enhanced framework supports the framework available in Visual FoxPro 5.0 including the following:
<ul type=disc>
<li>
A project (.pjx) file.<br><br></li>
<li>
A main program file (Main.prg) for global and environmental settings, launching any Splash Screen or other specific calls, and launching any Quick Start form.<br><br></li>
<li>
A main menu.<br><br></li>
<li>
The <a href="wizframework_appobject.htm">Visual FoxPro Framework Application Object</a> for running the main menu, forms toolbars and report management, error handling, and data session management.</li>
</ul>
<p>
The Visual FoxPro 6 framework uses an enhanced Application Object and provides the following additional elements:
<ul type=disc>
<li>
A master Include file that contains the APP_GLOBAL value to ease localization and for use by components with settings and strings. <br><br></li>
<li>
An optional configuration file (Config.fpw) for certain types of applications.<br><br></li>
<li>
Uses the <a href="ctlprojecthook_object.htm">ProjectHook class</a> for control of events related to the project.<br><br></li>
<li>
An Application Meta table to hold information used by the project hook class and application builders for creating forms within the new project.<br><br></li>
<li>
Use the <a href="cmdapplication_builder.htm">Application Builder</a> to make it easy to add components to the project.</li>
</ul>
<h3>Starting the Application Builder</h3>
<p>
You can start the <a href="cmdapplication_builder.htm">Application Builder</a> from the Visual FoxPro <b>Tools</b> menu or from the <b>Component Gallery</b>.</p>
<p>
<b>To start the Application Builder from the Tools menu</b>
<ol>
<li>
Click <b>Wizards</b>, and then click <b>All</b>.<br><br></li>
<li>
Click <b>Application Builder</b> from the <b>Wizard Selection</b> dialog box.</li>
</ol>
<p>
<b>To start the Application Builder from the Component Gallery</b>
<ul type=disc>
<li>
Double click the <b>New Application</b> item.<p class=tl>
When you choose <b>OK</b>, the builder closes, applying the property settings from all tabs.</P></li>
</ul>
<p>
You can also start the Application Builder with a right-click in the Project Manager window, but when opened this way, Application Builder creates only meta tables for your Application — you will see only three tabs in the Application Builder. The only way to provide the full Enhanced Application Framework to your application is through the <a href="wizapplication_wizard_6.htm">Application Wizard</a> or through the New Application item of the <a href="newcomponent_gallery_window.htm">Component Gallery</a>.</p>
<p>
For details on the contents and use of the enhanced Application Framework and the Application Builder, see <a href="cmddeveloping_applications_with_framework.htm">Developing Applications Using the Application Framework</a> in Help.</p>
<h3>Files</h3>
<p class=dt>
<b>Master Include File</b></p>
<p class=indent>
This common #INCLUDE file is used by components with settings and strings. The file also includes the APP_GLOBAL value, the name used by components for referencing.</p>
<p class=dt>
<b>Configuration File</b></p>
<p class=indent>
An optional Config.fpw used for applications such as top-level forms in order to implement settings such as SCREEN=OFF.</p>
<p class=dt>
<b>Project Hook Class</b></p>
<p class=indent>
Controls events related to the project such as adding new files. It also can access Application Builder for setting actions and properties of file interaction within the application.</p>
<p class=dt>
<b>Application Meta Table</b></p>
<p class=indent>
Contains information such as project settings made or used by the Application Builder and Project Hooks. </p>
<p class=dt>
<b>Application Builder</b></p>
<p class=indent>
Facilitates adding components to the project and setting properties such as navigation options.</p>
<p>
An application framework includes the project file and a starter class library subclassed from the Visual FoxPro base classes, ready for you to populate with new or existing tables and documents.</p>
<p>
The framework allows you to specify whether to create a complete application or just an application framework. If you choose to create a complete application, you can either include in the application a database and forms or reports you have already created, or you can create a new application from scratch using a database template. If you choose to create a framework, you can go back later and add components to the framework.</p>
<h3>Creating a Framework</h3>
<p>
You can create an Application Framework by using the <a href="wizapplication_wizard_6.htm">Application Wizard</a> or by using the New Application item in the <a href="#newcomponent_gallery_overview">Component Gallery</a>. When you use the Component Gallery, a new project folder item is added to your Favorites folder.</p>
<p>
Whichever method you use, Visual FoxPro displays an <a href="cmdapplication_builder.htm">Application Builder</a> so you can add information to be stored in a meta table.</p>
<p>
<b>To create an application</b>
<ol>
<li>
From the <b>Tools</b> menu, click <b>Wizards</b>, and then click <b>Application</b>.<p class=tl>
-or-</P></li>
<li value=1>
In the Catalogs folder of the <b>Component Gallery</b>, double-click the <b>New Application</b> item.<br><br></li>
<li>
In the <b>Enter Project Name</b> dialog box, <ul type=disc>
<li>
Specify the project name.<br><br></li>
<li>
Accept or locate the project file.<br><br></li>
<li>
Choose your options to <b>Create project directory structure</b> (default) and <b>Add to Favorites catalog</b> (default)</li>
</ul>
</li>
</ol>
<p>
For details on the contents and use of the enhanced Application Framework and the Application Builder, see <a href="cmddeveloping_applications_with_framework.htm">Developing Applications Using the Application Framework</a> in Help.</p>
<p>
You can also use the <a href="#newcomponent_gallery_overview">Component Gallery</a> to add forms, reports, data, and service objects to your new application framework and controls to forms. </p>
<p>
When you use the Component Gallery to add a form to an application, you can create a new form or subclass from an existing class.</p>
</BODY>
</HTML>

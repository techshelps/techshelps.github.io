<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object-Oriented Programming</title>
<style>
<link disabled rel=stylesheet href=/stylesheets/msdn_ie3.css>
<style type="text/css">
@import url(/stylesheets/msdn_ie4.css);
</style></HEAD>
<BODY>

<h1><a name="dgobject_oriented_programming"></a><sup></sup>Chapter 3: Object-Oriented Programming</h1>
<p>
While Visual FoxPro still supports standard procedural programming, new extensions to the language give you the power and flexibility of object-oriented programming.</p>
<p>
Object-oriented design and object-oriented programming represent a change in focus from standard procedural programming. Instead of thinking about program flow from the first line of code to the last line of code, you need to think about creating objects: self-contained components of an application that have private functionality as well as functionality that you can expose to the user.</p>
<p>
This chapter discusses:</p>
<ul type=disc>
<li>
<a href="#dgunderstanding_objects_in_visual_foxpro">Understanding Objects in Visual FoxPro</a></li>
<li>
<a href="#dgunderstanding_classes_in_visual_foxpro">Understanding Classes in Visual FoxPro</a></li>
<li>
<a href="#dgmatching_the_class_to_the_task">Matching the Class to the Task</a></li>
<li>
<a href="#dgcreating_classes">Creating Classes</a></li>
<li>
<a href="#dgadding_classes_to_forms">Adding Classes to Forms</a></li>
<li>
<a href="#dgdefining_classes_programmatically">Defining Classes Programmatically</a></li>
</ul>

<h2><a name="dgunderstanding_objects_in_visual_foxpro"></a>Understanding Objects in Visual FoxPro</h2>
<p>
In Visual FoxPro, <a href="glsform.htm">forms</a> and <a href="glscontrol.htm">controls</a> are objects that you include in your applications. You manipulate these objects through their <a href="glsproperty.htm">properties</a>, <a href="glsevent.htm">events</a>, and <a href="glsmethod.htm">methods</a>.</p>
<p>
The object-oriented Visual FoxPro language extensions provide you with a great deal of control over the objects in your applications. These extensions also make it easier to create and maintain libraries of reusable code, giving you:</p>
<ul type=disc>
<li>
More compact code.</li>
<li>
Easier incorporation of code into applications without elaborate naming schemes.</li>
<li>
Less complexity when integrating code from different files into an application.</li>
</ul>
<p>
Object-oriented programming is largely a way of packaging code so that it can be reused and maintained more easily. The primary package is called a <a href="glsclass.htm">class</a>.</p>
<h2>Classes and Objects: <br>
The Building Blocks of Applications</h2>
<p>
Classes and objects are closely related, but they are not the same. A class contains information about how an object should look and behave. A class is the blueprint or schematic of an object. The electrical schematic and design layout of a telephone, for example, would approximate a class. The object, or an instance of the class, would be a telephone.</p>
<p class=label>
<b>The class determines the characteristics of the object.</b></p>
<p>
<img src="afd03001.gif" border=0></p>
<h3>Objects Have Properties</h3>
<p>
An object has certain <a href="glsproperty.htm">properties</a>, or attributes. For example, a phone is a certain color and size. When you put a phone in your office, it has a certain position on your desk. The receiver can be on or off the hook.</p>
<p>
Objects you create in Visual FoxPro also have properties that are determined by the class the object is based on. These properties can be set at <a href="glsdesign_time.htm">design time</a> or at <a href="glsrun_time.htm">run time</a>.</p>
<p>
For example, some of the properties that a <a href="glscheck_box_.htm">check box</a> can have are listed in the following table:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%>Caption</td>
<td width=75%>The descriptive text beside the check box.</td>
</tr>
<tr valign=top>
<td width=25%>Enabled</td>
<td width=75%>Specifies whether the check box can be chosen by a user.</td>
</tr>
<tr valign=top>
<td width=25%>ForeColor</td>
<td width=75%>The color of the caption text.</td>
</tr>
<tr valign=top>
<td width=25%>Left</td>
<td width=75%>The position of the left side of the check box.</td>
</tr>
<tr valign=top>
<td width=25%>MousePointer</td>
<td width=75%>How the mouse pointer looks when over the check box.</td>
</tr>
<tr valign=top>
<td width=25%>Top</td>
<td width=75%>The position of the top of the check box.</td>
</tr>
<tr valign=top>
<td width=25%>Visible</td>
<td width=75%>Specifies whether the check box is visible.</td>
</tr>
</table><br>
<h3>Objects Have Associated Events and Methods</h3>
<p>
Each object recognizes and can respond to certain actions called <a href="glsevent.htm">events</a>. An event is a specific and predetermined activity, initiated by either a user or the system. Events, in most cases, are generated by user interaction. For example, with a phone, an event is triggered when a user takes the receiver off the hook. Events are also triggered when the user presses the buttons to make a call.</p>
<p>
In Visual FoxPro, user actions that trigger events include clicks, mouse moves, and key presses. Initializing an object and encountering a line of code that causes an error are system-initiated events.</p>
<p>
<a href="glsmethod.htm">Methods</a> are procedures that are associated with an object. Methods are different from normal Visual FoxPro procedures: methods are inextricably bound with an object and are called differently than normal Visual FoxPro procedures are called.</p>
<p>
Events can have methods associated with them. For example, if you write method code for the Click event, that code is executed when the Click event occurs. Methods can also exist independently of any events. These methods must be explicitly called in code.</p>
<p>
The event set, while extensive, is fixed. You can’t create new events. The method set, however, is infinitely extendible.</p>
<p>
The following table lists some of the events associated with a <a href="glscheck_box_.htm">check box</a>:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Event</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngclick_event.htm">Click</a></td>
<td width=75%>User clicks the check box.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lnggotfocus_event.htm">GotFocus</a></td>
<td width=75%>User selects the check box by clicking it or tabbing to it.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lnglostfocus_event.htm">LostFocus</a></td>
<td width=75%>User selects another control.</td>
</tr>
</table><br>
<p>
The following table lists some of the methods associated with a check box:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Method</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngrefresh_method.htm">Refresh</a></td>
<td width=75%>The value of the check box is updated to reflect any changes that may have occurred to the underlying data source.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngsetfocus_method.htm">SetFocus</a></td>
<td width=75%>The focus is set to the check box just as though the user had pressed the TAB key until the check box was selected.</td>
</tr>
</table><br>
<p>
See Chapter 4, <a href="dgunderstanding_the_event_model.htm">Understanding the Event Model</a>, for a discussion of the order in which events occur.</p>

<h2><a name="dgunderstanding_classes_in_visual_foxpro"></a>Understanding Classes in Visual FoxPro</h2>
<p>
All of the <a href="glsproperty.htm">properties</a>, <a href="glsevent.htm">events</a>, and <a href="glsmethod.htm">methods</a> for an object are specified in the class definition. In addition, classes have the following characteristics that make them especially useful for creating reusable, easily maintained code:</p>
<ul type=disc>
<li>
Encapsulation</li>
<li>
Subclasses</li>
<li>
Inheritance</li>
</ul>
<h2>Hiding Unnecessary Complexity</h2>
<p>
When you include a phone in your office, you probably don’t care how the phone internally receives a call, initiates or terminates connections to electronic switchboards, or translates key presses into electronic signals. All you need to know is that you can lift the receiver, dial the appropriate numbers, and talk to the person you want to talk to. The complexity of making that connection is hidden. The benefit of being able to ignore the inner details of an object so you can focus on the aspects of the object you need to use is called <a href="glsabstraction.htm">abstraction</a>.</p>
<p class=label>
<b>Internal complexity can be hidden.</b></p>
<p>
<img src="afd03002.gif" border=0></p>
<p>
<a href="glsencapsulation.htm">Encapsulation</a>, which involves packaging method and property code together in an object, contributes to abstraction. For example, the properties that determine the items in a <a href="glslist_box_.htm">list box</a> and the code that executes when you choose an item in the list can be encapsulated in a single <a href="glscontrol.htm">control</a> that you add to a <a href="glsform.htm">form</a>.</p>
<h2>Leveraging the Power of Existing Classes</h2>
<p>
A <a href="glssubclass.htm">subclass</a> can have all the functionality of an existing class, plus any additional controls or functionality you want to give it. If your class is a basic telephone, you can have subclasses that have all the functionality of the original telephone and any specialized features you want to give them.</p>
<p class=label>
<b>Subclassing allows you to reuse code.</b></p>
<p>
<img src="afd03003.gif" border=0></p>
<p>
Subclassing is one way to decrease the amount of code you have to write. Start with the definition of an object that is close to what you want, and customize it.</p>
<h2>Streamlining Code Maintenance</h2>
<p>
With <a href="glsinheritance.htm">inheritance</a>, if you make a change to a class, that change is reflected in all subclasses based on the class. This automatic update saves you time and effort. For example, if a phone manufacturer wanted to change from dial to push-button style phones, it would save a lot of work to be able to make the change to the master schematic and have all previously manufactured phones based on that master schematic automatically inherit this new feature, rather than having to add the new feature to all the existing phones individually.</p>
<p class=label>
<b>Inheritance makes maintaining your code easy.</b></p>
<p>
<img src="afd03004.gif" border=0></p>
<p>
Inheritance doesn’t work with hardware, but you do have this capability in software. If you discover a bug in your class, instead of having to go to each subclass and change the code, you fix it once in the class and the change propagates throughout all subclasses of the class.</p>
<h2>The Visual FoxPro Class Hierarchy</h2>
<p>
When you are creating user-defined classes, it helps to understand the Visual FoxPro class hierarchy.</p>
<p class=label>
<b>The Visual FoxPro class hierarchy</b></p>
<p>
<img src="afd03005.gif" border=0></p>
<h3>Containers and Non-Containers</h3>
<p>
The two primary types of Visual FoxPro classes, and by extension Visual FoxPro objects, are container classes and control classes.</p>
<p class=label>
<b>Container and Control Classes</b></p>
<p>
<img src="afd03006.gif" border=0></p>
<h4>Container Classes</h4>
<p>
Containers can contain other objects and allow access to the objects contained within them. For example, if you create a container class that consists of two <a href="glslist_box_.htm">list boxes</a> and two <a href="glscommand_button_.htm">command buttons</a>, and then add an object based on this class to a form, each individual object can be manipulated at <a href="glsrun_time.htm">run time</a> and <a href="glsdesign_time.htm">design time</a>. You can easily change the positions of the list boxes or the captions of the command buttons. You can also add objects to the <a href="glscontrol.htm">control</a> at design time; for example, you can add labels to identify the list boxes.</p>
<p>
The following table lists what each container class can contain:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Container</b></td>
<td class=label width=62%><b>Can contain</b></td>
</tr>
<tr valign=top>
<td width=38%>Command button groups</td>
<td width=62%>Command buttons</td>
</tr>
<tr valign=top>
<td width=38%>Container</td>
<td width=62%>Any controls</td>
</tr>
<tr valign=top>
<td width=38%>Control</td>
<td width=62%>Any controls</td>
</tr>
<tr valign=top>
<td width=38%>Custom</td>
<td width=62%>Any controls, page frame, container, custom</td>
</tr>
<tr valign=top>
<td width=38%><a href="glsform_set.htm">Form sets</a></td>
<td width=62%>Forms, <a href="glstoolbar.htm">toolbars</a></td>
</tr>
<tr valign=top>
<td width=38%><a href="glsform.htm">Forms</a></td>
<td width=62%>Page frames, any controls, containers, custom</td>
</tr>
<tr valign=top>
<td width=38%>Grid columns</td>
<td width=62%>Headers and any objects except form sets, forms, toolbars, <a href="glstimer_.htm">timers</a>, and other columns</td>
</tr>
<tr valign=top>
<td width=38%><a href="glsgrid_.htm">Grids</a></td>
<td width=62%>Grid columns</td>
</tr>
<tr valign=top>
<td width=38%>Option button groups</td>
<td width=62%>Option buttons</td>
</tr>
<tr valign=top>
<td width=38%>Page frames</td>
<td width=62%>Pages</td>
</tr>
<tr valign=top>
<td width=38%>Pages</td>
<td width=62%>Any controls, containers, custom</td>
</tr>
<tr valign=top>
<td width=38%>Project</td>
<td width=62%>Files, servers</td>
</tr>
<tr valign=top>
<td width=38%>Toolbars</td>
<td width=62%>Any controls, page frame, container</td>
</tr>
</table><br>
<h4>Control Classes</h4>
<p>
Control classes are more completely encapsulated than container classes are, but can be less flexible for that reason. Control classes do not have an <a href="lngaddobject_method.htm">AddObject method</a>.</p>

<h2><a name="dgmatching_the_class_to_the_task"></a>Matching the Class to the Task</h2>
<p>
You want to be able to use classes in many different contexts. Smart planning will enable you to most effectively decide what classes to design and what functionality to include in the class.</p>
<h2>Deciding When to Create Classes</h2>
<p>
You could create a class for every <a href="glscontrol.htm">control</a> and every <a href="glsform.htm">form</a> you might ever use, but this isn’t the most effective way to design your applications. You’ll likely end up with multiple classes that do much the same thing but must be maintained separately.</p>
<h3>Encapsulate Generic Functionality</h3>
<p>
You can create a control class for generic functionality. For example, <a href="glscommand_button_.htm">command buttons</a> that allow a user to move the record pointer in a table, a button to close a form, and a help button, can all be saved as classes and added to forms any time you want the forms to have this functionality.</p>
<p>
You can expose <a href="glsproperty.htm">properties</a> and <a href="glsmethod.htm">methods</a> on a class so that the user can integrate them into the particular <a href="glsdata_environment.htm">data environment</a> of a form or form set.</p>
<h3>Provide a Consistent Application Look and Feel</h3>
<p>
You can create <a href="glsform_set.htm">form set</a>, <a href="glsform.htm">form</a>, and <a href="glscontrol_classes.htm">control classes</a> with a distinctive appearance so that all the components of your application have the same look. For example, you could add graphics and specific color patterns to a form class and use that as a template for all forms you create. You could create a <a href="glstext_box_.htm">text box</a> class with a distinctive appearance, such as a shadowed effect, and use this class throughout your application any time you want to add a text box.</p>
<h2>Deciding What Type of Class to Create</h2>
<p>
Visual FoxPro allows you to create several different kinds of classes, each with its own characteristics. You specify the type of class you want to create in the <a href="cmdnew_class_dialog_box.htm">New Class dialog box</a> or in the AS clause in the <a href="lngcreate_class.htm">CREATE CLASS</a> command.</p>
<h3>The Visual FoxPro Base Classes</h3>
<p>
You can create subclasses of most of the Visual FoxPro base classes in the <a href="wndclass_designer.htm">Class Designer</a>.</p>
<p class=label>
<b>Visual FoxPro Base Classes</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td width=25%><a href="ctlactivedoc_object.htm">ActiveDoc</a></td>
<td width=24%><a href="ctlcustom_object.htm">Custom</a></td>
<td width=29%><a href="ctllabel_control.htm">Label</a></td>
<td width=22%><a href="ctlpageframe_control.htm">PageFrame</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="ctlcheckbox_control.htm">CheckBox</a></td>
<td width=24%><a href="ctleditbox_control.htm">EditBox</a></td>
<td width=29%><a href="ctlline_control.htm">Line</a></td>
<td width=22%><a href="ctlprojecthook_object.htm">ProjectHook</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="ctlcolumn_object.htm">Column</a>*</td>
<td width=24%><a href="ctlform_object.htm">Form</a></td>
<td width=29%><a href="ctllistbox_control.htm">ListBox</a></td>
<td width=22%><a href="ctlseparator_object.htm">Separator</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="ctlcommandbutton_control.htm">CommandButton</a></td>
<td width=24%><a href="ctlformset_object.htm">FormSet</a></td>
<td width=29%><a href="ctlole_bound_control.htm">OLEBoundControl</a></td>
<td width=22%><a href="ctlshape_control.htm">Shape</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="ctlcommandgroup_control.htm">CommandGroup</a></td>
<td width=24%><a href="ctlgrid_control.htm">Grid</a></td>
<td width=29%><a href="ctlole_container_control.htm">OLEContainerControl</a></td>
<td width=22%><a href="ctlspinner_control.htm">Spinner</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="ctlcombobox_control.htm">ComboBox</a></td>
<td width=24%><a href="ctlheader_object.htm">Header</a>*</td>
<td width=29%><a href="ctloptionbutton_control.htm">OptionButton</a>*</td>
<td width=22%><a href="ctltextbox_control.htm">TextBox</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="ctlcontainer_object.htm">Container</a></td>
<td width=24%><a href="ctlhyperlink_object.htm">Hyperlink Object</a></td>
<td width=29%><a href="ctloptiongroup_control.htm">OptionGroup</a></td>
<td width=22%><a href="ctltimer_control.htm">Timer</a></td>
</tr>
<tr valign=top>
<td width=25%><a href="ctlcontrol_object.htm">Control</a></td>
<td width=24%><a href="ctlimage_control.htm">Image</a></td>
<td width=29%><a href="ctlpage_object.htm">Page</a>*</td>
<td width=22%><a href="ctltoolbar_object.htm">ToolBar</a></td>
</tr>
</table><br>
<p class=mini>
* These classes are an integral part of a parent container and cannot be subclassed in the Class Designer.</p>
<p>
All Visual FoxPro base classes recognize the following minimum set of events:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Event</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lnginit_event.htm">Init</a></td>
<td width=75%>Occurs when the object is created.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngdestroy_event.htm">Destroy</a></td>
<td width=75%>Occurs when the object is released from memory.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngerror_event.htm">Error</a></td>
<td width=75%>Occurs whenever an error occurs in event or method procedures of the class.</td>
</tr>
</table><br>
<p>
All Visual FoxPro base classes have the following minimum set of properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=25%><b>Property</b></td>
<td class=label width=75%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=25%><a href="lngclass_property.htm">Class</a></td>
<td width=75%>What type of class it is.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngbaseclass_property.htm">BaseClass</a></td>
<td width=75%>The base class it was derived from, such as Form, Commandbutton, Custom, and so on.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngclasslibrary_property.htm">ClassLibrary</a></td>
<td width=75%>The class library the class is stored in.</td>
</tr>
<tr valign=top>
<td width=25%><a href="lngparentclass_property.htm">ParentClass</a></td>
<td width=75%>The class that the current class was derived from. If the class was derived directly from a Visual FoxPro base class, the ParentClass property is the same as the BaseClass property.</td>
</tr>
</table><br>
<h3>Extending the Visual FoxPro Base Classes</h3>
<p>
You can subclass these classes to set your own default control properties. For example, if you want the default names of controls you add to forms in your applications to automatically reflect your naming conventions, you can create classes based on the Visual FoxPro base classes to do this. You can create form classes with a customized look or behavior to serve as templates for all the forms you create.</p>
<p>
You could also subclass the Visual FoxPro base classes to create controls with encapsulated functionality. If you want a button to release forms when the button is clicked, you can create a class based on the Visual FoxPro command button class, set the caption property to “Quit” and include the following command in the Click event:</p>
<pre><code>THISFORM.Release
</code></pre>
<p>
You can add this new button to any form in your application.</p>
<p class=label>
<b>Customized command button added to a form</b></p>
<p>
<img src="afd03007.gif" border=0></p>
<h3>Creating Controls with Multiple Components</h3>
<p>
Your subclasses aren’t limited to single base classes. You can add multiple controls into a single container class definition. Many of the classes in the Visual FoxPro sample class library fall into this category. For example, the VCR class in Buttons.vcx, located in the Visual Studio …\Samples\Vfp98\Classes directory, contains four <a href="glscommand_button_.htm">command buttons</a> for navigating the records in a table.</p>
<h3>Creating Non-Visual Classes</h3>
<p>
A class based on the Visual FoxPro custom class doesn’t have a run-time visual element. You can create <a href="glsmethod.htm">methods</a> and <a href="glsproperty.htm">properties</a> for your custom class using the <a href="wndclass_designer.htm">Class Designer</a> environment. For example, you could create a custom class named <code>StrMethods</code> and include a number of methods to manipulate character strings. You could add this class to a form with an <a href="glsedit_box_.htm">edit box</a> and call the methods as needed. If you had a method called <code>WordCount</code>, you could call it when needed:</p>
<pre><code>THISFORM.txtCount.Value = ;
  THISFORM.StrMethods.WordCount(THISFORM.edtText.Value)
</code></pre>
<p>
Non-visual classes (like the custom control and the timer control) have a visual representation only at <a href="glsdesign_time.htm">design time</a> in the <a href="wndform_designer.htm">Form Designer</a>. Set the picture property of the custom class to the .bmp file you want displayed in the Form Designer when the custom class is added to a form.</p>

<h2><a name="dgcreating_classes"></a>Creating Classes</h2>
<p>
You can create new classes in the <a href="wndclass_designer.htm">Class Designer</a> and you can see how each object will appear to the user as you design it.</p>
<p class=label>
<b>To create a new class</b>
<ul type=disc>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the <b>Classes</b> tab and choose <b>New</b>.<p class=tl>
-or-</P></li>
<li>
From the <b>File</b> menu, choose <b>New</b>, select <b>Class</b>, and choose <b>New File</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_class.htm">CREATE CLASS</a> command.</li>
</ul>
<p>
The New Class dialog box lets you specify what to call the new class, the class to base the new class on, and the library to store it in.</p>
<p class=label>
<b>Creating a new class</b></p>
<p>
<img src="afd03008.gif" border=0></p>
<h2>Modifying a Class Definition</h2>
<p>
Once you have created a class, you can modify it. Changes made to a class affect all the subclasses and all the objects based on this class. You can add an enhancement to a class or fix a bug in the class, and all the subclasses and objects based on the class will inherit the change.</p>
<p class=label>
<b>To modify a class in the <a href="wndproject_manager.htm">Project Manager</a></b>
<ol>
<li>
Select the class you want to modify.<br><br></li>
<li>
Choose <b>Modify</b>.<p class=tl>
The <b>Class Designer</b> opens.</P></li>
</ol>
<p>
You can also modify a visual class definition with the <a href="lngmodify_class.htm">MODIFY CLASS</a> command.</p>
<p class=indent>
<B><b>Important</b></B>&nbsp;&nbsp;&nbsp;Don’t change the Name property of a class if the class is already being used in any other application components. Otherwise, Visual FoxPro will not be able to locate the class when needed.</p>
<h2>Subclassing a Class Definition</h2>
<p>
You can create a subclass of a user-defined class in one of two ways.</p>
<p class=label>
<b>To create a subclass of a user-defined class</b>
<ol>
<li>
In the <a href="cmdnew_class_dialog_box.htm">New Class</a> dialog box, click the dialog button to the right of the <b>Based On</b> box.<br><br></li>
<li>
In the <b>Open</b> dialog box, choose the class you want to base the new class on.<p class=tl>
-or-</P></li>
</ol>
<ul type=disc>
<li>
Use the <a href="lngcreate_class.htm">CREATE CLASS</a> command.<p class=tl>
For example, to base a new class, <code>x</code>, on <code>parentclass</code> in Mylibrary.vcx, use this code:</P><pre><code>CREATE CLASS x OF y AS parentclass ;
  FROM mylibrary
</code></pre>
</li>
</ul>
<h2>Using the Class Designer</h2>
<p>
When you specify what class your new class is based on and the library to store the class in, the Class Designer opens.</p>
<p class=label>
<b>Class Designer</b></p>
<p>
<img src="afd03009.gif" border=0></p>
<p>
The <a href="wndclass_designer.htm">Class Designer</a> provides the same interface that the <a href="wndform_designer.htm">Form Designer</a> does, allowing you to see and edit the properties of your class in the <a href="wndproperties_window.htm">Properties window</a>. Code editing windows allow you to write code to be executed when <a href="glsevent.htm">events</a> occur or <a href="glsmethod.htm">methods</a> are called.</p>
<h3>Adding Objects to a Control or Container Class</h3>
<p>
If you base the new class on the control or container class, you can add controls to it the same way you add controls in the Form Designer: choose the control button on the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a> and drag to size in the Class Designer.</p>
<p>
No matter what type of class you base the new class on, you can set properties and write method code. You can also create new <a href="glsproperty.htm">properties</a> and <a href="glsmethod.htm">methods</a> for the class.</p>
<h3>Adding Properties and Methods to a Class</h3>
<p>
You can add as many new <a href="glsproperty.htm">properties</a> and <a href="glsmethod.htm">methods</a> to the new class as you want. Properties hold values; methods hold procedural code to be run when you call the method.</p>
<h4>Creating New Properties and Methods</h4>
<p>
When you create new properties and methods for classes, the properties and methods are scoped to the class, not to individual components in the class.</p>
<p class=label>
<b>To add a new property to a class</b>
<ol>
<li>
From the <b>Class</b> menu, choose <b>New Property</b>.<br><br></li>
<li>
In the <a href="cmdnew_property_dialog_box.htm">New Property</a> dialog box, type the name of the property.<br><br></li>
<li>
Specify the visibility: <b>Public</b>, <b>Protected</b>, or <b>Hidden</b>.<p class=tl>
A Public property can be accessed anywhere in your application. Protected and Hidden properties and methods are discussed in “<a href="#dgprotecting_and_hiding_class_members">Protecting and Hiding Class Members</a>” later in this chapter.</P><p class=label>
<b>New Property dialog box</b>
<p>
<img src="afd03010.gif" border=0></P></li>
<li>
Choose <b>Add</b>.<p class=tl>
You can also include a description of the property that will be displayed at the bottom of the <a href="wndproperties_window.htm">Properties</a> window in the <b>Class Designer</b> and in the <b>Form Designer</b> when the control is added to a form.</P></li>
</ol>
<p class=indent>
<B><b>Troubleshooting</b></B>&nbsp;&nbsp;&nbsp;When you add a property to a class that can be set by a user of the class, the user could enter an invalid setting for your property that could cause run-time errors. You need to explicitly document the valid settings for the property. If your property can be set to 0, 1, or 2, for example, say so in the Description box of the <a href="cmdnew_property_dialog_box.htm">New Property dialog box</a>. You might also want to verify the value of the property in code that references it.</p>
<p class=label>
<b>To create an array property</b>
<ul type=disc>
<li>
In the <b>Name</b> box of the <a href="cmdnew_property_dialog_box.htm">New Property</a> dialog box, specify the name, size, and dimensions of the array.<p class=tl>
For example, to create an array property named <code>myarray</code> with ten rows and two columns, type the following in the Name box:</P><pre><code>myarray[10,2]
</code></pre>
</li>
</ul>
<p>
The array property is read-only at <a href="glsdesign_time.htm">design time</a> and is displayed in the <a href="wndproperties_window.htm">Properties</a> window in italics. The array property can be managed and redimensioned at <a href="glsrun_time.htm">run time</a>. For an example of using an array property, see “Managing Multiple Instances of a Form” in Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>.</p>
<p class=label>
<b>To add a new method to a class</b>
<ol>
<li>
From the <b>Class</b> menu, choose <b>New Method</b>.<br><br></li>
<li>
In the <a href="cmdnew_method_dialog_box.htm">New Method</a> dialog box, type the name of the method.<br><br></li>
<li>
Specify the visibility: <b>Public</b>, <b>Protected</b>, or <b>Hidden</b>.<br><br></li>
<li>
Select the Access check box to create an Access method, select the Assign check box to create an Assign method, or select both check boxes to create Access and Assign methods.</li>
</ol>
<p>
Access and Assign methods let you execute code when the value of a property is queried or when you attempt to change the property’s value.</p>
<p>
The code in an Access method is executed when the value of a property is queried, typically by using the property in an object reference, storing the value of the property to a variable, or displaying the value of property with a question mark (?).</p>
<p>
The code in an Assign method is executed when you attempt to change the value of a property, typically by using the STORE or = command to assign a new value to the property.</p>
<p>
For more information about Access and Assign methods, see <a href="dgprogramming_improvements.htm#newaccess_and_assign_methods">Access and Assign Methods</a>.</p>
<p>
You can also include a description of the method.</p>

<h3><a name="dgprotecting_and_hiding_class_members"></a>Protecting and Hiding Class Members</h3>
<p>
<a href="glsproperty.htm">Properties</a> and <a href="glsmethod.htm">methods</a> in a class definition are <b>Public</b> by default: code in other classes or procedures can set the properties or call the methods. Properties and methods that you designate as <b>Protected</b> can be accessed only by other methods in the class definition or in subclasses of the class. Properties and methods designated as <b>Hidden</b> can be accessed only by other members in the class definition. Subclasses of the class cannot “see” or reference hidden members.</p>
<p>
To ensure correct functioning in some classes, you need to prevent users from programmatically changing the properties or calling the method from outside the class.</p>
<p>
The following example illustrates using protected properties and methods in a class.</p>
<p>
The stopwatch class included in Samples.vcx, in the Visual Studio …\Samples\Vfp98\Classes directory, includes a <a href="glstimer_.htm">timer</a> and five <a href="glslabel_.htm">labels</a> to display the elapsed time:</p>
<p class=label>
<b>The stopwatch class in Samples.vcx</b></p>
<p>
<img src="afd03011.gif" border=0></p>
<p>
The Stopwatch class contains labels and a timer.</p>
<p class=label>
<b>Property Settings for the Stopwatch Class</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>Control</b></td>
<td class=label width=21%><b>Property</b></td>
<td class=label width=58%><b>Setting</b></td>
</tr>
<tr valign=top>
<td width=21%>lblSeconds</td>
<td width=21%><a href="lngcaption_property.htm">Caption</a></td>
<td width=58%>00</td>
</tr>
<tr valign=top>
<td width=21%>lblColon1</td>
<td width=21%>Caption</td>
<td width=58%>:</td>
</tr>
<tr valign=top>
<td width=21%>lblMinutes</td>
<td width=21%>Caption</td>
<td width=58%>00</td>
</tr>
<tr valign=top>
<td width=21%>lblColon2</td>
<td width=21%>Caption</td>
<td width=58%>:</td>
</tr>
<tr valign=top>
<td width=21%>lblHours</td>
<td width=21%>Caption</td>
<td width=58%>00</td>
</tr>
<tr valign=top>
<td width=21%>tmrSWatch</td>
<td width=21%><a href="lnginterval_property.htm">Interval</a></td>
<td width=58%>1000</td>
</tr>
</table><br>
<p>
This class also has three protected properties, nSec, nMin, and nHour, and one protected method, UpdateDisplay. The other three custom methods in the class, Start, Stop, and Reset, are not protected.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Choose Class Info on the Class menu to see the visibility of all properties and methods of a class.</p>
<p>
The protected properties are used in internal calculations in the UpdateDisplay method and the Timer event. The UpdateDisplay method sets the captions of the labels to reflect the elapsed time.</p>
<p class=label>
<b>The UpdateDisplay Method</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=56%><b>Code</b></td>
<td class=label width=44%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=56%><pre><code>cSecDisplay = ALLTRIM(STR(THIS.nSec))
cMinDisplay = ALLTRIM(STR(THIS.nMin))
cHourDisplay = ALLTRIM(STR(THIS.nHour))</code></pre>
</td>
<td width=44%>Convert the numeric properties to Character type for display in the label captions.</td>
</tr>
<tr valign=top>
<td width=56%><pre><code>THIS.lblSeconds.Caption = ;</code><pre><code>&nbsp;IIF(THIS.nSec &lt; 10, ;
 &nbsp; "0" ,"") + cSecDisplay
THIS.lblMinutes.Caption = ;
  IIF(THIS.nMin &lt; 10, ;
 &nbsp; "0", "") + cMinDisplay
THIS.lblHours.Caption = ;
  IIF(THIS.nHour &lt; 10, ;
 &nbsp; "0", "") + cHourDisplay</code></pre>
</pre>
</td>
<td width=44%>Set the label captions, retaining the leading 0 if the value of the numeric property is less than 10.</td>
</tr>
</table><br>
<p>
The following table lists the code in the <code>tmrSWatch.Timer</code> event:</p>
<p class=label>
<b>The Timer Event</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=56%><b>Code</b></td>
<td class=label width=44%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=56%><pre><code>THIS.Parent.nSec = THIS.Parent.nSec + 1</code><pre><code>IF THIS.Parent.nSec = 60
  THIS.Parent.nSec = 0
  THIS.Parent.nMin = ;
  THIS.Parent.nMin + 1
ENDIF</code></pre>
</pre>
</td>
<td width=44%>Increment the <code>nSec</code> property every time the timer event fires: every second.<br>
If <code>nSec</code> has reached 60, reset it to 0 and increment the <code>nMin</code> property.</td>
</tr>
<tr valign=top>
<td width=56%><pre><code>IF THIS.Parent.nMin = 60</code><pre><code>&nbsp;&nbsp;THIS.Parent.nMin = 0
  THIS.Parent.nHour = ;
  THIS.Parent.nHour + 1
ENDIF
THIS.Parent.UpdateDisplay</code></pre>
</pre>
</td>
<td width=44%>If <code>nMin</code> has reached 60, reset it to 0 and increment the <code>nHour</code> property.<p>
Call the <code>UpdateDisplay</code> method when the new property values are set.</p>
</td>
</tr>
</table><br>
<p>
The stopwatch class has three methods that are not protected: Start, Stop, and Reset. A user can call these methods directly to control the stopwatch.</p>
<p>
The Start method contains the following line of code:</p>
<pre><code>THIS.tmrSWatch.Enabled = .T.
</code></pre>
<p>
The Stop method contains the following line of code:</p>
<pre><code>THIS.tmrSWatch.Enabled = .F.
</code></pre>
<p>
The Reset method sets the protected properties to zero and calls the protected method:</p>
<pre><code>THIS.nSec = 0
THIS.nMin = 0
THIS.nHour = 0
THIS.UpdateDisplay
</code></pre>
<p>
The user cannot directly set these properties or call this method, but code in the Reset method can.</p>
<h4>Specifying the Default Value for a Property</h4>
<p>
When you create a new property, the default setting is false (.F.). To specify a different default setting for a property, use the <a href="wndproperties_window.htm">Properties window</a>. In the Other tab, click on your property and set it to the desired value. This will be the initial property setting when the class is added to a <a href="glsform.htm">form</a> or <a href="glsform_set.htm">form set</a>.</p>
<p>
You can also set any of the base class properties in the <a href="wndclass_designer.htm">Class Designer</a>. When an object based on the class is added to the form, the object reflects your property settings rather than the Visual FoxPro base class property settings.</p>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;If you want to make the default setting of a property an empty string, select the setting in the Property Editing box and press the BACKSPACE key.</p>
<h3>Specifying Design Time Appearance</h3>
<p>
You can specify the toolbar icon and the container icon for your class in the <a href="cmdclass_info_dialog_box.htm">Class Info</a> dialog box.</p>
<p class=label>
<b>To set a toolbar icon for a class</b>
<ol>
<li>
In the <a href="wndclass_designer.htm">Class Designer</a>, choose <b>Class Info</b> from the <b>Class</b> menu.<br><br></li>
<li>
In the <a href="cmdclass_info_dialog_box.htm">Class Info</a> dialog box, type the name and path of the .BMP file in the <b>Toolbar icon</b> box.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;The bitmap (.bmp file) for the toolbar icon is 15 by 16 <a href="glspixel.htm">pixels</a>. If the picture is larger or smaller, it is sized to 15 by 16 pixels and might not look the way you want it to.</p></li>
</ol>
<p>
The toolbar icon you specify is displayed in the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a> when you populate the toolbar with the classes in your <a href="glsclass_library.htm">class library</a>.</p>
<p>
You can also specify the icon to be displayed for the class in the <a href="wndproject_manager.htm">Project Manager</a> and <a href="cmdclass_browser_window.htm">Class Browser</a> by setting the container icon.</p>
<p class=label>
<b>To set a container icon for a class</b>
<ol>
<li>
In the <a href="wndclass_designer.htm">Class Designer</a>, choose <b>Class Info</b> from the <b>Class</b> menu.<br><br></li>
<li>
In the <b>Container icon</b> box, type the name and path of the .bmp file to be displayed on the button in the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a>.</li>
</ol>
<h3>Using Class Library Files</h3>
<p>
Every visually designed class is stored in a class library with a .vcx file extension.</p>
<h4>Creating a Class Library</h4>
<p>
You can create a class library in one of three ways.</p>
<p class=label>
<b>To create a class library</b>
<ul type=disc>
<li>
When you create a class, specify a new class library file in the <b>Store In</b> box of the <a href="cmdnew_class_dialog_box.htm">New Class</a> dialog box.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_class.htm">CREATE CLASS</a> command, specifying the name of the new class library.<p class=tl>
For example, the following statement creates a new class named <code>myclass</code> and a new class library named <code>new_lib</code>:</P><pre><code>CREATE CLASS myclass OF new_lib AS CUSTOM
</code></pre>
<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngcreate_classlib.htm">CREATE CLASSLIB</a> command.<p class=tl>
For example, type the following command in the <a href="wndcommand_window.htm">Command window</a> to create a class library named <code>new_lib</code>:</P><pre><code>CREATE CLASSLIB new_lib
</code></pre>
</li>
</ul>
<h4>Copying and Removing Class Library Classes</h4>
<p>
Once you add a class library to a project, you can easily copy classes from one library to another or simply remove classes from libraries.</p>
<p class=label>
<b>To copy a class from one library to another</b>
<ol>
<li>
Make sure both libraries are in a project (not necessarily the same project).<br><br></li>
<li>
In the <a href="wndproject_manager.htm">Project Manager</a>, select the <b>Classes</b> tab.<br><br></li>
<li>
Click the plus sign (+) to the left of the class library that the class is now in.<br><br></li>
<li>
Drag the class from the original library and drop it in the new library.<p class=atl>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;For convenience and speed, you might want to keep a class and all the subclasses based on it in one class library. If you have a class that contains elements from many different class libraries, these libraries must all be open, so it will take a little longer to initially load your class at <a href="glsrun_time.htm">run time</a> and at <a href="glsdesign_time.htm">design time</a>.</p></li>
</ol>
<p class=label>
<b>To remove a class from a library</b>
<ul type=disc>
<li>
Select the class in the <a href="wndproject_manager.htm">Project Manager</a> and choose <b>Remove</b>.<p class=tl>
-or-</P></li>
<li>
Use the <a href="lngremove_class.htm">REMOVE CLASS</a> command.</li>
</ul>
<p>
To change the name of a class in a class library, use the <a href="lngrename_class.htm">RENAME CLASS</a> command. Remember, however, that when you change the name of a class, forms that contain the class and subclasses in other .vcx files continue to reference the old name and will no longer function correctly.</p>
<p>
Visual FoxPro includes a Class Browser to facilitate using and managing classes and class libraries. For more information, see <a href="cmdclass_browser_window.htm">Class Browser</a> window.</p>

<h2><a name="dgadding_classes_to_forms"></a>Adding Classes to Forms</h2>
<p>
You can drag a class from the <a href="wndproject_manager.htm">Project Manager</a> to the <a href="wndform_designer.htm">Form Designer</a> or to the <a href="wndclass_designer.htm">Class Designer</a>. You can also register your classes so that they can be displayed directly on the <a href="tlsform_controls_toolbar.htm">Form Controls toolbar</a> in the Class Designer or Form Designer and added to containers the same way the standard controls are added.</p>
<p class=label>
<b>To register a class library</b>
<ol>
<li>
From the <b>Tools</b> menu, choose <b>Options</b>.<br><br></li>
<li>
In the <b>Options</b> dialog box, choose the <a href="cmdcontrols_tab_options_dialog_box.htm">Controls</a> tab.<br><br></li>
<li>
Select <b>Visual Class Libraries</b> and choose <b>Add</b>.<br><br></li>
<li>
In the <b>Open</b> dialog box, choose a class library to add to the registry and choose <b>Open</b>.<br><br></li>
<li>
Choose <b>Set as Default</b> if you want the class library to be available in the <b>Form Controls </b>toolbar in future sessions of Visual FoxPro.</li>
</ol>
<p>
You can also add your class library to the Form Controls toolbar by choosing Add in the submenu of the View Classes button. To make these classes available in the Form Controls toolbar in future sessions of Visual FoxPro, you still need to set the default in the <a href="cmdoptions_dialog_box.htm">Options dialog box</a>.</p>
<h2>Overriding Default Property Settings</h2>
<p>
When you add objects based on a user-defined class to a <a href="glsform.htm">form</a>, you can change the settings of all the <a href="glsproperty.htm">properties</a> of the class that are not protected, overriding the default settings. If you change the class properties in the <a href="wndclass_designer.htm">Class Designer</a> later, the settings in the object on the form are not affected. If you have not changed a property setting in the form and you change the property setting in the class, the change will take effect in the object as well.</p>
<p>
For example, a user could add an object based on your class to a form and change the BackColor property from white to red. If you change the BackColor property of the class to green, the object on the user’s form will still have a background color of red. If, on the other hand, the user did not change the BackColor property of the object and you changed the background color of the class to green, the BackColor property of the object on the form would inherit the change and also be green.</p>
<h2>Calling Parent Class Method Code</h2>
<p>
An object or class based on another class automatically inherits the functionality of the original. However, you can easily override the inherited method code. For example, you can write new code for the <a href="lngclick_event.htm">Click event</a> of a class after you subclass it or after you add an object based on the class to a container. In both cases, the new code is executed at <a href="glsrun_time.htm">run time</a>; the original code is not executed.</p>
<p>
More frequently, however, you want to add functionality to the new class or object while keeping the original functionality. In fact, one of the key decisions you have to make in object-oriented programming is what functionality to include at the class level, at the subclass level, and at the object level. You can optimize your class design by using the <a href="lngdodefaultlp_rp.htm">DODEFAULT(&nbsp;)</a> function or <a href="lngcc.htm">scope resolution operator</a> (::) to add code at different levels in the class or container hierarchy.</p>
<h3>Adding Functionality to Subclasses</h3>
<p>
You can call the parent class code from a subclass by using the <a href="lngdodefaultlp_rp.htm">DODEFAULT(&nbsp;)</a> function.</p>
<p>
For example, <code>cmdOK</code> is a command button class stored in Buttons.vcx, located in the Visual Studio …\Samples\Vfp98\Classes directory. The code associated with the Click event of <code>cmdOk</code> releases the form the button is on. <code>CmdCancel</code> is a subclass of <code>cmdOk</code> in the same class library. To add functionality to <code>cmdCancel</code> to discard changes, for example, you could add the following code to the Click event:</p>
<pre><code>IF USED(&nbsp;) AND CURSORGETPROP("Buffering") != 1
 &nbsp; TABLEREVERT(.T.)
ENDIF
DODEFAULT(&nbsp;)
</code></pre>
<p>
Because changes are written to a buffered table by default when the table is closed, you don’t need to add <a href="lngtableupdatelp_rp.htm">TABLEUPDATE(&nbsp;)</a> code to <code>cmdOk</code>. The additional code in <code>cmdCancel</code> reverts changes to the table before calling the code in <code>cmdOk</code>, the ParentClass, to release the form.</p>
<h2>Class and Container Hierarchies</h2>
<p>
The class hierarchy and the container are two separate entities. Visual FoxPro looks for event code up through the class hierarchy, whereas objects are referenced in the container hierarchy. The following section, “Referencing Objects in the Container Hierarchy,” discusses container hierarchies. Later in this chapter, class hierarchies are explained in the section <a href="#dgcalling_event_code_up_the_class_hierarchy">Calling Event Code up the Class Hierarchy</a>.</p>
<h2>Referencing Objects in the Container Hierarchy</h2>
<p>
To manipulate an object, you need to identify it in relation to the container hierarchy. For example, to manipulate a <a href="glscontrol.htm">control</a> on a <a href="glsform.htm">form</a> in a <a href="glsform_set.htm">form set</a>, you need to reference the form set, the form, and then the control.</p>
<p>
You can compare the referencing of an object within its container hierarchy to giving Visual FoxPro an address to your object. When you describe the location of a house to someone outside your immediate frame of reference, you need to indicate the country, the state or region, the city, the street, or just the street number of the house, depending on how far they are from you. Otherwise, there could be some confusion.</p>
<p>
The following illustration shows a possible container nesting situation.</p>
<p class=label>
<b>Nested containers</b></p>
<p>
<img src="afd03012.gif" border=0></p>
<p>
To disable the control in the grid column, you need to provide the following address:</p>
<pre><code>Formset.Form.PageFrame.Page.;
 Grid.Column.Control.Enabled = .F.
</code></pre>
<p>
The <a href="lngactiveform_property.htm">ActiveForm property</a> of the application object (_VFP) allows you to manipulate the active form even if you don’t know the name of the form. For example, the following line of code changes the background color of the active form, no matter what form set it belongs to:</p>
<pre><code>_VFP.ActiveForm.BackColor = RGB(255,255,255)
</code></pre>
<p>
Similarly, the <a href="lngactivecontrol_property.htm">ActiveControl property</a> allows you to manipulate the active control on the active form. For example, the following expression entered in the <a href="wndwatch_window.htm">Watch window</a> displays the name of the active control on a form as you interactively choose the various controls:</p>
<pre><code>_VFP.ActiveForm.ActiveControl.Name
</code></pre>
<h3>Relative Referencing</h3>
<p>
When you are referencing objects from within the container hierarchy (for example, in the Click event of a command button on a form in a form set), you can use some shortcuts to identify the object you want to manipulate. The following table lists properties or keywords that make it easier to reference an object from within the object hierarchy:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=38%><b>Property or keyword</b></td>
<td class=label width=62%><b>Reference</b></td>
</tr>
<tr valign=top>
<td width=38%><a href="lngparent_property.htm">Parent</a></td>
<td width=62%>The immediate container of the object.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngthis_object_reference.htm">THIS</a></td>
<td width=62%>The object.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngthisform_object_reference.htm">THISFORM</a></td>
<td width=62%>The form that contains the object.</td>
</tr>
<tr valign=top>
<td width=38%><a href="lngthisformset_object_reference.htm">THISFORMSET</a></td>
<td width=62%>The form set that contains the object.</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use THIS, THISFORM, and THISFORMSET only in method or event code.</p>
<p>
The following table provides examples of using THISFORMSET, THISFORM, THIS, and Parent to set object properties:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=58%><b>Command</b></td>
<td class=label width=42%><b>Where to include the command</b></td>
</tr>
<tr valign=top>
<td width=58%><pre><code>THISFORMSET.frm1.cmd1.Caption = "OK"</code></pre>
</td>
<td width=42%>In the event or method code of any controls on any form in the form set.</td>
</tr>
<tr valign=top>
<td width=58%><pre><code>THISFORM.cmd1.Caption = "OK"</code></pre>
</td>
<td width=42%>In the event or method code of any control on the same form that <code>cmd1</code> is on.</td>
</tr>
<tr valign=top>
<td width=58%><pre><code>THIS.Caption = "OK"</code></pre>
</td>
<td width=42%>In the event or method code of the control whose caption you want to change.</td>
</tr>
<tr valign=top>
<td width=58%><pre><code>THIS.Parent.BackColor = RGB(192,0,0)</code></pre>
</td>
<td width=42%>In the event or method code of a control on a form. The command changes the background color of the form to dark red.</td>
</tr>
</table><br>
<h2>Setting Properties</h2>
<p>
You can set the properties of an object at <a href="glsrun_time.htm">run time</a> or <a href="glsdesign_time.htm">design time</a>.</p>
<p class=label>
<b>To set a property</b>
<ul type=disc>
<li>
Use this syntax:<p class=tl>
<i>Container</i>.<i>Object</i>.<i>Property</i> = <i>Value</i></P><p class=tl>
For example, the following statements set various properties of a <a href="glstext_box_.htm">text box</a> named <code>txtDate</code> on a form named <code>frmPhoneLog</code>:</P><pre><code>frmPhoneLog.txtDate.Value = DATE(&nbsp;) &amp;&amp; Display the current date&nbsp; 
frmPhoneLog.txtDate.Enabled = .T. &amp;&amp; The control is enabled&nbsp; 
frmPhoneLog.txtDate.ForeColor = RGB(0,0,0)&nbsp;&nbsp;&nbsp; &amp;&amp; black text&nbsp; 
frmPhoneLog.txtDate.BackColor = RGB(192,192,192)&nbsp; &amp;&amp; gray background&nbsp; 
</code></pre>
</li>
</ul>
<p>
For the property settings in the preceding examples, <code>frmPhoneLog</code> is the highest level container object. If <code>frmPhoneLog</code> were contained in a <a href="glsform_set.htm">form set</a>, you would also need to include the form set in the parent path:</p>
<pre><code>frsContacts.frmPhoneLog.txtDate.Value = DATE(&nbsp;)
</code></pre>
<h3>Setting Multiple Properties</h3>
<p>
The WITH&nbsp;...&nbsp;ENDWITH structure simplifies setting multiple properties. For example, to set multiple properties of a column in a <a href="glsgrid_.htm">grid</a> in a <a href="glsform.htm">form</a> in a <a href="glsform_set.htm">form set</a>, you could use the following syntax:</p>
<pre><code>WITH THISFORMSET.frmForm1.grdGrid1.grcColumn1
 .Width = 5
 .Resizable = .F.
 .ForeColor = RGB(0,0,0)
 .BackColor = RGB(255,255,255)
 .SelectOnEntry = .T.
ENDWITH
</code></pre>
<h2>Calling Methods</h2>
<p>
Once an object has been created, you can call the <a href="glsmethod.htm">methods</a> of that object from anywhere in your application.</p>
<p class=label>
<b>To call a method</b>
<ul type=disc>
<li>
Use this syntax:<p class=tl>
<i>Parent.Object.Method</i></P></li>
</ul>
<p>
The following statements call methods to display a <a href="glsform.htm">form</a> and set the focus to a <a href="glstext_box_.htm">text box</a>:</p>
<pre><code>frsFormSet.frmForm1.Show
frsFormSet.frmForm1.txtGetText1.SetFocus
</code></pre>
<p>
Methods that return values and are used in <a href="glsexpression.htm">expressions</a> must end in open and closed parentheses. For example, the following statement sets the <a href="glscaption.htm">caption</a> of a <a href="glsform.htm">form</a> to the value returned from the user-defined method <code>GetNewCaption</code>:</p>
<pre><code>Form1.Caption = Form1.GetNewCaption(&nbsp;)
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<a href="glsparameter.htm">Parameters</a> passed to methods must be included in parentheses after the method name; for example, <code>Form1.Show(nStyle)</code>. passes <code>nStyle</code> to Form1’s Show method code.</p>
<h2>Responding to Events</h2>
<p>
The code you include in an event procedure is executed when the <a href="glsevent.htm">event</a> takes place. For example, the code you include in the Click event procedure of a <a href="glscommand_button_.htm">command button</a> is executed when the user clicks the command button.</p>
<p>
You can programmatically cause <a href="lngclick_event.htm">Click</a>, <a href="lngdblclick_event.htm">DblClick</a>, <a href="lngmousemove_event.htm">MouseMove</a>, and <a href="lngdragdrop_event.htm">DragDrop</a> events with the <a href="lngmouse.htm">MOUSE</a> command, or use the <a href="lngerror.htm">ERROR</a> command to generate Error events and the <a href="lngkeyboard.htm">KEYBOARD</a> command to generate KeyPress events. You cannot programmatically cause any other events to occur, but you can call the procedure associated with the event. For example, the following statement causes the code in the <a href="lngactivate_event.htm">Activate event</a> of <code>frmPhoneLog</code> to be executed, but it doesn’t activate the form:</p>
<pre><code>frmPhoneLog.Activate
</code></pre>
<p>
If you do want to activate the form, use the <a href="lngshow_method.htm">Show method</a> of the form. Calling the Show method causes the form to be displayed and activated, at which point the code in the Activate event is also executed:</p>
<pre><code>frmPhoneLog.Show
</code></pre>

<h2><a name="dgdefining_classes_programmatically"></a>Defining Classes Programmatically</h2>
<p>
You can define classes visually in the <a href="wndclass_designer.htm">Class Designer</a> and the <a href="wndform_designer.htm">Form Designer</a> or programmatically in .PRG files. This section describes how to write class definitions. For information about the specific commands, functions, and operators, see Help. For more information about forms, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>.</p>
<p>
In a program file, you can have program code prior to the class definitions, but not after the class definitions, in the same way that program code cannot come after procedures in a program. The basic shell for class creation has this syntax:</p>
<p>
DEFINE CLASS <i>ClassName1</i> AS <i>ParentClass</i> [OLEPUBLIC]<br>
[[PROTECTED | HIDDEN <i>PropertyName1</i>, <i>PropertyName2</i> ...]<br>
[Object.]<i>PropertyName = eExpression ...</i>]<br>
[ADD OBJECT [PROTECTED] <i>ObjectName</i> AS <i>ClassName2</i> [NOINIT]<br>
[WITH <i>cPropertylist</i>]]...<br>
[[PROTECTED | HIDDEN] FUNCTION | PROCEDURE <i>Name</i>[_ACCESS | _ASSIGN]<br>
[NODEFAULT]<br>
<i>cStatements</i><br>
[ENDFUNC | ENDPROC]]...<br>
ENDDEFINE</p>
<h2>Protecting and Hiding Class Members</h2>
<p>
You can protect or hide <a href="glsproperty.htm">properties</a> and <a href="glsmethod.htm">methods</a> in a class definition with the PROTECTED and HIDDEN keywords of the <a href="lngdefine_class.htm">DEFINE CLASS</a> command.</p>
<p>
For example, if you create a class to hold employee information, and you don’t want users to be able to change the hire date, you can protect the HireDate property. If users need to find out when an employee was hired, you can include a method to return the hire date.</p>
<pre><code>DEFINE CLASS employee AS CUSTOM
PROTECTED HireDate
  First_Name = ""
  Last_Name = ""
  Address = ""
  HireDate = { - - }

PROCEDURE GetHireDate
  RETURN This.HireDate
ENDPROC
ENDDEFINE
</code></pre>
<h2>Creating Objects from Classes</h2>
<p>
When you have saved a visual class, you can create an object based on it with the <a href="lngcreateobjectlp_rp.htm">CREATEOBJECT(&nbsp;)</a> function. The following example demonstrates running a form saved as a class definition in the class library file Forms.vcx:</p>
<p class=label>
<b>Creating and Showing a Form Object Whose Class Was Designed in the Form Designer</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Code</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=48%><pre><a href="lngset_classlib.htm"><code>SET CLASSLIB</code></a><code> TO Forms ADDITIVE</code></pre>
</td>
<td width=52%>Set the class library to the .vcx file that the form definition was saved in. The ADDITIVE keyword prevents this command from closing any other class libraries that happened to be open.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>frmTest = <a href="lngcreateobjectlp_rp.htm">CREATEOBJECT</a>("TestForm")</code></pre>
</td>
<td width=52%>This code assumes that the name of the form class saved in the class library is TestForm.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>frmTest.Show</code></pre>
</td>
<td width=52%>Display the form.</td>
</tr>
</table><br>
<h2>Adding Objects to a Container Class</h2>
<p>
You can use the ADD OBJECT clause in the <a href="lngdefine_class.htm">DEFINE CLASS</a> command or the <a href="lngaddobject_method.htm">AddObject method</a> to add objects to a container.</p>
<p>
For example, the following class definition is based on a form. The ADD OBJECT command adds two command buttons to the form:</p>
<pre><code>DEFINE CLASS myform AS FORM
  ADD OBJECT cmdOK AS COMMANDBUTTON
  ADD OBJECT PROTECTED cmdCancel AS COMMANDBUTTON
ENDDEFINE
</code></pre>
<p>
Use the AddObject method to add objects to a container after the container object has been created. For example, the following lines of code create a form object and add two command buttons to it:</p>
<pre><code>frmMessage = CREATEOBJECT("FORM")
frmMessage.AddObject("txt1", "TEXTBOX")
frmMessage.AddObject("txt2", "TEXTBOX")
</code></pre>
<p>
You can also use the AddObject method in the method code of a class. For example, the following class definition uses AddObject in the code associated with the <a href="lnginit_event.htm">Init event</a> to add a <a href="glscontrol.htm">control</a> to a grid column.</p>
<pre><code>DEFINE CLASS mygrid AS GRID
ColumnCount = 3
PROCEDURE Init
  THIS.Column2.AddObject("cboClient", "COMBOBOX")
  THIS.Column2.CurrentControl = "cboClient"
ENDPROC
ENDDEFINE
</code></pre>
<h3>Adding and Creating Classes in Method Code</h3>
<p>
You can programmatically add <a href="glsobject.htm">objects</a> to a container with the AddObject method. You can also create objects with the <a href="lngcreateobjectlp_rp.htm">CREATEOBJECT(&nbsp;)</a> function in the Load, Init, or any other method of the class.</p>
<p>
When you add an object with the AddObject method, the object becomes a member of the container. The <a href="lngparent_property.htm">Parent property</a> of the added object refers to the container. When an object based on the container or control class is released from memory, the added object is also released.</p>
<p>
When you create an object with the CREATEOBJECT(&nbsp;) function, the object is scoped to a property of the class or a <a href="glsvariable.htm">variable</a> in the method that calls this function. The parent property of the object is undefined.</p>
<h2>Assigning Method and Event Code</h2>
<p>
In addition to writing code for the <a href="glsmethod.htm">methods</a> and <a href="glsevent.htm">events</a> of an <a href="glsobject.htm">object</a>, you can extend the set of methods in subclasses of Visual FoxPro base classes. Here are the rules for writing event code and methods:</p>
<ul type=disc>
<li>
The event set for the Visual FoxPro base classes is fixed and cannot be extended.</li>
<li>
Every class recognizes a set of fixed default events, the minimum set of which includes <a href="lnginit_event.htm">Init</a>, <a href="lngdestroy_event.htm">Destroy</a>, and <a href="lngerror_event.htm">Error</a> events.</li>
<li>
When you create a <a href="glsmethod.htm">method</a> in a class definition with the same name as an <a href="glsevent.htm">event</a> that the <a href="glsclass.htm">class</a> can recognize, the code in the method is executed when the event occurs.</li>
<li>
You can add methods to your classes by creating a <a href="glsprocedure.htm">procedure</a> or <a href="glsfunction.htm">function</a> within the class definition.<br><br></li>
<li>
You can create <a href="dgprogramming_improvements.htm#newaccess_and_assign_methods">Access and Assign methods</a> for your classes by creating a <a href="glsprocedure.htm">procedure</a> or <a href="glsfunction.htm">function</a> with the same name as a class property and _ACCESS or _ASSIGN appended to the procedure or function name.</li>
</ul>

<h3><a name="dgcalling_event_code_up_the_class_hierarchy"></a>Calling Event Code up the Class Hierarchy</h3>
<p>
When you create a <a href="glsclass.htm">class</a>, the class automatically inherits all the <a href="glsproperty.htm">properties</a>, <a href="glsmethod.htm">methods</a>, and <a href="glsevent.htm">events</a> of the parent class. If code is written for an event in the parent class, that code is executed when the event occurs with respect to an object based on the subclass. You can, however, overwrite the parent class code by writing code for the event in the subclass.</p>
<p>
To explicitly call the event code in a parent class when the subclass has code written for the same event, use the <a href="lngdodefaultlp_rp.htm">DODEFAULT(&nbsp;)</a> function.</p>
<p>
For example, you could have a class named <code>cmdBottom</code> based on the command button base class that has the following code in the <a href="lngclick_event.htm">Click event</a>:</p>
<pre><code>GO BOTTOM
THISFORM.Refresh
</code></pre>
<p>
When you add an <a href="glsobject.htm">object</a> based on this class to a <a href="glsform.htm">form</a>, named, for example, <code>cmdBottom1</code>, you might decide that you also want to display a message for the user so that he or she knows that the record pointer is at the bottom of the table. You could add the following code to the Click event of the object to display the message:</p>
<pre><code>WAIT WINDOW "At the Bottom of the Table" TIMEOUT 1
</code></pre>
<p>
When you run the form, however, the message is displayed, but the record pointer doesn’t move because the code in the Click event of the parent class is never executed. To make sure the code in the Click event of the parent class is also executed, include the following lines of code in the Click event procedure of the object:</p>
<pre><code>DODEFAULT( )
WAIT WINDOW "At the Bottom of the Table" TIMEOUT 1
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;You can use the <a href="lngaclasslp_rp.htm">ACLASS(&nbsp;)</a> function to determine all the classes in an object’s class hierarchy.</p>
<h3>Preventing Base Class Code from Executing</h3>
<p>
Sometimes you’ll want to prevent the base class default behavior from taking place in an <a href="glsevent.htm">event</a> or <a href="glsmethod.htm">method</a>. You can do this by including the NODEFAULT keyword in the method code you write. For example, the following program uses the NODEFAULT keyword in the <a href="lngkeypress_event.htm">KeyPress event</a> of a <a href="glstext_box_.htm">text box</a> to prevent the typed characters from being displayed in the text box:</p>
<pre><code>frmKeyExample = CREATEOBJECT("test")
frmKeyExample.Show
READ EVENTS
DEFINE CLASS test AS FORM
  ADD OBJECT text1 AS TEXTBOX
  PROCEDURE text1.KeyPress
 &nbsp; PARAMETERS nKeyCode, nShiftAltCtrl
 &nbsp; NODEFAULT
 &nbsp; IF BETWEEN(nKeyCode, 65, 122) &amp;&amp; between 'A' and 'z'
 &nbsp;&nbsp; This.Value = ALLTRIM(This.Value) + "*"
 &nbsp;&nbsp; ACTIVATE SCREEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; send output to main Visual FoxPro window
 &nbsp;&nbsp; ?? CHR(nKeyCode)
 &nbsp; ENDIF
  ENDPROC
  PROCEDURE Destroy
 &nbsp; CLEAR EVENTS
  ENDPROC
ENDDEFINE
</code></pre>
<h3>Creating a Set of Table Navigation Buttons</h3>
<p>
A common feature of many applications is a series of navigation buttons that allow users to move through a table. These typically include buttons to move the record pointer to the next or prior record in the table, as well as to the top or bottom record in the table.</p>
<p class=label>
<b>Table navigation buttons</b></p>
<p>
<img src="afd03013.gif" border=0></p>
<h4>Designing the Navigation Buttons</h4>
<p>
Each of the buttons will have some characteristics and functionality in common, so it is a good idea to create a navigation button class. Then the individual buttons can easily derive this common appearance and functionality. This parent class is the <code>Navbutton</code> class defined later in this section.</p>
<p>
Once the parent class is defined, the following subclasses define the functionality and appearance specific to each of the four navigation buttons: <code>navTop, navPrior, navNext, navBottom.</code></p>
<p>
Finally, a <a href="glscontainer_classes.htm">container class</a>, <code>vcr</code>, is created and each of the navigation buttons is added to the container class. The container can be added to a <a href="glsform.htm">form</a> or a <a href="glstoolbar.htm">toolbar</a> to provide table navigation functionality.</p>
<h4>NAVBUTTON Class Definition</h4>
<p>
To create <code>Navbutton</code>, save the following six class definitions (<code>Navbutton</code>, <code>navTop</code>, <code>navBottom</code>, <code>navPrior</code>, <code>navNext</code>, and <code>vcr</code>) to a program file such as Navclass.prg.</p>
<p class=label>
<b>Definition of the Generic Navigation Commandbutton Class</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Code</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=48%><pre><code>DEFINE CLASS Navbutton AS
COMMANDBUTTON

  Height = 25
  Width = 25</code><pre><code>&nbsp;&nbsp;TableAlias = ""</code></pre>
</pre>
</td>
<td width=52%>Define the parent class of the navigation buttons.<br>
<br>
Give the class some dimensions.<p>
Include a custom <a href="glsproperty.htm">property</a>, <code>TableAlias</code>, to hold the name of the <a href="glsalias.htm">alias</a> to navigate through.</p>
</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>PROCEDURE Click
  IF NOT EMPTY(This.TableAlias)
 &nbsp; SELECT (This.TableAlias)
  ENDIF
ENDPROC</code></pre>
</td>
<td width=52%>If <code>TableAlias</code> has been set, this parent class procedure selects the alias before the actual navigation code in the subclasses is executed. Otherwise, assume that the user wants to navigate through the table in the currently selected work area.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>PROCEDURE RefreshForm
  _SCREEN.ActiveForm.Refresh
ENDPROC</code></pre>
</td>
<td width=52%>Using _SCREEN.ActiveForm.Refresh instead of THISFORM.Refresh allows you to add the class to a <a href="glsform.htm">form</a> or a <a href="glstoolbar.htm">toolbar</a> and have it function equally well.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>ENDDEFINE</code></pre>
</td>
<td width=52%>End the class definition.</td>
</tr>
</table><br>
<p>
The specific navigation buttons are all based on the <code>Navbutton</code> class. The following code defines the Top button for the set of navigation buttons. The remaining three navigation buttons are defined in the following table. The four class definitions are similar, so only the first one has extensive comments.</p>
<p class=label>
<b>Definition of the Top Navigation Button Class</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Code</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=48%><pre><code>DEFINE CLASS navTop AS Navbutton
  Caption = "|&lt;"</code></pre>
</td>
<td width=52%>Define the Top navigation button class and set the <a href="lngcaption_property.htm">Caption property</a>.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>PROCEDURE Click</code></pre>
</td>
<td width=52%>Create method code to be executed when the <a href="lngclick_event.htm">Click event</a> for the <a href="glscontrol.htm">control</a> occurs.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>&nbsp;&nbsp;DODEFAULT( )



  GO TOP


  THIS.RefreshForm</code></pre>
</td>
<td width=52%>Call the Click event code in the parent class, <code>Navbutton</code>, so that the appropriate <a href="glsalias.htm">alias</a> can be selected if the TableAlias property has been set.<br>
<br>
Include the code to set the record pointer to the first record in the table: GO TOP.<br>
<br>
Call the RefreshForm method in the parent class. It is not necessary to use the <a href="lngcc.htm">scope resolution operator</a> (::) in this case because there is no <a href="glsmethod.htm">method</a> in the subclass with the same name as the method in the parent class. On the other hand, both the parent and the subclass have method code for the Click event.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>ENDPROC</code></pre>
</td>
<td width=52%>End the Click procedure.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>ENDDEFINE</code></pre>
</td>
<td width=52%>End the class definition.</td>
</tr>
</table><br>
<p>
The other navigation buttons have similar class definitions.</p>
<p class=label>
<b>Definition of the Other Navigation Button Classes</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Code</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=48%><pre><code>DEFINE CLASS navNext AS Navbutton
  Caption = "&gt;"</code></pre>
</td>
<td width=52%>Define the Next navigation button class and set the <a href="lngcaption_property.htm">Caption property</a>.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>PROCEDURE Click
  DODEFAULT( )
  SKIP 1
  IF EOF(&nbsp;)
 &nbsp; GO BOTTOM
  ENDIF
  THIS.RefreshForm
ENDPROC
ENDDEFINE</code></pre>
</td>
<td width=52%><br>
<br>
<br>
Include the code to set the record pointer to the next record in the table.<br>
<br>
<br>
<br>
End the class definition.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>DEFINE CLASS navPrior AS Navbutton
  Caption = "&lt;"</code></pre>
</td>
<td width=52%>Define the Prior navigation button class and set the Caption property.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>PROCEDURE Click
  DODEFAULT( )
  SKIP –1
  IF BOF(&nbsp;)
 &nbsp; GO TOP
  ENDIF
  THIS.RefreshForm
ENDPROC
ENDDEFINE</code></pre>
</td>
<td width=52%><br>
<br>
<br>
Include the code to set the record pointer to the previous record in the table.<br>
<br>
<br>
<br>
End the class definition.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>DEFINE CLASS navBottom AS
Navbutton
  Caption = "&gt;|"</code></pre>
</td>
<td width=52%>Define the Bottom navigation button class and set the Caption property.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>PROCEDURE Click
  DODEFAULT( )
  GO BOTTOM
  THIS.RefreshForm
ENDPROC
ENDDEFINE</code></pre>
</td>
<td width=52%><br>
<br>
Include the code to set the record pointer to the bottom record in the table.<br>
<br>
End the class definition.</td>
</tr>
</table><br>
<p>
The following class definition contains all four navigation buttons so that they can be added as a unit to a form. The class also includes a method to set the TableAlias property of the buttons.</p>
<p class=label>
<b>Definition of a Table Navigation Control Class</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=58%><b>Code</b></td>
<td class=label width=42%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=58%><pre><code>DEFINE CLASS vcr AS CONTAINER
 &nbsp; Height = 25
 &nbsp; Width = 100
 &nbsp; Left = 3
 &nbsp; Top = 3</code></pre>
</td>
<td width=42%>Begin the class definition. The <a href="lngheight_property.htm">Height property</a> is set to the same height as the command buttons it will contain. </td>
</tr>
<tr valign=top>
<td width=58%><pre><code>&nbsp;&nbsp;&nbsp;ADD OBJECT cmdTop AS navTop ;
 &nbsp;&nbsp;&nbsp;&nbsp; WITH Left = 0
 &nbsp; ADD OBJECT cmdPrior AS navPrior ;
 &nbsp;&nbsp;&nbsp;&nbsp; WITH Left = 25
 &nbsp; ADD OBJECT cmdNext AS navNext ;
 &nbsp;&nbsp;&nbsp;&nbsp; WITH Left = 50
 &nbsp; ADD OBJECT cmdBot AS navBottom ;
 &nbsp;&nbsp;&nbsp;&nbsp; WITH Left = 75</code></pre>
</td>
<td width=42%>Add the navigation buttons.</td>
</tr>
<tr valign=top>
<td width=58%><pre><code>PROCEDURE SetTable(cTableAlias)
 &nbsp; IF TYPE("cTableAlias") = 'C'
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.cmdTop.TableAlias = ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cTableAlias
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.cmdPrior.TableAlias = ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cTableAlias
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.cmdNext.TableAlias = ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cTableAlias
 &nbsp;&nbsp;&nbsp;&nbsp; THIS.cmdBot.TableAlias = ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cTableAlias
 &nbsp; ENDIF
ENDPROC</code></pre>
</td>
<td width=42%>This method is used to set the TableAlias property of the buttons. TableAlias is defined in the parent class <code>Navbutton</code>.<br>
<br>
You could also use the <a href="lngsetall_method.htm">SetAll method</a> to set this property:<br>
<code>IF TYPE ("cTableAlias") = 'C'</code><br>
  <code>This.SetAll("TableAlias", "cTableAlias")</code><br>
<code>ENDIF</code><br>
However, this would cause an error if an object were ever added to the class that did not have a TableAlias property.</td>
</tr>
<tr valign=top>
<td width=58%><pre><code>ENDDEFINE</code></pre>
</td>
<td width=42%>End class definition.</td>
</tr>
</table><br>
<p>
Once you have defined the class, you can subclass it or add it to a <a href="glsform.htm">form</a>.</p>
<h4>Creating a Subclass Based on the New Class</h4>
<p>
You can also create subclasses based on <code>vcr</code> that have additional buttons such as Search, Edit, Save, and Quit. For example, <code>vcr2</code> includes a Quit button:</p>
<p class=label>
<b>Table navigation buttons with a button to close the form</b></p>
<p>
<img src="afd03014.gif" border=0></p>
<p class=label>
<b>Definition of a Table Navigation Control Subclass</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=48%><b>Code</b></td>
<td class=label width=52%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=48%><pre><code>DEFINE CLASS vcr2 AS vcr</code><pre><code>ADD OBJECT cmdQuit AS
COMMANDBUTTON WITH ;
 &nbsp; Caption = "Quit",;
 &nbsp; Height = 25, ;
 &nbsp; Width = 50
Width = THIS.Width + THIS.cmdQuit.Width
cmdQuit.Left = THIS.Width - ; 
 &nbsp; THIS.cmdQuit.Width
</code></pre>
</pre>
</td>
<td width=52%>Define a class based on <code>vcr</code> and add a command button to it. </td>
</tr>
<tr valign=top>
<td width=48%><pre><code>PROCEDURE cmdQuit.CLICK</code><pre><code>&nbsp;&nbsp;&nbsp;RELEASE THISFORM
ENDPROC</code></pre>
</pre>
</td>
<td width=52%>When the user clicks <code>cmdQuit</code>, this code releases the <a href="glsform.htm">form</a>.</td>
</tr>
<tr valign=top>
<td width=48%><pre><code>ENDDEFINE</code></pre>
</td>
<td width=52%>End class definition.</td>
</tr>
</table><br>
<p>
<code>Vcr2</code> has everything that <code>vcr</code> does, plus the new command button, and you don’t have to rewrite any of the existing code.</p>
<h4>Changes to VCR Reflected in the Subclass</h4>
<p>
Because of <a href="glsinheritance.htm">inheritance</a>, changes to the parent class are reflected in all subclasses based on the parent. For example, you could let the user know that the bottom of the table has been reached by changing the <code>IF EOF(&nbsp;)</code> statement in <code>navNext.Click</code> to the following:</p>
<pre><code>IF EOF( )
 &nbsp; GO BOTTOM
 &nbsp; SET MESSAGE TO "Bottom of the table"
ELSE
 &nbsp; SET MESSAGE TO
ENDIF
</code></pre>
<p>
You could let the user know that the top of the table has been reached by changing the <code>IF BOF(&nbsp;)</code> statement in <code>navPrior.Click</code> to the following:</p>
<pre><code>IF BOF()
 &nbsp; GO TOP
 &nbsp; SET MESSAGE TO "Top of the table"
ELSE
 &nbsp; SET MESSAGE TO
ENDIF
</code></pre>
<p>
If these changes are made to the <code>navNext</code> and <code>navPrior</code> classes, they will also apply automatically to the appropriate buttons in <code>vcr</code> and <code>vcr2.</code></p>
<h4>Adding VCR to a Form Class</h4>
<p>
Once <code>vcr</code> is defined as a <a href="glscontrol.htm">control</a>, the control can be added in the definition of a container. For example, the following code added to Navclass.prg defines a <a href="glsform.htm">form</a> with added navigation buttons:</p>
<pre><code>DEFINE CLASS NavForm AS Form
 &nbsp; ADD OBJECT oVCR AS vcr
ENDDEFINE
</code></pre>
<h4>Running the Form Containing VCR</h4>
<p>
Once the form subclass is defined, you can display it easily with the appropriate commands.</p>
<p class=label>
<b>To display the form</b>
<ol>
<li>
Load the class definition:<pre><code>SET PROCEDURE TO navclass ADDITIVE
</code></pre>
</li>
<li>
Create an <a href="glsobject.htm">object</a> based on the <code>navform</code> class:<pre><code>frmTest = CREATEOBJECT("navform")
</code></pre>
</li>
<li>
Invoke the <a href="lngshow_method.htm">Show</a> method of the form:<pre><code>frmTest.Show</code></pre>
</li>
</ol>
<p>
If you don’t call the SetTable method of <code>oVCR (</code>the VCR object in <code>NavForm)</code> when the user clicks the navigation buttons, the record pointer moves in the table in the currently selected work area. You can call the SetTable method to specify what table to move through.</p>
<pre><code>frmTest.oVCR.SetTable("customer")
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;When the user closes the form, <code>frmTest</code> is set to a <a href="glsnull_value.htm">null value</a> (.NULL.). To release the object variable from memory, use the <a href="lngrelease.htm">RELEASE</a> command. Object variables created in program files are released from memory when the program is completed.</p>
<h3>Defining a Grid Control </h3>
<p>
A <a href="glsgrid_.htm">grid</a> contains columns, which in turn can contain headers and any other <a href="glscontrol.htm">control</a>. The default control contained in a column is a <a href="glstext_box_.htm">text box</a>, so that the default functionality of the grid approximates a <a href="wndbrowse_window.htm">Browse</a> window. However, the underlying architecture of the grid opens it up to endless extensibility.</p>
<p>
The following example creates a form that contains a Grid object with two columns. The second column contains a <a href="glscheck_box_.htm">check box</a> to display the values in a logical field in a table.</p>
<p class=label>
<b>Grid control with a check box in one column</b></p>
<p>
<img src="afd03015.gif" border=0></p>
<p class=label>
<b>Definition of a Grid Class with a Check Box in a Grid Column</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=53%><b>Code</b></td>
<td class=label width=47%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=53%><pre><code>DEFINE CLASS grdProducts AS Grid
 &nbsp; Left = 24
 &nbsp; Top = 10
 &nbsp; Width = 295
 &nbsp; Height = 210
 &nbsp; Visible = .T.
 &nbsp; RowHeight = 28
 &nbsp; ColumnCount = 2</code></pre>
</td>
<td width=47%>Start the class definition and set <a href="glsproperty.htm">properties</a> that determine the grid appearance.<br>
<br>
When you set the ColumnCount property to 2, you add two columns to the grid. Each column contains a header with the name Header1. In addition, each column has an independent group of properties that determines its appearance and behavior.</td>
</tr>
<tr valign=top>
<td width=53%><pre><code>Column1.ControlSource ="prod_name"
Column2.ControlSource ="discontinu"</code></pre>
</td>
<td width=47%>When you set the ControlSource of a column, the column displays that field’s values for all the records in the table.<br>
<code>Discontinu</code> is a logical field.</td>
</tr>
<tr valign=top>
<td width=53%><pre><code>Column2.Sparse = .F.</code></pre>
</td>
<td width=47%>Column2 will contain the check box. Set the column’s <a href="lngsparse_property.htm">Sparse property</a> to .F. so that the check box will be visible in all rows, not just in the selected cell.</td>
</tr>
<tr valign=top>
<td width=53%><pre><code>Procedure Init
 &nbsp; THIS.Column1.Width = 175
 &nbsp; THIS.Column2.Width = 68
 &nbsp; THIS.Column1.Header1.Caption = ;
 &nbsp;&nbsp;&nbsp;&nbsp; "Product Name"
 &nbsp; THIS.Column2.Header1.Caption = ;
 &nbsp;&nbsp;&nbsp;&nbsp; "Discontinued"

 &nbsp; THIS.Column2.AddObject("chk1", ;
 &nbsp;&nbsp;&nbsp;&nbsp; "checkbox")
 &nbsp; THIS.Column2.CurrentControl = ;
 &nbsp;&nbsp;&nbsp;&nbsp; "chk1"
 &nbsp; THIS.Column2.chk1.Visible = .T.
 &nbsp; THIS.Column2.chk1.Caption = ""
ENDPROC</code></pre>
</td>
<td width=47%>Set column widths and header captions.<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
The <a href="lngaddobject_method.htm">AddObject method</a> allows you to add an object to a container — in this case, a check box named <code>chk1</code>.<br>
Set the <a href="lngsyslp18rp___current_control.htm">CurrentControl</a> of the column to the check box so that the check box will be displayed.<br>
Make sure that the check box is visible.<br>
Set the caption to an empty string so that the default <a href="glscaption.htm">caption</a> “chk1” won’t be displayed.</td>
</tr>
<tr valign=top>
<td width=53%><pre><code>ENDDEFINE</code></pre>
</td>
<td width=47%>End of the class definition.</td>
</tr>
</table><br>
<p>
The following class definition is the form that contains the grid. Both class definitions can be included in the same program file.</p>
<p class=label>
<b>Definition of a Form Class that Contains the Grid Class</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=53%><b>Code</b></td>
<td class=label width=47%><b>Comments</b></td>
</tr>
<tr valign=top>
<td width=53%><pre><code>DEFINE CLASS GridForm AS FORM
 &nbsp; Width = 330
 &nbsp; Height = 250
 &nbsp; Caption = "Grid Example"
 &nbsp; ADD OBJECT grid1 AS grdProducts</code></pre>
</td>
<td width=47%>Create a form class and add an <a href="glsobject.htm">object</a>, based on the grid class, to it.</td>
</tr>
<tr valign=top>
<td width=53%><pre><code>PROCEDURE Destroy
 &nbsp; CLEAR EVENTS
ENDPROC

ENDDEFINE</code></pre>
</td>
<td width=47%>The program that creates an object based on this class will use <a href="lngread_events.htm">READ EVENTS</a>. Including CLEAR EVENTS in the <a href="lngdestroy_event.htm">Destroy event</a> of the form allows the program to finish running when the user closes the form.<br>
End of the class definition.</td>
</tr>
</table><br>
<p>
The following program opens the table with the fields to be displayed in the grid columns, creates an object based on the GridForm class, and issues the <a href="lngread_events.htm">READ EVENTS</a> command:</p>
<pre><code>CLOSE DATABASE
OPEN DATABASE (HOME(2) + "data\testdata.dbc")
USE products
frmTest= CREATEOBJECT("GridForm")
frmTest.Show
READ EVENTS
</code></pre>
<p>
This program can be included in the same file with the class definitions if it comes at the beginning of the file. You could also use the <a href="lngset_procedure.htm">SET PROCEDURE TO</a> command to specify the program with the class definitions and include this code in a separate program.</p>
<h2>Creating Object References</h2>
<p>
Instead of making a copy of an <a href="glsobject.htm">object</a>, you can create a reference to the object. A reference takes less memory than an additional object, can easily be passed between <a href="glsprocedure.htm">procedures</a>, and can aid in writing generic code.</p>
<h3>Returning a Reference to an Object</h3>
<p>
Sometimes, you might want to manipulate an <a href="glsobject.htm">object</a> by means of one or more references to the object. For example, the following program defines a class, creates an object based on the class, and returns a reference to the object:</p>
<pre><code>*--NEWINV.PRG
*--Returns a reference to a new invoice form.
frmInv = CREATEOBJECT("InvoiceForm")
RETURN frmInv
 
DEFINE CLASS InvoiceForm AS FORM
 &nbsp; ADD OBJECT txtCompany AS TEXTBOX
 &nbsp; * code to set properties, add other objects, and so on
ENDDEFINE
</code></pre>
<p>
The following program establishes a reference to the object created in Newinv.prg. The reference <a href="glsvariable.htm">variable</a> can be manipulated in exactly the same way as the object variable can:</p>
<pre><code>frmInvoice = NewInv() &amp;&amp; store the object reference to a variable
frmInvoice.SHOW
</code></pre>
<p>
You can also create a reference to an object on a <a href="glsform.htm">form</a>, as in the following example:</p>
<pre><code>txtCustName = frmInvoice.txtCompany
txtCustName.Value = "Fox User"
</code></pre>
<p class=indent>
<B><b>Tip</b></B>&nbsp;&nbsp;&nbsp;Once you’ve created an object, you can use the <a href="lngdisplay_objects.htm">DISPLAY OBJECTS</a> command to display the object’s class hierarchy, property settings, contained objects, and available methods and events. You can fill an array with the properties (not the property settings), events, methods, and contained objects of an object with the <a href="lngamemberslp_rp.htm">AMEMBERS(&nbsp;)</a> function.</p>
<h3>Releasing Objects and References from Memory</h3>
<p>
If a reference to an <a href="glsobject.htm">object</a> exists, releasing the object does not clear the object from memory. For example, the following command releases <code>frmInvoice:</code>, the original object:</p>
<pre><code>RELEASE frmInvoice
</code></pre>
<p>
However, because a reference to an object belonging to <code>frmInvoice</code> still exists, the object is not released from memory until <code>txtCustName</code> is released with the following command:</p>
<pre><code>RELEASE txtCustName
</code></pre>
<h3>Checking to See if an Object Exists</h3>
<p>
You can use the <a href="lngtypelp_rp.htm">TYPE(&nbsp;)</a>, <a href="lngisnulllp_rp.htm">ISNULL(&nbsp;)</a>, and <a href="lngvartypelp_rp.htm">VARTYPE(&nbsp;)</a> functions to determine if an object exists. For example, the following lines of code check to see whether an object named <code>oConnection</code> exists:</p>
<pre><code>IF TYPE("oConnection") = "O" AND NOT ISNULL(oConnection)
 &nbsp; * Object exists
ELSE
 &nbsp; * Object does not exist
ENDIF
</code></pre>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;<a href="lngisnulllp_rp.htm">ISNULL(&nbsp;)</a> is necessary because .NULL. is stored to the form object variable when a user closes a form, but the type of the variable remains “O”.</p>
<h2>Creating Arrays of Members</h2>
<p>
You can define members of classes as <a href="glsarray.htm">arrays</a>. In the following example, <code>choices</code> is an array of <a href="glscontrol.htm">controls</a>:</p>
<pre><code>DEFINE CLASS MoverListBox AS CONTAINER
DIMENSION choices[3]
ADD OBJECT lstFromListBox AS LISTBOX
ADD OBJECT lstToListBox AS LISTBOX
ADD OBJECT choices[1] AS COMMANDBUTTON
ADD OBJECT choices[2] AS COMMANDBUTTON
ADD OBJECT choices[3] AS CHECKBOX
PROCEDURE choices.CLICK
 &nbsp; PARAMETER nIndex
 &nbsp; DO CASE
 &nbsp;&nbsp;&nbsp;&nbsp; CASE nIndex = 1
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * code
 &nbsp;&nbsp;&nbsp;&nbsp; CASE nIndex = 2
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * code
 &nbsp;&nbsp;&nbsp;&nbsp; CASE nIndex = 3
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * code
 &nbsp; ENDCASE
ENDPROC
ENDDEFINE
</code></pre>
<p>
When the user clicks a control in an array of controls, Visual FoxPro passes the index number of the control to the Click event procedure. In this procedure, you can use a <a href="lngdo_case_..._endcase.htm">CASE</a> statement to execute different code depending on which button was clicked.</p>
<h2>Creating Arrays of Objects</h2>
<p>
You can also create <a href="glsarray.htm">arrays</a> of <a href="glsobject.htm">objects</a>. For example, <code>MyArray</code> holds five command buttons:</p>
<pre><code>DIMENSION MyArray[5]
FOR x = 1 TO 5
 &nbsp; MyArray[x] = CREATEOBJECT("COMMANDBUTTON")
ENDFOR
</code></pre>
<p>
There are some considerations to keep in mind with arrays of objects:</p>
<ul type=disc>
<li>
You can’t assign an object to an entire array with one command. You need to assign the object to each member of the array individually.</li>
<li>
You can’t assign a value to a <a href="glsproperty.htm">property</a> of an entire array. The following command would result in an error:<pre><code>MyArray.Enabled = .F.
</code></pre>
</li>
<li>
When you redimension an object array so that it is larger than the original array, the new elements are initialized to false (.F.), as is the case with all arrays in Visual FoxPro. When you redimension an object array so that it is smaller than the original array, the objects with a subscript greater than the largest new subscript are released.</li>
</ul>
<h2>Using Objects to Store Data</h2>
<p>
In object-oriented languages, a <a href="glsclass.htm">class</a> offers a useful and convenient vehicle for storing data and <a href="glsprocedure.htm">procedures</a> related to an entity. For example, you could define a customer class to hold information about a customer as well as a <a href="glsmethod.htm">method</a> to calculate the customer’s age:</p>
<pre><code>DEFINE CLASS customer AS CUSTOM
 &nbsp; LastName = ""
 &nbsp; FirstName = ""
 &nbsp; Birthday = { - - }
 &nbsp; PROCEDURE Age
 &nbsp;&nbsp;&nbsp;&nbsp; IF !EMPTY(THIS.Birthday)
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RETURN YEAR(DATE()) - YEAR(THIS.Birthday)
 &nbsp;&nbsp;&nbsp;&nbsp; ELSE
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RETURN 0
 &nbsp;&nbsp;&nbsp;&nbsp; ENDIF
 &nbsp; ENDPROC
ENDDEFINE
</code></pre>
<p>
However, data stored in objects based on the customer class are stored only in memory. If this data were in a table, the table would be stored on disk. If you had more than one customer to keep track of, the table would give you access to all of the Visual FoxPro database management commands and functions. As a result, you could quickly locate information, sort it, group it, perform calculations on it, create reports and queries based on it, and so on.</p>
<p>
Storing and manipulating data in <a href="glsdatabase.htm">databases</a> and <a href="glstable.htm">tables</a> is what Visual FoxPro does best. There are times, however, when you’ll want to store data in <a href="glsobject.htm">objects</a>. Usually, the data will be significant only while your application is running and it will pertain to a single entity.</p>
<p>
For example, in an application that includes a security system, you would typically have a table of users who have access to the application. The table would include user identification, password, and access level. Once a user has logged on, you won’t need all the information in the table. All you need is information about the current user, and this information can be easily stored and manipulated in an object. The following class definition, for example, initiates a logon when an object based on the class is created:</p>
<pre><code>DEFINE CLASS NewUser AS CUSTOM
 &nbsp; PROTECTED LogonTime, AccessLevel
 &nbsp; UserId = ""
 &nbsp; PassWord = ""
 &nbsp; LogonTime = { - - : : }
 &nbsp; AccessLevel = 0
 &nbsp; PROCEDURE Init
 &nbsp;&nbsp;&nbsp;&nbsp; DO FORM LOGON WITH ; &amp;&amp; assuming you have created this form
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This.UserId, ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This.PassWord, ;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This.AccessLevel
 &nbsp;&nbsp;&nbsp;&nbsp; This.LogonTime = DATETIME( )
 &nbsp; ENDPROC
* Create methods to return protected property values.
 &nbsp; PROCEDURE GetLogonTime
 &nbsp;&nbsp;&nbsp;&nbsp; RETURN This.LogonTime
 &nbsp; ENDPROC
 &nbsp; PROCEDURE GetAccessLevel
 &nbsp;&nbsp;&nbsp;&nbsp; RETURN This.AccessLevel
 &nbsp; ENDPROC
 
ENDDEFINE
</code></pre>
<p>
In the main program of your application, you could create an <a href="glsobject.htm">object</a> based on the <code>NewUser</code>class:</p>
<pre><code>oUser = CREATEOBJECT('NewUser')
oUser.Logon
</code></pre>
<p>
Throughout your application, when you need information about the current user, you can get it from the <code>oUser</code> object. For example:</p>
<pre><code>IF oUser.GetAccessLevel(&nbsp;) &gt;= 4
 &nbsp; DO ADMIN.MPR
ENDIF
</code></pre>
<h3>Integrating Objects and Data</h3>
<p>
In most applications, you can best utilize the power of Visual FoxPro by integrating objects and data. Most Visual FoxPro classes have <a href="glsproperty.htm">properties</a> and <a href="glsmethod.htm">methods</a> that allow you to integrate the power of a relational database manager and a full object-oriented system.</p>
<p class=label>
<b>Properties for Integrating Visual FoxPro Classes and Database Data</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=35%><b>Class</b></td>
<td class=label width=65%><b>Data properties</b></td>
</tr>
<tr valign=top>
<td width=35%><a href="glsgrid_.htm">Grid</a></td>
<td width=65%><a href="lngrecordsource_property.htm">RecordSource</a>, <a href="lngchildorder_property.htm">ChildOrder</a>, <a href="lnglinkmaster_property.htm">LinkMaster</a></td>
</tr>
<tr valign=top>
<td width=35%>All other <a href="glscontrol.htm">controls</a></td>
<td width=65%><a href="lngcontrolsource_property.htm">ControlSource</a></td>
</tr>
<tr valign=top>
<td width=35%><a href="glslist_box_.htm">List box</a> and <a href="glscombo_box_.htm">combo box</a></td>
<td width=65%><a href="lngcontrolsource_property.htm">ControlSource</a>, <a href="lngrowsource_property.htm">RowSource</a></td>
</tr>
<tr valign=top>
<td width=35%><a href="glsform.htm">Form</a> and <a href="glsform_set.htm">form set</a></td>
<td width=65%><a href="lngdatasession_property.htm">DataSession</a></td>
</tr>
</table><br>
<p>
Because these data properties can be changed at <a href="glsdesign_time.htm">design</a> or <a href="glsrun_time.htm">run time</a>, you can create generic controls with encapsulated functionality that operates on diverse data.</p>
<p>
For more information about integrating data and objects, see Chapter 9, <a href="dgcreating_forms.htm">Creating Forms</a>, and Chapter 10, <a href="dgusing_controls.htm">Using Controls</a>,</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fields Collection Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_fields_collection_object"></a>Fields Collection Object</h1>
<p>
The Fields collection object contains one or more Field objects. </p>
<h4>At a Glance </h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Specified in type library: </td>
<td width=52%>CDO.DLL </td>
</tr>
<tr valign=top>
<td width=48%>First available in: </td>
<td width=52%>CDO Library version 1.0.a </td>
</tr>
<tr valign=top>
<td width=48%>Parent objects: </td>
<td width=52%><a href="oleobjaf_6n1w.htm">AddressEntry</a> <br>
<a href="oleobjaf_10ac.htm">AddressEntryFilter</a> <br>
<a href="oleobjaf_4x84.htm">AddressList</a> <br>
<a href="oleobjaf_5flg.htm">AppointmentItem</a> <br>
<a href="oleobjaf_0x10.htm">Attachment</a> <br>
<a href="oleobjaf_4u2c.htm">Folder</a> <br>
<a href="oleobjis_4k6s.htm">InfoStore</a> <br>
<a href="oleobjis_4kac.htm">MeetingItem</a> <br>
<a href="oleobjis_2p10.htm">Message</a> <br>
<a href="oleobjis_4gxg.htm">MessageFilter</a> </td>
</tr>
<tr valign=top>
<td width=48%>Child objects: </td>
<td width=52%><a href="oleobjaf_8lh0.htm">Field</a> </td>
</tr>
<tr valign=top>
<td width=48%>Default property: </td>
<td width=52%><a href="oleobjaf_39ym.htm"><b>Item</b></a> </td>
</tr>
</table><br>
<p>
A Fields collection is considered a <i>small collection</i>, which means that it supports count and index values that let you access an individual Field object through the <b>Item</b> property. The Fields collection supports the Microsoft® Visual Basic® <b>For Each</b> statement. For more information on collections, see <a href="oleoview_4u0j.htm">Object Collections</a>. </p>
<h4>Properties </h4>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=32%><br>
Name </th>
<th align=left width=18%>Available since version </th>
<th align=left width=32%> <br>
Type </th>
<th align=left width=18%> <br>
Access </th>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_1bbz.htm"><b>Application</b></a> </td>
<td width=18%>1.0.a </td>
<td width=32%>String</td>
<td width=18%>Read-only</td>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_3a1r.htm"><b>Class</b></a> </td>
<td width=18%>1.0.a </td>
<td width=32%>Long</td>
<td width=18%>Read-only</td>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_4uni.htm"><b>Count</b></a> </td>
<td width=18%>1.0.a </td>
<td width=32%>Long</td>
<td width=18%>Read-only</td>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_39ym.htm"><b>Item</b></a> </td>
<td width=18%>1.0.a </td>
<td width=32%>Field object</td>
<td width=18%>Read-only</td>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_03rz.htm"><b>Parent</b></a> </td>
<td width=18%>1.0.a </td>
<td width=32%>AddressEntry object, AddressEntryFilter object, AddressList object, AppointmentItem object, Attachment object, Folder object, InfoStore object, MeetingItem object, Message object, or MessageFilter object </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_6o0v.htm"><b>Session</b></a> </td>
<td width=18%>1.0.a </td>
<td width=32%>Session object </td>
<td width=18%>Read-only </td>
</tr>
</table><br>
<h4>Methods </h4>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=32%><br>
Name </th>
<th align=left width=18%>Available since version </th>
<th align=left width=50%> <br>
Parameters </th>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_1qy6.htm"><b>Add</b></a> </td>
<td width=18%>1.0.a </td>
<td width=50%><i>name</i> as <b>String</b>, <br>
<i>Class</i> as <b>Long</b>, <br>
<i>value</i> as <b>Variant</b>, <br>
(optional) <i>PropsetID</i> as <b>String</b>, <br>
<i>PropTag</i> as <b>Long</b> </td>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_0ecu.htm"><b>Delete</b></a> </td>
<td width=18%>1.0.a </td>
<td width=50%>(none) </td>
</tr>
<tr valign=top>
<td width=32%><a href="oleobjaf_40xa.htm"><b>SetNamespace</b></a> </td>
<td width=18%>1.0.a </td>
<td width=50%><i>PropsetID</i> as <b>String</b> </td>
</tr>
</table><br>
<h4>Remarks </h4>
<p>
<a href="oleobjaf_8lh0.htm">Field</a> objects give you the ability to access MAPI properties on the parent object of the Fields collection. These include the predefined underlying MAPI properties and your own custom user-defined properties. </p>
<p>
MAPI defines a set of properties with identifiers less than the value &amp;H8000. These are known as <i>unnamed properties</i> because they are accessed using the MAPI property tag rather than a name. You can access these MAPI-defined properties using the Fields collection. All MAPI properties are accessible except those of types PT_OBJECT and PT_CLSID. </p>
<p>
Data types are preserved between MAPI properties and CDO fields, with the exception of MAPI properties of type PT_BINARY. These are converted from counted binary in MAPI to character string representation in CDO, where the characters in the string represent the hexadecimal digits of the MAPI property value. The string is converted back into counted binary when you write to the field. </p>
<p>
You can also extend the properties available through MAPI by defining your own properties. These user-defined properties, defined using a name and automatically assigned an identifier greater than &amp;H8000 by CDO, are known as <i>named properties</i>. (C++ programmers can access the property name in the MAPI structure <b>MAPINAMEID</b> and convert it to the property tag value.) </p>
<p>
All named properties are defined as part of a <i>property set</i>, which corresponds in the context of CDO to a <i>name space</i>. </p>
<p>
A property set is defined by a <b>GUID</b>, or globally unique identifier. CDO represents this <b>GUID</b> as a string of hexadecimal characters. Such identifiers are usually referenced using a constant that starts with the characters PS_, such as PS_PUBLIC_STRINGS, the default property set for all properties created using the CDO Library. </p>
<p>
You can also choose to organize your custom properties within their own name space by defining your own property set. The <a href="oleobjaf_1qy6.htm"><b>Add</b></a> and <a href="oleobjaf_39ym.htm"><b>Item</b></a> properties and the <a href="oleobjaf_40xa.htm"><b>SetNamespace</b></a> method let you specify the property set identifier to be used for named property access. </p>
<p>
When creating your own property set, you should be aware that MAPI reserves several property set identifiers for specific purposes. The following table lists reserved property sets: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Reserved property set </th>
<th align=left width=52%>Description </th>
</tr>
<tr valign=top>
<td width=48%>PS_MAPI </td>
<td width=52%>Allows providers to supply names for the unnamed properties (properties with identifiers less than &amp;H8000). </td>
</tr>
<tr valign=top>
<td width=48%>PS_PUBLIC_STRINGS </td>
<td width=52%>Default property set for custom properties added using CDO. </td>
</tr>
<tr valign=top>
<td width=48%>PS_ROUTING_ADDRTYPE </td>
<td width=52%>E-mail address types that are translated between messaging domains. </td>
</tr>
<tr valign=top>
<td width=48%>PS_ROUTING_DISPLAY_NAME </td>
<td width=52%>Display name properties that are translated  between messaging domains. </td>
</tr>
<tr valign=top>
<td width=48%>PS_ROUTING_EMAIL_ADDRESSES </td>
<td width=52%>E-mail addresses that are translated between messaging domains. </td>
</tr>
<tr valign=top>
<td width=48%>PS_ROUTING_ENTRYID </td>
<td width=52%>Long-term entry identifiers that are translated between messaging domains. </td>
</tr>
<tr valign=top>
<td width=48%>PS_ROUTING_SEARCH_KEY </td>
<td width=52%>Search keys that are translated between messaging domains. </td>
</tr>
</table><br>
<p>
To create your own <b>GUID</b> that identifies your property set, you can either use the Win32® command-line utility <b>UUIDGEN</b> or you can call the OLE function <b>CoCreateGuid</b> to supply one for you, as demonstrated in the following code fragment: </p>
<pre><code>' declarations required for the call to CoCreateGuid 
Type GUID 
    Guid1 As Long 
    Guid2 As Long 
    Guid3 As Long 
    Guid4 As Long 
End Type 
Declare Function CoCreateGuid Lib "OLE32.DLL" (pGuid As GUID) As Long 
Global Const S_OK = 0 
Dim strPropID As String 
Dim lResult As Long 
Dim lGuid As GUID 
 
' call CoCreateGuid, then convert the result to a hex string 
    lResult = CoCreateGuid(lGuid) 
    If lResult = S_OK Then 
        strPropID =  Hex$(lGuid.Guid1) &amp; Hex$(lGuid.Guid2) 
        strPropID = strPropID &amp; Hex$(lGuid.Guid3) 
        strPropID = strPropID &amp; Hex$(lGuid.Guid4) 
    Else 
        ' ... handle error ... 
    End If 
 </code></pre>
<p>
For more information on named properties and property sets, see "Named Properties" in the <i>MAPI Programmer's Reference</i>. For more information on <b>UUIDGEN</b> and <b>CoCreateGuid</b>, see "COM and ActiveX Object Services" in the Microsoft Platform SDK documentation. </p>
<p>
MAPI stores all custom properties that represent date and time information using Greenwich Mean Time (GMT). CDO converts these properties so that the values appear to the user in local time. </p>
<h4>Example </h4>
<p>
To uniquely identify a <a href="oleobjaf_8lh0.htm">Field</a> object in the Fields collection, use the Field object's <a href="oleobjaf_7vj8.htm"><b>Name</b></a> or <a href="oleobjaf_20ys.htm"><b>Index</b></a> property, or the MAPI property tag: </p>
<pre><code>Set objNamedField = objFolder.Fields.Item("BalanceDue") 
Set objNamedField2 = objMessage.Fields.Item("Keyword") 
Set objIndexedField = objMessage.Fields.Item(3) 
propTag = &amp;H0E180003 ' VB4.0: propTag = CdoPR_MESSAGE_DOWNLOAD_TIME 
Set objMAPIField = objMessage.Fields.Item(propTag) 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

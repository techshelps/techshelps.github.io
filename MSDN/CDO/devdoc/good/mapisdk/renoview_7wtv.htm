<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rendering Container Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_rendering_container_objects"></a>Rendering Container Objects</h1>
<p>
A container object can be a CDO <a href="oleobjaf_7qd0.htm">AddressEntries</a>, <a href="oleobjaf_1nec.htm">Folders</a>, <a href="oleobjis_1qd0.htm">Messages</a>, or <a href="oleobjis_3xro.htm">Recipients</a> collection. To render any container object and its contents, you use a <a href="renobj_86no.htm">ContainerRenderer</a> object. </p>
<p>
When you render a container object you apply a view to it. After you have specified the container object in the container renderer's <a href="renobj_555r.htm"><b>DataSource</b></a> property, a <a href="renobj_5ub8.htm">Views</a> collection is available through the container renderer's <a href="renobj_2vkv.htm"><b>Views</b></a> property. From this collection you select the appropriate <a href="renobj_6b3o.htm">CalendarView</a> or <a href="renobj_7kfo.htm">TableView</a> object and set the <a href="renobj_93z3.htm"><b>CurrentView</b></a> property to that object. If you do not make a selection, the current view remains set to the default view, which is the first view in the collection unless specified otherwise by the underlying store. </p>
<p>
A calendar view or table view is normally defined externally to your rendering application. For a folder there are three types of predefined table views: <i>common views</i>, <i>folder views</i>, and <i>personal views</i>. Common views are defined globally for all folders and all messaging users. A set of folder views can be defined for each individual folder, and a set of personal views for each individual messaging user. An address book container has no common, folder, or personal views predefined. The type of a calendar view is available in its <a href="renobj_6a8v.htm"><b>Source</b></a> property, and that of a table view in its <a href="renobj_70wv.htm"><b>Source</b></a> property. </p>
<p>
Modifications you make to predefined views do not persist in storage, but they remain in effect for your application until you change the source of the view. Modifications to folder views last until the <a href="renobj_555r.htm"><b>DataSource</b></a> property is changed, and modifications to common and personal views last until the <a href="renobj_86no.htm">ContainerRenderer</a> object is released. Simply changing the <a href="renobj_93z3.htm"><b>CurrentView</b></a> property does not nullify your modifications. </p>
<p>
In addition to the predefined views for the container object you are rendering, you can create new <i>custom views</i> with the collection's <a href="renobj_2hnj.htm"><b>Add</b></a> method. This is the only type of view you can use when rendering an address book container. A custom view is nonpersistent and cannot be saved. However, it is still available when the <b>DataSource</b> property is changed. You cannot delete any views from the Views collection. </p>
<p>
A <a href="renobj_6b3o.htm">CalendarView</a> or <a href="renobj_7kfo.htm">TableView</a> object specifies the overall rendering of a container object through its <a href="renobj_3tjz.htm"><b>Columns</b></a> property, which returns a child <a href="renobj_78ac.htm">Columns</a> collection for the table view. The order of the columns in the collection determines their display order. You can use the collection's <a href="renobj_63mn.htm"><b>Add</b></a> method to add new columns, which cease to exist when the collection is released, for example when the <b>DataSource</b> property is changed. Columns cannot be deleted from their collection. </p>
<p>
Each <a href="renobj_3qyc.htm">Column</a> object corresponds to one property of the items in the container object being rendered. The Column object specifies the renderable property in its <a href="renobj_2jxb.htm"><b>Property</b></a> property and a rendering source for that property in the <a href="renobj_1333.htm"><b>RenderUsing</b></a> property. As with a pattern, the rendering source is a string containing HTML hypertext and substitution tokens. The Column object also specifies the relative width of the column in its <a href="renobj_9win.htm"><b>Width</b></a> property and control flags for the rendering in its <a href="renobj_2xcv.htm"><b>Flags</b></a> property. </p>
<p>
The modifications you can make to a column consist of changing its <b>Flags</b>, <b>RenderUsing</b>, and <b>Width</b> properties. The modifications you can make to an existing calendar view or table view consist of adding and changing columns in its child Columns collection. Column modifications remain in effect until the Columns collection is released, which is usually when the <a href="renobj_555r.htm"><b>DataSource</b></a> property is changed. Calendar view and table view modifications remain in effect until the source of the view is changed, namely the <b>DataSource</b> property for custom and folder views, or the <a href="renobj_86no.htm">ContainerRenderer</a> object for common and personal views. </p>
<p>&nbsp;</p></body>
</HTML>

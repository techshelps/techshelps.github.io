<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Conversations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_working_with_conversations"></a>Working with Conversations  <a href="oletasks_4ofn.htm"><img src="images/group.gif" border=0></a></h1>
<p>
Two <a href="oleobjis_2p10.htm">Message</a> object properties let you show relationships among messages by defining them as part of a <i>conversation</i>. A conversation is a series of messages, consisting of an initial message and all messages sent in reply to the initial message. When the initial message or a reply elicits additional messages, the resulting messages are called a <i>conversation thread</i>. A thread represents a subset of messages in the conversation. </p>
<p>
The Message object properties <a href="oleobjis_99gl.htm"><b>ConversationIndex</b></a> and <a href="oleobjis_83l1.htm"><b>ConversationTopic</b></a> give you an easy way to organize and display messages. Rather than simply grouping messages by subject, time received, or sender, you can show conversational relationships among messages. The <b>ConversationTopic</b> property is a string that describes the overall subject of the conversation. All messages within the same conversation use the same value for the <b>ConversationTopic</b> property. The <b>ConversationIndex</b> property is a hexadecimal string that you can use to represent the relationships between the messages in the thread. Each message in the conversation should have a different <b>ConversationIndex</b> property. </p>
<p>
When you start an initial message, set the <b>ConversationTopic</b> property to a value appropriate to all messages within the conversation, not only to the first message. For many applications, the message's <a href="oleobjis_7411.htm"><b>Subject</b></a> property is appropriate. </p>
<p>
You can use your own convention to decide how to use the <b>ConversationIndex</b> property. However, it is recommended that you adopt the same convention used by the Microsoft® Exchange Client message viewer, so that you can use that viewer's user interface to show the relationships between messages in a conversation. This convention uses concatenated time stamp values. The first time stamp in the <b>ConversationIndex</b> string represents the original message. Whenever a message replies to a conversation message, it appends a time stamp value to the end of the string. The new string value is used as the <b>ConversationIndex</b> value of the new message. Using this convention, you can easily see relationships among messages when you sort the messages by <b>ConversationIndex</b> values. </p>
<p>
The following code fragment provides a utility function, <b>Util_GetEightByteTimeStamp</b>, which can be used to build Microsoft Exchange Server compatible <a href="oleobjis_99gl.htm"><b>ConversationIndex</b></a> values. The utility function calls the OLE function <b>CoCreateGuid</b> to obtain the time stamp value from a <b>GUID</b> data structure. The <b>GUID</b> value is composed of a time stamp and a machine identifier; the utility function saves the part that contains the time stamp. </p>
<pre><code>' declarations for the Util_GetEightByteTimeStamp function 
Type GUID 
    Guid1 As Long 
    Guid2 As Long 
    Guid3 As Long 
    Guid4 As Long 
End Type 
Declare Function CoCreateGuid Lib "COMPOBJ.DLL" (pGuid As GUID) As Long 
' Note: Use "OLE32.DLL" for Windows NT, Win95 platforms 
Global Const S_OK = 0 
' end declarations section 
 
' Function: Util_GetEightByteTimeStamp 
' Purpose: Generate a time stamp for use in conversations 
' See documentation topic: Working With Conversations 
Function Util_GetEightByteTimeStamp() As String 
Dim lResult As Long 
Dim lGuid As GUID 
' Exchange conversation is a unique 8-byte value 
' Exchange client viewer sorts by concatenated properties 
On Error GoTo error_olemsg 
 
lResult = CoCreateGuid(lGuid) 
If lResult = S_OK Then 
    Util_GetEightByteTimeStamp = Hex$(lGuid.Guid1) &amp; Hex$(lGuid.Guid2) 
Else 
    Util_GetEightByteTimeStamp = "00000000" ' zeroes 
End If 
Exit Function 
 
error_olemsg: 
MsgBox "Error " &amp; Str(Err) &amp; ": " &amp; Error$(Err) 
Util_GetEightByteTimeStamp = "00000000" 
Exit Function 
 
End Function 
 </code></pre>
<p>
When you start a new conversation, set the <a href="oleobjis_99gl.htm"><b>ConversationIndex</b></a> property to the value returned by this function, as follows: </p>
<pre><code>' new conversation 
objMessage.ConversationIndex = Util_GetEightByteTimeStamp() 
 </code></pre>
<p>
When you are replying to a message in an existing conversation, append the time stamp value to that message's <b>ConversationIndex</b> value, as follows: </p>
<pre><code>' reply within an existing conversation 
Dim objOriginalMsg As Message ' assume valid 
Dim objNewMessage As Message  ' new message in conversation 
Dim strNewIndex As String 
' ... 
' copy the original topic and append 
'      the current time stamp to the original time stamp 
objNewMessage.ConversationTopic = objOriginalMsg.ConversationTopic 
strNewIndex = objOriginalMsg.ConversationIndex _ 
                             &amp; Util_GetEightByteTimeStamp() 
objNewMessage.ConversationIndex = strNewIndex 
 </code></pre>
<p>
For additional sample code dealing with conversations, see <a href="oletasks_44du.htm">Posting Messages to a Public Folder</a>. </p>
<p>&nbsp;</p></body>
</HTML>

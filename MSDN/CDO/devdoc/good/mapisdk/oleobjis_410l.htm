<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Delete Method (Message Object)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_delete_method_message"></a>Delete Method (Message Object)  <a href="oleobjis_2p10.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Delete</b> method removes the <a href="oleobjaf_5flg.htm">AppointmentItem</a>, <a href="oleobjis_4kac.htm">MeetingItem</a>, or Message object from the <a href="oleobjis_1qd0.htm">Messages</a> collection. </p>
<h4>Syntax </h4>
<p>
<i>objMessage</i>.<b>Delete( ) </b></p>
<h4>Remarks </h4>
<p>
The <b>Delete</b> method performs an irreversible operation on the collection. It calls <b>Release</b> on the collection's reference to the AppointmentItem, MeetingItem, or Message object. If you have another reference to the object, you can still access its properties and methods, but you can never again associate it with any collection because the <a href="oleobjis_2l66.htm"><b>Add</b></a> method always creates a new object. You should <b>Set</b> your reference variable either to <b>Nothing</b> or to another object. </p>
<p>
The final <b>Release</b> on the AppointmentItem, MeetingItem, or Message object takes place when you assign your reference variable to <b>Nothing</b>, or when you call <b>Delete</b> if you had no other reference. At this point the object is removed from memory. Attempted access to a released object results in an error return of <b>CdoE_INVALID_OBJECT</b>. </p>
<p>
The action of the <b>Delete</b> method is permanent, and the Message object cannot be restored to the collection. Before calling <b>Delete</b>, your application can prompt the user to verify whether the message should be permanently deleted. </p>
<p>
The <b>Delete</b> method does not move a MeetingItem or Message object to the Deleted Items folder. If this folder exists and you wish this functionality, you must specifically program your application for it. </p>
<p>
If the Messages collection underlies a categorized view and the deleted message was the last remaining message in a group, the group's <a href="oleobjis_852s.htm">GroupHeader</a> object is also removed from the collection. Unlike the message, however, it is not moved anywhere. Group headers do not persist in storage, and when the collection is released, whether with messages or not, the GroupHeader objects cease to exist. </p>
<p>
When you delete a member of a collection, the collection is immediately refreshed, meaning that its <b>Count</b> property is reduced by one and its members are reindexed. To access a member following the deleted member, you must use its new index value. For more information, see <a href="olemistk_7ini.htm">Looping Through a Collection</a>. </p>
<p>
You can delete all the group headers and messages in the <a href="oleobjis_1qd0.htm">Messages</a> collection by calling the collection's <a href="oleobjis_3twu.htm"><b>Delete</b></a> method. The ability to delete any message depends on the permissions granted to the user. The <b>Delete</b> method returns an error code if called with insufficient permissions. </p>
<h4>Example </h4>
<p>
This code fragment illustrates the two situations previously explained. The <b>Set</b> statement calls <b>AddRef</b> on the first Message object. That reference survives the call to <b>Delete</b> and has to be reassigned. The second Message object is deleted without creating another reference, and no other action is necessary. </p>
<pre><code>' assume valid Folder object 
Set objMessage = objFolder.Messages.Item(1) 
objMessage.Delete ' still have a reference from Set statement 
' ... other operations on objMessage possible but pointless ... 
Set objMessage = Nothing ' necessary to remove reference 
' ... 
objFolder.Messages.Item(2).Delete ' no reference to remove 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MAPI Functions and the CDO Library</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_mapi_functions_and_the_cdo_library"></a>MAPI Functions and the CDO Library</h2>
<p>
Compared to the function call interfaces of traditional application programming interface (API) libraries, an Automation object library yields faster development and code that is easier to read, debug, and maintain. </p>
<p>
The CDO Library also takes care of many programming details for you, such as memory management and keeping count of the number of objects in collections. </p>
<p>
The following table compares a traditional function call interface, such as CMC or Simple MAPI, with the CDO Library interface. </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=37%>Task or code </th>
<th align=left width=31%>Function call interface </th>
<th align=left width=32%>CDO Library </th>
</tr>
<tr valign=top>
<td width=37%>Dim mFiles() As MapiFile <br>
Dim mRecips() As MapiRecip <br>
 </td>
<td width=31%>Requires arrays of these structures to be declared, even if the developer does not use them. <br>
 </td>
<td width=32%>Automatically manages these structures as child objects of the parent <a href="oleobjis_2p10.htm">Message</a> object. <br>
 </td>
</tr>
<tr valign=top>
<td width=37%>ReDim mRecips(0) <br>
ReDim mFiles(0) <br>
 </td>
<td width=31%>Structures are resized by redimensioning arrays. <br>
 </td>
<td width=32%>Objects are added to collections with the <b>Add</b> method. <br>
 </td>
</tr>
<tr valign=top>
<td width=37%>mMessage.RecipCount = 1 <br>
 </td>
<td width=31%>Requires developer to indicate the number of recipients and attachments. <br>
 </td>
<td width=32%>Automatically determines the number of objects in these collections. <br>
 </td>
</tr>
<tr valign=top>
<td width=37%>Error handling <br>
 </td>
<td width=31%>Each function call returns its own set of error codes. <br>
 </td>
<td width=32%>Integrated with Visual Basic error handling during both design and run time. <br>
 </td>
</tr>
<tr valign=top>
<td width=37%>Return values </td>
<td width=31%>Returned implicitly in the parameters of the function call. </td>
<td width=32%>Returned as an explicit result of a method or in object properties. </td>
</tr>
</table><br>
<p>
As programming tasks grow more complex, the function call approach becomes increasingly unwieldly. In contrast, the CDO Library expands gracefully to encompass greater complexity. A well-planned, thorough framework of collections, objects, methods, and properties can neatly encompass very complex systems. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDO Classes in Java</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_cdo_classes_in_java"></a>CDO Classes in Java</h1>
<p>
To take advantage of the CDO libraries in a Java program, you must first create Java class wrappers from their type libraries. The type library for the CDO Library is embedded in CDO.DLL. The type library for the CDO Rendering Library is embedded in CDOHTML.DLL. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a class wrapper</h5>
<ol>
<li>
Run the Microsoft® Visual J++™ Development Environment. </li>
<li>
From the<b>Tools</b> menu, choose the <b>Java Type Library Wizard</b>. </li>
<li>
From the list of available Automation servers, select <b>Microsoft CDO 1.2 Library</b> or <b>Microsoft CDO 1.2 Rendering Library</b>. </li>
<li>
Click <b>OK</b> to tell the wizard to create the needed classes. </li>
</ol>
<p>
The preceding steps cause the Java classes to reside in the subdirectory ...\Java\TrustLib\cdo or ...\Java\TrustLib\cdohtml, depending on your choice of Automation server. You may wish to print out the SUMMARY.TXT file located in this directory. It is a useful reference for Java support for the CDO libraries. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Improving Application Performance</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_improving_application_performance"></a>Improving Application Performance  <a href="oletasks_4ofn.htm"><img src="images/group.gif" border=0></a></h1>
<p>
This section describes how your Microsoft® Visual Basic® code can operate most efficiently when you use CDO Library objects. Note that this section is written primarily for Visual Basic programmers rather than for C programmers. </p>
<p>
To access CDO Library objects, you create Visual Basic statements that concatenate the object names in sequence from left to right, separating objects with the period character. For example, consider the following Visual Basic statement: </p>
<pre><code>Set objMessage = objSession.Inbox.Messages.GetFirst 
 </code></pre>
<p>
The CDO Library creates an internal object for each period that appears in the statement. For example, the portion of the statement that says <code>objSession.Inbox</code> directs the CDO Library to create an internal <a href="oleobjaf_4u2c.htm">Folder</a> object that represents the user's Inbox. The next portion, <code>.Messages</code>, directs the CDO Library to create an internal <a href="oleobjis_1qd0.htm">Messages</a> collection object. The final part, <code>.GetFirst</code>, directs the CDO Library to create an internal <a href="oleobjis_2p10.htm">Message</a> object that represents the first message in the user's Inbox. The statement contains three periods; the CDO Library creates three internal objects. </p>
<p>
The best rule of thumb is to remember that periods are expensive. For example, the following two lines of code are very inefficient: </p>
<pre><code>' warning: do not code this way; this is inefficient 
MsgBox "Text: " &amp; objSession.Inbox.Messages.GetFirst.Text 
MsgBox "Subj: " &amp; objSession.Inbox.Messages.GetFirst.Subject 
 </code></pre>
<p>
While this code generates correct results, it is not efficient. For the first statement, the CDO Library creates internal objects that represent the Inbox, its Messages collection, and its first message. After the application displays the text, these internal objects are discarded. In the next line, the same internal objects are generated again. A more efficient approach is to generate the internal objects only once: </p>
<pre><code>With objSession.Inbox.Messages.GetFirst 
    MsgBox "Text: " &amp; .Text 
    MsgBox "Subj: " &amp; .Subject 
End With 
 </code></pre>
<p>
When your application needs to use an object more than once, define a variable for the object and set its value. The following code fragment is very efficient when your application reuses the <a href="oleobjaf_4u2c.htm">Folder</a> or <a href="oleobjis_2p10.htm">Message</a> objects or the <a href="oleobjis_1qd0.htm">Messages</a> collection: </p>
<pre><code>' efficient when the objects are reused 
Set objInboxFolder = objSession.Inbox 
Set objInMessages = objInboxFolder.Messages 
Set objOneMessage = objInMessages.GetFirst 
With objOneMessage 
    MsgBox "The Message Text: " &amp; .Text 
    MsgBox "The Message Subject: " &amp; .Subject 
End With 
 </code></pre>
<p>
Now that you understand that a period in a statement directs the CDO Library to create a new internal object, you can see that the following two lines of code are not only not optimal but actually incorrect: </p>
<pre><code>' error: collection returns the same message both times 
MsgBox("first message: " &amp; inBoxObj.Messages.GetFirst) 
MsgBox("next message: " &amp; inBoxObj.Messages.GetNext) 
 </code></pre>
<p>
The CDO Library creates a temporary internal object that represents the Messages collection, then discards it after displaying the first message. The second statement directs the CDO Library to create another new temporary object that represents the Messages collection. This Messages collection is new and has no state information, that is, this new collection has not called <a href="oleobjis_8fce.htm"><b>GetFirst</b></a>. The <a href="oleobjis_399q.htm"><b>GetNext</b></a> statement therefore causes it to return its first message again. </p>
<p>
Use the Visual Basic <b>With</b> statement or explicit variables to generate the expected results. The following code fragment shows both approaches: </p>
<pre><code>' Use of the Visual Basic With statement 
With objSession.Inbox.Messages 
    Set objMessage = .GetFirst 
    ' ... 
    Set objMessage = .GetNext 
End With 
' Use of explicit variables to refer to the collection 
Set objMsgColl = objSession.Inbox.Messages 
Set objMessage = myMsgColl.GetFirst 
... 
Set objMessage = myMsgColl.GetNext 
 </code></pre>
<p>
For more information about improving the performance of your applications, see your Visual Basic programming documentation. </p>
<p>&nbsp;</p></body>
</HTML>

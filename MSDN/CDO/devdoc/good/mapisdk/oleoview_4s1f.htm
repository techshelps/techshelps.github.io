<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Top-Level Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_toplevel_objects"></a>Top-Level Objects</h2>
<p>
A top-level object is one that can be created directly by your code, without having to derive it from any other object. Currently, the only top-level object in CDO is the <a href="oleobjis_57w4.htm">Session</a> object. Other objects are accessible only through the Session object. </p>
<p>
You can create a Session object either through early binding: </p>
<pre><code>Dim objSession As MAPI.Session 
      Set objSession = CreateObject ("MAPI.Session") 
      objSession.Logon 
 </code></pre>
<p>
or through late binding: </p>
<pre><code>Dim objSession As Object 
      Set objSession = CreateObject ("MAPI.Session") 
      objSession.Logon 
 </code></pre>
<p>
and then use the <a href="oleobjis_31ym.htm"><b>Logon</b></a> method to initiate a session with MAPI. You cannot access any other object, or even the Session object's properties or methods, until you log on. The only exception to this rule is the Session object's <a href="oleobjis_1srj.htm"><b>SetLocaleIDs</b></a> method. </p>
<p>
Generally, early binding is preferable, because it enforces type checking and generates more efficient code. Note that you specify "MAPI.Session" instead of just "Session" in order to distinguish a MAPI session from other types of sessions available to a Visual Basic program through other object libraries. </p>
<p>
Early binding is not supported in CDO Library versions previous to 1.1. </p>
<p>
C/C++ programmers use globally unique identifiers (GUIDs) for these objects, defined in the type library for the CDO Library. The following C++ code fragment demonstrates how to create a Session object and call its <b>Logon</b> method: </p>
<pre><code>// create a Session object and log on using IDispatch interface 
// to the CDO library 
#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;  // for exit
#define dispidM_Logon 119  // get constants for all props, methods
// allows you to save cost of GetIdsFromNames calls
// can generate yourself by calling GetIdsFromNames for all
// properties and methods
// GUID values for Session defined in the type library
static const CLSID GUID_OM_SESSION = 
{0x3FA7DEB3, 0x6438, 0x101B, {0xAC, 0xC1, 0, 0xAA, 0, 0x42, 0x33, 0x26}};
void main(void)
{
HRESULT hr; 

/* interface pointers */
LPUNKNOWN punk = NULL; // IUnknown *; used to get IDispatch *
DISPPARAMS dispparamsNoArgs = {NULL, NULL, 0, 0};
VARIANT varRetVal;
IDispatch * pSession;

    //Initialize OLE. 
    hr = OleInitialize(NULL); 
        printf("OleInitialize returned 0x%lx\n", hr);
    VariantInit(&amp;varRetVal);
// Create an instance of the CDO Library Session object
// Ask for its IDispatch interface.
    hr = CoCreateInstance(GUID_OM_SESSION, 
                          NULL, 
                          CLSCTX_SERVER, 
                          IID_IUnknown, 
                          (void FAR* FAR*)&amp;punk); 
    printf("CoCreateInstance returned 0x%lx\n", hr);
    if (S_OK != hr) 
        exit(1);
    hr = punk-&gt;QueryInterface(IID_IDispatch, (void FAR* FAR*)&amp;pSession);
    punk-&gt;Release();        // no longer needed; release it
    printf("QI for IID_IDispatch returned 0x%lx\n", hr);        
    if (S_OK != hr)
        exit(1);
// Logon using the session object; call its Logon method
    hr = pSession-&gt;Invoke(dispidM_Logon, // value = 119
                          IID_NULL, 
                          LOCALE_SYSTEM_DEFAULT, 
                          DISPATCH_METHOD,
                          &amp;dispparamsNoArgs, 
                          &amp;varRetVal, 
                          NULL, 
                          NULL);
    printf("Invoke returned 0x%lx\n", hr);
    printf("Logon call returned 0x%lx\n", varRetVal.lVal);    
// do other things here...
// when done, release the Session dispatch object and shut down OLE
    pSession-&gt;Release();
    OleUninitialize();
 </code></pre>
<p>
The following table lists the GUIDs for the top-level objects accessible to C/C++ programmers. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>CDO Library object </th>
<th align=left width=65%>GUID </th>
</tr>
<tr valign=top>
<td width=35%><a href="oleobjis_57w4.htm">Session</a> </td>
<td width=65%>{3FA7DEB3-6438-101B-ACC1-00AA00423326} </td>
</tr>
<tr valign=top>
<td width=35%></td>
<td width=65%></td>
</tr>
<tr valign=top>
<td width=35%></td>
<td width=65%></td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

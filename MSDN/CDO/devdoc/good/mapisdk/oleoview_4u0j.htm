<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Collections</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_object_collections"></a>Object Collections</h2>
<p>
A <i>collection</i> is a group of objects of the same type. In the CDO Library, the name of the collection takes the plural form of the individual CDO Library object. For example, the Messages collection is the name of the collection that contains Message objects. The CDO Library supports the following collections: </p>
<p class=indent1>
<a href="oleobjaf_7qd0.htm">AddressEntries</a> </p>
<p class=indent1>
<a href="oleobjaf_5fw4.htm">AddressLists</a> </p>
<p class=indent1>
<a href="oleobjaf_9yd0.htm">Attachments</a> </p>
<p class=indent1>
<a href="oleobjaf_0yt0.htm">Fields</a> </p>
<p class=indent1>
<a href="oleobjaf_1nec.htm">Folders</a> </p>
<p class=indent1>
<a href="oleobjis_7aus.htm">InfoStores</a> </p>
<p class=indent1>
<a href="oleobjis_1qd0.htm">Messages</a> </p>
<p class=indent1>
<a href="oleobjis_3xro.htm">Recipients</a> </p>
<p>
For purposes of accessing their individual member objects, collections can be characterized as either large or small. </p>
<p>
For a <i>small collection</i>, the service provider maintains an accurate count of the objects in the collection. The <a href="oleobjaf_5fw4.htm">AddressLists</a>, <a href="oleobjaf_9yd0.htm">Attachments</a>, <a href="oleobjaf_0yt0.htm">Fields</a>, <a href="oleobjis_7aus.htm">InfoStores</a>, and <a href="oleobjis_3xro.htm">Recipients</a> collections are considered small collections. You can access individual items using an index into the collection. You can also add and delete items from the collection (except for the AddressLists and InfoStores collections, which are read-only for the CDO Library). </p>
<p>
Small collections, with a known number of member objects, have a reliable <b>Count</b> property, which always contains the current number of member objects. The <b>Item</b> property can be used to select any arbitrary member of the collection. A small collection also has an implicit temporary <b>Index</b> property, assigned by the CDO Library. <b>Index</b> properties are valid only during the current MAPI session and can change as your application adds and deletes objects. The <b>Index</b> value for the first member object is 1. </p>
<p>
For example, in an Attachments collection with three Attachment objects, the first attachment is referred to as Attachments.Item(1), the second as Attachments.Item(2), and the third as Attachments.Item(3). If your application deletes the second attachment, the third attachment becomes the second and Attachments.Item(3) has the value <b>Nothing</b>. The <b>Count</b> property is always equal to the highest <b>Index</b> in the collection. </p>
<p>
Other applications can add and delete objects while your application is running. The <b>Count</b> property is not updated until you re-create or refresh the collection, for example by calling the parent <a href="oleobjis_2p10.htm">Message</a> object's <a href="oleobjis_3wh1.htm"><b>Update</b></a> or <a href="oleobjis_2un9.htm"><b>Send</b></a> method. An attachment is saved in the MAPI system when you refresh the Message object, and the <b>Count</b> properties of its <a href="oleobjaf_9yd0.htm">Attachments</a> and <a href="oleobjis_3xro.htm">Recipients</a> collections are updated. </p>
<p>
For a <i>large collection</i>, the service provider cannot always maintain an accurate count of the objects in the collection. The <a href="oleobjaf_7qd0.htm">AddressEntries</a>, <a href="oleobjaf_1nec.htm">Folders</a>, and <a href="oleobjis_1qd0.htm">Messages</a> collections are considered large collections. In preference to using a count, these collections support <b>Get</b> methods that let you get the first, last, next, or previous item in the collection. Programmers needing to access individual objects in a large collection are strongly advised to use the Visual Basic <b>For Each</b> statement or the <b>Get</b> methods. </p>
<p>
Large collections, with an uncertain number of member objects, support the <b>Count</b> property in a limited way. If the value of <b>Count</b> is set to <b>CdoMaxCount</b>, the provider is unable to furnish an accurate number of members, or even to indicate whether the collection is empty or not. If <b>Count</b> has a value other than <b>CdoMaxCount</b>, its value is reliable. The <b>Item</b> property has the same functionality as it does in small collections. For more information on using the <b>Count</b> and <b>Item</b> properties in a large collection, see the example in the <a href="oleobjaf_0yqn.htm"><b>Count</b></a> property. </p>
<p>
The <b>Count</b> property is updated whenever you refresh an <a href="oleobjaf_7qd0.htm">AddressEntries</a> or <a href="oleobjis_1qd0.htm">Messages</a> collection, in particular by altering its child <a href="oleobjaf_10ac.htm">AddressEntryFilter</a> or <a href="oleobjis_4gxg.htm">MessageFilter</a> object. </p>
<p>
MAPI assigns a permanent, unique string <b>ID</b> property when an individual member object is created. These identifiers do not change from one MAPI session to another. You can call the <a href="oleobjis_57w4.htm">Session</a> object's <a href="oleobjis_6lke.htm"><b>GetAddressEntry</b></a>, <a href="oleobjis_9hgu.htm"><b>GetFolder</b></a>, or <a href="oleobjis_01bi.htm"><b>GetMessage</b></a> method, specifying the unique identifier, to obtain the individual <a href="oleobjaf_6n1w.htm">AddressEntry</a>, <a href="oleobjaf_4u2c.htm">Folder</a>, or <a href="oleobjis_2p10.htm">Message</a> object. You can also use the <b>GetFirst</b> and <b>GetNext</b> methods to move from one object to the next in these collections. </p>
<p>
<b>Note</b>&nbsp;&nbsp;To ensure correct operation of the <b>GetFirst</b>, <b>GetLast</b>, <b>GetNext</b>, and <b>GetPrevious</b> methods in a large collection, call <b>GetFirst</b> before making any calls to <b>GetNext</b> on that collection, and call <b>GetLast</b> before any calls to <b>GetPrevious</b>. To ensure that you are always making the calls on the same collection, create an explicit variable that refers to that collection. </p>
<p>
For example, the following two code fragments are not equivalent: </p>
<pre><code>' fragment 1: each Set statement creates a new Messages collection; 
'             it's undefined which message is returned by GetNext 
Set objMessage = objInBox.Messages.GetFirst 
... 
Set objMessage = objInBox.Messages.GetNext 
 
' fragment 2: use an explicit variable to refer to the collection; 
'             now the Get methods return the intended messages 
Set objMsgColl = objSession.objInBox.Messages 
Set objMessage = objMsgColl.GetFirst 
... 
Set objMessage = objMsgColl.GetNext 
 </code></pre>
<p>
Code fragment 1 causes the CDO Library to create a new Messages collection in each <b>Set</b> statement. The <b>GetFirst</b> call returns the first message in the collection, but the result of the <b>GetNext</b> call is undefined since <b>GetFirst</b> has not yet been called on this new collection. </p>
<p>
Code fragment 2 creates and uses the explicit variable <i>objMsgColl</i>, so the <b>GetFirst</b> and <b>GetNext</b> calls act as expected for collections with more than one item. </p>
<p>
The collections in the CDO Library are specifically designed for messaging applications. The definition of collections in this document may differ slightly from the definitions of collections in the OLE programming documentation. Where there are differences, the description of the operation of the CDO Library supersedes the other documentation. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

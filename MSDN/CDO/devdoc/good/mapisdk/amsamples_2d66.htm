<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Organization Chart Sample Application</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_organization_chart_sample_application"></a>Organization Chart Sample Application</h1>
<p>
You can use this sample application to browse organization information obtained from the Microsoft® Exchange Global Address List (GAL). This sample uses CDO, ASP, Java, and a custom C++ MAPI control (delivered in orgchart.dll).</p>
<p>
This sample pulls organization information (a person's manager and direct reports) from the Microsoft Exchange Global Address List. Users can search by the person's name or by e-mail name and the resulting organization chart is displayed in a Java tree-control or in an HTML table.</p>
<p>
The Organization Chart sample application is unique in the following way: The other sample applications described in this section project typical "groupware" Microsoft® Outlook™/Microsoft Exchange applications out to the Web.</p>
<p>
In contrast, the Organization Chart sample application approaches application development from the point of view of a Web page designer, and builds the application using the platform and services supplied by Microsoft Exchange. In this respect, the directory development and navigation model presented in Organization Chart is different from a typical "groupware" client user interface.</p>
<p>
Several technologies were used to create this application: 
<ul>
<li>
Active Server to process scripts and return data to the client</li>
<li>
CDO to obtain data from Microsoft Exchange</li>
<li>
A small C++ ActiveX™ control to obtain additional data from Microsoft Exchange</li>
<li>
Java to provide a rich user interface</li>
</ul>
<p>
The C++ and Java components are supplied in both binary and source form.</p>
<h4>ASP Scripts</h4>
<p>
The scripts are based on the <a href="amsamples_6tny.htm">Anonymous Logon sample application</a> and the <a href="amsamples_22b2.htm">Find User sample application</a>. </p>
<h4>ActiveX Control</h4>
<p>
CDO exposes a <b>Manager</b> property on an AddressEntry object, but it does not expose a corresponding Reports collection of AddressEntry objects. For this reason, it was necessary to write this ActiveX control. It demonstrates how to take a CDO object and recover an <b>IMAPIProp</b> pointer from the <b>IDispatch</b> pointer.</p>
<p>
The control exposes just three properties: <b>DataSource</b>, <b>Count</b>, and <b>Item</b>:
<ul>
<li>
<b>DataSource</b>: Set this property to point to an AddressEntry object. </li>
<li>
<b>Count</b>: After setting the DataSource, this property returns the number of Reports found. </li>
<li>
<b>Item</b>(n): This property returns the identifier of an AddressEntry object corresponding to one of the Reports. The parameter n refers to an individual Report.</li>
</ul>
<p>
The following example in Active Server syntax examines all of the direct reports of the currently logged-on user:</p>
<pre><code>Set oAEReports= Server.CreateObject("OrgChart.Reports")
oAEReports.DataSource= oSession.CurrentUser
For idx= 1 To oAEReports.Count
Set oRep= oSession.GetAddressEntry( oAEReports.Item(idx) )
' do whatever you need to do with the oRep object
Next
</code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction to Automation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_introduction_to_automation"></a>Introduction to Automation</h1>
<p>
The CDO Library is based on the capabilities provided by Automation. The CDO Library allows you to create instances of programmable messaging <i>objects</i> that you can reference with automation controllers. An <i>automation controller</i> is a tool that supports Automation, such as Microsoft® Visual Basic®. </p>
<p>
For the purposes of this document, an <i>object</i> is an Automation object: a software component that exposes its properties and methods. Such an object follows the Visual Basic programming model and lets you get properties, set properties, and call methods. </p>
<p>
You can think of programmable objects as additions or extensions to the programmable objects that are offered as part of Visual Basic, such as forms and controls. Forms and controls expose their properties and methods so that developers can tailor these objects for the needs of their programs. In addition to the forms and controls, Visual Basic allows for the definition of a wide variety of other programmable objects by providing the <b>CreateObject</b> and <b>LoadObject</b> functions. Note that these functions do not have specialized names like CreateSpreadsheet or LoadDatabase. They are general-purpose functions that enable an open-ended number of programmable objects, including the CDO Library. </p>
<p>
Throughout this document, Visual Basic is used as a concrete example of an automation controller, but the statements about Visual Basic apply to all such tools. </p>
<p>
Visual Basic scripts drive the CDO Library. The scripts can also drive other libraries that support Automation, such as the libraries of programmable objects provided by Microsoft® Excel version 5.0 and Microsoft® Access version 2.0. Visual Basic can call many different programmable object libraries and can act as the glue that holds all of these objects together. </p>
<p>
Each library can create its own objects, set properties, and call methods. The Visual Basic program coordinates the work of all the libraries. For example, it can direct the Microsoft Access object to find data in a specific table, direct the Microsoft Excel object to run calculations using that data, and then direct CDO Library objects to create a message containing the results of those calculations and send the message to several recipients. </p>
<p>&nbsp;</p></body>
</HTML>

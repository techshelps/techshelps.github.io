<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Delete Method (Format Object)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_delete_method_format_object_"></a>Delete Method (Format Object)  <a href="renobj_3cxg.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Delete</b> method removes the Format object from the <a href="renobj_1nlg.htm">Formats</a> collection. </p>
<h4>Syntax </h4>
<p>
<i>objFormat</i>.<b>Delete( ) </b>
<dl>
<dt>
<i>objFormat </i></dt>
<dd>
Required. The Format object. 
</dd>
</dl>
<h4>Remarks </h4>
<p>
The <b>Delete</b> method performs an irreversible operation on the collection. It calls <b>Release</b> on the collection's reference to the Format object. If you have another reference to the format, you can still access its properties and methods, but you can never again associate it with any collection because the <a href="renobj_349r.htm"><b>Add</b></a> method always creates a new object. You should <b>Set</b> your reference variable either to <b>Nothing</b> or to another format. </p>
<p>
The final <b>Release</b> on the Format object takes place when you assign your reference variable to <b>Nothing</b>, or when you call <b>Delete</b> if you had no other reference. At this point the object is removed from memory. Attempted access to a released object results in an error return of <b>CdoE_INVALID_OBJECT</b>. </p>
<p>
The action of the <b>Delete</b> method is permanent, and the Format object cannot be restored to the collection. Before calling <b>Delete</b>, your application can prompt the user to verify whether the format should be permanently deleted. </p>
<p>
When you delete a member of a collection, the collection is immediately refreshed, meaning that its <b>Count</b> property is reduced by one and its members are reindexed. To access a member following the deleted member, you must use its new index value. For more information, see <a href="olemistk_7ini.htm">Looping Through a Collection</a>. </p>
<h4>Example </h4>
<p>
This code fragment illustrates the two situations previously explained. The <b>Set</b> statement calls <b>AddRef</b> on the first Format object. That reference survives the call to <b>Delete</b> and has to be reassigned. The second Format object is deleted without creating another reference, and no other action is necessary. </p>
<pre><code>' assume valid ObjectRenderer object 
Set objFormat = objObjectRenderer.Formats.Item(1) 
objFormat.Delete ' still have a reference from Set statement 
' ... other operations on objFormat possible but pointless ... 
Set objFormat = Nothing ' necessary to remove reference 
' ... 
objObjectRenderer.Formats.Item(2).Delete ' no reference to remove 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming Tasks</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_programming_tasks"></a>Programming Tasks</h1>
<p>
This section describes some of the common programming tasks you can perform with the Collaboration Data Objects (CDO) Library. The first task your application must complete is to obtain and <a href="oleobjis_31ym.htm"><b>Logon</b></a> to a valid <a href="oleobjis_57w4.htm">Session</a> object as described in <a href="oletasks_6q7i.htm">Starting a CDO Session</a>. The following table categorizes the described tasks: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Category </th>
<th align=left width=60%>Programming tasks </th>
</tr>
<tr valign=top>
<td width=40%>General programming tasks </td>
<td width=60%><a href="oletasks_9pwz.htm">Handling Errors</a> <br>
<a href="oletasks_1gv9.htm">Improving Application Performance</a> <br>
<a href="oletasks_6q7i.htm">Starting a CDO Session</a> <br>
<a href="oletasks_0ier.htm">Viewing MAPI Properties</a> <br>
 </td>
</tr>
<tr valign=top>
<td width=40%>Working with messages </td>
<td width=60%><a href="oletasks_9pr9.htm">Adding Attachments to a Message</a> <br>
<a href="oletasks_8wmk.htm">Checking for New Mail</a> <br>
<a href="oletasks_7nz9.htm">Creating and Sending a Message</a> <br>
<a href="oletasks_0hlx.htm">Customizing a Folder or Message</a> <br>
<a href="oletasks_2nj9.htm">Deleting a Message</a> <br>
<a href="oletasks_1j8y.htm">Filtering Messages in a Folder</a> <br>
<a href="oletasks_546d.htm">Making Sure the Message Gets There</a> <br>
<a href="oletasks_81iw.htm">Reading a Message from the Inbox</a> <br>
<a href="oletasks_9vad.htm">Searching for a Message</a> <br>
 </td>
</tr>
<tr valign=top>
<td width=40%>Working with addresses </td>
<td width=60%><a href="oletasks_86ex.htm">Changing an Existing Address Entry</a> <br>
<a href="oletasks_277d.htm">Creating a New Address Book Entry</a> <br>
<a href="oletasks_4p0r.htm">Selecting Recipients from the Address Book</a> <br>
<a href="oletasks_44oj.htm">Using Addresses</a> <br>
<a href="oletasks_2ik3.htm">Working with Distribution Lists</a> <br>
 </td>
</tr>
<tr valign=top>
<td width=40%>Working with folders </td>
<td width=60%><a href="oletasks_4okz.htm">Accessing Folders</a> <br>
<a href="oletasks_8y0i.htm">Copying a Message to Another Folder</a> <br>
<a href="oletasks_0hlx.htm">Customizing a Folder or Message</a> <br>
<a href="oletasks_059u.htm">Moving a Message to Another Folder</a> <br>
<a href="oletasks_0boy.htm">Searching for a Folder</a> <br>
 </td>
</tr>
<tr valign=top>
<td width=40%>Working with public folders </td>
<td width=60%><a href="oletasks_44du.htm">Posting Messages to a Public Folder</a> <br>
<a href="oletasks_33oz.htm">Working with Conversations</a> <br>
 </td>
</tr>
</table><br>
<p>
The following table summarizes the programming procedures that you must use to perform these tasks. Note that all tasks require a valid <a href="oleobjis_57w4.htm">Session</a> object and a successful <a href="oleobjis_31ym.htm"><b>Logon</b></a>. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Programming task </th>
<th align=left width=60%>Procedure </th>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_4okz.htm">Accessing Folders</a> </td>
<td class=indent1 width=60%>1. Access the Folder object's <b>Folders</b> property to obtain its collection of subfolders. <p class=indent1>
2. Use the Folders collection's <b>GetFirst</b>, <b>GetNext</b>, <b>GetPrevious</b>, and <b>GetLast </b>methods to navigate through the subfolders. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_9pr9.htm">Adding Attachments to a Message</a> </td>
<td class=indent1 width=60%>1. Create or obtain the Message object that is to include the attachment. <p class=indent1>
2. Call the Message object's Attachments collection's <b>Add</b> method. </p>
<p class=indent1>
3. Call the Message object's <b>Update</b> or <b>Send</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_86ex.htm">Changing an Existing Address Entry</a> </td>
<td class=indent1 width=60%>1. Obtain a valid AddressEntry object. <p class=indent1>
2. Update the AddressEntry object's <b>Name</b>, <b>Type</b>, or <b>Address</b> property. </p>
<p class=indent1>
3. Call the AddressEntry object's <b>Update</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_8wmk.htm">Checking for New Mail</a> </td>
<td width=60%>Count messages in the Inbox folder that have the <b>Unread</b> property set to <b>True</b>. <p>
– Or –</p>
<p>
Count messages received after a specified time. </p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_8y0i.htm">Copying a Message to Another Folder</a> </td>
<td class=indent1 width=60%>1. Obtain the source message that you want to copy. <p class=indent1>
2. Call the source Message object's <b>CopyTo</b> method. </p>
<p class=indent1>
3. Call the new Message object's <b>Update</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_277d.htm">Creating a New Address Book Entry</a> </td>
<td class=indent1 width=60%>1. Obtain the Session object's AddressLists collection. <p class=indent1>
2. Select the AddressList object corresponding to the desired address book container. </p>
<p class=indent1>
3. Obtain the address list's AddressEntries collection. </p>
<p class=indent1>
4. Call the AddressEntries collection's <b>Add</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_7nz9.htm">Creating and Sending a Message</a> </td>
<td class=indent1 width=60%>1. Call the Messages collection's <b>Add</b> method to create a Message object. <p class=indent1>
2. Set the Message object's <b>Text</b>, <b>Subject</b>, and other message properties. </p>
<p class=indent1>
3. Call the message's Recipients collection's <b>Add </b>method to add a recipient. </p>
<p class=indent1>
– Or –</p>
<p class=indent1>
3. Copy a Recipients collection from another message to the new message's <b>Recipients</b> property. </p>
<p class=indent1>
4. Set the Recipient object's <b>Name</b>,<b> Address</b>,<b> </b>or<b> AddressEntry</b> property. </p>
<p class=indent1>
5. Call the Recipient object's <b>Resolve </b>method to validate the address information. </p>
<p class=indent1>
6. Call the Message object's <b>Send</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_0hlx.htm">Customizing a Folder or Message</a> </td>
<td class=indent1 width=60%>1. Create or obtain the Folder or Message object that is to have the custom properties. <p class=indent1>
2. Call the object's Fields collection's <b>Add </b>method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_2nj9.htm">Deleting a Message</a> </td>
<td class=indent1 width=60%>1. Select the message you want to delete. <p class=indent1>
2. Call the Message object's <b>Delete</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_1j8y.htm">Filtering Messages in a Folder</a> </td>
<td width=60%>1. Access the folder in which you wish to filter the messages. <p>
2. Obtain the MessageFilter object for the folder. </p>
<p>
3. Select and set the desired MessageFilter properties to specify the filter. </p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_9pwz.htm">Handling Errors</a> </td>
<td width=60%>Use the Visual Basic <b>On Error Goto</b> statement to add exception-handling code just as you would in any Visual Basic application. <p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_1gv9.htm">Improving Application Performance</a> </td>
<td width=60%>Each dot in a Visual Basic statement directs the CDO Library to create a temporary internal object. Use explicit variables when you reuse messaging objects. <p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_546d.htm">Making Sure the Message Gets There</a> </td>
<td class=indent1 width=60%>1. Set the Message object's <b>DeliveryReceipt</b> and/or <b>ReadReceipt</b> properties to <b>True</b>. <p class=indent1>
2. Call the Message object's <b>Send</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_059u.htm">Moving a Message to Another Folder</a> </td>
<td width=60%>1. Obtain the source message that you want to move. <p>
2. Call the source Message object's <b>MoveTo</b> method. </p>
<p>
3. Call the Message object's <b>Update</b> method at its new location. </p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_4cmf.htm">Organizing a Meeting</a> </td>
<td width=60%>1. Obtain a calendar folder from the session. <p>
2. Add an appointment to the calendar folder. </p>
<p>
3. Create a Recipients collection for the appointment. </p>
<p>
4. Populate the appointment's Recipients collection. </p>
<p>
5. <b>Send</b> the appointment to the recipients. </p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_44du.htm">Posting Messages to a Public Folder</a> &nbsp;</td>
<td class=indent1 width=60%>Use a procedure similar to<a href="oletasks_7nz9.htm"> Creating and Sending a Message</a>, where you specify the name of the public folder as the recipient name. <p class=indent1>
– Or –</p>
<p class=indent1>
1. Call the public folder's Messages collection's <b>Add</b> method to create a Message object. </p>
<p class=indent1>
2. Set the Message object's <b>Text</b>, <b>Subject</b>, <b>ConversationSubject</b>,<b> ConversationIndex</b>,<b> TimeSent</b>,<b> TimeReceived</b>,<b> </b>and other message properties. </p>
<p class=indent1>
3. Set the Message object's <b>Unread</b>, <b>Submitted, </b>and<b> Sent </b>properties to <b>True</b>. </p>
<p class=indent1>
4. Call the Message object's <b>Send</b> or <b>Update</b> method to post the message. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_81iw.htm">Reading a Message from the Inbox</a> </td>
<td class=indent1 width=60%>1. Call the session's Inbox folder's <b>GetFirst, GetNext, GetPrevious,</b> and <b>GetLast</b> methods to obtain a Message object. <p class=indent1>
2. Obtain the Message object's <b>Text</b> property. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_0boy.htm">Searching for a Folder</a> </td>
<td width=60%>Use the Session object's <b>GetFolder</b> method to obtain the folder from its known identifier value. <p class=indent1>
– Or –</p>
<p>
Call the Folders collection's <b>Get</b> methods to get individual Folder objects, and compare properties of each folder with the desired property values. </p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_9vad.htm">Searching for a Message</a> </td>
<td width=60%>Use the Session object's <b>GetMessage</b> method to obtain the message from its known identifier value. <p class=indent1>
– Or –</p>
<p>
Call the Messages collection's <b>Get</b> methods to get individual Message objects, using a message filter to reduce the number of messages searched, and if necessary compare properties of each message with the desired property values. </p>
<p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%></td>
<td class=indent1 width=60%></td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_4p0r.htm">Selecting Recipients from the Address Book</a> </td>
<td class=indent1 width=60%>1. Call the session's <b>AddressBook</b> method to use the MAPI address book dialog box. <p class=indent1>
2. Set a Recipients collection object to the Recipients collection returned by the <b>AddressBook</b> method. </p>
<p class=indent1>
3. Use that Recipients collection or copy individual recipients from it. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_6q7i.htm">Starting a CDO Session</a> </td>
<td class=indent1 width=60%>1. Create or obtain a Session object. <p class=indent1>
2. Call the Session object's <b>Logon</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_44oj.htm">Using Addresses</a> </td>
<td class=indent1 width=60%>1. Set the message's Recipient object's <b>Address</b> property to a full address. <p class=indent1>
2. Call the Recipient object's <b>Resolve</b> method. </p>
<p class=indent1>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_0ier.htm">Viewing MAPI Properties</a> </td>
<td width=60%>Specify a MAPI property tag as the Fields collection's <b>Item</b> property. <p>
</p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_33oz.htm">Working with Conversations</a> </td>
<td class=indent1 width=60%>1. Set the message's <b>ConversationTopic</b> property. <p class=indent1>
2. Set the message's <b>ConversationIndex</b> property. </p>
<p class=indent1>
3. Send the message by calling the <b>Send</b> method. </p>
<p class=indent1>
– Or –</p>
<p class=indent1>
3. Post the message in the public folder by setting the <b>Submitted</b> property to <b>True</b>. </p>
</td>
</tr>
<tr valign=top>
<td width=40%><a href="oletasks_2ik3.htm">Working with Distribution Lists</a> </td>
<td class=indent1 width=60%>1. Add a distribution list (DL) to a personal address book (PAB). <p class=indent1>
2. Add an address entry to a distribution list. </p>
<p class=indent1>
3. Delete an address entry from a distribution list. </p>
</td>
</tr>
</table><br>
<p>
It is important to understand the hierarchy of the CDO Library objects, because the hierarchical relationships between objects determines the correct syntax of Microsoft® Visual Basic® statements. The relative positions of these objects in the hierarchy indicate how the objects appear from left to right in a Visual Basic statement. For more information on the hierarchy, see <a href="oleobjaf_8m24.htm">Object Model</a>. </p>
<p>
In the sample code that appears in this guide, individual statements are often broken across several lines. The convention used for this is the statement continuation introduced in Visual Basic version 4.0, which consists of a space followed by the underscore character (_). This sequence is placed at the end of a code line to indicate that the current statement is continued on the next line. </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message Classes and Microsoft Outlook Web Access</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_message_classes_and_microsoft_outlook_web_access"></a>Message Classes and Microsoft Outlook Web Access</h2>
<p>
Microsoft® Outlook™ Web Access recognizes a form's message class by reading its <a href="oleobjis_4g85.htm"><b>Type</b></a> property. It parses this property to determine the path to the folder where the form's .asp files are installed. For example, the message class for the Classified Ad sample is:</p>
<pre><code>IPM.Microsoft.ITG.NewClassifiedAd
 </code></pre>
<p>
Web Access starts with the string \exchsrvr\webdata\usa\forms and appends the <b>Type</b> property string, replacing each period with a backslash character. This gives the following folder path:</p>
<pre><code>\exchsrvr\webdata\usa\forms\IPM\Microsoft\ITG\NewClassifiedAd
 </code></pre>
<p>
When you create a form meant for use with Web Access, follow this convention when choosing where to save its .asp files and where to install them after distribution. Similarly, forms you download should be installed into a folder path that follows this convention. </p>
<p>
A separate form exists for creating a purchase offer. This form has the message class IPM.MS.ITG.MicroNews.PrchOfr, and the files that render it can be found in the folder \exchsrvr\webdata\usa\forms\IPM\MS\ITG\MicroNews\PrchOfr. The existence of this message class illustrates how the use of different message classes lets one set of information — about an item for sale, for example — be presented in different ways. Different forms are rendered for different purposes, though the same data can be used in each form. </p>
<p>
Microsoft Outlook Web Access uses this convention in the following way:</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;Using Web Access to open an existing form</h5>
<ol>
<li>
At the Web Access interface, a user opens a form by clicking it.  </li>
<li>
Web Access reads the form's <b>Type</b> property and uses it to determine the directory path to the form's installed .asp files.</li>
<li>
Web Access uses that path to locate and run the file called Read.asp. The Read.asp file can now redirect control to any other .asp or .htm file.</li>
<li>
Typically, CDO functions are now called that use <a href="olegloss_48j1.htm#_olemsg_mapi_gly">MAPI</a> to retrieve properties from the form's message object stored in a Microsoft Exchange information store. This data populates the controls of the form, which are rendered to the user.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

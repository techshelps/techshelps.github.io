<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Property (Field Object)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_type_property_field"></a>Type Property (Field Object)  <a href="oleobjaf_8lh0.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Type</b> property returns the data type of the Field object. Read-only. </p>
<h4>Syntax </h4>
<p>
<i>objField</i>.<b>Type</b> </p>
<h4>Data Type </h4>
<p>
Integer </p>
<h4>Remarks </h4>
<p>
The <b>Type</b> property contains the data type of the Field object and determines the range of valid values that can be supplied for the <a href="oleobjaf_92zo.htm"><b>Value</b></a> property. You set the <b>Type</b> property when you first create the field by setting the <i>Class</i> parameter of the <a href="oleobjaf_0yt0.htm">Fields</a> collection's <a href="oleobjaf_1qy6.htm"><b>Add</b></a> method. After that, you cannot change the <b>Type</b> property. </p>
<p>
Valid data types are as follows: </p>
<table cellspacing=4 cols=5>
<tr valign=top>
<th align=left width=20%><br>
Type </th>
<th align=left width=17%> <br>
Description </th>
<th align=left width=14%>Decimal value </th>
<th align=left width=23%>OLE variant type </th>
<th align=left width=26%>MAPI property type </th>
</tr>
<tr valign=top>
<td width=20%><b>vbArray </b></td>
<td width=17%>Multivalued type </td>
<td width=14%>8192 </td>
<td width=23%>VT_ARRAY </td>
<td width=26%>PT_MV_FLAG </td>
</tr>
<tr valign=top>
<td width=20%><b>vbBlob </b></td>
<td width=17%>Binary (unknown format) </td>
<td width=14%>65 </td>
<td width=23%>VT_BLOB </td>
<td width=26%>PT_BINARY </td>
</tr>
<tr valign=top>
<td width=20%><b>vbBoolean </b></td>
<td width=17%>Boolean </td>
<td width=14%>11 </td>
<td width=23%>VT_BOOL </td>
<td width=26%>PT_BOOLEAN </td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=17%></td>
<td width=14%></td>
<td width=23%></td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=20%><b>vbCurrency </b></td>
<td width=17%>8-byte integer (scaled by 10000) </td>
<td width=14%>6 </td>
<td width=23%>VT_CY </td>
<td width=26%>PT_CURRENCY </td>
</tr>
<tr valign=top>
<td width=20%><b>vbDataObject </b></td>
<td width=17%>Data object </td>
<td width=14%>13 </td>
<td width=23%>VT_UNKNOWN </td>
<td width=26%>PT_OBJECT </td>
</tr>
<tr valign=top>
<td width=20%><b>vbDate </b></td>
<td width=17%>8-byte real (date in integer, time in fraction) </td>
<td width=14%>7 </td>
<td width=23%>VT_DATE </td>
<td width=26%>PT_APPTIME </td>
</tr>
<tr valign=top>
<td width=20%><b>vbDouble </b></td>
<td width=17%>8-byte real (floating point) </td>
<td width=14%>5 </td>
<td width=23%>VT_R8 </td>
<td width=26%>PT_DOUBLE, <br>
PT_R8 </td>
</tr>
<tr valign=top>
<td width=20%><b>vbEmpty </b></td>
<td width=17%>Not initialized </td>
<td width=14%>0 </td>
<td width=23%>VT_DEREF </td>
<td width=26%>PT_UNSPECIFIED </td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=17%></td>
<td width=14%></td>
<td width=23%></td>
<td width=26%></td>
</tr>
<tr valign=top>
<td width=20%><b>vbInteger </b></td>
<td width=17%>2-byte integer </td>
<td width=14%>2 </td>
<td width=23%>VT_I2 </td>
<td width=26%>PT_I2 <br>
PT_SHORT </td>
</tr>
<tr valign=top>
<td width=20%><b>vbLong </b></td>
<td width=17%>4-byte integer </td>
<td width=14%>3 </td>
<td width=23%>VT_I4 </td>
<td width=26%>PT_I4, <br>
PT_LONG </td>
</tr>
<tr valign=top>
<td width=20%><b>vbNull </b></td>
<td width=17%>Null (no valid data) </td>
<td width=14%>1 </td>
<td width=23%>VT_NULL </td>
<td width=26%>PT_NULL </td>
</tr>
<tr valign=top>
<td width=20%><b>vbSingle </b></td>
<td width=17%>4-byte real (floating point) </td>
<td width=14%>4 </td>
<td width=23%>VT_R4 </td>
<td width=26%>PT_FLOAT, <br>
PT_R4 </td>
</tr>
<tr valign=top>
<td width=20%><b>vbString </b></td>
<td width=17%>String </td>
<td width=14%>8 </td>
<td width=23%>VT_BSTR </td>
<td width=26%>PT_TSTRING </td>
</tr>
</table><br>
<p>
The current version of CDO does not support the <b>vbNull</b> and <b>vbDataObject</b> data types. The <b>vbEmpty</b> data type should never appear as the value of the <b>Type</b> property because the <a href="oleobjaf_1qy6.htm"><b>Add</b></a> method should derive the data type from the new field's value if the <i>Class</i> parameter is set to <b>vbEmpty</b>. </p>
<p>
The <b>vbArray</b> data type must always be used in conjunction with one of the other types, for example <b>vbArray + vbInteger</b>. Note that operations such as comparison cannot be done with a single operator on types involving <b>vbArray</b>. </p>
<p>
When you use a multivalued type, to avoid an <b>CdoE_INVALID_TYPE</b> error you must also declare the array to be of the appropriate type, as shown in the following code fragment: </p>
<pre><code>Dim Codes(10) As Long ' NOT just Dim Codes(10) 
' ... 
Set objCodesField = objFieldsColl.Add("Codes", vbArray + vbLong) 
objCodesField.Value = Codes 
 </code></pre>
<p>
MAPI stores all custom properties that represent date and time information using Greenwich Mean Time (GMT), also known as Coordinated Universal Time (UTC). CDO converts these properties so that the values appear to the user in local time. </p>
<h4>Example </h4>
<pre><code>' Fragment from Fields_Add; uses the type "vbString" 
    Set objNewField = objFieldsColl.Add( _ 
                      Name:="Keyword", _ 
                      Class:=vbString, _ 
                      Value:="Peru") 
'  verify that objNewField is a valid Field object 
' Fragment from Field_Type; display the decimal type value 
    MsgBox "Field type = " &amp; objOneField.Type 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

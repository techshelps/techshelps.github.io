<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Method (Formats Collection)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_add_method_formats_collection_"></a>Add Method (Formats Collection)  <a href="renobj_1nlg.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Add</b> method creates and returns a new <a href="renobj_3cxg.htm">Format</a> object in the Formats collection. </p>
<h4>Syntax </h4>
<p>
<b>Set</b><i> objFormat = objFormatsColl</i>.<b>Add(</b><i>varProperty</i><b> [</b><i>, varName</i><b>] ) </b>
<dl>
<dt>
<i>objFormat </i></dt>
<dd>
On successful return, contains the new Format object. </dd>
<dt>
<i>objFormatsColl </i></dt>
<dd>
Required. The Formats collection object. </dd>
<dt>
<i>varProperty </i></dt>
<dd>
Required. Variant (Long or String). The property tag for the predefined property, or the custom name of the user-defined property, that is to be formatted by the new Format object. A value of zero is used to indicate a special-purpose format not representing any property. </dd>
<dt>
<i>varName </i></dt>
<dd>
Optional. String. The name to be assigned to the new Format object. The <i>varName</i> parameter is for special-purpose formats only. If it is specified, the <i>varProperty</i> parameter must be set to zero. 
</dd>
</dl>
<h4>Remarks </h4>
<p>
The <b>Add</b> method parameters correspond to the <a href="renobj_7mcf.htm"><b>Property</b></a> and <a href="renobj_9ufz.htm"><b>Name</b></a> properties of the <a href="renobj_3cxg.htm">Format</a> object. </p>
<p>
The <i>varProperty</i> parameter designates the property to be rendered. The parameter can be a long integer designating the property by property tag, or a string designating it by custom name. In both cases it corresponds to the <b>Property</b> property. </p>
<p>
If the <i>varProperty</i> parameter is a custom name, it can optionally be prefixed with a GUID string identifying its property set. In this case, the GUID should be enclosed in braces. For more information and examples, see <a href="rendering_0c6r.htm">Using Named Properties</a>. </p>
<p>
The <i>varName</i> parameter designates a reference name for a special-purpose format, which does not represent a specific property. The format name should not be confused with a property name; in fact, when the <i>varProperty</i> parameter supplies a property name, the <i>varName</i> parameter must be omitted. </p>
<p>
CDO enforces uniqueness of format names within the same Formats collection. If you attempt to set the <i>varName</i> parameter to an existing name, <b>Add</b> returns an error. </p>
<p>
You should avoid giving a format a name that coincides with any of the substitution tokens, as this could cause unexpected results from the rendering methods. For a list of the substitution tokens, see the <a href="renobj_0cm7.htm"><b>RenderUsing</b></a> property of the <a href="renobj_7flg.htm">Pattern</a> object. </p>
<p>
Every property to be rendered can have at most one format. The Formats collection cannot contain more than one Format object for any one property. </p>
<p>
You can add a format corresponding to a predefined property at any time, but if you wish to add a format corresponding to a user-defined property, you must first set the data source of the rendering object you are working with, that is, either the <a href="renobj_86no.htm">ContainerRenderer</a> object's <a href="renobj_555r.htm"><b>DataSource</b></a> property or the <a href="renobj_4wxg.htm">ObjectRenderer</a> object's <a href="renobj_1p7j.htm"><b>DataSource</b></a> property. </p>
<p>
If you attempt to add a user-defined property without the data source being set, you get an error return from <b>Add</b>. Because the CDO Rendering Library runs primarily in server-side script, which does not support exception handling, you must explicitly test for errors: </p>
<pre><code>Set objFormat = objFormatsColl.Add("CustomPropName") 
  If Err.Number &lt;&gt; 0 Then 
    If Err.Number = &amp;H8000FFFF Then ' E_UNEXPECTED </code>–<code> no data source 
      ' handle error </code>–<code> perhaps set DataSource property and try again 
    End If 
  End If 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

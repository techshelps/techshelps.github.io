<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending the Scope of the RenderingApplication Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_extending_the_scope_of_the_renderingapplication_object"></a>Extending the Scope of the RenderingApplication Object</h2>
<p>
When you create the RenderingApplication object with the Server.CreateObject method in <b>Application_OnStart</b>, you assign it to a local variable, which limits its lifetime to that of the <b>Application_OnStart</b> function. </p>
<p>
Because of this limitation, it is a good idea to store the RenderingApplication object in the Active Server Pages Application object. The Active Server Pages application is global, so storing the RenderingApplication object expands its scope to let it be accessed by other scripts, and extends its lifetime to that of the application. To do this, apply a name to the RenderingApplication object and save it into a table for later reference, using a call like the following:</p>
<pre><code>Set Application("RenderingApplication") = objRenderApp
 </code></pre>
<p>
You can release the RenderingApplication object by setting its value in the Active Server Pages Application object to Nothing:</p>
<pre><code>Set Application("RenderingApplication") = Nothing
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

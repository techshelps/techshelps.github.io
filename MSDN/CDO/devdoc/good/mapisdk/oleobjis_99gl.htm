<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ConversationIndex Property (Message Object)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_conversationindex_property_message"></a>ConversationIndex Property (Message Object)  <a href="oleobjis_2p10.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>ConversationIndex</b> property specifies the index to the conversation thread of the message. Read/write. </p>
<h4>Syntax </h4>
<p>
<i>objMessage</i>.<b>ConversationIndex</b> </p>
<h4>Data Type </h4>
<p>
String </p>
<h4>Remarks </h4>
<p>
The <b>ConversationIndex</b> property is a string that represents a hexadecimal number. Valid characters within the string include the numbers 0 through 9 and the letters A through F (uppercase or lowercase). </p>
<p>
A conversation is a group of related messages that have the same <a href="oleobjis_83l1.htm"><b>ConversationTopic</b></a> property value. In a discussion application, for example, users can save original messages and responses in their personal folders. Messages can be tagged with the <b>ConversationIndex</b> property so that users can order the messages within the conversation. </p>
<p>
The <a href="oleobjis_57w4.htm">Session</a> object provides the <a href="oleobjis_53rz.htm"><b>CreateConversationIndex</b></a> method to create or update a conversation index. </p>
<p>
This convention uses concatenated time stamp values, with each new message in the conversation adding a new time stamp to the end of the <b>ConversationIndex</b> string. You can see time relationships among the messages when you sort them by <b>ConversationIndex</b> values. </p>
<p>
For more information on conversations, see <a href="oletasks_33oz.htm">Working With Conversations</a>. </p>
<p>
The current version of CDO does not support the <b>ConversationIndex</b> property on <a href="oleobjaf_5flg.htm">AppointmentItem</a> objects. An attempted access returns <b>CdoE_NOT_FOUND</b>. </p>
<p>
The <b>ConversationIndex</b> property corresponds to the MAPI property PR_CONVERSATION_INDEX. It can be rendered into HTML hypertext using the CDO Rendering <a href="renobj_4wxg.htm">ObjectRenderer</a> object. To specify this, set the object renderer's <a href="renobj_1p7j.htm"><b>DataSource</b></a> property to this Message object and the <i>property</i> parameter of the <a href="renobj_7ufz.htm"><b>RenderProperty</b></a> method to <b>CdoPR_CONVERSATION_INDEX</b>. </p>
<h4>Example </h4>
<p>
This code fragment demonstrates the old procedure used prior to version 1.1 of CDO. It takes advantage of the OLE <b>CoCreateGUID</b> function, which returns a value that consists of a time stamp and a machine identifier. The code fragment saves the time stamp part of the <b>GUID</b>. </p>
<p>
For an example of the new procedure available with CDO version 1.1, see the <a href="oleobjis_53rz.htm"><b>CreateConversationIndex</b></a> method. </p>
<pre><code>' declarations section 
Type GUID ' global unique identifier; contains a time stamp 
    Guid1 As Long 
    Guid2 As Long 
    Guid3 As Long 
    Guid4 As Long 
End Type 
' function appears in OLE32.DLL on Windows NT and Windows 95 
Declare Function CoCreateGuid Lib "COMPOBJ.DLL" (pGuid As GUID) As Long 
Global Const S_OK = 0 ' return value from CoCreateGuid
 
Function Util_GetEightByteTimeStamp() As String 
Dim lResult As Long 
Dim lGuid As GUID 
    ' Exchange conversation is a unique 8-byte value 
    ' Exchange client viewer sorts by concatenated properties 
    On Error GoTo error_actmsg 
 
    lResult = CoCreateGuid(lGuid) 
    If lResult = S_OK Then 
        Util_GetEightByteTimeStamp = _ 
            Hex$(lGuid.Guid1) &amp; Hex$(lGuid.Guid2) 
    Else 
        Util_GetEightByteTimeStamp = "00000000" ' zero time stamp 
    End If 
    Exit Function 
 
error_actmsg: 
    MsgBox "Error " &amp; Str(Err) &amp; ": " &amp; Error$(Err) 
    Util_GetEightByteTimeStamp = "00000000" 
    Exit Function 
End Function 
 
Function Util_NewConversation() 
Dim i As Integer 
Dim objNewMsg As Message  ' new message object 
Dim strNewIndex As String ' value for ConversationIndex 
' ... error handling ... 
    Set objNewMsg = objSession.Outbox.Messages.Add 
' ... error handling ... 
    With objNewMsg 
        .Subject = "used car wanted" 
        .ConversationTopic = .Subject 
        .ConversationIndex = Util_GetEightByteTimeStamp() ' utility 
        .Text = "Wanted: late-model used car with low mileage." 
        Set objOneRecip = .Recipients.Add(Name:="Car Ads", Type:=CdoTo) 
        ' or you could pick the public folder from the address book 
        If objOneRecip Is Nothing Then 
            MsgBox "Unable to create the public folder recipient" 
            Exit Function 
        End If 
        .Recipients.Resolve 
        .Update ' save everything in the MAPI system 
        .Send showDialog:=False 
    End With 
End Function 
 </code></pre>
<p>
A subsequent reply to this message should copy the <a href="oleobjis_83l1.htm"><b>ConversationTopic</b></a> property and append its own time stamp to the original message's time stamp, as shown in the following code fragment: </p>
<pre><code>Function Util_ReplyToConversation() 
Dim objPublicFolder As Folder 
Dim i As Integer 
Dim objOriginalMsg As Message ' original message in public folder 
Dim objNewMsg As Message      ' new message object for reply 
Dim strPublicFolderID As String ' ID for public folder 
 
    Set objNewMsg = objSession.Outbox.Messages.Add 
' error checking ... obtain objOriginalMsg and check that it is valid 
    With objNewMsg 
        .Text = "How about a slightly used bicycle?" ' new text 
        .Subject = objOriginalMsg.Subject ' copy original properties 
        .ConversationTopic = objOriginalMsg.ConversationTopic 
        ' append time stamp; compatible with Microsoft Exchange client 
        .ConversationIndex = objOriginalMsg.ConversationIndex &amp; _ 
                             Util_GetEightByteTimeStamp() ' new stamp 
        ' message was sent to a public folder so can copy recipient 
        Set objOneRecip = .Recipients.Add( _ 
                         Name:=objOriginalMsg.Recipients.Item(1).Name, _ 
                         Type:=CdoTo) 
       ' ... more error handling 
        .Recipients.Resolve 
        .Update ' save everything in the MAPI system 
        .Send showDialog:=False 
    End With 
' ... error handling 
End Function 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

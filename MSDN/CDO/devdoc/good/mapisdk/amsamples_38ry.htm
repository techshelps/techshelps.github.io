<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Application_OnStart Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_olemsg_the_application_onstart_function"></a>The Application_OnStart Function</h3>
<p>
The <b>Application_OnStart</b> function is called before any .asp files are processed — before any text or graphics are rendered and sent to the user's browser. Within this function, the following call to the <b>CreateObject</b> method on the Active Server Pages Server object creates the CDO Rendering Library <a href="renobj_8kac.htm">RenderingApplication</a> object. If this call succeeds, the <i>objRenderApp</i> variable contains a pointer to the new object.</p>
<pre><code>Set objRenderApp = Server.CreateObject("AMHTML.Application")
</code></pre>
<p>
With the pointer retrieved, it is now possible to work with this CDO Rendering Library object — to call its methods and set its properties. Because a single RenderingApplication object can be shared by all currently active sessions, this is the only time the object needs to be created. The pointer to the RenderingApplication object is stored in the Active Server Pages Application object, using the following call.</p>
<pre><code>Set Application("RenderingApplication") = objRenderApp
 </code></pre>
<p>
This call makes this instance of the object globally accessible so that any session can use it. The "RenderingApplication" tag is assigned arbitrarily and used to identify the storage location of the pointer to the CDO Rendering Library object. You can later use this tag to retrieve the pointer because it differentiates the object from anything else stored in the Active Server Pages Application object. Now, during processing of any ASP script in this virtual root, the RenderingApplication object can be retrieved from the Active Server Pages Application object.</p>
<p>
Next, the impersonation handle on the Active Server Pages Application object is initialized with the following call. Strictly speaking, this call is unnecessary because this handle is empty before it is set. However, this call is used to remind the developer that the <i>hImp</i> variable needs to be reset later, in the <a href="amsamples_7wku.htm"><b>Application_OnEnd</b></a> function.</p>
<pre><code>Application("hImp") = Empty
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

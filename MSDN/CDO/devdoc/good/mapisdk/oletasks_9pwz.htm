<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling Errors</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_handling_errors"></a>Handling Errors  <a href="oletasks_4ofn.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The CDO Library raises exceptions for all errors. When you write Microsoft® Visual Basic® applications that use the CDO Library, use the same run-time error handling techniques that you use in all your Visual Basic applications: the Visual Basic <b>On Error GoTo</b> statement. </p>
<p>
Note that the error values and error handling techniques vary slightly depending on whether you are using Visual Basic version 4.0 or older versions of Visual Basic for Applications. </p>
<p>
When you use older versions of Visual Basic for Applications, use the <b>Err</b> function to obtain the status code and the <b>Error$</b> function to obtain a descriptive error message, as in the following code fragment: </p>
<pre><code>' Visual Basic for Applications error handling 
MsgBox "Error number " &amp; Err &amp; " description. " &amp; Error$(Err) 
 </code></pre>
<p>
When you use Visual Basic 4.0, use the <b>Err</b> object's <b>Number</b> property to obtain the status code and its <b>Description</b> property to obtain the error message, as in the following fragment: </p>
<pre><code>'' Visual Basic version 4.0 error handling 
MsgBox "Error " &amp; Err.Number &amp; " description. " &amp; Err.Description 
 </code></pre>
<p>
Depending on your version of Visual Basic, the error code is returned as a long integer or as a short integer, and you should appropriately define the value of the error codes checked by your program. </p>
<p>
When you use Visual Basic 4.0, the error value is returned as the value of the MAPI <b>HRESULT</b> data type, a long integer error code. When you use earlier versions of Visual Basic, the error value is returned as the sum of decimal 1000 and the low-order word of <b>HRESULT</b>. This is because versions of Visual Basic previous to 4.0 reserve all run-time error values below 1000 for their own errors. </p>
<p>
This code fragment checks for an error corresponding to the MAPI error code <b>CdoE_USER_CANCEL</b>, which has the value &amp;H80040113. Visual Basic 4.0 users can check directly for this value. Visual Basic for Applications users check for the value of the low-order word plus decimal 1000. The low-order word is &amp;H0113, or 275, so the value returned by Visual Basic for Applications is 1275. </p>
<pre><code>' demonstrates error handling for Logon 
' Function: TestDrv_Util_CreateSessionAndLogon 
' Purpose: Call the utility function Util_CreateSessionAndLogon 
Function TestDrv_Util_CreateSessionAndLogon() 
Dim bFlag As Boolean 
On Error GoTo error_olemsg 
bFlag = Util_CreateSessionAndLogon() 
MsgBox "bFlag = " &amp; bFlag 
Exit Function 
 
error_olemsg: 
MsgBox "Error " &amp; Str(Err) &amp; ": " &amp; Error$(Err) 
Resume Next 
 
End Function 
 
' Function: Util_CreateSessionAndLogon 
' Purpose: Demonstrate common error handling for Logon 
Function Util_CreateSessionAndLogon() As Boolean 
Dim objSession As MAPI.Session 
On Error GoTo err_CreateSessionAndLogon 
 
Set objSession = CreateObject("MAPI.Session") 
objSession.Logon 
Util_CreateSessionAndLogon = True 
Exit Function 
 
err_CreateSessionAndLogon: 
If Err() = 1275 Then ' VB4.0: If Err.Number = CdoE_USER_CANCEL Then 
    MsgBox "User pressed Cancel" 
Else 
    MsgBox "Unrecoverable Error:" &amp; Err 
End If 
Util_CreateSessionAndLogon = False 
Exit Function 
 
error_olemsg: 
MsgBox "Error " &amp; Str(Err) &amp; ": " &amp; Error$(Err) 
Resume Next 
 
End Function 
 </code></pre>
<p>
When an error occurs in the MAPI subsystem, the CDO Library supplies the error value returned by MAPI. However, the value can be returned from any of several different <i>levels</i> of software. The lowest level of software is that which interacts directly with hardware, such as a mouse driver or video driver. Higher levels of software move toward greater device independence and greater generality. </p>
<p>
The following diagram suggests the different levels of software in Visual Basic applications that use the CDO Library. Visual Basic applications reside at the highest level and interact with the CDO Library at the next lower level. The CDO Library interacts with the MAPI system software, and the MAPI system software interacts with a lower layer of software, the operating system. </p>
<p>
<img src="images/olemc02.gif" border=0></p>
<p>
Errors can occur at any level or at the interface between any two levels. For example, a user of your application without security permissions can be denied access to an address book entry. The lowest level in this diagram, the operating system, returns the error to the next higher level, and so on, until the error is returned to the highest level in this diagram, the Visual Basic application. </p>
<p>
It is often useful to provide a general error handling capability that can display the complete <b>HRESULT</b> or error code value returned by the CDO Library. </p>
<p>
For more information about run-time error handling and the <b>Err</b> object, see your product's Visual Basic documentation. For a listing of CDO Library and MAPI error values, see <a href="oleerror_0y7n.htm">Error Codes</a>. </p>
<h4>See Also</h4>
<p>
<a href="oletasks_6q7i.htm">Starting a CDO Session</a> </p>
<p>&nbsp;</p></body>
</HTML>

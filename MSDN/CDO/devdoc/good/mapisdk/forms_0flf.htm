<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Custom Fields</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_olemsg_adding_custom_fields"></a>Adding Custom Fields</h3>
<p>
Within this new message object is a child object known as a Fields collection, which is the actual array of fields that house data. To start using the Fields collection, you may first want to obtain a handle to it with the following call:</p>
<pre><code>Set oNewFields = oNewMessage.Fields
 </code></pre>
<p>
This call provides a handle to all the message's properties. After making this call, you can check its value for success (<b>Nothing</b> = failure). With the <i>oNewFields</i> handle, you can now add new fields to the message with the Fields.<b>Add</b> method, as in the following call:</p>
<pre><code>oNewFields.Add "Category Name", Category_Type, Value
 </code></pre>
<p>
You can also determine the number of fields (or properties) in the message using Fields.<b>Count</b> (in this case, <i>oNewFields</i>.<b>Count</b>). For more information, see <a href="oleobjaf_1qy6.htm">Add Method (Fields<b> </b>Collection)</a>. The code example at the bottom of the topic is reproduced here:</p>
<pre><code>' Fragment from Fields_Add; uses the type "vbString" 
    Set objNewField = objFieldsColl.Add( _ 
                      Name:="Keyword", _ 
                      Class:=vbString, _ 
                      Value:="Peru") 
'  verify that objNewField is a valid Field object 
' Fragment from Field_Type; display the integer type value 
    MsgBox "Field type = " &amp; objOneField.Type 
 </code></pre>
<p>
In this example, the message contains a Fields collection whose handle is <i>objFieldsColl</i>. Using the <b>Add</b> method, a new field called Keyword is created whose class is <b>vbString</b> and whose value is "Peru". Then, the variable <i>objNewField</i> is assigned ("Set") the value of this field creation operation, so that you can check for success. If the value assigned is not <b>Nothing</b>, the field was created. </p>
<h4>Field Names and Field Identifiers</h4>
<p>
Some fields have names ("named properties"), and others do not, such as the FROM field. Unnamed fields are identified by their identifiers. It is easiest to use the named property when it exists, but you must use the property identifier otherwise. In the file amprops.inc, a number of custom property form name identifier numbers are defined. These are hexadecimal numbers used to identify fields. None of these fields are necessarily rendered, although they may contain data. </p>
<p>
For example, in one sample script data is being retrieved from the FROM field. The Fields object is opened and the current index in the Fields object is set to the identifier of the FROM field. The identifier must be used because a given field (the FROM field in this example) is not always in the same position within a Fields collection. Because you can determine the number of properties in the Fields collection (with Fields.<b>Count</b>), you incrementally loop through the fields (from zero to the Fields count) until you reach the one whose identifier is equal to the constant defined for the FROM field. Then, you can read its value. </p>
<p>&nbsp;</p></body>
</HTML>

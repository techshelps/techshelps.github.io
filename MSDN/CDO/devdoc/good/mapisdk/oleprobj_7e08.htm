<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDispatch</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_idispatch"></a>IDispatch</h1>
<p>
<b>IDispatch</b> is a COM interface that is designed in such a way that it can call virtually any other COM interface. Developers working in Microsoft® Visual Basic® often cannot call COM interfaces directly, as they would from C or C++. However, when their tool supports <b>IDispatch</b>, as Visual Basic does, and when the object they want to call supports <b>IDispatch</b>, they can call its COM interfaces <i>indirectly</i>. </p>
<p>
The main method offered by <b>IDispatch</b> is called <b>Invoke</b>. This method adds a level of indirection to the control flow of the Component Object Model. In the standard COM model, an object obtains a pointer to an interface and then calls a member method of the interface. With <b>IDispatch</b>, instead of directly calling the member method, the program calls <b>IDispatch::Invoke</b>, and <b>IDispatch::Invoke</b> calls the member method for you. </p>
<p>
<b>Invoke</b> is a general method-calling machine. Its parameters include a value that identifies the method that is to be called and the parameters that are to be sent to it. In order to be able to handle the wide variety of parameters that other COM methods use, <b>Invoke</b> uses a self-describing data structure called a VARIANTARG. </p>
<p>
The VARIANTARG structure contains two parts: a type field, which represents the data type, and a data field, which represents the actual value of the data. The data type, known also as <i>variant type</i>, contains a constant such as VT_I2 or VT_DATE, which defines valid values for the data types. For more information on variant types, see the <a href="oleobjaf_6h5w.htm"><b>Type</b></a> property of the <a href="oleobjaf_8lh0.htm">Field</a> object. </p>
<p>
Associated with <b>IDispatch</b> is the notion of a <i>type library</i>. The type library publishes information about an interface so that it is available to Visual Basic programs. The type library, or <i>typelib</i>, contains the same kind of information that C or C++ programmers would obtain from a header file: the name of the method and the sequence and types of its parameters. </p>
<p>
An executable file or DLL that exposes <b>IDispatch</b> and its type library is known as an <i>Automation server</i>. The CDO Library and the CDO Rendering Library are both Automation servers. In version 1.1 and later they are also in-process servers, residing in .DLL files and linking dynamically with the calling modules. </p>
<p>&nbsp;</p></body>
</HTML>

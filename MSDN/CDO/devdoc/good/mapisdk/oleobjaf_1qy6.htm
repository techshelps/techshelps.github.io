<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Method (Fields Collection)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_add_method_fields_collection"></a>Add Method (Fields Collection)  <a href="oleobjaf_0yt0.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Add</b> method creates and returns a new <a href="oleobjaf_8lh0.htm">Field</a> object in the Fields collection. </p>
<h4>Syntax </h4>
<p>
<b>Set </b><i>objField = objFieldsColl</i>.<b>Add (</b><i>name, Class </i><b>[</b><i>, value</i><b>] [</b><i>, PropsetID</i><b>] ) </b></p>
<p>
<b>Set </b><i>objField = objFieldsColl</i>.<b>Add (</b><i>PropTag, value</i><b>) </b>
<dl>
<dt>
<i>objField </i></dt>
<dd>
On successful return, contains the new Field object. </dd>
<dt>
<i>objFieldsColl </i></dt>
<dd>
Required. The Fields collection object. </dd>
<dt>
<i>name </i></dt>
<dd>
Required. String. The property name assigned to a custom named property. </dd>
<dt>
<i>Class </i></dt>
<dd>
Required. Long. The data type for the field, such as string or integer. The <i>Class</i> parameter represents the same values as the Field object's <a href="oleobjaf_6h5w.htm"><b>Type</b></a> property. The following types are allowed: 
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=24%><br>
Type property </th>
<th align=left width=30%> <br>
Description </th>
<th align=left width=17%>Numeric value </th>
<th align=left width=29%> <br>
OLE variant type </th>
</tr>
<tr valign=top>
<td width=24%><b>vbArray </b></td>
<td width=30%>Multivalued type </td>
<td width=17%>8192 </td>
<td width=29%>VT_ARRAY </td>
</tr>
<tr valign=top>
<td width=24%><b>vbBlob </b></td>
<td width=30%>Binary (unknown format) </td>
<td width=17%>65 </td>
<td width=29%>VT_BLOB </td>
</tr>
<tr valign=top>
<td width=24%><b>vbBoolean </b></td>
<td width=30%>Boolean </td>
<td width=17%>11 </td>
<td width=29%>VT_BOOL </td>
</tr>
<tr valign=top>
<td width=24%><b>vbCurrency </b></td>
<td width=30%>8-byte integer (scaled by 10000) </td>
<td width=17%>6 </td>
<td width=29%>VT_CY </td>
</tr>
<tr valign=top>
<td width=24%><b>vbDataObject </b></td>
<td width=30%>Data object </td>
<td width=17%>13 </td>
<td width=29%>VT_UNKNOWN </td>
</tr>
<tr valign=top>
<td width=24%><b>vbDate </b></td>
<td width=30%>8-byte real (date in integer, time in fraction) </td>
<td width=17%>7 </td>
<td width=29%>VT_DATE </td>
</tr>
<tr valign=top>
<td width=24%><b>vbDouble </b></td>
<td width=30%>8-byte real (floating point) </td>
<td width=17%>5 </td>
<td width=29%>VT_R8 </td>
</tr>
<tr valign=top>
<td width=24%><b>vbEmpty </b></td>
<td width=30%>Not initialized </td>
<td width=17%>0 </td>
<td width=29%>VT_DEREF </td>
</tr>
<tr valign=top>
<td width=24%><b>vbInteger </b></td>
<td width=30%>2-byte integer </td>
<td width=17%>2 </td>
<td width=29%>VT_I2 </td>
</tr>
<tr valign=top>
<td width=24%><b>vbLong </b></td>
<td width=30%>4-byte integer </td>
<td width=17%>3 </td>
<td width=29%>VT_I4 </td>
</tr>
<tr valign=top>
<td width=24%><b>vbNull </b></td>
<td width=30%>Null (no valid data) </td>
<td width=17%>1 </td>
<td width=29%>VT_NULL </td>
</tr>
<tr valign=top>
<td width=24%><b>vbSingle </b></td>
<td width=30%>4-byte real (floating point) </td>
<td width=17%>4 </td>
<td width=29%>VT_R4 </td>
</tr>
<tr valign=top>
<td width=24%><b>vbString </b></td>
<td width=30%>String </td>
<td width=17%>8 </td>
<td width=29%>VT_BSTR </td>
</tr>
</table><br>


<p>
The current version of CDO does not support the <b>vbNull</b> and <b>vbDataObject</b> data types. 
</dd>
<dt>
<i>value </i></dt>
<dd>
Required (optional in first syntax). Variant. The value of the field, of the data type specified in the <i>Class</i> parameter or implicit in the <i>PropTag</i> parameter. You can change the value later by setting it directly or by subsequent calls to the Field object's <b>ReadFromFile</b> method. </dd>
<dt>
<i>PropsetID </i></dt>
<dd>
Optional. String. Contains the <b>GUID</b> that identifies the property set, represented as a string of hexadecimal characters. When this identifier is not present, the property is created within the default property set. The default property set is either the property set most recently supplied to the <a href="oleobjaf_40xa.htm"><b>SetNamespace</b></a> method, or the initial default property set value, PS_PUBLIC_STRINGS. </dd>
<dt>
<i>PropTag </i></dt>
<dd>
Required. Long. The MAPI property tag for a predefined MAPI property. 
</dd>
</dl>
<h4>Remarks </h4>
<p>
The <a href="oleobjaf_8lh0.htm">Field</a> object created by the <b>Add</b> method always represents a MAPI property. This can be either a predefined MAPI property, which is designated by a property identifier, or a custom property, which is designated by a unique name that MAPI associates with an identifier by means of a name-identifier mapping. This mapping makes use of the property set <b>GUID</b> that is common to every named property in that property set. </p>
<p>
The first syntax is used for a named property. The <i>name</i> parameter contains the custom name that MAPI maps to a property identifier. You can optionally include the property set <b>GUID</b> with the name as an alternative to using the <i>PropsetID</i> parameter. If you elect this option, the <b>GUID</b> is placed in braces immediately preceding the property name itself. If the property set <b>GUID</b> is supplied in both the <i>name</i> and <i>PropsetID</i> parameters, the value in <i>PropsetID</i> takes precedence. </p>
<p>
The length of the name of a custom property is limited to 120 characters. An attempt to exceed this limit returns an error. Note that this limitation does not apply to the value of the property. </p>
<p>
If the <i>Class</i> parameter contains <b>vbEmpty</b> or an invalid setting, the <b>Add</b> method attempts to derive the data type from the new field's value. If this attempt fails, for example if the <i>value</i> parameter is not set, the <b>Add</b> method returns <b>CdoE_NO_SUPPORT</b>. </p>
<p>
<b>Note</b>  The Microsoft® Exchange Server supports only predefined MAPI properties on <a href="oleobjaf_4u2c.htm">Folder</a> objects. You cannot add or define custom named properties on Microsoft Exchange Server folders. Other servers may support named properties on folders, however. </p>
<p>
The second syntax is used for a predefined MAPI property. The <i>PropTag</i> parameter contains the 32-bit MAPI property tag associated with the property and corresponds to the <a href="oleobjaf_0kmc.htm"><b>ID</b></a> property of the Field object. The property tag contains the MAPI property identifier in its high-order 16 bits and the MAPI property type in its low-order 16 bits. All MAPI properties are accessible except those of MAPI type PT_OBJECT or PT_CLSID. </p>
<p>
Support for the <b>Add</b> method is provider-dependent. Not all providers support named properties. </p>
<p>
The <i>name</i>, <i>Class</i>, and <i>value</i> parameters in the first syntax correspond to the <a href="oleobjaf_7vj8.htm"><b>Name</b></a>, <a href="oleobjaf_6h5w.htm"><b>Type</b></a>, and <a href="oleobjaf_92zo.htm"><b>Value</b></a> properties of the <a href="oleobjaf_8lh0.htm">Field</a> object. </p>
<p>
The <a href="oleobjaf_20ys.htm"><b>Index</b></a> property of the new Field object equals the new <a href="oleobjaf_4uni.htm"><b>Count</b></a> property of the Fields collection. </p>
<p>
The field is saved in the MAPI system when you <b>Update</b> the parent object, or <a href="oleobjis_2un9.htm"><b>Send</b></a> it if the Fields collection's parent is a <a href="oleobjis_2p10.htm">Message</a> object. </p>
<p>
The <b>vbArray</b> data type must always be used in conjunction with one of the other types, for example <b>vbArray + vbInteger</b>. When you use a multivalued type, to avoid an <b>CdoE_INVALID_TYPE</b> error you must also declare the array to be of the appropriate type: </p>
<pre><code>Dim Words(10) As String ' NOT just Dim Words(10) 
' ... 
Set objKeysField = objFieldsColl.Add("Keywords", vbArray + vbString) 
objKeysField.Value = Words 
 </code></pre>
<p>
When you use the <b>vbBlob</b> type for binary data, you supply the value in the form of a hexadecimal string that contains the hexadecimal representation of the bytes in the binary object (such as a hexadecimal dump of the object). </p>
<p>
MAPI stores all custom properties that represent date and time information using Greenwich Mean Time (GMT). CDO converts these properties so that the values appear to the user in local time. </p>
<h4>Example </h4>
<pre><code>' Fragment from Fields_Add; uses the type "vbString" 
    Set objNewField = objFieldsColl.Add( _ 
                      Name:="Keyword", _ 
                      Class:=vbString, _ 
                      Value:="Peru") 
'  verify that objNewField is a valid Field object 
' Fragment from Field_Type; display the integer type value 
    MsgBox "Field type = " &amp; objOneField.Type 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

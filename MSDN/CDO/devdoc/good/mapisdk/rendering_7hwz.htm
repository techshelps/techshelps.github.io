<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Named Formats</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_named_formats"></a>Named Formats</h2>
<p>
Named formats are objects that can be created by the user or defined by the CDO Rendering Library. Like <a href="rendering_8rcj.htm">property-only formats</a>, these objects can contain any number of patterns which in turn contain values and <a href="rendering_2beb.htm">RenderUsing pattern strings</a>. They do not require a specific property value. </p>
<p>
Once defined, the named format may be used like any other substitution token in a pattern string by placing the name between percent (%) symbols. This makes complex layering possible. You cannot do this with property-only formats.</p>
<p>
For instance, setting RenderingApplication.VirtualRoot creates the virtroot named format, which contains a single "*" pattern containing the IIS <a href="olegloss_48ja.htm#_olemsg_virtual_root_gly">virtual-root</a> setting. The string %virtroot% in a pattern string will be replaced by the value set in RenderingApplication.VirtualRoot.</p>
<p>
In this way, named format objects may be used as a table of symbols, containing replacement strings that can be referenced by name. A few reserved named formats contain formatting instructions for specific operations performed by the CDO Rendering Library rendering objects. These reserved names are listed in the following table.</p>
<p>
<b>Reserved Named Formats and Usage</b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=25%>Named format</th>
<th align=left width=25%>Used by</th>
<th align=left width=50%>Function</th>
</tr>
<tr valign=top>
<td width=25%>virtroot</td>
<td width=25%><a href="renobj_8kac.htm">RenderingApplication</a> object</td>
<td width=50%>IIS virtual root containing Web application.</td>
</tr>
<tr valign=top>
<td width=25%>classpath</td>
<td width=25%>RenderingApplication object</td>
<td width=50%>Message class to directory mapping for forms, for instance "Ipm/Note/" for the IPM.Note class. </td>
</tr>
<tr valign=top>
<td width=25%>message_Link</td>
<td width=25%><a href="renobj_4wxg.htm">ObjectRenderer</a> object</td>
<td width=50%>Pattern used by the <a href="renobj_7j6n.htm">RenderLink Method (ObjectRenderer Object)</a>.</td>
</tr>
<tr valign=top>
<td width=25%>message_Link</td>
<td width=25%><a href="renobj_86no.htm">ContainerRenderer</a> object</td>
<td width=50%>Pattern used as link for objects in a table (messages or address entries). Automatically selects appropriate column based on table cell value.</td>
</tr>
<tr valign=top>
<td width=25%>folderhierarchy_Parent</td>
<td width=25%>ContainerRenderer object</td>
<td width=50%>Pattern used to render the link to the parent of the current folder when rendering a folder hierarchy.</td>
</tr>
<tr valign=top>
<td width=25%>folderhierarchy_Icon</td>
<td width=25%>ContainerRenderer object</td>
<td width=50%>Patterns for icons used when rendering subfolders, and special folders, in the folder hierarchy.</td>
</tr>
<tr valign=top>
<td width=25%>folderhierarchy_Link</td>
<td width=25%>ContainerRenderer object</td>
<td width=50%>Pattern used to render active links to subfolders.</td>
</tr>
</table><br>
<p>
<b>Important</b>  In order to render a hierarchy, the named formats folderhierarchy_Parent, folderhierarchy_Icon, and folderhierarchy_Link must be defined. To know what patterns to add, see the examples in the tables in <a href="rendering_759v.htm">Suggested Formats and Patterns</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Addresses</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_using_addresses"></a>Using Addresses  <a href="oletasks_4ofn.htm"><img src="images/group.gif" border=0></a></h1>
<p>
In general, MAPI supports two kinds of addressing: 
<ul>
<li>
Addresses that the MAPI system looks up for you in your address book, based on a display name that you supply </li>
<li>
Addresses that represent <i>custom addresses,</i> that are used as supplied without lookup </li>
</ul>
<p>
The CDO Library supports both kinds of addresses with its <a href="oleobjis_9cfo.htm">Recipient</a> object. To look up an address for a name, you supply the <a href="oleobjis_8z1w.htm"><b>Name</b></a> property only. To use custom addresses, you supply the full address in the <a href="oleobjis_0ino.htm"><b>Address</b></a> property. </p>
<p>
The address book can be thought of as a database in persistent storage, managed by the MAPI system, that contains valid addressing information that is associated with a <i>display name. </i>The display name represents the way that a person's name might be displayed for your application users, using that person's full name, rather than the e-mail address that the messaging system uses to transmit the message. For example, the display name "John Doe" could be mapped to the e-mail address "johnd@company.com". </p>
<p>
In contrast to the address book, the objects that you create with the CDO Library are temporary objects that reside in memory. When you fill in the Recipient object's <b>Name</b> property with a display name, you must then <i>resolve</i> the address. To resolve the address means that you ask the MAPI system to look up the display name in the database and supply the corresponding address. When the display name is ambiguous, or can match more than one entry in the address book, the MAPI system prompts the user to select from a list of possible matching names. </p>
<p>
The <a href="oleobjis_9cfo.htm">Recipient</a> object's<b> <a href="oleobjis_8z1w.htm">Name</a></b> property represents the display name. Call the Recipient object's <a href="oleobjis_7cvo.htm"><b>Resolve</b></a> method to resolve the display name. </p>
<p>
After the Recipient object is resolved, it has a child <a href="oleobjaf_6n1w.htm">AddressEntry</a> object that contains a copy of the valid addressing information from the database. The child AddressEntry object is accessible from the Recipient object's <a href="oleobjis_9gms.htm"><b>AddressEntry</b></a> property. The Recipient and AddressEntry object properties are related as follows: </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=43%>CDO Library object and property </th>
<th align=left width=34%>MAPI property </th>
<th align=left width=23%>Description </th>
</tr>
<tr valign=top>
<td width=43%>Recipient.<a href="oleobjis_0ino.htm"><b>Address</b></a> </td>
<td width=34%>Combination of PR_ADDRTYPE and PR_EMAIL_ADDRESS </td>
<td width=23%>Full address; AddressEntry object's <a href="oleobjaf_85q1.htm"><b>Type</b></a> and <a href="oleobjaf_9ed5.htm"><b>Address</b></a> properties </td>
</tr>
<tr valign=top>
<td width=43%>Recipient.<a href="oleobjis_8z1w.htm"><b>Name</b></a> </td>
<td width=34%>PR_DISPLAY_NAME </td>
<td width=23%>Display name </td>
</tr>
<tr valign=top>
<td width=43%>Recipient.<b>AddressEntry</b>.<a href="oleobjaf_9ed5.htm"><b>Address</b></a> </td>
<td width=34%>PR_EMAIL_ADDRESS </td>
<td width=23%>E-mail address </td>
</tr>
<tr valign=top>
<td width=43%>Recipient.<b>AddressEntry</b>.<a href="oleobjaf_9xmh.htm"><b>ID</b></a> </td>
<td width=34%>PR_ENTRYID </td>
<td width=23%>AddressEntry object's unique identifier </td>
</tr>
<tr valign=top>
<td width=43%>Recipient.<b>AddressEntry</b>.<a href="oleobjaf_6lfd.htm"><b>Name</b></a> </td>
<td width=34%>PR_DISPLAY_NAME </td>
<td width=23%>Display name </td>
</tr>
<tr valign=top>
<td width=43%>Recipient.<b>AddressEntry</b>.<a href="oleobjaf_85q1.htm"><b>Type</b></a> </td>
<td width=34%>PR_ADDRTYPE </td>
<td width=23%>E-mail type </td>
</tr>
</table><br>
<p>
The <a href="oleobjis_9cfo.htm">Recipient</a> object's <a href="oleobjis_0ino.htm"><b>Address</b></a> property represents a <i>full address</i>, that is, the combination of address type and e-mail address that MAPI uses to send a message. The full address represents information that appears in the <a href="oleobjaf_6n1w.htm">AddressEntry</a> object's <a href="oleobjaf_9ed5.htm"><b>Address</b></a> and <a href="oleobjaf_85q1.htm"><b>Type</b></a> properties. </p>
<p>
You can also supply a complete recipient address. By manipulating the address yourself, you direct the MAPI system to send the message to the full address that you supply without using the database. In this case, you must also supply the display name. When you supply a custom address, the <a href="oleobjis_9cfo.htm">Recipient</a> object's <a href="oleobjis_0ino.htm"><b>Address</b></a> property must use the following syntax: </p>
<p>
<i>&nbsp;&nbsp;&nbsp;&nbsp;AddressType</i><b>:</b><i>AddressValue   </i></p>
<p>
There is also a third method of working with addresses. You can directly obtain and use the Recipient object's child <a href="oleobjaf_6n1w.htm">AddressEntry</a> object from messages that have already been successfully sent through the messaging system. </p>
<p>
For example, to reply to a message, you can use the <a href="oleobjis_2p10.htm">Message</a> object's <a href="oleobjis_2i3p.htm"><b>Sender</b></a> property to get a valid AddressEntry object. When you work with valid AddressEntry objects, you do not have to call the <a href="oleobjis_7cvo.htm"><b>Resolve</b></a> method. </p>
<p>
<b>Note</b>  When you use existing AddressEntry objects, do not try to modify them. In general, do not write directly to the Recipient object's child AddressEntry object properties. </p>
<p>
In summary, you can provide addressing information in three different ways: 
<ul>
<li>
Obtain the correct addressing information for a known display name. Set the <a href="oleobjis_9cfo.htm">Recipient</a> object's <a href="oleobjis_8z1w.htm"><b>Name</b></a> property and call its <a href="oleobjis_7cvo.htm"><b>Resolve</b></a> method. You can optionally request that <b>Resolve</b> display a dialog box. </li>
<li>
Create a custom address. Set the Recipient object's <a href="oleobjis_0ino.htm"><b>Address</b></a> property, using the correct syntax as described earlier, with the colon character (:) separating the address type from the address, and call the <b>Resolve</b> method. You need <b>Resolve</b> even though you have supplied the address, because it must be made into an object and given an entry identifier. </li>
<li>
Use an existing valid address entry, such as the Message object's <a href="oleobjis_2i3p.htm"><b>Sender</b></a> property, when you are replying to a message. Set the Recipient object's <a href="oleobjis_9gms.htm"><b>AddressEntry</b></a> property to an existing <a href="oleobjaf_6n1w.htm">AddressEntry</a> object that is known to be valid. You do not need to call the <b>Resolve</b> method. </li>
</ul>
<p>
The following code fragment demonstrates these three kinds of addresses: </p>
<pre><code>' Function: Util_UsingAddresses 
' Purpose:  Set addresses three ways 
' See documentation topic: Using Addresses 
Function Util_UsingAddresses() 
Dim objNewMessage As Message   ' new message to add recipients to 
Dim objNewRecips As Recipients ' recipients of new message 
Dim strAddrEntryID As String   ' ID value from AddressEntry object 
Dim strName As String          ' Name from AddressEntry object 
 
On Error GoTo error_olemsg 
If objOneMsg Is Nothing Then 
    MsgBox "Must select a message" 
    Exit Function 
End If 
With objOneMsg.Recipients.Item(1).AddressEntry 
    strAddrEntryID = .ID 
    strName = .Name 
End With 
Set objNewMessage = objSession.Outbox.Messages.Add 
If objNewMessage Is Nothing Then 
    MsgBox "Unable to add a new message" 
    Exit Function 
End If 
Set objNewRecips = objNewMessage.Recipients 
 
' Add three recipients 
' 1. look up entry in address book specified by profile 
Set objOneRecip = objNewRecips.Add( _ 
                               Name:=strName, _ 
                               Type:=CdoTo) 
If objOneRecip Is Nothing Then 
    MsgBox "Unable to add recipient using display name" 
    Exit Function 
End If 
objOneRecip.Resolve ' this looks up the entry 
 
' 2. add a custom recipient 
Set objOneRecip = objNewRecips.Add( _ 
                               Address:="SMTP:someone@microsoft.com", _ 
                               Type:=CdoTo) 
If objOneRecip Is Nothing Then 
    MsgBox "Unable to add recipient using custom addressing" 
    Exit Function 
End If 
objOneRecip.Resolve ' assign entry identifier 
 
' 3. add an existing valid address entry object 
Set objOneRecip = objNewRecips.Add( _ 
                               entryID:=strAddrEntryID, _ 
                               Type:=CdoTo) 
If objOneRecip Is Nothing Then 
    MsgBox "Unable to add recipient using existing address entry" 
    Exit Function 
End If 
 
objNewMessage.Text = "Expect 3 different recipients" 
MsgBox ("Count = " &amp; objNewRecips.Count) 
' you can also call resolve for the whole collection 
' objNewRecips.Resolve (True) ' resolve all; show dialog 
 
objNewMessage.Subject = "Addressing test" 
objNewMessage.Update ' commit the message to storage in MAPI system 
objNewMessage.Send showDialog:=False 
Exit Function 
 
error_olemsg: 
MsgBox "Error " &amp; Str(Err) &amp; ": " &amp; Error$(Err) 
Exit Function 
 
End Function 
 </code></pre>
<h4>See Also</h4>
<p>
<a href="oletasks_86ex.htm">Changing an Existing Address Entry</a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Parameters</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_property_parameters"></a>Property Parameters</h1>
<p>
The CDO libraries interface with the Microsoft® Visual Basic® library and with the <b>IDispatch</b> interface. These interfaces define only methods and no properties. In order to expose properties on its objects, CDO implements all properties with accessor methods. A read/write property has corresponding <b>get</b> and <b>put</b> methods defined for it. A read-only property has a <b>get</b> method but no <b>put</b> method. For the most part, these accessor methods are transparent to a Visual Basic programmer. </p>
<p>
The <b>get</b> and <b>put</b> methods are all defined with optional parameters. These are used by a Visual Basic programmer with properties that have parameterized syntax, such as the <a href="oleobjaf_3vbz.htm"><b>Fields</b></a> property of the <a href="oleobjaf_0x10.htm">Attachment</a> object or the <a href="renobj_40nz.htm"><b>Item</b></a> property of the <a href="renobj_5ub8.htm">Views</a> collection. In most properties other than <b>Fields</b> and <b>Item</b>, the syntax does not make use of any parameters. They can be supplied but will be ignored: </p>
<pre><code>stFoldID = obFolder.ID(3, size, "All these parameters are ignored") 
 </code></pre>
<p>
Because of the possibility of parameters, parentheses immediately following a property name are always construed to enclose a parameter list. </p>
<p>
Array properties pose a special problem in this connection. A programmer intuitively expects to select a particular element of an array by supplying an index immediately after the array name. This works normally when the variable has been dimensioned as an array: </p>
<pre><code>Dim arValues (100) As Integer ' array of 100 integers 
  ' ... 
  sum = 0 
  For i = 1 To 100 
    sum = sum + arValues(i) 
  Next i 
 </code></pre>
<p>
But when the variable is a CDO property, the first set of parentheses after its name is taken as holding one or more syntactic parameters. If the property has an array data type, such as the <a href="oleobjis_63q7.htm"><b>Categories</b></a> property of the <a href="oleobjis_2p10.htm">Message</a> object, a second set of parentheses must be added to specify the array index: </p>
<pre><code>stPrincipalCategory = obMessage.Categories()(1) 
 </code></pre>
<p>
This applies both when reading an array property and when writing it: </p>
<pre><code>obMessage.Categories()(index) = "" 
 </code></pre>
<p>
However, no parentheses are needed if the entire array is participating in an operation, because no index needs to be specified and there is no need for any parentheses at all: </p>
<pre><code>Dim stCategories (10) As String 
  obMessage.Categories = stCategories ' full array copy 
 </code></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

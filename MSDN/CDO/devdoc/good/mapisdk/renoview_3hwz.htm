<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDO Rendering Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_cdo_rendering_objects"></a>CDO Rendering Objects</h1>
<p>
Objects in the CDO Rendering Library can be classified as <i>top-level objects</i>, <i>child objects</i>, and <i>collections</i>. A top-level object is one that can be created directly by your code, without having to derive it from any other object. A child object is one that must be derived from another object, for example by an <b>Add</b> method. A collection is a group of objects of the same type. </p>
<p>
Currently, the top-level CDO Rendering objects are the <a href="renobj_8kac.htm">RenderingApplication</a>, <a href="renobj_86no.htm">ContainerRenderer</a>, and <a href="renobj_4wxg.htm">ObjectRenderer</a> objects. Other objects are accessible only through these top-level objects. </p>
<p>
You can create a RenderingApplication object either through early binding: </p>
<pre><code>Dim objRendApp As RenderingApplication 
      Set objRendApp = CreateObject ("AMHTML.Application") 
 </code></pre>
<p>
or through late binding: </p>
<pre><code>Dim objRendApp As Object 
      Set objRendApp = CreateObject ("AMHTML.Application") 
 </code></pre>
<p>
and then later on use the <a href="renobj_0fdr.htm"><b>CreateRenderer</b></a> method to create specific rendering objects. </p>
<p>
C/C++ programmers use globally unique identifiers (GUIDs) for these objects, defined in the type library for the CDO Rendering Library. The following table lists the GUIDs for the top-level objects accessible to C/C++ programmers. Note the close relationship; only the fourth of the 16 bytes differs among the GUIDs. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>CDO Rendering Library object </th>
<th align=left width=65%> <br>
GUID </th>
</tr>
<tr valign=top>
<td width=35%><a href="renobj_8kac.htm">RenderingApplication</a> </td>
<td width=65%>{BC00F701-31AC-11D0-B5F1-00AA00BF3382} </td>
</tr>
<tr valign=top>
<td width=35%></td>
<td width=65%></td>
</tr>
<tr valign=top>
<td width=35%><a href="renobj_86no.htm">ContainerRenderer</a> </td>
<td width=65%>{BC00F703-31AC-11D0-B5F1-00AA00BF3382} </td>
</tr>
<tr valign=top>
<td width=35%><a href="renobj_4wxg.htm">ObjectRenderer</a> </td>
<td width=65%>{BC00F702-31AC-11D0-B5F1-00AA00BF3382} </td>
</tr>
</table><br>
<p>
All CDO Rendering Library objects can be considered as relative to a <a href="renobj_8kac.htm">RenderingApplication</a> object. A rendering application's immediate child objects are the <a href="renobj_86no.htm">ContainerRenderer</a> object and the <a href="renobj_4wxg.htm">ObjectRenderer</a> object. These have their own child objects, which in turn have child objects, and so on. See the <a href="renobj_08q4.htm">Rendering Object Model</a> diagram for the logical hierarchy of the CDO Rendering Library. </p>
<p>
The object hierarchy is important because it determines the correct syntax to use in your Microsoft® Visual Basic® applications. In your Visual Basic code, the relationship between a parent object and a child object is denoted by the left-to-right sequence of the objects in the Visual Basic statement. For example, </p>
<pre><code>objContRend.Formats.Item(2) 
 </code></pre>
<p>
refers to the second Format object in the Formats collection of the current ContainerRenderer object. </p>
<p>&nbsp;</p></body>
</HTML>

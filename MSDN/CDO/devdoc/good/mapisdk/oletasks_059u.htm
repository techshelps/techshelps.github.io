<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving a Message to Another Folder</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_moving_a_message_to_another_folder"></a>Moving a Message to Another Folder  <a href="oletasks_4ofn.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The procedure documented in this section demonstrates, first, the old way to move message properties using the <a href="oleobjis_1qd0.htm">Messages</a> collection's <a href="oleobjis_2l66.htm"><b>Add</b></a> method and the <a href="oleobjis_2p10.htm">Message</a> object's <a href="oleobjis_410l.htm"><b>Delete</b></a> method, and then how to take advantage of the newer <a href="oleobjis_6wnz.htm"><b>MoveTo</b></a> method of the Message object. </p>
<p>
<b>Note</b>  With CDO Library version 1.0, the Message object's <a href="oleobjis_2i3p.htm"><b>Sender</b></a> property and other read-only properties of the Message object were not preserved during the first part of the procedure in this section. To preserve these properties using the old procedure, you had to append their text fields to read/write properties, such as the Message object's <a href="oleobjis_0e5h.htm"><b>Text</b></a> property. </p>
<p>
With the <b>MoveTo</b> method, every property that is set on a Message object is automatically moved to the new Message object, regardless of whether it has read-only or read/write access. The access of every property is also preserved across the copy. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To move a message from one folder to another</h5>
<ol>
<li>
Obtain the source message that you want to move. </li>
<li>
Call the destination folder's Messages collection's <b>Add</b> method, supplying the source message properties as parameters. <p>
– Or –
</li>
<li value=2>
Call the source Message object's <b>MoveTo</b> method. </li>
<li>
Call the new Message object's <a href="oleobjis_3wh1.htm"><b>Update</b></a> method to save all new information in the MAPI system. </li>
<li>
(Only necessary if you used the old <b>Add</b> and copy procedure) Call the source message's <b>Delete</b> method to delete the original message from its folder. </li>
</ol>
<p>
For more details on this procedure and a sample code fragment, see <a href="oletasks_8y0i.htm">Copying a Message to Another Folder</a>. The comment lines at the end of the first copy procedure contain the call to delete the original message: </p>
<pre><code>' If MOVING a message to another folder, delete the original message: 
objThisMsg.Delete 
' Move operation implies that the original message is removed 
 </code></pre>
<p>
This <a href="oleobjis_410l.htm"><b>Delete</b></a> call is not necessary if the <a href="oleobjis_6wnz.htm"><b>MoveTo</b></a> method is used. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Logging On and Off (Java)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_logging_on_and_off_java_"></a>Logging On and Off (Java)  <a href="olejavap_5sc3.htm"><img src="images/group.gif" border=0></a></h2>
<p>
This example is a standalone application, not an applet. It is a complete program, including the importation declarations and the <b>main()</b> function. It demonstrates the basic framework of a Java program that accesses CDO Library objects. The <b>main()</b> function creates a <a href="oleobjis_57w4.htm">Session</a> object, logs on to it, and logs off, with minimal error checking. </p>
<pre><code>import cdo.*; 
import com.ms.com.*; 
 
public class Sample0 
{ 
  public static void main(String args[]) 
  { 
    // Create a messaging session (call the class factory). 
    _Session session = (_Session) new Session(); 
 
    Variant v = new Variant(); 
    Variant profileName = new Variant(); 
    profileName.putString( "MyProfile" ); 
    v.noParam(); 
 
    // Log on. 
    try 
    { 
      session.Logon( profileName, v, v, v, v, v, v ); 
    } 
    catch( Exception e ) 
    { 
      System.out.println( "Logon failed!" ); 
    } 
 
    // The logon was successful; now do desired processing. 
 
    // Now we will log off. 
    try 
    { 
      session.Logoff(); 
    } 
    catch( Exception e ) 
    { 
      System.out.println( "Logoff failed!" ); 
    } 
  } 
} 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Delete Method (AddressEntry Object)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_delete_method_addressentry"></a>Delete Method (AddressEntry Object)  <a href="oleobjaf_6n1w.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Delete</b> method removes the AddressEntry object from the <a href="oleobjaf_7qd0.htm">AddressEntries</a> collection. </p>
<h4>Syntax </h4>
<p>
<i>objAddressEntry</i>.<b>Delete( ) </b></p>
<h4>Remarks </h4>
<p>
The <b>Delete</b> method performs an irreversible operation on the collection. It calls <b>Release</b> on the collection's reference to the AddressEntry object. If you have another reference to the address entry, you can still access its properties and methods, but you can never again associate it with any collection because the <a href="oleobjaf_0j1b.htm"><b>Add</b></a> method always creates a new object. You should <b>Set</b> your reference variable either to <b>Nothing</b> or to another address entry. </p>
<p>
The final <b>Release</b> on the AddressEntry object takes place when you assign your reference variable to <b>Nothing</b>, or when you call <b>Delete</b> if you had no other reference. At this point the object is removed from memory. Attempted access to a released object results in an error return of <b>CdoE_INVALID_OBJECT</b>. </p>
<p>
The action of the <b>Delete</b> method is permanent, and the AddressEntry object cannot be restored to the collection. Before calling <b>Delete</b>, your application can prompt the user to verify whether the address entry should be permanently deleted. </p>
<p>
When you delete a member of a collection, the collection is immediately refreshed, meaning that its <b>Count</b> property is reduced by one and its members are reindexed. To access a member following the deleted member, you must use its new index value. For more information, see <a href="olemistk_7ini.htm">Looping Through a Collection</a>. </p>
<p>
The user must have the appropriate permission to <a href="oleobjaf_0j1b.htm"><b>Add</b></a>, <b>Delete</b>, or <a href="oleobjaf_6zqx.htm"><b>Update</b></a> an AddressEntry object. Most users have this permission only for their personal address book (PAB). </p>
<p>
The CDO Library does not support addition, deletion, or modification of members of a distribution list (DL) on the global address list (GAL). </p>
<p>
You can delete all the address entries in the <a href="oleobjaf_7qd0.htm">AddressEntries</a> collection by calling the collection's <a href="oleobjaf_7ufz.htm"><b>Delete</b></a> method. The ability to delete any address entry depends on the permissions granted to the user. The <b>Delete</b> method returns an error code if called with insufficient permissions. </p>
<h4>Example </h4>
<p>
This code fragment illustrates the two situations previously explained. The <b>Set</b> statement calls <b>AddRef</b> on the first AddressEntry object. That reference survives the call to <b>Delete</b> and has to be reassigned. The second AddressEntry object is deleted without creating another reference, and no other action is necessary. </p>
<pre><code>' assume valid AddressList object 
Set objAddressEntry = objAddressList.AddressEntries.Item(1) 
objAddressEntry.Delete ' still have a reference from Set statement 
' ... other operations on objAddressEntry possible but pointless ... 
Set objAddressEntry = Nothing ' necessary to remove reference 
' ... 
objAddressList.AddressEntries.Item(2).Delete ' no reference to remove 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Viewing MAPI Properties</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_viewing_mapi_properties"></a>Viewing MAPI Properties  <a href="oletasks_4ofn.htm"><img src="images/group.gif" border=0></a></h1>
<p>
You can use a feature of the CDO Library's <a href="oleobjaf_0yt0.htm">Fields</a> collection to view the values of MAPI properties. </p>
<p>
The Fields collection's <a href="oleobjaf_39ym.htm"><b>Item</b></a> property allows you to specify the actual <i>property tag</i> value as an identifier. The MAPI property tag is a 32-bit unsigned integer that contains the property identifier in its high-order 16 bits and the property type (its underlying data type) in the low-order 16 bits. </p>
<p>
<b>Note</b>  You can only use the MAPI property tag on 32-bit platforms. This method of access is not available on any other platform. </p>
<p>
The CDO Library also supports <i>multivalued</i> properties, or properties that represent arrays of values. A multivalued property appears to the Microsoft® Visual Basic® application as a variant array. You can use the <b>For ... Next</b> construction or <b>For Each</b> statement to access individual array entries. </p>
<p>
<b>Note</b>  Do not mix data types within an OLE variant array that you are going to use with the CDO Library. Unlike variant array members, every member of a MAPI multivalued property must be of the same type. Setting mixed types in a variant array and presenting it to MAPI as a multivalued property results in MAPI errors. </p>
<p>
The CDO Library works with three types of message properties: 
<ul>
<li>
Standard MAPI properties with property tags defined as constants by the CDO Library, such as <b>CdoPR_MESSAGE_CLASS</b>. </li>
<li>
Standard MAPI properties not defined by the CDO Library. The Object Browser can tell you if the property you want to access is defined. </li>
<li>
Custom properties created and named by the application. </li>
</ul>
<p>
The <a href="oleobjaf_0yt0.htm">Fields</a> collection exposes standard MAPI properties not defined by the CDO Library and custom properties created and named by the application. The <a href="oleobjaf_39ym.htm"><b>Item</b></a> property selects an individual <a href="oleobjaf_8lh0.htm">Field</a> object either by its MAPI property tag or by its custom name. </p>
<p>
Although the Field object provides a <a href="oleobjaf_0mec.htm"><b>Delete</b></a> method, some standard MAPI properties, such as those created by MAPI system components, cannot be deleted. </p>
<p>
MAPI stores all properties that represent date and time information using Greenwich Mean Time (GMT). The CDO Library converts these properties so that the values appear to the user in local time. </p>
<p>
For definitions and details on all standard MAPI properties, see the <i>MAPI Programmer's Reference</i>. </p>
<pre><code>' Function: Fields_Selector 
' Purpose: View a MAPI property by supplying a property tag value as 
'          the Item value 
' See: Item property (Fields collection) 
Function Fields_Selector() 
Dim lValue As Long 
Dim strMsg As String 
 
On Error GoTo error_olemsg 
 
If objFieldsColl Is Nothing Then 
    MsgBox "Must first select a Fields collection" 
    Exit Function 
End If 
' you can provide a dialog here so users enter MAPI proptags, 
' or select property names from a list; for now, hard-coded value 
lValue = &amp;H001A001E ' VB4.0: lValue = CdoPR_MESSAGE_CLASS 
' &amp;H001A = PR_MESSAGE_CLASS; &amp;H001E = PT_TSTRING 
' high-order 16 bits = property ID, low-order = property type 
Set objOneField = objFieldsColl.Item(lValue) 
If objOneField Is Nothing Then 
    MsgBox "Could not get the Field using the value " &amp; lValue 
    Exit Function 
Else 
    strMsg = "Used the value " &amp; lValue &amp; " to access the property " 
    strMsg = strMsg &amp; "PR_MESSAGE_CLASS: type = " &amp; objOneField.Type 
    strMsg = strMsg &amp; "; value = " &amp; objOneField.Value 
    MsgBox strMsg 
End If 
Exit Function 
 
error_olemsg: 
MsgBox "Error " &amp; Str(Err) &amp; ": " &amp; Error$(Err) 
Resume Next 
 
End Function 
 </code></pre>
<h4>See Also</h4>
<p>
<a href="oletasks_0hlx.htm">Customizing a Folder or Message</a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Item Property (Patterns Collection)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_item_property_patterns_collection_"></a>Item Property (Patterns Collection)  <a href="renobj_5q9g.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Item</b> property returns the specified <a href="renobj_7flg.htm">Pattern</a> object from the Patterns collection. Read-only. </p>
<h4>Syntax </h4>
<p>
<i>objPatternsColl</i>.<b>Item(</b><i>index</i><b>)</b> 
<dl>
<dt>
<i>index </i></dt>
<dd>
A short integer ranging from 1 to <i>objPatternsColl</i>.<b>Count</b>. 
</dd>
</dl>
<p>
The <b>Item</b> property is the default property of a Patterns collection, meaning that <i>objPatternsColl</i><b>(</b><i>index</i><b>)</b> is syntactically equivalent to <i>objPatternsColl</i>.<b>Item(</b><i>index</i><b>)</b> in Microsoft® Visual Basic® code. </p>
<h4>Data Type </h4>
<p>
Pattern object </p>
<h4>Remarks </h4>
<p>
The <b>Item</b> property works like an accessor property. </p>
<p>
If the specified Pattern object is not found in the collection, the <b>Item</b> property returns <b>Nothing</b>. </p>
<p>
Although the <b>Item</b> property itself is read-only, the <a href="renobj_7flg.htm">Pattern</a> object it returns can be accessed in the normal manner, and its properties retain their respective read/write or read-only accessibility. </p>
<h4>Example </h4>
<p>
This code fragment shows the <a href="renobj_1jz3.htm"><b>Count</b></a> and <b>Item</b> properties working together: </p>
<pre><code>' Put all pattern values in a collection into a string array 
Dim strItemValue(100) As String 
Dim i As Integer ' loop counter 
' error handling omitted from this fragment ... 
For i = 1 To objPatternsColl.Count Step 1 
&nbsp;&nbsp;&nbsp;&nbsp;strItemValue(i) = objPatternsColl.Item(i).Value 
&nbsp;&nbsp;&nbsp;&nbsp;' or = objPatternsColl(i).Value since Item is default property 
&nbsp;&nbsp;&nbsp;&nbsp;If 100 = i Then ' max size of string array 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit Function 
&nbsp;&nbsp;&nbsp;&nbsp;End If 
Next i 
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

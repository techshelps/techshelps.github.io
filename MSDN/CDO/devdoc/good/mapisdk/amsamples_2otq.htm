<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Session_OnEnd Function</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_olemsg_the_session_onend_function"></a>The Session_OnEnd Function</h3>
<p>
The <b>Session_OnEnd</b> function cleans up objects when the user session ends, whether because of a time-out or a user exit, or when Active Server Pages abandons a session.</p>
<p>
Both the <b>Session_OnStart</b> and <b>Session_OnEnd</b> functions are in response to specific user requests coming in from a browser. The first time a new user requests an .asp file, <b>Session_OnStart </b>is called. When <b>Session_OnStart</b> is finished, the application's first .asp file starts to process. <b>Session_OnEnd</b> is called either when the session times out or when there is a script call that tells Active Server Pages to abandon the session, such as when a user clicks <b>Log Off</b> in <a href="msowa_0ppv.htm">Microsoft Outlook Web Access</a>.</p>
<p>
If you rewrite the <b>Session_OnEnd</b> function, make sure you return all session variables to <b>Empty</b> or to <b>Nothing</b> (for object variables).</p>
<h4>Using the Impersonate Method</h4>
<p>
Impersonation is used in the <b>Session_OnEnd</b> function to ensure that a CDO object is in the right security context when the user session ends.</p>
<p>
At logon time, the <b>ImpID</b> property is read. This property returns an impersonation handle that can be subsequently used in <b>Session_OnEnd</b>. The handle is stored in the Session object:</p>
<pre><code>Session("hImp") = objRenderApp.ImpID
</code></pre>
<p>
In the <b>Session_OnEnd</b> function the <b>Impersonate</b> method is used to impersonate a user context.</p>
<pre><code>hImp = Session("hImp")
objRenderApp.Impersonate(hImp)
</code></pre>
<p>
The call</p>
<pre><code>objRenderApp.Impersonate(0)
</code></pre>
<p>
reverts the session to its initial state, that of an empty session. This must occur before the session terminates. </p>
<p>
The Application object may have session handles that refer to stored objects (such as a folder, a message, or a renderer). In this case, you need to store an impersonation handle in the Application object so that the application is in the right security context when the application ends in <b>Application_OnEnd</b>.</p>
<p>
This applies to the Session object as well; if you store any data in the Session object, you must also store an impersonation handle in the Session object so that you can destroy the right objects in the right security context in <b>Session_OnEnd</b>.</p>
<p>&nbsp;</p></body>
</HTML>

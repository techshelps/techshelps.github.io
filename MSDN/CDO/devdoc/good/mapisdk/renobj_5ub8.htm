<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Views Collection Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_views_collection_object"></a>Views Collection Object</h1>
<p>
The Views collection object contains one or more views for a container object. </p>
<h4>At a Glance </h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Specified in type library: </td>
<td width=52%>CDOHTML.DLL </td>
</tr>
<tr valign=top>
<td width=48%>First available in: </td>
<td width=52%>CDO Rendering Library version 1.1 </td>
</tr>
<tr valign=top>
<td width=48%>Parent objects: </td>
<td width=52%><a href="renobj_86no.htm">ContainerRenderer</a> </td>
</tr>
<tr valign=top>
<td width=48%>Child objects: </td>
<td width=52%><a href="renobj_6b3o.htm">CalendarView</a> <br>
<a href="renobj_7kfo.htm">TableView</a> </td>
</tr>
<tr valign=top>
<td width=48%>Default property: </td>
<td width=52%><a href="renobj_40nz.htm"><b>Item</b></a> </td>
</tr>
</table><br>
<p>
An Views collection supports count and index values that let you access an individual TableView object through the <b>Item</b> property. The Views collection also supports the Microsoft® Visual Basic® <b>For Each</b> statement. </p>
<h4>Properties </h4>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=32%><br>
Name </th>
<th align=left width=18%>Available since version </th>
<th align=left width=32%> <br>
Type </th>
<th align=left width=18%> <br>
Access </th>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=18%></td>
<td width=32%></td>
<td width=18%></td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_7dlr.htm"><b>Class</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Long </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_5lcv.htm"><b>Count</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Long </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_40nz.htm"><b>Item</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>TableView object </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_4g7z.htm"><b>Parent</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>ContainerRenderer object </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=18%></td>
<td width=32%></td>
<td width=18%></td>
</tr>
</table><br>
<h4>Methods </h4>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=32%><br>
Name </th>
<th align=left width=18%>Available since version </th>
<th align=left width=50%> <br>
Parameters </th>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_2hnj.htm"><b>Add</b></a> </td>
<td width=18%>1.1 </td>
<td width=50%><i>bstrName</i> as <b>String</b>, <br>
(optional) <i>varClass</i> as <b>Long</b>, <br>
(optional) <i>varSortBy</i> as <b>Variant</b>, <br>
(optional) <i>varSortAscending</i> as <b>Boolean</b> </td>
</tr>
</table><br>
<h4>Remarks </h4>
<p>
The Views collection can contain a variety of different classes of view objects. The classes currently implemented are represented by the <a href="renobj_6b3o.htm">CalendarView</a> and <a href="renobj_7kfo.htm">TableView</a> objects. </p>
<p>
The Views collection is used by a <a href="renobj_86no.htm">ContainerRenderer</a> object to render a container object, such as an address book container or a folder. The Views collection comes into being when a rendering application sets the container renderer's <a href="renobj_555r.htm"><b>DataSource</b></a> property to the container object. The collection is released when the parent ContainerRenderer object is released, or when a new container object is set in the <b>DataSource</b> property. </p>
<p>
The classes of views that can be held in a Views collection and rendered by a ContainerRenderer object are as follows: </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>View class </th>
<th align=left width=59%>View source container object </th>
</tr>
<tr valign=top>
<td width=41%><a href="renobj_6b3o.htm">CalendarView</a> </td>
<td width=59%><a href="oleobjis_1qd0.htm">Messages</a> collection containing <a href="oleobjaf_5flg.htm">AppointmentItem</a> objects </td>
</tr>
<tr valign=top>
<td width=41%><a href="renobj_7kfo.htm">TableView</a> </td>
<td width=59%><a href="oleobjaf_7qd0.htm">AddressEntries</a> collection, <a href="oleobjaf_1nec.htm">Folders</a> collection, <a href="oleobjis_1qd0.htm">Messages</a> collection, or <a href="oleobjis_3xro.htm">Recipients</a> collection </td>
</tr>
<tr valign=top>
<td width=41%></td>
<td width=59%></td>
</tr>
</table><br>
<p>
The various view objects initially in the collection are those that were already generated externally to the rendering application. These views persist in the underlying store, typically a directory or message store. New views can be defined and contributed to the collection using the <a href="renobj_2hnj.htm"><b>Add</b></a> method, but they do not persist after the collection is released. </p>
<p>
The view to be applied to the container object is specified in the container renderer's <a href="renobj_93z3.htm"><b>CurrentView</b></a> property. A newly instantiated Views collection always has a default current view. This default can be specified by the store underlying the container object. If it is not specified, the CDO Rendering Library sets it to the first view in the collection. </p>
<p>
Changing the current view causes a new <a href="oleobjaf_7qd0.htm">AddressEntries</a>, <a href="oleobjaf_1nec.htm">Folders</a>, <a href="oleobjis_1qd0.htm">Messages</a>, or <a href="oleobjis_3xro.htm">Recipients</a> collection to be instantiated. This collection contains only the items that pass the restriction specified by the new view. The <a href="oleobjaf_6n1w.htm">AddressEntry</a>, <a href="oleobjaf_4u2c.htm">Folder</a>, <a href="oleobjis_2p10.htm">Message</a>, or <a href="oleobjis_9cfo.htm">Recipient</a> objects in the collection are sorted as specified by the view. If a folder view is categorized, <a href="oleobjis_852s.htm">GroupHeader</a> objects appear in the collection along with the messages. </p>
<p>
The initial filter on the AddressEntries, Folders, Messages, or Recipients collection is inherited from the view's restriction. It can be used without modification, but it cannot be read or changed by the rendering application. Any attempt to read a property on an inherited <a href="oleobjaf_10ac.htm">AddressEntryFilter</a> or <a href="oleobjis_4gxg.htm">MessageFilter</a> object results in an error return. Writing any property on an inherited filter disinherits it and refreshes the collection. This means that the collection is reinstantiated with a new filter specifying only the property just written. This new filter, however, is no longer inherited, and the application can read its properties and set additional restrictions within it. </p>
<p>&nbsp;</p></body>
</HTML>

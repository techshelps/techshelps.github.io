<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating and Sending a Message (Java)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_olemsg_creating_and_sending_a_message_java_"></a>Creating and Sending a Message (Java)  <a href="olejavap_5sc3.htm"><img src="images/group.gif" border=0></a></h2>
<p>
This example is a standalone application, not an applet. It is a complete program demonstrating the basic procedures for initiating a CDO Library message. Within the framework of logging on to and off from a session, it creates a <a href="oleobjis_2p10.htm">Message</a> object, sets its requisite properties, and sends it to its recipients through the MAPI system. </p>
<pre><code>import cdo.*; 
import com.ms.com.*; 
import java.io.*; 
 
public class Sample1 
{ 
  public static void main(String args[]) 
  { 
    // Call the class factory. 
    _Session session = (_Session) new Session(); 
 
    Variant nullParam = new Variant(); 
    nullParam.noParam(); 
    Messages messages = null; 
 
    try    // First, log on. 
    { 
      Variant profileName = new Variant(); 
      profileName.putString( "MyProfile" ); 
      session.Logon( profileName, nullParam, nullParam, nullParam, 
                                  nullParam, nullParam, nullParam );
    } 
    catch( Exception e ) 
    { 
      System.out.println( "Logon failed!" ); 
      e.printStackTrace(); 
    } 
 
    try    // Get the messages collection in the outbox. 
    { 
      Folder outBox = (Folder) session.getOutbox().getDispatch(); 
      messages = (Messages) outBox.getMessages().getDispatch(); 
    } 
    catch( Exception e ) 
    { 
      System.out.println( "Failed to get the outbox messages collection!" ); 
      e.printStackTrace(); 
    } 
 
    try    // Now create, populate, and send the message. 
    { 
      // Create a new message in the outbox. 
      Message newMsg = (Message) messages.Add( nullParam, nullParam, 
                                nullParam, nullParam ).getDispatch(); 
 
      // Set the subject of the new message. 
      Variant subject = new Variant(); 
      subject.putString( "This is a message from Java!" ); 
      newMsg.putSubject( subject ); 
 
      // Set the text (body) of the new message. 
      Variant text = new Variant(); 
      text.putString( "This is the message text." ); 
      newMsg.putText( text ); 
 
      // Get the Recipients collection. 
      Recipients recips = (Recipients) newMsg.getRecipients().getDispatch(); 
 
      // Create a new recipient in the Recipients collection. 
      Recipient recip = (Recipient) recips.Add( nullParam, nullParam, 
                                nullParam, nullParam ).getDispatch(); 
 
      // Set the name on the new recipient. 
      Variant name = new Variant(); 
      name.putString( "somebody" ); 
      recip.putName( name ); 
 
      // Set the type on the new recipient. 
      Variant type = new Variant(); 
      type.putInt( 1 ); // "To" recipient 
      recip.putType( type ); 
 
      // Resolve the new recipient. 
      Variant showDialog = new Variant(); 
      showDialog.putBoolean( true ); 
      recip.Resolve( showDialog ); 
 
      // Make the new message permanent. 
      Variant refresh = new Variant(); 
      Variant makePermanent = new Variant(); 
      refresh.putBoolean( true ); 
      makePermanent.putBoolean( true ); 
      newMsg.Update( makePermanent, refresh ); 
 
      // Send the new message. 
      Variant saveCopy = new Variant(); 
      saveCopy.noParam(); 
      showDialog.noParam(); // already created under Resolve() 
      Variant wndHandle = new Variant(); 
      wndHandle.noParam(); 
      newMsg.Send( saveCopy, showDialog, wndHandle ); 
    } 
    catch( Exception e ) 
    { 
      System.out.println( "Failed to create/send a new message!" ); 
    } 
 
    try    // Finally, log off. 
    { 
      session.Logoff(); 
    } 
    catch( Exception e ) 
    { 
      System.out.println( "Logoff failed!" ); 
    } 
    System.out.println( "All done!" ); 
  } 
} 
 </code></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Looping Through a Collection</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_looping_through_a_collection"></a>Looping Through a Collection</h1>
<p>
A CDO collection is always refreshed immediately following an <b>Add</b> or <b>Delete</b> operation on any of its members. This means that the collection's <b>Count</b> property is incremented or decremented, and all the members following the point of insertion or deletion are reindexed. To access one of these members, you must use its new index value. This is easy to forget if you are looping through the collection. </p>
<p>
Consider this code fragment, intended to delete every member of a <a href="oleobjis_1qd0.htm">Messages</a> collection: </p>
<pre><code>Dim colMsgs As Messages 
  ... 
  size = colMsgs.Count 
  For i = 1 to size 
    colMsgs.Item(i).Delete 
  Next i 
 </code></pre>
<p>
When <i>i</i> = 1, the first <a href="oleobjis_2p10.htm">Message</a> object's <a href="oleobjis_410l.htm"><b>Delete</b></a> method is called and that message is deleted. The Messages collection's <a href="oleobjis_76qn.htm"><b>Count</b></a> property is immediately decremented by one, and the Message object that had been the second message in the collection now becomes the first. Therefore, when <i>i</i> = 2, the second message in the reindexed collection, that is, the message that was originally third in the collection, is deleted, and the message that was originally fourth now becomes second. </p>
<p>
The effect of this loop is to delete all the odd-numbered members of the original collection. Once <i>i</i> has been incremented past half the value of <i>size</i>, it becomes too large for the reindexed items, and a value of <b>Nothing</b> is returned for the remaining accesses. </p>
<p>
The Microsoft® Visual Basic® <b>For Each</b> statement cannot be used as a workaround, because it is internally implemented as </p>
<pre><code>For i = 1 to .Count 
    .Item(i). 
  Next i 
 </code></pre>
<p>
which still exhibits the skipping behavior, although it does at least reread the <b>Count</b> property with each passage of the loop, so that it avoids going past the end of the collection. </p>
<p>
A loop based on <b>GetFirst</b> and <b>GetNext</b> also encounters the same problem. The collection is reindexed following a <b>Delete</b> call, but the internal pointer is not decremented, so it now points to the member after the deleted member. When <b>GetNext</b> is called, it increments the pointer and returns the member following the desired one. </p>
<p>
A safer approach is to delete the first message in every iteration. This loop has the effect intended by the erroneous code fragment: </p>
<pre><code>size = colMsgs.Count 
  For i = 1 to size 
    colMsgs.Item(1).Delete 
  Next i 
 </code></pre>
<p>
This loop also processes the messages in forward order, that is, starting with the first and ending with the last. Of course, if you wish to delete everything in the collection, the simplest alternative is to use the <a href="oleobjis_3twu.htm"><b>Delete</b></a> method of the <a href="oleobjis_1qd0.htm">Messages</a> collection itself. </p>
<p>
If you need to examine all the members of a collection and selectively delete certain ones, you can iterate backward to avoid the problem of skipping over the member following a deleted member. This code fragment loops backward without using <code>Step </code>–<code>1</code>, because <b>Step</b> is not available in VBScript: </p>
<pre><code>size = colMsgs.Count 
  For i = 1 to size 
    Set objMsg = colMsgs.Item(size - i + 1) 
    If objMsg.TimeExpired &lt;= Now Then 
      objMsg.Delete 
    End If 
  Next i 
 </code></pre>
<p>
Some collections, such as <a href="renobj_78ac.htm">Columns</a>, allow a new member to be inserted following a specified existing member instead of being added at the end. If you insert a <a href="renobj_3qyc.htm">Column</a> object into the middle of the collection using its <a href="renobj_63mn.htm"><b>Add</b></a> method, you must take into account the new <a href="renobj_6hgf.htm"><b>Index</b></a> values of the columns that come after the new column. </p>
<p>
However, the <b>Add</b> method of any sortable collection can effectively insert a new member before the end. An <a href="oleobjaf_7qd0.htm">AddressEntries</a> collection, for example, is normally sorted on the <a href="oleobjaf_6lfd.htm"><b>Name</b></a> property. If you call <a href="oleobjaf_0j1b.htm"><b>Add</b></a> with a display name lying somewhere within the alphabet, the <a href="oleobjaf_6n1w.htm">AddressEntry</a> objects that follow it alphabetically are all reindexed. </p>
<p>&nbsp;</p></body>
</HTML>

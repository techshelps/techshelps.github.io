<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Item Property (Messages Collection)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_item_property_messages_collection_"></a>Item Property (Messages Collection)  <a href="oleobjis_1qd0.htm"><img src="images/group.gif" border=0></a></h1>
<p>
The <b>Item</b> property returns a single <a href="oleobjaf_5flg.htm">AppointmentItem</a>, <a href="oleobjis_852s.htm">GroupHeader</a>, <a href="oleobjis_4kac.htm">MeetingItem</a>, or <a href="oleobjis_2p10.htm">Message</a> object from the Messages collection. Read-only. </p>
<h4>Syntax </h4>
<p>
<i>objMsgColl</i>.<b>Item(</b><i>index</i><b>)<i> </i></b></p>
<p>
<i>objMsgColl</i>.<b>Item(</b><i>searchValue</i><b>)<i> </i></b>
<dl>
<dt>
<i>index </i></dt>
<dd>
A long integer ranging from 1 to the size of the Messages collection. </dd>
<dt>
<i>searchValue </i></dt>
<dd>
A string used to search the Messages collection starting at the current position. The search returns the next Message object having the current sorting property greater than or equal to the <i>searchValue</i> string. 
</dd>
</dl>
<p>
The <b>Item</b> property is the default property of a Messages collection, meaning that <i>objMsgColl</i><b>(</b><i>index</i><b>)</b><i> </i>is syntactically equivalent to <i>objMsgColl</i>.<b>Item(</b><i>index</i><b>)</b><i> </i>in Microsoft® Visual Basic® code. </p>
<h4>Data Type </h4>
<p>
Object (GroupHeader or Message) </p>
<h4>Remarks </h4>
<p>
Programmers needing to access individual objects in a large collection are strongly advised to use the Visual Basic <b>For Each</b> statement or the <b>Get</b> methods, particularly <a href="oleobjis_8fce.htm"><b>GetFirst</b></a> and <a href="oleobjis_399q.htm"><b>GetNext</b></a>. </p>
<p>
The <b>Item(</b><i>index</i><b>)</b> syntax returns the AppointmentItem, GroupHeader, MeetingItem, or Message object at the indicated position in the collection. It can be used in an indexed loop, such as the <b>For ... Next</b> construction in Visual Basic. The first item in the collection has an index of 1. </p>
<p>
If you are accessing a Messages collection instantiated by a CDO rendering application, the collection may come from a calendar folder, or there may be a grouped view applied to the folder. Therefore you can get <a href="oleobjaf_5flg.htm">AppointmentItem</a>, <a href="oleobjis_852s.htm">GroupHeader</a>, and <a href="oleobjis_4kac.htm">MeetingItem</a> objects returned as well as <a href="oleobjis_2p10.htm">Message</a> objects. Because of this, you should declare the Visual Basic variable being set to the <b>Item</b> property to be an <b>Object</b> rather than a Message, and you should also test the <a href="oleobjaf_3a1r.htm"><b>Class</b></a> property of each returned object to see if it is an appointment, group header, meeting, or message: </p>
<pre><code>Dim objMember As Object ' could get one of several classes 
  ' collMessages is instantiated from a rendering application 
  ' assume collMessages valid 
  ' ... 
  For Each objMember in collMessages ' collection from a rendering 
    If objMember.Class = CdoMsg ' exclude other classes 
      ' we have a Message object 
    End If 
  Next 
 </code></pre>
<p>
For more information on using the <b>Count</b> and <b>Item</b> properties in a large collection, see the example in the <a href="oleobjis_76qn.htm"><b>Count</b></a> property. </p>
<p>
The <b>Item(</b><i>searchValue</i><b>)</b> syntax returns the next Message object whose current sorting property is greater than or equal to the string specified by <i>searchValue</i>. This syntax only applies when the Messages collection contains Message objects. </p>
<p>
The <i>searchValue</i> syntax starts its search at the current position and retrieves only messages and not group headers. Searching is based on the current sort order of the collection. The default sort property for a Messages collection is the <a href="oleobjis_7y1x.htm"><b>TimeReceived</b></a> property of the collection's <a href="oleobjis_2p10.htm">Message</a> objects. If you want to use the <b>Item(</b><i>searchValue</i><b>)</b> syntax to search the collection on another property, for example a message subject, you should first call the <a href="oleobjis_5icu.htm"><b>Sort</b></a> method specifying the <a href="oleobjis_7411.htm"><b>Subject</b></a> property. </p>
<p>
<b>Note</b>  The <b>Item(</b><i>searchValue</i><b>)</b> syntax uses the <b>IMAPITABLE::FindRow</b> method, which performs a search dependent on the current sort order of the table underlying the collection. Not all tables are sorted alphabetically. If your most recent sort order is nonalphabetic, you should access the messages using the <b>Item(</b><i>index</i><b>)</b> syntax. This applies, for example, to messages in Microsoft Exchange Public Folders, which are held in an order determined by the currently applied view. </p>
<p>
For more information on tables, bookmarks, restrictions, and sort and search orders, see the <i>MAPI Programmer's Reference</i>. </p>
<p>
Although the <b>Item</b> property itself is read-only, the <a href="oleobjaf_5flg.htm">AppointmentItem</a>, <a href="oleobjis_852s.htm">GroupHeader</a>, <a href="oleobjis_4kac.htm">MeetingItem</a>, or <a href="oleobjis_2p10.htm">Message</a> object it returns can be accessed in the normal manner, and its properties retain their respective read/write or read-only accessibility. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TableView Object</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_olemsg_tableview_object"></a>TableView Object</h1>
<p>
The TableView object represents a tabular view of an address book container or a folder. </p>
<h4>At a Glance </h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=48%>Specified in type library: </td>
<td width=52%>CDOHTML.DLL </td>
</tr>
<tr valign=top>
<td width=48%>First available in: </td>
<td width=52%>CDO Rendering Library version 1.1 </td>
</tr>
<tr valign=top>
<td width=48%>Parent objects: </td>
<td width=52%><a href="renobj_5ub8.htm">Views</a> collection </td>
</tr>
<tr valign=top>
<td width=48%>Child objects: </td>
<td width=52%><a href="renobj_78ac.htm">Columns</a> collection </td>
</tr>
<tr valign=top>
<td width=48%>Default property: </td>
<td width=52%>(none) </td>
</tr>
</table><br>
<h4>Properties </h4>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=32%><br>
Name </th>
<th align=left width=18%>Available since version </th>
<th align=left width=32%> <br>
Type </th>
<th align=left width=18%> <br>
Access </th>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=18%></td>
<td width=32%></td>
<td width=18%></td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_1e8v.htm"><b>Categories</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Long </td>
<td width=18%>Read/write </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_7dlr.htm"><b>Class</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Long </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_3tjz.htm"><b>Columns</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Column object or Columns collection object </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_11ls.htm"><b>Index</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Long </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_65i7.htm"><b>Name</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>String </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_4g7z.htm"><b>Parent</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Views collection object </td>
<td width=18%>Read-only </td>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=18%></td>
<td width=32%></td>
<td width=18%></td>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=18%></td>
<td width=32%></td>
<td width=18%></td>
</tr>
<tr valign=top>
<td width=32%></td>
<td width=18%></td>
<td width=32%></td>
<td width=18%></td>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_70wv.htm"><b>Source</b></a> </td>
<td width=18%>1.1 </td>
<td width=32%>Long </td>
<td width=18%>Read-only </td>
</tr>
</table><br>
<h4>Methods </h4>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=32%><br>
Name </th>
<th align=left width=18%>Available since version </th>
<th align=left width=50%> <br>
Parameters </th>
</tr>
<tr valign=top>
<td width=32%><a href="renobj_0xcv.htm"><b>IsSameAs</b></a> </td>
<td width=18%>1.1 </td>
<td width=50%><i>varView</i> as <b>Object</b> </td>
</tr>
</table><br>
<h4>Remarks </h4>
<p>
A table view is a specification of a tabular rendering for a container object. The container object can be an address book container or a folder. The table view is applied to the container object in the context of a <a href="renobj_86no.htm">ContainerRenderer</a>. The container renderer specifies the container object in its <a href="renobj_555r.htm"><b>DataSource</b></a> property and the table view to be applied in its <a href="renobj_93z3.htm"><b>CurrentView</b></a> property. </p>
<p>
The table view in turn contains a collection of <a href="renobj_3qyc.htm">Column</a> objects. The collection is obtainable from the table view's <a href="renobj_3tjz.htm"><b>Columns</b></a> property. Each Column object specifies a property to be rendered in its <a href="renobj_2jxb.htm"><b>Property</b></a> property and the manner of rendering that property in its <a href="renobj_1333.htm"><b>RenderUsing</b></a> property. The display order of the columns is determined by the ordering of the table view's <a href="renobj_78ac.htm">Columns</a> collection. The leftmost column is the one obtained from the collection's <a href="renobj_5a73.htm"><b>Item</b></a> property with an <i>index</i> value of 1, and the rightmost is obtained with an <i>index</i> value equal to the collection's <a href="renobj_5hzz.htm"><b>Count</b></a> property. </p>
<p>
A table view is normally generated externally to a CDO application, although a nonpersistent table view can be created with the <a href="renobj_2hnj.htm"><b>Add</b></a> method of the <a href="renobj_5ub8.htm">Views</a> collection. A table view created in this way ceases to exist when the collection is released. </p>
<p>
An externally generated table view can specify restrictions, sorting, and grouping. A restriction specifies which entries in the underlying container object are to be rendered. A sort specifies the order in which they are to be rendered. Grouping specifies how the sorted entries are to be categorized in the rendering. </p>
<p>
A restriction is based on selected properties of the container object's entries and can be arbitrarily complex. A table view defined on a <a href="oleobjis_1qd0.htm">Messages</a> collection, for example, can restrict the collection so that the only messages rendered are those that were received since December 4, 1997, have not yet been read, and have either a subject starting with "Bonus" or a message text containing "Bonus Calculation". </p>
<p>
A table view's sort can be up to four levels deep. Each level corresponds to a property of the entries being sorted. </p>
<p>
In addition to restrictions and sorting, a table view can be grouped, or categorized. Like a sort, a grouping can be up to four levels deep. Specifying grouping on a table view generates a sort on the same properties, in the same nesting order, as in the grouping. </p>
<p>
If a restricted table view on a Messages collection is also grouped, <a href="oleobjis_852s.htm">GroupHeader</a> objects are rendered along with the <a href="oleobjis_2p10.htm">Message</a> objects. Only the group headers corresponding to the messages that pass the restriction are rendered. AddressEntries collection views are not grouped, and only <a href="oleobjaf_6n1w.htm">AddressEntry</a> objects are rendered. </p>
<p>&nbsp;</p></body>
</HTML>

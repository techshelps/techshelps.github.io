<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Channel</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT>
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/netm0018.htm','/netm0000.htm','/netm0010.htm','/index.htm','/netm0020.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad='ShowButtons()' TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="comobj2_000a000109000000">Data Channel</A></H2>
<BR CLEAR=ALL>
<P>The Data Channel object, which is derived from the Channel object, contains manipulation functions specific to data channels.
<P>The Data Channel is instantiated with the <A HREF="netm0016.htm#comobj2_000a000106010100" TARGET="TEXT">INmConference::CreateDataChannel</A> method.
<P>Typically, an application will have only one Data Channel and will use its own globally unique identifier (GUID) to identify the channel. However, an application can create multiple Data Channels and identify each one with a different GUID.
<P>The <A HREF="netm0008.htm#tutorial_0009000101000000" TARGET="TEXT">Using the NetMeeting Data Channel</A> tutorial has more information on this subject.
<P>For more information on creating GUIDs, see <I>Inside OLE 2</I> by Kraig Brockschmidt.

<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109010000" TARGET="TEXT">INmChannelData Interface</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109020000" TARGET="TEXT">INmChannelDataNotify Interface</A>
</FONT></TD></TABLE>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0010.htm" TARGET="TEXT">Back to COM Object Reference</A>


<H3><A NAME="comobj2_000a000109010000">INmChannelData Interface</A></H3>
<P>This interface manages the exchange of data between specific members. Data Channel objects are created with <A HREF="netm0016.htm#comobj2_000a000106010100" TARGET="TEXT">INmConference::CreateDataChannel</A>.
<P>In addition to the <A HREF="netm0018.htm#comobj2_000a000108010000" TARGET="TEXT">INmChannel Interface</A> methods, this interface implements the following:
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109010100" TARGET="TEXT">GetGuid</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109010200" TARGET="TEXT">SendData</A>
</FONT></TD></TABLE>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>


<H4><A NAME="comobj2_000a000109010100">INmChannelData::GetGuid</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">HRESULT GetGuid(<br>    [out] GUID *pguid);<br></FONT></PRE>
<P>Retrieves the globally unique identifier (GUID) used in the creation of the data channel (<A HREF="netm0016.htm#comobj2_000a000106010100" TARGET="TEXT">INmConference::CreateDataChannel</A>).

<UL><LI>Returns S_OK if successful, or E_POINTER if the <I>pguid</I> parameter contains an invalid value.
</UL>
<DL><DT><I>pguid</I>
 </DT><DD>Pointer to the GUID that identifies a specific data channel.
</DD></DL>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm#comobj2_000a000109010000" TARGET="TEXT">Back to INmChannelData Interface</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0012.htm" TARGET="TEXT">Back to COM Object Listing</A>
<H4><A NAME="comobj2_000a000109010200">INmChannelData::SendData</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">HRESULT SendData(<br>    [in] INmMember *pMember,<br>    [in] ULONG uSize,<br>    [in] BYTE *pvBuffer,<br>    [in] ULONG uOptions);<br></FONT></PRE>
<P>Sends a block of data through the channel to a specified application on the designated member's computer.

<UL><LI>Returns one of the following values:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Success.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_POINTER</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>pvBuffer</I> pointer is invalid, or <I>uOptions</I> contains an invalid option.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_NOINTERFACE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>pMember</I> object does not have the required interface.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The specified data buffer was not sent, the specified member is no longer in the conference, or internal resources are not available.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_OUTOFMEMORY </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Memory could not be allocated to service the request.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><I>pvBuffer</I> is NULL or <I>uSize</I> is zero.
</FONT></TD></TR></TABLE>
</UL>
<DL><DT><I>pMember</I>
 </DT><DD>Pointer to the <A HREF="netm0017.htm#comobj2_000a000107010000" TARGET="TEXT">INmMember Interface</A> on the Member object to which data will be sent. If this parameter is NULL, the data is sent to all members in the channel.
</DD><DT><I>uSize</I>
</DT><DD>Size, in bytes, of the data in the buffer.
</DD><DT><I>pvBuffer</I>
</DT><DD>Pointer to a buffer that contains the data to be sent.
</DD><DT><I>uOptions</I>
</DT><DD>Flags for data transfer. Reserved for future use. This flag should be set to 0.
</DD></DL>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm#comobj2_000a000109010000" TARGET="TEXT">Back to INmChannelData Interface</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0012.htm" TARGET="TEXT">Back to COM Object Listing</A>
<H3><A NAME="comobj2_000a000109020000">INmChannelDataNotify Interface</A></H3>
<P>This is an event notification sink interface for the INmChannelData interface. The methods in this interface are called by the Data Channel object when specific events occur.
<P>These event sink methods should be defined and implemented by the client application to respond to notifications from a Data Channel object. For example, the <A HREF="netm0019.htm#comobj2_000a000109020100" TARGET="TEXT">INmChannelDataNotify::DataReceived</A> method is notified when data is received by the local computer. The client application implementation of this method could provide a display to the user informing him or her that the data has been received (including the size of the data, in bytes, which is provided by one of the method's parameters).

<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109020100" TARGET="TEXT">DataReceived</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109020200" TARGET="TEXT">DataSent</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109020300" TARGET="TEXT">MemberChanged</A>
</FONT></TD><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="netm0019.htm#comobj2_000a000109020400" TARGET="TEXT">NmUI</A>
</FONT></TD></TABLE>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>


<H4><A NAME="comobj2_000a000109020100">INmChannelDataNotify::DataReceived</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">HRESULT DataReceived(<br>    [in] INmMember *pMember,<br>    [in] ULONG uSize,<br>    [in] byte *pvBuffer,<br>    [in] ULONG dwFlags);<br></FONT></PRE>
<P>Receives a notification when data is received by the local computer.

<UL><LI>This event sink should always return S_OK to the event source.
</UL>
<DL><DT><I>pMember</I>
 </DT><DD>Pointer to the <A HREF="netm0017.htm#comobj2_000a000107010000" TARGET="TEXT">INmMember Interface</A> on the Member object from which the data originated.
 </DD><DT><I>uSize</I>
</DT><DD>Size, in bytes, of the data in the buffer.
</DD><DT><I>pvBuffer</I>
</DT><DD>Pointer to a buffer that contains the data received.
</DD><DT><I>dwFlags</I>
</DT><DD>Flag that provides information on the transferred data. This can be one or more of the following:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_DF_BROADCAST </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Data was broadcast to everyone.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_DF_PRIVATE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Data was private.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_DF_SEGMENT_BEGIN </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Start of data block.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_DF_SEGMENT_END </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">End of data block.
</FONT></TD></TR></TABLE>
</DD></DL>
<P>The data buffer is valid only until the <B>DataReceived</B> method returns, at which point it is freed. To access information in the buffer after returning from the <B>DataReceived</B> method, copy the information to another buffer.
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm#comobj2_000a000109020000" TARGET="TEXT">Back to INmChannelDataNotify Interface</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0012.htm" TARGET="TEXT">Back to COM Object Listing</A>

<H4><A NAME="comobj2_000a000109020200">INmChannelDataNotify::DataSent</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">HRESULT DataSent(<br>    [in] INmMember *pMember,<br>    [in] ULONG uSize,<br>    [in] byte *pvBuffer);<br></FONT></PRE>
<P>Receives a notification after the data is queued up to be sent.
<UL><LI>This event sink should always return S_OK to the event source.
</UL>
<DL><DT><I>pMember</I>
 </DT><DD>Pointer to the <A HREF="netm0017.htm#comobj2_000a000107010000" TARGET="TEXT">INmMember Interface</A> on the Member object to which the data was sent. If the parameter is NULL, the data was sent to all members in the channel.
</DD><DT><I>uSize</I>
</DT><DD>Size, in bytes, of the data in the buffer.
</DD><DT><I>pvBuffer</I>
</DT><DD>Pointer to a buffer that contains the data that was sent.
</DD></DL>
<P>Receipt of this notification indicates that NetMeeting has processed the <A HREF="netm0019.htm#comobj2_000a000109010200" TARGET="TEXT">INmChannelData::SendData</A> request and handed the data off to lower level protocols for transmission. It does not guarantee that the data was transmitted or accepted by any remote computer.<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm#comobj2_000a000109020000" TARGET="TEXT">Back to INmChannelDataNotify Interface</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0012.htm" TARGET="TEXT">Back to COM Object Listing</A>

<H4><A NAME="comobj2_000a000109020300">INmChannelDataNotify::MemberChanged</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">HRESULT MemberChanged(<br>    [in] NM_MEMBER_NOTIFY uNotify,<br>    [in] INmMember *pMember);<br></FONT></PRE>
<P>Receives notification that a member of the Data Channel was added, removed, or updated. This method is inherited from <A HREF="netm0018.htm#comobj2_000a000108020000" TARGET="TEXT">INmChannelNotify</A>.

<UL><LI>This event sink should always return S_OK to the event source.
</UL>
<DL><DT><I>uNotify</I>
 </DT><DD>Identifier of an event constant during a conference. This can include the following values:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_MEMBER_ADDED </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A member was added to the conference.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_MEMBER_REMOVED </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A member was removed from the conference.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_MEMBER_UPDATED </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Information for a conference member was updated.
</FONT></TD></TR></TABLE>
</DD><DT><I>pMember</I>
</DT><DD>Pointer to the <A HREF="netm0017.htm#comobj2_000a000107010000" TARGET="TEXT">INmMember Interface</A> on the Member object that changed.
</DD></DL>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm#comobj2_000a000109020000" TARGET="TEXT">Back to INmChannelDataNotify Interface</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0012.htm" TARGET="TEXT">Back to COM Object Listing</A>

<H4><A NAME="comobj2_000a000109020400">INmChannelDataNotify::NmUI</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">HRESULT NmUI(<br>    [in] CONFN uNotify);<br></FONT></PRE>
<P>Receives event notification when a channel change occurs. Only the application in charge (initialized with NM_INIT_CONTROL) of the NetMeeting user interface will receive these notifications. This method is inherited from <A HREF="netm0018.htm#comobj2_000a000108020000" TARGET="TEXT">INmChannelNotify</A>.

<UL><LI>This event sink should always return S_OK to the event source.
</UL>
<DL><DT><I>uNotify</I>
 </DT><DD>Reserved for future use.
</DD></DL>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm#comobj2_000a000109020000" TARGET="TEXT">Back to INmChannelDataNotify Interface</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0019.htm" TARGET="TEXT">Back to Data Channel</A>
<P><IMG SRC="art/uparrow.gif" WIDTH="10" HEIGHT="10" ALT="Up Arrow" ><A HREF="netm0012.htm" TARGET="TEXT">Back to COM Object Listing</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<p>Last Updated: November 1, 1997
<br><A HREF="http://www.microsoft.com/isapi/redir.dll?PRD=msft&AR=copyright" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>

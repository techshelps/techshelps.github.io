<html>
<head>
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>XMSConf Sample</title>
<!-- 
  Microsoft Conferencing OCX Test Page

  Copyright (c) Microsoft Corporation 1995-1997

  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
  PARTICULAR PURPOSE.
-->

<script language="VBScript">
'<!--

' Create the global conference related objects
Option Explicit

Dim Conference
Dim DataChannel
Dim FileChannel
Dim AppShrChannel
Dim AppCtlChannel
Dim User
Dim AppName


'---------------------------------------------------------------
' LogIt - add text to the Conference Log window
'---------------------------------------------------------------
Sub LogIt(text)
    LogText.Value = LogText.Value & text & Chr(13) & Chr(10)
End Sub

'---------------------------------------------------------------
' RxIt - add text to the Received Text window
'---------------------------------------------------------------
Sub RxIt(text)
    RxText.Value = RxText.Value & text & Chr(13) & Chr(10)
End Sub

'---------------------------------------------------------------
' UpdateMemberList -  Build the list of conference members for display in the roster
'---------------------------------------------------------------
Sub UpdateMemberList()
	Dim Members
	Dim Member
	Dim i

	On Error Resume Next
	If Conference Is Nothing Then
		MemberList.Value = ""
    Else
		Set Members = Conference.Members
		If Members Is Nothing Then
			MemberList.Value = "Error" & Hex(Err.Number)
		Else
			MemberList.Value = ""
			For i = 0 To Members.Count - 1
				MemberList.Value = MemberList.Value & Members(i).name & Chr(13) & Chr(10)
			Next
		End If
	End If
End Sub

'---------------------------------------------------------------
' UpdateAppShrList -  Build a list of shareable applications
'---------------------------------------------------------------
Sub UpdateAppShrList()
	Dim ShareApps
	Dim ShareApp
	Dim i

	On Error Resume Next
	If Not (AppShrChannel Is Nothing) Then
		Set ShareApps = AppShrChannel.SharableApps
		If Not (ShareApps Is Nothing) Then
			LogIt "There are " & ShareApps.Count & " shareable Apps"
			For i = 0 to ShareApps.Count - 1
				Set ShareApp = ShareApps(i)
				If ShareApp.ShareState = 1 Then 'CNF_SHR_SHARED 
					Logit "Shared App: " & ShareApp.Name
				ElseIf ShareApp.ShareState = 2 Then 'CNF_SHR_UNSHARED 
					Logit "Shareable App: " & ShareApp.Name
				End If
			Next
		Else
			LogIt "There are no applications available to be shared"
		End If
	Else 
		LogIt "There is no AppShrChannel available - cannot share"
	End If
End Sub

'---------------------------------------------------------------
' ConfMgr_ConferenceCreated - Advise the conference and log results
'---------------------------------------------------------------
Sub ConfMgr_ConferenceCreated(ByVal pcnf)
	LogIt "Conference " & pcnf.name & " was created."
	Set Conference = pcnf
	Conference.Advise
End Sub


'---------------------------------------------------------------
' ConfMgr_DataReceived - Log the events and display the incoming data
'---------------------------------------------------------------
Sub ConfMgr_DataReceived(ByVal pDataExchange, ByVal pMember, ByVal pDataTransfer, ByVal hr)
	LogIt "Event ConfMgr_DataReceived"
	If pMember Is Nothing Then
		RxIt "Someone says: " & pDataTransfer.String
	Else
		RxIt pMember.name & " says: " & pDataTransfer.String
	End If
	LogIt "Received data: " & pDataTransfer.String
End Sub

'---------------------------------------------------------------
' ConfMgr_DataSent -  Display the outgoing data 
'---------------------------------------------------------------
Sub ConfMgr_DataSent(ByVal pDataExchange, ByVal pMember, ByVal pDataTransfer, ByVal hr)
	RxIt "I say: " & pDataTransfer.String
	LogIt "Sending Data to everyone"
End Sub

'---------------------------------------------------------------
' ConfMgr_FileReceived - display file received status 
'---------------------------------------------------------------
Sub ConfMgr_FileReceived(ByVal pFileExchange, ByVal pMember, ByVal pFileTransfer, ByVal hr)
	Dim MemberName
	If pMember Is Nothing Then
		MemberName = "someone"
	Else
		MemberName = pMember.name
	End If
	
	Select Case pFileTransfer.State
	Case 0 'CNF_FILE_IDLE
		LogIt "CNF_FILE_IDLE"
	Case 1 'CNF_FILE_INITIALIZING
		LogIt "Receiving file '" & pFileTransfer.name & " from " & MemberName
	Case 2 'CNF_FILE_PROGRESS
'			LogIt "CNF_FILE_PROGRESS"
	Case 3 'CNF_FILE_COMPLETE
		If pFileTransfer.TotalSize = pFileTransfer.BytesTransferred Then
			LogIt pFileTransfer.name & " was received"
		Else
			LogIt "File transfer canceled"
		End If
	End Select
End Sub

'---------------------------------------------------------------
' ConfMgr_FileSent -  display file sent status
'---------------------------------------------------------------
Sub ConfMgr_FileSent(ByVal pFileExchange, ByVal pMember, ByVal pFileTransfer, ByVal hr)
	Dim MemberName

	LogIt "File Been Sent"
	If pMember Is Nothing Then
		MemberName = "everyone"
	Else
		MemberName = pMember.name
	End If
	
	Select Case pFileTransfer.State
	Case 0 'CNF_FILE_IDLE
		LogIt "CNF_FILE_IDLE"
	Case 1 'CNF_FILE_INITIALIZING
		LogIt "Sending file '" & pFileTransfer.name & " to " & MemberName
	Case 2 'CNF_FILE_PROGRESS
'			LogIt "CNF_FILE_PROGRESS"
	Case 3 'CNF_FILE_COMPLETE
		If pFileTransfer.TotalSize = pFileTransfer.BytesTransferred Then
			LogIt pFileTransfer.name & " was sent"
		Else
			LogIt "File transfer canceled"
		End If
	End Select
End Sub

'---------------------------------------------------------------
' ConfMgr_MemberChanged -  Display join/leave notices
'---------------------------------------------------------------
Sub ConfMgr_MemberChanged(ByVal pConference, ByVal pMember, ByVal lNotify)
	Select Case lNotify
	Case 0 'CNF_MEMB_ADDED
		LogIt pMember.name & " joined the conference."
	Case 1 'CNF_MEMB_REMOVED
		LogIt pMember.name & " left the conference."
	Case 2 'CNF_MEMB_UPDATED
		LogIt pMember.name & " has been updated."
		GetChannels
	End Select
	UpdateMemberList
End Sub

'---------------------------------------------------------------
' ConfMgr_RequestToJoin -  display the request to join
'---------------------------------------------------------------
Sub ConfMgr_RequestToJoin(ByVal pConference, ByVal pUser)
	LogIt pUser.name & " wants to join the conference."
End Sub

'---------------------------------------------------------------
' ConfMgr_StateChanged -  log state changes to output window
'---------------------------------------------------------------
Sub ConfMgr_StateChanged(ByVal pConference, ByVal lConfState, ByVal hrArg)
	Logit "StateChanged:" & lConfState  
	Select Case lConfState
	Case 0 'CNF_STATE_IDLE
		LogIt "Conference is idle."
	Case 1 'CNF_STATE_INIT
		LogIt "Conference is initialized."
	Case 2 'CNF_STATE_START
		LogIt "Conference has started."
		OnConferenceRunning
		JoinLeave.Value = "Hang up"
	Case 3 'CNF_STATE_STOP
		LogIt "Conference has stopped." + CStr(Date) + " " + CStr(Time)
		OnConferenceStopped
		UpdateMemberList
		JoinLeave.Value = "Call"
	Case 4 'CNF_STATE_OFFERED
		LogIt "Conference has been offered."
	End Select
End Sub

'---------------------------------------------------------------
' ConfMgr_AppSharingStatusChanged -  log sharing status
'---------------------------------------------------------------
Sub ConfMgr_AppSharingStatusChanged(ByVal pAppSharing, ByVal pShrApp, ByVal lAppStatus, ByVal hr)
	LogIt "Event: AppSharingStatusChanged"
	Select Case lAppStatus
	Case 0 'CNF_SHR_UNKNOWN
		LogIt pShrApp.Name & " share state is UNKNOWN"
	Case 1 'CNF_SHR_SHARED
		LogIt pShrApp.Name & " is now shared"
	Case 2 'CNF_SHR_UNSHARED
		LogIt "Application is now unshared"
	End Select
	UpdateAppShrList
End Sub

'---------------------------------------------------------------
' Window_OnLoad -  the main routine
'---------------------------------------------------------------
Sub Window_OnLoad
	Dim strCaps
	Dim lCaps
	Dim Conferences

	Set Conference = Nothing
	Set DataChannel = Nothing
	Set FileChannel = Nothing
	Set AppShrChannel = Nothing
	Set AppCtlChannel = Nothing
	
	On Error Resume Next

	'initialize the root interface, GUID passed is for the calling application
	If Not ConfMgr.Initialize("{7D9EFE01-FC62-11cf-B94F-444553540000}") Then
		ErrorMsg "Failed to initialize conference manager"
		Exit Sub
	End If
	
	
	lCaps = ConfMgr.ConferenceCapabilities
	Select Case lCaps
	Case 0 'CNF_CAPS_NONE
		strCaps = "none."
	Case 1 'CNF_CAPS_DATA 
		strCaps = "data only."
	Case 2 'CNF_CAPS_AUDIO 
		strCaps = "audio only."
	Case 3 'CNF_CAPS_AUDIO | CNF_CAPS_DATA
		strCaps = "audio and data."
	Case 4 'CNF_CAPS_VIDEO
		strCaps = "video."
	Case 5 'CNF_CAPS_VIDEO | CNF_CAPS_DATA 
		strCaps = "video and data."
	Case 6 'CNF_CAPS_AUDIO | CNF_CAPS_VIDEO | CNF_CAPS_DATA
		strCaps = "audio and video."
	Case 7 'CNF_CAPS_AUDIO | CNF_CAPS_VIDEO | CNF_CAPS_DATA 
		strCaps = "audio, video and data."
	End Select
   
	LogIt "Conference capabilities are " & strCaps
	
	'Call Advise to hook up events to this object
	ConfMgr.Advise
	
	Set Conferences = ConfMgr.Conferences
	If Not (Conferences Is Nothing) Then
		Set Conference = Conferences(0)
		If Not (Conference Is Nothing) Then
			Conference.Advise
			OnConferenceRunning
		End If
	End If
End Sub

'---------------------------------------------------------------
' Window_OnUnload -  clean up
'---------------------------------------------------------------
Sub Window_OnUnload()
	OnConferenceStopped
	ConfMgr.Unadvise
End Sub

'---------------------------------------------------------------
' JoinLeave_onClick -  initiate or hangup the call
'---------------------------------------------------------------
Sub JoinLeave_onClick()

	On Error Resume Next

	If JoinLeave.Value = "Call" Then ' Join a conference
		FileName.Value = ""

		If Conference Is Nothing Then
			Set Conference = ConfMgr.CreateConference("MyConf", 3)
			If Conference Is Nothing Then
				ErrorMsg "failed to create conference"
				Exit Sub
			End If
			Conference.Advise
		End If

	
		Set User = ConfMgr.CreateUser(UserName.Value, 2)
		If User Is Nothing Then
			ErrorMsg "failed to create user"
		Else
			If Not Conference.Invite(User) Then
				ErrorMsg "failed to invite user"
			End If
		End If
	Else
		If Conference Is Nothing Then
			'MsgBox "No active conference"
		Else
			Conference.Leave
			'If Not Conference.Leave Then
			'	ErrorMsg "failed to leave conference"
			'End If
		End If
	End If
End Sub


'---------------------------------------------------------------
' SendFile_onClick - send a file to all users
'---------------------------------------------------------------
Sub SendFile_onClick()
	Dim FileXfer

	On Error Resume Next
	If FileChannel Is Nothing Then
		MsgBox "No 'File Exchange' channel available", 0, "Conference OCX"
	Else
		Set FileXfer = FileChannel.SendFile(Nothing, Nothing, FileName.Value, 0)
		If FileXfer Is Nothing Then
			ErrorMsg "Failed to send file"
		End If
	End If
End Sub

'---------------------------------------------------------------
' SendData_onClick - send data to all users
'---------------------------------------------------------------
Sub SendData_onClick()
	On Error Resume Next
	If DataChannel Is Nothing Then
		MsgBox "No 'Data Exchange' channel available", 0, "Conference OCX"
	Else
		If Not DataChannel.SendData(Nothing, Nothing, TxText.Value, 0) Then
			ErrorMsg "Failed to send data"
		Else
			TxText.Value = ""
		End If
	End If
End Sub

'---------------------------------------------------------------
' Share_onClick - share the specified application
'---------------------------------------------------------------
Sub Share_onClick()
	Dim App
	AppName = txtShrAppName.Value
	MsgBox "AppName is :" & AppName
	Set App = FindShareApp(AppName, False)

	If Not (App Is Nothing) Then
		App.Share
	Else
		MsgBox "Could not find application:" & AppName & " to share", 0, "Conference OCX"
	End If
End Sub

'---------------------------------------------------------------
' Unshare_onClick - stop sharing the application
'---------------------------------------------------------------
Sub Unshare_onClick()
	Dim App
	AppName = txtShrAppName.Value
	Set App = FindShareApp(AppName, True)
	If Not (App Is Nothing) Then
		App.Unshare
	Else
		MsgBox "Could not find application:" & AppName & " to unshare", 0, "Conference OCX"
	End If
End Sub


'---------------------------------------------------------------
' FindShareApp - create a list of shareable applications
'---------------------------------------------------------------
Function FindShareApp(Name, fShared)
	Dim ShareApps
	Dim ShareApp
	Dim State
	Dim i
	Set FindShareApp = Nothing

	If fShared Then
		State = 1
	Else
		State = 2
	End If

'	On Error Resume Next
	If Not (AppShrChannel Is Nothing) Then
		Set ShareApps = AppShrChannel.SharableApps
		If Not (ShareApps Is Nothing) Then
			For i = 0 to ShareApps.Count -1
		set ShareApp = ShareApps(i)
				If State = ShareApp.ShareState Then
					If InStr(1, ShareApp.Name, Name, 1) Then
						Set FindShareApp = ShareApp
						Exit For
					End If
				End If
			Next
		End If
	End If
End Function


'---------------------------------------------------------------
' Refresh_onClick - refresh the shareable application list
'---------------------------------------------------------------
Sub Refresh_onClick()
	UpdateAppShrList
End Sub

'---------------------------------------------------------------
' IsDataID - check channel GUID
'---------------------------------------------------------------
Function IsDataID(id)
	IsDataID = (id = "{be5b8707-92e1-11cf-8796-444553540000}")
End Function

'---------------------------------------------------------------
' IsFileID -  check channel GUID
'---------------------------------------------------------------
Function IsFileID(id)
	IsFileID = (id = "{be5b8708-92e1-11cf-8796-444553540000}")
End Function

'---------------------------------------------------------------
' IsAppShrID -  check channel GUID
'---------------------------------------------------------------
Function IsAppShrID(id)
	IsAppShrID = (id = "{be5b8709-92e1-11cf-8796-444553540000}")
End Function

'---------------------------------------------------------------
' IsAppCtlID -  check channel GUID
'---------------------------------------------------------------
Function IsAppCtlID(id)
	IsAppCtlID = (id = "{be5b870a-92e1-11cf-8796-444553540000}")
End Function
		
'---------------------------------------------------------------
' GetChannels -  check all channels
'---------------------------------------------------------------
Sub GetChannels()
	Dim Channels
	Dim Channel
	Dim i

	On Error Resume Next
	Set Channels = Conference.Channels
	If Channels Is Nothing Then
		ErrorMsg "Unable to get conference channels"
	Else
		For i = 0 To Channels.Count - 1
			Dim Interface
	
			Set Channel = Channels(i)
			Interface = Channel.Interface
			LogIt Interface
			
			If IsDataID(Interface) Then
				LogIt "....DataXfer Interface"
				Set DataChannel = Channel.object
				If DataChannel Is Nothing Then
					ErrorMsg "Unable to get data exchange channel"
				Else
					DataChannel.Advise
				End If
			
			ElseIf IsFileID(Interface) Then
				LogIt "....FileXfer Interface"
				Set FileChannel = Channel.object
				If FileChannel Is Nothing Then
					ErrorMsg "Unable to get file exchange channel"
				Else
					FileChannel.Advise
				End If
			
			ElseIf IsAppShrID(Interface) Then
				LogIt "....AppSharing Interface"
				Set AppShrChannel = Channel.object
				If AppShrChannel Is Nothing Then
					ErrorMsg "Unable to get app sharing channel"
				Else
					AppShrChannel.Advise
				End If
				
			ElseIf IsAppCtlID(Interface) Then
				LogIt "....AppControl Interface"
				Set AppCtlChannel = Channel.object
				If AppCtlChannel Is Nothing Then
					ErrorMsg "Unable to get app control channel"
				Else
					AppCtlChannel.Advise
				End If
			End If
		Next
	End If
End Sub

'---------------------------------------------------------------
' OnConferenceStopped -  Clean up the objects 
'---------------------------------------------------------------
Sub OnConferenceStopped()

	If Not (Conference Is Nothing) Then
		Conference.Unadvise
		Set Conference = Nothing
	End If
	
	If Not (DataChannel Is Nothing) Then
		DataChannel.Unadvise
		Set DataChannel = Nothing
	End If
	
	If Not (FileChannel Is Nothing) Then
		FileChannel.Unadvise
		Set FileChannel = Nothing
	End If
	
	If Not (AppShrChannel Is Nothing) Then
		AppShrChannel.Unadvise
		Set AppShrChannel = Nothing
	End If
	
	If Not (AppCtlChannel Is Nothing) Then
		AppCtlChannel.Unadvise
		Set AppCtlChannel = Nothing
	End If

End Sub

'---------------------------------------------------------------
' OnConferenceRunning - update conference information
'---------------------------------------------------------------
Sub OnConferenceRunning()
	UpdateMemberList
	UpdateAppShrList
End Sub

'---------------------------------------------------------------
' ErrorMsg -  Display a message box with the given text 
'---------------------------------------------------------------
Sub ErrorMsg(text)
	MsgBox "Error " & Hex(Err.Number) & ": " & text, 0, "Conference OCX"
	Logit "Error " & Hex(Err.Number) & ": " & text
End Sub

'-->
</script>
</head>

<body bgcolor=white text=black>
<center>
<table border=0 cellspacing=2 cellpadding=1>
<tr>
	<td>
	<font face="Arial, Helvetica" size=2>User Name :<br>
	<input size=20 name="UserName">&nbsp;
	<input type=button value="Call" name="JoinLeave">&nbsp; 
	<input type=button value="Refresh" name="Refresh"></font>
	</td>
</tr>
<tr>
	<td>
	<font face="Arial, Helvetica" size=2>Member Roster :<br>
	<textarea rows=3 cols=82 name="MemberList"></textarea></font>
	</td>
</tr>
<tr>
	<td>
	<font face="Arial, Helvetica" size=2>Conference Log :<br>
	<textarea rows=4 cols=82 name="LogText"></textarea></font>
	</td>
</tr>
<tr>
	<td>
	<font face="Arial, Helvetica" size=2>File to transfer :<br>
	<input size=62 name="FileName">&nbsp; 
	<input type=button value="Send File" name="SendFile"></font>
	</td>
</tr>
<tr>
	<td>
	<font face="Arial, Helvetica" size=2>Received text :<br>
	<textarea rows=4 cols=82 name="RxText"></textarea></font>
	</td>
</tr>
<tr>
	<td>
	<font face="Arial, Helvetica" size=2>Transmitted text :<br>
	<input size=62 name="TxText">&nbsp;
	<input type=button value="Send Data" name="SendData"></font>
	</td>
</tr>
<tr>
	<td>
	<font face="Arial, Helvetica" size=2>Application to share :<br>
	<input size=45 value="Notepad" name="txtShrAppName">&nbsp;
	<input type=button value="Share App" name=share>&nbsp;
	<input type=button value="Unshare App" name=unshare></font>
	</td>
</tr>

</table>
</center>

<!-- Load the ConferenceManager object here -->
<object id="ConfMgr" classid="CLSID:53D22820-D7E8-11CF-AD0A-0080C7137C82">
</object>
</body>
</html>

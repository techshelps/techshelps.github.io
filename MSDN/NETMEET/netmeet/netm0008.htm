<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tutorials and Samples</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT>
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/netm0007.htm','/netm0000.htm','/netm0000.htm','/index.htm','/netm0009.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad='ShowButtons()' TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="netm_0009000100000001">Tutorials and Samples</A></H2>
<BR CLEAR=ALL>
<P>NetMeeting delivers an open, extensible platform for real-time communications, offering audio, video, and data conferencing functionality. Several tutorials and sample applications that demonstrate some ways to use the NetMeeting SDK are supplied here.

<P>Sample applications can be found in the samples folder of your Nm21sdk folder. The Samples.txt file, also in the Nm21sdk folder, provides information to aid your usage of the samples. To build the samples from Visual C++&#174;, open the project makefile (sample.mak) as a Microsoft VC++ project, and build as usual.
The NetMeeting SDK directories must be added to your VC++ environment (select Options from the Tools menu and click the Directories tab).


<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000101000000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Using the NetMeeting Data Channel</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000102000000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Remotely Launching Your Program</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000103000000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">ILS Extended Attributes</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000104000000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Implementing Filters in ILS Queries</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000105000000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">NetMeeting Functionality in Web Pages</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000106000000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Creating a NetMeeting Call Center</A><BR>
<H2><A NAME="tutorial_0009000101000000">Using the NetMeeting Data Channel</A></H2>
<P>The Microsoft&#174; NetMeeting&#153; COM interface enables programmers to design feature-rich collaborative software. Using the NetMeeting COM interface, developers can create applications that let users work together over local or remote networks. Local instances of the application, running on each person's computer, can communicate with each other using the NetMeeting data channel.

<P>This tutorial demonstrates how to use the NetMeeting data channel, using the Chat sample application (included in the NetMeeting Software Developers Kit) as a working example.

<P>The code in this tutorial has been simplified to highlight the important parts of the Chat application. For more details, see the Chat sample application included in the samples folder of your NetMeeting SDK directory.

<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000101010000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Who Should Use This Tutorial?</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000101020000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Limitations</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000101030000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Creating a Data Channel</A><BR>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm" TARGET="TEXT">Back to list of Tutorials</A>




<H3><A NAME="tutorial_0009000101010000">Who Should Use This Tutorial?</A></H3>
<P>This tutorial is for developers who want to write a "conferencing-aware application" that uses the NetMeeting data channel to send and receive information.

<P>This tutorial assumes that the reader is familiar with the Microsoft Component Object Model (COM). For more information on COM, see <I>Inside OLE 2</I> by Kraig Brockschmidt.
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101000000" TARGET="TEXT">Back to list of Data Channel topics</A>

<H3><A NAME="tutorial_0009000101020000">Limitations</A></H3>
<P>Once you have written an application that uses the NetMeeting data channel, you may want to ensure that your application is running on each conference member's computer. A separate tutorial, <A HREF="netm0008.htm#tutorial_0009000102000000" TARGET="TEXT">Remotely Launching Your Program</A>, describes how to do this.
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101000000" TARGET="TEXT">Back to list of Data Channel topics</A>

<H3><A NAME="tutorial_0009000101030000">Creating a Data Channel</A></H3>
<P>Use the following steps to create a data channel:
<OL><LI><A HREF="netm0008.htm#tutorial_0009000101030100" TARGET="TEXT">Obtain and Initialize a Pointer to an INmManager Object</A>
<LI><A HREF="netm0008.htm#tutorial_0009000101030200" TARGET="TEXT">Obtain a Pointer to an INmConference Object</A>
<LI><A HREF="netm0008.htm#tutorial_0009000101030300" TARGET="TEXT">Create an INmChannelData Interface in the INmConference Object</A>
<LI><A HREF="netm0008.htm#tutorial_0009000101030400" TARGET="TEXT">Create Code to Send and Receive Application-Specific Data</A>
</OL>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101000000" TARGET="TEXT">Back to list of Data Channel topics</A>

<H4><A NAME="tutorial_0009000101030100">Obtain and Initialize a Pointer to an INmManager Object</A></H4>
<P>The INmManager object is at the top of the NetMeeting COM object hierarchy. Any application that uses the NetMeeting COM object should have code that obtains a pointer to an INmManager object. This pointer enables the program to create its own calls and conferences, to detect the properties of the local system, and many other useful tasks. Once you obtain a pointer to an INmManager object, connect a notification sink to the pointer. This causes you to be notified of the presence of INmConferences and INmCalls. The final step is to initialize the NetMeeting system. Initializing will launch the NetMeeting application.

<P><B>Note</B>  It is important to connect a notification sink to your INmManager object before initializing the NetMeeting application. Reversing the order of these steps may cause you to miss important notifications.
<P>In the following sample code, the INmManager pointer is initialized with data capabilities (NMCH_DATA) only, because this application is not interested in receiving notifications about other types of traffic (such as audio or video). 

<PRE><FONT FACE="Courier" SIZE="2">HRESULT InitManager( void )<br>{<br>    HRESULT hr;<br>    hr = CoCreateInstance(CLSID_NmManager,<br>                          NULL,<br>                          CLSCTX_INPROC_SERVER,<br>                          IID_INmManager,<br>                          (void **)&amp;g_pNmManager);<br> <br>    if( SUCCEEDED( hr ) ) {<br>        g_pManagerNotify = new CManagerNotify();<br> <br>        if( NULL != g_pManagerNotify ) {<br>            hr = g_pManagerNotify-&gt;Connect( g_pNmManager );<br> <br>            if( SUCCEEDED( hr ) ) {<br>                ULONG  uchCaps =  NMCH_DATA;<br>                ULONG  uOptions =  NM_INIT_NORMAL;<br>                hr = g_pNmManager-&gt;Initialize( &amp;uOptions,&amp;uchCaps )<br>            }<br>        }<br>    }<br>    return( hr );<br>}<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101030000" TARGET="TEXT">Back to Creating a Data Channel</A>

<H4><A NAME="tutorial_0009000101030200">Obtain a Pointer to an INmConference Object</A></H4>
<P>The INmConference object enables you to access INmChannels and INmMembers. An active conference is one in which there are two or more computers (each represented by an INmMember pointer), sending and receiving audio, video, files, or data. The INmManager object is notified of existing conferences through its notification sink. When an INmManager pointer is first initialized, or each time a conference is created, the NetMeeting COM object calls your <A HREF="netm0013.htm#comobj2_000a000103020200" TARGET="TEXT">INmManagerNotify::ConferenceCreated</A> method. A conference can be created through the NetMeeting user interface (UI) or through calls to the NetMeeting COM API.

<P>The following code is an example of the <A HREF="netm0013.htm#comobj2_000a000103020200" TARGET="TEXT">INmManagerNotify::ConferenceCreated</A> method you will have to write. As with the preceding function, you will create a pointer to the Conference object, and then connect a notification object to the pointer. This will enable you to receive notifications about the conference. 

<PRE><FONT FACE="Courier" SIZE="2">INmConference *g_pConference = NULL;<br> <br>HRESULT STDMETHODCALLTYPE <br>CManagerNotify::ConferenceCreated( INmConference *pConference )<br>{<br>    HRESULT hr = E_FAIL;<br>&#009;<br>    pConference-&gt;AddRef();<br>    g_pConference = pConference;<br>    g_pConferenceNotify = new CConferenceNotify();<br> <br>    if( NULL != g_pConferenceNotify ) {<br>        hr = g_pConferenceNotify-&gt;Connect( g_pConference );<br>    }<br>    return( hr );<br>}<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101030000" TARGET="TEXT">Back to Creating a Data Channel</A>

<H4><A NAME="tutorial_0009000101030300">Create an INmChannelData Interface in the INmConference Object</A></H4>
<P>INmChannelData is the interface through which application-specific data is transmitted and received. A data channel is created with a GUID (globally unique identifier). Programs can use a data channel to transmit information only if both members have created a data channel using the same GUID.

<P>The following code creates a data channel for a program that can communicate with the NetMeeting Chat application. It first creates a data channel, then connects the channel to a notification sink so that notification about the channel can be received. 

<PRE><FONT FACE="Courier" SIZE="2">// Local Application Guid :<br>// {D29A8C50-774F-11d0-8B1D-00A0C91BC90E}<br>const GUID g_guidApp = <br>{ 0xd29a8c51, 0x774f, 0x11d0,<br>           { 0x8b, 0x1d, 0x0, 0xa0, 0xc9, 0x1b, 0xc9, 0xe} };<br> <br>INmChannelData *g_pChannelData = NULL;<br> <br>HRESULT CreateChatChannel(void)<br>{<br>    HRESULT hr;<br>    hr = g_pConference-&gt;CreateDataChannel(<br>&#009;                           &amp;g_pChannelData, g_guidApp);<br> <br>    if (S_OK == hr) {<br>        g_pDataChanNotify = new CChannelDataNotify();<br> <br>        if( NULL != g_pDataChanNotify ) {<br>            hr = g_pDataChanNotify-&gt;Connect(g_pChannelData);<br>        }<br>    }<br>    return hr;<br>}<br></FONT></PRE>
<P>For more information about creating and using GUIDs, see <I>Inside OLE, Second Edition</I>. 
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101030000" TARGET="TEXT">Back to Creating a Data Channel</A>

<H4><A NAME="tutorial_0009000101030400">Create Code to Send and Receive Application-Specific Data</A></H4>
<P>Sending data is accomplished through <A HREF="netm0019.htm#comobj2_000a000109010200" TARGET="TEXT">INmChannelData::SendData</A>. Data is received by your <A HREF="netm0019.htm#comobj2_000a000109020100" TARGET="TEXT">INmChannelDataNotify::DataReceived</A> method.

<P>The <A HREF="netm0019.htm#comobj2_000a000109020100" TARGET="TEXT">INmChannelDataNotify::DataReceived</A> method is called by the NetMeeting COM object whenever data is received. 

<P>The following sample code sends and receives normal, null-terminated text strings.

<PRE><FONT FACE="Courier" SIZE="2">HRESULT SendText(LPTSTR psz)<br>{<br>    HRESULT hr;<br>    ULONG cb = lstrlen(psz);<br> <br>    if ((0 == cb) || (NULL == g_pChannelData)<br>                  || (S_OK != g_pChannelData-&gt;IsActive()) {<br>        return S_FALSE; // data channel not available<br>    }<br>&#009;<br>    INmMember *pMember = GetSelectedMember();<br>    cb++; // include final null<br>    hr = g_pChannelData-&gt;SendData(pMember, cb, psz, 0);<br>    return hr;<br>}<br> <br>HRESULT STDMETHODCALLTYPE CChannelDataNotify::DataReceived(INmMember *pMember, ULONG uSize, LPBYTE pb, ULONG dwFlags)<br>{<br>    LPTSTR psz;<br>    psz = (LPTSTR) pb;<br>    DisplayMsg(psz, pMember, dwFlags);<br>    return S_OK;<br>}<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101030000" TARGET="TEXT">Back to Creating a Data Channel</A>

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000101000000" TARGET="TEXT">Back to list of Data Channel topics</A>






<H2><A NAME="tutorial_0009000102000000">Remotely Launching Your Program</A></H2>
<P>You've written an application that uses the Microsoft&#174; NetMeeting&#153; data channel to send information between the people in a conference. How do you ensure that your application is running on everyone's computer? This tutorial shows you!

<P>The NetMeeting COM interface enables programmers to quickly and easily design feature-rich, collaborative software. Using the NetMeeting COM interface, developers can create applications that enable users to work together over local or remote networks. To support this, your software may need to ensure that your application is running on another computer, or to cause another computer to launch a copy of your application. This tutorial provides a tour through the hierarchy of the NetMeeting COM interface and demonstrates how to launch copies of your programs on a remote computer. This is accomplished with a call to <A HREF="netm0016.htm#comobj2_000a000106010d00" TARGET="TEXT">INmConference::LaunchRemote</A> and several other important methods.

<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000102010000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Who Should Use This Tutorial?</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000102020000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Limitations</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000102030000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">LaunchRemote and the Registry</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000102040000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Setting and Getting Information for Remote Applications</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000102050000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Launching a Remote Application</A><BR>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm" TARGET="TEXT">Back to list of Tutorials</A>




<H3><A NAME="tutorial_0009000102010000">Who Should Use This Tutorial?</A></H3>
<P>This tutorial is for developers who want to learn how to launch applications on a remote computer. 

<P>This tutorial assumes that the developer has the ability to create and manage conferences and calls.

<P>This tutorial assumes that the reader is familiar with the Microsoft Component Object Model (COM). For more information on COM, see <I>Inside OLE 2</I> by Kraig Brockschmidt.

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000102000000" TARGET="TEXT">Back to list of Remote Launch topics</A>

<H3><A NAME="tutorial_0009000102020000">Limitations</A></H3>
<P>To launch an application on a remote computer:
<UL><LI>The application must be registered in the registry of the remote computer. 
<LI>The application must be present on the remote computer. 
<LI>Both the local and remote computer must be using NetMeeting or the NetMeeting COM object.
<LI>Both systems must be in a conference together.
</UL>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000102000000" TARGET="TEXT">Back to list of Remote Launch topics</A>

<H3><A NAME="tutorial_0009000102030000">LaunchRemote and the Registry</A></H3>
<P>Registry keys for programs that can be remotely launched with NetMeeting are stored in:

<P>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Conferencing\Applications

<P>Under the Applications key is one key for each program which can be launched remotely . This folder must be named with your application's globally unique identifier (GUID). The keys are described in the following section, <A HREF="netm0008.htm#tutorial_0009000102040000" TARGET="TEXT">Setting and Getting Information for Remote Applications</A>. 

<P>The following example shows the registry keys for the NetMeeting Chat program.

<PRE><FONT FACE="Courier" SIZE="2">HKEY_LOCAL_MACHINE\<br>  SOFTWARE\<br>    Microsoft\<br>      Conferencing\<br>        Applications\<br>          {340F3A60-7067-11D0-A041-444553540000}<br>            Directory    "C:\Program Files\NetMeeting"<br>            Path         "C:\Program Files\NetMeeting\cb32.exe"<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000102000000" TARGET="TEXT">Back to list of Remote Launch topics</A>

<H3><A NAME="tutorial_0009000102040000">Setting and Getting Information for Remote Applications</A></H3>
<P>Applications that can be launched remotely can be entered into the registry in any manner. However, the best and most convenient way to register an application is with the <A HREF="netm0014.htm#comobj2_000a000104010700" TARGET="TEXT">INmSysInfo::SetNmApp</A> method. <A HREF="netm0014.htm#comobj2_000a000104010700" TARGET="TEXT">SetNmApp</A> takes four parameters, which are used to register the application with the system. Its complement function, <A HREF="netm0014.htm#comobj2_000a000104010200" TARGET="TEXT">INmSysInfo::GetNmApp</A>, passes the first parameter as an "in" parameter, and the last three as "out" parameters to be filled in by the <A HREF="netm0014.htm#comobj2_000a000104010000" TARGET="TEXT">INmSysInfo</A> interface. Using <A HREF="netm0014.htm#comobj2_000a000104010700" TARGET="TEXT">SetNmApp</A> is preferred to modifying the registry directly because it will continue to work even if the registry keys are moved in a future release of NetMeeting.

<P>The following table describes the parameters you need to provide.

<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Parameter</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Usage/Meaning</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Registry key
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">REFGUID <I>rguid</I>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This GUID identifies the application and is needed when calling <A HREF="netm0016.htm#comobj2_000a000106010d00" TARGET="TEXT">LaunchRemote</A>. Each application to be launched remotely should have one GUID that can be used to register with any computer. For more information about creating and using GUIDs, see <I>Inside OLE, Second Edition</I>. 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">In the registry, the value of <I>rguid</I> is the folder name of the entry for this application.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">BSTR <I>bstrApplication</I>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The full path and file name of the module that will be started when there is an incoming request to launch the application associated with the <I>rguid</I> parameter. If the <I>bstrApplication</I> parameter is NULL, the module name must be the first white-space-delimited token in the <I>bstrCommandLine</I> string.
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is reflected in the registry as the Path registry key under the rguid folder.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">BSTR <I>bstrCommandLine</I>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the command line to execute. If this parameter is NULL, the function uses the string pointed to by <I>bstrApplication</I> as the command line.
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is reflected in the registry as the CmdLine registry key under the rguid folder.
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">BSTR <I>bstrDirectory</I>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the current drive and directory for the child process. The string must be a full path and file name that includes a drive letter. If this parameter is NULL, the new process is created with the same current drive and directory as the calling process.
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is reflected in the registry as the Directory registry key under the rguid folder.
</FONT></TD>
</TR>
</TABLE>
<P><B>Code Sample</B>

<P>The following code sample demonstrates how to use the SetNmApp method to add your application's keys to the registry. It also demonstrates the use of the GetNmApp method to read these values.

<PRE><FONT FACE="Courier" SIZE="2">HRESULT hr;<br>INmManager *pManager;<br>INmSysInfo *pSysInfo;<br>&#009;<br>// Add code to retrieve and initialize pManager<br>// and pSysInfo<br>&#009; <br>BSTR bstrApp, bstrCom, bstrDir;<br>LPTSTR_to_BSTR( &amp;bstrApp, "C:\RemoteDemo\Demo.exe" );<br>LPTSTR_to_BSTR( &amp;bstrCom, "C:\RemoteDemo\Demo Arg1 Arg2" );<br>LPTSTR_to_BSTR( &amp;bstrDir, "C:\RemoteDemo" );<br>&#009;<br>hr = pSysInfo-&gt;SetNmApp(<br>        IID_APPGUID, // a predefined GUID for this App<br>        bstrApp,     // Full path and file name<br>        bstrCom,     // Path and file with command-line args<br>        bstrDir );   // The working directory to use<br> <br>if( SUCCEEDED( hr ) ) {<br>    MessageBox( NULL,<br>               "We set this app as remote launchable",<br>               NULL,<br>               MB_OK );<br>} else {<br>    MessageBox( NULL,<br>               "We did not set this app as launchable",<br>               NULL,<br>               MB_OK );<br>}<br> <br>SysFreeString( bstrApp );<br>SysFreeString( bstrCom );<br>SysFreeString( bstrDir );<br> <br>hr = pSysInfo-&gt;GetNmApp(<br>        IID_APPGUID, // GUID for the app we want to know about<br>        &amp;bstrApp,    // the three BSTR parameters will<br>                     // be filled with info<br>        &amp;bstrCom,    // retrieved from the registry<br>        &amp;bstrDir );<br> <br>if( SUCCEEDED( hr ) ) {<br>    // do something with the BSTR parameters that have been filled<br>}<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000102000000" TARGET="TEXT">Back to list of Remote Launch topics</A>

<H3><A NAME="tutorial_0009000102050000">Launching a Remote Application</A></H3>
<P>Applications are launched remotely through a call to <A HREF="netm0016.htm#comobj2_000a000106010d00" TARGET="TEXT">INmConference::LaunchRemote</A>. <A HREF="netm0016.htm#comobj2_000a000106010d00" TARGET="TEXT">LaunchRemote</A> can be used to start an application for a specific member of a conference or for all members of the conference. 

<P><A HREF="netm0016.htm#comobj2_000a000106010d00" TARGET="TEXT">LaunchRemote</A> uses an application GUID to uniquely identify which application to launch. The application must already be properly registered in the registry of the remote computer, as described in the preceding section. Because one call to <B>LaunchRemote</B> may send out the same GUID to many computers, it is important that you register your application with the same GUID on every computer. 

<P>The following is a more detailed description of the required parameters:

<DL>
<DT>REFGUID <I>rguid</I>
 </DT><DD><I>rguid</I> is the GUID in the registry associated with the application being launched.
</DD><DT>INmMember *<I>pMember</I>
 </DT><DD><I>pMember</I> is a pointer to the member on whose computer the application should be launched. Using a NULL <I>pMember</I> instructs NetMeeting to start the application on every conference member's computer.
</DD></DL>
<P><A HREF="netm0016.htm#comobj2_000a000106010d00" TARGET="TEXT">LaunchRemote</A> returns an HRESULT that indicates whether or not the request to launch was successfully processed. It does not guarantee the remote instance of the application was started.

<P><B>Code Sample</B>

<P>The following code sample demonstrates how to use <A HREF="netm0016.htm#comobj2_000a000106010d00" TARGET="TEXT">LaunchRemote</A> to launch your application on remote computers.

<PRE><FONT FACE="Courier" SIZE="2">HRESULT hr;<br>INmConference *pConf;<br>IEnumNmMember *pEnum;<br>BOOL fLaunchOnEverybody;<br> <br>    // Add code to create a conference with members in pConf<br>    // ...<br>&#009;<br>if( fLaunchOnEverybody ) {<br> <br>    // Call LaunchRemote on all members of a conference<br>    hr = pConf-&gt;LaunchRemote(<br>               IID_APPGUID, // GUID for the app to be launched<br>               NULL );      // call everyone in conference<br>} else {<br> <br>    // Call particular members<br>    hr = pConf-&gt;EnumMember( &amp;pEnum );<br> <br>    if( SUCCEDED( hr ) ) {<br>        INmMember *pMem;<br>        ULONG uFetched;<br> <br>        while( SUCCEEDED( pEnum-&gt;Next( 1, &amp;pMem, &amp;uFetched ) {<br> <br>            if( IWantToLaunchOn( pMem ) ) {<br>                hr = LaunchRemote( IID_APPGUID,pMem );<br> <br>                if( FAILED( hr ) ) {<br>                    // There was a problem with the launch request<br>                }<br>            }<br>        }<br>    }<br>    // Could not enumerate members<br>}<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000102000000" TARGET="TEXT">Back to list of Remote Launch topics</A>






<H2><A NAME="tutorial_0009000103000000">ILS Extended Attributes</A></H2>
<P>The Microsoft&#174; Internet Locator Server (ILS) enables users of a collaborative software program (a game or conferencing package, for example) to locate other users running the same or compatible software and connect to them. To appear in a list of users, each person must log on to the ILS. The ILS tracks each logged-on person as a User object. Each User object has several standard attributes, including first name, last name, e-mail name, and country. In addition, an application can create extended attributes for its users and perform queries on these attributes. This tutorial demonstrates how to create and retrieve these extended attributes.

<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000103010000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Who Should Use This Tutorial?</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000103020000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Limitations</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000103030000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">The Client Side</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000103040000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">The Server Side</A><BR>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm" TARGET="TEXT">Back to list of Tutorials</A>




<H3><A NAME="tutorial_0009000103010000">Who Should Use This Tutorial?</A></H3>
<P>This tutorial is for developers and Web page authors who want to add extended attributes to ILS User objects and perform searches based on their custom extended attributes. 

<P>There are two ways to set/get extended attributes for a user: 
<UL><LI>Create the user on the client through the ILS APIs included in the NetMeeting&#153; SDK.
<LI>Create the user and attributes through server-side objects included in Microsoft ILS Server 1.0.
</UL>
<P>This tutorial assumes that the reader is familiar with the Microsoft Component Object Model (COM). For more information on COM, see <I>Inside OLE 2</I> by Kraig Brockschmidt.

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">Back to list of Extended Attributes topics</A>

<H3><A NAME="tutorial_0009000103020000">Limitations</A></H3>
<P>With ILS Server 1.0, all extended attribute names must be numerical text strings of type BSTR. This means you cannot create an attribute named "Player's Real Name." Instead, you must create a numbered attribute (for example, 605 or 574). Extended attributes should have numbers higher than 400. The table in the following section enumerates attribute names currently used by NetMeeting.

<P>Extended attributes are application specific, so AppFoo's attribute named 605 will not collide with AppBar's attribute named 605. For this reason, all searches based on extended attributes must include the application identifier. 

<P>NetMeeting uses the application identifier "ms-netmeeting". If your application uses this application identifier, you must choose extended attributes that do not collide with those used by NetMeeting.

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">Back to list of Extended Attributes topics</A>

<H3><A NAME="tutorial_0009000103030000">The Client Side</A></H3>
<P>NetMeeting uses extended attributes to indicate that an ILS user is in a call, whether or not the user has audio/video capabilities, and the self-declared "category" of user. The NetMeeting user interface also supports searching for users based on these attributes. 
<UL><LI><A HREF="netm0008.htm#tutorial_0009000103030100" TARGET="TEXT">Extended Attributes Used by NetMeeting 2.1</A>
<LI><A HREF="netm0008.htm#tutorial_0009000103030200" TARGET="TEXT">Setting Attributes</A>
<LI><A HREF="netm0008.htm#tutorial_0009000103030300" TARGET="TEXT">Retrieving Attributes</A>
</UL>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">Back to list of Extended Attributes topics</A>

<H4><A NAME="tutorial_0009000103030100">Extended Attributes Used by NetMeeting 2.1</A></H4>
<P>The following extended attributes are used by NetMeeting. 

<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Attribute <BR>"name"</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Possible values
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">400</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">In-call indicator</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"0","1"
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">501</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Ability to send audio</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"0","1"
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">503</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Ability to send video</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"0","1"
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">600</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">User category</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"1" = Personal<BR>"2" = Business<BR>"4" = Adult
</FONT></TD>
</TR>
</TABLE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103030000" TARGET="TEXT">Back to list of Client Side topics</A>

<H4><A NAME="tutorial_0009000103030200">Setting Attributes</A></H4>
<P>Extended attributes are set through the <A HREF="netm0032.htm#ilsapi_att_000a000205011000" TARGET="TEXT">IIlsUser::SetExtendedAttribute</A> method. This method takes two parameters&#151;the name of the extended attribute and the value. Both are of type BSTR.

<P>ILS treats the attribute names as a MAPI property tag and uses the PROP_TAG macro to encode the name before setting the attribute. You must perform the same encoding when retrieving a NetMeeting extended attribute so the names will match.

<P>For example, to set a user's status to be "currently in a call", use the following: 

<PRE><FONT FACE="Courier" SIZE="2">DWORD dwAtt = PROP_TAG(PT_STRING8, 400);<br>wsprintf(szName, TEXT("%lu"), dwAtt);<br> <br>LPTSTR_to_BSTR( szName, bstrName);<br>LPTSTR_to_BSTR( "1", bstrValue); // set user to be in a call<br> <br>IIlsUser::SetExtendedAttribute (bstrName, bstrValue);<br>IIlsUser::Update() <br></FONT></PRE>
<P><B>Note</B>  The implementation of the LPTSTR_to_BSTR macro has been left as an exercise for the reader. 
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103030000" TARGET="TEXT">Back to list of Client Side topics</A>

<H4><A NAME="tutorial_0009000103030300">Retrieving Attributes</A></H4>
<P>Calling <A HREF="netm0032.htm#ilsapi_att_000a000205010600" TARGET="TEXT">IIlsUser::GetExtendedAttribute</A> or <A HREF="netm0032.htm#ilsapi_att_000a000205010500" TARGET="TEXT">IIlsUser::GetAllExtendedAttributes</A> does not trigger a server query. All the desired user attribute names must be specified when the user object is obtained from the server. Subsequent calls to <A HREF="netm0032.htm#ilsapi_att_000a000205010600" TARGET="TEXT">GetExtendedAttribute</A> or <A HREF="netm0032.htm#ilsapi_att_000a000205010500" TARGET="TEXT">GetAllExtendedAttributes</A> will provide you with the attribute values.

<P>To retrieve a user object with extended attributes, you must create an Attribute object with the proper names and pass this object to the <A HREF="netm0031.htm#ilsapi_att_000a000204010800" TARGET="TEXT">IIlsMain::GetUser</A> or <A HREF="netm0031.htm#ilsapi_att_000a000204010700" TARGET="TEXT">IIlsMain::EnumUsers</A> method as shown in the following code:

<PRE><FONT FACE="Courier" SIZE="2">LPTSTR_to_BSTR(&amp;bstrEmpty, ""); <br> <br>// in a call<br>wsprintf(szProperty, TEXT("%lu"), PROP_TAG(PT_STRING8, 400)); <br> <br>LPTSTR_to_BSTR(&amp;bstrName, szProperty);<br>hr = pAttrib-&gt;SetAttribute(bstrName, bstrEmpty);<br> <br>// user type<br>wsprintf(szProperty, TEXT("%lu"), PROP_TAG(PT_STRING8, 600)); <br> <br>LPTSTR_to_BSTR(&amp;bstrName, szProperty);<br>hr = pAttrib-&gt;SetAttribute(bstrName, bstrEmpty);<br> <br>// Now that the attributes object is configured,<br>// get the user objects<br>hr = pIls-&gt;EnumUsers (pServer, pFilter, pAttrib, NULL, &amp;uReqID);<br></FONT></PRE>
<P>After the User object with the specified extended attributes is retrieved from the server, getting the value for just one attribute is easily done by calling <A HREF="netm0032.htm#ilsapi_att_000a000205010600" TARGET="TEXT">IIlsUser::GetExtendedAttribute</A>, as shown in the following code:

<PRE><FONT FACE="Courier" SIZE="2">DWORD dwAtt = PROP_TAG(PT_STRING8, 501);<br>wsprintf(szName, TEXT("%lu"), dwAtt);<br>LPTSTR_to_BSTR( szName, bstrName);<br>pUser-&gt;GetExtendedAttribute (bstrName, &amp;bstrValue);   <br></FONT></PRE>
<P>As previously stated, the User object must have been retrieved from the server with this attribute name specified. 

<P>Multiple attribute values can be returned by creating an Attribute object with the desired names and calling <A HREF="netm0032.htm#ilsapi_att_000a000205010500" TARGET="TEXT">IIlsUser::GetAllExtendedAttributes</A>. When the call to <A HREF="netm0032.htm#ilsapi_att_000a000205010500" TARGET="TEXT">GetAllExtendedAttributes</A> returns, the Attribute object will contain the correct values for the named attributes. Again, the User object should have been retrieved from the server with the extended attributes specified.

<PRE><FONT FACE="Courier" SIZE="2">LPTSTR_to_BSTR(&amp;bstrEmpty, "");   <br> <br>// in a call<br>wsprintf(szProperty, TEXT("%lu"), PROP_TAG(PT_STRING8, 400)); <br> <br>LPTSTR_to_BSTR(&amp;bstrName, szProperty);<br>hr = pAttrib-&gt;SetAttribute(bstrName, bstrEmpty);<br> <br>// user type<br>wsprintf(szProperty, TEXT("%lu"), PROP_TAG(PT_STRING8, 600)); <br> <br>LPTSTR_to_BSTR(&amp;bstrName, szProperty);<br>hr = pAttrib-&gt;SetAttribute(bstrName, bstrEmpty);<br> <br>//... set up other attributes here...<br>hr = pUser-&gt;GetAllExtendedAttributes(&amp;pAttrib);<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103030000" TARGET="TEXT">Back to list of Client Side topics</A>

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">Back to list of Extended Attributes topics</A>

<H3><A NAME="tutorial_0009000103040000">The Server Side</A></H3>
<P>This tutorial addresses how to author ILS-enabled ASP (Active Server Page) pages for use with applications developed using the ILS interfaces provided in the NetMeeting 2.1 SDK. You can create users and query users on the server using ASP objects. For more information and a general overview, see the <A HREF="http://www.microsoft.com/iis/learnaboutiis/activeserver/default.asp" TARGET="_top">Microsoft Active Server Pages Web site</A>.


<P>Normally, to access extended attributes using the ASP pages, a Web author can specify the attribute by querying the attribute named "ilstNNNN", where NNNN is the attribute number. However, due to a known problem with ILS Server 1.0, if you want to access an extended attribute that your application has set through the ILS API, you will need to add 0x8000 (32768 decimal) to the attribute number and then prefix it with the string "ilst." For example, to access an attribute named 601, you should refer to the attribute as "ilst33369" in the ASP code. This pertains only to cases where you are using ASP to access extended attributes that were created through the ILS client API. If you are both creating and retrieving the attributes through ASP, you do not need to perform this manipulation.

<P>The following code assumes that an ILS Server object called "ils" has been created according to the instructions in the ILS documentation, and a User object called "testuser" already exists.


<PRE><FONT FACE="Courier" SIZE="2">' Define the NM extended attribute names here<br>strAudio = "ilst33269" &#009;&#009;' 501<br>strVideo = "ilst33271" &#009;&#009;' 503<br>strIncall = "ilst33168"&#009;&#009;' 400<br>strUserType = "ilst33368"&#009;&#009;' 600<br> <br>' Set the extended attribute values<br>UserType = 2     ' Business user<br>Audio = 1        ' Audio capable<br>InCall = 0       ' Not currently in a call<br>Video = 1        ' Video capable<br>App = "ms-netmeeting"    ' App name<br> <br>' Build the string of values to modify for the application.<br>' modop=0 because extended attributes are application specific.<br>NMInfo = "cna=testuser" &amp; _<br>    "&amp;modop=0" &amp; _<br>    "&amp;obj=rtperson" &amp; _<br>    "&amp;appid=" &amp; App &amp; _<br>    "&amp;appmime=text/iuls" &amp; _<br>    "&amp;protid=h323" &amp; _<br>    "&amp;protmime=text/h323" &amp; _<br>    "&amp;" &amp; strVideo &amp; "=" &amp; Video &amp; _<br>    "&amp;" &amp; strIncall &amp; "=" &amp; Incall &amp; _<br>    "&amp;" &amp; strAudio &amp; "=" &amp; Audio &amp; _<br>    "&amp;" &amp; strUserType &amp; "=" &amp; UserType<br> <br>' The actual call to modify the user<br>modifyperson = ils.modify(NMInfo)<br></FONT></PRE>
<P>Retrieving users based on an extended attribute is fairly easy. Simply search for all user IDs where the specified attribute has the correct value. To find all users on the ILS who list themselves as business users, use the following query:

<PRE><FONT FACE="Courier" SIZE="2">' Build the string to specify the search criteria.<br>fndstr = "obj=rtperson" &amp; "&amp;maxreq=0" &amp; _<br>    "&amp;appid=" &amp; App &amp; "&amp;cna=*" &amp; _<br>    "&amp;" &amp; strUserType &amp; "=" &amp; UserType<br> <br>' The actual call to find the users<br>ils.find(fndstr)<br> </FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">Back to list of Extended Attributes topics</A>







<H2><A NAME="tutorial_0009000104000000">Implementing Filters in ILS Queries</A></H2>
<P>As the popularity and usage of ILS servers increases, it will become even more important to limit the amount of information returned from an ILS server query. The Microsoft&#174; Internet Locator Server (ILS) COM interfaces support the use of filters to restrict the amount of data returned from such a query. This tutorial demonstrates the procedure for constructing a custom filter that will allow your application to quickly locate a particular subset of users on the server.

<P>

<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000104010000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Who Should Use This Tutorial?</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000104020000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Limitations</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000104030000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Filter Objects</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000104040000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Creating a Filter Object</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000104050000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Creating Simple Filters</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000104060000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Creating Composite Filters</A><BR>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm" TARGET="TEXT">Back to list of Tutorials</A>




<H3><A NAME="tutorial_0009000104010000">Who Should Use This Tutorial?</A></H3>
<P>This tutorial is for developers who wish to define ILS query filter strings in order to target a particular user or group of users on a server. Filters can also be applied to protocols belonging to a given user.
<P>Before referencing this tutorial, developers should read the <A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">ILS Extended Attributes tutorial</A>.

<P>This tutorial assumes that the reader is familiar with the Microsoft&#174; Component Object Model (COM). For more information on COM, see <I>Inside OLE 2</I> by Kraig Brockschmidt.

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000104000000" TARGET="TEXT">Back to list of Implementing Filters topics</A>

<H3><A NAME="tutorial_0009000104020000">Limitations</A></H3>
<P>Both standard and extended attributes can be used in filtering. Attributes must be referenced by their index value&#151;not by actual text names (see the <A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">ILS Extended Attributes tutorial</A>). Standard attribute indices can be found in the ILS_STDATTR_* definitions in the Ils.idl file. Extended attribute indices must be defined by the user.

<P>All filter attribute values can use the wildcard character, * , to indicate they should match any string. However, ILS server version 1.0 does not support substring matching. Versions beyond 1.0 allow you to search for partial strings. For example, using a filter created from the string "($1=*)&amp;($5=woo*)" will return all identifiers for users whose last names begin with "woo".

<P>For versions 1.x of the ILS server, the only filter operations supported for composite filters is AND. The rest of the composite filter operations will be discussed in this document for future reference.

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000104000000" TARGET="TEXT">Back to list of Implementing Filters topics</A>

<H3><A NAME="tutorial_0009000104030000">Filter Objects</A></H3>
<P>A filter is either a simple filter or a composite filter. A simple filter is one that directly relates an attribute name and its target attribute value. A composite filter consists of either two or more simple filters or other composite filters.
<P>For example, the following filter pseudo-code will find all the people who are living in Redmond, WA, and running NetMeeting or any other H323-based application. Also, these people will have the last name 'Doe' but not have the first name 'John'. In this example, composite filter A consists of four subfilters: B, C, F, and H.

<PRE><FONT FACE="Courier" SIZE="2"><br>Composite filter A (AND)<br>{<br>    Simple filter B (lastname=Doe)<br>    Composite filter C (OR)<br>    {<br>        Simple filter D (appname=ms-netmeeting)<br>        Simple filter E (protid=h323)<br>    }<br>    Composite filter F (NOT)<br>    {<br>        Simple filter G (firstname=John)<br>    }<br>    Simple filter H (city=Redmond,WA)<br>}<br></FONT></PRE>
<P>The filter representation is based on LDAP filter design. However, the ILS filter interface cannot simply accept an LDAP filter string. There are two reasons:

<OL><LI>The application does not know the names of predefined attributes in the user objects, application objects, and protocol objects.
<LI>The application does not have the knowledge of the (client and/or server) representation of non-clear-text attribute values.
</OL>
<P>The corresponding LDAP filter string of the preceding filter pseudo-code will look like:

<PRE><FONT FACE="Courier" SIZE="2"><br>(&amp;(userid=*)(&amp;(lastname=Doe)<br>(|(appid=ms-netmeeting)(protid=h323))<br>(!(firstname=John))(city=Redmond,WA)))<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000104000000" TARGET="TEXT">Back to list of Implementing Filters topics</A>

<H3><A NAME="tutorial_0009000104040000">Creating a Filter Object</A></H3>
<P>There are two ways to create a filter object:
<UL><LI>Construct the filter one piece at a time using the <A HREF="netm0031.htm#ilsapi_att_000a000204010300" TARGET="TEXT">IIlsMain::CreateFilter</A> API.
<LI>Construct a string representing the filter and convert it to a filter object using <A HREF="netm0031.htm#ilsapi_att_000a000204010a00" TARGET="TEXT">IIlsMain::StringToFilter</A>.
</UL>
<P>The <A HREF="netm0031.htm#ilsapi_att_000a000204010300" TARGET="TEXT">IIlsMain::CreateFilter</A> is prototyped as follows:
<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsMain::CreateFilter(<br>                   [in] ILS_FILTER_TYPE FilterType;<br>                   [in] ILS_FILTER_OP FilterOp;<br>                   [out] IIlsFilter **ppFilter);<br></FONT></PRE>
<P>The <A HREF="netm0031.htm#ilsapi_att_000a000204010a00" TARGET="TEXT">IIlsMain::StringToFilter</A> is prototyped as follows:

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsMain::StringToFilter(<br>                   [in] BSTR bstrFilterString,<br>                   [out] IIlsFilter **ppFilter);<br></FONT></PRE>
<P>This method takes a regular expression filter string and converts it to a filter object (either composite or simple). For the filter in the previous example, the regular expression would look like:

<P>$1=* &amp; $5=Doe &amp; ($10=ms-netmeeting | $13=h323) &amp; $4!=John &amp; $6=Redmond, WA

<P>The application can also add parentheses around relations for clarity, such as:

<P>($1=*)&amp;(($5=Doe) &amp; (($10=ms-netmeeting) | ($13=h323)) &amp; ($4!=John) &amp; ($6=Redmond, WA))

<P>In this example, $1 indicates the user identifier attribute, $5 is last name, $10 is application identifier, $13 is protocol identifier, $4 is first name, and $6 is city name. The standard attributes are indexed because the application does not know the actual attribute names in the server. All the indices are defined as type ILS_STD_ATTR_NAME. Values of standard attributes are defined in the Ils.idl file and are also listed in the <A HREF="netm0032.htm#ilsapi_att_000a000205011200" TARGET="TEXT">IIlsUser::SetStandardAttribute</A> method description.

<P>All search strings must include ($1="pattern") to inform the server we are interested in receiving user information. Most filters will use a pattern of ($1=*) to return all users whose attributes match the remainder of the filter string.

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000104000000" TARGET="TEXT">Back to list of Implementing Filters topics</A>

<H3><A NAME="tutorial_0009000104050000">Creating Simple Filters</A></H3>
<P>The following methods are used to set the attributes of a simple filter once it has been created. All simple filters are comprised of name-value pairs, and both must be set for every simple filter.

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsFilter::SetStandardAttributeName(<br>                     [in] ILS_STD_ATTR_NAME usrStdAttr);<br></FONT></PRE>
<P><A HREF="netm0036.htm#ilsapi_att_000a000209010600" TARGET="TEXT">SetStandardAttributeName</A> sets a standard attribute name. The names are ILS_STD_ATTR_NAME indices.

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsFilter::SetExtendedAttributeName(<br>                     [in] BSTR bstrAnyAttrname);<br></FONT></PRE>
<P><A HREF="netm0036.htm#ilsapi_att_000a000209010500" TARGET="TEXT">SetExtendedAttributeName</A> sets an arbitrary attribute name. This must also be a numerical index. See the <A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">ILS Extended Attributes tutorial</A> for more information.

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsFilter::SetAttributeValue(<br>                     [in] BSTR bstrAttrValue);<br></FONT></PRE>
<P><A HREF="netm0036.htm#ilsapi_att_000a000209010400" TARGET="TEXT">SetAttributeValue</A> sets a target attribute value. All values are of type BSTR.

<P>The following code demonstrates how to create a simple filter and use it to locate users with the last name "Johnson".

<PRE><FONT FACE="Courier" SIZE="2"><br>// Create the simple filter object.<br>hr = CreateFilter(ILS_FITLERTYPE_SIMPLE, ILS_FILTEROP_EQUAL, &amp;pFilter);<br>if(SUCCEEDED(hr)<br>{<br>    // Set the filter name.<br>    hr = pFilter-&gt;SetStandardAttributeName(ILS_STDATTR_LAST_NAME);<br> <br>&#009;if(SUCCEEDED(hr)<br>    {<br>        // Set the filter value.<br>        LPTSTR_to_BSTR(&amp;bstrLastName, "Johnson");<br>        hr=pFilter-&gt;SetStandardAttributeValue( bstrLastName );<br>        ...<br> <br>&#009;&#009;// Use the filter we have created to enumerate users.<br>        hr = EnumUsers(pServer, pFilter, NULL, NULL, &amp;uReqID);<br>        ...<br>    }<br>}<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000104000000" TARGET="TEXT">Back to list of Implementing Filters topics</A>

<H3><A NAME="tutorial_0009000104060000">Creating Composite Filters</A></H3>
<P>The following methods are used in creating composite filters.

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsFilter::AddSubFilter (<br>                     [in] IIlsFilter *pFilter );<br></FONT></PRE>
<P><A HREF="netm0036.htm#ilsapi_att_000a000209010100" TARGET="TEXT">AddSubFilter</A> appends a filter to the list of subfilters in a composite filter. The order of subfilters is not important.

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsFilter::RemoveSubFilter (<br>                     [in] IIlsFilter *pFilter );<br></FONT></PRE>
<P><A HREF="netm0036.htm#ilsapi_att_000a000209010300" TARGET="TEXT">RemoveSubFilter</A> removes the specified filter from the list of subfilters in a composite filter. 

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT IIlsFilter::GetCount (<br>                     [out] ULONG *pcElements );<br></FONT></PRE>
<P><A HREF="netm0036.htm#ilsapi_att_000a000209010200" TARGET="TEXT">GetCount</A> counts the number of subfilters in a given composite filter.

<P>The following code sample creates a composite filter that can be used to search for an ILS user named "Joe Johnson".

<PRE><FONT FACE="Courier" SIZE="2"><br>// Create the first simple filter object.<br>hr = CreateFilter(<br>           ILS_FILTERTYPE_SIMPLE,<br>&#009;&#009;   ILS_FILTEROP_EQUAL,<br>&#009;&#009;   &amp;pFilterOne);<br> <br>if(SUCCEEDED(hr))<br>{<br>    // Set the filter name.<br>    hr = pFilterOne-&gt;SetStandardAttributeName(<br>                        ILS_STDATTR_LAST_NAME);<br>    if(SUCCEEDED(hr))<br>    {<br>        // Set the filter value.<br>        LPTSTR_to_BSTR(&amp;bstrLastName, "Johnson");<br>        hr=pFilterOne-&gt;SetStandardAttributeValue( bstrLastName );<br>        ...<br>    }<br>}<br> <br>// Create the second simple filter object.<br>hr = CreateFilter(<br>           ILS_FILTERTYPE_SIMPLE,<br>&#009;&#009;   ILS_FILTEROP_EQUAL,<br>&#009;&#009;   &amp;pFilterTwo);<br>&#009;&#009;   <br>if(SUCCEEDED(hr))<br>{<br>    // Set the filter name.<br>    hr = pFilterTwo-&gt;SetStandardAttributeName(<br>                     ILS_STDATTR_FIRST_NAME);<br> <br>    if(SUCCEEDED(hr))<br>    {<br>        // Set the filter value.<br>        LPTSTR_to_BSTR(&amp;bstrFirstName, "Joe*");<br>        hr=pFilterTwo-&gt;SetStandardAttributeValue(<br>                                bstrFirstName );<br>        ...<br>    }<br>}<br> <br>// Create the composite filter object.<br>hr = CreateFilter(<br>           ILS_FILTERTYPE_COMPOSITE,<br>           ILS_FILTEROP_AND,<br>           &amp;pFilterComp);<br> <br>if(SUCCEEDED(hr))<br>{<br>    // Add the subfilters to the composite filter.<br>    hr = pFilterComp-&gt;AddSubFilter(pFilterOne);<br>    // Note - Check for success here.<br>&#009;<br>    hr = pFilterComp-&gt;AddSubFilter(pFilterTwo);<br>    // Note - Check for success here.<br>}<br> <br>// Use the filter we have created to enumerate users.<br>hr = EnumUsers(<br>         pServer,<br>         pFilterComp,<br>         NULL, NULL,<br>         &amp;uReqID);<br></FONT></PRE>
<P>The preceding example is a long and complicated process for building a filter. However, such a process would allow an application to implement ad hoc filters through its own UI.

<P>The equivalent filter can be created using the <A HREF="netm0031.htm#ilsapi_att_000a000204010a00" TARGET="TEXT">StringToFilter</A> method as follows:

<PRE><FONT FACE="Courier" SIZE="2"><br>// Create the string.<br>LPTSTR szFilter[] =<br>    "(%lu = *) &amp; (%lu = %s) &amp; (%lu = %s)";<br> <br>wsprintf(<br>    szFilter,<br>    ILS_STDATTR_USER_ID,<br>    ILS_STDATTR_FIRST_NAME,<br>    "Joe",<br>    ILS_STDATTR_LAST_NAME,<br>    "Johnson");<br> <br>// Convert the string.<br>LPTSTR_to_BSTR(&amp;bstrFilter, szFilter);<br>hr = StringToFilter(bstrFilter, &amp;pFilter)<br> <br>// Use the filter we have created to enumerate users.<br>hr = EnumUsers(<br>          pServer,<br>          pFilter,<br>          NULL, NULL,<br>          &amp;uReqID);<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000104000000" TARGET="TEXT">Back to list of Implementing Filters topics</A>









<H2><A NAME="tutorial_0009000105000000">NetMeeting Functionality in Web Pages</A></H2>
<P>The Vbocx.htm sample HTML file demonstrates just how easy it is to add Microsoft&#174; NetMeeting&#153; functionality to your own Web pages. It utilizes the ActiveX&#153; control, Xmsconf.ocx, which is installed as part of NetMeeting. This sample demonstrates use of the control with Visual Basic&#174; Scripting Edition (VBScript).

<P>Some parts of this sample expect to be communicating with another instance of this sample on the remote computers. To fully exercise the sample, you should be running Vbocx.htm on every computer in the conference.


<H3><A NAME="tutorial_0009000105010000">Using the VBOCX Sample</A></H3>
<P>To use the VBOCX sample, simply click the link below. When the page is loaded, several edit controls and buttons will be displayed.

<P><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" ALT="Bullet" ><A CLASS=tctop HREF="vbocx.htm" TARGET="TEXT">Vbocx.htm sample Web page</A>

<P>To initiate a conference, type the user ID of the remote computer you want to call in the User Name control in the upper left and click the Call button.

<P><B>Note</B>  The user ID is set through the NetMeeting interface from the Tools menu.<P>To leave a conference, click the Leave button. The conference will end and the connection to all remote computers will be dropped.

<P>The Refresh button will rewrite the current list of shareable applications on the system to the Conference Log window.

<P>The Member Roster window displays the first and last names of everyone currently in the conference. Again, this information is set through the NetMeeting Tools menu.

<P>The Conference Log window displays the current state of the conference, messages received, and the list of shareable applications. This window fills up fast but does not automatically scroll. You might need to adjust the scroll bar to see the latest information.

<P>Transferring files between conference participants is accomplished by entering the fully qualified file name into the File To Transfer window and clicking the Send File button.

<P>The Received Text and Transmitted Text windows, and the Send Data button, comprise a limited chat functionality. Simply enter the data to send into the Transmitted Text window and click the Send Data button. The text will be sent to all conference participants and will appear in the Received Text window.

<P>Application sharing is performed by entering the name of the application into the Application To Share window and clicking the Share App button. Clicking the Unshare App button halts application sharing. The name of the application must exactly match one from the list of shareable applications on the system. This list is displayed when the Refresh button is clicked.

<P><B>Notes</B>  <UL><LI>You must have Microsoft NetMeeting installed in order to run this sample.
<LI>This sample works only with Internet Explorer version 3.0 and later.
</UL>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm" TARGET="TEXT">Back to list of Tutorials</A>





<H2><A NAME="tutorial_0009000106000000">Creating a NetMeeting Call Center</A></H2>
<P>

<P>Help desks, customer service centers, and other service offerings that allow customers to ask questions or place orders can benefit from the addition of online NetMeeting functionality. Such a solution would allow you to route each caller to the best qualified representative based on the caller's question.
<P>This tutorial explains how to set up a call center using NetMeeting and the NetMeeting Software Developers Kit.

<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000106010000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Who Should Use This Tutorial?</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000106020000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Limitations</A><BR>
<P><A CLASS=tctop HREF="netm0008.htm#tutorial_0009000106030000" TARGET=TEXT><IMG SRC="art/arrowb.gif" WIDTH="6" HEIGHT="11" BORDER=0 ALT="arrowb.gif">Creating A Call Center</A><BR>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm" TARGET="TEXT">Back to list of Tutorials</A>




<H3><A NAME="tutorial_0009000106010000">Who Should Use This Tutorial?</A></H3>
<P>This tutorial is for developers who want to build a help desk or customer service offering using NetMeeting. 

<P>This tutorial assumes that the reader is familiar with the Microsoft&#174; Component Object Model (COM). For more information on COM, see <I>Inside OLE 2</I> by Kraig Brockschmidt.

<P>This tutorial also assumes that the reader is familiar with tools and techniques used to author Web pages. For more information about Web page authoring, see the Microsoft Internet Client SDK. The complete Internet Client SDK is available for free download at the <A HREF="http://www.microsoft.com/msdn/sdk/inetsdk/asetup/default.htm" TARGET="_top">Internet Client SDK site</A>. 
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000106000000" TARGET="TEXT">Back to Creating a NetMeeting Call Center</A>


<H3><A NAME="tutorial_0009000106020000">Limitations</A></H3>
<P>This tutorial provides background information necessary to integrate NetMeeting calls with customer service solutions. It does not discuss how to integrate NetMeeting with specific customer service solutions you may be using.

<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000106000000" TARGET="TEXT">Back to Creating a NetMeeting Call Center</A>

<H3><A NAME="tutorial_0009000106030000">Creating A Call Center</A></H3>
<P>There are several ways to set up a NetMeeting call center. 
<UL><LI>Use call center software to automatically route calls to available operators or put calls on hold as they arrive. The Partners Page on the <A HREF="http://www.microsoft.com/isapi/redir.dll?PRD=netmtg&Ar=news/" TARGET="_top">Microsoft NetMeeting Web site</A> provides an up-to-date listing of Web call center products that are compatible with NetMeeting.
<LI>Write a custom application that sends information about the caller to an operator, and then have the operator return the call. This method is similar to the Web page method above, except that it uses an application rather than a Web page to send the information.
<LI>Have users browse a particular ILS server to find an available customer service representative. This solution is simple to implement as it only involves setting up an ILS server. However, it is only suitable if you do not expect to have many more callers than operators at any given time.
<LI>Use a Web page to queue up customers, and then have operators return the calls. This method enables you to gather information about the user before selecting a customer service representative. This method is described in the next section.
</UL>
<H4><A NAME="tutorial_0009000106030100">What does the end user see?</A></H4>
<P>If you choose to implement the last option from the list in the previous section, these are the steps the end user will follow:
<OL><LI>Click a link to the call center or service offering on your Web page.
<LI>Fill in a form that requests information like the customer's name and the reason for the call. Some information, such as the return ILS address your representative will call, can be detected and provided by an application you write.
<LI>Click a Submit button. This sends the information in the form to an application that you write. Your application determines how to route the call according to the information in the form.
<LI>Wait for the return call. A Web page will appear to explain that a customer service representative will call back shortly.
<LI>The customer receives a call from your customer service representative. 
</OL>
<H4><A NAME="tutorial_0009000106030200">What does the customer service representative see?</A></H4>
<P>Your customer service representative sees the customer's description of why he or she is calling, any other relevant information, and a Call-Back button to initiate a return NetMeeting call to the customer. The customer service representative gathers any information relevant to the customer's question and presses the Call-Back button. Pressing this button launches NetMeeting, if necessary, and returns the call.

<H4><A NAME="tutorial_0009000106030300">How does it work?</A></H4>
<P>You write Active Server Pages that gather the requisite information from the user. (Visit the <A HREF="http://www.microsoft.com/iis/learnaboutiis/activeserver/default.asp" TARGET="_top">Microsoft Active Server Pages Web site</A> for more information.)
<P>You can use the NetMeeting COM <I></I> method to detect the customer's system information and automatically provide some of the fields. Following is a snippet from the NetMeeting documentation for this method. 

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT GetProperty(<br>    [in] NM_SYSPROP uProp,<br>    [out] BSTR *pbstrName);<br></FONT></PRE>
<P>When called with the corresponding <I>uProp</I>, this method can return the following types of information (in the <I>pbstrName</I> parameter), which can be automatically entered into the fields on the Active Server Page.

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_EMAIL_NAME </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Customer's e-mail name.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_RESOLVE_NAME </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">ILS name that your customer service representative can use to call the customer back.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_SERVER_NAME </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Name of the ILS server used by the customer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_FIRST_NAME </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">User's first name.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_LAST_NAME </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">User'a last name.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_USER_CITY </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">City.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_USER_COMMENTS </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">User comments.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_USER_COUNTRY </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Country (two-letter <A HREF="netm0030.htm#ilsapi_att_000a000203010000" TARGET="TEXT">country codes</A>).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_USER_NAME </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">User's full name (first and last).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_USER_CATEGORY 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Can be one of the following:
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_CATEGORY_PERSONAL
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_CATEGORY_BUSINESS
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_CATEGORY_ADULT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_INSTALL_DIRECTORY </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Directory in which NetMeeting is installed.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_IS_RUNNING </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if Conf.exe is running (<I>pbstrName</I> will return 0 if it is not running, or 1 if it is running.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NM_SYSPROP_IN_CONFERENCE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the local system is currently in a conference (<I>pbstrName</I> will return 0 if it is not in a conference, or 1 if it is in a conference).
</FONT></TD></TR></TABLE>
<P>When the user clicks the Submit button, your Active Server Page should send all the information the user has entered as well as the information detected by <A HREF="netm0014.htm#comobj2_000a000104010400" TARGET="TEXT">INmSysInfo::GetProperty</A>.

<P>Each of your customer service representatives should log onto a designated ILS server. You can write code that queries the server for available customer service representatives and assigns the incoming service request to the appropriate customer service representative. The <A HREF="netm0008.htm#tutorial_0009000103000000" TARGET="TEXT">ILS Extended Attributes</A> tutorial contains information about setting and retrieving attributes of users logged onto an ILS server.

<P>Once your application has chosen a customer service representative to whom the call will be routed, you can display information on his or her screen about the customer and the customer's request. You can include a button or HTML link that enables the customer service representative to initiate a NetMeeting call to the customer.

<P>To include an HTML link, you can use the callto: protocol handler. A callto: link will work on any computer that has Microsoft&#174; Internet Explorer and NetMeeting installed.

Use one of the following formats to create a NetMeeting call link on your Web page:
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Format </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Example
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:<I>DNS name</I> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:machine2.test.com
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:<I>IP address</I> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:157.55.22.31
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:<I>e-mail address</I> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:user@test.com
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:<I>server name/e-mail address</I> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">callto:uls4.microsoft.com/user@test.com
</FONT></TD></TR></TABLE>
<P>For example, if John Smith wanted to embed a link in his Web page so that other people could call him, he would add the following HTML tag:
<PRE><FONT FACE="Courier" SIZE="2"><br>Call me using NetMeeting at<br>&lt;A HREF="callto:uls.microsoft.com/jsmith@somedomain.com&gt;<br>uls.microsoft.com/jsmith@somedomain.com&lt;/A&gt;<br></FONT></PRE>
<P>To include a call button in an application, use the <A HREF="netm0013.htm#comobj2_000a000103010200" TARGET="TEXT">INmManager::CreateCall</A> method to place a call to the user at the address the user provided on the Web-based form.

<PRE><FONT FACE="Courier" SIZE="2"><br>HRESULT CreateCall(<br>    [out] INmCall **ppCall,<br>    [in] NM_CALL_TYPE callType,<br>    [in] NM_ADDR_TYPE uType,<br>    [in] BSTR bstrAddr,<br>    [in] INmConference * pConference);<br></FONT></PRE>
<P><IMG SRC="art/uparrow.gif" WIDTH="14" HEIGHT="10" ALT="Up" ><A HREF="netm0008.htm#tutorial_0009000106000000" TARGET="TEXT">Back to Creating a NetMeeting Call Center</A>


<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<p>Last Updated: November 1, 1997
<br><A HREF="http://www.microsoft.com/isapi/redir.dll?PRD=msft&AR=copyright" TARGET="_top">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>

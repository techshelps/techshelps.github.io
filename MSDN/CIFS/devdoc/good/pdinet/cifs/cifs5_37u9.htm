<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Authentication</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_cifs_31"></a><i></i>Authentication</h2>
<p>
An CIFS server keeps an encrypted form of a client’s password.  To gain authenticated access to server resources, the server sends a challenge to the client, which the client responds to in a way that proves it knows the client's password. </p>
<p>
Authentication makes use of DES encryption [5] in block mode.  We denote the DES encryption function as E(K,D), which accepts a seven byte key (K) and an eight byte data block (D) and produces an eight byte encrypted data block as its value.  If the data to be encrypted is longer than eight bytes, the encryption function is applied to each block of eight bytes in sequence and the results are appended together.  If the key is longer than seven bytes, the data is first completely encrypted using the first seven bytes of the key, then the second seven bytes, etc., appending the results each time.  In other words, to encrypt the 16 byte quantity D0D1 with the 14 byte key K0K1, </p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;<code>E(K0K1,D0D1) = E(K0,D0)E(K0,D1)E(K1,D0)E(K1,D1)</code></p>
<p>
The <i>EncryptionKey</i> field in the <code>SMB_COM_NEGPROT</code> response contains an 8 byte challenge denoted below as "C8", chosen to be unique to prevent replay attacks; the client responds with a 24 byte response denoted "P24", and computed as described below. (Note: the name "<i>EncryptionKey</i>" is historical -- it doesn't actually hold an encryption key.)</p>
<p>
Clients send the response to the challenge in the <code>SMB_COM_TREE_CONNECT</code>, <code>SMB_COM_TREE_CONNECT_ANDX</code>, and/or <code>SMB_COM_SESSION_SETUP_ANDX</code> request which follows the <code>SMB_COM_NEGPROT</code> message exchange.  The server must validate the response by performing the same computations the client did to create it, and ensuring the strings match.</p>
<p>
If the comparisons fail, the client system may be incapable of encryption; if so the string may be the user password in clear text.  The server should try to validating the string as though it were the unencrypted password.</p>
<p>
The SMB field used to store the response depends upon the request:
<ul>
<li>
<i>Password</i> in <code>SMB_COM_TREE_CONNECT</code></li>
<li>
<i>Password</i> in <code>SMB_COM_TREE_CONNECT_ANDX</code></li>
<li>
<code><i>AccountPassword</i> in SMB</code>_COM_SESSION_SETUP_ANDX</li>
</ul>
<p>
(Note: again, the names are historical, and do not reflect this usage.)</p>
<p>
The contents of the response to the challenge depends on the CIFS dialect, as outlined in the following sections:</p>
<p>&nbsp;</p></body>
</HTML>

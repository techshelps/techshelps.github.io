<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extended File Attribute Encoding</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_cifs_54"></a><i></i>Extended File Attribute Encoding</h2>
<p>
The extended file attributes is a 32 bit value composed of attributes and flags.</p>
<p>
Any combination of the following attributes is acceptable, except all other file attributes override FILE_ATTRIBUTE_NORMAL:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_ARCHIVE</td>
<td width=12%>0x020</td>
<td width=55%>The file has not been archived since it was last modified. Applications use this attribute to mark files for backup or removal.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_COMPRESSED</td>
<td width=12%>0x800</td>
<td width=55%>The file or directory is compressed. For a file, this means that all of the data in the file is compressed. For a directory, this means that compression is the default for newly created files and subdirectories.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_NORMAL</td>
<td width=12%>0x080</td>
<td width=55%>The file has no other attributes set. This attribute is valid only if used alone.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_HIDDEN</td>
<td width=12%>0x002</td>
<td width=55%>The file is hidden. It is not to be included in an ordinary directory listing.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_READONLY</td>
<td width=12%>0x001</td>
<td width=55%>The file is read only. Applications can read the file but cannot write to it or delete it.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_TEMPORARY</td>
<td width=12%>0x100</td>
<td width=55%>The file is temporary</td>
</tr>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_DIRECTORY</td>
<td width=12%>0x010</td>
<td width=55%>The file is a directory</td>
</tr>
<tr valign=top>
<td width=33%>FILE_ATTRIBUTE_SYSTEM</td>
<td width=12%>0x004</td>
<td width=55%>The file is part of or is used exclusively by the operating system.</td>
</tr>
</table><br>
<p>
Any combination of the following flags is acceptable:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<td width=33%>FILE_FLAG_WRITE_THROUGH</td>
<td width=12%>0x80000000</td>
<td width=55%>Instructs the operating system to write through any intermediate cache and go directly to the file. The operating system can still cache write operations, but cannot lazily flush them.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_FLAG_NO_BUFFERING</td>
<td width=12%>0x20000000</td>
<td width=55%>Requests the server to open the file with no intermediate buffering or caching; the server is not obliged to honor the request. An application must meet certain requirements when working with files opened with FILE_FLAG_NO_BUFFERING. File access must begin at offsets within the file that are integer multiples of the volume's sector size; and must be for numbers of bytes that are integer multiples of the volume's sector size. For example, if the sector size is 512 bytes, an application can request reads and writes of 512, 1024, or 2048 bytes, but not of 335, 981, or 7171 bytes. </td>
</tr>
<tr valign=top>
<td width=33%>FILE_FLAG_RANDOM_ACCESS</td>
<td width=12%>0x10000000</td>
<td width=55%>Indicates that the application intends to access the file randomly. The server MAY use this flag to optimize file caching.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_FLAG_SEQUENTIAL_SCAN</td>
<td width=12%>0x08000000</td>
<td width=55%>Indicates that the file is to be accessed sequentially from beginning to end. Windows uses this flag to optimize file caching. If an application moves the file pointer for random access, optimum caching may not occur; however, correct operation is still guaranteed. Specifying this flag can increase performance for applications that read large files using sequential access. Performance gains can be even more noticeable for applications that read large files mostly sequentially, but occasionally skip over small ranges of bytes.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_FLAG_DELETE_ON_CLOSE</td>
<td width=12%>0x04000000</td>
<td width=55%>Requests that the server is delete the file immediately after all of its handles have been closed.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_FLAG_BACKUP_SEMANTICS</td>
<td width=12%>0x02000000</td>
<td width=55%>Indicates that the file is being opened or created for a backup or restore operation. The server SHOULD allow the client to override normal file security checks, provided it has the necessary permission to do so.</td>
</tr>
<tr valign=top>
<td width=33%>FILE_FLAG_POSIX_SEMANTICS</td>
<td width=12%>0x01000000</td>
<td width=55%>Indicates that the file is to be accessed according to POSIX rules. This includes allowing multiple files with names differing only in case, for file systems that support such naming. (Use care when using this option because files created with this flag may not be accessible by applications written for MS-DOS, Windows 3.<i>x</i>, or Windows NT.)</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Batch Oplocks</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_cifs_27"></a>Batch Oplocks</h3>
<p>
Batch oplocks are used where common programs on a client behave in such a way that causes the amount of network traffic on a wire to go beyond an acceptable level for the functionality provided by the program.</p>
<p>
For example, the command processor executes commands from within a command procedure by performing the following steps:
<ul>
<li>
Opening the command procedure.</li>
<li>
Seeking to the "next" line in the file.</li>
<li>
Reading the line from the file.</li>
<li>
Closing the file.</li>
<li>
Executing the command.</li>
</ul>
<p>
This process is repeated for each command executed from the command procedure file.  As is obvious, this type of programming model causes an inordinate amount of processing of files, thereby creating a lot of network traffic that could otherwise be curtailed if the program were to simply open the file, read a line, execute the command, and then read the next line.</p>
<p>
Batch oplocking curtails the amount of network traffic by allowing the client to skip the extraneous open and close requests.  When the command processor then asks for the next line in the file, the client can either ask for the next line from the server, or it may have already read the data from the file as readahead data.  In either case, the amount of network traffic from the client is greatly reduced.</p>
<p>
If the server receives either a rename or a delete request for the file that has a batch oplock, it must inform the client that the oplock is to be broken.  The client can then change to a mode where the file is repeatedly opened and closed.</p>
<p>
The batch oplock protocol is:</p>
<table border=1 cellspacing=4 cols=4 frame=box rules=cols>
<tr valign=top>
<td colspan=2 width=40%>Client</td>
<td width=9%>&lt;-&gt;</td>
<td width=51%>Server</td>
</tr>
<tr valign=top>
<td width=20%>A<br>
===========</td>
<td width=20%>B<br>
============</td>
<td width=9%><br>
====</td>
<td width=51%><br>
===============================</td>
</tr>
<tr valign=top>
<td width=20%>Open("foo")</td>
<td width=20%></td>
<td width=9%><code>-&gt;</code></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%></td>
<td width=9%><code>&lt;-</code></td>
<td width=51%>Open OK.  Batch oplock granted.</td>
</tr>
<tr valign=top>
<td width=20%>Read</td>
<td width=20%></td>
<td width=9%><code>-&gt;</code></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%></td>
<td width=9%><code>&lt;-</code></td>
<td width=51%>data</td>
</tr>
<tr valign=top>
<td width=20%>&lt;close&gt;</td>
<td width=20%></td>
<td width=9%></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%>&lt;open&gt;</td>
<td width=20%></td>
<td width=9%></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%>&lt;seek&gt;</td>
<td width=20%></td>
<td width=9%></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%></td>
<td width=9%><code>-&gt;</code></td>
<td width=51%>read</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%></td>
<td width=9%><code>&lt;-</code></td>
<td width=51%>data</td>
</tr>
<tr valign=top>
<td width=20%>&lt;close&gt;</td>
<td width=20%></td>
<td width=9%></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%>Open("foo")</td>
<td width=9%><code>-&gt;</code></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%></td>
<td width=9%><code>&lt;-</code></td>
<td width=51%>Oplock break to A</td>
</tr>
<tr valign=top>
<td width=20%>Close</td>
<td width=20%></td>
<td width=9%><code>-&gt;</code></td>
<td width=51%></td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%></td>
<td width=9%><code>&lt;-</code></td>
<td width=51%>Close OK to A</td>
</tr>
<tr valign=top>
<td width=20%></td>
<td width=20%></td>
<td width=9%><code>&lt;-</code></td>
<td width=51%>Open OK to B</td>
</tr>
</table><br>
<p>
When client A opens the file, it can request an oplock.  Provided no one else has the file open on the server, then the oplock is granted to client A.  Client A, in this case, keeps the file open for its caller across multiple open/close operations.  Data may be read ahead for the caller and other optimizations, such as buffering locks, can also be performed.</p>
<p>
When another client requests an open, rename, or delete operation to the server for the file, however, client A must cleanup its buffered data and synchronize with the server.  Most of the time this involves actually closing the file, provided that client A's caller actually believes that he has closed the file.  Once the file is actually closed, client B's open request can be completed.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>READ_MPX: Read Block Multiplex</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_cifs_120"></a><i></i>READ_MPX: Read Block Multiplex</h2>
<p>
The Read Block Multiplexed protocol is used to maximize the performance of reading a large block of data from the server to the client while still allowing other operations to take place between the client and server in the meantime.  The NT server supports SMB_COM_READ_MPX only over connectionless transports.</p>
<table border=1 cellspacing=4 cols=2 frame=box rules=cols>
<tr valign=top>
<td width=47%>Client Request<br>
================================</td>
<td width=53%>Description<br>
===================================</td>
</tr>
<tr valign=top>
<td width=47%>UCHAR WordCount;</td>
<td width=53%>Count of parameter words = 8</td>
</tr>
<tr valign=top>
<td width=47%>USHORT Fid;</td>
<td width=53%>File handle</td>
</tr>
<tr valign=top>
<td width=47%>ULONG Offset;</td>
<td width=53%>Offset in file to begin read</td>
</tr>
<tr valign=top>
<td width=47%>USHORT MaxCount;</td>
<td width=53%>Max bytes to return (maximum 65535)</td>
</tr>
<tr valign=top>
<td width=47%>USHORT MinCount;</td>
<td width=53%>Min bytes to return (normally 0)</td>
</tr>
<tr valign=top>
<td width=47%>ULONG Reserved1;</td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=47%>USHORT Reserved2;</td>
<td width=53%></td>
</tr>
<tr valign=top>
<td width=47%>USHORT ByteCount;</td>
<td width=53%>Count of data bytes = 0</td>
</tr>
</table><br>
<p>
<i>fid</i> identifies the resource being read, and may refer to a disk file or a spooled printer.</p>
<p>
<i>timeout</i> is the number of milliseconds to wait for completion <i>fid</i> refers to a named pipe.</p>
<table border=1 cellspacing=4 cols=2 frame=box rules=cols>
<tr valign=top>
<td width=50%>Server Response<br>
==================================</td>
<td width=50%>Description<br>
=================================</td>
</tr>
<tr valign=top>
<td width=50%>UCHAR WordCount;</td>
<td width=50%>Count of parameter words = 8</td>
</tr>
<tr valign=top>
<td width=50%>ULONG Offset;</td>
<td width=50%>Offset in file where data read</td>
</tr>
<tr valign=top>
<td width=50%>USHORT Count;</td>
<td width=50%>Total bytes being returned</td>
</tr>
<tr valign=top>
<td width=50%>USHORT Reserved;</td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%>USHORT DataCompactionMode;</td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%>USHORT Reserved;</td>
<td width=50%></td>
</tr>
<tr valign=top>
<td width=50%>USHORT DataLength;</td>
<td width=50%>Number of data bytes this buffer</td>
</tr>
<tr valign=top>
<td width=50%>USHORT DataOffset;</td>
<td width=50%>Offset (from header start) to data</td>
</tr>
<tr valign=top>
<td width=50%>USHORT ByteCount;</td>
<td width=50%>Count of data bytes</td>
</tr>
<tr valign=top>
<td width=50%>UCHAR Pad[];</td>
<td width=50%>Pad to SHORT or LONG</td>
</tr>
<tr valign=top>
<td width=50%>UCHAR Data[];</td>
<td width=50%>Data (size = DataLength)</td>
</tr>
</table><br>
<p>
Other requests may be active between the client and server.  The server responds with the one or more response messages as defined above until the requested data amount has been returned.  Each response contains the <i>pid</i> and <i>mid</i> of the original request and the <i>offset</i> and <i>count</i> of describing the placement of the data within the file.</p>
<p>
The client knows the maximum amount of data bytes which the server may return (from <i>maxcount</i> of the request).  Thus the client initializes its bytes expected variable to this value.  The server then informs the client of the actual amount being returned via each part of the response in <i>count</i>.  The server may reduce the expected bytes by lowering the total number of bytes expected in <i>count</i> in any response.</p>
<p>
When the amount of data bytes received (sum of the <i>datalength</i> fields) equals the total amount of data bytes expected (smallest <i>count</i> received), then the client  has received all the data bytes.  This allows the protocol to work even if the responses are received out of sequence.</p>
<p>
Note that <i>datalength</i> being returned here can not be larger than the smaller of the client's buffer size (as specified in <i>maxbuffersize</i> on the COM_SESSION_SETUP_AND_X client request SMB) or the server's buffer size (as specified in <i>maxbuffersize</i> of the COM_NEGOTIATE server response SMB).</p>
<p>
As is true in SMB_COM_READ, the total number of bytes returned may be less than the number requested only if a read specifies bytes beyond the current file size and <i>fid</i> refers to a disk file.  In this case only the bytes that exist are returned.  A read completely beyond the end of file will result in a single response with a zero value in <i>count</i>.  If the total number of bytes returned is less than the number of bytes requested, this indicates end of file (if reading other than a standard blocked disk file, only ZERO bytes returned indicates end of file).</p>
<p>
Once started, the Read Block Multiplexed operation is expected to go to completion.  The client is expected to receive all the responses generated by the server.  Conflicting commands (such as file close) must not be sent to the server while a multiplexed operation is in progress.</p>
<p>
The flow for the SMB_COM_READ_MPX protocol is:</p>
<pre><code>client ---------------&gt; Read MPX. request &gt;---------------------&gt; server
client &lt;--------------&lt; Read MPX response 1 with data &lt;---------- server
client &lt;--------------&lt; Read MPX response 2 with data &lt;---------- server
...
client &lt;--------------&lt; Read MPX response n with data &lt;---------- server
</code></pre>
<p>&nbsp;</p></body>
</HTML>

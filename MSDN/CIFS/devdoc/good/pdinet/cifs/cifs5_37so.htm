<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Level II Oplocks</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_cifs_28"></a>Level II Oplocks</h3>
<p>
Level II oplocks allow multiple clients to have the same file open, providing that no client is performing write operations to the file.  This is important for many environments because most compatibility mode opens from down-level clients map to an open request for shared read/write access to the file.  While it makes sense to do this, it also tends to break oplocks for other clients even though neither client actually intends to write to the file.</p>
<p>
The Level II oplock protocol is: </p>
<table border=1 cellspacing=4 cols=4 frame=box rules=cols>
<tr valign=top>
<td colspan=2 width=37%>Client</td>
<td width=8%>&lt;-&gt;</td>
<td width=55%>Server</td>
</tr>
<tr valign=top>
<td width=18%>A<br>
===========</td>
<td width=19%>B<br>
===========</td>
<td width=8%><br>
====</td>
<td width=55%><br>
====================================</td>
</tr>
<tr valign=top>
<td width=18%>Open("foo")</td>
<td width=19%></td>
<td width=8%><code>-&gt;</code></td>
<td width=55%></td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%></td>
<td width=8%><code>&lt;-</code></td>
<td width=55%>Open OK.  Exclusive oplock granted.</td>
</tr>
<tr valign=top>
<td width=18%>Read</td>
<td width=19%></td>
<td width=8%><code>-&gt;</code></td>
<td width=55%></td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%></td>
<td width=8%><code>&lt;-</code></td>
<td width=55%>data</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%>Open("foo")</td>
<td width=8%><code>-&gt;</code></td>
<td width=55%></td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%></td>
<td width=8%><code>&lt;-</code></td>
<td width=55%>Break to Level II oplock to A</td>
</tr>
<tr valign=top>
<td width=18%>lock(s)</td>
<td width=19%></td>
<td width=8%><code>-&gt;</code></td>
<td width=55%></td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%></td>
<td width=8%><code>&lt;-</code></td>
<td width=55%>lock(s) response(s)</td>
</tr>
<tr valign=top>
<td width=18%>done</td>
<td width=19%></td>
<td width=8%><code>-&gt;</code></td>
<td width=55%></td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=19%></td>
<td width=8%><code>&lt;-</code></td>
<td width=55%>Open OK.  Oplock II oplock granted to B</td>
</tr>
</table><br>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
This sequence of events is very much like an exclusive oplock.  The basic difference is that the server informs the client that it should break to a level II lock when no one has been writing the file.  That is, client A, for example, may have opened the file for a desired access of READ, and a share access of READ/WRITE.  This means, by definition, that client A will not performed any writes to the file.</p>
<p>
When client B opens the file, the server must synchronize with client A in case client A has any buffered locks.  Once it is synchronized, client B's open request may be completed.  Client B, however, is informed that he has a level II oplock, rather than an exclusive oplock to the file.</p>
<p>
In this case, no client that has the file open with a level II oplock may buffer any lock information on the local client machine.  This allows the server to guarantee that if any write operation is performed, it need only notify the level II clients that the lock should be broken without having to synchronize all of the accessors of the file.</p>
<p>
The level II oplock may be <i>broken to none</i>, meaning that some client that had the file opened has now performed a write operation to the file.  Because no level II client may buffer lock information, the server is in a consistent state.  The writing client, for example, could not have written to a locked range, by definition.  Read ahead data may be buffered in the client machines, however, thereby cutting down on the amount of network traffic required to the file.  Once the level II oplock is broken, however, the buffering client must flush its buffers and degrade to performing all operations on the file across the network.  No oplock break response is expected from a client when the server breaks a client from <i>level ii</i> to <i>none</i>.</p>
<p>&nbsp;</p></body>
</HTML>

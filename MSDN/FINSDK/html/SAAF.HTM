<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the Open Financial Connectivity SDK chapter, found in the Additional SDK Documentation section in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OFC Parse Functions</TITLE></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H3>OFC Parse Functions</H3><P>OFC parse functions define a method for parsing OFC document instances. They utilize the data structures previously described.</P>
<P></P>
<P>There are five parse function prototypes:</P>
<UL><LI>    OFC parse initialize - used it initialize the hash table for token lookup</LI><LI>    OFC batch request function - used to parse HTTP request files</LI><LI>    OFC batch response function - used to parse HTTP response files</LI><LI>    OFC file import function - used to parse OFC statement download files</LI><LI>    Parse cleanup function - used to free memory allocated by any of the above parsing functions </LI></UL><H4>InitOFCParse()</H4><P></P>
<P><BR></P>
<PRE>void  InitOFCParse()</PRE>
<P>This function MUST be called before any other parse calls are made to initialize the token lookup table.  For an OFC server this call should be made when the server application or DLL is first loaded.  </P>
<H4>RcParseOFCRequest()</H4><P></P>
<P><BR></P>
<PRE>int RcParseOFCRequest(
    void * pvRequest, 
    int cbRequest,
    POFCDOC * ppofcdoc);</PRE>
<P>The first parameter must point to a block of memory containing the OFC request file to be parsed. This function will convert the OFC request file into a series of NULL terminated string buffers during the parsing process. The size of the memory block will not be altered during this process.</P>
<P>The second parameter indicates the count of bytes in the memory block pointed to by <B>pvRequest</B>.</P>
<P>The third parameter is a pointer to a <B>POFCDOC</B>. The function will allocate memory for an <B>OFCDOC</B>, and assign the pointer to the <B>OFCDOC</B> structure if the function succeeds. The <B>OFCDOC</B> will contain the linked list of OFC transactions found in the request file. The function will allocate memory for all of the required <B>OFCTRN</B> structures, and the corresponding OFC transaction and aggregate structures. All of the string buffer pointers (szFoo) contained in the OFC transaction structures will point into the memory block containing the converted OFC file (pvResquest).</P>
<P></P>
<P>The function will return one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="297pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Meaning</B></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ALL_OK</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Successful</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OFC_ERROR</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Illegal OFC File</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>NO_MEMORY</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>A memory allocation failed</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_DTD_VER </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>The DTD version of the file passed in doesn't match the parser</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_CALL </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>An internal error, this should not occur after the Beta release.</P></FONT></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The caller of this function must call <B>CleanupOFCDOCParse()</B> in order to free the <B>OFCDOC</B> and it's associated structures when they are no longer needed. After calling <B>CleanupOFCDOCParse()</B>, the caller will then be responsible for freeing the memory block pointed to by <B>pvRequest</B>.</P>
<H4>RcParseOFCResponse()</H4><P></P>
<P><BR></P>
<PRE>int RcParseOFCResponse(
    void * pvResponse, 
    int cbResponse,
    POFCDOC * ppofcdoc);</PRE>
<P>The first parameter must point to a block of memory containing the OFC response file to be parsed. This function will convert the OFC response file into a series of NULL terminated string buffers during the parsing process. The size of the memory block will not be altered during this process.</P>
<P>The second parameter indicates the count of bytes in the memory block pointed to by <B>pvResponse</B>.</P>
<P>The third parameter is a pointer to a <B>POFCDOC</B>. The function will allocate memory for an <B>OFCDOC</B>, and assign the pointer to the <B>OFCDOC</B> structure if the function succeeds. The <B>OFCDOC</B> will contain the linked list of OFC transactions found in the response file. The function will allocate memory for all of the required <B>OFCTRN</B> structures, and the corresponding OFC transaction and aggregate structures. All of the string buffer pointers (szFoo) contained in the OFC transaction structures will point into the memory block containing the converted OFC file (pvResponse).</P>
<P>The function will return one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="162pt" VALIGN="TOP"><COL WIDTH="279pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Meaning</B></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ALL_OK</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Successful</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OFC_ERROR</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Illegal OFC File</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>NO_MEMORY</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>A memory allocation failed</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_DTD_VER </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>The DTD version of the file passed in doesn't match the parser</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_CALL </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>An internal error, this should not occur after the Beta release.</P></FONT></TD></TR></TBODY></TABLE>
<P><BR></P><P>The caller of this function must call <B>CleanupOFCDOCParse()</B> in order to free the <B>OFCDOC</B> and it's associated structures when they are no longer needed. After calling <B>CleanupOFCDOCParse()</B>, the caller will then be responsible for freeing the memory block pointed to by <B>pvResponse</B>.</P>
<H4>RcParseOFCStatement()</H4><P></P>
<P><BR></P>
<PRE>int RcParseOFCStatement(
    void * pvStatment, 
    int cbStatment,
    POFCDOC * ppofcdoc);</PRE>
<P>The first parameter must point to a block of memory containing the OFC statement file to be parsed. This function will convert the OFC statement file into a series of NULL terminated string buffers during the parsing process. The size of the memory block will not be altered during this process.</P>
<P>The second parameter indicates the count of bytes in the memory block pointed to by <B>pvStatement</B>.</P>
<P>The third parameter is a pointer to a <B>POFCDOC</B>. The function will allocate memory for an <B>OFCDOC</B>, and assign the pointer to the <B>OFCDOC</B> structure if the function succeeds. The <B>OFCDOC</B> will contain the linked list of OFC transactions found in the statement file. The function will allocate memory for all of the required <B>OFCTRN</B> structures, and the corresponding OFC transaction and aggregate structures. All of the string buffer pointers (szFoo) contained in the OFC transaction structures will point into the memory block containing the converted OFC file (pvStatement).</P>
<P>The function will return one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="140pt" VALIGN="TOP"><COL WIDTH="302pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Meaning</B></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ALL_OK</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Successful</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OFC_ERROR</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Illegal OFC File</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>NO_MEMORY</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>A memory allocation failed</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_DTD_VER </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>The DTD version of the file passed in doesn't match the parser</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_CALL </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>An internal error, this should not occur after the Beta release.</P></FONT></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The caller of this function must call <B>CleanupOFCDOCParse()</B> in order to free the <B>OFCDOC</B> and it's associated structures when they are no longer needed. After calling <B>CleanupOFCDOCParse()</B>, the caller will then be responsible for freeing the memory block pointed to by <B>pvStatement</B>.</P>
<H4>CleanupOFCDOCParse() </H4><P></P>
<P><BR></P>
<PRE>void CleanupOFCDOCParse(
    POFCDOC * ppofcdoc);</PRE>
<P>The first parameter is a pointer to a <B>POFCDOC</B>. This must point to the <B>OFCDOC</B> created as a result of calling one of the previous OFC parsing functions. This function will free all OFCDOC, OFCTRN, OFC transaction, and OFC aggregate structures created as a result of calling one of the parsing functions. The caller will be responsible for freeing the memory containing the converted OFC document instance.</P></FONT></BODY></HTML>

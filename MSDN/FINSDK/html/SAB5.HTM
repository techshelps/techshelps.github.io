<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the Open Financial Connectivity SDK chapter, found in the Additional SDK Documentation section in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OFC Build Functions</TITLE></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<H3>OFC Build Functions</H3><P>OFC build functions define a method for creating OFC document instances. They utilize the data structures previously described. The user's of these functions will be responsible for allocating and freeing all memory associated with the use of these functions. Their purpose is to guarantee the correct syntax of the resulting OFC document instance as opposed to creating the data structures and linked list of transactions.  </P>
<P>There are three build function prototypes:</P>
<UL><LI>    OFC batched request functions - used to create  HTTP request files</LI><LI>    OFC batched response functions - used to create HTTP response files</LI><LI>    OFC file import functions - used to create OFC statement download files</LI><LI>    Cleanup of OFC file memory</LI></UL><H4>RcCreateOFCRequest()</H4><P></P>
<P><BR></P>
<PRE>int RcCreateOFCRequest(
    OFCDOC * pofcdoc, 
    void ** ppvRequest,
    int * pcbRequest);</PRE>
<P>The first parameter must point to an <B>OFCDOC</B> structure containing the batch of transaction structures which are to be contained in the document instance being created. The first transaction structure must be a signon request (<B>SONRQ</B>) transaction structure. All maintenance transactions must follow the signon request. All financial transactions must be at the end of the linked list of transactions. If the signon transaction is missing, or the remaining transactions contained in the linked list are not in the required order, the function will fail.</P>
<P>The second parameter must be a valid pointer to a void pointer. If the function succeeds, this will contain a pointer to the block of memory allocated by the function. The memory will contain the resulting OFC document instance represented by the <B>OFCDOC</B> structure.</P>
<P>The third parameter must be a pointer to an integer value. If the function succeeds, this will contain the size of the memory allocated by the function.</P>
<P>The function will return one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="117pt" VALIGN="TOP"><COL WIDTH="324pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Meaning</B></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ALL_OK</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Successful</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OFC_ERROR</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Illegal OFC File</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>NO_MEMORY</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>A memory allocation failed</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_CALL </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>An internal error, this should not occur after the Beta release.</P></FONT></TD></TR></TBODY></TABLE>
<P><BR></P><H4>RcCreateOFCResponse()</H4><P></P>
<P><BR></P>
<PRE>int RcCreateOFCResponse(
    OFCDOC * pofcdoc, 
    void ** ppvResponse,
    int * pcbResponse);</PRE>
<P>The first parameter must point to an <B>OFCDOC</B> structure containing the batch of transaction structures which are to be contained in the document instance being created. The first transaction structure must be a signon response (<B>SONRS</B>) transaction structure. All maintenance transactions must follow the signon response. All financial transactions must be at the end of the linked list of transactions. If the signon transaction is missing, or the remaining transactions contained in the linked list are not in the required order, the function will fail.</P>
<P>The second parameter must be a valid pointer to a void pointer. If the function succeeds, this will contain a pointer to the block of memory allocated by the function. The memory will contain the resulting OFC document instance represented by the <B>OFCDOC</B> structure.</P>
<P>The third parameter must be a pointer to an integer value. If the function succeeds, this will contain the size of the memory allocated by the function.</P>
<P>The function will return one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="108pt" VALIGN="TOP"><COL WIDTH="333pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Meaning</B></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ALL_OK</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Successful</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OFC_ERROR</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Illegal OFC File</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>NO_MEMORY</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>A memory allocation failed</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_CALL </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>An internal error, this should not occur after the Beta release.</P></FONT></TD></TR></TBODY></TABLE>
<P><BR></P><H4>RcCreateOFCStatement()</H4><P></P>
<P><BR></P>
<PRE>int RcCreateOFCStatement(
    OFCDOC * pofcdoc, 
    void ** ppvStatement,
    int * pcbStatement);</PRE>
<P>The first parameter must point to an <B>OFCDOC</B> structure containing the statement download transaction structures which are to be contained in the document instance being built. If the transactions contained in the linked list contain anything other than <B>ACCTSTMT</B> transactions, the function will fail.</P>
<P>The second parameter must be a valid pointer to a void pointer. If the function succeeds, this will contain a pointer to the block of memory allocated by the function. The memory will contain the resulting OFC document instance represented by the <B>OFCDOC</B> structure.</P>
<P>The third parameter must be a pointer to an integer value. If the function succeeds, this will contain the size of the memory allocated by the function.</P>
<P>The function will return one of the following:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="149pt" VALIGN="TOP"><COL WIDTH="293pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Value</B></P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P><B>Meaning</B></P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>ALL_OK</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Successful</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>OFC_ERROR</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Illegal OFC File</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>NO_MEMORY</P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>A memory allocation failed</P></FONT></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>INVALID_CALL </P></FONT></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>An internal error, this should not occur after the Beta release.</P></FONT></TD></TR></TBODY></TABLE>
<P><BR></P><H4>CleanupOFCFile()</H4><P></P>
<P><BR></P>
<PRE>void CleanupOFCFile( 
void ** ppvOFCFile);</PRE>
<P>The first parameter is a pointer to the OFC file in memory. This must point to the memory created as a result of calling one of the previous OFC build  functions. This function will free the memory used by the OFC data.  </P></FONT></BODY></HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Put Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Put Statement</H1>Description</P>
Writes data from a <SPAN CLASS="pop">variable</SPAN> to a disk file.</P>
Syntax</P>
<SPAN CLASS="lee">Put</SPAN> [<SPAN CLASS="lee">#</SPAN>]<SPAN CLASS="p">filenumber</SPAN><B>,</B> [<SPAN CLASS="p">recnumber</SPAN>]<B>,</B> <SPAN CLASS="p">varname</SPAN></P>
The <SPAN CLASS="lee">Put </SPAN>statement syntax has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="296pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">filenumber</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Any valid <SPAN CLASS="pop">file number</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">recnumber</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="lee">Variant</SPAN> (<SPAN CLASS="lee">Long</SPAN>). Record number (<SPAN CLASS="lee">Random</SPAN> mode files) or byte number (<SPAN CLASS="lee">Binary</SPAN> mode files) at which writing begins.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of variable containing data to be written to disk.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Data written with <SPAN CLASS="lee">Put</SPAN> is usually read from a file with <SPAN CLASS="lee">Get</SPAN>.</P>
The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on. If you omit <SPAN CLASS="p">recnumber</SPAN>, the next record or byte after the last <SPAN CLASS="lee">Get</SPAN> or <SPAN CLASS="lee">Put</SPAN> statement or pointed to by the last <SPAN CLASS="lee">Seek</SPAN> function is written. You must include delimiting commas, for example:</P>

<pre><code>Put #4,,FileBuffer</code></pre>
For files opened in <SPAN CLASS="lee">Random</SPAN> mode, the following rules apply:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">If the length of the data being written is less than the length specified in the <SPAN CLASS="lee">Len</SPAN> clause of the <SPAN CLASS="lee">Open</SPAN> statement, <SPAN CLASS="lee">Put </SPAN>writes subsequent records on record-length boundaries. The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer. Because the amount of padding data can't be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written. If the length of the data being written is greater than the length specified in the <SPAN CLASS="lee">Len</SPAN> clause of the <SPAN CLASS="lee">Open</SPAN> statement, an error occurs.</LI><LI CLASS="ULI1">If the variable being written is a variable-length string, <SPAN CLASS="lee">Put</SPAN> writes a 2-byte descriptor containing the string length and then the variable. The record length specified by the <SPAN CLASS="lee">Len</SPAN> clause in the <SPAN CLASS="lee">Open</SPAN> statement must be at least 2 bytes greater than the actual length of the string.</LI><LI CLASS="ULI1">If the variable being written is a <SPAN CLASS="lee">Variant </SPAN>of a <SPAN CLASS="pop">numeric type</SPAN>, <SPAN CLASS="lee">Put</SPAN> writes 2 bytes identifying the <SPAN CLASS="lee">VarType</SPAN> of the <SPAN CLASS="lee">Variant</SPAN> and then writes the variable. For example, when writing a <SPAN CLASS="lee">Variant</SPAN> of <SPAN CLASS="lee">VarType</SPAN> 3, <SPAN CLASS="lee">Put</SPAN> writes 6 bytes: 2 bytes identifying the <SPAN CLASS="lee">Variant</SPAN> as <SPAN CLASS="lee">VarType</SPAN> 3 (<SPAN CLASS="lee">Long</SPAN>) and 4 bytes containing the <SPAN CLASS="lee">Long</SPAN> data. The record length specified by the <SPAN CLASS="lee">Len</SPAN> clause in the <SPAN CLASS="lee">Open</SPAN> statement must be at least 2 bytes greater than the actual number of bytes required to store the variable.


<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can use the <SPAN CLASS="lee">Put</SPAN> statement to write a <SPAN CLASS="lee">Variant</SPAN> <SPAN CLASS="pop">array</SPAN> to disk, but you can't use <SPAN CLASS="lee">Put</SPAN> to write a scalar <SPAN CLASS="lee">Variant</SPAN> containing an array to disk. You also can't use <SPAN CLASS="lee">Put</SPAN> to write objects to disk.</P>

</LI><LI CLASS="ULI1">If the variable being written is a <SPAN CLASS="lee">Variant</SPAN> of <SPAN CLASS="lee">VarType</SPAN> 8 (<SPAN CLASS="lee">String</SPAN>), <SPAN CLASS="lee">Put</SPAN> writes 2 bytes identifying the <SPAN CLASS="lee">VarType</SPAN>, 2 bytes indicating the length of the string, and then writes the string data. The record length specified by the <SPAN CLASS="lee">Len</SPAN> clause in the <SPAN CLASS="lee">Open</SPAN> statement must be at least 4 bytes greater than the actual length of the string.</LI><LI CLASS="ULI1">If the variable being written is a dynamic array, <SPAN CLASS="lee">Put</SPAN> writes a descriptor whose length equals 2 plus 8 times the number of dimensions, that is, 2 + 8 * <SPAN CLASS="p">NumberOfDimensions</SPAN>. The record length specified by the <SPAN CLASS="lee">Len</SPAN> clause in the <SPAN CLASS="lee">Open</SPAN> statement must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor. For example, the following array declaration requires 118 bytes when the array is written to disk.

<pre><code>Dim MyArray(1 To 5,1 To 10) As Integer</code></pre>
</LI><LI CLASS="ULI1">The 118 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 * 2), and 100 bytes for the data (5 * 10 * 2).</LI><LI CLASS="ULI1">If the variable being written is a fixed-size array, <SPAN CLASS="lee">Put</SPAN> writes only the data. No descriptor is written to disk.</LI><LI CLASS="ULI1">If the variable being written is any other type of variable (not a variable-length string or a <SPAN CLASS="lee">Variant</SPAN>), <SPAN CLASS="lee">Put</SPAN> writes only the variable data. The record length specified by the <SPAN CLASS="lee">Len</SPAN> clause in the <SPAN CLASS="lee">Open</SPAN> statement must be greater than or equal to the length of the data being written.</LI><LI CLASS="ULI1"><SPAN CLASS="lee">Put</SPAN> writes elements of <SPAN CLASS="pop">user-defined types</SPAN> as if each were written individually, except there is no padding between elements. On disk, a dynamic array in a user-defined type written with <SPAN CLASS="lee">Put</SPAN> is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions, that is, 2 + 8 * <SPAN CLASS="p">NumberOfDimensions</SPAN>. The record length specified by the <SPAN CLASS="lee">Len</SPAN> clause in the <SPAN CLASS="lee">Open</SPAN> statement must be greater than or equal to the sum of all the bytes required to write the individual elements, including any arrays and their descriptors.
</LI></UL></SPAN>For files opened in <SPAN CLASS="lee">Binary</SPAN> mode, all of the <SPAN CLASS="lee">Random</SPAN> rules apply, except:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The <SPAN CLASS="lee">Len</SPAN> clause in the <SPAN CLASS="lee">Open</SPAN> statement has no effect. <SPAN CLASS="lee">Put</SPAN> writes all variables to disk contiguously; that is, with no padding between records.</LI><LI CLASS="ULI1">For any array other than an array in a user-defined type, <SPAN CLASS="lee">Put</SPAN> writes only the data. No descriptor is written.</LI><LI CLASS="ULI1"><SPAN CLASS="lee">Put</SPAN> writes variable-length strings that are not elements of user-defined types without the 2-byte length descriptor. The number of bytes written equals the number of characters in the string. For example, the following statements write 10 bytes to file number 1:

<pre><code>VarString$ = String$(10," ")
Put #1,,VarString$</code></pre>
</LI></UL></SPAN>See Also</P>
<SPAN CLASS="eln">Get</SPAN> statement, <SPAN CLASS="eln">Open</SPAN> statement, <SPAN CLASS="eln">Seek</SPAN> function, <SPAN CLASS="eln">Type</SPAN> statement, <SPAN CLASS="eln">VarType</SPAN> function.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Put</SPAN> statement to write data to a file. Five records of the user-defined type <SPAN CLASS="cte">Record</SPAN> are written to the file.</P>

<pre><code>Type Record                                    ' Define user-defined type.
    ID As Integer
    Name As String * 20
End Type

Dim MyRecord As Record, RecordNumber        ' Declare variables.
' Open file for random access.
Open "TESTFILE" For Random As #1 Len = Len(MyRecord)
For RecordNumber = 1 To 5                ' Loop 5 times.
    MyRecord.ID = RecordNumber            ' Define ID.
    MyRecord.Name = "My Name" &amp; RecordNumber    ' Create a string.
    Put #1, RecordNumber, MyRecord        ' Write record to file.
Next RecordNumber
Close #1                                        ' Close file.</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Write # Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Write # Statement</H1>Description</P>
Writes data to a sequential file.</P>
Syntax</P>
<SPAN CLASS="lee">Write #</SPAN><SPAN CLASS="p">filenumber</SPAN><SPAN CLASS="p">,</SPAN> [<SPAN CLASS="p">outputlist</SPAN>]</P>
The <SPAN CLASS="lee">Write #</SPAN> statement syntax has these parts:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="296pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">filenumber</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Any valid <SPAN CLASS="pop">file number</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">outputlist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. One or more comma-delimited <SPAN CLASS="pop">numeric expressions</SPAN> or <SPAN CLASS="pop">string expressions</SPAN> to write to a file.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Data written with <SPAN CLASS="lee">Write #</SPAN> is usually read from a file with <SPAN CLASS="lee">Input #</SPAN>.</P>
If you omit <SPAN CLASS="p">outputlist</SPAN> and include a comma after <SPAN CLASS="p">filenumber</SPAN>, a blank line is printed to the file. Multiple expressions can be separated with a space, a semicolon, or a comma. A space has the same effect as a semicolon.</P>
When <SPAN CLASS="lee">Write # </SPAN>is used to write data to a file, several universal assumptions are followed so the data can always be read and correctly interpreted using <SPAN CLASS="lee">Input #</SPAN>, regardless of <SPAN CLASS="pop">locale</SPAN>:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Numeric data is always written using the period as the decimal separator.</LI><LI CLASS="ULI1">For <SPAN CLASS="lee">Boolean</SPAN> data, either <SPAN CLASS="cte">#TRUE#</SPAN> or <SPAN CLASS="cte">#FALSE#</SPAN> is printed. The <SPAN CLASS="lee">True</SPAN> and <SPAN CLASS="lee">False</SPAN> <SPAN CLASS="pop">keywords</SPAN> are not translated, regardless of locale.</LI><LI CLASS="ULI1"><SPAN CLASS="lee">Date</SPAN> data is written to the file using the <SPAN CLASS="pop">universal date format</SPAN>. When either the date or the time component is missing or zero, only the part provided gets written to the file.</LI><LI CLASS="ULI1">Nothing is written to the file if <SPAN CLASS="p">outputlist</SPAN> data is <SPAN CLASS="lee">Empty</SPAN>. However, for <SPAN CLASS="lee">Null</SPAN> data, <SPAN CLASS="cte">#NULL#</SPAN> is written.</LI><LI CLASS="ULI1">If <SPAN CLASS="p">outputlist</SPAN> data is <SPAN CLASS="lee">Null</SPAN> data, <SPAN CLASS="cte">#NULL#</SPAN> is written to the file.</LI><LI CLASS="ULI1">For <SPAN CLASS="lee">Error</SPAN> data, the output appears as <SPAN CLASS="cte">#ERROR errorcode#</SPAN>. The <SPAN CLASS="lee">Error</SPAN> keyword is not translated, regardless of locale.
</LI></UL></SPAN>Unlike the <SPAN CLASS="lee">Print #</SPAN> statement, the <SPAN CLASS="lee">Write #</SPAN> statement inserts commas between items and quotation marks around strings as they are written to the file. You don't have to put explicit delimiters in the list. <SPAN CLASS="lee">Write #</SPAN> inserts a newline character, that is, a carriage return–linefeed (<SPAN CLASS="lee">Chr(</SPAN>13<SPAN CLASS="lee">)</SPAN> + <SPAN CLASS="lee">Chr(</SPAN>10<SPAN CLASS="lee">)</SPAN>), after it has written the final character in <SPAN CLASS="p">outputlist</SPAN> to the file.</P>
See Also</P>
<B>Input</B> <SPAN CLASS="eln">#</SPAN> statement, <SPAN CLASS="eln">Open</SPAN> statement, <B>Print</B> <SPAN CLASS="eln">#</SPAN> statement.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Write #</SPAN> statement to write raw data to a sequential file.</P>

<pre><code>Open "TESTFILE" For Output As #1    ' Open file for output.
Write #1, "Hello World", 234        ' Write comma-delimited data.
Write #1,                                ' Write blank line.

Dim MyBool, MyDate, MyNull, MyError
' Assign Boolean, Date, Null, and Error values.
MyBool = False : MyDate = #February 12, 1969# : MyNull = Null
MyError = CVErr(32767)
' Boolean data is written as #TRUE# or #FALSE#. Date literals are 
' written in universal date format, for example, #1994-07-13# 
' represents July 13, 1994. Null data is written as #NULL#. 
' Error data is written as #ERROR errorcode#.
Write #1, MyBool ; " is a Boolean value"
Write #1, MyDate ; " is a date"
Write #1, MyNull ; " is a null value"
Write #1, MyError ; " is an error value"
Close #1                                    ' Close file.</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

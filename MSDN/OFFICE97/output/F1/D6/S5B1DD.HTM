<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>#Const Directive</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>#Const Directive</H2>Description</P>
Used to define <SPAN CLASS="pop">conditional compiler constants</SPAN> for Visual Basic.</P>
Syntax</P>
<SPAN CLASS="lee">#Const</SPAN> <SPAN CLASS="p">constname</SPAN> = <SPAN CLASS="p">expression</SPAN></P>
The <SPAN CLASS="lee">#Const</SPAN> compiler directive syntax has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="291pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">constname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required; <SPAN CLASS="lee">Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>). Name of the <SPAN CLASS="pop">constant</SPAN>; follows standard <SPAN CLASS="pop">variable</SPAN> naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">expression</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Literal, other conditional compiler constant, or any combination that includes any or all arithmetic or logical operators except <SPAN CLASS="lee">Is</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Conditional compiler constants are always Private to the <SPAN CLASS="pop">module</SPAN> in which they appear. It is not possible to create Public compiler constants using the <SPAN CLASS="lee">#Const</SPAN> directive. <SPAN CLASS="lee">Public</SPAN> compiler constants can only be created in the user interface.</P>
Only conditional compiler constants and literals can be used in <SPAN CLASS="p">expression</SPAN>. Using a standard constant defined with <SPAN CLASS="lee">Const</SPAN>, or using a constant that is undefined, causes an error to occur. Conversely, constants defined using the <SPAN CLASS="lee">#Const</SPAN> <SPAN CLASS="pop">keyword</SPAN> can only be used for conditional compilation.</P>
Conditional compiler constants are always evaluated at the <SPAN CLASS="pop">module level</SPAN>, regardless of their placement in code.</P>
See Also</P>
<B>#If...Then...#</B><SPAN CLASS="eln">Else</SPAN> directive, <SPAN CLASS="eln">Const</SPAN> statement.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, you can define a public <SPAN CLASS="pop">conditional compiler constant</SPAN> in the <SPAN CLASS="pop">Declarations section</SPAN> of a module. A public compiler constant is applicable to all modules in the current database, but not in any other database.</P>
You can also declare a public compiler constant by clicking <SPAN CLASS="eln">Options</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu, then clicking the <SPAN CLASS="eln">Advanced</SPAN> tab. Enter the constant in the <SPAN CLASS="eln">Conditional Compilation Arguments</SPAN> box.</P>
For example, you might enter the following expression into the <SPAN CLASS="eln">Conditional Compilation Arguments</SPAN> box.</P>

<pre><code>conDebug = 1</code></pre>
You can use a public compiler constant in code in any module. For example, you can create an <SPAN CLASS="eln">#If...Then...#Else</SPAN> construct to optionally run debug code.</P>

<pre><code>#If conDebug = 1 Then
    .        ' Run debug code.
    .
    .
#Else
    .        ' Run streamlined code.
    .
    .
#End If</code></pre>
To create multiple public conditional compilation constants, declare them on separate lines in the Declaration section. In the <SPAN CLASS="eln">Conditional Compilation Arguments</SPAN> box, separate them with colons. For example, you can enter the following conditional compilation constants in the <SPAN CLASS="eln">Conditional Compilation Arguments</SPAN> box.</P>

<pre><code>conActiveLanguage = 1 : conDebug = 1</code></pre>
You can use a logical operator to include both constants in an <SPAN CLASS="eln">#If...Then...#Else</SPAN> construct. In the following example, the first segment of code runs only if both constants are currently equal to 1, so that the expression containing the constants is true.</P>

<pre><code>#If (conActiveLanguage = 1 And conDebug = 1) Then
    .        ' Run debug code for the active language version.
    .
    .
#Else
    .        ' Run another code segment.
    .
    .
#End If</code></pre>
If either or both constants have a different value, then the code in the <SPAN CLASS="eln">#Else</SPAN> portion of the construct runs. To change which block of code runs, you can simply change the values of the constants.</P>
<SPAN CLASS="nh">Notes</SPAN></P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">A conditional compilation constant is always evaluated with a text-based string comparison method. This evaluation is equivalent to having an <SPAN CLASS="eln">Option Compare Text</SPAN> statement in the module and occurs even if the module contains an <SPAN CLASS="eln">Option Compare Database</SPAN> statement.</LI><LI CLASS="ULI1">When writing code for conditional compilation, it may be less confusing to view one procedure at a time rather than all procedures in the module. To change how you view your code, click <SPAN CLASS="eln">Options</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu, then click the <SPAN CLASS="eln">Module</SPAN> tab. Under <SPAN CLASS="eln">Code View</SPAN>, clear the <SPAN CLASS="eln">Full Module View</SPAN> check box.
</LI></UL></SPAN>Example</P>
This example uses the <SPAN CLASS="lee">#Const</SPAN> directive to declare conditional compiler constants for use in<SPAN CLASS="l"> </SPAN><SPAN CLASS="lee">#If...#Else...#End If</SPAN> constructs.</P>

<pre><code>#Const DebugVersion = 1            ' Will evaluate true in #If block.</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

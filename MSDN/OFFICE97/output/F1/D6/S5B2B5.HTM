<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Static Statement</H1>Description</P>
Used at <SPAN CLASS="pop">procedure level</SPAN> to declare variables and allocate storage space. Variables declared with the <SPAN CLASS="lee">Static</SPAN> statement retain their values as long as the code is running.</P>
Syntax</P>
<SPAN CLASS="lee">Static</SPAN> <SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">subscripts</SPAN>]<SPAN CLASS="lee">)</SPAN>] [<SPAN CLASS="lee">As</SPAN> [<SPAN CLASS="lee">New</SPAN>] <SPAN CLASS="p">type</SPAN>] [<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">subscripts</SPAN>]<SPAN CLASS="lee">)</SPAN>]<BR>ú[<SPAN CLASS="lee">As</SPAN> [<SPAN CLASS="lee">New</SPAN>] <SPAN CLASS="p">type</SPAN>]] <SPAN CLASS="lee">. . .</SPAN></P>
The <SPAN CLASS="lee">Static</SPAN> statement syntax has these parts:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the variable; follows standard <SPAN CLASS="pop">variable</SPAN> naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">subscripts</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Dimensions of an <SPAN CLASS="pop">array</SPAN> variable; up to 60 multiple dimensions may be declared. The <SPAN CLASS="p">subscripts</SPAN> <SPAN CLASS="pop">argument</SPAN> uses the following syntax:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN> [<SPAN CLASS="lee">,</SPAN>[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">When not explicitly stated in <SPAN CLASS="p">lower</SPAN>, the lower bound of an array is controlled by the <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement. The lower bound is zero if no <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement is present.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">New</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Keyword</SPAN> that enables implicit creation of an object. If you use <SPAN CLASS="lee">New</SPAN> when declaring the <SPAN CLASS="pop">object variable</SPAN>, a new instance of the object is created on first reference to it, so you don't have to use the <SPAN CLASS="lee">Set</SPAN> statement to assign the object reference. The <SPAN CLASS="lee">New</SPAN> keyword can't be used to declare variables of any intrinsic <SPAN CLASS="pop">data type</SPAN> and can't be used to declare instances of dependent objects.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Data type of the variable; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN>, (for variable-length strings), <SPAN CLASS="lee">String</SPAN> * <SPAN CLASS="p">length</SPAN> (for fixed-length strings), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>, a <SPAN CLASS="pop">user-defined type</SPAN>, or an <SPAN CLASS="pop">object type</SPAN>. Use a separate <SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN> clause for each variable being defined.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Once <SPAN CLASS="pop">module</SPAN> code is running, variables declared with the <SPAN CLASS="lee">Static</SPAN> <SPAN CLASS="pop">statement</SPAN> retain their value until the module is reset or restarted. Use the <SPAN CLASS="lee">Static</SPAN> statement in nonstatic <SPAN CLASS="pop">procedure</SPAN>s to explicitly declare variables that are visible only within the procedure, but whose lifetime is the same as the module in which the procedure is defined.</P>
Use a <SPAN CLASS="lee">Static</SPAN> statement within a procedure to declare the data type of a variable that retains its value between procedure calls. For example, the following statement declares a fixed-size array of integers:</P>

<pre><code>Static EmployeeNumber(200) As Integer</code></pre>
The following statement declares a variable for a new instance of a worksheet:</P>

<pre><code>Static X As New Worksheet</code></pre>
If the <SPAN CLASS="lee">New</SPAN> keyword is not used when declaring an object variable, the variable that refers to the object must be assigned an existing object using the <SPAN CLASS="lee">Set</SPAN> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <SPAN CLASS="lee">Nothing</SPAN>, which indicates that it doesn't refer to any particular instance of an object. When you use the <SPAN CLASS="lee">New</SPAN> keyword in the <SPAN CLASS="pop">declaration</SPAN>, an instance of the object is created on the first reference to the object.</P>
If you don't specify a data type or object type, and there is no <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statement in the module, the variable is <SPAN CLASS="lee">Variant</SPAN> by default.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;The <SPAN CLASS="lee">Static</SPAN> statement and the <SPAN CLASS="lee">Static</SPAN> keyword are similar, but used for different effects. If you declare a procedure using the <SPAN CLASS="lee">Static</SPAN> keyword (as in <SPAN CLASS="cte">Static Sub CountSales ()</SPAN>), the storage space for all local variables within the procedure is allocated once, and the value of the variables is preserved for the entire time the program is running. For nonstatic procedures, storage space for variables is allocated each time the procedure is called and released when the procedure is exited. The <SPAN CLASS="lee">Static</SPAN> statement is used to declare specific variables within nonstatic procedures to preserve their value for as long as the program is running.</P>
When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string (" "), and a fixed-length string is filled with zeros. <SPAN CLASS="lee">Variant</SPAN> variables are initialized to Empty. Each element of a user-defined type variable is initialized as if it were a separate variable.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;When you use <B>Static</B> statements within a procedure, put them at the beginning of the procedure with other declarative statements such as <B>Dim</B>.</P>
See Also</P>
<SPAN CLASS="eln">Array</SPAN> function, <SPAN CLASS="eln">Dim</SPAN> statement, <SPAN CLASS="eln">Function</SPAN> statement, <B>Option</B> <SPAN CLASS="eln">Base</SPAN> statement, <SPAN CLASS="eln">Private</SPAN> statement, <SPAN CLASS="eln">Public</SPAN> statement, <SPAN CLASS="eln">ReDim</SPAN> statement, <SPAN CLASS="eln">Sub</SPAN> statement.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Static</SPAN> statement to retain the value of a variable for as long as module code is running.</P>

<pre><code>' Function definition.
Function KeepTotal(Number)
    ' Only the variable Accumulate preserves its value between calls.
    Static Accumulate
    Accumulate = Accumulate + Number
    KeepTotal = Accumulate
End Function

' Static function definition.
Static Function MyFunction(Arg1, Arg2, Arg3)
    ' All local variables preserve value between function calls.
    Accumulate = Arg1 + Arg2 + Arg3
    Half = Accumulate / 2
    MyFunction = Half
End Function</code></pre>
Example (Microsoft Excel)</P>
This example uses the worksheet function <SPAN CLASS="lee">Pmt</SPAN> to calculate a home mortgage loan payment. Note that this example uses the <SPAN CLASS="lee">InputBox</SPAN> method instead of the <SPAN CLASS="lee">InputBox</SPAN> function so that the method can perform type checking. The <SPAN CLASS="lee">Static</SPAN> statements cause Visual&nbsp;Basic to retain the values of the three variables; these are displayed as default values the next time you run the example.</P>

<pre><code>Static loanAmt
Static loanInt
Static loanTerm
loanAmt = Application.InputBox _
    (Prompt:="Loan amount (100,000 for example)", _
    Default:=loanAmt, Type:=1)
loanInt = Application.InputBox _
    (Prompt:="Annual interest rate (8.75 for example)", _
    Default:=loanInt, Type:=1)
loanTerm = Application.InputBox _
    (Prompt:="Term in years (30 for example)", _
    Default:=loanTerm, Type:=1)
payment = Application.Pmt(loanInt / 1200, loanTerm * 12, loanAmt)
MsgBox "Monthly payment is " &amp; Format(payment, "Currency")</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

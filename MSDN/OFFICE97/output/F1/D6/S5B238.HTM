<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetObject Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>GetObject Function</H2>Description</P>
Returns a reference to an <SPAN CLASS="pop">ActiveX object</SPAN> from a file.</P>
Syntax</P>
<SPAN CLASS="lee">GetObject(</SPAN>[<SPAN CLASS="narg">pathname</SPAN>] [<SPAN CLASS="lee">, </SPAN><SPAN CLASS="narg">class</SPAN>]<SPAN CLASS="lee">)</SPAN></P>
The <SPAN CLASS="lee">GetObject</SPAN> function syntax has these <SPAN CLASS="pop">named arguments</SPAN></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">pathname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional; <SPAN CLASS="lee">Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>). The full path and name of the file containing the object to retrieve. If <SPAN CLASS="narg">pathname</SPAN> is omitted, <SPAN CLASS="narg">class</SPAN> is required.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">class</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional; <SPAN CLASS="lee">Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>). A string representing the <SPAN CLASS="pop">class</SPAN> of the object.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="narg">class</SPAN> <SPAN CLASS="pop">argument</SPAN> uses the syntax <SPAN CLASS="p">appname</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="p">objecttype</SPAN> and has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="295pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">appname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required; <SPAN CLASS="lee">Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>). The name of the application providing the object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">objecttype</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required; <SPAN CLASS="lee">Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>). The type or class of object to create.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Use the <SPAN CLASS="lee">GetObject</SPAN> function to access an ActiveX object from a file and assign the object to an <SPAN CLASS="pop">object variable</SPAN>. Use the <SPAN CLASS="lee">Set</SPAN> statement to assign the object returned by <SPAN CLASS="lee">GetObject</SPAN> to the object variable. For example:</P>

<pre><code>Dim CADObject As Object
Set CADObject = GetObject("C:\CAD\SCHEMA.CAD")</code></pre>
When this code is executed, the application associated with the specified <SPAN CLASS="narg">pathname</SPAN> is started and the object in the specified file is activated.</P>
If <SPAN CLASS="narg">pathname</SPAN> is a zero-length string (" "), <SPAN CLASS="lee">GetObject</SPAN> returns a new object instance of the specified type. If the <SPAN CLASS="narg">pathname</SPAN> argument is omitted, <SPAN CLASS="lee">GetObject</SPAN> returns a currently active object of the specified type. If no object of the specified type exists, an error occurs.</P>
Some applications allow you to activate part of a file. Add an exclamation point (<SPAN CLASS="lee">!</SPAN>) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.</P>
For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called <SPAN CLASS="cte">SCHEMA.CAD</SPAN>:</P>

<pre><code>Set LayerObject = GetObject("C:\CAD\SCHEMA.CAD!Layer3")</code></pre>
If you don't specify the object's <SPAN CLASS="narg">class</SPAN>, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, may support more than one class of object. For example, a drawing might support three different types of objects: an <SPAN CLASS="lee">Application</SPAN> object, a <SPAN CLASS="lee">Drawing</SPAN> object, and a <SPAN CLASS="lee">Toolbar</SPAN> object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional <SPAN CLASS="narg">class</SPAN> argument. For example:</P>

<pre><code>Dim MyObject As Object
Set MyObject = GetObject("C:\DRAWINGS\SAMPLE.DRW", "FIGMENT.DRAWING")</code></pre>
In the above example, <SPAN CLASS="cte">FIGMENT</SPAN> is the name of a drawing application and <SPAN CLASS="cte">DRAWING</SPAN> is one of the object types it supports.</P>
Once an object is activated, you reference it in code using the object variable you defined. In the preceding example, you access <SPAN CLASS="pop">properties</SPAN> and <SPAN CLASS="pop">methods</SPAN> of the new object using the object variable <SPAN CLASS="cte">MyObject</SPAN>. For example:</P>

<pre><code>MyObject.Line 9, 90
MyObject.InsertText 9, 100, "Hello, world."
MyObject.SaveAs "C:\DRAWINGS\SAMPLE.DRW"</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;Use the <SPAN CLASS="lee">GetObject</SPAN> function when there is a current instance of the object or if you want to create the object with a file already loaded. If there is no current instance, and you don't want the object started with a file loaded, use the <SPAN CLASS="lee">CreateObject</SPAN> function.</P>
If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times <SPAN CLASS="lee">CreateObject</SPAN> is executed. With a single-instance object, <SPAN CLASS="lee">GetObject</SPAN> always returns the same instance when called with the zero-length string ("&nbsp;") syntax, and it causes an error if the <SPAN CLASS="narg">pathname</SPAN> argument is omitted. You can't use <SPAN CLASS="lee">GetObject</SPAN> to obtain a reference to a class created with Visual Basic.</P>
See Also</P>
<SPAN CLASS="eln">CreateObject</SPAN> function, <SPAN CLASS="eln">Set</SPAN> statement.</P>
Example</P>
This example uses the <SPAN CLASS="lee">GetObject</SPAN> function to get a reference to a specific Microsoft Excel worksheet (<SPAN CLASS="cte">MyXL</SPAN>). It uses the worksheet's <SPAN CLASS="lee">Application</SPAN> property to make Microsoft Excel visible, to close it, and so on. Using two API calls, the DetectExcel <SPAN CLASS="lee">Sub</SPAN> procedure looks for Microsoft Excel, and if it is running, enters it in the Running Object Table. The first call to <SPAN CLASS="lee">GetObject</SPAN> causes an error if Microsoft Excel is not running. In the example, the error causes the ExcelWasNotRunning flag to be set to <SPAN CLASS="lee">True</SPAN>. The second call to <SPAN CLASS="lee">GetObject</SPAN> specifies a file to open. If Microsoft Excel is not already running, this second call starts it and returns a reference to the worksheet represented by the specified file. The file in the example, <SPAN CLASS="cte">mytest.xls</SPAN>, must exist in the specified location; otherwise the Visual Basic error "Automation error" is generated. Next the example code makes both Microsoft Excel and the window containing the specified worksheet visible. Finally, if no previous version of Microsoft Excel was running, the code uses the <SPAN CLASS="lee">Application</SPAN> object's <SPAN CLASS="lee">Quit</SPAN> method to close Microsoft Excel. If the application was already running, no attempt is made to close it. The reference itself is released by setting it to <SPAN CLASS="lee">Nothing</SPAN>.</P>

<pre><code>' Declare necessary API routines:
Declare Function FindWindow Lib "user32" Alias _
    "FindWindowA" (ByVal lpClassName as String, _
    ByVal lpWindowName As Long) As Long

Declare Function SendMessage Lib "user32" Alias _
    "SendMessageA" (ByVal hWnd as Long,ByVal wMsg as Long _
    ByVal wParam as Long _
    ByVal lParam As Long) As Long

Sub GetExcel()
    Dim MyXL As Object                    ' Variable to hold reference
    ' to Microsoft Excel.
    Dim ExcelWasNotRunning As Boolean    ' Flag for final release.

    ' Test to see if there is a copy of Microsoft Excel already running.
    On Error Resume Next                ' Defer error trapping.
    ' Getobject function called without the first argument returns a 
    ' reference to an instance of the application. If the application isn't
    ' running, an error occurs. Note the comma used as the first argument
    ' placeholder.
    Set MyXL = Getobject(, "Excel.Application")
    If Err.Number &lt;&gt; 0 Then ExcelWasNotRunning = True
    Err.Clear                                ' Clear Err object in case error occurred.

    ' Check for Excel. If Excel is running,
    ' enter it into the Running Object table.
    DetectExcel

Set the object variable to reference the file you want to see.
    Set MyXL = Getobject("c:\vb4\MYTEST.XLS")

    ' Show Microsoft Excel through its Application property. Then
    ' show the actual window containing the file using the Windows
    ' collection of the MyXL object reference.
    MyXL.Application.Visible = True
    MyXL.Parent.Windows(1).Visible = True
    ' Do manipulations of your
     ' file here.
    ' ...
    ' If this copy of Microsoft Excel was not already running when you
    ' started, close it using the Application property's Quit method.
    ' Note that when you try to quit Microsoft Excel, the Microsoft Excel
    ' title bar blinks and Microsoft Excel displays a message asking if you
    ' want to save any loaded files.
    If ExcelWasNotRunning = True Then 
        MyXL.Application.Quit
    End IF

    Set MyXL = Nothing                    ' Release reference to the
                                            ' application and spreadsheet.
End Sub

Sub DetectExcel()
    ' Procedure dectects a running Excel and registers it.
    Const WM_USER = 1024
    Dim hWnd As Long
    ' If Excel is running this API call returns its handle.
    hWnd = FindWindow("XLMAIN", 0)
    If hWnd = 0 Then                    ' 0 means Excel not running.
        Exit Sub
    Else                
        ' Excel is running so use the SendMessage API 
        ' function to enter it in the Running Object Table.
        SendMessage hWnd, WM_USER + 18, 0, 0
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateObject Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateObject Function</H2>Description</P>
Creates and returns a reference to an <SPAN CLASS="pop">ActiveX object</SPAN>.</P>
Syntax</P>
<SPAN CLASS="lee">CreateObject(</SPAN><SPAN CLASS="p">class</SPAN><SPAN CLASS="lee">)</SPAN></P>
The <SPAN CLASS="p">class</SPAN> <SPAN CLASS="pop">argument</SPAN> uses the syntax <SPAN CLASS="p">appname</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="p">objecttype</SPAN> and has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="298pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">appname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required;<SPAN CLASS="lee"> Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>). The name of the application providing the object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">objecttype</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required;<SPAN CLASS="lee"> Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>). The type or <SPAN CLASS="pop">class</SPAN> of object to create.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Every application that supports Automation provides at least one type of object. For example, a word processing application may provide an <SPAN CLASS="lee">Application</SPAN> object, a <SPAN CLASS="lee">Document</SPAN> object, and a <SPAN CLASS="lee">Toolbar</SPAN> object.</P>
To create an ActiveX object, assign the object returned by <SPAN CLASS="lee">CreateObject</SPAN> to an <SPAN CLASS="pop">object variable</SPAN>:</P>

<pre><code>' Declare an object variable to hold the object 
' reference. Dim as Object causes late binding. 
Dim ExcelSheet As Object
Set ExcelSheet = CreateObject("Excel.Sheet")</code></pre>
This code starts the application creating the object, in this case, a Microsoft Excel spreadsheet. Once an object is created, you reference it in code using the object variable you defined. In the following example, you access <SPAN CLASS="pop">properties</SPAN> and <SPAN CLASS="pop">methods</SPAN> of the new object using the object variable, <SPAN CLASS="cte">ExcelSheet</SPAN>, and other Microsoft Excel objects, including the <SPAN CLASS="cte">Application</SPAN> object and the <SPAN CLASS="cte">Cells</SPAN> collection.</P>

<pre><code>' Make Excel visible through the Application object.
ExcelSheet.Application.Visible = True
' Place some text in the first cell of the sheet.
ExcelSheet.Cells(1, 1).Value = "This is column A, row 1"
' Save the sheet to C:\test.doc directory.
ExcelSheet.SaveAs "C:\ TEST.DOC"
' Close Excel with the Quit method on the Application object.
ExcelSheet.Application.Quit
' Release the object variable.
Set ExcelSheet = Nothing</code></pre>
Declaring an object variable with the <SPAN CLASS="cte">As Object</SPAN> clause creates a variable that can contain a reference to any type of object. However, access to the object through that variable is late bound; that is, the binding occurs when your program is run. To create an object variable that results in early binding; that is, binding when the program is compiled, declare the object variable with a specific class ID. For example, you can declare and create the following Microsoft Excel references:</P>

<pre><code>Dim xlApp As Excel.Application</code></pre>

<pre><code>Dim xlBook As Excel.Workbook</code></pre>

<pre><code>Dim xlSheet As Excel.WorkSheet</code></pre>

<pre><code>Set xlApp = CreateObject("Excel.Application")</code></pre>

<pre><code>Set xlBook = xlApp.Workbooks.Add</code></pre>

<pre><code>Set xlSheet = xlBook.Worksheets(1)</code></pre>
The reference through an early-bound variable can give better performance, but can only contain a reference to the class specified in the declaration.</P>
You can pass an object returned by the <SPAN CLASS="lee">CreateObject</SPAN> function to a function expecting an object as an argument. For example, the following code creates and passes a reference to an Excel.Application object:</P>

<pre><code>Call MySub (CreateObject("Excel.Application"))</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;Use <SPAN CLASS="lee">CreateObject</SPAN> when there is no current instance of the object. If an instance of the object is already running, a new instance is started, and an object of the specified type is created. To use the current instance, or to start the application and have it load a file, use the <SPAN CLASS="lee">GetObject</SPAN> function.</P>
If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times <SPAN CLASS="lee">CreateObject</SPAN> is executed.</P>
See Also</P>
<SPAN CLASS="eln">GetObject</SPAN> function, <SPAN CLASS="eln">Set</SPAN> statement.</P>
Example</P>
This example uses the <SPAN CLASS="lee">CreateObject</SPAN> function to set a reference (<SPAN CLASS="cte">xlApp</SPAN>) to Microsoft Excel. It uses the reference to access the <SPAN CLASS="lee">Visible</SPAN> property of Microsoft Excel, and then uses the Microsoft Excel <SPAN CLASS="lee">Quit</SPAN> method to close it. Finally, the reference itself is released.</P>

<pre><code>Dim xlApp As Object        ' Declare variable to hold the reference.
    
Set xlApp = CreateObject("excel.application")
' You may have to set Visible property to True
' if you want to see the application.
xlApp.Visible = True
    ' Use xlApp to access Microsoft Excel's 
    ' other objects.
xlApp.Quit                    ' When you finish, use the Quit method to close 
Set xlApp = Nothing        ' the application, then release the reference.</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

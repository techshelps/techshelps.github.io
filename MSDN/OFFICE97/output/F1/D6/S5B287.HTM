<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Print # Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Print # Statement</H1>Description</P>
Writes display-formatted data to a sequential file.</P>
Syntax</P>
<SPAN CLASS="lee">Print</SPAN> <SPAN CLASS="lee">#</SPAN><SPAN CLASS="p">filenumber</SPAN><B>,</B> [<SPAN CLASS="p">outputlist</SPAN>]</P>
The <SPAN CLASS="lee">Print #</SPAN> statement syntax has these parts.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="296pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">filenumber</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Any valid <SPAN CLASS="pop">file number</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">outputlist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Expression</SPAN> or list of expressions to print.</P></TD></TR></TBODY></TABLE>
<BR></P>Settings</P>
The <SPAN CLASS="p">outputlist</SPAN> <SPAN CLASS="pop">argument</SPAN> settings are</P>
[{<SPAN CLASS="lee">Spc(</SPAN><SPAN CLASS="p">n</SPAN><SPAN CLASS="lee">)</SPAN> | <SPAN CLASS="lee">Tab</SPAN>[<SPAN CLASS="lee">(</SPAN><SPAN CLASS="p">n</SPAN><SPAN CLASS="lee">)</SPAN>]}] [<SPAN CLASS="p">expression</SPAN>] [<SPAN CLASS="p">charpos</SPAN>]</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="296pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Spc(</SPAN><SPAN CLASS="p">n</SPAN><SPAN CLASS="lee">)</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Used to insert space characters in the output, where <SPAN CLASS="p">n</SPAN> is the number of space characters to insert.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Tab(</SPAN><SPAN CLASS="p">n</SPAN><SPAN CLASS="lee">)</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Used to position the insertion point to an absolute column number, where <SPAN CLASS="p">n</SPAN> is the column number. Use <SPAN CLASS="lee">Tab</SPAN> with no argument to position the insertion point at the beginning of the next <SPAN CLASS="pop">print zone</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="296pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">expression</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="pop">Numeric expressions</SPAN> or <SPAN CLASS="pop">string expressions</SPAN> to print.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">charpos</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Specifies the insertion point for the next character. Use a semicolon to position the insertion point immediately after the last character displayed. Use <SPAN CLASS="lee">Tab(</SPAN><SPAN CLASS="p">n</SPAN><SPAN CLASS="lee">)</SPAN> to position the insertion point to an absolute column number. Use <SPAN CLASS="lee">Tab</SPAN> with no argument to position the insertion point at the beginning of the next print zone. If <SPAN CLASS="p">charpos</SPAN> is omitted, the next character is printed on the next line.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Data written with <SPAN CLASS="lee">Print # </SPAN>is usually read from a file with <SPAN CLASS="lee">Line Input #</SPAN> or <SPAN CLASS="lee">Input</SPAN>.</P>
If you omit <SPAN CLASS="p">outputlist</SPAN> and include only a list separator after <SPAN CLASS="p">filenumber</SPAN>, a blank line is printed to the file. Multiple expressions can be separated with either a space or a semicolon. A space has the same effect as a semicolon.</P>
For <SPAN CLASS="lee">Boolean</SPAN> data, either <SPAN CLASS="cte">True</SPAN> or <SPAN CLASS="cte">False</SPAN> is printed. The <SPAN CLASS="lee">True</SPAN> and <SPAN CLASS="lee">False</SPAN> keywords are not translated, regardless of the <SPAN CLASS="pop">locale</SPAN>.</P>
<SPAN CLASS="lee">Date</SPAN> data is written to the file using the standard short date format recognized by your system. When either the date or the time component is missing or zero, only the part provided gets written to the file.</P>
Nothing is written to the file if <SPAN CLASS="p">outputlist</SPAN> data is <SPAN CLASS="lee">Empty</SPAN>. However, if <SPAN CLASS="p">outputlist</SPAN> data is <SPAN CLASS="lee">Null</SPAN>, <SPAN CLASS="lee">Null</SPAN> is written to the file.</P>
For <SPAN CLASS="lee">Error </SPAN>data, the output appears as <SPAN CLASS="cte">Error errorcode</SPAN>. The <SPAN CLASS="lee">Error </SPAN>keyword is not translated regardless of the locale.</P>
All data written to the file using <SPAN CLASS="lee">Print #</SPAN> is internationally aware; that is, the data is properly formatted using the appropriate decimal separator.</P>
Because <SPAN CLASS="lee">Print #</SPAN> writes an image of the data to the file, you must delimit the data so it prints correctly. If you use <SPAN CLASS="lee">Tab </SPAN>with no arguments to move the print position to the next print zone, <SPAN CLASS="lee">Print # </SPAN>also writes the spaces between print fields to the file.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;If, at some future time, you want to read the data from a file using the <SPAN CLASS="lee">Input #</SPAN> statement, use the <SPAN CLASS="lee">Write # </SPAN>statement instead of the <SPAN CLASS="lee">Print #</SPAN> statement to write the data to the file. Using <SPAN CLASS="lee">Write #</SPAN> ensures the integrity of each separate data field by properly delimiting it, so it can be read back in using <SPAN CLASS="lee">Input #</SPAN>. Using <SPAN CLASS="lee">Write #</SPAN> also ensures it can be correctly read in any locale.</P>
See Also</P>
<SPAN CLASS="eln">Open</SPAN> statement, <SPAN CLASS="eln">Print</SPAN> method, <SPAN CLASS="eln">Spc</SPAN> function, <SPAN CLASS="eln">Tab</SPAN> function, <B>Write </B><SPAN CLASS="eln">#</SPAN> statement.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Print #</SPAN> statement to write data to a file.</P>

<pre><code>Open "TESTFILE" For Output As #1        ' Open file for output.
Print #1, "This is a test"                ' Print text to file.
Print #1,                                        ' Print blank line to file.
Print #1, "Zone 1"; Tab ; "Zone 2"        ' Print in two print zones.
Print #1, "Hello" ; " " ; "World"        ' Separate strings with space.
Print #1, Spc(5) ; "5 leading spaces "    ' Print five leading spaces.
Print #1, Tab(10) ; "Hello"                ' Print word at column 10.

' Assign Boolean, Date, Null and Error values.
Dim MyBool, MyDate, MyNull, MyError
MyBool = False : MyDate = #February 12, 1969# : MyNull = Null
MyError = CVErr(32767)
' True, False, Null, and Error are translated using locale settings of
' your system. Date literals are written using standard short date
' format.
Print #1, MyBool ; " is a Boolean value"
Print #1, MyDate ; " is a date"
Print #1, MyNull ; " is a null value"
Print #1, MyError ; " is an error value"
Close #1                                        ' Close file.</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

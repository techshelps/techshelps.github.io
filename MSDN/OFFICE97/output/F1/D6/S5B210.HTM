<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declare Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Declare Statement</H2>Description</P>
Used at <SPAN CLASS="pop">module level</SPAN> to declare references to external procedures in a <SPAN CLASS="pop">dynamic-link library</SPAN> (DLL).</P>
Syntax 1</P>
[<SPAN CLASS="lee">Public</SPAN> | <SPAN CLASS="lee">Private</SPAN>] <SPAN CLASS="lee">Declare</SPAN> <SPAN CLASS="lee">Sub</SPAN> <SPAN CLASS="p">name</SPAN> <SPAN CLASS="lee">Lib</SPAN> <SPAN CLASS="lee">"</SPAN><SPAN CLASS="p">libname</SPAN><SPAN CLASS="lee">"</SPAN> [<SPAN CLASS="lee">Alias</SPAN> <SPAN CLASS="lee">"</SPAN><SPAN CLASS="p">aliasname</SPAN><SPAN CLASS="lee">"</SPAN>] [<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">arglist</SPAN>]<SPAN CLASS="lee">)</SPAN>]</P>
Syntax 2</P>
[<SPAN CLASS="lee">Public</SPAN> | <SPAN CLASS="lee">Private</SPAN>] <SPAN CLASS="lee">Declare</SPAN> <SPAN CLASS="lee">Function</SPAN> <SPAN CLASS="p">name</SPAN> <SPAN CLASS="lee">Lib</SPAN> <SPAN CLASS="lee">"</SPAN><SPAN CLASS="p">libname</SPAN><SPAN CLASS="lee">"</SPAN> [<SPAN CLASS="lee">Alias</SPAN> <SPAN CLASS="lee">"</SPAN><SPAN CLASS="p">aliasname</SPAN><SPAN CLASS="lee">"</SPAN>]<BR>ú[<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">arglist</SPAN>]<SPAN CLASS="lee">)</SPAN>] [<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>]</P>
The <SPAN CLASS="lee">Declare</SPAN> statement syntax has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Public</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used to declare procedures that are available to all other procedures in all <SPAN CLASS="pop">modules</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Private</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used to declare procedures that are available only within the module where the <SPAN CLASS="pop">declaration</SPAN> is made.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Sub</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional (either <SPAN CLASS="lee">Sub</SPAN> or <SPAN CLASS="lee">Function</SPAN> must appear). Indicates that the procedure doesn't return a value.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Function</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional (either <SPAN CLASS="lee">Sub</SPAN> or <SPAN CLASS="lee">Function</SPAN> must appear). Indicates that the procedure returns a value that can be used in an <SPAN CLASS="pop">expression</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Any valid procedure name. Note that DLL entry points are case sensitive.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Lib</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Indicates that a DLL or code resource contains the procedure being declared. The <SPAN CLASS="lee">Lib</SPAN> clause is required for all declarations.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">libname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the DLL or code resource that contains the declared procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Alias</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the procedure being called has another name in the DLL. This is useful when the external procedure name is the same as a keyword. You can also use <SPAN CLASS="lee">Alias</SPAN> when a DLL procedure has the same name as a public <SPAN CLASS="pop">variable</SPAN>, <SPAN CLASS="pop">constant</SPAN>, or any other procedure in the same <SPAN CLASS="pop">scope</SPAN>. <SPAN CLASS="lee">Alias</SPAN> is also useful if any characters in the DLL procedure name aren't allowed by the DLL naming convention.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">aliasname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Name of the procedure in the DLL or code resource. If the first character is not a number sign (<SPAN CLASS="eln">#</SPAN>), <SPAN CLASS="p">aliasname</SPAN> is the name of the procedure's entry point in the DLL. If (<SPAN CLASS="eln">#</SPAN>) is the first character, all characters that follow must indicate the ordinal number of the procedure's entry point.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">arglist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. List of variables representing <SPAN CLASS="pop">arguments</SPAN> that are passed to the procedure when it is called.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continue)</I></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Data type</SPAN> of the value returned by a <SPAN CLASS="lee">Function</SPAN> procedure; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN> (variable length only), or <SPAN CLASS="lee">Variant</SPAN>, a <SPAN CLASS="pop">user-defined type</SPAN>, or an <SPAN CLASS="pop">object type</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="p">arglist</SPAN> argument has the following syntax and parts:</P>
[<SPAN CLASS="lee">Optional</SPAN>] [<SPAN CLASS="lee">ByVal</SPAN> | <SPAN CLASS="lee">ByRef</SPAN>] [<SPAN CLASS="lee">ParamArray</SPAN>] <SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">( )</SPAN>] [<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>]</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Optional</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that an argument is not required. If used, all subsequent arguments in <SPAN CLASS="p">arglist</SPAN> must also be optional and declared using the <SPAN CLASS="lee">Optional</SPAN> keyword. <SPAN CLASS="lee">Optional</SPAN> can't be used for any argument if <SPAN CLASS="lee">ParamArray</SPAN> is used.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByVal</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the argument is passed <SPAN CLASS="pop">by value</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByRef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Indicates that the argument is passed <SPAN CLASS="pop">by reference</SPAN>. <B>ByRef</B> is the default in Visual Basic.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ParamArray</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used only as the last argument in <SPAN CLASS="p">arglist</SPAN> to indicate that the final argument is an <SPAN CLASS="lee">Optional</SPAN> <SPAN CLASS="pop">array</SPAN> of <SPAN CLASS="lee">Variant</SPAN> elements. The <SPAN CLASS="lee">ParamArray</SPAN> keyword allows you to provide an arbitrary number of arguments. The <SPAN CLASS="lee">ParamArray</SPAN> keyword can't be used with <SPAN CLASS="lee">ByVal</SPAN>, <SPAN CLASS="lee">ByRef</SPAN>, or <SPAN CLASS="lee">Optional</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the variable representing the argument being passed to the procedure; follows standard variable naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">( )</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required for array variables. Indicates that <SPAN CLASS="p">varname</SPAN> is an array.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Data type of the argument passed to the procedure; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <B>Decimal</B> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String </SPAN>(variable length only), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>, a user-defined type, or an object type.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
For <SPAN CLASS="lee">Function</SPAN> procedures, the data type of the procedure determines the data type it returns. You can use an <SPAN CLASS="lee">As</SPAN> clause following <SPAN CLASS="p">arglist</SPAN> to specify the return type of the function. Within <SPAN CLASS="p">arglist</SPAN>, you can use an <SPAN CLASS="lee">As</SPAN> clause to specify the data type of any of the arguments passed to the procedure. In addition to specifying any of the standard data types, you can specify <SPAN CLASS="lee">As Any</SPAN> in <SPAN CLASS="p">arglist</SPAN> to inhibit type checking and allow any data type to be passed to the procedure.</P>
Empty parentheses indicate that the <SPAN CLASS="lee">Sub</SPAN> or <SPAN CLASS="lee">Function</SPAN> procedure has no arguments and that Visual Basic should ensure that none are passed. In the following example, <SPAN CLASS="cte">First</SPAN> takes no arguments. If you use arguments in a call to <SPAN CLASS="cte">First</SPAN>, an error occurs:</P>

<pre><code>Declare Sub First Lib "MyLib" ()</code></pre>
If you include an argument list, the number and type of arguments are checked each time the procedure is called. In the following example, <SPAN CLASS="cte">First</SPAN> takes one <SPAN CLASS="lee">Long</SPAN> argument:</P>

<pre><code>Declare Sub First Lib "MyLib" (X As Long)</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can't have fixed-length strings in the argument list of a <SPAN CLASS="lee">Declare</SPAN> statement; only variable-length strings can be passed to procedures. Fixed-length strings can appear as procedure arguments, but they are converted to variable-length strings before being passed.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;The <SPAN CLASS="lee">vbNullString </SPAN>constant is used when calling external procedures, where the external procedure requires a string whose value is zero. This is not the same thing as a zero-length string (" ").</P>
See Also</P>
<SPAN CLASS="eln">Call</SPAN> statement, <SPAN CLASS="eln">Function</SPAN> statement, <SPAN CLASS="eln">LastDLLError</SPAN> property, <SPAN CLASS="eln">Sub</SPAN> statement.</P>
Specifics (Macintosh)</P>
On the Power, the <SPAN CLASS="lee">Declare</SPAN><B> </B>syntax is the same as in Windows, except that the <SPAN CLASS="lee">CDecl</SPAN><B> </B>keyword can be used to indicate that the <SPAN CLASS="pop">procedure</SPAN> uses C language <SPAN CLASS="pop">argument</SPAN> order, naming conventions, and calling conventions:</P>
[<B>Public</B> | <B>Private</B> ] <B>Declare</B> <B>Function</B> <I>name </I>[<B>CDecl</B>] <B>Lib</B> <SPAN CLASS="lee">"</SPAN><I>libname</I><SPAN CLASS="lee">"</SPAN><BR>ú[<B>Alias</B> <SPAN CLASS="lee">"</SPAN><I>aliasname</I><SPAN CLASS="lee">"</SPAN>] [<B>(</B>[<I>arglist</I>]<B>)</B>] [<B>As</B> <I>type</I>]</P>
The <SPAN CLASS="lee">Alias</SPAN> keyword indicates that the procedure being called is in a Macintosh code resource. This is useful when the external procedure name is the same as a <SPAN CLASS="pop">keyword</SPAN>.</P>
Use the <I>aliasname</I> to specify the code resource type as follows:</P>
<B>"</B>[<SPAN CLASS="p">resourcetype</SPAN>]<SPAN CLASS="eln">$</SPAN>[<SPAN CLASS="p">resourcename</SPAN>]<B>"</B></P>
The <I>resourcetype</I> is any valid 4-character <SPAN CLASS="pop">constant</SPAN>. If omitted, the default <I>resourcetype</I> is CODE. The <I>resourcename</I> is the procedure name in the code resource. If <I>resourcename</I> is omitted, it is assumed to be the same as <I>name</I>.</P>
On the Power Macintosh, the <SPAN CLASS="lee">Declare</SPAN> statement supports calls into native code for code fragments only. Calling into code resources is also supported, but only in 68000 emulation mode.</P>
When used on the Power Macintosh, the <SPAN CLASS="lee">Declare</SPAN> statement syntax is as follows:</P>

<pre><code>Declare Function MyFunction Lib "hd:system folder:extensions: _
    MyCodeFragment" Alias "MyFunction" () As Long</code></pre>
For both code fragments and code resources, a full or partial path name may be specified for the <SPAN CLASS="lee">Lib</SPAN> clause. If the specified <SPAN CLASS="lee">Lib</SPAN> clause is ambiguous, it is resolved as follows:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">If the file contains a 'cfrg' resource, it's treated as a code fragment.</LI><LI CLASS="ULI1">If it doesn't contain a 'cfrg' resource, it is treated as a file containing code resources.
</LI></UL></SPAN>This allows the creation of "fat" code fragments, that is, files that contain both code fragments and 68000 code resources. When running Visual Basic for Applications on&nbsp;a 68000 Macintosh, the code resource is used. When running it on a Power Macintosh, the native code fragment is used.</P>
The Macintosh toolbox can be accessed on the Power Macintosh using a declaration into the system code fragment.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, <SPAN CLASS="eln">Declare</SPAN> statements are public by default. In a <SPAN CLASS="pop">standard module</SPAN>, a public <SPAN CLASS="eln">Declare</SPAN> statement is available to all procedures in the current database and in any referencing databases. You can preface a <SPAN CLASS="eln">Declare</SPAN> statement with the <SPAN CLASS="eln">Private</SPAN> keyword to ensure that it is not available outside of the current module. </P>
To use a <SPAN CLASS="eln">Declare</SPAN> statement in a <SPAN CLASS="pop">class module</SPAN>, you must precede the statement with the <SPAN CLASS="eln">Private</SPAN> keyword. If you fail to include the <SPAN CLASS="eln">Private </SPAN>keyword, Microsoft Access generates a compile-time error.</P>
Example</P>
This example shows how the <SPAN CLASS="lee">Declare</SPAN> statement is used at the module level of a standard module to declare a reference to an external procedure in a dynamic-link library (DLL) or Macintosh code resource. You can place the <SPAN CLASS="lee">Declare</SPAN> statements in class modules if the <SPAN CLASS="lee">Declare</SPAN> statements are <SPAN CLASS="lee">Private</SPAN>.</P>

<pre><code>' In Microsoft Windows (16-bit):
Declare Sub MessageBeep Lib "User" (ByVal N As Integer)
' Assume SomeBeep is an alias for the procedure name.
Declare Sub MessageBeep Lib "User" Alias "SomeBeep"(ByVal N As Integer)
' Use an ordinal in the Alias clause to call GetWinFlags.
Declare Function GetWinFlags Lib "Kernel" Alias "#132"() As Long

' In 32-bit Microsoft Windows systems, specify the library USER32.DLL,
' rather than USER.DLL. You can use conditional compilation to write
' code that can run on either Win32 or Win16.
#If Win32 Then
    Declare Sub MessageBeep Lib "User32" (ByVal N As Long)
#Else
    Declare Sub MessageBeep Lib "User" (ByVal N As Integer)
#End If

' On the Macintosh:
Declare Sub MessageAlert Lib "MyHd:MyAlert" Alias "MyAlert" (ByVal N _
    As Integer)
' Use a code resource in the Alias clause.
Declare Sub MessageAlert Lib "MyHd:MyAlert" Alias "XTST$MyAlert" _
    (ByVal N As Integer)

' If the code-resource type specifier has only 3 characters, be sure to
' leave a blank space where the final character would normally be.
Declare Sub MessageAlert Lib "MyHd:AnAlert" Alias "COD $AnAlert" _
    (ByVal N As Integer)</code></pre>
Example (Microsoft Access)</P>
In Microsoft Access, you can use the <SPAN CLASS="eln">Declare</SPAN> statement at the module level of a standard module to declare a reference to an external procedure in a dynamic-link library (DLL). A <SPAN CLASS="eln">Declare</SPAN> statement is public by default. In order to include a <SPAN CLASS="eln">Declare</SPAN> statement in a class module, precede it with the <SPAN CLASS="eln">Private</SPAN> keyword.</P>
The following example references a procedure in a DLL, then calls that procedure from Visual Basic.</P>

<pre><code>' In standard module.
Declare Sub MessageBeep Lib "User32" (ByVal intN As Integer)

' In class module.
Private Declare Sub MessageBeep Lib "User32" (ByVal intN As Integer)

' Once you have referenced procedure in DLL with Declare
' statement, you can call that procedure normally from code.
Sub SystemBeep(intBeeps As Integer, sngPause As Single)
    Dim intI As Integer
    Dim sngStart As Single

    For intI = 1 To intBeeps
        ' Call system function.
        Call MessageBeep(intBeeps)
        ' Get start time.
        sngStart = Timer
        ' Pause between beeps.
        Do While Timer &lt; sngStart + sngPause
            ' Return control to operating system.
            DoEvents
        Loop
    Next intI
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

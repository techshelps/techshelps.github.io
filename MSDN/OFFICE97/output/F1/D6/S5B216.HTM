<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Do...Loop Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Do...Loop Statement</H2>Description</P>
Repeats a block of <SPAN CLASS="pop">statements</SPAN> while a condition is <SPAN CLASS="lee">True</SPAN> or until a condition becomes <SPAN CLASS="lee">True</SPAN>.</P>
Syntax</P>
<SPAN CLASS="lee">Do </SPAN>[{<SPAN CLASS="lee">While</SPAN> | <SPAN CLASS="lee">Until</SPAN>} <SPAN CLASS="p">condition</SPAN>]<BR>[<SPAN CLASS="p">statements</SPAN>]<BR>[<SPAN CLASS="lee">Exit Do</SPAN>]<BR>[<SPAN CLASS="p">statements</SPAN>]</P>
<SPAN CLASS="lee">Loop</SPAN></P>
Or, you can use this syntax:</P>
<SPAN CLASS="lee">Do</SPAN><BR>[<SPAN CLASS="p">statements</SPAN>]<BR>[<SPAN CLASS="lee">Exit Do</SPAN>]<BR>[<SPAN CLASS="p">statements</SPAN>]</P>
<SPAN CLASS="lee">Loop</SPAN> [{<SPAN CLASS="lee">While</SPAN> | <SPAN CLASS="lee">Until</SPAN>} <SPAN CLASS="p">condition</SPAN>]</P>
The <SPAN CLASS="lee">Do Loop</SPAN> statement syntax has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="291pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">condition</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Numeric expression</SPAN> or <SPAN CLASS="pop">string expression</SPAN> that is <SPAN CLASS="lee">True</SPAN> or <SPAN CLASS="lee">False</SPAN>. If <SPAN CLASS="p">condition</SPAN> is <SPAN CLASS="lee">Null</SPAN>, <SPAN CLASS="p">condition</SPAN> is treated as <SPAN CLASS="lee">False</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">statements</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">One or more statements that are repeated while, or until, <SPAN CLASS="p">condition</SPAN> is <SPAN CLASS="lee">True</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Any number of <SPAN CLASS="lee">Exit Do</SPAN> statements may be placed anywhere in the <SPAN CLASS="lee">Do…Loop</SPAN> as an alternate way to exit a <SPAN CLASS="lee">Do…Loop</SPAN>. <SPAN CLASS="lee">Exit Do</SPAN> is often used after evaluating some condition, for example, <SPAN CLASS="lee">If…Then</SPAN>, in which case the <SPAN CLASS="lee">Exit Do</SPAN> statement transfers control to the statement immediately following the <SPAN CLASS="lee">Loop</SPAN>.</P>
When used within nested <SPAN CLASS="lee">Do…Loop</SPAN> statements, <SPAN CLASS="lee">Exit Do</SPAN> transfers control to the loop that is one nested level above the loop where <SPAN CLASS="lee">Exit Do</SPAN> occurs.</P>
See Also</P>
<SPAN CLASS="eln">Exit</SPAN> statement, <B>For...</B><SPAN CLASS="eln">Next</SPAN> statement, <B>While...</B><SPAN CLASS="eln">Wend</SPAN> statement.</P>
Example</P>
This example shows how <SPAN CLASS="lee">Do...Loop</SPAN> statements can be used. The inner <SPAN CLASS="lee">Do...Loop</SPAN> statement loops 10 times, sets the value of the flag to <SPAN CLASS="lee">False</SPAN>, and exits prematurely using the <SPAN CLASS="lee">Exit Do</SPAN> statement. The outer loop exits immediately upon checking the value of the flag.</P>

<pre><code>Dim Check, Counter
Check = True: Counter = 0            ' Initialize variables.
Do    ' Outer loop.
    Do While Counter &lt; 20                ' Inner loop.
        Counter = Counter + 1            ' Increment Counter.
        If Counter = 10 Then            ' If condition is True.
            Check = False                ' Set value of flag to False.
            Exit Do                        ' Exit inner loop.
        End If
    Loop
Loop Until Check = False                ' Exit outer loop immediately.</code></pre>
Example (Microsoft Excel)</P>
This example sorts the data in the first column on Sheet1 and then deletes any rows that contain duplicate data.</P>

<pre><code>Worksheets("Sheet1").Range("A1").Sort _
    key1:=Worksheets("Sheet1").Range("A1")
Set currentCell = Worksheets("Sheet1").Range("A1")
Do While Not IsEmpty(currentCell)
    Set nextCell = currentCell.Offset(1, 0)
    If nextCell.Value = currentCell.Value Then
        currentCell.EntireRow.Delete
    End If
    Set currentCell = nextCell
Loop</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

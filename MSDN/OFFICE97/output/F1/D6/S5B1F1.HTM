<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Call Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Call Statement</H2>Description</P>
Transfers control to a <SPAN CLASS="lee">Sub</SPAN> procedure, <SPAN CLASS="lee">Function</SPAN> procedure, or <SPAN CLASS="pop">dynamic-link library (DLL)</SPAN> <SPAN CLASS="pop">procedure</SPAN>.</P>
Syntax</P>
[<SPAN CLASS="lee">Call</SPAN>] <SPAN CLASS="p">name</SPAN> [<SPAN CLASS="p">argumentlist</SPAN>]</P>
The <SPAN CLASS="lee">Call</SPAN> statement syntax has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="278pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Call</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional; <SPAN CLASS="pop">keyword</SPAN>. If specified, you must enclose <SPAN CLASS="p">argumentlist</SPAN> in parentheses. For example:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="ctt">Call MyProc(0)</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the procedure to call.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">argumentlist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Comma-delimited list of <SPAN CLASS="pop">variables</SPAN>, <SPAN CLASS="pop">arrays</SPAN>, or <SPAN CLASS="pop">expressions</SPAN> to pass to the procedure. Components of <SPAN CLASS="p">argumentlist</SPAN> may include the keywords <SPAN CLASS="lee">ByVal</SPAN> or <SPAN CLASS="lee">ByRef</SPAN> to describe how the <SPAN CLASS="pop">arguments</SPAN> are treated by the called procedure. However, <SPAN CLASS="lee">ByVal</SPAN> and <SPAN CLASS="lee">ByRef</SPAN> can be used with <SPAN CLASS="lee">Call</SPAN> only when calling a DLL procedure.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You are not required to use the <SPAN CLASS="lee">Call</SPAN> keyword when calling a procedure. However, if you use the <SPAN CLASS="lee">Call</SPAN> keyword to call a procedure that requires arguments, <SPAN CLASS="p">argumentlist</SPAN> must be enclosed in parentheses. If you omit the <SPAN CLASS="lee">Call</SPAN> keyword, you also must omit the parentheses around <SPAN CLASS="p">argumentlist</SPAN>. If you use either <SPAN CLASS="lee">Call</SPAN> syntax to call any intrinsic or user-defined function, the function's return value is discarded.</P>
To pass a whole array to a procedure, use the array name followed by empty parentheses.</P>
See Also</P>
<SPAN CLASS="eln">Declare</SPAN> statement, <SPAN CLASS="eln">Function</SPAN> statement, <SPAN CLASS="eln">Sub</SPAN> statement.</P>
Specifics (Macintosh)</P>
<SPAN CLASS="lee">ByVal</SPAN> and <SPAN CLASS="lee">ByRef</SPAN> can be used with <SPAN CLASS="lee">Call</SPAN> when making a call to a Macintosh code resource. </P>
Example</P>
This example illustrates how the <SPAN CLASS="lee">Call</SPAN> statement is used to transfer control to a <SPAN CLASS="lee">Sub</SPAN> procedure, an intrinsic function, a dynamic-link library (DLL) procedure, and a procedure in a Macintosh code resource.</P>

<pre><code>' Call a Sub procedure.
Call PrintToDebugWindow("Hello World")
' The above statement causes control to be passed to the following
' Sub procedure.
Sub PrintToDebugWindow(AnyString)
    Debug.Print AnyString                ' Print to Debug window.
End Sub

' Call an intrinsic function. The return value of the function is
' discarded.
Call Shell(AppName, 1)                ' AppName contains the path of the 
                                            ' executable file.

' Call a Microsoft Windows DLL procedure. The Declare statement must be 
' Private in a Class Module, but not in a standard Module.
Private Declare Sub MessageBeep Lib "User" (ByVal N As Integer)
Sub CallMyDll()
    Call MessageBeep(0)                ' Call Windows DLL procedure.
    MessageBeep 0                        ' Call again without Call keyword.
End Sub

' Call a Macintosh code resource.
Declare Sub MessageAlert Lib "MyHd:MyAlert" Alias "MyAlert" (ByVal N _
    As Integer)
Sub CallMyCodeResource()
    Call MessageAlert(0)                ' Call Macintosh code resource.
    MessageAlert 0                        ' Call again without Call keyword.
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

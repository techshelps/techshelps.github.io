<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Number Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Number Property</H1>Applies To</P>
<SPAN CLASS="eln">Err</SPAN> object.</P>
Description</P>
Returns or sets a numeric value specifying an error. <SPAN CLASS="lee">Number</SPAN> is the <SPAN CLASS="lee">Err</SPAN> object's default property. Read/write.</P>
Remarks</P>
When returning a user-defined error from an object, set <SPAN CLASS="lee">Err.Number</SPAN> by adding the number you selected as an error code to the <SPAN CLASS="lee">vbObjectError</SPAN> <SPAN CLASS="pop">constant</SPAN>. For example, you use the following code to return the number 1051 as an error code:</P>

<pre><code>Err.Raise Number := vbObjectError + 1051, Source:= "SomeClass"</code></pre>
See Also</P>
<SPAN CLASS="eln">Description</SPAN> property, <SPAN CLASS="eln">Err</SPAN> object, <SPAN CLASS="eln">HelpContext</SPAN> property, <SPAN CLASS="eln">HelpContextID</SPAN> property ("Extensibility Object Model Language Reference"), <SPAN CLASS="eln">HelpFile</SPAN> property, <SPAN CLASS="eln">LastDLLError</SPAN> property, <SPAN CLASS="eln">Source</SPAN> property.</P>
Example</P>
The first example illustrates a typical use of the <SPAN CLASS="lee">Number</SPAN> property in an error-handling routine. The second example examines the <SPAN CLASS="lee">Number</SPAN> property of the <SPAN CLASS="lee">Err</SPAN> object to determine whether an error returned by an Automation object was defined by the object, or whether it was mapped to an error defined by Visual&nbsp;Basic. Note that the constant <SPAN CLASS="lee">vbObjectError</SPAN> is a very large negative number that an object adds to its own error code to indicate that the error is defined by the server. Therefore, subtracting it from <SPAN CLASS="lee">Err.Number</SPAN> strips it out of the result. If the error is object-defined, the base number is left in <SPAN CLASS="cte">MyError</SPAN>, which is displayed in a message box along with the original source of the error. If <SPAN CLASS="lee">Err.Number</SPAN> represents a Visual&nbsp;Basic error, then the Visual&nbsp;Basic error number is displayed in the message box.</P>

<pre><code>' Typical use of Number property.
Sub test()
    On Error GoTo out
    
    Dim x, y
    x = 1 / y                                ' Create division by zero error.
    Exit Sub
    out:
    MsgBox Err.Number
    MsgBox Err.Description
    ' Check for division by zero error.
    If Err.Number = 11 Then
        y = y + 1
    End If
    Resume
End Sub

' Using Number property with an error from an
' Automation object.
Dim MyError, Msg
' First, strip off the constant added by the object to indicate one
' of its own errors.
MyError = Err.Number - vbObjectError
' If you subtract the vbObjectError constant, and the number is still
' in the range 0-65,535, it is an object-defined error code.
If MyError &gt; 0 And MyError &lt; 65535 Then
    Msg = "The object you accessed assigned this number to the error: " _
        &amp; MyError &amp; ". The originator of the error was: " _
        &amp; Err.Source &amp; ". Press F1 to see originator's Help topic."
' Otherwise it is a Visual Basic error number.
Else
    Msg = "This error (# " &amp; Err.Number &amp; ") is a Visual Basic error" &amp; _
        " number. Press Help button or F1 for the Visual Basic Help" _
        &amp; " topic for this error."
End If
    MsgBox Msg, , "Object Error", Err.HelpFile, Err.HelpContext</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

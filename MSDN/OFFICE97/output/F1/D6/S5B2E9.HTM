<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Assistant Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Assistant Object</H1>Description</P>
Represents the Microsoft Office&nbsp;Assistant.</P>
Using the Assistant Object</P>
Use the <SPAN CLASS="lee">Assistant</SPAN> property to return the <SPAN CLASS="lee">Assistant</SPAN> object. There's no collection for the <SPAN CLASS="lee">Assistant</SPAN> object; only one <SPAN CLASS="lee">Assistant</SPAN> object can be active at a time. Use the <SPAN CLASS="lee">Visible</SPAN> property to display the Assistant.</P>
Remarks</P>
The default Assistant is Clippit. To select a different Assistant programatically, use the <SPAN CLASS="lee">FileName</SPAN> property.</P>
The following example displays a previously selected Assistant and animates it with the associated sound. If your computer doesn't have a sound card installed, this example won't generate an error, but the sound won't be heard.</P>

<pre><code>With Assistant
    .Visible = True
    .Sounds = True
    .Animation = msoAnimationBeginSpeaking
End With</code></pre>
Properties</P>
<SPAN CLASS="eln">Animation</SPAN> property, <SPAN CLASS="eln">Application</SPAN> property, <SPAN CLASS="eln">AssistWithAlerts</SPAN> property, <SPAN CLASS="eln">AssistWithHelp</SPAN> property, <SPAN CLASS="eln">AssistWithWizards</SPAN> property, <SPAN CLASS="eln">BalloonError</SPAN> property, <SPAN CLASS="eln">Creator</SPAN> property, <SPAN CLASS="eln">FeatureTips</SPAN> property, <SPAN CLASS="eln">FileName</SPAN> property, <SPAN CLASS="eln">GuessHelp</SPAN> property, <SPAN CLASS="eln">HighPriorityTips</SPAN> property, <SPAN CLASS="eln">Item</SPAN> property (<SPAN CLASS="eln">Assistant</SPAN>, <SPAN CLASS="eln">BalloonLabel</SPAN>, and <SPAN CLASS="eln">BalloonCheckbox</SPAN> objects), <SPAN CLASS="eln">KeyboardShortcutTips</SPAN> property, <SPAN CLASS="eln">Left</SPAN> property, <SPAN CLASS="eln">MouseTips</SPAN> property, <SPAN CLASS="eln">MoveWhenInTheWay</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">NewBalloon</SPAN> property, <SPAN CLASS="eln">Parent</SPAN> property, <SPAN CLASS="eln">Reduced</SPAN> property, <SPAN CLASS="eln">SearchWhenProgramming</SPAN> property, <SPAN CLASS="eln">Sounds</SPAN> property, <SPAN CLASS="eln">TipOfDay</SPAN> property, <SPAN CLASS="eln">Top</SPAN> property, <SPAN CLASS="eln">Visible</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">ActivateWizard</SPAN> method, <SPAN CLASS="eln">EndWizard</SPAN> method, <SPAN CLASS="eln">Help</SPAN> method, <SPAN CLASS="eln">Move</SPAN> method, <SPAN CLASS="eln">ResetTips</SPAN> method, <SPAN CLASS="eln">StartWizard</SPAN> method.</P>
Example (Microsoft Access)</P>
The following function creates a custom balloon for the Office&nbsp;Assistant and determines how the user responded to the balloon:</P>

<pre><code>Function AssistantBalloon(Optional varCheck As Variant, _
        Optional varLabel As Variant)
    Dim bch As BalloonCheckbox
    Dim intI As Integer
    Dim intReturn As Integer
    Dim strCheck(5) As String
    Dim strList As String

    ' Create new balloon.
    Set bal = Assistant.NewBalloon
    ' Specify balloon type.
    bal.BalloonType = msoBalloonTypeButtons
    ' Specify that balloon is modal.
    bal.Mode = msoModeModal

    ' Make Assistant visible.
    If Assistant.Visible = False Then Assistant.Visible = True
    ' Check if first argument has been passed.
    If Not IsMissing(varCheck) Then
        ' If too large, set to maximum number of check boxes (5).
        If varCheck &gt; 6 Then
            varCheck = 5
        End If
        ' Set text property to alphabet character.
        For intI = 1 To varCheck
            bal.Checkboxes(intI).Text = Chr(64 + intI)
        Next intI
    End If

    If Not IsMissing(varLabel) Then
        ' If too large, set to maximum number of labels (5).
        If varLabel &gt; 6 Then
            varLabel = 5
        End If
        For intI = 1 To varLabel
            ' Set text property to alphabet character.
            bal.Labels(intI).Text = Chr(64 + intI)
        Next intI
    End If
    ' Store return value.
    intReturn = bal.Show

    intI = 0
    ' Determine which check boxes were checked, if any.
    For Each bch In bal.Checkboxes
        If bch.Checked = True Then
            strCheck(intI) = bch.Text
            strList = strList &amp; "'" &amp; strCheck(intI) &amp; "'" &amp; Chr(32)
        End If
        intI = intI + 1
    Next
    If Len(strList) &lt;&gt; 0 Then
        MsgBox "You selected checkboxes " &amp; strList &amp; "."
    End If
    ' Determine which label was selected, if any.
    If intReturn &gt; 0 Then
        MsgBox "You selected label " &amp; bal.Labels(intReturn).Text &amp; "."
    End If
End Function</code></pre>
You could call this function from the Debug window as follows:</P>

<pre><code>? AssistantBalloon(4, 5)</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UserForm Object, UserForms Collection</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>UserForm Object, UserForms Collection</H1>Description</P>
A <SPAN CLASS="lee">UserForm</SPAN> <SPAN CLASS="pop">object</SPAN> is a window or dialog box that makes up part of an application's user interface.</P>
The <SPAN CLASS="lee">UserForms</SPAN> <SPAN CLASS="pop">collection</SPAN> is a collection whose elements represent each loaded <SPAN CLASS="lee">UserForm</SPAN> in an application. The <SPAN CLASS="lee">UserForms</SPAN> collection has a <SPAN CLASS="lee">Count</SPAN> property, an <SPAN CLASS="lee">Item </SPAN>property, and an <SPAN CLASS="lee">Add</SPAN> method. <SPAN CLASS="lee">Count</SPAN> specifies the number of elements in the collection; <SPAN CLASS="lee">Item</SPAN> (the default member) specifies a specific collection member; and <SPAN CLASS="lee">Add</SPAN> places a new <SPAN CLASS="lee">UserForm</SPAN> element in the collection.</P>
Syntax</P>
<SPAN CLASS="lee">UserForm</SPAN></P>
<SPAN CLASS="lee">UserForms</SPAN>[<SPAN CLASS="lee">.Item</SPAN>]<SPAN CLASS="lee">(</SPAN><SPAN CLASS="p">index</SPAN><SPAN CLASS="lee">)</SPAN></P>
The placeholder <SPAN CLASS="p">index</SPAN> represents an integer with a range from 0 to <SPAN CLASS="lee">UserForms.Count&nbsp;–&nbsp;</SPAN>1. <SPAN CLASS="lee">Item</SPAN> is the default member of the <SPAN CLASS="lee">UserForms</SPAN> collection and need not be specified.</P>
Remarks</P>
You can use the <SPAN CLASS="lee">UserForms</SPAN> collection to iterate through all loaded user forms in an application.<B> </B>It identifies an intrinsic global <SPAN CLASS="pop">variable</SPAN> named <SPAN CLASS="lee">UserForms</SPAN>.<B> </B>You can pass <SPAN CLASS="lee">UserForms(</SPAN><SPAN CLASS="p">index</SPAN><SPAN CLASS="lee">)</SPAN> to a function whose <SPAN CLASS="pop">argument</SPAN> is specified as a <SPAN CLASS="lee">UserForm</SPAN> class.</P>
User forms have <SPAN CLASS="pop">properties</SPAN> that determine appearance such as position, size, and color; and aspects of their behavior.</P>
User forms can also respond to events initiated by a user or triggered by the system.<B> </B>For example, you can write code in the <SPAN CLASS="lee">Initialize</SPAN> event procedure of the <SPAN CLASS="lee">UserForm</SPAN> to initialize <SPAN CLASS="pop">module-level</SPAN> variables before the <B>UserForm</B> is displayed.</P>
In addition to properties and events, you can use methods to manipulate user forms using code. For example, you can use the <SPAN CLASS="lee">Move</SPAN> method to change the location and size of a <SPAN CLASS="lee">UserForm</SPAN>.</P>
When designing user forms, set the <SPAN CLASS="lee">BorderStyle</SPAN> property to define borders, and set the <SPAN CLASS="lee">Caption</SPAN> property to put text in the title bar. In code, you can use the <SPAN CLASS="lee">Hide</SPAN> and <SPAN CLASS="lee">Show</SPAN> methods to make a <SPAN CLASS="lee">UserForm</SPAN> invisible or visible at <SPAN CLASS="pop">run time</SPAN>.</P>
<SPAN CLASS="lee">UserForm</SPAN> is an <SPAN CLASS="lee">Object</SPAN><SPAN CLASS="pop"> data type</SPAN>. You can declare variables as type <SPAN CLASS="lee">UserForm</SPAN> before setting them to an instance of a type of <SPAN CLASS="lee">UserForm</SPAN> declared at <SPAN CLASS="pop">design time</SPAN>. Similarly, you can pass an <SPAN CLASS="pop">argument</SPAN> to a <SPAN CLASS="pop">procedure</SPAN> as type <SPAN CLASS="lee">UserForm</SPAN>. You can create multiple instances of user forms in code by using the <SPAN CLASS="lee">New</SPAN> keyword in <SPAN CLASS="lee">Dim</SPAN>, <SPAN CLASS="lee">Set</SPAN>, and <SPAN CLASS="lee">Static</SPAN> statements.</P>
You can access the collection of <SPAN CLASS="pop">controls</SPAN> on a <SPAN CLASS="lee">UserForm</SPAN> using the <SPAN CLASS="lee">Controls</SPAN> collection. For example, to hide all the controls on a <SPAN CLASS="lee">UserForm</SPAN>, use code similar to the following:</P>

<pre><code>For Each Control in UserForm1.Controls
    Control.Visible = False
Next Control</code></pre>
<SPAN CLASS="nh">Note</SPAN>   You can't use the <B>UserForm</B> object and <B>UserForms</B> collection in Microsoft Access, even though it's part of the Visual&nbsp;Basic for Applications type library. The properties, methods, and events listed below for this object are part of the Forms type library.</P>
Properties</P>
<SPAN CLASS="eln">ActiveControl</SPAN> property, <SPAN CLASS="eln">BackColor</SPAN> property, <SPAN CLASS="eln">BorderColor</SPAN> property, <SPAN CLASS="eln">BorderStyle</SPAN> property, <SPAN CLASS="eln">CanPaste</SPAN> property, <SPAN CLASS="eln">CanRedo</SPAN> property, <SPAN CLASS="eln">CanUndo</SPAN> property, <SPAN CLASS="eln">Caption</SPAN> property, <SPAN CLASS="eln">Cycle</SPAN> property, <SPAN CLASS="eln">DrawBuffer</SPAN> property, <SPAN CLASS="eln">Enabled</SPAN> property, <B>Font</B> object, <SPAN CLASS="eln">ForeColor</SPAN> property, <B>Height</B>, <SPAN CLASS="eln">Width</SPAN> properties, <SPAN CLASS="eln">HelpContextID</SPAN> property, <B>InsideHeight</B>, <SPAN CLASS="eln">InsideWidth</SPAN> properties, <SPAN CLASS="eln">KeepScrollBarsVisible</SPAN> property, <B>Left</B>, <SPAN CLASS="eln">Top</SPAN> properties, <SPAN CLASS="eln">MouseIcon</SPAN> property, <SPAN CLASS="eln">MousePointer</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Picture</SPAN> property, <SPAN CLASS="eln">PictureAlignment</SPAN> property, <SPAN CLASS="eln">PictureSizeMode</SPAN> property, <SPAN CLASS="eln">PictureTiling</SPAN> property, <SPAN CLASS="eln">ScrollBars</SPAN> property, <B>ScrollHeight</B>, <SPAN CLASS="eln">ScrollWidth</SPAN> properties, <B>ScrollLeft</B>, <SPAN CLASS="eln">ScrollTop</SPAN> properties, <SPAN CLASS="eln">SpecialEffect</SPAN> property, <SPAN CLASS="eln">StartUpPosition</SPAN> property, <SPAN CLASS="eln">Tag</SPAN> property, <SPAN CLASS="eln">VerticalScrollbarSide</SPAN> property, <SPAN CLASS="eln">Visible</SPAN> property, <SPAN CLASS="eln">WhatsThisButton</SPAN> property, <SPAN CLASS="eln">WhatsThisHelp</SPAN> property, <SPAN CLASS="eln">Zoom</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Copy</SPAN> method, <SPAN CLASS="eln">Cut</SPAN> method, <SPAN CLASS="eln">Hide</SPAN> method, <SPAN CLASS="eln">Move</SPAN> method, <SPAN CLASS="eln">Paste</SPAN> method, <SPAN CLASS="eln">PrintForm</SPAN> method, <SPAN CLASS="eln">RedoAction</SPAN> method, <SPAN CLASS="eln">Repaint</SPAN> method, <SPAN CLASS="eln">Scroll</SPAN> method, <SPAN CLASS="eln">SetDefaultTabOrder</SPAN> method, <SPAN CLASS="eln">Show</SPAN> method, <SPAN CLASS="eln">UndoAction</SPAN> method, <SPAN CLASS="eln">WhatsThisMode</SPAN> method.</P>
Events</P>
Activate, Deactivate events, AddControl event, BeforeDragOver event, BeforeDropOrPaste event, Click event, DblClick event, Error event, KeyDown, KeyUp events, KeyPress event, Layout event, MouseDown, MouseUp events, MouseMove event, RemoveControl event, Scroll event, Terminate Event, Zoom event.</P>
See Also</P>
<SPAN CLASS="eln">Unload</SPAN> statement.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

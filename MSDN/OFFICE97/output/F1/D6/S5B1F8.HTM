<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Collection Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Collection Object</H2>Description</P>
A <SPAN CLASS="lee">Collection</SPAN> object is an ordered set of items that can be referred to as a unit.</P>
Remarks</P>
The <SPAN CLASS="lee">Collection</SPAN> object provides a convenient way to refer to a related group of items as a single object. The items, or <SPAN CLASS="pop">members</SPAN>, in a collection need only be related by the fact that they exist in the <SPAN CLASS="pop">collection</SPAN>. Members of a collection don't have to share the same <SPAN CLASS="pop">data type</SPAN>.</P>
A collection can be created the same way other objects are created. For example:</P>

<pre><code>Dim X As New Collection</code></pre>
Once a collection is created, members can be added using the <SPAN CLASS="lee">Add</SPAN> method and removed using the <SPAN CLASS="lee">Remove</SPAN> method. Specific members can be returned from the collection using the <SPAN CLASS="lee">Item</SPAN> method, while the entire collection can be iterated using the <SPAN CLASS="lee">For</SPAN> <SPAN CLASS="lee">Each...Next</SPAN> statement.</P>
Properties</P>
<SPAN CLASS="eln">Count</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Add</SPAN> method, <SPAN CLASS="eln">Item</SPAN> method, <SPAN CLASS="eln">Remove</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">Add</SPAN> method, <B>For Each…Next</B> statement, <SPAN CLASS="eln">Item</SPAN> method, <SPAN CLASS="eln">Remove</SPAN> method.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, a <SPAN CLASS="eln">Collection</SPAN> object can consist of a set of objects of any type. You can create a <SPAN CLASS="eln">Collection</SPAN> object that consists of several objects of the same type or objects of different types.</P>
The collection defined by a <SPAN CLASS="eln">Collection</SPAN> object can contain any combination of <SPAN CLASS="pop">Microsoft Access objects</SPAN>, <SPAN CLASS="pop">Data Access Objects (DAO)</SPAN>, and objects from any other application that exposes its objects to Microsoft Access. You can also add a <SPAN CLASS="eln">Collection</SPAN> object to a collection defined by a <SPAN CLASS="eln">Collection</SPAN> object.</P>
The collection can also contain <SPAN CLASS="pop">user-defined objects</SPAN> that you create in Microsoft Access. For example, you can create user-defined objects with custom methods and properties from a <SPAN CLASS="pop">form module</SPAN> or <SPAN CLASS="pop">report module</SPAN>. Then you can add these objects to a collection defined by a <SPAN CLASS="eln">Collection</SPAN> object, and manipulate them as a set.</P>
Example</P>
This example creates a <SPAN CLASS="lee">Collection</SPAN> object (<SPAN CLASS="cte">MyClasses</SPAN>), and then creates a dialog box in which users can add objects to the collection. To see how this works, choose the <SPAN CLASS="eln">Class Module</SPAN> command from the <SPAN CLASS="eln">Insert</SPAN> menu and declare a public variable called <SPAN CLASS="cte">InstanceName</SPAN> at module level of Class1 (type <SPAN CLASS="lee">Public</SPAN> <SPAN CLASS="cte">InstanceName)</SPAN> to hold the names of each instance. Leave the default name as Class1. Copy and paste the following code into the General section of another module, and then start it with the statement <SPAN CLASS="cte">ClassNamer</SPAN> in another procedure. (This example only works with host applications that support classes.) </P>

<pre><code>Sub ClassNamer()
    Dim MyClasses As New Collection    ' Create a Collection object.
    Dim Num                                ' Counter for individualizing keys.
    Dim Msg As String    ' Variable to hold prompt string.
    Dim TheName, MyObject, NameList    ' Variants to hold information.
    Do
        Dim Inst As New Class1        ' Create a new instance of Class1.
        Num = Num + 1                    ' Increment Num, then get a name.
        Msg = "Please enter a name for this object." &amp; Chr(13) _
            &amp; "Press Cancel to see names in collection."
        TheName = InputBox(Msg, "Name the Collection Items")
        Inst.InstanceName = TheName    ' Put name in object instance.
        ' If user entered name, add it to the collection.
        If Inst.InstanceName &lt;&gt; "" Then
            ' Add the named object to the collection.
            MyClasses.Add item := Inst, key := CStr(Num)
        End If
        ' Clear the current reference in preparation for next one.
        Set Inst = Nothing
    Loop Until TheName = ""
    For Each MyObject In MyClasses    ' Create list of names.
        NameList = NameList &amp; MyObject.InstanceName &amp; Chr(13)
    Next MyObject
    ' Display the list of names in a message box.
    MsgBox NameList, , "Instance Names In MyClasses Collection"

    For Num = 1 To MyClasses.Count    ' Remove name from the collection.
        MyClasses.Remove 1                ' Since collections are reindexed
                                            ' automatically, remove the first
    Next                                    ' member on each iteration.
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

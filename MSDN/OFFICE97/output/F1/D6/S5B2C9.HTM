<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Type Statement</H1>Description</P>
Used at <SPAN CLASS="pop">module level</SPAN> to define a user-defined <SPAN CLASS="pop">data type</SPAN> containing one or more elements.</P>
Syntax</P>
[<SPAN CLASS="lee">Private</SPAN> | <SPAN CLASS="lee">Public</SPAN>] <SPAN CLASS="lee">Type</SPAN> <SPAN CLASS="p">varname</SPAN><SPAN CLASS="p">elementname</SPAN> [<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">subscripts</SPAN>]<SPAN CLASS="lee">)</SPAN>] <SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>[<SPAN CLASS="p">elementname</SPAN> [<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">subscripts</SPAN>]<SPAN CLASS="lee">)</SPAN>] <SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>]<SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">End Type</SPAN></P>
The <SPAN CLASS="lee">Type </SPAN>statement syntax has these parts:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="283pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Public</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used to declare <SPAN CLASS="pop">user-defined types</SPAN> that are available to all <SPAN CLASS="pop">procedures</SPAN> in all <SPAN CLASS="pop">modules</SPAN> in all <SPAN CLASS="pop">projects</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Private</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used to declare user-defined types that are available only within the module where the <SPAN CLASS="pop">declaration</SPAN> is made.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the user-defined type; follows standard <SPAN CLASS="pop">variable</SPAN> naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">elementname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of an element of the user-defined type. Element names also follow standard variable naming conventions, except that <SPAN CLASS="pop">keyword</SPAN>s can be used.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">subscripts</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Dimensions of an <SPAN CLASS="pop">array</SPAN> element. Use only parentheses when declaring an array whose size can change. The <SPAN CLASS="p">subscripts</SPAN> <SPAN CLASS="pop">argument</SPAN> uses the following syntax:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN> [<SPAN CLASS="lee">,</SPAN>[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">When not explicitly stated in <SPAN CLASS="p">lower</SPAN>, the lower bound of an array is controlled by the <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement. The lower bound is zero if no <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement is present.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Data type of the element; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN>(for variable-length strings), <SPAN CLASS="lee">String</SPAN> * <SPAN CLASS="p">length</SPAN> (for fixed-length strings), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>, another user-defined type, or an <SPAN CLASS="pop">object type</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
The <SPAN CLASS="lee">Type</SPAN> statement can be used only at module level. Once you have declared a user-defined type using the <SPAN CLASS="lee">Type</SPAN> statement, you can declare a variable of that type anywhere within the <SPAN CLASS="pop">scope</SPAN> of the declaration. Use <SPAN CLASS="lee">Dim</SPAN>, <SPAN CLASS="lee">Private</SPAN>, <SPAN CLASS="lee">Public</SPAN>, <SPAN CLASS="lee">ReDim</SPAN>, or <SPAN CLASS="lee">Static</SPAN> to declare a variable of a user-defined type.</P>
In <SPAN CLASS="pop">standard modules</SPAN>, user-defined types are public by default. This visibility can be changed using the <SPAN CLASS="lee">Private</SPAN> keyword. In <SPAN CLASS="pop">class modules</SPAN>, however, user-defined types can only be private and the visibility can't be changed using the <SPAN CLASS="lee">Public</SPAN> keyword.</P>
<SPAN CLASS="pop">Line numbers</SPAN> and <SPAN CLASS="pop">line labels</SPAN> aren't allowed in <SPAN CLASS="lee">Type...End Type</SPAN> blocks.</P>
User-defined types are often used with data records, which frequently consist of a number of related elements of different data types.</P>
The following example shows the use of fixed-size arrays in a user-defined type:</P>

<pre><code>Type StateData
    CityCode (1 To 100) As Integer    ' Declare a static array.
    County As String * 30
End Type

Dim Washington(1 To 100) As StateData</code></pre>
In the preceding example, <SPAN CLASS="cte">StateData</SPAN> includes the <SPAN CLASS="cte">CityCode</SPAN> static array, and the record <SPAN CLASS="cte">Washington</SPAN> has the same structure as <SPAN CLASS="cte">StateData</SPAN>.</P>
When you declare a fixed-size array within a user-defined type, its dimensions must be declared with numeric literals or <SPAN CLASS="pop">constants</SPAN> rather than variables.</P>
The setting of the <SPAN CLASS="lee">Option Base</SPAN> statement determines the lower bound for arrays within user-defined types.</P>
See Also</P>
Data type summary, <SPAN CLASS="eln">Dim</SPAN> statement, <B>Option</B> <SPAN CLASS="eln">Base</SPAN> statement, <SPAN CLASS="eln">Private</SPAN> statement, <SPAN CLASS="eln">Public</SPAN> statement, <SPAN CLASS="eln">ReDim</SPAN> statement, <SPAN CLASS="eln">Static</SPAN> statement.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, user-defined types are public by default. You cannot define a public user-defined type within a class module. To declare a user-defined type within a class module, precede the <SPAN CLASS="eln">Type</SPAN> statement with the <SPAN CLASS="eln">Private</SPAN> keyword. If you fail to include the <SPAN CLASS="eln">Private </SPAN>keyword, Microsoft Access generates a compile-time error.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Type</SPAN> statement to define a user-defined data type. The <SPAN CLASS="lee">Type</SPAN> statement is used at the module level only. If it appears in a class module, a <SPAN CLASS="lee">Type</SPAN> statement must be preceded by the keyword <SPAN CLASS="lee">Private</SPAN>.</P>

<pre><code>Type EmployeeRecord                    ' Create user-defined type.
    ID As Integer                        ' Define elements of data type.
    Name As String * 20
    Address As String * 30
    Phone As Long
    HireDate As Date
End Type
Sub CreateRecord()
    Dim MyRecord As EmployeeRecord    ' Declare variable.

    ' Assignment to EmployeeRecord variable must occur in a procedure.
    MyRecord.ID = 12003                ' Assign a value to an element.
End Sub</code></pre>
</P></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Like Operator</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Like Operator</H1>Description</P>
Used to compare two strings.</P>
Syntax</P>
<SPAN CLASS="p">result</SPAN> <SPAN CLASS="lee">=</SPAN> <SPAN CLASS="p">string</SPAN> <SPAN CLASS="lee">Like</SPAN> <SPAN CLASS="p">pattern</SPAN></P>
The <SPAN CLASS="lee">Like</SPAN> operator syntax has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="315pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">result</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required; any numeric <SPAN CLASS="pop">variable</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">string</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required; any <SPAN CLASS="pop">string expression</SPAN>. </P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">pattern</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required; any string expression conforming to the pattern-matching conventions described in Remarks.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
If <SPAN CLASS="p">string</SPAN> matches <SPAN CLASS="p">pattern</SPAN>, <SPAN CLASS="p">result</SPAN> is <SPAN CLASS="lee">True</SPAN>; if there is no match, <SPAN CLASS="p">result</SPAN> is <SPAN CLASS="lee">False</SPAN>. If either <SPAN CLASS="p">string</SPAN> or <SPAN CLASS="p">pattern</SPAN> is <SPAN CLASS="lee">Null</SPAN>, <SPAN CLASS="p">result</SPAN> is <SPAN CLASS="lee">Null</SPAN>.</P>
The behavior of the <SPAN CLASS="lee">Like</SPAN> operator depends on the <SPAN CLASS="lee">Option Compare</SPAN> statement. The default <SPAN CLASS="pop">string-comparison</SPAN> method for each <SPAN CLASS="pop">module</SPAN> is <SPAN CLASS="lee">Option Compare</SPAN> <SPAN CLASS="lee">Binary</SPAN>.</P>
<SPAN CLASS="lee">Option Compare Binary</SPAN> results in string comparisons based on a <SPAN CLASS="pop">sort order</SPAN> derived from the internal binary representations of the characters. In Microsoft Windows, sort order is determined by the code page. In the following example, a typical binary sort order is shown:</P>
A &lt; B &lt; E &lt; Z &lt; a &lt; b &lt; e &lt; z &lt; À &lt; Ê &lt; Ø &lt; à &lt; ê &lt; ø</P>
<SPAN CLASS="lee">Option Compare Text</SPAN> results in string comparisons based on a case-insensitive, textual sort order determined by your system's <SPAN CLASS="pop">locale</SPAN>. When you sort The same characters using <SPAN CLASS="lee">Option Compare Text</SPAN>, the following text sort order is produced:</P>
(A=a) &lt; (À=à) &lt; (B=b) &lt; (E=e) &lt; (Ê=ê) &lt; (Z=z) &lt; (Ø=ø) </P>
Built-in pattern matching provides a versatile tool for string comparisons. The pattern-matching features allow you to use wildcard characters, character lists, or character ranges, in any combination, to match strings. The following table shows the characters allowed in <SPAN CLASS="p">pattern</SPAN> and what they match:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="101pt" VALIGN="TOP"><COL WIDTH="258pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Characters in <SPAN CLASS="narg">pattern</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Matches in <SPAN CLASS="narg">string</SPAN></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">?</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any single character.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">*</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Zero or more characters.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">#</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any single digit (0 – 9).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">[<SPAN CLASS="p">charlist</SPAN>]</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any single character in <SPAN CLASS="p">charlist</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">[<SPAN CLASS="lee">!</SPAN><SPAN CLASS="p">charlist</SPAN>]</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any single character not in <SPAN CLASS="p">charlist</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>A group of one or more characters (<SPAN CLASS="p">charlist</SPAN>) enclosed in brackets (<SPAN CLASS="lee">[ ]</SPAN>) can be used to match any single character in <SPAN CLASS="p">string</SPAN> and can include almost any <SPAN CLASS="pop">character code</SPAN>, including digits. </P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;To match the special characters left bracket (<SPAN CLASS="lee">[</SPAN>), question mark (<SPAN CLASS="lee">?</SPAN>), number sign (<SPAN CLASS="lee">#</SPAN>), and asterisk (<SPAN CLASS="lee">*</SPAN>), enclose them in brackets.&nbsp;&nbsp;&nbsp;The right bracket (<SPAN CLASS="lee">]</SPAN>) can't be used within a group to match itself, but it can be used outside a group as an individual character.</P>
By using a hyphen (<SPAN CLASS="lee">-</SPAN>) to separate the upper and lower bounds of the range, <SPAN CLASS="p">charlist</SPAN> can specify a range of characters.&nbsp;&nbsp;&nbsp;For example, <SPAN CLASS="cte">[A-Z]</SPAN> results in a match if the corresponding character position in <SPAN CLASS="p">string</SPAN> contains any uppercase letters in the range A – Z.&nbsp;&nbsp;&nbsp;Multiple ranges are included within the brackets without delimiters.&nbsp;&nbsp;&nbsp;</P>
The meaning of a specified range depends on the character ordering valid at <SPAN CLASS="pop">run time</SPAN> (as determined by <SPAN CLASS="lee">Option Compare</SPAN> and the <SPAN CLASS="pop">locale</SPAN> setting of the system the code is running on).&nbsp;&nbsp;&nbsp;Using the <SPAN CLASS="lee">Option Compare Binary</SPAN> example, the range <SPAN CLASS="cte">[A–E]</SPAN> matches A, B and E.&nbsp;&nbsp;&nbsp;With <SPAN CLASS="lee">Option Compare Text</SPAN>,<SPAN CLASS="cte"> [A–E]</SPAN> matches A, a, À, à, B, b, E, e.&nbsp;&nbsp;&nbsp;The range does not match Ê or ê because accented characters fall after unaccented characters in the sort order.</P>
Other important rules for pattern matching include the following:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">An exclamation point (<SPAN CLASS="lee">!</SPAN>) at the beginning of <SPAN CLASS="p">charlist</SPAN> means that a match is made if any character except the characters in <SPAN CLASS="p">charlist</SPAN> is found in <SPAN CLASS="p">string</SPAN>.&nbsp;&nbsp;&nbsp;When used outside brackets, the exclamation point matches itself.</LI><LI CLASS="ULI1">A hyphen (<SPAN CLASS="lee">-</SPAN>) can appear either at the beginning (after an exclamation point if one is used) or at the end of <SPAN CLASS="p">charlist</SPAN> to match itself.&nbsp;&nbsp;&nbsp;In any other location, the hyphen is used to identify a range of characters.</LI><LI CLASS="ULI1">When a range of characters is specified, they must appear in ascending sort order (from lowest to highest).&nbsp;&nbsp;&nbsp;<SPAN CLASS="cte">[A-Z]</SPAN> is a valid pattern, but <SPAN CLASS="cte">[Z-A]</SPAN> is not.</LI><LI CLASS="ULI1">The character sequence <SPAN CLASS="cte">[]</SPAN> is considered a zero-length string ("&nbsp;").
</LI></UL></SPAN>In some languages, there are special characters in the alphabet that represent two separate characters.&nbsp;&nbsp;&nbsp;For example, several languages use the character "æ" to represent the characters "a" and "e" when they appear together.&nbsp;&nbsp;&nbsp;The <SPAN CLASS="lee">Like</SPAN> operator recognizes that the single special character and the two individual characters are equivalent.</P>
When a language that uses a special character is specified in the system locale settings, an occurrence of the single special character in either <SPAN CLASS="p">pattern</SPAN> or <SPAN CLASS="p">string</SPAN> matches the equivalent 2-character sequence in the other string.&nbsp;&nbsp;&nbsp;Similarly, a single special character in <SPAN CLASS="p">pattern</SPAN> enclosed in brackets (by itself, in a list, or in a range) matches the equivalent 2-character sequence in <SPAN CLASS="p">string</SPAN>.</P>
See Also</P>
Comparison operators, <SPAN CLASS="eln">InStr</SPAN> function, Operator precedence, <B>Option</B> <SPAN CLASS="eln">Compare</SPAN> statement, <SPAN CLASS="eln">StrComp</SPAN> function.</P>
Specifics (Macintosh)</P>
On the Macintosh, <SPAN CLASS="pop">sort order</SPAN> is determined by the character set.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, you can use the <SPAN CLASS="op">Like</SPAN> operator in a query expression or in a <SPAN CLASS="pop">calculated control</SPAN> on a form or report.</P>
You can use the <SPAN CLASS="op">Like</SPAN> operator to specify inexact criteria in the <SPAN CLASS="pop">query design grid</SPAN>. For example, if you type <SPAN CLASS="l">Like "C*"</SPAN> in the <SPAN CLASS="eln">Criteria</SPAN> row of the query design grid, the query returns all field values beginning with the letter C.</P>
In a <SPAN CLASS="pop">parameter query</SPAN>, you can use the <SPAN CLASS="op">Like</SPAN> operator to prompt the user for a pattern to search for. For example, suppose you have an Employees table that includes a LastName field. In the <SPAN CLASS="pop">Query window</SPAN>, create a new query by adding the Employees table and dragging the LastName field to the grid. Enter the following expression in the <SPAN CLASS="eln">Criteria</SPAN> cell:</P>

<pre><code>Like [Enter first few letters of name:]&amp;"*"</code></pre>
When the query is run, a dialog box prompts the user with "Enter first few letters of name:". If the user types <SPAN CLASS="l">Sm</SPAN> in the dialog box, the query looks for the pattern Sm* that is, all names beginning with the letters Sm.</P>
You can use the <SPAN CLASS="op">Like</SPAN> operator in an expression as a setting for the <SPAN CLASS="eln">ValidationRule</SPAN> property. For example, you can restrict data entered in a text box control to an inexact specification. In the <SPAN CLASS="eln">ValidationRule</SPAN> property of the text box, enter the following expression:</P>

<pre><code>Like "P[A-F]###"</code></pre>
Data entered in this text box must now begin with the letter P, followed by any letter between A and F and three digits.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Like</SPAN> operator to compare a string to a pattern.</P>

<pre><code>Dim MyCheck
MyCheck = "aBBBa" Like "a*a"            ' Returns True.
MyCheck = "F" Like "[A-Z]"                ' Returns True.
MyCheck = "F" Like "[!A-Z]"                ' Returns False.
MyCheck = "a2a" Like "a#a"                ' Returns True.
MyCheck = "aM5b" Like "a[L-P]#[!c-e]"        ' Returns True.
MyCheck = "BAT123khg" Like "B?T*"        ' Returns True.
MyCheck = "CAT123khg" Like "B?T*"        ' Returns False.</code></pre>
Example (Microsoft Excel)</P>
This example deletes every defined name that contains "temp". The Option Compare Text statement must be included at the top of any module that contains this example.</P>

<pre><code>For Each nm In ActiveWorkbook.Names
    If nm.Name Like "*temp*" Then
        nm.Delete
    End If
Next nm</code></pre>
This example adds an arrowhead to every shape on Sheet1 that has the word "Line" in its name.</P>

<pre><code>For Each d In Worksheets("Sheet1").DrawingObjects
    If d.Name Like "*Line*" Then
        d.ArrowHeadLength = xlLong
        d.ArrowHeadStyle = xlOpen
        d.ArrowHeadWidth = xlNarrow
    End If
Next</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReDim Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>ReDim Statement</H1>Description</P>
Used at <SPAN CLASS="pop">procedure level</SPAN> to reallocate storage space for dynamic array <SPAN CLASS="pop">variables</SPAN>.</P>
Syntax</P>
<SPAN CLASS="lee">ReDim</SPAN> [<SPAN CLASS="lee">Preserve</SPAN>] <SPAN CLASS="p">varname</SPAN><SPAN CLASS="lee">(</SPAN><SPAN CLASS="p">subscripts</SPAN><SPAN CLASS="lee">) </SPAN>[<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>] [<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">varname</SPAN><SPAN CLASS="lee">(</SPAN><SPAN CLASS="p">subscripts</SPAN><SPAN CLASS="lee">) </SPAN>[<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>]] <SPAN CLASS="lee">. . .</SPAN></P>
The <SPAN CLASS="lee">ReDim</SPAN> statement syntax has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="66pt" VALIGN="TOP"><COL WIDTH="293pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Preserve</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Keyword</SPAN> used to preserve the data in an existing <SPAN CLASS="pop">array</SPAN> when you change the size of the last dimension.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the variable; follows standard variable naming conventions.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="66pt" VALIGN="TOP"><COL WIDTH="293pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">subscripts</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <SPAN CLASS="p">subscripts</SPAN> <SPAN CLASS="pop">argument</SPAN> uses the following syntax:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN> [<SPAN CLASS="lee">,</SPAN>[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">When not explicitly stated in <SPAN CLASS="p">lower</SPAN>, the lower bound of an array is controlled by the <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement. The lower bound is zero if no <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement is present.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Data type</SPAN> of the variable; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN> (for variable-length strings), <SPAN CLASS="lee">String</SPAN> * <SPAN CLASS="p">length</SPAN> (for fixed-length strings), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>, a <SPAN CLASS="pop">user-defined type</SPAN>, or an <SPAN CLASS="pop">object type</SPAN>. Use a separate <SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN> clause for each variable being defined. For a <SPAN CLASS="lee">Variant</SPAN> containing an array, <SPAN CLASS="p">type</SPAN> describes the type of each element of the array, but doesn't change the <SPAN CLASS="lee">Variant</SPAN> to some other type.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
The <SPAN CLASS="lee">ReDim</SPAN> <SPAN CLASS="pop">statement</SPAN> is used to size or resize a dynamic array that has already been formally declared using a <SPAN CLASS="lee">Private</SPAN>, <SPAN CLASS="lee">Public</SPAN>, or <SPAN CLASS="lee">Dim</SPAN> statement with empty parentheses (without dimension subscripts).</P>
You can use the <SPAN CLASS="lee">ReDim</SPAN> statement repeatedly to change the number of elements and dimensions in an array. However, you can't declare an array of one data type and later use <SPAN CLASS="lee">ReDim</SPAN> to change the array to another data type, unless the array is contained in a <SPAN CLASS="lee">Variant</SPAN>. If the array is contained in a <SPAN CLASS="lee">Variant</SPAN>, the type of the elements can be changed using an <SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN> clause, unless you're using the <SPAN CLASS="lee">Preserve</SPAN> keyword, in which case, no changes of data type are permitted.</P>
If you use the <SPAN CLASS="lee">Preserve</SPAN> keyword, you can resize only the last array dimension and you can't change the number of dimensions at all. For example, if your array has only one dimension, you can resize that dimension because it is the last and only dimension. However, if your array has two or more dimensions, you can change the size of only the last dimension and still preserve the contents of the array. The following example shows how you can increase the size of the last dimension of a dynamic array without erasing any existing data contained in the array.</P>

<pre><code>ReDim X(10, 10, 10)
. . .
ReDim Preserve X(10, 10, 15)</code></pre>
Similarly, when you use <SPAN CLASS="lee">Preserve</SPAN>, you can change the size of the array only by changing the upper bound; changing the lower bound causes an error.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;If you make an array smaller than it was, data in the eliminated elements will be lost. If you pass an array to a procedure by reference, you can't redimension the array within the procedure.</P>
<HR CLASS="cae">
When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string (" "), and a fixed-length string is filled with zeros. <SPAN CLASS="lee">Variant</SPAN> variables are initialized to Empty. Each element of a user-defined type variable is initialized as if it were a separate variable. A variable that refers to an object must be assigned an existing object using the <SPAN CLASS="lee">Set</SPAN> statement before it can be used. Until it is assigned an object, the declared <SPAN CLASS="pop">object variable</SPAN> has the special value <SPAN CLASS="lee">Nothing</SPAN>, which indicates that it doesn't refer to any particular instance of an object.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;The <SPAN CLASS="lee">ReDim</SPAN> statement acts as a declarative statement if the variable it declares doesn't exist at <SPAN CLASS="pop">module level</SPAN> or <SPAN CLASS="pop">procedure level</SPAN>. If another variable with the same name is created later, even in a wider <SPAN CLASS="pop">scope</SPAN>, <SPAN CLASS="lee">ReDim</SPAN> will refer to the later variable and won't necessarily cause a compilation error, even if <SPAN CLASS="lee">Option Explicit</SPAN> is in effect. To avoid such conflicts, <SPAN CLASS="lee">ReDim</SPAN> should not be used as a declarative statement, but simply for redimensioning arrays.</P>
<HR CLASS="cae">
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;To resize an array contained in a <SPAN CLASS="lee">Variant</SPAN>, you must explicitly declare the <SPAN CLASS="lee">Variant</SPAN> variable before attempting to resize its array.</P>
See Also</P>
<SPAN CLASS="eln">Array</SPAN> function, <SPAN CLASS="eln">Dim</SPAN> statement, <B>Option</B> <SPAN CLASS="eln">Base</SPAN> statement, <SPAN CLASS="eln">Private</SPAN> statement, <SPAN CLASS="eln">Public</SPAN> statement, <SPAN CLASS="eln">Set</SPAN> statement, <SPAN CLASS="eln">Static</SPAN> statement.</P>
Example</P>
This example uses the <SPAN CLASS="lee">ReDim</SPAN> statement to allocate and reallocate storage space for dynamic-array variables. It assumes the <SPAN CLASS="lee">Option Base </SPAN>is 1.</P>

<pre><code>Dim MyArray() As Integer                    ' Declare dynamic array.
Redim MyArray(5)                            ' Allocate 5 elements.
For I = 1 To 5                                ' Loop 5 times.
    MyArray(I) = I                            ' Initialize array.
Next I</code></pre>
The next statement resizes the array and erases the elements.</P>

<pre><code>Redim MyArray(10)                            ' Resize to 10 elements.
For I = 1 To 10                                ' Loop 10 times.
    MyArray(I) = I                            ' Initialize array.
Next I</code></pre>
The following statement resizes the array but does not erase elements.</P>

<pre><code>Redim Preserve MyArray(15)                ' Resize to 15 elements.</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

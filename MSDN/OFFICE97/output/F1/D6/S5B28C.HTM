<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Let Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Property Let Statement</H1>Description</P>
Declares the name, <SPAN CLASS="pop">arguments</SPAN>, and code that form the body of a <SPAN CLASS="lee">Property</SPAN> <SPAN CLASS="lee">Let</SPAN> <SPAN CLASS="pop">procedure</SPAN>, which assigns a value to a <SPAN CLASS="pop">property</SPAN>.</P>
Syntax</P>
[<SPAN CLASS="lee">Public</SPAN> | <SPAN CLASS="lee">Private</SPAN>] [<SPAN CLASS="lee">Static</SPAN>] <SPAN CLASS="lee">Property</SPAN> <SPAN CLASS="lee">Let</SPAN> <SPAN CLASS="p">name</SPAN> <SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">arglist</SPAN><SPAN CLASS="lee">,</SPAN>] <SPAN CLASS="p">value</SPAN><SPAN CLASS="lee">)</SPAN>[<SPAN CLASS="p">statements</SPAN>][<SPAN CLASS="lee">Exit Property</SPAN>][<SPAN CLASS="p">statements</SPAN>]</P>
<SPAN CLASS="lee">End Property</SPAN></P>
The <SPAN CLASS="lee">Property Let</SPAN> statement syntax has these parts.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Public</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Property</SPAN> <SPAN CLASS="lee">Let</SPAN> procedure is accessible to all other procedures in all <SPAN CLASS="pop">modules</SPAN>. If used in a module that contains an <SPAN CLASS="lee">Option Private</SPAN> statement, the procedure is not available outside the <SPAN CLASS="pop">project</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Private</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Property</SPAN> <SPAN CLASS="lee">Let </SPAN>procedure is accessible only to other procedures in the module where it is declared.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Static</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Property Let</SPAN> procedure's local <SPAN CLASS="pop">variables</SPAN> are preserved between calls. The <SPAN CLASS="lee">Static</SPAN> attribute doesn't affect variables that are declared outside the <SPAN CLASS="lee">Property Let</SPAN> procedure, even if they are used in the procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the <SPAN CLASS="lee">Property Let</SPAN> procedure; follows standard variable naming conventions, except that the name can be the same as a <SPAN CLASS="lee">Property Get</SPAN> or <SPAN CLASS="lee">Property Set</SPAN> procedure in the same module.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">arglist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. List of variables representing arguments that are passed to the <SPAN CLASS="lee">Property Let</SPAN> procedure when it is called. Multiple arguments are separated by commas. The name and <SPAN CLASS="pop">data type</SPAN> of each argument in a <SPAN CLASS="lee">Property Let</SPAN> procedure must be the same as the corresponding argument in a <SPAN CLASS="lee">Property Get</SPAN> procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">value</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Variable to contain the value to be assigned to the property. When the procedure is called, this argument appears on the right side of the calling <SPAN CLASS="pop">expression</SPAN>. The data type of <SPAN CLASS="p">value</SPAN> must be the same as the return type of the corresponding <SPAN CLASS="lee">Property Get</SPAN> procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">statements</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Any group of <SPAN CLASS="pop">statements</SPAN> to be executed within the <SPAN CLASS="lee">Property Let</SPAN> procedure.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="p">arglist</SPAN> argument has the following syntax and parts.</P>
[<SPAN CLASS="lee">Optional</SPAN>] [<SPAN CLASS="lee">ByVal</SPAN> | <SPAN CLASS="lee">ByRef</SPAN>] [<SPAN CLASS="lee">ParamArray</SPAN>] <SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">( )</SPAN>] [<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>] [<SPAN CLASS="lee">=</SPAN> <SPAN CLASS="p">defaultvalue</SPAN>]</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Optional</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that an argument is not required. If used, all subsequent arguments in <SPAN CLASS="p">arglist</SPAN> must also be optional and declared using the <SPAN CLASS="lee">Optional</SPAN> keyword. Note that it is not possible for the right side of a <SPAN CLASS="lee">Property Let</SPAN> expression to be <SPAN CLASS="lee">Optional</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByVal</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the argument is passed <SPAN CLASS="pop">by value</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByRef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the argument is passed <SPAN CLASS="pop">by reference</SPAN>. <B>ByRef</B> is the default in Visual&nbsp;Basic.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ParamArray</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used only as the last argument in <SPAN CLASS="p">arglist</SPAN> to indicate that the final argument is an <SPAN CLASS="lee">Optional</SPAN> array of <SPAN CLASS="lee">Variant</SPAN> elements. The <SPAN CLASS="lee">ParamArray</SPAN> keyword allows you to provide an arbitrary number of arguments. It may not be used with <SPAN CLASS="lee">ByVal</SPAN>, <SPAN CLASS="lee">ByRef</SPAN>, or <SPAN CLASS="lee">Optional</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the variable representing the argument; follows standard variable naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Data type of the argument passed to the procedure; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN> (variable length only), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>. If the parameter is not <SPAN CLASS="lee">Optional</SPAN>, a <SPAN CLASS="pop">user-defined type</SPAN>, or an <SPAN CLASS="pop">object type</SPAN> may also be specified.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">defaultvalue</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Any <SPAN CLASS="pop">constant</SPAN> or constant expression. Valid for <SPAN CLASS="lee">Optional</SPAN> parameters only. If the type is an <SPAN CLASS="lee">Object</SPAN>, an explicit default value can only be <SPAN CLASS="lee">Nothing</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P><SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;Every <SPAN CLASS="lee">Property Let</SPAN> statement must define at least one argument for the procedure it defines. That argument (or the last argument if there is more than one) contains the actual value to be assigned to the property when the procedure defined by the <SPAN CLASS="lee">Property Let</SPAN> statement is invoked. That argument is referred to as <SPAN CLASS="p">value</SPAN> in the preceding syntax.</P>
Remarks</P>
If not explicitly specified using either <SPAN CLASS="lee">Public</SPAN> or <SPAN CLASS="lee">Private</SPAN>, <SPAN CLASS="lee">Property</SPAN> procedures are public by default. If <SPAN CLASS="lee">Static</SPAN> is not used, the value of local variables is not preserved between calls.</P>
All executable code must be in procedures. You can't define a <SPAN CLASS="lee">Property Let</SPAN> procedure inside another <SPAN CLASS="lee">Property</SPAN>, <SPAN CLASS="lee">Sub</SPAN>, or <SPAN CLASS="lee">Function</SPAN> procedure.</P>
The <SPAN CLASS="lee">Exit Property </SPAN>statement causes an immediate exit from a <SPAN CLASS="lee">Property Let</SPAN> procedure. Program execution continues with the statement following the statement that called the <SPAN CLASS="lee">Property Let</SPAN> procedure. Any number of <SPAN CLASS="lee">Exit Property</SPAN> statements can appear anywhere in a <SPAN CLASS="lee">Property Let</SPAN> procedure.</P>
Like a <SPAN CLASS="lee">Function</SPAN> and <SPAN CLASS="lee">Property Get</SPAN> procedure, a <SPAN CLASS="lee">Property Let</SPAN> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <SPAN CLASS="lee">Function</SPAN> and <SPAN CLASS="lee">Property Get</SPAN> procedure, both of which return a value, you can only use a <SPAN CLASS="lee">Property Let</SPAN> procedure on the left side of a property assignment expression or <SPAN CLASS="lee">Let</SPAN> statement.</P>
See Also</P>
<SPAN CLASS="eln">Function</SPAN> statement, <SPAN CLASS="eln">Let</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Get</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Set</SPAN> statement, <SPAN CLASS="eln">Sub</SPAN> statement.</P>
Specifics (Microsoft Access)</P>
You can use the <SPAN CLASS="eln">Property Let</SPAN> statement to define a property procedure that assigns the value of a property. You will probably want to use the <SPAN CLASS="eln">Property Let</SPAN> and <SPAN CLASS="eln">Property Get</SPAN> statements together to create a property in a <SPAN CLASS="pop">class module</SPAN>. For example, you could define a <SPAN CLASS="eln">Property Let</SPAN> procedure in a class module to set a new property, and a <SPAN CLASS="eln">Property Get</SPAN> procedure to return the value of that setting. When you create a new instance of this class, the property procedures behave like custom properties for the new object.</P>
Property procedures in a class module are public by default, and will be available to procedures in other modules in the current database, unless you preface them with the <SPAN CLASS="eln">Private </SPAN>keyword.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Property Let</SPAN> statement to define a procedure that assigns a value to a property. The property identifies the pen color for a drawing package.</P>

<pre><code>Dim CurrentColor As Integer
Const BLACK = 0, RED = 1, GREEN = 2, BLUE = 3

' Set the pen color property for a Drawing package.
' The module-level variable CurrentColor is set to
' a numeric value that identifies the color used for drawing.
Property Let PenColor(ColorName As String)
    Select Case ColorName                    ' Check color name string.
        Case "Red"
            CurrentColor = RED                ' Assign value for Red.
        Case "Green"
            CurrentColor = GREEN            ' Assign value for Green.
        Case "Blue"
            CurrentColor = BLUE            ' Assign value for Blue.
        Case Else
            CurrentColor = BLACK            ' Assign default value.
    End Select
End Property

' The following code sets the PenColor property for a drawing package
' by calling the Property let procedure.
PenColor = "Red"</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Operator Precedence</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Operator Precedence</H1>Description</P>
When several operations occur in an <SPAN CLASS="pop">expression</SPAN>, each part is evaluated and resolved in a predetermined order called operator precedence.</P>
When expressions contain operators from more than one category, arithmetic operators are evaluated first, <SPAN CLASS="pop">comparison operators</SPAN> are evaluated next, and logical operators are evaluated last. Comparison operators all have equal precedence; that is, they are evaluated in the left-to-right order in which they appear. Arithmetic and logical operators are evaluated in the following order of precedence:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="142pt" VALIGN="TOP"><COL WIDTH="125pt" VALIGN="TOP"><COL WIDTH="80pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Arithmetic</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Comparison</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Logical</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Exponentiation (<SPAN CLASS="lee">^</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Equality (<SPAN CLASS="lee">=</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Not</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Negation (<SPAN CLASS="lee">–</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Inequality (<SPAN CLASS="lee">&lt;&gt;</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">And</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Multiplication and division (<SPAN CLASS="lee">*</SPAN>, <SPAN CLASS="lee">/</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Less than (<SPAN CLASS="lee">&lt;</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Or</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Integer division (<SPAN CLASS="lee">\</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Greater than (<SPAN CLASS="lee">&gt;</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Xor</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Modulus arithmetic (<SPAN CLASS="lee">Mod</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Less than or equal to (<SPAN CLASS="lee">&lt;=</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Eqv</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Addition and subtraction (<SPAN CLASS="lee">+</SPAN>, <SPAN CLASS="lee">–</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Greater than or equal to (<SPAN CLASS="lee">&gt;=</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Imp</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">String concatenation (<SPAN CLASS="lee">&amp;</SPAN>)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Like<BR>Is</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR></TBODY></TABLE>
<BR></P>When multiplication and division occur together in an expression, each operation is evaluated as it occurs from left to right. When addition and subtraction occur together in an expression, each operation is evaluated in order of appearance from left to right. Parentheses can be used to override the order of precedence and force some parts of an expression to be evaluated before others. Operations within parentheses are always performed before those outside. Within parentheses, however, operator precedence is maintained.</P>
The string concatenation operator (<SPAN CLASS="lee">&amp;</SPAN>) is not an arithmetic operator, but in precedence, it does follow all arithmetic operators and precede all comparison operators.</P>
The <SPAN CLASS="lee">Like</SPAN> operator is equal in precedence to all comparison operators, but is actually a pattern-matching operator.</P>
The <SPAN CLASS="lee">Is</SPAN> operator is an object reference comparison operator. It does not compare objects or their values; it checks only to determine if two object references refer to the same object.</P>
See Also</P>
<SPAN CLASS="eln">Is</SPAN> operator, <SPAN CLASS="eln">Like</SPAN> operator.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

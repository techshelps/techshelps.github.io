<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Command Function</H2>Description</P>
Returns the <SPAN CLASS="pop">argument</SPAN> portion of the <SPAN CLASS="pop">command line</SPAN> used to launch Microsoft Visual Basic or an executable program developed with Visual Basic.</P>
Syntax</P>
<SPAN CLASS="lee">Command</SPAN></P>
Remarks</P>
When Visual Basic is launched from the <SPAN CLASS="pop">command line</SPAN>, any portion of the command line that follows <SPAN CLASS="cte">/cmd</SPAN> is passed to the program as the command-line argument. In the following example, <SPAN CLASS="cte">cmdlineargs</SPAN> represents the argument information returned by the <SPAN CLASS="lee">Command</SPAN> function.</P>

<pre><code>VB /cmd cmdlineargs</code></pre>
For applications developed with Visual Basic and compiled to an .exe file, <SPAN CLASS="lee">Command</SPAN> returns any arguments that appear after the name of the application on the command line. For example:</P>

<pre><code>MyApp cmdlineargs</code></pre>
To find how command line arguments can be changed in the user interface of the application you're using, search Help for "command line arguments."</P>
Specifics (Microsoft Access)</P>
To change a command-line argument once a database has been opened, click <SPAN CLASS="eln">Options</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu. On the <SPAN CLASS="eln">Advanced</SPAN> tab of the <SPAN CLASS="eln">Options</SPAN> dialog box, enter a new argument in the <SPAN CLASS="eln">Command-Line Arguments</SPAN> box. The <SPAN CLASS="eln">Command</SPAN> function will now return the new argument you've entered.</P>
When the <SPAN CLASS="eln">Command</SPAN> function is used anywhere other than in Visual Basic code in a module, you must include empty parentheses after the function. For example, to use the <SPAN CLASS="eln">Command</SPAN> function in a <SPAN CLASS="pop">text box</SPAN> on a <SPAN CLASS="pop">form</SPAN>, you would set the <SPAN CLASS="eln">ControlSource</SPAN> property of the text box to an expression like the following:</P>

<pre><code>=Command()</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">Command</SPAN> function to get the command line arguments in a function that returns them in a <SPAN CLASS="lee">Variant</SPAN> containing an array.</P>

<pre><code>Function GetCommandLine(Optional MaxArgs)
    'Declare variables.
    Dim C, CmdLine, CmdLnLen, InArg, I, NumArgs
    'See if MaxArgs was provided.
    If IsMissing(MaxArgs) Then MaxArgs = 10
    'Make array of the correct size.
    ReDim ArgArray(MaxArgs)
    NumArgs = 0: InArg = False
    'Get command line arguments.
    CmdLine = Command()
    CmdLnLen = Len(CmdLine)
    'Go thru command line one character
    'at a time.
    For I = 1 To CmdLnLen
        C = Mid(CmdLine, I, 1)
        'Test for space or tab.
        If (C &lt;&gt; " " And C &lt;&gt; vbTab) Then
            'Neither space nor tab.
            'Test if already in argument.
            If Not InArg Then
            'New argument begins.
            'Test for too many arguments.
                If NumArgs = MaxArgs Then Exit For
                    NumArgs = NumArgs + 1
                    InArg = True
                End If
            'Add character to current argument.
            ArgArray(NumArgs) = ArgArray(NumArgs) + C
        Else
            'Found a space or tab.
            'Set InArg flag to False.
            InArg = False
        End If
    Next I
    'Resize array just enough to hold arguments.
    ReDim Preserve ArgArray(NumArgs)
    'Return Array in Function name.
    GetCommandLine = ArgArray()
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OnAction Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>OnAction Property</H1>Applies To</P>
<SPAN CLASS="eln">CommandBarButton</SPAN> object, <SPAN CLASS="eln">CommandBarComboBox</SPAN> object, <SPAN CLASS="eln">CommandBarControl</SPAN> object, <SPAN CLASS="eln">CommandBarPopup</SPAN> object.</P>
Description</P>
Returns or sets the name of the Visual&nbsp;Basic macro that will be run when the user clicks or changes the value of a <SPAN CLASS="pop">command bar control.</SPAN> Read/write <SPAN CLASS="lee">String</SPAN>.</P>
<SPAN CLASS="nh">Note</SPAN>   The container application determines whether the value is a valid macro name.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access&nbsp;97, you can use the <SPAN CLASS="p">Toolbar</SPAN><SPAN CLASS="eln"> Control Properties</SPAN> dialog box for <SPAN CLASS="pop">command bar</SPAN> controls to set the <SPAN CLASS="eln">OnAction</SPAN> property for a control on a command bar. Display the <SPAN CLASS="eln">Customize</SPAN> dialog box by pointing to <SPAN CLASS="eln">Toolbars</SPAN> on the <SPAN CLASS="eln">View</SPAN> menu and clicking <SPAN CLASS="eln">Customize</SPAN>. For <SPAN CLASS="pop">menu bar</SPAN> and <SPAN CLASS="pop">toolbar</SPAN> controls, display the menu bar or toolbar, and then right-click the control whose <SPAN CLASS="eln">OnAction</SPAN> property you want to set. For <SPAN CLASS="pop">shortcut menu</SPAN> controls, select the <SPAN CLASS="eln">Shortcut Menus</SPAN> check box on the <SPAN CLASS="eln">Toolbars</SPAN> tab of the <SPAN CLASS="eln">Customize</SPAN> dialog box, then find the shortcut menu control you want on the menu bar that's displayed and right-click the control. Click the <SPAN CLASS="eln">Properties</SPAN> command. Enter the macro or function you want to run in the <SPAN CLASS="eln">On Action</SPAN> box.</P>
You can use the <SPAN CLASS="eln">OnAction</SPAN> property only to run a <SPAN CLASS="pop">macro</SPAN> or a function. To run a macro, select it from the drop-down list in the <SPAN CLASS="eln">On Action</SPAN> box, or enter its name in the box. To run a function, enter its name in the form <SPAN CLASS="l">=</SPAN><SPAN CLASS="p">functionname</SPAN><SPAN CLASS="l">( )</SPAN> in the box.</P>
You can also set the <SPAN CLASS="eln">OnAction</SPAN> property to an <SPAN CLASS="pop">expression</SPAN>. The expression can contain a built-in or user-defined function or combination of functions. When Microsoft Access evaluates an expression, it performs all of the operations in the expression. For example, the following is an expression that runs the user-defined function "CustomControlFunction":</P>

<pre><code>=CustomControlFunction()</code></pre>
In Visual&nbsp;Basic, the <SPAN CLASS="eln">OnAction</SPAN> property takes a string, so to set it to an expression, you must pass it a string that contains the expression. In passing the string, be careful to enclose strings within the string in quotation marks ("). (Note that in the <SPAN CLASS="eln">On Action</SPAN> box in the <SPAN CLASS="p">Toolbar</SPAN><SPAN CLASS="eln"> Control Properties</SPAN> dialog box, an enclosed string in the expression should only have one set of quotation marks around it.) Also, make sure you include the equal sign (=) to specify that the string contains an expression. If your function takes no arguments, remember to include parentheses [( )] within the string. You can set the <SPAN CLASS="eln">OnAction</SPAN> property to the previous expression with the following string:</P>

<pre><code>"=CustomControlFunction()"</code></pre>
<SPAN CLASS="nh">Note</SPAN>   that you must set the <SPAN CLASS="eln">OnAction</SPAN> property to the name of a Function<SPAN CLASS="pop"> procedure</SPAN>; you can't set it to the name of a Sub<SPAN CLASS="pop"> procedure</SPAN>.</P>
For custom command bar controls, you must set this property in order for the control to perform any action. If you set this property for a built-in control, the <SPAN CLASS="eln">OnAction</SPAN> property setting overrides the normal actions that the control performs; that is, you can force a built-in control to perform different actions from its default actions. The control becomes in effect a custom control.</P>
Example</P>
This example adds a command bar control to the command bar named "Custom" and sets the macro named "MySub" to run whenever the button is clicked.</P>

<pre><code>Set myBar = .CommandBars("Custom")
Set myControl = myBar.Controls.Add(Type:=msocontrolButton)
With myControl
    .FaceId = 2
    .OnAction = "MySub"
End With
myBar.Visible = True</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

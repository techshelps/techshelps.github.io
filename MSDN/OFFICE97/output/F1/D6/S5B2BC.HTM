<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sub Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Sub Statement</H1>Description</P>
Declares the name, <SPAN CLASS="pop">arguments</SPAN>, and code that form the body of a <SPAN CLASS="lee">Sub</SPAN> <SPAN CLASS="pop">procedure</SPAN>.</P>
Syntax</P>
[<SPAN CLASS="lee">Private</SPAN> | <SPAN CLASS="lee">Public</SPAN>] [<SPAN CLASS="lee">Static</SPAN>] <SPAN CLASS="lee">Sub</SPAN> <SPAN CLASS="p">name</SPAN> [<SPAN CLASS="lee">(</SPAN><SPAN CLASS="p">arglist</SPAN><SPAN CLASS="lee">)</SPAN>] [<SPAN CLASS="p">statements</SPAN>][<SPAN CLASS="lee">Exit Sub</SPAN>][<SPAN CLASS="p">statements</SPAN>]</P>
<SPAN CLASS="lee">End Sub</SPAN></P>
The <SPAN CLASS="lee">Sub</SPAN> statement syntax has these parts:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Public</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Sub</SPAN> procedure is accessible to all other procedures in all <SPAN CLASS="pop">modules</SPAN>. If used in a module that contains an <SPAN CLASS="lee">Option Private</SPAN> statement, the procedure is not available outside the <SPAN CLASS="pop">project</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Private</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Sub</SPAN> procedure is accessible only to other procedures in the module where it is declared.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Static</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Sub</SPAN> procedure's local variables are preserved between calls. The <SPAN CLASS="lee">Static</SPAN> attribute doesn't affect variables that are declared outside the <SPAN CLASS="lee">Sub</SPAN>, even if they are used in the procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the <SPAN CLASS="lee">Sub</SPAN>; follows standard <SPAN CLASS="pop">variable</SPAN> naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">arglist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. List of variables representing arguments that are passed to the <SPAN CLASS="lee">Sub</SPAN> procedure when it is called. Multiple variables are separated by commas.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">statements</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Any group of <SPAN CLASS="pop">statements</SPAN> to be executed within the <SPAN CLASS="lee">Sub</SPAN> procedure.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="p">arglist</SPAN> argument has the following syntax and parts:</P>
[<SPAN CLASS="lee">Optional</SPAN>] [<SPAN CLASS="lee">ByVal</SPAN> | <SPAN CLASS="lee">ByRef</SPAN>] [<SPAN CLASS="lee">ParamArray</SPAN>] <SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">( )</SPAN>] [<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>] [<SPAN CLASS="lee">=</SPAN> <SPAN CLASS="p">defaultvalue</SPAN>]</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Optional</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Keyword</SPAN> indicating that an argument is not required. If used, all subsequent arguments in <SPAN CLASS="p">arglist</SPAN> must also be optional and declared using the <SPAN CLASS="lee">Optional</SPAN> keyword. <SPAN CLASS="lee">Optional</SPAN> can't be used for any argument if <SPAN CLASS="lee">ParamArray</SPAN> is used.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByVal</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the argument is passed <SPAN CLASS="pop">by value</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByRef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the argument is passed <SPAN CLASS="pop">by reference</SPAN>. <B>ByRef</B> is the default in Visual&nbsp;Basic.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ParamArray</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used only as the last argument in <SPAN CLASS="p">arglist</SPAN> to indicate that the final argument is an <SPAN CLASS="lee">Optional</SPAN> <SPAN CLASS="pop">array</SPAN> of <SPAN CLASS="lee">Variant</SPAN> elements. The <SPAN CLASS="lee">ParamArray</SPAN> keyword allows you to provide an arbitrary number of arguments. <SPAN CLASS="lee">ParamArray</SPAN> can't be used with <SPAN CLASS="lee">ByVal</SPAN>, <SPAN CLASS="lee">ByRef</SPAN>, or <SPAN CLASS="lee">Optional</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the variable representing the argument; follows standard variable naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Data type</SPAN> of the argument passed to the procedure; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN> (variable-length only), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>. If the parameter is not <SPAN CLASS="lee">Optional</SPAN>, a <SPAN CLASS="pop">user-defined type</SPAN>, or an <SPAN CLASS="pop">object type</SPAN> may also be specified.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">defaultvalue</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Any <SPAN CLASS="pop">constant</SPAN> or constant <SPAN CLASS="pop">expression</SPAN>. Valid for <SPAN CLASS="lee">Optional</SPAN> parameters only. If the type is an <SPAN CLASS="lee">Object</SPAN>, an explicit default value can only be <SPAN CLASS="lee">Nothing</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
If not explicitly specified using either <SPAN CLASS="lee">Public</SPAN> or <SPAN CLASS="lee">Private</SPAN>, <SPAN CLASS="lee">Sub</SPAN> procedures are public by default. If <SPAN CLASS="lee">Static</SPAN> is not used, the value of local variables is not preserved between calls.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;<SPAN CLASS="lee">Sub</SPAN> procedures can be recursive; that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow. The <SPAN CLASS="lee">Static</SPAN> keyword usually is not used with recursive <SPAN CLASS="lee">Sub</SPAN> procedures.</P>
<HR CLASS="cae">
All executable code must be in <SPAN CLASS="pop">procedures</SPAN>. You can't define a <SPAN CLASS="lee">Sub</SPAN> procedure inside another <SPAN CLASS="lee">Sub</SPAN>, <SPAN CLASS="lee">Function</SPAN>, or <SPAN CLASS="lee">Property</SPAN> procedure.</P>
The <SPAN CLASS="lee">Exit Sub </SPAN>keywords cause an immediate exit from a <SPAN CLASS="lee">Sub</SPAN> procedure. Program execution continues with the statement following the statement that called the <SPAN CLASS="lee">Sub</SPAN> procedure. Any number of <SPAN CLASS="lee">Exit Sub</SPAN> statements can appear anywhere in a <SPAN CLASS="lee">Sub</SPAN> procedure.</P>
Like a <SPAN CLASS="lee">Function</SPAN> procedure, a <SPAN CLASS="lee">Sub</SPAN> procedure is a separate procedure that can take arguments, perform a series of statements, and change the value of its arguments. However, unlike a <SPAN CLASS="lee">Function</SPAN> procedure, which returns a value, a <SPAN CLASS="lee">Sub</SPAN> procedure can't be used in an expression.</P>
You call a <SPAN CLASS="lee">Sub</SPAN> procedure using the procedure name followed by the argument list. See the <SPAN CLASS="lee">Call</SPAN> statement for specific information on how to call <SPAN CLASS="lee">Sub</SPAN> procedures.</P>
Variables used in <SPAN CLASS="lee">Sub</SPAN> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <SPAN CLASS="lee">Dim</SPAN> or the equivalent) are always local to the procedure. Variables that are used but not explicitly declared in a procedure are also local unless they are explicitly declared at some higher level outside the procedure.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;A procedure can use a variable that is not explicitly declared in the procedure, but a naming conflict can occur if anything you defined at the <SPAN CLASS="pop">module level</SPAN> has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant or variable, it is assumed that your procedure is referring to that module-level name. To avoid this kind of conflict, explicitly declare variables. You can use an <SPAN CLASS="lee">Option Explicit</SPAN> statement to force explicit declaration of variables.</P>
<HR CLASS="cae">
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can't use <SPAN CLASS="lee">GoSub</SPAN>, <SPAN CLASS="lee">GoTo</SPAN>, or <SPAN CLASS="lee">Return</SPAN> to enter or exit a <SPAN CLASS="lee">Sub</SPAN> procedure.</P>
See Also</P>
<SPAN CLASS="eln">Call</SPAN> statement, <SPAN CLASS="eln">Dim</SPAN> statement, <SPAN CLASS="eln">Function</SPAN> statement, <B>Option</B> <SPAN CLASS="eln">Explicit</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Get</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Let</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Set</SPAN> statement.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, a public <SPAN CLASS="eln">Sub</SPAN> procedure in a <SPAN CLASS="pop">standard module</SPAN> is available to all other procedures in the current database and in referencing Microsoft Access databases. However, it is not available to any other applications.</P>
If you declare a <SPAN CLASS="eln">Sub</SPAN> procedure as private in any module, that procedure is available only to other procedures within the same module.</P>
If a <SPAN CLASS="eln">Sub</SPAN> procedure is declared as public within a private module, such as a <SPAN CLASS="pop">class module</SPAN>, then the procedure is available to all other procedures in that database, but is not available to other Microsoft Access databases.</P>
When you create an <SPAN CLASS="pop">event procedure</SPAN> for a form or report, Microsoft Access automatically inserts a <SPAN CLASS="pop">code stub</SPAN> for a <SPAN CLASS="eln">Sub</SPAN> procedure and precedes it with the <SPAN CLASS="eln">Private</SPAN> keyword. For example, create a command button on a new form, set its <SPAN CLASS="eln">OnClick</SPAN> property to [Event Procedure], and click the <SPAN CLASS="eln">Build</SPAN> button to view the form's module. Microsoft Access inserts the following code for you in the module.</P>

<pre><code>Private Sub Command0_Click

End Sub</code></pre>
You can then enter the code that you want to execute when that button's Click event occurs.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Sub</SPAN> statement to define the name, arguments, and code that form the body of a <SPAN CLASS="lee">Sub</SPAN> procedure.</P>

<pre><code>' Sub procedure definition.
' Sub procedure with two arguments.
Sub SubComputeArea(Length, TheWidth)
    Dim Area As Double                        ' Declare local variable.
    If Length = 0 Or TheWidth = 0 Then
    ' If either argument = 0.
        Exit Sub                                ' Exit Sub immediately.
    End If
    Area = Length * TheWidth                ' Calculate area of rectangle.
    Debug.Print Area                        ' Print Area to Debug window.
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

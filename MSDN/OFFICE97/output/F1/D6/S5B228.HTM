<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>For Each...Next Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>For Each...Next Statement</H2>Description</P>
Repeats a group of <SPAN CLASS="pop">statements</SPAN> for each element in an <SPAN CLASS="pop">array</SPAN> or <SPAN CLASS="pop">collection</SPAN>.</P>
Syntax</P>
<SPAN CLASS="lee">For</SPAN> <SPAN CLASS="lee">Each</SPAN> <SPAN CLASS="p">element</SPAN> <SPAN CLASS="lee">In</SPAN> <SPAN CLASS="p">group</SPAN><BR>[<SPAN CLASS="p">statements</SPAN>]<BR>[<SPAN CLASS="lee">Exit For</SPAN>]<BR>[<SPAN CLASS="p">statements</SPAN>]</P>
<SPAN CLASS="lee">Next</SPAN> [<SPAN CLASS="p">element</SPAN>]</P>
The <SPAN CLASS="lee">For...Each...Next</SPAN> statement syntax has these parts</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="69pt" VALIGN="TOP"><COL WIDTH="290pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">element</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. <SPAN CLASS="pop">Variable</SPAN> used to iterate through the elements of the collection or array. For collections, <SPAN CLASS="p">element</SPAN> can only be a <SPAN CLASS="lee">Variant</SPAN> variable, a generic object variable, or any specific object variable. For arrays, <SPAN CLASS="p">element</SPAN> can only be a <SPAN CLASS="lee">Variant</SPAN> variable.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">group</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of an object collection or array (except an array of <SPAN CLASS="pop">user-defined types</SPAN>).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">statements</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. One or more statements that are executed on each item in <SPAN CLASS="p">group</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
The <SPAN CLASS="lee">For...Each</SPAN> block is entered if there is at least one element in <SPAN CLASS="p">group</SPAN>. Once the loop has been entered, all the statements in the loop are executed for the first element in <SPAN CLASS="p">group</SPAN>. If there are more elements in <SPAN CLASS="p">group</SPAN>, the statements in the loop continue to execute for each element. When there are no more elements in <SPAN CLASS="p">group</SPAN>, the loop is exited and execution continues with the statement following the <SPAN CLASS="lee">Next</SPAN> statement.</P>
Any number of <SPAN CLASS="lee">Exit For</SPAN> statements may be placed anywhere in the loop as an alternative way to exit. <SPAN CLASS="lee">Exit For </SPAN>is often used after evaluating some condition, for example <SPAN CLASS="lee">If…Then</SPAN>, and transfers control to the statement immediately following <SPAN CLASS="lee">Next</SPAN>.</P>
You can nest <SPAN CLASS="lee">For...Each...Next</SPAN> loops by placing one <SPAN CLASS="lee">For...Each...Next</SPAN> loop within another. However, each loop <SPAN CLASS="p">element</SPAN> must be unique.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;If you omit <SPAN CLASS="p">element</SPAN> in a <SPAN CLASS="lee">Next</SPAN> statement, execution continues as if <SPAN CLASS="p">element</SPAN> is included. If a <SPAN CLASS="lee">Next</SPAN> statement is encountered before its corresponding <SPAN CLASS="lee">For</SPAN> statement, an error occurs.</P>
You can't use the <SPAN CLASS="lee">For...Each...Next</SPAN> statement with an array of <SPAN CLASS="pop">user-defined types</SPAN> because a <SPAN CLASS="lee">Variant</SPAN> can't contain a user-defined type.</P>
See Also</P>
<B>Do...</B><SPAN CLASS="eln">Loop</SPAN> statement, <SPAN CLASS="eln">Exit</SPAN> statement, <B>For...</B><SPAN CLASS="eln">Next</SPAN> statement, <B>While...</B><SPAN CLASS="eln">Wend</SPAN> statement.</P>
Example</P>
This example uses the <SPAN CLASS="lee">For Each...Next</SPAN> statement to search the <SPAN CLASS="lee">Text</SPAN> property of all elements in a collection for the existence of the string "Hello." In the example, <SPAN CLASS="cte">MyObject</SPAN> is a text-related object and is an element of the collection <SPAN CLASS="cte">MyCollection</SPAN>. Both are generic names used for illustration purposes only.</P>

<pre><code>Dim Found, MyObject, MyCollection
Found = False                                ' Initialize variable.
For Each MyObject In MyCollection        ' Iterate through each element.
    If MyObject.Text = "Hello" Then        ' If Text equals "Hello".
        Found = True                            ' Set Found to True.
        Exit For                                ' Exit loop.
    End If
Next</code></pre>
Example (Microsoft Excel)</P>
This example loops on cells A1:D10 on Sheet1. If one of the cells has a value less than 0.001, the code replaces the value with 0 (zero).</P>

<pre><code>For Each c in Worksheets("Sheet1").Range("A1:D10")
    If c.Value &lt; .001 Then
        c.Value = 0
    End If
Next c</code></pre>
This example loops on the range named "TestRange" and then displays the number of empty cells in the range.</P>

<pre><code>numBlanks = 0
For Each c In Range("TestRange")
    If c.Value = "" Then
        numBlanks = numBlanks + 1
    End If
Next c
MsgBox "There are " &amp; numBlanks &amp; " empty cells in this range."</code></pre>
This example closes and saves changes to all workbooks except the one that's running the example.</P>

<pre><code>For Each w In Workbooks
    If w.Name &lt;&gt; ThisWorkbook.Name Then
        w.Close savechanges:=True
    End If
Next w</code></pre>
This example deletes every worksheet in the active workbook without displaying the confirmation dialog box. There must be at least one other visible sheet in the workbook.</P>

<pre><code>Application.DisplayAlerts = False
For Each w In Worksheets
    w.Delete
Next w
Application.DisplayAlerts = True</code></pre>
This example creates a new worksheet and then inserts into it a list of all the names in the active workbook, including their formulas in A1-style notation in the language of the user.</P>

<pre><code>Set newSheet = ActiveWorkbook.Worksheets.Add
i = 1
For Each nm In ActiveWorkbook.Names
    newSheet.Cells(i, 1).Value = nm.NameLocal
    newSheet.Cells(i, 2).Value = "'" &amp; nm.RefersToLocal
    i = i + 1
Next nm</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

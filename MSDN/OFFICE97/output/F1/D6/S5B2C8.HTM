<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Conversion Functions</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Type Conversion Functions</H1>Description</P>
Each function coerces an <SPAN CLASS="pop">expression</SPAN> to a specific <SPAN CLASS="pop">data type</SPAN>.</P>
Syntax</P>
<SPAN CLASS="lee">CBool(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CByte(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CCur(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CDate(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CDbl(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CDec(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CInt(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CLng(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CSng(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CVar(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
<SPAN CLASS="lee">CStr(</SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="lee">)</SPAN></P>
The required <SPAN CLASS="p">expression</SPAN> <SPAN CLASS="pop">argument</SPAN> is any <SPAN CLASS="pop">string expression</SPAN> or <SPAN CLASS="pop">numeric expression</SPAN>.</P>
Return Types</P>
The function name determines the return type as shown in the following:</P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="57pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="79pt" VALIGN="TOP"><COL WIDTH="223pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Function</P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Return type</P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Range for <SPAN CLASS="narg">expression</SPAN> argument</P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CBool </SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Boolean</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any valid <SPAN CLASS="lee">string</SPAN> or numeric expression.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CByte</SPAN> </P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Byte</SPAN> </P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">0 to 255.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CCur</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Currency </SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">–922,337,203,685,477.5808 to 922,337,203,685,477.5807.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CDate</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Date </SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any valid <SPAN CLASS="pop">date expression</SPAN>.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CDbl</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Double</SPAN><SPAN CLASS="pop"> </SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">–1.79769313486232E308 to&nbsp;–4.94065645841247E–324 for negative values; 4.94065645841247E–324 to 1.79769313486232E308 for positive values.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CDec</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Decimal</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">+/-79,228,162,514,264,337,593,543,950,335 for zero-scaled numbers, that is, numbers with no decimal places. For numbers with 28 decimal places, the range is <BR>+/-7.9228162514264337593543950335. The smallest possible non-zero number is 0.0000000000000000000000000001.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="57pt" VALIGN="TOP"><COL WIDTH="79pt" VALIGN="TOP"><COL WIDTH="223pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Function</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Return type</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Range for <SPAN CLASS="narg">expression</SPAN> argument</P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CInt</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Integer</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">–32,768 to 32,767; fractions are rounded.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CLng</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Long</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">–2,147,483,648 to 2,147,483,647; fractions are rounded.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CSng</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Single</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">–3.402823E38 to –1.401298E–45 for negative values; 1.401298E–45 to 3.402823E38 for positive values.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CVar</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Variant</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Same range as <SPAN CLASS="lee">Double</SPAN> for numerics. Same range as <SPAN CLASS="lee">String</SPAN> for non-numerics.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">CStr</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">String</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="pop">Returns for CStr</SPAN> depend on the <SPAN CLASS="p">expression</SPAN> argument.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
If the <SPAN CLASS="p">expression</SPAN> passed to the function is outside the range of the data type being converted to, an error occurs.</P>
In general, you can document your code using the data-type conversion functions to show that the result of some operation should be expressed as a particular data type rather than the default data type. For example, use <SPAN CLASS="lee">CCur </SPAN>to force currency arithmetic in cases where single-precision, double-precision, or integer arithmetic normally would occur.</P>
You should use the data-type conversion functions instead of <SPAN CLASS="lee">Val</SPAN> to provide internationally aware conversions from one data type to another. For example, when you use <SPAN CLASS="lee">CCur</SPAN>, different decimal separators, different thousand separators, and various currency options are properly recognized depending on the <SPAN CLASS="pop">locale</SPAN> setting of your computer.</P>
When the fractional part is exactly 0.5, <SPAN CLASS="lee">CInt</SPAN> and <SPAN CLASS="lee">CLng</SPAN> always round it to the nearest even number. For example, 0.5 rounds to 0, and 1.5 rounds to 2. <SPAN CLASS="lee">CInt</SPAN> and <SPAN CLASS="lee">CLng</SPAN> differ from the <SPAN CLASS="lee">Fix</SPAN> and <SPAN CLASS="lee">Int</SPAN> functions, which truncate, rather than round, the fractional part of a number. Also, <SPAN CLASS="lee">Fix</SPAN> and <SPAN CLASS="lee">Int</SPAN> always return a value of the same type as is passed in.</P>
Use the <SPAN CLASS="lee">IsDate</SPAN> function to determine if <SPAN CLASS="p">date</SPAN> can be converted to a date or time. <SPAN CLASS="lee">CDate</SPAN> recognizes <SPAN CLASS="pop">date literals</SPAN> and time literals as well as some numbers that fall within the range of acceptable dates. When converting a number to a date, the whole number portion is converted to a date. Any fractional part of the number is converted to a time of day, starting at midnight.</P>
<SPAN CLASS="lee">CDate</SPAN> recognizes date formats according to the locale setting of your system. The correct order of day, month, and year may not be determined if it is provided in a format other than one of the recognized date settings. In addition, a long date format is not recognized if it also contains the day-of-the-week string.</P>
A <SPAN CLASS="lee">CVDate</SPAN> function is also provided for compatibility with previous versions of Visual&nbsp;Basic. The syntax of the <SPAN CLASS="lee">CVDate</SPAN> function is identical to the <SPAN CLASS="lee">CDate</SPAN> function, however, <SPAN CLASS="lee">CVDate</SPAN> returns a <SPAN CLASS="lee">Variant</SPAN> whose subtype is <SPAN CLASS="lee">Date</SPAN> instead of an actual <SPAN CLASS="lee">Date</SPAN> type. Since there is now an intrinsic <SPAN CLASS="lee">Date</SPAN> type, there is no further need for <SPAN CLASS="lee">CVDate</SPAN>. The same effect can be achieved by converting an expression to a <SPAN CLASS="lee">Date</SPAN><SPAN CLASS="lee">,</SPAN> and then assigning it to a <SPAN CLASS="lee">Variant</SPAN>. This technique is consistent with the conversion of all other intrinsic types to their equivalent <SPAN CLASS="lee">Variant</SPAN> subtypes.</P>
<SPAN CLASS="nh">Note</SPAN> The <SPAN CLASS="lee">CDec</SPAN> function does not return a discrete data type; instead, it always returns a <SPAN CLASS="lee">Variant</SPAN> whose value has been converted to a <SPAN CLASS="lee">Decimal</SPAN> subtype.</P>
Example</P>
This example uses the <SPAN CLASS="lee">CBool</SPAN> function to convert an expression to a <SPAN CLASS="lee">Boolean</SPAN>. If the expression evaluates to a nonzero value,<SPAN CLASS="lee"> CBool</SPAN> returns <SPAN CLASS="lee">True</SPAN>; otherwise, it returns <SPAN CLASS="lee">False</SPAN>.</P>

<pre><code>Dim A, B, Check
A = 5: B = 5                                    ' Initialize variables.
Check = CBool(A = B)                        ' Check contains True.

A = 0                                            ' Define variable.
Check = CBool(A)                            ' Check contains False.</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CByte</SPAN> function to convert an expression to a <SPAN CLASS="lee">Byte</SPAN>.</P>

<pre><code>Dim MyDouble, MyByte
MyDouble = 125.5678                        ' MyDouble is a Double.
MyByte = CByte(MyDouble)                    ' MyByte contains 126.</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CCur</SPAN> function to convert an expression to a <SPAN CLASS="lee">Currency</SPAN>.</P>

<pre><code>Dim MyDouble, MyCurr
MyDouble = 543.214588                        ' MyDouble is a Double.
MyCurr = CCur(MyDouble * 2)                ' Convert result of MyDouble * 2
                                                ' (1086.429176) to a 
                                                ' Currency (1086.4292).</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CDate</SPAN> function to convert a string to a <SPAN CLASS="lee">Date</SPAN>. In general, hard-coding dates and times as strings (as shown in this example) is not recommended. Use date literals and time literals, such as #2/12/1969# and #4:45:23 PM#, instead.</P>

<pre><code>Dim MyDate, MyShortDate, MyTime, MyShortTime
MyDate = "February 12, 1969"            ' Define date.
MyShortDate = CDate(MyDate)                ' Convert to Date data type.

MyTime = "4:35:47 PM"                        ' Define time.
MyShortTime = CDate(MyTime)                ' Convert to Date data type.</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CDbl</SPAN> function to convert an expression to a <SPAN CLASS="lee">Double</SPAN>.</P>

<pre><code>Dim MyCurr, MyDouble
MyCurr = CCur(234.456784)                ' MyCurr is a Currency.
MyDouble = CDbl(MyCurr * 8.2 * 0.01)        ' Convert result to a Double.</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CInt</SPAN> function to convert a value to an <SPAN CLASS="lee">Integer</SPAN>.</P>

<pre><code>Dim MyDouble, MyInt
MyDouble = 2345.5678                        ' MyDouble is a Double.
MyInt = CInt(MyDouble)                    ' MyInt contains 2346.</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CLng</SPAN> function to convert a value to a <SPAN CLASS="lee">Long</SPAN>.</P>

<pre><code>Dim MyVal1, MyVal2, MyLong1, MyLong2
MyVal1 = 25427.45: MyVal2 = 25427.55        ' MyVal1, MyVal2 are Doubles.
MyLong1 = CLng(MyVal1)                    ' MyLong1 contains 25427.
MyLong2 = CLng(MyVal2)                    ' MyLong2 contains 25428.</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CSng</SPAN> function to convert a value to a <SPAN CLASS="lee">Single</SPAN>.</P>

<pre><code>Dim MyDouble1, MyDouble2, MySingle1, MySingle2
' MyDouble1, MyDouble2 are Doubles.
MyDouble1 = 75.3421115: MyDouble2 = 75.3421555
MySingle1 = CSng(MyDouble1)                ' MySingle1 contains 75.34211.
MySingle2 = CSng(MyDouble2)                ' MySingle2 contains 75.34216.</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CStr</SPAN> function to convert a numeric value to a <SPAN CLASS="lee">String</SPAN>.</P>

<pre><code>Dim MyDouble, MyString
MyDouble = 437.324                            ' MyDouble is a Double.
MyString = CStr(MyDouble)                ' MyString contains "437.324".</code></pre>
Example</P>
This example uses the <SPAN CLASS="lee">CVar</SPAN> function to convert an expression to a <SPAN CLASS="lee">Variant</SPAN>.</P>

<pre><code>Dim MyInt, MyVar
MyInt = 4534                                    ' MyInt is an Integer.
MyVar = CVar(MyInt &amp; "000")                ' MyVar contains the string
                                                ' 4534000.</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

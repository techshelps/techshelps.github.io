<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CommandBars Collection Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>CommandBars Collection Object</H1>Description</P>
A collection of <SPAN CLASS="lee">CommandBar</SPAN> objects that represent the <SPAN CLASS="pop">command bars</SPAN> in the container application.</P>
Using the CommandBars Collection</P>
Use the <SPAN CLASS="lee">CommandBars</SPAN> property to return the <SPAN CLASS="lee">CommandBars</SPAN> collection. The following example displays in the <SPAN CLASS="eln">Immediate</SPAN> window both the name and local name of each menu bar and toolbar, and it displays a value that indicates whether the menu bar or toolbar is visible.</P>

<pre><code>For Each cbar in CommandBars
    Debug.Print cbar.Name, cbar.NameLocal, cbar.Visible
Next</code></pre>
Use the <SPAN CLASS="lee">Add</SPAN> method to add a new command bar to the collection. The following example creates a custom toolbar named "Custom1" and displays it as a floating toolbar.</P>

<pre><code>Set cbar1 = CommandBars.Add(Name:="Custom1", Position:=msoBarFloating)
cbar1.Visible = True</code></pre>
Use <SPAN CLASS="lee">CommandBars</SPAN>(<SPAN CLASS="p">index</SPAN>), where <SPAN CLASS="p">index</SPAN> is the name or index number of a command bar, to return a single <SPAN CLASS="lee">CommandBar</SPAN> object. The following example docks the toolbar named "Custom1" at the bottom of the application window.</P>

<pre><code>CommandBars("Custom1").Position = msoBarBottom</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can use the name or index number to specify a menu bar or toolbar in the list of available menu bars and toolbars in the container application. However, you must use the name to specify a menu, shortcut menu, or submenu (all of which are represented by <SPAN CLASS="lee">CommandBar</SPAN> objects).</P>
If two or more custom menus or submenus have the same name, <SPAN CLASS="lee">CommandBars</SPAN>(<SPAN CLASS="p">index</SPAN>) returns the first one. To ensure that you return the correct menu or submenu, locate the <SPAN CLASS="pop">pop-up control</SPAN> that displays that menu. Then apply the <SPAN CLASS="lee">CommandBar</SPAN> property to the pop-up control to return the command bar that represents that menu.</P>
Properties</P>
<SPAN CLASS="eln">ActionControl</SPAN> property, <SPAN CLASS="eln">ActiveMenuBar</SPAN> property, <SPAN CLASS="eln">Application</SPAN> property, <SPAN CLASS="eln">Count</SPAN> property, <SPAN CLASS="eln">Creator</SPAN> property, <SPAN CLASS="eln">DisplayKeysInTooltips</SPAN> property, <SPAN CLASS="eln">DisplayTooltips</SPAN> property, <SPAN CLASS="eln">Item</SPAN> property (<SPAN CLASS="eln">CommandBars</SPAN> and <SPAN CLASS="eln">CommandBarControls</SPAN> collections), <SPAN CLASS="eln">LargeButtons</SPAN> property, <SPAN CLASS="eln">MenuAnimationStyle</SPAN> property, <SPAN CLASS="eln">Parent</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Add</SPAN> method (<SPAN CLASS="eln">CommandBars</SPAN> collection), <SPAN CLASS="eln">FindControl</SPAN> method, <SPAN CLASS="eln">ReleaseFocus</SPAN> method.</P>
Specifics (Microsoft Access)</P>
Although most Access collections are zero-based, all command bar collections are 1-based. Note, however, that you can use the <SPAN CLASS="eln">For Each...Next</SPAN> syntax to iterate through the objects in a collection without having to worry about specific index numbers.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Select Case Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Select Case Statement</H1>Description</P>
Executes one of several groups of <SPAN CLASS="pop">statements</SPAN>, depending on the value of an <SPAN CLASS="pop">expression</SPAN>.</P>
Syntax</P>
<SPAN CLASS="lee">Select Case</SPAN> <SPAN CLASS="p">testexpression</SPAN><BR>[<SPAN CLASS="lee">Case</SPAN> <SPAN CLASS="p">expressionlist-n</SPAN><BR>    [<SPAN CLASS="p">statements-n</SPAN>]] <SPAN CLASS="cte">...</SPAN><BR>[<SPAN CLASS="lee">Case Else</SPAN><BR>    [<SPAN CLASS="p">elsestatements</SPAN>]]</P>
<SPAN CLASS="lee">End Select</SPAN></P>
The <SPAN CLASS="lee">Select Case</SPAN> statement syntax has these parts:</P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="272pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part </P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">testexpression</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Any <SPAN CLASS="pop">numeric expression</SPAN> or <SPAN CLASS="pop">string expression</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">expressionlist-n</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required if a <SPAN CLASS="lee">Case </SPAN>appears. Delimited list of one or more of the following forms: <SPAN CLASS="p">expression</SPAN>, <SPAN CLASS="p">expression</SPAN> <SPAN CLASS="lee">To</SPAN> <SPAN CLASS="p">expression</SPAN>, <SPAN CLASS="lee">Is</SPAN> <SPAN CLASS="p">comparisonoperator</SPAN> <SPAN CLASS="p">expression</SPAN>. The <SPAN CLASS="lee">To</SPAN> <SPAN CLASS="pop">keyword</SPAN> specifies a range of values. If you use the <SPAN CLASS="lee">To</SPAN> keyword, the smaller value must appear before <SPAN CLASS="lee">To</SPAN>. Use the <SPAN CLASS="lee">Is</SPAN> keyword with <SPAN CLASS="pop">comparison operators</SPAN> (except <SPAN CLASS="lee">Is</SPAN> and <SPAN CLASS="lee">Like</SPAN>) to specify a range of values. If not supplied, the <SPAN CLASS="lee">Is</SPAN> keyword is automatically inserted.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">statements-n</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. One or more statements executed if <SPAN CLASS="p">testexpression</SPAN> matches any part of <SPAN CLASS="p">expressionlist-n.</SPAN></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">elsestatements</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. One or more statements executed if <SPAN CLASS="p">testexpression</SPAN> doesn't match any of the <SPAN CLASS="lee">Case</SPAN> clause.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
If <SPAN CLASS="p">testexpression</SPAN> matches any <SPAN CLASS="lee">Case</SPAN> <SPAN CLASS="p">expressionlist</SPAN> expression, the <SPAN CLASS="p">statements</SPAN> following that <SPAN CLASS="lee">Case</SPAN> clause are executed up to the next <SPAN CLASS="lee">Case</SPAN> clause, or, for the last clause, up to <SPAN CLASS="lee">End Select</SPAN>. Control then passes to the statement following <SPAN CLASS="lee">End Select</SPAN>. If <SPAN CLASS="p">testexpression</SPAN> matches an <SPAN CLASS="p">expressionlist</SPAN> expression in more than one <SPAN CLASS="lee">Case</SPAN> clause, only the statements following the first match are executed.</P>
The <SPAN CLASS="lee">Case Else</SPAN> clause is used to indicate the <SPAN CLASS="p">elsestatements</SPAN> to be executed if no match is found between the <SPAN CLASS="p">testexpression</SPAN> and an <SPAN CLASS="p">expressionlist</SPAN> in any of the other <SPAN CLASS="lee">Case</SPAN> selections. Although not required, it is a good idea to have a <SPAN CLASS="lee">Case Else</SPAN> statement in your<SPAN CLASS="lee"> Select Case</SPAN> block to handle unforeseen <SPAN CLASS="p">testexpression</SPAN> values. If no <SPAN CLASS="lee">Case</SPAN> <SPAN CLASS="p">expressionlist</SPAN> matches <SPAN CLASS="p">testexpression</SPAN> and there is no <SPAN CLASS="lee">Case Else</SPAN> statement, execution continues at the statement following <SPAN CLASS="lee">End Select</SPAN>.</P>
You can use multiple expressions or ranges in each <SPAN CLASS="lee">Case</SPAN> clause. For example, the following line is valid:</P>

<pre><code>Case 1 To 4, 7 To 9, 11, 13, Is &gt; MaxNumber</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;The <SPAN CLASS="lee">Is</SPAN> comparison operator is not the same as the <SPAN CLASS="lee">Is</SPAN> keyword used in the <SPAN CLASS="lee">Select Case</SPAN> statement.</P>
You also can specify ranges and multiple expressions for character strings. In the following example, <SPAN CLASS="lee">Case</SPAN> matches strings that are exactly equal to <SPAN CLASS="cte">everything</SPAN>, strings that fall between <SPAN CLASS="cte">nuts</SPAN> and <SPAN CLASS="cte">soup</SPAN> in alphabetic order, and the current value of <SPAN CLASS="cte">TestItem</SPAN>: </P>

<pre><code>Case "everything", "nuts" To "soup", TestItem</code></pre>
<SPAN CLASS="lee">Select Case </SPAN>statements can be nested. Each nested <SPAN CLASS="lee">Select Case</SPAN> statement must have a matching <SPAN CLASS="lee">End Select </SPAN>statement.</P>
See Also</P>
<SPAN CLASS="eln">Choose</SPAN> function, <SPAN CLASS="eln">End</SPAN> statement, <B>If...Then...</B><SPAN CLASS="eln">Else</SPAN> statement, <B>On...GoSub</B>, <B>On...</B><SPAN CLASS="eln">GoTo</SPAN> statements.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Select Case</SPAN> statement to evaluate the value of a variable. The second <SPAN CLASS="lee">Case</SPAN> clause contains the value of the variable being evaluated, and therefore only the statement associated with it is executed.</P>

<pre><code>Dim Number
Number = 8                                    ' Initialize variable.
Select Case Number                            ' Evaluate Number.
Case 1 To 5                                    ' Number between 1 and 5.
    Debug.Print "Between 1 and 5"
' The following is the only Case clause that evaluates to True.
Case 6, 7, 8                                    ' Number between 6 and 8.
    Debug.Print "Between 6 and 8"
Case Is &gt; 8 And Number &lt; 11                ' Number is 9 or 10.
Debug.Print "Greater than 8"
Case Else                                        ' Other values.
    Debug.Print "Not between 1 and 10"
End Select</code></pre>
Example (Microsoft Excel)</P>
This example displays the name of the mail system installed on the computer.</P>

<pre><code>Select Case Application.MailSystem
    Case Is = xlMAPI
        MsgBox "Mail system is Microsoft Mail"
    Case Is = xlPowerTalk
        MsgBox "Mail system is PowerTalk"
    Case Is = xlNoMailSystem
        MsgBox "No mail system installed"
End Select</code></pre>
This example displays a message box that indicates the location of the active cell in the PivotTable.</P>

<pre><code>Worksheets("Sheet1").Activate
Select Case ActiveCell.LocationInTable
Case Is = xlRowHeader
    MsgBox "Active cell is part of a row header"
Case Is = xlColumnHeader
    MsgBox "Active cell is part of a column header"
Case Is = xlPageHeader
    MsgBox "Active cell is part of a page header"
Case Is = xlDataHeader
    MsgBox "Active cell is part of a data header"
Case Is = xlRowItem
    MsgBox "Active cell is part of a row item"
Case Is = xlColumnItem
    MsgBox "Active cell is part of a column item"
Case Is = xlPageItem
    MsgBox "Active cell is part of a page item"
Case Is = xlDataItem
    MsgBox "Active cell is part of a data item"
Case Is = xlTableBody
    MsgBox "Active cell is part of the table body"
End Select</code></pre>
This example displays a message if the active cell on Sheet1 contains a cell error value. You can use this example as a framework for a cell-error-value error handler.</P>

<pre><code>Worksheets("Sheet1").Activate
If IsError(ActiveCell.Value) Then
    errval = ActiveCell.Value
    Select Case errval
        Case CVErr(xlErrDiv0)
            MsgBox "#DIV/0! error"
        Case CVErr(xlErrNA)
            MsgBox "#N/A error"
        Case CVErr(xlErrName)
            MsgBox "#NAME? error"
        Case CVErr(xlErrNull)
            MsgBox "#NULL! error"
        Case CVErr(xlErrNum)
            MsgBox "#NUM! error"
        Case CVErr(xlErrRef)
            MsgBox "#REF! error"
        Case CVErr(xlErrValue)
            MsgBox "#VALUE! error"
        Case Else
            MsgBox "This should never happen!!"
    End Select
End If</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

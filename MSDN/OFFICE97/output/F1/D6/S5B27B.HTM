<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>On Error Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>On Error Statement</H1>Description</P>
Enables an error-handling routine and specifies the location of the routine within a procedure; can also be used to disable an error-handling routine.</P>
Syntax</P>
<SPAN CLASS="lee">On Error</SPAN> <SPAN CLASS="lee">GoTo</SPAN> <SPAN CLASS="p">line</SPAN></P>
<SPAN CLASS="lee">On Error</SPAN> <SPAN CLASS="lee">Resume Next</SPAN></P>
<SPAN CLASS="lee">On Error</SPAN> <SPAN CLASS="lee">GoTo</SPAN> <SPAN CLASS="lee">0</SPAN></P>
The <SPAN CLASS="lee">On Error </SPAN>statement syntax can have any of the following forms:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="104pt" VALIGN="TOP"><COL WIDTH="255pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Statement</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">On Error GoTo</SPAN> <SPAN CLASS="p">line</SPAN> </P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Enables the error-handling routine that starts at <SPAN CLASS="p">line</SPAN> specified in the required <I>line</I> <SPAN CLASS="pop">argument</SPAN>. The <SPAN CLASS="p">line</SPAN> argument is any <SPAN CLASS="pop">line label</SPAN> or <SPAN CLASS="pop">line number</SPAN>. If a <SPAN CLASS="pop">run-time error</SPAN> occurs, control branches to <SPAN CLASS="p">line</SPAN>, making the error handler active<SPAN CLASS="p">.</SPAN> The specified <SPAN CLASS="p">line</SPAN> must be in the same procedure as the <SPAN CLASS="lee">On Error</SPAN> statement; otherwise, a <SPAN CLASS="pop">compile-time</SPAN> error occurs.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">On Error Resume Next</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Specifies that when a run-time error occurs, control goes to the statement immediately following the statement where the error occurred where execution continues. Use this form rather than <SPAN CLASS="lee">On Error GoTo</SPAN> when accessing objects.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">On Error GoTo 0</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Disables any enabled error handler in the current procedure.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
If you don't use an <SPAN CLASS="lee">On Error</SPAN> statement, any run-time error that occurs is fatal; that is, an error message is displayed and execution stops.</P>
An "enabled" error handler is one that is turned on by an <SPAN CLASS="lee">On Error </SPAN>statement; an "active" error handler is an enabled handler that is in the process of handling an error. If an error occurs while an error handler is active (between the occurrence of the error and a <SPAN CLASS="lee">Resume</SPAN>, <SPAN CLASS="lee">Exit Sub</SPAN>, <SPAN CLASS="lee">Exit Function</SPAN>, or <SPAN CLASS="lee">Exit Property</SPAN> statement), the current procedure's error handler can't handle the error. Control returns to the calling procedure. If the calling procedure has an enabled error handler, it is activated to handle the error. If the calling procedure's error handler is also active, control passes back through previous calling procedures until an enabled, but inactive, error handler is found. If no inactive, enabled error handler is found, the error is fatal at the point at  which it actually occurred. Each time the error handler passes control back to a calling procedure, that procedure becomes the current procedure. Once an error is handled by an error handler in any procedure, execution resumes in the current procedure at the point designated by the <SPAN CLASS="lee">Resume </SPAN>statement.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;An error-handling routine is not a <SPAN CLASS="lee">Sub</SPAN> procedure or <SPAN CLASS="lee">Function</SPAN> procedure. It is a section of code marked by a line label or line number.</P>
Error-handling routines rely on the value in the <SPAN CLASS="lee">Number </SPAN>property of the <SPAN CLASS="lee">Err</SPAN> object to determine the cause of the error. The error-handling routine should test or save relevant property values in the <SPAN CLASS="lee">Err</SPAN> object before any other error can occur or before a procedure that might cause an error is called. The property values in the <SPAN CLASS="lee">Err</SPAN> object reflect only the most recent error. The error message associated with <SPAN CLASS="lee">Err.Number </SPAN>is contained in <SPAN CLASS="lee">Err.Description</SPAN>.</P>
<SPAN CLASS="lee">On Error Resume Next</SPAN> causes execution to continue with the statement immediately following the statement that caused the run-time error, or with the statement immediately following the most recent call out of the procedure containing the <SPAN CLASS="lee">On Error Resume Next</SPAN> statement. This statement allows execution to continue despite a run-time error. You can place the error-handling routine where the error would occur, rather than transferring control to another location within the procedure. An <SPAN CLASS="lee">On Error Resume Next </SPAN>statement becomes inactive when another procedure is called, so you should execute an <SPAN CLASS="lee">On Error Resume Next</SPAN> statement in each called routine if you want inline error handling within that routine.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;The <SPAN CLASS="lee">On Error Resume Next</SPAN> construct may be preferable to <SPAN CLASS="lee">On Error GoTo</SPAN> when handling errors generated during access to other objects. Checking <SPAN CLASS="lee">Err</SPAN> after each interaction with an object removes ambiguity about which object was accessed by the code. You can be sure which object placed the error code in <SPAN CLASS="lee">Err.Number</SPAN>, as well as which object originally generated the error (the object specified in <SPAN CLASS="lee">Err.Source</SPAN>).</P>
<SPAN CLASS="lee">On Error GoTo 0</SPAN> disables error handling in the current procedure. It doesn't specify line 0 as the start of the error-handling code, even if the procedure contains a line numbered 0. Without an <SPAN CLASS="lee">On Error GoTo 0</SPAN> statement, an error handler is automatically disabled when a procedure is exited.</P>
To prevent error-handling code from running when no error has occurred, place an <SPAN CLASS="lee">Exit Sub</SPAN>, <SPAN CLASS="lee">Exit Function</SPAN>, or <SPAN CLASS="lee">Exit Property</SPAN> statement immediately before the error-handling routine, as in the following fragment:</P>

<pre><code>Sub InitializeMatrix(Var1, Var2, Var3, Var4)
    On Error GoTo ErrorHandler
<SPAN CLASS="lee">    . . .</SPAN>
    Exit Sub
ErrorHandler:
    <SPAN CLASS="lee">. . .</SPAN>
<SPAN CLASS="l">    </SPAN>Resume Next
End Sub</code></pre>
Here, the error-handling code follows the <SPAN CLASS="lee">Exit Sub</SPAN> statement and precedes the <SPAN CLASS="lee">End Sub</SPAN> statement to separate it from the procedure flow. Error-handling code can be placed anywhere in a procedure.</P>
Untrapped errors in objects are returned to the controlling application when the object is running as an executable file. Within the development environment, untrapped errors are only returned to the controlling application if the proper options are set. See your <SPAN CLASS="pop">host application's</SPAN> documentation for a description of which options should be set during debugging, how to set them, and whether the host can create <SPAN CLASS="pop">classes</SPAN>.</P>
If you create an object that accesses other objects, you should try to handle errors passed back from them unhandled. If you cannot handle such errors, map the error code in <SPAN CLASS="lee">Err.Number</SPAN> to one of your own errors, and then pass them back to the caller of your object. You should specify your error by adding your error code to the <SPAN CLASS="lee">vbObjectError</SPAN> constant. For example, if your error code is 1052, assign it as follows:</P>

<pre><code>Err.Number = vbObjectError + 1052</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;System errors during calls to <SPAN CLASS="pop">dynamic-link libraries</SPAN> (DLL) do not raise exceptions and cannot be trapped with Visual&nbsp;Basic error trapping. When calling DLL functions, you should check each return value for success or failure (according to the API specifications), and in the event of a failure, check the value in the <SPAN CLASS="lee">Err</SPAN> object's <SPAN CLASS="lee">LastDLLError</SPAN> property.</P>
See Also</P>
<SPAN CLASS="eln">End</SPAN> statement, <SPAN CLASS="eln">Err</SPAN> object, <SPAN CLASS="eln">Exit</SPAN> statement, <SPAN CLASS="eln">LastDLLError</SPAN> property, <SPAN CLASS="eln">Resume</SPAN> statement.</P>
Example</P>
This example first uses the <SPAN CLASS="lee">On Error GoTo</SPAN> statement to specify the location of an error-handling routine within a procedure. In the example, an attempt to delete an open file generates error number 55. The error is handled in the error-handling routine, and control is then returned to the statement that caused the error. The <SPAN CLASS="lee">On Error GoTo 0 </SPAN>statement turns off error trapping. Then the <SPAN CLASS="lee">On Error Resume Next</SPAN> statement is used to defer error trapping so that the context for the error generated by the next statement can be known for certain. Note that <SPAN CLASS="lee">Err.Clear</SPAN> is used to clear the <SPAN CLASS="lee">Err </SPAN>object's properties after the error is handled.</P>

<pre><code>Sub OnErrorStatementDemo()
    On Error GoTo ErrorHandler            ' Enable error-handling routine.
    Open "TESTFILE" For Output As #1        ' Open file for output.
    Kill "TESTFILE"                            ' Attempt to delete open
                                                ' file.
    On Error Goto 0                            ' Turn off error trapping.
    On Error Resume Next                    ' Defer error trapping.
    ObjectRef = GetObject("MyWord.Basic")    ' Try to start nonexistent
                                                ' object, then test for
'Check for likely Automation errors.
    If Err.Number = 440 Or Err.Number = 432 Then
        ' Tell user what happened. Then clear the Err object.
        Msg = "There was an error attempting to open the Automation object!"
        MsgBox Msg, , "Deferred Error Test"
        Err.Clear                                ' Clear Err object fields
    End If
Exit Sub                                        ' Exit to avoid handler.
ErrorHandler:                                ' Error-handling routine.
    Select Case Err.Number                ' Evaluate error number.
        Case 55                                ' "File already open" error.
            Close #1                            ' Close open file.
        Case Else
            ' Handle other situations here...
    End Select
    Resume                                        ' Resume execution at same line
                                                ' that caused the error.
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

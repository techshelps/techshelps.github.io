<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Partition Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Partition Function</H1>Description</P>
Returns a<SPAN CLASS="lee"> Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>) indicating where a number occurs within a calculated series of ranges.</P>
Syntax</P>
<SPAN CLASS="lee">Partition(</SPAN><SPAN CLASS="narg">number</SPAN><SPAN CLASS="lee">,</SPAN> <SPAN CLASS="narg">start</SPAN><SPAN CLASS="lee">,</SPAN> <SPAN CLASS="narg">stop</SPAN><SPAN CLASS="lee">,</SPAN> <SPAN CLASS="narg">interval</SPAN><SPAN CLASS="lee">)</SPAN></P>
The <SPAN CLASS="lee">Partition</SPAN> function syntax has these <SPAN CLASS="pop">named arguments.</SPAN></P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="50pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="309pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">number</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Whole number that you want to evaluate against the ranges.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">start</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Whole number that is the start of the overall range of numbers. The number can't be less than 0.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">stop</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Whole number that is the end of the overall range of numbers. The number can't be equal to or less than <SPAN CLASS="narg">start</SPAN>.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">interval</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Whole number that is the interval spanned by each range in the series from <SPAN CLASS="narg">start</SPAN> to <SPAN CLASS="narg">stop</SPAN>. The number can't be less than 1.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
The <SPAN CLASS="lee">Partition</SPAN> function identifies the particular range in which <SPAN CLASS="narg">number</SPAN> falls and returns a <SPAN CLASS="lee">Variant</SPAN> (<SPAN CLASS="lee">String</SPAN>) describing that range. The <SPAN CLASS="lee">Partition</SPAN> function is most useful in queries. You can create a select query that shows how many orders fall within various ranges, for example, order values from 1 to 1000, 1001 to 2000, and so on.</P>
The following table shows how the ranges are determined using three sets of <SPAN CLASS="narg">start</SPAN>, <SPAN CLASS="narg">stop</SPAN>, and <SPAN CLASS="narg">interval</SPAN> parts. The First Range and Last Range columns show what <SPAN CLASS="lee">Partition</SPAN> returns. The ranges are represented by <SPAN CLASS="p">lowervalue</SPAN>:<SPAN CLASS="p">uppervalue</SPAN>, where the low end (<SPAN CLASS="p">lowervalue</SPAN>) of the range is separated from the high end (<SPAN CLASS="p">uppervalue</SPAN>) of the range with a colon (<SPAN CLASS="lee">:</SPAN>).</P>

<TABLE COLS="9" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="36pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="37pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="40pt" VALIGN="TOP"><COL WIDTH="59pt" VALIGN="TOP"><COL WIDTH="63pt" VALIGN="TOP"><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="53pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">start</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">stop</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">interval</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Before First</P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">First Range</P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Last Range</P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">After Last</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">0</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">99</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">5</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"</SPAN>   <SPAN CLASS="l">:–1"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"      0:  4"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"     95: 99"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"   100:</SPAN>   <SPAN CLASS="l">"</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">20</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">199</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">10</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"</SPAN>   <SPAN CLASS="l">:  19"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"    20:  29"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"   190: 199"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"   200:</SPAN>   <SPAN CLASS="l">"</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">100</SPAN></P></TD><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">1010</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">20</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"</SPAN>   <SPAN CLASS="l">:</SPAN>   <SPAN CLASS="l">99"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">"  100:  119"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">" 1000: 1010"</SPAN></P></TD><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">" 1011:</SPAN>   <SPAN CLASS="l">"</SPAN></P></TD></TR></TBODY></TABLE>
<BR></P>In the table shown above, the third line shows the result when <SPAN CLASS="narg">start</SPAN> and <SPAN CLASS="narg">stop</SPAN> define a set of numbers that can't be evenly divided by <SPAN CLASS="narg">interval</SPAN>. The last range extends to <SPAN CLASS="narg">stop</SPAN> (11 numbers) even though <SPAN CLASS="narg">interval</SPAN> is 20.</P>
If necessary, <SPAN CLASS="lee">Partition</SPAN> returns a range with enough leading spaces so that there are the same number of characters to the left and right of the colon as there are characters in <SPAN CLASS="narg">stop</SPAN>, plus one. This ensures that if you use <SPAN CLASS="lee">Partition</SPAN> with other numbers, the resulting text will be handled properly during any subsequent sort operation.</P>
If <SPAN CLASS="narg">interval</SPAN> is 1, the range is <SPAN CLASS="narg">number:number</SPAN>, regardless of the <SPAN CLASS="narg">start</SPAN> and <SPAN CLASS="narg">stop</SPAN> arguments. For example, if <SPAN CLASS="narg">interval</SPAN> is 1, <SPAN CLASS="narg">number</SPAN> is 100 and <SPAN CLASS="narg">stop</SPAN> is 1000, <SPAN CLASS="lee">Partition</SPAN> returns "  100:  100".</P>
If any of the parts is <SPAN CLASS="lee">Null</SPAN>, <SPAN CLASS="lee">Partition</SPAN> returns a <SPAN CLASS="lee">Null</SPAN>.</P>
Example</P>
This example assumes you have an Orders table that contains a Freight field. It creates a select procedure that counts the number of orders for which freight cost falls into each of several ranges. The <SPAN CLASS="lee">Partition</SPAN> function is used first to establish these ranges, then the SQL Count function counts the number of orders in each range. In this example, the arguments to the <SPAN CLASS="lee">Partition</SPAN> function are <SPAN CLASS="p">start</SPAN> = 0, <SPAN CLASS="p">stop</SPAN> = 500, <SPAN CLASS="p">interval</SPAN> = 50. The first range would therefore be 0:49, and so on up to 500.</P>

<pre><code>SELECT DISTINCTROW Partition([freight],0, 500, 50) AS Range,
Count(Orders.Freight) AS Count
FROM Orders
GROUP BY Partition([freight],0,500,50);</code></pre>
Example (Microsoft Access)</P>
You can use the <SPAN CLASS="eln">Partition</SPAN> function in the query design grid as well as in the SQL view of the Query window. In the query design grid, you can use the <SPAN CLASS="eln">Partition</SPAN> function in a calculated field or to specify criteria for a select query.</P>
The following example shows how you can use the <SPAN CLASS="eln">Partition</SPAN> function to create a calculated field that lists how many records fall into each specified range. Suppose you have an Orders table that contains a Freight field. In the Query window, create a new Totals query by adding the Orders table and clicking on the <SPAN CLASS="eln">Totals</SPAN> button in the <SPAN CLASS="eln">Query</SPAN> command bar. Drag the Freight field to the first <SPAN CLASS="eln">Field</SPAN> cell on the query design grid, and set the value of the <SPAN CLASS="eln">Total</SPAN> cell to Count. In another field cell, enter the following expression.</P>

<pre><code>Range: Partition([Freight], 0, 1000, 50)
&lt;BREAK&gt;</code></pre>
Set the <SPAN CLASS="eln">Total</SPAN> cell below this field to Group By, and run the query. The <SPAN CLASS="eln">Partition</SPAN> function returns eleven ranges (0:99, 100:199, 200:299, and so on). The query shows the number of orders with freight charges falling into each range.</P>
The next example shows how you can use the <SPAN CLASS="eln">Partition</SPAN> function in the SQL view of the Query window. It creates a crosstab query that evaluates a Freight field in an Orders table. It calculates the number of orders for each customer for which freight cost falls within one of several ranges. The ranges are defined by the arguments to the <SPAN CLASS="eln">Partition</SPAN> function: <SPAN CLASS="p">start</SPAN> = 0, <SPAN CLASS="p">stop</SPAN> = 1000, <SPAN CLASS="p">interval</SPAN> = 50.</P>
Enter the following expression in SQL view. When you run this query, each range will appear as a column heading.</P>

<pre><code>TRANSFORM Count(Orders.[OrderID]) AS [CountOfOrderID]
SELECT Orders.[CustomerID]
FROM Orders
GROUP BY Orders.[CustomerID]
PIVOT Partition(Int([Freight]), 0, 1000, 50);</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

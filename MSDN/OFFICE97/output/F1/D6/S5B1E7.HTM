<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Add Method</H2>Applies To</P>
<SPAN CLASS="eln">Collection</SPAN> object.</P>
Description</P>
Adds a <SPAN CLASS="pop">member</SPAN> to a <SPAN CLASS="lee">Collection</SPAN> object.</P>
Syntax</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="lee">.Add </SPAN><SPAN CLASS="narg">item</SPAN><SPAN CLASS="lee">,</SPAN> <SPAN CLASS="narg">key</SPAN><SPAN CLASS="lee">,</SPAN> <SPAN CLASS="narg">before</SPAN><SPAN CLASS="lee">,</SPAN> <SPAN CLASS="narg">after</SPAN></P>
The <SPAN CLASS="lee">Add</SPAN> method syntax has the following object qualifier and <SPAN CLASS="pop">named arguments</SPAN></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="315pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. An <SPAN CLASS="pop">object expression</SPAN> that evaluates to an object in the Applies To list.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">item</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. An <SPAN CLASS="pop">expression</SPAN> of any type that specifies the member to add to the collection.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">key</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A unique <SPAN CLASS="pop">string expression</SPAN> that specifies a key string that can be used, instead of a positional index, to access a member of the collection.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">before</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. An expression that specifies a relative position in the collection. The member to be added is placed in the collection<SPAN CLASS="narg"> before</SPAN> the member identified by the<SPAN CLASS="narg"> before</SPAN> <SPAN CLASS="pop">argument</SPAN>. If a <SPAN CLASS="pop">numeric expression</SPAN>,<SPAN CLASS="narg"> before</SPAN> must be a number from 1 to the value of the collection's <SPAN CLASS="lee">Count</SPAN> property. If a string expression, <SPAN CLASS="narg">before</SPAN> must correspond to the<SPAN CLASS="narg"> key</SPAN> specified when the member being referred to was added to the collection. You can specify a<SPAN CLASS="narg"> before</SPAN> position or an <SPAN CLASS="narg">after </SPAN>position, but not both.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="315pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="narg">after</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. An expression that specifies a relative position in the collection. The member to be added is placed in the collection after the member identified by the <SPAN CLASS="narg">after</SPAN> argument. If numeric,<SPAN CLASS="narg"> after</SPAN> must be a number from 1 to the value of the collection's <SPAN CLASS="lee">Count</SPAN> property. If a string,<SPAN CLASS="narg"> after</SPAN> must correspond to the<SPAN CLASS="narg"> key</SPAN> specified when the member referred to was added to the collection. You can specify a<SPAN CLASS="narg"> before</SPAN> position or an <SPAN CLASS="narg">afte</SPAN><SPAN CLASS="narg">r</SPAN> position, but not both.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Whether the <SPAN CLASS="narg">before</SPAN> or <SPAN CLASS="narg">after</SPAN> argument is a string expression or numeric expression, it must refer to an existing member of the collection, or an error occurs.</P>
An error also occurs if a specified <SPAN CLASS="narg">key</SPAN> duplicates the <SPAN CLASS="narg">key</SPAN> for an existing member of the collection.</P>
See Also</P>
<SPAN CLASS="eln">Item</SPAN> method, <SPAN CLASS="eln">Remove</SPAN> method.</P>
Specifics (Microsoft Access)</P>
Items added to a <SPAN CLASS="pop">user-defined collection</SPAN> are automatically indexed. You can refer to an individual item by this index. For example, if you have a collection <SPAN CLASS="cte">colThings</SPAN> that contains four objects, you can refer to the third item in the collection with the expression <SPAN CLASS="cte">colThings(3)</SPAN>.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;When you add items to a <SPAN CLASS="eln">Collection</SPAN> object, they are automatically indexed beginning with the number 1. Therefore, when you enumerate a <SPAN CLASS="eln">Collection</SPAN> object, keep in mind that the index begins at 1. This may be different from built-in collections, which usually are indexed beginning with 0.</P>
When you add an object to a user-defined collection, you can also specify a custom key for that object in addition to the automatic index. In subsequent references to the object, you can refer to the custom key. For example, you can add an object <SPAN CLASS="cte">objMine</SPAN> with the following key.</P>

<pre><code>colThings.Add Item := objMine, key := ("A")</code></pre>
Subsequently you can refer to this particular object in the collection either as <SPAN CLASS="cte">colThings(A)</SPAN>, or by its numeric index.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Add</SPAN> method to add <SPAN CLASS="cte">Inst</SPAN> objects (instances of a class called <SPAN CLASS="cte">Class1</SPAN> containing a <SPAN CLASS="lee">Public </SPAN>variable <SPAN CLASS="cte">InstanceName</SPAN>) to a collection called <SPAN CLASS="cte">MyClasses</SPAN>. To see how this works, insert a class module and declare a public variable called <SPAN CLASS="cte">InstanceName</SPAN> at module level of <SPAN CLASS="cte">Class1</SPAN> (type <SPAN CLASS="lee">Public</SPAN> <SPAN CLASS="cte">InstanceName)</SPAN> to hold the names of each instance. Leave the default name as <SPAN CLASS="cte">Class1</SPAN>. Copy and paste the following code into the Form_Load event procedure of a form module. </P>

<pre><code>Dim MyClasses As New Collection    ' Create a Collection object.
Dim Num As Integer                        ' Counter for individualizing keys.
Dim Msg
Dim TheName                                ' Holder for names user enters.
Do
    Dim Inst As New Class1            ' Create a new instance of Class1.
    Num = Num + 1                        ' Increment Num, then get a name.
    Msg = "Please enter a name for this object." &amp; Chr(13) _
        &amp; "Press Cancel to see names in collection."
    TheName = InputBox(Msg, "Name the Collection Items")
    Inst.InstanceName = TheName    ' Put name in object instance.
    ' If user entered name, add it to the collection.
    If Inst.InstanceName &lt;&gt; "" Then
        ' Add the named object to the collection.
        MyClasses.Add item := Inst, key := CStr(Num)
    End If
    ' Clear the current reference in preparation for next one.
    Set Inst = Nothing
Loop Until TheName = ""
For Each x In MyClasses
    MsgBox x.instancename, , "Instance Name"
Next</code></pre>
Example (Extensibility Object Model)</P>
The following example uses the <SPAN CLASS="lee">Add</SPAN> method to add one standard module to the <SPAN CLASS="lee">VBComponents</SPAN> collection.</P>

<pre><code>Application.VBE.VBProjects(1).VBComponents.Add(vbext_ct_StdModule)</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

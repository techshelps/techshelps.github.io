<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Function Statement</H2>Description</P>
Declares the name, <SPAN CLASS="pop">arguments</SPAN>, and code that form the body of a <SPAN CLASS="lee">Function</SPAN> <SPAN CLASS="pop">procedure</SPAN>.</P>
Syntax</P>
[<SPAN CLASS="lee">Public</SPAN> | <SPAN CLASS="lee">Private</SPAN>] [<SPAN CLASS="lee">Static</SPAN>] <SPAN CLASS="lee">Function</SPAN> <SPAN CLASS="p">name</SPAN> [<SPAN CLASS="lee">(</SPAN><SPAN CLASS="p">arglist</SPAN><SPAN CLASS="lee">)</SPAN>] [<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>]<BR>    [<SPAN CLASS="p">statements</SPAN>]<BR>    [<SPAN CLASS="p">name</SPAN> <SPAN CLASS="lee">=</SPAN> <SPAN CLASS="p">expression</SPAN>]<BR>    [<SPAN CLASS="lee">Exit Function</SPAN>] <BR>    [<SPAN CLASS="p">statements</SPAN>]<BR>    [<SPAN CLASS="p">name</SPAN> <SPAN CLASS="lee">=</SPAN> <SPAN CLASS="p">expression</SPAN>]</P>
<SPAN CLASS="lee">End Function</SPAN></P>
The <SPAN CLASS="lee">Function</SPAN> statement syntax has these parts:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Public</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Function</SPAN> procedure is accessible to all other procedures in all <SPAN CLASS="pop">modules</SPAN>. If used in a module that contains an <SPAN CLASS="lee">Option Private</SPAN>, the procedure is not available outside the <SPAN CLASS="pop">project</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Private</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Function</SPAN> procedure is accessible only to other procedures in the module where it is declared.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Static</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the <SPAN CLASS="lee">Function</SPAN> procedure's local <SPAN CLASS="pop">variables</SPAN> are preserved between calls. The <SPAN CLASS="lee">Static</SPAN> attribute doesn't affect variables that are declared outside the <SPAN CLASS="lee">Function</SPAN>, even if they are used in the procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the <SPAN CLASS="lee">Function</SPAN>; follows standard variable naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">arglist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. List of variables representing arguments that are passed to the <SPAN CLASS="lee">Function</SPAN> procedure when it is called. Multiple variables are separated by commas.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Data type</SPAN> of the value returned by the <SPAN CLASS="lee">Function</SPAN> procedure; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN>, or <SPAN CLASS="lee"> </SPAN>(except fixed length),<SPAN CLASS="lee"> Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>, or any <SPAN CLASS="pop">user-defined type</SPAN>. <SPAN CLASS="pop">Arrays</SPAN> of any type can't be returned, but a <SPAN CLASS="lee">Variant</SPAN> containing an array can.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">statements</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Any group of statements to be executed within the <SPAN CLASS="lee">Function</SPAN> procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">expression</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Return value of the <SPAN CLASS="lee">Function</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="p">arglist</SPAN> argument has the following syntax and parts:</P>
[<SPAN CLASS="lee">Optional</SPAN>] [<SPAN CLASS="lee">ByVal</SPAN> | <SPAN CLASS="lee">ByRef</SPAN>] [<SPAN CLASS="lee">ParamArray</SPAN>] <SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">( )</SPAN>] [<SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN>] [<SPAN CLASS="lee">=</SPAN> <SPAN CLASS="p">defaultvalue</SPAN>]</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Optional</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that an argument is not required. If used, all subsequent arguments in <SPAN CLASS="p">arglist</SPAN> must also be optional and declared using the <SPAN CLASS="lee">Optional</SPAN> keyword. <SPAN CLASS="lee">Optional</SPAN> can't be used for any argument if <SPAN CLASS="lee">ParamArray</SPAN> is used.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByVal</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the argument is passed <SPAN CLASS="pop">by value</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ByRef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Indicates that the argument is passed <SPAN CLASS="pop">by reference</SPAN>. <B>ByRef</B> is the default in Visual Basic.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">ParamArray</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Used only as the last argument in <SPAN CLASS="p">arglist</SPAN> to indicate that the final argument is an <SPAN CLASS="lee">Optional</SPAN> array of <SPAN CLASS="lee">Variant</SPAN> elements. The <SPAN CLASS="lee">ParamArray</SPAN> keyword allows you to provide an arbitrary number of arguments. It may not be used with <SPAN CLASS="lee">ByVal</SPAN>, <SPAN CLASS="lee">ByRef</SPAN>, or <SPAN CLASS="lee">Optional</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the variable representing the argument; follows standard variable naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Data type of the argument passed to the procedure; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <B>Decimal</B> (not currently supported) <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String </SPAN>(variable length only), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>. If the parameter is not <SPAN CLASS="lee">Optional</SPAN>, a user-defined type or an <SPAN CLASS="pop">object type</SPAN> may also be specified.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">defaultvalue</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Any <SPAN CLASS="pop">constant</SPAN> or constant expression. Valid for <SPAN CLASS="lee">Optional</SPAN> parameters only. If the type is an <SPAN CLASS="lee">Object</SPAN>, an explicit default value can only be <SPAN CLASS="lee">Nothing</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
If not explicitly specified using either <SPAN CLASS="lee">Public</SPAN> or <SPAN CLASS="lee">Private</SPAN>, <SPAN CLASS="lee">Function</SPAN> procedures are public by default. If <SPAN CLASS="lee">Static</SPAN> is not used, the value of local variables is not preserved between calls.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;<SPAN CLASS="lee">Function</SPAN> procedures can be recursive; that is, they can call themselves to perform a given task. However, recursion can lead to stack overflow. The <SPAN CLASS="lee">Static</SPAN> keyword is usually not used with recursive <SPAN CLASS="lee">Function</SPAN> procedures.</P>
<HR CLASS="cae">
All executable code must be in <SPAN CLASS="pop">procedures</SPAN>. You can't define a <SPAN CLASS="lee">Function</SPAN> procedure inside another <SPAN CLASS="lee">Function</SPAN>, <SPAN CLASS="lee">Sub</SPAN>, or <SPAN CLASS="lee">Property</SPAN> procedure.</P>
The <SPAN CLASS="lee">Exit Function </SPAN>statement causes an immediate exit from a <SPAN CLASS="lee">Function</SPAN> procedure. Program execution continues with the statement following the statement that called the <SPAN CLASS="lee">Function</SPAN> procedure. Any number of <SPAN CLASS="lee">Exit Function</SPAN> statements can appear anywhere in a <SPAN CLASS="lee">Function</SPAN> procedure.</P>
Like a <SPAN CLASS="lee">Sub</SPAN> procedure, a <SPAN CLASS="lee">Function</SPAN> procedure is a separate procedure that can take arguments, perform a series of statements, and change the values of its arguments. However, unlike a <SPAN CLASS="lee">Sub</SPAN> procedure, you can use a <SPAN CLASS="lee">Function</SPAN> procedure on the right side of an <SPAN CLASS="pop">expression</SPAN> in the same way you use any intrinsic function, such as <SPAN CLASS="lee">Sqr</SPAN>, <SPAN CLASS="lee">Cos</SPAN>, or <SPAN CLASS="lee">Chr</SPAN>, when you want to use the value returned by the function.</P>
You call a <SPAN CLASS="lee">Function</SPAN> procedure using the function name, followed by the argument list in parentheses, in an expression. See the <SPAN CLASS="lee">Call</SPAN> statement for specific information on how to call <SPAN CLASS="lee">Function</SPAN> procedures.</P>
To return a value from a function, assign the value to the function name. Any number of such assignments can appear anywhere within the procedure. If no value is assigned to <SPAN CLASS="p">name</SPAN>, the procedure returns a default value: a numeric function returns 0, a string function returns a zero-length string ("  "), and a <SPAN CLASS="lee">Variant</SPAN> function returns Empty. A function that returns an object reference returns <SPAN CLASS="lee">Nothing</SPAN> if no object reference is assigned to <SPAN CLASS="p">name</SPAN> (using <SPAN CLASS="lee">Set</SPAN>) within the <SPAN CLASS="lee">Function</SPAN>.</P>
The following example shows how to assign a return value to a function named <SPAN CLASS="cte">BinarySearch</SPAN>. In this case, <SPAN CLASS="lee">False</SPAN> is assigned to the name to indicate that some value was not found.</P>

<pre><code>Function BinarySearch(. . .) As Boolean
<SPAN CLASS="lee">. . .</SPAN>
    ' Value not found. Return a value of False.
    If lower &gt; upper Then
        BinarySearch = False
        Exit Function
    End If
<SPAN CLASS="lee">. . .</SPAN>
End Function</code></pre>
Variables used in <SPAN CLASS="lee">Function</SPAN> procedures fall into two categories: those that are explicitly declared within the procedure and those that are not. Variables that are explicitly declared in a procedure (using <SPAN CLASS="lee">Dim</SPAN> or the equivalent) are always local to the procedure. Variables that are used but not explicitly declared in a procedure are also local unless they are explicitly declared at some higher level outside the procedure.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;A procedure can use a variable that is not explicitly declared in the procedure, but a naming conflict can occur if anything you defined at the <SPAN CLASS="pop">module level</SPAN> has the same name. If your procedure refers to an undeclared variable that has the same name as another procedure, constant, or variable, it is assumed that your procedure refers to that module-level name. Explicitly declare variables to avoid this kind of conflict. You can use an <SPAN CLASS="lee">Option Explicit</SPAN> statement to force explicit declaration of variables.</P>
<HR CLASS="cae">
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;Visual Basic may rearrange arithmetic expressions to increase internal efficiency. Avoid using a <SPAN CLASS="lee">Function</SPAN> procedure in an arithmetic expression when the function changes the value of variables in the same expression.</P>
<HR CLASS="cae">
See Also</P>
<SPAN CLASS="eln">Call</SPAN> statement, <SPAN CLASS="eln">Dim</SPAN> statement, <B>Option</B> <SPAN CLASS="eln">Explicit</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Get</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Let</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Set</SPAN> statement, <SPAN CLASS="eln">Sub</SPAN> statement.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, a public <SPAN CLASS="eln">Function</SPAN> procedure is available to all other procedures in the current database and in referencing Microsoft Access databases. However, it is not available to any other applications.</P>
If you declare a <SPAN CLASS="eln">Function</SPAN> procedure as private in any module by preceding it with the <SPAN CLASS="eln">Private </SPAN>keyword, that procedure is available only to other procedures in the same module.</P>
If a <SPAN CLASS="eln">Function</SPAN> procedure is declared as public within a private module, such as a <SPAN CLASS="pop">class module</SPAN>, then the procedure is available to all other procedures in that database, but is not available to other Microsoft Access databases.</P>
Example</P>
This example uses the <SPAN CLASS="lee">Function</SPAN> statement to declare the name, arguments, and code that form the body of a <SPAN CLASS="lee">Function</SPAN> procedure. The last example uses hard-typed, initialized <SPAN CLASS="lee">Optional</SPAN> arguments.</P>

<pre><code>' The following user-defined function returns the square root of the
' argument passed to it.
Function CalculateSquareRoot(NumberArg As Double) As Double
    If NumberArg &lt; 0 Then                    ' Evaluate argument.
        Exit Function                        ' Exit to calling procedure.
    Else
        CalculateSquareRoot = Sqr(NumberArg)    ' Return square root.
    End If
End Function</code></pre>
Using the <SPAN CLASS="lee">ParamArray</SPAN> keyword enables a function to accept a variable number of arguments. In the following definition, <SPAN CLASS="cte">FirstArg</SPAN> is passed by value.</P>

<pre><code>Function CalcSum(ByVal FirstArg As Integer, ParamArray OtherArgs())
Dim ReturnValue 
' If the function is invoked as follows:
ReturnValue = CalcSum(4, 3 ,2 ,1)
' Local variables are assigned the following values: FirstArg = 4,
' OtherArgs(1) = 3, OtherArgs(2) = 2, and so on, assuming default
' lowerbound for arrays = 1.</code></pre>
<SPAN CLASS="lee">Optional</SPAN> arguments can now have default values and types other than <SPAN CLASS="lee">Variant</SPAN>. </P>

<pre><code>' If a function's arguments are defined as follows:
Function MyFunc(MyStr As String, Optional MyArg1 As _ Integer = 5, _
    Optional MyArg2 = "Dolly") 
Dim RetVal
' The function can be invoked as follows:
RetVal = MyFunc("Hello", 2, "World")        ' All 3 arguments supplied.
RetVal = MyFunc("Test", , 5)            ' Second argument omitted.
' Arguments one and three using named-arguments.
RetVal = MyFunc(MyStr:="Hello ", MyArg1:=7)</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

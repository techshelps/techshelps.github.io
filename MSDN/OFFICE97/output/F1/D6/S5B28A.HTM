<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Private Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Private Statement</H1>Description</P>
Used at <SPAN CLASS="pop">module level</SPAN> to declare private <SPAN CLASS="pop">variables</SPAN> and allocate storage space.</P>
Syntax</P>
<SPAN CLASS="lee">Private</SPAN> [<SPAN CLASS="lee">WithEvents</SPAN>] <SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">subscripts</SPAN>]<SPAN CLASS="lee">)</SPAN>] [<SPAN CLASS="lee">As </SPAN>[<SPAN CLASS="lee">New</SPAN>] <SPAN CLASS="p">type</SPAN>] [<SPAN CLASS="lee">,</SPAN>[<SPAN CLASS="lee">WithEvents</SPAN>]<BR>ú<SPAN CLASS="p">varname</SPAN>[<SPAN CLASS="lee">(</SPAN>[<SPAN CLASS="p">subscripts</SPAN>]<SPAN CLASS="lee">)</SPAN>] [<SPAN CLASS="lee">As </SPAN>[<SPAN CLASS="lee">New</SPAN>] <SPAN CLASS="p">type</SPAN>]] <SPAN CLASS="lee">. . .</SPAN></P>
The <SPAN CLASS="lee">Private</SPAN> statement syntax has these parts.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">WithEvents</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. <SPAN CLASS="pop">Keyword</SPAN> that specifies that <SPAN CLASS="p">varname</SPAN> is an <SPAN CLASS="pop">object variable</SPAN> used to respond to events triggered by an <SPAN CLASS="pop">ActiveX object</SPAN>. Valid only in <SPAN CLASS="pop">class modules</SPAN>. You can declare as many individual variables as you like using <SPAN CLASS="lee">WithEvents</SPAN>, but you can't create <SPAN CLASS="pop">arrays</SPAN> with <SPAN CLASS="lee">WithEvents</SPAN>. You can't use <SPAN CLASS="lee">New</SPAN> with <SPAN CLASS="lee">WithEvents</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varname</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Required. Name of the variable; follows standard variable naming conventions.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">subscripts</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Dimensions of an array variable; up to 60 multiple dimensions may be declared. The <SPAN CLASS="p">subscripts</SPAN> <SPAN CLASS="pop">argument</SPAN> uses the following syntax:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p"></SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN> [<SPAN CLASS="lee">,</SPAN>[<SPAN CLASS="p">lower</SPAN> <SPAN CLASS="lee">To</SPAN>] <SPAN CLASS="p">upper</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p"></SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">When not explicitly stated in <SPAN CLASS="p">lower</SPAN>, the lower bound of an array is controlled by the <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement. The lower bound is zero if no <SPAN CLASS="lee">Option</SPAN> <SPAN CLASS="lee">Base</SPAN> statement is present.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">New</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Keyword that enables implicit creation of an object. If you use <SPAN CLASS="lee">New</SPAN> when declaring the object variable, a new instance of the object is created on first reference to it, so you don't have to use the <SPAN CLASS="lee">Set</SPAN> statement to assign the object reference. The <SPAN CLASS="lee">New</SPAN> keyword can't be used to declare variables of any intrinsic <SPAN CLASS="pop">data type</SPAN>, can't be used to declare instances of dependent objects, and can't be used with <SPAN CLASS="lee">WithEvents</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. Data type of the variable; may be <SPAN CLASS="lee">Byte</SPAN>, <SPAN CLASS="lee">Boolean</SPAN>, <SPAN CLASS="lee">Integer</SPAN>, <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Currency</SPAN>, <SPAN CLASS="lee">Single</SPAN>, <SPAN CLASS="lee">Double</SPAN>, <SPAN CLASS="lee">Decimal</SPAN> (not currently supported), <SPAN CLASS="lee">Date</SPAN>, <SPAN CLASS="lee">String</SPAN> (for variable-length strings), <SPAN CLASS="lee">String</SPAN> * <SPAN CLASS="p">length</SPAN> (for fixed-length strings), <SPAN CLASS="lee">Object</SPAN>, <SPAN CLASS="lee">Variant</SPAN>, a <SPAN CLASS="pop">user-defined type</SPAN>, or an <SPAN CLASS="pop">object type</SPAN>. Use a separate <SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN> clause for each variable being defined.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
<SPAN CLASS="lee">Private</SPAN> variables are available only to the module in which they are declared.</P>
Use the <SPAN CLASS="lee">Private</SPAN> statement to declare the data type of a variable. For example, the following statement declares a variable as an <SPAN CLASS="lee">Integer</SPAN>:</P>

<pre><code>Private NumberOfEmployees As Integer</code></pre>
You can also use a <SPAN CLASS="lee">Private</SPAN> statement to declare the object type of a variable. The following statement declares a variable for a new instance of a worksheet.</P>

<pre><code>Private X As New Worksheet</code></pre>
If the <SPAN CLASS="lee">New</SPAN> keyword is not used when declaring an object variable, the variable that refers to the object must be assigned an existing object using the <SPAN CLASS="lee">Set</SPAN> statement before it can be used. Until it is assigned an object, the declared object variable has the special value <SPAN CLASS="lee">Nothing</SPAN>, which indicates that it doesn't refer to any particular instance of an object.</P>
If you don't specify a data type or object type, and there is no <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statement in the module, the variable is <SPAN CLASS="lee">Variant</SPAN> by default.</P>
You can also use the <SPAN CLASS="lee">Private</SPAN> statement with empty parentheses to declare a dynamic array. After declaring a dynamic array, use the <SPAN CLASS="lee">ReDim</SPAN> statement within a procedure to define the number of dimensions and elements in the array. If you try to redeclare a dimension for an array variable whose size was explicitly specified in a <SPAN CLASS="lee">Private</SPAN>, <SPAN CLASS="lee">Public</SPAN>, or <SPAN CLASS="lee">Dim</SPAN> statement, an error occurs.</P>
When variables are initialized, a numeric variable is initialized to 0, a variable-length string is initialized to a zero-length string (" "), and a fixed-length string is filled with zeros. <SPAN CLASS="lee">Variant</SPAN> variables are initialized to Empty. Each element of a user-defined type variable is initialized as if it were a separate variable.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;When you use the <B>Private </B>statement in a procedure, you generally put the <B>Private </B>statement at the beginning of the procedure.</P>
See Also</P>
<SPAN CLASS="eln">Array</SPAN> function, <SPAN CLASS="eln">Const</SPAN> statement, <SPAN CLASS="eln">Dim</SPAN> statement, <SPAN CLASS="eln">Function</SPAN> statement, <B>Option</B> <SPAN CLASS="eln">Base</SPAN> statement, <B>Option</B> <SPAN CLASS="eln">Private</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Get</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Let</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Set</SPAN> statement, <SPAN CLASS="eln">Public</SPAN> statement, <SPAN CLASS="eln">ReDim</SPAN> statement, <SPAN CLASS="eln">Set</SPAN> statement, <SPAN CLASS="eln">Static</SPAN> statement, <SPAN CLASS="eln">Sub</SPAN> statement, <SPAN CLASS="eln">Type</SPAN> statement.</P>
Example</P>
This example shows the <SPAN CLASS="lee">Private</SPAN> statement being used at the module level to declare variables as private; that is, they are available only to the module in which they are declared.</P>

<pre><code>Private Number As Integer                ' Private Integer variable.
Private NameArray(1 To 5) As String        ' Private array variable.
' Multiple declarations, two Variants and one Integer, all Private.
Private MyVar, YourVar, ThisVar As Integer</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DoEvents Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>DoEvents Function</H2>Description</P>
Yields execution so that the operating system can process other events.</P>
Syntax</P>
<SPAN CLASS="lee">DoEvents( )</SPAN></P>
Remarks</P>
The <SPAN CLASS="lee">DoEvents</SPAN> function returns an <SPAN CLASS="lee">Integer</SPAN> representing the number of open forms in stand-alone versions of Visual Basic, such as Visual Basic, Standard Edition. <SPAN CLASS="lee">DoEvents</SPAN> returns zero in all other applications.</P>
<SPAN CLASS="lee">DoEvents</SPAN> passes control to the operating system. Control is returned after the operating system has finished processing the events in its queue and all keys in the <SPAN CLASS="lee">SendKeys</SPAN> queue have been sent.</P>
<SPAN CLASS="lee">DoEvents</SPAN> is most useful for simple things like allowing a user to cancel a process after it has started, for example a search for a file. For long-running processes, yielding the processor is better accomplished by using a Timer or delegating the task to an ActiveX EXE component. In the latter case, the task can continue completely independent of your application, and the operating system takes case of multitasking and time slicing.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>&nbsp;&nbsp;&nbsp;make sure the <SPAN CLASS="pop">procedure</SPAN> is not executed again from a different part of your code before the first call returns; this could cause unpredictable results. In addition, do not use <SPAN CLASS="lee">DoEvents</SPAN> if other applications could possibly interact with your procedure in unforeseen ways during the time you have yielded control.</P>
<HR CLASS="cae">
See Also</P>
<SPAN CLASS="eln">SendKeys</SPAN> statement.</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, the <SPAN CLASS="eln">DoEvents</SPAN> function is ignored if you use it in:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">A user-defined function or a procedure that calculates a field in a query, form, or report.</LI><LI CLASS="ULI1">A user-defined function that creates a list to fill a combo box, a list box, or an OLE object.
</LI></UL></SPAN>If you include the <SPAN CLASS="eln">DoEvents</SPAN> function in any of these, Microsoft Access will not relinquish control to the operating system.</P>
Example</P>
This example uses the <SPAN CLASS="lee">DoEvents</SPAN> function to cause execution to yield to the operating system once every 1000 iterations of the loop. <SPAN CLASS="lee">DoEvents</SPAN> returns the number of open Visual Basic forms, but only when the host application is Visual Basic.</P>

<pre><code>' Create a variable to hold number of Visual Basic forms loaded 
' and visible.
Dim I, OpenForms
For I = 1 To 150000                    ' Start loop.
    If I Mod 1000 = 0 Then             ' If loop has repeated 1000 times.
        OpenForms = DoEvents            ' Yield to operating system.
    End If
Next I    ' Increment loop counter.</code></pre>
Example (Microsoft Access)</P>
The following example uses the <SPAN CLASS="eln">DoEvents</SPAN> function to return control to the operating system while a loop is executing. The <SPAN CLASS="eln">DoEvents</SPAN> function always returns 0.</P>

<pre><code>Sub LongLoop()
    Dim intI As Integer

    For intI = 1 To 1500                 ' Start loop.
        If intI Mod 100 = 0 Then    ' If loop has repeated 100 times.
            DoEvents                        ' Yield to operating system.
            Debug.Print intI
        End If
    Next intI                                ' Increment loop counter.
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

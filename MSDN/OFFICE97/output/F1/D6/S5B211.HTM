<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deftype Statements</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Deftype Statements</H2>Description</P>
Used at <SPAN CLASS="pop">module level</SPAN> to set the default <SPAN CLASS="pop">data type</SPAN> for <SPAN CLASS="pop">variables</SPAN>, <SPAN CLASS="pop">arguments</SPAN> passed to <SPAN CLASS="pop">procedures</SPAN>, and the return type for <SPAN CLASS="lee">Function</SPAN> and <SPAN CLASS="lee">Property</SPAN> <SPAN CLASS="lee">Get</SPAN> procedures whose names start with the specified characters.</P>
Syntax</P>
<SPAN CLASS="lee">DefBool</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefByte</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefInt</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefLng</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefCur</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefSng</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefDbl</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefDec</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefDate</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefStr</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefObj</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
<SPAN CLASS="lee">DefVar</SPAN> <SPAN CLASS="p">letterrange</SPAN>[<SPAN CLASS="lee">, </SPAN><SPAN CLASS="p">letterrange</SPAN>] <SPAN CLASS="lee">. . .</SPAN></P>
The required <SPAN CLASS="p">letterrange</SPAN> argument has the following syntax:</P>
<SPAN CLASS="p">letter1</SPAN>[<SPAN CLASS="lee">-</SPAN><SPAN CLASS="p">letter2</SPAN>]</P>
The <SPAN CLASS="p">letter1</SPAN> and <SPAN CLASS="p">letter2</SPAN> arguments specify the name range for which you can set a default data type. Each argument represents the first letter of the variable, argument, <SPAN CLASS="lee">Function</SPAN> procedure, or <SPAN CLASS="lee">Property Get</SPAN> procedure name and can be any letter of the alphabet. The case of letters in <SPAN CLASS="p">letterrange</SPAN> isn't significant.</P>
Remarks</P>
The statement name determines the data type</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="66pt" VALIGN="TOP"><COL WIDTH="293pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Statement</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Data Type</P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefBool</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Boolean</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefByte</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Byte</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefInt</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Integer</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefLng</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Long</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefCur</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Currency</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefSng</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Single</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefDbl</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Double</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefDec</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Decimal</SPAN> (not currently supported)</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefDate</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Date</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefStr</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">String</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefObj</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Object</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">DefVar</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Variant</SPAN></P></TD></TR></TBODY></TABLE>
<BR></P>For example, in the following program fragment, <SPAN CLASS="cte">Message</SPAN> is a string variable:</P>

<pre><code>DefStr A-Q
<SPAN CLASS="lee">. . .</SPAN>
Message = "Out of stack space."</code></pre>
A <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statement affects only the <SPAN CLASS="pop">module</SPAN> where it is used. For example, a <SPAN CLASS="lee">DefInt</SPAN> statement in one module affects only the default data type of variables, arguments passed to procedures, and the return type for <SPAN CLASS="lee">Function</SPAN> and <SPAN CLASS="lee">Property</SPAN> <SPAN CLASS="lee">Get</SPAN> procedures declared in that module; the default data type of variables, arguments, and return types in other modules is unaffected. If not explicitly declared with a <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statement, the default data type for all variables, all arguments, all <SPAN CLASS="lee">Function </SPAN>procedures, and all <SPAN CLASS="lee">Property</SPAN> <SPAN CLASS="lee">Get</SPAN> procedures is <SPAN CLASS="lee">Variant</SPAN>.</P>
When you specify a letter range, it usually defines the data type for variables that begin with letters in the first 128 characters of the character set. However, when you specify the letter range A Z, you set the default to the specified data type for all variables, including variables that begin with international characters from the extended part of the character set (128 255).</P>
Once the range A Z has been specified, you can't further redefine any subranges of variables using <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statements. Once a range has been specified, if you include a previously defined letter in another <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statement, an error occurs. However, you can explicitly specify the data type of any variable, defined or not, using a <SPAN CLASS="lee">Dim</SPAN> statement with an <SPAN CLASS="lee">As</SPAN> <SPAN CLASS="p">type</SPAN> clause. For example, you can use the following code at module level to define a variable as a <SPAN CLASS="lee">Double</SPAN> even though the default data type is <SPAN CLASS="lee">Integer</SPAN>:</P>

<pre><code>DefInt A-Z
Dim TaxRate As Double</code></pre>
<SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statements don't affect elements of <SPAN CLASS="pop">user-defined types</SPAN> because the elements must be explicitly declared.</P>
See Also</P>
<SPAN CLASS="eln">Function</SPAN> statement, <SPAN CLASS="eln">Let</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Get</SPAN> statement.</P>
Example</P>
This example shows various uses of the <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statements to set default data types of variables and function procedures whose names start with specified characters. The default data type can be overridden only by explicit assignment using the <SPAN CLASS="lee">Dim</SPAN> statement. <SPAN CLASS="lee">Def</SPAN><SPAN CLASS="p">type</SPAN> statements can only be used at the module level, that is, not within procedures.</P>

<pre><code>' Variable names beginning with A through K default to Integer.
DefInt A-K
' Variable names beginning with L through Z default to String.
DefStr L-Z
CalcVar = 4                                ' Initialize Integer.
StringVar = "Hello there"            ' Initialize String.
AnyVar = "Hello"                         ' Causes "Type mismatch" error.
Dim Calc As Double                        ' Explicitly set the type to Double.
Calc = 2.3455                            ' Assign a Double.

' Deftype statements also apply to function procedures.
CalcNum = ATestFunction(4)    ' Call user-defined function.
' ATestFunction function procedure definition.
Function ATestFunction(INumber)
    ATestFunction = INumber * 2    ' Return value is an integer.
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SlideRange Collection Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>SlideRange Collection Object</H1>Description</P>
A collection that represents a notes page or a slide range, which is a set of slides that can contain as little as a single slide or as much as all the slides in a presentation. You can include whichever slides you want — chosen from all the slides in the presentation or from all the slides in the selection — to construct a slide range. For example, you could construct a <SPAN CLASS="lee">SlideRange</SPAN> collection that contains the first three slides in a presentation, all the selected slides in the presentation, or all the title slides in the presentation.</P>
Using the SlideRange Collection</P>
This section describes how to:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Return a set of slides that you specify by name or index number</LI><LI CLASS="ULI1">Return all or some of the selected slides in a presentation</LI><LI CLASS="ULI1">Return a notes page</LI><LI CLASS="ULI1">Apply properties and methods to a slide range</LI></UL></SPAN>Returning a set of slides that you specify by name or index number</P>
Use <SPAN CLASS="lee">Slides.Range</SPAN>(<SPAN CLASS="p">index</SPAN>), where <SPAN CLASS="p">index</SPAN> is the name or index number of the slide or an array that contains either names or index numbers of slides, to return a <SPAN CLASS="lee">SlideRange</SPAN> collection that represents a set of slides in a presentation. You can use the <SPAN CLASS="lee">Array</SPAN> function to construct an array of names or index numbers. The following example sets the background fill for slides one and three in the active presentation.</P>

<pre><code>With ActivePresentation.Slides.Range(Array(1, 3))
    .FollowMasterBackground = False
    .Background.Fill.PresetGradient msoGradientHorizontal, 1, _
        msoGradientLateSunset
End With</code></pre>
The following example sets the background fill for the slides named "Intro" and "Big Chart" in the active presentation. Note that slides are assigned automatically generated names of the form Slide<SPAN CLASS="p">n</SPAN> (where n is an integer) when they're created. To assign a more meaningful name to a slide, use the <SPAN CLASS="lee">Name</SPAN> property.</P>

<pre><code>With ActivePresentation.Slides.Range(Array("Intro", "Big Chart"))
    .FollowMasterBackground = False
    .Background.Fill.PresetGradient msoGradientHorizontal, 1, _
        msoGradientLateSunset
End With</code></pre>
Although you can use the <SPAN CLASS="lee">Range</SPAN> method to return any number of slides, it's simpler to use the <SPAN CLASS="lee">Item</SPAN> method if you only want to return a single member of the <SPAN CLASS="lee">SlideRange</SPAN> collection. For example, <SPAN CLASS="cte">Slides(1)</SPAN> is simpler than <SPAN CLASS="cte">Slides.Range(1)</SPAN>.</P>
Returning all or some of the selected slides in a presentation</P>
Use the <SPAN CLASS="lee">SlideRange</SPAN> property of the <SPAN CLASS="lee">Selection</SPAN> object to return all the slides in the selection. The following example sets the background fill for all the selected slides in window one, assuming that there's at least one slide selected.</P>

<pre><code>With Windows(1).Selection.SlideRange
    .FollowMasterBackground = False
    .Background.Fill.PresetGradient msoGradientHorizontal, 1, _
        msoGradientLateSunset
End With</code></pre>
Use <SPAN CLASS="lee">Selection.SlideRange</SPAN>(<SPAN CLASS="p">index</SPAN>), where <SPAN CLASS="p">index</SPAN> is the slide name or index number, to return a single slide from the selection. The following example sets the background fill for slide two in the collection of selected slides in window one, assuming that there are at least two slides selected.</P>

<pre><code>With Windows(1).Selection.SlideRange(2)
    .FollowMasterBackground = False
    .Background.Fill.PresetGradient msoGradientHorizontal, 1, _
        msoGradientLateSunset
End With</code></pre>
Returning a notes page</P>
Use the <SPAN CLASS="lee">NotesPage</SPAN> property to return a <SPAN CLASS="lee">SlideRange</SPAN> collection that represents the specified notes page. The following example inserts text into placeholder two (the notes area) on the notes page for slide one in the active presentation.</P>

<pre><code>ActivePresentation.Slides(1).NotesPage.Shapes.Placeholders(2) _
    .TextFrame.TextRange.InsertAfter "Added Text"</code></pre>
Applying a property or method to a slide range</P>
Just as you can work with several slides at the same time in the user interface by selecting them and applying a command, you can work with several slides at the same time programmatically by constructing a <SPAN CLASS="lee">SlideRange</SPAN> collection and applying properties or methods to it. And just as some commands in the user interface that work on single slides aren't valid when multiple slides are selected, some properties and methods that work on a <SPAN CLASS="lee">Slide</SPAN> object or on a <SPAN CLASS="lee">SlideRange</SPAN> collection that contains only one slide will fail if they're applied to a <SPAN CLASS="lee">SlideRange</SPAN> collection that contains more than one slide. In general, if you can't do something manually when more than one slide is selected (such as return the individual shapes on one of the slides), you can't do it programmatically by using a <SPAN CLASS="lee">SlideRange</SPAN> collection that contains more than one slide.</P>
For those operations that work in the user interface whether you have a single slide or multiple slides selected (such as copying the selection to the Clipboard or setting the slide background fill), the associated properties and methods will work on a <SPAN CLASS="lee">SlideRange</SPAN> collection that contains more than one slide. Here are some general guidelines for how these properties and methods behave when they're applied to multiple slides.</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Applying a method to a <SPAN CLASS="lee">SlideRange</SPAN> collection is equivalent to applying the method to all the <SPAN CLASS="lee">Slide</SPAN> objects in that range as a group.</LI><LI CLASS="ULI1">Setting the value of a property of the <SPAN CLASS="lee">SlideRange</SPAN> collection is equivalent to setting the value of the property in each slide in that range individually (for a property that takes an enumerated type, setting the value to the "Mixed" value has no effect).</LI><LI CLASS="ULI1">A property of the <SPAN CLASS="lee">SlideRange</SPAN> collection that returns an enumerated type returns the&nbsp;value of the property for an individual slide in the collection if all slides in the collection have the same value for that property. If the slides in the collection don't all have the same value for the property, the property returns the "Mixed" value.</LI><LI CLASS="ULI1">A property of the <SPAN CLASS="lee">SlideRange</SPAN> collection that returns a simple data type (such as <SPAN CLASS="lee">Long</SPAN>, <SPAN CLASS="lee">Single</SPAN>, or <SPAN CLASS="lee">String</SPAN>) returns the value of the property for an individual slide in the collection if all slides in the collection have the same value for that property. If&nbsp;the slides in the collection don't all have the same value for the property, the property will return  – 2 or generate an error. For example, using the <SPAN CLASS="lee">Name</SPAN> property on a <SPAN CLASS="lee">SlideRange</SPAN> object that contains multiple slides will generate an error because each slide has a different value for its <SPAN CLASS="lee">Name</SPAN> property.</LI><LI CLASS="ULI1">Some formatting properties of slides aren't set by properties and methods that apply directly to the <SPAN CLASS="lee">SlideRange</SPAN> collection, but by properties and methods that&nbsp;apply to an object contained in the <SPAN CLASS="lee">SlideRange</SPAN> collection, such as the <SPAN CLASS="lee">ColorScheme</SPAN> object. If the contained object represents operations that can be performed on multiple objects in the user interface, you'll be able to return the object from a <SPAN CLASS="lee">SlideRange</SPAN> collection that contains more than one slide, and its properties and methods will follow the preceding rules. For example, you can use the <SPAN CLASS="lee">ColorScheme</SPAN> property to return the <SPAN CLASS="lee">ColorScheme</SPAN> object that represents the color schemes used on all the slides in the specified <SPAN CLASS="lee">SlideRange</SPAN> collection. Setting properties for this <SPAN CLASS="lee">ColorScheme</SPAN> object will also set these properties for the <SPAN CLASS="lee">ColorScheme</SPAN> objects on all the individual slides in the <SPAN CLASS="lee">SlideRange</SPAN> collection.
</LI></UL></SPAN>Properties</P>
<SPAN CLASS="eln">Application</SPAN> property, <SPAN CLASS="eln">Background</SPAN> property, <SPAN CLASS="eln">ColorScheme</SPAN> property, <SPAN CLASS="eln">Count</SPAN> property, <SPAN CLASS="eln">DisplayMasterShapes</SPAN> property, <SPAN CLASS="eln">FollowMasterBackground</SPAN> property, <SPAN CLASS="eln">HeadersFooters</SPAN> property, <SPAN CLASS="eln">Hyperlinks</SPAN> property, <SPAN CLASS="eln">Layout</SPAN> property, <SPAN CLASS="eln">Master</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">NotesPage</SPAN> property, <SPAN CLASS="eln">Parent</SPAN> property, <SPAN CLASS="eln">PrintSteps</SPAN> property, <SPAN CLASS="eln">Shapes</SPAN> property, <SPAN CLASS="eln">SlideID</SPAN> property, <SPAN CLASS="eln">SlideIndex</SPAN> property, <SPAN CLASS="eln">SlideNumber</SPAN> property, <SPAN CLASS="eln">SlideShowTransition</SPAN> property, <SPAN CLASS="eln">Tags</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Copy</SPAN> method, <SPAN CLASS="eln">Cut</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Duplicate</SPAN> method, <SPAN CLASS="eln">Export</SPAN> method, <SPAN CLASS="eln">Item</SPAN> method (multiple collections), <SPAN CLASS="eln">Select</SPAN> method.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Application Object</H1>Description</P>
Represents the entire Microsoft PowerPoint application. The <SPAN CLASS="lee">Application</SPAN> object contains:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Application-wide settings and options (the name of the active printer, for example).</LI><LI CLASS="ULI1">Properties that return top-level objects, such as <SPAN CLASS="lee">ActivePresentation</SPAN>,<SPAN CLASS="lee"> Windows</SPAN>, and so on.
</LI></UL></SPAN>Using the Application Object</P>
Use the <SPAN CLASS="lee">Application</SPAN> property to return the <SPAN CLASS="lee">Application</SPAN> object. The following example applies the <SPAN CLASS="lee">Windows</SPAN> property to the <SPAN CLASS="lee">Application</SPAN> object.</P>

<pre><code>Application.Windows(2).Activate</code></pre>
The following example creates a PowerPoint <SPAN CLASS="lee">Application</SPAN> object in another application, starts PowerPoint (if it's not already running), and opens an existing presentation named "Ex_a2a.ppt."</P>

<pre><code>Set ppt = CreateObject("Powerpoint.Application.8")
ppt.Visible = True
ppt.Presentations.Open "c:\My Documents\ex_a2a.ppt"</code></pre>
Remarks</P>
When you are writing code that will run from PowerPoint, the following properties of the <SPAN CLASS="lee">Application</SPAN> object can be used without the object qualifier: <SPAN CLASS="lee">ActivePresentation</SPAN>, <SPAN CLASS="lee">ActiveWindow</SPAN>, <SPAN CLASS="lee">AddIns</SPAN>, <SPAN CLASS="lee">Assistant</SPAN>, <SPAN CLASS="lee">CommandBars</SPAN>, <SPAN CLASS="lee">Presentations</SPAN>, <SPAN CLASS="lee">SlideShowWindows</SPAN>, <SPAN CLASS="lee">Windows</SPAN>. For example, instead of writing <SPAN CLASS="cte">Application.ActiveWindow.Height = 200</SPAN>, you can write <SPAN CLASS="cte">ActiveWindow.Height = 200</SPAN>.</P>
Properties</P>
<SPAN CLASS="eln">Active</SPAN> property, <SPAN CLASS="eln">ActivePresentation</SPAN> property, <SPAN CLASS="eln">ActivePrinter</SPAN> property, <SPAN CLASS="eln">ActiveWindow</SPAN> property, <SPAN CLASS="eln">AddIns</SPAN> property, <SPAN CLASS="eln">Assistant</SPAN> property, <SPAN CLASS="eln">Build</SPAN> property, <SPAN CLASS="eln">Caption</SPAN> property, <SPAN CLASS="eln">CommandBars</SPAN> property, <SPAN CLASS="eln">Creator</SPAN> property, <SPAN CLASS="eln">FileFind</SPAN> property, <SPAN CLASS="eln">FileSearch</SPAN> property, <SPAN CLASS="eln">Height</SPAN> property, <SPAN CLASS="eln">Left</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">OperatingSystem</SPAN> property, <SPAN CLASS="eln">Path</SPAN> property, <SPAN CLASS="eln">Presentations</SPAN> property, <SPAN CLASS="eln">SlideShowWindows</SPAN> property, <SPAN CLASS="eln">Top</SPAN> property, <SPAN CLASS="eln">VBE</SPAN> property, <SPAN CLASS="eln">Version</SPAN> property, <SPAN CLASS="eln">Visible</SPAN>&nbsp;property, <SPAN CLASS="eln">Width</SPAN> property, <SPAN CLASS="eln">Windows</SPAN> property, <SPAN CLASS="eln">WindowState</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Activate</SPAN> method, <SPAN CLASS="eln">Help</SPAN> method, <SPAN CLASS="eln">Quit</SPAN> method, <SPAN CLASS="eln">Run</SPAN> method.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

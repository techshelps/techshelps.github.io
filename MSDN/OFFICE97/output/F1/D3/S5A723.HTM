<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Range Property (Application, Range, or Worksheet Object)</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Range Property (Application, Range, or Worksheet Object)</H1>Applies To</P>
<B>Application</B> object, <B>Range</B> object, <B>Worksheet</B> object.</P>
Description</P>
Returns a <SPAN CLASS="lee">Range</SPAN> object that represents a cell or a range of cells.</P>
Syntax 1</P>
<SPAN CLASS="p">expression</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="lee">Range</SPAN><SPAN CLASS="l">(</SPAN><SPAN CLASS="narg">Cell1</SPAN><SPAN CLASS="l">)</SPAN></P>
Syntax 2</P>
<SPAN CLASS="p">expression</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="lee">Range</SPAN><SPAN CLASS="l">(</SPAN><SPAN CLASS="narg">Cell1,</SPAN> <SPAN CLASS="narg">Cell2</SPAN><SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="p">expression</SPAN>   Optional for <SPAN CLASS="lee">Application</SPAN>, required for <SPAN CLASS="lee">Range</SPAN> and <SPAN CLASS="lee">Worksheet</SPAN>. An expression that returns an object in the Applies To list.</P>
<SPAN CLASS="narg">Cell1</SPAN>   Syntax 1: Required <SPAN CLASS="lee">Variant</SPAN>. The name of the range. This must be an A1-style reference in the language of the macro. It can include the range operator (a colon), the intersection operator (a space), or the union operator (a comma). It can also include dollar signs, but they're ignored. You can use a local defined name in any part of the range. If you use a name, the name is assumed to be in the language of the macro.</P>
Syntax 2: Required <SPAN CLASS="lee">Variant</SPAN>. The cell in the upper-left corner of the range. Can be a <SPAN CLASS="lee">Range</SPAN> object that contains a single cell, an entire column, or entire row), or it can be a string that names a single cell in the language of the macro.</P>
<SPAN CLASS="narg">Cell1</SPAN>, <SPAN CLASS="narg">Cell2</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. The cell in the upper-left and lower-right corner of the range. Can be a <SPAN CLASS="lee">Range</SPAN> object that contains a single cell, an entire column, or entire row, or it can be a string that names a single cell in the language of the macro.</P>
Remarks</P>
When used without an object qualifier, this property is a shortcut for <SPAN CLASS="cte">ActiveSheet.Range</SPAN> (it returns a range from the active sheet; if the active sheet isn't a worksheet, the property fails).</P>
When applied to a <SPAN CLASS="lee">Range</SPAN> object, the property is relative to the <SPAN CLASS="lee">Range</SPAN> object. For example, if the selection is cell C3, then <SPAN CLASS="cte">Selection.Range("B1")</SPAN> returns cell D3 because it's relative to the <SPAN CLASS="lee">Range</SPAN> object returned by the <SPAN CLASS="lee">Selection</SPAN> property. On the other hand, the code <SPAN CLASS="cte">ActiveSheet.Range("B1")</SPAN> always returns cell B1.</P>
Example</P>
This example sets the value of cell A1 on Sheet1 to 3.14159.</P>

<pre><code>Worksheets("Sheet1").Range("A1").Value = 3.14159</code></pre>
This example creates a formula in cell A1 on Sheet1.</P>

<pre><code>Worksheets("Sheet1").Range("A1").Formula = "=10*RAND()"</code></pre>
This example loops on cells A1:D10 on Sheet1. If one of the cells has a value less than 0.001, the code replaces that value with 0 (zero).</P>

<pre><code>For Each c in Worksheets("Sheet1").Range("A1:D10")
    If c.Value &lt; .001 Then
        c.Value = 0
    End If
Next c</code></pre>
This example loops on the range named "TestRange" and displays the number of empty cells in the range.</P>

<pre><code>numBlanks = 0
For Each c In Range("TestRange")
    If c.Value = "" Then
        numBlanks = numBlanks + 1
    End If
Next c
MsgBox "There are " &amp; numBlanks &amp; " empty cells in this range"</code></pre>
This example sets the font style in cells A1:C5 on Sheet1 to italic. The example uses Syntax 2 of the <SPAN CLASS="lee">Range</SPAN> property.</P>

<pre><code>Worksheets("Sheet1").Range(Cells(1, 1), Cells(5, 3)).Font.Italic = True</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

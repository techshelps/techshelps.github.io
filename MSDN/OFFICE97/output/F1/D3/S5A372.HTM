<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AddIn Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>AddIn Object</H1>Description</P>
Represents a single add-in, either installed or not installed. The <SPAN CLASS="lee">AddIn</SPAN> object is a member of the <SPAN CLASS="lee">AddIns </SPAN>collection. The <SPAN CLASS="lee">AddIns</SPAN> collection contains a list of all the add-ins available to Microsoft Excel, regardless of whether they're installed. This list corresponds to the list of add-ins displayed in the <SPAN CLASS="lee">Add-Ins</SPAN> dialog box (<SPAN CLASS="lee">Tools</SPAN> menu).</P>
Using the AddIn Object</P>
Use <SPAN CLASS="lee">AddIns</SPAN>(<SPAN CLASS="p">index</SPAN>), where <SPAN CLASS="p">index</SPAN> is the add-in title or index number, to return a single <SPAN CLASS="lee">AddIn</SPAN> object. The following example installs the Analysis Toolpak add-in.</P>

<pre><code>AddIns("analysis toolpak").Installed = True</code></pre>
Don't confuse the add-in title, which appears in the <SPAN CLASS="lee">Add-Ins</SPAN> dialog box, with the add-in name, which is the file name of the add-in. You must spell the add-in title exactly as it's spelled in the <SPAN CLASS="lee">Add-Ins</SPAN> dialog box, but the capitalization doesn't have to match.</P>
The index number represents the position of the add-in in the <SPAN CLASS="eln">Add-ins available</SPAN> box in the <SPAN CLASS="lee">Add-Ins</SPAN> dialog box. The following example creates a list that contains specified properties of the available add-ins.</P>

<pre><code>With Worksheets("sheet1")
    .Rows(1).Font.Bold = True
    .Range("a1:d1").Value = _
        Array("Name", "Full Name", "Title", "Installed")
    For i = 1 To AddIns.Count
        .Cells(i + 1, 1) = AddIns(i).Name
        .Cells(i + 1, 2) = AddIns(i).FullName
        .Cells(i + 1, 3) = AddIns(i).Title
        .Cells(i + 1, 4) = AddIns(i).Installed
    Next
    .Range("a1").CurrentRegion.Columns.AutoFit
End With</code></pre>
Remarks</P>
The <SPAN CLASS="lee">Add</SPAN> method adds an add-in to the list of available add-ins but doesn't install the add-in. Set the <SPAN CLASS="lee">Installed</SPAN> property of the add-in to <SPAN CLASS="lee">True</SPAN> to install the add-in. To install an add-in that doesn't appear in the list of available add-ins, you must first use the <SPAN CLASS="lee">Add</SPAN> method and then set the <SPAN CLASS="lee">Installed</SPAN> property. This can be done in a single step, as shown in the following example (note that you use the name of the add-in, not its title, with the <SPAN CLASS="lee">Add</SPAN> method).</P>

<pre><code>AddIns.Add("generic.xll").Installed = True</code></pre>
Use <SPAN CLASS="lee">Workbooks</SPAN>(<SPAN CLASS="p">index</SPAN>) where <SPAN CLASS="p">index</SPAN> is the add-in file name (not title) to return a reference to the workbook corresponding to a loaded add-in. You must use the file name because loaded add-ins don't normally appear in the <SPAN CLASS="lee">Workbooks</SPAN> collection. This example sets the <SPAN CLASS="cte">wb</SPAN> variable to the workbook for Myaddin.xla.</P>

<pre><code>Set wb = Workbooks("myaddin.xla")</code></pre>
The following example sets the wb variable to the workbook for the Analysis Toolpak add-in.</P>

<pre><code>Set wb = Workbooks(AddIns("analysis toolpak").Name)</code></pre>
If the <SPAN CLASS="lee">Installed</SPAN> property returns <SPAN CLASS="lee">True</SPAN>, but calls to functions in the add-in still fail, the add-in may not actually be loaded. This is because the <SPAN CLASS="lee">AddIn</SPAN> object represents the existence and installed state of the add-in but doesn't represent the actual contents of the add-in workbook. To guarantee that an installed add-in is loaded, you should open the add-in workbook. The following example opens the workbook for the add-in named "My Addin" if the add-in isn't already present in the <SPAN CLASS="lee">Workbooks</SPAN> collection.</P>

<pre><code>On Error Resume Next    ' turn off error checking
Set wbMyAddin = Workbooks(Addins("My Addin").Name)
lastError = Err
On Error Goto 0        ' restore error checking
If lastError &lt;&gt; 0 Then
    ' the add-in workbook isn't currently open. Manually open it.
    Set wbMyAddin = Workbooks.Open(Addins("My Addin").FullName)
End If</code></pre>
Properties</P>
<SPAN CLASS="eln">Application</SPAN> property, <SPAN CLASS="eln">Creator</SPAN> property, <SPAN CLASS="eln">FullName</SPAN> property, <SPAN CLASS="eln">Installed</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Parent</SPAN> property, <SPAN CLASS="eln">Path</SPAN> property.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

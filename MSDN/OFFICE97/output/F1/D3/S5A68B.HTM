<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OpenText Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>OpenText Method</H1>Applies To</P>
<SPAN CLASS="eln">Workbooks</SPAN> collection object.</P>
Description</P>
Loads and parses a text file as a new workbook with a single sheet that contains the parsed text-file data.</P>
Syntax</P>
<SPAN CLASS="p">expression</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="lee">OpenText</SPAN><SPAN CLASS="l">(</SPAN><SPAN CLASS="narg">Filename</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">Origin</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">StartRow</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">DataType</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">TextQualifier</SPAN><SPAN CLASS="l">, <BR></SPAN>ú<SPAN CLASS="narg">ConsecutiveDelimiter</SPAN><SPAN CLASS="l">,</SPAN><SPAN CLASS="narg"> Tab</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">Semicolon</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">Comma</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">Space</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">Other</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">OtherChar</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="narg">FieldInfo</SPAN><SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="p">expression</SPAN>   Required. An expression that returns a <SPAN CLASS="lee">Workbooks</SPAN> object.</P>
<SPAN CLASS="narg">Filename</SPAN>   Required <SPAN CLASS="lee">String</SPAN>. Specifies the file name of the text file to be opened and parsed.</P>
<SPAN CLASS="narg">Origin</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. Specifies the origin of the text file. Can be one of the following <SPAN CLASS="lee">XlPlatform</SPAN> constants: <SPAN CLASS="lee">xlMacintosh</SPAN>, <SPAN CLASS="lee">xlWindows</SPAN>, or <SPAN CLASS="lee">xlMSDOS</SPAN>. If this argument is omitted, the method uses the current setting of the <SPAN CLASS="lee">File</SPAN> <SPAN CLASS="lee">Origin</SPAN> option in the <SPAN CLASS="lee">Text</SPAN> <SPAN CLASS="lee">Import</SPAN> <SPAN CLASS="lee">Wizard</SPAN>.</P>
<SPAN CLASS="narg">StartRow</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. The row number at which to start parsing text. The default value is 1.</P>
<SPAN CLASS="narg">DataType</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. Specifies the column format of the data in the file. Can be one of the following <SPAN CLASS="lee">XlTextParsingType</SPAN> constants: <SPAN CLASS="lee">xlDelimited</SPAN> or <SPAN CLASS="lee">xlFixedWidth</SPAN>. The default value is <SPAN CLASS="lee">xlDelimited</SPAN>.</P>
<SPAN CLASS="narg">TextQualifier</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. Specifies the text qualifier. Can be one of the following <SPAN CLASS="lee">XlTextQualifier</SPAN> constants: <SPAN CLASS="lee">xlTextQualifierDoubleQuote</SPAN>, <SPAN CLASS="lee">xlTextQualifierSingleQuote</SPAN>, or <SPAN CLASS="lee">xlTextQualifierNone</SPAN>. The default value is <SPAN CLASS="lee">xlTextQualifierDoubleQuote</SPAN>.</P>
<SPAN CLASS="narg">ConsecutiveDelimiter</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. <SPAN CLASS="lee">True</SPAN> to have consecutive delimiters considered one delimiter. The default is <SPAN CLASS="lee">False</SPAN>.</P>
<SPAN CLASS="narg">Tab</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. <SPAN CLASS="lee">True</SPAN> to have the tab character be the delimiter (<SPAN CLASS="narg">DataType</SPAN> must be <SPAN CLASS="lee">xlDelimited</SPAN>). The default value is <SPAN CLASS="lee">False</SPAN>.</P>
<SPAN CLASS="narg">Semicolon</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. <SPAN CLASS="lee">True</SPAN> to have the semicolon character be the delimiter (<SPAN CLASS="narg">DataType</SPAN> must be <SPAN CLASS="lee">xlDelimited</SPAN>). The default value is <SPAN CLASS="lee">False</SPAN>.</P>
<SPAN CLASS="narg">Comma</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. <SPAN CLASS="lee">True</SPAN> to have the comma character be the delimiter (<SPAN CLASS="narg">DataType</SPAN> must be <SPAN CLASS="lee">xlDelimited</SPAN>). The default value is <SPAN CLASS="lee">False</SPAN>.</P>
<SPAN CLASS="narg">Space</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. <SPAN CLASS="lee">True</SPAN> to have the space character be the delimiter (<SPAN CLASS="narg">DataType</SPAN> must be <SPAN CLASS="lee">xlDelimited</SPAN>). The default value is <SPAN CLASS="lee">False</SPAN>.</P>
<SPAN CLASS="narg">Other</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. <SPAN CLASS="lee">True</SPAN> to have the character specified by the <SPAN CLASS="narg">OtherChar</SPAN> argument be the delimiter (<SPAN CLASS="narg">DataType</SPAN> must be <SPAN CLASS="lee">xlDelimited</SPAN>). The default value is <SPAN CLASS="lee">False</SPAN>.</P>
<SPAN CLASS="narg">OtherChar</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN> (required if <SPAN CLASS="narg">Other</SPAN> is <SPAN CLASS="lee">True</SPAN>). Specifies the delimiter character when <SPAN CLASS="narg">Other</SPAN> is <SPAN CLASS="lee">True</SPAN>. If more than one character is specified, only the first character of the string is used; the remaining characters are ignored.</P>
<SPAN CLASS="narg">FieldInfo</SPAN>   Optional <SPAN CLASS="lee">Variant</SPAN>. An array containing parse information for individual columns of data. The interpretation depends on the value of <SPAN CLASS="narg">DataType</SPAN>.</P>
When the data is delimited, this argument is an array of two-element arrays, with each two-element array specifying the conversion options for a particular column. The first element is the column number (1-based), and the second element is one of the following numbers, specifying how the column in parsed.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="275pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">1</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">General</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">2</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Text</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="275pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">3</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">MDY date</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">4</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">DMY date</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">5</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">YMD date</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">6</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">MYD date</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">7</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">DYM date</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">8</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">YDM date</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">9</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Skip the column</P></TD></TR></TBODY></TABLE>
<BR></P>The column specifiers can be in any order. If there's no column specifier for a particular column in the input data, the column is parsed with the General setting. This example causes the third column to be skipped, the first column to be parsed as text, and the remaining columns in the source data to be parsed with the General setting.</P>

<pre><code>Array(Array(3, 9), Array(1, 2))</code></pre>
If the source data has fixed-width columns, the first element in each two-element array specifies the position of the starting character in the column (as an integer; character 0 (zero) is the first character). The second element in the two-element array specifies the parse option for the column as a number between 1 and 9, as listed in the preceding table.</P>
The following example parses two columns from a fixed-width text file. The first column includes characters 1 through 10. Characters 11, 12, 13, 14, and 15 are skipped. The second column includes character 16 through the last character in the line.</P>

<pre><code>Array(Array(0, 1), Array(10, 9), Array(15, 1))</code></pre>
See Also</P>
<SPAN CLASS="eln">Close</SPAN> method, <SPAN CLASS="eln">Open</SPAN> method, <SPAN CLASS="eln">TextToColumns</SPAN> method.</P>
Example</P>
This example opens the file Data.txt and uses tab delimiters to parse the text file into a worksheet.</P>

<pre><code>Workbooks.OpenText filename:="Data.txt", _
    dataType:=xlDelimited, tab:=True</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

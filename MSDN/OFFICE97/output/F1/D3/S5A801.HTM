<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLRetrieveToFile Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>SQLRetrieveToFile Function</H1>Description</P>
Don't use <SPAN CLASS="lee">SQLRetrieveToFile</SPAN> and the other ODBC functions in the Xlodbc.xla add-in; use the objects, methods, and properties in the Data Access Objects (DAO) library instead.</P>
<SPAN CLASS="lee">SQLRetrieveToFile</SPAN> retrieves all the results from a previously executed query and places them in a file.</P>
To use this function, you must have established a connection with a data source by using <SPAN CLASS="lee">SQLOpen</SPAN>, executed a query by using <SPAN CLASS="lee">SQLExecQuery</SPAN>, and have the results of the query pending.</P>
This function is contained in the Xlodbc.xla add-in (ODBC Add-In on the Macintosh). Before you use the function, you must establish a reference to the add-in by using the <SPAN CLASS="eln">References</SPAN> command (<SPAN CLASS="eln">Tools</SPAN> menu).</P>
Syntax</P>
<SPAN CLASS="lee">SQLRetrieveToFile</SPAN><SPAN CLASS="l">(</SPAN><SPAN CLASS="narg">ConnectionNum,</SPAN> <SPAN CLASS="narg">Destination,</SPAN> <SPAN CLASS="narg">ColNamesLogical,</SPAN> <SPAN CLASS="narg">ColumnDelimiter</SPAN><SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="narg">ConnectionNum</SPAN>   Required. The unique connection ID returned by <SPAN CLASS="lee">SQLOpen</SPAN> and for which you have pending query results that were generated by <SPAN CLASS="lee">SQLExecQuery</SPAN>.</P>
If <SPAN CLASS="narg">ConnectionNum</SPAN> isn't valid, <SPAN CLASS="lee">SQLExecQuery</SPAN> returns Error 2015.</P>
<SPAN CLASS="narg">Destination</SPAN>   Required. A string that specifies the name and path of the file where you want to place the results. If the file exists, its contents are replaced with the query results. If the file doesn't exist, <SPAN CLASS="lee">SQLRetrieveToFile</SPAN> creates and opens the file and fills it with the results.</P>
The format of the data in the file is compatible with the Microsoft Excel .csv (comma-separated value) file format.</P>
Columns are separated by the character specified by <SPAN CLASS="narg">ColumnDelimiter</SPAN>, and the individual rows are separated by a carriage return.</P>
If the file specified by <SPAN CLASS="narg">Destination</SPAN> cannot be opened, <SPAN CLASS="lee">SQLRetrieveToFile</SPAN> returns Error 2042.</P>
<SPAN CLASS="narg">ColNamesLogical</SPAN>   Optional. <SPAN CLASS="lee">True</SPAN> to have the column names be returned as the first row of data. <SPAN CLASS="lee">False</SPAN> or omitted to have the column names not be returned.</P>
<SPAN CLASS="narg">ColumnDelimiter</SPAN>   Optional. A string that specifies the character used to separate the elements in each row. For example, use "," to specify a comma delimiter, or use ";" to specify a semicolon delimiter. If you omit <SPAN CLASS="narg">ColumnDelimiter</SPAN>, the list separator character is used.</P>
Return Value</P>
If successful, <SPAN CLASS="lee">SQLRetrieveToFile</SPAN> returns the query results, writes them to a file, and then returns the number of rows that were written to the file.</P>
If <SPAN CLASS="lee">SQLRetrieveToFile</SPAN> is unable to retrieve the results, it returns Error 2042 and doesn't write the file.</P>
If there are no pending results on the connection, <SPAN CLASS="lee">SQLRetrieveToFile</SPAN> returns Error 2042.</P>
Remarks</P>
Before calling <SPAN CLASS="lee">SQLRetrieveToFile</SPAN>, you must do the following:</P>
<SPAN CLASS="list"><OL><LI CLASS="OLI1">Establish a connection with a data source by using <SPAN CLASS="lee">SQLOpen</SPAN>.</LI><LI CLASS="OLI1">Use the connection ID returned by <SPAN CLASS="lee">SQLOpen</SPAN> to send a query with <SPAN CLASS="lee">SQLExecQuery</SPAN>.
</LI></OL></SPAN>See Also</P>
<SPAN CLASS="eln">SQLBind</SPAN> function, <SPAN CLASS="eln">SQLClose</SPAN> function, <SPAN CLASS="eln">SQLError</SPAN> function, <SPAN CLASS="eln">SQLExecQuery</SPAN> function, <SPAN CLASS="eln">SQLGetSchema</SPAN> function, <SPAN CLASS="eln">SQLOpen</SPAN> function, <SPAN CLASS="eln">SQLRequest</SPAN> function, <SPAN CLASS="eln">SQLRetrieve</SPAN> function.</P>
Example</P>
This example runs a query on the NWind sample database. The result of the query, which is a list of all products that are currently on order, is written as the delimited text file Output.txt in the current folder.</P>

<pre><code>If Application.OperatingSystem Like "*Win*" Then
    databaseName = "NWind"
Else            'Macintosh.
    databaseName = "NorthWind"
End If
queryString = "SELECT * FROM product.dbf WHERE (product.ON_ORDER&lt;&gt;0)"
chan = SQLOpen("DSN=" &amp; databaseName)
SQLExecQuery chan, queryString
SQLRetrieveToFile chan, "OUTPUT.TXT", True
SQLClose chan</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CacheSize Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CacheSize Property</H2>Applies To</P>
Dynamic-Type <SPAN CLASS="eln">Recordset</SPAN> object, Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">QueryDef</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Sets or returns the number of records retrieved from an <SPAN CLASS="pop">ODBC data source</SPAN> that will be cached locally.</P>
Settings and Return Values</P>
The setting or return value is a <SPAN CLASS="eln">Long</SPAN> value and must be between 5 and 1200, but not greater than available memory will allow. A typical value is 100. A setting of 0 turns off caching.</P>
Remarks</P>
Data caching improves performance if you use <SPAN CLASS="eln">Recordset</SPAN> objects to retrieve data from&nbsp;a&nbsp;remote server. A cache is a space in local memory that holds the data most recently retrieved from the server; this is useful if users request the data again while the application is running. When users request data, the <SPAN CLASS="pop">Microsoft Jet database engine</SPAN> checks the cache for the requested data first rather than retrieving it from the server, which takes more time. The cache only saves data that comes from an <SPAN CLASS="pop">ODBC data source</SPAN>.</P>
Any <SPAN CLASS="pop">Microsoft Jet-connected ODBC data source</SPAN>, such as a <SPAN CLASS="pop">linked table</SPAN>, can have a&nbsp;local cache. To create the cache, open a <SPAN CLASS="eln">Recordset</SPAN> object from the remote data source, set the <SPAN CLASS="eln">CacheSize</SPAN> and <SPAN CLASS="eln">CacheStart</SPAN> properties, and then use the <SPAN CLASS="eln">FillCache</SPAN> method, or step through the records by using the Move methods.</P>
An <SPAN CLASS="pop">ODBCDirect</SPAN> workspace can use a local cache. To create the cache, set the <B>CacheSize</B> property on a <B>QueryDef</B> object. On a <SPAN CLASS="eln">Relation</SPAN> object, <SPAN CLASS="eln">CacheSize</SPAN> is read-only and depends on the value of the <SPAN CLASS="eln">QueryDef</SPAN> object's <SPAN CLASS="eln">CacheSize</SPAN> property. You can't use the <SPAN CLASS="eln">CacheStart</SPAN> property on <SPAN CLASS="eln">FillCache</SPAN> method in an ODBCDirect workspace.</P>
You can base the <SPAN CLASS="eln">CacheSize</SPAN> property setting on the number of records your application can handle at one time. For example, if you're using a <SPAN CLASS="eln">Recordset</SPAN> object as the source of the data to be displayed on screen, you could set its <SPAN CLASS="eln">CacheSize</SPAN> property to 20 to display 20 records at one time.</P>
The Microsoft Jet database engine requests records within the cache range from the cache, and it requests records outside the cache range from the server.</P>
Records retrieved from the cache don't reflect concurrent changes that other users made to the source data.</P>
To force an update of all the cached data, set the <SPAN CLASS="eln">CacheSize</SPAN> property of the <SPAN CLASS="eln">Recordset</SPAN> object to 0, re-set it to the size of the cache you originally requested, and then use the <SPAN CLASS="eln">FillCache</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">Bookmark</SPAN> property, <SPAN CLASS="eln">Bookmarkable</SPAN> property, <SPAN CLASS="eln">FillCache</SPAN> method.</P>
Example</P>
This example uses the <SPAN CLASS="eln">CreateTableDef</SPAN> and <SPAN CLASS="eln">FillCache</SPAN> methods and the <SPAN CLASS="eln">CacheSize</SPAN>, <SPAN CLASS="eln">CacheStart</SPAN> and <SPAN CLASS="eln">SourceTableName</SPAN> properties to enumerate the records in a <SPAN CLASS="pop">linked table</SPAN> twice. Then it enumerates the records twice with a 50-record cache. The example then displays the performance statistics for the uncached and cached runs through the linked table.</P>

<pre><code>Sub ClientServerX3()

    Dim dbsCurrent As Database
    Dim tdfRoyalties As TableDef
    Dim rstRemote As Recordset
    Dim sngStart As Single
    Dim sngEnd As Single
    Dim sngNoCache As Single
    Dim sngCache As Single
    Dim intLoop As Integer
    Dim strTemp As String
    Dim intRecords As Integer

    ' Open a database to which a linked table can be
    ' appended.
    Set dbsCurrent = OpenDatabase("DB1.mdb")
    ' Create a linked table that connects to a Microsoft SQL
    ' Server database.
    Set tdfRoyalties = _
        dbsCurrent.CreateTableDef("Royalties")
    tdfRoyalties.Connect = _
        "ODBC;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers"
    tdfRoyalties.SourceTableName = "roysched"
    dbsCurrent.TableDefs.Append tdfRoyalties
    Set rstRemote = dbsCurrent.OpenRecordset("Royalties")

    With rstRemote
        ' Enumerate the Recordset object twice and record
        ' the elapsed time.
        sngStart = Timer

        For intLoop = 1 To 2
            .MoveFirst
            Do While Not .EOF
                ' Execute a simple operation for the
                ' performance test.
                strTemp = !title_id
                .MoveNext
            Loop
        Next intLoop

        sngEnd = Timer
        sngNoCache = sngEnd - sngStart

        ' Cache the first 50 records.
        .MoveFirst
        .CacheSize = 50
        .FillCache
        sngStart = Timer

        ' Enumerate the Recordset object twice and record
        ' the elapsed time.
        For intLoop = 1 To 2
            intRecords = 0
            .MoveFirst
            Do While Not .EOF
                ' Execute a simple operation for the
                ' performance test.
                strTemp = !title_id
                ' Count the records. If the end of the
                ' cache is reached, reset the cache to the
                ' next 50 records.
                intRecords = intRecords + 1
                .MoveNext
                If intRecords Mod 50 = 0 Then
                    .CacheStart = .Bookmark
                    .FillCache
                End If
            Loop
        Next intLoop
        sngEnd = Timer
        sngCache = sngEnd - sngStart

        ' Display performance results.
        MsgBox "Caching Performance Results:" &amp; vbCr &amp; _
            "    No cache: " &amp; Format(sngNoCache, _
            "##0.000") &amp; " seconds" &amp; vbCr &amp; _
            "    50-record cache: " &amp; Format(sngCache, _
            "##0.000") &amp; " seconds"
        .Close
    End With

    ' Delete linked table because this is a demonstration.
    dbsCurrent.TableDefs.Delete tdfRoyalties.Name
    dbsCurrent.Close

End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Close Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Close Method</H2>Applies To</P>
<SPAN CLASS="eln">Connection</SPAN> object, <SPAN CLASS="eln">Database</SPAN> object, Dynamic-Type <SPAN CLASS="eln">Recordset</SPAN> object, Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, Forward-Only–Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">QueryDef</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Workspace</SPAN> object.</P>
Description</P>
Closes an open <SPAN CLASS="pop">DAO object</SPAN>.</P>
Syntax</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.Close</SPAN></P>
The <SPAN CLASS="p">object</SPAN> placeholder is an <SPAN CLASS="pop">object variable</SPAN> that represents an open Connection, Database, Recordset, or Workspace object.</P>
Remarks</P>
Closing an open object removes it from the collection to which it's appended. Any attempt to close the <SPAN CLASS="pop">default workspace</SPAN> is ignored.</P>
If the <B>Connection</B>, <SPAN CLASS="eln">Database</SPAN>, <SPAN CLASS="eln">Recordset</SPAN>, or <SPAN CLASS="eln">Workspace </SPAN>object named by <SPAN CLASS="p">object</SPAN> is already closed when you use <SPAN CLASS="eln">Close</SPAN>, a run-time error occurs.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>   If you exit a procedure that declares <B>Connection</B>, <B>Database</B>, or <SPAN CLASS="eln">Recordset </SPAN>objects, those objects are closed, all pending transactions are rolled back, and any pending edits to your data are lost.</P>
<HR CLASS="cae">
If you try to close a <B>Connection</B> or <SPAN CLASS="eln">Database</SPAN> object while it has any open <B>Recordset</B> objects, the <SPAN CLASS="eln">Recordset</SPAN> objects will be closed and any pending updates or edits will be canceled. Similarly, if you try to close a <SPAN CLASS="eln">Workspace</SPAN> object while it has any open <B>Connection</B> or <SPAN CLASS="eln">Database</SPAN> objects, those <B>Connection</B> and <SPAN CLASS="eln">Database</SPAN> objects will be closed, which will close their <SPAN CLASS="eln">Recordset</SPAN> objects.</P>
Using the <SPAN CLASS="eln">Close </SPAN>method on either an original or cloned <B>Recordset</B> object doesn't affect the other <B>Recordset</B> object.</P>
To remove objects from updatable collections other than the <B>Connections</B>, <SPAN CLASS="eln">Databases</SPAN>, <SPAN CLASS="eln">Recordsets</SPAN>, and <SPAN CLASS="eln">Workspaces</SPAN> collections, use the <SPAN CLASS="eln">Delete</SPAN> method on those collections. You can't add a new member to the <B>Containers</B>, <B>Documents</B>, and <B>Errors</B> collections.</P>
An alternative to the <SPAN CLASS="eln">Close</SPAN> method is to set the value of an object variable to <SPAN CLASS="eln">Nothing</SPAN> (<SPAN CLASS="cte">Set dbsTemp = Nothing</SPAN>).</P>
See Also</P>
<SPAN CLASS="eln">Clone</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">OpenDatabase</SPAN> method, <SPAN CLASS="eln">OpenRecordset</SPAN> method.</P>
Specifics (Microsoft Access)</P>
If a Visual&nbsp;Basic procedure contains an object variable that represents the database currently open in Microsoft Access, using the <SPAN CLASS="eln">Close</SPAN> method on that object causes the variable to go out of scope. The <SPAN CLASS="eln">Close</SPAN> method will not affect the database that is open in the Microsoft Access <SPAN CLASS="pop">Database window</SPAN>.</P>
Example</P>
This example uses the <SPAN CLASS="eln">Close</SPAN> method on both <SPAN CLASS="eln">Recordset</SPAN> and <SPAN CLASS="eln">Database</SPAN> objects that have been opened. It also demonstrates how closing a <SPAN CLASS="eln">Recordset</SPAN> will cause unsaved changes to be lost.</P>

<pre><code>Sub CloseX()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstEmployees = dbsNorthwind.OpenRecordset("Employees")

    ' Make changes to a record but close the recordset before
    ' saving the changes.
    With rstEmployees
        Debug.Print "Original data"
        Debug.Print "    Name - Extension"
        Debug.Print "    " &amp; !FirstName &amp; " " &amp; _
            !LastName &amp; " - " &amp; !Extension
        .Edit
        !Extension = "9999"
        .Close
    End With

    ' Reopen Recordset to show that the data hasn't
    ' changed.
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees")

    With rstEmployees
        Debug.Print "Data after Close"
        Debug.Print "    Name - Extension"
        Debug.Print "    " &amp; !FirstName &amp; " " &amp; _
            !LastName &amp; " - " &amp; !Extension
        .Close
    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example creates a <SPAN CLASS="eln">Database</SPAN> object that points to the current database and opens a table-type <SPAN CLASS="eln">Recordset</SPAN> object based on a Customers table in the database. The procedure uses the <SPAN CLASS="eln">Close</SPAN> method on the <SPAN CLASS="eln">Recordset </SPAN>object variable to free the memory resources it has been using. It uses the <SPAN CLASS="eln">Set </SPAN>statement with the <SPAN CLASS="eln">Nothing </SPAN>keyword to free resources used by the <SPAN CLASS="eln">Database </SPAN>object variable.</P>
You can also use the <SPAN CLASS="eln">Close </SPAN>method of the <SPAN CLASS="eln">Database </SPAN>object to close it and free memory. The <SPAN CLASS="eln">Close</SPAN> method of the <SPAN CLASS="eln">Database</SPAN> object doesn't actually close the database that's open in Microsoft Access; it only frees the resources used by the <SPAN CLASS="eln">Database</SPAN> object variable.</P>
Using an object's <SPAN CLASS="eln">Close</SPAN> method and setting the object variable to <SPAN CLASS="eln">Nothing</SPAN> are equivalent ways to free memory.</P>

<pre><code>Sub UseClose()
    Dim dbs As Database, rst As Recordset

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create table-type recordset.
    Set rst = dbs.OpenRecordset("Customers")
    .
    .
    .
    ' Close recordset to free memory.
    rst.Close    
    ' Free memory used by object variable.
    Set dbs = Nothing
End Sub</code></pre>
Example (Microsoft Excel)</P>
This example opens the Customer recordset of the Nwindex.mdb database, counts how many records are available, and enters this number on Sheet1.</P>
To create the Nwindex.mdb database, run the Microsoft Excel example for the <SPAN CLASS="lee">CreateDatabase</SPAN> method.</P>

<pre><code>Dim db As Database, rs As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set rs = db.OpenRecordset("Customer")
Set resultsSheet = Sheets("Sheet1")
resultsSheet.Activate
With resultsSheet.Cells(1, 1)
    .Value = "Records in " &amp; rs.Name &amp; " table:"
    .Font.Bold = True
    .EntireColumn.AutoFit
End With
rs.MoveLast
resultsSheet.Cells(1, 2).Value = rs.RecordCount
rs.Close
db.Close</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

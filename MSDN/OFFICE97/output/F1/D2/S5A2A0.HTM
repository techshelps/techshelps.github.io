<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Edit Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Edit Method</H1>Applies To</P>
Dynamic-Type <SPAN CLASS="eln">Recordset</SPAN> object, Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, Forward-Only–Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Copies the <SPAN CLASS="pop">current record</SPAN> from an updatable Recordset object to the <SPAN CLASS="pop">copy buffer</SPAN> for subsequent editing.</P>
Syntax</P>
<SPAN CLASS="p">recordset</SPAN><SPAN CLASS="eln">.Edit</SPAN></P>
The <SPAN CLASS="p">recordset</SPAN> placeholder represents an open, updatable <SPAN CLASS="eln">Recordset</SPAN> object that contains the record you want to edit.</P>
Remarks</P>
Once you use the <SPAN CLASS="eln">Edit</SPAN> method, changes made to the current record's fields are copied to the copy buffer. After you make the desired changes to the record, use the <SPAN CLASS="eln">Update</SPAN> method to save your changes.</P>
The current record remains current after you use <SPAN CLASS="eln">Edit</SPAN>.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>   If you edit a record and then perform any operation that moves to another record, but without first using <SPAN CLASS="eln">Update</SPAN>, your changes are lost without warning. In addition, if you close <SPAN CLASS="p">recordset</SPAN> or end the procedure which declares the <SPAN CLASS="eln">Recordset</SPAN> or the parent Database or <SPAN CLASS="eln">Connection</SPAN> object, your edited record is discarded without warning.</P>
<HR CLASS="cae">
Using <SPAN CLASS="eln">Edit</SPAN> produces an error if:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">There is no current record.</LI><LI CLASS="ULI1">The <SPAN CLASS="eln">Connection</SPAN>, <SPAN CLASS="eln">Database</SPAN>, or <B>Recordset</B> object was opened as read-only.</LI><LI CLASS="ULI1">No fields in the record are updatable.</LI><LI CLASS="ULI1">The <B>Database</B> or <B>Recordset</B> was opened for exclusive use by another user (<SPAN CLASS="pop">Microsoft Jet workspace</SPAN>).</LI><LI CLASS="ULI1">Another user has locked the page containing your record (Microsoft Jet workspace).
</LI></UL></SPAN>In a Microsoft Jet workspace, when the <SPAN CLASS="eln">Recordset</SPAN> object's LockEdits property setting is <SPAN CLASS="eln">True</SPAN> (<SPAN CLASS="pop">pessimistically</SPAN> locked) in a multiuser environment, the record remains&nbsp;locked from the time <SPAN CLASS="eln">Edit</SPAN> is used until the update is complete. If the <SPAN CLASS="eln">LockEdits</SPAN> property setting is <SPAN CLASS="eln">False</SPAN> (<SPAN CLASS="pop">optimistically</SPAN> locked), the record is locked and compared with the pre-edited record just before it's updated in the database. If the record has changed since you used the <SPAN CLASS="eln">Edit</SPAN> method, the <SPAN CLASS="eln">Update</SPAN> operation fails with a&nbsp;run-time error if you use <SPAN CLASS="eln">OpenRecordset</SPAN> without specifying <SPAN CLASS="eln">dbSeeChanges</SPAN>. By default, Microsoft Jet-connected <SPAN CLASS="pop">ODBC</SPAN> and <SPAN CLASS="pop">installable ISAM</SPAN> databases always use optimistic locking.</P>
In an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>, once you edit (and use <B>Update </B>to update) a record's <SPAN CLASS="pop">primary key</SPAN> field, you can no longer edit fields in that record until you close the <B>Recordset</B>, and then retrieve the record again in a subsequent query.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;To add, edit, or delete a record, there must be a unique index on the record in the underlying data source. If not, a "Permission denied" error will occur on the AddNew, Delete, or <SPAN CLASS="eln">Edit</SPAN> method call in a Microsoft Jet workspace, or an "Invalid argument" error will occur on the <SPAN CLASS="eln">Update</SPAN> call in an ODBCDirect workspace.</P>
See Also</P>
<SPAN CLASS="eln">AddNew</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">LockEdits</SPAN> property.</P>
Example</P>
This example uses the <SPAN CLASS="eln">Edit</SPAN> method to replace the current data with the specified name. The EditName procedure is required for this procedure to run.</P>

<pre><code>Sub EditX()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset
    Dim strOldFirst As String
    Dim strOldLast As String
    Dim strFirstName As String
    Dim strLastName As String

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees", dbOpenDynaset)

    ' Store original data.
    strOldFirst = rstEmployees!FirstName
    strOldLast = rstEmployees!LastName

    ' Get new data for record.
    strFirstName = Trim(InputBox("Enter first name:"))
    strLastName = Trim(InputBox("Enter last name:"))

    ' Proceed if the user entered something for both fields.
    If strFirstName &lt;&gt; "" and strLastName &lt;&gt; "" Then
        ' Update record with new data.
        EditName rstEmployees, strFirstName, strLastName

        With rstEmployees
            ' Show old and new data.
            Debug.Print "Old data: " &amp; strOldFirst &amp; " " &amp; strOldLast
            Debug.Print "New data: " &amp; !FirstName &amp; " " &amp; !LastName
            ' Restore original data because this is a
            ' demonstration.
            .Edit
            !FirstName = strOldFirst
            !LastName = strOldLast
            .Update
        End With

    Else
        Debug.Print         "You must input a string for first and last name!"
    End If

    rstEmployees.Close
    dbsNorthwind.Close

End Sub

Sub EditName(rstTemp As Recordset, _
    strFirst As String, strLast As String)

    ' Make changes to record and set the bookmark to keep
    ' the same record current.
    With rstTemp
        .Edit
        !FirstName = strFirst
        !LastName = strLast
        .Update
        .Bookmark = .LastModified
    End With

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example opens a <SPAN CLASS="eln">Recordset</SPAN> object and locates each record satisfying the search criteria for the Title field. The procedure then uses the <SPAN CLASS="eln">Edit</SPAN> method to prepare the record for subsequent editing, changes the job title, and saves the change.</P>

<pre><code>Sub ChangeTitle()
    Dim dbs As Database, rst As Recordset
    Dim strCriteria As String, strNewTitle As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Set search criteria.
    strCriteria = "Title = 'Sales Representative'"
    strNewTitle = "Account Executive"
    ' Create dynaset-type Recordset object.
    Set rst = dbs.OpenRecordset("Employees", dbOpenDynaset)
    ' Find first occurrence.
    rst.FindFirst strCriteria
    ' Loop until no matching records.
    Do Until rst.NoMatch
        With rst
            .Edit                            ' Enable editing.
            !Title = strNewTitle        ' Change title.
            .Update                        ' Save changes.
            .FindNext strCriteria    ' Find next occurrence.
        End With
    Loop
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
<SPAN CLASS="nh">Tip</SPAN>&nbsp;&nbsp;&nbsp;Using an update query to alter data is more efficient. For example, you can use the following code to achieve the same results:</P>

<pre><code>Sub ChangeTitleSQL()
    Dim dbs As Database
    Dim strSQL As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create SQL string.
    strSQL = "UPDATE Employees SET Title = 'Account Executive' " _
        &amp; "WHERE Title = 'Sales Representative' "
    ' Run action query.
    dbs.Execute strSQL
    ' Return number of records updated.
    Debug.Print dbs.RecordsAffected
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

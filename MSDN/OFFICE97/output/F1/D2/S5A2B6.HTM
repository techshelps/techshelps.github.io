<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IgnoreNulls Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>IgnoreNulls Property</H1>Applies To</P>
<SPAN CLASS="eln">Index</SPAN> object.</P>
Description</P>
Sets or returns a value that indicates whether records that have <SPAN CLASS="eln">Null</SPAN> values in their index fields have <SPAN CLASS="pop">index</SPAN> entries (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Settings and Return Values</P>
The setting or return value is a Boolean that is <SPAN CLASS="eln">True</SPAN> if the fields with <SPAN CLASS="eln">Null</SPAN> values don't have an index entry. This property is read/write for a new Index object not yet appended to a collection and read-only for an existing <SPAN CLASS="eln">Index</SPAN> object in an Indexes collection.</P>
Remarks</P>
To speed up the process of searching for records, you can define an index for a field. If you allow <SPAN CLASS="eln">Null</SPAN> entries in an indexed field and expect many of the entries to be <SPAN CLASS="eln">Null</SPAN>, you can set the <SPAN CLASS="eln">IgnoreNulls</SPAN> property for the <SPAN CLASS="eln">Index</SPAN> object to <SPAN CLASS="eln">True</SPAN> to reduce the amount of storage space that the index uses.</P>
The <SPAN CLASS="eln">IgnoreNulls </SPAN>property setting and the <SPAN CLASS="eln">Required</SPAN> property setting together determine whether a record with a <SPAN CLASS="eln">Null</SPAN> index value has an index entry.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="120pt" VALIGN="TOP"><COL WIDTH="120pt" VALIGN="TOP"><COL WIDTH="120pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">If IgnoreNulls is</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">And Required is</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Then</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">True</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">False</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Null</SPAN> value is allowed in the index field; no index entry added.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">False</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">False</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Null</SPAN> value is allowed in the index field; index entry added.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">True</SPAN> or <SPAN CLASS="eln">False</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">True</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Null</SPAN> value isn't allowed in the index field; no index entry added.</P></TD></TR></TBODY></TABLE>
<BR></P>See Also</P>
<SPAN CLASS="eln">Required</SPAN> property.</P>
Example</P>
This example sets the <SPAN CLASS="eln">IgnoreNulls</SPAN> property of a new <SPAN CLASS="eln">Index</SPAN> to <SPAN CLASS="eln">True</SPAN> or <SPAN CLASS="eln">False</SPAN> based on user input, and then demonstrates the effect on a <SPAN CLASS="eln">Recordset</SPAN> with a record whose key field contains a <SPAN CLASS="eln">Null</SPAN> value.</P>

<pre><code>Sub IgnoreNullsX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim idxNew As Index
    Dim rstEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set tdfEmployees = dbsNorthwind!Employees

    With tdfEmployees
        ' Create a new Index object.
        Set idxNew = .CreateIndex("NewIndex")
        idxNew.Fields.Append idxNew.CreateField("Country")

        ' Set the IgnoreNulls property of the new Index object
        ' based on the user's input.
        Select Case MsgBox("Set IgnoreNulls to True?", _
            vbYesNoCancel)
            Case vbYes
                idxNew.IgnoreNulls = True
            Case vbNo
                idxNew.IgnoreNulls = False
            Case Else
                dbsNorthwind.Close
                End
        End Select

        ' Append the new Index object to the Indexes
        ' collection of the Employees table.
        .Indexes.Append idxNew
        .Indexes.Refresh
    End With

    Set rstEmployees = dbsNorthwind.OpenRecordset("Employees")

    With rstEmployees
        ' Add a new record to the Employees table.
        .AddNew
        !FirstName = "Gary"
        !LastName = "Haarsager"
        .Update

        ' Use the new index to set the order of the records.
        .Index = idxNew.Name
        .MoveFirst

        Debug.Print "Index = " &amp; .Index &amp; _
            ", IgnoreNulls = " &amp; idxNew.IgnoreNulls
        Debug.Print "    Country - Name"

        ' Enumerate the Recordset. The value of the
        ' IgnoreNulls property will determine if the newly
        ' added record appears in the output.
        Do While Not .EOF
            Debug.Print "        " &amp; _
                IIf(IsNull(!Country), "[Null]", !Country) &amp; _
                " - " &amp; !FirstName &amp; " " &amp; !LastName
            .MoveNext
        Loop

        ' Delete new record because this is a demonstration.
        .Index = ""
        .Bookmark = .LastModified
        .Delete
        .Close
    End With

    ' Delete new Index because this is a demonstration.
    tdfEmployees.Indexes.Delete idxNew.Name
    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example adds a new index to a <SPAN CLASS="eln">TableDef</SPAN> object and sets the <SPAN CLASS="eln">IgnoreNulls</SPAN> and <SPAN CLASS="eln">Unique</SPAN> properties to <SPAN CLASS="eln">True</SPAN> (–1):</P>

<pre><code>Sub NewIndex()
    Dim dbs As Database, tdf As TableDef
    Dim idx As Index, fldID As Field, fldName As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Products table.
    Set tdf = dbs.TableDefs!Products
    ' Return Index object that points to new index.
    Set idx = tdf.CreateIndex("IDName")
    ' Create and append index fields.
    Set fldID = idx.CreateField("ProductID")
    Set fldName = idx.CreateField("ProductName")
    idx.Fields.Append fldID
    idx.Fields.Append fldName
    ' Set index properties.
    idx.IgnoreNulls = True
    idx.Unique = True
    ' Append new Index object to Indexes collection.
    tdf.Indexes.Append idx
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

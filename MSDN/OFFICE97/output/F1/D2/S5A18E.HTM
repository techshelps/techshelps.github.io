<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OpenModule Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>OpenModule Method</H2>Applies To</P>
<SPAN CLASS="eln">DoCmd</SPAN> object.</P>
Description</P>
The <SPAN CLASS="eln">OpenModule</SPAN> method carries out the <SPAN CLASS="jump">OpenModule</SPAN> action in Visual Basic. For more information on how the action and its arguments work, see the action topic.</P>
Syntax</P>
<SPAN CLASS="l">DoCmd.OpenModule </SPAN>[<SPAN CLASS="p">modulename</SPAN>][<SPAN CLASS="l">, </SPAN><SPAN CLASS="p">procedurename</SPAN>]</P>
The <SPAN CLASS="eln">OpenModule</SPAN> method has the following arguments.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="277pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">modulename</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="pop">string expression</SPAN> that's the valid name of the Visual Basic module you want to open. If you leave this argument blank, Microsoft Access searches all the <SPAN CLASS="pop">standard modules</SPAN> in the database for the procedure you selected with the <SPAN CLASS="p">procedurename</SPAN> argument and opens the module containing the procedure to that procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">If you execute Visual Basic code containing the <SPAN CLASS="eln">OpenModule</SPAN> method in a <SPAN CLASS="pop">library database</SPAN>, Microsoft Access looks for the <SPAN CLASS="pop">module</SPAN> with this name first in the library database, then in the current database.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="277pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">procedurename</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A string expression that's the valid name for the procedure you want to open the module to. If you leave this argument blank, the module opens to the <SPAN CLASS="pop">Declarations section</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You must include at least one of the two OpenModule action arguments. If you enter a value for both arguments, Microsoft Access opens the specified module at the specified procedure.</P>
If you leave the <SPAN CLASS="p">procedurename</SPAN> argument blank, don't use a comma following the <SPAN CLASS="p">modulename</SPAN> argument.</P>
See Also</P>
<SPAN CLASS="eln">DoCmd</SPAN> object, OpenModule action, RunCode action.</P>
Example</P>
The following example opens the Utility Functions module to the IsLoaded( ) <SPAN CLASS="eln">Function</SPAN> procedure:</P>

<pre><code>DoCmd.OpenModule "Utility Functions","IsLoaded"</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dynaset-Type Recordset Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Dynaset-Type Recordset Object</H1>Description</P>
A dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object is a dynamic set of records that can contain fields from one or more tables or queries in a database and may be updatable. In an <SPAN CLASS="pop">ODBCDirect</SPAN> database, a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object corresponds to an ODBC <SPAN CLASS="pop">keyset cursor</SPAN>.</P>
Remarks</P>
A dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object is a type of <SPAN CLASS="eln">Recordset</SPAN> object you can use to manipulate data in an underlying database table or tables.</P>
It differs from a <SPAN CLASS="jump">snapshot-type </SPAN>Recordset object because the dynaset stores only the primary key for each record, instead of actual data. As a result, a dynaset is updated with changes made to the source data, while the snapshot is not. Like the <SPAN CLASS="jump">table-type </SPAN>Recordset object, a dynaset retrieves the full record only when it's needed for editing or display purposes.</P>
To create a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object, use the OpenRecordset method on an open database, against another dynaset- or snapshot-type <SPAN CLASS="eln">Recordset</SPAN> object, on a QueryDef object, or on a TableDef object. (Opening <SPAN CLASS="eln">Recordset</SPAN> objects on other <SPAN CLASS="eln">Recordset</SPAN> objects or <SPAN CLASS="eln">TableDef</SPAN> objects is available only in <SPAN CLASS="pop">Microsoft Jet workspaces</SPAN>.)</P>
If you request a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object and the <SPAN CLASS="pop">Microsoft Jet database engine</SPAN> can't gain read/write access to the records, the Microsoft Jet database engine may create a read-only, dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
As users update data, the <SPAN CLASS="pop">base tables</SPAN> reflects these changes. Therefore, current data is available to your application when you reposition the current record. In a <SPAN CLASS="pop">multiuser database</SPAN>, more than one user can open a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object referring to the same records. Because a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object is dynamic, when one user changes a record, other users have immediate access to the changed data. However, if one user adds a record, other users won't see the new record until they use the Requery method on the <SPAN CLASS="eln">Recordset</SPAN> object. If a user deletes a record, other users are notified when they try to access it.</P>
Records added to the database don't become a part of your dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object unless you add them by using the AddNew and Update methods. For example, if you use an <SPAN CLASS="pop">action query</SPAN> containing an INSERT INTO <SPAN CLASS="pop">SQL statement</SPAN> to add records, the new records aren't included in your dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object until you either use the <SPAN CLASS="eln">Requery</SPAN> method or you rebuild your <SPAN CLASS="eln">Recordset</SPAN> object using the <SPAN CLASS="eln">OpenRecordset</SPAN> method.</P>
To maintain data integrity, the Microsoft Jet database engine can <SPAN CLASS="pop">lock</SPAN> dynaset- and table-type <SPAN CLASS="eln">Recordset</SPAN> objects during Edit (<SPAN CLASS="pop">pessimistic</SPAN> locking) or <SPAN CLASS="eln">Update</SPAN> operations (<SPAN CLASS="pop">optimistic</SPAN> locking) so that only one user can update a particular record at a time. When the Microsoft Jet database engine locks a record, it locks the entire 2K <SPAN CLASS="pop">page</SPAN> containing the record.</P>
You can also use optimistic and pessimistic locking with non-ODBC tables. When you access external tables using <SPAN CLASS="pop">ODBC</SPAN> through a Microsoft Jet workspace, you should always use optimistic locking. The LockEdits property and the <SPAN CLASS="p">lockedits</SPAN> parameter of the <SPAN CLASS="eln">OpenRecordset</SPAN> method determine the locking conditions during editing.</P>
Not all fields can be updated in all dynaset-type <SPAN CLASS="eln">Recordset</SPAN> objects. To determine whether you can update a particular field, check the DataUpdatable property setting of the Field object.</P>
A dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object may not be updatable if:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">There isn't a unique <SPAN CLASS="pop">index</SPAN> on the ODBC or Paradox table or tables.</LI><LI CLASS="ULI1">The data page is locked by another user.</LI><LI CLASS="ULI1">The record has changed since you last read it.</LI><LI CLASS="ULI1">The user doesn't have <SPAN CLASS="pop">permission</SPAN>.</LI><LI CLASS="ULI1">One or more of the tables or fields are read-only.</LI><LI CLASS="ULI1">The database is opened as read-only.</LI><LI CLASS="ULI1">The <SPAN CLASS="eln">Recordset</SPAN> object was either created from multiple tables without a JOIN statement or the query was too complex.
</LI></UL></SPAN>The order of a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object or <SPAN CLASS="eln">Recordset</SPAN> data doesn't necessarily follow any specific sequence. If you need to order your data, use an SQL statement with an ORDER BY clause to create the <SPAN CLASS="eln">Recordset</SPAN> object. You can also use a WHERE clause to filter the records so that only certain records are added to the <SPAN CLASS="eln">Recordset</SPAN> object. Using SQL statements in this way to select a subset of records and order them usually results in faster access to your data than using the <SPAN CLASS="eln">Filter</SPAN> and <SPAN CLASS="eln">Sort</SPAN> properties.</P>
Properties</P>
<SPAN CLASS="eln">AbsolutePosition</SPAN> property, <SPAN CLASS="eln">BatchCollisionCount</SPAN> property, <SPAN CLASS="eln">BatchCollisions</SPAN> property, <SPAN CLASS="eln">BatchSize</SPAN> property, <SPAN CLASS="eln">BOF</SPAN>, <SPAN CLASS="eln">EOF</SPAN> properties, <SPAN CLASS="eln">Bookmark</SPAN> property, <SPAN CLASS="eln">Bookmarkable</SPAN> property, <SPAN CLASS="eln">CacheSize</SPAN> property, <SPAN CLASS="eln">CacheStart</SPAN> property, <SPAN CLASS="eln">Connection</SPAN> property, <SPAN CLASS="eln">EditMode</SPAN> property, <SPAN CLASS="eln">Filter</SPAN> property, <SPAN CLASS="eln">LastModified</SPAN> property, <SPAN CLASS="eln">LockEdits</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">NoMatch</SPAN> property, <SPAN CLASS="eln">PercentPosition</SPAN> property, <SPAN CLASS="eln">RecordCount</SPAN> property, <SPAN CLASS="eln">RecordStatus</SPAN> property, <SPAN CLASS="eln">Restartable</SPAN> property, <SPAN CLASS="eln">Sort</SPAN> property, <SPAN CLASS="eln">StillExecuting</SPAN> property, <SPAN CLASS="eln">Transactions</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">Updatable</SPAN> property, <SPAN CLASS="eln">UpdateOptions</SPAN> property, <SPAN CLASS="eln">ValidationRule</SPAN> property, <SPAN CLASS="eln">ValidationText</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">AddNew</SPAN> method, <SPAN CLASS="eln">Cancel</SPAN> method, <SPAN CLASS="eln">CancelUpdate</SPAN> method, <SPAN CLASS="eln">Clone</SPAN> method, <SPAN CLASS="eln">Close</SPAN> method, <SPAN CLASS="eln">CopyQueryDef</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Edit</SPAN> method, <SPAN CLASS="eln">FillCache</SPAN> method, <SPAN CLASS="eln">FindFirst</SPAN>, <SPAN CLASS="eln">FindLast</SPAN>, <SPAN CLASS="eln">FindNext</SPAN>, <SPAN CLASS="eln">FindPrevious</SPAN> methods, <SPAN CLASS="eln">GetRows</SPAN> method, <SPAN CLASS="eln">Move</SPAN> method, <SPAN CLASS="eln">MoveFirst</SPAN>, <SPAN CLASS="eln">MoveLast</SPAN>, <SPAN CLASS="eln">MoveNext</SPAN>, <SPAN CLASS="eln">MovePrevious</SPAN> methods, <SPAN CLASS="eln">NextRecordset</SPAN> method, <SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">Requery</SPAN> method, <SPAN CLASS="eln">Update</SPAN> method.</P>
See Also</P>
Forward-Only–Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Example</P>
This example opens a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> and shows the extent to which its fields are updatable.</P>

<pre><code>Sub dbOpenDynasetX()

    Dim dbsNorthwind As Database
    Dim rstInvoices As Recordset
    Dim fldLoop As Field

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstInvoices = _
        dbsNorthwind.OpenRecordset("Invoices", dbOpenDynaset)

    With rstInvoices
        Debug.Print "Dynaset-type recordset: " &amp; .Name

        If .Updatable Then
            Debug.Print "    Updatable fields:"

            ' Enumerate Fields collection of dynaset-type
            ' Recordset object, print only updatable
            ' fields.
            For Each fldLoop In .Fields
                If fldLoop.DataUpdatable Then
                    Debug.Print "        " &amp; fldLoop.Name
                End If
            Next fldLoop

        End If
        .Close
    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example creates a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object, then checks the <SPAN CLASS="eln">Updatable</SPAN> property of the <SPAN CLASS="eln">Recordset</SPAN> object:</P>

<pre><code>Sub RecentHires()
    Dim dbs As Database, rst As Recordset
    Dim strSQL As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Open recordset on Employees table.
    Set rst = dbs.OpenRecordset("Employees", dbOpenDynaset)
    Debug.Print rst.Updatable
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BeginTrans, CommitTrans, Rollback Methods</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>BeginTrans, CommitTrans, Rollback Methods</H2>Applies To</P>
<SPAN CLASS="eln">DBEngine</SPAN> object, <SPAN CLASS="eln">Workspace</SPAN> object.</P>
Description</P>
The transaction methods manage <SPAN CLASS="pop">transaction</SPAN> processing during a <SPAN CLASS="pop">session</SPAN> defined by a Workspace object as follows:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">BeginTrans</SPAN> begins a new transaction.</LI><LI CLASS="ULI1"><SPAN CLASS="eln">CommitTrans</SPAN> ends the <SPAN CLASS="pop">current transaction</SPAN> and saves the changes.</LI><LI CLASS="ULI1"><SPAN CLASS="eln">Rollback</SPAN> ends the current transaction and restores the databases in the <SPAN CLASS="eln">Workspace</SPAN> object to the state they were in when the current transaction began.
</LI></UL></SPAN>Syntax</P>
<SPAN CLASS="p">workspace</SPAN><SPAN CLASS="eln">.BeginTrans | CommitTrans </SPAN><SPAN CLASS="eln">[</SPAN><B>dbFlushOSCacheWrites</B>]<B> </B><SPAN CLASS="eln">| Rollback</SPAN></P>
The <SPAN CLASS="p">workspace</SPAN> placeholder is an <SPAN CLASS="pop">object variable</SPAN> that represents the <SPAN CLASS="eln">Workspace </SPAN>containing the databases that will use transactions.</P>
Remarks</P>
You use these methods with a <SPAN CLASS="eln">Workspace</SPAN> object when you want to treat a series of changes made to the databases in a session as one unit.</P>
Typically, you use transactions to maintain the integrity of your data when you must&nbsp;both <SPAN CLASS="pop">update</SPAN> records in two or more tables and ensure changes are completed (committed) in all tables or none at all (rolled back). For example, if you transfer money from one account to another, you might subtract an amount from one and add the amount to another. If either update fails, the accounts no longer balance. Use the <SPAN CLASS="eln">BeginTrans</SPAN> method before updating the first record, and then, if any subsequent update fails, you can use the <SPAN CLASS="eln">Rollback</SPAN> method to undo all of the updates. Use the <SPAN CLASS="eln">CommitTrans</SPAN> method after you successfully update the last record.</P>
In a Microsoft Jet workspace, you can include the <B>dbFlushOSCacheWrites</B> constant with <B>CommitTrans</B>, This forces the database engine to immediately flush all updates to disk, instead of caching them temporarily. Without using this option, a user could get control back immediately after the application program calls <B>CommitTrans</B>, turn the computer off, and not have the data written to disk. While using this option may affect your application's performance, it is useful in situations where the computer could be shut off before cached updates are saved to disk.</P>
<HR CLASS="cas">
<SPAN CLASS="cah">Caution</SPAN>   Within one <SPAN CLASS="eln">Workspace</SPAN> object, transactions are always global to the <SPAN CLASS="eln">Workspace</SPAN> and aren't limited to only one <SPAN CLASS="eln">Connection</SPAN> or <SPAN CLASS="eln">Database</SPAN> object. If you perform operations on more than one connection or database within a <SPAN CLASS="eln">Workspace</SPAN> transaction, resolving the transaction (that is, using the <B>CommitTrans</B> or <SPAN CLASS="eln">Rollback</SPAN> method) affects all operations on all connections and databases within that workspace.</P>
<HR CLASS="cae">
After you use <SPAN CLASS="eln">CommitTrans</SPAN>, you can't undo changes made during that transaction unless the transaction is nested within another transaction that is itself rolled back. If you nest transactions, you must resolve the current transaction before you can resolve a transaction at a higher level of nesting.</P>
If you want to have simultaneous transactions with overlapping, non-nested scopes, you can create additional <SPAN CLASS="eln">Workspace</SPAN> objects to contain the concurrent transactions.</P>
If you close a <SPAN CLASS="eln">Workspace</SPAN> object without resolving any pending transactions, the transactions are automatically rolled back.</P>
If you use the <SPAN CLASS="eln">CommitTrans</SPAN> or <SPAN CLASS="eln">Rollback</SPAN> method without first using the <SPAN CLASS="eln">BeginTrans</SPAN> method, an error occurs.</P>
Some ISAM databases used in a Microsoft Jet workspace may not support transactions, in which case the Transactions property of the Database object or Recordset object is&nbsp;False. To make sure the database supports transactions, check the value of the Transactions property of the Database object before using the BeginTrans method. If&nbsp;you are using a Recordset object based on more than one database, check the Transactions property of the Recordset object. If a Recordset is based entirely on Microsoft Jet tables, you can always use transactions. Recordset objects based on tables&nbsp;created by other database products, however, may not support transactions. For example, you can't use transactions in a Recordset based on a Paradox table. In this case, the Transactions property is False. If the Database or Recordset doesn't support transactions, the methods are ignored and no error occurs.</P>
You can't nest transactions if you are accessing <SPAN CLASS="pop">ODBC data sources</SPAN> through the Microsoft Jet database engine.</P>
<SPAN CLASS="nh">Notes</SPAN></P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">You can often improve the performance of your application by breaking operations that require disk access into transaction blocks. This buffers your operations and may significantly reduce the number of times a disk is accessed.</LI><LI CLASS="ULI1">In a Microsoft Jet workspace, transactions are logged in a file kept in the directory specified by the TEMP environment variable on the workstation. If the transaction log file exhausts the available storage on your TEMP drive, the database engine triggers a run-time error. At this point, if you use <SPAN CLASS="eln">CommitTrans</SPAN>, an indeterminate number of operations are committed, but the remaining uncompleted operations are lost, and the operation has to be restarted. Using a <SPAN CLASS="eln">Rollback</SPAN> method releases the transaction log and rolls back all operations in the transaction.
</LI></UL></SPAN>See Also</P>
<SPAN CLASS="eln">Close</SPAN> method, <SPAN CLASS="eln">CreateWorkspace</SPAN> method, <SPAN CLASS="eln">Refresh</SPAN> method, <SPAN CLASS="eln">Transactions</SPAN> property.</P>
Example</P>
This example changes the job title of all sales representatives in the Employees table of the database. After the <SPAN CLASS="eln">BeginTrans</SPAN> method starts a transaction that isolates all the changes made to the Employees table, the <SPAN CLASS="eln">CommitTrans</SPAN> method saves the changes. Notice that you can use the <SPAN CLASS="eln">Rollback</SPAN> method to undo changes that you saved using the <SPAN CLASS="eln">Update</SPAN> method. Furthermore, the main transaction is nested within another transaction that automatically rolls back any changes made by the user during this example.</P>
One or more table pages remain locked while the user decides whether or not to accept the changes. For this reason, this technique isn't recommended but shown only&nbsp;as an example.</P>

<pre><code>Sub BeginTransX()

    Dim strName As String
    Dim strMessage As String
    Dim wrkDefault As Workspace
    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset

    ' Get default Workspace.
    Set wrkDefault = DBEngine.Workspaces(0)
    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstEmployees = dbsNorthwind.OpenRecordset("Employees")

    ' Start of outer transaction.
    wrkDefault.BeginTrans
    ' Start of main transaction.
    wrkDefault.BeginTrans

    With rstEmployees

        ' Loop through recordset and ask user if she wants to
        ' change the title for a specified employee.
        Do Until .EOF
            If !Title = "Sales Representative" Then
                strName = !LastName &amp; ", " &amp; !FirstName
                strMessage = "Employee: " &amp; strName &amp; vbCr &amp; _
                    "Change title to Account Executive?"

                ' Change the title for the specified employee.
                If MsgBox(strMessage, vbYesNo) = vbYes Then
                    .Edit
                    !Title = "Account Executive"
                    .Update
                End If
            End If

            .MoveNext
        Loop

        ' Ask if the user wants to commit to all the changes
        ' made above.
        If MsgBox("Save all changes?", vbYesNo) = vbYes Then
            wrkDefault.CommitTrans
        Else
            wrkDefault.Rollback
        End If

        ' Print current data in recordset.
        .MoveFirst
        Do While Not .EOF
            Debug.Print !LastName &amp; ", " &amp; !FirstName &amp; _
                " - " &amp; !Title
            .MoveNext
        Loop
        ' Roll back any changes made by the user since this is
        ' a demonstration.
        wrkDefault.Rollback
        .Close
    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example changes the job title of all sales representatives in an Employees table. After the <SPAN CLASS="eln">BeginTrans</SPAN> method starts a transaction that isolates all the changes made to the Employees table, the <SPAN CLASS="eln">CommitTrans</SPAN> method saves the changes. Notice that you can use the <SPAN CLASS="eln">Rollback</SPAN> method to undo changes that you saved by using the <SPAN CLASS="eln">Update</SPAN> method. The example also shows how to maintain a flag to properly manage errors that might occur during a transaction.</P>
One or more table pages remain locked while the user decides whether or not to accept the changes. Consequently, this technique isn't recommended but is shown only as an example.</P>

<pre><code>Sub ChangeTitle()
    Dim wsp As Workspace, dbs As Database, rst As Recordset
    Dim strName As String, strMessage As String, strPrompt As String
    Dim fInTrans As Boolean

    On Error GoTo ChangeTitleErr

    fInTrans = False
    strPrompt = "Change title to Account Executive?"
    ' Return reference to default Workspace object.
    Set wsp = DBEngine.Workspaces(0)
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset object.
    Set rst = dbs.OpenRecordset("Employees", dbOpenTable)
    ' Start of transaction.
    wsp.BeginTrans
    fInTrans = True
    rst.MoveFirst
    Do Until rst.EOF
        If rst!Title = "Sales Representative" Then
            strName = rst!LastName &amp; ", " &amp; rst!FirstName
            strMessage = "Employee: " &amp; strName &amp; vbCrLf &amp; vbCrLf
            If MsgBox(strMessage &amp; strPrompt, vbQuestion + vbYesNo, _
                    "Change Job Title") = vbYes Then
                ' Enable editing.
                rst.Edit
                rst!Title = "Account Executive"
                ' Save changes.
                rst.Update
            End If
        End If
        ' Move to next record.
        rst.MoveNext
    Loop
    If MsgBox("Save all changes?", vbQuestion + vbYesNo, _
            " Save Changes") = vbYes Then
        wsp.CommitTrans                    ' Commit changes.
    Else
        wsp.Rollback                        ' Undo changes.
    End If
ChangeTitleExit:
    rst.Close
    Set dbs = Nothing
    Set wsp = Nothing
    Exit Sub
ChangeTitleErr:
    MsgBox "Error!"
    If fInTrans Then
        wsp.Rollback
    End If
    Resume ChangeTitleExit
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

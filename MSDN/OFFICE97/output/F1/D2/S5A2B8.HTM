<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Index Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Index Property</H1>Applies To</P>
<SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Sets or returns a value that indicates the name of the current Index object in a table-type Recordset object (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Settings and Return Values</P>
The setting or return value is a <SPAN CLASS="eln">String</SPAN> data type that evaluates to the name of an <SPAN CLASS="eln">Index</SPAN> object in the Indexes collection of the <SPAN CLASS="eln">TableDef</SPAN> or table-type <SPAN CLASS="eln">Recordset</SPAN> object's TableDef object.</P>
Remarks</P>
Records in <SPAN CLASS="pop">base tables</SPAN> aren't stored in any particular order. Setting the <SPAN CLASS="eln">Index</SPAN> property changes the order of records returned from the database; it doesn't affect the order in which the records are stored.</P>
The specified <SPAN CLASS="eln">Index</SPAN> object must already be defined. If you set the <SPAN CLASS="eln">Index</SPAN> property to an <SPAN CLASS="eln">Index</SPAN> object that doesn't exist or if the <SPAN CLASS="eln">Index</SPAN> property isn't set when you use the Seek method, a trappable error occurs.</P>
Examine the <SPAN CLASS="eln">Indexes</SPAN> collection of a <SPAN CLASS="eln">TableDef</SPAN> object to determine what <SPAN CLASS="eln">Index</SPAN> objects are available to table-type <SPAN CLASS="eln">Recordset</SPAN> objects created from that <SPAN CLASS="eln">TableDef</SPAN> object.</P>
You can create a new index for the table by creating a new <SPAN CLASS="eln">Index</SPAN> object, setting its properties, appending it to the <SPAN CLASS="eln">Indexes</SPAN> collection of the underlying <SPAN CLASS="eln">TableDef</SPAN> object, and then reopening the <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Records returned from a table-type <SPAN CLASS="eln">Recordset</SPAN> object can be ordered only by the indexes defined for the underlying <SPAN CLASS="eln">TableDef</SPAN> object. To sort records in some other order, you can open a dynaset-, snapshot-, or forward-only–type <SPAN CLASS="eln">Recordset</SPAN> object by using an <SPAN CLASS="pop">SQL statement</SPAN> with an ORDER BY clause.</P>
<SPAN CLASS="nh">Notes</SPAN></P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">You don't have to create indexes for tables. With large, unindexed tables, accessing a specific record or creating a <SPAN CLASS="eln">Recordset</SPAN> object can take a long time. On the other hand, creating too many indexes slows down update, append, and delete operations because all indexes are automatically updated.</LI><LI CLASS="ULI1">Records read from tables without indexes are returned in no particular sequence.</LI><LI CLASS="ULI1">The <SPAN CLASS="eln">Attributes</SPAN> property of each Field object in the <SPAN CLASS="eln">Index</SPAN> object determines the order of records and consequently determines the access techniques to use for that index.</LI><LI CLASS="ULI1">A unique index helps optimize finding records.</LI><LI CLASS="ULI1">Indexes don't affect the physical order of a <SPAN CLASS="pop">base table</SPAN> — indexes affect only how the records are accessed by the table-type <SPAN CLASS="eln">Recordset</SPAN> object when a particular index is chosen or when <SPAN CLASS="eln">Recordset</SPAN> is opened.
</LI></UL></SPAN>See Also</P>
<SPAN CLASS="eln">Append</SPAN> method, <SPAN CLASS="eln">Index</SPAN> object, <SPAN CLASS="eln">Primary</SPAN> property, <SPAN CLASS="eln">Seek</SPAN> method, <SPAN CLASS="eln">Sort</SPAN> property, <SPAN CLASS="eln">TableDef</SPAN> object.</P>
Example</P>
This example uses the <SPAN CLASS="eln">Index</SPAN> property to set different record orders for a table-type <SPAN CLASS="eln">Recordset</SPAN>.</P>

<pre><code>Sub IndexPropertyX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim rstEmployees As Recordset
    Dim idxLoop As Index

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees")
    Set tdfEmployees = dbsNorthwind.TableDefs!Employees

    With rstEmployees

        ' Enumerate Indexes collection of Employees table.
        For Each idxLoop In tdfEmployees.Indexes
            .Index = idxLoop.Name
            Debug.Print "Index = " &amp; .Index
            Debug.Print "    EmployeeID - PostalCode - Name"
            .MoveFirst

            ' Enumerate Recordset to show the order of records.
            Do While Not .EOF
                Debug.Print "        " &amp; !EmployeeID &amp; " - " &amp; _
                    !PostalCode &amp; " - " &amp; !FirstName &amp; " " &amp; _
                    !LastName
                .MoveNext
            Loop

        Next idxLoop

        .Close
    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example sets the index for a table-type <SPAN CLASS="eln">Recordset</SPAN> object to the primary key. "PrimaryKey" is the default name of an <SPAN CLASS="eln">Index</SPAN> object if the index corresponds to the primary key set in table Design view. Next, the procedure asks the user for a value to search on and locates the record with a matching key field value. Note that the current index must be set before certain operations, such as the <SPAN CLASS="eln">Seek</SPAN> method, can be performed on a table-type <SPAN CLASS="eln">Recordset</SPAN> object.</P>

<pre><code>Sub UsePrimaryKey()
    Dim dbs As Database, rst As Recordset
    Dim fld As Field, strInput As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset object.
    Set rst = dbs.OpenRecordset("Orders", dbOpenTable)
    ' Set current index.
    rst.Index = "PrimaryKey"
    strInput = InputBox("Enter the OrderID on which to search.")
    ' Locate record.
    rst.Seek "=", strInput
    If Not rst.NoMatch Then
        For Each fld in rst.Fields
            Debug.Print fld.Name; "   "; fld.Value
        Next fld
    End If
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

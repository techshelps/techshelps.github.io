<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBEngine Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>DBEngine Object</H1>Description</P>
The <SPAN CLASS="eln">DBEngine</SPAN> object is the top level object in the <SPAN CLASS="pop">DAO</SPAN> object model.</P>
Remarks</P>
The <SPAN CLASS="eln">DBEngine</SPAN> object contains and controls all other objects in the hierarchy of DAO objects. You can't create additional <SPAN CLASS="eln">DBEngine</SPAN> objects, and the <SPAN CLASS="eln">DBEngine</SPAN> object isn't an element of any collection.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;When you reference an <SPAN CLASS="pop">ODBC data source</SPAN> directly through DAO, it is called an "<SPAN CLASS="pop">ODBCDirect workspace</SPAN>." This is to distinguish it from an ODBC data source that you reference indirectly through the Microsoft Jet database engine, using a "<SPAN CLASS="pop">Microsoft Jet workspace</SPAN>." Each method of accessing ODBC data requires one of two types of <SPAN CLASS="eln">Workspace</SPAN> object; you can set the <SPAN CLASS="eln">DefaultType</SPAN> property to choose the default type of <SPAN CLASS="eln">Workspace</SPAN> object that you will create from the <SPAN CLASS="eln">DBEngine</SPAN> object. The <SPAN CLASS="eln">Workspace</SPAN> type and associated data source determines which DAO objects, methods, and properties you can use.</P>
With any type of database or connection, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Version</SPAN> property to obtain the DAO version number.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">LoginTimeout</SPAN> property to obtain or set the <SPAN CLASS="pop">ODBC</SPAN> login timeout, and the <SPAN CLASS="eln">RegisterDatabase</SPAN> method to provide ODBC information to the <SPAN CLASS="pop">Microsoft Jet database engine</SPAN>. You can use these features the same way, regardless of whether you connect to the ODBC data source through Microsoft Jet or through an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">DefaultType</SPAN> property to set the default type of database connection that subsequently created <SPAN CLASS="eln">Workspace</SPAN> objects will use — either Microsoft Jet or ODBCDirect.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">DefaultPassword</SPAN> and <SPAN CLASS="eln">DefaultUser</SPAN> properties to set the user identification and password for the default <SPAN CLASS="eln">Workspace</SPAN> object.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">CreateWorkspace</SPAN> method to create a new <SPAN CLASS="eln">Workspace</SPAN> object. You can use optional arguments to override the settings of the <SPAN CLASS="eln">DefaultType</SPAN>, <SPAN CLASS="eln">DefaultPassword</SPAN>, and <SPAN CLASS="eln">DefaultUser</SPAN> properties.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">OpenDatabase</SPAN> method to open a database in the default <SPAN CLASS="eln">Workspace</SPAN>, and use the <SPAN CLASS="eln">BeginTrans</SPAN>, <SPAN CLASS="eln">Commit</SPAN>, and <SPAN CLASS="eln">Rollback</SPAN> methods to control transactions on the default <SPAN CLASS="eln">Workspace</SPAN>.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Workspaces</SPAN> collection to reference specific <SPAN CLASS="eln">Workspace</SPAN> objects.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Errors</SPAN> collection to examine data access error details.
</LI></UL></SPAN>Other properties and methods are only available when you use DAO with the Microsoft Jet database engine. You can use them to control the Microsoft Jet database engine, manipulate its properties, and perform tasks on temporary objects that aren't elements of collections. For example, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">CreateDatabase</SPAN> method to create a new Microsoft Jet <SPAN CLASS="eln">Database</SPAN> object.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Idle</SPAN> method to enable the Microsoft Jet database engine to complete any pending tasks.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">CompactDatabase</SPAN> and <SPAN CLASS="eln">RepairDatabase</SPAN> methods to maintain database files.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">IniPath</SPAN> and <SPAN CLASS="eln">SystemDB</SPAN> properties to specify the location of Microsoft Jet Windows Registry information and the Microsoft Jet workgroup information file, respectively. The <B>SetOption</B> method allows you override windows registry settings for the Microsoft Jet database engine.
</LI></UL></SPAN>After you change the <SPAN CLASS="eln">DefaultType</SPAN> and <SPAN CLASS="eln">IniPath</SPAN> property settings, only subsequent <SPAN CLASS="eln">Workspace</SPAN> objects will reflect these changes.</P>
To refer to a collection that belongs to the <SPAN CLASS="eln">DBEngine</SPAN> object, or to refer to a method or property that applies to this object, use this syntax:</P>
[<SPAN CLASS="eln">DBEngine</SPAN><B>.</B>][<SPAN CLASS="p">collection</SPAN> | <SPAN CLASS="p">method</SPAN> | <SPAN CLASS="p">property</SPAN>]</P>
Properties</P>
<SPAN CLASS="eln">DefaultType</SPAN> property, <SPAN CLASS="eln">DefaultUser</SPAN>, <SPAN CLASS="eln">DefaultPassword</SPAN> properties, <SPAN CLASS="eln">IniPath</SPAN> property, <SPAN CLASS="eln">LoginTimeout</SPAN> property, <SPAN CLASS="eln">SystemDB</SPAN> property, <SPAN CLASS="eln">Version</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">BeginTrans</SPAN>, <SPAN CLASS="eln">CommitTrans</SPAN>, <SPAN CLASS="eln">Rollback</SPAN> methods, <SPAN CLASS="eln">CompactDatabase</SPAN> method, <SPAN CLASS="eln">CreateDatabase</SPAN> method, <SPAN CLASS="eln">CreateWorkspace</SPAN> method, <SPAN CLASS="eln">Idle</SPAN> method, <SPAN CLASS="eln">OpenConnection</SPAN> method, <SPAN CLASS="eln">OpenDatabase</SPAN> method, <SPAN CLASS="eln">RegisterDatabase</SPAN> method, <SPAN CLASS="eln">RepairDatabase</SPAN> method, <SPAN CLASS="eln">SetOption</SPAN> method.</P>
Specifics (Microsoft Access)</P>
Microsoft Access provides a means of manipulating <SPAN CLASS="pop">Data Access Objects (DAO)</SPAN> from other applications through <SPAN CLASS="pop">Automation</SPAN>. If you are controlling Microsoft Access from another application, such as Visual&nbsp;Basic or Microsoft Excel, you can use the <SPAN CLASS="eln">DBEngine</SPAN> property of the Microsoft Access <SPAN CLASS="eln">Application</SPAN> object to return a reference to the <SPAN CLASS="eln">DBEngine</SPAN> object. All DAO objects and collections are then accessible through the <SPAN CLASS="eln">DBEngine</SPAN> object.</P>
Example</P>
This example enumerates the collections of the <SPAN CLASS="eln">DBEngine</SPAN> object. See the methods and properties of <SPAN CLASS="eln">DBEngine</SPAN> for additional examples.</P>

<pre><code>Sub DBEngineX()

    Dim wrkLoop As Workspace
    Dim prpLoop As Property

    With DBEngine
        Debug.Print "DBEngine Properties"

        ' Enumerate Properties collection of DBEngine,
        ' trapping for properties whose values are
        ' invalid in this context.
        For Each prpLoop In .Properties
            On Error Resume Next
            Debug.Print "    " &amp; prpLoop.Name &amp; " = " _
                &amp; prpLoop
            On Error GoTo 0
        Next prpLoop

        Debug.Print "Workspaces collection of DBEngine"

        ' Enumerate Workspaces collection of DBEngine.
        For Each wrkLoop In .Workspaces
            Debug.Print "    " &amp; wrkLoop.Name

            ' Enumerate Properties collection of each
            ' Workspace object, trapping for properties
            ' whose values are invalid in this context.
            For Each prpLoop In wrkLoop.Properties
                On Error Resume Next
                Debug.Print "        " &amp; prpLoop.Name &amp; _
                    " = " &amp; prpLoop
                On Error GoTo 0
            Next prpLoop

        Next wrkLoop

    End With

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example prints all the properties of the <SPAN CLASS="eln">DBEngine</SPAN> object:</P>

<pre><code>Sub EngineProperties()
    Dim prp As Property

    For Each prp In DBEngine.Properties
        Debug.Print prp.Name
    Next prp
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

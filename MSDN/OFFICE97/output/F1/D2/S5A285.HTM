<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateIndex Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateIndex Method</H2>Applies To</P>
<SPAN CLASS="eln">TableDef</SPAN> object.</P>
Description</P>
Creates a new <SPAN CLASS="eln">Index</SPAN> object (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Syntax</P>
<SPAN CLASS="eln">Set</SPAN> <SPAN CLASS="p">index</SPAN> = <SPAN CLASS="p">tabledef</SPAN><SPAN CLASS="eln">.CreateIndex(</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="eln">)</SPAN></P>
The <SPAN CLASS="eln">CreateIndex</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="270pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">index</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents the index you want to create.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">tabledef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>An object variable that represents the TableDef object you want to use to create the new <SPAN CLASS="eln">Index</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A Variant (<SPAN CLASS="eln">String</SPAN> subtype) that uniquely names the new <SPAN CLASS="eln">Index </SPAN>object. See the <SPAN CLASS="eln">Name</SPAN> property for details on valid <SPAN CLASS="eln">Index</SPAN> names.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You can use the <SPAN CLASS="eln">CreateIndex</SPAN> method to create a new <SPAN CLASS="eln">Index</SPAN> object for a <SPAN CLASS="eln">TableDef</SPAN> object. If you omit the optional <SPAN CLASS="p">name</SPAN> part when you use <SPAN CLASS="eln">CreateIndex</SPAN>, you can use an appropriate assignment statement to set or reset the <SPAN CLASS="eln">Name</SPAN> property before you append the new object to a collection. After you append the object, you may or may not be able to set its <SPAN CLASS="eln">Name</SPAN> property, depending on the type of object that contains the <SPAN CLASS="eln">Indexes</SPAN> collection. See the <SPAN CLASS="eln">Name</SPAN> property topic for more details.</P>
If <SPAN CLASS="p">name</SPAN> refers to an object that is already a member of the collection, a run-time error occurs when you use the <SPAN CLASS="eln">Append</SPAN> method.</P>
To remove an <SPAN CLASS="eln">Index</SPAN> object from a collection, use the <SPAN CLASS="eln">Delete</SPAN> method on the collection.</P>
See Also</P>
<SPAN CLASS="eln">Append</SPAN> method, CREATE INDEX statement, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Index</SPAN> object, <SPAN CLASS="eln">Name</SPAN> property.</P>
Example</P>
This example uses the <SPAN CLASS="eln">CreateIndex</SPAN> method to create two new <SPAN CLASS="eln">Index</SPAN> objects and then appends them to the <SPAN CLASS="eln">Indexes</SPAN> collection of the Employees <SPAN CLASS="eln">TableDef</SPAN> object. It then enumerates the <SPAN CLASS="eln">Indexes</SPAN> collection of the <SPAN CLASS="eln">TableDef</SPAN> object, the <SPAN CLASS="eln">Fields</SPAN> collection of the new <SPAN CLASS="eln">Index</SPAN> objects, and the <SPAN CLASS="eln">Properties</SPAN> collection of the new <SPAN CLASS="eln">Index</SPAN> objects. The CreateIndexOutput function is required for this procedure to run.</P>

<pre><code>Sub CreateIndexX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim idxCountry As Index
    Dim idxFirstName As Index
    Dim idxLoop As Index

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set tdfEmployees = dbsNorthwind!Employees

    With tdfEmployees
        ' Create first Index object, create and append Field
        ' objects to the Index object, and then append the
        ' Index object to the Indexes collection of the
        ' TableDef.
        Set idxCountry = .CreateIndex("CountryIndex")
        With idxCountry
            .Fields.Append .CreateField("Country")
            .Fields.Append .CreateField("LastName")
            .Fields.Append .CreateField("FirstName")
        End With
        .Indexes.Append idxCountry

        ' Create second Index object, create and append Field
        ' objects to the Index object, and then append the
        ' Index object to the Indexes collection of the
        ' TableDef.
        Set idxFirstName = .CreateIndex
        With idxFirstName
            .Name = "FirstNameIndex"
            .Fields.Append .CreateField("FirstName")
            .Fields.Append .CreateField("LastName")
        End With
        .Indexes.Append idxFirstName

        ' Refresh collection so that you can access new Index
        ' objects.
        .Indexes.Refresh

        Debug.Print .Indexes.Count &amp; " Indexes in " &amp; _
            .Name &amp; " TableDef"

        ' Enumerate Indexes collection.
        For Each idxLoop In .Indexes
            Debug.Print "    " &amp; idxLoop.Name
        Next idxLoop

        ' Print report.
        CreateIndexOutput idxCountry
        CreateIndexOutput idxFirstName

        ' Delete new Index objects because this is a
        ' demonstration.
        .Indexes.Delete idxCountry.Name
        .Indexes.Delete idxFirstName.Name
    End With

    dbsNorthwind.Close

End Sub

Function CreateIndexOutput(idxTemp As Index)

    Dim fldLoop As Field
    Dim prpLoop As Property

    With idxTemp
        ' Enumerate Fields collection of Index object.
        Debug.Print "Fields in " &amp; .Name
        For Each fldLoop In .Fields
            Debug.Print "    " &amp; fldLoop.Name
        Next fldLoop

        ' Enumerate Properties collection of Index object.
        Debug.Print "Properties of " &amp; .Name
        For Each prpLoop In .Properties
            Debug.Print "    " &amp; prpLoop.Name &amp; " - " &amp; _
                IIf(prpLoop = "", "[empty]", prpLoop)
        Next prpLoop
    End With

End Function</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new <SPAN CLASS="eln">Index</SPAN> object on an Employees table. The new index consists of two fields, LastName and FirstName.</P>

<pre><code>Sub NewIndex()
    Dim dbs As Database, tdf As TableDef
    Dim idx As Index
    Dim fldLastName As Field, fldFirstName As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Return reference to new index.
    Set idx = tdf.CreateIndex("FullName")
    ' Create and append index fields.
    Set fldLastName = idx.CreateField("LastName", dbText)
    Set fldFirstName = idx.CreateField("FirstName", dbText)
    idx.Fields.Append fldLastName
    idx.Fields.Append fldFirstName
    ' Append Index object and refresh collection.
    tdf.Indexes.Append idx
    tdf.Indexes.Refresh
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

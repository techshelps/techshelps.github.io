<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ValidationRule Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>ValidationRule Property</H1>Applies To</P>
Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Field</SPAN> object, Forward-Only-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">TableDef</SPAN> object.</P>
Description</P>
Sets or returns a value that validates the data in a field as it's changed or added to a table (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Settings and Return Values</P>
The settings or return values is a <SPAN CLASS="eln">String</SPAN> that describes a comparison in the form of an SQL WHERE clause without the WHERE reserved word. For an object not yet appended to the Fields collection, this property is read/write. See Remarks for the more specific read/write characteristics of this property.</P>
Remarks</P>
The <SPAN CLASS="eln">ValidationRule</SPAN> property determines whether or not a field contains valid data. If the data is not valid, a trappable run-time error occurs. The returned error message is the text of the <SPAN CLASS="eln">ValidationText</SPAN> property, if specified, or the text of the expression specified by <SPAN CLASS="eln">ValidationRule</SPAN>.</P>
For a Field object, use of the <SPAN CLASS="eln">ValidationRule</SPAN> property depends on the object that contains the <SPAN CLASS="eln">Fields</SPAN> collection to which the <SPAN CLASS="eln">Field</SPAN> object is appended.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="111pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Object appended to</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Usage</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Index</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">QueryDef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Recordset</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Relation</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">TableDef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read/write</P></TD></TR></TBODY></TABLE>
<BR></P>For a Recordset object, use of the <SPAN CLASS="eln">ValidationRule</SPAN> property is read-only. For a TableDef object, use of the <SPAN CLASS="eln">ValidationRule</SPAN> property depends on the status of the <SPAN CLASS="eln">TableDef</SPAN> object, as the following table shows.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="111pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">TableDef</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Usage</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="pop">Base table</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read/write</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="pop">Linked table</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR></TBODY></TABLE>
<BR></P>Validation is supported only for databases that use the <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN>.</P>
The <SPAN CLASS="pop">string expression</SPAN> specified by the <SPAN CLASS="eln">ValidationRule</SPAN> property of a <SPAN CLASS="eln">Field</SPAN> object can refer only to that <SPAN CLASS="eln">Field</SPAN>. The expression can't refer to user-defined functions, SQL <SPAN CLASS="pop">aggregate functions</SPAN>, or queries. To set a <SPAN CLASS="eln">Field</SPAN> object's <SPAN CLASS="eln">ValidationRule</SPAN> property when its ValidateOnSet property setting is <SPAN CLASS="eln">True</SPAN>, the expression must successfully parse (with the field name as an implied operand) and evaluate to <SPAN CLASS="eln">True</SPAN>. If its <SPAN CLASS="eln">ValidateOnSet</SPAN> property setting is <SPAN CLASS="eln">False</SPAN>, the <SPAN CLASS="eln">ValidationRule</SPAN> property setting is ignored.</P>
The <SPAN CLASS="eln">ValidationRule</SPAN> property of a <SPAN CLASS="eln">Recordset</SPAN> or <SPAN CLASS="eln">TableDef</SPAN> object can refer to multiple fields in that object. The restrictions noted earlier in this topic for the <SPAN CLASS="eln">Field</SPAN> object apply.</P>
For a table-type <SPAN CLASS="eln">Recordset</SPAN> object, the <SPAN CLASS="eln">ValidationRule</SPAN> property inherits the <SPAN CLASS="eln">ValidationRule</SPAN> property setting of the <SPAN CLASS="eln">TableDef</SPAN> object that you use to create the table-type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
For a <SPAN CLASS="eln">TableDef</SPAN> object based on an <SPAN CLASS="pop">linked table</SPAN>, the <SPAN CLASS="eln">ValidationRule</SPAN> property inherits the <SPAN CLASS="eln">ValidationRule</SPAN> property setting of the underlying <SPAN CLASS="pop">base table</SPAN>. If the underlying base table doesn't support validation, the value of this property is a <SPAN CLASS="pop">zero-length string</SPAN>&nbsp;(" ").</P>
<SPAN CLASS="nh">Note</SPAN>   If you set the property to a string concatenated with a non-integer value, and the system parameters specify a non-U.S. decimal character such as a comma (for example, <SPAN CLASS="cte">strRule = "PRICE &gt; " &amp; lngPrice</SPAN>, and <SPAN CLASS="cte">lngPrice = 125,50</SPAN>), an error will result when your code attempts to validate any data. This is because during concatenation, the number will be converted to a string using your system's default decimal character, and Microsoft&nbsp;Jet SQL only accepts U.S. decimal characters.</P>
See Also</P>
<SPAN CLASS="eln">ValidateOnSet</SPAN> property, <SPAN CLASS="eln">ValidationText</SPAN> property.</P>
Specifics (Microsoft&nbsp;Access)</P>
Use the DAO <SPAN CLASS="eln">ValidationRule</SPAN> property to set <SPAN CLASS="pop">validation</SPAN> rules for a <SPAN CLASS="eln">Field</SPAN>, <SPAN CLASS="eln">Recordset</SPAN>, or <SPAN CLASS="eln">TableDef</SPAN> object by using Visual&nbsp;Basic.</P>
You can also set validation rules for a field or control in the Microsoft&nbsp;Access user interface. Set the Microsoft&nbsp;Access <SPAN CLASS="eln">ValidationRule</SPAN> property for a field or a table in <SPAN CLASS="pop">table Design view</SPAN>. Set the <SPAN CLASS="eln">ValidationRule</SPAN> property of a control by using the property sheet in <SPAN CLASS="pop">form Design view</SPAN>.</P>
In Microsoft&nbsp;Access, the <SPAN CLASS="pop">string expression</SPAN> specified by the <SPAN CLASS="eln">ValidationRule</SPAN> property of a <SPAN CLASS="eln">Field</SPAN> object can't refer to user-defined functions, <SPAN CLASS="pop">domain aggregate functions</SPAN>, SQL <SPAN CLASS="pop">aggregate functions</SPAN>, the <SPAN CLASS="eln">CurrentUser</SPAN> function, the <SPAN CLASS="eln">Eval</SPAN> function, or queries.</P>
Example</P>
This example creates a new <SPAN CLASS="eln">Field</SPAN> object in the specified <SPAN CLASS="eln">TableDef</SPAN> object and sets the <SPAN CLASS="eln">ValidationRule</SPAN> and <SPAN CLASS="eln">ValidationText</SPAN> properties based on the passed data. It also shows how the <SPAN CLASS="eln">ValidationRule</SPAN> and <SPAN CLASS="eln">ValidationText</SPAN> properties are used during actual data entry. The SetValidation function is required for this procedure to run.</P>

<pre><code>Sub ValidationRuleX()

    Dim dbsNorthwind As Database
    Dim fldDays As Field
    Dim rstEmployees As Recordset
    Dim strMessage As String
    Dim strDays As String
    Dim errLoop As Error

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    ' Create a new field for the Employees TableDef object
    ' using the specified property settings.
    Set fldDays = _
        SetValidation(dbsNorthwind.TableDefs!Employees, _
        "DaysOfVacation", dbInteger, 2, "BETWEEN 1 AND 20", _
        "Number must be between 1 and 20!")
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees")

    With rstEmployees

        ' Enumerate Recordset. With each record, fill the new
        ' field with data supplied by the user.
        Do While Not .EOF
            .Edit
            strMessage = "Enter days of vacation for " &amp; _
                !FirstName &amp; " " &amp; !LastName &amp; vbCr &amp; _
                "[" &amp; !DaysOfVacation.ValidationRule &amp; "]"

            Do While True
                ' Get user input.
                strDays = InputBox(strMessage)
                If strDays = "" Then
                    .CancelUpdate
                    Exit Do
                End If
                !DaysOfVacation = Val(strDays)

                ' Because ValidateOnSet defaults to False, the
                ' data in the buffer will be checked against the
                ' ValidationRule during Update.
                On Error GoTo Err_Rule
                .Update
                On Error GoTo 0

                ' If the Update method was successful, print the
                ' results of the data change.
                If .EditMode = dbEditNone Then
                    Debug.Print !FirstName &amp; " " &amp; !LastName &amp; _
                        " - " &amp; "DaysOfVacation = " &amp; _
                        !DaysOfVacation
                    Exit Do
                End If

            Loop

            If strDays = "" Then Exit Do
            .MoveNext
        Loop

        .Close
    End With

    ' Delete new field because this is a demonstration.
    dbsNorthwind.TableDefs!Employees.Fields.Delete _
        fldDays.Name
    dbsNorthwind.Close
    
    Exit Sub
    
Err_Rule:

    If DBEngine.Errors.Count &gt; 0 Then
        ' Enumerate the Errors collection.
        For Each errLoop In DBEngine.Errors
            MsgBox "Error number: " &amp; _
                errLoop.Number &amp; vbCr &amp; _
                errLoop.Description
        Next errLoop
    End If
    
    Resume Next

End Sub

Function SetValidation(tdfTemp As TableDef, _
    strFieldName As String, intType As Integer, _
    intLength As Integer, strRule As String, _
    strText As String) As Field

    ' Create and append a new Field object to the Fields
    ' collection of the specified TableDef object.
    Set SetValidation = tdfTemp.CreateField(strFieldName, _
        intType, intLength)

    SetValidation.ValidationRule = strRule
    SetValidation.ValidationText = strText
    tdfTemp.Fields.Append SetValidation

End Function</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example sets the <SPAN CLASS="eln">ValidationRule</SPAN> and <SPAN CLASS="eln">ValidationText</SPAN> properties for two fields in an Order Details table. Once these properties have been set, you can view them in table Design view as well.</P>

<pre><code>Sub SetValidation()
    Dim dbs As Database, tdf As TableDef
    Dim fldQuantity As Field, fldDiscount As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return referent to Order Details table.
    Set tdf = dbs.TableDefs![Order Details]
    Set fldQuantity = tdf.Fields!Quantity
    Set fldDiscount = tdf.Fields!Discount
    ' Set ValidationRule and ValidationText.
    fldQuantity.ValidationRule = "&gt;= 4"
    fldQuantity.ValidationText = "Quantity must be four or more items."
    fldDiscount.ValidationRule = "Between .05 and .30"
    fldDiscount.ValidationText = "Discount must be between 5% and 30%."
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

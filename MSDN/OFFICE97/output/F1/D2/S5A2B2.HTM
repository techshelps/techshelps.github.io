<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Group Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Group Object</H1>Description</P>
A <SPAN CLASS="eln">Group</SPAN> object represents a <SPAN CLASS="pop">group</SPAN> of <SPAN CLASS="pop">user accounts</SPAN> that have common access <SPAN CLASS="pop">permissions</SPAN> when a <SPAN CLASS="eln">Workspace</SPAN> object operates as a <SPAN CLASS="pop">secure workgroup</SPAN>. (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Remarks</P>
You create <SPAN CLASS="eln">Group</SPAN> objects and then use their names to establish and enforce access permissions for your databases, tables, and queries using the <SPAN CLASS="eln">Document</SPAN> objects that represent the <SPAN CLASS="eln">Database</SPAN>, <SPAN CLASS="eln">TableDef</SPAN>, and <SPAN CLASS="eln">QueryDef</SPAN> objects with which you're working.</P>
With the properties of a <SPAN CLASS="eln">Group</SPAN> object, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Name</SPAN> property of an existing <SPAN CLASS="eln">Group</SPAN> object to return its name. You can't return the <SPAN CLASS="eln">PID</SPAN> property setting of an existing <SPAN CLASS="eln">Group</SPAN> object.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Name</SPAN> and <SPAN CLASS="eln">PID</SPAN> properties of a newly created, unappended <SPAN CLASS="eln">Group</SPAN> object to set the identity of that <SPAN CLASS="eln">Group</SPAN> object.
</LI></UL></SPAN>You can append an existing <SPAN CLASS="eln">Group</SPAN> object to the <SPAN CLASS="eln">Groups</SPAN> collection in a <SPAN CLASS="eln">User</SPAN> object to establish membership of a user account in that <SPAN CLASS="eln">Group</SPAN> object. Alternatively, you can append a <SPAN CLASS="eln">User</SPAN> object to the <SPAN CLASS="eln">Users</SPAN> collection in a <SPAN CLASS="eln">Group</SPAN> object to give a user account the global permissions of that group. If you use a <SPAN CLASS="eln">Groups</SPAN> or <SPAN CLASS="eln">Users</SPAN> collection other than the one to which you just appended an object, you may need to use the <SPAN CLASS="eln">Refresh</SPAN> method to refresh the collection with current information from the database.</P>
The <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN> predefines three <SPAN CLASS="eln">Group</SPAN> objects named Admins, Users, and Guests. To create a new <SPAN CLASS="eln">Group</SPAN> object, use the <SPAN CLASS="eln">CreateGroup</SPAN> method on a <SPAN CLASS="eln">User</SPAN> or <SPAN CLASS="eln">Workspace</SPAN> object.</P>
To refer to a <SPAN CLASS="eln">Group</SPAN> object in a collection by its ordinal number or by its <SPAN CLASS="eln">Name</SPAN> property setting, use any of the following syntax forms:</P>
<SPAN CLASS="eln">Groups</SPAN><SPAN CLASS="l">(</SPAN>0<SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="eln">Groups</SPAN><SPAN CLASS="l">("</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">")</SPAN></P>
<SPAN CLASS="eln">Groups</SPAN><SPAN CLASS="l">![</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">]</SPAN></P>
Properties</P>
<SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">PID</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">CreateUser</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">CreateGroup</SPAN> method.</P>
Specifics (Microsoft&nbsp;Access)</P>
You can create <SPAN CLASS="eln">Group</SPAN> objects to establish and enforce <SPAN CLASS="pop">permissions</SPAN> for Microsoft&nbsp;Access <SPAN CLASS="pop">database objects</SPAN> as well as for <SPAN CLASS="pop">Data Access Objects</SPAN>. For example, you can set security for forms, reports, macros, and modules.</P>
A <SPAN CLASS="eln">Group</SPAN> object has a <SPAN CLASS="eln">Name</SPAN> property that you can use in setting <SPAN CLASS="pop">permissions</SPAN> for a <SPAN CLASS="eln">Container</SPAN> or <SPAN CLASS="eln">Document</SPAN> object. For example, you can assign the value of a <SPAN CLASS="eln">Group</SPAN> object's <SPAN CLASS="eln">Name</SPAN> property to the <SPAN CLASS="eln">UserName</SPAN> property of a <SPAN CLASS="eln">Container</SPAN> or <SPAN CLASS="eln">Document</SPAN> object. You can then set the <SPAN CLASS="eln">Permissions</SPAN> property of the <SPAN CLASS="eln">Container</SPAN> or <SPAN CLASS="eln">Document</SPAN> object to establish permissions for the group of users defined by the <SPAN CLASS="eln">UserName</SPAN> property. Or you can read the <SPAN CLASS="eln">Permissions</SPAN> property to determine existing permissions&nbsp;for that group.</P>
Example</P>
This example illustrates the use of the <SPAN CLASS="eln">Group</SPAN> and <SPAN CLASS="eln">User</SPAN> objects and the <SPAN CLASS="eln">Groups</SPAN> and <SPAN CLASS="eln">Users</SPAN> collections. First, it creates a new <SPAN CLASS="eln">User</SPAN> object and appends the object to the <SPAN CLASS="eln">Users</SPAN> collection of the default <SPAN CLASS="eln">Workspace</SPAN> object. Next, it creates a new <SPAN CLASS="eln">Group</SPAN> object and appends the object to the <SPAN CLASS="eln">Groups</SPAN> collection of the default <SPAN CLASS="eln">Workspace</SPAN> object. Then the example adds user Pat Smith to the Accounting group. Finally, it enumerates the <SPAN CLASS="eln">Users</SPAN> and <SPAN CLASS="eln">Groups</SPAN> collections of the default <SPAN CLASS="eln">Workspace</SPAN> object.</P>

<pre><code>Sub GroupX()

    Dim wrkDefault As Workspace
    Dim usrNew As User
    Dim usrLoop As User
    Dim grpNew As Group
    Dim grpLoop As Group
    Dim grpMember As Group

    Set wrkDefault = DBEngine.Workspaces(0)

    With wrkDefault

        ' Create and append new user.
        Set usrNew = .CreateUser("Pat Smith", _
            "abc123DEF456", "Password1")
        .Users.Append usrNew

        ' Create and append new group.
        Set grpNew = .CreateGroup("Accounting", _
            "UVW987xyz654")
        .Groups.Append grpNew

        ' Make the user Pat Smith a member of the
        ' Accounting group by creating and adding the
        ' appropriate Group object to the user's Groups
        ' collection. The same is accomplished if a User
        ' object representing Pat Smith is created and
        ' appended to the Accounting group's Users
        ' collection.
        Set grpMember = usrNew.CreateGroup("Accounting")
        usrNew.Groups.Append grpMember

        Debug.Print "Users collection:"

        ' Enumerate all User objects in the default
        ' workspace's Users collection.
        For Each usrLoop In .Users
            Debug.Print "    " &amp; usrLoop.Name
            Debug.Print "        Belongs to these groups:"

            ' Enumerate all Group objects in each User
            ' object's Groups collection.
            If usrLoop.Groups.Count &lt;&gt; 0 Then
                For Each grpLoop In usrLoop.Groups
                    Debug.Print "            " &amp; _
                        grpLoop.Name
                Next grpLoop
            Else
                Debug.Print "            [None]"
            End If

        Next usrLoop

        Debug.Print "Groups collection:"

        ' Enumerate all Group objects in the default
        ' workspace's Groups collection.
        For Each grpLoop In .Groups
            Debug.Print "    " &amp; grpLoop.Name
            Debug.Print "        Has as its members:"

            ' Enumerate all User objects in each Group
            ' object's Users collection.
            If grpLoop.Users.Count &lt;&gt; 0 Then
                For Each usrLoop In grpLoop.Users
                    Debug.Print "            " &amp; _
                        usrLoop.Name
                Next usrLoop
            Else
                Debug.Print "            [None]"
            End If

        Next grpLoop

        ' Delete new User and Group objects because this
        ' is only a demonstration.
        .Users.Delete "Pat Smith"
        .Groups.Delete "Accounting"

    End With

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new <SPAN CLASS="eln">User</SPAN> object and appends it to the <SPAN CLASS="eln">Users</SPAN> collection of a <SPAN CLASS="eln">Workspace</SPAN> object. It then creates a new <SPAN CLASS="eln">Group</SPAN> object and appends it to the <SPAN CLASS="eln">Groups</SPAN> collection of the <SPAN CLASS="eln">Workspace</SPAN> object. The new <SPAN CLASS="eln">Group</SPAN> object is also appended to the <SPAN CLASS="eln">Groups</SPAN> collection of the <SPAN CLASS="eln">User</SPAN> object. The new group is then given modify and delete permissions for modules.</P>
Note that in order to assign users to groups, you must either append a <SPAN CLASS="eln">User</SPAN> object to the <SPAN CLASS="eln">Users</SPAN> collection of a <SPAN CLASS="eln">Group</SPAN> object, or append a <SPAN CLASS="eln">Group</SPAN> object to the <SPAN CLASS="eln">Groups</SPAN> collection of a <SPAN CLASS="eln">User</SPAN> object. It doesn't matter which option you choose; either will result in the specified user being included in the specified group.</P>
<SPAN CLASS="nh">Note</SPAN>   When programming security, you should avoid including password and PID information in your code. The following example is intended for demonstration purposes only.</P>

<pre><code>Sub NewModulesGroup()
    Dim wsp As Workspace, dbs As Database
    Dim usr As User, grp As Group, grpMember As Group
    Dim ctr As Container

    ' Return referenct to default workspace.
    Set wsp = DBEngine.Workspaces(0)
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create User object and append to Users collection
    ' of Workspace object.
    Set usr = wsp.CreateUser("Pat Smith", "123abc789xyz", "Password")
    wsp.Users.Append usr
    ' Create Group object and append to Groups collection
    ' of Workspace object.
    Set grp = wsp.CreateGroup("Programmers", "321xyz987abc")
    wsp.Groups.Append grp
    ' Append Group object to Groups collection of User object.
    Set grpMember = usr.CreateGroup("Programmers")
    usr.Groups.Append grpMember
    ' Refresh Groups collection of User object.
    usr.Groups.Refresh
    ' Return Container object.
    Set ctr = dbs.Containers!Modules
    ' Set UserName property of Container object.
    ctr.UserName = grpMember.Name
    'Add modify and delete permissions for new group on all modules.
    ctr.Permissions = ctr.Permissions Or acSecModWriteDef
    Set dbs = Nothing
    Set wsp = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

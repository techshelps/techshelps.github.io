<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HasModule Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>HasModule Property</H2>Applies To</P>
Form, Report.</P>
Description</P>
You can use the <SPAN CLASS="eln">HasModule</SPAN> property to specify or determine whether a <SPAN CLASS="pop">form</SPAN> or <SPAN CLASS="pop">report</SPAN> has a <SPAN CLASS="pop">class module</SPAN>. Setting this property to No can improve the performance and decrease the size of your database.</P>
Setting</P>
The <SPAN CLASS="eln">HasModule</SPAN> property uses the following settings.</P>

<TABLE COLS="6" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="201pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Visual Basic</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Yes</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The form or report has a class module.</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">True</SPAN> (–1)</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">No</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">(Default) The form or report doesn't have a class module.</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">False</SPAN> (0)</P></TD></TR></TBODY></TABLE>
<BR></P>You can set the <SPAN CLASS="eln">HasModule</SPAN> property by using the form or report's <SPAN CLASS="jump">property sheet</SPAN>, a <SPAN CLASS="jump">macro</SPAN>, or <SPAN CLASS="jump">Visual Basic</SPAN>.</P>
The <B>HasModule</B> property can be set only in <SPAN CLASS="pop">form</SPAN> or <SPAN CLASS="pop">report Design view</SPAN> but can be read in any view.</P>
Remarks</P>
Forms or reports that have the <SPAN CLASS="eln">HasModule</SPAN> property set to No are considered lightweight objects. Lightweight objects are smaller and typically load and display faster than objects with associated class modules. In many cases, a form or report doesn't need to use <SPAN CLASS="pop">event procedures</SPAN> and doesn't require a class module.</P>
If your application uses a switchboard form to navigate to other forms, instead of using <SPAN CLASS="pop">command buttons</SPAN> with event procedures, you can use a command button with a macro or <SPAN CLASS="pop">hyperlink</SPAN>. For example, to open the Employees form from a command button on a switchboard, you can set the control's HyperlinkSubAddress property to "Form Employees."</P>
Lightweight objects don't appear in the <SPAN CLASS="pop">Object Browser</SPAN> and you can't use the New keyword to create a new <SPAN CLASS="pop">instance</SPAN> of the object. A lightweight form or report can be used as a <SPAN CLASS="pop">subform</SPAN> or <SPAN CLASS="pop">subreport</SPAN> and will appear in the Forms or Reports collection. Lightweight objects support the use of macros, and <SPAN CLASS="jump">public</SPAN> procedures that exist in <SPAN CLASS="pop">standard</SPAN> modules when called from the object's property sheet.</P>
Microsoft Access sets the <SPAN CLASS="eln">HasModule</SPAN> property to <SPAN CLASS="eln">True</SPAN> as soon as you attempt to view an object's module, even if no code is actually added to the module. For example, selecting <SPAN CLASS="eln">Code</SPAN> from the <SPAN CLASS="eln">View</SPAN> menu for a form in Design view causes Microsoft Access to add a class module to the Form object and set its <SPAN CLASS="eln">HasModule</SPAN> property to <SPAN CLASS="eln">True</SPAN>. You can add a class module to an object in the same way by setting the <SPAN CLASS="eln">HasModule</SPAN> property to Yes in an object's property sheet.</P>
<HR CLASS="ws">
<SPAN CLASS="wh">Warning</SPAN>   If you set the <SPAN CLASS="eln">HasModule</SPAN> property to No by using an object's property sheet or set it to <SPAN CLASS="eln">False</SPAN> by using Visual Basic, Microsoft Access deletes the object's class module and any code it may contain.</P>
<HR CLASS="we">
When you use a method of the Module object or refer to the Module property for a form or report in Design view, Microsoft Access creates the associated module and sets the object's <SPAN CLASS="eln">HasModule</SPAN> property to <SPAN CLASS="eln">True</SPAN>. If you refer to the <SPAN CLASS="eln">Module</SPAN> property of a form or report at run-time and the object has its <SPAN CLASS="eln">HasModule</SPAN> property set to <SPAN CLASS="eln">False</SPAN>, an error will occur.</P>
Objects created by using the CreateForm<SPAN CLASS="jump"> or </SPAN>CreateReport functions are lightweight by default.</P>
See Also</P>
<SPAN CLASS="eln">Module</SPAN> property.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

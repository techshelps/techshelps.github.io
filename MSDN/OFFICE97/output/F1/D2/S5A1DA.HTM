<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ReplicationConflictFunction Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>ReplicationConflictFunction Property</H2>Applies To</P>
<SPAN CLASS="eln">Document</SPAN> object.</P>
Description</P>
The <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property enables you to use custom conflict resolution code for resolving data conflicts that occur between <SPAN CLASS="pop">replicas</SPAN> upon <SPAN CLASS="pop">synchronization</SPAN>. When you set this property, Microsoft Access calls your conflict resolution function, rather than the built-in Conflict Resolver, when the user requests to resolve conflicts.</P>
Settings</P>
Set the <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property to a text <SPAN CLASS="pop">string</SPAN> that's the name of the Function<SPAN CLASS="pop"> procedure</SPAN> you wish to call. Note that the setting must be the name of a <SPAN CLASS="eln">Function</SPAN> procedure; it can't be the name of a Sub<SPAN CLASS="pop"> procedure</SPAN>. Unless this property has been set, Microsoft Access calls the Conflict Resolver.</P>
To set this property's value for the first time from Visual&nbsp;Basic, you must create the property and append it to the Properties collection of the UserDefined Document object. You should include error-handling code in your procedure to test for the case in which the property doesn't yet exist in the <SPAN CLASS="eln">Properties</SPAN> collection. For more information, see the CreateProperty method.</P>
When you create and append the <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property, you must also provide a value of <SPAN CLASS="eln">True</SPAN> (–1) for the optional <SPAN CLASS="p">DDL</SPAN> argument of the <SPAN CLASS="eln">CreateProperty</SPAN> method. This argument ensures that users can't change or delete the new <SPAN CLASS="eln">Property</SPAN> object unless they have <SPAN CLASS="eln">dbSecWriteDef</SPAN> permissions. If you don't supply a value of <SPAN CLASS="eln">True</SPAN> for this argument, your custom conflict resolution code won't be called.</P>
To return control to the built-in Conflict Resolver again, remove this property from the <SPAN CLASS="eln">Properties</SPAN> collection.</P>
You can also add or delete this property on the <SPAN CLASS="eln">Custom</SPAN> tab of the <SPAN CLASS="p">DatabaseName</SPAN> <SPAN CLASS="eln">Properties</SPAN> dialog box, available by clicking <SPAN CLASS="eln">Database Properties</SPAN> on the <SPAN CLASS="eln">File</SPAN> menu.</P>
Remarks</P>
If the same record in a replicated database has been changed in one or more replicas, conflicts will result when you synchronize a replica with the replica set. When you choose to resolve these conflicts, Microsoft Access calls the built-in Conflict Resolver. The wizard presents each conflict to the user, who must manually determine which changed record contains the correct data.</P>
If you prefer to automate conflict resolution for your application, you can write custom procedures to resolve conflicts, and then override the built-in functionality by setting the <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property. You should create a single function that acts as a point of entry into your conflict resolution code. Then set the <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property to the name of this function.</P>
If you write your own custom conflict resolution code, it must also handle replication design errors and replication data errors. To see an example, open the wizard database Wzcnf80.mda in the Office folder and examine the source code.</P>
See Also</P>
<SPAN CLASS="eln">CreateProperty</SPAN> method ("DAO Language Reference"), <SPAN CLASS="eln">Property</SPAN> object ("DAO Language Reference").</P>
Example</P>
The following function sets a Microsoft Access property on a DAO object. You can use this function to set the <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property. If the property doesn't already exist in the <SPAN CLASS="eln">Properties</SPAN> collection of the UserDefined <SPAN CLASS="eln">Document</SPAN> object, Microsoft Access creates and appends it. Note that in order to set this property, you must provide a value of <SPAN CLASS="eln">True</SPAN> (–1) for the optional <SPAN CLASS="cte">blnDDL</SPAN> argument.</P>

<pre><code>Function SetAccessProperty(obj As Object, strName As String, _
        intType As Integer, varSetting As Variant, _
        Optional blnDDL As Boolean) As Boolean
    Dim prp As Property
    Const intPropNotFound As Integer = 3270

    On Error GoTo Error_SetAccessProperty
    ' Explicitly refer to Properties collection.
    obj.Properties(strName) = varSetting
    obj.Properties.Refresh
    SetAccessProperty = True
Exit_SetAccessProperty:
    Exit Function

Error_SetAccessProperty:
    If Err = intPropNotFound Then
        ' Check whether optional argument has been passed.
        If Not IsMissing(blnDDL) Then
            ' Create property, denote type, set initial value, indicate DDL.
            Set prp = obj.CreateProperty(strName, intType, varSetting, blnDDL)
        Else
            ' Create property, denote type, set initial value.
            Set prp = obj.CreateProperty(strName, intType, varSetting)
        End If
        ' Append Property object to Properties collection.
        obj.Properties.Append prp
        obj.Properties.Refresh
        SetAccessProperty = True
        Resume Exit_SetAccessProperty
    Else
        MsgBox Err &amp; ": " &amp; vbCrLf &amp; Err.Description
        SetAccessProperty = False
        Resume Exit_SetAccessProperty
    End If
End Function</code></pre>
The following procedure calls the SetAccessProperty function to set the <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property:</P>

<pre><code>Sub SetConflictResolver()
    Dim dbs As Database, ctr As Container, doc As Document
    Dim blnReturn As Boolean

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Databases container.
    Set ctr = dbs.Containers!Databases
    ' Return reference to SummaryInfo Document object.
    Set doc = ctr.Documents!userdefined
    blnReturn = SetAccessProperty(doc, _
        "ReplicationConflictFunction", dbText, "CustomResolver", True)
    ' Evaluate return value.
    If blnReturn = True Then
        Debug.Print "Property set successfully."
    Else
        Debug.Print "Property not set successfully."
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Field Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Field Object</H1>Description</P>
A <SPAN CLASS="eln">Field</SPAN> object represents a column of data with a common <SPAN CLASS="pop">data type</SPAN> and a common set of properties.</P>
Remarks</P>
The <SPAN CLASS="eln">Fields</SPAN> collections of <SPAN CLASS="eln">Index</SPAN>, <SPAN CLASS="eln">QueryDef</SPAN>, <SPAN CLASS="eln">Relation</SPAN>, and <SPAN CLASS="eln">TableDef</SPAN> objects contain the specifications for the fields those objects represent. The <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">Recordset</SPAN> object represents the <SPAN CLASS="eln">Field</SPAN> objects in a row of data, or in a record. You use the <SPAN CLASS="eln">Field</SPAN> objects in a <SPAN CLASS="eln">Recordset</SPAN> object to read and set values for the fields in the <SPAN CLASS="pop">current record</SPAN> of the <SPAN CLASS="eln">Recordset</SPAN> object.</P>
In both <SPAN CLASS="pop">Microsoft&nbsp;Jet</SPAN> and <SPAN CLASS="pop">ODBCDirect</SPAN> workspaces, you manipulate a field using a <SPAN CLASS="eln">Field</SPAN> object and its methods and properties. For example, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">OrdinalPosition</SPAN> property to set or return the presentation order of the <SPAN CLASS="eln">Field</SPAN> object in a <SPAN CLASS="eln">Fields</SPAN> collection. (This property is read-only for ODBCDirect databases.)</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Value</SPAN> property of a field in a <SPAN CLASS="eln">Recordset</SPAN> object to set or return stored data.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">AppendChunk</SPAN> and <SPAN CLASS="eln">GetChunk</SPAN> methods and the <SPAN CLASS="eln">FieldSize</SPAN> property to get or set a value in an <SPAN CLASS="pop">OLE Object</SPAN> or <SPAN CLASS="pop">Memo</SPAN> field of a <SPAN CLASS="eln">Recordset</SPAN> object.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Type</SPAN>, <SPAN CLASS="eln">Size</SPAN>, and <SPAN CLASS="eln">Attributes</SPAN> properties to determine the type of data that can be stored in the field.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">SourceField</SPAN> and <SPAN CLASS="eln">SourceTable</SPAN> properties to determine the original source of the data.</LI></UL></SPAN>In Microsoft&nbsp;Jet workspaces, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">ForeignName</SPAN> property to set or return information about a foreign field in a <SPAN CLASS="eln">Relation</SPAN> object.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">AllowZeroLength</SPAN>, <SPAN CLASS="eln">DefaultValue</SPAN>, <SPAN CLASS="eln">Required</SPAN>, <SPAN CLASS="eln">ValidateOnSet</SPAN>, <SPAN CLASS="eln">ValidationRule</SPAN>, or <SPAN CLASS="eln">ValidationText</SPAN> properties to set or return validation conditions.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">DefaultValue</SPAN> property of a field on a <SPAN CLASS="eln">TableDef</SPAN> object to set the default value for this field when new records are added.
</LI></UL></SPAN>In ODBCDirect workspaces, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <B>Value</B>, <B>VisibleValue</B>, and <B>OriginalValue</B> properties to verify successful completion of a batch update.
</LI></UL></SPAN>To create a new <SPAN CLASS="eln">Field</SPAN> object in an <SPAN CLASS="eln">Index</SPAN>, <SPAN CLASS="eln">TableDef</SPAN>, or <SPAN CLASS="eln">Relation</SPAN> object, use the <SPAN CLASS="eln">CreateField </SPAN>method.</P>
When you access a <SPAN CLASS="eln">Field</SPAN> object as part of a <SPAN CLASS="eln">Recordset</SPAN> object, data from the current record is visible in the <SPAN CLASS="eln">Field</SPAN> object's <SPAN CLASS="eln">Value</SPAN> property. To manipulate data in the <SPAN CLASS="eln">Recordset</SPAN> object, you don't usually reference the <SPAN CLASS="eln">Fields</SPAN> collection directly; instead, you indirectly reference the <SPAN CLASS="eln">Value</SPAN> property of the <SPAN CLASS="eln">Field</SPAN> object in the <SPAN CLASS="eln">Fields</SPAN> collection of the <SPAN CLASS="eln">Recordset</SPAN> object.</P>
To refer to a <SPAN CLASS="eln">Field</SPAN> object in a collection by its ordinal number or by its <SPAN CLASS="eln">Name</SPAN> property setting, use any of the following syntax forms:</P>
<SPAN CLASS="eln">Fields</SPAN><SPAN CLASS="l">(</SPAN>0<SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="eln">Fields</SPAN><SPAN CLASS="l">("</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">")</SPAN></P>
<SPAN CLASS="eln">Fields</SPAN><SPAN CLASS="l">![</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">]</SPAN></P>
With the same syntax forms, you can also refer to the <SPAN CLASS="eln">Value</SPAN> property of a <SPAN CLASS="eln">Field</SPAN> object that you create and append to a <SPAN CLASS="eln">Fields</SPAN> collection. The context of the field reference will determine whether you are referring to the <SPAN CLASS="eln">Field</SPAN> object or the <SPAN CLASS="eln">Value</SPAN> property of the <SPAN CLASS="eln">Field</SPAN> object.</P>
Properties</P>
<SPAN CLASS="eln">AllowZeroLength</SPAN> property, <SPAN CLASS="eln">Attributes</SPAN> property, <SPAN CLASS="eln">CollatingOrder</SPAN> property, <SPAN CLASS="eln">DataUpdatable</SPAN> property, <SPAN CLASS="eln">DefaultValue</SPAN> property, <SPAN CLASS="eln">FieldSize</SPAN> property, <SPAN CLASS="eln">ForeignName</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">OrdinalPosition</SPAN> property, <SPAN CLASS="eln">OriginalValue</SPAN> property, <SPAN CLASS="eln">Required</SPAN> property, <SPAN CLASS="eln">Size</SPAN> property, <SPAN CLASS="eln">SourceField</SPAN>, <SPAN CLASS="eln">SourceTable</SPAN> properties, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">ValidateOnSet</SPAN> property, <SPAN CLASS="eln">ValidationRule</SPAN> property, <SPAN CLASS="eln">ValidationText</SPAN> property, <SPAN CLASS="eln">Value</SPAN> property, <SPAN CLASS="eln">VisibleValue</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">AppendChunk</SPAN> method, <SPAN CLASS="eln">CreateProperty</SPAN> method, <SPAN CLASS="eln">GetChunk</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">CreateField</SPAN> method.</P>
Specifics (Microsoft&nbsp;Access)</P>
In addition to the properties defined by the <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN>, a <SPAN CLASS="eln">Field</SPAN> object in the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">QueryDef</SPAN> object or a <SPAN CLASS="eln">TableDef</SPAN> object may also contain the following Microsoft&nbsp;Access application-defined properties.</P>
For details on reading and setting these properties, see the individual properties and the <SPAN CLASS="eln">Property</SPAN> object.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="180pt" VALIGN="TOP"><COL WIDTH="180pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">Caption</SPAN></LI></UL></SPAN></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">ColumnHidden</SPAN></LI></UL></SPAN></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">ColumnOrder</SPAN></LI></UL></SPAN></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">ColumnWidth</SPAN></LI></UL></SPAN></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">DecimalPlaces</SPAN></LI></UL></SPAN></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">Description</SPAN></LI></UL></SPAN></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">Format</SPAN></LI></UL></SPAN></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">InputMask</SPAN></LI></UL></SPAN></TD></TR></TBODY></TABLE>
<BR></P>Example</P>
This example shows what properties are valid for a <SPAN CLASS="eln">Field</SPAN> object depending on where the <SPAN CLASS="eln">Field</SPAN> resides (for example, the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">TableDef</SPAN>, the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">QueryDef</SPAN>, and so forth). The FieldOutput procedure is required for this procedure to run.</P>

<pre><code>Sub FieldX()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset
    Dim fldTableDef As Field
    Dim fldQueryDef As Field
    Dim fldRecordset As Field
    Dim fldRelation As Field
    Dim fldIndex As Field
    Dim prpLoop As Property

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees")

    ' Assign a Field object from different Fields
    ' collections to object variables.
    Set fldTableDef = _
        dbsNorthwind.TableDefs(0).Fields(0)
    Set fldQueryDef =dbsNorthwind.QueryDefs(0).Fields(0)
    Set fldRecordset = rstEmployees.Fields(0)
    Set fldRelation =dbsNorthwind.Relations(0).Fields(0)
    Set fldIndex = _
        dbsNorthwind.TableDefs(0).Indexes(0).Fields(0)

    ' Print report.
    FieldOutput "TableDef", fldTableDef
    FieldOutput "QueryDef", fldQueryDef
    FieldOutput "Recordset", fldRecordset
    FieldOutput "Relation", fldRelation
    FieldOutput "Index", fldIndex

    rstEmployees.Close
    dbsNorthwind.Close

End Sub
Sub FieldOutput(strTemp As String, fldTemp As Field)
    ' Report function for FieldX.

    Dim prpLoop As Property

    Debug.Print "Valid Field properties in " &amp; strTemp

    ' Enumerate Properties collection of passed Field
    ' object.
    For Each prpLoop In fldTemp.Properties
        ' Some properties are invalid in certain
        ' contexts (the Value property in the Fields
        ' collection of a TableDef for example). Any
        ' attempt to use an invalid property will
        ' trigger an error.
        On Error Resume Next
        Debug.Print "    " &amp; prpLoop.Name &amp; " = " &amp; _
            prpLoop.Value
        On Error GoTo 0
    Next prpLoop

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new <SPAN CLASS="eln">Field</SPAN> object, sets some of its properties, and appends it to the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">TableDef</SPAN> object. The procedure then enumerates all fields in the <SPAN CLASS="eln">Fields</SPAN> collection of the <SPAN CLASS="eln">TableDef</SPAN> object.</P>

<pre><code>Sub NewField()
    Dim dbs As Database, tdf As TableDef
    Dim fld As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Create new Field object.
    Set fld = tdf.CreateField("SSN#")
    ' Set Type and Size properties of Field object.
    fld.Type = dbText
    fld.Size = 11
    ' Append field.
    tdf.Fields.Append fld
    ' Enumerate all fields in Fields collection of TableDef object.
    For Each fld in tdf.Fields
        Debug.Print fld.Name
    Next fld
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AddFromFile Method (Module Object)</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>AddFromFile Method (Module Object)</H2>Applies To</P>
<SPAN CLASS="eln">Module</SPAN> object.</P>
Description</P>
The <SPAN CLASS="eln">AddFromFile</SPAN> method adds the contents of a text file to a Module object. The <SPAN CLASS="eln">Module</SPAN> object may represent a <SPAN CLASS="pop">standard module</SPAN> or a <SPAN CLASS="pop">class module</SPAN>.</P>
Syntax</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.AddFromFile </SPAN><SPAN CLASS="p">filename</SPAN></P>
The <SPAN CLASS="eln">AddFromFile </SPAN>method has the following arguments.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="269pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Module</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">filename</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name and full path of a text (.txt) file or another file that stores text in an ANSI format.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
The <SPAN CLASS="eln">AddFromFile</SPAN> method places the contents of the specified text file immediately after the <SPAN CLASS="pop">Declarations section</SPAN> and before the first procedure in the module if it contains other procedures.</P>
The <SPAN CLASS="eln">AddFromFile</SPAN> method enables you to import code or comments stored in a text file.</P>
In order to add the contents of a file to a <SPAN CLASS="pop">form</SPAN> or <SPAN CLASS="pop">report</SPAN> module, the form or report must be open in <SPAN CLASS="pop">form Design view</SPAN> or <SPAN CLASS="pop">report Design view</SPAN>. In order to add the contents of a file to a standard module or class module, the module must be open.</P>
See Also</P>
<SPAN CLASS="eln">AddFromString</SPAN> method.</P>
Example</P>
The following function uses the <SPAN CLASS="eln">AddFromString</SPAN> and <SPAN CLASS="eln">AddFromFile</SPAN> methods to add a string and the contents of a text file to a standard module:</P>

<pre><code>Function AddTextToModule(strModuleName As String, strFileName As String, _
        strText As String) As Boolean
    Dim mdl As Module

    On Error GoTo Error_AddTextToModule
    DoCmd.OpenModule strModuleName
    Set mdl = Modules(strModuleName)
    mdl.AddFromFile strFileName
    mdl.AddFromString strText
    AddTextToModule = True

Exit_AddTextToModule:
    Exit Function

Error_AddTextToModule:
    MsgBox Err &amp; ": " &amp; Err.Description
    AddTextToModule = False
    Resume Exit_AddTextToModule
End Function</code></pre>
You could call the preceding function from a procedure such as the following. Create a text file called Functions.txt, add some Visual Basic procedures, and save it in the My Documents directory. Then paste both the preceding procedure and the following procedure into a new standard module in the Northwind sample database. Run the following procedure:</P>

<pre><code>Sub AddFunctionsFromText()
    Dim strModuleName As String, strFileName As String
    Dim strText As String

    strModuleName = "Utility Functions"
    strFileName = "C:\My Documents\Functions.txt"
    strText = "Public intX As Integer" &amp; vbCrLf _
        &amp; "Const conPathName As String = " _
        &amp; """C:\Program Files\Microsoft Office\Office\Samples\"""
    If AddTextToModule(strModuleName, strFileName, strText) = True Then
        Debug.Print "String and file contents added successfully."
    Else
        Debug.Print "String and file contents not added successfully."
    End If
End Sub</code></pre>
The next example creates a new form and adds a string and the contents of the Functions.txt file to its module. Run the following procedure from a standard module:</P>

<pre><code>Sub AddTextToFormModule()
    Dim frm As Form, mdl As Module

    Set frm = CreateForm
    Set mdl = frm.Module
    mdl.AddFromString "Public intY As Integer"
    mdl.AddFromFile "C:\My Documents\Functions.txt"
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cancel Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Cancel Method</H2>Applies To</P>
<SPAN CLASS="eln">Connection</SPAN> object, Dynamic-Type <SPAN CLASS="eln">Recordset</SPAN> object, Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, Forward-Only–Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">QueryDef</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Cancels execution of a pending asynchronous method call (<SPAN CLASS="pop">ODBCDirect workspaces</SPAN> only).</P>
Syntax</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="lee">Cancel</SPAN></P>
The <SPAN CLASS="lee">Cancel</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="56pt" VALIGN="TOP"><COL WIDTH="304pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A string expression that evaluates to one of the objects in the "Applies To" list.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Use the <SPAN CLASS="lee">Cancel</SPAN> method to terminate execution of an asynchronous <SPAN CLASS="lee">Execute</SPAN>, <B>MoveLast</B>, <SPAN CLASS="lee">OpenConnection,</SPAN> or <SPAN CLASS="lee">OpenRecordset</SPAN> method call (that is, the method was invoked with the <SPAN CLASS="lee">dbRunAsync</SPAN> option). <SPAN CLASS="lee">Cancel</SPAN> will return a run-time error if <SPAN CLASS="lee">dbRunAsync</SPAN> was not used in the method you're trying to terminate.</P>
The following table shows what task is terminated when you use the <SPAN CLASS="lee">Cancel</SPAN> method on a particular type of object.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="136pt" VALIGN="TOP"><COL WIDTH="223pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">If <I>object</I> is a</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">This asynchronous method is terminated</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Connection</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Execute</SPAN> or <SPAN CLASS="lee">OpenConnection</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">QueryDef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Execute</SPAN></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">Recordset</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="lee">MoveLast</SPAN><SPAN CLASS="lee"> or</SPAN> <SPAN CLASS="lee">OpenRecordset</SPAN></P></TD></TR></TBODY></TABLE>
<BR></P>An error will occur if, following a <SPAN CLASS="lee">Cancel</SPAN> method call, you try to reference the object that would have been created by an asynchronous <SPAN CLASS="lee">OpenConnection</SPAN> or <SPAN CLASS="lee">OpenRecordset</SPAN> call (that is, the <SPAN CLASS="lee">Connection</SPAN> or <SPAN CLASS="lee">Recordset</SPAN> object from which you called the <SPAN CLASS="lee">Cancel</SPAN> method).</P>
See Also</P>
<SPAN CLASS="eln">Execute</SPAN> method, <SPAN CLASS="eln">MoveFirst</SPAN>, <SPAN CLASS="eln">MoveLast</SPAN>, <SPAN CLASS="eln">MoveNext</SPAN>, <SPAN CLASS="eln">MovePrevious</SPAN> methods, <SPAN CLASS="eln">OpenConnection</SPAN> method, <SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">StillExecuting</SPAN> property.</P>
Example</P>
This example uses the <SPAN CLASS="eln">StillExecuting</SPAN> property and the <SPAN CLASS="eln">Cancel</SPAN> method to asynchronously open a <SPAN CLASS="eln">Connection</SPAN> object.</P>

<pre><code>Sub CancelConnectionX()

    Dim wrkMain As Workspace
    Dim conMain As Connection
    Dim sngTime As Single

    Set wrkMain = CreateWorkspace("ODBCWorkspace", _
        "admin", "", dbUseODBC)
    ' Open the connection asynchronously.
    Set conMain = wrkMain.OpenConnection("Publishers", _
        dbDriverNoPrompt + dbRunAsync, False, _
        "ODBC;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers")

    sngTime = Timer

    ' Wait five seconds.
    Do While Timer - sngTime &lt; 5
    Loop

    ' If the connection has not been made, ask the user
    ' if she wants to keep waiting. If she does not, cancel
    ' the connection and exit the procedure.
    Do While conMain.StillExecuting

        If MsgBox("No connection yet--keep waiting?", _
                vbYesNo) = vbNo Then
            conMain.Cancel
            MsgBox "Connection cancelled!"
            wrkMain.Close
            Exit Sub
        End If
    Loop

    With conMain
        ' Use the Connection object conMain.
        .Close
    End With

    wrkMain.Close

End Sub</code></pre>
This example uses the <SPAN CLASS="eln">StillExecuting</SPAN> property and the <SPAN CLASS="eln">Cancel</SPAN> method to asynchronously execute a <SPAN CLASS="eln">QueryDef</SPAN> object.</P>

<pre><code>Sub CancelQueryDefX()

    Dim wrkMain As Workspace
    Dim conMain As Connection
    Dim qdfTemp As QueryDef
    Dim sngTime As Single

    Set wrkMain = CreateWorkspace("ODBCWorkspace", _
        "admin", "", dbUseODBC)
    Set conMain = wrkMain.OpenConnection("Publishers", _
        dbDriverNoPrompt, False, _
        "ODBC;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers")

    Set qdfTemp = conMain.CreateQueryDef("")

    With qdfTemp
        .SQL = "UPDATE roysched " &amp; _
            "SET royalty = royalty * 2 " &amp; _
            "WHERE title_id LIKE 'BU____' OR " &amp; _
            "title_id LIKE 'PC____'"

        ' Execute the query asynchronously.
        .Execute dbRunAsync

        sngTime = Timer

        ' Wait five seconds.
        Do While Timer - sngTime &lt; 5
        Loop

        ' If the query has not completed, ask the user if
        ' she wants to keep waiting. If she does not, cancel
        ' the query and exit the procedure.
        Do While .StillExecuting

            If MsgBox("Query still running--keep waiting?", _
                    vbYesNo) = vbNo Then
                .Cancel
                MsgBox "Query cancelled!"
                Exit Do
            End If

        Loop

    End With

    conMain.Close
    wrkMain.Close

End Sub</code></pre>
This example uses the <SPAN CLASS="eln">StillExecuting</SPAN> property and the <SPAN CLASS="eln">Cancel</SPAN> method to asynchronously move to the last record of a <SPAN CLASS="eln">Recordset</SPAN> object.</P>

<pre><code>Sub CancelRecordsetX()

    Dim wrkMain As Workspace
    Dim conMain As Connection
    Dim rstTemp As Recordset
    Dim sngTime As Single

    Set wrkMain = CreateWorkspace("ODBCWorkspace", _
        "admin", "", dbUseODBC)
    Set conMain = wrkMain.OpenConnection("Publishers", _
        dbDriverNoPrompt, False, _
        "ODBC;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers")
    Set rstTemp = conMain.OpenRecordset( _
        "SELECT * FROM roysched", dbOpenDynaset)

    With rstTemp

        ' Call the MoveLast method asynchronously.
        .MoveLast dbRunAsync

        sngTime = Timer

        ' Wait five seconds.
        Do While Timer - sngTime &lt; 5
        Loop

        ' If the MoveLast has not completed, ask the user if
        ' she wants to keep waiting. If she does not, cancel
        ' the MoveLast and exit the procedure.
        Do While .StillExecuting

            If MsgBox("Not at last record yet--keep waiting?", _
                vbYesNo) = vbNo Then
                .Cancel
                MsgBox "MoveLast cancelled!"
                conMain.Close
                wrkMain.Close
                Exit Sub
            End If

        Loop

        ' Use recordset.
        .Close

    End With

    conMain.Close
    wrkMain.Close

End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

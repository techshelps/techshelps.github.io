<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Property Object</H1>Description</P>
A <SPAN CLASS="eln">Property</SPAN> object represents a built-in or user-defined characteristic of a <SPAN CLASS="pop">DAO object</SPAN>.</P>
Remarks</P>
Every DAO object except the <B>Connection</B> and <B>Error</B> objects contains a <SPAN CLASS="eln">Properties</SPAN> collection which has <SPAN CLASS="eln">Property</SPAN> objects corresponding to built-in properties of that DAO object. The user can also define <SPAN CLASS="eln">Property</SPAN> objects and append them to the <SPAN CLASS="eln">Properties</SPAN> collection of some DAO objects. These <SPAN CLASS="eln">Property</SPAN> objects (which are often just called properties) uniquely characterize that instance of the object.</P>
You can create user-defined properties for the following objects:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1"><SPAN CLASS="eln">Database</SPAN>, <SPAN CLASS="eln">Index</SPAN>, <SPAN CLASS="eln">QueryDef</SPAN>, and <SPAN CLASS="eln">TableDef</SPAN> objects</LI><LI CLASS="ULI1"><SPAN CLASS="eln">Field</SPAN> objects in <SPAN CLASS="eln">Fields</SPAN> collections of <SPAN CLASS="eln">QueryDef</SPAN> and <SPAN CLASS="eln">TableDef</SPAN> objects
</LI></UL></SPAN>To add a user-defined property, use the <SPAN CLASS="eln">CreateProperty</SPAN> method to create a <SPAN CLASS="eln">Property</SPAN> object with a unique <SPAN CLASS="eln">Name</SPAN> property setting. Set the <SPAN CLASS="eln">Type</SPAN> and <SPAN CLASS="eln">Value</SPAN> properties of the new <SPAN CLASS="eln">Property</SPAN> object, and then append it to the <SPAN CLASS="eln">Properties</SPAN> collection of the appropriate object. The object to which you are adding the user-defined property must already be appended to a collection. Referencing a user-defined <SPAN CLASS="eln">Property</SPAN> object that has not yet been appended to a <SPAN CLASS="eln">Properties</SPAN> collection will cause an error, as will appending a user-defined <SPAN CLASS="eln">Property</SPAN> object to a <SPAN CLASS="eln">Properties</SPAN> collection containing a <SPAN CLASS="eln">Property</SPAN> object of the same name.</P>
You can delete user-defined properties from the <SPAN CLASS="eln">Properties</SPAN> collection, but you can't delete built-in properties.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;A user-defined <SPAN CLASS="eln">Property</SPAN> object is associated only with the specific instance of an object. The property isn't defined for all instances of objects of the selected type.</P>
You can use the <SPAN CLASS="eln">Properties</SPAN> collection of an object to enumerate the object's built-in and user-defined properties. You don't need to know beforehand exactly which properties exist or what their characteristics (<SPAN CLASS="eln">Name</SPAN> and <SPAN CLASS="eln">Type</SPAN> properties) are to manipulate them. However, if you try to read a write-only property, such as the <SPAN CLASS="eln">Password</SPAN> property of a <SPAN CLASS="eln">Workspace</SPAN> object, or try to read or write a property in an inappropriate context, such as the <SPAN CLASS="eln">Value</SPAN> property setting of a <SPAN CLASS="eln">Field</SPAN> object in the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">TableDef</SPAN> object, an error occurs.</P>
The <SPAN CLASS="eln">Property</SPAN> object also has four built-in properties:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The <SPAN CLASS="eln">Name</SPAN> property, a String that uniquely identifies the property.</LI><LI CLASS="ULI1">The <SPAN CLASS="eln">Type</SPAN> property, an Integer that specifies the property data type.</LI><LI CLASS="ULI1">The <SPAN CLASS="eln">Value</SPAN> property, a Variant that contains the property setting.</LI><LI CLASS="ULI1">The <SPAN CLASS="eln">Inherited</SPAN> property, a Boolean that indicates whether the property is inherited from another object. For example, a <SPAN CLASS="eln">Field</SPAN> object in a <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">Recordset</SPAN> object can inherit properties from the underlying <SPAN CLASS="eln">TableDef</SPAN> or <SPAN CLASS="eln">QueryDef</SPAN> object.
</LI></UL></SPAN>To refer to a built-in <SPAN CLASS="eln">Property</SPAN> object in a collection by its ordinal number or by its <SPAN CLASS="eln">Name</SPAN> property setting, use any of the following syntax forms:</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.Properties</SPAN><SPAN CLASS="l">(</SPAN>0<SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.Properties</SPAN><SPAN CLASS="l">("</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">")</SPAN></P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.Properties</SPAN><SPAN CLASS="l">![</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">]</SPAN></P>
For a built-in property, you can also use this syntax:</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="p">name</SPAN></P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;For a user-defined property, you must use the full <SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.Properties</SPAN><SPAN CLASS="l">("</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">")</SPAN> syntax.</P>
With the same syntax forms, you can also refer to the <SPAN CLASS="eln">Value</SPAN> property of a <SPAN CLASS="eln">Property</SPAN> object. The context of the reference will determine whether you are referring to the <SPAN CLASS="eln">Property</SPAN> object itself or the <SPAN CLASS="eln">Value</SPAN> property of the <SPAN CLASS="eln">Property</SPAN> object.</P>
Properties</P>
<SPAN CLASS="eln">Inherited</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">Value</SPAN> property.</P>
See Also</P>
<SPAN CLASS="eln">CreateProperty</SPAN> method, <SPAN CLASS="eln">Database</SPAN> object.</P>
Specifics (Microsoft&nbsp;Access)</P>
Several types of properties exist in Microsoft&nbsp;Access. Each of these properties can be represented in Visual&nbsp;Basic code by a <SPAN CLASS="eln">Property</SPAN> object variable, and each is a member of a <SPAN CLASS="eln">Properties</SPAN> collection.</P>
Properties That Apply to Data Access Objects</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Built-in properties are defined by the <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN> for all <SPAN CLASS="pop">Data Access Objects (DAO)</SPAN>.</LI><LI CLASS="ULI1">User-defined properties can be added to some DAO objects. These DAO objects include <SPAN CLASS="eln">Database</SPAN>, <SPAN CLASS="eln">Index</SPAN>, <SPAN CLASS="eln">QueryDef</SPAN>, and <SPAN CLASS="eln">TableDef</SPAN> objects, and <SPAN CLASS="eln">Field</SPAN> objects in the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">QueryDef</SPAN> or <SPAN CLASS="eln">TableDef</SPAN> object.</LI><LI CLASS="ULI1">Some properties defined by Microsoft&nbsp;Access apply to DAO objects. These properties can generally be set either in the Microsoft&nbsp;Access window or from Visual&nbsp;Basic. The Jet database engine cannot recognize these properties until corresponding <SPAN CLASS="eln">Property</SPAN> objects are specifically created and appended to the <SPAN CLASS="eln">Properties</SPAN> collection. The DAO objects to which such properties may apply are <SPAN CLASS="eln">QueryDef</SPAN> and <SPAN CLASS="eln">TableDef</SPAN> objects, and <SPAN CLASS="eln">Field</SPAN> objects in the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">QueryDef</SPAN> or <SPAN CLASS="eln">TableDef</SPAN> object. For lists of these Microsoft&nbsp;Access–defined properties, see the Microsoft&nbsp;Access Specifics topic for the <SPAN CLASS="eln">TableDef</SPAN>, <SPAN CLASS="eln">QueryDef</SPAN>, and <SPAN CLASS="eln">Field</SPAN> objects.
</LI></UL></SPAN>Microsoft&nbsp;Access–defined properties that apply to DAO objects differ from properties defined by the Jet database engine in several ways.</P>
To refer to a user-defined property or a property defined by Microsoft&nbsp;Access, you must explicitly refer to the <SPAN CLASS="eln">Properties</SPAN> collection. The fastest way to refer to a Microsoft&nbsp;Access property is by the following syntax:</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.Properties!</SPAN><SPAN CLASS="p">propertyname</SPAN></P>
In the preceding example, <SPAN CLASS="ntrm">object </SPAN>is a DAO object and <SPAN CLASS="p">propertyname</SPAN><SPAN CLASS="ntrm"> </SPAN>is the name of a Microsoft&nbsp;Access property.</P>
You can also use the following, slightly slower syntax:</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.Properties("</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">")</SPAN></P>
In contrast, to refer to properties defined by the Jet database engine, you can simply use the <SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="p">name</SPAN> syntax.</P>
If you are setting the value of a Microsoft&nbsp;Access–defined property for the first time, you first need to create it by using the <SPAN CLASS="eln">CreateProperty</SPAN> method. For example, the <SPAN CLASS="eln">Caption</SPAN> property of a <SPAN CLASS="eln">Field</SPAN> object is a Microsoft&nbsp;Access–defined property. If you haven't previously set the <SPAN CLASS="eln">Caption</SPAN> property in <SPAN CLASS="pop">table Design view</SPAN>, but are setting the property for the first time from Visual&nbsp;Basic code, you must first create that property by using the <SPAN CLASS="eln">CreateProperty</SPAN> method and append it to the <SPAN CLASS="eln">Properties</SPAN> collection before you can set its value.</P>
A Microsoft&nbsp;Access–defined property is automatically appended to the <SPAN CLASS="eln">Properties</SPAN> collection the first time it is set in the Microsoft&nbsp;Access window, so if you have already set a property in the user interface, you don't need to create and append the property in code. For example, you can set the <SPAN CLASS="eln">Caption</SPAN> property for a table in <SPAN CLASS="pop">Datasheet view</SPAN> by clicking <SPAN CLASS="eln">Font</SPAN> on the <SPAN CLASS="eln">Format</SPAN> menu. This property is then included in the <SPAN CLASS="eln">Properties</SPAN> collection of a <SPAN CLASS="eln">TableDef</SPAN> object that points to the table.</P>
Until you have set a Microsoft&nbsp;Access–defined property either in table Design view or&nbsp;from Visual&nbsp;Basic code, that property won't appear in the <SPAN CLASS="eln">Properties</SPAN> collection. When you set these properties from Visual&nbsp;Basic, you should include error-handling code that checks to see if the property exists in the <SPAN CLASS="eln">Properties</SPAN> collection, and creates and appends the property if it doesn't.</P>
Properties that Apply to Microsoft&nbsp;Access Objects</P>
Like DAO objects, every <SPAN CLASS="pop">Microsoft&nbsp;Access object</SPAN> contains a <SPAN CLASS="eln">Properties</SPAN> collection, which has built-in <SPAN CLASS="eln">Property</SPAN> objects. For example, <SPAN CLASS="eln">Property</SPAN> objects that apply to a form are members of the <SPAN CLASS="eln">Properties</SPAN> collection of the <SPAN CLASS="eln">Form</SPAN> object.</P>
You can also create user-defined properties for Microsoft&nbsp;Access objects. For example, you might create a property called TextType that applies to a text box control.</P>
<SPAN CLASS="eln">Property</SPAN> objects in the <SPAN CLASS="eln">Properties</SPAN> collections of <SPAN CLASS="eln">Form</SPAN>, <SPAN CLASS="eln">Report</SPAN>, and <SPAN CLASS="eln">Control</SPAN> objects differ from DAO <SPAN CLASS="eln">Property</SPAN> objects in that they don't have an <SPAN CLASS="eln">Inherited</SPAN> property.</P>
You can enumerate the <SPAN CLASS="eln">Property</SPAN> objects in the <SPAN CLASS="eln">Properties</SPAN> collections of <SPAN CLASS="eln">Form</SPAN>, <SPAN CLASS="eln">Report</SPAN>, and <SPAN CLASS="eln">Control</SPAN> objects. However, the Microsoft&nbsp;Access <SPAN CLASS="eln">Application</SPAN> object and the <SPAN CLASS="eln">Screen</SPAN> object have <SPAN CLASS="eln">Properties</SPAN> collections that can't be enumerated. Additionally, the properties of these objects are read-only.</P>
Example</P>
This example creates a user-defined property for the current database, sets its <SPAN CLASS="eln">Type</SPAN> and <SPAN CLASS="eln">Value</SPAN> properties, and appends it to the <SPAN CLASS="eln">Properties</SPAN> collection of the database. Then the example enumerates all properties in the database.</P>

<pre><code>Sub PropertyX()

    Dim dbsNorthwind As Database
    Dim prpNew As Property
    Dim prpLoop As Property

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    With dbsNorthwind
        ' Create and append user-defined property.
        Set prpNew = .CreateProperty()
        prpNew.Name = "UserDefined"
        prpNew.Type = dbText
        prpNew.Value = "This is a user-defined property."
        .Properties.Append prpNew

        ' Enumerate all properties of current database.
        Debug.Print "Properties of " &amp; .Name
        For Each prpLoop In .Properties
            With prpLoop
                Debug.Print "    " &amp; .Name
                Debug.Print "        Type: " &amp; .Type
                Debug.Print "        Value: " &amp; .Value
                Debug.Print "        Inherited: " &amp; _
                    .Inherited
            End With
        Next prpLoop

        ' Delete new property because this is a
        ' demonstration.
        .Properties.Delete "UserDefined"
    End With

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a property that is defined by Microsoft&nbsp;Access, but applies to DAO objects. Because the Microsoft&nbsp;Jet database engine cannot recognize properties defined by Microsoft&nbsp;Access, you must create a new <SPAN CLASS="eln">Property</SPAN> object and append it to the <SPAN CLASS="eln">Properties</SPAN> collection if you are setting the property for the first time.</P>
You can use the same function to set a user-defined property on a Microsoft&nbsp;Access object or on a DAO object.</P>
Note that you must specify the correct constant for the <SPAN CLASS="p">type</SPAN> argument when you create&nbsp;the property. If you're not certain which data type you should use, see the individual property.</P>

<pre><code>Function SetAccessProperty(obj As Object, strName As String, _
        intType As Integer, varSetting As Variant) As Boolean
    Dim prp As Property
    Const conPropNotFound As Integer = 3270

    On Error GoTo ErrorSetAccessProperty
    ' Explicitly refer to Properties collection.
    obj.Properties(strName) = varSetting
    obj.Properties.Refresh
    SetAccessProperty = True
    
ExitSetAccessProperty:
    Exit Function
    
ErrorSetAccessProperty:
    If Err = conPropNotFound Then
        ' Create property, denote type, and set initial value.
        Set prp = obj.CreateProperty(strName, intType, varSetting)
        ' Append Property object to Properties collection.
        obj.Properties.Append prp
        obj.Properties.Refresh
        SetAccessProperty = True
        Resume ExitSetAccessProperty
    Else
        MsgBox Err &amp; ": " &amp; vbCrLf &amp; Err.Description
        SetAccessProperty = False
        Resume ExitSetAccessProperty
    End If
End Function</code></pre>
You could call the preceding function with a procedure such as the following:</P>

<pre><code>Sub CallPropertySet()
    Dim dbs As Database, tdf As TableDef
    Dim blnReturn As Boolean
    
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Call SetAccessProperty function.
    blnReturn = SetAccessProperty(tdf, _
        "DatasheetFontItalic", dbBoolean, True)
    ' Evaluate return value.
    If blnReturn = True Then
        Debug.Print "Property set successfully."
    Else
        Debug.Print "Property not set successfully."
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

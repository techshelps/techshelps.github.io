<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ValidationRule, ValidationText Properties</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>ValidationRule, ValidationText Properties</H2>Applies To</P>
Check Box control, Combo Box control, List Box control, Option Button control, Option Group control, Table field, Text Box control, Toggle Button control.</P>
Description</P>
You can use the <SPAN CLASS="eln">ValidationRule</SPAN> property to specify requirements for data entered into&nbsp;a record, field, or control. When data is entered that violates the <SPAN CLASS="eln">ValidationRule</SPAN> setting, you can use the <SPAN CLASS="eln">ValidationText</SPAN> property to specify the message to be displayed to the user.</P>
<SPAN CLASS="nh">Note</SPAN>   The <SPAN CLASS="eln">ValidationRule</SPAN> and <SPAN CLASS="eln">ValidationText</SPAN> properties don't apply to <SPAN CLASS="pop">check box</SPAN>, <SPAN CLASS="pop">option button</SPAN>, or <SPAN CLASS="pop">toggle button</SPAN> <SPAN CLASS="pop">controls</SPAN> when they are in an <SPAN CLASS="pop">option group</SPAN>. They apply only to the option&nbsp;group itself.</P>
Setting</P>
Enter an <SPAN CLASS="pop">expression</SPAN> for the <SPAN CLASS="eln">ValidationRule</SPAN> property setting and text for the <SPAN CLASS="eln">ValidationText</SPAN> property setting. The maximum length for the <SPAN CLASS="eln">ValidationRule</SPAN> property setting is 2048 characters. The maximum length for the <SPAN CLASS="eln">ValidationText</SPAN> property setting is 255 characters.</P>
For controls, you can set the <SPAN CLASS="eln">ValidationRule</SPAN> property to any valid expression. For field and record <SPAN CLASS="pop">validation rules</SPAN>, the expression can't contain user-defined functions, <SPAN CLASS="pop">domain aggregate</SPAN> or <SPAN CLASS="pop">aggregate functions</SPAN>, the CurrentUser or Eval function, or references to forms, queries, or tables. In addition, field validation rules can't contain references to other fields. For records, expressions can include references to fields in that table.</P>
You can set the <SPAN CLASS="eln">ValidationRule</SPAN> and <SPAN CLASS="eln">ValidationText</SPAN> properties by using:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The Field Properties section of <SPAN CLASS="pop">table Design view</SPAN> (for a field validation rule).</LI><LI CLASS="ULI1">The <SPAN CLASS="pop">property sheet</SPAN> for a table by clicking <SPAN CLASS="eln">Properties</SPAN> on the <SPAN CLASS="eln">View</SPAN> menu in table Design view (for a record validation rule).</LI><LI CLASS="ULI1">The <SPAN CLASS="jump">property sheet</SPAN> for a control on a form.</LI><LI CLASS="ULI1">A <SPAN CLASS="jump">macro</SPAN> or <SPAN CLASS="jump">Visual Basic</SPAN>. In Visual Basic, use a <SPAN CLASS="pop">string expression</SPAN> to set these properties.
</LI></UL></SPAN>For table fields and records, you can also set these properties in Visual Basic by using the DAO ValidationRule property.</P>
Remarks</P>
Microsoft Access automatically validates values based on a field's data type; for example, Microsoft Access doesn't allow text in a numeric field. You can set rules that are more specific by using the <SPAN CLASS="eln">ValidationRule</SPAN> property.</P>
If you set the <SPAN CLASS="eln">ValidationRule</SPAN> property but not the <SPAN CLASS="eln">ValidationText</SPAN> property, Microsoft Access displays a standard error message when the validation rule is violated. If you set the <SPAN CLASS="eln">ValidationText</SPAN> property, the text you enter is displayed as the error message.</P>
For example, when a record is added for a new employee, you can enter a <SPAN CLASS="eln">ValidationRule</SPAN> property requiring that the value in the employee's StartDate field fall between the company's founding date and the current date. If the date entered isn't in this range, you can display the <SPAN CLASS="eln">ValidationText</SPAN> property message: "Start date is incorrect."</P>
If you create a control by dragging a field from the <SPAN CLASS="pop">field list</SPAN>, the field's validation rule remains in effect, although it isn't displayed in the control's <SPAN CLASS="eln">ValidationRule</SPAN> property box in the property sheet. This is because a field's validation rule is inherited by a control bound to that field.</P>
Control, field, and record validation rules are applied as follows:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Validation rules you set for fields and controls are applied when you edit the data and the <SPAN CLASS="pop">focus</SPAN> leaves the field or control.</LI><LI CLASS="ULI1">Validation rules for records are applied when you move to another record.</LI><LI CLASS="ULI1">If you create validation rules for both a field and a control bound to the field, both validation rules are applied when you edit data and the focus leaves the control.
</LI></UL></SPAN>The following table contains expression examples for the <SPAN CLASS="eln">ValidationRule</SPAN> and <SPAN CLASS="eln">ValidationText</SPAN> properties.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="196pt" VALIGN="TOP"><COL WIDTH="163pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ValidationRule property</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ValidationText property</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">&lt;&gt; 0</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Entry must be a nonzero value.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">&gt; 1000 Or Is Null </P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Entry must be blank or greater than 1000.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Like "A????"</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Entry must be 5 characters and begin with the letter "A".</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">&gt;= #1/1/96# And &lt;#1/1/97#</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Entry must be a date in 1996.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">DLookup("CustomerID", "Customers", "CustomerID = Forms!Customers!CustomerID") Is Null</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Entry must be a unique CustomerID (domain aggregate functions are allowed only for form-level validation).</P></TD></TR></TBODY></TABLE>
<BR></P>If you create a validation rule for a field, Microsoft Access doesn't normally allow a Null value to be stored in the field. If you want to allow a <SPAN CLASS="eln">Null</SPAN> value, add "Is Null" to the validation rule, as in "&lt;&gt; 8 Or Is Null" and make sure the Required property is set to No.</P>
You can't set field or record validation rules for tables created outside Microsoft Access (for example, dBASE, Paradox, or SQL Server). For these kinds of tables, you can create validation rules for controls only.</P>
See Also</P>
<SPAN CLASS="eln">AllowZeroLength</SPAN> property, <SPAN CLASS="eln">Required</SPAN> property, <SPAN CLASS="eln">ValidationRule</SPAN> property ("DAO Language Reference"), <SPAN CLASS="eln">ValidationText</SPAN> property ("DAO Language Reference").</P>
Example</P>
The following example creates a validation rule for a field that allows only values over 65 to be entered. If a number less than 65 is entered, a message is displayed. The properties are set by using the SetFieldValidation function.</P>

<pre><code>Dim strTblName As String, strFldName As String
Dim strValidRule As String
Dim strValidText As String, intX As Integer

strTblName = "Customers"
strFldName = "Age"
strValidRule = "&gt;= 65"
strValidText = "Enter a number greater than or equal to 65."
intX = SetFieldValidation(strTblName, strFldName, _
    strValidRule, strValidText)

Function SetFieldValidation(strTblName As String, _
    strFldName As String, strValidRule As String, _
    strValidText As String) As Integer

    Dim dbs As Database, tdf As TableDef, fld As Field

    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs(strTblName)
    Set fld = tdf.Fields(strFldName)
    fld.ValidationRule = strValidRule
    fld.ValidationText = strValidText
End Function</code></pre>
The next example uses the SetTableValidation function to set record-level validation to ensure that the value in the EndDate field comes after the value in the StartDate field.</P>

<pre><code>Dim strTblName As String, strValidRule As String
Dim strValidText As String
Dim intX As Integer

strTblName = "Employees"
strValidRule = "EndDate &gt; StartDate"
strValidText = "Enter an EndDate that is later than the StartDate."
intX = SetTableValidation(strTblName, strValidRule, strValidText)

Function SetTableValidation(strTblName As String, _
    strValidRule As String, strValidText As String) _
    As Integer

    Dim dbs As Database, tdf As TableDef

    Set dbs = CurrentDb
    Set tdf = dbs.TableDefs(strTblName)
    tdf.ValidationRule = strValidRule
    tdf.ValidationText = strValidText
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sort Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Sort Property</H1>Applies To</P>
Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Sets or returns the <SPAN CLASS="pop">sort order</SPAN> for records in a Recordset object (<SPAN CLASS="pop">Microsoft Jet workspaces</SPAN> only).</P>
Settings and Return Values</P>
The setting or return value is a <SPAN CLASS="eln">String</SPAN> that contains the ORDER BY clause of an <SPAN CLASS="pop">SQL statement</SPAN> without the reserved words ORDER BY.</P>
Remarks</P>
You can use the <SPAN CLASS="eln">Sort</SPAN> property with dynaset- and snapshot-type <SPAN CLASS="eln">Recordset</SPAN> objects.</P>
When you set this property for an object, sorting occurs when a subsequent <SPAN CLASS="eln">Recordset</SPAN> object is created from that object. The <SPAN CLASS="eln">Sort</SPAN> property setting overrides any sort order specified for a QueryDef object.</P>
The default sort order is ascending (A to Z or 0 to 100).</P>
The <SPAN CLASS="eln">Sort</SPAN> property doesn't apply to table- or forward-only-type <SPAN CLASS="eln">Recordset</SPAN> objects. To&nbsp;sort a table-type <SPAN CLASS="eln">Recordset</SPAN> object, use the <SPAN CLASS="eln">Index</SPAN> property.</P>
<SPAN CLASS="nh">Note</SPAN>   In many cases, it's faster to open a new <SPAN CLASS="eln">Recordset</SPAN> object by using an SQL statement that includes the sorting criteria.</P>
See Also</P>
<SPAN CLASS="eln">Filter</SPAN> property, <SPAN CLASS="eln">Index</SPAN> property, ORDER BY clause ("SQL Language Reference" in Volume 1), <SPAN CLASS="eln">QueryDef</SPAN> object, <SPAN CLASS="eln">SQL</SPAN> property.</P>
Example</P>
This example demonstrates the <SPAN CLASS="eln">Sort</SPAN> property by changing its value and creating a new <SPAN CLASS="eln">Recordset</SPAN>. The SortOutput function is required for this procedure to run.</P>

<pre><code>Sub SortX()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset
    Dim rstSortEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees", _
        dbOpenDynaset)

    With rstEmployees
        SortOutput "Original Recordset:", rstEmployees
        .Sort = "LastName, FirstName"
        ' Print report showing Sort property and record order.
        SortOutput _
            "Recordset after changing Sort property:", _
            rstEmployees
        ' Open new Recordset from current one.
        Set rstSortEmployees = .OpenRecordset
        ' Print report showing Sort property and record order.
        SortOutput "New Recordset:", rstSortEmployees
        rstSortEmployees.Close
        .Close
    End With

    dbsNorthwind.Close

End Sub

Function SortOutput(strTemp As String, _
    rstTemp As Recordset)

    With rstTemp
        Debug.Print strTemp
        Debug.Print "    Sort = " &amp; _
            IIf(.Sort &lt;&gt; "", .Sort, "[Empty]")
        .MoveFirst

        ' Enumerate Recordset.
        Do While Not .EOF
            Debug.Print "        " &amp; !LastName &amp; _
                ", " &amp; !FirstName
            .MoveNext
        Loop

    End With

End Function</code></pre>
<SPAN CLASS="nh">Note</SPAN>   When you know the data you want to select, it's usually more efficient to create a <SPAN CLASS="eln">Recordset</SPAN> with an SQL statement. This example shows how you can create just one <SPAN CLASS="eln">Recordset</SPAN> and obtain the same results as in the preceding example.</P>

<pre><code>Sub SortX2()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    ' Open a Recordset from an SQL statement that specifies a
    ' sort order.
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("SELECT * " &amp; _
        "FROM Employees ORDER BY LastName, FirstName", _
        dbOpenDynaset)

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example uses the <SPAN CLASS="eln">Sort</SPAN> property to set the sort order of a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object based on an Orders table. The records in the <SPAN CLASS="cte">rstSorted</SPAN> recordset variable will be ordered alphabetically by ship country.</P>
Note that you first create a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object and set its <SPAN CLASS="eln">Sort</SPAN> property, then open a second dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object based on the first. Setting the <SPAN CLASS="eln">Sort</SPAN> property of the first <SPAN CLASS="eln">Recordset</SPAN> object doesn't actually affect the order of the records that it contains, so you need to create a second <SPAN CLASS="eln">Recordset</SPAN> object in order to see the effects of the sort.</P>

<pre><code>Sub SortByCountry()
    Dim dbs As Database
    Dim rstOrders As Recordset, rstSorted As Recordset

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create dynaset-type Recordset object.
    Set rstOrders = dbs.OpenRecordset("Orders", dbOpenDynaset)
    ' Set sort order.
    rstOrders.Sort = "ShipCountry"
    ' Create second dynaset-type Recordset object.
    Set rstSorted = rstOrders.OpenRecordset()
    ' Perform operations with recordset.
        .
        .
        .
    rstOrders.Close
    rstSorted.Close
    Set dbs = Nothing
End Sub</code></pre>
<SPAN CLASS="nh">Tip</SPAN>&nbsp;&nbsp;&nbsp;In most situations, it's more efficient to create the second <SPAN CLASS="eln">Recordset</SPAN> object with the desired conditions in one step. When you know the data you want to select, it's generally more efficient to create a <SPAN CLASS="eln">Recordset</SPAN> object with an SQL statement. The next example shows how you can create just one <SPAN CLASS="eln">Recordset</SPAN> object and obtain the same results as in the preceding example:</P>
Sub CreateRecordsetWithSQL()</P>
    Dim dbs As Database, rst As Recordset</P>
    Dim strSelect As String</P>
</P>
    Set dbs = CurrentDb</P>
    strSelect = "SELECT * FROM Orders ORDER BY ShipCountry;"</P>
    Set rst = dbs.OpenRecordset(strSelect)</P>
    rst.MoveLast</P>
    MsgBox "Recordset contains " &amp; rst.RecordCount &amp; " records."</P>
    rst.Close</P>
End Sub</P>
Example (Microsoft Excel)</P>
This example creates a new recordset from the Supplier recordset in the Nwindex.mdb database, and then it copies the new recordset to Sheet1. The new recordset is sorted on the COUNTRY field, in ascending order.</P>
To create the Nwindex.mdb database, run the Microsoft Excel example for the <SPAN CLASS="lee">CreateDatabase</SPAN> method.</P>

<pre><code>Dim db As Database, rs As Recordset, sortedSet As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\Nwindex.mdb")
Set rs = db.OpenRecordset("Supplier", dbOpenDynaset)
rs.Sort = "[COUNTRY]"
Set sortedSet = rs.OpenRecordset()
Sheets("Sheet1").Activate
ActiveCell.CopyFromRecordset sortedSet
sortedSet.Close
rs.Close
db.Close</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

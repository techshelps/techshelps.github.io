<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProcOfLine Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>ProcOfLine Property</H2>Applies To</P>
<SPAN CLASS="eln">Module</SPAN> object.</P>
Description</P>
The <SPAN CLASS="eln">ProcOfLine</SPAN> property returns a <SPAN CLASS="pop">string</SPAN> containing the name of the <SPAN CLASS="pop">procedure</SPAN> that contains a specified line in a <SPAN CLASS="pop">standard module</SPAN> or a <SPAN CLASS="pop">class module</SPAN>. The body of a procedure begins with the procedure definition, denoted by one of the following:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">A Sub statement.</LI><LI CLASS="ULI1">A Function statement.</LI><LI CLASS="ULI1">A Property Get statement.</LI><LI CLASS="ULI1">A Property Let statement.</LI><LI CLASS="ULI1">A Property Set statement.
</LI></UL></SPAN>Setting</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.ProcOfLine(</SPAN><SPAN CLASS="p">line</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="p">pprockind</SPAN><SPAN CLASS="l">)</SPAN></P>
The <SPAN CLASS="eln">ProcOfLine</SPAN> property uses the following settings.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="73pt" VALIGN="TOP"><COL WIDTH="286pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A Module object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">line</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Long</SPAN> that specifies the number of a line in the module.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="6" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="73pt" VALIGN="TOP"><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="48pt" VALIGN="TOP"><COL WIDTH="148pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">pprockind</SPAN></P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="eln">Long</SPAN> value that indicates the type of procedure containing the line specified by the <SPAN CLASS="p">line</SPAN> argument. When you return the value of the <SPAN CLASS="eln">ProcOfLine</SPAN> property, the value of the <SPAN CLASS="p">pprockind</SPAN> argument is set to an <SPAN CLASS="pop">intrinsic constant</SPAN> that specifies the type of procedure the line belongs to. The constant may be one of the following values.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Constant</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Value</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">vbext_pk_Get</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">3</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Property Get</SPAN> procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">vbext_pk_Let</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">1</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Property Let</SPAN> procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">vbext_pk_Proc</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">0</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Sub</SPAN> or <SPAN CLASS="eln">Function</SPAN> procedure.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">vbext_pk_Set</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">2</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Property Set</SPAN> procedure.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="eln">ProcOfLine</SPAN> property is available only by using Visual Basic and is read-only.</P>
Remarks</P>
For any given line number, the <SPAN CLASS="eln">ProcOfLine</SPAN> property returns the name of the procedure that contains that line. Since comments and compilation constants immediately preceding a procedure definition are considered part of that procedure, the <SPAN CLASS="eln">ProcOfLine</SPAN> property may return the name of a procedure for a line that isn't within the body of the procedure. The ProcStartLine property indicates the line on which a procedure begins; the ProcBodyLine property indicates the line on which the&nbsp;procedure definition begins (the body of the procedure).</P>
Note that the <SPAN CLASS="ntrm">pprockind</SPAN> argument indicates whether the line belongs to a <SPAN CLASS="eln">Sub</SPAN> or <SPAN CLASS="eln">Function</SPAN> procedure, a <SPAN CLASS="eln">Property Get</SPAN> procedure, a <SPAN CLASS="eln">Property Let</SPAN> procedure, or a <SPAN CLASS="eln">Property Set</SPAN> procedure. To determine what type of procedure a line is in, pass a variable of type <SPAN CLASS="eln">Long</SPAN> to the <SPAN CLASS="eln">ProcOfLine</SPAN> property, then check the value of that variable.</P>
<SPAN CLASS="nh">Note</SPAN>   The <SPAN CLASS="eln">ProcBodyLine</SPAN> property treats <SPAN CLASS="eln">Sub</SPAN> and <SPAN CLASS="eln">Function</SPAN> procedures similarly, but distinguishes between each type of <SPAN CLASS="eln">Property</SPAN> procedure.</P>
See Also</P>
<SPAN CLASS="eln">Function</SPAN> statement, <SPAN CLASS="eln">ProcBodyLine</SPAN> property, <SPAN CLASS="eln">ProcCountLines</SPAN> property, <SPAN CLASS="eln">ProcStartLine</SPAN> property, <B>Property</B> <SPAN CLASS="eln">Get</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Let</SPAN> statement, <B>Property</B> <SPAN CLASS="eln">Set</SPAN> statement, <SPAN CLASS="eln">Sub</SPAN> statement.</P>
Example</P>
The following function procedure lists the names of all procedures in a specified module:</P>

<pre><code>Function AllProcs(strModuleName As String)
    Dim mdl As Module
    Dim lngCount As Long, lngCountDecl As Long, lngI As Long
    Dim strProcName As String, astrProcNames() As String
    Dim intI As Integer, strMsg As String
    Dim lngR As Long

    ' Open specified Module object.
    DoCmd.OpenModule strModuleName
    ' Return reference to Module object.
    Set mdl = Modules(strModuleName)
    ' Count lines in module.
    lngCount = mdl.CountOfLines
    ' Count lines in Declaration section in module.
    lngCountDecl = mdl.CountOfDeclarationLines
    ' Determine name of first procedure.
    strProcName = mdl.ProcOfLine(lngCountDecl + 1, lngR)
    ' Initialize counter variable.
    intI = 0
    ' Redimension array.
    ReDim Preserve astrProcNames(intI)
    ' Store name of first procedure in array.
    astrProcNames(intI) = strProcName
    ' Determine procedure name for each line after declarations.
    For lngI = lngCountDecl + 1 To lngCount
        ' Compare procedure name with ProcOfLine property value.
        If strProcName &lt;&gt; mdl.ProcOfLine(lngI, lngR) Then
            ' Increment counter.
            intI = intI + 1
            strProcName = mdl.ProcOfLine(lngI, lngR)
            ReDim Preserve astrProcNames(intI)
            ' Assign unique procedure names to array.
            astrProcNames(intI) = strProcName
        End If
    Next lngI
    strMsg = "Procedures in module '" &amp; strModuleName &amp; "': " _
        &amp; vbCrLf &amp; vbCrLf
    For intI = 0 To UBound(astrProcNames)
        strMsg = strMsg &amp; astrProcNames(intI) &amp; vbCrLf
    Next intI
    ' Dialog box listing all procedures in module.
    MsgBox strMsg
End Function</code></pre>
You could call this function with a procedure such as the following:</P>

<pre><code>Sub GetAllProcs()
    AllProcs "Utility Functions"
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Application Object</H2>Description</P>
The <SPAN CLASS="eln">Application</SPAN> object refers to the active Microsoft Access application.</P>
Remarks</P>
The <SPAN CLASS="eln">Application</SPAN> object contains all <SPAN CLASS="pop">Microsoft Access objects</SPAN> and <SPAN CLASS="pop">collections</SPAN>, including the Forms collection, the Reports collection, the Modules collection, the References collection, the Screen object, and the DoCmd object.</P>
You can use the <SPAN CLASS="eln">Application</SPAN> object to apply methods or property settings to the entire Microsoft Access application. For example, you can use the SetOption method of the <SPAN CLASS="eln">Application</SPAN> object to set database options from Visual Basic. The following example shows how you can set the <SPAN CLASS="eln">Status Bar</SPAN> check box under <SPAN CLASS="eln">Show</SPAN> on the <SPAN CLASS="eln">View</SPAN> tab of the <SPAN CLASS="eln">Options</SPAN> dialog box.</P>

<pre><code>Application.SetOption "Show Status Bar", True</code></pre>
Microsoft Access is an ActiveX component that supports <SPAN CLASS="pop">Automation</SPAN>, formerly called OLE Automation. You can manipulate Microsoft Access objects from another application that also supports Automation. To do this, you use the <SPAN CLASS="eln">Application</SPAN> object.</P>
For example, Microsoft Visual Basic is an ActiveX component. You can open a Microsoft Access database from Visual Basic and work with its objects. From Visual Basic, first create a reference to the Microsoft Access 8.0 object library. Then create a new <SPAN CLASS="pop">instance</SPAN> of the <SPAN CLASS="eln">Application</SPAN> <SPAN CLASS="pop">class</SPAN> and point an object variable to it, as in the following example:</P>

<pre><code>Dim appAccess As New Access.Application</code></pre>
From applications that don't support the <SPAN CLASS="eln">New</SPAN> keyword, you can create a new instance of the <SPAN CLASS="eln">Application</SPAN> class by using the CreateObject function:</P>

<pre><code>Dim appAccess As Object
Set appAccess = CreateObject("Access.Application.8")</code></pre>
Once you've created a new instance of the <SPAN CLASS="eln">Application</SPAN> class, you can open a database or create a new database, by using either the OpenCurrentDatabase method or the NewCurrentDatabase method. You can then set the properties of the <SPAN CLASS="eln">Application</SPAN> object and call its methods. When you return a reference to the DBEngine object by using the DBEngine property of the <SPAN CLASS="eln">Application</SPAN> object, you can access all DAO objects and collections by using this reference.</P>
You can also manipulate other Microsoft Access objects through the <SPAN CLASS="eln">Application</SPAN> object. For example, by using the OpenForm method of the Microsoft Access DoCmd object, you can open a Microsoft Access form from Microsoft Excel:</P>

<pre><code>appAccess.DoCmd.OpenForm "Orders"</code></pre>
For more information on creating a reference and controlling objects by using Automation, see the documentation for the application that's acting as the ActiveX component.</P>
Properties</P>
<SPAN CLASS="eln">Application</SPAN> property, <SPAN CLASS="eln">CodeContextObject</SPAN> property, <SPAN CLASS="eln">CommandBar</SPAN> property, <B>CurrentObjectType</B>, <SPAN CLASS="eln">CurrentObjectName</SPAN> properties, <SPAN CLASS="eln">DBEngine</SPAN> property, <SPAN CLASS="eln">MenuBar</SPAN> property, <SPAN CLASS="eln">Parent</SPAN> property, <SPAN CLASS="eln">ShortcutMenuBar</SPAN> property, <SPAN CLASS="eln">UserControl</SPAN> property, <SPAN CLASS="eln">Visible</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">AccessError</SPAN> method, <SPAN CLASS="eln">AddToFavorites</SPAN> method, <SPAN CLASS="eln">BuildCriteria</SPAN> method, <SPAN CLASS="eln">CloseCurrentDatabase</SPAN> method, <SPAN CLASS="eln">DefaultWorkspaceClone</SPAN> method, <SPAN CLASS="eln">Echo</SPAN> method (<B>Application</B> object), <SPAN CLASS="eln">FollowHyperlink</SPAN> method, <B>GetOption</B>, <SPAN CLASS="eln">SetOption</SPAN> methods, <SPAN CLASS="eln">NewCurrentDatabase</SPAN> method, <SPAN CLASS="eln">OpenCurrentDatabase</SPAN> method, <SPAN CLASS="eln">Quit</SPAN> method (<B>Application</B> object), <SPAN CLASS="eln">RefreshDatabaseWindow</SPAN> method, <SPAN CLASS="eln">RefreshTitleBar</SPAN> method, <SPAN CLASS="eln">Run</SPAN> method, <SPAN CLASS="eln">RunCommand</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">CreateObject</SPAN> function, <SPAN CLASS="eln">DBEngine</SPAN> object ("DAO Language Reference"), <SPAN CLASS="eln">DoCmd</SPAN> object, <SPAN CLASS="eln">Forms</SPAN> collection, <SPAN CLASS="eln">GetObject</SPAN> function, <SPAN CLASS="eln">Module</SPAN> object, <SPAN CLASS="eln">Modules</SPAN> collection, <SPAN CLASS="eln">References</SPAN> collection, <SPAN CLASS="eln">Reports</SPAN> collection, <SPAN CLASS="eln">Screen</SPAN> object.</P>
Example</P>
The following example prints some current property settings of the <SPAN CLASS="eln">Application</SPAN> object, sets an option, and then quits the application, saving all objects:</P>

<pre><code>Sub ApplicationInformation()
    ' Print name and type of current object.
    Debug.Print Application.CurrentObjectName
    Debug.Print Application.CurrentObjectType
    ' Set Hidden Objects option under Show on View tab
    ' of Options dialog box.
    Application.SetOption "Show Hidden Objects", True
    ' Quit Microsoft Access, saving all objects.
    Application.Quit acSaveYes
End Sub</code></pre>
The next example shows how to use Microsoft Access as an ActiveX component. From Microsoft Excel, Visual Basic, or another application that acts as an ActiveX component, create a reference to Microsoft Access by clicking <SPAN CLASS="eln">References</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu in the Module window. Select the check box next to <SPAN CLASS="eln">Microsoft Access 8.0 Object Library</SPAN>. Then enter the following code in a Visual Basic module within that application and call the GetAccessData procedure.</P>
The example passes a database name and report name to a procedure that creates a new instance of the <SPAN CLASS="eln">Application</SPAN> class, opens the database, and prints the specified report.</P>

<pre><code>' Declare object variable in declarations section of a module.
    Dim appAccess As Access.Application

Sub GetAccessData()
    Dim strDB As String
    Dim strReportName As String

    ' Initialize string to database path.
    strDB = "C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"
    ' Initialize string to Report name.
    strReportName = "Catalog"
    PrintAccessReport strDB, strReportName
End Sub

Sub PrintAccessReport(strDB As String, strReportName As String)
    ' Return reference to Microsoft Access Application object.
    Set appAccess = New Access.Application
    ' Open database in Microsoft Access.
    appAccess.OpenCurrentDatabase strDB
    ' Print report.
    appAccess.DoCmd.OpenReport strReportName
    MsgBox "Click OK when " &amp; strReportName &amp; _
        " is finished printing"
    appAccess.CloseCurrentDatabase
    Set appAccess = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetRows Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<HR CLASS="rr">
<H1>GetRows Method</H1>Applies To</P>
Dynamic-Type <SPAN CLASS="eln">Recordset</SPAN> object, Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, Forward-Only–Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Retrieves multiple rows from a Recordset object.</P>
Syntax</P>
<SPAN CLASS="eln">Set</SPAN><SPAN CLASS="p"> varArray</SPAN><SPAN CLASS="l"> = </SPAN><SPAN CLASS="p">recordset</SPAN><B>.</B><SPAN CLASS="eln">GetRows(</SPAN><SPAN CLASS="p">numrows</SPAN><SPAN CLASS="eln">)</SPAN></P>
The <SPAN CLASS="eln">GetRows</SPAN> method syntax has the following parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="270pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">varArray</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A Variant that stores the returned data.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">recordset</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents a <SPAN CLASS="eln">Recordset</SPAN> object. </P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">numrows</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Variant</SPAN> that is equal to the number of rows to retrieve.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Use the <SPAN CLASS="eln">GetRows</SPAN> method to copy records from a <SPAN CLASS="eln">Recordset</SPAN>. <SPAN CLASS="eln">GetRows</SPAN> returns a two-dimensional <SPAN CLASS="pop">array</SPAN>. The first subscript identifies the field and the second identifies the row number. For example, <SPAN CLASS="cte">intField</SPAN> represents the field, and <SPAN CLASS="cte">intRecord</SPAN> identifies the row number:</P>

<pre><code>avarRecords(intField, intRecord)</code></pre>
To get the first field value in the second row returned, use code like the following:</P>

<pre><code>field1 = avarRecords(0,1)</code></pre>
To get the second field value in the first row, use code like the following:</P>

<pre><code>field2 = avarRecords(1,0)</code></pre>
The <SPAN CLASS="cte">avarRecords</SPAN> variable automatically becomes a two-dimensional array when <B>GetRows</B> returns data.</P>
If you request more rows than are available, then <SPAN CLASS="eln">GetRows</SPAN> returns only the number of available rows. You can use the Visual&nbsp;Basic for Applications <SPAN CLASS="eln">UBound</SPAN> function to determine how many rows <SPAN CLASS="eln">GetRows</SPAN> actually retrieved, because the array is sized to fit the number of returned rows. For example, if you returned the results into a <SPAN CLASS="eln">Variant</SPAN> called <SPAN CLASS="cte">varA</SPAN>, you could use the following code to determine how many rows were actually returned:</P>

<pre><code>numReturned = UBound(varA,2) + 1</code></pre>
You need to use "<SPAN CLASS="cte">+ 1"</SPAN> because the first row returned is in the 0 element of the array. The number of rows that you can retrieve is constrained by the amount of available memory. You shouldn't use <SPAN CLASS="eln">GetRows</SPAN> to retrieve an entire table into an array if it is large.</P>
Because <SPAN CLASS="eln">GetRows</SPAN> returns all fields of the <SPAN CLASS="eln">Recordset</SPAN> into the array, including Memo and Long Binary fields, you might want to use a query that restricts the fields returned.</P>
After you call <SPAN CLASS="eln">GetRows</SPAN>, the current record is positioned at the next unread row. That is, <SPAN CLASS="eln">GetRows</SPAN> has the same effect on the current record as <SPAN CLASS="eln">Move</SPAN> <SPAN CLASS="p">numrows</SPAN>.</P>
If you are trying to retrieve all the rows by using multiple <SPAN CLASS="eln">GetRows</SPAN> calls, use the EOF property to be sure that you're at the end of the <SPAN CLASS="eln">Recordset</SPAN>. <SPAN CLASS="eln">GetRows</SPAN> returns less than the number requested if it's at the end of the <SPAN CLASS="eln">Recordset</SPAN>, or if it can't retrieve a row in the range requested. For example, if you're trying to retrieve 10 records, but you can't retrieve the fifth record, <SPAN CLASS="eln">GetRows</SPAN> returns four records and makes the fifth record the current record. This will not generate a <SPAN CLASS="pop">run-time error</SPAN>. This might occur if another user deletes a record in a dynaset-type <SPAN CLASS="eln">Recordset</SPAN>. See the example for a demonstration of how to handle this.</P>
See Also</P>
<SPAN CLASS="eln">FillCache</SPAN> method, <SPAN CLASS="eln">Move</SPAN> method, <SPAN CLASS="eln">Value</SPAN> property.</P>
Example</P>
This example uses the <SPAN CLASS="eln">GetRows</SPAN> method to retrieve a specified number of rows from a&nbsp;<SPAN CLASS="eln">Recordset</SPAN> and to fill an array with the resulting data. The <SPAN CLASS="eln">GetRows</SPAN> method will return fewer than the desired number of rows in two cases: either if <SPAN CLASS="eln">EOF</SPAN> has been reached, or if <SPAN CLASS="eln">GetRows</SPAN> tried to retrieve a record that was deleted by another user. The function returns <SPAN CLASS="eln">False</SPAN> only if the second case occurs. The GetRowsOK function is required for this procedure to run.</P>

<pre><code>Sub GetRowsX()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset
    Dim strMessage As String
    Dim intRows As Integer
    Dim avarRecords As Variant
    Dim intRecord As Integer

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstEmployees = dbsNorthwind.OpenRecordset( _
        "SELECT FirstName, LastName, Title " &amp; _
        "FROM Employees ORDER BY LastName", dbOpenSnapshot)

    With rstEmployees
        Do While True
            ' Get user input for number of rows.
            strMessage = "Enter number of rows to retrieve."
            intRows = Val(InputBox(strMessage))
            If intRows &lt;= 0 Then Exit Do

            ' If GetRowsOK is successful, print the results,
            ' noting if the end of the file was reached.
            If GetRowsOK(rstEmployees, intRows, _
                    avarRecords) Then
                If intRows &gt; UBound(avarRecords, 2) + 1 Then
                    Debug.Print "(Not enough records in " &amp; _
                        "Recordset to retrieve " &amp; intRows &amp; _
                        " rows.)"
                End If
                Debug.Print UBound(avarRecords, 2) + 1 &amp; _
                    " records found."

                ' Print the retrieved data.
                For intRecord = 0 To UBound(avarRecords, 2)
                    Debug.Print "    " &amp; _
                        avarRecords(0, intRecord) &amp; " " &amp; _
                        avarRecords(1, intRecord) &amp; ", " &amp; _
                        avarRecords(2, intRecord)
                Next intRecord
            Else
                ' Assuming the GetRows error was due to data
                ' changes by another user, use Requery to
                ' refresh the Recordset and start over.
                If .Restartable Then
                    If MsgBox("GetRows failed--retry?", _
                            vbYesNo) = vbYes Then
                        .Requery
                    Else
                        Debug.Print "GetRows failed!"
                        Exit Do
                    End If
                Else
                    Debug.Print "GetRows failed! " &amp; _
                        "Recordset not Restartable!"
                    Exit Do
                End If
            End If

            ' Because using GetRows leaves the current record
            ' pointer at the last record accessed, move the
            ' pointer back to the beginning of the Recordset
            ' before looping back for another search.
            .MoveFirst
        Loop
    End With

    rstEmployees.Close
    dbsNorthwind.Close

End Sub

Function GetRowsOK(rstTemp As Recordset, _
    intNumber As Integer, avarData As Variant) As Boolean

    ' Store results of GetRows method in array.
    avarData = rstTemp.GetRows(intNumber)
    ' Return False only if fewer than the desired number of
    ' rows were returned, but not because the end of the
    ' Recordset was reached.
    If intNumber &gt; UBound(avarData, 2) + 1 And _
            Not rstTemp.EOF Then
        GetRowsOK = False
    Else
        GetRowsOK = True
    End If

End Function</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example uses the <SPAN CLASS="eln">GetRows</SPAN> method to return a two-dimensional array containing all rows of data in a <SPAN CLASS="eln">Recordset</SPAN> object:</P>

<pre><code>Sub RowsArray()
    Dim dbs As Database, rst As Recordset, strSQL As String
    Dim varRecords As Variant, intI As Integer, intJ As Integer
    
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Build SQL statement that returns specified fields.
    strSQL = "SELECT FirstName, LastName, HireDate " _
        &amp; "FROM Employees"
    ' Open dynaset-type Recordset object.
    Set rst = dbs.OpenRecordset(strSQL)
    ' Move to end of recordset.
    rst.MoveLast
    ' Return to first record.
    rst.MoveFirst
    ' Return all rows into array.
    varRecords = rst.GetRows(rst.RecordCount)
    ' Find upper bound of second dimension.
    For intI = 0 To UBound(varRecords, 2)
        Debug.Print
        ' Find upper bound of first dimension.
        For intJ = 0 To UBound(varRecords, 1)
            ' Print data from each row in array.
            Debug.Print varRecords(intJ, intI)
        Next intJ
    Next intI
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
Example (Microsoft&nbsp;Excel)</P>
This example copies selected records from the Customer recordset in the Nwindex.mdb database to Sheet1.</P>
To create the Nwindex.mdb database, run the Microsoft&nbsp;Excel example for the <SPAN CLASS="lee">CreateDatabase</SPAN> method.</P>

<pre><code>Dim db As Database, rs As Recordset
Dim data As Variant
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set rs = db.OpenRecordset("SELECT CUSTMR_ID, CONTACT FROM Customer;")
data = rs.GetRows(6)
Sheets("Sheet1").Activate
For r = 1 to UBound(data, 2) + 1
    For c = 1 to 2
        Cells(r, c).Value = data(c - 1, r - 1)
    Next
Next
rs.Close
db.Close</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BuildCriteria Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>BuildCriteria Method</H2>Applies To</P>
<SPAN CLASS="eln">Application</SPAN> object.</P>
Description</P>
The <SPAN CLASS="eln">BuildCriteria</SPAN> method returns a parsed criteria string as it would appear in the <SPAN CLASS="pop">query design grid</SPAN> or in <SPAN CLASS="pop">Filter By Form</SPAN> mode. For example, you may want to set a form's Filter property based on varying criteria from the user. You can use the <SPAN CLASS="eln">BuildCriteria</SPAN> method to construct the string expression argument for the <SPAN CLASS="eln">Filter</SPAN> property.</P>
Syntax</P>
<SPAN CLASS="p">application</SPAN><SPAN CLASS="l">.BuildCriteria(</SPAN><SPAN CLASS="p">field</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="p">fieldtype</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="p">expression</SPAN><SPAN CLASS="l">)</SPAN></P>
The <SPAN CLASS="eln">BuildCriteria</SPAN> method has the following arguments.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="269pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">application</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">(Optional) The <SPAN CLASS="eln">Application</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">field</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="pop">string expression</SPAN> identifying the field for which you wish to define criteria.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">fieldtype</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">intrinsic constant</SPAN> denoting the data type of the field. For a list of possible field <SPAN CLASS="pop">data types</SPAN>, see the DAO Type property.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">expression</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A string expression identifying the criteria to be parsed.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="eln">BuildCriteria</SPAN> method returns a string.</P>
Remarks</P>
The <SPAN CLASS="eln">BuildCriteria</SPAN> method enables you to easily construct criteria for a filter based on user input. It parses the <SPAN CLASS="p">expression</SPAN> argument in the same way that the expression would be parsed had it been entered in the query design grid or in Filter By Form mode.</P>
For example, a user creating a query on an Orders table might restrict the <SPAN CLASS="pop">result set</SPAN> to orders placed after January 1, 1995, by setting criteria on an OrderDate field. The user might enter an expression such as the following one in the <SPAN CLASS="eln">Criteria</SPAN> row beneath the OrderDate field:</P>
&gt;1-1-95</P>
Microsoft Access automatically parses this expression and returns the following expression:</P>
&gt;#1/1/95#</P>
The <SPAN CLASS="eln">BuildCriteria</SPAN> method provides the same parsing from Visual&nbsp;Basic code. For example, to return the preceding correctly parsed string, you can supply the following arguments to the <SPAN CLASS="eln">BuildCriteria</SPAN> method:</P>

<pre><code>Dim strCriteria As String
strCriteria = BuildCriteria("OrderDate", dbDate, "&gt;1-1-95")</code></pre>
Since you need to supply criteria for the <SPAN CLASS="eln">Filter</SPAN> property in correctly parsed form, you can use the <SPAN CLASS="eln">BuildCriteria</SPAN> method to construct a correctly parsed string.</P>
You can use the <SPAN CLASS="eln">BuildCriteria</SPAN> method to construct a string with multiple criteria if those criteria refer to the same field. For example, you can use the <SPAN CLASS="eln">BuildCriteria</SPAN> method with the following arguments to construct a string with multiple criteria relating to the OrderDate field:</P>

<pre><code>strCriteria = BuildCriteria("OrderDate", dbDate, "&gt;1-1-95 and &lt;5-1-95")</code></pre>
This example returns the following criteria string:</P>
OrderDate&gt;#1/1/95# And OrderDate&lt;#5/1/95#</P>
However, if you wish to construct a criteria string that refers to multiple fields, you must create the strings and concatenate them yourself. For example, if you wish to construct criteria for a filter to show records for orders placed after 1-1-95 and for which freight is less than $50, you would need to use the <SPAN CLASS="eln">BuildCriteria</SPAN> method twice and concatenate the resulting strings.</P>
See Also</P>
<SPAN CLASS="eln">Filter</SPAN> property.</P>
Example</P>
The following example prompts the user to enter the first few letters of a product's name and then uses the <SPAN CLASS="eln">BuildCriteria</SPAN> method to construct a criteria string based on the user's input. Next, the procedure provides this string as an argument to the <SPAN CLASS="eln">Filter</SPAN> property of a Products form. Finally, the <SPAN CLASS="eln">FilterOn</SPAN> property is set to apply the filter.</P>

<pre><code>Sub SetFilter()
    Dim frm As Form, strMsg As String
    Dim strInput As String, strFilter As String

    ' Open Products form in Form view.
    DoCmd.OpenForm "Products"
    ' Return Form object variable pointing to Products form.
    Set frm = Forms!Products
    strMsg = "Enter one or more letters of product name " _
        &amp; "followed by an asterisk."
    ' Prompt user for input.
    strInput = InputBox(strMsg)
    ' Build criteria string.
    strFilter = BuildCriteria("ProductName", dbText, strInput)
    ' Set Filter property to apply filter.
    frm.Filter = strFilter
    ' Set FilterOn property; form now shows filtered records.
    frm.FilterOn = True
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Seek Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Seek Method</H1>Applies To</P>
<SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Locates the record in an indexed table-type Recordset object that satisfies the specified criteria for the <SPAN CLASS="pop">current index</SPAN> and makes that record the <SPAN CLASS="pop">current record</SPAN> (<SPAN CLASS="pop">Microsoft Jet workspaces</SPAN> only).</P>
Syntax</P>
<SPAN CLASS="p">recordset</SPAN><SPAN CLASS="eln">.Seek</SPAN> <SPAN CLASS="p">comparison</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">key1</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">key2</SPAN>...<SPAN CLASS="p">key13</SPAN></P>
The <SPAN CLASS="eln">Seek</SPAN> method syntax has the following parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="270pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">recordset</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents an existing table-type <SPAN CLASS="eln">Recordset</SPAN> object that has a defined index as specified by the <SPAN CLASS="eln">Recordset</SPAN> object's Index property.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">comparison</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">One of the following <SPAN CLASS="pop">string expressions</SPAN>: &lt;, &lt;=, =, &gt;=, or &gt;.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">key1</SPAN>, <SPAN CLASS="p">key2</SPAN>...<SPAN CLASS="p">key13</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">One or more values corresponding to fields in the <SPAN CLASS="eln">Recordset</SPAN> object's current index, as specified by its <SPAN CLASS="eln">Index</SPAN> property setting. You can use up to 13 <I>key</I> arguments.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You must set the current index with the <SPAN CLASS="eln">Index </SPAN>property before you use <SPAN CLASS="eln">Seek</SPAN>. If the index identifies a nonunique key field, <SPAN CLASS="eln">Seek</SPAN> locates the first record that satisfies the criteria.</P>
The <SPAN CLASS="eln">Seek</SPAN> method searches through the specified key fields and locates the first record that satisfies the criteria specified by <SPAN CLASS="p">comparison</SPAN> and <SPAN CLASS="p">key1</SPAN>. Once found, it makes that record current and sets the NoMatch property to <SPAN CLASS="eln">False</SPAN>. If the <SPAN CLASS="eln">Seek</SPAN> method fails to locate a match, the <SPAN CLASS="eln">NoMatch</SPAN> property is set to <SPAN CLASS="eln">True</SPAN>, and the current record is undefined.</P>
If <SPAN CLASS="p">comparison</SPAN> is equal (=), greater than or equal (&gt;=), or greater than (&gt;), <SPAN CLASS="eln">Seek</SPAN> starts at the beginning of the index and searches forward.</P>
If <SPAN CLASS="p">comparison</SPAN> is less than (&lt;) or less than or equal (&lt;=), <SPAN CLASS="eln">Seek</SPAN> starts at the end of the index and searches backward. However, if there are duplicate index entries at the end of the index, <SPAN CLASS="eln">Seek</SPAN> starts at an arbitrary entry among the duplicates and then searches backward.</P>
You must specify values for all fields defined in the index. If you use <SPAN CLASS="eln">Seek</SPAN> with a multiple-column index, and you don't specify a comparison value for every field in&nbsp;the&nbsp;index, then you cannot use the equal (=) operator in the comparison. That's because&nbsp;some of the criteria fields (<I>key2</I>, <I>key3</I>, and so on) will default to Null, which will probably not match. Therefore, the equal operator will work correctly only if you have a record which is all <SPAN CLASS="eln">Null</SPAN> except the key you're looking for. It's recommended that&nbsp;you use the greater than or equal (&gt;=) operator instead.</P>
The <I>key1</I> argument must be of the same <SPAN CLASS="pop">field data type</SPAN> as the corresponding field in the current index. For example, if the current index refers to a number field (such as Employee ID), <I>key1</I> must be numeric. Similarly, if the current index refers to a Text field (such as Last Name), <I>key1</I> must be a string.</P>
There doesn't have to be a current record when you use <SPAN CLASS="eln">Seek</SPAN>.</P>
You can use the <SPAN CLASS="eln">Indexes</SPAN> collection to enumerate the existing indexes.</P>
To locate a record in a dynaset- or snapshot-type <SPAN CLASS="eln">Recordset</SPAN> that satisfies a specific condition that is not covered by existing indexes, use the Find methods. To include all records, not just those that satisfy a specific condition, use the Move methods to move from record to record.</P>
You can't use the <SPAN CLASS="eln">Seek</SPAN> method on a <SPAN CLASS="pop">linked table</SPAN> because you can't open linked tables as table-type <SPAN CLASS="eln">Recordset</SPAN> objects. However, if you use the <SPAN CLASS="eln">OpenDatabase</SPAN> method to directly open an <SPAN CLASS="pop">installable ISAM</SPAN> (non-ODBC) database, you can use <SPAN CLASS="eln">Seek</SPAN> on tables in that database.</P>
In an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>, the <SPAN CLASS="eln">Find</SPAN> and <SPAN CLASS="eln">Seek</SPAN> methods are not available on any type of <SPAN CLASS="eln">Recordset</SPAN> object, because executing a <SPAN CLASS="eln">Find</SPAN> or <SPAN CLASS="eln">Seek</SPAN> through an ODBC connection is not very efficient over the network. Instead, you should design the query (that is, using the <SPAN CLASS="p">source</SPAN> argument to the OpenRecordset method) with an appropriate WHERE clause that restricts the returned records to only those that meet the criteria you&nbsp;would otherwise use in a <SPAN CLASS="eln">Find</SPAN> or <SPAN CLASS="eln">Seek</SPAN>.</P>
See Also</P>
<SPAN CLASS="eln">AbsolutePosition</SPAN> property, <SPAN CLASS="eln">BOF</SPAN>, <SPAN CLASS="eln">EOF</SPAN> properties, <SPAN CLASS="eln">FindFirst</SPAN>, <SPAN CLASS="eln">FindLast</SPAN>, <SPAN CLASS="eln">FindNext</SPAN>, <SPAN CLASS="eln">FindPrevious</SPAN> methods, <SPAN CLASS="eln">Index</SPAN> object, <SPAN CLASS="eln">Index</SPAN> property, <SPAN CLASS="eln">Move</SPAN> method, <SPAN CLASS="eln">MoveFirst</SPAN>, <SPAN CLASS="eln">MoveLast</SPAN>, <SPAN CLASS="eln">MoveNext</SPAN>, <SPAN CLASS="eln">MovePrevious</SPAN> methods, <SPAN CLASS="eln">NoMatch</SPAN> property, <SPAN CLASS="eln">OpenDatabase</SPAN> method.</P>
Example</P>
This example demonstrates the <SPAN CLASS="eln">Seek</SPAN> method by allowing the user to search for a product based on an ID number.</P>

<pre><code>Sub SeekX()

    Dim dbsNorthwind As Database
    Dim rstProducts As Recordset
    Dim intFirst As Integer
    Dim intLast As Integer
    Dim strMessage As String
    Dim strSeek As String
    Dim varBookmark As Variant

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    ' You must open a table-type Recordset to use an index,
    ' and hence the Seek method.
    Set rstProducts = _
        dbsNorthwind.OpenRecordset("Products", dbOpenTable)

    With rstProducts
        ' Set the index.
        .Index = "PrimaryKey"

        ' Get the lowest and highest product IDs.
        .MoveLast
        intLast = !ProductID
        .MoveFirst
        intFirst = !ProductID

        Do While True
            ' Display current record information and ask user
            ' for ID number.
            strMessage = "Product ID: " &amp; !ProductID &amp; vbCr &amp; _
                "Name: " &amp; !ProductName &amp; vbCr &amp; vbCr &amp; _
                "Enter a product ID between " &amp; intFirst &amp; _
                " and " &amp; intLast &amp; "."
            strSeek = InputBox(strMessage)

            If strSeek = "" Then Exit Do

            ' Store current bookmark in case the Seek fails.
            varBookmark = .Bookmark

            .Seek "=", Val(strSeek)

            ' Return to the current record if the Seek fails.
            If .NoMatch Then
                MsgBox "ID not found!"
                .Bookmark = varBookmark
            End If
        Loop

        .Close
    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example creates a new <SPAN CLASS="eln">Index</SPAN> object on an Employees table. The new index consists of two fields, LastName and FirstName. The procedure then uses the <SPAN CLASS="eln">Seek</SPAN> method to find a specified record.</P>

<pre><code>Sub NewIndex()
    Dim dbs As Database, tdf As TableDef, idx As Index
    Dim fldLastName As Field, fldFirstName As Field, rst As Recordset
    
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Return Index object that points to new index.
    Set idx = tdf.CreateIndex("FullName")
    ' Create and append index fields.
    Set fldLastName = idx.CreateField("LastName", dbText)
    Set fldFirstName = idx.CreateField("FirstName", dbText)
    idx.Fields.Append fldLastName
    idx.Fields.Append fldFirstName
    ' Append Index object.
    tdf.Indexes.Append idx
    tdf.Indexes.Refresh
    ' Open table-type Recordset object.
    Set rst = dbs.OpenRecordset("Employees")
    ' Set current index to new index.
    rst.Index = idx.Name
    ' Specify record to find.
    rst.Seek "=", "Fuller", "Andrew"
    If rst.NoMatch Then
        Debug.Print "Seek unsuccessful!"
    Else
        Debug.Print "Seek successful."
    End If
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
Example (Microsoft Excel)</P>
This example opens Product.dbf (a dBASE IV table located in the C:\Program Files<BR>\Common Files\Microsoft Shared\MSquery folder), locates a record, and then copies the record's values into cells B2:C2 on Sheet1. (In Windows&nbsp;NT, Product.dbf is located in the C:\Windows\Msapps\Msquery folder.)</P>

<pre><code>Dim db As Database, rs As Recordset
Sheets("Sheet1").Activate
Set db = OpenDatabase("C:\Program Files\Common Files\Microsoft Shared\MSquery", _
        False, False, "dBASE IV")
Set rs = db.OpenRecordset("PRODUCT.DBF", dbOpenTable)
rs.Index = "PRODUCT"
rs.Seek "=", "1"
If rs.NoMatch Then
    MsgBox "Couldn't find any records"
Else
    ActiveSheet.Cells(2, 2) = rs.Fields("CATEGORY").Value
    ActiveSheet.Cells(3, 2) = rs.Fields("PROD_NAME").Value
End If
rs.Close
db.Close</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FROM Clause</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>FROM Clause </H1>Description</P>
Specifies the tables or queries that contain the fields listed in the <SPAN CLASS="jump">SELECT</SPAN> statement.</P>
Syntax</P>
SELECT <SPAN CLASS="p">fieldlist</SPAN><BR>FROM <SPAN CLASS="p">tableexpression</SPAN> [IN <SPAN CLASS="p">externaldatabase</SPAN>]</P>
A SELECT statement containing a FROM clause has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="279pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">fieldlist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the field or fields to be retrieved along with any field-name <SPAN CLASS="pop">aliases</SPAN>, <SPAN CLASS="jump">SQL aggregate functions</SPAN>, selection predicates (<SPAN CLASS="jump">ALL, DISTINCT, DISTINCTROW, or TOP</SPAN>), or other SELECT statement options.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">tableexpression</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An expression that identifies one or more tables from which data is retrieved. The expression can be a single table name, a saved query name, or a compound resulting from an <SPAN CLASS="jump">INNER JOIN</SPAN>, <SPAN CLASS="jump">LEFT JOIN,</SPAN> or <SPAN CLASS="jump">RIGHT JOIN</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">externaldatabase</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The full path of an external database containing all the tables in <SPAN CLASS="p">tableexpression.</SPAN></P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
FROM is required and follows any SELECT statement.</P>
The order of the table names in <SPAN CLASS="p">tableexpression</SPAN> isn't important.</P>
For improved performance and ease of use, it's recommended that you use a <SPAN CLASS="pop">linked table</SPAN> instead of an IN clause to retrieve data from an external database.</P>
The following example shows how you can retrieve data from the Employees table:</P>

<pre><code>SELECT LastName, FirstName
FROM Employees;</code></pre>
See Also</P>
ALL, DISTINCT, DISTINCTROW, TOP predicates, IN clause, INNER JOIN operation, LEFT JOIN, RIGHT JOIN operations, SELECT statement, WHERE clause.</P>
Specifics (Microsoft Access)</P>
If you include a query or table name in the FROM clause of an <SPAN CLASS="pop">SQL</SPAN> statement, that query or table will be automatically added to the <SPAN CLASS="pop">Query window</SPAN>.</P>
Conversely, any table or query that you add to the Query window will be included in the FROM clause of the corresponding SQL statement.</P>
Example</P>
Some of the following examples assume the existence of a hypothetical Salary field in an Employees table. Note that this field does not actually exist in the Northwind database Employees table.</P>
This example creates a dynaset-type <SPAN CLASS="eln">Recordset </SPAN>based on an <SPAN CLASS="pop">SQL statement</SPAN> that selects the LastName and FirstName fields of all records in the Employees table. It calls the EnumFields procedure, which prints the contents of a <SPAN CLASS="eln">Recordset</SPAN> object to the&nbsp;<SPAN CLASS="eln">Debug</SPAN> window.</P>

<pre><code>Sub SelectX1()

    Dim dbs As Database, rst As Recordset

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    ' Select the last name and first name values of all 
    ' records in the Employees table.
    Set rst = dbs.OpenRecordset("SELECT LastName, " _
        &amp; "FirstName FROM Employees;")

    ' Populate the recordset.
    rst.MoveLast

    ' Call EnumFields to print the contents of the
    ' Recordset.
    EnumFields rst,12

    dbs.Close

End Sub</code></pre>
This example counts the number of records that have an entry in the PostalCode field and names the returned field Tally.</P>

<pre><code>Sub SelectX2()

    Dim dbs As Database, rst As Recordset

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    ' Count the number of records with a PostalCode 
    ' value and return the total in the Tally field.
    Set rst = dbs.OpenRecordset("SELECT Count " _
        &amp; "(PostalCode) AS Tally FROM Customers;")

    ' Populate the Recordset.
    rst.MoveLast

    ' Call EnumFields to print the contents of 
    ' the Recordset. Specify field width = 12.
    EnumFields rst, 12

    dbs.Close

End Sub</code></pre>
This example shows the number of employees and the average and maximum salaries.</P>

<pre><code>Sub SelectX3()

    Dim dbs As Database, rst As Recordset

    ' Modify this line to include the path to Northwind
    ' on your computer.
Set dbs = OpenDatabase("Northwind.mdb")

    ' Count the number of employees, calculate the 
    ' average salary, and return the highest salary.
    Set rst = dbs.OpenRecordset("SELECT Count (*) " _
        &amp; "AS TotalEmployees, Avg(Salary) " _
        &amp; "AS AverageSalary, Max(Salary) " _
        &amp; "AS MaximumSalary FROM Employees;")

    ' Populate the Recordset.
    rst.MoveLast

    ' Call EnumFields to print the contents of
    ' the Recordset. Pass the Recordset object and
    ' desired field width.
    EnumFields rst, 17

    dbs.Close

End Sub</code></pre>
The <SPAN CLASS="eln">Sub</SPAN> procedure EnumFields is passed a <B>Recordset</B> object from the calling procedure. The procedure then formats and prints the fields of the <B>Recordset</B> to the <SPAN CLASS="eln">Debug</SPAN> window. The <SPAN CLASS="cte">intFldLen</SPAN> variable is the desired printed field width. Some fields may be truncated.</P>

<pre><code>Sub EnumFields(rst As Recordset, intFldLen As Integer)

    Dim lngRecords As Long, lngFields As Long
    Dim lngRecCount As Long, lngFldCount As Long
    Dim strTitle As String, strTemp As String

    ' Set the lngRecords variable to the number of
    ' records in the Recordset.
    lngRecords = rst.RecordCount
    ' Set the lngFields variable to the number of
    ' fields in the Recordset.
    lngFields = rst.Fields.Count
    
    Debug.Print "There are " &amp; lngRecords _
        &amp; " records containing " &amp; lngFields _
        &amp; " fields in the recordset."
    Debug.Print
    
    ' Form a string to print the column heading.
    strTitle = "Record "
    For lngFldCount = 0 To lngFields - 1
        strTitle = strTitle _
        &amp; Left(rst.Fields(lngFldCount).Name _
        &amp; Space(intFldLen), intFldLen)
    Next lngFldCount
    
    ' Print the column heading.
    Debug.Print strTitle
    Debug.Print
    
    ' Loop through the Recordset; print the record
    ' number and field values.
    rst.MoveFirst
    For lngRecCount = 0 To lngRecords - 1
        Debug.Print Right(Space(6) &amp; _
            Str(lngRecCount), 6) &amp; "  ";
        For lngFldCount = 0 To lngFields - 1
            ' Check for Null values.
            If IsNull(rst.Fields(lngFldCount)) Then
                strTemp = "&lt;null&gt;"
            Else
                ' Set strTemp to the field contents. 
                Select Case _
                    rst.Fields(lngFldCount).Type
                    Case 11
                        strTemp = ""
                    Case dbText, dbMemo
                        strTemp = _
                            rst.Fields(lngFldCount)
                    Case Else
                        strTemp = _
                            str(rst.Fields(lngFldCount))
                End Select
            End If
            Debug.Print Left(strTemp _ 
                &amp; Space(intFldLen), intFldLen);
        Next lngFldCount
        Debug.Print
        rst.MoveNext
    Next lngRecCount

End Sub</code></pre>
Example (Microsoft Access)</P>
To try the following examples in Microsoft&nbsp;Access, first create a new query in the Northwind sample database. Close the <SPAN CLASS="eln">Show Table</SPAN> dialog box without specifying a table or query. Switch to SQL view, paste an individual example into the SQL window, and run the query.</P>
The following example selects the LastName and FirstName fields of all records in the Employees table:</P>

<pre><code>SELECT LastName, FirstName FROM Employees;</code></pre>
The next example selects all fields from the Employees table:</P>

<pre><code>SELECT * FROM Employees;</code></pre>
The following example counts the number of records that have an entry in the PostalCode field and names the returned field Tally:</P>

<pre><code>SELECT Count(PostalCode) AS Tally FROM Customers;</code></pre>
The next example shows what product unit prices would be if each were increased by 10&nbsp;percent. It doesn't change the existing unit prices in the database.</P>

<pre><code>SELECT ProductName, UnitPrice AS Current, UnitPrice * 1.1
AS ProposedNewPrices FROM Products;</code></pre>
The following example calculates the number of products in the database and the average and maximum unit prices:</P>

<pre><code>SELECT Count(*) AS [Total Products], Avg(UnitPrice)
AS [Average Unit Price], Max(UnitPrice)
AS [Maximum Unit Price] FROM Products;</code></pre>
The next example displays the ProductName and UnitPrice for each record in the Products table. The string "has a unit price of" separates the two fields in the result&nbsp;set.</P>

<pre><code>SELECT ProductName, 'has a unit price of', UnitPrice FROM Products;</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

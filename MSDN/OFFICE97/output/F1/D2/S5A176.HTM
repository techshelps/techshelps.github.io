<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Lines Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Lines Property</H2>Applies To</P>
<SPAN CLASS="eln">Module</SPAN> object.</P>
Description</P>
The <SPAN CLASS="eln">Lines</SPAN> property returns a <SPAN CLASS="pop">string</SPAN> containing the contents of a specified line or lines in a <SPAN CLASS="pop">standard module</SPAN> or a <SPAN CLASS="pop">class module</SPAN>.</P>
Setting</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.Lines(</SPAN><SPAN CLASS="p">line</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="p">numlines</SPAN><SPAN CLASS="l">)</SPAN></P>
The <SPAN CLASS="eln">Lines</SPAN> property uses the following settings.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="73pt" VALIGN="TOP"><COL WIDTH="286pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A Module object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">line</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A Long value that specifies the line number of the first line to return.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">numlines</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Long</SPAN> value that specifies the number of lines to return.</P></TD></TR></TBODY></TABLE>
<BR></P>The <SPAN CLASS="eln">Lines</SPAN> property is available only by using Visual Basic and is read-only.</P>
Remarks</P>
Lines in a module are numbered beginning with 1. For example, if you read the <SPAN CLASS="eln">Lines</SPAN> property with a value of 1 for the <SPAN CLASS="p">line</SPAN> argument and 1 for the <SPAN CLASS="p">numlines</SPAN> argument, the <SPAN CLASS="eln">Lines</SPAN> property returns a string containing the text of the first line in the module.</P>
To insert a line of text into a module, use the InsertLines method.</P>
See Also</P>
<SPAN CLASS="eln">InsertLines</SPAN> method.</P>
Example</P>
The following example deletes a specified line from a module.</P>

<pre><code>Function DeleteWholeLine(strModuleName, strText As String) As Boolean
    Dim mdl As Module, lngNumLines As Long
    Dim lngSLine As Long, lngSCol As Long
    Dim lngELine As Long, lngECol As Long
    Dim strTemp As String
    
    On Error GoTo Error_DeleteWholeLine
    DoCmd.OpenModule strModuleName
    Set mdl = Modules(strModuleName)
    
    If mdl.Find(strText, lngSLine, lngSCol, lngELine, lngECol) Then
        lngNumLines = Abs(lngELine - lngSLine) + 1
        strTemp = LTrim$(mdl.Lines(lngSLine, lngNumLines))
        strTemp = RTrim$(strTemp)
        If strTemp = strText Then
            mdl.DeleteLines lngSLine, lngNumLines
        Else
            MsgBox "Line contains text in addition to '" _
                &amp; strText &amp; "'."
        End If
    Else
        MsgBox "Text '" &amp; strText &amp; "' not found."
    End If
    DeleteWholeLine = True
    
Exit_DeleteWholeLine:
    Exit Function
    
Error_DeleteWholeLine:
    MsgBox Err &amp; " :" &amp; Err.Description
    DeleteWholeLine = False
    Resume Exit_DeleteWholeLine
End Function
</code></pre>
You could call this function from a procedure such as the following, which searches the module Module1 for a constant declaration and deletes it.</P>

<pre><code>Sub DeletePiConst()
    If DeleteWholeLine("Module1", "Const conPi = 3.14") Then
        Debug.Print "Constant declaration deleted successfully."
    Else
        Debug.Print "Constant declaration not deleted."
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

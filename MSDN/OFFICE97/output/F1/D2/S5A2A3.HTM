<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Error Object</H1>Description</P>
An <SPAN CLASS="eln">Error</SPAN> object contains details about data access errors, each of which pertains to a single operation involving <SPAN CLASS="pop">DAO</SPAN>.</P>
Remarks</P>
Any operation involving DAO can generate one or more errors. For example, a call to&nbsp;an <SPAN CLASS="pop">ODBC</SPAN> server might result in an error from the database server, an error from ODBC, and a DAO error. As each such error occurs, an <SPAN CLASS="eln">Error</SPAN> object is placed in the <SPAN CLASS="eln">Errors</SPAN> collection of the <SPAN CLASS="eln">DBEngine</SPAN> object. A single event can therefore result in several <B>Error</B> objects appearing in the <B>Errors</B> collection.</P>
When a subsequent DAO operation generates an error, the <SPAN CLASS="eln">Errors</SPAN> collection is cleared, and one or more new <SPAN CLASS="eln">Error</SPAN> objects are placed in the <SPAN CLASS="eln">Errors</SPAN> collection. DAO operations that don't generate an error have no effect on the <SPAN CLASS="eln">Errors</SPAN> collection.</P>
The set of <SPAN CLASS="eln">Error</SPAN> objects in the <SPAN CLASS="eln">Errors</SPAN> collection describes one error. The first <SPAN CLASS="eln">Error</SPAN> object is the lowest level error (the originating error), the second the next higher level error, and so forth. For example, if an <SPAN CLASS="pop">ODBC</SPAN> error occurs while trying to open a Recordset object, the first <SPAN CLASS="eln">Error</SPAN> object — <B>Errors</B>(0) — contains the lowest level ODBC error; subsequent errors contain the ODBC errors returned by the various layers of ODBC. In this case, the ODBC driver manager, and possibly the driver itself, return separate <SPAN CLASS="eln">Error</SPAN> objects. The last <SPAN CLASS="eln">Error</SPAN> object — <B>Errors.Count</B>-1 — contains the&nbsp;DAO error indicating that the object couldn't be opened.</P>
Enumerating the specific errors in the <SPAN CLASS="eln">Errors</SPAN> collection enables your error-handling routines to more precisely determine the cause and origin of an error, and take appropriate steps to recover. On both <SPAN CLASS="pop">Microsoft Jet</SPAN> and <SPAN CLASS="pop">ODBCDirect</SPAN> workspaces, you can read the <SPAN CLASS="eln">Error</SPAN> object's properties to obtain specific details about each error, including:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The Description property, which contains the text of the error alert that will be displayed on the screen if the error is not trapped.</LI><LI CLASS="ULI1">The Number property, which contains the Long integer value of the error constant.</LI><LI CLASS="ULI1">The Source property, which identifies the object that raised the error. This is particularly useful when you have several <SPAN CLASS="eln">Error</SPAN> objects in the <SPAN CLASS="eln">Errors</SPAN> collection following a request to an <SPAN CLASS="pop">ODBC data source</SPAN>.</LI><LI CLASS="ULI1">The <SPAN CLASS="eln">HelpFile</SPAN> and <SPAN CLASS="eln">HelpContext</SPAN> properties, which indicate the appropriate Microsoft Windows Help file and Help topic, respectively, (if any exist) for the error.
</LI></UL></SPAN><SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;When programming in Microsoft Visual&nbsp;Basic for Applications (VBA), if you use the <SPAN CLASS="eln">New</SPAN> keyword to create an object that subsequently causes an error before that object has been appended to a collection, the <SPAN CLASS="eln">DBEngine</SPAN> object's <SPAN CLASS="eln">Errors</SPAN> collection won't contain an entry for that object's error, because the new object is not associated with the <SPAN CLASS="eln">DBEngine</SPAN> object. However, the error information is available in the VBA <SPAN CLASS="eln">Err</SPAN> object.</P>
Your VBA error-handling code should examine the <SPAN CLASS="eln">Errors</SPAN> collection whenever you anticipate a data access error. If you are writing a centralized error handler, test the VBA <SPAN CLASS="eln">Err</SPAN> object to determine if the error information in the <SPAN CLASS="eln">Errors</SPAN> collection is valid. If the <SPAN CLASS="eln">Number</SPAN> property of the last element of the <SPAN CLASS="eln">Errors</SPAN> collection (<SPAN CLASS="cte">DBEngine.Errors.Count - 1</SPAN>) and the value of the <SPAN CLASS="eln">Err</SPAN> object match, you can then use a series of <SPAN CLASS="eln">Select Case</SPAN> statements to identify the particular DAO error or errors that occurred. If they do not match, use the Refresh method on the <SPAN CLASS="eln">Errors</SPAN> collection.</P>
Properties</P>
<SPAN CLASS="eln">Description</SPAN> property, <SPAN CLASS="eln">HelpContext</SPAN>, <SPAN CLASS="eln">HelpFile</SPAN> properties, <SPAN CLASS="eln">Number</SPAN> property, <SPAN CLASS="eln">Source</SPAN> property.</P>
Specifics (Microsoft Access)</P>
The <SPAN CLASS="eln">Description</SPAN> property of an <SPAN CLASS="eln">Error</SPAN> object contains the descriptive string associated with a particular <SPAN CLASS="pop">Data Access Objects (DAO)</SPAN> error. You can read the <SPAN CLASS="eln">Description</SPAN> property only if the DAO error has occurred.</P>
To determine the descriptive string associated with a DAO error that hasn't occurred, use the Microsoft Access <SPAN CLASS="eln">AccessError</SPAN> function. The <SPAN CLASS="eln">AccessError</SPAN> function takes an error number as an argument and returns the descriptive string. For example, if you want to determine the descriptive string associated with DAO error 3021, you might use the <SPAN CLASS="eln">AccessError</SPAN> function as follows:</P>

<pre><code>Debug.Print AccessError(3021)</code></pre>
Microsoft Access prints the descriptive string associated with DAO error 3021, "No&nbsp;current record," to the <SPAN CLASS="pop">Debug window</SPAN>.</P>
Example</P>
See the <SPAN CLASS="eln">Description</SPAN> property example.</P>
Example (Microsoft Access)</P>
The following example generates an error by attempting to open a <SPAN CLASS="eln">Recordset</SPAN> object on a nonexistent Students table. Information about the error is stored in both the DAO <SPAN CLASS="eln">Error</SPAN> object and the Visual&nbsp;Basic <SPAN CLASS="eln">Err</SPAN> object. The procedure prints the value of the <SPAN CLASS="eln">Description</SPAN>, <SPAN CLASS="eln">Source</SPAN>, and <SPAN CLASS="eln">Number</SPAN> properties of the <SPAN CLASS="eln">Error</SPAN> object. Then it prints the values of the corresponding properties of the <SPAN CLASS="eln">Err</SPAN> object.</P>
Note that the last <SPAN CLASS="eln">Error</SPAN> object in the <SPAN CLASS="eln">Errors</SPAN> collection should always refer to the same error as the <SPAN CLASS="eln">Err</SPAN> object. That is, the value of <SPAN CLASS="eln">Err.Number</SPAN> should be equivalent to <SPAN CLASS="eln">Errors.Count&nbsp;–</SPAN> 1. If these two values aren't equivalent, information in the <SPAN CLASS="eln">Errors</SPAN> collection may be outdated. Use the <SPAN CLASS="eln">Refresh</SPAN> method to ensure that the <SPAN CLASS="eln">Errors</SPAN> collection includes the most recent error information.</P>

<pre><code>Sub CheckError()
    Dim dbs As Database, tdf As TableDef, rst As Recordset
    ' Declare Error object variable for enumeration 
    ' of Errors collection.
    Dim errX As Error
    
    ' Ignore errors.
    On Error Resume Next
    ' Clear error in Err object.
    Err.Clear
    ' Refresh Errors collection.
    Errors.Refresh
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Attempt to open Recordset object on nonexistent table.
    Set rst = dbs.OpenRecordset("Students")
    Debug.Print "DAO Error Object:"
    ' Print number of errors in Errors collection.
    Debug.Print "&gt;&gt;&gt;Number of errors: "; Errors.Count
    ' Enumerate Errors collection and key properties.
    For Each errX In DBEngine.Errors
        Debug.Print errX.Description
        Debug.Print errX.Source
        Debug.Print errX.Number
    Next errX
    Debug.Print
    Debug.Print "VBA Err Object:"
    ' Display corresponding properties of Err object.
    Debug.Print Err.Description
    Debug.Print Err.Source
    Debug.Print Err.Number
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INNER JOIN Operation</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>INNER JOIN Operation </H1>Description</P>
Combines records from two tables whenever there are matching values in a common field.</P>
Syntax</P>
FROM <SPAN CLASS="p">table1</SPAN> INNER JOIN <SPAN CLASS="p">table2</SPAN> ON <SPAN CLASS="p">table1</SPAN>.<SPAN CLASS="p">field1</SPAN> <SPAN CLASS="p">compopr table2</SPAN>.<SPAN CLASS="p">field2</SPAN></P>
The INNER JOIN operation has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="284pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">table1</SPAN>, <SPAN CLASS="p">table2</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The names of the tables from which records are combined.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">field1</SPAN>, <SPAN CLASS="p">field2</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The names of the fields that are joined. If they aren't numeric, the fields must be of the same <SPAN CLASS="pop">data type</SPAN> and contain the same kind of data, but they don't have to have the same name.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">compopr</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any relational comparison operator: "=", "&lt;", "&gt;", "&lt;=", "&gt;=", or "&lt;&gt;".</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You can use an INNER JOIN operation in any <SPAN CLASS="jump">FROM</SPAN> clause. This is the most common type of join. Inner joins combine records from two tables whenever there are matching values in a field common to both tables.</P>
You can use INNER JOIN with the Departments and Employees tables to select all the employees in each department. In contrast, to select all departments (even if some have no employees assigned to them) or all employees (even if some aren't assigned to a department), you can use a <SPAN CLASS="jump">LEFT JOIN or RIGHT JOIN</SPAN> operation to create an <SPAN CLASS="pop">outer join</SPAN>.</P>
If you try to join fields containing <SPAN CLASS="pop">Memo</SPAN> or <SPAN CLASS="pop">OLE Object</SPAN> data, an error occurs.</P>
You can join any two numeric fields of like types. For example, you can join on AutoNumber and Long fields because they are like types. However, you cannot join Single and Double types of fields.</P>
The following example shows how you could join the Categories and Products tables on the CategoryID field:</P>

<pre><code>SELECT CategoryName, ProductName
FROM Categories INNER JOIN Products
ON Categories.CategoryID = Products.CategoryID;</code></pre>
In the preceding example, CategoryID is the joined field, but it isn't included in the query output because it isn't included in the <SPAN CLASS="jump">SELECT</SPAN> statement. To include the joined field, include the field name in the SELECT statement in this case, <SPAN CLASS="cte">Categories.CategoryID</SPAN>.</P>
You can also link several ON clauses in a JOIN statement, using the following syntax:</P>
SELECT <SPAN CLASS="p">fields</SPAN><BR>FROM <SPAN CLASS="p">table1</SPAN> INNER JOIN <SPAN CLASS="p">table2</SPAN> <BR>ON <SPAN CLASS="p">table1</SPAN>.<SPAN CLASS="p">field1</SPAN> <SPAN CLASS="p">compopr</SPAN> <SPAN CLASS="p">table2</SPAN>.<SPAN CLASS="p">field1</SPAN> AND <BR>ON <SPAN CLASS="p">table1</SPAN>.<SPAN CLASS="p">field2</SPAN> <SPAN CLASS="p">compopr</SPAN> <SPAN CLASS="p">table2</SPAN>.<SPAN CLASS="p">field2</SPAN>) OR <BR>ON <SPAN CLASS="p">table1</SPAN>.<SPAN CLASS="p">field3</SPAN> <SPAN CLASS="p">compopr</SPAN> <SPAN CLASS="p">table2</SPAN>.<SPAN CLASS="p">field3</SPAN>)];</P>
You can also nest JOIN statements using the following syntax:</P>
SELECT <SPAN CLASS="p">fields</SPAN><BR>FROM <SPAN CLASS="p">table1</SPAN> INNER JOIN <BR>(<SPAN CLASS="p">table2</SPAN> INNER JOIN [( ]<SPAN CLASS="p">table3</SPAN> <BR>[INNER JOIN [( ]<SPAN CLASS="p">tablex</SPAN> [INNER JOIN ...)] <BR>ON <SPAN CLASS="p">table3</SPAN>.<SPAN CLASS="p">field3</SPAN> <SPAN CLASS="p">compopr</SPAN> <SPAN CLASS="p">tablex</SPAN>.<SPAN CLASS="p">fieldx</SPAN>)] <BR>ON <SPAN CLASS="p">table2</SPAN>.<SPAN CLASS="p">field2</SPAN> <SPAN CLASS="p">compopr</SPAN> <SPAN CLASS="p">table3</SPAN>.<SPAN CLASS="p">field3</SPAN>) <BR>ON <SPAN CLASS="p">table1</SPAN>.<SPAN CLASS="p">field1</SPAN> <SPAN CLASS="p">compopr</SPAN> <SPAN CLASS="p">table2</SPAN>.<SPAN CLASS="p">field2</SPAN>;</P>
A LEFT JOIN or a RIGHT JOIN may be nested inside an INNER JOIN, but an INNER JOIN may not be nested inside a LEFT JOIN or a RIGHT JOIN.</P>
See Also</P>
FROM clause, LEFT JOIN, RIGHT JOIN operations, SELECT statement, TRANSFORM statement, UNION operation.</P>
Example </P>
This example creates two <SPAN CLASS="pop">equi-joins</SPAN>: one between the Order Details and Orders tables and another between the Orders and Employees tables. This is necessary because the Employees table doesn't contain sales data, and the Order Details table doesn't contain employee data. The query produces a list of employees and their total sales.</P>
This example calls the EnumFields procedure, which you can find in the SELECT statement example.</P>

<pre><code>Sub InnerJoinX()

    Dim dbs As Database, rst As Recordset

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    ' Create a join between the Order Details and 
    ' Orders tables and another between the Orders and 
    ' Employees tables. Get a list of employees and 
    ' their total sales.
    Set rst = dbs.OpenRecordset("SELECT DISTINCTROW " _
        &amp; "Sum(UnitPrice * Quantity) AS Sales, " _
        &amp; "(FirstName &amp; Chr(32) &amp; LastName) AS Name " _
        &amp; "FROM Employees INNER JOIN(Orders " _
        &amp; "INNER JOIN [Order Details] " _
        &amp; "ON [Order Details].OrderID = " _
        &amp; "Orders.OrderID ) " _
        &amp; "ON Orders.EmployeeID = " _
        &amp; "Employees.EmployeeID " _
        &amp; "GROUP BY (FirstName &amp; Chr(32) &amp; LastName);")

    ' Populate the Recordset.
    rst.MoveLast

    ' Call EnumFields to print the contents of the 
    ' Recordset. Pass the Recordset object and desired
    ' field width.
    EnumFields rst, 20

    dbs.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
To try the following example in Microsoft Access, first create a new query in the Northwind sample database. Close the <SPAN CLASS="eln">Show Table</SPAN> dialog box without specifying a table or query. Switch to SQL view, paste the example into the SQL window, and run the query.</P>
The following example creates two equi-joins: one between the Order Details and Orders tables and another between the Orders and Employees tables. Both joins are necessary because the Employees table doesn't contain sales data, and the Order Details table doesn't contain employee data. The query produces a list of employees and their total sales.</P>

<pre><code>SELECT DISTINCTROW Sum(UnitPrice * Quantity)
AS Sales, FirstName &amp; " " &amp; LastName AS Name FROM Employees
INNER JOIN(Orders INNER JOIN [Order Details]
ON Orders.OrderID = [Order Details].OrderID)
ON Employees.EmployeeID = Orders.EmployeeID
GROUP BY FirstName &amp; " " &amp; LastName;</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

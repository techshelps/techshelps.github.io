<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DistinctCount Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>DistinctCount Property</H1>Applies To</P>
<SPAN CLASS="eln">Index</SPAN> object.</P>
Description</P>
Returns a value that indicates the number of unique values for the Index object that are included in the associated table (<SPAN CLASS="pop">Microsoft Jet workspaces</SPAN> only).</P>
Return Values</P>
The return value is a <SPAN CLASS="eln">Long</SPAN> data type.</P>
Remarks</P>
Check the <SPAN CLASS="eln">DistinctCount</SPAN> property to determine the number of unique values, or keys, in an <SPAN CLASS="pop">index</SPAN>. Any key is counted only once, even though there may be multiple occurrences of that value if the index permits duplicate values. This information is useful in applications that attempt to optimize data access by evaluating index information. The number of unique values is also known as the <SPAN CLASS="p">cardinality</SPAN> of an <SPAN CLASS="eln">Index</SPAN> object.</P>
The <SPAN CLASS="eln">DistinctCount</SPAN> property won't always reflect the actual number of keys at a particular time. For example, a change caused by a rolled back <SPAN CLASS="pop">transaction</SPAN> won't be reflected immediately in the <SPAN CLASS="eln">DistinctCount</SPAN> property. The <SPAN CLASS="eln">DistinctCount</SPAN> property value also may not reflect the deletion of records with unique keys. The number will be accurate immediately after you use the CreateIndex method.</P>
Example</P>
This example uses the <SPAN CLASS="eln">DistinctCount</SPAN> property to show how you can determine the number of unique values in an <SPAN CLASS="eln">Index</SPAN> object. However, this value is only accurate immediately after creating the <SPAN CLASS="eln">Index</SPAN>. It will remain accurate if no keys change, or if new keys are added and no old keys are deleted; otherwise, it will not be reliable. (If this procedure is run several times, you can see the effect on the <SPAN CLASS="eln">DistinctCount</SPAN> property values of the existing <SPAN CLASS="eln">Index</SPAN> objects.)</P>

<pre><code>Sub DistinctCountX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim idxCountry As Index
    Dim idxLoop As Index
    Dim rstEmployees As Recordset
    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set tdfEmployees = dbsNorthwind!Employees

    With tdfEmployees
        ' Create and append new Index object to the Employees
        ' table.
        Set idxCountry = .CreateIndex("CountryIndex")
        idxCountry.Fields.Append _
            idxCountry.CreateField("Country")
        .Indexes.Append idxCountry

        ' The collection must be refreshed for the new
        ' DistinctCount data to be available.
        .Indexes.Refresh

        ' Enumerate Indexes collection to show the current
        ' DistinctCount values.
        Debug.Print "Indexes before adding new record"
        For Each idxLoop In .Indexes
            Debug.Print "    DistinctCount = " &amp; _
                idxLoop.DistinctCount &amp; ", Name = " &amp; _
                idxLoop.Name
        Next idxLoop

        Set rstEmployees = _
            dbsNorthwind.OpenRecordset("Employees")

        ' Add a new record to the Employees table.
        With rstEmployees
            .AddNew
            !FirstName = "April"
            !LastName = "LaMonte"
            !Country = "Canada"
            .Update
        End With

        ' Enumerate Indexes collection to show the modified
        ' DistinctCount values.
        Debug.Print "Indexes after adding new record and " &amp; _
            "refreshing Indexes"
        .Indexes.Refresh
        For Each idxLoop In .Indexes
            Debug.Print "    DistinctCount = " &amp; _
                idxLoop.DistinctCount &amp; ", Name = " &amp; _
                idxLoop.Name
        Next idxLoop

        ' Delete new record because this is a demonstration.
        With rstEmployees
            .Bookmark = .LastModified
            .Delete
            .Close
        End With
        ' Delete new Indexes because this is a demonstration.
        .Indexes.Delete idxCountry.Name
    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example prints the number of unique values in the indexes on the OrderID and OrderDate fields of an Orders table. Note that the <SPAN CLASS="eln">DistinctCount</SPAN> property is guaranteed to return the number of unique values in an index only immediately after an index has been created with the <SPAN CLASS="eln">CreateIndex</SPAN> method, or after a database has been compacted or converted by using the <SPAN CLASS="eln">CompactDatabase</SPAN> method.</P>

<pre><code>Sub CountKeys()
    Dim dbs As Database, tdf As TableDef
    Dim idx As Index, fldOrderID As Field, fldOrderDate As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Orders table.
    Set tdf = dbs.TableDefs!Orders
    ' Create new index.
    Set idx = tdf.CreateIndex("OrderDateIndex")
    ' Create and append index fields.
    Set fldOrderDate = idx.CreateField("OrderDate", dbDate)
    idx.Fields.Append fldOrderDate
    ' Append new index.
    tdf.Indexes.Append idx
    ' Refresh Indexes collection.
    tdf.Indexes.Refresh
    ' Print value of DistinctCount property for new index.
    Debug.Print idx.DistinctCount
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

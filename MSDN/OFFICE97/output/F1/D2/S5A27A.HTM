<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connection Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Connection Object</H2>Description</P>
A <SPAN CLASS="lee">Connection</SPAN> object represents a connection to an <SPAN CLASS="pop">ODBC</SPAN> database (<SPAN CLASS="pop">ODBCDirect workspaces</SPAN> only).</P>
Remarks</P>
A <SPAN CLASS="lee">Connection</SPAN> is a non-persistent object that represents a connection to a remote database. The <SPAN CLASS="lee">Connection</SPAN> object is only available in ODBCDirect workspaces (that is, a <SPAN CLASS="lee">Workspace</SPAN> object created with the type option set to <SPAN CLASS="lee">dbUseODBC</SPAN>).</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;Code written for earlier versions of DAO can continue to use the <SPAN CLASS="lee">Database</SPAN> object for backward compatibility, but if the new features of a <SPAN CLASS="lee">Connection</SPAN> are desired, you should revise code to use the <SPAN CLASS="lee">Connection</SPAN> object. To help with code conversion, you can obtain a <SPAN CLASS="lee">Connection</SPAN> object reference from a <SPAN CLASS="lee">Database</SPAN> by reading the <SPAN CLASS="lee">Connection</SPAN> property of the <SPAN CLASS="lee">Database</SPAN> object. Conversely, you can obtain a <B>Database</B> object reference from the <SPAN CLASS="lee">Connection</SPAN> object's <SPAN CLASS="lee">Database</SPAN>&nbsp;property.</P>
Properties</P>
<SPAN CLASS="eln">Connect</SPAN> property, <SPAN CLASS="eln">Database</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">QueryTimeout</SPAN> property, <SPAN CLASS="eln">RecordsAffected</SPAN> property, <SPAN CLASS="eln">StillExecuting</SPAN> property, <SPAN CLASS="eln">Transactions</SPAN> property, <SPAN CLASS="eln">Updatable</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Cancel</SPAN> method, <SPAN CLASS="eln">Close</SPAN> method, <SPAN CLASS="eln">CreateQueryDef</SPAN> method, <SPAN CLASS="eln">Execute</SPAN> method, <SPAN CLASS="eln">OpenRecordset</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">Connection</SPAN> property, <SPAN CLASS="eln">Database</SPAN> object.</P>
Example</P>
This example demonstrates the <SPAN CLASS="eln">Connection</SPAN> object and <SPAN CLASS="eln">Connections</SPAN> collection by opening a Microsoft&nbsp;Jet <SPAN CLASS="eln">Database</SPAN> object and two ODBCDirect <SPAN CLASS="eln">Connection</SPAN> objects and listing the properties available to each object.</P>

<pre><code>Sub ConnectionObjectX()

    Dim wrkJet As Workspace
    Dim dbsNorthwind As Database
    Dim wrkODBC As Workspace
    Dim conPubs As Connection
    Dim conPubs2 As Connection
    Dim conLoop As Connection
    Dim prpLoop As Property

    ' Open Microsoft Jet Database object.
    Set wrkJet = CreateWorkspace("NewJetWorkspace", _
        "admin", "", dbUseJet)
    Set dbsNorthwind = wrkJet.OpenDatabase("Northwind.mdb")

    ' Create ODBCDirect Workspace object and open Connection
    ' objects.
    Set wrkODBC = CreateWorkspace("NewODBCWorkspace", _
        "admin", "", dbUseODBC)
    Set conPubs = wrkODBC.OpenConnection("Connection1", , , _
        "ODBC;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers")
    Set conPubs2 = wrkODBC.OpenConnection("Connection2", , _
        True, "ODBC;DATABASE=pubs;UID=sa;PWD=;DSN=Publishers")
    Debug.Print "Database properties:"

    With dbsNorthwind
        ' Enumerate Properties collection of Database object.
        For Each prpLoop In .Properties
            On Error Resume Next
            Debug.Print "    " &amp; prpLoop.Name &amp; " = " &amp; _
                prpLoop.Value
            On Error GoTo 0
        Next prpLoop
    End With

    ' Enumerate the Connections collection.
    For Each conLoop In wrkODBC.Connections
        Debug.Print "Connection properties for " &amp; _
            conLoop.Name &amp; ":"

        With conLoop
            ' Print property values by explicitly calling each
            ' Property object; the Connection object does not
            ' support a Properties collection.
            Debug.Print "    Connect = " &amp; .Connect
            ' Property actually returns a Database object.
            Debug.Print "    Database[.Name] = " &amp; _
                .Database.Name
            Debug.Print "    Name = " &amp; .Name
            Debug.Print "    QueryTimeout = " &amp; .QueryTimeout
            Debug.Print "    RecordsAffected = " &amp; _
                .RecordsAffected
            Debug.Print "    StillExecuting = " &amp; _
                .StillExecuting
            Debug.Print "    Transactions = " &amp; .Transactions
            Debug.Print "    Updatable = " &amp; .Updatable
        End With

    Next conLoop

    dbsNorthwind.Close
    conPubs.Close
    conPubs2.Close
    wrkJet.Close
    wrkODBC.Close

End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

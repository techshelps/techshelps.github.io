<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CurrentDb Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CurrentDb Function</H2>Description</P>
The <SPAN CLASS="eln">CurrentDb</SPAN> function returns an object variable of type Database that represents the database currently open in the Microsoft Access window.</P>
Syntax</P>
<SPAN CLASS="l">CurrentDb</SPAN></P>
Remarks</P>
In order to manipulate the structure of your database and its data from Visual&nbsp;Basic, you must use <SPAN CLASS="pop">Data Access Objects (DAO)</SPAN>. The <SPAN CLASS="eln">CurrentDb</SPAN> function provides a way to access the current database from Visual&nbsp;Basic code without having to know the name of the database. Once you have a variable that points to the current database, you can also access and manipulate other objects and collections in the <SPAN CLASS="jump">DAO hierarchy</SPAN>.</P>
You can use the <SPAN CLASS="eln">CurrentDb</SPAN> function to create multiple object variables that refer to the current database. In the following example, the variables <SPAN CLASS="cte">dbsA</SPAN> and <SPAN CLASS="cte">dbsB</SPAN> both refer to the current database:</P>

<pre><code>Dim dbsA As Database, dbsB As Database
Set dbsA = CurrentDb
Set dbsB = CurrentDb</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;In previous versions of Microsoft Access, you may have used the syntax <SPAN CLASS="cte">DBEngine.Workspaces(0).Databases(0)</SPAN> or <SPAN CLASS="cte">DBEngine(0)(0)</SPAN> to return a pointer to the current database. In Microsoft Access&nbsp;97, you should use the <SPAN CLASS="eln">CurrentDb</SPAN> function instead. The <SPAN CLASS="eln">CurrentDb</SPAN> function creates another instance of the current database, while the <SPAN CLASS="cte">DBEngine(0)(0)</SPAN> syntax refers to the open copy of the current database. The <SPAN CLASS="eln">CurrentDb</SPAN> function enables you to create more than one variable of type <SPAN CLASS="eln">Database</SPAN> that refers to the current database. Microsoft Access still supports the <SPAN CLASS="cte">DBEngine(0)(0)</SPAN> syntax, but you should consider making this modification to your code in order to avoid possible conflicts in a <SPAN CLASS="pop">multiuser database</SPAN>.</P>
If you need to work with another database at the same time that the current database is open in the Microsoft Access window, use the OpenDatabase method of a Workspace object. The <SPAN CLASS="eln">OpenDatabase</SPAN> method doesn't actually open the second database in the Microsoft Access window; it simply returns a <SPAN CLASS="eln">Database</SPAN> variable representing the second database. The following example returns a pointer to the current database and to a database called Contacts.mdb:</P>

<pre><code>Dim dbsCurrent As Database, dbsContacts As Database
Set dbsCurrent = CurrentDb
Set dbsContacts = DBEngine.Workspaces(0).OpenDatabase("Contacts.mdb")</code></pre>
See Also</P>
<SPAN CLASS="eln">Database</SPAN> object ("DAO Language Reference"), <SPAN CLASS="eln">Databases</SPAN> collection ("DAO Language Reference").</P>
Example</P>
The following example uses the <SPAN CLASS="eln">CurrentDb</SPAN> function to return a <SPAN CLASS="eln">Database</SPAN> object variable pointing to the current database. It then enumerates all the fields in the Employees table in that database.</P>

<pre><code>Sub ListFields()
    Dim dbs As Database, tdf As TableDef, fld As Field

    ' Return Database object variable pointing to current database.
    Set dbs = CurrentDb
    ' Return TableDef object variable pointing to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Enumerate fields in Employees table.
    For Each fld In tdf.Fields
        Debug.Print fld.Name
    Next fld
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

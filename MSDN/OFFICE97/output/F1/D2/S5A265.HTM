<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AppendChunk Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>AppendChunk Method</H2>Applies To</P>
<SPAN CLASS="eln">Field</SPAN> object.</P>
Description</P>
Appends data from a <SPAN CLASS="pop">string expression</SPAN> to a <SPAN CLASS="pop">Memo</SPAN> or <SPAN CLASS="pop">Long Binary</SPAN> Field object in a <SPAN CLASS="eln">Recordset</SPAN>.</P>
Syntax</P>
<SPAN CLASS="p">recordset</SPAN><SPAN CLASS="eln">!</SPAN> <SPAN CLASS="p">field</SPAN><SPAN CLASS="eln">.AppendChunk</SPAN> <SPAN CLASS="p">source</SPAN></P>
The <SPAN CLASS="eln">AppendChunk</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="274pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">recordset</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents the <SPAN CLASS="eln">Recordset</SPAN> object containing the <SPAN CLASS="eln">Fields</SPAN> collection.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">field</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An object variable that represents the name of a <SPAN CLASS="eln">Field</SPAN> object whose <SPAN CLASS="eln">Type</SPAN> property is set to <SPAN CLASS="eln">dbMemo</SPAN> (Memo), <SPAN CLASS="eln">dbLongBinary</SPAN> (Long Binary), or the equivalent.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">source</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A Variant (String subtype) expression or variable containing the data you want to append to the <SPAN CLASS="eln">Field</SPAN> object specified by <SPAN CLASS="p">field.</SPAN></P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You can use the <SPAN CLASS="eln">AppendChunk</SPAN> and <SPAN CLASS="eln">GetChunk</SPAN> methods to access subsets of data in a Memo or Long Binary field.</P>
You can also use these methods to conserve string space when you work with Memo and Long Binary fields. Certain operations (copying, for example) involve temporary strings. If string space is limited, you may need to work with chunks of a field instead of the entire field.</P>
If there is no <SPAN CLASS="pop">current record</SPAN> when you use <SPAN CLASS="eln">AppendChunk</SPAN>, an error occurs.</P>
<SPAN CLASS="nh">Notes</SPAN></P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The initial <SPAN CLASS="eln">AppendChunk</SPAN> operation (after an Edit or AddNew call) will simply place the data in the field, overwriting any existing data. Subsequent <SPAN CLASS="eln">AppendChunk</SPAN> calls within the same <SPAN CLASS="eln">Edit</SPAN> or <SPAN CLASS="eln">AddNew</SPAN> session will then add to the existing data.</LI><LI CLASS="ULI1">In an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>, unless you first edit another field in the current record, using <B>AppendChunk</B> will fail (though no error occurs) while you are in <B>Edit</B> mode.</LI><LI CLASS="ULI1">In an ODBCDirect workspace, after you use <B>AppendChunk </B>on a field, you cannot read or write that field in an assignment statement until you move off the current record and then return to it. You can do this by using the <B>MoveNext</B> and <B>MovePrevious</B> methods.
</LI></UL></SPAN>See Also</P>
<SPAN CLASS="eln">AddNew</SPAN> method, <SPAN CLASS="eln">Edit</SPAN> method, <SPAN CLASS="eln">FieldSize</SPAN> property, <SPAN CLASS="eln">GetChunk</SPAN> method, <SPAN CLASS="eln">Type</SPAN> property.</P>
Example</P>
This example uses the <SPAN CLASS="eln">AppendChunk</SPAN> and <SPAN CLASS="eln">GetChunk</SPAN> methods to fill an OLE object field with data from another record,<SPAN CLASS="eln"> </SPAN>32K at a time. In a real application, one might use a procedure like this to copy an employee record (including the employee's photo) from one table to another. In this example, the record is simply being copied back to same table. Note that all the chunk manipulation takes place within a single <SPAN CLASS="eln">AddNew</SPAN>-<SPAN CLASS="eln">Update</SPAN> sequence.</P>

<pre><code>Sub AppendChunkX()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset
    Dim rstEmployees2 As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    ' Open two recordsets from the Employees table.
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees", dbOpenDynaset)
    Set rstEmployees2 = rstEmployees.Clone

    ' Add a new record to the first Recordset and copy the
    ' data from a record in the second Recordset.
    With rstEmployees
        .AddNew
        !FirstName = rstEmployees2!FirstName
        !LastName = rstEmployees2!LastName
        CopyLargeField rstEmployees2!Photo, !Photo
        .Update
        ' Delete new record because this is a demonstration.
        .Bookmark = .LastModified
        .Delete
        .Close
    End With

    rstEmployees2.Close
    dbsNorthwind.Close

End Sub

Function CopyLargeField(fldSource As Field, _
    fldDestination As Field)

    ' Set size of chunk in bytes.
    Const conChunkSize = 32768

    Dim lngOffset As Long
    Dim lngTotalSize As Long
    Dim strChunk As String

    ' Copy the photo from one Recordset to the other in 32K
    ' chunks until the entire field is copied.
    lngTotalSize = fldSource.FieldSize
    Do While lngOffset &lt; lngTotalSize
        strChunk = fldSource.GetChunk(lngOffset, conChunkSize)
        fldDestination.AppendChunk strChunk
        lngOffset = lngOffset + conChunkSize
    Loop

End Function</code></pre>
Example (Microsoft Access)</P>
The following example appends data to the Notes field for each record in an Employees table. The data type of the Notes field is Memo. The procedure returns the contents of the field by using the <SPAN CLASS="eln">GetChunk</SPAN> method, adds to the data, and appends the altered data back to the Notes field by using the <SPAN CLASS="eln">AppendChunk</SPAN> method.</P>

<pre><code>Sub AddToMemo()
    Dim dbs As Database, rst As Recordset
    Dim fldNotes As Field, fldFirstName As Field
    Dim fldLastName As Field
    Dim lngSize As Long, strChunk As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset object.
    Set rst = dbs.OpenRecordset("Employees")
    ' Return references to Field objects.
    Set fldNotes = rst!Notes
    Set fldFirstName = rst!FirstName
    Set fldLastName = rst!LastName
    
    ' Loop through all records in recordset.
    Do Until rst.EOF
        ' Check if data exists in Notes field.
        If IsNull(fldNotes.Value) Then
            ' If no data, use AppendChunk method only.
            strChunk = fldFirstName _
                &amp; " " &amp; fldLastName &amp; " is an excellent employee."
            With rst
                .Edit
                !Notes = strChunk
                .Update
                .MoveNext
            End With
        Else
            lngSize = Len(fldNotes)
            ' Use GetChunk to retrieve existing data.
            strChunk = fldNotes.GetChunk(0, lngSize)
            ' Alter data.
            strChunk = strChunk &amp; "  " &amp; fldFirstName _
                &amp; " " &amp; fldLastName &amp; " is an excellent employee."
            With rst
                .Edit                            ' Enable editing.
                !Notes = ""                    ' Initialize field.
                !Notes.AppendChunk strChunk    ' Append altered data.
                .Update                        ' Save changes.
                .MoveNext                    ' Move to next record.
            End With
        End If
    Loop
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

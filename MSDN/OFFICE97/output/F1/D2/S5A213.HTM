<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetValue Action</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>SetValue Action</H2>Description</P>
You can use the SetValue action to set the value of a Microsoft Access <SPAN CLASS="pop">field</SPAN>, <SPAN CLASS="pop">control</SPAN>, or <SPAN CLASS="pop">property</SPAN> on a <SPAN CLASS="pop">form</SPAN>, a form <SPAN CLASS="pop">datasheet</SPAN>, or a <SPAN CLASS="pop">report</SPAN>.</P>
Setting</P>
The SetValue action has the following arguments.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="76pt" VALIGN="TOP"><COL WIDTH="283pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Action argument</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Item</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the field, control, or property whose value you want to set.&nbsp;Enter the field, control, or property name in the <SPAN CLASS="eln">Item</SPAN> box in the <SPAN CLASS="eln">Action Arguments</SPAN> section of the <SPAN CLASS="pop">Macro window</SPAN>. You must use the full&nbsp;syntax to refer to this item, such as <SPAN CLASS="p">controlname</SPAN> (for a control on&nbsp;the&nbsp;form or report from which the <SPAN CLASS="pop">macro</SPAN> was called) or <SPAN CLASS="l">Forms!</SPAN><SPAN CLASS="p">formname</SPAN><SPAN CLASS="l">!</SPAN><SPAN CLASS="p">controlname</SPAN>. This is a required argument.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Expression</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The <SPAN CLASS="pop">expression</SPAN> Microsoft Access uses to set the value for this item. You must always use the full syntax to refer to any <SPAN CLASS="pop">objects</SPAN> in the expression. For example, to increase the value in a Salary control on an Employees form by 10 percent, use <SPAN CLASS="ctt">Forms!Employees!Salary*1.1</SPAN>. This is a required argument.</P>
<SPAN CLASS="nh">Note</SPAN>   You shouldn't use an equal sign (=) before the expression in this argument. If you do, Microsoft Access evaluates the expression and then uses this value as the expression in this argument. This can produce unexpected results if the expression is a <SPAN CLASS="pop">string</SPAN>.</P>
For example, if you type <SPAN CLASS="l">="String1"</SPAN> for this argument, Microsoft Access first evaluates the expression as String1. Then it uses String1 as the expression in this argument, expecting to find a control or property named String1 on the form or report that called the macro.</P></TD></TR></TBODY></TABLE>
<BR></P><SPAN CLASS="nh">Note</SPAN>   To use the Expression Builder to create an expression for either of these arguments, click the <SPAN CLASS="eln">Build</SPAN> button to the right of the <SPAN CLASS="eln">Item</SPAN> or <SPAN CLASS="eln">Expression</SPAN> box.</P>
Remarks</P>
You can use this action to set a value for a field or control on a form, a form datasheet, or a report. You can also set the value for almost all control, form, and report properties in any <SPAN CLASS="pop">view</SPAN>. To find out whether a particular property can be set by using a macro and which views it can be set in, see the topic for that property.</P>
You can also set the value for a field in a form's underlying table even if the form doesn't contain a control <SPAN CLASS="pop">bound</SPAN> to the field. Use the syntax <SPAN CLASS="l">Forms!</SPAN><SPAN CLASS="p">formname</SPAN><SPAN CLASS="l">!</SPAN><SPAN CLASS="p">fieldname</SPAN> in the <SPAN CLASS="eln">Item</SPAN> box to set the value for such a field. You can also refer to a field in a report's underlying table by using the syntax <SPAN CLASS="l">Reports!</SPAN><SPAN CLASS="p">reportname</SPAN><SPAN CLASS="l">!</SPAN><SPAN CLASS="p">fieldname</SPAN>, but there must be a control on the report bound to this field, or the field must be referred to in a <SPAN CLASS="pop">calculated control</SPAN> on the report.</P>
If you set the value of a control on a form, the SetValue action doesn't trigger the control's form-level <SPAN CLASS="pop">validation rules</SPAN>, but it does trigger the underlying field's table-level validation rules if the control is a bound control. The SetValue action also triggers recalculation, but the recalculation may not happen immediately. To trigger immediate <SPAN CLASS="pop">repainting</SPAN> and force the recalculation to completion, use the <SPAN CLASS="jump">RepaintObject</SPAN> action. The value you set in a control by using the SetValue action is also not affected by an <SPAN CLASS="pop">input mask</SPAN> set in the control's or underlying field's InputMask property.</P>
To change the value of a control, you can use the SetValue action in a macro specified by the control's <SPAN CLASS="eln">AfterUpdate</SPAN> <SPAN CLASS="jump">event property</SPAN>. However, you can't use the SetValue action in a macro specified by a control's <SPAN CLASS="eln">BeforeUpdate</SPAN> event property to change the value of the control (although you can use SetValue to change the value of other controls). You can also use the SetValue action in a macro specified by the <SPAN CLASS="eln">BeforeUpdate</SPAN> or <SPAN CLASS="eln">AfterUpdate</SPAN> property of a form to change the value of any controls in the current record.</P>
<SPAN CLASS="nh">Note</SPAN>   You can't use the SetValue action to set the value of the following controls:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Bound controls and calculated controls on reports.</LI><LI CLASS="ULI1">Calculated controls on forms.
</LI></UL></SPAN><SPAN CLASS="nh">Tip</SPAN>   You can use the SetValue action to hide or show a form in Form view. Enter <SPAN CLASS="l">Forms!</SPAN><SPAN CLASS="p">formname</SPAN><SPAN CLASS="l">.Visible</SPAN> in the <SPAN CLASS="eln">Item</SPAN> box and <SPAN CLASS="eln">No</SPAN> or <SPAN CLASS="eln">Yes</SPAN> in the <SPAN CLASS="eln">Expression</SPAN> box. Setting a <SPAN CLASS="pop">modal</SPAN> form's <SPAN CLASS="eln">Visible</SPAN> property to No hides the form and makes it modeless. Setting the property to Yes displays the form and makes it modal again.</P>
Changing the value of or adding new data in a control by using the SetValue action in a macro doesn't trigger events such as BeforeUpdate, BeforeInsert, or Change that occur when you change or enter data in these controls in the user interface. These events also don't occur if you set the value of the control by using Visual Basic.</P>
This action isn't available in by Visual Basic. Set the value directly in Visual Basic.</P>
See Also</P>
RepaintObject action, SendKeys action.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

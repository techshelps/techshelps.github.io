<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BeforeUpdate, AfterUpdate Events</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>BeforeUpdate, AfterUpdate Events</H2>Applies To</P>
Bound Object Frame control, Check Box control, Combo Box control, Form, List Box control, Option Button control, Option Group control, Text Box control, Toggle Button control.</P>
Description</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">The BeforeUpdate event occurs before changed data in a <SPAN CLASS="pop">control</SPAN> or record is <SPAN CLASS="pop">updated</SPAN>.</LI><LI CLASS="ULI1">The AfterUpdate event occurs after changed data in a control or record is updated.
</LI></UL></SPAN><SPAN CLASS="nh">Notes</SPAN></P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Changing data in a control by using Visual&nbsp;Basic or a <SPAN CLASS="pop">macro</SPAN> containing the <SPAN CLASS="jump">SetValue</SPAN> action doesn't trigger these events for the control. However, if you then move to another record or save the record, the <SPAN CLASS="pop">form's</SPAN> BeforeUpdate and AfterUpdate events do occur.</LI><LI CLASS="ULI1">The BeforeUpdate and AfterUpdate events apply only to controls on a form, not controls on a <SPAN CLASS="pop">report</SPAN>.</LI><LI CLASS="ULI1">These events don't apply to <SPAN CLASS="pop">option buttons</SPAN>, <SPAN CLASS="pop">check boxes</SPAN>, or <SPAN CLASS="pop">toggle buttons</SPAN> in an <SPAN CLASS="pop">option group</SPAN>. They apply only to the option group itself.
</LI></UL></SPAN>Remarks</P>
To run a macro or <SPAN CLASS="pop">event procedure</SPAN> when these events occur, set the BeforeUpdate<SPAN CLASS="jump">, or </SPAN>AfterUpdate property to the name of the macro or to [Event Procedure].</P>
The BeforeUpdate and AfterUpdate events are triggered when a control or record is updated. Within a record, changed data in each control is updated when the control loses the <SPAN CLASS="pop">focus</SPAN> or when the user presses <SPAN CLASS="kn">ENTER</SPAN> or <SPAN CLASS="kn">TAB</SPAN>. When the focus leaves the record or if the user clicks <SPAN CLASS="eln">Save Record</SPAN> on the <SPAN CLASS="eln">Records</SPAN> menu, the entire record is updated, and the data is saved in the database.</P>
When you enter new or changed data in a control on a form and then move to another record or save the record by clicking <SPAN CLASS="eln">Save Record</SPAN> on the <SPAN CLASS="eln">Records</SPAN> menu, the BeforeUpdate and AfterUpdate events for the form occur immediately after the BeforeUpdate and AfterUpdate events for the control. When you move to a different record, the <SPAN CLASS="jump">Exit</SPAN> and <SPAN CLASS="jump">LostFocus</SPAN> events for the control occur, followed by the <SPAN CLASS="jump">Current</SPAN> event for the record you moved to, and the <SPAN CLASS="jump">Enter</SPAN> and <SPAN CLASS="jump">GotFocus</SPAN> events for the first control in this record. To run the BeforeUpdate and AfterUpdate macros or event procedures without running the Exit and LostFocus macros or event procedures, save the record by using the <SPAN CLASS="eln">Save Record</SPAN> command on the <SPAN CLASS="eln">Records</SPAN> menu.</P>
BeforeUpdate and AfterUpdate macros and event procedures run only if you change the data in a control. These events don't occur when a value changes in a <SPAN CLASS="pop">calculated control</SPAN>. BeforeUpdate and AfterUpdate macros and event procedures for a form run only if you change the data in one or more controls in the record.</P>
For forms, you can use the BeforeUpdate event to cancel updating of a record before moving to another record.</P>
For <SPAN CLASS="pop">bound controls</SPAN>, the OldValue property isn't set to the updated value until after the AfterUpdate event for the form occurs. Even if the user enters a new value in the control, the <SPAN CLASS="eln">OldValue</SPAN> property setting isn't changed until the data is saved (the record is updated). If you cancel an update, the value of the <SPAN CLASS="eln">OldValue</SPAN> property replaces the existing value in the control.</P>
You often use the BeforeUpdate event to validate data, especially when you perform complex validations, such as those that:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Involve conditions for more than one value on a form.</LI><LI CLASS="ULI1">Display different error messages for different data entered.</LI><LI CLASS="ULI1">Can be overridden by the user.</LI><LI CLASS="ULI1">Contain references to controls on other forms or contain user-defined functions.
</LI></UL></SPAN><SPAN CLASS="nh">Note</SPAN>   To perform simple validations, or more complex validations such as requiring a value in a field or validating more than one control on a form, you can use the ValidationRule property for controls and the <SPAN CLASS="eln">ValidationRule</SPAN> and Required properties for fields and records in tables.</P>
See Also</P>
Enter, Exit events, Event properties, <SPAN CLASS="eln">Required</SPAN> property, SetValue action, <B>ValidationRule</B>, <SPAN CLASS="eln">ValidationText</SPAN> properties.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

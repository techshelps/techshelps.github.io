<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MouseDown, MouseUp Events -- Event Procedures</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>MouseDown, MouseUp Events — Event Procedures</H2>Description</P>
To create an <SPAN CLASS="pop">event procedure</SPAN> that runs when the <SPAN CLASS="jump">MouseDown or MouseUp</SPAN> event occurs, set the OnMouseDown<SPAN CLASS="jump"> or </SPAN>OnMouseUp property to [Event Procedure], and click the <SPAN CLASS="eln">Build</SPAN> button.</P>
Syntax</P>
<SPAN CLASS="l">Private Sub Form_MouseDown(</SPAN>Button<SPAN CLASS="l"> As Integer, </SPAN>Shift<SPAN CLASS="l"> As Integer, </SPAN>X<SPAN CLASS="l"> As Single,</SPAN><BR>úY<SPAN CLASS="l"> As Single)</SPAN></P>
<SPAN CLASS="l">Private Sub </SPAN><SPAN CLASS="p">controlname</SPAN><SPAN CLASS="l">_MouseDown(</SPAN>Button<SPAN CLASS="l"> As Integer, </SPAN>Shift<SPAN CLASS="l"> As Integer,<BR></SPAN>úX<SPAN CLASS="l"> As Single, </SPAN>Y<SPAN CLASS="l"> As Single)</SPAN></P>
<SPAN CLASS="l">Private Sub Form_MouseUp(</SPAN>Button<SPAN CLASS="l"> As Integer, </SPAN>Shift<SPAN CLASS="l"> As Integer, </SPAN>X<SPAN CLASS="l"> As Single,</SPAN><BR>úY<SPAN CLASS="l"> As Single)</SPAN></P>
<SPAN CLASS="l">Private Sub </SPAN><SPAN CLASS="p">controlname</SPAN><SPAN CLASS="l">_MouseUp(</SPAN>Button<SPAN CLASS="l"> As Integer, </SPAN>Shift<SPAN CLASS="l"> As Integer,</SPAN><BR>úX<SPAN CLASS="l"> As Single, </SPAN>Y<SPAN CLASS="l"> As Single)</SPAN></P>
The MouseDown and MouseUp events have the following arguments.</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="182pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">controlname</SPAN></P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the <SPAN CLASS="pop">control</SPAN> whose MouseDown or MouseUp event procedure you want to run.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Button</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The button that was pressed (MouseDown) or released (MouseUp) to trigger the event. If you need to test for the Button argument, you can <SPAN CLASS="jump">use one of the following intrinsic constants as bit masks</SPAN>:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Constant</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLeftButton</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the left mouse button.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acRightButton</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the right mouse button.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acMiddleButton</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the middle mouse button.</P></TD></TR></TBODY></TABLE>
<BR></P><I>(continued)</I></P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="182pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Shift</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The state of the <SPAN CLASS="kn">SHIFT</SPAN>, <SPAN CLASS="kn">CTRL</SPAN>, and <SPAN CLASS="kn">ALT</SPAN> keys when the button specified by the Button argument was pressed or released. If you need to test for the Shift argument, you can use one of the following intrinsic constants as bit masks:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Constant</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acShiftMask</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the <SPAN CLASS="kn">SHIFT</SPAN> key.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acCtrlMask</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the <SPAN CLASS="kn">CTRL</SPAN> key.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acAltMask</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the <SPAN CLASS="kn">ALT</SPAN> key.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">X, Y</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The x and y coordinates for the current location of the mouse pointer. The X and Y arguments are always expressed in <SPAN CLASS="pop">twips</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P><SPAN CLASS="nh">Note</SPAN>   If a mouse button is pressed while the pointer is over a form or control, that object receives all mouse events up to and including the last MouseUp event. This means that the X and Y arguments may not always be relative to the object that receives them.</P>
Remarks</P>
You test for a condition by first assigning each result to a temporary Integer variable and then comparing the Shift or Button argument to an intrinsic constant. Use the And operator with the Button argument to test whether the condition is greater than 0, indicating that the left, middle, or right mouse button was pressed, as in the following example:</P>

<pre><code>LeftDown = (Button And acLeftButton) &gt; 0</code></pre>
In an event procedure, you can test for any combination of conditions, as in the following example:</P>

<pre><code>If ShiftDown And CtrlDown Then
    .                    ' Do this if SHIFT and CTRL keys are pressed.
    .
    .
End If</code></pre>
<SPAN CLASS="nh">Note</SPAN>   The Button argument for the MouseDown and MouseUp events differs from the Button argument used for the <SPAN CLASS="jump">MouseMove</SPAN> event. For the MouseDown and MouseUp events, the Button argument indicates exactly one button per event; that is, if you press two mouse buttons, two MouseDown (and MouseUp) events will occur, each with a different Button argument setting. For the MouseMove event, the Button argument indicates the current state of all buttons.</P>
You can use the arguments for the <SPAN CLASS="jump">KeyDown</SPAN>, <SPAN CLASS="jump">KeyPress</SPAN>, and <SPAN CLASS="jump">KeyUp</SPAN> events, in conjunction with the arguments for the MouseDown, MouseUp, and MouseMove events, to make your application work smoothly for both keyboard and mouse users.</P>
You can't cancel the MouseDown or MouseUp events.</P>
See Also</P>
MouseDown, MouseUp events&nbsp;— macros.</P>
Example</P>
The following example shows how you can find out which mouse button caused a MouseDown event.</P>
To try the example, add the following event procedure to a form:</P>

<pre><code>Private Sub Form_MouseDown(Button As Integer, Shift As Integer, _
        X As Single, Y As Single)
    If Button = acLeftButton Then
        MsgBox "You pressed the left button."
    End If
    If Button = acRightButton Then
        MsgBox "You pressed the right button."
    End If
    If Button = acMiddleButton Then
        MsgBox "You pressed the middle button."
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

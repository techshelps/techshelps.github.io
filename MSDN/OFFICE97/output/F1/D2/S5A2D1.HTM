<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OrdinalPosition Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>OrdinalPosition Property</H1>Applies To</P>
<SPAN CLASS="eln">Field</SPAN> object.</P>
Description</P>
Sets or returns the relative position of a Field object within a Fields collection. For an object not yet appended to the <SPAN CLASS="eln">Fields</SPAN> collection, this property is read/write.</P>
Settings and Return Values</P>
The setting or return value is an <SPAN CLASS="eln">Integer</SPAN> that specifies the numeric order of fields. The&nbsp;default is 0.</P>
Remarks</P>
The availability of the <SPAN CLASS="eln">OrdinalPosition</SPAN> property depends on the object that contains the <SPAN CLASS="eln">Fields</SPAN> collection, as shown in the following table.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="152pt" VALIGN="TOP"><COL WIDTH="207pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">If the Fields collection belongs to a</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Then OrdinalPosition is</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Index </SPAN>object</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">QueryDef </SPAN>object</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Recordset </SPAN>object</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Relation </SPAN>object</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">TableDef </SPAN>object</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read/write</P></TD></TR></TBODY></TABLE>
<BR></P>Generally, the ordinal position of an object that you append to a collection depends on&nbsp;the order in which you append the object. The first appended object is in the first position (0), the second appended object is in the second position (1), and so on. The last appended object is in ordinal position <SPAN CLASS="p">count</SPAN>&nbsp;– 1, where <SPAN CLASS="p">count</SPAN> is the number of objects in the collection as specified by the <SPAN CLASS="eln">Count</SPAN> property setting.</P>
You can use the <SPAN CLASS="eln">OrdinalPosition</SPAN> property to specify an ordinal position for new <SPAN CLASS="eln">Field</SPAN> objects that differs from the order in which you append those objects to a collection. This enables you to specify a field order for your tables, queries, and recordsets when you use them in an application. For example, the order in which fields are returned in a <SPAN CLASS="cte">SELECT *</SPAN> query is determined by the current <SPAN CLASS="eln">OrdinalPosition</SPAN>&nbsp;property values.</P>
You can permanently reset the order in which fields are returned in recordsets by setting the <SPAN CLASS="eln">OrdinalPosition</SPAN> property to any positive integer.</P>
Two or more <SPAN CLASS="eln">Field</SPAN> objects in the same collection can have the same <SPAN CLASS="eln">OrdinalPosition</SPAN> property value, in which case they will be ordered alphabetically. For example, if you have a field named Age set to 4 and you set a second field named Weight to 4, Weight is returned after Age.</P>
You can specify a number that is greater than the number of fields minus 1. The field will be returned in an order relative to the largest number. For example, if you set a field's <SPAN CLASS="eln">OrdinalPosition</SPAN> property to 20 (and there are only 5 fields) and you've set the <SPAN CLASS="eln">OrdinalPosition</SPAN> property for two other fields to 10 and 30, respectively, the field set to 20 is returned between the fields set to 10 and 30.</P>
<SPAN CLASS="nh">Note</SPAN>   Even if the <SPAN CLASS="eln">Fields</SPAN> collection of a TableDef has not been refreshed, the field order in a Recordset opened from the <SPAN CLASS="eln">TableDef</SPAN> will reflect the <SPAN CLASS="eln">OrdinalPosition</SPAN> data of the <SPAN CLASS="eln">TableDef </SPAN>object. A table-type <SPAN CLASS="eln">Recordset </SPAN>will have the same <SPAN CLASS="eln">OrdinalPosition</SPAN> data as the underlying table, but any other type of <SPAN CLASS="eln">Recordset </SPAN>will have new <SPAN CLASS="eln">OrdinalPosition</SPAN> data (starting with 0) that&nbsp;follow the order determined by the <SPAN CLASS="eln">OrdinalPosition</SPAN> data of the <SPAN CLASS="eln">TableDef</SPAN>.</P>
See Also</P>
<SPAN CLASS="eln">Count</SPAN> property, <SPAN CLASS="eln">Refresh</SPAN> method.</P>
Example</P>
This example changes the <SPAN CLASS="eln">OrdinalPosition</SPAN> property values in the Employees <SPAN CLASS="eln">TableDef</SPAN> in order to control the <SPAN CLASS="eln">Field</SPAN> order in a resulting <SPAN CLASS="eln">Recordset</SPAN>. By setting the&nbsp;<SPAN CLASS="eln">OrdinalPosition</SPAN> of all the <SPAN CLASS="eln">Fields</SPAN> to 1, any resulting <SPAN CLASS="eln">Recordset</SPAN> will order the <SPAN CLASS="eln">Fields</SPAN> alphabetically. Note that the <SPAN CLASS="eln">OrdinalPosition</SPAN> values in the <SPAN CLASS="eln">Recordset</SPAN> don't match the values in the <SPAN CLASS="eln">TableDef</SPAN>, but simply reflect the end result of the <SPAN CLASS="eln">TableDef</SPAN> changes.</P>

<pre><code>Sub OrdinalPositionX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim aintPosition() As Integer
    Dim astrFieldName() As String
    Dim intTemp As Integer
    Dim fldTemp As Field
    Dim rstEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set tdfEmployees = dbsNorthwind.TableDefs("Employees")

    With tdfEmployees
        ' Display and store original OrdinalPosition data.
        Debug.Print _
            "Original OrdinalPosition data in TableDef."
        ReDim aintPosition(0 To .Fields.Count - 1) As Integer
        ReDim astrFieldName(0 To .Fields.Count - 1) As String
        For intTemp = 0 To .Fields.Count - 1
            aintPosition(intTemp) = _
                .Fields(intTemp).OrdinalPosition
            astrFieldName(intTemp) = .Fields(intTemp).Name
            Debug.Print , aintPosition(intTemp), _
                astrFieldName(intTemp)
        Next intTemp

        ' Change OrdinalPosition data.
        For Each fldTemp In .Fields
            fldTemp.OrdinalPosition = 1
        Next fldTemp

        ' Open new Recordset object to show how the
        ' OrdinalPosition data has affected the record order.
        Debug.Print _
            "OrdinalPosition data from resulting Recordset."
        Set rstEmployees = dbsNorthwind.OpenRecordset( _
            "SELECT * FROM Employees")
        For Each fldTemp In rstEmployees.Fields
            Debug.Print , fldTemp.OrdinalPosition, fldTemp.Name
        Next fldTemp
        rstEmployees.Close

        ' Restore original OrdinalPosition data because this is
        ' a demonstration.
        For intTemp = 0 To .Fields.Count - 1
            .Fields(astrFieldName(intTemp)).OrdinalPosition = _
                aintPosition(intTemp)
        Next intTemp

    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example changes the setting of the <SPAN CLASS="eln">OrdinalPosition</SPAN> property for the first field in a Products table. If you examine the table in Datasheet view before and after running this example, you'll see that it moves the ProductID field from the first column to the last column.</P>

<pre><code>Sub SetPosition()
    Dim dbs As Database, tdf As TableDef
    Dim fldFirst As Field, fld As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Products table.
    Set tdf = dbs.TableDefs!Products
    ' Return reference to first field in table.
    Set fldFirst = tdf.Fields(0)
    ' Set OrdinalPosition property to last position in collection.
    fldFirst.OrdinalPosition = tdf.Fields.Count
    ' Refresh Fields collection.
    tdf.Fields.Refresh
    ' Enumerate all fields and print ordinal position.
    For Each fld In tdf.Fields
        Debug.Print fld.Name, fld.OrdinalPosition
    Next fld
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

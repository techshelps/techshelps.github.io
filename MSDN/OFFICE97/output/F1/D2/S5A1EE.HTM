<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Run Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Run Method</H2>Applies To</P>
<SPAN CLASS="eln">Application</SPAN> object.</P>
Description</P>
You can use the <SPAN CLASS="eln">Run</SPAN> method to carry out a specified Microsoft Access or user-defined Function or Sub procedure. This method is useful when you are controlling Microsoft Access from another application through <SPAN CLASS="pop">Automation</SPAN>, formerly called OLE Automation. For example, you can use the <SPAN CLASS="eln">Run</SPAN> method from an <SPAN CLASS="pop">ActiveX component</SPAN> to carry out a <SPAN CLASS="eln">Sub</SPAN> procedure that is defined within a Microsoft Access database.</P>
Syntax</P>
<SPAN CLASS="p">application</SPAN><SPAN CLASS="l">.Run </SPAN><SPAN CLASS="p">procedure</SPAN>[<SPAN CLASS="l">, </SPAN><SPAN CLASS="p">arg1</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="p">arg2</SPAN><SPAN CLASS="l">, </SPAN>...<SPAN CLASS="l">, </SPAN><SPAN CLASS="p">arg30</SPAN>]</P>
The <SPAN CLASS="eln">Run</SPAN> method has the following arguments.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="91pt" VALIGN="TOP"><COL WIDTH="268pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">application</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The Application object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">procedure</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the <SPAN CLASS="eln">Function</SPAN> or <SPAN CLASS="eln">Sub</SPAN> procedure to be run. If you are calling a procedure in another database use the project name and the procedure name separated by a dot in the form:</P>
"<SPAN CLASS="p">projectname</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="p">procedurename</SPAN>"</P>
If you execute Visual&nbsp;Basic code containing the <SPAN CLASS="lee">Run</SPAN> method in a <SPAN CLASS="pop">library database</SPAN>, Microsoft Access looks for the procedure first in the library database, then in the current database.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"> <SPAN CLASS="p">arg1</SPAN>, <SPAN CLASS="p">arg2</SPAN>, ...</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. The arguments for the specified <SPAN CLASS="eln">Function</SPAN> or <SPAN CLASS="eln">Sub</SPAN> procedure. You can supply a maximum of thirty arguments.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You can set a reference to the Microsoft Access <SPAN CLASS="pop">type library</SPAN> from any other ActiveX component and use the objects, methods, and properties defined in that library in your code. However, you can't set a reference to an individual Microsoft Access database from any application other than Microsoft Access. The <SPAN CLASS="eln">Run</SPAN> method provides a way to call a procedure you have defined in a Microsoft Access database from another application.</P>
For example, suppose you have defined a procedure named NewForm in a database with its <SPAN CLASS="lee">ProjectName</SPAN> property set to "WizCode." The NewForm procedure takes a string argument. You can call NewForm in the following manner from Visual&nbsp;Basic:</P>

<pre><code>Dim appAccess As New Access.Application
appAccess.OpenCurrentDatabase ("C:\My Documents\WizCode.mdb")
appAccess.Run "WizCode.NewForm", "Some String"</code></pre>
If another procedure with the same name may reside in a different database, qualify the <SPAN CLASS="p">procedure</SPAN> argument, as shown in the preceding example, with the name of the database in which the desired procedure resides.</P>
You can also use the <SPAN CLASS="eln">Run</SPAN> method to call a procedure in a <SPAN CLASS="pop">referenced</SPAN> Microsoft Access database from another database. </P>
Microsoft Access ignores any value returned by a procedure called by the <SPAN CLASS="eln">Run</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">CreateObject</SPAN> function, <SPAN CLASS="eln">GetObject</SPAN> function, <SPAN CLASS="eln">Set</SPAN> statement.</P>
Example</P>
The following example runs a user-defined <SPAN CLASS="eln">Sub</SPAN> procedure in a module in a Microsoft Access database from another application that acts as an Active X component.</P>
To try this example, create a new database called WizCode.mdb and set its <SPAN CLASS="lee">ProjectName</SPAN> property to WizCode. Open a new module in that database and enter the following code. Save the module, and close the database.</P>

<pre><code>Sub Greeting(strName As String)
    MsgBox("Hello, " &amp; strName)
End Sub</code></pre>
Once you have completed this step, run the following code from Microsoft Excel or Microsoft Visual&nbsp;Basic. Make sure that you have added a reference to the Microsoft Access type library by clicking <SPAN CLASS="eln">References</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu and selecting <SPAN CLASS="eln">Microsoft Access 8.0 Object Library</SPAN> in the <SPAN CLASS="eln">References</SPAN> dialog box.</P>

<pre><code>' Include in Declarations section of module.
Dim appAccess As Access.Application

Sub RunAccessSub()
    ' Create instance of Access Application object.
    Set appAccess = _
        CreateObject("Access.Application.8")
    ' Open WizCode database in Microsoft Access window.
    appAccess.OpenCurrentDatabase "C:\My Documents\WizCode.mdb", False
    ' Run Sub procedure.
    appAccess.Run "Greeting", "Joe"
    Set appAccess = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

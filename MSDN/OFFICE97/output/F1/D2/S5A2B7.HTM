<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Index Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Index Object</H1><SPAN CLASS="eln">Description</SPAN></P>
<SPAN CLASS="eln">Index</SPAN> objects specify the order of records accessed from database tables and whether or not duplicate records are accepted, providing efficient access to data. For external databases, <SPAN CLASS="eln">Index</SPAN> objects describe the indexes established for external tables (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Remarks</P>
The <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN> uses indexes when it joins tables and creates Recordset objects. Indexes determine the order in which <SPAN CLASS="jump">table-type </SPAN>Recordset objects return records, but they don't determine the order in which the Microsoft&nbsp;Jet database engine stores records in the base table or the order in which any other type of <SPAN CLASS="eln">Recordset</SPAN> object returns records.</P>
With an <SPAN CLASS="eln">Index</SPAN> object, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Required</SPAN> property to determine whether the Field objects in the index require values that are not Null, and then use the <SPAN CLASS="eln">IgnoreNulls</SPAN> property to determine whether the <SPAN CLASS="eln">Null</SPAN> values have index entries.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Primary</SPAN> and <SPAN CLASS="eln">Unique</SPAN> properties to determine the ordering and uniqueness of the <SPAN CLASS="eln">Index</SPAN> object.
</LI></UL></SPAN>The Microsoft&nbsp;Jet database engine maintains all <SPAN CLASS="pop">base table</SPAN> indexes automatically. It updates indexes whenever you add, change, or delete records from the base table. Once you create the database, use the CompactDatabase method periodically to bring index statistics up-to-date.</P>
When accessing a table-type <SPAN CLASS="eln">Recordset</SPAN> object, you specify the order of records using the object's <SPAN CLASS="eln">Index</SPAN> property. Set this property to the <SPAN CLASS="eln">Name</SPAN> property setting of an existing <SPAN CLASS="eln">Index</SPAN> object in the <SPAN CLASS="eln">Indexes</SPAN> collection. This collection is contained by the TableDef object underlying the <SPAN CLASS="eln">Recordset</SPAN> object that you're populating.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You don't have to create indexes for a table, but for large, unindexed tables, accessing a specific record or processing <SPAN CLASS="pop">joins</SPAN> can take a long time. Conversely, having too many indexes can slow down updates to the database as each of the table indexes is amended.</P>
The Attributes property of each <SPAN CLASS="eln">Field</SPAN> object in the index determines the order of records returned and consequently determines which access techniques to use for that&nbsp;index.</P>
Each <SPAN CLASS="eln">Field</SPAN> object in the <SPAN CLASS="eln">Fields</SPAN> collection of an <SPAN CLASS="eln">Index</SPAN> object is a component of the index. To define a new <SPAN CLASS="eln">Index</SPAN> object, set its properties before you append it to a collection, making the <SPAN CLASS="eln">Index</SPAN> object available for subsequent use.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can modify the <SPAN CLASS="eln">Name</SPAN> property setting of an existing <SPAN CLASS="eln">Index</SPAN> object only if the Updatable property setting of the containing <SPAN CLASS="eln">TableDef</SPAN> object is <SPAN CLASS="eln">True</SPAN>.</P>
When you set a <SPAN CLASS="pop">primary key</SPAN> for a table, the Microsoft&nbsp;Jet database engine automatically defines it as the primary index. A primary index consists of one or more fields that uniquely identify all records in a table in a predefined order. Because the primary index field must be unique, the Microsoft&nbsp;Jet database engine automatically sets the <SPAN CLASS="eln">Unique</SPAN> property of the primary <SPAN CLASS="eln">Index</SPAN> object to <SPAN CLASS="eln">True</SPAN>. If the primary index consists of more than one field, each field can contain duplicate values, but the combination of values from all the indexed fields must be unique. A primary index consists of a key for the table and is always made up of the same fields as the primary key.</P>
<SPAN CLASS="ih">Important</SPAN>&nbsp;&nbsp;&nbsp;Make sure your data complies with the attributes of your new index. If your index requires unique values, make sure that there are no duplicates in existing data records. If duplicates exist, the Microsoft&nbsp;Jet database engine can't create the index; a trappable error results when you attempt to use the <SPAN CLASS="eln">Append</SPAN> method on the new index.</P>
When you create a relationship that enforces <SPAN CLASS="pop">referential integrity</SPAN>, the Microsoft&nbsp;Jet database engine automatically creates an index with the <SPAN CLASS="eln">Foreign</SPAN> property, set as the <SPAN CLASS="pop">foreign key</SPAN> in the referencing table. After you've established a table relationship, the Microsoft&nbsp;Jet database engine prevents additions or changes to the database that violate that relationship. If you set the <SPAN CLASS="eln">Attributes</SPAN> property of the Relation object to allow <SPAN CLASS="pop">cascading updates</SPAN> and <SPAN CLASS="pop">cascading deletes</SPAN>, the Microsoft&nbsp;Jet database engine updates or deletes records in related tables automatically.</P>
To create a new Index object</P>
<SPAN CLASS="list"><OL><LI CLASS="OLI1">Use the <SPAN CLASS="eln">CreateIndex</SPAN> method on a <SPAN CLASS="eln">TableDef</SPAN> object.</LI><LI CLASS="OLI1">Use the <SPAN CLASS="eln">CreateField</SPAN> method on the <SPAN CLASS="eln">Index</SPAN> object to create a <SPAN CLASS="eln">Field</SPAN> object for each field (column) to be included in the <SPAN CLASS="eln">Index</SPAN> object.</LI><LI CLASS="OLI1">Set <SPAN CLASS="eln">Index</SPAN> properties as needed.</LI><LI CLASS="OLI1">Append the <SPAN CLASS="eln">Field</SPAN> object to the <SPAN CLASS="eln">Fields</SPAN> collection.</LI><LI CLASS="OLI1">Append the <SPAN CLASS="eln">Index</SPAN> object to the <SPAN CLASS="eln">Indexes</SPAN> collection.
</LI></OL></SPAN><SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;The <SPAN CLASS="eln">Clustered</SPAN> property is ignored for databases that use the Microsoft&nbsp;Jet database engine, which doesn't support clustered indexes.</P>
Properties</P>
<SPAN CLASS="eln">Clustered</SPAN> property, <SPAN CLASS="eln">DistinctCount</SPAN> property, <SPAN CLASS="eln">Foreign</SPAN> property, <SPAN CLASS="eln">IgnoreNulls</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Primary</SPAN> property, <SPAN CLASS="eln">Required</SPAN> property, <SPAN CLASS="eln">Unique</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">CreateField</SPAN> method, <SPAN CLASS="eln">CreateProperty</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">Attributes</SPAN> property, <SPAN CLASS="eln">CreateIndex</SPAN> method, <SPAN CLASS="eln">Index</SPAN> property, <SPAN CLASS="eln">OrdinalPosition</SPAN> property.</P>
Example</P>
This example creates a new <SPAN CLASS="eln">Index</SPAN> object, appends it to the <SPAN CLASS="eln">Indexes</SPAN> collection of the Employees <SPAN CLASS="eln">TableDef</SPAN>, and then enumerates the <SPAN CLASS="eln">Indexes</SPAN> collection of the <SPAN CLASS="eln">TableDef</SPAN>. Finally, it enumerates a <SPAN CLASS="eln">Recordset</SPAN>, first using the primary <SPAN CLASS="eln">Index</SPAN>, and then using the new <SPAN CLASS="eln">Index</SPAN>. The IndexOutput procedure is required for this procedure to run.</P>

<pre><code>Sub IndexObjectX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim idxNew As Index
    Dim idxLoop As Index
    Dim rstEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set tdfEmployees = dbsNorthwind!Employees

    With tdfEmployees
        ' Create new index, create and append Field
        ' objects to its Fields collection.
        Set idxNew = .CreateIndex("NewIndex")

        With idxNew
            .Fields.Append .CreateField("Country")
            .Fields.Append .CreateField("LastName")
            .Fields.Append .CreateField("FirstName")
        End With

        ' Add new Index object to the Indexes collection
        ' of the Employees table collection.
        .Indexes.Append idxNew
        .Indexes.Refresh

        Debug.Print .Indexes.Count &amp; " Indexes in " &amp; _
            .Name &amp; " TableDef"

        ' Enumerate Indexes collection of Employees
        ' table.
        For Each idxLoop In .Indexes
            Debug.Print "    " &amp; idxLoop.Name
        Next idxLoop

        Set rstEmployees = _
            dbsNorthwind.OpenRecordset("Employees")

        ' Print report using old and new indexes.
        IndexOutput rstEmployees, "PrimaryKey"
        IndexOutput rstEmployees, idxNew.Name
        rstEmployees.Close

        ' Delete new Index because this is a
        ' demonstration.
        .Indexes.Delete idxNew.Name
    End With

    dbsNorthwind.Close

End Sub

Sub IndexOutput(rstTemp As Recordset, _
    strIndex As String)
    ' Report function for FieldX.

    With rstTemp
        ' Set the index.
        .Index = strIndex
        .MoveFirst
        Debug.Print "Recordset = " &amp; .Name &amp; _
            ", Index = " &amp; .Index
        Debug.Print "    EmployeeID - Country - Name"

        ' Enumerate the recordset using the specified
        ' index.
        Do While Not .EOF
            Debug.Print "    " &amp; !EmployeeID &amp; " - " &amp; _
                !Country &amp; " - " &amp; !LastName &amp; ", " &amp; !FirstName
            .MoveNext
        Loop

    End With

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new index on an Employees table:</P>

<pre><code>Sub NewIndex()
    Dim dbs As Database, tdf As TableDef, idx As Index
    Dim fld1 As Field, fld2 As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Employees table.
    Set tdf = dbs.TableDefs!Employees
    Set idx = tdf.CreateIndex("EmployeeNameIndex")
    Set fld1 = idx.CreateField("LastName")
    Set fld2 = idx.CreateField("FirstName")
    idx.Fields.Append fld1
    idx.Fields.Append fld2
    idx.Required = True
    tdf.Indexes.Append idx
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

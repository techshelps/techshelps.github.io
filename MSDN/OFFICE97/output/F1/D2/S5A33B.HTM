<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TRANSFORM Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>TRANSFORM Statement </H1>Description</P>
Creates a <SPAN CLASS="pop">crosstab query</SPAN>.</P>
Syntax</P>
TRANSFORM <SPAN CLASS="p">aggfunction</SPAN><BR><SPAN CLASS="p">selectstatement</SPAN><BR>PIVOT <SPAN CLASS="p">pivotfield</SPAN> [IN (<SPAN CLASS="p">value1</SPAN>[, <SPAN CLASS="p">value2</SPAN>[, ...]])]</P>
The TRANSFORM statement has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="274pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">aggfunction</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="jump">SQL aggregate function</SPAN> that operates on the selected data.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">selectstatement</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="jump">SELECT</SPAN> statement.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">pivotfield</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The field or <SPAN CLASS="pop">expression</SPAN> you want to use to create column headings in the query's result set.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">value1</SPAN>, <SPAN CLASS="p">value2</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Fixed values used to create column headings.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
When you summarize data using a crosstab query, you select values from specified fields or expressions as column headings so you can view data in a more compact format than with a <SPAN CLASS="pop">select query</SPAN>.</P>
TRANSFORM is optional but when included is the first statement in an <SPAN CLASS="pop">SQL string</SPAN>. It precedes a SELECT statement that specifies the fields used as row headings and a <SPAN CLASS="jump">GROUP BY</SPAN> clause that specifies row grouping. Optionally, you can include other clauses, such as <SPAN CLASS="jump">WHERE</SPAN>, that specify additional selection or sorting criteria. You can also use <SPAN CLASS="pop">subqueries</SPAN> as&nbsp;predicates — specifically, those in the WHERE clause — in a crosstab query.</P>
The values returned in <SPAN CLASS="p">pivotfield</SPAN> are used as column headings in the query's result set. For example, pivoting the sales figures on the month of the sale in a crosstab query would create 12&nbsp;columns. You can restrict <SPAN CLASS="p">pivotfield</SPAN> to create headings from fixed values (<SPAN CLASS="p">value1</SPAN>, <SPAN CLASS="p">value2</SPAN>) listed in the optional IN clause. You can also include fixed values for which no data exists to create additional columns.</P>
See Also</P>
FROM clause, GROUP BY clause, INNER JOIN operation, ORDER BY clause, SELECT statement, SQL subqueries, WHERE clause.</P>
Example</P>
This example uses the SQL TRANSFORM clause to create a <SPAN CLASS="pop">crosstab query</SPAN> showing the number of orders taken by each employee for each calendar quarter of 1994. The SQLTRANSFORMOutput function is required for this procedure to run.</P>

<pre><code>Sub TransformX1()

    Dim dbs As Database
    Dim strSQL As String
    Dim qdfTRANSFORM As QueryDef

    strSQL = "PARAMETERS prmYear SHORT; TRANSFORM " _
        &amp; "Count(OrderID) " _
        &amp; "SELECT FirstName &amp; "" "" &amp; LastName AS " _
        &amp; "FullName FROM Employees INNER JOIN Orders " _
        &amp; "ON Employees.EmployeeID = " _
        &amp; "Orders.EmployeeID WHERE DatePart " _
        &amp; "(""yyyy"", OrderDate) = [prmYear] "

    strSQL = strSQL &amp; "GROUP BY FirstName &amp; " _
        &amp; """ "" &amp; LastName " _
        &amp; "ORDER BY FirstName &amp; "" "" &amp; LastName " _
        &amp; "PIVOT DatePart(""q"", OrderDate)"

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    Set qdfTRANSFORM = dbs.CreateQueryDef _
        ("", strSQL)

    SQLTRANSFORMOutput qdfTRANSFORM, 1994

    dbs.Close

End Sub</code></pre>
This example uses the SQL TRANSFORM clause to create a slightly more complex crosstab query showing the total dollar amount of orders taken by each employee for each calendar quarter of 1994. The SQLTRANSFORMOutput function is required for this procedure to run.</P>

<pre><code>Sub TransformX2()

    Dim dbs As Database
    Dim strSQL As String
    Dim qdfTRANSFORM As QueryDef

    strSQL = "PARAMETERS prmYear SHORT; TRANSFORM " _
        &amp; "Sum(Subtotal) SELECT FirstName &amp; "" """ _
        &amp; "&amp; LastName AS FullName " _
        &amp; "FROM Employees INNER JOIN " _
        &amp; "(Orders INNER JOIN [Order Subtotals] " _
        &amp; "ON Orders.OrderID = " _
        &amp; "[Order Subtotals].OrderID) " _
        &amp; "ON Employees.EmployeeID = " _
        &amp; "Orders.EmployeeID WHERE DatePart" _
        &amp; "(""yyyy"", OrderDate) = [prmYear] "

    strSQL = strSQL &amp; "GROUP BY FirstName &amp; "" """ _
        &amp; "&amp; LastName " _
        &amp; "ORDER BY FirstName &amp; "" "" &amp; LastName " _
        &amp; "PIVOT DatePart(""q"",OrderDate)"        
        
    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    Set qdfTRANSFORM = dbs.CreateQueryDef _
        ("", strSQL)

    SQLTRANSFORMOutput qdfTRANSFORM, 1994

    dbs.Close

End Sub

Function SQLTRANSFORMOutput(qdfTemp As QueryDef, _
    intYear As Integer)

    Dim rstTRANSFORM As Recordset
    Dim fldLoop As Field
    Dim booFirst As Boolean

    qdfTemp.PARAMETERS!prmYear = intYear
    Set rstTRANSFORM = qdfTemp.OpenRecordset()

    Debug.Print qdfTemp.SQL
    Debug.Print
    Debug.Print , , "Quarter"

    With rstTRANSFORM
        booFirst = True
        For Each fldLoop In .Fields
            If booFirst = True Then
                Debug.Print fldLoop.Name
                Debug.Print , ;
                booFirst = False
            Else
                Debug.Print , fldLoop.Name;
            End If
        Next fldLoop
        Debug.Print
        
        Do While Not .EOF
            booFirst = True
            For Each fldLoop In .Fields
                If booFirst = True Then
                    Debug.Print fldLoop
                    Debug.Print , ;
                    booFirst = False
                Else
                    Debug.Print , fldLoop;
                End If
            Next fldLoop
            Debug.Print
            .MoveNext
        Loop
    End With
    
End Function</code></pre>
Example (Microsoft Access)</P>
To try the following examples in Microsoft Access, first create a new query in the Northwind sample database. Close the <SPAN CLASS="eln">Show Table</SPAN> dialog box without specifying a table or query. Switch to SQL view, paste an individual example into the SQL window, and run the query.</P>
The following example creates a crosstab query that shows product sales by month for a user-specified year. The months are returned from left to right (pivoted) as columns, and the product names are returned from top to bottom as rows.</P>

<pre><code>PARAMETERS [Sales for which year?] LONG;
TRANSFORM Sum([Order Details].Quantity * ([Order Details].UnitPrice -
([Order Details].Discount / 100) * [Order Details].UnitPrice)) AS Sales
SELECT ProductName FROM Orders
INNER JOIN (Products INNER JOIN [Order Details]
ON Products.ProductID = [Order Details].ProductID)
ON Orders.OrderID = [Order Details].OrderID
WHERE DatePart("yyyy", OrderDate) = [Sales for which year?]
GROUP BY ProductName
ORDER BY ProductName
PIVOT DatePart("m", OrderDate);</code></pre>
The next example creates a crosstab query that returns product sales by quarter for each supplier for a user-specified year. The quarters are returned from left to right (pivoted) as columns, and the supplier names are returned from top to bottom as rows.</P>

<pre><code>PARAMETERS [Sales for which year?] LONG;
TRANSFORM Sum([Order Details].Quantity * ([Order Details].UnitPrice -
([Order Details].Discount / 100) * [Order Details].UnitPrice)) AS Sales
SELECT CompanyName FROM Orders
INNER JOIN ((Suppliers INNER JOIN Products
ON Suppliers.SupplierID = Products.SupplierID)
INNER JOIN [Order Details]
ON Products.ProductID = [Order Details].ProductID)
ON Orders.OrderID = [Order Details].OrderID
WHERE DatePart("yyyy", OrderDate) = [Sales for which year?]
GROUP BY CompanyName
ORDER BY CompanyName
PIVOT "Qtr " &amp; DatePart("q", OrderDate)
In ('Qtr 1', 'Qtr 2', 'Qtr 3', 'Qtr 4');</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

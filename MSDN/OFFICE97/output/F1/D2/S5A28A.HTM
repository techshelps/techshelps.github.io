<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateUser Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateUser Method</H2>Applies To</P>
<SPAN CLASS="eln">Group</SPAN> object, <SPAN CLASS="eln">Workspace</SPAN> object.</P>
Description</P>
Creates a new User object (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Syntax</P>
<SPAN CLASS="eln">Set</SPAN> <SPAN CLASS="p">user</SPAN><SPAN CLASS="l"> = </SPAN><SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.CreateUser(</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">pid</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">password</SPAN><SPAN CLASS="eln">)</SPAN></P>
The <SPAN CLASS="eln">CreateUser</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="296pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">user</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents the <SPAN CLASS="eln">User</SPAN> object you want to create.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An object variable that represents the Group or Workspace object for which you want to create the new <SPAN CLASS="eln">User</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A Variant (String subtype) that uniquely names the new <SPAN CLASS="eln">User</SPAN> object. See the Name property for details on valid <SPAN CLASS="eln">User</SPAN> names.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">pid</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> (<SPAN CLASS="eln">String</SPAN> subtype) containing the <SPAN CLASS="pop">PID</SPAN> of a <SPAN CLASS="pop">user account</SPAN>. The identifier must contain from 4 to 20 alphanumeric characters. See the PID property for more information on valid personal identifiers.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">password</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> (<SPAN CLASS="eln">String</SPAN> subtype) containing the password for the new <SPAN CLASS="eln">User</SPAN> object. The password can be up to 14 characters long and can include any characters except the <SPAN CLASS="pop">ASCII</SPAN> character 0 (null). See the Password property for more information on valid passwords.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
If you omit one or more of the optional parts when you use the <SPAN CLASS="eln">CreateUser </SPAN>method, you can use an appropriate assignment statement to set or reset the corresponding property before you append the new object to a collection. After you append the object, you can alter some but not all of its property settings. See the <SPAN CLASS="eln">PID</SPAN>, <SPAN CLASS="eln">Name</SPAN>, and <SPAN CLASS="eln">Password</SPAN> property topics for more details.</P>
If <SPAN CLASS="p">name</SPAN> refers to an object that is already a member of the collection, a run-time error occurs when you use the Append method.</P>
To remove a <SPAN CLASS="eln">User</SPAN> object from the Users collection, use the Delete method on the collection.</P>
See Also</P>
<SPAN CLASS="eln">Append</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Password</SPAN> property, <SPAN CLASS="eln">PID</SPAN> property, <SPAN CLASS="eln">User</SPAN> object.</P>
Specifics (Microsoft&nbsp;Access)</P>
Once you have created a new <SPAN CLASS="eln">User</SPAN> object and appended it to the <SPAN CLASS="eln">Users</SPAN> collection of a <SPAN CLASS="eln">Workspace</SPAN> or <SPAN CLASS="eln">Group</SPAN> object, you can verify that the new user exists by examining the <B>Name</B> list box on the <B>Users</B> tab of the <B>User And Group Accounts</B> dialog box. This dialog box is available by pointing to <B>Security</B> on the <B>Tools</B> menu and clicking <B>User And Group Accounts</B>.</P>
Example</P>
This example uses the <SPAN CLASS="eln">CreateUser</SPAN> method and <SPAN CLASS="eln">Password</SPAN> and <SPAN CLASS="eln">PID</SPAN> properties to create a new <SPAN CLASS="eln">User</SPAN> object; it then makes the new <SPAN CLASS="eln">User</SPAN> object a member of different <SPAN CLASS="eln">Group</SPAN> objects and lists its properties and groups.</P>

<pre><code>Sub CreateUserX()

    Dim wrkDefault As Workspace
    Dim usrNew As User
    Dim grpNew As Group
    Dim usrTemp As User
    Dim prpLoop As Property
    Dim grpLoop As Group

    Set wrkDefault = DBEngine.Workspaces(0)

    With wrkDefault

        ' Create and append new User.
        Set usrNew = .CreateUser("NewUser")
        usrNew.PID = "AAA123456789"
        usrNew.Password = "NewPassword"
        .Users.Append usrNew

        ' Create and append new Group.
        Set grpNew = .CreateGroup("NewGroup", "AAA123456789")
        .Groups.Append grpNew

        ' Make the user "NewUser" a member of the
        ' group "NewGroup" by creating and adding the
        ' appropriate User object to the group's Users
        ' collection.
        Set usrTemp = _
            .Groups("NewGroup").CreateUser("NewUser")
        .Groups("NewGroup").Users.Append usrTemp

        Debug.Print "Properties of " &amp; usrNew.Name

        ' Enumerate the Properties collection of NewUser. The
        ' PID property is not readable.
        For Each prpLoop In usrNew.Properties
            On Error Resume Next
            If prpLoop &lt;&gt; "" Then Debug.Print "    " &amp; _
                prpLoop.Name &amp; " = " &amp; prpLoop
            On Error GoTo 0
        Next prpLoop

        Debug.Print "Groups collection of " &amp; usrNew.Name

        ' Enumerate the Groups collection of NewUser.
        For Each grpLoop In usrNew.Groups
            Debug.Print "    " &amp; grpLoop.Name
        Next grpLoop

        ' Delete the new User and Group objects because this
        ' is a demonstration.
        .Users.Delete "NewUser"
        .Groups.Delete "NewGroup"

    End With

End Sub</code></pre>
</P></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Eval Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Eval Function</H2>Description</P>
You can use the <SPAN CLASS="eln">Eval</SPAN> function to evaluate an <SPAN CLASS="pop">expression</SPAN> that results in a text string or a numeric value.</P>
You can construct a string and then pass it to the <SPAN CLASS="eln">Eval</SPAN> function as if the string were an actual expression. The <SPAN CLASS="eln">Eval</SPAN> function evaluates the <SPAN CLASS="pop">string expression</SPAN> and returns its value. For example, <SPAN CLASS="cte">Eval("1 + 1")</SPAN> returns 2.</P>
If you pass to the <SPAN CLASS="eln">Eval</SPAN> function a string that contains the name of a function, the <SPAN CLASS="eln">Eval</SPAN> function returns the return value of the function. For example, <SPAN CLASS="cte">Eval("Chr$(65)")</SPAN> returns "A".</P>
Syntax</P>
<SPAN CLASS="l">Eval(</SPAN><SPAN CLASS="p">stringexpr</SPAN><SPAN CLASS="l">)</SPAN></P>
The <SPAN CLASS="p">stringexpr</SPAN> argument is an expression that evaluates to an alphanumeric text string. For example, <SPAN CLASS="p">stringexpr</SPAN> can be a function that returns a string or a numeric value. Or it can be a reference to a <SPAN CLASS="pop">control</SPAN> on a form. The <SPAN CLASS="p">stringexpr</SPAN> argument must evaluate to a string or numeric value; it can't evaluate to a <SPAN CLASS="pop">Microsoft Access object</SPAN>.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;If you are passing the name of a function to the <SPAN CLASS="eln">Eval</SPAN> function, you must include parentheses after the name of the function in the <SPAN CLASS="p">stringexpr</SPAN> argument. For example:</P>
Debug.Print Eval("ShowNames()")    ' ShowNames is user-defined</P>
                                            ' function.</P>
Debug.Print Eval("StrComp(""Joe"",""joe"", 1)")</P>
Debug.Print Eval("Date()")</P>
Remarks</P>
You can use the <SPAN CLASS="eln">Eval</SPAN> function in a <SPAN CLASS="pop">calculated control</SPAN> on a form or report, or in a macro or module. The <SPAN CLASS="eln">Eval</SPAN> function returns a Variant that is either a string or a numeric type.</P>
The argument <SPAN CLASS="p">stringexpr</SPAN> must be an expression that is stored in a string. If you pass to the <SPAN CLASS="eln">Eval</SPAN> function a string that doesn't contain a numeric expression or a function name but only a simple text string, a <SPAN CLASS="pop">run-time error</SPAN> occurs. For example, <SPAN CLASS="cte">Eval("Smith")</SPAN> results in an error.</P>
You can use the <SPAN CLASS="eln">Eval</SPAN> function to determine the value stored in the Value property of a control. The following example passes a string containing a full reference to a control to the <SPAN CLASS="eln">Eval</SPAN> function. It then displays the current value of the control in a dialog box.</P>

<pre><code>Dim ctl As Control, strCtl As String
Set ctl = Forms!Employees!LastName
strCtl = "Forms!Employees!LastName"
MsgBox ("The current value of " &amp; ctl.Name &amp; " is " &amp; Eval(strCtl))</code></pre>
You can use the <SPAN CLASS="eln">Eval</SPAN> function to access expression operators that aren't ordinarily available in Visual Basic. For example, you can't use the SQL operators Between...And or In directly in your code, but you can use them in an expression passed to the <SPAN CLASS="eln">Eval</SPAN> function.</P>
The next example determines whether the value of a ShipRegion control on an Orders form is one of several specified state abbreviations. If the field contains one of the abbreviations, <SPAN CLASS="cte">intState</SPAN> will be <SPAN CLASS="eln">True</SPAN> (–1). Note that you use single quotation marks (<SPAN CLASS="cte">'</SPAN>) to include a string within another string.</P>

<pre><code>Dim intState As Integer
intState = Eval("Forms!Orders!ShipRegion In " _
    &amp; "('AK', 'CA', 'ID', 'WA', 'MT', 'NM', 'OR')")</code></pre>
See Also</P>
<SPAN CLASS="eln">Choose</SPAN> function, <SPAN CLASS="eln">IIf</SPAN> function, <SPAN CLASS="eln">Switch</SPAN> function.</P>
Example</P>
The following example assumes that you have a series of 50 functions defined as A1, A2, and so on. This example uses the <SPAN CLASS="eln">Eval</SPAN> function to call each function in the series.</P>

<pre><code>Sub CallSeries()
    Dim intI As Integer

    For intI = 1 To 50
        Eval("A" &amp; intI &amp; "()")
    Next intI
End Sub</code></pre>
The next example triggers a Click event as if the user had clicked a button on a form. If the value of the button's <SPAN CLASS="eln">OnClick</SPAN> property begins with an equal sign (=), signifying that it is the name of a function, the <SPAN CLASS="eln">Eval</SPAN> function calls the function, which is equivalent to triggering the <SPAN CLASS="eln">Click</SPAN> event. If the value doesn't begin with an equal sign, then the value must name a macro. The <SPAN CLASS="eln">RunMacro</SPAN> method of the <SPAN CLASS="eln">DoCmd</SPAN> object runs the named macro.</P>

<pre><code>Dim ctl As Control, varTemp As Variant

Set ctl = Forms!Contacts!HelpButton
If (Left(ctl.OnClick, 1) = "=") Then
    varTemp = Eval(Mid(ctl.OnClick,2))
Else
    DoCmd.RunMacro ctl.OnClick
End If</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

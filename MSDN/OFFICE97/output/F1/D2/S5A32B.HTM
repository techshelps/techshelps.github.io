<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSERT INTO Statement</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>INSERT INTO Statement </H1>Description</P>
Adds a record or multiple records to a table. This is referred to as an <SPAN CLASS="pop">append query</SPAN>.</P>
Syntax</P>
Multiple-record append query:</P>
INSERT INTO <SPAN CLASS="p">target</SPAN> [IN <SPAN CLASS="p">externaldatabase</SPAN>] [(<SPAN CLASS="p">field1</SPAN>[, <SPAN CLASS="p">field2</SPAN>[, ...]])]<BR>SELECT [<SPAN CLASS="p">source</SPAN>.]<SPAN CLASS="p">field1</SPAN>[, <SPAN CLASS="p">field2</SPAN>[, ...]<BR>FROM <SPAN CLASS="p">tableexpression</SPAN></P>
Single-record append query:</P>
INSERT INTO <SPAN CLASS="p">target</SPAN> [(<SPAN CLASS="p">field1</SPAN>[, <SPAN CLASS="p">field2</SPAN>[, ...]])]<BR>VALUES (<SPAN CLASS="p">value1</SPAN>[, <SPAN CLASS="p">value2</SPAN>[, ...])</P>
The INSERT INTO statement has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="274pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">target</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the table or query to append records to.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">externaldatabase</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The path to an <SPAN CLASS="pop">external database</SPAN>. For a description of the path, see the <SPAN CLASS="jump">IN</SPAN> clause.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">source</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the table or query to copy records from.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">field1</SPAN>, <SPAN CLASS="p">field2</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Names of the fields to append data to, if following a <SPAN CLASS="p">target</SPAN> argument, or the names of fields to obtain data from, if following a <SPAN CLASS="p">source</SPAN> argument.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">tableexpression</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the table or tables from which records are inserted. This argument can be a single table name or a compound resulting from an <SPAN CLASS="jump">INNER JOIN</SPAN>, <SPAN CLASS="jump">LEFT JOIN</SPAN>, or <SPAN CLASS="jump">RIGHT JOIN</SPAN> operation or a saved query.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">value1</SPAN>, <SPAN CLASS="p">value2</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The values to insert into the specific fields of the new record. Each value is inserted into the field that corresponds to the value's position in the list: <SPAN CLASS="p">value1</SPAN> is inserted into <SPAN CLASS="p">field1</SPAN> of the new record, <SPAN CLASS="p">value2</SPAN> into <SPAN CLASS="p">field2</SPAN>, and so on. You must separate values with a comma, and enclose text fields in quotation marks ('&nbsp;').</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You can use the INSERT INTO statement to add a single record to a table using the single-record append query syntax as shown above. In this case, your code specifies the name and value for each field of the record. You must specify each of the fields of the record that a value is to be assigned to and a value for that field. When you don't specify each field, the default value or Null is inserted for missing columns. Records are added to the end of the table.</P>
You can also use INSERT INTO to append a set of records from another table or query by using the SELECT...FROM clause as shown above in the multiple-record append query syntax. In this case, the SELECT clause specifies the fields to append to the specified<SPAN CLASS="p"> target</SPAN> table.</P>
The <SPAN CLASS="p">source</SPAN> or <SPAN CLASS="p">target</SPAN> table may specify a table or a query. If a query is specified, the <SPAN CLASS="pop">Microsoft Jet database engine</SPAN> appends records to any and all tables specified by the query.</P>
INSERT INTO is optional but when included, precedes the <SPAN CLASS="jump">SELECT</SPAN> statement.</P>
If your destination table contains a <SPAN CLASS="pop">primary key</SPAN>, make sure you append unique, non-<SPAN CLASS="eln">Null</SPAN> values to the primary key field or fields; if you don't, the <SPAN CLASS="pop">Microsoft Jet database engine</SPAN> won't append the records.</P>
If you append records to a table with an AutoNumber field and you want to renumber the appended records, don't include the AutoNumber field in your query. Do include the AutoNumber field in the query if you want to retain the original values from the field.</P>
Use the IN clause to append records to a table in another database.</P>
To create a new table, use the <SPAN CLASS="jump">SELECT...INTO</SPAN> statement instead to create a <SPAN CLASS="pop">make-table query</SPAN>.</P>
To find out which records will be appended before you run the append query, first execute and view the results of a <SPAN CLASS="pop">select query</SPAN> that uses the same selection criteria.</P>
An append query copies records from one or more tables to another. The tables that contain the records you append aren't affected by the append query.</P>
Instead of appending existing records from another table, you can specify the value for each field in a single new record using the VALUES clause. If you omit the field list, the VALUES clause must include a value for every field in the table; otherwise, the INSERT operation will fail. Use an additional INSERT INTO statement with a VALUES clause for each additional record you want to create.</P>
See Also</P>
<SPAN CLASS="eln">AddNew</SPAN> method ("DAO Language Reference"), FROM clause, IN clause, INNER JOIN operation, LEFT JOIN, RIGHT JOIN operations, SELECT statement, SELECT...INTO statement, WHERE clause.</P>
Specifics (Microsoft Access)</P>
If you create an INSERT INTO...VALUES query in <SPAN CLASS="pop">SQL view</SPAN>, save and close the query, and then reopen it, you'll see that Microsoft Access has converted the VALUES clause to a SELECT clause. This doesn't alter the results of the query.</P>
The use of the INSERT INTO statement is equivalent to setting the <SPAN CLASS="eln">DestinationTable</SPAN> property in the query's property sheet of an append query in <SPAN CLASS="pop">query Design view</SPAN>.</P>
Example</P>
This example selects all records in a hypothetical New Customers table and adds them to the Customers table. When individual columns are not designated, the SELECT table column names must match exactly those in the INSERT INTO table.</P>

<pre><code>Sub InsertIntoX1()

    Dim dbs As Database

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    ' Select all records in the New Customers table 
    ' and add them to the Customers table.
    dbs.Execute " INSERT INTO Customers " _
        &amp; "SELECT * " _
        &amp; "FROM [New Customers];"
        
    dbs.Close

End Sub</code></pre>
This example creates a new record in the Employees table.</P>

<pre><code>Sub InsertIntoX2()

    Dim dbs As Database

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    ' Create a new record in the Employees table. The 
    ' first name is Harry, the last name is Washington, 
    ' and the job title is Trainee.
    dbs.Execute " INSERT INTO Employees " _
        &amp; "(FirstName,LastName, Title) VALUES " _
        &amp; "('Harry', 'Washington', 'Trainee');"
        
    dbs.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
<HR CLASS="ws">
<SPAN CLASS="wh">Warning</SPAN>   These examples make changes to the Northwind sample database. Before beginning, you may wish to make a backup copy of the sample database.</P>
<HR CLASS="we">
To try the following example, create a copy of the Customers table and name it NewCustomers. This example selects all records in the New Customers table and adds them to the Customers table. When individual columns aren't designated, the SELECT table column names must match exactly those in the INSERT INTO table.</P>

<pre><code>INSERT INTO Customers SELECT * FROM NewCustomers;</code></pre>
The next example creates a new record in the Employees table:</P>

<pre><code>INSERT INTO Employees (FirstName,LastName, Title)
VALUES ('Harry', 'Washington', 'Trainee');</code></pre>
The following example selects all trainees from an assumed Trainees table who were hired more than 30 days ago and adds their records to the Employees table.</P>

<pre><code>INSERT INTO Employees SELECT Trainees.* FROM Trainees
WHERE HireDate &lt; Now() - 30;</code></pre>
You can use the INSERT INTO clause to back up information in your database before it is changed. For example, you can back up information in an Employees table immediately before a user makes any changes to the data in that table.</P>
To try the following example, in the Database window copy the Employees table to a new table called EmployeeHistory by clicking the table, clicking the <SPAN CLASS="eln">Copy</SPAN> button on the toolbar, then clicking the <SPAN CLASS="eln">Paste</SPAN> button. Under <SPAN CLASS="eln">Paste Options</SPAN> in the <SPAN CLASS="eln">Paste Table As</SPAN> dialog box, click <SPAN CLASS="eln">Structure Only</SPAN>. This will copy the structure of the table only, without any data. Next paste the following SQL statement into a new query and save the query as BackUpQuery:</P>

<pre><code>INSERT INTO EmployeesHistory (FirstName, LastName, Title)
VALUES (Forms!Employees!FirstName, Forms!Employees!Lastname,
Forms!Employees!Title);</code></pre>
Open the Employees form in form Design view and set the form's <SPAN CLASS="eln">BeforeUpdate</SPAN> property to [Event Procedure]. In the BeforeUpdate event procedure, enter the following code:</P>

<pre><code>DoCmd.OpenQuery "BackUpQuery"
</code></pre>
Now the existing data in the Employees table will be copied to the backup table each time a user changes it.</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

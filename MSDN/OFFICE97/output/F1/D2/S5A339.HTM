<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sum Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Sum Function </H1>Description</P>
Returns the sum of a set of values contained in a specified field on a query.</P>
Syntax</P>
<SPAN CLASS="eln">Sum(</SPAN><SPAN CLASS="p">expr</SPAN><SPAN CLASS="eln">)</SPAN></P>
The <SPAN CLASS="p">expr</SPAN> placeholder represents a <SPAN CLASS="pop">string expression</SPAN> identifying the field that contains the numeric data you want to add or an expression that performs a calculation using the data in that field. Operands in <SPAN CLASS="p">expr</SPAN> can include the name of a table field, a constant, or a function (which can be either intrinsic or user-defined but not one of the other <SPAN CLASS="pop">SQL</SPAN> aggregate functions).</P>
Remarks</P>
The <SPAN CLASS="eln">Sum</SPAN> function totals the values in a field. For example, you could use the <SPAN CLASS="eln">Sum</SPAN> function to determine the total cost of freight charges.</P>
The <SPAN CLASS="eln">Sum</SPAN> function ignores records that contain Null fields. The following example shows how you can calculate the sum of the products of UnitPrice and Quantity fields:</P>

<pre><code>SELECT
Sum(UnitPrice * Quantity)
AS [Total Revenue] FROM [Order Details];</code></pre>
You can use the <SPAN CLASS="eln">Sum</SPAN> function in a query expression. You can also use this expression in the SQL property of a QueryDef object or when creating a Recordset based on an SQL query.</P>
See Also</P>
<SPAN CLASS="eln">Count</SPAN> function, <SPAN CLASS="eln">QueryDef</SPAN> object ("DAO Language Reference"), SELECT statement, <SPAN CLASS="eln">SQL</SPAN> property ("DAO Language Reference").</P>
Specifics (Microsoft Access)</P>
In Microsoft Access, you can use the <SPAN CLASS="eln">Sum</SPAN> function in the <SPAN CLASS="pop">query design grid</SPAN>, in an <SPAN CLASS="pop">SQL</SPAN> statement in <SPAN CLASS="pop">SQL view</SPAN> of the <SPAN CLASS="pop">Query window</SPAN>, or in an SQL statement within Visual Basic code. You can also use the <SPAN CLASS="eln">Sum</SPAN> function in a <SPAN CLASS="pop">calculated control</SPAN> on a form or report.</P>
The <SPAN CLASS="eln">Sum</SPAN> function is most useful in <SPAN CLASS="pop">totals queries</SPAN> and <SPAN CLASS="pop">crosstab queries</SPAN>. It functions the same way whether you create the query in the query design grid or as an SQL statement in SQL view.</P>
In the query design grid, you can create a new totals query by clicking the <SPAN CLASS="eln">Totals</SPAN> button on the <SPAN CLASS="eln">Query Design</SPAN> <SPAN CLASS="pop">toolbar</SPAN>. The <SPAN CLASS="eln">Total</SPAN> row is then inserted in the grid. You can set the <SPAN CLASS="eln">Total</SPAN> cell beneath a field to the aggregate function to perform on the data in that field.</P>
For example, suppose you have an Orders table that has both a Freight field and a ShipCity field. You can create a query that displays the sum of freight costs for orders sent to each city. Create a new totals query, and drag the ShipCity field to the query design grid. The <SPAN CLASS="eln">Total</SPAN> cell beneath the ShipCity field should be set to Group By. Drag the Freight field to the query design grid, and set the <SPAN CLASS="eln">Total</SPAN> cell beneath it to Sum. When you run the query, it will display the sum of freight costs by city.</P>
You can view the SQL statement for this query by switching to SQL view. In this example, Microsoft Access creates the following SQL statement:</P>

<pre><code>SELECT ShipCity, Sum(Freight) AS SumOfFreight
FROM Orders GROUP BY ShipCity;</code></pre>
You can also use an SQL statement within Visual Basic code. For example, the following code creates a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object from the preceding SQL statement:</P>

<pre><code>Sub SumFreight()
    Dim dbs As Database, rst As Recordset, strSQL As String

    Set dbs = CurrentDb
    strSQL = "SELECT ShipCity, Sum(Freight) AS SumOfFreight " _
    &amp; "FROM Orders GROUP BY ShipCity;"
    Set rst = dbs.OpenRecordset(strSQL)
    rst.MoveLast
    Debug.Print rst.RecordCount
    Set dbs = Nothing
End Sub</code></pre>
To use the <SPAN CLASS="eln">Sum</SPAN> function in a calculated control, set the control's <SPAN CLASS="eln">ControlSource</SPAN> property to an expression containing the <SPAN CLASS="eln">Sum</SPAN> function. For example, to display the sum of freight costs for a set of orders in a text box, enter the following expression in the <SPAN CLASS="eln">ControlSource</SPAN> property of the text box:</P>

<pre><code>=Sum([Freight])</code></pre>
If you use the <SPAN CLASS="eln">Sum</SPAN> function in a calculated control, you can restrict the set of records against which the function is performed by setting the form's <SPAN CLASS="eln">Filter</SPAN> property.</P>
Example</P>
This example uses the Orders table to calculate the total sales for orders shipped to the United Kingdom. </P>
This example calls the EnumFields procedure, which you can find in the SELECT statement example.</P>

<pre><code>Sub SumX()

    Dim dbs As Database, rst As Recordset

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    ' Calculate the total sales for orders shipped to
    ' the United Kingdom.  
    Set rst = dbs.OpenRecordset("SELECT" _
        &amp; " Sum(UnitPrice*Quantity)" _
        &amp; " AS [Total UK Sales] FROM Orders" _
        &amp; " INNER JOIN [Order Details] ON" _
        &amp; " Orders.OrderID = [Order Details].OrderID" _
        &amp; " WHERE (ShipCountry = 'UK');")

    ' Populate the Recordset.
    rst.MoveLast

    ' Call EnumFields to print the contents of the 
    ' Recordset. Pass the Recordset object and desired
    ' field width.
    EnumFields rst, 15
    
    dbs.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example assumes that you have an Orders table that contains fields called OrderID and ShipCountry, and an Order Details table that contain fields called UnitPrice and Quantity. You can use the <SPAN CLASS="eln">Sum</SPAN> function to calculate the total sales for orders shipped to the United Kingdom. Enter the following expression in SQL view in the Query window:</P>

<pre><code>SELECT Sum([UnitPrice]*[Quantity]) AS [TotalUKSales]
FROM Orders INNER JOIN [Order Details]
ON Orders.[OrderID] = [Order Details].[OrderID]
WHERE ([ShipCountry] = 'UK');</code></pre>
The next example creates a calculated control that displays the total sales for records in the Order Details table. Open a new form and set its <SPAN CLASS="eln">RecordSource</SPAN> property to Order Details. Enter the following expression in the <SPAN CLASS="eln">ControlSource</SPAN> property of a text box on the form. To apply a condition that limits the search to only some records, such as those for orders shipped to the United Kingdom, set the form's <SPAN CLASS="eln">Filter</SPAN> property.</P>

<pre><code>=Sum([UnitPrice]*[Quantity])</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

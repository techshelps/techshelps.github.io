<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CodeContextObject Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CodeContextObject Property</H2>Applies To</P>
<SPAN CLASS="eln">Application</SPAN> object.</P>
Description</P>
You can use the <SPAN CLASS="eln">CodeContextObject</SPAN> property to determine the object in which a <SPAN CLASS="pop">macro</SPAN> or Visual&nbsp;Basic code is executing.</P>
Setting</P>
The <SPAN CLASS="eln">CodeContextObject</SPAN> property is set by Microsoft Access and is read-only in all views.</P>
Remarks</P>
The ActiveForm and ActiveReport properties of the Screen object always return the object that currently has the <SPAN CLASS="pop">focus</SPAN>. The object with the focus may or may not be the object where a macro or Visual&nbsp;Basic code is currently running, for example, when Visual&nbsp;Basic code runs in the <SPAN CLASS="jump">Timer</SPAN> event on a hidden form.</P>
See Also</P>
<SPAN CLASS="eln">ActiveForm</SPAN> property, <SPAN CLASS="eln">ActiveReport</SPAN> property, <SPAN CLASS="eln">Application</SPAN> object, <SPAN CLASS="eln">Me</SPAN> property, <SPAN CLASS="eln">Screen</SPAN> object.</P>
Example</P>
In the following example the <SPAN CLASS="eln">CodeContextObject</SPAN> property is used in a function to identify the name of the object in which an error occurred. The object name is then used in the message box title as well as in the body of the error message. The <SPAN CLASS="eln">Error</SPAN> statement is used in the command button's click event to generate the error for this example.</P>

<pre><code>Private Sub Command1_Click()
    On Error GoTo Command1_Err
    Error 11                                ' Generate divide-by-zero error.
    Exit Sub

    Command1_Err:
        If ErrorMessage("Command1_Click() Event", vbYesNo + _
                vbInformation, Err) = vbYes Then
            Exit Sub
        Else
            Resume
        End If
End Sub

Function ErrorMessage(strText As String, intType As Integer, _
        intErrVal As Integer) As Integer
    Dim objCurrent As Object
    Dim strMsgboxTitle As String
    Set objCurrent = CodeContextObject
    strMsgboxTitle = "Error in " &amp; objCurrent.Name
    strText = strText &amp; "Error #" &amp; intErrVal _
        &amp; " occured in " &amp; objCurrent.Name
    ErrorMessage = MsgBox(strText, intType, strMsgboxTitle)
    Err = 0
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Execute Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<HR CLASS="rr">
<H1>Execute Method</H1>Applies To</P>
<SPAN CLASS="eln">Connection</SPAN> object, <SPAN CLASS="eln">Database</SPAN> object, <SPAN CLASS="eln">QueryDef</SPAN> object.</P>
Description</P>
Runs an <SPAN CLASS="pop">action query</SPAN> or executes an <SPAN CLASS="pop">SQL statement</SPAN> on a specified Connection or Database object.</P>
Syntax</P>
<SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.Execute </SPAN><SPAN CLASS="eln">source</SPAN><SPAN CLASS="l">,</SPAN><SPAN CLASS="eln"> </SPAN><SPAN CLASS="eln">options</SPAN></P>
<SPAN CLASS="p">querydef</SPAN><SPAN CLASS="eln">.Execute </SPAN><SPAN CLASS="eln">options</SPAN></P>
The <SPAN CLASS="eln">Execute</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="91pt" VALIGN="TOP"><COL WIDTH="269pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <B>Connection</B> or <B>Database</B> object variable on which the query will&nbsp;run.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">querydef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An object variable that represents the QueryDef object whose <SPAN CLASS="eln">SQL</SPAN> property setting specifies the SQL statement to execute.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">source</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A String that is an SQL statement or the Name property value of a <SPAN CLASS="eln">QueryDef</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">options</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><P>Optional. A constant or combination of constants that determines the data integrity characteristics of the query, as specified in Settings.</P></TD></TR></TBODY></TABLE>
<BR></P>Settings</P>
You can use the following constants for <SPAN CLASS="p">options</SPAN>.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="91pt" VALIGN="TOP"><COL WIDTH="269pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Constant</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">dbDenyWrite</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Denies write permission to other users (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">dbInconsistent</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">(Default) Executes <SPAN CLASS="pop">inconsistent</SPAN> updates (Microsoft&nbsp;Jet workspaces only).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">dbConsistent</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Executes <SPAN CLASS="pop">consistent</SPAN> updates (Microsoft&nbsp;Jet workspaces only).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">dbSQLPassThrough</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Executes an SQL pass-through query. Setting this option passes the SQL statement to an <SPAN CLASS="pop">ODBC</SPAN> database for processing (Microsoft&nbsp;Jet workspaces only).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">dbFailOnError</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Rolls back updates if an error occurs (Microsoft&nbsp;Jet workspaces only).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">dbSeeChanges</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Generates a run-time error if another user is changing data you are editing (Microsoft&nbsp;Jet workspaces only).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>dbRunAsync</B></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Executes the query asynchronously (<SPAN CLASS="pop">ODBCDirect</SPAN> <B>Connection</B> and <B>QueryDef</B> objects only).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>dbExecDirect</B></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Executes the statement without first calling <SPAN CLASS="eln">SQLPrepare</SPAN> ODBC API function (ODBCDirect <B>Connection</B> and <B>QueryDef</B> objects only).</P></TD></TR></TBODY></TABLE>
<BR></P><SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;The constants <SPAN CLASS="eln">dbConsistent</SPAN> and <SPAN CLASS="eln">dbInconsistent</SPAN> are mutually exclusive. You can use one or the other, but not both in a given instance of <SPAN CLASS="eln">OpenRecordset</SPAN>. Using both <SPAN CLASS="eln">dbConsistent</SPAN> and <SPAN CLASS="eln">dbInconsistent</SPAN> causes an error.</P>
Remarks</P>
The <SPAN CLASS="eln">Execute</SPAN> method is valid only for action queries. If you use <SPAN CLASS="eln">Execute</SPAN> with another type of query, an error occurs. Because an action query doesn't return any records, <SPAN CLASS="eln">Execute</SPAN> doesn't return a Recordset. (Executing an SQL pass-through query in an ODBCDirect workspace will not return an error if a <B>Recordset</B> isn't returned.)</P>
Use the RecordsAffected property of the <B>Connection</B>, <SPAN CLASS="eln">Database</SPAN>, or <SPAN CLASS="eln">QueryDef</SPAN> object&nbsp;to determine the number of records affected by the most recent <SPAN CLASS="eln">Execute</SPAN> method. For example, <SPAN CLASS="eln">RecordsAffected</SPAN> contains the number of records deleted, updated, or inserted when executing an action query. When you use the <SPAN CLASS="eln">Execute</SPAN> method to run a query, the <SPAN CLASS="eln">RecordsAffected</SPAN> property of the <SPAN CLASS="eln">QueryDef</SPAN> object is set&nbsp;to&nbsp;the number of records affected.</P>
In a Microsoft&nbsp;Jet workspace, if you provide a syntactically correct SQL statement and have the appropriate permissions, the <SPAN CLASS="eln">Execute</SPAN> method won't fail — even if not a&nbsp;single row can be modified or deleted. Therefore, always use the <SPAN CLASS="eln">dbFailOnError</SPAN> option when using the <SPAN CLASS="eln">Execute</SPAN> method to run an update or delete query. This option generates a run-time error and rolls back all successful changes if any of the records affected are locked and can't be updated or deleted.</P>
For best performance in a Microsoft&nbsp;Jet workspace, especially in a multiuser environment, nest the <SPAN CLASS="eln">Execute</SPAN> method inside a <SPAN CLASS="pop">transaction</SPAN>. Use the <SPAN CLASS="eln">BeginTrans</SPAN> method on the current <SPAN CLASS="eln">Workspace</SPAN> object, then use the <SPAN CLASS="eln">Execute</SPAN> method, and complete the transaction by using the <SPAN CLASS="eln">CommitTrans</SPAN> method on the <SPAN CLASS="eln">Workspace</SPAN>. This saves changes on disk and frees any locks placed while the query is running.</P>
In an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>, if you include the optional <B>dbRunAsync</B> constant, the&nbsp;query runs asynchronously. To determine whether an asynchronous query is still executing, check the value of the <B>StillExecuting</B> property on the object from which the <B>Execute</B> method was called. To terminate execution of an asynchronous <B>Execute</B> method call, use the <B>Cancel</B> method.</P>
See Also</P>
<SPAN CLASS="eln">Cancel</SPAN> method, <SPAN CLASS="eln">RecordsAffected</SPAN> property, <SPAN CLASS="eln">StillExecuting</SPAN> property.</P>
Example</P>
This example demonstrates the <SPAN CLASS="eln">Execute</SPAN> method when run from both a <SPAN CLASS="eln">QueryDef</SPAN> object and a <SPAN CLASS="eln">Database</SPAN> object. The ExecuteQueryDef and PrintOutput procedures are required for this procedure to run.</P>

<pre><code>Sub ExecuteX()

    Dim dbsNorthwind As Database
    Dim strSQLChange As String
    Dim strSQLRestore As String
    Dim qdfChange As QueryDef
    Dim rstEmployees As Recordset
    Dim errLoop As Error

    ' Define two SQL statements for action queries.
    strSQLChange = "UPDATE Employees SET Country = " &amp; _
        "'United States' WHERE Country = 'USA'"
    strSQLRestore = "UPDATE Employees SET Country = " &amp; _
        "'USA' WHERE Country = 'United States'"

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    ' Create temporary QueryDef object.
    Set qdfChange = dbsNorthwind.CreateQueryDef("", _
        strSQLChange)
    Set rstEmployees = dbsNorthwind.OpenRecordset( _
        "SELECT LastName, Country FROM Employees", _
        dbOpenForwardOnly)

    ' Print report of original data.
    Debug.Print _
        "Data in Employees table before executing the query"
    PrintOutput rstEmployees
    
    ' Run temporary QueryDef.
    ExecuteQueryDef qdfChange, rstEmployees
    
    ' Print report of new data.
    Debug.Print _
        "Data in Employees table after executing the query"
    PrintOutput rstEmployees

    ' Run action query to restore data. Trap for errors,
    ' checking the Errors collection if necessary.
    On Error GoTo Err_Execute
    dbsNorthwind.Execute strSQLRestore, dbFailOnError
    On Error GoTo 0

    ' Retrieve the current data by requerying the recordset.
    rstEmployees.Requery

    ' Print report of restored data.
    Debug.Print "Data after executing the query " &amp; _
        "to restore the original information"
    PrintOutput rstEmployees

    rstEmployees.Close
    
    Exit Sub
Err_Execute:

    ' Notify user of any errors that result from
    ' executing the query.
    If DBEngine.Errors.Count &gt; 0 Then
        For Each errLoop In DBEngine.Errors
            MsgBox "Error number: " &amp; errLoop.Number &amp; vbCr &amp; _
                errLoop.Description
        Next errLoop
    End If
    
    Resume Next

End Sub

Sub ExecuteQueryDef(qdfTemp As QueryDef, _
    rstTemp As Recordset)

    Dim errLoop As Error
    
    ' Run the specified QueryDef object. Trap for errors,
    ' checking the Errors collection if necessary.
    On Error GoTo Err_Execute
    qdfTemp.Execute dbFailOnError
    On Error GoTo 0

    ' Retrieve the current data by requerying the recordset.
    rstTemp.Requery
    
    Exit Sub

Err_Execute:

    ' Notify user of any errors that result from
    ' executing the query.
    If DBEngine.Errors.Count &gt; 0 Then
        For Each errLoop In DBEngine.Errors
            MsgBox "Error number: " &amp; errLoop.Number &amp; vbCr &amp; _
                errLoop.Description
        Next errLoop
    End If
    
    Resume Next

End Sub

Sub PrintOutput(rstTemp As Recordset)

    ' Enumerate Recordset.
    Do While Not rstTemp.EOF
        Debug.Print "    " &amp; rstTemp!LastName &amp; _
            ", " &amp; rstTemp!Country
        rstTemp.MoveNext
    Loop

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example executes an action query and prints the number of records affected:</P>

<pre><code>Sub RecordsUpdated()
    Dim dbs As Database, qdf As QueryDef
    Dim strSQL As String
    
    ' Return reference to current database.
    Set dbs = CurrentDb
    strSQL = "UPDATE Employees SET Title = " _
        &amp; "'Senior Sales Representative' " _
        &amp; "WHERE Title = 'Sales Representative';"
    ' Create new QueryDef.
    Set qdf = dbs.CreateQueryDef("UpdateTitles", strSQL)
    ' Execute QueryDef.
    qdf.Execute
    Debug.Print qdf.RecordsAffected
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

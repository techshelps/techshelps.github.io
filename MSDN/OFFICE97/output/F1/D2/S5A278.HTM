<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ConflictTable Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>ConflictTable Property</H2>Applies To</P>
<SPAN CLASS="eln">TableDef</SPAN> object.</P>
Description</P>
Returns the name of a <SPAN CLASS="pop">conflict table</SPAN> containing the database records that conflicted during the <SPAN CLASS="pop">synchronization</SPAN> of two <SPAN CLASS="pop">replicas</SPAN> (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Return Values</P>
The return value is a String data type that is a <SPAN CLASS="pop">zero-length string</SPAN> if there is no conflict table or the database isn't a replica.</P>
Remarks</P>
If two users at two separate replicas each make a change to the same record in the database, the changes made by one user will fail to be applied to the other replica. Consequently, the user with the failed change must resolve the conflicts.</P>
Conflicts occur at the record level, not between fields. For example, if one user changes the Address field and another updates the Phone field in the same record, then one change is rejected. Because conflicts occur at the record level, the rejection occurs even though the successful change and the rejected change are unlikely to result in a true conflict of information.</P>
The synchronization mechanism handles the record conflicts by creating conflict tables, which contain the information that would have been placed in the table, if the change had been successful. You can examine these conflict tables and work through them row by row, fixing whatever is appropriate.</P>
All conflict tables are named <SPAN CLASS="p">table</SPAN>_conflict, where <SPAN CLASS="p">table</SPAN> is the original name of the table, truncated to the maximum table name length.</P>
See Also</P>
<SPAN CLASS="eln">Synchronize</SPAN> method.</P>
Example</P>
This example uses the <SPAN CLASS="eln">ConflictTable</SPAN> property to report the table names that had conflicts during synchronization.</P>

<pre><code>Sub ConflictTableX()

    Dim dbsNorthwind As Database
    Dim tdfTest As TableDef

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    ' Enumerate TableDefs collection and check ConflictTable
    ' property of each.
    For Each tdfTest In dbsNorthwind.TableDefs
        If tdfTest.ConflictTable &lt;&gt; "" Then _
            Debug.Print tdfTest.Name &amp; " had a conflict."
    Next tdfTest

    dbsNorthwind.Close

End Sub</code></pre>
This example opens a <SPAN CLASS="eln">Recordset</SPAN> from the <SPAN CLASS="pop">conflict table</SPAN> and one from the table that caused the conflict. It then processes the records in these tables, <SPAN CLASS="eln">using the RequiredDate field to copy information from one table to the other depending on which record was more recently updated.</SPAN></P>

<pre><code>Sub ConflictTableX2(dbsResolve As Database)

    Dim tdfTest As TableDef
    Dim rstSource As Recordset
    Dim rstConflict As Recordset
    Dim fldLoop As Field

    Set tdfTest = dbsResolve.TableDefs("Orders")

    If tdfTest.ConflictTable &lt;&gt; "" Then

        Set rstSource = dbsResolve.OpenRecordset( _
            tdfTest.Name, dbOpenTable)
        Set rstConflict = dbsResolve.OpenRecordset( _
            tdfTest.ConflictTable, dbOpenTable)
        rstSource.Index = "[d_Guid]"
        rstConflict.MoveFirst
        Do Until rstConflict.EOF
            rstSource.Seek "=", rstConflict![s_Guid]
            If Not rstSource.NoMatch Then
                If rstSource!RequiredDate &lt; _
                        rstConflict!RequiredDate Then
                    On Error Resume Next
                        For Each fldLoop in rstConflict.Fields
                            fldLoop = rstSource(fldLoop.Name)
                        Next fldLoop
                    On Error Goto 0
                End If
            End If
            rstConflict.Delete
            rstConflict.MoveNext
        Loop

        rstConflict.Close
        rstSource.Close
    End If

End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

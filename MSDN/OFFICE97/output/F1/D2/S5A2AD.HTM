<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ForeignName Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>ForeignName Property</H1>Applies To</P>
<SPAN CLASS="eln">Field</SPAN> object.</P>
Description</P>
Sets or returns a value that specifies the name of the Field object in a <SPAN CLASS="pop">foreign table</SPAN> that corresponds to a field in a <SPAN CLASS="pop">primary table</SPAN> for a <SPAN CLASS="pop">relationship</SPAN> (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Settings and Return Values</P>
The setting or return value is a String data type that evaluates to the name of a <SPAN CLASS="eln">Field</SPAN> in the associated TableDef object's Fields collection.</P>
If the Relation object isn't appended to the Database, but the <SPAN CLASS="eln">Field </SPAN>is appended to the <SPAN CLASS="eln">Relation </SPAN>object, the <SPAN CLASS="eln">ForeignName</SPAN> property is read/write. Once the <SPAN CLASS="eln">Relation</SPAN> object is appended to the database, the <SPAN CLASS="eln">ForeignName</SPAN> property is read-only.</P>
Remarks</P>
Only a <SPAN CLASS="eln">Field</SPAN> object that belongs to the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">Relation</SPAN> object can support the <SPAN CLASS="eln">ForeignName</SPAN> property.</P>
The <SPAN CLASS="eln">Name</SPAN> and <SPAN CLASS="eln">ForeignName</SPAN> property settings for a <SPAN CLASS="eln">Field</SPAN> object specify the names of the corresponding fields in the primary and foreign tables of a relationship. The <SPAN CLASS="eln">Table</SPAN> and <SPAN CLASS="eln">ForeignTable</SPAN> property settings for a <SPAN CLASS="eln">Relation</SPAN> object determine the primary and foreign tables of a relationship.</P>
For example, if you had a list of valid part codes (in a field named PartNo) stored in a ValidParts table, you could establish a relationship with an OrderItem table such that if a part code were entered into the OrderItem table, it would have to already exist in the ValidParts table. If the part code didn't exist in the ValidParts table and you had not set the Attributes property of the <SPAN CLASS="eln">Relation</SPAN> object to <SPAN CLASS="eln">dbRelationDontEnforce</SPAN>, a&nbsp;trappable error would occur.</P>
In this case, the ValidParts table is the <SPAN CLASS="pop">foreign table</SPAN>, so the <SPAN CLASS="eln">ForeignTable</SPAN> property of the <SPAN CLASS="eln">Relation</SPAN> object would be set to ValidParts and the <SPAN CLASS="eln">Table</SPAN> property of the <SPAN CLASS="eln">Relation</SPAN> object would be set to OrderItem. The <SPAN CLASS="eln">Name</SPAN> and <SPAN CLASS="eln">ForeignName</SPAN> properties of the <SPAN CLASS="eln">Field</SPAN> object in the <SPAN CLASS="eln">Relation</SPAN> object's <SPAN CLASS="eln">Fields</SPAN> collection would be set to PartNo.</P>
See Also</P>
<SPAN CLASS="eln">ForeignTable</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Table</SPAN> property.</P>
Example</P>
This example shows how the <SPAN CLASS="eln">Table</SPAN>, <SPAN CLASS="eln">ForeignTable</SPAN>, and <SPAN CLASS="eln">ForeignName</SPAN> properties define the terms of a <SPAN CLASS="eln">Relation</SPAN> between two tables.</P>

<pre><code>Sub ForeignNameX()

    Dim dbsNorthwind As Database
    Dim relLoop As Relation

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    Debug.Print "Relation"
    Debug.Print "                    Table - Field"
    Debug.Print "    Primary (One)   ";
    Debug.Print ".Table - .Fields(0).Name"
    Debug.Print "    Foreign (Many)  ";
    Debug.Print ".ForeignTable - .Fields(0).ForeignName"

    ' Enumerate the Relations collection of the Northwind
    ' database to report on the property values of
    ' the Relation objects and their Field objects.
    For Each relLoop In dbsNorthwind.Relations
        With relLoop
            Debug.Print
            Debug.Print .Name &amp; " Relation"
            Debug.Print "                    Table - Field"
            Debug.Print "    Primary (One)   ";
            Debug.Print .Table &amp; " - " &amp; .Fields(0).Name
            Debug.Print "    Foreign (Many)  ";
            Debug.Print .ForeignTable &amp; " - " &amp; _
                .Fields(0).ForeignName
        End With
    Next relLoop

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example shows how you can use the <SPAN CLASS="eln">ForeignName</SPAN>, <SPAN CLASS="eln">ForeignTable</SPAN>, and <SPAN CLASS="eln">Table</SPAN> properties when you create a relationship between two existing tables — in this case, Employees (the primary table) and Orders (the foreign table) in the current database. EmployeeID is the primary key in the Employees table, and also a foreign key in the Orders table. The relationship is one-to-many and referential integrity is enforced.</P>
Note that the <SPAN CLASS="eln">And</SPAN> operator performs a bitwise comparison to determine what permissions are currently set.</P>

<pre><code>Sub NewRelation()
    Dim dbs As Database
    Dim fld As Field, rel As Relation

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Find existing EmployeesOrders relation.
    For Each rel In dbs.Relations
        If rel.Table = "Employees" _
                And rel.ForeignTable = "Orders" Then
            ' Prompt user before deleting relation.
            If MsgBox(rel.Name &amp; " already exists. " &amp; vbCrLf _
                    &amp; "This relation will be deleted and re-created.", _
                    vbOK) = vbOK Then
                dbs.Relations.Delete rel.Name
            ' If user chooses Cancel, exit procedure.
            Else
                Exit Sub
            End If
        End If
    Next rel
    ' Create new relationship and set its properties.
    Set rel = dbs.CreateRelation("EmployeesOrders")
    ' Set Table property.
    rel.Table = "Employees"
    ' Set ForeignTable property.
    rel.ForeignTable = "Orders"
    ' Set Relation object attributes to enforce referential integrity.
    rel.Attributes = dbRelationDeleteCascade And dbRelationUpdateCascade
    ' Create field in Fields collection of Relation.
    Set fld = rel.CreateField("EmployeeID")
    ' Provide name of foreign key field.
    fld.ForeignName = "EmployeeID"
    ' Append field to Relation and Relation to database.
    rel.Fields.Append fld
    dbs.Relations.Append rel
    MsgBox "Relation '" &amp; rel.Name &amp; "' created."
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RowSourceType Property (User-Defined Function) -- Code Argument Values</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>RowSourceType Property (User-Defined Function) — Code Argument Values</H2>Description</P>
The Visual&nbsp;Basic function you create must accept five <SPAN CLASS="pop">arguments</SPAN>. The first argument must be declared as a <SPAN CLASS="pop">control</SPAN> and the remaining arguments as Variants. The function itself must return a <SPAN CLASS="eln">Variant</SPAN>.</P>
Syntax</P>
<SPAN CLASS="l">Function </SPAN><SPAN CLASS="p">functionname</SPAN><SPAN CLASS="l">(</SPAN><SPAN CLASS="p">fld</SPAN><SPAN CLASS="l"> As Control, </SPAN><SPAN CLASS="p">id</SPAN><SPAN CLASS="l"> As Variant, </SPAN><SPAN CLASS="p">row</SPAN><SPAN CLASS="l"> As Variant, </SPAN><SPAN CLASS="p">col</SPAN><SPAN CLASS="l"> As Variant,</SPAN><BR>ú<SPAN CLASS="p">code</SPAN><SPAN CLASS="l"> As Variant) As Variant</SPAN></P>
The <SPAN CLASS="eln">Function</SPAN> procedure has the following five required arguments.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="288pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">fld</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A control variable that refers to the <SPAN CLASS="pop">list box</SPAN> or <SPAN CLASS="pop">combo box</SPAN> being filled.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">id</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A unique value that identifies the control being filled. This is useful when you want to use the same user-defined function for more than one list box or combo box and must distinguish between them. (The example sets this variable to the value of the <SPAN CLASS="eln">Timer</SPAN> function.)</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">row</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The row being filled (zero-based).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">col</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The column being filled (zero-based).</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">code</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">intrinsic constant</SPAN> that specifies the kind of information being requested.</P></TD></TR></TBODY></TABLE>
<BR></P><SPAN CLASS="nh">Note</SPAN>   Because Microsoft Access calls a user-defined function several times to insert items into a list, often you must preserve information from call to call. The best way to do this is to use Static variables.</P>
Microsoft Access calls the user-defined function by repeatedly using different values in the <SPAN CLASS="p">code</SPAN> argument to specify the information it needs. The <SPAN CLASS="p">code</SPAN> argument can use the following intrinsic constants.</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="107pt" VALIGN="TOP"><COL WIDTH="93pt" VALIGN="TOP"><COL WIDTH="158pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Constant</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Meaning</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Function returns</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBInitialize</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Initialize</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Nonzero if the function can fill the list; <SPAN CLASS="eln">False</SPAN> (0) or Null otherwise.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBOpen</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Open</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Nonzero ID value if the function can fill the list; <SPAN CLASS="eln">False</SPAN> or <SPAN CLASS="eln">Null</SPAN> otherwise.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBGetRowCount</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Number of rows</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Number of rows in the list (can be zero); –1 if unknown.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBGetColumnCount</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Number of columns</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Number of columns in the list (can't be zero); must match the property sheet value.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBGetColumnWidth</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Column width</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Width (in <SPAN CLASS="pop">twips</SPAN>) of the column specified by the <SPAN CLASS="p">col</SPAN> argument; –1 to use the default width.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBGetValue</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">List entry</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">List entry to be displayed in the row and column specified by the <SPAN CLASS="p">row</SPAN> and <SPAN CLASS="p">col</SPAN> arguments.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBGetFormat</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Format string</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Format string to be used to format the list entry displayed in the row and column specified by the <SPAN CLASS="p">row</SPAN> and <SPAN CLASS="p">col</SPAN> arguments; –1 to use the default format.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBEnd</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">End (the last call to a user-defined function always uses this value)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Nothing.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLBClose</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">(Not used)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Not used.</P></TD></TR></TBODY></TABLE>
<BR></P>Microsoft Access calls your user-defined function once for <SPAN CLASS="eln">acLBInitialize</SPAN>, <SPAN CLASS="eln">acLBOpen</SPAN>, <SPAN CLASS="eln">acLBGetRowCount</SPAN>, and <SPAN CLASS="eln">acLBGetColumnCount</SPAN>. It initializes the user-defined function, opens the query, and determines the number of rows and columns.</P>
Microsoft Access calls your user-defined function twice for <SPAN CLASS="eln">acLBGetColumnWidth</SPAN> — once to determine the total width of the list box or combo box and a second time to set the column width.</P>
The number of times your user-defined function is called for <SPAN CLASS="eln">acLBGetValue</SPAN> and <SPAN CLASS="eln">acLBGetFormat</SPAN> to get list entries and to format strings varies depending on the number of entries, the user's scrolling, and other factors.</P>
Microsoft Access calls the user-defined function for <SPAN CLASS="eln">acLBEnd</SPAN> when the form is closed or each time the list box or combo box is queried.</P>
Whenever a particular value (such as the number of columns) is required, returning <SPAN CLASS="eln">Null</SPAN> or any invalid value causes Microsoft Access to stop calling the user-defined function with that code.</P>
<SPAN CLASS="nh">Tip</SPAN>   You can use the Select Case code structure from the example as a template for your own <SPAN CLASS="eln">RowSourceType</SPAN> property user-defined functions.</P>
See Also</P>
<SPAN CLASS="eln">Static</SPAN> statement.</P>
Example</P>
The following user-defined function returns a list of the next four Mondays following today's date. To call this function from a list box control, enter <SPAN CLASS="eln">ListMondays</SPAN> as the <SPAN CLASS="eln">RowSourceType</SPAN> property setting and leave the <SPAN CLASS="eln">RowSource</SPAN> property setting blank.</P>

<pre><code>Function ListMondays(fld As Control, id As Variant, row As Variant, _
        col As Variant, code As Variant) As Variant
    Dim intOffset As Integer
    Select Case code
        Case acLBInitialize               ' Initialize.
            ListMondays = True
        Case acLBOpen                       ' Open.
            ListMondays = Timer           ' Unique ID.
        Case acLBGetRowCount               ' Get rows.
            ListMondays = 4
        Case acLBGetColumnCount           ' Get columns.
            ListMondays = 1
        Case acLBGetColumnWidth           ' Get column width.
            ListMondays = -1               ' Use default width.
        Case acLBGetValue                   ' Get the data.
            intOffset = Abs((9 - Weekday(Now))Mod 7)
            ListMondays = Format(Now() + intOffset + 7 * row,"mmmm d")
    End Select
End Function</code></pre>
The next example uses a static array to store the names of the databases in the current directory. To call this function, enter <SPAN CLASS="eln">ListMDBs</SPAN> as the <SPAN CLASS="eln">RowSourceType</SPAN> property setting and leave the <SPAN CLASS="eln">RowSource</SPAN> property setting blank.</P>

<pre><code>Function ListMDBs(fld As Control, id As Variant, row As Variant, _
        col As Variant, code As Variant) As Variant
    Static dbs(127) As String, Entries As Integer
    Dim ReturnVal As Variant
    ReturnVal = Null
    Select Case code
        Case acLBInitialize               ' Initialize.
            Entries = 0
            dbs(Entries ) = Dir("*.MDB")
            Do Until dbs(Entries) = "" Or Entries &gt;= 127
                Entries = Entries+1
                dbs(Entries) = Dir
            Loop
            ReturnVal = Entries
        Case acLBOpen                       ' Open.
            ReturnVal = Timer               ' Generate unique ID for control.
        Case acLBGetRowCount               ' Get number of rows.
            ReturnVal = Entries
        Case acLBGetColumnCount           ' Get number of columns.
            ReturnVal = 1
        Case acLBGetColumnWidth           ' Column width.
            ReturnVal = -1                   ' -1 forces use of default width.
        Case acLBGetValue                   ' Get data.
            ReturnVal = dbs(row)
        Case acLBEnd                           ' End.
            Erase dbs
    End Select
    ListMDBs = ReturnVal
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

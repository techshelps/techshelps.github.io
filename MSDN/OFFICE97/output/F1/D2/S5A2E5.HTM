<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Recordset Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Recordset Object</H1>Description</P>
A <SPAN CLASS="eln">Recordset</SPAN> object represents the records in a <SPAN CLASS="pop">base table</SPAN> or the records that result from running a query.</P>
Remarks</P>
You use <SPAN CLASS="eln">Recordset</SPAN> objects to manipulate data in a database at the record level. When you use DAO objects, you manipulate data almost entirely using <SPAN CLASS="eln">Recordset</SPAN> objects. All <SPAN CLASS="eln">Recordset</SPAN> objects are constructed using <SPAN CLASS="pop">records</SPAN> (rows) and <SPAN CLASS="pop">fields</SPAN> (columns). There are five types of <SPAN CLASS="eln">Recordset</SPAN> objects:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Table-type Recordset — representation in code of a base table that you can use to add, change, or delete records from a single database table (Microsoft&nbsp;Jet workspaces only).</LI><LI CLASS="ULI1"><SPAN CLASS="eln">Dynaset-type Recordset</SPAN> — the result of a query that can have updatable records. A&nbsp;dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object is a dynamic set of records that you can use to&nbsp;add, change, or delete records from an underlying database table or tables. A&nbsp;dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object can contain fields from one or more tables in a&nbsp;database. This type corresponds to an <SPAN CLASS="pop">ODBC</SPAN> <SPAN CLASS="pop">keyset cursor</SPAN>.</LI><LI CLASS="ULI1">Snapshot-type Recordset — a static copy of a set of records that you can use to find data or generate reports. A snapshot-type <SPAN CLASS="eln">Recordset</SPAN> object can contain fields from one or more tables in a database but can't be updated. This type corresponds to an ODBC <SPAN CLASS="pop">static cursor</SPAN>.</LI><LI CLASS="ULI1">Forward-only-type Recordset — identical to a snapshot except that no cursor is provided. You can only scroll forward through records. This improves performance in situations where you only need to make a single pass through a result set. This type corresponds to an ODBC <SPAN CLASS="pop">forward-only cursor</SPAN>.</LI><LI CLASS="ULI1"><SPAN CLASS="eln">Dynamic-type Recordset</SPAN> — a query result set from one or more base tables in which you can add, change, or delete records from a row-returning query. Further, records other users add, delete, or edit in the base tables also appear in your <B>Recordset</B>. This type corresponds to an ODBC <SPAN CLASS="pop">dynamic cursor</SPAN> (ODBCDirect workspaces only).
</LI></UL></SPAN>You can choose the type of <SPAN CLASS="eln">Recordset</SPAN> object you want to create using the <SPAN CLASS="p">type</SPAN> argument of the <SPAN CLASS="eln">OpenRecordset</SPAN> method.</P>
In a Microsoft&nbsp;Jet workspace, if you don't specify a <SPAN CLASS="p">type</SPAN>, DAO attempts to create the type of <B>Recordset</B> with the most functionality available, starting with table. If this type isn't available, DAO attempts a dynaset, then a snapshot, and finally a forward-only-type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
In an ODBCDirect workspace, if you don't specify a <SPAN CLASS="p">type</SPAN>, DAO attempts to create the type of <B>Recordset</B> with the fastest query response, starting with forward-only. If this type isn't available, DAO attempts a snapshot, then a dynaset, and finally a dynamic-type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
When creating a <SPAN CLASS="eln">Recordset</SPAN> object using a non-linked TableDef object in a Microsoft Jet workspace, table-type <SPAN CLASS="eln">Recordset</SPAN> objects are created. Only dynaset-type or snapshot-type <SPAN CLASS="eln">Recordset</SPAN> objects can be created with linked tables or tables in Microsoft&nbsp;Jet-connected ODBC databases.</P>
A new <SPAN CLASS="eln">Recordset</SPAN> object is automatically added to the <SPAN CLASS="eln">Recordsets</SPAN> collection when you open the object, and is automatically removed when you close it.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;If you use variables to represent a <SPAN CLASS="eln">Recordset</SPAN> object and the <SPAN CLASS="eln">Database</SPAN> object that contains the <SPAN CLASS="eln">Recordset</SPAN>, make sure the variables have the same <SPAN CLASS="pop">scope</SPAN>, or lifetime. For example, if you declare a public variable that represents a <SPAN CLASS="eln">Recordset</SPAN> object, make sure the variable that represents the <SPAN CLASS="eln">Database</SPAN> containing the <SPAN CLASS="eln">Recordset</SPAN> is also public, or is declared in a <SPAN CLASS="eln">Sub</SPAN> or <SPAN CLASS="eln">Function</SPAN> procedure using the <SPAN CLASS="eln">Static</SPAN> keyword.</P>
You can create as many <SPAN CLASS="eln">Recordset</SPAN> <SPAN CLASS="pop">object variables</SPAN> as needed. Different <SPAN CLASS="eln">Recordset</SPAN> objects can access the same tables, queries, and fields without conflicting.</P>
Dynaset-, snapshot-, and forward-only-type <SPAN CLASS="eln">Recordset</SPAN> objects are stored in local memory. If there isn't enough space in local memory to store the data, the Microsoft&nbsp;Jet database engine saves the additional data to <SPAN CLASS="pop">TEMP</SPAN> disk space. If this space is exhausted, a trappable error occurs.</P>
The default collection of a <SPAN CLASS="eln">Recordset</SPAN> object is the <SPAN CLASS="eln">Fields</SPAN> collection, and the default property of a Field object is the Value property. Use these defaults to simplify your&nbsp;code.</P>
When you create a <SPAN CLASS="eln">Recordset</SPAN> object, the <SPAN CLASS="pop">current record</SPAN> is positioned to the first record if there are any records. If there are no records, the <SPAN CLASS="eln">RecordCount</SPAN> property setting is 0, and the <SPAN CLASS="eln">BOF</SPAN> and <SPAN CLASS="eln">EOF</SPAN> property settings are <SPAN CLASS="eln">True</SPAN>.</P>
You can use the <SPAN CLASS="eln">MoveNext</SPAN>, <SPAN CLASS="eln">MovePrevious</SPAN>, <SPAN CLASS="eln">MoveFirst</SPAN>, and <SPAN CLASS="eln">MoveLast</SPAN> methods to reposition the current record. Forward-only-type <SPAN CLASS="eln">Recordset</SPAN> objects support only the <SPAN CLASS="eln">MoveNext</SPAN> method. When using the Move methods to visit each record (or "walk" through the <B>Recordset</B>), you can use the <SPAN CLASS="eln">BOF</SPAN> and <SPAN CLASS="eln">EOF</SPAN> properties to check for the beginning or end of the <SPAN CLASS="eln">Recordset</SPAN> object.</P>
With dynaset- and snapshot-type <SPAN CLASS="eln">Recordset</SPAN> objects in a Microsoft&nbsp;Jet workspace, you can also use the Find methods, such as <SPAN CLASS="eln">FindFirst</SPAN>, to locate a specific record based on criteria. If the record isn't found, the <SPAN CLASS="eln">NoMatch</SPAN> property is set to <SPAN CLASS="eln">True</SPAN>. For table-type <SPAN CLASS="eln">Recordset</SPAN> objects, you can scan records using the <SPAN CLASS="eln">Seek</SPAN> method.</P>
The <SPAN CLASS="eln">Type</SPAN> property indicates the type of <SPAN CLASS="eln">Recordset</SPAN> object created, and the <SPAN CLASS="eln">Updatable</SPAN> property indicates whether you can change the object's records.</P>
Information about the structure of a base table, such as the names and data types of each <SPAN CLASS="eln">Field</SPAN> object and any <SPAN CLASS="eln">Index</SPAN> objects, is stored in a <SPAN CLASS="eln">TableDef</SPAN> object.</P>
To refer to a <SPAN CLASS="eln">Recordset</SPAN> object in a collection by its ordinal number or by its <SPAN CLASS="eln">Name</SPAN> property setting, use any of the following syntax forms:</P>
<SPAN CLASS="eln">Recordsets</SPAN><SPAN CLASS="l">(</SPAN>0<SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="eln">Recordsets</SPAN><SPAN CLASS="l">("</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">")</SPAN></P>
<SPAN CLASS="eln">Recordsets</SPAN><SPAN CLASS="l">![</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">]</SPAN></P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can open a <SPAN CLASS="eln">Recordset</SPAN> object from the same data source or database more than once, creating duplicate names in the <SPAN CLASS="eln">Recordsets</SPAN> collection. You should assign <SPAN CLASS="eln">Recordset</SPAN> objects to <SPAN CLASS="pop">object variables</SPAN> and refer to them by variable name.</P>
Properties</P>
<SPAN CLASS="eln">AbsolutePosition</SPAN> property, <SPAN CLASS="eln">BatchCollisionCount</SPAN> property, <SPAN CLASS="eln">BatchCollisions</SPAN> property, <SPAN CLASS="eln">BatchSize</SPAN> property, <SPAN CLASS="eln">BOF</SPAN>, <SPAN CLASS="eln">EOF</SPAN> properties, <SPAN CLASS="eln">Bookmark</SPAN> property, <SPAN CLASS="eln">Bookmarkable</SPAN> property, <SPAN CLASS="eln">CacheSize</SPAN> property, <SPAN CLASS="eln">CacheStart</SPAN> property, <SPAN CLASS="eln">Connection</SPAN> property, <SPAN CLASS="eln">DateCreated</SPAN>, <SPAN CLASS="eln">LastUpdated</SPAN> properties, <SPAN CLASS="eln">EditMode</SPAN> property, <SPAN CLASS="eln">Filter</SPAN> property, <SPAN CLASS="eln">Index</SPAN> property, <SPAN CLASS="eln">LastModified</SPAN> property, <SPAN CLASS="eln">LockEdits</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">NoMatch</SPAN> property, <SPAN CLASS="eln">PercentPosition</SPAN> property, <SPAN CLASS="eln">RecordCount</SPAN> property, <SPAN CLASS="eln">RecordStatus</SPAN> property, <SPAN CLASS="eln">Restartable</SPAN> property, <SPAN CLASS="eln">Sort</SPAN> property, <SPAN CLASS="eln">StillExecuting</SPAN> property, <SPAN CLASS="eln">Transactions</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">Updatable</SPAN> property, <SPAN CLASS="eln">UpdateOptions</SPAN> property, <SPAN CLASS="eln">ValidationRule</SPAN> property, <SPAN CLASS="eln">ValidationText</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">AddNew</SPAN> method, <SPAN CLASS="eln">Cancel</SPAN> method, <SPAN CLASS="eln">CancelUpdate</SPAN> method, <SPAN CLASS="eln">Clone</SPAN> method, <SPAN CLASS="eln">Close</SPAN> method, <SPAN CLASS="eln">CopyQueryDef</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Edit</SPAN> method, <SPAN CLASS="eln">FillCache</SPAN> method, <SPAN CLASS="eln">FindFirst</SPAN>, <SPAN CLASS="eln">FindLast</SPAN>, <SPAN CLASS="eln">FindNext</SPAN>, <SPAN CLASS="eln">FindPrevious</SPAN> methods, <SPAN CLASS="eln">GetRows</SPAN> method, <SPAN CLASS="eln">Move</SPAN> method, <SPAN CLASS="eln">MoveFirst</SPAN>, <SPAN CLASS="eln">MoveLast</SPAN>, <SPAN CLASS="eln">MoveNext</SPAN>, <SPAN CLASS="eln">MovePrevious</SPAN> methods, <SPAN CLASS="eln">NextRecordset</SPAN> method, <SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">Requery</SPAN> method, <SPAN CLASS="eln">Seek</SPAN> method, <SPAN CLASS="eln">Update</SPAN> method.</P>
See Also</P>
Dynamic-Type <SPAN CLASS="eln">Recordset</SPAN> object, Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, Forward-Only-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Index</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object, Table-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Specifics (Microsoft&nbsp;Access)</P>
If you used the <SPAN CLASS="op">.</SPAN> (dot) operator syntax when referring to <SPAN CLASS="eln">Recordset</SPAN> objects in applications created in versions 1.<SPAN CLASS="p">x</SPAN> or 2.0 of Microsoft&nbsp;Access, you must modify those references to use the <SPAN CLASS="op">!</SPAN> (exclamation point) operator syntax. Or, if you want to continue using the <SPAN CLASS="op">.</SPAN> (dot) operator syntax, you must establish a reference to the Microsoft DAO&nbsp;2.5/3.5 compatibility library in the <SPAN CLASS="eln">References</SPAN> dialog box, available by clicking <SPAN CLASS="eln">References</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu while in module <SPAN CLASS="pop">Design view</SPAN>.</P>
Example</P>
This example demonstrates <SPAN CLASS="eln">Recordset</SPAN> objects and the <SPAN CLASS="eln">Recordsets</SPAN> collection by opening four different types of <SPAN CLASS="eln">Recordsets</SPAN>, enumerating the <SPAN CLASS="eln">Recordsets</SPAN> collection of the current <SPAN CLASS="eln">Database</SPAN>, and enumerating the <SPAN CLASS="eln">Properties</SPAN> collection of each <SPAN CLASS="eln">Recordset</SPAN>.</P>

<pre><code>Sub RecordsetX()

    Dim dbsNorthwind As Database
    Dim rstTable As Recordset
    Dim rstDynaset As Recordset
    Dim rstSnapshot As Recordset
    Dim rstForwardOnly As Recordset
    Dim rstLoop As Recordset
    Dim prpLoop As Property

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    With dbsNorthwind

        ' Open one of each type of Recordset object.
        Set rstTable = .OpenRecordset("Categories", _
            dbOpenTable)
        Set rstDynaset = .OpenRecordset("Employees", _
            dbOpenDynaset)
        Set rstSnapshot = .OpenRecordset("Shippers", _
            dbOpenSnapshot)
        Set rstForwardOnly = .OpenRecordset _
            ("Employees", dbOpenForwardOnly)

        Debug.Print "Recordsets in Recordsets " &amp; _
            "collection of dbsNorthwind"

        ' Enumerate Recordsets collection.
        For Each rstLoop In .Recordsets

            With rstLoop
                Debug.Print "    " &amp; .Name

                ' Enumerate Properties collection of each
                ' Recordset object. Trap for any
                ' properties whose values are invalid in
                ' this context.
                For Each prpLoop In .Properties
                    On Error Resume Next
                    If prpLoop &lt;&gt; "" Then Debug.Print _
                        "        " &amp; prpLoop.Name &amp; _
                        " = " &amp; prpLoop
                    On Error GoTo 0
                Next prpLoop

            End With

        Next rstLoop

        rstTable.Close
        rstDynaset.Close
        rstSnapshot.Close
        rstForwardOnly.Close

        .Close
    End With

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example opens a table-type <SPAN CLASS="eln">Recordset</SPAN> object, a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object, and a snapshot-type <SPAN CLASS="eln">Recordset</SPAN> object. Then it displays the value of the <SPAN CLASS="eln">Updatable</SPAN> property for the <SPAN CLASS="eln">Recordset</SPAN> objects.</P>

<pre><code>Sub NewRecordsets()
    Dim dbs As Database, rst As Recordset
    Dim rstEmployees As Recordset, rstOrders As Recordset
    Dim rstProducts As Recordset, strSQL As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create table-type Recordset object.
    Set rstEmployees = dbs.OpenRecordset("Employees", dbOpenTable)
    ' Create dynaset-type Recordset object.
    Set rstOrders = dbs.OpenRecordset("Employees", dbOpenDynaset)
    ' Create snapshot-type Recordset object.
    Set rstProducts = dbs.OpenRecordset("Products", dbOpenSnapshot)
    ' Print value of Updatable property for each Recordset object.
    For Each rst In dbs.Recordsets
        Debug.Print rst.Name; "   "; rst.Updatable
    Next rst
    ' Free all object variables.
    rstEmployees.Close
    rstOrders.Close
    rstProducts.Close
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

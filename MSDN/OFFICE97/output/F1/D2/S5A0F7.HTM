<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filter Event</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Filter Event</H2>Applies To</P>
Form.</P>
Description</P>
The Filter event occurs when the user does one of the following:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">On the <SPAN CLASS="eln">Records</SPAN> menu in <SPAN CLASS="pop">Form view</SPAN>, points to <SPAN CLASS="eln">Filter</SPAN> and then clicks <SPAN CLASS="eln">Filter By Form</SPAN>, or clicks the <SPAN CLASS="eln">Filter By Form</SPAN> button on the <SPAN CLASS="pop">toolbar</SPAN>. This opens the <SPAN CLASS="pop">Filter By Form</SPAN> window, where you can quickly create a <SPAN CLASS="pop">filter</SPAN> based on the fields in the <SPAN CLASS="pop">form</SPAN>.</LI><LI CLASS="ULI1">On the <SPAN CLASS="eln">Records</SPAN> menu in Form view, points to <SPAN CLASS="eln">Filter</SPAN> and then clicks <SPAN CLASS="eln">Advanced Filter/Sort</SPAN>. This opens the <SPAN CLASS="pop">Advanced Filter/Sort</SPAN> window, where you can create complex filters for the form.</LI><LI CLASS="ULI1">Clicks <SPAN CLASS="eln">Advanced Filter/Sort</SPAN> on the <SPAN CLASS="eln">Filter</SPAN> menu while the Filter By Form window is open, or clicks <SPAN CLASS="eln">Filter By Form</SPAN> on the <SPAN CLASS="eln">Filter</SPAN> menu while the Advanced Filter/Sort window is open. This causes the <SPAN CLASS="jump">ApplyFilter</SPAN> event to occur when the open filter window is closed, and then the Filter event to occur when the other filter window is opened.
</LI></UL></SPAN>Remarks</P>
To run a <SPAN CLASS="pop">macro</SPAN> or <SPAN CLASS="pop">event procedure</SPAN> when this event occurs, set the OnFilter property to the name of the macro or to [Event Procedure].</P>
You can use the Filter event to:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Remove any previous filter for the form. To do this, set the Filter property of the form to a <SPAN CLASS="pop">zero-length string</SPAN> (" ") in the Filter macro or event procedure. This is especially useful if you want to make sure extraneous criteria don't appear in the new filter. For example, whenever you use the <SPAN CLASS="pop">Filter By Selection</SPAN> feature, the criteria you use (the selected text in the form) is added to the <SPAN CLASS="eln">Filter</SPAN> property</LI><LI CLASS="ULI1">You can't use the <SPAN CLASS="eln">GetOption</SPAN> method or the <SPAN CLASS="eln">SetOption</SPAN> method to read or set any of the options found on the <SPAN CLASS="eln">Module</SPAN> tab of the <SPAN CLASS="eln">Options</SPAN> dialog box.</LI><LI CLASS="ULI1">If the return value of the <SPAN CLASS="eln">GetOption</SPAN> method is assigned to a variable, the variable must be declared as a <SPAN CLASS="eln">Variant</SPAN>.</LI><LI CLASS="ULI1">If your database may run on a version of Microsoft Access for a language other than the one in which you created it, then you must supply the arguments for the <SPAN CLASS="eln">GetOption</SPAN> and <SPAN CLASS="eln">SetOption</SPAN> methods in English.
</LI></UL></SPAN>When you quit Microsoft Access, you can reset all options to their original settings by using the <SPAN CLASS="eln">SetOption</SPAN> method on all changed options. You may want to create public variables to store the values of the original settings. You might include code to reset options in the Close event procedure for a form, or in a custom exit procedure that the user must run to quit the application.</P>
Example</P>
The following example uses the <SPAN CLASS="eln">GetOption</SPAN> method to return the <SPAN CLASS="eln">Default Field Type</SPAN> option setting from the <SPAN CLASS="eln">Tables/Queries</SPAN> tab of the <SPAN CLASS="eln">Options</SPAN> dialog box and then saves the setting in a variable. If the <SPAN CLASS="eln">Default Field Type</SPAN> option isn't currently set to Text, Microsoft Access displays a dialog box asking the user whether it should set the option to Text. If the user clicks <SPAN CLASS="eln">Yes</SPAN>, the <SPAN CLASS="eln">SetOption</SPAN> method changes the option.</P>

<pre><code>Sub ChangeFieldSize()
    ' Constant represents Text setting of Default Field Type option.
    Const conText = 0

    Dim varSize As Variant, intResponse As Integer
    Dim strMsg As String

    ' Determine current setting.
    varSize = Application.GetOption("Default Field Type")
    strMsg = "Set default field type to Text?"
    If varSize &lt;&gt; conText Then
    ' Prompt user to change setting if it's not Text.
        If MsgBox(strMsg, vbYesNo) = vbYes Then
            ' Change setting to Text.
            Application.SetOption "Default Field Type", conText
        End If
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

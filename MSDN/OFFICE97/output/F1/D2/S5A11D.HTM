<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initialize Event -- Event Procedures</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Initialize Event — Event Procedures</H2>Description</P>
To create the <SPAN CLASS="pop">event procedure</SPAN> for the Initialize event, open the <SPAN CLASS="pop">class module</SPAN> and click <SPAN CLASS="eln">Class</SPAN> in the <SPAN CLASS="eln">Object</SPAN> box. Then click <SPAN CLASS="eln">Initialize</SPAN> in the <SPAN CLASS="eln">Procedure</SPAN> box.</P>
Syntax</P>
<SPAN CLASS="l">Private Sub Class_Initialize( )</SPAN></P>
Remarks</P>
You can use this event procedure to run code when an <SPAN CLASS="pop">instance</SPAN> of the <SPAN CLASS="pop">class</SPAN> is created, or to initialize any data used by the instance of the class.</P>
The Initialize event occurs when you create a new instance of a class by using the New keyword. For example, suppose you have a class named CustomObject. You can add a declaration statement to a procedure in a <SPAN CLASS="pop">standard module</SPAN> that creates a new instance of the class CustomObject, as shown in the following example:</P>

<pre><code>Dim obj As New CustomObject</code></pre>
When you run the procedure that contains this declaration, Visual Basic creates a new instance of the CustomObject class, and the Initialize event occurs.</P>
The Initialize event also occurs when you create an instance of a class by setting or returning a property or applying a method defined in the class module. For example, suppose you've defined a Function procedure named ListNames within the CustomObject class module. To run this function from another module, you must qualify it with the name of the class module, as shown in the following example:</P>

<pre><code>CustomObject.ListNames</code></pre>
Qualifying the function with the name of the class module creates an instance of the class module, and the Initialize event occurs.</P>
Example</P>
The following example includes event procedures for the ItemAdded and ItemRemoved events. To try this example, first create a new class module by clicking <SPAN CLASS="eln">Class Module</SPAN> on the <SPAN CLASS="eln">Insert</SPAN> menu. Paste the following code into the class module and save the module as RefEvents:</P>

<pre><code>' Declare object variable to represent References collection.
Public WithEvents evtReferences As References

' When instance of class is created, initialize evtReferences variable.
Private Sub Class_Initialize()
    Set evtReferences = Application.References
End Sub

' When instance is removed, set evtReferences to Nothing.
Private Sub Class_Terminate()
    Set evtReferences = Nothing
End Sub

' Display message when reference is added.
Private Sub evtReferences_ItemAdded(ByVal Reference As Access.Reference)
    MsgBox "Reference to " &amp; Reference.Name &amp; " added."
End Sub

' Display message when reference is removed.
Private Sub evtReferences_ItemRemoved(ByVal Reference As Access.Reference)
    MsgBox "Reference to " &amp; Reference.Name &amp; " removed."
End Sub</code></pre>
The following <SPAN CLASS="eln">Function</SPAN> procedure adds a specified reference. When a reference is added, the ItemAdded event procedure defined in the RefEvents class runs.</P>
For example, to set a reference to the calendar control, you could pass the string "C:\Windows\System\Mscal.ocx", if this is the correct location for the calendar control on your computer.</P>

<pre><code>' Create new instance of RefEvents class.
Dim objRefEvents As New RefEvents

' Pass file name and path of type library to this procedure.
Function AddReference(strFileName As String) As Boolean
    Dim ref As Reference

    On Error GoTo Error_AddReference
    ' Create new reference on References object variable.
    Set ref = objRefEvents.evtReferences.AddFromFile(strFileName)
    AddReference = True

Exit_AddReference:
    Exit Function

Error_AddReference:
    MsgBox Err &amp; ": " &amp; Err.Description
    AddReference = False
    Resume Exit_AddReference
End Function</code></pre>
The next <SPAN CLASS="eln">Function</SPAN> procedure removes a specified reference. When a reference is removed, the ItemRemoved event procedure defined in the RefEvents class runs.</P>
For example, to remove a reference to the calendar control, you could pass the string "MSACAL," which is the name of the <SPAN CLASS="eln">Reference</SPAN> object that represents the calendar control.</P>

<pre><code>Function RemoveReference(strRefName As String) As Boolean
    Dim ref As Reference

    On Error GoTo Error_RemoveReference
    ' Return object representing existing reference.
    Set ref = objRefEvents.evtReferences(strRefName)
    ' Remove reference from collection.
    objRefEvents.evtReferences.Remove ref
    RemoveReference = True

Exit_RemoveReference:
    Exit Function

Error_RemoveReference:
    MsgBox Err &amp; ": " &amp; Err.Description
    RemoveReference = False
    Resume Exit_RemoveReference
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

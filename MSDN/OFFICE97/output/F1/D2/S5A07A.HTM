<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CodeDb Function</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CodeDb Function</H2>Description</P>
You can use the <SPAN CLASS="eln">CodeDb</SPAN> function in a code module to determine the name of the Database object that refers to the database in which code is currently running. Use the <SPAN CLASS="eln">CodeDb</SPAN> function to access <SPAN CLASS="pop">Data Access Objects (DAO)</SPAN> that are part of a <SPAN CLASS="pop">library database</SPAN>.</P>
For example, you can use the <SPAN CLASS="eln">CodeDb</SPAN> function in a module in a library database to create a <SPAN CLASS="eln">Database</SPAN> object referring to the library database. You can then open a <SPAN CLASS="pop">recordset</SPAN> based on a table in the library database.</P>
Syntax</P>
<SPAN CLASS="l">Set </SPAN><SPAN CLASS="p">database</SPAN><SPAN CLASS="l"> = CodeDb</SPAN></P>
The <SPAN CLASS="eln">CodeDb</SPAN> function has the following argument.</P>

<TABLE COLS="3" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="269pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">database</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">A <SPAN CLASS="eln">Database</SPAN> object variable.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
The <SPAN CLASS="eln">CodeDb</SPAN> function returns a <SPAN CLASS="eln">Database</SPAN> object for which the Name property is the full path and name of the database from which it is called. This function can be useful when you need to manipulate the Data Access Objects in your library database.</P>
When you call a function in a library database, the database from which you have called the function remains the current database, even while code is running in a module in the library database. In order to refer to the Data Access Objects in the library database, you need to know the name of the <SPAN CLASS="eln">Database</SPAN> object that represents the library database.</P>
For example, suppose you have a table in a library database that lists error messages. To manipulate data in the table from code, you could use the <SPAN CLASS="eln">CodeDb</SPAN> function to determine the name of the <SPAN CLASS="eln">Database</SPAN> object that refers to the library database that contains the table.</P>
If the <SPAN CLASS="eln">CodeDb</SPAN> function is run from the current database, it returns the name of the current database, which is the same value returned by the CurrentDb function.</P>
See Also</P>
<SPAN CLASS="eln">CurrentDb</SPAN> function.</P>
Example</P>
The following example uses the <SPAN CLASS="eln">CodeDb</SPAN> function to return a <SPAN CLASS="eln">Database</SPAN> object that refers to a library database. The library database contains both a table named Errors and the code that is currently running. After the <SPAN CLASS="eln">CodeDb</SPAN> function determines this information, the <SPAN CLASS="eln">GetErrorString</SPAN> function opens a table-type recordset based on the Errors table. It then extracts an error message from a field named ErrorData based on the <SPAN CLASS="eln">Integer</SPAN> value passed to the function.</P>

<pre><code>Function GetErrorString(ByVal intError As Integer) As String
    Dim dbs As Database, rst As RecordSet

    ' Variable refers to database where code is running.
    Set dbs = CodeDb
    ' Create table-type Recordset object.
    Set rst = dbs.OpenRecordSet("Errors", dbOpenTable)
    ' Set index to primary key (ErrorID field).
    rst.Index = "PrimaryKey"
    ' Find error number passed to GetErrorString function.
    rst.Seek "=", intError
    ' Return associated error message.
    GetErrorString = rst.Fields!ErrorData.Value
    rst.Close
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateRelation Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateRelation Method</H2>Applies To</P>
<SPAN CLASS="eln">Database</SPAN> object.</P>
Description</P>
Creates a new Relation object (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Syntax</P>
<SPAN CLASS="eln">Set</SPAN> <SPAN CLASS="p">relation</SPAN><SPAN CLASS="l"> = </SPAN><SPAN CLASS="p">database</SPAN><SPAN CLASS="eln">.CreateRelation(</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">table</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">foreigntable</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">attributes</SPAN><SPAN CLASS="p">)</SPAN></P>
The <SPAN CLASS="eln">CreateRelation</SPAN> method syntax uses these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="286pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">relation</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents the <SPAN CLASS="eln">Relation</SPAN> object you want to create.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">database</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An object variable that represents the Database object for which you want to create the new <SPAN CLASS="eln">Relation</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A Variant (String subtype) that uniquely names the new <SPAN CLASS="eln">Relation</SPAN> object. See the Name property for details on valid <SPAN CLASS="eln">Relation</SPAN> names.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">table</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> (<SPAN CLASS="eln">String</SPAN> subtype) that names the <SPAN CLASS="pop">primary table</SPAN> in the relation. If the table doesn't exist before you append the <SPAN CLASS="eln">Relation</SPAN> object, a run-time error occurs.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">foreigntable</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> (<SPAN CLASS="eln">String</SPAN> subtype) that names the <SPAN CLASS="pop">foreign table</SPAN> in the relation. If the table doesn't exist before you append the <SPAN CLASS="eln">Relation</SPAN> object, a run-time error occurs.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"> <SPAN CLASS="p">attributes</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A constant or combination of constants that contains information about the relationship type. See the Attributes property for details.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
The <SPAN CLASS="eln">Relation</SPAN> object provides information to the <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN> about the relationship between fields in two TableDef or QueryDef objects. You can implement <SPAN CLASS="pop">referential integrity</SPAN> by using the <SPAN CLASS="eln">Attributes</SPAN> property.</P>
If you omit one or more of the optional parts when you use the <SPAN CLASS="eln">CreateRelation </SPAN>method, you can use an appropriate assignment statement to set or reset the corresponding property before you append the new object to a collection. After you append the object, you can't alter any of its property settings. See the individual property topics for more details.</P>
Before you can use the Append method on a <SPAN CLASS="eln">Relation</SPAN> object, you must append the appropriate Field objects to define the <SPAN CLASS="pop">primary</SPAN> and <SPAN CLASS="pop">foreign</SPAN> key relationship tables.</P>
If <SPAN CLASS="p">name</SPAN> refers to an object that is already a member of the collection or if the <SPAN CLASS="eln">Field</SPAN> object names provided in the subordinate <SPAN CLASS="eln">Fields</SPAN> collection are invalid, a run-time error occurs when you use the <SPAN CLASS="eln">Append</SPAN> method.</P>
You can't establish or maintain a relationship between a <SPAN CLASS="pop">replicated</SPAN> table and a <SPAN CLASS="pop">local</SPAN> table.</P>
To remove a <SPAN CLASS="eln">Relation</SPAN> object from the Relations collection, use the Delete method on the collection.</P>
See Also</P>
<SPAN CLASS="eln">Append</SPAN> method, <SPAN CLASS="eln">Attributes</SPAN> property, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">TableDef</SPAN> object.</P>
Example</P>
This example uses the <SPAN CLASS="eln">CreateRelation</SPAN> method to create a <SPAN CLASS="eln">Relation</SPAN> between the Employees <SPAN CLASS="eln">TableDef</SPAN> and a new <SPAN CLASS="eln">TableDef</SPAN> called Departments. This example also demonstrates how creating a new <SPAN CLASS="eln">Relation</SPAN> will also create any necessary <SPAN CLASS="eln">Indexes</SPAN> in the <SPAN CLASS="pop">foreign table</SPAN> (the DepartmentsEmployees <SPAN CLASS="eln">Index</SPAN> in the Employees table).</P>

<pre><code>Sub CreateRelationX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim tdfNew As TableDef
    Dim idxNew As Index
    Dim relNew As Relation
    Dim idxLoop As Index

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    With dbsNorthwind
        ' Add new field to Employees table.
        Set tdfEmployees = .TableDefs!Employees
        tdfEmployees.Fields.Append _
            tdfEmployees.CreateField("DeptID", dbInteger, 2)

        ' Create new Departments table.
        Set tdfNew = .CreateTableDef("Departments")

        With tdfNew
            ' Create and append Field objects to Fields
            ' collection of the new TableDef object.
            .Fields.Append .CreateField("DeptID", dbInteger, 2)
            .Fields.Append .CreateField("DeptName", dbText, 20)

            ' Create Index object for Departments table.
            Set idxNew = .CreateIndex("DeptIDIndex")
            ' Create and append Field object to Fields
            ' collection of the new Index object.
            idxNew.Fields.Append idxNew.CreateField("DeptID")
            ' The index in the primary table must be Unique in
            ' order to be part of a Relation.
            idxNew.Unique = True
            .Indexes.Append idxNew
        End With

        .TableDefs.Append tdfNew

        ' Create EmployeesDepartments Relation object, using
        ' the names of the two tables in the relation.
        Set relNew = .CreateRelation("EmployeesDepartments", _
            tdfNew.Name, tdfEmployees.Name, _
            dbRelationUpdateCascade)

        ' Create Field object for the Fields collection of the
        ' new Relation object. Set the Name and ForeignName
        ' properties based on the fields to be used for the
        ' relation.
        relNew.Fields.Append relNew.CreateField("DeptID")
        relNew.Fields!DeptID.ForeignName = "DeptID"
        .Relations.Append relNew

        ' Print report.
        Debug.Print "Properties of " &amp; relNew.Name &amp; _
            " Relation"
        Debug.Print "    Table = " &amp; relNew.Table
        Debug.Print "    ForeignTable = " &amp; _
            relNew.ForeignTable
        Debug.Print "Fields of " &amp; relNew.Name &amp; " Relation"

        With relNew.Fields!DeptID
            Debug.Print "    " &amp; .Name
            Debug.Print "        Name = " &amp; .Name
            Debug.Print "        ForeignName = " &amp; .ForeignName
        End With

        Debug.Print "Indexes in " &amp; tdfEmployees.Name &amp; _
            " TableDef"
        For Each idxLoop In tdfEmployees.Indexes
            Debug.Print "    " &amp; idxLoop.Name &amp; _
                ", Foreign = " &amp; idxLoop.Foreign
        Next idxLoop

        ' Delete new objects because this is a demonstration.
        .Relations.Delete relNew.Name
        .TableDefs.Delete tdfNew.Name
        tdfEmployees.Fields.Delete "DeptID"
        .Close
    End With

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new <SPAN CLASS="eln">Relation</SPAN> object that defines a relationship between a Categories table and a Products table. The Categories table is the primary table in the relationship, and the Products table is the foreign table. The CategoryID field is the primary key in the Categories table, and a foreign key in the Products table.</P>
To test this example in the Northwind sample database, click <SPAN CLASS="eln">Relationships</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu, and delete the relationship between the Categories table and the Products table. Close the Relationships window, saving the current configuration at the prompt. Run the following procedure. Then view the Relationships window again to see the new relationship.</P>

<pre><code>Sub NewRelation()
    Dim dbs As Database, rel As Relation, fld As Field
    
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create new Relation object and specify foreign table.
    Set rel = dbs.CreateRelation("CategoryProducts", "Categories", _
        "Products")
    ' Set attributes to enforce referential integrity.
    rel.Attributes = dbRelationUpdateCascade And dbRelationDeleteCascade
    ' Create field in Relation object.
    Set fld = rel.CreateField("CategoryID")
    ' Specify field name in foreign table.
    fld.ForeignName = "CategoryID"
    ' Append Field object to Fields collection of Relation object.
    rel.Fields.Append fld
    ' Append Relation object to Relations collection.
    dbs.Relations.Append rel
    dbs.Relations.Refresh
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

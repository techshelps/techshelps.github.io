<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Parameter Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Parameter Object</H1>Description</P>
A <SPAN CLASS="eln">Parameter</SPAN> object represents a value supplied to a query. The parameter is associated with a <SPAN CLASS="eln">QueryDef</SPAN> object created from a <SPAN CLASS="pop">parameter query</SPAN>.</P>
Remarks</P>
<SPAN CLASS="eln">Parameter</SPAN> objects allow you to change the arguments in a frequently run <SPAN CLASS="eln">QueryDef</SPAN> object without having to recompile the query.</P>
Using the properties of a <SPAN CLASS="eln">Parameter</SPAN> object, you can set a query parameter that can be changed before the query is run. You can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Name</SPAN> property to return the name of a parameter.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Value</SPAN> property to set or return the parameter values to be used in the query.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Type</SPAN> property to return the data type of the <SPAN CLASS="eln">Parameter</SPAN> object.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Direction</SPAN> property to set or return whether the parameter is an input parameter, an output parameter, or both.
</LI></UL></SPAN>In an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>, you can also:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Change the setting of the <SPAN CLASS="eln">Type</SPAN> property. Doing so will also clear the <SPAN CLASS="eln">Value</SPAN> property.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Direction</SPAN> property to set or return whether the parameter is an input parameter, an output parameter, or both.
</LI></UL></SPAN>Properties</P>
<SPAN CLASS="eln">Direction</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">Value</SPAN> property.</P>
Example</P>
This example demonstrates <SPAN CLASS="eln">Parameter</SPAN> objects and the <SPAN CLASS="eln">Parameters</SPAN> collection by creating a temporary <SPAN CLASS="eln">QueryDef</SPAN> and retrieving data based on changes made to the <SPAN CLASS="eln">QueryDef</SPAN> object's <SPAN CLASS="eln">Parameters</SPAN>. The ParametersChange procedure is required for this&nbsp;procedure to run.</P>

<pre><code>Sub ParameterX()

    Dim dbsNorthwind As Database
    Dim qdfReport As QueryDef
    Dim prmBegin As Parameter
    Dim prmEnd As Parameter
    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    ' Create temporary QueryDef object with two
    ' parameters.
    Set qdfReport = dbsNorthwind.CreateQueryDef("", _
        "PARAMETERS dteBegin DateTime, dteEnd DateTime; " &amp; _
        "SELECT EmployeeID, COUNT(OrderID) AS NumOrders " &amp; _
        "FROM Orders WHERE ShippedDate BETWEEN " &amp; _
        "[dteBegin] AND [dteEnd] GROUP BY EmployeeID " &amp; _
        "ORDER BY EmployeeID")
    Set prmBegin = qdfReport.Parameters!dteBegin
    Set prmEnd = qdfReport.Parameters!dteEnd

    ' Print report using specified parameter values.
    ParametersChange qdfReport, prmBegin, #1/1/95#, _
        prmEnd, #6/30/95#
    ParametersChange qdfReport, prmBegin, #7/1/95#, _
        prmEnd, #12/31/95#

    dbsNorthwind.Close

End Sub

Sub ParametersChange(qdfTemp As QueryDef, _
    prmFirst As Parameter, dteFirst As Date, _
    prmLast As Parameter, dteLast As Date)
    ' Report function for ParameterX.

    Dim rstTemp As Recordset
    Dim fldLoop As Field

    ' Set parameter values and open recordset from
    ' temporary QueryDef object.
    prmFirst = dteFirst
    prmLast = dteLast
    Set rstTemp = _
        qdfTemp.OpenRecordset(dbOpenForwardOnly)
    Debug.Print "Period " &amp; dteFirst &amp; " to " &amp; dteLast

    ' Enumerate recordset.
    Do While Not rstTemp.EOF

        ' Enumerate Fields collection of recordset.
        For Each fldLoop In rstTemp.Fields
            Debug.Print " - " &amp; fldLoop.Name &amp; " = " &amp; fldLoop;
        Next fldLoop

        Debug.Print
        rstTemp.MoveNext
    Loop

    rstTemp.Close

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new parameter query and supplies values for the&nbsp;parameters:</P>

<pre><code>Sub NewParameterQuery()
    Dim dbs As Database, qdf As QueryDef, rst As Recordset
    Dim prm As Parameter, strSQL As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Construct SQL string.
    strSQL = "PARAMETERS [Beginning OrderDate] DateTime, " _
        &amp; "[Ending OrderDate] DateTime; SELECT * FROM Orders " &amp; _
        "WHERE (OrderDate Between[Beginning OrderDate] " _
        &amp; "And [Ending OrderDate]);"
    ' Create new QueryDef object.
    Set qdf = dbs.CreateQueryDef("ParameterQuery", strSQL)
    ' Supply values for parameters.
    qdf.Parameters![Beginning OrderDate] = #4/1/95#
    qdf.Parameters![Ending OrderDate] = #4/30/95#
    ' Open recordset on QueryDef object.
    Set rst = qdf.OpenRecordset
    rst.MoveLast
    MsgBox "Query returned " &amp; rst.RecordCount &amp; " records."
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

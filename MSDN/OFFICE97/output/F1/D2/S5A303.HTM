<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Table-Type Recordset Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Table-Type Recordset Object</H1>Description</P>
A table-type <SPAN CLASS="eln">Recordset</SPAN> object represents a <SPAN CLASS="pop">base table</SPAN> you can use to add, change, or&nbsp;delete records from a table. Only the <SPAN CLASS="pop">current record</SPAN> is loaded into memory. A predefined <SPAN CLASS="pop">index</SPAN> determines the order of the records in the <SPAN CLASS="eln">Recordset</SPAN> object (<SPAN CLASS="pop">Microsoft Jet workspaces</SPAN> only).</P>
Remarks</P>
To create a table-type <SPAN CLASS="eln">Recordset</SPAN> object, use the OpenRecordset method on an open <SPAN CLASS="eln">Database</SPAN> object.</P>
You can create a table-type <SPAN CLASS="eln">Recordset</SPAN> object from a base table of a <SPAN CLASS="pop">Microsoft Jet database</SPAN>, but not from an <SPAN CLASS="pop">ODBC</SPAN> or <SPAN CLASS="pop">linked table</SPAN>. You can use the table-type <SPAN CLASS="eln">Recordset</SPAN> object with ISAM databases (like FoxPro, dBASE, or Paradox) when you open them directly.</P>
Unlike dynaset- or snapshot-type <SPAN CLASS="eln">Recordset</SPAN> objects, the table-type <SPAN CLASS="eln">Recordset</SPAN> object can't refer to more than one base table, and you can't create it with an <SPAN CLASS="pop">SQL statement</SPAN> that filters or sorts the data. Generally, when you access a table-type <SPAN CLASS="eln">Recordset</SPAN> object, you specify one of the predefined indexes for the table, which orders the data returned to your application. If the table doesn't have an index, the data won't necessarily be in a particular order. If necessary, your application can create an index that returns records in a specific order. To choose a specific order for your table-type <SPAN CLASS="eln">Recordset</SPAN> object, set the Index property to a valid index.</P>
Also unlike dynaset- or snapshot-type <SPAN CLASS="eln">Recordset</SPAN> objects, you don't need to explicitly populate table-type <SPAN CLASS="eln">Recordset</SPAN> objects to obtain an accurate value for the <SPAN CLASS="eln">RecordCount</SPAN> property.</P>
To maintain data integrity, table-type <SPAN CLASS="eln">Recordset</SPAN> objects are <SPAN CLASS="pop">locked</SPAN> during the <SPAN CLASS="eln">Edit</SPAN> and <SPAN CLASS="eln">Update</SPAN> methods operations so that only one user can update a particular record at a time. When the <SPAN CLASS="pop">Microsoft Jet database engine</SPAN> locks a record, it locks the entire 2K <SPAN CLASS="pop">page</SPAN> containing the record.</P>
Two kinds of locking are used with non-ODBC tables — <SPAN CLASS="pop">pessimistic</SPAN> and <SPAN CLASS="pop">optimistic</SPAN>. ODBC-accessed tables always use optimistic locking. The LockEdits property determines the locking conditions in effect during editing.</P>
Properties</P>
<SPAN CLASS="eln">BOF</SPAN>, <SPAN CLASS="eln">EOF</SPAN> properties, <SPAN CLASS="eln">Bookmark</SPAN> property, <SPAN CLASS="eln">Bookmarkable</SPAN> property, <SPAN CLASS="eln">DateCreated</SPAN>, <SPAN CLASS="eln">LastUpdated</SPAN> properties, <SPAN CLASS="eln">EditMode</SPAN> property, <SPAN CLASS="eln">Index</SPAN> property, <SPAN CLASS="eln">LastModified</SPAN> property, <SPAN CLASS="eln">LockEdits</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">NoMatch</SPAN> property, <SPAN CLASS="eln">PercentPosition</SPAN> property, <SPAN CLASS="eln">RecordCount</SPAN> property, <SPAN CLASS="eln">Restartable</SPAN> property, <SPAN CLASS="eln">Transactions</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">Updatable</SPAN> property, <SPAN CLASS="eln">ValidationRule</SPAN> property, <SPAN CLASS="eln">ValidationText</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">AddNew</SPAN> method, <SPAN CLASS="eln">Clone</SPAN> method, <SPAN CLASS="eln">Close</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Edit</SPAN> method, <SPAN CLASS="eln">GetRows</SPAN> method, <SPAN CLASS="eln">Move</SPAN> method, <SPAN CLASS="eln">MoveFirst</SPAN>, <SPAN CLASS="eln">MoveLast</SPAN>, <SPAN CLASS="eln">MoveNext</SPAN>, <SPAN CLASS="eln">MovePrevious</SPAN> methods, <SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">Seek</SPAN> method, <SPAN CLASS="eln">Update</SPAN> method.</P>
See Also</P>
Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, Forward-Only-Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Index</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Example</P>
This example opens a table-type <SPAN CLASS="eln">Recordset</SPAN>, sets its <SPAN CLASS="eln">Index</SPAN> property, and enumerates its records.</P>

<pre><code>Sub dbOpenTableX()

    Dim dbsNorthwind As Database
    Dim rstEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    ' dbOpenTable is default.
    Set rstEmployees = _
        dbsNorthwind.OpenRecordset("Employees")

    With rstEmployees
        Debug.Print "Table-type recordset: " &amp; .Name

        ' Use predefined index.
        .Index = "LastName"
        Debug.Print "    Index = " &amp; .Index

        ' Enumerate records.
        Do While Not .EOF
            Debug.Print "        " &amp; !LastName &amp; ", " &amp; _
                !FirstName
            .MoveNext
        Loop

        .Close
    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example opens a table-type <SPAN CLASS="eln">Recordset</SPAN> object, then finds a specified record:</P>

<pre><code>Sub FindEmployee()
    Dim dbs As Database, tdf As TableDef
    Dim rst As Recordset, idx As Index
    Dim fldLastName As Field, fldFirstName As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Create new index.
    Set idx = tdf.CreateIndex("FullName")
    ' Create and append index fields.
    Set fldLastName = idx.CreateField("LastName", dbText)
    Set fldFirstName = idx.CreateField("FirstName", dbText)
    idx.Fields.Append fldLastName
    idx.Fields.Append fldFirstName
    ' Append Index object.
    tdf.Indexes.Append idx
    ' Open table-type Recordset object.
    Set rst = dbs.OpenRecordset("Employees")
    ' Set current index to new index.
    rst.Index = idx.Name
    ' Specify record to find.
    rst.Seek "=", "Fuller", "Andrew"
    If rst.NoMatch Then
        Debug.Print "Seek failed."
    Else
        Debug.Print "Seek successful."
    End If
    rst.close
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

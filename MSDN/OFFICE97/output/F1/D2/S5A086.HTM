<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Control Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Control Object</H2>Description</P>
The <SPAN CLASS="eln">Control</SPAN> object represents a <SPAN CLASS="pop">control</SPAN> on a <SPAN CLASS="pop">form</SPAN>, <SPAN CLASS="pop">report</SPAN>, or section, within another control, or attached to another control. The following diagram shows the <SPAN CLASS="eln">Control</SPAN> object in relation to a Form or Report object.</P>
Remarks</P>
All controls on a form or report belong to the Controls collection for that <SPAN CLASS="eln">Form</SPAN> or <SPAN CLASS="eln">Report</SPAN> object. Controls within a particular section belong to the <SPAN CLASS="eln">Controls</SPAN> collection for that section. Controls within a <SPAN CLASS="pop">tab control</SPAN> or <SPAN CLASS="pop">option group</SPAN> control belong to the <SPAN CLASS="eln">Controls</SPAN> collection for that control. A <SPAN CLASS="pop">label</SPAN> control that is attached to another control belongs to the <SPAN CLASS="eln">Controls</SPAN> collection for that control.</P>
When you refer to an individual <SPAN CLASS="eln">Control</SPAN> object in the <SPAN CLASS="eln">Controls</SPAN> collection, you can refer to the <SPAN CLASS="eln">Controls</SPAN> collection either implicitly or explicitly.</P>

<pre><code>' Implicitly refer to NewData control in Controls collection.
Me!NewData</code></pre>

<pre><code>' Use if control name contains space.
Me![New Data]</code></pre>

<pre><code>' Performance slightly slower.
Me("NewData")</code></pre>

<pre><code>' Refer to a control by its index in the controls collection.
Me(0)</code></pre>

<pre><code>' Refer to a NewData control by using the subform Controls collection.
Me.ctlSubForm.Controls!NewData</code></pre>

<pre><code>' Explicitly refer to the NewData control in the Controls collection.
Me.Controls!NewData</code></pre>

<pre><code>Me.Controls("NewData")</code></pre>

<pre><code>Me.Controls(0)</code></pre>
<SPAN CLASS="nh">Note</SPAN>   You can use the <SPAN CLASS="eln">Me</SPAN> keyword to represent a <SPAN CLASS="eln">Form</SPAN> or <SPAN CLASS="eln">Report</SPAN> object within code only if you're referring to the form or report from code within the <SPAN CLASS="pop">class module</SPAN>. If you're referring to a form or report from a <SPAN CLASS="pop">standard module</SPAN> or a different form's or report's module, you must use the full reference to the form or report.</P>
Each <SPAN CLASS="eln">Control</SPAN> object is denoted by a particular <SPAN CLASS="pop">intrinsic constant</SPAN>. For example, the intrinsic constant <SPAN CLASS="eln">acTextBox</SPAN> is associated with a <SPAN CLASS="pop">text box</SPAN> control, and <SPAN CLASS="eln">acCommandButton</SPAN> is associated with a <SPAN CLASS="pop">command button</SPAN>. The constants for the various Microsoft Access controls are set forth in the control's ControlType property.</P>
To determine the type of an existing control, you can use the <SPAN CLASS="eln">ControlType</SPAN> property. However, you don't need to know the specific type of a control in order to use it in code. You can simply represent it with a variable of data type <SPAN CLASS="eln">Control</SPAN>.</P>
If you do know the data type of the control to which you are referring, and the control is a built-in Microsoft Access control, you should represent it with a variable of a specific type. For example, if you know that a particular control is a text box, declare a variable of type <SPAN CLASS="eln">TextBox</SPAN> to represent it, as shown in the following code.</P>

<pre><code>Dim txt As TextBox
Set txt = Forms!Employees!LastName</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;If a control is an <SPAN CLASS="pop">ActiveX control</SPAN>, then you must declare a variable of type <SPAN CLASS="eln">Control</SPAN> to represent it; you cannot use a specific type. If you're not certain what type of control a variable will point to, declare the variable as type <SPAN CLASS="eln">Control</SPAN>.</P>
The option group control can contain other controls within its <SPAN CLASS="eln">Controls</SPAN> collection, including <SPAN CLASS="pop">option button</SPAN>, <SPAN CLASS="pop">check box</SPAN>, <SPAN CLASS="pop">toggle button</SPAN>, and label controls.</P>
The tab control contains a Pages collection, which is a special type of <SPAN CLASS="eln">Controls</SPAN> collection. The <SPAN CLASS="eln">Pages</SPAN> collection contains Page objects, which are controls. Each <SPAN CLASS="eln">Page</SPAN> object in turn contains a <SPAN CLASS="eln">Controls</SPAN> collection, which contains all of the controls on that page.</P>
Other <SPAN CLASS="eln">Control</SPAN> objects have a <SPAN CLASS="eln">Controls</SPAN> collection that can contain an attached label. These controls include the text box, option group, option button, toggle button, check box, <SPAN CLASS="pop">combo box</SPAN>, <SPAN CLASS="pop">list box</SPAN>, <SPAN CLASS="pop">command button</SPAN>, <SPAN CLASS="pop">bound object frame</SPAN>, and <SPAN CLASS="pop">unbound object frame</SPAN> controls.</P>
Properties</P>
<SPAN CLASS="eln">Application</SPAN> property, <SPAN CLASS="eln">Column</SPAN> property, <B>Form</B>, <SPAN CLASS="eln">Report</SPAN> properties, <SPAN CLASS="eln">Hyperlink</SPAN> property, <SPAN CLASS="eln">ItemData</SPAN> property, <SPAN CLASS="eln">Object</SPAN> property, <SPAN CLASS="eln">ObjectVerbs</SPAN> property, <SPAN CLASS="eln">OldValue</SPAN> property, <B>Page</B>, <SPAN CLASS="eln">Pages</SPAN> properties, <SPAN CLASS="eln">Parent</SPAN> property, <SPAN CLASS="eln">Selected</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Dropdown</SPAN> method, <SPAN CLASS="eln">Requery</SPAN> method (<B>Control</B> or <B>Form</B> object), <SPAN CLASS="eln">SetFocus</SPAN> method, <SPAN CLASS="eln">SizeToFit</SPAN> method, <SPAN CLASS="eln">Undo</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">Controls</SPAN> collection, <B>CreateControl</B>, <SPAN CLASS="eln">CreateReportControl</SPAN> functions, <SPAN CLASS="eln">Form</SPAN> object, <SPAN CLASS="eln">Report</SPAN> object.</P>
Example</P>
The following example enumerates all the controls in the <SPAN CLASS="eln">Controls</SPAN> collection of a form. The procedure is called from a form module and the <SPAN CLASS="eln">Me</SPAN> keyword is used to pass the <SPAN CLASS="eln">Form</SPAN> object to the procedure. The procedure sets certain properties if the control is a text box.</P>

<pre><code>' Call SetTextBoxProperties procedure.
SetTextBoxProperties Me

Sub SetTextBoxProperties(frm As Form)
    Dim ctl As Control

    ' Enumerate Controls collection.
    For Each ctl In frm.Controls
        ' Check to see if control is text box.
        If ctl.ControlType = acTextBox Then
            ' Set control properties.
            With ctl
                .SetFocus
                .Enabled = True
                .Height = 400
                .SpecialEffect = 0
            End With
        End If
    Next ctl
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

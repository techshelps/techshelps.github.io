<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>SQL Property</H1>Applies To</P>
<SPAN CLASS="eln">QueryDef</SPAN> object.</P>
Description</P>
Sets or returns the <SPAN CLASS="pop">SQL statement</SPAN> that defines the query executed by a QueryDef object.</P>
Settings and Return Values</P>
The setting or return value is a <SPAN CLASS="eln">String</SPAN><SPAN CLASS="pop"> </SPAN>that contains an SQL statement.</P>
Remarks</P>
The <SPAN CLASS="eln">SQL</SPAN> property contains the SQL statement that determines how records are selected, grouped, and ordered when you execute the query. You can use the query to select records to include in a <SPAN CLASS="eln">Recordset</SPAN> object. You can also define action queries to modify data without returning records.</P>
The SQL syntax used in a query must conform to the SQL dialect of the query engine, which is determined by the type of workspace. In a <SPAN CLASS="pop">Microsoft Jet workspace</SPAN>, use the Microsoft Jet SQL dialect, unless you create an SQL pass-through query, in which case you should use the dialect of the server. In an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>, use the SQL dialect of the server.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can send DAO queries to a variety of different database servers with ODBCDirect, and&nbsp;different servers will recognize slightly different dialects of SQL. Therefore, context-sensitive Help&nbsp;is no longer provided for Microsoft Jet SQL, although online Help for Microsoft Jet SQL is still&nbsp;included through the Help menu. Be sure to check the appropriate reference documentation for the SQL dialect of your database server when using either ODBCDirect connections or pass-through queries in Microsoft Jet – connected client/server applications.</P>
If the SQL statement includes <SPAN CLASS="pop">parameters</SPAN> for the query, you must set these before execution. Until you reset the parameters, the same parameter values are applied each time you execute the query.</P>
In an ODBCDirect workspace, you can also use the <B>SQL</B> property to execute a prepared statement on the server. For example, setting the <B>SQL</B> property to the following string will execute a prepared statement named "GetData" with one parameter on a Microsoft SQL Server back-end.</P>

<pre><code>"{call GetData (?)}"</code></pre>
In a Microsoft Jet workspace, using a <SPAN CLASS="eln">QueryDef</SPAN> object is the preferred way to perform SQL pass-through operations on <SPAN CLASS="pop">Microsoft Jet-connected ODBC data sources</SPAN>. By setting the <SPAN CLASS="eln">QueryDef</SPAN> object's Connect property to an <SPAN CLASS="pop">ODBC data source</SPAN>, you can use non-Microsoft-Jet-database SQL in the query to be passed to the external server. For example, you can use TRANSACT SQL statements (with Microsoft SQL Server or Sybase SQL Server databases), which the Microsoft Jet database engine would otherwise not process.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;If you set the property to a string concatenated with a non-integer value, and the system parameters specify a non-U.S. decimal character such as a comma (for example, <SPAN CLASS="cte">strSQL = "PRICE &gt; " &amp; lngPrice</SPAN>, and <SPAN CLASS="cte">lngPrice = 125,50</SPAN>), an error will result when you try to execute the <SPAN CLASS="eln">QueryDef</SPAN> object in a Microsoft Jet database. This is because during concatenation, the number will be converted to a string using your system's default decimal character, and Microsoft Jet SQL only accepts U.S. decimal characters.</P>
See Also</P>
<SPAN CLASS="eln">CreateQueryDef</SPAN> method, <SPAN CLASS="eln">Filter</SPAN> property, <SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">Parameter</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Sort</SPAN> property.</P>
Example</P>
This example demonstrates the <SPAN CLASS="eln">SQL</SPAN> property by setting and changing the <SPAN CLASS="eln">SQL</SPAN> property of a temporary <SPAN CLASS="eln">QueryDef</SPAN> and comparing the results. The SQLOutput function is required for this procedure to run.</P>

<pre><code>Sub SQLX()

    Dim dbsNorthwind As Database
    Dim qdfTemp As QueryDef
    Dim rstEmployees As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set qdfTemp = dbsNorthwind.CreateQueryDef("")

    ' Open Recordset using temporary QueryDef object and
    ' print report.
    SQLOutput "SELECT * FROM Employees " &amp; _
        "WHERE Country = 'USA' " &amp; _
        "ORDER BY LastName", qdfTemp

    ' Open Recordset using temporary QueryDef object and
    ' print report.
    SQLOutput "SELECT * FROM Employees " &amp; _
        "WHERE Country = 'UK' " &amp; _
        "ORDER BY LastName", qdfTemp

    dbsNorthwind.Close

End Sub

Function SQLOutput(strSQL As String, qdfTemp As QueryDef)

    Dim rstEmployees As Recordset

    ' Set SQL property of temporary QueryDef object and open
    ' a Recordset.
    qdfTemp.SQL = strSQL
    Set rstEmployees = qdfTemp.OpenRecordset

    Debug.Print strSQL

    With rstEmployees
        ' Enumerate Recordset.
        Do While Not .EOF
            Debug.Print "    " &amp; !FirstName &amp; " " &amp; _
                !LastName &amp; ", " &amp; !Country
            .MoveNext
        Loop
        .Close
    End With

End Function</code></pre>
Example (Microsoft Access)</P>
The following example creates a parameter query based on an Orders table. The query selects all orders for which the order date falls between the dates entered by the user.</P>

<pre><code>Sub RangeOfOrders()
    Dim dbs As Database, qdf As QueryDef, rst As Recordset

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create new query.
    Set qdf = dbs.CreateQueryDef("RangeOfOrders")
    ' Construct SQL statement including parameters.
    qdf.SQL = "PARAMETERS [Start] DATETIME, [End] DATETIME; " &amp; _
        "SELECT * FROM Orders WHERE OrderDate BETWEEN " _
        &amp; "[Start] AND [End];"
    qdf.Parameters("Start") = #1/1/96#
    qdf.Parameters("End") = #1/31/96#
    ' Create snapshot-type Recordset object from QueryDef object.
    Set rst = qdf.OpenRecordset(dbOpenSnapshot)
    ' Perform operations with recordset.
        .
        .
        .
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
Example (Microsoft Excel)</P>
See the <SPAN CLASS="eln">CreateQueryDef</SPAN> method example (Microsoft Excel).</P>
<HR CLASS="rr"></FONT></BODY>
</HTML>

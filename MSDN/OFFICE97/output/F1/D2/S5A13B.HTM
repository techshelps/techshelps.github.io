<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Module Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Module Object</H2>Description</P>
A <SPAN CLASS="eln">Module</SPAN> object refers to a <SPAN CLASS="pop">standard module</SPAN> or a <SPAN CLASS="pop">class module</SPAN>.</P>
Remarks</P>
Microsoft Access includes class modules which are not associated with any object, and <SPAN CLASS="pop">form modules</SPAN> and <SPAN CLASS="pop">report modules</SPAN>, which are associated with a form or report.</P>
To determine whether a <SPAN CLASS="eln">Module</SPAN> object represents a standard module or a class module from code, check the <SPAN CLASS="eln">Module</SPAN> object's Type property.</P>
The Modules collection contains all open <SPAN CLASS="eln">Module</SPAN> objects, regardless of their type. Modules in the <SPAN CLASS="eln">Modules</SPAN> collection can be compiled or uncompiled.</P>
To return a reference to a particular standard or class <SPAN CLASS="eln">Module</SPAN> object in the <SPAN CLASS="eln">Modules</SPAN> collection, use any of the following syntax forms.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="238pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Syntax</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">Modules!</SPAN><SPAN CLASS="p">modulename</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The <SPAN CLASS="p">modulename</SPAN> argument is the name of the <SPAN CLASS="eln">Module</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">Modules("</SPAN><SPAN CLASS="p">modulename</SPAN><SPAN CLASS="l">")</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The <SPAN CLASS="p">modulename</SPAN> argument is the name of the <SPAN CLASS="eln">Module</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="l">Modules(</SPAN><SPAN CLASS="p">index</SPAN><SPAN CLASS="l">)</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The <SPAN CLASS="p">index</SPAN> argument is the numeric position of the object within the collection.</P></TD></TR></TBODY></TABLE>
<BR></P>The following example returns a reference to a standard <SPAN CLASS="eln">Module</SPAN> object and assigns it to an object variable:</P>

<pre><code>Dim mdl As Module
Set mdl = Modules![Utility Functions]</code></pre>
Note that the brackets enclosing the name of the <SPAN CLASS="eln">Module</SPAN> object are necessary only if the name of the <SPAN CLASS="eln">Module</SPAN> includes spaces.</P>
The next example returns a reference to a form <SPAN CLASS="eln">Module</SPAN> object and assigns it to an object variable:</P>

<pre><code>Dim mdl As Module
Set mdl = Modules!Form_Employees</code></pre>
To refer to a specific form or report module, you can also use the Form or Report object's Module property:</P>
<SPAN CLASS="l">Forms!</SPAN><SPAN CLASS="p">formname</SPAN><SPAN CLASS="l">.Module</SPAN></P>
The following example also returns a reference to the <SPAN CLASS="eln">Module</SPAN> object associated with an Employees form and assigns it to an object variable:</P>

<pre><code>Dim mdl As Module
Set mdl = Forms!Employees.Module</code></pre>
Once you've returned a reference to a <SPAN CLASS="eln">Module</SPAN> object, you can set or read its properties and apply its methods.</P>
Properties</P>
<SPAN CLASS="eln">Application</SPAN> property, <SPAN CLASS="eln">CountOfDeclarationLines</SPAN> property, <SPAN CLASS="eln">CountOfLines</SPAN> property, <SPAN CLASS="eln">Lines</SPAN> property, <SPAN CLASS="eln">Parent</SPAN> property, <SPAN CLASS="eln">ProcBodyLine</SPAN> property, <SPAN CLASS="eln">ProcCountLines</SPAN> property, <SPAN CLASS="eln">ProcOfLine</SPAN> property, <SPAN CLASS="eln">ProcStartLine</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">AddFromFile</SPAN> method (<B>Module</B> object), <SPAN CLASS="eln">AddFromString</SPAN> method, <SPAN CLASS="eln">CreateEventProc</SPAN> method, <SPAN CLASS="eln">DeleteLines</SPAN> method, <SPAN CLASS="eln">Find</SPAN> method, <SPAN CLASS="eln">InsertLines</SPAN> method, <SPAN CLASS="eln">InsertText</SPAN> method, <SPAN CLASS="eln">ReplaceLine</SPAN> method.</P>
Events</P>
Initialize event, Terminate event.</P>
See Also</P>
<SPAN CLASS="eln">Modules</SPAN> collection.</P>
Example</P>
The following example returns a reference to a <SPAN CLASS="eln">Module</SPAN> object in the <SPAN CLASS="eln">Modules</SPAN> collection and prints the number of lines of code in the module:</P>

<pre><code>Function LinesInModule(strModuleName As String) As Long
    Dim mdl As Module

    On Error GoTo Error_LinesInModule
    ' Open module.
    DoCmd.OpenModule strModuleName
    ' Return reference to Module object.
    Set mdl = Modules(strModuleName)
    ' Return number of lines in module.
    LinesInModule = mdl.CountOfLines

Exit_LinesInModule:
    Exit Function

Error_LinesInModule:
    MsgBox Err &amp; ": " &amp; Err.Description
    ' If function fails, return -1.
    LinesInModule = -1
    Resume Exit_LinesInModule
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>AllowBreakIntoCode Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>AllowBreakIntoCode Property</H2>Applies To</P>
<SPAN CLASS="eln">Database</SPAN> object.</P>
Description</P>
You can use the <SPAN CLASS="eln">AllowBreakIntoCode</SPAN> property to specify whether or not the user can view Visual Basic code after a <SPAN CLASS="pop">run-time error</SPAN> occurs in a <SPAN CLASS="pop">module</SPAN>.</P>
Setting</P>
The <SPAN CLASS="eln">AllowBreakIntoCode</SPAN> property uses the following settings.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="287pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">True</SPAN> (–1)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Enable the <SPAN CLASS="eln">Debug</SPAN> button on the dialog box that appears when a run-time error occurs.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">False</SPAN> (0)</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Disable the <SPAN CLASS="eln">Debug</SPAN> button.</P></TD></TR></TBODY></TABLE>
<BR></P>The easiest way to set this property is by using the <SPAN CLASS="eln">Allow Viewing Code After Error </SPAN>option in the <SPAN CLASS="eln">Advanced</SPAN> section of the <SPAN CLASS="eln">Startup</SPAN> dialog box, available by clicking <SPAN CLASS="eln">Startup</SPAN> on the <SPAN CLASS="eln">Tools</SPAN> menu. You can also set this property by using a <SPAN CLASS="jump">macro</SPAN> or <SPAN CLASS="jump">Visual Basic</SPAN>.</P>
To set the <SPAN CLASS="eln">AllowBreakIntoCode</SPAN> property by using a macro or Visual Basic, you must first either set the property in the <SPAN CLASS="eln">Startup</SPAN> dialog box once or create the property by using the CreateProperty method and append it to the Properties collection of the Database object.</P>
Remarks</P>
You should make sure the <SPAN CLASS="eln">AllowBreakIntoCode</SPAN> property is set to <SPAN CLASS="eln">True</SPAN> when debugging an application.</P>
If the AllowSpecialKeys property is set to <SPAN CLASS="eln">True</SPAN>, you can still press <SPAN CLASS="kn">CTRL+BREAK</SPAN> to pause execution of Visual Basic code, even if the <SPAN CLASS="eln">AllowBreakIntoCode</SPAN> property is set to <SPAN CLASS="eln">False</SPAN>.</P>
This property's setting doesn't take effect until the next time the application database opens.</P>
See Also</P>
<SPAN CLASS="eln">AllowSpecialKeys</SPAN> property, <SPAN CLASS="eln">CreateProperty</SPAN> method ("DAO Language Reference"), <SPAN CLASS="eln">Properties</SPAN> collection ("DAO Language Reference").</P>
Example</P>
The following example shows a procedure named SetStartupProperties that passes the name of the property to be set, its data type, and its desired setting. The general purpose procedure ChangeProperty attempts to set the startup property and, if the property isn't found, uses the <SPAN CLASS="eln">CreateProperty</SPAN> method to append it to the <SPAN CLASS="eln">Properties</SPAN> collection of the <SPAN CLASS="eln">Database</SPAN> object. This is necessary because these properties don't appear in the <SPAN CLASS="eln">Properties</SPAN> collection until they've been set or changed at least once.</P>

<pre><code>Sub SetStartupProperties()
    ChangeProperty "StartupForm", dbText, "Customers"
    ChangeProperty "StartupShowDBWindow", dbBoolean, False
    ChangeProperty "StartupShowStatusBar", dbBoolean, False
    ChangeProperty "AllowBuiltinToolbars", dbBoolean, False
    ChangeProperty "AllowFullMenus", dbBoolean, True
    ChangeProperty "AllowBreakIntoCode", dbBoolean, False
    ChangeProperty "AllowSpecialKeys", dbBoolean, True
    ChangeProperty "AllowBypassKey", dbBoolean, True
End Sub

Function ChangeProperty(strPropName As String, varPropType As Variant, _
        varPropValue As Variant) As Integer
    Dim dbs As Database, prp As Property
    Const conPropNotFoundError = 3270

    Set dbs = CurrentDb
    On Error GoTo Change_Err
    dbs.Properties(strPropName) = varPropValue
    ChangeProperty = True

Change_Bye:
    Exit Function

Change_Err:
    If Err = conPropNotFoundError Then            ' Property not found.
        Set prp = dbs.CreateProperty(strPropName, _
            varPropType, varPropValue)
        dbs.Properties.Append prp
        Resume Next
    Else
        ' Unknown error.
        ChangeProperty = False
        Resume Change_Bye
    End If
End Function</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateField Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateField Method</H2>Applies To</P>
<SPAN CLASS="eln">Index</SPAN> object, <SPAN CLASS="eln">Relation</SPAN> object, <SPAN CLASS="eln">TableDef</SPAN> object.</P>
Description</P>
Creates a new <SPAN CLASS="eln">Field</SPAN> object (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Syntax</P>
<SPAN CLASS="eln">Set</SPAN> <SPAN CLASS="p">field</SPAN><SPAN CLASS="l"> = </SPAN><SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.CreateField(</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">type</SPAN><SPAN CLASS="l">,</SPAN> <SPAN CLASS="p">size</SPAN><SPAN CLASS="eln">)</SPAN></P>
The <SPAN CLASS="eln">CreateField</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="56pt" VALIGN="TOP"><COL WIDTH="304pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">field</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents the <SPAN CLASS="eln">Field</SPAN> object you want to create.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An object variable that represents the Index, Relation, or TableDef object for which you want to create the new <SPAN CLASS="eln">Field</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A Variant (<SPAN CLASS="eln">String</SPAN> subtype) that uniquely names the new <SPAN CLASS="eln">Field</SPAN> object. See the <SPAN CLASS="eln">Name</SPAN> property for details on valid <SPAN CLASS="eln">Field</SPAN> names.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A constant that determines the data type of the new <SPAN CLASS="eln">Field</SPAN> object. See the <SPAN CLASS="eln">Type</SPAN> property for valid data types.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">size</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> (Integer subtype) that indicates the maximum size, in bytes, of a <SPAN CLASS="eln">Field</SPAN> object that contains text. See the <SPAN CLASS="eln">Size</SPAN> property for valid <SPAN CLASS="p">size</SPAN> values. This argument is ignored for numeric and fixed-width fields.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You can use the <SPAN CLASS="eln">CreateField</SPAN> method to create a new field, as well as specify the name, data type, and size of the field. If you omit one or more of the optional parts when you use <SPAN CLASS="eln">CreateField</SPAN>, you can use an appropriate assignment statement to set or reset the corresponding property before you append the new object to a collection. After you append the new object, you can alter some but not all of its property settings. See the individual property topics for more details.</P>
The <SPAN CLASS="p">type</SPAN> and <SPAN CLASS="p">size</SPAN> arguments apply only to <SPAN CLASS="eln">Field</SPAN> objects in a <SPAN CLASS="eln">TableDef</SPAN> object. These arguments are ignored when a <SPAN CLASS="eln">Field</SPAN> object is associated with an <SPAN CLASS="eln">Index</SPAN> or <SPAN CLASS="eln">Relation</SPAN> object.</P>
If <SPAN CLASS="p">name</SPAN> refers to an object that is already a member of the collection, a run-time error occurs when you use the <SPAN CLASS="eln">Append</SPAN> method.</P>
To remove a <SPAN CLASS="eln">Field</SPAN> object from a <B>Fields</B> collection, use the <SPAN CLASS="eln">Delete</SPAN> method on the collection. You can't delete a <SPAN CLASS="eln">Field</SPAN> object from a <SPAN CLASS="eln">TableDef </SPAN>object's<SPAN CLASS="eln"> Fields </SPAN>collection after you create an <SPAN CLASS="pop">index</SPAN> that references the field.</P>
See Also</P>
ALTER TABLE statement, <SPAN CLASS="eln">Append</SPAN> method, CREATE TABLE statement, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Field</SPAN> object, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Size</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property.</P>
Example</P>
This example uses the <SPAN CLASS="eln">CreateField</SPAN> method to create three <SPAN CLASS="eln">Fields</SPAN> for a new <SPAN CLASS="eln">TableDef</SPAN>. It then displays the properties of those <SPAN CLASS="eln">Field</SPAN> objects that are automatically set by the <SPAN CLASS="eln">CreateField</SPAN> method. (Properties whose values are empty at the time of <SPAN CLASS="eln">Field</SPAN> creation are not shown.)</P>

<pre><code>Sub CreateFieldX()

    Dim dbsNorthwind As Database
    Dim tdfNew As TableDef
    Dim fldLoop As Field
    Dim prpLoop As Property

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    Set tdfNew = dbsNorthwind.CreateTableDef("NewTableDef")

    ' Create and append new Field objects for the new
    ' TableDef object.
    With tdfNew
        ' The CreateField method will set a default Size
        ' for a new Field object if one is not specified.
        .Fields.Append .CreateField("TextField", dbText)
        .Fields.Append .CreateField("IntegerField", dbInteger)
        .Fields.Append .CreateField("DateField", dbDate)
    End With

    dbsNorthwind.TableDefs.Append tdfNew

    Debug.Print "Properties of new Fields in " &amp; tdfNew.Name

    ' Enumerate Fields collection to show the properties of
    ' the new Field objects.
    For Each fldLoop In tdfNew.Fields
        Debug.Print "    " &amp; fldLoop.Name

        For Each prpLoop In fldLoop.Properties
            ' Properties that are invalid in the context of
            ' TableDefs will trigger an error if an attempt
            ' is made to read their values.
            On Error Resume Next
            Debug.Print "        " &amp; prpLoop.Name &amp; " - " &amp; _
                IIf(prpLoop = "", "[empty]", prpLoop)
            On Error GoTo 0
        Next prpLoop

    Next fldLoop

    ' Delete new TableDef because this is a demonstration.
    dbsNorthwind.TableDefs.Delete tdfNew.Name
    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new table with two new fields. One of the fields is an AutoNumber field. The procedure also makes this field the primary key in the table.</P>

<pre><code>Sub NewTable()
    Dim dbs As Database
    Dim tdf As TableDef, fld1 As Field, fld2 As Field
    Dim idx As Index, fldIndex As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Create new table with two fields.
    Set tdf = dbs.CreateTableDef("Contacts")
    Set fld1 = tdf.CreateField("ContactID", dbLong)
    fld1.Attributes = fld1.Attributes + dbAutoIncrField
    Set fld2 = tdf.CreateField("ContactName", dbText, 50)
    ' Append fields.
    tdf.Fields.Append fld1
    tdf.Fields.Append fld2
    ' Create primary key index.
    Set idx = tdf.CreateIndex("PrimaryKey")
    Set fldIndex = idx.CreateField("ContactID", dbLong)
    ' Append index fields.
    idx.Fields.Append fldIndex
    ' Set Primary property.
    idx.Primary = True
    ' Append index.
    tdf.Indexes.Append idx
    ' Append TableDef object.
    dbs.TableDefs.Append tdf
    dbs.TableDefs.Refresh
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

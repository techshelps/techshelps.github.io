<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Primary Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Primary Property</H1>Applies To</P>
<SPAN CLASS="eln">Index</SPAN> object.</P>
Description</P>
Sets or returns a value that indicates whether an Index object represents a primary index for a table (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Settings and Return Values</P>
The setting or return value is a Boolean that is <SPAN CLASS="eln">True</SPAN> if the <SPAN CLASS="eln">Index</SPAN> object represents a primary index.</P>
The <SPAN CLASS="eln">Primary</SPAN> property setting is read/write for a new <SPAN CLASS="eln">Index</SPAN> object not yet appended to a collection and read-only for an existing <SPAN CLASS="eln">Index</SPAN> object in an Indexes collection. If the <SPAN CLASS="eln">Index</SPAN> object is appended to the TableDef object but the <SPAN CLASS="eln">TableDef</SPAN> object isn't appended to the TableDefs collection, the <SPAN CLASS="eln">Index</SPAN> property is read/write.</P>
Remarks</P>
A primary index consists of one or more fields that uniquely identify all records in a&nbsp;table in a predefined order. Because the index field must be unique, the <SPAN CLASS="eln">Unique</SPAN> property of the <SPAN CLASS="eln">Index</SPAN> object is set to <SPAN CLASS="eln">True</SPAN>. If the primary index consists of more than one field, each field can contain duplicate values, but each combination of values from all the indexed fields must be unique. A primary index consists of a key for the table and usually contains the same fields as the <SPAN CLASS="pop">primary key</SPAN>.</P>
<SPAN CLASS="nh">Note</SPAN>   You don't have to create indexes for tables, but in large, unindexed tables, accessing a specific record can take a long time. The <SPAN CLASS="eln">Attributes</SPAN> property of each Field object in the <SPAN CLASS="eln">Index</SPAN> object determines the order of records and consequently determines the access techniques to use for that index. When you create a new table in your database, it's a good idea to create an index on one or more fields that uniquely identify each record, and then set the <SPAN CLASS="eln">Primary</SPAN> property of the <SPAN CLASS="eln">Index</SPAN> object to <SPAN CLASS="eln">True</SPAN>.</P>
When you set a primary key for a table, the primary key is automatically defined as the primary index for the table.</P>
See Also</P>
<SPAN CLASS="eln">Attributes</SPAN> property, <SPAN CLASS="eln">Clustered</SPAN> property, <SPAN CLASS="eln">Unique</SPAN> property.</P>
Specifics (Microsoft&nbsp;Access)</P>
In Microsoft&nbsp;Access, when you set a <SPAN CLASS="pop">primary key</SPAN> for a table in <SPAN CLASS="pop">table Design view</SPAN>, the primary key is automatically defined as the primary <SPAN CLASS="pop">index</SPAN>.</P>
Example</P>
This example uses the <SPAN CLASS="eln">Primary</SPAN> property to designate a new <SPAN CLASS="eln">Index</SPAN> in a new <SPAN CLASS="eln">TableDef</SPAN> as the primary <SPAN CLASS="eln">Index</SPAN> for that table. Note that setting the <SPAN CLASS="eln">Primary</SPAN> property to <SPAN CLASS="eln">True</SPAN> automatically sets <SPAN CLASS="eln">Unique</SPAN> and <SPAN CLASS="eln">Required</SPAN> properties to <SPAN CLASS="eln">True</SPAN> as well.</P>

<pre><code>Sub PrimaryX()

    Dim dbsNorthwind As Database
    Dim tdfNew As TableDef
    Dim idxNew As Index
    Dim idxLoop As Index
    Dim fldLoop As Field
    Dim prpLoop As Property

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    ' Create and append a new TableDef object to the
    ' TableDefs collection of the Northwind database.
    Set tdfNew = dbsNorthwind.CreateTableDef("NewTable")
    tdfNew.Fields.Append tdfNew.CreateField("NumField", _
        dbLong, 20)
    tdfNew.Fields.Append tdfNew.CreateField("TextField", _
        dbText, 20)
    dbsNorthwind.TableDefs.Append tdfNew

    With tdfNew
        ' Create and append a new Index object to the
        ' Indexes collection of the new TableDef object.
        Set idxNew = .CreateIndex("NumIndex")
        idxNew.Fields.Append idxNew.CreateField("NumField")
        idxNew.Primary = True
        .Indexes.Append idxNew
        Set idxNew = .CreateIndex("TextIndex")
        idxNew.Fields.Append idxNew.CreateField("TextField")
        .Indexes.Append idxNew

        Debug.Print .Indexes.Count &amp; " Indexes in " &amp; _
            .Name &amp; " TableDef"

        ' Enumerate Indexes collection.
        For Each idxLoop In .Indexes

            With idxLoop
                Debug.Print "    " &amp; .Name

                ' Enumerate Fields collection of each Index
                ' object.
                Debug.Print "        Fields"
                For Each fldLoop In .Fields
                    Debug.Print "            " &amp; fldLoop.Name
                Next fldLoop

                ' Enumerate Properties collection of each
                ' Index object.
                Debug.Print "        Properties"
                For Each prpLoop In .Properties
                    Debug.Print "            " &amp; prpLoop.Name &amp; _
                        " = " &amp; IIf(prpLoop = "", "[empty]", _
                        prpLoop)
                Next prpLoop
            End With

        Next idxLoop

    End With

    dbsNorthwind.TableDefs.Delete tdfNew.Name
    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example checks the <SPAN CLASS="eln">Primary</SPAN> property of each index on a Products table, and prints the fields making up the primary key:</P>

<pre><code>Sub SetIndex()
    Dim dbs As Database, tdf As TableDef, fld As Field
    Dim idx As Index

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Products table.
    Set tdf = dbs.TableDefs!Products
    ' Enumerate through Indexes collection of TableDef object.
    For Each idx In tdf.Indexes
        ' Check Primary property of Recordset object.
        If idx.Primary Then
            For Each fld In idx.Fields
                Debug.Print fld.Name
            Next fld
        End If
    Next idx
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

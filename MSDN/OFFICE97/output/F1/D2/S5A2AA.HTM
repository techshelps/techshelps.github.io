<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filter Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Filter Property</H1>Applies To</P>
Dynaset-Type <SPAN CLASS="eln">Recordset</SPAN> object, Forward-Only – Type <SPAN CLASS="eln">Recordset</SPAN> object, <SPAN CLASS="eln">Recordset</SPAN> object, Snapshot-Type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
Description</P>
Sets or returns a value that determines the records included in a subsequently opened Recordset object (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Settings and Return Values</P>
The setting or return value is a <SPAN CLASS="eln">String</SPAN> data type that contains the WHERE clause of an <SPAN CLASS="pop">SQL statement</SPAN> without the reserved word WHERE.</P>
Remarks</P>
Use the <SPAN CLASS="eln">Filter</SPAN> property to apply a <SPAN CLASS="pop">filter</SPAN> to a dynaset-, snapshot-, or forward-only – type <SPAN CLASS="eln">Recordset</SPAN> object.</P>
You can use the <SPAN CLASS="eln">Filter</SPAN> property to restrict the records returned from an existing object when a new <SPAN CLASS="eln">Recordset</SPAN> object is opened based on an existing <SPAN CLASS="eln">Recordset</SPAN> object.</P>
In many cases, it's faster to open a new <SPAN CLASS="eln">Recordset</SPAN> object by using an SQL statement that includes a WHERE clause.</P>
Use the U.S. date format (month-day-year) when you filter fields containing dates, even if you're not using the U.S. version of the <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN> (in which case you must assemble any dates by concatenating strings, for example, <SPAN CLASS="cte">strMonth &amp; "-" &amp; strDay &amp; "-" &amp; strYear</SPAN>). Otherwise, the data may not be filtered as you expect.</P>
If you set the property to a string concatenated with a non-integer value, and the system parameters specify a non-U.S. decimal character such as a comma (for example, <SPAN CLASS="cte">strFilter = "PRICE &gt; " &amp; lngPrice</SPAN>, and <SPAN CLASS="cte">lngPrice = 125,50</SPAN>), an error occurs when you try to open the next <SPAN CLASS="eln">Recordset</SPAN>. This is because during concatenation, the number will be converted to a string using your system's default decimal character, and Microsoft&nbsp;Jet SQL only accepts U.S. decimal characters.</P>
See Also</P>
<SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">Sort</SPAN> property, WHERE clause.</P>
Specifics (Microsoft&nbsp;Access)</P>
The DAO <SPAN CLASS="eln">Filter</SPAN> property applies a filter to a <SPAN CLASS="eln">Recordset</SPAN> object. You can set it only by using Visual&nbsp;Basic.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;The Microsoft&nbsp;Access <SPAN CLASS="eln">Filter</SPAN> property applies a filter to a form. You can set it by using a macro, Visual&nbsp;Basic, or a form's <SPAN CLASS="pop">property sheet</SPAN> in <SPAN CLASS="pop">form Design view</SPAN>.</P>
Example</P>
This example uses the <SPAN CLASS="eln">Filter</SPAN> property to create a new <SPAN CLASS="eln">Recordset</SPAN> from an existing <SPAN CLASS="eln">Recordset</SPAN> based on a specified condition. The FilterField function is required for this procedure to run.</P>

<pre><code>Sub FilterX()

    Dim dbsNorthwind As Database
    Dim rstOrders As Recordset
    Dim intOrders As Integer
    Dim strCountry As String
    Dim rstOrdersCountry As Recordset
    Dim strMessage As String

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstOrders = dbsNorthwind.OpenRecordset("Orders", _
        dbOpenSnapshot)

    ' Populate the Recordset.
    rstOrders.MoveLast
    intOrders = rstOrders.RecordCount

    ' Get user input.
    strCountry = Trim(InputBox( _
        "Enter a country to filter on:"))

    If strCountry &lt;&gt; "" Then
        ' Open a filtered Recordset object.
        Set rstOrdersCountry = _
            FilterField(rstOrders, "ShipCountry", strCountry)

        With rstOrdersCountry
            ' Check RecordCount before populating Recordset;
            ' otherwise, error may result.
            If .RecordCount &lt;&gt; 0 Then .MoveLast
            ' Print number of records for the original
            ' Recordset object and the filtered Recordset
            ' object.
            strMessage = "Orders in original recordset: " &amp; _
                vbCr &amp; intOrders &amp; vbCr &amp; _
                "Orders in filtered recordset (Country = '" &amp; _
                strCountry &amp; "'): " &amp; vbCr &amp; .RecordCount
            MsgBox strMessage
            .Close
        End With

    End If

    rstOrders.Close

    dbsNorthwind.Close

End Sub

Function FilterField(rstTemp As Recordset, _
    strField As String, strFilter As String) As Recordset

    ' Set a filter on the specified Recordset object and then
    ' open a new Recordset object.
    rstTemp.Filter = strField &amp; " = '" &amp; strFilter &amp; "'"
    Set FilterField = rstTemp.OpenRecordset

End Function</code></pre>
<SPAN CLASS="nh">Note</SPAN>   To see the effects of filtering <SPAN CLASS="cte">rstOrders</SPAN>, you must set its <SPAN CLASS="eln">Filter</SPAN> property, and then open a second <SPAN CLASS="eln">Recordset</SPAN> object based on <SPAN CLASS="cte">rstOrders</SPAN>.</P>
<SPAN CLASS="nh">Note</SPAN>   When you know the data you want to select, it's usually more efficient to create a <SPAN CLASS="eln">Recordset</SPAN> with an <SPAN CLASS="pop">SQL statement</SPAN>. This example shows how you can create just one <SPAN CLASS="eln">Recordset</SPAN> and obtain records from a particular country.</P>

<pre><code>Sub FilterX2()

    Dim dbsNorthwind As Database
    Dim rstOrders As Recordset

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    ' Open a Recordset object that selects records from a
    ' table based on the shipping country.
    Set rstOrders = _
        dbsNorthwind.OpenRecordset("SELECT * " &amp; _
        "FROM Orders WHERE ShipCountry = 'USA'", _
        dbOpenSnapshot)

    rstOrders.Close
    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example prompts the user to enter the name of a country on which to&nbsp;filter, and then sets the <SPAN CLASS="eln">Filter</SPAN> property of a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object. For example, if the user enters "Italy," the filtered recordset will contain only those records in which the ShipCountry field contains the string "Italy."</P>
Note that you first create a dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object and set its <SPAN CLASS="eln">Filter</SPAN> property, then open a second dynaset-type <SPAN CLASS="eln">Recordset</SPAN> object based on the first. Setting the <SPAN CLASS="eln">Filter</SPAN> property of the first <SPAN CLASS="eln">Recordset</SPAN> object doesn't actually affect the records that it contains, so you need to create a second <SPAN CLASS="eln">Recordset</SPAN> object in order to see the effects of&nbsp;the filter.</P>

<pre><code>Sub SetRecordsetFilter()
    Dim dbs As Database, strInput As String
    Dim rstOrders As Recordset, rstFiltered As Recordset

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Prompt for value on which to filter.
    strInput = InputBox("Enter name of country on which to filter.")
    ' Create dynaset-type Recordset object.
    Set rstOrders = dbs.OpenRecordset("Orders", dbOpenDynaset)
    ' Set filter condition.
    rstOrders.Filter = "ShipCountry = '" &amp; strInput &amp; "'"
    ' Create filtered dynaset-type Recordset object.
    Set rstFiltered = rstOrders.OpenRecordset
    rstOrders.Close
    rstFiltered.Close
    Set dbs = Nothing
End Sub</code></pre>
<SPAN CLASS="nh">Tip</SPAN>&nbsp;&nbsp;&nbsp;In most situations, it's more efficient to create the second <SPAN CLASS="eln">Recordset</SPAN> object with the desired conditions in one step. When you know what data you want to select, it's generally more efficient to create a recordset with an SQL statement. The next example shows how you can create just one recordset and obtain the same results as in the preceding example:</P>

<pre><code>Sub CreateRecordsetWithSQL()
    Dim dbs As Database, rst As Recordset
    Dim strInput As String

    Set dbs = CurrentDb
    strInput = InputBox("Enter name of country on which to filter.")
    Set rst = dbs.OpenRecordset("SELECT * FROM Orders " _
        &amp; "WHERE ShipCountry = '" &amp; strInput &amp; "';")
    rst.MoveLast
    MsgBox "Recordset contains " &amp; rst.RecordCount &amp; " records."
    rst.Close
    Set dbs = Nothing
End Sub</code></pre>
Example (Microsoft&nbsp;Excel)</P>
This example creates a new recordset that contains records from the Supplier recordset in the Nwindex.mdb database, and then it copies the recordset contents to Sheet1. These records contain only data on suppliers located in Canada. The example copies a new, sorted recordset to Microsoft&nbsp;Excel.</P>
To create the Nwindex.mdb database, run the Microsoft&nbsp;Excel example for the <SPAN CLASS="lee">CreateDatabase</SPAN> method.</P>

<pre><code>Dim db As Database, rs As Recordset, sortedSet As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set rs = db.OpenRecordset("Supplier", dbOpenDynaset)
rs.Filter = "[COUNTRY] = 'Canada'"
Set sortedSet = rs.OpenRecordset()
Sheets("Sheet1").Activate
ActiveCell.CopyFromRecordset sortedSet
sortedSet.Close
rs.Close
db.Close</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

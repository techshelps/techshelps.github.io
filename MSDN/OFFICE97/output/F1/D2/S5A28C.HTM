<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Database Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Database Object</H1>Description</P>
A <SPAN CLASS="eln">Database</SPAN> object represents an open database.</P>
Remarks</P>
You use the <SPAN CLASS="eln">Database</SPAN> object and its methods and properties to manipulate an open database. In any type of database, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Execute</SPAN> method to run an <SPAN CLASS="pop">action query</SPAN>.</LI><LI CLASS="ULI1">Set the <SPAN CLASS="eln">Connect</SPAN> property to establish a connection to an ODBC data source.</LI><LI CLASS="ULI1">Set the <SPAN CLASS="eln">QueryTimeout</SPAN> property to limit the length of time to wait for a query to execute against an ODBC data source.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">RecordsAffected</SPAN> property to determine how many records were changed by an action query.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">OpenRecordset</SPAN> method to execute a <SPAN CLASS="pop">select query</SPAN> and create a <SPAN CLASS="eln">Recordset</SPAN> object.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Version</SPAN> property to determine which version of a database engine created the database.</LI></UL></SPAN>With a Microsoft Jet database (.mdb file), you can also use other methods, properties, and collections to manipulate a <SPAN CLASS="eln">Database</SPAN> object, as well as create, modify, or get information about its tables, queries, and relationships. For example, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">CreateTableDef</SPAN> and <SPAN CLASS="eln">CreateRelation</SPAN> methods to create tables and relations, respectively.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">CreateProperty</SPAN> method to define new <SPAN CLASS="eln">Database</SPAN> properties.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">CreateQueryDef</SPAN> method to create a <SPAN CLASS="pop">persistent</SPAN> or temporary query definition.</LI><LI CLASS="ULI1">Use <SPAN CLASS="eln">MakeReplica</SPAN>, <SPAN CLASS="eln">Synchronize</SPAN><SPAN CLASS="eln">, and </SPAN><SPAN CLASS="eln">PopulatePartial</SPAN> methods to create and synchronize full or partial <SPAN CLASS="pop">replicas</SPAN> of your database.</LI><LI CLASS="ULI1">Set the <SPAN CLASS="eln">CollatingOrder</SPAN> property to establish the alphabetic sorting order for character-based fields in different languages.
</LI></UL></SPAN>In an ODBCDirect workspace, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Connection</SPAN> property to obtain a reference to the <SPAN CLASS="eln">Connection</SPAN> object that corresponds to the <SPAN CLASS="eln">Database</SPAN> object.
</LI></UL></SPAN>You use the <SPAN CLASS="eln">CreateDatabase</SPAN> method to create a <SPAN CLASS="pop">persistent</SPAN> <SPAN CLASS="eln">Database</SPAN> object that is automatically appended to the <SPAN CLASS="eln">Databases</SPAN> collection, thereby saving it to disk.</P>
You don't need to specify the <SPAN CLASS="eln">DBEngine</SPAN> object when you use the <SPAN CLASS="eln">OpenDatabase</SPAN> method.</P>
Opening a database with <SPAN CLASS="pop">linked tables</SPAN> doesn't automatically establish links to the specified external files or <SPAN CLASS="pop">Microsoft Jet-connected ODBC data sources</SPAN>. You must either reference the table's <SPAN CLASS="eln">TableDef</SPAN> or <SPAN CLASS="eln">Field</SPAN> objects or open a <SPAN CLASS="eln">Recordset</SPAN> object. If you can't establish links to these tables, a trappable error occurs. You may also need permission to access the database, or another user might have the database opened exclusively. In these cases, trappable errors occur.</P>
You can also use the <SPAN CLASS="eln">OpenDatabase</SPAN> method to open an external database (such as FoxPro, dBASE, and Paradox) directly instead of opening a Microsoft Jet database that has links to its tables.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;Opening a <SPAN CLASS="eln">Database</SPAN> object directly on a Microsoft Jet-connected ODBC data source, such as Microsoft SQL Server, is not recommended because query performance is much slower than when using linked tables. However, performance is not a problem with opening a <SPAN CLASS="eln">Database</SPAN> object directly on an external ISAM database file, such as FoxPro, Paradox, and so forth.</P>
When a procedure that declares a <SPAN CLASS="eln">Database</SPAN> object has executed, local <SPAN CLASS="eln">Database</SPAN> objects are closed along with any open <SPAN CLASS="eln">Recordset</SPAN> objects. Any pending updates are lost and any pending transactions are rolled back, but no trappable error occurs. You should explicitly complete any pending transactions or edits and close <SPAN CLASS="eln">Recordset</SPAN> objects and <SPAN CLASS="eln">Database</SPAN> objects before exiting procedures that declare these object variables locally.</P>
When you use one of the transaction methods (<SPAN CLASS="eln">BeginTrans</SPAN>, <SPAN CLASS="eln">CommitTrans</SPAN>, or <SPAN CLASS="eln">Rollback</SPAN>) on the <SPAN CLASS="eln">Workspace</SPAN> object, these <SPAN CLASS="pop">transactions</SPAN> apply to all databases opened on the <SPAN CLASS="eln">Workspace</SPAN> from which the <SPAN CLASS="eln">Database</SPAN> object was opened. If you want to use independent transactions, you must first open an additional <SPAN CLASS="eln">Workspace</SPAN> object, and then open another <SPAN CLASS="eln">Database</SPAN> object in that <SPAN CLASS="eln">Workspace</SPAN> object.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You can open the same data source or database more than once, creating duplicate names in the <SPAN CLASS="eln">Databases</SPAN> collection. You should assign <SPAN CLASS="eln">Database</SPAN> objects to <SPAN CLASS="pop">object variables</SPAN> and refer to them by variable name.</P>
Properties</P>
<SPAN CLASS="eln">CollatingOrder</SPAN> property, <SPAN CLASS="eln">Connect</SPAN> property, <SPAN CLASS="eln">Connection</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">QueryTimeout</SPAN> property, <SPAN CLASS="eln">RecordsAffected</SPAN> property, <SPAN CLASS="eln">Replicable</SPAN> property, <SPAN CLASS="eln">ReplicaID</SPAN> property, <SPAN CLASS="eln">ReplicationConflictFunction</SPAN> property, <SPAN CLASS="eln">Transactions</SPAN> property, <SPAN CLASS="eln">Updatable</SPAN> property, <SPAN CLASS="eln">V1xNullBehavior</SPAN> property, <SPAN CLASS="eln">Version</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">Close</SPAN> method, <SPAN CLASS="eln">CreateProperty</SPAN> method, <SPAN CLASS="eln">CreateQueryDef</SPAN> method, <SPAN CLASS="eln">CreateRelation</SPAN> method, <SPAN CLASS="eln">CreateTableDef</SPAN> method, <SPAN CLASS="eln">Execute</SPAN> method, <SPAN CLASS="eln">MakeReplica</SPAN> method, <SPAN CLASS="eln">NewPassword</SPAN> method, <SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">PopulatePartial</SPAN> method, <SPAN CLASS="eln">Synchronize</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">Database</SPAN> property, <SPAN CLASS="eln">OpenDatabase</SPAN> method.</P>
Specifics (Microsoft Access)</P>
When working with <SPAN CLASS="pop">Data Access Objects</SPAN> from Microsoft Access, you will often need a <SPAN CLASS="eln">Database</SPAN> object variable that represents the current database. Use the <SPAN CLASS="eln">CurrentDb</SPAN> function to return a <SPAN CLASS="eln">Database</SPAN> object for the database that is currently open. This <SPAN CLASS="eln">Database</SPAN> object is automatically appended to the <SPAN CLASS="eln">Databases</SPAN> collection.</P>
For example, suppose you are currently working with the Northwind sample database in Microsoft Access. You can create a <SPAN CLASS="eln">Database</SPAN> object that refers to that database by first declaring a <SPAN CLASS="eln">Database</SPAN> object variable, then pointing it to the <SPAN CLASS="eln">Database</SPAN> object returned by the <SPAN CLASS="eln">CurrentDb</SPAN> function.</P>

<pre><code>Dim dbs As Database
Set dbs = CurrentDb</code></pre>
You don't need to know the name of the database or its position in the <SPAN CLASS="eln">Databases</SPAN> collection in order to use the current database. If you do want to know the name of the current database, check the <SPAN CLASS="eln">Name</SPAN> property of the <SPAN CLASS="eln">Database</SPAN> object, which contains the path and file name of the database. To find its position in the <SPAN CLASS="eln">Databases</SPAN> collection, enumerate through the collection.</P>
You can open only one database at a time in the Microsoft Access window. From Visual&nbsp;Basic code, however, you can create multiple independent <SPAN CLASS="eln">Database</SPAN> object variables to represent multiple open databases. In this way, you can manipulate more than one database at a time from code. You can also create multiple <SPAN CLASS="eln">Database</SPAN> object variables and point them to the current database.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;In your Visual&nbsp;Basic code, use the <SPAN CLASS="eln">CurrentDb</SPAN> function to return a <SPAN CLASS="eln">Database</SPAN> object that refers to the current database, rather than the <SPAN CLASS="cte">DBEngine(0)(0)</SPAN> syntax. The <SPAN CLASS="eln">CurrentDb</SPAN> function creates another instance of the current database, while the <SPAN CLASS="cte">DBEngine(0)(0)</SPAN> syntax refers to the open copy of the current database. Using the <SPAN CLASS="eln">CurrentDb</SPAN> function enables you to create more than one variable of type <SPAN CLASS="eln">Database</SPAN> that refers to the current database. Microsoft Access still supports the <SPAN CLASS="cte">DBEngine(0)(0)</SPAN> syntax, but you should consider making this modification to your code in order to avoid possible conflicts in a multiuser environment.</P>
Example</P>
This example creates a new <SPAN CLASS="eln">Database</SPAN> object and opens an existing <SPAN CLASS="eln">Database</SPAN> object in the default <SPAN CLASS="eln">Workspace</SPAN> object. Then it enumerates the <SPAN CLASS="eln">Database</SPAN> collection and the <SPAN CLASS="eln">Properties</SPAN> collection of each <SPAN CLASS="eln">Database</SPAN> object.</P>

<pre><code>Sub DatabaseObjectX()

    Dim wrkJet As Workspace
    Dim dbsNorthwind As Database
    Dim dbsNew As Database
    Dim dbsLoop As Database
    Dim prpLoop As Property

    Set wrkJet = CreateWorkspace("JetWorkspace", "admin", "", dbUseJet)

    ' Make sure there isn't already a file with the name of
    ' the new database.
    If Dir("NewDB.mdb") &lt;&gt; "" Then Kill "NewDB.mdb"

    ' Create a new database with the specified
    ' collating order.
    Set dbsNew = wrkJet.CreateDatabase("NewDB.mdb", _
        dbLangGeneral)
    Set dbsNorthwind = wrkJet.OpenDatabase("Northwind.mdb")

    ' Enumerate the Databases collection.
    For Each dbsLoop In wrkJet.Databases
        With dbsLoop
            Debug.Print "Properties of " &amp; .Name
            ' Enumerate the Properties collection of each
            ' Database object.
            For Each prpLoop In .Properties
                If prpLoop &lt;&gt; "" Then Debug.Print "    " &amp; _
                    prpLoop.Name &amp; " = " &amp; prpLoop
            Next prpLoop
        End With
    Next dbsLoop

    dbsNew.Close
    dbsNorthwind.Close
    wrkJet.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example shows three ways to return a <SPAN CLASS="eln">Database</SPAN> object in Microsoft Access. The procedure returns a <SPAN CLASS="eln">Database</SPAN> object representing the current database, which is open in the Microsoft Access window. Next, the procedure creates another database called Newdb.mdb and saves it to disk. Then it opens an existing database called Another.mdb. Finally, it enumerates all <SPAN CLASS="eln">Database</SPAN> objects in the <SPAN CLASS="eln">Databases</SPAN> collection.</P>

<pre><code>Sub ReferenceDatabases()
    Dim wsp As Workspace
    Dim dbsCurrent As Database, dbsNew As Database
    Dim dbsAnother As Database, dbs As Database

    ' Return reference to current database.
    Set dbsCurrent = CurrentDb
    ' Return reference to default workspace.
    Set wsp = DBEngine.Workspaces(0)
    ' Create new Database object.
    Set dbsNew = wsp.CreateDatabase("Newdb.mdb", dbLangGeneral)
    ' Open database other than current database.
    Set dbsAnother = wsp.OpenDatabase("Another.mdb")
    ' Enumerate all open databases.
    For Each dbs in wsp.Databases
        Debug.Print dbs.Name
    Next dbs
    For Each dbs In wsp.Databases
        Set dbs = Nothing
    Next dbs
    Set wsp = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateQueryDef Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateQueryDef Method</H2>Applies To</P>
<SPAN CLASS="eln">Connection</SPAN> object, <SPAN CLASS="eln">Database</SPAN> object.</P>
Description</P>
Creates a new QueryDef object in a specified Connection or Database object.</P>
Syntax</P>
<SPAN CLASS="eln">Set</SPAN> <SPAN CLASS="p">querydef</SPAN><SPAN CLASS="l"> = </SPAN><SPAN CLASS="p">object</SPAN><SPAN CLASS="eln">.CreateQueryDef(</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">, </SPAN><SPAN CLASS="p">sqltext</SPAN><SPAN CLASS="p">)</SPAN></P>
The <SPAN CLASS="eln">CreateQueryDef</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="66pt" VALIGN="TOP"><COL WIDTH="294pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">querydef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents the <SPAN CLASS="eln">QueryDef</SPAN> object you want to create.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An object variable that represents an open Connection or Database object that will contain the new <SPAN CLASS="eln">QueryDef</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A Variant (String subtype) that uniquely names the new <SPAN CLASS="eln">QueryDef</SPAN>.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">sqltext</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> (<SPAN CLASS="eln">String</SPAN> subtype) that is an <SPAN CLASS="pop">SQL statement</SPAN> defining the <SPAN CLASS="eln">QueryDef</SPAN>. If you omit this argument, you can define the <SPAN CLASS="eln">QueryDef</SPAN> by setting its SQL property before or after you append it to a collection.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
In a <SPAN CLASS="pop">Microsoft&nbsp;Jet workspace</SPAN>, if you provide anything other than a <SPAN CLASS="pop">zero-length string</SPAN> for the name when you create a <SPAN CLASS="eln">QueryDef</SPAN>, the resulting <SPAN CLASS="eln">QueryDef</SPAN> object is automatically appended to the QueryDefs collection. In an <SPAN CLASS="pop">ODBCDirect workspace</SPAN>, <B>QueryDef</B> objects are always temporary.</P>
In an ODBCDirect workspace, the <I>sqltext</I> argument can specify an SQL statement or a Microsoft&nbsp;SQL Server stored procedure and its parameters.</P>
If the object specified by <SPAN CLASS="p">name</SPAN> is already a member of the <SPAN CLASS="eln">QueryDefs</SPAN> collection, a run-time error occurs. You can create a temporary <SPAN CLASS="eln">QueryDef</SPAN> by using a <SPAN CLASS="pop">zero-length string</SPAN> for the <SPAN CLASS="p">name</SPAN> argument when you execute the <SPAN CLASS="eln">CreateQueryDef</SPAN> method. You can also accomplish this by setting the Name property of a newly created <SPAN CLASS="eln">QueryDef </SPAN>to a zero-length string (" "). Temporary <SPAN CLASS="eln">QueryDef</SPAN> objects are useful if you want to repeatedly use dynamic SQL statements without having to create any new permanent objects in the <SPAN CLASS="eln">QueryDefs</SPAN> collection. You can't append a temporary <SPAN CLASS="eln">QueryDef</SPAN> to any collection because a zero-length string isn't a valid name for a permanent <SPAN CLASS="eln">QueryDef </SPAN>object. You can always set the <SPAN CLASS="eln">Name</SPAN> and <SPAN CLASS="eln">SQL</SPAN> properties of the newly created <SPAN CLASS="eln">QueryDef</SPAN> object and subsequently append the <SPAN CLASS="eln">QueryDef</SPAN> to the <SPAN CLASS="eln">QueryDefs</SPAN> collection.</P>
To run the SQL statement in a <SPAN CLASS="eln">QueryDef</SPAN> object, use the Execute or OpenRecordset method.</P>
Using a <SPAN CLASS="eln">QueryDef</SPAN> object is the preferred way to perform SQL pass-through queries with <SPAN CLASS="pop">ODBC</SPAN> databases.</P>
To remove a <SPAN CLASS="eln">QueryDef</SPAN> object from a <SPAN CLASS="eln">QueryDefs</SPAN> collection in a <SPAN CLASS="pop">Microsoft&nbsp;Jet database</SPAN>, use the Delete method on the collection. For an <SPAN CLASS="pop">ODBCDirect</SPAN> database, use the Close method on the <SPAN CLASS="eln">QueryDef</SPAN> object.</P>
See Also</P>
<SPAN CLASS="eln">Append</SPAN> method, <SPAN CLASS="eln">Connect</SPAN> property, <SPAN CLASS="eln">CreateProperty</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, DROP statement, <SPAN CLASS="eln">LogMessages</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">OpenRecordset</SPAN> method, <SPAN CLASS="eln">QueryDef</SPAN> object, <SPAN CLASS="eln">ReturnsRecords</SPAN> property, SELECT...INTO statement, <SPAN CLASS="eln">SQL</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">Value</SPAN> property.</P>
Example</P>
This example uses the <SPAN CLASS="eln">CreateQueryDef</SPAN> method to create and execute both a temporary and a permanent <SPAN CLASS="eln">QueryDef</SPAN>. The GetrstTemp function is required for this procedure to run.</P>

<pre><code>Sub CreateQueryDefX()

    Dim dbsNorthwind As Database
    Dim qdfTemp As QueryDef
    Dim qdfNew As QueryDef

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    With dbsNorthwind
        ' Create temporary QueryDef.
        Set qdfTemp = .CreateQueryDef("", _
            "SELECT * FROM Employees")
        ' Open Recordset and print report.
        GetrstTemp qdfTemp
        ' Create permanent QueryDef.
        Set qdfNew = .CreateQueryDef("NewQueryDef", _
            "SELECT * FROM Categories")
        ' Open Recordset and print report.
        GetrstTemp qdfNew
        ' Delete new QueryDef because this is a demonstration.
        .QueryDefs.Delete qdfNew.Name
        .Close
    End With

End Sub

Function GetrstTemp(qdfTemp As QueryDef)

    Dim rstTemp As Recordset

    With qdfTemp
        Debug.Print .Name
        Debug.Print "    " &amp; .SQL
        ' Open Recordset from QueryDef.
        Set rstTemp = .OpenRecordset(dbOpenSnapshot)

        With rstTemp
            ' Populate Recordset and print number of records.
            .MoveLast
            Debug.Print "    Number of records = " &amp; _
                .RecordCount
            Debug.Print
            .Close
        End With

    End With

End Function</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example creates a new <SPAN CLASS="eln">QueryDef</SPAN> object, then opens the query in Datasheet view:</P>

<pre><code>Sub NewQuery()
    Dim dbs As Database, qdf As QueryDef, strSQL As String

    ' Return reference to current database.
    Set dbs = CurrentDb
    strSQL = "SELECT * FROM Employees WHERE [HireDate] &gt;= #1-1-93#"
    ' Create new query.
    Set qdf = dbs.CreateQueryDef("RecentHires", strSQL)
    DoCmd.OpenQuery qdf.Name
    Set dbs = Nothing
End Sub</code></pre>
Example (Microsoft&nbsp;Excel)</P>
This example creates a new query based on the Customer recordset in the Nwindex.mdb database. The query selects a snapshot of all customers in the state of Washington and then copies it to Sheet1.</P>
To create the Nwindex.mdb database, run the Microsoft&nbsp;Excel example for the <SPAN CLASS="lee">CreateDatabase</SPAN> method.</P>

<pre><code>Dim db As Database, qDef As QueryDef, rs As Recordset
Set db = Workspaces(0).OpenDatabase(Application.Path &amp; "\NWINDEX.MDB")
Set qDef = db.CreateQueryDef("WA Region")
qDef.SQL = "SELECT * FROM Customer WHERE [Region] = 'WA';"
Set rs = db.OpenRecordset("WA Region")
numberOfRows = Sheets("Sheet1").Cells(1, 1).CopyFromRecordset(rs)
Sheets("Sheet1").Activate
MsgBox numberOfRows &amp; " records have been copied."
rs.Close
db.Close</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

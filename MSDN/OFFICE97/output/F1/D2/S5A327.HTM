<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HAVING Clause</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>HAVING Clause</H1>Description</P>
Specifies which grouped records are displayed in a <SPAN CLASS="jump">SELECT</SPAN> statement with a GROUP BY clause. After <SPAN CLASS="jump">GROUP BY</SPAN> combines records, HAVING displays any records grouped&nbsp;by the GROUP BY clause that satisfy the conditions of the HAVING clause.</P>
Syntax</P>
SELECT <SPAN CLASS="p">fieldlist</SPAN><BR>FROM <SPAN CLASS="p">table</SPAN><BR>WHERE <SPAN CLASS="p">selectcriteria</SPAN><BR>GROUP BY <SPAN CLASS="p">groupfieldlist</SPAN><BR>[HAVING <SPAN CLASS="p">groupcriteria</SPAN><SPAN CLASS="p">]</SPAN></P>
A SELECT statement containing a HAVING clause has these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="279pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">fieldlist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the field or fields to be retrieved along with any field-name <SPAN CLASS="pop">aliases</SPAN>, <SPAN CLASS="jump">SQL aggregate functions</SPAN>, selection predicates (<SPAN CLASS="jump">ALL, DISTINCT, DISTINCTROW, or TOP</SPAN>), or other SELECT statement options.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">table</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the table from which records are retrieved. For more information, see the <SPAN CLASS="jump">FROM</SPAN> clause.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">selectcriteria</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Selection criteria. If the statement includes a <SPAN CLASS="jump">WHERE</SPAN> clause, the <SPAN CLASS="pop">Microsoft Jet database engine</SPAN> groups values after applying the WHERE conditions to the records.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">groupfieldlist</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The names of up to 10 fields used to group records. The order of the field names in <SPAN CLASS="p">groupfieldlist</SPAN> determines the grouping levels from the highest to the lowest level of grouping.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">groupcriteria</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An expression that determines which grouped records to display.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
HAVING is optional.</P>
HAVING is similar to WHERE, which determines which records are selected. After records are grouped with GROUP BY, HAVING determines which records are displayed:</P>

<pre><code>SELECT CategoryID,
Sum(UnitsInStock)
FROM Products
GROUP BY CategoryID
HAVING Sum(UnitsInStock) &gt; 100 And Like "BOS*";</code></pre>
A HAVING clause can contain up to 40 expressions linked by logical operators, such as <SPAN CLASS="eln">And</SPAN> and <SPAN CLASS="eln">Or</SPAN>.</P>
See Also</P>
ALL, DISTINCT, DISTINCTROW, TOP predicates, FROM clause, GROUP BY clause, SELECT statement, SELECT...INTO statement, WHERE clause.</P>
Example </P>
This example selects the job titles assigned to more than one employee in the Washington region.</P>
This example calls the EnumFields procedure, which you can find in the SELECT statement example.</P>

<pre><code>Sub HavingX()

    Dim dbs As Database, rst As Recordset

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")

    ' Select the job titles assigned to more than one 
    ' employee in the Washington region. 
    Set rst = dbs.OpenRecordset("SELECT Title, " _
        &amp; "Count(Title) AS Total FROM Employees " _
        &amp; "WHERE Region = 'WA' " _
        &amp; "GROUP BY Title HAVING Count(Title) &gt; 1;")

    ' Populate the Recordset.
    rst.MoveLast

    ' Call EnumFields to print recordset contents.
    EnumFields rst, 25

    dbs.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
To try the following examples in Microsoft Access, first create a new query in the Northwind sample database. Close the <SPAN CLASS="eln">Show Table</SPAN> dialog box without specifying a table or query. Switch to SQL view, paste an individual example into the SQL window, and run the query.</P>
The following example finds the suppliers whose products have an average unit price over&nbsp;$25:</P>

<pre><code>SELECT SupplierID, Avg(UnitPrice) AS AvgOfUnitPrice
FROM Products GROUP BY SupplierID
HAVING (Avg(UnitPrice)&gt;25);</code></pre>
The next example selects employees who have sold more than 100 orders:</P>

<pre><code>SELECT EmployeeID, Count(OrderID) AS CountOfOrderID
FROM Orders GROUP BY EmployeeID
HAVING Count(OrderID) &gt; 100;</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LEFT JOIN, RIGHT JOIN Operations</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>LEFT JOIN, RIGHT JOIN Operations</H1>Description</P>
Combines source-table records when used in any <SPAN CLASS="jump">FROM</SPAN> clause.</P>
Syntax</P>
FROM <SPAN CLASS="p">table1</SPAN> [ LEFT | RIGHT ] JOIN <SPAN CLASS="p">table2</SPAN> <BR>ON <SPAN CLASS="p">table1.field1</SPAN> <SPAN CLASS="p">compopr table2.field2</SPAN></P>
The LEFT JOIN and RIGHT JOIN operations have these parts:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="279pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">table1</SPAN>, <SPAN CLASS="p">table2</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The names of the tables from which records are combined.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">field1</SPAN>, <SPAN CLASS="p">field2</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The names of the fields that are joined. The fields must be of the same <SPAN CLASS="pop">data type</SPAN> and contain the same kind of data, but they don't need to have the same name.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">compopr</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Any relational comparison operator: "=", "&lt;", "&gt;", "&lt;=", "&gt;=", or "&lt;&gt;".</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
Use a LEFT JOIN operation to create a <SPAN CLASS="pop">left outer join</SPAN>. Left outer joins include all of the records from the first (left) of two tables, even if there are no matching values for records in the second (right) table.</P>
Use a RIGHT JOIN operation to create a <SPAN CLASS="pop">right outer join</SPAN>. Right outer joins include all of the records from the second (right) of two tables, even if there are no matching values for records in the first (left) table.</P>
For example, you could use LEFT JOIN with the Departments (left) and Employees (right) tables to select all departments, including those that have no employees assigned to them. To select all employees, including those who aren't assigned to a department, you would use RIGHT JOIN.</P>
The following example shows how you could join the Categories and Products tables on the CategoryID field. The query produces a list of all categories, including those that contain no products:</P>

<pre><code>SELECT CategoryName,
ProductName
FROM Categories LEFT JOIN Products
ON Categories.CategoryID = Products.CategoryID;</code></pre>
In this example, CategoryID is the joined field, but it isn't included in the query results because it isn't included in the <SPAN CLASS="jump">SELECT</SPAN> statement. To include the joined field, enter the field name in the SELECT statement — in this case, <SPAN CLASS="cte">Categories.CategoryID</SPAN>.</P>
<SPAN CLASS="nh">Notes</SPAN></P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">To create a query that includes only records in which the data in the joined fields is the same, use an <SPAN CLASS="jump">INNER JOIN</SPAN> operation.</LI><LI CLASS="ULI1">A LEFT JOIN or a RIGHT JOIN can be nested inside an INNER JOIN, but an INNER JOIN cannot be nested inside a LEFT JOIN or a RIGHT JOIN. See the discussion of nesting in the INNER JOIN topic to see how to nest joins within other joins.</LI><LI CLASS="ULI1">You can link multiple ON clauses. See the discussion of clause linking in the INNER JOIN topic to see how this is done.</LI><LI CLASS="ULI1">If you try to join fields containing <SPAN CLASS="pop">Memo</SPAN> or <SPAN CLASS="pop">OLE Object</SPAN> data, an error occurs.
</LI></UL></SPAN>See Also</P>
FROM clause, INNER JOIN operation, UNION operation.</P>
Example</P>
This example assumes the existence of hypothetical Department Name and Department ID fields in an Employees table. Note that these fields do not actually exist in the Northwind database Employees table.</P>
This example selects all departments, including those without employees.</P>
This example calls the EnumFields procedure, which you can find in the SELECT statement example.</P>

<pre><code>Sub LeftRightJoinX()

    Dim dbs As Database, rst As Recordset

    ' Modify this line to include the path to Northwind
    ' on your computer.
    Set dbs = OpenDatabase("Northwind.mdb")
    
    ' Select all departments, including those
    ' without employees.
    Set rst = dbs.OpenRecordset _
        ("SELECT [Department Name], " _
        &amp; "FirstName &amp; Chr(32) &amp; LastName AS Name " _
        &amp; "FROM Departments LEFT JOIN Employees " _
        &amp; "ON Departments.[Department ID] = " _
        &amp; "Employees.[Department ID] " _
        &amp; "ORDER BY [Department Name];")

    ' Populate the Recordset.
    rst.MoveLast
    
    ' Call EnumFields to print the contents of the
    ' Recordset. Pass the Recordset object and desired
    ' field width.
    EnumFields rst, 20

    dbs.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
To try the following examples in Microsoft Access, first create a new query in the Northwind sample database. Close the <SPAN CLASS="eln">Show Table</SPAN> dialog box without specifying a table or query. Switch to SQL view, paste an individual example into the SQL window, and run the query.</P>
The following example selects all customers, including those without orders:</P>

<pre><code>SELECT Customers.CustomerID, CompanyName, OrderID
FROM Customers
LEFT JOIN Orders
ON Customers.CustomerID = Orders.CustomerID
ORDER BY OrderID;</code></pre>
The next example selects all suppliers, including those without products. Before you try this example, run the following query to add a record to the Suppliers table:</P>

<pre><code>INSERT INTO Suppliers (CompanyName, ContactName, ContactTitle)
VALUES ('Acme Supply Co.', 'That Coyote', 'Sales Manager');</code></pre>
Next create a new query, paste the following SQL statement into the SQL window, and run the query.</P>

<pre><code>SELECT Suppliers.SupplierID, Suppliers.CompanyName,
Products.ProductID, Products.ProductName
FROM Products RIGHT JOIN Suppliers
ON Products.SupplierID = Suppliers.SupplierID
ORDER BY Products.SupplierID;</code></pre>
To delete the additional record you created in the Suppliers table, you can run the following query:</P>

<pre><code>DELETE * FROM Suppliers
WHERE CompanyName = 'Acme Supply Co.';</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

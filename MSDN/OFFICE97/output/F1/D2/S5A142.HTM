<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MouseMove Event -- Event Procedures</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>MouseMove Event — Event Procedures</H2>Description</P>
To create an <SPAN CLASS="pop">event procedure</SPAN> that runs when the <SPAN CLASS="jump">MouseMove</SPAN> event occurs, set the OnMouseMove property to [Event Procedure], and click the <SPAN CLASS="eln">Build</SPAN> button.</P>
Syntax</P>
<SPAN CLASS="l">Private Sub Form_MouseMove(</SPAN>Button<SPAN CLASS="l"> As Integer, </SPAN>Shift<SPAN CLASS="l"> As Integer, </SPAN>X<SPAN CLASS="l"> As Single,<BR></SPAN>úY<SPAN CLASS="l"> As Single)</SPAN></P>
<SPAN CLASS="l">Private Sub </SPAN><SPAN CLASS="p">controlname</SPAN><SPAN CLASS="l">_MouseMove(</SPAN>Button<SPAN CLASS="l"> As Integer, </SPAN>Shift<SPAN CLASS="l"> As Integer,<BR></SPAN>úX<SPAN CLASS="l"> As Single, </SPAN>Y<SPAN CLASS="l"> As Single)</SPAN></P>
The MouseMove event has the following arguments.</P>

<TABLE COLS="4" BORDER="1" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="182pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">controlname</SPAN></P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The name of the <SPAN CLASS="pop">control</SPAN> whose MouseMove event procedure you want to run.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Button</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The state of the mouse buttons when the event occurs. If you need to test for the Button argument, you can <SPAN CLASS="jump">use one of the following intrinsic constants as bit masks</SPAN>:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Constant</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acLeftButton</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the left mouse button.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acRightButton</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the right mouse button.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acMiddleButton</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the middle mouse button.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Shift</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The state of the <SPAN CLASS="kn">SHIFT</SPAN>, <SPAN CLASS="kn">CTRL</SPAN>, and <SPAN CLASS="kn">ALT</SPAN> keys when the button specified by the Button argument was pressed or released. If you need to test for the Shift argument, you can use one of the following intrinsic constants as bit masks:</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Constant</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acShiftMask</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the <SPAN CLASS="kn">SHIFT</SPAN> key.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acCtrlMask</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the <SPAN CLASS="kn">CTRL</SPAN> key.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">acAltMask</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The bit mask for the <SPAN CLASS="kn">ALT</SPAN> key.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">X, Y</P></TD><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">The x and y coordinates of the current location of the mouse pointer. The X and Y arguments are always expressed in <SPAN CLASS="pop">twips</SPAN>.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You test for a condition by first assigning each result to a temporary Integer variable and then comparing the Shift or Button argument to an <SPAN CLASS="pop">intrinsic constant</SPAN>. Use the And operator with the Button argument to test whether the condition is greater than 0, indicating that the left, middle, or right mouse button was pressed, as in the following example:</P>

<pre><code>LeftDown = (Button And acLeftButton) &gt; 0</code></pre>
In a procedure, you can test for any combination of conditions, as in the following example:</P>

<pre><code>If ShiftDown And CtrlDown Then
    .                    ' Do this if SHIFT and CTRL keys are pressed.
    .
    .
End If</code></pre>
<SPAN CLASS="nh">Note</SPAN>   The Button argument for the <SPAN CLASS="jump">MouseDown and MouseUp</SPAN> events differs from the Button argument for MouseMove. For the MouseMove event, the Button argument indicates the current state of all buttons; a single MouseMove event can indicate that some, all, or no button is pressed. For example, if you press both the left and right buttons while moving the mouse, the Button argument is set to 3 (1 + 2). For the MouseDown and MouseUp events, the Button argument indicates one button per event.</P>
You can use the arguments for the <SPAN CLASS="jump">KeyDown</SPAN>, <SPAN CLASS="jump">KeyPress</SPAN>, and <SPAN CLASS="jump">KeyUp</SPAN> events, in conjunction with the arguments for the MouseDown, MouseUp, and MouseMove events, to make your application work smoothly for both keyboard and mouse users. For example, you may need to coordinate the keyboard <SPAN CLASS="pop">focus</SPAN> with the mouse focus. Normally, these are the same. For example, if you move the mouse pointer to a text box and click the mouse button, both the keyboard focus and the mouse focus move to the text box. However, moving the mouse pointer over a control does not move the keyboard focus to that control. You need to click a mouse button, use one of the keyboard navigation keys, or set the focus to the control in the MouseMove event procedure.</P>
Since the MouseMove event occurs for each area of the form it moves over, you can end up with a multitude of MouseMove events if you don't control them. You may want to make sure that if a control or section has received a MouseMove event, the event doesn't occur for the control or section again while the mouse pointer is still on this area of the form. To do this, set and check a module variable that indicates whether the MouseMove event has already occurred for this control or form section.</P>
You can't cancel the MouseMove event.</P>
See Also</P>
MouseMove event&nbsp;— macros.</P>
Example</P>
The following example determines where the mouse is and whether the left mouse button and/or the <SPAN CLASS="kn">SHIFT</SPAN> key is pressed. The x and y coordinates of the mouse pointer position are displayed in a label control as you move the mouse.</P>
To try the example, add the following event procedure to a form that contains a label named Coordinates:</P>

<pre><code>Private Sub Detail_MouseMove(Button As Integer, Shift As Integer, _
        X As Single, Y As Single)
    Dim intShiftDown As Integer, intLeftButton As Integer

    Me!Coordinates.Caption = X &amp; ", " &amp; Y
    ' Use bit masks to determine state of SHIFT key and left button.
    intShiftDown = Shift And acShiftMask
    intLeftButton = Button And acLeftButton
    ' Check that SHIFT key and left button are both pressed.
    If intShiftDown And intLeftButton &gt; 0 Then
        MsgBox "Shift key and left mouse button were pressed."
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

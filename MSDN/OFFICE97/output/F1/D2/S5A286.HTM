<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateProperty Method</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>CreateProperty Method</H2>Applies To</P>
<SPAN CLASS="eln">Database</SPAN> object, <SPAN CLASS="eln">Document</SPAN> object, <SPAN CLASS="eln">Field</SPAN> object, <SPAN CLASS="eln">Index</SPAN> object, <SPAN CLASS="eln">QueryDef</SPAN> object, <SPAN CLASS="eln">TableDef</SPAN> object.</P>
Description</P>
Creates a new user-defined <SPAN CLASS="lee">Property</SPAN> object (<SPAN CLASS="pop">Microsoft&nbsp;Jet workspaces</SPAN> only).</P>
Syntax</P>
<SPAN CLASS="eln">Set</SPAN> <SPAN CLASS="p">property</SPAN><SPAN CLASS="l"> = </SPAN><SPAN CLASS="p">object</SPAN><B>.</B><SPAN CLASS="eln">CreateProperty(</SPAN><SPAN CLASS="p">name</SPAN>, <SPAN CLASS="p">type</SPAN>, <SPAN CLASS="p">value</SPAN>, <SPAN CLASS="p">DDL</SPAN><SPAN CLASS="p">)</SPAN></P>
The <SPAN CLASS="eln">CreateProperty</SPAN> method syntax has these parts.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="61pt" VALIGN="TOP"><COL WIDTH="299pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Part</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">property</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An <SPAN CLASS="pop">object variable</SPAN> that represents the <SPAN CLASS="eln">Property</SPAN> object you want to create.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">object</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">An object variable that represents the Database, Field, Index, QueryDef, Document, or TableDef object you want to use to create the new <SPAN CLASS="eln">Property</SPAN> object.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">name</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A Variant (String subtype) that uniquely names the new <SPAN CLASS="eln">Property</SPAN> object. See the Name property for details on valid <SPAN CLASS="eln">Property</SPAN> names.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">type</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A constant that defines the data type of the new <SPAN CLASS="eln">Property</SPAN> object. See the Type property for valid data types.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">value</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> containing the initial property value. See the Value property for details.</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="p">DDL</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Optional. A <SPAN CLASS="eln">Variant</SPAN> (Boolean subtype) that indicates whether or not the <SPAN CLASS="eln">Property</SPAN> is a <SPAN CLASS="pop">DDL</SPAN> object. The default is <SPAN CLASS="eln">False</SPAN>. If <SPAN CLASS="p">DDL</SPAN> is <SPAN CLASS="eln">True</SPAN>, users can't change or delete this <SPAN CLASS="eln">Property</SPAN> object unless they have <SPAN CLASS="eln">dbSecWriteDef</SPAN> permission.</P></TD></TR></TBODY></TABLE>
<BR></P>Remarks</P>
You can create a user-defined <SPAN CLASS="eln">Property</SPAN> object only in the Properties collection of an object that is <SPAN CLASS="pop">persistent</SPAN>.</P>
If you omit one or more of the optional parts when you use <SPAN CLASS="eln">CreateProperty</SPAN>, you can use an appropriate assignment statement to set or reset the corresponding property before you append the new object to a collection. After you append the object, you can alter some but not all of its property settings. See the <SPAN CLASS="eln">Name</SPAN>, <SPAN CLASS="eln">Type</SPAN>, and <SPAN CLASS="eln">Value </SPAN>property topics for more details.</P>
If <SPAN CLASS="p">name</SPAN> refers to an object that is already a member of the collection, a run-time error occurs when you use the Append method.</P>
To remove a user-defined <SPAN CLASS="eln">Property</SPAN> object from the collection, use the Delete method on the Properties collection. You can't delete built-in properties.</P>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;If you omit the <SPAN CLASS="p">DDL</SPAN> argument, it defaults to <SPAN CLASS="eln">False</SPAN> (non-<SPAN CLASS="pop">DDL</SPAN>). Because no corresponding DDL property is exposed, you must delete and re-create a <SPAN CLASS="eln">Property</SPAN> object you want to change from DDL to non-DDL.</P>
See Also</P>
<SPAN CLASS="eln">Append</SPAN> method, <SPAN CLASS="eln">Delete</SPAN> method, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">Type</SPAN> property, <SPAN CLASS="eln">Value</SPAN> property.</P>
Specifics (Microsoft&nbsp;Access)</P>
Microsoft&nbsp;Access defines a number of properties on <SPAN CLASS="pop">data access objects</SPAN>. These properties are not automatically recognized by the <SPAN CLASS="pop">Microsoft&nbsp;Jet database engine</SPAN>. In order to set or return values for a Microsoft&nbsp;Access–defined property in Visual&nbsp;Basic, you must specifically add the property to the <SPAN CLASS="eln">Properties</SPAN> collection of the object to which it applies. You can do this by using the <SPAN CLASS="eln">CreateProperty</SPAN> method to create the property and then appending it to the <SPAN CLASS="eln">Properties</SPAN> collection.</P>
For example, Microsoft&nbsp;Access defines the <SPAN CLASS="l">Description</SPAN> property of a <SPAN CLASS="l">TableDef</SPAN> object. If this property hasn't already been set from <SPAN CLASS="pop">table Design view</SPAN>, you must use the <SPAN CLASS="l">CreateProperty</SPAN> method to create the property and then append it to the <SPAN CLASS="l">Properties </SPAN>collection in order to set the property from Visual&nbsp;Basic.</P>
A Microsoft&nbsp;Access–defined property is automatically added to the <SPAN CLASS="eln">Properties</SPAN> collection when it is first set from the Microsoft&nbsp;Access window. If the property has already been set in this way, then you don't need to add it to the <SPAN CLASS="eln">Properties</SPAN> collection.</P>
When you write code to set a Microsoft&nbsp;Access–defined property, you should include an error-handling routine that creates a <SPAN CLASS="eln">Property</SPAN> object representing that property and appends it to the <SPAN CLASS="eln">Properties</SPAN> collection if it does not already exist in the collection.</P>
When you refer to a Microsoft&nbsp;Access–defined property in Visual&nbsp;Basic, you must explicitly refer to the <SPAN CLASS="eln">Properties</SPAN> collection. For example, you would refer to the <SPAN CLASS="eln">AppTitle</SPAN> property in the following manner, once it exists within the <SPAN CLASS="eln">Properties</SPAN> collection of a <SPAN CLASS="eln">Database</SPAN> object representing the current database.</P>

<pre><code>Dim dbs As Database
Set dbs = CurrentDb
dbs.Properties!AppTitle = "Northwind Traders"</code></pre>
<SPAN CLASS="nh">Note</SPAN>&nbsp;&nbsp;&nbsp;You need to create and append only the Microsoft&nbsp;Access properties that apply to DAO objects. You can set other Microsoft&nbsp;Access properties in Visual&nbsp;Basic by using the standard <SPAN CLASS="p">object</SPAN><SPAN CLASS="l">.</SPAN><SPAN CLASS="p">property</SPAN> syntax.</P>
Example</P>
This example tries to set the value of a user-defined property. If the property doesn't exist, it uses the <SPAN CLASS="eln">CreateProperty</SPAN> method to create and set the value of the new property. The SetProperty procedure is required for this procedure to run.</P>

<pre><code>Sub CreatePropertyX()

    Dim dbsNorthwind As Database
    Dim prpLoop As Property

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")

    ' Set the Archive property to True.
    SetProperty dbsNorthwind, "Archive", True
    
    With dbsNorthwind
        Debug.Print "Properties of " &amp; .Name
        
        ' Enumerate Properties collection of the Northwind
        ' database.
        For Each prpLoop In .Properties
            If prpLoop &lt;&gt; "" Then Debug.Print "    " &amp; _
                prpLoop.Name &amp; " = " &amp; prpLoop
        Next prpLoop

        ' Delete the new property since this is a
        ' demonstration.
        .Properties.Delete "Archive"

        .Close
    End With

End Sub

Sub SetProperty(dbsTemp As Database, strName As String, _
    booTemp As Boolean)

    Dim prpNew As Property
    Dim errLoop As Error

    ' Attempt to set the specified property.
    On Error GoTo Err_Property
    dbsTemp.Properties("strName") = booTemp
    On Error GoTo 0

    Exit Sub

Err_Property:

    ' Error 3270 means that the property was not found.
    If DBEngine.Errors(0).Number = 3270 Then
        ' Create property, set its value, and append it to the
        ' Properties collection.
        Set prpNew = dbsTemp.CreateProperty(strName, _
            dbBoolean, booTemp)
        dbsTemp.Properties.Append prpNew
        Resume Next
    Else
        ' If different error has occurred, display message.
        For Each errLoop In DBEngine.Errors
            MsgBox "Error number: " &amp; errLoop.Number &amp; vbCr &amp; _
                errLoop.Description
        Next errLoop
        End
    End If

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The first procedure in the following example, the SetAccessProperty function, is a generic function that you can use to set a property. If the property you wish to set already has a corresponding <SPAN CLASS="eln">Property</SPAN> object in the <SPAN CLASS="eln">Properties</SPAN> collection, the function simply sets the property to the desired value. If the property does not have a corresponding <SPAN CLASS="eln">Property</SPAN> object in the <SPAN CLASS="eln">Properties</SPAN> collection, then the function creates the <SPAN CLASS="eln">Property</SPAN> object and appends it to the <SPAN CLASS="eln">Properties</SPAN> collection.</P>
The second procedure sets the <SPAN CLASS="eln">Subject</SPAN> property using the SetAccessProperty function. The <SPAN CLASS="eln">Subject</SPAN> property is a database property that can also be set on the <SPAN CLASS="eln">Summary</SPAN> tab of the <SPAN CLASS="eln">Database Properties</SPAN> dialog box, available by clicking <SPAN CLASS="eln">Database Properties</SPAN> on the <SPAN CLASS="eln">File</SPAN> menu.</P>
The <SPAN CLASS="eln">Subject</SPAN> property applies to a DAO object — the SummaryInfo <SPAN CLASS="eln">Document</SPAN> object, which is defined by Microsoft&nbsp;Access. If the Subject property doesn't already exist in the <SPAN CLASS="eln">Properties</SPAN> collection for the SummaryInfo <SPAN CLASS="eln">Document</SPAN> object, the SetAccessProperty function adds it.</P>

<pre><code>Function SetAccessProperty(obj As Object, strName As String, _
        intType As Integer, varSetting As Variant) As Boolean
    Dim prp As Property
    Const conPropNotFound As Integer = 3270

    On Error GoTo ErrorSetAccessProperty
    ' Explicitly refer to Properties collection.
    obj.Properties(strName) = varSetting
    obj.Properties.Refresh
    SetAccessProperty = True
    
ExitSetAccessProperty:
    Exit Function
ErrorSetAccessProperty:
    If Err = conPropNotFound Then
        ' Create property, denote type, and set initial value.
        Set prp = obj.CreateProperty(strName, intType, varSetting)
        ' Append Property object to Properties collection.
        obj.Properties.Append prp
        obj.Properties.Refresh
        SetAccessProperty = True
        Resume ExitSetAccessProperty
    Else
        MsgBox Err &amp; ": " &amp; vbCrLf &amp; Err.Description
        SetAccessProperty = False
        Resume ExitSetAccessProperty
    End If
End Function</code></pre>
The following procedure calls the SetAccessProperty function to set the <SPAN CLASS="eln">Subject</SPAN> property.</P>

<pre><code>Sub CallPropertySet()
    Dim dbs As Database, ctr As Container, doc As Document
    Dim blnReturn As Boolean
    
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Databases container.
    Set ctr = dbs.Containers!Databases
    ' Return reference to SummaryInfo document.
    Set doc = ctr.Documents!SummaryInfo
    blnReturn = SetAccessProperty(doc, _
        "Subject", dbText, "Business Contacts")
    ' Evaluate return value.
    If blnReturn = True Then
        Debug.Print "Property set successfully."
    Else
        Debug.Print "Property not set successfully."
    End If
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

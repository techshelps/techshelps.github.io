<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Relation Object</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Relation Object</H1>Description</P>
A <SPAN CLASS="eln">Relation</SPAN> object represents a <SPAN CLASS="pop">relationship</SPAN> between fields in tables or queries (<SPAN CLASS="pop">Microsoft&nbsp;Jet</SPAN> databases only).</P>
Remarks</P>
You can use the <SPAN CLASS="eln">Relation</SPAN> object to create new relationships and examine existing relationships in your database.</P>
Using a <SPAN CLASS="eln">Relation</SPAN> object and its properties, you can:</P>
<SPAN CLASS="list"><UL><LI CLASS="ULI1">Specify an enforced relationship between fields in <SPAN CLASS="pop">base tables</SPAN> (but not a relationship that involves a query or a <SPAN CLASS="pop">linked table</SPAN>).</LI><LI CLASS="ULI1">Establish unenforced relationships between any type of table or query — native or linked.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Name</SPAN> property to refer to the relationship between the fields in the referenced <SPAN CLASS="pop">primary table</SPAN> and the referencing <SPAN CLASS="pop">foreign table</SPAN>.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Attributes</SPAN> property to determine whether the relationship between fields in the table is <SPAN CLASS="pop">one-to-one</SPAN> or <SPAN CLASS="pop">one-to-many</SPAN> and how to enforce referential integrity.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Attributes</SPAN> property to determine whether the Microsoft&nbsp;Jet database engine can perform cascading update and cascading delete operations on primary and foreign tables.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Attributes</SPAN> property to determine whether the relationship between fields in the table is <SPAN CLASS="pop">left join</SPAN> or <SPAN CLASS="pop">right join</SPAN>.</LI><LI CLASS="ULI1">Use the <SPAN CLASS="eln">Name</SPAN> property of all <SPAN CLASS="eln">Field</SPAN> objects in the <SPAN CLASS="eln">Fields</SPAN> collection of a <SPAN CLASS="eln">Relation</SPAN> object to set or return the names of the fields in the primary key of the referenced table, or the <SPAN CLASS="eln">ForeignName</SPAN> property settings of the <SPAN CLASS="eln">Field</SPAN> objects to set or return the names of the fields in the foreign key of the referencing table.
</LI></UL></SPAN>If you make changes that violate the relationships established for the database, a trappable error occurs. If you request <SPAN CLASS="pop">cascading update</SPAN> or <SPAN CLASS="pop">cascading delete</SPAN> operations, the Microsoft&nbsp;Jet database engine also modifies the <SPAN CLASS="pop">primary</SPAN> or <SPAN CLASS="pop">foreign key</SPAN> tables to enforce the relationships you establish.</P>
For example, the Northwind database contains a relationship between an Orders table and a Customers table. The CustomerID field of the Customers table is the primary key, and the CustomerID field of the Orders table is the foreign key. For Microsoft&nbsp;Jet to accept a new record in the Orders table, it searches the Customers table for a match on the CustomerID field of the Orders table. If Microsoft&nbsp;Jet doesn't find a match, it doesn't accept the new record, and a trappable error occurs.</P>
When you enforce referential integrity, a unique <SPAN CLASS="pop">index</SPAN> must already exist for the key field of the referenced table. The Microsoft&nbsp;Jet database engine automatically creates an index with the <SPAN CLASS="eln">Foreign</SPAN> property set to act as the foreign key in the referencing table.</P>
To create a new <SPAN CLASS="eln">Relation</SPAN> object, use the <SPAN CLASS="eln">CreateRelation</SPAN> method. To refer to a <SPAN CLASS="eln">Relation</SPAN> object in a collection by its ordinal number or by its <SPAN CLASS="eln">Name</SPAN> property setting, use any of the following syntax forms:</P>
<SPAN CLASS="eln">Relations</SPAN><SPAN CLASS="l">(</SPAN>0<SPAN CLASS="l">)</SPAN></P>
<SPAN CLASS="eln">Relations</SPAN><SPAN CLASS="l">("</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">")</SPAN></P>
<SPAN CLASS="eln">Relations</SPAN><SPAN CLASS="l">![</SPAN><SPAN CLASS="p">name</SPAN><SPAN CLASS="l">]</SPAN></P>
Properties</P>
<SPAN CLASS="eln">Attributes</SPAN> property, <SPAN CLASS="eln">ForeignTable</SPAN> property, <SPAN CLASS="eln">Name</SPAN> property, <SPAN CLASS="eln">PartialReplica</SPAN> property, <SPAN CLASS="eln">Table</SPAN> property.</P>
Methods</P>
<SPAN CLASS="eln">CreateField</SPAN> method.</P>
See Also</P>
<SPAN CLASS="eln">CreateRelation</SPAN> method, <SPAN CLASS="eln">Foreign</SPAN> property.</P>
Example</P>
This example shows how an existing <SPAN CLASS="eln">Relation</SPAN> object can control data entry. The procedure attempts to add a record with a deliberately incorrect CategoryID; this triggers the error-handling routine.</P>

<pre><code>Sub RelationX()

    Dim dbsNorthwind As Database
    Dim rstProducts As Recordset
    Dim prpLoop As Property
    Dim fldLoop As Field
    Dim errLoop As Error

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set rstProducts = dbsNorthwind.OpenRecordset("Products")

    ' Print a report showing all the different parts of
    ' the relation and where each part is stored.
    With dbsNorthwind.Relations!CategoriesProducts
        Debug.Print "Properties of " &amp; .Name &amp; " Relation"
        Debug.Print "    Table = " &amp; .Table
        Debug.Print "    ForeignTable = " &amp; .ForeignTable
        Debug.Print "Fields of " &amp; .Name &amp; " Relation"
        With .Fields!CategoryID
            Debug.Print "    " &amp; .Name
            Debug.Print "        Name = " &amp; .Name
            Debug.Print "        ForeignName = " &amp; .ForeignName
        End With
    End With

<B>    </B>' Attempt to add a record that violates the relation.
    With rstProducts
        .AddNew
        !ProductName = "Trygve's Lutefisk"
        !CategoryID = 10
        On Error GoTo Err_Relation
        .Update
        On Error GoTo 0
        .Close
    End With

    dbsNorthwind.Close
    
    Exit Sub
    
Err_Relation:

    ' Notify user of any errors that result from
    ' the invalid data.
    If DBEngine.Errors.Count &gt; 0 Then
        For Each errLoop In DBEngine.Errors
            MsgBox "Error number: " &amp; errLoop.Number &amp; _
                vbCr &amp; errLoop.Description
        Next errLoop
    End If
    
    Resume Next

End Sub</code></pre>
Example (Microsoft&nbsp;Access)</P>
The following example removes the existing relationship between an Employees table and an Orders table and then re-creates the relationship by creating a new <SPAN CLASS="eln">Relation</SPAN> object.</P>

<pre><code>Sub NewRelation()
    Dim dbs As Database
    Dim fld As Field, rel As Relation
    
    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Find existing EmployeesOrders relation.
    For Each rel In dbs.Relations
        If rel.TABLE = "Employees" And rel.ForeignTable = "Orders" Then
            ' Prompt user before deleting relation.
            If MsgBox(rel.Name &amp; " already exists. " &amp; vbCrLf _
                &amp; "This relation will be deleted and re-created.", vbOK) = vbOK Then
                dbs.Relations.Delete rel.Name
            ' If user chooses Cancel, exit procedure.
            Else
                Exit Sub
            End If
        End If
    Next rel
    ' Create new relationship and set its properties.
    Set rel = dbs.CreateRelation("EmployeesOrders", "Employees", "Orders")
    ' Set Relation object attributes to enforce referential integrity.
    rel.Attributes = dbRelationDeleteCascade + dbRelationUpdateCascade
    ' Create field in Fields collection of Relation object.
    Set fld = rel.CreateField("EmployeeID")
    ' Provide name of foreign key field.
    fld.ForeignName = "EmployeeID"
    ' Append field to Relation object and Relation object to database.
    rel.Fields.Append fld
    dbs.Relations.Append rel
    MsgBox "Relation '" &amp; rel.Name &amp; "' created."
    Set dbs = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

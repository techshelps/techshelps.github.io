<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Size Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H1>Size Property</H1>Applies To</P>
<SPAN CLASS="eln">Field</SPAN> object.</P>
Description</P>
Sets or returns a value that indicates the maximum size, in bytes, of a Field object.</P>
Settings and Return Values</P>
The setting or return value is a constant that indicates the maximum size of a <SPAN CLASS="eln">Field</SPAN> object. For an object not yet appended to the Fields collection, this property is read/write. The setting depends on the <SPAN CLASS="eln">Type</SPAN> property setting of the <SPAN CLASS="eln">Field</SPAN> object, as discussed under Remarks.</P>
Remarks</P>
For fields (other than Memo type fields) that contain character data, the <B>Size</B> property indicates the maximum number of characters that the field can hold. For numeric fields, the <B>Size</B> property indicates how many bytes of storage are required.</P>
Use of the <SPAN CLASS="eln">Size</SPAN> property depends on the object that contains the <SPAN CLASS="eln">Fields</SPAN> collection to which the <SPAN CLASS="eln">Field</SPAN> object is appended, as shown in the following table.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="131pt" VALIGN="TOP"><COL WIDTH="228pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Object appended to</P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Usage</P></TD></TR><TR><TD  VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"></P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Index</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">QueryDef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Recordset</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">Relation</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Not supported</P></TD></TR><TR><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><SPAN CLASS="eln">TableDef</SPAN></P></TD><TD VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Read-only</P></TD></TR></TBODY></TABLE>
<BR></P>When you create a <SPAN CLASS="eln">Field</SPAN> object with a data type other than Text, the Type property setting automatically determines the <SPAN CLASS="eln">Size</SPAN> property setting; you don't need to set it. For a <SPAN CLASS="eln">Field</SPAN> object with the Text data type, however, you can set <SPAN CLASS="eln">Size</SPAN> to any integer up to the maximum text size (255 for Microsoft Jet databases). If you do not set the size, the field will be as large as the database allows.</P>
For Long Binary and Memo <SPAN CLASS="eln">Field</SPAN> objects, <SPAN CLASS="eln">Size</SPAN> is always set to 0. Use the <SPAN CLASS="eln">FieldSize</SPAN> property of the <SPAN CLASS="eln">Field</SPAN> object to determine the size of the data in a specific record. The maximum size of a Long Binary or Memo field is limited only by your system resources or the maximum size that the database allows.</P>
See Also</P>
<SPAN CLASS="eln">Attributes</SPAN> property, <SPAN CLASS="eln">Index</SPAN> object, <SPAN CLASS="eln">Type</SPAN> property.</P>
Specifics (Microsoft Access)</P>
The <SPAN CLASS="eln">Size</SPAN> property is equivalent to the <SPAN CLASS="eln">FieldSize</SPAN> property in <SPAN CLASS="pop">table Design view</SPAN>. You can't set the <SPAN CLASS="eln">FieldSize</SPAN> property by using Visual&nbsp;Basic; you must use the <SPAN CLASS="eln">Size</SPAN> property instead.</P>
In Microsoft Access, the <SPAN CLASS="pop">Memo</SPAN> data type field can contain up to 1.2 gigabytes of information. However, Microsoft Access only displays the first 32 kilobytes of data in a control on a form or report.</P>
Example</P>
This example demonstrates the <SPAN CLASS="eln">Size</SPAN> property by enumerating the names and sizes of the <SPAN CLASS="eln">Field</SPAN> objects in the Employees table.</P>

<pre><code>Sub SizeX()

    Dim dbsNorthwind As Database
    Dim tdfEmployees As TableDef
    Dim fldNew As Field
    Dim fldLoop As Field

    Set dbsNorthwind = OpenDatabase("Northwind.mdb")
    Set tdfEmployees = dbsNorthwind.TableDefs!Employees

    With tdfEmployees

        ' Create and append a new Field object to the
        ' Employees table.
        Set fldNew = .CreateField("FaxPhone")
        fldNew.Type = dbText
        fldNew.Size = 20
        .Fields.Append fldNew

        Debug.Print "TableDef: " &amp; .Name
        Debug.Print "    Field.Name - Field.Type - Field.Size"

        ' Enumerate Fields collection; print field names,
        ' types, and sizes.
        For Each fldLoop In .Fields
            Debug.Print "        " &amp; fldLoop.Name &amp; " - " &amp; _
                fldLoop.Type &amp; " - " &amp; fldLoop.Size
        Next fldLoop

        ' Delete new field because this is a demonstration.
        .Fields.Delete fldNew.Name

    End With

    dbsNorthwind.Close

End Sub</code></pre>
Example (Microsoft Access)</P>
The following example creates a new <SPAN CLASS="eln">Field</SPAN> object and sets its <SPAN CLASS="eln">Size</SPAN> and <SPAN CLASS="eln">Type</SPAN> properties. The procedure then appends the new object to the <SPAN CLASS="eln">Fields</SPAN> collection of the Employees table in the <SPAN CLASS="eln">TableDefs</SPAN> collection of the database.</P>

<pre><code>Sub NewField()
    Dim dbs As Database, tdf As TableDef
    Dim fld As Field

    ' Return reference to current database.
    Set dbs = CurrentDb
    ' Return reference to Employees table.
    Set tdf = dbs.TableDefs!Employees
    ' Create Field object.
    Set fld = tdf.CreateField("DaysOfVacation")
    ' Set field properties.
    fld.Type = dbText
    fld.Size = 20
    ' Append fld to Fields collection.
    tdf.Fields.Append fld
    Set dbs = Nothing
End Sub</code></pre>
You can also use the <SPAN CLASS="eln">CreateField</SPAN> method to set the <SPAN CLASS="eln">Name</SPAN>, <SPAN CLASS="eln">Type</SPAN>, and <SPAN CLASS="eln">Size</SPAN> properties if you provide <SPAN CLASS="p">name, type,</SPAN> and <SPAN CLASS="p">size</SPAN> as arguments.</P>

<pre><code>Set fld = tdfEmployees.CreateField("DaysOfVacation", dbText, 20)</code></pre>
Example (Microsoft Excel)</P>
This example copies to Sheet1 all fields of the <SPAN CLASS="lee">Double</SPAN> type from Orddtail.dbf, a dBASE IV table located in the C:\Program Files\Common Files\Microsoft Shared<BR>\MSquery folder. (In Windows&nbsp;NT, Orddtail.dbf is located in the C:\Windows\Msapps\Msquery folder.)</P>

<pre><code>Dim db As Database, recordsToCopy As Recordset, tDef As Recordset
Dim fieldsToStore(1000), fileName As String
fileName = "ORDDTAIL.DBF"
Set db = _
Workspaces(0).OpenDatabase("C:\Program Files\Common Files" _
    &amp; "\Microsoft Shared\MSquery", False, False, "dBASE IV")
Set tDef = db.OpenRecordset(fileName)
n = 0
Sheets("Sheet1").Activate
For i = 0 To tDef.Fields.Count - 1
    If tDef.Fields(i).Type = dbDouble Then
        fieldsToStore(n) = tDef.fields(i).Name
        n = n + 1
    End If
Next
If fieldsToStore(0) = "" Then
    MsgBox "There are no number fields in this table."
    Exit Sub
End If
For i = 0 To n - 1
    records = "SELECT " &amp; "[" &amp; fieldsToStore(i) &amp; "]" _
        &amp; " from " &amp; db.Recordsets(fileName).Name &amp; ";"
    Set recordsToCopy = db.OpenRecordset(records)
    With ActiveSheet.Cells(1, i + 1)
        .CopyFromRecordset recordsToCopy
        .ColumnWidth = recordsToCopy.fields(0).Size
    End With
Next
recordsToCopy.Close
tDef.Close
db.Close</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

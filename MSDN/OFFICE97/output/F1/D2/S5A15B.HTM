<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object Property</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Object Property</H2>Applies To</P>
ActiveX control, Bound Object Frame control, Chart control, Unbound Object Frame control.</P>
Description</P>
You can use the <SPAN CLASS="eln">Object</SPAN> property in Visual Basic to return a reference to the <SPAN CLASS="pop">Automation object</SPAN> that is associated with a <SPAN CLASS="pop">linked</SPAN> or <SPAN CLASS="pop">embedded</SPAN> <SPAN CLASS="pop">OLE object</SPAN> in a <SPAN CLASS="pop">control</SPAN>. By using this reference, you can access the properties or invoke the methods of the OLE object.</P>
Setting</P>
The <SPAN CLASS="eln">Object</SPAN> property returns a reference to an Automation object. You can use the Set statement to assign this Automation object to an object variable. The type of object reference returned depends on which application created the OLE object.</P>
The <SPAN CLASS="eln">Object</SPAN> property setting is read-only in all views.</P>
Remarks</P>
When you embed or link an OLE object in a Microsoft Access form, you can set properties that determine the type of object and the behavior of the container control. However, you can't directly set or read the OLE object's properties or apply its methods, as you can when performing Automation. The <SPAN CLASS="eln">Object</SPAN> property returns a reference to an Automation object that represents the linked or embedded OLE object. By using this reference, you can change the OLE object by setting or reading its properties or applying its methods. For example, Microsoft Excel is an <SPAN CLASS="pop">ActiveX component</SPAN> that supports <SPAN CLASS="pop">Automation</SPAN>. If you've embedded a Microsoft Excel worksheet in a Microsoft Access form, you can use the <SPAN CLASS="eln">Object</SPAN> property to set a reference to the <SPAN CLASS="eln">Worksheet</SPAN> object associated with that worksheet. You can then use any of the properties and methods of the <SPAN CLASS="eln">Worksheet</SPAN> object.</P>
For information on which properties and methods an Automation object supports, see the documentation for the application that was used to create the OLE object.</P>
Example</P>
The following example uses the <SPAN CLASS="eln">Object</SPAN> property of an unbound object frame named OLE1. Customer name and address information is inserted in an embedded Microsoft Word document formatted as a form letter with placeholders for the name and address information and boilerplate text in the body of the letter. The procedure replaces the placeholder information for each record and prints the form letter. It doesn't save copies of the printed form letter.</P>

<pre><code>Sub PrintFormLetter_Click()
    Dim objWord As Object
    Dim strCustomer As String, strAddress As String
    Dim strCity As String, strRegion As String

    ' Assign object property of control to variable.
    Set objWord = Me!OLE1.Object.Application.Wordbasic
    ' Assign customer address to variables.
    strCustomer = Me!CompanyName
    strAddress = Me!Address
    strCity = Me!City &amp; ", "
    If Not IsNull(Me!Region) Then
        strRegion = Me!Region
    Else
        strRegion = Me!Country
    End If
    ' Activate ActiveX control.
    Me!OLE1.Action = acOLEActivate
    With objWord
        .StartOfDocument
        ' Go to first placeholder.
        .LineDown 2
        ' Highlight placeholder text.
        .EndOfLine 1
        ' Insert customer name.
        .Insert strCustomer
        ' Go to next placeholder.
        .LineDown
        .StartOfLine
        ' Highlight placeholder text.
        .EndOfLine 1
        ' Insert address.
        .Insert strAddress
        ' Go to last placeholder.
        .LineDown
        .StartOfLine
        ' Highlight placeholder text.
        .EndOfLine 1
        ' Insert City and Region.
        .Insert strCity &amp; strRegion
        .FilePrint
        .FileClose
    End With
    Set objWord = Nothing
End Sub</code></pre>
<HR CLASS="rr"></FONT></BODY>
</HTML>

<HTML>

<Head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Upgrading from Previous Versions of Microsoft Office</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word&nbsp;2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<!--TOPBAR_START-->

<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0 BGCOLOR="#000000">
<TR>
<TD WIDTH=100% HEIGHT=20 VALIGN=TOP>&nbsp;</TD>
</TR>
</TABLE>

<!--TOPBAR_END-->

<!--Header/Footer Info_START-->
<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=20% ALIGN=LEFT><FONT COLOR="#000000" FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 10</B></FONT></TD>
<TD WIDTH=50% ALIGN=CENTER><FONT COLOR="#000000" FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>Part 3&nbsp;&nbsp;Upgrading to Microsoft Office</B></FONT></TD>
<TD WIDTH=30% ALIGN=RIGHT><FONT COLOR="#000000" FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office Resource Kit</B></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=68%><FONT SIZE=5><B>Upgrading from Previous Versions of Microsoft Office</B></FONT></TD>
<TD WIDTH=30% VALIGN=TOP ALIGN=RIGHT>
<a href="009.htm"><IMG SRC="prevpage.gif" ALT="Previous" BORDER="0" ALIGN="RIGHT"></A>
<BR>
<BR>
<A HREF="fulltoc.htm"><IMG SRC="CNTBUTT.gif" ALT="Contents" BORDER="0" ALIGN="RIGHT"></A>
</TD>
<TD WIDTH=10% VALIGN=TOP ALIGN=RIGHT>
<a href="011.htm"><IMG SRC="nextpage.gif" ALT="Next" BORDER="0" ALIGN=RIGHT></A>
<BR>
<BR>
<A HREF="a.htm"><IMG SRC="indxbutt.gif" ALT="Index" BORDER="0" ALIGN=RIGHT></A>

</TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>




<P>
<FONT SIZE=3><B>In This Chapter</B></FONT>
<BR>
<A HREF="#ORK010C1">Overview</A>
<BR>
<A HREF="#ORK010C2">Upgrading from Microsoft
Office&nbsp;95 for Windows</A>
<BR>
<A HREF="#ORK010C3">Upgrading from Microsoft
Office 4.x</A>
<BR>
<A HREF="#ORK010C4">Upgrading from Microsoft
Office 3.x for Windows</A>
<BR>
<A HREF="#ORK010C5">Porting Your 16&#173;bit
Office&#173;Based Solutions to&nbsp;32&#173;bit&nbsp;Office</A>
<BR>

<P>
<FONT SIZE=3><B>See Also</B></FONT>

<P>
<UL TYPE="square">
<P>
<LI>For a summary of new and
improved features in Office&nbsp;97 (Windows) and Office&nbsp;98 (Macintosh), see Chapter&nbsp;2, "<a href="002.htm">What's New
in Microsoft Office</A>."
<P>
<LI>For
information about installing Office applications, see Chapter&nbsp;4,
"<a href="004.htm">Installing
Microsoft Office</A>."
<P>
<LI>For information
about switching to Office from competitive applications, see Chapter&nbsp;16,
"<a href="016.htm">Switching
to Microsoft Office</A>."
<P>
</UL>
<P>
This chapter tells you what to expect when you or your workgroup
upgrades from a previous version of Microsoft Office.
<P>
The remaining chapters in Part&nbsp;3, "<A HREF="fulltoc.htm#part3">Upgrading
to Microsoft Office</A>," provide detailed information
about upgrading from individual Office&nbsp;97 and Office&nbsp;98 applications.
<P>
<A NAME="ORK010C1"></A>
</MENU></MENU></MENU>
<!--ToTop_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>
<TR><TD align=right><TABLE cellpadding=0 cellspacing=0 border=0><TR><TD><A href="#top"><FONT SIZE=1 FACE="VERDANA,ARIAL,HELVETICA">Top</FONT></A></TD><TD><A href="#top"><IMG SRC="ar_up.gif" WIDTH=11 HEIGHT=7 BORDER=0 ALIGN=MIDDLE></A></TD></TR></TABLE>
</TD></TR>

</TABLE>
<HR>
<!--ToTop_END-->
<MENU>
<FONT SIZE=5><B><A NAME="CH010H101">Overview</A></B></FONT>
<MENU><MENU>

<P>
Office&nbsp;97 for Windows and Office&nbsp;98 for the Macintosh are designed to make upgrading your workgroup or
organization a less painful task than previous upgrades. Office Setup includes new features that preserve user settings and files
from previous versions of Office, and remove unneeded files. Office supports a variety of installation strategies for workgroups,
including installation through Microsoft Systems Management Server
or the Network Installation Wizard (Windows only). For more information about
network installations, see Chapter&nbsp;4, "<a href="004.htm">Installing
Microsoft Office</A>."
<P>
After Office is installed, you can take advantage of features
that make it easier to share documents between users of different
versions of Office and other applications. For example, you can
specify that Excel&nbsp;97 and Microsoft Word&nbsp;97
save documents in Excel&nbsp;95 and Word&nbsp;95 format.
For more information about supporting a gradual upgrade, see the
remaining chapters in Part&nbsp;3, "<A HREF="fulltoc.htm#part3">Upgrading
to Microsoft Office</A>."
<P>
</MENU></MENU>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT SIZE=2 FACE="VERDANA,ARIAL,HELVETICA"><FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you install Office&nbsp;97 on computers running Windows&nbsp;NT
Workstation version&nbsp;3.51, Office&nbsp;97 automatically enables
features that are available with Windows&nbsp;NT Workstation version&nbsp;4.0
when you upgrade your version of the Windows&nbsp;NT operating
system. For example, when you upgrade to Windows&nbsp;NT Workstation&nbsp;4.0,
the Office&nbsp;97 applications provide the same level of support
for your Briefcase application that they do under Windows&nbsp;95.</FONT>
</TD></TR>
</TABLE>
<MENU><MENU>
<P>
<A NAME="ORK010C2"></A>
</MENU></MENU></MENU>
<!--ToTop_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>
<TR><TD align=right><TABLE cellpadding=0 cellspacing=0 border=0><TR><TD><A href="#top"><FONT SIZE=1 FACE="VERDANA,ARIAL,HELVETICA">Top</FONT></A></TD><TD><A href="#top"><IMG SRC="ar_up.gif" WIDTH=11 HEIGHT=7 BORDER=0 ALIGN=MIDDLE></A></TD></TR></TABLE>
</TD></TR>

</TABLE>
<HR>
<!--ToTop_END-->
<P>
<MENU>
<a name="dex1"></a>
<FONT SIZE=5><B><A NAME="CH010H102">Upgrading from Microsoft Office&nbsp;95 for Windows</A></B></FONT>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT SIZE=2 FACE="VERDANA,ARIAL,HELVETICA">All of the desktop applications&nbsp;&#151; Microsoft Access, Microsoft Excel, Microsoft PowerPoint, and Word&nbsp;&#151;
change file formats between Office&nbsp;95 and Office&nbsp;97.
Office&nbsp;97 also introduces a new electronic mail (e&#173;mail)
client and desktop information manager, Microsoft Outlook.</FONT>
</TD></TR>
</TABLE>
<MENU><MENU>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Office&nbsp;95
applications are identified as version 7.0 in some technical documentation.
In the Office Resource Kit, they are referred to as Access&nbsp;95, Excel&nbsp;95, PowerPoint&nbsp;95, Schedule+&nbsp;95, and Word&nbsp;95, respectively.
<P>
<FONT SIZE=2 COLOR="#0000FF"><B>Tip&nbsp;&nbsp;&nbsp;</B></FONT>In
Windows&nbsp;95 and Windows&nbsp;NT Workstation version&nbsp;4.0,
you can use a system policy to define the default value for the
<B>Save as type</B> option in the <B>Save As</B> dialog box (<B>File</B>
menu) for all Office&nbsp;97 users in your workgroup (except for
users of Access and Outlook, which do not support this
option). In the Windows System Policy Editor, set the following
policies:
<P>
<B>User\Excel\Tools_Options\Transition\Default Save</B>
<P>
<B>User\PowerPoint\Tools_Options\Save\Default Save</B>
<P>
<B>User\Word\Tools_Options\Save\Default Save</B>
<P>
For more information, see "<a href="007.htm#CH007H101">Using
Windows System Policies to Customize Office</A>" in
Chapter&nbsp;7, "Customizing and Optimizing Microsoft Office."
<P>
<FONT SIZE=4><B><A NAME="CH010H201">Upgrading Microsoft Access&nbsp;95</A>
</B></FONT>

<P>
<a name="dex2"></a>
<P>
Access&nbsp;97 can read databases saved in Access&nbsp;95 format using a process called enabling. After an Access&nbsp;95 database is enabled, Access&nbsp;97 can read data and run queries, forms, reports, macros, and Microsoft Visual Basic for Applications code in the database. Enabling an Access&nbsp;95 database does not change the format, so Access&nbsp;97 users can share the database with Access&nbsp;95 users.
<P>
As an alternative to enabling a database, Access&nbsp;97
can establish links to tables in an Access&nbsp;95 database.
All Access&nbsp;95 database objects, including macros
and Visual Basic code, can also be converted to Access&nbsp;97
format.
<P>
If you need to move Access&nbsp;97 data to an Access&nbsp;95 database, Access&nbsp;97 can export only tables. You cannot export any other database objects to the Access&nbsp;95 database, including queries, macros, forms, reports, and modules.
<P>
For more information about upgrading to Access&nbsp;97,
see Chapter&nbsp;11, "<a href="011.htm">Upgrading
from Previous Versions of Microsoft Access</A>."
<P>
<FONT SIZE=4><B><A NAME="CH010H202">Upgrading Microsoft Excel&nbsp;95</A>
</B></FONT>

<P>
Excel&nbsp;97 (Windows) and Excel&nbsp;98 (Macintosh) can read documents saved in Excel&nbsp;95 format and run macros created in Excel&nbsp;95.
For users who have not yet upgraded, Excel&nbsp;97 and Excel&nbsp;98 can
also save workbooks in the dual 97 and 5.0/95 file format so that
users of both Excel version 5.0 or 95 and Excel&nbsp;97 can open and edit the same workbooks. For more information,
see "<a href="012.htm#CH012H104">Sharing
Workbooks with Microsoft Excel&nbsp;5.0 or 95</A>" in Chapter&nbsp;12,
"Upgrading from Previous Versions of Microsoft Excel."
<P>
<FONT SIZE=4><B><A NAME="CH010H203">Upgrading PowerPoint&nbsp;95</A></B></FONT>

<P>
PowerPoint&nbsp;97 can open and save presentations in PowerPoint&nbsp;95
format. PowerPoint&nbsp;97 can also save presentations in the
dual PowerPoint&nbsp;95 &amp; 97 file format so that users
of both PowerPoint&nbsp;95 and PowerPoint&nbsp;97 can open and
edit the same presentations. For more information, see "<a href="014.htm#CH014H103">Sharing
Presentations with PowerPoint&nbsp;95</A>" in Chapter&nbsp;14,
"Upgrading from Previous Versions of Microsoft PowerPoint."
<P>
<FONT SIZE=4><B><A NAME="CH010H204">Upgrading Word</A> 95</B></FONT>

<P>
Word&nbsp;97 (Windows) and Word&nbsp;98 (Macintosh) can read documents saved in Word&nbsp;95 format and run
macros created in Word&nbsp;95. For users who have not yet upgraded,
Word&nbsp;95 can also read documents saved in Word&nbsp;97 and Word&nbsp;98 format. To open a Word&nbsp;97 document in Word&nbsp;95, you must first install
the Word&nbsp;97 text converter for Word&nbsp;95. For more information,
see "<a href="015.htm#CH015H103">Sharing
Documents with Word&nbsp;6.0 or 95 for Windows</A>" in Chapter&nbsp;15,
"Upgrading from Previous Versions of Microsoft Word."
<P>
<FONT SIZE=4><B><A NAME="CH010H205">Upgrading Your Office&nbsp;95 Electronic
Mail Client</A></B></FONT>

<P>
Office&nbsp;95 did not include any new e&#173;mail clients, but
Outlook can upgrade both the Microsoft Exchange client included
with Windows&nbsp;95 (Microsoft Mail information service) and
the e&#173;mail clients included with Exchange Server.
<P>
When your Office users upgrade to Outlook, Exchange Client users can:
<P>
<UL TYPE="square">
<P>
<LI>Send e&#173;mail to Outlook
users.
<P>
<LI>Open Outlook folders.
<P>
<LI>Use
the Outlook standard message form.
<P>
</UL>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Exchange Client users cannot use Outlook views, custom forms,
or custom commands.
<P>
To continue sharing information with Exchange Client
users, Outlook users can:
<P>
<UL TYPE="square">
<P>
<LI>Send e&#173;mail to Exchange Client users.
<P>
<LI>Open Exchange
Client folders.
<P>
<LI>Use Exchange Client
views.
<P>
<LI>Save views in Exchange Client
format.
<P>
<LI>Use the Exchange Client standard
message form.
<P>
<LI>Use Exchange Client
custom forms and custom commands.
<P>
</UL>
<P>
For more information about using Outlook as your e&#173;mail client,
see Chapter&nbsp;13, "<a href="013.htm">Upgrading
to Microsoft Outlook</A>."
<P>
<FONT SIZE=4><B><A NAME="CH010H206">Upgrading Your Office&nbsp;95 Scheduling
Application</A></B></FONT>

<P>
<A NAME="_Toc358524374">Outlook can also replace Schedule+&nbsp;95,
the scheduling application included with Office&nbsp;95. When
your workgroup upgrades to Outlook, Schedule+&nbsp;95 users can continue
to:</A>
<P>
<UL TYPE="square">
<P>
<LI>Send meeting requests to
Outlook users.
<P>
<LI>Read Outlook free/busy status.
<P>
</UL>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Schedule+&nbsp;95 users cannot open or read an Outlook calendar file and they
cannot view an Outlook user's free/busy details.
<P>
To continue sharing information with Schedule+&nbsp;95 users, Outlook
users can:
<P>
<UL TYPE="square">
<P>
<LI>Send meeting requests to
Schedule+&nbsp;95 users.
<P>
<LI>Read Schedule+&nbsp;95 free/busy
status and details.
<P>
<LI>Open a Schedule+&nbsp;95 calendar.
<P>
</UL>
<P>
For more information about using Outlook as your scheduling application,
see Chapter&nbsp;13, "<a href="013.htm">Upgrading
to Microsoft Outlook</A>."
<P>
<FONT SIZE=4><B><A NAME="CH010H207">Upgrading Office&nbsp;95 Binders</A></B></FONT>

<P>
<a name="dex3"></a>
<P>
The Office Binder application included in Office&nbsp;97 can open
Office&nbsp;95 binders, but it cannot save in Office&nbsp;95 Binder
format. Nor can Office&nbsp;97 binder sections be moved to Office&nbsp;95
binders.
<P>
Office&nbsp;97 binder documents are not supported by previous
versions of Office for Windows. If you want to work
with binder documents on a computer running a previous version
of Office for Windows, you must first unbind the binder into its
component sections.
<P>
<a name="dex4"></a>
<P>
<B><FONT COLOR="#0000FF"><IMG SRC="Proced.gif" WIDTH=5 HEIGHT=10 BORDER=0 ALT="">&#09;To
unbind sections in a binder (Windows&nbsp;95 or Windows&nbsp;NT
Workstation&nbsp;4.0 only)</FONT></B>
<P>
<OL>
<P>
<LI>In Windows Explorer or
on the desktop, right&#173;click the binder document you want
to disassemble.
<P>
<LI>On the shortcut menu, click
<B>Unbind</B>.
<P>
The sections in the binder document are saved as separate
files in the folder that contains the binder. The original binder
remains intact.
<P>
</OL>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
Unbind command is not available in Windows&nbsp;NT Workstation&nbsp;3.51
or Windows 3.<I>x</I>.
<P>
<a name="dex5"></a>
<P>
<B><FONT COLOR="#0000FF"><IMG SRC="Proced.gif" WIDTH=5 HEIGHT=10 BORDER=0 ALT="">&#09;To
unbind sections in a binder (Windows&nbsp;NT Workstation&nbsp;3.51
only)</FONT></B>
<P>
<OL>
<P>
<LI>Open the binder document
you want to disassemble.
<P>
<LI>Select the section
that you want to unbind.
<P>
<LI>On the <B>Section</B>
menu, click <B>Save As File</B>.
<P>
<LI>Repeat Steps
2 and 3 for other sections you wish to unbind.
<P>
The sections in the binder document are saved as separate
files in the folder that contains the binder. The original binder
remains intact.
<P>
</OL>
<P>
</MENU></MENU>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>

<TR>

<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="CDO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><B><FONT SIZE=2 COLOR="#0000FF" FACE="VERDANA,ARIAL,HELVETICA">Tools and Utilities&nbsp;&nbsp;&nbsp;</FONT></B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The Office Resource Kit Tools and Utilities include the Unbind utility for Windows 3.<I>x</I>. For more information about
installing this utility, see "<A HREF="appa.htm#CHappaH233">Office
97 Unbind Utilities</A>" in Appendix&nbsp;A, "Microsoft
Office Resource Kit Tools and Utilities."</FONT>

</TD>

</TR>

</TABLE>
<MENU><MENU>
<P><a name="dex6"></a>
<B><FONT COLOR="#0000FF"><IMG SRC="Proced.gif" WIDTH=5 HEIGHT=10 BORDER=0 ALT="">&#09;To
unbind sections in a binder (Windows version 3.<I>x</I> only)</FONT></B>
<P>
<OL>
<P>
<LI>Copy the binder document
you want to disassemble to a computer running Windows 3.<I>x</I>.
<P>
<LI>Double&#173;click
Unbind.exe.
<P>
<LI>In the <B>Open</B> dialog box, select
the binder and click <B>Open</B>.
<P>
The sections in the binder document are saved as separate
files in the folder that contains the binder. The original binder
remains intact.
<P>
<LI>Repeat Step 3 for each binder
you want to disassemble.
<P>
</OL>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>When
you disassemble a binder document, the unbound sections must be
in a format that Office version 4.<I>x</I> or earlier applications can
read. For more information about sharing documents between different
versions of a particular application, see the relevant chapter
in Part&nbsp;3, "<A HREF="fulltoc.htm#part3">Upgrading to Microsoft Office</A>."
<P>
<TABLE WIDTH=70% VALIGN="TOP" CELLPADDING=15 CELLSPACING=0 BORDER=1 BORDERCOLOR=#0000FF><TR BGCOLOR="#FFFFFF"><TD>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex43"></a>
<B>Using Office&nbsp;95 Binders with Office&nbsp;98 for the Macintosh</B>
<P>
Office&nbsp;97 for Windows binder documents are not supported by Office&nbsp;98 for the Macintosh. To work with binder contents on a Macintosh
computer, you must first unbind the binder into its component
sections.
<P>
Follow these steps for each binder you want to disassemble:
<P>
<UL TYPE="square"><LI>Copy the binder document to a Macintosh computer.
<P>
<LI>Double&#173;click
Microsoft Office Unbind, and then click <B>Open</B> <B>binder</B>
on the <B>File</B> menu.
<P>
<LI>In the dialog box, select the
binder and click <B>Open</B>.
<P>
</UL>
<P>
The sections in the binder document are saved as separate files
in the folder that contains the binder. The original binder remains
intact.
<br>
</FONT></TD></TR>
</TABLE>

<P>
</MENU></MENU>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>

<TR>

<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="CDO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><B><FONT SIZE=2 COLOR="#0000FF" FACE="VERDANA,ARIAL,HELVETICA">Note&nbsp;&nbsp;&nbsp;</FONT></B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The Office 98 Value Pack for the Macintosh includes the Unbind Utility that separates Office&nbsp;97 binders into their component files. You must install the Unbind Utility from the Office 98 Value Pack. For more information about the Value Pack, see "<a href="004.htm#CH004H221">Installing Value Pack Components</A>" in Chapter 4, "Installing Microsoft Office."</FONT>
</TD>
</TR>
</TABLE>
<MENU><MENU>
<P>
<A NAME="ORK010C3"></A>
</MENU></MENU></MENU>
<!--ToTop_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>
<TR><TD align=right><TABLE cellpadding=0 cellspacing=0 border=0><TR><TD><A href="#top"><FONT SIZE=1 FACE="VERDANA,ARIAL,HELVETICA">Top</FONT></A></TD><TD><A href="#top"><IMG SRC="ar_up.gif" WIDTH=11 HEIGHT=7 BORDER=0 ALIGN=MIDDLE></A></TD></TR></TABLE>
</TD></TR>

</TABLE>
<HR>
<!--ToTop_END-->
<MENU>
<FONT SIZE=5><B><A NAME="CH010H103">Upgrading from Microsoft Office&nbsp;4.x for Windows or the Macintosh</A></B></FONT>
<MENU><MENU>

<P>
<a name="dex7"></a>
<P>
All of the desktop applications&nbsp;&#151; Access
(Windows only), Excel, PowerPoint, and Word&nbsp;&#151;
change file formats between Office 4.<I>x</I> and
Office&nbsp;97 for Windows and Office&nbsp;98 for the Macintosh. Office&nbsp;97 (Windows) also introduces a new e&#173;mail
client and desktop information manager, Outlook. Office&nbsp;98 (Macintosh) introduces a new e-mail client, Outlook Express.
<P>
</MENU></MENU>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT SIZE=2 FACE="VERDANA,ARIAL,HELVETICA"><FONT COLOR="#0000FF"><B>Tip&nbsp;&nbsp;&nbsp;</B></FONT>In
Windows&nbsp;95 and Windows&nbsp;NT Workstation&nbsp;4.0, you
can use a system policy to define the default value for the <B>Save
as type</B> option in the <B>Save As</B> dialog box (<B>File</B>
menu) for all Office&nbsp;97 users in your workgroup (except for
users of Access and Outlook, which do not support this
option). In the Windows System Policy Editor, set the following
policies:</font>
</TD></TR>
</TABLE>
<MENU><MENU>
<P>
<B>User\Excel\Tools_Options\Transition\Default Save</B>
<P>
<B>User\PowerPoint\Tools_Options\Save\Default Save</B>
<P>
<B>User\Word\Tools_Options\Save\Default Save</B>
<P>
For more information, see "<a href="007.htm#CH007H101">Using
Windows System Policies to Customize Office</A>" in
Chapter&nbsp;7, "Customizing and Optimizing Microsoft Office."
<P>
<FONT SIZE=4><B><A NAME="CH010H208">Upgrading Microsoft Access&nbsp;2.0</A></B></FONT>
<P>
<a name="dex8"></a>
</MENU></MENU>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD>
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Using a process called enabling, Access&nbsp;97 can read data and run queries, forms, reports, macros, and Access Basic code in an Access version 2.0 database without
changing the format. This allows Access&nbsp;97 users
to share data with Access&nbsp;2.0 users. As an alternative
to enabling, Access&nbsp;97 can establish links from
an Access&nbsp;97 database to tables in an Access
2.0 database.</font></TD>
</TR>
</TABLE>
<MENU><MENU>

<P>
All Access&nbsp;2.0 database objects, including macros and
Access Basic code, can also be converted to Access&nbsp;97
format. However, Access Basic code that relies on 16&#173;bit
DLLs and API calls must be modified to run in a 32&#173;bit application.
For more information, see "<A HREF="#ORK010C5">Porting
Your 16-bit Office-Based Solutions to 32-bit Office</A>"
later in this chapter.
<P>
If you need to move Access&nbsp;97 data to an Access&nbsp;2.0 database, Access&nbsp;97 can export only tables. You cannot export any other database objects to the Access&nbsp;2.0 database, including queries, macros, forms, reports, and modules.
<P>
For more information about upgrading to Access&nbsp;97,
see Chapter&nbsp;11, "<a href="011.htm">Upgrading
from Previous Versions of Microsoft Access</A>."
<P>
<FONT SIZE=4><B><A NAME="CH010H209">Upgrading Microsoft Excel&nbsp;5.0</A>
</B></FONT>

<P>
Excel&nbsp;97 for Windows and Excel&nbsp;98 for the Macintosh can read documents saved in Excel&nbsp;5.0 format, and save documents in Excel&nbsp;5.0 format. Excel&nbsp;97 and Excel&nbsp;98 can also run macros created in Excel&nbsp;5.0; however, macros that make 16&#173;bit
DLL or API calls may require changes before they can be run in
a 32&#173;bit application. For more information, see "<A HREF="#ORK010C5">Porting Your 16-bit Office-Based Solutions
to 32-bit Office</A>" later in this chapter.
<P>
For users who have not yet upgraded, Excel&nbsp;97 and Excel&nbsp;98 can
also save workbooks in the dual 97 and 5.0/95 file format so that
users of both Excel&nbsp;5.0 or 95 and Excel&nbsp;97 or Excel&nbsp;98 can open and edit the same workbooks. For more information, see
"<a href="012.htm#CH012H104">Sharing
Workbooks with Microsoft Excel&nbsp;5.0 or 95</A>" in Chapter&nbsp;12,
"Upgrading from Previous Versions of Microsoft Excel."
<P>
<FONT SIZE=4><B><A NAME="CH010H210">Upgrading PowerPoint&nbsp;4.0</A></B></FONT>

<P>
PowerPoint&nbsp;97 for Windows and PowerPoint&nbsp;98 for the Macintosh can open and save presentations in PowerPoint version&nbsp;4.0
format. For more information about upgrading to PowerPoint&nbsp;97 or PowerPoint&nbsp;98, see "<a href="014.htm#CH014H104">Upgrading
from PowerPoint 4.0</A>" in Chapter&nbsp;14, "Upgrading
from Previous Versions of Microsoft PowerPoint."
<P>
<FONT SIZE=4><B><A NAME="CH010H211">Upgrading Word&nbsp;6.0</A></B></FONT>

<P>
Word&nbsp;97 for Windows and Word&nbsp;98 for the Macintosh can read documents saved in Word version 6.0 format and save documents in Word&nbsp;6.0 format. Word&nbsp;97 and Word&nbsp;98 can also
run macros created in Word&nbsp;6.0; however, macros that make
16&#173;bit DLL or API calls may require changes before they can
be run in a 32&#173;bit application. For more information, see
"<A HREF="#ORK010C5">Porting Your 16-bit Office-Based
Solutions to 32-bit Office</A>" later in this chapter.
<P>
For users who have not yet upgraded, Word&nbsp;6.0 can also read
documents saved in Word&nbsp;97 or 98 format. To open a Word&nbsp;97 or 98 document in Word&nbsp;6.0, you must first install the Word&nbsp;97
text converter for Word&nbsp;6.0. For more information, see "<a href="015.htm#CH015H103">Sharing
Documents with Word&nbsp;6.0 or 95 for Windows</A>" in Chapter&nbsp;15,
"Upgrading from Previous Versions of Microsoft Word."
<P>
<FONT SIZE=4><B><A NAME="CH010H212">Upgrading Your Office 4.x for Windows Electronic Mail Client</A></B></FONT>
</MENU></MENU>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
Outlook can replace Microsoft Mail version 3.<I>x</I>
for Windows, the e&#173;mail application included in Office 4.<I>x</I>.
When your workgroup upgrades to Outlook, Microsoft Mail 3.<I>x</I>
users can continue to send e&#173;mail to Outlook users.</FONT>
</TD>
</TR>
</TABLE>
<MENU><MENU>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Microsoft
Mail 3.<I>x</I> for Windows users cannot use the Outlook standard message
form. Nor can they open Outlook folders or take advantage of Outlook
views, custom forms, or custom commands.
<P>
To continue sharing information with Microsoft Mail 3.<I>x</I>
for Windows users, Outlook users can:
<P>
<UL TYPE="square">
<P>
<LI>Send e&#173;mail to Microsoft
Mail 3.<I>x</I> for Windows users.
<P>
<LI>Open
Microsoft Mail 3.<I>x</I> for Windows folders.
<P>
<LI>Use
the Microsoft Mail 3.<I>x</I> for Windows standard
message form.
<P>
<LI>Use Microsoft Mail 3.<I>x</I>
for Windows custom commands.
<P>
</UL>
<P>
For more information about using Outlook as your e&#173;mail client,
see Chapter&nbsp;13, "<a href="013.htm">Upgrading
to Microsoft Outlook</A>."
<P>
<FONT SIZE=4><B><A NAME="CH010H226">Upgrading Your Office 4.x for the Macintosh Electronic Mail Client</A></B></FONT>
<P>

</MENU></MENU>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="MACO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Small, fast, and simply designed, Microsoft Outlook Express version 4.0 for the Macintosh represents a major step forward in Internet communication. Outlook Express can replace Microsoft Internet Mail and News for the Macintosh, the e-mail application included with Microsoft Internet Explorer version 3.01, which shipped in Office 4.<I>x</I>. When your workgroup upgrades to Outlook Express, users can continue sharing information with Internet Mail and News users. Outlook Express users can:</FONT>
</TD>
</TR>
</TABLE>
<MENU><MENU>
<P>
<UL TYPE="square">
<P>
<li>Send e-mail to Microsoft Internet Mail and News version 3.01 for Macintosh users.

<P><li>Open Microsoft Internet Mail and News 3.01 for Macintosh folders.
 
</ul>
<P>For more information about using Outlook Express as your e-mail client, see Chapter 19, "<a href="019.htm">Switching to Microsoft Outlook</A>."

<P>
<FONT SIZE=4><B><A NAME="CH010H213">Upgrading Microsoft Office Manager for Windows</A></B></FONT>
<P>
<a name="dex9"></a>
</MENU></MENU>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>In Office&nbsp;95 for Windows, the Office Shortcut Bar replaced the Microsoft Office Manager from Office 4.<I>x</I>. Office&nbsp;97 includes an updated Office Shortcut Bar.</FONT>
</TD>
</TR>
</TABLE>
<MENU><MENU>
<P>
When you upgrade from Office 4.<I>x</I> to Office&nbsp;97,
Setup creates an Old Office toolbar based on the existing Office&nbsp;4.<I>x</I> Office Manager settings in the Msoffice.ini
file. Your existing button arrangement is preserved, and Setup
creates shortcuts for each button, preserving the path and working
folder information. Setup does not preserve the placement of the
old Office Manager.
<P>
Setup transfers buttons, menu items, and settings from the Office
4.<I>x</I> Microsoft Office Manager, as described
in the following table.
<P>
<TABLE WIDTH=80% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Office 4.x item</FONT></B></TD>
<TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Upgraded to Windows&nbsp;95</FONT></B>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Upgraded to Windows&nbsp;NT Workstation</FONT></B>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Button size</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred </FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred </FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Buttons in each Office application</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Access, Excel, PowerPoint, and Word buttons transferred using paths to the new Office installation</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Access, Excel, PowerPoint, and Word buttons transferred using paths to the new Office installation</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Control Panel</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to Control Panel </FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as is</FONT></TD>
</TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>File Manager</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to Windows Explorer </FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to Windows Explorer (Windows&nbsp;NT 4.0)</FONT>
<P>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as is (Windows&nbsp;NT 3.51</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Find File</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to the Office <B>Open </B>dialog box (<B>File </B>menu) </FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to the Office <B>Open </B>dialog box (<B>File </B>menu) </FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>All menu items</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Print Manager</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to the Printers folder </FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to the Printers folder (Windows&nbsp;NT 4.0)</FONT>
<P>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as is (Windows&nbsp;NT 3.51)</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Program Manager</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as is</FONT></TD>
</TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Run</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Screen Saver</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to the Office&nbsp;97 version of Screen Saver</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as a shortcut to the Office&nbsp;97 version of Screen Saver</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Show Title Screen at Startup</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Task Manager</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not transferred </FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Transferred as is</FONT></TD>
</TR>

<P>
</TABLE>
<P>
<FONT SIZE=3><B><A NAME="_Toc358536237">Toolbars on the Office Shortcut Bar</A>
</B></FONT>

<P>
<a name="dex10"></a>
<P>
In Office&nbsp;97, you can create and modify toolbars either by
working directly with the Office Shortcut Bar or by adding folders
to the Shortcut Bar. By storing shortcuts in the toolbar folders,
you can rely on Windows to track changes in the location of files.
Folders for blank toolbars and some default toolbars are stored
in the Microsoft Office\Office\Shortcut Bar folder. By default,
this folder has an Office subfolder with the default items for
the Office toolbar. Other toolbars may represent folders elsewhere
in the system.
<P>
<a name="dex11"></a>
<P>
Using the <B>Toolbars</B> tab in the <B>Customize</B> dialog box
(<B>Tools</B> menu), you can add the following toolbars to the
Office Shortcut Bar, or you can create your own. To see a list
of available toolbars, right&#173;click the background of any
toolbar.
<P>
<TABLE WIDTH=80% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>This toolbar</FONT></B></TD>
<TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Contains buttons for these applications or accessories</FONT></B>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>And is located in this source folder path</FONT></B>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Office </FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Office&nbsp;97 applications</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Microsoft Office\Office\Shortcut Bar</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>QuickShelf</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Bookshelf QuickShelf</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Microsoft Office\Office\QuickShelf</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Favorites</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Favorites folder</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows\Favorites</FONT></TD>
</TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Desktop</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows&nbsp;95 desktop</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows\Desktop</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Programs</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows&nbsp;95 Start menu</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows\Start Menu\Programs</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Accessories</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows&nbsp;95 accessories, such as Paint and Calculator</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows\Start Menu\Programs\Accessories</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Old Office</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Applications on the user's Office 4.<I>x</I> toolbar</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Microsoft Office\Office\Old Office</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>MSN </FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>MSN forums</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Microsoft Office\Office\MSN</FONT>
</TD></TR>

<P>
</TABLE>
<P>
<FONT SIZE=3><B><A NAME="_Toc358536238">Default Configurations for the Office
Shortcut Bar</A></B></FONT>

<P>
<a name="dex12"></a>
<P>
Setup configures the Office Shortcut Bar based on platform or
computer speed. The default options for various platforms and
speeds are listed in the following table.
<P>
<TABLE WIDTH=80% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Option</FONT></B></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows 640x480</FONT></B>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Windows 800x600+</FONT></B>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Always on top</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>On</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>On</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Auto Fit (title bar)</FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>On</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Auto Hide</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Docked location</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Top</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Right (Windows&nbsp;95);Top (Windows&nbsp;NT Workstation)</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Large buttons</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Show title screen</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>On</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>On</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Show ToolTips</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>On</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>On</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Smooth fill</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Standard color</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Off</FONT></TD></TR>

<P>
</TABLE>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>On
VGA (640x480) systems and in all Windows&nbsp;NT operating environments,
the Office Shortcut Bar docks at the top of the screen. For higher
resolutions, it docks to the right.
<P>
<A NAME="ORK010C4"></A>
</MENU></MENU></MENU>
<!--ToTop_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>
<TR><TD align=right><TABLE cellpadding=0 cellspacing=0 border=0><TR><TD><A href="#top"><FONT SIZE=1 FACE="VERDANA,ARIAL,HELVETICA">Top</FONT></A></TD><TD><A href="#top"><IMG SRC="ar_up.gif" WIDTH=11 HEIGHT=7 BORDER=0 ALIGN=MIDDLE></A></TD></TR></TABLE>
</TD></TR>

</TABLE>
<HR>
<!--ToTop_END-->
<MENU>
<FONT SIZE=5><B><A NAME="CH010H104">Upgrading from Microsoft Office 3.x for Windows</A></B></FONT>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>All of the Office version 3.<I>x</I> for Windows desktop applications&nbsp;&#151; Access, Excel, PowerPoint, and Word&nbsp;&#151; change file formats between
Office 3.<I>x</I> and Office&nbsp;97. Office&nbsp;97
also introduces a new e&#173;mail client and desktop information
manager, Outlook.</FONT>
</TD></TR>
</TABLE>
<MENU><MENU>
<P>
<FONT SIZE=2 COLOR="#0000FF"><B>Tip&nbsp;&nbsp;&nbsp;</B></FONT>In
Windows&nbsp;95 and Windows&nbsp;NT Workstation&nbsp;4.0, you
can use a system policy to define the default value for the <B>Save
as type</B> option in the <B>Save As</B> dialog box (<B>File</B>
menu) for all Office&nbsp;97 users in your workgroup (except for
users of Access and Outlook, which do not support this
option). In the Windows System Policy Editor, set the following
policies:
<P>
<B>User\Excel\Tools_Options\Transition\Default Save</B>
<P>
<B>User\PowerPoint\Tools_Options\Save\Default Save</B>
<P>
<B>User\Word\Tools_Options\Save\Default Save</B>
<P>
For more information, see "<a href="007.htm#CH007H101">Using
Windows System Policies to Customize Office</A>" in
Chapter&nbsp;7, "Customizing and Optimizing Microsoft Office."
<P>
<FONT SIZE=4><B><A NAME="CH010H214">Upgrading Microsoft Access</A> 1.x</B></FONT>

<P>
Using a process called enabling, Access&nbsp;97 can
read data and run queries, forms, reports, macros, and Access
Basic code in an Access version 1.<I>x</I>
database without changing the format. This allows Access&nbsp;97
users to share data with Access&nbsp;1.<I>x</I>
users. As an alternative to enabling, Access&nbsp;97
can establish links to tables in an Access&nbsp;1.<I>x</I>
database.
<P>
All Access&nbsp;1.<I>x</I> database objects,
including macros and Access Basic code, can also be converted
to 97 format. However, Access Basic code that relies on 16&#173;bit
DLLs and API calls must be modified to run in a 32&#173;bit application.
For more information, see "<A HREF="#ORK010C5">Porting
Your 16-bit Office-Based Solutions to 32-bit Office</A>"
later in this chapter.
<P>
If you need to move Access&nbsp;97 data to an Access&nbsp;1.<I>x</I> database, Access&nbsp;97 can export only tables. You cannot export any other database objects to the Access&nbsp;1.<I>x</I> database, including
queries, macros, forms, reports, and modules.
<P>
For more information about upgrading to Access&nbsp;97,
see Chapter&nbsp;11, "<a href="011.htm">Upgrading
from Previous Versions of Microsoft Access</A>."
<P>
<FONT SIZE=4><B><A NAME="CH010H215">Upgrading Microsoft Excel&nbsp;4.0</A>
</B></FONT>

<P>
Excel&nbsp;97 can read documents saved in Excel version 4.0 format and save documents in Excel&nbsp;4.0 format. Excel&nbsp;97 can also run macros created in the Excel&nbsp;4.0 XLM macro language; however, macros
that make 16&#173;bit DLL or API calls may require changes before
they can be run in a 32&#173;bit application. For more information,
see "<A HREF="#ORK010C5">Porting Your 16-bit
Office-Based Solutions to 32-bit Office</A>" later
in this chapter.
<P>
For more information about upgrading to Excel&nbsp;97,
see Chapter&nbsp;12, "<a href="012.htm">Upgrading
from Previous Versions of Microsoft Excel</A>."
<P>
<FONT SIZE=4><B><A NAME="CH010H216">Upgrading PowerPoint&nbsp;3.0</A></B></FONT>

<P>
PowerPoint&nbsp;97 can open and save presentations in PowerPoint
version 3.0 format. For more information about upgrading to PowerPoint&nbsp;97,
see "<a href="014.htm#CH014H106">Upgrading
from PowerPoint 3.0</A>" in Chapter&nbsp;14, "Upgrading
from Previous Versions of Microsoft PowerPoint."
<P>
<FONT SIZE=4><B><A NAME="CH010H217">Upgrading Word</A> 2.0</B></FONT>

<P>
Word&nbsp;97 can read documents saved in Word version 2.0 format,
and save documents in Word&nbsp;2.0 format. WordBasic macros in Word&nbsp;2.0 templates are not supported in Word&nbsp;97.
<P>
For more information about upgrading to Word&nbsp;97, see Chapter&nbsp;15,
"<a href="015.htm">Upgrading
from Previous Versions of Microsoft Word</A>."
<P>
<A NAME="ORK010C5"></A>
</MENU></MENU></MENU>
<!--ToTop_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>
<TR><TD align=right><TABLE cellpadding=0 cellspacing=0 border=0><TR><TD><A href="#top"><FONT SIZE=1 FACE="VERDANA,ARIAL,HELVETICA">Top</FONT></A></TD><TD><A href="#top"><IMG SRC="ar_up.gif" WIDTH=11 HEIGHT=7 BORDER=0 ALIGN=MIDDLE></A></TD></TR></TABLE>
</TD></TR>

</TABLE>
<HR>
<!--ToTop_END-->
<MENU>
<FONT SIZE=5><B><A NAME="CH010H105">Porting Your 16&#173;bit Office&#173;Based Solutions to&nbsp;32&#173;bit&nbsp;Office</A></B></FONT>
<P>
<a name="dex13"></a>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR>
<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="WINDOWSO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The introduction of 32&#173;bit Windows&nbsp;95 and Windows&nbsp;NT operating systems brings 32&#173;bit Office applications into common use. Many users are upgrading their Office files, macros, and solutions to the 32&#173;bit versions. This section assists you in porting solution code&nbsp;&#151; that is, code written
in the Excel macro language (XLM), WordBasic, Visual
Basic for Applications, or Access Basic&nbsp;&#151; to 32&#173;bit
versions of Office running on 32&#173;bit operating systems.</FONT>
</TD></TR>
</TABLE>
<MENU><MENU>
<P>
Changes to your existing code are required if your 16&#173;bit
Office solutions (including those created for Access
or Microsoft Project) call a 16&#173;bit Windows application
programming interface (API) or 16&#173;bit Windows dynamic&#173;link
library (DLL), and you are porting that code to a 32&#173;bit
Office application (including Access&nbsp;97 or Microsoft Project 97).
<P>
Porting your solution code is necessary because 16&#173;bit API
calls and 16&#173;bit DLL calls (referred to in this section as
API calls) do not execute correctly when the solution code containing
those calls is run in a 32&#173;bit Office application. This section
applies to solution code that uses APIs in the following products: Access, Excel, Microsoft Project, and Word.
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
your 16&#173;bit solutions continue to reside inside a 16&#173;bit
application, then they are not affected when you port them to
32&#173;bit Windows. For example, existing 16&#173;bit Office
solutions, 16&#173;bit Visual Basic, and 16&#173;bit Microsoft
FoxPro applications, even if they call 16&#173;bit APIs, run just
fine on Windows&nbsp;95 or Windows&nbsp;NT operating systems.
It is only when users want to run solutions code that includes
16&#173;bit API calls on a 32&#173;bit application that porting
is required.
<P>
To ensure that Office&#173;based solutions run successfully under
the Windows&nbsp;95 and Windows&nbsp;NT operating systems, solution
providers and developers must follow this rule: neither a 32&#173;bit
compiled application nor solution code called from a 32&#173;bit
Office application can make direct 16&#173;bit API or DLL calls.
In addition, neither a 16&#173;bit compiled application nor solution
code called from a 16&#173;bit application can make direct 32&#173;bit
API or DLL calls. This inability to make calls back and forth
between 16&#173;bit and 32&#173;bit layers occurs in both the
Windows&nbsp;95 and Windows&nbsp;NT operating systems because
of their advanced flat&#173;memory&#173;model management systems,
as well as the way in which they load&nbsp;DLLs.
<P>
<a name="dex14"></a>
<P>
To prepare for Office&nbsp;97, you must change your solution code
to make Win32<FONT SIZE=1>&#174;</FONT> API calls when the solution code is executed from
32&#173;bit Office applications. If this is not possible (for
example, you don't have access to the source code of the DLL),
you must change the solution code to <I>thunk</I>
through an intermediate DLL to make the 16&#173;bit API call.
<P>
Updating solution code to support Win32 API calls is a relatively
simple mechanical process. A more significant task is to write
code that is operating&#173;system&#173;independent (that is,
so the solution code runs on both 16&#173;bit and 32&#173;bit
Office applications). This section discusses both of these tasks,
as well as other 16&#173;to&#173;32&#173;bit API issues you may
need to handle.
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Although
you must update API calls when porting solution code to 32&#173;bit
operating systems, you do not need to change code that uses OLE
Automation or dynamic data exchange (DDE). All OLE and DDE code
continues to work regardless of whether the applications are 16&#173;bit
or 32&#173;bit. OLE and DDE insulate automation calls, so all
combinations of containers (clients) and servers (16/16, 16/32,
32/16, and 32/32) work under Windows&nbsp;95 and Windows&nbsp;NT
operating systems.
<P>
<FONT SIZE=4><B><A NAME="CH010H218">How This Section Is Organized</A></B></FONT>

<P>
<a name="dex15"></a>
<P>
The remainder of this section is organized in terms of complexity,
from the simplest upgrading scenarios to the most complex.
<P>
<UL TYPE="square">
<P>
<LI>"<A HREF="#CH010H219">Which
API Should Your Solution Code Call?</A>" is a quick
overview of which API you should be using, according to your application
needs.
<P>
<LI>"<A HREF="#CH010H220">Calling
the Win32 API</A>" describes what an API is and discusses
the issues involved in converting existing 16&#173;bit API calls
to Win32 API calls, and finding and testing the <B>Declare</B> statements.
<P>
<LI>"<A
HREF="#CH010H221">Writing a Single Code Base for 16-bit
and 32-bit Office Applications</A>" supplies code samples
for writing solution code that runs on both a 16&#173;bit and
a 32&#173;bit Office applications.
<P>
<LI>"<A
HREF="#CH010H222">Determining Whether a 32-bit Application
Is Running</A>" describes how to determine whether
your Office application is 16&#173;bit or 32&#173;bit and how
to select the appropriate 16&#173;bit or 32&#173;bit API call.
<P>
<LI>"<A
HREF="#CH010H223">Recompiling DLLs</A>" tells
you what to do to make the DLL and solution code work on Windows&nbsp;95
and Windows&nbsp;NT operating systems if your solution code calls
a custom DLL.
<P>
<LI>"<A HREF="#CH010H224">Thunking</A>"
tells you how, if you cannot recompile your DLLs, you can add
an intermediate DLL.
<P>
<LI>"<A HREF="#CH010H225">Advanced
Programming Topics</A>" explains translating C&#173;API
declarations to Visual Basic or Visual Basic for Applications.
<P>
</UL>
<P>
<FONT SIZE=4><B><A NAME="CH010H219">Which API Should Your Solution Code Call?</A></B></FONT>

<P>
<a name="dex16"></a>
<P>
When you write solution code for your own use, you write it for
the version of the Office application you have and for your operating
system. Distributing this solution to others, however, means that
you have to make it also work on their computers, which may use
different versions of Windows and Office applications.
<P>
While the operating system isn't an issue, whether the Office
application is 16&#173;bit or 32&#173;bit is important. The application,
and not the operating system, determines which API you use in
porting your solution code: you must use 16&#173;bit APIs with
16&#173;bit applications, and 32&#173;bit APIs with 32&#173;bit
applications.
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Office
(including 32&#173;bit Access and 32&#173;bit Microsoft Project) products do not run on Win32s<FONT SIZE=1>&#174;</FONT>. Because FoxPro does run
on this operating system, however, FoxPro programmers should use
the same rules for choosing the API. Also, the Win32s, Windows&nbsp;NT,
and Windows&nbsp;95 operating systems do not have identical sets
of API calls. For more information, see the Win32 SDK documentation
in the Development Library (in particular, see the Compatibility
Tables in the Win32 Programmer's Reference, Vol.&nbsp;5).
<P>
<FONT SIZE=4><B><A NAME="CH010H220">Calling the Win32 API</A></B></FONT>

<P>
<a name="dex17"></a>
<P>
To write calls to the Win32 API, you must do the following:
<P>
<UL TYPE="square">
<P>
<LI>Understand what Windows
API calls are.
<P>
<LI>Understand the differences between
16&#173;bit and 32&#173;bit Windows APIs.
<P>
<LI>Use
Win32api.txt to find the correct <B>Declare</B> statement.
<P>
<LI>Test
an API <B>Declare</B> statement.
<P>
</UL>
<P>
<FONT SIZE=3><B>What Is an API Call?</B></FONT>

<P>
<a name="dex18"></a>
<P>
An API call in C, Visual Basic, or other languages places a series
of values (parameters) at a location in memory (the <I>stack</I>)
and then requests the operating system or DLL to execute a function
(the <I>procedure call</I>) using the values provided.
The function reads the values (<I>call stack</I>)
and executes its function code using those values or the data
that the values point to.
<P>
<a name="dex19"></a>
<P>
If a result is returned, it is placed at another location (<I>return
register</I>) for the calling application to use. This is
shown in the following illustration. To ensure accuracy, the number
of bytes of data on the stack is verified before and after the
procedure is called. The message "Bad DLL calling convention"
appears when the wrong number of bytes are in the stack.
<P>
<IMG SRC="01001.gif">
<P>
<a name="dex20"></a>
<P>
In practical terms, Windows API calls are how applications request
services (screen control, printers, memory, and so forth) from
the operating system. There are approximately 300 API calls in
Windows 3.0, over 700 API calls in Windows&nbsp;3.1, and over
1,000 API calls in Windows&nbsp;95. These API calls are packaged
in executable files and DLLs found in the Windows folder&nbsp;&#151;
User.exe, Gdi.exe, and one of the following <BR>
<B>KERNEL</B> files:
Krnl286.exe, Krnl386.exe, or Kernel32.dll.
<P>
<a name="dex21"></a>
<P>
To call an API from your solution code, use these four steps:
<P>
<OL>
<P>
<LI>Identify the file containing
the API.
<P>
<LI>Determine the parameters required by
the API.
<P>
<LI>Create a <B>Declare</B> statement for
the API.
<P>
<LI>Call the function with valid parameters.
<P>
</OL>
<P>
<a name="dex22"></a>
<P>
The following is a simple example for the <B>GetVersion</B> API
call that obtains the version of Windows that is running. The
<B>GetVersion</B> API call is located in <B>KERNEL</B> under 16&#173;bit
Windows and does not use any parameters (so the <B>Declare</B>
statement has empty parentheses). The following <B>Declare</B>
statement is written for 16&#173;bit Windows for use by Visual
Basic for Applications:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Declare Function GetVersion Lib "KERNEL" () As Long

</code></pre></FONT>
By comparison, here is the same function as it would be used by
an Office&nbsp;97 application running on 32&#173;bit Windows:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Declare Function GetVersion Lib "KERNEL32" () As Long
</code></pre></FONT>
Although the Windows API name stays the same, the location of
the API has changed to <B>KERNEL32</B>. Because you are calling
from a 32&#173;bit application, you must make a 32&#173;bit API
call. The parameter data type, on the other hand, did not change
(it remained a <B>Long</B>). In general, the function parameters
change more and require more attention than the parameters of
the return value. Understanding the differences between 16&#173;bit
API calls and 32&#173;bit API calls is essential to porting your
solution code to Windows&nbsp;95.
<P>
<FONT SIZE=3><B>What Are the Differences Between a 16&#173;bit and a 32&#173;bit
Windows API?</B></FONT>

<a name="dex23"></a><p>
As shown in the previous example, most 32&#173;bit Windows API
calls have the same name or a very similar name to the 16&#173;bit
API calls. In fact, the documentation may show the same arguments,
with the only apparent difference being the library name change
from <B>KERNEL</B> to <B>KERNEL32</B>. However, the code must
handle the following changes in addition to the name change:
<p><UL TYPE="square">
<LI>Case&#173;sensitivity
<P>
<LI>Unicode
or ANSI options
<P>
<LI>Change of parameter data type
(shown in the previous example)
<p></UL>
These items can require subtle changes in the <B>Declare</B> statements
that are not always easy to identify.
<P>
<B>Case Sensitivity</B>
<P>
<a name="dex24"></a>
The first issue in moving to 32&#173;bit Windows API calls is
case sensitivity in the name of the function. API calls under
16&#173;bit Windows are not case sensitive and work if you enter
the function name as <B>GetVERSION</B>, <B>GeTvErSiOn</B>, or
<B>getversion</B>. In other words, in 16&#173;bit Windows the
following statements are equivalent:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Declare Function GetVersion Lib "KERNEL" () As Long
Declare Function GeTvErSiOn Lib "KERNEL" () As Long

</code></pre></FONT>
<P>
API calls under 32&#173;bit Windows, however, are case&#173;sensitive
for the function call and must be correctly entered in the <B>Declare</B>
statement. In other words, the following statements are not equivalent
in 32&#173;bit Windows:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Declare Function GetVersion Lib "KERNEL32" () As Long
Declare Function GeTvErSiOn Lib "KERNEL32" () As Long

</code></pre></FONT>
<P>
<a name="dex25"></a>
<P>
The easiest way to handle this change is to always use the <B>Alias</B>
control word. The contents of an <B>Alias</B> string map to the
actual API call name (which is case sensitive), but the function
name used in code, which appears between <FONT SIZE=2 FACE="COURIER NEW,COURIER">Function</FONT>
and <FONT SIZE=2 FACE="COURIER NEW,COURIER">Lib</FONT>, is
not case sensitive and does not change if you type it different
ways in your code or use the same name for variables or procedures.
Using the <B>Alias</B> control word, the <B>GetVersion</B> function
(32&#173;bit Windows) would be entered as:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Declare Function GetVersion Lib "KERNEL32" Alias "GetVersion" () As Long

</code></pre></FONT>
<P>
The case of API names doesn't matter when writing code: as long
as you enter the function name correctly in the <B>Alias</B> string,
and you spell the function name in code the same way as in the
<B>Declare</B> statement, the function is automatically mapped
by Visual Basic or Visual Basic for Applications back to the correct
<B>Declare</B> function.
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
Alias control word is the single most important thing you can
use in preparing to switch to 32&#173;bit operating systems because
it means you only have to change the contents of the Declare statement
and not every instance of the function being called in your code.
<P>
<B>Unicode or ANSI Options</B>
<P>
<a name="dex26"></a>
Both the Windows&nbsp;NT and Windows&nbsp;95 operating systems
have two API interfaces. One interface is based on the American
National Standards Institute (ANSI) character set, where a single
byte represents each character. The other interface was created
for the Unicode character set, where two bytes represent each
character. All 16&#173;bit Windows operating systems and applications
use the ANSI character set. All 32&#173;bit versions of Windows
add Unicode to allow foreign language characters to be represented.
C programmers handle this by setting a flag in their include file
(<B>*.h</B>). The flag causes hundreds of macros throughout the
C include files to select the correct Unicode or ANSI functions.
All western language versions of Office products use ANSI for
Visual Basic for Applications code. Therefore, programmers using
current versions of Visual Basic for Applications or other macro
languages should always use the ANSI version of the API call.
When using the Win32api.txt file, this choice is made for you.
For more information about this file, see "<A HREF="#ChangePDT">Change of Parameter Data Type</A>," later in this section.
To distinguish the ANSI version from the Unicode version, the
ANSI version adds an <B>A</B> to the end of the API name, and
the Unicode version adds a <B>W</B>. (<B>W</B> is for wide, as
in the width of the bytes provided for characters.) The name of
an API call includes either the character <B>A</B> or <B>W</B>
at the end of the API name only if the API requires parameters
with string (character) data types.
<a name="dex27"></a>
<P>
The Win32 SDK documentation in the Development Library does not
record the permutations of the name of the API call. The documentation
gives only the name of the root function and its library name.
The actual name of the API in the library can be one of the following:
<UL TYPE="square"><p>
<LI><B>MyAPICall</B>, which
uses no character strings in the call.
<P>
<LI><B>MyAPICallA</B>,
which uses ANSI character strings in the call.
<P>
<LI><B>MyAPICallW</B>,
which uses Unicode character strings in the call.
<P>
</UL>
<p>
<a name="dex28"></a>
To understand the differences, see the following diagram showing
the amount of data the API expects to find on possible call stacks
for an example function (the 16&#173;bit version is padded because
16&#173;bit Windows always pads the stack to 16&nbsp;bits).
<P>
<IMG SRC="01002.gif">
<P>
<a name="dex29"></a>
The three possible declarations for <B>MyAPICall</B> are shown
in the following example, organized to make comparison easier.
All of the statements use the <B>Alias</B> control word so that
the function name used in code (<B>MyAPICall</B>) does not have
to change even if the name of the function called is appended
with an <B>A</B> or a <B>W</B>:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>'16 bits
Declare function MyAPICall Lib "MYDLL.DLL" Alias "MyAPICall" (
&#09;ByVal hwndForm As Integer,
&#09;ByVal lpstrCaption$,
&#09;ByVal hAccKey As String,
&#09; ByVal iMagicNumber As Integer
&#09;) As Integer
'32&#173;bit ANSI
Declare function MyAPICall Lib "MYDLL32.DLL" Alias "MyAPICallA" (
&#09;ByVal hwndForm As Long,
&#09;ByVal lpstrCaption$,
&#09;ByVal hAccKey As String,
&#09;ByVal iMagicNumber As Long
&#09;) As Long
'32&#173;bit UNICODE * For illustration only.
Declare function MyAPICall Lib "MYDLL32.DLL" Alias "MyAPICallW" (
&#09;ByVal hwndForm As Long,
&#09;ByVal lpstrCaption$,
&#09;ByVal hAccKey As String,
&#09;ByVal iMagicNumber As Long
&#09;) As Long

</code></pre></FONT>
<P>
Any one of these declarations would add the function <B>MyAPICall</B>
to your application; you can only have one <B>MyAPICall</B> function.
<P>
This code sample introduces the <B>ByVal</B> keyword, which allows
you to pass Visual Basic parameters to a API function by value.
<B>By Value</B> is the default for functions written in C and
is therefore the default for Windows API calls. The reason you
must use <B>ByVal</B> is that Visual Basic and Visual Basic for
Applications default to <B>ByRef</B> (<B>By Reference</B> passes
a pointer to the value rather than the value itself), which is
not what API calls expect. <B>ByVal</B> can also be used to convert
a Visual Basic string to a null&#173;terminated C string. <B>ByVal</B>
is included in the <B>Declare</B> statements in Win32api.txt,
so you know when to use it.
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>For
more information about ByVal, see the Microsoft Developer Network
(MSDN) article Q110219 How to call Windows API from VB, or published
references such as PC Magazine Visual Basic Programmer's Guide
to the Windows API by Dan Appleman, published by Ziff&#173;Davis
Press.
<P>
<B><A NAME="ChangePDT">Change of Parameter Data Type</A></B>

<P>
<a name="dex30"></a>
<P>
The easiest way to get the new required parameter data types for
32&#173;bit API functions is to copy the appropriate API <B>Declare</B>
statement from Win32api.txt into your source code.
<P>
</MENU></MENU>
<P>
<TABLE WIDTH=93% CELLPADDING=0 CELLSPACING=0 BORDER=0>

<TR>

<TD WIDTH=80 ALIGN=RIGHT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><IMG SRC="CDO.GIF" WIDTH=27 HEIGHT=27 BORDER=0 ALT="">&nbsp;&nbsp;</FONT></TD><TD><B><FONT SIZE=2 COLOR="#0000FF" FACE="VERDANA,ARIAL,HELVETICA">Tools and Utilities&nbsp;&nbsp;&nbsp;</FONT></B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The Office Resource Kit Tools and Utilities include the Visual Basic
declaration file called Win32api.txt. For more information about
viewing Win32api.txt, see "<A HREF="appa.htm#CHappaH226">Visual Basic Win32 API Declarations</A>" in Appendix&nbsp;A,
"Microsoft Office Resource Kit Tools and Utilities."</FONT>

</TD>

</TR>

</TABLE>
<MENU><MENU>
<P><a name="dex31"></a>
Another source of information is the <I>Win32 Programmer's
Reference</I> on the MSDN Development Library CD, which
is discussed in "<A HREF="#CH010H225">Advanced
Programming Topics</A>" later in this section. This
reference may occasionally be required to resolve questions about
the inclusion or exclusion of <B>ByVal</B> in the declaration
or the need to put parentheses around the actual value passed.
<P>
If you use the <I>Win32 Programmer's Reference</I>,
however, you must be careful to properly convert C to Visual Basic
data types. For example, don't mistake a C <B>int</B> for a Visual
Basic for Applications <B>Integer</B>. Many Windows data types
and Visual Basic <B>Integer</B> data types are no longer the same
size, as shown in the following table. It is critical to remember
that the sizes of many API parameters have changed, and you must
not assume they are the same.
<P>
<TABLE WIDTH=80% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=25% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Visual Basic data type</FONT></B>
</TD><TD WIDTH=25% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Size of variable</FONT></B>
</TD><TD WIDTH=25% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Corresponding 16&#173;bit Windows data types</FONT></B>
</TD><TD WIDTH=25% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Corresponding 32&#173;bit Windows data types</FONT></B>
</TD></TR>
<TR><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Integer</B></FONT>
</TD><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT></TD><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>int</B>, <B>short</B>, <B>WORD</B>, <B>HWND</B>, <B>HANDLE</B>, <B>WCHAR</B></FONT>
</TD><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>short</B>, <B>WCHAR</B></FONT>
</TD></TR>
<TR><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Long</B></FONT>
</TD><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT></TD><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>long</B>, <B>LPSTR</B></FONT>
</TD><TD WIDTH=25% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>int</B>, <B>long</B>, <B>HANDLE</B>, <B>HWND</B>, <B>LPSTR</B></FONT>
</TD></TR>

<P>
</TABLE>
<P>
Finally, whether you use Win32api.txt or the <I>Win32 Programmer's
Reference</I>, judicious use of the <B>Alias</B> control
word may assist you in changing parameter data types by allowing
existing 16&#173;bit code that calls the API to be left unchanged.
The <B>ByVal</B> control word and automatic type conversion in
Visual Basic, Access Basic, WordBasic, and Visual Basic for Applications
change the size of parameters for you in many cases (<B>Integer</B>
to <B>Long</B>, for example). Alternatively, type conversion extends
integers with a sign (+/&nbsp;&#150;&nbsp;) that may lead
to incorrect long parameters and cause overflows on conversion
from <B>Long</B> to <B>Integer</B>. Again, the best solution is
to check Win32api.txt or the <I>Win32 Programmer's Reference</I>
to get the correct functions.
<P>
<FONT SIZE=3><B>What Types of Errors Can Occur with an API Declare Statement?
</B></FONT>

<P>
<a name="dex32"></a>
<P>
After you create a <B>Declare</B> statement, it may not work.
While there are many mistakes possible in a <B>Declare</B> statement,
the following are the most common errors:
<P>
<UL TYPE="square">
<P>
<LI>Error 453: Function is not
defined in specified DLL
<P>
Either you misspelled the function name or you have
a problem with case in the function name. Functions are case&#173;sensitive
in Win32; they are not case&#173;sensitive in 16&#173;bit Windows.
<P>
<LI>Error
48: Error in loading DLL
<P>
Usually, this error is caused by having the wrong
size or arguments, but it may also occur for some of the reasons
described under Error 53.
<P>
<LI>Error 53: File Not
Found
<P>
Windows checks the loaded libraries for matches; if
the DLL is not loaded, Windows attempts to load the DLL from disk.
Many functions available in the 16&#173;bit Windows on Windows
(WOW) layer on Windows&nbsp;NT Server are not available directly
on Windows&nbsp;NT Workstation.
<P>
Calling the 16&#173;bit Windows and Win32 GetProfileString
function from a 16&#173;bit and a 32&#173;bit solution gives a
confusing set of error messages. The 16&#173;bit application call
finds KERNEL and fails to find KERNEL32, while the 32&#173;bit
application finds KERNEL32 and fails to find KERNEL. The general
cause of this error is a mismatch of calls and operating systems.
The solution is to write code that works in both 16&#173;bit and
32&#173;bit environments.
<P>
</UL>
<P>
<FONT SIZE=4><B><A NAME="CH010H221">Writing a Single Code Base for 16&#173;bit and 32&#173;bit Office&nbsp;Applications</A></B></FONT>

<P>
<a name="dex33"></a>
<P>
If users in your workgroup are running both 16&#173;bit and 32&#173;bit
versions of an Office application&nbsp;&#151; Excel&nbsp;5.0
and 97, for example&nbsp;&#151; should you put the 16&#173;bit
API call or the 32&#173;bit API call in your solution? Excel, for example, is not like Visual Basic version 4.0, which
allows conditional compilation of code into the executable files, but instead runs solution code in workbook files which may be opened in either
the 16&#173;bit or the 32&#173;bit version of the application.
The solution is to put both the 16&#173;bit API call and the 32&#173;bit
API call inside an <B>If...Then...Else</B> control structure.
<P>
With 32&#173;bit applications using the same solution code as
16&#173;bit applications, you do not know which API to call in
the solution code. Your code must determine whether the application
is 16&#173;bit or 32&#173;bit in order to make the correct API
call. Each application makes this determination using a set of
different questions:
<P>
<UL TYPE="square">
<P>
<LI>Access
<P>
Is the host application 16&#173;bit Access
2.0 or earlier, or 32&#173;bit Access&nbsp;95 or 97?
<P>
<LI>Excel
<P>
Is the host application 16&#173;bit Excel&nbsp;5.0
or earlier, or 32&#173;bit Excel&nbsp;5.0 for Windows&nbsp;NT
operating system or 32&#173;bit Excel for Windows&nbsp;95
or 97?
<P>
<LI>Microsoft Project
<P>
Is the host application 16&#173;bit Microsoft Project version 3.0,
or 32&#173;bit Microsoft Project version 4.0 or later?
<P>
<LI>Word
<P>
Is the host application 16&#173;bit Word&nbsp;6.0 or earlier, or
32&#173;bit Word&nbsp;6.0 for Windows&nbsp;NT or Word for Windows&nbsp;95
or 97?
<P>
</UL>
<P>
If you make the wrong API call, an error occurs. The solution
code must determine whether the application is a 16&#173;bit application
or a 32&#173;bit application, so it can make the appropriate call.
<P>
<IMG SRC="01003.gif">
<P>
<a name="dex34"></a>
<P>
The solution is to put every API call into a wrapper&nbsp;&#151;
a Visual Basic procedure or an Excel&nbsp;4.0 macro.
This wrapper routinely checks the <I>bitness</I> of
the application and selects the appropriate API call. Place these
wrappers in separate modules so that your code can be easily reused.
Some API calls (for example, <B>GetPrinterDriveDirectory</B> and
<B>GetWinMetaFileBits</B>) are not available in all 32&#173;bit
operating environments, which means that the structure of an API
wrapper can become as complex as this:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function MyAPICall$(ByVal Args)
&#09;If Engine32() Then
&#09;&#09;'Select is rarely needed
&#09;&#09;Select Case OS32() 'Based on GetVersionEx API
&#09;&#09;Case 0 'Win32s
&#09;&#09;&#09;....
&#09;&#09;Case 1 'NT 3.1
&#09;&#09;&#09;....
&#09;&#09;Case 2 'NT 3.5
&#09;&#09;&#09;....
&#09;&#09;Case 3 'Windows&nbsp;95
&#09;&#09;&#09;....
&#09;&#09;End Select
&#09;Else '16&#173;bit
&#09;&#09;....
&#09;End If
End Function

</code></pre></FONT>
<P>
An API wrapper this complex is the exception, however, and not
the rule.
<P>
Compiled languages, such as FoxPro and Visual Basic, build 16&#173;bit
or 32&#173;bit application executable files. The executable file targets
either 16&#173;bit API calls or 32&#173;bit API calls. You can
determine the appropriate API calls while building the application.
You can select the calls in one of two ways: either by having
all the 16&#173;bit declarations in one file and all the 32&#173;bit
declarations in another file and manually switching them in a
project; or by using the <B>#IF... #ELSE...</B> directives and
conditional compilation supported by Visual Basic 4.0.
<P>
If you must support Visual Basic version 3.0 and Visual Basic
4.0 applications concurrently, separate files may reduce code
maintenance. If you support FoxPro, you have no problem using
16&#173;bit API calls from compiled 32&#173;bit FoxPro solutions
because the <B>RegFN</B> functions automatically thunk from the
32&#173;bit layer to the 16&#173;bit layer if needed.
<P>
Compiled 32&#173;bit languages may require some minor differences
in API calls depending on the 32&#173;bit operating system. For
example, developers must program context menus differently for
Windows&nbsp;95 than for Windows&nbsp;NT operating systems.
<P>
<FONT SIZE=4><B><A NAME="CH010H222">Determining Whether a 32&#173;bit Application
Is Running</A></B></FONT>

<P>
<a name="dex35"></a>
<P>
In the previous section, writing application&#173;independent
code is achieved by adding code for both 16&#173;bit and 32&#173;bit
scenarios. However, you still need to determine in source code
whether the application is a 32&#173;bit application or a 16&#173;bit
application.
<P>
The code in the following examples determines whether these are
32&#173;bit applications.
<P>
<UL TYPE="square">
<P>
<LI>In Excel&nbsp;5.0, Excel&nbsp;95, Excel&nbsp;97, Microsoft Project
4.0, Microsoft Project 95, or Microsoft Project 97:

<P><FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Engine32%()
&#09;If instr(Application.OperatingSystem,"32") then Engine32%=True
End Function

</code></pre></FONT>
<P>
<LI>In Word&nbsp;6.0, Word&nbsp;95, or Word&nbsp;97:
<P>
<P><FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Engine32
&#09;If Val(GetSystemInfo$(23)) &gt; 6.3 Or Len(GetSystemInfo$(23))= 0 _
&#09;&nbsp;&nbsp;&nbsp; Then Engine32 = &#173; 1 Else Engine32 = 0
End Function

</code></pre></FONT>
<P>
<LI>In Access&nbsp;1.1 or higher:
<P><FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Engine32% ()
If SysCmd(7) &gt; 2 Then Engine32% = True
End Function

</code></pre></FONT>
<P>
</UL>
<P>
<FONT COLOR="#0000FF" SIZE=2><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
Application.OperatingSystem property in Excel and Microsoft Project does not return the version of Windows you have installed,
but the layer of Windows that the application is running on, for
example, the 16&#173;bit subsystem in Windows&nbsp;NT Workstation.
<P>
<FONT SIZE=3><B>Putting It All Together</B></FONT>

<P>
<a name="dex36"></a>
<P>
For examples of code for particular applications, you should consult
the MSDN, and find the article entitled <I>Corporate Developer's
Guide to Office&nbsp;95 API Issues</I>. For information
about connecting to MSDN, see "<A HREF="appe.htm#CHappeH212">Microsoft
Developer Network</A>" in Appendix&nbsp;E, "Other
Support Resources."
<P>
The following simple example may help you understand some issues.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Declare Function GetTickCount32 Lib "KERNEL32" Alias "GetTickCount" () _
&nbsp;&nbsp;&nbsp; As Long
Declare Function GetTickCount16 Lib "USER" Alias "GetTickCount" () _
&nbsp;&nbsp;&nbsp; As Long

Function GetRightTickCount() As Long
If Engine32%() Then
&#09;GetRightTickCount = GetTickCount32()
Else
&#09;GetRightTickCount = GetTickCount16()
End If
End Function

</code></pre></FONT>
<P>
In this example, the <B>GetTickCount</B> API has the same name
for both 16&#173;bit Windows and 32&#173;bit Windows, so you must
use an <B>Alias</B> control word to change the function name in
at least one of the <B>Declare</B> statements. In the example,
the names in both <B>Declare</B> statements are changed to <B>GetTickCount32</B>
and <B>GetTickCount16</B>. Next, depending on the application's
bitness, <B>GetTickCount</B> is mapped to the correct API function
name (<B>GetTickCount32</B> or <B>GetTickCount16</B>) and its
associated API call. In this example, <B>GetTickCount</B> in your
code is mapped to <B>GetTickCount32</B> (in the <B>GetTickCount</B>
function), which is in turn mapped to <B>GetTickCount</B> in <B>KERNEL32</B>,
when <B>Engine32%</B> is <B>True</B>.
<P>
<FONT SIZE=3><B>Word Sample Declare&#173;Method Solution</B></FONT>

<P>
<a name="dex37"></a>
<P>
Word has a different <B>Declare</B> format and syntax. The Word
solution is more complex because you cannot place both the 16&#173;bit
and 32&#173;bit <B>Declare</B> statements in the same macro. The
solution is to create three macro libraries: <B>APICALL16</B>
and <B>APICALL32</B>, which contain the <B>Declare</B> statements
for each operating environment; and a 16&#173;bit/32&#173;bit
interoperability macro, <B>APICALLS</B>.
<P>
First, create a macro library called <B>APICALL16</B>. This macro
contains all the 16&#173;bit API <B>Declare</B> statements.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code> 'This is APICALL16 &#173;&#173; all 16&#173;bit Declare statements are placed here.
Declare Function GetTickCount16 Lib "USER" Alias "GetTickCount"() _
&nbsp;&nbsp;&nbsp; As Long
Function GetTickCount
GetTickCount = GetTickCount16
End Function

</code></pre></FONT>
<P>
Second, create a macro library called <B>APICALL32</B>. This macro
contains all the 32&#173;bit API <B>Declare</B> statements.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>'This is APICALL32 &#173;&#173; all 32&#173;bit Declare statements are placed here.
Declare Function GetTickCount32 Lib "KERNEL32" Alias "GetTickCount"() _
&nbsp;&nbsp;&nbsp; As Long
Function GetTickCount
GetTickCount = GetTickCount32
End Function

</code></pre></FONT>
<P>
Third, create a macro library called <B>APICALLS</B>. This macro
contains <B>Engine32</B> and the procedures your solution code
calls.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>'This is APICALLS &#173;&#173; no Declare statements may be in this macro.
Function Engine32
Engine32 = 0
If Val(AppInfo$(2)) &gt; 5 Then
&nbsp;&nbsp;&nbsp;OS$ = GetSystemInfo$(23)
&nbsp;&nbsp;&nbsp;If Val(OS$) &gt; 6.3 Or Len(OS$) = 0 Then Engine32 = &#173; 1
End If
End Function

Function GetTickCount
If Engine32 Then
&nbsp;&nbsp;&nbsp;GetTickCount = APICall32.GetTickCount
Else
&nbsp;&nbsp;&nbsp;GetTickCount = APICall16.GetTickCount
End If
End Function
'Other API function calls are placed here.

</code></pre></FONT>
<P>
You can now call this function from your solution code. You must
preface your calls with <B>APICALLS</B>. For example:

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub MAIN
MsgBox Str$(APICalls.GetTickCount)
End Sub

</code></pre></FONT>
<P>
<a name="dex38"></a>
<P>
<B><FONT COLOR="#0000FF"><IMG SRC="Proced.gif" WIDTH=5 HEIGHT=10 BORDER=0 ALT="">&#09;To
convert Word solutions to run on 16&#173;bit and 32&#173;bit products</FONT></B>
<P>
<OL>
<P>
<LI>Create a new module called
<B>APICALLS</B>.
<P>
<LI>Create the <B>Engine32</B>
function in <B>APICALLS</B>.
<P>
<LI>Create a new module
called <B>APICALL16</B>.
<P>
<LI>Locate all the 16&#173;bit
<B>Declare</B> statements in the solution and move them to <B>APICALL16</B>.
<P>
<LI>Create
a new module called <B>APICALL32</B>.
<P>
<LI>Create
the equivalent 32&#173;bit <B>Declare</B> statements and put them
to <B>APICALL32</B>.
<P>
<LI>Using the preceding template,
create functions for each API in each of the three macro libraries.
<P>
<LI>Add
<B>APICALLS</B> before all calls to the API in your solution code.
<P>
<LI>Test
each function.
<P>
</OL>
<P>
This process allows existing calls in other modules to be left
untouched. After the developer defines and tests these macros,
the developer can add them to Normal.dot and reuse the macros
in other solutions so as to cut conversion time.
<P>
<FONT SIZE=4><B><A NAME="CH010H223">Recompiling DLLs</A></B></FONT>

<P>
<a name="dex39"></a>
<P>
This section has so far focused on the issue of updating Windows
API calls&nbsp;&#151; but the issues for solution code that
calls 16&#173;bit DLLs that you have bought, developed, or used
is exactly the same. The developer must change all 16&#173;bit
DLL <B>Declare</B> calls in solution code to 32&#173;bit calls.
This requires creating a 32&#173;bit version of the DLL (at least)
and possibly changing the <B>Declare</B> statement (or, in Excel&nbsp;4.0 macros, the <B>Register</B> function).
<P>
This also means a separate DLL must exist for both the 16&#173;bit
application and the 32&#173;bit application. For file management,
the name of the 32&#173;bit DLL should include <B>32</B> at the
end. The developer must recompile the DLL as a 32&#173;bit Ansi.dll.
The parameters passed to the DLL must use the stdcall&#173;passing
protocol to talk to 32&#173;bit Visual Basic for Applications,
instead of the PASCAL&#173;passing protocol used with 16&#173;bit
Windows. Place the calls for the 16&#173;bit and 32&#173;bit versions
of the DLL in a wrapper similar to the API wrapper described previously.
<P>
For more information about recompiling applications, see Chapter&nbsp;1,
"Porting 16&#173;bit Code to 32&#173;bit Windows," in
<I>Programming Techniques </I>from the Microsoft Visual C++<FONT SIZE=1>&#174;</FONT>
version 2.1 documentation in the Development Library, or see your C compiler
documentation.
<P>
<FONT SIZE=4><B><A NAME="CH010H224">Thunking</A></B></FONT>

<P>
<a name="dex40"></a>
<P>
When you do not have the source code of a DLL, your solution is
to use <I>thunking</I> to port your solution to Windows&nbsp;95.
Thunking enables direct 16&#173;bit and 32&#173;bit calls but
requires much more work than simply changing the Windows API call.
If you cannot change or recompile the 16&#173;bit DLL, you must
write a new 32&#173;bit DLL wrapper to access the 16&#173;bit
DLL. The 32&#173;bit application calls to this 32&#173;bit wrapper
DLL, which then calls the original 16&#173;bit DLL.
<P>
Thunking allows parameters to be pushed correctly on the stack,
enables a DLL of a different bitness to load in your process,
and converts memory addresses from <B>offset</B> (32&#173;bit)
to <B>segment::offset</B> (16&#173;bit). Even if you do the thunking
work, however, some issues remain. For example, pointers to memory
locations require additional work in 16&#173;bit and 32&#173;bit
scenarios.
<P>
There are several ways to thunk, depending on your operating system:
Windows&nbsp;95 and Windows&nbsp;NT thunk differently. For an
overview of thunking across the Windows operation systems, as
well as references to more information about thunking, see <I>Diving
into the Requirements for the Windows&nbsp;95 Logo</I> in
the Development Library.
<P>
<FONT SIZE=4><B><A NAME="CH010H225">Advanced Programming Topics</A></B></FONT>

<P>
<a name="dex41"></a>
<P>
Most developers writing solution code know the C language, and
the following information is provided to assist them in using
their knowledge of C to create <B>Declare</B> statements for Visual
Basic and Visual Basic for Applications using the tools they already
have.
<P>
<FONT SIZE=3><B>Working from C Declarations</B></FONT>

<P>
<a name="dex42"></a>
<P>
Apart from the API location changing (from <B>KERNEL</B> to <B>KERNEL32</B>),
the main issue in moving from 16&#173;bit API calls to 32&#173;bit
API calls is the change in the size of parameter data types. Some
background information may help you understand what has changed
and why. Windows 3.<I>x</I> was designed for the Intel
80286 CPU, where the hardware handles data two bytes at a time,
or in 16&#173;bit words. Windows&nbsp;95 was designed for later
CPUs, where the hardware can handle data four bytes at a time,
or in 32&#173;bit words. The following list shows how Visual Basic
represents an <B>Integer</B> as opposed to how Windows represents
an <B>int</B>:
<P>
<UL TYPE="square">
<P>
<LI><B>Integer</B> and <B>int</B>
are each two bytes in the 16&#173;bit Windows operating system
and in 16&#173;bit Excel, Visual Basic, Access,
Word, and Microsoft Project.
<P>
<LI><B>Integer</B>
is two bytes in 32&#173;bit Excel, Visual Basic, Access, Word for Windows, and Microsoft Project.
<P>
<LI><B>int</B>
is four bytes in the 32&#173;bit Windows operating systems, Windows&nbsp;95,
and Windows&nbsp;NT.
<P>
</UL>
<P>
To illustrate how this change in size can affect a call, recall
the fictional <B>MyAPICall</B> API used earlier. The <B>MyAPICall</B>
call needs the handle to the application's window (<B>HWND</B>),
a string, a character, and an integer to be placed on the stack.
In C, the function would be:
<P>
<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>int MyAPICall (HWND hwndForm, LPSTR lpstrCaption, TCHAR tchAccKey, _
&nbsp;&nbsp;&nbsp; int iMagicNumber)

</code></pre></FONT>
<P>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
Each parameter has two parts: the data type (<B>HWND</B>, <B>LPSTR</B>,
<B>TCHAR</B>, <B>int</B>) and the field name (<B>hwndForm</B>,
<B>lpstrCaption</B>, <B>tchAccKey</B>, <B>iMagicNumber</B>). Each
data type requires a specific number of bytes to represent it.
Each field name has some odd&#173;looking characters as a prefix&nbsp;&#151;
these characters (known as Hungarian notation) indicate the data
type, such as <B>int</B> or <B>lpstr</B>.
<P>
Windows has many data types that API calls use as parameters.
The following table shows some of the more significant data types
used by Windows&nbsp;95 API calls. Many Windows data types use
the C data type of <B>int</B>. (When <B>int</B> changed from 16&#173;bits
to 32&#173;bits, the related Windows data types also changed.)
<P>
</FONT>
<TABLE WIDTH=80% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>C data type</FONT></B></TD>
<TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Size in Windows 3.x and Windows for Workgroups 3.x (16&#173;bit)</FONT></B>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Size in Win32s, Windows&nbsp;NT operating system, and Windows&nbsp;95 (32&#173;bit)</FONT></B>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>unsigned </B><B>int</B>, <B>UINT</B>, <B>int</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>short</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>long</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>char</B>, <B>CHAR</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>1 byte</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>1 byte</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>WORD</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Handle </B>(<B>hWnd</B>, <B>hDC</B>, <B>hMenu</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>LPSTR</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>WCHAR</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>TCHAR </B>(ANSI or Unicode)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>1 byte</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>1 or 2 bytes</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>POINT</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4 bytes</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>8 bytes</FONT>
</TD></TR>

<P>
</TABLE>
<P>
Thus, converting the <B>MyAPICall</B> API call from C, the declarations
for <B>MyAPICall</B> using Visual Basic for Applications, Access
Basic, or WordBasic would be as follows (organized to make comparison
easier):

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>'16 bits
Declare Function MyAPICall Lib "MYDLL.DLL" Alias "MyAPICall" (
&#09;ByVal hwndForm As Integer,
&#09;ByVal lpstrCaption As String,
&#09;ByVal hAccKey As String,
&#09;ByVal iMagicNumber As Integer
&#09;) As Integer
'32 bits
Declare Function MyAPICall Lib "MYDLL32.DLL" Alias "MyAPICall" (
&#09;ByVal hwndForm As Long,
&#09;ByVal lpstrCaption As String,
&#09;ByVal hAccKey As String,
&#09;ByVal iMagicNumber As Long
&#09;) As Long

</code></pre></FONT>
<P>
A final tool you may find useful is the following table, which
maps C language declaration data types to their Visual Basic equivalents.
<P>
<TABLE WIDTH=80% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>C language declaration data type</FONT></B>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Visual Basic equivalent</FONT></B>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Called with this variable</FONT></B>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Boolean</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ByVal B As Boolean</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>Integer </B>or <B>Variant </B>variable</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Pointer to a string (<B>LPSTR</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>By Val S As String</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>String </B>or <B>Variant </B>variable</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Pointer to an integer (<B>LPINT</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>I As Integer</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>Integer </B>or <B>Variant </B>variable</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Pointer to a long integer (<B>LPDWORD</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>L As Long</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>Long </B>or <B>Variant </B>variable</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Pointer to a structure (for example, <B>LPRECT</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>S As Rect</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any variable of that user&#173;defined type</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Integer (<B>INT</B>, <B>UINT</B>, <B>WORD</B>, <B>BOOL</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ByVal I As Integer</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>Integer </B>or <B>Variant </B>variable</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Handle (<B>32 bit</B>, <B>HWND</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ByVal H As Long</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>Long </B>or <B>Variant </B>variable</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Long (<B>DWORD</B>, <B>LONG</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ByVal L As Long</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>Long </B>or <B>Variant </B>variable</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Pointer to an array of integers</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>I as Integer</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The first element of the array, such as I(0)</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Pointer to a void (<B>void</B><B>*</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>V As Any</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any variable (use <B>ByVal </B>when passing a string)</FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Void </B>(function return value)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Sub Procedure</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Not applicable</FONT></TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>NULL</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>As Any</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ByVal 0&amp;</B></FONT>
</TD></TR>
<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Char (<B>TCHAR</B>)</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ByVal Ch As String</B></FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Any <B>String </B>or <B>Variant </B>variable</FONT>
</TD></TR>

<P>
</TABLE>
<P>
<TABLE WIDTH=70% VALIGN="TOP" CELLPADDING=15 CELLSPACING=0 BORDER=1 BORDERCOLOR=#0000FF><TR BGCOLOR="#FFFFFF"><TD>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<B>Using the Win32 Programmer's Reference</B>
<P>
The two primary sources for Win32 API information are the <I>Win32
Programmer's Reference</I> and a list of Microsoft&#173;supplied
Win32 <B>Declare</B> statements for Visual Basic, such as Win32api.txt.
The Development Library contains a listing with explanations of
the entire Win32 API set in the <I>Win32 Programmer's Reference</I>.
For more information about the Development Library, see "<A HREF="appe.htm#CHappeH212">Microsoft
Developer Network</A>," in Appendix&nbsp;E, "Other
Support Resources."
<br>
</FONT></TD></TR>
</TABLE>

<BR>
</MENU></MENU></MENU>
<HR>
<!--ToTop_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>
<TR><TD align=right><TABLE cellpadding=0 cellspacing=0 border=0><TR><TD><A href="#top"><FONT SIZE=1 FACE="VERDANA,ARIAL,HELVETICA">Top</FONT></A></TD><TD><A href="#top"><IMG SRC="ar_up.gif" WIDTH=11 HEIGHT=7 BORDER=0 ALIGN=MIDDLE></A></TD></TR></TABLE>
</TD></TR>

</TABLE>


<!--ToTop_END-->

<!--EndNav_Start--><CENTER>
<A HREF="FULLTOC.htm">Contents</A>
| <a href="009.htm">&lt;&lt; Previous</A>
| <a href="011.htm">Next &gt;&gt;</A>
| <A HREF="A.HTM">Index</A>
</CENTER>
<P><FONT SIZE=3 FACE="COURIER NEW,COURIER"></FONT>
</FONT>
</BODY>
</HTML>

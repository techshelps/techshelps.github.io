<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding a Row to a Combo Box List</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="addingrowtocomboboxlist"></a>Adding a Row to a Combo Box List</h2>
<p>
Combo boxes are commonly used to display a list of values in a table or query for a user to select from. By responding to the NotInList event, you can provide a way for the user to add values that aren’t in the list.</p>
<p>
Often the value displayed in a combo box is looked up from a record in a related table. Because the list is derived from a table or query, you must provide a way for the user to enter a new record in the underlying table. Then you can use the <b>Requery</b> method to requery the list, so it contains the new value.</p>
<p>
When a user types a value in a combo box that isn’t in the list, the NotInList event of the combo box occurs as long as the combo box’s <b>LimitToList</b> property is set to Yes, or a column other than the combo box’s bound column is displayed in the box. You can write an event procedure for the NotInList event that provides a way for the user to add a new record to the table that supplies the list’s values. The NotInList event procedure includes a string argument named NewData that Microsoft Access uses to pass the text the user enters to the event procedure.</p>
<p>
The NotInList event procedure also has a Response argument where you tell Microsoft Access what to do after the procedure runs. Depending on what action you take in the event procedure, you set the Response argument to one of three predefined constant values:
<ul>
<li>
<b>acDataErrAdded</b>   If your event procedure enters the new value in the record source for the list or provides a way for the user to do so, set the Response argument to <b>acDataErrAdded</b>. Microsoft Access then requeries the combo box for you, adding the new value to the list.</li>
<li>
<b>acDataErrDisplay</b>   If you don’t add the new value and want Microsoft Access to display the default error message, set the Response argument to <b>acDataErrDisplay</b>. Microsoft Access requires the user to enter a valid value from the list.</li>
<li>
<b>acDataErrContinue</b>   If you display your own message in the event procedure, set the Response argument to <b>acDataErrContinue</b>. Microsoft Access doesn’t display its default error message, but still requires the user to enter a value in the field. If you don’t want the user to select an existing value from the list, you can undo changes to the field by using the <b>Undo</b> method.</li>
</ul>
<p>
For example, the following event procedure asks the user whether to add a value to a list, adds the value, then uses the Response argument to tell Microsoft Access to requery the list:</p>
<pre><code>Private Sub ShipperID_NotInList(NewData As String, Response As Integer)
&#09;Dim intAnswer As Integer
&#09;Dim dbs As Database, rst As Recordset

&#09;intAnswer = MsgBox(&quot;Add &quot; &amp; NewData &amp; &quot; to the list of shippers?&quot;, _
&#09;&#09;vbQuestion + vbYesNo)

&#09;If intAnswer = vbYes Then

&#09;&#09;' Add shipper stored in NewData argument to the Shippers table.
&#09;&#09;Set dbs = CurrentDb
&#09;&#09;Set rst = dbs.OpenRecordset(&quot;Shippers&quot;)
&#09;&#09;rst.AddNew
&#09;&#09;rst!CompanyName = NewData
&#09;&#09;rst.Update

&#09;&#09;Response = acDataErrAdded&#09;&#09;&#09;' Requery the combo box list.
&#09;Else
&#09;&#09;Response = acDataErrDisplay&#09;&#09;&#09;' Require the user to select 
&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;' an existing shipper.
&#09;End If
&#09;rst.Close
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the NotInList event, search the Help index for “NotInList event.”</p>
<h5>Example</h5>
<h5>Adding a Row to the Combo Box’s List on the Orders Form</h5>
<p>
When taking a new order in the Orders sample application, a user, typically a sales representative, starts by looking up the customer in the BillTo combo box at the top of the Orders form. If the customer is new and doesn’t appear in the list, the user needs a way to add the customer to the Customers table and update the combo box so it displays the new customer in the list.</p>
<p>
<img src="abac03_28.gif" border=0></p>
<p>
You can let the user add a new customer by simply typing the new customer’s name in the combo box. To do this, write an event procedure for the NotInList event of the combo box.</p>
<p>
Step One: Write the event procedure for adding a new customer   This event procedure asks for confirmation that the user wants to add a new customer (and hasn’t just typed the name of an existing customer incorrectly), and then provides a way to do it.</p>
<p>
The following code example shows the event procedure. An explanation of what it does follows the code example.</p>
<pre><code>Private Sub BillTo_NotInList(NewData As String, Response As Integer)
' Allows user to add a new customer by typing the customer's name
' in the BillTo combo box.

&#09;Dim intNewCustomer As Integer, strTitle As String
&#09;Dim intMsgDialog As Integer, strMsg As String

&#09;Const conClrWhite = 16777215
&#09;Const conNormal = 1

&#09;' Check if user has already selected a customer.
&#09;If IsNull(CustomerID) Then

&#09;&#09;' Display message box asking if the user wants to add a new customer.
&#09;&#09;strTitle = &quot;Customer Not in List&quot;
&#09;&#09;strMsg = &quot;Do you want to add a new customer?&quot;
&#09;&#09;intMsgDialog = vbYesNo + vbExclamation 
&#09;&#09;intNewCustomer = MsgBox(strMsg, intMsgDialog, strTitle)

&#09;&#09;If intNewCustomer = vbYes Then

&#09;&#09;&#09;' Remove text user entered from the combo box and assign
&#09;&#09;&#09;' it to the CompanyName control and the ShipName control.
&#09;&#09;&#09;BillTo.Undo
&#09;&#09;&#09;CompanyName.Enabled = True
&#09;&#09;&#09;CompanyName = NewData
&#09;&#09;&#09;ShipName = NewData

&#09;&#09;&#09;' Enable and move focus to CustomerID.
&#09;&#09;&#09;CustomerID.Enabled = True
&#09;&#09;&#09;CustomerID.Locked = False
&#09;&#09;&#09;CustomerID.BackColor = conClrWhite
&#09;&#09;&#09;CustomerID.BorderStyle = conNormal
&#09;&#09;&#09;CustomerID.SetFocus

&#09;&#09;&#09;' Enable the other customer information controls.
&#09;&#09;&#09;Address.Enabled = True
&#09;&#09;&#09;City.Enabled = True
&#09;&#09;&#09;Region.Enabled = True
&#09;&#09;&#09;City.Enabled = True
&#09;&#09;&#09;PostalCode.Enabled = True
&#09;&#09;&#09;Country.Enabled = True
&#09;&#09;&#09;ContactName.Enabled = True
&#09;&#09;&#09;ContactTitle.Enabled = True
&#09;&#09;&#09;Phone.Enabled = True
&#09;&#09;&#09;Fax.Enabled = True

&#09;&#09;&#09;MsgBox &quot;Enter the new customer's ID, address, and contact information.&quot;

&#09;&#09;&#09;' Continue without displaying default error message.
&#09;&#09;&#09;Response = acDataErrContinue
&#09;&#09;Else
&#09;&#09;&#09;' Display the default error message.
&#09;&#09;&#09;Response = acDataErrDisplay
&#09;&#09;End If

&#09;Else
&#09;&#09;' User has already picked a customer; display a message and undo the field.
&#09;&#09;strMsg = &quot;To modify this customer's company name, edit the name in the &quot;
&#09;&#09;strMsg = strMsg &amp; &quot;box below the Bill To combo box. To add a new customer, &quot;
&#09;&#09;strMsg = strMsg &amp; &quot;click Undo Record on the Records menu and then type the &quot;
&#09;&#09;strMsg = strMsg &amp; &quot;new company name in the Bill To combo box.&quot;
&#09;&#09;MsgBox strMsg
&#09;&#09;BillTo.Undo

&#09;&#09;' Continue without displaying default error message.
&#09;&#09;Response = acDataErrContinue
&#09;End If
End Sub
</code></pre>
<p>
In this code, you use the <b>MsgBox</b> function to ask if the user wants to add a new customer. If the user chooses Yes, the event procedure uses the <b>Undo</b> method to remove the text from the combo box. It then uses the NewData argument to assign the text the user entered in the combo box to the CompanyName control and the ShipName control. With the value cleared from the combo box, you can move the focus down to the customer controls.</p>
<p>
Because the user can’t use the Orders form to change the CustomerID for an existing customer, the CustomerID control is normally locked, disabled, and displayed with a background that matches the form’s background, so it doesn’t look like a control the user can edit. Now that the user is entering a new customer, your code unlocks and enables the control, and displays it with a white background and borders. It also enables the other customer information controls. An event procedure for the form’s AfterUpdate event, which occurs after the record is saved, locks and disables the CustomerID control again, and displays it without a white background.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;In the Orders form in the Orders sample application, all the fields from the Customers table are located on the Orders form, so users can add a complete record for a new customer directly in the fields on the Orders form. If you don’t want to include all the fields from the underlying table on your form, you can still let users add a new record to it. When the user wants to add a row to a combo box, display a separate form with all the fields from the underlying table on it. After the user saves and closes this separate form, you can requery the combo box so the new item appears in its list. For an example of this approach, see the Developer Solutions sample application.</p>
<p>
Step Two: Write the event procedure that updates the combo box   Your NotInList event procedure lets the user add a new customer and a new order at the same time. Once the order is saved and the new customer record is in the Customers table, you can update the BillTo combo box so it includes the new customer. You do this by writing an event procedure for the form’s AfterUpdate event that requeries the combo box using the <b>Requery</b> method, as follows:</p>
<pre><code>Private Sub Form_AfterUpdate()
&#09;BillTo.Requery
End Sub
</code></pre>
<p>
<img src="abac03_29.gif" border=0></p>
<p>
Tip   If your combo box list includes a large number of rows, requerying the list every time you save a record may slow down your form’s performance. In this case, you can improve performance by opening a separate form for the user to add a new customer, and then requerying the combo box only when the customer information on the separate form is saved.</p>
</FONT></FONT></BODY>
</HTML>

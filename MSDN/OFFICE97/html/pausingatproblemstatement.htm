<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pausing at a Problem Statement</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="pausingatproblemstatement"></a>Pausing at a Problem Statement</h2>
<p>
To use most of the Microsoft Access debugging tools, you need to suspend execution of your code. In the suspended state, the code is still running but paused between statements. Variables and property settings retain their values, and the Module window displays the code that is currently running.</p>
<p>
If you suspect that the problem you’re trying to uncover occurs at a certain place in the code, you’ll probably want to suspend execution at that location. To make Visual Basic pause execution of your code, you can use one of the following procedures:
<ul>
<li>
Set a <i>breakpoint</i> on a given line. A breakpoint is a location in your code where Visual Basic automatically suspends execution.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on breakpoints, see the following section, “Using a Breakpoint.”</p>
</li>
<li>
Use a <b>Stop</b> statement on a given line.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Stop</b> statement, see “Using a Stop Statement” later in this chapter.</p>
</li>
<li>
Press CTRL+BREAK while the code is running.</li>
</ul>
<p>
Visual Basic also suspends execution at a given line if a statement on that line generates a run-time error. However, this is true only if no error trapping is in effect at the time the error occurs.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If your Microsoft Access workgroup has security enabled (if you logged on by using the <b>Logon</b> dialog box), you must have Read Design permission for a module in order to suspend code execution within that module. If you don’t have Read Design permission for the module that contains the code, and you run code that contains a <b>Stop</b> statement or produces a run-time error, Visual Basic gives you the choice of continuing execution or resetting the code. If you press CTRL+BREAK while code is running, Visual Basic suspends execution at the first statement in a module for which you do have Read Design permission. For information on permissions and security, see Chapter 14, <a href="securingyourapplication.htm">“Securing Your Application.”</a></p>
<h3>Using a Breakpoint</h3>
<p>
When Visual Basic encounters a breakpoint while running a procedure, it suspends execution just before running the line of code where the breakpoint is located. Set a breakpoint at any point in your code where you want to monitor what’s going on behind the scenes. For example, if you want to verify that a certain section of code is setting variables as you expect, set a breakpoint on a line of code at the beginning of the section and then step through the code line-by-line to watch the values of the variables actually being set by your application.</p>
<p>
You can set or clear a breakpoint when you are writing code or when execution is suspended. When a breakpoint is encountered, execution is suspended and Visual Basic displays the breakpoint and surrounding lines of code in the Module window.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To set or clear a breakpoint</b>
<ul>
<li>
Click the left margin of the Module window next to the line of code on which you want to set or clear the breakpoint.</li>
</ul>
<p>
When you set a breakpoint, Visual Basic displays the breakpoint indicator (a red circle) in the margin to the left of the line on which code will pause and displays the text of the line as white text on a red background. For example, the third statement of the procedure in the following illustration contains a breakpoint.</p>
<p>
<img src="abac07_2.gif" border=0></p>
<p>
Visual Basic displays a yellow arrow in the margin to the left of the statement at which the procedure is suspended and displays the statement inside a box with a yellow background. This arrow and yellow box indicate the <i>current statement</i>. The current statement is the next statement to be run. When the current statement also contains a breakpoint, both the breakpoint and current statement indicators are displayed overlapping in the margin. In the procedure in the preceding illustration, two <b>Step Into</b> commands have been carried out after reaching the breakpoint, and the fifth line is the current statement.</p>
<p>
Once a breakpoint is reached and the code is suspended, you can examine what has happened up to that point by inspecting variables and objects in the Debug window, by switching between the Debug window and the other windows in your database, and by using other debugging strategies described in the remainder of this chapter.</p>
<p>
If the error you’re trying to detect has already occurred, then you know a line of code that has already run is causing the problem. If the error hasn’t yet occurred, then a line of code that has not yet run is causing the problem. If the breakpoint line is the cause, the problem won’t occur until you run at least one more statement. Once execution is suspended, you can step through your code line by line to find the problem by clicking the <b>Step Into</b> button on the toolbar or by pressing F8.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on stepping through code line by line, see “Stepping Through Statements” later in this chapter.</p>
<p>
Important   The problem may not be a line of code. A statement can be the indirect cause of the problem if it assigns an incorrect value to a variable. You can examine the values of controls, properties, and variables while execution is suspended. For more information, see “Using the Immediate Pane” later in this chapter.</p>
<h3>Using a Stop Statement</h3>
<p>
As an alternative to setting a breakpoint, you can put a <b>Stop</b> statement in a procedure. Visual Basic suspends execution whenever it encounters a <b>Stop</b> statement. In effect, a <b>Stop</b> statement like a permanent breakpoint. When you close the database, all breakpoints are cleared, but <b>Stop</b> statements stay in the code until you remove them.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Stop</b> statement, search the Help index for “Stop statement.”</p>
<h3>Continuing Execution After a Run-Time Error</h3>
<p>
Some run-time errors result from simple oversights when you enter code and can be easily fixed. Suppose, for example, that you want your application to disable the Details command button on the Orders form in the Orders sample application when the form opens. But instead of setting the <b>Enabled</b> property in the control’s property sheet in Design view or adding code to the form’s Load event procedure that sets the control’s <b>Enabled</b> property to <b>False</b>, you try to add code to set the control’s nonexistent <b>Locked</b> property to <b>True</b>.</p>
<pre><code>Me!Details.Locked = True
</code></pre>
<p>
This code generates a run-time error when you try to open the Orders form, as shown in the following illustration.</p>
<p>
<img src="abac07_3.gif" border=0></p>
<p>
In this case, the solution is to fix the problem statement so that it uses the correct property and setting.</p>
<pre><code>Me!Details.Enabled = False</code></pre>
<p>
<img src="abac07_4.gif" border=0></p>
<p>
After you’ve changed the code that caused a run-time error, you can continue running your application from the point where execution was suspended. To continue running your application, click the<b> Go/Continue</b> button on the toolbar or press F5. The Orders form opens as expected with the Details command button disabled.</p>
<p>
Some changes, most commonly changes in variable declarations, may require the code to be reset after a run-time error occurs. When this is the case, Visual Basic displays a message and gives you the option of continuing without the change or accepting the change and resetting the code.</p>
</FONT></FONT></BODY>
</HTML>

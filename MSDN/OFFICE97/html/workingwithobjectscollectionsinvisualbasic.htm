<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Objects and Collections in Visual Basic</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="workingwithobjectscollectionsinvisualbasic"></a>Working with Objects and Collections in Visual Basic</h2>
<p>
Now that you’re familiar with the objects available in Microsoft Access, you can begin working with them in Visual Basic. The following sections provide you with the information you need to begin working with objects.</p>
<h3>Referring to Objects</h3>
<p>
To use an object in Visual Basic, you must specify which object it is that you intend to use. There are two types of objects with which you need to be concerned: objects that exist individually and don’t belong to collections, and objects that belong to collections.</p>
<p>
Some objects, such as the Microsoft Access <b>Application </b>object, are not members of a collection. Most of the time you can refer to these objects directly in your code. For example, you refer to the <b>Application </b>object in Visual Basic as follows:</p>
<pre><code>Application
</code></pre>
<p>
Other objects belong to collections, and you need to distinguish which object in the collection you want to work with, and which collection contains the object. For example, the DAO <b>TableDef</b>, <b>QueryDef</b>, <b>Recordset</b>, and <b>Relation </b>objects all have a <b>Fields </b>collection. If you refer to a <b>Field </b>object, you need to specify to which collection it belongs. Also, it’s likely that there’s more than one <b>Field </b>object in the <b>Fields </b>collection of one of these objects. To refer to a particular <b>Field </b>object, you must provide either its name or its position in the collection.</p>
<p>
There are three ways to refer to an object in a collection. The fastest way is to provide the name of the collection followed by the name of the object to which you are referring, as shown in the following examples:</p>
<pre><code>Forms!Employees
QueryDefs![Current Product List]
</code></pre>
<p>
Use the<b> ! </b>operator to separate the name of the collection from the name of the particular object within it. Also, if the name of the object contains spaces, you must enclose it in brackets. Finally, keep in mind that the <b>Forms </b>collection includes only forms that are currently open. If the Employees form isn’t open when you run the code in the preceding example, an error occurs. The same is true for the <b>Reports </b>collection.</p>
<p>
In most cases, you’ll know the name of the object to which you’re referring, and you should use this syntax. Occasionally, however, you may not know the name of the object until the procedure is running. In this case, you can use a string variable to represent the name of the object. In the following examples, <code>strFormName</code> and <code>strQueryDefName</code> are string variables that contain the name of a <b>Form</b> object and a <b>QueryDef</b> object.</p>
<pre><code>Forms(strFormName)
QueryDefs(strQueryDefName)
</code></pre>
<p>
If the value of <code>strFormName</code> is <code>&quot;Employees&quot;</code> and the value of <code>strQueryDefName</code> is <code>&quot;Current Product Name&quot;</code>, then the previous example is equivalent to the following lines of code:</p>
<pre><code>Forms(&quot;Employees&quot;)
QueryDefs(&quot;Current Product Name&quot;)
</code></pre>
<p>
You can also refer to an object in a collection by its index number. Like the elements of an array, each object in a collection has an index number that refers to its position in the collection. The following examples use the index number to refer to a particular object in a collection.</p>
<pre><code>Forms(0)
QueryDefs(1)
</code></pre>
<p>
Most collections are indexed beginning with zero. That is, the first object in a collection has an index of 0, the second has an index of 1, and so on. The first line of code in the previous example refers to the first open <b>Form </b>object in the <b>Forms </b>collection. In most cases, <b>Form </b>objects are indexed according to the order in which they were opened.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Some collections, such as the Microsoft Office <b>CommandBars</b> collection, are indexed beginning with 1 rather than 0. To determine how a particular collection is indexed, search the Help index for the name of that collection.</p>
<p>
The second line refers to the second <b>QueryDef </b>object in the <b>QueryDefs </b>collection. The <b>QueryDefs </b>collection includes all saved queries in the database, regardless of whether they are open. In most cases, <b>QueryDef </b>objects and other objects are indexed according to the order in which they were created in the database.</p>
<p>
When you refer to an object in code in any of these ways, Visual Basic returns an <i>object reference</i>. An object reference points to the place in memory where a particular object exists. When you work with an object in Visual Basic, you’re actually working with a reference to that object in memory.</p>
<h4>Referring to Objects in a Default Collection</h4>
<p>
Many objects in Microsoft Access contain one or more collections of lower-level objects, and one of these collections is generally designated as the default collection for that object. For example, a <b>Form</b> object contains a <b>Controls</b> collection, which is the collection you’re most likely to use with a <b>Form</b> object. Since the <b>Controls</b> collection is the default collection of a <b>Form</b> object, you can refer to the collection without explicitly specifying its name.</p>
<p>
The following line of code returns an object reference to a control called LastName on the Employees form using the default collection.</p>
<pre><code>Forms!Employees!LastName
</code></pre>
<p>
You can also use the full reference to the control, as shown in the following line of code:</p>
<pre><code>Forms!Employees.Controls!LastName
</code></pre>
<p>
The following table lists some objects that have default collections.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Object library</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Object</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Default collection</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Microsoft Access</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Controls</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Report</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Controls</b></td>
</tr>
<tr valign=top>
<TD>
DAO</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Container</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Documents</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Database</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">TableDefs</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">DBEngine</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Workspaces</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Group</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Users</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Index</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Fields</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">QueryDef</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Parameters</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Recordset</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Fields</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Relation</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Fields</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">TableDef</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Fields</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">User</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Groups</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Workspace</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Databases</b></td>
</tr>
</table>
<h3>Declaring and Assigning Object Variables</h3>
<p>
The preceding sections have shown how to return a reference to an object in order to work with that object in Visual Basic. It’s possible to use an object reference throughout your code each time you need to refer to a particular object. However, your code runs more quickly if you declare an <i>object variable </i>to represent the object instead. An object variable is a variable that represents an object in Visual Basic.</p>
<p>
To create an object variable, you first declare it as you would declare any variable, by using a <b>Dim</b>, <b>ReDim</b>, <b>Static</b>, <b>Private</b>, or <b>Public</b> statement. You can declare an object variable as a specific type of object or as the more generic type <b>Object</b>. You can also assign a variable of type <b>Variant </b>to an object. Whenever possible, declare an object variable as a specific type of object, because this makes your code run faster. The following line of code declares an object variable as type <b>Form</b>.</p>
<pre><code>Dim frm As Form
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on declaring variables, see Chapter 4, <a href="workingwithvariablesdatatypesconstants.htm">“Working with Variables, Data Types, and Constants.”</a></p>
<p>
Once you’ve declared an object variable, you assign an object reference to it. An object reference, as discussed in the previous section, refers to an object in memory. Each time you use an object reference, Visual Basic looks up the object in memory. When you assign the object reference to an object variable, it’s stored in that variable so that Visual Basic doesn’t have to look it up again. If you need to refer to an object more than once, it’s a good idea to create an object variable.</p>
<p>
To assign an object reference to an object variable, use the <b>Set </b>statement. The following line of code assigns a reference to the Employees <b>Form </b>object to the object variable declared in the preceding example.</p>
<pre><code>Set frm = Forms!Employees
</code></pre>
<p>
There is a key difference between using the <b>Set</b> statement with an object variable and assigning a value to other types of variables, such as variables of type <b>String </b>or <b>Integer</b>. Ordinary variables store a value. Even if two variables store the same value, they are stored in different locations in memory. Object variables, however, refer to actual physical objects in the database or in memory. An object variable stores a reference to an object, not the actual object itself or a copy of the object. It is this reference to the object that is assigned to the variable when you use the <b>Set</b> statement. You always work with the object reference in your code, never with the object itself.</p>
<p>
In the preceding example, <code>Forms!Employees</code> returns a reference to the Employees <b>Form</b> object, and it is this reference that is assigned to the variable <code>frm</code>. You can also say that the variable <code>frm</code> <i>points </i>to the Employees <b>Form</b> object.</p>
<p>
One advantage to this system of storing objects is that all variables assigned the same object reference refer to the same object. Therefore, even if an object is changed in some way, all variables that refer to the object reflect the change and represent the same information. You can also point the variable to a different object of the same type by using the <b>Set </b>statement again; you don’t necessarily have to create another variable. The variable simply stores an object reference to the new object.</p>
<h4>The Nothing Keyword</h4>
<p>
An object variable doesn’t require much memory or system resources until you assign it to an object. Once it’s pointing to an object, it uses much more. With the <b>Nothing </b>keyword, you can free the memory that’s being consumed by an object variable. You use the <b>Nothing </b>keyword with the <b>Set </b>statement to disassociate an object variable from the object to which it’s been pointing once you are no longer using it. For example, if you are no longer using an object variable that points to a <b>Form </b>object, you can free that variable as follows:</p>
<pre><code>Set frm = Nothing&#09;&#09;&#09;&#09;' Where frm is a Form object variable.
</code></pre>
<p>
When you set an object variable to the <b>Nothing </b>keyword, you are no longer storing a reference to a particular object. The variable still exists, and you can assign another object to it when you need it.</p>
<h3>Using Objects and Collections in Code</h3>
<p>
Once you understand how to refer to objects in Visual Basic and how to create object variables to represent them, you can begin using objects in code. The following sections present concepts that may be useful to you as you begin working with objects and collections.</p>
<h4>Navigating the Object Hierarchy</h4>
<p>
As explained earlier in this chapter, in order to work with an object that belongs to a collection, you must refer to that object in its collection. Since objects are related to one another in an object hierarchy, you must also make clear where the object and collection exist in the overall hierarchy. In other words, if the object is a member of a collection, you must qualify the object with the name of its collection. If that collection belongs to another object, you must qualify the collection with the name of that object, and so on.</p>
<p>
When you create an object variable and assign an object to it, the information about that object’s position within the object hierarchy is stored with the variable. An object variable becomes a sort of shorthand for all the objects preceding the one you want to work with in the object hierarchy.</p>
<p>
The following example shows how you can work within the Microsoft Access object hierarchy to access individual objects. The procedure returns a reference to the Employees <b>Form </b>object, which is a member of the <b>Forms</b> collection, and assigns it to an object variable. Then it returns a reference to the LastName <b>Control </b>object, which is a member of the <b>Controls</b> collection of the <b>Form</b> object, and assigns it to an object variable. Finally it uses the <b>ControlType </b>property of the <b>Control </b>object to determine what type of control this is. If the control is a text box, the procedure sets its <b>Locked </b>property to <b>True</b>.</p>
<pre><code>Sub LockControl()

&#09;Dim frm As Form, ctl As Control&#09;&#09;&#09;&#09;' Declare object variables.

&#09;Set frm = Forms!Employees&#09;&#09;&#09;&#09;&#09;&#09;' Return reference to Form object.
&#09;Set ctl = frm!LastName&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Return reference to Control object.

&#09;If ctl.ControlType = acTextBox Then&#09;&#09;' Check ControlType property.
&#09;&#09;ctl.Locked = True&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Lock control if it's a text box.
&#09;End If
&#09;Set frm = Nothing
End Sub
</code></pre>
<p>
Although the <b>Forms </b>collection is a member of the Microsoft Access <b>Application </b>object, you don’t need to refer to the <b>Application </b>object when you refer to the <b>Forms </b>collection or to other Microsoft Access objects and collections. The <b>Application </b>object is implicitly understood.</p>
<p>
You work with objects and collections in the DAO object hierarchy in a similar manner. The next example navigates through the DAO object hierarchy and prints the name of each field in the Employees table.</p>
<pre><code>Sub ListTableFields()

&#09;' Declare object variables.
 &#09;Dim dbs As Database, tdf As TableDef, fld As Field

&#09;' Return reference to current database.
 &#09;Set dbs = CurrentDb
&#09;' Return reference to Employees table.
 &#09;Set tdf = dbs.TableDefs!Employees

&#09;' Print out all fields in the table.
&#09;For Each fld In tdf.Fields
 &#09;&#09;Debug.Print fld.Name
 &#09;Next fld
&#09;Set dbs = Nothing
End Sub
</code></pre>
<h4>Enumerating the Objects in a Collection</h4>
<p>
The previous example shows another concept that’s important when working with collections. In order to print out all the fields in the table, the procedure must loop through, or <i>enumerate</i>, all the <b>Field </b>objects in the <b>Fields </b>collection of the <b>TableDef </b>object. You accomplish this by using the <b>For Each...Next </b>statement. You can use the <b>For Each...Next </b>statement to perform the same operation on each member of a collection.</p>
<p>
To use the <b>For Each...Next </b>statement, you must first identify which objects you want to enumerate and in which collection they reside. Next, you declare a variable of that type of object. The previous example declares the variable <code>fld</code> as type <b>Field</b>. Within the <b>For Each...Next</b> statement, that variable refers to each object in the <b>Fields </b>collection. By using this variable, you can perform a method or set or return a property on each object in the collection, without knowing how many objects the collection contains.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>For Each...Next </b>statement, search the Help index for “For Each...Next statement.”</p>
<h4>Adding New DAO Objects to a Collection</h4>
<p>
As stated earlier in this chapter, some DAO objects represent the structure of the database, and others provide a means for you to work with the data stored in the database. Objects that represent the structure of the database are saved with the database. Objects that you use to work with the data in the database generally are not saved, but are created each time you need them.</p>
<p>
When you create a new DAO object to be saved with the database, you must append it to the appropriate collection of saved objects. The following example creates a new <b>TableDef </b>object named ArchivedInvoices with a new <b>Field </b>object named OrderID. It appends the new <b>Field </b>object to the <b>Fields </b>collection of the new <b>TableDef </b>object, and it appends the <b>TableDef </b>object to the <b>TableDefs </b>collection of the <b>Database </b>object representing the current database. After you run this code, the new table appears on the <b>Tables</b> tab of the Database window.</p>
<pre><code>Sub AddTable()

&#09;' Declare object variables.
&#09;Dim dbs As Database, tdf As TableDef, fld As Field

&#09;' Assign the current database to the database variable.
&#09;Set dbs = CurrentDb
&#09;' Create new table and field, and assign to table and field variables.
&#09;Set tdf = dbs.CreateTableDef(&quot;ArchivedInvoices&quot;)
&#09;Set fld = tdf.CreateField(&quot;OrderID&quot;, dbLong)

&#09;' Add field to table's Fields collection.
&#09;tdf.Fields.Append fld
&#09;' Add table to database's TableDefs collection.
&#09;dbs.TableDefs.Append tdf
&#09;' Refresh TableDefs collection.
&#09;dbs.TableDefs.Refresh
&#09;Set dbs = Nothing
End Sub
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The preceding example uses the <b>CurrentDb </b>function to return a reference to the current database, and assigns this reference to an object variable of type <b>Database</b>. Anytime you’re writing code to work with the database that’s currently open, you should use <b>CurrentDb </b>to return a reference to the current database.</p>
<h4>The Properties Collection</h4>
<p>
DAO objects and Microsoft Access <b>Form</b>, <b>Report</b>, and <b>Control </b>objects all contain a <b>Properties </b>collection. Each <b>Property </b>object in the <b>Properties </b>collection corresponds to a property of the object. You can use an object’s <b>Properties </b>collection either to determine which properties apply to a particular object or to return their settings. For example, the following procedure loops through the properties that apply to the <b>Database </b>object, which represents the current database, and to the Employees <b>Form</b> object. The procedure displays the name of each property in the Debug window.</p>
<pre><code>Sub DisplayProperties()

&#09;' Declare variables.
&#09;Dim dbs As Database, frm As Form, prp As Property

&#09;' Return reference to current database.
&#09;Set dbs = CurrentDb
&#09;Debug.Print &quot;Current Database Properties&quot;

&#09;' Enumerate Properties collection.
&#09;For Each prp In dbs.Properties
&#09;&#09;Debug.Print prp.Name
&#09;Next prp
&#09;' Print blank line.
&#09;Debug.Print
&#09;Debug.Print &quot;Employees Form Properties&quot;
&#09;' Open Employees form in Form view.
&#09;DoCmd.OpenForm &quot;Employees&quot;, acWindowNormal

&#09;' Return reference to Employees form.
&#09;Set frm = Forms!Employees

&#09;' Enumerate Properties collection.
&#09;For Each prp In frm.Properties
&#09;&#09;Debug.Print prp.Name
&#09;Next prp
&#09;Set frm = Nothing
&#09;Set dbs = Nothing
End Sub
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you’re looping through the <b>Properties </b>collection of a table or query, some properties aren’t displayed because they’re added to the collection only when they have a value.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Properties </b>collection, search the Help index for “Properties collection.”</p>
<h4>Working with CommandBar Objects</h4>
<p>
Creating new <b>CommandBar </b>objects is somewhat different from creating other new objects in Microsoft Access. To create a new <b>CommandBar </b>object, you use the <b>Add </b>method of the <b>CommandBars </b>collection. The following example creates a new <b>CommandBar</b> object and adds a button to it:</p>
<pre><code>Sub CreateNewCommandBar()

&#09;Dim cmb As CommandBar, cbc As CommandBarControl

&#09;' Create new CommandBar object and return reference to it.
&#09;Set cmb = CommandBars.Add(&quot;NewCommandBar&quot;, msoBarFloating)
&#09;' Create new CommandBarControl object and return reference to it.
&#09;Set cbc = cmb.Controls.Add(msoControlButton)

&#09;' Set properties of new command bar control.
&#09;With cbc
&#09;&#09;.Caption = &quot;Button1&quot;
&#09;&#09;.DescriptionText = &quot;First button in NewCommandBar&quot;
&#09;&#09;.OnAction = &quot;Button1Function()&quot;&nbsp;&nbsp;&nbsp;&nbsp;' Run this function when button is pressed.
&#09;&#09;.Visible = True
&#09;End With

&#09;' Make command bar visible.
&#09;cmb.Visible = True
&#09;Set cmb = Nothing
End Sub
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;In order to use objects in the Microsoft Office 8.0 object library from Visual Basic, you must first set a <i>reference</i> to the object library. When you set a reference to an object library, you notify Visual Basic that you may want to use the objects in that library. To set a reference to the Microsoft Office 8.0 object library, open a module and click <b>References</b> on the <b>Tools</b> menu. Then select the <b>Microsoft Office 8.0 Object Library </b>check box in the <b>Available References</b> box.</p>
<h4>Creating New Objects with Class Modules</h4>
<p>
Every object that you use in Microsoft Access is derived from a unique definition for that object. The definition for an object includes its name, its inherent characteristics, and its properties, methods, and events. The definition for an object is known as a <i>class</i>.</p>
<p>
To simplify the concept of a class, you can think of a class as a cookie cutter, and an object as the cookie that it makes. You can create multiple objects from a single class, just as you can make multiple cookies with a single cookie cutter. Each individual object has the same characteristics, just as each cookie has the same shape and pattern.</p>
<p>
An individual object can also be referred to as an <i>instance</i> of a class. An instance of a class is like a single cookie cut from the cookie cutter. When you create an instance of a class, you create a new object and return an object reference to it. You then work with the instance by setting its properties and applying its methods.</p>
<p>
In addition to the objects provided by Microsoft Access and its associated object libraries, you can define your own custom objects in <i>class modules</i>. A class module is a module that can contain the definition for a new object.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create a definition for a new object in a class module</b>
<ol>
<li>
Define the purpose for your new object. Think of the object in terms of the methods and properties it should have. For example, calling functions in a dynamic-link library (DLL) is often tricky. You can create an object that has methods that contain those function calls. Then, when you want to call a particular function, you can simply call the method that contains it, rather than calling the complex function.</li>
<li>
Create a new class module by clicking <b>Class Module</b> on the <b>Insert</b> menu. Choose a name for your class and save the class module with that name.</li>
<li>
Add procedures to the class module. Any <b>Sub</b> or <b>Function</b> procedures that you define in a class module become custom methods of your new object. Any <b>Property Get</b>, <b>Property Let</b>, or <b>Property Set</b> procedures that you define become custom properties of your new object.</li>
<li>
If you want certain code to run when an instance of the class is created, add that code to the class’s Initialize event procedure. If you want certain code to run when an instance of the class is removed from memory, add it to the class’s Terminate event procedure.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the Initialize and Terminate events, search the Help index for “Initialize event” or “Terminate event.”</p>
</li>
<li>
Test the new class by creating an instance of it and applying its methods and setting its properties. To create an instance of your class, use the <b>New</b> keyword to declare an object variable of type <i>classname</i>, where <i>classname</i> represents the name of your class. The <b>New</b> keyword creates a new instance of the class.<p>
For example, if your class is named NewClass, you can declare a new instance of it as shown in the following line of code:</p>
<pre><code>Dim obj As New NewClass
</code></pre>
<p>
If you’ve defined a method called ListNames within the class module, you can then apply that method as follows:</p>
<pre><code>obj.ListNames
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>New</b> keyword, search the Help index for “New keyword.”</p>
</li>
</ol>
<p>
You can view the new class and its variables, methods, and properties in the Object Browser, which is available through the <b>View</b> menu in the Module window. In the <b>Project/Library</b> box, click the name of your project, and then click the name of the class in the <b>Classes</b> box. You can determine the name of your project by checking the value in the <b>Project Name</b> box on the <b>Advanced</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu).</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the Object Browser, see “Using the Object Browser” later in this chapter. For more information on programming with class modules, search the Help index for “class modules.”</p>
<h4>Creating Multiple Instances of Forms and Reports</h4>
<p>
Form modules and report modules are also class modules. They are identical to the class modules on the <b>Modules</b> tab of the Database window, except that they are associated with forms and reports. Since form and report modules are class modules, you can create one or more instances of a form or report class. This is useful if you want to display more than one instance of a form or report at a time.</p>
<p>
When you create a new instance of a form or report class, the new instance has all the properties and methods of a <b>Form</b> or <b>Report</b> object, and its properties are set to the same values as those in the original <b>Form </b>or <b>Report</b> object. Additionally, any procedures that you have written in the form or report class module behave as methods and properties of the new instance.</p>
<p>
To create a new instance of a form or report class, you declare a new object variable by using the <b>New </b>keyword and the name of the form or report’s class module. The name of the class module appears in the title bar of the module. It indicates whether the class is associated with a form or a report and includes the name of the form or report. For example, the class name for an Orders form is Form_Orders. The following line of code creates a new instance of the Orders form:</p>
<pre><code>Dim frmInstance As New Form_Orders
</code></pre>
<p>
By creating multiple instances of an Orders form class, you could show information about one order on one form instance, and information about another order on another form instance. </p>
<p>
When you create an instance of a form class by using the <b>New</b> keyword, it is hidden. To show the form, set the <b>Visible</b> property to <b>True</b>.</p>
<p>
You should declare the variable that represents the new instance of a form<b> </b>class at the module level. If you declare the variable at the procedure level, the variable goes out of scope when the procedure finishes running, and the new instance is removed from memory. The instance exists in memory only as long as the variable to which it is assigned remains in scope.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When you create a new form or report in Microsoft Access, the form or report doesn’t automatically have an associated module. Forms and reports without associated modules load more quickly. If you’re working in form or report Design view, Microsoft Access automatically creates the form or report module when you click <b>Code</b> on the <b>View</b> menu. Once you enter code in the module, Microsoft Access saves the module with the form or report.</p>
<p>
Whether or not the form or report module exists is determined by the setting of the <b>HasModule </b>property. When a form or report is created, the <b>HasModule </b>property is automatically set to <b>False</b>. When you create a form or report module by clicking <b>Code</b> on the <b>View</b> menu, Microsoft Access sets the <b>HasModule</b> property to <b>True</b>. If you refer to the <b>Module</b> property of a form or report, the <b>HasModule</b> property is also automatically set to <b>True</b>. For more information on the<b> HasModule </b>property, search the Help index for “HasModule property.”</p>
</FONT></FONT></BODY>
</HTML>

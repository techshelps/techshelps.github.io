<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Event Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="debuggingeventprocedures"></a>Debugging Event Procedures</h2>
<p>
Certain events that are a normal part of using Microsoft Windows can pose special challenges when you’re debugging an application. It’s important to be aware of these issues so they don’t confuse you or complicate the debugging process.</p>
<p>
If you keep in mind that suspending execution can put events at odds with what your application expects, you can usually find solutions. You may need to use the <b>Print </b>method of the <b>Debug </b>object instead of breakpoints to monitor values of properties or variables. You may also need to change the values of variables that depend on the sequence of events.</p>
<p>
If you suspend execution during a MouseDown event procedure, you can release the mouse button or use the mouse to do any number of tasks. However, when you continue execution, the application assumes that the mouse button is still pressed down. A MouseUp event doesn’t occur until you press the mouse button down again and release it.</p>
<p>
However, when you press the mouse button down after you continue execution, you once again suspend execution in the MouseDown event procedure. In this scenario, the MouseUp event never occurs. The typical solution is to remove the breakpoint in the MouseDown event procedure and use the <b>Print </b>method of the <b>Debug </b>object to determine the status of any variables.</p>
<p>
If you suspend execution during a KeyDown event procedure, considerations similar to those during a MouseDown event procedure apply. If you retain a breakpoint in a KeyDown event procedure, a KeyUp event may never occur.</p>
<p>
If you suspend execution during a GotFocus or LostFocus event procedure, the timing of system messages may cause inconsistent results. You can avoid this problem by using the <b>Print </b>method of the <b>Debug </b>object instead of suspending execution in GotFocus or LostFocus event procedures.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on using events, see Chapter 6, <a href="respondingtoevents.htm">“Responding to Events.”</a></p>
</FONT></FONT></BODY>
</HTML>

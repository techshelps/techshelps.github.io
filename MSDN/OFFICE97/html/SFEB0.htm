<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Utility Functions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Utility Functions</H2><P CLASS="t">Dispargs.c also includes utility functions used to manage variants and argument arrays. The ClearVariant function sets a variant to zero. This function ignores the current contents of the variant. If you are unsure of the current contents of the variant, you should call the ReleaseVariant function before you clear the variant.</P>

<pre><code><FONT FACE="Courier" SIZE="2">void ClearVariant(VARIANTARG *pvarg)
{
    pvarg-&gt;vt = VT_EMPTY;
    pvarg-&gt;wReserved1 = 0;
    pvarg-&gt;wReserved2 = 0;
    pvarg-&gt;wReserved3 = 0;
    pvarg-&gt;lVal = 0;
}
</FONT></code></pre>
<P CLASS="t">The ClearAllArgs function releases any memory in use by the argument array and resets the argument counters. Because these arrays are static, it is important to call the ClearAllArgs function before you begin to set up arguments.</P>

<pre><code><FONT FACE="Courier" SIZE="2">void ClearAllArgs()
{
    int i;
</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">    for (i = 0; i &lt; g_iArgCount; i++) 
    {
        if (g_awFlags[i] &amp; DISPARG_NOFREEVARIANT)
            // free the variant's contents based on type
            ClearVariant(&amp;g_aVargs[i]);
        else
            ReleaseVariant(&amp;g_aVargs[i]);
    }

    g_iArgCount = 0;
    g_iNamedArgCount = 0;
}
</FONT></code></pre>
<P CLASS="t">The ReleaseVariant function releases any memory allocated for a variant (such as a variant containing a string or array). Use this function anytime you set a variant if you are unsure of its current contents. For example, a memory leak will result if you set a variant that currently contains a string without first releasing the string.</P>
<P CLASS="t">This function supports the following data types: integers, Booleans, doubles, objects, strings, and arrays of any of the listed data types.</P>

<pre><code><FONT FACE="Courier" SIZE="2">void ReleaseVariant(VARIANTARG *pvarg)
{
    VARTYPE vt;
    VARIANTARG _huge *pvargArray;
    long lLBound, lUBound, l;

    vt = pvarg-&gt;vt &amp; 0xfff;        // mask off flags

    // check if an array.  If so, free its contents, 
    // then the array itself.
    if (V_ISARRAY(pvarg)) 
    {
        // variant arrays are all this routine currently knows about.
        // Since a variant can contain anything (even other arrays), 
        // call ourselves recursively.
        if (vt == VT_VARIANT) 
        {
            SafeArrayGetLBound(pvarg-&gt;parray, 1, &amp;lLBound);
            SafeArrayGetUBound(pvarg-&gt;parray, 1, &amp;lUBound);

            if (lUBound &gt; lLBound) 
            {
                lUBound -= lLBound;

                SafeArrayAccessData(pvarg-&gt;parray, &amp;pvargArray);
</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">                for (l = 0; l &lt; lUBound; l++) 
                {
                    ReleaseVariant(pvargArray);
                    pvargArray++;
                }

                SafeArrayUnaccessData(pvarg-&gt;parray);
            }
        }
        else 
        {
            MessageBox(g_hwndApp, L"ReleaseVariant: Array contains 
                non-variant type", g_szAppTitle, MB_OK | MB_ICONSTOP);
        }

        // Free the array itself.
        SafeArrayDestroy(pvarg-&gt;parray);
    }
    else 
    {
        switch (vt) 
        {
            case VT_DISPATCH:
                (*(pvarg-&gt;pdispVal-&gt;lpVtbl-&gt;Release))(pvarg-&gt;pdispVal);
                break;

            case VT_BSTR:
                SysFreeString(pvarg-&gt;bstrVal);
                break;

            case VT_I2:
            case VT_BOOL:
            case VT_R8:
            case VT_ERROR:        // to avoid erroring on an error return 
                                // from Excel
                // no work for these types
                break;

            default:
                MessageBox(g_hwndApp, L"ReleaseVariant: Unknown type", 
                    g_szAppTitle, MB_OK | MB_ICONSTOP);
                break;
        }
    }

    ClearVariant(pvarg);
}
</FONT></code></pre>
<P></P>
<P></P>
<P></P></FONT>
</FONT></BODY></HTML>

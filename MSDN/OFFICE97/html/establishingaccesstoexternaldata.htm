<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Establishing Access to External Data</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="establishingaccesstoexternaldata"></a>Establishing Access to External Data</h2>
<p>
As mentioned earlier, this chapter discusses two ways to access external data: linking external tables to your Microsoft Access database and opening external tables directly. To link a table, you can use either the Microsoft Access user interface or Visual Basic code; you must use Visual Basic to open tables directly. The procedure for linking a table in code is similar to the procedure for opening a table directly. The following table summarizes the key differences.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To link an external table</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To open an external table directly</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Open the Microsoft Access database to which you are linking the table.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Open the external data source.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Create a <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">TableDef</b> object for the external table.</td>
<TD>
Create a <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Recordset</b> object for the external table.</td>
</tr>
</table>
<p>
When you use Visual Basic to link a table or to open it directly, you use <i>connection strings</i>, which are string expressions that pass the values necessary to establish a connection to an external data source.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on connection strings, see “Specifying Connection Information” later in this chapter.</p>
<h3>Linking External Tables</h3>
<p>
You can use either the Microsoft Access user interface or Visual Basic code to link external tables.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To link an external table by using the Microsoft Access user interface</b>
<ol>
<li>
Open the Microsoft Access database to which you are linking the table.</li>
<li>
On the <b>File</b> menu, point to <b>Get External Data</b>, and then click <b>Link Tables</b>.<p>
The <b>Link</b> dialog box appears.</p>
</li>
<li>
In the <b>Files Of Type</b> box, select the file type.</li>
<li>
Select the drive and folder where the external table is located and then double-click its icon.</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can also modify links to external tables after the links are created. To do so, point to <b>Add-ins</b> on the <b>Tools</b> menu, and click <b>Linked Table Manager</b>.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To link an external table by using Visual Basic code</b>
<ol>
<li>
Open the database that will contain the link. If it is the current database, usethe <b>CurrentDb</b> function to return an object variable that represents the current database. If it isn’t the current database, use the <b>OpenDatabase</b> method to open the database you want.</li>
<li>
Using the <b>CreateTableDef</b> method, create a new <b>TableDef</b> object.</li>
<li>
Set the <b>Connect</b> property of the <b>TableDef</b> object to a connection string that specifies the type of data source you’re connecting to and the path to the file that contains the table. If the external data source is protected with security, you can also use the connection string to specify user name and password information required to access the data source.</li>
<li>
Set the <b>SourceTableName</b> property of the <b>TableDef</b> object to the name of the table whose data you want to access.</li>
<li>
Append the <b>TableDef</b> object to the <b>TableDefs</b> collection to create a link.</li>
</ol>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the syntax and format of connection strings, see “Specifying Connection Information” later in this chapter, or search the Help index for “Connect property.”</p>
<p>
The following code links a FoxPro table to a Microsoft Access database. It assumes you want to link the Q1Sales table in a FoxPro version 3.0 database named Region1 on the server and shared folder \\Sales\Regional.</p>
<pre><code>Sub LinkFoxProTable()
&#09;Dim dbs As Database
&#09;Dim tdfSales As TableDef
&#09;Dim rst As Recordset

&#09;' Open the Microsoft Access database.
&#09;Set dbs = CurrentDb

&#09;' Create a TableDef object.
&#09;Set tdfSales = dbs.CreateTableDef(&quot;Western Region Sales&quot;)

&#09;' Set the connection string to specify the source database type and the
&#09;' path to the file that contains the table you want to link.
&#09;tdfSales.Connect = &quot;FoxPro 3.0;DATABASE=\\Sales\Regional\Region1&quot;

&#09;' Set the SourceTableName property to the name of the table you want to access.
&#09;tdfSales.SourceTableName = &quot;Q1Sales&quot;

&#09;' Append the TableDef object to the TableDefs collection to create a link.
&#09;dbs.TableDefs.Append tdfSales

&#09;' Create a Recordset object from the linked table.
&#09;Set rst = dbs.OpenRecordset(&quot;Western Region Sales&quot;)
End Sub
</code></pre>
<p>
Important   Use a semicolon (;) to separate arguments specified in the <b>Connect</b> property. Don’t include any spaces on either side of the semicolon.</p>
<p>
Instead of specifying the connection string and source table name by setting properties of the <b>TableDef</b> object, you can specify them by using the<i> connect</i> and <i>source</i> arguments of the <b>CreateTableDef</b> method, as shown in the following example:</p>
<pre><code>Sub LinkFoxProTable2()
&#09;Dim dbs As Database
&#09;Dim tdfSales As TableDef

&#09;' Open the Microsoft Access database.
&#09;Set dbs = CurrentDb

&#09;' Specify the connection string and table name as arguments of the
&#09;' CreateTableDef method.
&#09;Set tdfSales = dbs.CreateTableDef(&quot;Western Region Sales&quot;, 0, &quot;Q1Sales&quot;, _
&#09;&#09;&quot;FoxPro 3.0;DATABASE=\\Sales\Regional\Region1;&quot;)

&#09;' Append the TableDef object to the TableDefs collection to create a link.
&#09;dbs.TableDefs.Append tdfSales
End Sub
</code></pre>
<h3>Maintaining Links to External Tables</h3>
<p>
Links to external tables are convenient because they store all of the connection information you need to access the table in the future. Connection information for linked tables resides in the <b>TableDef</b> object for that table in your Microsoft Access database. If you move or delete the external table, you must update the corresponding <b>TableDef</b> object to reflect this change.</p>
<h5>Updating Links to External Tables That Have Moved</h5>
<p>
If you move a table that you previously linked, you need to refresh the link before you can access the table again. To refresh a link, you must reset the <b>Connect</b> property of the <b>TableDef</b> object to point to the table’s new location. Then, use the <b>RefreshLink</b> method of the <b>TableDef</b> object to update the link information.</p>
<p>
To see an example of how this works, open the Developer Solutions sample application in the Samples subfolder of your Office folder. In the upper part of the Developer Solutions form, double-click <b>Use Multiple Databases</b>. In the lower part, double-click <b>Link Tables At Startup</b>. </p>
<h5>Deleting Links to External Tables</h5>
<p>
You can also delete the <b>TableDef</b> object associated with an external table. This removes the table’s icon from your Microsoft Access database along with the associated linking information. When you delete a <b>TableDef</b> that defines a linked table from your Microsoft Access database, the external table is unaffected.</p>
<h3>Opening External Tables</h3>
<p>
In contrast to linking external tables, when you open an external table directly, you must supply the connection information at the beginning of each session to establish a connection to the data source. None of the information needed to establish a connection to the external data source is stored in your Microsoft Access database.</p>
<p>
When you open a table directly, you specify the source and connection information as arguments of the <b>OpenDatabase</b> method instead of setting them separately as properties of a <b>TableDef</b> object. The following code uses the FoxPro table from the preceding examples to show how to open a table directly:</p>
<pre><code>Sub OpenFoxProTable()
&#09;Dim dbs As Database
&#09;Dim rstSales As Recordset

&#09;' Open an external FoxPro database named Region1.
&#09;Set dbs = OpenDatabase(&quot;\\Sales\Regional\Region1&quot;, False, False, &quot;FoxPro 3.0;&quot;)

&#09;' Create a Recordset from the Q1Sales table.
&#09;Set rstSales = dbs.OpenRecordset(&quot;Q1Sales&quot;)
End Sub
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Use the <i>dbname</i> argument of the <b>OpenDatabase</b> method to specify the path and file name, and use the <i>source</i> argument of the <b>OpenRecordset</b> method to specify the table name. For external data sources that store one table per file, the <i>dbname</i> argument should contain the full path to the file, and the <i>source</i> argument should contain the table name. For Paradox databases, the table name should not have an extension. However, you can include an extension for dBASE and FoxPro databases. For external data sources that store multiple tables in a file, the <i>dbname</i> argument should contain the full path to the file, including the file name and extension; the <i>source</i> argument should contain the table name.</p>
<p>
By default, Microsoft Jet determines which types of <b>Recordset</b> objects are available for the data source you are accessing and creates the type that will result in the best performance. If you open the data source directly, Microsoft Jet opens a table-type <b>Recordset</b> object. If you want more control over the type of <b>Recordset </b>object you open, you can specify a <i>type</i> argument for the <b>OpenRecordset</b> method.</p>
<p>
Important   You cannot specify that Microsoft Jet open a table-type <b>Recordset</b> object for ODBC databases and linked installable ISAM tables.</p>
<p>
After you’ve opened the table, you can manipulate the <b>Recordset</b> object you created just as you would any other <b>Recordset</b> object in your Microsoft Access database. Keep in mind, however, that you must reestablish your connection to the external data source and re-create the <b>Recordset</b> object for each session.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on working with <b>Recordset</b> objects, see Chapter 9, <a href="workingwithrecordsfields.htm">"Working with Records and Fields,"</a> or search the Help index for “Recordsets.”</p>
<h3>Specifying Connection Information</h3>
<p>
Earlier in this chapter, several examples of connection strings showed how to specify connection information. The following sections contain additional information on connection strings, their syntax, and their format.</p>
<h4>Specifying Paths and File Names</h4>
<p>
When you specify a file name for a database, spreadsheet, text file, or HTML file, you must include the fully qualified path to the file. On a local drive, the path must include the drive letter, all folders and subfolders, and the file name. For example, to specify the FoxPro database Region1 located in the \FoxPro3 folder on the local drive C, use the following path:</p>
<pre><code>C:\FoxPro3\Region1
</code></pre>
<p>
On a network drive, the path must include the server name, share name, all folders and subfolders, and the file name. For example, to specify the FoxPro database Region1 on the Regional share on the Sales server, use the following path:</p>
<pre><code>\\Sales\Regional\Region1
</code></pre>
<p>
You can also map a network path to a network drive and indicate the path as the drive letter followed by the file name. For example, to specify the FoxPro database Region1 on the Regional share on the Sales server where the network path \\Sales\Regional has been mapped to the network drive G, use the following path:</p>
<pre><code>G:\Region1
</code></pre>
<p>
To specify the FoxPro database Region1 on the Regional share on the File Transfer Protocol (FTP) server named Sales, use the following path:</p>
<pre><code>ftp://Sales/Regional/Region1
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;ODBC data sources use a different specifier, called a <i>data source name</i> (DSN), to indicate the path and file name. For all ODBC data sources, use a zero-length string (&quot; &quot;) as the path and file name. For more information on the ODBC DSN, see the following section, “Specifying Data Source Names for ODBC Data Sources.”</p>
<h4>Specifying Data Source Names for ODBC Data Sources</h4>
<p>
ODBC data sources use data source names, or DSNs, for specifying the path and file name and connection information. You can add a DSN by using the ODBC Data Source Administrator in Windows Control Panel or the <b>RegisterDatabase</b> method of the <b>DBEngine</b> object. Data source names are stored in the Windows Registry key <b>\HKEY_CURRENT_USER\Software\ODBC</b>\<b>ODBC.INI</b>.</p>
<p>
Each entry in the <b>ODBC.INI</b> key assigns a logical DSN to a set of attributes that includes:
<ul>
<li>
The name of the ODBC database server</li>
<li>
The name of the database on the server, if multiple databases are supported</li>
<li>
The type of server (for example, SQL&nbsp;Server)</li>
<li>
A description of network and connection information</li>
<li>
Additional information, such as character set conversions</li>
</ul>
<p>
Because connections to ODBC data sources rely on this information, your users must have the appropriate DSN in their Windows Registry before your application attempts to access external data.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on creating a DSN through the ODBC Data Source Administrator, see the ODBC Data Source Administrator Help. For more information on using the <b>RegisterDatabase</b> method, search the Help index for “RegisterDatabase method.”</p>
<h4>Specifying Source Database Types</h4>
<p>
The installable ISAM driver for each external data source has an associated database type. When accessing data from an external data source that does not use Microsoft Jet, you must specify the source database type in the connection string so that Microsoft Access knows how to handle the data. It is not necessary to specify the source database type when you are accessing data from other data sources that use Microsoft Jet.</p>
<p>
The following table lists the source database types for external data sources supported by Microsoft Access.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Data source</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Source database types</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
dBASE</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<pre><code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">dBASE IIIdBASE IVdBASE 5.0
</code></pre>
</td>
</tr>
<tr valign=top>
<TD>
Microsoft Excel</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Excel 3.0Excel 4.0Excel 5.0 </code>(used for Microsoft Excel versions 5.0 and 7.0)<code>Excel 8.0</code></td>
</tr>
<tr valign=top>
<TD>
FoxPro</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<pre><code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">FoxPro 2.0FoxPro 2.5FoxPro 2.6FoxPro 3.0FoxPro DBC
</code></pre>
</td>
</tr>
<tr valign=top>
<TD>
Lotus 1-2-3</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<pre><code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Lotus WK1Lotus WK3Lotus WKS
</code></pre>
</td>
</tr>
<tr valign=top>
<TD>
ODBC</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<pre><code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ODBC</code></pre>
</td>
</tr>
<tr valign=top>
<TD>
Paradox</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<pre><code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Paradox 3.<i>x</i>Paradox 4.<i>x</i>Paradox 5.<i>x
</i></code></pre>
</td>
</tr>
<tr valign=top>
<TD>
Text</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<pre><code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Text</code></pre>
</td>
</tr>
<tr valign=top>
<TD>
HTML</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<pre><code><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">HTML Import</code></pre>
</td>
</tr>
</table>
<p>
Important   In the connection strings, you must enter the source database type strings exactly as they appear in this table, including spaces and punctuation.</p>
<h4>Specifying Passwords</h4>
<p>
If an external table has been protected with a password, you can access the table if you have the correct password information. To access a password-protected table, provide the password in the PWD argument (PWD=<i>password</i>) in the connection string. You must follow the PWD argument with a semicolon. You can either prompt the user for password information and then supply it to the connection string or you can write Visual Basic code that specifies the password, as shown in the following example:</p>
<pre><code>Set tdfRegionOne = dbs.CreateTableDef(&quot;First Quarter Sales&quot;,0,&quot;Q1Sales&quot;, _
&#09;&quot;Paradox 4.x;DATABASE=\\Sales\Regional\Region1;PWD=RollsRoyce;&quot;)
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can use the PWD argument to specify database passwords only; you cannot use it to log on to a network. If your application requires network access, you must establish these connections before attempting to access the external data.</p>
<p>
You cannot use the PWD argument to decrypt Microsoft Excel worksheets or workbooks; you must unprotect and save the worksheet or workbook in Microsoft Excel before you can open it with the Microsoft Excel installable ISAM driver.</p>
<p>
Important   If you store sensitive data in the external data source, you may not want to specify the password in your code. If you do specify passwords in your code, consider either encrypting your database so that others cannot read the password with a text editor or disk utility, or establishing user-level security. For more information on encrypting your database or establishing user-level security, see Chapter 14, <a href="securingyourapplication.htm">“Securing Your Application.”</a></p>
<h4>Saving ODBC Passwords Between Sessions</h4>
<p>
You can save a password as part of a linked ODBC table definition by setting the <b>Attributes</b> property of the <b>TableDef</b> object to <b>dbAttachSavePWD</b>, as shown in the following example:</p>
<pre><code>tdfRegionOne.Attributes = dbAttachSavePWD
</code></pre>
<p>
The user is prompted once for a password to the external data source. After that, each time a user opens the linked table, Microsoft Access uses the password information that is stored with it.</p>
<p>
If your external data is particularly sensitive, you may not want users to be able to save their passwords. To change this behavior, you must create the MSysConf table in your external database to prohibit local storage of logon IDs and passwords. ODBC will automatically prompt users for any missing authentication information when they attempt to open the external database.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the MSysConf table, see Chapter 19, <a href="developingclientserverapplications.htm">“Developing Client/Server Applications.”</a></p>
</FONT></FONT></BODY>
</HTML>

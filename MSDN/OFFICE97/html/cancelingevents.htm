<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Canceling Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="cancelingevents"></a>Canceling Events</h2>
<p>
Under some circumstances, you may want to include code in an event procedure that cancels the associated event. For example, you may want to include code that cancels the Open event in an Open event procedure for a form, preventing the form from opening if certain conditions are not met.</p>
<p>
You can cancel the following events:</p>
<p>
BeforeDelConfirm</p>
<p>
Format</p>
<p>
BeforeInsert</p>
<p>
BeforeUpdate</p>
<p>
DblClick</p>
<p>
Open</p>
<p>
Delete</p>
<p>
Print</p>
<p>
Unload</p>
<p>
Exit</p>
<p>
Filter</p>
<p>
ApplyFilter</p>
<p>
NoData </p>
<p>
KeyPress (only with a macro)</p>
<p>
MouseDown (only the right mouse button, and only with a macro)</p>
<p>
You cancel an event by specifying a macro containing the CancelEvent action as the corresponding event property setting or, with the exception of the MouseDown and KeyPress events, by setting an event procedure’s Cancel argument to <b>True</b>. For example, to prevent a form from opening, you can:
<ul>
<li>
Create a macro that carries out the CancelEvent action, and then specify that macro as the form’s <b>OnOpen</b> event property setting.</li>
<li>
Add code to the form’s Open event procedure that sets the procedure’s Cancel argument to <b>True</b>.</li>
</ul>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the CancelEvent action, search the Help index for “CancelEvent action.”</p>
<p>
You can see an example of canceling an Unload event in the EventHistory form of the Orders sample application. Because the EventHistory form is required by the ShowEvents form, it’s important to close the ShowEvents form before closing the EventHistory form. To ensure that the ShowEvents form isn’t left open without the EventHistory form, the EventHistory form’s Unload event procedure cancels the Unload event if you try to close it when the ShowEvents form is open.</p>
<pre><code>Private Sub Form_Unload (Cancel As Integer)
' Reminds you to close the ShowEvents form, ensuring that
' it isn't left open without an open EventHistory form.

&#09;Dim intX As Integer

&#09;' Loop through the open forms. If the ShowEvents form is found,
&#09;' display a message and cancel the Unload event.
&#09;For intX = 0 To Forms.Count - 1
&#09;&#09;If Forms(intX).Name = &quot;ShowEvents&quot; Then
&#09;&#09;&#09;MsgBox &quot;Please close the ShowEvents form.&quot;
&#09;&#09;&#09;Cancel = True
&#09;&#09;&#09;Exit For
&#09;&#09;End If
&#09;Next intX
End Sub
</code></pre>
</FONT></FONT></BODY>
</HTML>

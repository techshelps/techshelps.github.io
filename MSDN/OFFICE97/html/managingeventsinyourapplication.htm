<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing Events in Your Application</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="managingeventsinyourapplication"></a>Managing Events in Your Application</h2>
<p>
Most operations in Microsoft Access involve a sequence of events. For example, the process of opening a form usually includes the following sequence:
<ol>
<li>
When the form opens, but before the first record is displayed, the Open event occurs.</li>
<li>
When the form opens and its records are displayed, the Load event occurs.</li>
<li>
When the form becomes the active window, the Activate event occurs.</li>
</ol>
<p>
Other events also occur when the previously active window becomes inactive and the focus moves to an object in the new active window. The full sequence of events in typical situations is explored later in this chapter. </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the order of events, search the Help index for “events, order of.”</p>
<p>
Because each step in opening a form is a separate event, your application can run a macro or a procedure exactly when you want it to. For example, your application can close another window or preset the focus in the new active window before the first record is displayed. Or it can display a custom toolbar on the form when its window becomes active.</p>
<p>
You can also cancel many events. For example, you can prevent a form from opening if certain conditions are not met by including code in the form’s Open event procedure that cancels the Open event when an expression evaluates to <b>True</b>.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on canceling events, see “Canceling Events” later in this chapter.</p>
<p>
Microsoft Access events fall into several categories. The following table summarizes these event categories.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Event category</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Events</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Occur when</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Window events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Close, Load, Open, Resize, Unload</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
A user or code opens, resizes, or closes a form or report.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Focus events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Activate, Deactivate, Enter, Exit, GotFocus, LostFocus</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Objects receive or lose the focus, or become active or inactive.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Data events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
AfterDelConfirm, AfterInsert, AfterUpdate, BeforeDelConfirm, BeforeInsert, BeforeUpdate, Change, Current, Delete, NotInList, Updated</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
A user or code enters, deletes, or changes data in a form or control, or moves the focus from one record to another.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Mouse events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Click, DblClick, MouseDown, MouseMove, MouseUp</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
A user performs a mouse action, such as clicking or double-clicking.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Keyboard events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
KeyDown, KeyPress, KeyUp</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
A user types on the keyboard, or keys are sent using the SendKeys action or the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">SendKeys</b> statement.</td>
</tr>
<tr valign=top>
<TD>
Print events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Format, NoData, Page, Print, Retreat</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
A report is being printed, or is being formatted for printing.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Filter events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
ApplyFilter, Filter</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
A user creates, applies, or removes a filter for a form.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Error and Timing events</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Error, Timer</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Microsoft Access or the Jet database engine encounters an error, or a specified time interval passes.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on each of these events and examples of how to respond to them in your application, search the Help index for “events, listed alphabetically” or for the name of a particular event.</p>
<h3>Working with Forms and Controls</h3>
<p>
Opening a form triggers a sequence of events, including the Open, Load, Resize, and Activate events. In addition, if no control on the form can receive the focus, a GotFocus event occurs for the form itself. Other events occur as you work with the form and its controls. You can write macros or Visual Basic code for any of these events, so you have a fine degree of control over how your application behaves. </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;To see the sequence of events that occurs when you work with forms and controls, open the ShowEvents form in the Orders sample application.</p>
<p>
Because opening forms, moving between forms, and working with controls are some of the most common operations in a Microsoft Access application, understanding the order of these events is one of the keys to effective application development. This section describes the sequence of events for some common form and control operations.</p>
<h4>Opening and Closing a Form</h4>
<p>
When you first open a form that contains an active control—one that can receive the focus—the following sequence of events occurs for the form:</p>
<p>
<img src="abac06_4.gif" border=0></p>
<p>
If there are no active controls on the form, Microsoft Access also triggers a GotFocus event for the form, after the Activate event, but before the Current event.</p>
<p>
When you close a form that contains an active control, Microsoft Access triggers the following sequence of events for the form:</p>
<p>
<img src="abac06_5.gif" border=0></p>
<p>
If there are no active controls on the form, Microsoft Access triggers a LostFocus event for the form after the Unload event, but before the Deactivate event.</p>
<h4>Entering and Exiting a Control</h4>
<p>
When you open a form that contains one or more active controls, an Enter event occurs, followed by a GotFocus event, for the control receiving the focus. These events occur after the form’s Activate and Current events:</p>
<p>
<img src="abac06_6.gif" border=0></p>
<p>
Both events occur when a control first receives the focus. If you switch to a different form and then return to the same control on the first form, Microsoft Access triggers a GotFocus event for the control, but not an Enter event.</p>
<p>
When you exit a control—for example, when you select another control on the same form—the following events occur for the control:</p>
<p>
<img src="abac06_7.gif" border=0></p>
<h4>Switching Between Open Forms</h4>
<p>
When you switch between two open forms that contain active controls, Microsoft Access triggers a Deactivate event on the first form and an Activate event on the second form:</p>
<p>
<img src="abac06_8.gif" border=0></p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;An Open event doesn’t occur on a form that is already open but not activated, whether you switch to the form or run a macro that specifies the form in an OpenForm action. If you want your application to run the code in a form’s Open event procedure when the form is already open, you can:
<ul>
<li>
Add the code to the form’s Activate event procedure instead of the Open event procedure, if timing isn’t critical. The Activate event occurs both when you open a form and when you make it the active form, so the code is sure to run. </li>
<li>
Determine if the form is open by checking the value returned by the IsLoaded function in the UtilityFunctions module of the Orders sample application. Do this before running the macro that contains the OpenForm action.</li>
</ul>
<p>
If there are no active controls on the forms, Microsoft Access also triggers the LostFocus and GotFocus events:</p>
<p>
<img src="abac06_9.gif" border=0></p>
<h5>Example</h5>
<h5>Switching Between Controls on Different Forms</h5>
<p>
This example shows the sequence of events that are triggered in a typical scenario while you work with forms and controls.</p>
<p>
Step One: Open a form   Open the form Form1, whose first active control is Control1.</p>
<p>
<img src="abac06_10.gif" border=0></p>
<p>
Step Two: Open a second form   Open the form Form2, whose first active control is Control2.</p>
<p>
<img src="abac06_11.gif" border=0></p>
<p>
There is no Exit(Control1) event, because the object that receives the focus is on a different form.</p>
<p>
Step Three: Return to the first form   Click on the first form.</p>
<p>
<img src="abac06_12.gif" border=0></p>
<p>
Control1 now has the focus. There is no Enter(Control1) event because Control1 had the focus when Form1 was last active.</p>
<p>
Step Four: Click another control on the first form   Click a different control, Control3, on the second form.</p>
<p>
<img src="abac06_13.gif" border=0></p>
<p>
Step Five: Click another control on the second form   Click a different control, Control4, on the second form.</p>
<p>
<img src="abac06_14.gif" border=0></p>
<h4>Responding to Keystrokes</h4>
<p>
When you press a key, Microsoft Access triggers the KeyDown, KeyPress, and KeyUp events for the form or control that has the focus. When a control has the focus, you’ll normally want the control to receive all keystrokes when changing data in a text box. </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on responding to changes to text and data, see the following section, “Working with Data.”</p>
<p>
In some cases, however, you’ll want to respond to specific keys pressed in a form, regardless of which control has the focus. For example, you may want to perform some action whenever the user presses a key combination such as CTRL+Y. You can make sure that the form receives all key events, even those that occur in controls, by setting the <b>KeyPreview</b> property for the form to Yes. With this property setting, all key events occur first for the form, and then for the control that has the focus.</p>
<p>
You can respond to specific keys in the form’s KeyPress, KeyDown, or KeyUp events. The KeyPress event responds only to the ANSI characters generated by the keyboard. ANSI characters are generated by the following keys and key combinations: any printable keyboard character, CTRL+A through CTRL+Z, ENTER, CTRL+ENTER, BACKSPACE, CTRL+BACKSPACE, and TAB. The KeyPress event ignores all other keystrokes. In most cases, it is simplest to use only the KeyPress event to respond to keyboard events.</p>
<p>
The following sample code demonstrates how to respond to the CTRL+Y key combination in a form by using the KeyPress event. Note that you can prevent the control from getting keystrokes you respond to by setting the KeyAscii argument to zero.</p>
<pre><code>Private Sub Form_KeyPress (KeyAscii As Integer)
&#09;Const conCtrlYCode = 25&#09;&#09;&#09;&#09;' ANSI character code for CTRL+Y.

&#09;If KeyAscii = conCtrlYCode Then
&#09;&#09;MsgBox &quot;You pressed Ctrl+Y&quot;
&#09;&#09;KeyAscii = 0&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Do not send key on to control.
&#09;End If
End Sub
</code></pre>
<p>
The KeyDown and KeyUp events work on a lower level by responding to events generated by the keys themselves being pressed and released. Use KeyDown and KeyUp events if you need to respond to keys that don’t generate ANSI characters, such as the function keys (F1 through F12), or if you need to respond to key combinations that include the SHIFT, ALT, and CTRL keys (except the CTRL key combinations that respond to the KeyPress event).</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on responding to keystrokes by using the KeyDown and KeyUp events, search the Help index for “KeyDown event” and “KeyUp event.”</p>
<h3>Working with Data</h3>
<p>
You can use data events in your application to respond to many types of changes to records and data. For example, the application can run a macro or an event procedure in response to:
<ul>
<li>
Changes to text in a text box or combo box.</li>
<li>
Updates to data in a control or record.</li>
<li>
Insertions or deletions of records, either before or after the record is inserted or deleted, or before or after a deletion is confirmed.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Some events do not occur when you use Visual Basic code to manipulate data in your application—for example, the Change event, the BeforeInsert event, and the AfterInsert event.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;To see the sequence of events that occurs when you work with data, open the ShowEvents form in the Orders sample application.</p>
<h4>Changing Text in a Text Box or Combo Box</h4>
<p>
When you change text in a text box or combo box, a Change event occurs. The event occurs whenever the contents of a control changes, but before you move to a different control or record. For example, when you delete a character in a text box by pressing the BACKSPACE key, Microsoft Access triggers the following sequence of events:</p>
<p>
<img src="abac06_15.gif" border=0></p>
<p>
If you then type one or more characters in the text box, Microsoft Access recognizes the same sequence of events for each keystroke. Note that the KeyPress event doesn’t occur if you delete a character by using the DELETE key, only if you use the BACKSPACE key.</p>
<p>
The Change event doesn’t occur when a value changes in a calculated control, or when you select an item from a combo box list.</p>
<h4>Updating Data in a Control or Record</h4>
<p>
When you update data in a control by moving to a different control on the form, Microsoft Access triggers the BeforeUpdate and AfterUpdate events for the control. The BeforeUpdate event occurs just before the data is updated; the AfterUpdate event occurs after the update.</p>
<p>
For example, if you update data in a text box (TB1) by deleting a character, then click a different text box (TB2), Microsoft Access triggers the following sequence of events:</p>
<p>
<img src="abac06_16.gif" border=0></p>
<p>
If you update a control or record by moving to a different record or by clicking <b>Save Record</b> on the <b>Records</b> menu, the BeforeUpdate and AfterUpdate events for both the control and the form occur. For example, if you delete a character in a text box and then click <b>Save Record</b> on the <b>Records</b> menu, the following sequence of events occurs:</p>
<p>
<img src="abac06_17.gif" border=0></p>
<p>
When you update a control or record by moving to a different record, Microsoft Access triggers several events after the BeforeUpdate and AfterUpdate events for the control and form: It triggers Exit and LostFocus events for the control losing the focus, the Current event for the new record, and Enter and GotFocus events for the control receiving the focus.</p>
<h4>Inserting Records</h4>
<p>
When you enter data in a new record by way of the user interface, Microsoft Access triggers a BeforeInsert event when you first enter data in the record, and an AfterInsert event when the record is saved.</p>
<h5>Example</h5>
<h5>Entering Data in a New Record</h5>
<p>
This example shows the sequence of events that Microsoft Access triggers in a typical scenario when you enter data in a new record.</p>
<p>
Step One: Enter text in the first field of a new record   After clicking <b>Data Entry</b> on the <b>Records</b> menu of a form to display a blank record, type a character in a text box (TB1).</p>
<p>
<img src="abac06_18.gif" border=0></p>
<p>
Step Two: Move to another field of the same record and enter text   Click another text box (TB2) on the form and type a character.</p>
<p>
<img src="abac06_19.gif" border=0></p>
<p>
Step Three: Save the new record   Click <b>Save Record</b> on the <b>Records</b> menu.</p>
<p>
<img src="abac06_20.gif" border=0></p>
<h4>Deleting Records</h4>
<p>
When you select a record and delete it (either by pressing the DELETE key or by clicking <b>Delete</b> on the <b>Edit</b> menu), Microsoft Access triggers the Delete event, and then the Current event. If you select multiple records and delete them, the Delete event occurs once for each record that you have selected, and then Microsoft Access triggers the Current event. Unless you cancel the Delete event, Microsoft Access also triggers BeforeDelConfirm and AfterDelConfirm events. You use these events to control how record deletions are confirmed.</p>
<p>
For example, when you select a record on a form and delete it, Microsoft Access by default:
<ul>
<li>
Triggers the following sequence of events:<p>
<img src="abac06_21.gif" border=0></p>
</li>
<li>
Displays the following dialog box after the BeforeDelConfirm event.<p>
<img src="abac06_22.gif" border=0></p>
</li>
</ul>
<p>
If you want, you can prevent this dialog box from appearing in two ways. You can cancel the BeforeDelConfirm event, in which case the deletion is canceled. Or you can set the Response argument of the BeforeDelConfirm event procedure to <b>acDataErrContinue</b>, in which case the deletion is confirmed.</p>
<p>
Your BeforeDelConfirm event procedure can display a custom dialog box and handle the user’s responses.</p>
</FONT></FONT></BODY>
</HTML>

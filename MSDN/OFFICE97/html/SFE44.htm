<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Trapping User Cancels</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Trapping User Cancels</H2><P CLASS="t">By default, the user can halt the execution of your VBA code by pressing either&nbsp;the ESC key or CTRL+BREAK. You can trap this action by using the EnableCancelKey property of the Application object. Using the statement</P>

<pre><code><FONT FACE="Courier" SIZE="2">Application.EnableCancelKey = xlErrorHandler
</FONT></code></pre>
<P CLASS="t">causes the ESC or CTRL+BREAK keys to generate an error which will be trapped by&nbsp;the error handler set in your most recent On Error statement. The Err.Number generated by a user cancel is 18. Have your error handler check for this code and exit gracefully if it occurs.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">You can also completely disable the user's ability to cancel program execution with</P>

<pre><code><FONT FACE="Courier" SIZE="2">Application.EnableCancelKey = xlDisabled
</FONT></code></pre>
<P CLASS="t">You should be very careful when using this setting, however, because it prevents canceling program execution in the event of an endless loop. In practice, you'll want to explicitly set the EnableCancelKey depending on whether you're ready to&nbsp;ship production code or you're testing.</P>
<P CLASS="t">During testing it makes sense to be able to stop loops (endless or otherwise). But allowing the user to interrupt your code in the middle of a routine is not practical. Either you'll disable the cancel key or set it to your own handler, which will stop at the next appropriate point and/or clean up as needed. This cancel key setting is also an excellent candidate for using your bDEBUG flag.</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CommandBars Replace MenuBars and ToolBars</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>CommandBars Replace MenuBars and ToolBars</H2><P CLASS="t">The MenuBars and ToolBars familiar to users of previous versions of Microsoft Excel have been upgraded to CommandBars, an object common throughout all the Office&nbsp;97 applications. CommandBars let you include both menus and buttons on the same bar. While we have sought to ensure that this new feature does not break existing code, it will impact your development going forward. Specifically, ToolBars and MenuBars are both modified using the CommandBar object model.</P>
<P CLASS="t">Microsoft Excel&nbsp;97 allows you to store custom menu bars and toolbars with the workspace or with the workbook. When the user quits Microsoft Excel&nbsp;97, the toolbars in the workspace are automatically saved in the file Username8.xlb (where Username is the current user's logon name). Alternatively, if the user isn't logged on, the file name is Excel8.xlb. The toolbars saved in a workbook are stored in the workbook file.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec0"></A>Eliminated MenuBars</H3><P CLASS="t">A number of menu bars have been eliminated from Microsoft Excel&nbsp;97 to make Microsoft Excel more consistent with the rest of Office. If your code refers to MenuBars or MenuItems that no longer exist, Microsoft Excel will provide a non-error return value so your code will run without generating errors. Note that this is an instance where you will not be alerted by an error that Microsoft Excel&nbsp;97 does not support the desired functionality. Also, be aware that the changes that you've made to the old menu bars will of course not appear.</P>
<P CLASS="t">The eliminated MenuBars are:</P>
<UL><LI CLASS="ULI1">Worksheet (XL4)</LI><LI CLASS="ULI1">Chart (XL4)</LI><LI CLASS="ULI1">No Docs Open</LI><LI CLASS="ULI1">Info</LI><LI CLASS="ULI1">Worksheet (XL4, short)</LI><LI CLASS="ULI1">Chart (XL4, short)</LI><LI CLASS="ULI1">Visual Basic Module</LI></UL><P></P>
<H3><A NAME="sec1"></A>Menu Editor of Microsoft Excel&nbsp;95/5.0</H3><P CLASS="t">The Microsoft Excel&nbsp;95 Menu Editor let you control the menus in Microsoft Excel without writing code by using a dialog to change the settings. When the workbook with the edited menu structure is loaded, the menu changes take effect. When the workbook is closed, the menu changes are reset. In Microsoft Excel&nbsp;97, CommandBar customization through the user interface is at an application-level setting.</P>
<P CLASS="t">One of the most useful compatibility features of Microsoft Excel&nbsp;97 is the ability to save Menu Editor changes into files that are saved in Microsoft Excel&nbsp;97 format. In other words, while the Menu Editor does not exist in Microsoft Excel&nbsp;97, the edits that have been built with the Menu Editor will be honored in Microsoft Excel&nbsp;97. Remember that changes made to the CommandBar during a session with a file with Menu Editor customization will be lost when the file is closed.</P>
<P CLASS="t">There is, however, no backward compatibility for CommandBars. CommandBar changes are not saved when Microsoft Excel&nbsp;97 saves a file in Microsoft Excel&nbsp;95 format. This is consistent with CommandBar edits being at the application level.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec2"></A>Toolbars</H3><P CLASS="t">Microsoft Excel&nbsp;97 will continue to run your Visual Basic code that edits toolbars. Routines that modify Microsoft Excel&nbsp;95 toolbars will continue to work. Be aware, though, that Microsoft Excel&nbsp;97 introduces new toolbars, and that these toolbars will not be affected by code written for Microsoft Excel&nbsp;95. For example, the following routine hides all toolbars in Microsoft Excel&nbsp;95:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Sub HideAllToolbars()
    Dim i
    With Application
        For i = 1 To Application.Toolbars.Count
            Application.Toolbars(i).Visible = False
        Next i
    End With
End Sub
</FONT></code></pre>
<P CLASS="t">In Microsoft Excel&nbsp;97, this routine will hide all of the toolbars that were available in Microsoft Excel&nbsp;95, but will not affect the toolbars that are new to Microsoft Excel&nbsp;97, nor will it affect Microsoft Excel&nbsp;97 custom toolbars. The following routine makes all of the Microsoft Excel&nbsp;97 command bars not visible:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Sub Excel97RemoveCommandBars()
    Dim oBar as CommandBar
    With Application
        For Each oBar in .CommandBars
             .CommandBars(oBar.Name).Visible = False
        Next oBar
    End With
End Sub
</FONT></code></pre>
<H3><A NAME="sec3"></A>Accessing ShortcutMenus</H3><P CLASS="t">The ShortcutMenus method of the Application object will still function as it did in Microsoft Excel&nbsp;95; however, this method will be hidden, and its use is no longer encouraged.</P>
<P CLASS="t">You now access shortcut menus by their CommandBar name via the CommandBars accessor. The shortcut name will not enumerate out of the CommandBars collection, although it is there. Supply the shortcut name rather than a constant. For example:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Application.ShortCutMenus(xlAxis).Delete
</FONT></code></pre>
<P CLASS="t">Should become:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Application.ShortCutMenus("Chart Axis").Delete
</FONT></code></pre>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec4"></A>Help Menu Is Now Included in the Menu Bar</H3><P CLASS="t">In Microsoft Excel&nbsp;97, the Help menu does not default to the last menu on the CommandBar. In prior versions of Microsoft Excel, omitting the menu-placement argument meant that the custom menu was added directly to the left of the Help menu. In Microsoft Excel&nbsp;97, this code will result in the custom menu being placed at the far right of the CommandBar.</P>
<P CLASS="t">To make sure your custom menu appears directly to the left of the Help menu:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Dim nHelpIndex as integer
Dim cmdbr as commandbar
Set cmdbr =Application.CommandBars("Worksheet Menu Bar")
nHelpIndex= cmdbr.Controls("help").Index
cmdbr.Controls.Add Type:=msoControlPopup, _
        Before:= nHelpIndex
</FONT></code></pre></FONT>
</FONT></BODY></HTML>

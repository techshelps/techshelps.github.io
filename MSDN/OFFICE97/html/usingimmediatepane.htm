<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Immediate Pane</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="usingimmediatepane"></a>Using the Immediate Pane</h2>
<p>
While you are creating and testing Visual Basic code, you may want to run a function or check the value of a control, field, or property. You can do this in the Immediate pane of the Debug window. The Immediate pane is a kind of scratch pad in which expressions are evaluated immediately.</p>
<p>
Although you can use the Immediate pane to run any Visual Basic command, you’ll most commonly use it to:
<ul>
<li>
Test your <b>Function</b> and <b>Sub</b> procedures.</li>
<li>
Display the values of controls and properties.</li>
<li>
Evaluate expressions and display their results.</li>
<li>
Display debugging information from within your code.</li>
</ul>
<h3>Testing Procedures Using the Immediate Pane</h3>
<p>
You can use the Immediate pane of the Debug window to evaluate a Visual Basic expression or statement, such as a call to a <b>Sub</b> or <b>Function</b> procedure. You can evaluate an expression or a <b>Function</b> procedure by displaying the value it returns in the Immediate pane. You can test the possible effect of a procedure that uses different arguments by entering it as a statement in the Immediate pane, just as you would in the Module window.</p>
<p>
You can display a value in the Immediate pane by using the <b>Print</b> method of the <b>Debug</b> object. The <b>Debug</b> object represents the Immediate pane in Visual Basic.</p>
<p>
For example, suppose you have a function named DueDate, which takes an argument of type <b>Date</b> and returns the date of the first day of the month following the date that is passed to it:</p>
<pre><code>Public Function DueDate(ByVal AnyDate As Date) As Variant
&#09;' This function calculates and returns the date of first 
&#09;' day of month that follows the date passed in the AnyDate argument.

&#09;DueDate = DateSerial(Year(AnyDate), Month(AnyDate) + 1, 1)
End Function
</code></pre>
<p>
You can test the DueDate function by entering the following code in the Immediate pane:</p>
<pre><code>Debug.Print DueDate(Date())
</code></pre>
<p>
Visual Basic runs the function and displays the return value of the function as a date that is the first day of the month following the current date.</p>
<p>
Because the <b>Debug</b> object is the default object in the Immediate pane, you can use the <b>Print</b> method in the Immediate pane without referring to the <b>Debug</b> object. For example, you can test the DueDate function by entering the following statement in the Immediate pane:</p>
<pre><code>Print DueDate(Date())
</code></pre>
<p>
You can also use a question mark (?) as shorthand for the <b>Print</b> method in the Immediate pane. The question mark means the same thing as <code>Print</code> and can be used in any context where <code>Print </code>is used. For example, you can determine the day of the week for the date returned by the DueDate function by entering the following code in the Immediate pane:</p>
<pre><code>? Weekday(DueDate(Date()))
</code></pre>
<p>
Visual Basic runs the function and displays an integer that represents which day of the week the DueDate function returns.</p>
<p>
You can test a <b>Sub</b> procedure by entering it and its arguments in the Immediate pane. For example, you could test a procedure named SizeIt by entering the following code in the Immediate pane:</p>
<pre><code>SizeIt 5000, 3000
</code></pre>
<p>
You don’t need to use the <b>Print</b> method because this procedure doesn’t return a value for the Immediate pane to display.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;In the Immediate pane, you can call procedures that are currently in scope without qualifying the procedure name. For example, you can call any procedure in the current module, and you can call any public procedure from any other module in the database. However, to run a private procedure in another module, you must qualify the name of the procedure with the name of the module that contains it. For example, to call a private procedure named AddValues in the Utilities module when that module is not the current module, you must type<code> Utilities.AddValues </code>in the Debug window. For information on the scope of procedures and variables, see Chapter 2, <a href="introducingvisualbasic.htm">“Introducing Visual Basic”</a> and Chapter 4, <a href="workingwithvariablesdatatypesconstants.htm">“Working with Variables, Data Types</a>, and Constants.”</p>
<p>
You can run any built-in function or statement in the Immediate pane. However, code entered in the Immediate pane is valid only if it can be completely expressed on one line. For example, because the <b>For</b> loop in the following example is entered on one line, it can be run in the Immediate pane.</p>
<pre><code>For intI = 1 To 20 : Print 2 * intI : Next intI
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on the <b>Debug</b> object or the <b>Print</b> method, search the Help index for “Debug object” or “Print method.”</p>
<h3>Displaying Values of Controls and Properties</h3>
<p>
You can evaluate any valid expression in the Immediate pane, including expressions involving the values and properties for Microsoft Access objects, Data Access Objects (DAO), or any other object in a referenced library in the current database. For example:</p>
<pre><code>? Forms!SalesReps.RecordSource
Employees
</code></pre>
<p>
In the preceding example, the first line is the expression to be evaluated. The second line is what is displayed in the Immediate pane—the value of the <b>RecordSource</b> property for the open SalesReps form.</p>
<h3>Displaying Values in the Immediate Pane from Code</h3>
<p>
When you’re dubugging your code, you may want to display the results of expressions in your code while it’s running. You can use the<b> Print</b> method of the <b>Debug</b> object to display data in the Immediate pane. The syntax for the<b> Print</b> method of the <b>Debug</b> object is:</p>
<p>
<b>Debug.Print</b> [<i>outputlist</i>]</p>
<p>
In this syntax, you can use the optional <i>outputlist</i> argument to specify an expression or list of expressions to print. For example, you can add the<b> Print</b> method of the <b>Debug</b> object to the DueDate function as follows:</p>
<pre><code>Public Function DueDate(ByVal AnyDate As Date) As Variant
&#09;' This function calculates and returns the date of first
&#09;' day of month that follows the supplied date.

&#09;Debug.Print &quot;Year &quot;; Year(AnyDate); &quot;Month &quot;; Month(AnyDate)
&#09;DueDate = DateSerial(Year(AnyDate), Month(AnyDate) + 1, 1)
End Function
</code></pre>
<p>
Now whenever this function runs, it displays the the current year and month in the Immediate pane. For example, you can call this function from the Immediate pane and provide the date 4-12-96 for the AnyDate argument. If you’re stepping through the code, as shown in the following illustration, the function prints the value for the year (1996) and the value for the month (4) to the Debug window once the line that contains the <b>Debug.Print</b> statement runs.</p>
<p>
<img src="abac07_11.gif" border=0></p>
<p>
When you run the next line of code, the function evaluates the expression that determines the date of the first day of the following month. This is the value returned by the DueDate function. When the DueDate function has finished running, this value is also printed to the Debug window. In this case, the return value of the function is 5-1-96.</p>
<p>
Displaying values in the Immediate pane from code has a couple of advantages. First, you don’t have to suspend execution to get feedback on how your code is performing. You can view data or other messages while your code is running. Second, the feedback is displayed in a separate area (the Immediate pane), so it doesn’t interfere with output you want users to see.</p>
<p>
Once you’ve finished debugging your code and you are sure the code is working correctly, you should remove all <b>Debug.Print</b> statements.<b> </b>Displaying values in the Immediate pane slows your code slightly, so you don’t want to leave <b>Debug.Print</b> statements in your code when they are no longer needed. You can also use conditional compilation to specify when to include these statements and when to ignore them during compilation and at run time.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on conditional compilation, see “Using Conditional Compilation” later in this chapter.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The Debug window doesn’t open automatically when Visual Basic encounters a <b>Debug.Print </b>statement. If you don’t have the Debug window open, you won’t see the values displayed by the <b>Debug.Print </b>statement. You can open the Debug window quickly by pressing CTRL+G.</p>
<h3>Tips on Using the Immediate Pane</h3>
<p>
You can use the following shortcuts in the Immediate pane:
<ul>
<li>
Once you’ve run a statement in the Immediate pane, you can run it again by putting the insertion point anywhere in the statement and pressing ENTER.</li>
<li>
Before pressing ENTER, you can edit the statement in which the insertion point appears.</li>
<li>
You can use the mouse or the arrow keys to move the insertion point in the Immediate pane. Press ENTER only if the insertion point is on a statement you want to run.</li>
<li>
You can use the PAGE UP and PAGE DOWN keys within the Immediate pane to move through your code one page at a time. Pressing CTRL+END moves the insertion point to the end of the Immediate pane and pressing CTRL+HOME moves the insertion point to the beginning of the Immediate pane.</li>
<li>
You can use the HOME key to move the insertion point to the beginning of the current line and the END key to move the insertion point to the end of the current line.</li>
</ul>
</FONT></FONT></BODY>
</HTML>

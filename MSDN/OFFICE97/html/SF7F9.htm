<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Reference XLOPERs</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Using Reference XLOPERs </H2><P CLASS="t">References are not only one of the most common features in the XLM language — they are also the most confusing! In the Microsoft Excel XLM language, you have to remember when to use a local reference and when to use an external reference. You also have to remember when to use R1C1 notation and when to use A1 notation. Sometimes references are specified as strings; sometimes they are not.&nbsp;To help keep all this straight, the C API is designed to simplify specifying references. This section describes the different types of references and how to construct XLOPERs that specify them.</P>
<P CLASS="t">The first thing you must do is decide which sheet you want to refer to. There are three possibilities: the current sheet, the active sheet, or an external sheet.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec0"></A>Current Sheet</H3><P CLASS="t">The current sheet is the sheet that is currently being calculated. This may be a macro sheet (in the case of a running macro) or a worksheet (in the case of a user-defined function). The current sheet is not necessarily the one that appears in&nbsp;front on the screen, as shown in the following example.</P>
<P CLASS="a">    <img src="CH07_20.gif"></P>
<P CLASS="t">The user is working on Sheet1 and clicks Button 1. This executes a macro in Book2. While that macro is running, it calls your DLL. Macro1 is now the current&nbsp;sheet because it is the one being calculated.</P>
<P CLASS="t">To create a reference to the current sheet, you create an xltypeSRef XLOPER, as&nbsp;shown in the following example.</P>

<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xRef;

xRef.xltype = xltypeSRef;
xRef.val.sref.count = 1;
xRef.val.sref.ref.rwFirst  = 0;
xRef.val.sref.ref.rwLast   = 2;
xRef.val.sref.ref.colFirst = 0;
xRef.val.sref.ref.colLast  = 2;
</FONT></code></pre>
<P CLASS="t">This creates a reference to the cells A1:C3 in the upper-left corner of the current&nbsp;sheet. Notice how rows and columns are always zero-based inside Microsoft Excel.</P>
<P></P>
<P></P>
<P></P>
<H4><A NAME="sec1"></A>Tips for Creating References</H4><UL><LI CLASS="ULI1">To create a reference to a single cell, set rwFirst = rwLast and colFirst&nbsp;=&nbsp;colLast.</LI><LI CLASS="ULI1">To create a reference to an entire column, set rwFirst = 0 and rwLast&nbsp;=&nbsp;0xFFFF. In versions earlier than Microsoft Excel 97, rwFirst has&nbsp;a&nbsp;maximum of 0x3FFF.</LI><LI CLASS="ULI1">To create a reference to an entire row, set colFirst = 0 and colLast = 0xFF.</LI><LI CLASS="ULI1">To create a reference to the entire sheet, set rwFirst = colFirst = 0, rwLast&nbsp;=&nbsp;0xFFFF, and colLast = 0xFF. In versions earlier than Microsoft&nbsp;Excel 97, rwLast has a maximum of 0x3FFF.</LI><LI CLASS="ULI1">To create a nonadjacent reference on the current sheet, you must create an&nbsp;external reference. The xltypeSRef type does not support nonadjacent references. For more information see "External Sheet," which follows.</LI></UL><P></P>
<H3><A NAME="sec2"></A>Active Sheet</H3><P CLASS="t">The active sheet is the sheet that the user sees in front on the screen. For example, in the preceding illustration the active sheet would be Sheet1 in Book1. To create a reference to the active sheet, you need to find out the sheet ID of the active sheet and then construct an external reference to that sheet ID. For more information see&nbsp;the following section, "External Sheet."</P>
<H3><A NAME="sec3"></A>External Sheet </H3><P CLASS="t">Technically, an external sheet is any sheet except the current sheet. This means that the active sheet is an external sheet unless the current sheet and the active sheet are the same. For example, when you are executing a user-defined function during recalculation on a worksheet, the active sheet might be the same as the current sheet. External references are the most common type of reference used in C functions. That is because you need an external reference to refer to the active (front) sheet, which is probably the sheet used to call the DLL. To construct an external reference, you need to find the sheet ID of the sheet you want and build the external reference XLOPER.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">To find the sheet ID of the sheet you want, use the xlSheetId function. For more&nbsp;information about how to call the xlSheetId function, see "xlSheetId" on page&nbsp;254. The xlSheetId function has two forms. If&nbsp;it is called with no arguments, it returns the sheet ID of the active sheet — that is, the sheet that the user sees in front. If it is called with one argument, of type xltypeStr, it returns the sheet ID of&nbsp;the named sheet. The xlSheetId type returns its result by putting the sheet ID in&nbsp;the val.mref.idSheet field of the result XLOPER. For example:</P>

<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xRef;

if (xlretSuccess != Excel4(xlSheetId,&amp;xRef,0)) 
{
    error("No active sheet!");
}

/*
**    Now xRef.val.mref.idSheet contains the
**    sheet ID of the active sheet.
*/
</FONT></code></pre>
<P CLASS="t">If this succeeds, the sheet ID for xRef is filled in. Or, you might want an external reference to a named sheet. The following example shows how to obtain the sheet ID of SHEET1 in BOOK1.XLS.</P>

<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xRef, xFileName;

xFileName.xltype = xltypeStr;
xFileName.val.str = "\021[BOOK1.XLS]SHEET1";

if (xlretSuccess !=
    Excel4(xlSheetId, &amp;xRef, 1, (LPXLOPER)&amp;xFileName)) 
{
    error ("SHEET1 not found");
}
</FONT></code></pre>
<P CLASS="t">The next step is to build the external reference XLOPER. This is an XLOPER of&nbsp;type xltypeRef, which is the most general reference type. The following code constructs a rectangular reference to the active sheet:</P>

<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xRef;
XLMREF xlmref;

if (xlretSuccess!=Excel4(xlSheetId,&amp;xRef,0)) 
{
    error();</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">}
else 
{
    xRef.xltype = xltypeRef;
    xRef.val.mref.lpmref = (LPXLMREF) &amp;xlmref;
    xlmref.count = 1;
    xlmref.reftbl[0].rwFirst = 0;
    xlmref.reftbl[0].rwLast  = 3;
    xlmref.reftbl[0].colFirst= 0;
    xlmref.reftbl[0].colLast = 3;
}
</FONT></code></pre>
<P CLASS="t">This code generates a reference to 16 cells in the upper-left corner of the active (front) sheet. This would be called !A1:D4 in the macro language. If you want to specify a nonadjacent reference, you can use a different value for count. You will also have to allocate more memory for xlmref. Then, you can fill in reftbl[<I>n</I>] for the (<I>n</I>+1)th rectangular region. The reftbl[<I>n</I>] reference is easily expanded using the XLMREF and XLREF constructs defined in XLCALL.H. Dynamically allocate space for the XLMREF and specify sizeof(XLMREF) + sizeof(XLREF) * (<I>n</I>–1), where <I>n</I> is the number of nonadjacent references you want to build.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">As a shortcut, you can use an idSheet number of 0 in your XLOPER to get the current sheet. Microsoft Excel automatically fills in the correct idSheet number. When you get external references from Microsoft Excel, you always get an actual&nbsp;idSheet number, not 0, even if they refer to the current sheet.</P>
<P></P></FONT>
</FONT></BODY></HTML>

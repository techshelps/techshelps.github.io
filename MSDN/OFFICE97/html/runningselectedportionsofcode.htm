<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Running Selected Portions of Code</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="runningselectedportionsofcode"></a>Running Selected Portions of Code</h2>
<p>
If you know exactly which statement caused an error, using a single breakpoint may be sufficient. More often, however, you can only guess the general vicinity of the statement that caused the error. Setting a breakpoint helps you get to that general area. Once there, you can step through your code and run it line by line to see the effect of each statement.</p>
<p>
You can also step through each line of code in a called procedure—a procedure the current procedure calls—or step over the called-procedure code. (Stepping through statements is sometimes referred to as <i>tracing.</i>) If necessary, you can also back up and start execution at a previous line.</p>
<h3>Stepping Through Statements</h3>
<p>
<i>Stepping</i> is the process of running one statement at a time. After running each statement, you can use the Debug window to see how it affected the variables and objects in the procedure.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To step through code one statement at a time</b></p>
<p>
<img src="abac07_6.gif" border=0>
<ul>
<li>
Click the<b> Step Into</b> button on the toolbar or press F8.</li>
</ul>
<p>
When the <b>Step Into</b> command is carried out, Visual Basic runs the current statement and then automatically advances execution to the next statement in the procedure and again suspends execution.</p>
<p>
A line of code can contain two or more statements separated by a colon (:). You can step from one statement to the next even if they are on the same line. However, breakpoints apply only to the first statement in a line.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If your Microsoft Access workgroup has security enabled (if you logged on by using the <b>Logon</b> dialog box), you can step through code in a called procedure only if you have Read Design permission for the called procedure’s module. If you try to step into a called procedure and you don’t have Read Design permission for the called procedure’s module, Visual Basic runs the called procedure without stepping through the code one statement at a time.</p>
<p>
<img src="abac07_7.gif" border=0></p>
<p>
Tip   You can also step through code by placing the cursor within the procedure and pressing F8.  If at any point you want to run the rest of the procedure without stepping through it, click the <b>Go/Continue</b> button on the toolbar or press&nbsp;F5.</p>
<h3>Stepping Over Procedures</h3>
<p>
If you don’t want to step through the lines of code in a procedure, you can step over the entire procedure.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To step over an entire procedure</b></p>
<p>
<img src="abac07_8.gif" border=0>
<ul>
<li>
Click the<b> Step Over</b> button on the toolbar or press SHIFT+F8.</li>
</ul>
<p>
The <b>Step Over</b> command is identical to the <b>Step Into</b> command except when the current statement contains a call to another procedure. The <b>Step Into</b> command steps into the procedure that was called and then lets you step through it line by line, but the <b>Step Over</b> command runs the called procedure as a unit and then steps into the next statement in the current procedure. For example, suppose the current statement calls the procedure GetQueryCriteria:</p>
<pre><code>GetQueryCriteria strCriteria
</code></pre>
<p>
If you use the <b>Step Into</b> command, the Module window displays the GetQueryCriteria procedure and the first statement in that procedure is the current statement. The <b>Step Into</b> command is the best choice if you want to analyze the code within GetQueryCriteria.</p>
<p>
If you use the <b>Step Over</b> command, the Module window continues to display the current procedure while Visual Basic runs the GetQueryCriteria procedure. Execution then advances to the statement immediately after the call to GetQueryCriteria. <b>Step Over</b> is a better choice than <b>Step Into</b> if you want to stay within the current procedure and don’t need to analyze the code in the GetQueryCriteria procedure.</p>
<h3>Stepping Out of Procedures</h3>
<p>
If you step into a procedure and then decide that you don’t want to step all the way through it, you can step out of the procedure.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To step out of a procedure</b></p>
<p>
<img src="abac07_9.gif" border=0>
<ul>
<li>
Click the<b> Step Out</b> button on the toolbar or press CTRL+SHIFT+F8.</li>
</ul>
<p>
When the<b> Step Out</b> command is carried out, Visual Basic runs the rest of the procedure, including any nested procedures that it calls, in one step. Execution stops when it returns to the next line of code in the calling procedure. If the current procedure wasn’t called by another procedure, the <b>Step Out</b> command has the same effect as the <b>Continue</b> command; that is, the current procedure runs to completion.</p>
<p>
You can freely alternate between the <b>Step Into</b>, <b>Step Over</b>, and <b>Step Out</b> commands. The command you choose depends on which portions of code you want to analyze at any given time.</p>
<h3>Setting the Next Statement to Be Run</h3>
<p>
When you suspect a certain section of code contains an error, you may want to skip over it. This doesn’t solve the problem, of course—eventually, you’ll have to debug that section. However, skipping lines of code enables you to move on and examine other parts of your code.</p>
<p>
At other times, you may want to rerun code in the procedure that has already been executed. Perhaps you’ve modified that code or changed the value of a variable and want to see if these changes produce different results.</p>
<p>
Visual Basic enables you to continue execution at a line of code other than the next one as long as that line is within the current procedure.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To set the next statement to be run</b>
<ul>
<li>
Right-click the line of code where you want to continue execution, and then click <b>Set Next Statement</b> on the shortcut menu.</li>
</ul>
<p>
You can then continue execution by pressing F5 or you can step through the lines of code starting with the statement you set.</p>
<p>
Important   You can use the <b>Set Next Statement </b>command in a procedure only if you’ve suspended execution in that procedure.</p>
<p>
You can also use the <b>Run To Cursor</b> command (<b>Debug</b> menu) to run your code until it reaches the line that you have selected. You may find this command useful if you want to stop execution before a large loop farther down in your code. Or you may want to use this command if you’re sure that a certain section of your code is functioning properly, and you want to continue troubleshooting later in the procedure. To run code until it comes to a specific line, right-click the line of code, and then click <b>Run To Cursor</b> on the shortcut menu, or select the line of code where you want to again suspend execution and press CTRL+F8.</p>
</FONT></FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your First Function</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="creatingyourfirstfunction"></a>Creating Your First Function</h2>
<p>
If you discover that you’re repeatedly using the same expression in forms, reports, or queries, you may want to write a custom function that calculates that expression, and then use the function in place of the expression. For example, suppose that you often need to calculate the date of the first day of the next month (perhaps this is the date that payment is due or that shipments go out). You can calculate this date with the following expression.</p>
<pre><code>= DateSerial(Year(Now), Month(Now) + 1, 1)
</code></pre>
<p>
However, this complicated expression is easy to mistype. Instead of typing this expression, you could substitute a custom <b>Function</b> procedure that performs this calculation. Writing a <b>Function</b> procedure to perform a calculation has several significant advantages over using the equivalent expression. Using a <b>Function</b> procedure, you can:
<ul>
<li>
Be sure that the calculation is performed the same way every time, without the risk of a typing mistake.</li>
<li>
Modify the calculation by changing it in only one place (the module in which the function is defined) rather than in every place the calculation is used.</li>
<li>
Perform complex operations, such as <b>If...Then</b> logic or looping, which are difficult or impossible to handle in a simple expression.</li>
<li>
Handle errors in ways that you define.</li>
<li>
Include comments to document complicated expressions.</li>
</ul>
<p>
This section shows you how to create a simple function that calculates the date of the first day of the next month. You’ll use this function to set the value of the BillingDate text box on the Orders form in the Orders sample application.</p>
<p>
If you want to use this function in other forms and reports, you’ll want to create a standard module to store it in. You create a standard module in the same way you create and open other database objects.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create a standard module</b>
<ul>
<li>
In the Database window, click the <b>Modules</b> tab, and then click <b>New</b>.<p>
Microsoft Access displays a new module in the Module window.</p>
<p>
<img src="abac02_17.gif" border=0></p>
</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When you open a new module, Microsoft Access automatically includes two <b>Option</b> statements in the Declarations section, as shown in the preceding illustration. These statements tell Microsoft Access how to sort data when running code and whether to warn you if you don’t declare variables. For more information, search the Help index for “Option.”</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create a new function</b>
<ol>
<li>
Below the <b>Option Explicit</b> statement (or any empty line in a module), type <b>Function</b> followed by a space and the name you want to give the function. In this case, name your new function FirstOfNextMonth.<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;It’s a good idea to give your functions relatively short names that describe their purpose or the value they return. Function names can’t contain spaces or punctuation marks. For more information on names in Visual Basic, see “Naming Conventions” later in this chapter.</p>
</li>
<li>
Press ENTER.<p>
When you press ENTER, Microsoft Access scans your typing, checks it for obvious errors, formats it according to a consistent set of rules for capitalization and spacing, and displays it again. This occurs every time you enter a new line in the Module window. Microsoft Access also adds a blank line and an <b>End Function</b> statement. The <b>End Function</b> statement is always the last line in a function.</p>
<p>
<img src="abac02_18.gif" border=0></p>
</li>
</ol>
<p>
Note that Microsoft Access adds a set of parentheses after the name of the function. Use these parentheses to enclose any arguments the function takes, if you decide that the function should take arguments.</p>
<h3>Performing Calculations in a Visual Basic Function</h3>
<p>
You perform calculations in Visual Basic the same way you perform calculations elsewhere in Microsoft Access—by using an expression. The difference is in the way you specify where the result of the expression goes. When you create an expression for a control on a form or for a field in a query, the result of that expression is assigned to that control or that field.</p>
<p>
When you perform a calculation in Visual Basic, however, it isn’t obvious where the results should go. You have to explicitly assign a destination to the expression. In the case of a function, you want the result of the calculation to be the value returned by the function, so you assign the calculation to the name of the function.</p>
<p>
<img src="abac02_19.gif" border=0></p>
<p>
To make a function return the result of a calculation, add an expression to the function that assigns the calculation to the name of the function. For the FirstOfNextMonth function, you add the following line of code between the <b>Function</b> and <b>End</b> <b>Function</b> statements.</p>
<pre><code>FirstOfNextMonth = DateSerial(Year(Now), Month(Now) + 1, 1)
</code></pre>
<h3>Compiling Your Procedure</h3>
<p>
Before you can run a procedure you’ve written, Microsoft Access must compile it. When it compiles a procedure, Microsoft Access makes a final check for errors and converts the procedure into executable format. Because Microsoft Access checks the syntax of each line as you enter it, your procedures compile very quickly.</p>
<p>
You don’t have to explicitly compile your procedures. If you’ve written a <b>Function </b>procedure, you can simply use it in an expression. Then, when Microsoft Access evaluates the expression, it makes sure all the functions in the expression have been compiled, compiling any uncompiled functions. If any of those functions use other uncompiled procedures, Microsoft Access compiles those as well, and so on, until it has compiled all the code required for it to evaluate the expression. If Microsoft Access discovers an error at any point during the compilation process, it stops compiling and displays an error message.</p>
<p>
Although automatic compiling is convenient, you can encounter error messages when you aren’t expecting them. For example, if you write a function and then use it in a form without compiling it first, you may not discover an error in the function until Microsoft Access attempts to compile it when you try to view data in the form.</p>
<p>
To make sure that a procedure has been compiled, you can explicitly compile the code in your database.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To compile code in all currently open forms, reports, and modules</b>
<ul>
<li>
On the <b>Debug</b> menu in the Module window, click <b>Compile Loaded Modules</b>.</li>
</ul>
<p>
Microsoft Access compiles all procedures that are in open modules. If it encounters an error, Microsoft Access stops compiling, displays a message, and highlights the line of code that contains the error.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on debugging errors in your code, see Chapter 7, <a href="debuggingvisualbasiccode.htm">“Debugging Visual Basic Code.”</a></p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To compile all code in the current database</b>
<ul>
<li>
On the <b>Debug</b> menu in the Module window, click <b>Compile All Modules</b> or <b>Compile And Save All Modules</b>.</li>
</ul>
<p>
Microsoft Access compiles all the procedures in the database. This may take time if you have a large number of procedures or modules.</p>
<p>
<img src="abac02_20.gif" border=0></p>
<p>
Tip  <b> </b>If you click <b>Compile And Save All Modules</b>, Microsoft Access saves all the code in your database in its compiled form. It’s a good idea to save modules after you compile them, because this allows Microsoft Access to run them more quickly when you first open them in the future.</p>
<h3>Using Your Function</h3>
<p>
If you’ve followed the steps in this section, you now have a working function that you can use in an expression almost anywhere in Microsoft Access. You may want to use your new function:
<ul>
<li>
In other Visual Basic procedures that you write.</li>
<li>
In the expression that defines a calculated field in a form, report, or query.</li>
<li>
In the expression that defines the criteria in a query or the condition in a macro. </li>
</ul>
<p>
The following procedure shows you how to create a calculated text box on the Orders form that shows the billing date of the order. When order takers take a new order, this text box will use the FirstOfNextMonth function to automatically display the first day of the next month as the order’s billing date.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To display the result of a function in a calculated text box</b>
<ol>
<li>
Open the Orders form in Design view.</li>
<li>
Add an unbound text box to the Orders form, and set its <b>Name</b> property to BillingDate.</li>
<li>
Set its <b>ControlSource</b> property to the following expression:<pre><code>=FirstOfNextMonth()
</code></pre>
<p>
<img src="abac02_21.gif" border=0></p>
<p>
Now, when an order taker begins to enter a new order, the BillingDate text box automatically displays the first day of the month that follows the current month, as defined by the computer’s system clock.</p>
</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When you use a function in the property sheet, you need to include the parentheses after the function name. If the function has required arguments, you must include them inside the parentheses. For more information, see the following section, “Supplying Arguments to Your Function.”</p>
<h3>Supplying Arguments to Your Function</h3>
<p>
Functions often take one or more arguments—values that you supply when you call the function and that the function uses to calculate the value it returns. Many of the functions supplied with Microsoft Access take arguments. The functions you write can take arguments as well.</p>
<p>
For example, the FirstOfNextMonth function currently returns the first day of the month that follows the current month, as defined by the computer’s system clock. This works fine when an order taker enters a new order, but it’s not what should be displayed in the BillingDate text box for orders that were taken in previous months. Instead, the value in the BillingDate text box should be the first day of the month that follows the value in the OrderDate text box.</p>
<p>
You can change the function so that it accepts an argument and then calculates the first day of the month following a date you pass to that argument. You specify the arguments for a function by placing them inside the parentheses that follow the function name.</p>
<pre><code>Function FirstOfNextMonth(dtmAny As Date) As Date
&#09;FirstOfNextMonth = DateSerial(Year(dtmAny), Month(dtmAny) + 1, 1)
End Function
</code></pre>
<p>
In the <b>ControlSource</b> property box of the BillingDate text box, you pass the function the value in the OrderDate control, so that the function always returns the first day of the month following the month that the order was taken. </p>
<p>
Note&nbsp;&nbsp;&nbsp;You can dimension the data type of an argument in the function declaration. You can also (and normally should) dimension the data type for the function's return value. In the example above, the function's return value and the argument dtmAny are both dimensioned as the data type <b>Date</b>.</p>
<p>
<img src="abac02_22.gif" border=0></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on syntax and naming rules for arguments, search the Help index for “Function statement.”</p>
<h3>Adding Comments to Your Procedure</h3>
<p>
Whenever you create new procedures or modify existing code, it’s a good idea to add comments that describe what the code does. Comments don’t change what your code does, but they help you and other programmers understand it and they make your code considerably easier to maintain.</p>
<p>
Each line of a comment begins with an apostrophe ( ' ). This symbol tells Visual Basic to ignore any words that follow on that line. You can enter comments on a line by themselves, as shown in the following code, or at the end of a line of code.</p>
<pre><code>Function FirstOfNextMonth (dtmAny As Date) As Date
&#09;' This function calculates and returns the date of
&#09;' the first day of the month following the date passed by
&#09;' the argument.
&#09;' Note that this works even if Month(dtmAny) = 12.

&#09;FirstOfNextMonth = DateSerial(Year(dtmAny), Month(dtmAny) + 1, 1) 
End Function
</code></pre>
</FONT></FONT></BODY>
</HTML>

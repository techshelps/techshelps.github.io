<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling Microsoft Excel from C</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Calling Microsoft Excel from C</H1><P CLASS="t">Earlier in this chapter, you learned how to call DLLs from Microsoft Excel. However, in the CIRCUM example, you didn't actually drive Microsoft Excel; you just calculated a function and returned the result. Starting with Microsoft Excel 4.0, it is possible to call internal Microsoft Excel functions directly from the&nbsp;code in your DLL.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The examples in this chapter discuss using the C API to call internal Microsoft Excel functions. For information about using the OLE Automation interface to access Microsoft Excel Visual Basic objects, methods, and properties, see Chapter&nbsp;4, "Using OLE Automation."</P>
<P></P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Driving Microsoft Excel from C is straightforward because there is only one function, Excel4, to learn. The following is the function prototype:</P>

<pre><code><FONT FACE="Courier" SIZE="2">int _cdecl Excel4(int iFunction, LPXLOPER pxRes, int iCount, ...)
</FONT></code></pre>
<P CLASS="t">The Excel4 function takes three or more arguments:</P>
<UL><LI CLASS="ULI1">The first argument is an integer that identifies which internal Microsoft Excel function you want to call.</LI><LI CLASS="ULI1">The second argument is a pointer to a buffer where the result is to be stored.</LI><LI CLASS="ULI1">The third argument is an integer that specifies how many arguments you will be passing to the function.</LI></UL><P></P>
<P CLASS="t">The third argument is followed by the actual arguments to the Microsoft Excel function. All the arguments to Microsoft Excel functions and their return values must always be specified as pointers to XLOPER data structures, which are discussed in the following section. The return value indicates success or an error code. The keyword _cdecl indicates that the function uses the C calling convention.</P>
<P CLASS="t">To use this function, you need to know the following:</P>
<UL><LI CLASS="ULI1">What an XLOPER is and how to construct and examine one.</LI><LI CLASS="ULI1">How to specify which function or command equivalent you want Microsoft Excel to perform.</LI></UL><P></P>
<P CLASS="t">The next two sections discuss these two issues. Then you will be ready to start programming Microsoft Excel in C.</P></FONT>
</FONT></BODY></HTML>

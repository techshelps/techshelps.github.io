<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Committee Add-Ins</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Committee Add-Ins</H2><P CLASS="t">Committee add-ins work inside Microsoft Excel and fully cooperate with the built-in features and tools provided by Microsoft Excel. They generally add items to menus and/or toolbars and allow the user to continue using all the built-in functionality of Microsoft Excel. Your committee add-in will have to trap for common conflicts that arise during the normal usage of Microsoft Excel. For example, if the user starts your process and happens to be in print preview mode, are you going to beep, display a message, or will an untrapped error occur because you didn't expect to be in this state? The committee add-in has to recover gracefully and provide very strong error handling for both known and unknown error conditions.</P>
<P CLASS="t">At a minimum you need to develop a testing suite that includes some of the more common conflicts that can occur when you're coexisting with Microsoft Excel and other add-ins. All of your entry points (places where the user starts your code via menus, toolbars, keystrokes, and/or events) should contain traps for the most common conflicts. While there's no way to provide for every possible situation that can occur when starting your add-in, you should ask yourself what happens to&nbsp;your code when:</P>
<UL><LI CLASS="ULI1">No workbook is open?</LI><LI CLASS="ULI1">The workbook can't be opened (it's missing, or the drive, FTP, or Web site is not available)?</LI><LI CLASS="ULI1">The workbook is password-protected and can't be opened (your user may or may not know the password and you should code for both cases)?</LI><LI CLASS="ULI1">The workbook has never been saved (some properties of a workbook are different before it's saved; for example, Workbook.Path is null before a document is saved)?</LI><LI CLASS="ULI1">The worksheet(s) is/are protected (both with and without a password)?</LI><LI CLASS="ULI1">The worksheet is hidden?</LI><LI CLASS="ULI1">The user is viewing a print preview of the document?</LI><LI CLASS="ULI1">An object is selected when your operation expects cells to be selected?</LI><LI CLASS="ULI1">Cells are selected when your operation expects an object to be selected?</LI><LI CLASS="ULI1">Hidden rows or columns are included in the user's selection?</LI><LI CLASS="ULI1">The workbook is in group edit mode before your code starts (multiple worksheets are selected)?</LI><LI CLASS="ULI1">The user has a multiple selection of cells or objects?</LI></UL><P></P>
<P></P>
<P></P>
<UL><LI CLASS="ULI1">Calculation is set to manual (or automatic)?</LI><LI CLASS="ULI1">Worksheet windows are split or frozen?</LI><LI CLASS="ULI1">Your test installation includes/omits some components of the Microsoft Excel/Office installation?</LI><LI CLASS="ULI1">Menus and/or toolbars have been customized?</LI></UL><P></P>
<P CLASS="t">Of course, your error handling may need to be adjusted and/or a test suite developed that tests for as many conditions as possible. As a rule, the committee add-in requires more testing than the dictator add-in because you have less control over the spreadsheet environment. Answering the questions above will reduce the number of conflicts, but the list is not all-inclusive.</P>
<P CLASS="t">The only way to find specific conflicts is with extensive testing. You should consider testing with Standard, Custom, and Run from CD installations. If you're going to skimp on testing, at least test the Standard installation, as this will be the most common installation. If optional Microsoft Excel/Office components are installed, it's possible that some menus will contain more choices than the Standard install.</P>
<P CLASS="t">If you are modifying built-in menus/toolbars, be sure to verify that you are adding and/or removing objects as expected. One of the properties you can specify when adding menus is where your new menu is placed. Rather than blindly using a numerical index to add or delete your menus (and assuming that the user has not customized the existing menus), use the new Microsoft Excel&nbsp;97 FindControl method to locate an existing menu (called a ControlPopup) before deleting or adding your custom menus.</P>
<P CLASS="t">You may need to have a secondary location as a fallback in case the user has removed or customized the standard menu command bar. Menu customization is easier than ever from the Microsoft Excel interface, and part of your test plan should include non-standard menu and toolbar configurations.</P></FONT>
</FONT></BODY></HTML>

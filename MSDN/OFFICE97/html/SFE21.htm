<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Users and Developers Are Separated</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Users and Developers Are Separated</H2><P CLASS="t">In Microsoft Excel 5/95, macro code was placed in VBA module sheets and dialogs were created on dialog sheets. Both of these sheet types existed alongside worksheets and chart sheets in the Microsoft Excel workbook. While most developers would hide module and dialog sheets from users, if you wanted to you&nbsp;could view all of them together in the workbook.</P>
<P CLASS="t">In Microsoft Excel&nbsp;97, rather than adding module and dialog sheets to the same window used for worksheets and charts, all programming is done from the Visual Basic Editor (VBE). This allows a much richer programming environment that is separate from the worksheet and chart window. You access the VBE from the Microsoft Excel menu by choosing Tools/Macro/Visual Basic Editor or by using the ALT+F11 keys to toggle between the two windows.</P>
<P CLASS="t">In addition to the standard code modules found in previous versions of Microsoft Excel, UserForms, Worksheets, and the Workbook object all contain modules where you can place code that applies to them. Microsoft Excel&nbsp;97 also includes the ability to create Class Modules. In this chapter we'll refer to the three modules types as Standard Modules, created when you choose Insert/Module in the VBE; Object Modules, which hold the "code behind objects"; and Class Modules. This is a design enhancement that allows you to modularize your code.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Standard Modules are equivalent to module sheets in Microsoft Excel 5/95. Class&nbsp;Modules are a new type of module that allow you to create custom objects. Object Modules are a specific type of class module associated with certain VBA and Microsoft Excel&nbsp;97 objects.</P>
<P CLASS="t">Good coding practice suggests that you keep all the code that pertains to a given object in one place, and Microsoft Excel&nbsp;97 VBA allows you to do this. For example: dialog boxes and Wizards are built from Microsoft Excel&nbsp;97 UserForms. These UserForms contain an Object Module that handles the code associated with objects placed on the UserForm (and the UserForm itself). This may include dialog initialization, error handling, and control code. Your Standard Modules can&nbsp;then call your dialog code with a single entry point, and the dialog will respond based on the code in its Object Module. If you copy an object, its code in&nbsp;the Object Module is copied as well, so you could copy a User Form and add it&nbsp;to another workbook and its associated code would be included automatically.</P>
<P CLASS="t">It's important to recognize that the Object Module behind a UserForm may also call code in the Standard Modules of your project. Microsoft Excel doesn't force you to place all the associated code in the Object Module, but in most cases this is&nbsp;the best practice.</P></FONT>
</FONT></BODY></HTML>

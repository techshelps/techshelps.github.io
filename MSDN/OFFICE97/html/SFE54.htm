<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The VBA Support Code</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>The VBA Support Code</H2><P CLASS="t">As stated earlier, you'll be scaling up the code required for simple dialog boxes to&nbsp;handle the additional complexity of your Wizard. While all Wizards vary, we'll&nbsp;focus our attention on the code to handle the following standard issues:</P>
<UL><LI CLASS="ULI1">Displaying your Wizard.</LI><LI CLASS="ULI1">Handling the Cancel button.</LI><LI CLASS="ULI1">Initializing your controls and/or pages.</LI><LI CLASS="ULI1">Validating individual controls and/or pages.</LI><LI CLASS="ULI1">Code for individual controls as events occur.</LI><LI CLASS="ULI1">Navigation code for your control buttons (Next, Back, and so on).</LI><LI CLASS="ULI1">Code for your specific process after the Finish button is chosen.</LI></UL><P></P>
<P CLASS="t">Rather than discuss each of these issues in a vacuum, it's easier to see the concepts in action by looking at real code. The WizDemo.xls workbook (included on the CD) contains code that addresses all of these issues and more.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Your VBA support code will be divided between two or more modules. One module will be a Standard Module and another will be the Object Module behind your UserForm. The Standard Module will call a UserForm function (in our example, bWizardRun) which will start the Wizard. The UserForm contains all the code for initializing, validating, navigating, and any other routines needed while your Wizard is displayed. Here's the code fragment contained in the mEntry module (a&nbsp;Standard Module) for starting the Wizard.</P>

<pre><code><FONT FACE="Courier" SIZE="2">'''    Call Object Module routine to display the W924959039izard924959039SFSF
    ''' Wizard was NOT cancelled.
    If frmWizardDialog.bWizardRun Then 
        ''' more processing here if needed...
        ''' After your procedure runs remove the
        ''' userform from memory
    Else        ''' User cancelled the WizardSFSF
            '''  Code for any needed cleanup due to cancel
    End If
</FONT></code></pre>
<P CLASS="t">The frmWizardDialog.bWizardRun is a Public routine in the frmWizardDialog Object Module that displays the dialog and returns True if the user completes the Wizard and False if the user cancels. The complete function is listed below:</P>

<pre><code><FONT FACE="Courier" SIZE="2">'''    Function:    bWizardRun
'''    Returns:        True if user completes the Wizard
'''    Comments:    Shows the Wizard and Unloads it if the
'''                user cancels
Public Function bWizardRun() As Boolean
'''    initialize the Wizard assuming the user will cancel
    mbUserCancelled = True
    frmWizardDialog.Show
    bWizardRun = Not mbUserCancelled
End Function
</FONT></code></pre>
<P CLASS="t">Calling the Show method of a dialog box automatically fires the Initialize event. In other words, the routine above actually runs all the initialization code, displays the dialog box, validates input, and then runs the code to handle the Wizard results. This occurs because all the code for the Wizard is stored in the UserForm Object Module. When it's finished, it returns a True or False based on your user completing or canceling the Wizard.</P>
<P></P>
<P></P>
<P></P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Custom Dialog Boxes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Custom Dialog Boxes</H2><P CLASS="t">In Microsoft Excel 5/95, custom dialog boxes were created by adding dialog sheets to a workbook. In Microsoft Excel&nbsp;97, custom dialog boxes are created with UserForms added to a project in the VBE. Controls are added to UserForms with the Toolbox, in a manner very similar to the way controls were added to Microsoft Excel 5/95 DialogSheets. The most visible difference between UserForms and DialogSheets is that new DialogSheets always had OK and Cancel&nbsp;buttons included on them by default, whereas new UserForms begin as a&nbsp;blank slate. You must add and create code for all controls.</P>
<P CLASS="t">The new ActiveX controls provided with Microsoft Excel&nbsp;97 and Office&nbsp;97 are greatly enhanced compared to the simple controls available in earlier versions. You now have much finer control over your custom dialogs and can provide a wider variety of dialog effects. For example, you can easily create wizards, add control tips (similar to tool tips), respond to different events (change, click, mouse&nbsp;over, mouse down, and so on), and provide context-sensitive help.</P>
<P CLASS="t">Unlike DialogSheets, you also have full control over the loading and display of UserForms. There are four UserForm methods that control how a UserForm is handled by VBA. These are Load, Show, Hide, and Unload.</P>
<H4 CLASS="h6"><A NAME="sec0"></A>Load</H4><P CLASS="h">Loads the UserForm in memory, but doesn't display it. This method is useful when your project has complex forms that take a long time to load. The Load method allows you to load these forms into memory at the beginning of the program or at other appropriate times so that they are available without delay when they are needed.</P>
<H4 CLASS="h6"><A NAME="sec1"></A>Show</H4><P CLASS="h">Displays the UserForm. If the UserForm is not already loaded into memory, the&nbsp;Show method will also load it.</P>
<H4 CLASS="h6"><A NAME="sec2"></A>Hide</H4><P CLASS="h">Removes the UserForm from the screen and sets its Visible property to False, but&nbsp;does not remove it from memory. When a UserForm is hidden, all of the properties and methods that it exposes are still available.</P>
<P></P>
<P></P>
<P></P>
<H4 CLASS="h6"><A NAME="sec3"></A>Unload</H4><P CLASS="h">Removes the UserForm from memory. When a UserForm is unloaded, its properties and methods are no longer available.</P>
<P CLASS="t">Any UserForms not explicitly unloaded by your add-in can potentially remain in memory until Microsoft Excel is closed. To avoid this, it's a good idea to clean up&nbsp;any loaded UserForms before exiting your add-in. You accomplish this with the UserForms collection. The UserForms collection contains all the <I>loaded</I> UserForms in your add-in. Running the following code ensures that all UserForms are unloaded:</P>

<pre><code><FONT FACE="Courier" SIZE="2">If UserForms.Count &gt; 0 Then
    For iCount = 1 To UserForms.Count
        Unload UserForms(0)
    Next iCount
End If
</FONT></code></pre></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Bars: Menu Bars, Toolbars, 
and Shortcut Menus</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="commandbarsmenubarstoolbarsandshortcutmenus"></a>Command Bars: Menu Bars, Toolbars, and Shortcut Menus</h2>
<p>
In Microsoft Access 97, the internal workings of menu bars, shortcut menus, and toolbars have been unified into a single object called a <i>command bar.</i> Because they share the same underlying technology, you have more flexibility when you customize existing Microsoft Access menu bars, toolbars, and shortcut menus, and when you create new ones for your application.</p>
<p>
Menu bars and toolbars are two ways to present commands on command bars: a menu bar typically presents drop-down menus of commands as text, and a toolbar typically presents commands as buttons. A shortcut menu is a subset of a menu bar, presenting one menu of commands when a user right-clicks most objects and controls in Microsoft Access. You can create new shortcut menus and associate them with the forms, reports, or controls in your application.</p>
<p>
<img src="abac01_19.gif" border=0></p>
<p>
Because menu bars, toolbars, and shortcut menus share the same internal workings, you can use most of the same controls on all three. For example, in addition to their typical controls, a top-level menu bar can use buttons, a drop-down menu can use combo box controls, and a toolbar can use drop-down menu buttons that display text-only commands. In this respect, command bars can be too flexible. Avoid confusing the users of your application by putting menu bar and toolbar controls in unusual locations or configurations. Instead, model your custom command bars after the ones used in Microsoft Access.</p>
<p>
The simplest way to work with command bars is by using the <b>Customize</b> dialog box (<b>View</b> menu,<b> Toolbars</b> submenu). You can use the <b>Customize</b> dialog box to customize existing command bars or to create new ones. New command bars can contain existing commands or new commands that run the event procedures or macros you define.</p>
<p>
By default, users can customize command bars. Users can also make menu bars and toolbars free-standing by dragging them into the work area, or they can dock them to the sides or the bottom of the work area. In addition, users can resize or hide menu bars and toolbars. You can prevent users from customizing all command bars in your application in the <b>Startup</b> dialog box (<b>Tools</b> menu). You can prevent users from customizing, moving, or resizing an individual menu bar or toolbar by setting options in the <b>Toolbar Properties</b> dialog box, which is available from the <b>Customize</b> dialog box.</p>
<p>
You can also use the objects, methods, and properties of the <b>CommandBars</b> collection in Visual Basic code to create and work with command bars.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information, see “Working with Command Bars in Code” later in this chapter.</p>
<p>
Changes to existing command bars are always stored in the Windows Registry in the <b>\HKEY_CURRENT_USER\Software\Microsoft\Office\8.0\Access\Settings \CommandBars</b> key. When you create a new command bar, it is saved in a system table in the current database and is only available in that database. However, if you create an add-in database and store new command bars in it, they are available from any installation of Microsoft Access that has the add-in installed.</p>
<p>
Once you have customized an existing menu bar or toolbar, or created a new one, you can attach it to a form or report by specifying it in the <b>MenuBar</b> or <b>Toolbar</b> property for the form or report. To attach a shortcut menu to a form, report, or control, specify it in the <b>ShortcutMenuBar</b> property for the form, report, or control. You can also specify a global menu bar or a global shortcut menu to be available throughout your application by using the <b>Startup</b> dialog box (<b>Tools</b> menu).</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Previous versions of Microsoft Access use the AddMenu and DoMenuItem actions in macros to create custom menu bars and shortcut menus and to carry out standard Microsoft Access menu commands. If you convert a database created in a previous version of Microsoft Access to Microsoft Access 97, the macros that contain the AddMenu and DoMenuItem actions will still run; however, Microsoft Access 97 converts DoMenuItem actions in the macros to the new RunCommand action. For more information on the RunCommand action, search the Help index for “RunCommand action.”</p>
<p>
Although these menu bar macros created with a previous version of Microsoft Access will run from the forms, reports, or controls they are attached to, they won’t be available in the <b>Customize</b> dialog box. However, you can create a Microsoft Access 97–style menu bar or shortcut menu from a menu bar macro created in a previous version of Microsoft Access. For more information on how to do this, search the Help index for “macros, using to work with menus.”</p>
<A NAME="one"></A>
<h3>Creating New Menu Bars, Toolbars, and Shortcut Menus</h3>
<p>
You create all command bars, whether they are menu bars, toolbars, or shortcut menus, by using the <b>Customize</b> dialog box (<b>View</b> menu, <b>Toolbars</b> submenu). You create the different kinds of command bars by setting their properties and, if necessary, by setting properties for the commands within them to control how they appear and behave. The following procedures show how to create new menu bars, toolbars, and shortcut menus.</p>
<h4>Creating New Command Bars and Setting Their Properties</h4>
<p>
The first step in creating a new menu bar, toolbar, or shortcut menu is to create and name an empty command bar, set its type, and set other properties that control how it can be used.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create an empty command bar and set its properties</b>
<ol>
<li>
On the <b>View</b> menu, point to <b>Toolbars</b>, and then click <b>Customize</b>.</li>
<li>
On the <b>Toolbars</b> tab, click <b>New</b>.</li>
<li>
In the <b>Toolbar Name</b> box, type a name for the new command bar, and then click <b>OK</b>.<p>
Microsoft Access creates an empty, floating command bar, which you can specify to be a toolbar, menu bar, or shortcut menu.</p>
</li>
<li>
In the <b>Customize</b> dialog box, click <b>Properties</b> to display the <b>Toolbar Properties</b> dialog box. </li>
<li>
In the <b>Type</b> box, click the kind of command bar you want to create: <ul>
<li>
To create a menu bar, click <b>Menu Bar</b>.</li>
<li>
To create a toolbar, click <b>Toolbar</b>.</li>
<li>
To create a shortcut menu, click <b>Popup</b>.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The Popup setting of the <b>Type</b> property is used for a shortcut menu because in the command bar object model, menus (on both menu bars and toolbars), submenus, and shortcut menus are all of this type. However, if a command bar has its <b>Type</b> property set to Popup, the <b>Customize</b> dialog box user interface only allows you to work with it as a shortcut menu. Additionally, as soon as you set a new command bar’s <b>Type</b> property to Popup, it disappears because a shortcut menu can’t display as free-standing. To add commands to your custom shortcut menu, you must display it. For more information, see “Adding Menus and Submenus to Command Bars” later in this chapter.</p>
</li>
<li>
If you are creating a menu bar or toolbar, in the <b>Docking</b> box, click the kind of docking you want to allow. These settings don’t apply to shortcut menus.<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Click</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Allow users to dock the menu bar or toolbar both horizontally and vertically</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Allow Any</b></td>
</tr>
<tr valign=top>
<TD>
Prevent users from changing how the menu bar or toolbar is docked</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Can’t Change</b></td>
</tr>
<tr valign=top>
<TD>
Allow users to dock the menu bar or toolbar horizontally only</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">No Vertical</b></td>
</tr>
<tr valign=top>
<TD>
Allow users to dock the menu bar or toolbar vertically only</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">No Horizontal</b></td>
</tr>
</table>
</li>
<li>
Clear the following check boxes whose default behavior you want to change. <table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Clear this check box</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Prevent users from making changes to the command bar by using the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Customize</b> dialog box</td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Allow Customizing</b></td>
</tr>
<tr valign=top>
<TD>
Prevent the new command bar from appearing on the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Toolbars</b> submenu (<b>View</b> menu)</td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Show On Toolbars Menu</b></td>
</tr>
</table>
</li>
<li>
If you are creating a menu bar or toolbar, clear any of the following check boxes whose default behavior you want to change. These settings don’t apply to shortcut menus.<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Clear this check box</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Prevent users from changing how a menu bar or toolbar is docked</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Allow Moving</b></td>
</tr>
<tr valign=top>
<TD>
Prevent users from showing or hiding the menu bar or toolbar</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Allow Showing/Hiding</b></td>
</tr>
<tr valign=top>
<TD>
Prevent users from resizing the menu bar or toolbar</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Allow Resizing</b></td>
</tr>
</table>
</li>
<li>
When you are finished specifying properties for the new command bar, click <b>Close</b>. To continue working with your new command bar, leave the <b>Customize</b> dialog box open.</li>
</ol>
<p>
At this point, you have an empty command bar of the type you specified in step 5. If you created a menu bar, you need to add menus to it and then add commands to those menus. If you created a shortcut menu, you need to add commands to it. If you created a toolbar, you need to add buttons or other controls to it.</p>
<h4>Adding Menus and Submenus to Command Bars</h4>
<p>
If you are creating a menu bar, you must add and name top-level menus, and then add commands to those menus. If you want an additional menu to open from a menu command, you can add a submenu to it. You can also add menus and submenus to toolbars, and submenus to shortcut menus. </p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;In previous versions of Microsoft Access, you had to add a single top-level menu to create a shortcut menu. This is not necessary in Microsoft Access 97.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To add a menu or submenu to a command bar</b>
<ol>
<li>
If the <b>Customize</b> dialog box isn’t open, point to <b>Toolbars</b> on the <b>View</b> menu, and then click <b>Customize</b>.</li>
<li>
If the menu bar, toolbar, or shortcut menu you want to work with isn’t displayed, open it.<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;To display a custom shortcut menu, select the <b>Shortcut Menu</b> check box in the <b>Toolbars</b> list of the <b>Customize</b> dialog box. On the <b>Shortcut Menu</b> toolbar, click <b>Custom</b> and then click the name of your custom shortcut menu.</p>
</li>
<li>
In the <b>Customize</b> dialog box, click the <b>Commands</b> tab.</li>
<li>
In the <b>Categories</b> box, click <b>New Menu</b>.<p>
<b>New Menu</b> appears in the <b>Commands</b> box.</p>
</li>
<li>
Drag <b>New Menu</b> from the <b>Commands</b> box to your menu bar or toolbar:<ul>
<li>
To create a top-level menu, drag <b>New Menu</b> to the top row of your menu bar or toolbar.</li>
<li>
To create a submenu, you must have an existing top-level menu, or you must be adding a new menu to a shortcut menu. Drag and hold <b>New Menu</b> over a top-level menu (or shortcut menu) until it drops down, then drag <b>New Menu</b> to the location you want and release the mouse.</li>
</ul>
</li>
<li>
Right-click <b>New Menu</b> on your menu or toolbar, and then type the name for your menu in the <b>Name</b> box.<p>
<img src="abac01_20.gif" border=0></p>
<p>
Tip   You can create an access key for your menu names so that users can access your menus with the keyboard. To do so, type an ampersand (&amp;) in front of the letter you want to use. For example, to use F as the access key for a menu named File, type <b>&amp;File</b>. The F in your menu name is underlined and users can open the menu by pressing ALT+F.</p>
</li>
<li>
To further customize your new menu or submenu, set other properties in the <b>Control Properties</b> dialog box. To display the <b>Control Properties</b> dialog box, right-click the new menu or submenu, and then click <b>Properties</b>.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the settings in the <b>Control Properties</b> dialog box, see “Setting Properties for Command Bar Controls” later this chapter.</p>
</li>
</ol>
<p>
Once you have added all the menus and submenus to your command bar, you have the basic framework to contain the commands that you want to be available. If you are creating a menu bar, you have top-level menus and perhaps some submenus. If you are creating a toolbar, you may have added top-level menu buttons and possibly submenus within them. If you are creating a shortcut menu, you may have added submenus. The next step is to add commands to your menus and submenus, or buttons that carry out commands to your toolbar.</p>
<h4>Adding Existing Menu Commands, Buttons, and Other Controls to Command Bars</h4>
<p>
By using the <b>Customize </b>dialog box, you can add any existing Microsoft Access menu command, toolbar button, or other control to your new command bar. This includes all standard Microsoft Access menu commands and toolbar buttons, as well as drop-down combo box controls, such as the <b>Font</b> box, and special formatting controls, such as the <b>Fill/Back Color</b> and <b>Special Effect</b> controls.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To add an existing Microsoft Access menu command, button, or other control</b>
<ol>
<li>
If the <b>Customize</b> dialog box isn’t open, point to <b>Toolbars</b> on the <b>View</b> menu, and then click <b>Customize</b>.</li>
<li>
If the menu bar, toolbar, or shortcut menu you want to work with isn’t displayed, open it.</li>
<li>
In the <b>Customize</b> dialog box, click the <b>Commands</b> tab.</li>
<li>
In the <b>Categories</b> box, click the category that contains the menu command, button, or other control you want to add to your command bar. For example, to add a command that appears on the <b>File</b> menu, click <b>File</b>. <p>
Important&nbsp;&nbsp;&nbsp;You can add an entire menu of commands at once by using the commands in the <b>Built-in Menus</b> category. However, in most cases you shouldn’t do this, because a menu created with the <b>Built-in Menus</b> category functions as a pointer to the corresponding menu on the built-in menu bar of the current installation of Microsoft Access. Any subsequent changes you make to the custom menu are also made to the built-in menu. For example, if you add the entire <b>File</b> menu by using the <b>Built-in Menus</b> category and then delete the <b>New Database</b> command from that menu on your custom command bar, the <b>New Database</b> command is also deleted from the <b>File</b> menu of the built-in menu. Additionally, even if this is what you want to happen, if you copy your database and custom command bar to another computer, the changes you made to the commands on a menu created by using the<b> Built-in Menus</b> category are not copied because these menus only function as a pointer to the built-in menus of the current installation. To reliably create a copy of an entire built-in menu or a subset of that menu, first create a menu by using the <b>New Menu</b> category as described in the previous procedure, and then add individual commands from the built-in menu you want to copy as described in the following steps. </p>
</li>
<li>
Drag the menu command, button, or other control you want from the <b>Commands</b> box to the appropriate location on your command bar.<p>
To add the command or control to a menu or submenu, drag it and hold the mouse over the menu or submenu name until it drops down, and then drag the command or control where you want it on the menu or submenu and release the mouse.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you place the command or control in the wrong location, you can drag it to the correct location.</p>
</li>
<li>
To further customize your command bar, you can change the images that appear on toolbar buttons and next to menu commands, and you can set other properties that determine how your menu commands, buttons, and other controls appear and work. To display a menu of customization options, right-click the menu command, button, or control.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information, see “Working with Button Images on Command Bars” and “Setting Properties for Command Bar Controls” later in this chapter.</p>
</li>
</ol>
<h4>Adding Custom Menu Commands and Buttons to Command Bars</h4>
<p>
There are three ways to add menu commands and buttons that perform custom actions to a command bar. You can:
<ul>
<li>
Add a menu command or button that opens a table, query, form, or report.</li>
<li>
Create a macro and then add a menu command or button to run the macro.</li>
<li>
Create a Visual Basic <b>Function</b> procedure, and then add an existing menu command or button and customize it to run the <b>Function</b> procedure.</li>
</ul>
<h5>Creating a Command or Button That Opens a Database Object</h5>
<p>
To create a command or button that opens a table, query, form, or report, drag the name of the database object from the appropriate category in the <b>Customize</b> dialog box to your command bar.</p>
<p>
This method is equivalent to opening the object from the Database window; you can’t specify additional parameters such as the mode in which Microsoft Access opens the object, and you can’t perform other actions when opening the object. If you want to specify additional parameters or perform a series of actions when opening an object, you must create a macro or a Visual Basic <b>Function</b> procedure and add it to your menu or toolbar, as described later in this section.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To add a custom command or button that opens a database object</b>
<ol>
<li>
If the <b>Customize</b> dialog box isn’t open, point to <b>Toolbars</b> on the <b>View</b> menu, and then click <b>Customize</b>.</li>
<li>
If the menu bar, toolbar, or shortcut menu you want to work with isn’t displayed, open it.</li>
<li>
In the <b>Customize</b> dialog box, click the <b>Commands</b> tab.</li>
<li>
In the <b>Categories</b> box, click the category for the type of object you want to open: <b>All Tables</b>, <b>All Queries</b>, <b>All Forms</b>, or <b>All Reports</b>.</li>
<li>
Drag the object you want to open from the <b>Commands</b> box to the appropriate location on your command bar.<p>
To add the command that opens the object to a menu or submenu, drag it and hold the mouse over the menu or submenu name until it drops down, and then drag the command where you want it on the menu or submenu and release the mouse.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you place the command in the wrong location, you can drag it to the correct location.</p>
</li>
<li>
To further customize your command bar, you can change the images that appear on toolbar buttons and next to menu commands, and you can set other properties that determine how your menu commands and buttons appear and work. To display a menu of customization options, right-click the menu command or button.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information, see “Working with Button Images on Command Bars” and “Setting Properties for Command Bar Controls” later in this chapter.</p>
</li>
</ol>
<h5>Creating a Command or Button That Runs a Macro</h5>
<p>
To create a command or button that runs a macro, create the macro, and then drag its name from the <b>Customize</b> dialog box to your command bar. For example, you can create a macro that uses the OpenForm action to open a form and set the Data Mode argument to Add. Add the macro to a menu, and when a user clicks the custom command, Microsoft Access runs the macro, opening a blank form ready to add a new record.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To add a custom command or button that runs a macro</b>
<ol>
<li>
Create a macro that performs the action you want.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on creating macros, search the Help index for “macros, creating.”</p>
</li>
<li>
If the <b>Customize</b> dialog box isn’t open, point to <b>Toolbars</b> on the <b>View</b> menu, and then click <b>Customize</b>.</li>
<li>
If the menu bar, toolbar, or shortcut menu you want to work with isn’t displayed, open it.</li>
<li>
In the <b>Customize</b> dialog box, click the <b>Commands</b> tab.</li>
<li>
In the <b>Categories</b> box, click <b>All Macros</b>.</li>
<li>
Drag the macro you want to run from the <b>Commands</b> box to the appropriate location on your command bar.<p>
To add a command that runs the macro to a menu or submenu, drag it and hold the mouse over the menu or submenu name until it drops down, and then drag the command or control where you want it on the menu or submenu and release the mouse.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you place the command in the wrong location, you can drag it to the correct location.</p>
</li>
<li>
To further customize your command bar, you can change the images that appear on toolbar buttons and next to menu commands, and you can set other properties that determine how your menu commands and buttons appear and work. To display a menu of customization options, right-click the menu command or button.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information, see “Working with Button Images on Command Bars” and “Setting Properties for Command Bar Controls” later in this chapter.</p>
</li>
</ol>
<h5>Creating a Command or Button That Runs a Visual Basic Function Procedure</h5>
<p>
For the greatest flexibility, you can create a Visual Basic <b>Function</b> procedure and run it from a menu command or toolbar button. To do so, add the <b>Custom</b> command to your command bar, and then customize it to run your <b>Function</b> procedure.</p>
<p>
Important   You can run only Visual Basic <b>Function</b> procedures from a command bar, not <b>Sub</b> procedures.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To add a custom command or button that runs a Visual Basic Function procedure</b>
<ol>
<li>
Create a Visual Basic <b>Function</b> procedure that performs the action you want.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on creating <b>Function</b> procedures, search the Help index for “Visual Basic code, Function procedures.”</p>
</li>
<li>
If the <b>Customize</b> dialog box isn’t open, point to <b>Toolbars</b> on the <b>View</b> menu, and then click <b>Customize</b>.</li>
<li>
If the menu bar, toolbar, or shortcut menu you want to work with isn’t displayed, open it.</li>
<li>
In the <b>Customize</b> dialog box, click the <b>Commands</b> tab.</li>
<li>
In the <b>Categories</b> box, click <b>File</b> and then drag the <b>Custom</b> command from the <b>Commands</b> box to your command bar. </li>
<li>
Right-click the new command on your menu or toolbar, and then click <b>Properties</b>.<p>
Microsoft Access displays the <b>Control Properties</b> dialog box.</p>
</li>
<li>
In the <b>Caption</b> box, delete the current name, and type the new name for your command.<p>
<img src="abac01_21.gif" border=0></p>
<p>
Tip   You can create an access key for your command so that users can access it with the keyboard. To do so, type an ampersand (&amp;) in front of the letter you want to use. For example, to use I as the access key for a Print Invoice command, type <b>Print &amp;Invoice</b>. The I in your command name is underlined and users can carry out the command by pressing ALT+I.</p>
</li>
<li>
In the <b>On Action</b> box, type an expression to run your Visual Basic <b>Function</b> procedure. The expression must use the following syntax: =<i>functionname</i>(). For example, to run a function named PrintInvoice, you’d type <b>=PrintInvoice()</b>.</li>
<li>
To further customize your command bar, you can change the images that appear on toolbar buttons and next to menu commands, and you can set other properties that determine how your menu commands and buttons appear and work. To display a menu of customization options, right-click the menu command or button.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information, see “Working with Button Images on Command Bars” and “Setting Properties for Command Bar Controls” later in this chapter.</p>
</li>
</ol>
<h4>Working with Button Images on Command Bars</h4>
<p>
Most Microsoft Access command bar controls have a button image that is displayed when the control is on a toolbar, and sometimes appears next to the control when it’s on a menu. You can customize these button images by:
<ul>
<li>
Changing the image to one of a set of predefined images.</li>
<li>
Copying a control’s image and pasting it into another control.</li>
<li>
Copying an image from a graphics program and pasting it into another control.</li>
<li>
Editing the image by using the <b>Button Editor </b>dialog box.</li>
</ul>
<p>
Whether a control appears with a button image, text, or both is determined by the setting of the control’s <b>Style</b> property and by whether the control is on a toolbar or a menu. The following table describes how the <b>Style </b>property works.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;A control’s <b>Caption</b> property text is identical to the text in the <b>Name</b> box on the shortcut menu that appears when you right-click a control while the <b>Customize</b> dialog box is open.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Style property setting</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">What appears on a menu</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">What appears on a toolbar</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Default Style</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Button image and <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property text</td>
<TD>
Button image only</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Text Only (In Menus)</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property text only</td>
<TD>
Button image only</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Text Only (Always)</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property text only </td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property text only </td>
</tr>
<tr valign=top>
<TD>
Image And Text</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Button image and <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property text</td>
<TD>
Button image and <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property text</td>
</tr>
</table>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;By default, some Microsoft Access command bar controls don’t have a button image associated with them and won’t display an image regardless of the <b>Style</b> property setting. However, you can add an image by using one of the methods described in the following procedure. Also, some Microsoft Access command bar controls have their <b>Style</b> property set to Text Only (In Menus) by default so that they don’t display their image on menus. If you want to display the image on menus, set the <b>Style</b> property to Default Style.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on setting the <b>Style</b> property and other command bar control properties, see “Setting Properties for Command Bar Controls” later in this chapter.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To customize a button image on a command bar control</b>
<ol>
<li>
If the <b>Customize</b> dialog box isn’t open, point to <b>Toolbars</b> on the <b>View</b> menu, and then click <b>Customize</b>.</li>
<li>
If the menu bar, toolbar, or shortcut menu that contains the control you want to work with isn’t displayed, open it.</li>
<li>
Do one of the following.<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Do this</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Use a predefined button image</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the control, point to <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Change Button Image</b>, and then click the image you want.</td>
</tr>
<tr valign=top>
<TD>
Copy and paste another control’s button image</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the control that has the image you want to use, and then click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Copy Button Image</b>. Right-click the control whose image you are customizing, and then click <b>Paste Button Image</b>. </td>
</tr>
<tr valign=top>
<TD>
Copy and paste an image from a graphics program</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Open the image you want to copy in a graphics program. Select and copy the image (preferably a 16 x 16 pixel image or portion). Switch back to Microsoft Access. Right-click the control, and then click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Paste Button Image</b>.</td>
</tr>
<tr valign=top>
<TD>
Edit the control’s current button image</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the control, and then click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Edit Button Image</b>. In the <b>Button Editor</b> dialog box, you can change the color and shape of the image, adjust the image’s position on the control, and preview your changes to the image. When you have finished editing the button image, click <b>OK</b>.</td>
</tr>
<tr valign=top>
<TD>
Reset a control to use its original button image</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the control and then click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Reset Button Image</b>.</td>
</tr>
</table>
</li>
<li>
When you have finished working with the button image, click <b>Close</b>.</li>
</ol>
<h4>Setting Properties for Command Bar Controls</h4>
<p>
Microsoft Access provides some additional menu and control properties that you can use to further customize menus, menu commands, and toolbar buttons. You set each of these properties in the <b>Control Properties</b> dialog box.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Depending on the kind of control you’re working with, some properties will not be available.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To set control properties for a menu, a menu command, or a toolbar button</b>
<ol>
<li>
If the <b>Customize</b> dialog box isn’t open, point to <b>Toolbars</b> on the <b>View</b> menu, and then click <b>Customize</b>.</li>
<li>
If the menu bar, toolbar, or shortcut menu that contains the control you want to work with isn’t displayed, open it.</li>
<li>
Right-click the control, and then click <b>Properties</b>.</li>
<li>
In the <b>Control Properties</b> dialog box, set the properties you want. The following table describes each property.<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b></td>
<TD>
The name that is displayed for the command. This is identical to the text entered in the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name</b> box on a menu or control’s shortcut menu. </td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Shortcut Text</b></td>
<TD>
The text that is displayed next to a menu command and that indicates its shortcut key; for example, CTRL+P.<p><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
This property only creates display text to prompt the user. To define the shortcut key, you must create an AutoKeys macro as described in “Making Key Assignments” later in this chapter.</p>
</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ToolTip</b></td>
<TD>
The text of the ToolTip that appears when a user rests the pointer on the control. If this setting is blank, Microsoft Access uses the text from the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property as the ToolTip.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">On Action</b></td>
<TD>
The name of a macro or Visual Basic <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Function</b> procedure that runs when a user clicks the control. When using a <b>Function</b> procedure, you must enter the name of procedure as an expression, using the syntax <b>=</b><i>functionname</i><b>()</b>.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Style</b></td>
<TD>
Controls how a command is displayed. The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Style</b> property settings are also available from a control’s shortcut menu.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on the <b>Style</b> property, see “Working with Button Images on Command Bars” earlier in this chapter.</p>
</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Help File</b></td>
<TD>
The help file that contains the What’s This Tip topic specified by the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Help ContextID</b> property.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Help ContextID</b></td>
<TD>
The context ID of the topic to display as a What’s This Tip for this command.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Parameter</b></td>
<TD>
An optional string associated with the control that your application can reference or set. For example, the Visual Basic <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Function</b> procedure specified in the <b>On Action</b> property can refer to the <b>Parameter</b> property to determine how it works, or the <b>Parameter</b> property can be used to store information about the control, much like the <b>Tag</b> property. The <b>Parameter</b> property isn’t generally used by built-in menu and toolbar controls. However, the <b>Parameter</b> property for a menu command or toolbar button used to add an ActiveX control is set to the ActiveX control’s <i>class identifier(CLSID)</i>, which is the Registry value that uniquely identifies that control. If you delete or modify the CLSID, the command or button won’t work. Similarly, the <b>Parameter</b> property for a menu command or toolbar button used to open a particular database object is set to the name of the object.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Tag</b></td>
<TD>
An optional string that can be used later in event procedures. </td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Begin A Group</b></td>
<TD>
Select this check box to indicate the beginning of a group of controls. On menus, a separator bar appears above a command that has this property set. On toolbars, a vertical separator bar appears in front of the command. If you resize a floating toolbar and the entire group of controls doesn’t fit on the current line, the whole group is bumped to a new line.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
</li>
</ol>
<p>
You can also set and read each of the properties in Visual Basic code. Most of the corresponding Visual Basic property names are the same as those listed in the preceding table, although the words are concatenated; for example, <b>ShortcutText</b> property. There are two exceptions: the Visual Basic properties that correspond to the <b>ToolTip</b> and <b>Begin A Group</b> properties in the <b>Control Properties </b>dialog box are <b>ToolTipText</b> and <b>BeginGroup</b>.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on creating and customizing command bars, search the Help index for “toolbars” or “menus.”</p>
<h3>Importing Custom Command Bars</h3>
<p>
If you want to use the custom command bars from one application in another application, you can import them. You cannot import a single custom command bar; you must import all the custom command bars in an application. However, Microsoft Access doesn’t import command bars that have the same name as existing command bars.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To import all custom command bars from another application</b>
<ol>
<li>
Open the application into which you want to import the custom command bars.</li>
<li>
On the <b>File</b> menu, point to<b> Get External Data</b>, and then click <b>Import</b>.</li>
<li>
In the <b>Import</b> dialog box, select the application that contains the command bars you want to import, and then click <b>Import</b>.</li>
<li>
In the <b>Import Objects</b> dialog box, click <b>Options</b>.</li>
<li>
Select the <b>Menus And Toolbars</b> check box, and then click <b>OK</b>.</li>
</ol>
<h3>Using Custom Menu Bars and Shortcut Menus</h3>
<p>
You can use custom menu bars and shortcut menus in your application in three ways:
<ul>
<li>
<b>Attached to a form or report   </b>Microsoft Access displays your custom menu bar whenever you open the form or display the report in Print Preview.</li>
<li>
<b>As a shortcut menu attached to a form, a control on a form, or a report   </b>Microsoft Access displays your custom menu whenever you right-click the form, control, or report it’s attached to.</li>
<li>
<b>As your application’s global menu bar   </b>Microsoft Access displays your custom menu bar in all windows, except in forms or reports that have their own custom menu bar. (A form or report’s custom menu bar overrides a global custom menu bar.)</li>
</ul>
<h4>Attaching a Custom Menu Bar to a Form or Report</h4>
<p>
The easiest way to create a menu bar that’s attached to a form or report is to create a new menu bar and then specify that menu bar in the form or report’s <b>MenuBar</b> property, so Microsoft Access displays the menu bar whenever the form or report is active.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To attach a custom menu bar to a form or report</b>
<ol>
<li>
Create a custom menu bar as described earlier in this chapter.</li>
<li>
Open the form or report in Design view.<p>
<img src="abac01_22.gif" border=0></p>
</li>
<li>
On the toolbar, click <b>Properties</b>.</li>
<li>
In the<b> MenuBar</b> property box, enter the name of the menu bar you created in step 1.</li>
</ol>
<p>
You can attach the same menu bar to more than one form or report.</p>
<h4>Attaching a Custom Shortcut Menu to a Form, a Control on a Form, or a Report</h4>
<p>
You can attach custom shortcut menus to a form, a control on a form, or a report. After you create the shortcut menu, set the <b>ShortcutMenuBar</b> property for the form, control, or report to the name of the shortcut menu. Microsoft Access displays the custom shortcut menu whenever a user right-clicks the form, control, or report.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To attach a custom shortcut menu to a form, a control on a form, or a report</b>
<ol>
<li>
Create a custom shortcut menu as described earlier in this chapter.</li>
<li>
Open the form or report in Design view.</li>
<li>
Click the form, control, or report to which you want to attach a custom shortcut menu.<p>
<img src="abac01_23.gif" border=0></p>
</li>
<li>
On the toolbar, click <b>Properties</b>.</li>
<li>
In the<b> ShortcutMenuBar</b> property box, enter the name of the shortcut menu you created in step&nbsp;1.</li>
</ol>
<p>
You can attach the same shortcut menu to more than one form, control, or report.</p>
<h4>Specifying a Global Menu Bar or Shortcut Menu</h4>
<p>
You can specify a menu bar to use throughout your application by using the <b>Startup</b> dialog box.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To specify a global menu bar to display when your application starts</b>
<ol>
<li>
Create a custom menu bar as described earlier in this chapter.</li>
<li>
On the <b>Tools</b> menu, click <b>Startup</b>.</li>
<li>
In the <b>Menu Bar</b> box, enter the name of the menu you created in step 1.</li>
<li>
Click <b>OK</b>.<p>
The next time you start your application, Microsoft Access displays your custom menu bar instead of the default menu bar.</p>
</li>
</ol>
<p>
You can change the global menu bar while your application is running, without having to restart your computer. To do so, set the <b>MenuBar </b>property of the <b>Application</b> object to the name of the menu bar.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on specifying global menu bars in Visual Basic, search the Help index for “MenuBar property.”</p>
<h3>Using Custom Toolbars</h3>
<p>
You can use one or more custom toolbars in an application. Create the toolbars you want, and then use the appropriate method to display your custom toolbars:
<ul>
<li>
If your application has only one custom toolbar, simply use the <b>Toolbars</b> command (<b>View</b> menu) to display it and it will appear each time your application starts.</li>
<li>
If your application has different custom toolbars for different forms or reports, you can specify a toolbar for each form or report in the form or report’s <b>Toolbar</b> property.</li>
<li>
If you need to work with more than one custom toolbar for a form or report, or if you want to hide or show Microsoft Access built-in toolbars, you can use the <b>Visible</b> property of the <b>CommandBar</b> object in Visual Basic code or the <b>ShowToolbar</b> action in macros to hide and show the toolbars.</li>
<li>
If you want your application to display only custom toolbars, you can hide all built-in toolbars by clicking the <b>Startup</b> command (<b>Tools</b> menu) and clearing the <b>Allow Built-in Toolbars</b> check box.</li>
</ul>
<h5>Example</h5>
<h5>Attaching a Custom Toolbar to a Form</h5>
<p>
When using the Orders application, Northwind sales representatives want to click a button on the toolbar to print the invoice for the current order. You can create a custom toolbar for the Orders form with a button that prints invoices, and use the custom toolbar instead of the built-in toolbar.</p>
<p>
Step One: Create the custom toolbar   Create a custom toolbar for the Orders form that includes a button that runs the PrintInvoice macro, as well as any other commands you want to provide, such as the <b>Cut</b>, <b>Copy</b>, and <b>Paste</b> commands in the <b>Edit</b> category of the <b>Customize</b> dialog box (<b>View</b> menu, <b>Toolbars</b> submenu). Name this toolbar Orders Form Toolbar.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The custom toolbar attached to the Orders form in the Orders sample application includes a Design View button. You can use this button to easily switch between Form view and Design view while you’re looking at the sample application. However, if you don’t want users to switch to Design view in your own application, don’t put the Design View button on your custom toolbars.</p>
<p>
Step Two: Set the form’s Toolbar property to the name of the custom toolbar   Open the Orders form in Design view, open the property sheet for the form, and then enter <b>Orders Form Toolbar</b> in the <b>Toolbar </b>property box.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;There is no need to create event procedures for the Activate and Deactivate events of the form to show and hide toolbars as was required in previous versions of Microsoft Access. Setting the <b>Toolbar</b> property to a custom toolbar automatically hides the built-in Form View toolbar when your form is opened, and hides your custom toolbar when a user closes the form or switches to another form.</p>
<h4>Preventing Users from Customizing Your Application’s Command Bars</h4>
<p>
You can control whether users can add or remove commands on all of the menus and toolbars in your application.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To prevent users from customizing all command bars in an application</b>
<ol>
<li>
On the <b>Tools</b> menu, click <b>Startup</b>.</li>
<li>
In the <b>Startup</b> dialog box, clear the <b>Allow Toolbar/Menu Changes</b> check box.</li>
<li>
Click <b>OK</b>.<p>
The next time your application starts, users won’t be able to add or delete menu or toolbar commands. However, users will still be able to move and resize toolbars.</p>
</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you want to prevent users from customizing an individual command bar, you can clear the <b>Allow Customizing</b> check box in the <b>Toolbar Properties</b> dialog box. For more information, see “Creating New Command Bars and Setting Their Properties” earlier in this chapter.</p>
<h3>Working with Command Bars in Code</h3>
<p>
You can work with menu bars, toolbars, and shortcut menus in Visual Basic code by using the properties and methods of the <b>CommandBars</b> collection and the objects associated with it. In the command bars object model, each menu is a <b>CommandBar</b> object. This is true of menus and submenus on all three types of command bars. For example, to refer to the <b>Tools</b> menu on the standard menu bar, use the following statement:</p>
<pre><code>CommandBars!Tools
</code></pre>
<p>
The following code uses the <b>Add</b> method and several command bar control properties to add a new, hidden Print Invoice command to the bottom of the <b>Tools</b> menu.</p>
<pre><code>Private Sub AddInvoiceCommand()
&#09;Dim cb As CommandBar, ctl As CommandBarControl

&#09;' Set a reference to the Tools menu.
&#09;Set cb = CommandBars!Tools

&#09;' Create new CommandBarControl object on the Tools menu
&#09;' and set a reference to it.
&#09;Set ctl = cb.Controls.Add(Type:=msoControlButton)

&#09;' Set properties of the new command.
&#09;With ctl
&#09;&#09;.BeginGroup = True 
&#09;&#09;.Caption = &quot;Pri&amp;nt Invoice&quot;
&#09;&#09;.FaceID = 0
&#09;&#09;.OnAction = &quot;=PrintInvoice()&quot;
&#09;&#09;.Visible = False
&#09;End With
End Sub
</code></pre>
<p>
You refer to a command bar control by name within a command bar’s <b>Controls</b> collection. You must use the exact case and characters specified for the command’s <b>Caption</b> property, but you can omit the ampersand (&amp;) that designates the command’s access key. For example, to use the <b>Execute</b> method to carry out the <b>Options</b> command on the <b>Tools</b> menu, you use the following statement:</p>
<pre><code>CommandBars!Tools.Controls![Options...].Execute
</code></pre>
<p>
To refer to a command on a submenu, you refer to the submenu as a member of the <b>Controls</b> collection of the menu that contains it. For example, to use the <b>Execute</b> method to carry out the <b>Add-in Manager</b> command on the <b>Add-ins</b> submenu, which is on the <b>Tools</b> menu, you use the following statement:</p>
<pre><code>CommandBars!Tools.Controls![Add-ins].Controls![Add-in Manager].Execute
</code></pre>
<p>
The following code makes the hidden Print Invoice command created with the AddInvoiceCommand <b>Sub</b> procedure visible.</p>
<pre><code>Private Sub ShowInvoiceCommand()
&#09;Dim cb As CommandBar, ctl As CommandBarControl

&#09;' Set a reference to the Tools menu.
&#09;Set cb = CommandBars!Tools

&#09;' Set a reference to the control.
&#09;Set ctl = cb.Controls![Print Invoice]

&#09;' Make the control visible.
&#09;ctl.Visible = True
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on how to write and use Visual Basic functions, see Chapter 2, <a href="introducingvisualbasic.htm">“Introducing Visual Basic.”</a> For more information on using Visual Basic to work with command bars, see “Microsoft Office Objects” and “Working with CommandBar Objects” in Chapter 5, “Working with Objects and Collections,” or search the Help index for “command bars.” For information on command bar control properties, see “Setting Properties for Command Bar Controls” earlier in this chapter. For more examples of using Visual Basic to work with command bars, see the CommandBarsForm form and the modCommandBarCode module in the Developer Solutions sample application (Solutions.mdb), located in the Samples subfolder of your Office folder. For additional tips and tricks on using Visual Basic to work with command bars, see “Command Bars: Tips and Tricks” which is available on the World Wide Web at http://www.microsoft.com/accessdev/accwhite/cmdbartt.htm.</p>
</FONT></FONT></BODY>
</HTML>

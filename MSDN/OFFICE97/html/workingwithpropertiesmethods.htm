<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Properties and Methods</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="workingwithpropertiesmethods"></a>Working with Properties and Methods</h2>
<p>
To describe an object’s characteristics, you use its properties. You can set properties to change their values, or read properties to get information about the object. To control how an object behaves, you use its methods. An object’s methods determine what operations you can perform on that object.</p>
<p>
Because a collection is also an object, each collection in Microsoft Access has its own properties and methods. You can set or read the properties of a collection, or apply its methods, in the same manner that you would for any object.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on the properties and methods an object supports, search the Help index for the name of the object. You can also search the Help index for the name of a property or method.</p>
<h3>Setting and Reading Properties</h3>
<p>
Visual Basic provides a standard syntax for setting and reading properties in code. When you set a property, you give it a new value. You can use the following syntax to set a property for any type of object:</p>
<p>
<i>object</i><b>.</b><i>property</i> <b>=</b> <i>setting</i></p>
<p>
The following line of code sets the <b>Caption </b>property of the Employees form:</p>
<pre><code>Forms!Employees.Caption = &quot;Employees Form&quot;
</code></pre>
<p>
When you read the value of a property, you determine its current value. In order to read the property, you can assign its value to a variable or to another property, or you can display it in the Debug window, in a dialog box, or in a control on a form or report. The following example assigns the value of the <b>Caption </b>property to a variable and then displays the value of that property in a dialog box.</p>
<pre><code>Dim strCaption As String

strCaption = Forms!Employees.Caption
MsgBox strCaption
</code></pre>
<h3>Properties That Return Objects</h3>
<p>
Sometimes you may want your code to refer to whatever object happens to be in a particular state at the time a procedure is running, rather than to a specific object. Writing code in this way can make your application more flexible. For instance, you may want to change the caption of the active form, without knowing the form’s name. Or you may want to hide the control that has just lost the focus.</p>
<p>
Rather than determining an object’s characteristics, some properties of an object represent another object that is related in some way. These properties return an object reference that you can work with directly or assign to an object variable, just as you would any object reference. The following table lists several properties that return objects.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Applies to</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Returns a reference to</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ActiveControl</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Screen</b>, <b>Form</b>, or <b>Report</b> object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Control</b> object that has the focus.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ActiveForm</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Screen </b>object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form</b> object that has the focus or that contains the control with the focus.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ActiveReport</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Screen </b>object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Report</b> object that has the focus or that contains the control with the focus.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Application</b></td>
<TD>
Numerous objects</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
The active Microsoft Access <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Application </b>object.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">DBEngine</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Application</b> object</td>
<TD>
The current <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">DBEngine </b>object.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form</b></td>
<TD>
Subform <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Control </b>object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form</b> object associated with the subform control.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Me</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form </b>or <b>Report </b>object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form</b> or <b>Report</b> object in which code is currently running.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Module</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form </b>or <b>Report </b>object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Module</b> object associated with a <b>Form</b> or <b>Report</b> object.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Parent</b></td>
<TD>
Numerous objects</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
The object or collection that contains an object.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">PreviousControl</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Screen </b>object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Control </b>object that had the focus immediately before the currently active control.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">RecordsetClone</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form </b>object</td>
<TD>
A clone of the form’s underlying recordset. </td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Report</b></td>
<TD>
Subreport <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Control </b>object</td>
<TD>
The <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Report </b>object associated with the subreport control.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Section</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Form</b>, <b>Report</b>, or<b> Control</b> object</td>
<TD>
A section on a form or report.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on properties that return objects, search the Help index for the specific property name.</p>
<h4>The Section Property</h4>
<p>
The <b>Section</b> property returns a reference to a section of a form or report. For example, you can use the <b>Section</b> property to return a reference to the detail section of a form. Once you’ve returned a reference to a section, you can set the section’s properties. The following example uses the <b>Section</b> property to set a property of the detail section on an Employees form.</p>
<pre><code>Forms!Employees.Section(acDetail).Visible = False
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on setting properties of sections, search the Help index for “Section<b> </b>property.”</p>
<h4>The Me Property</h4>
<p>
The <b>Me </b>property returns an object reference to the <b>Form</b> or <b>Report</b> object in which the code is currently running. You can use the <b>Me </b>property to refer to a <b>Form</b> or <b>Report</b> object from within that object, without needing to know the name of the form or report. You can also use it to pass a <b>Form</b> or <b>Report</b> object to a procedure that takes an argument of type <b>Form</b> or <b>Report</b>.</p>
<p>
For example, the following code uses the <b>Me </b>property to return a reference to the Employees form, the form in which the code is running. It then passes this reference to the ChangeDetailColor procedure which it calls when the form’s Current event occurs. It also uses the <b>Me </b>property to return references to the Employees form in order to set a property and to return the values of the FirstName and LastName controls on the form. Note that the <b>.</b> (dot) operator is used to set the property, and the<b> ! </b>operator is used to refer to the controls on the form.</p>
<pre><code>' Place this procedure in a standard module.
Sub ChangeDetailColor(frm As Form)
 &#09;frm.Section(acDetail).BackColor = RGB(Rnd * 256, Rnd * 256, Rnd * 256)
End Sub

' Place this procedure in the form module associated with the Employees form.
Private Sub Form_Current()
 &#09;ChangeDetailColor Me
 &#09;Me.Caption = Me!FirstName.Value &amp; &quot; &quot; &amp; Me!LastName.Value
End Sub
</code></pre>
<p>
In most cases, the form or report represented by the <b>Me</b> property is the same form or report represented by the <b>ActiveForm</b> or <b>ActiveReport</b> property of the <b>Screen</b> object. However, the <b>ActiveForm</b> and <b>ActiveReport</b> properties represent the active form or report, whereas the <b>Me</b> property represents the form or report in which the code is running. For example, a Timer event can occur on a form called Customers, even if the Customers form isn’t active. In a Timer event procedure for the Customers form, <code>Screen.ActiveForm</code> represents the active form, whatever it is, and <b>Me</b> always represents the Customers form.</p>
<h3>Using Methods</h3>
<p>
Methods are built-in operations that you can perform on an object. There are two kinds of methods: those that return a value or an object, as a function does, and those that perform a specific operation, as a statement does. To apply a method to an object, you use the following syntax:</p>
<p>
<i>object</i><b>.</b><i>method</i> [[(] <i>arg1</i>, <i>arg2</i>...[)]]</p>
<p>
Many methods take one or more <i>arguments</i>. An argument provides the method with additional information for its operation. If the method returns a value or an object, you must enclose its argument list in parentheses; otherwise you should omit the parentheses.</p>
<p>
The following example shows the syntax for several different methods. The <b>OpenRecordset </b>method creates a new <b>Recordset </b>object and returns a reference to the new object. You can assign this object reference to an object variable by using the <b>Set </b>statement. Because the <b>OpenRecordset </b>method returns a value, you must enclose its arguments in parentheses. The <b>FindFirst </b>method, on the other hand, doesn’t return a value. It simply sets the current record pointer to the first record that matches the criteria given in the <b>FindFirst </b>argument. Since this method doesn’t return a value, you don’t need to enclose its arguments in parentheses. The same is true for the <b>Print </b>method of the <b>Debug </b>object. Finally, the <b>Close </b>method of the <b>Recordset </b>object doesn’t take any arguments.</p>
<pre><code>Sub FindEmployee()

 &#09;Dim dbs As Database, rst As Recordset
 &#09;
 &#09;Set dbs = CurrentDb

&#09;' Requires parentheses.
 &#09;Set rst = dbs.OpenRecordset(&quot;Employees&quot;, dbOpenDynaset)

 &#09;rst.FindFirst &quot;[HireDate] &gt;= #1-1-93#&quot;&#09;&#09;' No parentheses needed.
 &#09;Debug.Print rst!LastName&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;' No parentheses needed.
&#09;rst.Close&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Doesn't take arguments.
&#09;Set dbs = Nothing
End Sub
</code></pre>
<h3>Performing Multiple Actions on an Object</h3>
<p>
You’ll often need to perform several different actions on the same object. For example, you may need to set several properties for the same object within a single procedure. Instead of using many separate statements to do this, you can use the <b>With...End With</b> statement. The following example uses the <b>With...End With </b>statement to set several properties for a command button named HelpButton in a form’s Load event.</p>
<pre><code>Private Sub Form_Load()
&#09;With Me!HelpButton
&#09;&#09;.Caption = &quot;Help&quot;
&#09;&#09;.Visible = True
&#09;&#09;.Top = 200
&#09;&#09;.Left = 5000
&#09;&#09;.Enabled = True
&#09;End With
End Sub
</code></pre>
</FONT></FONT></BODY>
</HTML>

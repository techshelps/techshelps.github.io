<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Events</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Events</H2><P CLASS="t">An <I>event</I> is an action that is recognized by an object. In Microsoft Excel 5/95 VBA, there were few events available to the programmer. For instance, most controls responded to only a single event (the OnAction event) which allowed you&nbsp;to specify the procedure that would run when the user selected the control or&nbsp;in some cases typed a character in an edit box.</P>
<P CLASS="t">Microsoft Excel&nbsp;97 VBA is a highly <I>event-driven</I> programming environment. Worksheets, Workbooks, UserForms, and Controls now respond to a wide variety of events. Placing VBA code inside the procedures triggered by various events allows your program to respond to those events.</P>
<P CLASS="t">In Microsoft Excel 5/95, for example, if you wanted to take some action when a workbook was saved by the user, you had to explicitly trap all of the methods by which the user could save the workbook. This included replacing the Save entry on the File menu, the Save toolbar button, and all the different keyboard shortcuts that could be used to save a file (Ctrl+S and Ctrl+F12 among others). This doesn't include trapping the Save As menu command and keyboard shortcuts, trapping custom toolbars and menus, or other keyboard remappings; it is very difficult to trap every possible save method.</P>
<P CLASS="t">In Microsoft Excel&nbsp;97, however, the Workbook object has a BeforeSave event. Code placed within the procedure for this event will run automatically when the workbook is saved by any means, including programmatically, allowing you to respond to all workbook saves in a single location.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">You may encounter situations in which you need to run code inside an event procedure conditionally, based upon whether the event was fired from the user interface or from some action taken by another procedure in your program. To accomplish this, you can add a new property to the object that owns the event in&nbsp;question, by adding a publicly declared variable to its module. Within a workbook's BeforeSave event, for instance, if you want to run code conditionally based upon whether the user is saving the workbook or your code is saving the workbook, you could do it in the following manner.</P>

<pre><code><FONT FACE="Courier" SIZE="2">Public CodeSaved As Boolean

Private Sub Workbook_Open()
    CodeSaved = False
End Sub

Private Sub Workbook_BeforeSave(ByVal _
    SaveAsUI As Boolean, Cancel As Boolean)
    If CodeSaved Then
        MsgBox "Called from code."
        CodeSaved = False
    Else
        MsgBox "Called from UI."
    End If
End Sub
</FONT></code></pre>
<P CLASS="t">The declaration and event procedure shown above would go into the workbook's Object Module. When you save the workbook from another procedure in your program, you would first set the CodeSaved property of the workbook to True and&nbsp;then call the Save method of the workbook.</P>

<pre><code><FONT FACE="Courier" SIZE="2">Sub SaveBook()
    wkbBook.CodeSaved = True
    wkbBook.Save
End Sub
</FONT></code></pre>
<P CLASS="t">If the SaveBook procedure will be used in a different project than the one that contains wkbBook, you must establish a reference from that project to the one containing wkbBook.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec0"></A>Working with Events</H3><P CLASS="t">At the top of the code window of the Object Module for each of the objects that respond to events, there are two drop-downs. The left drop-down contains an object list, while the right one contains a list of event procedures for the selected object. To add code for an object's event procedure, simply choose that object from the left-hand drop-down and choose the event procedure from the right-hand drop-down. An event procedure, to which you can add your custom code, will be automatically generated by VBA. The following figure shows the Object module for a Worksheet with some of the available events in the drop-down.</P>
<P CLASS="a">    <img src="CH1_02.gif"></P>
<P CLASS="t">Selecting an object in the VBE Project Window and clicking the View Code button at the top of this window will display the Object Module for the object. Object Modules for all objects other than UserForms can also be accessed by simply double-clicking that object in the VBE Project Window.</P>
<P CLASS="t">Double-clicking a UserForm in the VBE Project Window displays the UserForm itself. Double-clicking anywhere on a displayed UserForm brings up its Object Module and displays the default event procedure for the object that was double-clicked.</P>
<P CLASS="t">Many other objects respond to events in a similar fashion to that described above. Check the online Help for more details.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec1"></A>The AddinInstall and AddinUninstall Events</H3><P CLASS="t">Microsoft Excel&nbsp;97 has added two new events, AddinInstall and AddinUninstall, which are fired when the user adds or removes an add-in using the Tools/Addins dialog box. The AddinInstall event should be used to make any modifications to the user interface that the add-in requires. Conversely, the AddinUninstall should be used to remove any modifications to the Microsoft Excel environment made by&nbsp;the add-in.</P></FONT>
</FONT></BODY></HTML>

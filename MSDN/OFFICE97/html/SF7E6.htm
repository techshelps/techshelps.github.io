<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating DLL Files in C</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Creating DLL Files in C </H1><P CLASS="t">The Microsoft Windows DLL examples in this chapter were prepared and tested with Microsoft Windows 95 and Windows NT Workstation 4.0 (SP2) using Microsoft Visual C++, version 4.2b. If you use&nbsp;another compiler, you may also need the Microsoft Win32 SDK.</P>
<P CLASS="t">Creating a Microsoft Windows DLL with Visual C++ is very simple. When you&nbsp;create a new project for your DLL, select "Dynamic-Link library" from the list of&nbsp;project types in the New Project Workspace dialog. For more information, select the Search command from the Help menu and search for the topic "DLL Creation."</P>
<P CLASS="t">When you create a simple DLL with Visual C++, you do not need to write a DllMain function. However, if your DLL must perform some action when it is initialized or unloaded, you will need to implement DllMain (the example DLL in Chapter 8 uses a DllMain function to initialize string byte counts when the DLL is first loaded).</P>
<H3 CLASS="h5"><A NAME="sec0"></A>A Simple Example</H3><P CLASS="t">The CIRCUM.MAK project in the SAMPLE\CIRCUM directory builds a simple Microsoft Windows DLL. The DLL contains a single exported function, called CalcCircum, which takes the radius of a circle as its argument and returns the circle's circumference.</P>

<pre><code><FONT FACE="Courier" SIZE="2">double * WINAPI CalcCircum (double *pdRadius)
{
    *pdRadius *= 6.283185308;
    
    return pdRadius;
}
</FONT></code></pre>
<P CLASS="t">Functions that will be called from Microsoft Excel in 32-bit Microsoft Windows should be declared as __stdcall. The example above uses the WINAPI typed for __stdcall, as well as the other Windows example code in this book.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">For more information about using this DLL, see the next section, "Calling the Function from Within Microsoft Excel." For information about calling a DLL from Visual Basic, see Chapter 5, "Using DLLs from Visual Basic."</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Turning Off Error Handling</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="turningofferrorhandling"></a>Turning Off Error Handling</h2>
<p>
Error traps that are enabled in a procedure are automatically disabled once the procedure is exited. However, you may want to turn off an error trap in a procedure while the code in that procedure is still running. To turn off an enabled error trap, use the <b>On Error GoTo 0</b> statement. After Visual Basic runs this statement, errors are detected but not trapped within the procedure. You can use the <b>On Error GoTo 0</b> statement to turn off error handling anywhere in a procedure , even within error-handling code.</p>
<p>
For example, the following <b>Sub</b> procedure accepts an SQL string value and performs an action query based on that text. The <b>On Error Resume Next</b> statement handles any errors generated by the first <b>Delete</b> method of the <b>QueryDefs </b>collection if, for example, TempQuery doesn’t exist. The <b>On Error GoTo 0</b> statement turns error handling off so that errors generated by any subsequent statements are revealed to the user.</p>
<pre><code>Sub PerformSQLQuery(strSQLText)
&#09;Dim dbs As Database, qdfSQLQuery As QueryDef

&#09;On Error Resume Next
&#09;Set dbs = DBEngine(0)(0)
&#09;dbs.QueryDefs.Delete &quot;TempQuery&quot;
&#09;dbs.QueryDefs.Refresh
&#09;On Error GoTo 0
&#09;Set qdfSQLQuery = dbs.CreateQueryDef(&quot;TempQuery&quot;, strSQLText)
&#09;qdfSQLQuery.Execute
&#09;qdfSQLQuery.Close
&#09;dbs.QueryDefs.Delete &quot;TempQuery&quot;
&#09;dbs.QueryDefs.Refresh
End Sub
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;An <b>On Error GoTo 0</b> statement turns off the most recently enabled error handler, not all error handlers. If you have an error handler for an entire procedure and also use inline error handling for a part of that same procedure, the <b>On Error GoTo 0</b> statement disables the <b>On Error Resume Next</b> statement and the procedure’s error handler is called once again.</p>
</FONT></FONT></BODY>
</HTML>

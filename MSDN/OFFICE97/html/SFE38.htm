<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use Global or Module Level Constants</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Use Global or Module Level Constants</H2><P CLASS="t">Store all values that you might need to change in global or module level constants. Then use the constant instead of the value in your code. If you need to&nbsp;change the value later, you can change it in one place and it will take effect throughout your program. Examples of this include:</P>
<UL><LI CLASS="ULI1">Paths used to access files.</LI><LI CLASS="ULI1">Messages displayed to your user.</LI><LI CLASS="ULI1">The names of other workbooks used in your add-in.</LI><LI CLASS="ULI1">Worksheet names used in your add-in.</LI><LI CLASS="ULI1">Add-in version number.</LI><LI CLASS="ULI1">Add-in title for message boxes.</LI><LI CLASS="ULI1">Starting range addresses for building report sheets.</LI></UL><P></P>
<P CLASS="t">Store all message strings as global constants in one location. This makes them very easy to modify and translate for international versions of your add-in. Error messages displayed to users should always be in global constants, as the wording of these messages often changes with feedback from users.</P>
<P CLASS="t">Don't assume that an object exists unless you've just created it yourself. When accessing objects that could have been potentially removed by the user, always check to see if they exist before attempting to use them. For example, the following subroutine checks to see if DataBook.xls is open before trying to use it:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Sub UseDataBook()
    Dim oBook As Workbook
    On Error Resume Next
        Set oBook = Workbooks("DataBook.xls")
    On Error GoTo ErrorHandler
    ''' The procedure ends here if no data book is found.
    If oBook Is Nothing Then Err.Raise _
        Number:= 999, Description:="Data book not found."
    ''' Continue processing using the oBook variable here.
    Exit Sub</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">ErrorHandler:
    MsgBox Err.Description, vbCritical, "My Add-in"
    ''' Do any necessary cleanup here...
End Sub
</FONT></code></pre></FONT>
</FONT></BODY></HTML>

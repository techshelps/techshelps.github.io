<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>In-Process vs. Cross-Process</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>In-Process vs. Cross-Process</H2><P CLASS="t">OLE Automation objects are instantiated in two different manners:  <I>in-process</I> and <I>cross-process</I>. An in-process Automation object is loaded as a DLL into the process space (the memory of the application) of the controller. This has a distinct performance advantage, since the controller and object are in the same process space and direct function calls may be made between them. However, there are some drawbacks. When loading servers in-process, each controller must load its own copy of the object. There is no sharing of objects between processes. When an object is in-process, a bug in the object can bring down both the controller and the object. Despite the pitfalls, in-process object communication is fastest and is typically the method you want to use.</P>
<P CLASS="t">Cross-process objects load in separate process spaces and use remote procedure calls (RPC) to communicate. There is a certain amount of overhead involved in cross-process RPC, and as a result this method is typically slower than the in-process implementation. It does, however, have the advantage of partitioning the processes, and it allows a single object to be shared by multiple controllers.</P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Why Use the Excel SDK?</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Why Use the Excel SDK?</H1><P CLASS="t">Microsoft Excel 97 offers a very fast, powerful and portable macro language for enhancing Microsoft Excel. You can create user-defined functions, write code that&nbsp;controls Microsoft Excel, and even create entire applications using Microsoft Excel as a platform. Prior to Microsoft Excel 5.0, the only choice for enhancing Microsoft Excel was the Microsoft Excel Macro Language (XLM). This language&nbsp;has fallen out of general use with the introduction of Visual Basic for&nbsp;Applications (VBA) in Microsoft Excel 5.0. Visual Basic for Applications brought a more understandable syntax, dimensioned variables, faster looping, enhanced debugging tools, and a host of programming enhancements found in Visual Basic.</P>
<P CLASS="t">This new power requires a programmer to use a more rigorous coding style. While&nbsp;sophisticated XLM code was frequently self-modifying, VBA code can not&nbsp;modify its source during execution. This presented new complexities and interesting trade-off decisions over when to use one versus the other. Virtually everything could be done in both languages, but certain operations frequently lent themselves to implementation in one language over the other. Because of the many advantages and improvements to VBA since version 5, these discussions have become overwhelmingly one sided toward the VBA camp and now XLM is supported primarily for backward compatibility.</P>
<P CLASS="t">In a similar vein, some operations are more easily implemented in a language other than the VBA provided by Microsoft Excel. Perhaps you already have a large base of code written in C or you feel that a truly compiled language would offer additional speed advantages as well as increased security. The Excel SDK was created just for you! When Excel 4.0 was released a new feature was included, the C API. The C API allowed the programmer to use a high-level, compiled language to extend Microsoft Excel's functionality. The C API allowed&nbsp;a programmer to:</P>
<UL><LI CLASS="ULI1">Create functions and commands in a high-level language such as C.</LI><LI CLASS="ULI1">Dynamically link and call functions between the macro language and a high-level language.</LI></UL><P></P>
<P CLASS="t">The C API was based upon the XLM language, and there was a one-to-one correspondence between the functions available in the C API and commands available in XLM. This allowed many developers to greatly extend the capabilities of Excel. With the introduction of VBA in Microsoft Excel 5.0, a second method for extending the functionality of Microsoft Excel via a high-level language was exposed. As it turns out, VBA is not a compiled component of the Excel EXE file. Instead, VBA is implemented as a DLL external to Microsoft Excel. This makes it available as a shared component for all members of the office&nbsp;suite as well as for members of the Office Compatible program.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">If VBA isn't internal to Microsoft Excel, how does it communicate with Microsoft Excel? While implementing VBA, the Microsoft Excel developers also&nbsp;implemented a new API for VBA to use to control Microsoft Excel. The API&nbsp;itself was accessed by a relatively new feature called OLE Automation. OLE2 allows an application called an <I>OLE Automation Controller</I> to control another application via a set of exposed methods and properties of an <I>OLE Automation Server</I>.</P></FONT>
</FONT></BODY></HTML>

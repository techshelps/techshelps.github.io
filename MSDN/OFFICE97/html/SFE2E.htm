<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Command Bars Object Model</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>The Command Bars Object Model</H2><P CLASS="t">In Microsoft Excel&nbsp;97, the CommandBars object model replaces both the Toolbars and MenuBars object models from Microsoft Excel 5/95. This allows you to combine text, buttons, or both on any of your menus or toolbars, giving you much&nbsp;greater flexibility than in previous versions of Microsoft Excel. Because Microsoft Excel still displays a command bar with menus and a set of command bars containing toolbar buttons, you generally want to follow the same interface design for your custom add-ins.</P>
<P CLASS="t">The following procedure demonstrates how to add a new menu item to the Tools menu of the Worksheet Menu Bar command bar:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Sub AddMenuItem()
    Dim oMenu As CommandBarPopup
    Dim oItem As CommandBarPopup
    Dim oSub1 As CommandBarButton
    Dim oSub2 As CommandBarButton   
    Set oMenu = CommandBars("Worksheet Menu Bar") _
        .Controls("Tools")
    Set oItem = oMenu.Controls.Add(Type:=msoControlPopup)
    oItem.Caption = "My Menu Item"
    Set oSub1 = oItem.Controls.Add(Type:=msoControlButton)
    oSub1.Caption = "Sub Menu 1"
    oSub1.OnAction = ThisWorkbook.Name &amp; "!Proc1"
    Set oSub2 = oItem.Controls.Add(Type:=msoControlButton)
    oSub2.Caption = "Sub Menu 2"
    oSub2.OnAction = ThisWorkbook.Name &amp; "!Proc2"
End Sub
</FONT></code></pre>
<P CLASS="t">The Menu Editor is no longer available in Microsoft Excel&nbsp;97. All modifications to existing command bar menus must be made programmatically. You can also create your own custom command bars and attach them to a specific project. These command bars can include both menus and tools, and your code can hide or&nbsp;display the built-in command bars as needed.</P>
<P CLASS="t">Attaching custom command bars is handled via the Tools/Customize menu. You'll find the Attach button on the Toolbars tab. Beyond the first time the workbook is opened on a particular machine, the custom command bar will not hide or show itself automatically. The custom command bar will be available to all other workbooks unless your code explicitly controls its visibility.</P>
<P></P>
<P></P>
<P></P></FONT>
</FONT></BODY></HTML>

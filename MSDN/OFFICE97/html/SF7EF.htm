<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The XLOPER Data Type</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>The XLOPER Data Type </H1><P CLASS="t">Microsoft Excel is <I>polymorphic.</I> Cells can hold many different types of values: strings, numbers, arrays, error values, or logical values. Internally, this is accomplished by using a special, 10-byte data type called an XLOPER. Every XLOPER has 2 bytes that indicate the type of data and 8 bytes that indicate the actual data. The 8 bytes are used differently, depending on the data type — sometimes they contain a pointer to data that is stored elsewhere.</P>
<P></P>
<P></P>
<P></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Although the actual size of an XLOPER is 10 bytes, the effective size may&nbsp;vary depending upon the operating system. C compilers and/or CPUs are frequently more efficient when structures are aligned on fixed byte boundaries. Under Win16 the preferred alignment is 2 bytes, and the effective size remains 10&nbsp;bytes. Under Win32 the preferred alignment is 8 bytes. The best way to handle this is to set the Struct Member Alignment to 8 bytes. This is the default value in&nbsp;Microsoft Visual&nbsp;C++. This increases the effective size of an XLOPER to 16&nbsp;bytes under Win32.</P>
<P></P>
<P CLASS="a">    <img src="CH07_07.gif"></P>
<P CLASS="t">There are 12 different types of XLOPERs. You specify a type by entering a <I>type constant</I> in the <I>xltype</I> field of the XLOPER. The type constants are defined for you in XLCALL.H and are listed in the following table.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="50pt" VALIGN="TOP"><COL WIDTH="229pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Type constant</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>xltype</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Type of value</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P>
<P CLASS="tr"></P></FONT></TD><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeNum</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0001</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Numeric (IEEE floating-point)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeStr</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0002</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">String (byte-counted)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeBool</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0004</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Logical (TRUE or FALSE)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeRef</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0008</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">General reference (external and/or disjoint)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeErr</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0010</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Error</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeFlow</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0020</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Flow control in a macro</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeMulti</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0040</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Array</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeMissing</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0080</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Missing argument in a function call</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeNil</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0100</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">None (for example, an empty cell)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeSRef</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0400</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Single rectangular reference to current sheet</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeInt</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0800</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Integer (rarely used; use xltypeNum)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xltypeBigData</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">0x0802</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Persistent data storage</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<P></P>
<P></P>
<P CLASS="h">The file XLCALL.H contains the definition of the XLOPER structure. In Windows, the definition appears as follows:</P>

<pre><code><FONT FACE="Courier" SIZE="2">typedef struct xloper 
{
    union 
    {
        double num;                    /* xltypeNum */
        LPSTR str;                    /* xltypeStr */
        WORD bool;                    /* xltypeBool */
        WORD err;                    /* xltypeErr */
        short int w;                    /* xltypeInt */
        struct 
        {
            WORD count;                /* always = 1 */
            XLREF ref;
        } sref;                        /* xltypeSRef */
        struct 
        {
            XLMREF *lpmref;
            DWORD idSheet;
        } mref;                        /* xltypeRef */
        struct 
        {
            struct xloper *lparray;
            WORD rows;
            WORD columns;
        } array;                        /* xltypeMulti */
        struct 
        {
            union
            {
                short int level;        /* xlflowRestart */
                short int tbctrl;    /* xlflowPause */
                DWORD idSheet;        /* xlflowGoto */
            } valflow;
            WORD rw;                    /* xlflowGoto */
            BYTE col;                /* xlflowGoto */
            BYTE xlflow;
        } flow;                        /* xltypeFlow */
        struct
        {
            union
            {
                 BYTE *lpbData;        /* data passed in */
                 HANDLE hdata;        /* data returned */
            } h;</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">            long cbData;
        } bigdata;                    /* xltypeBigData */
    } val;
    WORD xltype;
} XLOPER, *LPXLOPER;

typedef struct xlref 
{
    WORD rwFirst;
    WORD rwLast;
    BYTE colFirst;
    BYTE colLast;
} XLREF, *LPXLREF;

typedef struct xlmref 
{
    WORD count;
    XLREF reftbl[1];          /* actually reftbl[count] */
} XLMREF, *LPXLMREF;
</FONT></code></pre>
<H3><A NAME="sec0"></A>Types of XLOPERs</H3><P CLASS="t">Following are diagrams of the various types of XLOPERs.</P>
<P CLASS="a">    <img src="CH07_08.gif"></P>
<P CLASS="a">    <img src="CH07_09.gif"></P>
<P></P>
<P></P>
<P></P>
<P></P>
<P CLASS="wh"><B>Caution</B></P>
<P CLASS="nt">When you get string XLOPERs from Microsoft Excel, they are not always null-terminated! Do not attempt to pass them directly to C string-handling functions, such as strcpy(), that expect null-terminated strings.</P>
<P></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">Be sure to use an unsigned char or (BYTE) for the byte count. This is important, because otherwise it is possible to create negative string lengths. For example:</P>

<pre><code><FONT FACE="Courier" SIZE="2">LPSTR s;
WORD w;

w = s[0];         /* Bad */
w = (BYTE) s[0]; /* Good */
</FONT></code></pre>
<P></P>
<P CLASS="a">    <img src="CH07_10.gif"></P>
<P CLASS="a">    <img src="CH07_11.gif"></P>
<P></P>
<P></P>
<P></P>
<P CLASS="a">    <img src="CH07_12.gif"></P>
<P CLASS="a">    <img src="CH07_13.gif"></P>
<P CLASS="t">For more information, see "Advanced Flow Control in Macro Sheets" on page&nbsp;191.</P>
<P CLASS="a">    <img src="CH07_14.gif"></P>
<P></P>
<P></P>
<P></P>
<P CLASS="a">    <img src="CH07_15.gif"></P>
<P CLASS="a">    <img src="CH07_16.gif"></P>
<P CLASS="a">    <img src="CH07_17.gif"></P>
<P CLASS="a">    <img src="CH07_18.gif"></P>
<P></P>
<P></P>
<P></P>
<P CLASS="a">    <img src="CH07_19.gif"></P>
<H3><A NAME="sec1"></A>Examples of XLOPERs in C</H3><P CLASS="t">The following are some examples showing how to construct various types of&nbsp;XLOPERs in C. As a convention, XLOPER variable names start with a lowercase&nbsp;"x."</P>
<H4 CLASS="h4"><A NAME="sec2"></A>To construct an integer XLOPER with value 27</H4>
<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xInt;

xInt.xltype = xltypeInt;
xInt.val.w = 27;
</FONT></code></pre>
<H4 CLASS="h4"><A NAME="sec3"></A>To construct a numeric (floating-point) XLOPER with the value 3.141592654</H4>
<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xPi;

xPi.xltype = xltypeNum;
xPi.val.num = 3.141592654;
</FONT></code></pre>
<H4 CLASS="h4"><A NAME="sec4"></A>To construct an XLOPER containing the string "Excel String"</H4>
<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xStr;

xStr.xltype = xltypeStr;
xStr.val.str = (LPSTR)"\014Excel String";
/* Notice the octal byte count in front of the string. */
</FONT></code></pre>
<H4 CLASS="h4"><A NAME="sec5"></A>To construct an XLOPER containing the logical value TRUE</H4>
<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xBool;

xBool.xltype = xltypeBool;
xBool.val.bool = 1;</FONT></code></pre>
<P></P>
<P></P>
<P></P>
<H4 CLASS="h4"><A NAME="sec6"></A>To construct an XLOPER containing a zero divide (#DIV/0!) error</H4>
<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xZeroDivide;

xZeroDivide.xltype = xltypeErr;
xZeroDivide.val.err = xlerrDiv0;
</FONT></code></pre>
<H4 CLASS="h4"><A NAME="sec7"></A>To construct an XLOPER containing the array {1,2}</H4>
<pre><code><FONT FACE="Courier" SIZE="2">XLOPER rgx[2];
XLOPER xArray;

rgx[0].xltype = rgx[1].xltype = xltypeInt;
rgx[0].val.w = 1;
rgx[1].val.w = 2;
xArray.xltype = xltypeMulti;
xArray.val.array.lparray = (LPXLOPER) &amp;(rgx[0]);
xArray.val.array.rows = 1;
xArray.val.array.columns = 2;
</FONT></code></pre>
<H4 CLASS="h4"><A NAME="sec8"></A>To construct a bigdata XLOPER</H4>
<pre><code><FONT FACE="Courier" SIZE="2">XLOPER xData;

xData.xltype = xltypeBigData; 
xData.val.bigdata.h.lpbData = lpbData;        // pointer to the data
xData.val.bigdata.cbData = cbData;            // data length in bytes
</FONT></code></pre>
<P CLASS="t">For more information about using bigdata XLOPERs, see "Persistent Storage" on page 175.</P></FONT>
</FONT></BODY></HTML>

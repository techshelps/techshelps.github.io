<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Pop-up Forms and Dialog Boxes</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="usingpop-upformsdialogboxes"></a>Using Pop-up Forms and Dialog Boxes</h2>
<p>
You can use pop-up forms and dialog boxes in your application to:
<ul>
<li>
Display information to the user.</li>
<li>
Prompt the user for data needed by the application to continue.</li>
</ul>
<p>
A pop-up form stays on top of other open forms, even when another form is active. For example, the property sheet in form Design view is a pop-up form. Another example of a pop-up form is the ProductsPopup form in the Orders sample application, which is discussed earlier in this chapter.</p>
<p>
<img src="abac03_5.gif" border=0></p>
<p>
The ProductsPopup form is <i>modeless</i>, which means you can access other objects and menu commands in Microsoft Access while the form is open and make them active. In contrast, a <i>modal</i> pop-up form prevents you from accessing other Microsoft Access objects or menu commands until you close or hide the form. Use a modeless pop-up form when you want the user to be able to shift the focus between the pop-up form and other elements of the user interface without having to close the pop-up form. For example, use a modeless pop-up form if you want to be able to view information on the pop-up form while accessing menu commands and toolbar buttons.</p>
<p>
A familiar example of a modal pop-up form is a dialog box. For example, the PrintInvoiceDialog form is a dialog box in the Orders sample application that prompts the user to specify an order invoice to print.</p>
<p>
<img src="abac03_6.gif" border=0></p>
<p>
Use a dialog box (a modal pop-up form) when you want the user to close the dialog box or respond to its message before proceeding, such as when you collect information your application needs to complete an operation.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create a modeless pop-up form</b>
<ul>
<li>
Create the form and set its <b>PopUp</b> property to Yes (the default setting of the <b>Modal</b> property is No).</li>
</ul>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create a modal pop-up form (such as a dialog box)</b>
<ul>
<li>
Create the form and set its <b>PopUp</b> and <b>Modal</b> properties to Yes.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You use the <b>BorderStyle</b> property to set the style of the border for a pop-up form or dialog box. To display a dialog box with a typical thick border that has no <b>Minimize</b> and <b>Maximize</b> buttons, set the <b>BorderStyle</b> property to Dialog. For more information on the different border styles you can use, search the Help index for “BorderStyle property.” For information on the interaction between the <b>BorderStyle</b>, <b>MinMaxButtons</b>, and <b>ControlBox</b> properties when creating pop-up forms and dialog boxes, search the Help index for “pop-up forms.”</p>
<p>
You can also open any form as a dialog box by setting the <i>windowmode</i> argument of the <b>OpenForm</b> method to <b>acDialog</b> (or in a macro, by setting the Window Mode argument of the OpenForm action to Dialog). The following line of code opens a dialog box named FilterDialog:</p>
<pre><code>DoCmd.OpenForm &quot;FilterDialog&quot;, windowmode:=acDialog
</code></pre>
<p>
When you use this technique, Microsoft Access suspends execution of the code or macro until the dialog box form is hidden or closed.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <i>windowmode</i> argument of the <b>OpenForm</b> method or action, search the Help index for “OpenForm method” or “OpenForm action.”</p>
<p>
<img src="abac03_7.gif" border=0></p>
<p>
Tip   If you simply want to display a short message to the user or prompt the user for short text input, the easiest approach is to use a message box or input box instead of a pop-up form. For more information on displaying a message in a message box, see “Using a Message Box to Display a Message” later in this chapter. For more information on displaying an input box to prompt the user for text input, search the Help index for “InputBox function.”</p>
<h5>Example</h5>
<h5>Creating a Pop-up Form to Display Details About an Item in a Subform</h5>
<p>
The Orders form in the Orders sample application includes a command button named Details that opens a form showing details about the current product in the subform. </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on creating the Details command button, see the example “Customizing a Command Button That Opens a Form” earlier in this chapter.</p>
<p>
Because you want users to be able to continue filling out an order while answering customers’ questions about the product, you need the form opened by the Details button to stay on top of the Orders form.</p>
<p>
<img src="abac03_8.gif" border=0></p>
<p>
Step One: Create the pop-up form<b>   </b>Use the Form Wizard to create the pop-up form, specifying the product, supplier, and category information you want to display. Name the form ProductsPopup.</p>
<p>
Step Two: Set the form’s properties<b>   </b>Open the form in Design view and set properties to make the form look and work like a dialog box. The following table shows the property settings for the form.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Comment</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">AllowDeletions</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Prevents users from deleting records.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">AllowAdditions</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Prevents users from adding new records.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">RecordsetType</b></td>
<TD>
Snapshot</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Prevents users from modifying product information on the form.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ScrollBars</b></td>
<TD>
Neither</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Because the form always shows one entire record, scroll bars aren’t needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">RecordSelectors</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">NavigationButtons</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">AutoCenter</b></td>
<TD>
Yes</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Centers the dialog box on the screen.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">PopUp</b></td>
<TD>
Yes</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Keeps the form on top.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Modal</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Allows users to work with other objects while the form is open.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">BorderStyle</b></td>
<TD>
Dialog</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Displays the form as a dialog box. </td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">MinMaxButtons</b></td>
<TD>
None</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ShortcutMenu</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Because users can’t edit data on this form, a shortcut menu isn’t needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Menu commands the user chooses when a pop-up form is open don’t apply to the pop-up form. For example, when the ProductsPopup form is open on top of the Orders form, menu commands can perform operations on the Orders form and its data, but they don’t affect the ProductsPopup form. A pop-up form can’t have a custom menu bar associated with it.</p>
<h3>Using a Custom Dialog Box to Collect Information</h3>
<p>
You use a dialog box in your application to display important messages or to collect information your application needs to complete an operation. Typically, the user responds to a dialog box by providing information and then closing the dialog box by clicking a command button labeled OK or Cancel. For dialog boxes that give the user more than one choice, you can use command buttons with captions that indicate what action each button takes.</p>
<p>
<img src="abac03_9.gif" border=0></p>
<p>
You can make your dialog box easier to use with the keyboard by specifying default and cancel buttons:
<ul>
<li>
The <i>default button</i> is chosen when the user presses ENTER without first clicking a different button. To specify the default button for a dialog box, set the button’s <b>Default</b> property to Yes in the property sheet (or to <b>True</b> in Visual Basic). Only one command button on a form can have its <b>Default</b> property set to Yes. It’s a good idea to choose a button that won’t cause a problem if the user presses ENTER by accident. For example, in a dialog box that deletes data, it’s safer to make the default button Cancel rather than OK.</li>
<li>
The <i>cancel button</i> is chosen when a user presses the ESC key without first clicking a different button. To specify the cancel button for a dialog box, set the command button’s <b>Cancel</b> property to Yes in the property sheet (or to <b>True</b> in Visual Basic). Only one command button on a form can have its <b>Cancel</b> property set to Yes.<p>
<img src="abac03_10.gif" border=0></p>
</li>
</ul>
<p>
Tip   When a user clicks a command button in a dialog box, you often want to hide the dialog box without closing it. That way, you can use the values entered in the dialog box to complete the actions the command button performs. To hide a dialog box, set the form’s <b>Visible</b> property to <b>False</b>. After your macro or event procedure has completed the actions that use the information from the dialog box, you can use the <b>Close</b> method or action to close the dialog box.</p>
<h5>Example</h5>
<h5>Creating a Dialog Box to Print Invoices</h5>
<p>
Northwind sales representatives frequently print an invoice for an order immediately after taking the order. You can create a dialog box to make it easier for the sales representatives to print the invoice.</p>
<p>
<img src="abac03_11.gif" border=0></p>
<p>
Users open the dialog box using a button on a custom toolbar attached to the Orders form.</p>
<p>
Step One: Create the query for the list box   If the list box will display values from more than one table, you must first create a query that displays the appropriate rows. Create a query called OrderList that includes three fields from the Customers and Orders tables, as shown in the following illustration.</p>
<p>
<img src="abac03_12.gif" border=0></p>
<p>
Step Two: Create the dialog box and the list box   Create a blank form and add an unbound list box to it using the List Box Wizard. Specify the OrderList query as the row source for the list box, and include all three fields as columns in the list box. Select OrderID as the list box’s bound column. Adjust the column widths so the data in all three columns is visible at the same time. The List Box Wizard creates the list box and sets its properties. The following table shows some of the properties for the list box in the Orders sample application.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">RowSourceType</b></td>
<TD>
Table/Query</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">RowSource</b></td>
<TD>
OrderList</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ColumnCount</b></td>
<TD>
3</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ColumnWidths</b></td>
<TD>
1.25 in;0.5 in;0.5 in. (3.18 cm;1.27 cm;1.27 cm)</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">BoundColumn</b></td>
<TD>
2</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Width</b></td>
<TD>
2.6 in. (6.6 cm)</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
Step Three: Create buttons for the dialog box   Add three command buttons to the form using the Command Button Wizard: a Preview button, a Print button, and a Cancel button. For the first button, tell the wizard that you want it to preview the Invoice report. Tell the wizard to display the text “Preview”—instead of a picture—on the button. Follow the same steps to create a Print button that prints the report and a Cancel button that closes the form.</p>
<p>
Step Four: Modify the event procedures that the wizard creates   When the user chooses to preview or print the report, you want to hide the dialog box before opening the report. Additionally, you want the report to print only the record the user selects in the dialog box.</p>
<p>
Open the event procedures for the Preview and Print buttons. In the procedures, hide the dialog box by setting its <b>Visible</b> property to <b>False</b>. To filter records in the report so only the selected record is included, pass the criteria identifying the record in the <i>wherecondition</i> argument of the <b>OpenReport</b> method.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on filtering records, see “Filtering and Sorting Data in Forms and Reports” later in this chapter.</p>
<p>
The event procedure for the Preview command button with the new lines of code is:</p>
<pre><code>Private Sub Preview_Click()
&#09;On Error GoTo Err_Print_Click

&#09;Dim strDocName As String
&#09;Dim strLinkCriteria As String

&#09;Me.Visible = False
&#09;strDocName = &quot;Invoice&quot;
&#09;strLinkCriteria = &quot;OrderID = &quot; &amp; OrderID
&#09;DoCmd.OpenReport strDocName, acViewPreview, , strLinkCriteria
&#09;&#09;.
&#09;&#09;.
&#09;&#09;.
End Sub
</code></pre>
<p>
The event procedure for the Print command button is identical, except that it passes the <b>acViewNormal</b> constant (instead of <b>acViewPreview</b>) to the <b>OpenReport</b> method.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you prefer, you can use macros instead of event procedures to make the dialog box work. In the macros for the Preview and Print buttons, use the SetValue action to set the dialog box’s <b>Visible</b> property to No, and use the OpenReport action to preview or print the report, setting the Where Condition argument as follows:</p>
<p>
OrderID = Forms!PrintInvoiceDialog!OrderID</p>
<p>
In the macro for the Cancel button, use the Close action to close the dialog box. In the macro for the list box’s DblClick event, use the RunMacro action to run the Preview button’s macro.</p>
<p>
Step Five: Set properties to make the form behave like a dialog box   <b>Set the form’s PopUp</b> and <b>Modal</b> properties to Yes, and then save the form with the name PrintInvoiceDialog.</p>
<p>
The following table shows some of the property settings for the form.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Comment</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ScrollBars</b></td>
<TD>
Neither</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">RecordSelectors</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">NavigationButtons</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">AutoCenter</b></td>
<TD>
Yes</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Centers the dialog box on the screen.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">PopUp</b></td>
<TD>
Yes</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Keeps the form on top.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Modal</b></td>
<TD>
Yes</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Prevents users from working with other objects while the dialog box is visible.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">BorderStyle</b></td>
<TD>
Dialog</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Displays the form with thick borders that can’t be resized and with no <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Minimize</b> or <b>Maximize</b> buttons. (This is the standard border style for a dialog box.)</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">MinMaxButtons</b></td>
<TD>
None</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">ShortcutMenu</b></td>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not needed.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
Step Six: Create the macro that opens the dialog box   Create a macro to open the dialog box. Add two actions to it: an OpenForm action that opens the PrintInvoiceDialog form, and a SetValue action that sets the OrderID list box on the form to the ID number of the current order on the Orders form. Save the macro with the settings as shown in the following illustration, and name it PrintInvoice.</p>
<p>
<img src="abac03_13.gif" border=0></p>
<p>
The arguments for the SetValue action are:</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Item</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
[Forms]![PrintInvoiceDialog]![OrderID]</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Expression</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
[Forms]![Orders]![OrderID]</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
Step Seven: Add a toolbar button to run the macro   Create a custom toolbar for the Orders form, and add a button that runs the PrintInvoice macro.</p>
<p>
<img src="abac03_14.gif" border=0></p>
<p>
When a user clicks the button, the macro opens the dialog box. If you want, you can also include the Print Invoice command on a custom menu bar for the form. To see an example of a custom menu bar, use the <b>Customize</b> dialog box (<b>View</b> menu, <b>Toolbars</b> submenu) to view the OrdersMenuBar toolbar in the Orders sample application.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on creating custom menus and toolbars, see Chapter 1, “Creating an Application.”</p>
<p>
<img src="abac03_15.gif" border=0></p>
<p>
Tip   To make the dialog box even easier to use, you can write an event procedure that lets users double-click an order in the list box to choose the order and the Preview button at the same time. To do this, write an event procedure for the list box’s DblClick event that calls the Preview command button’s Click event procedure, as follows:</p>
<pre><code>Private Sub OrderID_DblClick(Cancel As Integer)
&#09;Preview_Click
End Sub
</code></pre>
<h3>Using a Message Box to Display a Message</h3>
<p>
When you want to display a brief message such as an error, warning, or alert, you can use a predefined dialog box called a <i>message box</i>. You specify the message to display and when the message box is to appear. The following illustration shows a typical message box.</p>
<p>
<img src="abac03_16.gif" border=0></p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When a user has the Office Assistant displayed, message box information displays in a speech balloon associated with the Assistant. If the Office Assistant is hidden or wasn’t installed, a message box displays as a dialog box, as shown in the preceding illustration.</p>
<p>
You can use an action or a function to display a message box. The following table describes each method.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Use this</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To</b> </td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
MsgBox action</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Display a message in a message box using a macro.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">MsgBox</b> function</td>
<TD>
Display a message in a message box using Visual Basic. It can return a value to Visual Basic indicating which command button a user has clicked.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
To display the message box in the previous illustration using a macro, you add a MsgBox action to the macro and set the arguments as shown in the following table.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Argument</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Setting</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Message</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
The order is saved.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Beep</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Yes</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Type</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
None</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Title</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Save Order</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
To display the same message with Visual Basic, use the following code:</p>
<pre><code>MsgBox &quot;The order is saved.&quot;, , &quot;Save Order&quot;
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the MsgBox action or function, search the Help index for “MsgBox action” or “MsgBox function.”</p>
<h5>Displaying a Two-Line Message in a Message Box</h5>
<p>
You can display your message on two or more lines in a message box and specify where you want a new line to start. To do this when you’re using the <b>MsgBox</b> function in Visual Basic code, use the <b>vbCrLf</b> constant where you want the new line to start. The <b>vbCrLf</b> constant is equivalent to the concatenation of the special characters for a carriage return and line feed, Chr(13) and Chr(10).</p>
<p>
For example, to use the <b>MsgBox</b> function to display “New Product:” on one line and “Enter a 5-digit Product ID” on the next line, you use the following code:</p>
<pre><code>MsgBox &quot;New Product:&quot; &amp; vbCrLf &amp; &quot;Enter a 5-digit Product ID&quot;</code></pre>
<p>
However, when you’re using the MsgBox action in a macro, you must concatenate the special characters for carriage return and line feed into the message expression. For example, to produce the same result, you enter the following expression in the Message argument of a MsgBox action:</p>
<p>
= &quot;New Product: &quot; &amp; Chr(13) &amp; Chr(10) &amp; &quot;Enter a 5-digit Product ID&quot; </p>
</FONT></FONT></BODY>
</HTML>

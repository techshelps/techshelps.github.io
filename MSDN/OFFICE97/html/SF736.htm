<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Handling</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Error Handling</H1><P CLASS="t">As a general rule, you should always avoid having a user encounter a Microsoft Excel application error directly when running your add-in. While very helpful during the development process, these error messages tend to confuse nonexpert users. Instead, these errors should be trapped by error-handling code within your add-in and presented to the user in a friendlier manner. Your add-in should then exit or recover gracefully from the error. The bottom line is that a quality add-in will have very strong error handling. This requires care when creating the add-in and a healthy dose of third-party testing to verify your work. The following VBA error-handling features can assist to create a strong, user-friendly add-in.</P></FONT>
</FONT></BODY></HTML>

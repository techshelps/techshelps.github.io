<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Excel Specifics</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Microsoft Excel Specifics</H1><P CLASS="t">This section describes some differences between a generic implementation of an OLE Automation Controller and a controller specifically designed to work with Microsoft Excel.</P>
<H3 CLASS="h4"><A NAME="sec0"></A>IDispatch and IUnknown</H3><P CLASS="t">Because Microsoft Excel supports the IDispatch interface, your application does not need to get the IUnknown interface and then query Microsoft Excel for the IDispatch interface. You can use the CoCreateInstance function to directly access the IDispatch interface because you know Microsoft Excel supports IDispatch.</P>
<H3 CLASS="h4"><A NAME="sec1"></A>Passed-in Objects</H3><P CLASS="t">When Visual Basic in Microsoft Excel passes an object reference to your DLL function, the DLL can go directly to step 4 in the process shown in the section on Idispatch Step by Step and access the IDispatch interface directly from the object reference. The PropertyPut and PropertyGet examples in the following section show how this is done in a DLL.</P>
<H3 CLASS="h4"><A NAME="sec2"></A>Variant Data Types</H3><P CLASS="t">Visual Basic in Microsoft Excel does not support all the data types supported by the VARIANT structure. The following table shows the allowed data types and their value constants. Microsoft Excel never returns a variant with a data type not shown on this list.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="160pt" VALIGN="TOP"><COL WIDTH="187pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Data Type</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Variant Constant</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Boolean</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_BOOL</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Currency (scaled integer)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_CY</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Date</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_DATE</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Double (double-precision floating-point)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_R8</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Integer </P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_I2</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Long (long integer)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_I4</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Object</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_DISPATCH</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Single (single-precision floating-point)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_R4</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">String</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_BSTR</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Microsoft Excel coerces other data types into one of the supported data types.</P>
<P></P>
<P></P>
<P></P>
<H3 CLASS="h4"><A NAME="sec3"></A>Exception Handling</H3><P CLASS="t">When an error occurs during the execution of the IDispatch Invoke function, Microsoft Excel returns an error code or returns the DISP_E_EXCEPTION error and places information about the error in an EXCEPINFO structure. The error code in the exception info structure will be one of the trappable error values listed in the Visual Basic Help topic "Trappable Errors." When the exception info structure is filled in, your application is responsible for freeing the strings in the structure. A memory leak will result if you do not free the strings before reusing the structure or exiting the application.</P>
<P CLASS="t">The ShowException function discussed later in this chapter is an example of an error-handling function for an OLE Automation Controller. Notice that the Invoke function frees the exception-info strings before it returns.</P></FONT>
</FONT></BODY></HTML>

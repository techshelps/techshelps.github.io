<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Arrays</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Using Arrays</H1><P CLASS="t">OLE 2 provides a special data type for arrays passed from Visual Basic to a DLL. This data type, called a SAFEARRAY, allows both Visual Basic and the DLL to allocate, free, and access array data in a controlled way.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Your DLL should always use OLE Automation functions to allocate and access SAFEARRAYs. These functions are described in Chapter 6 in Volume 2 of the <I>OLE 2 Programmer's Reference.</I> When OLE Automation passes a SAFEARRAY to your DLL, you receive a pointer to a pointer to the array itself. Like BSTR pointers, a SAFEARRAY pointer may point to a NULL array if the array has been&nbsp;declared but not yet dimensioned:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Dim a() as Integer
</FONT></code></pre>
<P CLASS="t">The pointer itself will never be NULL, however.</P>
<P CLASS="t">The following example determines the upper and lower bounds of an array and then loops through the array producing the sum of the elements in the array:</P>

<pre><code><FONT FACE="Courier" SIZE="2">short WINAPI SumArray(
    LPSAFEARRAY *ppsa, long *plResult)
{
    short iElem;
    long lLb, lUb, l, lResult;

    if (*ppsa == NULL) // array has not been initialized
        return -4;

    if ((*ppsa)-&gt;cDims != 1)    // check number of dimensions
        return -5;

    // get the upper and lower bounds of the array

    if (FAILED(SafeArrayGetLBound(*ppsa, 1, &amp;lLb)) ||
            FAILED(SafeArrayGetUBound(*ppsa, 1, &amp;lUb)))
        return -1;
    
    // loop through the array and add the elements

    for (l = lLb, lResult = 0; l &lt;= lUb; l++) 
    {
        if (FAILED(SafeArrayGetElement(*ppsa, &amp;l, &amp;iElem)))
            return -2;
        lResult += iElem;
    }

    *plResult = lResult;
    return 0;
}
</FONT></code></pre>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Declared and called from Visual Basic:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Declare Function SumArray Lib "debug\ADVDLL.DLL" _
    (a() As Integer, r As Long) As Integer

Sub SumArrayTest()
    Dim n(5) As Integer
    Dim result As Long
    For i = 0 To 5
        n(i) = 2
    Next
    x = SumArray(n, result)
    MsgBox x &amp; ":" &amp; result
End Sub
</FONT></code></pre>
<P CLASS="t">Visual Basic does minimal type checking and enforcement on array element size.&nbsp;Because this function was declared as accepting only an array of integers, it&nbsp;is safe to use an integer element in the call to the SafeArrayGetElement function&nbsp;in the DLL. If the function was declared as accepting an array of any type, however, the Visual Basic code might pass an array of long values; in this case, the C-language function would produce incorrect results. If your DLL function must accept an array of any type, you should use an array of variants and&nbsp;check the variant type in the DLL.</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Monitoring Data in the Debug Window</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="monitoringdataindebugwindow"></a>Monitoring Data in the Debug Window</h2>
<p>
Many problems encountered while debugging can’t be traced to a single statement. You may need to monitor the behavior of a variable or expression while a procedure is running. Perhaps a problem occurs only when a variable or property contains a certain value or range of values. You may also find that a calculation isn’t producing the result you want.</p>
<p>
When execution is suspended, you can use the top half of the Debug window—either the Locals pane or the Watch pane—to examine the values of expressions and variables in the suspended code. The Locals pane automatically displays all the variables and objects in the current procedure, providing the easiest way to view local variable and property values. In the Watch pane, you can track variables across your entire application. </p>
<p>
For example, if you place a breakpoint in the DueDate function and then call the function, the breakpoint suspends execution. You can then examine the value of the function’s AnyDate argument in the Locals pane, as shown in the following illustration.</p>
<p>
<img src="abac07_12.gif" border=0></p>
<p>
Because the status box of the Debug window indicates the current module and the current procedure, if there is one, you always know which module and which procedure are current even if you switch between different Module windows.</p>
<h3>Viewing Objects in the Debug Window</h3>
<p>
The Debug window can display objects, such as forms or controls. When an event procedure is running, for example, details about the form or report it belongs to are available in the Locals pane of the Debug window. Additionally, if the current procedure contains object variables, their values appear in the Locals pane.</p>
<p>
The Debug window displays objects with a plus-sign symbol to the left of each object name. To <i>expand</i> an object—display all its members—click the plus sign. For example, clicking the plus sign next to a <b>Form</b> object displays the controls and properties of the form along with their current values. If any these members in turn are objects, such as controls on the form, they too have plus signs to indicate this.</p>
<p>
<img src="abac07_13.gif" border=0></p>
<p>
To <i>collapse</i> an object—hide all its members—click the minus sign to the left of the object name. By expanding and collapsing objects in the Debug window, you can explore as much or as little detail as you want.</p>
<h3>Using Watch Expressions to Monitor Data</h3>
<p>
You can monitor the value of a particular variable or expression by using a <i>watch expression</i>. A watch expression is a user-defined expression that you use to observe the behavior of a variable or expression in your code. While the Locals pane of the Debug window is the most convenient place to view values of variables and properties, watch expressions give you added flexibility. For example, you can enter any expressions you like—not only variables—and you can follow variables that aren’t local to the current procedure while you run through various procedures in your application.</p>
<p>
When the Debug window is active, the watch expressions that you have established appear in the Watch pane, where you can observe their values. Whenever code is running and a watch expression is in context (currently has a value), the Watch pane displays the value of the watch expression.</p>
<p>
You can also specify that execution of your code be suspended whenever a watch expression’s value changes or equals a specified value. For example, instead of using the <b>Step Into</b> command to progress through many iterations of a loop, you can use a watch expression to suspend the code when the loop counter reaches a certain number. You can also choose to suspend the execution of your code every time a specific variable changes value.</p>
<h4>Adding a Watch Expression</h4>
<p>
You can add a watch expression before running a procedure, or after execution has been suspended. To add a watch expression, click <b>Add Watch</b> on the <b>Debug</b> menu. The following figure illustrates how to use the <b>Add Watch</b> dialog box.</p>
<p>
<img src="abac07_14.gif" border=0></p>
<p>
You can also restrict the scope used to watch variables to a specific procedure, a specific module, or globally in the code. Visual Basic can evaluate a variable more quickly in a narrow context.</p>
<h4>Editing or Deleting a Watch Expression</h4>
<p>
You can edit or delete any watch expression you select in the Watch pane of the Debug window by clicking <b>Edit Watch</b> on the <b>Debug</b> menu. The <b>Edit Watch</b> dialog box looks just like the <b>Add Watch</b> dialog box, shown in the previous figure, with a <b>Delete</b> button added.</p>
<h4>Identifying Watch Types</h4>
<p>
To the left of each watch expression in the Watch pane of the Debug window is an icon that identifies the watch type. The icons for each of the three watch types are shown in the following figure.</p>
<p>
<img src="abac07_15.gif" border=0></p>
<h4>Using Quick Watch</h4>
<p>
<img src="abac07_16.gif" border=0></p>
<p>
While the execution of your code is suspended, you can use the <b>Quick Watch</b> command (<b>Debug</b> menu) to check the value of an expression that hasn’t been defined as a watch expression. You can also click the <b>Quick Watch</b> button on the toolbar to create a watch expression from text you’ve selected in the Module window. This brings up the box that appears in the following illustration.</p>
<p>
<img src="abac07_17.gif" border=0></p>
<p>
If Visual Basic cannot evaluate the expression that you have chosen, the <b>Add</b> button is not available.</p>
<h3>Assigning Values to Controls, Properties, and Variables</h3>
<p>
In addition to examining the values of variables and expressions, you can also use the Locals pane or the Watch pane to assign new values to controls, properties, and variables. This is useful when you are debugging; as you develop hypotheses about the cause of an error, you may want to test the effects of particular values.</p>
<p>
To change the value of a variable or property, locate the value in the Locals pane or the Watch pane, click the value in the Value column for the item you want to change, type the new value, and then press ENTER.</p>
<p>
<img src="abac07_18.gif" border=0></p>
<p>
You can also use the Immediate pane to set values. For example, you can type assignment statements such as:</p>
<pre><code>Forms!SalesReps!Title = &quot;Sales Executive&quot;
Forms!SalesReps!Title.Visible = False
intRows = 50
</code></pre>
<p>
After you change the values of one or more controls, properties, or variables, you can continue execution to see the results of your changes.</p>
</FONT></FONT></BODY>
</HTML>

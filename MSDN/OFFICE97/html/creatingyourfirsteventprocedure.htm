<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your First Event Procedure</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="creatingyourfirsteventprocedure"></a>Creating Your First Event Procedure</h2>
<p>
You write Visual Basic code in units called <i>procedures</i>. A procedure contains a series of Visual Basic statements that perform an operation or calculate a value. An <i>event</i> <i>procedure</i> is a procedure that runs in response to an event. This section shows you how to create a simple event procedure that makes a command button and a text box work together on a form. The following illustration provides an example of how this interface may appear to the user.</p>
<p>
<img src="abac02_2.gif" border=0></p>
<p>
<img src="abac02_3.gif" border=0></p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;This example assumes that you have control wizards turned off in the form’s Design view. To do this, make sure the <b>Control Wizards</b> tool in the toolbox is not pressed in.</p>
<p>
Because an event procedure is part of the design of the form or report that runs it, the first step is to create the form and add the controls. In this case, you create a form that isn’t based on a table or query and add a text box and a command button. Your code will refer to these controls by name, so it’s a good idea to set the <b>Name</b> property of each control on your form to something more descriptive than the default settings that Microsoft Access gives them. For example, Microsoft Access names the text box Text0 and the command button Command1. To be more descriptive, you could name the text box Message and the command button OK.</p>
<p>
<img src="abac02_4.gif" border=0></p>
<p>
<img src="abac02_5.gif" border=0></p>
<p>
Tip   When you name the tables, fields, and other objects in your database, keep in mind that you’ll use these names to refer to the objects elsewhere in your application. Although descriptive names for objects with spaces are easier to recognize than more compact names, they can be difficult to use in expressions, SQL statements, and Visual Basic code. Consider using short, consistent names that don’t contain spaces and are easy to remember and type—for example, field names such as LastName and Phone.</p>
<p>
After you’ve created your form and its controls and set their properties, you’re ready to write your first event procedure in the Module window.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To write the event procedure for the OK command button</b>
<ol>
<li>
In Design view, right-click the object (form, report, section, or control) for which you want to write an event procedure, in this case, the OK command button. On the shortcut menu, click <b>Build Event</b>.<p>
Microsoft Access displays the <b>Choose Builder</b> dialog box.</p>
</li>
<li>
In the list box, click <b>Code Builder</b>, and then click <b>OK</b>.<p>
Microsoft Access opens the Module window and creates a template for the default event procedure of the object you selected, in this case, the Click event procedure. (The <i>default </i>event procedure is the one for which Microsoft Access thinks you’re most likely to add code.) The template for the OK command button’s Click event procedure is shown in the following illustration.</p>
<p>
<img src="abac02_6.gif" border=0></p>
</li>
<li>
Enter the code for the event procedure between the <b>Sub</b> and <b>End Sub</b> statements. For the OK command button’s event procedure, enter the following code:<pre><code>Message = &quot;Hello, World!&quot;
</code></pre>
<p>
This line of code sets the Message text box to the text string, “Hello, World!”</p>
</li>
<li>
Save and close the module.<p>
When you save the module, Microsoft Access sets the command button’s <b>OnClick</b> event property to [Event Procedure], as shown in the following illustration.</p>
<p>
<img src="abac02_7.gif" border=0></p>
</li>
</ol>
<p>
Now that you’ve written the event procedure, you’re ready to run it. To do this, you make the event happen on the form.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To run the OK_Click event procedure</b></p>
<p>
<img src="abac02_8.gif" border=0>
<ol>
<li>
Click the <b>Form View</b> button on the toolbar to switch to Form view.</li>
<li>
Click <b>OK</b>.<p>
The event procedure runs and the text “Hello, World!” appears in the text box.</p>
</li>
</ol>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on events and event procedures, see Chapter 6, <a href="respondingtoevents.htm">“Responding to Events.”</a></p>
<h3>Working with a Form or Report Module</h3>
<p>
The “Hello, World!” example in the previous section shows you how to create a new event procedure by using the <b>Build Event</b> command on an object’s shortcut menu. In addition to this method, Microsoft Access provides a variety of other ways to open a form or report module and create or modify its event procedures. Note that a form or report doesn't have a module by default. A form or report without a module is called a <i>lightweight</i> object, and typically loads and displays faster than a form or report with a module. However, using the <b>Build Event</b> command or any of the following procedures automatically creates a form or report module.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To open a form or report and its module at the same time</b></p>
<p>
<img src="abac02_9.gif" border=0>
<ul>
<li>
In the Database window, select the form or report, and then click the <b>Code </b>button on the toolbar.<p>
Microsoft Access opens the form or report and its module. You can also use the <b>Code </b>button in a form or report’s Design view to open its module.</p>
</li>
</ul>
<p>
In the previous section, you learned how to open the default event procedure. You can create or open any event procedure directly from the property sheet.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create or open any event procedure</b>
<ol>
<li>
Open the form or report in Design view. </li>
<li>
Display the property sheet by right-clicking the form, report, section, or control, and then clicking <b>Properties</b> on the shortcut menu.</li>
<li>
In the property sheet, click the <b>Event</b> tab.</li>
<li>
Select the property box for the event procedure you want to open.<p>
<img src="abac02_10.gif" border=0></p>
</li>
<li>
Click the <b>Build</b> button to the right of the property box.<p>
If the event property already has an event procedure associated with it, Microsoft Access opens the Module window and displays the event procedure.</p>
<p>
If the event property is empty, Microsoft Access displays the <b>Choose Builder</b> dialog box. In the list box, click <b>Code Builder</b>, and then click <b>OK</b>. Microsoft Access opens the Module window and creates a template for the event procedure. If you don't want to see the <b>Choose Builder</b> dialog box, and always want to open the Module window by using an empty event property's <b>Build</b> button, you can select the <b>Always Use Event Procedures</b> check box on the <b>Forms/Reports</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu).</p>
</li>
</ol>
<h4>Writing and Editing Code</h4>
<p>
Editing the code in a module is much like editing text with any text editor. The blinking vertical line, or <i>insertion point</i>, marks the place on screen where you insert typed or pasted text. </p>
<p>
As you begin using the Module window, you can take advantage of the following features designed to help you write Visual Basic code efficiently:
<ul>
<li>
<b>Automatic statement building</b>   When you type certain Visual Basic elements, Microsoft Access automatically tries to assist you in writing code by displaying a drop-down list of appropriate choices for the code element you’ve typed. For example, if you type an object variable, and follow it with a period to indicate that you intend to enter a method or property, Microsoft Access automatically displays a list of the methods and properties that apply to the object. (You use <i>methods</i> to perform operations on an object. You use <i>properties</i> to determine or change characteristics of an object.)<p>
<img src="abac02_11.gif" border=0></p>
<p>
To complete the statement you’re typing, you can either double-click an item in the list or continue typing your code. If you continue typing code, the list displays the closest match to what you’ve typed. To enter the selected item in the list at any time, press TAB. To make the list disappear, press ESC.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can press ENTER to enter the selected item in the list. However, pressing ENTER also moves the cursor to the next line, so you’ll have to return to the line to enter any arguments or additional information.</p>
<p>
To use automatic statement building, select the <b>Auto List Members</b> check box on the <b>Module</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu).</p>
<p>
When the <b>Auto List Members</b> check box is selected, the statement-building lists appear automatically as you type. However, you may also want to explicitly cause Microsoft Access to display them, especially for lines of code you typed previously and want to edit. To display the list of methods and properties for an existing object, right-click the existing method or property name (to the right of the period) and then click <b>List Properties/Methods</b> on the shortcut menu.</p>
<p>
Some methods, functions, and properties take a constant as an argument. To display a list of available constants when you’re entering arguments for a method, right-click in the Module window where the constant setting would be entered and then click <b>List Constants</b> on the shortcut menu.</p>
<p>
If you’ve typed part of a property, method, or constant and want Microsoft Access to finish typing it for you, click <b>Complete Word</b> on the <b>Edit</b> menu.</p>
</li>
<li>
<b>Quick Info</b>   When you type a procedure or method name (followed by a space or an opening parenthesis), a tip automatically appears underneath the line of code you’re writing. The tip gives syntax information about the procedure, such as the arguments you need to type to use it.<p>
<img src="abac02_12.gif" border=0></p>
<p>
To display syntax tips, select the <b>Auto Quick Info</b> check box on the <b>Module</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu).</p>
<p>
In addition, you can view information on any variable, constant, or procedure in your code by right-clicking the item and then clicking <b>Quick Info</b> or <b>Parameter Info</b> on the shortcut menu.</p>
</li>
<li>
<b>Automatic syntax checking</b>   As you move the insertion point off a line, Visual Basic checks the syntax of that line and displays a message if it finds an error. To enable automatic syntax checking, select the <b>Auto Syntax Check</b> check box on the <b>Module</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu).</li>
<li>
<b>Drag and drop</b>   If you want to move code you’ve written from one place to another in a module or between windows, you don’t need to bother with the <b>Copy</b> and <b>Paste</b> commands. Just select the code you want to move, and then drag it to the new location.<p>
To enable drag-and-drop editing, select the <b>Drag-and-Drop Text Editing</b> check box on the <b>Module</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu).</p>
<p>
<img src="abac02_13.gif" border=0></p>
</li>
<li>
<b>Undo command</b>   Microsoft Access keeps track of the changes you make when editing code. By clicking the <b>Undo</b> button one or more times, you can reverse any changes you’ve made to a module since you opened it.</li>
</ul>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on these features, or for a list of keyboard shortcuts in the Module window, search the Help index for “Module window.”</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When several people are using the same database, they use separate versions of the forms, reports, and modules in the database. If one person changes code, the others must close and reopen the database in order to see those changes. More than one person can edit the same form, report, or module at the same time. If you attempt to save a form, report, or module that has already been changed by someone else, Microsoft Access warns you that the module has changed since you opened the database.</p>
<h4>Navigating Between Procedures</h4>
<p>
When you’re editing code in the Module window, you can move between procedures in the module by pressing CTRL+PAGE DOWN and CTRL+PAGE UP. In addition, by selecting objects and their procedures or events in the <b>Object</b> and <b>Procedure</b> boxes, you can go directly to a procedure or create a new procedure.
<ul>
<li>
<b>Object box</b>   Displays the name of the selected object. Click the arrow to the right of the <b>Object</b> box to display a list of all objects associated with the form or report, then click an object in the list to display its procedures or events in the <b>Procedure</b> box.</li>
<li>
<b>Procedure box</b>   When <b>(General)</b> appears in the <b>Object</b> box, the <b>Procedure</b> box displays the name of the current procedure. When an object name appears in the <b>Object</b> box, the <b>Procedure</b> box displays the name of the event for the current event procedure. Click the arrow to the right of the <b>Procedure</b> box to display all the events for an object. Events that have event procedures appear in bold in the list. In the following illustration, for example, the <b>Procedure</b> box displays a list of all the events for the OK command button, and the Click event appears in bold.<p>
<img src="abac02_14.gif" border=0></p>
</li>
</ul>
<p>
Although the Module window normally displays one procedure at a time, you can also view all the procedures in a module at once. To switch between Procedure view and Full Module view, click the <b>Procedure View</b> and <b>Full Module View</b> buttons in the lower-left corner of the Module window, as shown in the following illustration.</p>
<p>
<img src="abac02_15.gif" border=0></p>
<h4>Using Bookmarks</h4>
<p>
When working with a large application, it’s easy to lose your place as you move between modules and procedures. To keep track of portions of code that you’re working on, you can set a <i>bookmark</i> to mark your place. To set a bookmark on the current line of code, point to <b>Bookmarks</b> on the <b>Edit</b> menu, and then click <b>Bookmark</b>. A blue square in the left margin of the Module window indicates that your bookmark is set.</p>
<p>
<img src="abac02_16.gif" border=0></p>
<p>
To return to bookmarks in a module, point to <b>Bookmarks</b> on the <b>Edit</b> menu, and then click <b>Next Bookmark</b> or <b>Previous Bookmark</b>. To clear all bookmarks in all modules, click <b>Clear All Bookmarks</b> on the <b>Bookmarks</b> submenu.</p>
</FONT></FONT></BODY>
</HTML>

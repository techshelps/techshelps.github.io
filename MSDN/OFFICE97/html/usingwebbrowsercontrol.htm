<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the WebBrowser Control</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="usingwebbrowsercontrol"></a>Using the WebBrowser Control</h2>
<p>
The Microsoft WebBrowser control is an ActiveX control that you can use on your application’s forms to browse Web sites, view Web pages and other documents, and download data located on the Internet. The WebBrowser control is useful in situations where you don’t want to disrupt the work flow in your application by switching from Microsoft Access to a Web browser or other document-viewing application.</p>
<p>
The WebBrowser control can display any Web page that Microsoft Internet Explorer version 3.0 can display. For example, the WebBrowser control can display pages that include any of the following features:
<ul>
<li>
Standard HTML and HTML enhancements, such as floating frames and cascading style sheets</li>
<li>
Other ActiveX controls</li>
<li>
Most Netscape plug-ins</li>
<li>
Scripting, such as Microsoft Visual Basic Scripting Edition (VBScript) or JavaScript</li>
<li>
Java™ applets</li>
<li>
Multimedia content, such as video and audio playback</li>
<li>
Three-dimensional virtual worlds created with Virtual Reality Modeling Language (VRML)</li>
</ul>
<p>
In addition to opening Web pages, the WebBrowser control can open any ActiveX document, which includes most Microsoft Office documents. For example, if Microsoft Office is installed on a user’s computer, an application that uses the WebBrowser control can open and edit Microsoft Excel spreadsheets, Microsoft Word documents, and Microsoft PowerPoint presentations from within the control. Similarly, if Microsoft Excel Viewer, Microsoft Word Viewer, or Microsoft PowerPoint Viewer is installed, users can view those documents within the WebBrowser control.</p>
<p>
With the WebBrowser control, users of your application can browse sites on the World Wide Web, as well as folders on a local hard disk and on a local area network. Users can follow hyperlinks by clicking them or by typing a URL into a text box. Also, the WebBrowser control maintains a history list that users can browse through to view previously browsed sites, folders, and documents.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Additional ActiveX controls that you can use to work with content on the Internet or an intranet are available in Microsoft Office 97, Developer Edition.</p>
<h3>Adding the WebBrowser Control to a Form</h3>
<p>
Before you can add the WebBrowser control to a form, you must have Microsoft Internet Explorer version 3.0 or later installed.</p>
<p>
If you purchased Microsoft Office&nbsp;97 on CD-ROM, you can install Microsoft Internet Explorer version 3.01 by running Msie301.exe from the Iexplore subfolder in the ValuPack folder.</p>
<p>
If you purchased Microsoft Access 97 on floppy disks, or if you prefer to install from the Web, you can download and install the latest version of Microsoft Internet Explorer from http://www.microsoft.com/ie/download/.</p>
<p>
Once you have Microsoft Internet Explorer version 3.01 installed, the WebBrowser control is automatically registered and is available in form Design view.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To add the WebBrowser control to a form</b>
<ol>
<li>
Open the form in Design view.<p>
<img src="abac21_8.gif" border=0></p>
</li>
<li>
In the toolbox, click the <b>More Controls</b> tool.<p>
A menu appears that lists all the registered ActiveX controls in your system.</p>
</li>
<li>
On the menu of ActiveX controls, click <b>Microsoft WebBrowser Control</b>.</li>
<li>
On the form, click where you want to place the control.</li>
<li>
Move and size the control to the area you want to display.<p>
<img src="abac21_9.gif" border=0></p>
</li>
</ol>
<p>
Tip   If the WebBrowser control can’t display the full width or height of a Web page or document, it automatically displays scroll bars. However, in most cases, you should make the control wide enough to display the full width of a typical Web page so that users of your application don’t have to scroll horizontally.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;After you add a WebBrowser control to a form and save the form or display it in Form view, the control retains its original size even when you re-open the form in Design view and resize the control. To resize the control, delete the existing control, add a new control, and then resize the new control and set its properties before saving the form.</p>
<h3>Displaying Web Pages or Documents in the WebBrowser Control</h3>
<p>
To display a Web page or document in the WebBrowser control, use the <b>Navigate</b> method in Visual Basic. The syntax for the <b>Navigate</b> method is:</p>
<p>
<i>object</i>.<b>Navigate</b> <i>URL</i></p>
<p>
<i>Object</i> is either the name of the WebBrowser control on your form or an object variable that refers to it, and <i>URL</i> is a string expression that evaluates to a valid URL or path. <i>URL</i> can refer to a Web page or other content on the Internet or an intranet, as well as to an Office document, such as a Microsoft Word document.</p>
<p>
If <i>URL</i> refers to an Internet protocol and a location on the Internet, Microsoft Access must establish a connection before is can display the document. If the computer running your application is connected to a <i>proxy server</i> (a secure connection to the Internet through a LAN), or if it has a direct connection to the Internet, the WebBrowser control downloads and displays the Web page or other Internet content immediately. If the computer running your application uses a modem and dial-up connection to the Internet, and that connection hasn’t been established beforehand, the WebBrowser control initiates the connection. For example, if the user’s computer uses a modem and The Microsoft Network to connect to the Internet, the <b>Sign In</b> dialog box is displayed to establish the connection to the Internet before the WebBrowser control can display Internet content.</p>
<p>
If <i>URL</i> refers to an Internet protocol and a location on an intranet server, the computer running your application must be connected to the intranet and have permission to access that server.</p>
<p>
If <i>URL</i> refers to a standard file system path on a local hard drive or intranet, the WebBrowser control opens the document and displays it immediately. The WebBrowser control can open Microsoft Office documents, text files, and HTML documents that don’t require features supported only by an Internet server. For example, the WebBrowser control can’t open HTML documents that use IDC/HTX files or Active Server Pages (ASP) files from the standard file system, but it can open HTML documents that contain only the HTML tags supported by Microsoft Internet Explorer version 3.0.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If <i>URL </i>refers to a path in the standard file system that doesn’t refer to a file name (for example, C:\Windows\System\), the WebBrowser control displays the file system itself, much like My Computer.</p>
<h4>Displaying a Document in the WebBrowser Control by Using an Address in a Text Box</h4>
<p>
Using the WebBrowser control, you can create a form that performs most of the functions of Microsoft Internet Explorer version 3.0. For example, the following illustration shows the Custom Browse form (WebBrowseWeb) in the Developer Solutions sample application.</p>
<p>
<img src="abac21_10.gif" border=0></p>
<p>
When a user types a valid URL in the text box at the top of the form (<code>txtLinks</code>) and presses ENTER, the WebBrowser control (<code>ActiveXCtl1</code>) displays the Web page or document. Pressing ENTER triggers the AfterUpdate event of the <code>txtLinks</code> text box; the AfterUpdate event contains the following code which navigates to the URL entered by the user:</p>
<pre><code>Private Sub txtLinks_AfterUpdate()
On Error Resume Next
&#09;If Len(Me!txtLinks) &gt; 0 Then
&#09;&#09;Me!ActiveXCtl1.Navigate Me!txtLinks
&#09;End If
End Sub
</code></pre>
<p>
Error handling is passed to the control itself because it displays the same error messages displayed by Microsoft Internet Explorer version 3.0.</p>
<p>
If you prefer to start navigation by clicking a command button instead pressing ENTER, you can use similar code in the button’s Click event.</p>
<p>
The Home, Back, Forward, Refresh, and Search buttons on the Custom Browse form use the corresponding <b>GoHome</b>, <b>GoBack</b>, <b>GoForward</b>, <b>Refresh</b>, and <b>GoSearch</b> methods of the WebBrowser control.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on how to view brief descriptions about the properties, methods, and events of the WebBrowser control, see “Viewing Descriptions of the Properties, Methods, and Events of the WebBrowser Control” later in this chapter.</p>
<p>
With the Save Location button on the Custom Browse  form, you can save the address and a description of the current document to the Links table in the Developer Solutions database. When you click the Save Location button, Microsoft Access checks to see if the URL has been saved previously, and if not, uses the following statement to open the<b> Save Location To Table</b> dialog box:</p>
<pre><code>DoCmd.OpenForm &quot;frmSaveURLDialog&quot;, acWindowNormal, , , acFormEdit, acDialog, _&#09;ctlHyper.LocationName &amp; &quot;;&quot; &amp; ctlHyper.LocationURL
</code></pre>
<p>
The last argument of this statement (<code>ctlHyper.LocationName &amp; &quot;;&quot; &amp; ctlHyper.LocationURL</code>) sets the <b>OpenArgs</b> property to a concatenated string that contains the two values returned by the <b>LocationName</b> and <b>LocationURL</b> properties of the document currently displayed in the Custom Browse  form. When the <b>Save Location To Table</b> dialog box opens, code in its <b>Load</b> event parses the <b>OpenArgs</b> property value back into two parts and displays them as the default description and address. When the user clicks <b>OK</b>, the description and address in <b>the Save Location To Table</b> dialog box form are saved in the Hyperlink and Description fields in the Links table.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the Custom Browse  form, open the Developer Solutions sample application located in the Samples subfolder of your Office folder.</p>
<h4>Displaying a Document in the WebBrowser Control by Using a Hyperlink Stored in a Table</h4>
<p>
Using the WebBrowser control, you can create a form that displays documents specified in hyperlinks stored in a table. For example, the following illustration shows the Browse Saved Hyperlinks (WebBrowseTable) form in the Developer Solutions sample application. You can use the Browse Saved Hyperlinks form to browse addresses saved in the Links table.</p>
<p>
<img src="abac21_11.gif" border=0></p>
<p>
When a user clicks a record navigation button at the bottom of the form to move to a new record, the following code in the form’s Current event displays the Web page or document whose address is stored in the current record.</p>
<pre><code>Private Sub Form_Current()
&#09;Dim varFull As Variant, varDescription As Variant
&#09;Dim HyperlinkAddress As String, HyperlinkSubAddress As String
&#09;Dim msg1 As String, msg2 As String, rst As Recordset, strDisplay As String
&#09;
&#09;On Error Resume Next

&#09;Set rst = Me.RecordsetClone
&#09;rst.Bookmark = Me.Bookmark
&#09;varFull = rst!HyperLink

&#09;If IsNull(varFull) Then GoTo Current_Err
&#09;varDescription = rst!Description
&#09;Me!ActiveXCtl1.Navigate HyperlinkPart(varFull, acAddress)

&#09;If Err = 438 Then Exit Sub

&#09;gvarBookMark = Me.Bookmark

Current_Bye:
&#09;Exit Sub
Current_Err:

msg1 = &quot;Invalid hyperlink address. Remove the record described as '&quot;
msg2 = &quot;' from the Links table or edit the hyperlink to supply a valid address.&quot;

MsgBox msg1 &amp; rst!Description &amp; msg2
&#09;
&#09;&#09;Me.Bookmark = gvarBookMark
&#09;&#09;Exit Sub
End Sub</code></pre>
<p>
This procedure uses the <b>Navigate</b> method of the WebBrowser control to display the next hyperlink address. However, don’t pass the contents of a Hyperlink field directly to the <b>Navigate</b> method. If a user enters or edits data stored in a Hyperlink field from a datasheet or form, it may contain up to three parts of information separated by the number sign (#). Even if the user doesn’t enter all three parts in the datasheet or form, Microsoft Access automatically stores number signs in the field. If there are number signs in the Hyperlink field, passing the data from the field directly to the <b>Navigate</b> method generates an error. To handle this, the stored value is passed to the <b>HyperlinkPart</b> function to extract the <i>address</i> portion of the saved hyperlink, which is then passed to the <b>Navigate</b> method. If navigation is successful, the form’s <b>Bookmark</b> property value is stored in a public variable. This public variable is used to return to the last record if subsequent navigation fails.</p>
<p>
Using code to save data in a Hyperlink field doesn’t automatically save number signs in the field. To preserve the proper functioning of a Hyperlink field in other contexts, you may want to write your code to save number signs before and after a hyperlink address. For an example of how to do this, see the event procedure set for the Click event of the Save Location button (cmdSaveLocation) on the Custom Browse form.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You don’t have to store addresses in a Hyperlink field if you don’t need users to be able to navigate to addresses by clicking them in datasheets or forms, or if you don’t need to save addresses as HTML anchor tags when saving as HTML. As long as an address doesn’t exceed 255 characters, you can store it in a Text field. If an address exceeds 255 characters, you can store it in a Memo field. In either case, you can pass the value stored in the field directly to the <b>Navigate</b> method.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the Browse Saved Hyperlinks form, open the Developer Solutions sample application located in the Samples subfolder of your Office folder. For more information on the format of data stored in a Hyperlink field, see “The Hyperlink Field Storage Format” earlier in this chapter.</p>
<h3>Viewing Descriptions of the Properties, Methods, and Events of the WebBrowser Control</h3>
<p>
Like built-in Microsoft Access objects, the WebBrowser control has properties that your application can set or read to determine the control’s characteristics, methods that your application can use to perform operations on the control, and events your application can respond to. You can view brief descriptions of the properties, methods, and events of the WebBrowser control by using the Object Browser.</p>
<p>
Important   In order for these properties, methods, and events to appear in the Object Browser, you must set a reference to the <b>Microsoft Internet Controls</b> object library. To set this reference, open a module, click <b>References</b> on the <b>Tools</b> menu, and select the <b>Microsoft Internet Controls</b> check box in the <b>Available References</b> box.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To view descriptions of the WebBrowser control’s methods, properties, and events</b>
<ol>
<li>
Open a module.</li>
<li>
On the <b>View</b> menu, click <b>Object Browser</b>.</li>
<li>
In the <b>Project/Library</b> box, click <b>SHDocVw</b>.</li>
<li>
In the <b>Classes</b> box, click <b>WebBrowser</b>.<p>
The <b>Members Of</b> box lists the methods, properties, and events associated with the WebBrowser control.</p>
</li>
</ol>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the methods, properties, and events of the WebBrowser control, see http://www.microsoft.com/intdev/sdk/docs/iexplore/. If you purchased Microsoft Access 97 on CD-ROM, you can view a Help file that contains this information by opening the \ValuPack\Access\Webhelp folder on the Setup CD-ROM, and then copying the Iexplore.hlp and Iexplore.cnt files to your hard disk. </p>
<h3>Distributing the WebBrowser Control with Your Application</h3>
<p>
Unlike most other ActiveX controls, you can’t install the WebBrowser control by itself. For an application that uses the WebBrowser control to work, Microsoft Internet Explorer version 3.0 must also be installed on the computer. Microsoft Internet Explorer version 3.0 can be distributed freely, and doesn’t require the payment of royalties or other licensing fees.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on installing Microsoft Internet Explorer version 3.0, see “Adding the WebBrowser Control to a Form” earlier in this chapter.</p>
</FONT></FONT></BODY>
</HTML>

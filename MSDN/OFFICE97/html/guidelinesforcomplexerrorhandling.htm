<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Guidelines for Complex Error Handling</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="guidelinesforcomplexerrorhandling"></a>Guidelines for Complex Error Handling</h2>
<p>
When you create large applications that use multiple modules, the error-handling code can get quite complex. Keep these guidelines in mind:
<ul>
<li>
Reduce code size by writing a few procedures that your error-handling code can call to handle common error situations. For example, you may want to write a procedure to handle file-related and disk-related errors that you call whenever you read or write to a disk file.</li>
<li>
Use the <b>Raise</b> method of the <b>Err</b> object in all error-handling code to handle cases in which no code in the error-handling routine deals with the specific current error. This enables your application to try to correct the error in other error-handling routines along the calls list. It also ensures that Visual Basic displays an error message if an error occurs that your code doesn’t handle. This helps you uncover the errors you aren’t handling adequately when you test your code.</li>
<li>
Use the <b>Clear</b> method if you need to explicitly clear the <b>Err</b> object after handling an error. This is necessary when using inline error handling with the <b>On Error Resume Next</b> statement. Visual Basic calls the <b>Clear</b> method automatically whenever it runs any type of <b>Resume</b> statement, <b>Exit Sub</b>,<b> Exit Function</b>,<b> Exit Property</b>, or any <b>On Error</b> statement.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on inline error handling, see “Inline Error Handling” later in this chapter.</p>
</li>
<li>
If you don’t use the <b>Raise</b> method, you can write fail-safe error-handling code that all your error handlers can call as a last resort. For example, such code may try to close forms and save a user’s data.</li>
<li>
If you don’t want a previous procedure to trap the error, use the <b>Stop</b> statement in the error-handling code to force your application to close. By using the <b>Stop</b> statement, you can examine the context of the error while refining your code. Be sure to remove these <b>Stop</b> statements before you distribute your application to users.</li>
</ul>
</FONT></FONT></BODY>
</HTML>

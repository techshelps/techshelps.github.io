<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tracing Nested Procedures</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="tracingnestedprocedures"></a>Tracing Nested Procedures</h2>
<p>
<img src="abac07_19.gif" border=0></p>
<p>
When your application is running, Microsoft Access keeps track of each time one procedure calls another. If you’re tracing the progress of your code and want to find out which procedures have been called, press CTRL+L or click <b>Call Stack</b> on the <b>View</b> menu. Or, in the Debug window, click the <b>Calls</b> button to the right of the <b>Procedure</b> box.</p>
<p>
The <b>Calls</b> dialog box displays a list of all active procedure calls—the procedures in an application that are started but not completed. The most recently called procedure appears at the top of the list.</p>
<p>
The <b>Calls</b> dialog box is especially helpful if you want to trace nested procedures. For example, an event procedure can call a second procedure, which can call a third procedure—all before the event procedure that started this chain has finished. In the following illustration, the <b>Calls</b> dialog box lists two active procedure calls: the Order form’s Load event procedure has called the IsLoaded <b>Function</b> procedure.</p>
<p>
<img src="abac07_20.gif" border=0></p>
<p>
The <b>Calls</b> dialog box lists all the active procedure calls in a series of nested procedure calls. It places the earliest active procedure call at the bottom of the list and adds subsequent procedure calls to the top. The information given for each procedure includes the setting of the database’s <b>ProjectName</b> property, the name of the module that contains the procedure, and the name of the called procedure.</p>
<p>
You can use the <b>Show</b> button to display the statement that calls the next procedure listed in the <b>Calls</b> dialog box. That statement is highlighted by a green pointer that appears in the margin of the Module window. If you choose the current (top) procedure in the <b>Calls</b> dialog box and then click <b>Show</b>, Visual Basic displays the current statement (the statement at which execution is suspended).</p>
</FONT></FONT></BODY>
</HTML>

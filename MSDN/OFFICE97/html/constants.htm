<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Constants</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="constants"></a>Constants</h2>
<p>
Your code may contain unchanging values that appear over and over. Or your code may depend on certain numbers that are difficult to remember—numbers that, in and of themselves, have no obvious meaning. </p>
<p>
In these cases you can greatly improve the readability of your code—and make it easier to maintain—by using <i>constants</i>. A constant is a meaningful name that takes the place of a number or string that doesn’t change. You can’t modify a constant or assign a new value to it as you can to a variable. Constants have one of two sources:
<ul>
<li>
<i>Intrinsic</i> or <i>system-defined</i> constants are provided by applications. Microsoft Access, Visual Basic, and Data Access Objects (DAO) constants are all available in Microsoft Access, along with intrinsic constants from other applications that provide object libraries. </li>
<li>
<i>Symbolic</i> or <i>user-defined</i> constants are declared by using the <b>Const</b> statement. </li>
</ul>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on intrinsic constants, see “Intrinsic Constants” later in this chapter. For more information on user-defined constants, see the following section, “Creating Your Own Constants.”</p>
<h3>Creating Your Own Constants</h3>
<p>
You use the <b>Const</b> statement to create your own symbolic constants. The syntax for the <b>Const</b> statement is:</p>
<p>
[<b>Public</b> | <b>Private</b>]<b> Const</b> <i>constantname</i> [<b>As</b> <i>type</i>] <b>=</b> <i>expression</i></p>
<p>
The argument <i>constantname</i> is a valid symbolic name (the rules are the same as the rules for creating variable names), and <i>expression</i> is composed of numeric or string constants and operators (you can’t use function calls in <i>expression</i>).</p>
<p>
A <b>Const</b> statement can represent a mathematical or date/time quantity. For example:</p>
<pre><code>Const conPi = 3.14159265358979
Public Const conMaxPlanets = 9
Const conReleaseDate = #1/1/95#
</code></pre>
<p>
You can also use the <b>Const</b> statement to define string constants:</p>
<pre><code>Public Const conVersion = &quot;07.10.A&quot;
Const conCodeName = &quot;Enigma&quot;
</code></pre>
<p>
You can place more than one constant declaration on a single line, if you separate them with commas:</p>
<pre><code>Public Const conPi = 3.14, conMaxPlanets = 9, conWorldPop = 6E+09
</code></pre>
<p>
The expression on the right side of the equal sign (=) is often a number or literal string, but it can also be an expression that results in a number or string as long as the expression doesn’t contain calls to functions. You can even define constants in terms of previously defined constants:</p>
<pre><code>Const conPi2 = conPi * 2
</code></pre>
<p>
After you define constants, you can place them in your code to make it much more readable, as shown in the following example:</p>
<pre><code>Static SolarSystem(1 To conMaxPlanets)

If lngNumPeople &gt; conWorldPop Then Exit Function
</code></pre>
<h4>Defining the Scope of User-Defined Constants</h4>
<p>
A <b>Const</b> statement has scope just as a variable declaration does, and the same rules apply:
<ul>
<li>
To create a constant that’s available only within a procedure, declare it within that procedure.</li>
<li>
To create a constant that’s available to all procedures within a module, but not to any procedure outside that module, declare the constant in the Declarations section of the module.</li>
<li>
To create a constant that’s available throughout the application, declare the constant in the Declarations section of a standard module and place the <b>Public</b> keyword before <b>Const</b>. Public constants cannot be declared in a form or report module.</li>
</ul>
<h4>Avoiding Circular References</h4>
<p>
It’s important to be aware of one possible complication when you’re using public constants: Because constants can be defined in terms of other constants, you must be careful not to set up a circular reference between two or more constants. A circular reference occurs when you have two or more public constants, each defined in terms of the other, as in the following example:</p>
<pre><code>' In Module 1.
Public Const conA = conB * 2

' In Module 2.
Public Const conB = conA / 2
</code></pre>
<p>
If you create a circular reference, Visual Basic generates an error when it compiles your code. You can’t compile your code until you resolve the circular reference. To avoid creating a circular reference, restrict all your public constants to a single module or, at most, to a small number of modules.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can’t define a public constant in a form or report module, only in a standard module. You can, however, declare a private constant in a form or report module.</p>
<h3>Intrinsic Constants</h3>
<p>
In addition to the constants you declare with the <b>Const</b> statement, Microsoft Access automatically declares a number of intrinsic constants. These constants are available in all modules.</p>
<p>
Because you can’t disable intrinsic constants, the constants you create can’t have the same names as the intrinsic constants. Also, you can’t redeclare or set intrinsic constants to different values.</p>
<p>
Important   Because the values represented by the intrinsic constants may change in future versions of Microsoft Access, you should use the constants instead of their actual values.</p>
<p>
You can use intrinsic constants wherever you can use user-defined constants, including in expressions. The following example shows how you might use the intrinsic constant <b>vbCurrency</b> to determine whether <code>varTest</code> is a <b>Variant</b> of <b>VarType</b>&nbsp;6 (<b>Currency</b>).</p>
<pre><code>If VarType(varTest) = vbCurrency Then
&#09;Debug.Print &quot;varTest contains Currency data.&quot;
Else
&#09;Debug.Print &quot;varTest does not contain Currency data.&quot;
End If
</code></pre>
<p>
The intrinsic constants for Microsoft Access, as well as those for the Visual Basicfor Applications and Data Access Objects (DAO) libraries, are listed in the Object Browser. Other applications that provide object libraries, such as Microsoft Excel and Microsoft Project, also provide a list of constants you can use with their objects, methods, and properties. To see these constants, click the appropriate object library in the <b>Project/Library</b> box of the Object Browser, and then click <b>Constants</b> in the <b>Classes</b> box. </p>
<p>
Important   In order for constants from other applications to appear in the Object Browser, you must set a reference to the application’s object library. Open a module, and then in the <b>References</b> dialog box (<b>Tools</b> menu), select the check box for the object library you want to set a reference for.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on using the Object Browser, see Chapter 5, <a href="workingwithobjectscollections.htm">“Working with Objects and Collections.”</a></p>
<p>
Intrinsic constant names are in a mixed-case format, with a two-character prefix indicating the object library that defines the constant. Constants from Microsoft Access are prefaced with “ac”; for example, <b>acDataErrContinue</b>. Constants from the VBA object library are prefaced with “vb” ; for example, <b>vbTileHorizontal</b>. Constants from the DAO object library are prefaced with “db” ;  for example, <b>dbRelationUnique</b>. All of these intrinsic constants are available in Microsoft Access without having to be declared.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;In Microsoft Access versions 2.0 and earlier, constant names appeared in all capital letters with underscores—for example, A_REFRESH. Microsoft Access 97 supports intrinsic constants from these early versions. To see them, click the <b>Access</b> object library in the <b>Project/Library</b> box of the Object Browser, and then click <b>OldConstants</b> in the <b>Classes</b> box.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For a list of intrinsic constants and more information about them, search the Help index for “intrinsic constants.” </p>
</FONT></FONT></BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Variants</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Using Variants</H1><P CLASS="t">Passing an argument of Variant data type is very similar to passing any other argument type. In the DLL, you can use the VARIANT data structure to access the data contained in the argument. See Chapter 5 in Volume 2 of the <I>OLE 2 Programmer's Reference</I> for descriptions of the VARIANT data type.</P>
<P CLASS="t">The VARIANT type is a C-language structure containing a single member for the variable type, three reserved members, and a large named union that is used to access the variable data depending on the type.</P>
<P CLASS="t">For example, this C-language function determines the data type contained in the VARIANT argument passed by Visual Basic:</P>

<pre><code><FONT FACE="Courier" SIZE="2">short WINAPI VariantExample(VARIANT vt)
{
    if (vt.vt == VT_DISPATCH)        // variant is an object
        return -1;
    else if (vt.vt == VT_BSTR)        // variant is a string
        return _wtoi(vt.bstrVal);
    else if (vt.vt == VT_I2)            // variant is an integer
        return vt.iVal;
    else                                // variant is something else
        return -3;
}
</FONT></code></pre>
<P CLASS="t">This Visual Basic code declares and calls the VariantExample function:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Declare Function VariantExample Lib "debug\ADVDLL.DLL" _
    (ByVal v As Variant) As Integer

Sub VariantArgTest()
    MsgBox VariantExample(Worksheets(1))    ' -1
    MsgBox VariantExample("25")             ' 25
    MsgBox VariantExample(5)                ' 5
    MsgBox VariantExample(3.2)              ' -3
End Sub
</FONT></code></pre>
<P CLASS="t">You could use this information to implement a function that accepts either a Range object or a text description of a range. If the argument contains an object, you can use IDispatch to access properties and methods of the object directly. If the argument contains a string, you can use IDispatch to create an object and then access its properties and methods.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Visual Basic in Microsoft Excel does not support all the data types supported by the VARIANT structure. The following table shows the allowed data types and their value constants. Microsoft Excel never returns a variant with a data type not shown on this list.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="156pt" VALIGN="TOP"><COL WIDTH="191pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>Data Type</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Variant Constant</B></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Boolean</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_BOOL</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Currency (scaled integer)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_CY</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Date</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_DATE</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Double (double-precision floating-point)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_R8</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Integer</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_I2</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Long (long integer)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_I4</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Object</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_DISPATCH</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Single (single-precision floating-point)</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_R4</P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">String</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">VT_BSTR</P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the OLE 2 IDispatch Interface</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1 CLASS="cht">Using the OLE 2 IDispatch Interface</H1><P CLASS="t">Microsoft Excel exposes its objects as OLE Automation objects. OLE&nbsp;2 allows another application, called an <I>OLE Automation Controller,</I> to access the exposed objects and use their properties and methods with the IDispatch interface or by means of vtbl binding. This chapter describes techniques you can use to write an OLE Automation Controller in standard C that can be used to manipulate objects, properties, and methods in Microsoft Excel.</P>
<P CLASS="t">In Chapters 7 and 8, you will see how an application can use the C API interface to call into Microsoft Excel. The C API interface exposes Microsoft Excel macro-language functions and commands. The OLE&nbsp;2 IDispatch interface allows an application to call Microsoft Excel and manipulate any object, property, or method that can be called from Visual Basic.</P>
<P CLASS="t">This chapter does not discuss techniques for implementing an OLE Server (an application that creates new OLE objects and exposes their properties and methods using an IDispatch interface) or techniques for using vtbl binding. Microsoft Excel operates as both an OLE Server (Microsoft Excel creates objects that can be accessed by other applications) and as an OLE Automation Controller (Visual Basic in Microsoft Excel can access objects in other applications that support OLE Automation, and in fact, Visual Basic uses OLE Automation to call Microsoft Excel properties and methods). Vtbl binding requires an application to support dual interfaces that can be used by either IDispatch or vtbl calls. Of the 193 interfaces in Microsoft Excel, only 19 of them are marked as dual and can be used for vtbl binding. Becuase of the relatively low number of interfaces, which does not include the Range object, it is doubtful that many developers will eschew&nbsp;IDispatch for vtbl binding.</P>
<P CLASS="t">The examples in this chapter were built and tested with Microsoft Windows&nbsp;95 and Windows&nbsp;NT Workstation version&nbsp;4.0 (SP2), using Microsoft Visual&nbsp;C++ version&nbsp;4.2b. Visual C++ version&nbsp;4.2b includes the OLE&nbsp;2 header files and libraries required to create OLE Automation Controller applications. If you use&nbsp;another C compiler, you will also need the Microsoft Win32 SDK.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">In addition to the Help provided with Visual C++ and the OLE&nbsp;2 SDK, Volume&nbsp;2 of the <I>OLE 2 Programmer's Reference</I> provides detailed information about OLE Automation and the IDispatch interface. This chapter focuses mainly on implementation details for using the IDispatch interface with Microsoft Excel. You should use the <I>OLE 2 Programmer's Reference</I> with this chapter to understand the IDispatch interface.</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring Variables</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="declaringvariables"></a>Declaring Variables</h2>
<p>
As you saw in Chapter 2, “Introducing Visual Basic,” you use variables to store values while your Visual Basic code is running. Within a procedure or module, you declare a variable with the <b>Dim</b> statement. The syntax for the <b>Dim</b> statement is:</p>
<p>
<b>Dim</b> <i>variablename</i> [<b>As</b> <i>type</i>]</p>
<p>
In the <b>Dim</b> statement, you supply a name for the variable. Like other things you create and name in Visual Basic, variable names:
<ul>
<li>
Must begin with a letter.</li>
<li>
Can’t contain an embedded period or an embedded type-declaration character.</li>
<li>
Must not exceed 255 characters.</li>
<li>
Must be unique within the same scope.</li>
</ul>
<p>
You use the optional <b>As</b> <i>type</i> clause in the <b>Dim</b> statement to define the <i>data type</i> of the variable you’re declaring. A data type is a designation of the type of information a variable can store. Examples of data types include <b>String</b>, <b>Integer</b>, and <b>Currency</b>. If you omit the <b>As</b> <i>type</i> clause, Visual Basic makes the variable a <b>Variant</b>, which is the default data type (unless you change the default with the <b>Def</b><i>type</i> statement). Data types, including <b>Variant</b>, are discussed later in this chapter. Variables can also contain objects from Microsoft Access, such as <b>Form</b>, <b>Report</b>, and <b>Control</b> objects, or objects from other applications.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on manipulating objects, see Chapter 5, <a href="workingwithobjectscollections.htm">“Working with Objects and Collections.”</a></p>
<p>
Visual Basic variables are not case-sensitive; when you specify a variable, you don’t need to match the exact uppercase and lowercase letters you used in declaring the variable. Visual Basic automatically changes any explicitly declared variable to the case used in the declaration. An implicitly declared variable is given the same case it had the last time it was used.</p>
<p>
<img src="abac04_1.gif" border=0></p>
<p>
Tip   When you name variables, you may find it useful to include prefixes to indicate each variable’s data type. For example, you might name a variable <code>dblTemp</code> to indicate that its data type is <b>Double</b>. This practice makes your code easier to read and helps you avoid type-mismatch errors.</p>
<h3>Implicit Declaration</h3>
<p>
Although it’s not recommended, you can use a variable without explicitly declaring it. For example, you could write a function as follows:</p>
<pre><code>Function SafeSqr(ByVal dblNum As Double) As Double
&#09;dblTemp = Abs(dblNum)
&#09;SafeSqr = Sqr(dblTemp)
End Function
</code></pre>
<p>
Here, you haven’t declared <code>dblTemp</code> as a variable before you use it in the function. In cases such as this, Visual Basic implicitly creates a variable with that name, so you can use the variable as if you had explicitly declared it. Although implicit declarations are convenient, they can lead to subtle errors in your code if a variable name is misspelled. For example, suppose you wrote the following function:</p>
<pre><code>Function SafeSqr(ByVal dblNum As Double) As Double
&#09;dblTemp = Abs(dblNum)
&#09;SafeSqr = Sqr(dblTmp)&#09;&#09;&#09;&#09;' dblTemp is misspelled.
End Function
</code></pre>
<p>
At first glance, this looks the same as the previous function. But because the <code>dblTemp</code> variable is misspelled, this function always returns zero. When Visual Basic encounters a new variable name, it can’t determine if you actually meant to create a new variable or if you just made a mistake typing an existing variable name. Because it assumes you want to create a variable, it creates a new variable named <code>dblTmp</code>.</p>
<h3>Explicit Declaration</h3>
<p>
To avoid the problem of misspelling variable names, specify an <b>Option</b> <b>Explicit</b> statement in the Declarations section of your modules. The <b>Option</b> <b>Explicit</b> statement forces the explicit declaration of all variables in a module. If Visual Basic encounters a name not explicitly declared as a variable, it generates an error message.</p>
<p>
If you had specified an <b>Option Explicit</b> statement for the module containing the SafeSqr function shown earlier, Visual Basic would have recognized <code>dblTemp</code> and <code>dblTmp</code> as undeclared variables and would have generated errors for both of them. You would then explicitly declare <code>dblTemp</code>, as shown in the following code:</p>
<pre><code>Function SafeSqr(ByVal dblNum As Double) As Double
&#09;Dim dblTemp As Double

&#09;dblTemp = Abs(dblNum)
&#09;SafeSqr = Sqr(dblTmp)
End Function
</code></pre>
<p>
Now Microsoft Access would display an error message for the incorrectly spelled <code>dblTmp</code> and the problem would be clear. Because the <b>Option Explicit</b> statement helps you catch these kinds of errors, you should use it with all your code.</p>
<p>
You can also force variables to be explicitly declared in any new modules by clicking <b>Options</b> (<b>Tools</b> menu), clicking the <b>Module</b> tab, and then selecting the <b>Require Variable Declaration</b> check box. This automatically inserts the <b>Option Explicit</b> statement in any new modules.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The <b>Option Explicit</b> statement operates on a per-module basis; it must be placed in the Declarations section of every form, report, and standard module for which you want Visual Basic to enforce explicit variable declarations. If you select the <b>Require Variable Declaration </b>check box, Visual Basic inserts the <b>Option Explicit</b> statement in all subsequent form, report, and standard modules, but doesn’t add it to existing code. You must manually add the <b>Option Explicit</b> statement to any existing modules within an application.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Option Explicit</b> statement, search the Help index for “Option Explicit statement.”</p>
</FONT></FONT></BODY>
</HTML>

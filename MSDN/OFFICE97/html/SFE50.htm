<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Navigating Range Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Navigating Range Objects</H1><P CLASS="t">There are several special properties and methods that can be used to navigate ranges on worksheet objects. The most basic of these is the Range property. This property has two variations. The first is used to reference a range directly by its address. In the following example, this syntax is used to enter the value 10 into the range A1:B4 on Sheet1 of the active workbook:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Range("A1:B4").Value = 10
</FONT></code></pre>
<P CLASS="t">This syntax also accepts a named range as its argument:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Range("Sales").Value = 10
</FONT></code></pre>
<P CLASS="t">The second syntax references a range by using the upper-left cell and the lower-right cell of the range as arguments:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Range("A1", "B4").Value = 10
</FONT></code></pre>
<P CLASS="t">This syntax can take as its arguments addresses, range names, or any property or&nbsp;method that returns a valid single-cell range object or address. However, a common mistake when using properties or methods as arguments for the Range property is to not fully qualify the arguments. For example, the code shown below&nbsp;fails if Sheet1 is not the active sheet:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Worksheets("Sheet1").Range(Range("a1"), _
    Range("b4")).Value = 10
</FONT></code></pre>
<P CLASS="t">This is because the Range property defaults to the active sheet if no sheet is provided to qualify it. If Sheet1 is not active at run time, the outer Range property and the inner Range property will be referring to different sheets. The correct way to handle this is shown in the following example:</P>

<pre><code><FONT FACE="Courier" SIZE="2">With Worksheets("Sheet1")
    .Range(.Range("a1"), .Range("b4")).Value = 10
End With
</FONT></code></pre>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Now all the Range properties are qualified with a reference to the same worksheet, so it no longer matters what the active sheet happens to be.</P>
<P CLASS="t">The Offset and Cells methods are used to refer to ranges located some distance away from some starting point. The following example shows how to use each of these methods to get the value of the cell that is two columns to the left and two rows down from the currently active cell:</P>

<pre><code><FONT FACE="Courier" SIZE="2">MsgBox ActiveCell.Offset(2, 2).Value
MsgBox ActiveCell.Cells(3, 3).Value
</FONT></code></pre>
<P CLASS="t">Both lines of code above refer to the same cell. The difference between the two methods is that the Offset method has a base index of zero and accepts negative numbers as arguments, allowing you to reference ranges above and to the left of the current range. The Cells method has a base index of 1 and will not accept negative numbers as arguments.</P>
<P CLASS="t">The End method allows you to move to the end of the current data range. It mimics the functionality of holding down the END key on the keyboard while pressing one of the directional arrows. The End method takes one of four predefined constants as an argument, corresponding to the four directions in&nbsp;which you can move. These constants are xlUp, xlDown, xlToLeft, and xlToRight. In the following example, the End method is used to get the value of&nbsp;the bottom cell of the column of data that begins with cell A1:</P>

<pre><code><FONT FACE="Courier" SIZE="2">MsgBox Worksheets("Sheet1").Range("a1").End(xlDown).Value
</FONT></code></pre>
<P CLASS="t">Note, however, that the End method will stop at the cell above the first empty cell&nbsp;it encounters, regardless of whether or not that is truly the last cell. In other words, the End method moves in a specific direction until it finds a blank cell.</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Manipulating ActiveX Controls</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="manipulatingactivexcontrols"></a>Manipulating ActiveX Controls</h2>
<p>
An ActiveX control is an object with three distinct categories of attributes: methods, events, and properties. </p>
<p>
A property is a control characteristic such as color, width, height, or font. You can set the properties for an ActiveX control in Visual Basic code or in the control’s property sheet. If an ActiveX control provides its own custom properties dialog box, you can also set the control’s custom properties there. To open the custom properties dialog box for an ActiveX control, click the <b>Custom</b> property box in the control’s property sheet, and then click the <b>Build</b> button next to the <b>Custom</b> property box, as shown in the following illustration.</p>
<p>
<img src="abac16_4.gif" border=0></p>
<p>
Note&nbsp;&nbsp;&nbsp;You can also open the custom properties dialog box for an ActiveX control by right-clicking the control, pointing to <i>ControlName</i><b> Object</b> on the shortcut menu, and clicking <b>Properties</b>.</p>
<h3>Using Methods, Events, and Properties in Code</h3>
<p>
As a developer, you can use the methods associated with an ActiveX control to manipulate that control. For example, you can use the <b>Refresh</b> method of the Calendar control to repaint the calendar.</p>
<pre><code>Forms!EntryForm!Calendar.Refresh
</code></pre>
<p>
You can use the events associated with a control to update the control or to synchronize the control with a record, section, or environment. For example, you can use the Click<b> </b>event of the Calendar control to start a procedure that retrieves the specified date and sets the value of a control on a different, synchronized form.</p>
<p>
You can use the properties associated with a control to display or retrieve data. For example, you can use the <b>Value </b>property of the Calendar control to retrieve the date selected by the user.</p>
<p>
The following example uses the Calendar control’s Click event and <b>Value</b> property to assign a chosen date from the Calendar control to a control on another form. The Click event occurs when the user clicks a date in the control. The code then uses the <b>Value </b>property to retrieve the selected date.</p>
<pre><code>Private Sub Calendar_Click()
&#09;Forms!SyncForm!DateVal = Forms!EntryForm!Calendar.Value
End Sub
</code></pre>
<p>
To limit the dates a user can select with the<b> </b>Calendar control, you can use the BeforeUpdate event to examine the requested date and then either accept or reject the requested date, depending on whether it falls within the acceptable range.</p>
<pre><code>Private Sub Calendar_BeforeUpdate (Cancel As Integer)
&#09;Dim dteFirstDate As Date&#09;&#09;&#09;&#09;&#09;&#09;' Starting date.
&#09;Dim dteLastDate As Date&#09;&#09;&#09;&#09;&#09;&#09;' Ending date.
&#09;Dim dteReqDate As Date&#09;&#09;&#09;&#09;&#09;&#09;' User's requested date.

&#09;dteFirstDate = #1/1/90#&#09;&#09;&#09;&#09;&#09;&#09;' Assign starting date.
&#09;dteLastDate = #1/1/98#&#09;&#09;&#09;&#09;&#09;&#09;' Assign ending date.

&#09;' Retrieve requested date.
&#09;dteReqDate = Forms!EntryForm!Calendar.Value

&#09;If dteReqDate &lt; dteFirstDate Then&#09;&#09;' If user requests invalid date.
&#09;&#09;Cancel = True&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Cancel the update.
&#09;&#09;Exit Sub&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Exit subroutine.
&#09;ElseIf dteReqDate &gt; dteLastDate Then
&#09;&#09;Cancel = True
&#09;&#09;Exit Sub
&#09;End If
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on the methods, events, and properties of the Calendar control, search the Help index for “Calendar control.”</p>
<p>
You can access the events for an ActiveX control through the <b>Procedure</b> box in the Module window. In form Design view, click <b>Code</b> on the <b>View</b> menu, then click the ActiveX control in the <b>Object</b> box. The <b>Procedure</b> box lists the event procedures for the ActiveX control, as shown in the following illustration.</p>
<p>
<img src="abac16_5.gif" border=0></p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;In some cases, the events for an ActiveX control have names that are identical to Microsoft Access events. In this situation, the Microsoft Access event is assigned the original event name, and the ActiveX control event is assigned the event name concatenated with the word “Object.” For example, if the control supports an Enter event, then the <b>Procedure</b> box for the control contains an Enter event and an EnterObject event.</p>
<h3>Data Binding Support</h3>
<p>
Some ActiveX controls can be bound to a single column in a form’s underlying recordset. For example, the Calendar control can be bound to a Date/Time field. By setting the control’s <b>ControlSource</b> property to the name of the field you want to bind the control to, you can display, edit, and update the value in a field of the table or query that is named in the form’s <b>RecordSource </b>property.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Your form must be in Single Form view to use data-bound ActiveX controls. This means that you can’t set a form’s <b>DefaultView</b> property to Continuous Forms if that form contains a data-bound ActiveX control. Additionally, you can’t access ActiveX controls at all in Datasheet view.</p>
</FONT></FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using OLE Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="usingoleobjects"></a>Using OLE Objects</h2>
<p>
While you use Automation to work with the objects in another component’s object model, you use OLE to include objects from other components in a Microsoft Access form or report. These objects are typically documents created by another component that supports OLE and are called OLE objects. A component that provides its documents to be linked or embedded in other components is called an <i>OLE server</i>. A component in which documents can be linked or embedded is called an <i>OLE container</i>. For example, you can embed a Microsoft Word document in a Microsoft Access form and the user can then edit this document in Microsoft Word. In this case, Microsoft Word is the OLE server, and Microsoft Access is the OLE container.</p>
<p>
When you embed an OLE object, you store a copy of the document with your Microsoft Access application. You can also link an OLE object to your application. When you link an OLE object, your application stores only a link to the document that is the data source, not the document itself. The same OLE object can be linkedto more than one application at a time. When you make changes to the linked document, the updated data is displayed in all of the applications that are linked to it.</p>
<p>
There are several different ways to create an OLE object in your Microsoft Access application. To include OLE objects on a form or report, put them in either bound object frame controls or unbound object frame controls. Which type of control you choose depends on what you want to do with the OLE object. A <i>bound object frame</i> displays an OLE object that is stored as data in a table. An <i>unbound object frame</i> displays an OLE object that is not associated with data in a table.</p>
<p>
OLE objects can be items of data in a database. For example, if your database includes an Employees table, you can save a photograph of each employee with their record. The photograph would be an OLE object, perhaps a bitmap file. Because the photograph is an item of data that is saved in the underlying table, it can be displayed in a bound object frame. You can find an example of this technique in the Employees form of the Northwind sample database.</p>
<p>
OLE objects can also be unrelated to the data in a database. For example, your application may include a form that contains a Microsoft Word document with instructions for entering data in the database. If the Word document is a linked object, you can edit the file to which it is linked by double-clicking the OLE object to activate Microsoft Word, and then making changes to the document. The changes you make are reflected in the document displayed on the form. An OLE object like the one described here would be displayed in an unbound object frame.</p>
<p>
When you place an unbound object frame control on a form or report, Microsoft Access displays the <b>Insert Object</b> dialog box, where you can select what type of OLE object you want to include, and specify whether to create a new OLE object or use an existing OLE object. If you use an existing OLE object, you can specify whether it is to be linked or embedded. The <b>Insert Object</b> dialog box also appears when you click <b>Object</b> on the <b>Insert</b> menu. When you insert an OLE object by using this dialog box and you haven’t already created the unbound object frame yourself, Microsoft Access creates an unbound object frame that contains the OLE object you have selected.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on object frames, search the Help index for “object frames.”</p>
<p>
The following illustration shows a Microsoft Access form that contains different OLE objects.</p>
<p>
<img src="abac11_1.gif" border=0></p>
<p>
Each control provides a view of data from a different Windows-based component—drawing, word processor, spreadsheet, and chart—and each represents a separate OLE object.</p>
<p>
You can create OLE objects in a Microsoft Access form or report without writing any Visual Basic code. However, if you want greater control over the OLE objects in your application, you can also manipulate them using Visual Basic. The following sections discuss how to work with OLE objects in code.</p>
<h3>Setting Properties for OLE Objects</h3>
<p>
To work with OLE objects in Visual Basic, you can set properties for the bound or unbound object frame controls that contain the objects. The following table lists some properties that you can use when working with OLE objects in Visual Basic.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Action</b></td>
<TD>
Indicates the operation to be performed on an OLE object, such as whether the object is to be embedded or linked. This property is available only at run time. For a list of constants you can use with this property, search the Help index for “Action property.”</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Class</b></td>
<TD>
Identifies the component that supplied the OLE object and identifies the object type (for example, Word.Document or Excel.Sheet).</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OLETypeAllowed</b></td>
<TD>
Indicates whether a control can contain linked OLE objects, embedded OLE objects, or either type.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">SourceDoc</b></td>
<TD>
Indicates the file to link to when creating a linked OLE object (for example, Sheet1.xls).</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">SourceItem</b></td>
<TD>
Determines which portion of data within the file is to be linked.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
The <b>Class</b>, <b>OLETypeAllowed</b>, <b>SourceDoc</b>, and <b>SourceItem</b> properties specify information Microsoft Access uses to create the OLE object. The <b>Action</b> property creates the OLE object by using this information, and thus should always be set after the other properties.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the<b> Action</b>, <b>Class</b>, <b>OLETypeAllowed</b>, <b>SourceDoc</b>, and <b>SourceItem</b> properties, search the Help index for the name of the property.</p>
<h4>Creating an Empty Embedded Object</h4>
<p>
You can create an empty embedded OLE object in which the user can enter data. For example, you can embed an empty Microsoft Excel worksheet in a Microsoft Access form.</p>
<p>
The following examples create a new embedded Microsoft Excel spreadsheet in an unbound object frame. To try these examples, first enter the following code in a standard module and save the module. This function creates a new form with an empty unbound object frame which you can use to try the examples in this section and the next section of this chapter.</p>
<pre><code>Function CreateFormWithFrame(strControlName As String)

&#09;Dim frm As Form, ctlFrame As Control, ctlCommand As Control
&#09;Dim intLeft As Integer, intRight As Integer

&#09;Set frm = CreateForm
&#09;Set ctlFrame = CreateControl(frm.Name, acObjectFrame)
&#09;intLeft = ctlFrame.Left + ctlFrame.Width + 200
&#09;intRight = 200
&#09;Set ctlCommand = CreateControl(frm.Name, acCommandButton, , , , _
&#09;&#09;intLeft, intRight)

&#09;With ctlCommand
&#09;&#09;.Name = strControlName
&#09;&#09;.Caption = strControlName
&#09;&#09;.OnClick = &quot;[Event Procedure]&quot;
&#09;End With

&#09;DoCmd.Restore
End Function
</code></pre>
<p>
Once you’ve saved this code, run it in the Debug window by entering the following line of code and pressing ENTER.</p>
<pre><code>CreateFormWithFrame(&quot;EmbedEmpty&quot;)
</code></pre>
<p>
Microsoft Access creates a new form with an unbound object frame and a command button named EmbedEmpty. Open the form module and enter the code in the following example. Then switch to Form view. When you click the EmbedEmpty button, Microsoft Access embeds a new, empty Microsoft Excel spreadsheet in the unbound object frame. You can double-click the spreadsheet to edit it.</p>
<pre><code>Private Sub EmbedEmpty_Click()

&#09;Dim ctl As Control

&#09;Set ctl = Me!OLEUnbound0
&#09;With ctl
&#09;&#09;' Enable control.
&#09;&#09;.Enabled = True
&#09;&#09;' Set Locked property to False.
&#09;&#09;.Locked = False
&#09;&#09;' Allow embedded objects only.
&#09;&#09;.OLETypeAllowed = acOLEEmbedded
&#09;&#09;' Specify the OLE server and the type of object.
&#09;&#09;.Class = &quot;Excel.Sheet&quot;
&#09;&#09;' Create an embedded object.
&#09;&#09;.Action = acOLECreateEmbed
&#09;End With
End Sub
</code></pre>
<p>
In the preceding example, the embedded object you create is a brand new OLE object that has not been saved to disk. </p>
<h4>Creating an OLE Object from a File</h4>
<p>
You can create an OLE object from a file in Visual Basic. For example, you can embed an existing Microsoft Excel document in a Microsoft Access form.</p>
<p>
To try this, create a Microsoft Excel worksheet called Revenue.xls, add some data to it, and save it in the My Documents folder. Next, run the following code in the Debug window to create a form with an unbound object frame and a command button named EmbedExisting. This code calls the CreateFormWithFrame function shown in the previous section.</p>
<pre><code>CreateFormWithFrame(&quot;EmbedExisting&quot;)
</code></pre>
<p>
Open the new form module and enter the code in the following example. Then switch to Form view. When you click the EmbedExisting button, Microsoft Access embeds the existing Microsoft Excel document Revenue.xls in the unbound object frame.</p>
<pre><code>Private Sub EmbedExisting_Click()

&#09;Dim ctl As Control
&#09;
&#09;Set ctl = Me!OLEUnbound0
&#09;With ctl
&#09;&#09;' Enable control.
&#09;&#09;.Enabled = True
&#09;&#09;' Set Locked property to False.
&#09;&#09;.Locked = False
&#09;&#09;' Allow embedded objects only.
&#09;&#09;.OLETypeAllowed = acOLEEmbedded
&#09;&#09;' Specify the OLE server and the type of object.
&#09;&#09;.Class = &quot;Excel.Sheet&quot;
&#09;&#09;' Specify the file to be embedded.
&#09;&#09;.SourceDoc = &quot;C:\My Documents\Revenue.xls&quot;
&#09;&#09;' Create the embedded object.
&#09;&#09;.Action = acOLECreateEmbed
&#09;End With
End Sub
</code></pre>
<p>
To link the document rather than embed it, set the <b>OLETypeAllowed</b> property to <b>acOLELinked</b> and the <b>Action</b> property to <b>acOLECreateLink</b>. You can also change an embedded OLE object to a linked OLE object, or a linked OLE object to an embedded OLE object, by changing the settings of these two properties appropriately.</p>
<p>
In the preceding example, setting the <b>Class</b> property for the OLE object is optional. If you don’t set this property, Microsoft Access determines the appropriate setting based on the file name specified in the <b>SourceDoc</b> property.</p>
<h3>Activating an OLE Object in Visual Basic</h3>
<p>
When you open a linked or embedded document for editing, you <i>activate </i>the object. For example, you’ve probably already seen that when you double-click an embedded OLE object, the component in which that object was created opens so that you can edit the object. An advantage to working with OLE objects in Visual Basic is that you can control when and how an OLE object is activated, rather than leaving it up to the user.</p>
<p>
You activate an OLE object in Visual Basic by setting its <b>Action</b> property to <b>acOLEActivate</b>. For example, you could set an OLE object’s <b>Action </b>property within a command button’s Click event procedure. When the user clicks the command button, the object is activated.</p>
<p>
When you activate an OLE object, the object takes the operation specified by its verb. A <i>verb</i> specifies how an OLE object behaves when it’s activated. For example, the verb determines whether the OLE object is opened for editing once it is activated. An OLE object can have a number of verbs. You specify which verb to use by setting the OLE object’s <b>Verb</b> property.</p>
<p>
The following example activates an embedded OLE object for editing. To try this example, create an unbound object frame named OLEUnbound0 on a form and embed a document, such as a Microsoft Word document. Add a command button named Activate to the form and add the following code to the command button’s OnClick event procedure. Then switch to Form view. When you click the Activate button, the document is activated for editing.</p>
<pre><code>Private Sub Activate_Click()

&#09;Dim ctl As Control
&#09;
&#09;Set ctl = Me!OLEUnbound0
&#09;With ctl
&#09;&#09;' Enable control.
&#09;&#09;.Enabled = True
&#09;&#09;' Set Locked property to False.
&#09;&#09;.Locked = False
&#09;&#09;' Set Verb property to activate for editing.
&#09;&#09;.Verb = acOLEVerbShow
&#09;&#09;' Activate object.
&#09;&#09;.Action = acOLEActivate
&#09;End With
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Action </b>property or the <b>Verb</b> property, search the Help index for “Action property” or “Verb property.”</p>
<h4>Controlling How a User Activates an OLE Object</h4>
<p>
The <b>AutoActivate</b> property determines what the user must do to activate an OLE object. The default setting for the <b>AutoActivate</b> property is Double-Click, which specifies that the user can double-click the OLE object to activate it. If you set this property to GetFocus, the object is activated as soon as the user selects or tabs to it. To activate an OLE object whose <b>AutoActivate</b> property is set to Manual, the user must select the object, point to the appropriate object type on the <b>Edit</b> menu, and then click one of the verbs listed on the submenu. To set this property in Visual Basic, use one of the following constants: <b>acOLEActivateDoubleClick</b>, <b>acOLEActivateGetFocus</b>, or <b>acOLEActivateManual</b>.</p>
<p>
You can set both the <b>AutoActivate</b> and <b>Action</b> properties for an OLE object. For example, you can set the <b>AutoActivate</b> property to one of these constants to determine how the user may activate the object, and also set the <b>Action</b> property to activate the object during a particular event.</p>
<p>
To prevent a user from activating an embedded OLE object by double-clicking it, you can change the setting of the <b>AutoActivate</b> property within the DblClick event of the bound or unbound object frame that contains the embedded object. For example, embed an OLE object in an unbound object frame on a form and enter the following code in the form module. Then switch to Form view. When you double-click the embedded OLE object, it is not activated. This would not prevent a user from activating the object from the <b>Edit</b> menu, however.</p>
<pre><code>Private Sub OLEUnbound0_DblClick(Cancel As Integer)

&#09;Dim ctl As Control

&#09;Set ctl = Me!OLEUnbound0
&#09;With ctl
&#09;&#09;.AutoActivate = acOLEActivateManual
&#09;End With
End Sub
</code></pre>
<p>
You can then activate the OLE object from within a different event by setting the <b>Action</b> property to <b>acOLEActivate</b>, as shown in previous examples.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>AutoActivate</b> property, search the Help index for “AutoActivate<b> </b>property.”</p>
<h4>In-Place Activation</h4>
<p>
Some OLE objects can be activated from within the control that contains the object—a bound or unbound object frame. When such an object is activated, the user can edit the object, or perform some other action, without leaving Microsoft Access. For example, you could edit an embedded OLE object that was created in Microsoft Word without having to leave Microsoft Access. This feature is called <i>in-place activation.</i></p>
<p>
For an OLE object to be activated in place, the following must be true:
<ul>
<li>
The object must have been created in an OLE server that supports in-place activation.</li>
<li>
The object must be displayed in a bound or unbound object frame on a form that is open in Form view.</li>
<li>
The bound or unbound object frame’s <b>Enabled</b> property must be set to Yes.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If the <b>Locked</b> property of an embedded OLE object is set to Yes, you will be able to edit the object, but any changes that you make will be discarded when the object is deactivated. If the object is linked and not embedded, you can activate it in place, but you cannot edit it in place.</p>
<h4>Returning an OLE Object’s Verbs</h4>
<p>
The list of verbs an OLE object supports will vary, depending on the type of object and its current state. If you know which verbs an object supports, you can present a list of available actions to the user.</p>
<p>
See Also&nbsp;&nbsp;&nbsp;For more information on the verbs supported by an OLE object, consult the documentation for the application that provides the object. </p>
<p>
You can use the <b>Action</b>, <b>ObjectVerbsCount</b>, and <b>ObjectVerbs</b> properties to return the list of verbs supported by an OLE object. Setting the <b>Action </b>property to <b>acOLEFetchVerbs </b>populates the <b>ObjectVerbs </b>property with an array containing all the supported verbs. You can use the <b>ObjectVerbsCount</b> property to determine the number of elements in the array, and then return each verb value from the array one at a time. The <b>ObjectVerbsCount</b> property returns the number of verbs supported by the object, starting with 0.</p>
<p>
For example, the following function returns the verbs supported by an OLE object displayed in a bound object frame or an unbound object frame.</p>
<pre><code>Function GetVerbs(ctl As Control) As Integer

&#09;Dim obj As Object
&#09;Dim intX As Integer, strGetVerb As String

&#09;Const conNoOLEObject As Integer = 2771
&#09;
&#09;On Error GoTo ErrorHandler
&#09;If (ctl.ControlType = acObjectFrame) Or (ctl.ControlType = acBoundObjectFrame) Then
&#09;&#09;ctl.Action = acOLEFetchVerbs
&#09;&#09;For intX = 0 To ctl.ObjectVerbsCount - 1
&#09;&#09;&#09;strGetVerb = strGetVerb &amp; vbCrLf &amp; ctl.ObjectVerbs(intX)
&#09;&#09;Next intX
&#09;&#09;MsgBox &quot;Object Verbs for '&quot; &amp; ctl.Name &amp; &quot;':&quot; &amp; vbCrLf &amp; strGetVerb
&#09;&#09;GetVerbs = ctl.ObjectVerbsCount
&#09;Else
&#09;&#09;MsgBox &quot;Control '&quot; &amp; ctl.Name &amp; &quot;' has no verbs and &quot; &amp; vbCrLf &amp; _
&#09;&#09;&#09;&quot; is not an OLE object.&quot;
&#09;&#09;Exit Function
&#09;End If
&#09;Exit Function

ErrorHandler:
&#09;If Err = conNoOLEObject Then
&#09;&#09;MsgBox Err &amp; &quot;: &quot; &amp; vbCrLf &amp; Err.Description
&#09;Else
&#09;&#09;MsgBox &quot;Unknown error.&quot;
&#09;End If
&#09;Exit Function
End Function
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Action</b>, <b>ObjectVerbsCount</b>, and <b>ObjectVerbs</b> properties, search the Help index for the name of the property.</p>
<h3>Determining When an OLE Object Is Updated</h3>
<p>
Whenever the data in an OLE object has been modified, the Updated event occurs in the control that contains the object. This event returns a value telling you whether the data has been changed or saved by the component that created it. The Updated event also occurs when a file that an OLE object is linked to is closed or renamed, or when the source file that contains the linked object is closed or renamed.</p>
<p>
For example, the following code determines what kind of update occurred and displays an appropriate message:</p>
<pre><code>Private Sub OLEUnbound0_Updated(Code As Integer)
&#09;Select Case Code
&#09;&#09;Case acOLEChanged
&#09;&#09;&#09;MsgBox &quot;OLE object file has been changed.&quot;
&#09;&#09;Case acOLESaved
&#09;&#09;&#09;MsgBox &quot;OLE object file has been saved.&quot;
&#09;&#09;Case acOLEClosed
&#09;&#09;&#09;MsgBox &quot;OLE object file has been closed.&quot;
&#09;&#09;Case acOLERenamed
&#09;&#09;&#09;MsgBox &quot;OLE object file has been renamed.&quot;
&#09;End Select
End Sub
</code></pre>
<p>
You can also use the <b>UpdateOptions</b> property to specify when a linked OLE object is updated. By default, the object is updated each time the linked data changes. You can change the property setting so that the object is updated each time any part of the linked document changes. When the <b>Action</b> property for the OLE object is set to <b>acOLEUpdate</b>, the OLE object is automatically updated. The <b>OLE/DDE Links</b> command (<b>Edit</b> menu) displays a dialog box where you can immediately update a linked OLE object or specify whether a linked OLE object is automatically updated.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the Updated event or the <b>UpdateOptions</b> property, search the Help index for “Updated event” or “UpdateOptions property.”</p>
<h3>Displaying the Insert Object and Paste Special Dialog Boxes</h3>
<p>
You can use the <b>Action</b> property to display the <b>Insert Object</b> or <b>Paste Special</b> dialog box to a user. The <b>Insert Object</b> dialog box presents a list of available OLE object types and creates an OLE object based on the user’s selection. The <b>Paste Special</b> dialog box allows the user to paste an OLE object, or part of an OLE object—such as a certain range of cells from a spreadsheet—from the Clipboard into a control.</p>
<p>
To display the <b>Insert Object</b> or <b>Paste Special</b> dialog box at run time, set the <b>Action</b> property to a defined constant. To display the <b>Insert Object</b> dialog box, set the <b>Action</b> property to <b>acOLEInsertObjDlg</b>; to display the <b>Paste Special</b> dialog box, set the <b>Action</b> property to <b>acOLEPasteSpecialDlg</b>. You can check the setting of the <b>OLEType</b> property to determine what type of OLE object is in a control.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OLEType property setting</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Control contents</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">acOLELinked</b></td>
<TD>
Linked object</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">acOLEEmbedded</b></td>
<TD>
Embedded object</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">acOLENone</b></td>
<TD>
No object</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
For example, create a form with an unbound object frame control named OLEUnbound0 and two command buttons, InsertObject and PasteSpecial. For both command buttons, set the <b>OnClick</b> event property to [Event&nbsp;Procedure], then enter the following code in the form module. When the user clicks one of the buttons, Microsoft Access displays the appropriate dialog box.</p>
<pre><code>Private Sub InsertObject_Click()
&#09;On Error GoTo Err_InsertError
&#09;' Display Insert Object dialog box.
&#09;Me!OLEUnbound0.Action = acOLEInsertObjDlg
&#09;Exit Sub

Err_InsertError:
&#09;MsgBox &quot;Insert operation not completed.&quot;
&#09;Resume Next
End Sub

Private Sub PasteSpecial_Click()
&#09;On Error GoTo Err_PasteError
&#09;' Display Paste Special dialog box.
&#09;Me!OLEUnbound0.Action = acOLEPasteSpecialDlg
&#09;Exit Sub

Err_PasteError:
&#09;MsgBox &quot;Paste operation not completed.&quot;
&#09;Resume Next
End Sub
</code></pre>
<h3>Using the Object Property</h3>
<p>
As discussed earlier in this chapter, some components that support Automation also support OLE. For example, Microsoft Excel supports both. Using Visual Basic in Microsoft Access, you can work with the objects in the Microsoft Excel object model. You can also link or embed Microsoft Excel files in Microsoft Access forms and reports.</p>
<p>
If you’ve embedded or linked a document created in a component that also supports Automation, such as Microsoft Excel, you can work with objects associated with that document much as you would if you were performing Automation. You can use the <b>Object</b> property to set and retrieve the properties of an object and apply its methods. The <b>Object</b> property returns an object reference to an Automation object that is related to the linked or embedded document.</p>
<p>
To illustrate this concept, create a Microsoft Excel spreadsheet with some data in the first worksheet and embed the .xls document in an unbound object frame named OLEUnbound0 on a form. Create a button named EditSpreadsheet on the form, set its <b>OnClick</b> event property to [Event Procedure], and enter the following code into the form module. When the user clicks on the EditSpreadsheet button, the Microsoft Excel worksheet is activated and the data in cells in the first row is formatted in bold.</p>
<pre><code>Private Sub EditSpreadsheet_Click()

&#09;Dim ctl As Control, wks As Excel.Worksheet
&#09;Dim intI As Integer
&#09;
&#09;' Return reference to control containing OLE object.
&#09;Set ctl = Me!OLEUnbound0
&#09;' Activate OLE object.
&#09;ctl.Action = acOLEActivate
&#09;' Return reference to embedded Worksheet object.
&#09;Set wks = ctl.Object.Application.Workbooks(1).Worksheets(1)
&#09;' Initialize integer variable to 1.
&#09;intI = 1
&#09;' Check whether there is data in cells in first row.

&#09;Do Until IsEmpty(wks.Cells(1, intI).Value)
&#09;&#09;' Set font to bold.
&#09;&#09;wks.Cells(1, intI).Font.Bold = True
&#09;&#09;' Increment integer variable.
&#09;&#09;intI = intI + 1
&#09;Loop
End Sub
</code></pre>
<p>
In this example, the <b>Object</b> property returns an object reference to the <b>Worksheet</b> object that represents the embedded Microsoft Excel worksheet. Once you have a reference to a <b>Worksheet</b> object, you can set and retrieve its properties and apply its methods through Automation.</p>
</FONT></FONT></BODY>
</HTML>

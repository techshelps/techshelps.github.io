<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generating Errors with the Err Object</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="generatingerrorswitherrobject"></a>Generating Errors with the Err Object</h2>
<p>
You can generate a specific error in your code with the <b>Raise</b> method of the <b>Err</b> object. You’ve already seen this statement used to regenerate the current error in error-handling code. However, you can simulate any Visual Basic run-time error by passing the error code for that error to the <b>Raise</b> method. For example:</p>
<pre><code>Err.Raise Number:=71&#09;&#09;&#09;' Simulate &quot;Disk not ready&quot; error.
</code></pre>
<p>
This is useful when you are testing your application, or when you want to treat a particular condition as being equivalent to a run-time error. For example, when a module calls routines in a dynamic-link library (DLL), you may want error values returned from the DLL routines to be handled as actual Visual Basic errors by the rest of your application.</p>
<p>
You can also use the <b>Raise</b> method of the <b>Err</b> object to generate your own, user-defined errors by supplying an error code that doesn’t correspond to a Visual Basic run-time error code. Your error-handling code can handle the errors you’ve defined.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Raise</b> method, search the Help index for “Raise method.”</p>
<p>
The <b>CVErr</b> function provides similar functionality. You can use the <b>CVErr</b> function to raise a user-defined error, or to defer handling of a run-time error. For example, you can create a function that evaluates its arguments to make sure they are the proper data type. If they are not, you can use the <b>CVErr</b> function to return an error number that you can respond to in an error-handling routine elsewhere in your code.</p>
<pre><code>Function DoubleNum(intNum)
&#09;If IsNumeric(intNum) Then
&#09;&#09;DoubleNum = intNum * 2&#09;&#09;&#09;&#09;' Return result.
&#09;Else
&#09;&#09;DoubleNum = CVErr(30000)&#09;&#09;&#09;' Return a user-defined error.
&#09;End If
End Function
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>CVErr</b> function, search the Help index for “CVErr function.”</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You need to make sure that your error numbers don’t conflict with error numbers in Visual Basic or other Microsoft Basic products. ActiveX controls, formerly called OLE<i> </i>controls or custom controls<i>,</i> may also define their own error numbers. To avoid conflicts with them, consult the documentation for any ActiveX controls you use in your application.</p>
</FONT></FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Documenting Your Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="documentingyourdatabase"></a>Documenting Your Database</h2>
<p>
Before you distribute your database to users, you may want to document the objects in your database; the underlying structure, or schema, of your application; and any Data Access Objects (DAO) objects, methods, and properties. This is sometimes called <i>mapping</i> the database. When you have a complete map of your database, it’s easier to modify the database and to write applications that manipulate the data.</p>
<p>
If you just need information about application objects that appear in the user interface, you can use the Documenter (<b>Tools</b> menu, <b>Analyze</b> submenu) to produce a report on those objects. However, to obtain information about the DAO objects, properties, and methods that can’t be manipulated by way of the user interface, you must use Visual Basic.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the Documenter, search the Help index for “Documenter.”</p>
<p>
Because DAO objects are organized in a hierarchy of nested containers, you can map the database by walking through the hierarchy with a series of nested <b>For...Each</b> loops. Each element in the collection can be accessed with a statement block with the following syntax:</p>
<p>
<b>For Each</b> <i>object</i> <b>In</b> <i>collection</i></p>
<p>
&#09;<i>statements</i>&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Map the properties of the <i>object</i>.</p>
<p>
<b>Next</b> <i>object</i></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on individual properties that are exposed when you map a database, search the Help index for the name of the property.</p>
<p>
The following code maps the current database. For brevity, the <b>Attributes</b> property is fully mapped only for each <b>TableDef</b> object. If you want to map attributes of the other objects, simply use the code for the <b>TableDef</b> object attributes as a model and insert the appropriate statements. This example assumes that the user running this code has at least Read Design permission on all tables in the database.</p>
<pre><code>Sub MapDatabase()
&#09;Dim dbs As Database, tdf As TableDef, fld As Field
&#09;Dim idx As Index, rel As Relation
&#09;Dim intX As Integer

&#09;Set dbs = CurrentDb

&#09;' Map the Database properties.
&#09;Debug.Print &quot;DATABASE&quot;
&#09;Debug.Print &quot;Name: &quot;, dbs.Name
&#09;Debug.Print &quot;Connect string: &quot;, dbs.Connect
&#09;Debug.Print &quot;Transactions supported?: &quot;, dbs.Transactions
&#09;Debug.Print &quot;Updatable?: &quot;, dbs.Updatable
&#09;Debug.Print &quot;Sort order: &quot;, dbs.CollatingOrder
&#09;Debug.Print &quot;Query time-out: &quot;, dbs.QueryTimeout

&#09;' Map the TableDef objects.
&#09;Debug.Print &quot;TABLEDEFS&quot;
&#09;For Each tdf in dbs.TableDefs
&#09;&#09;Debug.Print &quot;Name: &quot;, tdf.Name
&#09;&#09;Debug.Print &quot;Name: &quot;, tdf.DateCreated,
&#09;&#09;Debug.Print &quot;Name: &quot;, tdf.LastUpdated,
&#09;&#09;If tdf.Updatable = True Then
&#09;&#09;&#09;Debug.Print &quot;Updatable&quot;,
&#09;&#09;Else
&#09;&#09;&#09;Debug.Print &quot;Not Updatable&quot;,
&#09;&#09;End If

&#09;&#09;' Show the TableDef Attributes.
&#09;&#09;Debug.Print Hex$(tdf.Attributes)
&#09;&#09;If (tdf.Attributes And dbSystemObject) &lt;&gt; 0 Then
&#09;&#09;&#09;Debug.Print &quot;System object&quot;
&#09;&#09;End If
&#09;&#09;If (tdf.Attributes And dbAttachedTable) &lt;&gt; 0 Then
&#09;&#09;&#09;Debug.Print &quot;Linked table&quot;
&#09;&#09;End If
&#09;&#09;If (tdf.Attributes And dbAttachedODBC) &lt;&gt; 0 Then
&#09;&#09;&#09;Debug.Print &quot;Linked ODBC table&quot;
&#09;&#09;End If
&#09;&#09;If (tdf.Attributes And dbAttachExclusive)&lt;&gt; 0 Then
&#09;&#09;&#09;Debug.Print &quot;Linked table opened in exclusive mode&quot;
&#09;&#09;End If

&#09;&#09;' Map Fields for each TableDef object.
&#09;&#09;Debug.Print &quot;FIELDS&quot;
&#09;&#09;For Each fld in tdf.Fields
&#09;&#09;&#09;Debug.Print &quot;Name: &quot;, fld.Name
&#09;&#09;&#09;Debug.Print &quot;Type: &quot;, fld.Type
&#09;&#09;&#09;Debug.Print &quot;Size: &quot;, fld.Size
&#09;&#09;&#09;Debug.Print &quot;Attribute Bits: &quot;, Hex$(fld.Attributes)
&#09;&#09;&#09;Debug.Print &quot;Collating Order: &quot;, fld.CollatingOrder
&#09;&#09;&#09;Debug.Print &quot;Ordinal Position: &quot;, fld.OrdinalPosition
&#09;&#09;&#09;Debug.Print &quot;Source Field: &quot;, fld.SourceField
&#09;&#09;&#09;Debug.Print &quot;Source Table: &quot;, fld.SourceTable

&#09;&#09;&#09;' Show the Field Attributes here.
&#09;&#09;&#09;Debug.Print Hex$(fld.Attributes)
&#09;&#09;&#09;If (fld.Attributes And dbSystemObject) &lt;&gt; 0 Then
&#09;&#09;&#09;&#09;Debug.Print &quot;System Object&quot;
&#09;&#09;&#09;End If
&#09;&#09;Next fld&#09;&#09;&#09;' Get the next Field in the TableDef object.

&#09;&#09;' Map Indexes for each TableDef object.
&#09;&#09;Debug.Print &quot;INDEXES&quot;
&#09;&#09;For Each idx in tdf.Indexes
&#09;&#09;&#09;' Set the Index variable.
&#09;&#09;&#09;Set idx = tdf.Indexes(intX)
&#09;&#09;&#09;Debug.Print &quot;Name: &quot;, idx.Name
&#09;&#09;&#09;Debug.Print &quot;Clustered: &quot;, idx.Clustered
&#09;&#09;&#09;Debug.Print &quot;Foreign: &quot;, idx.Foreign
&#09;&#09;&#09;Debug.Print &quot;IgnoreNulls: &quot;, idx.IgnoreNulls
&#09;&#09;&#09;Debug.Print &quot;Primary: &quot;, idx.Primary
&#09;&#09;&#09;Debug.Print &quot;Unique: &quot;, idx.Unique
&#09;&#09;&#09;Debug.Print &quot;Required: &quot;, idx.Required
&#09;&#09;&#09;' Map the Fields of the Index.
&#09;&#09;&#09;For Each fld in idx.Fields
&#09;&#09;&#09;&#09;Debug.Print &quot;Name: &quot;, fld.Name
&#09;&#09;&#09;Next fld&#09;&#09;' Get the next Field in the Index.
&#09;&#09;Next idx&#09;&#09;&#09;' Get the next Index in the TableDef object.
&#09;Next tdf&#09;&#09;&#09;&#09;' Get next TableDef in the Database.

&#09;' Map the Relation objects.
&#09;Debug.Print &quot;RELATIONS&quot;
&#09;For Each rel in dbs.Relations
&#09;&#09;Debug.Print &quot;Name: &quot;, rel.Name
&#09;&#09;Debug.Print &quot;Attributes: &quot;, rel.Attributes&#09;
&#09;&#09;Debug.Print &quot;Table: &quot;, rel.Table
&#09;&#09;Debug.Print &quot;ForeignTable: &quot;, rel.ForeignTable
&#09;&#09;' Map the Fields of the Relation objects.
&#09;&#09;For Each fld in rel.Fields
&#09;&#09;&#09;Debug.Print &quot;Name: &quot;, fld.Name
&#09;&#09;&#09;Debug.Print &quot;ForeignName: &quot;, fld.ForeignName
&#09;&#09;Next fld&#09;&#09;&#09;' Get the next Field in the Relation object.
&#09;Next rel&#09;&#09;&#09;&#09;' Get next Relation object in the Database.
End Sub
</code></pre>
</FONT></FONT></BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C++ and C Programming</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>C++ and C Programming</H1><P CLASS="t">While the examples in the <I>OLE 2 Programmer's Reference</I> were written in C++, the examples in this chapter were written in standard C. The following list describes some of the differences you will encounter.</P>
<UL><LI CLASS="ULI1">Reference data types (such as REFCLSID and REFIID) must be used in standard C with a prepended ampersand (&amp;). In C++, these data types are often&nbsp;used with C++ references, so the ampersand is not required. Because references do not exist in standard C, an explicit address-of operator (the ampersand) is required.
<P CLASS="lt1">For example, the CoCreateInstance function uses both a class ID reference (REFCLSID) and an interface ID reference (REFIID) as arguments. In C++, the call to this function can be written as:</P>


<pre><code><FONT FACE="Courier" SIZE="2">CoCreateInstance(CLSID_ExcelApp, NULL, CLSCTX_LOCAL_SERVER,
    IID_IDispatch, &amp;pdispExcelApp);
</FONT></code></pre>
<P CLASS="lt1">In standard C, however, you must use the address-of operator with the first and fourth arguments:</P>


<pre><code><FONT FACE="Courier" SIZE="2">CoCreateInstance(&amp;CLSID_ExcelApp, NULL, CLSCTX_LOCAL_SERVER,
    &amp;IID_IDispatch, &amp;pdispExcelApp);
</FONT></code></pre></LI><LI CLASS="ULI1">In C++, you can call a class member function directly using the member-selection operator (-&gt;). In standard C, classes are defined as structures; each structure contains an lpVtbl element that is a pointer to the table of class functions. You must first access the lpVtbl element of the structure and then call the function using a pointer. In addition, the first argument to the function must be the object pointer itself.
<P CLASS="lt1">For example, when you are done with an object you have created with the CoCreateInstance function, you should free it with the Release function. In C++, you can call this function directly:</P>


<pre><code><FONT FACE="Courier" SIZE="2">pdisp-&gt;Release();
</FONT></code></pre>
<P CLASS="lt1">In standard C, you call the function using the lpVtbl pointer and pass in the dispatch object as the first argument:</P>


<pre><code><FONT FACE="Courier" SIZE="2">(*(pdisp-&gt;lpVtbl-&gt;Release))(pdisp);
</FONT></code></pre></LI><LI CLASS="ULI1">In C++, you can use the Microsoft Foundation Class library and the ClassWizard in Visual C++ to access OLE methods and properties as member functions of a base class. This simplifies much of the work required to access OLE objects with the IDispatch interface. For more information about using the ClassWizard, see the Visual C++ documentation.</LI></UL><P></P>
<P></P>
<P></P>
<P></P></FONT>
</FONT></BODY></HTML>

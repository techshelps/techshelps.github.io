<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dictator Add-Ins</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Dictator Add-Ins</H2><P CLASS="t">Dictator add-ins (often called applications) are much easier to test. (IMPORTANT: "easier" does not necessarily mean "easy"; the term is relative to&nbsp;the committee add-in.) This is because in a dictator add-in you provide the exact functionality your add-in needs and take away all other options.</P>
<P CLASS="t">Dictator add-ins require a heavy emphasis on Microsoft Excel workspace issues. This involves removing or hiding the standard interface items (menus/toolbars) and replacing them with your own. Before doing this, your dictator add-in should save the current workspace. Your add-in can then implement one or more workspaces for its own use and restore the original workspace when exiting.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Here are the steps you take when your add-in loads:</P>
<UL><LI CLASS="ULI1">Take a snapshot of the user's configuration (save workspace).</LI><LI CLASS="ULI1">Modify interface elements as needed for your add-in.</LI><LI CLASS="ULI1">Allow the user to run your add-in.</LI><LI CLASS="ULI1">Trap exiting Microsoft Excel (and provide a way to quit your add-in).</LI><LI CLASS="ULI1">Return Microsoft Excel to its original state before your add-in ends.</LI></UL><P></P>
<P CLASS="t">The following is a list of workspace items that a dictator add-in may need to track:</P>
<UL><LI CLASS="ULI1">Workbooks currently open</LI><LI CLASS="ULI1">Visible CommandBars</LI><LI CLASS="ULI1">Formula bar</LI><LI CLASS="ULI1">Status bar</LI><LI CLASS="ULI1">Sheet tabs</LI><LI CLASS="ULI1">Scroll bars</LI><LI CLASS="ULI1">Gridlines</LI><LI CLASS="ULI1">Calculation mode</LI><LI CLASS="ULI1">Comment indicator</LI><LI CLASS="ULI1">Drag-and-Drop</LI><LI CLASS="ULI1">Link updating mode</LI><LI CLASS="ULI1">Reference Style</LI><LI CLASS="ULI1">Current Directory</LI><LI CLASS="ULI1">Ignore Other Applications</LI></UL><P></P>
<P CLASS="t">All of these items must be saved so that they can be restored to their original state when your add-in closes; the only question is where they should be saved. There are two commonly used approaches for saving the workspace. The first involves storing workspace settings in variables. The second involves storing them on a worksheet.</P>
<P CLASS="t">In theory, the advantage of using variables is that it makes workspace operations faster. In practice, the time differential may not be large enough to notice. Using array variables does make it much easier to implement multiple workspaces.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Multiple workspaces are useful when you are displaying several different sheets to the user, each of which needs different settings. For instance, you may have a data entry sheet where you wish to suppress the drag-and-drop function, row and column headers, sheet tabs, scroll bars, and the formula bar. You may then build a&nbsp;schedule sheet and an output table where you want different combinations of these settings. If you store all of these workspace settings in an array during startup, you can quickly switch among them at run time.</P>
<P CLASS="t">Most developers will implement this with a user-defined type structure, as shown below:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Option Explicit

'''    This type structure specifies all of the workspace
'''    settings that are being stored.
Type WORKSPACE_STORAGE
    bRowAndColHeaders As Boolean
    bHorzScrollBar As Boolean
    bVertScrollBar As Boolean
    bSheetTabs As Boolean
    bFormulaBar As Boolean
    bStatusBar As Boolean
    ''' Many more settings follow
End Type

'''    This variable will be used to store the workspace 
'''    settings. Note that it is declared as an array so 
'''    that multiple workspaces can be stored.
Dim muWorkspace() As WORKSPACE_STORAGE
</FONT></code></pre></FONT>
</FONT></BODY></HTML>

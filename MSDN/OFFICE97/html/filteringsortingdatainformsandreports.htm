<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filtering and Sorting Data in Forms 
and Reports</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="filteringsortingdatainformsandreports"></a>Filtering and Sorting Data in Forms and Reports</h2>
<p>
One of the most important functions of a database application is to make it easy for users to find the data they need to use or change. For example, in the Orders sample application, users need a way to find existing orders easily. Microsoft Access provides powerful tools for users to find, filter, and sort records. Depending on your users’ needs, you can allow them to use existing tools, or provide your own ways to accomplish these tasks.</p>
<p>
This section describes the following approaches to filtering and sorting data in your application:</p>
<p>
Using Standard Filter and Sort Commands   If you make the <b>Filter By Selection</b>, <b>Filter By Form</b>, and <b>Sort</b> commands available on your application’s forms, users can easily filter and sort records themselves. If you want, you can customize these features by responding to events.</p>
<p>
Opening a Form or Report with a Filter   You can use a number of methods to open forms or reports in your application so that they show a subset of records.</p>
<p>
Changing the Filter or Sort Order of a Form or Report   After a form or report is open, you can change the filter or sort order in code, or apply or remove the filter.</p>
<p>
If you have special needs for finding and filtering data in your application, you may want to provide your own filtering interface. In this case, you’ll use a combination of the previous techniques, creating your own forms where users can specify the records they want to see. For example, you may know that there are only a few fields the user wants to filter on. By displaying your own form, you can provide a straightforward interface for filtering on important fields while ignoring others.</p>
<h3>Using Standard Filter and Sort Commands</h3>
<p>
Unless you set properties or change menus and toolbars to make them unavailable, the following filter and sort commands are available on the <b>Records</b> menu and the toolbar in Form view:
<ul>
<li>
<b>Filter By Selection</b></li>
<li>
<b>Filter By Form</b></li>
<li>
<b>Advanced Filter/Sort</b></li>
<li>
<b>Apply Filter/Sort</b></li>
<li>
<b>Remove Filter/Sort</b></li>
<li>
<b>Sort Ascending</b></li>
<li>
<b>Sort Descending</b></li>
</ul>
<p>
Using these commands, users of your application can easily filter and sort records themselves. When a user applies a filter or sort order using these commands, Microsoft Access sets the <b>Filter</b>, <b>FilterOn</b>, <b>OrderBy</b>, and <b>OrderByOn</b> properties for the form accordingly, and requeries records on the form.</p>
<p>
<img src="abac03_17.gif" border=0></p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When a user changes the filter or sort order of a form and then closes the form, Microsoft Access saves this information. The last sort order saved is reapplied automatically the next time the form is opened, and the user can reapply the last filter saved by clicking the <b>Apply Filter</b> button.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Filter By Selection</b>, <b>Filter By Form</b>, or <b>Advanced Filter/Sort</b> commands, search the Help index for the name of the command.</p>
<h4>Disabling Filter and Sort Features</h4>
<p>
In some cases, you don’t want users of your application to filter records. To disable the standard filtering commands on a form, set the <b>AllowFilters</b> property to No.</p>
<p>
If you want to disable sorting, or if you want to disable some filtering features while allowing others, create custom menu bars and toolbars for your form that include the commands and buttons you want and leave off the ones you don’t want to make available.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on custom menu bars and toolbars, see Chapter 1, <a href="creatingapplication.htm">“Creating an Application.”</a></p>
<h4>Responding to Filter Events</h4>
<p>
If you want to change the way that standard filtering and sorting commands work, you can write event procedures for the Filter and ApplyFilter events. For example, you may want to display a message each time a user uses the <b>Filter By Form</b> or the <b>Advanced Filter/Sort</b> command for a form to remind the user to specify criteria and then apply the filter.</p>
<p>
If you want to display a message or take other action when a user uses the <b>Filter By Form</b> or <b>Advanced Filter/Sort</b> command, write an event procedure for the Filter event. To help you respond to each command, the Filter event procedure has a FilterType argument that tells you which of these commands was selected.</p>
<p>
If you want to cancel the filtering command the user chose, you can set the Cancel argument for the event procedure to <b>True</b>.</p>
<p>
The following event procedure compares the FilterType argument to the <b>acFilterByForm</b> and <b>acFilterAdvanced</b> constants to display a different message to the user depending on which filtering command was chosen.</p>
<pre><code>Private Sub Form_Filter(Cancel As Integer, FilterType As Integer)
&#09;Dim strMsg As String

&#09;Select Case FilterType
&#09;&#09;Case acFilterByForm
&#09;&#09;&#09;strMsg = &quot;Specify the records you want to see by choosing &quot;
&#09;&#09;&#09;strMsg = strMsg &amp; &quot;from the lists, then click Apply Filter.&quot;

&#09;&#09;Case acFilterAdvanced
&#09;&#09;&#09;strMsg = &quot;Drag fields to the filter design grid, specify &quot;
&#09;&#09;&#09;strMsg = strMsg &amp; &quot;criteria and sort order, then click &quot; 
&#09;&#09;&#09;strMsg = strMsg &amp; &quot;Apply Filter.&quot;
&#09;End Select
&#09;MsgBox strMsg&#09;&#09;&#09;&#09;&#09;' Display the message.
End Sub
</code></pre>
<p>
If you want to display a message or take other action when a user applies or changes a filter, write an event procedure for the ApplyFilter event. This event occurs whenever a user chooses the <b>Apply Filter/Sort</b>, <b>Remove Filter/Sort</b>, or<b> Filter By Selection</b> command, and whenever the user closes the Filter window without applying the filter. The ApplyFilter event procedure has an ApplyType argument that tells you which of these actions was taken so you can respond in different ways.</p>
<p>
If you want to cancel the filtering command the user chose, you can set the Cancel argument for the event procedure to<b> True</b>, and the filter won’t be applied.</p>
<p>
The following event procedure displays a message if the user is applying a filter. The message shows the setting of the <b>Filter</b> property and gives the user a chance to cancel the operation.</p>
<pre><code>Private Sub Form_ApplyFilter(Cancel As Integer, ApplyType As Integer)
&#09;Dim strMsg As String, intResponse As Integer

&#09;If ApplyType = acApplyFilter Then
&#09;&#09;strMsg = &quot;You've chosen to filter for the following criteria:&quot;
&#09;&#09;strMsg = strMsg &amp; vbCrLf &amp; Me.Filter
&#09;End If

&#09;' Display the message box and get an OK or Cancel response.
&#09;intResponse = MsgBox(strMsg, vbOkCancel + vbQuestion)
&#09;If intResponse = vbCancel Then Cancel = True
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on arguments for the Filter events, search the Help index for “Filter event” and “ApplyFilter event.” For more information on events, see Chapter 6, <a href="respondingtoevents.htm">“Responding to Events.”</a></p>
<h5>Example</h5>
<h5>Customizing the Standard Filtering Interface</h5>
<p>
When a Northwind sales representative starts the Orders application, the Orders form opens for data entry (no existing records are available). To find an existing order in the database, the employee clicks the Filter Orders button on the Orders toolbar.</p>
<p>
You want the filtering interface on the Orders form to be as straightforward as possible. Because most fields aren’t appropriate for setting criteria, you don’t want the employee to worry about them. To make them less obtrusive, you can disable all the fields except those you expect a user to set criteria for.</p>
<p>
<img src="abac03_18.gif" border=0></p>
<p>
The Filter event procedure for the Orders form disables all but three fields (BillTo, EmployeeID, and OrderDate).</p>
<pre><code>Private Sub Form_Filter(Cancel As Integer, FilterType As Integer)
' If Filter By Form, disable all but three fields.

&#09;If FilterType = acFilterByForm Then
&#09;&#09;BillTo.SetFocus

&#09;Dim ctl As Control

&#09;For Each ctl In Me.Controls
&#09;&#09;Select Case ctl.ControlType
&#09;&#09;&#09;Case acTextBox, acComboBox, acOptionGroup, acSubForm
&#09;&#09;&#09;&#09;Select Case ctl.Name
&#09;&#09;&#09;&#09;&#09;Case &quot;BillTo&quot;, &quot;EmployeeID&quot;, &quot;OrderDate&quot;
&#09;&#09;&#09;&#09;Case Else
&#09;&#09;&#09;&#09;&#09;ctl.Enabled = False
&#09;&#09;&#09;&#09;End Select
&#09;&#09;End Select
&#09;Next ctl

&#09;DoCmd.ShowToolbar &quot;Orders Form Toolbar&quot;, acToolbarNo
&#09;End If

End Sub
</code></pre>
<p>
If you set properties in the Filter event procedure, be sure to reset them in the ApplyFilter event procedure.</p>
<pre><code>Private Sub Form_ApplyFilter(Cancel As Integer, ApplyType As Integer)
' Reset fields after filtering.

&#09;Dim ctl As Control

&#09;For Each ctl In Me.Controls
&#09;&#09;Select Case ctl.ControlType
&#09;&#09;&#09;Case acTextBox, acComboBox, acOptionGroup, acSubForm
&#09;&#09;&#09;&#09;Select Case ctl.Name
&#09;&#09;&#09;&#09;&#09;Case &quot;OrderID&quot;, &quot;Subtotal&quot;, &quot;Total&quot;
&#09;&#09;&#09;&#09;Case Else
&#09;&#09;&#09;&#09;&#09;ctl.Enabled = True
&#09;&#09;&#09;&#09;End Select
&#09;&#09;End Select
&#09;Next ctl

&#09;BillTo.SetFocus
&#09;DoCmd.ShowToolbar &quot;Orders Form Toolbar&quot;, acToolbarYes

End Sub
</code></pre>
<h5>Controlling Combo Boxes in Filter By Form</h5>
<p>
You can control whether text boxes on a form display suggested values in drop-down combo boxes in the Filter By Form window. For example, if you have a large set of records or if your data is stored on a network, you may want to prevent Microsoft Access from running queries to fill all the lists. By default, Filter By Form displays lists of values for indexed and non-indexed fields if the record source for the form is in the current database or a linked table, but doesn’t display them if the record source is a linked Open Database Connectivity (ODBC) database. To change this behavior, set the <b>FilterLookup</b> property for the text box in form Design view, or set Filter By Form options on the <b>Edit/Find</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu). </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on Filter By Form, search the Help index for “Filter By Form.”</p>
<h3>Opening a Form or Report with a Filter</h3>
<p>
When you use Visual Basic code or a macro to open a form or report, you may want to specify which records to display. This is especially useful for reports, because users can’t directly filter records in a report.</p>
<p>
When your application provides a customized way for users to open a form or print a report, you can specify the records to display in the form or report in several ways. A common approach is to display a custom dialog box where the user enters criteria for the form or report’s underlying query. To get the criteria, you refer to the controls in the dialog box. The following sections describe three ways you can use criteria entered in a custom dialog box to filter records.</p>
<h4>Using the <i>wherecondition</i> Argument</h4>
<p>
The <i>wherecondition</i> argument of the <b>OpenForm</b> or <b>OpenReport</b> method or action is the simplest way to get criteria in situations where a user is providing only one value. For example, the PrintInvoiceDialog form in the Orders sample application prompts users to select an OrderID for the invoice they want to print. If you’re using an event procedure, you can apply a filter that displays only one record by adding an argument to the <b>OpenReport</b> method, as shown in the following line of code:</p>
<pre><code>DoCmd.OpenReport &quot;Invoice&quot;, acViewPreview, , &quot;OrderID = &quot; &amp; OrderID
</code></pre>
<p>
The <code>&quot;OrderID = &quot;</code> in the filter expression refers to the OrderID field in the Invoice report’s underlying query. The <code>OrderID</code> on the right side of the expression refers to the value the user selected from the OrderID list box in the dialog box. The expression concatenates the two, causing the report to include only the invoice for the record the user selected.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the PrintInvoiceDialog form, see the example “Creating a Dialog Box to Print Invoices” earlier in this chapter.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you’re using a macro, you can use the following Where Condition argument in the OpenReport action that prints the report.</p>
<p>
OrderID = [Forms]![PrintInvoiceDialog]![OrderID]</p>
<p>
The <i>wherecondition</i> argument is applied only by the event procedure or macro specified for the OnClick event of the button that runs the <b>OpenForm</b> or <b>OpenReport</b> method or action. This gives you the flexibility of using any number of different dialog boxes to open the same form or report and applying different sets of criteria depending on what the user wants to do. For example, the user may want to print an invoice for a certain customer or view orders only for a certain product. If users open the form or report in the Database window rather than through your dialog box, however, no criteria are applied to the query and all its records are displayed or printed. To prevent this, you can hide the Database window by clearing the <b>Display Database Window</b> check box in the <b>Startup</b> dialog box (<b>Tools</b> menu).</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on Startup options, see “Setting Startup Options” in Chapter 1, “Creating an Application.”</p>
<p>
You can use the <i>wherecondition</i> argument to set criteria for more than one field, but if you do, the argument setting quickly becomes long and complicated. In those situations, specifying criteria in a query may be easier.</p>
<h4>Using a Query as a Filter </h4>
<p>
A separate query, sometimes called a <i>filter query</i>, can refer to the controls on your dialog box to get its criteria. Using this approach, you filter the records in a form or report by setting the <i>filtername</i> argument of the <b>OpenForm</b> or <b>OpenReport</b> method or action to the name of the filter query you create. The filter query must include all the tables in the record source of the form or report you’re opening. Additionally, the filter query must either include all the fields in the form or report you’re opening, or you must set its <b>OutputAllFields</b> property to Yes.</p>
<p>
For example, to create a filter query for the Invoice report, make a copy of the report’s underlying query and save it under another name. Then, add criteria to the OrderID field in the filter query that refers to the control on the dialog box. (If the filter query’s <b>OutputAllFields</b> property is set to Yes, this is the only field you need to include in the filter query as long as you include all the tables that contain fields on the report.)</p>
<p>
<img src="abac03_19.gif" border=0></p>
<p>
After you create and save the query you’ll use as a filter, set the <i>filtername</i> argument of the <b>OpenReport</b> method or action to the name of the filter query. The <i>filtername</i> argument applies the specified filter query each time the <b>OpenReport</b> method or action runs.</p>
<p>
Using a query as a filter to set the criteria has advantages similar to using the <i>wherecondition</i> argument of the <b>OpenForm</b> or <b>OpenReport</b> method or action. A filter query gives you the same flexibility of using more than one dialog box to open the same form or report and applying different sets of criteria depending on what a user wants to do. If users open the form or report in the Database window rather than through your dialog box, however, no criteria are applied to the query and all its records are displayed or printed. To prevent this, you can hide the Database window by clearing the <b>Display Database Window</b> check box in the <b>Startup</b> dialog box (<b>Tools</b> menu).</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on Startup options, see “Setting Startup Options” in Chapter 1, “Creating an Application.”</p>
<h4>Directly Referring to Dialog Box Controls in a Form or Report’s Underlying Query</h4>
<p>
You can also refer to the dialog box controls directly in the form or report’s underlying query instead of through the arguments of the <b>OpenForm</b> or <b>OpenReport</b> method or action. For example, instead of referring to the control on the PrintInvoiceDialog form in a filter query’s criteria as shown in the previous illustration, you can set the exact same criteria in the Invoice report’s underlying query, Invoices.</p>
<p>
Using this approach, the <b>OpenForm</b> or <b>OpenReport</b> method or action requires no <i>wherecondition</i> or <i>filtername</i> argument. Instead, each time you open a form or report, its underlying query looks for the dialog box to get its criteria. However, if a user opens the form or report in the Database window rather than through your dialog box, Microsoft Access displays a parameter box prompting the user for the dialog box value. To prevent this, you can hide the Database window by clearing the <b>Display Database Window</b> check box in the <b>Startup</b> dialog box (<b>Tools</b> menu).</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on Startup options, see “Setting Startup Options” in Chapter 1, “Creating an Application.”</p>
<h3>Changing the Filter or Sort Order of a Form or Report</h3>
<p>
After a form or report is open, you can change the filter or sort order in response to users’ actions by setting form and report properties in Visual Basic code or in macros. For example, you may want to provide a menu command or a toolbar button that users can use to change the records that are displayed. Or you may have an option group control on a form that users can use to select from common sorting options.</p>
<p>
To set the filter of a form or report, set its <b>Filter</b> property to the appropriate <i>wherecondition</i> argument, and then set the <b>FilterOn</b> property to <b>True</b>. To set the sort order, set the <b>OrderBy</b> property to the field or fields you want to sort on, and then set the <b>OrderByOn</b> property to <b>True</b>. If a filter or sort order is already applied on a form, you can change it simply by setting the <b>Filter</b> or <b>OrderBy</b> properties.</p>
<p>
When you apply or change the filter or sort order by setting these properties, Microsoft Access automatically requeries the records in the form or report. For example, the following code changes the sort order of a form based on a user’s selection in an option group:</p>
<pre><code>Private Sub SortOptionGrp_AfterUpdate()
&#09;Const conName = 0, conDate = 1

&#09;Select Case SortOptionGrp
&#09;&#09;Case conName
&#09;&#09;&#09;Me.OrderBy = &quot;LastName, FirstName&quot;&#09;&#09;' Sort by two fields.
&#09;&#09;Case conDate
&#09;&#09;&#09;Me.OrderBy = &quot;HireDate DESC&quot;&#09;&#09;&#09;&#09;' Sort by descending date.
&#09;End Select
&#09;Me.OrderByOn = True&#09;&#09;&#09;&#09;&#09;&#09;&#09;&#09;' Apply the sort order.
End Sub
</code></pre>
<p>
Whether the filter and sort order get set in code or by the user, you can apply or remove them by setting the <b>FilterOn</b> and <b>OrderByOn</b> properties to <b>True</b> or <b>False</b>. For example, you could add a button to a report’s custom toolbar that runs the following macro to apply or remove a filter you specified when opening the report.</p>
<p>
<img src="abac03_20.gif" border=0></p>
<h5>Example</h5>
<h5>Synchronizing Records by Changing the Filter</h5>
<p>
The Orders sample application controls which record appears in the ProductsPopup form by setting the form’s <b>Filter</b> property. You can keep the ProductsPopup form synchronized with the Orders form; this will make sure the ProductsPopup form always shows details about the current product when you move from record to record in the Orders subform.</p>
<p>
To do this, write an event procedure for the subform’s Current event that sets the pop-up form’s <b>Filter</b> property. (You can also do this by writing a macro you specify as the subform’s <b>OnCurrent</b> event property setting.) The following code example shows the event procedure for the Current event of the Orders subform. This event procedure uses the IsLoaded function from the UtilityFunctions module that is included with the Orders sample application.</p>
<pre><code>Private Sub Form_Current()
&#09;.
&#09;.
&#09;.
&#09;If IsLoaded(&quot;ProductsPopup&quot;) Then
&#09;&#09;' If there's no current product record, display a blank pop-up window,
&#09;&#09;' otherwise filter to show the current product.
&#09;&#09;If IsNull(ProductID) Then
&#09;&#09;&#09;strFilter = &quot;ProductID = 0&quot;
&#09;&#09;Else
&#09;&#09;&#09;Forms!ProductsPopup.Filter = &quot;ProductID = &quot; &amp; ProductID
&#09;&#09;End If
&#09;&#09;Forms!Orders.SetFocus&#09;&#09;&#09;&#09;&#09;' Set focus back to Orders subform.
&#09;&#09;Forms!Orders!OrdersSubform.SetFocus&#09;
&#09;End If
&#09;.
&#09;.
&#09;.
End Sub
</code></pre>
<p>
Each time a user changes records in the subform, the procedure resets the <b>Filter</b> property of the pop-up form, causing it to display the corresponding record.</p>
</FONT></FONT></BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>File Format Changes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>File Format Changes</H2><P CLASS="t">The file format has changed with Microsoft Excel&nbsp;97, but we have added some options to help you with the transition. You may save in any of the following formats:</P>
<UL><LI CLASS="ULI1">Microsoft Excel Workbook (the native Microsoft Excel&nbsp;97 format)</LI><LI CLASS="ULI1">Microsoft Excel&nbsp;5.0/95 Workbook (the prior file format)</LI><LI CLASS="ULI1">Microsoft Excel&nbsp;97 &amp; 5.0/95 Workbook (a dual format)</LI></UL><P></P>
<H3><A NAME="sec0"></A>Leaving Files in the Original Version of Microsoft Excel</H3><P CLASS="t">If your application does not require functionality that is specific to Microsoft Excel&nbsp;97, files may be left in their original version of Microsoft Excel. You will still need to check your applications to make sure they run properly in Microsoft Excel&nbsp;97.</P>
<P CLASS="t">If your applications are written in the Microsoft Excel&nbsp;4.0 macro language, this is a good time to upgrade them to Visual Basic.</P>
<P CLASS="t">Generally, applications that are not used often or those requiring a complicated rewrite would be candidates for this treatment. Note that saving applications in prior versions of Microsoft Excel may be a useful option while an organization is in the process of rolling out Microsoft Excel&nbsp;97.</P>
<H3><A NAME="sec1"></A>Saving a File in Microsoft Excel&nbsp;95 and&nbsp;97 Formats</H3><P CLASS="t">If users with different versions of Microsoft Excel must share an application or a file, the developer may choose to save a file with <I>both</I> file formats. Be aware that Microsoft Excel files saved in this manner will be larger because they contain both file formats.</P>
<P CLASS="t">The general rule of thumb for using this dual format is to use it when a Microsoft Excel&nbsp;97 user has edited a file with a feature available only in Microsoft Excel&nbsp;97 (such as conditional formatting) and Microsoft Excel&nbsp;95 users need to read the file, but do not need to save changes. If both users must be able to edit and save this file, it should be saved in the Microsoft Excel&nbsp;5.0/95 Workbook format. You must weigh the use of the dual-file format against the option of adding code to an application to mimic the Microsoft Excel&nbsp;97 functionality. For example, an "On.Entry" routine that formats the values in cells could emulate the conditional formatting that is built into Microsoft Excel&nbsp;97.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec2"></A>Batch-File Conversion</H3><P CLASS="t">Once users have migrated to Microsoft Excel&nbsp;97, many administrators will want to convert all older files so end users don't have to do it one file at a time. A batch-file converter that is provided with Microsoft Excel&nbsp;97 will convert entire directories of files to the Microsoft Excel&nbsp;97 format. This File Conversion Wizard is installed on the Wizard submenu of the Tools menu if the user chose to install this Wizard in Custom Setup.</P>
<H3><A NAME="sec3"></A>Backward Compatibility</H3><P CLASS="t">Microsoft Excel&nbsp;97 still supports running Microsoft Excel&nbsp;4.0 (XLM) macros with few changes. While Microsoft Excel&nbsp;4.0 macros still run in Microsoft Excel&nbsp;97, the Microsoft Excel&nbsp;4.0 macro language has not been updated to reflect the expanded object model and you can no longer record macros in the Microsoft Excel&nbsp;4.0 macro language. Correspondingly, support for the XLM macro language will grow increasingly difficult to come by (documentation is no longer provided with Microsoft Excel), so you may want to consider upgrading XLM applications to Visual Basic.</P></FONT>
</FONT></BODY></HTML>

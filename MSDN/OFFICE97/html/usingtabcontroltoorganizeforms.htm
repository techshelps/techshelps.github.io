<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Tab Control to Organize Forms</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="usingtabcontroltoorganizeforms"></a>Using the Tab Control to Organize Forms</h2>
<p>
You can use a <i>tab control</i> to present several pages of information on a single form. A tab control is useful when your form contains information that can be sorted into two or more categories. For example, the Employees form in the Northwind sample application uses a tab control to display two pages of information about employees.</p>
<p>
<img src="abac03_30.gif" border=0></p>
<p>
The tab control provides a user interface similar to Windows tabbed dialog boxes. Users switch between pages by clicking the corresponding tab on the top of the page. </p>
<h3>Adding a Tab Control to a Form</h3>
<p>
You add a tab control to a form in much the same way as you add other controls, except that each page on a tab control contains other controls. A tab control can’t contain other tab controls, but it’s possible to have two or more separate tab controls on a form.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When you add a tab control to a form, Microsoft Access assigns default values to the <b>Name</b> property for each page: Page1 and Page2. Each page in a tab control is treated as a separate control on the form, and every control must have a unique value for its <b>Name</b> property. For this reason, if you add a second tab control to a form, Microsoft Access won’t assign Page1 as the default value for the <b>Name</b> property of the first page in the second tab control, or allow you to change the value to Page1. For the same reason, no other control on the same form can have its <b>Name</b> property set to Page1. However, you can use the same text on more than one page’s tab by setting the page’s <b>Caption</b> property.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To add a tab control to a form</b>
<ol>
<li>
Open a form in Design view.<p>
<img src="abac03_31.gif" border=0></p>
</li>
<li>
In the toolbox, click the <b>Tab Control</b> tool and then click the form where you want to place the control.<p>
Microsoft Access adds a tab control with two pages. The Page1 tab is on top.</p>
</li>
<li>
Add controls to Page1 of the tab control by clicking a tool in the toolbox, and then click on Page1 where you want to place the control. You can add any type of control except another tab control.<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can also copy controls from another part of a form or from another page and paste them onto a tab control page. However, you can’t drag controls from another part of a form or from another page.</p>
</li>
<li>
To add controls to Page2, click the Page2 tab, and then use the toolbox to add the controls.</li>
<li>
Use the following table for other tasks you may want to perform.<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Do this</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Change the name of a tab</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the tab whose name you want to change, click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Properties</b> on the shortcut menu, and then specify a new name in the <b>Caption</b> property. If you don’t specify a name in the <b>Caption</b> property, Microsoft Access uses the text in the <b>Name</b> property.</td>
</tr>
<tr valign=top>
<TD>
Add or delete pages, or change the page order of tabs</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the tab, and then click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Insert Page</b>, <b>Delete Page</b>, or <b>Page Order</b> on the shortcut menu.<p>
You can also insert a page by copying and pasting an existing page. This copies the entire page, including the controls on it. You can also delete a page by clicking the page, and then pressing DELETE.</p>
</td>
</tr>
<tr valign=top>
<TD>
Change the tab order of controls on a page</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the page and click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Tab Order</b> on the shortcut menu.</td>
</tr>
<tr valign=top>
<TD>
Change the font name, font size, or font style (weight, italic, and/or underline) of all pages</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Right-click the border of the tab control, click <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Properties</b> on the shortcut menu, and then set the appropriate properties. The property settings you select apply to the fonts on all pages of the tab control.<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The font color is determined by the <b>Color</b> setting for <b>3D Objects</b> specified on the <b>Appearance</b> tab of the <b>Display Properties</b> dialog box, which is available from Windows Control Panel.</p>
</td>
</tr>
</table>
</li>
<li>
Size the tab control as appropriate. Click each tab to make sure all the controls fit well within each tab.<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Microsoft Access won’t crop controls when you size the tab control. You may need to move controls before you make the tab control smaller.</p>
</li>
<li>
Switch to Form view and test the tab control.</li>
</ol>
<h4>Additional Tab Control and Tab Control Page Properties</h4>
<p>
You can further customize how a tab control and its pages look and work by setting their properties. Tab control properties affect the way the tab control as a whole looks and works, and in many cases apply to all the pages within the control. For example, you can set the <b>TabFixedHeight</b> and <b>TabFixedWidth</b> properties to set the size of all tabs on a tab control. You can set most tab control properties in the tab control property sheet; however, some properties can only be set or referenced by using Visual Basic. To display the tab control property sheet, right-click the border of the tab control and click <b>Properties</b> on the shortcut menu. </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on tab control properties that are only available by using Visual Basic, see “Referring to Tab Control Objects in Visual Basic” later in this section.</p>
<p>
The following table lists the most commonly used tab control properties. For information on other properties, press F1 when the insertion point is in the property box.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Tab control property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">MultiRow</b></td>
<TD>
Specifies whether a tab control can have more than one row of tabs. If the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">MultiRow</b> property is set to No, Microsoft Access truncates the tabs if they exceed the width of the tab control and adds a scroll bar. The default setting is No.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">BackStyle</b></td>
<TD>
Specifies whether the pages in the tab control are transparent. When set to Normal, the color of pages is determined by the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">3D Objects </b>color specified on the <b>Appearance</b> tab of the <b>Display Properties </b>dialog box, which is available from Windows Control Panel. When set to Transparent, the color of pages is determined by the <b>BackColor</b> property of the detail section and the <b>Picture</b> property of the form (if any) showing through them. The tabs in a tab control are always solid and use the <b>3D Objects</b> color set in the Windows Control Panel. The default setting is Normal.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Style</b>&#09;</td>
<TD>
Specifies what to display at the top of the tab control. You can display tabs, command buttons (in the same positions as tabs), or nothing. The default setting is Tabs.<p><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
You may want to display nothing if you want to use command buttons on the form outside the tab control to determine which page has the focus. To do this, set the tab control’s <b>Style</b> property to None. Then add an event procedure to the button’s OnClick event that sets the tab control’s <b>Value</b> property to the page you want to display.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on how to do this, see “Referring to and Changing the Current Page” later in this section.</p>
</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">TabFixedHeight</b></td>
<TD>
Specifies the height of tabs in inches. When set to 0, each tab is tall enough to fit its contents. The minimum height is .05 inches. The default setting is 0.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">TabFixedWidth</b></td>
<TD>
Specifies the width of tabs in inches. When set to 0, each tab is wide enough to fit its contents and, if there is more than one row of tabs, the width of each tab is increased so that each row of tabs spans the width of the tab control. If the setting is greater than 0, all tabs have an identical width as specified by this property. The minimum width is 0.5 inches. The default setting is 0.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
In addition to the properties that apply to the tab control as a whole, there are also properties that apply to individual pages. Tab control page properties affect the way a page looks and works. All tab control page properties can be set in the page property sheet. To display the page property sheet, right-click the tab, and then click <b>Properties</b> on the shortcut menu.</p>
<p>
The following table lists the most commonly used tab control page properties. For information on other properties, press F1 when the insertion point is in the property box.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Tab control page property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Name</b></td>
<TD>
Specifies the name of the page. Use this name when referring to a tab control page in Visual Basic. The default name is Page1 for the first page, Page2 for the second page, and so on.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b></td>
<TD>
Specifies the display text that appears on a tab. If you don’t specify a name in the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption</b> property, Microsoft Access uses the text in the <b>Name</b> property.</td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Picture</b></td>
<TD>
Use to add a graphic to a tab. The graphic is displayed to the left of the tab name specified in the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Caption </b>property. If you want to display only a picture and no name, enter a space in the <b>Caption</b> property.</td>
</tr>
</table>
<p>
If you’re going to use a tab control in a custom dialog box, you may want to set additional properties so that your form looks and works like a Windows dialog box.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on making a form look and work like a dialog box, see “Using Pop-up Forms and Dialog Boxes” earlier in this chapter.</p>
<h3>Referring to Tab Control Objects in Visual Basic</h3>
<p>
In most ways, a tab control works like other controls on a form and can be referred to as a member of a form’s <b>Controls</b> collection. For example, to refer to a tab control named TabControl1 on a form named Form1, you can use the following expression:</p>
<pre><code>Form1.Controls!TabControl1
</code></pre>
<p>
However, because the <b>Controls</b> collection is the default collection of the <b>Form</b> object, you don’t have to explicitly refer to the <b>Controls</b> collection. That is, you can omit the reference to the <b>Controls</b> collection from the expression, like this:</p>
<pre><code>Form1!TabControl1</code></pre>
<h4>Referring to the Pages Collection</h4>
<p>
A tab control contains one or more pages. Each page in a tab control is referenced as a member of the tab control’s <b>Pages</b> collection. Each page in the <b>Pages</b> collection can be referred to by either its <b>PageIndex</b> property setting (which reflects the page’s position in the collection starting with 0), or by the page’s <b>Name</b> property setting. There is no default collection for the <b>TabControl</b> object, so when referring to items in the <b>Pages</b> collection by their index value, or to properties of the <b>Pages</b> collection, you must explicitly refer to the <b>Pages</b> collection.</p>
<p>
For example, to change the value of the <b>Caption</b> property for the first page of a tab control named TabControl1 by referring to its index value in the <b>Pages </b>collection, you can use the following statement:</p>
<pre><code>TabControl1.Pages(0).Caption = &quot;First Page&quot;
</code></pre>
<p>
Because each page is a member of the form’s <b>Controls</b> collection, you can refer to a page solely by its <b>Name</b> property without referring to the tab control’s name or its <b>Pages</b> collection. For example, to change the value of the <b>Caption</b> property of a page with its <b>Name</b> property set to Page1, use the following statement:</p>
<pre><code>Page1.Caption = &quot;First Page&quot;
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If a user or code changes a page’s <b>PageIndex</b> property, the reference to the page’s index and the page’s position in the page order change. In this case, if you want to maintain an absolute reference to a page, refer to the page’s <b>Name</b> property.</p>
<p>
The <b>Pages</b> collection has one property, <b>Count</b>, that returns the number of pages in a tab control. Note that this property is not a property of the tab control itself, but of its <b>Pages</b> collection, so you must explicitly refer to the collection. For example, to determine the number of pages in TabControl1, use the following statement:</p>
<pre><code>TabControl1.Pages.Count
</code></pre>
<h4>Referring to and Changing the Current Page</h4>
<p>
A tab control’s default property is <b>Value</b>, which returns an integer that identifies the current page: 0 for the first page, 1 for the second page, and so on. The <b>Value</b> property is only available in Visual Basic code or in expressions. By reading the <b>Value</b> property at run time, you can determine which page is currently on top. For example, the following statement returns the value for the current page of TabControl1:</p>
<pre><code>TabControl1.Value
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Because the <b>Value</b> property is the default property for a tab control, you don’t have to refer to it explicitly. For this reason, you could omit <code>.Value</code> from the preceding example.</p>
<p>
Setting a tab control’s <b>Value</b> property at run time changes the focus to the specified page, making it the current page. For example, the following statement moves the focus to the third page of TabControl1:</p>
<pre><code>TabControl1 = 2
</code></pre>
<p>
This is useful if you set a tab control’s <b>Style</b> property to None (which displays no tabs) and want to use command buttons on the form to determine which page has the focus. To use a command button to display a page, add an event procedure to the button’s OnClick event that sets the tab control’s <b>Value</b> property to the integer that identifies the appropriate page.</p>
<p>
By using the <b>Value</b> property with the <b>Pages</b> collection, you can set properties at run time for the page that is on top. For example, you can hide the current page and all of its controls by setting the page’s <b>Visible</b> property to <b>False</b>. The following statement hides the current page of TabControl1:</p>
<pre><code>TabControl1.Pages(TabControl1).Visible = False
</code></pre>
<p>
Each page in a tab control also has a <b>PageIndex</b> property that specifies the position of a page within the <b>Pages</b> collection using the same numbering sequence as the tab control’s <b>Value</b> property: 0 for the first page, 1 for the second page, and so on. Setting the value of a page’s <b>PageIndex</b> property changes the order in which pages appear in the tab control. For example, if you wanted to make a page named Page1 the second page, you’d use the following statement:</p>
<pre><code>Page1.PageIndex = 1
</code></pre>
<p>
The <b>PageIndex</b> property is more typically set at design time in a page’s property sheet. You can also set the page order by right-clicking the border of a tab control and then clicking <b>Page Order</b> on the shortcut menu.</p>
<h4>Referring to Controls on a Tab Control Page</h4>
<p>
The controls you place on a tab control page are part of the same collection as all controls on the form. For this reason, each control on a tab control page must have a name that’s unique with respect to all other controls on the same form. You can refer to controls on a tab control page by using the same syntax used for controls on a form without a tab control. For example, a fully qualified reference to the HomePhone text box on the Personal Info tab of the Employees form in the Northwind sample application would read as follows.</p>
<pre><code>Forms!Employees!HomePhone
</code></pre>
<p>
Because each control on a form has its own <b>Controls</b> collection, you can also refer to the controls on a tab control as members of its <b>Controls</b> collection. For example, the following code <i>enumerates</i> (lists) all the controls on the tab control of the Employees form in the Northwind sample application. Because the EmployeeName text box in the header section of the form is not a member of this collection, it isn’t listed.</p>
<pre><code>Sub ListTabControlControls()
&#09;' Declare object variables.
&#09;Dim tabCtl As TabControl, ctl As Control

&#09;' Return reference to tab control on Employees form.
&#09;Set tabCtl = Forms!Employees!TabCtl0

&#09;' List all controls on the tab control in the Debug window.
&#09;For Each ctl In tabCtl
&#09;&#09;Debug.Print ctl.Name
&#09;Next ctl
End Sub
</code></pre>
<p>
Additionally, each page on a tab control has its own <b>Controls</b> collection. By using a page’s <b>Controls</b> collection, you can refer to controls on each page. The following code enumerates the controls for each page of the tab control on the Employees form in the Northwind sample application.</p>
<pre><code>Sub ListPageControls()
&#09;' Declare object variables.
&#09;Dim tabCtl As TabControl, pg As Page, ctl As Control, intPageNum As Integer

&#09;' Return reference to tab control on Employees form.
&#09;Set tabCtl = Forms!Employees!TabCtl0

&#09;' List all controls for each page on the tab control in the Debug window.
&#09;For Each pg In tabCtl.Pages
&#09;&#09;intPageNum = intPageNum + 1
&#09;&#09;Debug.Print &quot;Page &quot; &amp; intPageNum &amp; &quot; Controls:&quot;
&#09;&#09;For Each ctl In pg.Controls
&#09;&#09;&#09;Debug.Print ctl.Name
&#09;&#09;Next ctl
&#09;Debug.Print
&#09;Next pg
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on referring to objects, see “Referring to Objects and Their Values” in Chapter 1, “Creating an Application.” For more information on working with objects and collections in Visual Basic, see Chapter 5, <a href="workingwithobjectscollections.htm">“Working with Objects and Collections.”</a></p>
</FONT></FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Replicating Part of a Database</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="replicatingpartofdatabase"></a>Replicating Part of a Database</h2>
<p>
So far, this chapter has discussed <i>full replicas</i>, in which all records in all replicas of a replica set are synchronized in their entirety. However, you may only want to replicate part of your data. To do this, you create <i>partial replicas</i>, which contain only a subset of the records in the full replica. With a partial replica, you can set filters and relationships that identify which subset of the records in the full replica you want to synchronize.</p>
<p>
By replicating only part of your database, you can restrict access to data. In the case of a sales database, replicating part of a database can help ensure that people in a regional sales office don’t view sales data for other regional offices. In addition, salespersons who carry laptops can filter their data to include only the information that is relevant to their territory. Although you can restrict access to records or filter records when you replicate part of a database, this isn’t a substitute for a security system.</p>
<p>
Replicating part of a database also has benefits for replicating data over local area networks (LANs) and wide area networks (WANs). By applying filters and relationships that restrict which data is replicated, you can reduce the amount of data transferred over a LAN or a WAN. This can reduce network traffic and lower telecommunications costs.</p>
<p>
To create a partial replica, you can use DAO code or tools provided on the Microsoft Access Developer Forum Web site.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the Microsoft Access Developer Forum Web site, see “Accessing Relevant Information on the Internet” in Chapter 2, “Introducing Visual Basic.”</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can synchronize data only between a full replica and a partial replica. You can’t synchronize data between two partial replicas. Also, when you replicate part of a database, you can set restrictions on which records are replicated, but you can’t indicate which fields are replicated.</p>
<h3>Creating Partial Replicas</h3>
<p>
You can use DAO methods and properties to create a partial replica.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create a partial replica</b>
<ol>
<li>
Open with exclusive access the database that contains the data you want to replicate.</li>
<li>
Use the <b>MakeReplica</b> method on a <b>Database</b> object, and specify the <b>dbRepMakePartial</b> constant in the <i>options </i>argument.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For an example of using the <b>MakeReplica</b> method, see the MakeAdditionalReplica function in “Making Additional Replicas” earlier in this chapter.</p>
</li>
<li>
Use the <b>ReplicaFilter</b> and <b>PartialReplica</b> properties to set filters and relationships that determine which data to replicate from the full replica.</li>
<li>
Use the <b>PopulatePartial</b> method to replicate all records from the full replica that meet the new replica filter criteria.</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Once you create a partial replica, you cannot convert it to a full replica. However, if you remove all of the replica filters and replica relationships within the partial replica, it contains all the records of a full replica. However, it still has the same limitations of a partial replica; for example, you can’t synchronize with another partial replica.</p>
<h4>Setting Replica Filters</h4>
<p>
You use a replica filter to specify which subset of records to include from the full replica in the partial replica. To set a filter, use the<b> ReplicaFilter</b> property of the <b>TableDef</b> object. You can set the <b>ReplicaFilter</b> property to the following values.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Value</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Description</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
A string</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
A criteria that a record must satisfy to appear in the replicated table. The syntax you use is similar to an SQL WHERE clause, but you cannot specify subqueries, aggregate functions (such as the <b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Count </b>function), or user-defined functions within the criteria. </td>
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">True</b></td>
<TD>
Replicate all records.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">False</b></td>
<TD>
(Default) Don’t replicate any records except those required to maintain referential integrity.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
For example, to replicate only customer records from the California region, you would use the following code:</p>
<pre><code>Sub ReplicaFilterX(strPartialReplica As String)

&#09;Dim tdfCustomers As TableDef
&#09;Dim strFilter As String
&#09;Dim dbs As Database

&#09;Set dbs = OpenDatabase(strPartialReplica), True

&#09;Set tdfCustomers = dbs.TableDefs(&quot;Customers&quot;)
&#09;strFilter = &quot;Region = 'CA'&quot;

&#09;tdfCustomers.ReplicaFilter = strFilter

&#09;dbs.PopulatePartial strPartialReplica

&#09;dbs.Close

End Sub
</code></pre>
<p>
To remove a filter, set the <b>ReplicaFilter</b> property to <b>False</b>. Once you remove all filters and use the <b>PopulatePartial</b> method, no records appear in any replicated tables.</p>
<p>
Usually, you reset a replica filter when you want to archive data or replicate a different set of records. For example, when a sales representative temporarily takes over another sales representative’s region, the database application can temporarily replicate data for both regions and then return to the previous filter. In this scenario, the application resets the <b>ReplicaFilter</b> property and then repopulates the databases.</p>
<p>
<img src="abac20_2.gif" border=0></p>
<p>
Tip   You can significantly improve synchronization speed by specifying indexed fields in the <b>ReplicaFilter</b> property.</p>
<h4>The Role of Referential Integrity</h4>
<p>
If your database contains relationships that enforce referential integrity, then the Synchronizer automatically replicates related records. For example, suppose you create a new replica with no records in it and set the <b>ReplicaFilter</b> property of the Orders table in the new replica to <code>&quot;Amount &gt; 1000&quot;</code>. The next synchronization populates the Orders table in the new replica with all records that have an order amount over $1,000. This also populates records in the Customers table that are related to the Orders records, along with records in the Products table that are related to the records in the Orders table, and so on.</p>
<p>
This automatic inclusion only occurs for records that must satisfy referential integrity constraints. For example, because the Customers table has a one-to-many relationship with the Orders table, if one or more records exist in the Orders table for a given customer, the Customers table must have a corresponding record to satisfy the referential integrity rule. Setting the <b>ReplicaFilter</b> property of the Customers table, however, doesn’t automatically include related records in the Orders table. This is because referential integrity rules don’t require a referenced row. To include such rows, use the <b>PartialReplica</b> property described in the following section.</p>
<h4>Setting Replica Relationships</h4>
<p>
In some cases, setting the <b>ReplicaFilter</b> property alone can’t adequately specify which data should be replicated to the partial replica. For example, suppose you have a database in which the Customers table has a one-to-many relationship with the Orders table, and you want to configure a partial replica that only replicates orders from customers in the California region (instead of all orders). You can’t set the <b>ReplicaFilter</b> property on the Orders table to <code>Region = 'CA'</code> because the Region field is in the Customers table, not the Orders table.</p>
<p>
You can use the <b>PartialReplica</b> property of the <b>Relation</b> object to specify whether relationships between tables should be considered when populating a partial replica from a full replica. For example, to replicate all orders from customers in the California region, you would create a partial replica and set the <b>ReplicaFilter</b> property for the Customers <b>TableDef</b> object to <code>&quot;Region = 'CA'&quot;</code>. Then, set the <b>PartialReplica</b> property to <b>True</b> for the <b>Relation</b> object that corresponds to the relationship between the Orders and Customers tables.</p>
<p>
The following code shows how to set the <b>PartialReplica</b> property:</p>
<pre><code>' Assumptions:
' The current open database, dbs, is the partial replica, and a one-to-many
' relationship already exists between the Customers and Orders tables.

' Find the &quot;Customers to Orders&quot; Relation object.
For intI = 0 To dbs.Relations.Count - 1
&#09;If (dbs.Relations(intI).Table = &quot;Customers&quot;) _
&#09;&#09;And (dbs.Relations(intI).ForeignTable = _
&#09;&#09;&quot;Orders&quot;) Then
&#09;&#09;&#09;' Set the Relation object's PartialReplica property to True.
&#09;&#09;&#09;dbs.Relations(intI).PartialReplica = True
&#09;&#09;&#09;Exit For
&#09;End If
Next intI
</code></pre>
<p>
If you have a second requirement to replicate all orders greater than $1,000, regardless of the region with which they are associated, you can set the <b>ReplicaFilter</b> property of the Orders table to <code>&quot;Amount &gt; 1000&quot;</code>. Synchronizing the partial replica with the full replica populates the Orders table with all orders greater than $1,000 from all regions, in addition to all orders from the California region.</p>
<p>
Keep the following points in mind when setting replica filters and relationships:
<ul>
<li>
If you have set a replica filter and a replica relationship on the same table, the two act in combination as a logical <b>Or</b> operation, not a logical <b>And</b> operation. For instance, in the preceding example, the records exchanged during synchronization are all orders greater than $1,000 or all orders from the California region, not all orders from the California region that are over $1,000.</li>
<li>
It makes no difference in which order you add replica filters and replica relationships.</li>
<li>
Although it’s possible to set complex filters and replica relationships, this isn’t recommended. Use the <b>ReplicaFilter</b> and <b>PartialReplica</b> properties to place general restrictions on which data is replicated.</li>
</ul>
<h4>Repopulating Partial Replicas</h4>
<p>
When you synchronize a partial replica with a full replica, it’s possible to create “orphaned” records in the partial replica. For example, suppose you have a Customers table with its <b>ReplicaFilter</b> property set to <code>&quot;Region = 'CA'&quot;</code>. If a user changes a customer’s region from CA to NY in the partial replica, and then a synchronization occurs, the change is propagated to the full replica, but the record containing NY in the partial replica is orphaned because it now doesn’t meet the replica filter criteria.</p>
<p>
To solve the problem of orphaned records, you can use the <b>PopulatePartial</b> method. The <b>PopulatePartial</b> method transfers any unpropagated changes to the full replica, removes all records in the partial replica, and then repopulates the partial replica based on the current replica filters. Even if your replica filters have not changed, the <b>PopulatePartial</b> method always repopulates the partial replica by clearing all records in the partial replica.</p>
<p>
Generally, you use the <b>PopulatePartial</b> method when you create a partial replica and whenever you change your replica filters.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To change replica filters</b>
<ol>
<li>
Before you change the replica filters, use the <b>Synchronize</b> method to synchronize your full replica with the partial replica.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>Synchronize</b> method, see “Synchronizing Replicas” later in this chapter.</p>
</li>
<li>
Use the <b>ReplicaFilter</b> and <b>PartialReplica</b> properties to make changes to the replica filters and relationships.</li>
<li>
Use the <b>PopulatePartial</b> method to remove all records from the partial replica and transfer all records from the full replica that meet the new replica filter criteria.</li>
</ol>
<p>
If a replica filter has changed and you use the <b>Synchronize</b> method without first using the <b>PopulatePartial</b> method, a trappable error occurs.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Although the <b>PopulatePartial</b> method performs a one-way synchronization from the partial replica to the full replica before it removes and repopulates the partial replica, it’s still a good idea to use the <b>Synchronize</b> method before you use the <b>PopulatePartial</b> method. If the <b>Synchronize</b> method fails, a trappable error occurs. You can use this error to decide whether or not to proceed with the <b>PopulatePartial</b> method (which removes all records in the partial replica). If you use the <b>PopulatePartial</b> method by itself and an error occurs during synchronization, records in the partial replica are still removed.</p>
</FONT></FONT></BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using OLE Automation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1 CLASS="cht">Using OLE Automation</H1><P CLASS="t">With the introduction of Visual Basic for Applications (VBA) in Microsoft Excel&nbsp;5.0, a new method of communicating with Microsoft Excel was provided:  OLE Automation. VBA is not an intrinsic part of Microsoft Excel. It is implemented as a series of DLLs and uses Automation to communicate with Microsoft Excel. This provides maximum reusability among the various pieces of&nbsp;Microsoft Office.</P>
<P CLASS="t">OLE Automation provides a mechanism for a controller (VBA) to interact with an object (Microsoft Excel). This is a two-way interaction. Because OLE Automation is a protocol, any automation controller can use every automation object, and any automation object can be used by every automation controller. This communication is typified by calling "methods" and setting "properties." Methods equate to function calls, and properties equate to setting the value of a variable.</P>
<P CLASS="t">This chapter focuses on OLE Automation from a Microsoft Excel and a Visual Basic point of view. The concepts discussed also apply to OLE Automation controllers built in C/C++, but the actual details of building these controllers are beyond the scope of this book.</P></FONT>
</FONT></BODY></HTML>

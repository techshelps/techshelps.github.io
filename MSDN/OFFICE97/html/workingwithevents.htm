<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Events</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="workingwithevents"></a>Working with Events</h2>
<p>
Microsoft Access applications are <i>event-driven</i>; this means that the way they behave depends on how objects are designed to respond to events. Objects in Microsoft Access respond to the following types of events:
<ul>
<li>
Mouse clicks</li>
<li>
Changes in data</li>
<li>
Keystrokes a user types</li>
<li>
Objects receiving or losing the focus</li>
<li>
Forms or reports being opened, closed, or resized</li>
<li>
Reports being printed or formatted</li>
<li>
Run-time errors</li>
</ul>
<p>
The <i>focus</i> is the application’s ability to receive input or respond to a user’s mouse or keyboard actions. In Microsoft Windows, only one item at a time can have the focus. For example, when a user types, characters appear in a text box only if the text box has the focus. Which object or control receives the focus is determined by a user’s actions, such as clicking in a text box or pressing TAB to move to a control. Before a user acts, settings made at design time determine which control has the focus. For example, when a user first opens or switches to a form, the control that has the focus is the one with the lowest <b>TabIndex</b> property setting. You can also explicitly set the focus in code by using the <b>SetFocus</b> method.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>TabIndex</b> property or the<b> SetFocus</b> method, search the Help index for “TabIndex property” or “SetFocus method.”</p>
<p>
You can see the events that are generated in Microsoft Access by opening the ShowEvents form in the Orders sample application. The ShowEvents form, a special version of the Orders form, records each event as it occurs. An accompanying EventHistory form lists the name of the event and the type or name of the object on which the event occurred, using the format <i>object_event.</i> For example, if a Click event occurs on the ShowEvents subform, the line “[Subform]Form_Click” is added to the Events list on the EventHistory form.</p>
<p>
<img src="abac06_1.gif" border=0></p>
<p>
The EventHistory form lists events in reverse order, with the most recent event at the top of the list. The form lists all events except MouseMove events, which occur each time you move the mouse pointer, and would quickly fill up the list if they were included.</p>
<p>
By default, Microsoft Access automatically responds to events with built-in behaviors defined for each object. For example, when a user enters or changes data in a text box, Microsoft Access automatically checks to make sure the data is of the right type.</p>
<p>
In addition, each object in Microsoft Access has a set of <i>event properties</i> that correspond to each event to which the object can respond. For example, the following table lists some of the event properties and corresponding events for a check box.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Event property</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Event</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnGotFocus</b></td>
<TD>
GotFocus</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnKeyDown</b></td>
<TD>
KeyDown</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnKeyPress</b></td>
<TD>
KeyPress</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnKeyUp</b></td>
<TD>
KeyUp</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnLostFocus</b></td>
<TD>
LostFocus</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnMouseDown</b></td>
<TD>
MouseDown</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnMouseMove</b></td>
<TD>
MouseMove</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">OnMouseUp</b></td>
<TD>
MouseUp</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For a complete list of events and event properties, as well as information on when each of these events occur, search the Help index for “events, listed alphabetically.”</p>
<p>
You can specify a further response to an event by setting the object’s corresponding event property. When an event occurs that an object can respond to, Microsoft Access uses the setting of the object’s corresponding event property to determine how to respond:
<ul>
<li>
If the event property is blank, Microsoft Access responds to the event only with its built-in behavior.</li>
<li>
If the event property is set to the name of a macro, and the event can’t be canceled, Microsoft Access first performs the built-in behavior, and then runs the macro. If the event property is set to the name of a macro and the event can be canceled, Microsoft Access first runs the macro, and then performs the built-in behavior.</li>
<li>
If the event property is set to [Event Procedure], and the event can’t be canceled, Microsoft Access first performs the built-in behavior, and then calls the appropriate event procedure. If the event property is set to [Event Procedure], and the event can be canceled, Microsoft Access first calls the appropriate event procedure, and then performs the built-in behavior.</li>
</ul>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on which events can be canceled, see “Canceling Events” later in this chapter.</p>
<p>
For example, when you click a command button whose <b>OnClick</b> event property is set to a macro, Microsoft Access:
<ol>
<li>
Makes the button appear pressed in momentarily—the built-in behavior when a Click event occurs on a command button. Note that the Click event can’t be canceled.</li>
<li>
Runs the macro.<p>
<img src="abac06_2.gif" border=0></p>
</li>
</ol>
<p>
When the event property is set to [Event Procedure], Microsoft Access responds to the event by running the appropriate event procedure in addition to performing its built-in behavior. Event procedures are named for the event and the object for which they occur, in the format <i>object_event.</i> For example, if a user clicks the Products command button, Microsoft Access:
<ol>
<li>
Makes the Products command button appear pressed in momentarily—its built-in behavior.</li>
<li>
Runs the Products_Click event procedure.<p>
<img src="abac06_3.gif" border=0></p>
</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When you create an event procedure, Microsoft Access automatically sets the appropriate event property to [Event Procedure] if the property doesn’t already have a setting. As an alternative, you can set the property to [Event Procedure], and then create the event procedure separately. For more information on creating an event procedure, see Chapter 2, <a href="introducingvisualbasic.htm">“Introducing Visual Basic,”</a> or search the Help index for “event procedures, creating.”</p>
<p>
You can also have Microsoft Access call a function in response to an event. To do so, add to the appropriate event procedure an expression that calls the function, or type an equal sign (=) followed by the function name as the event property setting in the property sheet.</p>
<p>
For example, to call the CheckValues function when a form opens, you can type the following <b>OnOpen</b> property setting in the form’s property sheet:</p>
<p>
=CheckValues()</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Using an expression that calls a function as an event property setting for a form or control is useful when you want to use code and the form’s <b>HasModule</b> property is set to <b>No</b> so that it loads more quickly. For more information, see “Optimizing Form Loading and Paging” in Chapter 13, “Optimizing Your Application.” </p>
<p>
The macros and Visual Basic code that Microsoft Access runs in response to events control how the objects in your application work together. By managing events, and the macros and Visual Basic code that Microsoft Access runs in response to events, you can create powerful, flexible database applications.</p>
</FONT></FONT></BODY>
</HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Arrays of Strings</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Using Arrays of Strings</H2><P CLASS="t">SAFEARRAYs can contain elements of any allowable type, including BSTRs and user-defined data structures. BSTRs inside arrays should be manipulated with the same OLE Automation functions as ordinary BSTRs. Always remember to free any existing BSTR before allocating a new one, or use the reallocation function. Do not directly modify BSTR data.</P>
<P CLASS="t">The following example creates or redimensions an array of strings. Any existing BSTR data in the array is freed before new data is copied into the array.</P>

<pre><code><FONT FACE="Courier" SIZE="2">short WINAPI StringArray(LPSAFEARRAY *ppsa)
{
    unsigned long l;
    BSTR bstr; 
    LPSAFEARRAY psa;
    SAFEARRAYBOUND sa;
    HRESULT hr;

    sa.lLbound = 0;
    sa.cElements = 3;

    if (*ppsa == NULL) // array not yet initialized
    {
        if ((psa = SafeArrayCreate(VT_BSTR, 1, &amp;sa)) == NULL)
            return -2;
        *ppsa = psa;
    }
    else
        {
        if ((*ppsa)-&gt;cDims != 1)    // check array dimensions
            return -1;

        }

    // loop through the array; get each element and free
    // any existing string, then allocate the new string
    // and put it in the array
</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">    for (l = sa.lLbound; l &lt; sa.cElements; l++) 
    {
        if (FAILED(SafeArrayGetElement(*ppsa, &amp;l, &amp;bstr)))
            return -4;
        SysFreeString(bstr);
        if ((bstr = SysAllocString((BSTR)"test string")) == NULL)
            return -5;
        if (FAILED(SafeArrayPutElement(*ppsa, &amp;l, bstr)))
            return -6;
    }

    return 0;
}    
</FONT></code></pre>
<P CLASS="t">Declared and called from Visual Basic:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Declare Function StringArray Lib "debug\ADVDLL.DLL" _
    (s() As String) As Integer

Sub StringArrayTest()
    Dim s() As String
    Dim t(1) As String

    t(1) = "Original String"
    MsgBox StringArray(s) &amp; ":" &amp; UBound(s) &amp; ":" &amp; s(1)
    MsgBox StringArray(t) &amp; ":" &amp; UBound(t) &amp; ":" &amp; t(1)
End Sub
</FONT></code></pre></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Intended Audience</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Intended Audience</H2><P CLASS="t">If the goal of your extension is to provided additional functions for the user to call&nbsp;from a worksheet, you should probably look at using the C API. Using the&nbsp;C API you can build a .XLL that the user can File/Open just like any other workbook. Upon opening the XLL it will be able to automatically register the worksheet functions for your users. This is theoretically a single-file solution. To&nbsp;accomplish this same task with OLE Automation requires at least two files. The first file is the .DLL containing your code. The second file is a workbook containing a VBA module that wraps each of the functions in your DLL with a VBA routine so that they are callable from the worksheet. On the other hand, if&nbsp;your intended audience is composed of VBA developers you should look at using&nbsp;the OLE Automation interface and providing a type library for your DLL. A&nbsp;type library automatically registers all of the functions in your DLL for a VBA&nbsp;developer and eliminates the need for the developer to declare your functions before they call them.</P></FONT>
</FONT></BODY></HTML>

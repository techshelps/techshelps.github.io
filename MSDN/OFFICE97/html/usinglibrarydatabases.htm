<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Library Databases</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="usinglibrarydatabases"></a>Using Library Databases</h2>
<p>
When you create an application, the objects and Visual Basic code in the application database work only within that application. For example, you can call functions in the UtilityFunctions module in the Orders sample application only from the objects in the Orders database—they aren’t available from other databases. That works fine for objects and code that you use in only one application. However, you may begin accumulating a set of general-purpose functions that you’d like to be able to call from any application, without re-creating the functions in each separate application database.</p>
<p>
You can create a <i>library database</i> to store such general-purpose functions. For example, the IsLoaded function in the Orders database’s UtilityFunctions module is a good candidate for a library function. This function doesn’t contain any hard-coded names from the Northwind database, such as form names or field names. Instead, you pass it a form name as an argument to determine whether the form is loaded. If you store this function in a library, you can use it with any open database.</p>
<p>
You can also create new features for Microsoft Access and use library databases to distribute these features to users. The following sections show you how to create and use library databases of your own.</p>
<h3>Creating Library Databases</h3>
<p>
Anytime you want to make a procedure or feature available to multiple applications, add it to a library database. Here are the basic steps for creating a library in Microsoft Access:</p>
<p>
Step One: Write the functions and create the objects   In a new database, write and debug the Visual Basic functions that you want to be available in a library. Design and create the forms and other objects that make up the interface for any generic feature. Because the forms that make up the feature’s interface and the Visual Basic functions that make it work are all stored in the library database, they’re available in any database from which you establish a reference.</p>
<p>
Unlike Microsoft Access versions 2.<i>x</i> and earlier, duplicate function names in different libraries don’t result in a conflict. Given two functions with duplicate names in two referenced libraries, Microsoft Access uses the function in the library with the highest priority specified in the <b>References</b> dialog box (<b>Tools</b> menu). If you need to call a function that is in a library lower in the priority list, qualify the function call with the name of the module that it resides in.</p>
<p>
Step Two: Load the database as a library   You may want to rename the database so its file name extension is .mda instead of .mdb. (By convention, library databases have a .mda file name extension.) Then add a reference to the library by way of the <b>References</b> dialog box so that Microsoft Access loads the database as a library when you make a call to that library from your code.</p>
<p>
When you are selecting databases to reference, click <b>Databases</b> in the <b>Files Of Type</b> box to see a list of files with .mdb and .mda extensions.</p>
<p>
Important   You need to establish this reference to every database that will use the library.</p>
<p>
After you load the database as a library, you can call the functions in the library database from your application, and you can use code in the library database to open forms or other objects stored in the library database and display them in the current application.</p>
<h3>Referencing Library Databases</h3>
<p>
Microsoft Access doesn’t actually load a library database into memory until code in an active application calls that library. If you want to use a library from your application, you must first establish a link, called a <i>reference</i>, from your application to that library database. You can add a reference to one or more library databases in your application by using the <b>References</b> dialog box.</p>
<p>
To get to the <b>References</b> dialog box, click <b>References</b> on the <b>Tools</b> menu when a Visual Basic module is open. The following figure shows how you can select libraries to reference.</p>
<p>
<img src="abac12_1.gif" border=0></p>
<p>
You can also use the <b>References</b> dialog box to view currently existing references in any open database.</p>
<p>
Another way to add a reference to a library database is to use the <b>Reference</b> object and the <b>References</b> collection in your Visual Basic code. To establish a reference in Visual Basic, create a new <b>Reference</b> object with either the <b>AddFromFile</b> or <b>AddFromGUID</b> method of the <b>References</b> collection. Use the <b>AddFromFile</b> method if you know the full path and file name of the file that contains the library you want to add a reference to. Use the <b>AddFromGUID</b> method if you know the library’s 16-bit unique identifier. You can retrieve this value from the <b>GUID </b>property of a <b>Reference</b> object after a reference has been established, and use it to re-create the reference if necessary.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on establishing references by using Visual Basic, search the Help index for “referencing, other databases.”</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;When you establish a reference, the full path to that library database is stored with the reference. If you move the library database to a different folder, or if you change the name of the folder, you need to reestablish the reference. When you are designing an application that will be distributed to other users, you’ll want to implement error-handling routines which control what happens when a library database cannot be loaded.</p>
<p>
Once you have established your references, you can call functions in the library database from code in your application. Then you can use functions in the library database to open its forms and other objects and display them in the application. Even though you can use the code and the database objects in the library database, they don’t appear in the Database window of the open database.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;While Microsoft Access supports references to multiple libraries, it doesn’t support circular references between libraries. A single library A can establish a reference and call functions in another library B, but as long as that reference exists, library B cannot establish a reference to library A.</p>
<h3>Debugging Library Databases</h3>
<p>
While you’re creating objects and writing code in a library database, you open the library as a database and work in it as you would any other database. It’s a good idea to get the objects in the library database working the way you want them to and to debug all Visual Basic code before you use the database as a library.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on debugging, see Chapter 7, <a href="debuggingvisualbasiccode.htm">“Debugging Visual Basic Code.”</a></p>
<p>
Sometimes objects and code that work perfectly in the context of the open library database can have trouble running in the context of your application, where new bugs and behavior can emerge. Therefore, after loading the database as a library, you may still need to make some adjustments to your objects and code. If you have problems with your application that appear to be related to the behavior of a library you have referenced, close the current database you are working in and open the library database for testing and debugging.</p>
<h3>Running Macros and Actions in Library Databases</h3>
<p>
You can attach macros to forms and reports in a library database and run them from the library database. This includes menu bar macros that you attach to forms in the library database. </p>
<p>
When a library database calls a macro, Microsoft Access looks first for a macro of that name in the library database and, if it finds one, runs that macro. If the library database that called the macro doesn’t contain a macro of that name, Microsoft Access looks for the macro in the current database.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;It’s a good idea to avoid using macros in library databases when possible. Macros don’t provide the error-handling capabilities of Visual Basic, so you can’t trap run-time errors that may occur when you run a library database macro. In addition, it’s much easier to debug a library database that uses Visual Basic rather than macros. You carry out macro actions in Visual Basic by using the <b>DoCmd</b> object. For more information, search the Help index for “DoCmd object.”</p>
<p>
Certain actions, such as OpenForm and OpenReport, have arguments that specify the object on which the action performs its operation. When you carry out these actions from a library database—whether in a macro or by using the <b>DoCmd</b> object in Visual Basic—Microsoft Access looks first for an object of that name in the library database that called the action and, if it finds one, performs the operation on that object. If the library database that called the action doesn’t contain an object of that name, Microsoft Access looks for the object in the current database.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on how Microsoft Access handles objects referred to by a specific action, search the Help index for the name of the action.</p>
<h3>Storing Custom Toolbars in Library Databases</h3>
<p>
If you want to store custom toolbars for your application in a library database and show or hide them by carrying out the ShowToolbar action from the library, then the database must be loaded as an add-in.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on installing add-ins, see Chapter 17, <a href="creatingwizardsbuildersmenuadd-ins.htm">“Creating Wizards, Builders, and Menu Add-ins.”</a></p>
</FONT></FONT></BODY>
</HTML>

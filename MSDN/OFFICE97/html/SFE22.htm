<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scope</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Scope</H2><P CLASS="t">A VBProject is the Visual Basic project that includes all the code modules, Microsoft Excel objects, references, and forms contained within a given workbook. In Microsoft Excel&nbsp;97, public constants, variables, and procedures live in Standard Modules. Constants, variables, and functions declared with the Public keyword in a Standard Module are available to all other code in all VBProjects, unless the module contains the Option Private Module statement, in which case they will only be available to the VBProject that contains that Standard Module.</P>
<P CLASS="t">There are certain differences in the way the Public keyword is used in Object Modules and Class Modules. Here are the key differences:</P>
<UL><LI CLASS="ULI1">Constants, DLL declarations, and fixed-length strings cannot be declared as Public in any Object or Class Module.</LI><LI CLASS="ULI1">Variables declared as Public within an Object or Class Module become new <I>Properties</I> of that object.</LI><LI CLASS="ULI1">Procedures (functions and subroutines) declared as Public within an Object or Class Module become new <I>Methods</I> of that object.</LI></UL><P></P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">You can create custom properties for an Object or Class Module, using the Property Get procedure. The following example illustrates how this is done:</P>
<UL><LI CLASS="ULI1">Create a new workbook.</LI><LI CLASS="ULI1">Start the VBE and add one UserForm and one Standard Module.</LI><LI CLASS="ULI1">Add a ListBox and a CommandButton to the UserForm.</LI><LI CLASS="ULI1">Name the ListBox lstDemo.</LI><LI CLASS="ULI1">Name the CommandButton cmdOK and give it the caption OK.</LI></UL><P CLASS="a">        <img src="CH1_01.gif"></P>
<P CLASS="t">The following procedures should be created in the Object Module for the UserForm:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Property Get ListChoice() As String
    ListChoice = lstDemo.Value
End Property

Private Sub cmdOK_Click()
    Me.Hide
End Sub

Private Sub UserForm_Initialize()
    lstDemo.AddItem "Item 1"
    lstDemo.AddItem "Item 2"
    lstDemo.AddItem "Item 3"
    lstDemo.AddItem "Item 4"
    lstDemo.ListIndex = 0
End Sub
</FONT></code></pre>
<P CLASS="t">In the cmdOK_Click event procedure above, the Me keyword is an implicitly declared object variable that refers to the object within which code is currently executing. The next procedure goes in the Standard Module.</P>

<pre><code><FONT FACE="Courier" SIZE="2">Sub ShowForm()
    UserForm1.Show
    MsgBox "You chose " &amp; UserForm1.ListChoice
    Unload UserForm1
End Sub</FONT></code></pre>
<P></P>
<P></P>
<P></P>
<P CLASS="t">Adding the Property Get procedure to the UserForm Object Module actually creates a new property for that UserForm. In this example, the new ListChoice property exposes the choice made in the listbox.</P>
<P CLASS="t">When you run the ShowForm procedure, the UserForm is displayed. Select an item in the listbox and click the OK button. The ShowForm procedure then generates a message box that accesses the ListChoice property of the UserForm to&nbsp;show which item you chose from the list.</P>
<P CLASS="t">The Wizard demo provided later in this chapter (and on the CD) also contains an&nbsp;example of using the Property Get procedure with a UserForm.</P></FONT>
</FONT></BODY></HTML>

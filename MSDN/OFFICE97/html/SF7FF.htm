<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Specifying Microsoft Excel Functions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Specifying Microsoft Excel Functions</H1><P CLASS="t">The Excel4 function is used to call any of the Microsoft Excel functions or command equivalents. These function or command equivalents are the same as&nbsp;those defined in the online Microsoft Excel Online Function Reference. The&nbsp;Microsoft Excel Online Function Reference can be obtained from http://www.microsoft.com.</P>
<P CLASS="t">Of course, many functions in the Microsoft Excel XLM language do not make sense in DLLs. For example, you would never want to call the GOTO function or&nbsp;the ARGUMENT function from a DLL because its behavior wouldn't make sense outside of an XLM macro sheet.</P>
<P CLASS="t">To understand how to specify a function, you need to know something about how&nbsp;Microsoft Excel works internally. Microsoft Excel contains two tables: the <I>function </I>table and the <I>command-equivalent </I>table. These tables are simply arrays of pointers to internal Microsoft Excel functions.</P>
<P CLASS="a">    <img src="CH07_21.gif"></P>
<P CLASS="t">The command-equivalent table is equivalent to the function table, with entries that point to Microsoft Excel command equivalents. When you use Excel4, you will need to know the index of the Microsoft Excel function or command equivalent. These are defined for you in XLCALL.H:</P>

<pre><code><FONT FACE="Courier" SIZE="2">#define xlfCount 0
#define xlfIsna 2
#define xlfIserror 3
#define xlfSum 4
#define xlfAverage 5
#define xlfMin 6
#define xlfMax 7
#define xlfRow 8
#define xlfColumn 9
#define xlfNa 10</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">.
.
.
#define xlcBeep (0 | xlCommand)
#define xlcOpen (1 | xlCommand)
#define xlcOpenLinks (2 | xlCommand)
#define xlcCloseAll (3 | xlCommand)
#define xlcSave (4 | xlCommand)
#define xlcSaveAs (5 | xlCommand)
#define xlcFileDelete (6 | xlCommand)
#define xlcPageSetup (7 | xlCommand)
#define xlcPrint (8 | xlCommand)
#define xlcPrinterSetup (9 | xlCommand)
.
.
.
</FONT></code></pre>
<P CLASS="t">The name of each function or command equivalent is based on the name in the Microsoft Excel Online Function Reference. Functions are prefixed with "xlf," while command equivalents are prefixed with "xlc." You will also notice that all&nbsp;the command equivalents have their xlCommand bit set, so Microsoft Excel knows whether to use the command-equivalent table or the function table. You can also easily determine whether you have a function or a command equivalent. It is important to distinguish between the two: a function returns a value, and a command equivalent executes some action.</P></FONT>
</FONT></BODY></HTML>

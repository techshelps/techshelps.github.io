<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The ShowException Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>The ShowException Function</H2><P CLASS="t">If an error occurs as the result of an Invoke function call, the ShowException function attempts to display information about the exception. Note that this function uses a global window handle, which must be set before this function can&nbsp;be called.</P>

<pre><code><FONT FACE="Courier" SIZE="2">void ShowException(LPOLESTR szMember, HRESULT hr, EXCEPINFO *pexcep, 
    unsigned int uiArgErr)
{
    TCHAR szBuf[512];

    switch (GetScode(hr)) 
    {
        case DISP_E_UNKNOWNNAME:
            wsprintf(szBuf, L"%s: Unknown name or named argument.", 
                szMember);
            break;

        case DISP_E_BADPARAMCOUNT:
            wsprintf(szBuf, L"%s: Incorrect number of arguments.", 
                szMember);
            break;

        case DISP_E_EXCEPTION:
            wsprintf(szBuf, L"%s: Error %d: ", szMember, pexcep-&gt;wCode);
            if (pexcep-&gt;bstrDescription != NULL)
                lstrcat(szBuf, pexcep-&gt;bstrDescription);
            else
                lstrcat(szBuf, L"&lt;&lt;No Description&gt;&gt;");
            break;
</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">        case DISP_E_MEMBERNOTFOUND:
            wsprintf(szBuf, L"%s: method or property not found.", 
                szMember);
            break;

        case DISP_E_OVERFLOW:
            wsprintf(szBuf, L"%s: Overflow while coercing argument 
                values.", szMember);
            break;

        case DISP_E_NONAMEDARGS:
            wsprintf(szBuf, L"%s: Object implementation does not support 
                named arguments.", szMember);
            break;

        case DISP_E_UNKNOWNLCID:
            wsprintf(szBuf, L"%s: The locale ID is unknown.", szMember);
            break;

        case DISP_E_PARAMNOTOPTIONAL:
            wsprintf(szBuf, L"%s: Missing a required parameter.", 
                szMember);
            break;

        case DISP_E_PARAMNOTFOUND:
            wsprintf(szBuf, L"%s: Argument not found, argument %d.", 
                szMember, uiArgErr);
            break;

        case DISP_E_TYPEMISMATCH:
            wsprintf(szBuf, L"%s: Type mismatch, argument %d.", 
                szMember, uiArgErr);
            break;

        default:
            wsprintf(szBuf, L"%s: Unknown error occured.", szMember);
            break;
    }

    MessageBox(g_hwndApp, szBuf, g_szAppTitle, MB_OK | MB_ICONSTOP);
}
</FONT></code></pre>
<P></P>
<P></P>
<P></P></FONT>
</FONT></BODY></HTML>

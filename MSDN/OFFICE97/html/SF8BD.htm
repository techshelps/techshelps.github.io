<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>xlAutoRegister</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>xlAutoRegister</H2><P CLASS="t">Provided by some stand-alone DLLs (XLLs). This entry point is called by Microsoft Excel when a REGISTER or CALL statement tries to register a function without specifying the <I>type_text</I> argument. If that happens, Microsoft Excel calls xlAutoRegister, passing the name of the function that the user tried to register. xlAutoRegister should use the normal xlRegister function to register the function; but, this time, it must specify the <I>type_text</I> argument. This function is required only if the DLL wants to support registering its individual entry points automatically.</P>
<P CLASS="t">If the function name is unknown, this function returns a #VALUE! error (xltypeErr). Otherwise, it returns whatever REGISTER returned (xltypeNum).</P>
<H4 CLASS="h4"><A NAME="sec0"></A>Syntax</H4>
<pre><code><FONT FACE="Courier" SIZE="2">LPXLOPER WINAPI xlAutoRegister(LPXLOPER pxName);
</FONT></code></pre>
<P CLASS="term1"><I>pxName</I> (xltypeStr)</P>
<P CLASS="dt1">The name of the function that needs to be registered. Not case-sensitive.</P>
<H4 CLASS="h4"><A NAME="sec1"></A>Example</H4><P CLASS="t">\SAMPLES\FRAMEWRK\GENERIC.C</P>

<pre><code><FONT FACE="Courier" SIZE="2">LPXLOPER WINAPI xlAutoRegister(LPXLOPER pxName)
{
    static XLOPER xDLL, xRegId;
    int i;

    // This block first initializes xRegId to a
    // #VALUE! error.     This is done in case a function
    // is not found to register.     Next, the code loops
    // through the functions in rgFuncs[]     and uses
    // lpstricmp to determine if the current row in
    // rgFuncs[] represents the function that needs
    // to be registered.     When it finds the proper row,
    // the function is registered and the     register ID
    // is returned to Microsoft Excel. If no matching
    // function is found, an xRegId is returned
    // containing a #VALUE! error.

    xRegId.xltype = xltypeErr;
    xRegId.val.err = xlerrValue;
</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">    for (i = 0; i &lt; rgFuncsRows; i++)
    {
        if (!lpstricmp(rgFuncs[i][0], pxName-&gt;val.str))     
        {
            Excel(xlGetName, &amp;xDLL, 0);

            Excel(xlfRegister, 0, 8,
                (LPXLOPER)&amp;xDLL,
                (LPXLOPER)TempStr(rgFuncs[i][0]),
                (LPXLOPER)TempStr(rgFuncs[i][1]),
                (LPXLOPER)TempStr(rgFuncs[i][2]),
                (LPXLOPER)TempStr(rgFuncs[i][3]),
                (LPXLOPER)TempStr(rgFuncs[i][4]),
                (LPXLOPER)TempStr(rgFuncs[i][5]),
                (LPXLOPER)TempStr(rgFuncs[i][6]));

            /* Free the XLL filename */
            Excel(xlFree, 0, 1, (LPXLOPER)&amp;xDLL);

            return (LPXLOPER)&amp;xRegId;
        }
    }

    return (LPXLOPER)&amp;xRegId;
}
</FONT></code></pre>
<H4 CLASS="h4"><A NAME="sec2"></A>Related Function</H4><P CLASS="t">xlAutoOpen</P></FONT>
</FONT></BODY></HTML>

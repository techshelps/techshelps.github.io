<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling the Function from Within Microsoft Excel</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Calling the Function from Within Microsoft Excel </H1><P CLASS="t">Once you have created a DLL, you should be able to call the DLL from within Microsoft Excel.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">The examples in this chapter discuss calling a DLL function from a worksheet or XLM sheet. For information about calling DLL functions from Visual Basic, see Chapter 5, "Using DLLs from Visual Basic." Microsoft Excel 97 has eliminated Macro Sheet as a choice from the "Insert" menu. There are still two remaining methods for getting a macro sheet from the user interface:</P>
<P CLASS="ls2">    1.    Press Ctrl+F11</P>
<P CLASS="ls2">    2.    Right-click on a sheet tab and choose "Insert".</P>
<P></P>
<P></P>
<H3><A NAME="sec0"></A>Functions for Linking DLLs</H3><P CLASS="t">Microsoft Excel uses three key functions to link to DLLs. The first function, REGISTER, establishes a dynamic link to a function that resides in a DLL. The CALL function then calls that DLL function. Finally, the UNREGISTER function breaks the link, allowing the operating system to remove the DLL from memory. For an example, see the following macro.</P>
<P CLASS="a">    <img src="CH07_02.gif"></P>
<H3><A NAME="sec1"></A>Registering the Function</H3><P CLASS="t">Cell B1 registers the function CalcCircum, which is exported by a DLL called CIRCUM.DLL. If the function is found, REGISTER returns a number called a <I>register ID.</I> That number can then be used as the first argument to the CALL and&nbsp;UNREGISTER functions.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">The third argument to the REGISTER function informs Microsoft Excel what data types the CalcCircum function expects and what data type it will return. The first letter is a code describing the return type, in this case, E, meaning a pointer to a floating-point number. The next letter or letters describe all the arguments. The CalcCircum function takes a pointer to a floating-point number as its single argument, so the second letter of the code is E. Microsoft Excel supports several data types, such as integers, floating-point numbers, strings, arrays, and Booleans.</P>
<P CLASS="t">There is even a special code for the Microsoft Excel internal data type, the XLOPER; for more information, see "The XLOPER Data Type" on page 151. All of&nbsp;the recognized data types are described under "REGISTER" on page 219, and in&nbsp;the online Microsoft Excel Function Reference. To find this information, look under the help topic titled "Using the CALL and REGISTER functions."</P>
<P CLASS="t">After the registration, cell B2 calls the function, with an argument of 100. The result becomes the value of B2. Finally, B3 unregisters the function, allowing the&nbsp;DLL to be removed from memory.</P>
<H3><A NAME="sec2"></A>Running the Function</H3><P CLASS="t">Now try running the CalcCircum function. Make sure the name fCircum is defined to refer to B1. To do this, select B1; then choose the Define... command from the Name submenu on the Insert menu, type fCircum and then choose the OK button. To run the macro, choose the Macros command from the Tools/Macro menu, select fCircum, and then choose the Run button. The DLL should load and run the function. A quick way to see all the return values in the macro sheet is to press CTRL+` (accent grave). Microsoft Excel then switches into Display Values mode, and you see something like the following illustration.</P>
<P CLASS="a">    <img src="CH07_03.gif"></P>
<P CLASS="t">The value in B1 is the result of registering the function; in other words, it is the register ID. This value may vary from session to session. The value in B2 is the result of evaluating the CalcCircum function. The values in B3 and B4 indicate that both of the commands in these cells were evaluated successfully. You can press CTRL+` again to switch back to Display Formulas mode.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec3"></A>Registering a Function Automatically</H3><P CLASS="t">For registering functions you need to use only once, there is a shortcut. You can use an alternate form of the CALL function, which automatically registers and then calls a function. The following illustration shows this form.</P>
<P CLASS="a">    <img src="CH07_04.gif"></P>
<P CLASS="t">This shortcut is helpful because it can be entered directly on a worksheet, as well as on a macro sheet. This is one way you can allow worksheets to use functions that are defined in a DLL.</P>
<H3><A NAME="sec4"></A>Defining a Name for the Function</H3><P CLASS="t">Although the preceding methods are effective, you ideally would like to be able to provide "native" functions, which look to the user like ordinary Microsoft Excel functions. To do this, you can use the full form of the REGISTER function on a worksheet. The following illustration shows this form.</P>
<P CLASS="a">    <img src="CH07_05.gif"></P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">In this example, in addition to registering the function, REGISTER defines a new&nbsp;name so that you can refer to the function directly. To do this, you need to&nbsp;specify the Microsoft Excel internal name, the names of the arguments, and the&nbsp;category to which this function belongs. Now, when the user chooses the Function... command from the Insert menu, the new function appears in the list under Math&nbsp;&amp;&nbsp;Trig, as shown in the following illustration.</P>
<P CLASS="a">    <img src="CH07_06.gif"></P>
<P CLASS="t">For more information about using the different forms of REGISTER, see page&nbsp;219. For more information about using the different forms of CALL, see&nbsp;page 207.</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Spreadsheets</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="workingwithspreadsheets"></a>Working with Spreadsheets</h2>
<p>
With Microsoft Access and installable ISAM drivers, you can link or open spreadsheets and manipulate information in them as if they were database tables. The procedures for linking spreadsheets and opening them directly are very similar to the procedures for linking and opening external databases. The following sections explain how to use DAO to access data in Microsoft Excel.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;The procedure for accessing the data in Lotus 1-2-3 spreadsheet files (versions WK1, WK3, or WKS) is similar to the procedure used to access data in Microsoft Excel. For information on special considerations for using data in Lotus 1-2-3 spreadsheets, search the Help index for “Lotus 1-2-3.”</p>
<h3>Working with Microsoft Excel Worksheets and Workbooks</h3>
<p>
The Microsoft Excel installable ISAM supports the following single-sheet worksheet and multiple-sheet workbook versions of Microsoft Excel: Microsoft Excel versions 3.0 and 4.0 for single-sheet worksheets, and Microsoft Excel versions 5.0, 7.0, and 8.0 for multiple-sheet workbooks. There are a few operations that you cannot perform on Microsoft Excel worksheets or workbooks through the Microsoft Excel installable ISAM:
<ul>
<li>
You cannot delete rows from Microsoft Excel worksheets or workbooks.</li>
<li>
You can clear data from individual cells in a worksheet, but you cannot modify or clear cells that contain formulas.</li>
<li>
You cannot create indexes on Microsoft Excel worksheets or workbooks.</li>
<li>
You cannot read encrypted data through the Microsoft Excel installable ISAM. You can’t use the PWD argument (PWD=<i>password</i>) in the connection string to open an encrypted worksheet or workbook, even if you supply the correct password. You must decrypt all Microsoft Excel worksheets or workbooks through the Microsoft Excel user interface if you plan to link or open them in your Microsoft Access database.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the PWD argument, see “Specifying Passwords” earlier in this chapter.</p>
</li>
</ul>
<h5>Specifying Sheets and Ranges in Microsoft Excel Worksheet and Workbook Files</h5>
<p>
You can specify a subset of the available data when you first link or open a Microsoft Excel worksheet or workbook in Visual Basic code. In worksheet files, you can link or open the entire sheet, a named range of cells, or an unnamed range of cells. In a workbook file, you can link or open a single worksheet, a named range anywhere in the workbook, or an unnamed range in a single worksheet.</p>
<p>
When you link data from a Microsoft Excel worksheet, you must set the <b>Connect</b> property to a connection string that includes the DATABASE argument; you must also set the <b>SourceTableName</b> property to the name of the worksheet or range of cells you are accessing. When you open a worksheet or range of cells directly, you set the connection string in the <i>dbname</i> argument of the <b>OpenDatabase</b> method and you specify the name of the worksheet or range of cells in the <i>source</i> argument of the <b>OpenRecordset</b> method. The following table lists the conventions for these settings.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">To link or open this object</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">In this version of Microsoft&nbsp;Excel</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Use this syntax</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Entire sheet in a worksheet file</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
3.0 and 4.0 </td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Set the DATABASE or <i><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">dbname</i> argument to specify the fully-qualified path to the worksheet file; set the <b>SourceTableName</b> property or the <i>source</i> argument to specify the sheet as <i>filename</i><b>#xls</b>, where <i>filename</i> is the name of the worksheet.</td>
</tr>
<tr valign=top>
<TD>
Entire worksheet in a workbook file</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
5.0, 7.0, and 8.0</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Set the DATABASE or <i><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">dbname</i> argument to specify the fully-qualified path to the workbook file, including the workbook file name; set the <b>SourceTableName</b> property or the <i>source</i> argument to specify the sheet as <i>sheetname</i><b>$</b>, where <i>sheetname </i>is the name of the worksheet. <p>
<b>Important   </b>You must follow the worksheet name with a dollar sign ($).</p>
</td>
</tr>
<tr valign=top>
<TD>
Named range of cells in a worksheet or workbook file</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
3.0, 4.0, 5.0, 7.0, and 8.0</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Set the DATABASE or <i><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">dbname</i> argument to specify the fully-qualified path to the worksheet or workbook file, including the worksheet or workbook file name; set the <b>SourceTableName</b> property or the <i>source</i> argument to specify the named range as <i>NamedRange</i>, where <i>NamedRange</i> is the name you assigned to the range in Microsoft Excel.<p>
<b>Important   </b>You must name the range in Microsoft Excel before attempting to link or open it.</p>
</td>
</tr>
<tr valign=top>
<TD>
Unnamed range of cells in a worksheet file</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
3.0 and 4.0</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Set the DATABASE or <i><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">dbname</i> argument to specify the fully-qualified path to the worksheet file, including the worksheet file name; set the <b>SourceTableName</b> property or the <i>source</i> argument to specify the range as <i>FirstCellInRange</i><b>:</b><i>LastCellInRange</i>. For example, to access cells A1 through Z256, you would set the <b>SourceTableName</b> property or the <i>source</i> argument to <code>A1:Z256</code>.</td>
</tr>
<tr valign=top>
<TD>
Unnamed range of cells in a single worksheet in a workbook file</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
5.0, 7.0, and 8.0</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Set the DATABASE or <i><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">dbname</i> argument to specify the fully-qualified path to the workbook file, including the workbook file name; set the <b>SourceTableName</b> property or the <i>source</i> argument to specify the sheet you want to link or open as <i>sheetname</i><b>$</b> and the range as <i>FirstCellInRange</i><b>:</b><i>LastCellInRange</i>. For example, to access cells A1 through Z256 in a worksheet called Sales, you would set the <b>SourceTableName</b> property or the <i>source</i> argument to <code>Sales$A1:Z256</code>.</td>
</tr>
</table>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You cannot specify a value in a range that exceeds the maximum number of rows, columns, or sheets for the worksheet or workbook. For more information on these values, see your Microsoft Excel documentation.</p>
<h4>Linking Microsoft Excel Worksheets</h4>
<p>
To link data from a Microsoft Excel worksheet to your Microsoft Access database, use the <b>CurrentDb</b> function to return an object variable that represents the current Microsoft Access database. Then create a <b>TableDef</b> object and set the connection string and source table name: set the <b>TableDef</b> object’s<b> Connect</b> property to specify the source database type and the full path to the Microsoft Excel worksheet or workbook, and set its <b>SourceTableName</b> property to the name of the worksheet or range of cells.</p>
<p>
The following example links a Microsoft Excel version 5.0 worksheet named January Sales in a workbook named Q1Sales.xls located in the Sales folder to a Microsoft Access database:</p>
<pre><code>Sub LinkExcelSheet()
&#09;Dim dbs As Database
&#09;Dim tdf As TableDef
&#09;Dim rstSales As Recordset

&#09;' Open the Microsoft Access database.
&#09;Set dbs = CurrentDb

&#09;' Create a TableDef object.
&#09;Set tdf = dbs.CreateTableDef(&quot;Linked Microsoft Excel Worksheet&quot;)

&#09;' Set the connection string to specify the source database type and the
&#09;' path to the workbook that contains the data you want to link.
&#09;tdf.Connect = &quot;Excel 5.0;DATABASE=C:\Sales\Q1Sales.xls&quot;

&#09;' Set the SourceTableName property to the worksheet you want to access.
&#09;tdf.SourceTableName = &quot;January Sales$&quot;

&#09;' Append the TableDef object to the TableDefs collection to create a link.
&#09;dbs.TableDefs.Append tdf

&#09;' Create a Recordset object from the linked Microsoft Excel worksheet.
&#09;Set rstSales = dbs.OpenRecordset(&quot;Linked Microsoft Excel Worksheet&quot;)
End Sub
</code></pre>
<p>
The following code shows the connection information you would use to link a range of cells named ThirdQuarter in a Microsoft Excel version 8.0 worksheet called Sales.xls which is located on C:\Excel\Examples to a Microsoft Access database.</p>
<pre><code>tdfThirdQtr.Connect = &quot;Excel 8.0; DATABASE=C:\Excel\Examples\Sales.xls&quot;
tdfThirdQtr.SourceTableName = &quot;ThirdQuarter&quot;
</code></pre>
<p>
<img src="abac18_2.gif" border=0></p>
<p>
Tip   Instead of specifying the connection string and source table name by setting properties of the <b>TableDef</b> object, you can specify them by using the<i> connect</i> and <i>source</i> arguments of the <b>CreateTableDef</b> method. You can also use the Microsoft Access user interface to link external data. For more information on using the<b> CreateTableDef</b> method or the user interface to link external data, see “Linking External Tables” earlier in this chapter. </p>
<h5>Opening Microsoft Excel Worksheets</h5>
<p>
To open a Microsoft Excel worksheet directly from your Microsoft Access database, create a <b>Database</b> object and set the arguments of the <b>OpenDatabase</b> method to specify the full path to the worksheet or workbook, whether to open the worksheet or workbook exclusively, whether to open it with read/write or read-only permissions, and the source database type. Specify the name of the worksheet or range of cells as the <i>source</i> argument of the <b>OpenRecordset</b> method.</p>
<p>
The following example opens a Microsoft Excel version 4.0 worksheet named Data.xls directly from a Microsoft Access database, creates a <b>Recordset</b> object from the worksheet, and counts the number of records that appear in the <b>Recordset</b> object.</p>
<pre><code>Sub OpenExcel4Sheet()
&#09;Dim dbs As Database
&#09;Dim rst As Recordset
&#09;Dim intNumRecords As Integer

&#09;' Open the Microsoft Excel worksheet named Data.xls without exclusive access
&#09;' and with read/write permissions. 
&#09;Set dbs = OpenDatabase(&quot;C:\Excel\Data.xls&quot;,False, False, &quot;Excel 4.0;HDR=No;&quot;)

&#09;' Create a Recordset object from the worksheet Data.xls. The number sign
&#09;' character (#) tells the installable ISAM that the code is referencing
&#09;' the entire worksheet.
&#09;Set rst = dbs.OpenRecordset(&quot;Data#xls&quot;)

&#09;' Use the MoveLast method to populate the Recordset; use the RecordCount 
&#09;' property to count the records and display a message that gives the results.
&#09;rst.MoveLast
&#09;intNumRecords = rst.RecordCount
&#09;MsgBox &quot;There are &quot; &amp; intNumRecords &amp; &quot; rows in this worksheet.&quot;
&#09;rst.Close
End Sub
</code></pre>
<p>
This next example opens a worksheet named SampleSheet in a Microsoft Excel version 7.0 workbook named Data.xls, creates a <b>Recordset</b> object from the worksheet, and counts the number of records that appear in the <b>Recordset</b> object.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Use the source database type <code>Excel 5.0</code> in the connection string for both Microsoft Excel version 5.0 and Microsoft Excel version 7.0. <code>Excel 7.0</code> isn’t a valid source database type.</p>
<pre><code>Sub OpenExcel7Sheet()
&#09;Dim dbs As Database
&#09;Dim rst As Recordset
&#09;Dim intNumRecords As Integer

&#09;' Open the Microsoft Excel workbook named Data.xls without exclusive access
&#09;' and with read/write permissions.
&#09;Set dbs = OpenDatabase(&quot;C:\Excel\Data.xls&quot;,False, False, &quot;Excel 5.0;HDR=No;&quot;)

&#09;' Create a Recordset from the worksheet. The dollar sign character following 
&#09;' the sheet name tells the installable ISAM that the code is referencing the
&#09;' entire sheet.
&#09;Set rst = dbs.OpenRecordset(&quot;SampleSheet$&quot;)

&#09;' Use the MoveLast method to populate the Recordset; use the RecordCount
&#09;' property to count the records and display a message that gives the results.
&#09;rst.MoveLast
&#09;intNumRecords = rst.RecordCount
&#09;MsgBox &quot;There are &quot; &amp; intNumRecords &amp; &quot; rows in this worksheet.&quot;
&#09;rst.Close
End Sub
</code></pre>
<p>
Note<b>  </b> Microsoft Excel version 8.0 supports the ability to create files that contain formatting information for both Microsoft Excel version 7.0 and Microsoft Excel version 8.0. You can create files that can be opened by either Microsoft Excel version 7.0 or Microsoft Excel version 8.0 without having to convert the file format. You can access these files only in read-only mode from Microsoft Access.</p>
<h4>Using the HDR Argument to Suppress Headers</h4>
<p>
Both Microsoft Excel and Lotus 1-2-3 include the HDR argument in the connection string. The HDR argument determines whether the first row of the range to be opened should be treated as a record or as field names when the Microsoft Access table is created. The following table describes the settings for the HDR argument.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">HDR argument setting</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Result</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Yes</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Data in the first row of a spreadsheet range is treated as field names.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
No</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Data in the first row of a spreadsheet range is treated as a record.</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<p>
For Microsoft Excel worksheets and workbooks, and Lotus 1-2-3 spreadsheets, this behavior is managed by the<b> </b>FirstRowHasNames<b> </b>setting in the Windows Registry. You can find this setting in the <b>\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft \Jet \3.5\Engines\Lotus</b> key for Lotus 1-2-3 and in the <b>\HKEY_LOCAL_MACHINE \SOFTWARE\Microsoft\Jet\3.5\Engines\Excel</b> key for Microsoft Excel. The default value of the FirstRowHasNames setting is 01 (Yes), which specifies that the first row in any range is treated as if it contains field name information.</p>
<p>
You can override this Windows Registry setting on a range-by-range basis by setting the HDR argument in the connection string. For example, in the code in the preceding section, the HDR argument is set to No, which specifies that the first row of the worksheet is treated as a record in the table, not as a header containing field names. If the HDR argument were set to Yes in this example, the total records in the recordset wouldn’t include the first record, and the variable <code>intNumRecords</code> would be one less than its value when the HDR argument is set to No.</p>
</FONT></FONT></BODY>
</HTML>

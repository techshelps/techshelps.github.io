<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Database Maintenance</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="databasemaintenance"></a>Database Maintenance</h2>
<p>
As your application is used, the database file can grow in size. If you are responsible for the maintenance of your database, you’ll need to perform a number of system-oriented tasks from time to time, such as compacting the database and repairing it if it becomes corrupted. This section discusses these maintenance tasks.</p>
<p>
If you are performing compact and repair operations, you will often use the menu commands provided in the user interface. The <b>Compact Database</b> and <b>Repair Database</b> commands are both available on the <b>Database Utilities</b> submenu (<b>Tools</b> menu) in the Microsoft Access startup window.</p>
<p>
However, if you want to provide a way for your users to compact and repair their copies of your application, you can provide them with either an icon that performs the compact and repair operations or code that compacts and repairs the database automatically.</p>
<p>
You can create a shortcut that uses the <b>/compact</b> or <b>/repair</b> command-line options. You can specify either option, or both. If you specify both the <b>/compact</b> and <b>/repair</b> options, the repair always happens before the compact. These command-line options compact and repair your application without opening it. When you create the shortcut, type a command line that consists of:
<ul>
<li>
The Microsoft Access application file name, MSAccess.exe. If you are using Microsoft Windows NT Workstation, you must specify a full path to the Microsoft Access application file.</li>
<li>
The file name of the front-end database.</li>
<li>
Either the <b>/compact</b> option, the <b>/repair</b> option, or both.</li>
</ul>
<p>
Important   To compact or repair a database, the database and any connections to it must be closed. Also, if you have established user-level security for your application, the user running the repair or compact operation must have Open Exclusive permission for the database, and have Modify Design or Administer permission for all tables in the database. For more information on permissions, search the Help index for “setting permissions.” Additionally, when compacting, there must be sufficient disk space for both the original and compacted versions of the database, even if the database is being compacted to the same file name. This is because the compacted database is renamed as the original database only after compacting to a temporary file is successful.</p>
<h3>Compacting a Database</h3>
<p>
To maintain a high state of performance, Microsoft Access defers the removal of discarded pages until you shut down the database and compact the discarded pages. This design keeps the interactive performance of your database high at the expense of recoverable disk space.</p>
<p>
Compacting a database:
<ul>
<li>
Reorganizes a table’s pages so they reside in adjacent database pages. This improves performance because the table is no longer fragmented across the database. If a table has a primary key defined, Microsoft Access copies the records in primary key order, which makes reading ahead more efficient. This produces an effect similar to clustered indexes in Microsoft SQL Server; however, unlike true clustered indexes, Microsoft Access doesn’t maintain primary key order when users add, delete, or modify records after the database is compacted. If a table doesn’t have a primary key, Microsoft Access copies records in the order that the records are stored on disk.</li>
<li>
Reclaims unused space created by object and record deletions. When objects or rows are deleted from the database, the space they occupied is marked as available. However, the size of the database doesn’t shrink unless the database is compacted.</li>
<li>
Resets incrementing AutoNumber fields (called Counter fields in Microsoft Access versions 2.0 and earlier) so the next value allocated will be one more than the last undeleted record.</li>
<li>
Regenerates the table statistics used in the query optimization process. These statistics can become out-of-date over time, typically due to transactions that were rolled back or to the database not being closed properly.</li>
<li>
Flags all queries so that they will be recompiled the next time the query is run. This is important because database statistics can change, which could cause a previously compiled query to contain inaccurate optimization information.</li>
</ul>
<p>
To compact your database, point to <b>Database Utilities</b> on the <b>Tools</b> menu and click <b>Compact Database</b>. If the database you want to compact is currently open, it will be closed, compacted into a temporary file, and then reopened. If no database is open, you must specify the database to compact and the database to compact into. If you specify the same file name to compact into, Microsoft Access compacts into a temporary file. When Microsoft Access compacts to a temporary file, it renames the temporary file back to the original file name once the compacting process is completed.</p>
<p>
You can also use the <b>CompactDatabase</b> method of the <b>DBEngine</b> object to compact a database. When you use the <b>CompactDatabase</b> method, you must compact to a file with a different name. The following code example uses the<b> CompactDatabase</b> method to compact a database to a temporary file and then renames that temporary file to the original name if the compacting process is successful.</p>
<pre><code>Sub CompactDB()
&#09;On Error GoTo CompactDB_Err
&#09;Const conFilePath = &quot;C:\Program Files\Microsoft Office\Office\Samples\&quot;

&#09;' Compact the database to a temp file.
&#09;DBEngine.CompactDatabase conFilePath &amp; &quot;Northwind.mdb&quot;, _&#09;&#09;conFilePath &amp; &quot;NorthTemp.mdb&quot;

&#09;' Delete the previous backup file if it exists.
&#09;If Dir (conFilePath &amp; &quot;Northwind.bak&quot;) &lt;&gt; &quot;&quot; Then
&#09;&#09;Kill conFilePath &amp; &quot;Northwind.bak&quot;
&#09;End If

&#09;' Rename the current database as backup and rename the temp file to&#09;' the original file name.
&#09;Name conFilePath &amp; &quot;Northwind.mdb&quot; As conFilePath &amp; &quot;Northwind.bak&quot;
&#09;Name conFilePath &amp; &quot;NorthTemp.mdb&quot; As conFilePath &amp; &quot;Northwind.mdb&quot;
&#09;MsgBox &quot;Compacting is complete&quot;

Exit_CompactDB:
&#09;Exit Sub
&#09;
CompactDB_Err:
&#09;MsgBox Err.Description
&#09;Resume Exit_CompactDB
End Sub
</code></pre>
<p>
The <b>CompactDatabase</b> method also gives you the option of changing the encryption state, the version, and the disk or folder of a database while it’s being compacted. In other words, you can choose to convert an encrypted database to a non-encrypted database, or vice versa.</p>
<p>
For example, the following code compacts a database named Old and creates a new, encrypted database named New.</p>
<pre><code>DBEngine.CompactDatabase &quot;C:\Old.mdb&quot;, &quot;C:\New.mdb&quot;, _
&#09;dbLangGeneral, dbEncrypt
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on database encryption, see “Encrypting a Database” in Chapter 14, “Securing Your Application.”</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Compacting cannot be done inside a transaction, or on a database that is currently open by another user.</p>
<h4>Important Considerations When Compacting Replicated Databases</h4>
<p>
Replicated databases make extensive use of temporary space, especially when many design changes are made to an application. Just as with non-replicated databases, compacting regularly reduces file size and improves performance.</p>
<p>
For optimal results, compact a replicated database twice. Compacting a replica the first time reclaims some space and flags other space as available for reclaiming later. Compacting a second time reclaims all available space. Compacting more than twice doesn’t provide additional benefits.</p>
<p>
Improperly compacting the Design Master of a replica set causes the replica set to lose its Design Master. When Microsoft Access opens a replica, it stores the name and location of the file in the database. The next time Microsoft Access opens the replica, it checks to see if the file has the same name and location. If so, then the file opens normally. If not, Microsoft Access gives the replica a new <b>ReplicaID</b> property value and, if the file was the Design Master, removes the Design Master flag. This prevents two replicas from having the same <b>ReplicaID</b> property value or a replica set from having two Design Masters.</p>
<p>
To prevent a Design Master from losing its Design Master flag when you compact a replicated database, do one of the following:
<ul>
<li>
Open the Design Master database, and then click the <b>Compact Database</b> command on the <b>Database Utilities</b> submenu (<b>Tools</b> menu). When you do this, Microsoft Access compacts to a temporary file, and only deletes the original file and renames the temporary file to the original file name if the compact operation is successful.</li>
<li>
If you prefer to save the original file as a backup, close the Design Master database before you use the <b>Compact Database</b> command, specify the Design Master as the database to compact from, and then specify a temporary file name to compact into, but do not open the database with the <b>Open Database</b> command (<b>File</b> menu) until you have renamed the compacted database back to its original file name. This also applies if you are using the <b>CompactDatabase</b> method in code to compact. The <b>CompactDatabase</b> method requires you to compact to a new file name. In both cases, if you open the temporary database before you rename it back to its original file name, Microsoft Access removes the Design Master flag.</li>
</ul>
<h3>Repairing a Database</h3>
<p>
If your database is damaged, close the database, then point to <b>Database Utilities</b> on the <b>Tools</b> menu and click <b>Repair Database</b>. You can also use the <b>RepairDatabase</b> method of the <b>DBEngine</b> object to repair your database. The <b>RepairDatabase</b> method checks all pages in the database for correct linkage, validates all system tables, and validates all indexes. Because the <b>RepairDatabase</b> method can’t fix all possible forms of database corruption, you should back up your database files regularly to avoid unrecoverable data loss. This kind of corruption can occur when the system isn’t shut down normally (such as during a power failure).</p>
<p>
The <b>RepairDatabase</b> method takes only one argument, the name of the database file you want to repair. For example, to repair the Northwind database, use the following code:</p>
<pre><code>DBEngine.RepairDatabase &quot;C:\Program Files\Microsoft Office\Office&quot; _
&#09;&amp; &quot;\Samples\Northwind.mdb&quot;
</code></pre>
<p>
When a database is repaired, it may increase in size, because the process of creating indexes may leave some deleted pages in the database. It’s always a good idea to compact the database after any repair to eliminate unnecessary pages.</p>
</FONT></FONT></BODY>
</HTML>

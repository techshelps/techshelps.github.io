<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an External Table</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="creatingexternaltable"></a>Creating an External Table</h2>
<p>
You can create a table in the format of an external data source by creating a Microsoft Access table and exporting it. For example, you can create a table in Microsoft Access and export it as a Microsoft Excel worksheet. Microsoft Access creates a worksheet in Microsoft Excel that contains a copy of the data from your Microsoft Access table. Field names from the Microsoft Access table are placed in the first row of the worksheet.</p>
<p>
You can create an external table by using either the Microsoft Access user interface or Visual Basic code.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create an external table by using the Microsoft Access user interface</b>
<ol>
<li>
Create the Microsoft Access table.</li>
<li>
In the Database window, click the name of the table you want to export.</li>
<li>
On the <b>File</b> menu, click <b>Save As/Export</b>.</li>
<li>
In the <b>Save As</b> dialog box, click <b>To An External File Or Database</b>, and then click <b>OK</b>.</li>
<li>
In the <b>Save As Type</b> box, click the type of data source you want.</li>
<li>
Select the drive and folder you want to export to.</li>
<li>
Double-click an existing file or enter a new name in the <b>File Name</b> box, and then click <b>Export</b>.<p>
Caution   Usually, if you export to an existing file, Microsoft Access deletes and replaces the data in that file. The exceptions occur when you export to a Microsoft Excel version 5.0, 7.0, or 8.0 workbook, where data is copied to the next available worksheet.</p>
</li>
</ol>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To create an external table by using Visual Basic code</b>
<ol>
<li>
Open the database you want to create the table in. If it is the current database, use the <b>CurrentDb</b> function to return an object variable that represents the current database. If it isn’t the current database, use the <b>OpenDatabase</b> method to open the database you want.</li>
<li>
Use the <b>CurrentDb</b> function to create a <b>Database</b> object that points to the current database.</li>
<li>
Use the <b>CreateTableDef</b> method of the <b>Database </b>object to create a table definition for the Microsoft Access table.</li>
<li>
Use the <b>CreateField</b> method of the <b>TableDef</b> object to create one or more fields in the Microsoft Access table.</li>
<li>
Use the <b>Append</b> method of the <b>Fields</b> collection to add the new field or fields to the Microsoft Access table.</li>
<li>
Use the <b>Append</b> method of the <b>TableDefs</b> collection to create the Microsoft Access table.</li>
<li>
Use the <b>TransferDatabase</b> method to create the external table in the specified folder.</li>
<li>
Use the <b>Delete</b> method of the <b>TableDefs</b> collection to delete the Microsoft Access table definition.</li>
</ol>
<p>
After you’ve created the table, you can access it from the table’s native application or you can link or open it as you would any other external table. The following example creates a Microsoft Access table, uses it as the basis for a FoxPro table, and then links the new external FoxPro table to a Microsoft Access database.</p>
<pre><code>Public Sub CreateExternalFoxProTable()
&#09;Dim dbs As Database
&#09;Dim tdfNewExternalDatabase As TableDef
&#09;Dim tdfTestNewTable As TableDef
&#09;Dim fldContactName As Field
&#09;Dim fldPhoneNumber As Field
&#09;Dim qdfInsertRecords As QueryDef
&#09;Dim rstCheckRecordCount As Recordset
&#09;Dim intNumRecords As Integer

&#09;' Create a Database object that points to the current database.
&#09;Set dbs = CurrentDb
&#09;
&#09;' Create a table definition for the Microsoft Access table that 
&#09;' provides the structure information for the FoxPro table.
&#09;Set tdfNewExternalDatabase = dbs.CreateTableDef(&quot;AccessTable&quot;)
&#09;
&#09;' Create two Text fields in the Microsoft Access table.
&#09;Set fldContactName = tdfNewExternalDatabase.CreateField(&quot;Contact_name&quot;, dbText)
&#09;fldContactName.Size = 30
&#09;Set fldPhoneNumber = tdfNewExternalDatabase.CreateField(&quot;Phone_number&quot;, dbText)
&#09;fldPhoneNumber.Size = 25
&#09;
&#09;' Append the newly created fields to the Microsoft Access table.
&#09;tdfNewExternalDatabase.Fields.Append fldContactName
&#09;tdfNewExternalDatabase.Fields.Append fldPhoneNumber

&#09;' Append the TableDef to the TableDefs collection to create the table.
&#09;dbs.TableDefs.Append tdfNewExternalDatabase

&#09;' Use the TransferDatabase method to export the Microsoft Access table's structure
&#09;' to a FoxPro table; this creates a new FoxPro table in the specified folder.
&#09;DoCmd.TransferDatabase acExport, &quot;FoxPro 2.6&quot;,&quot;C:\FoxPro\Data&quot;, acTable, _
&#09;&#09; &quot;AccessTable&quot;,&quot;FoxTable&quot;
&#09;
&#09;' Delete the TableDef for the Microsoft Access table.
&#09;dbs.TableDefs.Delete &quot;AccessTable&quot;

&#09;' Link the new table and test it by inserting some records.
&#09;Set tdfTestNewTable = dbs.CreateTableDef(&quot;FoxTable&quot;)
&#09;tdfTestNewTable.Connect = &quot;FoxPro 2.6;DATABASE=C:\FoxPro\Data;&quot;
&#09;tdfTestNewTable.SourceTableName = &quot;FoxTable&quot;
&#09;dbs.TableDefs.Append tdfTestNewTable
&#09;Set qdfInsertRecords = dbs.CreateQueryDef(&quot;Insert Records&quot;)
&#09;qdfInsertRecords.SQL = &quot;INSERT INTO FoxTable VALUES ('C. J. Date', '555-5050')&quot;
&#09;qdfInsertRecords.Execute
&#09;qdfInsertRecords.SQL = &quot;INSERT INTO FoxTable VALUES ('Roger Penrose', '333-5050')&quot;
&#09;qdfInsertRecords.Execute
&#09;qdfInsertRecords.SQL = &quot;INSERT INTO FoxTable VALUES ('Alan Turing', '011-56-5050')&quot;
&#09;qdfInsertRecords.Execute
&#09;qdfInsertRecords.SQL = &quot;INSERT INTO FoxTable VALUES ('Niklaus Wirth', '330-2430')&quot;
&#09;qdfInsertRecords.Execute

&#09;' Count the records to ensure that four records were added.
&#09;Set rstCheckRecordCount = tdfTestNewTable.OpenRecordset()
&#09;rstCheckRecordCount.MoveLast
&#09;intNumRecords = rstCheckRecordCount.RecordCount
&#09;MsgBox &quot;Successfully added &quot; &amp; intNumRecords &amp; &quot; records.&quot;

&#09;rstCheckRecordCount.Close
&#09;dbs.Close
End Sub
</code></pre>
</FONT></FONT></BODY>
</HTML>

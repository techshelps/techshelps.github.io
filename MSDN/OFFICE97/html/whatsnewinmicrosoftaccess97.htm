<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What’s New in Microsoft Access 97</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="whatsnewinmicrosoftaccess97"></a>What’s New in Microsoft Access 97</h2>
<p>
Microsoft Access for Windows&reg; 95 introduced many new features for application development. Microsoft Access 97 introduces additional new features, as well as enhancements to existing features. The following sections highlight new features introduced in both versions. </p>
<p>
<b><b>See Also</b>&nbsp;&nbsp;&nbsp;</b>For more detailed information on new features in Microsoft Access, search the Help index for “what’s new.”</p>
<p>
<b><b>Note</b>&nbsp;&nbsp;&nbsp;</b>If you have applications that were created with Microsoft Access 95 or earlier, you’ll need to consider several important changes that affect your existing code and database objects. For more information, search the Help index for “converting databases.”</p>
<h3>Visual Basic for Applications Programming Language</h3>
<p>
Visual Basic for Applications replaces Access Basic, which was used in versions 2.0 and earlier, as the programming language for Microsoft Access. This is the same language you use to program in Microsoft Word, Microsoft Excel, and Microsoft Project, as well as the same language found in Microsoft Visual Basic.</p>
<p>
<b>Object-Oriented Language Framework   </b>You can now declare procedures and variables as <b>Public</b> in form and report modules, making them available to other modules in your application. In Microsoft Access 97, you can also use class modules to create custom objects and define your own methods and properties for them. See Chapter 2, <a href="introducingvisualbasic.htm">“Introducing Visual Basic”</a> and Chapter 4, <a href="workingwithvariablesdatatypesconstants.htm">“Working with Variables, Data Types, and Constants.”</a></p>
<p>
<b>Object Creation Syntax   </b>For creating new objects, Visual Basic adds the <b>New</b> keyword. Using the <b>New</b> keyword, you can open more than one instance of the same form at a time. In Microsoft Access 97, you can also use the <b>New</b> keyword to create a new instance of a Visual Basic class. See Chapter 5, <a href="workingwithobjectscollectionsinvisualbasic.htm">“Working with Objects and Collections in Visual Basic.”</a></p>
<p>
<b>Flexible Arguments for Procedures   </b>Using the <b>Optional</b> keyword, you can declare a procedure with optional arguments. Or, using the <b>ParamArray</b> keyword, you can use a variable number of arguments. Also, when calling a procedure, you can specify arguments by name. This makes your code more readable and allows you to pass arguments in any order you like. See Chapter 2, <a href="introducingvisualbasic.htm">“Introducing Visual Basic.”</a></p>
<p>
<b>Conditional Compilation   </b>Using the <b>#If...Then</b> and<b> #End If</b> statements, you can specify code that you want Microsoft Access to include or ignore in your application. This is especially useful as a debugging technique. See Chapter 7, <a href="debuggingvisualbasiccode.htm">“Debugging Visual Basic Code.”</a></p>
<p>
<b>Faster Performance   </b>Microsoft Access includes a new 32-bit version of the Microsoft Jet database engine that is enhanced for improved performance. Because Visual Basic loads only the code you need and performs many operations more quickly than before, your applications load and run faster. In addition, Microsoft Access 97 doesn’t create a form module until you need to add code to it. As a result, your project may have fewer modules to compile, which improves compilation performance and loads your forms more quickly. For information on taking advantage of these improvements and enhancing performance in other ways, see Chapter 13, “Optimizing Your Application.”</p>
<p>
<b>Miscellaneous Language Improvements   </b>For simpler, more readable code, try using the <b>With</b> and <b>For&nbsp;Each…Next</b> statements. Visual Basic now includes two new data types, <b>Boolean</b> and <b>Byte</b>. Visual Basic also has more powerful user-defined types, which allow you to use the <b>ReDim</b> statement on the arrays they contain and which can now include objects. See Chapter 4, <a href="workingwithvariablesdatatypesconstants.htm">“Working with Variables, Data Types, and Constants”</a> and Chapter 5, <a href="workingwithobjectscollectionsinvisualbasic.htm">“Working with Objects and Collections in Visual Basic.”</a></p>
<h3>New Development Environment</h3>
<p>
The incorporation of Visual Basic for Applications into Microsoft Access brings the following new and improved professional development tools. </p>
<p>
<b>Improved Module Window   </b>The Module window is easier to use than ever before, and uses color-coded syntax to make your code easier to read. In Microsoft Access 97, features such as automatic statement building and Data Tips make writing code faster and easier. See Chapter 2, <a href="introducingvisualbasic.htm">“Introducing Visual Basic”</a> and Chapter 7, <a href="debuggingvisualbasiccode.htm">“Debugging Visual Basic Code.”</a></p>
<p>
<b>Better Debugging Tools   </b>The Debug window contains an Immediate pane, where you can type commands and send information; a Watch pane, which you can use to view the value of an expression or a control while your code is running; and a Locals pane, which automatically provides information on the variables in your procedures while they are running. The Debug window can be open even when you aren’t editing a module. See Chapter 7, <a href="debuggingvisualbasiccode.htm">“Debugging Visual Basic Code.”</a></p>
<p>
<b>Object Browser   </b>The Object Browser helps you navigate between the objects in your system and provides you with a complete, easy-to-use reference for all the functions, constants, objects, methods, and properties available to you. See Chapter 5, <a href="workingwithobjectscollectionsinvisualbasic.htm">“Working with Objects and Collections in Visual Basic.”</a></p>
<p>
<b>Setting References   </b>Use the <b>References</b> dialog box (<b>Tools</b> menu) to tell Visual Basic which libraries you want to use in your code. In the<b> References</b> dialog box, you can change referenced libraries without setting initialization options or restarting Microsoft Access. In addition, Microsoft Access 97 provides a <b>References</b> collection which contains <b>Reference</b> objects that you can use to set and check references in your code. See Chapter 12, <a href="Usinglibrarydatabasesdynamic-linklibraries.htm">“Using Library Databases and Dynamic-Link Libraries.”</a></p>
<p>
<b>ODBCDirect   </b>You can now use ODBCDirect to access Open Database Connectivity (ODBC) data sources directly, by using Data Access Objects (DAO) features to bypass Microsoft Jet. See Chapter 19, <a href="developingclientserverapplications.htm">“Developing Client/Server Applications.”</a></p>
<h3>Powerful Applications with Less Effort</h3>
<p>
The following features, available to users and developers alike, provide straightforward solutions to some of the challenges of creating a database application.</p>
<p>
<b>Database Wizard   </b>When you need a simple application right away, or just want to see sample tables, forms, and reports to help you plan your application, the Database Wizard can create all the pieces of many common applications for you. See Chapter 1, <a href="creatingapplication.htm">“Creating an Application.”</a></p>
<p>
<b>Startup Options   </b>Using the <b>Startup</b> dialog box (<b>Tools</b> menu), you can quickly specify your application’s startup form, title bar text, icon, menu, and toolbar, without changing any initialization settings. You use this same interface to make customization options unavailable to your users when you deliver your completed application. See Chapter 1, <a href="creatingapplication.htm">“Creating an Application”</a> and Chapter 15, <a href="deliveringyourapplication.htm">“Delivering Your Application.”</a></p>
<p>
<b>Lookup Fields   </b>While combo boxes and list boxes are a powerful way to provide lookups between tables, they can be difficult to create and manage in your application. If you add Lookup fields to relate data in two tables, however, all your combo and list boxes will look up data for you with no effort at all. See Chapter 3, <a href="usingformstocollectfilterdisplayinformation.htm">“Using Forms to Collect, Filter, and Display Information.”</a></p>
<p>
<b>Filter By Form Interface   </b>Using Filter By Form, it’s easy to create a “query-by-form” interface for your users to find data. And you can customize the way the built-in filtering works by setting the <b>Filter</b>, <b>OrderBy</b>, and <b>FilterOn</b> properties and by responding to the Filter and ApplyFilter events. See Chapter 3, <a href="usingformstocollectfilterdisplayinformation.htm">“Using Forms to Collect, Filter, and Display Information”</a> and Chapter 6, <a href="respondingtoevents.htm">“Responding to Events.”</a></p>
<p>
<b>Programmable Toolbars and Menu Bars   </b>Using the new command bars from Microsoft Office, you can create custom toolbars and menus in your application. See Chapter 1, <a href="creatingapplication.htm">“Creating an Application.”</a></p>
<h3>Advanced Features</h3>
<p>
The following advanced features help make Microsoft Access more powerful and extensible.</p>
<p>
<b>Automation   </b>Microsoft Access can now act as a component that supports Automation, so that you can control it from another application such as Microsoft Excel or Microsoft Visual Basic. See Chapter 11, <a href="communicatingwithotherapplications.htm">“Communicating with Other Applications.”</a></p>
<p>
<b>Report and Keyboard Event Improvements   </b>Two new report events, the Page event and the NoData event, help you respond to common report printing problems. The new <b>KeyPreview</b> property makes it easier to process keyboard events on a form. See Chapter 6, <a href="respondingtoevents.htm">“Responding to Events.”</a></p>
<p>
<b>Object Model Improvements   </b>For more control over your application and its environment, use the <b>Screen</b> object, new methods of the <b>Application</b> object, and the <b>Err</b> and <b>Error</b> objects. See Chapter 5, <a href="workingwithobjectscollections.htm">“Working with Objects and Collections”</a> and Chapter 8, <a href="handlingrun-timeerrors.htm">“Handling Run-Time Errors.”</a></p>
<p>
<b>New ActiveX Controls   </b>With ActiveX controls, formerly called OLE controls or custom controls, you can produce more functional applications. ActiveX controls are now integrated with the toolbox and property sheet. See Chapter 16, <a href="usingactivexcontrols.htm">“Using ActiveX Controls.”</a></p>
<p>
<b>Database Replication   </b>If users of your application need to share data, but aren’t always connected to the network, database replication may be for you. With database replication, Microsoft Access automatically synchronizes changes between databases. In Microsoft Access 97, you can choose to replicate only part of your database. This gives you more control over access to your data and makes your replicated applications easier to maintain. See Chapter 20, <a href="usingreplicationinyourapplication.htm">“Using Replication in Your Application.”</a></p>
<p>
<b>Removing Source Code from Your Application   </b>You can prevent users of your application from viewing or changing your code or the design of your forms and reports by saving your application as an MDE file. When you save your application as an MDE file, Microsoft Access removes all source code from a copy of your database. Your code is compiled and continues to run, but it cannot be viewed or updated. See Chapter 14, <a href="securingyourapplication.htm">“Securing Your Application.”</a></p>
<p>
<b>New Internet Features   </b>With the new Hyperlink data type, you can include hyperlink addresses in your application. Hyperlinks jump to documents located on the Internet or on an internal Web (intranet), or even to other documents or database objects located on your computer. See Chapter 21, <a href="developingapplicationsfortheinternetworldwideweb.htm">“Developing Applications for the Internet and the World Wide Web.”</a></p>
</FONT></FONT></BODY>
</HTML>

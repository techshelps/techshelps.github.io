<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the C API and Visual Basic</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Using the C API and Visual Basic</H1><P CLASS="t">When you call a DLL function from Visual Basic in Microsoft Excel, the DLL function can use the Microsoft Excel Applications Programming Interface (C&nbsp;API) functions to call back into Microsoft Excel. You cannot use the C API across processes. The DLL using the C API must be called from Visual Basic running in Microsoft Excel (a DLL called from Microsoft Project or Microsoft Visual Basic or another Microsoft Office application cannot call the C API). In addition, the C API can be called only after Microsoft Excel has called the DLL. This qualification is met when Visual Basic in Microsoft Excel calls the DLL, and the DLL in turn calls the C API. When the DLL function is called by an external event (such as a DDE command from another application or a Windows timer), the DLL function cannot call the C API.</P>
<P></P>
<P></P>
<P></P>
<P CLASS="t">For more information about using the C API, see Chapter 7, "The Microsoft Excel Applications Programming Interface" and Chapter 8, "Applications Programming Interface Function Reference."</P></FONT>
</FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Your Own Data Types</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="creatingyourowndatatypes"></a>Creating Your Own Data Types</h2>
<p>
You can combine variables of several different types to create user-defined types (known as <i>structures</i> in the C programming language). User-defined types are useful when you want to create a single variable that records several related pieces of information.</p>
<h3>Declaring a User-Defined Type</h3>
<p>
You create a user-defined type with the <b>Type</b> statement, which must be placed in the Declarations section of a standard module. User-defined types can be declared as <b>Private</b> or <b>Public</b> with the appropriate<b> </b>keyword, as shown in the following examples:</p>
<pre><code>Private Type YourType

Public Type YourType
</code></pre>
<p>
For example, you could create a user-defined type that records information about a computer system by placing the following code in the Declarations section of any standard module:</p>
<pre><code>Public Type SystemInfo
&#09;varCPU As Variant
&#09;lngMemory As Long
&#09;intVideoColors As Integer
&#09;curCost As Currency
&#09;dtePurchase As Variant
End Type
</code></pre>
<h4>Declaring Variables of a User-Defined Type</h4>
<p>
You can declare local, private module-level, or public module-level variables of the same user-defined type. For example:</p>
<pre><code>Dim sysMine As SystemInfo, sysYours As SystemInfo
</code></pre>
<p>
The following table illustrates where, and with what scope, you can declare user-defined types and their variables.</p>
<table>
<tr valign=top>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Procedure/Module</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">You can create a user-defined type as</b></td>
<TD>
<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">Variables of a user-defined type can be</b></td>
</tr>
<tr valign=top>
<TD>
</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Procedures</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not applicable</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Not applicable</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Standard modules</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Private or public</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Private or public</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
<tr valign=top>
<TD>
Form or report modules</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<TD>
Private<b><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"> </b>only</td>
<TD>
Private only</td><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</tr>
</table>
<h3>Assigning and Retrieving Values</h3>
<p>
Assigning and retrieving values from the elements of a user-defined variable is similar to setting and getting properties.</p>
<pre><code>sysMine.varCPU = &quot;486&quot;
If sysMine.dtePurchase &gt; #1/1/92# Then
</code></pre>
<p>
You can also assign one variable to another if they are both of the same user-defined type. This assigns all the elements of one variable to the same elements in the other variable.</p>
<pre><code>sysYours = sysMine
</code></pre>
<h3>User-Defined Types That Contain Arrays</h3>
<p>
A user-defined type can contain an ordinary (fixed-size) array, as shown in the following example:</p>
<pre><code>Type SystemInfo
&#09;varCPU As Variant
&#09;lngMemory As Long
&#09;strDiskDrives(25) As String&#09;&#09;&#09;' Fixed-size array.
&#09;intVideoColors As Integer
&#09;curCost As Currency
&#09;dtePurchase As Variant
End Type
</code></pre>
<p>
It can also contain a dynamic array:</p>
<pre><code>Type SystemInfo
&#09;varCPU As Variant
&#09;lngMemory As Long
&#09;strDiskDrives() As String&#09;&#09;&#09;&#09;' Dynamic array.
&#09;intVideoColors As Integer
&#09;curCost As Currency
&#09;dtePurchase As Variant
End Type
</code></pre>
<p>
You can access the values in an array within a user-defined type in the same way that you access the property of an object. For example:</p>
<pre><code>Dim sysMine As SystemInfo

sysMine.strDiskDrives(0) = &quot;1.44 MB&quot;
</code></pre>
<p>
You can also declare an array of user-defined types:</p>
<pre><code>Dim sysAll(100) As SystemInfo
</code></pre>
<p>
Follow the same rules to access the components of each element in the array:</p>
<pre><code>sysAll(5).varCPU = &quot;386SX&quot;
sysAll(intX).strDiskDrives(2) = &quot;100M SCSI&quot;
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on arrays, see “Arrays” later in this chapter.</p>
<h3>Declaring Procedure Arguments</h3>
<p>
You can declare procedure arguments with a user-defined type.</p>
<pre><code>Sub FillSystem(sysAny As SystemInfo)
&#09;sysAny.varCPU = &quot;486&quot;
&#09;sysAny.lngMemory = &quot;24&quot;
&#09;sysAny.curCost = &quot;$3000.00&quot;
&#09;sysAny.dtePurchase = Now
End Sub
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;If you want to pass a user-defined type in a form or report module, the procedure must be private.</p>
<p>
You can return user-defined types from functions, and you can pass a user-defined type variable to a procedure as one of the arguments. Because user-defined types are always passed by reference, the procedure can modify the argument and return it to the calling procedure, as illustrated in the previous example.</p>
<h3>User-Defined Types That Contain Objects</h3>
<p>
User-defined types can also contain objects. For example:</p>
<pre><code>Private Type AccountPack
&#09;frmInput As Form
&#09;dbsPayRollAccount As Database
End Type
</code></pre>
<p>
<img src="abac04_4.gif" border=0></p>
<p>
Tip   Because the <b>Variant</b> data type can store many different types of data, a <b>Variant</b> array can be used in many situations where you may expect to use a user-defined type. A <b>Variant</b> array is actually more flexible than a user-defined type, because you can change the type of data you store in each element at any time, and you can make the array dynamic so that you can change its size as necessary. However, a <b>Variant</b> array always uses more memory than an equivalent user-defined type.</p>
<h3>Nesting Data Structures</h3>
<p>
Nesting data structures can get as complex as you want. In fact, user-defined types can contain other user-defined types, as shown in the following example. To make your code more readable and easier to debug, try to keep all the code that defines user-defined types in one module. For example:</p>
<pre><code>Type DriveInfo
&#09;Type As String
&#09;Size As Long
End Type

Type SystemInfo
&#09;varCPU As Variant
&#09;lngMemory As Long
&#09;strDiskDrives(26) As DriveInfo
&#09;curCost As Currency
&#09;dtePurchase As Variant
End Type
</code></pre>
<p>
The following code demonstrates how you can refer to a nested user-defined type:</p>
<pre><code>Dim sysAll(100) As SystemInfo

sysAll(1).strDiskDrives(0).Type = &quot;Floppy&quot;
</code></pre>
</FONT></FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Avoiding Bugs</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="avoidingbugs"></a>Avoiding Bugs</h2>
<p>
The first step in avoiding or fixing bugs is understanding the three kinds of errors you can encounter:
<ul>
<li>
<b>Compile errors</b>  These errors are the result of an incorrectly constructed statement. You may have mistyped a keyword, omitted some necessary punctuation, or forgotten to balance pairs of statements such as <b>If</b> and <b>End If</b> or <b>For</b> and <b>Next</b>. Visual Basic detects these errors during compilation or when you try to run the code. <p>
Unless you’ve cleared the <b>Auto Syntax Check</b> check box on the <b>Module</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu), Visual Basic displays an error message whenever you enter code that contains a syntax error.</p>
</li>
<li>
<b>Run-time errors</b>  These errors occur, and are detected by Visual Basic, when a statement attempts an impossible operation while the code is running. An example of an impossible operation is division by zero. Suppose you have this statement:<pre><code>Speed = Miles / Hours
</code></pre>
<p>
If the variable <code>Hours</code> is equal to zero, a division by zero error occurs even though the statement itself is syntactically correct. The error is a run-time error because the code must run before Visual Basic can detect the error. Not all run-time errors are easily anticipated or fixed. For example, a “Disk full” error may require you to cancel an update and restore a table to its initial state. If you don’t trap run-time errors, Microsoft Access will stop your code at the place where the error occurred and display the error message associated with that error.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on fixing run-time errors, see Chapter 8, <a href="handlingrun-timeerrors.htm">“Handling Run-Time Errors.”</a></p>
</li>
<li>
<b>Program logic errors</b>  Code containing a program logic error may be syntactically correct and able to perform operations that are entirely valid, but the code may still produce incorrect results. Visual Basic can’t detect program logic errors; you must test the code and analyze the results to verify that the code is performing correctly.</li>
</ul>
<p>
Because successful debugging requires that you understand what’s going on when your code runs, you’ll want to design code that’s easy to analyze. Try the following techniques when designing your code to make the debugging process easier:
<ul>
<li>
Break up your code into <b>Sub</b> and <b>Function</b> procedures that have specific, well-defined purposes.</li>
<li>
Include plenty of comments. As you go back and analyze your code, you’ll understand it much better if you’ve written comments that describe the purpose of each procedure.</li>
<li>
Put the <b>Option Explicit</b> statement in each module. This statement makes Visual Basic generate an error message when it discovers a variable that hasn’t been explicitly declared. One of the most common sources of errors is mistyping a variable name. Visual Basic does not automatically require that you explicitly declare variables, but failing to do so can introduce subtle, hard-to-detect errors into your code. To make sure that all variables must be declared before they are used in a procedure, you can have Microsoft Access insert the <b>Option Explicit </b>statement in the Declarations section of every new module in the database. To force explicit variable declaration in this way, open the <b>Options</b> dialog box (<b>Tools</b> menu), click the <b>Modules</b> tab, and select the <b>Require Variable Declaration</b> check box.</li>
<li>
Develop a consistent naming scheme for the variables in your code. You’ll recall the purpose and scope of a variable more quickly if it has a meaningful name. For example, you could use the prefix <i>pint</i> to indicate a public integer variable, or <i>str</i> to indicate a string variable.</li>
<li>
Whenever possible, declare objects and variables with the specific data type you intend to use, instead of using the generic <b>Object</b> or <b>Variant</b> types. This practice, in addition to making your code run faster, causes Visual Basic to report errors if you make an improper assignment or try to perform an invalid operation with the object or variable in your code.</li>
</ul>
</FONT></FONT></BODY>
</HTML>

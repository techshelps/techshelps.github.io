<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Access User-Level Security</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="microsoftaccessuser-levelsecurity"></a>Microsoft Access User-Level Security</h2>
<p>
User-level security is the most flexible and secure method of protecting the sensitive data, the code, and the design of objects in your application. In addition, user-level security is the only form of Microsoft Access security that allows you to establish different levels of access to sensitive data and objects.</p>
<p>
Before you begin establishing user-level security for your application, make sure you understand the Microsoft Access user-level security model. The following sections discuss the significance of a workgroup-based user-level security model; how you can create user and group accounts to create a workgroup and establish permissions; and how you can use the tools that Microsoft Access provides, such as the User-Level Security Wizard, to help secure your databases. You can also establish security and perform security actions that aren’t available using the Microsoft Access user interface by using Data Access Objects (DAO) in Visual Basic.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on establishing security using Visual Basic, see “Using Data Access Objects to Establish User-Level Security” later in this chapter.</p>
<h3>The Microsoft Access User-Level Security Model </h3>
<p>
Unlike the security models of most other database systems, the primary form of security in Microsoft Access is <i>user-level </i>security rather than <i>share-level</i> security. (Microsoft Access does provide a simple form of share-level security: the ability to protect opening a database with a password.) Microsoft Access user-level security is similar to the security used in most network environments, such as Microsoft Windows NT Server. When users start Microsoft Access, they enter a name and password in the <b>Logon</b> dialog box. The password confirms the user’s identity by checking the name and password against data in the workgroup information file. The password can be changed at any time by that user without affecting anyone else on the system. When users log on, each user is also identified as a member of one or more groups.</p>
<p>
When a user opens a secured database, Microsoft Access determines the user’s level of access to an object (including the database itself) by checking the set of permissions assigned to that user for that object. Different users and groups can have different permissions for the same objects. Every time the user tries to perform an action on an object, such as opening a form, running a query, or modifying the data in a table, Microsoft Access checks to see if the user, or any of the groups to which the user belongs, has the necessary permissions to carry out the operation. If so, the action is performed. If not, Microsoft Access informs the user that he or she doesn’t have permissions to perform the requested action, and causes the operation to fail.</p>
<p>
In contrast, database systems that provide share-level security associate passwords with specific objects, and users must supply passwords to access those objects. Any user who knows the password to a specific object can access it, and a user’s level of access is determined by the kind of password that user has been given. For example, a manager may be given an update password for a table which allows him or her to change records, while a general staff member may be given a read password which only allows him or her to view records.</p>
<p>
You can create a system similar to this with Microsoft Access user-level security by creating a Managers group with Update Data permission and a Staff group with only Read Data permission, and then assigning each user to the appropriate group. Users don’t supply passwords when accessing the objects, because they have been identified as a member of the appropriate group when they logged on to Microsoft Access.</p>
<h4>Where Is Workgroup and Permission Information Stored?</h4>
<p>
Microsoft Access stores information about users and groups in a database called a <i>workgroup information file</i>. A workgroup information file stores:
<ul>
<li>
The name of each user and group.</li>
<li>
The list of users that make up each group.</li>
<li>
The encrypted logon password of each user.</li>
<li>
The <i>security identifier</i> (SID) of each user and group. The SID is a machine-generated, non-readable binary string that uniquely identifiesthe user or group.</li>
</ul>
<p>
Each workgroup information file defines a <i>workgroup</i>, and can be used by many Microsoft Access databases. A workgroup is a group of users in a multiuser environment who share data and the same workgroup information file. You manage users, their passwords, and the groups they are assigned to by using the <b>User And Group Accounts</b> dialog box (<b>Tools</b> menu, <b>Security</b> submenu).</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on users and groups, see “Users and Groups” later in this chapter.</p>
<p>
Permissions that you assign to users and groups for the objects in a database are stored in hidden system tables within the database. Even if a new workgroup information file is established, the permissions associated with the objects in a database don’t change. You assign permissions on the <b>Permissions</b> and <b>Change Owner</b> tabs of the <b>User And Group Permissions</b> dialog box; this information affects the objects in the open database, not the workgroup information file.</p>
<p>
The following illustration shows how these elements of Microsoft Access user-level security are related.</p>
<p>
<img src="abac14_1.gif" border=0></p>
<p>
The location of the workgroup information file in use is specified in the Windows Registry. You can create a new workgroup information file or specify which file to use with the Workgroup Administrator. You can also specify which file to use when starting Microsoft Access with the <b>/wrkgrp</b> command-line option.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on using the Workgroup Administrator, search the Help index for “Workgroup Administrator.” For more information on how the workgroup information file is specified in the Registry, search the Help index for “workgroup information file, specifying in Registry.”</p>
<h4>Users and Groups</h4>
<p>
You use the <b>User And Group Accounts</b> dialog box (<b>Tools</b> menu, <b>Security</b> submenu), to create new user and group accounts for your workgroup. When you create a new user or group account, you supply a name and a <i>personal identifier</i> (PID). The PID is a case-sensitive alphanumeric string that can be from 4 through 20 characters long. Microsoft Access feeds the name and the PID into an encryption program to generate the security identifier (SID) for that account. The SID is used internally by Microsoft Access to uniquely identify and validate users and groups. It is important to note that the PID is not a password. It is used only when creating user and group accounts. A user’s password can be designated only after an account for that user has been created.</p>
<p>
Important   Be sure to write down the exact, case-sensitive names and PIDs that you use to create user and group accounts and keep them in a secure place. If your workgroup information file becomes damaged or lost and you need to re-create it, you to must re-enter the exact names and PIDs to re-create identical SIDs for the user and group accounts you created. Additionally, you need to use the Workgroup Administrator to create an identical workgroup information file to contain these accounts by re-entering the name, company name, and workgroup ID (WID) used when it was originally created. For more information on creating an identical workgroup information file, see “Admins” later in this section.</p>
<p>
A Microsoft Access workgroup information file contains the following default user and group accounts:
<ul>
<li>
Admin   The default user account. Before user-level security is established, all users are automatically logged on using the Admin user account when they start Microsoft Access. As a result, the Admin user owns and has full permissions on all objects created in the database. Because the Admin user’s SID is identical across all installations of Microsoft Access and Visual Basic, all objects that the Admin user owns or has permissions to are open to anyone using another copy of Microsoft Access or Visual Basic. When establishing user-level security, it’s important to make sure that the Admin user doesn’t own or have any permissions on objects that you want to secure. For assistance with this process, run the User-Level Security Wizard provided with Microsoft Access.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on running the User-Level Security Wizard, see “Establishing Security with the User-Level Security Wizard” later in this chapter.</p>
</li>
<li>
Admins   The system administrator’s group account. There must be at least one member of the Admins group at all times. Before user-level security is established, the default Admin user is the only member of the Admins group. Because members of the Admins group have the power to perform actions such as changing permissions, modifying user and group memberships, and clearing users’ passwords, you want to be careful when assigning users to this group.<p>
Important   The Microsoft Access Setup program uses only the user’s name and the company name provided during setup to create the SID for the Admins group of the default workgroup information file. Because these two values are available from the Microsoft Access Help menu, someone trying to breach security could re-create an identical Admins account by using the Workgroup Administrator to create a new workgroup information file with these values, and then add themselves to the Admins group.</p>
<p>
Before establishing user-level security, you should use the Workgroup Administrator to create a new workgroup information file, making sure to enter a third value known only to you, the workgroup ID (WID). This ensures that the new workgroup information file contains a new Admins group with a unique, secure SID.</p>
<p>
Record the three case-sensitive strings used to create the new workgroup information file and keep them in a secure place. In the event that the workgroup information file becomes lost or damaged, you can re-create a workgroup information file with an identical Admins group by re-entering these three strings. Members of this re-created Admins group will be able to grant themselves permissions on all objects that were created when the old workgroup information file was in effect.</p>
<p>
The Admins group’s Administer permission—the right to change permissions—can’t be revoked using the Microsoft Access user interface. Even if you clear the <b>Administer</b> check box on the <b>Permissions</b> tab of the <b>User And Group Permissions</b> dialog box (<b>Tools</b> menu, <b>Security</b> submenu) for the Admins group on an object, the permission remains. It is possible to revoke the Admins group’s Administer permission by using Data Access Objects (DAO) code, but this isn’t recommended because there is no way to grant the permission back again. It’s better to make sure you’re using a workgroup information file created with a secure WID, which ensures a unique and secure Admins group, and then make sure only the appropriate users are assigned to the Admins group.</p>
</li>
<li>
Users   The default group account comprising all user accounts. Microsoft Access automatically adds user accounts to the Users group when you create them. Any permissions assigned explicitly to the Users group are available to all users in all installations of Microsoft Access and Visual Basic because, like the Admin user’s SID, the Users group’s SID is identical in all workgroup information files. Similar to concerns about the default Admin user, when establishing user-level security, it’s important to make sure that the Users group doesn’t own or have permissions on objects that you want secure.</li>
</ul>
<h4>Permissions</h4>
<p>
<i>Explicit</i> permissions are those permissions granted directly to a user; no other users are affected. <i>Implicit</i> permissions are those permissions granted to a group; all users who are members of a group get the permissions assigned to that group.</p>
<p>
The easiest way to administrate a secure workgroup is to create new groups and assign permissions to the groups, rather than to individual users. Then you can change individual users’ permissions by adding or removing them from groups. In a simple situation, you may want to use only the default groups to define permissions: assigning administrators to the Admins group and all other users to the Users group. If you do this, keep in mind that because the Users group is identical across all installations of Microsoft Access, any permissions you assign to the Users group will be available to all users of Microsoft Access. For a higher level of security, revoke all permissions for the Users group, create your own groups, and assign permissions to them.</p>
<p>
When a user tries to perform an operation on an object, that user’s security level is determined by the least restrictive of the permissions explicitly granted to that user and the permissions implicitly granted to the groups to which that user belongs. For example, if User1 has no explicit permissions on the Orders table but belongs to the Clerks group, which has Read Data permission on the Orders table, User1 will be able to read the data in the table. If User1 is removed from the Clerks group and doesn’t belong to another group with permissions on the Orders table, User1 will be denied any access to the Orders table.</p>
<p>
Permissions can be changed on a object contained in a database by:
<ul>
<li>
Members of the Admins group of the workgroup information file in use when the database was created.</li>
<li>
The owner of the object.</li>
<li>
Any user who has Administer permission on the object.</li>
</ul>
<p>
Permissions for a database itself can be changed only by the owner of the database or by members of the Admins group.</p>
<p>
Even though users may not currently be able to perform an action, they may be able to grant themselves permissions to perform the action. This is true if the user is a member of the Admins group of the workgroup information file in use when the database was created, or if the user is the owner of an object.</p>
<h5>Permissions for New Objects</h5>
<p>
You can set the permissions that users and groups receive by default for all new objects in a database. For example, you can prevent the Users group from getting permissions for new tables. This reduces your administrative burden, because you don’t need to keep checking to make sure that new objects are properly secured.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can prevent users from creating new tables and queries by using Visual Basic code to remove permissions on the <b>Container</b> object, but you can’t prevent users from creating new forms, reports, macros, or modules.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on how to assign default permissions for new objects, search the Help index for “permissions, assigning and removing.” For more information on the types of permissions you can assign, search the Help index for “setting permissions.”</p>
<h4>Ownership</h4>
<p>
The user who creates an object is the owner of that object. The owner of an object can always grant permissions on that object, even if a member of the Admins group has revoked his or her explicit permissions on that object. One way to change the ownership of an object is to use the <b>Change Owner</b> tab on the <b>User And Group Permissions</b> dialog box (<b>Tools</b> menu, <b>Security</b> submenu). In addition to being able to transfer ownership to another user, the <b>Change Owner</b> tab is the only way to transfer ownership to a group. A group can own any kind of object except the database itself.</p>
<p>
Another way to transfer ownership to a user is to log on as that user and re-create the object. To re-create an object, you don’t have to start from scratch. You can make a copy of the object, or import it or export it to another database. To re-create an object, you must have Read Design permission for the object and, if the object is a table or query, you must also have Read Data permission.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;These procedures don’t change the ownership of queries whose <b>RunPermissions</b> property is set to Owner’s. You can change ownership of a query only if you own the query, or if its <b>RunPermissions</b> property is set to User’s. For more information on the <b>RunPermissions</b> property, see “Using the RunPermissions Property with User-Level Security” later in this chapter.</p>
<p>
The user who creates a database is the database’s owner. The database owner can always open a database and create new objects in it. The database owner can also grant or revoke the permission to open a database. A database owner’s rights can’t be revoked by using the <b>User And Group Permissions</b> dialog box. Before you establish user-level security, the default Admin user is the owner of the database.</p>
<p>
Important   If you don’t transfer database ownership to a secure user account, any user of Microsoft Access or Visual Basic can open your database. You can’t change the owner of a database by using the <b>Change Owner</b> tab on the <b>User And Group Permissions </b>dialog box. The only way to transfer the ownership of all of the objects and the database itself is to log on as the user you want to own the database, create a new blank database, and then import all of the objects. When you run the User-Level Security Wizard to secure your database, it uses this method to transfer ownership of the database and all of its objects.</p>
<h3>Establishing Security with the User-Level Security Wizard</h3>
<p>
Once you understand how the different pieces of the Microsoft Access user-level security model fit together, you can proceed with the steps to secure your database. While you can perform individual steps yourself, the User-Level Security Wizard is the easiest and most reliable way to secure your database.</p>
<p>
To establish user-level security with the User-Level Security Wizard, you specify the object types that you want secured and the User-Level Security Wizard revokes permissions on those objects for all users and groups except the user that is currently logged on. The User-Level Security Wizard creates a new, secured copy of your database, and leaves the original copy unmodified. The User-Level Security Wizard also re-creates linked tables and table relationships in the new database. After you run the User-Level Security Wizard, you can create new users and groups and assign permissions to control how the objects in your application are used.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To establish security with the User-Level Security Wizard</b>
<ol>
<li>
If you don’t have a secure workgroup information file, create one with the Workgroup Administrator. Write down the exact, case-sensitive values you type in the <b>Name</b>, <b>Organization</b>, and <b>Workgroup ID</b> boxes and store them in a safe place. You’ll need these values if you ever need to re-create your workgroup information file.<p>
If you do have a secure workgroup information file, use the Workgroup Administrator to make sure that it is in use before proceeding. You must be a member of the Admins group of this file to be able to continue. Do this before you start Microsoft Access.</p>
</li>
<li>
Start Microsoft Access. On the <b>Tools</b> menu, point to <b>Security</b>, and then click <b>User And Group Accounts</b>.</li>
<li>
In the <b>User And Group Accounts</b> dialog box, create a new user to be the owner and administrator of the database, and then add that user to the Admins group.</li>
<li>
In the <b>Name</b> box on the <b>Users</b> tab, select the Admin user, and then click the <b>Change Logon Password</b> tab and assign a password to the Admin user. This causes the <b>Logon</b> dialog box to appear the next time you start Microsoft Access.</li>
<li>
Click the <b>Users</b> tab, and then remove the Admin user from the Admins group.</li>
<li>
Exit Microsoft Access and restart it, logging on as the administrator user that you created in step 3.</li>
<li>
Open the database you want to secure.</li>
<li>
On the <b>Tools</b> menu, point to <b>Security</b>, and then click <b>User-Level Security Wizard</b>.</li>
<li>
Select the check boxes for the object types you want to secure, and then click <b>OK</b>.<p>
The User-Level Security Wizard creates a new database, exports copies of all of the objects from the original database, secures the object types you selected by revoking all permissions of the Users group for those objects in the new database, and then encrypts the new database. The original database isn’t changed in any way.</p>
<p>
If you chose to secure all object types in the database, the User-Level Security Wizard removes the Users group’s Open/Run permission for the database itself. This means that only members of the Admins group of the workgroup information file in use in step 1 can open the new secured database. All other users of Microsoft Access and Visual Basic can’t open the database or access the secured objects within it.</p>
<p>
If you chose to secure only some object types in the database, the User-Level Security Wizard doesn’t remove the Users group’s Open/Run permission for the database itself. In this case, all users of Microsoft Access and Visual Basic can open the new secured database and access unsecured objects, but they can’t access the secured objects within it.</p>
</li>
<li>
For both databases, follow the steps for establishing security with the User-Level Security Wizard.</li>
<li>
Assign permissions to the appropriate groups to read, update, insert, or delete data in the back-end database. To do so, you can either assign permissions directly to the tables in the back-end database, or you can remove all permissions to those tables and create queries in the front-end database that use the tables in the back-end database that have the <b>RunPermissions</b> property set to Owner’s.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on the <b>RunPermissions</b> property, see “Using the RunPermissions Property with User-Level Security” later in this chapter.</p>
</li>
<li>
Assign Open/Run permission for the back-end database. This is required even if you are using queries with the <b>RunPermissions</b> property set to Owner’s.</li>
<li>
In the front-end database, grant users Modify Design permission for the linked tables. Granting users Modify Design permission on linked tables in the front-end database doesn’t grant them the same rights to the tables in the back-end database.</li>
<li>
By default, after running the User-Level Security Wizard, users have permission to create new tables and queries in the front-end database. If Database Access Objects (DAO) code has been used to remove this permission, you must use DAO code and the <b>dbSecCreate</b> constant to reassign this permission.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on using DAO code to assign permissions, see “Assigning Permissions for Objects” later in this chapter.</p>
</li>
<li>
When the users first install your application, have them run the Linked Table Manager from the front-end database to refresh the links to the tables in the back-end database in its new location.<p>
<img src="abac14_2.gif" border=0></p>
<p>
Tip   You can also write code that prompts users during startup to refresh table links. For sample code that does this, see the RelinkTables and RefreshLinks functions in the RefreshTableLinks module of the Orders sample application.</p>
</li>
</ol>
<p>
Because users have Modify Design permission for the linked tables in the front-end database, they can reset the link to the back-end tables if the location of the back-end database changes. They won’t be able to make any modifications to the design of the actual tables in the back-end database.</p>
<h3>Securing a Database Without Requiring Users to Log On</h3>
<p>
If you want to secure some objects in your database such as your modules and the design of your objects, but you don’t care about establishing different levels of access for different groups of users, you may want to consider securing your application without requiring your users to log on.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To establish user-level security without requiring users to log on</b>
<ol>
<li>
Follow the steps to secure your application by using the User-Level Security Wizard.</li>
<li>
While logged on as a member of the Admins group, assign permissions to the Admin user account for objects that you want to be available to all users. Typical permissions may include Read Data and Update Data permissions for tables and queries, and Open/Run permission for forms and reports. If you have secured your application properly, the Admin user should no longer be a member of the Admins group.</li>
<li>
Clear the password for the Admin user.</li>
</ol>
<p>
Users can now open your application without logging on. When users start Microsoft Access without logging on, Microsoft Access automatically logs them on using the Admin user account. As a result, they have only the permissions assigned in step 2. This works for any workgroup because the Admin user account is the same in every workgroup information file. Only members of the Admins group of the workgroup information file that was in use when you ran the User-Level Security Wizard in step 1 have full permissions on the objects in your database.</p>
<p>
Important   You should not distribute copies of the workgroup information file in use when you secured the database using this procedure. If you need to allow a trusted user to administer your database, you should give the copy of the workgroup information file only to that user.</p>
<p>
To perform administrative functions, you must use the workgroup information file that was in use when you secured the database. There are two ways you can log on as a member of the Admins group of that workgroup information file:
<ul>
<li>
You can temporarily define a password for the Admin user to reactivate the logon procedure, and log on as a member of the Admins group.</li>
<li>
You can use the <b>/pwd</b> and <b>/user</b> command-line options to specify your password and user name when starting Microsoft Access. If you define a shortcut that uses the <b>/pwd</b> and <b>/user</b> command-line options to do this, you should physically secure the computer that the shortcut is located on to prevent unauthorized users from accessing this information.</li>
</ul>
<h3>Removing User-Level Security</h3>
<p>
If you want to remove user-level security, perform the following procedure:</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To remove user-level security</b>
<ol>
<li>
Make a backup copy of the database you want to remove security from.</li>
<li>
Start Microsoft Access and log on as a workgroup administrator (a member of the Admins group).</li>
<li>
Open the database.</li>
<li>
On the <b>Tools</b> menu, point to <b>Security</b>, then click<b> User And Group Permissions</b>.</li>
<li>
In the <b>User And Group Permissions</b> dialog box, give the Users group full permissions on all objects in the database.<p>
<img src="abac14_3.gif" border=0></p>
<p>
Tip   You can select all of the objects in the <b>Object Name</b> box at once by clicking the first item in the list, holding down SHIFT, and then clicking the last item in the list.</p>
</li>
<li>
Exit and restart Microsoft Access, and then log on as the default Admin user.</li>
<li>
Create a new blank database and leave it open.</li>
<li>
Import all the objects from the original database into the new database.</li>
<li>
If users will be using the current workgroup information file when opening the database, you need to clear the password for the Admin user to turn off the <b>Logon</b> dialog box for the current workgroup. This is not necessary if users will be using the default workgroup information file created when installing Microsoft Access.</li>
</ol>
<p>
The new database is now completely unsecured. Anyone who can open the new database has full permissions on all its objects. This works for any workgroup because the Admin user account and Users group account are the same in every workgroup information file, and all users, including the Admin user, are members of the Users group. The workgroup information file in use when the new database was created in step 7 defines the Admins group for the new database.</p>
<h3>Using the RunPermissions Property with User-Level Security</h3>
<p>
For Microsoft Access to display a table or query, it needs to read the design of that table or query. For example, it needs to read field names and other field properties, such as the <b>Format</b> and <b>InputMask </b>properties. As a result, for a user to read and display the data in a table or query, that user must also have permissions to read the design of the table or query. (This is why selecting the <b>Read Data</b> permission check box in the <b>User And Group Permissions</b> dialog box automatically selects the <b>Read Design</b> check box as well.) If you don’t want your users to see the design of your table or query, you can use the <b>RunPermissions</b> property of queries to restrict their access to this information.</p>
<p>
The <b>RunPermissions</b> property determines whether Microsoft Access uses the query user’s permissions or the query owner’s permissions when checking the user-level security permissions for each of the underlying tables in a query. If the<b> RunPermissions</b> property is set to User’s, then the users of a query have only their own permissions to view data in underlying tables. However, it is possible to override existing user permissions. If the owner of a query sets the <b>RunPermissions</b> property to Owner’s, anyone who uses that query will have the same level of permissions to view data in the underlying tables as the query’s owner.</p>
<p>
The <b>RunPermissions</b> property allows you to create queries to display data to users who don’t have permission to access the underlying tables. Using this feature, you can build different views of your data that provide record-level and field-level security for a table. For example, suppose you have a secure database with an Employees table and a Salary table. Using the <b>RunPermissions</b> property, you can build several views of the two tables: one that allows a user or group to view, but not update the Salary field; a second that allows a different user or group to view and update the Salary field; and a third that allows another user or group to view the Salary field only if its value is less than a certain amount.</p>
<p>
<b><font face="Symbol"><span style="font-family:symbol">&#219;</span></font>&#09;To prevent users from viewing the design of underlying tables or queries</b>
<ol>
<li>
For the users or groups that you want to restrict, remove all permissions to the underlying tables or queries whose design you want to secure.</li>
<li>
Build a new query that includes all the fields you want to include from those tables or queries. You can exclude access to a field by omitting that field. You can also limit access to a certain range of values by defining criteria for your query.</li>
<li>
Make sure you or a secure group owns the new query.</li>
<li>
In the query property sheet, set the <b>RunPermissions</b> property of the new query to Owner’s. <p>
<b>Note</b>&nbsp;&nbsp;&nbsp;You can also set the <b>RunPermissions</b> property in SQL view of the Query window by using the WITH OWNERACCESS OPTION declaration in the SQL statement.</p>
</li>
<li>
Grant appropriate data permissions for the new query to the users and groups who you want to be able to update data, but not view the design of the table or query. This would typically be Read Design, Read Data, Update Data, Delete Data, and Insert Data permissions, but you should specify only the permissions you want to allow.<p>
<img src="abac14_4.gif" border=0></p>
</li>
</ol>
<p>
Tip   You can base forms and reports on the new query.</p>
<p>
Users can update data in the underlying tables or queries by using the new query or forms based on it. However, they won’t be able to view the design of those tables or queries. If they try to view the design of the new query, they receive a message that they don’t have permissions to view the source tables or queries.</p>
<p>
Important   By default, the user who creates a query is its owner, and only the owner of a query can save changes to it if the <b>RunPermissions</b> property is set to Owner’s. Even members of the Admins group or users with Administer permission are prevented from saving changes to a query created by another user if the <b>RunPermissions</b> property is set to Owner’s. However, anyone with Modify Design permission for the query can set the <b>RunPermissions</b> property to User’s and then successfully save changes to the query.</p>
<p>
Because the creator of a query owns it by default, having the <b>RunPermissions</b> property set to Owner’s can create problems if you need to allow more than one user to work with the design of a query. To address this situation, the ownership of the query can be transferred to a group. To do this, create a group, change the owner of the query to this group on the <b>Change Owner</b> tab of the <b>User And Group Permissions</b> dialog box, and then add the users who need to modify the query to the new group. Any member of the new group will be able to edit the query and save changes.</p>
<h3>Using Data Access Objects to Establish User-Level Security</h3>
<p>
As an alternative to using the Microsoft Access user interface to establish user-level security for your application, you can establish security by using Visual Basic code to manipulate the Data Access Objects (DAO) that control security.</p>
<p>
For user-level security purposes, all Microsoft Access objects—tables, queries, forms, reports, macros, and modules—are considered documents, and are manipulated through the <b>Document</b> object and the <b>Documents</b> collection. There are <b>User</b> and <b>Group</b> objects and <b>Users</b> and <b>Groups</b> collections. By manipulating the <b>Users</b> and <b>Groups</b> collections, you can manage which users belong to which groups. Permissions are properties of <b>Document</b> objects that are assigned to specific <b>User</b> and <b>Group</b> objects.</p>
<p>
Using DAO objects, properties, and methods, you can:
<ul>
<li>
Create user and group accounts.</li>
<li>
Change or clear passwords.</li>
<li>
Change ownership of objects.</li>
<li>
Assign or remove permissions for objects.</li>
</ul>
<p>
In addition, you can use DAO to perform some operations that the user interface doesn’t support. For example, you can write code to prevent users from creating a new database by using the security constant <b>dbSecDBCreate</b>. Or you can prevent users from creating new tables or queries within a database by revoking permissions on the Tables <b>Container</b> object with the <b>dbSecCreate</b> constant.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on how to prevent users from creating a new database, see “Preventing Users from Creating New Databases” later in this chapter. For more information on security constants, search the Help index for “data access constants.”</p>
<p>
Also, you can write code in an application to allow users to perform actions that they don’t usually have permission to perform. You do this by opening new <b>Workspace</b> objects under the name and password of a user account (often a member of the Admins group of the workgroup information file in use when the database was created) who has greater permissions than the user currently logged on.</p>
<p>
For example, you could add the following code to a command button on a form in a secured copy of the Northwind sample database. When a user clicks the button, Microsoft Access creates a new <b>Workspace</b> object using the name and password of a member of the Admins group, opens another copy of the database in that workspace, temporarily gives the current user full permissions to the form, changes the <b>BackColor</b> property of the form to Red, and then restores the user’s normal permissions.</p>
<pre><code>Private Sub ChangeBackcolor_Click()

&#09;On Error GoTo ChangeBackcolor_Err

&#09;Dim wsNew As Workspace
&#09;Dim dbs As Database
&#09;Dim ctr As Container
&#09;Dim doc As Document
&#09;Dim lngCurrentPermissions As Long
&#09;
&#09;' Turn on hourglass icon and suppress screen updates.
&#09;DoCmd.Hourglass True
&#09;DoCmd.Echo False

&#09;' Create a new Workspace object using SteveB's name and password
&#09;' and open database in new workspace.
&#09;Set wsNew = DBEngine.CreateWorkspace(&quot;NewWorkspace&quot;, &quot;SteveB&quot;, &quot;32msaig54&quot;)
&#09;Set dbs = wsNew.OpenDatabase(CurrentDb.Name)

&#09;' Set Container object to Forms, and then set Document object to the current form.
&#09;Set ctr = dbs.Containers!Forms
&#09;Set doc = ctr.Documents(Me.Name)

&#09;' Specify the current user of the form, store that user's current permissions,
&#09;' and then give the user full rights.
&#09;doc.UserName = CurrentUser
&#09;lngCurrentPermissions = doc.Permissions
&#09;doc.Permissions = dbSecFullAccess

&#09;' Switch to Design view, change the Detail section backcolor to red, and save form.
&#09;DoCmd.DoMenuItem 0, 2, 0, , acMenuVer80
&#09;CodeContextObject.Section(0).BackColor = 255
&#09;DoCmd.Save acForm, CodeContextObject.Name

&#09;' Switch back to Form view, reset the user's permissions to original permissions,
&#09;' and close the database and new workspace.
&#09;DoCmd.DoMenuItem 3, 2, 1, , acMenuVer80 
&#09;doc.Permissions = lngCurrentPermissions
&#09;dbs.Close
&#09;wsNew.Close

ChangeBackcolor_ErrCont:

&#09;DoCmd.Hourglass False
&#09;DoCmd.Echo True

&#09;Exit Sub
&#09;
ChangeBackcolor_Err:
&#09;MsgBox Err.Description
&#09;Resume ChangeBackcolor_ErrCont

End Sub
</code></pre>
<p>
If you do this, make sure that the form in which you place this code is itself properly secured, because the user name and password will be visible to anyone who has Read Design permission on the form.</p>
<p>
The following sections provide examples of manipulating user-level security by using Visual Basic code to perform common operations.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on how to use Data Access Objects (DAO) code to work with user-level security, see the <i>Microsoft Jet Database Engine Programmer’s Guide</i>.</p>
<h4>Creating User and Group Accounts</h4>
<p>
You can use the <b>User</b> and <b>Group</b> objects to create and manage user and group accounts. A <b>User</b> is an object that represents an individual who can log on to the database, while a <b>Group</b> is a set of <b>User</b> objects.</p>
<p>
You add users to a group by appending the <b>User</b> object to the <b>Users</b> collection of an existing group. Alternatively, you can append a <b>Group</b> object to the <b>Groups</b> collection in a <b>User</b> object to give that user the global permissions of that group.</p>
<p>
Permissions set for a group are automatically given to all users who belong to that group, while permissions given to a user apply only to that user account. A user’s security level is determined by the least restrictive of the permissions granted to that user or any group to which that user belongs. For example, if a user is given a higher permission level for a particular database object than is granted to the group of which the user is a member, the user permissions override the group permissions.</p>
<p>
The following procedure creates new group and user accounts, and adds a new user to an existing group account:</p>
<pre><code>Sub VPPromotion()

&#09;Dim ws As Workspace
&#09;Dim grpVp As Group, grpManager As Group
&#09;Dim usr As User

&#09;' Create a Vice Presidents group account.
&#09;Set ws = DBEngine.Workspaces(0)
&#09;Set grpVp = ws.CreateGroup(&quot;VicePres&quot;, &quot;mmbhto101193&quot;)
&#09;ws.Groups.Append grpVp
&#09;ws.Groups.Refresh

&#09;' Create an instance of an existing user account, add the user to
&#09;' the new group account, then remove the user from an existing
&#09;' group account.
&#09;Set usr = grpVp.CreateUser(&quot;Andrew Fuller&quot;)
&#09;grpVp.Users.Append usr
&#09;gprVp.Users.Refresh
&#09;Set grpManager = ws.Groups(&quot;Managers&quot;)
&#09;grpManager.Users.Delete &quot;Andrew Fuller&quot;
&#09;grpManager.Users.Refresh

&#09;' Create a new user account for a new manager.
&#09;Set usr = grpManager.CreateUser(&quot;Mary McCreary&quot;, &quot;mbw1011&quot;, &quot;Pwd&quot;)
&#09;ws.Users.Append usr
&#09;ws.Users.Refresh
&#09;' Add the user to the Managers group. Because you've already added the
&#09;' user to the Users group, you must create a new instance of the
&#09;' user account before adding it to the Managers' Users group.
&#09;Set usr = grpManager.CreateUser(&quot;Mary McCreary&quot;)
&#09;grpManager.Users.Append usr
&#09;grpManager.Users.Refresh
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on users and groups, see “Users and Groups” earlier in this chapter.</p>
<h4>Adding and Changing Passwords</h4>
<p>
You can use the <b>NewPassword</b> method of the <b>User</b> object to add, change, or clear the password of an existing user account. You can also set a password for a user account when you create it by using the <b>CreateUser</b> method of the <b>User</b> object, or you can do so by setting the <b>Password</b> property of the <b>User</b> object before you append it to the <b>Users</b> collection.</p>
<p>
For example, the following procedure adds passwords to the Admin, OrdersAdmin and OrdersOwner user accounts, and creates two new user accounts with passwords:</p>
<pre><code>Sub ChangePasswords()

&#09;Dim ws As Workspace, usr As User

&#09;' Add passwords to the Admin, OrdersAdmin, and OrdersOwner
&#09;' user accounts.
&#09;Set ws = DBEngine.Workspaces(0)
&#09;ws.Users(&quot;Admin&quot;).NewPassword &quot;&quot;, &quot;AdminPwd&quot;
&#09;ws.Users(&quot;OrdersAdmin&quot;).NewPassword &quot;&quot;, &quot;OrdAdminPwd&quot;
&#09;ws.Users(&quot;OrdersOwner&quot;).NewPassword &quot;&quot;, &quot;OrdOwnerPwd&quot;

&#09;' Create a user account, specifying a PID and a password with
&#09;' the CreateUser method.
&#09;Set usr = ws.CreateUser(&quot;Tim Smith&quot;, &quot;ilmj2d&quot;, &quot;MyPwd&quot;)
&#09;ws.Users.Append usr

&#09;' Create a user account, specifying a password with the
&#09;' Password property.
&#09;Set usr = ws.CreateUser(&quot;Robert King&quot;)
&#09;usr.PID = &quot;tdi3tcm&quot;
&#09;usr.Password = &quot;NewUserPwd&quot;
&#09;ws.Users.Append usr
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on passwords, see “Setting a Database Password” earlier in this chapter.</p>
<h4>Changing Ownership of Objects</h4>
<p>
Ownership entitles users to certain irrevocable rights to the database and objects that they create, including the ability to open the database. Owners can grant permissions on an object both to themselves and to other users or groups.</p>
<p>
If you have the appropriate permissions, you can use the <b>Owner</b> property of a <b>Document</b> object to change the owner of an object. For example, the following procedure makes the OrdersOwner user account the owner of all objects in the current database. Note that the new owner for an object can also be a group account.</p>
<pre><code>Sub ChangeOwnership()
&#09;On Error GoTo Err_ChangeOwnership

&#09;Dim dbs As Database, ctr As Container, doc As Document
&#09;Dim intDocCount As Integer, intCtrCount As Integer

&#09;Const conErrNoPermissions = 3033

&#09;' Assign the current database to the database variable.
&#09;Set dbs = CurrentDb

&#09;' Loop through all the objects in the database,
&#09;' changing their ownership to the OrdersOwner account.
&#09;For intDocCount = 0 To dbs.Containers.Count - 1
&#09;&#09;Set ctr = dbs.Containers(intDocCount)
&#09;&#09;For intCtrCount = 0 To ctr.Documents.Count - 1
&#09;&#09;&#09;Set doc = ctr.Documents(intCtrCount)
&#09;&#09;&#09;doc.Owner = &quot;OrdersOwner&quot;
&#09;&#09;Next intCtrCount
&#09;Next intDocCount

Bye_ChangeOwnership:
&#09;Exit Sub

Err_ChangeOwnership:

&#09;If Err = conErrNoPermissions Then
&#09;&#09;Resume Next
&#09;Else
&#09;&#09;MsgBox Err.Description
&#09;&#09;Resume Bye_ChangeOwnership
&#09;End If
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on ownership, see “Ownership” earlier in this chapter.</p>
<h4>Assigning Permissions for Objects</h4>
<p>
You can use the <b>UserName</b> and <b>Permissions</b> properties of a <b>Document</b> object to assign permissions for an object. For example, you can modify the preceding ChangeOwnership procedure so that it assigns full permissions to the Managers group account for all objects in the Orders sample application.</p>
<pre><code>Sub AssignPerms()

&#09;' Declare database and integer variables.
&#09;Dim dbs As Database, intDocCount As Integer, intCtrCount As Integer

&#09;' Assign the current database to the database variable.
&#09;Set dbs = CurrentDb

&#09;' Loop through all the document objects in the database,
&#09;' assigning full permissions to the Managers group account.
&#09;For intDocCount = 0 To dbs.Containers.Count - 1
&#09;&#09;For intCtrCount = 0 To dbs.Containers(intDocCount).Documents _
&#09;&#09;&#09;&#09;.Count - 1
&#09;&#09;&#09;dbs.Containers(intDocCount).Documents(intCtrCount) _
&#09;&#09;&#09;&#09;.UserName = &quot;Managers&quot;
&#09;&#09;&#09;dbs.Containers(intDocCount).Documents(intCtrCount) _
&#09;&#09;&#09;&#09;.Permissions = dbSecFullAccess
&#09;&#09;Next intCtrCount
&#09;Next intDocCount
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on permissions, see “Permissions” earlier in this chapter.</p>
<h4>Determining If a User Has Read Data Permission for a Table</h4>
<p>
The<b> AllPermissions</b> property returns the set of permissions the user inherits from each of the groups the user belongs to (the user’s implicit permissions), in addition to the explicit permissions granted directly to the individual user account. A user’s security level is always the least restrictive of that user’s explicit and implicit permissions.</p>
<p>
The following function uses the <b>AllPermissions</b> property and the <b>dbSecRetrieveData</b> constant to determine if the specified user has Read Data permission for a particular table.</p>
<pre><code>Function CheckAllReadPerms()
&#09;Dim dbs As Database, docTemp As Document, strUser As String, strObject As String

&#09;' Assign the current database to the database variable.
&#09;Set dbs = CurrentDb

&#09;' Prompt for user name and table name and assign to string variables.
&#09;strUser = InputBox(&quot;Enter a user's account name.&quot;, &quot;Enter User&quot;)
&#09;strObject = InputBox(&quot;Enter a table to check for Read Data permission.&quot;, _
&#09;&#09;&quot;Enter Table&quot;)

&#09;' Set document variable to the specified table and then specify the user
&#09;' of that table.
&#09;Set docTemp = dbs.Containers!Tables.Documents(strObject)
&#09;docTemp.UserName = strUser

&#09;' Check to see if user has either implicit or explicit Read Data permission.
&#09;If (docTemp.AllPermissions And dbSecRetrieveData) &gt; 0 Then
&#09;&#09;MsgBox strUser &amp; &quot; has implicit or explicit Read Data permission for &quot; _
&#09;&#09;&#09;&amp; strObject &amp; &quot;.&quot;
&#09;Else
&#09;&#09;MsgBox strUser &amp; &quot; has no permissions for &quot; &amp; strObject &amp; &quot;.&quot;
&#09;End If
End Function
</code></pre>
<p>
If you want to check only the explicit permissions granted to a user, you can use the <b>Permissions</b> property instead.</p>
<p>
You can avoid having to worry about whether a user has less restrictive explicit permissions by using the User-Level Security Wizard to revoke permissions for all users and groups but the Admins group. Then create new groups and assign permissions only to groups and not to individual users. This way you can easily change permissions for a user by simply moving the user to a new group. You can also change permissions to an entire group in a single operation, which is much easier than changing them for each individual user.</p>
<h4>Preventing Users from Creating New Databases</h4>
<p>
You can use the <b>Or</b> keyword to add permissions on top of the existing permissions for a user or a group, and you can use the <b>And Not</b> keyword to deny a user or a group account specific permissions. For example, when you use the <b>And Not</b> keyword with the security constant <b>dbSecDBCreate</b> for a user, you remove that user’s permission to create new databases. The following procedure demonstrates how to use the <b>dbSecDBCreate</b> constant to remove the permission to create new databases from all users in the Users group:</p>
<pre><code>Sub Remove_DBCreate()
&#09;Dim dbs As Database, ctr As Container, strSystemDatabase

&#09;' Retrieve path for your workgroup information file (system database).
&#09;strSystemDatabase = DBEngine.SystemDB
&#09;Set dbs = DBEngine(0).OpenDatabase(strSystemDatabase)
&#09;Set ctr = dbs.Containers!Databases
&#09;ctr.Username = &quot;Users&quot;
&#09;ctr.Permissions = ctr.Permissions And Not dbSecDbCreate
End Sub
</code></pre>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on security constants, search the Help index for “security constants.”</p>
</FONT></FONT></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Conditional Compilation</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="usingconditionalcompilation"></a>Using Conditional Compilation</h2>
<p>
You use conditional compilation to specify the parts of your code you want Microsoft Access to include or ignore when compiling and running your application. Using conditional compilation, you can include code in your application that behaves differently under certain conditions. For example, you may use conditional compilation to:
<ul>
<li>
Include specific features of your program in different versions of your application. For example, you may want to design your application to run on different platforms.</li>
<li>
Change the date and currency display filters for an application distributed in different languages.</li>
<li>
Include or exclude code used only for debugging your application.</li>
</ul>
<h3>Structuring Code for Conditional Compilation</h3>
<p>
Visual Basic provides special statements called <i>directives</i> for creating conditional compilation constructs. You use the <b>#Const</b> directive to declare a <b>Boolean</b> conditional compilation constant. You then evaluate this constant within the #<b>If...Then...#Else</b> directive.</p>
<p>
To conditionally compile a portion of your code, enclose it between #<b>If...Then</b> and #<b>End&nbsp;If</b> statements, using the conditional compilation constant as the branching condition. When you want this segment of code to be compiled and run, set the value of the conditional compilation constant to <b>True</b> (-1). Otherwise, set the constant to <b>False</b> (0).</p>
<p>
For example, suppose you want to include a portion of code only in an administrator’s copy of your application. Start by wrapping this segment in an <b>If...Then</b> statement preceded by a number sign (#).</p>
<pre><code>#If Admn Then
&#09;.
&#09;. ' Insert code to be compiled and run only for an administrator's
 &#09;. ' version.
#End If
</code></pre>
<p>
If the value of the constant Admn is set to <b>True </b>at compile time, Visual Basic compiles and runs the conditional code. Otherwise, Visual Basic ignores it.</p>
<p>
<b>Note</b>&nbsp;&nbsp;&nbsp;Unlike<b> </b>regular Visual Basic code, you can’t use a colon to include other statements on the same line as a conditional compilation statement.</p>
<h3>Declaring Conditional Compilation Constants</h3>
<p>
You can declare conditional compilation constants by setting the <b>Conditional Compilation Arguments</b> option on the <b>Advanced</b> tab of the <b>Options</b> dialog box (<b>Tools</b> menu). The list should contain simple assignment statements separated by colons. For example:</p>
<pre><code>Admn = True : Ansi = 0
</code></pre>
<p>
Alternatively, you can explicitly declare conditional compilation constants in the Declarations section of the module containing the #<b>If...Then</b> and #<b>Else</b> statements, as follows:</p>
<pre><code>#Const Admn = True
</code></pre>
<p>
Conditional compilation constants have a special scope and cannot be accessed from standard code. While constants declared with the <b>#Const</b> statement are private to the module in which they are declared, constants declared in the <b>Options</b> dialog box are public to all modules in your application.</p>
<p>
Only conditional compilation constants and literals can be used in expressions that you specify by way of the user interface or with the <b>#Const</b> statement. Any undeclared identifier used in a conditional compilation expression generates a compile error.</p>
<h3>Using Conditional Compilation for Debugging</h3>
<p>
You can use conditional compilation to avoid compiling debugging statements from the application you distribute to users. To do this, use conditional compilation to include these statements during development, and then ignore these statements in the version of your application that you distribute to users.</p>
<p>
The following example procedure uses these statements to display an assertion message when a function is passed a value it isn’t designed to handle. You may use a function like this one while debugging your code. Once you’ve finished debugging your code and you’re ready to distribute your application to users, you no longer need the function.</p>
<pre><code>Sub AProcedure(intX As Integer)
&#09;#If fDebug Then
&#09;&#09;Assertion intX &lt; 10000 and intX &gt; 0, &quot;Argument out of range&quot;
&#09;#End If

&#09;' The code can now assume the correct value.

End Sub
Sub Assertion(blnExpr As Boolean, strMsg As String)
&#09;If Not blnExpr Then
&#09;&#09;MsgBox strMsg, , &quot;Assertion&quot;
&#09;End If
End Sub
</code></pre>
<p>
Because the code in the Aprocedure procedure is conditionally compiled, it is only run if the <code>fDebug</code> variable is set to <b>True</b>. When you compile your application to distribute it to users, set <code>fDebug</code> to <b>False</b>. As a result, the application will not compile or run your debugging code.</p>
</FONT></FONT></BODY>
</HTML>

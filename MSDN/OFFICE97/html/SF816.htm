<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Interface to Microsoft Excel</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>The Interface to Microsoft Excel</H2><P CLASS="t">To write an XLL, you should provide three functions (described in this section) that are called by Microsoft Excel and three functions that are called by the Add-In Manager. For information about the functions called by the Add-In Manager, see "Supporting the Add-In Manager" on page 188.</P>
<P CLASS="t">The functions in the following table are called by Microsoft Excel.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="275pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="thf"><B>This function</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="th"><B>Is called when</B></P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tr"></P>
<P CLASS="tr"></P></FONT></TD><TD COLSPAN="2" VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xlAutoOpen()</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">The XLL is opened.</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xlAutoClose()</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">The XLL is closed.</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR><TR><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">xlAutoRegister()</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="tt">Microsoft Excel needs to register a function but doesn't know the argument and return value types.</P></FONT></TD><TD VALIGN="TOP">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P CLASS="t"></P></FONT></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The only function that is required for Microsoft Excel to open a DLL is xlAutoOpen. For more information on these three functions, see "xlAutoOpen," "xlAutoClose," and "xlAutoRegister" on pages 242, 240, and 243, respectively.</P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec0"></A>Opening an XLL</H3><P CLASS="t">You can open an XLL in the same ways in which you open any Microsoft Excel file. You can use the Open command on the File menu, the Microsoft Excel startup directory, the command line, or the OPEN= entries in the registry. You can&nbsp;open an XLL in the macro language by calling the REGISTER function with only one argument (the name of the XLL). Here is what happens:</P>
<P CLASS="ls">    1.    Microsoft Excel tries to register a function in your XLL called xlAutoOpen, which should be declared as type "A" (returns a Boolean, no parameters). For&nbsp;more information, see "xlAutoOpen" on page 242.</P>
<P CLASS="ls">    2.    If that succeeds, Microsoft Excel runs the xlAutoOpen function. This function should:</P>
<UL><LI CLASS="ULI2">Call xlfRegister to register all the functions that the XLL makes available.</LI>
<LI CLASS="ULI2">Add any menus or menu items that the XLL makes available.</LI>
<LI CLASS="ULI2">Do any other necessary initialization.</LI>
<LI CLASS="ULI2">Return 1.</LI></UL><P CLASS="lt1">There is no guarantee that xlAutoOpen will be called before a function in your&nbsp;XLL is run. For example, the user can simply register and call one of the&nbsp;functions without opening the XLL, bypassing xlAutoOpen.</P>
<P CLASS="ls">    3.    Microsoft Excel unregisters the xlAutoOpen function, since it is no longer needed.</P>
<P></P>
<P></P>
<P CLASS="nh"><B>Important</B></P>
<P CLASS="nt">Calling xlAutoOpen is the only way the Open command loads an XLL. This&nbsp;function is required in every DLL with the extension XLL.</P>
<P></P>
<H3><A NAME="sec1"></A>Unregistering the Entire XLL</H3><P CLASS="t">A user can call the function UNREGISTER and specify the name of your XLL. For example, if UNREGISTER("GENERIC.XLL") is called from a Microsoft Excel macro or another DLL, this instructs Microsoft Excel to remove that DLL from memory. Here is what happens:</P>
<P CLASS="ls">    1.    Microsoft Excel tries to register a function called xlAutoClose, which should be declared as type A.</P>
<P CLASS="ls">    2.    If xlAutoClose is found, Microsoft Excel runs the xlAutoClose function. This function should:</P>
<P></P>
<P></P>
<P></P>
<UL><LI CLASS="ULI2">Do any necessary global cleanup.</LI><LI CLASS="ULI2">Remove any menus or menu items that were added in xlAutoOpen.</LI><LI CLASS="ULI2">Delete any names that were created in xlAutoOpen. Remember that calling xlfRegister with a fourth argument causes a name to be created. You can delete&nbsp;names by calling xlfSetName with the second argument omitted. This&nbsp;is&nbsp;important; otherwise, the names will still appear in the Paste Function&nbsp;dialog box.</LI></UL><P CLASS="ls">    3.    When xlAutoClose returns, Microsoft Excel unregisters all functions registered in that DLL, no matter who registered them or how often they were&nbsp;registered in that instance of Microsoft Excel.</P>
<P></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">While you are developing XLLs, you may find it convenient to call the UNREGISTER function, with the name of your XLL as its argument, from a macro in Microsoft Excel. This ensures that the XLL is completely unloaded. Thus you can compile a new version of the XLL in another process without conflicts.</P>
<P></P>
<H3><A NAME="sec2"></A>Quitting Microsoft Excel</H3><P CLASS="t">When the user quits Microsoft Excel, all loaded XLLs are unregistered as described in the previous section. The xlAutoClose function is called for every XLL that has one.</P>
<P CLASS="t">Be aware that it is still possible that your XLL will be removed from memory without xlAutoClose being called. For example, the user could unregister every function individually, and xlAutoClose will never be called.</P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">There is no menu item that allows a user to close an XLL.</P>
<P></P>
<P></P>
<P></P>
<P></P>
<H3><A NAME="sec3"></A>Registering Functions Without a Type String</H3><P CLASS="t">You may want to allow end users to register functions in your XLL without specifying the <I>type_text</I> argument (for more information on the <I>type_text</I> argument, see "REGISTER" on page 219). This makes it easier for users to load individual XLL functions. To do this, you need to provide the xlAutoRegister function. Here is what happens:</P>
<P CLASS="ls">    1.    A macro sheet calls REGISTER, specifying the name of the XLL and the name of the function but omitting the <I>type_text</I> argument.</P>
<P CLASS="ls">    2.    Microsoft Excel tries to register a function in the XLL called xlAutoRegister, which should be of type RR (which takes a value LPXLOPER and returns a value LPXLOPER). If this fails, the REGISTER function returns #VALUE!</P>
<P CLASS="ls">    3.    If this succeeds, Microsoft Excel calls xlAutoRegister, passing the name of the&nbsp;function (as xltypeStr) as the argument. xlAutoRegister should:</P>
<UL><LI CLASS="ULI2">Determine whether the function name is recognized. If it is not, your xlAutoRegister function should return #VALUE! as an xltypeErr.</LI><LI CLASS="ULI2">If the function is recognized, xlAutoRegister should call xlfRegister as usual, specifying at least the first three arguments (including <I>type_text</I>).</LI><LI CLASS="ULI2">Return the same value as returned by xlfRegister (an xltypeNum if a success or an xltypeErr if a failure).</LI></UL><P></P>
<P></P>
<P CLASS="nh"><B>Note</B></P>
<P CLASS="nt">If xlAutoRegister calls xlfRegister without providing the <I>type_text</I> argument, an&nbsp;infinite loop results.</P>
<P></P></FONT>
</FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The On Error Statement</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>The On Error Statement</H2><P CLASS="t">The On Error statement is used to build error-handling routines for VBA applications. Error handling is set up using an On Error GoTo line, where <I>line</I> is the line label at which the error handler begins. The outline of a VBA procedure with basic error handling is shown below:</P>

<pre><code><FONT FACE="Courier" SIZE="2">Sub MyProcedure()
    On Error GoTo ErrorHandler
    ''' Procedure code goes here.
    Exit Sub
ErrorHandler:
    MsgBox "Error", vbCritical, "My Add-in"
End Sub
</FONT></code></pre>
<P></P>
<P></P>
<P></P>
<P CLASS="t">There are some cases in which you want a procedure to ignore any errors that occur. You can allow a procedure to bypass errors using the On Error Resume Next statement. When an error occurs, this statement causes program execution to&nbsp;continue at the line immediately following the line that caused the error. If you&nbsp;intentionally turn off error handling, it is recommended that you document the expected errors you are ignoring in your code. This serves you well when you&nbsp;need to upgrade or troubleshoot this section of code in the future. The basic guidelines for turning off errors are:</P>
<UL><LI CLASS="ULI1">Do not do it unless it's absolutely necessary.</LI><LI CLASS="ULI1">Be aware of the side effects (other errors you weren't anticipating will also be&nbsp;ignored).</LI><LI CLASS="ULI1">Document the expected errors you are ignoring (for future development).</LI><LI CLASS="ULI1">Return to a custom error handler as soon as is practical.</LI></UL><P></P>
<P CLASS="t">If it becomes necessary to disable custom error handling in one of your procedures, you can do this with the On Error GoTo 0 statement. This statement restores standard Microsoft Excel error handling.</P>
<P CLASS="t">Your error-handling code can also be set up to write information to a text file (a&nbsp;log) so that you can analyze errors that occur during testing and/or usage. This&nbsp;strategy is very effective when you are getting bug reports that are tough to&nbsp;reproduce in your test environment.</P>
<P CLASS="t">The following error handling is more real-world and provides a much more realistic view of the process of handling errors. While it's simpler than most real-world code, it's much closer than the previous example. It contains a module level Public variable to pass error messages between procedures, and a function that returns True or False depending on different conditions.</P>

<pre><code><FONT FACE="Courier" SIZE="2">Option Explicit
''' Passes error messages between procedures.
Public gszErrMsg As String  

Sub ApplicationMain()
    On Error GoTo ApplicationMainError
    ''' This function is used to open the workbook.
    If Not bOpenWorkbook("MyBook.xls") _
        Then GoTo ApplicationMainError
    ''' The rest of your add-in code goes here.
    Exit Sub
ApplicationMainError:
    On Error Resume Next
    ''' Do any necessary clean up operations here.
    MsgBox prompt:=gszErrMsg, Buttons:=vbCritical, _
    Title:="My Add-in"
End Sub</FONT></code></pre>
<P></P>
<P></P>
<P></P>

<pre><code><FONT FACE="Courier" SIZE="2">Function bOpenWorkbook(szName As String) As Boolean
    On Error Resume Next
    Workbooks.Open FileName:=szName
    If Err.Number &lt;&gt; 0 Then
        gszErrMsg = "Error opening workbook '" &amp; _
            szName &amp; "'."
        bOpenWorkbook = False
    Else
        bOpenWorkbook = True
    End If
End Function
</FONT></code></pre>
<P CLASS="t">In real-world code, error handling often needs to address cleanup issues that are beyond the scope of this chapter. Real error handling can be extremely complex due to the nature of stopping in the middle of ongoing code. The ideal learning tool is to view production-quality code available on many Web sites and study the&nbsp;developer's error-handling routines.</P></FONT>
</FONT></BODY></HTML>

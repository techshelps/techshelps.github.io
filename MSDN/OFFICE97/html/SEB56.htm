<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CALL</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>CALL</H1><P CLASS="t">Calls a procedure in a dynamic link library or code resource. There are two syntax forms of this function. Use syntax 1 only with a previously registered code resource, which uses arguments from the REGISTER function. Use syntax 2a or 2b to simultaneously register and call a code resource.</P>
<P CLASS="it"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Important</B></FONT>&nbsp;&nbsp;&nbsp;This function is provided for advanced users only. If you use the CALL function incorrectly, you may cause errors that will require you to restart your computer.</P>
<P><B>Syntax 1</B></P>
<P CLASS="t">Used with REGISTER</P>
<P CLASS="syn"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>CALL</B></FONT>(<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>register_id</B></FONT>,argument1, ...)</P>
<P><B>Syntax 2a</B></P>
<P CLASS="t">Used alone (in Microsoft Excel for Windows<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">&reg;</FONT>)</P>
<P CLASS="syn"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>CALL</B></FONT>(<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>module_text</B></FONT>,<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>procedure</B></FONT>,<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>type_text</B></FONT>,argument1, ...)</P>
<P><B>Syntax 2b</B></P>
<P CLASS="t">Used alone (in Microsoft Excel for the Macintosh)</P>
<P CLASS="syn"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>CALL</B></FONT>(<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>file_text</B></FONT>,<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>resource</B></FONT>,<FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>type_text</B></FONT>,argument1, ...)</P>
<P CLASS="dt1"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Register_id</B></FONT>&nbsp;&nbsp;&nbsp;is the value returned by a previously executed REGISTER or REGISTER.ID function.</P>
<P CLASS="dt1">Argument1, ...&nbsp;&nbsp;&nbsp;are the arguments to be passed to the procedure.</P>
<P CLASS="dt1"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Module_text</B></FONT>&nbsp;&nbsp;&nbsp;is quoted text specifying the name of the dynamic link library (DLL) that contains the procedure in Microsoft Excel for Windows.</P>
<P CLASS="dt1"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>File_text</B></FONT>&nbsp;&nbsp;&nbsp;is the name of the file that contains the code resource in Microsoft Excel for the Macintosh.</P>
<P CLASS="dt1"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Procedure</B></FONT>&nbsp;&nbsp;&nbsp;is text specifying the name of the function in the DLL in Microsoft Excel for Windows. You can also use the ordinal value of the function from the EXPORTS statement in the module-definition file (.DEF). The ordinal value must not be in the form of text.</P>
<P CLASS="dt1"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Resource</B></FONT>&nbsp;&nbsp;&nbsp;is the name of the code resource in Microsoft Excel for the Macintosh. You can also use the resource ID number. The resource ID number must not be in the form of text.</P>
<P CLASS="dt1"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Type_tex</B></FONT>t&nbsp;&nbsp;&nbsp;is text specifying the data type of the return value and the data types of all arguments to the DLL or code resource. The first letter of type_text specifies the return value. The codes you use for type_text are described in detail in For stand-alone DLLs or code resources (XLLs), you can omit this argument.</P>
<P><B>Example</B></P>
<P><B>Syntax 1 (32-Bit Microsoft Excel)</B></P>
<P CLASS="t">IN 32-bit Microsoft Excel for Windows 95 and Microsoft Excel for Windows NT<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">&reg;</FONT>, the following macro formula registers the GetTickCount function from 32-bit Microsoft Windows. GetTickCount returns the number of milliseconds that have elapsed since Microsoft Windows was started.</P>
<P CLASS="spacing"><BR></P>
<pre><code><FONT FACE="Courier" SIZE="2">REGISTER("Kernel32","GetTickCount","J")</FONT></code></pre>
<P CLASS="t">Assuming that this REGISTER function is in cell A5, after your macro registers GetTickCount, you can use the CALL function to return the number of milliseconds that have elapsed:</P>
<P CLASS="spacing"><BR></P>
<pre><code><FONT FACE="Courier" SIZE="2">CALL(A5)</FONT></code></pre>
<P><B>Syntax 1 (16-Bit Microsoft Excel)</B></P>
<P CLASS="t">In 16-bit Microsoft Excel for Windows, the following macro formula registers the GetTickCount function from 16-bit Microsoft Windows. GetTickCount returns the number of milliseconds that have elapsed since Microsoft Windows was started.</P>
<P CLASS="spacing"><BR></P>
<pre><code><FONT FACE="Courier" SIZE="2">REGISTER("User","GetTickCount","J")</FONT></code></pre>
<P CLASS="t">Assuming that this REGISTER function is in cell A5, after your macro registers GetTickCount, you can use the CALL function to return the number of milliseconds that have elapsed:</P>
<P CLASS="spacing"><BR></P>
<pre><code><FONT FACE="Courier" SIZE="2">CALL(A5)</FONT></code></pre>
<P><B>Example</B></P>
<P><B>Syntax 2a (32-Bit Microsoft Excel)</B></P>
<P CLASS="t">On a worksheet, you can use the following CALL formula (syntax 2a) to call the GetTickCount function:</P>
<P CLASS="spacing"><BR></P>
<pre><code><FONT FACE="Courier" SIZE="2">CALL("Kernel32","GetTickCount","J!")</FONT></code></pre>
<P CLASS="t">The ! in the type_text argument forces Microsoft Excel to recalculate the CALL function every time the worksheet recalculates. This updates the elapsed time whenever the worksheet recalculates.</P>
<P><B>Syntax 2a (16-Bit Microsoft Excel)</B></P>
<P CLASS="t">On a worksheet, you can use the following CALL formula (syntax 2a) to call the GetTickCount function:</P>
<P CLASS="spacing"><BR></P>
<pre><code><FONT FACE="Courier" SIZE="2">CALL("User","GetTickCount","J!")</FONT></code></pre>
<P CLASS="t">The ! in the type_text argument forces Microsoft Excel to recalculate the CALL function every time the worksheet recalculates. This updates the elapsed time whenever the worksheet recalculates.</P>
<P CLASS="nt"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;You can use optional arguments to the REGISTER function to assign a custom name to a function. This name will appear in the <FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Paste Function</B></FONT> dialog box, and you can call the function by using its custom name in a formula. For more information, see REGISTER.</P>
<P CLASS="t"></P></FONT>
</FONT></BODY></HTML>

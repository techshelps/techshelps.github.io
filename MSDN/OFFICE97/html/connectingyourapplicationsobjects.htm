<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting Your Application’s Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<h2><a name="connectingyourapplicationsobjects"></a>Connecting Your Application’s Objects</h2>
<p>
Simply getting the individual objects in your application up and running isn’t enough. You need to connect the dots—tie the objects in your application together into a coherent system that’s designed for the particular tasks your users are trying to accomplish. You connect the dots by running macros or event procedures in response to the events that occur on the forms or reports in your application.</p>
<p>
The following illustrations show how you can tie separate objects together into a custom system for entering orders. In the illustrated application, the Orders form is the startup form. When you start the application, the Orders form opens automatically. People who take orders can do all their tasks with this one form.</p>
<p>
<img src="abac01_9.gif" border=0></p>
<h5>Perform Bulk Updates with Action Queries, Not Code</h5>
<p>
In database applications, you often need to automate bulk updates of records—in order to delete and archive inactive customer records, for example. If you’re an experienced application developer, you may have found that operations like this can require writing many lines of code. But in a Microsoft Access application, you can usually manipulate sets of records more easily with action queries than with code. The action queries—make-table, update, append, and delete—are often the most efficient way to change data. Running a predefined delete query, for example, is a much more efficient way to remove a lot of records than looping through records in a Visual Basic procedure. You can define the query graphically in Design view, and then run it from the Database window. You can also write a macro that uses only two actions—SetWarnings and OpenQuery—to run the query. Then you can attach the macro to a menu command or a command button, or specify it as the event property setting for any event that occurs on a form. </p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on how to create action queries that manipulate sets of records, search the Help index for “action queries.”</p>
<h3>Referring to Objects and Their Values</h3>
<p>
The preceding section showed that you can tie objects together not only by using one object to open another, but also by passing data from one object to the next. For example, when you click the Print Invoice button on the toolbar in the Orders sample application, you want the order displayed in the Orders form to be selected in the PrintInvoiceDialog form.</p>
<p>
How do you do it? Using a macro or an event procedure, you identify the value you want to pass from the open object—usually the value of a control on a form. Because you may have many forms open at one time in your application, Microsoft Access requires a specific syntax structure to identify the control that contains the value you want.</p>
<p>
<img src="abac01_10.gif" border=0></p>
<p>
Tip   When you name the tables, fields, and other objects in your database, keep in mind that you’ll use these names to refer to the objects elsewhere in your application. Although descriptive names for objects with spaces are easier to recognize than more compact names, they can be difficult to use in expressions, SQL statements, and Visual Basic code. If you are creating a database that uses these advanced features, you may want to use short, consistent names that don’t contain spaces and are easier to remember and type—for example, field names such as LastName and Phone.</p>
<p>
To refer to an object or a value, you start with an object or a collection of objects and identify each element in turn. A <i>collection</i> groups objects, such as the forms or controls in the current database, as shown in the following illustration.</p>
<p>
<img src="abac01_11.gif" border=0></p>
<p>
To refer to an element of a collection, such as the <b>Forms</b> collection, use the <b>!&nbsp;</b>operator. To refer to the Orders form, for example, use the following expression:</p>
<pre><code>Forms!Orders
</code></pre>
<p>
Each form contains a collection of controls. To refer to the OrderID control on the Orders form, for example, use the following expression:</p>
<pre><code>Forms!Orders!OrderID
</code></pre>
<p>
You refer to a control to get, set, or pass its value.</p>
<p>
<img src="abac01_12.gif" border=0></p>
<p>
To refer to a property, use the <b>.</b> (dot) operator before the property name. You use this operator before properties, methods, actions, and collections. For example, to refer to the <b>Visible</b> property of the Orders form, use the following expression:</p>
<pre><code>Forms!Orders.Visible
</code></pre>
<p>
To refer to the OrderID control’s <b>Visible</b> property on the Orders form, use the following expression:</p>
<pre><code>Forms!Orders!OrderID.Visible
</code></pre>
<p>
<img src="abac01_13.gif" border=0></p>
<p>
Tip   If you want help referring to an object or property, use the Expression Builder. With the Expression Builder, you can simply select the object you want from a list, and the Expression Builder writes the reference for you with all the operators in the correct places. To display the Expression Builder, right-click where you want to enter the expression, and then click <b>Build</b> on the shortcut menu.</p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on objects and collections, see Chapter 5, <a href="workingwithobjectscollections.htm">“Working with Objects and Collections.”</a></p>
<h3>Providing Navigation to Tasks and Objects</h3>
<p>
As an application developer, you determine how people navigate through your applications and complete their tasks. Navigating in a Microsoft Access application usually means moving from control to control within a form or switching between forms.</p>
<p>
Navigation within a form   Within a form, navigation from control to control should follow the natural flow of the task—your users shouldn’t have to bounce from the top of the form to the bottom and then back to the top again in order to complete one task. Group controls logically so that users can focus on one area of the form at a time. Define how a user moves from control to control on a form with the keyboard by setting the <b>AutoTab</b>, <b>TabStop</b>, and <b>TabIndex</b> properties. If controls are used to find or filter records, place them in the form header or footer to show they’re separate from the other fields in the current record.</p>
<p>
<img src="abac01_14.gif" border=0></p>
<p>
Navigation from one form to another form and completing tasks   Nothing says you must use one approach over another to navigate from form to form or to complete a task; however, it’s a good idea to provide your users with ways to navigate that are common to other Windows-based applications. It’s also a good idea to be consistent within your application—to do similar tasks on different forms in similar ways. Here are some common navigation devices used in Windows-based applications:
<ul>
<li>
<b>Command buttons</b>   You can use a command button on a form to carry out a task (for example, saving the current record) or to open another form used for a related task. Command buttons have the advantage of being highly visible. For most common actions, you can create buttons on your forms by using the Command Button Wizard, which creates an event procedure for you. If you want to change or add to what the button does, you can edit the event procedure the wizard creates.<p>
<img src="abac01_15.gif" border=0></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on creating a button with a wizard, search the Help index for “Command Button Wizard.”</p>
</li>
<li>
<b>Hyperlinks</b>   As an alternative to command buttons that use macros or event procedures for navigation, you can use hyperlinks to navigate to other forms or objects in your database. To create a hyperlink, you set the <b>HyperlinkAddress</b> and <b>HyperlinkSubAddress</b> properties of a label, image control, or command button. Once you set these properties, users can click the text, picture, or button to navigate to the specified object. You can also use hyperlinks to open documents and other files on a local hard drive, a local area network, an internal Web (intranet), or the Internet. If you use hyperlinks to navigate to objects within a Microsoft Access database or to other Microsoft Office documents, your users can use the Web toolbar to navigate between documents and objects they’ve previously opened with hyperlinks.<p>
<img src="abac01_16.gif" border=0></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on creating a hyperlink, search the Help index for “hyperlinks.”</p>
</li>
<li>
<b>Menu commands</b>   You can put your own menus and commands on a form or report’s menu bar. Commands on menus occupy less room than command buttons on forms, but they’re also less visible—users must open the menu to see them. You can also put common commands on shortcut menus, which users access by right-clicking a form or a control on a form.<p>
<img src="abac01_17.gif" border=0></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For more information on creating a menu bar, see <a href="commandbarsmenubarstoolbarsandshortcutmenus.htm#one">“Creating New Menu Bars, Toolbars, and Shortcut Menus”</a> later in this chapter.</p>
</li>
<li>
<b>Toolbar buttons   </b>You’ll often want to create buttons that provide shortcuts to the commands on your menu bar. You can add custom toolbar buttons to your toolbars, as shown in the following illustration.<p>
<img src="abac01_18.gif" border=0></p>
<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on creating a toolbar and custom buttons, see <a href="commandbarsmenubarstoolbarsandshortcutmenus.htm#one">“Creating New Menu Bars, Toolbars, and Shortcut Menus”</a> later in this chapter.</p>
</li>
<li>
<b>Key assignments</b>   You can associate a macro with a key combination so that Microsoft Access runs the macro whenever users press that key combination in your application. This approach is even less visible than menu commands—your users must know the key assignment in order to use it. However, it has the advantage of being available throughout your application, not just on a particular form. If there’s an action your users may want to perform anywhere in your application (for example, printing the current record), you can give them a consistent way to do it by using a key assignment.<p>
<b>See Also</b>&nbsp;&nbsp;&nbsp;For information on making key assignments, see <a href="makingkeyassignments.htm">“Making Key Assignments”</a> later in this chapter.</p>
</li>
</ul>
</FONT></FONT></BODY>
</HTML>

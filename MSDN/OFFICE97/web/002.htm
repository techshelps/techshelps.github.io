<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 2: Understanding Object Models</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 2</B></FONT></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Understanding Object Models</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<LI><A HREF="#CH002H101">Overview of Object
Models</A>
<BR>
<LI><A HREF="#CH002H102">Automating a Task
by Using Objects</A>
<BR>
<LI><A HREF="#CH002H103">Programming Another
Application's Objects</A>
</UL>

<P>
<A NAME="CH002H101"></A>Objects are the fundamental building blocks
of the Microsoft Office&nbsp;97 applications; nearly everything
you do in Visual Basic involves manipulating objects. Every unit
of content and functionality in Office&nbsp;&#151; each workbook,
worksheet, document, range of text, slide, and so on&nbsp;&#151;
is an object that you can control programmatically in Visual Basic.
When you understand how to work with objects, you're ready to
automate tasks in Office.
<P>
This chapter gives you a conceptual overview of objects and object
models and the tools and techniques you use to explore and use
them. For more information about using the object model for a
particular application, see the chapter in this book that's devoted
to working with that object model.
<P>
<A NAME="PG002C1"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H101">Overview of Object Models</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
Before you can programmatically gain access to an application's
content and functionality, it's important to understand how the
content and functionality of the application is partitioned into
discrete objects and how these objects are arranged in a hierarchical
model.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H201">What Are Objects and Object Models?</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex1"></a>
<P>
An application consists of two things: content and functionality.
Content refers to the documents the application contains and the
words, numbers, or graphics included in the documents; it also
refers to information about attributes of individual elements
in the application, such as the size of a window, the color of
a graphic, or the font size of a word. Functionality refers to
all the ways you can work with the content in the application&nbsp;&#151;
for example, opening, closing, adding, deleting, copying, pasting,
editing, or formatting elements in the application.
<P>
The content and functionality in an application are broken down
into discrete units of related content and functionality called
<I>objects</I>. You're already familiar with some
of these objects, as elements of the user interface: Microsoft
Excel workbooks, work-sheets, and cell ranges; Word documents
and sections; and PowerPoint presentations and slides.
<P>
The top&#173;level object in an application is usually the <B>Application</B>
object, which is the application itself. For instance, Microsoft
Excel itself is the <B>Application</B> object in the Microsoft
Excel object model. The <B>Application</B> object contains other
objects that you have access to only when the <B>Application</B>
object exists (that is, when the application is running). For
example, the Microsoft Excel <B>Application</B> object contains
<B>Workbook</B> objects, and the Word <B>Application</B> object
contains <B>Document</B> objects. Because the <B>Document</B>
object depends on the existence of the Word <B>Application</B>
object for its own existence, the <B>Document</B> object is said
to be the <I>child</I> of the <B>Application</B> object;
conversely, the <B>Application</B> object is said to be the <I>parent</I>
of the <B>Document</B> object.
<P>
Many objects that are children have children of their own. For
example, the Microsoft Excel <B>Workbook</B> object contains,
or is parent to, the collection of <B>Worksheet</B> objects that
represent all the worksheets in the workbook. A parent object
can have multiple children; for instance, the Word <B>Window</B>
object has as children the <B>Panes</B>, <B>Selection</B>, and
<B>View</B> objects. Likewise, a child object can have multiple
parents; for instance, the Word <B>Windows</B> collection object
is the child of both the <B>Application</B> object and the <B>Document</B>
object.
<P>
The way the objects that make up an application are arranged relative
to each other, together with the way the content and functionality
are divided among the objects, is called the <I>object hierarchy</I>
or the <I>object model</I>. To see a graphical representation
of the object model for a particular application, see "Microsoft
Access Objects," "Microsoft Excel Objects," "Microsoft
Word Objects," or "Microsoft PowerPoint Objects"
in Visual Basic Help for that application. For information about
using Help and the Object Browser to explore an object model,
see "<A HREF="#CH002H208">Getting Help Writing Code</A>" later in this chapter.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you clicked Typical when you installed Microsoft Office, you'll
need to run Setup again to install Visual Basic Help for the application
you want to program in.
<P>
In addition to containing lower&#173;level objects, each object
in the hierarchy contains content and functionality that apply
both to the object itself and to all objects below it in the hierarchy.
The higher an object is in the hierarchy, the wider the scope
of its content and functionality. For example, in Microsoft Excel,
the <B>Application</B> object contains the size of the application
window and the ability to quit the application; the <B>Workbook</B>
object contains the file name and format of the workbook and the
ability to save the workbook; and the <B>Worksheet</B> object
contains the worksheet name and the ability to delete the worksheet.
<P>
You often don't get to what you think of as the contents of a
file (such as the values on a Microsoft Excel worksheet or the
text in a Word document) until you've navigated through quite
a few levels in the object hierarchy, because this specific information
belongs to a very specific part of the application. In other words,
the value in a cell on a worksheet applies only to that cell,
not to all cells on the worksheet, so you cannot store it directly
in the <B>Worksheet</B> object. The content and functionality
stored in an object are thus intrinsically appropriate to the
scope of the object.
<P>
In summary, the content and functionality in an application are
divided among the objects in the application's object model. Together,
the objects in the hierarchy contain all the content and functionality
in the application. Separately, the objects provide access to
very specific areas of content and functionality.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H202">What Are Properties and Methods?</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex2"></a>
<P>
To get to the content and functionality contained in an object,
you use properties and methods of that object. The following Microsoft
Excel example uses the <B>Value</B> property of the <B>Range</B>
object to set the contents of cell B3 on the worksheet named "Sales"
in the workbook named "Current.xls."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks("Current.xls").Worksheets("Sales").Range("B3").Value = 3

</code></pre></FONT>
<P>
The following example uses the <B>Bold</B> property of the <B>Font</B>
object to apply bold formatting to cell B3 on the Sales worksheet.
<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks("Current.xls").Worksheets("Sales").Range("B3").Font.Bold = True

</code></pre></FONT>
<P>
The following Word example uses the <B>Close</B> method of the
<B>Document</B> object to close the file named "Draft 3.doc."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents("Draft 3.doc").Close

</code></pre></FONT>
<P>
In general, you use properties to get to content, which can include
the text contained in an object or the attribute settings for
the object; and you use methods to get to functionality, which
entails everything you can do to the content. Be aware, however,
that this distinction doesn't always hold true; there are a number
of properties and methods in every object model that constitute
exceptions to this rule.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H203">How Is the Object Model Related to the
User Interface?</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex3"></a>
<P>
There are two ways to interact with an application's objects:
manually (using the user interface) or programmatically (using
a programming language). In the user interface, you use the keyboard
or the mouse, or both, to navigate to the part of the application
that controls the data you want to change or the commands you
want to use. For example, in Microsoft Excel, to enter a value
into cell B3 on the worksheet named "Sales" in the workbook
named "Current.xls," you open the Current.xls workbook,
you click the tab for the Sales worksheet, you click in cell B3,
and then you type a value.
<P>
In Visual Basic statements, you navigate through the object model
from the top&#173;level object to the object that contains the
content and functionality you want to work with, and you use properties
and methods of that object to get to the content and functionality.
For example, the following Microsoft Excel example navigates to
cell B3 on the Sales worksheet in the Current.xls workbook and
sets the contents of the cell.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks("Current.xls").Worksheets("Sales").Range("B3").Value = 3

</code></pre></FONT>
<P>
Because the user interface and Visual Basic are two ways of gaining
access to the exact same content and functionality, many objects,
properties, and methods share names with elements in the user
interface, and the overall structure of the object model resembles
the structure of the user interface. This also means that for
every action you can take in the user interface, there's a Visual
Basic code equivalent. For information about using the macro recorder
to translate user interface actions into their Visual Basic code
equivalents, see "<A HREF="#USMACREC">Using the Macro Recorder</A>" later in
this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H204">Why Does It Matter Where an Object Is
in the Object Model?</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex4"></a>
<P>
It's important to understand an object's place in the object model,
because before you can work with an object, you have to navigate
through the object model to get to it. This usually means that
you have to step down through all the objects above it in the
object hierarchy to get to it. For example, in Microsoft Excel,
you cannot get to a particular cell on a worksheet without first
going through the application , which contains the workbook that
contains the worksheet that contains the cell. The following example
inserts the value 3 in cell B3 on the worksheet named "Second
Quarter" in the workbook named "Annual Sales.xls."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Workbooks("Annual Sales.xls").WorkSheets("Second Quarter").Range("B3").Value = 3

</code></pre></FONT>
<P>
Similarly, the following Word example applies bold formatting
to the second word in the third paragraph in the first open document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Documents(1).Paragraphs(3).Range.Words(2).Bold = True

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H205">What Are Collection Objects?</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex5"></a>
<P>
When using Visual Basic Help graphics to explore the object model
for the application in which you want to program, you may notice
that there are many boxes in the graphics that contain two words&nbsp;&#151;
usually the singular and plural forms of the same object name,
such as "Documents (Document)" or "Workbooks (Workbook)."
In these cases, the first name (usually the plural form) is the
name of a <I>collection object</I>. A collection object
is an object that contains a set of related objects. You can work
with the objects in a collection as a single group rather than
as separate entities. The second name (usually the singular form),
enclosed in parentheses, is the name of an individual object in
the collection. For example, in Word, you can use the <B>Documents</B>
collection to work with all the <B>Document</B> objects as a group.
<P>
Although the <B>Documents</B> collection object and the <B>Document</B>
object are both objects in their own right, each with its own
properties and methods, they're grouped as one unit in most object
model graphics to reduce complexity. You can use a collection
object to get to an individual object in that collection, usually
with the <B>Item</B> method or property. The following PowerPoint
example uses the <B>Item</B> property of the <B>Presentations</B>
collection object to activate the presentation named "Trade
Show" and then close it. All other open presentations are
left open.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Presentations.Item("Trade Show").Close

</code></pre></FONT>
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The
Item property or method is the default method for most collections.
Therefore, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Presentations("Trade Show").Close</FONT> is equivalent
to the preceding example.
<P>
You can also create new objects and add them to a collection,
usually by using the <B>Add</B> method of that collection. The
following Word example creates a new document based on the Normal
template.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Add

</code></pre></FONT>
<P>
You can find out how many objects there are in the collection
by using the <B>Count</B> property. The following Microsoft Excel
example displays the number of open workbooks in a message box
if more than three workbooks are open.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Workbooks.Count &gt; 3 Then MsgBox "More than 3 workbooks are open"

</code></pre></FONT>
<P>
Collections are useful in other ways as well. For instance, you
can perform an operation on all the objects in a given collection,
or you can set or test a value for all the objects in the collection.
To do this, you use a <B>For Each&#133;Next</B> or <B>For&#133;Next</B>
structure to loop through all the objects in the collection. For
more information about looping through a collection, see Chapter
1, "<a href="001.htm">Programming Basics</A>."
<P>
<A NAME="PG002C2"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H102">Automating a Task by Using Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex6"></a>
<P>
To automate a task in Microsoft Office, you first return a reference
to the object that contains the content and functionality you
want to get to, and then you apply properties and methods to that
object. If you don't know which properties and methods you need
to apply to what object to accomplish the task, or how to navigate
through the object model to get to that object, see "<A HREF="#CH002H208">Getting
Help Writing Code</A>" later in this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H206">Returning a Reference to an Object</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex7"></a>
<P>
Before you can do anything with an object, you must return a reference
to the object. To do this, you must build an expression that gains
access to one object in the object model and then uses properties
or methods to move up or down through the object hierarchy until
you get to the object you want to work with. The properties and
methods you use to return the object you start from and to move
from one object to another are called <I>object accessors</I>,
or just <I>accessors</I>. As you build an expression
with accessors to return a reference to an object, keep the following
guidelines in mind.
<P>

<UL>
<P>
<LI>A common place to gain access
to the object model is the top&#173;level object, which is usually
the <B>Application</B> object. Use the <B>Application</B> property
to return a reference to the <B>Application</B> object. The following
expression returns a reference to the <B>Application</B> object
(for any object library that contains an <B>Application</B> object).


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application

</code></pre></FONT>


<P>
<LI>To drill down to an object from the top&#173;level object in a hierarchy,
you must step down through all the objects above it in the hierarchy,
using accessors to return one object from another. For example,
the <B>Documents</B> property of the Word <B>Application</B> object
returns the <B>Documents</B> collection object, which represents
all open documents. The following expression returns a reference
to the Word <B>Documents</B> collection object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Documents

</code></pre></FONT>


<P>
<LI>There
are shortcut accessors you can use to gain direct access to objects
in the model without having to drill down from the <B>Application</B>
object. These shortcuts include accessors&nbsp;&#151; such
as the <B>Documents</B>, <B>Workbooks</B>, and <B>Presentations</B>
properties&nbsp;&#151; that you can use by themselves to return
a reference to the document collection for a particular application.
For example, in Word, you can use either of the following statements
to open <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">MyDoc.doc
</FONT>
<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Documents.Open FileName:="C:\DOCS\MYDOC.DOC"
Documents.Open FileName:="C:\DOCS\MYDOC.DOC"

</code></pre></FONT>


<P>
There are other shortcut accessors&nbsp;&#151;
such as the ActiveWindow, ActiveDocument, ActiveWorksheet, or
ActiveCell properties&nbsp;&#151; that return a direct reference
to an active part of an application. The following statement closes
the active Word document. Notice that the Application object and
the Documents collection object are never mentioned.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Close

</code></pre></FONT>

<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B>You
can use any accessor that appears in the <B>Members of</B> pane
of the Object Browser when <B>&lt;globals&gt;</B> is
selected in the <B>Classes</B> pane as a shortcut; that is, you
don't have to return the object that the property or method applies
to before you use the property or method, because Visual Basic
can determine from the context in which your code runs which object
a global property or method applies to. For more information about
the Object Browser, see "<A HREF="#CH002H208">Getting Help Writing Code</A>"
later in this chapter.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks

</code></pre></FONT>

<P>
<LI>To
return a single member of a collection, you usually use the <B>Item</B>
property or method with the name or index number of the member.
For example, in Microsoft Excel, the following expression returns
a reference to an open workbook named "Sales."



<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks.Item("Sales")

</code></pre></FONT>
<P>
The <B>Item</B> property or method is the default method
for most collections. Therefore, the following two expressions
are equivalent.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks.Item("Sales")
Workbooks.("Sales")

</code></pre></FONT>

<P>
<LI>To
navigate from an object higher up in the object hierarchy, you
can often use the <B>Parent</B> property of the object. Note that
the <B>Parent</B> property doesn't always return the immediate
parent of an object&nbsp;&#151; it may return the object's
"grandparent," especially if the object is a member
of a collection. That is, the <B>Parent</B> property of an object
in a collection may return the collection's parent instead of
the collection itself. For example, the <B>Parent</B> property
of a Word <B>Document</B> object returns the <B>Application</B>
object, not the <B>Documents</B> collection. Use the <B>TypeName</B>
function to find out what kind of object the <B>Parent</B> property
of an object returns a reference to. For example, in Microsoft
Excel, the following statement displays the type of object that
the <B>Parent</B> property of the <B>Worksheet</B> object refers
to.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>MsgBox TypeName(Workbooks(1).Worksheets(1).Parent)

</code></pre></FONT>



<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B>You can use the <B>TypeName</B> function to determine the type of
object returned by any expression, not just expressions containing
the <B>Parent</B> property.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActivePresentation.Slides(1).Shapes(3).Object.Application

</code></pre></FONT>

</UL>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H207">Applying Properties and Methods to an
Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex8"></a>
<P>
After you've returned a reference to the object you want to work
with it, you can apply properties and methods to the object to
set an attribute for it or perform an action on it. You use the
"dot" operator (.) to separate the expression that returns
a reference to an object from the property or method you apply
to the object. The following example, which can be run from Microsoft
Excel, Word, or PowerPoint, sets the left position of the active
window by using the <B>Left</B> property of the <B>Window</B>
object that the <B>ActiveWindow</B> property returns a reference
to.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveWindow.Left = 200

</code></pre></FONT>
<P>
The following Word example closes the active document by using
the <B>Close</B> method of the <B>Document</B> object that the
<B>ActiveDocument</B> property returns a reference to.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Close

</code></pre></FONT>
<P>
Properties and methods can take arguments that qualify how they
perform. In the following Word example, the <B>PrintOut</B> method
of the <B>Document</B> object that the <B>ActiveDocument</B> property
returns a reference to takes arguments that specify the range
of pages it should print.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.PrintOut From:="3", To:="7"

</code></pre></FONT>
<P>
You may have to navigate through several layers in an object model
to get to what you consider the real data in the application,
such as the values in cells on a Microsoft Excel worksheet or
the text in a Word document. <A NAME="CVwdhow02doc003039">The</A>
following Word example uses the following properties and methods
to navigate from the top of the object model to the text of a
document:

<UL>
<P>
<LI>The <B>Application</B> property returns
a reference to the <B>Application</B> object.
<P>
<LI>The
<B>Documents</B> property of the <B>Application</B> object returns
a reference to the <B>Documents</B> collection.
<P>
<LI>The
<B>Item</B> method of the <B>Documents</B> collection returns
a reference to a single <B>Document</B> object.
<P>
<LI>The
<B>Words</B> property of the <B>Document</B> object returns a
reference to the <B>Words</B> collection.
<P>
<LI>The
<B>Item</B> method of the <B>Words</B> collection returns a reference
to a single <B>Range</B> object.
<P>
<LI>The <B>Text</B>
property of the <B>Range</B> object sets the text for the first
word of the document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Documents.Item(1).Words.Item(1).Text = "The "

</code></pre></FONT>

</UL>



<P>
Because the <B>Documents</B> property is a global property, it
can be used without the <B>Application</B> qualifier, and because
<B>Item</B> is the default property or method for collection objects,
you don't need to explicitly mention it in your code. You can
therefore shorten the preceding statement to the statement shown
in the following example. This example implicitly drills down
through the same levels as the previous example does explicitly.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents(1).Words(1).Text = "The "

</code></pre></FONT>
<P>
Similarly, the following Microsoft Excel example drills all the
way down to the <B>Range</B> object that represents cell B3 on
the worksheet named "New" in the workbook named "Sales.xls."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks("Sales.xls").Worksheets("New").Range("B3").Value = 7

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H208">Getting Help Writing Code</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex9"></a>
<P>
Sometimes you can guess what object you need to return a reference
to, how to build the expression to return it, and what property
or method you need to apply to it to accomplish a task. For instance,
if you want to close the active Word document, you might guess
that the functionality of closing a document would be controlled
by a <B>Close</B> method that applied to the <B>Document</B> object
that was returned by the <B>ActiveDocument</B> property&nbsp;&#151;
and you'd be right. Most of the time, however, figuring out which
object, property, and method you want to use isn't that simple.
Fortunately, the Office applications include a host of tools that
help you write the code to perform your tasks.
<P>
<A NAME="USMACREC"></A>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Using the Macro Recorder</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex10"></a>
<P>
If you don't know which properties and methods you need to use
to accomplish a task but you know how to perform the task (or
something very similar to it) with the user interface, you can
use the macro recorder to translate that series of user&#173;interface
actions into a series of Visual Basic instructions. <A NAME="CVwdhow04doc004004">For
example</A>, if you don't know which property or method to use to
indent a paragraph in Word, record the actions you take to indent
a paragraph.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
record user&#173;interface actions in Microsoft Excel, Word, or
PowerPoint</FONT></B>
<P>

<OL>
<P>
<LI><A NAME="CVwdhow04doc004005">On
the <B>Tools</B> menu</A>, point to <B>Macro</B>, and then click <B>Record
New Macro</B>.
<P>
<LI><A NAME="CVwdhow04doc004006">Change
the default macro name and location if you want, and then click
<B>OK</B> to start the macro recorder.</A>
<P>
<LI><A NAME="CVwdhow04doc004007">In
the user interface, perform the tasks you want to accomplish.</A>
<P>
<LI><A NAME="CVwdhow04doc004009">When
you finish your tasks, click the <B>Stop Recording</B> button
on the <B>Stop Recording</B> toolbar.</A>
<P>
<LI><A NAME="CVwdhow04doc004010">On
the <B>Tools</B> menu, point to <B>Macro</B>, and then click <B>Macros</B>.</A>
<P>
<LI><A NAME="CVwdhow04doc004011">Select
the macro name from step 2, and then click <B>Edit</B></A>.
<P>
<A NAME="CVwdhow04doc004013"></A></OL>

<P>
Examine the Visual Basic code, and try to correlate specific properties
and methods to specific actions you took in the user interface.
<P>
Although this code can give you a good idea of what properties
and methods to get more information about, you probably won't
want to use the code without editing it, because the code the
macro recorder generates is usually not very efficient or robust.
For example, recorded code generally starts with an object that's
selected or activated when you begin recording and navigates through
the rest of the object model from that object, as shown in the
following Word example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.ParagraphFormat.LeftIndent = InchesToPoints(0.5)

</code></pre></FONT>



<P>
The following is another example of selection&#173;based code
in PowerPoint:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveWindow.Selection.ShapeRange.Delete

</code></pre></FONT>
<P>
The problem with code like that in the preceding examples, besides
being inefficient, is that it relies on a particular element being
selected or activated when you run the code for it to work properly.
Your code will be much more robust and flexible if it contains
expressions to navigate through the object model that don't begin
with the selected or activated object. For example, in Word, if
instead of applying the <B>ParagraphFormat</B> property to the
<B>Selection</B> object that's returned by the <B>Selection</B>
property, you apply the <B>Format</B> property to the <B>Paragraph</B>
object that represents a specific paragraph (as shown in the following
example), your code will run correctly no matter what's selected
when you run it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents("Test Document.doc").Paragraphs(1).Format.LeftIndent = InchesToPoints(0.5)

</code></pre></FONT>
<P>
For ideas on how to improve your recorded code, position the insertion
point within a property or method in your code, and then press
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT> to see a Help topic with example code for
that property or method. For more information about using Visual
Basic Help to write code, see the following section. For more
information about editing recorded code to make it more efficient,
see Chapter 13, "<a href="013.htm">Optimizing for Size and Speed</A>."
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Help Files and Graphics</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex11"></a>
<P>
Visual Basic Help for any given Office application contains a
topic on each object, property, method, and event in the object
model. To see a graphical depiction of an application's entire
object model, see "Microsoft Access Objects," "Microsoft
Excel Objects," "Microsoft Word Objects," or "Microsoft
PowerPoint Objects" in Visual Basic Help for that application.
<P>
<TABLE WIDTH=80% CELLPADDING=15 BORDER=1 CELLSPACING=0 BORDERCOLOR=#0000FF><TR BGCOLOR=#FFFFFF><TD>

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<P>
<B>How Do I Display Visual Basic Help for Microsoft Excel, Word,
and PowerPoint?</B>
<P>
To use Visual Basic Help for Microsoft Excel, Word, or PowerPoint,
you must click <B>Custom</B> during Setup and select the <B>Online
Help for Visual Basic</B> check box for that application. Otherwise,
Visual Basic Help won't be installed. If you've already installed
your application, you can run Setup again to install Visual Basic
Help.
<P>
To see the contents and index of Visual Basic Help for Microsoft
Excel, Word, or PowerPoint, click <B>Contents and Index</B> on
the <B>Help</B> menu in the Visual Basic Editor. On the <B>Contents</B>
tab in the <B>Help Topics</B> dialog box, double&#173;click the
book title that includes the name of the application you're working
in (for example, "Microsoft Word Visual Basic Reference"),
and then double&#173;click the shortcut in that book (for example,
"Shortcut to Microsoft Word Visual Basic Reference").
The <B>Help Topics</B> dialog box should reappear, displaying
the contents and index for Visual Basic Help for your application.
<P>
</FONT></FONT></TD></TR>
</TABLE>

<P>
If you cannot tell by looking at an object's name what content
and functionality the object encompasses, you can click that object
in the graphic to open its Help topic and learn more about it.
The Help topic for an individual object contains the following
information:
<P>

<UL>
<P>
<LI>A graphic at the top of
the topic that shows significant objects immediately above and
below the object in the hierarchy (object model). You can click
any object in the graphic to read more about it.
<P>
<LI>An
explanation of the content and functionality that the object encompasses.
<P>
<LI>Instructions
and examples that explain how to navigate through the object model
to get to the object and how to then apply properties and methods
to it. Note that you can copy code from Help topics to use in
your own code.
<P>
<LI>Jumps at the top of the topic
that display lists of the properties and methods that apply to
the object. You can click the name of a property or method to
open its Help topic.
<P>
</UL>

<P>
The Help topic for an individual property or method contains both
a description of the content or functionality that the property
or method gives you access to and a jump to an example that uses
the property or method. You can copy code from Help topics to
the Clipboard and then paste this code into your own module.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Object Browser</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex12"></a>
<P>
Each Office application provides a file called an <I>object
library</I>, or <I>type library</I>, that contains
information about the objects, properties, methods, events, and
built&#173;in constants that the application exposes. You can
use a tool called the Object Browser to look at the information
in this file and to browse the object model it describes.
<P>
To open the Object Browser from the Visual Basic Editor (Microsoft
Excel, Word, and PowerPoint) or from a module (Microsoft Access),
click <B>Object Browser</B> on the <B>View</B> menu. In the <B>Project/Library</B>
box, click the name of the object library whose objects you want
to see, or click <B>&lt;All Libraries&gt;</B> to view
a master list of all the objects in all the referenced object
libraries. If the object library whose objects you want to view
doesn't appear in the <B>Project/Library</B> box, you must create
a reference to that object library by using the <B>References</B>
dialog box (<B>Tools</B> menu).
<P>
The <B>Classes</B> box in the Object Browser displays the names
of all the objects and enumerated types in all the referenced
object libraries.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>A
class is a <I>type</I>, or description, of object. An object is an actual
instance of a class. For example, the <B>Workbook</B> class contains
all the information you need to create a workbook. A <B>Workbook</B>
object only comes into existence when you use the information
in the <B>Workbook</B> class to create an actual workbook (an instance
of the <B>Workbook</B> class). Despite this technical distinction, these
terms are often used interchangeably. The term "object"
is used generically for both "class" and "object"
in this chapter.
<P>
When you click the name of an object in the <B>Classes</B> box
in the Object Browser, you see all the properties, methods, and
events associated with that object in the <B>Members of</B> box.
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;<A NAME="IP"></A></FONT></B>An
<I>event</I> is an action recognized by an object,
such as clicking the mouse or pressing a key. You can write code
to respond to such actions. For general information about events,
see Chapter 1, "<a href="001.htm">Programming Basics</A>." For information
about events for a specific application, see the chapter on that
application's object model, or see the topic for a specific event
in Help.
<P>
Click a property or method in the <B>Members of</B> box. You can
press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT> to see the Help topic for the selected
keyword, or you can look in the <B>Details</B> pane at the bottom
of the Object Browser window to see the following: syntax information,
a property's read&#173;only or read/write status, the object library
that the object belongs to, and the type of data or object that
the property or method returns. If a word in the <B>Details</B>
pane is a jump, you can click it to get more information. This
is useful if you want to figure out how to drill down to an object.
For example, in Word, if you click the <B>Application</B> object
in the <B>Classes</B> box and then click the <B>ActiveDocument</B>
property in the <B>Members of</B> box, you see the following phrase
in the <B>Details</B> pane:
<P>
Property <B>ActiveDocument</B> As <U><B>Document</B></U>
<P>
This tells you that the <B>ActiveDocument</B> property returns
a reference to a <B>Document</B> object. If you click the return
type (the object type or data type after the keyword <B>As</B>),
which in this case is <B>Document</B>, the Object Browser will
display the properties and methods of the <B>Document</B> object.
<P>
The <B>Details</B> pane can also be helpful if you cannot remember
the exact syntax&nbsp;&#151; the names and order of arguments
that a given property or method takes, and which arguments are
required or optional. For instance, in Word, if you click the
<B>ComputeStatistics</B> method of the <B>Document</B> object
that you've just navigated to, you'll see the following phrase
in the <B>Details</B> pane:
<P>
Function <B>ComputeStatistics</B>(<I>Statistic</I>
As <U><B>WdStatistic</B></U>, [<I>IncludeFootnotesAndEndnotes</I>])
As Long
<P>
This tells you that you can apply the <B>ComputeStatistics</B>
method to the <B>Document</B> object and get back a value of type
<B>Long</B>, but that you have to supply some additional information
in the form of arguments for the method to work. Because the argument
<I>Statistic</I> isn't in brackets, it's a required
argument&nbsp;&#151; that is, you must supply a value for
it for the method to work. <I>IncludeFootnotesAndEndnotes</I>,
which is in brackets, is an optional argument. If you don't supply
a value for it, Visual Basic will use the default value.
<P>
If you're already familiar with the <B>ComputeStatistics</B> method,
the information in the <B>Details</B> pane alone may jog your
memory enough that you can use this method in code such as the
following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>MsgBox ActiveDocument.ComputeStatistics(Statistic:=wdStatisticWords, _
&nbsp;&nbsp;&nbsp; IncludeFootnotesAndEndnotes:=True) &amp; " words"

</code></pre></FONT>
<P>
You can copy text from the <B>Details</B> pane and then either
paste it into a module or just drag it and drop it into a module
to save yourself some typing. If you cannot remember what the
possible values for the <I>Statistic</I> argument
are, click <B>WdStatistic</B> to see a list of valid constants.
If you still don't have enough information to use the <B>ComputeStatistics</B>
method in code, click <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT> to get Help.
<P>
Note that if you have references to object libraries that contain
objects of the same name and you have <B>&lt;All Libraries&gt;</B>
selected in the <B>Project/Library</B> box in the Object Browser,
you'll see duplicate names in the Object Browser. For example,
if you have a reference to the Microsoft Excel and Word object
libraries, you'll see duplicates of the <B>AddIn</B> object, the
<B>AddIns</B> object, the <B>Adjustments</B> object, the <B>Application</B>
object, and so on. You can tell these duplicate objects apart
by clicking one of them and looking in the <B>Details</B> pane.
The <B>Details</B> pane shows you which object library the selected
keyword is a member of.
<P>
For more information about the Object Browser, see "Object
Browser" in Help.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Statement&#173;Building Tools</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex13"></a>
<P>
There are a number of tools built in to the development environment
that help you build expressions and statements in Visual Basic.
To turn these tools on or off in the Visual Basic Editor (Microsoft
Excel, Word, or PowerPoint), select one or more of the following
check boxes under <B>Code Settings</B> on the <B>Editor</B> tab
in the <B>Options</B> dialog box (<B>Tools</B> menu). In Microsoft
Access, select one or more of the following check boxes under
<B>Coding Options</B> on the <B>Module</B> tab in the <B>Options</B>
dialog box (<B>Tools</B> menu).
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Option</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Effect</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Auto Syntax Check</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Determines whether Visual Basic should automatically verify correct syntax after you enter a line of code.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Require Variable Declaration</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Determines whether explicit variable declarations are required in modules. Selecting this check box adds the <B>Option Explicit </B>statement to general declarations in any new module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Auto List Member</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a list that contains information that would logically complete the statement at the current location of the insertion point.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Auto Quick Info</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays information about functions and their parameters as you type.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Auto Data Tips</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays the value of the variable that the pointer is positioned over. Available only in break mode.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Auto Indent</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Repeats the indent of the preceding line when you press ENTER. That is, all subsequent lines will start at that indent. You can press BACKSPACE to remove automatic indents.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Tab Width</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Sets the tab width, which can range from 1 to 32 spaces (the default is 4 spaces).</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
These tools automatically display information and give you appropriate
options to choose from at each stage of building your expression
or statement. For example, with the <B>Auto List Member</B> option
selected, type the keyword <B>Application</B> followed by the
dot operator. You should see a box that lists the properties and
methods that apply to the <B>Application</B> object in the first
object library you have referenced. (If you have several object
libraries referenced, you may want to qualify your statements
with the library name to make sure you are returning a reference
to the right object. For instance, you may want to use <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Excel.Application</FONT>
or <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Word.Application</FONT>
instead of just <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Application</FONT>).
You can select an item from the list and continue typing.
<P>
You can get also get help building expressions at any time by
clicking <B>List Properties/Methods</B>, <B>List Constants</B>,
<B>Quick Info</B>, <B>Parameter Info</B>, or <B>Complete Word</B>
on the shortcut menu in a module. For more information about these
commands in Microsoft Excel, Word, and PowerPoint, search for
the command names in Visual Basic Help.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Early Binding and the Statement&#173;Building Tools</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<A NAME="CVwdhow01doc003056"></A><a name="dex14"></A>
<P>
When you create an object variable in one application that refers
to an object supplied by another application, Visual Basic must
verify that the object exists and that any properties or methods
used with the object are specified correctly. This verification
process is known as <I>binding</I>. Binding can occur
at run time (late binding) or at compile time (early binding).
Late&#173;bound code is slower than early&#173;bound code. In
addition, many of the coding aids that are built into the development
environment work only on early&#173;bound code.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
make your code early bound</FONT></B>
<P>

<OL>
<P>
<LI>Set a reference to the
type library that contains the objects you want to refer; do this
in the <B>References</B> dialog box (<B>Tools</B> menu).
<P>
<LI>Declare
your object variables as specific types. For example, if an object
variable is going to contain a reference to a <B>Document</B>
object, declare the variable as follows.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wdObject As Document

</code></pre></FONT>

<P>
Don't declare the variable as the generic Object type,
as shown in the following declaration.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wdObject As Object

</code></pre></FONT>

<P>
<LI>If you'll be writing code
that uses objects from more than one library, specify the name
of the application when declaring object variables, especially
if the different libraries contain objects with the same name,
as shown in the following two declarations.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wndXL As Excel.Window
Dim wndWD As Word.Window

</code></pre></FONT>

<P>
</OL>

<P>
If a property or method that you use in your code to return a
reference to an object has the generic return type <B>Object</B>
instead of a specific object type, you must take additional steps
to ensure that your code is early bound and that the statement&#173;building
tools will work.
<P>
For example, in Microsoft Excel, the <B>Item</B> method of the
<B>Worksheets</B> object returns the type <B>Object</B>, instead
of <B>Worksheet</B>, so you won't get any more help from the statement&#173;building
tools after you reach the following point in your statement.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks(1).Worksheets(1).

</code></pre></FONT>


<P>
Because the returned object type is <B>Object</B>, which is the
generic type for all objects, the statement&#173;building tools
don't know what the available properties and methods are. To get
around this, you must explicitly declare an object variable that
has the specific type <B>Worksheet</B>, and you must set that
object variable to the expression that returns a reference to
the <B>Worksheet</B> object, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim testWS As Worksheet
Set testWs = Workbooks(1).Worksheets(1)

</code></pre></FONT>
<P>
From this point on, when you type the name of the object variable
followed by a period, the <B>List Properties/Methods</B> command
will suggest properties and methods for the <B>Workbook</B> object
that the variable refers to.
<P>
<A NAME="PG002C3"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH002H103">Programming Another Application's Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<A NAME="CVpphowdoc004004"></A><a name="dex15"></A>
<P>
You can run code in one Microsoft Office application that works
with the objects in another application.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
program another application's objects</FONT></B>
<P>

<OL>
<P>
<LI>Set a reference to the other application's type library in the <B>References</B>
dialog box (<B>Tools</B> menu). After you've done this, the objects,
properties, and methods will show up in the Object Browser and
the syntax will be checked at compile time. You can also get context&#173;sensitive
Help on them.
<P>
<LI>Declare object variables that will refer to the objects in the other application
as specific types. Make sure that you qualify each type with by
the name of the application exposes the object. The following
example declares a variable that will point to a Word document
and another variable that refers to a Microsoft Excel workbook.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWD As Word.Application, wbXL As Excel.Workbook

</code></pre></FONT>

<P>
<LI>Use the <B>CreateObject</B> function with the OLE programmatic identifier
of the object you want to work with in the other application,
as shown in the following example. If you want to see the session
of the other application, set the <B>Visible</B> property to <B>True</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWD As Word.Application

</code></pre></FONT>
<P>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set appWD = CreateObject("Word.Application.8")
appWd.Visible = True

</code></pre></FONT>

<P>For specific information about the programmatic identifiers exposed by each Office application,
see "OLE Programmatic Identifiers" in Help.
<P>
<LI>Apply properties and methods to the object contained in the variable.
The following example creates a new Word document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWD As Word.Application

Set appWD = CreateObject("Word.Application.8")
appWD.Documents.Add

</code></pre></FONT>

<P>
<LI>When you finish working with the other application, use the <B>Quit</B>
method to close it, as shown in the following example.
<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>appWd.Quit

</code></pre></FONT>
<P>
</OL>

<BR>

</MENU></MENU></MENU>
<HR>

<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>
</FONT>
</FONT></BODY>



</HTML>

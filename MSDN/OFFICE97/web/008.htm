<HTML>

<Head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 8: Menus and Toolbars</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 8</B></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5><B>Menus and Toolbars</B></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3><B>Contents</B></FONT>

<UL>
<LI><A HREF="#CH008H101">Tools for Modifying
the User Interface</A>
<BR>
<LI><A HREF="#CH008H102">Scope of Changes
to the User Interface</A>
<BR>
<LI><A HREF="#CH008H103">Choosing the Best
User&#173;Interface Enhancement</A>
<BR>
<LI><A HREF="#CH008H104">The Menu System</A>
<BR>
<LI><A HREF="#CH008H105">Design&#173;Time Modifications to the Menu System</A>
<BR>
<LI><A HREF="#CH008H106">Run&#173;Time Modifications
to the Menu System</A>
<BR>
<LI><A HREF="#CH008H107">Toolbars</A>
<BR>
<LI><A HREF="#CH008H108">Design&#173;Time
Modifications to Toolbars</A>
<BR>
<LI><A HREF="#CH008H109">Run&#173;Time Modifications
to Toolbars</A>
<BR>
<LI><A HREF="#CH008H110">Menu Item and Toolbar Control IDs</A>
</UL>

<P>
An essential part of creating a useful custom application is providing
a simple and consistent way for the user to interact with your
Visual Basic application. Menus and toolbars provide a quick,
convenient, and widely accessible way to expose simple commands
and options to the user. In Microsoft Office&nbsp;97, menus and
toolbars are easy to design and modify; Microsoft Access&nbsp;97,
Microsoft Excel&nbsp;97, Microsoft Word&nbsp;97, and Microsoft
PowerPoint&nbsp;97 all share the same basic customization interface&nbsp;&#151;
the <B>Customize</B> dialog box. Because all menus and toolbars
are represented by the same type of object&nbsp;&#151; the
<B>CommandBar</B> object&nbsp;&#151; they're easy to customize
and control from Visual Basic, as well.
<P>
The information in this chapter covers the shared menu and toolbar
customization features of Microsoft Access, Microsoft Excel, Microsoft
Word, and Microsoft PowerPoint. For more information about customizing
menus and toolbars in Microsoft Access, see Chapter&nbsp;1 in
<I>Building Applications with Microsoft Access&nbsp;97</I>,
which is available in Microsoft Access&nbsp;97 and Microsoft Office&nbsp;97,
Developer Edition. An online version of that book is available
in the Value Pack on CD&#173;ROM in Microsoft Access&nbsp;97 and
Microsoft Office&nbsp;97, Professional Edition.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Microsoft
Outlook doesn't provide an interface for customizing menus and
toolbars. Therefore, none of the information in this chapter about
the Customize dialog box applies to Microsoft Outlook.
<P>
<A NAME="CH008H101"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH008H101">Tools for Modifying the User Interface</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex1"></a>
<P>
There are two tools for customizing menu bars and toolbars: the
shared <B>Customize</B> dialog box and Visual Basic. Although
the <B>Customize</B> dialog box differs slightly from one Office
application to the next, the programmable objects used to modify
menu bars and toolbars are the same across all applications. This
section describes the <B>Customize</B> dialog box and the shared
programmable objects, as well as when and how to use these tools.
<P>
<FONT SIZE=4><B><A NAME="CH008H201">The Customize Dialog Box</A></B></FONT>


<P>
<a name="dex2"></a>
<P>
The Office applications (excluding Outlook) provide a common interface&nbsp;&#151;
the <B>Customize</B> dialog box&nbsp;&#151; for making design&#173;time
changes to your Visual Basic application. Design&#173;time changes
to menu bars and toolbars are any changes you make before the
application runs. This includes adding, deleting, moving, and
restoring menu components and toolbar controls, as well as setting
menu&#173;component and toolbar&#173;control properties that won't
change in response to changing conditions at run time.
<P>
The sections in this chapter discuss how to modify menu bars and
toolbars by using either the <B>Customize</B> dialog box or Visual
Basic code. In cases where you can use either technique to make
the same modifications, using the <B>Customize</B> dialog box
to make design&#173;time changes is quicker and easier. Therefore,
you should be familiar with the elements of and techniques for
using this dialog box.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
display the Customize dialog box</FONT></B>
<P>
<LI>On the View menu, point to Toolbars, and then click Customize.
<P>
The following illustration shows the <B>Toolbars</B> tab in the
<B>Customize</B> dialog box displayed by PowerPoint.
<P>
<IMG SRC="00801.gif">
<P>
Microsoft Access, Microsoft Excel, and Microsoft Word all provide
the same controls in the <B>Customize</B> dialog box (on the <B>Toolbars</B>,
<B>Commands</B>, and <B>Options</B> tabs) as does PowerPoint,
but these first three applications also include other elements
on the <B>Toolbars</B> and <B>Commands</B> tabs that are specific
to customizing those applications. Those elements are described
in the following paragraphs.
<P>
<B>Microsoft Access</B>&nbsp;&nbsp;&nbsp;The <B>Toolbars</B>
tab contains a <B>Properties</B> button that displays the <B>Toolbar
Properties</B> dialog box. Use this dialog box to set properties
of built&#173;in or custom menu bars and toolbars. For more information
about using the <B>Toolbar Properties</B> dialog box, see Chapter&nbsp;1
in <I>Building Applications with Microsoft Access&nbsp;97</I>.
<P>
<B>Microsoft Excel</B>&nbsp;&nbsp;&nbsp;The <B>Toolbars</B>
tab contains an <B>Attach</B> button that displays the <B>Attach
Toolbars</B> dialog box. You can use this dialog box to copy menu
bars and toolbars from the application workspace to the active
workbook. For more information, see "<A HREF="#CH008H102">Scope of Changes to
the User Interface</A>" later in this chapter.
<P>
<B>Microsoft Word</B>&nbsp;&nbsp;&nbsp;The <B>Commands</B>
tab contains a <B>Save in</B> box you can use to specify the context
of the design&#173;time changes you make in the <B>Customize</B>
dialog box. The <B>New Toolbar</B> dialog box that appears when
you click the <B>New</B> button on the <B>Toolbars</B> tab contains
the <B>Make toolbar available to</B> box. For more information,
see "<A HREF="#CH008H102">Scope of Changes to the User Interface</A>" later in
this chapter. The <B>Commands</B> tab also contains a <B>Keyboard</B>
button that displays the <B>Customize Keyboard</B> dialog box;
you can use this dialog box to assign shortcut keys to any macro
or built&#173;in Word command.
<P>
After you've opened the <B>Customize</B> dialog box in any Microsoft
Office application, you follow the same general procedure for
modifying any built&#173;in or custom menu or toolbar, as described
by the following steps.
<P>

<OL>
<P>
<LI>In the <B>Toolbars</B>
box on the <B>Toolbars</B> tab, select the check box next to the
name of the menu bar or toolbar you want to display and modify.
When you create a new menu bar or toolbar, it's automatically
displayed.
<P>
<LI>Click any menu item (including menu
and submenu captions) or toolbar control to select it. The command
associated with the control doesn't run while the <B>Customize</B>
dialog box is open.
<P>
<LI>Right&#173;click the item
or control you've selected to display the shortcut menu containing
the available customization options. Options for menu commands
and toolbar buttons include resetting the command; deleting the
item or control; changing its name; specifying whether it should
have a name, an image, or both displayed; modifying its image;
and setting it to begin a group (that is, to appear with a line
above or before it).
<P>
</OL>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;One
or more of these options may not be available for built&#173;in
commands or controls; unavailable options appear dimmed on the
shortcut menu.
<P>
While the <B>Customize</B> dialog box is open, you can rearrange
items and controls by dragging and dropping them, and you can
add new items and controls from the <B>Commands</B> tab. For more
information about adding new items and controls, see the corresponding
procedures in "<A HREF="#CH008H105">Design&#173;Time Modifications to the Menu System</A>" and "<A HREF="#CH008H108">Design&#173;Time Modifications to Toolbars</A>" later in this chapter.
<P>
<FONT SIZE=4><B><A NAME="CH008H202">Visual Basic</A></B></FONT>


<P>
<a name="dex3"></a>
<P>
In general, to create or modify the user interface of the Microsoft
Office application in which you're delivering your Visual Basic
application, you should use the <B>Customize</B> dialog box. Changes
you make to the user interface by using the <B>Customize</B> dialog
box are known as <I>design&#173;time</I> changes.
<P>
You can also add to and modify menus and toolbars by using the
command bar portion of the shared Microsoft Office object model
in Visual Basic code: the top&#173;level object is the <B>CommandBars</B>
collection, which is returned by the <B>CommandBars</B> property
in all the Microsoft Office applications. Every menu bar, shortcut
menu, and toolbar is represented by a <B>CommandBar</B> object
in this collection. Every <B>CommandBar</B> object contains a
<B>CommandBarControls</B> collection; each control on a menu bar
or toolbar is represented by a member of this collection.
<P>
For more information about the <B>CommandBars</B> collection,
all the objects it contains, and the properties and methods of
those objects, see "Overview of command bars" and the
corresponding object, property, and method topics in Help.
<P>
You can write code that runs just once to create or change elements
of menus or toolbars; in effect, the code simulates making design&#173;time
changes in the <B>Customize</B> dialog box. In some Microsoft
Office applications, however, you may be required to use a combination
of this kind of Visual Basic code and the <B>Customize</B> dialog
box to design your Visual Basic application. The following are
some common areas where you must use a combination of code and
the container application's interface:
<P>

<UL>
<P>
<LI>If you cannot use the <B>Customize</B>
dialog box to create a new menu bar, you'll need to create a menu
bar by using Visual Basic. After you've created the menu bar in
Visual Basic, you can design menus on that menu bar by using the
<B>Customize</B> dialog box.
<P>
<LI>If your container
application doesn't provide a way to display built&#173;in or
custom shortcut menus while the <B>Customize</B> dialog box is
open, you must use Visual Basic code to modify those shortcut
menus.
<P>
<LI><A NAME="CVofhowcbrdoc002006">If your
container application doesn't provide an interface for adding
or modifying text boxes, drop&#173;down list boxes, or combo boxes
on toolbars, you must use Visual Basic code to add and design
these controls.</A>
<P>
</UL>

<P>
You can also write code that exists in your Visual Basic application
to make changes to the menu system while your application is running
(for example, you can write code to disable a command on a menu
under certain conditions, or to add a menu to a menu bar in response
to a user's actions). Changes brought about by your code while
your Visual Basic application is running are known as <I>run&#173;time</I>
changes.
<P>
<A NAME="CH008H102"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH008H102">Scope of Changes to the User Interface</A></B></FONT>
<MENU><MENU>


<P>
Each Microsoft Office application uses slightly different rules
regarding where and how changes to the user interface are stored.
It's important to understand how you can control the scope of
the changes, because the ability of your Visual Basic application
to display your custom interface correctly depends on it.
<P>
<FONT SIZE=4><B><A NAME="CH008H203">Microsoft Access</A></B></FONT>


<P>
<a name="dex4"></a>
<P>
The following information describes managing and storing menu
bars and toolbars in Microsoft Access. For more information about
working with menu bars and toolbars in Microsoft Access, see Chapter&nbsp;1
in <I>Building Applications with Microsoft Access&nbsp;97</I>.
<P>
You can use custom menu bars and shortcut menus in your custom
application in three ways:
<P>

<UL>
<P>
<LI>Attached to a form or report.
Microsoft Access displays your custom menu bar whenever you open
the form or display the report in print preview. For more information,
see "MenuBar Property" in Help.
<P>
<LI>As
a shortcut menu attached to a form, a control on a form, or a
report. Microsoft Access displays your custom menu whenever you
right&#173;click the form, control, or report it's attached to.
For more information, see "ShortCutMenuBar Property"
in Help.
<P>
<LI>As your application's global menu bar.
Microsoft Access displays your custom menu bar in all windows,
except in forms or reports that have their own custom menu bar.
(A form or report's custom menu bar overrides a global custom
menu bar.) You can specify a menu bar to use throughout your application
by using the <B>Startup</B> dialog box.
<P>
</UL>

<P>
You can use one or more custom toolbars in an application. Create
the toolbars you want, and then use the appropriate method to
display your custom toolbars:
<P>

<UL>
<P>
<LI>If your application has
only one custom toolbar, just use the <B>Toolbars</B> command
(<B>View</B> menu) to display it; it will appear each time your
application starts.
<P>
<LI>If your application has
different custom toolbars for different forms or reports, you
can specify a toolbar for each form or report in the form or report's
<B>Toolbar</B> property.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;There
is no need to create event procedures for the Activate and Deactivate
events of the form to show and hide toolbars, as was required
in previous versions of Microsoft Access. Setting the Toolbar
property to a custom toolbar automatically hides the built&#173;in
Form View toolbar when your form is opened and hides your custom
toolbar when a user closes the form or switches to another form.
<P>
<P>
<LI>If you need to work with more than one custom toolbar for a form or report, or if you want to hide or show built-in Microsoft Access toolbars, you can use the <B>Visible</B> property of the <B>CommandBar</B> object in Visual Basic code or use the <B>ShowToolbar</B> action in macros to hide and show the toolbars.
<P>
<LI>If you want your application to display only custom toolbars, you can hide all built-in toolbars by clicking the <B>Startup</B> command (<B>Tools</B> menu) and then clearing the <B>Allow Built-in Toolbars</B> check box.
</UL>
<A NAME="CH008H204"></A>
<P>
<FONT SIZE=4><B>Microsoft Excel</B></FONT>

<P>
<a name="dex5"></a>
<P>
You can store custom menu bars and toolbars with the workspace
or with the workbook. When you quit Microsoft Excel, the toolbars
in the workspace are automatically saved in the file <I>Username</I>8.xlb
(where <I>Username</I> is the current user's Windows&nbsp;95
logon name). If the user isn't logged on, the file name is Excel8.xlb.
The toolbars saved in a workbook are stored in the workbook file.
<P>
Workbook&#173;level menu bars and toolbars make it easier for
you to create a polished user interface for a custom application
(an add&#173;in, for instance) and to distribute custom toolbar
buttons and their supporting procedures. If you're going to distribute
a custom toolbar with a custom application, you should attach
it to the workbook that contains that application so that the
toolbar is stored in the same file as the application.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
move a menu bar or toolbar from the workspace to a workbook</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>On
the <B>Toolbars</B> tab, click <B>Attach</B>.
<P>
The Attach Toolbars dialog box is displayed.
<P>
<LI>In
the <B>Custom toolbars</B> box, click the name of the menu bar
or toolbar you want to copy to the active workbook.
<P>
<LI>Click
<B>Copy</B>.
<P>
The name of the menu bar or toolbar you copied appears
in the Toolbars in workbook box.
<P>
</OL>

<P>
You can delete the original workspace&#173;level menu bar or toolbar
by clicking the <B>Toolbars</B> tab in the <B>Customize</B> dialog
box, selecting the name of the menu bar or toolbar you want to
delete, and then clicking <B>Delete</B>. If you don't delete the
workspace version of the menu bar or toolbar, you can change it
without affecting the version stored in the workbook. If you make
changes to the workspace version of the menu bar or toolbar and
would like to update the workbook version to match the current
workspace version, you can copy the workspace version to the workbook
again, thus replacing the previous workbook version.
<P>
After you've copied a menu bar or toolbar to a workbook, the menu
bar or toolbar becomes available only after the user has opened
that workbook. A workbook version of the menu bar or toolbar retains
not only its name and contents, but also the code assignments
for menu items or toolbar controls; the location, size, and shape
of the menu bar or toolbar; its on&#173;screen position; and whether
it's visible or hidden.
<P>
You can also delete a workbook version of a menu bar or toolbar.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
delete a workbook version of a menu bar or toolbar</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>On
the <B>Toolbars</B> tab, click <B>Attach</B>.
<P>
The Attach Toolbars dialog box is displayed.
<P>
<LI>In
the <B>Toolbars in workbook</B> box, click the name of the menu
bar or toolbar you want to delete.
<P>
<LI>Click <B>Delete</B>.
<P>
</OL>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;You
cannot use Visual Basic to attach menu bars or toolbars to a workbook
or delete them from a workbook.
<P>
When you open a workbook that contains one or more menu bars or
toolbars, Microsoft Excel first determines whether a workspace
menu bar or toolbar with that name already exists. If not, Microsoft
Excel creates a new workspace menu bar or toolbar and copies the
workbook version into it. This way, the you get a fresh copy of
the menu bar or toolbar, which you can alter by hiding it or by
copying items or controls to or from the workspace&#173;level
copy. When you quit Microsoft Excel, changes made to this copy
of the menu bar or toolbar are stored with the workspace file.
<P>
There's no way to rename a menu bar or toolbar, so when the workbook
is reopened, the workspace already contains a menu bar or toolbar
with the same name as the workbook version, and Microsoft Excel
uses the workspace copy rather than reloading the workbook version.
However, the procedures that support the menu items or toolbar
buttons in the open workbook still run when the user clicks the
corresponding item or control.
<P>
As a developer, you can design a menu bar or toolbar and then
attach it to a workbook. When the user opens the workbook, the
custom menu bar or toolbar is available. The user can then edit
it and move items or controls from it to personal menu bars or
toolbars, without affecting the copy stored in the workbook. The
user's changed menu bars and toolbars are stored with the workspace
file when he or she quits Microsoft Excel. When the user starts
Microsoft Excel again, the edited menu bar or toolbar is available;
clicking one of the developer's menu items or toolbar controls
loads the workbook that contains the procedure attached to that
item or control. To generate a fresh copy of the workbook menu
bar or toolbar, the user can delete the edited copy.
<P>
<FONT SIZE=4><B><A NAME="CH008H205">Microsoft Word</A></B></FONT>


<P>
<a name="dex6"></a>
<P>
Word stores custom menus and toolbars in templates, just as it
does with macros. When you customize a menu or create a new toolbar,
changes are stored by default in the Normal template and are available
"globally"&nbsp;&#151; that is, you can always display
a custom toolbar stored in the Normal template, even if the active
document is based on a different template. A toolbar stored in
a template other than Normal is available under either of two
circumstances: the template is attached to the active document,
or the template is loaded as a global template (<B>Tools</B> menu,
<B>Templates and Add&#173;ins</B> command). When you store a toolbar
in a document, you can display the toolbar only when the document
itself is active.
<P>
If you're going to distribute a Visual Basic application with
customized menus and toolbars, you should store your menu bars
and toolbars in a custom template or in a document. Because every
user has his or her own Normal template, your Visual Basic application
shouldn't change the Normal template. It's also easier to remove
custom menus and toolbars when the user quits your application
if the customizations are in the template or document that contains
your application. That is, when the user closes the document (if
the document contains toolbars or the template it's attached to
contains toolbars) or unloads your template, your custom toolbars
are no longer available; only the built&#173;in menus and toolbars
or the user's custom toolbars remain.
<P>
If two custom toolbars with the same name are available at the
same time (for example, if the Normal template and a loaded global
template both have a toolbar named "Custom Tools"),
both toolbars are listed in the <B>Customize</B> dialog box and
can be displayed either separately or at the same time.
<P>
In Visual Basic, you can add, customize, or delete menu bars and
toolbars in any document or template. However, because the <B>CommandBars</B>
property applies only to the <B>Application</B> object, you must
set the context for your change before you make the change. Similar
to using the <B>Store in</B> box on the <B>Commands</B> tab in
the <B>Customize</B> dialog box, you can use the <B>CustomizationContext</B>
property in Visual Basic to specify a <B>Document</B> or <B>Template</B>
object that represents the document or template in which you want
to make changes. You must set the <B>CustomizationContext</B>
property before using the <B>CommandBars</B> property; this ensures
that a reference to the collection of menu bars and toolbars for
that document or template is returned. For more information, see
"<A HREF="#CH008H108">Design&#173;Time Modifications to Toolbars</A>" later in this chapter.
<P>
<FONT SIZE=4><B><A NAME="CH008H206">Microsoft PowerPoint</A></B></FONT>

<P>
<a name="dex7"></a>
<P>
Custom menu bars and toolbars are always stored with the workspace.
When you quit PowerPoint, the toolbars in the workspace are saved
in the file <I>Username</I>.pcb (where <I>Username</I>
is the current user's Windows&nbsp;95 logon name). If the user
isn't logged on, the file name is Powerpnt.pcb.
<P>
Because menu bars and toolbars aren't visible while a presentation
is running, customizing menus and toolbars in PowerPoint is limited
to changing the available menu commands and toolbar controls in
design mode. You can use either the <B>Customize</B> dialog box
or Visual Basic to modify your own design environment. If your
Visual Basic application delivers a custom interface for designing
presentations, you must use Visual Basic to make changes to menus
and toolbars. When the user finishes with your application, it's
a good idea for you to remove changes you made in Visual Basic.
<P>
<A NAME="CH008H103"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH008H103">Choosing the Best User&#173;Interface Enhancement</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex8"></a>
<P>
Menus are lists of user&#173;interface commands from which the
user can choose. Menus offer a convenient and consistent way to
group commands and an easy way for users to get to them. Commands
for performing related tasks can be listed on the same menu, and
commands can also be grouped (separated by lines from other commands
or groups of commands). Submenus offer additional levels of organization,
and shortcut menus offer a way to group related commands that
apply to the limited context of a specific task.
<P>
You can assign access keys to make commands accessible from the
keyboard, and you can assign shortcut keys to provide the user
even quicker access to the commands. In addition, menus take up
less space than toolbars, as the items on a menu are displayed
on demand and don't take up dedicated screen space. On the other
hand, if you want quick, graphical access to a command, a toolbar
may be a better choice.
<P>
Toolbars contain controls that perform frequently used commands.
Toolbars are ideal for presenting individual property settings
(such as bold or italic formatting, or font size), commands that
are best represented visually, and commands you want to access
with one click of the mouse. In addition, toolbars remain displayed
while the user works, whereas menus are displayed only on demand;
this makes scanning a toolbar for a particular button easier than
scanning the menus on a menu bar for a particular command. However,
if you need easy keyboard access to a command, if you want to
display your commands hierarchically, or if you are short on screen
space, a menu may be a better choice.
<P>
If you need to present a more complex set of options to the user,
a dialog box may be a better choice than either a toolbar or a
menu. If you want to place a tool closer to the data the user
is working with, the best solution may be to place a control directly
on a worksheet or document. For more information about these various
types of user&#173;interface enhancements, see Chapter&nbsp;12,
"<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<P>
<A NAME="CH008H104"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH008H104">The Menu System</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex9"></a>
<P>
The <I>menu system</I> in each Microsoft Office application
is composed of the entire set of menus and the items on each menu.
Each menu is either a menu, a submenu, or a shortcut menu. Each
menu item is usually either a command or a submenu caption. In
this chapter, the term <I>component</I> refers generically
to any menu or menu item.
<P>
<IMG SRC="00802.gif">
<P>
A menu bar is a bar at the top of the active window that displays
the names of all the menus that are available in that application
at any given time. That is, a Microsoft Office application can
change the menu bar it displays in response to a change in the
active window or in response to a Visual Basic instruction. For
example, when you edit a chart in Microsoft Excel, the menu bar
containing a set of menus that apply to the charting environment
is automatically displayed.
<P>
A menu is a list of menu items that appears (drops down) when
you click a menu name on the menu bar.
<P>
A submenu (or <I>child menu</I>) is a menu that's
attached to the side of another menu (the <I>parent menu</I>),
adjacent to a particular submenu caption on the parent menu. Each
submenu caption is marked with an arrowhead pointing to the right.
You can add submenus to menus or shortcut menus. A submenu is
displayed when you point to the corresponding submenu caption
on the parent menu.
<P>
A shortcut menu is a floating menu that contains a group of commands
pertinent to a specific task. A shortcut menu appears when the
user right&#173;clicks an object.
<P>
<FONT SIZE=4><B><A NAME="CH008H207">Guidelines for Customizing the Menu System</A>
</B></FONT>


<P>
<a name="dex10"></a>
<P>
You can modify the menu system in a Microsoft Office application
in a wide range of ways: you can create new menu bars, add new
menus to built&#173;in or custom menu bars, add new menu items
(commands or submenus) to built&#173;in or custom menus or submenus,
add and modify shortcut menus, and assign macros to menu items.
In addition, you can restore the built&#173;in menu system to
its default state at any time.
<P>
<FONT SIZE=3><B>Adding Custom Components or Modifying Built&#173;in Components
</B></FONT>


<P>
Each Microsoft Office application comes with its own built&#173;in
menu system. You can modify components of this built&#173;in system
or create and modify custom menu components.
<P>
Modifying a built&#173;in menu bar, menu, or menu item is appropriate
if you're adding or changing a small number of components. For
example, if you just want to provide menu access to a macro, you
can add a menu item to a built&#173;in menu and then link the
macro to that item.
<P>
If you need to make more extensive changes, you may be better
off creating a completely new component. For example, if you want
to add several new menus&nbsp;&#151; each of which will contain
several new menu items&nbsp;&#151; it may be more appropriate
to create an entirely new menu bar to contain the new menus.
<P>
<FONT SIZE=3><B>Using Submenus</B></FONT>


<P>
If your menus become crowded and difficult to scan, you can use
submenus to organize them more effectively and add clarity to
your Visual Basic application by reducing the amount of information
presented to the user at any one time. For example, suppose that
you create a menu that presents a number of options, as shown
in the following illustration.
<P>
<IMG SRC="00803.gif">
<P>
Using submenus, you can present the same items in either of the
ways shown in the following illustration.
<P>
<IMG SRC="00804.gif">
<P>
With submenus, the user can browse through commands that might
otherwise be available only through a series of custom dialog
boxes. However, if you need to create a complicated array of submenus
to present a set of commands, a dialog box may be a better solution.
<P>
<FONT SIZE=3><B>Using Shortcut Menus</B></FONT>


<P>
If you want to give the user access to a command that applies
only to the limited context of a selected object, you can add
the command to the built&#173;in shortcut menu for that object.
In Microsoft Access, you can also create custom shortcut menus
and associate them with objects in your application. For information
about creating and using custom shortcut menus in Access, see
Chapter&nbsp;1 in <I>Building Applications with Microsoft
Access&nbsp;97</I>.
<P>
<FONT SIZE=3><B>Using Text Boxes, List Boxes, and Combo Boxes</B></FONT>


<P>
Although it's possible to add built&#173;in or custom text boxes,
list boxes, and combo boxes to menus, shortcut menus, and submenus
in your Visual Basic application, such controls are better suited
to toolbars. Text boxes on menus can be useful in some instances
to display or return a simple setting. List boxes and combo boxes
also display the current setting when a menu is displayed. However,
as soon as the user selects a new value in the box, the menu is
closed (the user cannot see or revise the setting and must display
the menu again to verify it).
<P>
If you want to add built&#173;in text boxes, list boxes, and combo
boxes to menus, use the same techniques given for adding built&#173;in
commands (see "<A HREF="#CH008H211">Adding and Grouping Commands</A>" later in
this chapter). If you want to add custom text boxes, list boxes,
and combo boxes, use the same techniques given for adding them
to toolbars (see "<A HREF="#CH008H108">Design&#173;Time Modifications to Toolbars</A>"
later in this chapter).
<P>
<A NAME="CH008H105"></A>

</MENU></MENU></MENU>
<MENU>

<A NAME="CH008H105">
<FONT SIZE=5><B>Design&#173;Time Modifications to the Menu System</B></FONT>
</A>
<MENU><MENU>


<P>
Design&#173;time changes to the menu system are any changes you
make before the application runs. These include adding, deleting,
moving, and restoring menu components, as well as setting menu
component properties that won't change in response to changing
conditions at run time.
<P>
<FONT SIZE=4><B><A NAME="CH008H208">Adding a Custom Menu Bar</A></B></FONT>


<P>
<a name="dex11"></a>
<P>
If you want to design a set of menus that differs significantly
from what's currently available on the Office application's built&#173;in
menu bar or menu bars, you may need to create a new menu bar.
You can do this by using the <B>Customize</B> dialog box in Microsoft
Access, or by using Visual Basic in Microsoft Excel, Word, or
PowerPoint.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>

<P>
<a name="dex12"></a>
<P>
In Microsoft Access, the <B>Customize</B> dialog box provides
a convenient way to add a custom menu bar.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To add a menu bar in Microsoft  Access</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B> dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>On the <B>Toolbars</B> tab, click <B>New</B>.
<P>
<LI>In the <B>Toolbar name</B> box, type a name for the new menu bar, and then click <B>OK</B>.
<P>
An empty, floating menu bar with the name you typed is displayed.
<P>
<LI>Click <B>Properties</B> to display the <B>Toolbar Properties</B> dialog box.
<P>
<LI>In the <B>Type</B> box, click <B>Menu Bar</B>.
<P>
You can also set many other properties of your custom menu bar in the Toolbar Properties dialog box. For information about these properties and their uses, see Chapter&nbsp;1 in Building
Applications with Microsoft Access&nbsp;97.
<P>
</OL>

<P>
The new menu bar is added to the list of in the <B>Toolbars</B>
box on the <B>Toolbars</B> tab.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>
<P>
<a name="dex13"></a>
<P>
You use the <B>Add</B> method of the <B>CommandBars</B> collection
to create a new menu bar; the <I>MenuBar</I> argument
of the <B>Add</B> method determines whether the <B>CommandBar</B>
object you're creating can be displayed as a menu bar. The following
example creates a new menu bar named "Custom Menu Bar."

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set cstm = CommandBars.Add(Name:="Custom Menu Bar", Position:=msoBarTop, _
&nbsp;&nbsp;&nbsp; MenuBar:=True, Temporary:=False)

</code></pre></FONT>

<P>
In Microsoft Excel, Word, and PowerPoint, you must use Visual
Basic to create a new menu bar. In Microsoft Access, you have
the option of using either Visual Basic or the <B>Customize</B>
dialog box.
<P>
<FONT SIZE=4><B><A NAME="CH008H209">Adding Menus</A></B></FONT>


<P>
<a name="dex14"></a>
<P>
You can add a menu to any built&#173;in or custom menu bar. Because
a Microsoft Office application can display different built&#173;in
menu bars in different contexts, you may have to add a command
to more than one menu bar to make sure that the user has access
to the command regardless of the context. For example, in Microsoft
Excel, you might want to add a special Accounting menu to each
menu bar so that employees in a company can run the corresponding
macros from any sheet.
<P>
When you add a menu to a menu bar, you can specify an access key
for the menu; the access key appears underlined when the menu
is displayed.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Although
a Microsoft Office application may list toolbars that contain
shortcut menus on the Toolbars tab in the Customize dialog box,
you can neither add custom shortcut menus directly to these toolbars
nor delete built&#173;in shortcut menus from them. You can, however,
add items to, delete items from, or customize items on shortcut
menus. For information about customizing shortcut menus, see "<A HREF="#CH008H212">Adding and Modifying Shortcut Menus</A>" later in this section.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
The <B>Customize</B> dialog box provides a convenient way to add
a menu to a built&#173;in or custom menu bar.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
add a custom menu to a menu bar</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the menu bar you want to modify isn't visible, select the check
box next to the name of that menu bar in the <B>Toolbars</B> box
on the <B>Toolbars</B> tab.
<P>
<LI>On the <B>Commands</B>
tab, click <B>New Menu</B> in the <B>Categories</B> box.
<P>
<LI>Drag
the <B>New Menu</B> item from the <B>Commands</B> box to the position
on the menu bar where you want to add the menu.
<P>
An I&#173;beam on the menu bar indicates the position
where the new menu will be added when you release the mouse button.
<P>
<LI>Right&#173;click
the new menu, and then type a name in the <B>Name</B> box. Type
an ampersand (&amp;) before the character you want to use
as the access key for the menu.
<P>
</OL>

<P>
When you click the menu name, an empty menu is displayed. For
information about adding menu items to the new menu, see "<A HREF="#CH008H211">Adding and Grouping Commands</A>" later in this section.
<P>
The <B>Customize</B> dialog box also provides a quick way to add
a copy of any built&#173;in menu to a built&#173;in or custom
menu bar. You can customize the commands on the copy without affecting
the original built&#173;in menu.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
add a copy of a built&#173;in menu to a menu bar</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the menu bar you want to modify isn't visible, select the check
box next to the name of that menu bar in the <B>Toolbars</B> box
on the <B>Toolbars</B> tab.
<P>
<LI>On the <B>Commands</B>
tab, click <B>Built&#173;in Menus</B> in the <B>Categories</B>
box.
<P>
<LI>Drag a built&#173;in menu from the <B>Commands</B>
box to the position on the menu bar where you want to add the
copy.
<P>
An I&#173;beam on the menu bar indicates the position
where the menu will be added when you release the mouse button.
<P>
</OL>

<P>
<FONT COLOR="#0000FF"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;You
can also make a copy of any built&#173;in menu by displaying the
menu bar that contains that menu and holding down CTRL while you
drag the menu to another menu bar.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex15"></a>
<P>
Use the <B>Add</B> method of the <B>CommandBarControls</B> collection
to add a menu to a <B>CommandBar</B> object that represents a
particular menu bar. Setting the <I>Type</I> argument
of the <B>Add</B> method to <B>msoControlPopup</B> indicates that
the control you're adding displays a menu. Controls that display
menus are known as <I>pop&#173;up controls</I>. The
<I>Before</I> argument indicates the position of the
new menu among the existing menus on the menu bar. Set the <B>Caption</B>
property of the <B>CommandBarPopup</B> object returned by the
<B>Add</B> method to specify the menu name and the access key.
The following Microsoft Excel example adds a new menu named "Accounting"
to the left of the <B>Window</B> menu on the menu bar for worksheets.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set cstmAccounting = CommandBars("Worksheet Menu Bar").Controls _
&nbsp;&nbsp;&nbsp; .Add(Type:=msoControlPopup, Before:=9)
cstmAccounting.Caption = "&amp;Accounting"

</code></pre></FONT>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;You
use an ampersand (&amp;) in the menu name in front of the
character that will be used as the access key for the menu. After
you've added the menu, you can specify the menu name either with
or without the ampersand when you reference the menu using Controls(<I>index</I>).
<P>
<FONT SIZE=4><B><A NAME="CH008H210">Adding Submenus</A></B></FONT>


<P>
<a name="dex16"></a>
<P>
A submenu (child menu) is a menu attached to the side of another
menu (the parent menu), adjacent to a particular menu item (the
submenu caption). You can add submenus to menus, other submenus,
and shortcut menus.
<P>
Just as you display the items on a menu by clicking the menu name
on the menu bar, you display items on a submenu by pointing to
the submenu caption on the parent menu. Similarly, just as you
first add an empty menu (having a name but no menu items) to a
menu bar and then add individual menu items, you first add an
empty submenu to a parent menu and then add menu items.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
You use the <B>Customize</B> dialog box to add a submenu to another
menu.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
add a submenu to a menu</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the menu bar that contains the menu you want to modify isn't visible,
select the check box next to the name of that menu bar in the
<B>Toolbars</B> box on the <B>Toolbars</B> tab.
<P>
<LI>On
the <B>Commands</B> tab, click <B>New Menu</B> in the <B>Categories</B>
box.
<P>
<LI>Drag the <B>New Menu</B> item from the
<B>Commands</B> box to the position on the menu where you want
to add the submenu.
<P>
To indicate the position for the new submenu, drag
it over the menu name (and subsequent submenu captions, if necessary)
to open the menu or submenu you want, drag the new submenu to
the location where you want it on the menu or submenu, and then
release the mouse button. A horizontal I&#173;beam on the menu
indicates the position where the submenu will be added when you
release the mouse button.
<P>
<LI>Right&#173;click the
new submenu, and then type a name in the <B>Name</B> box. Type
an ampersand (&amp;) before the character you want to use
as the access key for the submenu.
<P>
</OL>

<P>
When you click the submenu caption, an empty submenu is displayed.
For information about adding menu items to the new submenu, see
"<A HREF="#CH008H211">Adding and Grouping Commands</A>" later in this section.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex17"></a>
<P>
Use the <B>Add</B> method of the <B>CommandBarControls</B> collection
to add a submenu to a <B>CommandBar</B> object that represents
another menu. Setting the <I>Type</I> argument of
the <B>Add</B> method to <B>msoControlPopup</B> indicates that
the control you're adding is a pop&#173;up control&nbsp;&#151;
the same kind of control that indicates a menu on a menu bar.
The <I>Before</I> argument indicates the position
of the new menu among the existing items on the menu. Set the
<B>Caption</B> property of the <B>CommandBarPopup</B> object returned
by the <B>Add</B> method to specify the submenu caption and the
access key. The following Microsoft Excel example adds a new submenu
named "Product" at the end of the Accounting menu on
the menu bar for worksheets.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set cstmAcctProduct = CommandBars("Worksheet Menu Bar").Controls("Accounting") _
&nbsp;&nbsp;&nbsp; .Controls.Add(Type:=msoControlPopup)
cstmAccProduct.Caption = "&amp;Product"

</code></pre></FONT>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;You
use an ampersand (&amp;) in front of the character in the
submenu caption that will be used as the access key for the submenu.
After you've added the submenu, you can specify the submenu name
either with or without the ampersand when you reference the submenu
by using Controls(index).
<P>
<FONT SIZE=4><B><A NAME="CH008H211">Adding and Grouping Commands</A></B></FONT>


<P>
<a name="dex18"></a>
<P>
You can add commands to any built&#173;in or custom menu or submenu,
modify their appearance, and visually separate them into logical
groupings. This section deals with adding commands to menus and
submenus. The following section addresses the specific issues
of adding shortcut menus and then adding menu items to them.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Although
you can add text boxes, list boxes, and combo boxes to menus and
submenus, they're not usually the best choice for presenting or
returning information. If you want to add custom text boxes, list
boxes, and combo boxes, use the same techniques given for adding
them to toolbars (see "<A HREF="#CH00H108">Design&#173;Time Modifications to
Toolbars</A>" later in this chapter).
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
<a name="dex19"></a>
<P>
The <B>Customize</B> dialog box provides an easy way to add items
to menus and submenus.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
add a built&#173;in command to a menu or submenu</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the menu bar that contains the menu you want to modify isn't visible,
select the check box next to the name of that menu bar in the
<B>Toolbars</B> box on the <B>Toolbars</B> tab.
<P>
<LI>On
the <B>Commands</B> tab, select a category of commands in the
<B>Categories</B> box.
<P>
The commands in the category you select are listed
in the Commands box.
<P>
<LI>Drag a command from the
<B>Commands</B> box to the position on the menu or submenu where
you want to add the command.
<P>
To indicate the position for the command, drag it
over the menu name (and subsequent submenu captions, if necessary)
to open the menu or submenu you want, drag the command to the
location where you want it on the menu or submenu, and then release
the mouse button. A horizontal I&#173;beam on the menu indicates
the position where the command will be added when you release
the mouse button.
<P>
</OL>

<P>
<FONT COLOR="#0000FF"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;You
can also make a copy of any built&#173;in command by displaying
the menu bar that contains a menu with that command and holding
down CTRL while you drag the command to another menu.
<P>
The <B>Customize</B> dialog box also provides a quick way to add
a custom command to a built&#173;in or custom menu bar. However,
each Microsoft Office application involves a different technique
for using the <B>Customize</B> dialog box to do this. The following
paragraphs describe these differences.
<P>
<B>Microsoft Access</B>&nbsp;&nbsp;&nbsp;To add a
menu item that runs a macro, follow the same steps as in the procedure
for adding a built&#173;in command to a menu. In the <B>Categories</B>
box, click <B>All Macros</B>. Drag the macro you want from the
<B>Commands</B> box to the position on the menu where you want
it to appear. To add a menu item that runs a <B>Function</B> procedure,
follow the same steps as in the procedure for adding a built&#173;in
command to a menu. In the <B>Categories</B> box, click any category,
and then drag any item you want to the position on the menu where
you want it to appear. Right&#173;click the item, and then click
<B>Control Properties</B> to display the <B>Control Properties</B>
dialog box. In the <B>Caption</B> box, delete the current name,
and then type a new name for your command. In the <B>On Action</B>
box, type an expression to run your Visual Basic <B>Function</B>
procedure. The expression must use the following syntax: =<I>functionname</I>().
<P>
<B>Microsoft Excel</B>&nbsp;&nbsp;&nbsp;Follow the
same steps as in the procedure for adding a built&#173;in command
to a menu; in the <B>Categories</B> box, click <B>Macros</B>,
and then drag <B>Custom Menu Item</B> from the <B>Commands</B>
box to the position on the menu where you want it to appear. Right&#173;click
the new item and then click <B>Assign Macro</B>. In the <B>Macro
Name</B> box in the <B>Assign Macro</B> dialog box, enter the
name of the macro you want to run.
<P>
<B>Microsoft Word</B>&nbsp;&nbsp;&nbsp;Follow the
same steps as in the procedure for adding a built&#173;in command
to a menu; in the <B>Categories</B> box, click <B>Macros</B>,
and then drag a macro from the <B>Commands</B> box to the position
on the menu where you want it to appear.
<P>
<FONT COLOR="#0000FF"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;In
Word, if you write a procedure whose name is the same as that
of a built&#173;in Word command (or if you write a procedure named
"MAIN" in a module whose name is the same as that of
a built&#173;in Word command), that procedure will replace the
built&#173;in functionality of the command whenever the module
that contains it is available. Every copy of the menu item on
whatever menu it appears will run the replacement procedure. For
more information about controlling the context of your customizations,
see "<A HREF="#CH008H102">Scope of Changes to the User Interface</A>" earlier
in this chapter. For more information about modifying Word commands,
see Chapter&nbsp;7, "<a href="007.htm">Microsoft Word Objects</A>."
<P>
<B>Microsoft PowerPoint</B>&nbsp;&nbsp;&nbsp;Follow
the same steps as in the procedure for adding a built&#173;in
command to a menu; in the <B>Categories</B> box, click <B>Macros</B>,
and then drag a macro from the <B>Commands</B> box to the position
on the menu where you want it to appear.
<P>
<B>Modifying the Appearance of a Command</B>


<P>
Any command on a menu can have a button image displayed next to
the command name. Whether a button image appears next to a command
is determined by its "style." You set a command's style
using commands on the shortcut menu while the <B>Customize</B>
dialog box is open. The following table describes the effect of
each style on menu commands.
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2><B>Style</B></FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2>What appears on a menu</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Default Style</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Button image and name</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Text Only (In Menus)</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Name only</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Text Only (Always)</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Name only</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Image And Text</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Button image and name</FONT>
</TD></TR><P>
</TABLE>
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;By
default, some built&#173;in menu commands don't have a button
image associated with them and won't display an image regardless
of the style you set. However, you can add an image to any built&#173;in
menu command.
<P>
While the <B>Customize</B> dialog box is open, you can add or
modify the button image next to a menu command. The following
table describes the techniques you can use.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2>To</FONT></B></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2>Do this</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Use a predefined button image</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the command, point to <B>Change Button Image</B>, and then click the image you want.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Copy and paste another command's button image</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the command that has the image you want to use, and then click <B>Copy Button Image</B>. Right&#173;click the command whose image you're customizing, and then click <B>Paste Button Image</B>. </FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Copy and paste an image from a graphics program</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>In a graphics program, open the image you want to copy. Select and copy the image (preferably a 16 x 16 pixel image or portion). Switch back to your application. Right&#173;click the command, and then click <B>Paste Button Image</B>.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Edit the command's current button image</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the command, and then click <B>Edit Button Image</B>. In the <B>Button Editor </B>dialog box, you can change the color and shape of the image, adjust the image's position on the control, and preview your changes to the image. When you finish editing the button image, click <B>OK</B>.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Reset a command to use its original button image (or no image)</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the command, and then click <B>Reset Button Image</B>.</FONT>
</TD></TR><P>
</TABLE>
<P>
<FONT COLOR="#0000FF"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;In
Microsoft Access, you can use the Properties dialog box to set
many other properties of menu commands. For more information,
see Chapter&nbsp;1 in <I>Building Applications with Microsoft Access&nbsp;97</I>.
<P>
<B>Grouping Commands</B>


<P>
You can group related commands on a menu by separating them with
lines. The lines themselves aren't menu items; rather, you can
set any item on a menu to appear with a line before it. You use
the <B>Customize</B> dialog box to set a command to appear as
the first item in a group of commands.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
begin a group of commands on a menu</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the menu bar that contains the menu you want to modify isn't visible,
select the check box next to the name of that menu bar in the
<B>Toolbars</B> box on the <B>Toolbars</B> tab.
<P>
<LI>Right&#173;click
the menu item you want to appear with a line above it, and then
click <B>Begin Group</B>.
<P>
The next time you right&#173;click that item, a check
mark will be displayed next to Begin Group on the shortcut menu.
To remove the line before a menu item, right&#173;click the item
and then click Begin Group again (the check mark will no longer
appear).
<P>
</OL>

<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex20"></a>
<P>
Use the <B>Add</B> method of the <B>CommandBarControls</B> collection
to add a new menu item to the <B>CommandBar</B> object that represents
a particular menu or submenu. To add a built&#173;in command,
specify the ID number of the command by using the <I>Id</I>
argument of the <B>Add</B> method. The following example adds
the <B>Spelling</B> command to the menu named "Quick Tools"
on the menu bar named "Custom Menu Bar."

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set mySpell = CommandBars("Custom Menu Bar").Controls("Quick Tools") _
&nbsp;&nbsp;&nbsp; .Controls.Add(Id:=2)

</code></pre></FONT>

<P>
For information about determining the built&#173;in command ID
numbers of a Microsoft Office application, see "Menu Item
and Toolbar Control IDs" later in this chapter.
<P>
To add a custom command, you add a new menu item and then set
the <B>OnAction</B> property to specify a Visual Basic procedure
to run whenever that item is clicked. Setting the <I>Type</I>
argument of the <B>Add</B> method to <B>msoControlButton</B> indicates
that a menu item is a command. The following Microsoft Excel example
adds an Open Database menu item to the <B>File</B> menu on the
menu bar for worksheets. Microsoft Excel runs the OpenDatabaseProc
Visual Basic procedure whenever the user clicks this menu item.
Open Database appears directly above the <B>Close</B> command
on the <B>File</B> menu.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set databaseItem = CommandBars("Worksheet Menu Bar").Controls("File") _
&nbsp;&nbsp;&nbsp; .Controls.Add(Type:=msoControlButton, Before:=3)
With databaseItem
&nbsp;&nbsp;&nbsp; .Caption:="Open Database"
&nbsp;&nbsp;&nbsp; .OnAction:="OpenDatabaseProc"
End With

</code></pre></FONT>


<A NAME="_Toc310146501">There are many properties of the objects that represent menu commands that you can set in Visual Basic to modify the appearance of commands. For more information, see "Style Property" and "FaceID Property" in Help, as well as the Help topics for other properties and methods of the <B>CommandBarButton</B> object.</A>


<P>
To set a menu item to begin a group of menu items (that is, to
be preceded by a line), you just set the <B>BeginGroup</B> property
of the <B>CommandBarButton</B>, <B>CommandBarPopup</B>, or <B>CommandBarComboBox</B>
object that represents the menu item to <B>True</B>. To remove
the line, set the <B>BeginGroup</B> property to <B>False</B>.
Use <B>Controls</B>(<I>index</I>), where <I>index</I>
is the caption or index number of a menu item, to return an object
that represents the item. The following example adds a line before
the Open Database command on the <B>File</B> menu (added by the
preceding example).

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set databaseItem = CommandBars("Worksheet Menu Bar").Controls("File") _
&nbsp;&nbsp;&nbsp; .Controls("Open Database")
databaseItem.BeginGroup = True

</code></pre></FONT>

<P>
<FONT SIZE=4><B><A NAME="CH008H212">Adding and Modifying Shortcut Menus</A>
</B></FONT>


<P>
<a name="dex21"></a>
<P>
You can add and modify custom shortcut menus by using the <B>Customize</B>
dialog box in Microsoft Access, or by using Visual Basic in Microsoft
Excel. In Microsoft Access, Word, and PowerPoint, you can modify
built&#173;in shortcut menus (and custom shortcut menus in Microsoft
Access) by using the <B>Customize</B> dialog box.
<P>
With Microsoft Access, you can assign custom shortcut menus to
reports, forms, and controls on forms; the assigned shortcut menu
is displayed whenever the user right&#173;clicks the corresponding
object. For information about working with shortcut menus in Microsoft
Access reports and forms, see Chapter&nbsp;1 in <I>Building
Applications with Microsoft Access&nbsp;97</I>.
<P>
Microsoft Excel provides an event&nbsp;&#151; BeforeRightClick&nbsp;&#151;
that you can respond to by modifying a built&#173;in shortcut
menu or displaying a custom shortcut menu.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Word
and PowerPoint don't provide a way to display a custom shortcut
menu when the user right&#173;clicks in the application window.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
<a name="dex22"></a>
<P>
In Microsoft Access, the <B>Customize</B> dialog box provides
a convenient way to add a custom shortcut menu.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
add a shortcut menu in Microsoft Access</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>On
the <B>Toolbars</B> tab, click <B>New</B>.
<P>
<LI>In
the <B>Toolbar name</B> box, type a name for the new shortcut
menu, and then click <B>OK</B>.
<P>
An empty, floating toolbar with the name you typed
is displayed.
<P>
<LI>Click <B>Properties</B> to display
the <B>Toolbar Properties</B> dialog box.
<P>
<LI>In
the <B>Type</B> box, click <B>Shortcut Menu</B>.
<P>
The empty, floating toolbar is no longer displayed.
To display the shortcut menu from the Customize dialog box, click
the Toolbars tab, and then select the check box next to Shortcut
Menus in the Toolbars box. The toolbar that contains all the shortcut
menus is displayed; the shortcut menu you just created appears
on the last menu on the toolbar.
<P>
</OL>

<P>
In Microsoft Access, Word, and PowerPoint, you can modify built&#173;in
shortcut menus by using the <B>Customize</B> dialog box. (In Microsoft
Access, you can also modify custom shortcut menus in this way.)
To add a submenu to a shortcut menu, follow the same steps as
are given in "Adding Submenus" earlier in this section.
To add a command, follow the same steps as are given in "Adding
and Grouping Commands" earlier in this section. Remember
to select the check box next to <B>Shortcut Menus</B> in the <B>Toolbars</B>
box to display a toolbar that contains all the shortcut menus
that are available while the <B>Customize</B> dialog box is open.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex23"></a>
<P>
You use the <B>Add</B> method of the <B>CommandBars</B> collection
to create a new shortcut menu; setting the <I>Position</I>
argument of the <B>Add</B> method to <B>msoBarPopup</B> indicates
that the <B>CommandBar</B> object you're creating can be displayed
as a shortcut menu. The following example creates a new shortcut
menu named "Shortcuts1."

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set cstm = CommandBars.Add(Name:="Shortcuts1", Position:=msoBarPopup, _
&nbsp;&nbsp;&nbsp; MenuBar:=False, Temporary:=False)

</code></pre></FONT>

<P>
In Microsoft Excel, Word, and PowerPoint, you must use Visual
Basic to create a new shortcut menu. In Microsoft Access, you
have the option of using either Visual Basic or the <B>Customize</B>
dialog box.
<P>
To modify a custom or built&#173;in shortcut menu in any Microsoft
Office application by using Visual Basic, you use the same techniques
as are described earlier in this section for using Visual Basic
to add submenus or commands to a menu. You use <B>CommandBars</B>(<I>name</I>),
where <I>name</I> is the name of a shortcut menu,
to return a <B>CommandBar</B> object that represents that shortcut
menu. Then you can add or modify the elements of the <B>Controls</B>
collection available from that <B>CommandBar</B> object.
<P>
<FONT SIZE=4><B><A NAME="CH008H213">Deleting Menu Components</A></B></FONT>


<P>
<a name="dex24"></a>
<P>
You can delete built&#173;in or custom items from menus, you can
delete built&#173;in or custom menus from menu bars, and you can
delete custom menu bars. Note, however, that although you can
delete all the items on shortcut menus and built&#173;in menu
bars, you cannot delete the shortcut menus or built&#173;in menu
bars themselves.
<P>
Deleting built&#173;in menu components can help you tailor your
Visual Basic application to the needs of the user. For example,
you might want to delete a built&#173;in command from a menu and
replace it with a custom version of the command that performs
specialized tasks for the user. Or you might want to remove certain
menu items to simplify the interface or reduce the possibility
that inexperienced users will choose commands you didn't intend
for them to use.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;You
can restore built&#173;in menu bars, menus, or menu items that
you've deleted. However, you cannot restore custom menu bars,
menus, or menu items that you've deleted; you must re&#173;create
them.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
<a name="dex25"></a>
<P>
With the <B>Customize</B> dialog box open, you can delete any
menu component.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
delete a menu system component</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the menu bar that contains the menu component you want to delete
isn't visible, select the check box next to the name of that menu
bar in the <B>Toolbars</B> box on the <B>Toolbars</B> tab.
<P>
<LI>Right&#173;click
the menu component you want to delete, and then click <B>Delete</B>
on the shortcut menu.
<P>
</OL>

<P>
To delete an entire custom menu bar, open the <B>Customize</B>
dialog box, click the name of the menu bar in the <B>Toolbars</B>
box on the <B>Toolbars</B> tab, and then click the <B>Delete</B>
button. You cannot delete built&#173;in menu bars.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex26"></a>
<P>
Use the <B>Delete</B> method to delete a custom menu bar, a custom
or built&#173;in drop&#173;down menu or submenu, or a custom or
built&#173;in menu item. You cannot delete a built&#173;in menu
bar or a shortcut menu.
<P>
The following Microsoft Excel example deletes the <B>Edit</B>
menu from the menu bar for charts.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Chart Menu Bar").Controls("Edit").Delete

</code></pre></FONT>
<P>
The following example deletes the custom menu bar named "Custom
Menu Bar."

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Custom Menu Bar").Delete

</code></pre></FONT>
<P>
For information about restoring built&#173;in menu components
that you've deleted, see the following section.
<P>
<FONT SIZE=4><B><A NAME="CH008H214">Restoring Built&#173;in Menu Components</A>
</B></FONT>


<P>
<a name="dex27"></a>
<P>
You can restore built&#173;in menu bars, menus, or menu items
that you've deleted. However, you cannot restore custom menu bars,
menus, or menu items that you've deleted; you must re&#173;create
them.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
<a name="dex28"></a>
<P>
You can use the <B>Customize</B> dialog box to restore a built&#173;in
menu or submenu to once again contain its original, built&#173;in
set of menu items. Note that if you restore a menu, all the submenus
on that menu are restored. Likewise, if you restore a built&#173;in
menu bar, all the menus and submenus on that menu bar are restored.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
restore a built&#173;in menu</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the menu bar that contains the menu you want to restore isn't
visible, select the check box next to the name of that menu bar
in the <B>Toolbars</B> box on the <B>Toolbars</B> tab.
<P>
<LI>Right&#173;click
the menu or submenu you want to delete, and then click <B>Restore</B>
on the shortcut menu.
<P>
</OL>

<P>
To restore a built&#173;in menu bar, open the <B>Customize</B>
dialog box, click the name of the menu bar in the <B>Toolbars</B>
box on the <B>Toolbars</B> tab, and then click the <B>Restore</B>
button.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex29"></a>
<P>
Use the <B>Reset</B> method to reset the components of a built&#173;in
menu bar, menu, or submenu.
<P>
The following Microsoft Excel example resets the <B>Edit</B> menu
on the menu bar for charts.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Chart Menu Bar").Controls("Edit").Reset

</code></pre></FONT>
<P>
The following Word example resets the built&#173;in menu bar.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Menu Bar").Reset

</code></pre></FONT>

<P>
</MENU></MENU></MENU>
<A NAME="CH008H106"></A><MENU>


<A NAME="CH008H106">
<FONT SIZE=5><B>Run&#173;Time Modifications to the Menu System</B></FONT></A>
<MENU><MENU>


<P>
<a name="dex30"></a>
<P>
You can program the menu system you created at design time to
respond dynamically to changing conditions at run time. You can
replace the default menu bar with a custom menu bar that you've
designed. If a particular menu item is an inappropriate choice
in certain contexts, you can remove it, hide it, or disable it
to prevent the user from selecting it (disabling a menu item is
also called <I>dimming </I>the menu item, or making
it gray). If a menu item represents an option with two possible
states, you can make the command's button image appear pushed
down to show that the option is turned on or appear flat to show
that it's turned off. Finally, you might want to rename a menu
item in response to current conditions. For example, in Microsoft
Excel, clicking the <B>Freeze Panes</B> command on the <B>Windows</B>
menu causes the command to be renamed <B>Unfreeze Panes</B>.
<P>
Note that although you can make design&#173;time changes to the
menu system by using either the <B>Customize</B> dialog box or
Visual Basic, you must use Visual Basic to make any run&#173;time
changes.
<P>
<FONT SIZE=4><B><A NAME="CH008H215">Displaying a Custom Menu Bar</A></B></FONT>


<P>
<a name="dex31"></a>
<P>
To display a custom menu bar instead of the active menu bar, you
set the <B>Visible</B> property of a <B>CommandBar</B> object
that represents that custom menu bar to <B>True</B>. (For information
about creating a menu bar that can replace the active menu bar,
see "<A HREF="#CH008H208">Adding a Custom Menu Bar</A>" earlier in this chapter.)
The newly visible menu bar replaces the active menu bar automatically.
You set the <B>Visible</B> property to <B>False</B> to display
the default menu bar again when your Visual Basic application
finishes running.
<P>
Whenever a user starts a Microsoft Office application, the default
menu bar is displayed. In Word, you can replace the default menu
bar with a custom menu bar at startup&nbsp;&#151; the last
menu bar that was visible when the Normal template was saved before
quitting is the default menu bar when Word is started again. You
can also set the <B>Visible</B> property of a menu bar to <B>True</B>
in an Open event procedure to replace the default menu bar. In
Microsoft Excel and PowerPoint, you must use an event procedure
or a macro to replace the default menu bar.
<P>
For information about specifying form, report, and global menu
bars in Microsoft Access, see Chapter&nbsp;1 in <I>Building
Applications with Microsoft Access&nbsp;97</I>.
<P>
<FONT SIZE=4><B><A NAME="CH008H216">Displaying Menu Components Dynamically</A>
</B></FONT>


<P>
<a name="dex32"></a>
<P>
If a menu component applies only to a particular document, it's
best if that menu component appears only when that document is
active; this reduces needless clutter in the interface. You can
limit the lifetime of a given menu component to the period during
which the document it applies to is open or active.
<P>
If you want a menu or menu item to appear only for a specific
document, you can set the <B>Visible</B> property to make the
component visible every time the user activates the document,
and hide it every time the user deactivates the document. If you
want to associate a menu bar with a specific document, you can
set the <B>Visible</B> property to make the menu bar appear whenever
the user activates the document and then hide the menu bar whenever
the user deactivates the document, rather than actually adding
or deleting the menu bar each time.
<P>
To display menu components dynamically, you write the appropriate
event procedure that enables the component or makes it visible,
and you write the event procedure that disables the component
or hides it. If the application whose menu bars you're modifying
doesn't support events, you cannot customize the interface dynamically.
An alternative in these applications is to assign similar procedures
to the <B>OnAction</B> property of other menu items or toolbar
buttons. If your application supports embedding ActiveX controls,
you can also modify the interface of the container application
in response to an event supported by that control.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Because
Word stores customizations in documents and templates, custom
menu components are visible when the document or template is available
in the current context, and they're hidden when the document or
template isn't available. In contrast, because Microsoft Excel
stores customizations at the workspace level, you need to use
the Visible property in event code to dynamically change the interface.
<P>
<FONT SIZE=4><B><A NAME="CH008H217">Enabling or Disabling Menu Components</A>
</B></FONT>


<P>
<a name="dex33"></a>
<P>
If you want to prevent the user from choosing a particular menu
item under certain conditions, you can disable it. A disabled
command still appears on the menu, but it appears dimmed and doesn't
respond to user actions. Use the <B>Enabled</B> property to enable
or disable a menu item. The <B>Enabled</B> property is <B>True</B>
if the menu item is enabled, and it's <B>False</B> if the menu
item is disabled (you cannot set the <B>Enabled</B> property for
a built&#173;in menu item). The following Microsoft Excel example
adds the Open Database command to the <B>File</B> menu on the
menu bar for worksheets and then disables the Open Database command.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Worksheet Menu Bar").Controls("File") _
&nbsp;&nbsp;&nbsp; .Controls.Add("Open Database").Enabled = False

</code></pre></FONT>


<P>
If you want to disable all the commands on a particular menu,
you can disable the menu itself. This effectively disables all
the commands on the menu, as the user no longer has access to
them. The following Microsoft Excel example disables the entire
<B>File</B> menu on the menu bar for worksheets.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Worksheet Menu Bar").Controls("File").Enabled = False

</code></pre></FONT>


<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;You
can disable all the menu items on a submenu, but you cannot disable
the submenu itself.
<P>
<FONT SIZE=4><B><A NAME="CH008H218">Indicating the State of a Menu Item</A>
</B></FONT>


<P>
<a name="dex34"></a>
<P>
If a menu item represents an option that has only two possible
states, you can make the button image next to the item appear
pushed down or appear flat to indicate the current state of the
option. The appearance should be changed to the opposite of its
current appearance&nbsp;&#151; and the option turned on or
off, accordingly&nbsp;&#151; each time the user clicks the
menu item. You change the appearance by setting the <B>State</B>
property of the menu item.
<P>
To see how this works, suppose that the Microsoft Excel procedure
in the following example is assigned to the custom menu item Database
on the <B>View</B> menu on the menu bar for worksheets. This menu
item offers the user the option of viewing a worksheet either
in database view or in worksheet view. Every time the user clicks
the Database menu item, the procedure switches the button image
next to the menu item between appearing pushed down and appearing
flat (that is, the procedure sets the <B>State</B> property and
then switches views).

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub DatabaseView()
&#09;With CommandBars("Worksheet Menu Bar").Controls("View").Controls("Database")
&#09;If .State = msoButtonUp Then
&#09;&#09;.State = msoButtonDown
&#09;&#09;'Switch to database view
&#09;Else
&#09;&#09;.State = mosButtonUp
&#09;&#09;'Switch to worksheet view
&#09;End If
&#09;End With
End Sub

</code></pre></FONT>


<P>
Every built&#173;in and custom menu item has text and a button
image; many built&#173;in menu items have blank button images.
When you add an item to a menu by using the <B>Customize</B> dialog
box, you can specify and modify the item's button image. At run
time, you set the menu item's <B>FaceId</B> property to specify
the button image you want to display next to the menu item when
its state changes. To specify the button image you want to display
next to a menu item, you must find the built&#173;in command with
that button image, determine its ID, and then assign that value
to the <B>FaceId</B> property. (Changing the <B>FaceId</B> property
of a menu item doesn't change its functionality.) For information
about determining the built&#173;in command ID numbers of a Microsoft
Office application, see "<A HREF="#CH008H110">Menu Item and Toolbar Control IDs</A>" later in this chapter.
<P>
The following Microsoft Excel example not only switches the state
of the button image next to the menu item, but it changes the
image as well. When the user switches to database view, the button
image is switched to a grid (ID 987). Likewise, when the user
switches out of database view, the image is set to a blank face
(ID 1).

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub DatabaseView()
&#09;With CommandBars("Worksheet Menu Bar").Controls("View").Controls("Database")
&#09;If .State = msoButtonUp Then
&#09;&#09;.FaceId = 987
&#09;&#09;.State = msoButtonDown
&#09;&#09;'Switch to database view
&#09;Else
&#09;&#09;.FaceId = 1
&#09;&#09;.State = mosButtonUp
&#09;&#09;'Switch to worksheet view
&#09;End If
&#09;End With
End Sub

</code></pre></FONT>


<P>
<FONT SIZE=4><B><A NAME="CH008H219">Renaming a Menu Item</A></B></FONT>


<P>
<a name="dex35"></a>
<P>
You can use the <B>Caption</B> property of a menu item to change
the item's name in response to changing conditions in your Visual
Basic code. Suppose, for example, that you've created a menu command
that opens a database. After the user has opened a database, you
may want to replace the original command with a command that closes
the database. The following example shows how you can accomplish
this.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("MyMenubar").Controls("File").Controls("Open Database") _
&#09;.Caption = "Close &amp;Database"

</code></pre></FONT>


<P>
When you rename a menu item this way, make sure that the other
procedures in your application reference the menu item by its
new name (Close Database, in this example).
<P>
You can also use variables to refer to a menu item. An advantage
of this technique is that variables continue to work even if the
item's caption changes. The following example sets a variable
to the Open Database menu item.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set openData = CommandBars("My Menubar").Controls _
&#09;("File").Controls("Open Database")

</code></pre></FONT>


<P>
You can change the caption later by using the code in the following
example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>openData.Caption = "Close &amp;Database"

</code></pre></FONT>

<P>
<A NAME="CH008H107"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH008H107">Toolbars</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex36"></a>
<P>
Each Microsoft Office application provides a system of toolbars
containing toolbar controls that the user can click to gain access
to frequently used commands. Each toolbar can appear docked at
the top, at the bottom, or on either the left or right side of
the application window, or as a floating window positioned anywhere
in the workspace. Each toolbar control is a simple, graphical
control with which the user can exchange information with your
Visual Basic application. To display any toolbar in an Office
application, point to <B>Toolbars</B> on the <B>View</B> menu,
and then click the name of the toolbar you want to display. To
see additional available toolbars, open the <B>Customize</B> dialog
box and browse through the toolbars listed in the <B>Categories</B>
box.
<P>
There are several types of controls that are classified as toolbar
controls; these are discussed in the following paragraphs.
<P>
The most common type of toolbar button is a simple button control
that contains a graphic. The graphic, called the <I>button
image</I>, is a visual representation of the command or
option that the toolbar button activates. The user can click one
of these toolbar buttons to execute a command (for example, clicking
the <B>New</B> button on the <B>Standard</B> toolbar creates a
new document) or to alternate between the two possible states
of an option represented by a button (for example, clicking the
<B>Bold</B> button on the <B>Formatting</B> toolbar alternately
applies bold formatting to and removes it from the selected text).
<P>
Another type of toolbar control is a button control that contains
a graphic and an attached drop&#173;down palette. The user clicks
the drop&#173;down arrow to display a palette and then clicks
an option on the palette. The user clicks the button control to
apply the current option. For example, in Microsoft Excel, clicking
the drop&#173;down arrow for the <B>Font Color</B> button displays
a palette of font colors from which the user can choose. Clicking
this toolbar control's button applies the indicated color to the
selected text.
<P>
A text box, list box, or combo box can also be a toolbar control.
The user either types text in the box or clicks the drop&#173;down
arrow and then clicks an item in the list. For example, on the
<B>Formatting</B> toolbar, you can set the font size for the selected
text either by clicking an item in the drop&#173;down list box
contained in the <B>Font Size</B> button or by typing an entry
in the text box.
<P>
The last type of toolbar control is the pop&#173;up control, which
displays a menu of other controls. A pop&#173;up control on a
toolbar is essentially the same as a menu name on a menu bar.
The <B>Draw</B> button on the <B>Drawing</B> toolbar in Microsoft
Excel, Word, or PowerPoint is an example of a pop&#173;up control.
<P>
<A NAME="CVofhowcbrdoc001018"><FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Although
they share similar appearances and behavior, toolbar controls
and ActiveX controls aren't the same. You cannot add ActiveX controls
to toolbars, and you cannot add toolbar controls to documents
or forms.</A>
<P>
Now that you understand what toolbars and the various types of
toolbar controls are, you can study the specifics of modifying
the toolbars and toolbar controls described in the preceding paragraphs.
In the following sections, you'll learn how to make design&#173;time
and run&#173;time changes to toolbars and toolbar controls.
<P>
<FONT SIZE=4><B><A NAME="CH008H220">Guidelines for Customizing Toolbars</A>
</B></FONT>


<P>
<a name="dex37"></a>
<P>
The Microsoft Office applications offer you a wide range of ways
to modify the built&#173;in toolbars to better serve the needs
of the user. You can create new toolbars; add new toolbar buttons
to built&#173;in or custom toolbars; modify the image on a toolbar
button face; and assign macros, ToolTip text, and status bar text
to toolbar buttons.
<P>
Whether you modify a built&#173;in toolbar or create a new one
depends on the extent of the changes you want to make. Modifying
a built&#173;in toolbar makes sense if you're adding or changing
only a few toolbar buttons; creating a new toolbar may be more
convenient if you want to provide an entirely different assortment
of commands than are found on any of the built&#173;in toolbars,
or if you want to present a number of custom toolbar buttons as
a distinct group. Regardless of how many changes you make, you
can restore the built&#173;in menu system to its default state
whenever you want.
<P>
In addition to the above changes, which are usually made at design
time, you can use Visual Basic procedures to change the properties
of toolbars and toolbar buttons in response to user input while
your application is running (that is, at run time). For example,
you can hide a toolbar when the user no longer needs it, move
or resize a toolbar to keep it out of the user's way, disable
a toolbar button to prevent the user from clicking it at an inappropriate
time, or switch the appearance of a toolbar button between pushed
down and flat every time the user clicks it.
<P>
<FONT SIZE=3><B>Using Menus</B></FONT>


<P>
You can add pop&#173;up controls&nbsp;&#151; the same controls
that display menus on menu bars and submenus on menus&nbsp;&#151;
to any built&#173;in or custom toolbar. Often, adding a menu to
a toolbar is a useful compromise between customizing a built&#173;in
menu bar (which may not be as convenient as adding toolbar controls)
and adding a cumbersome number of toolbar controls (some of which
may be dropped from a wide toolbar that's docked). The <B>Draw</B>
button on the <B>Drawing</B> toolbar in Microsoft Excel, Word,
or PowerPoint is an example of a menu on a toolbar.
<P>
To add menus, submenus, and menu items to toolbars, use the same
steps as were presented for adding such components to menu bars
in "<A HREF="#CH008H105">Design&#173;Time Modifications to the Menu System</A>"
earlier in this chapter.
<P>
<FONT SIZE=3><B>Using Text Boxes, List Boxes, and Combo Boxes</B></FONT>


<P>
In the Microsoft Office applications, you can add text boxes,
list boxes, and combo boxes to built&#173;in and custom toolbars.
These controls can be useful for getting information from a user
frequently, or for running a complex procedure that can use the
value of the control to determine a range of possible results.
<P>
The <B>Customize</B> dialog box supports adding built&#173;in
text boxes, list boxes, and combo boxes to any toolbar, but it
doesn't support adding custom ones; instead, you must use Visual
Basic to add and design these controls. With the <B>Customize</B>
dialog box open, you can change the width of any built&#173;in
or custom text box, list box, or combo box.
<P>
<A NAME="CH008H108"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5><B><A NAME="CH008H108">Design&#173;Time Modifications to Toolbars</A></B></FONT>
<MENU><MENU>

<P>
Design&#173;time changes include creating a new toolbar; adding
new or built&#173;in toolbar controls to a toolbar; deleting toolbar
controls from a toolbar; grouping or ungrouping toolbar controls;
and changing the width of text box, list box, and combo box toolbar
controls. You can also select a new image or use the Button Editor
to customize the image associated with a particular toolbar control.
<P>
<FONT SIZE=4><B><A NAME="CH008H221">Adding a Custom Toolbar</A></B></FONT>


<P>
<a name="dex38"></a>
<P>
In many cases, you can present a new set of commands by adding
custom toolbar controls to a built&#173;in toolbar. But if you
want to present a complete set of commands in an easily accessible
form, distinct from all built&#173;in commands, you can create
a new toolbar. You do this by using either the <B>Customize</B>
dialog box or Visual Basic.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>
<P>
<a name="dex39"></a>
<P>
The <B>Customize</B> dialog box provides a convenient way to add
a custom toolbar.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
add a toolbar</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>On
the <B>Toolbars</B> tab, click <B>New</B>.
<P>
<LI>In
the <B>Toolbar name</B> box, type a name for the new toolbar,
and then click <B>OK</B>.
<P>
An empty, floating toolbar with the name you typed
is displayed.
<P>
</OL>

<P>
The new toolbar is added to the list in the <B>Toolbars</B> box
on the <B>Toolbars</B> tab.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex40"></a>
<P>
You use the <B>Add</B> method of the <B>CommandBars</B> collection
to create a new toolbar; setting the <I>Position</I>
argument of the <B>Add</B> method to <B>msoBarLeft</B>, <B>msoBarTop</B>,
<B>msoBarRight</B>, <B>msoBarBottom</B>, or <B>msoBarFloating</B>
indicates whether the <B>CommandBar</B> object you're creating
is a floating toolbar or a docked toolbar. The following example
creates and displays a new toolbar named "Custom Tools."

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set cstm = CommandBars.Add(Name:="Custom Tools", Position:=msoBarFloating, _
&nbsp;&nbsp;&nbsp; MenuBar:=False, Temporary:=False)
cstm.Visible = True

</code></pre></FONT>

<P>
<FONT SIZE=4><B><A NAME="CH008H222">Adding and Grouping Controls</A></B></FONT>


<P>
<a name="dex41"></a>
<P>
You can add controls to any built&#173;in or custom toolbar, and
you can visually separate them (with lines) into logical groupings.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
<a name="dex42"></a>
<P>
The <B>Customize</B> dialog box provides an easy method for adding
controls to toolbars.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
add a built&#173;in control to a toolbar</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the toolbar you want to modify isn't visible, select the check
box next to the name of that toolbar in the <B>Toolbars</B> box
on the <B>Toolbars</B> tab.
<P>
<LI>On the <B>Commands</B>
tab, click a category of commands in the <B>Categories</B> box.
<P>
The commands in the category you select are now listed
in the Commands box.
<P>
<LI>Drag a control from the
<B>Commands</B> box to the position on the menu where you want
to add the control.
<P>
A vertical I&#173;beam on the toolbar indicates the
position where the control will be added when you release the
mouse button.
<P>
</OL>

<P>
<FONT COLOR="#0000FF"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;You
can easily make a copy of any built&#173;in toolbar control by
displaying the toolbar that contains that control and holding
down CTRL while you drag the control to another toolbar.
<P>
The <B>Customize</B> dialog box also provides a quick way to add
a custom command to a built&#173;in or custom toolbar. However,
each Microsoft Office application has a different technique for
using the <B>Customize</B> dialog box to do this. The following
paragraphs describe these differences.
<P>
<B>Microsoft Access</B>&nbsp;&nbsp;&nbsp;To add a
control that runs a macro, follow the same steps as in the procedure
for adding a built&#173;in control to a toolbar. In the <B>Categories</B>
box, click <B>All Macros</B>. Drag the macro you want from the
<B>Commands</B> box to the position on the toolbar where you want
it to appear. To add a control that runs a <B>Function</B> procedure,
follow the same steps as in the procedure for adding a built&#173;in
control to a toolbar. In the <B>Categories</B> box, click any
category and drag any item you want to the position on the toolbar
where you want it to appear. Right&#173;click the control, and
then click <B>Control Properties</B> to open the <B>Control Properties</B>
dialog box. In the <B>Caption</B> box, delete the current name,
and then type the new name for your control. In the <B>On Action</B>
box, type an expression to run your Visual Basic <B>Function</B>
procedure. The expression must use the following syntax: =<I>functionname</I>().
<P>
<B>Microsoft Excel</B>&nbsp;&nbsp;&nbsp;Follow the
same steps as in the procedure for adding a built&#173;in control
to a toolbar; in the <B>Categories</B> box, click <B>Macros</B>,
and then drag the <B>Custom Button</B> control from the <B>Commands</B>
box to the position on the toolbar where you want the control
to appear. Right&#173;click the new control, and then click <B>Assign
Macro</B>. In the <B>Assign Macro</B> dialog box, select the macro
you want to run. Use the commands on the shortcut menu to change
the image of the control.
<P>
<B>Microsoft Word</B>&nbsp;&nbsp;&nbsp;Follow the
same steps as in the procedure for adding a built&#173;in control
to a toolbar; in the <B>Categories</B> box, click <B>Macros</B>,
and then drag a macro from the <B>Commands</B> box to the position
on the toolbar where you want the control to appear. Use the commands
on the shortcut menu for the new control to change the control's
name, image, and other display properties.
<P>
<FONT COLOR="#0000FF"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;In
Word, if you write a procedure whose name is the same as that
of a built&#173;in Word control (or if you write a procedure named
"MAIN" in a module whose name is the same as that of
a built&#173;in Word command), that procedure will replace the
built&#173;in functionality of the control whenever the module
that contains it is available in the current context. Every copy
of the control on whatever toolbar it appears will run the replacement
procedure. For more information about controlling the context
of your customizations, see "<A HREF="#CH008H102">Scope of Changes to the User Interface</A>" earlier in this chapter. For more information
about modifying Word commands, see Chapter&nbsp;7, "<a href="007.htm">Microsoft
Word Objects</A>."
<P>
<B>Microsoft PowerPoint</B>&nbsp;&nbsp;&nbsp;Follow
the same steps as in the procedure for adding a built&#173;in
control to a toolbar; in the <B>Categories</B> box, click <B>Macros</B>,
and then drag a macro from the <B>Commands</B> box to the position
on the toolbar where you want it to appear. Use the commands on
the shortcut menu for the new control to change the control's
name, image, and other display properties.
<P>
<B>Modifying the Appearance of a Toolbar Button</B>


<P>
<a name="dex43"></a>
<P>
The face of a button on a toolbar can be either the button image
alone, the button name alone, or the button image displayed next
to the name. Whether a button appears with just an image, just
a name, or both is determined by its "style." You set
a button's style using commands on the shortcut menu while the
<B>Customize</B> dialog box is open. The following table describes
the effect of each style on toolbar buttons.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2><B>Style</B></FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2>What appears on a toolbar button</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Default Style</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Button image only</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Text Only (In Menus)</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Button image only</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Text Only (Always)</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Name only</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Image And Text</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Button image and name</FONT>
</TD></TR><P>
</TABLE>
<P>
While the <B>Customize</B> dialog box is open, you can add or
modify the image on a toolbar button. The following table describes
the techniques you can use.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2>To</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2>Do this</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Use a predefined image</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the button, point to <B>Change Button Image</B>, and then click the image you want.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Copy and paste another button's image</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the button that has the image you want to use, and then click <B>Copy Button Image</B>. Right&#173;click the button whose image you're customizing, and then click <B>Paste Button Image</B>. </FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Copy and paste an image from a graphics program</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Open the image you want to copy in a graphics program. Select and copy the image (preferably a 16 x 16 pixel image or portion). Switch back to your application. Right&#173;click the button, and then click <B>Paste Button Image</B>.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Edit the button's current image</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the button, and then click <B>Edit Button Image</B>. In the <B>Button Editor </B>dialog box, you can change the color and shape of the image, adjust the image's position on the button, and preview your changes to the image. When you finish editing the image, click <B>OK</B>.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Reset a button to use its original image</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Right&#173;click the button, and then click <B>Reset Button Image</B>.</FONT>
</TD></TR><P>
</TABLE>
<P>
<FONT COLOR="#0000FF"><B>Tip</B></FONT>&nbsp;&nbsp;&nbsp;In
Microsoft Access, you can use the Properties dialog box to set
many other properties of menu commands. For more information,
see Chapter&nbsp;1 in <I>Building Applications with Microsoft Access&nbsp;97</I>.
<P>
<B>Grouping Controls</B>


<P>
You can separate groups of related controls on a toolbar, using
lines. The lines themselves aren't controls; rather, you can set
each control on a toolbar to appear with a line before it. Use
the <B>Customize</B> dialog box to set a command to appear as
the first control in a group of controls.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
begin a group of buttons on a toolbar</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If
the toolbar that contains the control you want to modify isn't
visible, select the check box next to the name of that toolbar
in the <B>Toolbar</B> box on the <B>Toolbars</B> tab.
<P>
<LI>Right&#173;click
the control you want to appear with a line before it, and then
click <B>Begin Group</B>.
<P>
The next time you right&#173;click that control, a
check mark will be displayed next to Begin Group on the shortcut
menu. To remove the line before a control, right&#173;click the
control and then click Begin Group again (the check mark will
no longer appear).
<P>
</OL>

<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>

<P>
<a name="dex44"></a>
<P>
Use the <B>Add</B> method of the <B>CommandBarControls</B> collection
to add a new control to the <B>CommandBar</B> object that represents
a particular toolbar. To add a built&#173;in control, you specify
the ID number of the control by using the <I>Id</I>
argument of the <B>Add</B> method. The following example adds
the <B>Spelling</B> control to the toolbar named "Quick Tools."

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set mySpell = CommandBars("Quick Tools").Controls.Add(Id:=2)

</code></pre></FONT>
<P>
For information about determining the built&#173;in command ID
numbers of an Office application, see "<A HREF="#CH008H110">Menu Item and Toolbar Control IDs</A>" later in this chapter.
<P>
To add a custom control, you add a new control and then set the
<B>OnAction</B> property to specify a Visual Basic procedure to
run whenever that control is clicked. Setting the <I>Type</I>
argument of the <B>Add</B> method to <B>msoControlButton</B> indicates
that a control is a button. Set the <B>FaceId</B> value of the
control to the ID of a built&#173;in control whose face you want
to copy. The following Microsoft Excel example adds a button before
the <B>Save</B> button on the <B>Standard</B> toolbar. Microsoft
Excel runs the OpenDatabaseProc Visual Basic procedure whenever
the user clicks the menu item. The example also sets the image
on the button to a grid (ID 987).

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set databaseItem = CommandBars("Standard").Controls. _
&nbsp;&nbsp;&nbsp; Add(Type:=msoControlButton, Before:=3)
With databaseItem
&nbsp;&nbsp;&nbsp; .OnAction:="OpenDatabaseProc"
&nbsp;&nbsp;&nbsp; .FaceId = 987
End With

</code></pre></FONT>


<P>
There are many properties of the objects that represent toolbar
buttons that you can set in Visual Basic to modify the appearance
of a control. For more information, see "Style Property"
and "FaceID Property" in Help, as well as the Help topics
for other properties and methods of the <B>CommandBarButton</B>
object.
<P>
To set a control to begin a group of controls (that is, to be
preceded by a line), just set the <B>BeginGroup</B> property of
the <B>CommandBarButton</B>, <B>CommandBarPopup</B>, or <B>CommandBarComboBox</B>
object that represents that control to <B>True</B>. To remove
the line, set the <B>BeginGroup</B> property of the appropriate
object to <B>False</B>. Use <B>Controls</B>(<I>index</I>),
where <I>index</I> is the caption or index number
of a control, to return an object that represents the control.
<P>
<FONT SIZE=4><B><A NAME="CH008H223">Adding and Initializing Text Box, List
Box, and Combo Box Controls</A></B></FONT>


<P>
<a name="dex45"></a>
<P>
You can add built&#173;in text box, list box, and combo box controls
by using the <B>Customize</B> dialog box. Use the same steps that
were given earlier in this section for adding built&#173;in controls.
<P>
To add and initialize the contents of custom text box, list box,
and combo box controls, you must use Visual Basic. You use the
<B>Add</B> method of the <B>CommandBarControls</B> collection
to add a text box, list box, or combo box; the <I>Type</I>
argument indicates the kind of control you're adding, as shown
in the following table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><A NAME="CVofhowcbrdoc003038"><B><FONT SIZE=2>To add this control</FONT></B></A>
</TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2>Specify this type</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Text box</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2><B>msoControlEdit</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>List box</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2><B>msoControlDropDown</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2>Combo box</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2><B>msoControlComboBox</B></FONT>
</TD></TR><P>
</TABLE>
<P>
You can use the <B>Style</B> property of the text box, list box,
or combo box to indicate whether the caption of the control should
appear to the left of the box itself.
<P>
The following example adds a combo box with the label "Quarter"
to a custom toolbar and assigns the macro named "ScrollToQuarter"
to the combo box.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set newCombo = CommandBars("Custom1").Controls _
&nbsp;&nbsp;&nbsp; .Add(Type:=msoControlComboBox)
With newCombo
&nbsp;&nbsp;&nbsp; .AddItem "Q1"
&nbsp;&nbsp;&nbsp; .AddItem "Q2"
&nbsp;&nbsp;&nbsp; .AddItem "Q3"
&nbsp;&nbsp;&nbsp; .AddItem "Q4"
&nbsp;&nbsp;&nbsp; .Style = msoComboNormal
&nbsp;&nbsp;&nbsp; .OnAction = "ScrollToQuarter"
End With

</code></pre></FONT>


<P>
<A NAME="CVofhowcbrdoc003049">While your Visual Basic application
is running, the procedure assigned to the <B>OnAction</B> property
of the combo box control is called each time the user changes
the control. In the procedure, you can use the <B>ActionControl</B>
property of the <B>CommandBars</B> object to find out which control
was changed and to return the changed value. The <B>ListIndex</B>
property will return the item that was entered in the combo box.</A>
<P>
<FONT SIZE=4><B><A NAME="CH008H224">Deleting Toolbar Controls</A></B></FONT>


<P>
<a name="dex46"></a>
<P>
Deleting built&#173;in toolbar controls can help you tailor your
Visual Basic application to the needs of the user. For example,
you may want to delete a built&#173;in control from a toolbar
and replace it with a custom version of that command, which will
perform specialized tasks for the user. Or you may want to remove
certain controls to simplify the interface or reduce the possibility
that inexperienced users will choose commands you didn't intend
for them to use.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;You
can restore built&#173;in toolbars or toolbar controls that you've
deleted. However, you cannot restore custom toolbars or toolbar
controls that you've deleted; you must re&#173;create them.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>


<P>
<a name="dex47"></a>
<P>
With the <B>Customize</B> dialog box open, you can delete any
toolbar control.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
delete a toolbar control</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B>
dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>If the toolbar that contains the toolbar control you want to delete
isn't visible, select the check box next to the name of that toolbar
in the <B>Toolbars</B> box on the <B>Toolbars</B> tab.
<P>
<LI>Right&#173;click
the control you want to delete, and then click <B>Delete</B> on
the shortcut menu.
<P>
</OL>

<P>
To delete an entire custom toolbar, open the <B>Customize</B>
dialog box, click the name of that toolbar in the <B>Toolbars</B>
box on the <B>Toolbars</B> tab, and then click the <B>Delete</B>
button. You cannot delete built&#173;in toolbars.
<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>


<P>
<a name="dex48"></a>
<P>
Use the <B>Delete</B> method to delete a custom toolbar or a custom
or built&#173;in toolbar control. You cannot delete a built&#173;in
toolbar.
<P>
The following Microsoft Excel example deletes the <B>Print</B>
control from the <B>Standard</B> toolbar.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Standard").Controls("Print").Delete

</code></pre></FONT>
<P>
The following example deletes the custom toolbar named "Custom
Bar."

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Custom Bar").Delete

</code></pre></FONT>
<P>
You can restore built&#173;in toolbar controls that you've deleted.
For more information, see the following section.
<P>
<FONT SIZE=4><B><A NAME="CH008H225">Restoring Built&#173;in Toolbar Controls</A>
</B></FONT>


<P>
<a name="dex49"></a>
<P>
You can restore built&#173;in toolbar controls that you've deleted.
However, you cannot restore custom toolbars or toolbar controls
that you've deleted; you must re&#173;create them.
<P>
<FONT SIZE=3><B>Using the Customize Dialog Box</B></FONT>

<P>
<a name="dex50"></a>
<P>
You can use the <B>Customize</B> dialog box to restore a built&#173;in
toolbar to its built&#173;in set of controls.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To restore a built&#173;in toolbar</FONT></B>
<P>

<OL>
<P>
<LI>If the <B>Customize</B> dialog box isn't already open, point to <B>Toolbars</B> on the
<B>View</B> menu, and then click <B>Customize</B>.
<P>
<LI>On the <B>Toolbars</B> tab, select the built&#173;in toolbar you want to restore.
<P>
<LI>Click <B>Restore</B>.
<P>
</OL>

<P>
<FONT SIZE=3><B>Using Visual Basic</B></FONT>
<P>
<a name="dex51"></a>
<P>
Use the <B>Reset</B> method to reset the components of a built&#173;in
toolbar.
<P>
The following Microsoft Excel example resets the <B>Standard</B>
toolbar to its default set of controls.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Standard").Reset

</code></pre></FONT>

<P>
<A NAME="CH008H109"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH008H109">Run&#173;Time Modifications to Toolbars</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex52"></a>
<P>
You can program the toolbars you create at design time to respond
dynamically to changing conditions at run time. If a particular
control is an inappropriate choice in certain contexts, you can
remove it or disable it to prevent the user from clicking it.
If a control represents an option with two possible states, you
can make the control appear pushed down to show that the option
is turned on or appear flat to show that it's turned off.
<P>
Note that although you can make design&#173;time changes to toolbars
by using either the <B>Customize</B> dialog box or Visual Basic,
you must use Visual Basic to make any run&#173;time changes.
<P>
<FONT SIZE=4><B><A NAME="CH008H226">Displaying or Hiding Toolbars and Toolbar
Controls</A></B></FONT>


<P>
<a name="dex53"></a>
<P>
A toolbar takes up screen space that could otherwise be used to
display data; you can display a toolbar when necessary and hide
it when the user no longer needs it. A toolbar is visible if its
<B>Visible</B> property is <B>True</B>, and it's not visible if
this property is <B>False</B>. Setting this property to <B>True</B>
corresponds to selecting the check box next to the name of that
toolbar on the <B>Toolbars</B> tab in the <B>Customize</B> dialog
box and then clicking <B>OK</B>.
<P>
The following Microsoft Excel procedure, which is assigned to
the View MyToolbar menu item on the <B>View</B> menu, switches
the state of the menu item and the <B>Visible</B> property of
the toolbar every time the user clicks the menu item. When the
toolbar is made visible, it reappears in the same position it
occupied when it was made invisible.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub ViewMyAppToolbar()
&#09;With CommandBars("Worksheet Menu Bar").Controls("View").Controls("View MyToolbar")
&#09;&#09;If .State = msoButtonUp Then
&#09;&#09;&#09;.State = msoButtonDown
&#09;&#09;&#09;CommandBars("MyAppTools").Visible = True
&#09;&#09;Else
&#09;&#09;&#09;.State = msoButtonUp
&#09;&#09;&#09;CommandBars("MyAppTools").Visible = False
&#09;&#09;End If
&#09;End With
End Sub

</code></pre></FONT>

<P>
<a name="dex54"></a>
<P>
When a toolbar is visible, the user can click any control on it
to run that control's assigned procedure.
<P>
If you want a specific toolbar control to appear only when certain
conditions exist, you can hide or show the toolbar control at
run time. By setting the <B>Visible</B> property to <B>True</B>
or <B>False</B>, you can effectively add a control to or remove
a control from the user's workspace without actually deleting
the control.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Because
Word stores customizations in documents and templates, custom
toolbars and toolbar controls are visible when the document or
template is available in the current context, and they're hidden
when the document or template isn't available. In contrast, because
Microsoft Excel stores customizations at the workspace level,
you need to use the Visible property in event code to dynamically
change the interface.
<P>
<FONT SIZE=4><B><A NAME="CH008H227">Moving and Resizing Toolbars</A></B></FONT>


<P>
<a name="dex55"></a>
<P>
You may want to adjust the prominence of a toolbar on the screen
in response to changing conditions while your application is running.
You can do this by changing the size or position of the toolbar.
Toolbars support several properties you can use to resize them;
to dock them at the top, bottom, left edge, or right edge of the
application window; or to position them elsewhere on the screen
(if they're are <I>floating</I> toolbars). For more
information about the properties and methods you can use with
<B>CommandBar</B> objects that represent toolbars, see "CommandBar
Object" in Help, and use the jumps at the top of the topic
to display the lists of properties and methods.
<P>
<FONT SIZE=4><B><A NAME="CH008H228">Restoring a Built&#173;in Toolbar</A>
</B></FONT>


<P>
<a name="dex56"></a>
<P>
If one of the default toolbars has been modified&nbsp;&#151;
either by a user or by a Visual Basic procedure&nbsp;&#151;
you can return the toolbar to its default state by using the <B>Reset</B>
method. Using this method corresponds to selecting the name of
the customized built&#173;in toolbar on the <B>Toolbars</B> tab
in the <B>Customize</B> dialog box and then clicking <B>Reset</B>.
<P>
The following example resets all the toolbars to their default
state and simultaneously deletes all the custom toolbars.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>For Each cb In CommandBars
&#09;If cb.BuiltIn Then
&#09;&#09;cb.Reset
&#09;Else
&#09;&#09;cb.Delete
&#09;End If
Next

</code></pre></FONT>

<P>
<IMG SRC="caution.gif">
<BR>
<P>
<UL>
<B><FONT COLOR="#FFCC33">Caution&nbsp;&nbsp;&nbsp;</FONT></B><A NAME="IP"></A>Be
careful when you use the <B>Reset</B> method; it not only restores
any built&#173;in toolbar controls that have been deleted, but
it also deletes any custom toolbar controls that have been added.
Keep in mind that another macro may have added custom toolbar
controls to the toolbar, and resetting the toolbar will remove
these controls as well. To avoid these problems, remove any toolbar
controls added by your application one by one, without resetting
the entire toolbar.
</UL><P>
<IMG SRC="caution.gif">
<BR>
<P>
<FONT SIZE=4><B><A NAME="CH008H229">Enabling or Disabling Toolbar Controls</A>
</B></FONT>


<P>
<a name="dex57"></a>
<P>
You may want to control the availability of a toolbar control
while your application is running, to prevent the user from clicking
the button at inappropriate times. To do this, you can dynamically
enable and disable the toolbar control. When a toolbar control
is disabled, it beeps when it's clicked and doesn't run the procedure
associated with it. Use the <B>Enabled</B> property to set or
return the state (enabled or disabled) of a toolbar control.
<P>
The following example disables button three on the <B>Standard</B>
toolbar.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>CommandBars("Standard").Controls(3).Enabled = False

</code></pre></FONT>
<P>
<FONT SIZE=4><B><A NAME="CH008H230">Indicating the State of Toolbar Buttons</A>
</B></FONT>


<P>
<a name="dex58"></a>
<P>
If a toolbar button represents an option with two possible states,
you can change the appearance of the button to indicate the current
state of the option: When the option is turned on, the associated
button appears pushed down; when the option is turned off, the
button appears flat.
<P>
The <B>State</B> property for a toolbar button is <B>msoButtonDown</B>
if the button appears pushed down; this property is <B>msoButtonUp</B>
if the button appears flat. The following procedure, which is
assigned to the new toolbar control <B>Database View</B>, changes
the appearance of the control before switching between special
views on the worksheet.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub DatabaseView()
&#09;With CommandBars("MyAppToolbar").Controls(3)
&#09;&#09;If .State = msoButtonDown Then
&#09;&#09;&#09;.State = msoButtonUp
&#09;&#09;&#09;'Switch to database view
&#09;&#09;Else
&#09;&#09;&#09;.State = msoButtonDown
&#09;&#09;&#09;'Switch to worksheet view
&#09;&#09;End If
&#09;End With
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4><B><A NAME="CH008H231">Modifying Text Box, List Box, and Combo
Box Controls</A></B></FONT>


<P>
<a name="dex59"></a>
<P>
If you add custom text box, list box, or combo box controls to
a toolbar, you can make run&#173;time changes such as changing
the current value of the text box portion of the control and adding
or removing items from the list portion of the control (for list
boxes and combo boxes only).
<P>
You can set the <B>Text</B> property of a text box, list box,
or combo box control to reflect a change in the state of your
Visual Basic application. For example, if the user clicks a toolbar
button that runs a procedure named "MaxZoom" (a custom
procedure that displays the active document at maximum zoom),
the text box portion of a combo box control that's used to adjust
the zoom more precisely and display a percentage value can be
set to the maximum zoom percentage.
<P>
You can use the <B>AddItem</B> and <B>RemoveItem</B> methods to
add and remove items (by index number) from the list portion of
a list box or combo box control. For example, if you created a
list box control in Word that tracks the styles the user applies
during a session, you can add the name of a style to the list
portion of the control each time the user applies a style.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Be
careful when you add or remove an item in a list box or combo
box control; this causes the index numbers of all the items to
shift.
<P>
You can use other properties and methods of list box and combo
box controls to change the appearance of a control at run time.
For example, you can add and adjust a header list for the control
(a header list is the group of list items at the top of the list
portion of a control that are separated from the rest of the list
items by a line.) For more information about using text box, list
box, and combo box controls, see "Using command bars"
in Help.
<P>
<A NAME="CH008H110"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH008H110">Menu Item and Toolbar Control IDs</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex60"></a>
<P>
Each Office application contains a unique set of menu bars and
toolbars and a unique set of available menu items and toolbar
controls. (Note that only a subset of the available menu items
and toolbar controls actually appears on an application's built&#173;in
menu bars and toolbars.) Each application stores its menu bars
and toolbars in a unique way. For information about how menu bars
and toolbars are stored, see "<A HREF="#CH008H102">Scope of Changes to the User Interface</A>" earlier in this chapter.
<P>
Whereas the functionality associated with each built&#173;in menu
item and toolbar control belongs to a specific Office application,
the caption, button image, width, and other default properties
of each menu item and toolbar control are stored in one resource
shared by all the applications. You can use ID numbers to find
specific menu items and toolbar controls in this resource.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;This
resource also contains the default properties of the pop&#173;up
controls that display built&#173;in menus. However, those pop&#173;up
controls don't contain the built&#173;in menu items on those menus;
that is, the pop&#173;up controls are empty.
<P>
Although you can usually ignore the ID of a menu item or control
and instead use the <B>Customize</B> dialog box to make changes
to a built&#173;in or custom menu or toolbar, you may need to
refer to the ID of an item to make certain kinds of changes to
your custom interface. The following are some of the situations
in which you'll need to refer to an item's ID:
<P>

<UL>
<P>
<LI>You want to assign an item
to a built&#173;in or custom menu or toolbar when that item isn't
available anywhere in the <B>Customize</B> dialog box at design
time.
<P>
<LI>You want to add a built&#173;in item to
a menu or toolbar at run time.
<P>
<LI>You want to copy
a particular button's image to another button at run time.
<P>
</UL>

<P>
You can assign the ID of a built&#173;in item to the <I>Id</I>
argument of the <B>Add</B> method for the <B>CommandBarControls</B>
collection, and you can assign the ID of a an item to the <B>FaceId</B>
property of any custom or built&#173;in control.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Even
though the shared resource contains information about every menu
item and toolbar control in all the Office applications, you can
only add items and controls whose functionality is contained in
the application you're working in. For example, you cannot add
the Microsoft Excel Delete Rows toolbar button (ID 293) to a toolbar
in Word. You can, however, copy the face of the Delete Rows toolbar
button from Microsoft Excel to a toolbar control in Word.
<P>
To determine the IDs of the built&#173;in menu items and toolbar
controls in a specific Office application, you can do any of the
following:
<P>

<UL>
<P>
<LI>In a module, write code
to assign a menu item or toolbar control that already appears
on a menu or toolbar to an object variable, and then use debugging
tools to inspect the value of the <B>Id</B> property of that object.
Using that ID, you can add a copy of the item or control to another
menu or toolbar by using the <B>Add</B> method, or you can copy
the image to another button by assigning the ID to another button's
<B>FaceId</B> property.
<P>
<LI>Run the following procedure
in one of the Office applications to create a text document that
lists the IDs and captions of all the built&#173;in commands in
that application.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub outputIDs()
Const maxId = 4000
Open "c:\ids.txt" For Output As #1
' Create a temporary command bar with every
' available item and control assigned to it.
Set cbr = CommandBars.Add("Temporary", msoBarTop, False, True)
For i = 1 To maxId
&nbsp;&nbsp;&nbsp; On Error Resume Next
&nbsp;&nbsp;&nbsp; cbr.Controls.Add Id:=i
Next
On Error GoTo 0
' Write the ID and caption of each control to the output file.
For Each btn In cbr.Controls
&nbsp;&nbsp;&nbsp; Write #1, btn.Id, btn.Caption
Next
' Delete the command bar and close the output file.
cbr.Delete
Close #1
End Sub

</code></pre></FONT>

<P>
<LI>Run the
following procedure in one of the Office applications to create
a set of custom toolbars that contain as many buttons as there
are valid <B>FaceId</B> property values in Office; each button's
image and ToolTip text is set to one of those values. You can
cross&#173;reference the ID of a built&#173;in command (see the
preceding procedure) to the <B>FaceId</B> property value of a
button on one of these toolbars, and vice versa.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub MakeAllFaceIds()
'Make fourteen toolbars with 300 faces each.
'Note that maxId is greater than last valid ID, so
'error will occur when first invalid ID is used.
Const maxId = 3900
On Error GoTo realMax
For bars = 0 To 13
&nbsp;&nbsp;&nbsp; firstId = bars * 300
&nbsp;&nbsp;&nbsp; lastId = firstId + 299
&nbsp;&nbsp;&nbsp; Set tb = CommandBars.Add
&nbsp;&nbsp;&nbsp; For i = firstId To lastId
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set btn = tb.Controls.Add
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btn.FaceId = i
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; btn.TooltipText = "FaceId = " &amp; i
&nbsp;&nbsp;&nbsp; Next
&nbsp;&nbsp;&nbsp; tb.Name = ("Faces " &amp; CStr(firstId) &amp; " to " _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; CStr(lastId))
&nbsp;&nbsp;&nbsp; tb.Width = 591
&nbsp;&nbsp;&nbsp; tb.Visible = True
Next
'Delete the button that caused the error and set toolbar name 
realMax:
btn.Delete
tb.Name = ("Faces " &amp; CStr(firstId) &amp; " to " _
&nbsp;&nbsp;&nbsp; &amp; CStr(i - 1))
tb.Width = 591
tb.Visible = True
End Sub

</code></pre></FONT>

<P>
</UL>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;The
IDs of the pop&#173;up controls for built&#173;in menus are in
the range 30002 to 30426. Remember that these IDs return empty
copies of the built&#173;in menus.

<BR>

</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>

</FONT>
</BODY>

</HTML>

<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 11: Data Access Objects</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 11</B></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Data Access Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<LI><A HREF="#CH011H101">Working with DAO
Objects</A>
<BR>
<LI><A HREF="#CH011H102">Using DAO with Microsoft
Jet</A>
<BR>
<LI><A HREF="#CH011H103">Accessing ODBC Data</A>
<BR>
<LI><A HREF="#CH011H104">Using DAO with ODBCDirect</A>
<BR>
<LI><A HREF="#CH011H105">Using ODBCDirect</A>
</UL>

<P>
<A NAME="CH011H101">Microsoft Data Access Objects (DAO) provide
a way to control a database from any application that supports
Visual Basic for Applications, including Microsoft Access, Microsoft
Excel, and Microsoft Visual Basic. Some DAO objects represent
the structure of your database, while others represent the data
itself. By using DAO, you can create and manage local or remote
databases in a variety of formats, and work with their data. This
chapter explains how to program with DAO objects from within Microsoft
Office applications.</A>
<P>
<A NAME="PG011C1"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H101">Working with DAO Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex1"></a>
<P>
Microsoft DAO objects provide a way to interact with a database
from any application that includes Visual Basic for Applications.
DAO objects represent different parts of a database. You can use
DAO objects to work with the parts of your database from code.
With DAO objects, you can:
<P>

<UL>
<P>
<LI>Create a database or change
the design of its tables, queries, indexes, and relationships.
<P>
<LI>Retrieve,
add, delete, or change the data in the database.
<P>
<LI>Implement
security to protect your data.
<P>
<LI>Work with data
in different file formats and link tables in other databases to
your database.
<P>
<LI>Connect to databases on remote
servers and build client/server applications.
<P>
</UL>

<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>In
order to use DAO objects, you must select the Data Access check
box when you install Microsoft Office. If you haven't installed
Data Access with Microsoft Office, run Setup again.
<P>
<a name="dex2"></a>
<P>
DAO objects are organized in a hierarchical relationship. Objects
contain collections, and collections contain other objects. The
<B>DBEngine</B> object is the top&#173;level object that contains
all the other objects and collections in the DAO object hierarchy.
The following table summarizes the DAO objects.
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object</FONT></B></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Connection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Network connection to an Open Database Connectivity (ODBC) database</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Container</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Security information for various types of objects in the database</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Open database</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DBEngine</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">The top-level object in the DAO object hierarchy</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Document</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Security information for individual objects in the database</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Error</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Data access error information</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Field</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Field in a <B>TableDef</B>, <B>QueryDef</B>, <B>Recordset</B>, <B>Index</B>, or <B>Relation</B> object</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Group</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Group account in the current workgroup</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Index</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Table index</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parameter</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Query parameter</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Property of an object</FONT></TD>
</TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDef</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved query definition in a database</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordset</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Set of records defined by a table or query</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Relation</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Relationship between two table or query fields</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TableDef</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved table definition in a database</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>User</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">User account in the current workgroup</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspace</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Active DAO session</FONT></TD>
</TR><P>
</TABLE>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H201">Designing Databases in Microsoft Access</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex3"></a>
<P>
You can design databases in Visual Basic with DAO. However, if
you're programming in an application other than Microsoft Access,
you may find it faster to design your database in the Microsoft
Access user interface, then write DAO code for any additional
functionality that you want. With Microsoft Access, you can quickly
and easily design tables, queries, indexes, and relationships;
link tables from external data sources; and implement security.
You can then open the database with DAO from another application
that hosts Visual Basic.
<P>
There are a few things to keep in mind when you create a database
in Microsoft Access:
<P>

<UL>
<P>
<LI>When you open an .mdb file
created in Microsoft Access from another application, you can't
work with Microsoft Access forms, reports, macros, or modules.
You should design forms and reports and write all Visual Basic
code from the application in which you're working.
<P>
<LI>If
you write code to work with your database within Microsoft Access,
that code will not necessarily run if you copy it to a module
in another application, such as Microsoft Excel. You may need
to modify the code and remove any Microsoft Access&#173;specific
objects, methods, properties, or functions.
<P>
<LI>In
Microsoft Access, you use the <B>CurrentDb</B> function to return
a reference to the database that's currently open in the Microsoft
Access window. You can then use DAO to work with the current database.
If you use this code in an application other than Microsoft Access,
you'll need to change code that calls the <B>CurrentDb</B> function
so that it calls the <B>OpenDatabase</B> method of a <B>Workspace</B> object instead.
<P>
<LI>Microsoft Access creates
additional properties for DAO objects. When you create a database
with DAO in Visual Basic, then open it in Microsoft Access, you
may notice that some new properties are defined for some of your
DAO objects. For example, a <B>Field</B> object in the <B>Fields</B> collection of a <B>TableDef</B> object may have a <B>Description</B>
property, which is created by Microsoft Access. You can see these
properties when you enumerate through the <B>Properties</B> collection
for a DAO object.
<P>
</UL>
<A NAME="CH011H202"></A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Setting a Reference to the Microsoft DAO Object Library</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex4"></a>
<P>
To work with DAO objects from within any application, you must
have a reference to the Microsoft DAO 3.5 object library. Microsoft
Access sets this reference automatically. You may need to set
it yourself if you're working within another Microsoft Office
application.
<P>
To set a reference to the Microsoft DAO 3.5 object library from
a Microsoft Office application other than Microsoft Access, open
the Visual Basic Editor, click <B>References</B> on the <B>Tools</B>
menu, and then select the <B>Microsoft DAO 3.5 Object Library</B>
check box. Once you've set a reference to the DAO object library,
you can view the DAO objects in the Object Browser by clicking
<B>DAO</B> in the <B>Project/Library</B> box.
<P>
Some objects, properties, and methods that were supported in earlier
versions of Microsoft DAO have been replaced by new objects, properties,
and methods with more complete functionality, and are no longer
supported by DAO version 3.5. If you're working with an application
created in an earlier version of Microsoft DAO, you can set a
reference to the Microsoft DAO 2.5/3.5 compatibility library rather
than to the Microsoft DAO 3.5 object library. The Microsoft DAO
2.5/3.5 compatibility library contains all of the objects, methods,
and properties that are in the Microsoft DAO 3.5 object library,
plus some that existed in DAO version 2.5, but that are no longer
supported in DAO version 3.5.
<P>
Code that uses objects, methods, and properties that were available
in DAO version&nbsp;2.5 but are no longer available in DAO version
3.5 will continue to run when you reference the Microsoft DAO
2.5/3.5 compatibility library. However, it's a good idea to update
your code to take advantage of the features of DAO version 3.5,
and to write new code that uses the objects, properties, and methods
provided by the Microsoft DAO 3.5 object library. The Microsoft
DAO 2.5/3.5 compatibility library is larger, so it requires more
resources. Also, future versions may not support some objects,
methods, and properties which are now available in the compatibility
library.
<P>
To determine whether you need to use the compatibility library,
make sure there is a reference set to the Microsoft DAO 3.5 object
library and compile all modules that contain DAO code. If your
code compiles without any problems, you can use the Microsoft
DAO 3.5 object library. If your DAO code generates compile errors,
then you should set a reference to the Microsoft DAO 2.5/3.5 compatibility
library and try to compile your code again.
<P>
For more information about which DAO features are supported in
the DAO 2.5/3.5 compatibility library but not in the Microsoft
DAO 3.5 object library, search DAO Help for "Obsolete features
in DAO," or search Microsoft Access Help for "DAO, compatibility
with previous versions."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H203">Referring to DAO Objects in Visual Basic</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex5"></a>
<P>
You refer to DAO objects in code in the same way that you refer
to other objects. Because the <B>DBEngine</B> object doesn't have
a collection, you can refer to it directly. You must refer to
other objects within their collections and according to their
positions in the object hierarchy.
<P>
You can refer to any type of object within a collection in one
of two ways: by its <B>Name</B> property setting or by its index
number, which indicates its position within the collection.
DAO objects are indexed beginning with zero. This means that the
first object in a collection has an index number of 0, the second
object has an index number of 1, and so on. The following examples,
which refer to a <B>Database</B> object within the <B>Databases</B> collection, illustrate both ways to refer to an object within
a collection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Databases("database name")
Databases(0) 

</code></pre></FONT>


To refer to a <B>Database</B> object in code, you also need to
refer to it according to its position within the object hierarchy.
The following code fragment shows how you can actually refer to
a <B>Database</B> object in code. The <B>Database</B> object is
the first member of the <B>Databases</B> collection of the default
<B>Workspace</B> object, which is a member of the <B>Workspaces</B> collection of the <B>DBEngine</B> object. Note that if you're
working in an application other than Microsoft Access, you must
open a database with the <B>OpenDatabase</B> method before you
run this code.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim dbs As Database
Set dbs = DBEngine.Workspaces(0).Databases(0)

</code></pre></FONT>


When you work with DAO objects from any application other than
Microsoft Access, you may want to qualify the object with the
Visual Basic name of the DAO object library, which is <B>DAO</B>.
By qualifying objects when you use them, you ensure that Visual
Basic always creates the correct object. The following example
declares a DAO object variable of type <B>Database</B>:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Qualify object variable type.
Dim dbs As DAO.Database

</code></pre></FONT>


<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H204">Adding New DAO Objects to a Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex6"></a>
<P>
As stated earlier in this chapter, some DAO objects represent
the structure of the database, and others provide a means for
you to work with the data stored in the database. Objects that
represent the structure of the database are saved with the database.
Objects that you use to work with the data in the database generally
are not saved, but are created each time you need them.
<P>
When you create a new DAO object to be saved with the database,
you must append it to the appropriate collection of saved objects
by using that collection's <B>Append</B> method. The following
example creates a new <B>TableDef</B> object named ArchivedInvoices
with a new <B>Field</B> object named OrderID. It appends the new
<B>Field</B> object to the <B>Fields</B> collection of the new
<B>TableDef</B> object, and it appends the <B>TableDef</B> object
to the <B>TableDefs</B> collection of the <B>Database</B> object
that represents the open database.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
following example, and other examples in this chapter, use the
Northwind sample database to illustrate concepts of DAO programming.
In order to try these examples, you need to have installed the
Northwind sample database which is included with Microsoft Access.
By default, it is installed in the C:\Program Files\Microsoft
Office\Office\Samples folder. If you haven't installed the Northwind
sample database, you can install it by running Setup again.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function AddTable() As Boolean
&#09;' Declare object variables and constant.
&#09;Dim dbs As Database, tdf As TableDef, fld As Field
&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;On Error GoTo Err_AddTable
&#09;' Assign current database to database variable.
&#09;Set dbs = DAO.DBEngine.Workspaces(0).OpenDatabase(conPath)
&#09;' Create new table and field, and assign to table and field variables.
&#09;Set tdf = dbs.CreateTableDef("ArchivedInvoices")
&#09;Set fld = tdf.CreateField("OrderID", dbLong)

&#09;' Add field to table's Fields collection.
&#09;tdf.Fields.Append fld
&#09;' Add table to database's TableDefs collection.
&#09;dbs.TableDefs.Append tdf 
&#09;dbs.Close
&#09;AddTable = True

Exit_AddTable:
&#09;Exit Function

Err_AddTable:
&#09;MsgBox
"Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;AddTable = False
&#09;Resume Exit_AddTable
End Function

</code></pre></FONT>



<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The
preceding example uses the <B>OpenDatabase</B> method to open the Northwind
sample database, return a reference to it, and assign this reference
to an object variable of type Database. If you're programming
within Microsoft Access, use the CurrentDb function to return
a reference to the database that's currently open in Microsoft
Access.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H205">Working with External Data</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
You can use DAO to work with databases in different formats. There
are three different categories of database formats that are accessible
through DAO. The first type of format is the Microsoft Jet format.
You can use DAO to work with all databases created with the Microsoft
Jet database engine, including those created in Microsoft Access,
Microsoft Visual Basic, Microsoft Visual C++<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&reg;</FONT>,
and Microsoft Excel.
<P>
The second type of database format is the installable ISAM format.
An installable ISAM is a driver that provides access to external
database formats through DAO and the Microsoft Jet database engine.
You must use your application's Setup program to install any installable
ISAMs that you want to use. Installable ISAMs are loaded by Microsoft
Jet when you refer to them in code. The individual database formats
for which installable ISAMs are available include:
<P>

<UL>
<P>
<LI>Microsoft FoxPro<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&reg;</FONT>,
versions 2.0, 2.5, 2.6, 3.0 (read&#173;only), and DBC
<P>
<LI>dBASE
III, dBASE IV, and dBASE version 5.0
<P>
<LI>Paradox,
versions 3<I>.x</I>, 4<I>.x</I>, and 5<I>.x
<P>
<LI></I>Microsoft
Excel version 3.0, 4.0, 5.0, 7.0, and 8.0 worksheets
<P>
<LI>Microsoft
Exchange/Outlook 
<P>
<LI>Lotus 1&#173;2&#173;3 WK1,
WK3, and WKS spreadsheets
<P>
<LI>Delimited and fixed&#173;width
text files in tabular format
<P>
<LI>Tabular data in
Hypertext Markup Language (HTML) files
<P>
</UL>

<P>
The third type of database format that is accessible through DAO
is the Open Database Connectivity (ODBC) data source. ODBC data
sources, such as Microsoft SQL Server<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&#153;</FONT>
versions 4.2 and later, require an ODBC driver. Often an ODBC
data source resides on a network server. ODBC is useful for developing
client/server applications. The next section introduces two ways
to work with ODBC data sources through DAO.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H206">Using DAO to Work with ODBC Data Sources</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex7"></a>
<P>
There are two different ways to use DAO to work with ODBC data
sources: through Microsoft Jet, or by means of a new technology
called <I>ODBCDirect</I>. If you're working with a
database created with the Microsoft Jet database engine or in
an external format supported by an installable ISAM, all DAO operations
are processed through Microsoft Jet. If you're working with an
ODBC data source, you can either process DAO operations through
Microsoft Jet, or you can use ODBCDirect to circumvent the Microsoft
Jet engine and work directly with the data in the ODBC data source.
<P>
Whether you use DAO with Microsoft Jet or with ODBCDirect to work
with an ODBC data source depends on what kind of operations you
need to perform on the data source. You can use DAO with Microsoft
Jet when you need to take advantage of Microsoft Jet's unique
features for ODBC operations, such as the ability to create or
modify objects or to join data from different database formats.
<P>
You can use ODBCDirect when you need to run queries or stored
procedures against a back&#173;end server, such as Microsoft SQL
Server, or when your client application needs only the specific
capabilities of ODBC, such as batch updates or asynchronous queries.
ODBCDirect can also make certain client/server operations significantly
faster.
<P>
Because not all DAO features are available with ODBCDirect, Microsoft
DAO still supports ODBC through the Microsoft Jet database engine.
You can use ODBC through Microsoft Jet, ODBCDirect, or both, with
a single ODBC data source.
<P>
Which of these two methods you can use to access an ODBC data
source is determined by what type of workspace you're working
in. A <I>workspace</I>, represented by a <B>Workspace</B> object, is an active session for a particular user account.
A <I>session</I> marks a sequence of operations performed
by the database engine. A session begins when a particular user
logs on and ends when that user logs off. The operations that
a user can perform during a session are determined by the permissions
granted to that user. If you don't specifically create a workspace,
then DAO creates a default workspace for you.
<P>
With Microsoft DAO version 3.5, you can create either of two types
of workspaces for ODBC operations. If you create a <I>Microsoft
Jet workspace</I>, you can use DAO with Microsoft Jet to
access ODBC data. If you create an <I>ODBCDirect workspace</I>,
you can use DAO to work directly with the data in the ODBC data
source, without going through the Microsoft Jet database engine.
<P>
Each type of workspace has its own object model. The next section
of this chapter discusses the object model for the Microsoft Jet
workspace. Later sections discuss the advantages of using each
type of workspace and describe the object model for ODBCDirect
workspaces.
<P>
<A NAME="PG011C2"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H102">Using DAO with Microsoft Jet</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex8"></a>
<P>
Microsoft Jet workspaces include objects that you can use to define
the structure of your database, such as the <B>TableDef</B>,<B>
QueryDef</B>,<B> Field</B>, <B>Index</B>, <B>Parameter</B>, and
<B>Relation</B> objects. Microsoft Jet workspaces also include
objects that you can use to manipulate your data, such as the
<B>Recordset</B> object. You can use other objects, such as the
<B>User</B>, <B>Group</B>, <B>Container</B>, and <B>Document</B> objects,
to secure your application. The following diagram shows the object
model for Microsoft Jet workspaces.
<P>
<A NAME="CH011H207"><IMG SRC="01101.gif"></A>
<BR>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>The DBEngine Object</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex9"></a>
<P>
As previously mentioned, the <B>DBEngine</B> object is the top&#173;level
object in the DAO object hierarchy. It contains all other DAO
objects and collections. The <B>DBEngine</B> object is the default
object in the object model, so in many cases you don't need to
refer to it explicitly.
<P>
The <B>DBEngine</B> object contains two collections: the <B>Workspaces</B> collection and the <B>Errors</B> collection. The <B>Workspaces</B> collection is the default collection of the <B>DBEngine</B> object,
so you don't need to refer to it explicitly. You can return a
reference to the first <B>Workspace</B> object in the <B>Workspaces</B> collection of the <B>DBEngine</B> object in any of the following
ways:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set wrk = DBEngine.Workspaces(0)
Set wrk = DBEngine(0)
Set wrk = Workspaces(0) 

</code></pre></FONT>


If you don't specifically create a new <B>Workspace</B> object,
DAO automatically creates a default workspace when you need it.
The settings of the <B>DefaultUser</B> and <B>DefaultPassword</B>
properties of the <B>DBEngine</B> object specify the default user
name and password to be used with the default <B>Workspace</B> object.
By default, the <B>DefaultUser</B> property is set to Admin and
the <B>DefaultPassword</B> property is set to a zero&#173;length
string ("").
<P>
The setting for the <B>DefaultType</B> property of the <B>DBEngine</B>
object determines whether the default workspace is a Microsoft
Jet workspace or an ODBCDirect workspace. By default, the <B>DefaultType</B>
property is set to <B>dbUseJet</B>, and the default workspace
is a Microsoft Jet workspace. When you're creating a workspace,
you can override the setting for this property by specifying either
<B>dbUseJet</B> or <B>dbUseODBC</B> as the <I>type</I>
argument of the <B>CreateWorkspace</B> method. For example, if
the <B>DefaultType</B> property is set to <B>dbUseJet</B> and
you want to create an ODBCDirect workspace, specify the <B>dbUseODBC</B>
constant as the <I>type</I> argument of the <B>CreateWorkspace</B>
method. Conversely, if the <B>DefaultType</B> property is set
to <B>dbUseODBC</B> and you want to create a Microsoft Jet workspace,
specify the <B>dbUseJet</B> constant as the <I>type</I>
argument of the <B>CreateWorkspace</B> method.
<P>
You can use some of the methods of the <B>DBEngine</B> object
to maintain your database. For example, the <B>CompactDatabase</B>
method copies your database and compacts it. The <B>RepairDatabase</B>
method attempts to repair a database that's been damaged.
<P>
For more information about the <B>DBEngine</B> object, search
DAO Help for "DBEngine object."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H208">The Workspace Object and the Workspaces
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex10"></a>
The DAO <B>Workspace</B> object defines a session for a user,
based on the user's permissions. You use the <B>Workspace</B> object
to manage the current session. The <B>Workspace</B> object contains
open databases and provides mechanisms for simultaneous transactions
and for securing your application. The <B>Workspaces</B> collection
contains all active <B>Workspace</B> objects of the <B>DBEngine</B> object that have been appended to the <B>Workspaces</B> collection.
<P>
When you begin working with DAO objects in Visual Basic, DAO automatically
creates a default workspace. To refer to the default workspace,
you can refer to the index number of the first <B>Workspace</B> object
in the <B>Workspaces</B> collection, as shown in the following
example:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wrk As Workspace
Set wrk = Workspaces(0)

</code></pre></FONT>


<P>
DAO workspaces can be shared or hidden. A workspace is hidden
until the user marks it as shared by appending the <B>Workspace</B> object to the <B>Workspaces</B> collection. After a workspace
has been appended, you can access it throughout your code simply
by referring to it within the <B>Workspaces</B> collection. If
you need a <B>Workspace</B> object only within a particular procedure,
you can create the <B>Workspace</B> object but not append it to
the <B>Workspaces</B> collection.
<P>
As noted earlier in this chapter, there are two types of <B>Workspace</B> objects: Microsoft Jet workspaces and ODBCDirect workspaces.
In a Microsoft Jet workspace, you can use DAO with the Microsoft
Jet database engine to access data in Microsoft Jet databases,
installable ISAM data sources, and ODBC data sources. In an ODBCDirect
workspace, you can use DAO to access data in ODBC data sources,
without going through the Microsoft Jet database engine. You can
work with both Microsoft Jet and ODBCDirect workspaces from within
a single application.
<P>
For more information about ODBCDirect workspaces, see "<A HREF="#CH011H104">Using DAO with ODBCDirect</A>" later in this chapter.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Creating a New Microsoft Jet Workspace</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex11"></a>
<P>
To create a new Microsoft Jet workspace, use the <B>CreateWorkspace</B>
method of the <B>DBEngine</B> object. The following code creates
a Microsoft Jet workspace. The constant specified for the <I>type</I>
argument, <B>dbUseJet</B>, specifies that the workspace will be
a Microsoft Jet workspace. If the <B>DefaultType</B> property
of the <B>DBEngine</B> object is set to <B>dbUseJet</B>, then
you don't need to specify a value for the <I>type</I>
argument; DAO automatically creates a Microsoft Jet workspace.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wrk As Workspace
Set wrk = CreateWorkspace("JetWorkspace", "Admin", "", dbUseJet)

</code></pre></FONT>


<P>
Newly created <B>Workspace</B> objects&nbsp;&#151; those created
with the <B>CreateWorkspace</B> method&nbsp;&#151; are not
automatically appended to the <B>Workspaces</B> collection. You
can use the <B>Append</B> method of the <B>Workspaces</B> collection
to append a new <B>Workspace</B> object if you want it to be part
of the collection. However, you can use the <B>Workspace</B> object
even if it's not part of the collection. Append the new <B>Workspace</B> object to the <B>Workspaces</B> collection if you want to
use the workspace from procedures other than the one in which
you created it.
<P>
For more information about creating a workspace, search DAO Help
for "CreateWorkspace method."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H209">The Error Object and the Errors Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex12"></a>
<P>
The <B>Error</B> object contains information about an error that
occurred during a DAO operation. More than one error can occur
during a single DAO operation; each individual error is represented
by a separate <B>Error</B> object. The <B>Errors</B> collection
contains all of the <B>Error</B> objects that correspond to a
single DAO operation. When a subsequent DAO operation generates
an error, the <B>Errors</B> collection is cleared, and one or
more new <B>Error</B> objects are placed in the <B>Errors</B> collection.
DAO operations that don't generate any errors have no effect on
the <B>Errors</B> collection.
<P>
The first <B>Error</B> object in the <B>Errors</B> collection
represents the lowest level error, the one that occurred closest
to the ODBC data source. The second represents the next higher
level error, and so forth. For example, if an ODBC error occurs
while trying to open a <B>Recordset</B> object, the first <B>Error</B> object, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Errors(0)</FONT>,
contains the lowest level ODBC error; other <B>Error</B> objects
contain the ODBC errors returned by the various layers of ODBC,
and the last <B>Error</B> object contains the error returned by
DAO. In this case, the ODBC driver manager, and possibly the driver
itself, return separate <B>Error</B> objects. The index number
of the last <B>Error</B> object in the collection, the DAO error,
is one less than the value returned by the <B>Count</B> property
of the <B>Errors</B> collection. The Visual Basic <B>Err</B> object
contains the same error as the last <B>Error</B> object in the
DAO <B>Errors</B> collection.
<P>
The following example tries to insert values into a table that
doesn't exist, causing two DAO errors.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The
following example, and other examples in this chapter, use the
Microsoft SQL Server Pubs sample database to illustrate concepts
of client/server programming. This database is included with Microsoft
SQL Server. If you don't have Microsoft SQL Server, you can adapt
the example to your work with your data source, or simply study
it to understand the concepts. Before you can work with any ODBC
data source, you must register it. For information about registering
an ODBC data source, see "<A HREF="#CH011H225">Registering an ODBC Data Source</A>" later in this chapter.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub CauseODBCError()
&#09;Dim dbs As Database, errObj As Error

&#09;On Error GoTo Err_CauseODBCError
&#09;Set dbs = OpenDatabase("", 0, 0, "ODBC;UID=sa;PWD=;DATABASE=Pubs;DSN=Publishers")
&#09;dbs.Execute "INSERT INTO SomeTable VALUES (1,2,3)", dbSQLPassThrough
&#09;Exit Sub

Err_CauseODBCError:
&#09;For Each errObj In Errors
&#09;&#09;Debug.Print errObj.Number, errObj.Description
&#09;Next
&#09;Resume Next
End Sub

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H210">The Database Object and the Databases
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex13"></a>
<P>
The <B>Database</B> object represents an open database. It can
be a Microsoft Jet database or an external data source. The <B>Databases</B> collection contains all currently open databases. The following
table shows the relationship between the <B>Database</B> object
and the<B> Databases</B> collection and other objects and collections
in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Databases</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Containers</B> collection
<P>
<B>QueryDefs</B> collection
<P>
<B>Properties</B> collection
<P>
<B>Recordsets</B> collection
<P>
<B>Relations</B> collection
<P>
<B>TableDefs</B> collection</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Databases</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspace</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Opening a Database Object</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
To open a database and return a reference to the <B>Database</B> object
that represents it in any application other than Microsoft Access,
use the <B>OpenDatabase</B> method of the <B>DBEngine</B> object
or of a <B>Workspace</B> object. When you use the <B>OpenDatabase</B>
method of the <B>DBEngine</B> object, Microsoft DAO opens the
database in the default workspace, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function RetrieveRecordset(strDbName As String, strSource As String) As Boolean
&#09;Dim dbs As Database
&#09;Dim rst As Recordset 

&#09;On Error GoTo Err_RetrieveRecordset
&#09;Set dbs = OpenDatabase(strDbName)
&#09;Set rst = dbs.OpenRecordset(strSource, dbOpenDynaset)
&#09;' Perform some operation with recordset.
&#09;&#09;.
&#09;&#09;.
&#09;&#09;.
&#09;RetrieveRecordset = True

Exit_RetrieveRecordset:
&#09;rst.Close
&#09;dbs.Close
&#09;Exit Function

Err_RetrieveRecordset:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;RetrieveRecordset = False
&#09;Resume Exit_RetrieveRecordset
End Function

</code></pre></FONT>



<P>
If you're working within Microsoft Access, use the Microsoft Access
<B>CurrentDb</B> function to return a reference to the database
that's currently open. Use the <B>OpenDatabase</B> method to open
databases other than the one that's currently open, or to open
databases in an ODBCDirect workspace. The following example uses
the <B>CurrentDb</B> function to return a reference to the database
that is currently open in Microsoft Access.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim dbs As Database
Set dbs = CurrentDb
Debug.Print dbs.Name

</code></pre></FONT>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B><A NAME="CreateDAOReps">Creating Database Replicas with DAO</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex14"></a>
<P>
If you need to maintain two or more copies of a database, you
can replicate the database. When you replicate a database, you
designate the database to be the Design Master and create one
or more copies of it that are identical in structure and data;
the copies are called <I>replicas</I>. You can create
multiple replicas of a database and maintain them on the same
computer or over a network. You can add, change, or delete objects
only in the Design Master. You can change data in the Design Master
or in any of the replicas. When a user changes data within one
replica, the users of other replicas can synchronize their replica,
so that the same data is maintained in all replicas.
<P>
You can use DAO to make a database replicable, create replicas,
synchronize replicas, and manage a set of replicas. You can also
use DAO to create partial replicas. <I>Partial replicas
</I>are replicas that contain only a subset of records in
a full replica. By using partial replicas, you can synchronize
a replica with only the data that you need, rather than with an
entire database. For more information about partial replicas,
search Microsoft Access Help for "partial replicas."
<P>
To replicate a database with DAO, you must first make the database
replicable by setting either the <B>Replicable</B> or the <B>ReplicableBool</B>
property of the <B>Database</B> object. These properties don't
exist on the <B>Database</B> object until you create them and
append them to the <B>Properties</B> collection. After you've
made the database replicable, you can create one or more replicas
of it. The following example backs up a database, makes it replicable
by setting the <B>ReplicableBool</B> property to <B>True</B>,
and creates a replica by using the DAO <B>MakeReplica</B> method.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function ReplicateDatabase(strDBName As String) As Boolean
&#09;Dim dbs As Database, prp As Property
&#09;Dim strBackup As String, strReplica As String
&#09;Const conPropNotFound As Integer = 3270

&#09;On Error GoTo Err_ReplicateDatabase
&#09;If InStr(strDBName, ".mdb") &gt; 0 Then
&#09;&#09;strBackup = Left(strDBName, Len(strDBName) - 4)
&#09;Else
&#09;&#09;strBackup = strDBName
&#09;End If

&#09;strReplica = strBackup &amp; "Replica" &amp; ".mdb"
&#09;If MsgBox("Make backup copy of file?", vbOKCancel) = vbOK
Then
&#09;&#09;strBackup = strBackup &amp; ".bak"
&#09;&#09;FileCopy strDBName, strBackup
&#09;&#09;MsgBox "Copied file to " &amp; strBackup
&#09;End If

&#09;Set dbs = OpenDatabase(strDBName, True)
&#09;dbs.Properties("ReplicableBool") = True
&#09;dbs.MakeReplica strReplica, "Replica of " &amp; strDBName
&#09;MsgBox "Created replica '" &amp; strReplica &amp; "'."
&#09;dbs.Close
&#09;ReplicateDatabase = True

Exit_ReplicateDatabase: 
&#09;Exit Function

Err_ReplicateDatabase:
&#09;If Err = conPropNotFound Then
&#09;&#09;Set prp = dbs.CreateProperty("ReplicableBool", dbBoolean, True)
&#09;&#09;dbs.Properties.Append prp
&#09;&#09;Resume
Next
&#09;Else
&#09;&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;End If
&#09;ReplicateDatabase = False
&#09;Resume Exit_ReplicateDatabase
End Function

</code></pre></FONT>



<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The
<B>Replicable</B> and <B>ReplicableBool</B> properties are functionally identical. The only difference between them is that the <B>Replicable</B> property setting is a string, and the <B>ReplicableBool</B> property setting is a <B>Boolean</B> value.
<P>
For more information about database replication and the DAO properties
and methods that you can use for replication, search DAO Help
for "replication."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H211">The TableDef Object and the TableDefs
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex15"></a>
<P>
A <B>TableDef</B> object represents the stored definition of a
base table or a linked table in a Microsoft Jet workspace. The
<B>TableDefs</B> collection contains all stored <B>TableDef</B> objects
in a database. The following table shows the relationship between
the <B>TableDef</B> object and the <B>TableDefs</B> collection
and other objects and collections in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TableDef</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TableDefs</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fields</B> collection
<P><B>Indexes</B> collection
<P><B>Properties</B> collection
</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TableDefs </B>collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TableDef</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Creating a Table with Code</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex16"></a>
<P>
To create a table with DAO code, use the <B>CreateTableDef</B>
method of a <B>Database</B> object. After you've created a new
<B>TableDef</B> object, but before you append it to the database,
you must define one or more fields for the table. The following
example creates a table that contains some of the error codes
and strings used or reserved by Visual Basic in the Northwind
sample database.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function CreateErrorsTable() As Boolean
&#09;Dim dbs As Database, tdf As TableDef, fld As Field, idx As Index
&#09;Dim rst As Recordset, intCode As Integer, strErr As String

&#09;Const conAppObjErr = "Application-defined or object-defined error"

&#09;' Create Errors table with ErrorCode and ErrorString fields.
&#09;Set dbs = CurrentDb

&#09;On Error Resume Next
&#09;' Delete any existing Errors table. 
&#09;dbs.TableDefs.Delete "Errors"

&#09;On Error GoTo Error_CreateErrorsTable
&#09;' Create table. 
&#09;Set tdf = dbs.CreateTableDef("Errors")
&#09;' Create fields.
&#09;Set fld = tdf.CreateField("ErrorCode", dbInteger)
&#09;tdf.Fields.Append fld
&#09;Set fld = tdf.CreateField("ErrorString", dbMemo)
&#09;tdf.Fields.Append fld
&#09;dbs.TableDefs.Append tdf 

&#09;' Create index.
&#09;Set idx = tdf.CreateIndex("ErrorCodeIndex") 
&#09;Set fld = idx.CreateField("ErrorCode")
&#09;With idx
&#09;&#09;.Primary = True
&#09;&#09;.Unique = True
&#09;&#09;.Required = True
&#09;End With
&#09;idx.Fields.Append fld 
&#09;tdf.Indexes.Append idx

&#09;' Open recordset on Errors table.
&#09;Set rst = dbs.OpenRecordset("Errors")
&#09;' Set recordset's index.
&#09;rst.Index = "ErrorCodeIndex"

&#09;' Show hourglass pointer.
&#09;DoCmd.Hourglass True

&#09;' Loop through error codes.
&#09;For intCode = 1 To 32767
&#09;&#09;On Error Resume Next
&#09;&#09;strErr = ""
&#09;&#09;' Attempt to raise each error.
&#09;&#09;Err.Raise intCode

&#09;&#09;' Check whether error is VBA, DAO, or Access error.
&#09;&#09;' If error is not a VBA error, the Description property
&#09;&#09;' of the Err object contains "Application-defined or object-defined error".
&#09;&#09;If Err.Description &lt;&gt; conAppObjErr Then
&#09;&#09;&#09;strErr = Err.Description

&#09;&#09;' Use AccessError method to return descriptive string for
&#09;&#09;' DAO and Access errors.
&#09;&#09;ElseIf AccessError(intCode) &lt;&gt; conAppObjErr Then
&#09;&#09;&#09;strErr = AccessError(intCode)
&#09;&#09;End If

&#09;&#09;' If error number has associated descriptive string, add to table.
&#09;&#09;If Len(strErr) &gt; 0 Then
&#09;&#09;&#09;' Add new record to recordset.
&#09;&#09;&#09;rst.AddNew
&#09;&#09;&#09;' Add error number to table.
&#09;&#09;&#09;rst!errorcode = intCode
&#09;&#09;&#09;' Add descriptive string to table.
&#09;&#09;&#09;rst!ErrorString.AppendChunk strErr
&#09;&#09;&#09;' Update record.
&#09;&#09;&#09;rst.Update
&#09;&#09;End If
&#09;Next intCode

&#09;DoCmd.Hourglass False
&#09;' Close recordset.
&#09;rst.Close
&#09;MsgBox "Errors table created."
&#09;' Show new table in Database window.
&#09;RefreshDatabaseWindow

&#09;CreateErrorsTable = True

Exit_CreateErrorsTable:
&#09;Exit Function

Error_CreateErrorsTable:
&#09;MsgBox Err &amp; ": " &amp; Err.Description
&#09;CreateErrorsTable = False
&#09;Resume Exit_CreateErrorsTable
End Function

</code></pre></FONT>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Linking a Table to a Database</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex17"></a>
<P>
To use tables from an external data source in your database, you
can link them to your database. You can link tables that reside
in another Microsoft Jet database, or tables from other programs
and file formats, such as Microsoft Excel, dBASE, Microsoft FoxPro,
Paradox, or previous versions of Microsoft Jet. This is more efficient
than opening the external database directly, especially if the
table comes from an ODBC data source.
<P>
To link a table to your database, use the <B>CreateTableDef</B>
method to create a new table. Next, specify settings for the <B>Connect</B>
and <B>SourceTableName</B> properties of the <B>TableDef</B> object.
You can also set the <B>Attributes</B> property of the <B>TableDef</B> object to specify that the object has certain characteristics.
Finally, append the <B>TableDef</B> object to the <B>TableDefs</B>
collection.
<P>
For more information about the <B>Connect</B>, <B>SourceTableName</B>,
and <B>Attributes</B> properties, search DAO Help for the name
of the property.
<P>
The following example links a Microsoft Excel version 8.0 worksheet
to a database as a table.
<P>
<FONT COLOR="#0000FF"><B>Important&nbsp;&nbsp;&nbsp;</B></FONT>Before
you run this code, make sure that the Microsoft Excel ISAM driver
(Msexcl35.dll) is installed on your system. If it's not, you need
to run Setup again to install it. The Microsoft Excel ISAM driver
enables Microsoft Excel&nbsp;97 files to work with the Microsoft
Jet database engine. For more information about working with the
Microsoft Excel ISAM driver, search Microsoft Access Help for
"Microsoft Excel driver."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function LinkExcelTable() As Boolean
&#09;Dim dbs As DAO.Database, tdf As DAO.TableDef

&#09;Const errNoISAM As Integer = 3170
&#09;Const conPath As String = _ 
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;On Error GoTo Err_LinkExcelTable
&#09;' Return a reference to Northwind database.
&#09;Set dbs = OpenDatabase(conPath)
&#09;' Create new TableDef object.
&#09;Set tdf = dbs.CreateTableDef("LinkedTable")
&#09;' Specify range that is source table.
&#09;tdf.SourceTableName = "DataRange"
&#09;' Specify connect string.
&#09;tdf.Connect = "EXCEL 8.0; DATABASE=C:\My Documents\XLTable.xls"
&#09;' Append new TableDef object.
&#09;dbs.TableDefs.Append tdf
&#09;LinkExcelTable = True

Exit_LinkExcelTable:
&#09;Exit Function

Err_LinkExcelTable:
&#09;If Err = errNoISAM Then
&#09;&#09;Dim strErr As String
&#09;&#09;strErr = Err &amp; ": " &amp; Err.Description
&#09;&#09;strErr = strErr _
&#09;&#09;&#09;&amp; "You may not have the ISAM driver installed properly on your computer, " _
&#09;&#09;&#09;&amp; "or you may have specified the Connect string incorrectly." _
&#09;&#09;&#09;&amp; " Check the Connect string and the ISAM driver."
&#09;&#09;MsgBox strErr, vbOKOnly, "Error!"
&#09;Else
&#09;&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;End If
End Function

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H212">The Field Object and the Fields Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
In a Microsoft Jet workspace, the <B>Field</B> object represents
a field in a table, query, index, relation, or recordset. The
<B>Fields</B> collection contains all <B>Field</B> objects associated
with a <B>TableDef</B>, <B>QueryDef</B>, <B>Index</B>, <B>Relation</B>,
or <B>Recordset</B> object. The following table shows the relationship
between the <B>Field</B> object and the <B>Fields</B> collection
and other objects and collections in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Field</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fields</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Properties</B> collection</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fields</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TableDef</B> object
<P>
<B>Index</B> object
<P>
<B>QueryDef</B> object
<P>
<B>Recordset</B> object
<P>
<B>Relation</B> object
</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Field</B> objects</FONT>
</TD></TR>
</TABLE>
<P>
The <B>Fields</B> collection is the default collection of a <B>TableDef</B>,
<B>QueryDef</B>, <B>Index</B>, <B>Relation</B>, or <B>Recordset</B>
object, which means that you don't need to explicitly refer to
the <B>Fields</B> collection. For example, the following code
fragment returns a reference to the LastName field in the Employees
table in the Northwind sample database.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim dbs As Database, tdf As TableDef, fld As Field

Const conPath As String = _
&nbsp;&nbsp;&nbsp;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

Set dbs = OpenDatabase(conPath)
Set tdf = dbs.TableDefs("Employees")
Set fld = tdf!LastName

</code></pre></FONT>


<P>
In the <B>Fields</B> collection of a <B>TableDef</B>, <B>QueryDef</B>,
<B>Index</B>, or <B>Relation</B> object, the <B>Field</B> object
is a structural unit. It represents a column in a table with a
particular data type. If you're creating a database in Microsoft
Access, you can define fields for any of these objects and set
most of their properties in the Microsoft Access user interface,
rather than by programming with DAO.
<P>
In a <B>Recordset</B> object, a <B>Field</B> object contains data,
and you can use it to read data from a record or write data to
a record. You can't work with the fields in a <B>Recordset</B> object
in the Microsoft Access user interface; you must use DAO.
<P>
The <B>Fields</B> collection of a <B>TableDef</B> object contains
all of the fields defined for a particular table. For a <B>QueryDef</B> object, the <B>Fields</B> collection contains fields that
are included in the <B>QueryDef</B> object from one or more tables.
The <B>Fields</B> collection of an <B>Index</B> object includes
the one or more fields on which the index is defined. 
<P>
For a <B>Relation</B> object, the <B>Fields</B> collection contains
the fields involved in a relationship. Typically, there are two
fields in the <B>Fields</B> collection of a <B>Relation</B> object.
One is the field that is the primary key in the table, specified
by the <B>Table</B> property of the <B>Relation</B> object; the
other is the field that is the corresponding foreign key in the
table, specified by the <B>ForeignTable</B> property of the <B>Relation</B> object.
<P>
The <B>Fields</B> collection of a <B>Recordset</B> object contains
the fields specified in the <I>source</I> argument
of the <B>OpenRecordset</B> method. The <I>source</I>
argument specifies the source of the records for the new <B>Recordset</B> object and can be a table name, a query name, or an SQL statement
that returns records. 
<P>
The <B>Value</B> property of a <B>Field</B> object applies only
to a <B>Field</B> object in the <B>Fields</B> collection of a
<B>Recordset</B> object. The <B>Value</B> property returns the
value of the data stored in that field for the current record.
Because the <B>Value</B> property is the default property of a
<B>Field </B>object, and the <B>Fields</B> collection is the default
collection of a <B>Recordset</B> object, you can return the value
of a field without explicitly referring to either the <B>Fields</B> collection or the <B>Value</B> property. The following code
shows three ways you can refer to the <B>Value</B> property. It
prints the value of the LastName, FirstName, and Title fields
for the first record in a table&#173;type <B>Recordset</B> object
based on the Employees table.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim dbs As Database, rst As Recordset
Const conPath As String = _
&nbsp;&nbsp;&nbsp;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

Set dbs = OpenDatabase(conPath)
Set rst = dbs.OpenRecordset("Employees")
' Explicitly reference Fields collection and Value property.
Debug.Print rst.Fields("LastName").Value
' Implicitly reference Fields collection, explicitly reference Value property.
Debug.Print rst!FirstName.Value
' Implicitly reference Fields collection and Value property.
Debug.Print rst!Title

</code></pre></FONT>


<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H213">The Index Object and the Indexes Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>

<a name="dex18"></a>
The <B>Index</B> object represents an index on a table in your
database in a Microsoft Jet workspace. The <B>Indexes</B> collection
contains all of the <B>Index</B> objects defined for a particular
table. The following table shows the relationship between the
<B>Index</B> object and the <B>Indexes</B> collection and other
objects and collections in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Index</B> object
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Indexes</B> collection
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fields</B> collection
<P><B>Properties collection</B>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Indexes</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TableDef</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Index</B> objects</FONT>
</TD></TR></TABLE>
<P>
An index speeds up searching and sorting on a table. You can improve
query performance in your database by indexing fields on both
sides of joins, fields that are sorted, or fields that are used
to specify criteria for a query. However, indexes add to the size
of your database, and they can slow performance when you update
data in indexed fields, or when you add or delete data. They can
also reduce the efficiency of multiuser applications. If you evaluate
your performance needs, you can add or omit indexes appropriately.
<P>
An index specifies the order in which records are accessed from
database tables in a table&#173;type <B>Recordset</B> object.
For example, suppose that you have an index on the LastName field
in the Employees table in the Northwind sample database. If you
create a table&#173;type <B>Recordset</B> object, then set the
<B>Recordset</B> object's <B>Index</B> property to the name of
the new index, the records returned by the <B>Recordset</B> object
will be ordered alphabetically by last name.
<P>
You create an index on one or more fields in the table. When you
create an index with DAO, you must create the field or fields
to be included in the index and append them to the <B>Fields</B> collection
of the <B>Index</B> object, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub SeekRecord()
&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"
&#09;Dim dbs As Database, tdf As TableDef, idx As Index
&#09;Dim fld As Field, fldLast As Field, fldFirst As Field
&#09;Dim rst As Recordset

&#09;' Return a reference to Northwind database.
&#09;Set dbs = DBEngine(0).OpenDatabase(conPath)
&#09;' Return a reference to Employees table.
&#09;Set tdf = dbs.TableDefs("Employees")
&#09;' Create new index on LastName and FirstName fields.
&#09;Set idx = tdf.CreateIndex("FirstLastName")
&#09;' Create fields in Fields collection of new index.
&#09;Set fldLast = idx.CreateField("LastName", dbText)
&#09;Set fldFirst = idx.CreateField("FirstName", dbText)
&#09;' Append Field objects.
&#09;idx.Fields.Append fldLast
&#09;idx.Fields.Append fldFirst
&#09;' Set Required property.
&#09;idx.Required = True
&#09;' Append new Index object.
&#09;tdf.Indexes.Append idx
&#09;' Open table-type recordset.
&#09;Set rst = dbs.OpenRecordset("Employees")
&#09;' Set Index property of Recordset object.
&#09;rst.Index = idx.Name
&#09;' Perform seek operation.
&#09;rst.Seek "=", "King", "Robert"

&#09;' Print values of all fields except Photo.
&#09;For Each fld In rst.Fields
&#09;&#09;If fld.Type &lt;&gt; dbLongBinary Then
&#09;&#09;&#09;Debug.Print fld
&#09;&#09;End If
&#09;Next fld
End Sub

</code></pre></FONT>



<P>
When you create an index, you can also impose certain restrictions
on the data contained in the fields that are indexed. For example,
if you want to designate a particular field in a table as the
primary key, you can create an <B>Index</B> object and set its
<B>Primary</B> and <B>Unique</B> properties to <B>True</B>. A
primary key is a special type of index. Each value in the field
designated as the primary key must be unique. A foreign key is
also an index, although it doesn't require special property settings.
Other indexes are neither primary nor foreign keys and serve only
to speed up searching and sorting operations.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>If
you're designing a database in the Microsoft Access user interface,
you can add new indexes, change or delete existing indexes, and
set index properties in table Design view. To do so, click <B>Indexes</B>
on the <B>View</B> menu.
<P>
For more information about indexes, search DAO Help for "Index object."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H214">The QueryDef Object and the QueryDefs
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex19"></a>
<P>
The <B>QueryDef</B> object represents a query in DAO. <B>QueryDef</B> objects can be saved with your database, or they can be temporary.
The <B>QueryDefs</B> collection contains all <B>QueryDef</B> objects
that are saved with your database and any temporary <B>QueryDef</B> objects that are currently open. The following table shows
the relationship between the <B>QueryDef</B> object and the <B>QueryDefs</B> collection and other objects and collections in a Microsoft
Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDef</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDefs</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fields</B> collection
<P><B>Parameters</B> collection
<P><B>Properties</B> collection
</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDefs</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDef</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Creating Persistent Queries</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex20"></a>
<P>
A query that's saved with your database is called a <I>persistent</I>
query. You can create persistent queries in Visual Basic by using
DAO, or you can create them in the Microsoft Access user interface.
<P>
To create a persistent query with DAO, use the <B>CreateQueryDef</B>
method of a <B>Database</B> object, as shown in the following
example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Const conPath As String = _
&nbsp;&nbsp;&nbsp;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"
Dim dbs As Database, qdf As QueryDef, rst As Recordset
Dim strSQL As String

strSQL = "SELECT FirstName, LastName, HireDate FROM Employees " _
&#09;&amp; "WHERE Title = 'Sales Representative' ORDER BY HireDate;"
Set dbs = OpenDatabase(conPath)
Set qdf = dbs.CreateQueryDef("Sales Representatives", strSQL)
Set rst = qdf.OpenRecordset

</code></pre></FONT>


You don't need to append a <B>QueryDef</B> object to the <B>QueryDefs</B> collection. If you specify a value for the <I>name</I>
argument of the <B>CreateQueryDef</B> method in a Microsoft Jet
workspace, DAO automatically appends the new <B>QueryDef</B> object
to the <B>QueryDefs</B> collection of the <B>Database</B> object.
If you specify a zero&#173;length string ("") for the
<I>name</I> argument, DAO creates a temporary <B>QueryDef</B> object. 
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>In
an ODBCDirect workspace, QueryDef objects are always temporary.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Creating Temporary Queries</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex21"></a>
You can create a temporary <B>QueryDef</B> object when you need
to run an SQL statement but don't want to store a new <B>QueryDef</B> object in the database. A temporary <B>QueryDef</B> object
is not appended to the database and exists until the variable
that represents it goes out of scope.
<P>
The following example creates two temporary <B>QueryDef</B> objects
to return data from the Microsoft SQL Server Pubs sample database.
It first queries the table of titles in the Microsoft SQL Server
Pubs sample database and returns the title and title identifier
of the best&#173;selling book. It then queries the table of authors
and instructs the user to send a bonus check to each author based
on his or her royalty share. The total bonus is $1,000 and each
author should receive a percentage of that amount.
<P>
This example uses ODBC through Microsoft Jet. You can apply the
same principles to create a temporary <B>QueryDef</B> object on
a Microsoft Jet database or an installable ISAM data source, or
in an ODBCDirect workspace.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function DetermineBonuses()
&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"
&#09;Dim dbsCurrent As Database, qdfBestSellers As QueryDef
&#09;Dim qdfBonusEarners As QueryDef, rstTopSeller As Recordset
&#09;Dim rstBonusRecipients As Recordset, strAuthorList As String

&#09;' Open database from which QueryDef objects can be created.
&#09;Set dbsCurrent = OpenDatabase(conPath)

&#09;' Create temporary QueryDef object to retrieve data from
&#09;' Microsoft SQL Server database.
&#09;Set qdfBestSellers = dbsCurrent.CreateQueryDef("")
&#09;qdfBestSellers.Connect = "ODBC;DATABASE=Pubs;UID=sa;PWD=;DSN=Publishers"
&#09;qdfBestSellers.SQL = "SELECT title, title_id FROM titles ORDER BY ytd_sales DESC;" 
&#09;Set rstTopSeller = qdfBestSellers.OpenRecordset()
&#09;rstTopSeller.MoveFirst
&#09;' Create temporary QueryDef to retrieve data from SQL Server database

&#09;' based on results from first query.
&#09;Set qdfBonusEarners = dbsCurrent.CreateQueryDef("")
&#09;qdfBonusEarners&#09;.Connect = "ODBC;DATABASE=Pubs;UID=sa;PWD=;DSN=Publishers"
&#09;qdfBonusEarners.SQL = "SELECT * FROM titleauthor WHERE title_id = '" &amp; _
&#09;&#09;rstTopSeller!title_id &amp; "'"
&#09;Set rstBonusRecipients = qdfBonusEarners.OpenRecordset()

&#09;' Build string containing names of authors to whom bonuses are owed.
&#09;Do While Not rstBonusRecipients.EOF
&#09;&#09;strAuthorList = strAuthorList &amp; rstBonusRecipients!au_id &amp; ": $" &amp; _
&#09;&#09;&#09;CStr(10* rstBonusRecipients!royaltyper) &amp; vbCr
&#09;&#09;rstBonusRecipients.MoveNext
&#09;Loop

&#09;' Display results.
&#09;MsgBox "Please send a check to the following " &amp; _
&#09;&#09;"authors in the amounts shown: " &amp; vbCr &amp; _
&#09;&#09;strAuthorList &amp; " for outstanding sales of " &amp; _
&#09;&#09;rstTopSeller!Title &amp; "."

&#09;rstBonusRecipients.Close
&#09;rstTopSeller.Close
&#09;dbsCurrent.Close
End Function

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H215">The Parameter Object and the Parameters
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex22"></a>
<P>
A <B>Parameter</B> object represents a value supplied to a query.
The <B>Parameters</B> collection contains all of the <B>Parameter</B> objects defined for a <B>QueryDef</B> object. The following
table shows the relationship between the <B>Parameter</B> object
and the <B>Parameters</B> collection and other objects and collections
in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parameter</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parameters</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Properties</B> collection</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parameters</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDef</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parameter</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
When you want the user or the application to supply a value at
run time that limits the set of records returned by a query, you
can define parameters for the query. For example, you can create
a query on an Orders table that prompts the user to specify the
range of records to return based on a range of order dates.
<P>
To create a parameter query, use the SQL PARAMETERS declaration
to define parameters for the query. The syntax for the PARAMETERS
declaration is:
<P>
PARAMETERS <I>name</I> <I>datatype </I>[<I>,</I>
<I>name</I> <I>datatype </I>[, ...]]
<P>
The PARAMETERS declaration precedes the rest of the SQL statement
and is separated from the SQL statement by a semicolon (;). The
following SQL statement defines two parameters, Beginning OrderDate
and Ending OrderDate, whose <I>datatype</I> is DATETIME.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>PARAMETERS [Beginning OrderDate] DATETIME,[Ending OrderDate] DATETIME; 
SELECT * FROM Orders 
WHERE (OrderDate Between [Beginning OrderDate] And [Ending OrderDate]);

</code></pre></FONT>

For a list of data types you can use for parameters,
search Microsoft Access Help for "data types, SQL."
<P>
Each parameter that you define in the SQL statement is represented
by a <B>Parameter</B> object in the <B>Parameters</B> collection
of the <B>QueryDef</B> object based on that SQL statement. You
specify the value of a parameter by setting the <B>Value</B> property
of the <B>Parameter</B> object. The following example creates
a new parameter query.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function NewParameterQuery(dteStart As Date, dteEnd As Date) As Boolean
&#09;Dim dbs As Database, qdf As QueryDef, rst As Recordset
&#09;Dim strSQL As String

&#09;On Error Resume Next
&#09;' Return reference to current database.
&#09;Set dbs = CurrentDb
&#09;' Construct SQL string.
&#09;strSQL = "PARAMETERS [Beginning OrderDate] DateTime, " _
&#09;&#09;&amp; "[Ending OrderDate] DateTime; SELECT * FROM Orders " &amp; _
&#09;&#09;"WHERE (OrderDate Between [Beginning OrderDate] " _
&#09;&#09;&amp; "And [Ending OrderDate]);"

&#09;' Delete query if it already exists.
&#09;dbs.QueryDefs.Delete "ParameterQuery"

&#09;On Error GoTo Err_NewParameterQuery
&#09;' Create new QueryDef object.
&#09;Set qdf = dbs.CreateQueryDef("ParameterQuery", strSQL)

&#09;' Supply values for parameters.
&#09;If dteStart &gt; dteEnd Then
&#09;&#09;MsgBox "Start date is later than end date."
&#09;&#09;Exit Function
&#09;End If
&#09;qdf.Parameters("Beginning OrderDate") = dteStart
&#09;qdf.Parameters("Ending OrderDate") = dteEnd

&#09;' Open recordset on QueryDef object.
&#09;Set rst = qdf.OpenRecordset
&#09;rst.MoveLast
&#09;MsgBox "Query returned " &amp; rst.RecordCount &amp; " records."
&#09;NewParameterQuery = True

Exit_NewParameterQuery:
&#09;rst.Close
&#09;Set dbs = Nothing
&#09;Exit Function

Err_NewParameterQuery:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;NewParameterQuery = False
&#09;Resume Exit_NewParameterQuery
End Function

</code></pre></FONT>



<P>
You can call this function from the Debug window as follows:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>? NewParameterQuery(#6-30-95#, #6-30-96#)

</code></pre></FONT>

<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>If
you're creating a database in Microsoft Access, you can define
parameters for a query in query Design view. For more information,
search Microsoft Access Help for "parameter queries."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H216">The Relation Object and the Relations
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex23"></a>
The <B>Relation</B> object represents a relationship between fields
in tables and queries. The <B>Relations</B> collection contains
all stored <B>Relation</B> objects in a database. The following
table shows the relationship between the <B>Relation</B> object
and the <B>Relations</B> collection and other objects and collections
in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Relation</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Relations</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fields</B> collection
<P>
<B>Properties</B> collection</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Relations</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Relation</B> objects</FONT>
</TD></TR></TABLE>
<P>
You can use the <B>Relation</B> object to create, delete, or change
relationships between fields in tables and queries in your database.
You can use the properties of the <B>Relation</B> object to specify
the type of relationship, which tables supply the fields that
participate in the relationship, whether to enforce referential
integrity, and whether to perform cascading updates and deletes.
<P>
A <B>Relation</B> object has a <B>Fields</B> collection that contains
two fields, one in each of the tables in the relationship. The
fields that make up the relationship must be of the same data
type, and they must have common values. In most cases, a relationship
consists of a field that is the primary key in one table and a
foreign key in another table.
<P>
You use the <B>Table</B> and <B>ForeignTable</B> properties of
the <B>Relation</B> object to specify which tables take part in
the relation and how they are related. If you are creating a one&#173;to&#173;many
relationship, it is important that you set these properties correctly.
In a one&#173;to&#173;many relationship, the table on the "one"
side of the relationship is the table in which the field to be
joined is the primary key. The setting for the <B>Table</B> property
must be the name of this table. The table on the "many"
side of the relationship is the table in which the field to be
joined is the foreign key. The setting for the <B>ForeignTable</B>
property must be the name of this table.
<P>
For example, consider the relationship between the Employees table
and the Orders table in the Northwind sample database. The two
tables are joined on the EmployeeID field. In the Employees table,
this field is the primary key; all values in this field must be
unique. In the Orders table, the EmployeeID field is a foreign
key. The same value can occur more than once in this field. For
the <B>Relation</B> object that represents this relationship,
the value of the <B>Table</B> property is the table on the "one"
side of the relationship; the Employees table. The value of the
<B>ForeignTable</B> property is the table on the "many"
side of the relationship; the Orders table.
<P>
The following example shows how to create a <B>Relation</B> object
in Visual Basic. The procedure deletes the existing relationship
between the Employees table and the Orders table in the Northwind
sample database, then re&#173;creates it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function NewRelation() As Boolean
&#09;Dim dbs As Database
&#09;Dim fld As Field, rel As Relation
&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;On Error GoTo Err_NewRelation
&#09;' Return reference to current database.
&#09;Set dbs = OpenDatabase(conPath)
&#09;&#09;' Find existing EmployeesOrders relation.
&#09;For Each rel In dbs.Relations
&#09;&#09;If rel.Table = "Employees" And rel.ForeignTable = "Orders" Then
&#09;&#09;&#09;' Prompt user before deleting relation.
&#09;&#09;&#09;If MsgBox(rel.Name &amp; " already exists. " &amp; vbCrLf _
&#09;&#09;&#09;&#09;&amp; "This relation will be deleted and re-created.", vbOK) = vbOK Then
&#09;&#09;&#09;&#09;dbs.Relations.Delete rel.Name
&#09;&#09;&#09;' If user chooses Cancel, exit procedure.
&#09;&#09;&#09;Else
&#09;&#09;&#09;&#09;Exit Function
&#09;&#09;&#09;End If
&#09;&#09;End If
&#09;Next rel 

&#09;' Create new relationship and set its properties.
&#09;Set rel = dbs.CreateRelation("EmployeesOrders", "Employees", "Orders")
&#09;' Set Relation object attributes to enforce referential integrity.
&#09;rel.Attributes = dbRelationDeleteCascade + dbRelationUpdateCascade
&#09;' Create field in Fields collection of Relation object.
&#09;Set fld = rel.CreateField("EmployeeID")
&#09;' Provide name of foreign key field.
&#09;fld.ForeignName = "EmployeeID"

&#09;' Append field to Relation object and Relation object to database.
&#09;rel.Fields.Append fld
&#09;dbs.Relations.Append rel
&#09;MsgBox "Relation '" &amp; rel.Name &amp; "' created."
&#09;Set dbs = Nothing
&#09;NewRelation = True

Exit_NewRelation:
&#09;Exit Function

Err_NewRelation:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;NewRelation = False
&#09;Resume Exit_NewRelation
End Function

</code></pre></FONT>

<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>If
you're designing a database in Microsoft Access, you can view
and change the relationships in your database in the Relationships
window. In the Database window, click <B>Relationships</B> on the <B>Tools</B> menu.
<P>
For more information about <B>Relation</B> objects, search DAO
Help for "Relation object."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H217">The Recordset Object and the Recordsets
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex24"></a>
<P>
The <B>Recordset</B> object represents a set of records within
your database. The <B>Recordsets</B> collection contains all open
<B>Recordset</B> objects. The following table shows the relationship
between the <B>Recordset</B> object and the <B>Recordsets</B>
collection and other objects and collections in a Microsoft Jet
workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordset</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordsets</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fields</B> collection
<P>
<B>Properties</B> collection
</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordsets</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordset</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
DAO offers five types of <B>Recordset</B> objects: table&#173;type,
dynaset&#173;type, snapshot&#173;type, forward&#173;only&#173;type,
and dynamic&#173;type. Table&#173;type <B>Recordset</B> objects
are supported only in Microsoft Jet workspaces. Dynamic&#173;type
<B>Recordset</B> objects are available only in ODBCDirect workspaces.
For more information, see "<A HREF="#DYNRECOBJ">Dynamic&#173;Type Recordset Objects</A>"
later in the chapter.
<P>
The sections that follow discuss some characteristics of each
of the other four types of <B>Recordset</B> objects. For more
information about each type of <B>Recordset</B> object, search
DAO Help for the name of the particular type of <B>Recordset</B> object.
<P>
Note that you should always close a <B>Recordset</B> object after
you have finished working with it, and before you close the <B>Database</B> object in which the recordset was created. Use the <B>Close</B>
method to close a <B>Recordset</B> object.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Table&#173;Type Recordset Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex25"></a>
<P>
The table&#173;type <B>Recordset</B> object represents a base
table in your database. All of the fields and records in the table
are included in a table&#173;type <B>Recordset</B> object. You
can use a table&#173;type <B>Recordset</B> object to add, delete,
or change records in a table in a Microsoft Jet workspace. You
can open a table&#173;type <B>Recordset</B> object on base tables
in a Microsoft Jet database, but not on tables in ODBC data sources
or linked tables. You can also use the table&#173;type <B>Recordset</B> object with installable ISAM databases (such as FoxPro, dBASE,
or Paradox) to open tables directly, rather than linking them
to your database. 
<P>
The <B>RecordCount</B> property of a table&#173;type <B>Recordset</B> object returns the number of records in the table. You can
return the value of the <B>RecordCount</B> property as soon as
you've created the recordset; you don't need to use the <B>MoveLast</B>
method to move to the end of the recordset.
<P>
The table&#173;type <B>Recordset</B> object can use the indexes
defined for the table. When you create a table&#173;type <B>Recordset</B> object, you can set the recordset's <B>Index</B> property
to the name of an index that is defined for the table. You can
then use the <B>Seek</B> method to search for a particular record
based on the ordering criteria specified by the index.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>You
can't open a table&#173;type Recordset object on a linked table
from an external data source. Instead, you must use the <B>OpenDatabase</B>
method to open the external data source, and then open a table&#173;type
Recordset object.
<P>
To create a table&#173;type <B>Recordset</B> object, specify the
<B>dbOpenTable</B> constant for the <I>type</I> argument
of the <B>OpenRecordset</B> method. The following example creates
a table&#173;type <B>Recordset</B> object and then uses the <B>Seek</B>
method to locate a particular record and make that record the
current record.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function ReturnEmployeesRecord(strKey As String) As Boolean
&#09;Dim dbs As Database, rst As Recordset
&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;On Error GoTo Err_ReturnEmployeesRecord
&#09;' Return reference to Northwind database.
&#09;Set dbs = OpenDatabase(conPath)
&#09;' Open table-type recordset on Employees table.
&#09;Set rst = dbs.OpenRecordset("Employees", dbOpenTable)
&#09;' Set Index property of recordset.
&#09;rst.Index = "LastName"
&#09;' Perform seek operation.
&#09;rst.Seek "=", strKey
&#09;' Check whether match is found.
&#09;If rst.NoMatch = False Then
&#09;&#09;' Print values of fields in first record found.
&#09;&#09;Debug.Print rst!EmployeeID, rst!FirstName &amp; " " &amp; rst!LastName, rst!Title
&#09;&#09;ReturnEmployeesRecord = True
&#09;Else
&#09;&#09;ReturnEmployeesRecord = False
&#09;End If

Exit_ReturnEmployeesRecord:
&#09;' Close recordset and database. 
&#09;rst.Close
&#09;dbs.Close
&#09;Exit Function

Err_ReturnEmployeesRecord:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;ReturnEmployeesRecord = False
&#09;Resume Exit_ReturnEmployeesRecord
End Function

</code></pre></FONT>

<A NAME="DYNATYP"></A>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Dynaset&#173;Type Recordset Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex26"></a>
<P>
The dynaset&#173;type <B>Recordset</B> object represents the result
of a query on one or more tables. A dynaset&#173;type <B>Recordset</B> object is a dynamic set of records that you can use to add,
change, or delete records from an underlying database table or
tables. With a dynaset&#173;type <B>Recordset</B> object, you
can extract and update data in a multiple&#173;table join, including
linked tables from multiple databases. You can create a dynaset&#173;type
<B>Recordset</B> object in a Microsoft Jet workspace or an ODBCDirect
workspace. A dynaset&#173;type <B>Recordset</B> object on a remote data source
consists of a series of bookmarks. Each bookmark uniquely identifies
one record in the recordset. The actual data in the fields of
the recordset is not returned until you specifically refer to
the record that contains that data. Microsoft DAO uses the bookmark
to find the appropriate record and return the requested data.
To improve performance, Microsoft DAO returns only the records
that you explicitly refer to in your code; it doesn't necessarily
return data from every record in the recordset. 
<P>
In order to return the value of the <B>RecordCount</B> property
for a dynaset&#173;type <B>Recordset</B> object, you must first
use the <B>MoveLast</B> method to move to the end of the recordset.
Moving to the end of the recordset retrieves all of the records
in the recordset.
<P>
A dynaset&#173;type <B>Recordset</B> object may be updatable,
but not all fields can be updated in all dynaset&#173;type <B>Recordset</B> objects. To determine whether you can update a particular
field, check the setting of the <B>DataUpdatable</B> property
of the <B>Field</B> object.
<P>
A dynaset&#173;type <B>Recordset</B> object may not be updatable
if:
<P>

<UL>
<P>
<LI>The data page the user is
trying to update is locked by another user.
<P>
<LI>The
record has changed since it was last read.
<P>
<LI>The
user doesn't have permission to update the recordset.
<P>
<LI>One
or more of the tables or fields are read&#173;only.
<P>
<LI>The
database is opened for read&#173;only access.
<P>
<LI>The
<B>Recordset</B> object was created from multiple tables without
a JOIN statement.
<P>
<LI>The <B>Recordset</B> object
includes fields from an ODBC data source, or Paradox table or
tables, and there isn't a unique index on those table or tables.
<P>
</UL>

<P>
To create a dynaset&#173;type <B>Recordset</B> object, specify
the <B>dbOpenDynaset</B> constant for the <I>type</I>
argument of the <B>OpenRecordset</B> method, as shown in the following
example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub PrintHireDates()
&#09;Dim dbs As Database, rst As Recordset
&#09;Dim strSQL As String
&#09;Const conPath = "C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;' Open database and return reference to Database object.
&#09;Set dbs = DBEngine.Workspaces(0).OpenDatabase(conPath)
&#09;' Initialize SQL string.
&#09;strSQL = "SELECT FirstName, LastName, HireDate FROM Employees " &amp; _
&#09;&#09;"WHERE HireDate &lt;= #1-1-93# ORDER BY HireDate;"
&#09;' Open dynaset-type recordset.
&#09;Set rst = dbs.OpenRecordset(strSQL, dbOpenDynaset)
&#09;' Print records in recordset.
&#09;Do Until rst.EOF
&#09;&#09;Debug.Print rst!FirstName, rst!LastName, rst!HireDate
&#09;&#09;rst.MoveNext
&#09;Loop
&#09;' Close recordset and database.
&#09;rst.Close
&#09;dbs.Close
End Sub

</code></pre></FONT>


<A NAME="SNAPTYP"></A>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Snapshot&#173;Type Recordset Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex27"></a>
<P>
A snapshot&#173;type <B>Recordset</B> object is a static set of
records that represents the results of a query. A snapshot&#173;type
<B>Recordset</B> object includes all values for all the requested
fields in your query, whether you refer to them in code or not.
A snapshot&#173;type <B>Recordset</B> object requires fewer resources
than the dynaset&#173;type <B>Recordset</B> object, but the data
in a snapshot&#173;type <B>Recordset</B> object cannot be updated.
<P>
As you move through a snapshot&#173;type <B>Recordset</B> object
for the first time, all data is copied first into memory and then,
if the recordset is large, into a temporary Microsoft Jet database
on the user's computer. You can scroll forward and backward through
the resulting set of data.
<P>
To create a snapshot&#173;type <B>Recordset</B> object, specify
the <B>dbOpenSnapshot</B> constant for the <I>type</I>
argument of the <B>OpenRecordset</B> method.
<P>
<A NAME="FOROTYP"></A>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Forward&#173;Only&#173;Type Recordset Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex28"></a>
<P>
A forward&#173;only&#173;type <B>Recordset</B> object is identical
to a snapshot, except that you can only scroll forward through
its records. This improves performance in situations where you
only need to make a single pass through a result set. 
<P>
When working with a forward&#173;only&#173;type <B>Recordset</B>
object, you cannot use the <B>MovePrevious</B> or <B>MoveFirst</B>
methods, or the <B>Move</B> method with a negative integer for
the <I>rows</I> argument. In a forward&#173;only&#173;type
<B>Recordset</B> object, only one record exists at any given time.
Therefore, you cannot use the <B>MoveLast</B> method because it
implies that you have a set of records. Forward&#173;only&#173;type
<B>Recordset</B> objects offer less flexibility than other <B>Recordset</B> objects, but they usually provide the greatest speed.
<P>
To create a forward&#173;only&#173;type <B>Recordset</B> object,
specify the <B>dbOpenForwardOnly</B> constant for the <I>type</I>
argument of the <B>OpenRecordset</B> method.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H218">The Group Object and the Groups Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex29"></a>
<P>
The <B>Group</B> object represents a group of user accounts that
have common access permissions in a particular workspace. The
<B>Groups</B> collection contains all <B>Group</B> objects in
a workspace or a user account. The following table shows the relationship
between the <B>Group</B> object and the <B>Groups</B> collection
and other objects and collections in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Group</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Groups</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Group</B> objects
<P>
<B>Properties</B> collection
<P>
<B>Users</B> collection</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Groups</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspace</B> object
<P><B>User</B> object
</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Group</B> objects
</FONT>
</TD></TR>
</TABLE>
<P>
You can use the <B>Group</B> object, along with the <B>User</B>,
<B>Container</B>, <B>Document</B>, and <B>Workspace</B> objects,
to secure your database. The <B>Group</B> object represents a
group of user accounts, and the <B>User</B> object represents
an individual user account. Users can be members of groups. When
you establish security in your database, you secure a particular
object or set of objects by specifying what type of permissions
a user or group has for that object. If a group has certain permissions
for an object, all users in the group have the same permissions.
Conversely, if a user has permissions for an object, the group
to which that user belongs has the same permissions.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The
easiest way to secure your database is through the Microsoft Access
user interface. From Microsoft Access, you can manage user and
group accounts and assign permissions for objects with relative
ease. For more information about securing a database in Microsoft
Access, search Microsoft Access Help for "security,"
or see Chapter&nbsp;14, "Securing Your Application,"
in <I>Building Applications with Microsoft Access&nbsp;97</I>.
<P>
Both a <B>Workspace</B> object and a <B>User</B> object have a
<B>Groups</B> collection. When you create a <B>Group</B> object,
you should first append it to the <B>Groups</B> collection of
a <B>Workspace</B> object. This notifies Microsoft Jet that the
group exists.
<P>
After you've created a group and added it to the <B>Groups</B>
collection of the <B>Workspace</B> object, you need to specify
which users belong to that group. To do so, you can append the
new <B>Group</B> object to the <B>Groups</B> collection of a <B>User</B> object. In this way, you specify that a particular user belongs
to this group. Alternatively, you can append a <B>User</B> object
to the <B>Users</B> collection in a <B>Group</B> object to give
a particular user account the permissions held by that group.
In either case, the existing <B>Group</B> object must already
be a member of the <B>Groups</B> collection of the current <B>Workspace</B> object.
<P>
The following example creates a new group, the Managers group,
and appends it to the <B>Groups</B>
collection of the default
workspace.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function AddNewGroup() As Boolean
&#09;Dim wrk As Workspace, grp As Group

&#09;Const conAccountExists As Integer = 3390

&#09;On Error GoTo Err_AddNewGroup
&#09;Set wrk = DBEngine.Workspaces(0)
&#09;Set grp = wrk.CreateGroup("Managers", "123abc")
&#09;wrk.Groups.Append grp
&#09;AddNewGroup = True

Exit_AddNewGroup:
&#09;Exit Function

Err_AddNewGroup:
&#09;If Err &lt;&gt; conAccountExists Then
&#09;&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;&#09;AddNewGroup = False
&#09;Else
&#09;&#09;AddNewGroup = True
&#09;End If
&#09;Resume Exit_AddNewGroup
End Function

</code></pre></FONT>



<P>
After you've run this example, the Managers group exists, but
no user accounts belong to it. The example in the following section
adds user accounts to the Managers group.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H219">The User Object and the Users Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex30"></a>
<P>
The <B>User</B> object represents a user account with particular
access permissions. The <B>Users</B> collection contains all <B>User</B> objects in a given workspace or group. The following table
shows the relationship between the <B>User</B> object and the
<B>Users</B> collection and other objects and collections in a
Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object or collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Is contained by</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>User</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Users</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Groups</B> collection
<P><B>Properties</B> collection
<P><B>User</B> objects
</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Users</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspace</B> object
<P><B>Group</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>User</B> objects</FONT>
</TD></TR>

</TABLE>
<P>
Like the <B>Groups</B> collection, the <B>Users</B> collection
is a member of a <B>Workspace</B> object. Each <B>User</B> object
in the <B>Users</B> collection of a <B>Workspace</B> object also
has a <B>Groups</B> collection, in the same way that each <B>Group</B> object in the <B>Groups</B> collection of a <B>Workspace</B> object
has a <B>Users</B> collection. To make a user a member of a particular
group, you can append a <B>User</B> object to the <B>Users</B> collection
of that <B>Group</B> object. You can achieve the same result by
appending the <B>Group</B> object to the <B>Groups</B> collection
of that <B>User</B> object. In either case, the existing <B>User</B> object must already be a member of the <B>Users</B> collection
of the current <B>Workspace</B> object. 
<P>
The following example creates a new <B>User</B> object and appends
it to the <B>Users</B> collection of the default workspace. Next,
it appends the <B>User</B> object to the <B>Users</B> collection
of the Managers group created in the previous example. Note that
because the <B>User</B> object doesn't already exist in the <B>Users</B> collection of the <B>Group</B> object, you must use the <B>CreateUser</B>
method a second time to create the object there. However, you
don't need to specify the <I>pid</I> and <I>password</I>
arguments a second time.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function AddNewUser() As Boolean
&#09;Dim wrk As Workspace, grp As Group, usr As User

&#09;Const conAccountExists As Integer = 3390

&#09;On Error GoTo Err_AddNewUser
&#09;Set wrk = DBEngine.Workspaces(0)
&#09;Set usr = wrk.CreateUser("Joe Manager", "efg456", "")
&#09;wrk.Users.Append usr
&#09;Set grp = wrk.Groups("Managers")
&#09;Set usr = grp.CreateUser("Joe Manager")
&#09;grp.Users.Append usr
&#09;AddNewUser = True

Exit_AddNewUser:
&#09;Exit Function

Err_AddNewUser:
&#09;If Err &lt;&gt; conAccountExists Then
&#09;&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;&#09;AddNewUser = False
&#09;Else
&#09;&#09;AddNewUser = True
&#09;End If
&#09;Resume Exit_AddNewUser
End Function

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H220">The Container Object and the Containers
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex31"></a>
<P>
The <B>Container</B> object represents a particular set of objects
in a database for which you can assign permissions in a secure
workgroup. The <B>Containers</B> collection contains all the <B>Container</B> objects in the database. The following table shows the relationship
between the <B>Container</B> object and the <B>Containers</B> collection
and other objects and collections in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Container</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Containers</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Documents</B> collection
<P><B>Properties</B> collection</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Containers</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Database</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Container</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
DAO provides three types of <B>Container</B> objects; every database
contains at least these three <B>Container</B> objects. The following
table describes the types of <B>Container</B> objects provided
by DAO.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Container name</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD>
<TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains information about</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Databases</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved databases</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Tables</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved tables and queries</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Relationships</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved relationships</FONT>
</TD></TR><P>
</TABLE>
<P>
Each <B>Container</B> object can contain a <B>Documents</B> collection.
The <B>Documents</B> collection contains individual <B>Document</B> objects, each of which represents a document in your database.
For more information about <B>Document</B> objects, see the following
section, "<A HREF="#CH011H221">The Document Object and the Documents Collection</A>."
<P>
In addition to the <B>Container</B> objects provided by DAO, an
application may define its own <B>Container</B> objects. For example,
the following table lists the <B>Container</B> objects defined
by Microsoft Access.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Container name</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD>
<TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Contains information about</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Forms</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved forms</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Modules</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved modules</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Reports</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved reports</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Scripts</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved macros</FONT>
</TD></TR><P>
</TABLE>
<P>
You use <B>Container</B> objects to establish permissions on a
set of objects for a user or group. The following example establishes
permissions for a group, and any users that belong to it, for
the Tables container. To establish permissions, the function first
sets the <B>UserName</B> property of the Tables container to the
name of a group, then sets the <B>Permissions</B> property to
the appropriate permissions.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function SetGroupPermissions(strGroupName As String) As Boolean
&#09;Dim dbs As Database, ctr As Container

&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;On Error GoTo Err_SetGroupPermissions
&#09;Set dbs = DBEngine(0).OpenDatabase(conPath)
&#09;' Return a reference to the Databases container.
&#09;Set ctr = dbs.Containers("Databases")
&#09;' Set UserName property to name of group.
&#09;ctr.UserName = strGroupName
&#09;' Set permissions for the group on the Databases container.
&#09;ctr.Permissions = dbSecDBOpen

&#09;' Return a reference to the Tables container.
&#09;Set ctr = dbs.Containers("Tables")
&#09;' Set UserName property to name of group.
&#09;ctr.UserName = strGroupName
&#09;' Set permissions for the group on the Tables container.
&#09;ctr.Permissions = dbSecRetrieveData or dbSecInsertData or _
&#09;&#09;dbSecReplaceData or dbSecDeleteData
&#09;SetGroupPermissions = True

Exit_SetGroupPermissions:
&#09;Exit Function

Err_SetGroupPermissions:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;SetGroupPermissions = False
&#09;Resume Exit_SetGroupPermissions
End Function

</code></pre></FONT>


To establish permissions for the Managers group on the Tables
container, you can call the SetGroupPermissions function as follows.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub SetManagerPermissions()
&#09;If SetGroupPermissions("Managers") = True Then
&#09;&#09;MsgBox "Permissions for Managers group set successfully."
&#09;Else
&#09;&#09;MsgBox "Permissions for Managers group not set."
&#09;End If
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H221">The Document Object and the Documents
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex32"></a>
<P>
The <B>Document</B> object represents an individual object in
a database for which you can assign permissions in a secure workgroup.
The <B>Documents</B> collection contains all of the <B>Document</B> objects in a given <B>Container</B> object. The following
table shows the relationship between the <B>Container</B> object
and the <B>Containers</B> collection and other objects and collections
in a Microsoft Jet workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Document</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Documents</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Properties</B> collection</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Documents</B>
collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Container</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Document</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
The following table describes the <B>Document</B> objects provided
by DAO. It lists the type of object each <B>Document</B>
object describes, the name of its <B>Container</B> object, and
what type of information it contains.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Document</FONT></B></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Container</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains information about</FONT></B>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Database</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Databases</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved database</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Table or query</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Tables</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved table or query</FONT></TD>
</TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Relationship</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Relationships</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved relationship</FONT></TD>
</TR><P>
</TABLE>
<P>
Other applications can define additional <B>Document</B> objects.
For example, the following table lists the <B>Document</B> objects
defined by Microsoft Access.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Document</FONT></B></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Container</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains information about</FONT></B>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Form</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Forms</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved form</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Macro</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Scripts</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved macro</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Module</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Modules</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved module</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Report</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Reports</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Saved report</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SummaryInfo</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Databases</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Database document summary</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">UserDefined</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Databases</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">User-defined properties</FONT>
</TD></TR><P>
</TABLE>
<P>
The following example establishes permissions for a particular
user on all the existing Table <B>Document</B> objects in the
<B>Documents</B> collection of the Tables <B>Container</B> object.
Table <B>Document</B> objects represent either tables or queries.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function SetPermissionsOnDocument(strUserName As String) As Boolean
&#09;Dim dbs As Database, ctr As Container, doc As Document 

&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;On Error GoTo Err_SetPermissionsOnDocument
&#09;' Return reference to Northwind sample database.
&#09;Set dbs = DBEngine(0).OpenDatabase(conPath)
&#09;' Return reference to Tables container.
&#09;Set ctr = dbs.Containers("Tables")
&#09;' Enumerate through documents in Tables container.
&#09;For Each doc In ctr.Documents
&#09;&#09;' Set UserName property to name of user.
&#09;&#09;doc.UserName = strUserName
&#09;&#09;' Set permissions for that user on the document.
&#09;&#09;doc.Permissions = dbSecRetrieveData or dbSecInsertData or _
&#09;&#09;&#09;dbSecReplaceData or dbSecDeleteData
&#09;Next doc
&#09;SetPermissionsOnDocument = True

Exit_SetPermissionsOnDocument:
&#09;Exit Function

Err_SetPermissionsOnDocument:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;SetPermissionsOnDocument = False
&#09;Resume Exit_SetPermissionsOnDocument
End Function

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H222">The Properties Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex33"></a>
<P>
Most DAO objects contain a <B>Properties</B> collection. Each
<B>Property</B> object in the <B>Properties</B> collection corresponds
to a property of the object. You can use an object's <B>Properties</B> collection either to determine which properties apply to a
particular object or to return their settings. For example, the
following procedure loops through the properties that apply to
the <B>Database</B> object, which represents the current database.
The procedure displays the name of each property in the Debug
window.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub DisplayProperties()
&#09;Dim dbs As Database, prp As Property

&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;' Open database and return reference.
&#09;Set dbs = OpenDatabase(conPath)
&#09;Debug.Print "Current Database Properties"
&#09;' Enumerate Properties collection.
&#09;For Each prp In dbs.Properties
&#09;&#09;Debug.Print prp.Name
&#09;Next prp
&#09;dbs.Close
End Sub

</code></pre></FONT>



<P>
Some properties of DAO objects don't automatically exist in the
<B>Properties</B> collection for that object. Before you can set
a property of this type, you must create a <B>Property</B> object
to represent the property and append the new <B>Property</B> object
to the <B>Properties</B> collection. After you create the property
and append it to the collection, you can set or read it as you
would any other property.
<P>
When you're writing code that uses this type of property, it's
a good idea to implement error handling in case the property does
not yet exist in the collection. The following function is a generic
procedure that you can use to set any property that doesn't automatically
exist in an object's <B>Properties</B> collection. It implements
error handling. The first time you call the procedure, an error
occurs because the property does not yet exist within the <B>Properties</B> collection. Within the error handler, the procedure creates
the new <B>Property</B> object and appends it to the collection.
The next time you call the procedure, the error does not occur
because the property already exists, and the property is set with
the value you've specified.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function SetProperty(obj As Object, strName As String, _
&#09;&#09;intType As Integer, varSetting As Variant) As Boolean
&#09;Dim prp As Property

&#09;Const conPropNotFound As Integer = 3270

&#09;On Error GoTo Error_SetProperty
&#09;' Explicitly refer to Properties collection.
&#09;obj.Properties(strName) = varSetting
&#09;SetProperty = True

Exit_SetProperty:
&#09;Exit Function

Error_SetProperty:
&#09;If Err = conPropNotFound Then
&#09;&#09;' Create property, denote type, and set initial value.
&#09;&#09;Set prp = obj.CreateProperty(strName, intType, varSetting)
&#09;&#09;' Append Property object to Properties collection.
&#09;&#09;obj.Properties.Append prp
&#09;&#09;obj.Properties.Refresh
&#09;&#09;SetProperty = True
&#09;&#09;Resume Exit_SetProperty
&#09;Else
&#09;&#09;MsgBox Err &amp; ": " &amp; vbCrLf &amp; Err.Description
&#09;&#09;SetProperty = False
&#09;&#09;Resume Exit_SetProperty
&#09;End If
End Function

</code></pre></FONT>



<P>
To set the <B>ReplicableBool</B> property of a <B>Database</B> object,
you can call the preceding function as follows.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub ReplicateDatabase()
&#09;Dim dbs As Database

&#09;Const conPath As String = _
&#09;&#09;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"

&#09;Set dbs = OpenDatabase(conPath, True)
&#09;If SetProperty(dbs, "ReplicableBool", dbBoolean, True) Then
&#09;&#09;Debug.Print "Database replicated successfully."
&#09;Else
&#09;&#09;Debug.Print "Database not replicated."
&#09;End If
End Sub

</code></pre></FONT>



<P>
The SetProperty function shown in the previous example is a generic
procedure that you can use to set any property, including those
that must first be appended to the <B>Properties</B> collection.
You can compare this function to the ReplicateDatabase function
shown earlier in this chapter, in "<A HREF="#CreateDAOReps">Creating Database Replicas
with DAO</A>." Both functions achieve the same end, but the SetProperty
function can be used to set any property, while the ReplicateDatabase
function sets only the <B>ReplicableBool</B> property.
<P>
Each time you set or read a property that doesn't automatically
exist in the <B>Properties</B> collection for an object, you must
refer to the <B>Properties</B> collection explicitly. For example,
each time you refer to the <B>ReplicableBool</B> property after
it has been set, you must refer to it within the <B>Properties</B> collection, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim dbs As Database
Const conPath As String = _
&nbsp;&nbsp;&nbsp;"C:\Program Files\Microsoft Office\Office\Samples\Northwind.mdb"
Set dbs = OpenDatabase(conPath)
Debug.Print dbs.Properties("ReplicableBool") 

</code></pre></FONT>


You can also use the SetProperty function shown in the previous
example to define custom properties on DAO objects. For example,
you may want to define a property that stores the name of the
user who last modified a particular table. When you set or read
a custom property, you must refer to the <B>Properties</B> collection
explicitly, as shown in the previous examples.
<P>
Some applications define their own properties for DAO objects.
For example, Microsoft Access defines properties for DAO <B>TableDef</B>,
<B>QueryDef</B>, <B>Field</B>, and <B>Document</B> objects. If
you're working with a database that has been opened in Microsoft
Access, some of these properties may be defined for DAO objects.
<P>
For more information about the <B>Properties</B> collection, search
DAO Help for "properties, collection" and "CreateProperty
method."
<A NAME="PG011C3"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H103">Accessing ODBC Data</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>
<P>

When you're working with an ODBC data source, you'll need to decide
whether you should use ODBC with Microsoft Jet, ODBCDirect, or
both. This section discusses the advantages of both ODBC with
Microsoft Jet and ODBCDirect. It also explains how to register
an ODBC data source, whether you're working with a Microsoft Jet
workspace or with an ODBCDirect workspace.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H223">Accessing ODBC Data with Microsoft Jet</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex34"></a>
The following capabilities are supported in Microsoft Jet workspaces,
but not in ODBCDirect workspaces:

<UL>
<P>
<LI><B>Updatable Joins&nbsp;&nbsp;&nbsp;</B>You
can update data in <B>Recordset</B> objects based on multiple&#173;table
joins.
<P>
<LI><B>Support for Linked Tables&nbsp;&nbsp;&nbsp;</B>You
can store persistent links to server data in a local Microsoft
Jet database. When you link a table, you can cache information
about the table's structure, including field and index information,
in your local database. The next time you access that table, the
connection is quicker because you don't need to retrieve the structural
information from the data source again.
<P>
<LI><B>Support for the Find Methods&nbsp;&nbsp;&nbsp;</B>You can
use the <B>FindFirst</B>, <B>FindNext</B>, <B>FindPrevious</B>,
and <B>FindLast</B> methods with <B>Recordset</B> objects in a
Microsoft Jet workspace.
<P>
<LI><B>Partial Failures
of Update Queries&nbsp;&nbsp;&nbsp;</B>If you have
a bulk&#173;operation query, and it fails for some reason, the
query stops, giving you the opportunity to decide whether or not
you want to commit the changes made up to the point of failure.
<P>
<LI><B>User&#173;Defined
Properties&nbsp;&nbsp;&nbsp;</B>You can customize
DAO objects by adding persistent properties to existing objects.
For example, you can add a Description property to an object so
that you can store descriptive text about the object.
<P>
<LI><B>Crosstab
Queries&nbsp;&nbsp;&nbsp;</B>You can use the SQL TRANSFORM
statement to create crosstab queries that summarize data.
<P>
<LI><B>Heterogeneous
Data Access&nbsp;&nbsp;&nbsp;</B>You can work with
server data, native Microsoft Jet database (.mdb file) data, and
external installable ISAM data such as FoxPro, Paradox, and dBASE
data. You can perform joins on tables in different data sources.
<P>
<LI><B>Programmatic
Data Definition Language (DDL)&nbsp;&nbsp;&nbsp;</B>You
can use DAO to perform operations that affect the structure of
your database. For example, you can create, delete, and modify
tables.
<P>
<LI><B>Form and Control Binding&nbsp;&nbsp;&nbsp;</B>If
your application requires that forms or controls be bound to data
in an ODBC data source, you must use Microsoft Jet. Data accessed
within an ODBCDirect workspace cannot be bound to forms or controls
because ODBCDirect does not support linked tables.
<A NAME="CH011H224"></A>
</UL>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Accessing ODBC Data with ODBCDirect</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex35"></a>
With ODBCDirect, you can access server data by using the existing
DAO object model directly on top of the ODBC application programming
interface (API). ODBCDirect implements a thin code layer over
the ODBC API that establishes connections, creates cursors, and
runs complex procedures using minimal workstation resources, without
going through Microsoft Jet. ODBCDirect offers the following advantages:

<UL>
<P>
<LI><B>Direct Access&nbsp;&nbsp;&nbsp;</B>Your
application can access ODBC data sources directly. You can improve
performance, reduce network traffic, and take advantage of the
server's capabilities by processing more data on the server.
<P>
<LI><B>Reduced
Resource Requirements&nbsp;&nbsp;&nbsp;</B>You don't
have to go through the Microsoft Jet database engine, so your
application requires fewer resources at the workstation. If you're
using ODBCDirect from Microsoft Access, keep in mind that Microsoft
Access always loads Microsoft Jet, even though ODBCDirect operations
don't go through Microsoft Jet.
<P>
<LI><B>Improved
Access to Server&#173;Specific Functionality&nbsp;&nbsp;&nbsp;</B>You
can take advantage of features specific to the ODBC server that
aren't available if you're using ODBC through Microsoft Jet. For
example, in an ODBCDirect workspace, you can specify where cursors
are located&nbsp;&#151; on the client or on the server&nbsp;&#151;
for servers that support different types of cursors. In addition,
to interact with stored procedures on the server, you can specify
input values and check return values; operations that are not
possible in a Microsoft Jet workspace.
<P>
<LI><B>Asynchronous
Queries&nbsp;&nbsp;&nbsp;</B>You can run a query and
perform other operations without waiting for the query to finish.
You can then check properties to keep track of the query's progress.
You can enhance concurrency and optimize performance with asynchronous
queries.
<P>
<LI><B>Batch Optimistic Updating&nbsp;&nbsp;&nbsp;</B>With
batch optimistic updating, you can cache <B>Recordset</B> changes
locally and then submit these changes to the server in a single
batch.
<P>
<LI><B>Flexible Stored Procedure Execution&nbsp;&nbsp;&nbsp;</B>You
can handle output parameters and return values from stored procedures.
</UL>

<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>You
can't perform DDL operations with DAO in an ODBCDirect workspace,
but you can run SQL DDL statements to modify the structure of
the database.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H225">Registering an ODBC Data Source</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex36"></a>
Before you can use ODBC in a Microsoft Jet workspace or in an
ODBCDirect workspace, you must register the ODBC data source.
Registering the data source stores information about the data
source in the Windows Registry and makes this information available
to applications. You can register a data source from the ODBC
data source manager or from Visual Basic.
<P>
<FONT COLOR=#0000FF><IMG SRC="Proced.gif"><B>To
register a SQL Server data source by using the ODBC data source
manager</B></FONT>

<OL>
<P>
<LI>In Windows Control Panel,
double&#173;click the 32bit ODBC icon.
<P>
<LI>Click <B>Add</B> and then double&#173;click the ODBC driver for the
data source you want to access. For example, double&#173;click <B>SQL Server</B>.
<P>
<LI>In the <B>Data Source Name</B>
box, type a data source name (DSN). This can be any string, such
as SalesDB or Pubs. The string doesn't have to correspond to the
actual name of a database or table you want to access. 
<P>
<LI>In
the <B>Description</B> box, type a description of the database,
such as Sales Data for 1996. You can enter any text.
<P>
<LI>In
the <B>Server</B> box, type the name of the network server where
your data source resides. Do not include a double&#173;backslash
(\\) before the name.
<P>
<LI>Click <B>Options</B>,
and then type the name of the database you want to access in the
<B>Database Name</B> box. For example, to specify the Microsoft
SQL Server Pubs sample database, type <B>Pubs</B>.
</OL>

<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>This
procedure describes the steps for registering a Microsoft SQL
Server data source. The steps for registering other ODBC data
sources may vary because each data source driver requires a different
set of information. If the dialog box for the data source you
selected has values not described in the preceding steps, click
the Help button for more information.
<P>
In some cases, you may want to register the data source in Visual
Basic code instead of relying on users to register it with the
ODBC data source manager. To do this, use the <B>RegisterDatabase</B>
method of the <B>DBEngine</B> object. The following example registers
a data source named Pubs.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function RegisterDB() As Boolean
&#09;Dim str As String

&#09;On Error GoTo Err_RegisterDB
&#09;' Build keywords string.
&#09;str = "Description=SQL Server on Server Publishers" &amp; _
&#09;&#09;vbCr &amp; "OemToAnsi=No" &amp; _
&#09;&#09;vbCr &amp; "Network=(Default)" &amp; _
&#09;&#09;vbCr &amp; "Address=(Default)" &amp; _
&#09;&#09;vbCr &amp; "Server=Publishers" &amp; _
&#09;&#09;vbCr &amp; "Database=Pubs"
&#09;' Register database.
&#09;DBEngine.RegisterDatabase "Pubs", "SQL Server", True, str
&#09;RegisterDB = True

Exit_RegisterDB:
&#09;Exit Function

Err_RegisterDB:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;RegisterDB = False
&#09;Resume Exit_RegisterDB
End Function

</code></pre></FONT>


<A NAME="PG011C4"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H104">Using DAO with ODBCDirect</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex37"></a>
<P>
The object model for an ODBCDirect workspace includes a subset
of the objects in a Microsoft Jet workspace, with the addition
of a new object, the <B>Connection</B> object. The following diagram
shows the object model for ODBCDirect workspaces; the subsequent
sections describe the objects themselves, to the extent that they
differ from the objects in the Microsoft Jet object model.
<P>
<A NAME="CH011H226"><IMG SRC="01102.gif"></A>
<BR>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>The DBEngine Object</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex38"></a>
<P>
The <B>DBEngine</B> object contains both Microsoft Jet and ODBCDirect
workspaces. As mentioned earlier in this chapter, the <B>DefaultType</B>
property of the <B>DBEngine</B> object determines what type of
<B>Workspace</B> object is created by default when you use the
<B>CreateWorkspace</B> method. If you set the <B>DefaultType</B>
property to <B>dbUseODBC</B>, then the default workspace is an
ODBCDirect workspace. When you're creating a workspace, you can
override the setting for this property by specifying either <B>dbUseJet</B>
or <B>dbUseODBC</B> as the <I>type</I> argument of
the <B>CreateWorkspace</B> method. For example, if the <B>DefaultType</B>
property is set to <B>dbUseJet</B> and you want to create an ODBCDirect
workspace, specify the <B>dbUseODBC</B> constant as the <I>type</I>
argument of the <B>CreateWorkspace</B> method. Conversely, if
the <B>DefaultType</B> property is set to <B>dbUseODBC</B> and
you want to create a Microsoft Jet workspace, specify the <B>dbUseJet</B>
constant as the <I>type</I> argument of the <B>CreateWorkspace</B>
method.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you're programming in Microsoft Access, avoid setting the DefaultType
property to dbUseODBC. Because Microsoft Access uses DAO and Microsoft
Jet for many types of operations, setting the DefaultType property
to dbUseODBC may cause unexpected results.
<P>
The following example creates an ODBCDirect workspace.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wrkODBC As Workspace
Set wrkODBC = DBEngine.CreateWorkspace("NewODBCWrk", "Admin", "", dbUseODBC)

</code></pre></FONT>



<P>
Because you can use both Microsoft Jet and ODBCDirect workspaces
in your code, you may need to determine the type of a <B>Workspace</B>
object after it is created. You can do this by using the <B>Type</B>
property of the <B>Workspace</B> object. The <B>Type</B> property
is read&#173;only once it is set and returns either <B>dbUseJet</B>
or <B>dbUseODBC</B>.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H227">The Workspace Object and the Workspaces
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex39"></a>
<P>
The <B>Workspace</B> object represents an ODBCDirect workspace.
The <B>Workspaces</B> collection contains the set of all active
ODBCDirect workspaces. The following table shows the relationship
between the <B>Workspace</B> object and the <B>Workspaces</B>
collection and other objects and collections in an ODBCDirect
workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspace</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspaces</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Connections</B> collection
<P><B>Databases</B> collection
<P><B>Properties</B> collection
</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspaces</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DBEngine</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Workspace</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
The first step in using ODBCDirect is to create an ODBCDirect
workspace with the <B>CreateWorkspace</B> method. The ODBCDirect
workspace routes calls directly to the ODBC application programming
interface (API), as opposed to the Microsoft Jet workspace, which
first routes calls to the Microsoft Jet database engine, and then
to the ODBC API if you're using ODBC.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H228">The Connection Object and the Connections
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex40"></a>
<P>
After you've created an ODBCDirect workspace, you can connect
to an ODBC data source. To connect to an ODBC data source, you
can use the <B>OpenConnection</B> method to open a new <B>Connection</B> object, or you can use the <B>OpenDatabase</B> method to open
a new <B>Database</B> object. This section explains how to use
the <B>Connection</B> object. For information on how to use a
<B>Database</B> object, see the following section, "<A HREF="#CH011H210">The Database Object and the Databases Collection</A>."
<P>
A <B>Connection</B> object represents a connection to an ODBC
database in an ODBCDirect workspace. The <B>Connections</B> collection
contains all currently open <B>Connection</B> objects. When you
open a <B>Connection</B> object, it is automatically appended
to the <B>Connections</B> collection of the <B>Workspace</B> object.
When you close a <B>Connection</B> object with the <B>Close</B>
method, it is removed from the <B>Connections</B> collection.
<P>
The <B>Connection</B> object provides the following advantages
for accessing ODBC data:
<P>

<UL>
<P>
<LI><B>Asynchronous Connection&nbsp;&nbsp;&nbsp;</B>Your
application can connect to an ODBC data source asynchronously.
Rather than pausing execution while the connection is established,
your code can continue to perform other operations, and can later
check to determine whether the connection was made successfully.
<P>
<LI><B>Asynchronous
Queries&nbsp;&nbsp;&nbsp;</B>Your application can
run queries against your ODBC data source asynchronously. Rather
than pausing execution while a long query runs, your code can
perform other tasks, and then check later to determine whether
the query has run successfully.
<P>
<LI><B>QueryDef
Objects&nbsp;&nbsp;&nbsp;</B>You can define <B>QueryDef</B>
objects that represent queries in the ODBC data source.
<P>
</UL>

<P>
You can use the <B>OpenConnection</B> method to create a <B>Connection</B>
object. The syntax of the <B>OpenConnection</B> method is:
<P>
<B>Set</B> <I>connection</I> <B>=</B> <I>workspace</I>.<B>OpenConnection</B>
<B>(</B><I>name</I>, <I>options</I>, <I>readonly</I>,
<I>connect</I><B>)</B>
<P>
The <I>connection</I> argument is the name of the
new <B>Connection</B> object. The <I>workspace</I>
argument is the name of an ODBCDirect <B>Workspace</B> object
from which you're creating the new <B>Connection</B> object.
<P>
The <I>name </I>argument indicates the name of the
registered data source. You can reference the new <B>Connection</B>
object by using either the data source name (DSN) or the <B>Connection</B>
object's ordinal position within its collection. The <I>options</I>
argument determines if and when to prompt the user to establish
the connection, and whether or not to open the connection asynchronously.
The <I>readonly</I> argument controls the updatability
of the data accessed through the connection. Set this argument
to <B>True</B> to prevent updates; set it to <B>False</B> to allow
updates.
<P>
The <I>connect</I> argument is a valid connect string
that supplies parameters to the ODBC driver manager. These parameters
can include user name, password, default database, and data source
name (DSN), which overrides the value provided in the <I>name</I>
argument.
<P>
The connect string must start with <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">"ODBC;"</FONT>,
and must contain a series of values needed by the driver to access
the data. The actual connect string can vary depending on the
data source you're trying to access; different ODBC data sources
require different parameters in the <I>connect</I>
argument. Usually, the minimum requirement is a user ID, a password,
and a DSN, as shown in the following example:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ODBC;UID=JamesK;PWD=OpenSesame;DSN=MasterData

</code></pre></FONT>

When the ODBC driver processes the connect string and one or more
of the parameters required by the data source is missing, the
driver displays a dialog box that asks for the information. If
you don't want this dialog box displayed, you must make sure that
the connect string has all the required information.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>If
you are trying to connect to a Microsoft SQL Server database that
uses integrated security, omit the user ID (UID) and password
(PWD) values because your Windows NT&reg; user name and password
are automatically used. For example, the connect string may look
something like the following:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ODBC;UID=;PWD=;DATABASE=Pubs;DSN=Pubs

</code></pre></FONT>

For more information about parameters that can be included in
a connect string, search DAO Help for "Connect property."
The following example illustrates how to use the <B>OpenConnection</B>
method to open a new <B>Connection</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function OpenPubsConnection() As Boolean
&#09;Dim wrk As Workspace, cnn As Connection, rst As Recordset, fld As Field
&#09;Dim strConnect As String, strSQL As String

&#09;On Error GoTo Err_OpenPubsConnection
&#09;' Create connnect string.
&#09;strConnect = "ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs"
&#09;' Create SQL string.
&#09;strSQL = "SELECT * FROM Authors WHERE State = 'MD';"

&#09;' Create ODBCDirect workspace.
&#09;Set wrk = DBEngine.CreateWorkspace("NewODBCDirect", "sa", "", dbUseODBC)
&#09;' Open connection.
&#09;Set cnn = wrk.OpenConnection("Pubs", dbDriverNoPrompt, False, strConnect)
&#09;' Open recordset on connection.
&#09;Set rst = cnn.OpenRecordset(strSQL, dbOpenDynaset)
&#09;' Print values in recordset.
&#09;Do Until rst.EOF
&#09;&#09;For Each fld In rst.Fields
&#09;&#09;&#09;Debug.Print fld.Name, fld.Value
&#09;&#09;Next fld
&#09;&#09;Debug.Print
&#09;&#09;rst.MoveNext
&#09;Loop
&#09;OpenPubsConnection = True

Exit_OpenPubsConnection:
&#09;rst.Close
&#09;cnn.Close
&#09;Exit Function

Err_OpenPubsConnection:
&#09;MsgBox "Error " &amp; Err &amp; ": " &amp; Err.Description
&#09;OpenPubsConnection = False
&#09;Resume Exit_OpenPubsConnection
End Function

</code></pre></FONT>


<P>
After you've created a <B>Connection</B> object, you can open
<B>Recordset</B> objects and run queries on the <B>Connection</B>
object.
<P>
When you open a <B>Connection</B> object, a corresponding <B>Database</B> object is created and appended to the <B>Databases</B> collection
in the same workspace. When you open a database in an ODBCDirect
workspace, a <B>Connection</B> object is likewise created and
appended to the <B>Connections</B> collection. When you close
either the <B>Connection</B> object or the <B>Database</B> object,
the corresponding object is also closed.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Before
you close a Connection object, close all open Recordset objects
within it.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Opening Connections Asynchronously</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
In some cases, opening connections to data sources can take a
long time, making it necessary for users to wait until the connection
completes or an error occurs. To reduce the amount of time users
must wait, you can open a connection asynchronously. This means
that your application can complete other tasks while the connection
is being established. To open a connection asynchronously, specify
the <B>dbRunAsync</B> constant for the <I>options</I>
argument of the <B>OpenConnection</B> method, as shown in the
following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wrk As Workspace, cnn As Connection, strConnect As String

Set wrk = DBEngine.CreateWorkspace("NewODBCDirect", "sa", "", dbUseODBC)
strConnect = "ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs"
Set cnn = wrk.OpenConnection("",dbDriverNoPrompt + dbRunAsync, False, strConnect)

</code></pre></FONT>

<P>
You can use the <B>StillExecuting</B> property of the <B>Connection</B>
object to see if the connection has been established, or use the
<B>Cancel</B> property of the <B>Connection</B> object to cancel
the connection attempt if it takes too long.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H229">The Database Object and the Databases
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex41"></a>
<P>
You can also connect to an ODBC data source by using the <B>OpenDatabase</B>
method to open a <B>Database</B> object. However, the <B>Database</B> object in an ODBCDirect workspace doesn't support all of the
functionality of a <B>Connection</B> object. Specifically, if
you're using a <B>Database</B> object, you can't connect asynchronously,
run queries asynchronously, or define <B>QueryDef</B> objects
that represent queries in the ODBC data source.
<P>
To connect to an ODBC data source with the <B>OpenDatabase</B>
method in an ODBCDirect workspace, specify a valid connect string
for the <I>connect</I> argument of the <B>OpenDatabase</B>
method, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wrk As Workspace, dbs As Database
Dim strConnect As String

strConnect = "ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs"
Set wrk = DBEngine.CreateWorkspace("NewODBCDirect", "sa", "", dbUseODBC)
Set dbs = wrk.OpenDatabase("Pubs", dbDriverNoPrompt, False, strConnect)

</code></pre></FONT>



<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Switching Between Connection and Database Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
With ODBCDirect, you can open a <B>Database</B> object and a <B>Connection</B>
object against the same ODBC data source, and use both in your
code. You can then take advantage of each object for its different
capabilities.
<P>
Alternatively, you may want to create a single object and then
switch to the other type when needed. To do this, use the <B>Connection</B>
property of the <B>Database</B> object or the <B>Database</B>
property of the <B>Connection</B> object. You can use these properties
to create <B>Connection</B> objects from <B>Database</B> objects
and to create <B>Database</B> objects from <B>Connection</B> objects.
This is especially useful for adding ODBCDirect capabilities to
existing applications that only use <B>Database</B> objects.
<P>
For example, you can use a <B>Database</B> object for most of
your ODBC data access needs, but when you need to run an asynchronous
query, you can create a <B>Connection</B> object from the <B>Database</B>
object and then run the query on the <B>Connection</B> object.
The following example illustrates this technique.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub DeleteRecords()
&#09;Dim dbs As Database, strConnect As String
&#09;Dim cnn As Connection

&#09;' Open database in default workspace.
&#09;strConnect = "ODBC;DSN=Pubs;DATABASE=Pubs;UID=sa;PWD=;"
&#09;Set dbs = OpenDatabase("", False, False, strConnect)

&#09;' Try to create Connection object from a Database object. If workspace is an
&#09;' ODBCDirect workspace, the query runs asynchronously. If workspace is a
&#09;' Microsoft Jet workspace, an error occurs and the query runs synchronously.

&#09;Err = 0
&#09;On Error Resume Next
&#09;Set cnn = dbs.Connection
&#09;If Err = 0 Then
&#09;&#09;cnn.Execute "DELETE FROM Authors", dbRunAsync
&#09;Else
&#09;&#09;dbs.Execute "DELETE FROM Authors"
&#09;End If
End Sub

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H230">The QueryDef Object and the QueryDefs
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex42"></a>
<P>
The <B>QueryDef</B> object represents a temporary definition of
a query in an ODBCDirect workspace. The <B>QueryDefs</B> collection
contains all <B>QueryDef</B> objects that currently exist in the
workspace. The following table shows the relationship between
the <B>QueryDef</B> object and the <B>QueryDefs</B> collection
and other objects and collections in an ODBCDirect workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDef</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDefs</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parameters</B> collection
<P><B>Properties</B> collection
</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDefs</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Connection</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>QueryDef</B> objects</FONT>
</TD></TR><P>
</TABLE>
<P>
Unlike <B>QueryDef</B> objects created in a Microsoft Jet workspace,
<B>QueryDef</B> objects created in an ODBCDirect workspace are
always temporary&nbsp;&#151; they are not saved within the
data source before they run, even if you assign them a name.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Running Asynchronous Queries</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex43"></a>
<P>
Creating and running queries in an ODBCDirect workspace is similar
to creating and running queries in a Microsoft Jet workspace.
You create the query by invoking the <B>CreateQueryDef</B> method
on a <B>Connection</B> object, and then use the <B>Execute</B>
or <B>OpenRecordset</B> methods on the resulting query.
<P>
You can use asynchronous queries so that users can continue using
your application while the query runs. You can also give users
the ability to cancel asynchronous queries if they are taking
too long. The following example runs an asynchronous query.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function DeleteLargeSales() As Boolean
&#09;Dim wrk As Workspace, rst As Recordset
&#09;Dim cnn As Connection, qdf As QueryDef
&#09;Dim strConnect As String, strSQL As String
&#09;Dim errObj As Error

&#09;On Error GoTo Err_DeleteLargeSales
&#09;' Create ODBCDirect workspace.
&#09;Set wrk = DBEngine.CreateWorkspace("ODBC", "sa", "", dbUseODBC)
&#09;' Create connect string.
&#09;strConnect = "ODBC;DSN=Publishers;UID=SA;PWD=;DATABASE=Pubs"
&#09;' Open connection on workspace.
&#09;Set cnn = wrk.OpenConnection("", dbDriverNoPrompt, False, strConnect)
&#09;' Delete existing QueryDef named DeleteLargeSales.
&#09;For Each qdf In cnn.QueryDefs
&#09;&#09;If qdf.Name = "DeleteLargeSales" Then
&#09;&#09;&#09;cnn.QueryDefs.Delete "DeleteLargeSales"
&#09;&#09;End If
&#09;Next qdf

&#09;' Create QueryDef.
&#09;Set qdf = cnn.CreateQueryDef("DeleteLargeSales")
&#09;strSQL = "DELETE FROM sales WHERE qty = 100"
&#09;qdf.SQL = strSQL

&#09;' Run query asynchronously.
&#09;qdf.Execute dbRunAsync

&#09;While qdf.StillExecuting
&#09;' Additional code runs here while query runs.
&#09;' Check StillExecuting property to determine whether query has finished.
&#09;Wend

&#09;DeleteLargeSales = True

Exit_DeleteLargeSales:
&#09;cnn.Close
&#09;wrk.Close
&#09;Exit Function

Err_DeleteLargeSales:
&#09;For Each errObj In Errors
&#09;&#09;Debug.Print errObj.Number, errObj.Description
&#09;Next errObj
&#09;DeleteLargeSales = False
&#09;Resume Exit_DeleteLargeSales
End Function

</code></pre></FONT>


<P>
The preceding example uses a <B>QueryDef</B> object on a <B>Connection</B>
object to run an asynchronous query. You can also use the <B>Execute</B>
method directly on the <B>Connection</B> object, as shown in the
following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim cnn As Connection, strConnect As String

strConnect = "ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs"
Set cnn = OpenConnection("", dbDriverNoPrompt, False, strConnect)
cnn.Execute "DELETE FROM sales WHERE qty = 100", dbRunAsync
cnn.Close

</code></pre></FONT>


When you run a query asynchronously, you can use the <B>StillExecuting</B>
property to determine if the query has completed. If the value
of the <B>StillExecuting</B> property is <B>True</B>, the query
has not yet completed. If you want to cancel an asynchronous query,
use the <B>Cancel</B> method, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function CancelAsynchQuery() As Boolean
&#09;Dim wrk As Workspace, cnn As Connection, strConnect As String
&#09;Dim errObj As Error

&#09;On Error GoTo Err_CancelAsynchQuery
&#09;Set wrk = DBEngine.CreateWorkspace("ODBCDirect", "Admin", "", dbUseODBC)
&#09;strConnect = "ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs"
&#09;Set cnn = wrk.OpenConnection("", dbDriverNoPrompt, False, strConnect)

&#09;' Start transaction in order to roll back if needed.
&#09;wrk.BeginTrans
&#09;cnn.Execute "DELETE FROM sales WHERE qty = 100", dbRunAsync

&#09;' Perform other operations.
&#09;&#09;.
&#09;&#09;.
&#09;&#09;.

&#09;' If query is still running, cancel and roll back.
&#09;If cnn.StillExecuting Then
&#09;&#09;cnn.Cancel
&#09;&#09;wrk.Rollback
&#09;' If query is complete, commit transaction.
&#09;Else
&#09;&#09;wrk.CommitTrans
&#09;End If
&#09;CancelAsynchQuery = True

Exit_CancelAsynchQuery:
&#09;cnn.Close
&#09;wrk.Close
&#09;Exit Function

Err_CancelAsynchQuery:
&#09;For Each errObj In Errors
&#09;&#09;Debug.Print errObj.Number, errObj.Description
&#09;Next errObj
&#09;CancelAsynchQuery = False
&#09;Resume Exit_CancelAsynchQuery
End Function

</code></pre></FONT>



<P>
You can use the <B>StillExecuting</B> property and the <B>Cancel</B>
method with <B>QueryDef</B>, <B>Connection</B>, and <B>Recordset</B>
objects.
<P>
A <B>Connection</B> object can support only one asynchronous operation
at a time. Also, you can't perform another DAO operation, such
as recordset manipulation, on a <B>Connection</B> object while
an asynchronous query runs on the same <B>Connection</B> object.
After an asynchronous query is complete, you can then begin running
another asynchronous query on the same <B>Connection</B> object.
You must first test the value of the <B>StillExecuting</B> property
to determine whether you can start the next asynchronous operation.
To run multiple asynchronous queries at the same time, you must
create separate <B>Connection</B> objects and run each asynchronous
query on its own <B>Connection</B> object.
<P>
In most cases, you'll want to run an asynchronous query as part
of a transaction. Be aware, however, that if you call the <B>CommitTrans</B>
method while the asynchronous query is still running, your code
will pause at the <B>CommitTrans</B> method until the query finishes.
For this reason, it is more efficient to periodically check the
<B>StillExecuting</B> property and continue to perform other work
while the query runs. Once the <B>StillExecuting</B> property
returns <B>False</B>, you can then call the <B>CommitTrans</B>
method. This prevents your code from pausing at the <B>CommitTrans</B>
method.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>If
you cancel an action query that is not part of a transaction,
the query updates records up to the point where you called the
<B>Cancel</B> method. The operation will be partially complete and will
not be rolled back. For this reason, you should use the <B>Cancel</B>
method only within the scope of a transaction. Additionally, if
you start an asynchronous query in a procedure and the procedure
exits before the query has completed, the query will continue
to run.
<P>
To improve performance when you're retrieving data from an ODBC
data source, you can cache records locally. A <I>cache</I>
is a space in local memory that holds the data most recently retrieved
from the server. If you're performing repeated operations on a
set of data, caching that data makes those operations faster because
you don't have to retrieve the data from the server each time
you need it.
<P>
In ODBCDirect queries, use the <B>CacheSize</B> property of the
<B>QueryDef</B> object to specify the number of records to cache.
The default cache size is 100 records. The following example shows
how to reset the cache size to 200 records.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub SetCacheSize()
&#09;Dim
wrk As Workspace, qdf As QueryDef, rst As Recordset
&#09;Dim cnn As Connection, strConnect As String

&#09;Set wrk = CreateWorkspace("ODBCDirect", "Admin", "", dbUseODBC)
&#09;Set cnn = OpenConnection("", dbDriverNoPrompt, False, strConnect)
&#09;strConnect = "ODBC;DSN=Pubs;UID=SA;PWD=;DATABASE=Pubs"
&#09;Set qdf = cnn.CreateQueryDef("tempquery")
&#09;qdf.SQL = "SELECT * FROM roysched"
&#09;qdf.CacheSize = 40
&#09;Set rst = qdf.OpenRecordset()
&#09;' Perform some operations on recordset.
&#09;rst.Close
&#09;cnn.Close
End Sub

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H231">The Parameter Object and the Parameters
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex44"></a>
<P>
The <B>Parameter</B> object in an ODBCDirect workspace is similar
to the <B>Parameter</B> object in a Microsoft Jet workspace, with
a few differences. In an ODBCDirect workspace, you can change
the setting of the <B>Type</B> property, which is read&#173;only
in a Microsoft Jet workspace. You can also use the <B>Direction</B>
property to indicate whether a parameter is an input parameter,
an output parameter, or both, or the return value from the procedure.
The following example specifies parameters for a query in an ODBCDirect
workspace.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function RunStoredProc() As Boolean
&#09;Dim wrk As Workspace
&#09;Dim qdf As QueryDef, rst As Recordset, fld As Field
&#09;Dim cnn As Connection, strConnect As String, strSQL As String

&#09;Set wrk = CreateWorkspace("ODBCDirect", "sa", "", dbUseODBC)
&#09;strConnect = "ODBC;DSN=Pubs;UID=sa;PWD=;DATABASE=Pubs"
&#09;Set cnn = wrk.OpenConnection("", dbDriverNoPrompt, False, strConnect)

&#09;strSQL = "CREATE PROCEDURE tamram @lolimit money AS " _
&#09;&#09;&amp; "SELECT pub_id, type, title_id, price " _
&#09;&#09;&amp; "FROM titles WHERE price &gt;@lolimit"
&#09;cnn.Execute strSQL

&#09;Set qdf = cnn.CreateQueryDef("RunStoredProc")
&#09;qdf.SQL = "{ call tamram (?) }"
&#09;qdf.Parameters(0).Value = CCur(10)
&#09;Set rst = qdf.OpenRecordset()
&#09;Do Until rst.EOF
&#09;&#09;For Each fld In rst.Fields
&#09;&#09;&#09;Debug.Print fld.Name, fld.Value
&#09;&#09;Next fld
&#09;&#09;rst.MoveNext
&#09;Loop
End Function

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H232">The Recordset Object and the Recordsets
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex45"></a>
<P>
The <B>Recordset</B> object represents the records that result
from running a query on a <B>Connection</B> object or a <B>Database</B> object in an ODBCDirect workspace. The <B>Recordsets</B> collection
contains all currently open <B>Recordset</B> objects on a <B>Connection</B> object or a <B>Database</B> object. The following table shows
the relationship between the <B>Recordset</B> object and the <B>Recordsets</B>
collection and other objects and collections in an ODBCDirect
workspace.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordset</B> object</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordsets</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Field</B> objects
<P>
<B>Properties</B> collection
</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordsets</B> collection</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Connection</B> object
<P>
<B>Database</B> object
</FONT>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Recordset</B> objects</FONT>
</TD></TR>

</TABLE>
<P>
The types of <B>Recordset</B> objects supported in an ODBCDirect
workspace include the dynaset&#173;type, snapshot&#173;type, forward&#173;only&#173;type, and dynamic&#173;type <B>Recordset</B> objects. For more information on all of these <B>Recordset</B> objects except the dynamic&#173;type <B>Recordset</B> object, see "<A  HREF="#TABLETYP">Table&#173;Type Recordset Objects</A>,"
"<A HREF="#DYNATYP">Dynaset&#173;Type Recordset Objects</A>," "<A HREF="#SNAPTYP">Snapshot&#173;Type Recordset Objects</A>," "<A HREF="#TABLETYP">Forward&#173;Only&#173;Type Recordset
Objects</A>" earlier in this chapter. The following section describes
dynamic&#173;type <B>Recordset</B> objects.
<A NAME="DYNRECOBJ"></A><P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Dynamic&#173;Type Recordset Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex46"></a>
<P>
An additional type of <B>Recordset</B> object, the dynamic&#173;type
<B>Recordset</B> object, is available in ODBCDirect workspaces.
Dynamic&#173;type <B>Recordset</B> objects behave like dynaset&#173;type
<B>Recordset</B> objects, but they are updated dynamically as
other users make modifications to the underlying tables. To create
a dynamic&#173;type <B>Recordset</B> object, specify the <B>dbOpenDynamic</B>
constant for the <I>type</I> argument of the <B>OpenRecordset</B>
method.
<P>
Dynamic&#173;type <B>Recordset</B> objects are available only
if you're using an ODBC driver that supplies its own cursors.
Because not all ODBC drivers supply their own cursors, you need
to determine whether yours does before you try to open a dynamic&#173;type
<B>Recordset</B> object. If your ODBC driver doesn't supply its
own cursors, then you should open a snapshot&#173;type or forward&#173;only&#173;type
<B>Recordset</B> object instead. For more information on cursors,
see "Using Cursors in ODBCDirect Workspaces" later in
this chapter.
<P>
The advantage of using a dynamic&#173;type <B>Recordset</B> object
is that the recordset will immediately reflect any changes to
the data, including added or deleted records. For example, if
you open a dynamic&#173;type <B>Recordset</B> object and another
user edits a record in one of the underlying tables, that change
will be reflected in the <B>Recordset</B> you opened. In order
to do this, however, DAO must constantly requery the data source,
which may slow performance considerably. Therefore, avoid using
dynamic&#173;type <B>Recordset</B> objects except in situations
where it's crucial to have the most up&#173;to&#173;date data
at all times.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Opening Recordset Objects Asynchronously</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex47"></a>
<P>
In addition to running queries asynchronously, you can open <B>Recordset</B>
objects asynchronously. To do so, specify the <B>dbRunAsync</B>
constant for the <I>options</I> argument of the <B>OpenRecordset</B>
method. You can then use the <B>Cancel</B> method and the <B>StillExecuting</B>
property directly on the <B>Recordset</B> object. For example,
if you open a <B>Recordset</B> object asynchronously, and it takes
a long time to open because more records are returned than expected,
you can give users the option of canceling the operation in order
to specify more restrictive criteria that returns fewer records.
<P>
If you cancel an <B>OpenRecordset</B> method, the <B>Recordset</B>
object becomes invalid and you must reopen it to retrieve a valid
<B>Recordset</B> object.
<P>
Because moving to the last record in a recordset can take a long
time, the <B>MoveLast</B> method of a <B>Recordset</B> object
supports asynchronous operation. To perform an asynchronous <B>MoveLast</B>
operation, use the <B>dbRunAsync</B> constant with the <B>MoveLast</B>
method. Be sure to check the <B>StillExecuting</B> property to
determine when this operation is complete.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H233">The Field Object and the Fields Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
In an ODBCDirect workspace, the <B>Field</B> object represents
a field in a <B>QueryDef</B> object or a <B>Recordset</B> object.
When you're performing batch updates, you can use the <B>Value</B>,
<B>VisibleValue</B>, and <B>OriginalValue</B> properties of a
<B>Field</B> object to verify successful completion of a batch
update. For more information, see "<A HREF="#CH011H105">Using Batch Optimistic
Updating</A>" in the following section.
<P>
<A NAME="PG011C5"></A>

</MENU></MENU></MENU>
<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H105">Using ODBCDirect</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
The following sections explain how to perform some common operations
in an ODBCDirect workspace: using batch optimistic updating, working
with cursors, and working with stored procedures.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H234">Using Batch Optimistic Updating</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex48"></a>
<P>
In many client/server applications, optimistic updates occur on
a record&#173;by&#173;record basis. This usually happens with
the following series of events:
<P>

<OL>
<P>
<LI>A user edits a record.
<P>
<LI>The
user tries to save the record.
<P>
<LI>The server attempts
to place a lock on that record, and if successful, the record
is updated. Otherwise, a lock violation is handled by the application.
<P>
<LI>The
user moves to another record and the entire process is repeated.
<P>
</OL>

<P>
<a name="dex49"></a>
<P>
Although this process works well for many applications, it is
often more efficient to have the user edit multiple records that
are cached locally and then submit these records to the server
in a single batch for updating. This process is called <I>batch
optimistic updating</I>.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
use batch optimistic updating</FONT></B>
<P>

<OL>
<P>
<LI>Create an ODBCDirect workspace.
<P>
<LI>Set
the DefaultCursorDriver property of the workspace to dbUseClientBatchCursor.
<P>
<LI>Open
a <B>Connection</B> or <B>Database</B> object from the ODBCDirect
workspace.
<P>
<LI>Use the <B>OpenRecordset</B> method
on the <B>Connection</B> or <B>Database</B> object to open a <B>Recordset</B>
and specify the <B>dbOptimisticBatch</B> constant in the <I>lockedits</I>
argument. 
<P>
<LI>Perform any edits to the <B>Recordset</B>
object. All edits are cached locally.
<P>
<LI>When you
are ready to update the data source, call the <B>Update</B> method
on the <B>Recordset</B> object, specifying <B>dbUpdateBatch</B>
for the <I>type</I> argument.
<P>
</OL>

<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>
If you attempt a batch update while a record in that Recordset
object is being edited by the user, the record being edited will
automatically be updated before the batch update begins.
<P>
The following example illustrates how to use batch optimistic
updating.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function RunInBatch()
&#09;Dim wrk As Workspace, cnn As Connection, rst As Recordset
&#09;Dim strConnect As String

&#09;' Create ODBCDirect workspace.
&#09;Set wrk = DBEngine.CreateWorkspace("ODBCDirect", "Admin", "", dbUseODBC)
&#09;' Set default cursor driver to dbUseClientBatchCursor.
&#09;wrk.DefaultCursorDriver = dbUseClientBatchCursor
&#09;' Create connect string.
&#09;strConnect = "ODBC;DSN=Pubs;DATABASE=Pubs;UID=sa;PWD=;"
&#09;' Open connection.
&#09;Set cnn = wrk.OpenConnection("", dbDriverNoPrompt, False, strConnect)
&#09;' Open recordset on connection.
&#09;Set rst = _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnn.OpenRecordset("SELECT * FROM sales", dbOpenDynaset, 0, dbOptimisticBatch)

&#09;' Change all records in local recordset.
&#09;While Not rst.EOF
&#09;&#09;rst.Edit
&#09;&#09;rst!qty = rst!qty + 1
&#09;&#09;rst.Update
&#09;&#09;rst.MoveNext
&#09;Wend

&#09;' Update all records in data source.
&#09;rst.Update dbUpdateBatch
End Function

</code></pre></FONT>

<P>
If multiple records have been edited locally, and you want to
update the current record before you perform the batch update,
you can call the <B>Update</B> method and specify the <B>dbUpdateCurrentRecord</B>
constant for the <I>type</I> argument. This writes
the current record to the data source without writing any other
batch updates. This is illustrated in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Edit and update first record.
' Only first record is written back to data source.
rst.MoveFirst
rst.Edit
rst!qty = rst!qty + 2
rst.Update dbUpdateCurrentRecord

' Update remaining records in data source.
rst.Update dbUpdateBatch

</code></pre></FONT>


<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Handling Collisions</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex50"></a>
<P>
When you attempt to update a group of records in a single batch
operation, it is possible that other users are editing one or
more records you are trying to update, causing a <I>collision</I>.
A collision occurs when a batch update attempts to update a record
at the same time another user is updating the record.
<P>
To handle collisions, examine the <B>BatchCollisions</B> property
on the <B>Recordset</B> object. The <B>BatchCollisions</B> property
returns an array that stores bookmarks pointing to records in
the <B>Recordset</B> object on which a collision occurred. Each
time a collision occurs during a batch update, a bookmark for
the record is added to the array returned by the <B>BatchCollisions</B>
property. You can then move to each of these bookmarks and examine
the following properties of the <B>Field</B> object of the current
record.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Property</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Value</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">The current value of the field in your <B>Recordset</B> object. This corresponds to the value of the field after the <B>Update</B> method was called.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>OriginalValue</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">The value of the field in your <B>Recordset</B> object before the <B>Update</B> method was called.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>VisibleValue</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">The value of the field as it is stored in the database.</FONT>
</TD></TR><P>
</TABLE>
<P>
After examining these properties, you can choose one of the following
options:
<P>

<UL>
<P>
<LI>You can force the current
value in your <B>Recordset</B> object into the database, overwriting
the field's original value. To do this, call the <B>Update</B>
method and specify <B>True</B> for the <I>force</I>
argument.
<P>
<LI>You can change the current value in
your <B>Recordset</B> object to the original value and force the
change into the database.
<P>
</UL>

<P>
<IMG SRC="caution.gif">
<BR>
<P>
<UL>
<B><FONT COLOR="#FFCC33">Caution&nbsp;&nbsp;&nbsp;</FONT></B>Calling
the <B>Update</B> method and specifying the <B>dbUpdateBatch</B>
constant for the <I>type</I> argument and <B>True</B>
for the <I>force</I> argument forces all your changes
into the data source and overwrites any changes that other users
made to the records. For this reason, it is safer to call the
<B>Update</B> method without specifying the <I>force</I>
argument, and then resolve collisions individually by using the
array returned by the <B>BatchCollisions</B> property along with
the <B>Value</B>, <B>OriginalValue</B>, and <B>VisibleValue</B>
properties.
</UL>
<P>
<IMG SRC="caution.gif">
<BR>
<P>
The following example shows how to use the array returned by the
<B>BatchCollisions</B> property to force all changes made to a
local <B>Recordset</B> object into the database.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function BatchForceChanges()
&#09;Dim rst As Recordset, cnn As Connection, varCollision As Variant

&#09;' Open recordset for batch optimistic updating.
&#09;Set rst = _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnn.OpenRecordset("SELECT * FROM sales", dbOpenDynaset, 0, dbOptimisticBatch)
&#09;' Change all records in local recordset.
&#09;While Not rst.EOF
&#09;&#09;rst.Edit
&#09;&#09;rst!qty = rst!qty + 1
&#09;&#09;rst.Update
&#09;&#09;rst.MoveNext
&#09;Wend
&#09;rst.Update dbUpdateBatch

&#09;' Check for collisions and force all changes to recordset
&#09;' into database one record at a time.
&#09;For j = 0 to rst.BatchCollisionCount - 1
&#09;&#09;varCollision = rst.BatchCollisions(j)
&#09;&#09;rst.BookMark = varCollision
&#09;&#09;rst.Update dbUpdateCurrentRecord, True
&#09;Next j
End Function

</code></pre></FONT>


In the preceding example, modifications to the <B>Recordset</B>
object are written back to the database one record at a time.
In the following example, all records are saved in a batch instead
of writing one record at a time.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Open recordset.
Set rst = _
&nbsp;&nbsp;&nbsp;cnn.OpenRecordset("SELECT * FROM sales", dbOpenDynaset, 0, dbOptimisticBatch)
' Change all records in local recordset.
While Not rst.EOF
&#09;rst.Edit
&#09;rst!qty = rst!qty + 1
&#09;rst.Update
&#09;rst.MoveNext
Wend
rst.Update dbUpdateBatch, True

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H235">Using Cursors in ODBCDirect Workspaces</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex51"></a>
<P>
A <I>cursor</I> indicates the current record position
in a result set. Most types of cursors contain a representation
of the data in the data source, and are not updatable. <I>Keysets</I>
are cursors that contain actual data, and are updatable. 
<P>
You work with a cursor through the DAO <B>Recordset</B> object.
When you open a <B>Recordset</B> object through DAO, ODBCDirect
creates the corresponding cursor. Each type of <B>Recordset</B>
object, except for the table&#173;type <B>Recordset</B> object,
corresponds to a different type of cursor.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Characteristics of Cursors</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex52"></a>
<P>
You can use cursors to work with sets of data on an ODBC data
source. Cursors can:
<P>

<UL>
<P>
<LI>Represent some or all records
in a single table.
<P>
<LI>Represent some or all records
in a multiple&#173;table join.
<P>
<LI>Represent no
records.
<P>
<LI>Be read&#173;only or updatable at either
the cursor or the field level.
<P>
<LI>Be fully scrollable,
meaning that you can move forward and backward through the records,
or they can be forward&#173;only scrolling.
<P>
<LI>Exist
on either the client or the server.
<P>
</UL>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Client&#173;Side Cursors vs. Server&#173;Side Cursors</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex53"></a>
<P>
A cursor requires temporary resources to hold its data. These
resources can be in the form of RAM, a paging file such as the
virtual memory feature of Microsoft Windows, or temporary files
or databases. If these resources are stored on the client machine,
the cursor is called a <I>client&#173;side</I> cursor.
With this type of cursor, the server sends the data that the cursor
represents across the network to the client, along with the data
required by the cursor itself. The client manages the temporary
resources needed by the cursor.
<P>
Some server database engines, such as Microsoft SQL Server version
6.0, support an additional type of cursor known as <I>server&#173;side</I>
cursors. With this cursor type, the server manages the result
set with resources located on the server itself. The server returns
only the requested data to the client over the network. Using
this type of cursor can result in significant performance improvements
compared to client&#173;side cursors, especially in situations
where excessive network traffic or inadequate network bandwidth
is a problem. However, because RAM and disk space resources are
needed at the server, you must plan accordingly and ensure that
your server hardware is capable of managing all cursors requested
by clients.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Choosing a Cursor Type</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex54"></a>
<P>
When you open a <B>Recordset</B> object on a non&#173;ODBC data
source, you can specify a constant for the <I>type</I>
argument of the <B>OpenRecordset</B> method that determines what
type of recordset is opened. When you open a <B>Recordset</B>
object on an ODBC data source, you use this same argument to specify
the type of cursor that the <B>Recordset</B> object represents.
Each type of cursor corresponds to a type of recordset. The following
table shows the four constants you can use for the <I>type</I>
argument, the type of <B>Recordset</B> object that is created
on a non&#173;ODBC data source, and the type of cursor that is
created on an ODBC data source.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Constant</FONT></B></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Recordset type</FONT></B>
</TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Cursor type</FONT></B></TD>
</TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbOpenDynamic</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Dynamic-type</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Dynamic</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbOpenDynaset</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Dynaset-type</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Keyset</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbOpenSnapshot</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Snapshot-type</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Static</FONT>
</TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbOpenForwardOnly</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Forward-only-type</FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Forward-only scrolling (this is the default)</FONT>
</TD></TR><P>
</TABLE>
<P>
For more information about ODBC cursors, see the<I> ODBC
3.0 Programmer's Reference</I>.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Table&#173;type
Recordset objects aren't supported in ODBCDirect workspaces, so
they have no corresponding cursor.
<P>
The <B>DefaultCursorDriver</B> property of a <B>Workspace</B>
object specifies where ODBCDirect creates the cursor&nbsp;&#151;
on the client or on the server. You can set the <B>DefaultCursorDriver</B>
property to any of the constants listed in the following table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Constant</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbUseODBCCursor</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use client&#173;side cursors. Client&#173;side cursors give better performance for small result sets, but degrade quickly for larger result sets.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbUseServerCursor</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use server&#173;side cursors. For most large operations, server&#173;side cursors provide better performance, but may cause more network traffic. Not all ODBC data sources support server&#173;side cursors.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbUseDefaultCursor</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use server&#173;side cursors if the server supports them; otherwise, use client&#173;side cursors.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbUseClientBatchCursor</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use client batch cursors. Required for batch updates.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbUseNoCursor</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Open all <B>Recordset</B> objects as forward&#173;only&#173;type, read&#173;only, with a rowset size of 1. </FONT>
</TD></TR><P>
</TABLE>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Record Locking</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex55"></a>
<P>
When you open a <B>Recordset</B> object, you can also specify
the type of record locking you want to use by setting the <I>lockedits</I>
argument of the <B>OpenRecordset</B> method to the appropriate
constant. The following table lists the five constants you can
use for the<I> lockedits</I> argument of the <B>OpenRecordset</B>
method, and describes the ODBC cursor lock type to which they
correspond.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Constant</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ODBC cursor lock type</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>dbOptimistic</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Uses optimistic locking to determine how changes are made to the <B>Recordset</B> object in a multiuser environment. The page containing the record that is being edited is locked only while the record is being updated by the <B>Update</B> method.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DbPessimistic</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Uses pessimistic locking to determine how changes are made to the <B>Recordset</B> object in a multiuser environment. The page containing the record that is being edited is locked as soon as you use the <B>Edit</B> method.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DbOptimisticValue</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Uses optimistic concurrency based on record values.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DbOptimisticBatch</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Uses batch optimistic updating.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DbReadOnly</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Default for ODBCDirect workspaces. Prevents users from making changes to the data in the <B>Recordset</B> object.</FONT>
</TD></TR><P>
</TABLE>
<P>
Some combinations of cursors and lock types will not work together.
For example, with Microsoft SQL Server version 6.0 cursors, if
you specify the <B>dbOpenSnapshot</B> constant for the <I>type</I>
argument of the <B>OpenRecordset</B> method, you must specify the <B>dbReadOnly</B> constant for the <I>lockedits</I> argument. Static
cursors do not support the other types of record locking. Which
combinations work together depends on the cursor driver. For specific
information about compatible lock types, refer to your cursor
driver documentation.
<P>
Your cursor driver can handle different combinations of cursor
types and lock types in different ways. In some cases, it may
return an error if it does not handle a specific combination.
In other cases, it may switch to the nearest possible combination
that it supports. If an error occurs, DAO places the error information
in the <B>Errors</B> collection.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Cursor Limitations</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex56"></a>
<P>
In an ODBCDirect workspace, the default recordset is a read&#173;only,
forward&#173;only&#173;type <B>Recordset</B> object. Therefore,
if you create the default <B>Recordset</B> object by opening it
without specifying a value for the <I>type</I> argument,
you won't be able to edit data on the server. If you want to edit
data on the server, you need to explicitly specify a lock type
other than <B>dbReadOnly</B> for the <I>lockedits</I>
argument of the <B>OpenRecordset</B> method.
<P>
Because you can't open a table&#173;type <B>Recordset</B> object
in an ODBCDirect workspace, you can't use the <B>Index</B> property
or the <B>Seek</B> method to retrieve data. Also, recordsets opened
against ODBC data sources do not support any of the Find methods:
<B>FindFirst</B>, <B>FindNext</B>, <B>FindPrevious</B>, and <B>FindLast</B>.
In a client/server environment, it's more efficient to fetch only
the data that you need, rather than retrieving more records than
you need and then searching through those records for the data
that you want. Therefore, design your queries to return only the
records that you need.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Retrieving Multiple Result Sets</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex57"></a>
<P>
Any SQL statement can include multiple SELECT statements or stored
procedures that invoke one or more SELECT statements. Each SELECT
statement generates a result set that must be processed by your
code or discarded before the resources are released and the next
result set is made available. Because you don't necessarily know
how many results sets will be generated by a stored procedure,
your code must be prepared to process an unknown number of result
sets. Note that when a stored procedure returns multiple result
sets, none of the result sets can be updated.
<P>
You can use either client&#173;side cursors or server&#173;side
cursors to retrieve multiple result sets. If you use client&#173;side
cursors, multiple result sets are returned no matter what type
of <B>Recordset</B> object you open. If you use server&#173;side
cursors to retrieve multiple result sets, you must open a forward&#173;only&#173;type
<B>Recordset</B> object.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
retrieve multiple results sets</FONT></B>
<P>

<OL>
<P>
<LI>Set the workspace's <B>DefaultCursorDriver</B>
property to <B>dbUseServerCursor</B> to specify server&#173;side
cursors.
<P>
<LI>Create a <B>QueryDef</B> object and
set its <B>SQL</B> property to a valid SQL string that returns
multiple <B>Recordset</B> objects.
<P>
<LI>Set the <B>CacheSize</B>
property of the <B>QueryDef</B> object to 1 to request that the
server sends you one record at a time. When you retrieve records
in this way, you don't actually utilize the cursor.
<P>
<LI>Open
a <B>Recordset</B> object on the <B>QueryDef</B> object you just
created. Specify <B>dbOpenForwardOnly</B> for the <I>type</I>
argument of the <B>OpenRecordset</B> method.
<P>
<LI>Use
the <B>NextRecordset</B> method to access the next <B>Recordset</B>
object in the group of <B>Recordset</B> objects returned by the
server. This discards the current <B>Recordset</B> object and
replaces it with the next <B>Recordset</B> object specified in
your query's SQL statement. If there are no more <B>Recordset</B>
objects in the group of <B>Recordset</B> objects, then the return
value of the <B>NextRecordset</B> method will be <B>False</B>
and the current <B>Recordset</B> object will be empty.
<P>
</OL>

<P>
The following example prints the values of each field for each
record in each result set.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function GetMultipleResults()
&#09;Dim wrk As Workspace, rst As Recordset, cnn As Connection, qdf As QueryDef
&#09;Dim fld As Field, strSQL As String, strConnect As String, fDone As Boolean

&#09;' Create ODBCDirect workspace.
&#09;Set wrk = DBEngine.CreateWorkspace("ODBCDirect", "Admin", "", dbUseODBC)
&#09;' Create connect string.
&#09;strConnect = "ODBC;DSN=Pubs;DATABASE=Pubs;UID=sa;PWD=;"
&#09;' Open connection.
&#09;Set cnn = wrk.OpenConnection("", dbDriverNoPrompt, False, strConnect)
&#09;' Create SQL statement.
&#09;strSQL = "SELECT au_lname, au_fname FROM Authors; SELECT title FROM Titles;"
&#09;' Set default cursor driver.
&#09;wrk.DefaultCursorDriver = dbUseServerCursor

&#09;' Open recordset.
&#09;Set qdf = cnn.CreateQueryDef("", strSQL)
&#09;qdf.CacheSize = 1
&#09;' Open recordset on QueryDef.
&#09;Set rst = qdf.OpenRecordset(dbOpenForwardOnly)

&#09;Do Until fDone = True
&#09;&#09;' Print values for each field in each record of recordset.
&#09;&#09;While Not rst.EOF
&#09;&#09;&#09;For Each fld In rst.Fields
&#09;&#09;&#09;&#09;Debug.Print fld.Value
&#09;&#09;&#09;Next fld
&#09;&#09;&#09;rst.MoveNext
&#09;&#09;Wend
&#09;&#09;fDone = Not rst.NextRecordset()
&#09;Loop
&#09;rst.Close
&#09;cnn.Close
&#09;wrk.Close
End Function

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH011H236">Working with Stored Procedures</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex58"></a>
<P>
You can use ODBCDirect <B>QueryDef</B> objects to run stored procedures.
ODBCDirect <B>QueryDef</B> objects support stored procedures that
have both input parameters and return values. Input parameters
are the parameter values supplied to the procedure at run time.
The procedure's return value is the value that it returns when
it has finished running. For example, a stored procedure may return
the number of records that have been affected.
<P>
The following example creates a stored procedure named GetEmps
on the server.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>strSQL = "CREATE PROCEDURE GetEmps AS "
strSQL = strSQL &amp; "SELECT * FROM EMPLOYEE;"
cnn.Execute strSQL

</code></pre></FONT>

<P>
If there is already a stored procedure named GetEmps on the server,
you can use the DROP statement to delete it before creating a
new one, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>strSQL = "DROP PROCEDURE GetEmps;"
cnn.Execute strSQL

</code></pre></FONT>


<P>
You can run the stored procedure by using the <B>Execute</B> method
of a <B>Connection</B> object. To retrieve the return value, create
a <B>QueryDef</B> object and open a recordset on it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set qdf = cnn.CreateQueryDef("qry", "{ call GetEmps() }")
Set rst = qdf.OpenRecordset

</code></pre></FONT>


<P>
Use the <B>Parameter</B> object to work with parameters. The <B>Direction</B>
property of a <B>Parameter</B> object tells DAO how the parameter
will function. The ODBC driver tries to determine the parameter
direction, but the <B>Direction</B> property is read/write, so
you can set it if you need to. The following example creates a
simple stored procedure with an input parameter and a return value.
It then runs the procedure and retrieves the return value.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Create stored procedure on the server.
strSQL = "CREATE PROCEDURE UpdateEmps (@invar int) AS RETURN @invar;"
cnn.Execute strSQL

' Create QueryDef object to run stored procedure.
Set qdf = cnn.CreateQueryDef("qry", "{ ? = call UpdateEmps(?) }")

' Handle parameters.
qdf.Parameters(0).Direction = dbParamReturnValue
qdf.Parameters(1) = 10
qdf.Execute

' Get return value.
var = qdf.Parameters(0).Value

</code></pre></FONT>
<BR>
</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>
</FONT>
</FONT></BODY>



</HTML>

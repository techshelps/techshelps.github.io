<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Appendix B: Switching from WordBasic</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->




<!--Header/Footer Info_START-->
<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>A P P E N D I X &nbsp;&nbsp; B</B></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Switching from WordBasic</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<LI><A HREF="#CHAppBH101">Logistical Programming Changes in Microsoft Word&nbsp;97</A>
<BR>
<LI><A HREF="#CHappBH102">Conceptual Differences
Between WordBasic and Visual Basic</A>
<BR>
<LI><A HREF="#CHappBH103">Determining Which
Properties or Methods to Use</A>
<BR>
<LI><A HREF="#CHappBH104">Selection Object
vs. Range Object</A>
<BR>
<LI><A HREF="#CHappBH105">Using WordBasic
Statements and Functions</A>
<BR>
<LI><A HREF="#CHappBH106">Miscellaneous Changes</A>
<BR>
<LI><A HREF="#CHappBH107">Example Macros</A>
<BR>
</UL>

<P>
<A NAME="CHAppBH101"></A>
<P>
This appendix is intended to help users switching from the WordBasic
programming language to Visual Basic for Applications, the new
programming language in Microsoft Word&nbsp;97 (and other Office&nbsp;97
applications).
<P>
The first step toward making this switch is to convert your existing
WordBasic macros. For information about converting your WordBasic
macros, see "Converting WordBasic macros to Visual Basic"
in Help. This Help topic explains how Word automatically converts
macros in Word 6.<I>x</I> or Word&nbsp;95 templates
to Visual Basic. 
<P>
Although Word converts your macros, you may need to modify parts
of them manually to retain the macros' original functionality.
In addition to making modifications to converted WordBasic macros,
you may need to write new macros in the future. It's possible
to continue using WordBasic statements and functions exposed through
the WordBasic object, but gradually you'll want to switch over
to Visual Basic. For information about the functionality available
with Visual Basic, see the <a href="INTRO.htm">introduction</A> in this book. 
<P>
To help make the switch to Visual Basic an easy one, a table of
WordBasic commands and their corresponding Visual Basic syntax
is included in Help, in the topic "Visual Basic Equivalents
for WordBasic Commands."
<P>

<A NAME="PGappbC1"></A>
</MENU></MENU></MENU>

<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappBH101">Logistical Programming Changes in Microsoft Word&nbsp;97</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex1"></a>
<P>
The introduction in this book discusses the capabilities of Visual
Basic. The following paragraphs supplement the information provided
in the introduction with references to previous versions of Word.
<P>
<B>Macro Editor&nbsp;&nbsp;&nbsp;</B>The built&#173;in
macro editor in previous versions of Word has been replaced by
an integrated Visual Basic development environment, which is referred
to as the Visual Basic Editor. The Visual Basic Editor runs in
its own window and looks exactly the same no matter which Office
application you start it from.
<P>
<B>Dialog Editor&nbsp;&nbsp;&nbsp;</B>Previous versions
of Word included a separate Dialog Editor application used to
design custom dialog boxes. You create custom dialog boxes in
Word&nbsp;97 by creating UserForms in the Visual Basic Editor.
For more information about UserForms, see Chapter&nbsp;12, "<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<P>
<B>Macro Storage&nbsp;&nbsp;&nbsp;</B>When you create
a new macro in the <B>Macros</B> dialog box in Word (point to
<B>Macro</B> on the <B>Tools</B> menu, and then click <B>Macros</B>),
a new subroutine with the macro name you provide is created in
a module. Macros can now be stored in documents as well as templates.
You specify the storage location by selecting an item in the <B>Macros
in</B> box in the <B>Macros</B> dialog box. The <B>Macros in</B>
box includes template names and the name of the active document
(for example, "Sales.doc (document)").
<P>
<A NAME="PGappbC2"></A>

</MENU></MENU></MENU>

<MENU>
<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappBH102">Conceptual Differences Between WordBasic and Visual Basic</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex2"></a>
<P>
The primary difference between Visual Basic and WordBasic is that
WordBasic consists of a flat list of approximately 900 commands,
whereas Visual Basic consists of a hierarchy of objects, each
of which exposes a specific set of methods and properties (similar
to statements and functions in WordBasic). Objects are the fundamental
building block of Visual Basic; almost everything you do in Visual
Basic involves modifying objects. Every element of Word&nbsp;&#151;
documents, paragraphs, fields, bookmarks, and so on&nbsp;&#151;
is represented by an object in Visual Basic. To view a graphical
representation of the object model for Word, see "Microsoft Word Objects" in Help.
<P>
Whereas most WordBasic commands can be run at any time, Visual
Basic instructions drill down through the object model to an object
that you can manipulate using properties and methods. There are
certain objects that you can get to only from other objects&nbsp;&#151;
for instance, the <B>Font</B> object, to which you can control
from the <B>Style</B>, <B>Selection</B>, or <B>Find</B> object,
among others. Before you can change any font&#173;related attributes
(such as bold formatting), you need to drill down to the <B>Font</B>
object.
<P>
The programming task of applying bold formatting demonstrates
one of the differences between the two programming languages.
The following WordBasic example applies bold formatting to the
selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Bold 1

</code></pre></FONT>

<P>
Visual Basic doesn't include a <B>Bold</B> statement and function;
instead, there's a <B>Bold</B> property (a property is usually
an attribute of an object, such as its size, its color, or whether
or not it's bold). The <B>Bold</B> property is a property of the
<B>Font</B> object, which is returned by the <B>Font</B> property.
The <B>Font</B> property is a property of the <B>Selection</B>
object, which is returned by the <B>Selection</B> property. And
finally, the <B>Selection</B> property is a property of the <B>Application</B>
object, which is returned by the <B>Application</B> property.
These relationships are shown in the following object hierarchy.
<P>
<IMG SRC="axb01.gif">
<P>
Using this object hierarchy, you can build the instruction shown
in the following example to apply bold formatting to the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Selection.Font.Bold = True

</code></pre></FONT>


<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Because
the <B>Selection</B> property is "global," the <B>Application</B>
property is optional. To view a list of all the global properties
and methods, click <B>&lt;globals&gt;</B> at the top of the
<B>Classes</B> list in the Object Browser.
<P>
Instead of being composed of a flat list of commands, Visual Basic
consists of a hierarchical arrangement of objects that support
a predefined set of properties and methods (as shown in the preceding
illustration). The following table shows some common WordBasic
instructions and their Visual Basic equivalents.
<P>

<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


WordBasic instruction</FONT></B>
</TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


Equivalent Visual Basic instruction</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
FileOpen .Name = "MYDOC.DOC"
</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica">.Documents.Open FileName:= "MYDOC.DOC"
</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Insert "new text"
</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Selection.TypeText Text:="new text"
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Activate "Document1"
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Windows("Document1").Activate
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
MsgBox Font$()
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
MsgBox Selection.Font.Name
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
FormatParagraph .Alignment = 3
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Selection.Paragraphs.Alignment = wdAlignParagraphJustify
</FONT></TD></TR>

</TABLE>

<P>
The two instructions in each row of the preceding table are functionally
equivalent, but their syntax is dramatically different. Each WordBasic
instruction consists of a command name (for example, <B>FileOpen</B>)
and any applicable arguments (for example, <B>.Name</B>). Each
Visual Basic instruction, on the other hand, is a combination
of one or more properties or methods (for example, <B>Documents</B>
and <B>Open</B>), followed by any applicable arguments for each
(for example, <B><I>FileName</I></B>). The properties and
methods you use to drill down through the object model are separated
by the dot operator.
<P>
The <B>Open</B> method in Visual Basic is functionally equivalent
to the WordBasic <B>FileOpen</B> statement when the <B>Open</B>
method is used with the <B>Documents</B> collection object. The
<B>Documents</B> collection is returned by the <B>Documents</B>
property. The following illustration shows the path to the <B>Open</B>
method.
<P>
<IMG SRC="axb02.gif">
<P>
Following this hierarchy, you can build the instruction shown
in the following example to open Mydoc.doc.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Documents.Open FileName:="MYDOC.DOC"

</code></pre></FONT>
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>The
<B>Application</B> property is optional because the <B>Documents</B> property
is "global." 
<P>
Visual Basic doesn't include separate statements and functions
as in WordBasic. The <B>Bold</B> property is a read/write <B>Boolean</B>
property. This means that the <B>Bold</B> property can be set
to either <B>True</B> or <B>False</B> (on or off), or the current
value can be returned. The following table shows the Visual Basic
equivalents for various versions of the WordBasic <B>Bold</B>
statement and the WordBasic <B>Bold</B> function.
<P>

<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>
<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

WordBasic Bold statement or function</FONT></B></TD>
<TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Equivalent Visual Basic instruction</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Bold 1</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Selection.Font.Bold = True
</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Bold 0
</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Selection.Font.Bold = False
</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Bold
</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Selection.Font.Bold = wdToggle
</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
x = Bold()
</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
x = Selection.Font.Bold
</FONT>
</TD></TR>
</TABLE>
<P>
<A NAME="PGappbC3"></A>

</MENU></MENU></MENU>


<MENU>
<P>
<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappBH103">Determining Which Properties or Methods to Use</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex3"></a>
<P>
There are a few techniques you can use to determine which Visual
Basic properties or methods you need to use to accomplish a particular
programming task. When you're first learning Visual Basic, it's
usually best to use the macro recorder. The macro recorder is
a tool that translates your actions into Visual Basic instructions.
For instance, if you turn on the macro recorder and open the document
named "Examples.doc" in the current folder, the macro
recorder records the following instruction.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Open FileName:="Examples.doc", ConfirmConversions:=False, _
&nbsp;&nbsp;&nbsp; ReadOnly:=False, AddToRecentFiles:=False, PasswordDocument:="", _
&nbsp;&nbsp;&nbsp; PasswordTemplate:="", Revert:=False, WritePasswordDocument:="", _
&nbsp;&nbsp;&nbsp; WritePasswordTemplate:="", Format:=wdOpenFormatAuto

</code></pre></FONT>


<P>
To learn more about the preceding instruction, position the insertion
point within the word "Open" and then press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT>.
The Help topic for the <B>Open</B> method explains the arguments
you can use with that method. For information about the <B>Documents</B>
property, position the insertion point within the word "Documents"
and then press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT>.
<P>
Until you become somewhat familiar with the Word object model,
there are a few tools and techniques you can use to help you drill
down through the object hierarchy.
<P>
<A NAME="CVwdhow01doc003056"><B>Auto List Members&nbsp;&nbsp;&nbsp;</B>When
you type the dot operator after a property or method in the Visual
Basic Editor, a list of available properties and methods is displayed.
For example, if you type <B>Application</B>.,
a list containing methods and properties of the <B>Application</B>
object is displayed. Select the method or property you want to
use, and then press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">TAB</FONT> to insert the selected
item.</A>
<P>
<A NAME="CVwdhow01doc003057"><B>Visual Basic Help&nbsp;&nbsp;&nbsp;</B>You
can use Help to find out which properties and methods you can
use with a particular object. Each object topic in Help includes
a <B>Properties</B> jump and a <B>Methods</B> jump, which display
(respectively) a list of properties and a list of methods for
the object. To jump to the appropriate Help topic, press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT>
in the Object Browser or a module.</A>
<P>
<A NAME="CVwdhow01doc003058"><B>Object model&nbsp;&nbsp;&nbsp;</B>For
an illustration of how Word objects are arranged in the object
hierarchy, see "Microsoft Word Objects" in Help. Click
an object in the graphic to display its corresponding Help topic.</A>
<P>
<A NAME="CVwdhow01doc003059"><B>Object Browser&nbsp;&nbsp;&nbsp;</B>The
Object Browser in the Visual Basic Editor displays the members
(properties and methods) of the Word objects.</A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH201">Using the Object Browser</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex4"></a>
<P>
To perform a task in Visual Basic, you need to determine the appropriate
object to use. For example, if you want to apply character formatting
found in the <B>Font</B> dialog box, use the <B>Font</B> object.
Then you need to determine how to drill down through the Word
object hierarchy from the <B>Application</B> object to the <B>Font</B>
object, through the objects that contain the <B>Font</B> object
you want to modify. 
<P>
<A NAME="CVwdhow01doc003041">To see how this is done, open the
Visual Basic Editor and click <B>Object Browser</B> on the <B>View</B>
menu. Click <B>Application</B> in the <B>Classes</B> list. then
click <B>Selection</B> in the <B>Members</B> list. The text at
bottom of the Object Browser indicates that <B>Selection</B> is
a read&#173;only property that returns a <B>Selection</B> object.
Click <B>Selection</B> at the bottom of the Object Browser; <B>Selection</B>
is now selected in the <B>Classes</B> list, and the <B>Members</B>
list displays the members of the <B>Selection</B> object. Scroll
through the list of members until you find <B>Font</B>, and then
click <B>Font</B>. The text at the bottom of the Object Browser
indicates that <B>Font</B> is a read&#173;only property that returns
a <B>Font</B> object. Click <B>Font</B> at the bottom of the Object
Browser; <B>Font</B> is now selected in the <B>Classes</B> list,
and the <B>Members</B> list displays the members of the <B>Font</B>
object. Click <B>Bold</B> in the Members pane. The text at the
bottom of the Object Browser indicates that the <B>Bold</B> property
is a read/write property. For more information about this property,
press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT> or click the <B>Help</B> button to
jump to the Help topic for the <B>Bold</B> property. </A>
<P>
Given this information, you can write
the instruction shown in the following example to apply bold formatting
to the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Font.Bold = True

</code></pre></FONT>


<P>
As you can see, you use methods or
properties to drill down to an object. That is, you return an
object by applying a method or property to an object above it
in the object hierarchy. After you return the object you want,
you can apply the methods and control the properties of that object.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>A
given object often exists in more than one place in the object
hierarchy. For an illustration of the Word object model, see "Microsoft
Word Objects" in Help. Also, individual properties and methods
are often available to multiple objects in the Word object hierarchy.
For example, the <B>Bold</B> property is a property of both the <B>Font</B>
and <B>Range</B> objects. The following example applies bold formatting
to the entire active document (the <B>Content</B> property returns a
<B>Range</B> object).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Content.Bold = True

</code></pre></FONT>

<P>
<A NAME="PGappbC4"></A>
</MENU></MENU></MENU>

<MENU>
<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappBH104">Selection Object vs. Range Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex5"></a>
<P>
Most WordBasic commands modify whatever is selected. For example,
the <B>Bold</B> command formats the selection with bold formatting,
and the <B>InsertField</B> command inserts a field at the insertion
point. Visual Basic supports this same functionality through the
<B>Selection</B> object, which you return by using the <B>Selection</B>
property. The selection can be a block of text or just the insertion
point.
<P>
The following Visual Basic example inserts the text "Hello
World" and a new paragraph after the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.InsertAfter Text:="Hello World"
Selection.InsertParagraphAfter

</code></pre></FONT>




<P>
In addition to working with the selection, you can define and
work with various ranges of text in a document. A <B>Range</B>
object refers to a contiguous area in a document, with a starting
character position and an ending character position. Similar to
the way you use bookmarks in a document, you use <B>Range</B>
objects in Visual Basic to identify portions of a document. For
example, you can use Visual Basic to apply bold formatting anywhere
in a given document without changing the selection. The following
example applies bold formatting to the first 10 characters in
the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Range(Start:=0, End:=10).Bold = True

</code></pre></FONT>


<P>
The following example applies bold formatting to the first paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Paragraphs(1).Range.Bold = True

</code></pre></FONT>



<P>
Both of the preceding example change the formatting in the active
document without changing the selection. In most cases, <B>Range</B>
objects are preferred over the <B>Selection</B> object for the
following reasons:
<P>

<UL>
<P>
<LI>You can define and use multiple
<B>Range</B> objects, whereas you can have only one <B>Selection</B>
object per document window.
<P>
<LI>Manipulating <B>Range</B>
objects doesn't change the selection.
<P>
<LI>Manipulating
<B>Range</B> objects is faster than working with the selection.
<P>
</UL>

<P>
For more information about working with <B>Range</B> and <B>Selection</B>
objects, see Chapter&nbsp;7, "<a href="007.htm">Microsoft Word Objects</A>."
<P>
<A NAME="PGappbC5"></A>

</MENU></MENU></MENU>

<MENU>
<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappBH105">Using WordBasic Statements and Functions</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex6"></a>
<P>
You can use WordBasic statements and functions in your Visual
Basic macros. When you use a WordBasic macro in Word&nbsp;97,
the macro is automatically modified to work with Visual Basic.
The following example is a WordBasic macro in a Word&nbsp;95 template.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MAIN
FormatFont .Name = "Arial", .Points = 10
Insert "Hello World"
End Sub

</code></pre></FONT>




<P>
When the template is opened in Word&nbsp;97, the macro is converted
to the code shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public Sub Main()
WordBasic.FormatFont Font:="Arial", Points:=10
WordBasic.Insert "Hello World"
End Sub

</code></pre></FONT>




<P>
Each statement in the converted macro begins with the <B>WordBasic</B>
property. The <B>WordBasic</B> property returns an object with
methods that correspond to the WordBasic statements and functions;
this object makes it possible to run WordBasic macros in Word&nbsp;97.
You can reuse old code (instructions that use the WordBasic property)
along with new instructions that you write (instructions that
don't use the WordBasic property). The following example is functionally
equivalent to the preceding macro; however, the second WordBasic
instruction has been changed to use the <B>TypeText</B> method
of the <B>Selection</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public Sub Main()
WordBasic.FormatFont Font:="Arial", Points:=10
Selection.TypeText Text:="Hello World"
End Sub

</code></pre></FONT>




<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH202">Using WordBasic Statements</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex7"></a>
<P>
If you still want to use WordBasic statements in Word&nbsp;97,
precede each WordBasic statement with the <B>WordBasic</B> property
followed by the dot operator. The following Visual Basic example
moves the insertion point to the beginning of the document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>WordBasic.StartOfDocument

</code></pre></FONT>



<P>
The following example sets justified paragraph alignment and adds
1 inch of space above and below each paragraph in the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>WordBasic.FormatParagraph .Alignment = 3, .Before = "1 in", .After = "1 in"

</code></pre></FONT>



<P>
The following example selects all text from the insertion point
through the MyMark bookmark. (Notice how the <B>With</B> statement
is used to specify the <B>WordBasic</B> object once for a series
of instructions.)

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With WordBasic
&nbsp;&nbsp;&nbsp; .ExtendSelection
&nbsp;&nbsp;&nbsp; .EditGoTo "MyMark"
&nbsp;&nbsp;&nbsp; .Cancel
End With

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH203">Using WordBasic Functions</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex8"></a>
<P>
Likewise, to use WordBasic functions in Word&nbsp;97, precede
the WordBasic function with the WordBasic property followed by
the dot operator, and use square brackets around the function
name. The following table shows the original WordBasic syntax
and the corresponding Visual Basic syntax using the WordBasic
property.
<P>

<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>
<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

WordBasic instructions</FONT></B>
</TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Equivalent Visual Basic instruction</FONT></B>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
MsgBox Font$()</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
MsgBox WordBasic.[Font$]()</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
If Bold() = 0 Then Bold 1</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
If WordBasic.[Bold]() = 0 Then WordBasic.Bold 1</FONT>
</TD>
</TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
x = AppInfo$(1)</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
x = WordBasic.[AppInfo$](1)</FONT>
</TD></TR>
</TABLE>
<P>

<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Methods
of the <B>WordBasic</B> object are slower than methods and properties
of other Visual Basic objects. For example, 
<FONT FACE="COURIER NEW,COURIER" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

WordBasic.FileOpen</FONT>
is slower than 
<FONT FACE="COURIER NEW,COURIER" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Documents.Open</FONT>. Also, the WordBasic language won't
be updated with new commands in the future. Visual Basic includes
objects, properties, and methods that duplicate and improve on
WordBasic functionality. If you know which WordBasic command to
use to perform a particular task, see the conversion table in
"Visual Basic Equivalents for WordBasic Commands" in
Help. This will give you a guide as to which Visual Basic methods
and properties to use for specific tasks.
<P>
<A NAME="PGappbC6"></A>

</MENU></MENU></MENU>

<MENU>
<P>
<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappBH106">Miscellaneous Changes</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
This section outlines other changes to the programming environment
in Word&nbsp;97.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH204">Syntax Changes</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex9"></a>
<P>
Use the dot operator (.) to separate properties and methods in
a Visual Basic instruction. The following example makes the selected
text red. The example uses dots to separate the <B>Selection</B>,
<B>Font</B>, and <B>ColorIndex</B> properties.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Font.ColorIndex = wdRed

</code></pre></FONT>



<P>
Use an equal sign (=) to set property values. The following example
makes the first paragraph in the active document bold.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Paragraphs(1).Range.Bold = True

</code></pre></FONT>



<P>
Use a colon followed by an equal sign (:=) to set an argument
of a method, and use a comma to separate arguments of a method.
The following example opens MyDoc.doc as a read&#173;only document.
<B><I>FileName</I></B> and <B><I>ReadOnly</I></B> are
arguments of the <B>Open</B> method.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Open FileName:="C:\MyFiles\MyDoc.doc", ReadOnly:=True

</code></pre></FONT>



<P>
Use a space followed by an underscore character ( _) to continue
a Visual Basic instruction to the next line. (In WordBasic, the
continuation character is a backslash character (\).) The following
Visual Basic example spans three lines. The first and second lines
end with continuation characters. Press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ENTER</FONT>
after typing the continuation character.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Open FileName:="C:\MyFiles\MyDoc.doc", _
&nbsp;&nbsp;&nbsp; ConfirmConversions:=False, ReadOnly:=False, AddToRecentFiles:=True, _
&nbsp;&nbsp;&nbsp; Revert:=False, Format:=wdOpenFormatAuto

</code></pre></FONT>




<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH205">Data Types</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex10"></a>
<P>
Visual Basic has many more data types than does WordBasic. You
can define and use variables without learning about data types,
but if you want to write efficient code you should define variables
with the appropriate data type (for instance, <B>Integer</B>,
<B>String</B>, or <B>Long</B>). The following example defines
the 
<FONT FACE="COURIER NEW,COURIER" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

counter</FONT>
variable as an integer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim counter As Integer

</code></pre></FONT>
<P>
If you don't specify a data type when you define a variable, Visual
Basic automatically specifies the <B>Variant</B> data type, which
takes up the largest amount of memory (a minimum of 16 bytes)
of all the data types. For information about the various Visual
Basic data types, see Chapter&nbsp;1, "<a href="001.htm">Programming Basics</A>,"
or see "Data Type Summary" in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH206">Concatenating Strings and Inserting Special
Characters</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex11"></a>
<P>
Use the ampersand character (&amp;) instead of a plus sign
(+) to concatenate strings. To insert special characters, you
can continue to use the <B>Chr$()</B> function in Word&nbsp;97,
or you can use one of the following constants: <B>vbCr</B>, <B>vbLf</B>,
<B>vbCrLf</B>, or <B>vbTab</B>. The following table shows WordBasic
instructions that use concatenated strings and special characters,
and their Visual Basic equivalents.
<P>

<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>
<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


WordBasic instruction</FONT></B>
</TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


Equivalent Visual Basic instruction</FONT></B>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Insert "Hamlet " + Chr$(13)</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Selection.InsertAfter Text:="Hamlet " &amp; vbCr</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Msgbox "Hello" + Chr$(32) + "Tom"</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
MsgBox Text:="Hello" &amp; Space &amp; "Tom"</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Insert Chr$(9)</FONT>
</TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
Selection.InsertAfter Text:=vbTab</FONT>
</TD></TR>
</TABLE>
<P>

<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Use
the <B>ChrW$()</B> function to return a string that contains the character
associated with the specified Unicode character.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH207">Loops and Conditional Statements</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex12"></a>
<P>
Visual Basic and WordBasic have similar conditional and looping
statements (also known as <I>control structures</I>).
Visual Basic includes additional looping statements, which are
marked with an asterisk in the following table. For information
about using the conditional and looping statements in the following
table, see Chapter&nbsp;1, "<a href="001.htm">Programming Basics</A>."
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>
<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Statement</FONT></B></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Purpose</FONT></B>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>If...Then...Else</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Branching when the specified condition is <B>True </B>or <B>False</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Select Case</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Selecting a branch from a set of conditions</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Do...Loop</B><B>*</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Looping while or until the specified condition is <B>True</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>While...Wend</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Looping while the specified condition is <B>True </B>(same as the <B>Do While&#133;Loop </B>form of <B>Do&#133;Loop</B>)</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>For...Next</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Repeating a group of instructions a specified number of times</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>For Each...Next</B><B>*</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Repeating a group of instructions for each object in the specified collection</FONT>
</TD></TR>
</TABLE>
<P>
Visual Basic includes a <B>For...Next</B> statement for looping
through a series of instructions. For looping through objects
in a collection, however, the <B>For Each&#133;Next</B> statement
works more efficiently. The following WordBasic example creates
a new document and then inserts the available font names.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>FileNewDefault
For count = 1 To CountFonts()
&nbsp;&nbsp;&nbsp; Insert Font$(count)
&nbsp;&nbsp;&nbsp; InsertPara
Next count

</code></pre></FONT>




<P>
The following Visual Basic example is an equivalent for the preceding
WordBasic example. Notice how the <B>With</B> statement is used
to specify the <B>Selection</B> object once for a series of instructions.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Add
For i = 1 To FontNames.Count
&nbsp;&nbsp;&nbsp; With Selection
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .InsertAfter Text:=FontNames(i)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .InsertParagraphAfter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Collapse Direction:=wdCollapseEnd
&nbsp;&nbsp;&nbsp; End With
Next I

</code></pre></FONT>




<P>
The <B>For Each&#133;Next</B> statement automatically loops through
each item in the collection without using a 
<FONT FACE="COURIER NEW,COURIER" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

counter</FONT>
variable that the <B>For&#133;Next</B> statement requires. The
following Visual Basic example is also an equivalent for the preceding
WordBasic example. However, it is more efficient than the preceding
Visual Basic equivalent, which uses <B>For&#133;Next</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Add
For Each aFont In FontNames
&nbsp;&nbsp;&nbsp; With Selection
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .InsertAfter Text:=aFont
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .InsertParagraphAfter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Collapse Direction:=wdCollapseEnd
&nbsp;&nbsp;&nbsp; End With
Next aFont

</code></pre></FONT>




<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH208">Measurements</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex13"></a>
<P>
Often you can specify measurements in WordBasic macros either
in points or as a text measurement (that is, a measurement specified
as a string). For example, the following WordBasic example sets
justified alignment and adds 1 inch of space above and below each
paragraph in the selection (1 inch = 72 points).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>FormatParagraph .Alignment = 3, .Before = 72, .After = "1 in"

</code></pre></FONT>



<P>
<a name="dex14"></a>
<P>
The following Visual Basic example is equivalent to the preceding
WordBasic statement. The <B>With</B> statement is used to specify
the <B>Paragraphs</B> collection object once for a series of instructions
that set properties of the <B>Paragraphs</B> collection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With Selection.Paragraphs
&nbsp;&nbsp;&nbsp; .Alignment = wdAlignParagraphJustify
&nbsp;&nbsp;&nbsp; .SpaceBefore = 72
&nbsp;&nbsp;&nbsp; .SpaceAfter = InchesToPoints(1)
End With

</code></pre></FONT>




<P>
You must specify measurements for Word methods and properties
in points. You can do this either by specifying the number of
points as a number or by using one of the following conversion
methods to convert the measurement to points: <B>CentimetersToPoints</B>,
<B>InchesToPoints</B>, <B>LinesToPoints</B>, <B>MillimetersToPoints</B>,
or <B>PicasToPoints</B>. The preceding example uses the <B>InchesToPoints</B>
method to convert 1 inch to points.
<P>
<A NAME="PGappbC7"></A>

</MENU></MENU></MENU>

<MENU>
<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappBH107">Example Macros</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex15"></a>
<P>
This section provides some WordBasic and Visual Basic macros for
comparison. 
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH209">Applying Formatting</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
The following WordBasic macro applies character and paragraph
formatting to the selected text.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MAIN
FormatFont .Font = "Times New Roman", .Points = 14, .AllCaps = 1
FormatParagraph .LeftIndent = "0.5"
SpacePara1
End Sub

</code></pre></FONT>




<P>
The following Visual Basic macro is the equivalent of the preceding
WordBasic macro. This macro uses the <B>Selection</B> property
to apply character and paragraph formatting to the selected text.
It uses the <B>Font</B> property to gain access to character&#173;formatting
properties, and it uses the <B>ParagraphFormat</B> property to
gain access to paragraph&#173;formatting properties and methods.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub Macro1()
With Selection.Font
&nbsp;&nbsp;&nbsp; .Name = "Times New Roman"
&nbsp;&nbsp;&nbsp; .Size = 14
&nbsp;&nbsp;&nbsp; .AllCaps = True
End With
With Selection.ParagraphFormat
&nbsp;&nbsp;&nbsp; .LeftIndent = InchesToPoints(0.5)
&nbsp;&nbsp;&nbsp; .Space1
End With
End Sub

</code></pre></FONT>




<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH210">Deleting to the Beginning of a Sentence</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
The following WordBasic macro deletes the text between the insertion
point and the beginning of the sentence that the insertion point
is positioned within. The macro then capitalizes the first letter
of the remaining text.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MAIN
SentLeft 1, 1
EditCut
ChangeCase 4
End Sub

</code></pre></FONT>




<P>
The following Visual Basic macro uses the <B>MoveStart</B> method
to extend the selection to the beginning of the active sentence.
The <B>Cut</B> method cuts the selected text and places it on
the Clipboard, and the <B>Case</B> property changes the capitalization
of the character following the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub Macro1()
With Selection
&nbsp;&nbsp;&nbsp; .MoveStart Unit:=wdSentence, Count:=-1
&nbsp;&nbsp;&nbsp; .Cut
&nbsp;&nbsp;&nbsp; .Range.Case = wdTitleSentence
End With
End Sub

</code></pre></FONT>




<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH211">Removing Excess Paragraph Marks</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
Some sources of text include a paragraph mark at the end of every
line. This text is difficult to work with in Word because Word
treats each line as a separate paragraph and doesn't wrap the
text. The following WordBasic macro removes the excess paragraph
marks (the end&#173;of&#173;line paragraph marks) but leaves the
end&#173;of&#173;paragraph marks.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MAIN
EditReplace .Find = "^p^p", .Replace = "@#$#", \
&nbsp;&nbsp;&nbsp; .Direction = 0, .ReplaceAll, .Format = 0, .Wrap = 1
FileSave
EditReplace .Find = "^p", .Replace = " ", \
&nbsp;&nbsp;&nbsp; .Direction = 0, .ReplaceAll, .Format = 0, .Wrap = 1
FileSave
EditReplace .Find = "@#$#", .Replace = "^p^p", \
&nbsp;&nbsp;&nbsp; .Direction = 0, .ReplaceAll, .Format = 0, .Wrap = 1
End Sub

</code></pre></FONT>




<P>
The preceding macro assumes that two consecutive paragraph marks
signify the end of a paragraph. When you remove paragraph marks
from text, you usually want to preserve separate paragraphs. For
that reason, this macro replaces two consecutive paragraph marks
with the placeholder <I>"@#$#"</I>. The
macro then replaces each remaining paragraph mark with a space.
Finally, it replaces the <I>"@#$#"</I> placeholder
with two paragraph marks.
<P>
The following Visual Basic macro is the equivalent of the preceding
WordBasic macro. The macro uses the <B>Execute</B> method of the
<B>Find</B> object to execute the three find and replace operations.
It uses the <B>Save</B> method to save the active document after
each find and replace operation.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub Macro1()
With Selection.Find
&nbsp;&nbsp;&nbsp; .Execute FindText:="^p^p", ReplaceWith:="@#$#", Wrap:=wdFindContinue, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Replace:=wdReplaceAll, Format:=False, Forward:=True
&nbsp;&nbsp;&nbsp; ActiveDocument.Save
&nbsp;&nbsp;&nbsp; .Execute FindText:="^p", ReplaceWith:=" ", Wrap:=wdFindContinue, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Replace:=wdReplaceAll, Format:=False, Forward:=True
&nbsp;&nbsp;&nbsp; ActiveDocument.Save
&nbsp;&nbsp;&nbsp; .Execute FindText:="@#$#", ReplaceWith:="^p^p", Wrap:=wdFindContinue, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Replace:=wdReplaceAll, Format:=False, Forward:=True
End With
End Sub

</code></pre></FONT>




<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppBH212">Counting How Many Times a Word Appears</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
The following WordBasic macro uses a <B>While...Wend</B> loop
to count the number of times that a specified word appears in
a document. The <B>InputBox$()</B> function prompts the user for
a search word.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MAIN
count = 0
True = -1
searchtext$ = InputBox$("Please type a word to search for:")
StartOfDocument
EditFind .Find = searchtext$, .Direction = 0, .MatchCase = 0, \
&nbsp;&nbsp;&nbsp; .WholeWord = 0, .Format = 0, .Wrap = 0
While EditFindFound() = True
&nbsp;&nbsp;&nbsp; count = count + 1
&nbsp;&nbsp;&nbsp; RepeatFind
Wend
MsgBox searchtext$ + " was found " + count + " times"
End Sub

</code></pre></FONT>




<P>
The following Visual Basic macro accomplishes the same task as
the preceding WordBasic macro by using a <B>Do...Loop</B> statement
and the <B>Execute</B> method of the <B>Find</B> object. Because
the macro gets to the <B>Find</B> object from a <B>Range</B> object
(the <B>Content</B> property returns a <B>Range</B> object), the
selection in the document is unchanged. Each time the specified
word is found, the 
<FONT FACE="COURIER NEW,COURIER" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

count</FONT>
variable is incremented by 1. As soon as the <B>Do&#133;Loop</B>
statement finishes looping through the document (that it, when
it has counted all instances of the specified word), the macro
exits the loop and displays the results in a message box.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub Macro1()
count = 0
searchtext$ = InputBox$("Please type a word to search for:")
With ActiveDocument.Content.Find
&nbsp;&nbsp;&nbsp; Do While .Execute(FindText:=searchtext$, Format:=False, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MatchCase:=False, MatchWholeWord:=False) = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  count = count + 1
&nbsp;&nbsp;&nbsp; Loop
End With
MsgBox searchtext$ &amp; " was found " &amp; count &amp; " times"
End Sub

</code></pre></FONT>
<BR>
</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>

</TABLE>
<!--ToTop_End-->

<!--EndNav_Start-->

<P>

</FONT>
</FONT></BODY>

</HTML>

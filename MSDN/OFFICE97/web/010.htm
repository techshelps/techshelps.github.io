<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 10: Shapes and the Drawing Layer</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 10</B></FONT></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Shapes and the Drawing Layer</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B><A NAME="MT1PG05p5">Contents</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<BR>
<LI><A HREF="#CH010H101">Understanding the
Shape, ShapeRange, and Shapes Objects</A>
<BR>
<LI><A HREF="#CH010H102">Drawing a Shape on
a Document, Worksheet, or Slide</A>
<BR>
<LI><A HREF="#CH010H103">Editing a Shape</A>
<BR>
<LI><A HREF="#CH010H104">Working with OLE
Objects on a Document, Worksheet, or Slide</A>
<BR>
<LI><A HREF="#CH010H105">Working with More
Than One Shape</A>
</UL>

<P>
<A NAME="CH010H101">Visual Basic provides a common object model
that represents the drawing layer in Microsoft Excel&nbsp;97,
Word&nbsp;97, and PowerPoint&nbsp;97. The top&#173;level object
in this object model is the <B>Shapes</B> collection, which contains
all the graphic objects&nbsp;&#151; such as AutoShapes, freeforms,
OLE objects, and pictures&nbsp;&#151; that you can add to
the drawing layer. (Note that shapes you insert into the text
layer in Word aren't included in the <B>Shapes</B> collection.)</A>
<P>
This chapter covers the principal objects, properties, and methods
used to create and modify objects in the drawing layer in Microsoft
Excel, Word, and PowerPoint. For information about application&#173;specific
enhancements to the drawing layer object model in PowerPoint,
see Chapter 6, "<a href="006.htm">Microsoft PowerPoint Objects</A>." For information
about ActiveX controls (a special type of shape), see Chapter
12, "<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<P>
<A NAME="PG010C1"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H101">Understanding the Shape, ShapeRange, and Shapes Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex1"></a>
<P>
There are three different objects that represent shapes: the <B>Shapes</B>
collection, which represents all the shapes in the drawing layer
of a Microsoft Excel, Word, or PowerPoint document; the <B>ShapeRange</B>
collection, which represents a subset of the shapes in the drawing
layer; and the <B>Shape</B> object, which represents an individual
shape. In general, you use the <B>Shapes</B> collection when you
want to add shapes to the drawing layer or iterate through all
the shapes in the drawing layer; you use the <B>Shape</B> object
when you want to format or manipulate a single shape; and you
use the <B>ShapeRange</B> collection when you want to format or
manipulate multiple shapes the same way you work with multiple
selected shapes in the user interface.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;A
ShapeRange collection can have as few as one member or as many
members as there are shapes in the drawing layer. A ShapeRange
collection that contains a single member is essentially equivalent
to a Shape object. You can use a ShapeRange collection that contains
all the members in the Shapes collection to format all the shapes
in the drawing layer at at the same time. Properties and methods
that apply to the Shape object also apply to the ShapeRange collection
. For information about how these properties and methods behave
when they're applied to a ShapeRange collection that contains
a single shape or to a ShapeRange collection that contains multiple
shapes, see "<A HREF="#CH010H105">Working with More Than One Shape</A>" later
in this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H201">Returning the Shapes Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<a name="dex2"></a>
<P>
To return the entire collection of shapes in the drawing layer,
use the <B>Shapes</B> property. The following example selects
all the shapes in the drawing layer of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes.SelectAll

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H202">Returning the Shape Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<a name="dex3"></a>
<P>
Use <B>Shapes</B>(<I>index</I>), where <I>index</I>
is the shape's name or the index number, to return a <B>Shape</B>
object that represents a shape on a slide. The following example
duplicates the third shape on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and places it on the Clipboard.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes(3).Duplicate

</code></pre></FONT>

The following example duplicates the shape named "Red Square"
on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes("Red Square").Duplicate

</code></pre></FONT>

Each shape is assigned a default name (for example, "Rectangle
3") when you add it to the <B>Shapes</B> collection. To give
the shape a more useful, meaningful name, use the <B>Name</B>
property. The following example adds a rectangle to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and gives the rectangle the name "Red Square."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes.AddShape(msoShapeRectangle,144, 144, 72, 72).Name = "Red Square"

</code></pre></FONT>

<FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica"><B>Tip</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;The
methods that add a shape to the drawing layer also return a reference
to the added shape, so you can add a shape and apply a property
or method to it in a single statement, as shown in the preceding
example. For more information, see "<A HREF="#CH010H102">Drawing a Shape on a Document, Worksheet, or Slide</A>" later in this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H203">Returning the ShapeRange Collection </A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>

<a name="dex4"></a>
Use <B>Shapes.Range</B>(<I>index</I>), where <I>index</I>
is either the shape's name or index number or an array of shape
names or shape index numbers (or both), to return a <B>ShapeRange</B>
collection that represents a subset of the <B>Shapes</B> collection.
The following example sets the fill for shapes one and three on
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes.Range(Array(1, 3)).Fill.PresetGradient _
&nbsp;&nbsp;&nbsp; msoGradientHorizontal, 1, msoGradientLateSunset

</code></pre></FONT>

<P>
Use <B>Selection.ShapeRange</B> to return a <B>ShapeRange</B>
collection that represents all the shapes in the selection. Use
<B>Selection.ShapeRange</B>(<I>index</I>), where <I>index</I>
is the shape's name or index number, to return a <B>Shape</B>
object that represents one of the shapes in the selection. The
following example sets the fill for the first shape in the selection.
<P>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveWindow.Selection.ShapeRange(1).Fill.PresetGradient _
&nbsp;&nbsp;&nbsp; msoGradientHorizontal, 1, msoGradientLateSunset

</code></pre></FONT>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;The
macro recorder generates selection&#173;based code&nbsp;&#151;
that is, when you work with a shape with the macro recorder turned
on, it records a step for selecting the shape, records a step
for accessing the ShapeRange collection in the selection, and
then records the properties and methods you apply to the shape.
When you write code from scratch or edit recorded code, you can
create more efficient code by skipping the selection step and
returning shapes directly from the Shapes collection. 
<P>
<A NAME="PG010C2"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H102">Drawing a Shape on a Document, Worksheet, or Slide</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex5"></a>
<P>
Use one of the methods of the <B>Shapes</B> collection, listed
in the following table, to add a shape to a document, worksheet,
or slide. For detailed syntax information, see the Help topic
for the specific method. 
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">To add this kind of graphic</FONT></B>
</FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use this method</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Callout</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddCallout</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Sticky-note-like comment (PowerPoint only)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddComment</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Line or curve that connects two other shapes (Microsoft Excel and PowerPoint)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddConnector</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">B&eacute;zier curve</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddCurve</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Native Microsoft Excel form control (Microsoft Excel only)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddFormControl</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Rectangle with no line and no fill and an attached text frame</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddLabel</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Line</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddLine</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Sound or movie (PowerPoint only)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddMediaObject</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD></TR><P>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ActiveX control (Word only; use <B>AddOLEObject</B> in Microsoft Excel and PowerPoint)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddOLEControl</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Embedded or linked OLE object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddOLEObject</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Picture</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddPicture</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Placeholder for text or for a graphic object (PowerPoint only)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddPlaceholder</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Open polyline or closed polygon drawing</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddPolyline</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">AutoShape</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddShape</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Rectangle with no line and no fill and an attached text frame</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddTextbox</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WordArt</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddTextEffect</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Slide title (PowerPoint only)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddTitle</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Freeform</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>BuildFreeform</B> and <B>ConvertToShape</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR><P>
</TABLE>
<P>
The following example adds a rectangle to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.
<P>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes.AddShape msoShapeRectangle, 50, 50, 100, 200

</code></pre></FONT>

<P>
When you add a shape, you usually specify the dimensions of the
shape and the position of the upper&#173;left corner of the bounding
box for the shape relative to the upper&#173;left corner of the
page, worksheet, or slide. Distances in the drawing layer are
measured in points (72 points = 1 inch). 
<P>
The methods that add shapes to the drawing layer return a reference
to each added shape. You can therefore add a shape and apply properties
and methods to it in a single step, as shown in the following
example, which adds a shape to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and sets its name it the same statement.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes.AddShape(msoShapeIsoscelesTriangle, 10, 10, 100, 100).Name = "shpOne"

</code></pre></FONT>

The following example adds a shape to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and formats its fill.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes.AddShape(msoShapeRectangle, 90, 90, 90, 50).Fill
&nbsp;&nbsp;&nbsp; .ForeColor.RGB = RGB(128, 0, 0)
&nbsp;&nbsp;&nbsp; .BackColor.RGB = RGB(170, 170, 170)
&nbsp;&nbsp;&nbsp; .TwoColorGradient msoGradientHorizontal, 1
End With

</code></pre></FONT>


<A NAME="PG010C3"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H103">Editing a Shape</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>
<P>
You can use properties and methods of the <B>Shape</B> and <B>ShapeRange</B>
objects to move, resize, or delete a shape; change its appearance;
or add text to it. 
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H204">Finding the Properties and Methods You
Need to Perform a Task</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>

<a name="dex6"></a>
Properties and methods that control attributes and behavior common
to all types of shapes apply directly to the <B>Shape</B> and
<B>ShapeRange</B> objects. Related properties and methods that
apply to specific types of shapes are encapsulated in secondary
objects that you return from the <B>Shape</B> object.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Common Properties and Methods </B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
Properties and methods that control and attributes and behavior
common to shapes of different types apply directly to the <B>Shape</B>
and <B>ShapeRange</B> objects. This group includes properties
that control the size and position of the shape (such as <B>Left</B>,
<B>Top</B>, <B>Height</B>, and <B>Width</B>) and methods that
control generic editing behavior (such as <B>Duplicate</B> and
<B>ZOrder</B>). The following example sets the size of shape one
on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes(1)
&nbsp;&nbsp;&nbsp; .Height = 50
&nbsp;&nbsp;&nbsp; .Width = 100
End With

</code></pre></FONT>



<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Properties and Methods for Specific Types of Shapes</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
Related shape attributes that apply to a specific type of shape
are grouped under secondary objects, such as the <B>FillFormat</B>
object, which contains the properties that apply to shapes with
fills, or the <B>CalloutFormat</B> object, which contains all
the properties that are unique to callouts. To set these kinds
of attributes for a shape, you must first return the object that
contains them and then set properties of that object. For example,
you use the <B>Fill</B> property to return the <B>FillFormat</B>
object, and then you set the <B>ForeColor</B> property of the
<B>FillFormat</B> object to set the fill foreground color for
the specified shape. The following example sets the foreground
color to red for the fill for shape one on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myDocument.Shapes(1).Fill.ForeColor.RGB = RGB(255, 0, 0)

</code></pre></FONT>


<P>
The following table shows the objects accessible from the <B>Shape</B>
object that contain functionally related properties and methods.
Note that some of the properties that return these secondary objects
have the same name as the returned object (for example, the <B>PictureFormat</B>
property returns the <B>PictureFormat</B> object) whereas other
properties have the name of the returned object minus the word
"Format" (for example, the <B>Fill</B> property returns
the <B>FillFormat</B> object).
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use this property of the Shape object</FONT></B>
</FONT></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">To return this object</FONT></B>
</FONT></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Which contains properties and methods that apply to</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Callout</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>CalloutFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Callouts</FONT></FONT></TD>
</TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ConnectorFormat </B>(Microsoft Excel and PowerPoint only)</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ConnectorFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Connectors</FONT></FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ControlFormat</B>(Microsoft Excel only)</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ControlFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Native form controls</FONT></FONT></TD>
</TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Fill</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>FillFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Shapes that can contain fills (all shapes except lines)</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Line</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>LineFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">All shapes (the <B>LineFormat</B> object can represent a line or a shape's border)</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>LinkFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>LinkFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Linked OLE objects, linked pictures (Word only), and linked fields (Word only)</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>OLEFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>OLEFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">OLE objects</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>PictureFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>PictureFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Pictures and OLE objects</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Shadow</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ShadowFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">All shapes</FONT></FONT></TD>
</TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TextEffect</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>TextEffectFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WordArt objects</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ThreeD</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ThreeDFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Shapes that can be extruded</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>WrapFormat</B>(Word only)</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>WrapFormat</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Shapes that text will wrap around</FONT>
</FONT></TD></TR>

<P>
</TABLE>
<P>
Trying to return certain secondary objects (such as the <B>CalloutFormat</B>,
<B>ConnectorFormat</B>, <B>OLEFormat</B>, <B>PictureFormat</B>,
or <B>TextEffectFormat</B> object) from an inappropriate type
of shape can cause an error. For example, if you apply the <B>OLEFormat</B>
property to a shape that isn't an OLE object, you'll get an error.
(Trying to return certain other secondary objects&nbsp;&#151;
such as the <B>FillFormat</B>, <B>LineFormat</B>, <B>ShadowFormat</B>,
or <B>ThreeDFormat</B> object&nbsp;&#151; from an inappropriate
type of shape doesn't cause an error.) 
<P>
To avoid problems, check the <B>Type</B> property and, when applicable,
the <B>AutoShapeType</B> property of a shape before applying a
property or method that applies only to certain types of objects,
and be sure to include error handling in your code. The following
example updates all linked OLE objects on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.
Note that you cannot change the type of an existing object; for
example, you cannot change an object that's not a picture into
a picture. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each sh In myDocument.Shapes
&nbsp;&nbsp;&nbsp; If sh.Type = msoLinkedOLEObject Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sh.LinkFormat.Update
&nbsp;&nbsp;&nbsp; End If
Next

</code></pre></FONT>



<P>
For information about error handling, see Chapter 14, "<a href="014.htm">Debugging and Error Handling</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H205">Working with the Shape's Fill</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex7"></a>
<P>
The <B>FillFormat</B> object represents a shape's fill. You use
properties and methods of the <B>FillFormat</B> object to set
the type, color, and transparency of the fill. Because there are
a number of factors that determine a fill's appearance, many individually
valid property settings for the <B>FillFormat</B> object don't
make any sense in combination with other properties or without
additional information being supplied. For example, the value
<B>msoPatternDarkVertical</B> for the <B>Pattern</B> property
doesn't make much sense in conjunction with the value <B>msoGradientDiagonalUp</B>
for the <B>GradientStyle</B> property, and the value <B>msoFillPicture</B>
for the <B>Type</B> property doesn't make sense if you haven't
specified a picture file to use. 
<P>
So that you don't inadvertently assign incompatible values to
individual properties of the <B>FillFormat</B> object or neglect
to supply a necessary piece of information when you assign a property
value, most of the properties are read&#173;only. You can set
their values only by using methods that set multiple individual
properties to compatible values at the same time. For example,
you could not write code that would leave you with the two incompatible
settings mentioned in the preceding paragraph, because using the
<B>Patterned</B> method to set a patterned fill automatically
sets the <B>GradientStyle</B> property to <B>msoGradientMixed</B>,
and using the <B>OneColorGradient</B>, <B>PresetGradient</B>,
or <B>TwoColorGradient</B> method to set a gradient fill automatically
sets the value of the <B>Pattern</B> property to <B>msoPatternMixed</B>.
<P>
Use one of the following methods to set a shape's fill type: <B>Background</B>
(PowerPoint only), <B>OneColorGradient</B>, <B>Patterned</B>,
<B>PresetGradient</B>, <B>PresetTextured</B>, <B>Solid</B>, <B>TwoColorGradient</B>,
<B>UserPicture</B>, or <B>UserTextured</B>. You can also use any
of the following read/write properties to control the fill's appearance:
<B>BackColor</B>, <B>ForeColor</B>, <B>Transparency</B>, or <B>Visible</B>.

<P>
The following example adds a rectangle to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and then sets the foreground color, background color, and gradient
for the rectangle's fill.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes.AddShape(msoShapeRectangle, 90, 90, 90, 50).Fill
&nbsp;&nbsp;&nbsp; .ForeColor.RGB = RGB(128, 0, 0)
&nbsp;&nbsp;&nbsp; .BackColor.RGB = RGB(170, 170, 170)
&nbsp;&nbsp;&nbsp; .TwoColorGradient msoGradientHorizontal, 1
End With

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H206">Adding Shadows and 3&#173;D Effects</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex8"></a>
<P>
Use the <B>Shadow</B> property of the <B>Shape</B> object to return
the <B>ShadowFormat</B> object, and use the properties and methods
of the <B>ShadowFormat</B> object to edit a shape's shadow. The
following example sets the shadow for shape three on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
to semitransparent red. If the shape doesn't already have a shadow,
this example adds one to it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes(3).Shadow
&nbsp;&nbsp;&nbsp; Visible = True
&nbsp;&nbsp;&nbsp; .ForeColor.RGB = RGB(255, 0, 0)
&nbsp;&nbsp;&nbsp; .Transparency = 0.5
End With

</code></pre></FONT>

<P>
Use the <B>ThreeD</B> property of the <B>Shape</B> object to return
the <B>ThreeDFormat</B> object, and use the properties and methods
of the <B>ThreeDFormat</B> object to edit a shape's extrusion.
The following example adds an oval to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and then specifies that the oval be extruded to a depth of 50
points and that the extrusion be purple, orthographic, and lit
from the left.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myShape = myDocument.Shapes.AddShape(msoShapeOval, 90, 90, 90, 40)
With myShape.ThreeD
&nbsp;&nbsp;&nbsp; .Visible = True
&nbsp;&nbsp;&nbsp; .Depth = 50
&nbsp;&nbsp;&nbsp; .ExtrusionColor.RGB = RGB(255, 100, 255)&nbsp;&nbsp;&nbsp; ' RGB value for purple
&nbsp;&nbsp;&nbsp; .Perspective = False
&nbsp;&nbsp;&nbsp; .PresetLightingDirection = msoLightingLeft
End With

</code></pre></FONT>

<P>
You cannot apply three&#173;dimensional formatting to certain
kinds of shapes. Most of the properties and methods of the <B>ThreeDFormat</B>
object for such a shape will fail.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;If
you don't see the shadow or extrusion you expect, make sure that
the Visible property of the ShadowFormat or ThreeDFormat object
is set to True.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H207">Adding Text to a Shape</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex9"></a>
<P>
The area within a shape that can contain text is called a <I>text
frame</I>. The <B>TextFrame</B> object of a given shape
contains the text in the text frame as well as the properties
and methods that control the alignment and anchoring of the text
frame.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Only
built&#173;in, two&#173;dimensional AutoShapes have text frames;
lines, connectors, freeforms, pictures, OLE objects, and media
objects don't. Before applying the TextFrame property to a shape,
check to see whether the shape has a text frame. In PowerPoint,
you can do this by checking the value of the HasTextFrame property.
In Microsoft Excel and Word, check the Type property of the shape
to see whether it's a type of shape that can contain text. You
should always include error handling in case the TextFrame property
gets applied to a shape that doesn't have a text frame.
<P>
In Word, use the <B>TextRange</B> property of the <B>TextFrame</B>
object to return a <B>Range</B> object that represents the range
of text inside the specified text frame. The following example
adds text to the text frame for shape one in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Shapes(1).TextFrame.TextRange.Text = "My Text"

</code></pre></FONT>


<P>
In Microsoft Excel, use the <B>Characters</B> property of the
a <B>TextFrame</B> object to return a <B>Characters</B> object
that represents the text inside the specified text frame. The
following example adds text to the text frame for shape one on
the active worksheet.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveWorksheet.Shapes(1).TextFrame.Characters.Text = "My Text"

</code></pre></FONT>


<P>
In PowerPoint, use the <B>TextRange</B> property of the <B>TextFrame</B>
object to return a <B>TextRange</B> object that represents the
range of text inside the specified text frame. The following example
adds text to the text frame for shape one on slide one in the
active presentation.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActivePresentation.Slides(1).Shapes(1).TextFrame.TextRange.Text = "My Text"

</code></pre></FONT>


<P>
<A NAME="PG010C4"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H104">Working with OLE Objects on a Document, Worksheet, or Slide</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex10"></a>
<P>
You use the properties and methods of the <B>OLEFormat</B> object&nbsp;&#151;
such as the <B>Activate</B> and <B>DoVerb</B> methods&nbsp;&#151;
to control the OLE object contained in a shape. Use the <B>OLEFormat</B>
property of the <B>Shape</B> object to return the <B>OLEFormat</B>
object. The following example performs the default verb for shape
three on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
if this shape contains an OLE object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes(3)
&nbsp;&nbsp;&nbsp; If .Type = msoEmbeddedOLEObject Or _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Type = msoLinkedOLEObject Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .OLEFormat.DoVerb
&nbsp;&nbsp;&nbsp; End If
End With

</code></pre></FONT>



<P>
Use the <B>Object</B> property of the <B>OLEFormat</B> object
to return the OLE object contained in the specified shape. (In
Microsoft Excel, you must use the <B>Object</B> property twice
in a row, separated by the dot operator, to return the OLE object.)
The following example, run from Word or PowerPoint, adds text
to cell A1 on worksheet one in the Microsoft Excel workbook contained
in shape three on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes(3)
&nbsp;&nbsp;&nbsp; .OLEFormat.Activate
&nbsp;&nbsp;&nbsp; .OLEFormat.Object.Worksheets(1).Range("A1").Value = "New text"
End With

</code></pre></FONT>



<P>
Use the <B>Application</B> property of the OLE object returned
by the <B>Object</B> property to return the top&#173;level object
of the application that created the OLE object. The following
example, run from Microsoft Excel, displays the name of the application
in which each embedded OLE object on the active sheet was created.
Notice that you must use the <B>Object</B> property twice in a
row to return an OLE object in Microsoft Excel.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each s In ActiveSheet.Shapes
&nbsp;&nbsp;&nbsp; If s.Type = msoEmbeddedOLEObject Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s.OLEFormat.Activate
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox s.OLEFormat.Object.Object.Application.Name
&nbsp;&nbsp;&nbsp; End If
Next

</code></pre></FONT>



<P>
For information about using ActiveX controls (a special type of
interactive OLE object), see Chapter 12, "<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<P>
<A NAME="PG010C5"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H105">Working with More Than One Shape</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex11"></a>
<P>
There are several ways to work with multiple shapes. If you want
to set properties for multiple shapes individually, you can loop
through a <B>Shapes</B> or <B>ShapeRange</B> collection and apply
properties and methods to the individual <B>Shape</B> objects
in the collection. If you want to apply a property or method to
multiple shapes at the same time, you can construct a <B>ShapeRange</B>
collection that contains the shapes and then apply the property
or method to the <B>ShapeRange</B> collection. If you want to
form a single shape out of multiple shapes that can then be formatted,
sized, and positioned as a single entity, you can group the shapes.
If you want to position shapes relative to each other, you can
align and distribute them horizontally or vertically.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H208">Constructing a Shape Range That Contains
Only Certain Types of Shapes</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex12"></a>
<P>
If you want to construct a shape range that contains only the
shapes in the specified collection that possess a certain attribute
or attributes, use a conditional statement to test for the attributes
you want, and add the names or index numbers of the shapes that
satisfy your conditions to a dynamic array. You can then construct
a shape range by using this array as an argument. The following
example constructs a shape range that contains all the AutoShapes
on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and then groups them.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes
&nbsp;&nbsp;&nbsp; numShapes = .Count
&nbsp;&nbsp;&nbsp; If numShapes &gt; 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numAutoShapes = 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReDim autoShpArray(1 To numShapes)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For i = 1 To numShapes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If .Item(i).Type = msoAutoShape Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numAutoShapes = numAutoShapes + 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; autoShpArray(numAutoShapes) = .Item(i).Name
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If numAutoShapes &gt; 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReDim Preserve autoShpArray(1 To numAutoShapes)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set asRange = .Range(autoShpArray)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asRange.Group
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
&nbsp;&nbsp;&nbsp; End If
End With

</code></pre></FONT>



<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip</FONT></B>&nbsp;&nbsp;&nbsp;If
you want to include shapes that have one of several possible values
for a property in an array&nbsp;&#151; for example, if you
want to include all shapes that are of type <B>msoEmbeddedOLEObject</B>,
<B>msoLinkedOLEObject</B>, <B>msoLinkedPicture</B>, or <B>msoPicture</B>&nbsp;&#151;
use a <B>Select Case</B> structure instead of an <B>If&#133;End
If</B> structure to determine which shapes to include in the shape
range.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH010H209">Applying a Property or Method to Several
Shapes at the Same Time</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex13"></a>
<P>
In the user interface, there are some operations you can perform
with several shapes selected; for example, you can select several
shapes and set all their individual fills at once. There are other
operations you can only perform with a single shape selected;
for example, you can only edit the text in a shape if a single
shape is selected. 
<P>
In Visual Basic, there are two ways to apply properties and methods
to a set of shapes. These two ways allow you to perform any operation
that you can perform on a single shape on a range of shapes, whether
or not you can perform the same operation in the user interface.

<P>

<UL>
<P>
<LI>If the operation works on
a multiple selected shapes in the user interface, you can perform
the same operation in Visual Basic by constructing a <B>ShapeRange</B>
collection that contains the shapes you want to work with, and
applying the appropriate properties and methods directly to the
<B>ShapeRange</B> collection.
<P>
<LI>If the operation
doesn't work on multiple selected shapes in the user interface,
you can still perform the operation in Visual Basic by looping
through the <B>Shapes</B> collection or through a <B>ShapeRange</B>
collection that contains the shapes you want to work with, and
applying the appropriate properties and methods to the individual
<B>Shape</B> objects in the collection.
<P>
</UL>

<P>
<FONT COLOR="#0000FF"><B>Important</B></FONT>&nbsp;&nbsp;&nbsp;Many
properties and methods that apply to the <B>Shape</B> object and the
<B>ShapeRange</B> collection fail if they're applied to certain kinds
of shapes. For example, the <B>TextFrame</B> property fails if it's applied
to a shape that cannot contain text. If you're not positive that
each of the shapes in a <B>ShapeRange</B> collection can have a certain
property or method applied to it, don't apply the property or
method to the collection. If you want to apply one of these properties
or methods to a collection of shapes, you must loop through the
collection and test each individual shape to make sure that it's
an appropriate type of shape before applying one of these properties
or methods to it. 
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Applying a Property or Method to a ShapeRange Collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex14"></a>
<P>
If you can perform an operation on multiple selected shapes in
the user interface at the same time, you can do the programmatic
equivalent by constructing a <B>ShapeRange</B> collection and
then applying the appropriate properties or methods to it. The
following example constructs a shape range that contains the AutoShapes
named "Big Star" and "Little Star" on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and applies a gradient fill to them.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = myDocument.Shapes.Range(Array("Big Star", "Little Star"))
myRange.Fill.PresetGradient msoGradientHorizontal, 1, msoGradientBrass

</code></pre></FONT>


<P>
The following are general guidelines for how properties and methods
behave when they're applied to a <B>ShapeRange</B> collection:
<P>

<UL>
<P>
<LI>Applying a method to a the
collection is equivalent to applying the method to each individual
<B>Shape</B> object in that collection.
<P>
<LI>Setting
the value of a property of the collection is equivalent to setting
the value of the property of each individual shape in that collection.
<P>
<LI>A
property of the collection that returns a constant returns the
value of the property for an individual shape in the collection
if all shapes in the collection have the same value for that property.
If not all shapes in the collection have the same value for the
property, it returns the "mixed" constant.
<P>
<LI>A
property of the collection that returns a simple data type (such
as <B>Long</B>, <B>Single</B>, or <B>String</B>) returns the value
of the property for an individual shape if all shapes in the collection
have the same value for that property.
<P>
<LI>The value
of some properties can be returned or set only if there's exactly
one shape in the collection. If there's more than one shape in
the collection, a run&#173;time error occurs. This is generally
the case for returning or setting properties when the equivalent
action in the user interface is possible only with a single shape
(actions such as editing text in a shape or editing the points
of a freeform).
<P>
</UL>

<P>
The preceding guidelines also apply when you are setting properties
of shapes that are grouped under secondary objects of the <B>ShapeRange</B>
collection, such as the <B>FillFormat</B> object. If the secondary
object represents operations that can be performed on multiple
selected objects in the user interface, you will be able to return
the object from a <B>ShapeRange</B> collection and set its properties.
For example, you can use the <B>Fill</B> property to return the
<B>FillFormat</B> object that represents the fills of all the
shapes in the <B>ShapeRange</B> collection. Setting the properties
of this <B>FillFormat</B> object will set the same properties
for all the individual shapes in the <B>ShapeRange</B> collection.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Looping Through a Shapes or ShapeRange Collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex15"></a>
<P>
Even if you cannot perform an operation on several shapes in the
user interface at the same time by selecting them and then applying
a command, you can perform the equivalent action programmatically
by looping through the <B>Shapes</B> or <B>ShapeRange</B> collection
that contains the shapes you want to work with and applying the
appropriate properties and methods to the individual <B>Shape</B>
objects in the collection. The following example loops through
all the shapes on <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>
and adds text to each shape that's an AutoShape.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each sh In myDocument.Shapes
&nbsp;&nbsp;&nbsp; If sh.Type = msoAutoShape Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sh.TextFrame.TextRange.InsertAfter " (version 1)"
&nbsp;&nbsp;&nbsp; End If
Next

</code></pre></FONT>


<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Grouping, Aligning, Distributing, and Layering Shapes</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex16"></a>
<P>
Use the <B>Align</B> and <B>Distribute</B> methods of the <B>ShapeRange</B>
object to align or evenly distribute shapes horizontally or vertically.
Use the <B>ZOrder</B> method of the <B>Shape</B> or <B>ShapeRange</B>
object to change the layering order of shapes on a document relative
to one another. For examples of the syntax you use to perform
these operations, see the appropriate Help topics in Microsoft
Excel, Word, or PowerPoint.
<P>
When you want to work with multiple shapes as a single entity,
you can group a range of shapes together into single shape by
using the <B>Group</B> method of the <B>ShapeRange</B> collection.
The following example adds two shapes to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>,
groups the two new shapes together, sets the fill for the group,
rotates the group, and then sends it to the back of the drawing
layer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes
&nbsp;&nbsp;&nbsp; .AddShape(msoShapeCan, 50, 10, 100, 200).Name = "shpOne"
&nbsp;&nbsp;&nbsp; .AddShape(msoShapeCube, 150, 250, 100, 200).Name = "shpTwo"
&nbsp;&nbsp;&nbsp; With .Range(Array("shpOne", "shpTwo")).Group
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Fill.PresetTextured msoTextureBlueTissuePaper
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Rotation = 45
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .ZOrder msoSendToBack
&nbsp;&nbsp;&nbsp; End With
End With

</code></pre></FONT>

<P>
Use the <B>Ungroup</B> method of the <B>Shape</B> object to ungroup
a group of shapes, and use the <B>Regroup</B> method of the <B>ShapeRange</B>
collection to restore a group of shapes that you've ungrouped.

<P>
If you want to work with the individual shapes in a group without
ungrouping them, use the <B>GroupItems</B> property of the <B>Shape</B>
object that represents the group of shapes to return the <B>GroupShapes</B>
object, and use the <B>Item</B> method of the <B>GroupShapes</B>
object to return an individual shape within the group of shapes.
The following example <A NAME="CVshapedoc030003">adds three triangles
to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDocument</FONT>,
groups the triangles, sets a color for the entire group, and then
changes the color for the second triangle only.</A>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With myDocument.Shapes
&nbsp;&nbsp;&nbsp; .AddShape(msoShapeIsoscelesTriangle, 10, 10, 100, 100).Name = "shpOne"
&nbsp;&nbsp;&nbsp; .AddShape(msoShapeIsoscelesTriangle, 150, 10, 100, 100).Name = "shpTwo"
&nbsp;&nbsp;&nbsp; .AddShape(msoShapeIsoscelesTriangle, 300, 10, 100, 100).Name = "shpThree"
&nbsp;&nbsp;&nbsp; With .Range(Array("shpOne", "shpTwo", "shpThree")).Group
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Fill.PresetTextured msoTextureBlueTissuePaper
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .GroupItems(2).Fill.PresetTextured msoTextureGreenMarble
&nbsp;&nbsp;&nbsp; End With
End With

</code></pre></FONT>

<P>
</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>
</FONT>
</FONT></BODY>



</HTML>

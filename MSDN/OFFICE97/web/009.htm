<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 9: Microsoft Office Assistant</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 9</B></FONT></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Microsoft Office Assistant</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B><A NAME="MT1PG05p5">Contents</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<BR>
<LI><A HREF="#CH009H101">Using the Microsoft
Office Assistant</A>
<BR>
<LI><A HREF="#CH009H102">Using the Microsoft
Office Assistant Balloon</A>
</UL>

<P>
<A NAME="CH009H101">Microsoft Office&nbsp;97 uses the Office Assistant
to provide a single source for online Help. The Office Assistant
can offer tips on the task you're performing, answer questions
specific to the Office application you're using, and deliver messages
from the application. You can use the Office Assistant in your
own Visual Basic application to deliver information, guide the
user through a task, and even run your procedures in response
to the user's selecting a control in the Office Assistant balloon.
You control the Office Assistant, the balloon, and all of the
items inside the balloon by using the Assistant portion of the
Microsoft Office object model.</A>
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
Office Assistant isn't available in Microsoft Access&nbsp;97 applications
you build using the run&#173;time version of Microsoft Access.
<P>
<A NAME="PG009C1"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH009H101">Using the Microsoft Office Assistant</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex1"></a>
<P>
In an Office application, the user chooses which Assistant he
or she wants to see and then specifies the circumstances under
which the Assistant is to be displayed. In a Visual Basic application,
you can make the Assistant visible, animate it, move its window
to a different location on the screen, and display balloons that
contain various kinds of information and controls. 
<P>
<B>Note</B><FONT COLOR="#0000FF"><B>&nbsp;&nbsp;&nbsp;</B></FONT>You
cannot record the Assistant's animation or balloon actions, and
you cannot record options selected in the Office Assistant dialog
box.
<P>
The first step in implementing the Assistant in your Visual Basic
application is to determine how involved your user wants the Assistant
to be in delivering information. On the <B>Options</B> tab in
the <B>Office Assistant</B> dialog box, the user sets his or her
preferences for the placement of the Assistant, the type of Help
topics that the Assistant is to offer, and the Assistant's response
to the <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT> key.
<P>
You can use properties of the <B>Assistant</B> object to determine
the choices the user has made regarding the Assistant. Each of
the user's preferences corresponds to a property of the <B>Assistant</B>
object. For example, the <B>AssistWithHelp</B> property returns
<B>True</B> if the user has selected the <B>Respond to F1 key</B>
option on the <B>Options</B> tab in the <B>Office Assistant</B>
dialog box.
<P>
If the user's preferences indicate that he or she wants the Assistant's
help, you can program your application to make full use of the
Assistant by displaying text or prompts inside a balloon that
would otherwise be displayed in a message box or input box, and
you can make the Assistant available to offer tips that are automatically
sent from the application.
<P>
There are 34 different animations available for the Assistant.
You can program the Assistant to respond to a particular circumstance
with a particular animation by assigning one of the <B>MsoAnimationType</B>
constants to the <B>Animation</B> property of the <B>Assistant</B>
object. Depending on the Assistant the user has chosen, setting
the <B>Animation</B> property may or may not result in any obvious
animation. However, the <B>MsoAnimationType</B> constants are
valid for all Assistants.
<P>
<B>Note</B><FONT COLOR="#0000FF"><B>&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>You
can assign one of the msoAminationType constants to the Balloon
object as well. If you do this, the Assistant will perform the
specified animation when the balloon is displayed. For more information,
see "<A HREF="#CH009H102">Using the Microsoft Office Assistant Balloon</A>" later
in this chapter.
<P>
The following example has the Assistant display a message if the
<B>Display alerts</B> option is selected on the <B>Options</B>
tab in the <B>Office Assistant</B> dialog box, or displays a standard
message box if this option isn't selected. The Assistant is animated
when it displays the message, and after the user closes the balloon,
the <B>Visible</B> property of the Assistant is set to the value
it had before the example ran.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>hdng = "Empty field"
msg = "You need to enter a part number " _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "before you can proceed."
If Assistant.AssistWithAlerts = True Then
&nbsp;&nbsp;&nbsp; With Assistant
&nbsp;&nbsp;&nbsp; userState = .Visible
&nbsp;&nbsp;&nbsp; .Visible = True
&nbsp;&nbsp;&nbsp; Set bln = .NewBalloon
&nbsp;&nbsp;&nbsp; With bln
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Mode = msoModeModal
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Button = msoButtonSetOK
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Heading = hdng
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Text = msg
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Animation = msoAnimationGetAttentionMinor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret = .Show
&nbsp;&nbsp;&nbsp; End With
&nbsp;&nbsp;&nbsp;.Visible = userState
&nbsp;&nbsp;&nbsp;End With
Else
&nbsp;&nbsp;&nbsp;ret = MsgBox(msg, vbOKOnly, hdng)
End If

</code></pre></FONT>


<A NAME="PG009C2"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH009H102">Using the Microsoft Office Assistant Balloon</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>
<P>
<a name="dex2"></a>
The <B>Balloon</B> object is the most important part of the Office
Assistant object model. You use balloons to deliver messages to
your user or to request information from the user that you can
use in your Visual Basic application. There are several types
of balloons, each of which can contain labels and check boxes,
as well as certain types of graphics. Only one balloon can be
visible at a time, but you can create multiple <B>Balloon</B>
objects and store them in variables for use at any time, and you
can reuse any <B>Balloon</B> object by resetting its properties.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH009H201">Creating Balloons</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>

To create a balloon, you use the <B>NewBalloon</B> property of
the <B>Assistant</B> object. The balloon that's returned by the
property is blank. Use the <B>Mode</B> property to specify how
you want the balloon to respond to the user's actions. To add
a heading to the balloon, you use the <B>Heading</B> property,
and to add text to the body of the balloon, you use the <B>Text</B>
property. You can also add controls or graphics if you want. Finally,
you use the <B>Show</B> method to display the balloon you've designed.
The <B>Show</B> method displays the balloon as it exists (that
is, as you've designed it) at that point in time; therefore, it's
important to use the <B>Show</B> method after you've set or changed
any balloon properties.
<P>
There are several types of balloons you can display; the type
of balloon a <B>Balloon</B> object represents is determined by
the <B>Mode</B> property, which you can set to one of the following
<B>MsoModeType</B> constants: <B>msoModeModal</B>, <B>msoModeAutoDown</B>,
or <B>msoModeModeless</B>.
<P>
A modal balloon (<B>msoModeModal</B>) demands the user's complete
attention because keyboard or mouse activity is restricted to
the balloon while the balloon is displayed. A modal balloon is
best used for alerts or critical messages. The following example
uses a modal balloon to prompt the user to confirm whether the
active file should be closed without changes being saved. You
can use the value of the button that's clicked (which is assigned
to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">ret</FONT>) to
determine whether or not the event should continue. You can use
this example as part of an event procedure that runs whenever
a file is closed, or you can use it in a series of balloons leading
the user through a process.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp; .Mode = msoBalloonModal
&nbsp;&nbsp;&nbsp;.Heading = "Warning"
&nbsp;&nbsp;&nbsp;.Text = "If you close this file without saving it, " _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "this macro cannot proceed. Close without saving?"
&nbsp;&nbsp;&nbsp;.Button = msoButtonSetOkCancel
&nbsp;&nbsp;&nbsp;ret = .Show
End With

</code></pre></FONT>



<P>
An AutoDown balloon (<B>msoModeAutoDown</B>) is dismissed when
the user clicks or types anywhere in the application. This type
of balloon is best used for quick messages that aren't critical
to the task at hand. The following example displays a tip for
using a custom dialog box (the code can run in an event procedure
for a dialog box control). Because the balloon is an AutoDown
balloon, the message disappears as soon as the user clicks anywhere
in the dialog box.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>hdng = "Selecting a data source"
msg = "In this dialog box, you can specify a workbook " _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "or an external table of data to use for input." _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "If you use external data, it must contain delimited" _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "fields, rather than fixed-length fields."
With Assistant
&nbsp;&nbsp;&nbsp; Set bln = .NewBalloon
&nbsp;&nbsp;&nbsp; With bln
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Mode = msoModeAutoDown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Button = msoButtonSetOK
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Heading = hdng
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Text = msg
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret = .Show
&nbsp;&nbsp;&nbsp; End With
End With

</code></pre></FONT>



<P>
While a modeless balloon (<B>msoModeModeless</B>) is displayed,
the user can complete a task in the application; that is, the
user can type in the document and use menu and toolbar commands.
You can use a modeless balloon to display procedures or tips for
using your Visual Basic application, for the benefit of the user.

<P>
When the user clicks a control or button in a modeless balloon,
a <I>callback procedure</I> is called. Your Visual
Basic application must contain a procedure (whose name is assigned
to the <B>Callback</B> property) that responds to the action the
user takes. For example, if the user clicks the <B>OK</B> button,
he or she wants to dismiss the modeless balloon; the callback
procedure should respond accordingly by applying the <B>Close</B>
method to the balloon. The following example displays a series
of steps for the user to follow while the balloon remains displayed.
The callback procedure closes the balloon when the user clicks
<B>OK</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub DisplaySteps()
Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp; .Mode = msoModeModeless
&nbsp;&nbsp;&nbsp;.Callback = "StepsCallback"
&nbsp;&nbsp;&nbsp;.BalloonType = msoBalloonTypeNumbers
&nbsp;&nbsp;&nbsp;.Button = msoButtonSetOK
&nbsp;&nbsp;&nbsp;.Heading = "To create a new report"
&nbsp;&nbsp;&nbsp;.Labels(1).Text = "On the File menu, click New Report."
&nbsp;&nbsp;&nbsp;.Labels(2).Text = "In the New Report dialog box, select the period " _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp; "(monthly, quarterly, or yearly)."
&nbsp;&nbsp;&nbsp;.Labels(3).Text = "Click the Create button."
&nbsp;&nbsp;&nbsp;ret = .Show
End With
End Sub

Sub
StepsCallback(bln As Balloon, btn As Long, priv As Long)
&nbsp;&nbsp;&nbsp;bln.Close
End Sub

</code></pre></FONT>

<P>
For more information about the <B>Callback</B> property and callback
procedures, see "<A HREF="#CH009H204">Using Callback Procedures</A>" later in
this chapter. 
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH009H202">Managing Multiple Balloons</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex3"></a>
<P>
There isn't a collection of <B>Balloon</B> objects. Instead, you
can create an array to store more than one balloon variable. You
can create and store empty balloons, or you can create and store
balloons complete with heading, text, and controls. The following
example creates an array and adds three <B>Balloon</B> objects,
with numbered headings, to the array.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim myBlnArray(3) as Balloon

With Assistant
&nbsp;&nbsp;&nbsp; For i = 1 To 3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set myBlnArray(i) = .NewBalloon
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBlnArray(i).Heading = i
&nbsp;&nbsp;&nbsp;Next
End With

</code></pre></FONT>

<P>
The following example displays the second balloon in the array.
<P>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myBlnArray(2).Show

</code></pre></FONT>

Alternatively, you can set a separate object variable for each
balloon you create; this way, you can reference the variable at
any time. If you declare balloon variables globally, you can call
them from any procedure in your program.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH009H203">Adding Text and Controls to Balloons</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex4"></a>
Every balloon can contain a heading and text. By default, a balloon
contains an <B>OK</B> button at the bottom, but it can also contain
any of a variety of button combinations, or no buttons at all
(although showing no buttons requires a modeless balloon with
button labels; for information about button labels, see "<A HREF="#ADDMODLAB">Adding
and Modifying Labels</A>" later in this section).
To provide emphasis or greater detail, you can add an icon to
the heading, and you can add bitmaps, Windows metafiles, or Macintosh
pict files anywhere text can appear in the balloon. Also, every
balloon can contain as many as five numbered, bulleted, or button
labels, and as many as five check boxes; you can use these elements
to deliver or return detailed information from the user.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Setting the Heading and Text</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
The most basic elements of a balloon are the heading and the simple
text that appear at the top of the balloon. Both the heading and
text are optional; you can display a balloon that contains neither
one. You set the heading and text by using the <B>Heading</B>
and <B>Text</B> properties. You specify which buttons to display
at the bottom of the balloon by setting the <B>Button</B> property
to one of the <B>MsoButtonSetType</B> constants. The following
example displays a simple message in a modal balloon.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp; .Mode = msoModeModal
&nbsp;&nbsp;&nbsp;.Button = msoButtonSetYesNo
&nbsp;&nbsp;&nbsp;.Heading = "Empty file"
&nbsp;&nbsp;&nbsp;.Text = "The file you specified does not contain any data. Quit now?"
&nbsp;&nbsp;&nbsp; ret = .Show
End With

</code></pre></FONT>



<P>
The <B>Show</B> method returns a value that indicates which button
was clicked to close the balloon. You can use the return value
to make a decision about what action to take next. In the preceding
example, if the <B>Show</B> method set the value of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">ret</FONT>
to <B>msoBalloonButtonYes</B>, the example can proceed to quit
the running macro as the user requested.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Adding Icons and Bitmaps</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex5"></a>
<P>
To get the user's attention, you can add icons and bitmaps to
Office Assistant balloons. Icons are displayed at the top of the
balloon, to the left of the heading text, whereas bitmaps can
be displayed anywhere in the balloon. To add an icon, assign one
of the <B>msoIconType</B> constants to the <B>Icon</B> property
of the <B>Balloon</B> object. The following example displays a
simple alert balloon.
<P>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp; .Mode = msoModeModal
&nbsp;&nbsp;&nbsp;.Heading = "Attention Please"
&nbsp;&nbsp;&nbsp;.Text = "That command is not available now."
&nbsp;&nbsp;&nbsp;.Icon = msoIconAlert
&nbsp;&nbsp;&nbsp;.Show
End With

</code></pre></FONT>



<P>
To add a Windows or Macintosh bitmap to a balloon, specify the
type (.bmp) and the path of the bitmap. You can insert a bitmap
can be inserted the balloon text, the balloon heading, or a label.
You can also include braces around text if you format the text
as shown in the following example. This example inserts a Windows
bitmap file into the text of a balloon; this will produce a balloon
error if Circles.bmp doesn't exist in the specified folder. For
information about handling balloon errors, see "BalloonError
Property" in Help.
<P>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>myBmp = "{bmp c:\Windows\circles.bmp}"
myText1 = "This text is before the picture,"
myText2 = " and this text is after the picture."
myText3 = " {{This is text in braces.}"
Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp; .Mode = msoModeAutoDown
&nbsp;&nbsp;&nbsp; .Heading = "Displaying a Bitmap."
&nbsp;&nbsp;&nbsp; .Text = myText1 &amp; myBmp &amp; myText2 &amp; myText3
&nbsp;&nbsp;&nbsp; .Show
End With

</code></pre></FONT>



<P>
You can specify a graphic you want displayed by using the following
syntax: <B>{</B><I>type location sizing_factor</I><B>}</B>.
In this syntax, <I>type</I> indicates the type of
graphic that will be added to the balloon, <I>location</I>
should be the complete path and can be a network location (\\<I>server</I>\<I>folder</I>\<I>picture.bmp</I>)
or a local hard drive (C:\<I>folder</I>\<I>picture.bmp</I>),
and <I>sizing_factor</I> represents the width (in
characters) of the Windows metafile or the Macintosh picture (it
has no effect on a .bmp file). If proportional fonts are being
used, <I>sizing_factor</I> represents the average
character width. You can use <I>sizing_factor</I>
to reduce a large graphic to fit your balloon, or to enlarge a
small graphic to enhance the image. The following example reduces
the displayed size of the Windows metafile Clouds.wmf to a 20&#173;character
width and inserts it as the heading in a balloon.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myBln = Assistant.NewBalloon
myWmf = "{wmf c:\graphics\clouds.wmf 20}"
With myBln
&nbsp;&nbsp;&nbsp; .Mode = msoModeAutoDown
&nbsp;&nbsp;&nbsp;.Heading = myWmf
&nbsp;&nbsp;&nbsp; .Text = "Balloon with .wmf in heading"
&nbsp;&nbsp;&nbsp;.Show
End With

</code></pre></FONT>

<A NAME="ADDMODLAB"></A>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Adding and Modifying Labels</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex6"></a>
<P>
There are three types of labels you can add to a balloon: numbered
labels, bulleted labels, and button labels. You can add as many
as five labels to a given balloon, but they must all be of the
same type; you cannot mix numbers, bullets, and buttons in the
same balloon. To indicate which type of labels you want, you set
the <B>BalloonType</B> property of a balloon to one of the following
<B>MsoBalloonType</B> constants: <B>msoBalloonTypeNumbers</B>,
<B>msoBalloonTypeBullets</B>, or <B>msoBalloonTypeButtons</B>.
To return a <B>BalloonLabel</B> object that represents one of
the numbered, bulleted, or button labels, you use <B>Labels</B>(<I>index</I>),
where <I>index</I> is a number from 1 through 5. You
set the <B>Text</B> property of the <B>BalloonLabel</B> object
to specify the label's text.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you try to reference a label greater than 5, an error occurs.
<P>
You can use numbered labels and bulleted labels to present related
information in a meaningful way. That is, rather than creating
a complex string to assign the <B>Text</B> property of a balloon,
you can assign simple strings to the <B>Text</B> property of as
many as five numbers or bullets. The following example displays
a modal balloon with a list of troubleshooting suggestions for
a macro.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp; .Mode = msoBalloonModal
&nbsp;&nbsp;&nbsp; .Button = msoButtonSetOK
&nbsp;&nbsp;&nbsp; .BalloonType = msoBalloonTypeBullets
&nbsp;&nbsp;&nbsp; .Heading = "Tips for locating output"
&nbsp;&nbsp;&nbsp; .Text = "If you cannot locate the output log, consider the following:"
&nbsp;&nbsp;&nbsp; .Labels(1).Text = "Check the current folder name in the Save dialog box."
&nbsp;&nbsp;&nbsp; .Labels(2).Text = "Make sure you type the file name correctly."
&nbsp;&nbsp;&nbsp; .Labels(3).Text = "If you saw the Empty File message, no log was created."
&nbsp;&nbsp;&nbsp;ret = .Show
End With

</code></pre></FONT>

<P>
You use button labels to let the user make choose from a list
of two or more possible actions. Using the return value of the
<B>Show</B> property (in a modal or AutoDown balloon) or the second
argument passed to the callback procedure (in a modeless balloon),
you can determine which button label was clicked and take the
appropriate action. 
<P>
The following example displays a
list of three button labels. The variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">x</FONT>
is set to the return value of the <B>Show</B> method, which will
be 1, 2 or 3, depending on which button the user clicks (there's
no <B>OK</B> button). In the example, a simple message box displays
the value of the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">x</FONT>,
but you can pass the value to another procedure, or you can use
the value in a <B>Select Case</B> statement.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set b = Assistant.NewBalloon
With b
&nbsp;&nbsp;&nbsp; .Mode = msoModeModal
&nbsp;&nbsp;&nbsp; .Button = msoButtonSetNone
&nbsp;&nbsp;&nbsp; .Heading = "Balloon heading"
&nbsp;&nbsp;&nbsp; .Text = "Select one of these things:"
&nbsp;&nbsp;&nbsp; .Labels(1).Text = "Choice One"
&nbsp;&nbsp;&nbsp; .Labels(2).Text = "Choice Two"
&nbsp;&nbsp;&nbsp; .Labels(3).Text = "Choice Three"
&nbsp;&nbsp;&nbsp; x = .Show
End With
MsgBox x

</code></pre></FONT>


The following example prompts the user to select either a network
printer or a local printer before a document is printed. The user
can work in the application (because the balloon is a modeless
balloon) but is reminded that printing cannot occur until a printer
is selected. The ProcessPrinter procedure would determine which
button label was clicked, run the appropriate statements, and
then close the balloon.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp; .Mode = msoModeModeless
&nbsp;&nbsp;&nbsp; .Button = msoButtonSetNone
&nbsp;&nbsp;&nbsp; .Heading = "Select A Printer"
&nbsp;&nbsp;&nbsp; .Text = "You must select a printer before printing."
&nbsp;&nbsp;&nbsp; .Icon = msoIconAlert
&nbsp;&nbsp;&nbsp; .Labels(1).Text = "Local printer"
&nbsp;&nbsp;&nbsp; .Labels(2).Text = "Network printer"
&nbsp;&nbsp;&nbsp; .Callback = "ProcessPrinter"
&nbsp;&nbsp;&nbsp; ret = .Show
End With

</code></pre></FONT>

<P>
For more information about the <B>Callback</B> property of a modeless
balloon, see "<A HREF="#CH009H204">Using Callback Procedures</A>" later in this
section.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Adding and Modifying Check Boxes</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex7"></a>
<P>
You use check boxes to let the user select one or more items in
a list. By default, each balloon contains five check boxes when
it's created; however, you must set the <B>Text</B> property for
each check box you want to be visible. To return a <B>BalloonCheckbox</B>
object that represents one of the check boxes, you use <B>Checkboxes</B>(<I>index</I>),
where <I>index</I> is a number from 1 through 5. 
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you try to reference a check box by using a number greater than
5, an error occurs.
<P>
If you display a balloon that contains check boxes, the user can
select one or more of the check boxes before clicking a button.
You can then use the value of each check box (indicated by the
<B>Checked</B> property) to control subsequent statements or branching
structures in your code. The following example displays a balloon
in which the user can select one, two, or three check boxes, or
none. A second balloon confirms which check boxes were selected.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set a = Assistant.NewBalloon
Set b = Assistant.NewBalloon
With a
&nbsp;&nbsp;&nbsp; .Mode = msoModeModal
&nbsp;&nbsp;&nbsp; .Button = msoButtonSetOkCancel
&nbsp;&nbsp;&nbsp; .Heading = "Print Regional Sales Data"
&nbsp;&nbsp;&nbsp; .Text = "Select the region(s) you want to print."
&nbsp;&nbsp;&nbsp; For i = 1 To 3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .CheckBoxes(i).Text = "Region " &amp; i
&nbsp;&nbsp;&nbsp; Next
End With
retA = a.Show
If retA = msoBalloonButtonOK Then
&nbsp;&nbsp;&nbsp; s = ""
&nbsp;&nbsp;&nbsp; For i = 1 To 3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If a.CheckBoxes(i).Checked = True Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If s = "" Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = CStr(i)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = s &amp; ", " &amp; CStr(i)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp; Next
&nbsp;&nbsp;&nbsp; With b
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Mode = msoModeModal
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Heading = "Print Regional Sales Data"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If s &lt;&gt; "" Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Button = msoButtonSetYesNo
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Text = "Please confirm that you want to print " &amp; _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "data for the following region(s): " &amp; s
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Button = msoButtonSetOK
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Text = "You did not select any regions to print."
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; retB = .Show
&nbsp;&nbsp;&nbsp; End With
End If

</code></pre></FONT>



<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH009H204">Using Callback Procedures</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex8"></a>
<P>
If you create a modeless balloon, you must assign to the <B>Callback</B>
property the name of a callback procedure. A callback procedure
must be written to receive three arguments: the first argument
is a <B>Balloon</B> object that represents the balloon that called
the procedure; the second argument is a number that indicates
the index number or constant of the button label or button that
was clicked; and the third argument is a number that's used by
wizards to control the Assistant (unless you're developing a custom
wizard, you can ignore the third argument). The following example
shows a valid declaration for a callback procedure. Note that
you can use any argument names you prefer in your declarations.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MyCallback(bln As Balloon, btn As Long, priv As Long)

</code></pre></FONT>


<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>You
must assign the <B>Callback</B> property a string that indicates the
correct scope of the callback procedure in relation to the code
you're writing, just as if you were writing a statement to call
the procedure directly. For example, if you're writing code in
a module and the callback procedure is in a Microsoft Excel worksheet
(Sheet1) in the same project, you would set the <B>Callback</B> property
to "Sheet1.MyCallback."
<P>
The following example displays a balloon that contains the names
of three printers. The callback procedure runs the appropriate
printer&#173;specific code and then closes the balloon.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub TestCallback()
Set bln = Assistant.NewBalloon
With bln
&nbsp;&nbsp;&nbsp;.Mode = msoModeModeless
&nbsp;&nbsp;&nbsp;.Callback = "ProcessPrinter"
&nbsp;&nbsp;&nbsp;.Button = msoButtonSetNone
&nbsp;&nbsp;&nbsp;.BalloonType = msoBalloonTypeButtons
&nbsp;&nbsp;&nbsp;.Heading = "Select a Printer"
&nbsp;&nbsp;&nbsp;.Labels(1).Text = "Network Printer"
&nbsp;&nbsp;&nbsp;.Labels(2).Text = "Local Printer"
&nbsp;&nbsp;&nbsp;.Labels(3).Text = "Local Color Printer"
&nbsp;&nbsp;&nbsp;.Show
End With
End Sub

Sub
ProcessPrinter(bln As Balloon, ibtn As Long, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iPriv As Long)
&nbsp;&nbsp;&nbsp; Assistant.Animation = msoAnimationPrinting
&nbsp;&nbsp;&nbsp;Select Case ibtn
&nbsp;&nbsp;&nbsp; Case 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Insert printer-specific code
&nbsp;&nbsp;&nbsp;Case 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Insert printer-specific code
&nbsp;&nbsp;&nbsp;Case 3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Insert printer-specific code
&nbsp;&nbsp;&nbsp;End Select
&nbsp;&nbsp;&nbsp; bln.Close
End Sub

</code></pre></FONT>

<P>


</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>
</FONT>
</FONT></BODY>



</HTML>

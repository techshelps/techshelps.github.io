<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 1: Programming Basics</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 1</B></FONT></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Programming Basics</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
</TABLE>
</TR>
<HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<LI><A HREF="#CH001H101">Writing, Editing, and Running Code in the Visual Basic Editor</A>
<BR>
<LI><A HREF="#CH001H102">Variables, Constants, and Data Types</A>
<BR>
<LI><A HREF="#CH001H103">Control Structures</A> 
</UL>

<P>
<A NAME="CH001H101">This chapter introduces you to the fundamentals
of the Visual Basic for Applications programming language: how
to get to the Visual Basic programming environment and how to
write, edit, store, and run code in that environment. This chapter
also briefly discusses the control structures, data types, and
built&#173;in constants available to Visual Basic programmers.</A>
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
information in this chapter applies to the integrated development
environment of Visual Basic for Applications in Microsoft Excel&nbsp;97,
Word&nbsp;97, and PowerPoint&nbsp;97. For information about writing
Visual Basic code in Microsoft Access&nbsp;97, see Building Applications
with Microsoft Access&nbsp;97, available in Microsoft Access&nbsp;97
and Microsoft Office&nbsp;97, Developer Edition. An online version
of Building Applications with Microsoft Access&nbsp;97 is available
in the Value Pack on CD&#173;ROM in Microsoft Access&nbsp;97 and
Microsoft Office&nbsp;97, Professional Edition. For information
about writing VBScript code in Microsoft Outlook&nbsp;97, see
Chapter&nbsp;5, "<a href="005.htm">Microsoft Outlook Objects</A>," and <I>Building Microsoft Outlook&nbsp;97 Applications</I> by Peter Krebs, available
from Microsoft Press (ISBN 1-57231-5736-9).
<P>
<A NAME="PG001C1"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="PG001C1">Writing, Editing, and Running Code in the Visual Basic Editor</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
Microsoft Excel&nbsp;97, Word&nbsp;97, and PowerPoint&nbsp;97
come equipped with a full&#173;featured development environment
called the Visual Basic Editor. Using the Visual Basic Editor,
you can create, edit, debug, and run code associated with Microsoft
Office documents. To open the Visual Basic Editor, click the <B>Visual
Basic Editor</B> button on the <B>Visual Basic</B> toolbar. 
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H201">A First Look at the Visual Basic Editor</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex1"></a>
<P>
If you're used to writing, editing, and debugging code in a macro&#173;editing
window within the Word application window, on an XLM macro sheet,
or on a module in a Microsoft Excel workbook, the Visual Basic
Editor may seem complex to you the first time you open it, with
many windows and buttons you aren't familiar with. This section
explains some of these features of the Visual Basic Editor.
<P>
<IMG SRC="00101.gif">
<P>
For information about a particular window in the Visual Basic
Editor, click in the window and then press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT>
to open the appropriate Help topic. To see the Help topic for
any other element of the Visual Basic Editor, such as a particular
toolbar button, search Help for the name of the element. 
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Properties Window</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
A property is a characteristic of an object, such as the object's
color or caption. You set a property to specify a characteristic
or behavior of an object. For example, you can set the <B>ShowSpellingErrors</B>
property of a Word document to <B>True</B> to show spelling errors
in the document. 
<P>
You can use the <B>Properties</B> window to set the properties
of an object at design time. The <B>Properties</B> window is very
useful when you're working with custom dialog boxes and ActiveX
controls. For more information about using the <B>Properties</B>
window to set properties of dialog boxes and controls, see Chapter&nbsp;12,
"<a href="012.htm">ActiveX Controls and Dialog Boxes</A>." For most objects,
however, it's easier to set these properties at design time by
using familiar commands in the user interface. For example, you
can set the <B>ShowSpellingErrors</B> property of a Word document
to <B>True</B> by selecting the <B>Hide spelling errors in this
document</B> check box on the <B>Spelling &amp; Grammar</B>
tab in the <B>Options</B> dialog box (<B>Tools</B> menu). 
<P>
If you don't think you'll be using the <B>Properties</B> window
right now, you can close it to simplify your work space a little.
You can open it again at any time by clicking <B>Properties Window</B>
on the <B>View</B> menu.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Project Explorer</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex2"></a>
<P>
All the code associated with a workbook, document, template, or
presentation is stored in a <I>project</I> that's
automatically stored and saved with the workbook, document, template,
or presentation. In the <B>Project Explorer</B> of the Visual
Basic Editor, you can view, modify, and navigate the projects
for every open or referenced workbook, document, template, or
presentation. You can resize the <B>Project Explorer</B> and either
dock it to or undock it from any of the sides of the Visual Basic
Editor window to make it easier to use. 
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>In
Word, because the Normal template is available from every Word
document, there's always a project for Normal in the <B>Project Explorer</B>.
<P>
Within a project, there can be application objects that have events
associated with them, custom dialog boxes (called <I>forms</I>
in the <B>Project Explorer</B>), standard modules, class modules,
and references.
<P>
<IMG SRC="00102.gif">
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Folders
in the <B>Project Explorer</B> divide project elements into categories.
If you don't see any folders, click the <B>Toggle Folders</B>
button at the top of the <B>Project Explorer</B>.</FONT>
<P>
In the <B>Project Explorer</B>, there's one project for each open
or referenced workbook, document, template, or presentation. In
each project, you may find objects (such as <B>Document</B> objects,
<B>Workbook</B> objects, and <B>Worksheet</B> objects) that recognize
events; forms (also called <I>UserForms</I>), which
are custom dialog box interfaces and the code that controls how
the user interacts with a particular dialog box; standard modules,
which contain code that isn't associated with a particular object
or form; class modules, which contain information about a custom
object type; and references to other projects. To see the code
in a module or the code associated with an object or form, click
the element in the <B>Project Explorer</B>, and then click the
<B>View Code</B> button at the top of the <B>Project Explorer</B>.
To see the user interface for a particular object or form, click
the object or form in the <B>Project Explorer</B>, and then click
the <B>View Object</B> button at the top of the <B>Project Explorer</B>.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Code Window</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
To view the code in a project, go to the <B>Project Explorer</B>,
click the element that contains the code, and then click the <B>View
Code</B> button at the top of the <B>Project Explorer</B>. 
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">If
you want to be able to see more than one procedure in the code
window at a time, select the <B>Default to Full Module View</B>
check box on the <B>Editor</B> tab in the <B>Options</B> dialog
box (<B>Tools</B> menu). To view just one procedure at a time,
clear this check box.</FONT>
<P>
You can navigate the <B>Code</B> window by using the items listed
in the <B>Object</B> and <B>Procedure</B> boxes at the top of
the window. In the <B>Object</B> box, click <B>(General)</B>,
and then click a procedure name in the <B>Procedure</B> box to
see a procedure that isn't associated with a specific event. In
the <B>Object</B> box, click an object, and then click an event
in the <B>Procedure</B> box to see the code that runs when a specific
event occurs.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Making Room in the Visual Basic Editor</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
If all you want to do is write a simple procedure or edit a macro
you've recorded, you may want to forego some of the advanced features
of the Visual Basic Editor in the interest of a simpler workspace.
Here are a few ways you can simplify your coding environment:
<P>

<UL>
<P>
<LI>Close the <B>Properties</B>
window. If you aren't working with custom dialog boxes or ActiveX
controls, the <B>Properties</B> window probably won't be of much
use to you. To reopen <B>Properties</B> window, just click <B>Properties
Window</B> on the <B>View</B> menu.
<P>
<LI>Hide any
toolbars you aren't currently using. To redisplay the <B>Debug</B>,
<B>Edit</B>, <B>Standard</B>, or <B>UserForm</B> toolbar, right&#173;click
the Visual Basic Editor menu bar, and then click the name of the
toolbar you want to display.
<P>
<LI>If you're only
working with code in a standard module and you don't need to navigate
to other code in the project or to code in other projects, consider
closing the <B>Project Explorer</B>. To reopen the <B>Project
Explorer</B>, just click <B>Project Explorer</B> on the <B>View</B>
menu.
</UL>
<P>
<A NAME="CH001H202"></A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Recording a Macro</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex3"></a>
<P>
You can use the macro recorder to translate user&#173;interface
actions into Visual Basic code. Recording a simple macro can give
you a jump start on creating a more complex macro, and can help
you become familiar with the objects, properties, and methods
of an application.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
record a macro</FONT></B>
<P>

<OL>
<P>
<LI>To display the <B>Visual
Basic</B> toolbar, point to <B>Toolbars</B> on the <B>View</B>
menu in your application window (not in the Visual Basic Editor),
and then click <B>Visual Basic</B> if it isn't already selected.
<P>
<LI>On
the <B>Visual Basic</B> toolbar, click the <B>Record Macro</B>
button.
<P>
<LI>In the <B>Record Macro</B> dialog box,
replace the default macro name in the <B>Macro name</B> box if
you want, and click <B>OK</B>. 
<P>
You can use the Store macro in box to choose where
your macro will be stored. For now, click This Workbook in Microsoft
Excel, All Documents (Normal.dot) in Word, or the name of the
active presentation in PowerPoint.
<P>
<LI>Perform the
actions for which you want to generate Visual Basic code.
<P>
<LI>On
the <B>Stop Recording</B> toolbar, click the <B>Stop Recording</B>
button.
<P>
</OL>

<P>
Your macro has been recorded. To look at the macro code, point
to <B>Macro</B> on the <B>Tools</B> menu, and then click <B>Macros</B>.
In the <B>Macros</B> dialog box, select the appropriate macro
name, and then click <B>Edit</B>. 
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H203">Getting Around in Your Projects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex4"></a>
<P>
You use the <B>Project Explorer</B> to navigate to any procedure
in any open project. Start by finding the object that contains
your macro. Most general procedures, including recorded macros,
are stored in a standard module. If you have folders displayed
in the <B>Project Explorer</B>, standard modules are located in
the Modules folder.
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">If
you don't see folders in the <B>Project Explorer</B>, click the
<B>Toggle Folders</B> button to display them.</FONT>
<P>
After you locate the object that contains your code, double&#173;click
the object to view the procedures it contains. You can use this
method to get to either procedures you've written from scratch
or macros you've recorded.
<P>
Where a recorded macro is stored depends on what location you
specified in the <B>Store macro in</B> box in the <B>Record Macro</B>
dialog box when you recorded your macro. In Microsoft Excel, if
you clicked <B>This Workbook</B> in the <B>Store macro in</B>
box when you recorded your macro, your macro will be stored in
Module1 in the Modules folder of the project for the workbook
you recorded the macro in. In Word, if you clicked <B>All documents
(Normal.dot)</B> in the <B>Store macro in box</B> when you recorded
your macro, your macro will be stored in the NewMacros module
in the Modules folder of the Normal project. In PowerPoint, if
you clicked the name of the active presentation in the <B>Store
macro in</B> box when you recorded your macro, your macro will
be stored in Module1 in the Modules folder of the project for
the presentation you recorded the macro in. 
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">If
you want to be able to see more than one procedure in the code
window at a time, make sure that the <B>Default to Full Module
View</B> check box is selected on the <B>Editor</B> tab in the
<B>Options</B> dialog box (<B>Tools</B> menu). Otherwise, you
have to use the <B>Procedure</B> box in the code window to move
from one procedure to another.</FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H204">Writing a New Procedure</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex5"></a>
<P>
If you want to write code that isn't associated with a specific
object or event, you can create a <I>procedure</I>
in a standard module in the Visual Basic Editor. A procedure is
a unit of code enclosed either between the <B>Sub</B> and <B>End
Sub</B> statements or between the <B>Function</B> and <B>End Function</B>
statements. 
<P>
To create a blank standard module, go to the <B>Project Explorer</B>,
click anywhere in the project you want to add the module to, and
then click <B>Module</B> on the <B>Insert</B> menu.
<P>
To open an existing standard module, select the module in the
<B>Project Explorer</B>, and then click the <B>View Code</B> button
in the <B>Project Explorer</B>. 
<P>
To add a procedure to a module, select the module in the <B>Project
Explorer</B>, click <B>Procedure</B> on the <B>Insert</B> menu,
select whatever options you want in the <B>Add Procedure</B> dialog
box, and then click <B>OK</B>. For more information about the
options in the dialog box, press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT> while
the dialog box is displayed. For example, in the dialog box, type
<B>Test1</B> in the <B>Name</B> box, click <B>Sub</B> under <B>Type</B>,
click <B>Public</B> under <B>Scope</B>, and then click <B>OK</B>.
The procedure that appears in your module should look like the
following example.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public Sub Test1()

End Sub

</code></pre></FONT>


<P>
After you've added a procedure to a module, you can add code to
the procedure. The following example adds to the preceding code
a line that displays a message box.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public Sub Test1()
&nbsp;&nbsp;&nbsp; MsgBox "This is the Test1 procedure running"
End Sub

</code></pre></FONT>



<P>
If you want to write code that runs automatically when a certain
event occurs&nbsp;&#151; for instance, when a document is
opened, a worksheet is calculated, or a button in a custom dialog
box is clicked&nbsp;&#151; you should write a procedure associated
with the event for the object or form. For general information
about writing event procedures, see "<A HREF="#CH001H211">Writing Code to Respond to Events</A>" later in this chapter. For specific information
about writing event procedures for custom dialog boxes and ActiveX
controls, see Chapter&nbsp;12, "<a href="012.htm">ActiveX Controls and Dialog Boxes</A>." 
<BR>

<P>
<TABLE WIDTH=80% CELLPADDING=15 BORDER=1 CELLSPACING=0 BORDERCOLOR=#0000FF><TR BGCOLOR=#FFFFFF><TD>

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<P>
<A NAME="WHATDIF"><B>What's the Difference Between a Macro and a Procedure?</B></A>
<P>
Although the terms <I>macro</I> and <I>procedure</I>
are sometimes used interchangeably, they actually have distinct
meanings. Procedure is the broader term; it applies to any unit
of code enclosed either between the <B>Sub</B> and <B>End Sub</B>
statements or between the <B>Function</B> and <B>End Function</B>
statements. Macro is a specific term that applies only to public
<B>Sub</B> procedures that take no arguments. All macros are procedures,
but not all procedures are macros. All procedures you generate
with the macro recorder and all procedures you can run from the
<B>Macros</B> dialog box in the Office application are macros.

<P>
</FONT>
</FONT></TD></TR>
</TABLE>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H205">Sub Procedures vs. Function Procedures</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex6"></a>
<P>
With Visual Basic, you can create two types of procedures: <B>Sub</B>
procedures and <B>Function</B> procedures.
<P>
A <B>Sub</B> procedure is a unit of code enclosed between the
<B>Sub</B> and <B>End Sub</B> statements that performs a task
but doesn't return a value. The following example is a <B>Sub</B>
procedure.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub DisplayWelcome()
&nbsp;&nbsp;&nbsp; MsgBox "Welcome"
End Sub

</code></pre></FONT>



<P>
A <B>Function</B> procedure is a unit of code enclosed between
the <B>Function</B> and <B>End Function</B> statements. Like a
<B>Sub</B> procedure, a <B>Function</B> procedure performs a specific
task. Unlike a <B>Sub</B> procedure, however, a <B>Function</B>
procedure also returns a value. The following example is a <B>Function</B>
procedure.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function AddThree(OriginalValue As Long)
&nbsp;&nbsp;&nbsp; AddThree = OriginalValue + 3
End Function

</code></pre></FONT>


<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H206">Public Procedures vs. Private Procedures</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex7"></a>
<P>
You can call a public procedure, declared with the <B>Public</B>
keyword, from any procedure in any module in your application.
You can call a private procedure, declared with the <B>Private</B>
keyword, only from other procedures in the same module. Both <B>Sub</B>
procedures and <B>Function</B> procedures can be either public
or private. The following are examples of private procedures.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Test1()
&nbsp;&nbsp;&nbsp; MsgBox "This is the Test1 procedure running"
End Sub

Private Function AddThree(OriginalValue As Long)
&nbsp;&nbsp;&nbsp; AddThree = OriginalValue + 3
End Function

</code></pre></FONT>


<P>
The following are examples of public procedures.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public Sub Test1()
&nbsp;&nbsp;&nbsp; MsgBox "This is the Test1 procedure running"
End Sub

Public Function AddThree(OriginalValue As Long)
&nbsp;&nbsp;&nbsp; AddThree = OriginalValue + 3
End Function

</code></pre></FONT>


<P>
If you don't use either the <B>Public</B> or <B>Private</B> keyword
to declare a procedure, the procedure will be public by default.
Therefore, the following are also examples of public procedures.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub Test1()
&nbsp;&nbsp;&nbsp; MsgBox "This is the Test1 procedure running"
End Sub

Function AddThree(OriginalValue As Long)
&nbsp;&nbsp;&nbsp; AddThree = OriginalValue + 3
End Function

</code></pre></FONT>


<P>
Although it's not necessary to use the <B>Public</B> keyword when
creating a public procedure, including it in procedure declarations
makes it easier to see at a glance which procedures are public
and which are private. For more information, see "Public"
or "Private" in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H207">Using the Value Returned from a Function</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex8"></a>
<P>
For a function to return a value, it must include a function assignment
statement that assigns a value to the name of the function. In
the following example, the value assigned to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">ConeSurface</FONT>
will be the value returned by the function.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function ConeSurface(radius, height)
&nbsp;&nbsp;&nbsp; Const Pi = 3.14159
&nbsp;&nbsp;&nbsp; coneBase = Pi * radius ^ 2
&nbsp;&nbsp;&nbsp; coneCirc = 2 * Pi * radius
&nbsp;&nbsp;&nbsp; coneSide = Sqr(radius ^ 2 + height ^ 2) * coneCirc / 2
&nbsp;&nbsp;&nbsp; ConeSurface = coneBase + coneSide
End Function

</code></pre></FONT>


<P>
The information that must be supplied to a <B>Sub</B> procedure
or <B>Function</B> procedure for it to perform its task (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">radius</FONT>
and <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">height</FONT>
in the preceding example) is passed in the form of arguments.
For more information about arguments, see "<A HREF="#CH001H209">Passing Arguments to a Procedure</A>" later in this chapter.
<P>
When the <B>Function</B> procedure returns a value, this value
can then become part of a larger expression. For example, the
following statement in another procedure incorporates the return
value of the ConeSurface and ScoopSurface functions in its calculations.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>totalSurface = ConeSurface(3, 11) + 2 * ScoopSurface(3)


</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H208">Running a Sub Procedure</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex9"></a>
<P>
You can have a <B>Sub</B> procedure run in response to a specific
event, you can run it from the Visual Basic Editor or your application
window, or you can call it from another procedure. 
<P>

<UL>
<P>
<LI>If you want a <B>Sub</B>
procedure to run automatically every time a specific event occurs,
you should add the code to the event procedure for the event.
For more information, see "<A HREF="#CH001H211">Writing Code to Respond to Events</A>"
later in this chapter.
<P>
<LI>To run a <B>Sub</B> procedure
from the Visual Basic Editor, position the insertion point anywhere
in the procedure, and then either press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT>
or click the <B>Run Sub/UserForm</B> button on the <B>Standard</B>
or <B>Debug</B> toolbar.
<P>
<LI>To run a <B>Sub</B>
procedure that's a macro (see "<A HREF="#WHATDIF">What's the Difference Between
a Macro and a Procedure</A>?" earlier in this chapter), select
the macro name in the <B>Macros</B> dialog box in the application,
and then click <B>Run</B>.
<P>
<LI>To call a <B>Sub</B>
procedure from another procedure, name it in your code, just as
you do with built&#173;in keywords. The procedure in the following
example calls the DisplayWelcome procedure.
<P>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub TestCall()
&nbsp;&nbsp;&nbsp;DisplayWelcome
End Sub

</code></pre></FONT>

<P>
</UL>

<P>
You cannot call a procedure you've declared as private from any
procedure outside the module in which the private procedure resides.
However, you can call a public procedure from outside the module
in which it resides. For an explanation of the terms "public"
and "private" in this context, see "<A HREF="#CH001H205">Sub Procedures
vs. Function Procedures</A>" earlier in this chapter.
<P>
When you call a public procedure that isn't located in the current
module, Visual Basic searches other modules and runs the first
public procedure it finds that has the name you called. If the
name of a public procedure isn't unique, you can specify the module
it's located in when you call the procedure. The following example
runs a <B>Sub</B> procedure named "DisplayWelcome" that's
stored in a module named "TestTools."


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>TestTools.DisplayWelcome


</code></pre></FONT>

<P>
If necessary, you can also specify the project that the procedure
resides in. The following example runs a <B>Sub</B> procedure
named "DisplayWelcome" that's stored in a module named
"TestTools" in a project named "TestDocument."


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>TestDocument.TestTools.DisplayWelcome


</code></pre></FONT>

<P>
Note that the name of the project you specify is the project's
code name, not the name of the document the project is associated
with. You can check and modify the project's code name in the
space to the right of <B>(Name)</B> in the <B>Properties</B> window
for the project. To see the <B>Properties</B> window, select the
project in the <B>Project Explorer</B>, and then click <B>Properties
Window</B> on the <B>View</B> menu. You can also change the code
name of a project by typing a new name in the <B>Project Name</B>
box on the <B>General</B> tab in the <B>Project Properties</B>
dialog box. You display this dialog box by right&#173;clicking
the project in the <B>Project Explorer</B>, and then clicking
<B>Properties</B> on the shortcut menu (the command appears on
the shortcut menu preceded by the current name of the project).
For more information about the options in the <B>Project Properties</B>
dialog box, click a tab and press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT>.
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">If
you want to be able to call a procedure from other modules in
the same project but not from other projects, declare the procedure
as public, but make the module private to the project by adding
the <B>Option Private Module</B> statement to the <B>(Declarations)</B>
section of the module.</FONT>
<P>
If you want to be able to call procedures in one project from
another project, there must be a reference from the project containing
the calling code to the project containing the called code. To
create a reference to a project, use the <B>References</B> dialog
box (<B>Tools</B> menu).
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>If
you get an error when you try to create a reference from one project
to another one, make sure that the project you're trying to reference
doesn't have the same code name as the other project. (Multiple
projects in an application may be given the same default code
name, such as "Project" in Word or "VBAProject"
in Microsoft Excel.) To check a project's code name, click the
project name in the Project Explorer, and then click and then
click Properties Window on the View menu. The text to the right
of (Name) in the Properties window is the project's code name.
To change the code name for a project, select the current code
name and then type a new one. Keep in mind that you cannot have
circular references&nbsp;&#151; that is, if you have a reference
to project A from project B, you cannot have a reference from
project B to project A.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H209">Passing Arguments to a Procedure</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex10"></a>
<P>
If your procedure needs information to perform its task that it
cannot get from the context in which it's being run, you can pass
that information to the procedure in the form of arguments. To
indicate that a given procedure takes arguments, include an argument
list between the parentheses that follow the procedure name in
the procedure declaration. The argument list can contain multiple
argument declarations, separated by commas. 
<P>
When you declare an argument, you can specify the data type of
the argument by using the <B>As</B> keyword (whether or not the
procedure can change the argument's value by using the <B>ByVal</B>
and <B>ByRef</B> keywords), and you can specify whether the argument
is required or optional by using the <B>Optional</B> keyword.
For more information about a specific keyword, see the appropriate
topic in Help. For more information about the available data types
in Visual Basic, see "<A HREF="#CH001H216">Visual Basic Data Types</A>" later
in this chapter.
<P>
The following example shows the declaration line of a <B>Sub</B>
procedure that takes three arguments.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub UpdateRecord(ByVal custId As Long, ByRef custName As String, _
&nbsp;&nbsp;&nbsp; Optional custRepeat As Boolean)

</code></pre></FONT>




The first argument, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">custID</FONT>, is a required argument that will be passed as a value of type <B>Long</B> and will be passed <I>by value</I>. 
If you pass an argument by value when calling a procedure, the called procedure receives only a copy of the variable passed from the calling procedure. If the called procedure changes the value, the change affects only the copy and not the variable in the calling procedure. 


<P>
The second argument, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">custName</FONT>,
is a required argument that will be passed as a value of type
<B>String</B> and will be passed <I>by reference</I>.
If you pass an argument by reference when calling a procedure,
the procedure has access to the actual variable in memory. As
a result, the variable's value can be changed by the procedure.

<P>
The third argument, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">custRepeat</FONT>,
is an optional argument that will be passed as a value of type
<B>Boolean</B> and will be passed <I>by reference</I>
(passing by reference is the default). 
<P>
The following example calls UpdateRecord.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim newId As Long
Dim newName As String
Dim newRepeat As Boolean

newId = 3452
newName = "Mary Boyd"
newRepeat = True
UpdateRecord newId, newName, newRepeat

</code></pre></FONT>


<P>
Note that the name of the variable you pass from the calling procedure
doesn't have to match the name of the argument declared in the
called procedure.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H210">Using Named Arguments</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
If either a procedure you create or a built&#173;in function,
statement, or method takes more than one optional argument, you
may want to pass arguments to it by name rather than by position.

<P>
For example, the <B>Open</B> method of the Microsoft Excel <B>Workbooks</B>
object, which opens a workbook, takes 13 arguments. If you want
to write code that opens the workbook Book2.xls and adds it to
the list of recently used files, you could write the code shown
in the following example.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks.Open "book2.xls", , , , , , , , , , , , True


</code></pre></FONT>

<P>
However, this code is difficult to write correctly without introducing
bugs, because you have to count the number of commas to insert
between the arguments. The code is also very difficult to read,
and it gives no clues about what the arguments represent. The
following example shows a better way to write this code.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks.Open FileName:="book2.xls", AddToMru:=True


</code></pre></FONT>

<P>
Because every argument has a name, you can use the name and the
<B>:=</B> operator to assign a value to an argument. When you
use named arguments, you don't have to remember the order of the
arguments. For instance, the preceding code could have been written
with the order of the arguments reversed, as in the following
example.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Workbooks.Open AddToMru:=True, FileName:="book2.xls"


</code></pre></FONT>

<P>
You can also use named arguments with the procedures you create.
Visual Basic automatically associates argument names with their
corresponding procedures. For instance, assume that you've created
a FormatList procedure that takes two required arguments and two
optional arguments, as shown in the following declaration.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub FormatList(startRow As Integer, startCol As Integer, _
&#09;Optional redText, Optional sortList)

</code></pre></FONT>


<P>
The DoList procedure in the following example uses named arguments
to call the FormatList procedure.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub DoList()
&#09;FormatList redText:=True, startCol:=2, startRow:=2
End Sub

</code></pre></FONT>


<P>
The arguments are now out of order, and one of the optional arguments
was omitted. 
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;Using
named arguments doesn't negate the need to enter required arguments.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H211">Writing Code to Respond to Events</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex11"></a>
<P>
Certain objects in the Office&nbsp;97 applications recognize a
predefined set of events, which can be triggered either by the
system or by the user. Examples of events recognized by objects
in Office include the Open and Close events for Word documents;
the Open, BeforePrint, BeforeSave, and BeforeClose events for
Microsoft Excel workbooks; the Calculate and SelectionChange events
for Microsoft Excel worksheets; the Click, Initialize, and Terminate
events for custom dialog boxes; and the Click, GotFocus, and LostFocus
events for ActiveX controls. For detailed information about the
events available in Microsoft Excel and Word, see Chapter&nbsp;7,
"<a href="007.htm">Microsoft Word Objects</A>," and Chapter&nbsp;4, "<a href="004.htm">Microsoft
Excel Objects</A>." For detailed information about using custom
dialog boxes and ActiveX controls, see Chapter&nbsp;12, "<a href="012.htm">ActiveX
Controls and Dialog Boxes</A>."
<P>
You can control how your application responds to a recognized
event by writing code in the <B>Code</B> window for the object.
Every time an event occurs, the code, or <I>event procedure</I>,
associated with that event runs. For instance, if you write a
procedure that's associated with the Open event for a Word document,
every time that document is opened, the procedure automatically
runs. 
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Where Event Code Is Stored</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
An event procedure is stored in the document, workbook, worksheet,
slide, or UserForm where the event can be triggered. For example,
the procedure that runs when you calculate the worksheet named
"Last Quarter" in the workbook named "Sales"
would be stored in the Last Quarter worksheet in the project associated
with the Sales workbook. To view the code in a document, workbook,
worksheet, slide, or UserForm, click the object in the <B>Project
Explorer</B>, and then click the <B>View Code</B> button to open
the <B>Code</B> window.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;PowerPoint
presentations and slides don't recognize events. Therefore, unless
you can place ActiveX controls (which recognize events) on a PowerPoint
slide, there can be no event procedures associated with the slide,
and you won't see the slide in the Project Explorer. For more
information about adding ActiveX controls to documents, see Chapter&nbsp;12,
"<a href="012.htm">ActiveX Controls and Dialog Boxes</A>." 
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>How Event Procedures Are Named</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The name of an event procedure is the name of the object that
recognizes the event&nbsp;&#151; such as "Document,"
"Worksheet," "UserForm," or "CommandButton1"&nbsp;&#151;
followed by an underscore (_), followed by the name of the event
that the procedure runs in response to &#151; such as "Open,"
"Calculate," or "Click." For example, the
procedure that runs when you open a Word document is Document_Open.

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Whereas
the name of an event procedure for most objects is linked to the
class name (such as Document, Worksheet, or UserForm), the name
of an event procedure for an ActiveX control is linked to the
control's code name&nbsp;&#151; either the default name or
a name you assign. If you change the code name of a control after
writing event procedures, you must rename your procedures to match;
otherwise, they will never run in response to the events for that
control.
<P>
To view an event procedure, open the <B>Code</B> window for the
document, workbook, worksheet, slide, or UserForm where the event
can be triggered; select the name of the object that recognizes
the event (this can be either the object where the event can be
triggered itself or an ActiveX control contained in the object)
in the <B>Object</B> box; and then select the name of the specific
event you want to respond to in the <B>Procedure</B> box. 
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you want a procedure to be associated with a specific document,
workbook, worksheet, slide, or custom dialog box, but not with
a specific event&nbsp;&#151; for instance, if you want to
be able to call the procedure from several different event procedures&nbsp;&#151;
store it in the (General) section of the document, workbook, worksheet,
or slide module.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H212">Timesaving Tools for Writing Code</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex12"></a>
<P>
Many keywords used in Visual Basic are extremely long and difficult
to type without making mistakes. To reduce the time you spend
typing and the number of typing errors in your code, Visual Basic
includes tools that complete words and build expressions for you.

<P>
When you've typed enough letters for Visual Basic to recognize
a word, press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">CTRL+SPACE </FONT>or click the <B>Complete
Word</B> button on the <B>Edit</B> toolbar to have Visual Basic
automatically complete the word for you.
<P>
In the <B>Options</B> dialog box (<B>Tools</B> menu), you can
turn on tools that automatically do the following after you enter
a line of code: verify correct syntax, display information, and
give you appropriate options to choose from at each stage of building
your expression. 
<P>
You can also use the <B>List Properties/Methods</B>, <B>List Constants</B>,
<B>Quick Info</B>, <B>Parameter Info</B>, and <B>Complete Word</B>
buttons on the <B>Edit</B> toolbar to get help completing a word
or an expression at any time. For more information about using
a specific tool to help you complete words and statements, see
the Help topic for that button or option. For information about
using these tools to build statements using Office properties
and methods, see Chapter&nbsp;2, "<a href="002.htm">Understanding Object Models</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H213">Writing Code That's Easy to Read and Navigate</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex13"></a>
<P>
There are many ways to make your Visual Basic code more readable,
as described in the following paragraphs.
<P>
Add comments to your code by using an apostrophe (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">'</FONT>).
At run time, Visual Basic ignores everything between the apostrophe
and the end of the line. Each line in the following example includes
a comment.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>'This procedure calculates the burdened cost
'of the specified employee
Dim baseSalary As Currency&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'salary not including benefits or bonuses
baseSalary = employeeLevel * 2500&nbsp;&nbsp;&nbsp;'employeeLevel passed as argument

</code></pre></FONT>


<P>
To add the comment character to the beginning of each line in
a selected block of code, click the <B>Comment Block</B> button
on the <B>Edit</B> toolbar. To remove the comment character from
the beginning of each line in a selected block of code, click
the <B>Uncomment Block</B> button. 
<P>
Break a long statement into multiple lines in the Code window
by using the <I>line&#173;continuation character</I>,
which is a space followed by an underscore (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
_</FONT>). The following example shows the same statement
expressed two different ways: on a single line, and continued
over two lines:


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myField = ActiveDocument.Fields.Add(Range:=Selection.Range, Type:=wdFieldDate)

Set myField = ActiveDocument.Fields.Add(Range:=Selection.Range, _
&nbsp;&nbsp;&nbsp; Type:=wdFieldDate)

</code></pre></FONT>


<P>
Note that you cannot use the line&#173;continuation character
in the middle of a literal string. If you have to break the line
within a literal string, break the string with the concatenation
character (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">&amp;</FONT>),
as shown in the following example.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>MsgBox "This is a string that I have to break up " &amp; _
&nbsp;&nbsp;&nbsp; "so that I can continue it on another line"

</code></pre></FONT>


<P>
You cannot follow a line&#173;continuation character with a comment
on the same line.
<P>
Use indentation levels to show logical levels in your code. Press
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">TAB</FONT> or click the <B>Indent</B> button on the
<B>Edit</B> toolbar to shift each line in a selected block of
code one indentation level to the right. Lines within the selection
retain their indentation levels relative to one another. Press
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SHIFT+TAB</FONT> or click the <B>Outdent</B> button
on the <B>Edit</B> toolbar to shift each line in a selected block
of code one indentation level to the right.
<P>
Use bookmarks to mark key areas in your code that you want to
be able to move between quickly without having to navigate manually.
Add a bookmark to a line by clicking the <B>Toggle Bookmark</B>
button on the <B>Edit</B> toolbar. A blue, rounded rectangle appears
in the margin to indicate a bookmark. To navigate between bookmarks,
click the <B>Next Bookmark</B> or <B>Previous Bookmark</B> button
on the <B>Edit</B> toolbar.
<P>
For more information about a specific feature, see the appropriate
topic in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H214">Document Projects vs. Template Projects</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex14"></a>
<P>
If you're writing procedures that are specifically designed to
be run on a single document, workbook, or presentation, you can
store the code in the project associated with that document, workbook,
or presentation. 
<P>
If, however, you want to be able to get to a procedure from more
than one document, workbook, or presentation, you can store the
code in the project associated with a particular template. 
<P>
When you apply a template to a Word document, the template is
attached to the Word document. All procedures in the attached
template are available to the document. If you change the code
in a template, the changed code is available for use in all documents
based on that template. If you want a procedure to be available
to all Word documents, regardless of which templates they're based
on, store the procedure in Normal.dot, which is automatically
referenced by all documents.
<P>
When you apply a template to a workbook or a presentation, any
code in the template project is copied to the project for the
workbook or presentation. Unlike Word, Microsoft Excel and PowerPoint
don't attach the template to the workbook, so changes you make
to the code in the template project won't be reflected in the
workbook or presentation projects after the template has been
applied. If you want a procedure to be available to all Microsoft
Excel workbooks, regardless of which templates they're based on,
store the procedure in Personal.xls.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H215">Class Modules</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex15"></a>
<P>
You use class modules to create your own custom objects when you
want to create encapsulated, reusable units of code. The <B>Sub</B>
and <B>Function</B> procedures you define in a class module become
methods of the custom object. The properties you define with the
<B>Property Get</B>, <B>Property Let</B>, and <B>Property Set</B>
statements become properties of the custom object. For more information
about creating and using custom classes, see Mastering Office&nbsp;97
Development, a CD&#173;ROM product available from Microsoft.
<P>
If you've added class modules to your project, either by clicking
<B>Class Module</B> on the <B>Insert</B> menu or by copying modules
from another project, you'll see a Class Modules folder under
the project name in the <B>Project Explorer</B>. You get to the
code for a particular class by clicking the class name and then
clicking the <B>View Code</B> button at the top of the <B>Project
Explorer</B>. 
<P>
<A NAME="PG001C2"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H102">Variables, Constants, and Data Types</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
In Visual Basic, as in all high&#173;level programming languages,
you use variables and constants to store values. Variables can
contain data represented by any supported data type.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H216">Visual Basic Data Types</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex16"></a>
<P>
The following table lists the fundamental data types that Visual
Basic supports.
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Data type</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Range</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Byte</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">1-byte binary data</FONT></FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">0 to 255.</FONT></FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Integer</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">2-byte integer</FONT></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&nbsp;&#150;&nbsp;32,768 to 32,767.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Long</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">4-byte integer</FONT></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&nbsp;&#150;&nbsp;2,147,483,648 to 2,147,483,647.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Single</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">4-byte floating-point number</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&nbsp;&#150;&nbsp;3.402823E38 to &nbsp;&#150;&nbsp;1.401298E&nbsp;&#150;&nbsp;45 (negative values).</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">1.401298E&nbsp;&#150;&nbsp;45 to 3.402823E38 (positive values).</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Double</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">8-byte floating-point number</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&nbsp;&#150;&nbsp;1.79769313486231E308 to &nbsp;&#150;&nbsp;4.94065645841247E&nbsp;&#150;&nbsp;324 (negative values).</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">4.94065645841247E&nbsp;&#150;&nbsp;324 to 1.79769313486231E308 (positive values).</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Currency</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">8-byte number with a fixed decimal point</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&nbsp;&#150;&nbsp;922,337,203,685,477.5808 to 922,337,203,685,477.5807.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>String</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">String of characters</FONT></FONT></TD>
<TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Zero to approximately two billion characters.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Variant</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Date/time, floating-point number, integer, string, or object. 16 bytes, plus 1 byte for each character if the value is a string value.</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Date values: January 1, 100 to December 31, 9999.</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Numeric values: same range as <B>Double</B>.</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">String values: same range as <B>String</B>.</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Can also contain <B>Error </B>or <B>Null </B><B>values.</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Boolean</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">2 bytes</FONT></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>True </B>or <B>False</B>.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Date</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">8-byte date/time value</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">January 1, 100 to December 31, 9999.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Object</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">4 bytes</FONT></FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Any object reference.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H217">Declaring a Constant, Variable, or Array</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex17"></a>
<P>
You declare a constant for use in place of a literal value by
using the <B>Const</B> statement. You can specify private or public
scope, specify a data type, and assign a value to the constant,
as shown in the following declarations.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Const MyVar = 459
Public Const MyString = "HELP"
Private Const MyInt As Integer = 5
Const MyStr = "Hello", MyDouble As Double = 3.4567

</code></pre></FONT>


<P>
If you don't specify scope, the constant has private scope by
default. If you don't explicitly specify a data type when you
declare a constant, Visual Basic gives the constant the data type
that best matches the expression assigned to the constant. For
more information, see "Const Statement," "Public
Statement," "Private Statement," and "As"
in Help.
<P>
<a name="dex18"></a>
<P>
You declare a variable by using the <B>Dim</B>, <B>Private</B>,
<B>Public</B>, or <B>Static</B> keyword. Use the <B>As</B> keyword
to explicitly specify a data type for the variable, as shown in
the following declarations.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private I
Dim Amt
Static YourName As String
Public BillsPaid As Currency
Private YourName As String, BillsPaid As Currency
Private Test, Amount, J As Integer

</code></pre></FONT>


<P>
If you don't declare a variable as static, when a procedure that
contains it ends, the variable's value isn't preserved and the
memory that the variable used is reclaimed. If you don't explicitly
declare a data type, Visual Basic gives the variable the <B>Variant</B>
data type by default. 
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;Not
all variables in the same declaration statement have the same
specified type. For example, the variables Test and Amount in
the last line in the preceding example are of the Variant data
type. 
<P>
<a name="dex19"></a>
<P>
The steps you take to declare an array are very similar to the
steps you take to declare a variable. You use the <B>Private</B>,
<B>Public</B>, <B>Dim</B>, and <B>Static</B> keywords to declare
the array, you use integer values to specify the upper and lower
bounds for each dimension, and you use the <B>As</B> keyword to
specify the data type for the array elements. You must explicitly
declare an array before you can use it; you cannot implicitly
declare an array. 
<P>
When you declare an array, you specify the upper and lower bounds
for each dimension within the parentheses following the array
name. If you specify only one value for a dimension, Visual Basic
interprets the value as the upper bound and supplies a default
lower bound. The default lower bound is 0 (zero) unless you set
it to 1 by using the <B>Option Base</B> statement. The following
declarations declare one&#173;dimensional arrays containing 15
and 21 elements, respectively.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim counters(14) As Integer
Dim sums(20) As Double

</code></pre></FONT>


<P>
You can also specify the lower bound of a dimension explicitly.
To do this, separate the lower and upper bounds with the <B>To</B>
keyword, as in the following declarations.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim counters(1 To 15) As Integer
Dim sums(100 To 120) As String

</code></pre></FONT>


<P>
In the preceding declarations, the index numbers of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">counters</FONT>
range from 1 to 15, and the index numbers of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">sums</FONT>
range from 100 to 120.
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">You
can use the <B>LBound</B> and <B>UBound</B> functions to determine
the existing lower and upper bounds of an array.</FONT>
<P>
You can declare arrays of up to 60 dimensions. The following declaration
creates an array with three dimensions, whose sizes are 4, 10,
and 15. The total number of elements is the product of these three
dimensions, or 600.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim multiD(4, 1 To 10, 1 To 15)


</code></pre></FONT>

<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">When
you start adding dimensions to an array, the total amount of storage
needed by the array increases dramatically, so use multidimensional
arrays with care. Be especially careful with <B>Variant</B> arrays,
because they're larger than arrays of other data types.</FONT>
<P>
You declare a dynamic array just as you would declare a fixed&#173;size
array, but without specifying dimension sizes within the parentheses
following the array name, as in the following declaration.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim dynArray() As Integer


</code></pre></FONT>

<P>
Somewhere in a procedure, allocate the actual number of elements
with a <B>ReDim</B> statement, as in the following example.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ReDim DynArray(X + 1)


</code></pre></FONT>

<P>
Use the <B>Preserve</B> keyword to change the size of an array
without losing the data in it. You can enlarge an array by one
element without losing the values of the existing elements, as
in the following example. 


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ReDim Preserve myArray(UBound(myArray) + 1)


</code></pre></FONT>

<P>
For more information, see "ReDim Statement" in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H218">Setting an Object Variable</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex20"></a>
<P>
You declare an object variable by specifying for the data type
either the generic <B>Object</B> type or a specific class name
from a referenced object library. The following declaration declares
an object variable of the generic type <B>Object</B>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim mySheet As Object


</code></pre></FONT>

<P>
When an object variable is declared as the generic type <B>Object</B>,
Visual Basic doesn't know what type of object the variable will
later be used with. Therefore, Visual Basic cannot verify at compile
time that the object exists, cannot verify that any properties
or methods used with the object are specified correctly, and cannot
bind this information to the object variable&nbsp;&#151; in
other words, Visual Basic cannot <I>early bind </I>the
object variable. Not until the code runs and actually assigns
an object to the object variable can Visual Basic verify this
information and <I>late bind </I>the object variable.
Generic object variables are useful when you don't know the specific
type of object that the variable will contain, or when the variable
must at different times contain objects from several different
classes. If possible, however, you should provide a specific class
name when declaring an object variable, as shown in the following
declarations.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim mySheet As Worksheet
Dim myPres As Presentation
Dim myRange As Range
Dim myApp As Application

</code></pre></FONT>


<P>
In addition to providing a specific class name, you may want to
qualify<B> </B>the object variable type with the name of the application
that's supplying the object, as in the following declarations.
This is useful if you write code using the objects from more than
one library, especially if the different libraries contain objects
with the same name.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim wndXL As Excel.Window
Dim wndWD As Word.Window
Dim appWD As Word.Application

</code></pre></FONT>


<P>
To assign an object to an object variable, use the <B>Set</B>
statement, as shown in the following example.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim myRange As Excel.Range
Set myRange = Worksheets("Sheet1").Range("A1")

</code></pre></FONT>


<P>
If you don't explicitly declare an object variable and you forget
the <B>Set</B> statement in your assignment, Visual Basic attempts
to use the default property of the object to assign a value to
the variable. The following example assigns to the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>
the value of the default property of the <B>Range</B> object (which
is the <B>Value</B> property) rather than the <B>Range</B> object
itself.


<FONT SIZE=3 FACE="Verdana, Arial, Helvetica">
<pre><code>myRange = Worksheets("Sheet1").Range("A1")&#09;' forgot the Set statement!

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H219">Using Built&#173;in Constants</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex21"></a>
<P>
The object library in each Office&nbsp;97 application provides
a set of built&#173;in constants, which you can use to set properties
or pass arguments to properties or methods. An enumerated type
is a set of built&#173;in constants that represent the possible
values that a specific property can be set to or that a specific
property or method can accept as an argument. In the Object Browser,
many properties or methods will display the name of an enumerated
type for a return type or an argument type instead of displaying
a basic data type. To open the Object Browser in the Visual Basic
Editor, press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F2</FONT>. You can use the Object Browser
to see which constants are included in an enumerated type and
what literal value each constant represents. For example, click
<B>Application</B> in the <B>Classes</B> box in the Object Browser,
and click <B>DisplayAlerts</B> in the <B>Members of</B> box. In
the pane at the bottom of the Object Browser, you see the following
phrase:
<P>
Property <B>DisplayAlerts</B> As <U><B>WdAlertLevel</B></U>
<P>
<B>WdAlertLevel</B> is an enumerated type that contains a set
of constants that represent all the valid values for the <B>DisplayAlerts</B>
property. You can recognize an enumerated type name because it
begins with a prefix that indicates the object library that supplied
it&nbsp;&#151; such as <B>Mso</B>, <B>Wd</B>, <B>Xl</B>, <B>Ac</B>,
<B>Pp</B>, <B>VB</B>, or <B>Fm</B>&nbsp;&#151; just as built&#173;in
constant names do. To see the constants included in this enumerated
type, click <B>WdAlertLevel</B>. Built&#173;in constant names
begin with the same prefixes as enumerated types. The <B>Classes</B>
box in the Object Browser will scroll to the <B>WdAlertLevel</B>
enumerated type, and you'll see the constants of this type listed
in the <B>Members of</B> box. If you click one of the constants,
you'll see the literal value that it represents in the pane at
the bottom of the Object Browser. For more information about using
the Object Browser, see Chapter&nbsp;2, "<a href="002.htm">Understanding Object
Models</A>."
<P>
You use built&#173;in constants to replace literal values in your
code. The two lines of code in the following example, each of
which sets Word to display all alerts and message boxes when it's
running a procedure, are equivalent to one another.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.DisplayAlerts = -1
Application.DisplayAlerts = wdAlertsAll


</code></pre></FONT>


<P>
Code that uses these constants instead of literal values is easier
to read. In addition, code that uses built&#173;in constants is
less likely to need to be updated if values are remapped in future
versions. That is, whereas the literal value &nbsp;&#150;&nbsp;1
might not always represent the option of displaying all alerts
and message boxes, the constant <B>wdAlertsAll</B> always will.
<P>
<A NAME="PG001C3"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H103">Control Structures</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex22"></a>
<P>
Using control structures, you can control the flow of your program's
execution. If left unchecked by control&#173;flow statements,
a program's logic will flow through statements from left to right,
and from top to bottom. Although you can write very simple programs
with only this unidirectional flow, and although you can control
a certain amount of flow by using operators to regulate precedence
of operations, most of the power and utility of any programming
language comes from its ability to change statement order with
structures and loops.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H220">Decision Structures</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex23"></a>
<P>
Visual Basic procedures can test conditions and then, depending
on the results of that test, perform different operations. The
Visual Basic decision structures are listed in the following table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">To test</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">A single condition and run a single statement or a block of statements</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>If...Then</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">A single condition and choose between two statement blocks</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>If...Then...Else</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">More than one condition and run one of several statement blocks</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>If...Then...ElseIf</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"> A single condition and run one of several statement blocks</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Select Case</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>If...Then</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<A NAME="MT1PG07p17">Use the <B>If...Then</B> statement to run
one or more statements when the specified condition is <B>True</B>.
You can use either a single&#173;line syntax or a multiple&#173;line
"block" syntax. The following pair of examples illustrate
the two types of syntax.</A>


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If thisVal &lt; 0 Then thisVal = 0

If thisVal &gt; 5 Then
&#09;thatVal = thisVal + 25
&#09;thisVal = 0
End If

</code></pre></FONT>




<P>
Notice that the single&#173;line form of
the <B>If...Then</B> statement doesn't use an <B>End If</B> statement.
If you want to run more than one line of code when the condition
is <B>True</B>, you must use the multiple&#173;line <B>If...Then...End
If</B> syntax.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>When
the condition you're evaluating contains two expressions joined
by an Or operator&nbsp;&#151; for example, If (thisVal &gt;
5 Or thatVal &lt; 9)&nbsp;&#151; both expressions are
tested, even if the first one is True. In rare circumstances,
this behavior can affect the outcome of the statement; for example,
it can cause a run&#173;time error if a variable in the second
expression contains an error value.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>If...Then...Else</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>If...Then...Else</B> statement
to define two blocks of statements, as in the following example.
One of the statements runs when the specified condition is <B>True</B>,
and the other one runs when the condition is <B>False</B>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If age &lt; 16 Then
&#09;MsgBox "You are not old enough for a license."
Else
&#09;MsgBox "You can be tested for a license."
End If

</code></pre></FONT>




<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>If...Then...ElseIf</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
You can add <B>ElseIf</B> statements to test
additional conditions without using nested <B>If...Then</B> statements,
thus making your code shorter and easier to read. For example,
suppose that you need to calculate employee bonuses using bonus
rates that vary according to job classification. The <B>Function</B>
procedure in the following example uses a series of <B>ElseIf</B>
statements to test the job classification before calculating the
bonus.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function Bonus(jobClass, salary, rating)
&#09;If jobClass = 1 Then
&#09;&#09;Bonus = salary * 0.1 * rating / 10
&#09;ElseIf jobClass = 2 Then
&#09;&#09;Bonus = salary * 0.09 * rating / 10
&#09;ElseIf jobClass = 3 Then
&#09;&#09;Bonus = salary * 0.07 * rating / 10
&#09;Else
&#09;&#09;Bonus = 0
&#09;End If
End Function

</code></pre></FONT>





<P>
The <B>If...Then...ElseIf</B> statement block
is very flexible. You can start with a simple <B>If...Then</B>
statement and add <B>Else</B> and <B>ElseIf</B> clauses as necessary.
However, this approach is unnecessarily tedious if each <B>ElseIf</B>
statement compares the same expression with a different value.
For this situation, you can use the <B>Select Case</B> statement.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Select Case</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<A NAME="MT1PG07p51">You can use the <B>Select Case</B> statement
instead of multiple <B>ElseIf</B> statements in an <B>If...Then...ElseIf</B>
structure when you want to compare the same expression with several
different values. A <B>Select Case</B> statement provides a decision&#173;making
capability similar to the <B>If...Then...ElseIf</B> statement;
however, <B>Select Case</B> makes the code more efficient and
readable.</A>
<P>
<A NAME="MT1PG07p52">For instance, to add several more job classifications
to the example in the preceding section, you can add more <B>ElseIf</B>
statements, or you can write the function using a <B>Select Case</B>
statement, as in the following example.</A>


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function Bonus(jobClass, salary, rating)
&#09;Select Case jobClass
&#09;&#09;Case 1
&#09;&#09;&#09;Bonus = salary * 0.1 * rating / 10
&#09;&#09;Case 2
&#09;&#09;&#09;Bonus = salary * 0.09 * rating / 10
&#09;&#09;Case 3
&#09;&#09;&#09;Bonus = salary * 0.07 * rating / 10
&#09;&#09;Case 4, 5&#09;'The expression list can contain several values...
&#09;&#09;&#09;Bonus = salary * 0.05 * rating / 5
&#09;&#09;Case 6 To 8&#09;'...or be a range of values
&#09;&#09;&#09;Bonus = 150
&#09;&#09;Case Is &gt; 8&#09;'...or be compared to other values
&#09;&#09;&#09;Bonus = 100
&#09;&#09;Case Else
&#09;&#09;&#09;Bonus = 0
&#09;End Select
End Function

</code></pre></FONT>


<P>
Notice that the <B>Select Case</B> structure evaluates a single
expression at the top of the structure. In contrast, the <B>If...Then...ElseIf</B>
structure can evaluate a different expression for each <B>ElseIf</B>
statement. You can replace an <B>If...Then...ElseIf</B> structure
with a <B>Select Case</B> structure only if each <B>ElseIf</B>
statement evaluates the same expression.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H221">Looping Structures</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex24"></a>
<P>
You can use loop structures to repeatedly run a section of your
procedure. The Visual Basic loop structures are listed in the
following table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">To</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Use</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Test a condition at the start of the loop, run the loop only if the condition is <B>True</B>, and continue until the condition becomes <B>False</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Do While...Loop</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Test a condition at the start of the loop, run the loop only if the condition is <B>False</B>, and continue until the condition becomes <B>True</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Do Until...Loop</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Always run the loop once, test a condition at the end of the loop, continue while the condition is <B>True</B>, and stop when the condition becomes <B>False</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Do...Loop While</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Always run the loop once, test a condition at the end of the loop, continue while the condition is <B>False</B>, and stop when the condition becomes <B>True</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Do...Loop Until</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><A NAME="ThisTable"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Run a loop a set number of times, using a loop counter that starts and ends at specified values and that changes value by a specified amount each time through the loop</FONT></A>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>For...Next</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Run a loop once for each object in a collection</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>For Each...Next</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Visual
Basic also includes the While&#133;Wend statement, but it's a
good idea to use the more flexible variations of the Do&#133;Loop
statement (such as Do While&#133;Loop or Do&#133;Loop While) instead.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Do...Loop</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<A NAME="MT1PG07p83">Use a <B>Do...Loop</B> statement to run a
block of statements an indefinite number of times&nbsp;&#151;
that is, when you don't know how many times you need to run the
statements in the loop. There are several variations of the <B>Do...Loop</B>
statement, but each one evaluates a condition to determine whether
or not to continue running. As with an <B>If...Then</B> statement,
the condition must be a value or an expression that evaluates
to either <B>True</B> or <B>False</B>. The different <B>Do&#133;Loop</B>
variations are described in this section. For more information
about the <B>Do...Loop</B> statement, see "Do...Loop Statement"
in Help.</A>
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;If
you want to run a block of statements a specific number of times,
use a For&#133;Next loop.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Do While...Loop</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Do While...Loop</B> statement
when you want to test a condition before you run the loop and
then continue to run the loop while the
condition is <B>True</B>.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
statements in a Do While&#133;Loop structure must eventually cause
the condition to become False, or the loop will run forever (this
is called an infinite loop). To stop an infinite loop, press CTRL+BREAK.
<P>
<A NAME="MT1PG07p85">The <B>Function</B> procedure in the following
example counts the occurrences of a target string within another
string by looping as long as the target string is found. Because
the test is at the beginning of the loop, the loop runs only if
the string contains the target string.</A>


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function CountStrings(longstring, target)
&#09;position = 1
&#09;Do While InStr(position, longstring, target) 'Returns True/False
&#09;&#09;position = InStr(position, longstring, target) + 1
&#09;&#09;Count = Count + 1
&#09;Loop
&#09;CountStrings = Count
End Function

</code></pre></FONT>



<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Do Until...Loop</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Do Until&#133;Loop</B> statement
if you want to test the condition at the beginning of the loop
and then run the loop until the test condition becomes <B>True</B>.
If the condition is initially <B>True</B>, the statements inside
the loop never run. With the test at the beginning of the
loop in the following example, the loop won't run if <B>Response</B>
is equal to <B>vbNo</B>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Response = MsgBox("Do you want to process more data?", vbYesNo)
Do Until Response = vbNo
&#09;ProcessUserData&nbsp;&nbsp;&nbsp; 'Call procedure to process data
&#09;Response = MsgBox("Do you want to process more data?", vbYesNo)
Loop

</code></pre></FONT>



<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B><A NAME="MT1PG07p98">Do...Loop While</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<A NAME="MT1PG07p103">When you want to make sure that the statements
in a loop will run at least once, use <B>Do&#133;Loop While</B>
to put the test at the end of the loop . The statements will run
as long as the condition is <B>True</B>.</A> In the following
Microsoft Excel example, the loop runs only if the <B>Find</B>
method finds a cell that contains "test." If the text
is found, the loop sets the color of the cell, and then searches
for the next instance of "test." If no other instance
is found, the loop ends.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MakeBlue()
&#09;Set rSearch = Worksheets("sheet1").Range("a1:a10")
&#09;Set c = rSearch.Find("test")
&#09;If Not c Is Nothing Then
&#09;&#09;first = c.Address
&#09;&#09;Do
&#09;&#09;&#09;c.Font.ColorIndex = 5
&#09;&#09;&#09;Set c = rSearch.FindNext(c)
&#09;&#09;Loop While (Not c Is Nothing) And (c.Address &lt;&gt; first)
&#09;Else
&#09;&#09;MsgBox "not found"
&#09;End If
End Sub

</code></pre></FONT>


<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B><A NAME="MT1PG07p110">Do...Loop Until</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<A NAME="MT1PG07p117">With the <B>Do&#133;Loop Until</B> statement,
which puts the test at the end of the loop, the loop runs at least
once and stops running when the condition becomes <B>True</B>,
as shown in the following example.</A>


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Do 
&#09;ProcessUserData&nbsp;&nbsp;&nbsp; 'Call procedure to process data
&#09;response = MsgBox("Do you want to process more data?", vbYesNo)
Loop Until response = vbNo

</code></pre></FONT>



<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>For...Next</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
When you know that you must run the statements
a specific number of times, use a <B>For...Next</B> loop. Unlike
the many variations of <B>Do&#133;Loop</B>, a <B>For...Next</B>
loop uses a counter variable that increases or decreases in value
during each repetition of the loop. Whereas the variations of
<B>Do&#133;Loop</B> end when a test condition becomes <B>True</B>
or <B>False</B>, a <B>For...Next</B> loop ends when the counter
variable reaches a specified value.
<P>
The <B>Sub</B> procedure in the following
example sounds a tone however many times you specify.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub BeepSeveral()
&#09;numBeeps = InputBox("How many beeps?")
&#09;For counter = 1 To numBeeps
&#09;&#09;Beep
&#09;Next counter
End Sub

</code></pre></FONT>



<P>
Because you didn't specify otherwise, the
counter variable in the preceding example increases by 1 each
time the loop repeats. You can use the <B>Step</B> keyword to
specify a different increment for the counter variable (if you
specify a negative number, the counter variable decreases by the
specified value each time through the loop). In the following
<B>Sub</B> procedure, which replaces every other value in an array
with 0 (zero), the counter variable increases by 2 each time the
loop repeats.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub ClearArray(ByRef ArrayToClear())
&#09;For i = LBound(ArrayToClear) To UBound(ArrayToClear) Step 2
&#09;&#09;ArrayToClear(i) = 0
&#09;Next i
End Sub

</code></pre></FONT>



<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;The
variable name after the Next statement is optional, but it can
make your code easier to read, especially if you have several
nested <B>For</B> loops.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>For Each...Next</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
A <B>For Each...Next</B> loop is similar
to a <B>For...Next</B> loop, except that it repeats a group of
statements for each element in a collection of objects or in an
array, instead of repeating the statements a specified number
of times. This is especially useful if you don't know how many
elements are in a collection, or if the contents of the collection
might change as your procedure runs. The <B>For Each&#133;Next</B>
statement uses the following syntax.
<P>
<B>For Each</B> <I>element</I> <B>In</B> <I>group</I>
<BR>
&#09;<I>statements</I>
<P>
<B>Next</B> <I>element</I>
<P>
When Visual Basic runs a <B>For Each...Next</B>
loop, it follows these steps:
<P>

<OL>
<P>
<LI>It defines element as naming
the first element in group (provided that there's at least one
element).
<P>
<LI>It runs <I>statements</I>.
<P>
<LI>It tests to see whether <I>element</I> is the last element in group. If
so, Visual Basic exits the loop.
<P>
<LI>It defines <I>element</I> as naming the next element in group.
<P>
<LI>It repeats steps 2 through 4.
<P>
</OL>

<P>
The following Microsoft Excel example examines each cell in the
current region for cell A1 on the worksheet named "Sheet3"
and formats its contents as red if its value is less than &nbsp;&#150;&nbsp;1.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each c In Worksheets("sheet3").Range("a1").CurrentRegion.Cells
&#09;If c.Value &lt; -1 Then c.Font.ColorIndex = 3
Next c

</code></pre></FONT>


<P>
The following Word example loops through all the revisions in
the current selection and accepts each one.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each myRev In Selection.Range.Revisions
&nbsp;&nbsp;&nbsp; myRev.Accept
Next myRev

</code></pre></FONT>


<P>
The variable name after the <B>Next</B> statement&nbsp;&#151;
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">c</FONT> in the Microsoft
Excel example and <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRev</FONT>
in the Word example&nbsp;&#151; is optional, but it can make
your code easier to read, especially if you have several nested
<B>For Each</B> loops.
<P>
<FONT COLOR="#0000FF"><B>Important</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;If
you want to delete all the objects in a collection, use a <B>For...Next</B>
loop instead of a <B>For Each...Next</B> loop. The following example
deletes all the slides in the active PowerPoint presentation.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set allSlides = ActivePresentation.Slides
For s = allSlides.Count To 1 Step -1
&nbsp;&nbsp;&nbsp; allSlides.Item(s).Delete
Next

</code></pre></FONT>


<P>
The code in the following example, on the other hand, won't work
(it will delete every other slide in the presentation).


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each s In ActivePresentation.Slides
&nbsp;&nbsp;&nbsp; s.Delete
Next

</code></pre></FONT>


<P>
Keep the following restrictions in mind when using the <B>For
Each...Next</B> statement:
<P>

<UL>
<P>
<LI>For collections, <I>element</I> can only be a <B>Variant</B> variable, a generic <B>Object</B>
variable, or a specific object type in a referenced object library.
For arrays, <I>element</I> can only be a <B>Variant</B> variable.
<P>
<LI><A NAME="MT1PG07p176">You
cannot use the <B>For Each...Next</B> statement with an array
of user&#173;defined types, because a <B>Variant</B> variable
cannot contain a user&#173;defined type. </A>
</UL>
<P>
<A NAME="CH001H222"></A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Nesting Control Structures</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex25"></a>
<P>
You can place control structures inside other control structures;
for instance, you can place an <B>If...Then</B> block within a
<B>For Each...Next</B> loop within another <B>If...Then</B> block,
and so on. A control structure placed inside another control structure
is said to be <I>nested</I>.
<P>
<A NAME="MT1PG07p181">The following example searches the range
of cells you specify with an argument and counts the number of
cells that match the value you specify.</A>


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function CountValues(rangeToSearch, searchValue)
&#09;If TypeName(rangeToSearch) &lt;&gt; "Range" Then
&#09;&#09;MsgBox "You can search only a range of cells."
&#09;Else
&#09;&#09;For Each c in rangeToSearch.cells
&#09;&#09;&#09;If c.Value = searchValue Then
&#09;&#09;&#09;&#09;counter = counter + 1
&#09;&#09;&#09;End If
&#09;&#09;Next c
&#09;End If
&#09;CountValues = counter
End Function

</code></pre></FONT>



<P>
<A NAME="MT1PG07p195">Notice that the first <B>End If</B> statement
closes the inner <B>If...Then</B> block and that the last <B>End
If</B> statement closes the outer <B>If...Then</B> block. Likewise,
in nested <B>For...Next</B> and <B>For Each...Next</B> loops,
the <B>Next</B> statements automatically apply to the nearest
prior <B>For</B> or <B>For Each</B> statement. Nested <B>Do...Loop</B>
structures work in a similar fashion, with the innermost <B>Loop</B>
statement matching the innermost <B>Do</B> statement.</A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH001H223">Exiting Loops and Procedures</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex26"></a>
<P>
Usually, your macros will run through loops and procedures from
beginning to end. There may be situations, however, in which leaving,
or exiting, a loop or procedure earlier than normal can save you
time by avoiding unnecessary repetition.
<P>
For example, if you're searching for a value in an array using
a <B>For...Next</B> loop and you find the value the first time
through the loop, there's no reason to search the rest of the
array&nbsp;&#151; you can stop repeating the loop and continue
with the rest of the procedure immediately. If an error occurs
in a procedure that makes the remainder of the procedure unnecessary,
you can exit the procedure immediately. You can cut a control
structure off early by using one of the <B>Exit</B> statements.
<P>
Although the <B>Exit</B> statements can be convenient, you should
use them only when it's absolutely necessary and only as a response
to an extraordinary condition (not in the normal flow of a loop
or procedure). Overusing <B>Exit</B> statements can make your
code difficult to read and debug.
<P>
Also , there may be a better way to skip portions of your macro.
For instance, instead of using an <B>Exit</B> statement inside
a <B>For...Next</B> loop while searching for a value in an array,
you could use a <B>Do&#133;Loop</B> to search the array only while
an incremented index value is smaller than the array's upper bound
and a <B>Boolean</B> variable value is <B>False</B>, as shown
in the following example. When you find the array value, setting
the <B>Boolean</B> value to <B>True</B> causes the loop to stop.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>i = LBound(searchArray)
ub = UBound(searchArray)
foundIt = False
Do
&#09;If searchArray(i) = findThis Then foundIt = True
&#09;i = i + 1
Loop While i &lt;= ub And Not foundIt

</code></pre></FONT>

<P>
You use the <B>Exit Do</B> statement
to exit directly from a <B>Do&#133;Loop</B>, and you use the <B>Exit
For</B> statement to exit directly from a <B>For</B> loop, as
shown in the following example.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each c in rangeToSearch
&#09;If c.Value = searchValue Then
&#09;&#09;found = True
&#09;&#09;Exit For
&#09;End If
Next

</code></pre></FONT>



<P>
You use the <B>Exit Sub</B> and <B>Exit
Function</B> statements to exit a procedure. The following example
demonstrates the use of <B>Exit Function</B>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each c in rangeToSearch
&#09;If c.Value = searchValue Then
&#09;&#09;counter = counter + 1
&#09;ElseIf c.Value = "Bad Data" Then
&#09;&#09;countValues = Null
&#09;&#09;Exit Function&#09;'Stop testing and exit immediately.
&#09;End If
Next c

</code></pre></FONT>



<BR>



</MENU></MENU></MENU>
<HR>

<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<pre><code>  
</code></pre>
<P> 
</FONT>
</FONT></BODY>



</HTML>

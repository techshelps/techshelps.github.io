<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 4: Microsoft Excel Objects</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 4</B></FONT></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Microsoft Excel Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<LI><A HREF="#CH004H101">Working with the
Application Object</A>
<BR>
<LI><A HREF="#CH004H102">Working with the
Workbook Object</A>
<BR>
<LI><A HREF="#CH004H103">Working with the
Range Object</A>
<BR>
<LI><A HREF="#CH004H104">Working with Events</A>
</UL>

<P>
<a name="dex1"></a>
<P>
Visual Basic supports a set of objects that correspond directly
to elements in Microsoft Excel, most of which you're familiar
with from the user interface. For example, the <B>Workbook</B>
object represents a workbook, the <B>Worksheet</B> object represents
a worksheet, and the <B>Range</B> object represents a range of
cells on a worksheet. Every element in Microsoft Excel&nbsp;&#151;
each workbook, worksheet, chart, cell, and so on&nbsp;&#151;
can be represented by an object in Visual Basic. By creating procedures
that control these objects, you automate tasks in Microsoft Excel.
The object model in Microsoft Excel&nbsp;97 contains extensive
changes and modifications. To view a graphical representation
of the Microsoft Excel&nbsp;97 object model, see "Microsoft
Excel Objects" in Help. For a list of changes and additions,
see "Changes to the Microsoft Excel&nbsp;97 Object Model"
in Help.
<P>
<a name="dex2"></a>
<P>
Microsoft Excel&nbsp;97 adds support for event-driven programming
to Visual Basic. An <I>event</I> is any action recognized
by a Microsoft Excel object. Several objects in Microsoft Excel
recognize a predefined set of events; when you want an object
to respond to an event in a particular way, you can write a Visual
Basic <I>event procedure</I> for that event.
<P>
<TABLE WIDTH=80% CELLPADDING=15 BORDER=1 CELLSPACING=0 BORDERCOLOR=#0000FF><TR BGCOLOR=#FFFFFF><TD>

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<P>
<B>How Do I Display Visual Basic Help for Microsoft Excel?</B>
<P>
To use Visual Basic Help for Microsoft Excel, you must click <B>Custom</B>
during Setup and select the <B>Online Help for Visual Basic</B>
check box for Microsoft Excel. Otherwise, Visual Basic Help won't
be installed. If you've already installed Microsoft Excel, you
can run Setup again to install Visual Basic Help.
<P>
To see the contents and index of Visual Basic Help for Microsoft
Excel, click <B>Contents and Index</B> on the <B>Help</B> menu
in the Visual Basic Editor. On the <B>Contents</B> tab in the
<B>Help Topics</B> dialog box, double-click "Microsoft Excel
Visual Basic Reference," and then double-click "Shortcut
to Microsoft Excel Visual Basic Reference." The <B>Help Topics</B>
dialog box should reappear, displaying the contents and index
for Visual Basic Help for Microsoft Excel.
<P>
</FONT></FONT></TD></TR>
</TABLE>

<P>
<A NAME="PG004C1"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H101">Working with the Application Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex3"></a>
<P>
Most properties of the Microsoft Excel <B>Application</B> object
control the appearance of the application window or the global
behavior of the application. For example, the value of the <B>DisplayFormulaBar</B>
property is <B>True</B> if the formula bar is visible, and the
value of the <B>ScreenUpdating</B> property is <B>False</B> if
screen updating is turned off.
<P>
<a name="dex4"></a>
<P>
In addition, properties of the <B>Application</B> object provide
access to objects lower in the object hierarchy, such as the <B>Windows</B>
collection (representing all currently open windows) and the <B>Workbooks</B>
collection (representing all currently open workbooks). You use
these properties, sometimes called <I>accessors</I>,
to move down the object hierarchy from the top&#173;level <B>Application</B>
object to objects lower in the hierarchy (such as the <B>Workbook</B>,
<B>Worksheet</B>, and <B>Range</B> objects). For more information
about navigating through an object model, see Chapter 2, "<a href="002.htm">Understanding Object Models</A>."
<P>
Some methods and properties that apply to the <B>Application</B>
object also apply to objects lower in the object hierarchy. Using
these properties or methods at the <B>Application</B> level usually
changes all open workbooks or sheets. For example, the <B>Calculate</B>
method applies to the <B>Application</B>, <B>Workbook</B>, and
<B>Worksheet</B> objects. Using <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Application.Calculate</FONT>
recalculates all worksheets in all open workbooks, whereas using
this method on the <B>Workbook</B> or <B>Worksheet</B> object
provides greater control.
<P>
<A NAME="PG004C2"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H102">Working with the Workbook Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex5"></a>
<P>
When you open or save a file in Microsoft Excel, you're actually
opening and saving a workbook. In Visual Basic, the methods for
manipulating files are methods of the <B>Workbook</B> object or
the <B>Workbooks</B> collection.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H201">Opening Workbooks</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex6"></a>
<P>
When you open a workbook, you use the <B>Open</B> method. The
<B>Open </B>method always applies to the <B>Workbooks</B> collection,
which you return using the <B>Workbooks</B> property. The following
code opens the file Book1.xls (in the current folder) and then
displays the value that's in cell A1 on the first worksheet in
the workbook.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub OpenBook1()
&#09;Set myBook = Workbooks.Open(Filename:="BOOK1.XLS")
&#09;MsgBox myBook.Worksheets(1).Range("A1").Value
End Sub

</code></pre></FONT>

<P>
Notice that the return value of the <B>Open</B> method is a <B>Workbook</B>
object that refers to the workbook that was just opened.
<P>
The file name in this example doesn't contain a path; therefore,
the file is assumed to be in the current folder. This is guaranteed
to cause a run&#173;time error, because as soon as the user changes
the current folder, Visual Basic can no longer find the file.
<P>
<a name="dex7"></a>
<P>
There are two relatively safe places to store a workbook you want
to open programmatically. One place is the folder that contains
the executable file for Microsoft Excel. The other place is the
Library folder, which is created automatically during setup; this
folder is one level down from the folder that contains the executable
file.
<P>
<a name="dex8"></a>
<P>
If you want to open a workbook that's saved in the folder that
contains the executable file, you can use the <B>Path</B> property
to return a string that specifies the folder. The <B>PathSeparator</B>
property returns the correct separator character for the current
file system (for example, a backslash (\) for MS&#173;DOS<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&reg;</FONT>/Windows<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&reg;</FONT>
FAT, or a colon (:) for the Macintosh<FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&reg;</FONT>).
The following example shows file&#173;system&#173;independent
code you can use to open Book1.xls, assuming that Book1.xls is
saved in the folder that contains the executable file.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub OpenBook1()
&#09;EXEPath = Application.Path &amp; Application.PathSeparator
&#09;fName = EXEPath &amp; "BOOK1.XLS"
&#09;Set myBook = Workbooks.Open(Filename:=fName)
&#09;MsgBox myBook.Worksheets(1).Range("A1").Value
End Sub

</code></pre></FONT>

<P>
<a name="dex9"></a>
<P>
The other relatively safe place to store a workbook is in the
Library folder. You can use the <B>LibraryPath</B> property instead
of the <B>Path</B> property to return a string that specifies
the Library folder. The following code shows how you would alter
the preceding example to use the <B>LibraryPath</B> property.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub OpenBook1()
&#09;LibPath = Application.LibraryPath &amp; Application.PathSeparator
&#09;fName = LibPath &amp; "BOOK1.XLS"
&#09;Set myBook = Workbooks.Open(Filename:=fName)
&#09;MsgBox myBook.Worksheets(1).Range("A1").Value
End Sub

</code></pre></FONT>

<P>
Instead of hard&#173;coding a file name with the <B>Open</B> method,
you may want to give the user the option of selecting a file to
open. The <B>GetOpenFilename</B> method displays the standard
<B>Open</B> dialog box, but the method returns a string instead
of opening a file. The string contains the fully qualified path
and file name. The following example demonstrates the <B>GetOpenFilename</B>
method by displaying the return value in a message box and then
opening the file.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub DemoGetOpenFilename()
&#09;Do
&#09;&#09;fName = Application.GetOpenFilename
&#09;Loop Until fName &lt;&gt; False
&#09;MsgBox "Opening " &amp; fName
&#09;Set myBook = Workbooks.Open(Filename:=fName)
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H202">Creating and Saving Workbooks</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex10"></a>
<P>
You create a new workbook by applying the <B>Add</B> method to
the <B>Workbooks</B> collection. Remember to set the return value
of the <B>Add</B> method to an object variable so that you can
refer to the new workbook in your code.
<P>
When you save a new workbook for the first time, use the <B>SaveAs</B>
method. For subsequent saves, use the <B>Save</B> method. The
<B>GetSaveAsFilename</B> method is very similar to the <B>GetOpenFilename</B>
method, which is described in the preceding section. The following
example shows how to create a new workbook and then save it using
the <B>GetSaveAsFilename</B> method.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub CreateAndSave()
&#09;Set newBook = Workbooks.Add
&#09;Do
&#09;&#09;fName = Application.GetSaveAsFilename
&#09;Loop Until fName &lt;&gt; False
&#09;newBook.SaveAs Filename:=fName
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H203">Closing Workbooks</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex11"></a>
<P>
To close a workbook, use the <B>Close</B> method of the <B>Workbook</B>
object. You can close a workbook without saving changes, as shown
in the following example.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub OpenChangeClose()
&#09;Do
&#09;&#09;fName = Application.GetOpenFilename
&#09;Loop Until fName &lt;&gt; False
&#09;Set myBook = Workbooks.Open(Filename:=fName)
&#09;' Make some changes to myBook
&#09;myBook.Close savechanges:=False
End Sub

</code></pre></FONT>

<P>
This code uses the <B>GetOpenFilename</B> method to select the
workbook to open, makes some changes to the workbook (indicated
by the comments), and then closes the workbook without saving
the changes.
<P>
<A NAME="PG004C3"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H103">Working with the Range Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex12"></a>
<P>
The <B>Range</B> object can represent a single cell, a range of
cells, an entire row or column, a selection containing multiple
areas, or a 3&#173;D range. The <B>Range</B> object is somewhat
unusual in that it can represent both a single cell and multiple
cells. There's no separate collection object for the <B>Range</B>
object; you can think of it as being either a single object or
a collection, depending on the situation. There are many different
properties and methods that return a <B>Range</B> object, as shown
in the following list.
<P>
<TABLE WIDTH=85%>
<TR><TD WIDTH=160><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ActiveCell</B>
<P>
<B>BottomRightCell</B>
<P>
<B>Cells</B>
<P>
<B>ChangingCells</B>
<P>
<B>CircularReference</B>
<P>
<B>Columns</B>
<P>
<B>CurrentArray</B>
<P>
<B>CurrentRegion</B>
<P>
<B>Dependents</B>
</FONT></FONT></TD><TD WIDTH=160><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DirectDependents</B>
<P>
<B>DirectPrecedents</B>
<P>
<B>EntireColumn</B>
<P>
<B>EntireRow</B>
<P>
<B>Next</B>
<P>
<B>Offset</B>
<P>
<B>PageRange</B>
<P>
<B>Precedents</B>
<P>
<B>Range</B>
</FONT></FONT></TD><TD WIDTH=160><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>RowFields</B>
<P>
<B>RowRange</B>
<P>
<B>Rows</B>
<P>
<B>Selection</B>
<P>
<B>TableRange1</B>
<P>
<B>TableRange2</B>
<P>
<B>TopLeftCell</B>
<P>
<B>UsedRange</B>
<P>
<B>VisibleRange</B>
</FONT></FONT></TD></TR>
</TABLE>

<P>
For more information about these properties and methods, see the
individual property and method topics in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H204">Using an A1&#173;Style String Reference
or Range Name</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex13"></a>
<P>
One of the most common ways to return a <B>Range</B> object is
to use an A1&#173;style reference or the name of a range, as shown
in the following table.
<P>

<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>
<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

To do this</FONT></B></FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Use the following code</FONT></B>
</FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set the value of cell A1 on Sheet1</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Worksheets("Sheet1").Range("A1").Value = 3
</FONT></FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set the formula for cell B1 on the active sheet</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range("B1").Formula = "=5-10*RAND()"
</FONT></FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set the value of each cell in the range C1:E3 on the active sheet</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range("C1:E3").Value = 6
</FONT></FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Clear the contents of the range A1:E3 on the active sheet</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range("A1", "E3").ClearContents
</FONT></FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set the font style for the range named "myRange" (a workbook-level name) to bold</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range("myRange").Font.Bold = True
</FONT></FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set the value of each cell in the range named "yourRange" (a sheet-level name)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range("Sheet1!yourRange").Value = 3
</FONT></FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set an object variable to refer to a range</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Set objRange = Range("myRange") 
</FONT></FONT></TD></TR>
</TABLE>
<P>
Remember that expressions such as <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range("C1:E3").Value
= 6</FONT> assume that the <B>Range</B> property operates
on the active sheet. If you try to run this code with a chart
sheet active, a run&#173;time error occurs (error 1004, "Range
method of Application class failed").
<P>
Another cause of errors is the use of the <B>Range</B> property
in an argument to another method, without fully qualifying the
<B>Worksheet</B> object to which the <B>Range</B> property applies.
The following example, which is supposed to sort a range of cells
on Sheet1, also causes run&#173;time error 1004.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub SortRange()
Worksheets("Sheet1").Range("A1:B10").Sort _
&#09;key1:=Range("A1"), order1:=xlDescending
End Sub

</code></pre></FONT>


<P>
<a name="dex14"></a>
<P>
This error is more difficult to find, because the line that contains
the <B>Sort</B> method is correct. The error is caused by the
second line, which contains the <I>Key1</I> argument.
This code will run correctly if Sheet1 is the active sheet, but
it will fail when it's run from another worksheet or from a module.
To avoid the error, use the <B>Worksheets</B> property in the
argument.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub SortRange()
&#09;Worksheets("Sheet1").Range("A1:B10").Sort _
&#09;&#09;key1:=Worksheets("Sheet1").Range("A1"), order1:=xlDescending
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H205">Using Numeric Row and Column Indexes</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex15"></a>
<P>
You can also return a specific cell by specifying its row and
column numbers, or indexes. You specify the row index first, followed
by the column index, as shown in the following table.
<P>

<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>
<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


To do this</FONT></B></FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


Use the following code</FONT></B>
</FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


Set the value of cell A1 on Sheet1</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Worksheets("Sheet1").Cells(1, 1).Value = 3
</FONT>
</FONT></TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set the formula for cell B1 on the active sheet</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Cells(1, 2).Formula = "=5-10*RAND()"
</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Set an object variable </FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Set objRange = Worksheets("Sheet1").Cells(1, 1) 
</FONT>
</FONT></TD></TR>
<P>
</TABLE>
<P>
<a name="dex16"></a>
<P>
Numeric row and column indexes are useful when you want to refer
to cells by using loop counters. For example, the following code
loops through cells A1:D10 on Sheet1. If any of the cells has
a value less than 0.01, the example replaces the value with 0&nbsp;(zero).

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub RoundToZero()
&#09;For rwIndex = 1 to 4
&#09;&#09;For colIndex = 1 to 10
&#09;&#09;&#09;If Worksheets("Sheet1").Cells(rwIndex, colIndex) &lt; .01 Then
&#09;&#09;&#09;&#09;Worksheets("Sheet1").Cells(rwIndex, colIndex).Value = 0
&#09;&#09;&#09;End If
&#09;&#09;Next colIndex
&#09;Next rwIndex
End Sub

</code></pre></FONT>

<P>
<a name="dex17"></a>
<P>
The following example shows a quick and easy way to display items
in a multiple&#173;column list. The code creates a new worksheet
and sets the object variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">newSheet</FONT>
to refer to the worksheet. The code then creates a list of all
the names in the active workbook and displays their formulas in
A1&#173;style notation.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub ListNames()
&#09;Set newSheet = Worksheets.Add
&#09;i = 1
&#09;For Each nm In ActiveWorkbook.Names
&#09;&#09;newSheet.Cells(i, 1).Value = nm.Name
&#09;&#09;newSheet.Cells(i, 2).Value = "'" &amp; nm.RefersTo
&#09;&#09;i = i + 1
&#09;Next nm
&#09;newSheet.Columns("A:B").AutoFit
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H206">Using the Offset Property</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex18"></a>
<P>
You often need to return a range of cells that's a certain number
of rows or columns away from another range of cells. The <B>Offset</B>
property applies to a <B>Range</B> object, takes a <I>RowOffset</I>
argument and a <I>ColumnOffset</I> argument, and returns
a new range. The following example determines the type of data
in each cell in the range A1:A10. The code writes the data types
in the column to the right of the input cells.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub ScanColumn()
&#09;For Each c In Worksheets("Sheet1").Range("A1:A10").Cells
&#09;&#09;If Application.IsText(c.Value) Then
&#09;&#09;&#09;c.Offset(0, 1).Formula = "Text"
&#09;&#09;ElseIf Application.IsNumber(c.Value) Then
&#09;&#09;&#09;c.Offset(0, 1).Formula = "Number"
&#09;&#09;ElseIf Application.IsLogical(c.Value) Then
&#09;&#09;&#09;c.Offset(0, 1).Formula = "Boolean"
&#09;&#09;ElseIf Application.IsError(c.Value) Then
&#09;&#09;&#09;c.Offset(0, 1).Formula = "Error"
&#09;&#09;ElseIf c.Value = "" Then
&#09;&#09;&#09;c.Offset(0, 1).Formula = "(blank cell)"
&#09;&#09;End If
&#09;Next c
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H207">Using the CurrentRegion and UsedRange
Properties</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex19"></a>
<P>
These two properties are very useful when your code operates on
ranges whose size you have no control over. The current region
is a range of cells bounded by empty rows and empty columns, or
by a combination of empty rows, empty columns, and the edges of
the worksheet.
<P>
The <B>CurrentRegion</B> property applies to a <B>Range</B> object.
There can be many different current regions on a worksheet, depending
on the <B>Range</B> object to which you apply the <B>CurrentRegion</B>
property.
<P>
Suppose that Sheet1 contains a list to which you want to apply
a number format. The only thing you know about the list is that
it begins at cell A1; you don't know how many rows or columns
it contains. The following example shows how to format the list
by using the <B>CurrentRegion</B> property.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub FormatRange()
&#09;Set myRange = Worksheets("Sheet1").Range("A1").CurrentRegion
&#09;myRange.NumberFormat = "0.0"
End Sub

</code></pre></FONT>

<P>
The used range is bounded by the farthest upper&#173;left and
farthest lower&#173;right nonempty cells on a worksheet. It's
a range that contains every nonempty cell on the worksheet, as
well as all the empty cells that are interspersed among them.
There can be only one used range on a worksheet; the <B>UsedRange</B>
property applies to a <B>Worksheet</B> object, not to a <B>Range</B>
object.
<P>
Suppose that the active worksheet contains data from a timed experiment.
The used range contains the dates in the first column, the times
in the second column, and the measurements in the third and fourth
columns. You want to write code that combines each separate date
and time into a single value, converts that value from Greenwich
Mean Time (GMT) to Pacific Standard Time (PST), and then applies
a date format to the value. The data table can contain empty rows
and columns. You can use the <B>UsedRange</B> property to return
the entire used range, including any embedded blank rows. The
following example shows one way to convert and format the dates
and times.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub ConvertDates()
&#09;Set myRange = ActiveSheet.UsedRange
&#09;myRange.Columns("C").Insert
&#09;Set dateCol = myRange.Columns("C")
&#09;For Each c In dateCol.Cells
&#09;&#09;If c.Offset(0, -1).Value &lt;&gt; "" Then
&#09;&#09;&#09;c.FormulaR1C1 = "=RC[-2]+RC[-1]-(8/24)"
&#09;&#09;End If
&#09;Next c
&#09;dateCol.NumberFormat = "mmm-dd-yyyy hh:mm"
&#09;dateCol.Copy
&#09;dateCol.PasteSpecial Paste:=xlValues
&#09;myRange.Columns("A:B").Delete
&#09;dateCol.AutoFit
End Sub

</code></pre></FONT>

<P>
<a name="dex20"></a>
<P>
Notice that the code uses the expression <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">ActiveSheet.UsedRange.Columns("C")</FONT>
to return the third column from the used range (although this
is the third column in the used range, it can appear in any column
on the worksheet&nbsp;&#151; that is, the used range can be
preceded by empty columns). You can use other <B>Range</B> object
properties and methods in a similar way to build complex expressions
that return subranges or super&#173;ranges of a <B>Range</B> object.
Some properties and methods commonly used in this way are <B>Areas</B>,
<B>Cells</B>, <B>Columns</B>, <B>EntireColumn</B>, <B>EntireRow</B>,
<B>Range</B>, and <B>Rows</B>.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H208">Looping on a Range of Cells</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex21"></a>
<P>
There are several different ways to loop on the cells in a range.
The examples in this section show the <B>For Each...Next</B> statement
and the <B>Do...Loop</B> statement applied to looping on a range
of cells.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Using For Each...Next</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex22"></a>
<P>
The recommended way to loop on the cells in a range is to use
the <B>For&nbsp;Each...Next</B> loop, which is also the recommended
way to loop on the elements in a collection.
<P>
The following example shows how to loop through the range A1:D10
on Sheet1, setting any number whose absolute value is less than
0.01 to 0 (zero).

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub RoundToZero()
&#09;For Each r In Worksheets("Sheet1").Range("A1:D10").Cells
&#09;&#09;If Abs(r.Value) &lt; 0.01 Then
&#09;&#09;&#09;r.Value = 0
&#09;&#09;End If
&#09;Next r
End Sub

</code></pre></FONT>

<P>
Suppose that you want to modify this code to loop over a range
of cells that a user selects. One way of doing this is to use
the <B>InputBox</B> method to prompt the user to select a range
of cells. The <B>InputBox</B> method returns a <B>Range</B> object
that represents the selection. By using the <I>Type</I>
argument and error handling, you can ensure that the user selects
a valid range of cells before the input box is dismissed.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub RoundToZero()
&#09;Worksheets("Sheet1").Activate
&#09;On Error GoTo PressedCancel
&#09;Set r = Application.InputBox( _
&#09;&#09;&#09;prompt:="Select a range of cells", _
&#09;&#09;&#09;Type:=8)
&#09;On Error GoTo 0
&#09;For Each c In r.Cells
&#09;&#09;If Abs(c.Value) &lt; 0.01 Then
&#09;&#09;&#09;c.Value = 0
&#09;&#09;End If
&#09;Next c
&#09;Exit Sub

PressedCancel:
&#09;Resume
End Sub

</code></pre></FONT>

<P>
If you don't want the user to select the range, you may be able
to use the <B>CurrentRegion</B> property or the <B>UsedRange</B>
property to return a <B>Range</B> object. For example, if you
know that the data on Sheet1 begins at cell A1 and includes no
empty rows or columns, you can use the <B>CurrentRegion</B> property
to return the entire range automatically.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub RoundToZero()
&#09;Set r = Worksheets("Sheet1").Range("A1").CurrentRegion
&#09;For Each c In r.Cells
&#09;&#09;If Abs(c.Value) &lt; 0.01 Then
&#09;&#09;&#09;c.Value = 0
&#09;&#09;End If
&#09;Next c
End Sub

</code></pre></FONT>

<P>
The following two examples show two different ways to hide every
other column in the used range on Sheet1. The first example shows
a <B>For Each...Next</B> loop in which the <B>Column</B> property
of the object variable is tested.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub HideColumns()
&#09;Set r = Worksheets("Sheet1").UsedRange
&#09;For Each col In r.Columns
&#09;&#09;If col.Column Mod 2 = 0 Then
&#09;&#09;&#09;col.Hidden = True
&#09;&#09;End If
&#09;Next col
End Sub

</code></pre></FONT>

<P>
The second example shows a <B>For...Next</B> loop that tests the
loop counter.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub HideColumns()
&#09;Set r = Worksheets("Sheet1").UsedRange
&#09;For i = 1 To r.Columns.Count
&#09;&#09;If i Mod 2 = 0 Then
&#09;&#09;&#09;r.Columns(i).Hidden = True
&#09;&#09;End If
&#09;Next i
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Using Do...Loop</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex23"></a>
<P>
Occasionally, the <B>For Each...Next</B> loop isn't the best way
to loop on a range. Suppose that you have a column of data and
you want to write a macro that sorts the data and then deletes
rows that contain duplicate data. You could try to use a <B>For
Each...Next</B> loop, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub BuggyRemoveDuplicates()&nbsp;&nbsp;&nbsp; ' DON'T USE THIS CODE!
&#09;Worksheets("Sheet1").Range("A1").Sort _
&#09;&#09;key1:=Worksheets("Sheet1").Range("A1")
&#09;Set r = Worksheets("Sheet1").Range("A1").CurrentRegion.Columns("A")
&#09;For Each c In r.Cells
&#09;&#09;If c.Offset(1, 0).Value = c.Value Then
&#09;&#09;&#09;c.Offset(1, 0).EntireRow.Delete
&#09;&#09;End If
&#09;Next c
End Sub

</code></pre></FONT>

<P>
Unfortunately, this code doesn't work correctly because the <B>Delete</B>
method is modifying the range on which <B>For Each...Next</B>
is looping. This causes duplicates not to be deleted in some cases.
<P>
A better solution is to use a <B>Do...Loop</B> structure, as shown
in the following example.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub GoodRemoveDuplicates()
&#09;Worksheets("Sheet1").Range("A1").Sort _
&#09;&#09;&#09;key1:=Worksheets("Sheet1").Range("A1")
&#09;Set currentCell = Worksheets("Sheet1").Range("A1")
&#09;Do While Not IsEmpty(currentCell)
&#09;&#09;Set nextCell = currentCell.Offset(1, 0)
&#09;&#09;If nextCell.Value = currentCell.Value Then
&#09;&#09;&#09;currentCell.EntireRow.Delete
&#09;&#09;End If
&#09;&#09;Set currentCell = nextCell
&#09;Loop
End Sub

</code></pre></FONT>

<P>
The loop tests the object variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">currentCell</FONT>,
exiting when it encounters an empty cell at the bottom of the
column of data. You could build an equivalent loop by testing
the value in <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">currentCell</FONT>
against an empty string, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>&#09;Do While currentCell.Value &lt;&gt; ""
&#09;&#09;' Code to run on cells with values
&#09;Loop

</code></pre></FONT>

<P>
In either case, don't forget to increment the cell at the bottom
of the <B>Do...Loop</B> structure (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Set
currentCell = nextCell</FONT>, for example).
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H209">Using the Address Property to Debug Range
Object Code</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex24"></a>
<P>
You can apply the <B>Address</B> property to any <B>Range</B>
object. The <B>Address</B> property returns the cell address of
a range, as a string. The following example shows how to use the
<B>Address</B> property to debug the HideColumns procedure.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub HideColumns()
&#09;Set r = Worksheets("Sheet1").UsedRange
&#09;MsgBox r.Address  ' debugging only!
&#09;For i = 1 To r.Columns.Count
&#09;&#09;If i Mod 2 = 0 Then
&#09;&#09;&#09;r.Columns(i).Hidden = True
&#09;&#09;&#09;MsgBox r.Columns(i).Address  ' debugging only!
&#09;&#09;End If
&#09;Next i
End Sub

</code></pre></FONT>

<P>
You can also set <I>watch expressions</I> instead
of using message boxes. For the preceding example, you could set
two watch expressions&nbsp;&#151; <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">r.Address</FONT>
and <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">r.Columns(i).Address</FONT>&nbsp;&#151;
and then examine the values of the watch expressions in the <B>Immediate</B>
window. For more information about debugging, see Chapter 14,
"<a href="014.htm">Debugging and Error Handling</A>."
<P>
<A NAME="PG004C4"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H104">Working with Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex25"></a>
<P>
If you've used Visual Basic (Standard, Professional, or Enterprise
Edition), you're familiar with event&#173;driven programming;
most of your Visual Basic code was probably written to respond
to events, such as when the user clicks a button or when a form
is loaded. In Microsoft Excel, you may have used properties such
as <B>OnSheetActivate</B> or <B>OnEntry</B> to cause a macro to
run when a sheet is activated or changed. This is also event&#173;driven
programming. Microsoft Excel&nbsp;97 expands the available list
of events and adds event procedures that receive arguments.
<P>
With Microsoft Excel&nbsp;97, you can write event procedures at
the worksheet, chart, workbook, or application level. For example,
the Activate event occurs at the sheet level, and the SheetActivate
event is available at both the workbook and application levels.
The SheetActivate event for a workbook occurs when any sheet in
that workbook is activated. At the application level, the SheetActivate
event occurs when any sheet in any open workbook is activated.
<P>
<a name="dex26"></a>
<P>
Worksheet and workbook event procedures are created by default
for any open worksheet, chart sheet, or workbook. To write event
procedures for an embedded chart or for the application, you must
create a new object using the <B>WithEvents</B> keyword in a class
module. You can also use a class module to create event procedures
that can be used for more than one worksheet or workbook. For
more information , see "<A HREF="#CH004H216">Using Class Modules with Events</A>" later in this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H210">Enabling or Disabling Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex27"></a>
<P>
Use the <B>EnableEvents</B> property to enable or disable events.
For example, using the <B>Save</B> method to save a workbook causes
the BeforeSave event to occur. You can prevent this by setting
the <B>EnableEvents</B> property to <B>False</B> before you call
the <B>Save</B> method, as in the following example.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application. = False
ActiveWorkbook.Save
Application. = True

</code></pre></FONT>


<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H211">Using Events on Sheets</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex28"></a>
<P>
Events on sheets are enabled by default. To view the event procedures
for a particular sheet, use either of the following techniques:
<P>

<UL>
<P>
<LI>Right&#173;click the sheet
tab, and then click <B>View Code</B> on the shortcut menu. In
the <B>Procedure</B> box, click the event name.
<P>
<LI>On
the <B>Tools</B> menu, point to <B>Macro</B> and then click <B>Visual
Basic Editor</B>. Select the sheet in the Project Explorer, and
then either click the <B>View Code</B> button or click <B>Code</B>
on the <B>View</B> menu. In the <B>Object</B> box, click either
<B>Worksheet</B> or <B>Chart</B>, and then click the event name
in the <B>Procedure</B> box.
<P>
<A NAME="CH004H212"></A>
</UL>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Worksheet Events</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex29"></a>
<P>
Worksheet&#173;level events occur when the user activates a worksheet
or changes a worksheet cell, as shown in the following table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Event</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Activate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user activates the sheet. Use this event instead of the <B>OnSheetActivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BeforeDoubleClick</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user double-clicks a worksheet cell. Use this event instead of the <B>OnDoubleClick </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BeforeRightClick</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user right-clicks a worksheet cell.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Calculate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user recalculates the worksheet. Use this event instead of the <B>OnCalculate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Change</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user changes a cell formula. Use this event instead of the <B>OnEntry </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Deactivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the sheet is active and the user activates a different sheet. Doesn't occur when the user shifts the focus from one window to another window showing the same sheet. Use this event instead of the <B>OnSheetDeactivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SelectionChange</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user selects a worksheet cell.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about an event, see the corresponding Help
topic.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Examples</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The following example adjusts the size of columns A through F
whenever the worksheet is recalculated.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Worksheet_Calculate()
&#09;Columns("A:F").AutoFit
End Sub

</code></pre></FONT>

<P>
Some events can be used to substitute an action for the default
application behavior, or to make a small change to the default
behavior. The following example traps the right&#173;click event
and adds a new menu item to the shortcut menu for cells B1:B10.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Cancel As Boolean)
&nbsp;&nbsp;&nbsp; For Each icbc In Application.CommandBars("cell").Controls
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  If icbc.Tag = "brccm" Then icbc.Delete
&nbsp;&nbsp;&nbsp; Next icbc
&nbsp;&nbsp;&nbsp; If Not Application.Intersect(Target, Range("b1:b10")) Is Nothing Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;With Application.CommandBars("cell").Controls _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Add(Type:=msoControlButton, before:=6, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temporary:=True)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Caption = "New Context Menu Item"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .OnAction = "MyMacro"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Tag = "brccm"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  End With
&nbsp;&nbsp;&nbsp; End If
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H213">Chart Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex30"></a>
<P>
Like worksheet&#173;level events, chart&#173;level events occur
when the user activates or changes a chart, as shown in the following
table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Event</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Activate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user activates the chart sheet (doesn't work with embedded charts). Use this event instead of the <B>OnSheetActivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BeforeDoubleClick</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user double-clicks the chart. Use this event instead of the <B>OnDoubleClick </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BeforeRightClick</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user right-clicks the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Calculate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user plots new or changed data on the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Deactivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the sheet is active and the user activates a different sheet. Doesn't occur when the user shifts the focus from one window to another window showing the same sheet. Use this event instead of the <B>OnSheetDeactivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">DragOver</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user drags data over the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">DragPlot</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user drags a range of cells over the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">MouseDown</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user clicks a mouse button while the pointer is positioned over the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">MouseMove</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user moves the pointer over the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">MouseUp</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user releases a mouse button while the pointer is positioned over the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Resize</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user changes the size of the chart.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Select</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user selects a chart element.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SeriesChange</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user changes the value of a chart data point.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about an event, see the corresponding Help
topic.
<P>
<a name="dex31"></a>
<P>
Events for chart sheets are available by default in the Visual
Basic Editor. To write event procedures for an embedded chart,
you must create a new object using the <B>WithEvents</B> keyword
in a class module. For more information, see "<A HREF="#CH004H216">Using Class Modules with Events</A>" later in this chapter.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Example</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The following example changes a point's border color when the
user changes the point's value.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Chart_SeriesChange(ByVal SeriesIndex As Long, _
&#09;&#09;ByVal PointIndex As Long)
&nbsp;&nbsp;&nbsp; Set p = ActiveChart.SeriesCollection(SeriesIndex).Points(PointIndex)
&nbsp;&nbsp;&nbsp; p.Border.ColorIndex = 3
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H214">Workbook Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex32"></a>
<P>
Workbook events occur when the user changes a workbook or any
sheet in the workbook.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Event</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Activate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user activates the workbook.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">AddInInstall</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user installs the workbook as an add&#173;in. Use this event instead of the Auto_Add macro.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">AddInUninstall</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user uninstalls the workbook as an add-in. Use this event instead of the Auto_Remove macro.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BeforeClose</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs before the workbook closes. Use this event instead of the Auto_Close macro.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BeforePrint</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs before the workbook is printed.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BeforeSave</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs before the workbook is saved. Use this event instead of the <B>OnSave </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Deactivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the workbook is active and the user activates a different workbook.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">NewSheet</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs after the user creates a new sheet.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Open</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user opens the workbook. Use this event instead of the Auto_Open macro.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetActivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user activates a sheet in the workbook. Use this event instead of the <B>OnSheetActivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetBeforeDoubleClick</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user double-clicks a worksheet cell (not used with chart sheets). Use this event instead of the <B>OnDoubleClick </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetBeforeRightClick</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user right-clicks a cell on a worksheet (not used with chart sheets).</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetCalculate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs after the user recalculates a worksheet (not used with chart sheets). Use this event instead of the <B>OnCalculate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetChange</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user changes a cell formula (not used with chart sheets). Use this event instead of the <B>OnEntry </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetDeactivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user activates a different sheet in the workbook. Use this event instead of the <B>OnSheetDeactivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetSelectionChange</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user changes the selection on a worksheet (not used with chart sheets).</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WindowActivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user shifts the focus to any window showing the workbook. Use this event instead of the <B>OnWindow </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WindowDeactivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user shifts the focus away from any window showing the workbook. Use this event instead of the <B>OnWindow </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WindowResize</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user opens, resizes, maximizes, or minimizes any window showing the workbook.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about an event, see the corresponding Help
topic.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Example</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The following example maximizes the Microsoft Excel application
window when the workbook is opened.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub Workbook_Open()
&#09;Application.WindowState = xlMaximized
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H215">Application Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex33"></a>
<P>
Application events occur when the user creates or opens a workbook
or when the user changes any sheet in any open workbook.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Event</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">NewWorkbook</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user creates a new workbook.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetActivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user activates a sheet in an open workbook. Use this event instead of the <B>OnSheetActivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetBeforeDoubleClick</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user double-clicks a worksheet cell in an open workbook (not used with chart sheets). Use this event instead of the <B>OnDoubleClick </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetBeforeRightClick</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user right-clicks a worksheet cell in an open workbook (not used with chart sheets).</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetCalculate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs after the user recalculates a worksheet in an open workbook (not used with chart sheets). Use this event instead of the <B>OnCalculate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetChange</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user changes a cell formula in an open workbook (not used with chart sheets). Use this event instead of the <B>OnEntry </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetDeactivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user deactivates a sheet in an open workbook. Use this event instead of the <B>OnSheetDeactivate </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SheetSelectionChange</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user changes the selection on a sheet in an open workbook.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WindowActivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user shifts the focus to an open window. Use this event instead of the <B>OnWindow </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WindowDeactivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user shifts the focus away from an open window. Use this event instead of the <B>OnWindow </B>property.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WindowResize</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user resizes an open window.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookActivate</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user shifts the focus to an open workbook.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookAddInInstall</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user installs a workbook as an add-in.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookAddInUninstall</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user uninstalls a workbook as an add-in.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookBeforeClose</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs before an open workbook is closed.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookBeforePrint</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs before an open workbook is printed.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookBeforeSave</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs before an open workbook is saved.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookDeactivate</FONT></FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user shifts the focus away from an open workbook.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookNewSheet</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user adds a new sheet to an open workbook.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">WorkbookOpen</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Occurs when the user opens a workbook.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about an event, see the corresponding Help
topic.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH004H216">Using Class Modules with Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex34"></a>
<P>
Unlike sheet events, embedded charts and the <B>Application</B>
object don't have events enabled by default. Before you can use
events with an embedded chart or with the <B>Application</B> object,
you must create a new class module and declare an object of type
<B>Chart</B> or <B>Application</B> with events. You use the <B>Class
Module</B> command (<B>Insert</B> menu) in the Visual Basic Editor
to create a new class module.
<P>
To enable the events of the <B>Application</B> object, you'd add
the following declaration to the class module.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public WithEvents App As Application

</code></pre></FONT>
<P>
After the new object has been declared with events, it appears
in the <B>Object</B> box in the class module, and you can write
event procedures for the new object. (When you select the new
object in the <B>Object</B> box, the valid events for that object
are listed in the <B>Procedure</B> box.)
<P>
Before the procedures will run, however, you must connect the
declared object in the class module to the <B>Application</B>
object. You can do this from any module by using the following
declaration (where "EventClass" is the name of the class
module you created to enable events).

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public X As New EventClass

</code></pre></FONT>
<P>
After you've created the <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">X</FONT>
object variable (an instance of the EventClass class), you can
set the App object of the EventClass class equal to the Microsoft
Excel <B>Application</B> object.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub InitializeApp()
&#09;Set X.App = Application
End Sub

</code></pre></FONT>

<P>
After you run the InitializeApp procedure, the App object in the
EventClass class module points to the Microsoft Excel <B>Application</B>
object, and the event procedures in the class module will run
whenever the events occur.
<P>
Although this may seem like a lot of work, one advantage is that
you can use the same event procedure for many objects. For example,
suppose that you declare an object of type <B>Chart</B> with events
in a class module, as follows.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public WithEvents cht As Chart

</code></pre></FONT>
<P>
You can then use the following code to cause the event procedures
to run whenever an event occurs for either chart one or chart
two.

<FONT SIZE=3 FACE="COURIER NEW, COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim C1 As New EventClass
Dim C2 As New EventClass

Sub InitializeCharts
&#09;Set C1.cht = Worksheets(1).ChartObjects(1).Chart
&#09;Set C2.cht = Worksheets(1).ChartObjects(2).Chart
End Sub

</code></pre></FONT>

<P>
You can declare <B>Worksheet</B> or <B>Workbook</B> objects with
events in a class module and use the events in the new class with
several sheets, in addition to the default event procedures. You
might use this technique to write an Activate event handler that
runs only when either sheet one or sheet five is activated. Or
you can use a <B>Chart</B> object declared in a class module to
write an event handler for both embedded charts and chart sheets.
<BR>

</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>
</FONT>
</FONT></BODY>



</HTML>

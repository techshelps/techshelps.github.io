<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 12: ActiveX Controls and Dialog Boxes</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 12</B></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>ActiveX Controls and Dialog Boxes</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B><A NAME="MT1PG05p5">Contents</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<BR>
<LI><A HREF="#CH012H101">Designing Custom
Dialog Boxes</A>
<BR>
<LI><A HREF="#CH012H102">Using Custom Dialog
Boxes</A>
<BR>
<LI><A HREF="#CH012H103">Working with Controls
on a Document, Sheet, or Slide</A>
<BR>
<LI><A HREF="#CH012H104">Working with Controls
Programmatically</A>
</UL>

<P>
<A NAME="CH012H101">Microsoft Excel&nbsp;97, Word&nbsp;97, and
PowerPoint&nbsp;97 share powerful new tools for creating custom
dialog boxes. Because these applications use the same dialog box
tools in the Visual Basic Editor, you only have to learn how to
create custom dialog boxes one way for all three applications,
and you can share these dialog boxes across applications. </A>
<P>
After you've created a custom dialog box, you can add ActiveX
controls (previously referred to as OLE controls) to it. You can
also place ActiveX controls directly on a document, worksheet,
or slide. To determine how custom dialog boxes and controls respond
to specific user actions&nbsp;&#151; for example, clicking
a control or changing its value&nbsp;&#151; you write event
procedures that will run whenever a specific event occurs.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>For
information about designing forms in Microsoft Access, see <I>Building
Applications with Microsoft Access&nbsp;97</I>, available in Microsoft
Access&nbsp;97 and Microsoft Office&nbsp;97, Developer Edition.
An online version of <I>Building Applications with Microsoft Access&nbsp;97</I>
is available in the Value Pack on CD&#173;ROM in Microsoft Access&nbsp;97
and Microsoft Office&nbsp;97, Professional Edition. For information
about designing forms in Microsoft Outlook&nbsp;97, see <I>Building Microsoft Outlook&nbsp;97 Applications</I> by Peter Krebs, available
from Microsoft Press.
<P>
<A NAME="PG012C1"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H101">Designing Custom Dialog Boxes</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
To create a custom dialog box, you must create a form (also called
a <I>UserForm</I>) to contain controls, add controls
to the form, set properties for the controls, and write code that
responds to form and control events.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>When
you're in the Visual Basic Editor designing your dialog box, you're
in design mode. In design mode, you can edit controls. Controls
don't respond to events in design mode. When you run your dialog
box&nbsp;&#151; that is, when you display it the way users
will see it&nbsp;&#151; you're in run mode. Controls do respond
to events in run mode.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H201">Creating a New Dialog Box</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex1"></a>
<P>
Every custom dialog box in your project is a form, or UserForm.
A new UserForm contains a title bar and an empty area in which
you can place controls.
<P>
<FONT COLOR=#0000FF><IMG SRC="Proced.gif"><B>To
create a new UserForm</B></FONT>
<P>

<UL>
<P>
<LI>On the Insert menu in the Visual Basic Editor, click UserForm.
</UL>

<P>
A new, empty UserForm is displayed. Use the Properties
window to set properties for the UserForm&nbsp;&#151; that
is, to change the name, behavior, and appearance of the form.
For example, to change the caption on a form, set the Caption
property. For more information about the Properties window and
the Visual Basic Editor, see Chapter 1, "<a href="001.htm">Programming Basics</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H202">Adding Controls to a Custom Dialog Box</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex2"></a>
<P>
Use the <B>Toolbox</B> to add controls to a custom dialog box.
Click <B>Toolbox</B> on the <B>View</B> menu to display the <B>Toolbox</B>
if it's not already visible. To see the name of a particular control
in the <B>Toolbox</B>, position the mouse pointer over that control.

<P>
To add a control to a custom dialog box, find the control you
want to add in the <B>Toolbox</B>, drag the control onto the form,
and then drag one or more of the control's adjustment handles
until the control is the size and shape you want. For more information
about a specific type of control, add the control to a form, select
the control, and then press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F1</FONT>.
<P>
<A NAME="CVxvbh005doc008005"><FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Dragging
a control (or a number of "grouped" controls) from a
custom dialog box back to the Toolbox creates a template of that
control, which you can reuse at any time. This is a useful feature
for implementing a standard "look and feel" for your
applications. </A>
<P>
<A NAME="CVxvbh005doc008007">After you've added controls to the
form, use the commands on the <B>Format</B> menu or the buttons
on the <B>UserForm</B> toolbar in the Visual Basic Editor to adjust
the alignment and spacing of the controls.</A> Use the <B>Tab
Order</B> dialog box (<B>View</B> menu) to set the tab order of
the controls on the form. 
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip</FONT></B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">&nbsp;&nbsp;&nbsp;The
Visual Basic Editor sets the <B>TabIndex</B> property for the
controls to determine the tab order. If you want to prevent users
from tabbing to a particular control, you can set the <B>TabStop</B>
property to <B>False</B> for that control. To do this, right&#173;click
the control, and then click <B>Properties</B> to display the Properties
window.</FONT>
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
1: Design and run a custom dialog box</FONT></B>
<P>

<OL>
<P>
<LI>Create a new UserForm.
<P>
<LI>On the UserForm, insert a <B>Frame</B> control. 
<P>
<LI>In the <B>Frame</B> control, insert three <B>OptionButton</B> controls.
<P>
<LI>Click <B>Run Sub/UserForm</B> on the <B>Run</B> menu. 
<P>
The custom dialog box is displayed. The option buttons
should work when you click them. Because you first created a Frame
control to contain the option buttons, clicking one option button
automatically turns all the other ones off in that control. 
<P>
<LI>Click the <B>Close</B> button on the UserForm title bar to exit run
mode and return to design mode.
</OL>

<A NAME="CH012H203"></A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Setting Control and Dialog Box Properties at Design Time</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex3"></a>
<P>
You can set some control properties at design time (before any
macros are run). In design mode, right&#173;click a control and
then click <B>Properties</B> on the shortcut menu to display the
<B>Properties</B> window. Property names are listed in the left&#173;hand
column in the window, and property values are listed in the right&#173;hand
column. You set a property value by typing the new value in the
space to the right of the property name.
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B>You
can view the properties of an object either sorted alphabetically
(on the <B>Alphabetic</B> tab in the <B>Properties</B> window)
or sorted into functional categories (on the <B>Categorized</B>
tab).
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
2: Set control properties in design mode</FONT></B>
<P>

<OL>
<P>
<LI>Create a new UserForm.
<P>
<LI>Add
an <B>Image</B> control, a <B>CommandButton</B> control, and a
few other controls to the UserForm.
<P>
<LI>Right&#173;click
the image you added, click <B>Properties</B> on the shortcut menu
to display the <B>Properties</B> window for the image, and then
find <B>Picture</B> (for the <B>Picture</B> property) in the list
of properties. To browse for files that you can set this property
to, click the ellipsis button (&#133;) in the space to the right
of <B>Picture</B>. Select a file in the <B>Load Picture</B> dialog
box, and then click <B>OK</B>.
<P>
<LI>Click the <B>CommandButton</B>
you added; the list of properties in the <B>Properties</B> window
changes to the properties of command buttons. Find <B>Caption</B>
and type <B>Send Order</B> in the space to the right to set the
value of the <B>Caption</B> property. The caption is the text
that appears on the face of the command button.
<P>
<LI>In
the list of properties for the command button, type <B>CmdSendOrder</B>
in the space to the right of <B>(Name)</B>. This sets the name
you use to refer to the button in your code.
<P>
<LI>In
the list of properties for the command button, type <B>Click here
to send order</B> in the space to the right
of <B>ControlTipText</B>. When the user positions the mouse pointer
over this command button in run mode, this tip will appear, indicating
what the button does.
<P>
<LI>In the list of properties
for the command button, type <B>s</B> in the space to the right
of <B>Accelerator</B>. Notice that the "S" in the "Send
Order" caption on the command button is now underlined. (If
you choose as an accelerator key a letter that isn't in the control
caption, there will by no visual indication that the control has
an accelerator key.) While any dialog box is running, the user
can press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ALT+</FONT>the accelerator key (in this
case, "S") to move the focus directly to the control.

<P>
<LI>On the <B>Run</B> menu, click <B>Run Sub/UserForm</B>,
and then move the focus to a control other than the <B>Send Order</B>
button. You can press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ALT+S</FONT> to move the focus
to the <B>Send Order</B> button. 
<P>
<LI>Click the
<B>Close</B> button on the UserForm title bar to exit run mode
and return to design mode.
<P>
</OL>

<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B>To
set a property for several controls at the same time, select the
controls and then change the value for that property in the <B>Properties</B>
window.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
3: Set UserForm properties in design mode</FONT></B>
<P>

<OL>
<P>
<LI>Click anywhere in a UserForm
except on a control to select the UserForm.
<P>
<LI>In
the <B>Properties</B> window, type <B>Book Order Form</B> in the
space to the right of <B>Caption</B>.
<P>
<LI>In the
space to the right of <B>BackColor</B> in the list of properties,
click the arrow to see a set of values from which to choose. Click
the <B>Palette</B> tab, and then click the color you want to set
as the background color for the dialog box.
<P>
<LI>To
see the results of your new settings, run the dialog box. Click
the <B>Close</B> button on the title bar to return to design mode.
<P>
<A NAME="CH012H204"></A>
</OL>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Creating Tabs in Dialog Boxes</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex4"></a>
<P>
If you need for a single dialog box to handle a large number of
controls that can be sorted into categories, you can create a
dialog box with two or more tabs and then place different sets
of related controls on different tabs in the dialog box. To create
a dialog box with tabs, add a <B>MultiPage</B> control to the
dialog box and then add controls to each tab (or <I>page</I>).
To add, remove, rename, or move a page in a <B>MultiPage</B> control,
right&#173;click one of the pages in design mode, and then click
a command on the shortcut menu.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Don't
confuse MultiPage controls with TabStrip controls. The pages (or
tabs) of a MultiPage control contain a unique set of controls
that you add during design time to each page. Using a TabStrip
control, which can look like a series of tabs or buttons, you
can modify the values of a shared set of controls at run time.
For information about using TabStrip controls, see "<A HREF="#CH012H206">Displaying a Custom Dialog Box</A>" later in this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H205">Writing Code to Respond to Dialog Box
and Control Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex5"></a>
<P>
Each form or control recognizes a predefined set of events, which
can be triggered either by the user or by the system. For example,
a command button recognizes the Click event that occurs when the
user clicks that button, and a form recognizes the Initialize
event that occurs when the form is loaded.
To specify how a form or control should respond to events, you
write <I>event procedures.</I>
<P>
To write an event procedure for a form or control, open the <B>Code</B> window by double&#173;clicking the UserForm or control object, and then click the event name in the <B>Procedure</B> box (in the upper&#173;right corner of the window. 
Event procedures include the name of the UserForm or control. For example, the name of the Click event procedure for the command button Command1 is Command1_Click. For more information about writing event procedures, see Chapter 1, "<a href="001.htm">Programming Basics."</A>
<P>
<A NAME="CVxvbh005doc013008"><B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
4: Write and run an event procedure for a command button</FONT></B></A>
<P>

<OL>
<P>
<LI>Create a new UserForm,
and then add a <B>CommandButton</B>, a <B>CheckBox</B>, and a
<B>ComboBox</B> control to it.
<P>
<LI>Click the command
button. In the <B>Properties</B> window, change the code name
of the command button by typing <B>CmdSendOrder</B> in the space
to the right of <B>(Name)</B>.
<P>
<LI>Double&#173;click
the command button to view the code associated with it. By default,
the Click event procedure will be displayed in the <B>Code</B>
window.
<P>
<LI>Add a statement to the CmdSendOrder_Click
procedure to display a simple message box (use the following example).


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub CommandButton1_Click()
&nbsp;&nbsp;&nbsp; MsgBox "I've been clicked once"
End Sub

</code></pre></FONT>

<P>
<LI>Run the dialog box to see the results. The CmdSendOrder_Click event
procedure will run every time this command button is clicked in
run mode. Because you haven't written code for the other controls
yet, they don't respond to your mouse actions. Click the <B>Close</B>
button on the title bar to return to design mode.
<P>
</OL>

<P>
To see all the events that command buttons recognize, click the
down arrow next to the <B>Procedure</B> box in the <B>Code</B>
window. Events that already have procedures written for them appear
bold. Click an event name in the list to display its associated
procedure.
<P>
To see the events for a different control on the same UserForm
or for the UserForm itself, click the object name in the <B>Object</B>
box in the <B>Code</B> window, and then click the arrow next to
the <B>Procedure</B> box.
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B>If
you add code to an event procedure before you change the code
name of the control, your code will still have its previous code
name in any procedures it's used in.
For example, assume that you add code to the Click event for the
Command1 button and then rename the control as Command2. When
you double&#173;click Command2, you won't see any code in the
Click event procedure; You'll need to move code from Command1_Click
to Command2_Click. To simplify development, it's a good idea
to name your controls with the names you really want for them
before you write any code.
<P>
<A NAME="PG012C2"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H102">Using Custom Dialog Boxes</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
To exchange information with the user by way of a custom dialog
box, you must display the dialog box to the user, respond to user
actions in the dialog box, and, when the dialog box is closed,
get information that the user entered in it.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H206">Displaying a Custom Dialog Box</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex6"></a>
<P>
When you want to display a custom dialog box to yourself for testing
purposes, you click <B>Run Sub/UserForm</B> on the <B>Run</B>
menu in the Visual Basic Editor.<A NAME="CVxvbh005doc014005">
However, when you want to display a dialog box to a user, you
use the <B>Show</B> method. The following example displays the
dialog box named "UserForm1."</A>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>UserForm1.Show

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H207">Getting and Setting Properties at Run
Time</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<a name="dex7"></a>
If you want to set default values for controls in a custom dialog
box, modify controls while the dialog box is visible, and have
access to the information that a user enters in the dialog box,
you must set and read the values of control properties at run
time.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Setting Initial Values for Controls</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
<A NAME="CVxvbh005doc012018">To set the initial value, or <I>default
value</I>, that a control will have every time the dialog
box that contains it is displayed, add code to the Initialize
event procedure for the UserForm that contains the control that
sets the value for the control. When you display the dialog box,
the Initialize event will be triggered, and the control's value
will be initialized. </A>
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
5: Write and run an Initialize event procedure for a UserForm</FONT></B>

<OL>
<P>
<LI>Create a new UserForm,
and then add a <B>TextBox</B>, a <B>ListBox</B>, and a <B>CheckBox</B>
control to it.
<P>
<LI>Click the text box. In the <B>Properties</B>
window, type <B>txtCustomerName</B> in the space to the right
of <B>(Name)</B> to set the code name of the text box. Then change
the code name of the list box to "lstRegions," change
the code name of the check box to "chkSendExpress,"
and change the code name of the UserForm itself to "frmPhoneOrders."
<P>
<LI>Double&#173;click the UserForm to display the
<B>Code</B> window. With <B>UserForm</B> selected in the <B>Object</B>
box of the <B>Code</B> window, select <B>Initialize</B> in the
<B>Procedure</B> box. Complete the UserForm_Initialize procedure,
as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub UserForm_Initialize()
&nbsp;&nbsp;&nbsp; With frmPhoneOrders
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .txtCustomerName.Text = "Grant Clarridge"&nbsp;&nbsp;&nbsp;'Sets default text
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .chkSendExpress.Value = True&nbsp;&nbsp;&nbsp;'Checks check box by default
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; With .lstRegions
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AddItem "North"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  'These lines populate the list box
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AddItem "South"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AddItem "East"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AddItem "West"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ListIndex = 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Selects the 4th item in the list
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With
&nbsp;&nbsp;&nbsp; End With
End Sub

</code></pre></FONT>

<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Although
collections in the Microsoft Excel, Word, and PowerPoint object
models are 1&#173;based, arrays and collections associated with
forms are 0&#173;based. Therefore, to select the fourth item in
the list in the preceding example, you must set the ListIndex
property to 3.
<P>
<LI>Run the dialog box to see the results. Click the <B>Close</B> button on the title bar to return to design mode.
</OL>

<P>
<TABLE WIDTH=80% CELLPADDING=15 BORDER=1 CELLSPACING=0 BORDERCOLOR=#0000FF><TR BGCOLOR=#FFFFFF><TD>
<FONT SIZE=2 FACE="VERDANA,ARIAL,HELVETICA" FACE="Verdana, Arial, Helvetica"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>Use Me to Simplify Event Procedure Code</B>
<P>
In the preceding example, you can use the keyword <B>Me</B> instead
of the code name of the UserForm. That is, you can replace the
statement <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">With frmPhoneOrders</FONT>
with the statement <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">With
Me</FONT>. The <B>Me</B> keyword used in code for a UserForm
or a control on the UserForm represents the UserForm itself. This
technique lets you use long, meaningful names for controls while
still making code easy to write. Many examples in this chapter
demonstrate how to use <B>Me</B> this way.
</FONT></TD></TR>
</TABLE>
<P>
If you want to set the initial value (default value) for a control
but you don't want that to be the initial value every time you
call the dialog box, you can use Visual Basic code to set the
control's value before you display the dialog box that contains
the control. The following example
uses the <B>AddItem</B> method to add data to a list box, sets
the value of a text box, and displays the dialog box that contains
these controls.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub GetUserName()
&#09;With UserForm1
&#09;&#09;.lstRegions.AddItem "North"
&#09;&#09;.lstRegions.AddItem "South"
&#09;&#09;.lstRegions.AddItem "East"
&#09;&#09;.lstRegions.AddItem "West"
&#09;&#09;.txtSalesPersonID.Text = "00000"
&#09;&#09;.Show
&#09;&#09;' ...
&#09;End With
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Setting Values to Modify Controls While a Dialog Box Is Running
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
You can set properties and apply methods of controls and the UserForm
while a dialog box is running. The
following example sets the text (the <B>Text</B> property) of
TextBox1 to "Hello."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>TextBox1.Text = "Hello"

</code></pre></FONT>

<P>
By setting control properties and applying control methods at
run time, you can make changes in a running dialog box in response
to a choice the user makes. For example, if you want a particular
control to be available only while a particular check box is selected,
you can write code that enables the control whenever the user
selects the check box and disables it whenever the user clears
the check box. 
<P>
<B><A NAME="MT1PG11p216">Enabling a Control</A></B>


<P>
You can use the <B>Enabled</B> property of a control to prevent
the user from making changes to the control unless a specified
condition is met. For example, a common use of the <B>Enabled</B>
property is in an event procedure for a text box that enables
the <B>OK</B> button only when the user has entered a value that
conforms to a standard pattern.
<P>
Setting the <B>Enabled</B> property is often used to make a set
of option buttons available only while the user has a particular
check box selected, as demonstrated in the following practice.
This code is included in the Change event procedure for the check
box, and it runs whenever the state of the check box (checked
or cleared) changes.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
6: Enable and disable controls during run time</FONT></B>
<P>

<OL>
<P>
<LI>Create a new UserForm,
and then add a <B>CheckBox</B> control to it. Add a <B>Frame</B>
control to the UserForm, and then place three <B>OptionButton</B>
controls within the frame.
<P>
<LI>Double&#173;click
the check box to switch to the <B>Code</B> window. With <B>CheckBox1</B>
selected in the <B>Object</B> box in the <B>Code</B> window, click
<B>Change</B> in the <B>Procedure</B> box. Complete the CheckBox1_Change
procedure as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub CheckBox1_Change()
&nbsp;&nbsp;&nbsp; With Me
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If .CheckBox1.Value = True Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OptionButton1.Enabled = False
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OptionButton2.Enabled = False
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OptionButton3.Enabled = False
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OptionButton1.Enabled = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OptionButton2.Enabled = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OptionButton3.Enabled = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
&nbsp;&nbsp;&nbsp; End With
End Sub

</code></pre></FONT>

<P>
<LI>Run the dialog box; select
and clear the check box to see how changing the state of the check
box enables or disables the three option buttons. Click the <B>Close</B>
button on the title bar to return to design mode.

<P>
<A NAME="MT1PG11p226"></A>
</OL>

<P>
<B>Setting the Focus to a Control</B>


<P>
You can set the focus to a control in a dialog box by using the
<B>SetFocus</B> method of that control (the control with the focus
is the one that responds to keyboard input from the user).
<P>
<A NAME="MT1PG11p230"><B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
7: Set the control focus during run time</FONT></B></A>
<P>

<OL>
<P>
<LI>Create a new UserForm,
and then add a <B>CheckBox</B>, an <B>Image</B>, and a few other
controls to it. In the <B>Properties</B> window, set the <B>Picture</B>
property of the image to display a graphic.
<P>
<LI>Double&#173;click the image to switch to the <B>Code</B> window.
With <B>Image1</B> selected in the <B>Object</B> box in the <B>Code</B>
window, select <B>Click</B> in the <B>Procedure</B> box. Complete
the Image1_Click procedure as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Image1_Click()
&nbsp;&nbsp;&nbsp; Me.CheckBox1.SetFocus
End Sub

</code></pre></FONT>

<P>
<LI>Run the dialog box. Give the focus to a control other than CheckBox1.
When you click Image1, CheckBox1 is given the focus (a dotted
rectangle surrounds the check box, and you can press the SPACEBAR
to select or clear the check box). Click the <B>Close</B> button
on the title bar to return to design mode.
</OL>

<P>
<B>Displaying and Hiding Parts of a Dialog Box</B>


<P>
You can set properties or apply methods of the UserForm itself
while a dialog box is running. A common use for this is to expand
a UserForm to reveal additional options when the user clicks a
command button.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">Practice
8: Resize a UserForm during run time</FONT></B>
<P>

<OL>
<P>
<LI>Create a new UserForm.
The value of its <B>Height</B> property (the number to the right
of <B>Height</B> in the <B>Properties</B> window) should be 180.
<P>
<LI>Add
a <B>CommandButton</B> control at the top of the UserForm, and
then add a <B>CheckBox</B> control to the bottom of the UserForm
(the <B>Top</B> property for the check box should be at least
120).
<P>
<LI>Double&#173;click the UserForm to switch
to the <B>Code</B> window. With <B>UserForm</B> selected in the
<B>Object</B> box of the <B>Code</B> window, click <B>Initialize</B>
in the <B>Procedure</B> box. Complete the UserForm_Initialize
procedure as shown in the following example. Setting the height
of the dialog box to 120 points when it's initially displayed
specifies that the control at the bottom of the dialog box will
be hidden when the dialog box opens.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub UserForm_Initialize()
&nbsp;&nbsp;&nbsp; Me.Height = 120
End Sub

</code></pre></FONT>

<P>
<LI>In
the <B>Object</B> box in the <B>Code</B> window, click <B>CommandButton1</B>,
and then select <B>Click</B> in the <B>Procedure</B> box. Complete
the Image1_Click procedure as shown in the following example.
The example toggles the value of the <B>Height</B> property of
the UserForm between 120 points (the initial value) and 180 points.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub OptionButton1_Click()
&nbsp;&nbsp;&nbsp; With Me
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Height = 300 - .Height
&nbsp;&nbsp;&nbsp; End With
End Sub

</code></pre></FONT>

<P>
<LI>Run
the dialog box. To hide or display the bottom section of the dialog
box that contains the check box, click the command button. Click
the <B>Close</B> button on the title bar to return to design mode.


<P>
</OL>

<P>
<B>Browsing Data with a TabStrip Control</B>


<P>
You can use a <B>TabStrip</B> control to view different sets of
information in the same set of controls in a dialog box. For example,
if you want to use one area of a dialog box to display contact
information pertaining to a group of individuals, you can create
a <B>TabStrip</B> control and then add controls to contain the
name, address, and phone number of each person in the group. You
can then add a "tab" to the <B>TabStrip</B> control
for each member of the group. After doing this, you can write
code that, when you click a particular tab, updates the controls
to display data about the person identified on that tab.
<P>
<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip&nbsp;&nbsp;&nbsp;</FONT></B>To
add, remove, rename, or move a tab in a tab strip, right&#173;click
the tab strip in design mode, and then click an item on the shortcut
menu.
<P>
The following example changes the value of TextBox1 each time
a different tab of TabStrip1 is clicked. The index number of the
tab that was clicked is passed to the event procedure.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub TabStrip1_Click(ByVal Index As Long)
If Index = 0 Then
&nbsp;&nbsp;&nbsp; Me.TextBox1.Text = "7710 Betty Jane Lane"
ElseIf
Index = 1 Then
&nbsp;&nbsp;&nbsp; Me.TextBox1.Text = "9523 15th Ave NE"
End If
End Sub

</code></pre></FONT>



<P>
Keep in mind that forms&#173;related collections are 0&#173;based,
which means that the index of the first member in any collection
is 0 (zero).
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Don't
confuse TabStrip controls with MultiPage controls. Unlike a TabStrip
control, the pages (or tabs) of a MultiPage control contain a
unique set of controls that you add during design time to each
page. For information about using MultiPage controls, see "<A HREF="#CH012H204">Creating
Tabs in Dialog Boxes</A>" earlier in this chapter.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Data Validation</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
There are times when you'll want to make sure that the user only
enters a value of a specific type in a particular control. For
example, if you're using a <B>TextBox</B> control, which allows
the user to enter any data type, and if your code expects to get
a value of type <B>Integer</B> back from the text box, you should
write code that verifies that the user has entered a valid integer
before the dialog box closes. To verify that the user has entered
the appropriate type of data in a control, you can check the value
of the control either when the control loses the focus or when
the dialog box is closed. The following example will prevent the
user from moving the focus away from the txtCustAge text box without
first entering a valid number. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub txtCustAge_Exit(ByVal Cancel As MSForms.ReturnBoolean)
&nbsp;&nbsp;&nbsp; If Not IsNumeric(txtCustAge.Text) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Please enter numeric value for the customer's age."
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cancel = True
&nbsp;&nbsp;&nbsp; End If
End Sub

</code></pre></FONT>



<P>
Notice that you set the <I>Cancel</I> argument of
a control's Exit event procedure to <B>True</B> to prevent the
control from losing the focus.
<P>
To verify data before a dialog box closes, include code to check
the contents of one or more controls in the dialog box in the
same routine that unloads the dialog box. If a control contains
invalid data, use an <B>Exit Sub</B> statement to exit the procedure
before the <B>Unload</B> statement can be executed. The following
example runs whenever the user clicks the cmdOK command button.This
procedure prevents the user from closing the dialog box by using
the cmdOK button until the txtCustAge text box contains a number.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub cmdOK_Click()
&nbsp;&nbsp;&nbsp; If Not IsNumeric(txtCustAge.Text) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox "Please enter numeric value for the customer's age."
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; txtCustAge.SetFocus
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub
&nbsp;&nbsp;&nbsp; End If
&nbsp;&nbsp;&nbsp; custAge = txtCustAge.Text
&nbsp;&nbsp;&nbsp; Unload Me
End Sub

</code></pre></FONT>



<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Getting Values When the Dialog Box Closes</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Any data that a user enters in a
dialog box is lost when the dialog box is closed. If you return
the values of controls in a UserForm after the form has been unloaded,
you get the initial values for the controls rather than any values
the user may have entered.
<P>
If you want to save the data entered
in a dialog box by a user, you can do so by saving the information
to module&#173;level variables while the dialog box is still running.
The following example displays a dialog box and saves the data
that's been entered in it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>'Code in module to declare public variables
Public strRegion As String
Public intSalesPersonID As Integer
Public blnCancelled As Boolean

'Code in form
Private Sub cmdCancel_Click()
&#09;Module1.blnCancelled = True
&#09;Unload Me
End Sub

Private Sub cmdOK_Click()
&#09;'Save data 
&#09;intSalesPersonID = txtSalesPersonID.Text
&#09;strRegion = lstRegions.List(lstRegions.ListIndex)
&#09;Module1.blnCancelled = False
&#09;Unload Me
End Sub

Private Sub UserForm_Initialize()
&#09;Module1.blnCancelled = True
End Sub

'Code in module to display form
Sub LaunchSalesPersonForm()
&#09;frmSalesPeople.Show 
&#09;If blnCancelled = True Then 
&#09;&#09;MsgBox "Operation Cancelled!", vbExclamation 
&#09;Else 

&#09;&#09;MsgBox "The Salesperson's ID is: " &amp;
&#09;&#09;&#09;intSalesPersonID &amp; _
&#09;&#09;&#09;"The Region is: " &amp; strRegion
&#09;End If
End Sub

</code></pre></FONT>

<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H208">Closing a Custom Dialog
Box</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<P>
Dialog boxes are always displayed as <I>modal</I>.
That is, the user must close the dialog box before returning to
the document. Use the <B>Unload</B> statement to unload a UserForm
when the user indicates that he or she wants to close the dialog
box. Typically, you provide a command button in the dialog box
that the user can click to close it.
<P>
The following example inserts the name of a dialog box into a
Word document and then unloads the form. The code appears in the
Click event for an <B>OK</B> button in the dialog box.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub cmdOK_Click()
&nbsp;&nbsp;&nbsp; ActiveDocument.Content.InsertAfter txtUserName.Text
&nbsp;&nbsp;&nbsp; Unload UserForm1
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H209">Using the Same Dialog Box in Different
Applications</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex8"></a>
<P>
Microsoft Excel, Word, and PowerPoint share features for creating
custom dialog boxes. You can create a UserForm in one of these
applications and share it with the other applications.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
share a UserForm with another application</FONT></B>
<P>

<OL>
<P>
<LI>In the Visual Basic Editor
for the application in which you created the UserForm, right&#173;click
the UserForm in the <B>Project Explorer</B>, and then click <B>Export
File</B> on the shortcut menu. 
<P>
<LI>Choose a name
to export the UserForm as, and then click <B>Save</B>. The UserForm
is saved with the .frm file name extension.
<P>
<LI>In
the Visual Basic Editor for the application in which you want
to use the UserForm, right&#173;click the project where you want
to store the form in the Project Explorer, and then click <B>Import
File</B> on the shortcut menu. 
<P>
<LI>Select the name
you gave the dialog box when you saved it, and then click <B>Open</B>.
<P>
</OL>

<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Not
every UserForm that runs as it's supposed to in one application
will run correctly when it's imported into another application.
For example, if you import a UserForm that contains Word&#173;specific
code into Microsoft Excel, the UserForm won't run correctly.
<P>
<A NAME="PG012C3"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H103">Working with Controls on a Document, Sheet, or Slide</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex9"></a>
<P>
Just as you can add ActiveX controls to custom dialog boxes, you
can add controls directly to a document, sheet, or slide to make
it interactive. <A NAME="CVxvbh005doc009004">For example, you
might add text boxes, list boxes, option buttons, and other controls
to a document to turn it into an online form; you might add a
button to a sheet that runs a commonly used macro; or you might
add buttons and other controls to the slides in a presentation
to help the user navigate the slide show.</A>
<P>
Although working with a control on a document, sheet, or slide
is very similar to working with a control in a custom dialog box,
there are a few differences. Among those differences are the following:
<P>

<UL>
<P>
<LI>On a document, sheet, or
slide, you add controls by using the <B>Control Toolbox</B>, not
the <B>Toolbox</B>. To display the <B>Control Toolbox</B>, point
to <B>Toolbars</B> on the <B>View</B> menu, and then click <B>Control
Toolbox</B>. 
<P>
<LI>When you're designing a custom
dialog box, you run a dialog box to switch to run mode, where
your controls will respond to events, and you close a dialog box
and return to the Visual Basic Editor to switch back to design
mode, where you can work with the controls without having them
respond to events. When you're working with controls on documents
or in workbooks, you click the <B>Exit Design Mode</B> button
on the <B>Visual Basic</B> toolbar to switch to run mode, and
you click the <B>Design Mode</B> button to switch back to design
mode. In PowerPoint, you run a slide show to switch to run mode,
and you switch to any editing view to switch back to design mode.
<P>
<LI>A
control may not have the same set of events on a document, sheet,
or slide as it does on a UserForm. For example, a command button
on a UserForm has an Exit event, whereas a command button on a
document doesn't.
<P>
<A NAME="CH012H210"></A>
</UL>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Using ActiveX Controls on Word Documents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex10"></a>
<P>
You can add controls to documents to create interactive documents,
such as online forms. Keep the following points in mind when you're
working with controls on documents:
<P>

<UL>
<P>
<LI>You can add ActiveX controls
to either the text layer or the drawing layer. To add a control
to the text layer, hold down the <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SHIFT</FONT> key
while you click the control on the <B>Control Toolbox</B> toolbar
that you want to add to the document. To add a control to the
drawing layer, click the control on the <B>Control Toolbox</B>
toolbar without holding down the <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SHIFT</FONT> key.
<P>
<LI>A
control you add to the text layer is an <B>InlineShape</B> object
to which you gain access programmatically through the <B>InlineShapes</B>
collection. A control you add to the drawing layer is a <B>Shape</B>
object to which you gain access programmatically through the <B>Shapes</B>
collection. 
<P>
<LI>Controls in the text layer are
treated like characters and are positioned as characters within
a line of text. For example, if you place controls in the cells
within a table, the controls will be automatically moved when
you resize any columns in the table.
<P>
<LI>You cannot
drag controls from the <B>Control Toolbox</B> onto a Word document.
When you press <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SHIFT</FONT> and click a control to
add it to the text layer, the control is automatically added at
the insertion point. When you click a control to add it to the
drawing layer, the position of the control is based on the position
of the insertion point, but may not match it. If you add multiple
controls to the drawing layer without moving the insertion point,
the controls will all be placed in the same position, one on top
of the other, so that you only see the last one you added.
<P>
<LI>In
design mode, ActiveX controls in the drawing layer are visible
only in page layout view or online layout view.
<P>
<LI>ActiveX
controls in the drawing layer are always in run mode (so that
they can receive input from a user) in page layout view or online
layout view.
<P>
<LI>If you want the user to be able
to move between controls in an online form by pressing <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">TAB</FONT>,
add the controls to the text layer, and protect the form by clicking
the <B>Protect Form</B> button on the <B>Forms</B> toolbar.
<P>
<LI>If
you want to add form fields instead of ActiveX controls to your
document to create an online form, use the <B>Forms</B> toolbar.
<P>
<A NAME="CH012H211"></A>
</UL>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Using ActiveX Controls on Microsoft Excel Sheets</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex11"></a>
<P>
You can add controls to worksheets or chart sheets next to the
data the controls are linked to so that they're easy for the user
to find and understand, and so that using them causes only minimal
interruptions during a work session. For example, you can add
to a worksheet a button that runs a procedure that formats the
active cell when the button is clicked.
<P>
Keep the following points in mind when you're working with controls
on sheets:
<P>

<UL>
<P>
<LI><A NAME="CVxvbh005doc004005">In
addition to the standard properties available for ActiveX controls,
you can use the following properties with ActiveX controls in
Microsoft Excel: <B>BottomRightCell</B>, <B>LinkedCell</B>, <B>ListFillRange</B>,
<B>Placement</B>, <B>PrintObject</B>, <B>TopLeftCell</B>, and
<B>ZOrder</B>.</A>
<P>

<P>You can set and return
these properties by using the ActiveX control name. The following
example scrolls through the workbook window until CommandButton1
is in the upper&#173;left corner of the window.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set t = Sheet1.CommandButton1.TopLeftCell
With ActiveWindow
&#09;.ScrollRow = t.Row
&#09;.ScrollColumn = t.Column
End With

</code></pre></FONT>

<P>
<LI>Some Microsoft Excel Visual Basic methods and properties are disabled
when an ActiveX control is activated. For instance, you cannot
use the <B>Sort</B> method when a control is active; thus, the
following example will fail in a Click event procedure (because
the control is still active after the user clicks it).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub CommandButton1_Click
&#09;Range("a1:a10").Sort Key1:=Range("a1")
End Sub

</code></pre></FONT>



<P>
<P>You can work around this
problem by activating some other element on the sheet before you
use the property or method that failed. For instance, the following
example sorts the range.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub CommandButton1_Click
&#09;Range("a1").Activate
&#09;Range("a1:a10").Sort Key1:=Range("a1")
&#09;CommandButton1.Activate
End Sub

</code></pre></FONT>

<P>
<LI>Controls in a Microsoft Excel workbook embedded in a document in another
application won't work if the user double&#173;clicks the workbook
to edit it. The controls will work if the user right&#173;clicks
the workbook and then clicks the <B>Open</B> command on the shortcut
menu.
<P>
<LI>When you save a Microsoft Excel&nbsp;97 workbook by using the Microsoft
Excel 5.0/95 Workbook file format, all ActiveX control information is lost.
<P>
<LI>The <B>Me</B> keyword in an event procedure for an ActiveX control
on a sheet refers to the sheet, not to the control.
</UL>


<P>
<A NAME="CH012H212"></A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Using ActiveX Controls on PowerPoint Slides</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex12"></a>
<P>
Adding controls to your PowerPoint slides provides a sophisticated
way for you to exchange information with the user while a slide
show is running. For example, you can use controls on slides so
that viewers of a show designed to be run in a kiosk have a way
to choose options and then run a custom show based on the viewer's
choices.
<P>
Keep the following points in mind when
you're working with controls on slides:
<P>

<UL>
<P>
<LI>A control on a slide is in design mode except when the slide show
is running.
<P>
<LI>If you want a particular control to appear on all the slides in a
presentation, add the control to the slide master.
<P>
<LI>The <B>Me</B> keyword in an event procedure for a control on a slide
refers to the slide. The <B>Me</B> keyword in an event procedure
for a control on a master refers to the master, not to the slide
that's being displayed when the control event is triggered.
<P>
<LI>Writing event code for controls on slides is very similar to writing event
code for controls in dialog boxes. The following example (the
Click event procedure for the command button named "cmdChangeColor")
sets the background for the slide the button is on.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub cmdChangeColor_Click()
&nbsp;&nbsp;&nbsp;With Me
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FollowMasterBackground = Not .FollowMasterBackground
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Background.Fill.PresetGradient msoGradientHorizontal, 1, msoGradientBrass
&nbsp;&nbsp;&nbsp; End With
End Sub

</code></pre></FONT>

<P>
<LI>You may want to use controls to provide your slide show with navigation
tools that are more complex than those built into PowerPoint.
For instance, if you add two buttons named "cmdBack"
and "cmdForward" to the slide master and write the code
in the following example for them, all slides based on the master
(and set to show master background graphics) will have these professional&#173;looking
navigation buttons, which will be active during a slide show.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub cmdBack_Click()
&nbsp;&nbsp;&nbsp; Me.Parent.SlideShowWindow.View.Previous
End Sub

Sub cmdForward_Click()
&nbsp;&nbsp;&nbsp; Me.Parent.SlideShowWindow.View.Next
End Sub

</code></pre></FONT>

<P>
<LI>To work with all the ActiveX controls on a particular slide without
affecting the other shapes on the slide, you can construct a <B>ShapeRange</B>
collection that contains only controls. You can then either apply
properties and methods to the entire collection or iterate through
the collection to work with each control individually. The following
example aligns all the controls on slide one in the active presentation
and arranges them vertically.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With ActivePresentation.Slides(1).Shapes
&nbsp;&nbsp;&nbsp; numShapes = .Count
&nbsp;&nbsp;&nbsp; If numShapes &gt; 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numControls = 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReDim ctrlArray(1 To numShapes)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For i = 1 To numShapes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If .Item(i).Type = msoOLEControlObject Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numControls = numControls + 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ctrlArray(numControls) = .Item(i).Name
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If numControls &gt; 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReDim Preserve ctrlArray(1 To numControls)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set ctrlRange = .Range(ctrlArray)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ctrlRange.Distribute msoDistributeVertically, True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ctrlRange.Align msoAlignLefts, True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If
&nbsp;&nbsp;&nbsp; End If
End With

</code></pre></FONT>
</UL>

<P>
<A NAME="PG012C4"></A>
<P>
</MENU></MENU></MENU>
<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH012H104">Working with Controls Programmatically</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex13"></a>
<P>
To gain access to a control programmatically, you can either refer
to the control by its code name or get to it through the collection
it belongs to. (The code name of a control is the value of the
<B>(Name)</B> property for that control in the <B>Properties</B>
window.)
<P>
<A NAME="CVxvbh005doc004038">The following example sets the caption
for the control named "CommandButton1."</A>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>CommandButton1.Caption = "Run"

</code></pre></FONT>

<P>
Note that when you use a control name outside the class module
for the document, sheet, or slide that contains the control, you
must qualify the control name with the code name of the document,
sheet, or slide. The following example changes the caption on
the control named "CommandButton1" on the Sheet1.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sheet1.CommandButton1.Caption = "Run"

</code></pre></FONT>

<P>
You can also gain access to ActiveX controls through the <B>Shapes</B>,
<B>OLEObjects</B>, or <B>InlineShapes</B> collection. ActiveX
controls you add to the drawing layer of a document, sheet, or
slide are contained in <B>Shape</B> objects and can be programmatically
controlled through the <B>Shapes</B> collection. In Microsoft
Excel, ActiveX controls are also contained in <B>OLEObject</B>
objects that can be controlled through the <B>OLEObjects</B> collection.
In Word, ActiveX controls you add to the text layer of a document
are contained in <B>InlineShape</B> objects and can be controlled
through the <B>In</B>lineShapes collection.
<P>
<FONT COLOR="#0000FF"><B>Important</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;You
use the name of the <B>Shape</B> object that contains a particular control,
not the code name of the control, to gain access to the control
programmatically through a collection. In Microsoft Excel and
PowerPoint, the name of the object that contains a control matches
the code name of the control by default. This isn't true in Word,
however; the name of the object that contains a control (which
will be something like "Control 1" by default) is unrelated
to the code name of a control (which will be something like "CommandButton1"
by default). To change the code name of a control, select the
control and change the value to the right of <B>(Name)</B> in the <B>Properties</B> window. To change the name of the <B>Shape</B> object, <B>OLEObject</B> object, or other object that contains the control, change the value of
its <B>Name</B> property.
<P>
The following example adds a command button to worksheet one.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Worksheets(1).OLEObjects.Add "Forms.CommandButton.1", _
&#09;Left:=10, Top:=10, Height:=20, Width:=100

</code></pre></FONT>

<P>
The following example sets the <B>Left</B> property for CommandButton1 on worksheet one.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Worksheets(1).OLEObjects("CommandButton1").Left = 10

</code></pre></FONT>

<P>
The following example sets the caption
for CommandButton1.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Worksheets(1).OLEObjects("CommandButton1").Object.Caption = "Run"

</code></pre></FONT>

<P>
The following example adds a check box to the active document's
text layer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.InlineShapes.AddOLEControl ClassType:="Forms.CheckBox.1"

</code></pre></FONT>

The following example sets the <B>Width</B> property for the first
shape in the active document's text layer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.InlineShapes(1).Width = 200

</code></pre></FONT>

The following example sets the <B>Value</B> property for the first
shape in the active document's text layer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.InlineShapes(1).OLEFormat.Object.Value = True

</code></pre></FONT>

<P>
The following example adds a combo box to the active document's
drawing layer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Shapes.AddOLEControl ClassType:="Forms.ComboBox.1"

</code></pre></FONT>

The following example sets the <B>Left</B> property for a combo
box contained in Control 1 in the active document's drawing layer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Shapes("Control 1").Left = 100

</code></pre></FONT>

<P>
The following example sets the <B>Text</B> property for a combo
box contained in Control 1 in the active document's drawing layer.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Shapes("Control 1").OLEFormat.Object.Text = "Reed"

</code></pre></FONT>

<P>
The following example adds a command button to slide one in the
active presentation. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActivePresentation.Slides(1).Shapes.AddOLEObject Left:=100, Top:=100, _
&nbsp;&nbsp;&nbsp; Width:=150, Height:=50, ClassName:="Forms.CommandButton.1"

</code></pre></FONT>

<P>
The following example sets the <B>Left</B> property for the control
contained in CommandButton1 on slide one in the active presentation.
<P>
<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActivePresentation.Slides(1).Shapes("CommandButton1").Left = 100
</code></pre></FONT>
<P>
The following example sets the <B>Caption</B> property for the
control contained in CommandButton1 on slide one in the active
presentation.
<P>
<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActivePresentation.Slides(1).Shapes("CommandButton1") _
&nbsp;&nbsp;&nbsp; .OLEFormat.Object.Caption = "Run"

</code></pre></FONT>
</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->
</FONT>
</FONT></BODY>


</HTML>

<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 3: Microsoft Access Objects</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 3</B></FONT></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Microsoft Access Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<UL>
<LI><A HREF="#CH003H101">Objects Available in Microsoft Access</A>
<BR>
<LI><A HREF="#CH003H102">The Microsoft Access
Objects</A>
<BR>
<LI><A HREF="#CH003H103">The Application Object</A>
<BR>
<LI><A HREF="#CH003H104">The Form Object and the Forms Collection</A>
<BR>
<LI><A HREF="#CH003H105">The Report Object and the Reports Collection</A>
<BR>
<LI><A HREF="#CH003H106">The Control Object and the Controls Collection</A>
<BR>
<LI><A HREF="#CH003H107">The Module Object and the Modules Collection</A>
<BR>
<LI><A HREF="#CH003H108">The Reference Object and the References Collection</A>
<BR>
<LI><A HREF="#CH003H109">The DoCmd Object</A>
<BR>
<LI><A HREF="#CH003H110">The Screen Object</A>
</UL>

<P>
<A NAME="CH003H101">A Microsoft Access database is made up of
different types of objects. Some types are used to display the
data in your database, while others are used to store and manage
the data itself, or to assist you in programming in Visual Basic.
You can use Visual Basic to create, control, and manage all of
the different types of objects in a Microsoft Access database.</A>
<P>
Some of the objects that are available to you from Visual Basic
in Microsoft Access are supplied by Microsoft Access; others are
provided by different components. The objects provided by Microsoft
Access represent the forms, reports, controls, and modules in
your application. This chapter explains how to program with Microsoft
Access objects in Visual Basic.
<P>
<A NAME="PG003C1"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H101">Objects Available in Microsoft Access</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex1"></a>
<P>
When you program in Visual Basic, you work with <I>objects</I>
that correspond to different parts of your Microsoft Access database.
<I>Collections</I> are sets of objects of the same
type. Programming with objects and collections gives you added
flexibility in that you can design your Microsoft Access application
to respond to user actions and input in a customized way.
<P>
<a name="dex2"></a>
<P>
Microsoft Access includes several components, each of which supplies
its own set of objects. The component's <I>object library</I>
contains information about the component's objects and their properties
and methods. A component's objects are available to Microsoft
Access only if a <I>reference</I> exists to the component's
object library. A reference notifies Microsoft Access that the
objects in a particular object library are available from Visual
Basic. To view existing references, open a module and click <B>References</B>
on the <B>Tools</B> menu. To set a reference, select the check
box next to the object library you want to reference.
<P>
Microsoft Access automatically sets references to the following
object libraries:

<UL>
<P>
<LI>The Microsoft Access 8.0 object
library. This object library provides objects that you use to
display your data, contain your code, and work with the Microsoft
Access application. For example, the <B>Form</B>, <B>Module</B>,
and <B>Application</B> objects are provided by the Microsoft Access
8.0 object library. These objects are discussed in this chapter.
<P>
<LI>The
Microsoft DAO 3.5 object library. This object library provides
Data Access Objects (DAO), such as the <B>TableDef</B> and <B>QueryDef</B>
objects, which determine the structure of your database and which
you can use to manipulate data in Visual Basic. These objects
are discussed in Chapter 11, "<a href="011.htm">Data Access Objects</A>."
<P>
<LI>The
Visual Basic for Applications object library. Visual Basic provides
three objects that give you more flexibility in programming: the
<B>Debug</B>, <B>Err</B>, and <B>Collection</B> objects. For more
information on these objects, search Microsoft Access Help for
the name of the object.
<P>
</UL>

<P>
Microsoft Access also includes the Microsoft Office 8.0 object
library. However, Microsoft Access doesn't automatically set a
reference to the Microsoft Office 8.0 object library. If you want
to work with objects provided by Microsoft Office, such as the
<B>CommandBar</B>, <B>FileSearch</B>, and <B>Assistant</B> objects,
from within Microsoft Access, you must first set a reference to
the Microsoft Office 8.0 object library. In other Office applications,
this reference is set automatically. The objects provided by the
Microsoft Office 8.0 object library are discussed in Chapter&nbsp;8,
"<a href="008.htm">Menus and Toolbars</A>," and Chapter&nbsp;9, "<a href="009.htm">Microsoft Office Assistant</A>."
<P>
You can also set references to object libraries supplied by other
applications or components when you want to use objects in those
libraries for Automation. For example, if you want to perform
Automation operations with Microsoft Excel objects from Microsoft
Access, you can set a reference to the Microsoft Excel object
library.
<P>
If you want to work with Microsoft Access objects from another
application that supports Automation, set a reference to the Microsoft
Access 8.0 object library from that application. You can then
work with the objects in the Microsoft Access object hierarchy
from within that application. For more information, see "<A HREF="#CH003H201">Using the Application Object for Automation Operations</A>" later in
this chapter.
<P>
<A NAME="PG003C2"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H102">The Microsoft Access Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex3"></a>
<P>
The following table describes the objects and collections provided
by the Microsoft Access 8.0 object library. Each of these objects
and collections is discussed in more detail later in this chapter.
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD>
</TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Application </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Represents the Microsoft Access application.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Form </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Represents an open form.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Forms </B>collection</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains all currently open forms.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Report </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Represents an open report.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Reports </B>collection</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains all currently open reports.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Control </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Represents a control on a form, report, or section, or within another control.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Controls </B>collection</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains all controls on a form or report.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Module </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Represents a standard module or a class module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Modules </B>collection</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains all currently open modules.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Reference </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Represents a reference to an object library.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>References </B>collection</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains all references that are currently set.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DoCmd </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Runs a macro action in Visual Basic.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Screen </B>object</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Represents the current arrangement of objects on the screen.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
Microsoft Access objects are organized in a hierarchical relationship.
Objects contain collections, and collections contain other objects.
The following illustration shows the hierarchy of Microsoft Access
objects.
<P>
<IMG SRC="00301.gif">
<P>
Each Microsoft Access object has properties, methods, and events
associated with it. You can view these properties, methods, and
events in the Object Browser. To open the Object Browser, open
a module, and then click <B>Object Browser</B> on the <B>View</B>
menu. You can also open the Object Browser by pressing <FONT SIZE=2 FACE="Verdana, Arial, Helvetica">F2</FONT>
when a module is open.
<P>
<A NAME="PG003C3"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H103">The Application Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex4"></a>
<P>
The <B>Application</B> object represents the Microsoft Access
application and is the top&#173;level object in the Microsoft
Access object hierarchy. It contains all the other Microsoft Access
objects and collections. It's also the object you must first reference
in order to use Microsoft Access objects through Automation.
<P>
The <B>Application</B> object is the default object in the object
hierarchy. When you're working within Microsoft Access, you don't
need to explicitly refer to the <B>Application</B> object when
you use one of its methods or properties, or when you refer to
an object or collection that the <B>Application</B> object contains.
The only time you need to explicitly refer to the <B>Application</B>
object is when you're working with Microsoft Access objects from
another application through Automation. However, you can refer
to the <B>Application</B> object explicitly from within Microsoft
Access if you want to.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H201">Using the Application Object for Automation
Operations</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex5"></a>
<P>
If you want to work with Microsoft Access objects from another
application that supports Automation, such as Microsoft Excel
or Microsoft Visual Basic, you should begin by setting a reference
to the Microsoft Access 8.0 object library from that application.
Once you've set a reference to the Microsoft Access object library,
you can work with the Microsoft Access objects, beginning with
the <B>Application</B> object. The <B>Application</B> object is
the top&#173;level object in the Microsoft Access object hierarchy,
so you must first refer to it in code before you can work with
the other objects in the object hierarchy.
<P>
To work with Microsoft Access objects from another application,
you must perform the following steps from within that application:
<P>

<OL>
<P>
<LI>Set a reference to the
Microsoft Access object library from the application in which
you are working.
<P>
<LI>Declare an object variable
to represent the Microsoft Access <B>Application</B> object.
<P>
<LI>Return
a reference to the <B>Application</B> object and assign that reference
to the object variable.
<P>
</OL>

<P>
To set a reference to the Microsoft Access object library, open
a module, click <B>References</B> on the <B>Tools</B> menu, and
then select the <B>Microsoft Access 8.0 Object Library </B>check
box in the <B>Available References </B>box.
<P>
After you've set a reference to the Microsoft Access object library,
you can declare a variable of type <B>Application</B> to represent
the Microsoft Access <B>Application</B> object. Because other
applications have their own <B>Application</B> objects, you must
qualify an object variable of type <B>Application</B> when you
declare it so that Visual Basic creates the Microsoft Access <B>Application</B>
object.
<P>
You qualify an object variable with the Visual Basic name of the
object library that supplies it. Once you've set a reference to
an object library, its name is available in the <B>Project/Library</B>
box in the Object Browser. The Visual Basic name of the Microsoft
Access object library is <B>Access</B>. The following example
declares a variable to represent the <B>Application</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appAccess As Access.Application

</code></pre></FONT>


<P>
You can also declare an object variable to represent the <B>Application</B>
object as type <B>Object</B>. However, your code will run faster
if you declare the object variable as type <B>Application</B>.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;Whenever
you're working with multiple components through Automation, it's
a good idea to qualify objects with the name of the object library
that supplied them. If you qualify all objects, you can always
be sure that you're referring to the correct object.
<P>
After you've declared an object variable to represent the <B>Application</B>
object, you must return a reference to the <B>Application</B>
object and assign that reference to the object variable. You can
return a reference to the <B>Application</B> object by using either
the <B>CreateObject</B> or the <B>GetObject</B> function, and
you can assign that reference to the object variable with the
<B>Set</B> statement. Use the <B>CreateObject</B> function to
open Microsoft Access and return a reference to the <B>Application</B>
object if Microsoft Access is not already running. Use the <B>GetObject</B>
function to return a reference to the <B>Application</B> object
when Microsoft Access is already running. The following example
uses the <B>CreateObject</B> function to open Microsoft Access&nbsp;97
and return a reference to the <B>Application</B> object, and then
assigns it to an object variable of type <B>Application</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appAccess As Access.Application
Set appAccess = CreateObject("Access.Application.8")

</code></pre></FONT>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;If
your code may run on a computer that has more than one version
of Microsoft Access, you can include the version number you want
to use in the argument for the CreateObject or GetObject function.
The preceding example opens Microsoft Access&nbsp;97, which is
version 8.0. Microsoft Access&nbsp;95 is version 7.0.
<P>
If the application in which you are working supports the <B>New</B>
keyword, you can use the <B>New</B> keyword to declare an object
variable, return a reference to the <B>Application</B> object,
and assign it to the object variable all in one step, as shown
in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appAccess As New Access.Application

</code></pre></FONT>
<P>
When a procedure that contains this code runs, Visual Basic returns
a reference to the <B>Application</B> object and assigns it to
the object variable. However, Visual Basic doesn't actually open
Microsoft Access until you begin working with the object variable
in code. In the following example, the declaration that contains
the <B>New</B> keyword assigns a reference to the <B>Application</B>
object to the object variable, but Microsoft Access doesn't open
until the <B>NewCurrentDatabase</B> method runs.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appAccess As New Access.Application 
appAccess.NewCurrentDatabase "NewDb.mdb"

</code></pre></FONT>
<P>
After you've created an object variable that represents the <B>Application</B>
object, you can use it to work with any object in the Microsoft
Access object hierarchy. For example, you can open the Northwind
sample database, use the <B>DoCmd</B> object to open the Employees
form, and then work with the <B>Form</B> object that represents
the Employees form. To do this, add the following procedure to
a Visual Basic module in Microsoft Excel and then run it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub OpenNorthwindEmployees()
&#09;Dim appAccess As New Access.Application

&#09;Const conPath As String = "C:\Program Files\Microsoft Office\Office" _
&#09;&#09;&amp; "\Samples\Northwind.mdb"

&#09;With appAccess
&#09;&#09;' Open the Northwind sample database.
&#09;&#09;.OpenCurrentDatabase conPath
&#09;&#09;' Open the Employees form.
&#09;&#09;.DoCmd.OpenForm "Employees"
&#09;&#09;' Set the form's caption.
&#09;&#09;.Forms!Employees.Caption = "Northwind Employees"
&#09;End With
End Sub

</code></pre></FONT>

<P>
To work with <B>CommandBar</B> objects, you must first set a reference
to the Microsoft Office 8.0 object library. You can set the reference
from within Microsoft Access in the <B>References</B> dialog box
(<B>Tools</B> menu). If you're working with Microsoft Access through
Automation, you can set a reference to the Office object library
from the other application. You can then use the <B>CommandBars</B>
property of the Microsoft Access <B>Application</B> object to
return a reference to the Office <B>CommandBars</B> collection.
<P>
You can also work with Data Access Objects (DAO) by first setting
a reference to the Microsoft DAO 3.5 object library, then by using
the <B>DBEngine</B> property of the Microsoft Access <B>Application</B>
object to return a reference to the DAO <B>DBEngine</B> object.
You can access all objects in the DAO object hierarchy through
the <B>DBEngine</B> object, which is the top&#173;level object
in the hierarchy.
<P>
For more information about using Office <B>CommandBar</B> objects
and DAO objects, see Chapter 8, "<a href="008.htm">Menus and Toolbars</A>,"
and Chapter 11, "<a href="011.htm">Data Access Objects</A>."
<P>
<A NAME="PG003C4"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H104">The Form Object and the Forms Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex6"></a>
<P>
The <B>Form</B> object represents a Microsoft Access form that
is open in Design view, Form view, or Datasheet view. <B>Form</B>
objects are grouped in the <B>Forms</B> collection, which is a
member of the Microsoft Access <B>Application</B> object. The
<B>Forms</B> collection contains only the forms that are currently
open in the database.
<P>
The following table shows the relationship between the <B>Form</B>
object and the <B>Forms</B> collection and other objects and collections
in the Microsoft Access object hierarchy.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</FONT></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</FONT></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Form </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Forms </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Controls </B>collection<P>
<B>Properties </B>collection<P>
<B>Module </B>object
</FONT></FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Forms </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Application </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Form </B>objects</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H202">Referring to Form Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex7"></a>
<P>
To work with a <B>Form</B> object in Visual Basic, you need to
refer to the <B>Form</B> object in the <B>Forms</B> collection.
To refer to a form, you must make sure that the form is open.
To open a form with Visual Basic, use the <B>OpenForm</B> method
of the <B>DoCmd</B> object.
<P>
If you refer to an individual <B>Form</B> object repeatedly within
a procedure, you should declare an object variable to represent
the <B>Form</B> object. If you know the name of the form, you
can use the <B>!</B> operator syntax to refer to the <B>Form</B>
object in the <B>Forms</B> collection by name. For example, the
following code returns a reference to the Employees form and assigns
it to a variable of type <B>Form</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim frm As Form
Set frm = Forms!Employees

</code></pre></FONT>
<P>
If you need to return a reference to a <B>Form</B> object and
you won't know its name until run time, you can use the parentheses
syntax to refer to the <B>Form</B> object within the <B>Forms</B>
collection. This is useful if you want to pass the name of the
form to a procedure as a variable, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function SetFormCaption(strFormName As String)
&#09;Dim frm As Form

&#09;' Open the form.
&#09;DoCmd.OpenForm strFormName
&#09;' Return a reference to the Form object.
&#09;Set frm = Forms(strFormName)
&#09;' Change the form's caption.
&#09;frm.Caption = Date
End Function

</code></pre></FONT>
<P>
You can also refer to an individual <B>Form</B> object by its
index number, which indicates its position within the <B>Forms</B>
collection. The <B>Forms</B> collection is indexed beginning with
zero. That is, the index number for the first <B>Form</B> object
in the <B>Forms</B> collection is 0, the second is 1, and so on.
<P>
Finally, if you need to set a <B>Form</B> object's property or
call a method, but you don't need to use the <B>Form</B> object
repeatedly throughout the procedure, you can refer to the form's
class module directly in order to set the property or call the
method. For example, the following code makes the form visible
on the screen.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Form_Employees.Visible = True

</code></pre></FONT>
<P>
For more information about class modules, see "<A HREF="#CH003H216">Standard Modules vs. Class Modules</A>" later in this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H203">Properties of the Form Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex8"></a>
<P>
The properties of the <B>Form</B> object are too numerous to include
in this chapter, so this section discusses only a few that deserve
special consideration. To see all of the available properties
of the <B>Form</B> object, search Microsoft Access Help for "Form
object," or view the members of the <B>Form</B> object in
the Object Browser.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Me Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex9"></a>
<P>
The <B>Me</B> property returns a reference to the form in which
code is currently running. You can use the <B>Me</B> property
in procedures within a form module as shorthand for the full form
reference. You can also use it to pass a <B>Form</B> object to
a procedure without knowing the name of the form. If you use the
<B>Me</B> property in code behind a form, you can rename the form
without having to update your code.
<P>
The following example shows how you can use the <B>Me</B> property
within an event procedure in a form module. This procedure sets
the <B>BackColor</B> property of the form's detail section to
a random color.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Add this procedure to form module.
Private Sub Form_Load()
&#09;' Initializes random number generator.
&#09;Randomize
&#09;' Sets BackColor property of form section.
&#09;Me.Section(acDetail).BackColor = RGB(Rnd * 256, Rnd * 256, Rnd * 256)
End Sub

</code></pre></FONT>

<P>
The following example also sets the detail section's <B>BackColor</B>
property, but the Load event procedure passes a reference to the
<B>Form</B> object to a procedure in a standard module. This strategy
is preferable, because you can call the procedure in the standard
module from any form, not just the one that contains the Load
event.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Add this procedure to form module.
Private Sub Form_Load()
&#09;' Passes reference to current form to ChangeBackColor procedure.
&#09;ChangeBackColor Me
End Sub

' Add this procedure to standard module.
Public Sub ChangeBackColor(frm As Form)
&#09;Randomize
&#09;frm.Section(acDetail).BackColor = RGB(Rnd * 256, Rnd * 256, Rnd * 256)
End Sub

</code></pre></FONT>

<P>
Note that when you're working with a Microsoft Access form from
another application through Automation, you can't use the <B>Me</B>
property to refer to the form from that application. You can only
use the <B>Me</B> property to refer to a form in code within that
form's module. The same is true for reports.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Section Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex10"></a>
<P>
A form is divided into five sections: detail, header, footer,
page header, and page footer. The <B>Section</B> property returns
a reference to a particular section of a form. Once you've returned
a reference to a form section, you can set properties for that
section.
<P>
A number of properties apply to a form section rather than a <B>Form</B>
object. For example, the <B>BackColor</B> property applies to
a form section, not to a form, as shown in the preceding example.
A section also has a <B>Controls</B> property, which returns a
reference to the <B>Controls</B> collection for that section.
The following example prints the names of all controls in the
detail section of a form to the Debug window.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub ControlsBySection(frm As Form)
&#09;Dim ctl As Control

&#09;' Enumerate the controls in the detail section.
&#09;For Each ctl In frm.Section(acDetail).Controls
&#09;&#09;Debug.Print ctl.Name
&#09;Next ctl
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Properties Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex11"></a>
<P>
The <B>Properties</B> property returns a reference to the <B>Properties</B>
collection of a <B>Form</B> object. The <B>Properties</B> collection
contains all of the properties of the form. You can enumerate
the <B>Properties</B> collection with the <B>For Each...Next</B>
statement. Note that you can't add a new property to the <B>Properties</B>
collection. The following example prints all the properties of
a <B>Form</B> object to the Debug window.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub EnumerateFormProperties(frm As Form)
&#09;Dim prp As Property

&#09;' Enumerate the properties of a form.
&#09;For Each prp In frm.Properties
&#09;&#09;Debug.Print prp.Name, prp.Value
&#09;Next prp
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Module Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex12"></a>
<P>
The <B>Module</B> property returns a reference to the <B>Module</B>
object associated with a form. You can assign this reference to
a variable of type <B>Module</B>.
<P>
The module associated with a form doesn't automatically exist
when the form is created. When you refer to the <B>Module</B>
property, the module is created if it doesn't already exist. For
more information, see the following section,"<A HREF="#CH003H204">Form Modules</A>."
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The RecordSource Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
The <B>RecordSource</B> property binds a table or query to a form.
After you've set the <B>RecordSource</B> property to the name
of a table or query or to an SQL statement, you can display data
from that table, query, or SQL statement on the form.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H204">Form Modules</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex13"></a>
<P>
A <B>Form</B> object can have an associated module, which is represented
by a <B>Module</B> object. However, the module does not exist
when you first create the form. There are three ways to specify
that Microsoft Access should create a module for a form:
<P>

<UL>
<P>
<LI>Click <B>Code</B> on the
<B>View</B> menu when the form is open in Design view. The module
opens and is subsequently saved with the form, even if you don't
add any code to it.
<P>
<LI>Set the form's <B>HasModule</B>
property to <B>True</B>. You can set this property in the Microsoft
Access property sheet or in Visual Basic. Note that setting this
property to <B>False</B> removes the module and all code within
it.
<P>
<LI>Refer to the form's <B>Module</B> property
in Visual Basic. The <B>Module</B> property returns a reference
to the <B>Module</B> object associated with the form, creating
it first if it does not already exist.
<P>
</UL>

<P>
If you don't need to add code to a particular form, then you don't
need to create a module for it. Forms without modules open more
quickly. Also, eliminating unnecessary modules reduces the size
of your database.
<P>
A form module contains any event procedures that you define for
the form. You can also add other procedures to the form module.
However, you should include only procedures that are specific
for that form. If you want a procedure to be available to other
procedures throughout the database, place that procedure in a
standard module.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H205">Creating Forms at Run Time</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex14"></a>
<P>
If you want to create a new form at run time, you can use the
<B>CreateForm</B> function. This can be useful if you are creating
an add&#173;in for Microsoft Access. For example, you may want
to create an add&#173;in that adds a custom address book form
to a database based on information provided by the user at run
time. You can use the <B>CreateForm</B> function to generate the
form in Visual Basic. You can also use the <B>CreateControl</B>
function and the <B>DeleteControl </B>statement to add controls
to or delete controls from the new form.
<P>
You can also add code to the form module at run time by using
the methods and properties of the <B>Module</B> object. For example,
the <B>CreateEventProc</B> method of the <B>Module</B> object
creates an event procedure for a specified object&nbsp;&#151;
a form, report, section, or control. The <B>InsertLines</B> method
inserts lines of code at a specified position in the module. The
following example creates a new form and adds an event procedure
to its module.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function CreateFormWithCode () As Boolean
&#09;Dim frm As Form, mdl As Module
&#09;Dim lngLine As Long, strLine As String

&#09;' Enable error handling.
&#09;On Error GoTo Error_CreateFormWithCode
&#09;' Create new form and return reference to Form object.
&#09;Set frm = CreateForm
&#09;' Return reference to form module.
&#09;Set mdl = frm.Module
&#09;' Create Load event procedure in form module.
&#09;lngLine = mdl.CreateEventProc("Load", "Form")
&#09;strLine = vbTab &amp; "Me.Caption = " &amp; Date
&#09;' Set form's caption in Load event.
&#09;mdl.InsertLines lngLine + 1, strLine
&#09;' Return True if function is successful.
&#09;CreateFormWithCode = True

Exit_CreateFormWithCode:
&#09;Exit Function

Error_CreateFormWithCode:
&#09;MsgBox Err &amp; ": " &amp; Err.Description
&#09;CreateFormWithCode = False
&#09;Resume Exit_CreateFormWithCode
End Function

</code></pre></FONT>

<P>
For more information about writing and manipulating code with
methods and properties of the <B>Module</B> object, see "<A HREF="#CH003H107">The Module Object and the Modules Collection</A>" later in this chapter,
or search Microsoft Access Help for "Module object."

<A NAME="PG003C5"></A>

</MENU></MENU></MENU>
<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H105">The Report Object and the Reports Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex15"></a>
<P>
The <B>Report</B> object represents a Microsoft Access report
that is open in Design view, Print Preview, or Layout Preview.
<B>Report</B> objects are grouped in the <B>Reports</B> collection,
which is a member of the Microsoft Access <B>Application</B> object.
The <B>Reports</B> collection contains only the reports that are
currently open in the database.
<P>
The following table shows the relationship between the <B>Report</B>
object and the <B>Reports</B> collection and other objects and
collections in the Microsoft Access object hierarchy.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</FONT></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</FONT></TD><TD WIDTH=35% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Report </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Reports </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Controls </B>collection
<BR>
<B>Properties </B>collection
<BR>
<B>Module </B>object
</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Reports </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Application </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Report </B>objects</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<B>Report</B> objects and <B>Form</B> objects have similar characteristics.
This section only summarizes the characteristics of the <B>Report</B>
object, because the same characteristics have been described in
detail in the previous section, "<A HREF="#CH003H105">The Form Object and the
Forms Collection</A>." For a list of the properties, methods,
and events of the <B>Report</B> object, search Microsoft Access
Help for "Report object," or view the members of the
<B>Report</B> object in the Object Browser.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H206">Referring to Report Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex16"></a>
<P>
To work with a <B>Report</B> object in Visual Basic, you need
to refer to the <B>Report</B> object in the <B>Reports</B> collection.
To refer to a report, you must make sure that the report is open.
To open a report with Visual Basic, use the <B>OpenReport</B>
method of the <B>DoCmd</B> object. 
<P>
You can refer to a <B>Report</B> object and assign it to an object
variable in one of the following ways:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim rpt As Report
Set rpt = Reports!Invoice&#09;' Returns a reference to the Invoice report.
Set rpt = Reports("Invoice")&#09;' Returns a reference to the Invoice report.
Set rpt = Reports(0)&#09;&#09;' Returns a reference to the first report in
&#09;&#09;&#09;&#09;' the collection.

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H207">Report Modules</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex17"></a>
<P>
Like a <B>Form</B> object, a <B>Report</B> object can have an
associated module that is a class module. This module doesn't
exist until you create it. You can create a report module by clicking
<B>Code</B> on the <B>View</B> menu while the report is open in
Design view, by setting the report's <B>HasModule</B> property
to <B>True</B>, or by referring to the report's <B>Module</B>
property in Visual Basic.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H208">Creating Reports at Run Time</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex18"></a>
<P>
To create a new report at run time, use the <B>CreateReport</B>
function. To add controls to or delete controls from a report
at run time, use the <B>CreateReportControl</B> function or the
<B>DeleteReportControl </B>statement.
<P>
The following example uses Automation from Microsoft Excel to
create a linked table in a Microsoft Access database, and then
creates a Microsoft Access report based on the data in the linked
table. To use this example, you need to create a Microsoft Excel
workbook named Revenue.xls, add some data to a worksheet in that
workbook, and create a named range called DataRange that includes
this data. Then, enter the following code in a module in the Microsoft
Excel workbook. Before you run this example, you must set a reference
to the Microsoft Access 8.0 object library and the DAO 3.5 object
library from Microsoft Excel.
<P>
<FONT COLOR="#0000FF"><B>Important&nbsp;&nbsp;&nbsp;</B></FONT>Before
you run this code, make sure that the Microsoft Excel ISAM driver
(Msexcl35.dll) is installed on your system. If it's not, you need
to run Setup again to install it. The Microsoft Excel ISAM driver
enables Microsoft Excel&nbsp;97 files to work with the Microsoft
Jet database engine. For more information on working with the
Microsoft Excel ISAM driver, search Microsoft Access Help for
"Microsoft Excel driver."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Enter in Declarations section of a module.
Dim appAccess As New Access.Application

Sub PrintReport()

&#09;Dim rpt As Access.Report, ctl As Access.TextBox
&#09;Dim dbs As DAO.Database, tdf As DAO.TableDef, fld As DAO.Field
&#09;Dim strDB As String, intLeft As Integer

&#09;' Set this constant to the path to your Northwind sample database.
&#09;Const conPath As String = "C:\Program Files\Microsoft Office\Office\Samples\"

&#09;' Open database in Microsoft Access, specifying full path name.
&#09;appAccess.OpenCurrentDatabase conPath &amp; "Northwind.mdb"
&#09;' Return reference to current database.
&#09;Set dbs = appAccess.CurrentDb
&#09;' Create new TableDef object.
&#09;Set tdf = dbs.CreateTableDef("XLData")
&#09;' Specify connection string for Microsoft Excel ISAM driver.
&#09;tdf.Connect = "EXCEL 8.0; Database=C:\My Documents\Revenue.xls"
&#09;' Specify source table as a named range in a worksheet.
&#09;tdf.SourceTableName = "DataRange"
&#09;' Append new linked table to database.
&#09;dbs.TableDefs.Append tdf
&#09;' Create new report in Microsoft Access.
&#09;Set rpt = appAccess.CreateReport
&#09;' Specify linked table as report's record source.
&#09;rpt.RecordSource = tdf.Name
&#09;
&#09;' Create control on report for each field in linked table.
&#09;For Each fld In tdf.fields
&#09;&#09;Set ctl = appAccess.CreateReportControl(rpt.Name, acTextBox, , , _
&#09;&#09;&#09;fld.Name, intLeft)
&#09;&#09;intLeft = intLeft + ctl.Width
&#09;Next fld

&#09;' Open report in Print Preview.
&#09;appAccess.DoCmd.OpenReport rpt.Name, acViewPreview
&#09;' Restore report.
&#09;appAccess.DoCmd.Restore
&#09;' Display Microsoft Access as active application.
&#09;AppActivate "Microsoft Access"
End Sub

</code></pre></FONT>


<A NAME="PG003C6"></A>

</MENU></MENU></MENU>

<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H106">The Control Object and the Controls Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
The <B>Control</B> object represents a control on a Microsoft
Access form or report. <B>Control</B> objects are grouped in <B>Controls</B>
collections. The following table shows the relationship between
the <B>Control</B> object and the <B>Controls</B> collection and
other objects and collections in the Microsoft Access object hierarchy.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</FONT></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</FONT></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Control </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Controls </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Controls </B>collection, if the control is either an option group or a tab control
<P>
<B>Properties </B>collection
<P>
<B>Hyperlink </B>object
<P>
<B>Control </B>objects</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Controls </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Form </B>objects</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Report </B>objects</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Control </B>objects, if the control is an option group, tab control, text box, option button, toggle button, check box, combo box, list box, command button, bound object frame, or unbound object frame</FONT>
</FONT></TD><TD><BR><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
</FONT></TD></TR><P>
</TABLE>
<P>
Two types of controls are available to you in Microsoft Access.
The Microsoft Access 8.0 object library provides built&#173;in
controls, which are available in the toolbox. In addition to the
built&#173;in controls that appear in the toolbox, Microsoft Access
supports <I>ActiveX controls</I>, formerly called
<I>OLE controls</I> or <I>custom controls</I>.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H209">The Microsoft Access Controls</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex19"></a>
<P>
The following table describes the built&#173;in controls available
in Microsoft Access. The controls are listed by their class names,
as they appear in the Object Browser. 
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Control</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">BoundObjectFrame</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a picture, chart, or OLE object stored in a Microsoft Access table.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">CheckBox</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Indicates whether an option is selected.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ComboBox</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Combines a list box and a text box.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">CommandButton</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Starts an operation when the user clicks it.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Image</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a picture.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Label</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays descriptive text.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Line</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a horizontal, vertical, or diagonal line.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ListBox</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a list of values.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ObjectFrame</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a picture, chart, or OLE object that is not stored in a table.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">OptionButton</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Indicates whether an option is selected.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">OptionGroup</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a set of options together.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Page</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays controls on a page of a tab control.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">PageBreak</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Marks the start of a new screen or printed page.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Rectangle</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a rectangle.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">SubForm/SubReport</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a form within another form or a report within another report.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">TabControl</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays multiple pages, each of which can contain controls.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">TextBox</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays text data.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ToggleButton</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Indicates whether an option is on or off.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For a list of the properties, methods, and events supported by
each control, search Microsoft Access Help for the name of that
control, or view the control's members in the Object Browser.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H210">ActiveX Controls</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex20"></a>
<P>
An ActiveX control, like a built&#173;in control, is an object
that you place on a form to display data or perform an action.
However, unlike a built&#173;in control, the code that supports
the ActiveX control is stored in a separate file or files which
you must install in order to use the control.
<P>
The following ActiveX controls are available for you to use with
Microsoft Access:
<P>

<UL>
<P>
<LI>The Calendar control, which
makes it easy to display and update a monthly calendar on a form.
You can choose to install this control when you install Microsoft
Access.
<P>
<LI>The WebBrowser control, which you can
use to display Web pages and other documents in a Microsoft Access
form. The WebBrowser control is supplied by Microsoft Internet
Explorer version 3.0, which is available in the ValuPack folder
on the Microsoft Office&nbsp;97 or Microsoft Access&nbsp;97 CD&#173;ROM.
Alternatively, if you have access to the World Wide Web, you can
download Microsoft Internet Explorer version 3.0 from the Microsoft
home page, at <A HREF="http://www.microsoft.com/">http://www.microsoft.com/</A>.
When you install Microsoft Internet Explorer, the WebBrowser control
is automatically available for you to use in Microsoft Access.
<P>
<LI>For
examples of the Calendar control and the WebBrowser control, see
the Developer Solutions sample application that's included with
Microsoft Access.
<P>
</UL>

<P>
If you have Microsoft Office&nbsp;97, Developer Edition, you have
additional ActiveX controls, as described in the following table.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Control</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Animation</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays animations stored in .avi files.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">TabStrip</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays multiple pages, each of which can contain multiple controls.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ListView </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays data items in one of four list views.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">TreeView </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays data in an expandable tree format.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ImageList </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains a set of images for use with other ActiveX controls.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ToolBar </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays a custom toolbar with buttons.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">StatusBar</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays status information associated with a form.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">ProgressBar </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Shows the progress of a lengthy operation by filling a rectangle with blocks from left to right.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Slider </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Reflects a value or a range of values with a movable slider.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">RichTextBox </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays text with rich text formatting features.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">CommonDialog </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Displays one of a standard set of dialog boxes for operations such as opening, saving, and printing files or selecting colors and fonts.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">UpDown </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Increments or decrements numbers, or scrolls through a range of values or a list of items.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Winsock </FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Provides easy access to Transfer Control Protocol (TCP) and User Datagram Protocol (UDP) network services.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about using ActiveX controls, see Chapter&nbsp;12,
"<a href="012.htm">ActiveX Controls and Dialog Boxes</A>," or search Microsoft
Access Help for the name of the control. For information on the
properties, methods, and events supported by an ActiveX control,
see the documentation for that control, or set a reference to
the control's object library and view its members in the Object
Browser.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H211">Referring to Control Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex21"></a>
<P>
If you refer to a particular <B>Control</B> object repeatedly
throughout a procedure, you may want to declare a variable to
represent the <B>Control</B> object. If the control is a Microsoft
Access control and you know what type of control it is, you can
declare a variable of a specific control type. The following example
declares a variable of type <B>TextBox</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim txt As TextBox

</code></pre></FONT>
<P>
If you don't know what type of control your code may refer to
when it runs, or if it will refer to an ActiveX control, you must
declare a variable of the more generic type <B>Control</B> to
represent the control. For example, if you define a procedure
to which you can pass different types of controls, then you should
declare an argument of type <B>Control</B>, as shown in the following
code. You can pass any control to this function, but the function
will return <B>True</B> only for controls that contain a valid
hyperlink.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function FollowControlHyperlink(ctl As Control) As Boolean
&#09;Const conNoHyperlink As Integer = 7976

&#09;' Enable error handling.&#09;
&#09;On Error GoTo Error_FollowControlHyperlink
&#09;' Follow control's hyperlink.
&#09;ctl.Hyperlink.Follow
&#09;' Return True if successful.
&#09;FollowControlHyperlink = True

Exit_FollowControlHyperlink:
&#09;Exit Function

Error_FollowControlHyperlink:
&#09;If Err = conNoHyperlink Then
&#09;&#09;FollowControlHyperlink = False
&#09;End If
End Function

</code></pre></FONT>
<P>
To refer to an individual <B>Control</B> object in a <B>Controls</B>
collection when you know the control's name, use the <B>!</B>
operator syntax, as shown in the following example. Note that
you use the <B>Set</B> statement when you're returning a reference
to an object and assigning it to an object variable.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set txt = Forms!Employees!LastName&#09;' Returns reference to LastName
&#09;&#09;&#09;&#09;&#09;' control on Employees form.

</code></pre></FONT>
<P>
If you're referring to a control on the form in which code is
currently running, you can use the <B>Me</B> keyword to represent
the form, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set txt = Me!LastName&#09;&#09;' Returns reference to LastName control on
&#09;&#09;&#09;&#09;' form in which code is running.

</code></pre></FONT>

<P>
If you need to return a reference to a <B>Control</B> object and
you don't know its name when you're writing the procedure, you
can use the parentheses syntax to refer to the <B>Control</B>
object within the <B>Controls</B> collection. This is useful if
you want to pass the name of the control to a procedure as a variable.
You can also refer to an individual <B>Control</B> object by its
index number, which indicates its position within the <B>Controls</B>
collection. The <B>Controls</B> collection is indexed beginning
with 0 (zero). That is, the index number for the first <B>Control</B>
object in the <B>Controls</B> collection is 0, the second is 1,
and so on.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H212">Properties of the Control Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex22"></a>
<P>
The properties that apply to controls are too numerous to include
in this chapter, so this section discusses only two that deserve
special consideration. To see all of the available properties
of the <B>Control</B> object, search Microsoft Access Help for
"Control object," or view the members of the <B>Control</B>
object in the Object Browser.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The Hyperlink Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex23"></a>
<P>
The <B>Hyperlink</B> property returns a reference to a <B>Hyperlink</B>
object. A <B>Hyperlink</B> object represents a text or graphic
that contains a jump to a file, a location in a file, an HTML
page on the World Wide Web, or an HTML page on an intranet.
<P>
The controls that support the <B>Hyperlink</B> property include
the combo box, command button, image, label, and text box controls.
Each of these controls can display a hyperlink that the user can
click to follow. When you have a reference to a <B>Hyperlink</B>
object in a control, you can use the <B>Follow</B> method of the
<B>Hyperlink</B> object to follow the hyperlink, as shown in the
example in the previous section.
<P>
For more information about hyperlinks, see Chapter 15, "<a href="015.htm">Developing
Applications for the Internet and World Wide Web</A>."
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>The ControlType Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex24"></a>
<P>
The <B>ControlType</B> property indicates what type of control
a particular <B>Control</B> object is. For example, the following
procedure checks the <B>ControlType</B> property for each control
on a form and sets the <B>Locked</B> property of text boxes and
combo boxes to <B>True</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function LockTextControls(frm As Form) As Boolean
&#09;Dim ctl As Control

&#09;' Enable error handling.&#09;
&#09;On Error GoTo Error_LockTextControls

&#09;' Enumerate controls on form.
&#09;For Each ctl In frm.Controls
&#09;&#09;' If control is text box or combo box, set Locked property to True.
&#09;&#09;If ctl.ControlType = acTextBox Or ctl.ControlType = acComboBox Then
&#09;&#09;&#09;ctl.Locked = True
&#09;&#09;End If
&#09;Next ctl
&#09;' Return True if successful.
&#09;LockTextControls = True

Exit_LockTextControls:
&#09;Exit Function

Error_LockTextControls:
&#09;MsgBox Err &amp; ": " &amp; Err.Description
&#09;LockTextControls = False
&#09;Resume Exit_LockTextControls
End Function

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H213">Data&#173;Bound Controls</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex25"></a>
<P>
Some controls in Microsoft Access can be <I>data&#173;bound</I>,
which means they display data that is stored in a table, query,
or SQL statement. The Microsoft Access data&#173;bound controls
include the bound object frame, check box, combo box, list box,
option button, option group, text box, subform, and subreport
controls. Some ActiveX controls, such as the Calendar control,
can also be data&#173;bound. Data&#173;bound controls have a <B>ControlSource</B>
property, which you can set to the name of a field in a table,
query, or SQL statement to specify that the control should display
data from that field. Note that before you can set the <B>ControlSource</B>
property of a control, you must set the <B>RecordSource</B> property
of the form or report to specify which table, query, or SQL statement
supplies the data to the form or report. 
<P>
The following example sets the <B>RecordSource</B> property of
a form and the <B>ControlSource</B> property of a text box control
in the form's Load event.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Form_Load()
&#09;' Sets form's record source to Employees table.
&#09;Me.Recordsource = "Employees"
&#09;' Sets ControlSource property of text box to LastName field.
&#09;Me!Text0.ControlSource = "LastName"
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H214">Controls That Have a Controls Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex26"></a>
<P>
Several controls have a <B>Controls</B> collection that can contain
other controls. The option group control and the tab control can
both contain multiple controls. The option group control has a
<B>Controls</B> collection, which can contain option button, toggle
button, check box, and label controls. The tab control has a <B>Pages</B>
collection, and each <B>Page</B> object in the <B>Pages</B> collection
has a <B>Controls</B> collection. The <B>Controls</B> collection
for a <B>Page</B> object contains the <B>Control</B> objects on
that page. 
<P>
The following example displays the name of the first control on
the first page of a tab control on an Employees form.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim tbc As TabControl, pge As Page
Dim txt As TextBox

' Return reference to tab control.
Set tbc = Forms!Employees!TabCtl0
' Return reference to first page.
Set pge = tbc.Pages(0)
' Return reference to text box on page.
Set txt = pge.Controls(0)
MsgBox txt.Name

</code></pre></FONT>

<P>
Other controls have a <B>Controls</B> collection that can contain
a single control: an attached label. These controls include the
text box, option group, option button, toggle button, check box,
combo box, list box, command button, bound object frame, and unbound
object frame controls.
<A NAME="PG003C7"></A>

</MENU></MENU></MENU>

<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H107">The Module Object and the Modules Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex27"></a>
<P>
The <B>Module</B> object represents a module in Microsoft Access.
<B>Module</B> objects are contained in the <B>Modules</B> collection,
which is a member of the Microsoft Access <B>Application</B> object.
A <B>Form</B> or <B>Report</B> object can also contain a single
<B>Module</B> object.
<P>
The set of all modules in a Microsoft Access database make up
the Visual Basic<I> project</I> for that database.
The <B>Modules</B> collection contains all the currently open
modules in the project. <B>Modules</B> that are not open for editing
are not included in the <B>Modules</B> collection. To open a module
in Visual Basic, use the <B>OpenModule</B> method of the <B>DoCmd</B>
object.
<P>
The following table shows the relationship between the <B>Module</B>
object and the <B>Modules</B> collection and other objects in
the Microsoft Access object hierarchy.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</FONT></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</FONT></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Module </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Modules </B>collection</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Form </B>objects</FONT>
<P>
<FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Report </B>objects</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">None</FONT></FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Modules </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Application </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Module </B>objects</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H215">Referring to Module Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex28"></a>
<P>
To work with a <B>Module</B> object in Visual Basic, you need
to refer to the <B>Module</B> object in the <B>Modules</B> collection.
To refer to a module, you must make sure that the module is open.
You can refer to a standard or class <B>Module</B> object and
assign it to an object variable in any of the following ways:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim mdl As Module
Set mdl = Modules![Utility Functions]&#09;' Returns a reference to the
&#09;&#09;&#09;&#09;&#09;' Utility Functions module.
Set mdl = Modules("Utility Functions")&#09;' Returns a reference to the
&#09;&#09;&#09;&#09;&#09;' Utility Functions module.
Set mdl = Modules(0)&#09;&#09;&#09;' Returns a reference to the first
&#09;&#09;&#09;&#09;&#09;' module in the collection.

</code></pre></FONT>

<P>
A form or report class module that's open is included in the <B>Modules</B>
collection. To refer to a form or report class module that's not
open, use the <B>Module</B> property of the form or report to
return a reference to the associated <B>Module</B> object, as
discussed earlier in this chapter.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H216">Standard Modules vs. Class Modules</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex29"></a>
<P>
Microsoft Access contains two types of modules: <I>standard
modules</I> and <I>class modules</I>. Both types
of modules are available in the <B>Modules</B> tab of the Database
window. A form or report can also have an associated class module.
<P>
When you write code that you want to be available to any procedure
in the project, you should put that code in a standard module.
Standard modules are public by default, which means that any procedure
in the project can call a procedure or use a module&#173;level
variable defined in a standard module. Also, if you set a reference
to a project in a Microsoft Access database from another Microsoft
Access project, you can call code in a standard module in the
project to which you've set the reference.
<P>
Class modules, on the other hand, are always private. You can
use class modules to create custom objects to use within the current
project. However, you can't share those objects with other projects.
The <B>Sub</B> and <B>Function</B> procedures that you define
within a class module become methods of the custom object defined
by the class module, and any <B>Property Let</B>, <B>Property
Get</B>, and <B>Property Set</B> procedures become its properties.
<P>
You use the class module associated with a form or report to define
event procedures for the form or report and its controls. You
can also add any procedures that you want to be available only
to that particular form or report. 
<P>
For more information about standard modules and class modules,
search Microsoft Access Help for "standard modules"
or "class modules."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H217">Properties of the Module Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex30"></a>
<P>
The following table describes the properties of the <B>Module</B>
object.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Property</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Application </B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the <B>Application </B>object.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>CountOfDeclarationLines</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the number of lines of code in the Declarations section of a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>CountOfLines</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the number of lines of code in a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Lines</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the text of a specified line or lines of code.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Name</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the name of a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parent</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the object or collection that contains the module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ProcBodyLine</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the number of the line on which the procedure definition begins.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ProcCountLines</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the number of lines in a procedure.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ProcOfLine</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the name of the procedure that contains a particular line.</FONT>
</FONT></TD></TR><P>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ProcStartLine</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the number of the line on which a procedure begins.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Type</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Indicates whether a module is a class module or a standard module.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Determining the Number of Lines in a Module</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex31"></a>
<P>
The lines in a module are numbered beginning with 1. The number
of the last line in a module is equal to the value of the <B>CountOfLines</B>
property. The number of the last line in the Declarations section
of a module is equal to the value of the <B>CountOfDeclarationLines</B>
property.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT>&nbsp;&nbsp;&nbsp;Line
numbers don't actually appear in a module; they're used only for
reference.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Working with Procedures</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex32"></a>
<P>
You can use the <B>Lines</B>, <B>ProcBodyLine</B>, <B>ProcCountLines</B>,
<B>ProcOfLine</B>, and <B>ProcStartLine</B> properties to get
information about a procedure in a module. Procedures can be one
of four types: a <B>Sub</B> or <B>Function</B> procedure, a <B>Property
Get</B> procedure, a <B>Property Let </B>procedure, or a <B>Property
Set </B>procedure. <B>Sub</B> and <B>Function</B> procedures are
considered the same type. Most of your procedures will be of this
type. You don't need to be concerned with the last three unless
you're creating properties within class modules.
<P>
The <B>ProcBodyLine</B> property returns the number of the line
on which the procedure definition begins; that is, the line that
includes a <B>Sub</B>, <B>Function</B>, <B>Property Get</B>, <B>Property
Let</B>, or <B>Property Set</B> statement. The <B>ProcStartLine</B>
property returns the number of the line immediately following
the procedure separator, if you have the <B>Full Module View </B>and
<B>Procedure Separator </B>options set on the <B>Module</B> tab
of the <B>Options</B> dialog box (<B>Tools</B> menu). This line
number may or may not be the same as the one returned by the <B>ProcBodyLine</B>
property. Any comments, module&#173;level declarations, or empty
lines that precede the procedure definition are considered part
of the procedure. The <B>ProcStartLine</B> property returns the
number of the first line of the full procedure.
<P>
The following example uses the <B>ProcCountLines</B>, <B>ProcStartLine</B>,
<B>ProcBodyLine</B>, and <B>Lines</B> properties to print a procedure
in a module to the Debug window.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function ProcLineInfo(strModuleName As String, strProcName As String) As Boolean
&#09;Dim mdl As Module
&#09;Dim lngStartLine As Long, lngBodyLine As Long
&#09;Dim lngCount As Long, lngEndProc As Long

&#09;On Error GoTo Error_ProcLineInfo
&#09;' Open specified Module object.
&#09;DoCmd.OpenModule strModuleName
&#09;' Return reference to Module object.
&#09;Set mdl = Modules(strModuleName)

&#09;' Count lines in procedure.
&#09;lngCount = mdl.ProcCountLines(strProcName, vbext_pk_Proc)
&#09;' Determine start line.
&#09;lngStartLine = mdl.ProcStartLine(strProcName, vbext_pk_Proc)

&#09;' Determine body line.
&#09;lngBodyLine = mdl.ProcBodyLine(strProcName, vbext_pk_Proc)
&#09;Debug.Print

&#09;' Print all lines in procedure preceding body line.
&#09;Debug.Print "Lines preceding procedure " &amp; strProcName &amp; ": "
&#09;Debug.Print mdl.Lines(lngStartLine, lngBodyLine - lngStartLine)

&#09;' Determine line number of last line in procedure.
&#09;lngEndProc = (lngBodyLine + lngCount - 1) - Abs(lngBodyLine - lngStartLine)

&#09;' Print all lines in body of procedure.
&#09;Debug.Print "Body lines: "
&#09;Debug.Print mdl.Lines(lngBodyLine, (lngEndProc - lngBodyLine) + 1)
&#09;ProcLineInfo = True

Exit_ProcLineInfo:
&#09;Exit Function&#09;

Error_ProcLineInfo:
&#09;MsgBox Err &amp; " :" &amp; Err.Description
&#09;ProcLineInfo = False
&#09;Resume Exit_ProcLineInfo
End Function

</code></pre></FONT>

<P>
You can call this function from the Northwind sample database
with a procedure such as the following.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub GetProcInfo()
&#09;ProcLineInfo "Utility Functions", "IsLoaded"
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H218">Methods of the Module Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex33"></a>
<P>
The following table describes the methods of the <B>Module</B>
object.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Method</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddFromFile</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Adds the contents of a text file to a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddFromString</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Adds the contents of a string to a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>CreateEventProc</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Creates an event procedure within a class module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>DeleteLines</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Deletes specified lines from a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Find</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Finds specified text in a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>InsertLines</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Inserts a line or group of lines of code at a specified point in a module.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ReplaceLine</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Replaces a line in a module with specified text.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Adding Text to a Module</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex34"></a>
<P>
If you want to add a string of text to a module, use the <B>InsertLines</B>
method. With this method, you can specify at which line in the
procedure you want the text to be added.
<P>
The following example creates a new form, adds a command button,
creates a Click event procedure for the command button, and inserts
a line of code with the <B>InsertLines</B> method.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function ClickEventProc() As Boolean
&#09;Dim frm As Form, ctl As Control, mdl As Module
&#09;Dim lngReturn As Long

&#09;On Error GoTo Error_ClickEventProc
&#09;' Create new form.
&#09;Set frm = CreateForm
&#09;' Create command button on form.
&#09;Set ctl = CreateControl(frm.Name, acCommandButton, , , , 1000, 1000)
&#09;ctl.Caption = "Click here"
&#09;' Return reference to form module.
&#09;Set mdl = frm.Module
&#09;' Add event procedure.
&#09;lngReturn = mdl.CreateEventProc("Click", ctl.Name)
&#09;' Insert text into body of procedure.
&#09;mdl.InsertLines lngReturn + 1, vbTab &amp; "MsgBox ""Way cool!"""
&#09;ClickEventProc = True

Exit_ClickEventProc:
&#09;Exit Function

Error_ClickEventProc:
&#09;MsgBox Err &amp; " :" &amp; Err.Description
&#09;ClickEventProc = False
&#09;Resume Exit_ClickEventProc
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Creating a New Module</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex35"></a>
<P>
You can create a new module with the <B>RunCommand</B> method
of the <B>Application</B> object. The following example creates
a new module and opens it in Design view. Note that this code
may not run in every view.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>RunCommand acCmdNewObjectModule

</code></pre></FONT>
<P>
You may want to add a new module with Visual Basic in order to
add text from a file. The following example uses the <B>AddFromFile</B>
method to add the contents of a text file to a new module. The
procedure saves the new module with the same name as the text
file.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function AddFromTextFile(strFileName) As Boolean
&#09;Dim strModuleName As String, intPosition As Integer
&#09;Dim intLength As Integer
&#09;Dim mdl As Module

&#09;' Store file name in variable.
&#09;strModuleName = strFileName

&#09;' Remove directory path from string.
&#09;Do
&#09;&#09;' Find \ character in string.
&#09;&#09;intPosition = InStr(strModuleName, "\")
&#09;&#09;If intPosition = 0 Then
&#09;&#09;&#09;Exit Do
&#09;&#09;Else
&#09;&#09;&#09;intLength = Len(strModuleName)
&#09;&#09;&#09;' Remove path from string.
&#09;&#09;&#09;strModuleName = Right(strModuleName, Abs(intLength - intPosition))
&#09;&#09;End If
&#09;Loop

&#09;' Remove file extension from string.
&#09;intPosition = InStr(strModuleName, ".")
&#09;If intPosition &gt; 0 Then
&#09;&#09;intLength = Len(strModuleName)
&#09;&#09;strModuleName = Left(strModuleName, intPosition - 1)
&#09;End If

&#09;' Create new module.
&#09;RunCommand acCmdNewObjectModule
&#09;' Save module with name of text file, excluding path and extension.
&#09;DoCmd.Save , strModuleName
&#09;' Return reference to Module object.
&#09;Set mdl = Modules(strModuleName)
&#09;' Add contents of text file.
&#09;mdl.AddFromFile strFileName
&#09;' Save module with new text.
&#09;DoCmd.Save
End Function

</code></pre></FONT>

<P>
When you run this procedure, avoid stepping through the line that
first saves the module. If you enter break mode by stepping through
this line, the module in which the code is running gets the focus,
rather than the module that the code has just created. Visual
Basic then tries to save the module in which the code is running
rather than the new module.
<P>
Note that to create a new module with the <B>RunCommand</B> method,
the <B>Module</B> command on the <B>Insert</B> menu must be available.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H219">Class Module Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex36"></a>
<P>
Class modules that aren't associated with a form or report have
two events: the Initialize event and the Terminate event. The
Initialize event occurs when you create a custom object in memory
from its class definition. The Terminate event occurs when you
remove a custom object from memory.
<P>
To create event procedures for the Initialize and Terminate events,
open the class module and click <B>Class</B> in the <B>Object</B>
box. Then click <B>Initialize</B> or <B>Terminate</B> in the <B>Procedure</B>
box.
<P>
You can use these events to run code when you create a custom
object in memory or remove it from memory. For example, you may
want to initialize a module&#173;level variable defined in the
class module when you create a custom object. The following example
declares a module&#173;level variable. When the Initialize event
procedure runs, Visual Basic assigns the variable a value.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>' Declare module-level variable.
Public intX As Integer

Private Sub Class_Initalize()
&#09;intX = 10
End Sub

</code></pre></FONT>


<A NAME="PG003C8"></A>

</MENU></MENU></MENU>

<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H108">The Reference Object and the References
Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex37"></a>
<P>
The <B>Reference</B> object represents a reference from Microsoft
Access to another project or object library. <B>Reference</B>
objects are contained in the <B>References</B> collection. Each
<B>Reference</B> object in the <B>References</B> collection corresponds
to a reference that is set in the <B>References</B> dialog box
(<B>Tools</B> menu).
<P>
You can use the <B>Reference</B> object and <B>References</B>
collection to add references with Visual Basic, to check existing
references, or to remove references that are no longer needed.
<P>
The following table shows the relationship between the <B>Reference</B>
object and the <B>References</B> collection and other objects
in the Microsoft Access object hierarchy.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=30% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Object or collection</FONT></B>
</FONT></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Is contained by</FONT></B>
</FONT></TD><TD WIDTH=35% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Contains</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Reference </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>References </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">None</FONT></FONT></TD></TR>

<TR><TD WIDTH=30% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>References </B>collection</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Application </B>object</FONT>
</FONT></TD><TD WIDTH=35% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Reference </B>object</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H220">Referring to Reference Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex38"></a>
<P>
To work with a <B>Reference</B> object in Visual Basic, you need
to refer to the <B>Reference</B> object in the <B>References</B>
collection. You can refer to a <B>Reference</B> object and assign
it to an object variable in any of the following ways:

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim ref As Reference
Set ref = References!VBA&#09;' Assigns Reference object to a variable.
Set ref = References("VBA")&#09;' Assigns Reference object to a variable.
Set ref = References(1)&#09;&#09;' Returns a reference to the first Reference
&#09;&#09;&#09;&#09;' in the collection.

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H221">Properties of the Reference Object</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex39"></a>
<P>
The following table describes the properties of the <B>Reference</B>
object.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Property</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>BuiltIn</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Indicates whether a <B>Reference </B>object points to a default reference that's necessary for Microsoft Access to function properly.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Collection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the <B>References </B>collection.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>FullPath</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the path and file name of the referenced project or object library.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>GUID</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the globally unique identifier (GUID) for a referenced project or object library. A GUID is stored in the Windows registry.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>IsBroken</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Indicates whether a <B>Reference </B>object points to a valid reference.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Kind</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Indicates whether a <B>Reference </B>object points to a Visual Basic project or to an object library.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Major</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the value to the left of the decimal point in the version number of a file to which a reference has been set.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Minor</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the value to the right of the decimal point in the version number of a file to which a reference has been set.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Name</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns the name of the project or object library to which a reference has been set.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about each of these properties, search Microsoft
Access Help for the name of the property.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H222">Methods of the References Collection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex40"></a>
<P>
The following table describes the methods of the <B>References</B>
collection.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Method</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddFromFile</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Creates a reference to a file that contains a project or object library.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>AddFromGUID</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Creates a reference to a project or object library based on its GUID, which is stored in the Windows registry.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Item</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a particular member of the <B>References </B>collection.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Remove</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Removes a <B>Reference </B>object from the <B>References </B>collection.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about each of these methods, search Microsoft
Access Help for "References collection."
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Setting a Reference in Visual Basic</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex41"></a>
<P>
You can use the <B>AddFromFile</B> or <B>AddFromGUID</B> method
to set a reference in Visual Basic. The following example creates
a reference at run time.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Function AddReference(strFilePath As String) As Boolean
&#09;Dim ref As Reference

&#09;Const conReferenceExists As Long = 32813
&#09;
&#09;On Error GoTo Error_AddReference
&#09;' Add reference to project or object library.
&#09;Set ref = References.AddFromFile(strFilePath)
&#09;AddReference = True

Exit_AddReference:
&#09;Exit Function

Error_AddReference:
&#09;If Err &lt;&gt; conReferenceExists Then
&#09;&#09;MsgBox Err &amp; ": " &amp; Err.Description
&#09;End If
&#09;AddReference = False
&#09;Resume Exit_AddReference
End Function

</code></pre></FONT>

<P>
You can call this function to set a reference to the Developer
Solutions sample application, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub SetSolutionsReference()
&#09;Const strRefPath As String = "C:\Program Files\Microsoft Office" _
&#09;&#09;&amp; "\Office\Samples\Solutions.mdb"

&#09;If AddReference(strRefPath) = True Then
&#09;&#09;MsgBox "Reference set successfully."
&#09;Else
&#09;&#09;MsgBox "Reference not set successfully."
&#09;End If
End Sub

</code></pre></FONT>

<P>
<A NAME="PG003C9"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H109">The DoCmd Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
You can use the <B>DoCmd</B> object to carry out macro actions
in Visual Basic. Macro actions perform common operations that
aren't supported by other objects. For example, you can use methods
of the <B>DoCmd</B> object to open, save, or close tables, forms,
queries, reports, macros, and modules in Visual Basic. You can
also use methods of the <B>DoCmd</B> object to maximize, minimize,
or restore a window. Several of the examples in this chapter demonstrate
the uses of the <B>DoCmd</B> object&nbsp;&#151; for example,
the ProcLineInfo procedure in "<A HREF="#CH003H217">Properties of the Module Object</A>"
earlier in this chapter.
<P>
To see a list of the methods of the <B>DoCmd</B> object, search
for "DoCmd" in the Object Browser. You can also see
a list of the methods of the <B>DoCmd</B> object, as well as get
more information on each method, by searching Microsoft Access
Help for "DoCmd object."
<P>
<A NAME="PG003C10"></A>

</MENU></MENU></MENU>

<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H110">The Screen Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex42"></a>
<P>
The <B>Screen</B> object refers to the form, report, datasheet,
or control that has the focus. You use the <B>Screen</B> object
to work with a particular object on the current screen. For example,
you can use the <B>ActiveForm</B> property of the <B>Screen</B>
object to return a reference to the form in the active window
without knowing the form's name. This is useful when you need
to work with the active form but don't necessarily know which
form that will be.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH003H223">Properties of the Screen Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex43"></a>
<P>
The following table describes the properties of the <B>Screen</B>
object.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Property</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ActiveControl</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the control that has the focus.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ActiveDatasheet</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the datasheet that has the focus.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ActiveForm</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the form that has the focus.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>ActiveReport</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the report that has the focus.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Application</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the <B>Application </B>object.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>MousePointer</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Sets or returns a value that specifies the type of mouse pointer currently displayed.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>Parent</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the object that contains the <B>Screen </B>object.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica"><B>PreviousControl</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Returns a reference to the control that last had the focus.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
When you use the <B>Screen</B> object, you may want to implement
error handling because an object other than the one you expect
may have the focus when your code runs. It may be preferable to
first use the <B>SetFocus</B> method of a form, report, or control
to set the focus to the object you want, so that you can always
be certain that the correct object has the focus. Also, avoid
using the <B>Screen</B> object with the <B>OutputTo</B> method
of the <B>DoCmd </B>object.
<P>
Note that the <B>ActiveForm</B> property and the <B>Me</B> property
do not necessarily return a reference to the same form. The <B>Me</B>
property represents the form in which code is currently running.
The <B>ActiveForm</B> property returns a reference to the form
that is active on the screen, which may not be the form in which
code is currently running. For example, a Timer event may occur
on a form that is not the active form. You can use the <B>Me</B>
property to refer to the form on which the Timer event is occurring,
and the <B>ActiveForm</B> property to refer to the form that is
active on the screen while the Timer event is occurring.
<P>
The following example uses a Timer event to requery the active
form at regular intervals. The form on which the Timer event occurs
may or may not be the active form.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Form_Load()
&#09;Me.TimerInterval = 30000
End Sub

Private Sub Form_Timer()
&#09;Const conFormNotActive As Integer = 2475
&#09;Const conFormInDesignView As Integer = 2478

&#09;On Error GoTo Error_Timer
&#09;' Requery record source for active form.
&#09;Screen.ActiveForm.Requery

Exit_Timer:
&#09;Exit Sub

Error_Timer:
&#09;If Err = conFormNotActive Or Err = conFormInDesignView Then
&#09;&#09;Resume Exit_Timer
&#09;Else
&#09;&#09;MsgBox Err &amp; ": " &amp; Err.Description
&#09;End If
End Sub

</code></pre></FONT>
</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>
</FONT>
</FONT></BODY>



</HTML>

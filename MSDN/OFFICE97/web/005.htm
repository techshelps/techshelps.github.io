<HTML>

<Head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 5: Microsoft Outlook Objects</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<!--TOOLBAR_START-->
<!--TOOLBAR_END-->
<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 5</B></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5><B>Microsoft Outlook Objects</B></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>


<P>
<FONT SIZE=3><B>Contents</B></FONT>

<UL>
<LI><A HREF="#CH005H101">The Outlook Object
Model</A>
<BR>
<LI><A HREF="#CH005H102">Working with Outlook Folders</A>
<BR>
<LI><A HREF="#CH005H103">Working with Outlook
Items and Events</A>
<BR>
<LI><A HREF="#CH005H104">Using Automation
and VBScript</A>
</UL>

<P>
Microsoft Outlook&nbsp;97, the desktop information management
program included in Microsoft Office&nbsp;97, is fully programmable
and can be automated to build useful group software and mail&#173;enabled
applications. Although Outlook doesn't contain Visual Basic for
Applications version 5.0, it does include a complete type library
and Visual Basic Scripting Edition (VBScript). Using the Outlook
type library and VBScript, you can write procedures that respond
to specific events&nbsp;&#151; such as opening or replying
to a mail message or clicking a control on a form&nbsp;&#151;
and store those procedures in a custom form. Using the type library
and Visual Basic in Microsoft Access, Microsoft Excel, Microsoft
Word, or Microsoft PowerPoint, you can control an entire Outlook
session by using Automation (formerly OLE Automation).
<P>
This chapter provides a general overview of the objects exposed
by the Outlook type library, and then it focuses on techniques
for handling Outlook folders and items programmatically. Finally,
the chapter compares Automation and VBScript and discusses the
restrictions and guidelines for using each one.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>This
chapter doesn't discuss designing and distributing custom Outlook
solutions. For information about developing Outlook solutions,
see <I>Building Microsoft Outlook&nbsp;97 Applications</I> by Peter Krebs,
available from Microsoft Press (ISBN 1-57231-5736-9).
<BR>

<P>
<TABLE WIDTH=80% CELLPADDING=15 BORDER=1 CELLSPACING=0 BORDERCOLOR=#0000FF><TR BGCOLOR=#FFFFFF><TD>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<P>
<a name="dex1"></a>
<P>
<B>How Do I Display Visual Basic Help for Outlook?</B>
<P>
Visual Basic Help for Outlook isn't installed during setup; instead,
you must copy the files Vbaoutl.hlp and Vbaoutl.cnt from the ValuPack
folder to the folder in which you've installed Outlook. For more
information about installing and using Visual Basic Help for Outlook,
see "Getting Help for Visual Basic in Microsoft Outlook"
in Outlook Help.
<P>
To see the table of contents and index for Visual Basic Help for
Outlook, you must display the Script Editor window while an Outlook
item is open in design mode. To design an Outlook item, open any
item except a note, and then click <B>Design Outlook Form</B>
on the <B>Tools</B> menu. In design mode, click <B>View Code</B>
on the <B>Form</B> menu to display the Script Editor. In the Script
Editor, click <B>Microsoft Outlook Object Library Help</B> on
the <B>Help</B> menu. The <B>Help Topics</B> dialog box should
appear, displaying the table contents and index for Visual Basic
Help for Outlook.
<P>
</FONT></TD></TR>
</TABLE>

<P>
<A NAME="CH005H101"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH005H101">The Outlook Object Model</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex2"></a>
<P>
In the Outlook object model, the <B>Application</B> object contains
the <B>NameSpace</B> object, which contains <B>MAPIFolder</B>
objects that represent all the available folders in a given data
source (for example, a MAPI message store). The <B>MAPIFolder</B>
objects contain objects that represent all the Outlook items in
the data source, and each item contains some useful programmable
objects for controlling that item. In addition, there's an <B>Explorer</B>
object associated with each folder and an <B>Inspector</B> object
associated with each item.
<P>
For a visual representation of the Outlook object model, see "Microsoft
Outlook Objects" in Help.
<P>
<FONT SIZE=4><B><A NAME="CH005H201">Application Object</A></B></FONT>


<P>
The <B>Application</B> object is the root object of the object
model; it gives you easy access to all the other objects in the
model. It gives you direct access to new items you create by using
<B>CreateItem</B>, without having to traverse the object model,
and it gives you access to the objects that represent the Outlook
interface (the <B>Explorer</B> and <B>Inspector</B> objects).
The <B>Application</B> object is the only Outlook object you can
return by using the <B>CreateObject</B> or <B>GetObject</B> function
in another application.
<P>
<FONT SIZE=4><B><A NAME="CH005H202">NameSpace Object</A></B></FONT>


<P>
The <B>NameSpace</B> object can represent any recognized data
source, such as a MAPI message store. The object itself provides
methods for logging in and out, returning objects directly by
ID, returning default folders directly, and gaining access to
data sources owned by other users.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>MAPI
message stores, which are returned by the expression <FONT SIZE=2 FACE="COURIER NEW,COURIER">GetNameSpace("MAPI")</FONT>,
are the only data sources currently supported by Microsoft Outlook.
<P>
<FONT SIZE=4><B><A NAME="CH005H203">Folders Collection and MAPIFolder Object</A>
</B></FONT>


<P>
The <B>Folders</B> collection contains all the <B>MAPIFolder</B>
objects in the specified message store (or other recognized data
source) or in a folder in that message store. For more information
about using the objects that represent Outlook folders, see "<A HREF="#CH005H102">Working with Outlook Folders</A>" later in this chapter.
<P>
<FONT SIZE=4><B><A NAME="CH005H204">Items Collection</A></B></FONT>


<P>
The <B>Items</B> collection contains all the Outlook items in
the specified folder. Items and controls on items are the only
objects in Outlook that support programmable events. For information
about using the objects that represent Outlook items (such as
<B>MailItem</B> and <B>AppointmentItem</B>) and the objects contained
in Outlook items (such as <B>Attachments</B> and <B>Recipients</B>),
as well as the events they support, see the following section,
"<A HREF="#CH005H103">Working with Outlook Items and Events</A>."
<P>
<FONT SIZE=4><B><A NAME="CH005H205">Explorer and Inspector Objects</A></B></FONT>
<P>
The <B>Explorer</B> object represents the window in which the
contents of a folder are displayed. The <B>Inspector</B> object
represents the window in which an Outlook item is displayed.
<P>
For information about using the <B>Explorer</B> and <B>Inspector</B>
objects, see "<A HREF="#CH005H104">Using Automation and VBScript</A>" later in this chapter.
<P>
<A NAME="CH005H102"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH005H102">Working with Outlook Folders</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex3"></a>
<P>
Just as you can use Outlook to explore the contents of any folder
in your message store, you can automate Outlook to add folders
or items to folders or to move and copy items and folders among
folders in your message store.
<P>
To return the <B>Folders</B> collection from a <B>NameSpace</B>
object or another <B>MAPIFolder</B> object, use the <B>Folders</B>
property. To return a single <B>MAPIFolder</B> object, use <B>Folders</B>(<I>index</I>),
where <I>index</I> is the folder's name or index number.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>Folder
names are case&#173;sensitive.
<P>
The following Automation example returns the folder named "Urgent"
from the message store for Shannon Boyd. This example assumes
that Shannon Boyd is currently logged on in Outlook.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olMAPI = GetObject("","Outlook.Application").GetNameSpace("MAPI")
Set urgentFolder = olMAPI.Folders("Mailbox - Shannon Boyd").Folders("Urgent")

</code></pre></FONT>

<P>
Certain folders within an Outlook message store support the default
functionality of Outlook and are created the first time Outlook
is run. Each folder contains Outlook items of the same type. The
following table describes these default folders.
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Default folder</FONT></B></TD>
<TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Description</FONT></B></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Calendar</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Default container for <B>AppointmentItem </B>objects.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Contacts</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Default container for <B>ContactItem </B>objects.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Deleted Items</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Storage area into which all item objects are moved when they're marked for deletion. The application has options to retain such items indefinitely, archive them after a user&#173;defined period of time or purge them when the application is closed.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Inbox</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Default container for <B>MailItem </B>objects.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Journal</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Default container for <B>JournalItem </B>objects.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Notes</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Default container for <B>NoteItem </B>objects.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Outbox</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Storage area for items that are completed but not sent.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Sent Mail</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Storage area into which copies of user-generated <B>MailItem </B>objects are moved when they're sent.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Tasks</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Default container for <B>TaskItem </B>objects.</FONT>
</TD></TR><P>
</TABLE>
<P>
You can quickly return a default folder by using the <B>GetDefaultFolders</B>
method with the appropriate <B>OlDefaultFolders</B> constant.
The following VBScript example returns the Inbox folder for the
user who's currently logged on to Outlook.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olMAPI = Application.GetNameSpace("MAPI")
Set curInbox= olMAPI.GetDefaultFolder(6)

</code></pre></FONT>


<P>
One of the most useful features of Outlook is delegation, where
one user delegates access to another user for one or more of their
default folders. Most often, this will be a shared Calendar folder
through which members of a group will coordinate their individual
schedules with a joint schedule or even a master schedule for
the group as a whole. To return a <B>MAPIFolder</B> object that
represents a shared default folder for a specific user, use the
<B>GetSharedDefaultFolder</B> method. The following Automation
example returns Kim Buhler's shared Calendar folder.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olMAPI = GetObject("","Outlook.Application").GetNameSpace("MAPI")
Set myRecipient = olMAPI.CreateRecipient("Kim Buhler")
myRecipient.Resolve
If myRecipient.Resolved Then
&nbsp;&nbsp;&nbsp; Set schedKim = olMAPI.GetSharedDefaultFolder(myRecipient, _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  olFolderCalendar)
End If

</code></pre></FONT>


<P>
You can set folders in the Outlook message store to contain only
certain types of objects. For example, you can have the Calendar
folder contain only <B>AppointmentItem</B> objects and have the
Contacts folder contain only <B>ContactItem</B> objects.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>When
items of a specific type are saved, they're saved directly into
their corresponding default folder. For example, when the GetAssociatedAppointment
method is applied to a MeetingRequestItem object in the Inbox
folder, the AppointmentItem object that's returned will be saved
to the default Calendar folder.
<P>
To add a folder to the <B>Folders</B> collection, use the <B>Add</B>
method. The <B>Add</B> method has an optional argument you can
use to specify the type of items that can be stored in that folder.
By default, a folder created inside another folder inherits the
parent folder's type. The following VBScript example adds a new
folder named "Caterers" to the current (default) Contacts
folder.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olMAPI = Application.GetNameSpace("MAPI")
Set myContacts = olMAPI.GetDefaultFolder(10)
Set caterers = myContacts.Folders.Add("Caterers")

</code></pre></FONT>

<P>
If you've used the <B>ActiveExplorer</B> property to return the
<B>Explorer</B> object that represents the currently displayed
folder in an Outlook session, you can use the <B>CurrentFolder</B>
property to return the corresponding <B>MAPIFolder</B> object,
as shown in the following Automation example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olApp = GetObject("","Outlook.Application")
Set currFldr = olApp.ActiveExplorer.CurrentFolder

</code></pre></FONT>

<P>
To return an <B>Explorer</B> object associated with a given <B>MAPIFolder</B>
object, use the <B>GetExplorer</B> method.
<P>
<A NAME="CH005H103"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH005H103">Working with Outlook Items and Events</A></B></FONT>
<MENU><MENU>


<P>
<a name="dex4"></a>
<P>
Outlook items are represented by the fundamental objects in the
Outlook object model. These objects represent mail messages, appointments
or meetings, meeting requests, tasks, task requests, contacts,
journal entries, posts, mail delivery reports, remote mail items,
and notes. The following table describes the objects that represent
Outlook items.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Object</FONT></B></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Description</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>AppointmentItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents an appointment in the Calendar folder. An <B>AppointmentItem</B> object can represent either a one-time or recurring meeting or appointment. 
An appointment becomes a meeting when the <B>MeetingStatus</B> property is set to <B>olMeeting</B> and one or more resources (either personnel, in the form of required or optional attendees, or physical resources, such as a conference room) are designated. These actions result in the creation of a <B>MeetingRequestItem</B> object.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ContactItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a contact in a Contacts folder. A contact can represent any person with whom you have any personal or professional contact.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>JournalItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a journal entry in a Journal folder. A journal entry represents a record of all Outlook-moderated transactions for any given period of time.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>MailItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a mail message in the Inbox folder or another mail folder. The <B>MailItem</B> object is the default item object and, to some extent, the basic element of Outlook. 
In addition to the <B>MailItem</B> object, Outlook also has a parallel <B>PostItem</B> object that has all of the characteristics of the mail message, differing only in that it's posted (written directly to a folder) rather than sent (mailed to a recipient), and it has two subordinate objects&nbsp;&#151; <B>RemoteItem</B> and <B>ReportItem</B> objects&nbsp;&#151; that are subsets of the mail message used to handle remote mail items and mail transport system reports, respectively.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>MeetingRequestItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a change to the recipient's Calendar folder, initiated either by another party or as a result of a group action. Unlike with other Outlook objects, you cannot create a <B>MeetingRequestItem</B> object or find an existing one in the <B>Items</B> collection. 
This object is created automatically when you set the <B>MeetingStatus</B> property of an <B>AppointmentItem</B> object to <B>olMeeting</B> and send it to one or more users.</FONT>
<P>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>To return the <B>AppointmentItem</B> object associated with a <B>MeetingRequestItem</B> object and work directly with the <B>AppointmentItem</B> object to respond to the request, use the <B>GetAssociatedAppointment</B> method.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>NoteItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a note (an annotation attached to a document) in a Notes folder.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>PostItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a post in a public folder that other users can browse. This object is similar to the <B>MailItem</B> object, differing only in that it's posted (saved) directly to the target public folder, not sent (mailed) to a recipient. You use the <B>Post</B> method, which is analogous to the <B>Send</B> method for the <B>MailItem</B> object, to save the post to the target public folder instead of mailing it.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>RemoteItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a remote item in the Inbox folder or another mail folder. This object is similar to the <B>MailItem</B> object, but it contains only the <B>Subject</B>, <B>Received</B>, <B>Date</B>, <B>Time</B>, <B>Sender</B>, and <B>Size</B> properties and the first 256 characters of the body of the message. 
You use it to give someone who's connecting in remote mode enough information to decide whether or not to download the corresponding mail message.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ReportItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a mail-delivery report in the Inbox folder or another mail folder. This object is similar to the <B>MailItem</B> object, and it contains a report (usually the nondelivery report) or error message from the mail transport system.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>TaskItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a task (an assigned, delegated, or self-imposed task to be performed within a specified time frame) in a Tasks folder. Like appointments or meetings, tasks can be delegated. Tasks are delegated when you assign them to one or more delegates, using the <B>Assign </B> method.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>TaskRequestItem</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents a change to the recipient's task list, initiated either by another party or as a result of a group assignment. Unlike with other Outlook objects, you cannot create a TaskRequestItem object or find an existing one in the Items collection. It's created automatically when you apply the Assign method to a TaskItem object to assign (delegate) the associated task to another user.</FONT>
<P>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>To return the TaskRequestItem object and work directly with the TaskItem object to respond to the request, use the GetAssociatedTask method.</FONT>
</TD></TR>

<P>
</TABLE>
<P>
The <B>Items</B> collection of a <B>MAPIFolder</B> object contains
the objects that represent all the Outlook items in the specified
folder. If a given folder doesn't contain any Outlook items, the
<B>Count</B> property for the <B>Items</B> collection is 0 (zero).
<P>
To return the <B>Items</B> collection of a <B>MAPIFolder</B> object,
use the <B>Items</B> property. To return a single <B>AppointmentItem</B>,
<B>ContactItem</B>, <B>JournalItem</B>, <B>MailItem</B>, <B>NoteItem</B>,
<B>PostItem</B>, or <B>TaskItem</B> object from its respective
<B>Items</B> collection, use <B>Items</B>(<I>index</I>),
where <I>index</I> is the item's name or index number.
<P>
The following example returns the first item with the subject
"Need your advice" in <FONT SIZE=2 FACE="COURIER NEW,COURIER">myFolder</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set myItem = myFolder.Items("Need your advice")

</code></pre></FONT>


<P>
The following example returns the first item in <FONT SIZE=2 FACE="COURIER NEW,COURIER">myFolder</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set myItem = myFolder.Items(1)

</code></pre></FONT>


<P>
To add items to the <B>Items</B> collection, use the <B>Add</B>
method.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you don't specify item type, it defaults to the type of the parent
folder, or to MailItem if this folder doesn't have a type assigned
to it. You can also assign to an item any valid message class
as a type. You'll want to do this when you're creating customs
forms.
<P>
The following Automation example gets the current Contacts folder
and adds a new <B>ContactItem</B> object to it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olMAPI = GetObject("","Outlook.Application").GetNameSpace("MAPI")
Set myItem = olMAPI.GetDefaultFolder(olFolderContacts).Items.Add

</code></pre></FONT>


<P>
The following VBScript example adds a custom form to the default
Tasks folder.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olMAPI = Application.GetNameSpace("MAPI")
Set myForm = olMAPI.GetDefaultFolder(13).Items _
&nbsp;&nbsp;&nbsp; .Add("IPM.Task.myTask")

</code></pre></FONT>


<P>
The easiest way to return a new <B>AppointmentItem</B>, <B>ContactItem</B>,
<B>JournalItem</B>, <B>MailItem</B>, <B>NoteItem</B>, <B>PostItem</B>,
or <B>TaskItem</B> object directly from the <B>Application</B>
object is to use the <B>CreateItem</B> method with the appropriate
<B>OlItems</B> constant. The following VBScript example uses the
<B>Application</B> object to create a new contact.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set myContact = Application.CreateItem(2)

</code></pre></FONT>

<P>
If you've used the <B>ActiveInspector</B> property to return an
<B>Inspector</B> object, you can use the <B>CurrentItem</B> property
to return the object that represents the Outlook item displayed
in the inspector. The following Automation example returns the
active <B>Inspector</B> object and displays the name of the item
that the inspector is displaying.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Set olApp = GetObject("","Outlook.Application")
Set currInspect = olApp.ActiveInspector
MsgBox "The active item is " &amp; currInspect.CurrentItem.Subject

</code></pre></FONT>


<P>
To return an <B>Inspector</B> object associated with an Outlook
item, use the <B>GetInspector</B> method.
<P>
<FONT SIZE=4><B><A NAME="CH005H206">Objects Supported by Outlook Items</A>
</B></FONT>

<P>
<a name="dex5"></a>
<P>
Every Outlook item can be analyzed or modified by reading or setting
its properties or applying its methods. In addition, every Outlook
item can contain other objects that represent more complex qualities
or behaviors of the item; for example, there are objects that
represent the recipients of the item, the files attached to the
item, and the customized pages and controls of the item. The following
table describes the objects contained in Outlook items.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Object</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Description</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Actions</B> (<B>Action</B>)</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represent specialized actions (for example, the voting options response) that you can perform on an item.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Attachments </B>(<B>Attachment</B>)</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represent linked or embedded objects contained in an item.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>FormDescription</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents the general properties of the form for an item.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Pages</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents the customized pages of an item. Every <B>Inspector </B>object has a <B>Pages </B>collection, whose count is 0 (zero) if the item has never been customized before.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Recipients </B>(<B>Recipient</B>)</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represent users or resources in Outlook; generally, recipients are mail message addressees.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>RecurrencePattern</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represents the pattern of incidence of recurring appointments and tasks for the associated <B>AppointmentItem </B>or <B>TaskItem </B>object.</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>UserProperties </B>(<B>UserProperty</B>)</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Represent the custom fields added to an item at design time.</FONT>
</TD></TR>
</TABLE>
<P>
For more information about these objects, as well
as examples of using them in code, see the corresponding topics
in Help.
<P>
<FONT SIZE=4><B><A NAME="CH005H207">Events Supported by Outlook Items</A>
</B></FONT>


<P>
<a name="dex6"></a>
<P>
The events supported by Outlook items are the key to programming
Outlook in VBScript. While designing a form, you can write event
procedures in the Script Editor and save that script with the
form. You can write procedures that respond to changes in the
item or that respond to the user's clicking a control on the form.
Within an event procedure, you can use any of the objects exposed
by the Outlook type library. For information about the features
and restrictions of VBScript, see "<A HREF="#CH005H104">Using Automation and VBScript</A>"
later in this chapter.
<P>
The names of event procedures for items are composed of the word
"Item" followed by an underscore character (_) and the
name of the event (for example, "Item_Open"). Within
an event procedure, you can use the word "Item" to refer
to the object that represents the Outlook item where the event
occurred. The following example adds the date and time that the
Outlook item was opened to the end of the item's subject line.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_Open()
Item.Subject = Item.Subject &amp; " [opened " &amp; Now &amp; "]"
End Function

</code></pre></FONT>


<P>
For information about adding event procedures to a script in Outlook,
see "<A HREF="#CH005H104">Using Automation and VBScript</A>" later in this chapter.
<P>
Your procedures can respond to some events in Outlook by preventing
the default behavior of Outlook from occurring&nbsp;&#151;
that is, the procedures can interrupt the events. For example,
if the user clicks <B>Save</B> on the <B>File</B> menu of an item,
you can prompt the user for confirmation and prevent the item
from being saved if the user reconsiders. Procedures that interrupt
events can be declared as <B>Function</B> procedures; to indicate
whether a given event should be allowed to finish, you assign
<B>True</B> or <B>False</B> to the function value before the procedure
ends. Events that can be interrupted include the following: Close,
CustomAction, Forward, Open, Reply, ReplyAll, Send, and Write.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you don't intend to interrupt an event that can be interrupted,
you can declare your procedure as a Sub procedure rather than
a Function procedure. Procedures that respond to events that cannot
be interrupted must be declared as Sub procedures.
<P>
<FONT SIZE=3><B>Close Event</B></FONT>


<P>
The Close event occurs when the inspector associated with the
item is being closed. When the event occurs, the inspector is
still open on the desktop. You can prevent the inspector from
closing by setting the function value to <B>False</B>. The following
example automatically saves an item without prompting the user
when the item closes.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_Close()
If not Item.Saved Then
&nbsp;&nbsp;&nbsp; Item.Save
End If
Item_Close = True
End Function

</code></pre></FONT>


<P>
<FONT SIZE=3><B>CustomAction Event</B></FONT>


<P>
The CustomAction event occurs when one of the item's custom actions
is executed. Both the name of the custom action and the object
that represents the newly created item resulting from the custom
action are passed to the event. You can prevent the custom action's
behavior and prevent the item from being displayed by setting
the function value to <B>False</B>. The following example sets
a property of the response item created by Action1.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_CustomAction(ByVal myAction, ByVal myResponse)
Select Case myAction.Name
&nbsp;&nbsp;&nbsp; Case "Action1"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  myResponse.Subject = "Changed by VBScript"
&nbsp;&nbsp;&nbsp; Case Else
End Select
Item_CustomAction = True
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3><B>CustomPropertyChange Event</B></FONT>


<P>
The CustomPropertyChange event occurs when one of the item's custom
properties is changed. These properties are the nonstandard properties
added to the item at design time. The property name is passed
to the procedure, making it possible for the procedure to determine
which property was changed. The following example enables a control
when a <B>Boolean</B> field is set to <B>True</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub Item_CustomPropertyChange(ByVal myPropertyName)
Select Case myPropertyName
&nbsp;&nbsp;&nbsp; Case "RespondBy"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Set cstPages = Item.GetInspector.ModifiedFormPages
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Set ctlRespond = cstPages("Page 2").Controls("DateToRespond")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  If Item.UserProperties("RespondBy").Value Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctlRespond.Enabled = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctlRespond.Backcolor = 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctlRespond.Enabled = False
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctlRespond.Backcolor = 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  End If
&nbsp;&nbsp;&nbsp; Case Else
End Select
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=3><B>Forward Event</B></FONT>


<P>
The Forward event occurs when the user selects the <B>Forward</B>
action for an item. The newly created item is passed to the procedure.
You can prevent the new item from being displayed on the desktop
by setting the function value to <B>False</B>. The following example
disables forwarding an item and displays a message that the item
cannot be forwarded.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_Forward(ByVal myForwardItem)
MsgBox "You cannot forward this message."
Item_Forward = False
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3><B>Open Event</B></FONT>


<P>
The Open event occurs when the inspector for an item is being
opened. When this event occurs, the <B>Inspector</B> object is
initialized but not yet displayed. You can prevent the <B>Inspector</B>
object from being opened on the desktop by setting the function
value to <B>False</B>. The following example opens an item in
its inspector and displays the All Fields page.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_Open()
Item.GetInspector.SetCurrentFormPage "All Fields"
Item_Open = True
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3><B>PropertyChange Event</B></FONT>


<P>
The PropertyChange event occurs when one of the item's standard
properties (such as <B>Subject</B> or <B>To</B>) is changed. The
property name is passed to the procedure, making it possible for
the procedure to determine which property was changed. The following
example disables setting a reminder for an item.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub Item_PropertyChange(ByVal myPropertyName)
Select Case myPropertyName
&nbsp;&nbsp;&nbsp; Case "ReminderSet"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  MsgBox "You cannot set a reminder on this item."
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Item.ReminderSet = False
&nbsp;&nbsp;&nbsp; Case Else
End Select
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=3><B>Read Event</B></FONT>


<P>
The Read event occurs each time the user opens an existing item
for editing. This event differs from the Open event in that Read
is called whenever the user modifies the item in an explorer view
that supports editing or whenever the user opens the item in an
inspector. The following example increments a counter to track
how often an item is read.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub Item_Read()
&nbsp;&nbsp;&nbsp; Set myProperty = Item.UserProperties("ReadCount").Value
&nbsp;&nbsp;&nbsp; myProperty.Value = myProperty.Value + 1
&nbsp;&nbsp;&nbsp; myItem.Save
End Sub

</code></pre></FONT>

<P>
<FONT SIZE=3><B>Reply Event</B></FONT>


<P>
The Reply event occurs when the user replies to an item's sender.
The newly created item is passed to the procedure. You can prevent
the new item from being displayed on the desktop by setting the
function value to <B>False</B>. The following example sets the
Sent Items folder for the new item to the folder in which the
original item resides.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_Reply(ByVal myResponse)
Set myResponse.SaveSentMessageFolder = Item.Parent
Item_Reply = True
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3><B>ReplyAll Event</B></FONT>


<P>
The ReplyAll event occurs when the user replies to an item's sender
and recipients. The newly created item is passed to the procedure.
You can prevent the new item from being displayed on the desktop
by setting the function value to <B>False</B>. The following example
reminds the user that he or she is replying to all the original
recipients of an item and, depending on the user's response, either
makes it possible for the action to continue or prevents it from
continuing.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_ReplyAll(ByVal myResponse)
myResult = MsgBox ("Do you really want to reply to all original recipients?", _
&nbsp;&nbsp;&nbsp; 289, "Flame Protector")
If myResult = 1 Then
&nbsp;&nbsp;&nbsp; Item_ReplyAll = True
Else
&nbsp;&nbsp;&nbsp; Item_ReplyAll = False
End If
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3><B>Send Event</B></FONT>


<P>
The Send event occurs when the user sends an item. You can prevent
the item from being sent by setting the function value to <B>False</B>.
If you interrupt this event, the item's inspector remains displayed
on the desktop. The following example sends an item that has an
automatic expiration date of one week.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_Send()
Item.ExpiryTime = Date + 7
Item_Send = True
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3><B>Write Event</B></FONT>


<P>
The Write event occurs each time an item is saved&nbsp;&#151;
either explicitly, as with the <B>Save</B> or <B>SaveAs</B> method,
or implicitly, as in response to a prompt when the item's inspector
is being closed. You can prevent the item from being saved by
setting the function value to <B>False</B>. The following example
warns the user that item is about to be saved and will overwrite
any existing item and, depending on the user's response, either
makes it possible for the action to continue or prevents it from
continuing.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Function Item_Write()
myResult = MsgBox ("The item is about to be saved. Do you wish to overwrite the _
&nbsp;&nbsp;&nbsp; existing item?", 289, "Save")
If myResult = 1 Then
&nbsp;&nbsp;&nbsp; Item_Write = True
Else
&nbsp;&nbsp;&nbsp; Item_Write = False
End If
End Function

</code></pre></FONT>

<P>
<FONT SIZE=3><B>Click Event</B></FONT>


<P>
The Click event occurs when the user clicks a form control (such
as an ActiveX control or a custom field). You can create as many
Click event procedures as you have controls on a form. The name
of each event procedure is the name of the control (such as "CommandButton1"),
followed by an underscore character (_) and the word "Click."
The following example displays a greeting containing the logon
name of the current user whenever the button named "CommandButton1"
is clicked.

<FONT SIZE=3 FACE="COURIER NEW,COURIER"><pre><code>Sub CommandButton1_Click()
MsgBox "Hello " &amp; Application.GetNameSpace("MAPI").CurrentUser
End Sub

</code></pre></FONT>

<P>
Unlike with the word "Item" in other event procedures,
you cannot use the name of a control to gain access to the object
in a Click event procedure. The properties and methods of the
control itself aren't accessible from VBScript.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
Message and Note form controls don't support the Click event.
<P>
<A NAME="CH005H104"></A>

</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5><B><A NAME="CH005H104">Using Automation and VBScript</A></B></FONT>
<MENU><MENU>


<P>
There are two ways to program Outlook objects: remotely from another
Office application by using Visual Basic and Automation, or locally
in Outlook by using VBScript. You use Automation when you want
to control an entire Outlook session; for example, you can copy
data from a Microsoft Excel worksheet into a new mail message
and send it to a list of recipients, all without leaving Microsoft
Excel. You use VBScript when you want to design an Outlook&#173;based
solution; for example, you can create a custom mail message form
that contains custom controls, fields, and backup processes for
a particular workgroup.
<P>
<FONT SIZE=4><B><A NAME="CH005H208">Using Automation</A></B></FONT>


<P>
<a name="dex7"></a>
<P>
Automating Outlook from another Office application is the same
as automating any other Office application remotely. You must
first reference the Outlook type library; then, use the <B>CreateObject</B>
function to start a new session of Outlook, or use the <B>GetObject</B>
function to automate a session that's already running. After returning
the Outlook <B>Application</B> object by using one of these two
functions, you can write code in your controlling module that
directly uses the objects, properties, methods, and constants
defined in the Outlook type library.
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>If
you use Automation to control Outlook, you cannot write event
procedures to respond to the events supported by Outlook items.
<P>
For more information about using Automation to control one Office
application from another one, see Chapter&nbsp;2, "<a href="002.htm">Understanding
Object Models</A>."
<P>
For up&#173;to&#173;date information about VBScript, see the Visual
Basic Scripting Edition Web site at <A HREF="http://www.microsoft.com/vbscript/">http://www.microsoft.com/vbscript/</A>
<P>
<FONT SIZE=4><B><A NAME="CH005H209">Using VBScript</A></B></FONT>


<P>
<a name="dex8"></a>
<P>
If you're creating an Outlook&#173;based solution, you can program
Outlook from within your custom forms by writing scripts using
VBScript at design time (while you're adding controls and fields
to forms after clicking <B>Design Outlook Form</B> on the <B>Tools</B>
menu). To view and edit scripts on a form, click <B>View Code</B>
on the <B>Form</B> menu in design mode. The Script Editor has
templates for all the item events. To add an event template to
your script in the Script Editor, click <B>Event</B> on the <B>Script</B>
menu, click an event name in the list, and then click <B>Add</B>.
The appropriate <B>Sub&#133;End Sub</B> or <B>Function&#133;End
Function</B> statement is inserted, with its arguments (if any)
specified. (You cannot add Click event procedures by using the
<B>Event</B> command on the <B>Script</B> menu; you must type
the <B>Sub&#133;End Sub</B> statement for those procedures from
scratch.)
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>You
can write Sub and Function procedures that don't respond to events,
but they won't run unless they're called from valid event procedures.
<P>
In Outlook, users cannot run your scripts using Outlook commands.
Instead, scripts run automatically in response to events that
the user triggers. For example, when the user opens an item based
on your form template, the Open event occurs; if an Open event
procedure exists, it runs automatically. Only Outlook items and
controls on those items support events; folders don't support
events. 
<P>
VBScript is a subset of the Visual Basic language. It's designed
to be a small, lightweight interpreted language, so it doesn't
use strict types (only <B>Variant</B>). VBScript is also intended
to be a safe subset of Visual Basic, so it doesn't include file
input/output functions or Automation functions, and it doesn't
allow declarations to external functions. The following sections
describe the capabilities and restrictions of VBScript in detail.
<P>
<FONT SIZE=4><B><A NAME="CH005H210">VBScript Features</A></B></FONT>


<P>
<a name="dex9"></a>
<P>
The following table shows the Visual Basic features and keywords
that were included in VBScript.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Category</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Feature or keyword</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Array handling</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Dim</B>, <B>ReDim</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsArray</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Erase</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>LBound</B>, <B>UBound</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Assignment</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>=</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Set</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Comment</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Rem</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Constants and literals</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Empty</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Nothing</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Null</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>True</B>, <B>False</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Control flow</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Do ... Loop</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>For ... Next</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>If ... Then ... Else</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Select Case</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>While ... Wend</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Conversion</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Abs</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Asc</B>, <B>AscB</B>, <B>AscW</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Chr</B>, <B>ChrB</B>, <B>ChrW</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>CBbool</B>, <B>CByte</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>CDate</B>, <B>CDbl</B>, <B>CInt</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>CLng</B>, <B>CSng</B>, <B>CStr</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>DateSerial</B>, <B>DateValue</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Hex</B>, <B>Oct</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Fix</B>, <B>Int</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Sgn</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>TimeSerial</B>, <B>TimeValue</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Date and time</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Date</B>, <B>Time</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>DateSerial</B>, <B>DateValue</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Day</B>, <B>Month</B>, <B>Weekday</B>, <B>Year</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Hour</B>, <B>Minute</B>, <B>Second</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Now</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>TimeSerial</B>, <B>TimeValue</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Declaration</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Dim</B>, <B>ReDim</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Function</B>, <B>Sub</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Error handling</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Err</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>On Error</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Input and output</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>InputBox</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>MsgBox</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Math</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Atn</B>, <B>Cos</B>, <B>Sin</B>, <B>Tan</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Exp</B>, <B>Log</B>, <B>Sqr</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Randomize</B>, <B>Rnd</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Objects</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsObject</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Operators</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Addition (+), subtraction (&nbsp;&#150;&nbsp;)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Exponentiation (^)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Modulus arithmetic (<B>Mod</B>)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Multiplication (*), division (/), integer division (\)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Negation (&nbsp;&#150;&nbsp;)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>String concatenation (&amp;)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Equality (=), inequality (&lt;&gt;)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Less than (&lt;), less than or equal to (&lt;=)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Greater than (&gt;), greater than or equal to (&gt;=)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Is</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>And</B>, <B>Or</B>, <B>Xor</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Eqv</B>, <B>Imp</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Options</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Option Explicit</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Procedures</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Call</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Function</B>, <B>Sub</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Strings</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Asc</B>, <B>AscB</B>, <B>AscW</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Chr</B>, <B>ChrB</B>, <B>ChrW</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>InStr</B>, <B>InStrB</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Len</B>, <B>LenB</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>LCase</B>, <B>UCase</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Left</B>, <B>LeftB</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Mid</B>, <B>MidB</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Right</B>, <B>RightB</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Space</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>StrComp</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>String</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>LTrim</B>, <B>RTrim</B>, <B>Trim</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Variants</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsArray</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsDate</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsEmpty</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsNull</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsNumeric</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>IsObject</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>VarType</B></FONT>
</TD></TR>

</TABLE>
<P>
<FONT SIZE=4><B><A NAME="CH005H211">Visual Basic Features Omitted from VBScript</A>
</B></FONT>
<P>
<a name="dex10"></a>
<P>
The following table shows the Visual Basic features and keywords
that were omitted from VBScript.
<P>

<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Category</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Omitted feature or keyword</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Array handling</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Array </B>function</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Option Base</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Private</B>, <B>Public</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Declaring arrays with lower bound &lt;&gt; 0</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Collection</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Add</B>, <B>Count</B>, <B>Item</B>, <B>Remove</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Access to collections using the ! character (for example, </FONT><FONT SIZE=2 FACE="COURIER NEW,COURIER">myCollection!Foo</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Conditional compilation</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>#Const</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>#If ... Then ... Else</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Constants and literals</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Const</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>All intrinsic constants</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Type declaration characters (for example, </FONT><FONT SIZE=2 FACE="COURIER NEW,COURIER">256&amp;</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Control flow</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>DoEvents</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>For Each ... Next</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>GoSub ... Return</B>, <B>GoTo</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>On Error GoTo</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>On ... GoSub</B>, <B>On ... GoTo</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Line numbers, line labels</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>With ... End With</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Conversion</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>CCur</B>, <B>CVar</B>, <B>CVDate</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Format</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Str</B>, <B>Val</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Data types</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>All intrinsic data types except <B>Variant
<BR>
Type ... End Type</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Date and time</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Date </B>statement, <B>Time </B>statement</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Timer</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>DDE</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>LinkExecute</B>, <B>LinkPoke</B>, <B>LinkRequest</B>, <B>LinkSend</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Debugging</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Debug.Print</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>End</B>, <B>Stop</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Declaration</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Declare </B>(for declaring DLLs)</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Property Get</B>, <B>Property Let</B>, <B>Property Set</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Public</B>, <B>Private</B>, <B>Static</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>ParamArray</B>, <B>Optional</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>New</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Error handling</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Erl</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Error</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>On Error ... Resume</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Resume</B>, <B>Resume Next</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>File input and output</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>All</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Financial</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>All financial functions</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Object manipulation</FONT></TD>
<TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>CreateObject </B>function</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>GetObject </B>function</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>TypeOf</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Objects</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Clipboard</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Collection</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Operators</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Like</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Options</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Def</B> <I>type</I></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Option Base</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Option Compare</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Option Private Module</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Strings</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Fixed-length strings</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>LSet</B>, <B>RSet</B></FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Mid </B>statement</FONT>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>StrConv</B></FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Using objects</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>TypeName</B>
<BR>
Collection access using ! character (for example, </FONT><FONT SIZE=2 FACE="COURIER NEW,COURIER">myCollection!Foo</FONT>
</TD></TR>

</TABLE>
<P>
<FONT SIZE=4><B><A NAME="CH005H212">Variables in VBScript</A></B></FONT>
<P>
Variable names follow the standard rules for naming anything in
VBScript. A variable name:
<P>

<UL>
<P>
<LI>Must begin with an alphabetic
character.
<P>
<LI>Cannot contain an embedded period.
<P>
<LI>Must
not exceed 255 characters.
<P>
<LI>Must be unique in
the scope in which it's declared.
<P>
</UL>

<P>
Generally, when you declare a variable within a procedure, only
code within that procedure can get to or change the value of that
variable; it has <I>local</I> scope and is known as
a <I>procedure&#173;level</I> variable. When you declare
a variable outside a procedure, you make it recognizable to all
the procedures in your script; it has <I>script&#173;level</I>
scope and is known as a script&#173;level variable.
<P>
When you're using variables in VBScript, the following limitations
apply:
<P>

<UL>
<P>
<LI>There can be no more than
127 procedure&#173;level variables (arrays count as a single variable).
<P>
<LI>Each
script is limited to no more than 127 script&#173;level variables.
<P>
</UL>

<P>
The length of time a variable exists is called its <I>lifetime</I>.
A script&#173;level variable's lifetime extends from the time
it's declared until the time the script is finished running. A
local variable's lifetime begins when its declaration statement
is encountered as the procedure begins, and it ends when the procedure
concludes. Local variables are thus ideal as temporary storage
space while a procedure is running. You can have local variables
with the same name in different procedures, because each variable
is recognized only by the procedure in which it's declared.
<P>
A variable's scope is determined by where you declare it. At script
level, the lifetime of a variable is always the same; it exists
while the script is running. At procedure level, a variable exists
only while the procedure is running; when the procedure exits,
the variable is destroyed.
<P>
<FONT SIZE=4><B><A NAME="CH005H213">Constants in VBScript</A></B></FONT>


<P>
<A NAME="CVextrasdoc006004">When you automate Outlook by using
an Automation object in an application that supports Visual Basic,
you can use built&#173;in constants to specify property and argument
values.</A><A NAME="CVextrasdoc006005"> However, when you automate
Outlook by using VBScript, you must use the numeric values that
the built&#173;in constants represent. For lists of the numeric
values of built&#173;in Outlook constants, see "Microsoft
Outlook Constants" in Help.</A>
<P>
<FONT SIZE=4><B><A NAME="CH005H214">Variants in VBScript</A></B></FONT>


<P>
<a name="dex11"></a>
<P>
VBScript has only one data type, called <B>Variant</B>. <B>Variant</B>
is a special kind of data type that can contain different kinds
of information, depending on how the value is used. Because <B>Variant</B>
is the only data type in VBScript, it's also the data type returned
by all functions in VBScript.
<P>
At its simplest, <B>Variant</B> can contain either numeric or
string information. <B>Variant</B> behaves as a number when it's
used in a numeric context and as a string when it's used in a
string context. If you're working with data that resembles numeric
data, VBScript treats it as such and processes it accordingly.
If you're working with data that's clearly string data, VBScript
treats it as such. As in other Microsoft languages, numbers enclosed
in quotation marks are treated as strings.
<P>
Beyond the simple numeric or string classifications, a <B>Variant</B>
can make further distinctions about the specific nature of numeric
information, such as information that represents a date or time.
When used with other date or time data, the result is always expressed
as a date or a time. Variant can contain numeric information ranging
in size from <B>Boolean</B> values to huge floating&#173;point
numbers. These various categories of information that can be contained
in a <B>Variant</B> are called <I>subtypes</I>. Usually
you'll be able to put the kind of data you want in a <B>Variant</B>,
and it will most likely behave in a way that's suited to the data
it contains.
<P>
The subtypes supported by VBScript correspond to the data types
supported by Visual Basic. For information about the data types
supported by Visual Basic, see Chapter&nbsp;1, "<a href="001.htm">Programming
Basics</A>."
<P>
The <B>VarType</B> function returns a value that indicates the
subtype of a variable, giving you information about how your data
is stored in a <B>Variant</B>. The following table shows values
that can be returned by the <B>VarType</B> function and their
respective <B>Variant</B> subtypes.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Subtype</FONT></B></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>Return value</FONT></B>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Empty</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>0</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Null</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>1</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Integer</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>2</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Long</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>3</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Single</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>4</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Double</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>5</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Currency</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>6</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Date (Time)</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>7</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>String</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>8</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Automation Object</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>9</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Error</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>10</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Boolean</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>11</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Variant</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>12 (used only with an array of <B>Variant </B>types)</FONT>
</TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Non-Automation Object</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>13</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Byte</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>17</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Array</B></FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>8192</FONT></TD></TR><P>
</TABLE>
<P>
<FONT COLOR="#0000FF"><B>Note&nbsp;&nbsp;&nbsp;</B></FONT>The
VarType function never returns the value for Array by itself;
it's always added to some other value to indicate an array of
a particular type. The value for Variant is returned only after
it's been added to the value for Array to indicate that the argument
to the VarType function is an array. For example, the value returned
for an array of integers is calculated as 2+8192, or 8194. If
an object has a default property, VarType(object) returns the
type of that property.
<BR>

</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->

<P>
</FONT>
</BODY>
</HTML>

<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Appendix A: Switching from the Microsoft Excel 4.0 Macro Language</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<!--ToolBar_Start-->
<!--ToolBar_End-->
<!--Header/Footer Info_START-->
<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>A P P E N D I X&nbsp;&nbsp; A</B></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Switching from the Microsoft Excel&nbsp;4.0 Macro Language
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD>

</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>




<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<LI>
<P>
<A HREF="#CHAppaH101">Information for Users of Microsoft Excel 4.0 Macros</A>
<LI>
<P>
<A HREF="#CHappAH102">Visual Basic Equivalents for Common Macro Functions</A>
<LI>
<P>
<A HREF="#CHappAH103">Creating Custom Commands and Dialog Boxes Using Visual Basic</A>
</UL>


<P>
This appendix introduces users of the Microsoft
Excel 4.0 Macro Language to Visual Basic programming. In this
appendix<B>, </B>you'll learn how Visual Basic differs from the
Microsoft Excel 4.0 Macro Language, how you can continue using
your existing Microsoft Excel 4.0 macros, and where to find more
information about Visual Basic.
<P>
Visual Basic is a true programming language that features variables
with scoping, an integrated editor, and enhanced dialog box tools
and debugging tools. Learning Visual Basic in Microsoft Excel&nbsp;97
makes it easier for you to learn programming in other Microsoft
Office&nbsp;97 applications (Microsoft Access, Word, and PowerPoint)
as well as Microsoft Project and other Microsoft applications
that use Visual Basic. You can also control these other applications
easily in your Visual Basic code.
<P>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppaH101">Information for Users of Microsoft Excel&nbsp;4.0 Macros</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex1"></a>
<P>
This section guides experienced users of Microsoft Excel 4.0 macros
to information about learning and using Visual Basic. For more
detailed information, see the chapters and Help topics that are
cross&#173;referenced in this section.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppAH201">Acting Directly on Objects in Visual
Basic</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex2"></a>
<P>
In Microsoft Excel version 4.0, macros follow the "select,
then do" order of actions that pertains to all of Microsoft
Excel. With Visual Basic, you don't need to select an object you
want your procedure to change; you can change the object directly.
<P>
For example, to make a range of text bold
in Microsoft Excel version 4.0, you have to first select the range
with the SELECT function before changing the format of the text
with the FORMAT.FONT function. In Visual Basic, you make a range
of text bold by just setting the <B>Bold</B> property of the range
to <B>True</B>. The following example applies bold formatting
to cells C1:G5 on Sheet1.

<FONT SIZE=3 FACE="COURIER NEW" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MakeSectionBold()
&#09;Worksheets("Sheet1").Range("C1:G5").Font.Bold = True
End Sub

</code></pre></FONT>




<P>
Note that you can use Visual Basic to change
an object (the range C1:G5,in this case) directly, without first
selecting it or canceling the current selection. For more information
about how to change cells, sheets, and other objects in Microsoft
Excel with Visual Basic, see Chapter 4, "<a href="004.htm">Microsoft Excel Objects</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppAH202">Variables: More Powerful Than Names</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex3"></a>
<P>
To store a value as a variable in Microsoft Excel version 4.0,
you'd typically store <A NAME="unscrunch0">the value in a name.
In Visual Basic, you'd assign the value to a variable instead.</A>
<P>
Variables are much more flexible than names.
You can make variables available to all procedures, to only the
procedures in a given module, or to only a single procedure. You
can control the type of data that can be stored in a variable,
and you can even create variables that store a combination of
data types of your choice.
<P>
In Visual Basic, you can also define constants
to hold static (constant) values that you can refer to repeatedly.
For more information about variables and constants in Visual Basic,
see Chapter 1, "<a href="001.htm">Programming Basics</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppAH203">Using Worksheet Functions in a Procedure</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex4"></a>
<P>
There are many worksheet functions that you can use directly in
Visual Basic procedures; the IF function is one exception, though,
given that <B>If</B> is also a keyword in Visual Basic. You can
use the <B>Application</B> qualifier to run a Microsoft Excel
worksheet function rather than a Visual Basic function. The following
example causes a "Sub or Function not defined" error
because it doesn't identify ACOS as a worksheet function.

<FONT SIZE=3 FACE="COURIER NEW" FACE="Verdana, Arial, Helvetica"><pre><code>Sub MissingObject()
&#09;x = Acos(-1)
End Sub

</code></pre></FONT>




<P>
The following example successfully uses
the Microsoft Excel worksheet function ACOS because the code first
refers to the <B>Application</B> object.

<FONT SIZE=3 FACE="COURIER NEW" FACE="Verdana, Arial, Helvetica"><pre><code>Sub ReturnArccosine()
&#09;x = Application.Acos(-1)
End Sub

</code></pre></FONT>




<P>
The only worksheet function that requires
you to explicitly specify that you're referring to either the
function's Microsoft Excel version or its Visual Basic version
is the LOG function, because both function names are spelled the
same way. The Microsoft Excel LOG function returns the logarithm
of a specified number to whatever base you indicate. The Visual
Basic <B>Log</B> function, on the other hand, returns the natural
logarithm of a specified number.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppAH204">Using Your Existing Macros in a Procedure</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex5"></a>
<P>
You can include your existing macros in new Visual Basic procedures
by using the <B>Run</B> method. When you debug Microsoft Excel
4.0 macros as part of your Visual Basic procedures, the Visual
Basic debugger steps into your macros as if they were written
in Visual Basic. Your macros can return information to a procedure
by using the RETURN macro function.
<P>
For more information and an example of
the <B>Run</B> method, see "Run Method" in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppAH205">New Tools to Make Debugging Easy</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex6"></a>
<P>
There are numerous tools in Visual Basic to help you debug your
code. Visual Basic debugging functionality includes breakpoints,
break expressions, watch expressions, stepping through code one
statement or one procedure at a time, and displaying the values
of variables and properties. Visual Basic also includes special
debugging functionality, such as the "edit&#173;and&#173;continue"
feature, setting the next statement to run, and procedure testing
while the application is in break mode.
<P>
For more information about the debugging
capabilities of Visual Basic, see Chapter&nbsp;14, "<a href="014.htm">Debugging and Error Handling</A>."
<P>
<A NAME="PGappaC2"></A>

</MENU></MENU></MENU>

<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappAH102">Visual Basic Equivalents for Common Macro Functions</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
<a name="dex7"></a>
<P>
The easiest way to see the Visual Basic equivalents for common
macro functions and Microsoft Excel commands is to use the macro
recorder to record macros in Visual Basic. You can arrange the
windows on your desktop so that one window shows your Visual Basic
module and the other one shows the worksheet or chart you're working
on while you're recording a macro. As you work, Microsoft Excel
adds Visual Basic statements to your module.
<P>
No matter how you write your programs in Microsoft Excel, there
are common tasks you'll want to accomplish, such as referring
to ranges, controlling how macros run, accessing data in other
applications, getting information about workbooks and objects,
and creating procedures that run in response to certain events.
The following table shows you where to look in this book for information
about how to accomplish these tasks with Visual Basic.
<P>
<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>
<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><A NAME="ThisTable"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">For information about </FONT></B></A>
</TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">See this chapter</FONT></B>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Referring to cells and ranges on worksheets</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Chapter 4, "<a href="004.htm">Microsoft Excel Objects</A>"</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Controlling the flow of a macro</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Chapter 1, "<a href="001.htm">Programming Basics</A>"</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Accessing data in other applications</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Chapter 11, "<a href="011.htm">Data Access Objects</A>"</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Getting information about objects in Microsoft Excel</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Chapter 4, "<a href="004.htm">Microsoft Excel Objects</A>"</FONT>
</TD></TR>
<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Running procedures in response to events</FONT>
</TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="Verdana, Arial, Helvetica">Chapter 4, "<a href="004.htm">Microsoft Excel Objects</A>"</FONT>
</TD></TR>
</TABLE>
<P>
<A NAME="PGappaC3"></A>


</MENU></MENU></MENU>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>
<TR><TD align=right><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><TABLE cellpadding=0 cellspacing=0 border=0><TR><TD><A href="#top"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=1 FACE="Verdana, Arial, Helvetica">Top</FONT></A></TD><TD><A href="#top"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><IMG SRC="ar_up.gif" WIDTH=11 HEIGHT=7 BORDER=0 ALIGN=MIDDLE></A></TD></TR></TABLE>
</TD>
</TR>
</TABLE>
<HR>

<!--ToTop_End-->
<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHappAH103">Creating Custom Commands and Dialog Boxes Using Visual Basic</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>

<P>
Microsoft Excel&nbsp;97 includes tools
for creating custom menus, commands, and dialog boxes. For more
information about creating custom commands and dialog boxes using
Visual Basic, see Chapter 8, "<a href="008.htm">Menus and Toolbars</A>," and Chapter 12, "<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppAH206">Creating Custom Commands</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex8"></a>
<P>
To create a custom menu or command in Microsoft Excel version
4.0, you first create a menu or command table. You then use the
macro function ADD.MENU or ADD.COMMAND to place your custom menu
or command on a menu bar or a menu.
<P>
To create a custom menu or command in Microsoft
Excel&nbsp;97, you use the <B>Customize</B> dialog box to assign
custom commands and menus to menu bars. For more information about
using the <B>Customize</B> dialog box, see Chapter 8, "<a href="012.htm">Menus
and Toolbars</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CHAppAH207">Displaying Built&#173;in Dialog Boxes</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex9"></a>
<P>
In Microsoft Excel version 4.0, to display built&#173;in dialog
boxes while running a macro, you use the question&#173;mark form
of the macro function corresponding to the dialog box. For example,
the DEFINE.STYLE? macro function displays the dialog box in which
you define worksheet styles.
<P>
In Microsoft Excel&nbsp;97, to display
built&#173;in dialog boxes while running a procedure, you use
the <B>Dialogs</B> method with the identifier of the dialog box
you want displayed. The following example displays the <B>Open</B>
dialog box (<B>File</B> menu).

<FONT SIZE=3 FACE="COURIER NEW" FACE="Verdana, Arial, Helvetica"><pre><code>Sub OpenFile()
&#09;Application.Dialogs(xlDialogOpen).Show
End Sub

</code></pre></FONT>


<A NAME="CHAppAH208"><FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Creating and Displaying Custom Dialog Boxes</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></A>

<P>
<a name="dex10"></a>
<P>
To create a custom dialog box in Microsoft Excel version 4.0,
you use the Dialog Editor to generate a dialog box definition
you place on a macro sheet. You then use the DIALOG.BOX macro
function to display your dialog box.
<P>
You can use the <B>DialogBox</B> method
in your Visual Basic procedures to run a Microsoft Excel 4.0 custom
dialog box. The following example uses the <B>DialogBox</B> method
to display such a dialog box and then tests the result. The variable
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">DialogRange</FONT>
refers to the range (on a Microsoft Excel 4.0 macro sheet) that
contains the dialog&#173;box definition table.

<FONT SIZE=3 FACE="COURIER NEW" FACE="Verdana, Arial, Helvetica"><pre><code>Result = DialogRange.DialogBox
If Not Result Then
&#09;' User canceled the dialog box
Else
&#09;' Result is position number of chosen control
End If

</code></pre></FONT>

<P>
In Microsoft Excel&nbsp;97, you create
custom dialogs by adding ActiveX controls to forms, or<I>
UserForms</I>, in the Visual Basic Editor. To create a custom
dialog box, you must create a UserForm to contain controls, add
whatever controls you want to the UserForm, set properties for
the controls, and write code that responds to form and control
events. You use the <B>Show</B> method in a Visual Basic procedure
to display your custom dialog box. For more information about
creating dialog boxes in Microsoft Excel&nbsp;97, see Chapter
12, "<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<BR>
</MENU></MENU></MENU>

<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>

<!--ToTop_End-->

<!--EndNav_Start-->


<P>

</FONT>
</FONT></BODY>

</HTML>

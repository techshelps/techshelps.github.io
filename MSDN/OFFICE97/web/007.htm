<HTML><HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 7: Microsoft Word Objects</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant For Microsoft Word 2.0z Beta">
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#ffffff" TOPMARGIN=0 LEFTMARGIN=0>

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<!--Header/Footer Info_START-->

<TABLE WIDTH=98% BORDER=0 CELLPADDING=0>
<TR>
<TD WIDTH=30% ALIGN=LEFT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B>C H A P T E R &nbsp;&nbsp; 7</B></FONT></FONT></TD>
<TD WIDTH=20% ALIGN=CENTER><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" Size=1>
<B></B></FONT></FONT></TD>
<TD WIDTH=50% ALIGN=RIGHT><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT COLOR=#000000 FACE="VERDANA,ARIAL,HELVETICA" SIZE=1>
<B>Microsoft Office 97/Visual Basic Programmer's Guide</B></FONT></FONT></TD></TR>
</TABLE>
<P>
<!--Header/Footer Info_END-->

<P><!--NAV_START-->
<TABLE WIDTH="98%" BGCOLOR="#ffffff" BORDER=0 CELLSPACING=0 CELLPADDING=3>
<TR><TD VALIGN="TOP" WIDTH=60%><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B>Microsoft Word Objects</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></FONT></TD>
</TR>
</TABLE><HR>
<!--NAV_END-->
<MENU><MENU><MENU>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Contents</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<UL>
<LI><A HREF="#CH007H101">Working with the Application Object</A>
<BR>
<LI><A HREF="#CH007H102">Working with the Document Object</A>
<BR>
<LI><A HREF="#CH007H103">Working with the Range Object</A>
<BR>
<LI><A HREF="#CH007H104">Working with the Selection Object</A>
<BR>
<LI><A HREF="#CH007H105">Working with the Find and Replacement Objects</A>
<BR>
<LI>
<A HREF="#CH007H106">Working with Table, Column, Row, and Cell Objects</A>
<BR>
<LI><A HREF="#CH007H107">Working with Other Common Objects</A>
<BR>
<LI><A HREF="#CH007H108">Determining Whether an Object Is Valid</A>
<BR>
<LI><A HREF="#CH007H109">Modifying Word Commands</A>
<BR>
<LI><A HREF="#CH007H110">Working with Events</A>
<BR>
<LI><A HREF="#CH007H111">Using Auto Macros</A>
<BR>
<LI><A HREF="#CH007H112">Using Automation</A>
</UL>

<P>
Visual Basic supports a set of objects that correspond directly
to elements in Microsoft Word&nbsp;97, most of which you're familiar
with from the user interface. For example, the <B>Document</B>
object represents an open document, the <B>Bookmark</B> object
represents a bookmark in a document, and the <B>Selection</B>
object represents the selection in a document window pane. Every
type of element in Word&nbsp;&#151; documents, tables, paragraphs,
bookmarks, fields, and so on&nbsp;&#151; can be represented
by an object in Visual Basic. To automate tasks in Word, use methods
and properties of these objects.
<P>
For general information about understanding and navigating the
object models in Microsoft Office&nbsp;97, see Chapter&nbsp;2,
"<a href="002.htm">Understanding Object Models</A>." The object model in Microsoft
Word&nbsp;97 is extensive, encompassing approximately 180 objects.
To view a graphical representation of the Word object model, see
"Microsoft Word Objects" in Help. For a detailed description
of a specific object, click the name of the object on the diagram,
or search for the specific object name in the Help index.
<P>
<TABLE WIDTH=80% CELLPADDING=15 BORDER=1 CELLSPACING=0 BORDERCOLOR=#0000FF><TR BGCOLOR=#FFFFFF><TD>

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<P>
<a name="dex1"></a>
<P>
<B>How Do I Display Visual Basic Help for Word?</B>
<P>
To use Visual Basic Help for Word, you must click <B>Custom</B>
during Setup and select the <B>Online Help for Visual Basic</B>
check box for Word. Otherwise, Visual Basic Help won't be installed.
If you've already installed Word, you can run Setup again to install
Visual Basic Help.
<P>
To see the contents and index of Visual Basic Help for Word, click
<B>Contents and Index</B> on the <B>Help</B> menu in the Visual
Basic Editor. On the <B>Contents</B> tab in the <B>Help Topics</B>
dialog box, double&#173;click "Microsoft Word Visual Basic
Reference," and then double&#173;click "Shortcut to
Microsoft Word Visual Basic Reference." The <B>Help Topics</B>
dialog box should reappear, displaying the contents and index
for Visual Basic Help for Word.
<P>
</FONT></FONT></TD></TR>
</TABLE>

<P>
<A NAME="PG007C1"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H101">Working with the Application Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex2"></a>
<P>
When you start a Word session, you automatically create an <B>Application</B>
object. You use properties or methods of the <B>Application</B>
object to control or return application&#173;wide attributes,
to control the appearance of the application window, and to get
to the rest of the Word object model. Use the <B>Application</B>
property to return the Word <B>Application</B> object. The following
example switches the view to print preview.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.PrintPreview = True

</code></pre></FONT>
<P>
Some properties of the <B>Application</B> object control the appearance
of the application. For example, if the <B>DisplayStatusBar</B>
property is <B>True</B>, the status bar is visible, and if <B>WindowState</B>
property is <B>wdWindowStateMaximize</B>, the application window
is maximized. The following example sets the size of the application
window on the screen. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With Application
&nbsp;&nbsp;&nbsp; .WindowState = wdWindowStateNormal
&nbsp;&nbsp;&nbsp; .Height = 450
&nbsp;&nbsp;&nbsp; .Width = 600
End With
</code></pre></FONT>
<P>
Properties of the <B>Application</B> object also provide access
to objects lower in the object hierarchy, such as the <B>Windows</B>
collection (representing all currently open windows) and the <B>Documents</B>
collection (representing all currently open documents). You use
properties, which are sometimes called <I>accessors</I>,
to move down through the object hierarchy from the top&#173;level
<B>Application</B> object to the lower levels (<B>Document</B>,
<B>Window</B>, <B>Selection</B>, and so forth). You can use either
of following examples to open MyDoc.doc.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Application.Documents.Open FileName:="C:\DOCS\MYDOC.DOC"
Documents.Open FileName:="C:\DOCS\MYDOC.DOC"

</code></pre></FONT>

<P>
Because the <B>Documents</B> property is <I>global</I>,
the <B>Application</B> property is optional. Global properties
and methods don't need the <B>Application</B> object qualifier.
To view the list of global properties and methods in the Object
Browser, click <B>&lt;globals&gt;</B> in the <B>Classes</B>
box. The global items are listed in the <B>Members of</B> box.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;The
<B>Options</B> object includes a number of properties that control the
global behavior of Word. Many of the properties for the <B>Options</B>
object correspond to items in the <B>Options</B> dialog box (<B>Tools</B> menu).
Use the <B>Options</B> property of the <B>Application</B> object to return the
<B>Options</B> object. The following example sets three application&#173;wide
options (because the <B>Options</B> property is global, the <B>Application</B>
property isn't needed in this example).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With Application.Options
&nbsp;&nbsp;&nbsp; .AllowDragAndDrop = True
&nbsp;&nbsp;&nbsp; .ConfirmConversions = False
&nbsp;&nbsp;&nbsp; .MeasurementUnit = wdPoints
End With

</code></pre></FONT>
<P>
<A NAME="PG007C2"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H102">Working with the Document Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex3"></a>
<P>
When you open or create a file in Word, you create a <B>Document</B>
object. You use properties and methods of the <B>Document</B>
object or the <B>Documents</B> collection to open, create, save,
activate, and close files.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H201">Returning the Document Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
You can return any open document as a <B>Document</B> object,
using the syntax <B>Documents</B>(<I>index</I>), where
<I>index</I> is the document's name or index number.
In the following example, the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDoc</FONT>
contains a <B>Document</B> object that refers to the open document
named "Report.doc."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myDoc = Documents("Report.doc")

</code></pre></FONT>
<P>
The index number represents the position of the document in the
<B>Documents</B> collection. In the following example, the variable
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myDoc</FONT> contains
a <B>Document</B> object that refers to the first document in
the <B>Documents</B> collection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myDoc = Documents(1)

</code></pre></FONT>
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;Because
the index number of a particular document can change when you
add or close documents, it's best to use the document name to
index a <B>Document</B> object in the <B>Documents</B> collection.
<P>
In addition to referring to a document by either its name or index
number, you can use the <B>ActiveDocument</B> property to return
a <B>Document</B> object that refers to the active document (the
document with the focus). The following example displays the name
of the active document; if there are no documents open, the example
displays a message.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Documents.Count &gt;= 1 Then 
&nbsp;&nbsp;&nbsp; MsgBox ActiveDocument.Name
Else
&nbsp;&nbsp;&nbsp; MsgBox "No documents are open"
End If

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H202">Opening Documents</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex4"></a>
<P>
To open an existing document, use the <B>Open</B> method. The
<B>Open</B> method applies to the <B>Documents</B> collection,
which you return using the <B>Documents</B> property. The following
example opens the file Test.doc (from the current folder) and
turns on change tracking.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myDoc = Documents.Open(FileName:="TEST.DOC")
myDoc.TrackRevisions = True

</code></pre></FONT>

<P>
Notice that the return value of the <B>Open</B> method in the
preceding example is a <B>Document</B> object that represents
the document that was just opened. The file name in the example
doesn't contain a path; therefore, the file is assumed to be in
the current folder. This is guaranteed to cause a run&#173;time
error, because as soon as the user makes a different folder the
current folder, Visual Basic can no longer find the file. You
can, however, ensure that the correct file is opened by specifying
the complete path, as shown in the following table.
<P>

<TABLE WIDTH=85% BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>

<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Operating system</FONT></B>
</FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

FileName</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Windows</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
FileName:="C:\Documents\Temporary File.doc"
</FONT></FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Macintosh</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">
FileName:="Hard Drive:Documents:Temporary File"</FONT>


</FONT></TD></TR><P>
</TABLE>
<P>
If your macro is intended for only one file system, you can hard&#173;code
the path separator ("\" or ":") in the <B><I>FileName</I></B>
argument, as shown in the preceding table. The following example
shows file&#173;system&#173;independent code you can use to open
Sales.doc, assuming that Sales.doc has been saved in the Word
program folder.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>programPath = Options.DefaultFilePath(wdProgramPath)
Documents.Open FileName:=programPath &amp; Application.PathSeparator &amp; "SALES.DOC"

</code></pre></FONT>

<P>
The <B>PathSeparator</B> property returns the correct separator
character for the current file system (for example, "\"
for MS&#173;DOS/Windows FAT or ":" for the Macintosh).
The <B>DefaultFilePath</B> property returns folder locations such
as the paths for the document folder, the program folder, and
the current folder. 
<P>
An error occurs if the specified file name doesn't exists in either
the current folder (if a path isn't specified) or the specified
folder (if a path is specified). The following example uses properties
and methods of the <B>FileSearch</B> object to determine whether
a file named "Test.doc" exists in the user's default
document folder. If the file is found (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">FoundFiles.Count
= 1</FONT>), it's opened; otherwise, a message is displayed.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>defaultDir = Options.DefaultFilePath(wdDocumentsPath)
With Application.FileSearch
&nbsp;&nbsp;&nbsp; .FileName = "Test.doc"
&nbsp;&nbsp;&nbsp; .LookIn = defaultDir
&nbsp;&nbsp;&nbsp; .Execute
&nbsp;&nbsp;&nbsp; If .FoundFiles.Count = 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Documents.Open FileName:=defaultDir &amp; Application.PathSeparator &amp; "TEST.DOC"
&nbsp;&nbsp;&nbsp; Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  MsgBox "Test.doc file was not found"
&nbsp;&nbsp;&nbsp; End If
End With

</code></pre></FONT>

<P>
Instead of hard&#173;coding the <B><I>FileName</I></B> argument
of the <B>Open</B> method, you may want to allow a user to select
a file to open. Use the <B>Dialogs</B> property with the <B>wdDialogFileOpen</B>
constant to return a <B>Dialog</B> object that refers to the <B>Open</B>
dialog box (<B>File</B> menu), as in the following example. The
<B>Show</B> method displays and executes actions performed in
the <B>Open</B> dialog box.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dialogs(wdDialogFileOpen).Show

</code></pre></FONT>
<P>
The <B>Display</B> method displays the specified dialog box without
doing anything further. The following example checks the value
returned by the <B>Display</B> method. If the user clicks <B>OK</B>
to close the dialog box, the value &#150;1 value is returned
and the selected file, whose name is stored in the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">fSelected</FONT>,
is opened. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set dlg = Dialogs(wdDialogFileOpen)
aButton = dlg.Display
fSelected = dlg.Name
If aButton = -1 Then
&nbsp;&nbsp;&nbsp; Documents.Open FileName:=fSelected
End If

</code></pre></FONT>

<P>
For more information about displaying Word dialog boxes, see "Displaying
built&#173;in Word dialog boxes" in Help.
<P>
To determine whether a particular document is open, you can enumerate
the <B>Documents</B> collection by using a <B>For Each...Next</B>
statement. The following example activates the document named
"Sample.doc" if it's already open; if it's not currently
open, the example opens it.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>docFound = True
For Each aDoc In Documents
&nbsp;&nbsp;&nbsp; If InStr(1, aDoc.Name, "sample.doc", 1) Then 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  aDoc.Activate
&nbsp;&nbsp;&nbsp; Exit For
&nbsp;&nbsp;&nbsp; Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  docFound = False
&nbsp;&nbsp;&nbsp; End If
Next aDoc
If docFound = False Then Documents.Open _
&nbsp;&nbsp;&nbsp; FileName:="C:\Documents\Sample.doc"

</code></pre></FONT>

<P>
Use the <B>Count</B> property to determine how many documents
are currently open. The <B>Count</B> property applies to the <B>Documents</B>
collection, which you return using the <B>Documents</B> property.
The following example displays a message if there are no documents
open.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Documents.Count = 0 Then MsgBox "No documents are open"

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H203">Creating and Saving Documents</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex5"></a>
<P>
To create a new document, apply the <B>Add</B> method to the <B>Documents</B>
collection. The following example creates a new document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Add

</code></pre></FONT>
<P>
<a name="dex6"></a>
<P>
The <B>Add</B> method returns the document that was just created
as a <B>Document</B> object. When you add a document, you can
set the return value of the <B>Add</B> method to an object variable
so that you can refer to the new document in your code. The following
example creates a new document and sets its top margin to 1.25
inches.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim myDoc As Document
Set myDoc = Documents.Add
myDoc.PageSetup.TopMargin = InchesToPoints(1.25)

</code></pre></FONT>

<P>
To save a new document for the first time, use the <B>SaveAs</B>
method with a <B>Document</B> object. The following example saves
the active document as "Temp.doc" in the current folder.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.SaveAs FileName:="Temp.doc"

</code></pre></FONT>
<P>
After a document is saved, you can use its document name to get
to the <B>Document</B> object. The following example creates a
new document and immediately saves it as "1996 Sales.doc."
The example then uses the new name to index the document in the
<B>Documents</B> collection and adds a table to the document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Add.SaveAs FileName:="1996 Sales.doc"
Documents("1996 Sales.doc").Tables.Add _
&nbsp;&nbsp;&nbsp; Range:=Selection.Range, NumRows:=2, NumColumns:=4

</code></pre></FONT>

<P>
To save changes to an existing document, use the <B>Save</B> method
with a <B>Document</B> object. The following instruction saves
the document named "Sales.doc."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents("Sales.doc").Save

</code></pre></FONT>
<P>
If you use the <B>Save</B> method with an unsaved document or
template, the <B>Save As</B> dialog box will prompt the user for
a file name. To save all open documents, apply the <B>Save</B>
method to the <B>Documents</B> collection. The following example
saves all open documents without prompting the user for their
file names.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Save NoPrompt:=True

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H204">Activating a Document</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex7"></a>
<P>
To make a different document the active document, apply the <B>Activate</B>
method to a <B>Document</B> object. The following example activates
the open document (MyDocument.doc).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents("MyDocument.doc").Activate

</code></pre></FONT>
<P>
The following example opens two documents and then activates the
first one (Sample.doc).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set Doc1 = Documents.Open(FileName:="C:\Documents\Sample.doc")
Set Doc2 = Documents.Open(FileName:="C:\Documents\Other.doc")
Doc1.Activate

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H205">Printing a Document</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex8"></a>
<P>
To print a document, apply the <B>PrintOut</B> method to a <B>Document</B>
object, as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.PrintOut

</code></pre></FONT>
<P>
To programmatically set print options that you'd otherwise set
in the <B>Print</B> dialog box (<B>File</B> menu), use the arguments
of the <B>PrintOut</B> method. You can use properties of the <B>Options</B>
object to set print options that you'd otherwise set on the <B>Print</B>
tab in the <B>Options</B> dialog box (<B>Tools</B> menu). The
following example sets the active document to print hidden text
and then prints the first three pages.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Options.PrintHiddenText = True
ActiveDocument.PrintOut Range:=wdPrintFromTo, From:="1", To:="3"

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H206">Closing Documents</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex9"></a>
<P>
To close a document, apply the <B>Close</B> method to a <B>Document</B>
object. The following example closes the document named "Sales.doc."


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents("Sales.doc").Close

</code></pre></FONT>
<P>
If there are changes in the document, Word displays a message
asking whether the user wants to save changes. You can prevent
this prompt from appearing by using the <B>wdDoNotSaveChanges</B>
or <B>wdSaveChanges</B> constant with the <B><I>SaveChanges</I></B>
argument. The following example saves and closes Sales.doc.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents("Sales.doc").Close SaveChanges:=wdSaveChanges

</code></pre></FONT>
<P>
To close all open documents, apply the <B>Close</B> method to
the <B>Documents</B> collection. The following example closes
all documents without saving changes.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Documents.Close SaveChanges:=wdDoNotSaveChanges

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H207">Accessing Objects in a Document</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex10"></a>
<P>
From the <B>Document</B> object, you have access to a number of
properties and methods that return objects. To view a graphical
representation of the objects available from the <B>Document</B>
object, see "Microsoft Word Objects (Documents)" in
Help. For example, the <B>Tables</B> property, which returns a
collection of <B>Table</B> objects, is available from the <B>Document</B>
object. Use the <B>Count</B> property with a collection object
to determine how many items there are in the collection. The following
example displays a message that indicates how many tables there
are in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>MsgBox ActiveDocument.Tables.Count &amp; " table(s) in this document"

</code></pre></FONT>
<P>
Use <B>Tables</B>(<I>index</I>), where <I>index</I>
is the index number, to return a single <B>Table</B> object. In
the following example, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myTable</FONT>
refers to the first table in the document named "Sales.doc."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myTable = Documents("Sales.doc").Tables(1)

</code></pre></FONT>
<P>
Information about returning a particular object is available in
the object topic itself (for example, "Table Object")
and in the corresponding collection object topic (for example,
"Tables Collection Object") in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H208">Adding Objects to a Document</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex11"></a>
<P>
You can add objects, such as a footnotes, comments, or tables,
to a document using the <B>Add</B> method with a collection object
accessed from the <B>Document</B> object. For example, the following
instruction adds a 3x3 table at the location specified by the
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT> variable
(<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT> is
an object variable that contains a <B>Range</B> object).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Tables.Add Range:=myRange, NumRows:=3, NumColumns:=3

</code></pre></FONT>
<P>
This following example adds a footnote at the location specified
by the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Footnotes.Add Range:=myRange, Text:="The Willow Tree"

</code></pre></FONT>
<P>
For a list of collection objects that support the <B>Add</B> method,
see "Add Method" in Help.
<P>

<A NAME="PG007C3"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H103">Working with the Range Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex12"></a>
<P>
A common task when using Visual Basic is to specify an area in
a document and then do something with it, such as insert text
or apply formatting. For example, you may want to write a macro
that locates a word or phrase within a portion of a document.
You can use a <B>Range</B> object to represent the portion of
the document you want to search for the specified word or phrase.
After you identify the <B>Range</B> object, you can apply methods
and properties of this object to modify the contents of the range.
<P>
A <B>Range</B> object represents a contiguous area in a document.
Each <B>Range</B> object is defined by a starting character position
and an ending character position. Similar to the way you use bookmarks
in a document, you use <B>Range</B> objects in Visual Basic procedures
to identify specific portions of a document. A <B>Range</B> object
can be as small as the insertion point or as large as the entire
document. However, unlike a bookmark, a <B>Range</B> object exists
only while the procedure that defined it is running.
<P>
<B>Range</B> objects are independent of the selection; that is,
you can define and modify a range without changing the selection.
You can also define multiple ranges in a document, while there
is only one selection per document pane. 
<P>
The <B>Start</B>, <B>End</B>, and <B>StoryType</B> properties
uniquely identify a <B>Range</B> object. The <B>Start</B> and
<B>End</B> properties return or set the starting and ending character
positions of the <B>Range</B> object. The character position at
the beginning of each story is 0 (zero), the position after the
first character is 1, and so on. There are 11 different story
types represented by the <B>WdStoryType</B> constants of the <B>StoryType</B>
property. For example, if a <B>Range</B> object is in the footnote
area, the <B>StoryType</B> property returns <B>wdFootnotesStory</B>.
For more information about stories, see "<A HREF="#CH007H216">Working with Stories</A>" later in this section.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H209">Using the Range Object Instead of the
Selection Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex13"></a>
<P>
The macro recorder will often create a macro that uses the <B>Selection</B>
property to manipulate the <B>Selection</B> object. However, you
can usually accomplish the same task with fewer instructions by
using one or more <B>Range</B> objects. The following example
was created using the macro recorder. This macro applies bold
formatting to the first two words in the document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.HomeKey Unit:=wdStory
Selection.MoveRight Unit:=wdWord, Count:=2, Extend:=wdExtend
Selection.Font.Bold = wdToggle

</code></pre></FONT>

<P>
The following example accomplishes the same task without using
the <B>Selection</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Range(Start:=0, End:=ActiveDocument.Words(2).End).Bold = True

</code></pre></FONT>
<P>
The following example applies bold formatting to the first two
words in the document, and then it inserts a new paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.HomeKey Unit:=wdStory
Selection.MoveRight Unit:=wdWord, Count:=2, Extend:=wdExtend
Selection.Font.Bold = wdToggle
Selection.MoveRight Unit:=wdCharacter, Count:=1
Selection.TypeParagraph

</code></pre></FONT>

<P>
The following example accomplishes the same task as the preceding
example without using the <B>Selection</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Range(Start:=0, End:=ActiveDocument.Words(2).End)
myRange.Bold = True
myRange.InsertParagraphAfter

</code></pre></FONT>

<P>
Both of the preceding examples change the formatting in the active
document without changing the selection. In most cases, <B>Range</B>
objects are preferred over the <B>Selection</B> object for the
following reasons:
<P>

<UL>
<P>
<LI>You can define and use multiple
<B>Range</B> objects, whereas you can only have one <B>Selection</B>
object per document window.
<P>
<LI>Manipulating <B>Range</B>
objects doesn't change the selected text.
<P>
<LI>Manipulating
<B>Range</B> objects is faster than working with the selection.
<P>
</UL>
<A NAME="CH007H210"></A>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B>Using the Range Method to Return a Range Object</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex14"></a>
<P>
You use the <B>Range</B> method to create a <B>Range</B> object
in the specified document. The <B>Range</B> method (which is available
from the <B>Document</B> object) returns a <B>Range</B> object
located in the main story, with a given starting point and ending
point. The following example creates a <B>Range</B> object that's
assigned to the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Range(Start:=0, End:=10)

</code></pre></FONT>
<P>
<a name="dex15"></a>
<P>
In the preceding example, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>
represents the first 10 characters in the active document. You
can see that the <B>Range</B> object has been created when you
apply a property or method to the <B>Range</B> object stored in
the <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>
variable. The following example applies bold formatting to the
first 10 characters in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Range(Start:=0, End:=10)
myRange.Bold = True

</code></pre></FONT>

<P>
When you need to refer to a <B>Range</B> object multiple times,
you can use the <B>Set</B> statement to set a variable equal to
the <B>Range</B> object. However, if you need to perform only
a single action on a <B>Range</B> object, there's no need to store
the object in a variable. You can achieve the same results by
using just one instruction that identifies the range and changes
the <B>Bold</B> property, as in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Range(Start:=0, End:=10).Bold = True

</code></pre></FONT>
<P>
Like a bookmark, a range can span a group of characters or mark
a location in a document. In the following example, the starting
and ending points of the <B>Range</B> object are the same, and
the range doesn't include any text. The example inserts text at
the beginning of the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Range(Start:=0, End:=0).InsertBefore Text:="Hello "

</code></pre></FONT>
<P>
You can define the beginning and ending points of a range by using
the character position numbers as shown in the preceding example,
or by using the <B>Start</B> and <B>End</B> properties with the
<B>Selection</B>, <B>Bookmark</B>, or <B>Range</B> object. The
following example creates a <B>Range</B> object that refers to
the third and fourth sentences in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myDoc = ActiveDocument
Set myRange = myDoc.Range(Start:=myDoc.Sentences(3).Start, _
&nbsp;&nbsp;&nbsp; End:=myDoc.Sentences(4).End)

</code></pre></FONT>


<B><FONT SIZE=2 COLOR=#0000FF FACE="Verdana, Arial, Helvetica">Tip</FONT></B>&nbsp;&nbsp;&nbsp;A
<B>Range</B> object doesn't have a visual representation in a
document. You can, however, use the <B>Select</B> method to select
a <B>Range</B> object to ensure that the <B>Range</B> object refers
to the correct range of text. The <B>Range</B> object in the following
example refers to the first three paragraphs in the active document.
After this macro has been run, the selection indicates the range
of text that was contained in the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">aRange</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set aRange = ActiveDocument.Range(Start:=0, _
&nbsp;&nbsp;&nbsp; End:=ActiveDocument.Paragraphs(3).Range.End)
aRange.Select

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H211">Using the Range Property to Return a Range
Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex16"></a>
<P>
The <B>Range</B> property is available from multiple objects&nbsp;&#151;
for instance, <B>Paragraph</B>, <B>Bookmark</B>, <B>Endnote</B>,
and <B>Cell</B>&nbsp;&#151; and is used to return a <B>Range</B>
object. The following example returns a <B>Range</B> object that
refers to the first paragraph in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Paragraphs(1).Range

</code></pre></FONT>
<P>
After you've created a reference to a <B>Range</B> object, you
can use any of its properties or methods to modify the range.
The following example copies the first paragraph in the active
document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Paragraphs(1).Range
myRange.Copy

</code></pre></FONT>

<P>
This following example copies the first row in table one in the
active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Tables(1).Rows(1).Range.Copy

</code></pre></FONT>
<P>
The following example displays the text marked by the first bookmark
in the active document. The <B>Range</B> property is available
from the <B>Bookmark</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>MsgBox ActiveDocument.Bookmarks(1).Range.Text

</code></pre></FONT>
<P>
If you need to apply numerous properties or methods to the same
<B>Range</B> object, you can use the <B>With&#133;End With</B>
statement. The following example formats the text in the first
paragraph in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Paragraphs(1).Range
With myRange
&nbsp;&nbsp;&nbsp; .Bold = True
&nbsp;&nbsp;&nbsp; .ParagraphFormat.Alignment = wdAlignParagraphCenter
&nbsp;&nbsp;&nbsp; .Font.Name = "Arial"
End With

</code></pre></FONT>

<P>
For additional examples of returning <B>Range</B> objects, see
"Range Property" in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H212">Modifying a Portion of a Document</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex17"></a>
<P>
Visual Basic includes objects you can use to modify the following
types of document elements: characters, words, sentences, paragraphs,
and sections. The following table includes the properties that
correspond to these document elements and the objects they return.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

This expression</FONT></B></FONT></TD>
<TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Returns this object</FONT></B></FONT></TD>
</TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Words</B>(<I>index</I>)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Range</B></FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Characters</B>(<I>index</I>)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Range</B></FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Sentences</B>(<I>index</I>)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Range</B></FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Paragraphs</B>(<I>index</I>)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Paragraph</B></FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Sections</B>(<I>index</I>)</FONT>
</FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

<B>Section</B></FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
When you use these properties without an index, a collection with
the same name is returned&nbsp;&#151; for example, the <B>Paragraphs</B>
property returns the <B>Paragraphs</B> collection. However, if
you identify an item within a collection by index, the object
in the second column of the preceding table is returned&nbsp;&#151;
for example, <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Words(1)</FONT>
returns a <B>Range</B> object. You can use any of the range properties
or methods to modify a <B>Range</B> object, as in the following
example, which copies the first word in the selection to the Clipboard.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Words(1).Copy

</code></pre></FONT>
<P>
The items in the <B>Paragraphs</B> and <B>Sections</B> collections
are <B>Paragraph</B> and <B>Section</B> objects, respectively,
rather than <B>Range</B> objects. However, the <B>Range</B> property
(which returns a <B>Range</B> object) is available from both the
<B>Paragraph</B> and <B>Section</B> objects. The following example
copies the first paragraph in the active document to the Clipboard.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Paragraphs(1).Range.Copy

</code></pre></FONT>
<P>
All the document element properties in the preceding table are
available from the <B>Document</B>, <B>Selection</B>, and <B>Range</B>
objects, as shown in the following three examples.
<P>
This example sets the case of the first word in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Words(1).Case = wdUpperCase

</code></pre></FONT>
<P>
This example sets the bottom margin of the first selected section
to 0.5 inch.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Sections(1).PageSetup.BottomMargin = InchesToPoints(0.5)

</code></pre></FONT>
<P>
This example double&#173;spaces the text in the active document
(the <B>Content</B> property returns a <B>Range</B> object that
represents the main document story).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Content.ParagraphFormat.Space2

</code></pre></FONT>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Modifying a Group of Document Elements</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
To modify a range of text that consists of a group of document
elements (characters, words, sentences, paragraphs, or sections),
you can create a <B>Range</B> object that includes the document
elements. Using the <B>Start</B> and <B>End</B> properties with
a <B>Range</B> object, you can create a new <B>Range</B> object
that refers to a group of document elements. The following example
creates a <B>Range</B> object (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>)
that refers to the first three words in the active document and
then changes the font for these words to Arial.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set Doc = ActiveDocument
Set myRange = Doc.Range(Start:=Doc.Words(1).Start, End:=Doc.Words(3).End)
myRange.Font.Name = "Arial"

</code></pre></FONT>

<P>
The following example creates a <B>Range</B> object beginning
at the start of the second paragraph and ending after the fourth
paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myDoc = ActiveDocument
Set myRange = myDoc.Range(Start:=myDoc.Paragraphs(2).Range.Start, _
&#09;End:=myDoc.Paragraphs(4).Range.End)

</code></pre></FONT>

<P>
The following example creates a <B>Range</B> object (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">aRange</FONT>)
beginning at the start of the second paragraph and ending after
the third paragraph. The <B>ParagraphFormat</B> property is used
to access paragraph formatting properties such as <B>SpaceBefore</B>
and <B>SpaceAfter</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set Doc = ActiveDocument
Set aRange = Doc.Range(Start:=Doc.Paragraphs(2).Range.Start, _
&#09;End:=Doc.Paragraphs(3).Range.End)
With aRange.ParagraphFormat
&nbsp;&nbsp;&nbsp; .Space1
&nbsp;&nbsp;&nbsp; .SpaceAfter = 6
&nbsp;&nbsp;&nbsp; .SpaceBefore = 6
End With

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Returning or Setting the Text in a Range</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Text</B> property to return or set the contents of
a <B>Range</B> object. The following example returns the first
word in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>strText = ActiveDocument.Words(1).Text

</code></pre></FONT>
<P>
The following example changes the first word in the active document
to "Hello."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Words(1).Text = "Hello"

</code></pre></FONT>
<P>
Use the <B>InsertAfter</B> or <B>InsertBefore</B> method to insert
text before or after a range. The following example inserts text
at the beginning of the second paragraph in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Paragraphs(2).Range.InsertBefore Text:="In the beginning "

</code></pre></FONT>
<P>
After you use either the <B>InsertAfter</B> or <B>InsertBefore</B>
method, the range expands to include the new text. You can, however,
collapse the range to its beginning or ending point by using the
<B>Collapse</B> method. The following example inserts the word
"Hello" before the existing text and then collapses
the range to its beginning (before the word "Hello").

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With ActiveDocument.Paragraphs(2).Range
&nbsp;&nbsp;&nbsp; .InsertBefore Text:="Hello "
&nbsp;&nbsp;&nbsp; .Collapse Direction:=wdCollapseStart
End With

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Formatting the Text in a Range</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Font</B> property to get to character&#173;formatting
properties and methods, and use the <B>ParagraphFormat</B> property
to get to paragraph&#173;formatting properties and methods. The
following example sets character and paragraph formatting for
the text in the first paragraph in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With ActiveDocument.Paragraphs(1).Range.Font
&nbsp;&nbsp;&nbsp; .Name = "Times New Roman"
&nbsp;&nbsp;&nbsp; .Size = 14
&nbsp;&nbsp;&nbsp; .AllCaps = True
End With
With ActiveDocument.Paragraphs(1).Range.ParagraphFormat
&nbsp;&nbsp;&nbsp; .LeftIndent = InchesToPoints(0.5)
&nbsp;&nbsp;&nbsp; .Space1
End With

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H213">Redefining a Range Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex18"></a>
<P>
Use the <B>SetRange</B> method to redefine an existing <B>Range</B>
object. The following example defines <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>
as the current selection. The <B>SetRange</B> method redefines
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT> so
that it refers to the current selection plus the next 10 characters.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = Selection.Range
myRange.SetRange Start:=myRange.Start, End:=myRange.End + 10

</code></pre></FONT>

<P>
For additional information about and examples of redefining a
<B>Range</B> object, see "SetRange Method" in Help.
<P>
You can also redefine a <B>Range</B> object by changing the values
of the <B>Start</B> and <B>End</B> properties, or by using the
<B>MoveStart</B> or <B>MoveEnd</B> methods. The following example
redefines <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>
so that it refers to the current selection plus the next 10 characters.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = Selection.Range
myRange.End = myRange.End + 10

</code></pre></FONT>

<P>
The following example uses the <B>MoveEnd</B> method to extend
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT> to
include the next paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Paragraphs(2)
myRange.MoveEnd Unit:=wdParagraph, Count:=1

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H214">Looping Through a Range of Paragraphs</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex19"></a>
<P>
There are several different ways to loop through the paragraphs
in a range. This section includes examples of using the <B>For
Each...Next</B> statement and the <B>Next</B> property and method
to loop through a range of paragraphs. You can use these same
techniques to loop through characters, words, or sentences in
a range.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Using the For Each...Next Statement</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The recommended way to loop through the paragraphs in a range
is to use the <B>For Each...Next</B> statement, which is also
the recommended way to loop on the elements in a collection. The
following example loops through the first five paragraphs in the
active document, adding text before each paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myDoc = ActiveDocument
Set myRange = myDoc.Range(Start:=myDoc.Paragraphs(1).Range.Start, _
&nbsp;&nbsp;&nbsp; End:=myDoc.Paragraphs(5).Range.End)
For Each para In myRange.Paragraphs
&nbsp;&nbsp;&nbsp; para.Range.InsertBefore "Question:" &amp; vbTab
Next para

</code></pre></FONT>

<P>
Suppose that you want to modify this code to loop through a range
of paragraphs that a user selected. You can use the <B>Selection</B>
property to refer to the paragraphs in the selection. The following
example loops through the paragraphs in the selection, removing
bold formatting.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each para In Selection.Paragraphs
&nbsp;&nbsp;&nbsp; para.Range.Bold = False
Next para

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Using the Next Property or Method</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
You can also use the <B>Next</B> property and method to loop through
a range of paragraphs. The following example shows how you can
loop through a range of words and increase the size of each word
by 1 point. The example also uses the <B>Next</B> method to redefine
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT> to
represent the next word.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Words(1)
For i = 1 To 5
&nbsp;&nbsp;&nbsp; myRange.Font.Size = myRange.Font.Size + i
&nbsp;&nbsp;&nbsp; Set myRange = myRange.Next(Unit:=wdWord, Count:=1)
Next i

</code></pre></FONT>

<P>
The following example loops through a range of paragraphs and
changes the range's alignment from centered to left aligned. The
example also uses the <B>Next</B> property to redefine <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myRange</FONT>
to represent the next paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Paragraphs(1).Range
For i = 1 To 5
&nbsp;&nbsp;&nbsp; If myRange.Paragraphs(1).Alignment = wdAlignParagraphCenter Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  myRange.Paragraphs(1).Alignment = wdAlignParagraphLeft
&nbsp;&nbsp;&nbsp; End If
&nbsp;&nbsp;&nbsp; Set myRange = myRange.Paragraphs(1).Next.Range
Next i

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H215">Assigning Ranges</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex20"></a>
<P>
There are several ways to assign an existing <B>Range</B> object
to a variable. In the following examples, the variables <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>
and <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>
refer to <B>Range</B> objects. The instructions in the examples
assign the first and second words in the active document to the
variables <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>
and <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>,
respectively. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set Range1 = ActiveDocument.Words(1)
Set Range2 = ActiveDocument.Words(2)

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Setting a Range Object Variable Equal to Another Range Object
Variable</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The following example creates the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>
and assigns it to the same range as <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set Range2 = Range1

</code></pre></FONT>
<P>
You now have two variables that represent the same range. When
you manipulate the starting point, the ending point, or the text
of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>,
your changes affect <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>
as well, and vice versa.
<P>
The following example assigns the value of the default property
of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>
(the <B>Text</B> property) to the default property of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>.
The code in this example is equivalent to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2.Text
= Range1.Text</FONT>, which doesn't change what the <B>Range</B>
objects actually represent; the only thing that's changed is the
contents (text) of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Range2 = Range1

</code></pre></FONT>
<P>
The two ranges (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>
and <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>)
have the same contents as one another, but they may point to different
locations in the document, or even to different documents.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Using the Duplicate Property</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The following example creates a new, duplicated <B>Range</B> object,
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>, which
has the same starting point, ending point, and text as <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>.


<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set Range2 = Range1.Duplicate

</code></pre></FONT>
<P>
If you change the starting or ending point of <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range1</FONT>,
this change doesn't affect <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Range2</FONT>,
and vice versa. However, because these two ranges point to the
same location in the document, changing the text in one range
changes the text in the other range as well.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H216">Working with Stories</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex21"></a>
<P>
A story is a document area that contains a range of text distinct
from other areas of text in that document. For example, if a document
includes body text, footnotes, and headers, it contains a main
text story, a footnotes story, and a headers story. There are
11 different types of stories you can have in a document, corresponding
to the following <B>WdStoryType</B> constants: <B>wdCommentsStory</B>,
<B>wdEndnotesStory</B>, <B>wdEvenPagesFooterStory</B>, <B>wdEvenPagesHeaderStory</B>,
<B>wdFirstPageFooterStory</B>, <B>wdFirstPageHeaderStory</B>,
<B>wdFootnotesStory</B>, <B>wdMainTextStory</B>, <B>wdPrimaryFooterStory</B>,
<B>wdPrimaryHeaderStory</B>, and <B>wdTextFrameStory</B>.
<P>
Use the <B>StoryType</B> property to return the story type for
the specified range, selection, or bookmark. The following example
closes the footnote pane in the active window if the selection
is contained in the footnote story. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveWindow.View.Type = wdNormalView
If Selection.StoryType = wdFootnotesStory Then ActiveWindow.ActivePane.Close

</code></pre></FONT>

<P>
The <B>StoryRanges</B> collection contains the first story range
for each story type available in a document. Use the <B>NextStoryRange</B>
method to return subsequent stories. The following example searches
each story in the active document for the text "Microsoft
Word." The example also applies italic formatting to any
instances of this text that it finds.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each myStoryRange In ActiveDocument.StoryRanges
&nbsp;&nbsp;&nbsp; myStoryRange.Find.Execute FindText:="Microsoft Word", Forward:=True
&nbsp;&nbsp;&nbsp; While myStoryRange.Find.Found
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  myStoryRange.Italic = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  myStoryRange.Find.Execute FindText:="Microsoft Word", _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Forward:=True, Format:=True
&nbsp;&nbsp;&nbsp; Wend
&nbsp;&nbsp;&nbsp; While Not (myStoryRange.NextStoryRange Is Nothing)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Set myStoryRange = myStoryRange.NextStoryRange
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  myStoryRange.Find.Execute FindText:="Microsoft Word", Forward:=True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  While myStoryRange.Find.Found
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStoryRange.Italic = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myStoryRange.Find.Execute FindText:="Microsoft Word", _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Forward:=True, Format:=True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Wend
&nbsp;&nbsp;&nbsp; Wend
Next myStoryRange

</code></pre></FONT>

<P>
<A NAME="PG007C4"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H104">Working with the Selection Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex22"></a>
<P>
When you work on a document in Word, you usually select text and
then perform an action, such as formatting existing text or typing
new text. In Visual Basic, it's usually not necessary to select
text before modifying it; instead, you create and manipulate a
<B>Range</B> object that refers to a specific portion of the document.
However, when you want your code to respond to or change the selection,
you can do so with the <B>Selection</B> object. 
<P>
Use the <B>Selection</B> property to return the <B>Selection</B>
object. There can only be one <B>Selection</B> object per pane
in a document window, and only one <B>Selection</B> object can
be active at any given time. The selection can either encompass
an area in the document or be collapsed to an insertion point.
The following example changes the paragraph formatting of the
paragraphs in the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Paragraphs.SpaceBefore = InchesToPoints(0.25)

</code></pre></FONT>
<P>
The <B>Selection</B> property is available from the <B>Application</B>,
<B>Window</B>, and <B>Pane</B> objects. If you use the <B>Selection</B>
property with the <B>Application</B> object, the <B>Selection</B>
object refers to the active selection. The following example inserts
text after the selection (because <B>Selection</B> is a global
property, the <B>Application</B> property isn't included).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.InsertAfter Text:="Next Text"

</code></pre></FONT>
<P>
You can also use the <B>Selection</B> property with a <B>Window</B>
or <B>Pane</B> object to return a <B>Selection</B> object in a
particular window or window pane. The following example uses the
<B>Selection</B> property with a <B>Window</B> object to insert
text into the document window named "Document2."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Windows("Document2").Selection.InsertAfter Text:="New Text"

</code></pre></FONT>
<P>
The following example uses the <B>Selection</B> property with
a <B>Pane</B> object to insert text into the primary header pane.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With ActiveWindow
&nbsp;&nbsp;&nbsp; .View.Type = wdPageView
&nbsp;&nbsp;&nbsp; .View.SeekView = wdSeekPrimaryHeader
&nbsp;&nbsp;&nbsp; .ActivePane.Selection.InsertAfter Text:="Header"
End With

</code></pre></FONT>

<P>
After you use the <B>InsertAfter</B> or <B>InsertBefore</B> method,
the selection expands to include the new text. You can, however,
collapse the selection to its beginning or ending point by using
the <B>Collapse</B> method. The following example inserts the
word "Hello" after the text in the selection and then
collapses the selection to an insertion point after the word "Hello."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.InsertAfter Text:="Hello"
Selection.Collapse Direction:=wdCollapseEnd

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H217">Moving and Extending the Selection</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex23"></a>
<P>
There are a number of methods you can use to move or extend the
selection represented by the <B>Selection</B> object (for instance,
<B>Move</B> and <B>MoveEnd</B>). The following example moves the
selection to the beginning of the next paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.MoveDown Unit:=wdParagraph, Count:=1, Extend:=wdMove

</code></pre></FONT>
<P>
You can also move or extend the selection by changing the values
of the <B>Start</B> and <B>End</B> properties of the <B>Selection</B>
object or by using the <B>MoveStart</B> and <B>MoveEnd</B> methods.
The following example extends the selection by moving the ending
position to the end of the paragraph.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.MoveEnd Unit:=wdParagraph, Count:=1

</code></pre></FONT>
<P>
Because there can be only one selection in a document window or
pane, you can also move the selection by selecting another object.
Use the <B>Select</B> method to select an item in a document.
After using the <B>Select</B> method, you can use the <B>Selection</B>
property to return a <B>Selection</B> object. The following example
selects the first word in the active document and then changes
the word to "Hello."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Words(1).Select
Selection.Text = "Hello "

</code></pre></FONT>

<P>
You can also move the selection by using the <B>GoToNext</B>,
<B>GoToPrevious</B>, or <B>GoTo</B> method. The following example
moves the selection to the fourth line in the document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, Count:=4

</code></pre></FONT>
<P>
The following example moves the selection just before the next
field in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.GoToNext What:=wdGoToField

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H218">Objects Available from the Selection Object</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex24"></a>
<P>
Many of the objects available from the <B>Range</B> and <B>Document</B>
objects are also available from the <B>Selection</B> object, making
it possible for you to manipulate the objects within a selection.
For a complete list of the objects available from the <B>Selection</B>
object, see "Microsoft Word Objects (Selection)" or
"Selection Object" in Help.
<P>
The following example updates the results of the fields in the
selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Selection.Fields.Count &gt;= 1 Then Selection.Fields.Update

</code></pre></FONT>
<P>
The following example indents the paragraphs in the selection
by 0.5 inch.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Paragraphs.LeftIndent = InchesToPoints(0.5)

</code></pre></FONT>
<P>
Instead of manipulating all the objects in the collection, you
can use <B>For Each...Next</B> to loop through the individual
objects in the selection. The following example loops through
each paragraph in the selection and left aligns any paragraphs
it finds that are centered.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each para In Selection.Paragraphs
&nbsp;&nbsp;&nbsp;If para.Alignment = wdAlignParagraphCenter Then para.Alignment = _
&#09;wdAlignParagraphLeft
Next para

</code></pre></FONT>

<P>
The following example displays the name of each bookmark in the
selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>For Each aBook In Selection.Bookmarks
&nbsp;&nbsp;&nbsp;MsgBox aBook.Name
Next aBook

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H219">Properties and Methods of the Selection
Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex25"></a>
<P>
This section highlights some of the commonly used properties and
methods of the <B>Selection</B> object.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Returning or Setting the Text in the Selection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Text</B> property to return or set the contents of
a <B>Selection</B> object. The following example returns the selected
text.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>strText = Selection.Text

</code></pre></FONT>
<P>
The following example changes the selected text to "Hello
World."

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Text = "Hello World"

</code></pre></FONT>
<P>
Use the <B>InsertBefore</B> or <B>InsertAfter</B> method to insert
text before or after the selection. The following example inserts
text at the beginning of the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.InsertBefore Text:="And furthermore "

</code></pre></FONT>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Formatting the Selected Text</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Font</B> property to gain access to character&#173;formatting
properties and methods, and use the <B>ParagraphFormat</B> property
to gain access to paragraph&#173;formatting properties and methods.
The following example sets character and paragraph formatting
for the selection.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With Selection.Font
&nbsp;&nbsp;&nbsp; .Name = "Times New Roman"
&nbsp;&nbsp;&nbsp; .Size = 14
End With
Selection.ParagraphFormat.LeftIndent = InchesToPoints(0.5)

</code></pre></FONT>

<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Returning a Range Object</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
If a method or property is available from the <B>Range</B> object
but not from the <B>Selection</B> object (the <B>CheckSpelling</B>
method, for example), use the <B>Range</B> property to return
a <B>Range</B> object from the <B>Selection</B> object. The following
example checks the spelling of the selected words. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Range.CheckSpelling

</code></pre></FONT>
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Returning Information About the Selection</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Information</B> property to return information about
the selection. For example, you can determine the current page
number, the total number of pages in a document, or whether or
not the selection is in a header or footer. The <B>Information</B>
property accepts 35 different constants (<B>wdActiveEndPageNumber</B>,
<B>wdNumberOfPagesInDocument</B>, and <B>wdInHeaderFooter</B>,
to name just a few) that you can use to return different types
of information about the selection. If the selection is in a table,
for instance, the following example displays the number or rows
and columns in the table.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Selection.Information(wdWithInTable) = True Then
&nbsp;&nbsp;&nbsp; MsgBox "Columns = " &amp; Selection.Information(wdMaximumNumberOfColumns) _
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &amp; vbCr &amp; "Rows = " &amp; Selection.Information(wdMaximumNumberOfRows)
End If

</code></pre></FONT>

<P>
For a complete list and description of the constants you can use
with the <B>Information</B> property, see "Information Property"
in Help.
<P>
<FONT SIZE=3 FACE="Verdana, Arial, Helvetica"><B>Determining Whether Text Is Selected</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
Use the <B>Type</B> property to set or return the way you want
the selection to be indicated in your document. For instance,
you can use the <B>wdSelectionBlock</B> constant to determine
whether a block of text is selected. The following example selects
the paragraph that contains the insertion point if the selection
is an insertion point.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Selection.Type = wdSelectionIP Then
&nbsp;&nbsp;&nbsp; Selection.Paragraphs(1).Range.Select
End If

</code></pre></FONT>

<P>
<A NAME="CH007H105"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H105">Working with the Find and Replacement Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex26"></a>
<P>
Use the <B>Find</B> and <B>Replacement</B> objects to find and
replace specified ranges of text in your documents. The <B>Find</B>
object is available from either the <B>Selection</B> or <B>Range</B>
object (the find action differs slightly depending on whether
you return the <B>Find</B> object from the <B>Selection</B> object
or the <B>Range</B> object).
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H220">Using Selection.Find</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
If you return the <B>Find</B> object from the <B>Selection</B>
object, the selection is changed when the find criteria are found.
The following example selects the next occurrence of the word
"Hello." If the end of the document is reached before
the word "Hello" is found, the search is stopped.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With Selection.Find
&nbsp;&nbsp;&nbsp; .Forward = True
&nbsp;&nbsp;&nbsp; .Wrap = wdFindStop
&nbsp;&nbsp;&nbsp; .Text = "Hello"
&nbsp;&nbsp;&nbsp; .Execute
End With

</code></pre></FONT>

<P>
The <B>Find</B> object includes properties that relate to the
options in the <B>Find and Replace</B> dialog box (<B>Edit</B>
menu). You can set the individual properties of the <B>Find</B>
object, or you can use arguments with the <B>Execute</B> method,
as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Selection.Find.Execute FindText:="Hello", Forward:=True, Wrap:=wdFindStop

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H221">Using Range.Find</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
If you return the <B>Find</B> object from a <B>Range</B> object,
the selection isn't changed but the range is redefined when the
find criteria are found. The following example locates the first
occurrence of the word "blue" in the active document.
If the find operation is successful, the range is redefined and
bold formatting is applied to the word "blue." 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With ActiveDocument.Content.Find
&nbsp;&nbsp;&nbsp; .Text = "blue"
&nbsp;&nbsp;&nbsp; .Forward = True
&nbsp;&nbsp;&nbsp; .Execute
&nbsp;&nbsp;&nbsp; If .Found = True Then .Parent.Bold = True
End With

</code></pre></FONT>

<P>
The following example performs the same action as the preceding
example, using arguments of the <B>Execute</B> method.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myRange = ActiveDocument.Content
myRange.Find.Execute FindText:="blue", Forward:=True
If myRange.Find.Found = True Then myRange.Bold = True

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H222">Using the Replacement Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
The <B>Replacement</B> object represents the replace criteria
for a find and replace operation. The properties and methods of
the <B>Replacement</B> object correspond to the options in the
<B>Find and Replace</B> dialog box (<B>Edit</B> menu).
<P>
The <B>Replacement</B> object is available from the <B>Find</B>
object. The following example replaces all occurrences of the
word "hi" with "hello." The selection changes
when the find criteria are found because the code returns the
<B>Find</B> object from the <B>Selection</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With Selection.Find
&nbsp;&nbsp;&nbsp; .ClearFormatting
&nbsp;&nbsp;&nbsp; .Text = "hi"
&nbsp;&nbsp;&nbsp; .Replacement.ClearFormatting
&nbsp;&nbsp;&nbsp; .Replacement.Text = "hello"
&nbsp;&nbsp;&nbsp; .Execute Replace:=wdReplaceAll, Forward:=True, Wrap:=wdFindContinue
End With

</code></pre></FONT>

<P>
The following example removes all bold formatting in the active
document. The <B>Bold</B> property is <B>True</B> for the <B>Find</B>
object and <B>False</B> for the <B>Replacement</B> object. To
find and replace formatting, set the find and replace text to
empty strings (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">""</FONT>),
and set the <B><I>Format</I></B> argument of the <B>Execute</B>
method to <B>True</B>. The selection remains unchanged because
the code returns the <B>Find</B> object from a <B>Range</B> object
(the <B>Content</B> property returns a <B>Range</B> object).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>With ActiveDocument.Content.Find
&nbsp;&nbsp;&nbsp; .ClearFormatting
&nbsp;&nbsp;&nbsp; .Font.Bold = True
&nbsp;&nbsp;&nbsp; With .Replacement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .ClearFormatting
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Font.Bold = False
&nbsp;&nbsp;&nbsp; End With
&nbsp;&nbsp;&nbsp; .Execute FindText:="", ReplaceWith:="", Format:=True, Replace:=wdReplaceAll
End With

</code></pre></FONT>

<P>
<A NAME="PG007C6"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H106">Working with Table, Column, Row, and Cell Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex27"></a>
<P>
The Word object model includes an object for tables as well as
objects for the various elements of a table. Use the <B>Tables</B>
property with the <B>Document</B>, <B>Range</B>, or <B>Selection</B>
object to return the <B>Tables</B> collection. Use <B>Tables</B>(<I>index</I>),
where <I>index</I> is the table's index number, to
return a single <B>Table</B> object. The index number represents
the position of the table in the selection, range, or document.
The following example converts the first table in the selection
to text.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Selection.Tables.Count &gt;= 1 Then
&nbsp;&nbsp;&nbsp; Selection.Tables(1).ConvertToText Separator:=wdSeparateByTabs
End If

</code></pre></FONT>

<P>
Use the <B>Cells</B> property with the <B>Column</B>, <B>Range</B>,
<B>Row</B>, or <B>Selection</B> object to return the <B>Cells</B>
collection. You can get an individual <B>Cell</B> object by using
the <B>Cell</B> method of the <B>Table</B> object or by indexing
the <B>Cells</B> collection. The following two statements both
set <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myCell</FONT>
to a <B>Cell</B> object that represents the first cell in table
one in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myCell = ActiveDocument.Tables(1).Cell(Row:=1, Column:=1)
Set myCell = ActiveDocument.Tables(1).Columns(1).Cells(1)

</code></pre></FONT>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;To
insert text into a cell in a table, use the <B>Text</B> property, the
<B>InsertAfter</B> method, or the <B>InsertBefore</B> method with a <B>Range</B> object.
Use the <B>Range</B> property with a <B>Cell</B> object to return a <B>Range</B> object.
The following example inserts a sequential cell number into each
cell in table one.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>i = 1
For Each c In ActiveDocument.Tables(1).Range.Cells
&nbsp;&nbsp;&nbsp; c.Range.InsertBefore Text:="Cell " &amp; i
&nbsp;&nbsp;&nbsp; i = i + 1
Next c

</code></pre></FONT>
<P>
Use the <B>Columns</B> property with the <B>Table</B>, <B>Range</B>,
or <B>Selection</B> object to return the <B>Columns</B> collection.
Use <B>Columns</B>(<I>index</I>), where <I>index</I>
is the index number, to return a single <B>Column</B> object.
The following example selects the first column in table one.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Tables(1).Columns(1).Select

</code></pre></FONT>
<P>
Use the <B>Rows</B> property with the <B>Table</B>, <B>Range</B>,
or <B>Selection</B> object to return the <B>Rows</B> collection.
Use <B>Rows</B>(<I>index</I>), where <I>index</I>
is the index number, to return a single <B>Row</B> object. The
following example applies shading to the first row in table one.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Tables(1).Rows(1).Shading.Texture = wdTexture10Percent

</code></pre></FONT>
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H223">Modifying Rows and Columns in Drawn Tables</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
When you try to work with an individual row or column in a drawn
table (or any table where two or more adjacent cells have been
merged, leaving the rows and columns not uniform), a run&#173;time
error may occur. The following example generates an error if the
first table in the active document doesn't have the same number
of rows in each column.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Tables(1).Rows(1).Borders.Enable = False

</code></pre></FONT>
<P>
You can avoid this error by first using the <B>SelectColumn</B>
or <B>SelectRow</B> method to select the cells in a particular
column or row. After you've selected the column or row you want,
use the <B>Cells</B> property with the <B>Selection</B> object.
The following example selects the first row in table one in the
active document. The example uses the <B>Cells</B> property to
return the selected cells (all the cells in the first row) so
that borders can be removed.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If ActiveDocument.Tables(1).Uniform = False
&nbsp;&nbsp;&nbsp; ActiveDocument.Tables(1).Cell(1, 1).Select
&nbsp;&nbsp;&nbsp; With Selection
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .SelectRow
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Cells.Borders.Enable = False
&nbsp;&nbsp;&nbsp; End With
End If

</code></pre></FONT>

<P>
The following example selects the first column in table one. The
example uses a <B>For Each...Next</B> loop to add text to each
cell in the selection (all the cells in the first column).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If ActiveDocument.Tables(1).Uniform = False
&nbsp;&nbsp;&nbsp; ActiveDocument.Tables(1).Cell(1, 1).Select
&nbsp;&nbsp;&nbsp; Selection.SelectColumn
&nbsp;&nbsp;&nbsp; i = 1
&nbsp;&nbsp;&nbsp; For Each oCell In Selection.Cells
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  oCell.Range.Text = "Cell " &amp; i
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  i = i + 1
&nbsp;&nbsp;&nbsp; Next oCell
End If

</code></pre></FONT>

<P>
<A NAME="PG007C7"></A>
</MENU></MENU></MENU>
<MENU>

<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H107">Working with Other Common Objects</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
This section provides information and tips about working the some
common Word objects.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H224">Using the HeaderFooter Object</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex28"></a>
<P>
The <B>HeaderFooter</B> object can represent either a header or
a footer. The <B>HeaderFooter</B> object is a member of the <B>HeadersFooters</B>
collection, which is available from the <B>Section</B> object.
Use the <B>Headers</B>(<I>index</I>) or <B>Footers</B>(<I>index</I>)
property, where <I>index</I> is one of the <B>WdHeaderFooterIndex</B>
constants, to return a single <B>HeaderFooter</B> object. 
<P>
The following example creates a <B>Range</B> object (<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">oRange</FONT>)
that references the primary footer for section one in the active
document. After the example sets the <B>Range</B> object, it deletes
the existing footer text. It also adds the AUTHOR field to the
footer, along with two tabs and the FILENAME field.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set oRange = ActiveDocument.Sections(1).Footers(wdHeaderFooterPrimary).Range
With oRange
&nbsp;&nbsp;&nbsp; .Delete
&nbsp;&nbsp;&nbsp; .Fields.Add Range:=oRange, Type:=wdFieldFileName, Text:="\p"
&nbsp;&nbsp;&nbsp; .InsertAfter Text:=vbTab
&nbsp;&nbsp;&nbsp; .InsertAfter Text:=vbTab
&nbsp;&nbsp;&nbsp; .Collapse Direction:=wdCollapseStart
&nbsp;&nbsp;&nbsp; .Fields.Add Range:=oRange, Type:=wdFieldAuthor
End With

</code></pre></FONT>

<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;The
<B>PageNumbers</B> collection is available only from a <B>HeaderFooter</B> object.
Apply the <B>Add</B> method to the <B>PageNumbers</B> collection to add page
numbers to a header or footer.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H225">Using the Styles Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex29"></a>
<P>
The <B>Styles</B> collection is available from the <B>Document</B>
object. The following example changes the formatting of the Heading
1 style in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Styles(wdStyleHeading1).Font.Name = "Arial"

</code></pre></FONT>
<P>
The <B>Styles</B> collection isn't available from the <B>Template</B>
object. If you want to modify styles in a template, use the <B>OpenAsDocument</B>
method to open a template as a document so that you can modify
styles. The following example changes the formatting of the Heading
1 style in the template attached to the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set aDoc = ActiveDocument.AttachedTemplate.OpenAsDocument
With aDoc
&nbsp;&nbsp;&nbsp; .Styles(wdStyleHeading1).Font.Name = "Arial"
&nbsp;&nbsp;&nbsp; .Close SaveChanges:=wdSaveChanges
End With

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H226">Specifying the CommandBars Context</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex30"></a>
<P>
Before using the <B>CommandBars</B> collection (which represents
menus and toolbars), use the <B>CustomizationContext</B> property
to set the <B>Template</B> or <B>Document</B> object in which
changes to menus and toolbars are stored. The following example
adds the <B>Double Underline</B> command to the <B>Formatting</B>
toolbar. Because the customization change is stored in the Normal
template, all documents are affected.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>CustomizationContext = NormalTemplate
CommandBars("Formatting").Controls.Add Type:=msoControlButton, _
&nbsp;&nbsp;&nbsp; ID:=60, Before:=7

</code></pre></FONT>

<P>
For more information about the scope of changes to menus and toolbars,
see Chapter&nbsp;8, "<a href="008.htm">Menus and Toolbars</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H227">Using the Dialogs Collection</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>

<P>
<a name="dex31"></a>
<P>
Use the <B>Dialogs</B> property to return the <B>Dialogs</B> collection,
which represents the built&#173;in Word dialog boxes (for example,
the <B>Open</B> and <B>File Save</B> dialog boxes). You cannot
create a new built&#173;in dialog box or add one to the <B>Dialogs</B>
collection. For information about creating custom dialog boxes
with ActiveX controls, see Chapter&nbsp;12, "<a href="012.htm">ActiveX Controls
and Dialog Boxes</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H228">Returning the MailMerge and Envelope Objects</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex32"></a>
<P>
Use the <B>MailMerge</B> property of the <B>Document</B> object
to return a <B>MailMerge</B> object. The <B>MailMerge</B> object
is available regardless of whether or not the specified document
is a mail&#173;merge document. Use the <B>State</B> property to
determine the state of the mail&#173;merge operation before you
execute the merge by using the <B>Execute</B> method. The following
example executes a mail merge if the active document is a main
document with an attached data source.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myMerge = ActiveDocument.MailMerge
If myMerge.State = wdMainAndDataSource Then myMerge.Execute

</code></pre></FONT>

<P>
<a name="dex33"></a>
<P>
Use the <B>Envelope</B> property of the <B>Document</B> object
to return an <B>Envelope</B> object. The <B>Envelope</B> object
is available regardless of whether or not you've added an envelope
to the specified document. However, an error occurs if you use
one of the following properties and you haven't added an envelope
to the document: <B>Address</B>, <B>AddressFromLeft</B>, <B>AddressFromTop</B>,
<B>FeedSource</B>, <B>ReturnAddress</B>, <B>ReturnAddressFromLeft</B>,
<B>ReturnAddressFromTop</B>, or <B>UpdateDocument</B>.
<P>
The following example uses the <B>On Error GoTo</B> statement
to trap the error that occurs if you haven't added an envelope
to the active document. If, however, you've added an envelope
to the document, the recipient address is displayed.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>On Error GoTo ErrorHandler
MsgBox ActiveDocument.Envelope.Address
ErrorHandler:
If Err = 5852 Then MsgBox "Envelope is not in the specified document"

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H229">Adding and Editing Fields in a Document</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex34"></a>
<P>
You can add fields to a document by applying the <B>Add</B> method
to the <B>Fields</B> collection. The following example adds a
DATE field in place of the selection. 

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.Fields.Add Range:=Selection.Range, Type:=wdFieldDate

</code></pre></FONT>
<P>
After you've added a field, you can return or set the field result
and field code by using the <B>Result</B> or <B>Code</B> property,
either of which returns a <B>Range</B> object. The following example
changes the first field code in the selection, updates the field,
and then displays the field result.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If Selection.Fields.Count &gt;= 1 Then
&nbsp;&nbsp;&nbsp; With Selection.Fields(1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Code.Text = "CREATEDATE \*MERGEFORMAT"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Update
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  MsgBox .Result.Text
&nbsp;&nbsp;&nbsp; End With
End If

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H230">InlineShape Objects vs. Shape Objects</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex35"></a>
<P>
A <B>Shape</B> object represents an object in the drawing layer,
such as an AutoShape, freeform, OLE object, ActiveX control, or
picture. <B>Shape</B> objects are anchored to a range of text
but are free&#173;floating in that you can positioned them anywhere
on the page. For information about working with <B>Shape</B> objects,
see Chapter&nbsp;10, "<a href="010.htm">Shapes and the Drawing Layer</A>," and see "Shape Object" in Help.
<P>
An <B>InlineShape</B> object represents an object in the text
layer of a document. An inline shape can be a picture, an OLE
object, or an ActiveX control. <B>InlineShape</B> objects are
treated like characters and are positioned as characters within
a line of text. For information about <B>InlineShape</B> objects,
see "InlineShapes Collection Object" or "InlineShape
Object" in Help.
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H231">Using FormField Objects in Word Forms</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex36"></a>
<P>
You can create an Word online form that includes check boxes,
text boxes, and drop&#173;down list boxes. These form elements
can be inserted using the <B>Forms</B> toolbar. The corresponding
Visual Basic objects are <B>CheckBox</B>, <B>TextInput</B>, and
<B>DropDown</B>. All these objects can be returned from any <B>FormField</B>
object in the <B>FormFields</B> collection; however, you should
return the object that corresponds to the type of the form field.
For example, the following instruction selects the check box form
field named "Check1" in the active document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>ActiveDocument.FormFields("Check1").CheckBox.Value = True

</code></pre></FONT>
<P>
In addition to the form elements available on the <B>Forms</B>
toolbar, you can add ActiveX controls to an online form. ActiveX
controls can be inserted using the <B>Control Toolbox</B>. You
can insert a control into the text layer or into the drawing layer;
the control will be represented by an <B>InlineShape</B> object
or a <B>Shape</B> object, respectively. For more information about
working with ActiveX controls, see Chapter&nbsp;12, "<a href="012.htm">ActiveX
Controls and Dialog Boxes</A>."
<P>

<A NAME="PG007C8"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H108">Determining Whether an Object Is Valid</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex37"></a>
<P>
You can avoid many run&#173;time errors in your code by including
statements that determine whether a particular object returned
by an expression or an object referenced by a variable is valid.
This section discusses some techniques for checking the validity
of a value returned by an expression or stored in a variable.
<P>
You can use the <B>TypeName</B> function with a variable or expression
to determine the object type. The following example displays a
message in the status bar if <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">Selection.NextField</FONT>
returns a <B>Field</B> object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>If TypeName(Selection.NextField) = "Field" Then StatusBar = "A field was found"

</code></pre></FONT>
<P>
The following example is functionally equivalent to the preceding
example; it's different only in that it uses an object variable
(<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myField</FONT>)
to store the return value of the <B>NextField</B> method.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myField = Selection.NextField
If TypeName(myField) = "Field" Then StatusBar = "A field was found"

</code></pre></FONT>

<P>
If the specified variable or expression doesn't refer to an object,
it evaluates to <B>Nothing</B>. The following example applies
the <B>Update</B> method to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">myField</FONT>
if the <B>NextField</B> method doesn't return <B>Nothing</B> (that
is, if the <B>NextField</B> method returns a <B>Field</B> object,
its only other possible return value).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set myField = Selection.NextField
If Not (myField Is Nothing) Then myField.Update

</code></pre></FONT>

<P>
Word includes the global <B>IsObjectValid</B> property. You can
use this property to determine whether an object referenced by
a particular variable is valid. This property returns <B>False</B>
if the object referenced by the variable has been deleted. The
following example adds a table to the active document and assigns
it to the variable <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">aTable</FONT>.
The example deletes the first table from the document. If the
table that <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">aTable</FONT>
refers to wasn't the first table in the document (that is, if
<FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">aTable</FONT> is
still a valid object), the example removes borders from the table.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Set aTable = ActiveDocument.Tables.Add(Range:=Selection.Range, NumRows:=2, _
&#09;NumColumns:=3)
ActiveDocument.Tables(1).Delete
If IsObjectValid(aTable) = True Then aTable.Borders.Enable = False

</code></pre></FONT>
<P>
<A NAME="PG007C9"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H109">Modifying Word Commands</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex38"></a>
<P>
You can modify most Word commands by turning them into macros.
For example, you can modify the <B>Open</B> command on the <B>File</B>
menu so that instead of displaying a list of Word document files
(in Windows, files ending with the .doc file name extension),
Word displays every file in the current folder.
<P>
To display the list of built&#173;in Word commands in the <B>Macro</B>
dialog box (<B>Tools</B> menu), click <B>Word commands</B> in
the <B>Macros in</B> box. Every available menu, toolbar, and shortcut
key command is listed in this box. Each menu command begins with
the menu name associated with that command. For example, the <B>Save</B>
command on the <B>File</B> menu is listed as <B>FileSave</B>.
<P>
You can replace a Word command with a macro by giving a macro
the same name as the Word command. For example, if you create
a macro named "FileSave," Word runs this macro when
you do any of the following: click <B>Save</B> on the <B>File</B>
menu, click the <B>Save</B> button on the <B>Standard</B> toolbar,
or press the shortcut key assigned to <B>FileSave</B>.
<P>
<B><FONT COLOR=#0000FF><IMG SRC="Proced.gif">To
modify a Word command</FONT></B>
<P>

<OL>
<P>
<LI>On the <B>Tools</B> menu,
point to <B>Macro</B>, and then click <B>Macros</B>.
<P>
<LI>In
the <B>Macros in</B> box, click <B>Word Commands</B>.
<P>
<LI>In the
<B>Macro name</B> box, click the Word command you want to modify
(for example, <B>FileSave</B>).
<P>
<LI>In the <B>Macros
in</B> box, select a template or document location where you want
to store the macro. For example, click <B>Normal.dot (global template)</B>
to create a global macro (the <B>FileSave</B> command will be
automatically modified for all documents).
<P>
<LI>Click
<B>Create</B>.
<P>
</OL>

<P>
The Visual Basic Editor opens with a module displayed that contains
a new procedure whose name is the same as the command you clicked.
If you clicked the <B>FileSave</B> command, the FileSave macro
appears as shown in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub FileSave()
'
' FileSave Macro
' Saves the active document or template
'
&nbsp;&nbsp;&nbsp; ActiveDocument.Save

End Sub

</code></pre></FONT>

<P>
You can add additional instructions or remove the existing <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">ActiveDocument.Save</FONT>
instruction. Every time the <B>FileSave</B> command runs, your
FileSave macro runs instead of the Word command. To restore the
original <B>FileSave</B> command, you need to rename or delete
your FileSave macro.
<P>
<FONT COLOR="#0000FF"><B>Note</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>&nbsp;&nbsp;&nbsp;You
can also replace a Word command by creating a code module whose
name is the same as the Word command (for example, FileSave) with
a subroutine named "Main."
<P>

<A NAME="PG007C10"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H110">Working with Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex39"></a>
<P>
An event is an action that's recognized by an object (such as
opening a document or quitting the application) and for which
you can write code to respond. Events can occur as a result of
either a user action or program code, or they can be triggered
by the system. Word supports the events listed in the following
tables, as well as the ActiveX control events discussed in Chapter&nbsp;12,
"<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<P>
For more information about working with Word events, see the following
Help topics: "Using Events with the Document Object,"
"Using Events with ActiveX Controls," and "Using
Events with the Application Object."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H232">Document Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex40"></a>
<P>
Document events occur when the user opens or closes an existing
document or creates a new document, as shown in the following
table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Event</FONT></B></FONT></TD><TD WIDTH=59% VALIGN="BOTTOM" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Close</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Occurs when a document is closed.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

New</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Occurs when a new document based on the template is created.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Open</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Occurs when a document is opened.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
The scope of a document event procedure depends on where it is
stored. If you store a Open or Close event procedure in a document,
the procedure will run only when the user closes or opens that
document; if you store a Open or Close event procedure in a template,
the procedure will run when a document based on the template or
the template itself is opened or closed. A New event procedure
must be stored in a template; a New event procedure stored in
a document will never run, because new documents can only be based
on templates.
<P>
The following example maximizes the Word application window when
the document is opened.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub Document_Open()
&nbsp;&nbsp;&nbsp; Application.WindowState = wdWindowStateMaximize
End Sub

</code></pre></FONT>


<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H233">ActiveX Control Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex41"></a>
<P>
Word implements the LostFocus and GotFocus events for ActiveX
controls in a Word document. 
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Event</FONT></B></FONT></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

LostFocus</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Occurs when the focus is moved from an embedded ActiveX control.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

GotFocus</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Occurs when the focus is moved to an embedded ActiveX control.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<A NAME="CVeventsdoc014003">The following example leaves CommandButton1
disabled until the user enters a value in TextBox1.</A>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub TextBox1_LostFocus()
&nbsp;&nbsp;&nbsp; If TextBox1.Value = "" Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  CommandButton1.Enabled = False
&nbsp;&nbsp;&nbsp; Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  CommandButton1.Enabled = True
&nbsp;&nbsp;&nbsp; End If
End Sub

</code></pre></FONT>


<P>
Additional ActiveX control events are documented in Microsoft
Forms Help. For information about using ActiveX controls in custom
dialog boxes and documents, see Chapter&nbsp;12, "<a href="012.htm">ActiveX Controls and Dialog Boxes</A>."
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H234">Application Events</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex42"></a>
<P>
Application events occur when the user quits the application or
the focus is shifted to another document. However, unlike document
and ActiveX control events, the <B>Application</B> object doesn't
have events enabled by default. Before you can use events with
the <B>Application</B> object, you must create a new class module
and declare an object of type <B>Application</B> with events.
You use the <B>Class Module</B> command (<B>Insert</B> menu) in
the Visual Basic Editor to create a new class module.
<P>
To enable the events of the <B>Application</B> object, you'd add
the following declaration to the class module.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public WithEvents App As Application

</code></pre></FONT>
<P>
After the new object has been declared with events, it appears
in the <B>Object</B> box in the class module, and you can write
event procedures for the new object. (When you select the new
object in the <B>Object</B> box, the valid events for that object
are listed in the <B>Procedure</B> box.)
<P>
Before the procedures will run, however, you must connect the
declared object in the class module to the <B>Application</B>
object. You can do this from any module by using the following
declaration (where "EventClass" is the name of the class
module you created to enable events).

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Public X As New EventClass

</code></pre></FONT>
<P>
After you've created the <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">X</FONT>
object variable (an instance of the EventClass class), you can
set the App object of the EventClass class equal to the Word <B>Application</B>
object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Sub InitializeApp()
&#09;Set X.App = Application
End Sub

</code></pre></FONT>

<P>
After you run the InitializeApp procedure, the App object in the
EventClass class module points to the Word <B>Application</B>
object, and the event procedures in the class module will run
whenever the events occur.
<P>
After you've enabled events for the <B>Application</B> object,
you can create event procedures for the events described in the
following table.
<P>
<TABLE WIDTH=85% VALIGN="TOP" BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Event</FONT></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Description</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

DocumentChange</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Occurs when a new document is created, when an existing document is opened, or when another document is made the active document.</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Quit</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Occurs when the user quits Word.</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
<A NAME="CVeventsdoc008003">The following example ensures that
the <B>Standard</B> and <B>Formatting</B> toolbars are visible
before the user quits Word. As a result, when Word is started
again, these toolbars won't be visible.</A>

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Private Sub App_Quit()
&nbsp;&nbsp;&nbsp; CommandBars("Standard").Visible = True
&nbsp;&nbsp;&nbsp; CommandBars("Formatting").Visible = True
End Sub

</code></pre></FONT>
<P>
<A NAME="PG007C11"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H111">Using Auto Macros</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
<a name="dex43"></a>
<P>
By giving a macro a special name, you can run it automatically
when you perform an operation such as starting Word or opening
a document. Word recognizes the following names as automatic macros,
or "auto" macros.
<P>
<TABLE WIDTH=85% VALIGN="TOP"  BORDER=1 BORDERCOLOR="#C0C0C0" CELLPADDING=4 CELLSPACING=0>


<TR><TD WIDTH=41% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Macro name</FONT></B></FONT></TD><TD WIDTH=59% valign="Bottom" BGCOLOR="#C0C0C0"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><B>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

When it runs</FONT></B>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

AutoExec</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Each time you start Word or load a global template</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

AutoNew</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Each time you create a new document</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

AutoOpen</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Each time you open an existing document</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

AutoClose</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Each time you close a document</FONT>
</FONT></TD></TR>

<TR><TD WIDTH=41% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

AutoExit</FONT></FONT></TD><TD WIDTH=59% VALIGN="TOP"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->

Each time you quit Word or unload a global template</FONT>
</FONT></TD></TR><P>
</TABLE>
<P>
For more information about using auto macros, see "Auto Macros"
in Help.
<P>

<A NAME="PG007C12"></A>
</MENU></MENU></MENU>
<MENU>


<FONT SIZE=5 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H112">Using Automation</A></B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
<MENU><MENU>


<P>
In addition to working with Word data, you may want your application
to exchange data with other applications, such as Microsoft Excel,
Microsoft PowerPoint, or Microsoft Access. You can communicate
with other applications by using Automation (formerly OLE Automation).
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H235">Automating Word from Another Application</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex44"></a>
<P>
Automation allows you to return, edit, and export data by referencing
another application's objects, properties, and methods. Application
objects that you can reference in another application are called
<I>Automation objects</I>. The first step toward making
Word available to another application for Automation is to create
a reference to the Word type library. To create a reference to
the Word type library, click <B>References</B> on the <B>Tools</B>
menu in the Visual Basic Editor, and then select the check box
next to <B>Microsoft Word 8.0 Object Library</B>.
<P>
Next, declare an object variable that will refer to the Word <B>Application</B>
object, as in the following example.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWD As Word.Application.8

</code></pre></FONT>
<P>
Use the Visual Basic <B>CreateObject</B> or <B>GetObject</B> function
with the Word OLE Programmatic Identifier (Word.Application.8
or Word.Document.8), as shown in the following example. If you
want to see the Word session, set the <B>Visible</B> property
to <B>True</B>.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWD As Word.Application.8

Set appWD = CreateObject("Word.Application.8")
appWd.Visible = True

</code></pre></FONT>

<P>
The <B>CreateObject</B> function returns a Word <B>Application</B>
object and assigns it to <FONT SIZE=2 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica">appWD</FONT>.
Using the objects, properties, and methods of the Word <B>Application</B>
object, you can control Word through this variable. The following
example creates a new Word document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>appWd.Documents.Add

</code></pre></FONT>
<P>
The <B>CreateObject</B> function starts a Word session that Automation
won't close when the object variable that references the <B>Application</B>
object expires. Setting the object reference to the <B>Nothing</B>
keyword won't close Word either. Instead, use the <B>Quit</B>
method to close Word. The following Microsoft Excel example inserts
data from cells A1:B10 on Sheet1 into a new Word document and
then arranges the data in a table. The example uses the <B>Quit</B>
method to close the new instance of Word if the <B>CreateObject</B>
function was used. If the <B>GetObject</B> function returns error
429, the example uses the <B>CreateObject</B> function to start
a new session of Word.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWD As Word.Application
Err.Number = 0
On Error GoTo notloaded
Set appWD = GetObject(, "Word.Application.8")
notloaded:
If Err.Number = 429 Then
&nbsp;&nbsp;&nbsp; Set appWD = CreateObject("Word.Application.8")
&nbsp;&nbsp;&nbsp; theError = Err.Number
End If
appWD.Visible = True

With appWD
&nbsp;&nbsp;&nbsp; Set myDoc = .Documents.Add
&nbsp;&nbsp;&nbsp; With .Selection
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  For Each c In Worksheets("Sheet1").Range("A1:B10")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.InsertAfter Text:=c.Value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Count = Count + 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If Count Mod 2 = 0 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .InsertAfter Text:=vbCr
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .InsertAfter Text:=vbTab
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Next c
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Range.ConvertToTable Separator:=wdSeparateByTabs
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  .Tables(1).AutoFormat Format:=wdTableFormatClassic1
&nbsp;&nbsp;&nbsp; End With
&nbsp;&nbsp;&nbsp; myDoc.SaveAs FileName:="C:\Temp.doc"
End With
If theError = 429 Then appWD.Quit
Set appWD = Nothing

</code></pre></FONT>

<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H236">Automating Another Application from Word</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex45"></a>
<P>
To exchange data with another application by using Automation
from Word, you must first set a reference to the other application's
type library in the <B>References</B> dialog box (<B>Tools</B>
menu). After you've done this, the other application's objects,
properties, and methods will show up in the Object Browser and
the syntax will be automatically checked at compile time. You
can also get context&#173;sensitive Help on these objects, properties,
and methods. 
<P>
Next, declare object variables that will refer to the objects
in the other application as specific types. The following example
declares a variable that will point to the Microsoft Excel <B>Application</B>
object.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim xlObj As Excel.Application.8

</code></pre></FONT>
<P>
You obtain a reference to the Automation object by using the <B>CreateObject</B>
or <B>GetObject</B> function. Then, using the objects, properties,
and methods of the other application, you add, change, or delete
information. When you finish making your changes, close the application.
The following Word example determines whether Microsoft Excel
is currently running. If the specified Microsoft Excel task exists,
the example uses the <B>GetObject</B> function; otherwise, it
uses the <B>CreateObject</B> function. The example then sends
the selected text to cell A1 on Sheet1 in the active Microsoft
Excel workbook. Use the <B>Set</B> statement with the <B>Nothing</B>
keyword to clear the Automation object variable after the task
has been completed.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim xlObj As Excel.Application.8
If Tasks.Exists("Microsoft Excel") = True Then
&nbsp;&nbsp;&nbsp; Set xlObj = GetObject(, "Excel.Application.8")
Else
&nbsp;&nbsp;&nbsp; Set xlObj = CreateObject("Excel.Application.8")
End If
xlObj.Visible = True
If xlobj.Workbooks.Count = 0 Then xlobj.Workbooks.Add
xlObj.Worksheets("Sheet1").Range("A1").Value = Selection.Text
Set xlObj = Nothing

</code></pre></FONT>

<P>
The following Word example determines whether PowerPoint is currently
running. If the PowerPoint task exists, the example uses the <B>GetObject</B>
function; otherwise, it uses the <B>CreateObject</B> function.
The example then creates a new presentation, with the first text
box including the name of the active Word document and the second
text box including the text from the first paragraph in the active
document. Use the <B>Set</B> statement with the <B>Nothing</B>
keyword to clear the automation object variable after the task
has been completed.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim pptObj As PowerPoint.Application.8
If Tasks.Exists("Microsoft PowerPoint") = True Then
&nbsp;&nbsp;&nbsp; Set pptObj = GetObject(, "PowerPoint.Application.8")
Else
&nbsp;&nbsp;&nbsp; Set pptObj = CreateObject("PowerPoint.Application.8")
End If
pptObj.Visible = True
Set pptPres = pptObj.presentations.Add
Set aSlide = pptPres.Slides.Add(Index:=1, Layout:=ppLayoutText)
aSlide.Shapes(1).TextFrame.TextRange.Text = ActiveDocument.Name
aSlide.Shapes(2).TextFrame.TextRange.Text = ActiveDocument.Paragraphs(1).Range.Text
Set pptObj = Nothing

</code></pre></FONT>

<P>
For information about automating Microsoft Access, see Chapter&nbsp;3,
"<a href="003.htm">Microsoft Access Objects</A>." For information about using
Data Access Objects (DAO) from Word, see Chapter&nbsp;11, "<a href="011.htm">Data
Access Objects</A>," and see "Using DAO from Microsoft Word"
in Help. 
<P>
<FONT SIZE=4 FACE="Verdana, Arial, Helvetica"><B><A NAME="CH007H237">Communicating with Embedded Word Objects</A>
</B></FONT><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>


<P>
<a name="dex46"></a>
<P>
You can use the <B>Application</B> property of any Word object
to return the Word <B>Application</B> object. This is useful for
returning the Word <B>Application</B> object from a Word document
embedded in another application. The following example, run from
Microsoft Excel, sets an object variable to the Word <B>Application</B>
object. (For this example to work, shape one on the active worksheet
must be an embedded Word document.) The final instruction in the
example adds text at the beginning of the embedded Word document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWRD As Word.Application
Set embeddedDoc = ActiveSheet.Shapes(1)
Set appWRD = embeddedDoc.OLEFormat.Object.Object.Application
appWRD.ActiveDocument.Range(Start:=0, End:=0).InsertBefore Text:="New text "

</code></pre></FONT>

<P>
The following example, run from PowerPoint, sets an object variable
to the Word <B>Application</B> object. (For this example to work,
shape one on slide one in the presentation must be an embedded
Word document.) The final instruction in the example displays
the text in the embedded Word document.

<FONT SIZE=3 FACE="COURIER NEW,COURIER" FACE="Verdana, Arial, Helvetica"><pre><code>Dim appWRD As Word.Application
Set embeddedDoc = Presentations(1).Slides(1).Shapes(1)
embeddedDoc.OLEFormat.Activate
Set appWRD = embeddedDoc.OLEFormat.Object.Application
MsgBox appWRD.ActiveDocument.Content.Text

</code></pre></FONT>
<BR>

</MENU></MENU></MENU>
<HR>
<!--TOTOP_START-->
<TABLE width=98% cellpadding=0 cellspacing=0 border=0>


</TABLE>



<!--ToTop_End-->


<!--EndNav_Start-->

<P>

</FONT>
</FONT></BODY>


</HTML>

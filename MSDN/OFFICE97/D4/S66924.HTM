<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>office art object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">
<H2>office art object </H2><P>An office art object is represented in the document stream as a special character, an ASCII 8, which has chp.fSpec set to 1 for the run of text containing the character .<B> </B>Only main documents and header documents contain office art objects.<B> </B>The native data for the office art object may be obtained by taking the CP for the special character and using this to find the corresponding entry in the <B>plcspa</B>.<B> </B>An entry in this plc consists of a <B>FSPA</B> structure, which is described elsewhere in this document.</P>
<P></P>
<P>Office art objects can have text attached to them.  Text for the textboxes is stored separately in the textbox subdocument of the main or header document.<B> </B>The textbox subdocument contains a <B>plctxbxs</B> where the text from CP n to CP n+1 in the subdocument is the text which is contained in a textbox as specified in the <B>TXBXS</B> structure for this n<SUP>th</SUP> entry in the <B>plctxbxs</B>.  Textboxes can be linked in chains of up to 32 textboxes.  Ordering of textboxes in the subdocument is completely unrelated to the document structure due to the nature of textbox linking.   To find the text for a given office art object, the <B>TXID</B> property (a long: high word is itxbxs+1, low word is the sequence number) must be fetched from the office art data for the shape.  This contains an index (itxbxs) into <B>plctxbxs</B> and a sequence number in the chain of linked textboxes.  The text for the entire chain of linked textboxes is stored from the CP itxbxs to CP itxbxs+1 of plctxbxs.  The <B>plctxbxBkd</B> describes the "page table" within textbox stories (where the textboxes in each linked textbox chain are thought of as "pages").  So, for each entry in the plctxbxs there is a corresponding entry in the <B>plctxbxBkd</B> at the same CP, and there may be additional entries in the <B>plctxbxBkd</B> to describe the breaks from one textbox to the next in linked textbox chains.</P>
<P></P>
<B>Note: In this document, bit 0 is the low-order bit. Structures are described as they would be declared in C for the Intel architecture. When numbering bytes in a word from low offset towards high offset, two-byte integers will have their least significant eight bits stored in byte 0 and most significant eight bits in byte 1. If bit 31 is the most significant bit in a four-byte integer, bits 31 through 24 will be stored in byte 3 of a four-byte integer, bits 23 through 16 will be stored in byte 2, bits 15 through 8 will be stored in byte 1, and bits 7 through 0 will be stored in byte 0.</B></P></BODY></HTML>

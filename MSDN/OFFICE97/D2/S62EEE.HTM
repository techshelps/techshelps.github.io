<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Definitions</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Definitions</H2><B>OLE 2.0:</B></P>
Object Linking and Embedding 2.0</P>
<B>API (Application Programming Interface):</B></P>
A set of libraries, functions, definitions, etc. which describe an interface to a programming environment or model.</P>
<B>docfile:</B></P>
An OLE 2.0 compatible multi-stream file. Word files are docfiles.</P>
<B>page (or sector):</B></P>
512 byte segment of the main stream within a Word docfile that begins on a 512-byte boundary. (bytes 0-511 are in page 0, bytes 512-1023 are in page 1, etc.). In Word data structures, an unsigned two-byte integer page number is given the acronym <B>PN </B>(for <B>P</B>age <B>N</B>umber).</P>
<B>document:</B></P>
A named, multi-linked list of data structures, representing an ordered stream of text with properties that was produced by a user of Microsoft Word</P>
<B>stream:</B></P>
The physical encoding of a Word document 's text and sub data structures in a random access stream within a docfile.</P>
<B>main stream:</B></P>
The stream within a Word docfile containing the bulk of Word's binary data.</P>
<B>table stream:</B></P>
The stream within a Word docfile containing the various plcf's and tables that describe a documents structures.</P>
<B>data stream:</B></P>
The stream within a Word docfile containing various data that hang off of characters in the main stream.  For example, binary data describing in-line pictures and/or formfields.</P>
<B>summary information stream:</B></P>
The stream within a Word docfile containing the document summary information.</P>
<B>object storage:</B></P>
A storage containing binary data for an embedded OLE 2.0 object.</P>
<B>CP (Character Position):</B></P>
A four-byte integer which is the position coordinate of a character of text within the logical text stream of a document.</P>
<B>FC( File Character position):</B></P>
A four-byte integer which is the byte offset of a character (or other object) from the beginning of a stream of the docfile. Before a file has been edited(i.e. in a full saved Word document), CPs<B> </B>can be transformed into <B>FC</B>s by adding the <B>FC</B> coordinate of the beginning of a document's text stream to the CP. After a file has been edited (i.e. in a fast-saved Word document), the mapping from <B>CP</B> to <B>FC</B> is recorded in the <B>piece table </B>(see below)</P>
<B>XCHAR( eXtended CHARacter set):</B></P>
A data type which defines a "character".  Each XCHAR corresponds to a character in the document, where "character" is defined as a glyph, regardless of whether it is a single-byte or double-byte character.  With Word6/FE, Word95/FE, Word97/all and future versions of Word, this is defined as a 16-bit integer corresponding to the Unicode character code of the glyph.</P>
<B>PLF(PLex stored in File):</B></P>
A data structure consisting of an array of structures preceded by a long count of structures.</P>
<B>PLCF(PLex of Cps(or FCs) stored in File):</B></P>
A data structure consisting of two parallel arrays that allows a relation to be established between a certain <B>CP</B> position in the document text stream (or <B>FC</B> position in a file) and an arbitrary data structure. It consists of an array of <B>n+1 CP</B>s or <B>FC</B>s followed by an array of <B>n</B> instances of a particular arbitrary data structure. In typical usage, the <B>nth CP </B>or<B> FC</B> of the <B>PLCF</B> is in one-to-one correspondence with the <B>nth </B>instance<B> </B>of the arbitrary data structure, with the <B>n+1st</B> <B>CP </B>or<B> FC</B> marking the limit of the <B>nth</B> instance's influence. When a <B>PLCF</B> is used to record a partitioning of the document's text stream or a partitioning of the bytes stored in a file, the 0th <B>CP/FC </B>stored in the <B>PLCF</B> will be 0. When a <B>PLCF </B>is used to record the location of certain marks or links within the document text stream, the 0th <B>CP/FC</B> stored in the <B>PLCF </B>will record the position of the 0th mark or link. To properly interpret a <B>PLCF</B> stored in a Word file, the length of the stored <B>PLCF</B> and the length of the arbitrary data structure stored in the <B>PLCF </B>must be known<B>. </B>The length of the stored <B>PLCF</B> is recorded in the <B>FIB. </B>The lengths of the data structures stored in <B>PLCF</B>s within Word files are listed later in this document.</P>
<B>piece table:</B></P>
The <B>piece table </B>is a data structure that describes the logical sequence of characters in a Word document and records recent changes to the formatting of a Word document. It is stored in a Word file as a <B>PLCF</B> named the <B>plcfpcd</B> (<B>PL</B>ex of <B>C</B>ps containing <B>P</B>ie<B>c</B>e <B>D</B>escriptors).The piece table relates a logical character number, called a <B>CP </B>(<B>C</B>haracter <B>P</B>osition), to a physical location within a Word file (an <B>FC</B>). The array of <B>CP</B>s in the <B>plcfpcd</B> defines a partitioning of the Word document into disjoint pieces. The second array is an array of <B>PCD</B>s (<B>P</B>ie<B>c</B>e <B>D</B>escriptors) which is in 1-to-1 correspondence to the array of <B>CP</B>s that records the physical location in the Word file where the corresponding piece begins. To find the physical location of a particular logical character in a<B> </B>Word document, take the <B>CP</B> coordinate of that character within the document and find the piece that contains that character. This is done by finding the index of the largest<B> CP </B>in the array of <B>CP</B>s that is less than the character <B>CP</B>. Then<B> </B>reference the <B>PCD</B> with that index in the array of <B>PCD</B>s. The <B>FC</B> stored in the <B>PCD </B>gives the position of the beginning of the piece in the file. Finally, add the offset of the desired character from the beginning of its piece to the <B>FC</B> of the beginning of the piece. This gives a "virtual" file offset of the character.  If the second most significant bit is clear, then this indicates the actual file offset of the unicode character (two bytes).  If the second most significant bit is set, then the actual address of the codepage-1252 compressed version of the unicode character (one byte), is actually at the offset indicated by clearing this bit and dividing by two.</P>
<B>sprm (Single PRoperty Modifier):</B></P>
An instruction to modify one or more properties within one of the property defining data structures (<B>CHP</B>, <B>PAP</B>, <B>TAP</B>, <B>SEP, or PIC</B>). It consists of an operation code which identifies the field(s) to be changed, and an<B> </B>operand which gives the value that a particular field is changed to or else which is a parameter to a procedure which will change the field or fields.  A <B>prl</B> (<B>pr</B>operty modifiers stored in a <B>l</B>ist) is a <B>sprm</B> plus its operand.</P>
<B>grpprl (group of prls):</B></P>
A grpprl is a data structure that records a set of<B> sprm</B>s. The 0th <B>sprm</B> is recorded at offset 0 of the structure. Any succeeding <B>sprm</B>s are recorded immediately after the end of the preceding <B>sprm</B> . To traverse a <B>grpprl</B> and locate the <B>sprms</B> recorded within it, it's necessary to fetch the opcode of the first <B>sprm</B>, lookup the length of the <B>sprm</B> with that opcode, use that length to skip past the first <B>sprm</B>, fetch the opcode of the second <B>sprm</B>, lookup the length of that <B>sprm</B>, use the length to skip the second <B>sprm</B>, and so on. See the table in the "<B>SPRM Definition</B>" topic to determine the length of a <B>sprm</B>.</P>
The phrase "<B>apply the sprms of a grpprl</B> (or <B>papx</B> or <B>sepx)</B>" used later in this document means to fetch the 0th <B>sprm </B>recorded in the <B>grpprl</B> and perform the action for that sprm, fetch the first <B>sprm</B> and perform its action, and continue this procedure until all <B>sprms</B> in the <B>grpprl</B> (or <B>papx</B> or <B>sepx) </B>have been processed.</P>
<B>prm (PRoperty Modifier):</B></P>
A field in piece table entries that records how the properties of text within a piece were changed to reflect user formatting operations. The <B>prm</B> usually contains an index to a <B>grpprl</B> which records the user's formatting changes as a group of <B>sprm</B>s. If the user has made only a small change to formatting that can be expressed as a single 2 or 1-byte <B>sprm</B>, that <B>sprm </B>is stored within the <B>prm</B>.</P>
<B>STTBF (STring TaBle stored in File)</B></P>
Word has many tables of strings that are stored as Pascal type strings. STTBFs consist of  an optional short containing 0xFFFF, indicating that the strings are extended character strings, a short indicating how many strings are included in the string table, another short indicating the size in bytes of the extra data stored with each string and each string followed by the extra data. Non-extended charater Pascal strings begin with a single byte length count which describes how many characters follow the length byte in the string. If pst is a pointer to an array of characters storing a Pascal style string then the length of the string is *pst+1. In an STTBF Pascal style strings are concatenated one after another until the length of the STTBF recorded in the FIB is exhausted.<B> </B>Extra data associated with a string may also be stored in an sttbf.<B> </B>When extra data is stored for an STTBF, it is written at the end of each string. For example:<B> </B>The extra data for an STTBF consists of a short.<B> </B>If the string "Cat" were stored, the actual entry in the string table would consist of a length byte containing 3 (3 for "Cat") followed by the bytes 'C' 'a' 't', followed by the 2 bytes containing the short. Extended character strings are stored just the same, except they have a double byte length count and each extended character occupies two bytes.</P>
<B>full-saved (or non-complex) file:</B></P>
A Word file in which the physical order of characters stored in the file is identical to the logical order of characters in the document that the file represents. The text stream of a non-complex file can be described by an <B>fc</B> (an offset from the beginning of the file) to mark where the text begins and a <B>ccp </B>(<B>c</B>ount of <B>CP</B>s) to record how many characters are stored in the text stream. Due to unicode compression to code page 1252, all files (simple and complex) now contain a piece table.  However, a full-saved piece table will not have property modifiers (prms) and all text in the file will be referenced by the piece table.</P>
<B>fast-saved (or complex) file:</B></P>
A Word file in which the physical order of characters stored in the file does not match the logical order of characters in the document that the file represents. A <B>piece table</B> must be stored in the file to describe the text stream of the document.  Due to unicode compression to code page 1252, all files (simple and complex) now contain a piece table.</P>
<B>FIB (File Information Block):</B></P>
The header of a Word file. Begins at offset 0 in file. Gives the beginning offset<B> </B>and lengths of the document's text stream and subsidiary data structures within the file. Also stores other file status information.</P>
<B>paragraph</B></P>
A contiguous sequence of characters within the text stream of a document that is delimited by a paragraph mark, cell mark, row mark, or a section mark (These are special characters described later in this document).</P>
<B>run of text</B></P>
A contiguous sequence of characters within the text stream of a document that have the same character formatting properties. A single run may cross paragraph boundaries and may encompass the entire document.</P>
<B>section</B></P>
A contiguous sequence of paragraphs within the text stream of a document that is delimited by a section mark or by the final paragraph mark at the end of a document. Users frequently treat sections as the equivalent of a chapter in a book. The boundaries of sections mark locations where the layout rules for a document (number of columns, text of headers and footers to use, whether page numbers should be displayed, etc.) are changed.</P>
<B>paragraph style</B></P>
A named set of character and paragraph properties that can be associated with any number of <B>paragraphs</B> in a Word document's text stream. A <B>paragraph</B> <B>style</B> provides a set of character and paragraph property defaults for the text of any paragraph tagged with that style. When a new paragraph is created and given a particular style, newly typed text is given the character and paragraph properties of that style unless the user makes an exception to the paragraph style definition by performing other editing operations.</P>
<B>CHP (CHaracter Properties)</B></P>
The data structure describing the character properties of a run of text.</P>
<B>CHPX (Character Property EXception)</B></P>
A data structure which describes how a particular <B>CHP</B> differs from a reference <B>CHP</B>. In Win Word 6.0, the <B>CHPX</B> simply consists of a <B>grpprl</B> which is applied to the reference <B>CHP</B> to produce the originally encoded <B>CHP</B>. By applying a <B>CHPX </B>to the character properties (<B>CHP)</B> inherited by a particular paragraph from its <B>style</B>,<B> </B>it is possible to reconstitute the <B>CHP </B>for the portion of the character run that intersects that paragraph</P>
<B>character style</B></P>
A named character property exception that can be associated with any number of runs of text in a Word document's text stream. When a run of text is tagged with a particular <B>character style</B>, a <B>chpx</B> recorded for the character style is applied to the character properties that are defined for the paragraph style of the paragraph that contains the text. This means that the character style can change one or more of the character property field settings specified by the paragraph style of a paragraph to a particular setting without changing the value of any other field.</P>
<B>PAP (PAragraph Properties)</B></P>
The data structure which describes the properties of a particular paragraph.</P>
<B>PAPX (PAragraph Property EXception)</B></P>
A data structure describing how a particular paragraph's properties differ from the paragraph properties of the style assigned to the paragraph. By applying a <B>PAPX</B> to the paragraph properties (<B>PAP</B>) inherited by a particular paragraph from its <B>style</B>, it is possible to reconstitute the <B>PAP</B> for that paragraph. The <B>PAPX</B> contains an <B>ISTD </B>(a style code to identify the style in control of the paragraph and a <B>grpprl</B> which specifies how the style's paragraph properties must be changed to produce the paragraph properties of the paragraph.</P>
<B>table row:</B></P>
A contiguous sequence of paragraphs within the text stream of a document that is partitioned into subsequences of paragraphs called <B>cells.</B> The last paragraph of each cell is terminated by a special paragraph mark called a <B>cell mark.</B> Following the cell mark that ends the last cell of a table row, the table row is terminated by a special paragraph mark called a <B>row mark</B>. When Word displays a table row, it assigns a rectangular shaped display area to each cell in the row. All of the cell display area's top's are aligned at the same vertical position on a page. The leftmost display area in a table row is assigned to the 0th cell of the row; the next display area to the right is assigned to the 1st cell of the row, etc. The text of the cell is wrapped to fit its display area.<B> </B>As more text is added to the cell, the cell display area extends downward. A set of table properties that determine how many cells are in a row, where the horizontal boundaries of cell display areas are, and what borders are drawn around each cell in the table is stored for the <B>row mark </B>that marks the end of the table row.</P>
<B>TAP (TAble Properties):</B></P>
The data structure which describes the properties of a single table row. The information in the <B>TAP</B> for a table row is stored in a Word file as a list of sprms that modify a <B>TAP </B>which has been cleared to zeros. This list of table sprms is appended to the <B>grpprl</B> of paragraph sprms that is recorded in the <B>PAPX</B> for the <B>row mark</B> that delimits the end of a <B>table row</B>.</P>
<B>STSH (STyle SHeet)</B></P>
A data structure which represents every style defined within the Word document. The <B>STSH</B> records a unique name string for every style and associates each name with a particular <B>CHP</B> and/or a <B>PAP. </B>The indexes used to refer to individual styles are called <B>ISTD</B>s (<B>I</B>ndexes<B> </B>to<B> ST</B>yle<B> D</B>escriptors). Every <B>PAPX </B>for every paragraph recorded in a document<B> </B>contains an <B>ISTD </B>which identifies the style from which a paragraph inherited its default character and paragraph properties. <B>CHPX</B>s recorded for the text within the paragraph and <B>PAPX</B>s recorded for the paragraph itself encode changes that the user has made with respect to the style's default properties.</P>
<B>FKP (Formatted disK Page):</B></P>
A data structure that fits in one 512-byte page that encodes either the character properties or the paragraph properties of a certain portion of a Microsoft Word file. An <B>FKP </B>consists of four components:</P>
1) a count of the number of runs or paragraphs described by the page.</P>
2) an array of <B>FC</B>s recorded in ascending order demarcating the boundaries between runs or paragraphs that are recorded adjacent to one another in the Word file.</P>
3) In <B>character FKP</B>s an array of offsets within the <B>FKP </B>in one to one correspondence with the array of <B>FC</B>s that locate the properties of the run that begins at a particular <B>FC.</B></P>
In <B>LVC FKP</B>s an array of offsets within the FKP in one to one correspondence with the array of FCs that locate the LVCXs that describe the run that begins at a particular FC.</P>
In <B>paragraph FKP</B>s an array of <B>BX </B>structures follows the array of <B>FC</B>s in one to one correspondence with the array of <B>FC</B>s. Each <B>BX</B> begins with an offset that locates the properties of the paragraph that begins at a particular FC. The remainder of the <B>BX</B> contains a <B>PHE </B>structure that encodes information about the height of the paragraph that begins at that <B>FC</B>.</P>
4) a group of <B>CHPX</B>s if the <B>FKP</B> stores character properties, a group of <B>PAPX</B>s if the <B>FKP</B> stores paragraph<B> </B>and table properties, or a group of LVCXs if the FKP stores paragraph level and numbering cache information</P>
To find the <B>CHPX</B>/<B>PAPX</B> corresponding to a particular character in a document, calculate the <B>FC</B> coordinate for that character. Then search through the <B>bin table</B> (see next entry)<B> </B>for the type of property you want to produce, to find the <B>FKP</B> in the document stream whose array of <B>FC</B>s encompasses the <B>FC</B> of the document<B> </B>character.</P>
Then search within the <B>FKP</B> to find the index of the largest <B>FC </B>entry that is less than or equal to the <B>FC</B> of the document character. Use this index to look up an offset in the array of offsets (for <B>character FKPs</B>) or look up an offset in the array of <B>Bx</B>s (for <B>paragraph FKPs</B>) within the <B>FKP</B>. Add this offset to the beginning address of the <B>FKP </B>in memory. This will be the first byte of the desired <B>CHPX</B>/<B>PAPX.</B></P>
<B>bin table</B></P>
Each <B>FKP</B> can be viewed as bucket or <B>bin</B> that contains the properties of a certain range of <B>FC</B>s in the Word file. In Word files, a <B>PLC</B>,<B> </B>the <B>plcfbte </B>(<B>PL</B>ex of F<B>C</B>s containing <B>B</B>in <B>T</B>able <B>E</B>ntries) is maintained. It<B> </B>records the association between a particular range of <B>FC</B>s and the <B>PN </B>(<B>P</B>age <B>N</B>umber) of the <B>FKP </B>that contains the properties for that <B>FC</B> range in the file. In a <B>complex (fast-saved)</B> Word document,<B> FKP </B>pages are intermingled with pages of text<B> </B>in a random pattern which reflects the history of past fast saves. In a complex document, a <B>plcfbteChpx</B> which records the location of every <B>CHPX FKP</B> must be stored and a <B>plcfbtePapx</B> which records the location of every <B>PAPX FKP </B>must be stored<B>. </B>In a <B>non-complex, full-saved</B> document, all of the <B>CHPX FKPS </B>are recorded in consecutive 512-byte pages with the <B>FKP</B>s recorded in ascending <B>FC </B>order, as are all of the <B>PAPX FKPS</B>.  A plcfbteLvcx serves the same purpose for LVCX FKPS.</P>
In a full save document, the plcfbte's may not have been able to be expanded during the save process due to a lack of RAM.  In that situation, the plcfbte's will be interspersed with the property pages in a linked list of FBD pages.</P>
<B>SEP(SEction Properties)</B></P>
The data structure describing the properties of a particular section.</P>
<B>SEPX(SEction Property EXceptions)</B></P>
A data structure describing how the properties of a particular section differ from a Word-defined standard <B>SEP</B>. As in the <B>PAPX</B>, the differences between the <B>SEP</B> for a section and the standard <B>SEP</B> are encoded as list of sprms that describe how the standard <B>SEP</B> can be transformed into the section's <B>SEP</B>.<B> </B>By applying a <B>SEPX</B>'s sprms to the standard <B>SEP</B>, it is possible to reconstitute the <B>SEP</B> for that section.</P>
The PLCFSED, a data structure stored in a Word file, records the locations of all SEPXs stored in a Word file. The array of CPs in the plcfsed records the boundaries of sections in the Word document . The second array in the plcf, an array of SEDs (SEction Descriptors), is in 1-to-1 correspondence to the array of CPs. Each SED stores the beginning FC of the SEPX that records the properties for a section. If the FC stored in a SED is -1, the section properties of the section are exactly equal to the standard section properties.</P>
The SEP for a particular section may be constructed if a CP of a character in that section is known. First search the array of CPs in the PLCSED for the index of the largest CP that is less than or equal to the CP of the character. Use this index to locate the SED in the plcfsed which describes the section. The FC stored in the SED is the offset from the beginning of the Word file at which the SEPX is stored. If the stored FC is equal to 0xFFFFFFFF, then the SEP for the section is exactly equal to the standard SEP (see SEP structure definition) Otherwise, read the SEPX into memory and create a copy of the standard SEP. Finally, apply the sprms stored in the SEPX to the standard SEP to produce the SEP for a section.</P>
<B>DOP (DOcument Properties)</B></P>
The data structure describing properties that apply to the document as a whole.</P>
<B>sub-document</B></P>
A separate logical stream of text with properties for which correspondences with the main document text are maintained. Word's headers/footers, footnotes, endnotes,<B> </B>macro procedure text, annotation text, and text within textboxes are kept in separate subdocuments. Each subdocument has its own CP coordinate space. In other words, data structures are stored in Word files that are components of these subdocuments. These data structures contain CP coordinates whose 0 point is the beginning of the subdocument text stream instead of the beginning of the main document text stream.</P>
In<B> full-saved documents</B>, a simple calculation with values stored in the <B>FIB </B>produces<B> </B>the file offset of the beginning of the subdocument text streams (if they exist). The length of these streams is also stored.</P>
In <B>fast-saved documents</B>, the <B>piece tables</B> of subdocuments are concatenated to the end of the main document piece table. In this case, to identify the beginning of subdocument text , you must sum the length of the main document text stream with the lengths of any subdocument text streams stored ahead of the subdocument (information stored in the <B>FIB</B>) and treat this sum as a <B>CP</B> coordinate. To retrieve the text of the subdocument, you must do lookups in the piece table, starting with the piece that contains the beginning <B>CP</B> coordinate, to find the physical location of each piece of the subdocument text stream.</P>
<B>field</B></P>
A field is a two-part structure that may be recorded in the CP stream of a document. The first part of the structure contains <B>field codes</B> which instruct Window's Word to insert text into the second part of the structure, the <B>field result</B>. Fields in Window's Word are used to insert text from an external file or to quote another part of a document, to mark index and table of contents entries and produce indexes and tables of contents, maintain DDE links to other programs, to produce dates, times, page numbers, sequence numbers, etc. There are 91 different field types.</P>
A <B>field begin mark</B> delimits the beginning of a field and precedes any of the field codes stored in the field. The end of the field codes and the beginning of the field result is marked with the <B>field separator</B> and the field result and the field itself are terminated by a <B>field end mark.</B></P>
The CP locations of the field begin mark, field separator, and field end mark are recorded in <B>plcfld</B> data structures that are maintained for the main document and all of the subdocuments of the main document whenever a field is inserted or edited. A field can be <B>dead</B>, in which case it has no field separator, no field result, and no entry in the <B>plcfld</B>.  (See the definition of the FLD structure for a list of possible dead field code strings.)  An array of two-byte <B>FLD</B> structures is stored in the <B>plcfld</B> in one-to-one correspondence with the CP entries recorded. An <B>FLD</B> associated with a <B>field begin mark</B> records the type of the field. An <B>FLD</B> associated with the <B>field end mark</B> records the current status of the field (i.e. whether the result is dirty or has been edited, whether the result has been locked, etc.)</P>
Fields may be nested. 20 levels of nesting are permitted.</P>
<B>bookmark</B></P>
A <B>bookmark</B> associates a user definable name with a range of text within a document. A bookmark is frequently used as an operand in <B>field code</B> instructions within a field. In Window's Word a bookmark is represented by three parallel data structures, the <B>sttbBkmk</B>, the <B>plcbkf</B> and the <B>plcbkl</B>. The <B>sttbBkmk </B>is a string table which contains the name of each bookmark that is defined. The <B>plcbkf</B> records the beginning CP position of each bookmark. The <B>plcbkl </B>records the limit CP position that delimits the end of a bookmark. Since bookmarks may be nested within one another to any level, the <B>BKF</B> structure stored in the <B>plcbkf</B> consists of a single index which specifies which <B>plcbkl </B>marks the end of the bookmark. The <B>BKL</B> structure is not written to the file, and the plcbkl contains only CPs.</P>
<B>picture</B></P>
A picture is represented in the document text stream as a special character, an ASCII 1 whose CHP has the fSpec bit set to 1. The file location of the picture in the Word binary file is stored in the character's CHP in chp.fcPic. The fcPic is a byte offset into the data stream. Beginning at the position recorded in chp.fcPic, a header data structure, the PIC, will be stored. If the picture is a reference to a TIFF file, a Picture file or an Office shape file, the name of the file will be recorded immediately following the PIC in a Pascal style string.  If the picture is an Office shape, a Window's metafile or a bitmap, the shape, metafile or bitmap will immediately follow the PIC. Pictures that are a reference to an Office shape file will include both the filename and the shape in that order.    Pictures inserted with Word97 are in the new Office shape format (documented elsewhere).  However, pictures can be copied from older files into newer ones and their old format will persist until the picture is edited or displayed<B>.</B></P>
Some files (including all files created by Word for the Macintosh) may store Macintosh PICT pictures as well. In this case, the PIC structure is immediately followed by a standard Windows metafile depicting a large "x", so that older readers expecting only a metafile after the PIC will just display this "x". If a reader detects this standard "x" metafile, it can extract the sizes of the standard "x" metafile and the Macintosh PICT picture that follows it from an early portion of this "x" metafile. Please see Appendix B for a discussion of this technique.</P>
<B>embedded object</B></P>
The native data for Embedded objects (OBJs) is stored similarly to pictures (PICs).<B> </B>To locate the native data for Embedded objects, scan the plc of field codes for the mother, header, footnote and annotation, textbox and header textbox documents (fib.PlcffldMom/Hdr/Ftn/Atn/Txbx/HdrTxbx).<B> </B>For each separator field, get the chp.</P>
If chp.fSpec=1 and chp.fObj=1, then this separator field has an associated embedded object. The file location of the object data is stored in chp.fcObj. At the specified location an object header is stored followed by the native data for the object.  See the _OBJHEADER structure.</P>
If chp.fOle2=1, then this separator field has an associated OLE2 object.  The fcPic will be a unique integer that specifies the name of the object's sub-storage instead of an offset into the data stream.</P>
<B>office art object </B></P>
An office art object is represented in the document stream as a special character, an ASCII 8, which has chp.fSpec set to 1 for the run of text containing the character .<B> </B>Only main documents and header documents contain office art objects.<B> </B>The native data for the office art object may be obtained by taking the CP for the special character and using this to find the corresponding entry in the <B>plcspa</B>.<B> </B>An entry in this plc consists of a <B>FSPA</B> structure, which is described elsewhere in this document.</P>
Office art objects can have text attached to them.  Text for the textboxes is stored separately in the textbox subdocument of the main or header document.<B> </B>The textbox subdocument contains a <B>plctxbxs</B> where the text from CP n to CP n+1 in the subdocument is the text which is contained in a textbox as specified in the <B>TXBXS</B> structure for this n<SUP>th</SUP> entry in the <B>plctxbxs</B>.  Textboxes can be linked in chains of up to 32 textboxes.  Ordering of textboxes in the subdocument is completely unrelated to the document structure due to the nature of textbox linking.   To find the text for a given office art object, the <B>TXID</B> property (a long: high word is itxbxs+1, low word is the sequence number) must be fetched from the office art data for the shape.  This contains an index (itxbxs) into <B>plctxbxs</B> and a sequence number in the chain of linked textboxes.  The text for the entire chain of linked textboxes is stored from the CP itxbxs to CP itxbxs+1 of plctxbxs.  The <B>plctxbxBkd</B> describes the "page table" within textbox stories (where the textboxes in each linked textbox chain are thought of as "pages").  So, for each entry in the plctxbxs there is a corresponding entry in the <B>plctxbxBkd</B> at the same CP, and there may be additional entries in the <B>plctxbxBkd</B> to describe the breaks from one textbox to the next in linked textbox chains.</P>
<P></P>
Note</P>
In this document, bit 0 is the low-order bit. Structures are described as they would be declared in C for the Intel architecture. When numbering bytes in a word from low offset towards high offset, two-byte integers will have their least significant eight bits stored in byte 0 and most significant eight bits in byte 1. If bit 31 is the most significant bit in a four-byte integer, bits 31 through 24 will be stored in byte 3 of a four-byte integer, bits 23 through 16 will be stored in byte 2, bits 15 through 8 will be stored in byte 1, and bits 7 through 0 will be stored in byte 0.</P>
<P></P></FONT></BODY>
</HTML>

<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Character and Paragraph Formatting Properties</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H2>Character and Paragraph Formatting Properties</H2>Character and paragraph properties in Word documents are stored in a compressed format. The information that is stored on disk is not the actual properties of a particular sequence of text but the difference of the properties of a sequence from some reference property.</P>
The <B>PAP </B>is a data structure that holds uncompressed paragraph property information; the <B>CHP </B>(pronounced like "chip") is a structure that holds uncompressed character property information. Each paragraph in a Word document inherits a default set of paragraph and character properties from one of the <B>paragraph</B> <B>styles</B> recorded in the style sheet data structure (<B>STSH</B>).</P>
A particular <B>PAP </B>is converted into its compressed form, the <B>PAPX</B>, by first comparing the pap for a paragraph with the pap stored in the style sheet for the paragraph's style. Any properties in the paragraph's <B>PAP </B>that are different from those stored in the style sheet <B>PAP </B>are encoded as a list of <B>sprms</B> (<B>grpprl</B>). <B>sprms</B> express how the content of the style sheet <B>PAP</B> should be transformed to create the properties for the paragraph. A <B>PAPX</B> is a variable-length data structure that begins with a count of words that encodes the PAPX length. It contains a <B>istd </B>(index to style descriptor) which specifies which style entry in the style sheet contains the default paragraph and character properties for the paragraph, paragraph height information, and the list of difference sprms. If the only difference between the paragraph's <B>PAP </B>and the style's <B>PAP</B> were in the justification code field, which is one byte long, one two-byte sprm, sprmPJc, would be generated to express that difference; thus the total <B>PAPX</B> size would be 5 bytes. This is better than 54-1 compression since the total size of a <B>PAP </B>is 274 bytes.</P>
To convert a <B>CHP</B> for a sequence of characters contained within a single paragraph into its compressed form, the <B>CHPX</B>, it's first necessary to know the <B>paragraph style</B> that is assigned to the paragraph containing those characters and any character style that may be tagging the character run. The character properties inherited from the paragraph style are moved into a buffer. If the chp.istd of the chp to be compressed is not istdNormalChar, the changes recorded for that character style are applied to buffer. Then the character properties of the character sequence are compared with the character properties generated using the paragraph's style and the run's character style. Any properties in the paragraph's <B>CHP </B>that are different from those stored in the generated CHP are encoded as a list of <B>sprms</B> (<B>grpprl</B>). The <B>sprms</B> express how the content of the CHP generated from the paragraph and character styles should be transformed to create the character properties for the text run. A <B>CHPX</B> is a variable-length data structure that begins with a count of words that encodes the CHPX length followed by the list of difference sprms.</P>
If one of the bit fields in the CHP to be compressed such as fBold is different from the reference CHP, you would build a difference sprm using sprmCFBold in the first byte and the bytes pattern 0x81 in the second byte which signifies that the value of the bit in the CHP to be compressed is of opposite value from the value stored in the reference CHP. If there was no difference, sprmCFBold would not be recorded in the grrprl to be generated. If there were difference in a field larger than a single bit such as the chp.hps, a sprmCHps would be generated to record the value of chp.hps in the chp to be compressed. If the chp.hps were equal in both the chp to be compressed and the reference CHP, sprmCHps would not be recorded in the grrprl that is generated. If a sequence of characters has the same character properties and the sequence spans more than one paragraph, it's necessary to examine each paragraph's properties and to generate a different <B>CHPX</B> every time there is a change of style.</P>
In Word documents, the fundamental unit of text for which character exception information is kept is the <B>run of exception text</B>, a contiguous sequence of characters stored on disk that all have the same exception properties with respect to their underlying style character properties. Each run would have an entry recorded in a <B>CHPX FKP</B>. If a user never changed the character properties inherited from the styles used in his document and did a complete save of his document, although each of those styles may have different properties, the entire document stream would be one large <B>run of exception text</B> and one <B>CHPX </B>would suffice to describe the character properties of the entire document.</P>
The fundamental unit of text for which paragraph properties are recorded is the <B>paragraph</B>. Every paragraph has an entry recorded in a <B>PAPX FKP.</B></P>
The<B> CHPX FKP</B> and the <B>PAPX FKP</B> have similar physical structures. An <B>FKP </B>is a 512-byte data structure that is stored in one page of a Word file. At offset 511 is a 1-byte count named <B>crun</B>, which is a count of runs of exception text for <B>CHPX FKP</B>s and which is a count of paragraphs in <B>PAPX FKP</B>s. Beginning at offset 0 of the <B>FKP</B> is an array of <B>crun+1 FC</B>s, named <B>rgfc</B>, which records the beginning and limit <B>FC</B>s of <B>crun</B> runs of exception text or paragraphs.</P>
For CHPX FKPs, immediately following fkp.<B>rgfc </B>is a byte array of <B>crun </B>word offsets to <B>CHPX</B>s from the beginning of the <B>FKP. </B>This byte array, named <B>rgb</B>, is in 1-to-1 correspondence with the <B>rgfc</B>. The <B>ith</B> <B>rgb </B>gives the word offset of the exception property that belongs to the run\paragraph whose beginning</P>
For <B>PAPX FKPSs</B>, immediately following the <B>fkp.rgfc</B> is an array of 13 byte entries called <B>BXs</B>. This array called the <B>rgbx</B> is in 1-to-1 correspondence with the <B>rgfc</B>. The first byte of the <B>ith BX</B> entry contains a single byte field which gives the word offset of the <B>PAPX</B> that belongs to the paragraph whose beginning in <B>FC</B> space is <B>rgfc</B>[i] and whose limit is <B>rgfc[i+1]</B> in <B>FC</B> space. The last 12 bytes of the<B> ith BX</B> entry contain a <B>PHE</B> structure that stores the current paragraph height of the paragraph whose beginning in <B>FC</B> space is <B>rgfc</B>[i] and whose limit is <B>rgfc[i+1]</B> in <B>FC</B> space.</P>
The fact that the offset to property stored in the <B>rgb </B>or <B>rgbx </B>is a word offset implies that<B> CHPX</B>s and <B>PAPX</B>s are stored in <B>FKP</B>s beginning on word boundaries. Since the values stored in the <B>rgb/rgbx</B> allow random access throughout the <B>FKP,</B> space within an <B>FKP </B>can be conserved by storing the offset of the same physical <B>CHPX/PAPX</B> in <B>rgb/rgbx </B>entries when several<B> </B>runs or paragraphs in the FKP have the same properties. Word uses this optimization.</P>
An <B>rgb or rgbx[].b </B>value of 0 is used in another optimization. When a <B>rgb</B> or <B>rgbx[].b</B> value of 0 is stored in an <B>FKP,</B> it means that instead of referring to a particular CHPX/PAPX in the FKP the 0 value is a signal that<B> </B>the reader should construct<B> </B>for itself a commonly encountered predefined set of properties.</P>
For <B>CHPX FKP</B>s a 0 <B>rgb</B> value means that the properties of the run of text were exactly equal to the character properties inherited from the style of the paragraph it was in. For <B>PAPX FKP</B>s, a 0 <B>rgbx[].b </B>value<B> </B>means that the paragraph's properties were exactly equal to the paragraph properties of the Normal style (stc == 0) and the paragraph contained 1 line of 240 pixels, with a<B> </B>column width of 7980 dxas.</P>
When<B> </B>new entries are added to an <B>FKP</B>, there must be unallocated space in the middle of the <B>FKP</B> equal to 5 bytes for CHPXs (size of an <B>FC</B> plus size of one-byte word offset) or 11 bytes for PAPXs (size of an <B>FC</B> plus the size of a seven byte BX entry), plus the size of the new <B>CHPX</B> or <B>PAPX</B> if the property being added is not already recorded in the <B>FKP</B> and is not the property coded with a 0 <B>rgb/rgbx[].b </B>value. To add a new property in a CHPX FKP, existing <B>rgb </B>entries are moved four bytes to the right in the <B>FKP</B>. . To add a new property in a PAPX FKP, existing <B>rgbx </B>entries are moved four bytes to the right in the <B>FKP</B>. The new <B>FC </B>is added at the end of the <B>rgfc</B>. The new <B>CHPX </B>or <B>PAPX </B>is recorded on a 2-byte boundary before the previously recorded properties stored at the end of the block. The word offset of the beginning of the <B>CHPX</B> or <B>PAPX </B>is stored as the last entry of the relocated <B>rgb/rgbx[].b,</B> and finally, the <B>crun</B> stored at offset 511 is incremented.  In Word '97, PAPXs can be generated which are too large to fit in an FKP.  In such a case, the grpprl of the PAPX is written to the data stream and a PAPX is stored in an FKP with that grpprl replaced by a sprmPHugePapx.</P></FONT></BODY>
</HTML>

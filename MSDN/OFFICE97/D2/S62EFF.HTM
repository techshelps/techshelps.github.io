<HTML>
<HEAD>

<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LFO records and the pllfo</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2>
	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->



<H3>LFO records and the pllfo</H3>The LFO structure serves primarily as a level of indirection between the paragraph and the LST, but also can be used to override certain features of the list formats (LFO stands for List Format Override).  An LFO consists of two main parts:  (1) the List ID of the list (LST record) to which this LFO belongs, and an array of overrides to the formatting in that LST.  For the vast majority of LFOs, there are no overrides, but if there are any, they reside in an array of LFOLVL structures—one LFOLVL per level of the LST to be overridden.  An LFOLVL contains a set of flags to indicate whether just the start-at value of the LST is overridden, or whether just the formatting is overrridden, or both, as well as either a start-at value or a pointer to a LVL record, depending upon the values of the flags.  Note that if the LFOLVL says the start-at value should be overridden, what that means is that the FIRST paragraph in the document with this LFO should have a number equal exactly to that start-at value, but any subsequent paragraphs should just follow the previous paragraph in the sequence.  Also, if LFOLVL.fFormatting and LFOLVL.fStartAt are <I>both</I> true (rare) then LFOLVL.iStartAt should be ignored in favor of the iStartAt value from the corresponding LVL.</P>
Word writes out the pllfo first by writing out a PL of LFO structures.  It then enumerates through each LFO to figure out how many LFOLVLs each one has (LFO.clfolvl), and writes out, in order, each LFOLVL structure followed by its corresponding LVL structure (if LFOLVL.fFormatting is set).</P></FONT></BODY>
</HTML>

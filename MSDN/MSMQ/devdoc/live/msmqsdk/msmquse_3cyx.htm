<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Messages In a Queue Journal</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_reading_messages_in_a_queue_journal_api"></a>Reading Messages in a Queue Journal</h3>
<p>
The functions used to read messages in a <a href="msmqglos_3wvl.htm#_mq_queue_journal_gly">queue journal</a> are the same as those used to read messages in other queues. The only difference is that the <a href="msmqglos_3wva.htm#_mq_format_name_gly">format name</a> used to open the queue journal has a special format.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To read messages in a queue journal</h5>
<ol>
<li>
Obtain the queue journal's format name.<pre><code>wsprintf( wszFormatNameBuffer,
          L"%s;JOURNAL",
          QueueFormatName
          );     
    </code></pre>
</li>
<li>
Call <a href="mqfunc_42hx.htm"><b>MQOpenQueue</b></a> to open the queue with receive access.<pre><code>QUEUEHANDLE hQueue;
hr= MQOpenQueue(
    wszFormatNameBuffer,
    MQ_RECEIVE_ACCESS,
    0,
    &amp;hQueue
    );
if (FAILED(hr))
{
 //  Handle failure
}
    </code></pre>
</li>
<li>
Specify the message properties to be retrieved.<pre><code>MQMSGPROPS MsgProps;
MQPROPVARIANT aVariant[10];
MSGPROPID aPropId[10];
DWORD PropIdCount = 0;
#define MSG_BODY_LEN    500
unsigned char ucMsgBody[MSG_BODY_LEN];
DWORD dwAppspecificIndex;
    
// Set the PROPID_M_BODY property.
aPropId[PropIdCount] = PROPID_M_BODY;             //PropId
aVariant[PropIdCount].vt = VT_VECTOR|VT_UI1;      //Type
aVariant[PropIdCount].caub.cElems = MSG_BODY_LEN; //Value
aVariant[PropIdCount].caub.pElems = ucMsgBody;
PropIdCount++;
    
// Set the MQMSGPROPS structure
MsgProps.cProp = PropIdCount;       //Number of properties.
MsgProps.aPropID = aPropId;         //Ids of properties.
MsgProps.aPropVar = aVariant;       //Values of properties.
MsgProps.aStatus  = NULL;           //No Error report.
    </code></pre>
</li>
<li>
Call <a href="mqfunc_2cdh.htm"><b>MQReceiveMessage</b></a> to read the first message in the queue.<pre><code>hr = MQReceiveMessage(
     hQueue,              // handle to the Queue.
     5 * 60 * 1000,       // Max time (msec) to wait for msg.
     MQ_ACTION_RECEIVE,   // Action.
     &amp;MsgProps,           // properties to retrieve.
     NULL,                // No overlapped structure.
     NULL,                // No callback function.
     NULL,                // NO cursor.
     NULL                 // No transaction.
    );
    </code></pre>
</li>
</ol>
<h4>Example</h4>
<p>
This example reads the first message in the queue journal. It takes the queue's identifier (GUID), translates it into a string, prepares the format name of the queue using the translated string, and opens the queue and reads the first message.</p>
<pre><code>HRESULT hr;
#define FORMAT_NAME_LEN 80
WCHAR wszFormatNameBuffer[ FORMAT_NAME_LEN];
DWORD dwFormatLen = FORMAT_NAME_LEN;


wsprintf( wszFormatNameBuffer,
      L"%s;JOURNAL",
      QueueFormatName
      );     
    
///////////////////////////////////
// Open queue with receive access.
///////////////////////////////////

QUEUEHANDLE hQueue;
hr= MQOpenQueue(
    wszFormatNameBuffer,
    MQ_RECEIVE_ACCESS,
    0,
    &amp;hQueue
    );
if (FAILED(hr))
{
 //  Handle failure
}


///////////////////////////////////
// Specify the message properties 
// you want to receive.
///////////////////////////////////

MQMSGPROPS MsgProps;
MQPROPVARIANT aVariant[10];
MSGPROPID aPropId[10];
DWORD PropIdCount = 0;
#define MSG_BODY_LEN    500
unsigned char ucMsgBody[MSG_BODY_LEN];
DWORD dwAppspecificIndex;

// Set the PROPID_M_BODY property.
aPropId[PropIdCount] = PROPID_M_BODY;             //PropId
aVariant[PropIdCount].vt = VT_VECTOR|VT_UI1;      //Type
aVariant[PropIdCount].caub.cElems = MSG_BODY_LEN; //Value
aVariant[PropIdCount].caub.pElems = ucMsgBody;
PropIdCount++;

// Set the MQMSGPROPS structure
MsgProps.cProp = PropIdCount;       //Number of properties.
MsgProps.aPropID = aPropId;         //Ids of properties.
MsgProps.aPropVar = aVariant;       //Values of properties.
MsgProps.aStatus  = NULL;           //No Error report.


//////////////////////////
// Read a message.
//////////////////////////

hr = MQReceiveMessage(
     hQueue,              // handle to the Queue.
     5 * 60 * 1000,       // Max time (msec) to wait for msg.
     MQ_ACTION_RECEIVE,   // Action.
     &amp;MsgProps,           // properties to retrieve.
     NULL,                // No overlapped structure.
     NULL,                // No callback function.
     NULL,                // NO cursor.
     NULL                 // No transaction.
    );
if (FAILED(hr))
{
 //Handle failure
}
 
</code></pre>
<p>&nbsp;</p></body>
</HTML>

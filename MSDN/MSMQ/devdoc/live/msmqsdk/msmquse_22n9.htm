<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Authenticating Messages Using an Internal Certificate</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_authenticating_messages_using_an_internal_certificate"></a>Authenticating Messages Using an Internal Certificate</h3>
<p>
From an application perspective, authenticating messages using an internal certificate requires registering the internal certificate with MSMQ and setting the appropriate message properties.</p>
<p>
<b>Note</b>&nbsp;&nbsp;An internal certificate is created the first time the MSMQ Control Panel utility is run.</p>
<p>
The following procedures highlight what must be done by the sending computer to request authentication using an internal certificate and what the receiving application can do to determine if MSMQ was able to authenticate the message.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To request authentication using an internal certificate</h5>
<ol>
<li>
Register the internal certificate using the MSMQ Control Panel option.</li>
<li>
Optional. Call <a href="mqfunc_031w.htm"><b>MQGetSecurityContext</b></a> to retrieve the security context information from the certificate. This function puts the security context information in a security context buffer. This step is needed only if you are sending a large number of messages using the same certificate.</li>
<li>
Set the <a href="mqprop_1gz0.htm">PROPID_M_AUTH_LEVEL</a> message property to MQMSG_AUTH_LEVEL_ALWAYS. This tells MSMQ to authenticate the message.</li>
<li>
Make sure <a href="mqprop_2nsk.htm">PROPID_M_SENDER_CERT</a> is not specified. By default, this property uses the internal certificate that is registered. It is only used when an external certificate is used.</li>
<li>
Optional. If you are using security context information, set <a href="mqprop_27lg.htm">PROPID_M_SECURITY_CONTEXT</a>, pointing it to the security context buffer used by the call to <b>MQGetSecurityContext</b>.</li>
<li>
Optional. If you want to change the hash algorithm MSMQ uses to authenticate the message, set <a href="mqprop_4dpj.htm">PROPID_M_HASH_ALG</a> (the default algorithm is CALG_MD5).</li>
<li>
Optional. If you want MSMQ to return an acknowledgment to show that the message reached the queue or was retreived, set <a href="mqprop_9411.htm">PROPID_M_ACKNOWLEDGE</a> to MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE |  MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE |  MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE |  MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE.</li>
<li>
Send the message.</li>
</ol>
<p>
After the message is sent, the remaining work is done by MSMQ. For information on what MSMQ does to authenticate messages, see <a href="msmq_guide_4bsj.htm">How MSMQ Authenticates Messages</a>.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To receive an authenticated message</h5>
<p>
There is no way for the receiving application to know if MSMQ failed to authenticate a message. Messages that fail authentication are never delivered to their destination queue. However, the receiving application can determine if a message was sent requesting authentication, which implicitly indicates the message was authenticated by MSMQ.
<ul>
<li>
When reading the message in the queue, verify that <a href="mqprop_4a78.htm">PROPID_M_AUTHENTICATED</a> is set to 1. If it is set to 0, the message is not an authenticated message (it was not signed), and the receiving application decides if it wants to use the message.</li>
</ul>
<p>
When a message is authenticated (PROPID_M_AUTHENTICATED = 1) using an internal certificate, MSMQ guarantees that no one tampered with the message, and, if the sender identifier was sent with the message, that the received sender identifier in PROPID_M_SENDERID is the same as the sender identifier used to register the certificate.</p>
<p>&nbsp;</p></body>
</HTML>

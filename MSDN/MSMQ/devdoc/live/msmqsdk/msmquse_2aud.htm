<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving PROPID_Q_TYPE</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_retrieving_propid_q_type"></a>Retrieving PROPID_Q_TYPE</h3>
<p>
The queue's type (<a href="mqprop_5011.htm">PROPID_Q_TYPE</a>) identifies the queue. Some queue types are defined by MSMQ. However, applications can define their own queue types so that they can later locate a set of queues by their type.</p>
<p>
<b>Note</b>&nbsp;&nbsp;For locating queues see <a href="mqfunc_1gha.htm"><b>MQLocateBegin</b></a>.</p>
<p>
When retrieving the queue type, you must allocate a buffer of type CLSID for the returned GUID.</p>
<h5><img src="../../images/wedge.gif" border=0>To retrieve PROPID_Q_TYPE</h5>
<ol>
<li>
Define the structures needed to retrieve the properties. This includes the <b>MQQUEUEPROPS</b> structure and a buffer for the returned type GUID.<pre><code>// Define number of properties to be retrieved
#define NumberOfProperties 1

// Define property counter.
DWORD PropIdCount = 0;

// Define the MQQUEUPROPS structure.
MQQUEUEPROPS QueueProps;
PROPVARIANT aQueuePropVar[NumberOfProperties];
QUEUEPROPID aQueuePropId[NumberOfProperties];
HRESULT aQueueStatus[NumberOfProperties];

// Define results.
HRESULT hr;

// Define format name buffer.
DWORD dwFormatNameBufferLength = 256;
WCHAR szFormatNameBuffer[256];

 // Define buffer for returned type GUID.
 CLSID TypeBuffer;
</code></pre>
</li>
<li>
Specify PROPID_Q_TYPE.<pre><code>aQueuePropId[PropIdCount] = PROPID_Q_TYPE;   //Property ID
aQueuePropVar[PropIdCount].vt = VT_CLSID;        //Type indicator
aQueuePropVar[PropIdCount].puuid = &amp;TypeBuffer;
PropIdCount++;
</code></pre>
</li>
<li>
Add any additional queue properties. When adding properties, increment the <i>NumberOfProperties</i> variable to reflect the number of properties added.</li>
<li>
Set the <b>MQQUEUEPROPS</b> structure.<pre><code>QueueProps.cProp = PropIdCount;           // Number of properties
QueueProps.aPropID = aQueuePropId;        // Ids of properties
QueueProps.aPropVar = aQueuePropVar;      // Values of properties
QueueProps.aStatus = aQueueStatus;        // Error reports
</code></pre>
</li>
<li>
Obtain the format name of the queue. The example below uses <a href="mqfunc_95t1.htm"><b>MQPathNameToFormatName</b></a> to obtain the format name of a known queue. Other functions that can be used are <a href="mqfunc_5zj9.htm"><b>MQHandleToFormatName</b></a> and <a href="mqfunc_925h.htm"><b>MQInstanceToFormatName</b></a>.<pre><code>hr = MQPathNameToFormatName(L"machinename\\queuename",
                              szFormatNameBuffer,
                                  &amp;dwFormatNameBufferLength);
if (FAILED(hr))
   {
   fprintf(stderr, "Failed in MQPathNameToFormatName, error = 0x%x\n",hr);
   return -1;
   }</code></pre>
</li>
<li>
Call <a href="mqfunc_8b03.htm"><b>MQGetQueueProperties</b></a>.<pre><code>hr = MQGetQueueProperties(szFormatNameBuffer, &amp;QueueProps);
if (FAILED(hr))
   {
   fprintf(stderr, "Failed in MQGetQueueProperties, error = 0x%x\n",hr);
   return -1;
   }
 </code></pre>
</li>
<li>
Examine the value of the returned property. In this example, the type of the queue is printed to the screen.<pre><code>UCHAR *pszTypeGUID;
if (UuidToString(aQueuePropVar[0].puuid, &amp;pszTypeGUID)== RPC_S_OK)
{
  printf("The type for this queue is: ");
  printf("%s.\n", pszTypeGUID);
  RpcStringFree(&amp;pszTypeGUID);
}
 </code></pre>
</li>
</ol>
<h4>Example Code</h4>
<p>
The following example retrieves the PROPID_Q_TYPE property for a known queue and then prints the returned value to the screen.</p>
<pre><code>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;mq.h&gt;                   // MSMQ header file
#include &lt;rpc.h&gt;                  // Defines UuidToString


int main(int arg, char *argv[])

{
  ////////////////////////////
  //  Define structures.
  ////////////////////////////
  
  // Define the number of properties
  #define NumberOfProperties 1
  
  // Define the property counter.
  DWORD PropIdCount = 0;
  
  //Define the MQQUEUPROPS structure.
  MQQUEUEPROPS QueueProps;
  PROPVARIANT aQueuePropVar[NumberOfProperties];
  QUEUEPROPID aQueuePropId[NumberOfProperties];
  HRESULT aQueueStatus[NumberOfProperties];
   
  //Define results.
  HRESULT hr;
  
  // Define format name buffer.
  DWORD dwFormatNameBufferLength = 256;
  WCHAR szFormatNameBuffer[256];
  
  // Define buffer for returned type GUID.
  CLSID TypeBuffer;
  
  ///////////////////////////////////
  // Specify PROPID_Q_TYPE.
  ///////////////////////////////////
  
  aQueuePropId[PropIdCount] = PROPID_Q_TYPE;    // Property ID
  aQueuePropVar[PropIdCount].vt = VT_CLSID;         // Type indicator
  aQueuePropVar[PropIdCount].puuid = &amp;TypeBuffer;
  PropIdCount++;
  
  
  ///////////////////////////////////////////////////////
  // Add additional queue properties here. When adding 
  // properties, increment NumberOfProperties to 
  // reflect total number of properties.
  ///////////////////////////////////////////////////////
  
  
  ////////////////////////////////
  // Set the MQQUEUEPROPS structure.
  /////////////////////////////////
  QueueProps.cProp = PropIdCount;           // Number of properties
  QueueProps.aPropID = aQueuePropId;        // Ids of properties
  QueueProps.aPropVar = aQueuePropVar;      // Values of properties
  QueueProps.aStatus = aQueueStatus;        // Error reports
  
  
  ////////////////////////////
  //Get format name of queue.
  ////////////////////////////
  
  hr = MQPathNameToFormatName(L"machinename\\queuename",
                              szFormatNameBuffer,
                              &amp;dwFormatNameBufferLength);
  if (FAILED(hr))
  {
    fprintf(stderr, "Failed in MQPathNameToFormatName, error = 0x%x\n",hr);
        return -1;
  }
  
  
  ////////////////////////////
  // Get queue property.
  ////////////////////////////
  
  hr = MQGetQueueProperties(szFormatNameBuffer, &amp;QueueProps);
  if (FAILED(hr))
  {
    fprintf(stderr, "Failed in MQGetQueueProperties, error = 0x%x\n",hr);
        return -1;
  }
  
  
  ///////////////////////////////////////////////
  // Review returned value. This example prints 
  // out the type of the queue.
  //////////////////////////////////////////////
  
  UCHAR *pszTypeGUID;
  if (UuidToString(aQueuePropVar[0].puuid, &amp;pszTypeGUID)== RPC_S_OK)
  {
    printf("The identifier for this queue is: ");
    printf("%s.\n", pszTypeGUID);
    RpcStringFree(&amp;pszTypeGUID);
  }
  
  return 0;
  
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

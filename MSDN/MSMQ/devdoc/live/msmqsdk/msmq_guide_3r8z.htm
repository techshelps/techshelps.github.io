<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Passing Private Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_passing_private_messages"></a>Passing Private Messages</h3>
<p>
Passing private, encrypted messages between MSMQ and another message queue system is very similar to passing private messages between MSMQ applications. The only difference is a symmetric key that is exposed when sending a private message to the other message queue system.</p>
<p>
The message properties used by private messages include:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=57%>Property</th>
<th align=left width=43%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=57%><a href="mqprop_6wzd.htm">PROPID_M_BODY</a></td>
<td width=43%>Contains encrypted message body.</td>
</tr>
<tr valign=top>
<td width=57%><a href="mqprop_554p.htm">PROPID_M_DEST_SYMM_KEY</a></td>
<td width=43%>Used to decrypt messages.</td>
</tr>
<tr valign=top>
<td width=57%><a href="mqprop_3nvy.htm">PROPID_M_DEST_SYMM_KEY_LEN</a></td>
<td width=43%>Specifies the length of the symmetric key.</td>
</tr>
<tr valign=top>
<td width=57%><a href="mqprop_73on.htm">PROPID_M_ENCRYPTION_ALG</a></td>
<td width=43%>Algorithm used to encrypt the message.</td>
</tr>
<tr valign=top>
<td width=57%><a href="mqprop_5vcb.htm">PROPID_QM_ENCRYPTION_PK</a></td>
<td width=43%>Must contain the public key of the destination queue (used when sending messages to an MSMQ queue.)</td>
</tr>
</table><br>
<p>
The implementation of the connector application plays a significant role when passing private messages to their destination.</p>
<p>
Transparent connector applications pass the symmetric key, encryption algorithm, and the encrypted message body on to the Queue Manager of the destination queue. This is the same regardless of the direction the message is going. When using a transparent connector application, the public keys of all destination Queue Managers must be registered in <a href="msmqglos_3wv5.htm#_mq_active_directory_gly">Active Directory</a>.</p>
<p>
Non-transparent connector applications decrypt the message at the server and can pass on a clear-text message body or encrypt the message again (using the receiving systems encryption operations) and pass on a newly encrypted message body. When using a non-transparent connector application, all destination queues must use the public key of the connector application.</p>
<p>
In addition to the type of connector application, there are two design considerations that should be taken into account:
<ul>
<li>
When multiple servers are used (two or more servers are connected to the same foreign Connector Networks), only transparent connector applications can be used.</li>
<li>
When sending messages from another message queue system to the MSMQ, the source application must get the public key of the destination queue before it can encrypt the message body. The source application must tell the connector application to call <a href="mqfunc_2ysz.htm"><b>MQGetMachineProperties</b></a> and pass back the public key found in <a href="mqprop_5vcb.htm">PROPID_QM_ENCRYPTION_PK</a>.<p>
This means that there must be a level of trust between the connector application and the foreign Queue Manager. There is no way for the foreign Queue Manager to independently verify that the key it receives is the public key it requested.
</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;For foreign message properties not supported by MSMQ, use <a href="mqprop_8h4e.htm">PROPID_M_EXTENSION</a> and <a href="mqprop_1goe.htm">PROPID_M_EXTENSION_LEN</a>.</p>

<h4><a name="_mq_caching_the_symmetric_key"></a>Caching the Symmetric Key</h4>
<p>
Non-transparent connector applications can cache the symmetric key to save time when decrypting private messages. If several messages arrive from the same source, there is no need to decrypt a symmetric key for each message.</p>
<p>
To do this, the application must cache the identifier of the source computer and the decrypted and encrypted values of the symmetric key. The connector application can call <a href="mqprop_3qxw.htm">PROPID_M_SRC_MACHINE_ID</a> to retrieve the identifier of an MSMQ source machine.</p>
<p>
When the next message arrives, the connector application can first check if a message has already arrived from that source machine. If the machine identifier is not found, the connector application will add it to the cached values.</p>
<p>
If a previous message has arrived, the application can next test to see if the new encrypted key matches the cached encrypted key. If they match, the cached decrypted value can be used immediately. If they do not match, it will decrypt the new key (storing both the encrypted and decrypted values in the cache), using the new value to decrypt the message body.</p>
<p>&nbsp;</p></body>
</HTML>

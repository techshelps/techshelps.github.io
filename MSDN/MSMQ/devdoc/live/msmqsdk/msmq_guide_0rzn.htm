<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mq_reading_messages"></a>Reading Messages</h2>
<p>
MSMQ messages can be read from a queue either synchronously or asynchronously. In addition, they can be read within a transaction (for information on reading messages in transactions, see <a href="msmq_guide_5g4z.htm">MSMQ Transactions</a>).</p>
<p>
When an application synchronously reads messages in a queue, all calls are blocked until the next message is available or a specific amount of time expires. The amount of time the application waits can be 0, a specific amount of time (in milliseconds), or the maximum time allowed by your MSMQ enterprise. When the time expires for a synchronous read, MSMQ returns a NULL message (for applications using ActiveX components) or an MQ_ERROR_IO_TIMEOUT error (for applications using API functions).</p>
<p>
There are four ways to receive messages asynchronously:
<ul>
<li>
Use a callback function.</li>
<li>
Use a Windows Event mechanism.</li>
<li>
Use a Windows NT completion port.</li>
<li>
Use the MSMQ ActiveX components, defining an event handler that is notified when a message arrives or a time-out occurs. ActiveX components return MQ_ERROR_IO_TIMEOUT when a time-out occurs. </li>
</ul>
<p>
When using a <a href="msmqglos_3wv7.htm#_mq_callback_function_gly">callback function</a>, MSMQ reads the message by calling the callback function that is currently registered. The function is called if a message is immediately available, when the message arrives, or when the time expires.</p>
<p>
When using an event mechanism, an <b>OVERLAPPED</b> structure provides a valid handle (<i>hEvent </i>field) to an event object. When a suitable message arrives, or a time-out occurs, the event object is set to the signaled state. For more information on <b>OVERLAPPED</b> structures, see the Platform SDK.</p>
<p>
When using a Windows NT® completion port, a queue handle can be associated with the port to receive messages asynchronously. For more information, see <b>CreateIOCompletionPort </b>in the Microsoft Platform SDK.</p>
<p>
When reading messages in a queue, MSMQ can peek at the messages (leaving them in the queue) or retrieve them (removing the messages from the queue).</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>For information on…</th>
<th align=left width=52%>See…</th>
</tr>
<tr valign=top>
<td width=48%>Leaving or removing the message in the queue</td>
<td width=52%><a href="msmq_guide_7y5v.htm">Peeking or Retrieving Messages</a></td>
</tr>
<tr valign=top>
<td width=48%>Using cursors to read messages</td>
<td width=52%><a href="msmq_guide_222b.htm">Reading Messages with Cursors</a></td>
</tr>
<tr valign=top>
<td width=48%>A list of all message properties</td>
<td width=52%><a href="msmq_guide_9mer.htm">Message Properties</a></td>
</tr>
<tr valign=top>
<td width=48%>Sending messages to a destination queue</td>
<td width=52%><a href="msmq_guide_39kj.htm">Sending Messages</a></td>
</tr>
<tr valign=top>
<td width=48%>C API examples of reading messages in a queue</td>
<td width=52%><a href="msmquse_3n1l.htm">Reading Messages in a Queue</a> (using C API functions)</td>
</tr>
<tr valign=top>
<td width=48%>ActiveX code examples of reading messages in a queue</td>
<td width=52%><a href="actvxuse_5k54.htm">Reading Messages in a Queue</a> (using ActiveX components)</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Microsoft Visual Basic</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mq_using_microsoft_visual_basic"></a>Using Microsoft Visual Basic</h2>
<p>
The following programming tips are provided for those new to writing MSMQ or Microsoft® Visual Basic® applications. They highlight several issues that may make writing your MSMQ application easier.
<ul>
<li>
When declaring object variables, the <b>New</b> keyword can be added to the <b>Dim</b> statement to enable implicit creation of the object. This means that each time the variable is referenced, a new instance of the object is implicitly created if the current value of the variable is NULL.</li>
<li>
In contrast, when the <b>New</b> keyword is not used, an instance of the object is only created when the <b>Set</b> command is called or some other mechanism (such as a call to a method that returns an object reference) is used to obtain an object instance. The <b>Set</b> command can be used as well for variables that were declared with the <b>New</b> keyword.</li>
<li>
The example below shows when the <b>New</b> keyword should be used and when it should not be.<pre><code>Dim qDest As MSMQQueue                'Set command needed.
Dim msgSent As New MSMQMessage
Dim msgDest As MSMQMessage            'Peek method returns 
                                      'MSMQMessage instance.

Set qDest = qinfoDest.Open(MQ_SEND_ACCESS, MQ_DENY_NONE)
msgSent.Send qDest
Set qDest = qinfoDest.Open(MQ_PEEK_ACCESS, MQ_DENY_NONE)
Set msgDest = qDest.Peek(ReceiveTimeout:=100)
</code></pre>
</li>
<li>
When functions and subroutines are called, parentheses are not always required. </li>
<li>
When functions or subroutines are called explicitly using the <b>Call</b> keyword, parentheses are required whenever there is one or more arguments. (The return value of a function can be ignored.)<p>
For example:
<pre><code>Call Foo(x)
Call Foo(1, 2)
</code></pre>
</li>
<li>
When a function is called and the return value is used, parentheses are always required whenever there is one or more arguments.<p>
For example:
<pre><code>y = Foo(x, z)              ' Result of Foo used to assign to y.
Call Bar(Foo(1))           ' Result of Foo used as argument to Bar.
</code></pre>
</li>
<li>
However, when a function or subroutine is called without using the <b>Call</b> keyword and its return value is ignored:<ul>
<li>
Parentheses cannot be used for functions or subroutines that take more than one argument.</li>
<li>
If parentheses are used for functions or subroutines that take a single argument, that argument is effectively passed 'by value' since the argument is in effect an expression whose result is returned in a temporary variable.</li>
</ul>
<p>
For example:
<pre><code>Foo x       'Parentheses cannot be used: x is passed by reference.
Foo (x)     'x is effectively passed by value.
 </code></pre>
</li>
<li>
Use named arguments to make your code easier to read. Using non-named arguments forces the reader to remember the argument's name and the order of the arguments. For example, the following two lines of code are functionally identical, yet the first is much easier to understand:<pre><code>Create IsWorldReadable:=True, IsTransactional:=False 
Create False, True
 </code></pre>
</li>
<li>
A Variant containing an array can be used like an array. For example, ubound(msg.Id) or msg.CorrelationId(10).</li>
<li>
When declaring object's specify the object class in the <b>Dim</b> statement (early-binding). Using early-binding whenever possible will make your application run faster. For example, the following examples are both functionally equal, yet the first example executes faster due to early-binding of the object.<pre><code>dim qinfo as MSMQQueueInfo 
set qinfo = New MSMQQueueInfo 
qinfo.PathName = ".\PRIVATE$\CreateTest"
qinfo.Create 


dim qinfo as Object 
set qinfo = New MSMQQueueInfo
qinfo.PathName = ".\PRIVATE$\CreateTest"
qinfo.Create 
 </code></pre>
</li>
<li>
The Microsoft® Visual Basic® 5.0 debugger can be used on MSMQ application executable and DLL files generated by Visual Basic 5.0. You can set breakpoints as well as disassemble and see the generated VBA code and look at local variables.</li>
<li>
The <a href="mqactx_91ke.htm"><b>MSMQApplication</b></a> object does not have to be referenced. For example, the following three calls to <a href="mqactx_989x.htm"><b>MachineIdOfMachineName</b></a> all return the same computer identifier.<pre><code>Dim strId As String
Dim myapp As New MSMQApplication
strId = MachineIdOfMachineName("machinename")
Debug.Print strId
strId = MSMQApplication.MachineIdOfMachineName("machinename")
Debug.Print strId
strId = myapp.MachineIdOfMachineName("machinename")
Debug.Print strId
 </code></pre>
</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

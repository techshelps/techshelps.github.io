<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PROPVARIANT</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mq_propvariant"></a>PROPVARIANT</h1>
<p>
The <b>PROPVARIANT</b> structure is a general structure used to store property values. It is used for the elements of the <b>aPropVar</b> array used in <a href="mqstruc_2ygj.htm"><b>MQQUEUEPROPS</b></a>, <a href="mqstruc_559v.htm"><b>MQMSGPROPS</b></a>, and <a href="mqstruc_78j7.htm"><b>MQQMPROPS</b></a>; the <b>prval</b> array of <a href="mqstruc_2coe.htm"><b>MQPROPERTYRESTRICTION</b></a>; and as a parameter in <a href="mqfunc_416c.htm"><b>MQLocateNext</b></a>. </p>
<p>
Property values are tagged values, where the tag is the type indicator (an integer value) passed as an instance of <b>PROPVARIANT</b> (a data type that will be part of Automation in the future). MSMQ uses a similar structure (included here for reference) along with some other Automation types and definitions on which this structure relies. The complete definition of the Automation <b>PROPVARIANT</b> structure can be found in the header file ‹oleext.h› and in the additional header files it includes.</p>
<p>
For information on how property structures work together, see <a href="msmq_guide_9583.htm">Property Structures</a>.</p>
<pre><code>struct    MQtagPROPVARIANT  {
    VARTYPE vt;                    /* value tag              */
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    union   {
             UCHAR             bVal;      /* VT_UI1                */
             short             iVal;      /* VT_I2                 */
             USHORT            uiVal;     /* VT_UI2                */
             VARIANT_BOOL      bool;      /* VT_BOOL               */
             long              lVal;      /* VT_I4                 */
             ULONG             ulVal;     /* VT_UI4                */
             SCODE             scode;     /*                       */
             DATE              date;      /* VT_DATE               */
             CLSID  _RPC_FAR  *puuid;     /* VT_CLSID              */
             BLOB              blob;      /* VT_BLOB               */
             LPOLESTR          bstrVal;   /*                       */
             LPSTR             pszVal;    /* VT_LPSTR              */
             LPWSTR            pwszVal;   /* VT_LPWSTR             */
             CAUI1             caub;      /* VT_VECTOR | VT_UI1    */
             CAI2              cai;       /* VT_VECTOR | VT_I2     */
             CAUI2             caus;      /* VT_VECTOR | VT_UI2    */
             CABOOL            cabool;    /* VT_VECTOR | VT_BOOL   */
             CAI4              cal;       /* VT_VECTOR | VT_I4     */
             CAUI4             caul;      /* VT_VECTOR | VT_UI4    */
             CACLSID           cauuid;    /* VT_VECTOR | VT_CLSID  */
             CABSTR            cabstr;    /* VT_VECTOR | VT_BSTR   */
             CALPWSTR          calpwstr;  /* VT_VECTOR | VT_LPWSTR */
             CAPROPVARIANT   capropvar;   /*                       */
            };                      
};

typedef struct MQtagPROPVARIANT PROPVARIANT;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>vt</b></dt>
<dd>
The type indicator of the property. The valid indicators for the VT field are a subset of the Automation <b>VARENUM</b> enumeration type (including VT_NULL, VT_I2, VT_I4, VT_LPWSTR, VT_UI1, VT_UI4, VT_CLSID, VT_VECTOR|VT_UI1, VT_VECTOR|VT_LPWSTR ).</dd>
<dt>
<b>wReserved1, wReserved2, wReserved3</b></dt>
<dd>
Reserved by MSMQ.</dd>
<dt>
<b>union</b></dt>
<dd>
Specifies the value of the property. Depending on the type identifier specified by <b>VT</b>, the corresponding member of the union holds the value of the property.
</dd>
</dl>
<h4>Remarks</h4>
<p>
To specify a property (with the exception of some message properties passed to <a href="mqfunc_2cdh.htm"><b>MQReceiveMessage</b></a>) and queue properties passed to <a href="mqfunc_8b03.htm"><b>MQGetQueueProperties</b></a>, you must know its type indicator and the member of the <b>union</b> associated with the type indicator (both are provided with each property description). For example, to specify the message body in PROPID_M_BODY, the application must set <b>VT </b>to VT_UI1| VT_VECTOR and assign the message body to the <b>caub</b> member of the <b>union</b>.</p>
<p>
CA prefixed members of the <b>union</b> (<b>caub</b> through <b>capropvar</b>) are constructs used to pass buffers as counted arrays.</p>
<p>
For example, <b>CAUI1</b> is a counted array of bytes:</p>
<pre><code>typedef struct tagCAUI1 {
    ULONG cElems;               /* Byte Counter                  */
    unsigned char *pElems;      /* Pointer to a buffer of bytes  */
} CAUI1;
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in objidl.h.</p>
<h4>See Also</h4>
<p>
<a href="mqfunc_416c.htm"><b>MQLocateNext</b></a>, <a href="mqstruc_559v.htm"><b>MQMSGPROPS</b></a>, <a href="mqstruc_2coe.htm"><b>MQPROPERTYRESTRICTION</b></a>, <a href="mqstruc_78j7.htm"><b>MQQMPROPS</b></a>, <a href="mqstruc_2ygj.htm"><b>MQQUEUEPROPS</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

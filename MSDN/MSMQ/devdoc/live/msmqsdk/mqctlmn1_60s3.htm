<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Invoking ActiveX Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mq_invoking_activex_objects"></a>Invoking ActiveX Objects</h2>
<p>
ActiveX objects can be invoked using Microsoft® Visual Basic®, C/C++, and VC5 with #import. </p>
<p>
The following example shows how to create a queue using Visual Basic, VC5 with #import, and C.</p>
<h4>Using Visual Basic</h4>
<pre><code>dim qinfo as New MSMQQueueInfo

on error goto ErrHandler
qinfo.PathName = ".\queuename"
qinfo.Create
Exit Function
ErrHandler:
   ' handle Create error
 </code></pre>
<h4>Using VC5 and #import</h4>
<p>
Using VC5 with #import provides an easy-to-use syntax that is similar to the syntax provided by Visual Basic. This syntax provides:
<ul>
<li>
HRESULT to exception mapping. A VC5/ActiveX application can use <b>try</b> and <b>catch</b> to handle errors instead of testing for return values.</li>
<li>
Support for optional parameters (not available in C/C++ implementations).</li>
<li>
Reference counting and Query Interface support so there is no need for explicit AddRef/QueryInterface.</li>
</ul>
<pre><code>#import "mqoa.dll;

   try {
       IMSMQQueueInfoPtr pqinfo ("MSMQ.MSMQQueueInfo");
       pqinfo-&gt;PutPathName (L".\queuename");
       //
       // Create non-transactional, non-world-readable queue.
       //
       pqinfo-&gt;Create();
       catch (_com_error &amp;e) {
            // UNDONE: handle error.
            }
       }
 </code></pre>
<h4>Using C/C++</h4>
<pre><code>IMSMQQueueInfo *pqinfo;

    HRESULT hresult;
    VARIANT varIsTransactional;
    VARIANT varIsWorldReadable;
    //
    // Create MSMQQueueInfo object
    //
    hresult = CoCreateInstance(
                   CLSID_MSMQQueueInfo,
                   NULL,                    // punkOuter
                   CLSCTX_SERVER,
                   IID_IMSMQQueueInfo,
                   (LPVOID *)&amp;pqinfo
                   );
    if (SUCCEEDED(hresult)) {
      // Set the PathName.
      pqinfo-&gt;put_PathName(L".\queuename");
      //
      // specify if transactional
      //
      VariantInit(&amp;varIsTransactional);
      varIsTransactional.vt = VT_BOOL;
      varIsTransactional.boolVal = MQ_TRANSACTIONAL_NONE;
      VariantInit(&amp;varIsWorldReadable);
      varIsWorldReadable.vt = VT_BOOL;
      varIsWorldReadable.boolVal = FALSE;
      //
      // create the queue
      //
      hresult = pqinfo-&gt;Create(&amp;varIsTransactional, 
                               &amp;varIsWorldReadable);
      //
      // UNDONE: need to handle failure...
      //
    }
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Messages Using an MS DTC External Transaction</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_sending_messages_using_an_ms_dtc_external_transaction_api"></a>Sending Messages Using an MS DTC External Transaction</h3>
<p>
To send a message using a Microsoft® Distributed Transaction Coordinator (MS DTC) external transaction, the application must work with all the resource managers that are needed to complete the transaction. In the example below, the only resource manager used is MSMQ.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Each MSMQ message can have no more than 4 MB of data.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To send a message using an MS DTC external transaction</h5>
<ol>
<li>
Call DtcGetTransactionManager to get a transaction dispenser. For information on DtcGetTransactionManager, see the Microsoft Platform SDK.<pre><code>hr = DtcGetTransactionManager(
         NULL,                          // pszHost
         NULL,                          // pszTmName
         IID_ITransactionDispenser,     // IID of interface
         0,                             // Reserved: must be null.
         0,                             // Reserved: must be null.
         0,                             // Reserved: must be null.
         (void **)&amp;g_pTransactionDispenser  // Pointer to pointer 
                                            // to requested 
                                            // interface.
                                 );
</code></pre>
</li>
<li>
Initiate the transaction.<pre><code>hr = g_pTransactionDispenser-&gt;BeginTransaction (
        0,                         // Must be null.
        ISOLATIONLEVEL_ISOLATED,   // Isolation level.
        ISOFLAG_RETAIN_DONTCARE,   // Isolation flags.
        0,                         // Pointer to transaction 
                                   // options object.
        &amp;pTransaction);            // Pointer to a pointer to 
                                   // transaction object.
</code></pre>
</li>
<li>
3.Call <a href="mqfunc_8ip1.htm"><b>MQSendMessage</b></a> to send message.<pre><code>hr = MQSendMessage(h,           // Handle to destination queue.
                   &amp;msgprops,   // Pointer to MQMSGPROPS 
                                // structure.
                    pTransaction); // Pointer to transaction 
                                   // object.
</code></pre>
</li>
<li>
Commit or abort the transaction.<pre><code>hr = pTransaction-&gt;Commit(0, 0, 0);
-or-
hr = pTransaction-&gt;Abort(0, 0, 0);
</code></pre>
</li>
<li>
Release the transaction object.<pre><code>pTransaction-&gt;Release();
</code></pre>
</li>
</ol>
<h4>Example</h4>
<p>
This example sends a single message within an MS DTC external transaction.</p>
<pre><code>ITransactionDispenser   *g_pTransactionDispenser;

BOOL InitCoordinatedTransactions()
{

   //////////////////////////////
   // Get transaction dispenser.
   //////////////////////////////

   // Obtain an interface pointer from MS DTC proxy
   hr = DtcGetTransactionManager(
         NULL,                              // pszHost
         NULL,                              // pszTmName
         IID_ITransactionDispenser,         // IID of interface
         0,                                 // Reserved: must be null.
         0,                                 // Reserved: must be null.
         0,                                 // Reserved: must be null.
         (void **)&amp;g_pTransactionDispenser  // pointer to pointer to 
                                            // requested interface.
                                 );

   if (FAILED(hr))
   {
     //
     // No Connection to DTC.
     //
   return(FALSE);
   }

   return(TRUE);

}

void TransactSend(QUEUEHANDLE h, MQMSGPROPS * pMsgProps)
{

  ITransaction            *pTransaction;
  printf ("\nStarting transaction...\n\n");

  ////////////////////////////
  // Initiate a transaction.
  ///////////////////////////

  hr = g_pTransactionDispenser-&gt;BeginTransaction (
        0,                         // Must be null.
        ISOLATIONLEVEL_ISOLATED,   // Isolation level.
        ISOFLAG_RETAIN_DONTCARE,   // Isolation flags.
        0,                         // Pointer to transaction 
                                   // options object.
        &amp;pTransaction);            // Pointer to a pointer to 
                                   // transaction object.

      if (FAILED(hr))
      {
         Error ("BeginTransaction",hr);
      }

      // Default is to commit transaction
      BOOL fCommit = TRUE;

      /////////////////////////////////////////////
      // Call MQSendMessage to send message to 
      // the receiver side within the transaction.
      /////////////////////////////////////////////
      hr = MQSendMessage(h,           // Handle to destination queue
                         pMsgprops,   // Pointer to MQMSGPROPS 
                                      // structure.
                         pTransaction); // Pointer to transaction 
                                        // Object


      if (FAILED(hr))
      {
         printf("\nFailed in MQSendMessage(). hresult- %lxh\n", (DWORD) hr) ;
         fCommit = FALSE;     // Abort if MQSend failed
      }

      ///////////////////////////////////////////////////
      // Here the application can call other resource 
      // managers (such as SQL server) and enlist their 
      // actions in the transaction pTransaction.  If 
      // atomicity is required, set fCommit to FALSE.


      // Commit the transaction or abort it
      if (fCommit)
      {
         printf ("Committing the transaction...   ");

         hr = pTransaction-&gt;Commit(0, 0, 0);

         if (FAILED(hr))
            printf ("Failed... Transaction aborted.\n\n");
         else
            printf ("Transaction committed successfully.\n\n");

      }
      else
      {
         printf ("Aborting the transaction...   ");

         hr = pTransaction-&gt;Abort(0, 0, 0);

         if (FAILED(hr))
            Error("Transaction Abort",hr);
         else
            printf ("Transaction aborted.\n\n");
      }

      // Release the transaction
      pTransaction-&gt;Release();

  }


void CleanupTransaction()
{
   ///////////////////////////////////////////////
   // Cleanup and release the transaction object.
   ///////////////////////////////////////////////

   g_pTransactionDispenser-&gt;Release();
}
</code></pre>
<p>&nbsp;</p></body>
</HTML>

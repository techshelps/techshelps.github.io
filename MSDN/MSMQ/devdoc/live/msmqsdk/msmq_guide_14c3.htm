<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property Values</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mq_property_values"></a>Property Values</h2>
<p>
A property structure often contains three types of properties: IN properties, OUT properties, and IN/OUT properties.
<ul>
<li>
IN properties use values set by the application. They are passed to MSMQ as IN parameters and can either identify or set queue or message properties. For example, the application must supply the MSMQ pathname for the queue when the queue is created.</li>
<li>
OUT properties use values set by MSMQ. For example, when a queue is created, MSMQ sets the time when it was created.</li>
<li>
IN/OUT properties initially use values passed to MSMQ, and then MSMQ resets the value when the property is passed back to the application. For example, when the receiving application asks for the destination queue of a message, it must first tell MSMQ the size of the buffer allocated for the destination queue's format name. On return, MSMQ passes back the actual size of the format name.</li>
</ul>
<p>
Properties appear in no particular order in the <b>aPropVar</b> array. To determine the type of a property, MSMQ examines the property identifier and the function called. For example, for API functions, the queue quota property (PROPID_Q_QUOTA) is an OUT property when <a href="mqfunc_8b03.htm"><b>MQGetQueueProperties</b></a><b> </b>is called and an IN property when <a href="mqfunc_0wxf.htm"><b>MQSetQueueProperties</b></a> is called.</p>
<p>
IN properties can be set to any valid setting for the specific property. However, VT_NULL cannot be used as an IN property <b>VARTYPE</b> value.</p>
<p>
OUT properties returned by MSMQ require a <a href="mqstruc_93lg.htm"><b>PROPVARIANT</b></a> entry where the returned value can be stored. For example, space must be allocated before the label of a queue or the body of a message can be specified. There are two ways for the application to specify such a <b>PROPVARIANT</b> entry:
<ul>
<li>
Prepare a <b>PROPVARIANT</b> entry with the appropriate <b>VARTYPE</b> value (<b>vt</b> field) for the expected value, allocating the corresponding buffer when appropriate. For example, if a message body is specified, allocate the array of bytes to be pointed to by the caui1.pElems field.</li>
<li>
Let MSMQ fill in the <b>PROPVARIANT</b> with the appropriate <b>VARTYPE</b> value. To do this, set the <b>vt</b> field to VT_NULL. If memory is required, MSMQ allocates the buffer for the field as long as its value is stored in the PROPVARIANT structure (for example, VT_LPWSTR).<p>
For example, if myQueueProps is defined as an <a href="mqstruc_2ygj.htm"><b>MQQUEUEPROPS</b></a> structure to be passed to <a href="mqfunc_8b03.htm"><b>MQGetQueueProperties</b></a>: Assign myQueueProps.aPropID[j]=PROPID_Q_LABEL and myQueueProps.aPropVar[j].vt=VT_NULL. When the call returns, myQueueProps.aPropVar[j]. pwszVal points to the buffer that was allocated by MSMQ that contains the queue label.
</li>
</ul>
<p>
For Queue and Queue Manager properties whose field type is VT_LPWSTR, <b>VARTYPE</b> must be set to VT_NULL.</p>
<p>
In all cases where MSMQ allocates a buffer for the MSMQ application, it is the application's responsibility to free the memory with the <a href="mqfunc_02gp.htm"><b>MQFreeMemory</b></a> function.</p>
<p>&nbsp;</p></body>
</HTML>

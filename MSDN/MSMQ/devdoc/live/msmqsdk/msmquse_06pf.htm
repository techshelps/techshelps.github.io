<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transaction Programming Considerations</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_transaction_programming_considerations"></a>Transaction Programming Considerations</h3>
<p>
The following issues are unique to MSMQ transactions:
<ul>
<li>
There are five ways to send and receive transactional messages: <a href="msmq_guide_6mwj.htm">MTS  transactions</a>, <a href="msmq_guide_0ltf.htm">MS DTC external transactions</a>, <a href="msmq_guide_5q0j.htm">MSMQ internal transactions</a>, <a href="msmq_guide_0ulv.htm">XA-compliant transactions</a>, and single-message transactions.</li>
<li>
When sending messages, the application must get a successful return code from the call to <a href="mqfunc_8ip1.htm"><b>MQSendMessage</b></a> and a successful return code from its commit call before it can be assured that the message will be sent.</li>
<li>
If some operations in a transaction fail, it is the application's responsibility to decide whether to terminate the entire transaction (by calling the transaction object's abort member function) or commit the transaction anyway (if the failures are such that the transaction is still viable). If the application does commit to a transaction where some operations have failed, the failed operations will not be part of the transaction.</li>
<li>
There is no limit to the number of messages sent, the number of messages retrieved, or the number of queues used in a single transaction. However, an application cannot send a message to a queue and then try to retrieve it during the same transaction.</li>
<li>
Messages can be sent to a local or remote transaction queue, but messages can only be received from a local transaction queue.</li>
<li>
Calling <b>MQSendMessage</b> does not actually send the message within the transaction. The actual sending is done at some time after MS DTC commits the transaction. When MS DTC returns a successful commit return value, the sending application is guaranteed that the message will be sent. If a transaction is aborted, all MSMQ transaction operations are rolled back: no messages are sent, and all retrieved messages are returned to their original place in the queue.</li>
<li>
MSMQ guarantees exactly-once-delivery. This means that all messages sent to a queue will arrive once and only once. MSMQ takes special measures to prevent any message duplication or loss.</li>
<li>
MSMQ guarantees that all messages sent to a specific transaction queue will arrive in the order they were sent by the transaction. This means that if transaction T1 sends messages M1 and M2 to queue Q1, M1 will arrive before M2.<p>
However, there is no guarantee if two transactions are sending messages to the same queue. If transaction T1 sends messages M1 and M2 to Q1, and a second transaction T2 sends messages M3 and M4 to Q1, MSMQ only guarantees that M1 will arrive before M2, and that M3 will arrive before M4. To guarantee that M1 and M2 will arrive before M3 and M4, the application must commit to T2 only after getting a successful return code from T1.
<p>
MSMQ does not guarantee order of delivery to different queues, nor does it guarantee order of delivery from different computers.
</li>
<li>
One may receive messages from a <a href="msmqglos_3wvo.htm#_mq_transaction_queue_gly">transaction queue</a> using non-transactional receive operations.</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Locating a Public Queue</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mq_locating_a_public_queue_api"></a>Locating a Public Queue</h2>
<p>
Public queues can be located by running a query on the queue information registered in <a href="msmqglos_3wv5.htm#_mq_active_directory_gly">Active Directory</a>. To run the query, the following three Locate functions are used: <a href="mqfunc_1gha.htm"><b>MQLocateBegin</b></a>, <a href="mqfunc_416c.htm"><b>MQLocateNext</b></a>, and <a href="mqfunc_104k.htm"><b>MQLocateEnd</b></a>.</p>
<p>
<b>MQLocateBegin</b> uses two sets of properties: One set specifies the properties used to locate the queues, and the other set specifies the properties that will be included in the query results. For example, you may want to locate all the queues with a specific service type (PROPID_Q_TYPE) and only return their labels (PROPID_Q_LABEL). <b>MQLocateBegin</b> returns a handle to the query results.</p>
<p>
<b>Note</b>&nbsp;&nbsp;If MSMQ finds a queue but the application does not have the access rights required to get the queue's properties, that queue is not included in the results of the query.</p>
<p>
Once the results are available, <b>MQLocateNext</b> is called (as many times as needed) to navigate through the results. Finally, after the application is done using the query, <b>MQLocateEnd</b> is called to release the resources used for the query.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To run a query</h5>
<ol>
<li>
Determine the search criteria for the query and what properties you want to retrieve. </li>
<li>
Specify the search criteria using MQPROPERTYRESTRICTION and MQRESTRICTION.<pre><code>// Set queue restriction to PROPID_Q_TYPE = PRINTER_SERVICE_TYPE.
PropertyRestriction.rel = PREQ;
PropertyRestriction.prop = PROPID_Q_TYPE;
PropertyRestriction.prval.vt = VT_CLSID;
PropertyRestriction.prval.puuid = &amp;PRINTER_SERVICE_TYPE;
    
// Specify a one property restriction.
Restriction.cRes = 1;
Restriction.paPropRes = &amp;PropertyRestriction;
    </code></pre>
</li>
<li>
Specify the properties to retrieve using MQCOLUMNSET.<pre><code>MQCOLUMNSET    Column;
QUEUEPROPID    aPropId[2];     // only two properties to retrieve.
DWORD           dwColumnCount = 0;
 
aPropId[dwColumnCount] = PROPID_Q_INSTANCE;
dwColumnCount++;
    
aPropId[dwColumnCount] = PROPID_Q_CREATE_TIME;
dwColumnCount++;
    
Column.cCol = dwColumnCount;
Column.aCol = aPropId;
    </code></pre>
</li>
<li>
Call <a href="mqfunc_1gha.htm"><b>MQLocateBegin</b></a> to start the query.<pre><code>HANDLE         hEnum;
hr = MQLocateBegin(
    NULL,           // start search at the top.
    &amp;Restriction,   // Search criteria.
    &amp;Column,        // Properties to return.
    NULL,           // No sort order
    &amp;hEnum          // Enumeration Handle
    );
 </code></pre>
</li>
<li>
Call <a href="mqfunc_416c.htm"><b>MQLocateNext</b></a> to look at the query results.<pre><code>hr = MQLocateNext( 
     hEnum,      // Handle returned by MQLocateBegin.
     &amp;cProps,    // Size of aPropVar array.
     aPropVar    // An array of PROPVARIANT for results.
     );
 </code></pre>
</li>
<li>
Call <a href="mqfunc_104k.htm"><b>MQLocateEnd</b></a> to close the query.<pre><code>hr = MQLocateEnd(hEnum);   // Handle returned by MQLocateBegin.
 </code></pre>
</li>
</ol>
<h4>Example</h4>
<p>
The following example shows the code used to locate all the queues of a specific type as well as return their queue identifier (<a href="mqprop_80th.htm">PROPID_Q_INSTANCE</a>) and when they were created <a href="mqprop_0ecl.htm">(PROPID_Q_CREATE_TIME</a>).</p>
<pre><code>/////////////////////////////////////
// Define the MQPROPERTYRESTRICTION 
// and MQRESTRICTION structures.
/////////////////////////////////////
#define Max_PROPERTIES 13       // 13 possible queue properties
CLSID PRINTER_SERVICE_TYPE =    // dummy GUID
      {0x1, 0x2, 0x3, {0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa}};
HRESULT hr;
MQPROPERTYRESTRICTION PropertyRestriction;
MQRESTRICTION  Restriction;

//////////////////////////////////////////
// Set search criteria according to the 
// type of service provided by the queue.
/////////////////////////////////////////

// Set queue restriction to PROPID_Q_TYPE = PRINTER_SERVICE_TYPE.
PropertyRestriction.rel = PREQ;
PropertyRestriction.prop = PROPID_Q_TYPE;
PropertyRestriction.prval.vt = VT_CLSID;
PropertyRestriction.prval.puuid = &amp;PRINTER_SERVICE_TYPE;

// Specify a one property restriction.
Restriction.cRes = 1;
Restriction.paPropRes = &amp;PropertyRestriction;


/////////////////////////////////////////
// Set MQCOLUMNSET structure to specify
// the properties to be returned:         
// PROPID_Q_INSTANCE and PROPID_Q_CREATE_TIME.
/////////////////////////////////////////

MQCOLUMNSET    Column;
QUEUEPROPID    aPropId[2];     // only two properties to retrieve.
DWORD           dwColumnCount = 0;

aPropId[dwColumnCount] = PROPID_Q_INSTANCE;
dwColumnCount++;

aPropId[dwColumnCount] = PROPID_Q_CREATE_TIME;
dwColumnCount++;

Column.cCol = dwColumnCount;
Column.aCol = aPropId;


/////////////////////////////////////
// Call MQLocateBegin to start query.
/////////////////////////////////////

HANDLE         hEnum;
hr = MQLocateBegin(
    NULL,           //start search at the top.
    &amp;Restriction,   //Search criteria.
    &amp;Column,        //Properties to return.
    NULL,           //No sort order
    &amp;hEnum          //Enumeration Handle
    );
    
    if(FAILED(hr))
    {
        //
        //  Error handling
        //
    }


/////////////////////////////////////
// Call MQLocateNext to examine results
// of query.
/////////////////////////////////////

PROPVARIANT aPropVar[MAX_PROPERTIES];
DWORD cProps, index;

do
  {
   cProps = MAX_PROPERTIES;
   hr = MQLocateNext( 
        hEnum,      // Handle returned by MQLocateBegin.
        &amp;cProps,    // Size of aPropVar array.
        aPropVar    // An array of PROPVARIANT for results.
        );

      if (FAILED(hr))
      {
        break;
      }
 
      for (index = 0; index &lt; cProps; index += dwColumnCount)

      {
         //Process properties of a queue stored in:
         //aPropVar[index], aPropVar[index+1], …,
         //aPropVar[index+dwColumnCount-1].
      }

  } while (cProps &gt; 0);


/////////////////////////////////////
// Call MQLocateEnd to end query.
/////////////////////////////////////
hr = MQLocateEnd(hEnum);   //Handle returned by MQLocateBegin.
if(FAILED(hr))
{
    //
    //Error handling
    //
}
</code></pre>
<p>&nbsp;</p></body>
</HTML>

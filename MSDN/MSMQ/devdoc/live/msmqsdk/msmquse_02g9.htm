<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Queue</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_mq_creating_a_queue_api"></a>Creating a Queue</h2>
<p>
All queues, both <a href="msmqglos_3wvk.htm#_mq_public_queue_gly">public</a> and <a href="msmqglos_3wvk.htm#_mq_private_queue_gly">private</a>, are created by calling <a href="mqfunc_8dut.htm"><b>MQCreateQueue</b></a>. For a description of public and private queues, see <a href="msmq_guide_1j1v.htm">Message Queues</a>.</p>
<p>
The only property required to create a queue is <a href="mqprop_0pt1.htm">PROPID_Q_PATHNAME</a>. This property tells MSMQ where to store the queue's messages, if the queue is public or private, and the name of the queue. Once the queue is created, the format name returned in the <i>lpwcsFormatName</i> parameter is used to open the queue. For a description of MSMQ pathnames and queue format names, see <a href="msmq_guide_0mg5.htm">Referencing a Queue</a>.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a queue</h5>
<ol>
<li>
Determine which computer will hold the messages for the queue. The computer's machine name is part of the queue's MSMQ pathname (PROPID_Q_PATHNAME). For private queues, the local computer must be specified.</li>
<li>
Determine whether the queue should be public or private. This tells MSMQ where to register the queue: public queues are registered in <a href="msmqglos_3wv5.htm#_mq_active_directory_gly">Active Directory</a>, and private queues are registered on the local machine (private queues can only be registered on the local machine). This information is part of the queue's MSMQ pathname (PROPID_Q_PATHNAME).</li>
<li>
Determine the name for the queue. The queue's name is part of the queue's MSMQ pathname (PROPID_Q_PATHNAME).<p>
<b>Note</b>&nbsp;&nbsp;The MSMQ pathname must be unique in the MSMQ enterprise. This applies to public and private queues.
</li>
<li>
Determine what queue properties must be set. If a queue property is not specified when calling <b>MQCreateQueue</b>, its default value is used. For a complete list of the queue properties that can be set when a queue is created, see the following Queue Properties section.</li>
<li>
Declare the <a href="mqstruc_2ygj.htm"><b>MQQUEUEPROPS</b></a> structure. The index of the aVariant and aPropId arrays must match the number of queue properties specified.<pre><code>MQQUEUEPROPS QueueProps;
PROPVARIANT aVariant[2];
QUEUEPROPID aPropId[2];
DWORD PropIdCount = 0;
HRESULT hr;
DWORD dwFormatNameBufferLength = 256;
WCHAR szFormatNameBuffer[256];
PSECURITY_DESCRIPTOR pSecurityDescriptor;
 </code></pre>
</li>
<li>
Fill in the <b>MQQUEUEPROPS</b> structure. PROPID_Q_PATHNAME is required; it indicates if the queue is public or private.<pre><code>// Set the pathname of the queue (PROPID_Q_PATHNAME).
aPropId[PropIdCount] = PROPID_Q_PATHNAME;    // Property identifier
aVariant[PropIdCount].vt = VT_LPWSTR;        // Type indicator
aVariant[PropIdCount].pwszVal = L".\\MyPublicQueue";
    
PropIdCount++;
    
// Set the label of the queue (PROPID_Q_LABEL).
aPropId[PropIdCount] = PROPID_Q_LABEL;    // Property identifier
aVariant[PropIdCount].vt = VT_LPWSTR;     // Type indicator
aVariant[PropIdCount].pwszVal = L"Test Queue";
    
PropIdCount++;
    
    </code></pre>
</li>
<li>
Set the <b>MQQUEUEPROPS</b> structure.<pre><code>QueueProps.cProp = PropIdCount;           // Number of properties
QueueProps.aPropID = aPropId;             // Ids of properties
QueueProps.aPropVar = aVariant;           // Values of properties
QueueProps.aStatus = NULL;                // No error reports
pSecurityDescriptor = NULL;
    </code></pre>
</li>
<li>
Call <b>MQCreateQueue</b> to create the queue.<pre><code>hr = MQCreateQueue(
     pSecurityDescriptor,            // Security
     &amp;QueueProps,                    // Queue properties
     szFormatNameBuffer,             // Output: Format Name
     &amp;dwFormatNameBufferLength       // Output: Format Name len
     );
 
 </code></pre>
</li>
</ol>
<h4>Examples</h4>
<p>
The following two examples show the code used to specify the MSMQ pathname and label for a public queue and and a private queue, plus a call to <b>MQCreateQueue</b> to create the queue.</p>
<p>
<b>Note</b>&nbsp;&nbsp;In these examples, "." is used to indicate the local machine in PROPID_Q_PATHNAME. For MSMQ servers and independent clients, the local machine is the local computer. However, for MSMQ-dependent clients, the local machine is the client's MSMQ server.</p>
<p>
<b>For a public queue</b></p>
<pre><code>////////////////////////////
//  Define the MQQUEUEPROPS
//  structure.
////////////////////////////
MQQUEUEPROPS QueueProps;
PROPVARIANT aVariant[2];      // Modify for additional properties.
QUEUEPROPID aPropId[2];       // Modify for additional properties.
DWORD PropIdCount = 0;
HRESULT hr;
DWORD dwFormatNameBufferLength = 256;
TCHAR szFormatNameBuffer[ 256];
PSECURITY_DESCRIPTOR pSecurityDescriptor;

//////////////////////////////////////////
// Specify the queue's pathname and label 
// properties. Note the pathname uses "." 
// as shorthand for the local computer.
//////////////////////////////////////////

// Set the pathname of the queue (PROPID_Q_PATHNAME).
aPropId[PropIdCount] = PROPID_Q_PATHNAME;  // Property identifier
aVariant[PropIdCount].vt = VT_LPWSTR;      // Type indicator
aVariant[PropIdCount].pwszVal = L".\\MyPublicQueue";  // Pathname

PropIdCount++;

// Set the label of the queue (PROPID_Q_LABEL).
aPropId[PropIdCount] = PROPID_Q_LABEL;     // Property identifier
aVariant[PropIdCount].vt = VT_LPWSTR;      // Type indicator
aVariant[PropIdCount].pwszVal = L"Test Queue";     // Queue label

PropIdCount++;


////////////////////////////////////////////////////////
// Add additional properties here. When adding properties, 
// increment the indexes for the aVariant and aPropId arrays
// in their respective declaration statements above.
////////////////////////////////////////////////////////


////////////////////////////////////
// Set the MQQUEUEPROPS structure.
/////////////////////////////////////
QueueProps.cProp = PropIdCount;  // Number of properties
QueueProps.aPropID = aPropId;    // Ids of properties
QueueProps.aPropVar = aVariant;  // Values of properties
QueueProps.aStatus = NULL;       // No error reports
pSecurityDescriptor = NULL;      // Set default security descriptor

////////////////////////////
//Create the queue.
////////////////////////////
hr = MQCreateQueue(
pSecurityDescriptor,               // Security
     &amp;QueueProps,                    // Queue properties
     szFormatNameBuffer,             // Output: Format Name
     &amp;dwFormatNameBufferLength       // Output: Format Name length
     );
 </code></pre>
<p>
<b>For a private queue</b></p>
<pre><code>MQQUEUEPROPS QueueProps;
PROPVARIANT aVariant[2];
PROPVARIANT aVariant[2];      // Modify for additional properties.
QUEUEPROPID aPropId[2];       // Modify for additional properties.
HRESULT hr;
DWORD dwFormatNameBufferLength = 256;
WCHAR szFormatNameBuffer[ 256];
PSECURITY_DESCRIPTOR pSecurityDescriptor;

//////////////////////////////////////////
// Specify the queue's pathname and label 
// properties. Note the pathname uses "." 
// as shorthand for the local computer.
//////////////////////////////////////////

// Set the pathname of the queue (PROPID_Q_PATHNAME).
aPropId[PropIdCount] = PROPID_Q_PATHNAME;   // Property identifier
aVariant[PropIdCount].vt = VT_LPWSTR;       // Type indicator
aVariant[PropIdCount].pwszVal = L".\\PRIVATE$\\MyPrivateQueue"; 

PropIdCount++;

// Set the label of the queue (PROPID_Q_LABEL).
aPropId[PropIdCount] = PROPID_Q_LABEL;     // Property identifier
aVariant[PropIdCount].vt = VT_LPWSTR;      // Type indicator
aVariant[PropIdCount].pwszVal = L"Test Queue";     // Queue label

PropIdCount++;

////////////////////////////////////////////////////////
// Add additional properties here. When adding properties, 
// increment the indexes for the aVariant and aPropId arrays
// in their respective declaration statements above.
////////////////////////////////////////////////////////


////////////////////////////////////////////////////////
// Set the MQQUEUEPROPS structure.
////////////////////////////////////////////////////////
QueueProps.cProp = PropIdCount;  // Number of properties
QueueProps.aPropID = aPropId;    // Ids of properties
QueueProps.aPropVar = aVariant;  // Values of properties
QueueProps.aStatus = NULL;       // No error reports
pSecurityDescriptor = NULL;      // Set default security descriptor


///////////////////////    
//Create the queue.
///////////////////////
hr = MQCreateQueue(
     pSecurityDescriptor,            // Security
     &amp;QueueProps,                    // Queue properties
     szFormatNameBuffer,             // Output: Format Name
     &amp;dwFormatNameBufferLength       // Output: Format Name len
     );
 </code></pre>
<h4>Queue Properties</h4>
<p>
The following optional queue properties can be set by the application when creating the queue:</p>
<p>
<a href="mqprop_6v6t.htm">PROPID_Q_AUTHENTICATE</a> </p>
<p>
<a href="mqprop_55h5.htm">PROPID_Q_BASEPRIORITY</a> </p>
<p>
<a href="mqprop_9s18.htm">PROPID_Q_JOURNAL</a> </p>
<p>
<a href="mqprop_5469.htm">PROPID_Q_JOURNAL_QUOTA</a> </p>
<p>
<a href="mqprop_7830.htm">PROPID_Q_LABEL</a> </p>
<p>
<a href="mqprop_5ess.htm">PROPID_Q_PRIV_LEVEL</a> </p>
<p>
<a href="mqprop_8q8x.htm">PROPID_Q_QUOTA</a> </p>
<p>
<a href="mqprop_1r8u.htm">PROPID_Q_TRANSACTION</a> </p>
<p>
<a href="mqprop_5011.htm">PROPID_Q_TYPE</a> </p>
<p>
The following properties are set by MSMQ when it creates the queue:</p>
<p>
<a href="mqprop_0ecl.htm">PROPID_Q_CREATE_TIME</a> </p>
<p>
<a href="mqprop_80th.htm">PROPID_Q_INSTANCE</a> (for public queues)</p>
<p>
<a href="mqprop_9bc5.htm">PROPID_Q_MODIFY_TIME</a> </p>
<p>&nbsp;</p></body>
</HTML>

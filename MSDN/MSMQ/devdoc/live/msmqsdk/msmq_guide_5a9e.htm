<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message and Cursor Behavior</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_message_and_cursor_behavior"></a>Message and Cursor Behavior</h3>
<p>
Although cursors are independent, how they are used may affect a message that another cursor is pointing to. For example, if two cursors are pointing at the same message and one cursor is used to remove the message, the other cursor no longer points to a message. An error is returned if an attempt is made to <a href="msmqglos_3wvk.htm#_mq_peek_gly">peek</a> at or <a href="msmqglos_3wvm.htm#_mq_retrieve_gly">retrieve</a> the message that was removed.</p>
<p>
<b>Note</b>&nbsp;&nbsp;A cursor pointing to a message does not guarantee that the message always exists. The message can be removed by another cursor, another application, by MSMQ Explorer, or the queue could be deleted.</p>
<p>
The relationship between message position and cursor position can be simple or complex depending on how the messages in the queue are read. The following illustrations show several scenarios, starting with the simple case of retrieving the first message in the queue (using no cursor), and ending with an example of multiple cursors. Each example shows message and cursor position before and after the call was made.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Cursors work the same way for synchronous and asynchronous operations. However, you should not use the same cursor when firing receives in overlapping operations. Firing a second receive (using the same cursor) before the first one is completed leads to unexpected behavior.</p>

<h4><a name="_mq_retrieving_the_first_message"></a>Retrieving the First Message</h4>
<p>
Here no cursor is used to remove Message A from the queue. The cursor shown in the illustration could be another application's cursor or the implied cursor used by ActiveX applications.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Platform</th>
<th align=left width=84%></th>
</tr>
<tr valign=top>
<td width=16%>C:</td>
<td width=84%><b>MQReceiveMessage<br>
</b><i>dwAction</i>==MQ_ACTION_RECEIVE<br>
hCursor==NULL</td>
</tr>
<tr valign=top>
<td width=16%>ActiveX</td>
<td width=84%><b>MSMQQueue.Receive</b></td>
</tr>
</table><br>
<p>
<img src="images/cursor1.gif" border=0></p>

<h4><a name="_mq_peeking_at_a_message_in_a_queue"></a>Peeking at a Message in a Queue</h4>
<p>
Here a cursor is used to look at the second message in the queue. The message is peeked at but not removed from the queue. Cursor position and message position remain the same.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Platform</th>
<th align=left width=84%></th>
</tr>
<tr valign=top>
<td width=16%>C:</td>
<td width=84%><b>MQReceiveMessage<br>
</b><i>dwAction</i>==MQ_ACTION_PEEK_CURRENT<br>
hCursor==&lt;CurrentCursorHandle&gt;</td>
</tr>
<tr valign=top>
<td width=16%>ActiveX</td>
<td width=84%><b>MSMQQueue.PeekCurrent</b></td>
</tr>
</table><br>
<p>
<img src="images/cursor2.gif" border=0></p>

<h4><a name="_mq_retrieving_a_message_in_a_queue"></a>Retrieving a Message in a Queue</h4>
<p>
Here a cursor is used to retrieve the second message in the queue. When the call is made, the message is removed from the queue and the cursor now points at a new message. When the last message in a queue is retrieved, MSMQ points the cursor to the end of the queue and waits for a new message or a time-out to occur.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Platform</th>
<th align=left width=84%></th>
</tr>
<tr valign=top>
<td width=16%>C:</td>
<td width=84%><b>MQReceiveMessage<br>
</b><i>dwAction</i>==MQ_ACTION_RECEIVE<br>
hCursor==&lt;CurrentCursorHandle&gt;</td>
</tr>
<tr valign=top>
<td width=16%>ActiveX</td>
<td width=84%><b>MSMQQueue.ReceiveCurrent</b></td>
</tr>
</table><br>
<p>
<img src="images/cursor3.gif" border=0></p>

<h4><a name="_mq_peeking_at_the_next_message_in_a_queue"></a>Peeking at the next Message in a Queue</h4>
<p>
Here a cursor is used to peek at the next two messages in the queue. When the first call is made, MSMQ moves the cursor and then looks at the new message. When the second call is made (the cursor is pointing to the last message in the queue), MSMQ moves the cursor to the end of the queue and waits for a new message or a time-out to occur.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Platform</th>
<th align=left width=84%></th>
</tr>
<tr valign=top>
<td width=16%>C:</td>
<td width=84%><b>MQReceiveMessage<br>
</b><i>dwAction</i>==MQ_ACTION_PEEK_NEXT<br>
hCursor==&lt;CurrentCursorHandle&gt;</td>
</tr>
<tr valign=top>
<td width=16%>ActiveX</td>
<td width=84%><b>MSMQQueue.PeekNext</b></td>
</tr>
</table><br>
<p>
<img src="images/cursor4.gif" border=0></p>

<h4><a name="_mq_using_multiple_cursors"></a>Using Multiple Cursors</h4>
<p>
Here one cursor is pointing at a message (CursorB) in the queue and another cursor (CursorA) is removing messages from the queue. CursorA removes messages from the queue with several receive calls while CursorB remains pointing to message "C." After CursorA removes message "C", CursorB no longer points to a message. CursorB is now pointing to a message placeholder, and an error is returned if the application tries to read a message at the current CursorB location. However, CursorB can still be used if peek-next is called.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Platform</th>
<th align=left width=84%></th>
</tr>
<tr valign=top>
<td width=16%>C:</td>
<td width=84%><b>MQReceiveMessage<br>
</b><i>dwAction</i>==MQ_ACTION_RECEIVE<br>
hCursor==&lt;CurrentCursor1Handle&gt;</td>
</tr>
</table><br>
<p>
<img src="images/cursor5.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

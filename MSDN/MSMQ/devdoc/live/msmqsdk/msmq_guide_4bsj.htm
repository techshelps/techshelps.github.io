<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How MSMQ Authenticates Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_how_msmq_authenticates_messages"></a>How MSMQ Authenticates Messages</h3>
<p>
MSMQ authenticates messages at the request of the sending application. When the sending application indicates it wants a message authenticated, the MSMQ run-time code performs the following tasks:
<ul>
<li>
Retrieves the <a href="msmqglos_3wvd.htm#_mq_internal_certificate_gly">internal certificate</a>, <a href="msmqglos_3wv9.htm#_mq_external_certificate_gly">external certificate</a>, or the <a href="msmqglos_3wvn.htm#_mq_security_context_information_gly">security context information</a>.<p>
<b>Note</b>&nbsp;&nbsp;For applications using API functions, external certificates are provided in <a href="mqprop_2nsk.htm">PROPID_M_SENDER_CERT</a> and security context information is provided in <a href="mqprop_27lg.htm">PROPID_M_SECURITY_CONTEXT</a>.
<p>
For applications using ActiveX components, external certificates are provided in <a href="mqactx_22cl.htm">SenderCertificate</a> and security context information is retrieved by <a href="mqactx_7ab8.htm">AttachCurrentSecurityContext</a>.
</li>
<li>
Extracts the <a href="msmqglos_3wvk.htm#_mq_public_signing_key_gly">public signing key</a> from the internal certificate, external certificate, or from the security context information taken from the external certificate.</li>
<li>
Extracts the matching <a href="msmqglos_3wvk.htm#_mq_private_signing_key_gly">private signing key</a>. For internal certificates, MSMQ locates the private signing key internally. For external certificates, MSMQ searches for the private signing key in the Internet Explorer certificate store (this is why the external certificate must be registered in the certificate store).</li>
<li>
Computes a hash value of the message using the algorithm specified by the sending application. <p>
<b>Note</b>&nbsp;&nbsp;For applications using API functions, the Hash algorithm is specified by <a href="mqprop_4dpj.htm">PROPID_M_HASH_ALG</a> (the default algorithm is CALG_MD5).
<p>
For applications using ActiveX components, the Hash algorithm is specified by the <b>MSMQMessage</b> object's <a href="mqactx_14vh.htm"><b>HashAlgorithm</b></a> property (the default algorithm is CALG_MD5).
</li>
<li>
The following message properties (in the order shown here) are used to create the hash value:</li>
</ul>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>API Functions</th>
<th align=left width=52%>ActiveX Components</th>
</tr>
<tr valign=top>
<td width=48%><a href="mqprop_0hwk.htm">PROPID_M_CORRELATIONID</a> </td>
<td width=52%><a href="mqactx_69ic.htm"><b>CorrelationId</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="mqprop_4gpv.htm">PROPID_M_APPSPECIFIC</a> </td>
<td width=52%><a href="mqactx_2y3n.htm"><b>AppSpecific</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="mqprop_6wzd.htm">PROPID_M_BODY</a> </td>
<td width=52%><a href="mqactx_2wl5.htm"><b>Body</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="mqprop_9pnw.htm">PROPID_M_LABEL</a> </td>
<td width=52%><a href="mqactx_30do.htm"><b>Label</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="mqprop_204l.htm">PROPID_M_RESP_QUEUE</a> </td>
<td width=52%><a href="mqactx_9vxr.htm"><b>ResponseQueueInfo</b></a></td>
</tr>
<tr valign=top>
<td width=48%><a href="mqprop_0yp1.htm">PROPID_M_ADMIN_QUEUE</a> </td>
<td width=52%><a href="mqactx_0j5b.htm"><b>AdminQueueInfo</b></a></td>
</tr>
</table><br>
<ul>
<li>
Encrypts the hash value using your private signing key. This is the digital signature that will be attached to the message.</li>
<li>
Attaches the certificate and digital signature to the message and sends the message on to the target Queue Manager.</li>
</ul>
<p>
When the target Queue Manager receives the message, it performs the following tasks:
<ul>
<li>
Computes the hash value of the message using the algorithm specified in PROPID_M_HASH_ALG or <b>HashAlgorithm</b>.</li>
<li>
Extracts the public key from the certificate.</li>
<li>
Decrypts the digital signature using the public key, obtaining the hash value sent with the message.</li>
<li>
Compares the hash value computed by the Queue Manager to the hash value decoded from the digital signature.</li>
<li>
If the hash values are the same, the queue then verifies the sender identifier, setting <a href="mqprop_4a78.htm">PROPID_M_AUTHENTICATED</a> or <a href="mqactx_2g84.htm"><b>IsAuthenticated</b></a> to 1 if the sender identifier is valid.<p>
The sender identifier stored with the certificate is retrieved from <a href="msmqglos_3wv5.htm#_mq_active_directory_gly">Active Directory</a> and compared with the message's PROPID_M_SENDERID or <a href="mqactx_4l9g.htm"><b>SenderId</b></a> property. (This is why the certificate should be registered with MSMQ.)
</li>
<li>
If the hash values are not the same, the message is discarded and a negative acknowledgment is returned to the sending application if one was requested.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;MSMQ does not validate the external certificate. The receiving application performs any validation requirements on the certificate before using an authenticated message. MSMQ generates the digital signature of a message when it is sent and verifies the digital signature when the message is received, but does not validate the certificate itself.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Private Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_sending_private_messages_api"></a>Sending Private Messages</h3>
<p>
To send a <a href="msmqglos_3wvk.htm#_mq_private_message_gly">private message</a>, the sending application must set the privacy level (PROPID_M_PRIV_LEVEL) of the message, and, optionally, specify the encryption algorithm (PROPID_M_ENCRTYPTION_ALG) to be used to encrypt the body of the message.</p>
<p>
The functions used to send a private message are no different from those used to send other messages.</p>
<p>
When sending (and receiving) private messages, the application has no part in encrypting (or decrypting) the message. (For information on how MSMQ encrypts and decrypts messages, see <a href="msmq_guide_8cab.htm">Private Messages</a>.) </p>
<p>
<b>Note</b>&nbsp;&nbsp;Each MSMQ message can have no more than 4 MB of data.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To send a private message</h5>
<ol>
<li>
Define the <b>MQMSGPROPS</b> structure.<pre><code>#define NMSGPROPS 10             //Number of message properties.
  MSGPROPID aMsgPropId[NMSGPROPS];     
  PROPVARIANT aMsgPropVar[NMSGPROPS];
  HRESULT aMsgStatus[NMSGPROPS], hr;
  MQMSGPROPS MsgProps;
  DWORD PropIdCount = 0;
 </code></pre>
</li>
<li>
Specify the properties of the message. The example below specifies the label, body, privacy level, and encryption algorithm for the message. The value of PROPID_M_PRIV_LEVEL indicates that the message is private.<pre><code>//Set the label of the message (PROPID_M_LABEL).
aMsgPropId[PropIdCount] = PROPID_M_LABEL;    // Property identifier
aMsgPropVar[PropIdCount].vt = VT_LPWSTR;     // Type indicator
aMsgPropVar[PropIdCount].pwszVal = L"Private Message"; // Label
PropIdCount++;

//Set the body of the message (PROPID_M_BODY).
aMsgPropId[PropIdCount] = PROPID_M_BODY;     // Property identifier
aMsgPropVar[PropIdCount].vt = VT_VECTOR | VT_UI1;  // Type
aMsgPropVar[PropIdCount].caub.pElems = (LPBYTE)MESSAGE_BODY; //Body
aMsgPropVar[PropIdCount].caub.cElems = sizeof(MESSAGE_BODY); //Len
PropIdCount++;

//Set the privacy level of the message (PROPID_M_PRIV_LEVEL).
aMsgPropId[PropIdCount] = PROPID_M_PRIV_LEVEL; // Property ID
aMsgPropVar[PropIdCount].vt = VT_UI4;          // Type indicator
aMsgPropVar[PropIdCount].ulVal = MQMSG_PRIV_LEVEL_BODY;
PropIdCount++;

//Set the encryption algorithm (PROPID_M_ENCRYPTION_ALG).
aMsgPropId[PropIdCount] = PROPID_M_ENCRYPTION_ALG;  //Property ID
aMsgPropVar[PropIdCount].vt = VT_UI4;         //Type indicator
aMsgPropVar[PropIdCount].ulVal = CALG_RC4;    //Encryption alg
PropIdCount++;
    </code></pre>
</li>
<li>
Set the <b>MQMSGPROPS</b> structure.<pre><code>MsgProps.cProp = PropIdCount;         //Number of properties
MsgProps.aPropID = aMsgPropId;        //Ids of properties
MsgProps.aPropVar = aMsgPropVar;      //Values of properties
MsgProps.aStatus = aMsgStatus;        //Error reports
</code></pre>
</li>
<li>
Obtain the format name of the destination queue. The example below calls <a href="mqfunc_95t1.htm"><b>MQPathNameToFormatName</b></a> to obtain a format name from a known pathname.<pre><code>hr = MQPathNameToFormatName(L"machine_name\\queue_name",
                            szFormatNameBuffer,
                            &amp;dwFormatNameBufferLength);
</code></pre>
</li>
<li>
Call <a href="mqfunc_42hx.htm"><b>MQOpenQueue</b></a> to open the destination queue with send access.<pre><code>hr = MQOpenQueue(szFormatNameBuffer, MQ_SEND_ACCESS, 0, &amp;hQueue);
</code></pre>
</li>
<li>
Call <a href="mqfunc_8ip1.htm"><b>MQSendMessage</b></a> to send the message.<pre><code>hr = MQSendMessage(hQueue, &amp;MsgProps, NULL);
</code></pre>
</li>
<li>
Call <a href="mqfunc_19np.htm"><b>MQCloseQueue</b></a> to close the destination queue.<pre><code>hr = MQCloseQueue(hQueue);
    </code></pre>
</li>
</ol>
<h4>Example</h4>
<p>
This example sends a single private message to a known destination queue. Starting with the known pathname of the queue, the example translates the pathname into a format name, opens the destination queue with send access, sets the properties of the message (label, body, privacy level, and encryption algorithm), and then sends the message to the destination queue.</p>
<pre><code>#include &lt;windows.h&gt;
#include &lt;wincrypt.h&gt;                      //CrpytoAPI header file.
#include &lt;stdio.h&gt;
#include &lt;mq.h&gt;                            //MSMQ header file


int main(int arg, char *argv[])

{
  ////////////////////////////
  //  Define structures.
  ////////////////////////////

  // Define MQMSGPROPS
  #define NMSGPROPS 10             // Number of message properties.
  MSGPROPID aMsgPropId[NMSGPROPS];     
  PROPVARIANT aMsgPropVar[NMSGPROPS];
  HRESULT aMsgStatus[NMSGPROPS], hr;
  MQMSGPROPS MsgProps;
  DWORD PropIdCount = 0;

  // Define format name buffer
  DWORD dwFormatNameBufferLength = 256;
  WCHAR szFormatNameBuffer[256];

  // Define message body
  # define MESSAGE_BODY L"Private massage."

  // Define queue handle
  HANDLE hQueue;

  /////////////////////////////////////////
  // Specify the message properties. For   
  // private messages, PROPID_M_PRIV_LEVEL
  // must be specified.
  ////////////////////////////////////////
  
  // Set the label of the message (PROPID_M_LABEL).
  aMsgPropId[PropIdCount] = PROPID_M_LABEL;    // Property identifier
  aMsgPropVar[PropIdCount].vt = VT_LPWSTR;     // Type indicator
  aMsgPropVar[PropIdCount].pwszVal = L"Private Message"; // Label
  PropIdCount++;
  
  // Set the body of the message (PROPID_M_BODY).
  aMsgPropId[PropIdCount] = PROPID_M_BODY;     // Property identifier
  aMsgPropVar[PropIdCount].vt = VT_VECTOR | VT_UI1;  // Type indicator 
  aMsgPropVar[PropIdCount].caub.pElems = (LPBYTE)MESSAGE_BODY; // Body
  aMsgPropVar[PropIdCount].caub.cElems = sizeof(MESSAGE_BODY); // Len
  PropIdCount++;
  
  // Set the privacy level of the message (PROPID_M_PRIV_LEVEL).
  aMsgPropId[PropIdCount] = PROPID_M_PRIV_LEVEL; // Property ID
  aMsgPropVar[PropIdCount].vt = VT_UI4;          // Type indicator
  aMsgPropVar[PropIdCount].ulVal = MQMSG_PRIV_LEVEL_BODY; //Priv level
  PropIdCount++;
  
  // Set the encryption algorithm for the message (PROPID_M_ENCRYPTION_ALG).
  aMsgPropId[PropIdCount] = PROPID_M_ENCRYPTION_ALG;  // Property ID
  aMsgPropVar[PropIdCount].vt = VT_UI4;         // Type indicator
  aMsgPropVar[PropIdCount].ulVal = CALG_RC4;    // Encryption alg
  PropIdCount++;
    
  
  /////////////////////////////////
  // Set the MQMSGPROPS structure.
  /////////////////////////////////
  MsgProps.cProp = PropIdCount;         // Number of properties
  MsgProps.aPropID = aMsgPropId;        // IDs of properties
  MsgProps.aPropVar = aMsgPropVar;      // Values of properties
  MsgProps.aStatus = aMsgStatus;        // Error reports
  
  
  ////////////////////////////
  //Get format name of queue.
  ////////////////////////////
 
  hr = MQPathNameToFormatName(L"machine_name\\queue_name",
                              szFormatNameBuffer,
                                  &amp;dwFormatNameBufferLength);
  if (FAILED(hr))
  {
  fprintf(stderr, "Failed in MQPathNameToFormatName, error = 0x%x\n",hr);
  return -1;
  }
 
 
  ////////////////////////////
  // Open queue.
  ////////////////////////////
 
  hr = MQOpenQueue(szFormatNameBuffer, MQ_SEND_ACCESS, 0, &amp;hQueue);
  if (FAILED(hr))
  {
  fprintf(stderr, "Failed in MQOpenQueue, error = 0x%x\n",hr);
  return -1;
  }
  
  
  ////////////////////////////
  // Send message.
  ////////////////////////////
 
  hr = MQSendMessage(hQueue, &amp;MsgProps, NULL);
  if (FAILED(hr))
  {
   fprintf(stderr, "Failed in MQSendMessage, error = 0x%x\n",hr);
   return -1;
   }
 
  
  ////////////////////////////
  // Close queue.
  ////////////////////////////
  
  MQCloseQueue(hQueue);
  if (FAILED(hr))
  {
   fprintf(stderr, "Failed in MQCloseQueue, error = 0x%x\n",hr);
   return -1;
  }


  printf("The private message was sent successfully.\n");
  return 0;
 
} 

</code></pre>
<p>&nbsp;</p></body>
</HTML>

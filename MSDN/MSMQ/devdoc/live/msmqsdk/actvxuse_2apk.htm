<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reading Messages Asynchronously</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_reading_messages_asynchronously_activex"></a>Reading Messages Asynchronously</h3>
<p>
When reading messages asynchronously using ActiveX components, <a href="mqactx_10ha.htm"><b>EnableNotification</b></a> must be called for each message that is read from the queue. </p>
<p>
Typically, <b>EnableNotification</b> is called for the first message to be read and then again in the event handler after you read the arrived message. The subsequent calls to <b>EnableNotification</b> are needed to read the next message in the queue. Notification returns a single Arrived event for each message found in the queue.</p>
<p>
The following diagram shows the basic programming model used for reading messages asynchronously. It includes two calls to <b>EnableNotification</b>, plus a call to read the message from the queue.</p>
<p>
<img src="images/activex1.gif" border=0></p>
<p>
The model in the diagram shows that there are many ways to combine the two calls to <b>EnableNotification</b> and the call to read the message in the queue. For example, to purge all the messages in a queue, you could call <b>EnableNotification</b> with Cursor set to MQMSG_FIRST, call <b>Receive</b>, and call <b>EnableNotification</b> with Cursor set to MQMSG_FIRST.</p>
<p>
However, not all combinations necessarily make good programming sense. For example, it is possible to write an event handler that would only read every other message in the queue.</p>
<p>
The initial call to <a href="mqactx_10ha.htm"><b>EnableNotification</b></a> and the subsequent call from the event handler can tell MSMQ to check if a message is in the queue at all (<i>Cursor</i> = MQMSG_FIRST), if a message is at the current cursor location (<i>Cursor</i> = MQMSG_CURRENT), or if a message is at the next position after the cursor (<i>Cursor</i> = MQMSG_NEXT). The default is to trigger the Arrived event when MSMQ finds any message in the queue (<i>Cursor</i> = MQMSG_FIRST).</p>
<p>
The calls to read the message in the queue include: <a href="mqactx_80dh.htm"><b>Receive</b></a>, <a href="mqactx_699w.htm"><b>ReceiveCurrent</b></a>, <a href="mqactx_0otn.htm"><b>Peek</b></a>, <a href="mqactx_5i0k.htm"><b>PeekCurrent</b></a>, or <a href="mqactx_4igk.htm"><b>PeekNext</b></a>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Each call to <b>EnableNotification</b>, plus the calls to <b>ReceiveCurrent</b>, <b>PeekCurrent</b>, or <b>PeekNext</b>, provide numerous ways to navigate through the queue. Each call can affect how the implied cursor is moved through the queue.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To find a specific message asynchronously</h5>
<ol>
<li>
Call <a href="mqactx_61bi.htm"><b>Open</b></a> to open queue with receive access and call <a href="mqactx_10ha.htm"><b>EnableNotification</b></a> to start notification.<pre><code>Set queue = qInfo.Open(MQ_RECEIVE_ACCESS, MQ_DENY_NONE)
queue.EnableNotification Event:=Event, Cursor:=MQMSG_CURRENT, ReceiveTimeout:=1000
 </code></pre>
</li>
<li>
Write Arrived event handler. The following event handler calls <b>PeekCurrent</b> to look at the current message and then uses <b>EnableNotification</b> (<i>Cursor</i> = MQMSG_NEXT) to start notification with the cursor pointing to the next location.<pre><code>Private Sub TheEvent_Arrived(ByVal Queue As Object, ByVal Cursor As Long)
Dim msgrec As MSMQMessage
On Error GoTo Error_TheEvent_Arrived
    Set msgrec = queue.PeekCurrent(ReceiveTimeout:=0)
    If msgrec.AppSpecific = 34 Then
        Set msgrec = queue.ReceiveCurrent(ReceiveTimeout:=0)
        MsgBox "Found a message with AppSpecific = 34", vbOKOnly, "Inside the Arrived Event handler"
    Else
        queue.EnableNotification TheEvent, MQMSG_NEXT, 1000
    End If
    Exit Sub
Error_TheEvent_Arrived:
    MsgBox Err.Description + " in TheEvent_Arrived sub"
End Sub
 </code></pre>
</li>
<li>
Write ArrivedError event handler.<pre><code>Private Sub TheEvent_ArrivedError(ByVal Queue As Object, ByVal ErrorCode As Long, ByVal Cursor As Long)
    MsgBox Err.Description + " in TheEvent_ArrivedError sub"
End Sub
</code></pre>
</li>
</ol>
<h4>Example</h4>
<p>
This example sends several messages with different application-specific identifiers to a queue, and searches the queue for the message whose application-specific identifier equals 34.</p>
<pre><code>Option Explicit
Dim queue As MSMQQueue
Dim WithEvents TheEvent As MSMQEvent

Private Sub Form_Click()
Dim qinfo As New MSMQQueueInfo
Dim msgSend As New MSMQMessage
Dim i As Integer
On Error Resume Next
    Set TheEvent = New MSMQEvent
    qInfo.PathName = ".\AsyncSearchDemo"
    qInfo.Create
On Error GoTo Error_Form_Click
    Set queue = qinfo.Open(MQ_SEND_ACCESS, MQ_DENY_NONE)
    msgSend.AppSpecific = 24
    msgSend.Send queue
    msgSend.AppSpecific = 34
    msgSend.Send queue
    msgSend.AppSpecific = 44
    msgSend.Send queue
    msgSend.AppSpecific = 54
    msgSend.Send queue
    msgSend.AppSpecific = 64
    msgSend.Send queue
    queue.Close

'****************************
'* Open queue and start 
'* notification.
'****************************
    Set queue = qinfo.Open(MQ_RECEIVE_ACCESS, MQ_DENY_NONE)
    queue.EnableNotification Event:=Event, Cursor:=MQMSG_CURRENT, ReceiveTimeout:=1000
    Exit Sub
Error_Form_Click:
    MsgBox Err.Description
End Sub

'****************************
'* Define Arrived event handler.
'****************************
Private Sub TheEvent_Arrived(ByVal Queue As Object, ByVal Cursor As Long)
Dim msgrec As MSMQMessage
On Error GoTo Error_TheEvent_Arrived
    Set msgrec = queue.PeekCurrent(ReceiveTimeout:=0)
    If msgrec.AppSpecific = 34 Then
        Set msgrec = queue.ReceiveCurrent(ReceiveTimeout:=0)
        MsgBox "Found a message with AppSpecific = 34", vbOKOnly, "Inside the Arrived Event handler"
    Else
        queue.EnableNotification TheEvent, MQMSG_NEXT, 1000
    End If
    Exit Sub
Error_TheEvent_Arrived:
    MsgBox Err.Description + " in TheEvent_Arrived sub"
End Sub

Private Sub TheEvent_ArrivedError(ByVal Queue As Object, ByVal ErrorCode As Long, ByVal Cursor As Long)
    MsgBox Err.Description + " in TheEvent_ArrivedError sub"
End Sub
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

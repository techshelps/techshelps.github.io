<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Messages that Request Acknowledgments</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_mq_sending_messages_that_request_acknowledgments_api"></a>Sending Messages that Request Acknowledgments</h3>
<p>
To request <a href="msmqglos_3wv5.htm#_mq_acknowledgment_message_gly">acknowledgment messages</a>, the sending application must indicate the type of acknowledgment(s) it wants to receive, and the <a href="msmqglos_3wv5.htm#_mq_administration_queue_gly">administration queue</a> must indicate where the acknowledgment message will be placed. It can receive positive, negative, or a combination of positive and negative acknowledgment messages by setting <a href="mqprop_9411.htm">PROPID_M_ACKNOWLEDGE</a> and attaching it to the messages it sends.</p>
<p>
Acknowledgment messages are generated by MSMQ or by <a href="msmqglos_3wv7.htm#_mq_connector_application_gly">connector applications</a> (when sending messages to <a href="msmqglos_3wva.htm#_mq_foreign_queue_gly">foreign queues</a>) and are returned to the administration queue specified by <a href="mqprop_0yp1.htm">PROPID_M_ADMIN_QUEUE</a>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Each MSMQ message can have no more than 4 MB of data.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To send a message requesting acknowledgment messages</h5>
<ol>
<li>
Call <a href="mqfunc_42hx.htm"><b>MQOpenQueue</b></a> to open the queue with send access.<pre><code>//////////////////////////////
// Open the destination queue
// with send access.
//////////////////////////////

QUEUEHANDLE hQueue;
hr = MQOpenQueue(szFormatName, MQ_SEND_ACCESS, 0, &amp;hQueue);
if (FAILED(hr))
{
    fprintf(stderr, "Failed in MQOpenQueue, error = 0x%x\n", hr);
    return -1;
}
</code></pre>
</li>
<li>
Set PROPID_M_ACKNOWLEDGE. This property specifies the type of acknowledgment messages that will be sent. The example below requests full-receive acknowledgments.<pre><code>/////////////////////////////
// Set PROPID_M_ACKNOWLEDGE.
/////////////////////////////
aPropId[PropIdCount] = PROPID_M_ACKNOWLEDGE;          //PropId
aVariant[PropIdCount].vt = VT_UI1;                    //Type
aVariant[PropIdCount].bVal = MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE;//Value
 
PropIdCount++;
 </code></pre>
</li>
<li>
Set PROPID_M_ADMIN_QUEUE. This property specifies the administration queue where the acknowledgment messages will be sent.<pre><code>/////////////////////////////////////////
// Set the PROPID_M_ADMIN_QUEUE property.
/////////////////////////////////////////
aPropId[PropIdCount] = PROPID_M_ADMIN_QUEUE;         //PropId
aVariant[PropIdCount].vt = VT_LPWSTR;                //Type
aVariant[PropIdCount].pwszVal = szwAdminFormatName;  //An already obtained format name of the administration queue.
 
PropIdCount++;
 </code></pre>
</li>
<li>
Set other message properties, such as the message's body and its label.</li>
<li>
Set the <b>MQMSGPROPS</b> structure.<pre><code>////////////////////////////////
// Set the MQMSGPROPS structure.
////////////////////////////////
MsgProps.cProp = PropIdCount;       //Number of properties.
MsgProps.aPropID = aPropId;         //Ids of properties.
MsgProps.aPropVar = aVariant;       //Values of properties.
MsgProps.aStatus  = NULL;           //No Error report.
 </code></pre>
</li>
<li>
Call <a href="mqfunc_8ip1.htm"><b>MQSendMessage</b></a> to send the message to the queue.<pre><code>/////////////////
// Send message.
/////////////////
hr = MQSendMessage(
     hQueue,                  // Handle to the Queue.
     &amp;MsgProps,               // Message properties to be sent.
     MQ_NO_TRANSACTION        // No transaction
     );
 </code></pre>
</li>
</ol>
<h4>Example</h4>
<p>
The following example sends a message requesting full-receive acknowledgments.</p>
<pre><code>MQMSGPROPS MsgProps;
PROPVARIANT aVariant[10];
MSGPROPID aPropId[10];
DWORD PropIdCount = 0;
 
HRESULT hr;
 
QUEUEHANDLE hQueue;
 
  //////////////////////////////
  // Open the destination queue
  // with send access.
  //////////////////////////////
  
  QUEUEHANDLE hQueue;
  hr = MQOpenQueue(szFormatName, MQ_SEND_ACCESS, 0, &amp;hQueue);
  if (FAILED(hr))
  {
      fprintf(stderr, "Failed in MQOpenQueue, error = 0x%x\n", hr);
      return -1;
  }
    
/////////////////////////////
// Set PROPID_M_ACKNOWLEDGE.
/////////////////////////////
aPropId[PropIdCount] = PROPID_M_ACKNOWLEDGE;          //PropId
aVariant[PropIdCount].vt = VT_UI1;                    //Type
aVariant[PropIdCount].bVal = MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE;//Value
 
PropIdCount++;
 
/////////////////////////////////////////
// Set the PROPID_M_ADMIN_QUEUE property.
/////////////////////////////////////////
aPropId[PropIdCount] = PROPID_M_ADMIN_QUEUE;         //PropId
aVariant[PropIdCount].vt = VT_LPWSTR;                //Type
aVariant[PropIdCount].pwszVal = szwAdminFormatName;  //An already obtained format name of the administration queue.
 
PropIdCount++;
 
////////////////////////////////////////
// Set other message properties, such
// as PROPID_M_BODY and PROPID_M_LABEL.
///////////////////////////////////////
 
////////////////////////////////
// Set the MQMSGPROPS structure.
////////////////////////////////
MsgProps.cProp = PropIdCount;       //Number of properties.
MsgProps.aPropID = aPropId;         //Ids of properties.
MsgProps.aPropVar = aVariant;       //Values of properties.
MsgProps.aStatus  = NULL;           //No Error report.
 
/////////////////
// Send message.
/////////////////
hr = MQSendMessage(
     hQueue,                  // handle to the Queue.
     &amp;MsgProps,               // Message properties to be sent.
     MQ_NO_TRANSACTION        // No transaction
     );
 
if (FAILED(hr))
   {
    //
    // Handle error condition
    //
    }
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html><hEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Content to the Browser</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 

<META NAME="DESCRIPTION" CONTENT="Explains how to control the response returned to a browser, including buffering the content.  Briefly covers sending files from the browser to the server.">

<META NAME="MS-HAID"CONTENT="Sending Content to the Browser">

</head>

<body bgcolor="#FFFFFF"><font face="Verdana,Arial,Helvetica">	

<h1><a name="H1_37769139">Sending Content to the Browser</a></h1>

<p>As an ASP script is processed, any text or graphics not enclosed within ASP delimiters or &lt;SCRIPT&gt;  tags is simply returned to the browser.  You can also explicitly send content to the browser by using the <strong>Response</strong> object.</p>

<h2><a name="H2_37769829">Sending Content</a></h2>

<p>To send content to the browser from within ASP delimiters or from a procedure, use the <strong>Write</strong> method of the <strong>Response</strong> object.  For example, the following statement sends a different greeting to the user depending on whether the user has visited the page before:</p>

<pre><font face="courier" size="3">&lt;% 
If FirstTime = True Then 
  Response.Write "&lt;H3 ALIGN=CENTER&gt;Welcome to the Overview Page&lt;/H3&gt;"
Else
  Response.Write "&lt;H3 ALIGN=CENTER&gt;Welcome Back to the Overview Page&lt;/H3&gt;" 
End If 
%&gt; </font></pre>

<p>Outside of a procedure, you do not have to use <strong>Response.Write</strong> to send content back to the user. Content that is not within scripting delimiters is sent directly to the browser, which formats and displays this content accordingly. For example, the following script produces exactly the same output as the previous script:</p>

<pre><font face="courier" size="3">&lt;H3 ALIGN=CENTER&gt; 
&lt;% If FirstTime Then %&gt; 
Welcome to the Overview Page. 
&lt;% Else %&gt; 
Welcome Back to the Overview Page. 
&lt;% End If %&gt; 
&lt;/H3&gt; </font></pre>

<p>Use intermingled script commands and HTML when you just need to return output once or when it is more convenient to add statements to existing HTML text.  Use <strong>Response.Write</strong> when you do not want to break up a statement with delimiters or when you want to build the string that is returned to the browser.  For example, you could construct a string of text that builds a table row with values sent by an HTML form:</p>

<pre><font face="courier" size="3">Response.Write "&lt;TR&gt;&lt;TD&gt;" &amp; Request.Form("FirstName") _
 &amp; "&lt;/TD&gt;&lt;TD&gt;" &amp; Request.Form("LastName") &amp; "&lt;/TD&gt;&lt;/TR&gt;"</font></pre>

<p><strong>Request.Form</strong> returns the values sent from an HTML form (see <a href="iiwaform.htm">Working with HTML Forms</a>).  The ampersand character (&amp) is the string continuation character for VBScript.</p>

<h2><a name="H2_37772109">Setting the Content Type</a></h2>

<p>When the Web server returns a file to a browser, it tells the browser what type of content is contained in the file.  This enables the browser to determine whether it can display the file itself or whether it has to call another application.  For example, if the Web server returns a Microsoft Excel spreadsheet, the browser must be able to start a copy of Microsoft Excel to display the page.  The Web server recognizes file types by mapping the file name extension to a list of MIME types.</p>

 <p>You can use the <strong>ContentType</strong> property of the <strong>Response</strong> object to set the HTTP content type string for the content you send to a user.  For example, the following command sets the content type for channel definitions:</p>

<pre><font face="courier" size="3">&lt;% Response.ContentType = "application/x-cdf" %&gt; </font></pre>

<p>For more information about channels, see &#147;Creating Dynamic Channels,&#148; in this topic.</p>

<p>Other common content types are text/plain (for content returned as text instead of interpreted HTML statements), text/gif (for GIF images), and video/quicktime (for movies in the Apple QuickTime&#174; format).  A set of standard MIME types has been defined; in addition, a Web server or Web browser may support custom MIME types.  To see the content types supported by your Microsoft Web server, use Internet Service Manager to open the property sheets for your Web site, click the <strong>HTTP Headers</strong> tab, and then click the <strong>File Types</strong> tab.</p>

<h2><a name="H2_37773741">Redirecting the Browser</a></h2>

<p>Instead of sending content to a user, you can redirect the browser to another URL with the <strong>Redirect</strong> method. For example, if you want to make sure users have entered your application from a home page so that they receive a customer ID, you can check to see if they have a customer ID;  if they do not, you can redirect them to the home page.</p>

<pre><font face="courier" size="3">&lt;%
If Session("CustomerID") = 0 Then
  Response.Redirect "homepage.asp" 
End If
%&gt; </font></pre>

<p>Unless you have buffering turned on, you must redirect the browser before any content or headers are returned to the browser.  Place the <strong>Response.Redirect</strong> statement at the top of the page, before the &lt;HTML&gt;  tag, to ensure that nothing has been returned to the browser.  If you use <strong>Response.Redirect</strong> after content or headers have been returned to the browser, you will see an error message.</p>

<p>If you want to use <strong>Response.Redirect</strong> from the middle of a page, use it along with the <strong>Response.Buffer</strong> property, as explained in the following section.</p>

<h2><a name="H2_37774938">Buffering Content</a></h2>

<p>By default, the Web server returns HTML and the results of processing scripts as it processes the ASP page.  However, you can set the <strong>Buffer</strong> property of the <strong>Response</strong> object so that all of the server script commands on a page are processed before any content is sent to the user.</p>

<p>You can use buffering to determine at some point in the processing of a page that you do not want to send previous content to a user. You can, instead, redirect the user to another page with the <strong>Redirect</strong> method of the <strong>Response</strong> object, or clear the buffer with the <strong>Clear</strong> method of the <strong>Response</strong> object and send different content to the user. The following example uses both of these methods.</p>

<pre><font face="courier" size="3">&lt;% 
'Turn on buffering.  This statement must appear before the &lt;HTML&gt; tag.
Response.Buffer = True %&gt;
&lt;html&gt;
&lt;body&gt;
.
.
.
&lt;%
If Request("FName") = "" Then
  Response.Clear
  Response.Redirect "/samples/test.html"
Else
  Response.Write Request("FName")
End If
%&gt;
&lt;/body&gt;
&lt;/html&gt;</font></pre>

<p>You could also use <strong>Response.Buffer</strong> to prevent the Web server from returning the HTTP header before a script can modify the header.  Certain properties and methods, such as <strong>Response.Expires</strong> and <strong>Response.Redirect,</strong> modify the HTTP header.</p>

<p>When you set the <strong>Buffer </strong> property in a script and do not call the <strong>Flush</strong> method in the same script, the server will maintain Keep-Alive requests made by the client. The benefit of writing scripts in this manner is that server performance is improved because the server does not have to create a new connection for each client request (assuming that the server, client, and any proxy servers all support Keep-Alive requests). However, a potential drawback to this approach is that buffering prevents any of the response from being displayed to the user until the server has finished all script processing for the current .asp file. For long or complicated scripts, the user might be forced to wait a considerable amount of time before seeing the page.</p>

<p>Buffering is turned off by default  for ASP applications.  You can use Internet Service Manager to turn on buffering for an entire ASP application.</p>

<h2><a name="H2_37777557">Allowing Proxy Servers to Cache Pages</a></h2>

<p>Your application may be sending pages to a client through a proxy server.  A <em>proxy server</em> acts on behalf of client browsers  to request pages from Web sites.  The proxy server caches HTML pages so that repeated requests for the same page can be returned quickly and efficiently to the browsers.  Having the proxy server  process requests and cache pages reduces the load on the network and on the Web server.</p>

<p>While caching works well for many HTML pages, it often does not work well for ASP pages that contain dynamically generated information.  For example, pages that report stock market prices or display inventory for a high-volume business need to provide timely information.  Information that is even one hour old might not be accurate enough.  If your application returns personalized information, such as a custom home page, you want to ensure that no user sees another user's personal information.</p>

<p>By default, ASP instructs proxy servers not to cache the ASP page itself (although images, image maps, applets, and other items referenced from the page are cached).  You can allow caching for certain pages by using the <strong>Response.CacheControl</strong>  property  to set the Cache-Control HTTP header field.  The default value of <strong>Response.CacheControl</strong> is the string "Private", which prevents proxy servers from caching the page.  To allow caching, set the Cache-Control header field to Public:</p>

<pre><font face="courier" size="3">&lt;% Response.CacheControl = "Public" %&gt;</font></pre>

<p>Because HTTP headers must be sent to the browser or proxy before any page content is sent, either put the <strong>Response.CacheControl</strong> property before any HTML tags or use <strong>Response.Buffer</strong> to buffer the page.</p>

<p>The Cache-Control header field is part of the HTTP 1.1 specification.  ASP pages are not cached on proxies that support only HTTP 1.0 because no Expires header field is sent.</p>

<h2><a name="H2_37779593">Preventing Browsers from Caching Pages</a></h2>

<p>Each browser version has its own rules for determining whether to cache pages.  To prevent a browser from caching ASP pages, use <strong>Response.Expires</strong> to set the Expires header:</p>

<pre><font face="courier" size="3">&lt;% Response.Expires = 0 %&gt;</font></pre>

<p>A value of 0 forces cached pages to expire immediately.  Because HTTP headers must be sent to the browser  before any page content is sent, either put the <strong>Response.Expires</strong> property before any HTML tags or use <strong>Response.Buffer</strong> to buffer the page.</p>

<h2><a name="H2_37780216">Creating Dynamic Channels</a></h2>

<p>Internet Explorer&nbsp;4.0 introduces a new feature that Web designers can use to group Web pages with a common theme into <em>channels</em>.  In the browser, channels are presented on a channel bar; users access a channel by clicking its icon.  Channels are automatically updated in the background; users do not need to visit your site again to get the latest pages downloaded to their browsers.  Channels provide a quick and intuitive way for users to see groups of related Web pages that are automatically updated.</p>

<p>Using ASP, you can write scripts to gather user preferences and then dynamically create channels.  A channel definition file (.cdf) establishes the organization and scheduling of the channel contents.  Commands in the .cdf file use a syntax similar to HTML tags, so they are easy to learn and to generate from a script.  When you write an ASP script to create a channel definition file, give the script a .cdx  extension.  When ASP reads a file with a .cdx extension, it automatically sends the application/x-cdf content type, which tells the browser to interpret the bytes as channel definitions.  If you do not use the .cdx extension, your script must manually set the content type  to application/x-cdf by using <strong>Response.ContentType</strong>.</p>

<p>Here is an example of how you might use channels.  The following HTML form asks the user to select channels.  When submitted, the form calls a script in a .cdx file to create the channel definitions.</p>

<pre><font face="courier" size="3">&lt;P&gt; Choose the channels you want. &lt;/P&gt;
&lt;FORM METHOD="POST" ACTION="chan.cdx"&gt;
&lt;P&gt;&lt;INPUT TYPE=CHECKBOX NAME=Movies&gt; Movies
&lt;P&gt;&lt;INPUT TYPE=CHECKBOX NAME=Sports&gt; Sports
&lt;P&gt;&lt;INPUT TYPE="SUBMIT" VALUE="SUBMIT"&gt;
&lt;/FORM&gt;</font></pre>

<p>The script in Chan.cdx builds the channel definitions based on the form values submitted with the request.</p>

<pre><font face="courier" size="3">&lt;% If Request.Form("Movies") &lt;&gt; "" Then %&gt;
  &lt;CHANNEL&gt;
    <em>channel definition statements for the movie pages</em>
  &lt;/CHANNEL&gt;
&lt;% End If %&gt;

&lt;% If Request.Form("Sports") &lt;&gt; "" Then %&gt;
  &lt;CHANNEL&gt;
    <em>channel definition statements for the sports pages</em>
  &lt;/CHANNEL&gt;
&lt;% End If %&gt;</font></pre>

<p>For information on channels and channel definition files, see the Internet Explorer page on microsoft.com (http://www.microsoft.com/ie).  For more information on working with forms, see <a href="iiwaform.htm">Working with HTML Forms</a>.  If you have installed the Exploration Air sample site, you can see an example of using ASP to create dynamic channels.</p>

<h2><a name="H2_37783243">Sending Files to the Server</a></h2>

<p>A browser can use the Posting Acceptor application to send files to the Web server. When Posting Acceptor uploads files, it sends URL-encoded form fields that list the name and location of each received file.  You can add a postprocessing URL to the scripts that upload files to call an ASP script to process these field names.  For example, you could write a script that automatically sends e-mail with the names and locations of the files to the system administrator.</p>

<hr class="iis" size="1">


</font>
</body>
</html>


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Managing Sessions</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 


<META NAME="DESCRIPTION" CONTENT="This topic contains information about using ASP to remember user information between visits to a Web application.  One of the challenges of writing a Web application is the difficulty of maintaining information about a user as the user jumps from page to page in the application.  HTTP is a stateless protocol, which means that each request for a page is treated as an independent request.  The Web server retains no knowledge of previous requests for other pages, even if they occurred only seconds prior to the current request.  However, ASP manages user sessions so that an application can access information that remains consistent throughout a single session.">

<META NAME="MS-HAID"CONTENT="Managing Sessions">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">


<h1><a name="H1_37683573">Managing Sessions</a></h1>

<p>One of the challenges to developing a successful Web application is maintaining user information over the course of a visit, or <em>session</em>, as the user jumps from page to page in an application.  HTTP is a stateless protocol, meaning that your Web server treats each HTTP request for a page as an independent request; the server retains no knowledge of previous requests, even if they occurred only seconds prior to a current request.  This inability to remember previous requests means that it is this difficult to write applications, such as an online catalog, where the application may need to track the catalog items a user has selected while jumping between the various pages of the catalog.</p>

<p>ASP provides a unique solution for the problem of managing session information. Using the ASP <strong>Session</strong> object and a special user ID generated by your server, you can create clever applications that identify each visiting user and collect information that your application can then use to track user preferences or selections.</p>

<p>ASP assigns the user ID by means of an HTTP <em>cookie</em>, which is a small file stored on the user's browser. So, if you are creating an application for browsers that do not support cookies, or if your customers might set their browsers to refuse cookies, you should should not use the ASP's session management features.</p>

<p>You may also need to write scripts that are run whenever an application starts up or shuts down.</p>

<h2><a name="H2_37685211">Starting and Ending Sessions</a></h2>

<p>A session can begin in three ways:</p>

<ul>
<li>A new user requests a URL that identifies an .asp file in an application, and the Global.asa file for that application includes a Session_OnStart procedure.</li>
<li>A user stores a value in the <strong>Session</strong> object.</li>
<li>A user requests an .asp file in an application, and the application&#146;s Global.asa file uses the &lt;OBJECT&gt; tag to instantiate an object with session scope. See <a href="iiwacomu.htm">Using Components</a> for more information about using the &lt;OBJECT&gt; tag to instantiate an object.</li>
</ul>

<p>A session automatically ends if a user has not requested or refreshed a page in an application for a specified period of time. This value is 20 minutes by default. You can change the default for an application by setting the <strong>Session Timeout</strong> property on the <strong>Application Options</strong> property sheet in Internet Service Manager. Set this value according to the requirements of your Web application and the memory capacity of your server.  For example, if you expect that users browsing your Web application will linger on each page for only a few minutes, then you may want to significantly reduce the session timeout value from the default.  A long session timeout period can result in too many open sessions, which can strain your server's memory resources.</p>  

<p>If, for a specific session, you want to set a timeout interval that is shorter than the default application timeout, you can also set the <strong>Timeout </strong> property of the <strong>Session </strong> object. For example, the following script sets a timeout interval of 5&nbsp;minutes.</p>

<pre><font face="courier" size="3">&lt;%  Session.Timeout = 5  %&gt; </font></pre>

<p>You can also set the timeout interval to be greater than the default value, the value determined by the <strong>Session Timeout</strong> property.</p>

<p>You can also explicitly end a session with the <strong>Abandon</strong> method of the <strong>Session </strong> object. For example, you can provide a Quit button on a form with the ACTION parameter set to the URL of an .asp file that contains the following command.</p>

<pre><font face="courier" size="3">&lt;% Session.Abandon %&gt; </font></pre>


<h2><a name="H2_37687121">About SessionID and Cookies</a></h2>

<p>The first time a user requests an .asp file within a given application, ASP generates a <em>SessionID</em>. A number produced by a complex algorithm, the SessionID uniquely identifies each user's session.  At the beginning of a new session, the server stores the Session ID in the user's Web browser as a cookie.</p> 

<p>The SessionID cookie is similar to a locker key in that, as the user interacts with an application during a session, ASP can store information for the user in a "locker" on the server. The user's SessionID cookie, transmitted in the HTTP request header, enables access to this information in the way that a locker key enables access to a locker's contents. Each time that ASP receives a request for a page, it checks the HTTP request header for a SessionID cookie.</p>

<p>After storing the SessionID cookie in the user's browser, ASP reuses the same cookie to track the session, even if the user requests another .asp file, or requests an .asp file running in other application.  Likewise, if the user deliberately abandons or lets the session timeout, and then proceeds to request another .asp file,  ASP begins a new session using the same cookie. The only time a user receives a new SessionID cookie is when the server administrator restarts the server, thus clearing the SessionID settings stored in random access memory, or the user restarts the Web browser.</p>  

<p>By reusing the SessionID cookie, ASP minimizes the number of cookies sent to your browser. Additionally, if you determine that your ASP application does not require session management, you can prevent ASP from tracking session and sending SessionID cookies to users.</p> 

<p>ASP will not send the session cookies under the following conditions:</p>

<ul>
<li>Applications with the session state disabled.</li>
<li>An ASP page is defined as sessionless, that is, a page containing the <font face="COURIER" size="3">&lt;%@ EnableSessionState=False %&gt;</font> tag.  For more information, see <a href="#sessionlessasp">Sessionless ASP Pages</a>.</li>
</ul>

<p>You should also note that SessionID cookies are not intended to provide a permanent means for tracking users across multiple visits to a Web site.  The SessionID information stored in the server computer's memory can be easily lost.  If you want track users who visit your Web application over a longer periods, you must create a user identification by storing a special cookie in a user's Web browser and saving the cookie information to database.  For more information, see <a href="#usingcookies">Using Cookies.</a></p>

<h2><a name="sessionobject">Storing Data in the Session Object</a></h2>

<p>The <strong>Session</strong> object provides a dynamic, associative array into which you can store information.  You can store scalar variables and object variables into the <strong>Session</strong> object.</p>

<p>To store a variable in the <strong>Session</strong> object, assign a value to a named entry in the <strong>Session</strong> object.  For example, the following command stores two new variables in the <strong>Session</strong> object:</p>

<pre><font face="courier" size="3">&lt;% 
Session("FirstName") = "Jeff"
Session("LastName") = "Smith" 
%&gt;</font></pre>

<p>To retrieve information from the <strong>Session</strong> object, access the named entry.  For example, to display the current value of Session("FirstName"):</p>

<pre><font face="courier" size="3">Welcome &lt;%= Session("FirstName") %&gt;</font></pre>

<p>You can store user preferences in the <strong>Session</strong> object, and then access that preference to determine what page to return to the user.  For example, you can allow a user to specify a text-only version of your content in the first page of the application and apply this choice on all subsequent pages that the user visits in this application.</p>

<pre><font face="courier" size="3">&lt;% If Session("ScreenResolution") = "Low" Then %&gt; 
This is the text version of the page.
&lt;% Else %&gt; 
This is the multimedia version of the page.
&lt;% End If %&gt; </font></pre>

<p>You can also store an object instance in the <strong>Session</strong> object, although doing so can affect server performance.  For more information, see <a href="iiwaobu.htm">Setting Object Scope</a>.</p>

<h2><a name="H2_37691818">Managing Sessions for Web Farms</a></h2>

<p>ASP session information is stored on the Web server.   A browser must request pages from the same Web server for scripts to access session information.  On Web farms (where many Web servers share the responsibility for responding to user requests) user requests will not always be routed to the same server.  Instead, special software distributes all requests for the site URL to whichever server is free, a process called <em>load balancing</em>.  Load balancing makes it difficult to maintain session information on a Web farm.</p>

<p>To use ASP session management on a load-balanced site, you must ensure that all requests within a user session are directed to the same Web server.  One way to do this is to write a <strong>Session_OnStart</strong> procedure that uses the <strong>Response</strong> object to redirect the browser to the specific Web server on which the user's session is running.  If all links in your application pages are relative, future requests for a page will be routed to the same server.</p>

<p>For example, a user might access an application by requesting the general URL for a site: http://www.microsoft.com.  The load balancer routes the request to a specific server, for example, server3.microsoft.com.  ASP creates a new user session on that server.  In the <strong>Session_OnStart</strong> procedure, the browser is redirected to the specified server:</p>

<pre><font face="courier" size="3">&lt;% Response.Redirect("http://server3.microsoft.com/webapps/firstpage.asp") %&gt;</font></pre>

<p>The browser will request the specified page, and all subsequent requests will be routed to the same server.</p>

<h2><a name="usingcookies">Using Cookies</a></h2>

<p>A cookie is a token that the Web server embeds in a user's Web browser to identify the user.  The next time the same browser requests a page, it sends the cookie it received from the Web server.   Cookies allow a set of information to be associated with a user. ASP scripts can both get and set the values of cookies by using the <strong>Cookies</strong> collection of the <strong>Response</strong> and <strong>Request</strong> objects.</p>

<h3><a name="H3_37694204">Setting Cookies</a></h3>

<p>To set the value of a cookie, use <strong>Response.Cookies</strong>. If the cookie does not already exist, <strong>Response.Cookies</strong> creates a new one.  For example, to send a cookie name ("planet") with an associated value ("Mars") to the browser, use the following command, which must appear on your Web page before the &lt;HTML&gt; tag:</p>

<pre><font face="courier" size="3">&lt;% Response.Cookies("planet")="Mars" %&gt;</font></pre>

<p>If you only want a cookie to be used during the current user session, then sending the cookie to the browser is all you need to do.  However, if you want to identify a user even after he or she has stopped and restarted the browser, you must force the browser to store the cookie in a file on the client computer's hard disk.  To save the cookie, use the <strong>Expires</strong> attribute for <strong>Response.Cookies</strong> and set the date to some date in the future:</p>

<pre><font face="courier" size="3">&lt;%
Response.Cookies("planet") = "Mars" 
Response.Cookies("planet").Expires = "January 1, 1999" 
%&gt;</font></pre>

<p>A cookie can have multiple values; such a cookie is called an <em>indexed cookie</em>.  Each cookie value is assigned a key; you can set a particular cookie key value.  For example:</p>

<pre><font face="courier" size="3">&lt;% Response.Cookies("planet")("Mars")="SpaceMissions" %&gt; </font></pre>


<p>If an existing cookie has key values but <strong>Response.Cookies</strong> does not specify a key name, then the existing key 
values are deleted. Similarly, if an existing cookie does not have key values but <strong>Response.Cookies</strong> specifies key 
names and values, the existing value of the cookie is deleted and new key-value pairs are created.</p>

<h3><a name="H3_37696008">Getting Cookies</a></h3>

<p>To get the value of a cookie, use the <strong>Request.Cookies</strong> collection. For example, if the user HTTP request sets 
<code><font face="courier" size="3">planet=Mars</font></code>, then the following statement retrieves the value <code><font face="courier" size="3">Mars</font></code>:</p>

<pre><font face="courier" size="3">&lt;%= Request.Cookies("planet") %&gt;</font></pre>

<p>Similarly, to retrieve a key value from an indexed cookie, use the key name. For example, if a user sends the following HTTP request:</p>

<pre><font face="courier" size="3">planet=Mars&amp;Mars=SpaceMissions</font></pre>

<p>The following script command returns the value <code><font face="courier" size="3">SpaceMissions</font></code>:</p>

<pre><font face="courier" size="3">&lt;%= Request.Cookies("planet")("Mars") %&gt;</font></pre>

<h3><a name="settingcookiepaths">Setting Cookie Paths</a></h3>

<p>Each cookie stored by ASP on the user's Web browser contains path information. When the browser requests a file stored in the same location as the path specified in the cookie, the browser automatically forwards the cookie to the server. By default, cookie paths correspond to the name of the application containing the .asp file that originally generated the cookie. For example, if an .asp file, residing in an application called <em>UserApplication</em>, generates a cookie, then each time a user's Web browser retrieves any file residing in that application, the browser will forward the cookie, in addition to any other cookies containing the path <em>/UserApplication</em>.</p>

<p>To specify a path for a cookie other than the default application path, you can use the ASP <strong>Response.Cookies</strong> collection's <strong>Path</strong> attribute .  For example, the following script assigns the path SalesApp/Customer/Profiles/ to a cookie called <font face="COURIER">Purchases</font>:</p>

<pre><font face="courier" size="3">&lt;%
Response.Cookies("Purchases") = "12" 
Response.Cookies("Purchases").Expires = "January 1, 2001" 
Response.Cookies("Purchases").Path = "/SalesApp/Customer/Profiles/"
%&gt;</font></pre>

<p>Whenever the Web browser containing the <font face="COURIER">Purchases</font> cookie requests a file residing in the path /SalesApp/Customer/Profiles/ or in any of it subdirectories, the browser forwards the cookie to the server.</p>

<p>Many Web browsers, including Microsoft Internet Explorer version&nbsp;4.0 and Netscape browsers, preserve the case of the cookie path. This means that if the path of a requested file differs from the case of the stored cookie path, the browser will not send the cookie to the server. For example, to ASP, the virtual directories /TRAVEL and /travel are the same ASP application, to a browser that preserves the case of a URL, /TRAVEL and /travel are two different applications.  Make sure all URLs to .asp files have the same case to ensure that the user's browser forwards stored cookies.</p> 

<p>If you choose, you can use the following statement to set the cookie path so that the user's Web browser will forward a cookie whenever the browser requests a file from your server, regardless of application or path:</p>

<pre><font face="COURIER">Response.Cookies("Purchases").Path = "/"</font></pre>

<p>Note, however, that forwarding cookies to the server, without distinguishing between applications, raises a potential security concern if the cookies contain sensitive information that should not be accessible outside of a specific application.</p>

<h3><a name="H3_37697847">Preserving State without Cookies</a></h3>

<p>Not all browsers support cookies.  Even with browsers that do support cookies, some users prefer to turn off cookie support.  If your application needs to be responsive to browsers that don't support cookies, you cannot use ASP session management.</p>

<p>If you don't use ASP session management, you must write your own mechanism to pass information from page to page in your application.  There are two general ways to do this:</p>

<ul>
<li>Add parameters to a URL's query string.  For example:</li>

<pre><font face="courier" size="3">http://MyServer/MyApp/start.asp?name=Jeff</font></pre>

<p>Some browsers, however, will discard any explicit parameters passed in a query string if a form is submitted with the GET method.</p>

<li>Add hidden values to a form.  For example, the following HTML form contains a hidden control, which does not appear on the actual form and remains invisible in the user's Web browser. The form passes a user identification value, in addition to the information supplied by the user,  by using the HTTP POST method.</li>

<pre><font size="3" face="courier">&lt;FORM METHOD="POST" ACTION="/scripts/inform.asp"&gt;
&lt;INPUT TYPE="text" NAME="city" VALUE=""&gt;
&lt;INPUT TYPE="text" NAME="country" VALUE =""&gt;
&lt;INPUT TYPE="hidden" NAME="userid" VALUE= &lt;%=UserIDNum(i) %&gt;
&lt;INPUT TYPE="submit"  VALUE="Enter"&gt;</font></pre>

<p>This method requires all link destinations that pass user information to be coded as HTML forms.</p>

</ul>

<p>If you are not using ASP session management, you should turn off session support for your application.  When sessions are enabled, ASP sends a SessionID cookie to each browser that requests a page.  To turn off session support, clear the <strong>Enable Session State</strong> check box on the <strong>Application Options</strong> property sheet in Internet Service Manager.</p> 

<h2><a name="sessionlessasp">Sessionless ASP Pages</a></h2>

<p>ASP also offers you the ability to create sessionless pages, which you can use delay the creation of sessions until a user visits an ASP page requiring session tracking.</p>  

<p>Sessionless pages do <em>not</em> carry out the following:</p>

<ul>
<li>Execute <strong>Session_OnStart </strong>procedures.</li>
<li>Send session ID cookies.</li>
<li>Create <strong>Session</strong> objects.</li>
<li>Access built-in session objects or session scope objects created with the &lt;OBJECT&gt; tag.</li>
<li>Serialize execution with other session requests.</li>
</ul>

<p>To configure an .asp file as sessionless, use the following:</p>

<pre><font size="3" face="courier">&lt;%@ EnableSessionState=False %&gt;</font></pre>

<p>You should place this script as the first line in your .asp file, before any other scripts.  The default, when this tag is omitted, enables session tracking.</p>

<p>Sessionless ASP pages can often improve the responsiveness of your server by eliminating potentially time consuming session activity.  For example, consider the case of an ASP page containing two HTML frames: frames 1 and 2, both within one frameset. Frame 1 contains an .asp file that executes a complex script, while frame 2 contains a simple .html file.  Because ASP executes session requests in sequential order, or <em>serially</em>, you will not be able to see the contents of frame 2 until the script in frame 1 has executed.  However, if you make the .asp file for frame 1 sessionless, then ASP requests will no longer be serialized and the browser will render the contents of frame 2 before the contents of frame 1 have finished executing.</p>

<p>Unfortunately, the way in which multiple requests for different frames are processed ultimately depends on the configuration of the user's Web browser.  Certain Web browsers may serialize requests despite the sessionless configuration of your .asp files.</p>

<hr class="iis" size="1">


</font>
</body>
</html>


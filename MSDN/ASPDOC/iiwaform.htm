<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with HTML Forms</title>

<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 

<META NAME="DESCRIPTION" CONTENT="This topic describes how to use the ASP Request object to create scripts for collecting and processing data gathered with HTML forms.  Learn how to create basic scripts for processing form information, and also acquire useful techniques for validating form data, both on your Web server and at the user's Web browser.">

<META NAME="MS-HAID"CONTENT="Working with HTML Forms">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">

<h1><a name="H1_37773245">Working with HTML Forms</a></h1>

<p>Using the ASP <strong>Request</strong> object you can create simple, yet powerful scripts for collecting and processing data gathered with HTML forms.  In this topic you will not only learn how to create basic form processing scripts, but also acquire useful techniques for validating form information, both on your Web server and at the user's browser.</p>

<h2><a name="H2_37773883">About HTML Forms</a></h2>

<p>HTML forms, the most common method for gathering Web information, are arrangements of special HTML tags that render user interface controls on a Web page. Text boxes, buttons, and  check boxes are examples of controls that enable users to interact with a Web page and submit information to a Web server.</p>  

<p>The following HTML example generates a form where a user can enter first name, last name, and age, and includes a button for submitting information to a Web server.  The form also contains a hidden control (not rendered by the Web browser) that you can use to pass additional information to a Web server.</p>

<pre><font face="courier" size="3">&lt;FORM METHOD="POST" ACTION="myfile.asp"&gt;
&lt;INPUT TYPE="text" NAME="firstname"&gt; 
&lt;INPUT TYPE="text" NAME="lastname"&gt;
&lt;INPUT TYPE="text" NAME="age"&gt;
&lt;INPUT TYPE="hidden" NAME="userstatus" VALUE= "new"&gt;
&lt;INPUT TYPE="submit"  VALUE="Enter"&gt;
&lt;/FORM&gt;</font></pre>


<h3><a name="H3_37775553">Processing Form Inputs with ASP</a></h3>

<p>When a form submits information to the Web server, the user's Web browser requests the .asp file specified by the HTML &lt;FORM &gt; tag's ACTION attribute (in the previous example, this file was called Myfile.asp). The .asp file contains scripts that carry out form value  processing, such as displaying a table of results or querying information from a database.</p>

<p>You can use .asp files to collect HTML form values in three ways:</p>

<ul>
<li>A static .htm file can contain a form that posts its values to an .asp file. </li>
<li>An .asp file can create a form that posts information to another .asp file. </li>
<li>An .asp file can create a form that posts information to itself, that is, to the .asp file that contains the form. </li>
</ul>

<p>The first two methods operate in the same way as forms that interact with other gateway programs, except that, with ASP, you can include commands that read and respond to user choices.</p>

<p>Creating an .asp file that contains a form definition that posts information to itself is a slightly more complicated but very powerful means of working with forms. This process is demonstrated in <a href="#verfyingforminput">Verifying Form Input</a>.</p>

<h2><a name="H2_37776308">Getting Form Input</a></h2>

<p>The ASP <strong>Request</strong> object provides two collections that greatly simplify the task of retrieving form information appended to a URL request.</p>

<h3><a name="H3_37776816">QueryString Collection</a></h3>

<p>The <strong>QueryString </strong>collection retrieves form values passed to your Web server as text following a question mark in the request URL. The form values can be appended to the request URL by using either the HTTP GET method or by manually adding the form values to the URL.</p>

<p>For example, if the previous form example used the GET method (ACTION = "GET") and the user typed <em>Jeff</em>, <em>Smith</em>, and <em>30</em>, then the following URL request would be sent to the server:</p> 

<pre><font face="courier" size="3">http://scripts/Myfile.asp?firstname=Jeff&lastname=Smith&age=30&userstatus=new</font></pre>

<p>Myfile.asp might contain the following form processing script:</p>

<pre><font face="courier" size="3">Hello, &lt;%= Request.QueryString("firstname") %&gt;   &lt;%= Request.QueryString("lastname") %&gt;. 
You are  &lt;%= Request.QueryString("age") %&gt;  years old.


&lt;%
If Request.QueryString("userstatus")  = "new user" then 
  Response.Write"This is your first visit to this Web site!"
End if	
%&gt; </font></pre>

<p>In this case, your Web sever would return the following text to the user's Web browser:</p>

<pre><font face="courier" size="3">Hello, Jeff Smith. You are 30 years old. This is your first visit to this Web site!</font></pre>

<p>The <strong>QueryString</strong> collection also has an optional parameter that you can use to access one of multiple values that appear in the request body.  You can also use the <strong>Count </strong> property to count the number of times that a specific type of value appears.</p>
  
<p>For example, a form containing a list box with multiple items can render the following request:</p>

<pre><font face="courier" size="3">http://list.asp?food=apples&food=olives&food=bread</font></pre>

<p>You could use the following command to count multiple values:</p>

<pre><font face="courier" size="3">Request.QueryString("food").Count</font></pre>

<p>To display the multiple values types, List.asp could contain the following script:</p>

<pre><font face="courier" size="3">&lt;%Total = Request.QueryString("food").Count%&gt;
&lt;%For i = 1 to Total%&gt;
  &lt;%= Request.QueryString("food")(i)  %&gt; &lt;BR&gt;
&lt;%Next%&gt;</font></pre>
The preceding script would display:

<pre><font face="courier" size="3">apples
olives
bread</font></pre>

<h3><a name="H3_37779230">Form Collection</a></h3>

<p>When you use the HTTP GET method to pass long and complex form values to a Web server, you run the risk of losing information.  Most Web servers tend to restrict the size of the URL query string, so that lengthy form values passed with the GET method tend to get truncated. If you need to send a large amount of information from a form to a Web server, you must use the HTTP POST method.  The POST method, which sends form data in the HTTP request body, can send a virtually unlimited number of characters to a server. You can use the ASP <strong>Request</strong> object's <strong>Form</strong> collection to retrieve the values sent with the POST method.</p>

<p>The <strong>Form</strong> collection stores values in a manner similar to the <strong>QueryString</strong> collection.  For example, if a user filled out a form by entering a long list of names, then you could retrieve the names with the following script:</p>

<pre><font face="courier" size="3">&lt;% For i = 1 to Request.Form.Count %&gt;
&lt;% =Request.Form("names")(i) %&gt;
&lt;% Next %&gt;</font></pre>

<h2><a name="verfyingforminput">Verifying Form Input</a></h2>

<p>A good form processing script validates the information entered into a form before processing data.  A validation script can check whether the user has entered the correct type of information into a form.  For example, if your Web site includes a form that lets users compute financial information, you may want to verify that users have actually entered numerical information, and not text, before processing results.</p>

<p>A particularly advantageous way of verifying form input is to create a form that posts information to itself.  In this case, the .asp file contains the form that retrieves information.  For example, the following script determines whether a user entered a number into the "age" form field, by posting information to itself:</p>

<pre><font face="courier" size="3">&lt;% If Isnumeric(Request.QueryString("Age")) then %&gt;			
  &lt;p&gt;Hello, your age is &lt;%=Request.QueryString("age")%&gt;
&lt;%Else %&gt;
  &lt;p&gt;Please enter a numerical age.
&lt;%End If %&gt; 

&lt;FORM METHOD= "POST"  ACTION="verify.asp"  &gt;   
Name: &lt;INPUT TYPE="text" NAME="Name" &gt;
Age:  &lt;INPUT TYPE="text" NAME="Age" &gt;
&lt;INPUT TYPE="submit" VALUE="Enter"&gt;			
&lt;/FORM&gt;</font></pre>

<p>In this example, the script is in a file named Verify.asp, the same file which contains the form.  The form posts information to itself by specifying Verify.asp in the ACTION attribute.</p> 

<p>You can also create client-side scripts that check whether a user has entered the appropriate information. In addition to prompting users more quickly about form entry errors, verifying form input at the user's Web browser can reduce your Web server's network traffic.  The  following script runs on the user's Web browser and validates user information before submitting information to your Web server.</p>

<pre><font face="courier" size="3">&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub btnEnter_OnClick
  Dim TheForm
  Set TheForm = Document.MyForm
  If IsNumeric(TheForm.Age.Value) Then    	
    TheForm.submit				
  Else
    Msgbox "Please enter a numerical age."	
  End if
End Sub
//--&gt;
&lt;/SCRIPT&gt;

&lt;FORM  METHOD= "POST" NAME= MyForm  ACTION="myfile.asp"  &gt;   
Name: &lt;INPUT TYPE="text" NAME="Name" &gt;
Age:  &lt;INPUT TYPE="text" NAME="Age" &gt;
&lt;INPUT TYPE="button" NAME="btnEnter"  VALUE="Enter"&gt;			
&lt;/FORM&gt;</font></pre>


<hr class="iis" size="1">


</font>
</body>
</html>


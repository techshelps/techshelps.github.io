<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing a Database</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 



<META NAME="DESCRIPTION" CONTENT="This topic describes how to use ASP and ActiveX Data Objects (ADO) to add database access to your Web pages.  You can use ADO to write compact and scalable scripts for connecting to Open Database Connectivity (ODBC) compliant databases and OLE DB compliant data sources. If you are a scripter with a modest understanding of database connectivity, then you will find ADO's command statements uncomplicated and approachable. Likewise, if you are an experienced database programmer you will appreciate ADO's advanced, language neutral connection and query manipulation features.">

<META NAME="MS-HAID"CONTENT="Accessing a Database">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">

<h1><a name="H1_37770897">Accessing a Database</a></h1>

<p>ActiveX Data Objects (ADO) are an easy-to-use yet extensible technology for adding database access to your Web pages.  You can use ADO to write compact and scalable scripts for connecting to Open Database Connectivity (ODBC) compliant databases  and OLE DB compliant data sources. If you are a scripter with a modest understanding of database connectivity, you will find ADO's command statements uncomplicated and approachable. Likewise, if you are an experienced database programmer you will appreciate ADO's advanced, language neutral connection and query manipulation features.</p>

<h2><a name="H2_37771874">Creating an ODBC Data Source Name File</a></h2>

<p>Before creating database scripts you need to provide a way for ADO to locate, identify, and communicate with your database. Database drivers &#150; programs that pass information from your Web application to a database &#150; use a Data Source Name (DSN) to locate and identify a particular ODBC compliant database.  Typically, the DSN contains database configuration, user security, and location information, and can take the form of an entry in the Windows NT registry or a text file.</p> 

<p>With ODBC you can choose the type of DSN you wish to create: <em>User</em>, <em>System</em>, or <em>File</em>.  The User and System DSN reside in the Windows NT registry.  The System DSN enables all users logged on to particular server to access a database, while the User DSN limits database connectivity to a specific user with appropriate security credentials.  The File DSN, which takes the form of text file, provides access to multiple users and is easily transferable from one server to another by copying DSN files.  For these reasons, the examples in this topic will use the File DSN.</p>

<p>You can create a file based DSN by opening <strong>Control Panel</strong> from the Windows <strong>Start</strong> menu. Double-click the ODBC icon, and then select the <strong>File DSN</strong> property sheet. Click <strong>Add</strong>, choose your database's driver, and then click <strong>Next</strong>.  Follow the proceeding instructions for configuring a DSN for your particular database software.</p>

<big>To configure a Microsoft Access Database File DSN</big><!--</p>--><br>

<ol>
<li>In the <strong>Create New Data Source </strong>dialog box, select <strong>Microsoft Access Driver</strong> from the list box, then click <strong>Next</strong>.</li>
<li>Type in a name for your DSN file, then click <strong>Next</strong>.</li>
<li>Click <strong>Finish </strong>to create the data source.</li>
<li>On the <strong>ODBC Microsoft Access 97 Setup</strong> dialog box, click <strong>Select</strong>.  Choose a Microsoft Access database file (*.mdb), then click <strong>OK</strong>.</li>
</ol>

<p class="note"><strong>Note</strong>&nbsp;&nbsp;&nbsp;For performance and reliability reasons, it is strongly recommend that you use a <em>client-server database engine</em> for the deployment of data driven Web applications that require high-demand access from more than 10 concurrent users.  Although Active Server Pages works with any ODBC-compliant database, it has been extensively tested and is designed to work with client server databases such as Microsoft &reg; SQL Server &#153; or Oracle. </P>

<p>ASP supports shared file databases (Microsoft &reg;	Access or Microsoft &reg; FoxPro) as valid data sources.  Although some examples in the ASP documentation use a <em>shared file</em> database, it is recommended that these types of database engines be used only for development purposes or limited deployment scenarios.  Shared file databases may not be as well suited as client-server databases for very high-demand, production-quality Web applications.</p>

<p class="bigfix">&nbsp;</p>





<big>To configure a SQL Server Database File DSN</big><!--</p>--><br>

<p class="note"><strong>Note</strong>&nbsp;&nbsp;&nbsp;If the database resides on a remote server, contact the server administrator for additional configuration information; the following procedure uses the ODBC default settings for SQL Server, which may not work for your hardware configuration.</p>

<ol>
<li>On the <strong>Create New Data Source </strong>dialog box, select <strong>SQL Server</strong> from the list box, then click <strong>Next</strong>.</li>
<li>Type in a name for your DSN file, then click <strong>Next</strong>.</li>
<li>Click <strong>Finish </strong>to create the data source.</li>
<li>Type in the name of the server running SQL Server, your login ID, and your password.  </li>
<li>On the <strong>Create a New Data Source to SQL Server</strong> dialog box, type the name of the server containing the SQL Server database in the <strong>Server</strong> list box, then click <strong>Next</strong>.</li>
<li>Select a method for verifying Login ID authenticity.  </li>
<li>If you choose SQL Server authentication, enter a login ID and password, then click <strong>Next</strong>.</li>
<li>In the <strong>Create a New Data Source to SQL Server</strong> dialog box, set your default database, driver stored procedure settings, and ANSI identifiers, then click <strong>Next</strong>. (For more information, click <strong>Help</strong>.) </li>
<li>In the dialog box (also named <strong>Create a New Data Source to SQL Server</strong>), choose a character translation method, then click <strong>Next</strong>. (For more information, click <strong>Help</strong>.) </li>
<li>In the next dialog box (also named <strong>Create a New Data Source to SQL Server</strong>), select logging options.</li>

<p class="note"><strong>Note</strong>&nbsp;&nbsp;&nbsp;Typically, you should only use logging for debugging database access problems.</p>

<li>On the <strong>ODBC Microsoft SQL Server Setup</strong> dialog box, click <strong>Test Data Source</strong>.  If the DSN was created correctly, the <strong>Test Results</strong> dialog box will indicate that testing was completed successfully.</li>

<h4>SQL Server Connection and Security Information</h4>

<p>If you are developing an ASP database application intended to connect to a remote SQL Server database you should also be aware of the following issues:</p>

<ul>
<li><strong>Connection scheme</strong>-&nbsp;&nbsp;&nbsp;You can choose between the TCP/IP Sockets and Named Pipes methods for accessing a remote SQL Server database.  With Named Pipes, database clients must be authenticated by Windows NT before establishing a connection, raising the possibility that a remote computer running named pipes might deny access to a user who has the appropriate SQL Server access credentials, but does not  have a Windows NT user account on that computer.  Alternatively, connections using TCP/IP Sockets connect directly to the database server, without connecting through an intermediary computer &#150; as is the case with Named Pipes.  And because connections made with TCP/IP Sockets connect directly to the database server, users can gain access through SQL Server authentication, rather than Windows NT authentication.</li>

<p class="note"><strong>Note</strong>&nbsp;&nbsp;&nbsp;To improve performance when connecting to a remote databases, use TCP/IP Sockets.</p>

<li><strong>Security</strong> -&nbsp;&nbsp;&nbsp;If you use SQL Server's <em>Integrated</em> or <em>Mixed</em> security features, and the SQL Server database resides on a remote server, you will not be able to use Windows NT Challenge/Response authentication.  Specifically, you cannot forward Windows NT Challenge/Response credentials to the remote computer. This means that you may have to use Basic authentication,  which relies on the user to provide user name and password information.  </li>
</ul>

<p>For more information about these issues, visit the Microsoft SQL Server Technical Support Home Page at http://www.microsoft.com/sqlsupport/.<!--</p>--><br>

</ol>

<p class="bigfix">&nbsp;</p>

<big>To configure an Oracle Database File DSN</big><!--</p>--><br>

<p>Make sure that the Oracle client software is correctly installed on the computer where you intend to create the DSN.  Consult your server administrator and database software documentation for more information.</p>

<ol>
<li>On the <strong>Create New Data Source </strong>dialog box, select <strong>Microsoft ODBC for Oracle</strong> from the list box, then click <strong>Next</strong>.</li>
<li>Type in a name for your DSN file, then click <strong>Next</strong>.</li>
<li>Click <strong>Finish </strong>to create the data source.</li>
<li>Enter a user name, password, and server name, then click <strong>OK</strong>.</li>
</ol>

<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;DSN files have a .dsn extension and reside in the \Programs\Common Files\ODBC\Data Sources directory.</p>

<p>For more information about creating a DSN file, visit the Microsoft ODBC Web site at http://microsoft.com/odbc/.</p>

<h2><a name="H2_37777925">Connecting to a Database</a></h2>

<p>The very first step in accessing database information is establishing a  connection with the database source.  ADO provides the <strong>Connection</strong> object which you can use for establishing and managing connections between your applications and ODBC databases.  The <strong>Connection</strong> object features a variety of properties and methods which you can use to open and close database connections, and to issue queries for updating information.</p>  

<p>To establish a database connection, you first create an instance of the <strong>Connection</strong> object.  For example, the following script instantiates the <strong>Connection</strong> object and proceeds to open a connection:</p>

<pre><font face="courier" size="3">&lt;%
  'Create a connection object
  Set cn = Server.CreateObject("ADODB.Connection")
  'Open a connection; the string refers to the DSN
  cn.Open  "FILEDSN=MyDatabase.dsn"
%&gt;</font></pre>

<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;The DSN string does not contain spaces, either, before or after the equal sign (=).</p>

<p>In this case, the <strong>Connection </strong>object's <strong>Open</strong> method refers to the file based DSN, containing location and configuration information about the database.  Optionally, you can also refer directly to an explicit provider, data source, user ID, and password, rather than to a DSN.</p>

<h2><a name="H2_37779470">Executing Queries with the Connection Object</a></h2>

<p>With the <strong>Connection</strong> object's <strong>Execute</strong> method, you can issue Structured Query Language (SQL) queries to the database source and retrieve results. SQL, an industry standard language for communicating with databases, has commands for retrieving and updating information.</p>

<p>The following script uses the <strong>Connection</strong> object's <strong>Execute</strong> method to issue a query in the form of a SQL <strong>INSERT</strong> command, which inserts data into a specific database table.  In this case, the script block inserts the name <font face="COURIER" size="3">Jose Lugo</font> into a database table named <font face="courier" size="3">Customers</font>.</p>

<pre><font face="courier" size="3">&lt;%
  'Define  file based DSN
  strDSN = "FILEDSN=MyDatabase.dsn"

  'Instantiate the Connection object and open a database connection
  Set cn = Server.CreateObject("ADODB.Connection")
  cn.Open strDSN

  'Define SQL SELECT statement 
  strSQL = "INSERT INTO Customers (FirstName, LastName) VALUES ('Jose','Lugo')"   
  'Use the Execute method to issue a SQL query to database 
  cn.Execute(strSQL)
  
%&gt;</font></pre>

<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;The file based DSN path string should <em>not</em> include spaces before and after the equal sign (<font face="courier">=</font>).</p>

<p>In addition to the SQL <strong>INSERT</strong> command, you can use the SQL <strong>UPDATE</strong> and <strong>DELETE</strong> commands to change and remove database information.</p> 

<p>With the SQL <strong>UPDATE</strong> command you can change the values of items in a database table.  The following script uses the <strong>UPDATE</strong> command to change the <font face="courier">Customers</font> table's <font face="courier">FirstName</font> fields to <font face="courier">Jeff</font> for every <font face="courier">LastName </font>field containing the last name <font face="courier">Smith</font>.</p>

<pre><font face="courier" size="3">&lt;%
  Set cn = Server.CreateObject("ADODB.Connection")
  cn.Open "FILEDSN=MyDatabase.dsn"
  cn.Execute "UPDATE Customers SET FirstName = 'Jeff' WHERE LastName = 'Smith' "
%&gt;</font></pre>

<p>To remove specific records from a database table, use the SQL <strong>DELETE</strong> command.  The following script removes all rows from the Customers table where the last name is <font face="courier">Smith</font>:</p>

<pre><font face="courier" size="3">&lt;%
  Set cn = Server.CreateObject("ADODB.Connection")
  cn.Open "FILEDSN=MyDatabase.dsn"
  cn.Execute "DELETE FROM Customers WHERE LastName = 'Smith'"
%&gt;</font></pre>


<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;You must be careful when using the SQL <strong>DELETE</strong> command.  A <strong>DELETE </strong>command without an accompanying <strong>WHERE</strong> clause will delete all rows from a table.  Be sure to include a SQL <strong>WHERE</strong> clause, which specifies the exact rows to be deleted.</p>

<h2><a name="H2_37782547">Using the Recordset Object for Manipulating Results</a></h2>

<p>Although the <strong>Connection</strong> object simplifies the task of connecting to a database and issuing a query, the <strong>Connection</strong> object has limitations.  Specifically, you cannot create scripts with the <strong>Connection</strong> object that retrieve and display data database information; rather, you must know exactly what changes you want to make to a database and then implement the changes through use of a query.</p>

<p>For retrieving data, examining results, and making changes to your database, ADO provides the <strong>Recordset</strong> object.  As its name implies, the <strong>Recordset</strong> object has features that you can use, depending on your query constraints, for retrieving and displaying a set of database rows, or <em>records</em>.  The <strong>Recordset</strong> object maintains the position of each record returned by a query, thus enabling you to "step" through results one item at a time.</p>

<p>Depending on how you configure the <strong>Recordset</strong> object's <em>cursor</em> type properties, you can scroll through and update records.  Database cursors behave like pointers that let you locate a specific item in a set of records.  Cursors are especially useful for retrieving and inspecting records, and then carrying out an operation based on those records.  The <strong>Recordset</strong> object has properties that enable you to precisely control the behavior of cursors, improving your ability to  inspect and update results.  For example, you can use the <strong>CursorType</strong> and <strong>CursorLocation</strong> properties to configure a cursor type that returns a result set to your client application (results normally remain on the database server) and displays the latest changes to a database made by other users.</p>

<h3><a name="H3_37784801">Retrieving a Record Set</a></h3>

<p>Successful database applications employ both the <strong>Connection</strong> object, to establish a link, and the <strong>Recordset</strong> object, to manipulate returned data.  By "teaming up" the specialized functions of both objects you can develop database applications to carry out almost any data handling task. For example, the following server-side script uses the <strong>Recordset</strong> object to execute a SQL <strong>SELECT</strong> command.  The <strong>SELECT</strong> command retrieves a specific set of information based on query constraints. The query also contains a SQL <strong>WHERE</strong> clause, used to narrow down a query to a specific criterion. In this example, the <strong>WHERE</strong> clause limits the query to all records containing the last name <em>Smith</em> from the <em>Customers</em> database table.</p>

<pre><font face="courier" size="3">&lt;%
  'Establish a connection with data source  
  strDSN  = "FILEDSN=MyDatabase.dsn"  
  Set cn = Server.CreateObject("ADODB.Connection")
  cn.Open strDSN

  'Instantiate a Recordset object
  Set rsCustomers = Server.CreateObject("ADODB.Recordset")
  
  'Open a recordset using the Open method
  ' and use the connection established by the Connection object
  strSQL = "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Smith' "
  rsCustomers.Open  strSQL, cn	
  
  'Cycle through record set and display the results
  ' and increment record position with MoveNext method
   Set objFirstName = rsCustomers("FirstName") 
   Set objLastName = rsCustomers("LastName")  
   Do Until rsCustomers.EOF   
   Response.Write objFirstName & " " & objLastName & "&lt;BR&gt;"
   rsCustomers.MoveNext
   Loop

%&gt;</font></pre>

<p>Notice that in the previous example, the <strong>Connection</strong> object established the database connection and the <strong>Recordset</strong> object used the same connection to retrieve results from the database.  This method is advantageous when you need to precisely configure the way in which the link with the database is established.  For example, if you needed to specify the time delay before a connection attempt aborts, you would need to use the <strong>Connection</strong> object to set this property.  However, if you just wanted to establish a connection using ADO's default connection properties, you could use <strong>Recordset</strong> object's <strong>Open</strong> method to establish a link:</p>

  
  <pre><font size="3" face="courier">&lt;%
  strDSN  = "FILEDSN=MyDatabase.dsn"
  strSQL = "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Smith' "
  Set rsCustomers = Server.CreateObject("ADODB.Recordset")

  'Open a connection using the Open method
  'and use the connection established by the Connection object
  rsCustomers.Open  strSQL, strDSN	
  
  'Cycle through the record set, display the results,
  ' and increment record position with MoveNext method
   Set objFirstName = rsCustomers("FirstName") 
   Set objLastName = rsCustomers("LastName") 
   Do Until rsCustomers.EOF
      Response.Write objFirstName & " " & objLastName & "&lt;BR&gt;"
   rsCustomers.MoveNext
   Loop
%&gt;</pre></font>
 
<p>When you establish a connection using the <strong>Recordset</strong> object's <strong>Open</strong> method to establish a  connection, you are implicitly using the <strong>Connection</strong> object to secure the link.</p>

<h2><a name="H2_37787604">Improving Queries with the Command Object</a></h2>

<p>With the ADO <strong>Command</strong> object you can execute queries in the same way as queries executed with the <strong>Connection</strong> and <strong>Recordset</strong> object, except that with the <strong>Command</strong> object you can prepare, or compile, your query on the database source and then repeatedly reissue the query with a different set of values.  The benefit of compiling queries in this manner is that you can vastly reduce the time required to reissue modifications to an existing query.  In addition, you can leave your SQL queries partially undefined, with the option of altering portions of your queries just prior to execution.</p>  

<p>The <strong>Command</strong> object's <strong>Parameters</strong> collection saves you the trouble of reconstructing your query each time you want to reissue your query.  For example, if you need to regularly update supply and cost information in your Web based inventory system,  you can predefine your query in the following way:</p>

<pre><font size="3" face="courier">&lt;%  
 'Open a connection using Connection object Command object
 'does not have an Open method for establishing a connection
 strDSN = "FILEDSN=MyDatabase.dsn" 
 Set cn = Server.CreateObject("ADODB.Connection")
 cn.Open strDSN

 'Instantiate Command object; use ActiveConnection property to attach 
 'connection to Command object
 Set cm= Server.CreateObject("ADODB.Command")
 Set cm.ActiveConnection = cn
 
 'Define SQL query
 cm.CommandText = "INSERT INTO Inventory (Material, Quantity) VALUES (?, ?)" 

 'Save a prepared (or pre-compiled) version of the query specified in CommandText
 'property before a Command object's first execution. 
 cm.Prepared = True

 'Define query parameter configuration information
 cm.Parameters.Append cm.CreateParameter("material_type",200, ,255 )
 cm.Parameters.Append cm.CreateParameter("quantity",200, ,255 )

 'Define and execute first insert
 cm("material_type") = "light bulbs" 
 cm("quantity") = "40" 
 cm.Execute
  
 'Define and execute second insert
 cm("material_type") = "fuses" 
 cm("quantity") = "600" 
 cm.Execute
%&gt;</pre></font>

<p>Examining the previous example, you will notice that the script repeatedly constructs and reissues a SQL query with different values, without having to redefine and resend the query to the database source.  Compiling your queries with the <strong>Command</strong> object also offers you the advantage of avoiding problems that can arise from concatenating strings and variables to form SQL queries.  In particular, by using the <strong>Command</strong> object's <strong>Parameter</strong> collection, you can avoid problems related to defining certain types of string, date, and time variables.  For example, SQL query values containing apostrophes (') can cause a query to fail:</p>

<pre><font size="3" face="courier">  strSQL = "INSERT INTO Customers (FirstName, LastName) VALUES ('Robert','O'Hara')"  </pre></font>

<p>Notice that the last name <strong>O'Hara</strong> contains an apostrophe which conflicts with the apostrophes used to denote data in the SQL <strong>VALUES</strong> keyword.  By binding the query value as a <strong>Command</strong> object parameter, you avoid this type of problem.</p>

<h2><a name="H2_37790742">Combining HTML Forms and Database Access</a></h2>

<p>Web pages containing HTML forms can enable users to remotely query a database and retrieve specific information. With ADO you can create surprisingly simple scripts that collect user form information, create a custom database query, and return information to the user.   Using the ASP <strong>Request</strong> object, you can retrieve information entered into an HTML form and incorporate this information into your SQL statements. For example, the following script block inserts information supplied by an HTML form into a table. The script collects the user information with the <strong>Request</strong> object 's <strong>Form </strong>collection.</p>

<pre><font face="courier" size="3">&lt;%
 'Open a connection using Connection object. The Command object
 'does not have an Open method for establishing a connection
 strDSN = "FILEDSN=MyDatabase.dsn" 
 Set cn = Server.CreateObject("ADODB.Connection")
 cn.Open strDSN

 'Instantiate Command object
 'and  use ActiveConnection property to attach 
 'connection to Command object
 Set cm= Server.CreateObject("ADODB.Command")
 Set cm.ActiveConnection = cn
 
 'Define SQL query
 cm.CommandText = "INSERT INTO MySeedsTable (Type) VALUES (?)" 

 'Define query parameter configuration information
 cm.Parameters.Append cm.CreateParameter("type",200, ,255 )

 'Define and execute insert
 cm("type") = Request("SeedType") 
 cm.Execute

%&gt;</font></pre>

<p>For more information about forms and using the ASP <strong>Request </strong>object, see <a href="iiwaform.htm">Working with HTML Forms</a>.</p>

<h2><a name="H2_37792280">Managing Database Connections</a></h2>

<p>One of the main challenges of designing a sophisticated Web database application, such as an online order entry application servicing thousands of customers, is properly managing database connections. Opening and maintaining database connections, even when no information is being transmitted, can severely strain a database server's resources and result in connectivity problems.  Well designed Web database applications recycle database connections and compensate for delays due to network traffic.</p>

<h3><a name="H3_37793252">Timing Out a Connection</a></h3>

<p>A database server experiencing a sudden increase in activity can become backlogged, greatly increasing the time required to establish a database connection. As a result, excessive connection delays can reduce the performance of your database application.</p>

<p>With the <strong>Connection</strong> object's <strong>ConnectionTimeout</strong> you can limit the amount of time that your application waits before abandoning a connection attempt and issuing an error message. For example, the following script sets the <strong>ConnectionTimeout</strong> property to wait twenty seconds before cancelling the connection attempt:</p>
  
<pre><font size="3" face="courier">Set cn = Server.CreateObject("ADODB.Connection")
cn.ConnectionTimeout = 20
cn.Open "FILEDSN=MyDatabase.dsn"
</pre></font>

<p>The default for the <strong>ConnectionTimeout</strong> property is 30 seconds.</p> 

<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;Before incorporating the <strong>ConnectionTimeout</strong> property into you database applications, make sure that your connection provider and data source support this property.</p>

<h3><a name="H3_37794400">Pooling Connections</a></h3> 

<p>Web database applications that frequently establish and terminate database connections can reduce database server performance. ASP supports efficient connection management by using the connection pooling feature of ODBC 3.5.  Connection pooling maintains open database connections and manages connection sharing across different user requests to maintain performance and to reduce the number of idle connections. On each connection request, the connection pool first determines if there is an idle connection in the pool. If so, the connection pool returns that connection instead of making a new connection to the database.</p>

<p>If you want your ODBC driver to participate in connection pooling you must configure your specific database driver and then set the driver's <strong><strong>CPTimeout</strong> </strong>property in the Windows NT registry. When ODBC disconnects a connection, the connection is saved in a pool, rather that disconnected.  The <strong>CPTimeout</strong> property determines the length of time that a connection remains in the connection pool.  If the connection remains in the pool longer than the duration set by <strong>CPTimeout</strong>, the connection is closed and removed from the pool.  The default value for <strong>CPTimeout</strong> is 60 seconds.</p>


<p>You can selectively set the <strong>CPTimeout</strong> property to enable connection pooling for a specific ODBC database driver by creating a registry key with the following settings:</p>

<pre><font size="3" face="courier">
\HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\driver-name\CPTimeout = timeout 
 (REG_SZ, units are in seconds)
</pre></font>

<p>For example, the following key sets the connection pool timeout to 180 seconds (3 minutes) for the SQL Server driver.</p>

<pre><font size="3" face="courier">\HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\SQL Server\CPTimeout = 180</pre></font>

<p class="note"><strong>Note</strong>&nbsp;&nbsp;&nbsp;By default, your Web server activates connection pooling for SQL Server by setting <strong>CPTimeout</strong> to 60 seconds.</p>

<h3><a name="H3_37796346">Using Connections Across Multiple Pages</a></h3>

<p>Although you can reuse a connection across multiple pages by storing the connection in ASP's <strong>Application</strong> object, doing so may unnecessarily keep open a connection open, defeating the advantages of using connection pooling.  If you have many users that need to connect to the same ASP database application, a better approach is to reuse a database connection string across several Web pages by placing the string in ASP's <strong>Application</strong> object. For example, you can specify a connection string in the Global.asa file's Application_OnStart event procedure, such as in the following script:</p>

<pre><font size="3" face="courier">
Application.lock
Application("ConnectionString") = "FILEDSN=MyDatabase.dsn"
Application.unlock
</pre></font> 

<p>Then in each ASP file that accesses the database, you can write:</p>

<pre><font size="3" face="courier">&lt;OBJECT RUNAT=Server ID=cn PROGID="ADODB.Connection"&gt;&nbsp;&lt;/OBJECT&gt;</pre></font> 

<p>to create an instance of the connection object for the page, and use the script:</p>

<pre><font size="3" face="courier">cn.Open Application("ConnectionString")</pre></font>

<p>to open the connection. At the end of the page, you close the connection with:</p>

<pre><font size="3" face="courier">cn.Close</pre></font>

In the case of an individual user who needs to reuse a connection across multiple Web pages, you may find it more advantageous to use the <strong>Session</strong> object rather than the <strong>Application </strong>object for storing the connection string.

<h3><a name="H3_37797541">Closing Connections</a></h3>

<p>To make the best use of connection pooling, explicitly close database connections as soon as possible.  By default, a connection terminates after your script finishes execution.  However, by explicitly closing a connection in your script after it is no longer needed, you reduce demand on the database server and make the connection available to other users.</p>

<p>You can use <strong>Connection</strong> object's <strong>Close</strong> method to explicitly terminate a connection between the <strong>Connection </strong>object and the database. The following script opens and closes a connection:</p>

<pre><font size="3" face="courier">&lt;% strDSN = "FILEDSN=MyDatabase.dsn"
Set cn = Server.CreateObject("ADODB.Connection")
cn.Open 
cn.Close
%&gt;
</pre></font>

<hr class="iis" size="1">

</font>
</body>
</html>


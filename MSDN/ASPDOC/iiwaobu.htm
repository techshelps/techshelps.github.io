<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Object Scope</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 



<META NAME="DESCRIPTION" CONTENT="Explains the ASP script commands to use object methods and properties.">

<META NAME="MS-HAID"CONTENT="Setting Object Scope">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">	

<h1><a name="settingcomponentscope">Setting Object Scope</a></h1>

<p>The scope of an object determines which scripts can use an object.  By default, when you create an object instance, the object has page scope.  Any script command in the same ASP page can use a page-scope object; the object is released when the ASP page is sent back to the client.  The recommended scope for most objects is page scope.  You can change the scope of an object, however, to make it accessible from scripts on other pages.  This topic explains how to work with page scope objects and how to change the scope of objects.<p>

<h2><a name="H2_37778304">Using Page Scope Objects</a></h2>

<p>An object that you create by using <strong>Server.CreateObject</strong> on an ASP page exists for the duration of that page.  The object is accessible to any script commands on that page, and it is released when ASP has finished processing the page.  Thus an object has the scope, or lifetime, of a page.</p>

<p>If you have programmed in  Visual Basic or VBScript, note that you cannot release an object before ASP has finished processing the page.   For example, the following VBScript statement is often used to release an object by assigning the value <strong>Nothing</strong> to the object variable:</p>

<pre><font face="courier" size="3">Set myObj = Nothing</font></pre>

<p>If you include this statement in an ASP page, any attempt to use <code><font face="courier" size="3">myObj</font></code> will return an error code, as expected.  Internally, however, ASP retains a reference to your object, even after you have released it.  While you cannot use the object in your script, the object's resources are not released until ASP has finished processing the page.  Similarly, if you release an object by creating a different object instance and assigning it to an object variable you have already used, ASP retains a reference to the original object instance.  While creating many objects may not cause a problem for most scripts, it can cause problems if the objects use shared resources, such as database connections.</p>

<p>Because objects have page scope, do not depend on objects being released manually.  For example, the following loop  creates 1001 <strong>Connection</strong> objects, which would open most of the connections on even a large SQL server:</p>

<pre><font face="courier" size="3">&lt;% 
For I = 0 to 1000
  Set Conn = Server.CreateObject("ADODB.Connection")
  Conn.Open "<em>connection string</em>"
Next 
%&gt;</font></pre>

<p>In general, you should avoid creating objects inside a loop.  If you must create objects in a loop, you should manually release the resources used by an object.  The previous example works if the <strong>Connection</strong> object is created only once, and the physical connection to the data source is opened and closed during each loop:</p>

<pre><font face="courier" size="3">&lt;%
Set Conn = Server.CreateObject("ADODB.Connection")
For I = 0 to 1000
  Conn.Open "<em>connection string</em>"
  Conn.Close 
Next
%&gt;</font></pre>

<h2><a name="sessionscope">Giving an Object Session Scope</a></h2>

<p>A <em>session-scope</em> object is created for each new session in an application and released when the session ends; thus, there is one object per active session.   Session scope is used for objects that  are called from multiple scripts but affect one user session.  You should give objects session scope only when needed.  If you do use session scope, you must know the threading model of the component that provides the object because the threading model affects the performance and security context of the object.  For more information, see &#147;Advanced Information: Performance Issues&#148; in this topic.</p>

<p>To give an object session scope,  store the object in the ASP <strong>Session </strong> built-in object.  You can use either the &lt;OBJECT&gt; tag in a Global.asa file or the <strong>Server.CreateObject </strong> method on an ASP page to create a session scope object instance.</p>

<p>In the Global.asa file, you can use the &lt;OBJECT&gt; tag, extended with RUNAT attribute (which must be set to Server) and the SCOPE attribute (which must be set to  Session). The following example creates a session-scope instance of the Ad Rotator object:</p>

<pre><font face="courier" size="3">&lt;OBJECT RUNAT=Server SCOPE=Session ID=MyAd PROGID="MSWC.Adrotator"&gt;
&lt;/OBJECT&gt;</font></pre>

<p>Once you have stored the object in the <strong>Session</strong> object, you can access the object from any page in the application.  The following statement uses the object instance created by the &lt;OBJECT&gt; tag in the previous example:</p>

<pre><font face="courier" size="3">&lt;%= MyAd.GetAdvertisement("addata.txt") %&gt; </font></pre>

<p>On an ASP page, you can also use the <strong>Server.CreateObject</strong> method to store an object in the <strong>Session</strong> built-in object. The following example stores an instance of the Ad Rotator object in the <strong>Session</strong> object.</p>

<pre><font face="courier" size="3">&lt;% Set Session("MyAd") = Server.CreateObject("MSWC.Adrotator") %&gt; </font></pre>

<p>To display an ad, you first retrieve the instance of the Ad Rotator object stored in the <strong>Session</strong> object, and then call the method to display an ad:</p>

<pre><font face="courier" size="3">&lt;% Set MyAd = Session("MyAd") %&gt; 
&lt;%= MyAd.GetAdvertisement("addata.txt") %&gt; </font></pre>

<p>ASP does not instantiate an object that you declare with the &lt;OBJECT&gt; tag until that object is referenced by a script command from an .asp file. The <strong>Server.CreateObject</strong> method instantiates the object immediately. Thus, the &lt;OBJECT&gt; tag offers better performance than the <strong>Server.CreateObject</strong> method for session-scope objects.</p>

<h2><a name="H2_37783263">Giving an Object Application Scope</a></h2>

<p>An <em>application-scope</em> object is a single instance of an object that is created when the application starts. This object is shared by all client requests.  Only rarely should you give an object application scope.  Some utility objects, such as counters, might require application scope, but generally you should use the alternatives proposed in the following section.  In addition, the threading model affects the performance and security context of the object (see &#147;Advanced Information: Performance Issues&#148; in this topic).</p>

<p>To give an object application scope,  store the object in the ASP <strong>Application</strong> built-in object.  You can use either the &lt;OBJECT&gt; tag in a Global.asa file or the <strong>Server.CreateObject </strong> method on an ASP page to create an application scope object instance.</p>

<p>In the Global.asa file, you can use the &lt;OBJECT&gt; tag, extended with RUNAT attribute (which must be set to Server) and the SCOPE attribute (which must be set to  Application).  On an ASP page, you can use <strong>Server.CreateObject</strong> to store an object instance in the <strong>Application</strong> built-in object.  For examples of using the &lt;OBJECT&gt; tag and <strong>Server.CreateObject</strong>, see the previous section &#147;Giving an Object Session Scope.&#148;</p>

<h2><a name="alternativestosession">Alternatives to Session and Application Scope</a></h2>

<p>You should give objects session or application scope only when needed.  Because these objects linger until the session or application has finished running, they consume resources, such as memory or database connections, that might be better used in other ways.  In addition, the threading model of a component  affects the performance of objects you create from it, especially objects with session or application scope.</p>

<p>In many cases, a better solution than creating application or session scope objects is to use session or application scope variables that pass information to objects created at the page level.  For example, you should not give an ADO <strong>Connection</strong> object session or application scope because the connection it creates remains open for a long time and because your script no longer takes advantage of ODBC connection pooling.  You can, however, store an ODBC connection string in the <strong>Session</strong> or <strong>Application</strong> built-in object and access the string from a <strong>Connection</strong> object instance that you create on a page.  In this way, you store frequently used information in the session or application name space but you create the object that uses the information only when needed.</p>

<h2><a name="jscriptobjects">User-defined JScript Objects</h2>

<p>You can create your own JScript object by defining a constructor function that creates and initializes the properties and methods of the new object.  The object instance is created when your script uses the <strong>new</strong> operator to invoke the constructor.  User-defined objects are supported in ASP scripts and work well when they have page scope.  Giving a user-defined JScript object application or session scope, however, might affect the functionality of the object.  In particular, if an object has session or application scope, scripts on other pages can access the object's properties but cannot call its methods.</p>

<h2><a name="performanceissues">Advanced Information: Performance Issues</a></h2>

<p>The threading model of a component may affect the performance of your Web site.  Generally, objects that are marked Both are the recommended objects to use in all ASP scripts, particularly in the <strong>Session</strong> and <strong>Application</strong> objects.  Single-threaded objects are not recommended.</p>

<p>Because you may not always have control over the threading model of the objects you use, the following guidelines will help you get the best performance:</p>

<ul>
<li>Page scope objects.  Objects marked Both or Apartment will give you the best performance.</li>

<li>Application scope objects.  In general, avoid putting objects in the <strong>Application</strong> object.  If you do use application-scope objects, you will get the best performance from objects marked Both that aggregate the FreeThreadedMarshaler.  You can use either the &lt;OBJECT&gt; tag or the <strong>Server.CreateObject</strong> method to store objects marked Single, Free, or Both in the <strong>Application</strong> object.  You  must use the &lt;OBJECT&gt; tag with apartment-threaded objects.  </li>

<li>Session scope objects.  Objects marked Both will give you the best performance.   Using  single-threaded or apartment-threaded objects will cause the Web server to lock the session down to one thread. Free-threaded objects do not lock down the session, but are slow.  You can use either the &lt;OBJECT&gt; tag or the <strong>Server.CreateObject</strong> method to store objects in the <strong>Session</strong> object. </li>
</ul>

<hr class="iis" size="1">


</font>
</body>
</html>


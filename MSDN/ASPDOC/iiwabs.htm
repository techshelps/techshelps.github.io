<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sending Scripts to the Browser</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 


<META NAME="DESCRIPTION" CONTENT="This topic describes how to use ASP to generate client-side scripts that are processed by the client browser.   You can write server-side scripts that put together script commands that are sent to the browser.">

<META NAME="MS-HAID"CONTENT="Sending Scripts to the Browser">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">

<h1><a name="H1_37766214">Sending Scripts to the Browser</a></h1>

<p>Although ASP is used primarily to create and process server-side scripts, you can extend its effectiveness by using it to generate client-side scripts which are then processed by the client browser.   You can write server-side scripts that put together script commands that are sent to the browser.</p>

<p>You do this by combining client-side scripts that are enclosed by HTML comments with server-side scripts that are enclosed by delimiters:</p>

<pre><font face="courier" size="3">&lt;SCRIPT LANGUAGE="VBScript"&gt;	
&lt;!--
<Em>client script</Em>
&lt;% <Em>server script </Em> %&gt; 
<Em>client script</Em>
&lt;% <Em>server script </Em> %&gt;
<Em>client script</Em>
...
--&gt;
&lt;/SCRIPT&gt;</font></pre>

<p>With this functionality in your scripts, you can create exciting applications. For example, the following script will create several client-script subroutines that run on the user's Web browser.</p>

<pre><font face="courier" size="3">&lt;%
ServerTime = Time
ServerDate = Date

For i = 1 to 4
  Randomize
  GreetCondition = int(rnd * 3)
%&gt;

&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--

Sub ServeInfo&lt;%= i %&gt;()
  Select Case &lt;%= GreetCondition%&gt;
    Case 0
      Msg =  "Hello, the time is &lt;%= ServerTime %&gt;."
    Case 1			
      Msg = "Welcome! Today's date is &lt;%= ServerDate %&gt;."
    Case 2
      Msg = "Hi, the time is &lt;%= ServerTime %&gt; and the date is &lt;%= ServerDate %&gt;.
  End Select
  Document.Write    Msg
End Sub

ServeInfo&lt;%= i %&gt;()

//--&gt;
&lt;/SCRIPT&gt;

&lt;br&gt;

&lt;% 
Next
 %&gt;</font></pre>

<p>In the previous script, ASP retrieves time and date information from the server, and then loops several times to create subroutines that execute on the user's Web server.  Each of these client-side subroutines render a randomly selected greeting, displaying the time and date information.</p> 

<p>Scripts of this kind can be expanded, for example, to retrieve and deliver configuration information to a special client-side script or  component, such as an ActiveX control. Through clever use of this scripting technique, you can also reduce the amount of time that your Web server spends processing and returning user information requests.</p>


<hr class="iis" size="1">

</font>
</body>
</html>


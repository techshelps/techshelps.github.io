<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating  ASP Pages</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 


<META NAME="DESCRIPTION" CONTENT="Explains how to create an .asp file and insert script commands into the file.">

<META NAME="MS-HAID"CONTENT="Creating ASP Pages">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">


<h1><a name="H1_37765342">Creating ASP Pages</a></h1>

<p>An Active Server Pages (ASP) file is a text file with the extension .asp that contains any combination of the following:</p>

<ul>
<li>Text</li>
<li>HTML tags</li>
<li>ASP script commands </li>
</ul>

<p>It&#146;s easy to create an .asp file.  For any HTML file to which you want to add scripts, rename the file by replacing the existing .htm or .html file name extension with .asp.  To make  the .asp  file available to Web users, save the new file in a directory on your Web site (be sure that the directory has Script or Execute permission enabled). When you view the file with your browser, you see that ASP processes and returns an HTML page.   You can now add script commands to the .asp file.</p>

<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;Because .asp files require extra processing, you should not convert all of your HTML pages into ASP pages.  Convert only the files that will have script commands into .asp files.  You can put both .asp and .htm files in the same directory.</p>

<p>You can use any text editor to create .asp files.  You may find it more productive to use an editor with enhanced support for ASP, such as Microsoft&#174; Visual InterDev&#153;.  If you have never used HTML before, consider getting started with Microsoft FrontPage.  FrontPage lets you create documents and format text just as you would with a word processor.  You can then add simple ASP commands to the HTML page created by FrontPage by using the Insert Script command.</p>

<h2><a name="whatisascript">Adding Script Commands</a></h2>

<p>A <em>script</em> is a series of commands or instructions.  Unlike HTML tags, which simply format text or read in a graphic, video, or sound file,  a script command instructs the Web server to perform an action.  Script commands can store a user&#146;s name in a variable, display the user&#146;s name in a page returned to the browser, or store the user&#146;s name in a database.</p>

<p>Script commands are differentiated from text by delimiters. A <em>delimiter</em> is a character or sequence of characters that marks the beginning or end of a unit. In the case of HTML, these delimiters are the less than (&lt;) and greater than (&gt;) symbols, which enclose HTML tags.</p>

<p>ASP uses  the delimiters &lt;% and  %&gt; to enclose script commands. You  can include within the delimiters any command that is valid for the scripting language you are using.  The following example shows a simple HTML page that contains a script command:</p>

<pre><font face="courier" size="3">&lt;HTML&gt;
&lt;BODY&gt;
This page was last refreshed on &lt;%= Now %&gt;.
&lt;/BODY&gt;
&lt;/HTML&gt;</font></pre>

<p>The VBScript function <strong>Now</strong> returns the current date and time.  When the Web server processes this page, it replaces <code><font face="courier" size="3">&lt;%= Now %&gt;</font></code> with the current date and time and returns the page to the browser:</p>

<pre><font face="courier" size="3">This page was last refreshed on 8/1/97 2:20:00 PM.</font></pre>

<p>Commands enclosed by delimiters are called <em>primary script commands</em>.  These commands are processed using the primary scripting language.  Any command that you use within script delimiters must be valid for the primary scripting language.  By default, the primary scripting language is VBScript.  You can set a different language.  See <a href="iiwascln.htm">Working with Scripting Languages</a>.</p>

<p>If you are already familiar with client-side scripting (writing scripts that run on the browser), note that you do not use the HTML &lt;SCRIPT&gt; element to enclose expressions.   For server-side scripting, you only use the &lt;SCRIPT&gt;  element to define procedures in languages other than the primary scripting language.  For more information, see <a href="iiwascln.htm">Working with Scripting Languages</a>.</p>

<h2><a name="singleexpressions">Mixing HTML and Script Commands</a></h2>

<p>You can include within ASP delimiters any statement, expression, procedure, or operator that is valid for your primary scripting language.  A <em>statement</em>, in VBScript and other scripting languages, is a syntactically complete unit that expresses one kind of action, declaration, or definition. The conditional <strong>If...Then...Else</strong> statement that appears below is a common VBScript statement.</p>

<pre><font face="courier" size="3">&lt;% 
If Time &gt;= #12:00:00 AM# And Time &lt; #12:00:00 PM#  Then 
  Greeting = "Good Morning!" 
Else 
  Greeting = "Hello!" 
End If
%&gt; 

&lt;%= Greeting %&gt;</font></pre>

<p>This statement stores either the value <code><font face="courier" size="3">"Good Morning!"</font></code> or the value <code><font face="courier" size="3">"Hello!"</font></code> in the variable <code><font face="courier" size="3">greeting</font></code>.  The <code><font face="courier" size="3">&lt;%= Greeting %&gt;</font></code> command sends the current value of the variable to the browser.</p>

<p>Thus, a user viewing this script before 12:00 noon (in the Web server&#146;s time zone) would see this line of text:</p>

<pre><font face="courier" size="3">Good Morning!</font></pre>

<p>A user viewing the script at or after 12:00 noon would see this line of text:</p>

<pre><font face="courier" size="3">Hello!</font></pre>

<p>You can include HTML text between the sections of a statement. For example, the following script, which mixes HTML within an <strong>If...Then...Else</strong> statement, produces the same result as the script in the previous example:</p>

<pre><font face="courier" size="3">&lt;% If Time &gt;= #12:00:00 AM# And Time &lt; #12:00:00 PM# Then %&gt; 
Good Morning!
&lt;% Else %&gt;
Hello!
&lt;% End If %&gt;</font></pre>

<p>If the condition is true&#151;that is, if the time is midnight or after, and before noon&#151;then the Web server sends the HTML that follows the condition (&#147;Good Morning&#148;) to the browser; otherwise, it sends the HTML that follows <strong>Else</strong> (&#147;Hello!&#148;) to the browser.  This way of mixing HTML and script commands is convenient for wrapping the <strong>If...Then...Else</strong> statement around several lines of HTML text.  The previous example is more useful if you want to display a greeting in several places on your Web page.  You can set the value of the variable once and then display it repeatedly.</p>

<p>Rather than interspersing HTML text with script commands, you can return HTML text to the browser from within a script command.  To return text to the browser, use the ASP built-in object <strong>Response</strong>.  The following example produces the same result as the previous scripts:</p>

<pre><font face="courier" size="3">&lt;% 
If Time &gt;= #12:00:00 AM# And Time &lt; #12:00:00 PM#  Then 
  Response.Write "Good Morning!"
Else
  Response.Write "Hello!"
End If 
%&gt;</font></pre>

<p><strong>Response.Write</strong> sends the text that follows it to the browser. Use <strong>Response.Write</strong> from within a statement when you want to dynamically construct the text returned to the browser.  For example, you might want to build a string that contains the values of several variables.  You will learn more about the <strong>Response</strong> object, and objects in general, in <a href="iiwacomu.htm">Using Components and Objects</a> and <a href="iiwacont.htm">Sending Content to the Browser</a>.  For now, simply note that you have several ways to insert script commands into an HTML page.</p>

<p>You can include procedures written in your default primary scripting language within ASP delimiters. Refer to <a href="iiwascln.htm">Working with Scripting Languages</a> for more information.</p>

<p>If you are working with JScript commands,  you can insert the curly braces that indicate a block of statements directly into your ASP commands even if they are interspersed with HTML tags and text.  For example:</p>

<pre><font face="courier" size="3">&lt;% if (screenresolution == "low") { %&gt;
This is the text version of a page.
&lt;% } else { %&gt;
This is the multimedia version of a page.
&lt;% } %&gt;</font></pre>

<h2><a name="aspdirectives">Using ASP Directives</a></h2>

<p>ASP provides directives that are not part of the scripting language you use.  These directives are the output directive and the processing directives.</p>

<p>The ASP <em>output directive</em> <code><font face="courier" size=3>&lt;%= <em>expression</em> %&gt;</font></code> displays the value of an expression.  This output directive is equivalent to using <strong>Response.Write</strong> to display information.  For example, 
the output expression <code><font face="courier" size="3">&lt;%= sport %&gt;</font></code> sends the word <code><font face="courier" size="3">climbing</font></code> (the current value of the variable) to the browser.</p>

<p>The ASP <em>processing directive</em> <code><font face="courier" size=3>&lt;%@ <em>keyword</em> %&gt;</font></code> gives ASP information it needs to process an .asp file.  For example, the following directive sets VBScript as the primary scripting language for the page:</p>

<pre><font face="courier" size="3">&lt;%@ LANGUAGE=VBScript %&gt;</font></pre>

<p>The processing directive must appear on the first line of an .asp file.  Do not put the processing directive in a file included with the <strong>#include</strong> statement.  You must use a space between the at sign (@) and the keyword. The processing directive has the following keywords:</p>

<ul>
<li>The LANGUAGE keyword sets the scripting language for the page.  See <a href="iiwascln.htm">Working with Scripting Languages</a>.</li>
<li>The CODEPAGE keyword sets the code page (the character encoding) for the page. See <a href="iiapmls.htm">Working with International Sites</a>.</li>
<li>The LCID keyword sets the locale identifier for the page.  See <a href="iiapmls.htm">Working with International Sites</a>.</li>
<li>The TRANSACTION keyword specifies that the page will run under a transaction context.  See <a href="iiaptran.htm">Creating Transactional Scripts</a>.</li>
<li>The ENABLESESSIONSTATE keyword specifies whether an ASP page uses session state.  See <a href="iiapsess.htm">Managing Sessions</a>.</li>
</ul>

<p>You can include more than one keyword in a single directive; keyword/value pairs must be separated by a space. Do not put spaces around the equal sign (=).  The following example sets both the scripting language and the code page:</p>

<pre><font face="courier" size="3">&lt;%@ LANGUAGE=JScript CODEPAGE=932 %&gt;</font></pre>

<h2><a name="H2_37775911">White Space in Scripts</a></h2>

<p>If your primary scripting language is either VBScript or JScript, ASP removes white space from commands.  For all other scripting languages, ASP preserves white space so that languages that depend on position or indentation, such as Python, are correctly interpreted.  White space includes spaces, tabs, returns, and line feeds.</p>

<p>For VBScript and JScript, you can use white space after the opening delimiter and before the closing delimiter to make commands easier to read. The following commands are all valid:</p>

<pre><font face="courier" size="3">&lt;% Color = "Green" %&gt;

&lt;%Color="Green"%&gt;

&lt;%
Color = "Green"
%&gt;</font></pre>

<p>ASP strips out white space between the closing delimiter of a statement and the opening delimiter of the following statement. If you need to preserve the white space between two statements, such as when you are displaying the values of variables in a sentence, use an HTML nonbreaking space character (&amp;nbsp;).  For example:</p>

<pre><font face="courier" size="3">&lt;%
'Define two variables with string values.
Hello = "Hello"
World = "World"
%&gt;

&lt;P&gt;My response is to say "&lt;%= Hello %&gt;&amp;nbsp;&lt;%= World %&gt;." &lt;/P&gt;</font></pre>


<hr class="iis" size="1">


</font>
</body>
</html>


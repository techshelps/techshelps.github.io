<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Components and Objects</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 


<META NAME="DESCRIPTION" CONTENT="Explains how to create an instance of an ActiveX component in an ASP script and  how to set component scope.">

<META NAME="MS-HAID"CONTENT="Using  Components and Objects">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">	

<h1><a name="H1_37767305">Using  Components and Objects</a></h1>

<p>ActiveX components are the key to building powerful Web applications.  Components provide objects that you use in your scripts to perform tasks.  ASP also provides built-in objects that you can use in your scripts.  This topic explains how to use the objects provided by any component as well as the built-in objects provided directly by Active Server Pages.  For information on using an object's collections, see <a href="iiwacoll.htm">Using Collections</a>.</p>

<h2><a name="H2_37767923">About Components</a></h2>

<p>An <em>ActiveX component</em> is a file containing code that performs a task or set of tasks.  Components perform common tasks so that you do not have to create your own code to perform these tasks.  For example, a stock ticker component might display the latest stock quotes on a Web page.  ASP comes with base components that you can use immediately, such as the Database Access Component.   You can obtain additional components from third-party developers.  Or, you can write your own components.</p>

<p>You  use components as the basic building blocks of your script or Web-based application.  If you are new to scripting, you can write scripts that use components without knowing anything about how the component works.  You simply need to know how to access the  objects provided by the components.  Components enable you to write powerful scripts without learning any programming.</p>

<p>If you are a Web application developer, you can write components to encapsulate business logic.  For example, you could write a component to calculate the sales tax on a product sale.  You could then call the component from a script that processes a sales order.  Isolating the tax calculation from the order process enables you to update the component when the sales tax for an area changes without changing your order process. You can write components in any programming language that supports the Component Object Model (COM), such as C, C++, Java, or Visual Basic.  If you are familiar with COM programming, ActiveX components are Automation servers.  To run on the Web server, your ActiveX components cannot have any graphical user interface elements, such as the Visual Basic <strong>MsgBox</strong> function.</p> 

<p>Components are reusable.  Once you have installed a component on your Web server, you can call it from an ASP script, an ISAPI application, another component on the server, or a program written in another COM-compatible language.</p>


<h2><a name="H2_37769966">Creating an Instance of a Component&#146;s Object</a></h2>

<p>A component is executable code contained in a dynamic-link library (.dll) or in an executable (.exe) file.  A component provides one or more objects, along with the object&#146;s methods and properties.  To use an object provided by a component, you create an instance of the object and assign the new instance to a variable name.  Use the ASP <strong>Server.CreateObject</strong> method to create the object instance.  Use your scripting language&#146;s variable assignment statement to give your object instance a name.  When you create the object instance, you must provide its registered name (PROGID).  For the base components provided with ASP, you can get the PROGID for the objects from the reference pages.</p>

<p>For example, the ASP Ad Rotator component randomly rotates through a series of graphical advertisements.  The Ad Rotator component provides one object, called the Ad Rotator object, whose PROGID is "MSWC.AdRotator".  To create an instance  of the Ad Rotator object, use one of the following statements:</p>

<p><strong>VBScript:</strong></p>

<pre><font face="courier" size="3">&lt;% Set MyAds = Server.CreateObject("MSWC.AdRotator") %&gt;</font></pre>

<p><strong>JScript:</strong></p> 

<pre><font face="courier" size="3">&lt;% var MyAds = Server.CreateObject("MSWC.AdRotator") %&gt;</font></pre>

<p>If you are already familiar with VBScript or JScript, notice that you do not use the scripting language&#146;s function for creating a new object instance (<strong>CreateObject</strong> in VBScript or <strong>New</strong> in JScript).  You must use the ASP <strong>Server.CreateObject</strong> method; otherwise, ASP cannot track your use of the object in your scripts.</p>

<p>You can also use the HTML &lt;OBJECT&gt; tag to create an object instance. You must supply the RUNAT attribute with a value of Server, and you must provide the ID attribute set to the variable name you will use in your scripts.  You can identify the object by using either its registered name (PROGID) or its registered number (CLSID).The following example uses the registered name (PROGID) to create an instance of  the Ad Rotator object:</p>

<pre><font face="courier" size="3">&lt;OBJECT RUNAT=Server ID=MyAd PROGID="MSWC.AdRotator"&gt;&lt;/OBJECT&gt;</font></pre>

<p>The following example uses the registered number (CLSID)  to create an instance of the Ad Rotator object:</p>

<pre><font face="courier" size="3">&lt;OBJECT RUNAT=Server  ID=MyAd 
CLASSID="Clsid:1621F7C0-60AC-11CF-9427-444553540000"&gt;&lt;/OBJECT&gt; </font></pre>

<h2><a name="H2_37772661">Creating an Object from a Java Class</a></h2>

<p>An ActiveX component written in Java can be delivered as a Java class instead of a DLL.  To use <strong>Server.CreateObject</strong> to create an instance of an object exposed by the Java class, you must use the Javareg program to register the class as a COM component.  You can then use <strong>Server.CreateObject</strong> with the PROGID or CLSID.</p>

<p>If the object instance does not need access to the ASP built-in objects and does not need to participate in a transaction, you can use the simpler mechanism provided by Java monikers to call the Java class directly.   You must be using version 2.0 of the Microsoft virtual machine for Java (provided with this release of Internet Information Server and Personal Web Server) to use Java monikers.</p>

<p>To instantiate an object by using monikers, use the VBScript or JScript <strong>GetObject</strong> statement and provide the full name of the Java class in the form <code><font face="courier" size="3">java:<em>classname</em></font></code>.  The following VBScript example creates an instance of the Java <strong>Date</strong> object.</p>

<pre><font face="courier" size="3">&lt;% 
Dim date
Set date = GetObject("java:java.util.Date")
%&gt;

&lt;p&gt; The date is &lt;%= date.toString() %&gt;</font></pre>

<p>Objects created by calling <strong>GetObject</strong> instead of <strong>Server.CreateObject</strong> cannot access the ASP built-in objects and cannot participate in a transaction.</p>


<h2><a name="H2_37773690">Using ASP Built-in Objects</a></h2>

<p>ASP  provides built-in objects that perform tasks. For example, the <strong>Request</strong> object stores the data passed to the server from an HTML form.  Unlike using the objects provided by an ActiveX component, you do not need to create an instance of an ASP built-in object to use it in your scripts.  You access the methods and properties of a built-in object in the same way in which you access the methods and properties of a component&#146;s objects, as described in this topic.</p>

<h2><a name="H2_37774333">Calling an Object Method</a></h2>

<p>A <em>method</em> is an action you can perform on an object or with an object.  The general syntax for calling a method is:</p>

<p><strong>Object.Method</strong>&nbsp;<em>parameters</em></p>

<p>The <em>parameters</em> vary depending on the method.</p>


<p>For example, you can use the <strong>Write</strong> method of the <strong>Response</strong> built-in object to send information to the browser as shown in the following statement:</p>

<pre><font face="courier" size="3">&lt;% Response.Write "Hello World" %&gt;</font></pre>

<p><strong>Note</strong>&#160;&#160;&#160;Some scripting languages do not support the <strong>Object.Method</strong>syntax.  If your language does not, you must add an entry to the registry in order to use that language as your primary scripting language.  See  <a href="iiwascln.htm">Working with Scripting Languages</a> for more information.</p>

<h2><a name="H2_37775276">Setting an Object Property</a></h2>

<p>A <em>property</em> is an attribute that describes the object.  Properties define object characteristics, such as the type of the object, or describe the state of an object, such as enabled or disabled. The general syntax is:</p>

<p><strong>Object.Property</strong></p>

<p>You can read the value of a property and set the value of a property.  For some objects, you can also add new properties.</p>

<p>For example, the Ad Rotator component has a property, <strong>Border</strong>, that specifies whether the ad has a border around it and determines the border thickness.  The following expression specifies no border:</p>

<pre><font face="courier" size="3">&lt;% MyAds.Border = 0 %&gt;</font></pre>

<p>For some properties, you can display the current value by using the ASP output directive.  For example, the following command returns TRUE if the browser is still connected to the server:</p>

<pre><font face="courier" size="3">&lt;%= Response.IsClientConnected %&gt;</font></pre>

<hr class="iis" size="1">


</font>
</body>
</html>


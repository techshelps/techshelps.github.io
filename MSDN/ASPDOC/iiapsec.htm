<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Securing an ASP Application</title>


<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 


<META NAME="DESCRIPTION" CONTENT="This topic describes issues related to securing your ASP based applications from unauthorized access and tampering.  Besides exposing your ASP applications to unwanted tampering, poorly configured security settings can also keep intended users from accessing your .asp files.">

<META NAME="MS-HAID"CONTENT="Securing an ASP Application">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">


<h1><a name="securinganaspapplication">Securing an ASP Application</a></h1>

<p>You should not underestimate the importance of properly configured security settings.  Besides exposing your ASP applications to unwanted tampering, poorly configured security settings can also keep intended users from accessing your .asp files.</p>  

<p>Your Web server offers you a variety of methods for securing your ASP based applications from unauthorized access and tampering.  After you finish reading the security information outlined in this topic, take time to carefully review your Windows&nbsp;NT and Web server security documentation.</p> 

<h2><a name="ntfspermissions">NTFS Permissions</a></h2> 

<p>You can secure your ASP application files by applying NTFS access <em>permissions</em> to individual files and directories.  NTFS permissions, the foundation of your Web server's security system, define the various levels of file and directory access assigned to a user or group of users. When a user with a valid Windows NT account attempts to access a restricted file, your computer checks the file's <em>Access Control List</em> (ACL), which defines the permissions assigned various user accounts and groups. If the user's account has sufficient permissions to open the file, the computer grants access.  For example, the owner of a Web application stored on your Web server will require Change permissions to view, alter, and delete the application's .asp files.  However, public users accessing the same application, should only be assigned Read permissions, which enable those users  to view, not alter, the application's Web pages.</p>  

<h3><a name="secuiringtheglobalasa">Securing the Global.asa</a></h3>

<p>To fully secure an ASP application, be sure to set NTFS file permissions for the appropriate user or group on your application’s Global.asa file. If your Global.asa includes commands that return information to the browser and you do not secure Global.asa, that information will be returned to the browser, even if the application’s other files are secured.</p>

<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;Be sure to apply NTFS permissions to an application's files in a consistent way .  For example, if you inadvertently apply overly restrictive NTFS permissions to an include file required by your application, users may not be able to view or run the application.  To prevent such problems, develop a careful plan for assigning NTFS permissions to your applications.</p>

<h2><a name="webserverpermissions">Web Server Permissions</a></h2>

<p>You can configure your Web server's permissions to restrict how all users view, run, and manipulate your ASP pages.  Unlike NTFS permissions, which provide granular control over the way specific users access your application files and directories, Web server permissions apply to all users, and do not discriminate between different types of user accounts.</p>

<p>For users to run your ASP applications, you must use the following rules when setting Web server permissions:</p>
<ul>
<li>Enable the Read <em>or</em> Script permissions for virtual directories containing .asp files.</li>
<li>Enable Read <em>and</em> Script permissions for virtual directories containing  both .asp and other files, such as .html files, that contain scripts.</li>	
<li>Enable Read <em>and</em> Execute permissions for virtual directories containing both .asp and other executable files, such as .exe and .dll files, which require the Execute permission to run.</li>
</ul>

<h3><a name="scriptmappedfiles">Script-Mapped Files</a></h3>

<p>Application script-mapping ensures that your Web server will not accidentally download the source code for an .asp file.  For example, even if you set Read permissions for a directory containing a particular .asp file, your Web server will not return that file's code to the user, as long as the .asp file belongs to a script-mapped application.</p>

<h2><a name="cookiesecurity">Cookie Security</a></h2>

<p>ASP uses SessionID cookies to track information for specific Web browsers over the course of an application visit, or <em>session</em>.  This means that an HTTP request with a matching cookie is assumed to have come from the same Web browser.  Your Web server can use SessionID cookies to configure ASP applications with user-specific session information.  For example, if your application is an online music store that enables users to select and purchase compact discs, then a SessionID might be used to track each a user's selections as the user wanders throughout the application.</p>

<h3><a name="canvandalsguessthesessionid">Can Vandals Guess the SessionID?</a></h3>

<p>To prevent computer vandals from guessing the SessionID cookie and gaining access to a legitimate user's session variables, your Web server assigns a randomly generated number to each SessionID.  Whenever the user's Web browser returns a SessionID cookie, the server extracts the SessionID and the assigned number.  The server then checks this number against a generated number, stored exclusively on the server.  If the numbers match, the user obtains access to session variables.  The effectiveness of this technique lies in the length of the assigned number (64-bits), which makes it highly unlikely that a computer vandal could hijack a user's active session by guessing the SessionID.</p>

<h3><a name="encryptingsensitivesessionidcookies">Encrypting Sensitive SessionID Cookies</a></h3>

<p>A computer vandal, able to intercept a user's sessionID cookie, could use the cookie to impersonate that user.  If an ASP application contains private information, a credit card or bank account number, then a vandal with a stolen cookie could start an active session on the application and access this information.  You can prevent interception of SessionID cookies by encrypting the communication link between your Web server and the user's browser.</p>

<h2><a name="protectingaspcontent">Protecting Restricted ASP Content with Authentication</a></h2>

<p>You can require that every user attempting to access your restricted ASP content have a valid Windows&nbsp;NT account user name and password.  Each time a user attempts access restricted content, your Web server <em>authenticates</em>, or confirms, the user's identity to ensure that the user has a valid Windows&nbsp;NT account.</p> 

<p>Your Web server supports several authentication methods including:</p>
<ul>
<li><strong>Basic authentication</strong>&nbsp;&nbsp;&nbsp;Prompts users to enter user names and passwords.</li>
<li><strong>Windows NT Challenge/Response authentication</strong>&nbsp;&nbsp;&nbsp; Cryptographically obtains user identification information from the user's Web browser. </li>
</ul>

<p>However, your Web server will authenticate users only if you disable anonymous access or when the Windows&nbsp;NT File System permissions restrict anonymous access.</p>

<h3><a name="protectingthemetabase">Protecting the Metabase</a></h3>

<p>ASP scripts that access the metabase require administrator privileges on the machine on which your Web server is running. When you execute these scripts from a remote machine, you must connect through an authenticated connection, such as a connection using the Windows&nbsp;NT Challenge/Response authentication method. You should create a server or directory for your administrative .asp files and set the directory security authentication method to Windows&nbsp;NT Challenge/Response for the server or directory. Currently, only Microsoft Internet Explorer, version&nbsp;2.0 or later, supports Windows&nbsp;NT Challenge/Response authentication.</p>


<h2><a name="securingapplicationswithssl">Securing Applications with SSL</a></h2>

<p>The Secure Sockets Layer (SSL)&nbsp;3.0 protocol, implemented as a Web server security feature, provides a secure virtually impervious way of establishing an encrypted communication link with users.  SSL guarantees the authenticity of Web content and reliably verifies the identity of users accessing restricted Web sites.</p>

<p>With SSL, you can require users attempting to access your ASP application to establish an encrypted communication link with your server; preventing the interception of sensitive information exchanged between the user and the application.</p>

<h3><a name="secringincludedfiles">Securing Included Files</a></h3>

<p>If you include a file that resides in an SSL-enabled directory from an .asp file that resides in an unsecured virtual root, SSL is not applied to the included file. Thus, to ensure that SSL is applied, be sure that both the including and the included files reside in SSL-enabled directories.</p>

<h3><a name="clientcertificateauthentication">Client Certificate Authentication</a></h3>

<p>A highly secure way regulate access to your ASP applications is to require users to log on with a <em>client certificate</em>.  A digital identification containing information about the identity of the user, client certificates perform the same function as conventional forms of identification, such as a passport or driver's license. Users usually obtain client certificates from a trusted, third-party organization that verifies identification information before issuing a certificate. (Typically, these organizations will require a name, address, phone number, and organization name, however, the extent of this information can vary depending the level of identification assurance required from the certificate.)</p>

<p>Whenever a user attempts to log on to an application requiring a certificate, the user's Web browser automatically forwards the certificate to the server.  If your Web server's Secure Sockets Layer (SSL) certificate mapping features are properly configured, your server can authenticate the user before permitting access to an ASP application.</p>  

<h3><a nmae="aspsctiptsforprocessingcertificates">ASP Scripts for Processing Certificates</a></h3>

<p>As an ASP application developer, you can write scripts to confirm the presence of a certificate and read certificate fields.  For example, you can access the user name or company name fields from the certificate.  Active Server Pages stores certificate information in the <strong>ClientCertificate</strong> collection of the <strong>Request</strong> object.</p>

<p>Before you can process client certificates with ASP, however, your Web server must be configured to either accept or require a client certificate; otherwise the <strong>ClientCertificate</strong> collection will be empty.</p>


<hr class="iis" size="1">


</font>
</body>
</html>


<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Collections</title>

<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){        
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {                                             
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 


<META NAME="DESCRIPTION" CONTENT="Explains how to use the built-in object collections, including iterating through a collection.">

<META NAME="MS-HAID"CONTENT="Using Collections">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">

<h1><a name="usingcollections">Using Collections</a></h1>

<p>Most of the ASP built-in objects support collections.  A <em>collection</em> is a place to store strings, numbers, objects and other values.  A collection is is similar to an array except that it expands and contracts automatically as items are stored in or retrieved from the collection.  Unlike an array, the position of an item will move as the collection is modified.  You can access an item in a collection by its name, by its index (position) in the collection, or by iterating through all the items in the collection.</p>

<h2><a name="H2_37766951">Accessing an Item by Name or Index</a></h2>

<p>You can access a specific item in a collection by using its name.  For example, the <strong>Contents</strong> collection holds any variables stored in the <strong>Session</strong> object.  It also holds any objects created by calling <strong>Server.CreateObject</strong>.  
Suppose you have stored the following user information in the <strong>Session</strong> object:</p>

<pre><font face="courier" size="3">&lt;%
Session.Contents("FirstName") = "Sam"
Session.Contents("LastName") = "Woo"
Session.Contents("Age") = 29
%&gt;</font></pre>

<p>You can access an item by using the name you associated with the item when you stored it in the collection.   For example, the following expression returns the string "Sam":</p>

<pre><font face="courier" size="3">&lt;%= Session.Contents("FirstName") %&gt;</font></pre>

<p>You could also access an item by using the index, or number, associated with an item.  For example, the following expression retrieves the information stored in the second slot of the <strong>Session</strong> object and returns "Woo":</p>

<pre><font face="courier" size="3">&lt;%= Session.Contents(2) %&gt;</font></pre>

<p>ASP collections are numbered starting with 1.  The index associated with an item might change as items are added to or removed from the collection.  You should not depend on an item&#146;s index remaining the same.  Indexed access is generally used to iterate through a collection, as described in the following topics, or to access an item in a read-only collection.</p>

<p>You can access items by name using a shorthand notation.  ASP searches the collections associated with an object in a particular order.  If an item with a particular name appears only once in an object's collections, you can eliminate the collection name:</p>

<pre><font face="courier" size="3">&lt;%= Session("FirstName") %&gt;</font></pre>

<p>Eliminating the collection name is generally safe when you are accessing items stored in the <strong>Application</strong> or <strong>Session</strong> object.  For the <strong>Request</strong> object, however, it is safer to specify the collection name because the collections could easily contain items with duplicated names.</p>

<h2><a name="H2_37768485">Iterating through a Collection</a></h2>

<p>You can iterate through all the items in a collection to see what is stored in the collection or to modify the items. You must supply the collection name when you iterate through a collection.   For example, you can use the VBScript <strong>For...Each</strong> statement to access the items you stored in the <strong>Session</strong> object:</p>

<pre><font face="courier" size="3">&lt;% 
'Declare a counter variable.
Dim Item 

'For each item in the collection, display its value.
For Each Item in Session.Contents 
  Response.Write Session.Contents(Item) & "&lt;BR&gt;"
Next
%&gt;</font></pre>

<p>You can also iterate through a collection by using the VBScript <strong>For...Next</strong> statement.  For example, to list the three items stored in <strong>Session</strong> by the previous example, use the following statements:</p>

<pre><font face="courier" size="3">&lt;% 
'Declare a counter variable.
Dim Item

'Repeat the loop until the value of counter is equal to 3.
For Item = 1 to 3
  Response.Write Session.Contents(Item) & "&lt;BR&gt;"
Next
%&gt;</font></pre>

<p>Because you do not usually know how many items are stored in a collection, ASP supports the <strong>Count</strong> property for a collection, which returns the number of items in the collection.  You use the <strong>Count</strong> property to specify the end value of the counter.</p> 

<pre><font face="courier" size="3">&lt;% 
'Declare a counter variable.
Dim Item

'Repeat this loop until the counter equals the number of items
'in the collection.
For Item = 1 to Session.Contents.Count
   Response.Write Session.Contents(Item) & "&lt;BR&gt;"
Next
%&gt;</font></pre>

<p>In JScript, you use the <strong>for</strong> statement to loop through a collection.  For greater efficiency when using the <strong>Count</strong> property with a JScript <strong>for</strong> statement, you should assign the value of <strong>Count</strong> to a local variable and use that variable to set the end value of the counter.  That way, the script engine does not have to look up the value of <strong>Count</strong> each time through the loop.  The following example demonstrates this technique:</p>

<pre><font face="courier" size="3">&lt;% 
var item, numitems;
numitems = Session.Contents.Count;
for (item = 1; item &lt;= numitems; item++) {
  Response.Write(Session.Contents(item) + "&lt;BR&gt;")
}
%&gt;</font></pre>


<p>Version 3.0 of Microsoft JScript introduces a new <strong>Enumerator</strong> object that you can also use to iterate through an ASP collection.  The <strong>atEnd</strong> method indicates whether there are any more items in the collection.  The <strong>moveNext</strong> method moves to the next item in the collection.</p>

<pre><font face="courier" size="3">&lt;%
// Create an Enumerator object
var mycoll = new Enumerator(Session.Contents);

//Iterate through the collection and display each item
while (!mycoll.atEnd()) {
  var x  = mycoll.item();
  Response.Write(Session.Contents(x) + "&lt;BR&gt;");
  mycoll.moveNext();
}
%&gt;</font></pre>

<h2><a name="H2_37771913">Iterating through a Collection with Subkeys</a></h2>

<p>Scripts might embed several related values in a single cookie to reduce the number of cookies passed between the browser and the Web server.  The <strong>Cookies</strong> collection of the <strong>Request</strong> and <strong>Response</strong> objects can thus hold multiple values in a single item.  These subitems, or subkeys, can be accessed individually.  Subkeys are supported only by the <strong>Request.Cookies</strong> and <strong>Response.Cookies</strong> collections.  <strong>Request.Cookies</strong> supports only read operations; <strong>Response.Cookies</strong> supports only write operations.</p>

<p>You can enumerate all the cookies in the <strong>Request.Cookie</strong> collection and all the subkeys in a cookie. However, iterating through subkeys on a cookie that does not have subkeys will not produce any output. You can avoid this situation by first checking to see whether a cookie has subkeys by using the <strong>.HasKeys</strong> syntax. This technique is demonstrated in the following example.</p>

<pre><font face="courier" size="3">&lt;% 
'Declare counter variables
Dim Cookie, Subkey

'Display the entire cookie collection.
For Each Cookie in Request.Cookies
  Response.Write Cookie & "&lt;BR&gt;"
    If Request.Cookies(Cookie).HasKeys Then
      'Display the subkeys
      For Each Subkey in Request.Cookies(Cookie)
	Response.Write Subkey & "=" & Request.Cookies(Cookie)(Subkey) & "&lt;BR&gt;"
      Next
    Else
      Response.Write "No subkeys in this cookie &lt;BR&gt;"
    End If
Next    
%&gt;</font></pre>


<h3><a name="H3_37773518">Iterating through a Collection of Objects</a></h3>

<p>The <strong>Session</strong> and <strong>Application</strong> collections can hold either scalar variables or object instances.   The <strong>Contents</strong> collection holds both scalar variables and object instances created by calling <strong>Server.CreateObject</strong>.  The <strong>StaticObjects</strong> collection holds objects created by using the HTML &lt;OBJECT&gt; element in the Global.asa file.</p>

<p>When you iterate through a collection that contains objects, you can either access the object&#146;s identifier or access the object&#146;s methods or properties.    For example, suppose your application uses several objects to create a user account, and each object has an initialization method.  You could iterate through the <strong>StaticObjects</strong> collection to call each initialization method:</p>

<pre><font face="courier" size="3">&lt;%
For Each Object in Session.StaticObjects
  Session.StaticObjects(Object).InitializeUser
Next
%&gt;</font></pre>

<h3><a name="H3_37774582">What&#146;s Different About ASP Collections?</a></h3>

<p>Although the ASP collections described in this topic are similar to the Visual Basic <strong>Collection</strong> object, there are some differences.  The ASP collections support the <strong>Count</strong> property and the <strong>Item</strong> method. They do not support the <strong>Add</strong> and <strong>Remove</strong> methods.</p>

<hr class="iis" size="1">

</font>
</body>
</html>



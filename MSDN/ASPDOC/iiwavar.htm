<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Variables and Constants</title>

<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 



<META NAME="DESCRIPTION" CONTENT="Explains how to use variables in ASP scripts.">

<META NAME="MS-HAID"CONTENT="Using Variables and Constants">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">	


<h1><a name="H1_37780314">Using Variables and Constants</a></h1>

<p>A <em>variable</em> is a named storage location in the computer's memory that contains data, such as a number or a text string.  The data contained in a variable is called the variable's <em>value</em>.  Variables give you a way to store, retrieve, and manipulate values using names that help you understand what the script does.</p>

<h2><a name="H2_37780793">Declaring and Naming Variables</a></h2>

<p>Follow the rules and guidelines of your scripting language for naming and declaring variables.  Even if you are not required to declare a variable before using it, it is a good habit to develop because it helps prevent errors.  <em>Declaring</em> a variable means to tell the script engine that a variable with a particular name exists so that you can use references to the variable throughout a script.</p>


<h3><a name="H3_37781338">VBScript</a></h3>

<p>VBScript does not require variable declarations, but it is good scripting practice to declare all variables before using them.  To declare a variable in VBScript, use the <strong>Dim</strong>, <strong>Public</strong>, or <strong>Private</strong> statement. For example:</p>

<pre><font face="courier" size="3">&lt;% Dim UserName %&gt;</font></pre>

<p>You can use the VBScript <strong>Option Explicit</strong> statement in an .asp file to require variables to be explicitly declared.  The <strong>Option Explicit</strong> statement must appear after any ASP directives and before any HTML text or script commands.  This statement only affects ASP commands that are written in VBScript; it has no affect on JScript commands.</p>

<h3><a name="H3_37782240">JScript</a></h3>

<p>Microsoft JScript requires variable declarations only for variables that are local to a procedure, but it is good scripting practice to declare all variables before using them.  To declare a variable, use the <strong>var</strong> statement.  For example:</p>

<pre><font face="courier" size="3">&lt;% var UserName; %&gt;</font></pre>

<h2><a name="H2_37782652">Variable Scope</a></h2>

<p> The <em>scope</em>, or lifetime, of a variable determines which script commands can access a variable.  A variable declared inside a procedure has <em>local scope</em>; the variable is created and destroyed every time the procedure is executed.  It cannot be accessed by anything outside the procedure.  A variable declared outside a procedure has <em>global scope</em>; its value is accessible and modifiable by any script command on an ASP page.</p>

<p>If you declare variables, a local variable and a global variable can have the same name.  Modifying the value of one will not modify the value of the other.  If you do not declare variables, however, you might inadvertently modify the value of a global variable.  For example, the following script commands return the value 1 even though there are two variables named Y:</p>

<pre><font face="courier" size="3">&lt;% 
Dim Y
Y = 1
Call SetLocalVariable
Response.Write Y

Sub SetLocalVariable
  Dim Y
  Y = 2
End Sub
%&gt;</font></pre>

<p>The following script commands, on the other hand, return the value 2 because the variables are not explicitly declared.  When the procedure call sets Y to 2,  the scripting engine assumes the procedure intended to modify the global variable:</p>

<pre><font face="courier" size="3">&lt;% 
Y = 1
Call SetLocalVariable
Response.Write Y

Sub SetLocalVariable
  Y = 2
End Sub
%&gt;</font></pre>

<p>To avoid problems, develop the habit of explicitly declaring all variables. This is particularly important if you use the <strong>#include</strong> statement to include files into your ASP page.  The included script is contained in a separate file but is treated as though it were part of the including file.   It is easy to forget that you must use different names for variables used in the main script and in the included script unless you declare the variables.</p> 

<h2><a name="H2_37784611">Giving Variables Session or Application Scope </a></h2>

<p>Global variables are accessible only on a single ASP page.  To make a variable accessible beyond a single page, give the variable either session or application scope.  Session-scoped variables are available to all pages in one ASP application that are requested by one user.  Application-scoped variables are available to all pages in one ASP application that are requested by any user.  Session variables are a good way to store information for a single user, such as preferences or the user's name or identification.  Application variables are a good way to store information for all users of a particular application, such as an application-specific greeting or initial values needed by the application.</p>

<p>ASP provides two built-in objects into which you can store variables: the <strong>Session</strong> object and the <strong>Application</strong> object.</p>

<p>You can also create object instances with session or application scope.  For more information, see <a href="iiwaobu.htm">Setting Object Scope</a>.</p>

<h3><a name="H3_37785903">Session Scope</a></h3>

<p>To give a variable session scope, store it in the <strong>Session</strong> object by assigning a value to a named entry in the object.  
For example, the following commands store two new variables in the <strong>Session</strong> object:</p>

<pre><font face="courier" size="3">&lt;% 
Session("FirstName") = "Jeff"
Session("LastName") = "Smith" 
%&gt;</font></pre>

<p>To retrieve information from the <strong>Session</strong> object, access the named entry by using the output directive (<code><font face="courier" size=3>&lt;%=</font></code>) or <strong>Response.Write</strong>.  The following example uses the output directive to display the current value of Session("FirstName"):</p>

<pre><font face="courier" size="3">Welcome &lt;%= Session("FirstName") %&gt;</font></pre>

<p>You can store user preferences in the <strong>Session</strong> object, and then access those preferences to determine what page to return to the user.  For example, you can allow a user to specify a text-only version of your content in the first page of the application and apply this choice on all subsequent pages that the user visits in this application.</p>

<pre><font face="courier" size="3">&lt;% If Session("ScreenResolution") = "Low" Then %&gt; 
This is the text version of the page.
&lt;% Else %&gt; 
This is the multimedia version of the page.
&lt;% End If %&gt; </font></pre>

<h3><a name="H3_37787278">Application Scope</a></h3>

<p>To give a variable application scope, store it in the <strong>Application</strong> object by assigning a value to a named entry in the object.  For example, the following command stores an application-specific greeting in the <strong>Application</strong> object:</p>

<pre><font face="courier" size="3">&lt;% Application("Greeting") = "Welcome to Exploration Air" %&gt;</font></pre>

<p>To retrieve information from the <strong>Application</strong> object, use the ASP output directive output directive (<code><font face="courier" size=3>&lt;%=</font></code>) or <strong>Response.Write</strong> to access the named entry from any subsequent page in the application.  The following example uses the output directive to display the value of Application("Greeting"):</p>

<pre><font face="courier" size="3">&lt;%= Application("Greeting") %&gt;</font></pre>

<h2><a name="H2_37787975">Using Constants</a></h2>

<p>A <em>constant</em> is a name that takes the place of a number or string.  Some of the base components provided with ASP, such as ActiveX Data Objects (ADO), define constants that you can use in your scripts.  A component can declare constants in a <em>component type library</em>, a file that contains information about objects and types supported by an ActiveX component.  Once you have declared a type library in your Global.asa file, you can use the defined constants in any script in the application.</p>

<p> To declare a type library, use the &lt;METADATA&gt; tag in the Global.asa file for your application.  For example, to declare the ADO type library, use the following statements:</p>  

<pre><font face="courier" size=3>&lt;!--METADATA TYPE="typelib"
FILE="c:\program files\common files\system\ado\msado15.dll"
--&gt;</font></pre>

<p> You can then use ADO constants in any script in the same application as the Global.asa file.  In the following example, <code><font face="courier" size=3>adOpenKeyset</font></code> and <code><font face="courier" size=3>adLockOptimistic</font></code> are ADO constants:</p>

<pre><font face="courier" size=3>'Create and Open Recordset Object
Set RsCustomerList = Server.CreateObject("ADODB.Recordset")
RsCustomerList.ActiveConnection = OBJdbConnection
RsCustomerList.CursorType = adOpenKeyset
RsCustomerList.LockType = adLockOptimistic</font></pre>

<p>In previous versions of ASP,  some components provided constant definitions in files that had to be included in each ASP file that used those constants.  The use of the <strong>#include</strong> directive to include constant definitions is still supported, but type libraries are generally easier to use and make your scripts more easily upgraded.  Components might not provide constant definition files in future releases of ASP.</p>

<p> You can define your own constants.  In VBScript, use the <strong>Const</strong> statement.  In  JScript, use the <strong>var</strong> statement.  If you want to use your constants on more than one ASP page, put the definitions in a separate file and include them in each ASP page that uses the constants.</p>


<hr class="iis" size="1">


</font>
</body>
</html>


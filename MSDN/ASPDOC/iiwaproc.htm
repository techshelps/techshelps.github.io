<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Writing Procedures</title>

<SCRIPT LANGUAGE="JavaScript">
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="cocss.css">');
</script> 

<META NAME="DESCRIPTION" CONTENT="Explains how to write procedures in ASP scripts.">

<META NAME="MS-HAID"CONTENT="Writing Procedures">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">	


<h1><a name="H1_37776449">Writing Procedures</a></h1>

<p>A <em>procedure</em> is a group of script commands that performs a specific task and can return a value. You can define your own procedures and call them repeatedly in your scripts.</p>

<p>You can place procedure definitions in the same .asp file that calls the procedures, or you can put commonly used procedures in a shared .asp file and use the SSI <strong>#include</strong> directive to include it in other .asp files that call the procedures. Alternatively, you could package the functionality in an ActiveX component.</p>

<h2><a name="H2_37777134">Defining Procedures</a></h2>

<p>Procedure definitions can appear within &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags and must follow the rules for the declared scripting language. Use the &lt;SCRIPT&gt; element for procedures in languages other than the primary scripting language.  Use the scripting delimiters (&lt;% and %&gt;) for procedures in the primary scripting language.</p>

<p>When you use the HTML &lt;SCRIPT&gt; tag, you must use two attributes to ensure server-side processing of the script.  The syntax for using the &lt;SCRIPT&gt; tag is:</p>

<pre><font face="courier" size="3">&lt;SCRIPT RUNAT=SERVER LANGUAGE=JSCRIPT&gt;
  <em>procedure definition</em>
&lt;/SCRIPT&gt;</font></pre>

<p>The RUNAT=SERVER attribute tells the Web server to process the script on the server.  If you do not set this attribute, the script is processed by the client browser.  The LANGUAGE attribute determines the scripting language used for this script block.  You can specify any language for which you have the scripting engine.  To specify VBScript, use the value VBSCRIPT.  To specify JScript, use the value JSCRIPT.   If you do not set the LANGUAGE attribute, the script block is interpreted in the primary scripting language.</p>

<p>The commands in the script block must form one or more complete procedures in the chosen scripting language. For example, the following commands define the JScript procedure <strong>MyFunction</strong>.</p>

<pre><font face="courier" size="3">&lt;HTML&gt;
&lt;SCRIPT RUNAT=SERVER LANGUAGE=JSCRIPT&gt;
  function MyFunction()
  {
      Response.Write("MyFunction Called")
  }  
&lt;/SCRIPT&gt;</font></pre>


<p><strong><span style="color: #0000FF"><font color="#0000FF">Important</font></span></strong>&nbsp;&nbsp;&nbsp;
Do not include within server-side &lt;SCRIPT&gt; tags any script commands that are not part of complete procedures. Commands that are not part of a procedure may cause unpredictable results because the order of execution is not predictable.  In addition, you cannot  use the ASP output expression <code><font face="courier" size="3">&lt;%=</font></code> within a procedure.  Instead, you must use <strong>Response.Write</strong>.</p>

<h2><a name="callingprocedures">Calling Procedures</a></h2>

<p>To call procedures, include the name of the procedure in a command. If you are calling JScript procedures from VBScript, you must use parentheses after the procedure name; if the procedure has no arguments, use empty parentheses.  If you are calling either VBScript or JScript procedures from JScript, always use parentheses after the procedure name.</p>

<p>For VBScript, you can also use the <strong>Call</strong> keyword when calling a procedure. However, if the procedure that you are calling requires arguments, the argument list must be enclosed in parentheses. If you omit the <strong>Call</strong> keyword, you also must omit the parentheses around the argument list. If you use <strong>Call</strong> syntax to call any built-in or user-defined function, the function&#146;s return value is discarded.</p>

<p>The following example illustrates creating and calling procedures by using two different scripting languages (VBScript and JScript).</p>

<pre><font face="courier" size="3">&lt;%@ LANGUAGE = VBSCRIPT &gt;%
&lt;HTML&gt; 
&lt;BODY&gt;
&lt;% Call Echo %&gt; 
&lt;BR&gt;
&lt;% Call PrintDate() %&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;%
Sub Echo 
  Response.Write "&lt;TABLE&gt;" 
  Response.Write "&lt;TR&gt;&lt;TH&gt;Name&lt;/TH&gt;&lt;TH&gt;Value&lt;/TH&gt;&lt;/TR&gt;" 
  Set Params = Request.QueryString 
  For Each p in Params 
    Response.Write "&lt;TR&gt;&lt;TD&gt;" &amp; p &amp; "&lt;/TD&gt;&lt;TD&gt;" &amp; _ 
    Params(p) &amp; &quot;&lt;/TD&gt;&lt;/TR&gt;&quot; 
  Next 
Response.Write "&lt;/TABLE&gt;" 
End Sub 
%&gt;

&lt;SCRIPT LANGUAGE=JScript RUNAT=Server&gt; 
function PrintDate() 
{ 
  var x
  x = new Date() 
  Response.Write(x.toString()) 
} 
&lt;/SCRIPT&gt;</font></pre>


<h2><a name="H2_37781124">Passing Arrays to Procedures</a></h2>

<p>To pass an entire array to a procedure in VBScript, use the array name followed by empty parentheses; in JScript, use empty square brackets.</p>


<hr class="iis" size="1">


</font>
</body>
</html>


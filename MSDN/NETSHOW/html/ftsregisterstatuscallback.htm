<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FtsRegisterStatusCallback Method</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h4><a name="ftsregisterstatuscallback"></a>FtsRegisterStatusCallback Method</h4>
<p>
Registers a transfer notification request callback. Each parameter is independent, and more than one kind of request can be sent in a single call to this method. Putting 0 (zero) in a parameter indicates that you do not want to be notified for that particular kind of request. Each unique collection of parameter values makes up a separate notification request. If the caller wants to revoke the request, each unique collection of parameter values must be used in the call to <a href="ftsrevokestatuscallback.htm">FtsRevokeStatusCallback</a>.</p>
<p>
When a requested notification occurs, the corresponding event is triggered. By placing code that reads the appropriate properties in the corresponding subroutine, you can process the transfer notification.</p>
<p class=blue>
<b>Syntax</b></p>
<p>
<i>NSFile</i>.<b>FtsRegisterStatusCallback</b>( <i>Cur, Per, Data, Tot, Pack, Drop, Corr, Bogus, Dup, Flags, Param )</i></p>
<p class=blue>
<b>Parameters</b></p>
<p class=dt>
<i>Cur</i></p>
<p class=indent>
Number of file data bytes that will transfer before each notification occurs. Does not include file header bytes or other non-data file information such as redundancy bytes. For example, specifying 8192 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 8KB of file data bytes transferred.</p>
<p class=dt>
<i>Per</i></p>
<p class=indent>
Percent of file data bytes that will transfer before each notification occurs. Does not include file header bytes or other non-data file information such as redundancy bytes. For example, specifying 10 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 10 percent of the file data bytes transferred.</p>
<p class=dt>
<i>Data</i></p>
<p class=indent>
Total data bytes (for all files requested) that will transfer before each notification occurs. Does not include file header bytes or other non-data file information such as redundancy bytes. For example, specifying 8192 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 8KB of file data bytes transferred, even if this included more than one file.</p>
<p class=dt>
<i>Tot</i></p>
<p class=indent>
Total bytes (for all files requested) that will transfer before each notification occurs, including file header bytes or other non-data file information such as redundancy bytes. For example, specifying 8192 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 8KB of file bytes transferred, even if this included more than one file.</p>
<p class=dt>
<i>Pack</i></p>
<p class=indent>
Number of packets that will transfer before each notification occurs. For example, specifying 100 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 100 packets transferred</p>
<p class=dt>
<i>Drop</i></p>
<p class=indent>
Number of packets that are dropped before each notification occurs. For example, specifying 50 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 50 packets dropped.</p>
<p class=dt>
<i>Corr</i></p>
<p class=indent>
Number of packets that are corrected before each notification occurs. For example, specifying 25 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 25 packets received and corrected.</p>
<p class=dt>
<i>Bogus</i></p>
<p class=indent>
Number of bogus packets that are received before each notification occurs. For example, specifying 25 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every 25 bogus packets received. A <i>bogus packet</i> is a packet that is received on the same IP address and port as the receiver is listening for, but which is not part of an expected file transfer operation. For example, this would happen if a file transfer were taking place and the receiving address started getting audio packets on the same address.</p>
<p class=dt>
<i>Dup</i></p>
<p class=indent>
Number of duplicate packets that are received before each notification occurs. For example, specifying 5 would trigger an <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> notification for every five duplicate packets received.</p>
<p class=dt>
<i>Flags</i></p>
<p class=indent>
The following flags are used by this method to define the type of notification requested. Multiple flags can be used on each request. If 0 (zero) is specified, the <b>File Transfer</b> object would default to a "transfer completed" notification (the same value as 8).</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=11%><b>Value </b></td>
<td class=blue width=89%><b>Description </b></td>
</tr>
<tr valign=top>
<td width=11%>0 </td>
<td width=89%>Notification requested for a completed transfer operation (same as 8). </td>
</tr>
<tr valign=top>
<td width=11%>4 </td>
<td width=89%>Notification requested for the start of a transfer operation. </td>
</tr>
<tr valign=top>
<td width=11%>8 </td>
<td width=89%>Notification requested for a completed transfer operation (same as 0). </td>
</tr>
<tr valign=top>
<td width=11%>16 </td>
<td width=89%>Notification requested for the start of each individual file transfer operation. </td>
</tr>
<tr valign=top>
<td width=11%>32 </td>
<td width=89%>Notification requested for a completed transfer operation for each individual file. </td>
</tr>
<tr valign=top>
<td width=11%>64 </td>
<td width=89%>Notification requested for any change in the status of the file transfer. </td>
</tr>
</table><br>
<p class=dt>
<i>Param</i></p>
<p class=indent>
A parameter used by the caller to identify different calls. The content is arbitrarily chosen by the caller. Any Long number is valid.</p>
<p class=blue>
<b>Return Values</b></p>
<p>
This method does not return a value. However, it does return a Microsoft COM <b>HRESULT</b> error code to the Visual Basic Script <b>Error</b> object.</p>
<p>
The following codes are passed to the <b>Error</b> object:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=21%><b>Decimal Value </b></td>
<td class=blue width=79%><b>Description (HRESULT) </b></td>
</tr>
<tr valign=top>
<td width=21%>0 </td>
<td width=79%>The action requested was successful. (<b>S_OK</b>) </td>
</tr>
<tr valign=top>
<td width=21%>1 </td>
<td width=79%>The action requested is already taking place. (<b>S_FALSE</b>) </td>
</tr>
<tr valign=top>
<td width=21%>-2147467259 </td>
<td width=79%>The action requested could not take place for an unspecified reason.(<b>E_FAIL</b>) </td>
</tr>
<tr valign=top>
<td width=21%>-2147024882 </td>
<td width=79%>The action requested could not take place because the <b>File Transfer</b> object was out of memory. (<b>E_OUTOFMEMORY</b>) </td>
</tr>
<tr valign=top>
<td width=21%>-2147024809 </td>
<td width=79%>The action requested could not take place because an invalid argument was supplied. (<b>E_INVALIDARG</b>) </td>
</tr>
</table><br>
<p class=blue>
<b>Remarks</b></p>
<p>
For asynchronous transfers, it is recommended that a default notification be registered before calling <a href="ftsstartfiletransferreceive.htm">FtsStartFileTransferReceive</a>. The default call for an object named <i>object</i> would be:</p>
<pre><code>call object.FtsRegisterStatusCallback(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
</code></pre>
<p>
File transfer notifications have an internal granularity. For example, if 100 bytes at a time are transferred, and the caller requests notification every 10 bytes, the caller will be notified only every 100 bytes. The granularity of each type of notification is implementation-specific.</p>
<p>
The caller will always receive a notification even if the increment of change is larger than that requested. For example, if the caller requests notification every 10 bytes, and a 45-byte file is sent, the caller will receive five notifications. Or if the caller requests notification every 100 bytes and only 10 bytes are sent, the caller will receive one notification.</p>
<p>
This method registers callbacks for the <i>progress</i> and changes of <i>status</i> of a file transfer operation. Progress notifications are processed by <a href="ftsontransferprogress.htm">FtsOnTransferProgress</a> . Status notifications are processed by <a href="ftsonstatuschanged.htm">FtsOnStatusChanged</a>, as well as the status-specific events such as <a href="ftsontransferstarted.htm">FtsOnTransferStarted</a>, <a href="ftsontransfercompleted.htm">FtsOnTransferCompleted</a>, <a href="ftsonfiletransferstarted.htm">FtsOnFileTransferStarted</a>, and <a href="ftsonfiletransfercompleted.htm">FtsOnFileTransferCompleted</a>.</p>
<p>
Notification callbacks do not have to be revoked. When the <b>File Transfer</b> object shuts down, all notifications are also destroyed.</p>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

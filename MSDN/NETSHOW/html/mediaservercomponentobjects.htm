<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MediaServer Component Objects</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h4><a name="mediaservercomponentobjects"></a>MediaServer Component Objects</h4>
<p>
In addition to the methods, properties, and events used for configuring and managing Theater servers, the MediaServer control also manages collections of component objects that encapsulate the status and behavior of clients, servers, disk drives, and titles. Some objects represent a collection of other objects. These component objects are:
<ul type=disc>
<li>
A <b>Client </b>object encapsulates the state of a client. It contains the ID of the client, its IP address, the title, if any, being streamed to the client, and the name of its host computer.</li>
<li>
A <b>Clients</b> object is a collection of <b>Client</b><i> </i>objects. As with all the collections, you can retrieve a <b>Client</b> member object by using its <b>Item</b> property and query the total number of <b>Client</b> objects by using the <b>Count</b> property. You can also remove a <b>Client</b> object by calling its <b>Remove</b> method. </li>
<li>
A <b>ContentServer </b>object encapsulates the state of a content server. It holds information about its identifier, the content disk drives it manages, the host computer it is running on, and its working status. A content server is accessible through its associated <b>ContentServer</b> object.</li>
<li>
A <b>ContentServers</b> object represents a collection of <b>ContentServer</b> objects. It can contain from one to fourteen such objects. </li>
<li>
A content server <b>Disk</b> object provides access to a content server disk drive dedicated for multimedia content storage. You can query the ID, its drive letter, the disk size, and the status, with the appropriate properties. You can take the disk online or offline by invoking its <b>Online </b>method and repair the content on the disk by calling its <b>Rebuild</b> method. </li>
<li>
A content server <b>Disks</b> object represents a collection of <b>Disk</b> objects. You can retrieve a member <b>Disk</b> object with the <b>Item</b> property and query the total number of member <b>Disk</b> objects with the <b>Count</b> property. Each <b>ContentServer</b> object manages a <b>Disks</b> collection.</li>
<li>
A <b>Title</b> object encapsulates the information about a multimedia title, including its description, author, copyright, size, version, format, play duration, and creation time.</li>
<li>
A <b>Titles</b> collection object contains a number of <b>Title</b> objects. You can call its <b>Add</b> or <b>Remove</b> method to add a title to or remove one from the title server and the <b>Titles</b> collection.</li>
<li>
A <b>Walker</b> object encapsulates the information about file walker utilities used in the conversion of title format.</li>
<li>
A <b>Walkers</b> collection object contains a number of <b>Walker</b> objects. In addition to exposing the <b>Item</b> and <b>Count</b> properties, it offers the <b>Find</b> functionality for searching a <b>Walker</b> object by matching its format type.</li>
<li>
A <b>Logging</b> object exposes methods and properties for managing event log monitoring applications.</li>
</ul>
<p>
The following chart illustrates the hierarchy of objects managed by the MediaServer control:</p>
<p>
<img src="nstadmin1.gif" border=0></p>
<h6>Using MediaServer Component Objects</h6>
<p>
As with any object model, you access the methods and properties with the “dot” operator, as illustrated in the following syntax:</p>
<p>
&lt;MediaServer Object&gt;.&lt;Component Object&gt;.&lt;Property Name&gt;</p>
<p>
For example, you could use </p>
<pre><code><i>Mediaserver1</i>.<b>Logging</b>.<b>Directory
</b></code></pre>
<p>
to access the <b>Directory</b> property of a <b>Logging</b> object.</p>
<h6>Using MediaServer Collections</h6>
<p>
A collection helps to centralize the management of its member objects. All NetShow Theater collection objects are zero-based arrays of like types of objects. All collection objects expose the <b>Count</b> property, which specifies the number of objects contained in the collection, and the <b>Item</b> property for retrieving individual objects in the collection.</p>
<p>
To access properties and methods of objects in a collection, the name of the collection object is referenced, with a numeric argument specifying the position of the object in the array. For example, you can use the following syntax to access the <b>Name</b> property of a <b>Client</b> object.</p>
<pre><code>&lt;MediaServer Object&gt;.&lt;Collection Name&gt;[.Item](Index).&lt;Property Name&gt;
</code></pre>
<p>
The <b>Item</b> property is the default property of each collection object. Explicit use of it<b> </b>to reference a member object is optional. For example, you could write the following code to display the <b>IPAddress</b> property of each <b>Client</b> object in a <b>Clients</b> collection object:</p>
<pre><code>Dim clients as IMSrvClients
Set clients = MediaServer1.Clients
For i=0 to clients.Count-1
  MsgBox clients(i).IPAddress
Next</code></pre>
<p>
However, with Visual Basic, you could make the implementation more efficient by using the For Each … In … loop statement:</p>
<pre><code>Dim client As IMSrvClient
For Each client In MediaServer1.Clients
 &nbsp;&nbsp; MsgBox client.ipaddress
Next
</code></pre>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

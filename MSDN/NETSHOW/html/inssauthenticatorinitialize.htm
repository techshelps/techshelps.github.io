<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSSAuthenticator::Initialize</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h4><a name="inssauthenticatorinitialize"></a>INSSAuthenticator::Initialize</h4>
<p>
The <b>INSSAuthenticator::Initialize </b>method is called by the NetShow server at startup.</p>
<p class=blue>
<b>Syntax</b></p>
<p>
<b>HRESULT</b> <b>Initialize</b> (<br>
  <b>INSSServerContext</b>  <i>*SvrCtx,<br>
  </i><b>DWORD</b><i>  *dwFlags,<br>
  </i><b>LPBSTR&nbsp; </b><i>pbstrDefaultRealm</i><br>
);</p>
<p class=blue>
<b>Parameters</b></p>
<p class=dt>
<i>[in] SvrCtx</i></p>
<p class=indent>
Specifies a pointer to the server context. The server context contains name/value pairs of information (properties) about the server. These properties can be retrieved by using the <b>IPropertyMap</b> interface. Properties supported for the server context include the following;</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=43%><b>Property Name</b></td>
<td class=blue width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=43%><b>NSS_SERVER_NAME</b></td>
<td width=57%>A string value containing the server’s name.</td>
</tr>
<tr valign=top>
<td width=43%><b>NSS_VIRTUAL_SERVER_NAME</b></td>
<td width=57%>A string value containing the server’s alias.</td>
</tr>
<tr valign=top>
<td width=43%><b>NSS_SERVER_VERSION_HI</b></td>
<td width=57%>The high-order 32 bits of a 64-bit integer specifying the version of NetShow Server. The most significant 16 bits of this property indicate the version. The least significant 16 bits of this property indicate the minor version.</td>
</tr>
<tr valign=top>
<td width=43%><b>NSS_SERVER_VERSION_LO</b></td>
<td width=57%>The low-order 32 bits of a 64-bit integer specifying the version of th NetShow Server. The most significant 16 bits of this property indicate the minor version. The least significant 16 bits of this property indicate the build number.</td>
</tr>
</table><br>
<p class=dt>
<i>[out] dwFlags</i></p>
<p class=indent>
Specifies a pointer to a flag indicating the format of data passed between the client, the server, and the authenticator. The value <b>NS_TEXT_WIRE_PROTOCOL</b> indicates that the data will be sent as a uuencoded ASCII string. Otherwise, the data is passed in binary form.</p>
<p class=dt>
<i>[Out] pbstrDefaultRealm</i></p>
<p class=indent>
Specifies a pointer to the default realm. This realm string will be passed to the user as part of every challenge. If an authenticator always uses the same realm for user names, it should make domain\ computer-name as the default realm. Using a default realm helps to boost the performance of the server. If, on the other hand, an authenticator adopts a multi-step challenge/response scheme, this parameter should return a NULL pointer. In this case, the <b>GetChallenge</b> method should be used to obtain the realm each time the server challenges the client.</p>
<p class=blue>
<b>Return Values</b></p>
<p>
This method should return<b> S_OK</b> upon successful completion, or an <b>HRESULT</b> error value.</p>
<p class=blue>
<b>Remarks</b></p>
<p>
The default realm may be overridden through the appropriate registry key.</p>
<p>
Additional properties can be added to the server context. The properties contained in the server context are available from the time the server starts up until it shuts down.</p>
<p>
The following sample code demonstrates a skeletal implementation of this method:</p>
<pre><code>HRESULT CSampleAuthenticator::Initialize( 
 &nbsp;&nbsp; INSSServerContext *SvrCtx,
 &nbsp;&nbsp; DWORD *dwFlags )
{
  //
  // Do authenticator initialization here.
  //
  *dwFlags = NS_TEXT_WIRE_PROTOCOL; // set for uuencoded data
  return( S_OK );
}
</code></pre>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Event Notification and Authorization Interfaces</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h3><a name="eventnotificationauthorizationinterfaces"></a>Event Notification and Authorization Interfaces</h3>
<p>
The NetShow Event Notification and Authorization API is comprised of two custom COM-compliant interfaces and one server callback interface. As a developer, you are responsible for implementing the two component-side interfaces, namely <b>INSSEventHandler</b>, and <b>INSSEventAuthorization</b>. These two interfaces are invoked by the NetShow server. The third one is the <b>INSSEventAuthorizationCallback</b> interface, which is implemented by the server and invoked by the component. The NetShow server also employs several context objects that implement <b>IPropertyMap</b>, a generic and prepackaged interface for manipulating named parameters. Following is a brief description of these interfaces.</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=43%><b>Interface</b></td>
<td class=blue width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=43%><a href="insseventhandler.htm"><b>INSSEventHandler</b></a></td>
<td width=57%>The methods of this interface are called by the server when specified events occur. It is also used to select which events will trigger a call to the interface and to perform initialization and shutdown tasks. <i>This interface is implemented by the developer.</i></td>
</tr>
<tr valign=top>
<td width=43%><a href="insseventauthorization.htm"><b>INSSEventAuthorization</b></a></td>
<td width=57%>The methods of this interface are called by the server when a request has been made to perform a specified task. The server does not grant the request until it receives permission from the authorization routine. This interface is also used to specify which requests will trigger a call to this interface. <i>This interface is implemented by the developer.</i></td>
</tr>
<tr valign=top>
<td width=43%><a href="insseventauthorizationcallback.htm"><b>INSSEventAuthorizationCallback</b></a></td>
<td width=57%>The callback method of this interface is used to notify the server when the requested event has been authorized or denied. <i>This interface is implemented by the server.</i></td>
</tr>
</table><br>
<p>
A component must be able to handle events even if it is not required to perform authorization. Thus, each component must implment the <b>INNSEventHandler</b> event notification interface. Every component can selectively respond to event notifications issued from the server. You implement the <b>INNSEventHandler::GetHandleEvents</b> method to specify the types of events to be notified. In addition to handling events, the event notification interface serves to initialize the component when the server starts, to monitor the operational state of the server, and to terminate itself when the server is down.</p>
<p>
The <b>INSSEventAuthorization</b> interface deals with event authorization only. A component implements this interface only when it is interested in authorization. There are only two methods in this interface: <b>GetAuthorizedEvents</b>, which specifies the type of events requiring authorization, and <b>AuthorizeEvent</b>, which performs the actual process of authorization. An event may require authorization, but not notification.</p>
<p>
Any number of different components may be registered for event authorization. For example, one component authorizes the Play event based on the pay-per-view plan, and another on the pay-per-minute plan. When more than one component is registered, the server calls the methods of the authorization interface of each component in turn. The server will not grant the request until it receives permission from all the registered components. If any component denies the request, the server will not grant permission and will notify all the components of the denial. Thus, a component should grant permission to any request of the event authorization that is outside of the scope of its prescribed responsibility. For example, a pay-per-view authorization component should not deny requests for pay-per-minute title.</p>
<p>
For performance reasons, a single component capable of handling different authorization schemes is prefered to multiple components handling a single authorization scheme. A single component implementation helps to reduce the number of client/server interactions. </p>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scripting Utility Sample</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="scriptingutilitysample"></a>Scripting Utility Sample</h2>
<p>
One of the features of Microsoft NetShow Advanced Streaming format (ASF) is the ability to embed script commands into the stream. The embedded script commands are two Unicode strings associated with a designated time in the stream. One string specifies the type of command, and the other string contains the actual command. When the stream reaches the time associated with the command, the NetShow Player control issues an event that can be captured and processed by an event handling routine.</p>
<p>
Both of the command strings are passed as parameters to the event handler. The type parameter is used to determine how the command parameter should be processed, and the command parameter specifies the action to be performed. For example, commands to launch URLs can be embedded into ASF streams. The type parameter for these commands is <i>URL</i> and the command parameter would contain the URL to be launched by the browser.</p>
<p>
The Player control automatically handles the following types of embedded script commands;
<ul type=disc>
<li>
URL - The specified URL is launched in the default browser.</li>
<li>
FILENAME - The Player control opens the file specified and plays the stream.</li>
</ul>
<p>
Any type of command can be embedded into an ASF stream, and reciprocal code can be written for the client application to handle the command. Unknown types of commands are ignored by the Player control; however, they are still handed off to the event handling routine for processing.</p>
<p>
The Encoder provides a <b>Commands</b> dialog box for embedding script commands into the ASF streams it is producing. Script commands entered into the <b>Commands</b> dialog box are dropped into the stream to be executed by the client application. </p>
<p>
The Encoder <b>Commands</b> dialog box does have limitations. Once a command is sent, it is not retained in the <b>Commands</b> dialog box, requiring users to retype the command before it can be sent again. Another drawback is that it can not import commands stored in a script file.</p>
<p>
<b>About the Scripting Utility Sample</b></p>
<p>
The scripting utility sample demonstrates how to design a Microsoft Visual Basic utility by using the methods and properties exposed through Automation for embedding script commands. It provides an easy–to-use interface for embedding commands into an ASF stream. The utility provides the following features, which extend the functionality of the standard interface:
<ul type=disc>
<li>
Importing a text file containing script commands. The imported commands are displayed in a hierarchical list.</li>
<li>
Sorting the list of script commands.</li>
<li>
Copying a command from the list into the <b>Commands</b> dialog box by clicking the command. The command can then be edited in the <b>Commands</b> dialog box before it is sent.</li>
<li>
Keeping a list of the most recently used (MRU) commands for future use.</li>
</ul>
<p>
The utility also incorporates the following features of the Encoder:
<ul type=disc>
<li>
The ability to import an .asd file.</li>
<li>
The ability to start and stop the Encoder.</li>
<li>
A display for viewing the properties of the Encoder while it is running.</li>
</ul>
<p>
<b>Sample Components</b></p>
<p>
The sample components are installed by clicking the link specified below. The following components are downloaded when the sample is installed:
<ul type=disc>
<li>
The ASF Real-Time Scripting Utility Sample (RTEScript.exe).</li>
<li>
Sample Web pages for viewing the results, (RTESample.htm, Frame1.htm, and Frame2.htm).</li>
<li>
The Visual Basic source code used to build the utility.</li>
<li>
A sample script file (Sample.txt).</li>
</ul>
<p>
<b>Requirements</b></p>
<p>
The sample uses an .asd file containing the settings needed by the Encoder. Currently there is no programmatic way to create an .asd file. Use the Encoder to perform this task. For more information about creating an .asd file to specify the settings, see the Encoder documentation. The .asd file must specify the following settings:
<ul type=disc>
<li>
The input must be from a live source. This utility will not work with input from .avi or .wav files.</li>
<li>
The option "Enable Script Commands" must be enabled.</li>
<li>
The output destination can not be a local .asf file.</li>
</ul>
<p>
<b>To Use the Utility</b></p>
<p>
The steps outlined below demonstrate how to use the utility:
<ol>
<li>
Open the .asd file by clicking the icon on the toolbar or selecting the <b>Open ASD File</b> option from the drop-down <b>File</b> menu. For the utility to work correctly, the .asd file must meet the requirements listed above.<br><br></li>
<li>
Open the script command file by clicking the icon on the toolbar or selecting the <b>Open Script File</b> option from the drop-down <b>File</b> menu. The syntax for creating script command files is outlined in the “Creating a Sample Script File” section. The commands imported from the file are displayed by a listview control.<br><br></li>
<li>
Start the Encoder by clicking the <b>Start Encoding</b> button.<br><br></li>
<li>
Select a command to be sent by clicking the command displayed in the listview control. The command should appear in the <b>Current Command</b> dialog box. Alternatively, commands may be typed directly into this dialog box. Commands can be altered once they are in the dialog box.<br><br></li>
<li>
When the command appears correctly in the <b>Current Command</b> dialog box, click the <b>Send</b> button. A message is displayed to indicate that the command has been sent. The <b>Current Command</b> dialog box is cleared, and the command that was just sent is added to the 10 most recently used commands.<p class=tl>
No error codes are returned when the script command is sent. The best way to determine if the command was received and processed successfully is by observing the results on a NetShow Player connected to the Encoder. The Web page included with this sample is ideal for testing the output generated from the Encoder. Instructions for using the Web page are outlined below.
</li>
<li>
To view properties of the Encoder while it is running, select the <b>View ASD File Properties</b> option from the drop down <b>File</b> menu.</li>
</ol>
<p>
<b>Creating a Sample Script File</b></p>
<p>
Any text editor can be used to create a script file used by the scripting utility. The following list outlines the format of a script file:
<ul type=disc>
<li>
Only one command or comment is allowed per line. A carriage return indicates a new line.</li>
<li>
The format for a command line is the command type followed by a comma, followed by the command. In addition to the <i>URL</i> and <i>FILE</i> command types that are automatically processed by the Player control, the Web page included with this sample also processes <i>CAPTION</i> and <i>TEXT</i> command types. There are no restrictions on the types of commands that can be sent; however, only <i>URL</i>, <i>FILE</i>, <i>CAPTION</i>, and <i>TEXT</i> will be processed by the sample Web page. Instructions for using the Web page are outlined in the “Viewing Output on the Sample Web Page” section. See the Sample.txt file included with this sample for examples of command lines.</li>
<li>
Comments are denoted by a semicolon (;) in the first column of the line. See the Sample.txt file included with this sample for examples of comment lines.</li>
<li>
To specify a destination frame for URL commands, append two ampersands (&amp;&amp;) and the name of the frame to the end of the command.</li>
</ul>
<p>
<b>Viewing Output on the Sample Web Page</b></p>
<p>
The Web page included with the sample uses two frames. One frame (Frame1.htm) contains the embedded player and the other (Frame2.htm) is available for launching URL commands received from the scripting utility. Launching URLs in Frame2 allows the player to continue rendering the stream from the Encoder in Frame 1.</p>
<p>
While it is possible to run the sample utility and the Web page on the same computer, running the Encoder and the scripting utility on one computer and the sample Web page on another computer is recommended.</p>
<p>
The following list outlines the steps for using the Web page:
<ol>
<li>
Start the Encoder Scripting Utility.<br><br></li>
<li>
From the utility, open the .asd file and start the Encoder.<br><br></li>
<li>
Launch the sample Web page from a browser.<br><br></li>
<li>
Connect the Web page to the ASF Encoder.<br><br></li>
<li>
Send script commands from the utility and view the results on the Web page.</li>
</ol>
<p>
<b>Troubleshooting</b></p>
<p>
The status bar at the bottom of the sample utility displays whether or not the .asd file is loaded and whether or not encoding has started.</p>
<p>
The <i>Start Encoding</i> option remains disabled until a valid .asd file is loaded.</p>
<p>
The <i>Send Command</i> button remains disabled until the encoding process starts successfully.</p>
<p>
If the Encoder can not be started from the utility ,or script commands are not being processed as expected on the sample Web page, try the following steps:
<ol>
<li>
Stop the Encoder from the scripting utility.<br><br></li>
<li>
Start the Encoder and open the .asd file that was loaded by the scripting utility.<br><br></li>
<li>
Try using the Encoder to send script commands.<br><br></li>
<li>
If the problems persist, check the configuration settings.<br><br></li>
<li>
Use the Encoder's online Help to troubleshoot the problem and correct the settings.</li>
</ol>
<p>
<b>Installing the Sample</b></p>
<p>
You can download this sample by linking to <a href="http://www.microsoft.com/netshow/download/rtescript.exe"><i>http://www.microsoft.com/netshow/download/rtescript.exe</i></a>.</p>
<p>
These examples illustrate how to use HTML and the Visual Basic Scripting Edition, with attributes exposed by Microsoft NetShow. <i>They may not be fully functional within the Platform SDK framework</i>. To download the complete suite of NetShow products, which includes working samples, visit the NetShow web site (<a href="http://www.microsoft.com/netshow">http://www.microsoft.com/NetShow</a>)</p>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

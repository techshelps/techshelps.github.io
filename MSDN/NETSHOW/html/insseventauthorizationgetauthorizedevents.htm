<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INSSEventAuthorization::GetAuthorizedEvents</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h4><a name="insseventauthorizationgetauthorizedevents"></a>INSSEventAuthorization::GetAuthorizedEvents</h4>
<p>
The <b>INSSEventAuthorization::GetAuthorizedEvents </b>method is used to specify which events must be authorized before they can be performed.</p>
<p class=blue>
<b>Syntax</b></p>
<p>
<b>HRESULT</b> <b>GetAuthorizedEvents</b> (<br>
  <b>DWORD&nbsp; </b><i>cMaxAuthorizedEvents</i>,<br>
  <b>DWORD</b>  *<i>pcAuthorizedEvents</i>,<br>
  <b>NSS_EVENT_TYPE</b>  <i>*rgAuthorizedEvents<br>
</i>);</p>
<p class=blue>
<b>Parameters</b></p>
<p class=dt>
<i>[in] cMaxAuthorizedEvents</i></p>
<p class=indent>
Indicates the maximum number of events that can be specified for authorization.</p>
<p class=dt>
<i>[out] pcAuthorizedEvents</i></p>
<p class=indent>
Specifies the number of authorization events being set by the component.</p>
<p class=dt>
<i>[out] rgAuthorizedEvents</i></p>
<p class=indent>
Specifies the list of events requiring authorization. Each event specified by this parameter triggers a call from the server to the component’s <a href="insseventauthorizationauthorizeevent.htm"><b>INSSEventAuthorization::AuthorizeEvent</b></a><b> </b>method. Values supported for this parameter include:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=43%><b>Event Type</b></td>
<td class=blue width=57%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=43%><b>NSSE_CONNECT</b></td>
<td width=57%>Client requests a connection.</td>
</tr>
<tr valign=top>
<td width=43%><b>NSSE_OPEN</b></td>
<td width=57%>Request to open a title.</td>
</tr>
<tr valign=top>
<td width=43%><b>NSSE_PLAY</b></td>
<td width=57%>Request to start streaming title.</td>
</tr>
<tr valign=top>
<td width=43%><b>NSSE_SKIP_AUTHENTICATION</b></td>
<td width=57%>Require user authentication.</td>
</tr>
</table><br>
<p class=blue>
<b>Return Values</b></p>
<p>
This method should return<b> S_OK</b> upon successful completion, or an <b>HRESULT</b> error value.</p>
<p class=blue>
<b>Remarks</b></p>
<p>
Memory for the events specified by <i>rgAuthorizedEvents</i> is allocated and freed by the server.</p>
<p>
The following code illustrates a skeleton implementation of the <b>INSSEventAuthorization::GetAuthorizedEvents </b>method.</p>
<pre><code>HRESULT
CEventHandler::GetAuthorizedEvents( 
 &nbsp;&nbsp; DWORD cMaxAuthorizedEvents,
 &nbsp;&nbsp; DWORD __RPC_FAR *pcAuthorizedEvents,
 &nbsp;&nbsp; NSS_EVENT_TYPE __RPC_FAR *rgAuthorizedEvents ) 
{
  if ( ( NULL == rgAuthorizedEvents )
 &nbsp;&nbsp; || ( NULL == pcAuthorizedEvents )
 &nbsp;&nbsp; || ( cMaxAuthorizedEvents &lt; 3 ) )
  {
 &nbsp;&nbsp; return( E_INVALIDARG );
  }
  *pcAuthorizedEvents = 3;
  rgAuthorizedEvents[0] = NSSE_CONNECT;
  rgAuthorizedEvents[1] = NSSE_OPEN;
  rgAuthorizedEvents[2] = NSSE_PLAY;
  return(S_OK);
};</code></pre>
<p class=blue>
<b>See Also</b></p>
<p>
<a href="insseventauthorizationcallbackoneventauthorized.htm"><b>INSSEventAuthorizationCallback::OnEventAuthorized</b></a><b> </b>, <a href="nss_event_type.htm"><b>NSS_EVENT_TYPE</b></a></p>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

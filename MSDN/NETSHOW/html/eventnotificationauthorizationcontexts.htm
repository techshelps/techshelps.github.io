<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Event Notification Authorization Contexts</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h3><a name="eventnotificationauthorizationcontexts"></a>Event Notification Authorization Contexts</h3>
<p>
A context is an object that inherits and implements the <b>IPropertyMap</b> interface that manipulates the encapsulated member data. When the encapsulated data define a server, a user, or some content, the object is known as a server context, a user context, or a presentation context, respectively. The NetShow server uses contexts to pass client, server, and presentation data to the notification and authorization components. The <b>IPropertyMap</b> interface supports methods for adding, removing, evaluating, and modifying the properties of name/value pairs of data. The NetShow server maintains several different contexts to describe different aspects of each server task. Contexts supported by the server include the following:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=18%><b>Context</b></td>
<td class=blue width=82%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%>Server</td>
<td width=82%>Contains information about the Netshow server.</td>
</tr>
<tr valign=top>
<td width=18%>User</td>
<td width=82%>Contains information about the client.</td>
</tr>
<tr valign=top>
<td width=18%>Presentation</td>
<td width=82%>Contains information about the media stream.</td>
</tr>
<tr valign=top>
<td width=18%>Command</td>
<td width=82%>Reserved for future implementation.</td>
</tr>
</table><br>

<h4><a name="servercontextproperties"></a>Server Context Properties</h4>
<p>
Following is a list of predefined server context properties that are maintained by the server:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=41%><b>Property Name</b></td>
<td class=blue width=59%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=41%><b>NSS_SERVER_NAME</b></td>
<td width=59%>A string value containing the server’s name.</td>
</tr>
<tr valign=top>
<td width=41%><b>NSS_VIRTUAL_SERVER_NAME</b></td>
<td width=59%>A string value containing the server’s alias.</td>
</tr>
<tr valign=top>
<td width=41%><b>NSS_SERVER_VERSION_HI</b></td>
<td width=59%>The high-order 32 bits of a 64-bit integer specifying the version of the NetShow server. The most significant 16 bits of this property indicate the version. The least significant 16 bits of this property indicate the minor version.</td>
</tr>
<tr valign=top>
<td width=41%><b>NSS_SERVER_VERSION_LO</b></td>
<td width=59%>The low-order 32 bits of a 64-bit integer specifying the version of the NetShow server. The most significant 16 bits of this property indicate the minor minor version. The least significant 16 bits of this property indicate the build number.</td>
</tr>
</table><br>

<h4><a name="usercontextproperties"></a>User Context Properties</h4>
<p>
Following is a list of predefined user context properties that are maintained by the server:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=48%><b>Property Name</b></td>
<td class=blue width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=48%><b>NSS_USER_AGENT</b></td>
<td width=52%>A <b>String</b> value containing the information about the user connecting to the server. It can be used to differentiate whether the connected user is a player or another server. This property may not contain valid information if it is stripped by a proxy.</td>
</tr>
<tr valign=top>
<td width=48%><b>NSS_USER_IP_ADDRESS</b></td>
<td width=52%>A <b>String</b> value containing the user’s IP address. The IP address may not be meaningful if it is masked by a firewall. The value of this property may change for different connections of the same client.</td>
</tr>
<tr valign=top>
<td width=48%><b>NSS_USER_CONTROL_PROTOCOL</b></td>
<td width=52%>A <b>String</b> value containing the protocol type. Valid types include; MMS, RTSP, HTTP, and UNKNOWN.</td>
</tr>
<tr valign=top>
<td width=48%><b>NSS_USER_ID</b></td>
<td width=52%>A <b>String</b> value containing the client ID. This ID corresponds with the <b>ClientId</b> property of the NetShow Unicast Manager Admin control, and it can be used to disconnect the client.</td>
</tr>
<tr valign=top>
<td width=48%><b>NSS_USER_NAME</b></td>
<td width=52%>A <b>String</b> value containing the user name. This property is only valid after the user has been successfully authenticated.</td>
</tr>
<tr valign=top>
<td width=48%><b>NSS_USER_AUTHENTICATOR</b></td>
<td width=52%>A pointer to the <b>IUnknown</b> interface of the authenticator object used to authenticate the user.</td>
</tr>
<tr valign=top>
<td width=48%><b>NSS_USER_GUID</b></td>
<td width=52%>A <b>String</b> value containing the client GUID. This GUID is generated when the player is installed on the client computer.</td>
</tr>
</table><br>

<h4><a name="presentationcontextproperties"></a>Presentation Context Properties</h4>
<p>
Following is a list of predefined presentation context properties that are maintained by the server:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=54%><b>Property Name</b></td>
<td class=blue width=46%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_LIVE</b></td>
<td width=46%>A <b>Boolean</b> value specifying whether or not the presentation is live.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_BROADCAST</b></td>
<td width=46%>A <b>Boolean</b> value specifying whether or not the presentation is being broadcast.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_SEEKABLE</b></td>
<td width=46%>A <b>Boolean</b> value specifying whether or not the file supports seeking to a specific time or marker.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_STRIDABLE</b></td>
<td width=46%>A <b>Boolean</b> value specifying whether or not the file supports fast forward and rewind.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_RELIABLE</b></td>
<td width=46%>A <b>Boolean</b> value specifying whether or not the presentation is reliable.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_PHYSICAL_NAME</b></td>
<td width=46%>A <b>String</b> value containing the name of the file being streamed.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_REQUEST_NAME</b></td>
<td width=46%>A <b>String</b> value containing the name the client used to request the presentation.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_BITRATE</b></td>
<td width=46%>A floating-point value indicating the bit-rate of the stream.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_DURATION_HI</b></td>
<td width=46%>The high-order 32 bits of a 64-bit integer indicating the duration of the movie in miliseconds.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_DURATION_LO</b></td>
<td width=46%>The low-order 32 bits of a 64-bit integer indicating the duration of the movie in miliseconds.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_FRAMES_PER_SEC</b></td>
<td width=46%>An integer indicating the number of frames per second.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_PLAY_RATE</b></td>
<td width=46%>A floating-point value indicating the play rate of the presentation. A value of 1 indicates normal speed. Values greater than 1 indicate that the presentation is being fast-forwarded, and negative values indicate rewind.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_START_POS_HI</b></td>
<td width=46%>The high-order 32 bits of a 64-bit integer indicating the starting position of the movie.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_START_POS_LO</b></td>
<td width=46%>The low-order 32 bits of a 64-bit integer indicating the starting position of the movie.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_TOTAL_BYTES_SENT_HI</b></td>
<td width=46%>The high-order 32 bits of a 64-bit integer indicating the total number of bytes of the presentation that were sent to the client.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_TOTAL_BYTES_SENT_LO</b></td>
<td width=46%>The low-order 32 bits of a 64-bit integer indicating the total number of bytes of the presentation that were sent to the client.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_TOTAL_PLAY_TIME_HI</b></td>
<td width=46%>The high-order 32 bits of a 64-bit integer indicating the total time the presentation was streamed to the client in milliseconds.</td>
</tr>
<tr valign=top>
<td width=54%><b>NSS_PRESENT_TOTAL_PLAY_TIME_LO</b></td>
<td width=46%>The low-order 32 bits of a 64-bit integer indicating the total time the presentation was streamed to the client in milliseconds.</td>
</tr>
</table><br>

<h4><a name="contextpropertiessetbyserver"></a>Context Properties Set by the Server</h4>
<p>
The server sets different context properties for different types of events. The following table lists the property values that are set by the server for initialization or when authorization or notification of an event occurs:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=42%><b>Events</b></td>
<td class=blue width=58%><b>Properties Set By Server</b></td>
</tr>
<tr valign=top>
<td width=42%>When initialization occurs</td>
<td width=58%>Server Context:<br>
  NSS_SERVER_NAME<br>
  NSS_VIRTUAL_SERVER_NAME<br>
  NSS_SERVER_VERSION_HI<br>
  NSS_SERVER_VERSION_LO</td>
</tr>
<tr valign=top>
<td width=42%><b>NSSE_CONNECT </b>and<p>
<b>NSSE_DISCONNECT</b></p>
</td>
<td width=58%>Server Context:<br>
  NSS_SERVER_NAME<br>
  NSS_VIRTUAL_SERVER_NAME<br>
  NSS_SERVER_VERSION_HI<br>
  NSS_SERVER_VERSION_LO<p>
User Context:<br>
  NSS_USER_AGENT<br>
  NSS_USER_IP_ADDRESS<br>
  NSS_USER_CONTROL_PROTOCOL<br>
  NSS_USER_ID</p>
</td>
</tr>
<tr valign=top>
<td width=42%><b>NSSE_SKIP_AUTHENTICATION</b></td>
<td width=58%>Server Context:<br>
  NSS_SERVER_NAME<br>
  NSS_VIRTUAL_SERVER_NAME<br>
  NSS_SERVER_VERSION_HI<br>
  NSS_SERVER_VERSION_LO<p>
User Context:<br>
  NSS_USER_AGENT<br>
  NSS_USER_IP_ADDRESS<br>
  NSS_USER_CONTROL_PROTOCOL<br>
  NSS_USER_ID</p>
<p>
Presentation Context:<br>
  NSS_PRESENT_PHYSICAL_NAME<br>
  NSS_PRESENT_REQUEST_NAME</p>
</td>
</tr>
<tr valign=top>
<td width=42%><b>NSSE_OPEN </b>and<b> </b><p>
<b>NSSE_CLOSE</b></p>
</td>
<td width=58%>Server Context:<br>
  NSS_SERVER_NAME<br>
  NSS_VIRTUAL_SERVER_NAME<br>
  NSS_SERVER_VERSION_HI<br>
  NSS_SERVER_VERSION_LO<p>
User Context:<br>
  NSS_USER_AGENT<br>
  NSS_USER_IP_ADDRESS<br>
  NSS_USER_CONTROL_PROTOCOL<br>
  NSS_USER_ID<br>
  NSS_USER_AUTHENTICATOR<br>
  NSS_USER_NAME</p>
<p>
Presentation Context:<br>
  NSS_PRESENT_PHYSICAL_NAME<br>
  NSS_PRESENT_REQUEST_NAME</p>
</td>
</tr>
<tr valign=top>
<td width=42%><b>NSSE_PLAY </b>and <p>
<b>NSSE_STOP</b></p>
<p>
* items are only set for the <b>NSSE_STOP</b> event.</p>
</td>
<td width=58%>Server Context:<br>
  NSS_SERVER_NAME<br>
  NSS_VIRTUAL_SERVER_NAME<br>
  NSS_SERVER_VERSION_HI<br>
  NSS_SERVER_VERSION_LO<p>
User Context:<br>
  NSS_USER_AGENT<br>
  NSS_USER_IP_ADDRESS<br>
  NSS_USER_CONTROL_PROTOCOL<br>
  NSS_USER_ID<br>
  NSS_USER_AUTHENTICATOR<br>
  NSS_USER_NAME</p>
<p>
Presentation Context:<br>
  NSS_PRESENT_PHYSICAL_NAME<br>
  NSS_PRESENT_REQUEST_NAME<br>
  NSS_PRESENT_STREAMID<br>
  NSS_PRESENT_BITRATE<br>
  NSS_PRESENT_DURATION_HI<br>
  NSS_PRESENT_DURATION_LO<br>
  NSS_PRESENT_LIVE<br>
  NSS_PRESENT_BROADCAST<br>
  NSS_PRESENT_SEEKABLE<br>
  NSS_PRESENT_RELIABLE<br>
  NSS_PRESENT_RECORDABLE<br>
  NSS_PRESENT_PLAY_RATE<br>
  NSS_PRESENT_START_POS_HI<br>
  NSS_PRESENT_START_POS_LO</p>
<p>
&nbsp;*NSS_PRESENT_TOTAL_BYTES_SENT_HI<br>
 *NSS_PRESENT_TOTAL_BYTES_SENT_LO<br>
 *NSS_PRESENT_TOTAL_PLAY_TIME_HI<br>
 *NSS_PRESENT_TOTAL_PLAY_TIME_LO</p>
</td>
</tr>
</table><br>
<p class=indent>
<b>Note&nbsp;&nbsp; </b>The <b>NSS_USER_AUTHENTICATOR</b> and <b>NSS_USER_NAME</b> properties are <i>NOT</i><b> </b>set by the server unless authentication is enabled and the user has successfully been authenticated.</p>

<h4><a name="contextpropertiessetbycomponent"></a>Context Properties set by a Component</h4>
<p>
The notification and authorization component can add new properties to the server, user, or presentation contexts, and set or retrieve the existing properties at any time during the life of the context. For example, the fee charged for viewing the title can be added to the presentation context when the title is opened. Then the billing cost can easily be retrieved from the context when the server sends notification that the title has been closed.</p>

<h4><a name="contextlifetimes"></a>Context Lifetimes</h4>
<p>
Each context holds the value of its properties for a predetermined duration or lifetime. The values contained in the context can be set and retrieved until the end of that context’s lifetime. The following table details the lifespans of the contexts:</p>
<table border=0 cellpadding=5 cols=2 frame=below>
<tr valign=top>
<td class=blue width=19%><b>Context</b></td>
<td class=blue width=81%><b>Lifetime</b></td>
</tr>
<tr valign=top>
<td width=19%>Server</td>
<td width=81%>Always available.</td>
</tr>
<tr valign=top>
<td width=19%>User</td>
<td width=81%>Available from the time the client connects to the server up to the time the client disconnects.</td>
</tr>
<tr valign=top>
<td width=19%>Presentation</td>
<td width=81%>Available from the time the title is opened up to the time the title is closed. A new presentation context is created for each title that is opened by each client. </td>
</tr>
</table><br>
<p class=indent>
<b>Note: </b>The pointer to the context may be lost immediately after the method returns. To maintain access to the properties during asynchronous calls, call <b>AddRef</b> to increment the interface’s reference counter. Alternately, the data needed by the component could be stored in temporary variables. If <b>AddRef</b> is used, the component should call <b>Release</b> to free the pointer when the context is no longer needed.</p>

<h4><a name="propertymapexample"></a>Property Map Example</h4>
<p>
The following code demonstrates how you can retrieve the user name from the user context: </p>
<pre><code>HRESULT hres;
VARIANT userName;
  hres = pUser-&gt;QueryInterface(IID_IPropertyMap,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (void**) &amp;pIUserPropMap);
  hres = pIUserPropMap-&gt;Read(_T("NSS_USER_NAME"),
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;userName);</code></pre>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

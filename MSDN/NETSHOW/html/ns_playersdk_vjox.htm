<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ScriptCommand</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h4><a name="ns_playersdk_vjox"></a>ScriptCommand Event</h4>
<p>
Occurs when a synchronized command or URL is received.</p>
<p class=blue>
<b>Syntax</b></p>
<p>
<i>MediaPlayer</i><b>_ScriptCommand( </b><i>scType</i><b>,</b> <i>Param </i><b>)</b></p>
<p class=blue>
<b>Parameters</b></p>
<p class=dt>
<i>scType</i></p>
<p class=indent>
A <b>String</b> value specifying the type of script command.</p>
<p class=dt>
<i>Param</i></p>
<p class=indent>
A <b>String</b> value specifying the value of the script command.</p>
<p class=blue>
<b>Remarks</b></p>
<p>
Commands can be embedded among the sounds and images of an .asf file. The commands are a pair of Unicode strings associated with a designated time in the stream. When the stream reaches the time associated with the command the Media Player control sends a <b>ScriptCommand</b> event with two parameters, one parameter specifying the type of command being sent and one parameter specifying the command. The type parameter is used to determine how the command parameter will be processed. Any type of command can be embedded in an ASF stream to be handled by the <b>ScriptCommand</b> event.</p>
<p>
One type of command is a <b>URL</b> (Uniform Resource Locator). <b>URL</b>-type commands received by the Player control are invoked automatically in your default Internet browser if the <b>InvokeURLs</b> property is True.</p>
<p>
The Player control always processes incoming URL-type commands in the following manner:
<ol>
<li>
A URL-type command is received.<br><br></li>
<li>
<b>ScriptCommand</b> is called.<br><br></li>
<li>
After <b>ScriptCommand</b> returns, <b>InvokeURLs</b> is checked.<br><br></li>
<li>
If <b>InvokeURLs</b> is True and the command is a URL-type, the specified URL is invoked. If <b>InvokeURLs</b> is False or if the command is not a URL-type, the command is ignored.</li>
</ol>
<p>
When authoring an .asf file, you can specify which frame the new URL is displayed in by concatenating two ampersands and the name of the frame in the parameter field. The example below illustrates typical <b>ScriptCommand</b> parameters. It specifies that the URL <i>mypage</i> should be launched in the <i>myframe</i> frame.</p>
<pre><code>Type = "URL"
Param = <u>http://myweb/mypage.html&amp;&amp;myframe</u>
</code></pre>
<p>
The only other type of script commands automatically processed by the Player control at this time are FILENAME-type commands. When the Player control receives a command with a FILENAME type, it resets the <b>FileName</b> parameter, attempts to open the file named, and begins playing the new stream immediately.</p>
<p>
You can embed any other type of command as long as you provide reciprocal code to handle the command. Though unknown commands are ignored by the Player control, they are still handed off to the <b>ScriptCommand</b> event.</p>
<p>
This event does not get called if the file is being scanned (fast forwarded or fast reversed).</p>
<p>
The following example checks first to see whether the received command is a URL. If it's not, it displays the command in a text box. This example could be used to display text captions embedded in an .asf file. With a small amount of modification, you could check for commands of type "CAPTION" and then author .asf files by using the "CAPTION" tag wherever you wanted to insert captions. You could also send VBScript commands through an .asf file and then build ActiveX HTML pages on the fly.</p>
<p class=blue>
<b>Example</b></p>
<p>
The example code shows the <b>ScriptCommand</b> event procedure.</p>
<pre><code>Sub MediaPlayer_ScriptCommand(Type, Param)
  If Not (Type = "URL") Then      'Not URL?
 &nbsp;&nbsp; TextBox.Text = Type + ": " + Param   'Show command
  End If
End Sub</code></pre>
<A HREF="legal.htm">&copy; 1996-1998 Microsoft Corporation. All rights reserved.</A></BODY>
</HTML>

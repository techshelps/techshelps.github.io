<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unicast TraceView Control Sample</TITLE>
</HEAD>
<BODY  OnLoad="InitTraceView()" BgColor="beige">



<h1 align=center>Using NetShow Unicast TraceView Control</H1>
<p align=left>
This sample demonstrate how to use the NetShow Unicast Trace View ActiveX 
control in a HTML page. 
</p>
<p>
First you must embed the control in your HTML page using the <b>OBJECT</b> tags with the CLASSID attribute set to 
<b>"CLSID::24DCD5F2-6DBB-11D1-BEF5-00805FBE84A6"</b>.
</p>
<center>
<OBJECT ID="TraceView1" WIDTH=440 HEIGHT=200
      CLASSID="CLSID:24DCD5F2-6DBB-11D1-BEF5-00805FBE84A6">
      <PARAM NAME="ForeColor" VALUE="2147483666">
      <PARAM NAME="BackColor" VALUE="2147483663">
      <PARAM NAME="Font" VALUE="MS Sans Serif">
</OBJECT>
</center>
<p>
Next you must connect the control to the server you wish to monitor.
You can connect the TraceView control 
to a different server by supplying the name of the server in the <b>Server:</b> text field below.</p>
<center>
<b>Server:</b>
<input type=text name=serverNameField value="Localhost">
<INPUT TYPE=BUTTON NAME=SetServerButton  
      VALUE="Connect to Server"  
    OnClick=SetServer()>
</center>

<p>
The following command buttons, when clicked, call  
the <b>SetServer</b>, <b>ClearTrace</b>, <b>PauseTrace</b>, <b>
TraceProperties</b> methods of the control, respectively.   
<center>
<INPUT TYPE=BUTTON 
       NAME=ClearButton          
      VALUE="Clear Trace "  
    OnClick="TraceView1.ClearTrace()">
  
<INPUT TYPE=BUTTON 
       NAME=PauseButton        
      VALUE="Pause Trace"  
    OnClick="TogglePause()">
<INPUT TYPE=BUTTON 
       NAME=FilterButton           
      VALUE="Filter Events"  
    OnClick="TraceView1.TraceProperties()">
</center>
</p>

<p>
The <b>Trace state status:</b>text field is used to trap  
the <b>OnTraceStateChange</b> event.  
<center>
<b>Trace state status:</b> <INPUT TYPE=TEXT NAME=stateField value=" ">
</center>
</p>

<p>To view the source of this sample, right click 
the mouse and then select <b>View Source</b>.
</P>

<Script Language="VBScript">
Dim pauseState
        pauseState=0  'RESUMED (Default)

sub InitTraceView( )
   call setServer()
end sub

sub setServer()
   On Error Resume Next
   ResetForm
   call TraceView1.SetServer(ServerNameField.Value)
   If Err.Number <> 0 AND Err.Number <>13 then 
       MsgBox "Connection failed."  & err.number & vbCrLf & Err.Description
   End If
End Sub
sub TogglePause()
   if pauseState = 0 then
        call TraceView1.PauseTrace(0)
        pauseButton.value="Pause Trace"
        pauseState=1
   else
        call TraceView1.PauseTrace(1)
        pauseButton.value="Resume Trace "
        pauseState=0
   end if
End sub

sub TraceView1_OnTraceStateChange(newState)
    if newState=ACTIVE then
          stateField.value="ACTIVE"
    else
           stateField.value="PAUSE"
    end if
end  sub  
</Script>

</BODY>
</HTML>

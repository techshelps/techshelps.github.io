<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Apartment Model and Threading Issues</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Low-Level Java/COM Integration"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="apartthread.htm#javacom_0008000307010000">Instantiating New COM Objects</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="apartthread.htm#javacom_0008000307020000">How Marshaling Works</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jnative2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="Java & Native Code"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="COM_Programming_in_Java.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="javacom.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Java/Com"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Low-Level Java/COM Integration</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Java/Com</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Apartment Model and Threading Issues</H2>
<P>Most existing COM objects are not thread-safe. That is, clients are required to make all calls to the COM object from a single thread. In addition, this thread is required to process Window messages on a regular basis so that other threads can marshal calls to objects on that thread and so that system message broadcasts do not get blocked. (A thread that processes Window messages regularly is said to have a message pump.) 

<P>Furthermore, some COM objects are not even apartment-aware. These objects are not only restricted to a single thread, but are restricted to a specific thread known as the main apartment thread. The first thread that calls <B>CoInitialize</B> becomes the main apartment thread for the process.

<P>The following sections describe how the Microsoft VM instantiates COM objects and creates marshaling proxies while hiding the details from the Java programmer.

<H3 STYLE="color:#333366"><A NAME="javacom_0008000307010000">Instantiating New COM Objects</A></H3><P>When a Java class representing a COM object is instantiated using <B>new</B>, the VM for Java obtains the COM object's threading model from the registry. What happens next depends on which threading model is in effect:

<P>If the threading model is <B>Both</B> or <B>Free</B>, the object is assumed to be thread-safe and is instantiated on the calling thread. Any method call on this object will translate directly to a method call on the underlying COM object on the calling thread. 

<P>If the threading model is <B>Single</B>, the Microsoft VM automatically marshals to the process main apartment thread to create the object. Furthermore, it marshals all method calls on this object back to the main apartment thread. This represents additional overhead, but this is required for non&#150;thread-safe objects.

<P>If the threading model is <B>Apartment</B>, the Microsoft VM marshals the object creation and method calls in similar fashion. The choice of thread is determined as follows. If the creating thread is considered apartment-hostable, the object is created on that thread. Otherwise, the object is created on a special apartment thread created automatically by the Microsoft VM. All objects created in this fashion share one special apartment thread. The Microsoft VM does not create a new thread for every object. 

<H3 STYLE="color:#333366"><A NAME="javacom_0008000307020000">How Marshaling Works</A></H3><P>Java proxies are not only created when a COM object is instantiated using <B>new</B>. They are also created whenever a Java method is passed an object from COM and whenever Java receives an object from a COM method through a return value. In both cases (when a Java method is passed a COM object and when Java receives a COM object via a return value), there is no registry entry that provides the threading model of the object. The Microsoft VM for Java must be told explicitly whether the interface can be assumed to be thread-safe. If the interface is not thread-safe, the Microsoft VM must marshal all calls to the thread on which the interface was received. The jactivex tool adopts a conservative policy and marks all interface parameters as requiring marshaling.

<P>Even when the interface parameter is marked as requiring marshaling, the Microsoft VM will produce a non-marshaling proxy if the COM object indicates that it is thread-safe by aggregating the free-threaded marshaler (using <B>CoCreateFreeThreadedMarshaler</B>).

<P>The VM can only create a marshaling proxy on a thread that is apartment-hostable. If a call is made to a Java proxy, which is itself hosted on an apartment thread, proxies for the parameters to that call are made on that apartment thread. Hence, this requirement is automatically satisfied. If the thread is not apartment-hostable, the proxy creation will fail with a <B>ClassCastException</B>.
































































<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

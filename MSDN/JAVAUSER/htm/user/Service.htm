<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class Service</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Service.htm#com_0003001002010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Service.htm#com_0003001002020000">Methods</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Service.htm#com_0003001002030000">Fields</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="def_serv.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_serv.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="ServiceStatus.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.service</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class Service</H2>
<PRE><FONT FACE="Courier" SIZE="2">public abstract class Service
{
  // Fields
  public static final int <A HREF="Service.htm#com_0003001002030001">ACCEPT_PAUSE_CONTINUE</A>;
  public static final int <A HREF="Service.htm#com_0003001002030002">ACCEPT_SHUTDOWN</A>;
  public static final int <A HREF="Service.htm#com_0003001002030003">ACCEPT_STOP</A>;
  public static final int <A HREF="Service.htm#com_0003001002030004">CONTINUE_PENDING</A>;
  protected static boolean <A HREF="Service.htm#com_0003001002030005">disableassassin</A>;
  public PrintStream <A HREF="Service.htm#com_0003001002030006">err</A>;
  protected static final int <A HREF="Service.htm#com_0003001002030007">ERROR_SERVICE_SPECIFIC_ERROR</A>;
  protected static final int <A HREF="Service.htm#com_0003001002030008">NO_ERROR</A>;
  public PrintStream <A HREF="Service.htm#com_0003001002030009">out</A>;
  public static final int <A HREF="Service.htm#com_000300100203000a">PAUSE_PENDING</A>;
  public static final int <A HREF="Service.htm#com_000300100203000b">PAUSED</A>;
  public static final int <A HREF="Service.htm#com_000300100203000c">RUNNING</A>;
  public static final int <A HREF="Service.htm#com_000300100203000d">START_PENDING</A>;
  public static final int <A HREF="Service.htm#com_000300100203000e">STOP_PENDING</A>;
  public static final int <A HREF="Service.htm#com_000300100203000f">STOPPED</A>;

  // Constructors
  protected <A HREF="Service.htm#com_0003001002010100">Service</A>( );

  // Methods
  public synchronized boolean <A HREF="Service.htm#com_0003001002020100">canPause</A>( );
  public synchronized boolean <A HREF="Service.htm#com_0003001002020200">canShutdown</A>( );
  public synchronized boolean <A HREF="Service.htm#com_0003001002020300">canStop</A>( );
  protected synchronized void <A HREF="Service.htm#com_0003001002020400">CheckPoint</A>( );
  protected synchronized void <A HREF="Service.htm#com_0003001002020500">CheckPoint</A>( int waithint );
  protected static void <A HREF="Service.htm#com_0003001002020600">disableAllAssassins</A> ();
  protected void <A HREF="Service.htm#com_0003001002020700">disableAssassin</A>( );
  protected static void <A HREF="Service.htm#com_0003001002020800">enableAllAssassins</A> ();
  protected void <A HREF="Service.htm#com_0003001002020900">enableAssassin</A>( );
  protected void <A HREF="Service.htm#com_0003001002020a00">getAssassinTimeout</A>( long ms );
  public synchronized int <A HREF="Service.htm#com_0003001002020b00">getCheckPoint</A>( );
  public synchronized int <A HREF="Service.htm#com_0003001002020c00">getControlsAccepted</A>( );
  public synchronized int <A HREF="Service.htm#com_0003001002020d00">getCurrentState</A>( );
  public synchronized final ServiceStatus <A HREF="Service.htm#com_0003001002020e00">getServiceStatus</A>( );
  public final ServiceStatus <A HREF="Service.htm#com_0003001002020f00">getServiceStatusDirect</A>( );
  public synchronized int <A HREF="Service.htm#com_0003001002021000">getWaitHint</A>( );
  protected boolean <A HREF="Service.htm#com_0003001002021100">handleContinue</A>( );
  protected boolean <A HREF="Service.htm#com_0003001002021200">handleInterrogate</A>( );
  protected boolean <A HREF="Service.htm#com_0003001002021300">handlePause</A>( );
  protected boolean <A HREF="Service.htm#com_0003001002021400">handleShutdown</A>( );
  protected boolean <A HREF="Service.htm#com_0003001002021500">handleStop</A>( );
  protected boolean <A HREF="Service.htm#com_0003001002021600">handleUnrecognizedEvent</A> (int event);
  protected boolean <A HREF="Service.htm#com_0003001002021700">isAssassinActive</A>( );
  protected static void <A HREF="Service.htm#com_0003001002021800">preventAssassins</A> ();
  protected void <A HREF="Service.htm#com_0003001002021900">setAssassinTimeout</A>( long ms );
  public static boolean <A HREF="Service.htm#com_0003001002021a00">setAutoDumpErr</A>( boolean autodump );
  public static boolean <A HREF="Service.htm#com_0003001002021b00">setAutoDumpOut</A>( boolean autodump );
  protected synchronized void <A HREF="Service.htm#com_0003001002021c00">setContinuing</A>( int waithint );
  protected synchronized void <A HREF="Service.htm#com_0003001002021d00">setPaused</A>( );
  protected synchronized void <A HREF="Service.htm#com_0003001002021e00">setPausing</A>( int waithint );
  protected synchronized void <A HREF="Service.htm#com_0003001002021f00">setRunning</A>( int controls );
  protected synchronized void <A HREF="Service.htm#com_0003001002022000">setRunning</A>( );
  public boolean <A HREF="Service.htm#com_0003001002022100">setServiceAutoDumpErr</A>( boolean autodump );
  public boolean <A HREF="Service.htm#com_0003001002022200">setServiceAutoDumpOut</A>( boolean autodump );
  protected synchronized final boolean <A HREF="Service.htm#com_0003001002022300">setServiceStatus</A> (
        ServiceStatus newstatus);
  protected final boolean <A HREF="Service.htm#com_0003001002022400">setServiceStatusDirect</A>(
        ServiceStatus newstatus );
  protected synchronized void <A HREF="Service.htm#com_0003001002022500">setStopped</A>( );
  protected synchronized void <A HREF="Service.htm#com_0003001002022600">setStopping</A>( int waithint );
  protected void <A HREF="Service.htm#com_0003001002022700">StopServiceEventHandler</A> (int waithint);
}
</FONT></PRE>
<P>This class is a base class for creating Microsoft&#174; Windows NT&#174; system services in Java. 
<P><B>Caution</B>  By default, the service assassin is turned on for services. It must be turned off by using the <A HREF="Service.htm#com_0003001002020700">disableAssassin</A> method. For more information, see the <A HREF="Service.htm#com_0003001002020900">enableAssassin</A> method. 
<H3 STYLE="color:#333366"><A NAME="com_0003001002010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001002010100">Service</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected Service( );
</FONT></PRE>
<P><P>Constructs a new service. 
<P><B>Caution</B>  The service being created must send a status update within 30 seconds or disable the assassin; otherwise, the assassin will kill the service. 
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001002020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001002020100">canPause</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized boolean canPause( );
</FONT></PRE>
<P><P>Indicates whether the service can be paused. 

<P><B>Return Value:</B> <P>Returns true if the service can be paused (that is, if <A HREF="Service.htm#com_0003001002020c00">getControlsAccepted</A> returns <A HREF="Service.htm#com_0003001002030001">ACCEPT_PAUSE_CONTINUE</A>); otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020200">canShutdown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized boolean canShutdown( );
</FONT></PRE>
<P><P>Indicates whether the service should be notified when the system shuts down. 

<P><B>Return Value:</B> <P>Returns true if the service can accept shutdown requests (that is, if <A HREF="Service.htm#com_0003001002020c00">getControlsAccepted</A> returns <A HREF="Service.htm#com_0003001002030002">ACCEPT_SHUTDOWN</A>); otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020300">canStop</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized boolean canStop( );
</FONT></PRE>
<P><P>Indicates whether the service can be stopped. 

<P><B>Return Value:</B> <P>Returns true if the service can be stopped (that is, if <A HREF="Service.htm#com_0003001002020c00">getControlsAccepted</A> returns <A HREF="Service.htm#com_0003001002030003">ACCEPT_STOP</A>); otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020400">CheckPoint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void CheckPoint( );
</FONT></PRE>
<P><P>Increments the current checkpoint value. 
<P><B>Return Value:</B> <P>No return value. 

<P><B>Remarks:</B> <P>During a pending operation, the service should call the <B>CheckPoint</B> method to indicate that the service has progressed toward changing the state from pending to start, stop, continue, or pause. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020500">CheckPoint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void CheckPoint( int waithint );
</FONT></PRE>
<P><P>Sets the checkpoint to a specified value. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>waithint</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The estimated number of milliseconds until the next state. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020600">disableAllAssassins</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected static void disableAllAssassins ();
</FONT></PRE>
<P><P>Disables the assassins for each service in the process. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020700">disableAssassin</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void disableAssassin( );
</FONT></PRE>
<P><P>Disables the service assassin. If the assassin is disabled, the service must always be able to respond to stop and shutdown requests, because a service cannot be shut down through the task manager. If it is unknown whether the service will always be able to do so, it is best advised to leave the assassin enabled. If the assassin is killing the service too soon, use the <A HREF="Service.htm#com_0003001002021900">setAssassinTimeout</A> to set its default timeout. 

<P><B>Return Value:</B> <P>No return value. 

<P><B>See Also:</B> <A HREF="Service.htm#com_0003001002020900">enableAssassin</A>, <A HREF="Service.htm#com_0003001002021700">isAssassinActive</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020800">enableAllAssassins</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected static void enableAllAssassins ();
</FONT></PRE>
<P><P>Restores the assassins for each service in the process to their normal state. This method globally re-enables assassins, regardless of their individual settings. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020900">enableAssassin</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void enableAssassin( );
</FONT></PRE>
<P><P>Enables the assassin. The assassin will observe the state of the service and will terminate it in the following cases: 
<P>
<UL><LI>A control request is received and the service does not respond within the default time-out.
 
<LI>A call to <A HREF="Service.htm#com_0003001002022300">setServiceStatus</A> changes the state of the service to a state unrelated to a previous state change request. This means that if a <B>stop</B> request is received and the service proceeds to set the state to <A HREF="Service.htm#com_000300100203000c">RUNNING</A>, the service is terminated. However, if the service sets its state to <A HREF="Service.htm#com_000300100203000f">STOPPED</A> or <A HREF="Service.htm#com_000300100203000e">STOP_PENDING</A>, the service will terminate in the first case, or it will re-start its time-out in the second case.
 
<LI>A <A HREF="Service.htm#com_0003001002022300">setServiceStatus</A> call changes the state of the service to any <B>PENDING</B> state and the service does not make a <B>setServiceStatus</B> call to the corresponding state within the <A HREF="ServiceStatus.htm#com_0003001003010005">WaitHint</A> (or if <B>WaitHint</B> is not specified), within the assassin's default time-out.

</UL>
<P><B>See Also:</B> <A HREF="Service.htm#com_0003001002020700">disableAssassin</A>, <A HREF="Service.htm#com_0003001002021700">isAssassinActive</A>, <A HREF="Service.htm#com_0003001002021900">setAssassinTimeout</A>, <A HREF="Service.htm#com_000300100203000f">STOPPED</A>, <A HREF="Service.htm#com_000300100203000d">START_PENDING</A>, <A HREF="Service.htm#com_000300100203000e">STOP_PENDING</A>, <A HREF="Service.htm#com_000300100203000c">RUNNING</A>, <A HREF="Service.htm#com_0003001002030004">CONTINUE_PENDING</A>, <A HREF="Service.htm#com_000300100203000a">PAUSE_PENDING</A>, <A HREF="Service.htm#com_000300100203000b">PAUSED</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020a00">getAssassinTimeout</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void getAssassinTimeout( long ms );
</FONT></PRE>
<P><P>Obtains the default time for which the assassin will wait for any state change before terminating a service. The time-out initially defaults to 30 seconds. 

<P><B>Return Value:</B> <P>Returns the time, in milliseconds, that the assassin will wait for a state change before terminating the service. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020b00">getCheckPoint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized int getCheckPoint( );
</FONT></PRE>
<P><P>Determines the service checkpoint. 

<P><B>Return Value:</B> <P>Returns the current checkpoint value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020c00">getControlsAccepted</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized int getControlsAccepted( );
</FONT></PRE>
<P><P>Indicates the control codes that the service will accept and process. 

<P><B>Return Value:</B> <P>Returns flags that indicate which controls the service will accept. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020d00">getCurrentState</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized int getCurrentState( );
</FONT></PRE>
<P><P>Determines the service state. 

<P><B>Return Value:</B> <P>Returns the system's current state. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020e00">getServiceStatus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized final ServiceStatus getServiceStatus( );
</FONT></PRE>
<P><P>Determines the service status. 

<P><B>Return Value:</B> <P>Returns a copy of the service status, which is a <A HREF="ServiceStatus.htm">ServiceStatus</A> object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002020f00">getServiceStatusDirect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public final ServiceStatus getServiceStatusDirect( );
</FONT></PRE>
<P><P>Determines the service status. This operation is not synchronized with other status-changing operations. 

<P><B>Return Value:</B> <P>Returns a copy of the service status, which is a <A HREF="ServiceStatus.htm">ServiceStatus</A> object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021000">getWaitHint</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized int getWaitHint( );
</FONT></PRE>
<P><P>Determines the wait hint. 
<P><B>Return Value:</B> <P>Returns the service wait hint. 

<P><B>Remarks:</B> <P>The wait hint value specifies the number of milliseconds the service is likely to remain in the current pending state. If the service exceeds this value, the service will be terminated if the assassin is enabled. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021100">handleContinue</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected boolean handleContinue( );
</FONT></PRE>
<P><P>Handles the continue request. 
<P><B>Return Value:</B> <P>Returns false. 

<P><B>Remarks:</B> <P>Override this method in your derived service class if you want your service to handle continue events. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021200">handleInterrogate</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected boolean handleInterrogate( );
</FONT></PRE>
<P><P>Handles the interrogate request. 
<P><B>Return Value:</B> <P>Returns false. 

<P><B>Remarks:</B> <P>Override this method in your derived service class if you want your service to handle interrogate events. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021300">handlePause</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected boolean handlePause( );
</FONT></PRE>
<P><P>Handles the pause request. 
<P><B>Return Value:</B> <P>Returns false. 

<P><B>Remarks:</B> <P>Override this method in your derived service class if you want your service to handle pause events. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021400">handleShutdown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected boolean handleShutdown( );
</FONT></PRE>
<P><P>Handles the shutdown request. 
<P><B>Return Value:</B> <P>Returns false. 

<P><B>Remarks:</B> <P>Override this method in your derived service class if you want your service to handle shutdown events. By default, this method makes a call to <A HREF="Service.htm#com_0003001002021500">handleStop</A>. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021500">handleStop</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected boolean handleStop( );
</FONT></PRE>
<P><P>Handles the stop request. 
<P><B>Return Value:</B> <P>Returns false. 

<P><B>Remarks:</B> <P>Override this method in your derived service class if you want your service to handle stop events. By default, if stop control requests are accepted, it will call the <A HREF="Service.htm#com_0003001002022500">setStopped</A> method and return false.
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021600">handleUnrecognizedEvent</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected boolean handleUnrecognizedEvent (int event);
</FONT></PRE>
<P><P>Handles an unrecognized event code from the service control manager. Future versions of Windows NT may define additional events; this method provides a way for services to respond to these events. 

<P><B>Return Value:</B> <P>Returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021700">isAssassinActive</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected boolean isAssassinActive( );
</FONT></PRE>
<P><P>Indicates whether the assassin is currently active. 

<P><B>Return Value:</B> <P>Returns true if the assassin is active; otherwise, returns false. 

<P><B>See Also:</B> <A HREF="Service.htm#com_0003001002020900">enableAssassin</A>, <A HREF="Service.htm#com_0003001002020700">disableAssassin</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021800">preventAssassins</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected static void preventAssassins ();
</FONT></PRE>
<P><P>Prevents assassins from being created. For this method to be effective, each service should call this method from its static initializer. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021900">setAssassinTimeout</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void setAssassinTimeout( long ms );
</FONT></PRE>
<P><P>Sets the time for which the assassin will wait for any state change before terminating a service. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ms</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The time, in milliseconds, for the assassin to wait for a state change before terminating the service. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021a00">setAutoDumpErr</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static boolean setAutoDumpErr( boolean autodump );
</FONT></PRE>
<P><P>Determines whether each line written to <B>System.err</B> is automatically written to the event log or whether the service will manually flush the stream to log events. 

<P><B>Note</B>  This method changes the state of <B>System.err</B> if it has not been changed since the first service was instantiated. The status of <A HREF="Service.htm#com_0003001002030006">err</A>, the output stream for each service, can be changed with <A HREF="Service.htm#com_0003001002022100">setServiceAutoDumpErr</A>. 
<P><B>Return Value:</B> <P>Returns the previous auto-flush state. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>autodump</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true to automatically flush to the Windows NT event log whenever a new line is written. Set to false to enable writing to the error log. In this case, the stream can be manually flushed by calling <B>System.err.flush</B>, which will write any text printed to the stream since the last flush to the event log as a single event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021b00">setAutoDumpOut</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static boolean setAutoDumpOut( boolean autodump );
</FONT></PRE>
<P><P>Determines whether each line written to <B>System.out</B> is automatically written to the event log or whether the service will manually flush the stream to log events. 

<P><B>Note</B>  This method changes the state of <B>System.out</B> if it has not been changed since the first service was instantiated. The status of <A HREF="Service.htm#com_0003001002030009">out</A>, the output stream for each service, can be changed by using <A HREF="Service.htm#com_0003001002022200">setServiceAutoDumpOut</A>. 
<P><B>Return Value:</B> <P>Returns the previous auto-flush state. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>autodump</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true to automatically flush to the Windows NT event log whenever a new line is written. Set to false to enable the writing of multiline error messages to the information log. In this case, the stream can be manually flushed by calling <B>System.out.flush</B>, which will write any text printed to the stream since the last flush to the event log as a single event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021c00">setContinuing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void setContinuing( int waithint );
</FONT></PRE>
<P><P>Sets the service to <A HREF="Service.htm#com_0003001002030004">CONTINUE_PENDING</A>. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>waithint</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The estimated number of milliseconds it takes for the service to reach the <A HREF="Service.htm#com_000300100203000c">RUNNING</A> state. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021d00">setPaused</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void setPaused( );
</FONT></PRE>
<P><P>Sets the service to the <A HREF="Service.htm#com_000300100203000b">PAUSED</A> state. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021e00">setPausing</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void setPausing( int waithint );
</FONT></PRE>
<P><P>Sets the service to <A HREF="Service.htm#com_000300100203000a">PAUSE_PENDING</A> and sets the wait hint to <I>waithint</I>. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>waithint</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The estimated number of milliseconds it takes for the service to reach the <A HREF="Service.htm#com_000300100203000b">PAUSED</A> state. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002021f00">setRunning</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void setRunning( int controls );
</FONT></PRE>
<P><P>Sets the service to <A HREF="Service.htm#com_000300100203000c">RUNNING</A> and sets the <A HREF="ServiceStatus.htm#com_0003001003010002">ControlsAccepted</A> field in the <A HREF="ServiceStatus.htm">ServiceStatus</A> object to a specified value indicating the control capabilities of the service. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>controls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The control capabilities that <A HREF="ServiceStatus.htm#com_0003001003010002">ControlsAccepted</A> is set to. 

</FONT></TD></TR></TABLE>
<P><B>See Also:</B> <A HREF="ServiceStatus.htm#com_0003001003010002">com.ms.service.ServiceStatus.ControlsAccepted</A>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022000">setRunning</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void setRunning( );
</FONT></PRE>
<P><P>Sets the service to <A HREF="Service.htm#com_000300100203000c">RUNNING</A>. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022100">setServiceAutoDumpErr</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean setServiceAutoDumpErr( boolean autodump );
</FONT></PRE>
<P><P>Determines whether each line written to <A HREF="Service.htm#com_0003001002030006">err</A> is automatically written to the event log or whether the service will manually flush the stream to log events. 

<P><B>Return Value:</B> <P>Returns the previous auto-flush state. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>autodump</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true to automatically flush to the Windows NT event log whenever a new line is written. Set to false to enable the writing of multiline error messages. In this case, the stream can be manually flushed by calling <A HREF="Service.htm#com_0003001002030006">err</A>.flush, which will write any text printed to the stream since the last flush to the event log as a single event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022200">setServiceAutoDumpOut</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean setServiceAutoDumpOut( boolean autodump );
</FONT></PRE>
<P><P>Determines whether each line written to <A HREF="Service.htm#com_0003001002030009">out</A> is automatically written to the event log or whether the service will manually flush the stream to log events. 

<P><B>Return Value:</B> <P>Returns the previous auto-flush state. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>autodump</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Set to true to automatically flush to the Windows NT event log whenever a new line is written. Set to false to enable the writing of multiline error messages. In this case, the stream can be manually flushed by calling <A HREF="Service.htm#com_0003001002030009">out</A>.flush, which will write any text printed to the stream since the last flush to the event log as a single event. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022300">setServiceStatus</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized final boolean setServiceStatus (
        ServiceStatus newstatus);
</FONT></PRE>
<P><P>Changes the value of the service, based on a <A HREF="ServiceStatus.htm">ServiceStatus</A> object. 

<P><B>Return Value:</B> <P>Returns true if the status was updated; returns false if the <I>newstatus</I> parameter is not correct or the status could not be updated. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newstatus</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value that the service status is set to. The state in <I>newstatus</I> is copied to the current status. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022400">setServiceStatusDirect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected final boolean setServiceStatusDirect( ServiceStatus newstatus );
</FONT></PRE>
<P><P>Changes the value of the service, based on a <A HREF="ServiceStatus.htm">ServiceStatus</A> object. This method should be externally synchronized with other status-changing operations, if necessary. 
<P><B>Caution</B>  This method is not synchronized with the other status get/set methods. This method provides the service with a direct way to internally update the assassin. It allows the assassin to identify deadlock conditions on internally-initiated state changes. External state changes through Service Control Manager events will always update the assassin. Use <A HREF="Service.htm#com_0003001002020f00">getServiceStatusDirect</A> to obtain the status without synchronizing. 
<P><B>Return Value:</B> <P>Returns true if the status was updated; returns false if the <I>newstatus</I> parameter is not correct or the status could not be updated. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>newstatus</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value that the service status is set to. The state in <I>newstatus</I> is copied to the current status. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022500">setStopped</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void setStopped( );
</FONT></PRE>
<P><P>Sets the service to <A HREF="Service.htm#com_000300100203000f">STOPPED</A>. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022600">setStopping</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected synchronized void setStopping( int waithint );
</FONT></PRE>
<P><P>Sets the service to <A HREF="Service.htm#com_000300100203000e">STOP_PENDING</A> and the wait hint to <I>waithint</I>. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>waithint</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The estimated number of milliseconds it takes for the service to reach the <A HREF="Service.htm#com_000300100203000f">STOPPED</A> state. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001002022700">StopServiceEventHandler</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected void StopServiceEventHandler (int waithint);
</FONT></PRE>
<P><P>Internally stops the service. Sets the service to <A HREF="Service.htm#com_000300100203000f">STOPPED</A>. No more control commands will be dispatched after this method is called. 

<P><B>Note</B>  This method is provided only for backward compatibility with services developed using SDK 1.5. The preferred way to indicate a stopped service is by using <A HREF="Service.htm#com_0003001002022500">setStopped</A>. Version 1.5 reported a <A HREF="Service.htm#com_000300100203000e">STOP_PENDING</A> status and activated the assassin with the given waithint; a <A HREF="Service.htm#com_000300100203000f">STOPPED</A> status would automatically be reported when all non-daemon threads terminated. Because multiple services are supported, this version simply reports a <B>STOPPED</B> status and does not activate the assassin. 
<P><B>Return Value:</B> <P>No return value 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>waithint</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This parameter is not used. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001002030000">Fields</A></H3><DL>
<DT><B><A NAME="com_0003001002030001">ACCEPT_PAUSE_CONTINUE</A></B>
</DT><DD>Indicates that the service accepts pause and continue requests. 

</DD><DT><B><A NAME="com_0003001002030002">ACCEPT_SHUTDOWN</A></B>
</DT><DD>Indicates that the service accepts shutdown requests. 

</DD><DT><B><A NAME="com_0003001002030003">ACCEPT_STOP</A></B>
</DT><DD>Indicates that the service accepts stop requests. 

</DD><DT><B><A NAME="com_0003001002030004">CONTINUE_PENDING</A></B>
</DT><DD>Indicates that the service is changing its state from pause to run. 

</DD><DT><B><A NAME="com_0003001002030005">disableassassin</A></B>
</DT><DD>When true, prevents the assassin from being activated. The assassin ensures that the service actually stops when instructed to do so. This deactivates the assassins for each service in the process. 

<P><B>Note</B> Each service has its own assassin, which can be disabled by calling <A HREF="Service.htm#com_0003001002020700">disableAssassin</A>. All assassins can be globally disabled by calling <A HREF="Service.htm#com_0003001002020600">disableAllAssassins</A>. 

</DD><DT><B><A NAME="com_0003001002030006">err</A></B>
</DT><DD>An error output stream for the service. Data written to the stream is automatically redirected to the event log as error events using the event source specified to jntsvc. Each line printed to the stream results in a new event. Multiple lines can be written by synchronizing on this object and using <A HREF="Service.htm#com_0003001002022100">setServiceAutoDumpErr</A> to temporarily turn off auto-logging, as shown in the following example: 
<PRE><FONT FACE="Courier" SIZE="2">
  synchronized (err)
  {
    boolean oldautodump = setServiceAutoDumpErr(false);
    err.println("Line 1");
    err.println("Line 2");
    setServiceAutoDumpErr(oldautodump);
    err.flush();
  }
</FONT></PRE>
</DD><DT><B><A NAME="com_0003001002030007">ERROR_SERVICE_SPECIFIC_ERROR</A></B>
</DT><DD>Service-specific error reported. This is set in <A HREF="ServiceStatus.htm#com_0003001003010006">ServiceStatus.Win32ExitCode</A> to indicate that an error has occurred. 

</DD><DT><B><A NAME="com_0003001002030008">NO_ERROR</A></B>
</DT><DD>No error reported. This is set in <A HREF="ServiceStatus.htm#com_0003001003010006">ServiceStatus.Win32ExitCode</A> to indicate that the service terminated correctly. 

</DD><DT><B><A NAME="com_0003001002030009">out</A></B>
</DT><DD>A standard output stream for the service. Data written to the stream is automatically redirected to the event log using the event source specified to the jntsvc tool. Each line printed to the stream results in a new event. Multiple lines can be written by synchronizing on this object and using <A HREF="Service.htm#com_0003001002022200">setServiceAutoDumpOut</A> to temporarily turn off auto-logging, as shown in the following example. 
<PRE><FONT FACE="Courier" SIZE="2">
  synchronized (out)
  {
    boolean oldautodump = setServiceAutoDumpOut(false);
    out.println("Line 1");
    out.println("Line 2");
    setServiceAutoDumpOut(oldautodump);
    out.flush();
  }
</FONT></PRE>
</DD><DT><B><A NAME="com_000300100203000a">PAUSE_PENDING</A></B>
</DT><DD>Indicates that the service is changing its state from run to pause. 

</DD><DT><B><A NAME="com_000300100203000b">PAUSED</A></B>
</DT><DD>Indicates that the service is paused. 

</DD><DT><B><A NAME="com_000300100203000c">RUNNING</A></B>
</DT><DD>Indicates that the service is running. 

</DD><DT><B><A NAME="com_000300100203000d">START_PENDING</A></B>
</DT><DD>Indicates that the service is starting. 

</DD><DT><B><A NAME="com_000300100203000e">STOP_PENDING</A></B>
</DT><DD>Indicates that the service is stopping. 

</DD><DT><B><A NAME="com_000300100203000f">STOPPED</A></B>
</DT><DD>Indicates that the service has stopped. 

</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

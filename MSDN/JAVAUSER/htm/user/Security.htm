<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Security Issues</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="JDirect"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Security.htm#jdirect_000700020c010000">Trusted Versus Untrusted Classes</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Security.htm#jdirect_000700020c020000">Security Checkpoints for J/Direct Method Calls</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Security.htm#jdirect_000700020c030000">Security Checkpoints for J/Direct Structures</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Security.htm#jdirect_000700020c040000">Security and the com.ms.win32 Classes</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jdirect2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="JDirect"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Compare_RNI.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="jdirect.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="JDirect"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Error_Messages.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>About J/Direct</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">JDirect</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Security Issues</H2>
<P>Although Microsoft&#174; J/Direct&#153; is a very powerful feature for standalone Java applications and trusted intranet Web applications, it is clearly too powerful to be used by normal Java applets on the Web. This section describes how J/Direct works with the security system of the Microsoft Win32 VM for Java to prevent untrusted code from abusing the power provided by J/Direct.

<H3 STYLE="color:#333366"><A NAME="jdirect_000700020c010000">Trusted Versus Untrusted Classes</A></H3><P>J/Direct divides all loaded Java classes into one of two categories: 
<OL><LI>Fully trusted (indicating maximum permissions). 
<LI>Untrusted. 
</OL>
<P>Only fully trusted classes are allowed to use J/Direct. A Java class is considered fully trusted if one of the following statements is true.
<OL><LI>The class is digitally signed indicating full trust. An example of such a class would be a signed applet. To find out more about signing cabinet files, see the <A href="cabarc.htm">Creating and Using Cabinet Files</A> article and the <A href="signcode.htm">Signcode</A> article in the Tools section of the Microsoft SDK for Java.
<LI>The class is installed on the target computer's CLASSPATH or installed by the package manager. A downloadable digitally signed library designed to be shared among multiple applets could meet this criterion.
<LI>The class is running as a non-browser application using the jview or the wjview application.
</OL>
<P>An unsigned applet on the Web, on the other hand, constitutes untrusted Java code.

<H3 STYLE="color:#333366"><A NAME="jdirect_000700020c020000">Security Checkpoints for J/Direct Method Calls</A></H3><P>The Microsoft VM applies security checks to J/Direct methods at three different times: 
<OL><LI>At link time.
<LI>Upon first invocation.
<LI>Upon every invocation.
</OL>
<P>An attempted J/Direct call takes place only if each of the three security checks passes or is explicitly disabled. 

<H4 STYLE="color:#333366"><A NAME="jdirect_000700020c020100">Security Checks at Link time</A></H4><P>Linking is what occurs when one Java class invokes or accesses (using the Reflection API) a member of another class. At link time, the Microsoft VM checks to see whether the class being referenced is accessible and whether the arguments being passed are of the correct type and number. The class is considered accessible if it is in the same package or if it is declared public. 

<P>With the standard Java language, you are limited to a choice of two options for class accessibility: you can either declare a class public (so that anyone can link to it) or non-public (so that only classes in the same package can link to it). However, with Microsoft&#174; Internet Explorer 4.0, there is now a third option. You can declare the class as "public for fully trusted callers only." You can declare any class with this type of accessibility, even if the class does not use J/Direct.
To declare the class, place the following directive at the beginning of the class.
<PRE><FONT FACE="Courier" SIZE="2">
  /** @security(checkClassLinking=on) */
</FONT></PRE>
<P>It is important to notice that this security check only prevents untrusted callers from directly calling the "protected" class. It does not prevent indirect calls. A third (fully trusted) class can forward a call from an untrusted caller to the "protected" class. However, there is a safeguard. The intermediate class must either be installed on the target computer's CLASSPATH, or it must be digitally signed for maximum trust and installed using the browser. 

<H4 STYLE="color:#333366"><A NAME="jdirect_000700020c020200">Security Checks upon First Invocation</A></H4><P>The first invocation of a method is the first time the method is invoked from any caller. At this time, for each method marked with the <B>native</B> keyword, the Microsoft VM determines whether the method is a member of a fully trusted class. If it is not, a <B>SecurityException</B> is thrown that includes the message, "Only fully trusted classes can have native methods as members." Because this security check does not depend on the calling context, it only needs to be performed once. If it passes, the check does not take place on future invocations. There is no way to disable this security check. 

<H4 STYLE="color:#333366"><A NAME="jdirect_000700020c020300">Security Checks upon Every Invocation</A></H4><P>This is the most stringent check available. On every call, the entire call stack is examined. If even one caller that is not fully-trusted is discovered on the call stack, a <B>SecurityException</B> is thrown. By default, all J/Direct methods perform this check. RNI methods do not perform this check because of backwards compatibility requirements. RNI was designed to allow easy porting from the original JDK 1.0 native interface, which did not offer this security check.
<P>Although this security check offers maximum safety, Microsoft offers a way to disable it. The mechanism for disabling is provided because this stringent security check has two important side effects.
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Possible Performance Degradation
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This security check requires a scan of the entire call stack each time a J/Direct method is called. The performance degradation is most noticeable on trusted applets, which generally run with a security manager present. Applications, on the other hand, usually do not see a significant performance drop. This is due to the fact that J/Direct omits the call stack scan for applications that run without a security manager.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inflexibility
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This security mechanism forces the use of maximum permissions, even in cases where only one specific permission is required. For example, consider a trusted library that uses J/Direct to expose a single permission to untrusted applets in a safe way. It would be appropriate for this library to turn off the call time security check and perform its own security check for the specific permission.
</FONT></TD></TR></TABLE>
<P>The <B>@security</B> directive disables the per-invocation security check. Here is the syntax for this directive.
<PRE><FONT FACE="Courier" SIZE="2">
  /** @security(checkDllCalls=off) */
</FONT></PRE>
<P>The <B>@security</B> directive applies to the entire class. Individual methods within a class cannot be tagged. The following example shows the placement of the <B>@security</B> directive.
<PRE><FONT FACE="Courier" SIZE="2">
  /** @security(checkDllCalls=off) */
  class FastJDirectMethods{
    /** @dll.import(...) */
    static native void func();
  }
</FONT></PRE>
<P>Be aware of the fact that disabling this security check transfers responsibility for security from the Microsoft VM to you. Remember that even with this security check disabled, you will still have to digitally sign the class for maximum trust. If you decide to use this directive, be sure to take the following precautions:
<UL><LI>All J/Direct methods should be declared private.
<LI>Any publicly accessible methods should never blindly pass caller arguments to J/Direct. You must take responsibility for ensuring that only valid arguments are passed to native code.
<LI>Your class should expose no more capability than is required, and it should guard all access to these capabilities with the appropriate security checks.
</UL>
<P><B>Important Note Regarding Trusted Applets:</B> Calls from within an applet's <B>init</B>, <B>start</B>, <B>stop</B>, or <B>destroy</B> methods may trigger a <A href="SecurityExceptionEx.htm">SecurityExceptionEx</A> even if the applet is trusted. To avoid this situation, you should assert permissions by executing the following code.
<PRE><FONT FACE="Courier" SIZE="2">
  import com.ms.security.*;
    ...
  PolicyEngine.assertPermission(PermissionID.SYSTEM);
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="jdirect_000700020c030000">Security Checkpoints for J/Direct Structures</A></H3><P>J/Direct also imposes security restrictions on classes that are marked using the <B>@dll.struct</B> compiler directive. Because structures only become unsafe when they are instantiated, these security checks are more efficient than the checks used for J/Direct methods. The following two security checks are performed on <B>@dll.struct</B> classes.
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Load time
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Classes marked with <B>@dll.struct</B> will load only if the context indicates full trust. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Link time
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Code that is not fully trusted cannot link to classes declared using <B>@dll.struct</B>. The Microsoft VM will throw a <B>NoClassDefFoundError</B> if such an attempt is made.
</FONT></TD></TR></TABLE>
<H3 STYLE="color:#333366"><A NAME="jdirect_000700020c040000">Security and the com.ms.win32 Classes</A></H3><P>For maximum security, the J/Direct methods defined in the <B>com.ms.win32</B> package do perform the call stack check on each invocation. If you are using these classes for a Java application (running under jview or wjview), the performance overhead will be negligible. If you are using <B>com.ms.win32</B> classes from a trusted class and require maximum performance, you should copy the required J/Direct declarations into your own classes and disable the per-invocation security check. See the <A HREF="Security.htm#jdirect_000700020c020300">Security Checks upon Every Invocation</A> section for more information on disabling the per-invocation security check.

<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Jactivex's JavaTLB Compatibility Support</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Working with MS VM"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jactivex.htm#jactivex_0004000601010000">Using the Jactivex Command-Line Tool</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jactivex.htm#jactivex_0004000601020000">Upgrading to Jactivex from JavaTLB</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jactivex.htm#jactivex_0004000601030000">@com Directives</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jactivex.htm#jactivex_0004000601040000">Implementing Automation Objects in Java</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" href="jactivex.htm#jactivex_0004000601050000">Jactivex Extended Command-Line Options</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/tools2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Tools"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A href="jvcrd_rn.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_tool.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Tools"></A></TD><TD ALIGN="center" VALIGN="bottom"><A href="marshal.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Using Jactivex's JavaTLB Compatibility Support</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Tools</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Using Jactivex's JavaTLB Compatibility Support</H2>
<P>The jactivex utility is used for hosting automation-enabled ActiveX controls in Java, and generating .java files for the classes and interfaces that are described by a type library. These .java files, once compiled into .class files, allow Java programs to use COM (Component Object Model) services. Although the default operation of the tool is ActiveX Control manipulation in Java, this documentation only covers tool usage for features originally supported by the javatlb and jcom tools (which this tool replaces). 

<H3 STYLE="color:#333366"><A NAME="jactivex_0004000601010000">Using the Jactivex Command-Line Tool</A></H3><P>To use a COM class from Java, you must first import it; this means creating a Java class that represents the COM class in the context of Java. The jactivex tool uses the COM type library information to create Java classes that represent COM interfaces.

<P>A type library is a mechanism defined by COM to define type information. Each type library contains complete type information about one or more COM entities, including classes, interfaces, and dispinterfaces. For more information about type libraries, see the Microsoft Platform SDK. To find out how to use the interfaces that are available from a particular programmable control or automation server, see the documentation provided by that vendor. 

<P><B>Note</B>  The jactivex tool is virtually identical to the jcom tool, and similar to the javatlb tool. The jactivex tool generates Java source code (.java) rather than the .class files that javatlb generates. The generated Java source requires new functionality not present in older versions of the compiler in Microsoft&#174; Visual J++&#153;. To learn about upgrading from older versions of this tool, see <A href="jactivex.htm#jactivex_0004000601020000">Upgrading to Jactivex from JavaTLB</A>.<P>To use the jactivex tool for low-level Java/COM integration (that is, enabling the JavaTLB behavior), use the /javatlb switch and provide the name of a type library as follows: 

<P>jactivex /javatlb &lt;filename&gt; 

<P><I>Filename</I> is the filename of the type library (*.tlb, *.olb, *.ocx, *.dll or *.exe).

<P><B>Note</B> If you specify an .ocx file without the /javatlb switch, the jactivex tool will generate a JavaBean wrapper for the ActiveX control (its default operation). 

<P>For example, consider this command line, which first creates a \Widgets subdirectory underneath the trusted library directory (specified by the registry key HKEY_LOCAL_MACHINE\Software\Microsoft\Java VM\TrustedLibsDirectory):

<PRE><FONT FACE="Courier" SIZE="2">jactivex /javatlb widgets.tlb</FONT></PRE>
<P>If the trusted library directory is \Windows\Java\Trustlib, the preceding command creates the directory \Windows\Java\Trustlib\Widgets, and fills it with .java files. A separate .java file is created for each class, structure, enumeration, and interface described by the widgets.tlb type library. The names of packages and directories created by jactivex contain only lowercase letters. 

<P>If the type library contains an <I>importlib</I> statement, jactivex creates a separate Java package in a separate directory for the imported type library. 
<H3 STYLE="color:#333366"><A NAME="jactivex_0004000601020000">Upgrading to Jactivex from JavaTLB</A></H3><P>Jactivex has been designed for backward compatibility with the javatlb tool. In most cases, upgrading to jactivex should require only three modifications to your makefiles or build scripts:

<OL><LI>Replace references to javatlb with references to jactivex.
<LI>Add the appropriate command-line switch (/javatlb) in any scripts to access jactivex features. 
<LI>Upgrade to a compiler for Java that recognizes the new @com directives generated by jactivex. If you are using the Visual J++ compiler (jvc.exe), you must use version 1.02.3920 or later to compile the output from jactivex. Earlier versions of jvc will not issue a compile-time error, but the class files they generate will not work. For more information about the @com directives, see <A href="jactivex.htm#jactivex_0004000601030000">@com Directives</A>.
</OL>
<P>The following table shows the correspondence between jactivex and javatlb command-line options: 

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Javatlb</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Jactivex</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Notes</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/d</B> <I>dir</I></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/javatlb /d</B> <I>dir</I></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Option works identically</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/p</B> <I>package</I></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/javatlb /p</B> <I>package</I></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Option works identically</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/p:b-</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/javatlb /p:b-</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Option works identically</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/X:m-</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/javatlb /X:m-</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Option works identically</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/U</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">N/A</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Not supported in jactivex<SUP>*</SUP></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>/U:T</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">N/A</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Not supported in jactivex<SUP>*</SUP></FONT></TD>
</TR>
<TR><TD COLSPAN=3 ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><SUP>*</SUP>Jactivex does not support the generation of summary.txt files as did javatlb because jactivex generates human-readable .java source.</FONT></TD></TR>
</TABLE>
<H3 STYLE="color:#333366"><A NAME="jactivex_0004000601030000">@com Directives</A></H3><P>Jactivex generates Java source files that use a new Microsoft extension called the @com directives. These directives must appear inside specially formatted comments that are similar to the javadoc documentation comments syntax. A typical @com directive generated by jactivex might look like the following example: 

<PRE><FONT FACE="Courier" SIZE="2">/** @com.method(vtoffset=4, dispid=100, type=METHOD, name="Hello")
    @com.parameters() */
    public void Hello();</FONT></PRE>
<P>The @com directives are important and are used to generate the extra information needed by the Java/COM integration subsystem in the Microsoft Win32 VM for Java. Therefore, the compiler used to compile jactivex's output must process these directives. If you are using the jvc.exe, you must use version 1.02.3920 or later to compile jactivex's output. Earlier versions of jvc will not issue an compile-time error, but the class files they generate will not work.


<H3 STYLE="color:#333366"><A NAME="jactivex_0004000601040000">Implementing Automation Objects in Java</A></H3><P>There are two ways to implement automation objects in Java: 

<OL><LI>Use automatic IDispatch
<LI>Use the <B>/javatlb /cj</B> command-line option to generate a .impl file. 
</OL>
<P>The following sections describe each of these methods. 
<H4 STYLE="color:#333366"><A NAME="jactivex_0004000601040100">Using Automatic IDispatch</A></H4><P>The Microsoft VM now implements IDispatch automatically for almost all Java objects (previously, it did so only for applets). This means that tools such as jactivex are no longer necessary simply to script a Java object from an automation controller such as Microsoft&#174; Visual Basic&#174; or Microsoft &#174; Visual Basic&#174; Scripting Edition (VBScript). To implement a simple automation object in Java: 
<OL><LI>Implement the Java object and compile it.
<LI>Register it using javareg (version 3.0 pre-release 2).
<LI>Ensure that the Java class is visible in the CLASSPATH environment variable.
</OL>
<H4 STYLE="color:#333366"><A NAME="jactivex_0004000601040200">Using the /javatlb /cj Option with Jactivex</A></H4><P>The second approach uses jactivex to generate COM interfaces from type libraries. This approach requires more work but allows you to ensure that the exposed interface matches the typelib description exactly. 
<P>The /javatlb /cj approach requires an interface definition language (IDL) or object definition language (ODL) file describing your interface and a coclass, which uses the [default] attribute to define the default interface. The following example shows a simple IDL file for the IWidget interface: 

<PRE><FONT FACE="Courier" SIZE="2">[ 
&#009;   object,
&#009;   uuid(...),
&#009;   helpstring("IWidget"),
&#009;   pointer_default(unique)
           ]
           interface IWidget : IUnknown
           {
&#009;    HRESULT add([in] long x, [in] long y, [out,retval] long*pz);
           };

&#009;[
&#009;&#009;uuid(...),
&#009;&#009;helpstring("CWidget")
&#009;]
&#009;coclass CWidget
&#009;{
&#009;&#009;[default] interface IWidget;
&#009;};</FONT></PRE>
<P>When you invoke jactivex on the typelib using the /javatlb /cj switches, Jactivex generates an extra file named CWidgetImpl.java, which looks as follows:

<PRE><FONT FACE="Courier" SIZE="2">public class CWidgetImpl implements IWidgetDefault,com.ms.com.NoAutoScripting
&#009;{
&#009;    public int add(int x, int y) 
                {
&#009;       throw new com.ms.com.ComFailException(0x80004001);  //E_NOTIMPL
                }
&#009;}</FONT></PRE>
<P>To create a Java implementation of CWidget, you can either extend the class or use CWidgetImpl itself as a template for MyWidget (this is preferable as it eliminates a superclass). The following shows the superclass implementation:

<PRE><FONT FACE="Courier" SIZE="2">public class MyWidget extends CWidgetImpl
&#009;{
&#009;    public int add(int x, int y) 
        {
&#009;        return x+y;
&#009;    }
    }</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="jactivex_0004000601050000">Jactivex Extended Command-Line Options</A></H3><P>The jactivex tool replaces both javatlb and jcom. By default, the tool is used to host automation-enabled ActiveX controls in Java. To access typelib features, you must use the /javatlb command-line switch to activate the other switches described in the following section. 

<H4 STYLE="color:#333366"><A NAME="jactivex_0004000601050100">Translation</A></H4><DL>
<DT><B>/javatlb</B>
 </DT><DD>Specifies typelib translation. Use this switch combined with others to access typelib features of the jactivex tool.
</DD><DT><B>/b</B>
 </DT><DD>Uses the JavaBeans design pattern for properties. For example, by default, a read-write property named "a" becomes mapped to property accessor methods named "geta" and "puta". If the "/b" flag is specified, the names "getA" and "setA" will be used instead. In addition, the property is exposed to COM by the name "A" only. It is not possible to access the names "getA," or "setA" from COM (these names were exposed only for compatibility with javatlb). 

</DD><DT><B>/G3.1</B>
 </DT><DD>Prevents use of features that are not supported by the VM in Microsoft&#174; Internet Explorer version 3.1. Disabled by default.

</DD><DT><B>/G4</B>
 </DT><DD>Prevents the use of features that are not supported by the VM in Internet Explorer version 4.0. Disabled by default; this switch is reserved for future use. 
 
</DD><DT><B>/r</B>
 </DT><DD>Causes jactivex to register all type libraries that are mentioned on the command line.
 
</DD><DT><B>/w</B>
 </DT><DD>Disables all warnings.

</DD><DT><B>/WX</B>
 </DT><DD>Treats warnings as errors. This prevents any output files from being generated if a warning is reported.

</DD><DT><B>/x2</B>
 </DT><DD>Maps <B>VT_I2</B> and <B>VT_UI2</B> to Java <B>char</B> rather than Java <B>short</B>. By default, these types are mapped to Java <B>short</B> for compatibility with javatlb. 

</DD><DT><B>/xc</B>
 </DT><DD>This causes all coclasses in the type libraries to be ignored.

</DD><DT><B>/xd-</B>
 </DT><DD>Suppresses creation of default versions of the .java files.
Jactivex normally creates two .java files for each dispinterface: one that is used when the interface is the default for a coclass, and one that is used when the interface is not the default. The default versions of the java files are needed only to implement the interface using Java. Suppressing the creation of default versions can speed up compilation considerably on large type libraries. 

 <P>Do not use this switch with the <B>/cj</B> option. 
</DD><DT><B>/xh</B>
 </DT><DD>Modifies translation of <B>HRESULT</B> types so that only <B>HRESULT</B> return types that have the high (<B>FAIL</B>) bit set cause Java exceptions. Non-failing <B>HRESULT</B>s (such as S_FALSE) are treated as if they were <B>S_OK</B>.
 
 <P><B>Warning</B>  This feature is not supported by versions of the Microsoft VM prior to Internet Explorer 4.0. Classes built with this option set will not load on versions prior to version 4.0. If your class must run on versions prior to version 4.0, do not use this switch. Callers of this method will need to catch <A HREF="ComSuccessException.htm">ComSuccessException</A> to avoid the exception.</DD><DT><B>/xi</B>
 </DT><DD>Causes the method declarations and COM declarations to be duplicated in the coclass files. This simplifies using COM objects from Java because default interface methods can be called directly on the object without first casting to an interface pointer. That is, without the <B>/xi</B> option you would have to write code like this: 

<PRE><FONT FACE="Courier" SIZE="2">
IBeeper b = (IBeeper)new Beeper();
b.beep();
</FONT></PRE>
<P>Using the <B>/xi</B> option, this can be simplified as follows:

<PRE><FONT FACE="Courier" SIZE="2">
Beeper b = new Beeper();
b.beep();
</FONT></PRE>
<P>In addition, this form speeds up method invocation. The trade-offs are that the coclass files are larger and any manual changes to the information generated by jactivex must be made in both the coclass and the interface. 

</DD><DT><B>/X:m-</B>
 </DT><DD>Disables thread switching. By default, the Microsoft VM assumes that all COM objects passed as parameters are non&#151;thread-safe and performs background thread-switching to ensure that such objects are called on the correct thread. Using this switch disables this extra thread-switching. Typically, you will use this switch when you have designed a new thread-safe COM library. 


</DD></DL>
<H4 STYLE="color:#333366"><A NAME="jactivex_0004000601050200">Output</A></H4><DL>
<DT><B>/cj</B>
 </DT><DD>Generates a template file for each coclass that can be edited to implement that coclass in Java. The file is named &#060;coclass&#062;Impl.java. This file includes all the required methods with simple implementations that just throw an E_NOTIMPL exception. To create a Java class that implements the coclass, replace the class name and fill in the method implementations. 

</DD><DT><B>/d</B> <I>directory</I>
 </DT><DD>Specifies the base directory where the package directory will be placed. For example, the following command will create the widgets package directory in the C:\MyPackages directory and place all generated .java files in C:\MyPackages\Widgets.
 
 <PRE><FONT FACE="Courier" SIZE="2">jactivex /javatlb /d c:\mypackages widgets.tlb</FONT></PRE>
<P>By default, the base directory is the value specified in the registry HKEY_LOCAL_MACHINE\Software\Microsoft\Java VM\TrustedLibsDirectory. The installation of the Microsoft VM sets this to %WINDIR%\java\trustlib.

</DD><DT><B>/e</B>
 </DT><DD>Generate files only for type libraries explicitly listed on the command line. This switch allows you to set command-line switches on a per-typelib basis. This may cause generation of .java files that reference unresolved names or packages.
 <P>If the <B>/e</B> option is not specified, jactivex will recursively compile type libraries needed to resolve all references. 
</DD><DT><B>/j</B>
 </DT><DD>Generates Java source files without the extended COM information. As a result, these source files can be browsed more easily and will compile. They will not, however, integrate with COM if they are loaded into the Microsoft VM.

</DD><DT><B>/p</B> <I>package</I>
 </DT><DD>Specifies the target directory for .java files generated by jactivex as shown in the following example. 
 <PRE><FONT FACE="Courier" SIZE="2">jactivex /javatlb /p gremlinsoft widgets.tlb</FONT></PRE>
<P>This example command line places the .java files in \windows\java\trustlib\gremlinsoft\widgets directory. With this option, you can define, for example, a company-specific directory tree that contains the .java files for all the COM objects produced by your company. The package parameter can have multiple levels. For example, the following command would place the .class files in the directory \windows\java\trustlib\gremlinsoft\toolworks\widgets. 

 <PRE><FONT FACE="Courier" SIZE="2">jactivex /javatlb /p gremlinsoft.toolworks widgets.tlb</FONT></PRE>
<P>To use these classes in your Java program, specify an import statement of the following form in your source code:

 <PRE><FONT FACE="Courier" SIZE="2">import gremlinsoft.toolworks.widgets.*;</FONT></PRE>
</DD><DT><B>/p:b[-]</B>

 </DT><DD>Use this option to include (or exclude) the basename as the package for the converted class. For example, if you are converting widgets.tlb to Java classes, this option will create a package called widgets. Since the default is to use the basename as the package, this option is generally used with the dash (-) following it to disable the automatic creation of the package directory; this places the created .java files in the default package directory (java\trustlib or the directory specified in the /d option). For example, the following command places all class files in the c:\mypackages directory: 
 <PRE><FONT FACE="Courier" SIZE="2">jactivex /javatlb /p:b- /d c:\mypackages widgets.tlb </FONT></PRE>
</DD></DL>
<H4 STYLE="color:#333366"><A NAME="jactivex_0004000601050300">Miscellaneous Switches</A></H4><DL>
<DT><B>/?</B>

 </DT><DD>Prints a brief summary of command-line options.

</DD><DT><B>/l</B> <I>lstfile</I>

 </DT><DD>Generates a response file for jvc that lists every .java file created by jactivex. The response file is a text listing of Java files so it can also be used to find out where and what files jactivex created. 
 <P>For example, the following command line creates a file called mylist.lst, which can then be used as an input file to jvc:


 <PRE><FONT FACE="Courier" SIZE="2">jactivex /javatlb /l myfiles.lst widget.tlb</FONT></PRE>
<PRE><FONT FACE="Courier" SIZE="2">JVC @myfiles.lst</FONT></PRE>
<P>If a relative path is given for the response file, it is placed in the current directory. Its location is not affected by the <B>/d</B> option.

</DD><DT><B>/n</B> <I>jnffile</I>

 </DT><DD>Specifies an optional .jnf file, which supplies extra information on how to convert the type library. The .jnf file is a text file that has the following format: 

 <PRE><FONT FACE="Courier" SIZE="2">[Custom]
&#009;&lt;typename&gt;=&lt;javatype&gt;,&lt;javamarshalertype&gt;
&#009;&#009;...</FONT></PRE>
<P>The purpose of the .jnf file is to inform jactivex that certain types are to be marshaled using a COM Custom Marshaling hook class. 
</DD><DT><B>/nologo</B>
 </DT><DD>Disables the startup banner.
</DD></DL>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

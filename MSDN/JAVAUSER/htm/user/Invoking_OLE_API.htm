<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Invoking OLE API Functions</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="JDirect"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204010000">OLE Mode Syntax</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204020000">How Win32 Functions Compare with OLE Functions</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204030000">Comparing Win32 Code to OLE Code</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204040000">Invoking OLE Functions</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204050000">How OLE Mode Works</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204060000">Passing and Receiving Strings from OLE Functions</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204070000">Passing GUIDs (and IIDs and CLSIDs)</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204080000">Passing VARIANTs</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="Invoking_OLE_API.htm#jdirect_0007000204090000">Passing COM Interface Pointers</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jdirect2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="JDirect"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Marshaling.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="jdirect.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="JDirect"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="Aliasing.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>About J/Direct</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">JDirect</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Invoking OLE API Functions</H2>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204010000">OLE Mode Syntax</A></H3><P>The <B>@dll.import</B> directive includes a special mode tailored for importing OLE API functions. To use this mode, simply include the <I>ole</I> modifier as in the following example.
<PRE><FONT FACE="Courier" SIZE="2">
  /** @dll.import("OLE32", ole) */
  public class OLE32 {
    ...
  } 
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204020000">How Win32 Functions Compare with OLE Functions</A></H3><P>In theory, the functions exported out of OLE32.DLL and OLEAUT32.DLL are no different from any other DLL function. In practice, the OLE functions follow a consistent calling style of their own. 
OLE functions differ from Win32 functions in the following ways:
<UL><LI>OLE functions only come in Unicode. There are no ANSI OLE functions. 
 <LI>Virtually all OLE functions return a 32-bit status code known as an <B>HRESULT</B> through the normal function return value. The high-bit indicates whether the function succeeded (hi-bit off) or failed (hi-bit on). A few functions return multiple success values (typically S_OK and S_FALSE) but most return only one success value (S_OK).
 <LI>If an OLE function returns some value other than the status code, it does so by having the caller supply a pointer to a variable that will receive the value on exit. This return value pointer is, by convention, the last parameter.
 <LI>The Win32 style of returning strings is to fill in a caller-allocated buffer. OLE functions typically return strings by allocating them using <B>CoTaskMemAlloc</B> and expecting the caller to free them using <B>CoTaskMemFree</B>.
</UL>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204030000">Comparing Win32 Code to OLE Code</A></H3><P>The code for a simple <B>Add</B> function would look like this in the Win32 style of coding.
<PRE><FONT FACE="Courier" SIZE="2">
  int sum;
  sum = Add(10, 20);
</FONT></PRE>
<P>In OLE style, the <B>Add</B> function would be written the following way.
<PRE><FONT FACE="Courier" SIZE="2">
  HRESULT hr;
  int sum;
  hr = Add(10, 20, &amp;sum);
  if (FAILED(hr)) {
    ...handle error..
  } 
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204040000">Invoking OLE Functions</A></H3><P>The <I>ole</I> mode takes advantage of this consistent coding style to provide a Java-friendly way to call OLE functions. Invoking an OLE-style <B>Add</B> function from Java looks much like invoking a more traditional Win32-style function.
<PRE><FONT FACE="Courier" SIZE="2">
  /** dll.import("OLELIKEMATHDLL", ole) */
  private native static int Add(int x, int y);
  int sum = Add(10, 20);
  // if we got here, Add succeeded.
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204050000">How OLE Mode Works</A></H3><P>Because of the <I>ole</I> modifier, the Microsoft Win32 VM for Java automatically assumes that the native <B>Add</B> function returns an <B>HRESULT</B>. The Microsoft VM notices that the <B>Add</B> function returns an integer. When invoking <B>Add</B>, the VM automatically allocates a temporary variable of type int and inserts a pointer to it as a third parameter. After the native <B>Add</B> function returns, the VM automatically checks the <B>HRESULT</B> and if it indicates a failure (high-bit on), a Java exception of type com.ms.com.<A HREF="ComFailException.htm">ComFailException</A> is thrown. If the <B>HRESULT</B> does not indicate a failure, the VM retrieves the <B>Add</B> function's true return value from the temporary variable it created, and it returns that value. 
<P>Unlike Java/COM integration, a return value of S_FALSE does not cause a <A HREF="ComSuccessException.htm">ComSuccessException</A> to be thrown. If you need to distinguish between success results, you need to use normal DLL calling mode and treat the <B>HRESULT</B> as an integer return value.

<P>To summarize, <I>ole</I> mode alters the semantics of DLL calling as follows:
<OL><LI> All strings and characters are assumed to be Unicode.
<LI> The function return value of the native function is presumed to be an <B>HRESULT</B>. The Microsoft VM throws a <A HREF="ComFailException.htm">ComFailException</A> if the returned <B>HRESULT</B> indicates failure.
<LI> If the Java method return type is not void, the Microsoft VM will assume that the native function returns an additional result through a pointer, which is the final argument to the function. The VM will supply this pointer argument and dereference it after the call to obtain the additional return value. This value will be returned as the value of the Java method.
</OL>
<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204060000">Passing and Receiving Strings from OLE Functions</A></H3><P>Declaring a parameter as type <B>String</B> on an <I>ole</I> mode function passes a LPCOLESTR. The Microsoft VM also includes a preceding length prefix so the string can also be treated as a BSTR.
<P>Declaring a return value as type <B>String</B> in <I>ole</I> mode causes the Microsoft VM to pass a pointer to an uninitialized LPCOLESTR*. When the native function returns, the Microsoft VM will convert the returned LPCOLESTR to a Java <B>String</B>, and then call <B>CoTaskMemFree</B> to free the string.

<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204070000">Passing GUIDs (and IIDs and CLSIDs)</A></H3><P>The system class <A HREF="com_guid.htm">com.ms.com._Guid</A> is used to represent GUIDs. Passing a <A HREF="com_guid.htm">_Guid</A> object as a parameter passes a pointer to a GUID to the native function. Declaring a return type of <B>_Guid</B> causes the Microsoft VM to pass a pointer to an uninitialized GUID that the function fills in (in <I>ole</I> mode only).

<P>For example, OLE32 exports the functions <B>CLSIDFromProgID</B> and <B>ProgIDFromCLSID</B> to map between CLSIDs and the human-readable names used by the Visual Basic function <B>CreateObject</B>. These functions have the following prototypes.
<PRE><FONT FACE="Courier" SIZE="2">
HRESULT CLSIDFromProgID(LPCOLESTR szProgID, LPCLSID pclsid);
HRESULT ProgIDFromCLSID(REFCLSID clsid, LPOLESTR *lpszProgId);
</FONT></PRE>
<P>In Java, you would declare these methods in the following way.
<PRE><FONT FACE="Courier" SIZE="2">
  import com.ms.com._Guid;
  class OLE {
    /** @dll.import("OLE32", ole) */
    public static native _Guid CLSIDFromProgID(String szProgID);
&#009;    
    /** @dll.import("OLE32", ole) */
    public static native String ProgIDFromCLSID(_Guid clsid);
  } 
</FONT></PRE>
<P>Do not confuse <A HREF="com_guid.htm">com.ms.com._Guid</A> with 
<A HREF="com_guid.htm">com.ms.com.Guid</A> (with no underscore). The latter is an obsolete class.

<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204080000">Passing VARIANTs</A></H3><P> Declaring a parameter to be type com.ms.com.<A HREF="Variant.htm">Variant</A> passes a pointer to a VARIANT to the native function. Declaring a return value to be type com.ms.com.<B>Variant</B> (ole-mode only) passes a pointer to an uninitialized Variant for the native function to fill in. 

<H3 STYLE="color:#333366"><A NAME="jdirect_0007000204090000">Passing COM Interface Pointers</A></H3><P>To pass a COM interface pointer, you must generate a Java/COM interface class using a tool such as jactivex.exe. You can then pass or receive COM interfaces by declaring a parameter to be of that interface type.

<P>For example, the system class com.ms.com.<B>IStream</B> is a Java/COM interface that represents the Structured Storage <B>IStream*</B> interface. The OLE32 function <B>CreateStreamOnHGlobal</B> could be declared as follows.
<PRE><FONT FACE="Courier" SIZE="2">
import com.ms.com.*;
/** @dll.import("OLE32", ole) */
public static native IStream CreateStreamOnHGlobal(int hGlobal,
                                     boolean fDeleteOnRelease);
</FONT></PRE>
<P>Java/COM integration is a complex topic and a full discussion is beyond the scope of this documentation. For more information, see the <A HREF="javacom.htm">Low-Level Java/COM Integration</A> article.

<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class PermissionTreeOutput</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=162 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x.gif" WIDTH="160" HEIGHT="108"  BORDER=0 ALT="Package com.ms.security"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="PermissionTreeOutput.htm#com_0000000102010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="PermissionTreeOutput.htm#com_0000000102020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="PermissionSet.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_psec.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A
HREF="PermissionUtils.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.security</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class PermissionTreeOutput</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class PermissionTreeOutput extends <B>OutputStream</B>
{
  // Constructors
  public <A HREF="PermissionTreeOutput.htm#com_0000000102010100">PermissionTreeOutput</A>();

  // Methods
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102020100">addField</A>();
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102020200">addNode</A>(int level);
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102020300">addPermission</A>(int level, IPermission perm);
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102020400">addPermission</A>(int level, IPermission perm,
        boolean highRisk);
  public int <A HREF="PermissionTreeOutput.htm#com_0000000102020600">count</A>();
  public String <A HREF="PermissionTreeOutput.htm#com_0000000102020700">dump</A>();
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102020800">flush</A>() throws IOException;
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102020900">increase</A>();
  public int[] <A HREF="PermissionTreeOutput.htm#com_0000000102020a00">nodeLevel</A>();
  public char[][] <A HREF="PermissionTreeOutput.htm#com_0000000102020b00">nodeValue</A>();
  public int[] <A HREF="PermissionTreeOutput.htm#com_0000000102020c00">riskFactor</A>();
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102020d00">setStartLevel</A>(int sl);  
  public int <A HREF="PermissionTreeOutput.htm#com_0000000102020f00">startLevel</A>();
  public String <A HREF="PermissionTreeOutput.htm#com_0000000102021000">toString</A>();
  public void <A   HREF="PermissionTreeOutput.htm#com_0000000102021700">writeField</A>(String s) throws IOException;
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102021800">writeNode</A>(String s, int level) throws IOException;
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102021900">writePermission</A>(String s, int level,
        IPermission perm) throws IOException;
  public void <A HREF="PermissionTreeOutput.htm#com_0000000102021a00">writePermission</A>(String s, int level,
        IPermission perm, boolean highRisk) throws IOException;
}
</FONT></PRE>
<P>This class is used to create a tree representation of the permissions. In the security dialog boxes for Microsoft&#174; Internet Explorer version 4.01, the permissions are displayed in the form of a tree control decorated with icons that indicate risk factors. 
<P>This class is used with the <A HREF="IEncodablePermission.htm#com_0003000d0e010200">IEncodablePermission.encode</A> method and the <A HREF="EncodeFormats.htm#com_0003000d0201000b">EncodeFormats.DISPLAYTREE</A> format. To be displayed correctly in the security dialog boxes, a permission must be able to handle the <B>EncodeFormat.DISPLAYTREE</B> encoding type. The method that encodes the permission in <B>DISPLAYTREE</B> format should ensure that the <B>OutputStream</B> that receives the encoding is an instance of <B>PermissionTreeOutput</B>. Then the <A HREF="PermissionTreeOutput.htm#com_0000000102021900">writePermission</A>, <A HREF="PermissionTreeOutput.htm#com_0000000102021800">writeNode</A>, and <A HREF="PermissionTreeOutput.htm#com_0000000102021700">writeField</A> methods can be used to display information about the permission. 
<P>For instance, to add a title node for displaying the permission, you would use one of the <A HREF="PermissionTreeOutput.htm#com_0000000102021900">writePermission</A> methods. To add a sub-node heading for grouping related permission parameters, use the <A HREF="PermissionTreeOutput.htm#com_0000000102021800">writeNode</A> method. To add a leaf node that contains a specific parameter value, use the <A HREF="PermissionTreeOutput.htm#com_0000000102021700">writeField</A> method. 
<P>The following code would produce the tree displayed below. For brevity, only the <A HREF="IEncodablePermission.htm#com_0003000d0e010300">mapFormat</A> and <A HREF="IEncodablePermission.htm#com_0003000d0e010200">encode</A> methods are shown. However, your class would need to implement all the methods of the <A HREF="IEncodablePermission.htm">IEncodablePermission</A> and <A HREF="IPermission.htm">IPermission</A> interfaces. 

<PRE><FONT FACE="Courier" SIZE="2">
public class MyPermission implements IPermission, IEncodablePermission
{
  private String treedisplaytag = "someString";
  private boolean param1;
  private int param2;
  private String param3;
   
  // Methods and data members are omitted for brevity.

  // Map the supported formats to tags.
  public String mapFormat(String format) 
  {
    if (format == EncodeFormats.DISPLAYTREE)
      return treedisplaytag;
  
    // else check to see if format represents
    // another supported format.
    ...
  }

  // Encode the permission to a supported format.
  public boolean encode(String tag, OutputStream myStream)
  {
    if (tag.equals(treedisplaytag)) 
    {
      return encodeTreeDisplay(myStream);      
    }

    // else check to see if the tag indicates
    // another supported encoding.
    ...
  } 

  // Encode the permission to the DISPLAYTREE format.
  boolean encodeTreeDisplay(OutputStream myStream)
  {
    if(myStream instanceof PermissionTreeOutput) 
    {
      PermissionTreeOutput tree = (PermissionTreeOutput) myStream;
      treeDisplay(tree);
      return true;
    }
    else return false;
  }

  // Write information to the tree.
  void treeDisplay(PermissionTreeOutput treeDisplay)
  {
    treeDisplay.writePermission("My Sample Permission", 0, this);
    treeDisplay.writeNode("Parameter 1", 1);
    treeDisplay.writeField("this.param1");
    treeDisplay.writeNode("Parameter 2", 1);
    treeDisplay.writeNode("Sub-Param 2", 2);
    treeDisplay.writeField("this.param2");
    treeDisplay.writeNode("Parameter 3", 1);
    .
    .
    .
  }
}

</FONT></PRE>
<P>The displayed tree: 
<PRE><FONT FACE="Courier" SIZE="2">
+--+ My Sample Permission
   | 
   +--+ Parameter 1 
   |  | 
   |  +--- X (the value of param1)
   | 
   +--+ Parameter 2
   |  | 
   |  +--+ Sub-Param 2 
   |     | 
   |     +--- Y (the value of sub-param2)
   |
   +--+ Parameter 3 
   . 
   . 
   . 
</FONT></PRE>
<P>Also see <A HREF="IEncodablePermission.htm">com.ms.security.IEncodablePermission</A>
<PRE><FONT FACE="Courier" SIZE="2"><B>OutputStream</B>
  |
  +--<B>PermissionTreeOutput</B>
</FONT></PRE>
<H3 STYLE="color:#333366"><A NAME="com_0000000102010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0000000102010100">PermissionTreeOutput</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public PermissionTreeOutput();
</FONT></PRE>
<P><P>Creates a new <A HREF="PermissionTreeOutput.htm">PermissionTreeOutput</A> stream. 

</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0000000102020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0000000102020100">addField</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addField();
</FONT></PRE>
<P><P>Creates a leaf in the tree for displaying permission parameters. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102020200">addNode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addNode(int level);
</FONT></PRE>
<P><P>Creates a new node for displaying a header for permission data. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>level</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The depth of the tree at which to place the node. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102020300">addPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addPermission(int level, IPermission perm);
</FONT></PRE>
<P><P>Inserts a node for the specified permission and assigns it a risk value based on the default permission set. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>level</I>
</FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The depth of the tree at which to place the node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>perm</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The permission that is being displayed at the current node. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102020400">addPermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void addPermission(int level, IPermission perm, 
        boolean highRisk);
</FONT></PRE>
<P><P>Inserts a node for the specified permission. If the permission is not explicitly high risk, it is checked against the default sets to determine the risk factor. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>level</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The depth of the tree at which to place the node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>perm</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The permission that is being displayed at the current node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>highRisk</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies whether this permission should be flagged as high risk. 

</FONT></TD></TR></TABLE>

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102020600">count</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int count();
</FONT></PRE>
<P><P>Retrieves the number of elements in the tree. 

<P><B>Return Value:</B> <P>Returns the number of elements in the tree. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102020d00">setStartLevel</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void setStartLevel(int sl);
</FONT></PRE>
<P><P>Sets the depth of the root node. Use this method when combining two (or more) separate trees into one tree. 

<P><B>Return Value:</B> <P>No return value 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sl</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The depth of the root node. 

</FONT></TD></TR></TABLE>

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102020f00">startLevel</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int startLevel();
</FONT></PRE>
<P><P>Retrieves the starting level of the root node. 

<P><B>Return Value:</B> <P>Returns the depth of the root node. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102021000">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString();
</FONT></PRE>
<P><P>Converts the display tree to a <B>String</B> where the nodes and values are delimited by tabs and newline characters. 

<P><B>Return Value:</B> <P>Returns a formatted text version of the tree. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102021700">writeField</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void writeField(String s) throws IOException;
</FONT></PRE>
<P><P>Creates a leaf with the specified string as its value. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The value to display at the leaf that is created. 
</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
if an error occurs while writing to the output stream. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102021800">writeNode</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void writeNode(String s, int level) throws IOException;
</FONT></PRE>
<P><P>Creates a node with the specified string as the name for a new node in the display tree. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>level</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The depth of the tree at which to place the node. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
if an error occurs while writing to the output stream. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102021900">writePermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void writePermission(String s, int level, 
        IPermission perm) throws IOException;
</FONT></PRE>
<P><P>Creates a node with the specified string as the name for a new permission in the display tree. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>level</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The depth of the tree at which to place the node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>perm</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The permission that is being displayed at the current node. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
if an error occurs while writing to the output stream. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0000000102021a00">writePermission</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void writePermission(String s, int level, IPermission perm,
        boolean highRisk) throws IOException;
</FONT></PRE>
<P><P>Creates a node with the specified string as the name for a new permission in the display tree. In addition, the permission can be flagged as high risk. 

<P><B>Return Value:</B> <P>No return value.

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the permission. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>level</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The depth of the tree at which to place the node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>perm</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The permission that is being displayed at the current node. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>highRisk</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies whether this permission should be flagged as high risk. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IOException</B>
if an error occurs while writing to the output stream. 
</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

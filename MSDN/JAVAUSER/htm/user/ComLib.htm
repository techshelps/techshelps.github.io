<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class ComLib</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="ComLib.htm#com_0003000506010000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="ComFailException.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_pcom.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="ComSuccessException.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.com</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class ComLib</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class ComLib
{
  // Methods
  public native static void <A HREF="ComLib.htm#com_0003000506010100">declareMessagePumpThread</A>();
  public static native boolean <A HREF="ComLib.htm#com_0003000506010200">isEqualUnknown</A>(Object o1, Object o2);
  public native static int <A HREF="ComLib.htm#com_0003000506010300">jcdwClassOffsetOf</A>(Class cls,
        String fieldName);
  public native static int <A HREF="ComLib.htm#com_0003000506010400">jcdwClassSizeOf</A>(Class cls);
  public native static int <A HREF="ComLib.htm#com_0003000506010500">jcdwOffsetOf</A>(Object jcdw,
        String fieldName);
  public native static int <A HREF="ComLib.htm#com_0003000506010600">jcdwSizeOf</A>(Object jcdw);
  public static boolean <A HREF="ComLib.htm#com_0003000506010700">ownsCleanup</A>(Object structObj);
  public native static Object <A HREF="ComLib.htm#com_0003000506010d00">makeProxyRef</A>(Object o);
  public static native Object <A HREF="ComLib.htm#com_0003000506010800">ptrToStruct</A>(Class structClass,
        int ptr);
  public native static void <A HREF="ComLib.htm#com_0003000506010900">release</A>(Object o);
  protected static native void <A HREF="ComLib.htm#com_0003000506010a00">setDataWrapperSize</A>(
        Object DataWrapper, int cb);
  public native static boolean <A HREF="ComLib.htm#com_0003000506010b00">supportsInterface</A>(Object pComObject,
        _Guid iid);
  public static native void <A HREF="ComLib.htm#com_0003000506010c00">threadStartMTA</A>(Thread thd);
}
</FONT></PRE>
<P>This class contains routines that are used during Java Component Object Model (COM) integration. All <B>ComLib</B> methods are static; therefore, you can use this class without instantiating it. 

<H3 STYLE="color:#333366"><A NAME="com_0003000506010000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003000506010100">declareMessagePumpThread</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static void declareMessagePumpThread();
</FONT></PRE>
<P><P>Enables apartment model hosting. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010200">isEqualUnknown</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native boolean isEqualUnknown(Object o1, Object o2);
</FONT></PRE>
<P><P>Compares the COM identity of two Java objects. If the two objects have equal <B>IUnknown</B>* pointers, they have the same COM identity. 

<P><B>Return Value:</B> <P>Returns true if the two objects have the same COM identity; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o1</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The first object to be compared. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o2</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The second object to be compared. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010300">jcdwClassOffsetOf</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static int jcdwClassOffsetOf(Class cls, String fieldName);
</FONT></PRE>
<P><P>Retrieves the offset of a COM data structure that represents an instance of a Java proxy class. The offset is measured in bytes. 

<P><B>Return Value:</B> <P>Returns the offset of a COM data structure, measured in bytes. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class object for a Java proxy to a COM data structure. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fieldName</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the COM-mapped field. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010400">jcdwClassSizeOf</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static int jcdwClassSizeOf(Class cls);
</FONT></PRE>
<P><P>Retrieves the size (measured in bytes) of a COM data structure that represents instances of the class. 

<P><B>Return Value:</B> <P>Returns the size of a COM data structure, measured in bytes. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cls</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class object for a Java proxy to a COM data structure. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010500">jcdwOffsetOf</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static int jcdwOffsetOf(Object jcdw, String fieldName);
</FONT></PRE>
<P><P>Retrieves the offset of a COM data structure (measured in bytes) that is represented by a Java proxy. 

<P><B>Return Value:</B> <P>Returns the COM data structure offset, measured in bytes. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>jcdw</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The Java proxy to a data structure. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fieldName</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The name of the COM-mapped field. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010600">jcdwSizeOf</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static int jcdwSizeOf(Object jcdw);
</FONT></PRE>
<P><P>Retrieves the size of a COM data structure (measured in bytes) that is represented by a Java proxy. 

<P><B>Return Value:</B> <P>Returns the size of a COM data structure, measured in bytes. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>jcdw</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The Java proxy to a data structure. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010700">ownsCleanup</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static boolean ownsCleanup(Object structObj);
</FONT></PRE>
<P><P>Determines whether Java is responsible for doing cleanup tasks for the COM object. 

<P><B>Return Value:</B> <P>Returns true if the object is owned by Java; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>structObj</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The COM object that is being checked. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_0003000506010d00">makeProxyRef</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static Object makeProxyRef(Object o);
</FONT></PRE>
<P><P>Increments the reference count on a COM object. 

<P><B>Return Value:</B> <P>Returns a Java callable wrapper that holds a reference to the COM object. When the returned JCW is garbage collected, the reference is dropped.


<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Any Java object that can be mapped to a COM object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_0003000506010800">ptrToStruct</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native Object ptrToStruct(Class structClass, int ptr);
</FONT></PRE>
<P><P>Maps a raw pointer onto a structure. This method simulates a C-style cast of an arbitrary pointer to a structure. 

<P><B>Return Value:</B> <P>Returns an instance of <B>structClass</B>. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>structClass</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class declared using @dll.struct. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>ptr</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The raw pointer that is mapped. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010900">release</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static void release(Object o);
</FONT></PRE>
<P><P>Forces Java to release all outstanding reference counts on a native COM object. After releasing the reference counts, any attempts to use the COM object through this Java proxy results in an <B>UnsatisfiedLinkError</B>. If the specified object does not wrap a native COM object, this method quietly succeeds but does nothing. 
<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>o</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The Java proxy of a native COM object. 

</FONT></TD></TR></TABLE>
<P><B>Remarks:</B> <P>If the Java proxy wraps a non&#150;thread-safe native COM object that was created on another thread, the actual release of the object can occur after the <B>release</B> method has returned. 
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010a00">setDataWrapperSize</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected static native void setDataWrapperSize(Object DataWrapper, int cb);
</FONT></PRE>
<P><P>Allocates and binds memory to an existing data wrapper. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>DataWrapper</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The wrapper that memory is allocated and bound to. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cb</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The memory (measured in bytes) that is bound to the data wrapper. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003000506010b00">supportsInterface</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public native static boolean supportsInterface(Object pComObject,
        _Guid iid);
</FONT></PRE>
<P><P>Determines whether a COM object supports a particular interface by using that object's <B>QueryInterface</B> method. The interface is not returned because Java interfaces exist only at compile time and are not distinguishable from the main object at runtime. 

<P><B>Return Value:</B> <P>Returns true if the interface is supported; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>pComObject</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Any Java object that can be mapped to a COM object. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>iid</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The identifier of the interface to query for. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_0003000506010c00">threadStartMTA</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static native void threadStartMTA(Thread thd);
</FONT></PRE>
<P><P>Initializes a thread without initializing COM. This means that (by default) the thread will be in a COM multi-threaded apartment. This method is similar to the <B>Thread.start</B> method, but <B>Thread.start</B> initializes the thread as a separate single-threaded COM apartment.

<P><B>Return Value:</B> <P>No return value.

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>thd</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <B>Thread</B> to start.

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>IllegalThreadStateException</B> 
 if the thread was already started.

</BLOCKQUOTE>


<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

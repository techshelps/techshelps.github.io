<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Class IntRanges</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Packages"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="IntRanges.htm#com_0003001408010000">Constructors</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="IntRanges.htm#com_0003001408020000">Methods</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="355" VALIGN="bottom"><IMG SRC="art/package2.gif" WIDTH="355" HEIGHT="27"  BORDER=0 ALT="Packages"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom"><A HREF="IncludeExcludeWildcards.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="def_util.htm"><IMG SRC="art/pkgnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="This Package"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="MultiComparison.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="355" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Package com.ms.util</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">This<BR>Package</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Class IntRanges</H2>
<PRE><FONT FACE="Courier" SIZE="2">public class IntRanges implements <B>Cloneable</B>, <A HREF="SetComparison.htm">SetComparison</A>
{
  // Constructors
  public <A HREF="IntRanges.htm#com_0003001408010100">IntRanges</A> ();
  public <A HREF="IntRanges.htm#com_0003001408010200">IntRanges</A> (String str);
  public <A HREF="IntRanges.htm#com_0003001408010300">IntRanges</A> (String str, String delims);

  // Methods
  public synchronized void <A HREF="IntRanges.htm#com_0003001408020100">addRange</A> (int s, int e);
  public synchronized void <A HREF="IntRanges.htm#com_0003001408020200">addRanges</A> (IntRanges r);
  public synchronized void <A HREF="IntRanges.htm#com_0003001408020300">addSingleton</A> (int n);
  public StringBuffer <A HREF="IntRanges.htm#com_0003001408020400">appendToStringBuffer</A> (StringBuffer sb);
  protected Object <A HREF="IntRanges.htm#com_0003001408020500">clone</A> ();
  public int <A HREF="IntRanges.htm#com_0003001408020600">compare</A> (IntRanges other);
  public int <A HREF="IntRanges.htm#com_0003001408020700">compare</A> (IntRanges other, IIntRangeComparator judge);
  public int <A HREF="IntRanges.htm#com_0003001408020800">compareSet</A> (Object other);
  public static String <A HREF="IntRanges.htm#com_0003001408020900">ComparisonResulttoString</A> (int cmp);
  public synchronized void <A HREF="IntRanges.htm#com_0003001408020a00">condense</A> (IIntRangeComparator judge);
  public void <A HREF="IntRanges.htm#com_0003001408020b00">condense</A> ();
  public boolean <A HREF="IntRanges.htm#com_0003001408020c00">contains</A> (int find);
  public synchronized boolean <A HREF="IntRanges.htm#com_0003001408020c01">contains</A> (int s, int e);
  public synchronized IntRanges <A HREF="IntRanges.htm#com_0003001408020d00">copy</A> ();
  public int <A HREF="IntRanges.htm#com_0003001408020e00">getRangeEnd</A> (int idx);
  public synchronized int[] <A HREF="IntRanges.htm#com_0003001408020f00">getRanges</A> ();
  public int <A HREF="IntRanges.htm#com_0003001408021000">getRangeStart</A> (int idx);
  public synchronized int <A HREF="IntRanges.htm#com_0003001408021100">indexOf</A> (int find, int fromRange);
  public int <A HREF="IntRanges.htm#com_0003001408021200">indexOf</A> (int find);
  public IntRanges <A HREF="IntRanges.htm#com_0003001408021300">intersect</A> (IntRanges other,
        IIntRangeComparator judge);
  public IntRanges <A HREF="IntRanges.htm#com_0003001408021400">intersect</A> (IntRanges other);
  public static int <A HREF="IntRanges.htm#com_0003001408021500">invertComparisonResult</A> (int cmp);
  public boolean <A HREF="IntRanges.htm#com_0003001408021600">isEmpty</A> ();
  public synchronized boolean <A HREF="IntRanges.htm#com_0003001408021700">lock</A> (Object key);
  public synchronized void <A HREF="IntRanges.htm#com_0003001408021800">parse</A> (String str, String delims);
  public void <A HREF="IntRanges.htm#com_0003001408021900">parse</A> (String str);
  public boolean <A HREF="IntRanges.htm#com_0003001408021a00">removeRange</A> (int rs, int re);
  public void <A HREF="IntRanges.htm#com_0003001408021b00">removeRange</A> (int i, IIntRangeComparator hook);
  public void <A HREF="IntRanges.htm#com_0003001408021c00">removeRange</A> (int i);
  public synchronized boolean <A HREF="IntRanges.htm#com_0003001408021d00">removeRange</A> (int s, int e,
        IIntRangeComparator hook);
  public synchronized void <A HREF="IntRanges.htm#com_0003001408021e00">removeRanges</A> (int i, int count,
        IIntRangeComparator hook);
  public void <A HREF="IntRanges.htm#com_0003001408021f00">removeRanges</A> (int i, int count);
  public boolean <A HREF="IntRanges.htm#com_0003001408022000">removeSingleton</A> (int n);
  public boolean <A HREF="IntRanges.htm#com_0003001408022100">removeSingleton</A> (int n, IIntRangeComparator hook);
  public synchronized void <A HREF="IntRanges.htm#com_0003001408022200">setRanges</A> (int[] array);
  public int <A HREF="IntRanges.htm#com_0003001408022300">size</A> ();
  public synchronized void <A HREF="IntRanges.htm#com_0003001408022400">sort</A> (IIntRangeComparator judge);
  public void <A HREF="IntRanges.htm#com_0003001408022500">sort</A> ();
  public String <A HREF="IntRanges.htm#com_0003001408022600">toString</A> ();
  public synchronized boolean <A HREF="IntRanges.htm#com_0003001408022700">unlock</A> (Object key);
}
</FONT></PRE>
<P>This class maintains a list of integer ranges. Readers and writers of this list should be externally synchronized. 

<H3 STYLE="color:#333366"><A NAME="com_0003001408010000">Constructors</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001408010100">IntRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IntRanges ();
</FONT></PRE>
<P><P>Constructs an empty set of ranges as an <B>IntArrayOutputStream</B> object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408010200">IntRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IntRanges (String str);
</FONT></PRE>
<P><P>Constructs a set of ranges from the given string. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A string containing ranges of integers, where the bounds of each range are separated by a dash (-), and separate ranges are delimited by commas. A range of a single integer can be entered by including just the single integer, separated by delimiters. For example: 1-5,9-11,44,13-120. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408010300">IntRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IntRanges (String str, String delims);
</FONT></PRE>
<P><P>Constructs a set of ranges from the given string with specified delimiters. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A string containing ranges of integers, where the bounds of each range are separated by a dash (-). A range of a single integer can be entered by including just the single integer, separated by delimiters. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>delims</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The character or characters that separate the ranges. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H3 STYLE="color:#333366"><A NAME="com_0003001408020000">Methods</A></H3><H4 STYLE="color:#333366"><A NAME="com_0003001408020100">addRange</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addRange (int s, int e);
</FONT></PRE>
<P><P>Adds a range to the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The lower limit of the range. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper limit of the range. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020200">addRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addRanges (IntRanges r);
</FONT></PRE>
<P><P>Adds another set of ranges to this object's set of ranges. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>r</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Another <A HREF="IntRanges.htm">IntRanges</A> object to add to this <B>IntRanges</B> object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020300">addSingleton</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void addSingleton (int n);
</FONT></PRE>
<P><P>Adds a range of a single integer to the <B>IntRange</B> object. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>n</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The integer range. For example, if <I>n</I> is 43, a range of 43-43 is added. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020400">appendToStringBuffer</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public StringBuffer appendToStringBuffer (StringBuffer sb);
</FONT></PRE>
<P><P>Appends a string representation of the integer ranges to a given string buffer. Used by <A HREF="IntRanges.htm#com_0003001408022600">toString</A>. 

<P><B>Return Value:</B> <P>Returns a string buffer containing the concatenated strings. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>sb</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string buffer to append the set of integer range pairs to. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020500">clone</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">protected Object clone ();
</FONT></PRE>
<P><P>Creates a copy of the set of ranges. 

<P><B>Return Value:</B> <P>Returns an identical object to this object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020600">compare</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compare (IntRanges other);
</FONT></PRE>
<P><P>Compares this set of ranges to another. 

<P><B>Return Value:</B> <P>Returns the following: 
<DL>
<DT><B>OVERLAP</B> 
 </DT><DD>the sets of integers are not equal but have a common set of integers. 
</DD><DT><B>DISJOINT</B> 
 </DT><DD>the sets of integers have no integers in common 
</DD><DT><B>SUBSET</B> 
 </DT><DD>the second set of integers includes all of the integers in the first set, plus some integers that are not in the first set. 
</DD><DT><B>EQUAL</B> 
 </DT><DD>the sets of integers are identical 
</DD><DT><B>SUPERSET</B> 
 </DT><DD>the first set of integers includes all of the integers in the second set, plus some integers that are not in the second set. 
</DD></DL>
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of ranges to compare with. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020700">compare</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compare (IntRanges other, IIntRangeComparator judge);
</FONT></PRE>
<P><P>Compares this set of ranges to another. 

<P><B>Return Value:</B> <P>Returns the following: 
<DL>
<DT><A HREF="SetComparison.htm#com_000300141a020006">OVERLAP</A> 
 </DT><DD>the sets of integers are not equal, but have a common set of integers. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020001">DISJOINT</A> 
 </DT><DD>the sets of integers have no integers in common 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020007">SUBSET</A> 
 </DT><DD>the second set of integers includes all of the integers in the first set, plus some integers that are not in the first set. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020005">EQUAL</A> 
 </DT><DD>the sets of integers are identical 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020008">SUPERSET</A> 
 </DT><DD>the first set of integers includes all of the integers in the second set, plus some integers that are not in the second set. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020002">EMPTY</A> 
 </DT><DD>both sets of integers are empty. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020003">EMPTY_SUBSET</A> 
 </DT><DD><I>pairs1</I> is empty and <I>pairs2</I> is not empty. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020004">EMPTY_SUPERSET</A> 
 </DT><DD><I>pairs2</I> is empty and <I>pairs1</I> is not empty. 
</DD></DL>
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of ranges to compare with. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A helper interface for the comparison. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020800">compareSet</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int compareSet (Object other);
</FONT></PRE>
<P><P>Compares this set of ranges to another. 

<P><B>Return Value:</B> <P>Returns <A HREF="SetComparison.htm#com_000300141a020001">SetComparison.DISJOINT</A> if <I>other</I> is not an instance of <A HREF="IntRanges.htm">IntRanges</A>, or else a <A HREF="SetComparison.htm#com_000300141a010100">SetComparison.compareSet</A> result: 
<DL>
<DT><A HREF="SetComparison.htm#com_000300141a020006">SetComparison.OVERLAP</A> 
 </DT><DD>The sets of integers are not equal but have a common set of integers. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020001">SetComparison.DISJOINT</A> 
 </DT><DD>The sets of integers have no integers in common. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020007">SetComparison.SUBSET</A> 
 </DT><DD><I>other</I> includes all the integers in this set, plus some integers that are not in this set. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020005">SetComparison.EQUAL</A> 
 </DT><DD>The sets of integers are identical. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020008">SetComparison.SUPERSET</A> 
 </DT><DD>This set of integers includes all of the integers in <I>other</I>, plus some integers that are not in <I>other</I>. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020002">SetComparison.EMPTY</A> 
 </DT><DD>Both sets of integers are empty. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020003">SetComparison.EMPTY_SUBSET</A> 
 </DT><DD>This set is empty and <I>other</I> is not empty. 
</DD><DT><A HREF="SetComparison.htm#com_000300141a020004">SetComparison.EMPTY_SUPERSET</A> 
 </DT><DD><I>other</I> is empty and this set is not empty. 
</DD></DL>
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The set of ranges to compare with. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020900">ComparisonResulttoString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static String ComparisonResulttoString (int cmp);
</FONT></PRE>
<P><P>Converts comparison result flags to a string format. 

<P><B>Return Value:</B> <P>Returns the result string as follows: 
<UL><LI>"empty" (EMPTY) 
<LI>"equal" (EQUAL) 
<LI>"notequal" (DISJOINT) 
<LI>"overlap" (OVERLAP) 
<LI>"inclusive subset" (SUBSET) 
<LI>"inclusive superset" (SUPERSET) 
<LI>"empty subset" (EMPTY_SUBSET) 
<LI>"empty superset" (EMPTY_SUPERSET) 
</UL>
<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cmp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A comparison result from the <A HREF="IntRanges.htm#com_0003001408020600">compare</A> method. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020a00">condense</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void condense (IIntRangeComparator judge);
</FONT></PRE>
<P><P>Merges overlapping ranges. This method assumes the ranges have already been sorted. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The interface to help compare equal integer ranges while sorting. This parameter value can be null. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020b00">condense</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void condense ();
</FONT></PRE>
<P><P>Merges overlapping ranges. This method assumes the ranges have already been sorted. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020c00">contains</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean contains (int find);
</FONT></PRE>
<P><P>Searches from the beginning of a range for a given number. 

<P><B>Return Value:</B> <P>Returns true if the number was found; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>find</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number to search for. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>

<H4 STYLE="color:#333366"><A NAME="com_0003001408020c01">contains</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized boolean contains (int s, int e);
</FONT></PRE>
<P><P>Searches from the beginning of a range for a given range of numbers. 

<P><B>Return Value:</B> <P>Returns true if the entire search range was found; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>s</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The lower limit of the range. 
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>e</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper limit of the range. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>


<H4 STYLE="color:#333366"><A NAME="com_0003001408020d00">copy</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized IntRanges copy ();
</FONT></PRE>
<P><P>Creates a copy of the set of ranges. 

<P><B>Return Value:</B> <P>Returns an identical object to this object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020e00">getRangeEnd</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getRangeEnd (int idx);
</FONT></PRE>
<P><P>Retrieves the end of a range at a specified index. 

<P><B>Return Value:</B> <P>Returns the last integer of the range pair. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>idx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the range pair. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408020f00">getRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized int[] getRanges ();
</FONT></PRE>
<P><P>Retrieves the integer range pairs as an integer array. 

<P><B>Return Value:</B> <P>Returns the integer ranges. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021000">getRangeStart</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int getRangeStart (int idx);
</FONT></PRE>
<P><P>Retrieves the start of a range at a specified index. 

<P><B>Return Value:</B> <P>Returns the first integer of the range pair. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>idx</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the range pair. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021100">indexOf</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized int indexOf (int find, int fromRange);
</FONT></PRE>
<P><P>Searches from a starting index for a range pair containing a given a number. 

<P><B>Return Value:</B> <P>Returns the index of the range pair that includes the number if found; otherwise, returns -1. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>find</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number to search for. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>fromRange</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the range pair to start the search from. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021200">indexOf</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int indexOf (int find);
</FONT></PRE>
<P><P>Searches from the beginning for a range pair containing a given number. 

<P><B>Return Value:</B> <P>Returns the index of the range pair that includes the number (if found); otherwise, returns -1. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>find</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number to search for. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021300">intersect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IntRanges intersect (IntRanges other, IIntRangeComparator judge);
</FONT></PRE>
<P><P>Constructs a new <A HREF="IntRanges.htm">IntRanges</A> object with the set of integers that are common to both this object and another object. 

<P><B>Return Value:</B> <P>Returns an IntRanges object for the intersection of this object and <I>other</I>. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The other IntRanges object to find an intersection with. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The hook interface to notify using <A HREF="IIntRangeComparator.htm#com_0003001417010200">IIntRangeComparator.intersectRanges</A> of intersecting ranges that will be added to the new <A HREF="IntRanges.htm">IntRanges</A> object. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021400">intersect</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public IntRanges intersect (IntRanges other);
</FONT></PRE>
<P><P>Constructs a new <A HREF="IntRanges.htm">IntRanges</A> object with the set of integers that are common to both this object and another object. 

<P><B>Return Value:</B> <P>Returns an <A HREF="IntRanges.htm">IntRanges</A> object for the intersection of this object and <I>other</I>. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>other</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The other <A HREF="IntRanges.htm">IntRanges</A> object to find an intersection with. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021500">invertComparisonResult</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public static int invertComparisonResult (int cmp);
</FONT></PRE>
<P><P>Inverts comparison results. 

<P><B>Return Value:</B> <P>Returns the inverted comparison result. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>cmp</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Any comparison result of the <A HREF="IntRanges.htm#com_0003001408020600">compare</A> method, which is inverted as follows: 
<UL><LI><A HREF="SetComparison.htm#com_000300141a020007">SUBSET</A> returns <A HREF="SetComparison.htm#com_000300141a020008">SUPERSET</A>. 
<LI><A HREF="SetComparison.htm#com_000300141a020008">SUPERSET</A> returns <A HREF="SetComparison.htm#com_000300141a020007">SUBSET</A>. 
<LI><B>EMPTY_SET</B> returns <A HREF="SetComparison.htm#com_000300141a020004">EMPTY_SUPERSET</A>. 
<LI><A HREF="SetComparison.htm#com_000300141a020004">EMPTY_SUPERSET</A> returns <A HREF="SetComparison.htm#com_000300141a020003">EMPTY_SUBSET</A>. 
<LI>any other result is not affected and is simply returned. Note that <A HREF="SetComparison.htm#com_000300141a020005">EQUAL</A> and <A HREF="SetComparison.htm#com_000300141a020001">DISJOINT</A> are not inverted by this function. 
</UL>
</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021600">isEmpty</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean isEmpty ();
</FONT></PRE>
<P><P>Determines if the <A HREF="IntRanges.htm">IntRanges</A> object is empty. 

<P><B>Return Value:</B> <P>Returns true if the object contains no ranges; otherwise, returns false. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021700">lock</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized boolean lock (Object key);
</FONT></PRE>
<P><P>Assigns a key and locks the <A HREF="IntRanges.htm">IntRanges</A> object. 

<P><B>Return Value:</B> <P>Returns true if successful; returns false if the object is already locked. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key object to be used for unlocking the object. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>NullPointerException</B>
 if the key is null. 


</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021800">parse</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void parse (String str, String delims);
</FONT></PRE>
<P><P>Parses the ranges in the string, separated with specified delimiters. This method tokenizes using <B>StringTokenizer</B>. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The string to be parsed. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>delims</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The delimiters. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021900">parse</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void parse (String str);
</FONT></PRE>
<P><P>Parses comma-delimited ranges in the string. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>str</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A string containing ranges of integers, where the bounds of each range are separated by a dash (-). A range of a single integer can be entered by including just the single integer, separated by delimiters. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021a00">removeRange</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean removeRange (int rs, int re);
</FONT></PRE>
<P><P>Removes a range of integers from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>Returns true if any integers in the range were removed; returns false if the set contains no integers in the range. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The lower limit of the range. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>re</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper limit of the range. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021b00">removeRange</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeRange (int i, IIntRangeComparator hook);
</FONT></PRE>
<P><P>Removes a single range specified by index from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the range to remove. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hook</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The interface to notify through <A HREF="IIntRangeComparator.htm#com_0003001417010500">IIntRangeComparator.shiftRanges</A> that the ranges were deleted. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021c00">removeRange</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeRange (int i);
</FONT></PRE>
<P><P>Removes a single range specified by index from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the range to remove. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021d00">removeRange</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized boolean removeRange (int s, int e,
        IIntRangeComparator hook);
</FONT></PRE>
<P><P>Removes a range of integers from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>Returns true if any integers in the range were removed; returns false if the set contains no integers in the range. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>rs</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The lower limit of the range. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>re</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The upper limit of the range. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hook</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The interface to notify through <A HREF="IIntRangeComparator.htm#com_0003001417010500">IIntRangeComparator.shiftRanges</A> that the ranges were deleted or <A HREF="IIntRangeComparator.htm#com_0003001417010600">IIntRangeComparator.splitRange</A> that a range was split. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021e00">removeRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void removeRanges (int i, int count,
        IIntRangeComparator hook);
</FONT></PRE>
<P><P>Removes ranges specified by index from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The index of the range to remove. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>count</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The number ranges to remove. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hook</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The interface to notify through <A HREF="IIntRangeComparator.htm#com_0003001417010500">IIntRangeComparator.shiftRanges</A> that the ranges were deleted. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408021f00">removeRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void removeRanges (int i, int count);
</FONT></PRE>
<P><P>Removes ranges specified by index from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>i</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">the index of the range to remove. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>count</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">the number ranges to remove. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022000">removeSingleton</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean removeSingleton (int n);
</FONT></PRE>
<P><P>Removes a single integer from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>Returns true if the integer was removed returns false if the integer was not found in the set. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>n</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The integer to remove. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022100">removeSingleton</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public boolean removeSingleton (int n, IIntRangeComparator hook);
</FONT></PRE>
<P><P>Removes a single integer from the <B>IntRange</B> object. 

<P><B>Return Value:</B> <P>Returns true if the integer was removed. This method returns false if the integer was not found in the set. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>n</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The integer to remove. 


</FONT></TD></TR><TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>hook</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The interface to notify through <A HREF="IIntRangeComparator.htm#com_0003001417010500">IIntRangeComparator.shiftRanges</A> that ranges were deleted or <A HREF="IIntRangeComparator.htm#com_0003001417010600">IIntRangeComparator.splitRange</A> that a range was split. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022200">setRanges</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void setRanges (int[] array);
</FONT></PRE>
<P><P>Sets the integer ranges from an existing integer array. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>array</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The array of integer ranges. Each range is specified by two adjacent integers in this array. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022300">size</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public int size ();
</FONT></PRE>
<P><P>Retrieves the size of the <A HREF="IntRanges.htm">IntRanges</A> object. 

<P><B>Return Value:</B> <P>Returns the number of elements in the object. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022400">sort</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized void sort (IIntRangeComparator judge);
</FONT></PRE>
<P><P>Sorts the ranges by the first element in each range pair. 

<P><B>Return Value:</B> <P>No return value. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>judge</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The interface to help compare equal ranges while sorting. This parameter value can be null. 

</FONT></TD></TR></TABLE>
</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022500">sort</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public void sort ();
</FONT></PRE>
<P><P>Sorts the ranges by left endpoints. 

<P><B>Return Value:</B> <P>No return value. 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022600">toString</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public String toString ();
</FONT></PRE>
<P><P>Retrieves a string representation of the <A HREF="IntRanges.htm">IntRanges</A> object. 

<P><B>Return Value:</B> <P>Returns a string containing "{" followed by the set of integer range pairs, followed by "}". 

</BLOCKQUOTE>
<H4 STYLE="color:#333366"><A NAME="com_0003001408022700">unlock</A></H4><BLOCKQUOTE>
<PRE><FONT FACE="Courier" SIZE="2">public synchronized boolean unlock (Object key);
</FONT></PRE>
<P><P>Unlocks the <A HREF="IntRanges.htm">IntRanges</A> using a previously-assigned key. 

<P><B>Return Value:</B> <P>Returns true if the object is successfully unlocked; otherwise, returns false. 

<P><TABLE WIDTH=87% BORDER=1 CELLPADDING=5 CELLSPACING=0>
<TR VALIGN=TOP BGCOLOR="#DDDDDD">
<TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Parameter</B></FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><B>Description</B></FONT></TD></TR>
<TR VALIGN=TOP><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE=2><I>key</I>
 </FONT></TD><TD><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The key object previously assigned to lock the object. 

</FONT></TD></TR></TABLE>
<P><B>Exceptions:</B> <P><B>NullPointerException</B>
 if the key is null. 


</BLOCKQUOTE>
<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="upnrm.gif"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>

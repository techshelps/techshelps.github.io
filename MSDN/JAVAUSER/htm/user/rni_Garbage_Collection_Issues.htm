<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Garbage Collection Issues</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY BGCOLOR="White" TOPMARGIN=0 LEFTMARGIN=0 VLINK="#006699" ALINK="#006699">
<A NAME="top"></A>
<!--TOOLBAR_START-->
<!--TOOLBAR_END-->

<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH="98%">
<TR>
<TD ROWSPAN=2 WIDTH=114 ALIGN="LEFT" VALIGN="TOP">
<IMG SRC="art/title_x3.gif" WIDTH="112" HEIGHT="108"  BORDER=0 ALT="Introduction to Using the Raw Native Interface"><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH="100%">
<TR><TD WIDTH=10>&nbsp;</TD><TD VALIGN="top"><FONT FACE="Verdana,Arial,Helvetica" SIZE=1><B STYLE="color:#006699">In this topic</B><P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="rni_Garbage_Collection_Issues.htm#rniintro_0008010205010000">Protecting Objects on the Stack</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="rni_Garbage_Collection_Issues.htm#rniintro_0008010205020000">Protecting Objects in Allocated Memory</A>
<P><IMG SRC="art/linkbull.gif" WIDTH="10" HEIGHT="8"  BORDER=0 ALT="*"><A STYLE="color: #333366;text-decoration:none" HREF="rni_Garbage_Collection_Issues.htm#rniintro_0008010205030000">Calling Back To Java</A>
</FONT></TD></TR></TABLE>
</TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="LEFT" VALIGN="TOP">
<P>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="0">
<TR>
<TD WIDTH="365" VALIGN="bottom"><IMG SRC="art/jnative2.gif" WIDTH="365" HEIGHT="27"  BORDER=0 ALT="Java & Native Code"></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="bottom">&nbsp;</TD><TD ALIGN="center" VALIGN="bottom"><A HREF="rni_Accessing_Fields.htm"><IMG SRC="art/prevnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Previous"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="rni_introduction.htm"><IMG SRC="art/homenrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="RNI"></A></TD><TD ALIGN="center" VALIGN="bottom"><A HREF="rni_0000.htm"><IMG SRC="art/nextnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Next"></A></TD></TR>
<TR>
<TD WIDTH="365" ALIGN="right" VALIGN="top"><FONT COLOR="#006699" SIZE="4" FACE="VERDANA,ARIAL,HELVETICA"><B>Introduction to Using the Raw Native Interface</B></FONT></TD>
<TD WIDTH=20>&nbsp;</TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">&nbsp;</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Previous</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">RNI</FONT></TD>
<TD ALIGN="center" VALIGN="top"><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1">Next</FONT></TD>
</TR>
</TABLE>
</TD>
</TR>
<TR>
<TD WIDTH=20>&nbsp;</TD>
<TD>
<BR>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<BR><BR><H2 STYLE="color:#333366">Garbage Collection Issues</H2>
<P>These sections describe the issues associated with garbage collection.

<H3 STYLE="color:#333366"><A NAME="rniintro_0008010205010000">Protecting Objects on the Stack</A></H3><P>By default, garbage collection cannot occur while native code is executing (other threads that try to do any garbage collection will block until the thread in native code returns to Java). This is probably the most important issue as far as native code and garbage collection are concerned. The reason for this is so the VM can avoid conservative scanning of native stacks, which is often unreliable and can be a "bottleneck" to performance.
<P>A lot of native code does some quick calculation and returns, so this isn't a problem. However, if the native code is going to perform some operation that takes some time, explicitly enable and disable garbage collection around the slow code. <P>Of course, enabling garbage collection means that any objects could move at any time, invalidating any pointers to those objects in native code. The simplest way to handle this is to inform the garbage collector of objects you're interested in before enabling garbage collection using a GCFrame() with GCFramePush(). Object pointers kept in a GCFrame will be automatically updated if the object gets moved. When you're done, you can inform the garbage collector using GCFramePop(). The following is a typical example.

<PRE><FONT FACE="Courier" SIZE="2">    void some_java_method(HObject *phobj1Unsafe, HObject *phobj2Unsafe)
    {
        // Keep a structure with all the objects we're interested in.
        struct
        {
            HObject *phobj1Safe;
&#009;&#009;&#009;HObject *phobj2Safe;
        } gc;
        
        // Declare a GCFrame;
        GCFrame gcf;         

        // Tell the garbage collector about our structure, it will initialize this
        // structure to null.
        GCFramePush(&amp;gcf, &amp;gc, sizeof(gc));

        // Set the object ptr.
        gc.phobj1Safe = phobj1Unsafe;
&#009;&#009;gc.phobj2Safe = phobj2Unsafe;

        // It's now safe to enable garbage collection.
        GCEnable();

        // ...time passes...garbage collection occurs...objects move...

        // Disable gargbage collection so we can access objects safely.
        GCDisable();
         
        // If GC moved our object then gc.hobjSafe will have been automatically
        // updated.
        
        gc.phobj1Safe-&gt;x = 42;
&#009;&#009;gc.phobj2Safe-&gt;y = 33;
         
        // We're done.
        GCFramePop(&amp;gcf);
    }
        </FONT></PRE>
<P><B>Note</B>  <UL><LI>Garbage collection is disabled in between <A HREF="rniref.htm#rniref_0008010401004e00">PrepareThreadForJava</A> and <A href="rniref.htm#rniref_0008010401005300">UnprepareThreadForJava</A>. <LI>You must enable GC as many times as you disabled it. <LI>Call GCFramePop() before returning from native code back in to Java. <LI>GCFrames are "strong", in the sense that having an object in GCFrame is considered to be equivalent to having a reference to that object so it won't be released by the garbage collector. 
</UL>
<H3 STYLE="color:#333366"><A NAME="rniintro_0008010205020000">Protecting Objects in Allocated Memory</A></H3><P>GCFrames are ideal for protecting objects on the stack, but not in situations where you want to keep an object pointer longer than the lifetime of the function in global memory. For situations like this, use GCGetWeakPtr() and GCFreeWeakPtr() instead:

<PRE><FONT FACE="Courier" SIZE="2">    HObject **pphobjSafe = NULL;
    
    void some_java_methodA(HObject *phobjUnsafe)
    {
        // Allocate a weak ptr that we want to use later.
        pphobjSafe = GCGetWeakPtr(phobjUnsafe);
    }

    void some_java_methodB()
    {
        // Use the weak ptr we saved previously.
        *pphobjSafe-&gt;x = 42;
        GCFreeWeakPtr(pphobjSafe);
    }
</FONT></PRE>
<P>As their names imply, these APIs create "weak" pointers to objects so that they can be freed by the garbage collector if no more references exist. At this point, the weak pointer becomes automatically invalid: Do not call GCFreeWeakPtr() on it. If you know the object is not freed by the garbage collector, call GCFreeWeakPtr() when you no longer need to keep track of it.

<H3 STYLE="color:#333366"><A NAME="rniintro_0008010205030000">Calling Back To Java</A></H3><P>If you call back to Java from native code, garbage collection may automatically be enabled by the Virtual Machine if memory needs to be allocated. This means that any object pointers you want to use after the call must be protected, either in a GCFrame or tracked by a weak pointer.


<P>
</FONT>
</TD>
</TR>
</TABLE>
<CENTER>
<P><TABLE WIDTH="95%"><TR><TD HEIGHT=1 BGCOLOR="RED"></TD></TR></TABLE>
<TABLE WIDTH="100%"><TR>
<TD ALIGN="left"><A HREF="#top"><IMG SRC="art/upnrm.gif" WIDTH="51" HEIGHT="38"  BORDER=0 ALT="Top"></A></TD>
<TD ALIGN="right">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><A HREF="cpyright.htm">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of use.</A></FONT></TD></TR></TABLE>
</CENTER>
</BODY></HTML>
